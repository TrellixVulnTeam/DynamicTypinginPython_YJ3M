commit 04aac90f2d885e3c6931c6c33eae3f813535206f
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Dec 10 18:29:53 2009 +0000

    fixed up docstrings. changed Series.__new__ back to NOT copy the input data (causes problems in DataMatrix.__getitem__ when you want to modify a column in-place)
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@84 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/daterange.py b/pandas/core/daterange.py
index c508d06f3..3c583cceb 100644
--- a/pandas/core/daterange.py
+++ b/pandas/core/daterange.py
@@ -2,7 +2,9 @@
 # pylint: disable-msg=E1103
 
 from datetime import datetime
+
 import numpy as np
+
 from pandas.core.index import Index
 from pandas.lib.tseries import map_indices
 import pandas.core.datetools as datetools
@@ -12,26 +14,29 @@ import pandas.core.datetools as datetools
 
 class XDateRange(object):
     """
-    XDateRange/DateRange generate a sequence of dates corresponding to the
-    specified time interval.
+    XDateRange generates a sequence of dates corresponding to the
+    specified time offset
 
-    Inputs:
-         - toDate and/or fromDate and/or nPeriods (but not all 3)
-         - offset: a DateOffset object used to determine the dates returned
-
-    Note that if both fromDate and toDate are specified, the returned dates
-    will satisfy:
+    Note
+    ----
+    If both fromDate and toDate are specified, the returned dates will
+    satisfy:
 
     fromDate <= date <= toDate
 
-    In other words, dates are constrained to lie in the specifed range as you
-    would expect, though no dates which do NOT lie on the offset will be
-    returned.
+    In other words, dates are constrained to lie in the specifed range
+    as you would expect, though no dates which do NOT lie on the
+    offset will be returned.
+
+    XDateRange is a generator, use if you do not intend to reuse the
+    date range, or if you are doing lazy iteration, or if the number
+    of dates you are generating is very large. If you intend to reuse
+    the range, use DateRange, which will be the list of dates
+    generated by XDateRange.
 
-    NOTE: XDateRange is a generator, use if you do not intend to reuse the date
-    range, or if you are doing lazy iteration, or if the number of dates you
-    are generating is very large. If you intend to reuse the range,
-    use DateRange, which will be the list of dates generated by XDateRange.
+    See also
+    --------
+    DateRange
     """
     _cache = {}
     _cacheStart = {}
@@ -103,15 +108,15 @@ class DateRange(Index):
 
     Parameters
     ----------
-    fromDate: {datetime, None}
+    fromDate : {datetime, None}
         left boundary for range
-    toDate: {datetime, None}
+    toDate : {datetime, None}
         right boundary for range
-    periods: int
+    periods : int
         Number of periods to generate.
-    offset: DateOffset, default is 1 BusinessDay
+    offset : DateOffset, default is 1 BusinessDay
         Used to determine the dates returned
-    timeRule: timeRule to use
+    timeRule : timeRule to use
     """
     _cache = {}
     def __new__(cls, fromDate=None, toDate=None, periods=None,
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index ba4a84b4f..a76dea3c2 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -38,9 +38,9 @@ class DataFrame(Picklable, Groupable):
 
     Parameters
     ----------
-    data: dict
+    data : dict
         Mapping of column name --> array or Series/TimeSeries objects
-    index: array-like
+    index : array-like
         Specific index to use for the Frame, Series will be conformed to this
         if you provide it.
 
@@ -113,9 +113,9 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        input: dict object
+        input : dict object
             Keys become column names of returned frame
-        kwds: optionally provide arguments as keywords
+        kwds : optionally provide arguments as keywords
 
         Returns
         -------
@@ -189,7 +189,7 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        input: NumPy structured array
+        input : NumPy structured array
 
         Returns
         -------
@@ -229,11 +229,11 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        mat: ndarray
+        mat : ndarray
             Dimension T x N
-        colNames: iterable
+        colNames : iterable
             Dimension N
-        rowNames: iterable
+        rowNames : iterable
             Dimension T
 
         Returns
@@ -474,8 +474,8 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        other: constant, array, or DataFrame/Matrix
-        func: function taking two arguments
+        other : constant, array, or DataFrame/Matrix
+        func : function taking two arguments
 
         Example
         -------
@@ -628,10 +628,10 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        offset: DateOffset object, or string in {'WEEKDAY', 'EOM'}
+        offset : DateOffset object, or string in {'WEEKDAY', 'EOM'}
             DateOffset object or subclass (e.g. monthEnd)
 
-        fillMethod: {'backfill', 'pad', 'interpolate', None}
+        fillMethod : {'backfill', 'pad', 'interpolate', None}
                     Method to use for filling holes in new inde
         """
         if isinstance(freq, datetools.DateOffset):
@@ -699,7 +699,7 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        specificColumns: list-like, optional keyword
+        specificColumns : list-like, optional keyword
             Columns to consider in removing NaN values. As a typical
             application, you might provide the list of the columns involved in
             a regression to exlude all the missing data in one shot.
@@ -718,10 +718,10 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        minObs: int or None (default)
+        minObs : int or None (default)
            Instead of requiring all the columns to have observations, require
            only minObs observations
-        specificColumns: list-like, optional keyword
+        specificColumns : list-like, optional keyword
             Columns to consider in removing NaN values. As a typical
             application, you might provide the list of the columns involved in
             a regression to exlude all the missing data in one shot.
@@ -757,10 +757,10 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        method: {'backfill', 'pad', None}
+        method : {'backfill', 'pad', None}
             Method to use for filling holes in new inde
 
-        value: any kind (should be same type as array)
+        value : any kind (should be same type as array)
             Value to use to fill holes (e.g. 0)
 
         Returns
@@ -785,12 +785,14 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        colName: particular column name requested
-        fromDate: datetime
-        toDate: datetime
-        nPeriods: int/float
+        colName : particular column name requested
+        fromDate : datetime
+        toDate : datetime
+        nPeriods : int/float
 
-        NOTE: Error thrown if all of fromDate, toDate, nPeriods specified.
+        Note
+        ----
+        Error thrown if all of fromDate, toDate, nPeriods specified.
         """
         if toDate:
             if toDate not in self.index:
@@ -868,10 +870,10 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        key: some index contained in the index
-        subset: iterable (list, array, set, etc.), optional
+        key : some index contained in the index
+        subset : iterable (list, array, set, etc.), optional
             columns to be included
-        asOf: boolean, optional
+        asOf : boolean, optional
             Whether to use asOf values for TimeSeries objects
             Won't do anything for Series objects.
 
@@ -896,11 +898,11 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        index: string or object
+        index : string or object
             Column name to use to make new frame's index
-        columns: string or object
+        columns : string or object
             Column name to use to make new frame's columns
-        values: string or object
+        values : string or object
             Column name to use for populating new frame's values
         """
         from pandas.core.panel import _slow_pivot
@@ -913,9 +915,9 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        newIndex:   array-like
+        newIndex :   array-like
             preferably an Index object (to avoid duplicating data)
-        fillMethod: {'backfill', 'pad', 'interpolate', None}
+        fillMethod : {'backfill', 'pad', 'interpolate', None}
             Method to use for filling holes in reindexed DataFrame
         """
         if newIndex is self.index:
@@ -1030,16 +1032,17 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        func: function
+        func : function
             Function to apply to each column
 
         Example
         -------
-
             >>> df.apply(numpy.sqrt) --> DataFrame
             >>> df.apply(numpy.sum) --> Series
 
-        N.B.: Do NOT use functions that might toy with the index.
+        Note
+        ----
+        Do NOT use functions that might toy with the index.
         """
         if not len(self.cols()):
             return self
@@ -1077,7 +1080,7 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        func: function
+        func : function
             Python function to apply to each element
         """
         results = {}
@@ -1097,7 +1100,7 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        items: list-like
+        items : list-like
             List of columns to restrict to (must not all be present)
 
         Returns
@@ -1142,7 +1145,7 @@ class DataFrame(Picklable, Groupable):
 
         Parameter
         ---------
-        arg: string
+        arg : string
 
         Return
         ------
@@ -1160,12 +1163,14 @@ class DataFrame(Picklable, Groupable):
         Combine two DataFrame / DataMatrix objects and default to value
         in frame calling the method.
 
-        Example: a.combineFirst(b)
-            a's values prioritized, use values from b to fill holes
-
         Parameters
         ----------
-        otherFrame: DataFrame / Matrix
+        otherFrame : DataFrame / Matrix
+
+        Example
+        -------
+        a.combineFirst(b)
+            a's values prioritized, use values from b to fill holes
 
         Returns
         -------
@@ -1209,7 +1214,7 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        otherFrame: DataFrame / Matrix
+        otherFrame : DataFrame / Matrix
 
         Returns
         -------
@@ -1277,7 +1282,7 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        *frames: list-like
+        *frames : list-like
             List of frames (DataMatrix or DataFrame) as function arguments
 
         Returns
@@ -1301,9 +1306,9 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        other: DataFrame
+        other : DataFrame
             Index should be similar to one of the columns in this one
-        on: string
+        on : string
             Column name to use
 
         Example
@@ -1348,12 +1353,14 @@ class DataFrame(Picklable, Groupable):
 
         Params
         ------
-        kind: {'line', 'bar', 'hist'}
+        kind : {'line', 'bar', 'hist'}
             Default: line for TimeSeries, hist for Series
 
-        kwds: other plotting keyword arguments
+        kwds : other plotting keyword arguments
 
-        NOTE: This method doesn't make much sense for cross-sections,
+        Note
+        ----
+        This method doesn't make much sense for cross-sections,
         and will error.
         """
         from pylab import plot
@@ -1369,9 +1376,9 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        axis: {0, 1}
+        axis : {0, 1}
             0 for row-wise, 1 for column-wise
-        asarray: boolean, default False
+        asarray : boolean, default False
             Choose to return as ndarray or have index attached
 
         Returns
@@ -1403,9 +1410,9 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        axis: {0, 1}
+        axis : {0, 1}
             0 for row-wise, 1 for column-wise
-        asarray: boolean, default False
+        asarray : boolean, default False
             Choose to return as ndarray or have index attached
 
         Returns
@@ -1455,9 +1462,9 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        axis: {0, 1}
+        axis : {0, 1}
             0 for row-wise, 1 for column-wise
-        asarray: boolean, default False
+        asarray : boolean, default False
             Choose to return as ndarray or have index attached
 
         Returns
@@ -1493,7 +1500,7 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        axis: {0, 1}
+        axis : {0, 1}
             0 for row-wise, 1 for column-wise
 
         Returns
@@ -1508,7 +1515,7 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        axis: {0, 1}
+        axis : {0, 1}
             0 for row-wise, 1 for column-wise
 
         Returns
@@ -1530,7 +1537,7 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        axis: {0, 1}
+        axis : {0, 1}
             0 for row-wise, 1 for column-wise
 
         Returns
@@ -1552,7 +1559,7 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        axis: {0, 1}
+        axis : {0, 1}
             0 for row-wise, 1 for column-wise
 
         Returns
@@ -1575,9 +1582,9 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        axis: {0, 1}
+        axis : {0, 1}
             0 for row-wise, 1 for column-wise
-        asarray: boolean, default False
+        asarray : boolean, default False
             Choose to return as ndarray or have index attached
 
         Returns
@@ -1606,9 +1613,9 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        axis: {0, 1}
+        axis : {0, 1}
             0 for row-wise, 1 for column-wise
-        asarray: boolean, default False
+        asarray : boolean, default False
             Choose to return as ndarray or have index attached
 
         Returns
@@ -1639,9 +1646,9 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        axis: {0, 1}
+        axis : {0, 1}
             0 for row-wise, 1 for column-wise
-        asarray: boolean, default False
+        asarray : boolean, default False
             Choose to return as ndarray or have index attached
 
         Returns
@@ -1656,9 +1663,9 @@ class DataFrame(Picklable, Groupable):
 
         Parameters
         ----------
-        axis: {0, 1}
+        axis : {0, 1}
             0 for row-wise, 1 for column-wise
-        asarray: boolean, default False
+        asarray : boolean, default False
             Choose to return as ndarray or have index attached
 
         Returns
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 50315fa77..f48f90a09 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -136,9 +136,9 @@ class SeriesGroupBy(GroupBy):
 
         Parameters
         ----------
-        mapper: function
+        mapper : function
             Called on each element of the Series index to determine the groups
-        applyfunc: function
+        applyfunc : function
             Function to use to aggregate each group
 
         Returns
@@ -192,15 +192,19 @@ class SeriesGroupBy(GroupBy):
         on this sub-Series. Return a Series of the results for each
         key.
 
-        Note: this function does not aggregate like groupby/tgroupby,
-        the results of the given function on the subSeries should be another
-        Series.
-
         Parameters
         ----------
-        mapper:    function which, on being called on each element of the Series
-                   index, determines the groups.
-        applyfunc: function to apply to each group
+        mapper : function
+            on being called on each element of the Series
+            index, determines the groups.
+
+        applyfunc : function to apply to each group
+
+        Note
+        ----
+        This function does not aggregate like groupby/tgroupby,
+        the results of the given function on the subSeries should be another
+        Series.
 
         Example
         -------
@@ -248,10 +252,10 @@ class DataFrameGroupBy(GroupBy):
 
         Parameters
         ----------
-        mapper: function, dict-like, or string
+        mapper : function, dict-like, or string
             Mapping or mapping function. If string given, must be a column
             name in the frame
-        applyfunc: function
+        applyfunc : function
             Function to use for aggregating groups
 
         N.B.: applyfunc must produce one value from a Series, otherwise
@@ -284,10 +288,10 @@ class DataFrameGroupBy(GroupBy):
 
         Parameters
         ----------
-        mapper: function, dict-like, or string
+        mapper : function, dict-like, or string
             Mapping or mapping function. If string given, must be a column
             name in the frame
-        applyfunc: function
+        applyfunc : function
             Function to apply to each subframe
 
         Note
@@ -326,10 +330,10 @@ class DataMatrixGroupBy(DataFrameGroupBy):
 
         Parameters
         ----------
-        mapper: function, dict-like, or string
+        mapper : function, dict-like, or string
             Mapping or mapping function. If string given, must be a column
             name in the frame
-        applyfunc: function
+        applyfunc : function
             Function to use to aggregate each group
         """
         result = {}
@@ -357,9 +361,9 @@ class DataMatrixGroupBy(DataFrameGroupBy):
 
         Parameters
         ----------
-        mapper: function
+        mapper : function
             Function to apply to each index value
-        applyfunc: function
+        applyfunc : function
             Function to apply to each subframe
 
         Note
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 869f4f481..768263b48 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -160,7 +160,7 @@ class Index(np.ndarray):
 
         Parameters
         ----------
-        other: Index or array-like
+        other : Index or array-like
 
         Returns
         -------
@@ -191,7 +191,7 @@ class Index(np.ndarray):
 
         Parameters
         ----------
-        other: Index or array-like
+        other : Index or array-like
 
         Returns
         -------
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index 0d0f39cd8..4ca69356f 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -26,12 +26,12 @@ class DataMatrix(DataFrame):
 
     Constructor params
     ------------------
-    data: numpy ndarray or dict of Series
+    data : numpy ndarray or dict of Series
         Constructor can understand various kinds of inputs
-    index: Index or array-like
+    index : Index or array-like
         Index to use for resulting frame (optional if provided dict of Series)
-    columns: Index or array-like
-    dtype: dtype, default=float
+    columns : Index or array-like
+    dtype : dtype, default=float
         Data type to use
 
     Notes
@@ -223,9 +223,9 @@ class DataMatrix(DataFrame):
 
         Parameters
         ----------
-        input: dict object
+        input : dict object
             Keys become column names of returned frame
-        kwds: optionally provide arguments as keywords
+        kwds : optionally provide arguments as keywords
 
         Example
         -------
@@ -264,11 +264,11 @@ class DataMatrix(DataFrame):
 
         Parameters
         ----------
-        mat: ndarray
+        mat : ndarray
             Dimension T x N
-        colNames: iterable
+        colNames : iterable
             Dimension N
-        rowNames: iterable
+        rowNames : iterable
             Dimension T
 
         Returns
@@ -302,15 +302,15 @@ class DataMatrix(DataFrame):
 
         Parameters
         ----------
-        path: string
+        path : string
             Output file path
-        nanRep: string, default=''
+        nanRep : string, default=''
             Appearance of NaN values in output
-        index: boolean, default=True
+        index : boolean, default=True
             Prints index if True
-        header: boolean, default=True
+        header : boolean, default=True
             Prints header if True
-        cols: list of strings
+        cols : list of strings
             Prints the values in order specified by cols.
             By default, prints all columns in lexicographical order.
         """
@@ -530,9 +530,9 @@ class DataMatrix(DataFrame):
 
         Possible inputs
         ---------------
-        single value: retrieve a column as a Series
-        slice: reindex to indices specified by slice
-        boolean vector: like slice but more general, reindex to indices
+        single value : retrieve a column as a Series
+        slice : reindex to indices specified by slice
+        boolean vector : like slice but more general, reindex to indices
           where the input vector is True
 
         Examples
@@ -906,7 +906,7 @@ class DataMatrix(DataFrame):
 
         Parameters
         ----------
-        columns: list-like
+        columns : list-like
             columns to use in producing matrix, must all be contained
 
         Returns
@@ -944,9 +944,9 @@ class DataMatrix(DataFrame):
 
         Parameters
         ----------
-        axis: {0, 1}
+        axis : {0, 1}
             0 for row-wise, 1 for column-wise
-        asarray: boolean, default False
+        asarray : boolean, default False
             Choose to return as ndarray or have index attached
         """
         y = np.array(self.values, subok=True)
@@ -965,7 +965,7 @@ class DataMatrix(DataFrame):
 
         Parameters
         ----------
-        specificColumns: list-like, optional keyword
+        specificColumns : list-like, optional keyword
             Columns to consider in removing NaN values. As a typical
             application, you might provide the list of the columns involved in
             a regression to exclude all the missing data in one shot.
@@ -989,10 +989,10 @@ class DataMatrix(DataFrame):
 
         Parameters
         ----------
-        minObs: int or None (default)
+        minObs : int or None (default)
            Instead of requiring all the columns to have observations, require
            only minObs observations
-        specificColumns: list-like, optional keyword
+        specificColumns : list-like, optional keyword
             Columns to consider in removing NaN values. As a typical
             application, you might provide the list of the columns involved in
             a regression to exlude all the missing data in one shot.
@@ -1022,10 +1022,10 @@ class DataMatrix(DataFrame):
 
         Parameters
         ----------
-        value: any kind (should be same type as array)
+        value : any kind (should be same type as array)
             Value to use to fill holes (e.g. 0)
 
-        method: {'backfill', 'pad', None}
+        method : {'backfill', 'pad', None}
             Method to use for filling holes in new inde
 
         Returns
@@ -1091,11 +1091,11 @@ class DataMatrix(DataFrame):
 
         Parameters
         ----------
-        colName: string or None
+        colName : string or None
             particular column name requested, fine to leave blank
-        fromDate: datetime
-        toDate: datetime
-        nPeriods: int/float
+        fromDate : datetime
+        toDate : datetime
+        nPeriods : int/float
 
         Note
         ----
@@ -1161,10 +1161,10 @@ class DataMatrix(DataFrame):
 
         Parameters
         ----------
-        key: some index contained in the index
-        subset: iterable (list, array, set, etc.), optional
+        key : some index contained in the index
+        subset : iterable (list, array, set, etc.), optional
             columns to be included
-        asOf: boolean, optional
+        asOf : boolean, optional
             Whether to use asOf values for TimeSeries objects
             Won't do anything for Series objects.
 
@@ -1199,9 +1199,9 @@ class DataMatrix(DataFrame):
 
         Parameters
         ----------
-        otherFrame: DataFrame
+        otherFrame : DataFrame
             Index should be similar to one of the columns in this one
-        on: string
+        on : string
             Column name to use
 
         Example
@@ -1252,9 +1252,9 @@ class DataMatrix(DataFrame):
 
         Parameters
         ----------
-        newIndex:   array-like
+        newIndex :   array-like
             preferably an Index object (to avoid duplicating data)
-        fillMethod: {'backfill', 'pad', 'interpolate', None}
+        fillMethod : {'backfill', 'pad', 'interpolate', None}
             Method to use for filling holes in reindexed DataFrame
 
         Returns
@@ -1323,11 +1323,11 @@ class DataMatrix(DataFrame):
 
         Parameters
         ----------
-        periods: int (+ or -)
+        periods : int (+ or -)
             Number of periods to move
-        offset: DateOffset, optional
+        offset : DateOffset, optional
             Increment to use from datetools module
-        timeRule: string
+        timeRule : string
             Time rule to use by name
 
         Returns
@@ -1362,7 +1362,7 @@ class DataMatrix(DataFrame):
 
         Parameters
         ----------
-        func: function
+        func : function
             Function to apply to each column
 
         Example
@@ -1416,10 +1416,10 @@ class DataMatrix(DataFrame):
 
         Parameters
         ----------
-        func: function
+        func : function
             Python function, returns a single value from a single value
 
-        Note: try to avoid using this function if you can, very slow.
+        Note : try to avoid using this function if you can, very slow.
         """
         npfunc = np.frompyfunc(func, 1, 1)
         results = npfunc(self.values)
@@ -1437,7 +1437,7 @@ class DataMatrix(DataFrame):
 
         Parameters
         ----------
-        items: list-like
+        items : list-like
             List of columns to restrict to (must not all be present)
 
         Returns
@@ -1460,7 +1460,7 @@ class DataMatrix(DataFrame):
 
         Parameter
         ---------
-        arg: string
+        arg : string
 
         Return
         ------
@@ -1495,12 +1495,12 @@ class DataMatrix(DataFrame):
         Combine two DataFrame / DataMatrix objects and default to value
         in frame calling the method.
 
-        Example: a.combineFirst(b)
+        Example : a.combineFirst(b)
             a's values prioritized, use values from b to fill holes
 
         Parameters
         ----------
-        otherFrame: DataFrame / Matrix
+        otherFrame : DataFrame / Matrix
 
         Returns
         -------
@@ -1544,7 +1544,7 @@ class DataMatrix(DataFrame):
 
         Parameters
         ----------
-        otherFrame: DataFrame / Matrix
+        otherFrame : DataFrame / Matrix
 
         Returns
         -------
@@ -1595,7 +1595,7 @@ class DataMatrix(DataFrame):
 
         Parameters
         ----------
-        *frames: list-like
+        *frames : list-like
             List of frames (DataMatrix or DataFrame) as function arguments
 
         Returns
@@ -1624,13 +1624,9 @@ class DataMatrix(DataFrame):
 
         Parameters
         ----------
-        *frames: list-like
+        *frames : list-like
             List of frames (DataMatrix or DataFrame) as function arguments
 
-        Keyword args
-        ------------
-        coerceTo: type or dtype
-
         Returns
         -------
         DataMatrix
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 840bb49bd..aa12b9c91 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -130,10 +130,10 @@ class WidePanel(Panel):
 
     Parameters
     ----------
-    values: ndarray (items x major x minor)
-    items: sequence
-    major_axis: sequence
-    minor_axis: sequence
+    values : ndarray (items x major x minor)
+    items : sequence
+    major_axis : sequence
+    minor_axis : sequence
     """
     def __init__(self, values, items, major_axis, minor_axis):
         self.items = items
@@ -192,9 +192,9 @@ class WidePanel(Panel):
 
         Parameters
         ----------
-        data: dict
+        data : dict
             {field : DataFrame}
-        intersect: boolean
+        intersect : boolean
 
         Returns
         -------
@@ -288,8 +288,8 @@ class WidePanel(Panel):
 
         Parameters
         ----------
-        frame: DataFrame
-        axis: {'items', 'major', 'minor'}
+        frame : DataFrame
+        axis : {'items', 'major', 'minor'}
             Axis the input corresponds to. E.g., if axis='major', then
             the frame's columns would be items, and the index would be
             values of the minor axis
@@ -308,10 +308,10 @@ class WidePanel(Panel):
 
         Parameters
         ----------
-        new_index: Index or sequence
-        axis: {'items', 'major', 'minor'}
+        new_index : Index or sequence
+        axis : {'items', 'major', 'minor'}
             Axis to reindex
-        fill_method: {'backfill', 'pad', 'interpolate', None}
+        fill_method : {'backfill', 'pad', 'interpolate', None}
             Method to use for filling holes in reindexed panel
 
         Returns
@@ -452,9 +452,9 @@ class WidePanel(Panel):
         """
         Parameters
         ----------
-        function: callable
+        function : callable
             Mapping function for chosen access
-        axis: {'major', 'minor', 'items'}, default 'major'
+        axis : {'major', 'minor', 'items'}, default 'major'
 
         Returns
         -------
@@ -482,7 +482,7 @@ class WidePanel(Panel):
 
         Parameters
         ----------
-        filter_observations: boolean, default True
+        filter_observations : boolean, default True
             Drop (major, minor) pairs without a complete set of observations
             across all the items
 
@@ -531,7 +531,7 @@ class WidePanel(Panel):
 
         Parameters
         ----------
-        items: sequence
+        items : sequence
 
         Returns
         -------
@@ -548,10 +548,10 @@ class WidePanel(Panel):
         """
         Parameters
         ----------
-        func: numpy function
+        func : numpy function
             Signature should match numpy.{sum, mean, var, std} etc.
-        axis: {'major', 'minor', 'items'}
-        fill_na: boolean, default True
+        axis : {'major', 'minor', 'items'}
+        fill_na : boolean, default True
             Replace NaN values with 0 first
 
         Returns
@@ -668,10 +668,10 @@ class LongPanelIndex(object):
 
         Parameters
         ----------
-        before: type of major_axis values or None, default None
+        before : type of major_axis values or None, default None
             None defaults to start of panel
 
-        after: type of major_axis values or None, default None
+        after : type of major_axis values or None, default None
             None defaults to after of panel
 
         Returns
@@ -791,12 +791,12 @@ class LongPanel(Panel):
 
         Parameters
         ----------
-        data: DataFrame, structured or record array, or dict
-        major_field: string
-        minor_field: string
+        data : DataFrame, structured or record array, or dict
+        major_field : string
+        minor_field : string
             Name of field
-        factors: list-like, default None
-        exclude: list-like, default None
+        factors : list-like, default None
+        exclude : list-like, default None
 
         Returns
         -------
@@ -1132,10 +1132,10 @@ class LongPanel(Panel):
 
         Parameters
         ----------
-        before: type of major_axis values or None, default None
+        before : type of major_axis values or None, default None
             None defaults to start of panel
 
-        after: type of major_axis values or None, default None
+        after : type of major_axis values or None, default None
             None defaults to end of panel
 
         Returns
@@ -1154,7 +1154,7 @@ class LongPanel(Panel):
 
         Parameters
         ----------
-        items: sequence
+        items : sequence
 
         Returns
         -------
@@ -1174,8 +1174,8 @@ class LongPanel(Panel):
 
         Parameters
         ----------
-        axis: {'major', 'minor'}, default 'minor'
-        transform: function, default None
+        axis : {'major', 'minor'}, default 'minor'
+        transform : function, default None
 
             Function to apply to axis labels first. For example, to
             get "day of week" dummies in a time series regression you might
@@ -1246,7 +1246,7 @@ class LongPanel(Panel):
 
         Parameters
         ----------
-        item: object
+        item : object
             Value in panel items Index
 
         Returns
@@ -1271,11 +1271,11 @@ class LongPanel(Panel):
 
         Parameters
         ----------
-        f: function
+        f : function
             NumPy function to apply to each group
-        axis: {'major', 'minor'}
+        axis : {'major', 'minor'}
 
-        broadcast: boolean
+        broadcast : boolean
 
         Returns
         -------
@@ -1333,7 +1333,7 @@ class LongPanel(Panel):
 
         Parameters
         ----------
-        other: LongPanel
+        other : LongPanel
         """
         assert(self.index is other.index)
 
@@ -1348,13 +1348,15 @@ class LongPanel(Panel):
 
         Parameters
         ----------
-        prefix: string
+        prefix : string
 
         Returns
         -------
         LongPanel
 
-        Note: does *not* copy values matrix
+        Note
+        ----
+        does *not* copy values matrix
         """
         new_items = [_makeItemName(item, prefix) for item in self.items]
 
@@ -1408,8 +1410,8 @@ def _homogenize(frames, intersect=True):
 
     Parameters
     ----------
-    frames: dict
-    intersect: boolean, default True
+    frames : dict
+    intersect : boolean, default True
 
     Returns
     -------
@@ -1464,11 +1466,11 @@ def pivot(index, columns, values):
 
     Parameters
     ----------
-    index: ndarray
+    index : ndarray
         Labels to use to make new frame's index
-    columns: ndarray
+    columns : ndarray
         Labels to use to make new frame's columns
-    values: ndarray
+    values : ndarray
         Values to use for populating new frame's values
 
     Note
@@ -1510,11 +1512,11 @@ def _slow_pivot(index, columns, values):
 
     Parameters
     ----------
-    index: string or object
+    index : string or object
         Column name to use to make new frame's index
-    columns: string or object
+    columns : string or object
         Column name to use to make new frame's columns
-    values: string or object
+    values : string or object
         Column name to use for populating new frame's values
 
     Could benefit from some Cython here.
diff --git a/pandas/core/series.py b/pandas/core/series.py
index e6a1cb99e..0588612d4 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -109,7 +109,7 @@ class Series(np.ndarray, Picklable, Groupable):
         >>> s[5]
         >>> s[d]    # Valid
     """
-    def __new__(cls, data, index=None, dtype=None, copy=True):
+    def __new__(cls, data, index=None, dtype=None, copy=False):
         if index is None and isinstance(data, Series):
             index = data.index
 
@@ -772,17 +772,18 @@ class Series(np.ndarray, Picklable, Groupable):
             offset = datetools.getOffset(timeRule)
 
         if offset is None:
+            newValues = np.empty(len(self), dtype=self.dtype)
+
             if periods > 0:
-                newIndex = self.index[periods:]
-                newValues = np.array(self)[:-periods]
+                newValues[periods:] = self.values()[:-periods]
+                newValues[:periods] = np.NaN
             elif periods < 0:
-                newIndex = self.index[:periods]
-                newValues = np.array(self)[-periods:]
+                newValues[:periods] = self.values()[-periods:]
+                newValues[periods:] = np.NaN
             else:
                 newValues = self.values().copy()
-                newIndex = self.index
 
-            return self.__class__(newValues, index=newIndex)
+            return self.__class__(newValues, index=self.index)
         else:
             offset = periods * offset
             newIndex = Index([idx + offset for idx in self.index])
diff --git a/pandas/core/tests/test_series.py b/pandas/core/tests/test_series.py
index 3efc3be2b..78a1ea9f8 100644
--- a/pandas/core/tests/test_series.py
+++ b/pandas/core/tests/test_series.py
@@ -445,7 +445,7 @@ class TestSeries(unittest.TestCase):
         shifted = self.ts.shift(1)
         unshifted = shifted.shift(-1)
 
-        common.assert_dict_equal(unshifted, self.ts, compare_keys=False)
+        common.assert_dict_equal(unshifted.valid(), self.ts, compare_keys=False)
 
         offset = datetools.bday
         shifted = self.ts.shift(1, offset=offset)
