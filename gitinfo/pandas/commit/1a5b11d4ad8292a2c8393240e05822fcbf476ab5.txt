commit 1a5b11d4ad8292a2c8393240e05822fcbf476ab5
Author: kernc <kerncece@gmail.com>
Date:   Sat Mar 14 21:21:11 2020 +0100

    BUG: Fix DataFrame.apply(..., raw=True) not calling with raw array (#32425)

diff --git a/doc/source/whatsnew/v1.1.0.rst b/doc/source/whatsnew/v1.1.0.rst
index 48eff0543..570c69ed5 100644
--- a/doc/source/whatsnew/v1.1.0.rst
+++ b/doc/source/whatsnew/v1.1.0.rst
@@ -335,6 +335,7 @@ Reshaping
 - Bug in :func:`concat` where the resulting indices are not copied when ``copy=True`` (:issue:`29879`)
 - :meth:`Series.append` will now raise a ``TypeError`` when passed a DataFrame or a sequence containing Dataframe (:issue:`31413`)
 - :meth:`DataFrame.replace` and :meth:`Series.replace` will raise a ``TypeError`` if ``to_replace`` is not an expected type. Previously the ``replace`` would fail silently (:issue:`18634`)
+- Bug in :meth:`DataFrame.apply` where callback was called with :class:`Series` parameter even though ``raw=True`` requested. (:issue:`32423`)
 
 
 Sparse
diff --git a/pandas/core/apply.py b/pandas/core/apply.py
index 70e0a129c..ceb45bc71 100644
--- a/pandas/core/apply.py
+++ b/pandas/core/apply.py
@@ -179,7 +179,7 @@ class FrameApply(metaclass=abc.ABCMeta):
             return self.apply_empty_result()
 
         # raw
-        elif self.raw and not self.obj._is_mixed_type:
+        elif self.raw:
             return self.apply_raw()
 
         return self.apply_standard()
diff --git a/pandas/tests/frame/test_apply.py b/pandas/tests/frame/test_apply.py
index 11705cd77..ee3cd59c2 100644
--- a/pandas/tests/frame/test_apply.py
+++ b/pandas/tests/frame/test_apply.py
@@ -235,7 +235,14 @@ class TestDataFrameApply:
         with pytest.raises(ValueError):
             df.apply(lambda x: Series([1, 2]), axis=1, result_type="broadcast")
 
-    def test_apply_raw(self, float_frame):
+    def test_apply_raw(self, float_frame, mixed_type_frame):
+        def _assert_raw(x):
+            assert isinstance(x, np.ndarray)
+            assert x.ndim == 1
+
+        float_frame.apply(_assert_raw, raw=True)
+        float_frame.apply(_assert_raw, axis=1, raw=True)
+
         result0 = float_frame.apply(np.mean, raw=True)
         result1 = float_frame.apply(np.mean, axis=1, raw=True)
 
@@ -250,6 +257,10 @@ class TestDataFrameApply:
         expected = float_frame * 2
         tm.assert_frame_equal(result, expected)
 
+        # Mixed dtype (GH-32423)
+        mixed_type_frame.apply(_assert_raw, raw=True)
+        mixed_type_frame.apply(_assert_raw, axis=1, raw=True)
+
     def test_apply_axis1(self, float_frame):
         d = float_frame.index[0]
         tapplied = float_frame.apply(np.mean, axis=1)
