commit e2570f7e568d539d07b40f0c1539b6549dc0219c
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Aug 28 23:08:41 2011 -0400

    DOC: more docs, tutorial

diff --git a/RELEASE.rst b/RELEASE.rst
index ca5f9299f..3854d3d3a 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -222,7 +222,7 @@ Release notes
 
 * `DataFrame` deprecations and de-camelCasing: `merge`, `asMatrix`,
   `toDataMatrix`, `_firstTimeWithValue`, `_lastTimeWithValue`, `toRecords`,
-  `fromRecords`, `tgroupby`
+  `fromRecords`, `tgroupby`, `toString`
 
 * `pandas.io.parsers` method deprecations
 
diff --git a/doc/source/api.rst b/doc/source/api.rst
index 522d67ec5..0e3738484 100644
--- a/doc/source/api.rst
+++ b/doc/source/api.rst
@@ -13,6 +13,10 @@ DataFrame
 
 Attributes
 ~~~~~~~~~~
+**Axes**
+
+  * **index**:
+  * **columns**:
 
 Conversion / Constructors
 ~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -180,33 +184,33 @@ Serialization / IO / Conversion
    DataFrame.to_dict
    DataFrame.to_records
    DataFrame.to_sparse
+   DataFrame.to_string
    DataFrame.save
    DataFrame.load
-   DataFrame.toString
    DataFrame.info
 
-Deprecated (death row)
-~~~~~~~~~~~~~~~~~~~~~~
-.. autosummary::
-   :toctree: generated/
+.. Deprecated (death row)
+.. ~~~~~~~~~~~~~~~~~~~~~~
+.. .. autosummary::
+..    :toctree: generated/
 
-   DataFrame.asMatrix
-   DataFrame.cols
-   DataFrame.combineFirst
-   DataFrame.dropEmptyRows
-   DataFrame.dropIncompleteRows
-   DataFrame.getXS
-   DataFrame.merge
-   DataFrame.rows
-   DataFrame.fromRecords
-   DataFrame.fromcsv
-   DataFrame.tapply
-   DataFrame.tgroupby
-   DataFrame.toRecords
-   DataFrame.toCSV
-   DataFrame.toDataMatrix
-   DataFrame.toDict
-   DataFrame.fromRecords
+..    DataFrame.asMatrix
+..    DataFrame.cols
+..    DataFrame.combineFirst
+..    DataFrame.dropEmptyRows
+..    DataFrame.dropIncompleteRows
+..    DataFrame.getXS
+..    DataFrame.merge
+..    DataFrame.rows
+..    DataFrame.fromRecords
+..    DataFrame.fromcsv
+..    DataFrame.tapply
+..    DataFrame.tgroupby
+..    DataFrame.toRecords
+..    DataFrame.toCSV
+..    DataFrame.toDataMatrix
+..    DataFrame.toDict
+..    DataFrame.fromRecords
 
 WidePanel
 ---------
diff --git a/doc/source/basics.rst b/doc/source/basics.rst
index a4a55cfc9..4c1317f3a 100644
--- a/doc/source/basics.rst
+++ b/doc/source/basics.rst
@@ -10,6 +10,12 @@ structures in pandas to get you started. The fundamental behavior about data
 types, indexing, and axis labeling / alignment apply across all of the
 objects. To get started, import numpy and load pandas into your namespace:
 
+.. ipython:: python
+   :suppress:
+
+   import numpy as np
+   np.set_printoptions(precision=4, suppress=True)
+
 .. ipython:: python
 
    import numpy as np
@@ -41,12 +47,13 @@ Here, **data** can be many different things:
  - an ndarray
  - a scalar value (like 5)
 
-The passed **index** is a list of axis labels. Thus, this separates into three
+The passed **index** is a list of axis labels. Thus, this separates into a few
 cases depending on what **data is**:
 
-**Case 1:** If **data** is an ndarray, **index** must be the same length as
-**data**. If no index is passed, one will be created having values ``[0, ...,
-len(data) - 1]``.
+**From ndarray**
+
+If **data** is an ndarray, **index** must be the same length as **data**. If no
+index is passed, one will be created having values ``[0, ..., len(data) - 1]``.
 
 .. ipython:: python
 
@@ -56,9 +63,11 @@ len(data) - 1]``.
 
    Series(np.random.randn(5))
 
-**Case 2:** If **data** is a dict, if **index** is passed the values in data
-corresponding to the labels in the index will be pulled out. Otherwise, an
-index will be constructed from the sorted keys of the dict, if possible.
+**From dict**
+
+If **data** is a dict, if **index** is passed the values in data corresponding
+to the labels in the index will be pulled out. Otherwise, an index will be
+constructed from the sorted keys of the dict, if possible.
 
 .. ipython:: python
 
@@ -70,7 +79,7 @@ index will be constructed from the sorted keys of the dict, if possible.
 
     NaN (not a number) is the standard missing data marker used in pandas
 
-**Case 3:** If **data** is a scalar value, an index must be provided. The value
+**From scalar value** If **data** is a scalar value, an index must be provided. The value
 will be repeated to match the length of **index**
 
 .. ipython:: python
@@ -157,7 +166,7 @@ potentially different types. You can think of it like a spreadsheet or SQL
 table, or a dict of Series objects. It is generally the most commonly used
 pandas object. Like Series, DataFrame accepts many different kinds of input:
 
- - Dict of 1D ndarrays, lists, or Series
+ - Dict of 1D ndarrays, lists, dicts, or Series
  - 2-D numpy.ndarray
  - `Structured or record
    <http://docs.scipy.org/doc/numpy/user/basics.rec.html>`__ ndarray
@@ -165,16 +174,19 @@ pandas object. Like Series, DataFrame accepts many different kinds of input:
 
 Along with the data, you can optionally pass **index** (row labels) and
 **columns** (column labels) arguments. If you pass an index and / or columns,
-you are guaranteeing the index and / or columns of the resulting
+pyou are guaranteeing the index and / or columns of the resulting
 DataFrame. Thus, a dict of Series plus a specific index will discard all data
 not matching up to the passed index.
 
 If axis labels are not passed, they will be constructed from the input data
-based on common sense rules. Here are the various cases:
+based on common sense rules.
 
-**Case 1, dict of Series**: the result **index** will be the **union** of the
-indexes of the various Series. If no columns are passed, the columns will be
-the sorted list of dict keys.
+**From dict of Series or dicts**
+
+the result **index** will be the **union** of the indexes of the various
+Series. If there are any nested dicts, these will be first converted to
+Series. If no columns are passed, the columns will be the sorted list of dict
+keys.
 
 .. ipython:: python
 
@@ -186,10 +198,19 @@ the sorted list of dict keys.
     DataFrame(d, index=['d', 'b', 'a'])
     DataFrame(d, index=['d', 'b', 'a'], columns=['two', 'three'])
 
-**Case 2, dict of ndarrays / lists**: The ndarrays must all be the same
-length. If an index is passed, it must clearly also be the same length as the
-arrays. If no index is passed, the result will be ``range(n)``, where ``n`` is
-the array length.
+The row and column labels can be accessed respectively by accessing the
+**index** and **columns** attributes:
+
+.. ipython:: python
+
+   df.index
+   df.columns
+
+**From dict of ndarrays / lists**
+
+The ndarrays must all be the same length. If an index is passed, it must
+clearly also be the same length as the arrays. If no index is passed, the
+result will be ``range(n)``, where ``n`` is the array length.
 
 .. ipython:: python
 
@@ -198,8 +219,9 @@ the array length.
    DataFrame(d)
    DataFrame(d, index=['a', 'b', 'c', 'd'])
 
-**Case 3, structured or record array**: This case is handled identically to a
-dict of arrays.
+**From structured or record array**
+
+This case is handled identically to a dict of arrays.
 
 .. ipython:: python
 
@@ -228,7 +250,13 @@ the analogous dict operations:
    df['three'] = df['one'] * df['two']
    df['flag'] = df['one'] > 2
    df
+
+Columns can be deleted or popped like with a dict:
+
+.. ipython:: python
+
    del df['two']
+   three = df.pop('three')
    df
 
 When inserting a scalar value, it will naturally be propagated to fill the
@@ -285,7 +313,9 @@ will be chosen to accommodate all of the data types (dtype=object is the most
 general).
 
 For a more exhaustive treatment of more sophisticated label-based indexing and
-slicing, see the :ref:`section on indexing <indexing>`.
+slicing, see the :ref:`section on indexing <indexing>`. We will address the
+fundamentals of reindexing / conforming to new sets of lables in the
+:ref:`section on reindexing <basics.reindexing>`.
 
 Data alignment and arithmetic
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -298,7 +328,7 @@ union of the column and row labels.
 
     df = DataFrame(np.random.randn(10, 4), columns=['A', 'B', 'C', 'D'])
     df2 = DataFrame(np.random.randn(7, 3), columns=['A', 'B', 'C'])
-	df + df2
+    df + df2
 
 When doing an operation between DataFrame and Series, the default behavior is
 to align the Series **index** on the DataFrame **columns**, thus `broadcasting
@@ -334,6 +364,33 @@ and do column-based alignment like so:
 For explicit control over the matching and broadcasting behavior, see the
 section on :ref:`flexible binary operations <basics.binop>`.
 
+Operations with scalars are just as you would expect:
+
+.. ipython:: python
+
+   df * 5 + 2
+   1 / df
+   df ** 4
+
+Console display
+~~~~~~~~~~~~~~~
+
+For very large DataFrame objects, only a summary will be printed to the console
+(here I am reading a CSV version of the **baseball** dataset from the **plyr**
+R package):
+
+.. ipython:: python
+
+   baseball = read_csv('baseball.csv')
+   baseball
+
+However, using **to_string** will display any DataFrame in tabular form, though
+it won't always fit the he console width:
+
+.. ipython:: python
+
+   baseball.ix[-20:, :12].to_string()
+
 .. _basics.panel:
 
 WidePanel
@@ -346,7 +403,7 @@ is partially responsible for the name pandas: pan(el)-da(ta)-s. The names for
 the 3 axes are intended to give some semantic meaning to describing operations
 involving panel data and, in particular, econometric analysis of panel
 data. However, for the strict purposes of slicing and dicing a collection of
-DataFrame objects, the axis names are slightly arbitrary:
+DataFrame objects, you may find the axis names slightly arbitrary:
 
   - **items**: axis 0, each item corresponds to a DataFrame contained inside
   - **major_axis**: axis 1, it is the **index** (rows) of each of the
@@ -360,19 +417,167 @@ DataFrame objects, the axis names are slightly arbitrary:
     <http://stat.ethz.ch/R-manual/R-patched/library/stats/html/reshape.html>`__
     has some more to say about these.
 
+Construction of WidePanels works about like you would expect:
+
+**3D ndarray with optional axis labels**
+
+.. ipython:: python
+
+   wp = WidePanel(np.random.randn(2, 5, 4), items=['Item1', 'Item2'],
+                  major_axis=DateRange('1/1/2000', periods=5),
+                  minor_axis=['A', 'B', 'C', 'D'])
+   wp
+
+
+**dict of DataFrame objects**
+
+.. ipython:: python
+
+   data = {'Item1' : DataFrame(np.random.randn(4, 3)),
+           'Item2' : DataFrame(np.random.randn(4, 2))}
+   WidePanel(data)
+
+Note that the values in the dict need only be **convertible to
+DataFrame**. Thus, they can be any of the other valid inputs to DataFrame as
+per above.
+
+Item selection / addition / deletion
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Similar to DataFrame functioning as a dict of Series, WidePanel is like a dict
+of DataFrames:
+
+.. ipython:: python
+
+   wp['Item1']
+   wp['Item3'] = wp['Item1'] / wp['Item2']
+
+The API for insertion and deletion is the same as for DataFrame.
+
+Indexing / Selection
+~~~~~~~~~~~~~~~~~~~~
+
+As of this writing, indexing with WidePanel is a bit more restrictive than in
+DataFrame. Notably, :ref:`fancy indexing <indexing>` via the **ix** property
+has not yet been integrated in WidePanel. This will be done, however, in a
+future release.
+
+.. csv-table::
+    :header: "Operation", "Syntax", "Result"
+    :widths: 30, 20, 10
+
+    Select item, ``wp[item]``, DataFrame
+    Get slice at major_axis label, ``wp.major_xs(val)``, DataFrame
+    Get slice at minor_axis label, ``wp.minor_xs(val)``, DataFrame
+
+For example, using the earlier example data, we could do:
+
+.. ipython:: python
+
+    wp['Item1']
+    wp.major_xs(wp.major_axis[2])
+    wp.minor_axis
+    wp.minor_xs('C')
 
 .. _basics.attrs:
 
 Attributes and the raw ndarray(s)
 ---------------------------------
 
+pandas objects have a number of attributes enabling you to access the metadata
+
+  * **shape**: gives the axis dimensions of the object, consistent with ndarray
+  * Axis labels
+
+    * **Series**: *index* (only axis)
+    * **DataFrame**: *index* (rows) and *columns*
+    * **WidePanel**: *items*, *major_axis*, and *minor_axis*
+
+Note, **these attributes can be safely assigned to**!
+
+.. ipython:: python
+
+   df[:2]
+   df.columns = [x.lower() for x in df.columns]
+   df
+
+To get the actual data inside a data structure, one need only access the
+**values** property:
+
+.. ipython:: python
+
+    s.values
+    df.values
+    wp.values
+
+If a DataFrame or WidePanel contains homogeneously-typed data, the ndarray can
+actually be modified in-place, and the changes will be reflected in the data
+structure. For heterogeneous data (e.g. some of the DataFrame's columns are not
+all the same dtype), this will not be the case. The values attribute itself,
+unlike the axis labels, cannot be assigned to.
+
+.. note::
+
+    When working with heterogeneous data, the dtype of the resulting ndarray
+    will be chosen to accommodate all of the data involved. For example, if
+    strings are involved, the result will be of object dtype. If there are only
+    floats and integers, the resulting array will be of float dtype.
+
+.. _basics.apply:
+
+Function application and basic stats
+------------------------------------
+
 .. _basics.binop:
 
 Flexible binary operations
 --------------------------
 
-Combining with fill values
-~~~~~~~~~~~~~~~~~~~~~~~~~~
+With binary operations between pandas data structures, we have a couple items
+of interest:
+
+  * How to describe broadcasting behavior between higher- (e.g. DataFrame) and
+    lower-dimensional (e.g. Series) objects.
+  * Behavior of missing data in computations
+
+We will demonstrate the currently-available functions to illustrate these
+issues independently, though they can be performed simultaneously.
+
+Matching / broadcasting behavior
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+DataFrame has the methods **add, sub, mul, div** and related functions **radd,
+rsub, ...** for carrying out binary operations. For broadcasting behavior,
+Series input is of primary interest. Using these functions, you can use to
+either match on the *index* or *columns* via the **axis** keyword:
+
+.. ipython:: python
+   :suppress:
+
+   d = {'one' : Series(np.random.randn(3), index=['a', 'b', 'c']),
+        'two' : Series(np.random.randn(4), index=['a', 'b', 'c', 'd']),
+        'three' : Series(np.random.randn(3), index=['b', 'c', 'd'])}
+   df = DataFrame(d)
+
+.. ipython:: python
+
+   df
+   row = df.ix[1]
+   column = df['two']
+
+   df.sub(row, axis='columns')
+   df.sub(row, axis=1)
+
+   df.sub(column, axis='index')
+   df.sub(column, axis=0)
+
+With WidePanel, describing the matching behavior is a bit more difficult, so
+the arithmetic methods instead (and perhaps confusingly?) give you the option
+to specify the *broadcast axis*.
+
+Missing data / operations with fill values
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
 
 .. _basics.reindexing:
 
@@ -381,13 +586,45 @@ Reindexing
 
 
 
-Dropping labels from an axis
-----------------------------
+Iteration
+---------
 
-.. _basics.apply:
+Considering the pandas as somewhat dict-like structure, basic iteration
+produces the "keys" of the objects, namely:
 
-Function application and basic stats
-------------------------------------
+  * **Series**: the index label
+  * **DataFrame**: the column labels
+  * **WidePanel**: the item labels
+
+Thus, for example:
+
+.. ipython::
+
+   In [0]: for col in df:
+      ...:     print col
+      ...:
+
+iteritems
+~~~~~~~~~
+
+Consistent with the dict-like interface, **iteritems** iterates through
+key-value pairs:
+
+  * **Series**: (index, scalar value) pairs
+  * **DataFrame**: (column, Series) pairs
+  * **WidePanel**: (item, DataFrame) pairs
+
+For example:
+
+.. ipython::
+
+   In [0]: for item, frame in wp.iteritems():
+      ...:     print item
+      ...:     print frame
+      ...:
+
+Dropping labels from an axis
+----------------------------
 
 .. _basics.cast:
 
diff --git a/doc/source/conf.py b/doc/source/conf.py
index 46d4b3f13..961630a15 100644
--- a/doc/source/conf.py
+++ b/doc/source/conf.py
@@ -134,7 +134,7 @@ html_theme = 'agogo'
 #html_theme_options = {}
 
 # Add any paths that contain custom themes here, relative to this directory.
-#html_theme_path = []
+html_theme_path = ['themes']
 
 # The name for this set of Sphinx documents.  If None, it defaults to
 # "<project> v<release> documentation".
diff --git a/doc/source/dataframe.rst b/doc/source/dataframe.rst
index 6e1a1bbe5..078975b15 100644
--- a/doc/source/dataframe.rst
+++ b/doc/source/dataframe.rst
@@ -34,103 +34,6 @@ be printed by default when the frame is very large:
 
     df.info()
 
-The DataFrame's index and columns can be accessed by the **index**
-attribute and **columns** methods, respectively:
-
-.. ipython:: python
-
-    df.index
-    df.columns
-
-.. _dataframe.cons:
-
-Construction
-------------
-
-There are many ways to create a DataFrame:
-
-   * From a dict of ndarrays or Series
-   * From a 2D ndarray, optionally providing row and column labels
-   * From a NumPy structured (record) array
-   * From a nested dictionary
-
-.. autosummary::
-   :toctree: generated/
-
-   DataFrame.__init__
-   DataFrame.fromRecords
-
-Indexing basics
----------------
-
-.. seealso::
-
-    :ref:`Indexing (main documentation) <indexing>` for a more complete
-     catalogue of the indexing facilities of DataFrame
-
-Column access
-~~~~~~~~~~~~~
-
-DataFrame's basic *__getitem__* (brackets) accesses the **columns** by name,
-result in a Series
-
-.. ipython:: python
-
-    df['A']
-
-
-If you add a Series to the frame, it will be automatically conformed
-to the frame's index:
-
-.. ipython:: python
-
-    df['D'] = df['A'][:5]
-    df
-
-Columns can be deleted or popped as with a dict:
-
-.. ipython:: python
-
-    df
-    del df['C']
-    B = df.pop('B')
-    df
-
-New items in the DataFrame do not need to already be Series. They can
-also be an ndarray of the right length or a scalar value:
-
-.. ipython:: python
-
-    df['N'] = np.arange(len(df))
-    df['S'] = 5
-    df
-
-To be consistent with this dict-like interface, using **in** checks if the key
-is in the columns:
-
-.. ipython:: python
-
-    'A' in df
-
-.. autosummary::
-   :toctree: generated/
-
-   DataFrame.pop
-
-Selecting rows (cross-sections)
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-Selecting a row can be done using the **xs** method or via fancy indexing (see the
-`main documentation <indexing>` about fancy indexing):
-
-
-.. ipython:: python
-
-    date = datetime(2009, 8, 31)
-    df.xs(date)
-    df.ix[date]
-    df.ix[10]
-
 
 Transposing
 ~~~~~~~~~~~
@@ -213,35 +116,6 @@ no overlap in a particular portion of the data set.
 Binary operation between DataFrame and Series
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-The choice of behavior between DataFrame and Series was somewhat
-arbitrary. Since the **columns** of the DataFrame are viewed as its
-keys, and the **index** values of a Series are viewed as *its* keys,
-the default behavior is to match the frame columns on the series
-index.
-
-.. ipython:: python
-
-    df - df.xs(df.index[5])
-
-However, the user very frequently will want to subtract (or add,
-divide, multiply, ...) a TimeSeries from a DataFrame representing a
-collection of TimeSeries. Since this is so common, the DataFrame will
-inspect the input Series and its own index to see if this is what the
-user intended.
-
-.. ipython:: python
-
-    df - df['A']
-
-Note that the same result could have been obtained by writing:
-
-.. ipython:: python
-
-    (df.T - df['A']).T
-
-but this is fairly awkward (and relatively high cost due to two
-transpose operations).
-
 Binary operation with scalar value
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
diff --git a/doc/source/index.rst b/doc/source/index.rst
index 9d66dfa0a..0dd4babc2 100755
--- a/doc/source/index.rst
+++ b/doc/source/index.rst
@@ -19,13 +19,13 @@ pandas: powerful Python data analysis library
 
 **Code Repository:** http://github.com/wesm/pandas
 
-:mod:`pandas` is a `Python <http://www.python.org>`__ package providing fast,
+**pandas** is a `Python <http://www.python.org>`__ package providing fast,
 flexible, and expressive data structures designed to make working with
 "relational" or "labeled" data both easy and intuitive. It aims to be the
-fundamental high-level building block for doing practical data analysis in
-Python. Additionally, it has the broader goal of becoming **the most powerful
-and flexible open source data analysis / manipulation tool available in any
-language**. It is already well on its way toward this goal.
+fundamental high-level building block for doing practical, **real world** data
+analysis in Python. Additionally, it has the broader goal of becoming **the
+most powerful and flexible open source data analysis / manipulation tool
+available in any language**. It is already well on its way toward this goal.
 
 pandas is well suited for many different kinds of data:
 
diff --git a/doc/source/themes/agogo/layout.html b/doc/source/themes/agogo/layout.html
new file mode 100644
index 000000000..5debc23ce
--- /dev/null
+++ b/doc/source/themes/agogo/layout.html
@@ -0,0 +1,91 @@
+{#
+    agogo/layout.html
+    ~~~~~~~~~~~~~~~~~
+
+    Sphinx layout template for the agogo theme, originally written
+    by Andi Albrecht.
+
+    :copyright: Copyright 2007-2011 by the Sphinx team, see AUTHORS.
+    :license: BSD, see LICENSE for details.
+#}
+{% extends "basic/layout.html" %}
+
+{% block header %}
+    <div class="header-wrapper">
+      <div class="header">
+        {%- if logo %}
+          <p class="logo"><a href="{{ pathto(master_doc) }}">
+            <img class="logo" src="{{ pathto('_static/' + logo, 1) }}" alt="Logo"/>
+          </a></p>
+        {%- endif %}
+        {%- block headertitle %}
+        <h1><a href="{{ pathto(master_doc) }}">{{ shorttitle|e }}</a></h1>
+        {%- endblock %}
+        <div class="rel">
+          {%- for rellink in rellinks|reverse %}
+          <a href="{{ pathto(rellink[0]) }}" title="{{ rellink[1]|striptags|e }}"
+             {{ accesskey(rellink[2]) }}>{{ rellink[3] }}</a>
+          {%- if not loop.last %}{{ reldelim2 }}{% endif %}
+          {%- endfor %}
+        </div>
+       </div>
+    </div>
+{% endblock %}
+
+{% block content %}
+    <div class="content-wrapper">
+      <div class="content">
+        <div class="sidebar">
+          {%- block sidebartoc %}
+          <h3>{{ _('Table Of Contents') }}</h3>
+          {{ toctree() }}
+          {%- endblock %}
+          {%- block sidebarsearch %}
+          <h3 style="margin-top: 1.5em;">{{ _('Search') }}</h3>
+          <form class="search" action="{{ pathto('search') }}" method="get">
+            <input type="text" name="q" size="18" />
+            <input type="submit" value="{{ _('Go') }}" />
+            <input type="hidden" name="check_keywords" value="yes" />
+            <input type="hidden" name="area" value="default" />
+          </form>
+          <p class="searchtip" style="font-size: 90%">
+            {{ _('Enter search terms or a module, class or function name.') }}
+          </p>
+          {%- endblock %}
+        </div>
+        <div class="document">
+          {%- block document %}
+            {{ super() }}
+          {%- endblock %}
+        </div>
+        <div class="clearer"></div>
+      </div>
+    </div>
+{% endblock %}
+
+{% block footer %}
+    <div class="footer-wrapper">
+      <div class="footer">
+        <div class="left">
+          {%- for rellink in rellinks|reverse %}
+          <a href="{{ pathto(rellink[0]) }}" title="{{ rellink[1]|striptags|e }}"
+             {{ accesskey(rellink[2]) }}>{{ rellink[3] }}</a>
+          {%- if not loop.last %}{{ reldelim2 }}{% endif %}
+          {%- endfor %}
+          {%- if show_source and has_source and sourcename %}
+            <br/>
+            <a href="{{ pathto('_sources/' + sourcename, true)|e }}"
+               rel="nofollow">{{ _('Show Source') }}</a>
+          {%- endif %}
+        </div>
+
+        <div class="right">
+          {{ super() }}
+        </div>
+        <div class="clearer"></div>
+      </div>
+    </div>
+{% endblock %}
+
+{% block relbar1 %}{% endblock %}
+{% block relbar2 %}{% endblock %}
diff --git a/doc/source/themes/agogo/static/agogo.css_t b/doc/source/themes/agogo/static/agogo.css_t
new file mode 100644
index 000000000..b8b7adaac
--- /dev/null
+++ b/doc/source/themes/agogo/static/agogo.css_t
@@ -0,0 +1,452 @@
+/*
+ * agogo.css_t
+ * ~~~~~~~~~~~
+ *
+ * Sphinx stylesheet -- agogo theme.
+ *
+ * :copyright: Copyright 2007-2011 by the Sphinx team, see AUTHORS.
+ * :license: BSD, see LICENSE for details.
+ *
+ */
+
+* {
+  margin: 0px;
+  padding: 0px;
+}
+
+body {
+  font-family: {{ theme_bodyfont }};
+  line-height: 1.4em;
+  color: black;
+  background-color: {{ theme_bgcolor }};
+}
+
+
+/* Page layout */
+
+div.header, div.content, div.footer {
+  max-width: {{ theme_pagewidth }};
+  margin-left: auto;
+  margin-right: auto;
+}
+
+div.header-wrapper {
+  background: {{ theme_headerbg }};
+  border-bottom: 3px solid #2e3436;
+}
+
+
+/* Default body styles */
+a {
+  color: {{ theme_linkcolor }};
+}
+
+div.bodywrapper a, div.footer a {
+  text-decoration: underline;
+}
+
+.clearer {
+  clear: both;
+}
+
+.left {
+  float: left;
+}
+
+.right {
+  float: right;
+}
+
+.line-block {
+    display: block;
+    margin-top: 1em;
+    margin-bottom: 1em;
+}
+
+.line-block .line-block {
+    margin-top: 0;
+    margin-bottom: 0;
+    margin-left: 1.5em;
+}
+
+h1, h2, h3, h4 {
+  font-family: {{ theme_headerfont }};
+  font-weight: normal;
+  color: {{ theme_headercolor2 }};
+  margin-bottom: .8em;
+}
+
+h1 {
+  color: {{ theme_headercolor1 }};
+}
+
+h2 {
+  padding-bottom: .5em;
+  border-bottom: 1px solid {{ theme_headercolor2 }};
+}
+
+a.headerlink {
+  visibility: hidden;
+  color: #dddddd;
+  padding-left: .3em;
+}
+
+h1:hover > a.headerlink,
+h2:hover > a.headerlink,
+h3:hover > a.headerlink,
+h4:hover > a.headerlink,
+h5:hover > a.headerlink,
+h6:hover > a.headerlink,
+dt:hover > a.headerlink {
+  visibility: visible;
+}
+
+img {
+  border: 0;
+}
+
+div.admonition {
+  margin-top: 10px;
+  margin-bottom: 10px;
+  padding: 2px 7px 1px 7px;
+  border-left: 0.2em solid black;
+}
+
+p.admonition-title {
+  margin: 0px 10px 5px 0px;
+  font-weight: bold;
+}
+
+dt:target, .highlighted {
+  background-color: #fbe54e;
+}
+
+/* Header */
+
+div.header {
+  padding-top: 10px;
+  padding-bottom: 10px;
+}
+
+div.header h1 {
+  font-family: {{ theme_headerfont }};
+  font-weight: normal;
+  font-size: 180%;
+  letter-spacing: .08em;
+}
+
+div.header h1 a {
+  color: white;
+}
+
+div.header div.rel {
+  margin-top: 1em;
+}
+
+div.header div.rel a {
+  color: {{ theme_headerlinkcolor }};
+  letter-spacing: .1em;
+  text-transform: uppercase;
+}
+
+p.logo {
+    float: right;
+}
+
+img.logo {
+    border: 0;
+}
+
+
+/* Content */
+div.content-wrapper {
+  background-color: white;
+  padding-top: 20px;
+  padding-bottom: 20px;
+}
+
+div.document {
+  max-width: {{ theme_documentwidth }};
+  float: left;
+}
+
+div.body {
+  padding-right: 2em;
+  text-align: {{ theme_textalign }};
+}
+
+div.document ul {
+  margin: 1.5em;
+  list-style-type: square;
+}
+
+div.document dd {
+  margin-left: 1.2em;
+  margin-top: .4em;
+  margin-bottom: 1em;
+}
+
+div.document .section {
+  margin-top: 1.7em;
+}
+div.document .section:first-child {
+  margin-top: 0px;
+}
+
+div.document div.highlight {
+  padding: 3px;
+  background-color: #eeeeec;
+  border-top: 2px solid #dddddd;
+  border-bottom: 2px solid #dddddd;
+  margin-top: .8em;
+  margin-bottom: .8em;
+}
+
+div.document h2 {
+  margin-top: .7em;
+}
+
+div.document p {
+  margin-bottom: .5em;
+}
+
+div.document li.toctree-l1 {
+  margin-bottom: 1em;
+}
+
+div.document .descname {
+  font-weight: bold;
+}
+
+div.document .docutils.literal {
+  background-color: #eeeeec;
+  padding: 1px;
+}
+
+div.document .docutils.xref.literal {
+  background-color: transparent;
+  padding: 0px;
+}
+
+div.document blockquote {
+  margin: 1em;
+}
+
+div.document ol {
+  margin: 1.5em;
+}
+
+
+/* Sidebar */
+
+div.sidebar {
+  width: {{ theme_sidebarwidth }};
+  float: right;
+  font-size: .9em;
+}
+
+div.sidebar a, div.header a {
+  text-decoration: none;
+}
+
+div.sidebar a:hover, div.header a:hover {
+  text-decoration: underline;
+}
+
+div.sidebar h3 {
+  color: #2e3436;
+  text-transform: uppercase;
+  font-size: 130%;
+  letter-spacing: .1em;
+}
+
+div.sidebar ul {
+  list-style-type: none;
+}
+
+div.sidebar li.toctree-l1 a {
+  display: block;
+  padding: 1px;
+  border: 1px solid #dddddd;
+  background-color: #eeeeec;
+  margin-bottom: .4em;
+  padding-left: 3px;
+  color: #2e3436;
+}
+
+div.sidebar li.toctree-l2 a {
+  background-color: transparent;
+  border: none;
+  margin-left: 1em;
+  border-bottom: 1px solid #dddddd;
+}
+
+div.sidebar li.toctree-l3 a {
+  background-color: transparent;
+  border: none;
+  margin-left: 2em;
+  border-bottom: 1px solid #dddddd;
+}
+
+div.sidebar li.toctree-l2:last-child a {
+  border-bottom: none;
+}
+
+div.sidebar li.toctree-l1.current a {
+  border-right: 5px solid {{ theme_headerlinkcolor }};
+}
+
+div.sidebar li.toctree-l1.current li.toctree-l2 a {
+  border-right: none;
+}
+
+
+/* Footer */
+
+div.footer-wrapper {
+  background: {{ theme_footerbg }};
+  border-top: 4px solid #babdb6;
+  padding-top: 10px;
+  padding-bottom: 10px;
+  min-height: 80px;
+}
+
+div.footer, div.footer a {
+  color: #888a85;
+}
+
+div.footer .right {
+  text-align: right;
+}
+
+div.footer .left {
+  text-transform: uppercase;
+}
+
+
+/* Styles copied from basic theme */
+
+img.align-left, .figure.align-left, object.align-left {
+    clear: left;
+    float: left;
+    margin-right: 1em;
+}
+
+img.align-right, .figure.align-right, object.align-right {
+    clear: right;
+    float: right;
+    margin-left: 1em;
+}
+
+img.align-center, .figure.align-center, object.align-center {
+  display: block;
+  margin-left: auto;
+  margin-right: auto;
+}
+
+.align-left {
+    text-align: left;
+}
+
+.align-center {
+    clear: both;
+    text-align: center;
+}
+
+.align-right {
+    text-align: right;
+}
+
+/* -- search page ----------------------------------------------------------- */
+
+ul.search {
+    margin: 10px 0 0 20px;
+    padding: 0;
+}
+
+ul.search li {
+    padding: 5px 0 5px 20px;
+    background-image: url(file.png);
+    background-repeat: no-repeat;
+    background-position: 0 7px;
+}
+
+ul.search li a {
+    font-weight: bold;
+}
+
+ul.search li div.context {
+    color: #888;
+    margin: 2px 0 0 30px;
+    text-align: left;
+}
+
+ul.keywordmatches li.goodmatch a {
+    font-weight: bold;
+}
+
+/* -- index page ------------------------------------------------------------ */
+
+table.contentstable {
+    width: 90%;
+}
+
+table.contentstable p.biglink {
+    line-height: 150%;
+}
+
+a.biglink {
+    font-size: 1.3em;
+}
+
+span.linkdescr {
+    font-style: italic;
+    padding-top: 5px;
+    font-size: 90%;
+}
+
+/* -- general index --------------------------------------------------------- */
+
+table.indextable td {
+    text-align: left;
+    vertical-align: top;
+}
+
+table.indextable dl, table.indextable dd {
+    margin-top: 0;
+    margin-bottom: 0;
+}
+
+table.indextable tr.pcap {
+    height: 10px;
+}
+
+table.indextable tr.cap {
+    margin-top: 10px;
+    background-color: #f2f2f2;
+}
+
+img.toggler {
+    margin-right: 3px;
+    margin-top: 3px;
+    cursor: pointer;
+}
+
+/* -- viewcode extension ---------------------------------------------------- */
+
+.viewcode-link {
+    float: right;
+}
+
+.viewcode-back {
+    float: right;
+    font-family:: {{ theme_bodyfont }};
+}
+
+div.viewcode-block:target {
+    margin: -1px -3px;
+    padding: 0 3px;
+    background-color: #f4debf;
+    border-top: 1px solid #ac9;
+    border-bottom: 1px solid #ac9;
+}
diff --git a/doc/source/themes/agogo/static/bgfooter.png b/doc/source/themes/agogo/static/bgfooter.png
new file mode 100644
index 000000000..9ce5bdd90
Binary files /dev/null and b/doc/source/themes/agogo/static/bgfooter.png differ
diff --git a/doc/source/themes/agogo/static/bgtop.png b/doc/source/themes/agogo/static/bgtop.png
new file mode 100644
index 000000000..a0d4709ba
Binary files /dev/null and b/doc/source/themes/agogo/static/bgtop.png differ
diff --git a/doc/source/themes/agogo/theme.conf b/doc/source/themes/agogo/theme.conf
new file mode 100644
index 000000000..3fc88580f
--- /dev/null
+++ b/doc/source/themes/agogo/theme.conf
@@ -0,0 +1,19 @@
+[theme]
+inherit = basic
+stylesheet = agogo.css
+pygments_style = tango
+
+[options]
+bodyfont = "Verdana", Arial, sans-serif
+headerfont = "Georgia", "Times New Roman", serif
+pagewidth = 70em
+documentwidth = 50em
+sidebarwidth = 20em
+bgcolor = #eeeeec
+headerbg = url(bgtop.png) top left repeat-x
+footerbg = url(bgfooter.png) top left repeat-x
+linkcolor = #ce5c00
+headercolor1 = #204a87
+headercolor2 = #3465a4
+headerlinkcolor = #fcaf3e
+textalign = justify
\ No newline at end of file
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 5e02c3279..f91114bc2 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -14,7 +14,6 @@ labeling information
 
 from StringIO import StringIO
 import operator
-import sys
 import warnings
 
 from numpy import nan
@@ -505,10 +504,14 @@ class DataFrame(NDFrame):
 
         f.close()
 
-    def toString(self, buf=sys.stdout, columns=None, colSpace=None,
-                 nanRep='NaN', formatters=None, float_format=None,
-                 sparsify=True):
+    def to_string(self, buf=None, columns=None, colSpace=None,
+                  nanRep='NaN', formatters=None, float_format=None,
+                  sparsify=True):
         from pandas.core.common import _format, adjoin
+        import sys
+
+        if buf is None:
+            buf = sys.stdout
 
         if colSpace is None:
             def _myformat(v):
@@ -574,7 +577,7 @@ class DataFrame(NDFrame):
 
         return str_index, str_columns
 
-    def info(self, verbose=True, buf=sys.stdout):
+    def info(self, verbose=True, buf=None):
         """
         Concise summary of a DataFrame, used in __repr__ when very large.
 
@@ -584,6 +587,10 @@ class DataFrame(NDFrame):
             If False, don't print column count summary
         buf : writable buffer, defaults to sys.stdout
         """
+        import sys
+        if buf is None:
+            buf = sys.stdout
+
         print >> buf, str(type(self))
         print >> buf, self.index.summary()
 
@@ -2720,6 +2727,7 @@ class DataFrame(NDFrame):
     merge = deprecate('merge', join)
     toRecords = deprecate('toRecords', to_records)
     toDict = deprecate('toDict', to_dict)
+    toString = deprecate('toString', to_string)
     _firstTimeWithValue = deprecate('_firstTimeWithValue', first_valid_index)
     _lastTimeWithValue = deprecate('_lastTimeWithValue', last_valid_index)
     toCSV = deprecate('toCSV', to_csv)
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index a667f4f6e..3b865c210 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -45,6 +45,7 @@ def _panel_arith_method(op, name):
         ----------
         other : DataFrame or Panel class
         axis : {'items', 'major', 'minor'}
+            Axis to broadcast over
 
         Returns
         -------
@@ -585,9 +586,9 @@ class WidePanel(Panel, NDFrame):
             return WidePanel(new_data)
 
     add = _panel_arith_method(operator.add, 'add')
-    subtract = _panel_arith_method(operator.sub, 'subtract')
-    divide = _panel_arith_method(operator.div, 'divide')
-    multiply = _panel_arith_method(operator.mul, 'multiply')
+    subtract = sub = _panel_arith_method(operator.sub, 'subtract')
+    divide = div = _panel_arith_method(operator.div, 'divide')
+    multiply = mul = _panel_arith_method(operator.mul, 'multiply')
 
     def major_xs(self, key, copy=True):
         """
