commit 2b2e15e03829aed737c695a55c57859b1dc0e5ba
Author: Adam Klein <adamklein@gmail.com>
Date:   Wed Feb 22 16:07:39 2012 -0500

    BUG: fix pickling on Timestamp, all tests pass

diff --git a/pandas/core/index.py b/pandas/core/index.py
index 9151da668..a2038715c 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1150,13 +1150,13 @@ class DatetimeIndex(Int64Index):
                                                periods=periods, offset=offset)
 
                 index = np.array(_dt_unbox_array(list(xdr)), dtype='M8[us]',
-                                copy=False)
+                                 copy=False)
 
             index = index.view(cls)
             index.name = name
             index.offset = offset
-            index.tzinfo = tzinfo
             index.freq = freq
+            index.tzinfo = tzinfo
 
             return index
 
@@ -1200,8 +1200,8 @@ class DatetimeIndex(Int64Index):
         subarr = subarr.view(cls)
         subarr.name = name
         subarr.offset = offset
-        subarr.tzinfo = tzinfo
         subarr.freq = freq
+        subarr.tzinfo = tzinfo
 
         return subarr
 
@@ -1281,7 +1281,7 @@ class DatetimeIndex(Int64Index):
     def __reduce__(self):
         """Necessary for making this object picklable"""
         object_state = list(np.ndarray.__reduce__(self))
-        subclass_state = self.name, self.offset, self.freq
+        subclass_state = self.name, self.offset, self.freq, self.tzinfo
         object_state[2] = (object_state[2], subclass_state)
         return tuple(object_state)
 
@@ -1289,10 +1289,11 @@ class DatetimeIndex(Int64Index):
         """Necessary for making this object picklable"""
         if len(state) == 2:
             nd_state, own_state = state
-            np.ndarray.__setstate__(self, nd_state)
             self.name = own_state[0]
             self.offset = own_state[1]
             self.freq = own_state[2]
+            self.tzinfo = own_state[3]
+            np.ndarray.__setstate__(self, nd_state)
         else:  # pragma: no cover
             np.ndarray.__setstate__(self, state)
 
@@ -1417,6 +1418,7 @@ class DatetimeIndex(Int64Index):
             return self.item()
 
         self.offset = getattr(obj, 'offset', None)
+        self.freq   = getattr(obj, 'freq', None)
         self.tzinfo = getattr(obj, 'tzinfo', None)
 
     def intersection(self, other):
@@ -1464,6 +1466,13 @@ class DatetimeIndex(Int64Index):
             else:
                 return _dt_box(val, tzinfo=self.tzinfo)
         else:
+            new_offset = self.offset
+            new_freq = self.freq
+            if (type(key) == slice and new_offset is not None
+                and key.step is not None):
+                new_offset = key.step * self.offset
+                new_freq = None
+
             if com._is_bool_indexer(key):
                 key = np.asarray(key)
 
@@ -1471,7 +1480,8 @@ class DatetimeIndex(Int64Index):
             if result.ndim > 1:
                 return result
 
-            return DatetimeIndex(result, name=self.name)
+            return DatetimeIndex(result, name=self.name, offset=new_offset,
+                                 freq=new_freq, tzinfo=self.tzinfo)
 
     # Try to run function on index first, and then on elements of index
     # Especially important for group-by functionality
diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index 03a9b683d..aa14c11c0 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -59,6 +59,16 @@ class Timestamp(_Timestamp):
 
         return ts_base
 
+    def __setstate__(self, state):
+        self.value = state[0]
+        self.offset = state[1]
+        self.tzinfo = state[2]
+            
+    def __reduce__(self):
+        object_state = self.value, self.offset, self.tzinfo
+        return (Timestamp, object_state)
+
+
 # This is PITA. Because we inherit from datetime, which has very specific
 # construction requirements, we need to do object instantiation in python
 # (see Timestamp class above). This will serve as a C extension type that
diff --git a/pandas/tests/test_daterange.py b/pandas/tests/test_daterange.py
index 6a35fa7f7..40137d3c0 100644
--- a/pandas/tests/test_daterange.py
+++ b/pandas/tests/test_daterange.py
@@ -152,7 +152,6 @@ class TestDateRange(unittest.TestCase):
 
         the_union = left.union(right)
         self.assert_(isinstance(the_union, Index))
-        self.assert_(not isinstance(the_union, DateRange))
 
         # non-overlapping, no gap
         left = self.rng[:5]
@@ -168,7 +167,7 @@ class TestDateRange(unittest.TestCase):
         rng = DateRange(START, END, offset=datetools.bmonthEnd)
 
         the_union = self.rng.union(rng)
-        self.assert_(not isinstance(the_union, DateRange))
+        self.assert_(isinstance(the_union, DateRange))
 
     def test_outer_join(self):
         """ should behave just as union test"""
@@ -228,7 +227,7 @@ class TestDateRange(unittest.TestCase):
 
         # non-overlapping
         the_int = rng[:10].intersection(rng[10:])
-        expected = DateRange([])
+        expected = DatetimeIndex([])
         self.assert_(the_int.equals(expected))
 
     def test_intersection_bug(self):
