commit 969c1b89a1990ee574d256c0f66a63d580a4e614
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Jul 31 18:40:28 2011 -0400

    BUG: fixed groupby bug with missing labels

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index aec14504f..507c3bb52 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -121,6 +121,8 @@ class GroupBy(object):
                     yield (ids[cat],), subgen
                 else:
                     for subcat, data in flatten(subgen, level=level+1):
+                        if len(data) == 0:
+                            continue
                         yield (ids[cat],) + subcat, data
 
         gen = self._generator_factory(data)
@@ -209,7 +211,7 @@ class GroupBy(object):
         pass
 
     def _aggregate_multi_group(self, arg):
-        # TODO: cythonize
+        # want to cythonize?
 
         if len(self.groupings) > 3:
             raise Exception('can only handle 3 or fewer groupings for now')
@@ -249,7 +251,7 @@ class GroupBy(object):
             for name, raveled in name_list:
                 factor = Factor.fromarray(raveled)
                 levels.append(factor.levels)
-                labels.append(factor.labels)
+                labels.append(factor.labels[mask])
 
             index = MultiIndex(levels=levels, labels=labels)
             return DataFrame(output, index=index)
diff --git a/pandas/src/groupby.pyx b/pandas/src/groupby.pyx
index 9a0fd51b6..2b0c90e1c 100644
--- a/pandas/src/groupby.pyx
+++ b/pandas/src/groupby.pyx
@@ -208,6 +208,12 @@ def group_aggregate(ndarray[double_t] values, list label_list,
 
     return result, counts
 
+def _group_reorder(values, label_list):
+    indexer = np.lexsort(label_list[::-1])
+    sorted_labels = [labels.take(indexer) for labels in label_list]
+    sorted_values = values.take(indexer)
+    return sorted_values, sorted_labels
+
 cdef void _aggregate_group(double_t *out, int32_t *counts, double_t *values,
                            list labels, int start, int end, tuple shape,
                            Py_ssize_t which, Py_ssize_t offset,
@@ -218,7 +224,6 @@ cdef void _aggregate_group(double_t *out, int32_t *counts, double_t *values,
 
     # time to actually aggregate
     if which == len(labels) - 1:
-        # print axis, start, end
         axis = labels[which]
         func(out, counts, values, <int32_t*> axis.data, start, end, offset)
     else:
@@ -241,7 +246,7 @@ cdef double_t _group_add(double_t *out, int32_t *counts, double_t *values,
                          int32_t *labels, int start, int end,
                          Py_ssize_t offset):
     cdef:
-        Py_ssize_t i = 0, it = start
+        Py_ssize_t i, it = start
         int32_t lab
         int32_t count = 0, tot = 0
         double_t val, cum = 0
@@ -255,6 +260,7 @@ cdef double_t _group_add(double_t *out, int32_t *counts, double_t *values,
             count += 1
             cum += val
 
+        i = labels[it]
         if it == end - 1 or labels[it + 1] > i:
             if count == 0:
                 out[offset + i] = nan
@@ -267,15 +273,13 @@ cdef double_t _group_add(double_t *out, int32_t *counts, double_t *values,
             cum = 0
             tot = 0
 
-            i += 1
-
         it += 1
 
 cdef double_t _group_mean(double_t *out, int32_t *counts, double_t *values,
                           int32_t *labels, int start, int end,
                           Py_ssize_t offset):
     cdef:
-        Py_ssize_t i = 0, it = start
+        Py_ssize_t i, it = start
         int32_t lab
         int32_t count = 0, tot = 0
         double_t val, cum = 0
@@ -289,6 +293,7 @@ cdef double_t _group_mean(double_t *out, int32_t *counts, double_t *values,
             count += 1
             cum += val
 
+        i = labels[it]
         if it == end - 1 or labels[it + 1] > i:
             if count == 0:
                 out[offset + i] = nan
@@ -301,16 +306,8 @@ cdef double_t _group_mean(double_t *out, int32_t *counts, double_t *values,
             cum = 0
             tot = 0
 
-            i += 1
-
         it += 1
 
-def _group_reorder(values, label_list):
-    indexer = np.lexsort(label_list[::-1])
-    sorted_labels = [labels.take(indexer) for labels in label_list]
-    sorted_values = values.take(indexer)
-    return sorted_values, sorted_labels
-
 def _result_shape(label_list):
     # assumed sorted
     shape = []
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 7f6ac25d7..e181a8121 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -329,7 +329,7 @@ class TestGroupBy(unittest.TestCase):
         grouped = df.groupby([lambda x: x.year,
                               lambda x: x.month,
                               lambda x: x.day])
-        agged = grouped.sum()
+        agged = grouped.sum().sortlevel(0)
         assert_almost_equal(df.values, agged.values)
 
     def test_groupby_multi_corner(self):
