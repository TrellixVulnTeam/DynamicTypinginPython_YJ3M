commit a80fa205e8e4cd33febe312124c137c1236ed807
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jan 9 18:40:28 2012 -0500

    ENH: can pass Series to concat function, GH #599

diff --git a/pandas/tools/merge.py b/pandas/tools/merge.py
index 5b0916905..edbdfba24 100644
--- a/pandas/tools/merge.py
+++ b/pandas/tools/merge.py
@@ -5,7 +5,9 @@ SQL-style merge routines
 import numpy as np
 
 from pandas.core.frame import DataFrame, _merge_doc
+from pandas.core.generic import NDFrame
 from pandas.core.groupby import get_group_index
+from pandas.core.series import Series
 from pandas.core.index import (Factor, Index, MultiIndex, _get_combined_index,
                                _ensure_index)
 from pandas.core.internals import (IntBlock, BoolBlock, BlockManager,
@@ -658,13 +660,19 @@ class _Concatenator(object):
 
         # consolidate data
         for obj in objs:
-            obj.consolidate(inplace=True)
+            if isinstance(obj, NDFrame):
+                obj.consolidate(inplace=True)
         self.objs = objs
 
+        sample = objs[0]
+
         # Need to flip BlockManager axis in the DataFrame special case
-        if isinstance(objs[0], DataFrame):
+        if isinstance(sample, DataFrame):
             axis = 1 if axis == 0 else 0
 
+        self._is_series = isinstance(sample, Series)
+        assert(0 <= axis <= sample.ndim)
+
         # note: this is the BlockManager axis (since DataFrame is transposed)
         self.axis = axis
 
@@ -680,13 +688,12 @@ class _Concatenator(object):
         self.new_axes = self._get_new_axes()
 
     def get_result(self):
-        first = self.objs[0]
-
-        if len(self.objs) == 1:
-            return first
-
-        new_data = self._get_concatenated_data()
-        return first._from_axes(new_data, self.new_axes)
+        if self._is_series:
+            new_data = np.concatenate([x.values for x in self.objs])
+            return Series(new_data, index=self.new_axes[0])
+        else:
+            new_data = self._get_concatenated_data()
+            return self.objs[0]._from_axes(new_data, self.new_axes)
 
     def _get_concatenated_data(self):
         try:
@@ -826,7 +833,10 @@ class _Concatenator(object):
         return new_axes
 
     def _get_concat_axis(self):
-        indexes = [x._data.axes[self.axis] for x in self.objs]
+        if self._is_series:
+            indexes = [x.index for x in self.objs]
+        else:
+            indexes = [x._data.axes[self.axis] for x in self.objs]
 
         if self.keys is None:
             concat_axis = _concat_indexes(indexes)
diff --git a/pandas/tools/tests/test_merge.py b/pandas/tools/tests/test_merge.py
index 1642cdef7..20857443a 100644
--- a/pandas/tools/tests/test_merge.py
+++ b/pandas/tools/tests/test_merge.py
@@ -959,6 +959,33 @@ class TestConcatenate(unittest.TestCase):
         expected.ix['ItemC', :, :2] = 'baz'
         tm.assert_panel_equal(result, expected)
 
+    def test_concat_series(self):
+        ts = tm.makeTimeSeries()
+
+        pieces = [ts[:5], ts[5:15], ts[15:]]
+
+        result = concat(pieces)
+        tm.assert_series_equal(result, ts)
+
+        result = concat(pieces, keys=[0, 1, 2])
+        expected = ts.copy()
+
+        exp_labels = [np.repeat([0, 1, 2], [len(x) for x in pieces]),
+                      np.arange(len(ts))]
+        exp_index = MultiIndex(levels=[[0, 1, 2], ts.index],
+                               labels=exp_labels)
+        expected.index = exp_index
+        tm.assert_series_equal(result, expected)
+
+        self.assertRaises(Exception, concat, pieces, axis=1)
+
+    def test_concat_single_with_key(self):
+        df = DataFrame(np.random.randn(10, 4))
+
+        result = concat([df], keys=['foo'])
+        expected = concat([df, df], keys=['foo', 'bar'])
+        tm.assert_frame_equal(result, expected[:10])
+
 if __name__ == '__main__':
     import nose
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
