commit 3d699884e26120618bf0bb8869bc07f1e51a2935
Author: Jeff Reback <jeff@reback.net>
Date:   Wed Mar 8 10:07:24 2017 -0500

    DOC: more whatsnew fixing

diff --git a/doc/source/whatsnew/v0.20.0.txt b/doc/source/whatsnew/v0.20.0.txt
index bf778f606..34358a193 100644
--- a/doc/source/whatsnew/v0.20.0.txt
+++ b/doc/source/whatsnew/v0.20.0.txt
@@ -289,7 +289,7 @@ Possible incompat for HDF5 formats for pandas < 0.13.0
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 ``pd.TimeSeries`` was deprecated officially in 0.17.0, though has only been an alias since 0.13.0. It has
-been dropped in favor of ``pd.Series``. (:issue:``15098).
+been dropped in favor of ``pd.Series``. (:issue:`15098`).
 
 This *may* cause HDF5 files that were created in prior versions to become unreadable if ``pd.TimeSeries``
 was used. This is most likely to be for pandas < 0.13.0. If you find yourself in this situation.
@@ -328,68 +328,66 @@ then write them out again after applying the procedure below.
 Map on Index types now return other Index types
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
--  ``map`` on an ``Index`` now returns an ``Index``, not a numpy array (:issue:`12766`)
+``map`` on an ``Index`` now returns an ``Index``, not a numpy array (:issue:`12766`)
 
-  .. ipython:: python
-
-     idx = Index([1, 2])
-     idx
-     mi = MultiIndex.from_tuples([(1, 2), (2, 4)])
-     mi
-
-  Previous Behavior:
+.. ipython:: python
 
-  .. code-block:: ipython
+   idx = Index([1, 2])
+   idx
+   mi = MultiIndex.from_tuples([(1, 2), (2, 4)])
+   mi
 
-     In [5]: idx.map(lambda x: x * 2)
-     Out[5]: array([2, 4])
+Previous Behavior:
 
-     In [6]: idx.map(lambda x: (x, x * 2))
-     Out[6]: array([(1, 2), (2, 4)], dtype=object)
+.. code-block:: ipython
 
-     In [7]: mi.map(lambda x: x)
-     Out[7]: array([(1, 2), (2, 4)], dtype=object)
+   In [5]: idx.map(lambda x: x * 2)
+   Out[5]: array([2, 4])
 
-     In [8]: mi.map(lambda x: x[0])
-     Out[8]: array([1, 2])
+   In [6]: idx.map(lambda x: (x, x * 2))
+   Out[6]: array([(1, 2), (2, 4)], dtype=object)
 
-  New Behavior:
+   In [7]: mi.map(lambda x: x)
+   Out[7]: array([(1, 2), (2, 4)], dtype=object)
 
-  .. ipython:: python
+   In [8]: mi.map(lambda x: x[0])
+   Out[8]: array([1, 2])
 
-      idx.map(lambda x: x * 2)
+New Behavior:
 
-      idx.map(lambda x: (x, x * 2))
+.. ipython:: python
 
-      mi.map(lambda x: x)
+   idx.map(lambda x: x * 2)
+   idx.map(lambda x: (x, x * 2))
 
-      mi.map(lambda x: x[0])
+   mi.map(lambda x: x)
 
+   mi.map(lambda x: x[0])
 
--  ``map`` on a ``Series`` with ``datetime64`` values may return ``int64`` dtypes rather than ``int32``
 
-  .. ipython:: python
+``map`` on a ``Series`` with ``datetime64`` values may return ``int64`` dtypes rather than ``int32``
 
-    s = Series(date_range('2011-01-02T00:00', '2011-01-02T02:00', freq='H').tz_localize('Asia/Tokyo'))
-    s
+.. ipython:: python
 
-  Previous Behavior:
+   s = Series(date_range('2011-01-02T00:00', '2011-01-02T02:00', freq='H').tz_localize('Asia/Tokyo'))
+   s
 
-  .. code-block:: ipython
+Previous Behavior:
 
-    In [9]: s.map(lambda x: x.hour)
-    Out[9]:
-    0    0
-    1    1
-    2    2
-    dtype: int32
+.. code-block:: ipython
 
+   In [9]: s.map(lambda x: x.hour)
+   Out[9]:
+   0    0
+   1    1
+   2    2
+   dtype: int32
 
-  New Behavior:
+New Behavior:
 
-  .. ipython:: python
+.. ipython:: python
 
-    s.map(lambda x: x.hour)
+   s.map(lambda x: x.hour)
 
 .. _whatsnew_0200.api_breaking.s3:
 
@@ -443,8 +441,8 @@ Pandas Google BigQuery support has moved
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 pandas has split off Google BigQuery support into a separate package ``pandas-gbq``. You can ``pip install pandas-gbq`` to get it.
-The functionality of ``pd.read_gbq()`` and ``.to_gbq()`` remains the same with the currently released version of ``pandas-gbq=0.1.3``. (:issue:`15347`)
-Documentation is now hosted `here <https://pandas-gbq.readthedocs.io/>`__
+The functionality of :func:`read_gbq` and :meth:`DataFrame.to_gbq` remain the same with the currently released version of ``pandas-gbq=0.1.3``.
+Documentation is now hosted `here <https://pandas-gbq.readthedocs.io/>`__  (:issue:`15347`)
 
 .. _whatsnew_0200.api_breaking.memory_usage:
 
@@ -667,7 +665,7 @@ Performance Improvements
 - Improved performance of ``groupby().cummin()`` and ``groupby().cummax()`` (:issue:`15048`, :issue:`15109`, :issue:`15561`)
 - Improved performance and reduced memory when indexing with a ``MultiIndex`` (:issue:`15245`)
 - When reading buffer object in ``read_sas()`` method without specified format, filepath string is inferred rather than buffer object. (:issue:`14947`)
-- Improved performance of `rank()` for categorical data (:issue:`15498`)
+- Improved performance of ``.rank()`` for categorical data (:issue:`15498`)
 - Improved performance when using ``.unstack()`` (:issue:`15503`)
 
 
