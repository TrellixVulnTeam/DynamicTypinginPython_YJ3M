commit 69c58da27cb61a81a94cc3a5da3a2c1870b4e693
Author: Kaiqi Dong <kaiqi@kth.se>
Date:   Tue Aug 20 16:18:54 2019 +0200

    PLT: plot('line') or plot('area') produces wrong xlim in xaxis in 0.25.0 (#27993)
    
    * Fix issue 27686

diff --git a/doc/source/whatsnew/v1.0.0.rst b/doc/source/whatsnew/v1.0.0.rst
index 3ce558ca3..4decc9908 100644
--- a/doc/source/whatsnew/v1.0.0.rst
+++ b/doc/source/whatsnew/v1.0.0.rst
@@ -168,6 +168,7 @@ Plotting
 -
 - Bug in :meth:`DataFrame.plot` producing incorrect legend markers when plotting multiple series on the same axis (:issue:`18222`)
 - Bug in :meth:`DataFrame.plot` when ``kind='box'`` and data contains datetime or timedelta data. These types are now automatically dropped (:issue:`22799`)
+- Bug in :meth:`DataFrame.plot.line` and :meth:`DataFrame.plot.area` produce wrong xlim in x-axis (:issue:`27686`, :issue:`25160`, :issue:`24784`)
 
 Groupby/resample/rolling
 ^^^^^^^^^^^^^^^^^^^^^^^^
diff --git a/pandas/plotting/_matplotlib/core.py b/pandas/plotting/_matplotlib/core.py
index 287cc2f41..fbca57206 100644
--- a/pandas/plotting/_matplotlib/core.py
+++ b/pandas/plotting/_matplotlib/core.py
@@ -33,8 +33,6 @@ from pandas.plotting._matplotlib.compat import _mpl_ge_3_0_0
 from pandas.plotting._matplotlib.style import _get_standard_colors
 from pandas.plotting._matplotlib.tools import (
     _flatten,
-    _get_all_lines,
-    _get_xlim,
     _handle_shared_axes,
     _subplots,
     format_date_labels,
@@ -1101,9 +1099,8 @@ class LinePlot(MPLPlot):
             )
             self._add_legend_handle(newlines[0], label, index=i)
 
-            lines = _get_all_lines(ax)
-            left, right = _get_xlim(lines)
-            ax.set_xlim(left, right)
+            # GH27686 set_xlim will truncate xaxis to fixed space
+            ax.relim()
 
     @classmethod
     def _plot(cls, ax, x, y, style=None, column_num=None, stacking_id=None, **kwds):
diff --git a/pandas/plotting/_matplotlib/tools.py b/pandas/plotting/_matplotlib/tools.py
index 8472eb3a3..fd2913ca5 100644
--- a/pandas/plotting/_matplotlib/tools.py
+++ b/pandas/plotting/_matplotlib/tools.py
@@ -343,27 +343,6 @@ def _flatten(axes):
     return np.array(axes)
 
 
-def _get_all_lines(ax):
-    lines = ax.get_lines()
-
-    if hasattr(ax, "right_ax"):
-        lines += ax.right_ax.get_lines()
-
-    if hasattr(ax, "left_ax"):
-        lines += ax.left_ax.get_lines()
-
-    return lines
-
-
-def _get_xlim(lines):
-    left, right = np.inf, -np.inf
-    for l in lines:
-        x = l.get_xdata(orig=False)
-        left = min(np.nanmin(x), left)
-        right = max(np.nanmax(x), right)
-    return left, right
-
-
 def _set_ticks_props(axes, xlabelsize=None, xrot=None, ylabelsize=None, yrot=None):
     import matplotlib.pyplot as plt
 
diff --git a/pandas/tests/plotting/test_datetimelike.py b/pandas/tests/plotting/test_datetimelike.py
index 69070ea11..be87929b4 100644
--- a/pandas/tests/plotting/test_datetimelike.py
+++ b/pandas/tests/plotting/test_datetimelike.py
@@ -419,6 +419,8 @@ class TestTSPlot(TestPlotBase):
         assert conv.get_finder("A") == conv._annual_finder
         assert conv.get_finder("W") == conv._daily_finder
 
+    # TODO: The finder should be retested due to wrong xlim values on x-axis
+    @pytest.mark.xfail(reason="TODO: check details in GH28021")
     @pytest.mark.slow
     def test_finder_daily(self):
         day_lst = [10, 40, 252, 400, 950, 2750, 10000]
@@ -442,6 +444,8 @@ class TestTSPlot(TestPlotBase):
         assert rs1 == xpl1
         assert rs2 == xpl2
 
+    # TODO: The finder should be retested due to wrong xlim values on x-axis
+    @pytest.mark.xfail(reason="TODO: check details in GH28021")
     @pytest.mark.slow
     def test_finder_quarterly(self):
         yrs = [3.5, 11]
@@ -465,6 +469,8 @@ class TestTSPlot(TestPlotBase):
         assert rs1 == xpl1
         assert rs2 == xpl2
 
+    # TODO: The finder should be retested due to wrong xlim values on x-axis
+    @pytest.mark.xfail(reason="TODO: check details in GH28021")
     @pytest.mark.slow
     def test_finder_monthly(self):
         yrs = [1.15, 2.5, 4, 11]
@@ -498,6 +504,8 @@ class TestTSPlot(TestPlotBase):
         xp = Period("1989Q1", "M").ordinal
         assert rs == xp
 
+    # TODO: The finder should be retested due to wrong xlim values on x-axis
+    @pytest.mark.xfail(reason="TODO: check details in GH28021")
     @pytest.mark.slow
     def test_finder_annual(self):
         xp = [1987, 1988, 1990, 1990, 1995, 2020, 2070, 2170]
@@ -522,7 +530,7 @@ class TestTSPlot(TestPlotBase):
         _, ax = self.plt.subplots()
         ser.plot(ax=ax)
         xaxis = ax.get_xaxis()
-        rs = xaxis.get_majorticklocs()[0]
+        rs = xaxis.get_majorticklocs()[1]
         xp = Period("1/1/1999", freq="Min").ordinal
 
         assert rs == xp
@@ -534,7 +542,7 @@ class TestTSPlot(TestPlotBase):
         _, ax = self.plt.subplots()
         ser.plot(ax=ax)
         xaxis = ax.get_xaxis()
-        rs = xaxis.get_majorticklocs()[0]
+        rs = xaxis.get_majorticklocs()[1]
         xp = Period("1/1/1999", freq="H").ordinal
 
         assert rs == xp
@@ -1410,7 +1418,9 @@ class TestTSPlot(TestPlotBase):
 
     def test_format_timedelta_ticks_narrow(self):
 
-        expected_labels = ["00:00:00.0000000{:0>2d}".format(i) for i in range(10)]
+        expected_labels = [
+            "00:00:00.0000000{:0>2d}".format(i) for i in np.arange(0, 10, 2)
+        ]
 
         rng = timedelta_range("0", periods=10, freq="ns")
         df = DataFrame(np.random.randn(len(rng), 3), rng)
@@ -1420,8 +1430,8 @@ class TestTSPlot(TestPlotBase):
         labels = ax.get_xticklabels()
 
         result_labels = [x.get_text() for x in labels]
-        assert len(result_labels) == len(expected_labels)
-        assert result_labels == expected_labels
+        assert (len(result_labels) - 2) == len(expected_labels)
+        assert result_labels[1:-1] == expected_labels
 
     def test_format_timedelta_ticks_wide(self):
         expected_labels = [
@@ -1444,8 +1454,8 @@ class TestTSPlot(TestPlotBase):
         labels = ax.get_xticklabels()
 
         result_labels = [x.get_text() for x in labels]
-        assert len(result_labels) == len(expected_labels)
-        assert result_labels == expected_labels
+        assert (len(result_labels) - 2) == len(expected_labels)
+        assert result_labels[1:-1] == expected_labels
 
     def test_timedelta_plot(self):
         # test issue #8711
diff --git a/pandas/tests/plotting/test_frame.py b/pandas/tests/plotting/test_frame.py
index 7fdc0252b..f672cd3a6 100644
--- a/pandas/tests/plotting/test_frame.py
+++ b/pandas/tests/plotting/test_frame.py
@@ -3177,6 +3177,58 @@ class TestDataFramePlots(TestPlotBase):
         assert labels_position["(2013, 1)"] == 2.0
         assert labels_position["(2013, 2)"] == 3.0
 
+    @pytest.mark.parametrize("kind", ["line", "area"])
+    def test_xlim_plot_line(self, kind):
+        # test if xlim is set correctly in plot.line and plot.area
+        # GH 27686
+        df = pd.DataFrame([2, 4], index=[1, 2])
+        ax = df.plot(kind=kind)
+        xlims = ax.get_xlim()
+        assert xlims[0] < 1
+        assert xlims[1] > 2
+
+    def test_xlim_plot_line_correctly_in_mixed_plot_type(self):
+        # test if xlim is set correctly when ax contains multiple different kinds
+        # of plots, GH 27686
+        fig, ax = self.plt.subplots()
+
+        indexes = ["k1", "k2", "k3", "k4"]
+        df = pd.DataFrame(
+            {
+                "s1": [1000, 2000, 1500, 2000],
+                "s2": [900, 1400, 2000, 3000],
+                "s3": [1500, 1500, 1600, 1200],
+                "secondary_y": [1, 3, 4, 3],
+            },
+            index=indexes,
+        )
+        df[["s1", "s2", "s3"]].plot.bar(ax=ax, stacked=False)
+        df[["secondary_y"]].plot(ax=ax, secondary_y=True)
+
+        xlims = ax.get_xlim()
+        assert xlims[0] < 0
+        assert xlims[1] > 3
+
+        # make sure axis labels are plotted correctly as well
+        xticklabels = [t.get_text() for t in ax.get_xticklabels()]
+        assert xticklabels == indexes
+
+    def test_subplots_sharex_false(self):
+        # test when sharex is set to False, two plots should have different
+        # labels, GH 25160
+        df = pd.DataFrame(np.random.rand(10, 2))
+        df.iloc[5:, 1] = np.nan
+        df.iloc[:5, 0] = np.nan
+
+        figs, axs = self.plt.subplots(2, 1)
+        df.plot.line(ax=axs, subplots=True, sharex=False)
+
+        expected_ax1 = np.arange(4.5, 10, 0.5)
+        expected_ax2 = np.arange(-0.5, 5, 0.5)
+
+        tm.assert_numpy_array_equal(axs[0].get_xticks(), expected_ax1)
+        tm.assert_numpy_array_equal(axs[1].get_xticks(), expected_ax2)
+
 
 def _generate_4_axes_via_gridspec():
     import matplotlib.pyplot as plt
diff --git a/pandas/tests/plotting/test_series.py b/pandas/tests/plotting/test_series.py
index 111c3a70f..2c4c8aa74 100644
--- a/pandas/tests/plotting/test_series.py
+++ b/pandas/tests/plotting/test_series.py
@@ -897,3 +897,15 @@ class TestSeriesPlots(TestPlotBase):
         _, ax = self.plt.subplots()
         after = ax.xaxis.get_ticklocs()
         tm.assert_numpy_array_equal(before, after)
+
+    @pytest.mark.parametrize("kind", ["line", "area"])
+    def test_plot_xlim_for_series(self, kind):
+        # test if xlim is also correctly plotted in Series for line and area
+        # GH 27686
+        s = Series([2, 3])
+        _, ax = self.plt.subplots()
+        s.plot(kind=kind, ax=ax)
+        xlims = ax.get_xlim()
+
+        assert xlims[0] < 0
+        assert xlims[1] > 1
