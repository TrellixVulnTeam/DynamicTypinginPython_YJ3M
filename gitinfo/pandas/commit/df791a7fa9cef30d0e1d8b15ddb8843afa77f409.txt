commit df791a7fa9cef30d0e1d8b15ddb8843afa77f409
Author: jreback <jeff@reback.net>
Date:   Mon Aug 26 22:33:45 2013 -0400

    BUG/ENH: add bfill/ffill support for datetime64[ns]

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 361bd480a..5becc26a5 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -67,8 +67,9 @@ pandas 0.13
   - A Series of dtype ``timedelta64[ns]`` can now be divided by another
     ``timedelta64[ns]`` object to yield a ``float64`` dtyped Series. This
     is frequency conversion.
-  - Timedeltas support ``fillna`` with an integer interpreted as seconds,
+  - Timedelta64 support ``fillna/ffill/bfill`` with an integer interpreted as seconds,
     or a ``timedelta`` (:issue:`3371`)
+  - Datetime64 support ``ffill/bfill``
   - Performance improvements with ``__getitem__`` on ``DataFrames`` with
     when the key is a column
   - Support for using a ``DatetimeIndex/PeriodsIndex`` directly in a datelike calculation
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index a583a14df..683867233 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -1043,7 +1043,8 @@ class TimeDeltaBlock(IntBlock):
     def _try_coerce_result(self, result):
         """ reverse of try_coerce_args / try_operate """
         if isinstance(result, np.ndarray):
-            result = result.astype('m8[ns]')
+            if result.dtype.kind in ['i','f','O']:
+                result = result.astype('m8[ns]')
         elif isinstance(result, np.integer):
             result = np.timedelta64(result)
         return result
@@ -1299,6 +1300,8 @@ class DatetimeBlock(Block):
             if result.dtype == 'i8':
                 result = tslib.array_to_datetime(
                     result.astype(object).ravel()).reshape(result.shape)
+            elif result.dtype.kind in ['i','f','O']:
+                result = result.astype('M8[ns]')
         elif isinstance(result, (np.integer, np.datetime64)):
             result = lib.Timestamp(result)
         return result
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 2379b0ae8..a4bfcc1a4 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -2445,6 +2445,38 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         expected[0] = np.nan
         assert_series_equal(result,expected)
 
+        # bfill
+        td[2] = np.nan
+        result = td.bfill()
+        expected = td.fillna(0)
+        expected[2] = timedelta(days=1,seconds=9*3600+60+1)
+        assert_series_equal(result,expected)
+
+    def test_datetime64_fillna(self):
+
+        s = Series([Timestamp('20130101'),Timestamp('20130101'),Timestamp('20130102'),Timestamp('20130103 9:01:01')])
+        s[2] = np.nan
+
+        # reg fillna
+        result = s.fillna(Timestamp('20130104'))
+        expected = Series([Timestamp('20130101'),Timestamp('20130101'),Timestamp('20130104'),Timestamp('20130103 9:01:01')])
+        assert_series_equal(result,expected)
+
+        from pandas import tslib
+        result = s.fillna(tslib.NaT)
+        expected = s
+        assert_series_equal(result,expected)
+
+        # ffill
+        result = s.ffill()
+        expected = Series([Timestamp('20130101'),Timestamp('20130101'),Timestamp('20130101'),Timestamp('20130103 9:01:01')])
+        assert_series_equal(result,expected)
+
+        # bfill
+        result = s.bfill()
+        expected = Series([Timestamp('20130101'),Timestamp('20130101'),Timestamp('20130103 9:01:01'),Timestamp('20130103 9:01:01')])
+        assert_series_equal(result,expected)
+
     def test_sub_of_datetime_from_TimeSeries(self):
         from pandas.core import common as com
         from datetime import datetime
