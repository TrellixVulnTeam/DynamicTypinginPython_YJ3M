commit 4650563566ddfd18987a135d9aa84f7d5b2f4a2b
Author: Nicolas Bonnotte <bonnotte@descartes>
Date:   Tue Feb 23 13:48:24 2016 -0500

    ENH: decimal parameter added in to_latex and to_html
    
    closes #12031
    
    Author: Nicolas Bonnotte <bonnotte@descartes>
    
    Closes #12417 from nbonnotte/12031-to-latex-missing-decimal and squashes the following commits:
    
    ea50fd2 [Nicolas Bonnotte] ENH decimal parameter to to_latex and to_html, #12031

diff --git a/doc/source/whatsnew/v0.18.0.txt b/doc/source/whatsnew/v0.18.0.txt
index ab61f3f92..51fa0482a 100644
--- a/doc/source/whatsnew/v0.18.0.txt
+++ b/doc/source/whatsnew/v0.18.0.txt
@@ -867,6 +867,9 @@ Other API Changes
 
 - Statistical functions for ``NDFrame`` objects will now raise if non-numpy-compatible arguments are passed in for ``**kwargs`` (:issue:`12301`)
 
+- ``.to_latex`` and ``.to_html`` gain a ``decimal`` parameter like ``.to_csv``; the default is ``'.'`` (:issue:`12031`)
+
+
 .. _whatsnew_0180.deprecations:
 
 Deprecations
diff --git a/pandas/core/format.py b/pandas/core/format.py
index d5b95abb6..101a5e64b 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -338,7 +338,7 @@ class DataFrameFormatter(TableFormatter):
                  header=True, index=True, na_rep='NaN', formatters=None,
                  justify=None, float_format=None, sparsify=None,
                  index_names=True, line_width=None, max_rows=None,
-                 max_cols=None, show_dimensions=False, **kwds):
+                 max_cols=None, show_dimensions=False, decimal='.', **kwds):
         self.frame = frame
         self.buf = _expand_user(buf) if buf is not None else StringIO()
         self.show_index_names = index_names
@@ -351,6 +351,7 @@ class DataFrameFormatter(TableFormatter):
         self.float_format = float_format
         self.formatters = formatters if formatters is not None else {}
         self.na_rep = na_rep
+        self.decimal = decimal
         self.col_space = col_space
         self.header = header
         self.index = index
@@ -648,7 +649,7 @@ class DataFrameFormatter(TableFormatter):
         formatter = self._get_formatter(i)
         return format_array(frame.iloc[:, i]._values, formatter,
                             float_format=self.float_format, na_rep=self.na_rep,
-                            space=self.col_space)
+                            space=self.col_space, decimal=self.decimal)
 
     def to_html(self, classes=None, notebook=False):
         """
@@ -1970,7 +1971,7 @@ class ExcelFormatter(object):
 
 
 def format_array(values, formatter, float_format=None, na_rep='NaN',
-                 digits=None, space=None, justify='right'):
+                 digits=None, space=None, justify='right', decimal='.'):
 
     if com.is_categorical_dtype(values):
         fmt_klass = CategoricalArrayFormatter
@@ -2000,7 +2001,7 @@ def format_array(values, formatter, float_format=None, na_rep='NaN',
 
     fmt_obj = fmt_klass(values, digits=digits, na_rep=na_rep,
                         float_format=float_format, formatter=formatter,
-                        space=space, justify=justify)
+                        space=space, justify=justify, decimal=decimal)
 
     return fmt_obj.get_result()
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index cd32ff213..449068eff 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1497,7 +1497,7 @@ class DataFrame(NDFrame):
                 float_format=None, sparsify=None, index_names=True,
                 justify=None, bold_rows=True, classes=None, escape=True,
                 max_rows=None, max_cols=None, show_dimensions=False,
-                notebook=False):
+                notebook=False, decimal='.'):
         """
         Render a DataFrame as an HTML table.
 
@@ -1515,7 +1515,10 @@ class DataFrame(NDFrame):
         max_cols : int, optional
             Maximum number of columns to show before truncating. If None, show
             all.
+        decimal : string, default '.'
+            Character recognized as decimal separator, e.g. ',' in Europe
 
+            .. versionadded:: 0.18.0
         """
 
         if colSpace is not None:  # pragma: no cover
@@ -1533,7 +1536,8 @@ class DataFrame(NDFrame):
                                            bold_rows=bold_rows, escape=escape,
                                            max_rows=max_rows,
                                            max_cols=max_cols,
-                                           show_dimensions=show_dimensions)
+                                           show_dimensions=show_dimensions,
+                                           decimal=decimal)
         # TODO: a generic formatter wld b in DataFrameFormatter
         formatter.to_html(classes=classes, notebook=notebook)
 
@@ -1545,7 +1549,7 @@ class DataFrame(NDFrame):
                  header=True, index=True, na_rep='NaN', formatters=None,
                  float_format=None, sparsify=None, index_names=True,
                  bold_rows=True, column_format=None, longtable=None,
-                 escape=None, encoding=None):
+                 escape=None, encoding=None, decimal='.'):
         """
         Render a DataFrame to a tabular environment table. You can splice
         this into a LaTeX document. Requires \\usepackage{booktabs}.
@@ -1568,6 +1572,11 @@ class DataFrame(NDFrame):
             characters in column names.
         encoding : str, default None
             Default encoding is ascii in Python 2 and utf-8 in Python 3
+        decimal : string, default '.'
+            Character recognized as decimal separator, e.g. ',' in Europe
+
+            .. versionadded:: 0.18.0
+
         """
 
         if colSpace is not None:  # pragma: no cover
@@ -1588,7 +1597,7 @@ class DataFrame(NDFrame):
                                            bold_rows=bold_rows,
                                            sparsify=sparsify,
                                            index_names=index_names,
-                                           escape=escape)
+                                           escape=escape, decimal=decimal)
         formatter.to_latex(column_format=column_format, longtable=longtable,
                            encoding=encoding)
 
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index cb5241c20..6772c1ee4 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -760,6 +760,34 @@ class TestDataFrameFormatting(tm.TestCase):
         expected = u'<table border="1" class="dataframe">\n  <thead>\n    <tr style="text-align: right;">\n      <th></th>\n      <th>A</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>\u03c3</td>\n    </tr>\n  </tbody>\n</table>'
         self.assertEqual(df.to_html(), expected)
 
+    def test_to_html_decimal(self):
+        # GH 12031
+        df = DataFrame({'A': [6.0, 3.1, 2.2]})
+        result = df.to_html(decimal=',')
+        expected = ('<table border="1" class="dataframe">\n'
+                    '  <thead>\n'
+                    '    <tr style="text-align: right;">\n'
+                    '      <th></th>\n'
+                    '      <th>A</th>\n'
+                    '    </tr>\n'
+                    '  </thead>\n'
+                    '  <tbody>\n'
+                    '    <tr>\n'
+                    '      <th>0</th>\n'
+                    '      <td>6,0</td>\n'
+                    '    </tr>\n'
+                    '    <tr>\n'
+                    '      <th>1</th>\n'
+                    '      <td>3,1</td>\n'
+                    '    </tr>\n'
+                    '    <tr>\n'
+                    '      <th>2</th>\n'
+                    '      <td>2,2</td>\n'
+                    '    </tr>\n'
+                    '  </tbody>\n'
+                    '</table>')
+        self.assertEqual(result, expected)
+
     def test_to_html_escaped(self):
         a = 'str<ing1 &amp;'
         b = 'stri>ng2 &amp;'
@@ -2897,6 +2925,24 @@ b &       b &     b \\
 
         self.assertEqual(withoutindex_result, withoutindex_expected)
 
+    def test_to_latex_decimal(self):
+        # GH 12031
+        self.frame.to_latex()
+        df = DataFrame({'a': [1.0, 2.1], 'b': ['b1', 'b2']})
+        withindex_result = df.to_latex(decimal=',')
+        print("WHAT THE")
+        withindex_expected = r"""\begin{tabular}{lrl}
+\toprule
+{} &    a &   b \\
+\midrule
+0 &  1,0 &  b1 \\
+1 &  2,1 &  b2 \\
+\bottomrule
+\end{tabular}
+"""
+
+        self.assertEqual(withindex_result, withindex_expected)
+
     def test_to_csv_quotechar(self):
         df = DataFrame({'col': [1, 2]})
         expected = """\
