commit ce591123a9c5f30513e5d43936b106864d268d54
Author: Chang She <changshe@gmail.com>
Date:   Mon Sep 10 14:41:41 2012 -0400

    BUG: only use Q-OCT Q-NOV Q-DEC in quarterly freq inference #1789

diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index bae0a4126..8cb1fdfd8 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -846,7 +846,8 @@ class _FrequencyInferer(object):
         quarterly_rule = self._get_quarterly_rule()
         if quarterly_rule:
             nquarters = self.mdiffs[0] / 3
-            month = _month_aliases[self.rep_stamp.month]
+            mod_dict = {0 : 12, 2 : 11, 1 : 10}
+            month = _month_aliases[mod_dict[self.rep_stamp.month % 3]]
             return _maybe_add_count('%s-%s' % (quarterly_rule, month),
                                     nquarters)
 
diff --git a/pandas/tseries/tests/test_frequencies.py b/pandas/tseries/tests/test_frequencies.py
index c1cf2b043..2b1a87d72 100644
--- a/pandas/tseries/tests/test_frequencies.py
+++ b/pandas/tseries/tests/test_frequencies.py
@@ -7,7 +7,7 @@ import nose
 
 import numpy as np
 
-from pandas import Index, DatetimeIndex, date_range
+from pandas import Index, DatetimeIndex, date_range, period_range
 
 from pandas.tseries.frequencies import to_offset, infer_freq
 from pandas.tseries.tools import to_datetime
@@ -176,11 +176,49 @@ class TestFrequencyInference(unittest.TestCase):
 
         gen = date_range(start, periods=7, freq=freq)
         index = _dti(gen.values)
-        self.assert_(infer_freq(index) == gen.freqstr)
+        if not freq.startswith('Q-'):
+            self.assert_(infer_freq(index) == gen.freqstr)
+        else:
+            inf_freq = infer_freq(index)
+            self.assert_((inf_freq == 'Q-DEC' and
+                          gen.freqstr in ('Q', 'Q-DEC', 'Q-SEP', 'Q-JUN',
+                                          'Q-MAR'))
+                         or
+                         (inf_freq == 'Q-NOV' and
+                          gen.freqstr in ('Q-NOV', 'Q-AUG', 'Q-MAY', 'Q-FEB'))
+                         or
+                         (inf_freq == 'Q-OCT' and
+                          gen.freqstr in ('Q-OCT', 'Q-JUL', 'Q-APR', 'Q-JAN')))
+
 
         gen = date_range(start, periods=5, freq=freq)
         index = _dti(gen.values)
-        self.assert_(infer_freq(index) == gen.freqstr)
+        if not freq.startswith('Q-'):
+            self.assert_(infer_freq(index) == gen.freqstr)
+        else:
+            inf_freq = infer_freq(index)
+            self.assert_((inf_freq == 'Q-DEC' and
+                          gen.freqstr in ('Q', 'Q-DEC', 'Q-SEP', 'Q-JUN',
+                                          'Q-MAR'))
+                         or
+                         (inf_freq == 'Q-NOV' and
+                          gen.freqstr in ('Q-NOV', 'Q-AUG', 'Q-MAY', 'Q-FEB'))
+                         or
+                         (inf_freq == 'Q-OCT' and
+                          gen.freqstr in ('Q-OCT', 'Q-JUL', 'Q-APR', 'Q-JAN')))
+
+    def test_infer_freq(self):
+        rng = period_range('1959Q2', '2009Q3', freq='Q')
+        rng = Index(rng.to_timestamp('D', how='e').asobject)
+        self.assert_(rng.inferred_freq == 'Q-DEC')
+
+        rng = period_range('1959Q2', '2009Q3', freq='Q-NOV')
+        rng = Index(rng.to_timestamp('D', how='e').asobject)
+        self.assert_(rng.inferred_freq == 'Q-NOV')
+
+        rng = period_range('1959Q2', '2009Q3', freq='Q-OCT')
+        rng = Index(rng.to_timestamp('D', how='e').asobject)
+        self.assert_(rng.inferred_freq == 'Q-OCT')
 
     def test_not_monotonic(self):
         rng = _dti(['1/31/2000', '1/31/2001', '1/31/2002'])
