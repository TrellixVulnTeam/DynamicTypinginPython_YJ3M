commit d0e9034c80c768638149559182ce80f12886a6ec
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Aug 11 21:48:36 2012 -0400

    ENH: add str.decode to Series for unicode decoding close #1706

diff --git a/RELEASE.rst b/RELEASE.rst
index 852679616..f91ed2516 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -27,6 +27,10 @@ pandas 0.8.2
 
 **Release date:** NOT YET RELEASED
 
+**New features**
+
+  - Add ``str.decode`` to Series (#1706)
+
 **Improvements to existing features**
 
   - Add ``flags`` option for ``re.compile`` in some Series.str methods (#1659)
diff --git a/pandas/core/strings.py b/pandas/core/strings.py
index 6541906d5..e589b73ed 100644
--- a/pandas/core/strings.py
+++ b/pandas/core/strings.py
@@ -591,6 +591,21 @@ def str_get(arr, i):
     f = lambda x: x[i]
     return _na_map(f, arr)
 
+def str_decode(arr, encoding):
+    """
+    Decode character string to unicode using indicated encoding
+
+    Parameters
+    ----------
+    encoding : string
+
+    Returns
+    -------
+    decoded : array
+    """
+    f = lambda x: x.decode(encoding)
+    return _na_map(f, arr)
+
 def _noarg_wrapper(f):
     def wrapper(self):
         result = f(self.series)
@@ -708,6 +723,11 @@ class StringMethods(object):
     def slice_replace(self, i=None, j=None):
         raise NotImplementedError
 
+    @copy(str_decode)
+    def decode(self, encoding):
+        result = str_decode(self.series, encoding)
+        return self._wrap_result(result)
+
     count = _pat_wrapper(str_count, flags=True)
     startswith = _pat_wrapper(str_startswith)
     endswith = _pat_wrapper(str_endswith)
diff --git a/pandas/tests/test_strings.py b/pandas/tests/test_strings.py
index dfeeb2165..e2d53e5ea 100644
--- a/pandas/tests/test_strings.py
+++ b/pandas/tests/test_strings.py
@@ -658,6 +658,15 @@ class TestStringMethods(unittest.TestCase):
         result = data.str.contains(pat, flags=re.IGNORECASE)
         self.assertEquals(result[0], True)
 
+    def test_decode(self):
+        series = Series(['a', 'b', '\xc3\xa4'])
+
+        f = lambda x: x.decode('utf-8')
+        result = series.str.decode('utf-8')
+        exp = series.map(f)
+
+        tm.assert_series_equal(result, exp)
+
 if __name__ == '__main__':
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
                    exit=False)
