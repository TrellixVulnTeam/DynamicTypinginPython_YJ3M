commit 67fcdefbd42921faa116558d5cf93635dd6fb1fc
Author: Terji Petersen <contribute@tensortable.com>
Date:   Mon Jan 13 19:28:23 2020 +0000

    TYP: NDFrame.resample (#30947)

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 676b78573..594b8a00a 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -102,7 +102,6 @@ from pandas.core.arrays import Categorical, ExtensionArray
 from pandas.core.arrays.datetimelike import DatetimeLikeArrayMixin as DatetimeLikeArray
 from pandas.core.arrays.sparse import SparseFrameAccessor
 from pandas.core.generic import NDFrame, _shared_docs
-from pandas.core.groupby import generic as groupby_generic
 from pandas.core.indexes import base as ibase
 from pandas.core.indexes.api import Index, ensure_index, ensure_index_from_sequences
 from pandas.core.indexes.datetimes import DatetimeIndex
@@ -129,6 +128,7 @@ from pandas.io.formats.printing import pprint_thing
 import pandas.plotting
 
 if TYPE_CHECKING:
+    from pandas.core.groupby.generic import DataFrameGroupBy
     from pandas.io.formats.style import Styler
 
 # ---------------------------------------------------------------------
@@ -5777,13 +5777,14 @@ Wild         185.0
         group_keys: bool = True,
         squeeze: bool = False,
         observed: bool = False,
-    ) -> "groupby_generic.DataFrameGroupBy":
+    ) -> "DataFrameGroupBy":
+        from pandas.core.groupby.generic import DataFrameGroupBy
 
         if level is None and by is None:
             raise TypeError("You have to supply one of 'by' and 'level'")
         axis = self._get_axis_number(axis)
 
-        return groupby_generic.DataFrameGroupBy(
+        return DataFrameGroupBy(
             obj=self,
             keys=by,
             axis=axis,
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 04ce424ed..05066ac0e 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -8,6 +8,7 @@ import pickle
 import re
 from textwrap import dedent
 from typing import (
+    TYPE_CHECKING,
     Any,
     Callable,
     Dict,
@@ -101,6 +102,9 @@ from pandas.io.formats.format import DataFrameFormatter, format_percentiles
 from pandas.io.formats.printing import pprint_thing
 from pandas.tseries.frequencies import to_offset
 
+if TYPE_CHECKING:
+    from pandas.core.resample import Resampler
+
 # goal is to be able to define the docs close to function, while still being
 # able to share
 _shared_docs: Dict[str, str] = dict()
@@ -7685,7 +7689,7 @@ class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):
         base: int = 0,
         on=None,
         level=None,
-    ):
+    ) -> "Resampler":
         """
         Resample time-series data.
 
@@ -7950,10 +7954,10 @@ class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):
         2000-01-04     36      90
         """
 
-        from pandas.core.resample import resample
+        from pandas.core.resample import get_resampler
 
         axis = self._get_axis_number(axis)
-        return resample(
+        return get_resampler(
             self,
             freq=rule,
             label=label,
diff --git a/pandas/core/resample.py b/pandas/core/resample.py
index 0e43880df..fb837409a 100644
--- a/pandas/core/resample.py
+++ b/pandas/core/resample.py
@@ -1262,7 +1262,7 @@ class TimedeltaIndexResamplerGroupby(_GroupByMixin, TimedeltaIndexResampler):
         return TimedeltaIndexResampler
 
 
-def resample(obj, kind=None, **kwds):
+def get_resampler(obj, kind=None, **kwds):
     """
     Create a TimeGrouper and return our resampler.
     """
@@ -1270,7 +1270,7 @@ def resample(obj, kind=None, **kwds):
     return tg._get_resampler(obj, kind=kind)
 
 
-resample.__doc__ = Resampler.__doc__
+get_resampler.__doc__ = Resampler.__doc__
 
 
 def get_resampler_for_grouping(
diff --git a/pandas/core/series.py b/pandas/core/series.py
index ed338700f..fe5c5fd5e 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -70,7 +70,6 @@ from pandas.core.construction import (
     is_empty_data,
     sanitize_array,
 )
-from pandas.core.groupby import generic as groupby_generic
 from pandas.core.indexers import maybe_convert_indices
 from pandas.core.indexes.accessors import CombinedDatetimelikeProperties
 from pandas.core.indexes.api import (
@@ -94,6 +93,7 @@ import pandas.plotting
 
 if TYPE_CHECKING:
     from pandas.core.frame import DataFrame
+    from pandas.core.groupby.generic import SeriesGroupBy
 
 __all__ = ["Series"]
 
@@ -1634,13 +1634,14 @@ Name: Max Speed, dtype: float64
         group_keys: bool = True,
         squeeze: bool = False,
         observed: bool = False,
-    ) -> "groupby_generic.SeriesGroupBy":
+    ) -> "SeriesGroupBy":
+        from pandas.core.groupby.generic import SeriesGroupBy
 
         if level is None and by is None:
             raise TypeError("You have to supply one of 'by' and 'level'")
         axis = self._get_axis_number(axis)
 
-        return groupby_generic.SeriesGroupBy(
+        return SeriesGroupBy(
             obj=self,
             keys=by,
             axis=axis,
