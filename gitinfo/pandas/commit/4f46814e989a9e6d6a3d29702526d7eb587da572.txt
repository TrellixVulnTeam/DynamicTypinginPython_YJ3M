commit 4f46814e989a9e6d6a3d29702526d7eb587da572
Author: jreback <jeff@reback.net>
Date:   Mon Aug 26 17:29:07 2013 -0400

    Revert "ENH Factored out excel_value_to_python_value from ExcelFile::_parse_excel (GH4589)"
    
    This reverts commit 9fcd30bda773064c089815245521a1237e89ce22.
    
    Conflicts:
    
            doc/source/release.rst
            pandas/io/tests/test_excel.py

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 56d51183a..b1fb43fe7 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -126,7 +126,6 @@ pandas 0.13
       now returns a ``MultiIndex`` rather than an ``Index``. (:issue:`4039`)
 
   - Infer and downcast dtype if ``downcast='infer'`` is passed to ``fillna/ffill/bfill`` (:issue:`4604`)
-  - Factored out excel_value_to_python_value from ExcelFile::_parse_excel (:issue:`4589`)
 
 **Internal Refactoring**
 
diff --git a/pandas/io/excel.py b/pandas/io/excel.py
index aa89264cf..534a88e30 100644
--- a/pandas/io/excel.py
+++ b/pandas/io/excel.py
@@ -53,23 +53,6 @@ def read_excel(path_or_buf, sheetname, kind=None, **kwds):
     return ExcelFile(path_or_buf, kind=kind).parse(sheetname=sheetname,
                                                    kind=kind, **kwds)
 
-def excel_value_to_python_value(value, typ, datemode):
-    from xlrd import (xldate_as_tuple, XL_CELL_DATE,
-                      XL_CELL_ERROR, XL_CELL_BOOLEAN)
-            
-    if typ == XL_CELL_DATE:
-        dt = xldate_as_tuple(value, datemode)
-        # how to produce this first case?
-        if dt[0] < datetime.MINYEAR:  # pragma: no cover
-            value = datetime.time(*dt[3:])
-        else:
-            value = datetime.datetime(*dt)
-    elif typ == XL_CELL_ERROR:
-        value = np.nan
-    elif typ == XL_CELL_BOOLEAN:
-        value = bool(value)
-    
-    return value
 
 class ExcelFile(object):
     """
@@ -191,6 +174,8 @@ class ExcelFile(object):
                      index_col=None, has_index_names=None, parse_cols=None,
                      parse_dates=False, date_parser=None, na_values=None,
                      thousands=None, chunksize=None, **kwds):
+        from xlrd import (xldate_as_tuple, XL_CELL_DATE,
+                          XL_CELL_ERROR, XL_CELL_BOOLEAN)
 
         datemode = self.book.datemode
         if isinstance(sheetname, compat.string_types):
@@ -208,7 +193,17 @@ class ExcelFile(object):
                     should_parse[j] = self._should_parse(j, parse_cols)
 
                 if parse_cols is None or should_parse[j]:
-                    value = excel_value_to_python_value(value=value, typ=typ, datemode=datemode)
+                    if typ == XL_CELL_DATE:
+                        dt = xldate_as_tuple(value, datemode)
+                        # how to produce this first case?
+                        if dt[0] < datetime.MINYEAR:  # pragma: no cover
+                            value = datetime.time(*dt[3:])
+                        else:
+                            value = datetime.datetime(*dt)
+                    elif typ == XL_CELL_ERROR:
+                        value = np.nan
+                    elif typ == XL_CELL_BOOLEAN:
+                        value = bool(value)
                     row.append(value)
 
             data.append(row)
diff --git a/pandas/io/tests/data/types.xls b/pandas/io/tests/data/types.xls
deleted file mode 100755
index 232a88609..000000000
Binary files a/pandas/io/tests/data/types.xls and /dev/null differ
diff --git a/pandas/io/tests/test_excel.py b/pandas/io/tests/test_excel.py
index 96c4a5129..3f41be6ae 100644
--- a/pandas/io/tests/test_excel.py
+++ b/pandas/io/tests/test_excel.py
@@ -18,8 +18,7 @@ from pandas import DataFrame, Series, Index, MultiIndex, DatetimeIndex
 import pandas.io.parsers as parsers
 from pandas.io.parsers import (read_csv, read_table, read_fwf,
                                 TextParser, TextFileReader)
-from pandas.io.excel import (ExcelFile, ExcelWriter, read_excel,
-                             excel_value_to_python_value)
+from pandas.io.excel import ExcelFile, ExcelWriter, read_excel
 from pandas.util.testing import (assert_almost_equal,
                                  assert_series_equal,
                                  network,
@@ -261,32 +260,6 @@ class ExcelTests(unittest.TestCase):
         tm.assert_frame_equal(df4, df.ix[:-1])
         tm.assert_frame_equal(df4, df5)
 
-    def test_excel_value_to_python_value(self):
-        _skip_if_no_xlrd()
-
-        pth = os.path.join(self.dirpath, 'types.xls')
-        xls = ExcelFile(pth)
-        book = xls.book
-        sheet = book.sheet_by_index(0)
-
-        cell = sheet.cell(0, 0)
-        self.assertEquals(excel_value_to_python_value(value=cell.value, typ=cell.ctype, datemode=book.datemode), 'date')
-
-        cell = sheet.cell(0, 1)
-        self.assertEquals(excel_value_to_python_value(value=cell.value, typ=cell.ctype, datemode=book.datemode), datetime(year=2013, month=4, day=1))
-
-        cell = sheet.cell(1, 1)
-        self.assertEquals(excel_value_to_python_value(value=cell.value, typ=cell.ctype, datemode=book.datemode), True)
-
-        cell = sheet.cell(2, 1)
-        self.assertEquals(excel_value_to_python_value(value=cell.value, typ=cell.ctype, datemode=book.datemode), 1)
-
-        cell = sheet.cell(3, 1)
-        self.assertEquals(excel_value_to_python_value(value=cell.value, typ=cell.ctype, datemode=book.datemode), 1.1)
-
-        cell = sheet.cell(4, 1)
-        self.assertIs(excel_value_to_python_value(value=cell.value, typ=cell.ctype, datemode=book.datemode), np.nan) #We need to use is here because value is NaN
-
     def test_excel_read_buffer(self):
         _skip_if_no_xlrd()
         _skip_if_no_openpyxl()
