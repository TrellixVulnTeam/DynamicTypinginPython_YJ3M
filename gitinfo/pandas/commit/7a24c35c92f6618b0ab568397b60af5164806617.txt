commit 7a24c35c92f6618b0ab568397b60af5164806617
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Sat Mar 14 17:36:14 2020 -0700

    DEPR: Categorical.to_dense (#32639)

diff --git a/doc/source/whatsnew/v1.1.0.rst b/doc/source/whatsnew/v1.1.0.rst
index 6443a037a..41b2b93f6 100644
--- a/doc/source/whatsnew/v1.1.0.rst
+++ b/doc/source/whatsnew/v1.1.0.rst
@@ -207,6 +207,7 @@ Deprecations
 - :meth:`DataFrame.mean` and :meth:`DataFrame.median` with ``numeric_only=None`` will include datetime64 and datetime64tz columns in a future version (:issue:`29941`)
 - Setting values with ``.loc`` using a positional slice is deprecated and will raise in a future version.  Use ``.loc`` with labels or ``.iloc`` with positions instead (:issue:`31840`)
 - :meth:`DataFrame.to_dict` has deprecated accepting short names for ``orient`` in future versions (:issue:`32515`)
+- :meth:`Categorical.to_dense` is deprecated and will be removed in a future version, use ``np.asarray(cat)`` instead (:issue:`32639`)
 
 .. ---------------------------------------------------------------------------
 
diff --git a/pandas/core/arrays/categorical.py b/pandas/core/arrays/categorical.py
index 56ace4801..8284a89a2 100644
--- a/pandas/core/arrays/categorical.py
+++ b/pandas/core/arrays/categorical.py
@@ -1675,6 +1675,12 @@ class Categorical(ExtensionArray, PandasObject):
         -------
         dense : array
         """
+        warn(
+            "Categorical.to_dense is deprecated and will be removed in "
+            "a future version.  Use np.asarray(cat) instead.",
+            FutureWarning,
+            stacklevel=2,
+        )
         return np.asarray(self)
 
     def fillna(self, value=None, method=None, limit=None):
diff --git a/pandas/tests/arrays/categorical/test_api.py b/pandas/tests/arrays/categorical/test_api.py
index f49f70f5a..b99e17267 100644
--- a/pandas/tests/arrays/categorical/test_api.py
+++ b/pandas/tests/arrays/categorical/test_api.py
@@ -247,7 +247,7 @@ class TestCategoricalAPI:
         tm.assert_index_equal(c.categories, Index([1, 2, 3, 4]))
 
         exp = np.array([1, 2, 3, 4, 1], dtype=np.int64)
-        tm.assert_numpy_array_equal(c.to_dense(), exp)
+        tm.assert_numpy_array_equal(np.asarray(c), exp)
 
         # all "pointers" to '4' must be changed from 3 to 0,...
         c = c.set_categories([4, 3, 2, 1])
@@ -260,7 +260,7 @@ class TestCategoricalAPI:
 
         # output is the same
         exp = np.array([1, 2, 3, 4, 1], dtype=np.int64)
-        tm.assert_numpy_array_equal(c.to_dense(), exp)
+        tm.assert_numpy_array_equal(np.asarray(c), exp)
         assert c.min() == 4
         assert c.max() == 1
 
@@ -268,13 +268,19 @@ class TestCategoricalAPI:
         c2 = c.set_categories([4, 3, 2, 1], ordered=False)
         assert not c2.ordered
 
-        tm.assert_numpy_array_equal(c.to_dense(), c2.to_dense())
+        tm.assert_numpy_array_equal(np.asarray(c), np.asarray(c2))
 
         # set_categories should pass thru the ordering
         c2 = c.set_ordered(False).set_categories([4, 3, 2, 1])
         assert not c2.ordered
 
-        tm.assert_numpy_array_equal(c.to_dense(), c2.to_dense())
+        tm.assert_numpy_array_equal(np.asarray(c), np.asarray(c2))
+
+    def test_to_dense_deprecated(self):
+        cat = Categorical(["a", "b", "c", "a"], ordered=True)
+
+        with tm.assert_produces_warning(FutureWarning):
+            cat.to_dense()
 
     @pytest.mark.parametrize(
         "values, categories, new_categories",
