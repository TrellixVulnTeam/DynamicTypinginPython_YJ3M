commit 65a1342dc9e27b62f1469af68a46c44d5a8c2835
Author: Adam Klein <adamklein@gmail.com>
Date:   Wed Mar 28 15:13:20 2012 -0400

    ENH: added quarter-based slicing to datetimeindex

diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index 00bfb796a..1ca043351 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -731,7 +731,7 @@ class DateParseError(Exception):
 
 _dtparser = parser.parser()
 
-# patterns for quarters like 4Q2005, 05Q1
+# patterns for quarters like '4Q2005', '05Q1'
 qpat1full = re.compile(r'(\d)Q(\d\d\d\d)')
 qpat2full = re.compile(r'(\d\d\d\d)Q(\d)')
 qpat1 = re.compile(r'(\d)Q(\d\d)')
@@ -749,7 +749,7 @@ def parse_time_string(arg):
 
     try:
         default = datetime(1,1,1).replace(hour=0, minute=0,
-                                            second=0, microsecond=0)
+                                          second=0, microsecond=0)
 
         # special handling for possibilities eg, 2Q2005, 2Q05, 2005Q1, 05Q1
         if len(arg) in [4, 6]:
@@ -757,7 +757,7 @@ def parse_time_string(arg):
                 qpats = [(qpat1, 1), (qpat2, 0)]
             else:
                 qpats = [(qpat1full, 1), (qpat2full, 0)]
-        
+
             for pat, yfirst in qpats:
                 qparse = pat.match(arg)
                 if qparse is not None:
@@ -767,10 +767,10 @@ def parse_time_string(arg):
                         yi, qi = 2, 1
                     q = int(qparse.group(yi))
                     y = int(qparse.group(qi))
-                    if y < 2000: 
+                    if y < 2000:
                         y += 2000
                     ret = default.replace(year=y, month=(q-1)*3+1)
-                    return ret, ret.strftime('%Y/%m'), 'quarter'
+                    return ret, ret, 'quarter'
 
         dayfirst = print_config.date_dayfirst
         yearfirst = print_config.date_yearfirst
@@ -783,7 +783,7 @@ def parse_time_string(arg):
         reso = 'year'
         stopped = False
         for attr in ["year", "month", "day", "hour",
-                        "minute", "second", "microsecond"]:
+                     "minute", "second", "microsecond"]:
             can_be_zero = ['hour', 'minute', 'second', 'microsecond']
             value = getattr(parsed, attr)
             if value is not None and (value != 0 or attr in can_be_zero):
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 3d1598df8..f14b5db31 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1591,7 +1591,12 @@ class DatetimeIndex(Int64Index):
             i1, i2 = np.searchsorted(self.asi8, [t1.value, t2.value])
             return slice(i1, i2+1)
         elif reso == 'quarter':
-            raise NotImplementedError('Quarter slicing not implemented yet')
+            qe = (((parsed.month - 1) + 2) % 12) + 1 # two months ahead
+            d = lib.monthrange(parsed.year, qe)[1]   # at end of month
+            t1 = to_timestamp(datetime(parsed.year, parsed.month, 1))
+            t2 = to_timestamp(datetime(parsed.year, qe, d))
+            i1, i2 = np.searchsorted(self.asi8, [t1.value, t2.value])
+            return slice(i1, i2+1)
 
         raise KeyError
 
diff --git a/pandas/tests/test_datetime64.py b/pandas/tests/test_datetime64.py
index b8267d3f3..a3874b48c 100644
--- a/pandas/tests/test_datetime64.py
+++ b/pandas/tests/test_datetime64.py
@@ -468,6 +468,15 @@ class TestDatetime64(unittest.TestCase):
         df = DataFrame(np.random.rand(len(dti), 5), index=dti)
         self.assertEquals(len(df.ix['2005']), 261)
 
+    def test_slice_quarter(self):
+        dti = DatetimeIndex(freq='D', start=datetime(2000,6,1), periods=500)
+
+        s = Series(np.arange(len(dti)), index=dti)
+        self.assertEquals(len(s['2001Q1']), 90)
+
+        df = DataFrame(np.random.rand(len(dti), 5), index=dti)
+        self.assertEquals(len(df.ix['1Q01']), 90)
+
     def test_slice_month(self):
         dti = DatetimeIndex(freq='D', start=datetime(2005,1,1), periods=500)
 
diff --git a/pandas/tests/test_interval.py b/pandas/tests/test_interval.py
index bbe8395c3..e9f4562fb 100644
--- a/pandas/tests/test_interval.py
+++ b/pandas/tests/test_interval.py
@@ -950,7 +950,7 @@ class TestIntervalIndex(TestCase):
         self.assertEquals(i, Interval('1/1/2010 12:05:15', '5S'))
 
         i = Interval('1/1/2010 12:05:18', '5S')
-        self.assertEquals(i.resample('1S', how='E'), 
+        self.assertEquals(i.resample('1S', how='E'),
                           Interval('1/1/2010 12:05:19', '1S'))
 
 class TestMethods(TestCase):
