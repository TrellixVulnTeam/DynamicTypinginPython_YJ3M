commit b00df5e3b8aacb9f73b9b2bf7fe1c28bdb91d398
Author: Chang She <changshe@gmail.com>
Date:   Mon Apr 8 13:05:06 2013 -0400

    BUG: add raise_on_error to plot when handling errors raised by attempting to plot non-numeric columns #3287

diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index 92f836dfe..afe9065b4 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -239,9 +239,12 @@ class TestDataFramePlots(unittest.TestCase):
         import matplotlib.pyplot as plt
         plt.close('all')
 
-        ax = DataFrame({'A': ["x", "y", "z"], 'B': [1,2,3]}).plot() # it works
+        df = DataFrame({'A': ["x", "y", "z"], 'B': [1,2,3]})
+        ax = df.plot(raise_on_error=False) # it works
         self.assert_(len(ax.get_lines()) == 1) #B was plotted
 
+        self.assertRaises(Exception, df.plot)
+
     @slow
     def test_label(self):
         import matplotlib.pyplot as plt
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 478b19ef0..eb118e160 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -691,8 +691,10 @@ class MPLPlot(object):
     """
     _default_rot = 0
 
-    _pop_attributes = ['label', 'style', 'logy', 'logx', 'loglog']
-    _attr_defaults = {'logy': False, 'logx': False, 'loglog': False}
+    _pop_attributes = ['label', 'style', 'logy', 'logx', 'loglog',
+                       'raise_on_error']
+    _attr_defaults = {'logy': False, 'logx': False, 'loglog': False,
+                      'raise_on_error': True}
 
     def __init__(self, data, kind=None, by=None, subplots=False, sharex=True,
                  sharey=False, use_index=True,
@@ -1185,7 +1187,12 @@ class LinePlot(MPLPlot):
                 except AttributeError as inst: # non-numeric
                     msg = ('Unable to plot data %s vs index %s,\n'
                            'error was: %s' % (str(y), str(x), str(inst)))
-                    print msg
+                    if not self.raise_on_error:
+                        print msg
+                    else:
+                        msg = msg + ('\nConsider setting raise_on_error=False'
+                                     'to suppress')
+                        raise Exception(msg)
 
             self._make_legend(lines, labels)
 
@@ -1214,7 +1221,12 @@ class LinePlot(MPLPlot):
             except AttributeError as inst: #non-numeric
                 msg = ('Unable to plot %s,\n'
                        'error was: %s' % (str(data), str(inst)))
-                print msg
+                if not self.raise_on_error:
+                    print msg
+                else:
+                    msg = msg + ('\nConsider setting raise_on_error=False'
+                                 'to suppress')
+                    raise Exception(msg)
 
         if isinstance(data, Series):
             ax = self._get_ax(0)  # self.axes[0]
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index 9c714f6ee..5d7dc880b 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -87,11 +87,17 @@ class TestTSPlot(unittest.TestCase):
 
         idx = date_range('1/1/1987', freq='A', periods=3)
         df = DataFrame({'A': ["x", "y", "z"], 'B': [1,2,3]}, idx)
-        ax = df.plot() # it works
+        self.assertRaises(Exception, df.plot)
+
+        plt.close('all')
+        ax = df.plot(raise_on_error=False) # it works
         self.assert_(len(ax.get_lines()) == 1) #B was plotted
 
         plt.close('all')
-        ax = df['A'].plot() # it works
+        self.assertRaises(Exception, df.A.plot)
+
+        plt.close('all')
+        ax = df['A'].plot(raise_on_error=False) # it works
         self.assert_(len(ax.get_lines()) == 0)
 
     @slow
