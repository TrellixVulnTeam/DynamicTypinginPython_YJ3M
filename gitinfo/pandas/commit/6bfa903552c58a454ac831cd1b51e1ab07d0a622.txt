commit 6bfa903552c58a454ac831cd1b51e1ab07d0a622
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Jun 12 16:16:15 2011 -0400

    more cleanup, moved some things to internals. removing references to DataMatrix

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 8719cea8b..4b9758b29 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -145,6 +145,8 @@ class DataFrame(PandasGeneric):
 
         Somehow this got outrageously complicated
         """
+        from pandas.core.internals import form_blocks
+
         # TODO: deal with emptiness!
         # prefilter if columns passed
         if columns is not None:
@@ -158,7 +160,7 @@ class DataFrame(PandasGeneric):
         # don't force copy because getting jammed in an ndarray anyway
         homogenized = _homogenize_series(data, index, dtype, force_copy=False)
         # segregates dtypes and forms blocks matching to columns
-        blocks, columns = _form_blocks(homogenized, index, columns)
+        blocks, columns = form_blocks(homogenized, index, columns)
 
         # TODO: need consolidate here?
         return BlockManager(blocks, index, columns).consolidate()
@@ -2591,80 +2593,6 @@ def _default_index(n):
 def _put_str(s, space):
     return ('%s' % s)[:space].ljust(space)
 
-_data_types = [np.float_, np.int_]
-
-def _form_blocks(data, index, columns):
-    from pandas.core.internals import add_na_columns
-
-    # pre-filter out columns if we passed it
-    if columns is None:
-        columns = Index(_try_sort(data.keys()))
-        extra_columns = NULL_INDEX
-    else:
-        columns = _ensure_index(columns)
-        extra_columns = columns - Index(data.keys())
-
-    # put "leftover" columns in float bucket, where else?
-    # generalize?
-    num_dict = {}
-    object_dict = {}
-    for k, v in data.iteritems():
-        if issubclass(v.dtype.type, (np.floating, np.integer)):
-            num_dict[k] = v
-        else:
-            object_dict[k] = v
-
-    blocks = []
-
-    if len(num_dict) > 0:
-        num_dtypes = set(v.dtype for v in num_dict.values())
-        if len(num_dtypes) > 1:
-            num_dtype = np.float_
-        else:
-            num_dtype = list(num_dtypes)[0]
-
-        # TODO: find corner cases
-        # TODO: check type inference
-        num_block = _simple_blockify(num_dict, num_dtype)
-        blocks.append(num_block)
-
-    if len(object_dict) > 0:
-        object_block = _simple_blockify(object_dict, np.object_)
-        blocks.append(object_block)
-
-    if len(extra_columns):
-        blocks = add_na_columns(blocks, extra_columns,
-                                index, columns)
-
-    return blocks, columns
-
-def _simple_blockify(dct, dtype):
-    columns, values = _stack_dict(dct)
-    # CHECK DTYPE?
-    if values.dtype != dtype:
-        values = values.astype(dtype)
-    return make_block(values, columns)
-
-def _stack_dict(dct):
-    columns = Index(_try_sort(dct))
-    stacked = np.vstack([dct[k].values for k in columns]).T
-    return columns, stacked
-
-# def _float_blockify(dct, index, columns):
-#     n = len(index)
-#     k = len(columns)
-#     values = np.empty((n, k), dtype=np.float64)
-#     values.fill(nan)
-
-#     if len(dct) > 0:
-#         dict_columns, stacked = _stack_dict(dct)
-#         indexer, mask = columns.get_indexer(dict_columns)
-#         assert(mask.all())
-#         values[:, indexer] = stacked
-
-#     # do something with dtype?
-#     return make_block(values, columns)
-
 def _reorder_columns(mat, current, desired):
     indexer, mask = common.get_indexer(current, desired, None)
     return mat.take(indexer[mask], axis=1)
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index f3da8a8c3..f1fb1c483 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -4,7 +4,7 @@ from numpy import nan
 import numpy as np
 
 from pandas.core.index import Index, NULL_INDEX
-from pandas.core.common import _ensure_index
+from pandas.core.common import _ensure_index, _try_sort
 from pandas.core.series import Series
 import pandas.core.common as common
 
@@ -345,7 +345,7 @@ class BlockManager(object):
         return block.get(col)
 
     def delete(self, col):
-        i, block = self._find_block(col)
+        i, _ = self._find_block(col)
         loc = self.columns.get_loc(col)
         self.columns = Index(np.delete(np.asarray(self.columns), loc))
         self._delete_from_block(i, col)
@@ -477,6 +477,79 @@ class BlockManager(object):
         return BlockManager(new_blocks, self.index, self.columns)
 
 
+_data_types = [np.float_, np.int_]
+def form_blocks(data, index, columns):
+    from pandas.core.internals import add_na_columns
+
+    # pre-filter out columns if we passed it
+    if columns is None:
+        columns = Index(_try_sort(data.keys()))
+        extra_columns = NULL_INDEX
+    else:
+        columns = _ensure_index(columns)
+        extra_columns = columns - Index(data.keys())
+
+    # put "leftover" columns in float bucket, where else?
+    # generalize?
+    num_dict = {}
+    object_dict = {}
+    for k, v in data.iteritems():
+        if issubclass(v.dtype.type, (np.floating, np.integer)):
+            num_dict[k] = v
+        else:
+            object_dict[k] = v
+
+    blocks = []
+
+    if len(num_dict) > 0:
+        num_dtypes = set(v.dtype for v in num_dict.values())
+        if len(num_dtypes) > 1:
+            num_dtype = np.float_
+        else:
+            num_dtype = list(num_dtypes)[0]
+
+        # TODO: find corner cases
+        # TODO: check type inference
+        num_block = _simple_blockify(num_dict, num_dtype)
+        blocks.append(num_block)
+
+    if len(object_dict) > 0:
+        object_block = _simple_blockify(object_dict, np.object_)
+        blocks.append(object_block)
+
+    if len(extra_columns):
+        blocks = add_na_columns(blocks, extra_columns,
+                                index, columns)
+
+    return blocks, columns
+
+def _simple_blockify(dct, dtype):
+    columns, values = _stack_dict(dct)
+    # CHECK DTYPE?
+    if values.dtype != dtype:
+        values = values.astype(dtype)
+    return make_block(values, columns)
+
+def _stack_dict(dct):
+    columns = Index(_try_sort(dct))
+    stacked = np.vstack([dct[k].values for k in columns]).T
+    return columns, stacked
+
+# def _float_blockify(dct, index, columns):
+#     n = len(index)
+#     k = len(columns)
+#     values = np.empty((n, k), dtype=np.float64)
+#     values.fill(nan)
+
+#     if len(dct) > 0:
+#         dict_columns, stacked = _stack_dict(dct)
+#         indexer, mask = columns.get_indexer(dict_columns)
+#         assert(mask.all())
+#         values[:, indexer] = stacked
+
+#     # do something with dtype?
+#     return make_block(values, columns)
+
 def add_na_columns(blocks, new_columns, index, columns):
     # create new block, then consolidate
     indexer, mask = new_columns.get_indexer(columns)
@@ -516,21 +589,6 @@ def _blocks_to_series_dict(blocks, index=None):
             series_dict[col] = Series(vec, index=index)
     return series_dict
 
-def _insert_column(blocks, column, value):
-    """
-    Default: new block
-    """
-    pass
-
-def _set_column(blocks, column, value):
-    pass
-
-def _delete_column(blocks, columns):
-    pass
-
-def _reindex_blocks(blocks, old_columns, new_columns):
-    pass
-
 def _interleave(blocks, columns):
     """
     Return ndarray from blocks with specified column order
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index eb3a946e0..ac3ab45d3 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -12,7 +12,6 @@ import numpy as np
 from pandas.core.common import _mut_exclusive, _ensure_index, _pfixed
 from pandas.core.index import Index
 from pandas.core.frame import DataFrame
-from pandas.core.matrix import DataMatrix
 from pandas.core.generic import PandasGeneric, Picklable
 import pandas.core.common as common
 import pandas.lib.tseries as tseries
@@ -289,7 +288,7 @@ class WidePanel(Panel, PandasGeneric):
 
         mat = self.values[loc]
 
-        return DataMatrix(mat, index=self.major_axis, columns=self.minor_axis)
+        return DataFrame(mat, index=self.major_axis, columns=self.minor_axis)
 
     def __delitem__(self, key):
         loc = self.items.indexMap[key]
@@ -308,7 +307,7 @@ class WidePanel(Panel, PandasGeneric):
 
         Returns
         -------
-        y : DataMatrix
+        y : DataFrame
         """
         result = self[key]
         del self[key]
@@ -374,7 +373,7 @@ class WidePanel(Panel, PandasGeneric):
 
         Returns
         -------
-        DataFrame (or DataMatrix)
+        DataFrame
         """
         index, columns = self._get_plane_axes(axis)
 
@@ -524,11 +523,11 @@ class WidePanel(Panel, PandasGeneric):
 
         Returns
         -------
-        y : DataMatrix
+        y : DataFrame
 
         See also
         --------
-        DataMatrix.reindex, DataMatrix.asfreq
+        DataFrame.reindex, DataFrame.asfreq
         """
         if value is None:
             result = {}
@@ -560,12 +559,12 @@ class WidePanel(Panel, PandasGeneric):
 
         Returns
         -------
-        y : DataMatrix
+        y : DataFrame
             index -> minor axis, columns -> items
         """
         loc = self.major_axis.indexMap[key]
         mat = np.array(self.values[:, loc, :].T)
-        return DataMatrix(mat, index=self.minor_axis, columns=self.items)
+        return DataFrame(mat, index=self.minor_axis, columns=self.items)
 
     def minor_xs(self, key):
         """
@@ -578,12 +577,12 @@ class WidePanel(Panel, PandasGeneric):
 
         Returns
         -------
-        y : DataMatrix
+        y : DataFrame
             index -> major axis, columns -> items
         """
         loc = self.minor_axis.indexMap[key]
         mat = np.array(self.values[:, :, loc].T)
-        return DataMatrix(mat, index=self.major_axis, columns=self.items)
+        return DataFrame(mat, index=self.major_axis, columns=self.items)
 
     def getMinorXS(self, key): # pragma: no cover
         warnings.warn("getMinorXS has been replaced by the minor_xs function "
@@ -723,7 +722,7 @@ class WidePanel(Panel, PandasGeneric):
 
         Returns
         -------
-        result : DataMatrix or WidePanel
+        result : DataFrame or WidePanel
         """
         i = self._get_axis_number(axis)
 
@@ -777,7 +776,7 @@ class WidePanel(Panel, PandasGeneric):
 
         Returns
         -------
-        y : DataMatrix
+        y : DataFrame
         """
         result = self._values_aggregate(func, axis, fill_value)
         return self._wrap_result(result, axis=axis)
@@ -791,18 +790,18 @@ class WidePanel(Panel, PandasGeneric):
             if axis != 'items':
                 result = result.T
 
-            return DataMatrix(result, index=index, columns=columns)
+            return DataFrame(result, index=index, columns=columns)
         else:
             return WidePanel(result, self.items, self.major_axis,
                              self.minor_axis)
 
     def count(self, axis='major'):
         """
-        Return DataMatrix of observation counts along desired axis
+        Return DataFrame of observation counts along desired axis
 
         Returns
         -------
-        y : DataMatrix
+        y : DataFrame
         """
         i = self._get_axis_number(axis)
 
@@ -817,7 +816,7 @@ class WidePanel(Panel, PandasGeneric):
 
         Returns
         -------
-        y : DataMatrix
+        y : DataFrame
         """
         return self._array_method(np.sum, axis=axis, fill_value=0)
 
@@ -836,7 +835,7 @@ class WidePanel(Panel, PandasGeneric):
 
         Returns
         -------
-        y : DataMatrix
+        y : DataFrame
         """
         return self.sum(axis=axis) / self.count(axis=axis)
 
@@ -845,7 +844,7 @@ class WidePanel(Panel, PandasGeneric):
 
         Returns
         -------
-        y : DataMatrix
+        y : DataFrame
         """
         i = self._get_axis_number(axis)
         index, columns = self._get_plane_axes(axis)
@@ -868,7 +867,7 @@ class WidePanel(Panel, PandasGeneric):
 
         Returns
         -------
-        y : DataMatrix
+        y : DataFrame
         """
         return self.var(axis=axis).apply(np.sqrt)
 
@@ -880,7 +879,7 @@ class WidePanel(Panel, PandasGeneric):
 
         Returns
         -------
-        y : DataMatrix
+        y : DataFrame
         """
         return self._array_method(np.prod, axis=axis, fill_value=1)
 
@@ -889,7 +888,7 @@ class WidePanel(Panel, PandasGeneric):
 
         Returns
         -------
-        y : DataMatrix
+        y : DataFrame
         """
         return (1 + self).prod(axis=axis) - 1
 
@@ -898,7 +897,7 @@ class WidePanel(Panel, PandasGeneric):
 
         Returns
         -------
-        y : DataMatrix
+        y : DataFrame
         """
         def f(arr):
             return tseries.median(arr[common.notnull(arr)])
@@ -910,7 +909,7 @@ class WidePanel(Panel, PandasGeneric):
 
         Returns
         -------
-        y : DataMatrix
+        y : DataFrame
         """
         i = self._get_axis_number(axis)
 
@@ -931,7 +930,7 @@ class WidePanel(Panel, PandasGeneric):
 
         Returns
         -------
-        y : DataMatrix
+        y : DataFrame
         """
         i = self._get_axis_number(axis)
 
@@ -1124,14 +1123,10 @@ class LongPanel(Panel, Picklable):
     @property
     def columns(self):
         """
-        So LongPanel can be DataMatrix-like at times
+        So LongPanel can be DataFrame-like at times
         """
         return self.items
 
-    def cols(self):
-        "DataMatrix compatibility"
-        return self.columns
-
     def copy(self):
         """
         Return copy of LongPanel (copies ndarray)
@@ -1532,7 +1527,7 @@ class LongPanel(Panel, Picklable):
         Returns
         -------
         broadcast=True  -> LongPanel
-        broadcast=False -> DataMatrix
+        broadcast=False -> DataFrame
         """
         try:
             return self._apply_axis(f, axis=axis, broadcast=broadcast)
@@ -1560,7 +1555,7 @@ class LongPanel(Panel, Picklable):
             panel = LongPanel(result.repeat(repeater, axis=0),
                               self.items, self.index)
         else:
-            panel = DataMatrix(result, index=self.major_axis,
+            panel = DataFrame(result, index=self.major_axis,
                                columns=self.items)
 
         return panel
@@ -1931,9 +1926,7 @@ def _homogenize(frames, intersect=True):
     adj_frames = {}
     for k, v in frames.iteritems():
         if isinstance(v, dict):
-            adj_frames[k] = DataMatrix(v)
-        elif not isinstance(v, DataMatrix):
-            adj_frames[k] = v.toDataMatrix()
+            adj_frames[k] = DataFrame(v)
         else:
             adj_frames[k] = v
 
@@ -1999,12 +1992,12 @@ def pivot(index, columns, values):
 
     Returns
     -------
-    DataMatrix
+    DataFrame
     """
     assert(len(index) == len(columns) == len(values))
 
     if len(index) == 0:
-        return DataMatrix(index=[])
+        return DataFrame(index=[])
 
     try:
         major_axis = Index(sorted(set(index)))
diff --git a/pandas/core/tests/test_sparse.py b/pandas/core/tests/test_sparse.py
index 97dd82c45..e97debf63 100644
--- a/pandas/core/tests/test_sparse.py
+++ b/pandas/core/tests/test_sparse.py
@@ -844,11 +844,10 @@ class TestSparseDataFrame(TestCase):
 
         self.assertEquals(df.density, 0.75)
 
-    def test_toDataMatrix(self):
+    def test_to_dense(self):
         def _check(frame):
-            dm = frame.toDataMatrix()
-            dense_dm = frame.to_dense().toDataMatrix()
-            assert_frame_equal(dm, dense_dm)
+            dense_dm = frame.to_dense()
+            assert_frame_equal(frame, dense_dm)
 
         self._check_all(_check)
 
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index b6a39f9a8..7e77f287e 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -31,9 +31,9 @@ def parseCSV(filepath, header=0, skiprows=None, indexCol=0,
                         na_values=na_values)
 
 def read_table(path, header=0, index_col=0, delimiter=','):
-    data = np.genfromtext(path, delimiter=delimiter,
-                          names=header is not None,
-                          dtype=object)
+    data = np.genfromtxt(path, delimiter=delimiter,
+                         names=header is not None,
+                         dtype=object)
 
     columns = data.dtype.names
 
@@ -209,7 +209,7 @@ class ExcelFile(object):
                 row.append(value)
             data.append(row)
         return simpleParser(data, header=header, indexCol=index_col,
-                            na_values=na_values).toDataMatrix()
+                            na_values=na_values)
 
 def parseExcel(filepath, header=None, indexCol=0, sheetname=None, **kwds):
     """
