commit 224362951942e1f4e05fb8948596620aedac26d9
Author: Marc Garcia <garcia.marc@gmail.com>
Date:   Fri Jun 21 10:37:17 2019 +0100

    PLOT: Add option to specify the plotting backend (#26753)

diff --git a/doc/source/user_guide/options.rst b/doc/source/user_guide/options.rst
index 4b466c2c4..4d0def435 100644
--- a/doc/source/user_guide/options.rst
+++ b/doc/source/user_guide/options.rst
@@ -431,6 +431,12 @@ compute.use_bottleneck                  True         Use the bottleneck library
                                                      computation if it is installed.
 compute.use_numexpr                     True         Use the numexpr library to accelerate
                                                      computation if it is installed.
+plotting.backend                        matplotlib   Change the plotting backend to a different
+                                                     backend than the current matplotlib one.
+                                                     Backends can be implemented as third-party
+                                                     libraries implementing the pandas plotting
+                                                     API. They can use other plotting libraries
+                                                     like Bokeh, Altair, etc.
 plotting.matplotlib.register_converters True         Register custom converters with
                                                      matplotlib. Set to False to de-register.
 ======================================= ============ ==================================
diff --git a/doc/source/whatsnew/v0.25.0.rst b/doc/source/whatsnew/v0.25.0.rst
index a897f364d..77b689569 100644
--- a/doc/source/whatsnew/v0.25.0.rst
+++ b/doc/source/whatsnew/v0.25.0.rst
@@ -132,6 +132,7 @@ Other Enhancements
 - :class:`DatetimeIndex` and :class:`TimedeltaIndex` now have a ``mean`` method (:issue:`24757`)
 - :meth:`DataFrame.describe` now formats integer percentiles without decimal point (:issue:`26660`)
 - Added support for reading SPSS .sav files using :func:`read_spss` (:issue:`26537`)
+- Added new option ``plotting.backend`` to be able to select a plotting backend different than the existing ``matplotlib`` one. Use ``pandas.set_option('plotting.backend', '<backend-module>')`` where ``<backend-module`` is a library implementing the pandas plotting API (:issue:`14130`)
 
 .. _whatsnew_0250.api_breaking:
 
diff --git a/pandas/core/config_init.py b/pandas/core/config_init.py
index 7eb2b4138..440926714 100644
--- a/pandas/core/config_init.py
+++ b/pandas/core/config_init.py
@@ -9,6 +9,8 @@ If you need to make sure options are available even before a certain
 module is imported, register them here rather then in the module.
 
 """
+import importlib
+
 import pandas._config.config as cf
 from pandas._config.config import (
     is_bool, is_callable, is_instance_factory, is_int, is_one_of_factory,
@@ -460,6 +462,40 @@ with cf.config_prefix('io.parquet'):
 # Plotting
 # ---------
 
+plotting_backend_doc = """
+: str
+    The plotting backend to use. The default value is "matplotlib", the
+    backend provided with pandas. Other backends can be specified by
+    prodiving the name of the module that implements the backend.
+"""
+
+
+def register_plotting_backend_cb(key):
+    backend_str = cf.get_option(key)
+    if backend_str == 'matplotlib':
+        try:
+            import pandas.plotting._matplotlib  # noqa
+        except ImportError:
+            raise ImportError('matplotlib is required for plotting when the '
+                              'default backend "matplotlib" is selected.')
+        else:
+            return
+
+    try:
+        importlib.import_module(backend_str)
+    except ImportError:
+        raise ValueError('"{}" does not seem to be an installed module. '
+                         'A pandas plotting backend must be a module that '
+                         'can be imported'.format(backend_str))
+
+
+with cf.config_prefix('plotting'):
+    cf.register_option('backend', defval='matplotlib',
+                       doc=plotting_backend_doc,
+                       validator=str,
+                       cb=register_plotting_backend_cb)
+
+
 register_converter_doc = """
 : bool
     Whether to register converters with matplotlib's units registry for
diff --git a/pandas/plotting/_core.py b/pandas/plotting/_core.py
index 78c7082c6..b0e928fa8 100644
--- a/pandas/plotting/_core.py
+++ b/pandas/plotting/_core.py
@@ -1,3 +1,4 @@
+import importlib
 from typing import List, Type  # noqa
 
 from pandas.util._decorators import Appender
@@ -5,6 +6,7 @@ from pandas.util._decorators import Appender
 from pandas.core.dtypes.common import is_integer, is_list_like
 from pandas.core.dtypes.generic import ABCDataFrame, ABCSeries
 
+import pandas
 from pandas.core.base import PandasObject
 from pandas.core.generic import _shared_doc_kwargs, _shared_docs
 
@@ -622,11 +624,10 @@ def _get_plot_backend():
     The backend is imported lazily, as matplotlib is a soft dependency, and
     pandas can be used without it being installed.
     """
-    try:
-        import pandas.plotting._matplotlib as plot_backend
-    except ImportError:
-        raise ImportError("matplotlib is required for plotting.")
-    return plot_backend
+    backend_str = pandas.get_option('plotting.backend')
+    if backend_str == 'matplotlib':
+        backend_str = 'pandas.plotting._matplotlib'
+    return importlib.import_module(backend_str)
 
 
 def _plot_classes():
diff --git a/pandas/plotting/_misc.py b/pandas/plotting/_misc.py
index a3f3f3546..f240faf45 100644
--- a/pandas/plotting/_misc.py
+++ b/pandas/plotting/_misc.py
@@ -3,14 +3,7 @@ import warnings
 
 from pandas.util._decorators import deprecate_kwarg
 
-
-def _get_plot_backend():
-    # TODO unify with the same function in `_core.py`
-    try:
-        import pandas.plotting._matplotlib as plot_backend
-    except ImportError:
-        raise ImportError("matplotlib is required for plotting.")
-    return plot_backend
+from pandas.plotting._core import _get_plot_backend
 
 
 def table(ax, data, rowLabels=None, colLabels=None, **kwargs):
diff --git a/pandas/tests/plotting/test_backend.py b/pandas/tests/plotting/test_backend.py
new file mode 100644
index 000000000..65e1d690d
--- /dev/null
+++ b/pandas/tests/plotting/test_backend.py
@@ -0,0 +1,33 @@
+import pytest
+
+import pandas
+
+
+def test_matplotlib_backend_error():
+    msg = ('matplotlib is required for plotting when the default backend '
+           '"matplotlib" is selected.')
+    try:
+        import matplotlib  # noqa
+    except ImportError:
+        with pytest.raises(ImportError, match=msg):
+            pandas.set_option('plotting.backend', 'matplotlib')
+
+
+def test_backend_is_not_module():
+    msg = ('"not_an_existing_module" does not seem to be an installed module. '
+           'A pandas plotting backend must be a module that can be imported')
+    with pytest.raises(ValueError, match=msg):
+        pandas.set_option('plotting.backend', 'not_an_existing_module')
+
+
+def test_backend_is_correct(monkeypatch):
+    monkeypatch.setattr('pandas.core.config_init.importlib.import_module',
+                        lambda name: None)
+    pandas.set_option('plotting.backend', 'correct_backend')
+    assert pandas.get_option('plotting.backend') == 'correct_backend'
+
+    # Restore backend for other tests (matplotlib can be not installed)
+    try:
+        pandas.set_option('plotting.backend', 'matplotlib')
+    except ImportError:
+        pass
diff --git a/pandas/tests/plotting/test_misc.py b/pandas/tests/plotting/test_misc.py
index a1c12fc73..b58854743 100644
--- a/pandas/tests/plotting/test_misc.py
+++ b/pandas/tests/plotting/test_misc.py
@@ -21,7 +21,7 @@ def test_import_error_message():
     # GH-19810
     df = DataFrame({"A": [1, 2]})
 
-    with pytest.raises(ImportError, match='matplotlib is required'):
+    with pytest.raises(ImportError, match="No module named 'matplotlib'"):
         df.plot()
 
 
