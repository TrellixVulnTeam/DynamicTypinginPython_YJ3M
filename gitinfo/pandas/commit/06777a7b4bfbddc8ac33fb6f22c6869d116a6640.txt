commit 06777a7b4bfbddc8ac33fb6f22c6869d116a6640
Author: Jeff Reback <jeff@reback.net>
Date:   Tue Feb 9 19:43:49 2016 -0500

    DOC: remove some doc-build warnings

diff --git a/doc/source/10min.rst b/doc/source/10min.rst
index 3cf05698d..8dbe130bf 100644
--- a/doc/source/10min.rst
+++ b/doc/source/10min.rst
@@ -604,7 +604,7 @@ financial applications. See the :ref:`Time Series section <timeseries>`
 
    rng = pd.date_range('1/1/2012', periods=100, freq='S')
    ts = pd.Series(np.random.randint(0, 500, len(rng)), index=rng)
-   ts.resample('5Min', how='sum')
+   ts.resample('5Min').sum()
 
 Time zone representation
 
diff --git a/doc/source/text.rst b/doc/source/text.rst
index 13421ae3d..c8a878747 100644
--- a/doc/source/text.rst
+++ b/doc/source/text.rst
@@ -184,14 +184,14 @@ Extract first match in each subject (extract)
 
 The ``extract`` method accepts a `regular expression
 <https://docs.python.org/2/library/re.html>`__ with at least one
-capture group. 
+capture group.
 
 Extracting a regular expression with more than one group returns a
 DataFrame with one column per group.
 
 .. ipython:: python
 
-   pd.Series(['a1', 'b2', 'c3']).str.extract('([ab])(\d)')
+   pd.Series(['a1', 'b2', 'c3']).str.extract('([ab])(\d)', expand=False)
 
 Elements that do not match return a row filled with ``NaN``. Thus, a
 Series of messy strings can be "converted" into a like-indexed Series
@@ -204,13 +204,13 @@ Named groups like
 
 .. ipython:: python
 
-   pd.Series(['a1', 'b2', 'c3']).str.extract('(?P<letter>[ab])(?P<digit>\d)')
+   pd.Series(['a1', 'b2', 'c3']).str.extract('(?P<letter>[ab])(?P<digit>\d)', expand=False)
 
 and optional groups like
 
 .. ipython:: python
 
-   pd.Series(['a1', 'b2', '3']).str.extract('([ab])?(\d)')
+   pd.Series(['a1', 'b2', '3']).str.extract('([ab])?(\d)', expand=False)
 
 can also be used. Note that any capture group names in the regular
 expression will be used for column names; otherwise capture group
@@ -281,7 +281,7 @@ Unlike ``extract`` (which returns only the first match),
 
    s = pd.Series(["a1a2", "b1", "c1"], ["A", "B", "C"])
    s
-   s.str.extract("[ab](?P<digit>\d)")
+   s.str.extract("[ab](?P<digit>\d)", expand=False)
 
 .. versionadded:: 0.18.0
 
@@ -307,7 +307,7 @@ then ``extractall(pat).xs(0, level='match')`` gives the same result as
 
 .. ipython:: python
 
-   extract_result = s.str.extract(two_groups)
+   extract_result = s.str.extract(two_groups, expand=False)
    extract_result
    extractall_result = s.str.extractall(two_groups)
    extractall_result
diff --git a/doc/source/whatsnew/v0.13.0.txt b/doc/source/whatsnew/v0.13.0.txt
index 2e10ae4ea..8e3e8feeb 100644
--- a/doc/source/whatsnew/v0.13.0.txt
+++ b/doc/source/whatsnew/v0.13.0.txt
@@ -536,6 +536,7 @@ Enhancements
   matches more conveniently.
 
   .. ipython:: python
+     :okwarning:
 
      Series(['a1', 'b2', 'c3']).str.extract('[ab](\d)')
 
@@ -544,6 +545,7 @@ Enhancements
 
 
   .. ipython:: python
+     :okwarning:
 
      Series(['a1', 'b2', 'c3']).str.extract('([ab])(\d)')
 
@@ -555,6 +557,7 @@ Enhancements
   Named groups like
 
   .. ipython:: python
+     :okwarning:
 
      Series(['a1', 'b2', 'c3']).str.extract(
              '(?P<letter>[ab])(?P<digit>\d)')
@@ -562,6 +565,7 @@ Enhancements
   and optional groups can also be used.
 
   .. ipython:: python
+     :okwarning:
 
       Series(['a1', 'b2', '3']).str.extract(
               '(?P<letter>[ab])?(?P<digit>\d)')
diff --git a/doc/source/whatsnew/v0.18.0.txt b/doc/source/whatsnew/v0.18.0.txt
index 8fa28fa42..6a8a4e708 100644
--- a/doc/source/whatsnew/v0.18.0.txt
+++ b/doc/source/whatsnew/v0.18.0.txt
@@ -157,7 +157,7 @@ Currently the default is ``expand=None`` which gives a ``FutureWarning`` and use
 
 .. ipython:: python
 
-   pd.Series(['a1', 'b2', 'c3']).str.extract('[ab](\d)')
+   pd.Series(['a1', 'b2', 'c3']).str.extract('[ab](\d)', expand=False)
 
 Extracting a regular expression with one group returns a ``DataFrame``
 with one column if ``expand=True``.
@@ -218,7 +218,7 @@ match),
 
    s = pd.Series(["a1a2", "b1", "c1"], ["A", "B", "C"])
    s
-   s.str.extract("(?P<letter>[ab])(?P<digit>\d)")
+   s.str.extract("(?P<letter>[ab])(?P<digit>\d)", expand=False)
 
 the ``extractall`` method returns all matches.
 
@@ -566,6 +566,7 @@ yields a ``Resampler``.
 
 .. ipython:: python
 
+
    r = df.resample('2s')
    r
 
