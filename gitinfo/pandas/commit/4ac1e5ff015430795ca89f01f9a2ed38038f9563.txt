commit 4ac1e5ff015430795ca89f01f9a2ed38038f9563
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Thu Feb 13 04:42:54 2020 -0800

    CLN: assorted cleanups (#31938)

diff --git a/pandas/core/arrays/datetimes.py b/pandas/core/arrays/datetimes.py
index 5888600d2..a75536e46 100644
--- a/pandas/core/arrays/datetimes.py
+++ b/pandas/core/arrays/datetimes.py
@@ -283,7 +283,8 @@ class DatetimeArray(dtl.DatetimeLikeArrayMixin, dtl.TimelikeOps, dtl.DatelikeOps
     @classmethod
     def _simple_new(cls, values, freq=None, dtype=_NS_DTYPE):
         assert isinstance(values, np.ndarray)
-        if values.dtype == "i8":
+        if values.dtype != _NS_DTYPE:
+            assert values.dtype == "i8"
             values = values.view(_NS_DTYPE)
 
         result = object.__new__(cls)
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 934c4c6e9..adfb553d4 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -3504,6 +3504,7 @@ class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):
 
         Slicing with this method is *always* positional.
         """
+        assert isinstance(slobj, slice), type(slobj)
         axis = self._get_block_manager_axis(axis)
         result = self._constructor(self._data.get_slice(slobj, axis=axis))
         result = result.__finalize__(self)
diff --git a/pandas/core/internals/managers.py b/pandas/core/internals/managers.py
index 3dc7dd7d8..37a4b4364 100644
--- a/pandas/core/internals/managers.py
+++ b/pandas/core/internals/managers.py
@@ -1316,7 +1316,6 @@ class BlockManager(PandasObject):
         return blocks
 
     def _make_na_block(self, placement, fill_value=None):
-        # TODO: infer dtypes other than float64 from fill_value
 
         if fill_value is None:
             fill_value = np.nan
diff --git a/pandas/core/ops/array_ops.py b/pandas/core/ops/array_ops.py
index 5d5385672..37a4a6edd 100644
--- a/pandas/core/ops/array_ops.py
+++ b/pandas/core/ops/array_ops.py
@@ -43,9 +43,9 @@ def comp_method_OBJECT_ARRAY(op, x, y):
     if isinstance(y, list):
         y = construct_1d_object_array_from_listlike(y)
 
-    # TODO: Should the checks below be ABCIndexClass?
     if isinstance(y, (np.ndarray, ABCSeries, ABCIndex)):
-        # TODO: should this be ABCIndexClass??
+        # Note: these checks can be for ABCIndex and not ABCIndexClass
+        #  because that is the only object-dtype class.
         if not is_object_dtype(y.dtype):
             y = y.astype(np.object_)
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 24e794014..8577a7fb9 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -4378,7 +4378,7 @@ Name: Max Speed, dtype: float64
     # Convert to types that support pd.NA
 
     def _convert_dtypes(
-        self: ABCSeries,
+        self,
         infer_objects: bool = True,
         convert_string: bool = True,
         convert_integer: bool = True,
diff --git a/pandas/tests/indexing/test_chaining_and_caching.py b/pandas/tests/indexing/test_chaining_and_caching.py
index e845487ff..17722e949 100644
--- a/pandas/tests/indexing/test_chaining_and_caching.py
+++ b/pandas/tests/indexing/test_chaining_and_caching.py
@@ -346,20 +346,17 @@ class TestChaining:
         # GH6394
         # Regression in chained getitem indexing with embedded list-like from
         # 0.12
-        def check(result, expected):
-            tm.assert_numpy_array_equal(result, expected)
-            assert isinstance(result, np.ndarray)
 
         df = DataFrame({"A": 5 * [np.zeros(3)], "B": 5 * [np.ones(3)]})
         expected = df["A"].iloc[2]
         result = df.loc[2, "A"]
-        check(result, expected)
+        tm.assert_numpy_array_equal(result, expected)
         result2 = df.iloc[2]["A"]
-        check(result2, expected)
+        tm.assert_numpy_array_equal(result2, expected)
         result3 = df["A"].loc[2]
-        check(result3, expected)
+        tm.assert_numpy_array_equal(result3, expected)
         result4 = df["A"].iloc[2]
-        check(result4, expected)
+        tm.assert_numpy_array_equal(result4, expected)
 
     def test_cache_updating(self):
         # GH 4939, make sure to update the cache on setitem
