commit d0642e10e6b9c85d8b542c8ab0abf4fc7878e55b
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Jun 8 13:42:55 2011 -0400

    continuing with the refactor, eliminating unnecessary code

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 8c056ff83..c084a7b70 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -315,11 +315,11 @@ class DataFrame(PandasGeneric):
         y : recarray
         """
         if index:
-            arrays = [self.index] + [self[c] for c in self.cols()]
-            names = ['index'] + list(self.cols())
+            arrays = [self.index] + [self[c] for c in self.columns]
+            names = ['index'] + list(self.columns)
         else:
-            arrays = [self[c] for c in self.cols()]
-            names = list(self.cols())
+            arrays = [self[c] for c in self.columns]
+            names = list(self.columns)
 
         return np.rec.fromarrays(arrays, names=names)
 
@@ -568,10 +568,7 @@ class DataFrame(PandasGeneric):
 
     def _indexed_same(self, other):
         same_index = self.index.equals(other.index)
-
-        # for DataMatrix compat
-        same_columns = Index(self.cols()).equals(Index(other.cols()))
-
+        same_columns = self.columns.equals(other.columns)
         return same_index and same_columns
 
     def _combine_series_infer(self, other, func):
@@ -652,7 +649,7 @@ class DataFrame(PandasGeneric):
         f = open(path, mode)
 
         if cols is None:
-            cols = self.cols()
+            cols = self.columns
 
         series = self._series
         if header:
@@ -745,15 +742,15 @@ class DataFrame(PandasGeneric):
         print >> buf, str(type(self))
         print >> buf, self.index.summary()
 
-        if len(self.cols()) == 0:
+        if len(self.columns) == 0:
             print >> buf, 'Empty %s' % type(self).__name__
             return
 
-        cols = self.cols()
+        cols = self.columns
 
         if verbose:
             print >> buf, 'Data columns:'
-            space = max([len(str(k)) for k in self.cols()]) + 4
+            space = max([len(str(k)) for k in self.columns]) + 4
             col_counts = []
             counts = self.count()
             assert(len(cols) == len(counts))
@@ -794,7 +791,8 @@ class DataFrame(PandasGeneric):
 
     def iteritems(self):
         """Iterator over (column, series) pairs"""
-        return ((k, self._series[k]) for k in self.columns)
+        series = self._series
+        return ((k, series[k]) for k in self.columns)
 
     def append(self, other):
         """
@@ -858,7 +856,7 @@ class DataFrame(PandasGeneric):
         of columns is provided.
         """
         if columns is None:
-            columns = self.cols()
+            columns = self.columns
 
         if len(columns) == 0:
             return np.zeros((0, 0))
@@ -1049,11 +1047,11 @@ class DataFrame(PandasGeneric):
         -------
         This DataFrame with rows containing any NaN values deleted
         """
-        N = len(self.cols())
+        N = len(self.columns)
 
         if specificColumns:
             colSet = set(specificColumns)
-            intersection = set(self.cols()) & colSet
+            intersection = set(self.columns) & colSet
 
             N = len(intersection)
 
@@ -1134,7 +1132,7 @@ class DataFrame(PandasGeneric):
         if key not in self.index:
             raise Exception('No cross-section for %s' % key)
 
-        subset = self.cols()
+        subset = self.columns
         rowValues = [self._series[k][key] for k in subset]
 
         if len(set((type(x) for x in rowValues))) > 1:
@@ -1442,7 +1440,7 @@ class DataFrame(PandasGeneric):
         -----
         Functions altering the index are not supported (yet)
         """
-        if not len(self.cols()):
+        if not len(self.columns):
             return self
 
         if not broadcast:
@@ -1453,13 +1451,13 @@ class DataFrame(PandasGeneric):
     def _apply_standard(self, func, axis):
         if axis == 0:
             target = self
-            agg_index = self.cols()
+            agg_index = self.columns
         elif axis == 1:
             target = self.T
             agg_index = self.index
 
         results = {}
-        for k in target.cols():
+        for k in target.columns:
             results[k] = func(target[k])
 
         if hasattr(results.values()[0], '__iter__'):
@@ -1476,13 +1474,13 @@ class DataFrame(PandasGeneric):
     def _apply_broadcast(self, func, axis):
         if axis == 0:
             target = self
-            agg_index = self.cols()
+            agg_index = self.columns
         elif axis == 1:
             target = self.T
             agg_index = self.index
 
         result_values = np.empty_like(target.values)
-        columns = target.cols()
+        columns = target.columns
         for i, col in enumerate(columns):
             result_values[:, i] = func(target[col])
 
@@ -1605,7 +1603,7 @@ class DataFrame(PandasGeneric):
             this = self.reindex(new_index)
             other = other.reindex(new_index)
 
-        new_columns = _try_sort(set(this.cols() + other.cols()))
+        new_columns = _try_sort(set(this.columns + other.columns))
         do_fill = fill_value is not None
 
         result = {}
@@ -1729,7 +1727,7 @@ class DataFrame(PandasGeneric):
 
     def _join_on(self, other, on):
         # Check for column overlap
-        overlap = set(self.cols()) & set(other.cols())
+        overlap = set(self.columns) & set(other.columns)
 
         if overlap:
             raise Exception('Columns overlap: %s' % _try_sort(overlap))
@@ -1908,7 +1906,7 @@ class DataFrame(PandasGeneric):
         Series or TimeSeries
         """
         try:
-            cols = self.cols()
+            cols = self.columns
             values = self.asMatrix(cols)
 
             if axis == 0:
@@ -1951,7 +1949,7 @@ class DataFrame(PandasGeneric):
         """
         num_cols = self._get_numeric_columns()
 
-        if len(num_cols) < len(self.cols()) and numeric_only:
+        if len(num_cols) < len(self.columns) and numeric_only:
             y = self.as_matrix(num_cols)
             axis_labels = num_cols
         else:
@@ -1974,11 +1972,11 @@ class DataFrame(PandasGeneric):
         return Series(the_sum, index=axis_labels)
 
     def _get_numeric_columns(self):
-        return [col for col in self.cols()
+        return [col for col in self.columns
                 if issubclass(self[col].dtype.type, np.number)]
 
     def _get_object_columns(self):
-        return [col for col in self.cols() if self[col].dtype == np.object_]
+        return [col for col in self.columns if self[col].dtype == np.object_]
 
     def cumsum(self, axis=0):
         """
@@ -2193,7 +2191,7 @@ class DataFrame(PandasGeneric):
         result = np.abs(y).mean(axis=axis)
 
         if axis == 0:
-            return Series(result, demeaned.cols())
+            return Series(result, demeaned.columns)
         else:
             return Series(result, demeaned.index)
 
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index f4d84d41a..e9c7f40dc 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -44,8 +44,18 @@ class Block(object):
     def merge(self, other):
         return _merge_blocks([self, other])
 
-    def reindex_index(self, indexer, notmask, need_masking):
-        pass
+    def reindex_index(self, indexer, notmask, needs_masking):
+        """
+        Reindex using pre-computed indexer information
+        """
+        new_values = self.values.take(indexer, axis=0)
+        if needs_masking:
+            if issubclass(new_values.dtype.type, np.int_):
+                new_values = new_values.astype(float)
+            elif issubclass(new_values_.dtype.type, np.bool_):
+                new_values = new_values.astype(object)
+            common.null_out_axis(new_values, notmask, 0)
+        return Block(new_values, self.columns)
 
     def reindex_columns(self, new_columns):
         indexer, mask = self.columns.get_indexer(columns)
@@ -78,6 +88,10 @@ class Block(object):
         new_values = _insert_into_values(self.values, value, loc)
         return Block(new_values, new_columns)
 
+    def get(self, col):
+        loc = self.columns.get_loc(col)
+        return self.values[:, loc]
+
     def set(self, col, value):
         """
         Modify Block in-place with new column value
@@ -152,8 +166,8 @@ class BlockManager(object):
     """
     def __init__(self, blocks, index=None, columns=None,
                  skip_integrity_check=False):
-        self.index = index
-        self.columns = columns
+        self.index = _ensure_index(index)
+        self.columns = _ensure_index(columns)
         self.blocks = blocks
 
         if not skip_integrity_check:
@@ -242,9 +256,15 @@ class BlockManager(object):
         return block.get(col)
 
     def delete(self, col):
+        loc = self.columns.get_loc(col)
+        self.columns = Index(np.delete(np.asarray(self.columns), loc))
+
         i, block = self._find_block(col)
-        new_block = block.delete(col)
-        self.blocks[i] = new_block
+        if len(block.columns) == 1:
+            self.blocks.pop(i)
+        else:
+            new_block = block.delete(col)
+            self.blocks[i] = new_block
 
     def set(self, col, value):
         """
@@ -293,35 +313,23 @@ class BlockManager(object):
         pass
 
     def reindex_index(self, new_index, method):
+        assert(isinstance(new_index, Index))
         indexer, mask = self.index.get_indexer(new_index, method)
 
         # TODO: deal with length-0 case? or does it fall out?
         notmask = -mask
-        needs_masking = len(index) > 0 and notmask.any()
+        needs_masking = len(new_index) > 0 and notmask.any()
 
         new_blocks = []
         for block in self.blocks:
-            values = block.values.take(indexer, axis=0)
-            if needs_masking:
-                if issubclass(values.dtype.type, np.int_):
-                    values = values.astype(float)
-                elif issubclass(values_.dtype.type, np.bool_):
-                    values = values.astype(object)
-                common.null_out_axis(values, notmask, 0)
-
-            newb = Block(new_values, block.columns)
-            new_blocks.append(newb)
 
-        if len(index) > 0:
-            if notmask.any():
-                if issubclass(mat.dtype.type, np.int_):
-                    mat = mat.astype(float)
-                elif issubclass(mat.dtype.type, np.bool_):
-                    mat = mat.astype(float)
+            newb = block.reindex_index(indexer, mask, needs_masking)
+            new_blocks.append(newb)
 
-                common.null_out_axis(mat, notmask, 0)
+        return BlockManager(new_blocks, new_index, self.columns)
 
     def reindex_columns(self, new_columns):
+        assert(isinstance(new_columns, Index))
         data = self
         if not data.is_consolidated():
             data = data.consolidate()
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index 23fa1e083..68163bb53 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -353,12 +353,9 @@ class DataMatrix(DataFrame):
         else:
             value = np.repeat(value, len(self.index))
 
-        if self.values.dtype == np.object_:
-            self._insert_object_dtype(key, value)
-        else:
-            self._insert_float_dtype(key, value)
+        self._data.set(key, value)
 
-    _dataTypes = [np.float_, np.bool_, np.int_]
+    _dataTypes = [np.float_, np.int_]
     def _insert_float_dtype(self, key, value):
         isObject = value.dtype not in self._dataTypes
 
@@ -366,87 +363,26 @@ class DataMatrix(DataFrame):
         if len(value) != len(self.index): # pragma: no cover
             raise Exception('Column is wrong length')
 
-        def _put_object(value):
-            if self.objects is None:
-                self.objects = DataMatrix({key : value},
-                                          index=self.index)
-            else:
-                self.objects[key] = value
-
-        if key in self.columns:
-            loc = self.columns.indexMap[key]
-            try:
-                # attempt coercion
-                self.values[:, loc] = value
-            except ValueError:
-                self._delete_column(loc)
-                self._delete_column_index(loc)
-                _put_object(value)
-        elif isObject:
-            _put_object(value)
-        else:
-            loc = self._get_insert_loc(key)
-            self._insert_column(value.astype(float), loc)
-            self._insert_column_index(key, loc)
-
-    def _insert_object_dtype(self, key, value):
-        if key in self.columns:
-            loc = self.columns.indexMap[key]
-            self.values[:, loc] = value
-        else:
-            loc = self._get_insert_loc(key)
-            self._insert_column(value, loc)
-            self._insert_column_index(key, loc)
+        self._data.set(key, value)
+
+        # if key in self.columns:
+        #     loc = self.columns.indexMap[key]
+        #     try:
+        #         # attempt coercion
+        #         self.values[:, loc] = value
+        #     except ValueError:
+        #         self._delete_column(loc)
+        #         self._delete_column_index(loc)
+        #         _put_object(value)
 
     def __delitem__(self, key):
         """
         Delete column from DataMatrix
         """
-        if key in self.columns:
-            loc = self.columns.indexMap[key]
-            self._delete_column(loc)
-            self._delete_column_index(loc)
-        else:
-            if self.objects is not None and key in self.objects:
-                del self.objects[key]
-            else:
-                raise KeyError('%s' % key)
-
-    def _insert_column(self, column, loc):
-        mat = self.values
-
-        if column.ndim == 1:
-            column = column.reshape((len(column), 1))
-
-        if loc == mat.shape[1]:
-            values = np.hstack((mat, column))
-        elif loc == 0:
-            values = np.hstack((column, mat))
-        else:
-            values = np.hstack((mat[:, :loc], column, mat[:, loc:]))
-
-        self._float_values = values
-
-    def _delete_column(self, loc):
-        values = self._float_values
-
-        if loc == values.shape[1] - 1:
-            new_values = values[:, :loc]
-        else:
-            new_values = np.c_[values[:, :loc], values[:, loc+1:]]
-
-        self._float_values = new_values
-
-    def __iter__(self):
-        """
-        Iterate over columns of the frame.
-        """
-        return iter(self.columns)
-
-    def iteritems(self):
-        return self._series.iteritems()
+        self._data.delete(key)
 
     # to support old APIs
+    @property
     def _series(self):
         return self._data.get_series_dict(self.index)
 
@@ -523,26 +459,10 @@ class DataMatrix(DataFrame):
         if not self:
             return other.copy()
 
-        if (isinstance(other, DataMatrix) and
-            self.columns.equals(other.columns)):
-
-            idx = Index(np.concatenate([self.index, other.index]))
-            mat = np.vstack((self.values, other.values))
-
-            if other.objects is None:
-                objects = self.objects
-            elif self.objects is None:
-                objects = other.objects
-            else:
-                objects = self.objects.append(other.objects)
-
-            if objects:
-                objects = objects.reindex(idx)
-
-            dm = DataMatrix(mat, idx, self.columns, objects=objects)
-            return dm
-        else:
-            return super(DataMatrix, self).append(other)
+        # TODO: with blocks
+        # idx = Index(np.concatenate([self.index, other.index]))
+        # mat = np.vstack((self.values, other.values))
+        return DataFrame.append(self, other)
 
     def asMatrix(self, columns=None):
         """
@@ -851,7 +771,7 @@ def _init_dict(data, index, columns):
 def _form_blocks(data, columns):
     # pre-filter out columns if we passed it
     if columns is None:
-        columns = _try_sort(data.keys())
+        columns = Index(_try_sort(data.keys()))
         extra_columns = NULL_INDEX
     else:
         columns = _ensure_index(columns)
diff --git a/pandas/core/tests/test_matrix.py b/pandas/core/tests/test_matrix.py
index 773d49d36..5fffdbcb6 100644
--- a/pandas/core/tests/test_matrix.py
+++ b/pandas/core/tests/test_matrix.py
@@ -291,6 +291,8 @@ class TestDataMatrix(test_frame.TestDataFrame):
 
 if __name__ == '__main__':
     import nose
-    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
+    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb-failure'],
                    exit=False)
+    # nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
+    #                exit=False)
 
