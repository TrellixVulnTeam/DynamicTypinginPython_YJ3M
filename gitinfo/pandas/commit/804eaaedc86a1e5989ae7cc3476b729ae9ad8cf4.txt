commit 804eaaedc86a1e5989ae7cc3476b729ae9ad8cf4
Author: Jeff Reback <jeff@reback.net>
Date:   Sun Nov 11 16:09:46 2012 -0500

    in core/frame.py
    
    changed method __getitem__ to use .mask directly (e.g. df.mask(df > 0) is equivalent semantically to df[df>0])
    
    added inplace keyword to where method (to update the dataframe in place, default is NOT to use inplace, and return a new dataframe)
    
    changed method _boolean_set_ to use where and inplace=True (this allows alignment of the passed values and is slightly less strict than the current method)
    
    all tests pass (as well as an added test in boolean frame indexing)

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
old mode 100644
new mode 100755
index 31c1a09f4..cada5f23c
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1775,9 +1775,8 @@ class DataFrame(NDFrame):
         elif isinstance(self.columns, MultiIndex):
             return self._getitem_multilevel(key)
         elif isinstance(key, DataFrame):
-            values = key.values
-            if values.dtype == bool:
-                return self.values[values]
+            if key.values.dtype == bool:
+                return self.mask(key)
             else:
                 raise ValueError('Cannot index using non-boolean DataFrame')
         else:
@@ -1891,11 +1890,7 @@ class DataFrame(NDFrame):
         if self._is_mixed_type:
             raise ValueError('Cannot do boolean setting on mixed-type frame')
 
-        if isinstance(value, DataFrame):
-            assert(value._indexed_same(self))
-            np.putmask(self.values, mask, value.values)
-        else:
-            self.values[mask] = value
+        self.where(key, value, inplace=True)
 
     def _set_item_multiple(self, keys, value):
         if isinstance(value, DataFrame):
@@ -4878,7 +4873,7 @@ class DataFrame(NDFrame):
         """
         return self.mul(other, fill_value=1.)
 
-    def where(self, cond, other):
+    def where(self, cond, other, inplace=False):
         """
         Return a DataFrame with the same shape as self and whose corresponding
         entries are from self where cond is True and otherwise are from other.
@@ -4905,9 +4900,13 @@ class DataFrame(NDFrame):
         if isinstance(other, DataFrame):
             _, other = self.align(other, join='left', fill_value=NA)
 
+        if inplace:
+            np.putmask(self.values, cond, other)
+            return self
+
         rs = np.where(cond, self, other)
         return self._constructor(rs, self.index, self.columns)
-
+        
     def mask(self, cond):
         """
         Returns copy of self whose values are replaced with nan if the
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
old mode 100644
new mode 100755
index 0b36e8d39..69b744a84
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -141,6 +141,12 @@ class CheckIndexing(object):
 
         self.assertRaises(ValueError, self.tsframe.__getitem__, self.tsframe)
 
+        # test df[df >0] works
+        bif = self.tsframe[self.tsframe > 0]
+        bifw = DataFrame(np.where(self.tsframe>0,self.tsframe,np.nan),index=self.tsframe.index,columns=self.tsframe.columns)
+        self.assert_(isinstance(bif,DataFrame))
+        self.assert_(bif.shape == self.tsframe.shape)
+        assert_frame_equal(bif,bifw)
 
     def test_getitem_boolean_list(self):
         df = DataFrame(np.arange(12).reshape(3,4))
