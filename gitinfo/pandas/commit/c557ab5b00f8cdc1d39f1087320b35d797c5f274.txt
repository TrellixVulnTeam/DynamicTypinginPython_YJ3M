commit c557ab5b00f8cdc1d39f1087320b35d797c5f274
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Tue May 5 09:45:39 2020 -0700

    PERF: make _Tick into a cdef class (#33979)

diff --git a/pandas/_libs/tslibs/offsets.pxd b/pandas/_libs/tslibs/offsets.pxd
index 5a553be53..e75cd8bdf 100644
--- a/pandas/_libs/tslibs/offsets.pxd
+++ b/pandas/_libs/tslibs/offsets.pxd
@@ -1 +1,3 @@
 cdef to_offset(object obj)
+cdef bint is_offset_object(object obj)
+cdef bint is_tick_object(object obj)
diff --git a/pandas/_libs/tslibs/offsets.pyx b/pandas/_libs/tslibs/offsets.pyx
index 3dfaa3688..9fbe717fa 100644
--- a/pandas/_libs/tslibs/offsets.pyx
+++ b/pandas/_libs/tslibs/offsets.pyx
@@ -86,6 +86,14 @@ for _d in DAYS:
 # ---------------------------------------------------------------------
 # Misc Helpers
 
+cdef bint is_offset_object(object obj):
+    return isinstance(obj, _BaseOffset)
+
+
+cdef bint is_tick_object(object obj):
+    return isinstance(obj, _Tick)
+
+
 cdef to_offset(object obj):
     """
     Wrap pandas.tseries.frequencies.to_offset to keep centralize runtime
@@ -608,7 +616,7 @@ class BaseOffset(_BaseOffset):
         return -self + other
 
 
-class _Tick:
+cdef class _Tick:
     """
     dummy class to mix into tseries.offsets.Tick so that in tslibs.period we
     can do isinstance checks on _Tick and avoid importing tseries.offsets
@@ -618,12 +626,18 @@ class _Tick:
     __array_priority__ = 1000
 
     def __truediv__(self, other):
-        result = self.delta.__truediv__(other)
+        if not isinstance(self, _Tick):
+            # cython semantics mean the args are sometimes swapped
+            result = other.delta.__rtruediv__(self)
+        else:
+            result = self.delta.__truediv__(other)
         return _wrap_timedelta_result(result)
 
-    def __rtruediv__(self, other):
-        result = self.delta.__rtruediv__(other)
-        return _wrap_timedelta_result(result)
+    def __reduce__(self):
+        return (type(self), (self.n,))
+
+    def __setstate__(self, state):
+        object.__setattr__(self, "n", state["n"])
 
 
 class BusinessMixin:
diff --git a/pandas/compat/pickle_compat.py b/pandas/compat/pickle_compat.py
index 3f4acca8b..cd2ded874 100644
--- a/pandas/compat/pickle_compat.py
+++ b/pandas/compat/pickle_compat.py
@@ -9,6 +9,8 @@ import warnings
 
 from pandas import Index
 
+from pandas.tseries.offsets import Tick
+
 if TYPE_CHECKING:
     from pandas import Series, DataFrame
 
@@ -38,6 +40,11 @@ def load_reduce(self):
                 return
             except TypeError:
                 pass
+        elif args and issubclass(args[0], Tick):
+            # TypeError: object.__new__(Day) is not safe, use Day.__new__()
+            cls = args[0]
+            stack[-1] = cls.__new__(*args)
+            return
 
         raise
 
diff --git a/pandas/io/pickle.py b/pandas/io/pickle.py
index 6faebf56a..3b35b54a6 100644
--- a/pandas/io/pickle.py
+++ b/pandas/io/pickle.py
@@ -173,7 +173,8 @@ def read_pickle(
     # 3) try pickle_compat with latin-1 encoding upon a UnicodeDecodeError
 
     try:
-        excs_to_catch = (AttributeError, ImportError, ModuleNotFoundError)
+        excs_to_catch = (AttributeError, ImportError, ModuleNotFoundError, TypeError)
+        # TypeError for Cython complaints about object.__new__ vs Tick.__new__
         try:
             with warnings.catch_warnings(record=True):
                 # We want to silence any warnings about, e.g. moved modules.
