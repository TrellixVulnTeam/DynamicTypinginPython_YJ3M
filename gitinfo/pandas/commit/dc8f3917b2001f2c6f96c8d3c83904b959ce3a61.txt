commit dc8f3917b2001f2c6f96c8d3c83904b959ce3a61
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Aug 29 22:22:36 2011 -0400

    DOC: more missing data docs

diff --git a/doc/source/api.rst b/doc/source/api.rst
index 07eb8f25d..e22a37f0e 100644
--- a/doc/source/api.rst
+++ b/doc/source/api.rst
@@ -60,6 +60,8 @@ Function application, GroupBy
    Series.map
    Series.groupby
 
+.. _api.series.stats:
+
 Computations / Descriptive Stats
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 .. autosummary::
@@ -224,6 +226,8 @@ Function application, GroupBy
    DataFrame.applymap
    DataFrame.groupby
 
+.. _api.dataframe.stats:
+
 Computations / Descriptive Stats
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 .. autosummary::
diff --git a/doc/source/basics.rst b/doc/source/basics.rst
index 3330975a3..5147dbc15 100644
--- a/doc/source/basics.rst
+++ b/doc/source/basics.rst
@@ -552,7 +552,7 @@ unlike the axis labels, cannot be assigned to.
     strings are involved, the result will be of object dtype. If there are only
     floats and integers, the resulting array will be of float dtype.
 
-.. _basics.apply:
+.. _basics.stats:
 
 Descriptive statistics
 ----------------------
diff --git a/doc/source/missing_data.rst b/doc/source/missing_data.rst
index 71c59c7ca..b6f46b8c5 100644
--- a/doc/source/missing_data.rst
+++ b/doc/source/missing_data.rst
@@ -5,6 +5,9 @@
 Working with missing data
 *************************
 
+In this section, we will discuss missing (also referred to as NA) values in
+pandas.
+
 .. ipython:: python
    :suppress:
 
@@ -13,12 +16,11 @@ Working with missing data
 
 .. note::
 
-    The choice of using ``NaN`` for missing data was largely for simplicity and
-    performance reasons. It differs from the MaskedArray approach of, for
-    example, :mod:`scikits.timeseries`. For a discussion of the issues with the
-    various approaches, :ref:`see here <missing_data>`. We are hopeful that
-    NumPy will be able to natively provide a NA dtype solution performant enough
-    to be used in pandas.
+    The choice of using ``NaN`` internally to denote missing data was largely
+    for simplicity and performance reasons. It differs from the MaskedArray
+    approach of, for example, :mod:`scikits.timeseries`. We are hopeful that
+    NumPy will soon be able to provide a native NA type solution (similar to R)
+    performant enough to be used in pandas.
 
 Missing data basics
 -------------------
@@ -69,20 +71,100 @@ pandas provides the ``isnull`` and ``notnull`` functions:
    isnull(df2['one'])
    notnull(df2['four'])
 
-**Summary:** ``NaN``, ``inf``, ``-inf``, and ``None`` (in object arrays) are all
-considered missing by the ``isnull`` and ``notnull`` functions.
+**Summary:** ``NaN``, ``inf``, ``-inf``, and ``None`` (in object arrays) are
+all considered missing by the ``isnull`` and ``notnull`` functions.
 
 Calculations with missing data
 ------------------------------
 
-Cleaning / replacing missing data
----------------------------------
+Missing values propagate naturally through arithmetic operations between pandas
+objects.
+
+.. ipython:: python
+   :suppress:
+
+   df = df2.ix[:, ['one', 'two', 'three']]
+   a = df2.ix[:5, ['one', 'two']].fillna(method='pad')
+   b = df2.ix[:5, ['one', 'two', 'three']]
+
+.. ipython:: python
+
+   a
+   b
+   a + b
+
+The descriptive statistics and computational methods discussed in the
+:ref:`data structure overview <basics.stats>` (and listed :ref:`here
+<api.series.stats>` and :ref:`here <api.dataframe.stats>`) are all written to
+account for missing data. For example:
+
+  * When summing data, NA (missing) values will be treated as zero
+  * If the data are all NA, the result will be NA
+  * Methods like **cumsum** and **cumprod** ignore NA values, but preserve them
+    in the resulting arrays
+
+.. ipython:: python
+
+   df
+   df['one'].sum()
+   df.mean(1)
+   df.cumsum()
+
+NA values in GroupBy
+~~~~~~~~~~~~~~~~~~~~
+
+NA groups in GroupBy are automatically excluded. This behavior is consistent
+with R, for example.
+
+Cleaning / filling missing data
+--------------------------------
+
+pandas objects are equipped with various data manipulation methods for dealing
+with missing data.
+
+dropna:
+
+Filling missing values: fillna
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+The **fillna** function can "fill in" NA values with non-null data in a couple
+of ways, which we illustrate:
+
+**Replace NA with a scalar value**
+
+.. ipython:: python
+
+   df2
+   df2.fillna(0)
+   df2['four'].fillna('missing')
+
+**Fill gaps forward or backward**
+
+Using the same filling arguments as :ref:`reindexing <basics.reindexing>`, we
+can propagate non-null values forward or backward:
+
+.. ipython:: python
+
+   df
+   df.fillna(method='pad')
+
+To remind you, these are the available filling methods:
+
+.. csv-table::
+    :header: "Method", "Action"
+    :widths: 30, 50
+
+	pad / ffill, Fill values forward
+	bfill / backfill, Fill values backward
+
+With time series data, using pad/ffill is extremely common so that the "last
+known value" is available at every time point.
 
-Dropping missing rows / columns
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+Dropping axis labels with missing data: dropna
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-Filling missing values
-~~~~~~~~~~~~~~~~~~~~~~
+Interpolation
+~~~~~~~~~~~~~
 
 Missing data casting and indexing rules
 ---------------------------------------
diff --git a/doc/sphinxext/ipython_directive.py b/doc/sphinxext/ipython_directive.py
index 843138518..ce50497f9 100644
--- a/doc/sphinxext/ipython_directive.py
+++ b/doc/sphinxext/ipython_directive.py
@@ -464,11 +464,6 @@ class EmbeddedSphinxShell(object):
 
             line_stripped = line.strip()
 
-            try:
-                leading_whitespace = re.search('\s+', line).group(0)
-            except AttributeError:
-                leading_whitespace = ''
-
             if not len(line):
                 output.append(line) # preserve empty lines in output
                 continue
@@ -689,7 +684,13 @@ class IpythonDirective(Directive):
             if len(block):
                 rows, figure = self.shell.process_block(block)
                 for row in rows:
-                    lines.extend(['   %s'%line for line in row.split('\n')])
+                    # hack
+                    # if row == '':
+                    #     continue
+
+                    # lines.extend(['   %s'% row.strip()])
+                    lines.extend(['   %s' % line
+                                  for line in re.split('[\n]+', row)])
 
                 if figure is not None:
                     figures.append(figure)
