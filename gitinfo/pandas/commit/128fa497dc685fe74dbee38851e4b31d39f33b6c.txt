commit 128fa497dc685fe74dbee38851e4b31d39f33b6c
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Feb 18 20:33:12 2010 +0000

    fixed truncate bug
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@125 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/series.py b/pandas/core/series.py
index 8b7c6a531..ba11abe3d 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -12,7 +12,7 @@ from numpy import NaN, ndarray
 import numpy as np
 
 from pandas.core.daterange import DateRange
-from pandas.core.index import Index
+from pandas.core.index import Index, NULL_INDEX
 from pandas.core.mixins import Picklable, Groupable
 import pandas.core.datetools as datetools
 
@@ -841,29 +841,25 @@ class Series(np.ndarray, Picklable, Groupable):
         after = arg_after = datetools.to_datetime(after)
 
         if before is None:
-            before = self.index[0]
-        elif before not in self.index:
-            loc = self.index.searchsorted(before, side='left')
-            before = self.index[loc]
+            beg_slice = 0
+        elif before in self.index:
+            beg_slice = self.index.indexMap[before]
+        elif before < self.index[-1]:
+            beg_slice = self.index.searchsorted(before, side='left')
+        else:
+            return Series([], index=NULL_INDEX)
 
         if after is None:
-            after = self.index[-1]
-        elif after not in self.index:
-            loc = self.index.searchsorted(after, side='right') - 1
-
-            if loc >= len(self.index):
-                loc = -1
-
-            after = self.index[loc]
-
-        beg_slice = self.index.indexMap[before]
-        end_slice = self.index.indexMap[after] + 1
+            end_slice = len(self)
+        elif after in self.index:
+            end_slice = self.index.indexMap[after] + 1
+        elif after > self.index[0]:
+            end_slice = self.index.searchsorted(after, side='right')
+        else:
+            return Series([], index=NULL_INDEX)
 
         return self[beg_slice:end_slice]
 
-    def slice(self, before, after):
-        return self.truncate(before=before, after=after)
-
     def asOf(self, date):
         """
         Return last good (non-NaN) value in TimeSeries if value is NaN for
@@ -1032,13 +1028,13 @@ class Series(np.ndarray, Picklable, Groupable):
         -------
         TimeSeries
         """
-        if fillMethod is None:
-            if self.index is newIndex:
-                return self.copy()
+        if self.index is newIndex:
+            return self.copy()
 
-            if not isinstance(newIndex, Index):
-                newIndex = Index(newIndex)
+        if not isinstance(newIndex, Index):
+            newIndex = Index(newIndex)
 
+        if fillMethod is None:
             idxMap = self.index.indexMap
 
             if self.dtype == float:
@@ -1058,21 +1054,15 @@ class Series(np.ndarray, Picklable, Groupable):
 
             return self.__class__(vals, index=newIndex)
 
-        if not isinstance(newIndex, Index):
-            newIndex = Index(newIndex)
-
         if len(self.index) == 0:
             return self.__class__.fromValue(NaN, index=newIndex)
 
         oldMap = self.index.indexMap
         newMap = newIndex.indexMap
 
-        if not fillMethod:
-            fillMethod = ''
-
         fillMethod = fillMethod.upper()
 
-        if fillMethod not in ['BACKFILL', 'PAD', '']:
+        if fillMethod not in ['BACKFILL', 'PAD']:
             raise Exception("Don't recognize fillMethod: %s" % fillMethod)
 
         # Cython for blazing speed
