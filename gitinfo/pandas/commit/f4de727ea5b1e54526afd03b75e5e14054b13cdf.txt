commit f4de727ea5b1e54526afd03b75e5e14054b13cdf
Author: MomIsBestFriend <50263213+MomIsBestFriend@users.noreply.github.com>
Date:   Mon Jan 20 18:30:43 2020 +0200

    TST: insert 'match' to bare pytest raises in  pandas/tests/internals/ (#30998)

diff --git a/pandas/tests/internals/test_internals.py b/pandas/tests/internals/test_internals.py
index 9c1442b75..aa966caa6 100644
--- a/pandas/tests/internals/test_internals.py
+++ b/pandas/tests/internals/test_internals.py
@@ -297,7 +297,8 @@ class TestBlock:
         assert (newb.values[1] == 1).all()
 
         newb = self.fblock.copy()
-        with pytest.raises(Exception):
+
+        with pytest.raises(IndexError, match=None):
             newb.delete(3)
 
 
@@ -321,7 +322,12 @@ class TestDatetimeBlock:
 
         val = date(2010, 10, 10)
         assert not block._can_hold_element(val)
-        with pytest.raises(TypeError):
+
+        msg = (
+            "'value' should be a 'Timestamp', 'NaT', "
+            "or array of those. Got 'date' instead."
+        )
+        with pytest.raises(TypeError, match=msg):
             arr[0] = val
 
 
@@ -350,7 +356,10 @@ class TestBlockManager:
         blocks[1].mgr_locs = np.array([0])
 
         # test trying to create block manager with overlapping ref locs
-        with pytest.raises(AssertionError):
+
+        msg = "Gaps in blk ref_locs"
+
+        with pytest.raises(AssertionError, match=msg):
             BlockManager(blocks, axes)
 
         blocks[0].mgr_locs = np.array([0])
@@ -808,7 +817,11 @@ class TestBlockManager:
         bm1 = create_mgr("a,b,c: i8-1; d,e,f: i8-2")
 
         for value in invalid_values:
-            with pytest.raises(ValueError):
+            msg = (
+                'For argument "inplace" expected type bool, '
+                f"received type {type(value).__name__}."
+            )
+            with pytest.raises(ValueError, match=msg):
                 bm1.replace_list([1], [2], inplace=value)
 
 
@@ -1027,9 +1040,11 @@ class TestBlockPlacement:
         assert len(BlockPlacement(slice(1, 0, -1))) == 1
 
     def test_zero_step_raises(self):
-        with pytest.raises(ValueError):
+        msg = "slice step cannot be zero"
+
+        with pytest.raises(ValueError, match=msg):
             BlockPlacement(slice(1, 1, 0))
-        with pytest.raises(ValueError):
+        with pytest.raises(ValueError, match=msg):
             BlockPlacement(slice(1, 2, 0))
 
     def test_unbounded_slice_raises(self):
@@ -1132,9 +1147,11 @@ class TestBlockPlacement:
         assert_add_equals(slice(1, 4), -1, [0, 1, 2])
         assert_add_equals([1, 2, 4], -1, [0, 1, 3])
 
-        with pytest.raises(ValueError):
+        msg = "iadd causes length change"
+
+        with pytest.raises(ValueError, match=msg):
             BlockPlacement(slice(1, 4)).add(-10)
-        with pytest.raises(ValueError):
+        with pytest.raises(ValueError, match=msg):
             BlockPlacement([1, 2, 4]).add(-10)
 
 
