commit 4d749fb8730656f0c01d1fac7f558a7c07e0d219
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jan 10 23:30:12 2011 -0500

    refactoring, module needs more work

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index c2f782b40..3e424ab9f 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -11,26 +11,39 @@ import numpy as np
 from pandas.core.index import Index
 from pandas.core.frame import DataFrame
 
-NA_VALUES = set(['-1.#IND', '1.#QNAN', '1.#IND',
-                 '-1.#QNAN','1.#INF','-1.#INF', '1.#INF000000',
-                 'NA', 'NULL', 'NaN', 'nan', ''])
+def parseCSV(filepath, header=0, indexCol=0):
+    """
+    Parse CSV file into a DataFrame object. Try to parse dates if possible.
+    """
+    import csv
+    f = open(filepath,'rb')
+    reader = csv.reader(f, dialect='excel')
+    lines = [l for l in reader]
+    f.close()
+    return simpleParser(lines, header=header, indexCol=indexCol)
+
+def read_table(path, header=0, index_col=0, delimiter=','):
+    data = np.genfromtext(path, delimiter=delimiter,
+                          names=header is not None,
+                          dtype=object)
 
-def simpleParser(nestedList, colNames=None, header=0, indexCol=0):
+    columns = data.dtype.names
+
+def parseText(filepath, sep='\t', header=0, indexCol=0, colNames = None):
+    """
+    Parse whitespace separated file into a DataFrame object.
+    Try to parse dates if possible.
+    """
+    lines = [l.rstrip().split(sep) for l in open(filepath,'rb').readlines()]
+    return simpleParser(lines, header=header, indexCol=indexCol,
+                        colNames = colNames)
+
+def simpleParser(lines, colNames=None, header=0, indexCol=0):
     """
     Workhorse function for processing nested list into DataFrame
 
-    Should be replaced by np.genfromtxt
+    Should be replaced by np.genfromtxt eventually?
     """
-    try:
-        from dateutil import parser
-        parse_date = parser.parse
-    except ImportError:
-        def parse_date(s):
-            try:
-                return datetime.strptime(s, '%m/%d/%Y')
-            except Exception:
-                return s
-    lines = nestedList
     data = {}
     if header is not None:
         columns = []
@@ -54,66 +67,68 @@ def simpleParser(nestedList, colNames=None, header=0, indexCol=0):
             columns = colNames
         content = lines
 
-    index_name = columns[indexCol]
+    data = dict(izip(columns, izip(*content)))
+    if indexCol is not None:
+        index_name = columns[indexCol]
+        # try to parse dates
+        index = _try_parse_dates(data.pop(index_name))
+    else:
+        index = np.arange(len(data.values()[0]))
 
-    def _convert_float(val):
-        if val in NA_VALUES:
-            return np.nan
-        else:
-            try:
-                parsed = np.float64(val)
-                if np.isinf(parsed):
-                    return val
-                return parsed
-            except Exception:
-                return val
+    data = _floatify(data)
+    data = _convert_to_ndarrays(data)
+    return DataFrame(data=data, index=Index(index))
 
-    for i, (name, values) in enumerate(izip(columns, izip(*content))):
-        if i == indexCol:
-            data[name] = values
-            continue
-        data[name] = [_convert_float(val) for val in values]
+NA_VALUES = set(['-1.#IND', '1.#QNAN', '1.#IND',
+                 '-1.#QNAN','1.#INF','-1.#INF', '1.#INF000000',
+                 'NA', 'NULL', 'NaN', 'nan', ''])
 
-    # try to parse dates
-    try:
-        # easier to ask forgiveness than permission
-        result = [parse_date(idx) for idx in data[index_name]]
-        data[index_name] = result
-    except Exception:
-        pass
+def _floatify(data_dict):
+    result = {}
+    for col, values in data_dict.iteritems():
+        result[col] = [_convert_float(val) for val in values]
 
-    for c, values in data.iteritems():
+    return result
+
+def _convert_float(val):
+    if val in NA_VALUES:
+        return np.nan
+    else:
         try:
-            data[c] = np.array(values, dtype=float)
+            parsed = np.float64(val)
+            if np.isinf(parsed):
+                return val
+            return parsed
         except Exception:
-            data[c] = np.array(values, dtype=object)
+            return val
 
-    if indexCol is not None:
-        index = Index(data.pop(index_name))
-        return DataFrame(data=data, index=index)
-    else:
-        index = np.arange(len(data.values()[0]))
-        return DataFrame(data=data, index=index)
+def _convert_to_ndarrays(dct):
+    result = {}
+    for c, values in dct.iteritems():
+        try:
+            result[c] = np.array(values, dtype=float)
+        except Exception:
+            result[c] = np.array(values, dtype=object)
 
-def parseCSV(filepath, header=0, indexCol=0):
-    """
-    Parse CSV file into a DataFrame object. Try to parse dates if possible.
-    """
-    import csv
-    f = open(filepath,'rb')
-    reader = csv.reader(f, dialect='excel')
-    lines = [l for l in reader]
-    f.close()
-    return simpleParser(lines, header=header, indexCol=indexCol)
+    return result
 
-def parseText(filepath, sep='\t', header=0, indexCol=0, colNames = None):
-    """
-    Parse whitespace separated file into a DataFrame object.
-    Try to parse dates if possible.
-    """
-    lines = [l.rstrip().split(sep) for l in open(filepath,'rb').readlines()]
-    return simpleParser(lines, header=header, indexCol=indexCol,
-                        colNames = colNames)
+def _try_parse_dates(values):
+    try:
+        from dateutil import parser
+        parse_date = parser.parse
+    except ImportError:
+        def parse_date(s):
+            try:
+                return datetime.strptime(s, '%m/%d/%Y')
+            except Exception:
+                return s
+
+    try:
+        # easier to ask forgiveness than permission
+        return [parse_date(val) for val in values]
+    except Exception:
+        # failed
+        return values
 
 #===============================================================================
 # Excel tools
