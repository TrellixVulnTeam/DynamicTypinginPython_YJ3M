commit 072545d213da4a29f0133be78facdb912db6b083
Author: David C Hall <davidchall@users.noreply.github.com>
Date:   Thu Mar 1 15:06:20 2018 -0800

    ENH: Add option to disable MathJax (#19824). (#19856)

diff --git a/doc/source/options.rst b/doc/source/options.rst
index cce16a539..a82be4d84 100644
--- a/doc/source/options.rst
+++ b/doc/source/options.rst
@@ -402,6 +402,10 @@ display.html.table_schema               False        Whether to publish a Table
 display.html.border                     1            A ``border=value`` attribute is
                                                      inserted in the ``<table>`` tag
                                                      for the DataFrame HTML repr.
+display.html.use_mathjax                True         When True, Jupyter notebook will process 
+                                                     table contents using MathJax, rendering 
+                                                     mathematical expressions enclosed by the 
+                                                     dollar symbol.
 io.excel.xls.writer                     xlwt         The default Excel writer engine for
                                                      'xls' files.
 io.excel.xlsm.writer                    openpyxl     The default Excel writer engine for
diff --git a/doc/source/whatsnew/v0.23.0.txt b/doc/source/whatsnew/v0.23.0.txt
index 08363cd54..f2c96ba3f 100644
--- a/doc/source/whatsnew/v0.23.0.txt
+++ b/doc/source/whatsnew/v0.23.0.txt
@@ -337,6 +337,7 @@ Other Enhancements
 - Added :func:`SeriesGroupBy.is_monotonic_increasing` and :func:`SeriesGroupBy.is_monotonic_decreasing` (:issue:`17015`)
 - For subclassed ``DataFrames``, :func:`DataFrame.apply` will now preserve the ``Series`` subclass (if defined) when passing the data to the applied function (:issue:`19822`)
 - :func:`DataFrame.from_dict` now accepts a ``columns`` argument that can be used to specify the column names when ``orient='index'`` is used (:issue:`18529`)
+- Added option ``display.html.use_mathjax`` so `MathJax <https://www.mathjax.org/>`_ can be disabled when rendering tables in ``Jupyter`` notebooks (:issue:`19856`, :issue:`19824`)
 
 
 .. _whatsnew_0230.api_breaking:
diff --git a/pandas/core/config_init.py b/pandas/core/config_init.py
index da42cdbf1..0edbf8921 100644
--- a/pandas/core/config_init.py
+++ b/pandas/core/config_init.py
@@ -207,6 +207,12 @@ html.border has been deprecated, use display.html.border instead
 (currently both are identical)
 """
 
+pc_html_use_mathjax_doc = """\
+: boolean
+    When True, Jupyter notebook will process table contents using MathJax,
+    rendering mathematical expressions enclosed by the dollar symbol.
+    (default: True)
+"""
 
 pc_width_doc = """
 : int
@@ -358,6 +364,8 @@ with cf.config_prefix('display'):
                        validator=is_bool, cb=table_schema_cb)
     cf.register_option('html.border', 1, pc_html_border_doc,
                        validator=is_int)
+    cf.register_option('html.use_mathjax', True, pc_html_use_mathjax_doc,
+                       validator=is_bool)
 
 with cf.config_prefix('html'):
     cf.register_option('border', 1, pc_html_border_doc,
diff --git a/pandas/io/formats/format.py b/pandas/io/formats/format.py
index 621641747..50b4f1163 100644
--- a/pandas/io/formats/format.py
+++ b/pandas/io/formats/format.py
@@ -1209,6 +1209,9 @@ class HTMLFormatter(TableFormatter):
         frame = self.frame
 
         _classes = ['dataframe']  # Default class.
+        use_mathjax = get_option("display.html.use_mathjax")
+        if not use_mathjax:
+            _classes.append('tex2jax_ignore')
         if self.classes is not None:
             if isinstance(self.classes, str):
                 self.classes = self.classes.split()
diff --git a/pandas/io/formats/style.py b/pandas/io/formats/style.py
index 525f487d8..f876ceb8a 100644
--- a/pandas/io/formats/style.py
+++ b/pandas/io/formats/style.py
@@ -325,9 +325,19 @@ class Styler(object):
                                   .format(row=r, col=c)})
             body.append(row_es)
 
+        table_attr = self.table_attributes
+        use_mathjax = get_option("display.html.use_mathjax")
+        if not use_mathjax:
+            table_attr = table_attr or ''
+            if 'class="' in table_attr:
+                table_attr = table_attr.replace('class="',
+                                                'class="tex2jax_ignore ')
+            else:
+                table_attr += ' class="tex2jax_ignore"'
+
         return dict(head=head, cellstyle=cellstyle, body=body, uuid=uuid,
                     precision=precision, table_styles=table_styles,
-                    caption=caption, table_attributes=self.table_attributes)
+                    caption=caption, table_attributes=table_attr)
 
     def format(self, formatter, subset=None):
         """
diff --git a/pandas/tests/io/formats/test_format.py b/pandas/tests/io/formats/test_format.py
index 03c071dbe..6c3b75cdf 100644
--- a/pandas/tests/io/formats/test_format.py
+++ b/pandas/tests/io/formats/test_format.py
@@ -1434,6 +1434,13 @@ c  10  11  12  13  14\
 
         tm.reset_display_options()
 
+    def test_repr_html_mathjax(self):
+        df = DataFrame([[1, 2], [3, 4]])
+        assert 'tex2jax_ignore' not in df._repr_html_()
+
+        with pd.option_context('display.html.use_mathjax', False):
+            assert 'tex2jax_ignore' in df._repr_html_()
+
     def test_repr_html_wide(self):
         max_cols = get_option('display.max_columns')
         df = DataFrame(tm.rands_array(25, size=(10, max_cols - 1)))
diff --git a/pandas/tests/io/formats/test_style.py b/pandas/tests/io/formats/test_style.py
index adf8e14b7..c1ab9cd18 100644
--- a/pandas/tests/io/formats/test_style.py
+++ b/pandas/tests/io/formats/test_style.py
@@ -46,6 +46,13 @@ class TestStyler(object):
     def test_repr_html_ok(self):
         self.styler._repr_html_()
 
+    def test_repr_html_mathjax(self):
+        # gh-19824
+        assert 'tex2jax_ignore' not in self.styler._repr_html_()
+
+        with pd.option_context('display.html.use_mathjax', False):
+            assert 'tex2jax_ignore' in self.styler._repr_html_()
+
     def test_update_ctx(self):
         self.styler._update_ctx(self.attrs)
         expected = {(0, 0): ['color: red'],
