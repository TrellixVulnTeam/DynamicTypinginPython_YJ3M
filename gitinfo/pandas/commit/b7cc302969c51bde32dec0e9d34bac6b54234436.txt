commit b7cc302969c51bde32dec0e9d34bac6b54234436
Author: y-p <yoval@gmx.com>
Date:   Wed Nov 14 03:30:41 2012 +0200

    ENH: py2/py3 support for str(x)/unicode(x) and bytes(x)/str(x) for series,df,panel
    
    - If you put in proper unicode data, you're good.
    - If you put in utf-8 bytestrings you should still be good (it works if rendering
    is wrapped by pprint_thing, I may have missed a few spots).
    - If you put in non utf-8 bytestrings, with the encoding unknown, and expect
    unicode(x) or str(x) to do the right thing - you're doing it wrong.

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 439c59a6a..a160c994e 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -612,20 +612,51 @@ class DataFrame(NDFrame):
                 else:
                     return False
 
-    def __repr__(self):
+    def __str__(self):
+        """
+        Return a string representation for a particular DataFrame
+
+        Invoked by str(df) in both py2/py3.
+        Yields Bytestring in Py2, Unicode String in py3.
+        """
+
+        if py3compat.PY3:
+            return self.__unicode__()
+        return self.__bytes__()
+
+    def __bytes__(self):
+        """
+        Return a string representation for a particular DataFrame
+
+        Invoked by bytes(df) in py3 only.
+        Yields a bytestring in both py2/py3.
+        """
+        return com.console_encode(self.__unicode__())
+
+    def __unicode__(self):
         """
         Return a string representation for a particular DataFrame
+
+        Invoked by unicode(df) in py2 only. Yields a Unicode String in both py2/py3.
         """
-        buf = StringIO()
+        buf = StringIO(u"")
         if self._need_info_repr_():
             self.info(buf=buf, verbose=self._verbose_info)
         else:
             self.to_string(buf=buf)
+
         value = buf.getvalue()
+        assert type(value) == unicode
 
-        if py3compat.PY3:
-            return unicode(value)
-        return com.console_encode(value)
+        return value
+
+    def __repr__(self):
+        """
+        Return a string representation for a particular DataFrame
+
+        Yields Bytestring in Py2, Unicode String in py3.
+        """
+        return str(self)
 
     def _repr_html_(self):
         """
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 2dca8a2ae..ae4a5d868 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -386,34 +386,70 @@ class Panel(NDFrame):
     #----------------------------------------------------------------------
     # Magic methods
 
-    def __repr__(self):
+    def __str__(self):
+        """
+        Return a string representation for a particular Panel
+
+        Invoked by str(df) in both py2/py3.
+        Yields Bytestring in Py2, Unicode String in py3.
+        """
+
+        if py3compat.PY3:
+            return self.__unicode__()
+        return self.__bytes__()
+
+    def __bytes__(self):
+        """
+        Return a string representation for a particular Panel
+
+        Invoked by bytes(df) in py3 only.
+        Yields a bytestring in both py2/py3.
+        """
+        return com.console_encode(self.__unicode__())
+
+    def __unicode__(self):
+        """
+        Return a string representation for a particular Panel
+
+        Invoked by unicode(df) in py2 only. Yields a Unicode String in both py2/py3.
+        """
+
         class_name = str(self.__class__)
 
         I, N, K = len(self.items), len(self.major_axis), len(self.minor_axis)
 
-        dims = 'Dimensions: %d (items) x %d (major) x %d (minor)' % (I, N, K)
+        dims = u'Dimensions: %d (items) x %d (major) x %d (minor)' % (I, N, K)
 
         if len(self.major_axis) > 0:
-            major = 'Major axis: %s to %s' % (self.major_axis[0],
+            major = u'Major axis: %s to %s' % (self.major_axis[0],
                                               self.major_axis[-1])
         else:
-            major = 'Major axis: None'
+            major = u'Major axis: None'
 
         if len(self.minor_axis) > 0:
-            minor = 'Minor axis: %s to %s' % (self.minor_axis[0],
-                                              self.minor_axis[-1])
+            minor = u'Minor axis: %s to %s' % (com.pprint_thing(self.minor_axis[0]),
+                                              com.pprint_thing(self.minor_axis[-1]))
         else:
-            minor = 'Minor axis: None'
+            minor = u'Minor axis: None'
 
         if len(self.items) > 0:
-            items = 'Items: %s to %s' % (self.items[0], self.items[-1])
+            items = u'Items: %s to %s' % (com.pprint_thing(self.items[0]),
+                                          com.pprint_thing(self.items[-1]))
         else:
-            items = 'Items: None'
+            items = u'Items: None'
 
-        output = '%s\n%s\n%s\n%s\n%s' % (class_name, dims, items, major, minor)
+        output = u'%s\n%s\n%s\n%s\n%s' % (class_name, dims, items, major, minor)
 
         return output
 
+    def __repr__(self):
+        """
+        Return a string representation for a particular Panel
+
+        Yields Bytestring in Py2, Unicode String in py3.
+        """
+        return str(self)
+
     def __iter__(self):
         return iter(self.items)
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 62cc9a2f4..dc7588847 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -858,8 +858,34 @@ copy : boolean, default False
 
             return df.reset_index(level=level, drop=drop)
 
-    def __repr__(self):
-        """Clean string representation of a Series"""
+
+    def __str__(self):
+        """
+        Return a string representation for a particular DataFrame
+
+        Invoked by str(df) in both py2/py3.
+        Yields Bytestring in Py2, Unicode String in py3.
+        """
+
+        if py3compat.PY3:
+            return self.__unicode__()
+        return self.__bytes__()
+
+    def __bytes__(self):
+        """
+        Return a string representation for a particular DataFrame
+
+        Invoked by bytes(df) in py3 only.
+        Yields a bytestring in both py2/py3.
+        """
+        return com.console_encode(self.__unicode__())
+
+    def __unicode__(self):
+        """
+        Return a string representation for a particular DataFrame
+
+        Invoked by unicode(df) in py2 only. Yields a Unicode String in both py2/py3.
+        """
         width, height = get_terminal_size()
         max_rows = (height if fmt.print_config.max_rows == 0
                     else fmt.print_config.max_rows)
@@ -870,13 +896,24 @@ copy : boolean, default False
                                     length=len(self) > 50,
                                     name=True)
         else:
-            result = '%s' % ndarray.__repr__(self)
+            result = com.pprint_thing(self)
 
-        if py3compat.PY3:
-            return unicode(result)
-        return com.console_encode(result)
+        assert type(result) == unicode
+        return result
+
+    def __repr__(self):
+        """
+        Return a string representation for a particular Series
+
+        Yields Bytestring in Py2, Unicode String in py3.
+        """
+        return str(self)
 
     def _tidy_repr(self, max_vals=20):
+        """
+
+        Internal function, should always return unicode string
+        """
         num = max_vals // 2
         head = self[:num]._get_repr(print_header=True, length=False,
                                     name=False)
@@ -886,13 +923,11 @@ copy : boolean, default False
         result = head + '\n...\n' + tail
         result = '%s\n%s' % (result, self._repr_footer())
 
-        if py3compat.PY3:
-            return unicode(result)
-        return com.console_encode(result)
+        return unicode(result)
 
     def _repr_footer(self):
-        namestr = "Name: %s, " % com.pprint_thing(self.name) if self.name is not None else ""
-        return '%sLength: %d' % (namestr, len(self))
+        namestr = u"Name: %s, " % com.pprint_thing(self.name) if self.name is not None else ""
+        return u'%sLength: %d' % (namestr, len(self))
 
     def to_string(self, buf=None, na_rep='NaN', float_format=None,
                   nanRep=None, length=False, name=False):
@@ -925,6 +960,9 @@ copy : boolean, default False
 
         the_repr = self._get_repr(float_format=float_format, na_rep=na_rep,
                                   length=length, name=name)
+
+        assert type(the_repr) == unicode
+
         if buf is None:
             return the_repr
         else:
@@ -932,13 +970,17 @@ copy : boolean, default False
 
     def _get_repr(self, name=False, print_header=False, length=True,
                   na_rep='NaN', float_format=None):
+        """
+
+        Internal function, should always return unicode string
+        """
+
         formatter = fmt.SeriesFormatter(self, name=name, header=print_header,
                                         length=length, na_rep=na_rep,
                                         float_format=float_format)
-        return formatter.to_string()
-
-    def __str__(self):
-        return repr(self)
+        result = formatter.to_string()
+        assert type(result) == unicode
+        return result
 
     def __iter__(self):
         if np.issubdtype(self.dtype, np.datetime64):
