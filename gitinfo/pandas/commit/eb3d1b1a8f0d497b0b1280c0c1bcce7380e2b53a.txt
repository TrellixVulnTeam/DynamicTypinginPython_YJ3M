commit eb3d1b1a8f0d497b0b1280c0c1bcce7380e2b53a
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Nov 12 19:47:44 2011 -0500

    BUG: preserve index name when grouping by level

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index b33bfea63..3c6bcb6bc 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -23,7 +23,7 @@ import numpy as np
 
 from pandas.core.common import (isnull, notnull, PandasError, adjoin,
                                 _try_sort, _pfixed, _default_index,
-                                _infer_dtype, _stringify, _maybe_upcast)
+                                _stringify, _maybe_upcast)
 from pandas.core.daterange import DateRange
 from pandas.core.generic import NDFrame
 from pandas.core.index import Index, MultiIndex, NULL_INDEX, _ensure_index
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 65fcaa611..00feb2517 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -5,7 +5,7 @@ import numpy as np
 
 from pandas.core.frame import DataFrame
 from pandas.core.generic import NDFrame, PandasObject
-from pandas.core.index import Index, Int64Index, MultiIndex
+from pandas.core.index import Index, MultiIndex
 from pandas.core.internals import BlockManager
 from pandas.core.reshape import get_group_index
 from pandas.core.series import Series
@@ -536,6 +536,8 @@ class Grouping(object):
 
             inds = index.labels[level]
             labels = index.levels[level].take(inds)
+            if self.name is None:
+                self.name = index.names[level]
 
             if grouper is not None:
                 self.grouper = labels.map(self.grouper)
@@ -619,7 +621,7 @@ def _get_groupings(obj, grouper=None, axis=0, level=None):
             ping = Grouping(group_axis, arg, name=name, level=level)
             groupings.append(ping)
     else:
-        name = 'key'
+        name = None
         if isinstance(grouper, basestring):
             exclusions.append(grouper)
             name = grouper
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 3e0d1cecc..56f3a2f86 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1210,6 +1210,9 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         assert_frame_equal(result, df)
         assert_frame_equal(result2, df)
 
+        result = DataFrame.from_records(tuples)
+        self.assert_(np.array_equal(result.columns, range(4)))
+
     def test_get_agg_axis(self):
         cols = self.frame._get_agg_axis(0)
         self.assert_(cols is self.frame.columns)
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index d5ff7712c..62ed705dc 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -730,6 +730,8 @@ class TestGroupBy(unittest.TestCase):
 
         assert_frame_equal(result0, expected0)
         assert_frame_equal(result1, expected1)
+        self.assertEquals(result0.index.name, frame.index.names[0])
+        self.assertEquals(result1.index.name, frame.index.names[1])
 
         # groupby level name
         result0 = frame.groupby(level='first').sum()
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 24edb869d..30fd0cb8d 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -293,6 +293,7 @@ class TestMultiLevel(unittest.TestCase):
             for i in range(index.nlevels):
                 result = frame.count(axis=axis, level=i)
                 expected = frame.groupby(axis=axis, level=i).count(axis=axis)
+                assert_frame_equal(result, expected.reindex_like(result))
 
         self.frame.ix[1, [1, 2]] = np.nan
         self.frame.ix[7, [0, 1]] = np.nan
@@ -308,6 +309,10 @@ class TestMultiLevel(unittest.TestCase):
         df = tm.makeTimeDataFrame()
         self.assertRaises(Exception, df.count, level=0)
 
+        self.frame['D'] = 'foo'
+        result = self.frame.count(level=0, numeric_only=True)
+        assert_almost_equal(result.columns, ['A', 'B', 'C'])
+
     def test_count_level_series(self):
         index = MultiIndex(levels=[['foo', 'bar', 'baz'],
                                    ['one', 'two', 'three', 'four']],
