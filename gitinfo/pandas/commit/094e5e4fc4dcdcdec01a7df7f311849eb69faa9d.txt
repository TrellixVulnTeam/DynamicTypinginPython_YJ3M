commit 094e5e4fc4dcdcdec01a7df7f311849eb69faa9d
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue May 8 10:31:22 2012 -0400

    BUG: support PeriodIndex as DataFrame columns and deal with other PeriodIndex support issues in Series/DataFrame constructors, close #1211

diff --git a/pandas/core/index.py b/pandas/core/index.py
index 11a0b1419..139d915e9 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -61,6 +61,8 @@ class Index(np.ndarray):
     _inner_indexer = lib.inner_join_indexer_object
     _outer_indexer = lib.outer_join_indexer_object
 
+    _box_scalars = False
+
     name = None
     asi8 = None
 
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 456c8965e..fde2ac81e 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -1062,7 +1062,8 @@ def _stack_dict(dct, ref_items, dtype):
         else:
             return x.shape
 
-    items = [x for x in ref_items if x in dct]
+    # index may box values
+    items = ref_items[[x in dct for x in ref_items]]
 
     first = dct[items[0]]
     shape = (len(dct),) + _shape_compat(first)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 86bbba197..076013fbd 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -286,6 +286,8 @@ class Series(np.ndarray, generic.PandasObject):
                     # coerce back to datetime objects for lookup
                     data = lib.fast_multiget(data, index.astype('O'),
                                              default=np.nan)
+                elif isinstance(index, PeriodIndex):
+                    data = [data.get(i, nan) for i in index]
                 else:
                     data = lib.fast_multiget(data, index, default=np.nan)
             except TypeError:
diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index 10b6e527d..f443ab6d9 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -62,6 +62,8 @@ def _to_quarterly(year, month, freq='Q-DEC'):
 
 class Period(object):
 
+    __slots__ = ['freq', 'ordinal']
+
     def __init__(self, value=None, freq=None, ordinal=None,
                  year=None, month=1, quarter=None, day=1,
                  hour=0, minute=0, second=0):
@@ -507,6 +509,7 @@ class PeriodIndex(Int64Index):
         If periods is none, generated index will extend to first conforming
         period on or just past end argument
     """
+    _box_scalars = True
 
     def __new__(cls, data=None,
                 freq=None, start=None, end=None, periods=None,
@@ -592,6 +595,25 @@ class PeriodIndex(Int64Index):
 
         return subarr
 
+    def __contains__(self, key):
+        if not isinstance(key, Period) or key.freq != self.freq:
+            if isinstance(key, basestring):
+                try:
+                    self.get_loc(key)
+                    return True
+                except Exception:
+                    return False
+            return False
+        return key.ordinal in self._engine
+
+    def astype(self, dtype):
+        dtype = np.dtype(dtype)
+        if dtype == np.object_:
+            result = np.empty(len(self), dtype=dtype)
+            result[:] = [x for x in self]
+            return result
+        return np.ndarray.astype(self.values, dtype)
+
     def __iter__(self):
         for val in self.values:
             yield Period(ordinal=val, freq=self.freq)
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index b5217fbd3..771d6387c 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -946,6 +946,39 @@ class TestPeriodIndex(TestCase):
         exp_index = _get_with_delta(delta)
         self.assert_(result.index.equals(exp_index))
 
+    def test_as_frame_columns(self):
+        rng = period_range('1/1/2000', periods=5)
+        df = DataFrame(randn(10, 5), columns=rng)
+
+        ts = df[rng[0]]
+        assert_series_equal(ts, df.ix[:, 0])
+
+        # GH # 1211
+        repr(df)
+
+        ts = df['1/1/2000']
+        assert_series_equal(ts, df.ix[:, 0])
+
+    def test_nested_dict_frame_constructor(self):
+        rng = period_range('1/1/2000', periods=5)
+        df = DataFrame(randn(10, 5), columns=rng)
+
+        data = {}
+        for col in df.columns:
+            for row in df.index:
+                data.setdefault(col, {})[row] = df.get_value(row, col)
+
+        result = DataFrame(data, columns=rng)
+        tm.assert_frame_equal(result, df)
+
+        data = {}
+        for col in df.columns:
+            for row in df.index:
+                data.setdefault(row, {})[col] = df.get_value(row, col)
+
+        result = DataFrame(data, index=rng).T
+        tm.assert_frame_equal(result, df)
+
     def test_frame_to_time_stamp(self):
         K = 5
         index = PeriodIndex(freq='A', start='1/1/2001', end='12/1/2009')
@@ -1425,9 +1458,11 @@ class TestPeriodIndex(TestCase):
         for x, val in zip(periodindex, field_idx):
             assert_equal(getattr(x, fieldname), val)
 
+
 def _permute(obj):
     return obj.take(np.random.permutation(len(obj)))
 
+
 class TestMethods(TestCase):
     "Base test class for MaskedArrays."
 
