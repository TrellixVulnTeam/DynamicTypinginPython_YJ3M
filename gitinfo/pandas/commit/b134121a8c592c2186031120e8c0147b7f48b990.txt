commit b134121a8c592c2186031120e8c0147b7f48b990
Author: jreback <jeff@reback.net>
Date:   Fri Sep 13 10:55:11 2013 -0400

    BUG: allow DataFrame constructor to accept more list-like objects, e.g. list of
        `ollections.Sequence and array.Array objects (GH3783 and GH42971)

diff --git a/doc/source/release.rst b/doc/source/release.rst
index c80ddd01c..140c3bc83 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -113,6 +113,8 @@ Improvements to existing features
     ``io.excel.xls.writer``. (:issue:`4745`, :issue:`4750`)
   - ``Panel.to_excel()`` now accepts keyword arguments that will be passed to
     its ``DataFrame``'s ``to_excel()`` methods. (:issue:`4750`)
+  - allow DataFrame constructor to accept more list-like objects, e.g. list of
+    ``collections.Sequence`` and ``array.Array`` objects (:issue:`3783`,:issue:`42971`)
 
 API Changes
 ~~~~~~~~~~~
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index bd601c5c8..5aad9c6a4 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -24,7 +24,7 @@ import numpy.ma as ma
 from pandas.core.common import (isnull, notnull, PandasError, _try_sort,
                                 _default_index, _maybe_upcast, _is_sequence,
                                 _infer_dtype_from_scalar, _values_from_object,
-                                _coerce_to_dtypes, _DATELIKE_DTYPES)
+                                _coerce_to_dtypes, _DATELIKE_DTYPES, is_list_like)
 from pandas.core.generic import NDFrame
 from pandas.core.index import Index, MultiIndex, _ensure_index
 from pandas.core.indexing import (_NDFrameIndexer, _maybe_droplevels,
@@ -418,7 +418,7 @@ class DataFrame(NDFrame):
                 if index is None and isinstance(data[0], Series):
                     index = _get_names_from_index(data)
 
-                if isinstance(data[0], (list, tuple, collections.Mapping, Series)):
+                if is_list_like(data[0]) and getattr(data[0],'ndim',0) <= 1:
                     arrays, columns = _to_arrays(data, columns, dtype=dtype)
                     columns = _ensure_index(columns)
 
@@ -4545,7 +4545,7 @@ class DataFrame(NDFrame):
 
 
         else:
-            if not com.is_list_like(values):
+            if not is_list_like(values):
                 raise TypeError("only list-like or dict-like objects are"
                                 " allowed to be passed to DataFrame.isin(), "
                                 "you passed a "
@@ -4705,7 +4705,7 @@ def extract_index(data):
             elif isinstance(v, dict):
                 have_dicts = True
                 indexes.append(list(v.keys()))
-            elif isinstance(v, (list, tuple, np.ndarray)):
+            elif is_list_like(v) and getattr(v,'ndim',0) <= 1:
                 have_raw_arrays = True
                 raw_lengths.append(len(v))
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index c5af0b0d4..9a42a9d1d 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2606,6 +2606,32 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         self.assert_(com.is_integer_dtype(df['num']))
         self.assert_(df['str'].dtype == np.object_)
 
+    def test_constructor_sequence_like(self):
+        # GH 3783
+        # collections.Squence like
+        import collections
+
+        class DummyContainer(collections.Sequence):
+            def __init__(self, lst):
+                self._lst = lst
+            def __getitem__(self, n):
+                return self._lst.__getitem__(n)
+            def __len__(self, n):
+                return self._lst.__len__()
+
+        l = [DummyContainer([1, 'a']), DummyContainer([2, 'b'])]
+        columns = ["num", "str"]
+        result = DataFrame(l, columns=columns)
+        expected = DataFrame([[1,'a'],[2,'b']],columns=columns)
+        assert_frame_equal(result, expected, check_dtype=False)
+
+        # GH 4297
+        # support Array
+        import array
+        result = DataFrame.from_items([('A', array.array('i', range(10)))])
+        expected = DataFrame({ 'A' : list(range(10)) })
+        assert_frame_equal(result, expected, check_dtype=False)
+
     def test_constructor_list_of_dicts(self):
         data = [OrderedDict([['a', 1.5], ['b', 3], ['c', 4], ['d', 6]]),
                 OrderedDict([['a', 1.5], ['b', 3], ['d', 6]]),
