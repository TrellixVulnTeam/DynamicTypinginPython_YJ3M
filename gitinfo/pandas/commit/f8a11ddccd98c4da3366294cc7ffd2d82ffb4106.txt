commit f8a11ddccd98c4da3366294cc7ffd2d82ffb4106
Author: Gábor Lipták <gliptak@gmail.com>
Date:   Mon May 23 08:58:45 2016 -0400

    ERR: Correct ValueError invalid type promotion exception
    
    closes #12599
    
    Author: Gábor Lipták <gliptak@gmail.com>
    
    Closes #13234 from gliptak/invalidtypepromotion and squashes the following commits:
    
    88f144b [Gábor Lipták] Correct ValueError invalid type promotion exception

diff --git a/doc/source/whatsnew/v0.18.2.txt b/doc/source/whatsnew/v0.18.2.txt
index cbf95a104..1e2ea618a 100644
--- a/doc/source/whatsnew/v0.18.2.txt
+++ b/doc/source/whatsnew/v0.18.2.txt
@@ -59,7 +59,6 @@ API changes
 - An ``UnsupportedFunctionCall`` error is now raised if numpy ufuncs like ``np.mean`` are called on groupby or resample objects (:issue:`12811`)
 - Calls to ``.sample()`` will respect the random seed set via ``numpy.random.seed(n)`` (:issue:`13161`)
 
-
 .. _whatsnew_0182.api.tolist:
 
 ``Series.tolist()`` will now return Python types
@@ -88,6 +87,36 @@ New Behavior:
    type(s.tolist()[0])
 
 
+.. _whatsnew_0182.api.promote:
+
+``Series`` type promotoion on assignment
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+A ``Series`` will now correctly promote its dtype with assignment with incompat values to the current dtype (:issue:`13234`)
+
+
+.. ipython:: python
+
+   s = pd.Series()
+
+Previous Behavior:
+
+.. code-block:: ipython
+
+   In [2]: s["a"] = pd.Timestamp("2016-01-01")
+
+   In [3]: s["b"] = 3.0
+   TypeError: invalid type promotion
+
+New Behavior:
+
+.. ipython:: python
+
+   s["a"] = pd.Timestamp("2016-01-01")
+   s["b"] = 3.0
+   s
+   s.dtype
+
 .. _whatsnew_0182.api.to_datetime_coerce:
 
 ``.to_datetime()`` when coercing
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index acb067524..9485f50ed 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -336,9 +336,12 @@ class _NDFrameIndexer(object):
                     # this preserves dtype of the value
                     new_values = Series([value])._values
                     if len(self.obj._values):
-                        new_values = np.concatenate([self.obj._values,
-                                                     new_values])
-
+                        try:
+                            new_values = np.concatenate([self.obj._values,
+                                                         new_values])
+                        except TypeError:
+                            new_values = np.concatenate([self.obj.asobject,
+                                                         new_values])
                     self.obj._data = self.obj._constructor(
                         new_values, index=new_index, name=self.obj.name)._data
                     self.obj._maybe_update_cacher(clear=True)
diff --git a/pandas/tests/series/test_indexing.py b/pandas/tests/series/test_indexing.py
index 5ed3fda7d..29cd887c7 100644
--- a/pandas/tests/series/test_indexing.py
+++ b/pandas/tests/series/test_indexing.py
@@ -287,6 +287,16 @@ class TestSeriesIndexing(TestData, tm.TestCase):
         assert_series_equal(result, expected)
         assert_series_equal(result2, expected)
 
+    def test_type_promotion(self):
+        # GH12599
+        s = pd.Series()
+        s["a"] = pd.Timestamp("2016-01-01")
+        s["b"] = 3.0
+        s["c"] = "foo"
+        expected = Series([pd.Timestamp("2016-01-01"), 3.0, "foo"],
+                          index=["a", "b", "c"])
+        assert_series_equal(s, expected)
+
     def test_getitem_boolean_object(self):
         # using column from DataFrame
 
