commit d21725c363b1c944a56014ee45dbabd1f9b50034
Author: Chang She <chang@lambdafoundry.com>
Date:   Thu Apr 26 18:29:58 2012 -0400

    ENH loffset in resample. GH #1127

diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 7705cbd9b..86f783c83 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -1,10 +1,12 @@
 # pylint: disable=W0231
+from datetime import timedelta
 
 import numpy as np
 
 from pandas.core.common import save, load
 from pandas.core.index import MultiIndex
 from pandas.tseries.index import DatetimeIndex
+from pandas.tseries.offsets import DateOffset
 
 #-------------------------------------------------------------------------------
 # Picklable mixin
@@ -136,7 +138,8 @@ class PandasObject(Picklable):
                        sort=sort, group_keys=group_keys)
 
     def resample(self, rule, how='mean', axis=0, as_index=True,
-                 fill_method=None, closed='right', label='right', kind=None):
+                 fill_method=None, closed='right', label='right', kind=None,
+                 loffset=None):
         """
         Convenience method for frequency conversion and resampling of regular
         time-series data.
@@ -152,6 +155,8 @@ class PandasObject(Picklable):
         label : {'right', 'left'}, default 'right'
             Which bin edge label to label bucket with
         as_index : see synonymous argument of groupby
+        loffset : timedelta
+            Adjust the resampled time labels
         """
         from pandas.tseries.resample import TimeGrouper
 
@@ -171,6 +176,9 @@ class PandasObject(Picklable):
             # upsampling
             result = self.reindex(grouper.binner[1:], method=fill_method)
 
+        if isinstance(loffset, (DateOffset, timedelta)):
+            if len(result.index) > 0:
+                result.index = result.index + loffset
         return result
 
     def first(self, offset):
diff --git a/pandas/core/index.py b/pandas/core/index.py
index b789f4b7b..b8efc5cfe 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -436,10 +436,7 @@ class Index(np.ndarray):
     __ge__ = _indexOp('__ge__')
 
     def __sub__(self, other):
-        if isinstance(other, Index):
-            return self.diff(other)
-        else:
-            return Index(self.view(np.ndarray) - other)
+        return self.diff(other)
 
     def __and__(self, other):
         return self.intersection(other)
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 9aaa8dcf5..86af120b7 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -229,13 +229,6 @@ class TestIndex(unittest.TestCase):
         self.assertEqual(shifted.freq, self.dateIndex.freq)
         self.assertEqual(shifted.freq, back.freq)
 
-        lead = self.dateIndex - timedelta(1)
-        back = lead - timedelta(-1)
-        self.assert_(tm.equalContents(self.dateIndex, back))
-        self.assertEqual(self.dateIndex.freq, back.freq)
-        self.assertEqual(lead.freq, back.freq)
-
-
     def test_append_multiple(self):
         index = Index(['a', 'b', 'c', 'd', 'e', 'f'])
 
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index bc11a69cb..1e7cadf2d 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -417,16 +417,7 @@ class DatetimeIndex(Int64Index):
             return self.union(other)
         elif isinstance(other, (datetools.DateOffset, timedelta)):
             new_values = self.astype('O') + other
-            return DatetimeIndex(new_values, tz=self.tz, freq=self.freq)
-        else:
-            return Index(self.view(np.ndarray) + other)
-
-    def __sub__(self, other):
-        if isinstance(other, Index):
-            return self.diff(other)
-        elif isinstance(other, (datetools.DateOffset, timedelta)):
-            new_values = self.astype('O') - other
-            return DatetimeIndex(new_values, tz=self.tz, freq=self.freq)
+            return DatetimeIndex(new_values, tz=self.tz)
         else:
             return Index(self.view(np.ndarray) + other)
 
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index c00cf242e..2451bbeed 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -1,11 +1,11 @@
-from datetime import datetime
+from datetime import datetime, timedelta
 
 import numpy as np
 
 from pandas import Series, DataFrame, isnull, notnull
 
 from pandas.tseries.index import date_range
-from pandas.tseries.offsets import Minute
+from pandas.tseries.offsets import Minute, bday
 from pandas.tseries.period import period_range
 from pandas.tseries.resample import DatetimeIndex, TimeGrouper
 import pandas.tseries.offsets as offsets
@@ -133,6 +133,26 @@ class TestResample(unittest.TestCase):
         self.assertEquals(result.irow(1), s['1/4/2005'])
         self.assertEquals(result.irow(5), s['1/10/2005'])
 
+    def test_resample_loffset(self):
+        rng = date_range('1/1/2000 00:00:00', '1/1/2000 00:13:00', freq='min')
+        s = Series(np.random.randn(14), index=rng)
+        result = s.resample('5min', how='mean', closed='right', label='right',
+                            loffset=timedelta(minutes=1))
+        idx = date_range('1/1/2000', periods=4, freq='5min')
+        expected = Series([s[0], s[1:6].mean(), s[6:11].mean(), s[11:].mean()],
+                          index=idx + timedelta(minutes=1))
+        assert_series_equal(result, expected)
+
+                # from daily
+        dti = DatetimeIndex(start=datetime(2005,1,1), end=datetime(2005,1,10),
+                            freq='D')
+        ser = Series(np.random.rand(len(dti)), dti)
+
+        # to weekly
+        result = ser.resample('w-sun', how='last')
+        expected = ser.resample('w-sun', how='last', loffset=-bday)
+        self.assertEqual(result.index[0] - bday, expected.index[0])
+
     def test_resample_upsample(self):
         # from daily
         dti = DatetimeIndex(start=datetime(2005,1,1), end=datetime(2005,1,10),
