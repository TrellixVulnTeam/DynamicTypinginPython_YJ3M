commit c5255da43d5b2366aa69a6da680d87b24a1d8f74
Author: Ka Wo Chen <kawoc@tepper.cmu.edu>
Date:   Thu Jan 14 23:33:39 2016 -0500

    fixed equals, added test cases, shortcut from_range if PY3

diff --git a/pandas/core/index.py b/pandas/core/index.py
index 0965472e9..9e323cc16 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -3990,19 +3990,24 @@ class RangeIndex(Int64Index):
                 '{0}(...) must be called with object coercible to a '
                 'range, {1} was passed'.format(cls.__name__, repr(data)))
 
+        if compat.PY3:
+            step = data.step
+            stop = data.stop
+            start = data.start
+        else:
         # seems we only have indexing ops to infer
         # rather than direct accessors
-        if len(data) > 1:
-            step = data[1] - data[0]
-            stop = data[-1] + step
-            start = data[0]
-        elif len(data):
-            start = data[0]
-            stop = data[0] + 1
-            step = 1
-        else:
-            start = stop = 0
-            step = 1
+            if len(data) > 1:
+                step = data[1] - data[0]
+                stop = data[-1] + step
+                start = data[0]
+            elif len(data):
+                start = data[0]
+                stop = data[0] + 1
+                step = 1
+            else:
+                start = stop = 0
+                step = 1
         return RangeIndex(start, stop, step, dtype=dtype, name=name, **kwargs)
 
     @classmethod
@@ -4153,11 +4158,14 @@ class RangeIndex(Int64Index):
         Determines if two Index objects contain the same elements.
         """
         if isinstance(other, RangeIndex):
-            return (len(self) == len(other) == 0
-                    or (self._start == other._start and
-                        self._stop == other._stop and
-                        self._step == other._step)
-                    )
+            ls = len(self)
+            lo = len(other)
+            return (ls == lo == 0 or
+                    ls == lo == 1 and
+                    self._start == other._start or
+                    ls == lo and
+                    self._start == other._start and
+                    self._step == other._step)
 
         return super(RangeIndex, self).equals(other)
 
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index fc6617a31..7721ddf90 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -3717,11 +3717,13 @@ class TestRangeIndex(Numeric, tm.TestCase):
 
     def test_equals(self):
 
-        if isinstance(self.index, RangeIndex):
-            raise nose.SkipTest("RangeIndex does not accept dtype=object")
-        same_values = Index(self.index, dtype=object)
-        self.assertTrue(self.index.equals(same_values))
-        self.assertTrue(same_values.equals(self.index))
+        equiv_pairs = [(RangeIndex(0, 9, 2), RangeIndex(0, 10, 2)),
+                       (RangeIndex(0), RangeIndex(1, -1, 3)),
+                       (RangeIndex(1, 2, 3), RangeIndex(1, 3, 4)),
+                       (RangeIndex(0, -9, -2), RangeIndex(0, -10, -2))]
+        for left, right in equiv_pairs:
+            self.assertTrue(left.equals(right))
+            self.assertTrue(right.equals(left))
 
     def test_logical_compat(self):
         idx = self.create_index()
