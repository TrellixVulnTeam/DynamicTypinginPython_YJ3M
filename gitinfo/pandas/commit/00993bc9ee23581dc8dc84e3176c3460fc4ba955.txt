commit 00993bc9ee23581dc8dc84e3176c3460fc4ba955
Author: Adam Klein <adamklein@gmail.com>
Date:   Sun Jan 29 15:29:04 2012 -0500

    BUG: inconsistency in .ix with integer label and float index

diff --git a/RELEASE.rst b/RELEASE.rst
index 0182c7899..523c5e4fc 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -245,6 +245,8 @@ pandas 0.7.0
   - Fix performance regression in HDFStore loading when DataFrame or Panel
     stored in table format with datetimes
   - Raise Exception in DateRange when offset with n=0 is passed (GH #683)
+  - Fix get/set inconsistency with .ix property and integer location but
+    non-integer index (GH #707)
 
 Thanks
 ------
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 289a02b86..41fd48e12 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -222,13 +222,16 @@ class _NDFrameIndexer(object):
         - No, prefer label-based indexing
         """
         labels = self.obj._get_axis(axis)
+        is_int_index = _is_integer_index(labels)
+
+        if com.is_integer(obj) and not is_int_index:
+            return obj
 
         try:
             return labels.get_loc(obj)
         except (KeyError, TypeError):
             pass
 
-        is_int_index = _is_integer_index(labels)
         if isinstance(obj, slice):
 
             int_slice = _is_index_slice(obj)
@@ -272,8 +275,6 @@ class _NDFrameIndexer(object):
 
                 return indexer
         else:
-            if com.is_integer(obj) and not is_int_index:
-                return obj
             return labels.get_loc(obj)
 
     def _tuplify(self, loc):
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 05d96824f..a4155b163 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -457,6 +457,16 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         self.assertRaises(KeyError, s.__setitem__, 1, 5)
         self.assertRaises(KeyError, s.ix.__setitem__, 1, 5)
 
+    def test_setitem_float_labels(self):
+        # note labels are floats
+        s = Series(['a','b','c'],index=[0,0.5,1])
+        tmp = s.copy()
+
+        s.ix[1] = 'zoo'
+        tmp.values[1] = 'zoo'
+
+        assert_series_equal(s, tmp)
+
     def test_slice(self):
         numSlice = self.series[10:20]
         numSliceEnd = self.series[-10:]
