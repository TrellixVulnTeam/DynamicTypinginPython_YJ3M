commit a4a18a9a694ba2641ec3ba98afc20615b2d39ad7
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Thu Jun 20 17:51:18 2019 -0700

    Assorted cleanups (#26975)

diff --git a/pandas/core/internals/managers.py b/pandas/core/internals/managers.py
index 907498c7f..7fe34279c 100644
--- a/pandas/core/internals/managers.py
+++ b/pandas/core/internals/managers.py
@@ -23,7 +23,6 @@ from pandas.core.dtypes.generic import ABCExtensionArray, ABCSeries
 from pandas.core.dtypes.missing import isna
 
 import pandas.core.algorithms as algos
-from pandas.core.arrays.sparse import _maybe_to_sparse
 from pandas.core.base import PandasObject
 from pandas.core.index import Index, MultiIndex, ensure_index
 from pandas.core.indexing import maybe_convert_indices
@@ -1727,10 +1726,6 @@ def form_blocks(arrays, names, axes):
         object_blocks = _simple_blockify(items_dict['ObjectBlock'], np.object_)
         blocks.extend(object_blocks)
 
-    if len(items_dict['SparseBlock']) > 0:
-        sparse_blocks = _sparse_blockify(items_dict['SparseBlock'])
-        blocks.extend(sparse_blocks)
-
     if len(items_dict['CategoricalBlock']) > 0:
         cat_blocks = [make_block(array, klass=CategoricalBlock, placement=[i])
                       for i, _, array in items_dict['CategoricalBlock']]
@@ -1797,20 +1792,6 @@ def _multi_blockify(tuples, dtype=None):
     return new_blocks
 
 
-def _sparse_blockify(tuples, dtype=None):
-    """ return an array of blocks that potentially have different dtypes (and
-    are sparse)
-    """
-
-    new_blocks = []
-    for i, names, array in tuples:
-        array = _maybe_to_sparse(array)
-        block = make_block(array, placement=[i])
-        new_blocks.append(block)
-
-    return new_blocks
-
-
 def _stack_arrays(tuples, dtype):
 
     # fml
diff --git a/pandas/io/formats/format.py b/pandas/io/formats/format.py
index 8655fb05f..b2ef45b15 100644
--- a/pandas/io/formats/format.py
+++ b/pandas/io/formats/format.py
@@ -1567,7 +1567,7 @@ class EngFormatter:
 
         formatted = format_str.format(mant=mant, prefix=prefix)
 
-        return formatted  # .strip()
+        return formatted
 
 
 def set_eng_float_format(accuracy=3, use_eng_prefix=False):
diff --git a/pandas/io/sql.py b/pandas/io/sql.py
index 1e3fe2ade..6cb57077b 100644
--- a/pandas/io/sql.py
+++ b/pandas/io/sql.py
@@ -623,7 +623,7 @@ class SQLTable(PandasObject):
                     # GH 9086: Ensure we return datetimes with timezone info
                     # Need to return 2-D data; DatetimeIndex is 1D
                     d = b.values.to_pydatetime()
-                    d = np.expand_dims(d, axis=0)
+                    d = np.atleast_2d(d)
                 else:
                     # convert to microsecond resolution for datetime.datetime
                     d = b.values.astype('M8[us]').astype(object)
diff --git a/pandas/tests/frame/test_constructors.py b/pandas/tests/frame/test_constructors.py
index 68017786e..7dc74961a 100644
--- a/pandas/tests/frame/test_constructors.py
+++ b/pandas/tests/frame/test_constructors.py
@@ -5,6 +5,7 @@ import itertools
 
 import numpy as np
 import numpy.ma as ma
+import numpy.ma.mrecords as mrecords
 import pytest
 
 from pandas.compat import PY36, is_platform_little_endian
@@ -839,7 +840,7 @@ class TestDataFrameConstructors(TestData):
         data = np.ma.array(
             np.ma.zeros(5, dtype=[('date', '<f8'), ('price', '<f8')]),
             mask=[False] * 5)
-        data = data.view(ma.mrecords.mrecarray)
+        data = data.view(mrecords.mrecarray)
         result = pd.DataFrame(data, dtype=int)
         expected = pd.DataFrame(np.zeros((5, 2), dtype=int),
                                 columns=['date', 'price'])
@@ -868,7 +869,7 @@ class TestDataFrameConstructors(TestData):
         # call assert_frame_equal for all selections of 3 arrays
         for comb in itertools.combinations(arrays, 3):
             names, data = zip(*comb)
-            mrecs = ma.mrecords.fromarrays(data, names=names)
+            mrecs = mrecords.fromarrays(data, names=names)
 
             # fill the comb
             comb = {k: (v.filled() if hasattr(v, 'filled') else v)
diff --git a/pandas/tests/frame/test_missing.py b/pandas/tests/frame/test_missing.py
index ee19365ea..a1dbeba36 100644
--- a/pandas/tests/frame/test_missing.py
+++ b/pandas/tests/frame/test_missing.py
@@ -241,14 +241,15 @@ class TestDataFrameMissingData:
         result = mf.fillna(method='pad')
         _check_mixed_float(result, dtype=dict(C=None))
 
-    def test_fillna_other(self):
+    def test_fillna_empty(self):
         # empty frame (GH #2778)
         df = DataFrame(columns=['x'])
         for m in ['pad', 'backfill']:
             df.x.fillna(method=m, inplace=True)
             df.x.fillna(method=m)
 
-        # with different dtype (GH3386)
+    def test_fillna_different_dtype(self):
+        # with different dtype (GH#3386)
         df = DataFrame([['a', 'a', np.nan, 'a'], [
                        'b', 'b', np.nan, 'b'], ['c', 'c', np.nan, 'c']])
 
@@ -261,6 +262,7 @@ class TestDataFrameMissingData:
         df.fillna({2: 'foo'}, inplace=True)
         assert_frame_equal(df, expected)
 
+    def test_fillna_limit_and_value(self):
         # limit and value
         df = DataFrame(np.random.randn(10, 3))
         df.iloc[2:7, 0] = np.nan
@@ -272,8 +274,9 @@ class TestDataFrameMissingData:
         result = df.fillna(999, limit=1)
         assert_frame_equal(result, expected)
 
+    def test_fillna_datelike(self):
         # with datelike
-        # GH 6344
+        # GH#6344
         df = DataFrame({
             'Date': [pd.NaT, Timestamp("2014-1-1")],
             'Date2': [Timestamp("2013-1-1"), pd.NaT]
@@ -285,8 +288,9 @@ class TestDataFrameMissingData:
         result = df.fillna(value={'Date': df['Date2']})
         assert_frame_equal(result, expected)
 
+    def test_fillna_tzaware(self):
         # with timezone
-        # GH 15855
+        # GH#15855
         df = pd.DataFrame({'A': [pd.Timestamp('2012-11-11 00:00:00+01:00'),
                                  pd.NaT]})
         exp = pd.DataFrame({'A': [pd.Timestamp('2012-11-11 00:00:00+01:00'),
@@ -299,8 +303,9 @@ class TestDataFrameMissingData:
                                   pd.Timestamp('2012-11-11 00:00:00+01:00')]})
         assert_frame_equal(df.fillna(method='bfill'), exp)
 
+    def test_fillna_tzaware_different_column(self):
         # with timezone in another column
-        # GH 15522
+        # GH#15522
         df = pd.DataFrame({'A': pd.date_range('20130101', periods=4,
                                               tz='US/Eastern'),
                            'B': [1, 2, np.nan, np.nan]})
