commit b5c93dee130eeb6a4a7b759ab72efec1e1930c23
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Jun 10 12:55:03 2011 -0400

    putting SparseWidePanel through more unit tests

diff --git a/pandas/core/tests/test_panel.py b/pandas/core/tests/test_panel.py
index a57c0d85b..586721436 100644
--- a/pandas/core/tests/test_panel.py
+++ b/pandas/core/tests/test_panel.py
@@ -1,4 +1,4 @@
-# pylint: disable=W0612
+# pylint: disable=W0612,E1101
 
 
 from datetime import datetime
@@ -24,25 +24,28 @@ import pandas.util.testing as common
 class PanelTests(object):
     panel = None
 
-    def test_iter(self):
-        common.equalContents(list(self.panel), self.panel.items)
-
     def test_pickle(self):
         import cPickle
-
         pickled = cPickle.dumps(self.panel)
         unpickled = cPickle.loads(pickled)
-
         assert_frame_equal(unpickled['ItemA'], self.panel['ItemA'])
 
-    def test_repr(self):
-        foo = repr(self.panel)
-
     def test_set_values(self):
         self.panel.values = np.array(self.panel.values, order='F')
-
         assert(self.panel.values.flags.contiguous)
 
+    def test_cumsum(self):
+        cumsum = self.panel.cumsum()
+        assert_frame_equal(cumsum['ItemA'], self.panel['ItemA'].cumsum())
+
+class SafeForLongAndSparse(object):
+
+    def test_repr(self):
+        foo = repr(self.panel)
+
+    def test_iter(self):
+        common.equalContents(list(self.panel), self.panel.items)
+
     def _check_statistic(self, frame, name, alternative):
         f = getattr(frame, name)
 
@@ -154,12 +157,31 @@ class PanelTests(object):
 
         self._check_statistic(self.panel, 'skew', f)
 
-    def test_cumsum(self):
-        cumsum = self.panel.cumsum()
 
-        assert_frame_equal(cumsum['ItemA'], self.panel['ItemA'].cumsum())
+class SafeForSparse(object):
+
+    def test_get_axis(self):
+        assert(self.panel._get_axis(0) is self.panel.items)
+        assert(self.panel._get_axis(1) is self.panel.major_axis)
+        assert(self.panel._get_axis(2) is self.panel.minor_axis)
 
-class SafeForSparseTests(object):
+    def test_get_axis_number(self):
+        self.assertEqual(self.panel._get_axis_number('items'), 0)
+        self.assertEqual(self.panel._get_axis_number('major'), 1)
+        self.assertEqual(self.panel._get_axis_number('minor'), 2)
+
+    def test_get_axis_name(self):
+        self.assertEqual(self.panel._get_axis_name(0), 'items')
+        self.assertEqual(self.panel._get_axis_name(1), 'major_axis')
+        self.assertEqual(self.panel._get_axis_name(2), 'minor_axis')
+
+    def test_get_plane_axes(self):
+        # what to do here?
+
+        index, columns = self.panel._get_plane_axes('items')
+        index, columns = self.panel._get_plane_axes('major_axis')
+        index, columns = self.panel._get_plane_axes('minor_axis')
+        index, columns = self.panel._get_plane_axes(0)
 
     def test_truncate(self):
         dates = self.panel.major_axis
@@ -182,7 +204,40 @@ class SafeForSparseTests(object):
 
         # XXX test other axes
 
-class TestWidePanel(unittest.TestCase, PanelTests, SafeForSparseTests):
+    def test_arith(self):
+        self._test_op(self.panel, operator.add)
+        self._test_op(self.panel, operator.sub)
+        self._test_op(self.panel, operator.mul)
+        self._test_op(self.panel, operator.div)
+        self._test_op(self.panel, operator.pow)
+
+        self._test_op(self.panel, lambda x, y: y + x)
+        self._test_op(self.panel, lambda x, y: y - x)
+        self._test_op(self.panel, lambda x, y: y * x)
+        self._test_op(self.panel, lambda x, y: y / x)
+        self._test_op(self.panel, lambda x, y: y ** x)
+
+        self.assertRaises(Exception, self.panel.__add__, self.panel['ItemA'])
+
+    @staticmethod
+    def _test_op(panel, op):
+        result = op(panel, 1)
+        assert_frame_equal(result['ItemA'], op(panel['ItemA'], 1))
+
+    def test_keys(self):
+        common.equalContents(self.panel.keys(), self.panel.items)
+
+    def test_iteritems(self):
+        # just test that it works
+        for k, v in self.panel.iteritems():
+            pass
+
+        self.assertEqual(len(list(self.panel.iteritems())),
+                         len(self.panel.items))
+
+class TestWidePanel(unittest.TestCase, PanelTests,
+                    SafeForLongAndSparse,
+                    SafeForSparse):
 
     def setUp(self):
         self.panel = common.makeWidePanel()
@@ -193,49 +248,6 @@ class TestWidePanel(unittest.TestCase, PanelTests, SafeForSparseTests):
         values = self.panel.values
         self.panel.values = values
 
-    def test_get_axis(self):
-        assert(self.panel._get_axis(0) is self.panel.items)
-        assert(self.panel._get_axis(1) is self.panel.major_axis)
-        assert(self.panel._get_axis(2) is self.panel.minor_axis)
-
-    def test_get_axis_number(self):
-        self.assertEqual(self.panel._get_axis_number('items'), 0)
-        self.assertEqual(self.panel._get_axis_number('major'), 1)
-        self.assertEqual(self.panel._get_axis_number('minor'), 2)
-
-    def test_get_axis_name(self):
-        self.assertEqual(self.panel._get_axis_name(0), 'items')
-        self.assertEqual(self.panel._get_axis_name(1), 'major_axis')
-        self.assertEqual(self.panel._get_axis_name(2), 'minor_axis')
-
-    def test_get_plane_axes(self):
-        # what to do here?
-
-        index, columns = self.panel._get_plane_axes('items')
-        index, columns = self.panel._get_plane_axes('major_axis')
-        index, columns = self.panel._get_plane_axes('minor_axis')
-
-        index, columns = self.panel._get_plane_axes(0)
-
-    def test_arith(self):
-        def test_op(panel, op):
-            result = op(panel, 1)
-            assert_frame_equal(result['ItemA'], op(panel['ItemA'], 1))
-
-        test_op(self.panel, operator.add)
-        test_op(self.panel, operator.sub)
-        test_op(self.panel, operator.mul)
-        test_op(self.panel, operator.div)
-        test_op(self.panel, operator.pow)
-
-        test_op(self.panel, lambda x, y: y + x)
-        test_op(self.panel, lambda x, y: y - x)
-        test_op(self.panel, lambda x, y: y * x)
-        test_op(self.panel, lambda x, y: y / x)
-        test_op(self.panel, lambda x, y: y ** x)
-
-        self.assertRaises(Exception, self.panel.__add__, self.panel['ItemA'])
-
     def test_fromDict(self):
         itema = self.panel['ItemA']
         itemb = self.panel['ItemB']
@@ -255,17 +267,6 @@ class TestWidePanel(unittest.TestCase, PanelTests, SafeForSparseTests):
         wp = WidePanel.fromDict(d, intersect=True)
         self.assert_(wp.major_axis.equals(itemb.index[5:]))
 
-    def test_keys(self):
-        common.equalContents(self.panel.keys(), self.panel.items)
-
-    def test_iteritems(self):
-        # just test that it works
-        for k, v in self.panel.iteritems():
-            pass
-
-        self.assertEqual(len(list(self.panel.iteritems())),
-                         len(self.panel.items))
-
     def test_values(self):
         self.assertRaises(Exception, WidePanel, np.random.randn(5, 5, 5),
                           range(5), range(5), range(4))
diff --git a/pandas/core/tests/test_sparse.py b/pandas/core/tests/test_sparse.py
index 943272e26..3bceb4bf2 100644
--- a/pandas/core/tests/test_sparse.py
+++ b/pandas/core/tests/test_sparse.py
@@ -25,6 +25,9 @@ from pandas.core.sparse import (IntIndex, BlockIndex,
                                 SparseSeries, SparseDataFrame,
                                 SparseWidePanel)
 
+import test_panel
+
+
 """
 Testing TODO
 
@@ -891,9 +894,9 @@ def panel_data3():
         'd' : [nan, 0, 1, nan, 2, 3, 4, 5, 6, nan]
         }, index=index)
 
-import test_panel
-
-class TestSparseWidePanel(TestCase, test_panel.SafeForSparseTests):
+class TestSparseWidePanel(TestCase,
+                          test_panel.SafeForLongAndSparse,
+                          test_panel.SafeForSparse):
 
     def setUp(self):
         self.data_dict = {
@@ -904,6 +907,12 @@ class TestSparseWidePanel(TestCase, test_panel.SafeForSparseTests):
         }
         self.panel = SparseWidePanel(self.data_dict)
 
+    @staticmethod
+    def _test_op(panel, op):
+        # arithmetic tests
+        result = op(panel, 1)
+        assert_sp_frame_equal(result['ItemA'], op(panel['ItemA'], 1))
+
     def test_constructor(self):
         self.assertRaises(Exception, SparseWidePanel, self.data_dict,
                           items=['Item0', 'ItemA', 'ItemB'])
