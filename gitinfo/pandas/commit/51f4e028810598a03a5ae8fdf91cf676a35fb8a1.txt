commit 51f4e028810598a03a5ae8fdf91cf676a35fb8a1
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Nov 22 11:22:02 2011 -0500

    ENH: enable call delevel with standard index, GH #393

diff --git a/RELEASE.rst b/RELEASE.rst
index f0a79b38b..d67677da9 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -99,6 +99,7 @@ pandas 0.5.1
   - Improve performance of `MultiIndex.from_tuples`
   - Can pass multiple levels to `stack` and `unstack` (GH #370)
   - Can pass multiple values columns to `pivot_table` (GH #381)
+  - Can call `DataFrame.delevel` with standard Index with name set (GH #393)
 
 **Bug fixes**
 
@@ -137,6 +138,7 @@ pandas 0.5.1
   - Fixed repr exception when Series name is a tuple
   - Always return DateRange from `asfreq` (GH #390)
   - Pass level names to `swaplavel` (GH #379)
+  - Don't lose index names in `MultiIndex.droplevel` (GH #394)
 
 Thanks
 ------
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 55dbabd37..da4125a9f 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2053,21 +2053,20 @@ class DataFrame(NDFrame):
         -------
         deleveled : DataFrame
         """
-        if not isinstance(self.index, MultiIndex):
-            raise Exception('this DataFrame does not have a multi-level index')
-
         new_obj = self.copy()
-        names = self.index.names
-
-        zipped = zip(self.index.levels, self.index.labels)
-        for i, (lev, lab) in reversed(list(enumerate(zipped))):
-            col_name = names[i]
-            if col_name is None:
-                col_name = 'level_%d' % i
-            new_obj.insert(0, col_name, np.asarray(lev).take(lab))
-
+        if isinstance(self.index, MultiIndex):
+            names = self.index.names
+            zipped = zip(self.index.levels, self.index.labels)
+            for i, (lev, lab) in reversed(list(enumerate(zipped))):
+                col_name = names[i]
+                if col_name is None:
+                    col_name = 'level_%d' % i
+                new_obj.insert(0, col_name, np.asarray(lev).take(lab))
+        else:
+            if self.index.name is None:
+                raise Exception('Must have name set')
+            new_obj.insert(0, self.index.name, self.index.values)
         new_obj.index = np.arange(len(new_obj))
-
         return new_obj
 
     #----------------------------------------------------------------------
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index fd2579ff4..446145946 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3313,15 +3313,27 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
     def test_delevel(self):
         stacked = self.frame.stack()[::2]
         stacked = DataFrame({'foo' : stacked, 'bar' : stacked})
-        deleveled = stacked.delevel()
 
+        names = ['first', 'second']
+        stacked.index.names = names
+        deleveled = stacked.delevel()
         for i, (lev, lab) in enumerate(zip(stacked.index.levels,
                                            stacked.index.labels)):
             values = lev.take(lab)
-            assert_almost_equal(values, deleveled['level_%d' % i])
+            name = names[i]
+            assert_almost_equal(values, deleveled[name])
 
+        # exception if no name
         self.assertRaises(Exception, self.frame.delevel)
 
+        # but this is ok
+        self.frame.index.name = 'index'
+        deleveled = self.frame.delevel()
+        self.assert_(np.array_equal(deleveled['index'],
+                                    self.frame.index.values))
+        self.assert_(np.array_equal(deleveled.index,
+                                    np.arange(len(deleveled))))
+
     #----------------------------------------------------------------------
     # Tests to cope with refactored internals
 
