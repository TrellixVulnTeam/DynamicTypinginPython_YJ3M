commit 3c6f7b93b2d0c1a86600fd3dfc1bb470d88d59e4
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Nov 18 17:04:09 2012 -0500

    BUG: datetime64 boxing when retrieving DataFrame cross-section. close #2272

diff --git a/RELEASE.rst b/RELEASE.rst
index bc4bcee22..acf3a3fe5 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -47,6 +47,8 @@ pandas 0.10.0
   - Fix major performance regression in DataFrame.iteritems (#
   - Fixes bug when negative period passed to Series/DataFrame.diff (#2266)
   - Escape tabs in console output to avoid alignment issues (#2038)
+  - Properly box datetime64 values when retrieving cross-section from
+    mixed-dtype DataFrame (#2272)
 
 pandas 0.9.1
 ============
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index fdec82caa..894d43f98 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -32,6 +32,9 @@ class Block(object):
         self.items = _ensure_index(items)
         self.ref_items = _ensure_index(ref_items)
 
+    def _gi(self, arg):
+        return self.values[arg]
+
     @property
     def ref_locs(self):
         if self._ref_locs is None:
@@ -229,20 +232,20 @@ class Block(object):
         if not isinstance(to_replace, (list, np.ndarray)):
             if self._can_hold_element(to_replace):
                 to_replace = self._try_cast(to_replace)
-                np.putmask(new_values, com.mask_missing(new_values, to_replace),
-                           value)
+                msk = com.mask_missing(new_values, to_replace)
+                np.putmask(new_values, msk, value)
         else:
             try:
                 to_replace = np.array(to_replace, dtype=self.dtype)
-                np.putmask(new_values, com.mask_missing(new_values, to_replace),
-                           value)
-            except:
+                msk = com.mask_missing(new_values, to_replace)
+                np.putmask(new_values, msk, value)
+            except Exception:
                 to_replace = np.array(to_replace, dtype=object)
                 for r in to_replace:
                     if self._can_hold_element(r):
                         r = self._try_cast(r)
-                np.putmask(new_values, com.mask_missing(new_values, to_replace),
-                           value)
+                msk = com.mask_missing(new_values, to_replace)
+                np.putmask(new_values, msk, value)
 
         if inplace:
             return self
@@ -312,8 +315,6 @@ def _mask_missing(array, missing_values):
             mask |= array == missing_values
     return mask
 
-#-------------------------------------------------------------------------------
-# Is this even possible?
 
 class FloatBlock(Block):
     _can_hold_na = True
@@ -332,6 +333,7 @@ class FloatBlock(Block):
         # unnecessarily
         return issubclass(value.dtype.type, np.floating)
 
+
 class ComplexBlock(Block):
     _can_hold_na = True
 
@@ -347,6 +349,7 @@ class ComplexBlock(Block):
     def should_store(self, value):
         return issubclass(value.dtype.type, np.complexfloating)
 
+
 class IntBlock(Block):
     _can_hold_na = False
 
@@ -362,6 +365,7 @@ class IntBlock(Block):
     def should_store(self, value):
         return com.is_integer_dtype(value)
 
+
 class BoolBlock(Block):
     _can_hold_na = False
 
@@ -377,6 +381,7 @@ class BoolBlock(Block):
     def should_store(self, value):
         return issubclass(value.dtype.type, np.bool_)
 
+
 class ObjectBlock(Block):
     _can_hold_na = True
 
@@ -402,6 +407,9 @@ class DatetimeBlock(Block):
 
         Block.__init__(self, values, items, ref_items, ndim=ndim)
 
+    def _gi(self, arg):
+        return lib.Timestamp(self.values[arg])
+
     def _can_hold_element(self, element):
         return com.is_integer(element) or isinstance(element, datetime)
 
@@ -807,10 +815,9 @@ class BlockManager(object):
         n = len(items)
         result = np.empty(n, dtype=dtype)
         for blk in self.blocks:
-            values = blk.values
             for j, item in enumerate(blk.items):
                 i = items.get_loc(item)
-                result[i] = values[j, loc]
+                result[i] = blk._gi((j, loc))
 
         return result
 
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 3a4936862..10bb75bfb 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -895,6 +895,13 @@ class TestSeriesFormatting(unittest.TestCase):
         #check this works
         #GH2146
 
+    def test_mixed_datetime64(self):
+        df = DataFrame({'A': [1, 2],
+                        'B': ['2012-01-01', '2012-01-02']})
+        df['B'] = pd.to_datetime(df.B)
+
+        result = repr(df.ix[0])
+        self.assertTrue('2012-01-01' in result)
 
 class TestEngFormatter(unittest.TestCase):
 
