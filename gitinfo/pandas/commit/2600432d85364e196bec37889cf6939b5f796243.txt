commit 2600432d85364e196bec37889cf6939b5f796243
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Nov 25 00:19:23 2012 -0500

    BUG: fix pernicious memory usage problem in SparseDataFrame constructor. close #2350

diff --git a/pandas/sparse/frame.py b/pandas/sparse/frame.py
index 58d3a90e9..45d6a2908 100644
--- a/pandas/sparse/frame.py
+++ b/pandas/sparse/frame.py
@@ -87,6 +87,8 @@ class SparseDataFrame(DataFrame):
 
             if index is None:
                 index = Index([])
+            else:
+                index = _ensure_index(index)
 
             if columns is None:
                 columns = Index([])
diff --git a/pandas/sparse/series.py b/pandas/sparse/series.py
index 655694a8a..1cb020485 100644
--- a/pandas/sparse/series.py
+++ b/pandas/sparse/series.py
@@ -14,7 +14,7 @@ from pandas.core.common import isnull
 from pandas.core.index import Index, _ensure_index
 from pandas.core.series import Series, TimeSeries, _maybe_match_name
 from pandas.core.frame import DataFrame
-import pandas.core.common as common
+import pandas.core.common as com
 import pandas.core.datetools as datetools
 
 from pandas.util import py3compat
@@ -135,7 +135,7 @@ class SparseSeries(SparseArray, Series):
                 values.fill(data)
 
         if index is None:
-            index = Index(np.arange(sparse_index.length))
+            index = com._default_index(sparse_index.length)
         index = _ensure_index(index)
 
         # Create array, do *not* copy data by default
@@ -421,7 +421,7 @@ to sparse
 
         new_index, fill_vec = self.index.reindex(index, method=method,
                                                  limit=limit)
-        new_values = common.take_1d(self.values, fill_vec)
+        new_values = com.take_1d(self.values, fill_vec)
         return SparseSeries(new_values, index=new_index,
                             fill_value=self.fill_value, name=self.name)
 
diff --git a/pandas/sparse/tests/test_sparse.py b/pandas/sparse/tests/test_sparse.py
index addd3e2d5..5abe6bbd4 100644
--- a/pandas/sparse/tests/test_sparse.py
+++ b/pandas/sparse/tests/test_sparse.py
@@ -801,6 +801,11 @@ class TestSparseDataFrame(TestCase, test_frame.SafeForSparse):
         sp = SparseDataFrame(dense)
         assert_sp_frame_equal(sp, self.frame)
 
+    def test_constructor_convert_index_once(self):
+        arr = np.array([1.5, 2.5, 3.5])
+        sdf = SparseDataFrame(columns=range(4), index=arr)
+        self.assertTrue(sdf[0].index is sdf[1].index)
+
     def test_array_interface(self):
         res = np.sqrt(self.frame)
         dres = np.sqrt(self.frame.to_dense())
diff --git a/vb_suite/sparse.py b/vb_suite/sparse.py
index 46a7f48f7..24f70d284 100644
--- a/vb_suite/sparse.py
+++ b/vb_suite/sparse.py
@@ -33,7 +33,7 @@ setup = common_setup + """
 from pandas.core.sparse import SparseDataFrame
 """
 
-stmt = "SparseDataFrame(columns=np.arange(100), index=np.arange(1e4))"
+stmt = "SparseDataFrame(columns=np.arange(100), index=np.arange(1000))"
 
 sparse_constructor = Benchmark(stmt, setup, name="sparse_frame_constructor",
                                start_date=datetime(2012, 6, 1))
