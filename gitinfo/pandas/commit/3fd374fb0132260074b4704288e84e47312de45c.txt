commit 3fd374fb0132260074b4704288e84e47312de45c
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Apr 16 20:17:18 2010 +0000

    array interface to DataFrame classes
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@158 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 6ae596ce3..52706888a 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -274,6 +274,12 @@ class DataFrame(Picklable, Groupable):
 #-------------------------------------------------------------------------------
 # Magic methods
 
+    def __array__(self):
+        return self.values
+
+    def __array_wrap__(self, result):
+        return DataFrame(result, index=self.index, columns=self.columns)
+
     def __nonzero__(self):
         return len(self._series) > 0 and len(self.index) > 0
 
@@ -1322,6 +1328,8 @@ class DataFrame(Picklable, Groupable):
                                 '*on* specified')
             return self._join_on(other, on)
         else:
+            if how is None:
+                how = 'left'
             return self._join_index(other, how)
 
     merge = join
@@ -1378,12 +1386,6 @@ class DataFrame(Picklable, Groupable):
 
         return self._constructor(result_series, index=join_index)
 
-    def outerJoin(self, frame):
-        return self.join(frame, how='outer')
-
-    def leftJoin(self, frame):
-        return self.join(frame, how='left')
-
     def plot(self, kind='line', **kwds): # pragma: no cover
         """
         Plot the DataFrame's series with the index on the x-axis using
@@ -1404,8 +1406,7 @@ class DataFrame(Picklable, Groupable):
         from pylab import plot
 
         for col in _try_sort(self.columns):
-            s = self[col]
-            plot(s.index, s, label=col)
+            plot(self.index, self[col].values(), label=col)
 
     def _get_agg_axis(self, axis_num):
         if axis_num == 0:
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index cbbb4aa5b..17b09d8c8 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -155,7 +155,7 @@ class DataMatrix(DataFrame):
                                          index=index,
                                          columns=objectColumns)
                 if isinstance(objects, DataMatrix):
-                    objects = objects.leftJoin(new_objects)
+                    objects = objects.join(new_objects, how='left')
                 else:
                     objects = new_objects
 
@@ -211,6 +211,12 @@ class DataMatrix(DataFrame):
     # Because of DataFrame property
     values = None
 
+    def __array__(self):
+        return self.values
+
+    def __array_wrap__(self, result):
+        return DataMatrix(result, index=self.index, columns=self.columns)
+
 #-------------------------------------------------------------------------------
 # DataMatrix-specific implementation of private API
 
@@ -242,7 +248,7 @@ class DataMatrix(DataFrame):
 
         filledFrame = DataFrame(data=seriesDict, index=self.index)
 
-        return self.leftJoin(filledFrame)
+        return self.join(filledFrame, how='left')
 
     def _reindex_index(self, index, method):
         if index is self.index:
diff --git a/pandas/core/series.py b/pandas/core/series.py
index cff289a86..66622203c 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -114,7 +114,11 @@ class Series(np.ndarray, Picklable, Groupable):
         subarr = np.array(data, dtype=dtype, copy=copy)
 
         if subarr.ndim == 0:
-            return subarr.item()
+            if isinstance(data, list):
+                subarr = np.array(data, dtype=object)
+            else:
+                return subarr.item()
+
         elif subarr.ndim > 1:
             raise Exception('Data must be 1-dimensional')
 
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index b3dc6cef5..f33b8a567 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -1038,23 +1038,25 @@ class TestDataFrame(unittest.TestCase):
         f = self.frame.reindex(columns=['A', 'B'])[:10]
         f2 = self.frame.reindex(columns=['C', 'D'])
 
-        joined = f.leftJoin(f2)
+        joined = f.join(f2, how='left')
         self.assert_(f.index.equals(joined.index))
         self.assertEqual(len(joined.cols()), 4)
 
         # corner case
-        self.assertRaises(Exception, self.frame.leftJoin, self.frame)
+        self.assertRaises(Exception, self.frame.join, self.frame,
+                          how='left')
 
     def test_outerJoin(self):
         f = self.frame.reindex(columns=['A', 'B'])[:10]
         f2 = self.frame.reindex(columns=['C', 'D'])
 
-        joined = f.outerJoin(f2)
+        joined = f.join(f2, how='outer')
         self.assert_(common.equalContents(self.frame.index, joined.index))
         self.assertEqual(len(joined.cols()), 4)
 
         # corner case
-        self.assertRaises(Exception, self.frame.outerJoin, self.frame)
+        self.assertRaises(Exception, self.frame.join, self.frame,
+                          how='outer')
 
     def test_join(self):
         index, data = common.getMixedTypeDict()
