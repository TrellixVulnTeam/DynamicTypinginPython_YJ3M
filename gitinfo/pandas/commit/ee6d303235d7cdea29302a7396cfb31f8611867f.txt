commit ee6d303235d7cdea29302a7396cfb31f8611867f
Author: Chang She <chang@lambdafoundry.com>
Date:   Thu May 24 22:18:59 2012 -0400

    TST: more release test coverage and minor fixes

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 01b46afe4..e8216349b 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -233,10 +233,11 @@ def _flex_comp_method(op, name, default_axis='columns'):
             if isinstance(y, np.ndarray):
                 yrav = y.ravel()
                 mask = notnull(xrav) & notnull(yrav)
-                result[mask] = op(xrav[mask], yrav[mask])
+                result[mask] = op(np.array(list(xrav[mask])),
+                                  np.array(list(yrav[mask])))
             else:
                 mask = notnull(xrav)
-                result[mask] = op(xrav[mask], y)
+                result[mask] = op(np.array(list(xrav[mask])), y)
 
             if op == operator.ne:
                 np.putmask(result, -mask, True)
@@ -252,10 +253,7 @@ def _flex_comp_method(op, name, default_axis='columns'):
             return self._flex_compare_frame(other, na_op, level)
 
         elif isinstance(other, Series):
-            try:
-                return self._combine_series(other, na_op, None, axis, level)
-            except Exception:
-                return self._combine_series_infer(other, na_op)
+            return self._combine_series(other, na_op, None, axis, level)
 
         elif isinstance(other, (list, tuple)):
             if axis is not None and self._get_axis_name(axis) == 'index':
@@ -263,10 +261,7 @@ def _flex_comp_method(op, name, default_axis='columns'):
             else:
                 casted = Series(other, index=self.columns)
 
-            try:
-                return self._combine_series(casted, na_op, None, axis, level)
-            except Exception:
-                return self._combine_series_infer(casted, na_op)
+            return self._combine_series(casted, na_op, None, axis, level)
 
         elif isinstance(other, np.ndarray):
             if other.ndim == 1:
@@ -275,15 +270,12 @@ def _flex_comp_method(op, name, default_axis='columns'):
                 else:
                     casted = Series(other, index=self.columns)
 
-                try:
-                    return self._combine_series(casted, na_op, None, axis,
-                                                level)
-                except Exception:
-                    return self._combine_series_infer(casted, na_op)
+                return self._combine_series(casted, na_op, None, axis, level)
 
             elif other.ndim == 2:
                 casted = DataFrame(other, index=self.index,
                                    columns=self.columns)
+
                 return self._flex_compare_frame(casted, na_op, level)
 
             else:  # pragma: no cover
diff --git a/pandas/core/series.py b/pandas/core/series.py
index b530039bf..9576a55f0 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2617,7 +2617,7 @@ def _sanitize_array(data, index, dtype=None, copy=False,
         except (ValueError, TypeError):
             if dtype is not None and raise_cast_failure:
                 raise
-            else:  # pragma: no cover
+            else: # pragma: no cover
                 subarr = np.array(data, dtype=object, copy=copy)
         return subarr
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 136b58799..751b63879 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2719,7 +2719,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         assert_frame_equal(df.le(np.nan), df <= np.nan)
 
         # complex
-        arr = np.array([np.nan, 1j, 6, None])
+        arr = np.array([np.nan, 1, 6, np.nan])
         arr2 = np.array([2j, np.nan, 7, None])
         df = DataFrame({'a' : arr})
         df2 = DataFrame({'a' : arr2})
@@ -2728,7 +2728,10 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         rs = df.ne(df2)
         self.assert_(rs.values.all())
 
-
+        arr3 = np.array([2j, np.nan, None])
+        df3 = DataFrame({'a' : arr3})
+        rs = df3.gt(2j)
+        self.assert_(not rs.values.any())
 
     def test_arith_flex_series(self):
         df = self.simple
@@ -3344,6 +3347,10 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         mat = self.mixed_frame.as_matrix(['foo', 'A'])
         self.assertEqual(mat[0, 0], 'bar')
 
+        df = DataFrame({'real' : [1,2,3], 'complex' : [1j, 2j, 3j]})
+        mat = df.as_matrix()
+        self.assertEqual(mat[0, 0], 1j)
+
         # single block corner case
         mat = self.frame.as_matrix(['A', 'B'])
         expected = self.frame.reindex(columns=['A', 'B']).values
@@ -3791,9 +3798,30 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         assert_frame_equal(zero_filled.replace(-1e8, nan), self.tsframe)
 
+        self.tsframe['A'][:5] = nan
+        self.tsframe['A'][-5:] = nan
+        self.tsframe['B'][:5] = -1e8
+
         padded = self.tsframe.replace(nan, method='pad')
         assert_frame_equal(padded, self.tsframe.fillna(method='pad'))
 
+        result = self.tsframe.replace(to_replace={'A' : nan}, method='pad',
+                                      axis=1)
+        expected = self.tsframe.T.replace(to_replace={'A' : nan}, method='pad').T
+        assert_frame_equal(result, expected)
+
+        result = self.tsframe.replace(to_replace={'A' : nan, 'B' : -1e8},
+                                      method='bfill')
+        tsframe = self.tsframe.copy()
+        b = tsframe['B']
+        b[b == -1e8] = nan
+        tsframe['B'] = b
+        expected = tsframe.fillna(method='bfill')
+        assert_frame_equal(expected, result)
+
+        bfilled = self.tsframe.replace(nan, method='bfill')
+        assert_frame_equal(bfilled, self.tsframe.fillna(method='bfill'))
+
         # mixed type
         self.mixed_frame['foo'][5:20] = nan
         self.mixed_frame['A'][-10:] = nan
@@ -3803,10 +3831,28 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         assert_frame_equal(result, expected)
         assert_frame_equal(result.replace(-1e8, nan), self.mixed_frame)
 
+        result = self.mixed_frame.replace(nan, method='pad', axis=1)
+        expected = self.mixed_frame.fillna(method='pad', axis=1)
+        assert_frame_equal(result, expected)
+
         # empty
         df = DataFrame(index=['a', 'b'])
         assert_frame_equal(df, df.replace(5, 7))
 
+        # no nans
+        self.tsframe['A'][:5] = 1e8
+        result = self.tsframe.replace(1e8, method='bfill')
+        self.tsframe['A'].replace(1e8, nan, inplace=True)
+        expected = self.tsframe.fillna(method='bfill')
+        assert_frame_equal(result, expected)
+
+        # int and bool blocks
+        df = DataFrame({'ints': [1,2,3], 'bools': [True, False, True]})
+        result = df.replace({'ints' : 1, 'bools' : False},
+                            {'ints': 0, 'bools': True})
+        expected = DataFrame({'ints': [0,2,3], 'bools': [True]*3})
+        assert_frame_equal(result, expected)
+
     def test_replace_input_formats(self):
         # both dicts
         to_rep = {'A' : np.nan, 'B' : 0, 'C' : ''}
diff --git a/pandas/tests/test_internals.py b/pandas/tests/test_internals.py
index cf1ce851a..9d3b8ad02 100644
--- a/pandas/tests/test_internals.py
+++ b/pandas/tests/test_internals.py
@@ -44,6 +44,10 @@ def get_int_ex(cols=['g']):
     mat = randn(N, 1).astype(int)
     return make_block(mat.T, cols, TEST_COLS)
 
+def get_dt_ex(cols=['h']):
+    mat = randn(N, 1).astype(int).astype(np.datetime64)
+    return make_block(mat.T, cols, TEST_COLS)
+
 class TestBlock(unittest.TestCase):
 
     def setUp(self):
@@ -288,6 +292,12 @@ class TestBlockManager(unittest.TestCase):
         mgr = BlockManager.from_blocks(blocks, np.arange(index_sz))
         self.assert_(mgr.as_matrix().dtype == np.int64)
 
+    def test_as_matrix_datetime(self):
+        blocks = [get_dt_ex(['h']), get_dt_ex(['g'])]
+        index_sz = blocks[0].values.shape[1]
+        mgr = BlockManager.from_blocks(blocks, np.arange(index_sz))
+        self.assert_(mgr.as_matrix().dtype == np.datetime64)
+
     def test_xs(self):
         pass
 
diff --git a/pandas/tseries/plotting.py b/pandas/tseries/plotting.py
index cb915ba2c..593a4cdd5 100644
--- a/pandas/tseries/plotting.py
+++ b/pandas/tseries/plotting.py
@@ -81,9 +81,14 @@ def tsplot(series, plotf, *args, **kwargs):
         idx = series.index.to_period(freq=freq)
         series = Series(series.values, idx, name=series.name)
 
-    if not isinstance(series.index, PeriodIndex): # business freq
-        raise TypeError('series argument to tsplot must have DatetimeIndex or '
-                        'PeriodIndex')
+    if not isinstance(series.index, PeriodIndex):
+        # try to get it to DatetimeIndex then to period
+        if series.index.inferred_type == 'datetime':
+            idx = DatetimeIndex(series.index).to_period(freq=freq)
+            series = Series(series.values, idx, name=series.name)
+        else:
+            raise TypeError('series argument to tsplot must have '
+                            'DatetimeIndex or PeriodIndex')
 
     if 'ax' in kwargs:
         ax = kwargs.pop('ax')
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 2acff3740..edad6e332 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -721,6 +721,8 @@ class TestTimeSeries(unittest.TestCase):
         pts = df.to_period('M', axis=1)
         self.assert_(pts.columns.equals(exp.columns.asfreq('M')))
 
+        self.assertRaises(ValueError, df.to_period, axis=2)
+
     def test_timestamp_fields(self):
         # extra fields from DatetimeIndex like quarter and week
         from pandas._tseries import Timestamp
