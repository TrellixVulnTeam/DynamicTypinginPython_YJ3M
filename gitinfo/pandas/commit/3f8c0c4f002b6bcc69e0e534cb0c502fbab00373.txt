commit 3f8c0c4f002b6bcc69e0e534cb0c502fbab00373
Author: Terji Petersen <contribute@tensortable.com>
Date:   Thu Sep 19 17:06:40 2019 +0100

    COMPAT: remove Categorical pickle compat with Pandas < 0.16 (#27538)

diff --git a/doc/source/whatsnew/v1.0.0.rst b/doc/source/whatsnew/v1.0.0.rst
index 75b705372..5e6a90935 100644
--- a/doc/source/whatsnew/v1.0.0.rst
+++ b/doc/source/whatsnew/v1.0.0.rst
@@ -109,6 +109,8 @@ Removal of prior version deprecations/changes
 - :meth:`pandas.Series.str.cat` does not accept list-likes *within* list-likes anymore (:issue:`27611`)
 - Removed the previously deprecated :meth:`ExtensionArray._formatting_values`. Use :attr:`ExtensionArray._formatter` instead. (:issue:`23601`)
 - Removed the previously deprecated ``IntervalIndex.from_intervals`` in favor of the :class:`IntervalIndex` constructor (:issue:`19263`)
+- Ability to read pickles containing :class:`Categorical` instances created with pre-0.16 version of pandas has been removed (:issue:`27538`)
+-
 
 .. _whatsnew_1000.performance:
 
diff --git a/pandas/core/arrays/categorical.py b/pandas/core/arrays/categorical.py
index 9e0a68f76..870628500 100644
--- a/pandas/core/arrays/categorical.py
+++ b/pandas/core/arrays/categorical.py
@@ -1353,24 +1353,7 @@ class Categorical(ExtensionArray, PandasObject):
         if not isinstance(state, dict):
             raise Exception("invalid pickle state")
 
-        # Provide compatibility with pre-0.15.0 Categoricals.
-        if "_categories" not in state and "_levels" in state:
-            state["_categories"] = self.dtype.validate_categories(state.pop("_levels"))
-        if "_codes" not in state and "labels" in state:
-            state["_codes"] = coerce_indexer_dtype(
-                state.pop("labels"), state["_categories"]
-            )
-
-        # 0.16.0 ordered change
-        if "_ordered" not in state:
-
-            # >=15.0 < 0.16.0
-            if "ordered" in state:
-                state["_ordered"] = state.pop("ordered")
-            else:
-                state["_ordered"] = False
-
-        # 0.21.0 CategoricalDtype change
+        # compat with pre 0.21.0 CategoricalDtype change
         if "_dtype" not in state:
             state["_dtype"] = CategoricalDtype(state["_categories"], state["_ordered"])
 
diff --git a/pandas/tests/io/data/categorical.0.25.0.pickle b/pandas/tests/io/data/categorical.0.25.0.pickle
new file mode 100644
index 000000000..b756060c8
Binary files /dev/null and b/pandas/tests/io/data/categorical.0.25.0.pickle differ
diff --git a/pandas/tests/io/data/categorical_0_14_1.pickle b/pandas/tests/io/data/categorical_0_14_1.pickle
deleted file mode 100644
index 94f882b2f..000000000
Binary files a/pandas/tests/io/data/categorical_0_14_1.pickle and /dev/null differ
diff --git a/pandas/tests/io/data/categorical_0_15_2.pickle b/pandas/tests/io/data/categorical_0_15_2.pickle
deleted file mode 100644
index 25cd86297..000000000
Binary files a/pandas/tests/io/data/categorical_0_15_2.pickle and /dev/null differ
diff --git a/pandas/tests/io/test_common.py b/pandas/tests/io/test_common.py
index 8e09e96fb..655fd9d01 100644
--- a/pandas/tests/io/test_common.py
+++ b/pandas/tests/io/test_common.py
@@ -222,7 +222,7 @@ bar2,12,13,14,15
             (pd.read_sas, "os", ("io", "sas", "data", "test1.sas7bdat")),
             (pd.read_json, "os", ("io", "json", "data", "tsframe_v012.json")),
             (pd.read_msgpack, "os", ("io", "msgpack", "data", "frame.mp")),
-            (pd.read_pickle, "os", ("io", "data", "categorical_0_14_1.pickle")),
+            (pd.read_pickle, "os", ("io", "data", "categorical.0.25.0.pickle")),
         ],
     )
     def test_read_fspath_all(self, reader, module, path, datapath):
diff --git a/pandas/tests/io/test_pickle.py b/pandas/tests/io/test_pickle.py
index 4124c9aff..edd0b0918 100644
--- a/pandas/tests/io/test_pickle.py
+++ b/pandas/tests/io/test_pickle.py
@@ -184,38 +184,6 @@ def test_round_trip_current(current_pickle_data):
                     compare_element(result, expected, typ)
 
 
-def test_pickle_v0_14_1(datapath):
-
-    cat = pd.Categorical(
-        values=["a", "b", "c"], ordered=False, categories=["a", "b", "c", "d"]
-    )
-    pickle_path = datapath("io", "data", "categorical_0_14_1.pickle")
-    # This code was executed once on v0.14.1 to generate the pickle:
-    #
-    # cat = Categorical(labels=np.arange(3), levels=['a', 'b', 'c', 'd'],
-    #                   name='foobar')
-    # with open(pickle_path, 'wb') as f: pickle.dump(cat, f)
-    #
-    tm.assert_categorical_equal(cat, pd.read_pickle(pickle_path))
-
-
-def test_pickle_v0_15_2(datapath):
-    # ordered -> _ordered
-    # GH 9347
-
-    cat = pd.Categorical(
-        values=["a", "b", "c"], ordered=False, categories=["a", "b", "c", "d"]
-    )
-    pickle_path = datapath("io", "data", "categorical_0_15_2.pickle")
-    # This code was executed once on v0.15.2 to generate the pickle:
-    #
-    # cat = Categorical(labels=np.arange(3), levels=['a', 'b', 'c', 'd'],
-    #                   name='foobar')
-    # with open(pickle_path, 'wb') as f: pickle.dump(cat, f)
-    #
-    tm.assert_categorical_equal(cat, pd.read_pickle(pickle_path))
-
-
 def test_pickle_path_pathlib():
     df = tm.makeDataFrame()
     result = tm.round_trip_pathlib(df.to_pickle, pd.read_pickle)
