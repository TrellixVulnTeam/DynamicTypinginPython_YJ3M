commit ce8fd029dd31917d7800f316086c8d13faca9849
Author: Chang She <changshe@gmail.com>
Date:   Wed Jul 18 17:44:35 2012 -0400

    ENH: marking right y-axis columns

diff --git a/doc/source/visualization.rst b/doc/source/visualization.rst
index ca6120f38..99651d87f 100644
--- a/doc/source/visualization.rst
+++ b/doc/source/visualization.rst
@@ -120,6 +120,31 @@ To plot data on a secondary y-axis, use the ``secondary_y`` keyword:
    df.B.plot(secondary_y=True, style='g')
 
 
+Selective Plotting on Secondary Y-axis
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+To plot some columns in a DataFrame, give the column names to the `secondary_y`
+keyword:
+
+.. ipython:: python
+
+   plt.figure()
+
+   @savefig frame_plot_secondary_y.png width=4.5in
+   df.plot(secondary_y=['A', 'B'])
+
+Note that the columns plotted on the secondary y-axis is automatically marked
+with "(right)" in the legend. To turn off the automatic marking, use the
+`mark_right=False` keyword:
+
+.. ipython:: python
+
+   plt.figure()
+
+   @savefig frame_plot_secondary_y.png width=4.5in
+   df.plot(secondary_y=['A', 'B'], mark_right=False)
+
+
 Targeting different subplots
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index c14f1db93..2df415252 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -822,6 +822,7 @@ class KdePlot(MPLPlot):
 class LinePlot(MPLPlot):
 
     def __init__(self, data, **kwargs):
+        self.mark_right = kwargs.pop('mark_right', True)
         MPLPlot.__init__(self, data, **kwargs)
 
     def _index_freq(self):
@@ -884,7 +885,10 @@ class LinePlot(MPLPlot):
 
                 newline = plotf(ax, x, y, style, label=label, **kwds)[0]
                 lines.append(newline)
-                labels.append(label)
+                leg_label = label
+                if self.mark_right and self.on_right(i):
+                    leg_label += ' (right)'
+                labels.append(leg_label)
                 ax.grid(self.grid)
 
             self._make_legend(lines, labels)
@@ -900,6 +904,11 @@ class LinePlot(MPLPlot):
         lines = []
         labels = []
 
+        def to_leg_label(label, i):
+            if self.mark_right and self.on_right(i):
+                return label + ' (right)'
+            return label
+
         if isinstance(data, Series):
             ax = self._get_ax(0) #self.axes[0]
             style = self.style or ''
@@ -911,7 +920,8 @@ class LinePlot(MPLPlot):
                              **kwargs)
             ax.grid(self.grid)
             lines.append(newlines[0])
-            labels.append(label)
+            leg_label = to_leg_label(label, 0)
+            labels.append(leg_label)
         else:
             for i, col in enumerate(data.columns):
                 label = com._stringify(col)
@@ -925,7 +935,8 @@ class LinePlot(MPLPlot):
                                   style=style, **kwds)
 
                 lines.append(newlines[0])
-                labels.append(label)
+                leg_label = to_leg_label(label, i)
+                labels.append(leg_label)
                 ax.grid(self.grid)
 
         self._make_legend(lines, labels)
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index 5ff295ba8..0c884760e 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -744,12 +744,26 @@ class TestTSPlot(unittest.TestCase):
         ax = df.plot(secondary_y=['A', 'B'])
         leg = ax.get_legend()
         self.assert_(len(leg.get_lines()) == 4)
+        self.assert_(leg.get_texts()[0].get_text() == 'A (right)')
+        self.assert_(leg.get_texts()[1].get_text() == 'B (right)')
+        self.assert_(leg.get_texts()[2].get_text() == 'C')
+        self.assert_(leg.get_texts()[3].get_text() == 'D')
         self.assert_(ax.right_ax.get_legend() is None)
         colors = set()
         for line in leg.get_lines():
             colors.add(line.get_color())
         self.assert_(len(colors) == 4)
 
+        plt.clf()
+        ax = fig.add_subplot(211)
+        ax = df.plot(secondary_y=['A', 'C'], mark_right=False)
+        leg = ax.get_legend()
+        self.assert_(len(leg.get_lines()) == 4)
+        self.assert_(leg.get_texts()[0].get_text() == 'A')
+        self.assert_(leg.get_texts()[1].get_text() == 'B')
+        self.assert_(leg.get_texts()[2].get_text() == 'C')
+        self.assert_(leg.get_texts()[3].get_text() == 'D')
+
         plt.clf()
         ax = fig.add_subplot(211)
         df = tm.makeTimeDataFrame()
