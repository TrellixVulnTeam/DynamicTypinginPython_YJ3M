commit 4d9238c0e59ad57301139c8044dd6cbb76b00ecc
Author: Chang She <chang@lambdafoundry.com>
Date:   Tue May 22 16:59:36 2012 -0400

    BUG: series/frame describe fails for datetime64 data

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 3a9e90d99..983298921 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -3771,6 +3771,7 @@ class DataFrame(NDFrame):
 
         for column in numdata.columns:
             series = self[column]
+            ser_desc = series.describe()
             destat.append([series.count(), series.mean(), series.std(),
                            series.min(), series.quantile(lb), series.median(),
                            series.quantile(ub), series.max()])
@@ -4059,7 +4060,8 @@ class DataFrame(NDFrame):
             num_data = self._data.get_numeric_data()
             return DataFrame(num_data, copy=False)
         else:
-            if self.values.dtype != np.object_:
+            if (self.values.dtype != np.object_ and
+                not issubclass(self.values.dtype.type, np.datetime64)):
                 return self
             else:
                 return self.ix[:, []]
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 617c4113d..4827fd711 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -523,7 +523,8 @@ class BlockManager(object):
 
     def get_numeric_data(self, copy=False):
         num_blocks = [b for b in self.blocks
-                      if isinstance(b, (IntBlock, FloatBlock, ComplexBlock))]
+                      if (isinstance(b, (IntBlock, FloatBlock, ComplexBlock))
+                          and not isinstance(b, DatetimeBlock))]
 
         indexer = np.sort(np.concatenate([b.ref_locs for b in num_blocks]))
         new_items = self.items.take(indexer)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 4e6b0ceeb..d3cc6dcf5 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1310,12 +1310,21 @@ copy : boolean, default False
             top, freq = objcounts.most_common(1)[0]
             data = [self.count(), len(objcounts), top, freq]
 
+        elif issubclass(self.dtype.type, np.datetime64):
+            names = ['count', 'unique', 'first', 'last', 'top', 'freq']
+
+            asint = self.dropna().view('i8')
+            objcounts = Counter(asint)
+            top, freq = objcounts.most_common(1)[0]
+            data = [self.count(), len(objcounts),
+                    lib.Timestamp(asint.min()),
+                    lib.Timestamp(asint.max()),
+                    lib.Timestamp(top), freq]
         else:
 
             lb = .5 * (1. - percentile_width/100.)
             ub = 1. - lb
 
-
             def pretty_name(x):
                 x *= 100
                 if x == int(x):
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 23c380396..a4d56f51f 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -5248,6 +5248,10 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
                              columns=df.columns)
         assert_frame_equal(desc, expected)
 
+        df = DataFrame({'time' : self.tsframe.index})
+        desc = df.describe()
+        assert(desc.time['first'] == min(self.tsframe.index))
+
     def test_get_axis_etc(self):
         f = self.frame
 
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 011bd0de9..2fc76c450 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1111,6 +1111,16 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
                            'top' : 'a', 'freq' : 3}, index=result.index)
         assert_series_equal(result, expected)
 
+        ser = Series(self.ts.index)
+        rs = ser.describe()
+        min_date = min(self.ts.index)
+        max_date = max(self.ts.index)
+        xp = Series({'count' : len(self.ts.index),
+                     'unique' : len(self.ts.index),
+                     'first' : min_date, 'last' : max_date, 'freq' : 1,
+                     'top' : min_date}, index=rs.index)
+        assert_series_equal(rs, xp)
+
     def test_append(self):
         appendedSeries = self.series.append(self.objSeries)
         for idx, value in appendedSeries.iteritems():
