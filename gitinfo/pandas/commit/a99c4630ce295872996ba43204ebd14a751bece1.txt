commit a99c4630ce295872996ba43204ebd14a751bece1
Author: Jeremy Schendel <jschendel@users.noreply.github.com>
Date:   Tue Jul 2 06:27:37 2019 -0600

    BUG: Fix Index constructor with mixed closed Intervals (#27173)

diff --git a/doc/source/whatsnew/v0.25.0.rst b/doc/source/whatsnew/v0.25.0.rst
index 7495d7d73..b7614423e 100644
--- a/doc/source/whatsnew/v0.25.0.rst
+++ b/doc/source/whatsnew/v0.25.0.rst
@@ -764,7 +764,7 @@ Interval
 
 - Construction of :class:`Interval` is restricted to numeric, :class:`Timestamp` and :class:`Timedelta` endpoints (:issue:`23013`)
 - Fixed bug in :class:`Series`/:class:`DataFrame` not displaying ``NaN`` in :class:`IntervalIndex` with missing values (:issue:`25984`)
--
+- Bug in :class:`Index` constructor where passing mixed closed :class:`Interval` objects would result in a ``ValueError`` instead of an ``object`` dtype ``Index`` (:issue:`27172`)
 
 Indexing
 ^^^^^^^^
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index 548791daf..a0bd13f1e 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -421,7 +421,11 @@ class Index(IndexOpsMixin, PandasObject):
                     return Float64Index(subarr, copy=copy, name=name)
                 elif inferred == 'interval':
                     from .interval import IntervalIndex
-                    return IntervalIndex(subarr, name=name, copy=copy)
+                    try:
+                        return IntervalIndex(subarr, name=name, copy=copy)
+                    except ValueError:
+                        # GH27172: mixed closed Intervals --> object dtype
+                        pass
                 elif inferred == 'boolean':
                     # don't support boolean explicitly ATM
                     pass
diff --git a/pandas/tests/indexes/interval/test_construction.py b/pandas/tests/indexes/interval/test_construction.py
index eb9b573cc..aabaaa0f2 100644
--- a/pandas/tests/indexes/interval/test_construction.py
+++ b/pandas/tests/indexes/interval/test_construction.py
@@ -364,6 +364,16 @@ class TestClassConstructors(Base):
         assert type(result) is Index
         tm.assert_numpy_array_equal(result.values, np.array(values))
 
+    def test_index_mixed_closed(self):
+        # GH27172
+        intervals = [Interval(0, 1, closed='left'),
+                     Interval(1, 2, closed='right'),
+                     Interval(2, 3, closed='neither'),
+                     Interval(3, 4, closed='both')]
+        result = Index(intervals)
+        expected = Index(intervals, dtype=object)
+        tm.assert_index_equal(result, expected)
+
 
 class TestFromIntervals(TestClassConstructors):
     """
@@ -388,3 +398,7 @@ class TestFromIntervals(TestClassConstructors):
     @pytest.mark.skip(reason='parent class test that is not applicable')
     def test_index_object_dtype(self):
         pass
+
+    @pytest.mark.skip(reason='parent class test that is not applicable')
+    def test_index_mixed_closed(self):
+        pass
diff --git a/pandas/tests/indexes/test_base.py b/pandas/tests/indexes/test_base.py
index b46e5835f..a3563838e 100644
--- a/pandas/tests/indexes/test_base.py
+++ b/pandas/tests/indexes/test_base.py
@@ -22,7 +22,8 @@ from pandas import (
     CategoricalIndex, DataFrame, DatetimeIndex, Float64Index, Int64Index,
     PeriodIndex, RangeIndex, Series, TimedeltaIndex, UInt64Index, date_range,
     isna, period_range)
-from pandas.core.index import _get_combined_index, ensure_index_from_sequences
+from pandas.core.index import (
+    _get_combined_index, ensure_index, ensure_index_from_sequences)
 from pandas.core.indexes.api import Index, MultiIndex
 from pandas.core.sorting import safe_sort
 from pandas.tests.indexes.common import Base
@@ -2432,6 +2433,16 @@ class TestIndexUtils:
         result = ensure_index_from_sequences(data, names)
         tm.assert_index_equal(result, expected)
 
+    def test_ensure_index_mixed_closed_intervals(self):
+        # GH27172
+        intervals = [pd.Interval(0, 1, closed='left'),
+                     pd.Interval(1, 2, closed='right'),
+                     pd.Interval(2, 3, closed='neither'),
+                     pd.Interval(3, 4, closed='both')]
+        result = ensure_index(intervals)
+        expected = Index(intervals, dtype=object)
+        tm.assert_index_equal(result, expected)
+
 
 @pytest.mark.parametrize('opname', ['eq', 'ne', 'le', 'lt', 'ge', 'gt',
                                     'add', 'radd', 'sub', 'rsub',
