commit bcdcd713392ec23dcf273a1551d77f646b5b2297
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Aug 17 13:17:09 2011 -0400

    BUG: NAs were not being properly excluded in multi-key groupby

diff --git a/RELEASE.rst b/RELEASE.rst
index 4bb523ec4..a1aba664f 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -198,6 +198,7 @@ Release notes
 * Bug / unintuitive result when calling `fillna` on unordered labels
 * Bug calling `sum` on boolean DataFrame
 * Bug fix when creating a DataFrame from a dict with scalar values
+* Series.{sum, mean, std, ...} now return NA/NaN when the whole Series is NA
 
 Thanks
 ------
@@ -212,6 +213,7 @@ Thanks
 - Daniel Fortunov
 - Tony Roberts
 - Martin Felder
+- John Marino
 
 ************************
 pandas 0.3 Release Notes
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 9b7f4b9d6..7711a21fc 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -793,6 +793,7 @@ def _generate_groups(data, labels, shape, start, end, axis=0, which=0,
     axis_labels = labels[which][start:end]
     edges = axis_labels.searchsorted(np.arange(1, shape[which] + 1),
                                      side='left')
+
     if isinstance(data, BlockManager):
         def slicer(data, slob):
             return factory(data.get_slice(slob, axis=axis))
@@ -802,9 +803,10 @@ def _generate_groups(data, labels, shape, start, end, axis=0, which=0,
 
     do_slice = which == len(labels) - 1
 
-    # time to actually aggregate
-    left = 0
+    # omit -1 values at beginning-- NA values
+    left = axis_labels.searchsorted(0)
 
+    # time to actually aggregate
     for i, right in enumerate(edges):
         if do_slice:
             slob = slice(start + left, start + right)
diff --git a/pandas/src/groupby.pyx b/pandas/src/groupby.pyx
index f7a58d1c9..e5949a6c4 100644
--- a/pandas/src/groupby.pyx
+++ b/pandas/src/groupby.pyx
@@ -265,6 +265,9 @@ cdef void _aggregate_group(double_t *out, int32_t *counts, double_t *values,
     # time to actually aggregate
     if which == len(labels) - 1:
         axis = labels[which]
+
+        while axis[start] == -1 and start < end:
+            start += 1
         func(out, counts, values, <int32_t*> axis.data, start, end, offset)
     else:
         axis = labels[which][start:end]
@@ -272,7 +275,9 @@ cdef void _aggregate_group(double_t *out, int32_t *counts, double_t *values,
         # get group counts on axisp
         edges = axis.searchsorted(np.arange(1, shape[which] + 1), side='left')
         # print edges, axis
-        left = 0
+
+        left = axis.searchsorted(0) # ignore NA values coded as -1
+
         # aggregate each subgroup
         for right in edges:
             _aggregate_group(out, counts, values, labels, start + left,
@@ -293,12 +298,6 @@ cdef double_t _group_add(double_t *out, int32_t *counts, double_t *values,
 
     while it < end:
         i = labels[it]
-
-        # mapping was NaN
-        if i == -1:
-            it += 1
-            continue
-
         val = values[it]
         tot += 1
 
@@ -332,12 +331,6 @@ cdef double_t _group_mean(double_t *out, int32_t *counts, double_t *values,
 
     while it < end:
         i = labels[it]
-
-        # mapping was NaN
-        if i == -1:
-            it += 1
-            continue
-
         val = values[it]
         tot += 1
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 7cf708542..f77ea3529 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1073,6 +1073,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
 
         biggie.toString(buf=buf, columns=['B', 'A'],
                         float_format=str)
+        biggie.toString(buf=buf, columns=['B', 'A'], colSpace=12,
+                        float_format=str)
 
         frame = DataFrame(index=np.arange(1000))
         frame.toString(buf=buf)
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index e370f4635..16652e036 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -388,6 +388,13 @@ class TestGroupBy(unittest.TestCase):
             assert_frame_equal(result, exp)
 
             # multiple columns
+            grouped = df.groupby(['A', 'B'])
+            expd = {}
+            for cat1, cat2, group in grouped:
+                expd.setdefault(cat1, {})[cat2] = op(group['C'])
+            exp = DataFrame(expd).T.stack()
+            result = op(grouped)['C']
+            assert_series_equal(result, exp)
 
         _testit(lambda x: x.sum())
         _testit(lambda x: x.mean())
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 6720199ff..9292ae869 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -378,6 +378,13 @@ class TestSeries(unittest.TestCase):
         self.assert_(np.isnan(Series([1.], index=[1]).var()))
         self.assert_(np.isnan(Series([1.], index=[1]).skew()))
 
+        # all NA
+        allna = self.series * nan
+        self.assert_(np.isnan(allna.sum()))
+        self.assert_(np.isnan(allna.mean()))
+        self.assert_(np.isnan(allna.std()))
+        self.assert_(np.isnan(allna.skew()))
+
     def test_quantile(self):
         from scipy.stats import scoreatpercentile
 
diff --git a/scripts/groupby_test.py b/scripts/groupby_test.py
index 0dfd7d4a1..c539b1444 100644
--- a/scripts/groupby_test.py
+++ b/scripts/groupby_test.py
@@ -66,10 +66,21 @@ df = DataFrame(data)
 df['C'][2:10:2] = nan
 
 # single column
-grouped = df.drop(['B'], axis=1).groupby('A')
-exp = {}
-for cat, group in grouped:
-    exp[cat] = group['C'].sum()
-exp = DataFrame({'C' : exp})
-result = grouped.sum()
-
+# grouped = df.drop(['B'], axis=1).groupby('A')
+# exp = {}
+# for cat, group in grouped:
+#     exp[cat] = group['C'].sum()
+# exp = DataFrame({'C' : exp})
+# result = grouped.sum()
+
+grouped = df.groupby(['A', 'B'])
+expd = {}
+for cat1, cat2, group in grouped:
+    expd.setdefault(cat1, {})[cat2] = group['C'].sum()
+exp = DataFrame(expd).T.stack()
+result = grouped.sum()['C']
+
+print 'wanted'
+print exp
+print 'got'
+print result
