commit 48dad14953c26230fa297cfabe1d57f15b736123
Author: Thein Oo <thoo@users.noreply.github.com>
Date:   Tue Jan 1 21:54:06 2019 -0500

    Run isort at pandas/tests/io (#24532)

diff --git a/pandas/io/formats/style.py b/pandas/io/formats/style.py
index e83220a47..598453eb9 100644
--- a/pandas/io/formats/style.py
+++ b/pandas/io/formats/style.py
@@ -2,7 +2,8 @@
 Module for applying conditional formatting to
 DataFrames and Series.
 """
-from collections import MutableMapping, defaultdict
+
+from collections import defaultdict
 from contextlib import contextmanager
 import copy
 from functools import partial
@@ -18,7 +19,7 @@ from pandas.core.dtypes.common import is_float, is_string_like
 from pandas.core.dtypes.generic import ABCSeries
 
 import pandas as pd
-from pandas.api.types import is_list_like
+from pandas.api.types import is_dict_like, is_list_like
 import pandas.core.common as com
 from pandas.core.config import get_option
 from pandas.core.generic import _shared_docs
@@ -401,7 +402,7 @@ class Styler(object):
             row_locs = self.data.index.get_indexer_for(sub_df.index)
             col_locs = self.data.columns.get_indexer_for(sub_df.columns)
 
-        if isinstance(formatter, MutableMapping):
+        if is_dict_like(formatter):
             for col, col_formatter in formatter.items():
                 # formatter must be callable, so '{}' are converted to lambdas
                 col_formatter = _maybe_wrap_formatter(col_formatter)
diff --git a/pandas/tests/io/formats/test_css.py b/pandas/tests/io/formats/test_css.py
index e7adfe488..f251bd983 100644
--- a/pandas/tests/io/formats/test_css.py
+++ b/pandas/tests/io/formats/test_css.py
@@ -1,6 +1,7 @@
 import pytest
 
 from pandas.util import testing as tm
+
 from pandas.io.formats.css import CSSResolver, CSSWarning
 
 
diff --git a/pandas/tests/io/formats/test_eng_formatting.py b/pandas/tests/io/formats/test_eng_formatting.py
index 9d5773283..455b6454d 100644
--- a/pandas/tests/io/formats/test_eng_formatting.py
+++ b/pandas/tests/io/formats/test_eng_formatting.py
@@ -1,10 +1,13 @@
 import numpy as np
+
+from pandas.compat import u
+
 import pandas as pd
 from pandas import DataFrame
-from pandas.compat import u
-import pandas.io.formats.format as fmt
 from pandas.util import testing as tm
 
+import pandas.io.formats.format as fmt
+
 
 class TestEngFormatter(object):
 
diff --git a/pandas/tests/io/formats/test_format.py b/pandas/tests/io/formats/test_format.py
index b974415ff..c97989404 100644
--- a/pandas/tests/io/formats/test_format.py
+++ b/pandas/tests/io/formats/test_format.py
@@ -5,35 +5,35 @@ Test output formatting for Series/DataFrame, including to_string & reprs
 """
 
 from __future__ import print_function
-import re
 
-import pytz
-import dateutil
+from datetime import datetime
 import itertools
 from operator import methodcaller
 import os
+import re
 import sys
 import warnings
-from datetime import datetime
 
+import dateutil
+import numpy as np
 import pytest
+import pytz
 
-import numpy as np
-import pandas as pd
-from pandas import (DataFrame, Series, Index, Timestamp, MultiIndex,
-                    date_range, NaT, read_csv)
-from pandas.compat import (range, zip, lrange, StringIO, PY3,
-                           u, lzip, is_platform_windows,
-                           is_platform_32bit)
 import pandas.compat as compat
+from pandas.compat import (
+    PY3, StringIO, is_platform_32bit, is_platform_windows, lrange, lzip, range,
+    u, zip)
+
+import pandas as pd
+from pandas import (
+    DataFrame, Index, MultiIndex, NaT, Series, Timestamp, date_range, read_csv)
+from pandas.core.config import (
+    get_option, option_context, reset_option, set_option)
+import pandas.util.testing as tm
 
 import pandas.io.formats.format as fmt
 import pandas.io.formats.printing as printing
-
-import pandas.util.testing as tm
 from pandas.io.formats.terminal import get_terminal_size
-from pandas.core.config import (set_option, get_option, option_context,
-                                reset_option)
 
 use_32bit_repr = is_platform_windows() or is_platform_32bit()
 
diff --git a/pandas/tests/io/formats/test_printing.py b/pandas/tests/io/formats/test_printing.py
index c9c46d4a9..67ff68ac4 100644
--- a/pandas/tests/io/formats/test_printing.py
+++ b/pandas/tests/io/formats/test_printing.py
@@ -1,14 +1,14 @@
 # -*- coding: utf-8 -*-
+import numpy as np
 import pytest
 
-import numpy as np
 import pandas as pd
-
 from pandas import compat
-import pandas.io.formats.printing as printing
-import pandas.io.formats.format as fmt
 import pandas.core.config as cf
 
+import pandas.io.formats.format as fmt
+import pandas.io.formats.printing as printing
+
 
 def test_adjoin():
     data = [['a', 'b', 'c'], ['dd', 'ee', 'ff'], ['ggg', 'hhh', 'iii']]
diff --git a/pandas/tests/io/formats/test_style.py b/pandas/tests/io/formats/test_style.py
index 3432d686a..407c78672 100644
--- a/pandas/tests/io/formats/test_style.py
+++ b/pandas/tests/io/formats/test_style.py
@@ -1,16 +1,18 @@
 import copy
-import textwrap
 import re
+import textwrap
 
-import pytest
 import numpy as np
+import pytest
+
+import pandas.util._test_decorators as td
+
 import pandas as pd
 from pandas import DataFrame
 import pandas.util.testing as tm
-import pandas.util._test_decorators as td
 
 jinja2 = pytest.importorskip('jinja2')
-from pandas.io.formats.style import Styler, _get_level_lengths  # noqa
+from pandas.io.formats.style import Styler, _get_level_lengths  # noqa  # isort:skip
 
 
 class TestStyler(object):
diff --git a/pandas/tests/io/formats/test_to_csv.py b/pandas/tests/io/formats/test_to_csv.py
index 786c8fab0..1929817a4 100644
--- a/pandas/tests/io/formats/test_to_csv.py
+++ b/pandas/tests/io/formats/test_to_csv.py
@@ -1,13 +1,12 @@
 # -*- coding: utf-8 -*-
 
+import os
 import sys
 
+import numpy as np
 import pytest
 
-import os
-import numpy as np
 import pandas as pd
-
 from pandas import DataFrame, compat
 from pandas.util import testing as tm
 
diff --git a/pandas/tests/io/formats/test_to_excel.py b/pandas/tests/io/formats/test_to_excel.py
index 7d54f93c9..13eb517fc 100644
--- a/pandas/tests/io/formats/test_to_excel.py
+++ b/pandas/tests/io/formats/test_to_excel.py
@@ -4,10 +4,11 @@ ExcelFormatter is tested implicitly in pandas/tests/io/test_excel.py
 """
 
 import pytest
+
 import pandas.util.testing as tm
 
-from pandas.io.formats.excel import CSSToExcelConverter
 from pandas.io.formats.css import CSSWarning
+from pandas.io.formats.excel import CSSToExcelConverter
 
 
 @pytest.mark.parametrize('css,expected', [
diff --git a/pandas/tests/io/formats/test_to_html.py b/pandas/tests/io/formats/test_to_html.py
index eb11433f4..213eb0d5b 100644
--- a/pandas/tests/io/formats/test_to_html.py
+++ b/pandas/tests/io/formats/test_to_html.py
@@ -1,15 +1,18 @@
 # -*- coding: utf-8 -*-
 
-import re
 from datetime import datetime
 from io import open
+import re
 
-import pytest
 import numpy as np
+import pytest
+
+from pandas.compat import StringIO, lrange, u
+
 import pandas as pd
-from pandas import compat, DataFrame, MultiIndex, option_context, Index
-from pandas.compat import u, lrange, StringIO
+from pandas import DataFrame, Index, MultiIndex, compat, option_context
 from pandas.util import testing as tm
+
 import pandas.io.formats.format as fmt
 
 
diff --git a/pandas/tests/io/formats/test_to_latex.py b/pandas/tests/io/formats/test_to_latex.py
index f55fa289e..1653e474a 100644
--- a/pandas/tests/io/formats/test_to_latex.py
+++ b/pandas/tests/io/formats/test_to_latex.py
@@ -1,12 +1,13 @@
+import codecs
 from datetime import datetime
 
 import pytest
 
+from pandas.compat import u
+
 import pandas as pd
-from pandas import DataFrame, compat, Series
+from pandas import DataFrame, Series, compat
 from pandas.util import testing as tm
-from pandas.compat import u
-import codecs
 
 
 @pytest.fixture
diff --git a/pandas/tests/io/generate_legacy_storage_files.py b/pandas/tests/io/generate_legacy_storage_files.py
index 4ebf435f7..6774eac6d 100755
--- a/pandas/tests/io/generate_legacy_storage_files.py
+++ b/pandas/tests/io/generate_legacy_storage_files.py
@@ -35,28 +35,29 @@ run under the older AND the newer version.
 """
 
 from __future__ import print_function
-from warnings import catch_warnings, filterwarnings
+
+from datetime import timedelta
 from distutils.version import LooseVersion
-from pandas import (Series, DataFrame, Panel,
-                    SparseSeries, SparseDataFrame,
-                    Index, MultiIndex, bdate_range, to_msgpack,
-                    date_range, period_range, timedelta_range,
-                    Timestamp, NaT, Categorical, Period)
-from pandas.tseries.offsets import (
-    DateOffset, Hour, Minute, Day,
-    MonthBegin, MonthEnd, YearBegin,
-    YearEnd, Week, WeekOfMonth, LastWeekOfMonth,
-    BusinessDay, BusinessHour, CustomBusinessDay, FY5253,
-    Easter,
-    SemiMonthEnd, SemiMonthBegin,
-    QuarterBegin, QuarterEnd)
-from pandas.compat import u
 import os
+import platform as pl
 import sys
+from warnings import catch_warnings, filterwarnings
+
 import numpy as np
+
+from pandas.compat import u
+
 import pandas
-import platform as pl
-from datetime import timedelta
+from pandas import (
+    Categorical, DataFrame, Index, MultiIndex, NaT, Panel, Period, Series,
+    SparseDataFrame, SparseSeries, Timestamp, bdate_range, date_range,
+    period_range, timedelta_range, to_msgpack)
+
+from pandas.tseries.offsets import (
+    FY5253, BusinessDay, BusinessHour, CustomBusinessDay, DateOffset, Day,
+    Easter, Hour, LastWeekOfMonth, Minute, MonthBegin, MonthEnd, QuarterBegin,
+    QuarterEnd, SemiMonthBegin, SemiMonthEnd, Week, WeekOfMonth, YearBegin,
+    YearEnd)
 
 _loose_version = LooseVersion(pandas.__version__)
 
diff --git a/pandas/tests/io/json/test_compression.py b/pandas/tests/io/json/test_compression.py
index 46a5e511f..430acbdac 100644
--- a/pandas/tests/io/json/test_compression.py
+++ b/pandas/tests/io/json/test_compression.py
@@ -1,8 +1,9 @@
 import pytest
 
+import pandas.util._test_decorators as td
+
 import pandas as pd
 import pandas.util.testing as tm
-import pandas.util._test_decorators as td
 from pandas.util.testing import assert_frame_equal
 
 
diff --git a/pandas/tests/io/json/test_json_table_schema.py b/pandas/tests/io/json/test_json_table_schema.py
index 4fda97770..6fa3b5b3b 100644
--- a/pandas/tests/io/json/test_json_table_schema.py
+++ b/pandas/tests/io/json/test_json_table_schema.py
@@ -1,22 +1,21 @@
 """Tests for Table Schema integration."""
-import json
 from collections import OrderedDict
+import json
 
 import numpy as np
-import pandas as pd
 import pytest
 
-from pandas import DataFrame
 from pandas.core.dtypes.dtypes import (
-    PeriodDtype, CategoricalDtype, DatetimeTZDtype)
-from pandas.io.json.table_schema import (
-    as_json_table_type,
-    build_table_schema,
-    convert_pandas_type_to_json_field,
-    convert_json_field_to_pandas_type,
-    set_default_names)
+    CategoricalDtype, DatetimeTZDtype, PeriodDtype)
+
+import pandas as pd
+from pandas import DataFrame
 import pandas.util.testing as tm
 
+from pandas.io.json.table_schema import (
+    as_json_table_type, build_table_schema, convert_json_field_to_pandas_type,
+    convert_pandas_type_to_json_field, set_default_names)
+
 
 class TestBuildSchema(object):
 
diff --git a/pandas/tests/io/json/test_normalize.py b/pandas/tests/io/json/test_normalize.py
index 3881b315b..fd0953a48 100644
--- a/pandas/tests/io/json/test_normalize.py
+++ b/pandas/tests/io/json/test_normalize.py
@@ -1,9 +1,10 @@
-import pytest
-import numpy as np
 import json
 
+import numpy as np
+import pytest
+
+from pandas import DataFrame, Index, compat
 import pandas.util.testing as tm
-from pandas import compat, Index, DataFrame
 
 from pandas.io.json import json_normalize
 from pandas.io.json.normalize import nested_to_record
diff --git a/pandas/tests/io/json/test_pandas.py b/pandas/tests/io/json/test_pandas.py
index 3fdf303ea..546841303 100644
--- a/pandas/tests/io/json/test_pandas.py
+++ b/pandas/tests/io/json/test_pandas.py
@@ -1,22 +1,24 @@
 # -*- coding: utf-8 -*-
 # pylint: disable-msg=W0612,E1101
-import pytest
-from pandas.compat import (range, lrange, StringIO,
-                           OrderedDict, is_platform_32bit)
-import os
-import numpy as np
-from pandas import (Series, DataFrame, DatetimeIndex, Timestamp,
-                    read_json, compat)
 from datetime import timedelta
-import pandas as pd
 import json
+import os
 
-from pandas.util.testing import (assert_almost_equal, assert_frame_equal,
-                                 assert_series_equal, network,
-                                 ensure_clean, assert_index_equal)
-import pandas.util.testing as tm
+import numpy as np
+import pytest
+
+from pandas.compat import (
+    OrderedDict, StringIO, is_platform_32bit, lrange, range)
 import pandas.util._test_decorators as td
 
+import pandas as pd
+from pandas import (
+    DataFrame, DatetimeIndex, Series, Timestamp, compat, read_json)
+import pandas.util.testing as tm
+from pandas.util.testing import (
+    assert_almost_equal, assert_frame_equal, assert_index_equal,
+    assert_series_equal, ensure_clean, network)
+
 _seriesd = tm.getSeriesData()
 _tsd = tm.getTimeSeriesData()
 
diff --git a/pandas/tests/io/json/test_readlines.py b/pandas/tests/io/json/test_readlines.py
index 25750f4fd..25e78526b 100644
--- a/pandas/tests/io/json/test_readlines.py
+++ b/pandas/tests/io/json/test_readlines.py
@@ -1,12 +1,15 @@
 # -*- coding: utf-8 -*-
 import pytest
+
+from pandas.compat import StringIO
+
 import pandas as pd
 from pandas import DataFrame, read_json
-from pandas.compat import StringIO
-from pandas.io.json.json import JsonReader
 import pandas.util.testing as tm
-from pandas.util.testing import (assert_frame_equal, assert_series_equal,
-                                 ensure_clean)
+from pandas.util.testing import (
+    assert_frame_equal, assert_series_equal, ensure_clean)
+
+from pandas.io.json.json import JsonReader
 
 
 @pytest.fixture
diff --git a/pandas/tests/io/json/test_ujson.py b/pandas/tests/io/json/test_ujson.py
index 4ad4f7179..7f5241def 100644
--- a/pandas/tests/io/json/test_ujson.py
+++ b/pandas/tests/io/json/test_ujson.py
@@ -4,27 +4,28 @@ try:
     import json
 except ImportError:
     import simplejson as json
-import math
-import pytz
-import locale
-import pytest
-import time
-import datetime
 import calendar
-import re
+import datetime
 import decimal
-import dateutil
 from functools import partial
-from pandas.compat import range, StringIO, u
-from pandas._libs.tslib import Timestamp
+import locale
+import math
+import re
+import time
+
+import dateutil
+import numpy as np
+import pytest
+import pytz
+
 import pandas._libs.json as ujson
+from pandas._libs.tslib import Timestamp
 import pandas.compat as compat
+from pandas.compat import StringIO, range, u
 
-import numpy as np
-from pandas import DataFrame, Series, Index, NaT, DatetimeIndex, date_range
+from pandas import DataFrame, DatetimeIndex, Index, NaT, Series, date_range
 import pandas.util.testing as tm
 
-
 json_unicode = (json.dumps if compat.PY3
                 else partial(json.dumps, encoding="utf-8"))
 
diff --git a/pandas/tests/io/msgpack/common.py b/pandas/tests/io/msgpack/common.py
index b770d12cf..434d347c5 100644
--- a/pandas/tests/io/msgpack/common.py
+++ b/pandas/tests/io/msgpack/common.py
@@ -1,6 +1,5 @@
 from pandas.compat import PY3
 
-
 # array compat
 if PY3:
     frombytes = lambda obj, data: obj.frombytes(data)
diff --git a/pandas/tests/io/msgpack/test_buffer.py b/pandas/tests/io/msgpack/test_buffer.py
index 8ebec734f..e36dc5bbd 100644
--- a/pandas/tests/io/msgpack/test_buffer.py
+++ b/pandas/tests/io/msgpack/test_buffer.py
@@ -1,6 +1,7 @@
 # coding: utf-8
 
 from pandas.io.msgpack import packb, unpackb
+
 from .common import frombytes
 
 
diff --git a/pandas/tests/io/msgpack/test_except.py b/pandas/tests/io/msgpack/test_except.py
index 8e8d43a16..d670e846c 100644
--- a/pandas/tests/io/msgpack/test_except.py
+++ b/pandas/tests/io/msgpack/test_except.py
@@ -1,10 +1,11 @@
 # coding: utf-8
 
 from datetime import datetime
-from pandas.io.msgpack import packb, unpackb
 
 import pytest
 
+from pandas.io.msgpack import packb, unpackb
+
 
 class DummyException(Exception):
     pass
diff --git a/pandas/tests/io/msgpack/test_extension.py b/pandas/tests/io/msgpack/test_extension.py
index 2ee72c8a5..06a0691bf 100644
--- a/pandas/tests/io/msgpack/test_extension.py
+++ b/pandas/tests/io/msgpack/test_extension.py
@@ -1,8 +1,10 @@
 from __future__ import print_function
+
 import array
 
 import pandas.io.msgpack as msgpack
 from pandas.io.msgpack import ExtType
+
 from .common import frombytes, tobytes
 
 
diff --git a/pandas/tests/io/msgpack/test_limits.py b/pandas/tests/io/msgpack/test_limits.py
index 2d759d611..cad51da48 100644
--- a/pandas/tests/io/msgpack/test_limits.py
+++ b/pandas/tests/io/msgpack/test_limits.py
@@ -1,10 +1,11 @@
 # coding: utf-8
-from __future__ import (absolute_import, division, print_function,
-                        unicode_literals)
-from pandas.io.msgpack import packb, unpackb, Packer, Unpacker, ExtType
+from __future__ import (
+    absolute_import, division, print_function, unicode_literals)
 
 import pytest
 
+from pandas.io.msgpack import ExtType, Packer, Unpacker, packb, unpackb
+
 
 class TestLimits(object):
 
diff --git a/pandas/tests/io/msgpack/test_newspec.py b/pandas/tests/io/msgpack/test_newspec.py
index 783bfc1b3..d92c649c5 100644
--- a/pandas/tests/io/msgpack/test_newspec.py
+++ b/pandas/tests/io/msgpack/test_newspec.py
@@ -1,6 +1,6 @@
 # coding: utf-8
 
-from pandas.io.msgpack import packb, unpackb, ExtType
+from pandas.io.msgpack import ExtType, packb, unpackb
 
 
 def test_str8():
diff --git a/pandas/tests/io/msgpack/test_pack.py b/pandas/tests/io/msgpack/test_pack.py
index 3afd1fc08..f69ac0a0b 100644
--- a/pandas/tests/io/msgpack/test_pack.py
+++ b/pandas/tests/io/msgpack/test_pack.py
@@ -1,12 +1,14 @@
 # coding: utf-8
 
+import struct
+
 import pytest
 
-import struct
+from pandas.compat import OrderedDict, u
 
 from pandas import compat
-from pandas.compat import u, OrderedDict
-from pandas.io.msgpack import packb, unpackb, Unpacker, Packer
+
+from pandas.io.msgpack import Packer, Unpacker, packb, unpackb
 
 
 class TestPack(object):
diff --git a/pandas/tests/io/msgpack/test_read_size.py b/pandas/tests/io/msgpack/test_read_size.py
index ef521fa34..42791b571 100644
--- a/pandas/tests/io/msgpack/test_read_size.py
+++ b/pandas/tests/io/msgpack/test_read_size.py
@@ -1,5 +1,6 @@
 """Test Unpacker's read_array_header and read_map_header methods"""
-from pandas.io.msgpack import packb, Unpacker, OutOfData
+from pandas.io.msgpack import OutOfData, Unpacker, packb
+
 UnexpectedTypeException = ValueError
 
 
diff --git a/pandas/tests/io/msgpack/test_seq.py b/pandas/tests/io/msgpack/test_seq.py
index 06e9872a2..68be8c2d9 100644
--- a/pandas/tests/io/msgpack/test_seq.py
+++ b/pandas/tests/io/msgpack/test_seq.py
@@ -1,6 +1,7 @@
 # coding: utf-8
 
 import io
+
 import pandas.io.msgpack as msgpack
 
 binarydata = bytes(bytearray(range(256)))
diff --git a/pandas/tests/io/msgpack/test_sequnpack.py b/pandas/tests/io/msgpack/test_sequnpack.py
index be0a23f60..48f981714 100644
--- a/pandas/tests/io/msgpack/test_sequnpack.py
+++ b/pandas/tests/io/msgpack/test_sequnpack.py
@@ -1,10 +1,10 @@
 # coding: utf-8
 
+import pytest
+
 from pandas import compat
-from pandas.io.msgpack import Unpacker, BufferFull
-from pandas.io.msgpack import OutOfData
 
-import pytest
+from pandas.io.msgpack import BufferFull, OutOfData, Unpacker
 
 
 class TestPack(object):
diff --git a/pandas/tests/io/msgpack/test_subtype.py b/pandas/tests/io/msgpack/test_subtype.py
index e27ec66c6..8af7e0b91 100644
--- a/pandas/tests/io/msgpack/test_subtype.py
+++ b/pandas/tests/io/msgpack/test_subtype.py
@@ -1,8 +1,9 @@
 # coding: utf-8
 
-from pandas.io.msgpack import packb
 from collections import namedtuple
 
+from pandas.io.msgpack import packb
+
 
 class MyList(list):
     pass
diff --git a/pandas/tests/io/msgpack/test_unpack.py b/pandas/tests/io/msgpack/test_unpack.py
index c056f8d80..e63631a97 100644
--- a/pandas/tests/io/msgpack/test_unpack.py
+++ b/pandas/tests/io/msgpack/test_unpack.py
@@ -1,8 +1,10 @@
 from io import BytesIO
 import sys
-from pandas.io.msgpack import Unpacker, packb, OutOfData, ExtType
+
 import pytest
 
+from pandas.io.msgpack import ExtType, OutOfData, Unpacker, packb
+
 
 class TestUnpack(object):
 
diff --git a/pandas/tests/io/msgpack/test_unpack_raw.py b/pandas/tests/io/msgpack/test_unpack_raw.py
index a261bf4cb..09ebb681d 100644
--- a/pandas/tests/io/msgpack/test_unpack_raw.py
+++ b/pandas/tests/io/msgpack/test_unpack_raw.py
@@ -1,6 +1,7 @@
 """Tests for cases where the user seeks to obtain packed msgpack objects"""
 
 import io
+
 from pandas.io.msgpack import Unpacker, packb
 
 
diff --git a/pandas/tests/io/sas/test_sas.py b/pandas/tests/io/sas/test_sas.py
index 016dc56b4..0f6342aa6 100644
--- a/pandas/tests/io/sas/test_sas.py
+++ b/pandas/tests/io/sas/test_sas.py
@@ -1,6 +1,7 @@
 import pytest
 
 from pandas.compat import StringIO
+
 from pandas import read_sas
 
 
diff --git a/pandas/tests/io/sas/test_sas7bdat.py b/pandas/tests/io/sas/test_sas7bdat.py
index 705387188..3dd8d0449 100644
--- a/pandas/tests/io/sas/test_sas7bdat.py
+++ b/pandas/tests/io/sas/test_sas7bdat.py
@@ -1,13 +1,16 @@
-import pandas as pd
-from pandas.compat import PY2
-import pandas.util.testing as tm
-import pandas.util._test_decorators as td
-from pandas.errors import EmptyDataError
-import os
 import io
+import os
+
 import numpy as np
 import pytest
 
+from pandas.compat import PY2
+from pandas.errors import EmptyDataError
+import pandas.util._test_decorators as td
+
+import pandas as pd
+import pandas.util.testing as tm
+
 
 # https://github.com/cython/cython/issues/1720
 @pytest.mark.filterwarnings("ignore:can't resolve package:ImportWarning")
diff --git a/pandas/tests/io/sas/test_xport.py b/pandas/tests/io/sas/test_xport.py
index 6e5b2ab06..1b086daf5 100644
--- a/pandas/tests/io/sas/test_xport.py
+++ b/pandas/tests/io/sas/test_xport.py
@@ -1,9 +1,12 @@
+import os
+
+import numpy as np
 import pytest
+
 import pandas as pd
 import pandas.util.testing as tm
+
 from pandas.io.sas.sasreader import read_sas
-import numpy as np
-import os
 
 # CSV versions of test xpt files were obtained using the R foreign library
 
diff --git a/pandas/tests/io/test_clipboard.py b/pandas/tests/io/test_clipboard.py
index 99bece0ef..8eb26d9f3 100644
--- a/pandas/tests/io/test_clipboard.py
+++ b/pandas/tests/io/test_clipboard.py
@@ -1,19 +1,18 @@
 # -*- coding: utf-8 -*-
-import numpy as np
-from numpy.random import randint
 from textwrap import dedent
 
+import numpy as np
+from numpy.random import randint
 import pytest
-import pandas as pd
 
-from pandas import DataFrame
-from pandas import read_clipboard
-from pandas import get_option
 from pandas.compat import PY2
+
+import pandas as pd
+from pandas import DataFrame, get_option, read_clipboard
 from pandas.util import testing as tm
 from pandas.util.testing import makeCustomDataframe as mkdf
-from pandas.io.clipboard.exceptions import PyperclipException
 
+from pandas.io.clipboard.exceptions import PyperclipException
 
 try:
     DataFrame({'A': [1, 2]}).to_clipboard()
diff --git a/pandas/tests/io/test_common.py b/pandas/tests/io/test_common.py
index 2f2b79258..a4c76285c 100644
--- a/pandas/tests/io/test_common.py
+++ b/pandas/tests/io/test_common.py
@@ -6,15 +6,13 @@ import os
 
 import pytest
 
-import pandas as pd
-import pandas.io.common as icom
+from pandas.compat import FileNotFoundError, StringIO, is_platform_windows
 import pandas.util._test_decorators as td
+
+import pandas as pd
 import pandas.util.testing as tm
-from pandas.compat import (
-    is_platform_windows,
-    StringIO,
-    FileNotFoundError,
-)
+
+import pandas.io.common as icom
 
 
 class CustomFSPath(object):
diff --git a/pandas/tests/io/test_compression.py b/pandas/tests/io/test_compression.py
index b62a1e6c4..a3fb35f9f 100644
--- a/pandas/tests/io/test_compression.py
+++ b/pandas/tests/io/test_compression.py
@@ -1,13 +1,14 @@
+import contextlib
 import os
 import warnings
-import contextlib
 
 import pytest
 
 import pandas as pd
-import pandas.io.common as icom
 import pandas.util.testing as tm
 
+import pandas.io.common as icom
+
 
 @contextlib.contextmanager
 def catch_to_csv_depr():
diff --git a/pandas/tests/io/test_feather.py b/pandas/tests/io/test_feather.py
index 44d642399..d170e4c43 100644
--- a/pandas/tests/io/test_feather.py
+++ b/pandas/tests/io/test_feather.py
@@ -2,15 +2,16 @@
 from distutils.version import LooseVersion
 
 import numpy as np
+import pytest
 
 import pandas as pd
 import pandas.util.testing as tm
 from pandas.util.testing import assert_frame_equal, ensure_clean
 
-import pytest
+from pandas.io.feather_format import read_feather, to_feather  # noqa:E402
+
 pyarrow = pytest.importorskip('pyarrow')
 
-from pandas.io.feather_format import to_feather, read_feather  # noqa:E402
 
 pyarrow_version = LooseVersion(pyarrow.__version__)
 
diff --git a/pandas/tests/io/test_gbq.py b/pandas/tests/io/test_gbq.py
index 6dd16107b..15f366e5e 100644
--- a/pandas/tests/io/test_gbq.py
+++ b/pandas/tests/io/test_gbq.py
@@ -1,20 +1,22 @@
-import pytest
 from datetime import datetime
-import pytz
-import platform
 import os
+import platform
+
+import numpy as np
+import pytest
+import pytz
+
+from pandas.compat import range
+
+import pandas as pd
+from pandas import DataFrame, compat
+import pandas.util.testing as tm
 
 try:
     from unittest import mock
 except ImportError:
     mock = pytest.importorskip("mock")
 
-import numpy as np
-import pandas as pd
-from pandas import compat, DataFrame
-from pandas.compat import range
-import pandas.util.testing as tm
-
 
 api_exceptions = pytest.importorskip("google.api_core.exceptions")
 bigquery = pytest.importorskip("google.cloud.bigquery")
diff --git a/pandas/tests/io/test_gcs.py b/pandas/tests/io/test_gcs.py
index efbd57dec..12b082c3d 100644
--- a/pandas/tests/io/test_gcs.py
+++ b/pandas/tests/io/test_gcs.py
@@ -1,12 +1,14 @@
 import numpy as np
 import pytest
 
-from pandas import DataFrame, date_range, read_csv
 from pandas.compat import StringIO
-from pandas.io.common import is_gcs_url
+
+from pandas import DataFrame, date_range, read_csv
 from pandas.util import _test_decorators as td
 from pandas.util.testing import assert_frame_equal
 
+from pandas.io.common import is_gcs_url
+
 
 def test_is_gcs_url():
     assert is_gcs_url("gcs://pandas/somethingelse.com")
diff --git a/pandas/tests/io/test_html.py b/pandas/tests/io/test_html.py
index 492089644..b2b0c21c8 100644
--- a/pandas/tests/io/test_html.py
+++ b/pandas/tests/io/test_html.py
@@ -1,29 +1,28 @@
 from __future__ import print_function
 
+from functools import partial
 import os
 import re
 import threading
 
-from functools import partial
-
-import pytest
-
 import numpy as np
 from numpy.random import rand
+import pytest
 
-from pandas import (DataFrame, MultiIndex, read_csv, Timestamp, Index,
-                    date_range, Series)
-from pandas.compat import (map, zip, StringIO, BytesIO,
-                           is_platform_windows, PY3, reload)
+from pandas.compat import (
+    PY3, BytesIO, StringIO, is_platform_windows, map, reload, zip)
 from pandas.errors import ParserError
-from pandas.io.common import URLError, file_path_to_url
-import pandas.io.html
-from pandas.io.html import read_html
+import pandas.util._test_decorators as td
 
+from pandas import (
+    DataFrame, Index, MultiIndex, Series, Timestamp, date_range, read_csv)
 import pandas.util.testing as tm
-import pandas.util._test_decorators as td
 from pandas.util.testing import makeCustomDataframe as mkdf, network
 
+from pandas.io.common import URLError, file_path_to_url
+import pandas.io.html
+from pandas.io.html import read_html
+
 HERE = os.path.dirname(__file__)
 
 
diff --git a/pandas/tests/io/test_parquet.py b/pandas/tests/io/test_parquet.py
index e4f10de7f..9034b9640 100644
--- a/pandas/tests/io/test_parquet.py
+++ b/pandas/tests/io/test_parquet.py
@@ -1,18 +1,20 @@
 """ test parquet compat """
-import os
-
-import pytest
 import datetime
 from distutils.version import LooseVersion
+import os
 from warnings import catch_warnings
 
 import numpy as np
-import pandas as pd
+import pytest
+
 from pandas.compat import PY3
-from pandas.io.parquet import (to_parquet, read_parquet, get_engine,
-                               PyArrowImpl, FastParquetImpl)
+
+import pandas as pd
 from pandas.util import testing as tm
 
+from pandas.io.parquet import (
+    FastParquetImpl, PyArrowImpl, get_engine, read_parquet, to_parquet)
+
 try:
     import pyarrow  # noqa
     _HAVE_PYARROW = True
diff --git a/pandas/tests/io/test_pickle.py b/pandas/tests/io/test_pickle.py
index 85d467650..7f3fe1aa4 100644
--- a/pandas/tests/io/test_pickle.py
+++ b/pandas/tests/io/test_pickle.py
@@ -12,20 +12,22 @@ $ python generate_legacy_storage_files.py <output_dir> pickle
 
 3. Move the created pickle to "data/legacy_pickle/<version>" directory.
 """
+from distutils.version import LooseVersion
 import glob
-import pytest
+import os
+import shutil
 from warnings import catch_warnings, simplefilter
 
-import os
-from distutils.version import LooseVersion
+import pytest
+
+from pandas.compat import PY3, is_platform_little_endian
+import pandas.util._test_decorators as td
+
 import pandas as pd
 from pandas import Index
-from pandas.compat import is_platform_little_endian, PY3
-import pandas
 import pandas.util.testing as tm
-import pandas.util._test_decorators as td
+
 from pandas.tseries.offsets import Day, MonthEnd
-import shutil
 
 
 @pytest.fixture(scope='module')
@@ -63,7 +65,7 @@ def compare(data, vf, version):
 
     # py3 compat when reading py2 pickle
     try:
-        data = pandas.read_pickle(vf)
+        data = pd.read_pickle(vf)
     except (ValueError) as e:
         if 'unsupported pickle protocol:' in str(e):
             # trying to read a py3 pickle in py2
@@ -111,13 +113,13 @@ def compare_series_ts(result, expected, typ, version):
     freq = result.index.freq
     assert freq + Day(1) == Day(2)
 
-    res = freq + pandas.Timedelta(hours=1)
-    assert isinstance(res, pandas.Timedelta)
-    assert res == pandas.Timedelta(days=1, hours=1)
+    res = freq + pd.Timedelta(hours=1)
+    assert isinstance(res, pd.Timedelta)
+    assert res == pd.Timedelta(days=1, hours=1)
 
-    res = freq + pandas.Timedelta(nanoseconds=1)
-    assert isinstance(res, pandas.Timedelta)
-    assert res == pandas.Timedelta(days=1, nanoseconds=1)
+    res = freq + pd.Timedelta(nanoseconds=1)
+    assert isinstance(res, pd.Timedelta)
+    assert res == pd.Timedelta(days=1, nanoseconds=1)
 
 
 def compare_series_dt_tz(result, expected, typ, version):
@@ -337,7 +339,7 @@ class TestCompression(object):
                                  compression=zipfile.ZIP_DEFLATED) as f:
                 f.write(src_path, os.path.basename(src_path))
         elif compression == 'xz':
-            lzma = pandas.compat.import_lzma()
+            lzma = pd.compat.import_lzma()
             f = lzma.LZMAFile(dest_path, "w")
         else:
             msg = 'Unrecognized compression type: {}'.format(compression)
diff --git a/pandas/tests/io/test_pytables.py b/pandas/tests/io/test_pytables.py
index 4179e81d0..55b738a56 100644
--- a/pandas/tests/io/test_pytables.py
+++ b/pandas/tests/io/test_pytables.py
@@ -1,39 +1,37 @@
-import pytest
-import os
-import tempfile
 from contextlib import contextmanager
-from warnings import catch_warnings, simplefilter
-from distutils.version import LooseVersion
-
 import datetime
 from datetime import timedelta
+from distutils.version import LooseVersion
+import os
+import tempfile
+from warnings import catch_warnings, simplefilter
 
 import numpy as np
+import pytest
 
-import pandas as pd
-from pandas import (Series, DataFrame, Panel, MultiIndex, Int64Index,
-                    RangeIndex, Categorical, bdate_range,
-                    date_range, timedelta_range, Index, DatetimeIndex,
-                    isna, compat, concat, Timestamp)
+from pandas.compat import (
+    PY35, PY36, BytesIO, is_platform_little_endian, is_platform_windows,
+    lrange, range, text_type, u)
+import pandas.util._test_decorators as td
 
+from pandas.core.dtypes.common import is_categorical_dtype
+
+import pandas as pd
+from pandas import (
+    Categorical, DataFrame, DatetimeIndex, Index, Int64Index, MultiIndex,
+    Panel, RangeIndex, Series, Timestamp, bdate_range, compat, concat,
+    date_range, isna, timedelta_range)
 import pandas.util.testing as tm
-import pandas.util._test_decorators as td
-from pandas.util.testing import (assert_panel_equal,
-                                 assert_frame_equal,
-                                 assert_series_equal,
-                                 set_timezone)
-
-from pandas.compat import (is_platform_windows, is_platform_little_endian,
-                           PY35, PY36, BytesIO, text_type,
-                           range, lrange, u)
+from pandas.util.testing import (
+    assert_frame_equal, assert_panel_equal, assert_series_equal, set_timezone)
+
+from pandas.io import pytables as pytables  # noqa:E402
 from pandas.io.formats.printing import pprint_thing
-from pandas.core.dtypes.common import is_categorical_dtype
+from pandas.io.pytables import (
+    ClosedFileError, HDFStore, PossibleDataLossError, Term, read_hdf)
+from pandas.io.pytables import TableIterator  # noqa:E402
 
 tables = pytest.importorskip('tables')
-from pandas.io import pytables as pytables  # noqa:E402
-from pandas.io.pytables import (TableIterator,  # noqa:E402
-                                HDFStore, Term, read_hdf,
-                                PossibleDataLossError, ClosedFileError)
 
 
 _default_compressor = ('blosc' if LooseVersion(tables.__version__) >=
diff --git a/pandas/tests/io/test_s3.py b/pandas/tests/io/test_s3.py
index a2c3d17f8..32eae8ed3 100644
--- a/pandas/tests/io/test_s3.py
+++ b/pandas/tests/io/test_s3.py
@@ -1,7 +1,9 @@
 import pytest
 
-from pandas import read_csv
 from pandas.compat import BytesIO
+
+from pandas import read_csv
+
 from pandas.io.common import is_s3_url
 
 
diff --git a/pandas/tests/io/test_sql.py b/pandas/tests/io/test_sql.py
index 1ad5d636c..75a6d8d00 100644
--- a/pandas/tests/io/test_sql.py
+++ b/pandas/tests/io/test_sql.py
@@ -18,27 +18,29 @@ The SQL tests are broken down in different classes:
 """
 
 from __future__ import print_function
-import pytest
-import sqlite3
-import csv
 
+import csv
+from datetime import date, datetime, time
+import sqlite3
 import warnings
-import numpy as np
-import pandas as pd
 
-from datetime import datetime, date, time
+import numpy as np
+import pytest
 
-from pandas.core.dtypes.common import (is_datetime64_dtype,
-                                       is_datetime64tz_dtype)
-from pandas import DataFrame, Series, Index, MultiIndex, isna, concat
-from pandas import date_range, to_datetime, to_timedelta, Timestamp
 import pandas.compat as compat
-from pandas.compat import range, lrange, string_types, PY36
+from pandas.compat import PY36, lrange, range, string_types
 
-import pandas.io.sql as sql
-from pandas.io.sql import read_sql_table, read_sql_query
+from pandas.core.dtypes.common import (
+    is_datetime64_dtype, is_datetime64tz_dtype)
+
+import pandas as pd
+from pandas import (
+    DataFrame, Index, MultiIndex, Series, Timestamp, concat, date_range, isna,
+    to_datetime, to_timedelta)
 import pandas.util.testing as tm
 
+import pandas.io.sql as sql
+from pandas.io.sql import read_sql_query, read_sql_table
 
 try:
     import sqlalchemy
diff --git a/pandas/tests/io/test_stata.py b/pandas/tests/io/test_stata.py
index 3413b8fdf..ce9be6a78 100644
--- a/pandas/tests/io/test_stata.py
+++ b/pandas/tests/io/test_stata.py
@@ -1,27 +1,31 @@
 # -*- coding: utf-8 -*-
 # pylint: disable=E1101
 
+from collections import OrderedDict
 import datetime as dt
-import io
+from datetime import datetime
 import gzip
+import io
 import os
 import struct
 import warnings
-from collections import OrderedDict
-from datetime import datetime
 
 import numpy as np
 import pytest
 
-import pandas as pd
-import pandas.util.testing as tm
 import pandas.compat as compat
-from pandas.compat import iterkeys, PY3, ResourceWarning
+from pandas.compat import PY3, ResourceWarning, iterkeys
+
 from pandas.core.dtypes.common import is_categorical_dtype
+
+import pandas as pd
 from pandas.core.frame import DataFrame, Series
+import pandas.util.testing as tm
+
 from pandas.io.parsers import read_csv
-from pandas.io.stata import (InvalidColumnName, PossiblePrecisionLoss,
-                             StataMissingValue, StataReader, read_stata)
+from pandas.io.stata import (
+    InvalidColumnName, PossiblePrecisionLoss, StataMissingValue, StataReader,
+    read_stata)
 
 
 @pytest.fixture
diff --git a/setup.cfg b/setup.cfg
index 302123e60..59e599191 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -136,52 +136,6 @@ skip=
     pandas/tests/test_take.py,
     pandas/tests/test_nanops.py,
     pandas/tests/test_config.py,
-    pandas/tests/io/test_clipboard.py,
-    pandas/tests/io/test_compression.py,
-    pandas/tests/io/test_pytables.py,
-    pandas/tests/io/test_parquet.py,
-    pandas/tests/io/generate_legacy_storage_files.py,
-    pandas/tests/io/test_common.py,
-    pandas/tests/io/test_feather.py,
-    pandas/tests/io/test_s3.py,
-    pandas/tests/io/test_html.py,
-    pandas/tests/io/test_sql.py,
-    pandas/tests/io/test_stata.py,
-    pandas/tests/io/conftest.py,
-    pandas/tests/io/test_pickle.py,
-    pandas/tests/io/test_gbq.py,
-    pandas/tests/io/test_gcs.py,
-    pandas/tests/io/sas/test_sas.py,
-    pandas/tests/io/sas/test_sas7bdat.py,
-    pandas/tests/io/sas/test_xport.py,
-    pandas/tests/io/formats/test_eng_formatting.py,
-    pandas/tests/io/formats/test_to_excel.py,
-    pandas/tests/io/formats/test_to_html.py,
-    pandas/tests/io/formats/test_style.py,
-    pandas/tests/io/formats/test_format.py,
-    pandas/tests/io/formats/test_to_csv.py,
-    pandas/tests/io/formats/test_css.py,
-    pandas/tests/io/formats/test_to_latex.py,
-    pandas/tests/io/formats/test_printing.py,
-    pandas/tests/io/msgpack/test_buffer.py,
-    pandas/tests/io/msgpack/test_read_size.py,
-    pandas/tests/io/msgpack/test_pack.py,
-    pandas/tests/io/msgpack/test_except.py,
-    pandas/tests/io/msgpack/test_unpack_raw.py,
-    pandas/tests/io/msgpack/test_unpack.py,
-    pandas/tests/io/msgpack/test_newspec.py,
-    pandas/tests/io/msgpack/common.py,
-    pandas/tests/io/msgpack/test_limits.py,
-    pandas/tests/io/msgpack/test_extension.py,
-    pandas/tests/io/msgpack/test_sequnpack.py,
-    pandas/tests/io/msgpack/test_subtype.py,
-    pandas/tests/io/msgpack/test_seq.py,
-    pandas/tests/io/json/test_compression.py,
-    pandas/tests/io/json/test_ujson.py,
-    pandas/tests/io/json/test_normalize.py,
-    pandas/tests/io/json/test_readlines.py,
-    pandas/tests/io/json/test_pandas.py,
-    pandas/tests/io/json/test_json_table_schema.py,
     pandas/tests/api/test_types.py,
     pandas/tests/api/test_api.py,
     pandas/tests/tools/test_numeric.py,
