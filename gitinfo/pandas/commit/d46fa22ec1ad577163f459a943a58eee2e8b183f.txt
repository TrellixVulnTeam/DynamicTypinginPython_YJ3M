commit d46fa22ec1ad577163f459a943a58eee2e8b183f
Author: jreback <jeff@reback.net>
Date:   Fri Mar 15 16:17:16 2013 -0400

    ENH: to_csv using masking to simplify dtype processing

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 976b0c7a0..c017890d2 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1297,8 +1297,25 @@ class DataFrame(NDFrame):
 
         series = {}
         for k, v in self._series.iteritems():
-            series[k] = v.values
-
+            mask = isnull(v)
+            imask = -mask
+            if v.dtype == 'datetime64[ns]' or v.dtype == 'timedelta64[ns]':
+                values = np.empty(len(v),dtype=object)
+                values[mask] = 'NaT'
+
+                if v.dtype == 'datetime64[ns]':
+                    values[imask] = np.array([ val._repr_base for val in v[imask] ],dtype=object)
+                elif v.dtype == 'timedelta64[ns]':
+                    values[imask] = np.array([ lib.repr_timedelta64(val) for val in v[imask] ],dtype=object)
+            else:
+                values = np.array(v.values,dtype=object)
+                values[mask] = na_rep
+                if issubclass(v.dtype.type,np.floating):
+                    if float_format:
+                        values[imask] = np.array([ float_format % val for val in v[imask] ])
+
+            series[k] = values
+ 
         has_aliases = isinstance(header, (tuple, list, np.ndarray))
         if has_aliases or header:
             if index:
@@ -1369,18 +1386,7 @@ class DataFrame(NDFrame):
             row_fields = row_fields_f(idx)
 
             for i, col in (all_cols or enumerate(cols)):
-                val = series[col][j]
-
-
-                if lib.checknull(val):
-                    val = na_rep
-
-                if float_format is not None and com.is_float(val):
-                    val = float_format % val
-                elif isinstance(val, np.datetime64):
-                    val = lib.Timestamp(val)._repr_base
-
-                row_fields[i+nlevels] = val
+                row_fields[i+nlevels] = series[col][j]
 
             rows[ j % N ] = map(lambda val: np.asscalar(val) if isinstance(val,np.number) else val
                                 ,row_fields)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 1c30dfd1a..5d270bb03 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -4562,6 +4562,37 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         os.remove(path)
 
+    def test_to_csv_mixed(self):
+        filename = '__tmp_to_csv_mixed__.csv'
+        def create_cols(name):
+            return [ "%s%03d" % (name,i) for i in xrange(5) ]
+
+        df_float  = DataFrame(np.random.randn(100, 5),dtype='float64',columns=create_cols('float'))
+        df_int    = DataFrame(np.random.randn(100, 5),dtype='int64',columns=create_cols('int'))
+        df_bool   = DataFrame(True,index=df_float.index,columns=create_cols('bool'))
+        df_object = DataFrame('foo',index=df_float.index,columns=create_cols('object'))
+        df_dt     = DataFrame(Timestamp('20010101'),index=df_float.index,columns=create_cols('date'))
+
+        # add in some nans
+        df_float.ix[30:50,1:3] = np.nan
+
+        #### this is a bug in read_csv right now ####
+        #df_dt.ix[30:50,1:3] = np.nan
+
+        df        = pan.concat([ df_float, df_int, df_bool, df_object, df_dt ], axis=1)
+
+        # dtype
+        dtypes = dict()
+        for n,dtype in [('float',np.float64),('int',np.int64),('bool',np.bool),('object',np.object)]:
+            for c in create_cols(n):
+                dtypes[c] = dtype
+
+        df.to_csv(filename)
+
+        rs = pan.read_csv(filename, index_col=0, dtype=dtypes, parse_dates=create_cols('date'))
+        assert_frame_equal(rs, df)
+        os.remove(filename)
+
     def test_to_csv_bug(self):
         path = '__tmp_to_csv_bug__.csv'
         f1 = StringIO('a,1.0\nb,2.0')
