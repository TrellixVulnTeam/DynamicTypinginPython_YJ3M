commit a57e681aef4d5de5da1201d18009b5dbb4382a6d
Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
Date:   Sat Apr 1 17:48:58 2017 -0400

    PERF: improve iloc list indexing
    
    Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
    
    Closes #15504 from jorisvandenbossche/perf-iloc-list and squashes the following commits:
    
    bf54a0b [Joris Van den Bossche] TST: edit test_take to preserve original dtype
    74d45ae [Joris Van den Bossche] add whatsnew
    3e537b6 [Joris Van den Bossche] small clean-up
    6d2705c [Joris Van den Bossche] take method: only validate kwargs if there are kwargs
    aacbaa8 [Joris Van den Bossche] PERF: improve iloc list indexing

diff --git a/doc/source/whatsnew/v0.20.0.txt b/doc/source/whatsnew/v0.20.0.txt
index 399f91fc6..a34b9feb2 100644
--- a/doc/source/whatsnew/v0.20.0.txt
+++ b/doc/source/whatsnew/v0.20.0.txt
@@ -905,7 +905,7 @@ Performance Improvements
 - Improved performance of ``drop_duplicates()`` on ``bool`` columns (:issue:`12963`)
 - Improve performance of ``pd.core.groupby.GroupBy.apply`` when the applied
   function used the ``.name`` attribute of the group DataFrame (:issue:`15062`).
-
+- Improved performance of ``iloc`` indexing with a list or array (:issue:`15504`).
 
 
 .. _whatsnew_0200.bug_fixes:
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index c80e8c34a..61a847ccf 100755
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -1697,26 +1697,24 @@ class _iLocIndexer(_LocationIndexer):
         else:
             return self.obj.take(slice_obj, axis=axis, convert=False)
 
-    def _get_list_axis(self, key_list, axis=0):
+    def _get_list_axis(self, key, axis=0):
         """
         Return Series values by list or array of integers
 
         Parameters
         ----------
-        key_list : list-like positional indexer
+        key : list-like positional indexer
         axis : int (can only be zero)
 
         Returns
         -------
         Series object
         """
-
-        # validate list bounds
-        self._is_valid_list_like(key_list, axis)
-
-        # force an actual list
-        key_list = list(key_list)
-        return self.obj.take(key_list, axis=axis, convert=False)
+        try:
+            return self.obj.take(key, axis=axis, convert=False)
+        except IndexError:
+            # re-raise with different error message
+            raise IndexError("positional indexers are out-of-bounds")
 
     def _getitem_axis(self, key, axis=0):
 
@@ -1724,7 +1722,13 @@ class _iLocIndexer(_LocationIndexer):
             self._has_valid_type(key, axis)
             return self._get_slice_axis(key, axis=axis)
 
-        elif is_bool_indexer(key):
+        if isinstance(key, list):
+            try:
+                key = np.asarray(key)
+            except TypeError:  # pragma: no cover
+                pass
+
+        if is_bool_indexer(key):
             self._has_valid_type(key, axis)
             return self._getbool_axis(key, axis=axis)
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index bcc1ed272..bcd58ea79 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2378,7 +2378,8 @@ class Series(base.IndexOpsMixin, strings.StringAccessorMixin,
         --------
         numpy.ndarray.take
         """
-        nv.validate_take(tuple(), kwargs)
+        if kwargs:
+            nv.validate_take(tuple(), kwargs)
 
         # check/convert indicies here
         if convert:
@@ -2387,8 +2388,8 @@ class Series(base.IndexOpsMixin, strings.StringAccessorMixin,
         indices = _ensure_platform_int(indices)
         new_index = self.index.take(indices)
         new_values = self._values.take(indices)
-        return self._constructor(new_values,
-                                 index=new_index).__finalize__(self)
+        return (self._constructor(new_values, index=new_index, fastpath=True)
+                    .__finalize__(self))
 
     def isin(self, values):
         """
diff --git a/pandas/indexes/base.py b/pandas/indexes/base.py
index 7f0de963e..91e242287 100644
--- a/pandas/indexes/base.py
+++ b/pandas/indexes/base.py
@@ -1668,7 +1668,8 @@ class Index(IndexOpsMixin, StringAccessorMixin, PandasObject):
     @Appender(_index_shared_docs['take'] % _index_doc_kwargs)
     def take(self, indices, axis=0, allow_fill=True,
              fill_value=None, **kwargs):
-        nv.validate_take(tuple(), kwargs)
+        if kwargs:
+            nv.validate_take(tuple(), kwargs)
         indices = _ensure_platform_int(indices)
         if self._can_hold_na:
             taken = self._assert_take_fillable(self.values, indices,
diff --git a/pandas/tests/test_generic.py b/pandas/tests/test_generic.py
index a2329e2d1..0e8e8dc43 100644
--- a/pandas/tests/test_generic.py
+++ b/pandas/tests/test_generic.py
@@ -1870,7 +1870,7 @@ class TestNDFrame(tm.TestCase):
                   tm.makeObjectSeries()]:
             out = s.take(indices)
             expected = Series(data=s.values.take(indices),
-                              index=s.index.take(indices))
+                              index=s.index.take(indices), dtype=s.dtype)
             tm.assert_series_equal(out, expected)
         for df in [tm.makeTimeDataFrame()]:
             out = df.take(indices)
