commit 16df53bcb01567b8acac2cb15baaa56df9e9719b
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jan 20 00:39:40 2011 -0500

    unit tests

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index b8efc7819..08cb715fe 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -22,20 +22,6 @@ import pandas.lib.tseries as tseries
 #-------------------------------------------------------------------------------
 # Factory helper methods
 
-def arith_method_infer(func, name):
-    def f(self, other):
-        if isinstance(other, DataFrame):    # Another DataFrame
-            return self._combine_frame(other, func)
-        elif isinstance(other, Series):
-            return self._combine_series_infer(other, func)
-        else:
-            return self._combine_const(other, func)
-
-    f.__name__ = name
-    f.__doc__ = 'Wrapper for arithmetic method %s' % name
-
-    return f
-
 _arith_doc ="""
 Arithmetic method: %s
 
@@ -45,21 +31,26 @@ other : Series, DataFrame, or constant
 axis : {0, 1, 'index', 'columns'}
     For Series input, axis to match Series index on
 
+Notes
+-----
+Mismatched indices will be unioned together
+
 Returns
 -------
 result : DataFrame
 """
 
-def arith_method_flex(func, name):
-    def f(self, other, axis='columns'):
-        axis = self._get_axis_name(axis)
+def arith_method(func, name, default_axis='columns'):
+    def f(self, other, axis=default_axis):
         if isinstance(other, DataFrame):    # Another DataFrame
             return self._combine_frame(other, func)
         elif isinstance(other, Series):
-            if axis == 'index':
-                return self._combine_match_index(other, func)
-            else:
-                return self._combine_match_columns (other, func)
+            if axis is not None:
+                axis = self._get_axis_name(axis)
+                if axis == 'index':
+                    return self._combine_match_index(other, func)
+                else:
+                    return self._combine_match_columns(other, func)
             return self._combine_series_infer(other, func)
         else:
             return self._combine_const(other, func)
@@ -74,7 +65,7 @@ def comp_method(func, name):
         if isinstance(other, DataFrame):    # Another DataFrame
             return self._compare_frame(other, func)
         elif isinstance(other, Series):
-            return self._combine_series(other, func)
+            return self._combine_series_infer(other, func)
         else:
             return self._combine_const(other, func)
 
@@ -533,27 +524,27 @@ class DataFrame(Picklable, Groupable):
 #-------------------------------------------------------------------------------
 # Arithmetic methods
 
-    add = arith_method_flex(operator.add, 'add')
-    mul = arith_method_flex(operator.mul, 'multiply')
-    sub = arith_method_flex(operator.sub, 'subtract')
-    div = arith_method_flex(operator.div, 'divide')
-
-    radd = arith_method_flex(operator.add, 'add')
-    rmul = arith_method_flex(operator.mul, 'multiply')
-    rsub = arith_method_flex(lambda x, y: y - x, 'subtract')
-    rdiv = arith_method_flex(lambda x, y: y / x, 'divide')
-
-    __add__ = arith_method_infer(operator.add, '__add__')
-    __sub__ = arith_method_infer(operator.sub, '__sub__')
-    __mul__ = arith_method_infer(operator.mul, '__mul__')
-    __div__ = arith_method_infer(operator.div, '__div__')
-    __pow__ = arith_method_infer(operator.pow, '__pow__')
-
-    __radd__ = arith_method_infer(operator.add, '__radd__')
-    __rmul__ = arith_method_infer(operator.mul, '__rmul__')
-    __rsub__ = arith_method_infer(lambda x, y: y - x, '__rsub__')
-    __rdiv__ = arith_method_infer(lambda x, y: y / x, '__rdiv__')
-    __rpow__ = arith_method_infer(lambda x, y: y ** x, '__rpow__')
+    add = arith_method(operator.add, 'add')
+    mul = arith_method(operator.mul, 'multiply')
+    sub = arith_method(operator.sub, 'subtract')
+    div = arith_method(operator.div, 'divide')
+
+    radd = arith_method(operator.add, 'add')
+    rmul = arith_method(operator.mul, 'multiply')
+    rsub = arith_method(lambda x, y: y - x, 'subtract')
+    rdiv = arith_method(lambda x, y: y / x, 'divide')
+
+    __add__ = arith_method(operator.add, '__add__', default_axis=None)
+    __sub__ = arith_method(operator.sub, '__sub__', default_axis=None)
+    __mul__ = arith_method(operator.mul, '__mul__', default_axis=None)
+    __div__ = arith_method(operator.div, '__div__', default_axis=None)
+    __pow__ = arith_method(operator.pow, '__pow__', default_axis=None)
+
+    __radd__ = arith_method(operator.add, '__radd__', default_axis=None)
+    __rmul__ = arith_method(operator.mul, '__rmul__', default_axis=None)
+    __rsub__ = arith_method(lambda x, y: y - x, '__rsub__', default_axis=None)
+    __rdiv__ = arith_method(lambda x, y: y / x, '__rdiv__', default_axis=None)
+    __rpow__ = arith_method(lambda x, y: y ** x, '__rpow__', default_axis=None)
 
     def __neg__(self):
         return self * -1
diff --git a/pandas/core/series.py b/pandas/core/series.py
index fe6eec2c8..70fba035b 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -807,7 +807,7 @@ class Series(np.ndarray, Picklable, Groupable):
         reindexed : Series
         """
         import warnings
-        if fillMethod is not None:
+        if fillMethod is not None: # pragma: no cover
             warnings.warn("'fillMethod' is deprecated. Use 'method' instead",
                           DeprecationWarning)
 
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index 7ea9f570c..46196c318 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -59,11 +59,41 @@ class TestDataFrame(unittest.TestCase):
              datetime.today() + timedelta(1) : ['bar'] * 1000},
             index=np.arange(1000))
 
+        arr = np.array([[1., 2., 3.],
+                        [4., 5., 6.],
+                        [7., 8., 9.]])
+
+        self.simple = self.klass(arr, columns=['one', 'two', 'three'],
+                                 index=['a', 'b', 'c'])
+
+    def test_get_axis(self):
+        self.assert_(self.klass._get_axis_name(0) == 'index')
+        self.assert_(self.klass._get_axis_name(1) == 'columns')
+        self.assert_(self.klass._get_axis_name('index') == 'index')
+        self.assert_(self.klass._get_axis_name('columns') == 'columns')
+        self.assertRaises(KeyError, self.klass._get_axis_name, 'foo')
+        self.assertRaises(KeyError, self.klass._get_axis_name, None)
+
+        self.assert_(self.klass._get_axis_number(0) == 0)
+        self.assert_(self.klass._get_axis_number(1) == 1)
+        self.assert_(self.klass._get_axis_number('index') == 0)
+        self.assert_(self.klass._get_axis_number('columns') == 1)
+        self.assertRaises(KeyError, self.klass._get_axis_number, 2)
+        self.assertRaises(KeyError, self.klass._get_axis_number, None)
+
+        self.assert_(self.frame._get_axis(0) is self.frame.index)
+        self.assert_(self.frame._get_axis(1) is self.frame.columns)
+
     def test_set_index(self):
         idx = Index(np.arange(len(self.mixed_frame)))
         self.mixed_frame.index = idx
-
         self.assert_(self.mixed_frame['foo'].index  is idx)
+        self.assertRaises(Exception, self.mixed_frame._set_index, idx[::2])
+
+    def test_set_columns(self):
+        cols = Index(np.arange(len(self.mixed_frame.columns)))
+        self.mixed_frame.columns = cols
+        self.assertRaises(Exception, self.mixed_frame._set_columns, cols[::2])
 
     def test_constructor(self):
         df = self.klass()
@@ -464,6 +494,37 @@ class TestDataFrame(unittest.TestCase):
         index = frame._lastTimeWithValue()
         self.assert_(index == frame.index[-6])
 
+    def test_arith_flex_frame(self):
+        res_add = self.frame.add(self.frame)
+        res_sub = self.frame.sub(self.frame)
+        res_mul = self.frame.mul(self.frame)
+        res_div = self.frame.div(2 * self.frame)
+
+        assert_frame_equal(res_add, self.frame + self.frame)
+        assert_frame_equal(res_sub, self.frame - self.frame)
+        assert_frame_equal(res_mul, self.frame * self.frame)
+        assert_frame_equal(res_div, self.frame / (2 * self.frame))
+
+        const_add = self.frame.add(1)
+        assert_frame_equal(const_add, self.frame + 1)
+
+    def test_arith_flex_series(self):
+        df = self.simple
+
+        row = df.xs('a')
+        col = df['two']
+
+        assert_frame_equal(df.add(row), df + row)
+        assert_frame_equal(df.add(row, axis=None), df + row)
+        assert_frame_equal(df.sub(row), df - row)
+        assert_frame_equal(df.div(row), df / row)
+        assert_frame_equal(df.mul(row), df * row)
+
+        assert_frame_equal(df.add(col, axis=0), (df.T + col).T)
+        assert_frame_equal(df.sub(col, axis=0), (df.T - col).T)
+        assert_frame_equal(df.div(col, axis=0), (df.T / col).T)
+        assert_frame_equal(df.mul(col, axis=0), (df.T * col).T)
+
     def test_combineFrame(self):
         frame_copy = self.frame.reindex(self.frame.index[::2])
 
@@ -557,6 +618,33 @@ class TestDataFrame(unittest.TestCase):
         self.assert_(result.index is self.empty.index)
         self.assertEqual(len(result.columns), 0)
 
+    def test_comparisons(self):
+        import operator
+
+        df1 = common.makeTimeDataFrame()
+        df2 = common.makeTimeDataFrame()
+
+        row = self.simple.xs('a')
+
+        def test_comp(func):
+            result = func(df1, df2)
+            self.assert_(np.array_equal(result.values,
+                                        func(df1.values, df2.values)))
+
+            result2 = func(self.simple, row)
+            self.assert_(np.array_equal(result2.values,
+                                        func(self.simple.values, row)))
+
+            result3 = func(self.frame, 0)
+            self.assert_(np.array_equal(result3.values,
+                                        func(self.frame.values, 0)))
+
+        test_comp(operator.eq)
+        test_comp(operator.lt)
+        test_comp(operator.gt)
+        test_comp(operator.ge)
+        test_comp(operator.le)
+
     def test_toCSV_fromcsv(self):
         path = '__tmp__'
 
diff --git a/pandas/core/tests/test_series.py b/pandas/core/tests/test_series.py
index 9b33e65a3..2128daeac 100644
--- a/pandas/core/tests/test_series.py
+++ b/pandas/core/tests/test_series.py
@@ -608,7 +608,11 @@ class TestSeries(unittest.TestCase):
         self.assert_(not isnull(merged['c']))
 
     def test_apply(self):
+        assert_series_equal(self.ts.apply(np.sqrt), np.sqrt(self.ts))
 
+        # elementwise-apply
+        import math
+        assert_series_equal(self.ts.apply(math.exp), np.exp(self.ts))
 
     def test_reindex(self):
         identity = self.series.reindex(self.series.index)
