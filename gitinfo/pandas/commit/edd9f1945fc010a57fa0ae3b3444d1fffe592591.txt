commit edd9f1945fc010a57fa0ae3b3444d1fffe592591
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Sep 21 13:16:55 2011 -0400

    ENH: rename DataFrame axes without copying data

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index faf1d4ef8..5203977c8 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1346,7 +1346,7 @@ class DataFrame(NDFrame):
     #----------------------------------------------------------------------
     # Rename
 
-    def rename(self, index=None, columns=None):
+    def rename(self, index=None, columns=None, copy=True):
         """
         Alter index and / or columns using input function or
         functions. Function / dict values must be unique (1-to-1). Labels not
@@ -1358,6 +1358,8 @@ class DataFrame(NDFrame):
             Transformation to apply to index values
         columns : dict-like or function, optional
             Transformation to apply to column values
+        copy : boolean, default True
+            Also copy underlying data
 
         See also
         --------
@@ -1390,7 +1392,7 @@ class DataFrame(NDFrame):
 
         self._consolidate_inplace()
 
-        result = self.copy()
+        result = self.copy(deep=copy)
 
         if index is not None:
             result._rename_index_inplace(index_f)
@@ -1405,7 +1407,7 @@ class DataFrame(NDFrame):
         self._series_cache.clear()
 
     def _rename_columns_inplace(self, mapper):
-        self._data = self._data.rename_items(mapper)
+        self._data = self._data.rename_items(mapper, copydata=False)
         self._series_cache.clear()
 
     #----------------------------------------------------------------------
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 232b0cfdf..54f032917 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -397,9 +397,23 @@ class NDFrame(PandasObject):
 
         return result
 
-    def copy(self):
-        """Make a deep copy of this object"""
-        return self._constructor(self._data.copy())
+    def copy(self, deep=True):
+        """
+        Make a copy of this object
+
+        Parameters
+        ----------
+        deep : boolean, default True
+            Make a deep copy, i.e. also copy data
+
+        Returns
+        -------
+        copy : type of caller
+        """
+        data = self._data
+        if deep:
+            data = data.copy()
+        return self._constructor(data)
 
     def swaplevel(self, i, j, axis=0):
         """
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 941e0deff..9fa4e6a84 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -84,8 +84,11 @@ class Block(object):
     def dtype(self):
         return self.values.dtype
 
-    def copy(self):
-        return make_block(self.values.copy(), self.items, self.ref_items)
+    def copy(self, deep=True):
+        values = self.values
+        if deep:
+            values = values.copy()
+        return make_block(values, self.items, self.ref_items)
 
     def merge(self, other):
         assert(self.ref_items.equals(other.ref_items))
@@ -682,13 +685,13 @@ class BlockManager(object):
         new_axes[axis] = new_axis
         return BlockManager(self.blocks, new_axes)
 
-    def rename_items(self, mapper):
+    def rename_items(self, mapper, copydata=True):
         new_items = Index([mapper(x) for x in self.items])
         new_items._verify_integrity()
 
         new_blocks = []
         for block in self.blocks:
-            newb = block.copy()
+            newb = block.copy(deep=copydata)
             newb.set_ref_items(new_items, maybe_rename=True)
             new_blocks.append(newb)
         new_axes = list(self.axes)
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index f2739967f..2a7e51f94 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -410,12 +410,15 @@ to sparse
 
         return self.copy()
 
-    def copy(self):
+    def copy(self, deep=True):
         """
         Make a copy of the SparseSeries. Only the actual sparse values need to
         be copied
         """
-        values = self.sp_values.copy()
+        if deep:
+            values = self.sp_values.copy()
+        else:
+            values = self.sp_values
         return SparseSeries(values, index=self.index,
                             sparse_index=self.sp_index,
                             fill_value=self.fill_value)
@@ -775,12 +778,15 @@ class SparseDataFrame(DataFrame):
         data = dict((k, v.to_dense()) for k, v in self.iteritems())
         return DataFrame(data, index=self.index)
 
-    def copy(self):
+    def copy(self, deep=True):
         """
-        Make a deep copy of this SparseDataFrame
+        Make a copy of this SparseDataFrame
         """
-        return SparseDataFrame(self._series, index=self.index,
-                               columns=self.columns,
+        if deep:
+            series = self._series.copy()
+        else:
+            series = self._series
+        return SparseDataFrame(series, index=self.index, columns=self.columns,
                                default_fill_value=self.default_fill_value,
                                default_kind=self.default_kind)
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 5a9e70752..788a45670 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2025,6 +2025,11 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         renamed = self.frame.T.rename(index={'C' : 'foo', 'D' : 'bar'})
         self.assert_(np.array_equal(renamed.index, ['A', 'B', 'foo', 'bar']))
 
+    def test_rename_nocopy(self):
+        renamed = self.frame.rename(columns={'C' : 'foo'}, copy=False)
+        renamed['foo'] = 1.
+        self.assert_((self.frame['C'] == 1.).all())
+
     #----------------------------------------------------------------------
     # Time series related
 
