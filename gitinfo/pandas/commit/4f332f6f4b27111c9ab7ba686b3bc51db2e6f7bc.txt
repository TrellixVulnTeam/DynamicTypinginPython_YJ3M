commit 4f332f6f4b27111c9ab7ba686b3bc51db2e6f7bc
Author: Matthew Roeschke <emailformattr@gmail.com>
Date:   Sun Jun 2 16:20:15 2019 -0700

    CLN: Remove convert_objects (#26612)

diff --git a/doc/source/reference/frame.rst b/doc/source/reference/frame.rst
index dfa475684..b4fb85c02 100644
--- a/doc/source/reference/frame.rst
+++ b/doc/source/reference/frame.rst
@@ -48,7 +48,6 @@ Conversion
    :toctree: api/
 
    DataFrame.astype
-   DataFrame.convert_objects
    DataFrame.infer_objects
    DataFrame.copy
    DataFrame.isna
diff --git a/doc/source/reference/series.rst b/doc/source/reference/series.rst
index b406893e3..8fccdea97 100644
--- a/doc/source/reference/series.rst
+++ b/doc/source/reference/series.rst
@@ -56,7 +56,6 @@ Conversion
 
    Series.astype
    Series.infer_objects
-   Series.convert_objects
    Series.copy
    Series.bool
    Series.to_numpy
diff --git a/doc/source/whatsnew/v0.25.0.rst b/doc/source/whatsnew/v0.25.0.rst
index f122c7332..1cbec2230 100644
--- a/doc/source/whatsnew/v0.25.0.rst
+++ b/doc/source/whatsnew/v0.25.0.rst
@@ -483,6 +483,7 @@ Removal of prior version deprecations/changes
 - Removed the previously deprecated ``TimeGrouper`` (:issue:`16942`)
 - Removed the previously deprecated ``parse_cols`` keyword in :func:`read_excel` (:issue:`16488`)
 - Removed the previously deprecated ``pd.options.html.border`` (:issue:`16970`)
+- Removed the previously deprecated ``convert_objects`` (:issue:`11221`)
 
 .. _whatsnew_0250.performance:
 
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 33b0035e7..2428bbad7 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -113,7 +113,7 @@ class NDFrame(PandasObject, SelectionMixin):
     _internal_names_set = set(_internal_names)  # type: Set[str]
     _accessors = set()  # type: Set[str]
     _deprecations = frozenset([
-        'as_blocks', 'blocks', 'convert_objects', 'is_copy'
+        'as_blocks', 'blocks', 'is_copy'
     ])  # type: FrozenSet[str]
     _metadata = []  # type: List[str]
     _is_copy = None
@@ -5913,52 +5913,6 @@ class NDFrame(PandasObject, SelectionMixin):
                                timedelta=timedelta, coerce=coerce,
                                copy=copy)).__finalize__(self)
 
-    def convert_objects(self, convert_dates=True, convert_numeric=False,
-                        convert_timedeltas=True, copy=True):
-        """
-        Attempt to infer better dtype for object columns.
-
-        .. deprecated:: 0.21.0
-
-        Parameters
-        ----------
-        convert_dates : boolean, default True
-            If True, convert to date where possible. If 'coerce', force
-            conversion, with unconvertible values becoming NaT.
-        convert_numeric : boolean, default False
-            If True, attempt to coerce to numbers (including strings), with
-            unconvertible values becoming NaN.
-        convert_timedeltas : boolean, default True
-            If True, convert to timedelta where possible. If 'coerce', force
-            conversion, with unconvertible values becoming NaT.
-        copy : boolean, default True
-            If True, return a copy even if no copy is necessary (e.g. no
-            conversion was done). Note: This is meant for internal use, and
-            should not be confused with inplace.
-
-        Returns
-        -------
-        converted : same as input object
-
-        See Also
-        --------
-        to_datetime : Convert argument to datetime.
-        to_timedelta : Convert argument to timedelta.
-        to_numeric : Convert argument to numeric type.
-        """
-        msg = ("convert_objects is deprecated.  To re-infer data dtypes for "
-               "object columns, use {klass}.infer_objects()\nFor all "
-               "other conversions use the data-type specific converters "
-               "pd.to_datetime, pd.to_timedelta and pd.to_numeric."
-               ).format(klass=self.__class__.__name__)
-        warnings.warn(msg, FutureWarning, stacklevel=2)
-
-        return self._constructor(
-            self._data.convert(convert_dates=convert_dates,
-                               convert_numeric=convert_numeric,
-                               convert_timedeltas=convert_timedeltas,
-                               copy=copy)).__finalize__(self)
-
     def infer_objects(self):
         """
         Attempt to infer better dtypes for object columns.
diff --git a/pandas/tests/series/test_internals.py b/pandas/tests/series/test_internals.py
index f6f4a2db3..29846f10d 100644
--- a/pandas/tests/series/test_internals.py
+++ b/pandas/tests/series/test_internals.py
@@ -12,131 +12,6 @@ from pandas.util.testing import assert_series_equal
 
 class TestSeriesInternals:
 
-    def test_convert_objects(self):
-
-        s = Series([1., 2, 3], index=['a', 'b', 'c'])
-        with tm.assert_produces_warning(FutureWarning):
-            result = s.convert_objects(convert_dates=False,
-                                       convert_numeric=True)
-        assert_series_equal(result, s)
-
-        # force numeric conversion
-        r = s.copy().astype('O')
-        r['a'] = '1'
-        with tm.assert_produces_warning(FutureWarning):
-            result = r.convert_objects(convert_dates=False,
-                                       convert_numeric=True)
-        assert_series_equal(result, s)
-
-        r = s.copy().astype('O')
-        r['a'] = '1.'
-        with tm.assert_produces_warning(FutureWarning):
-            result = r.convert_objects(convert_dates=False,
-                                       convert_numeric=True)
-        assert_series_equal(result, s)
-
-        r = s.copy().astype('O')
-        r['a'] = 'garbled'
-        expected = s.copy()
-        expected['a'] = np.nan
-        with tm.assert_produces_warning(FutureWarning):
-            result = r.convert_objects(convert_dates=False,
-                                       convert_numeric=True)
-        assert_series_equal(result, expected)
-
-        # GH 4119, not converting a mixed type (e.g.floats and object)
-        s = Series([1, 'na', 3, 4])
-        with tm.assert_produces_warning(FutureWarning):
-            result = s.convert_objects(convert_numeric=True)
-        expected = Series([1, np.nan, 3, 4])
-        assert_series_equal(result, expected)
-
-        s = Series([1, '', 3, 4])
-        with tm.assert_produces_warning(FutureWarning):
-            result = s.convert_objects(convert_numeric=True)
-        expected = Series([1, np.nan, 3, 4])
-        assert_series_equal(result, expected)
-
-        # dates
-        s = Series([datetime(2001, 1, 1, 0, 0), datetime(2001, 1, 2, 0, 0),
-                    datetime(2001, 1, 3, 0, 0)])
-        s2 = Series([datetime(2001, 1, 1, 0, 0), datetime(2001, 1, 2, 0, 0),
-                     datetime(2001, 1, 3, 0, 0), 'foo', 1.0, 1,
-                     Timestamp('20010104'), '20010105'],
-                    dtype='O')
-        with tm.assert_produces_warning(FutureWarning):
-            result = s.convert_objects(convert_dates=True,
-                                       convert_numeric=False)
-        expected = Series([Timestamp('20010101'), Timestamp('20010102'),
-                           Timestamp('20010103')], dtype='M8[ns]')
-        assert_series_equal(result, expected)
-
-        with tm.assert_produces_warning(FutureWarning):
-            result = s.convert_objects(convert_dates='coerce',
-                                       convert_numeric=False)
-        with tm.assert_produces_warning(FutureWarning):
-            result = s.convert_objects(convert_dates='coerce',
-                                       convert_numeric=True)
-        assert_series_equal(result, expected)
-
-        expected = Series([Timestamp('20010101'), Timestamp('20010102'),
-                           Timestamp('20010103'),
-                           NaT, NaT, NaT, Timestamp('20010104'),
-                           Timestamp('20010105')], dtype='M8[ns]')
-        with tm.assert_produces_warning(FutureWarning):
-            result = s2.convert_objects(convert_dates='coerce',
-                                        convert_numeric=False)
-        assert_series_equal(result, expected)
-        with tm.assert_produces_warning(FutureWarning):
-            result = s2.convert_objects(convert_dates='coerce',
-                                        convert_numeric=True)
-        assert_series_equal(result, expected)
-
-        # preserver all-nans (if convert_dates='coerce')
-        s = Series(['foo', 'bar', 1, 1.0], dtype='O')
-        with tm.assert_produces_warning(FutureWarning):
-            result = s.convert_objects(convert_dates='coerce',
-                                       convert_numeric=False)
-        expected = Series([NaT] * 2 + [Timestamp(1)] * 2)
-        assert_series_equal(result, expected)
-
-        # preserver if non-object
-        s = Series([1], dtype='float32')
-        with tm.assert_produces_warning(FutureWarning):
-            result = s.convert_objects(convert_dates='coerce',
-                                       convert_numeric=False)
-        assert_series_equal(result, s)
-
-        # r = s.copy()
-        # r[0] = np.nan
-        # result = r.convert_objects(convert_dates=True,convert_numeric=False)
-        # assert result.dtype == 'M8[ns]'
-
-        # dateutil parses some single letters into today's value as a date
-        for x in 'abcdefghijklmnopqrstuvwxyz':
-            s = Series([x])
-            with tm.assert_produces_warning(FutureWarning):
-                result = s.convert_objects(convert_dates='coerce')
-            assert_series_equal(result, s)
-            s = Series([x.upper()])
-            with tm.assert_produces_warning(FutureWarning):
-                result = s.convert_objects(convert_dates='coerce')
-            assert_series_equal(result, s)
-
-    def test_convert_objects_preserve_bool(self):
-        s = Series([1, True, 3, 5], dtype=object)
-        with tm.assert_produces_warning(FutureWarning):
-            r = s.convert_objects(convert_numeric=True)
-        e = Series([1, 1, 3, 5], dtype='i8')
-        tm.assert_series_equal(r, e)
-
-    def test_convert_objects_preserve_all_bool(self):
-        s = Series([False, True, False, False], dtype=object)
-        with tm.assert_produces_warning(FutureWarning):
-            r = s.convert_objects(convert_numeric=True)
-        e = Series([False, True, False, False], dtype=bool)
-        tm.assert_series_equal(r, e)
-
     # GH 10265
     def test_convert(self):
         # Tests: All to nans, coerce, true
