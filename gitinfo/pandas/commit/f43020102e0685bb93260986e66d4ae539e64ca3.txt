commit f43020102e0685bb93260986e66d4ae539e64ca3
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Nov 4 18:54:45 2011 -0400

    ENH: add float_format option to Series.to_string, GH #333

diff --git a/pandas/core/series.py b/pandas/core/series.py
index 53b054872..95e42b108 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -356,21 +356,21 @@ copy : boolean, default False
         result = '%s\n%sLength: %d' % (result, namestr, len(self))
         return result
 
-    def to_string(self, buf=None, na_rep='NaN', nanRep=None):
+    def to_string(self, buf=None, na_rep='NaN', float_format=None, nanRep=None):
         if nanRep is not None:  # pragma: no cover
             import warnings
             warnings.warn("nanRep is deprecated, use na_rep",
                           FutureWarning)
             na_rep = nanRep
 
-        the_repr = self._get_repr(na_rep=na_rep)
+        the_repr = self._get_repr(float_format=float_format, na_rep=na_rep)
         if buf is None:
             return the_repr
         else:
             print >> buf, the_repr
 
     def _get_repr(self, name=False, print_header=False, length=True,
-                  na_rep='NaN'):
+                  na_rep='NaN', float_format=None):
         vals = self.values
         index = self.index
 
@@ -387,9 +387,14 @@ copy : boolean, default False
         maxlen = max(len(x) for x in string_index)
         padSpace = min(maxlen, 60)
 
+        if float_format is None:
+            float_format = str
+
         def _format(k, v):
             if isnull(v):
                 v = na_rep
+            if isinstance(v, (float, np.floating)):
+                v = float_format(v)
             return '%s    %s' % (str(k).ljust(padSpace), v)
 
         it = [_format(idx, v) for idx, v in izip(string_index, vals)]
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 5ce17da0b..5a0bfd6ec 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -488,6 +488,13 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         self.assert_(retval is None)
         self.assertEqual(buf.getvalue().strip(), s)
 
+        # pass float_format
+        format = '%.4f'.__mod__
+        result = self.ts.to_string(float_format=format)
+        result = [x.split()[1] for x in result.split('\n')[:-1]]
+        expected = [format(x) for x in self.ts]
+        self.assertEqual(result, expected)
+
     def test_iter(self):
         for i, val in enumerate(self.series):
             self.assertEqual(val, self.series[i])
