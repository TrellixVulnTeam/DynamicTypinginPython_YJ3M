commit 411d13f5f1dca9d3e2cdfeaaf53024e86dc1bb3a
Author: Jeffrey Tratner <jeffrey.tratner@gmail.com>
Date:   Sun Jun 30 21:44:40 2013 -0400

    CLN: Refactor string methods and add PandasObject
    
    Previous PandasObject becomes PandasContainer. New PandasObject becomes
    baseclass for more elements (like Index, Categorical, etc.), moves
    string methods to baseclass and subclassing objects need only define
    `__unicode__` methods to get all string methods for free (and Py2/3
    compatible).
    
    CLN: Cleanup extraneous str methods from Panel
    
    CLN: Remove unnecessary string methods from frame
    
    CLN: Change name of TestPandasObjects --> TestPandasContainer

diff --git a/pandas/core/base.py b/pandas/core/base.py
new file mode 100644
index 000000000..f59c8c0ae
--- /dev/null
+++ b/pandas/core/base.py
@@ -0,0 +1,53 @@
+"""
+Base class(es) for all pandas objects.
+"""
+from pandas.util import py3compat
+
+class StringMixin(object):
+    """implements string methods so long as object defines a `__unicode__` method.
+    Handles Python2/3 compatibility transparently."""
+    # side note - this could be made into a metaclass if more than one object nees
+    def __str__(self):
+        """
+        Return a string representation for a particular object.
+
+        Invoked by str(obj) in both py2/py3.
+        Yields Bytestring in Py2, Unicode String in py3.
+        """
+
+        if py3compat.PY3:
+            return self.__unicode__()
+        return self.__bytes__()
+
+    def __bytes__(self):
+        """
+        Return a string representation for a particular object.
+
+        Invoked by bytes(obj) in py3 only.
+        Yields a bytestring in both py2/py3.
+        """
+        from pandas.core.config import get_option
+
+        encoding = get_option("display.encoding")
+        return self.__unicode__().encode(encoding, 'replace')
+
+    def __repr__(self):
+        """
+        Return a string representation for a particular object.
+
+        Yields Bytestring in Py2, Unicode String in py3.
+        """
+        return str(self)
+
+class PandasObject(StringMixin):
+    """baseclass for various pandas objects"""
+
+    def __unicode__(self):
+        """
+        Return a string representation for a particular object.
+
+        Invoked by unicode(obj) in py2 only. Yields a Unicode String in both
+        py2/py3.
+        """
+        # Should be overwritten by base classes
+        return object.__repr__(self)
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 96c567cbb..ddacb98a2 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -64,10 +64,10 @@ def _isnull_new(obj):
     if lib.isscalar(obj):
         return lib.checknull(obj)
 
-    from pandas.core.generic import PandasObject
+    from pandas.core.generic import PandasContainer
     if isinstance(obj, np.ndarray):
         return _isnull_ndarraylike(obj)
-    elif isinstance(obj, PandasObject):
+    elif isinstance(obj, PandasContainer):
         # TODO: optimize for DataFrame, etc.
         return obj.apply(isnull)
     elif isinstance(obj, list) or hasattr(obj, '__array__'):
@@ -91,10 +91,10 @@ def _isnull_old(obj):
     if lib.isscalar(obj):
         return lib.checknull_old(obj)
 
-    from pandas.core.generic import PandasObject
+    from pandas.core.generic import PandasContainer
     if isinstance(obj, np.ndarray):
         return _isnull_ndarraylike_old(obj)
-    elif isinstance(obj, PandasObject):
+    elif isinstance(obj, PandasContainer):
         # TODO: optimize for DataFrame, etc.
         return obj.apply(_isnull_old)
     elif isinstance(obj, list) or hasattr(obj, '__array__'):
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 9c5108f74..da52e5c5e 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -653,28 +653,6 @@ class DataFrame(NDFrame):
 
         return repr_width < width
 
-    def __str__(self):
-        """
-        Return a string representation for a particular DataFrame
-
-        Invoked by str(df) in both py2/py3.
-        Yields Bytestring in Py2, Unicode String in py3.
-        """
-
-        if py3compat.PY3:
-            return self.__unicode__()
-        return self.__bytes__()
-
-    def __bytes__(self):
-        """
-        Return a string representation for a particular DataFrame
-
-        Invoked by bytes(df) in py3 only.
-        Yields a bytestring in both py2/py3.
-        """
-        encoding = com.get_option("display.encoding")
-        return self.__unicode__().encode(encoding, 'replace')
-
     def __unicode__(self):
         """
         Return a string representation for a particular DataFrame
@@ -714,14 +692,6 @@ class DataFrame(NDFrame):
 
         return value
 
-    def __repr__(self):
-        """
-        Return a string representation for a particular DataFrame
-
-        Yields Bytestring in Py2, Unicode String in py3.
-        """
-        return str(self)
-
     def _repr_html_(self):
         """
         Return a html representation for a particular DataFrame.
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index c41b02fdd..0c392defc 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -1,20 +1,21 @@
 # pylint: disable=W0231,E1101
 
 import numpy as np
+import pandas.lib as lib
+from pandas.core.base import PandasObject
 
 from pandas.core.index import MultiIndex
 import pandas.core.indexing as indexing
 from pandas.core.indexing import _maybe_convert_indices
 from pandas.tseries.index import DatetimeIndex
 import pandas.core.common as com
-import pandas.lib as lib
 
 
 class PandasError(Exception):
     pass
 
 
-class PandasObject(object):
+class PandasContainer(PandasObject):
 
     _AXIS_NUMBERS = {
         'index': 0,
@@ -52,6 +53,12 @@ class PandasObject(object):
         raise TypeError('{0!r} objects are mutable, thus they cannot be'
                               ' hashed'.format(self.__class__.__name__))
 
+    def __unicode__(self):
+        # unicode representation based upon iterating over self
+        # (since, by definition, `PandasContainers` are iterable)
+        prepr = '[%s]' % ','.join(map(com.pprint_thing, self))
+        return '%s(%s)' % (self.__class__.__name__, prepr)
+
 
     #----------------------------------------------------------------------
     # Axis name business
@@ -578,9 +585,10 @@ class PandasObject(object):
 
 # install the indexerse
 for _name, _indexer in indexing.get_indexers_list():
-    PandasObject._create_indexer(_name,_indexer)
+    PandasContainer._create_indexer(_name,_indexer)
 
-class NDFrame(PandasObject):
+
+class NDFrame(PandasContainer):
     """
     N-dimensional analogue of DataFrame. Store multi-dimensional in a
     size-mutable, labeled data structure
@@ -633,9 +641,6 @@ class NDFrame(PandasObject):
     def axes(self):
         return self._data.axes
 
-    def __repr__(self):
-        return 'NDFrame'
-
     @property
     def values(self):
         return self._data.as_matrix()
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 92f69a744..89623bbf2 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -466,28 +466,6 @@ class Panel(NDFrame):
     #----------------------------------------------------------------------
     # Magic methods
 
-    def __str__(self):
-        """
-        Return a string representation for a particular Panel
-
-        Invoked by str(df) in both py2/py3.
-        Yields Bytestring in Py2, Unicode String in py3.
-        """
-
-        if py3compat.PY3:
-            return self.__unicode__()
-        return self.__bytes__()
-
-    def __bytes__(self):
-        """
-        Return a string representation for a particular Panel
-
-        Invoked by bytes(df) in py3 only.
-        Yields a bytestring in both py2/py3.
-        """
-        encoding = com.get_option("display.encoding")
-        return self.__unicode__().encode(encoding, 'replace')
-
     def __unicode__(self):
         """
         Return a string representation for a particular Panel
@@ -515,14 +493,6 @@ class Panel(NDFrame):
             [class_name, dims] + [axis_pretty(a) for a in self._AXIS_ORDERS])
         return output
 
-    def __repr__(self):
-        """
-        Return a string representation for a particular Panel
-
-        Yields Bytestring in Py2, Unicode String in py3.
-        """
-        return str(self)
-
     def __iter__(self):
         return iter(getattr(self, self._info_axis))
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 7684acfe8..0870446c7 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -394,8 +394,7 @@ def _make_stat_func(nanop, name, shortname, na_action=_doc_exclude_na,
 #----------------------------------------------------------------------
 # Series class
 
-
-class Series(pa.Array, generic.PandasObject):
+class Series(generic.PandasContainer, pa.Array):
     """
     One-dimensional ndarray with axis labels (including time series).
     Labels need not be unique but must be any hashable type. The object
@@ -1096,28 +1095,6 @@ class Series(pa.Array, generic.PandasObject):
 
             return df.reset_index(level=level, drop=drop)
 
-    def __str__(self):
-        """
-        Return a string representation for a particular DataFrame
-
-        Invoked by str(df) in both py2/py3.
-        Yields Bytestring in Py2, Unicode String in py3.
-        """
-
-        if py3compat.PY3:
-            return self.__unicode__()
-        return self.__bytes__()
-
-    def __bytes__(self):
-        """
-        Return a string representation for a particular DataFrame
-
-        Invoked by bytes(df) in py3 only.
-        Yields a bytestring in both py2/py3.
-        """
-        encoding = com.get_option("display.encoding")
-        return self.__unicode__().encode(encoding, 'replace')
-
     def __unicode__(self):
         """
         Return a string representation for a particular DataFrame
@@ -1142,14 +1119,6 @@ class Series(pa.Array, generic.PandasObject):
             raise AssertionError()
         return result
 
-    def __repr__(self):
-        """
-        Return a string representation for a particular Series
-
-        Yields Bytestring in Py2, Unicode String in py3.
-        """
-        return str(self)
-
     def _tidy_repr(self, max_vals=20):
         """
 
diff --git a/pandas/io/tests/test_json/test_pandas.py b/pandas/io/tests/test_json/test_pandas.py
index 997229487..e57eacc80 100644
--- a/pandas/io/tests/test_json/test_pandas.py
+++ b/pandas/io/tests/test_json/test_pandas.py
@@ -33,7 +33,7 @@ _tsframe = DataFrame(_tsd)
 
 _mixed_frame = _frame.copy()
 
-class TestPandasObjects(unittest.TestCase):
+class TestPandasContainer(unittest.TestCase):
 
     def setUp(self):
         self.ts = tm.makeTimeSeries()
@@ -68,7 +68,7 @@ class TestPandasObjects(unittest.TestCase):
                     if type(detail) == raise_ok:
                         return
                     raise
-                    
+
             unser = unser.sort()
 
             if dtype is False:
@@ -104,7 +104,7 @@ class TestPandasObjects(unittest.TestCase):
                 _check_orient(df, "split", dtype=dtype)
                 _check_orient(df, "index", dtype=dtype)
                 _check_orient(df, "values", dtype=dtype)
-            
+
             _check_orient(df, "columns", dtype=dtype, convert_axes=False)
             _check_orient(df, "records", dtype=dtype, convert_axes=False)
             _check_orient(df, "split", dtype=dtype, convert_axes=False)
@@ -347,7 +347,7 @@ class TestPandasObjects(unittest.TestCase):
         assert_series_equal(result,ts)
 
     def test_date_format(self):
-        
+
         df = self.tsframe.copy()
         df['date'] = Timestamp('20130101')
         df_orig = df.copy()
@@ -412,7 +412,7 @@ class TestPandasObjects(unittest.TestCase):
     @network
     @slow
     def test_round_trip_exception_(self):
-		# GH 3867
+        # GH 3867
 
         df = pd.read_csv('https://raw.github.com/hayd/lahman2012/master/csvs/Teams.csv')
         s = df.to_json()
@@ -429,9 +429,9 @@ class TestPandasObjects(unittest.TestCase):
             result = read_json(url,convert_dates=True)
             for c in ['created_at','closed_at','updated_at']:
                 self.assert_(result[c].dtype == 'datetime64[ns]')
-            
+
             url = 'http://search.twitter.com/search.json?q=pandas%20python'
             result = read_json(url)
-            
+
         except urllib2.URLError:
             raise nose.SkipTest
