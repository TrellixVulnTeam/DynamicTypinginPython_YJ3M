commit 010741f3eb4ec6f05edc4168549ea8b05cb018fc
Author: unutbu <unutbu@gmail.com>
Date:   Tue Dec 2 19:54:42 2014 -0500

    BUG: Fixed ValueError raised by cummin/cummax when datetime64 Series contains NaT. (:issue:`8965`)

diff --git a/doc/source/whatsnew/v0.15.2.txt b/doc/source/whatsnew/v0.15.2.txt
index 929471acb..0a0bed826 100644
--- a/doc/source/whatsnew/v0.15.2.txt
+++ b/doc/source/whatsnew/v0.15.2.txt
@@ -166,3 +166,4 @@ Bug Fixes
   not lexically sorted or unique (:issue:`7724`)
 - BUG CSV: fix problem with trailing whitespace in skipped rows, (:issue:`8679`), (:issue:`8661`)
 - Regression in ``Timestamp`` does not parse 'Z' zone designator for UTC (:issue:`8771`)
+- Fixed ValueError raised by cummin/cummax when datetime64 Series contains NaT. (:issue:`8965`)
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 52f37ee24..b948ceb9b 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -4112,13 +4112,17 @@ equivalent of the ``numpy.ndarray`` method ``argmin``.""", nanops.nanmin)
                     axis = self._get_axis_number(axis)
 
                 y = _values_from_object(self).copy()
-                if not issubclass(y.dtype.type, (np.integer, np.bool_)):
+
+                if skipna and issubclass(y.dtype.type, 
+                                         (np.datetime64, np.timedelta64)):
+                    result = accum_func(y, axis)
+                    mask = isnull(self)
+                    np.putmask(result, mask, pd.tslib.iNaT)
+                elif skipna and not issubclass(y.dtype.type, (np.integer, np.bool_)):
                     mask = isnull(self)
-                    if skipna:
-                        np.putmask(y, mask, mask_a)
+                    np.putmask(y, mask, mask_a)
                     result = accum_func(y, axis)
-                    if skipna:
-                        np.putmask(result, mask, mask_b)
+                    np.putmask(result, mask, mask_b)
                 else:
                     result = accum_func(y, axis)
 
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index c4c2eebac..df48c5e62 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -2309,6 +2309,62 @@ class TestSeries(tm.TestCase, CheckNameIntegration):
 
         self.assert_numpy_array_equal(result, expected)
 
+    def test_cummin_datetime64(self):
+        s = pd.Series(pd.to_datetime(
+            ['NaT', '2000-1-2', 'NaT', '2000-1-1', 'NaT', '2000-1-3']))
+
+        expected = pd.Series(pd.to_datetime(
+            ['NaT', '2000-1-2', 'NaT', '2000-1-1', 'NaT', '2000-1-1']))
+        result = s.cummin(skipna=True)
+        self.assert_series_equal(expected, result)
+
+        expected = pd.Series(pd.to_datetime(
+            ['NaT', '2000-1-2', '2000-1-2', '2000-1-1', '2000-1-1', '2000-1-1']))
+        result = s.cummin(skipna=False)
+        self.assert_series_equal(expected, result)
+
+    def test_cummax_datetime64(self):
+        s = pd.Series(pd.to_datetime(
+            ['NaT', '2000-1-2', 'NaT', '2000-1-1', 'NaT', '2000-1-3']))
+
+        expected = pd.Series(pd.to_datetime(
+            ['NaT', '2000-1-2', 'NaT', '2000-1-2', 'NaT', '2000-1-3']))
+        result = s.cummax(skipna=True)
+        self.assert_series_equal(expected, result)
+
+        expected = pd.Series(pd.to_datetime(
+            ['NaT', '2000-1-2', '2000-1-2', '2000-1-2', '2000-1-2', '2000-1-3']))
+        result = s.cummax(skipna=False)
+        self.assert_series_equal(expected, result)
+
+    def test_cummin_timedelta64(self):
+        s = pd.Series(pd.to_timedelta(
+            ['NaT', '2 min', 'NaT', '1 min', 'NaT', '3 min', ]))
+
+        expected = pd.Series(pd.to_timedelta(
+            ['NaT', '2 min', 'NaT', '1 min', 'NaT', '1 min', ]))
+        result = s.cummin(skipna=True)
+        self.assert_series_equal(expected, result)
+
+        expected = pd.Series(pd.to_timedelta(
+            ['NaT', '2 min', '2 min', '1 min', '1 min', '1 min', ]))
+        result = s.cummin(skipna=False)
+        self.assert_series_equal(expected, result)
+
+    def test_cummax_timedelta64(self):
+        s = pd.Series(pd.to_timedelta(
+            ['NaT', '2 min', 'NaT', '1 min', 'NaT', '3 min', ]))
+
+        expected = pd.Series(pd.to_timedelta(
+            ['NaT', '2 min', 'NaT', '2 min', 'NaT', '3 min', ]))
+        result = s.cummax(skipna=True)
+        self.assert_series_equal(expected, result)
+
+        expected = pd.Series(pd.to_timedelta(
+            ['NaT', '2 min', '2 min', '2 min', '2 min', '3 min', ]))
+        result = s.cummax(skipna=False)
+        self.assert_series_equal(expected, result)
+
     def test_npdiff(self):
         raise nose.SkipTest("skipping due to Series no longer being an "
                             "ndarray")
