commit 921ce47c1a3da6b24965890c622aed61423d3bf7
Author: sinhrks <sinhrks@gmail.com>
Date:   Thu Oct 20 06:58:29 2016 -0400

    BUG: pivot_table may raise TypeError without values
    
    ``pivot_table`` raises TypeError`` when ``index`` or ``columns`` is array-like and
    ``values`` is not specified.
    
    Author: sinhrks <sinhrks@gmail.com>
    
    Closes #14380 from sinhrks/pivot_table_bug and squashes the following commits:
    
    be426db [sinhrks] BUG: pivot_table may raise TypeError without values

diff --git a/doc/source/whatsnew/v0.19.1.txt b/doc/source/whatsnew/v0.19.1.txt
index 292d9698e..30593c1b2 100644
--- a/doc/source/whatsnew/v0.19.1.txt
+++ b/doc/source/whatsnew/v0.19.1.txt
@@ -53,3 +53,6 @@ Bug Fixes
 - Bug in ``MultiIndex.set_levels`` where illegal level values were still set after raising an error (:issue:`13754`)
 - Bug in ``DataFrame.to_json`` where ``lines=True`` and a value contained a ``}`` character (:issue:`14391`)
 - Bug in ``df.groupby`` causing an ``AttributeError`` when grouping a single index frame by a column and the index level (:issue`14327`)
+
+- Bug in ``pd.pivot_table`` may raise ``TypeError`` or ``ValueError`` when ``index`` or ``columns``
+  is not scalar and ``values`` is not specified (:issue:`14380`)
diff --git a/pandas/tools/pivot.py b/pandas/tools/pivot.py
index 94b464f6f..9e064a1d1 100644
--- a/pandas/tools/pivot.py
+++ b/pandas/tools/pivot.py
@@ -101,10 +101,7 @@ def pivot_table(data, values=None, index=None, columns=None, aggfunc='mean',
         else:
             values_multi = False
             values = [values]
-    else:
-        values = list(data.columns.drop(keys))
 
-    if values_passed:
         to_filter = []
         for x in keys + values:
             if isinstance(x, Grouper):
@@ -117,6 +114,15 @@ def pivot_table(data, values=None, index=None, columns=None, aggfunc='mean',
         if len(to_filter) < len(data.columns):
             data = data[to_filter]
 
+    else:
+        values = data.columns
+        for key in keys:
+            try:
+                values = values.drop(key)
+            except (TypeError, ValueError):
+                pass
+        values = list(values)
+
     grouped = data.groupby(keys)
     agged = grouped.agg(aggfunc)
 
diff --git a/pandas/tools/tests/test_pivot.py b/pandas/tools/tests/test_pivot.py
index 75c6db23b..5944fa1b3 100644
--- a/pandas/tools/tests/test_pivot.py
+++ b/pandas/tools/tests/test_pivot.py
@@ -131,6 +131,39 @@ class TestPivotTable(tm.TestCase):
         expected = Series(dict(float64=2))
         tm.assert_series_equal(result, expected)
 
+    def test_pivot_no_values(self):
+        # GH 14380
+        idx = pd.DatetimeIndex(['2011-01-01', '2011-02-01', '2011-01-02',
+                                '2011-01-01', '2011-01-02'])
+        df = pd.DataFrame({'A': [1, 2, 3, 4, 5]},
+                          index=idx)
+        res = df.pivot_table(index=df.index.month, columns=df.index.day)
+
+        exp_columns = pd.MultiIndex.from_tuples([('A', 1), ('A', 2)])
+        exp = pd.DataFrame([[2.5, 4.0], [2.0, np.nan]],
+                           index=[1, 2], columns=exp_columns)
+        tm.assert_frame_equal(res, exp)
+
+        df = pd.DataFrame({'A': [1, 2, 3, 4, 5],
+                           'dt': pd.date_range('2011-01-01', freq='D',
+                                               periods=5)},
+                          index=idx)
+        res = df.pivot_table(index=df.index.month,
+                             columns=pd.Grouper(key='dt', freq='M'))
+        exp_columns = pd.MultiIndex.from_tuples([('A',
+                                                  pd.Timestamp('2011-01-31'))])
+        exp_columns.names = [None, 'dt']
+        exp = pd.DataFrame([3.25, 2.0],
+                           index=[1, 2], columns=exp_columns)
+        tm.assert_frame_equal(res, exp)
+
+        res = df.pivot_table(index=pd.Grouper(freq='A'),
+                             columns=pd.Grouper(key='dt', freq='M'))
+        exp = pd.DataFrame([3],
+                           index=pd.DatetimeIndex(['2011-12-31']),
+                           columns=exp_columns)
+        tm.assert_frame_equal(res, exp)
+
     def test_pivot_multi_values(self):
         result = pivot_table(self.data, values=['D', 'E'],
                              index='A', columns=['B', 'C'], fill_value=0)
