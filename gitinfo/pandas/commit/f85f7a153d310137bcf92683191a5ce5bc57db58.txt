commit f85f7a153d310137bcf92683191a5ce5bc57db58
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Mon Mar 4 10:40:36 2019 -0800

    TST: inline empty_frame = DataFrame({}) fixture (#24886)

diff --git a/pandas/tests/frame/common.py b/pandas/tests/frame/common.py
index 2ea087c05..5624f7c13 100644
--- a/pandas/tests/frame/common.py
+++ b/pandas/tests/frame/common.py
@@ -85,7 +85,7 @@ class TestData(object):
 
     @cache_readonly
     def empty(self):
-        return pd.DataFrame({})
+        return pd.DataFrame()
 
     @cache_readonly
     def ts1(self):
diff --git a/pandas/tests/frame/conftest.py b/pandas/tests/frame/conftest.py
index 69ee614ab..fbe03325a 100644
--- a/pandas/tests/frame/conftest.py
+++ b/pandas/tests/frame/conftest.py
@@ -127,14 +127,6 @@ def timezone_frame():
     return df
 
 
-@pytest.fixture
-def empty_frame():
-    """
-    Fixture for empty DataFrame
-    """
-    return DataFrame({})
-
-
 @pytest.fixture
 def simple_frame():
     """
diff --git a/pandas/tests/frame/test_analytics.py b/pandas/tests/frame/test_analytics.py
index 43a45bb91..994187a62 100644
--- a/pandas/tests/frame/test_analytics.py
+++ b/pandas/tests/frame/test_analytics.py
@@ -1096,7 +1096,9 @@ class TestDataFrameAnalytics(object):
         assert df['off1'].dtype == 'timedelta64[ns]'
         assert df['off2'].dtype == 'timedelta64[ns]'
 
-    def test_sum_corner(self, empty_frame):
+    def test_sum_corner(self):
+        empty_frame = DataFrame()
+
         axis0 = empty_frame.sum(0)
         axis1 = empty_frame.sum(1)
         assert isinstance(axis0, Series)
diff --git a/pandas/tests/frame/test_api.py b/pandas/tests/frame/test_api.py
index 0934dd206..e561b327e 100644
--- a/pandas/tests/frame/test_api.py
+++ b/pandas/tests/frame/test_api.py
@@ -142,7 +142,9 @@ class SharedWithSparse(object):
             assert key not in dir(df)
         assert isinstance(df.__getitem__('A'), pd.DataFrame)
 
-    def test_not_hashable(self, empty_frame):
+    def test_not_hashable(self):
+        empty_frame = DataFrame()
+
         df = self.klass([1])
         pytest.raises(TypeError, hash, df)
         pytest.raises(TypeError, hash, empty_frame)
@@ -171,7 +173,8 @@ class SharedWithSparse(object):
 
         pytest.raises(ValueError, float_frame._get_agg_axis, 2)
 
-    def test_nonzero(self, float_frame, float_string_frame, empty_frame):
+    def test_nonzero(self, float_frame, float_string_frame):
+        empty_frame = DataFrame()
         assert empty_frame.empty
 
         assert not float_frame.empty
diff --git a/pandas/tests/frame/test_apply.py b/pandas/tests/frame/test_apply.py
index a4cd1aa3b..4d1e3e7ae 100644
--- a/pandas/tests/frame/test_apply.py
+++ b/pandas/tests/frame/test_apply.py
@@ -74,8 +74,10 @@ class TestDataFrameApply():
         result = df.apply(lambda x: x, axis=1)
         assert_frame_equal(result, df)
 
-    def test_apply_empty(self, float_frame, empty_frame):
+    def test_apply_empty(self, float_frame):
         # empty
+        empty_frame = DataFrame()
+
         applied = empty_frame.apply(np.sqrt)
         assert applied.empty
 
@@ -97,8 +99,10 @@ class TestDataFrameApply():
         result = expected.apply(lambda x: x['a'], axis=1)
         assert_frame_equal(expected, result)
 
-    def test_apply_with_reduce_empty(self, empty_frame):
+    def test_apply_with_reduce_empty(self):
         # reduce with an empty DataFrame
+        empty_frame = DataFrame()
+
         x = []
         result = empty_frame.apply(x.append, axis=1, result_type='expand')
         assert_frame_equal(result, empty_frame)
@@ -116,7 +120,9 @@ class TestDataFrameApply():
         # Ensure that x.append hasn't been called
         assert x == []
 
-    def test_apply_deprecate_reduce(self, empty_frame):
+    def test_apply_deprecate_reduce(self):
+        empty_frame = DataFrame()
+
         x = []
         with tm.assert_produces_warning(FutureWarning):
             empty_frame.apply(x.append, axis=1, reduce=True)
diff --git a/pandas/tests/frame/test_block_internals.py b/pandas/tests/frame/test_block_internals.py
index 5419f4d51..39d84f2e6 100644
--- a/pandas/tests/frame/test_block_internals.py
+++ b/pandas/tests/frame/test_block_internals.py
@@ -347,7 +347,9 @@ class TestDataFrameBlockInternals():
         copy = float_string_frame.copy()
         assert copy._data is not float_string_frame._data
 
-    def test_pickle(self, float_string_frame, empty_frame, timezone_frame):
+    def test_pickle(self, float_string_frame, timezone_frame):
+        empty_frame = DataFrame()
+
         unpickled = tm.round_trip_pickle(float_string_frame)
         assert_frame_equal(float_string_frame, unpickled)
 
diff --git a/pandas/tests/frame/test_constructors.py b/pandas/tests/frame/test_constructors.py
index a8a78b26e..b32255da3 100644
--- a/pandas/tests/frame/test_constructors.py
+++ b/pandas/tests/frame/test_constructors.py
@@ -247,7 +247,7 @@ class TestDataFrameConstructors(TestData):
         assert isna(frame['col3']).all()
 
         # Corner cases
-        assert len(DataFrame({})) == 0
+        assert len(DataFrame()) == 0
 
         # mix dict and array, wrong size - no spec for which error should raise
         # first
diff --git a/pandas/tests/frame/test_reshape.py b/pandas/tests/frame/test_reshape.py
index daac084f6..4fe5172fe 100644
--- a/pandas/tests/frame/test_reshape.py
+++ b/pandas/tests/frame/test_reshape.py
@@ -58,7 +58,7 @@ class TestDataFrameReshape(TestData):
     def test_pivot_empty(self):
         df = DataFrame({}, columns=['a', 'b', 'c'])
         result = df.pivot('a', 'b', 'c')
-        expected = DataFrame({})
+        expected = DataFrame()
         tm.assert_frame_equal(result, expected, check_names=False)
 
     def test_pivot_integer_bug(self):
diff --git a/pandas/tests/series/conftest.py b/pandas/tests/series/conftest.py
index 431aacb1c..367e7a1ba 100644
--- a/pandas/tests/series/conftest.py
+++ b/pandas/tests/series/conftest.py
@@ -1,6 +1,5 @@
 import pytest
 
-from pandas import Series
 import pandas.util.testing as tm
 
 
@@ -32,11 +31,3 @@ def object_series():
     s = tm.makeObjectSeries()
     s.name = 'objects'
     return s
-
-
-@pytest.fixture
-def empty_series():
-    """
-    Fixture for empty Series
-    """
-    return Series([], index=[])
diff --git a/pandas/tests/series/test_constructors.py b/pandas/tests/series/test_constructors.py
index d92ca4875..8525b8776 100644
--- a/pandas/tests/series/test_constructors.py
+++ b/pandas/tests/series/test_constructors.py
@@ -47,7 +47,9 @@ class TestSeriesConstructors():
         assert int(Series([1.])) == 1
         assert long(Series([1.])) == 1
 
-    def test_constructor(self, datetime_series, empty_series):
+    def test_constructor(self, datetime_series):
+        empty_series = Series()
+
         assert datetime_series.index.is_all_dates
 
         # Pass in Series
