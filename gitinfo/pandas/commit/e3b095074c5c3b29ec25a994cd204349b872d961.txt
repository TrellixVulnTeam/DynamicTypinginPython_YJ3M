commit e3b095074c5c3b29ec25a994cd204349b872d961
Author: Thein Oo <thoo@users.noreply.github.com>
Date:   Mon Feb 4 18:50:01 2019 -0500

    Fix validation error type `SS05` and check in CI  (#25133)

diff --git a/ci/code_checks.sh b/ci/code_checks.sh
index 353583064..d16249724 100755
--- a/ci/code_checks.sh
+++ b/ci/code_checks.sh
@@ -240,8 +240,8 @@ fi
 ### DOCSTRINGS ###
 if [[ -z "$CHECK" || "$CHECK" == "docstrings" ]]; then
 
-    MSG='Validate docstrings (GL06, GL07, GL09, SS04, PR03, PR05, EX04, RT04)' ; echo $MSG
-    $BASE_DIR/scripts/validate_docstrings.py --format=azure --errors=GL06,GL07,GL09,SS04,PR03,PR05,EX04,RT04
+    MSG='Validate docstrings (GL06, GL07, GL09, SS04, PR03, PR05, EX04, RT04, SS05)' ; echo $MSG
+    $BASE_DIR/scripts/validate_docstrings.py --format=azure --errors=GL06,GL07,GL09,SS04,PR03,PR05,EX04,RT04,SS05
     RET=$(($RET + $?)) ; echo $MSG "DONE"
 
 fi
diff --git a/pandas/_libs/tslibs/nattype.pyx b/pandas/_libs/tslibs/nattype.pyx
index f2de3fda3..b64c3479f 100644
--- a/pandas/_libs/tslibs/nattype.pyx
+++ b/pandas/_libs/tslibs/nattype.pyx
@@ -183,7 +183,9 @@ cdef class _NaT(datetime):
         return np.datetime64(NPY_NAT, 'ns')
 
     def to_datetime64(self):
-        """ Returns a numpy.datetime64 object with 'ns' precision """
+        """
+        Return a numpy.datetime64 object with 'ns' precision.
+        """
         return np.datetime64('NaT', 'ns')
 
     def __repr__(self):
@@ -448,7 +450,7 @@ class NaTType(_NaT):
         """
         Timestamp.now(tz=None)
 
-        Returns new Timestamp object representing current time local to
+        Return new Timestamp object representing current time local to
         tz.
 
         Parameters
diff --git a/pandas/_libs/tslibs/timestamps.pyx b/pandas/_libs/tslibs/timestamps.pyx
index a9be60214..cad63b432 100644
--- a/pandas/_libs/tslibs/timestamps.pyx
+++ b/pandas/_libs/tslibs/timestamps.pyx
@@ -340,7 +340,9 @@ cdef class _Timestamp(datetime):
                         self.microsecond, self.tzinfo)
 
     cpdef to_datetime64(self):
-        """ Returns a numpy.datetime64 object with 'ns' precision """
+        """
+        Return a numpy.datetime64 object with 'ns' precision.
+        """
         return np.datetime64(self.value, 'ns')
 
     def __add__(self, other):
@@ -614,7 +616,7 @@ class Timestamp(_Timestamp):
         """
         Timestamp.now(tz=None)
 
-        Returns new Timestamp object representing current time local to
+        Return new Timestamp object representing current time local to
         tz.
 
         Parameters
diff --git a/pandas/core/arrays/categorical.py b/pandas/core/arrays/categorical.py
index 6259ead5e..e26f6cb03 100644
--- a/pandas/core/arrays/categorical.py
+++ b/pandas/core/arrays/categorical.py
@@ -214,7 +214,7 @@ setter to change values in the categorical.
 
 class Categorical(ExtensionArray, PandasObject):
     """
-    Represents a categorical variable in classic R / S-plus fashion
+    Represent a categorical variable in classic R / S-plus fashion
 
     `Categoricals` can only take on only a limited, and usually fixed, number
     of possible values (`categories`). In contrast to statistical categorical
@@ -747,7 +747,7 @@ class Categorical(ExtensionArray, PandasObject):
 
     def set_ordered(self, value, inplace=False):
         """
-        Sets the ordered attribute to the boolean value
+        Set the ordered attribute to the boolean value
 
         Parameters
         ----------
@@ -793,7 +793,7 @@ class Categorical(ExtensionArray, PandasObject):
     def set_categories(self, new_categories, ordered=None, rename=False,
                        inplace=False):
         """
-        Sets the categories to the specified new_categories.
+        Set the categories to the specified new_categories.
 
         `new_categories` can include new categories (which will result in
         unused categories) or remove old categories (which results in values
@@ -864,7 +864,7 @@ class Categorical(ExtensionArray, PandasObject):
 
     def rename_categories(self, new_categories, inplace=False):
         """
-        Renames categories.
+        Rename categories.
 
         Parameters
         ----------
@@ -958,7 +958,7 @@ class Categorical(ExtensionArray, PandasObject):
 
     def reorder_categories(self, new_categories, ordered=None, inplace=False):
         """
-        Reorders categories as specified in new_categories.
+        Reorder categories as specified in new_categories.
 
         `new_categories` need to include all old categories and no new category
         items.
@@ -1051,7 +1051,7 @@ class Categorical(ExtensionArray, PandasObject):
 
     def remove_categories(self, removals, inplace=False):
         """
-        Removes the specified categories.
+        Remove the specified categories.
 
         `removals` must be included in the old categories. Values which were in
         the removed categories will be set to NaN
@@ -1104,7 +1104,7 @@ class Categorical(ExtensionArray, PandasObject):
 
     def remove_unused_categories(self, inplace=False):
         """
-        Removes categories which are not used.
+        Remove categories which are not used.
 
         Parameters
         ----------
@@ -1454,7 +1454,7 @@ class Categorical(ExtensionArray, PandasObject):
 
     def value_counts(self, dropna=True):
         """
-        Returns a Series containing counts of each category.
+        Return a Series containing counts of each category.
 
         Every category will have an entry, even those with a count of 0.
 
@@ -1570,7 +1570,7 @@ class Categorical(ExtensionArray, PandasObject):
 
     def sort_values(self, inplace=False, ascending=True, na_position='last'):
         """
-        Sorts the Categorical by category value returning a new
+        Sort the Categorical by category value returning a new
         Categorical by default.
 
         While an ordering is applied to the category values, sorting in this
diff --git a/pandas/core/dtypes/common.py b/pandas/core/dtypes/common.py
index 0379a3d3e..4be7eb8dd 100644
--- a/pandas/core/dtypes/common.py
+++ b/pandas/core/dtypes/common.py
@@ -2006,7 +2006,7 @@ def _validate_date_like_dtype(dtype):
 
 def pandas_dtype(dtype):
     """
-    Converts input into a pandas only dtype object or a numpy dtype object.
+    Convert input into a pandas only dtype object or a numpy dtype object.
 
     Parameters
     ----------
diff --git a/pandas/core/dtypes/dtypes.py b/pandas/core/dtypes/dtypes.py
index f84471c3b..ac38b2fbb 100644
--- a/pandas/core/dtypes/dtypes.py
+++ b/pandas/core/dtypes/dtypes.py
@@ -17,7 +17,8 @@ from .inference import is_list_like
 
 
 def register_extension_dtype(cls):
-    """Class decorator to register an ExtensionType with pandas.
+    """
+    Register an ExtensionType with pandas as class decorator.
 
     .. versionadded:: 0.24.0
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index b11d14377..afc4194e7 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -6009,7 +6009,7 @@ class DataFrame(NDFrame):
         return unstack(self, level, fill_value)
 
     _shared_docs['melt'] = ("""
-    Unpivots a DataFrame from wide format to long format, optionally
+    Unpivot a DataFrame from wide format to long format, optionally
     leaving identifier variables set.
 
     This function is useful to massage a DataFrame into a format where one
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 10d866d67..d03d78bd9 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -10125,7 +10125,7 @@ class NDFrame(PandasObject, SelectionMixin):
 
         cls.ptp = _make_stat_function(
             cls, 'ptp', name, name2, axis_descr,
-            """Returns the difference between the maximum value and the
+            """Return the difference between the maximum value and the
             minimum value in the object. This is the equivalent of the
             ``numpy.ndarray`` method ``ptp``.\n\n.. deprecated:: 0.24.0
                 Use numpy.ptp instead""",
diff --git a/pandas/core/groupby/generic.py b/pandas/core/groupby/generic.py
index c5142a4ee..78aa6d13a 100644
--- a/pandas/core/groupby/generic.py
+++ b/pandas/core/groupby/generic.py
@@ -1021,7 +1021,9 @@ class SeriesGroupBy(GroupBy):
         return filtered
 
     def nunique(self, dropna=True):
-        """ Returns number of unique elements in the group """
+        """
+        Return number of unique elements in the group.
+        """
         ids, _, _ = self.grouper.group_info
 
         val = self.obj.get_values()
diff --git a/pandas/core/groupby/groupby.py b/pandas/core/groupby/groupby.py
index 8766fdbc2..bee806df8 100644
--- a/pandas/core/groupby/groupby.py
+++ b/pandas/core/groupby/groupby.py
@@ -625,7 +625,7 @@ b  2""")
 
     def get_group(self, name, obj=None):
         """
-        Constructs NDFrame from group with provided name.
+        Construct NDFrame from group with provided name.
 
         Parameters
         ----------
@@ -1047,7 +1047,7 @@ class GroupBy(_GroupBy):
     @Appender(_common_see_also)
     def any(self, skipna=True):
         """
-        Returns True if any value in the group is truthful, else False.
+        Return True if any value in the group is truthful, else False.
 
         Parameters
         ----------
@@ -1060,7 +1060,7 @@ class GroupBy(_GroupBy):
     @Appender(_common_see_also)
     def all(self, skipna=True):
         """
-        Returns True if all values in the group are truthful, else False.
+        Return True if all values in the group are truthful, else False.
 
         Parameters
         ----------
@@ -1813,7 +1813,7 @@ class GroupBy(_GroupBy):
     def rank(self, method='average', ascending=True, na_option='keep',
              pct=False, axis=0):
         """
-        Provides the rank of values within each group.
+        Provide the rank of values within each group.
 
         Parameters
         ----------
@@ -2039,7 +2039,7 @@ class GroupBy(_GroupBy):
     @Substitution(name='groupby', see_also=_common_see_also)
     def head(self, n=5):
         """
-        Returns first n rows of each group.
+        Return first n rows of each group.
 
         Essentially equivalent to ``.apply(lambda x: x.head(n))``,
         except ignores as_index flag.
@@ -2067,7 +2067,7 @@ class GroupBy(_GroupBy):
     @Substitution(name='groupby', see_also=_common_see_also)
     def tail(self, n=5):
         """
-        Returns last n rows of each group.
+        Return last n rows of each group.
 
         Essentially equivalent to ``.apply(lambda x: x.tail(n))``,
         except ignores as_index flag.
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index d0b44db84..664bf3a40 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -4049,7 +4049,7 @@ class Index(IndexOpsMixin, PandasObject):
 
     def equals(self, other):
         """
-        Determines if two Index objects contain the same elements.
+        Determine if two Index objects contain the same elements.
         """
         if self.is_(other):
             return True
@@ -4144,7 +4144,7 @@ class Index(IndexOpsMixin, PandasObject):
 
     def asof_locs(self, where, mask):
         """
-        Finds the locations (indices) of the labels from the index for
+        Find the locations (indices) of the labels from the index for
         every entry in the `where` argument.
 
         As in the `asof` function, if the label (a particular entry in
diff --git a/pandas/core/indexes/category.py b/pandas/core/indexes/category.py
index e43b64827..0a5536854 100644
--- a/pandas/core/indexes/category.py
+++ b/pandas/core/indexes/category.py
@@ -232,7 +232,7 @@ class CategoricalIndex(Index, accessor.PandasDelegate):
 
     def equals(self, other):
         """
-        Determines if two CategorialIndex objects contain the same elements.
+        Determine if two CategorialIndex objects contain the same elements.
         """
         if self.is_(other):
             return True
diff --git a/pandas/core/indexes/datetimes.py b/pandas/core/indexes/datetimes.py
index 9c46860eb..f34eb75d3 100644
--- a/pandas/core/indexes/datetimes.py
+++ b/pandas/core/indexes/datetimes.py
@@ -1284,7 +1284,7 @@ class DatetimeIndex(DatetimeIndexOpsMixin, Int64Index, DatetimeDelegateMixin):
 
     def indexer_at_time(self, time, asof=False):
         """
-        Returns index locations of index values at particular time of day
+        Return index locations of index values at particular time of day
         (e.g. 9:30AM).
 
         Parameters
diff --git a/pandas/core/ops.py b/pandas/core/ops.py
index b3b3b9dd2..dbdabecaf 100644
--- a/pandas/core/ops.py
+++ b/pandas/core/ops.py
@@ -447,7 +447,7 @@ for key in _op_names:
         _op_descriptions[reverse_op]['reverse'] = key
 
 _flex_doc_SERIES = """
-{desc} of series and other, element-wise (binary operator `{op_name}`).
+Return {desc} of series and other, element-wise (binary operator `{op_name}`).
 
 Equivalent to ``{equiv}``, but with support to substitute a fill_value for
 missing data in one of the inputs.
@@ -547,7 +547,7 @@ Mismatched indices will be unioned together
 """
 
 _flex_doc_FRAME = """
-{desc} of dataframe and other, element-wise (binary operator `{op_name}`).
+Get {desc} of dataframe and other, element-wise (binary operator `{op_name}`).
 
 Equivalent to ``{equiv}``, but with support to substitute a fill_value
 for missing data in one of the inputs. With reverse version, `{reverse}`.
@@ -701,7 +701,7 @@ B square        0.0      0.0
 """
 
 _flex_comp_doc_FRAME = """
-{desc} of dataframe and other, element-wise (binary operator `{op_name}`).
+Get {desc} of dataframe and other, element-wise (binary operator `{op_name}`).
 
 Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison
 operators.
@@ -847,7 +847,7 @@ Q2 A  False     True
 """
 
 _flex_doc_PANEL = """
-{desc} of series and other, element-wise (binary operator `{op_name}`).
+Return {desc} of series and other, element-wise (binary operator `{op_name}`).
 Equivalent to ``{equiv}``.
 
 Parameters
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 8dd604fb5..c8afafde4 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -999,7 +999,7 @@ class Panel(NDFrame):
 
     def apply(self, func, axis='major', **kwargs):
         """
-        Applies function along axis (or axes) of the Panel.
+        Apply function along axis (or axes) of the Panel.
 
         Parameters
         ----------
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 427da96c5..fb84a36d2 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -580,7 +580,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
     def put(self, *args, **kwargs):
         """
-        Applies the `put` method to its `values` attribute if it has one.
+        Apply the `put` method to its `values` attribute if it has one.
 
         See Also
         --------
@@ -1456,7 +1456,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
     def keys(self):
         """
-        Alias for index.
+        Return alias for index.
         """
         return self.index
 
@@ -2987,7 +2987,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
     def argsort(self, axis=0, kind='quicksort', order=None):
         """
-        Overrides ndarray.argsort. Argsorts the value, omitting NA/null values,
+        Override ndarray.argsort. Argsorts the value, omitting NA/null values,
         and places the result in the same locations as the non-NA values.
 
         Parameters
diff --git a/pandas/core/strings.py b/pandas/core/strings.py
index ca79dcd94..bfa36cb4b 100644
--- a/pandas/core/strings.py
+++ b/pandas/core/strings.py
@@ -2869,7 +2869,7 @@ class StringMethods(NoNewAttributesMixin):
         return self._wrap_result(result)
 
     _shared_docs['len'] = ("""
-    Computes the length of each element in the Series/Index. The element may be
+    Compute the length of each element in the Series/Index. The element may be
     a sequence (such as a string, tuple or list) or a collection
     (such as a dictionary).
 
diff --git a/pandas/core/window.py b/pandas/core/window.py
index 5556a0130..060226d94 100644
--- a/pandas/core/window.py
+++ b/pandas/core/window.py
@@ -438,7 +438,7 @@ class _Window(PandasObject, SelectionMixin):
 
 class Window(_Window):
     """
-    Provides rolling window calculations.
+    Provide rolling window calculations.
 
     .. versionadded:: 0.18.0
 
@@ -1803,7 +1803,7 @@ class Rolling(_Rolling_and_Expanding):
 
 class RollingGroupby(_GroupByMixin, Rolling):
     """
-    Provides a rolling groupby implementation.
+    Provide a rolling groupby implementation.
 
     .. versionadded:: 0.18.1
 
@@ -1834,7 +1834,7 @@ class RollingGroupby(_GroupByMixin, Rolling):
 
 class Expanding(_Rolling_and_Expanding):
     """
-    Provides expanding transformations.
+    Provide expanding transformations.
 
     .. versionadded:: 0.18.0
 
@@ -2076,7 +2076,7 @@ class Expanding(_Rolling_and_Expanding):
 
 class ExpandingGroupby(_GroupByMixin, Expanding):
     """
-    Provides a expanding groupby implementation.
+    Provide a expanding groupby implementation.
 
     .. versionadded:: 0.18.1
 
diff --git a/pandas/io/stata.py b/pandas/io/stata.py
index 0bd084f4e..9ba3290c0 100644
--- a/pandas/io/stata.py
+++ b/pandas/io/stata.py
@@ -119,7 +119,7 @@ Read a Stata dta file in 10,000 line chunks:
        _iterator_params)
 
 _data_method_doc = """\
-Reads observations from Stata file, converting them into a dataframe
+Read observations from Stata file, converting them into a dataframe
 
 .. deprecated::
     This is a legacy method.  Use `read` in new code.
@@ -1726,18 +1726,22 @@ class StataReader(StataParser, BaseIterator):
         return data
 
     def data_label(self):
-        """Returns data label of Stata file"""
+        """
+        Return data label of Stata file.
+        """
         return self.data_label
 
     def variable_labels(self):
-        """Returns variable labels as a dict, associating each variable name
-        with corresponding label
+        """
+        Return variable labels as a dict, associating each variable name
+        with corresponding label.
         """
         return dict(zip(self.varlist, self._variable_labels))
 
     def value_labels(self):
-        """Returns a dict, associating each variable name a dict, associating
-        each value its corresponding label
+        """
+        Return a dict, associating each variable name a dict, associating
+        each value its corresponding label.
         """
         if not self._value_labels_read:
             self._read_value_labels()
@@ -1747,7 +1751,7 @@ class StataReader(StataParser, BaseIterator):
 
 def _open_file_binary_write(fname):
     """
-    Open a binary file or no-op if file-like
+    Open a binary file or no-op if file-like.
 
     Parameters
     ----------
@@ -1778,14 +1782,14 @@ def _set_endianness(endianness):
 
 def _pad_bytes(name, length):
     """
-    Takes a char string and pads it with null bytes until it's length chars
+    Take a char string and pads it with null bytes until it's length chars.
     """
     return name + "\x00" * (length - len(name))
 
 
 def _convert_datetime_to_stata_type(fmt):
     """
-    Converts from one of the stata date formats to a type in TYPE_MAP
+    Convert from one of the stata date formats to a type in TYPE_MAP.
     """
     if fmt in ["tc", "%tc", "td", "%td", "tw", "%tw", "tm", "%tm", "tq",
                "%tq", "th", "%th", "ty", "%ty"]:
@@ -1812,7 +1816,7 @@ def _maybe_convert_to_int_keys(convert_dates, varlist):
 
 def _dtype_to_stata_type(dtype, column):
     """
-    Converts dtype types to stata types. Returns the byte of the given ordinal.
+    Convert dtype types to stata types. Returns the byte of the given ordinal.
     See TYPE_MAP and comments for an explanation. This is also explained in
     the dta spec.
     1 - 244 are strings of this length
@@ -1850,7 +1854,7 @@ def _dtype_to_stata_type(dtype, column):
 def _dtype_to_default_stata_fmt(dtype, column, dta_version=114,
                                 force_strl=False):
     """
-    Maps numpy dtype to stata's default format for this type. Not terribly
+    Map numpy dtype to stata's default format for this type. Not terribly
     important since users can change this in Stata. Semantics are
 
     object  -> "%DDs" where DD is the length of the string.  If not a string,
diff --git a/pandas/plotting/_misc.py b/pandas/plotting/_misc.py
index 1c69c0302..01cc8ecc6 100644
--- a/pandas/plotting/_misc.py
+++ b/pandas/plotting/_misc.py
@@ -273,7 +273,7 @@ def radviz(frame, class_column, ax=None, color=None, colormap=None, **kwds):
 def andrews_curves(frame, class_column, ax=None, samples=200, color=None,
                    colormap=None, **kwds):
     """
-    Generates a matplotlib plot of Andrews curves, for visualising clusters of
+    Generate a matplotlib plot of Andrews curves, for visualising clusters of
     multivariate data.
 
     Andrews curves have the functional form:
@@ -598,7 +598,8 @@ def lag_plot(series, lag=1, ax=None, **kwds):
 
 
 def autocorrelation_plot(series, ax=None, **kwds):
-    """Autocorrelation plot for time series.
+    """
+    Autocorrelation plot for time series.
 
     Parameters:
     -----------
diff --git a/pandas/util/_decorators.py b/pandas/util/_decorators.py
index 86cd8b1e6..2f7816e3a 100644
--- a/pandas/util/_decorators.py
+++ b/pandas/util/_decorators.py
@@ -9,7 +9,8 @@ from pandas.compat import PY2, callable, signature
 
 def deprecate(name, alternative, version, alt_name=None,
               klass=None, stacklevel=2, msg=None):
-    """Return a new function that emits a deprecation warning on use.
+    """
+    Return a new function that emits a deprecation warning on use.
 
     To use this method for a deprecated function, another function
     `alternative` with the same signature must exist. The deprecated
