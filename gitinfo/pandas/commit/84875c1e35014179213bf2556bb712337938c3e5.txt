commit 84875c1e35014179213bf2556bb712337938c3e5
Author: gfyoung <gfyoung17+GitHub@gmail.com>
Date:   Thu Feb 28 07:44:43 2019 -0500

    ERR: Correct error message in to_datetime (#25467)
    
    * ERR: Correct error message in to_datetime
    
    Closes gh-23830
    
    xref gh-23969

diff --git a/doc/source/whatsnew/v0.25.0.rst b/doc/source/whatsnew/v0.25.0.rst
index ee16246a1..496a7c91f 100644
--- a/doc/source/whatsnew/v0.25.0.rst
+++ b/doc/source/whatsnew/v0.25.0.rst
@@ -104,7 +104,8 @@ Performance Improvements
 
 Bug Fixes
 ~~~~~~~~~
-
+- Bug in :func:`to_datetime` which would raise an (incorrect) ``ValueError`` when called with a date far into the future and the ``format`` argument specified instead of raising ``OutOfBoundsDatetime`` (:issue:`23830`)
+-
 -
 
 Categorical
diff --git a/pandas/_libs/tslib.pyx b/pandas/_libs/tslib.pyx
index f932e236b..624872c1c 100644
--- a/pandas/_libs/tslib.pyx
+++ b/pandas/_libs/tslib.pyx
@@ -670,9 +670,11 @@ cpdef array_to_datetime(ndarray[object] values, str errors='raise',
                     # dateutil parser will return incorrect result because
                     # it will ignore nanoseconds
                     if is_raise:
-                        raise ValueError("time data {val} doesn't "
-                                         "match format specified"
-                                         .format(val=val))
+
+                        # Still raise OutOfBoundsDatetime,
+                        # as error message is informative.
+                        raise
+
                     assert is_ignore
                     return values, tz_out
                 raise
diff --git a/pandas/tests/indexes/datetimes/test_tools.py b/pandas/tests/indexes/datetimes/test_tools.py
index b94935d25..dd914d8a7 100644
--- a/pandas/tests/indexes/datetimes/test_tools.py
+++ b/pandas/tests/indexes/datetimes/test_tools.py
@@ -1868,6 +1868,15 @@ class TestOrigin(object):
             pd.to_datetime(1, unit='D',
                            origin=datetime(2000, 1, 1, tzinfo=pytz.utc))
 
+    @pytest.mark.parametrize("format", [
+        None, "%Y-%m-%d %H:%M:%S"
+    ])
+    def test_to_datetime_out_of_bounds_with_format_arg(self, format):
+        # see gh-23830
+        msg = "Out of bounds nanosecond timestamp"
+        with pytest.raises(OutOfBoundsDatetime, match=msg):
+            to_datetime("2417-10-27 00:00:00", format=format)
+
     def test_processing_order(self):
         # make sure we handle out-of-bounds *before*
         # constructing the dates
