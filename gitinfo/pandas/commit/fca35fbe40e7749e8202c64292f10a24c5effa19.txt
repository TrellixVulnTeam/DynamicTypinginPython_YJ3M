commit fca35fbe40e7749e8202c64292f10a24c5effa19
Author: priyankjain <priyankjjain61@gmail.com>
Date:   Thu Jun 16 17:00:21 2016 -0400

    BUG: Fix for .str.replace with invalid input
    
    closes #13438
    
    Author: priyankjain <priyankjjain61@gmail.com>
    
    Closes #13460 from priyankjain/13438 and squashes the following commits:
    
    d5c3f1b [priyankjain] BUG: Fix for .str.replace with invalid input

diff --git a/doc/source/whatsnew/v0.18.2.txt b/doc/source/whatsnew/v0.18.2.txt
index b3ce9911d..fad56521b 100644
--- a/doc/source/whatsnew/v0.18.2.txt
+++ b/doc/source/whatsnew/v0.18.2.txt
@@ -391,7 +391,7 @@ Bug Fixes
 
 - Bug in ``DataFrame.to_csv()`` in which float values were being quoted even though quotations were specified for non-numeric values only (:issue:`12922`, :issue:`13259`)
 - Bug in ``MultiIndex`` slicing where extra elements were returned when level is non-unique (:issue:`12896`)
-
+- Bug in ``.str.replace`` does not raise ``TypeError`` for invalid replacement (:issue:`13438`)
 
 
 - Bug in ``pd.read_csv()`` with ``engine='python'`` in which ``NaN`` values weren't being detected after data was converted to numeric values (:issue:`13314`)
diff --git a/pandas/core/strings.py b/pandas/core/strings.py
index ca8e701d0..a3f687b7f 100644
--- a/pandas/core/strings.py
+++ b/pandas/core/strings.py
@@ -4,7 +4,7 @@ from pandas.compat import zip
 from pandas.core.common import (isnull, notnull, _values_from_object,
                                 is_bool_dtype,
                                 is_list_like, is_categorical_dtype,
-                                is_object_dtype)
+                                is_object_dtype, is_string_like)
 from pandas.core.algorithms import take_1d
 import pandas.compat as compat
 from pandas.core.base import AccessorProperty, NoNewAttributesMixin
@@ -309,6 +309,10 @@ def str_replace(arr, pat, repl, n=-1, case=True, flags=0):
     -------
     replaced : Series/Index of objects
     """
+
+    # Check whether repl is valid (GH 13438)
+    if not is_string_like(repl):
+        raise TypeError("repl must be a string")
     use_re = not case or len(pat) > 1 or flags
 
     if use_re:
diff --git a/pandas/tests/test_strings.py b/pandas/tests/test_strings.py
index 73f9809a7..67d171bb8 100644
--- a/pandas/tests/test_strings.py
+++ b/pandas/tests/test_strings.py
@@ -430,6 +430,13 @@ class TestStringMethods(tm.TestCase):
         result = values.str.replace("(?<=\w),(?=\w)", ", ", flags=re.UNICODE)
         tm.assert_series_equal(result, exp)
 
+        # GH 13438
+        for klass in (Series, Index):
+            for repl in (None, 3, {'a': 'b'}):
+                for data in (['a', 'b', None], ['a', 'b', 'c', 'ad']):
+                    values = klass(data)
+                    self.assertRaises(TypeError, values.str.replace, 'a', repl)
+
     def test_repeat(self):
         values = Series(['a', 'b', NA, 'c', NA, 'd'])
 
