commit 9c6880980993bf4e6729f10d5c2a587be9995f3d
Author: Mike Kelly <mtk@numeric.com>
Date:   Thu Jun 20 17:09:34 2013 -0400

    GH3969 Implement unit='D' in to_datetime

diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 08bcd9cfa..d8c3caaab 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -2752,23 +2752,31 @@ class TestTimestamp(unittest.TestCase):
         self.assert_(stamp.nanosecond == 500)
 
     def test_unit(self):
-        def check(val,unit=None,s=1,us=0):
+        def check(val,unit=None,h=1,s=1,us=0):
             stamp = Timestamp(val, unit=unit)
             self.assert_(stamp.year == 2000)
             self.assert_(stamp.month == 1)
             self.assert_(stamp.day == 1)
-            self.assert_(stamp.hour == 1)
-            self.assert_(stamp.minute == 1)
-            self.assert_(stamp.second == s)
-            self.assert_(stamp.microsecond == us)
+            self.assert_(stamp.hour == h)
+            if unit != 'D':
+                self.assert_(stamp.minute == 1)
+                self.assert_(stamp.second == s)
+                self.assert_(stamp.microsecond == us)
+            else:
+                self.assert_(stamp.minute == 0)
+                self.assert_(stamp.second == 0)
+                self.assert_(stamp.microsecond == 0)
             self.assert_(stamp.nanosecond == 0)
 
-        val = Timestamp('20000101 01:01:01').value
+        ts = Timestamp('20000101 01:01:01')
+        val = ts.value
+        days = (ts - Timestamp('1970-01-01')).days
 
         check(val)
         check(val/1000L,unit='us')
         check(val/1000000L,unit='ms')
         check(val/1000000000L,unit='s')
+        check(days,unit='D',h=0)
 
         # using truediv, so these are like floats
         if py3compat.PY3:
@@ -2792,6 +2800,7 @@ class TestTimestamp(unittest.TestCase):
         check(val/1000000.0 + 0.5,unit='ms',us=500)
         check(val/1000000.0 + 0.005,unit='ms',us=5)
         check(val/1000000000.0 + 0.5,unit='s',us=500000)
+        check(days + 0.5,unit='D',h=12)
 
         # nan
         result = Timestamp(np.nan)
diff --git a/pandas/tseries/tools.py b/pandas/tseries/tools.py
index 531d9f399..43d44702d 100644
--- a/pandas/tseries/tools.py
+++ b/pandas/tseries/tools.py
@@ -69,7 +69,7 @@ def to_datetime(arg, errors='ignore', dayfirst=False, utc=None, box=True,
     format : string, default None
         strftime to parse time, eg "%d/%m/%Y"
     coerce : force errors to NaT (False by default)
-    unit : unit of the arg (s,ms,us,ns) denote the unit in epoch
+    unit : unit of the arg (D,s,ms,us,ns) denote the unit in epoch
         (e.g. a unix timestamp), which is an integer/float number
 
     Returns
diff --git a/pandas/tslib.pyx b/pandas/tslib.pyx
index 9b6110324..e6e0f8b71 100644
--- a/pandas/tslib.pyx
+++ b/pandas/tslib.pyx
@@ -1269,7 +1269,10 @@ cdef inline _get_datetime64_nanos(object val):
 cdef inline int64_t cast_from_unit(object unit, object ts):
     """ return a casting of the unit represented to nanoseconds
         round the fractional part of a float to our precision, p """
-    if unit == 's':
+    if unit == 'D':
+        m = 1000000000L * 86400
+        p = 6
+    elif unit == 's':
         m = 1000000000L
         p = 6
     elif unit == 'ms':
