commit 1bee56ed9aa96ffe99aa62d5e8c0212d6dc947ee
Author: Jeff Reback <jeff@reback.net>
Date:   Fri Jul 15 06:20:39 2016 -0400

    BUG: construction of Series with integers on windows not default to int64
    
    closes #13646
    
    Author: Jeff Reback <jeff@reback.net>
    
    Closes #13661 from jreback/foo and squashes the following commits:
    
    e26f9bf [Jeff Reback] BUG: construction of Series with integers on windows not defaulting to int64

diff --git a/doc/source/whatsnew/v0.19.0.txt b/doc/source/whatsnew/v0.19.0.txt
index c9f501c68..747fc70f8 100644
--- a/doc/source/whatsnew/v0.19.0.txt
+++ b/doc/source/whatsnew/v0.19.0.txt
@@ -534,7 +534,7 @@ Bug Fixes
 - Bug when passing a not-default-indexed ``Series`` as ``xerr`` or ``yerr`` in ``.plot()`` (:issue:`11858`)
 - Bug in matplotlib ``AutoDataFormatter``; this restores the second scaled formatting and re-adds micro-second scaled formatting (:issue:`13131`)
 - Bug in selection from a ``HDFStore`` with a fixed format and ``start`` and/or ``stop`` specified will now return the selected range (:issue:`8287`)
-
+- Bug in ``Series`` construction from a tuple of integers on windows not returning default dtype (int64) (:issue:`13646`)
 
 - Bug in ``.groupby(..).resample(..)`` when the same object is called multiple times (:issue:`13174`)
 - Bug in ``.to_records()`` when index name is a unicode string (:issue:`13172`)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index b933f68cf..3c1f834c3 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2820,7 +2820,7 @@ def _sanitize_array(data, index, dtype=None, copy=False,
             subarr = data.copy()
         return subarr
 
-    elif isinstance(data, list) and len(data) > 0:
+    elif isinstance(data, (list, tuple)) and len(data) > 0:
         if dtype is not None:
             try:
                 subarr = _try_cast(data, False)
diff --git a/pandas/tests/frame/test_operators.py b/pandas/tests/frame/test_operators.py
index e2e0f568e..c91585a28 100644
--- a/pandas/tests/frame/test_operators.py
+++ b/pandas/tests/frame/test_operators.py
@@ -1196,7 +1196,7 @@ class TestDataFrameOperators(tm.TestCase, TestData):
 
         align = pd.core.ops._align_method_FRAME
 
-        for val in [[1, 2, 3], (1, 2, 3), np.array([1, 2, 3])]:
+        for val in [[1, 2, 3], (1, 2, 3), np.array([1, 2, 3], dtype=np.intp)]:
 
             tm.assert_series_equal(align(df, val, 'index'),
                                    Series([1, 2, 3], index=df.index))
diff --git a/pandas/tests/series/test_constructors.py b/pandas/tests/series/test_constructors.py
index b7ec4d570..c8e04f1ff 100644
--- a/pandas/tests/series/test_constructors.py
+++ b/pandas/tests/series/test_constructors.py
@@ -109,6 +109,17 @@ class TestSeriesConstructors(TestData, tm.TestCase):
         result = Series(range(10), dtype='int64')
         assert_series_equal(result, expected)
 
+    def test_constructor_list_like(self):
+
+        # make sure that we are coercing different
+        # list-likes to standard dtypes and not
+        # platform specific
+        expected = Series([1, 2, 3], dtype='int64')
+        for obj in [[1, 2, 3], (1, 2, 3),
+                    np.array([1, 2, 3], dtype='int64')]:
+            result = Series(obj, index=[0, 1, 2])
+            assert_series_equal(result, expected)
+
     def test_constructor_generator(self):
         gen = (i for i in range(10))
 
diff --git a/pandas/types/cast.py b/pandas/types/cast.py
index e55cb91d3..ca23d8d26 100644
--- a/pandas/types/cast.py
+++ b/pandas/types/cast.py
@@ -33,7 +33,7 @@ def _possibly_convert_platform(values):
     """ try to do platform conversion, allow ndarray or list here """
 
     if isinstance(values, (list, tuple)):
-        values = lib.list_to_object_array(values)
+        values = lib.list_to_object_array(list(values))
     if getattr(values, 'dtype', None) == np.object_:
         if hasattr(values, '_values'):
             values = values._values
