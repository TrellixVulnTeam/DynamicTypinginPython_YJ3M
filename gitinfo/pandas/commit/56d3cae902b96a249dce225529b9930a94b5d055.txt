commit 56d3cae902b96a249dce225529b9930a94b5d055
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Thu Apr 2 07:18:31 2020 -0700

    REF: DataFrame.mask tests (#33219)

diff --git a/pandas/tests/frame/indexing/test_indexing.py b/pandas/tests/frame/indexing/test_indexing.py
index 9e6d41a88..406a01efb 100644
--- a/pandas/tests/frame/indexing/test_indexing.py
+++ b/pandas/tests/frame/indexing/test_indexing.py
@@ -392,16 +392,6 @@ class TestDataFrameIndexing:
         )
         tm.assert_series_equal(result, expected)
 
-        # where dtype conversions
-        # GH 3733
-        df = DataFrame(data=np.random.randn(100, 50))
-        df = df.where(df > 0)  # create nans
-        bools = df > 0
-        mask = isna(df)
-        expected = bools.astype(float).mask(mask)
-        result = bools.mask(mask)
-        tm.assert_frame_equal(result, expected)
-
     def test_getitem_boolean_list(self):
         df = DataFrame(np.arange(12).reshape(3, 4))
 
@@ -2066,69 +2056,6 @@ class TestDataFrameIndexing:
         with pytest.raises(TypeError, match=msg):
             df[df > 0.3] = 1
 
-    def test_mask(self):
-        df = DataFrame(np.random.randn(5, 3))
-        cond = df > 0
-
-        rs = df.where(cond, np.nan)
-        tm.assert_frame_equal(rs, df.mask(df <= 0))
-        tm.assert_frame_equal(rs, df.mask(~cond))
-
-        other = DataFrame(np.random.randn(5, 3))
-        rs = df.where(cond, other)
-        tm.assert_frame_equal(rs, df.mask(df <= 0, other))
-        tm.assert_frame_equal(rs, df.mask(~cond, other))
-
-        # see gh-21891
-        df = DataFrame([1, 2])
-        res = df.mask([[True], [False]])
-
-        exp = DataFrame([np.nan, 2])
-        tm.assert_frame_equal(res, exp)
-
-    def test_mask_inplace(self):
-        # GH8801
-        df = DataFrame(np.random.randn(5, 3))
-        cond = df > 0
-
-        rdf = df.copy()
-
-        rdf.where(cond, inplace=True)
-        tm.assert_frame_equal(rdf, df.where(cond))
-        tm.assert_frame_equal(rdf, df.mask(~cond))
-
-        rdf = df.copy()
-        rdf.where(cond, -df, inplace=True)
-        tm.assert_frame_equal(rdf, df.where(cond, -df))
-        tm.assert_frame_equal(rdf, df.mask(~cond, -df))
-
-    def test_mask_edge_case_1xN_frame(self):
-        # GH4071
-        df = DataFrame([[1, 2]])
-        res = df.mask(DataFrame([[True, False]]))
-        expec = DataFrame([[np.nan, 2]])
-        tm.assert_frame_equal(res, expec)
-
-    def test_mask_callable(self):
-        # GH 12533
-        df = DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
-        result = df.mask(lambda x: x > 4, lambda x: x + 1)
-        exp = DataFrame([[1, 2, 3], [4, 6, 7], [8, 9, 10]])
-        tm.assert_frame_equal(result, exp)
-        tm.assert_frame_equal(result, df.mask(df > 4, df + 1))
-
-        # return ndarray and scalar
-        result = df.mask(lambda x: (x % 2 == 0).values, lambda x: 99)
-        exp = DataFrame([[1, 99, 3], [99, 5, 99], [7, 99, 9]])
-        tm.assert_frame_equal(result, exp)
-        tm.assert_frame_equal(result, df.mask(df % 2 == 0, 99))
-
-        # chain
-        result = (df + 2).mask(lambda x: x > 8, lambda x: x + 10)
-        exp = DataFrame([[3, 4, 5], [6, 7, 8], [19, 20, 21]])
-        tm.assert_frame_equal(result, exp)
-        tm.assert_frame_equal(result, (df + 2).mask((df + 2) > 8, (df + 2) + 10))
-
     def test_type_error_multiindex(self):
         # See gh-12218
         df = DataFrame(
diff --git a/pandas/tests/frame/indexing/test_mask.py b/pandas/tests/frame/indexing/test_mask.py
new file mode 100644
index 000000000..30db6110e
--- /dev/null
+++ b/pandas/tests/frame/indexing/test_mask.py
@@ -0,0 +1,83 @@
+"""
+Tests for DataFrame.mask; tests DataFrame.where as a side-effect.
+"""
+
+import numpy as np
+
+from pandas import DataFrame, isna
+import pandas._testing as tm
+
+
+class TestDataFrameMask:
+    def test_mask(self):
+        df = DataFrame(np.random.randn(5, 3))
+        cond = df > 0
+
+        rs = df.where(cond, np.nan)
+        tm.assert_frame_equal(rs, df.mask(df <= 0))
+        tm.assert_frame_equal(rs, df.mask(~cond))
+
+        other = DataFrame(np.random.randn(5, 3))
+        rs = df.where(cond, other)
+        tm.assert_frame_equal(rs, df.mask(df <= 0, other))
+        tm.assert_frame_equal(rs, df.mask(~cond, other))
+
+        # see GH#21891
+        df = DataFrame([1, 2])
+        res = df.mask([[True], [False]])
+
+        exp = DataFrame([np.nan, 2])
+        tm.assert_frame_equal(res, exp)
+
+    def test_mask_inplace(self):
+        # GH#8801
+        df = DataFrame(np.random.randn(5, 3))
+        cond = df > 0
+
+        rdf = df.copy()
+
+        rdf.where(cond, inplace=True)
+        tm.assert_frame_equal(rdf, df.where(cond))
+        tm.assert_frame_equal(rdf, df.mask(~cond))
+
+        rdf = df.copy()
+        rdf.where(cond, -df, inplace=True)
+        tm.assert_frame_equal(rdf, df.where(cond, -df))
+        tm.assert_frame_equal(rdf, df.mask(~cond, -df))
+
+    def test_mask_edge_case_1xN_frame(self):
+        # GH#4071
+        df = DataFrame([[1, 2]])
+        res = df.mask(DataFrame([[True, False]]))
+        expec = DataFrame([[np.nan, 2]])
+        tm.assert_frame_equal(res, expec)
+
+    def test_mask_callable(self):
+        # GH#12533
+        df = DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
+        result = df.mask(lambda x: x > 4, lambda x: x + 1)
+        exp = DataFrame([[1, 2, 3], [4, 6, 7], [8, 9, 10]])
+        tm.assert_frame_equal(result, exp)
+        tm.assert_frame_equal(result, df.mask(df > 4, df + 1))
+
+        # return ndarray and scalar
+        result = df.mask(lambda x: (x % 2 == 0).values, lambda x: 99)
+        exp = DataFrame([[1, 99, 3], [99, 5, 99], [7, 99, 9]])
+        tm.assert_frame_equal(result, exp)
+        tm.assert_frame_equal(result, df.mask(df % 2 == 0, 99))
+
+        # chain
+        result = (df + 2).mask(lambda x: x > 8, lambda x: x + 10)
+        exp = DataFrame([[3, 4, 5], [6, 7, 8], [19, 20, 21]])
+        tm.assert_frame_equal(result, exp)
+        tm.assert_frame_equal(result, (df + 2).mask((df + 2) > 8, (df + 2) + 10))
+
+    def test_mask_dtype_conversion(self):
+        # GH#3733
+        df = DataFrame(data=np.random.randn(100, 50))
+        df = df.where(df > 0)  # create nans
+        bools = df > 0
+        mask = isna(df)
+        expected = bools.astype(float).mask(mask)
+        result = bools.mask(mask)
+        tm.assert_frame_equal(result, expected)
diff --git a/pandas/tests/indexing/test_timedelta.py b/pandas/tests/indexing/test_timedelta.py
index dd4750123..7da368e4b 100644
--- a/pandas/tests/indexing/test_timedelta.py
+++ b/pandas/tests/indexing/test_timedelta.py
@@ -6,7 +6,7 @@ import pandas._testing as tm
 
 
 class TestTimedeltaIndexing:
-    def test_boolean_indexing(self):
+    def test_loc_setitem_bool_mask(self):
         # GH 14946
         df = pd.DataFrame({"x": range(10)})
         df.index = pd.to_timedelta(range(10), unit="s")
@@ -17,7 +17,9 @@ class TestTimedeltaIndexing:
             [10, 10, 10, 3, 4, 5, 6, 7, 8, 9],
         ]
         for cond, data in zip(conditions, expected_data):
-            result = df.assign(x=df.mask(cond, 10).astype("int64"))
+            result = df.copy()
+            result.loc[cond, "x"] = 10
+
             expected = pd.DataFrame(
                 data,
                 index=pd.to_timedelta(range(10), unit="s"),
@@ -58,7 +60,7 @@ class TestTimedeltaIndexing:
         tm.assert_series_equal(sliced, expected)
 
     @pytest.mark.parametrize("value", [None, pd.NaT, np.nan])
-    def test_masked_setitem(self, value):
+    def test_setitem_mask_na_value_td64(self, value):
         # issue (#18586)
         series = pd.Series([0, 1, 2], dtype="timedelta64[ns]")
         series[series == series[0]] = value
