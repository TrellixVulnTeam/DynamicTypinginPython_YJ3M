commit 07785308efbdace8c2ab99c9da56aaa24d1c0905
Author: Chang She <chang@lambdafoundry.com>
Date:   Wed May 2 10:32:07 2012 -0400

    ENH: tshift method GH #1111

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 2ec745bb0..6072618d4 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2959,6 +2959,11 @@ class DataFrame(NDFrame):
         freq : DateOffset, timedelta, or time rule string, optional
             Increment to use from datetools module or time rule (e.g. 'EOM')
 
+        Notes
+        -----
+        If freq is specified then the index values are shifted but the data
+        if not realigned
+
         Returns
         -------
         shifted : DataFrame
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 68244313d..103e9426e 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -334,6 +334,40 @@ class PandasObject(Picklable):
     def reindex(self, *args, **kwds):
         raise NotImplementedError
 
+    def tshift(self, periods=1, freq=None, **kwds):
+        """
+        Shift the time index, using the index's frequency if available
+
+        Parameters
+        ----------
+        periods : int
+            Number of periods to move, can be positive or negative
+        freq : DateOffset, timedelta, or time rule string, default None
+            Increment to use from datetools module or time rule (e.g. 'EOM')
+
+        Notes
+        -----
+        If freq is not specified then tries to use the freq or inferred_freq
+        attributes of the index. If neither of those attributes exist, a
+        ValueError is thrown
+
+        Returns
+        -------
+        shifted : Series
+        """
+        if freq is None:
+            freq = getattr(self.index, 'freq', None)
+
+        if freq is None:
+            freq = getattr(self.index, 'inferred_freq', None)
+
+        if freq is None:
+            msg = 'Freq was not given and was not set in the index'
+            raise ValueError(msg)
+
+        return self.shift(periods, freq, **kwds)
+
+
 class NDFrame(PandasObject):
     """
     N-dimensional analogue of DataFrame. Store multi-dimensional in a
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index f4038dcbb..9072404e9 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3741,6 +3741,41 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         self.assertRaises(ValueError, ps.shift, freq='D')
 
+    def test_tshift(self):
+        # PeriodIndex
+        ps = tm.makePeriodFrame()
+        shifted = ps.tshift(1)
+        unshifted = shifted.tshift(-1)
+
+        assert_frame_equal(unshifted, ps)
+
+        shifted2 = ps.tshift(freq='B')
+        assert_frame_equal(shifted, shifted2)
+
+        shifted3 = ps.tshift(freq=datetools.bday)
+        assert_frame_equal(shifted, shifted3)
+
+        self.assertRaises(ValueError, ps.tshift, freq='M')
+
+        # DatetimeIndex
+        shifted = self.tsframe.tshift(1)
+        unshifted = shifted.tshift(-1)
+
+        assert_frame_equal(self.tsframe, unshifted)
+
+        shifted2 = self.tsframe.tshift(freq=self.tsframe.index.freq)
+        assert_frame_equal(shifted, shifted2)
+
+        inferred_ts = DataFrame(self.tsframe.values,
+                                Index(np.asarray(self.tsframe.index)),
+                                columns=self.tsframe.columns)
+        shifted = inferred_ts.tshift(1)
+        unshifted = shifted.tshift(-1)
+        assert_frame_equal(shifted, self.tsframe.tshift(1))
+        assert_frame_equal(unshifted, inferred_ts)
+
+        no_freq = self.tsframe.ix[[0, 5, 7], :]
+        self.assertRaises(ValueError, no_freq.tshift)
 
     def test_apply(self):
         # ufunc
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index ffc6dacfe..d151db187 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1832,6 +1832,40 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
 
         self.assertRaises(ValueError, ps.shift, freq='D')
 
+    def test_tshift(self):
+        # PeriodIndex
+        ps = tm.makePeriodSeries()
+        shifted = ps.tshift(1)
+        unshifted = shifted.tshift(-1)
+
+        assert_series_equal(unshifted, ps)
+
+        shifted2 = ps.tshift(freq='B')
+        assert_series_equal(shifted, shifted2)
+
+        shifted3 = ps.tshift(freq=datetools.bday)
+        assert_series_equal(shifted, shifted3)
+
+        self.assertRaises(ValueError, ps.tshift, freq='M')
+
+        # DatetimeIndex
+        shifted = self.ts.tshift(1)
+        unshifted = shifted.tshift(-1)
+
+        assert_series_equal(self.ts, unshifted)
+
+        shifted2 = self.ts.tshift(freq=self.ts.index.freq)
+        assert_series_equal(shifted, shifted2)
+
+        inferred_ts = Series(self.ts.values, Index(np.asarray(self.ts.index)))
+        shifted = inferred_ts.tshift(1)
+        unshifted = shifted.tshift(-1)
+        assert_series_equal(shifted, self.ts.tshift(1))
+        assert_series_equal(unshifted, inferred_ts)
+
+        no_freq = self.ts[[0, 5, 7]]
+        self.assertRaises(ValueError, no_freq.tshift)
+
     def test_shift_int(self):
         ts = self.ts.astype(int)
         shifted = ts.shift(1)
