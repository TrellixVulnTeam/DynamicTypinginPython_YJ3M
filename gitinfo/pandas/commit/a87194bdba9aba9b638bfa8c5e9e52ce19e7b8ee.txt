commit a87194bdba9aba9b638bfa8c5e9e52ce19e7b8ee
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Nov 27 15:51:47 2012 -0500

    PERF: performance regression in unioning multiple DatetimeIndex objects. #2336

diff --git a/pandas/core/index.py b/pandas/core/index.py
index 52af15f87..1c4d59872 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -2578,9 +2578,13 @@ def _union_indexes(indexes):
 
     if kind == 'special':
         result = indexes[0]
-        for other in indexes[1:]:
-            result = result.union(other)
-        return result
+
+        if hasattr(result, 'union_many'):
+            return result.union_many(indexes[1:])
+        else:
+            for other in indexes[1:]:
+                result = result.union(other)
+            return result
     elif kind == 'array':
         index = indexes[0]
         for other in indexes[1:]:
diff --git a/pandas/src/inference.pyx b/pandas/src/inference.pyx
index e31369bbb..6b50f33ed 100644
--- a/pandas/src/inference.pyx
+++ b/pandas/src/inference.pyx
@@ -753,6 +753,7 @@ def map_infer_mask(ndarray arr, object f, ndarray[uint8_t] mask,
                                      convert_datetime=0)
 
     return result
+
 def map_infer(ndarray arr, object f, bint convert=1):
     '''
     Substitute for np.vectorize with pandas-friendly dtype inference
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 6cbfbfa45..b8e9fd70e 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -829,6 +829,37 @@ class DatetimeIndex(Int64Index):
                     result.offset = to_offset(result.inferred_freq)
             return result
 
+    def union_many(self, others):
+        """
+        A bit of a hack to accelerate unioning a collection of indexes
+        """
+        this = self
+
+        for other in others:
+            if not isinstance(this, DatetimeIndex):
+                this = Index.union(this, other)
+                continue
+
+            if not isinstance(other, DatetimeIndex):
+                try:
+                    other = DatetimeIndex(other)
+                except TypeError:
+                    pass
+
+            this, other = this._maybe_utc_convert(other)
+
+            if this._can_fast_union(other):
+                this = this._fast_union(other)
+            else:
+                tz = this.tz
+                this = Index.union(this, other)
+                if isinstance(this, DatetimeIndex):
+                    this.tz = tz
+
+        if this.freq is None:
+            this.offset = to_offset(this.inferred_freq)
+        return this
+
     def join(self, other, how='left', level=None, return_indexers=False):
         """
         See Index.join
