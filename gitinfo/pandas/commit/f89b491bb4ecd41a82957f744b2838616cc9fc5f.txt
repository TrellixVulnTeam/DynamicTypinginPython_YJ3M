commit f89b491bb4ecd41a82957f744b2838616cc9fc5f
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Jun 2 13:51:12 2013 -0700

    REF: promote parser.pyx into top level

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 249afe075..60028d3f3 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -20,7 +20,7 @@ from pandas.util.decorators import Appender
 
 import pandas.lib as lib
 import pandas.tslib as tslib
-import pandas._parser as _parser
+import pandas.parser as _parser
 from pandas.tseries.period import Period
 import json
 
@@ -752,7 +752,7 @@ class ParserBase(object):
                         [ com.is_integer(i) for i in self.index_col ]) or com.is_integer(self.index_col)):
                     raise Exception("index_col must only contain row numbers "
                                     "when specifying a multi-index header")
-                
+
         self._name_processed = False
 
     @property
@@ -783,7 +783,7 @@ class ParserBase(object):
 
         # the names are the tuples of the header that are not the index cols
         # 0 is the name of the index, assuming index_col is a list of column
-        # numbers 
+        # numbers
         ic = self.index_col
         if ic is None:
             ic = []
@@ -795,8 +795,8 @@ class ParserBase(object):
         orig_header = list(header)
 
         # clean the index_names
-        index_names = header.pop(-1) 
-        (index_names, names, 
+        index_names = header.pop(-1)
+        (index_names, names,
          index_col) = _clean_index_names(index_names, self.index_col)
 
         # extract the columns
@@ -846,7 +846,7 @@ class ParserBase(object):
             index = self._get_complex_date_index(data, columns)
             index = self._agg_index(index, try_parse_dates=False)
 
-        # add names for the index 
+        # add names for the index
         if indexnamerow:
             coffset = len(indexnamerow) - len(columns)
             index.names = indexnamerow[:coffset]
@@ -1060,7 +1060,7 @@ class CParserWrapper(ParserBase):
                 _is_index_col(self.index_col)):
 
                 self._name_processed = True
-                (index_names, self.names, 
+                (index_names, self.names,
                  self.index_col) = _clean_index_names(self.names, self.index_col)
 
                 if self.index_names is None:
@@ -1498,7 +1498,7 @@ class PythonParser(ParserBase):
                             if cur_count > 0:
                                 this_columns[i] = '%s.%d' % (col, cur_count)
                             counts[col] = cur_count + 1
-        
+
                 columns.append(this_columns)
 
             self._clear_buffer()
@@ -1993,5 +1993,3 @@ class ExcelFile(excel.ExcelFile):
         from warnings import warn
         warn("ExcelFile can now be imported from: pandas.io.excel", FutureWarning)
         super(ExcelFile, self).__init__(path_or_buf, kind=kind, **kwds)
-
-  
diff --git a/pandas/io/tests/test_cparser.py b/pandas/io/tests/test_cparser.py
index 23503f74f..71c0367cf 100644
--- a/pandas/io/tests/test_cparser.py
+++ b/pandas/io/tests/test_cparser.py
@@ -27,8 +27,8 @@ from pandas.lib import Timestamp
 
 import pandas.util.testing as tm
 
-from pandas._parser import TextReader
-import pandas._parser as parser
+from pandas.parser import TextReader
+import pandas.parser as parser
 
 
 class TestCParser(unittest.TestCase):
diff --git a/pandas/io/tests/test_html.py b/pandas/io/tests/test_html.py
index 7ece8f8e0..418b5471d 100644
--- a/pandas/io/tests/test_html.py
+++ b/pandas/io/tests/test_html.py
@@ -17,7 +17,10 @@ from pandas.io.html import read_html, import_module, _parse, _LxmlFrameParser
 from pandas.io.html import _BeautifulSoupHtml5LibFrameParser
 from pandas.io.html import _BeautifulSoupLxmlFrameParser, _remove_whitespace
 from pandas import DataFrame, MultiIndex, read_csv, Timestamp
-from pandas.util.testing import assert_frame_equal, network, get_data_path
+from pandas.util.testing import (assert_frame_equal, network,
+                                 get_data_path)
+from numpy.testing.decorators import slow
+
 from pandas.util.testing import makeCustomDataframe as mkdf
 
 
@@ -93,6 +96,7 @@ class TestLxmlReadHtml(TestCase):
         return _run_read_html(parser, *args, **kwargs)
 
     @network
+    @slow
     def test_banklist_url(self):
         url = 'http://www.fdic.gov/bank/individual/failed/banklist.html'
         df1 = self.run_read_html(url, 'First Federal Bank of Florida',
@@ -102,6 +106,7 @@ class TestLxmlReadHtml(TestCase):
         assert_framelist_equal(df1, df2)
 
     @network
+    @slow
     def test_spam_url(self):
         url = ('http://ndb.nal.usda.gov/ndb/foods/show/1732?fg=&man=&'
                'lfacet=&format=&count=&max=25&offset=&sort=&qlookup=spam')
@@ -361,6 +366,7 @@ class TestLxmlReadHtml(TestCase):
         self.assertGreater(len(dfs), 1)
 
     @network
+    @slow
     def test_pythonxy_plugins_table(self):
         url = 'http://code.google.com/p/pythonxy/wiki/StandardPlugins'
         dfs = self.run_read_html(url, match='Python',
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index be47f2874..01ce0f74e 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -34,7 +34,7 @@ import pandas.tseries.tools as tools
 
 from numpy.testing.decorators import slow
 
-from pandas._parser import OverflowError
+from pandas.parser import OverflowError
 
 
 class ParserTests(object):
@@ -536,7 +536,7 @@ ignore,this,row
 
         # GH 3062
         df = DataFrame(dict({
-                    'A' : np.asarray(range(10),dtype='float64'), 
+                    'A' : np.asarray(range(10),dtype='float64'),
                     'B' : pd.Timestamp('20010101') }))
         df.iloc[3:6,:] = np.nan
 
@@ -1025,19 +1025,19 @@ R_l0_g4,R_l1_g4,R4C0,R4C1,R4C2
         #### invalid options ####
 
         # no as_recarray
-        self.assertRaises(Exception, read_csv, StringIO(data), header=[0,1,2,3], 
+        self.assertRaises(Exception, read_csv, StringIO(data), header=[0,1,2,3],
                           index_col=[0,1], as_recarray=True, tupleize_cols=False)
 
         # names
-        self.assertRaises(Exception, read_csv, StringIO(data), header=[0,1,2,3], 
+        self.assertRaises(Exception, read_csv, StringIO(data), header=[0,1,2,3],
                           index_col=[0,1], names=['foo','bar'], tupleize_cols=False)
         # usecols
-        self.assertRaises(Exception, read_csv, StringIO(data), header=[0,1,2,3], 
+        self.assertRaises(Exception, read_csv, StringIO(data), header=[0,1,2,3],
                           index_col=[0,1], usecols=['foo','bar'], tupleize_cols=False)
         # non-numeric index_col
-        self.assertRaises(Exception, read_csv, StringIO(data), header=[0,1,2,3], 
+        self.assertRaises(Exception, read_csv, StringIO(data), header=[0,1,2,3],
                           index_col=['foo','bar'], tupleize_cols=False)
-        
+
     def test_pass_names_with_index(self):
         lines = self.data1.split('\n')
         no_header = '\n'.join(lines[1:])
diff --git a/pandas/src/parser.pyx b/pandas/parser.pyx
similarity index 100%
rename from pandas/src/parser.pyx
rename to pandas/parser.pyx
diff --git a/setup.py b/setup.py
index 2e7fd7785..0184a7111 100755
--- a/setup.py
+++ b/setup.py
@@ -286,7 +286,7 @@ class CheckSDist(sdist):
                  'pandas/tslib.pyx',
                  'pandas/index.pyx',
                  'pandas/algos.pyx',
-                 'pandas/src/parser.pyx',
+                 'pandas/parser.pyx',
                  'pandas/src/sparse.pyx']
 
     def initialize_options(self):
@@ -412,6 +412,12 @@ ext_data = dict(
                        'pandas/src/datetime/np_datetime_strings.c']},
     algos={'pyxfile': 'algos',
            'depends': [srcpath('generated', suffix='.pyx')]},
+    parser=dict(pyxfile='parser',
+                depends=['pandas/src/parser/tokenizer.h',
+                         'pandas/src/parser/io.h',
+                         'pandas/src/numpy_helper.h'],
+                sources=['pandas/src/parser/tokenizer.c',
+                         'pandas/src/parser/io.c'])
 )
 
 extensions = []
@@ -440,16 +446,6 @@ sparse_ext = Extension('pandas._sparse',
                        libraries=libraries)
 
 
-parser_ext = Extension('pandas._parser',
-                       depends=['pandas/src/parser/tokenizer.h',
-                                'pandas/src/parser/io.h',
-                                'pandas/src/numpy_helper.h'],
-                       sources=[srcpath('parser', suffix=suffix),
-                                'pandas/src/parser/tokenizer.c',
-                                'pandas/src/parser/io.c',
-                                ],
-                       include_dirs=common_include)
-
 sandbox_ext = Extension('pandas._sandbox',
                         sources=[srcpath('sandbox', suffix=suffix)],
                         include_dirs=common_include)
@@ -460,7 +456,7 @@ cppsandbox_ext = Extension('pandas._cppsandbox',
                            sources=[srcpath('cppsandbox', suffix=suffix)],
                            include_dirs=[])
 
-extensions.extend([sparse_ext, parser_ext])
+extensions.extend([sparse_ext])
 
 # if not ISRELEASED:
 #     extensions.extend([sandbox_ext])
