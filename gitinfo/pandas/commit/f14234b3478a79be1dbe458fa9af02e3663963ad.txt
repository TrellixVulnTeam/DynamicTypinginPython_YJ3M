commit f14234b3478a79be1dbe458fa9af02e3663963ad
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Aug 25 15:54:34 2011 -0400

    ENH: implemented MultiIndex.insert function + tests

diff --git a/pandas/core/index.py b/pandas/core/index.py
index ac0405f8d..f8dff7daa 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1074,6 +1074,41 @@ class MultiIndex(Index):
 
         assert(self.nlevels == other.nlevels)
 
+    def insert(self, loc, item):
+        """
+        Make new MultiIndex inserting new item at location
+
+        Parameters
+        ----------
+        loc : int
+        item : tuple
+            Must be same length as number of levels in the MultiIndex
+
+        Returns
+        -------
+        new_index : Index
+        """
+        if not isinstance(item, tuple) or len(item) != self.nlevels:
+            raise Exception("%s cannot be inserted in this MultIndex"
+                            % str(item))
+
+        new_levels = []
+        new_labels = []
+        for k, level, labels in zip(item, self.levels, self.labels):
+            if k not in level:
+                # have to insert into level
+                # must insert at end otherwise you have to recompute all the
+                # other labels
+                lev_loc = len(level)
+                level = level.insert(lev_loc, k)
+            else:
+                lev_loc = level.get_loc(k)
+
+            new_levels.append(level)
+            new_labels.append(np.insert(labels, loc, lev_loc))
+
+        return MultiIndex(levels=new_levels, labels=new_labels)
+
     def delete(self, loc):
         """
         Make new index with passed location deleted
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 2495353c8..7c654b898 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -654,6 +654,23 @@ class TestMultiIndex(unittest.TestCase):
         self.assertRaises(Exception, self.index.drop, [('bar', 'two')])
         self.assertRaises(Exception, self.index.drop, index)
 
+    def test_insert(self):
+        # key contained in all levels
+        new_index = self.index.insert(0, ('bar', 'two'))
+        self.assert_(new_index.equal_levels(self.index))
+        self.assert_(new_index[0] == ('bar', 'two'))
+
+        # key not contained in all levels
+        new_index = self.index.insert(0, ('abc', 'three'))
+        self.assert_(np.array_equal(new_index.levels[0],
+                                    list(self.index.levels[0]) + ['abc']))
+        self.assert_(np.array_equal(new_index.levels[1],
+                                    list(self.index.levels[1]) + ['three']))
+        self.assert_(new_index[0] == ('abc', 'three'))
+
+        # key wrong length
+        self.assertRaises(Exception, self.index.insert, 0, ('foo2',))
+
 class TestFactor(unittest.TestCase):
 
     def setUp(self):
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 38945746c..b7a382c1a 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -222,6 +222,12 @@ class TestMultiLevel(unittest.TestCase):
         unstacked = self.ymd.unstack()
         unstacked2 = unstacked.unstack()
 
+    def test_insert_index(self):
+        df = self.ymd[:5].T
+        df[2000, 1, 10] = df[2000, 1, 7]
+        self.assert_(isinstance(df.columns, MultiIndex))
+        self.assert_((df[2000, 1, 10] == df[2000, 1, 7]).all())
+
     def test_alignment(self):
         pass
 
diff --git a/pandas/tests/test_sparse.py b/pandas/tests/test_sparse.py
index 9e1f1df61..9a8b58d27 100644
--- a/pandas/tests/test_sparse.py
+++ b/pandas/tests/test_sparse.py
@@ -240,6 +240,9 @@ class TestSparseSeries(TestCase):
         assert_sp_series_equal(zbcop, self.zbseries)
         assert_sp_series_equal(zicop, self.ziseries)
 
+    def test_astype(self):
+        self.assertRaises(Exception, self.bseries.astype, np.int_)
+
     def test_kind(self):
         self.assertEquals(self.bseries.kind, 'block')
         self.assertEquals(self.iseries.kind, 'integer')
