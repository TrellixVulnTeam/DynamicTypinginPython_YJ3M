commit 952b272c7d2c829390acda90fbca30f66c01e1a8
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Jun 2 15:57:54 2012 -0400

    ENH: support functions passed as strings in groupby.transform just like aggregate, close #1362

diff --git a/RELEASE.rst b/RELEASE.rst
index 7faaf84f5..3cd2cea4e 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -113,6 +113,7 @@ pandas 0.8.0
   - Enable Series.asof to work with arrays of timestamp inputs
   - Cython implementation of DataFrame.corr speeds up by > 100x (#1349, #1354)
   - Exclude "nuisance" columns automatically in GroupBy.transform (#1364)
+  - Support functions-as-strings in GroupBy.transform (#1362)
 
 **API Changes**
 
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 7f8791269..5e5d4f17b 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -345,12 +345,6 @@ class GroupBy(object):
         """
         return self._cython_agg_general('ohlc')
 
-    # def last(self):
-    #     return self.nth(-1)
-
-    # def first(self):
-    #     return self.nth(0)
-
     def nth(self, n):
         def picker(arr):
             if arr is not None:
@@ -1295,9 +1289,14 @@ class SeriesGroupBy(GroupBy):
         """
         result = self.obj.copy()
 
+        if isinstance(func, basestring):
+            wrapper = lambda x: getattr(x, func)(*args, **kwargs)
+        else:
+            wrapper = lambda x: func(x, *args, **kwargs)
+
         for name, group in self:
             object.__setattr__(group, 'name', name)
-            res = func(group, *args, **kwargs)
+            res = wrapper(group)
             indexer = self.obj.index.get_indexer(group.index)
             np.put(result, indexer, res)
 
@@ -1626,7 +1625,10 @@ class NDFrameGroupBy(GroupBy):
         obj = self._obj_with_exclusions
         gen = self.grouper.get_iterator(obj, axis=self.axis)
 
-        wrapper = lambda x: func(x, *args, **kwargs)
+        if isinstance(func, basestring):
+            wrapper = lambda x: getattr(x, func)(*args, **kwargs)
+        else:
+            wrapper = lambda x: func(x, *args, **kwargs)
 
         for name, group in gen:
             object.__setattr__(group, 'name', name)
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index c2e24e7e9..f59c3e0c8 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -430,6 +430,15 @@ class TestGroupBy(unittest.TestCase):
 
         assert_frame_equal(result, expected)
 
+    def test_transform_function_aliases(self):
+        result = self.df.groupby('A').transform('mean')
+        expected = self.df.groupby('A').transform(np.mean)
+        assert_frame_equal(result, expected)
+
+        result = self.df.groupby('A')['C'].transform('mean')
+        expected = self.df.groupby('A')['C'].transform(np.mean)
+        assert_series_equal(result, expected)
+
     def test_with_na(self):
         index = Index(np.arange(10))
         values = Series(np.ones(10), index)
