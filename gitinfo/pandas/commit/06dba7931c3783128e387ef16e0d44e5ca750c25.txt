commit 06dba7931c3783128e387ef16e0d44e5ca750c25
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Apr 1 23:46:51 2012 -0400

    BUG: preserve matching index names in DataFrame.append via concat, Index.append close GH #980

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 64d84dfb9..15cc0442d 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -294,6 +294,15 @@ def _need_upcast(values):
         return True
     return False
 
+
+
+def _consensus_name_attr(objs):
+    name = objs[0].name
+    for obj in objs[1:]:
+        if obj.name != name:
+            return None
+    return name
+
 #-------------------------------------------------------------------------------
 # Lots of little utilities
 
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 42c31498e..00154522d 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -253,11 +253,19 @@ class Index(np.ndarray):
         -------
         appended : Index
         """
+        name = self.name
         if isinstance(other, (list, tuple)):
             to_concat = (self.values,) + tuple(other)
+            for obj in other:
+                if isinstance(obj, Index) and obj.name != name:
+                    name = None
+                    break
         else:
             to_concat = self.values, other.values
-        return Index(np.concatenate(to_concat))
+            if isinstance(other, Index) and other.name != name:
+                name = None
+
+        return Index(np.concatenate(to_concat), name=name)
 
     def take(self, *args, **kwargs):
         """
@@ -2238,3 +2246,12 @@ def _sanitize_and_check(indexes):
         return indexes, 'special'
     else:
         return indexes, 'array'
+
+
+def _get_consensus_names(indexes):
+    consensus_name = indexes[0].names
+    for index in indexes[1:]:
+        if index.names != consensus_name:
+            consensus_name = [None] * index.nlevels
+            break
+    return consensus_name
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index dcba93fea..6fa4de432 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -224,6 +224,19 @@ class TestIndex(unittest.TestCase):
         result = index.append([])
         self.assert_(result.equals(index))
 
+    def test_append_empty_preserve_name(self):
+        left = Index([], name='foo')
+        right = Index([1, 2, 3], name='foo')
+
+        result = left.append(right)
+        self.assert_(result.name == 'foo')
+
+        left = Index([], name='foo')
+        right = Index([1, 2, 3], name='bar')
+
+        result = left.append(right)
+        self.assert_(result.name is None)
+
     def test_add_string(self):
         # from bug report
         index = Index(['a', 'b', 'c'])
@@ -1470,3 +1483,5 @@ if __name__ == '__main__':
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
                          # '--with-coverage', '--cover-package=pandas.core'],
                    exit=False)
+
+
diff --git a/pandas/tools/merge.py b/pandas/tools/merge.py
index 19f0d77e4..fa91964c6 100644
--- a/pandas/tools/merge.py
+++ b/pandas/tools/merge.py
@@ -9,7 +9,7 @@ from pandas.core.generic import NDFrame
 from pandas.core.groupby import get_group_index
 from pandas.core.series import Series
 from pandas.core.index import (Factor, Index, MultiIndex, _get_combined_index,
-                               _ensure_index)
+                               _ensure_index, _get_consensus_names)
 from pandas.core.internals import (IntBlock, BoolBlock, BlockManager,
                                    make_block, _consolidate)
 from pandas.util.decorators import cache_readonly, Appender, Substitution
@@ -751,7 +751,7 @@ class _Concatenator(object):
     def get_result(self):
         if self._is_series and self.axis == 0:
             new_data = np.concatenate([x.values for x in self.objs])
-            name = _consensus_name_attr(self.objs)
+            name = com._consensus_name_attr(self.objs)
             return Series(new_data, index=self.new_axes[0], name=name)
         elif self._is_series:
             data = dict(zip(self.new_axes[1], self.objs))
@@ -1031,26 +1031,13 @@ def _make_concat_multiindex(indexes, keys, levels=None, names=None):
 
     return MultiIndex(levels=new_levels, labels=new_labels, names=new_names)
 
-def _get_consensus_names(indexes):
-    consensus_name = indexes[0].names
-    for index in indexes[1:]:
-        if index.names != consensus_name:
-            consensus_name = [None] * index.nlevels
-            break
-    return consensus_name
-
-def _consensus_name_attr(objs):
-    name = objs[0].name
-    for obj in objs[1:]:
-        if obj.name != name:
-            return None
-    return name
 
 def _should_fill(lname, rname):
     if not isinstance(lname, basestring) or not isinstance(rname, basestring):
         return True
     return lname == rname
 
+
 def _all_indexes_same(indexes):
     first = indexes[0]
     for index in indexes[1:]:
@@ -1058,5 +1045,6 @@ def _all_indexes_same(indexes):
             return False
     return True
 
+
 def _any(x):
     return x is not None and len(x) > 0 and any([y is not None for y in x])
