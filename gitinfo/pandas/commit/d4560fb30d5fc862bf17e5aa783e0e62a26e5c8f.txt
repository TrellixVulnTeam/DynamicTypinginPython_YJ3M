commit d4560fb30d5fc862bf17e5aa783e0e62a26e5c8f
Author: jreback <jeff@reback.net>
Date:   Wed May 29 20:36:40 2013 -0400

    DOC: cookbook/v0.11.1 updates

diff --git a/doc/source/cookbook.rst b/doc/source/cookbook.rst
index 7928c4e68..8aac41572 100644
--- a/doc/source/cookbook.rst
+++ b/doc/source/cookbook.rst
@@ -92,6 +92,19 @@ Levels
 `Flatten Hierarchical columns
 <http://stackoverflow.com/questions/14507794/python-pandas-how-to-flatten-a-hierarchical-index-in-columns>`__
 
+.. _cookbook.missing_data:
+
+Missing Data
+------------
+
+The :ref:`missing data <missing_data>` docs.
+
+Replace
+~~~~~~~
+
+`Using replace with backrefs
+<http://stackoverflow.com/questions/16818871/extracting-value-and-creating-new-column-out-of-it>`__
+
 .. _cookbook.grouping:
 
 Grouping
diff --git a/doc/source/missing_data.rst b/doc/source/missing_data.rst
index 9df00afcf..a9fc412a6 100644
--- a/doc/source/missing_data.rst
+++ b/doc/source/missing_data.rst
@@ -23,6 +23,8 @@ pandas.
     NumPy will soon be able to provide a native NA type solution (similar to R)
     performant enough to be used in pandas.
 
+See the :ref:`cookbook<cookbook.missing_data>` for some advanced strategies
+
 Missing data basics
 -------------------
 
diff --git a/doc/source/v0.11.1.txt b/doc/source/v0.11.1.txt
index ffa2cc6dc..43111a27e 100644
--- a/doc/source/v0.11.1.txt
+++ b/doc/source/v0.11.1.txt
@@ -78,6 +78,7 @@ Enhancements
   - ``pd.read_html()`` can now parse HTML strings, files or urls and return
     DataFrames, courtesy of @cpcloud. (GH3477_, GH3605_, GH3606_, GH3616_).
     It works with a *single* parser backend: BeautifulSoup4 + html5lib
+
     - You can use ``pd.read_html()`` to read the output from ``DataFrame.to_html()`` like so
 
     .. ipython :: python
@@ -110,6 +111,25 @@ Enhancements
   - ``DataFrame.replace()`` now allows regular expressions on contained
     ``Series`` with object dtype. See the examples section in the regular docs
     :ref:`Replacing via String Expression <missing_data.replace_expression>`
+
+    For example you can do
+
+    .. ipython :: python
+
+        df = DataFrame({'a': list('ab..'), 'b': [1, 2, 3, 4]})
+        df.replace(regex=r'\s*\.\s*', value=nan)
+
+    to replace all occurrences of the string ``'.'`` with zero or more
+    instances of surrounding whitespace with ``NaN``.
+
+    Regular string replacement still works as expected. For example, you can do
+
+    .. ipython :: python
+
+        df.replace('.', nan)
+
+    to replace all occurrences of the string ``'.'`` with ``NaN``.
+
   - ``Series.str`` now supports iteration (GH3638_). You can iterate over the
     individual elements of each string in the ``Series``. Each iteration yields
     yields a ``Series`` with either a single character at each index of the
@@ -190,24 +210,6 @@ Bug Fixes
     - Duplicate indexes with and empty DataFrame.from_records will return a correct frame (GH3562_)
     - Concat to produce a non-unique columns when duplicates are across dtypes is fixed (GH3602_)
 
-    For example you can do
-
-    .. ipython :: python
-
-        df = DataFrame({'a': list('ab..'), 'b': [1, 2, 3, 4]})
-        df.replace(regex=r'\s*\.\s*', value=nan)
-
-    to replace all occurrences of the string ``'.'`` with zero or more
-    instances of surrounding whitespace with ``NaN``.
-
-    Regular string replacement still works as expected. For example, you can do
-
-    .. ipython :: python
-
-        df.replace('.', nan)
-
-    to replace all occurrences of the string ``'.'`` with ``NaN``.
-
 See the `full release notes
 <https://github.com/pydata/pandas/blob/master/RELEASE.rst>`__ or issue tracker
 on GitHub for a complete list.
