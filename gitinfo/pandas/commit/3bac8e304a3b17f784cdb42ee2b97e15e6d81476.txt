commit 3bac8e304a3b17f784cdb42ee2b97e15e6d81476
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Apr 4 19:14:14 2012 -0400

    BUG: fix up borked merge conflicts. test suite passes now

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 46a2fc57c..d54d81d8b 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -319,6 +319,7 @@ def backfill_1d(values, limit=None):
     else: # pragma: no cover
         raise ValueError('Invalid dtype for padding')
 
+    _method(values, isnull(values).view(np.uint8), limit=limit)
 
 def _consensus_name_attr(objs):
     name = objs[0].name
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index d7a3ac0c2..2eab7963b 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -27,7 +27,7 @@ import numpy.ma as ma
 from pandas.core.common import (isnull, notnull, PandasError, _try_sort,
                                 _default_index, _stringify)
 from pandas.core.generic import NDFrame
-from pandas.core.index import Index, MultiIndex, _ensure_index
+from pandas.core.index import Index, DatetimeIndex, MultiIndex, _ensure_index
 from pandas.core.indexing import _NDFrameIndexer, _maybe_droplevels
 from pandas.core.internals import BlockManager, make_block, form_blocks
 from pandas.core.series import Series, _radd_compat
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 78a2f791d..69997c05b 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -273,16 +273,21 @@ class Index(np.ndarray):
         appended : Index
         """
         name = self.name
+        to_concat = [self]
+
         if isinstance(other, (list, tuple)):
-            to_concat = (self.values,) + tuple(other)
-            for obj in other:
-                if isinstance(obj, Index) and obj.name != name:
-                    name = None
-                    break
+            to_concat = to_concat + list(other)
         else:
-            to_concat = self.values, other.values
-            if isinstance(other, Index) and other.name != name:
+            to_concat.append(other)
+
+        for obj in to_concat:
+            if isinstance(obj, Index) and obj.name != name:
                 name = None
+                break
+
+        to_concat = _ensure_compat_concat(to_concat)
+        to_concat = [x.values if isinstance(x, Index) else x
+                     for x in to_concat]
 
         return Index(np.concatenate(to_concat), name=name)
 
@@ -3564,6 +3569,22 @@ def _sanitize_and_check(indexes):
     else:
         return indexes, 'array'
 
+def _handle_legacy_indexes(indexes):
+    from pandas.core.daterange import DateRange
+
+    converted = []
+    for index in indexes:
+        if isinstance(index, DateRange):
+            index = _convert_daterange(index)
+
+        converted.append(index)
+
+    return converted
+
+def _convert_daterange(obj):
+    return DatetimeIndex(start=obj[0], end=obj[-1],
+                         freq=obj.offset, tz=obj.tzinfo)
+
 
 def _get_consensus_names(indexes):
     consensus_name = indexes[0].names
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 7e9c59c7a..c8ee264f7 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2453,6 +2453,28 @@ def _get_rename_function(mapper):
 
     return f
 
+def _resolve_offset(freq, kwds):
+    from pandas.core.datetools import getOffset
+
+    if 'timeRule' in kwds or 'offset' in kwds:
+        offset = kwds.get('offset')
+        offset = kwds.get('timeRule', offset)
+        if isinstance(offset, basestring):
+            offset = datetools.getOffset(offset)
+        warn = True
+    else:
+        offset = freq
+        warn = False
+
+    if warn:
+        import warnings
+        warnings.warn("'timeRule' and 'offset' parameters are deprecated,"
+                      " please use 'freq' instead",
+                      FutureWarning)
+
+    return offset
+
+
 #----------------------------------------------------------------------
 # Add plotting methods to Series
 
diff --git a/pandas/src/datetime.pxd b/pandas/src/datetime.pxd
index a838ec8b4..3e10a452f 100644
--- a/pandas/src/datetime.pxd
+++ b/pandas/src/datetime.pxd
@@ -23,6 +23,7 @@ cdef extern from "datetime.h":
     int PyDateTime_TIME_GET_SECOND(datetime o)
     int PyDateTime_TIME_GET_MICROSECOND(datetime o)
     bint PyDateTime_Check(object o)
+    bint PyDate_Check(object o)
     PyObject *PyDateTime_FromDateAndTime(int year, int month, int day, int hour,
                                          int minute, int second, int us)
 
diff --git a/pandas/src/inference.pyx b/pandas/src/inference.pyx
index 086379d33..d20a8f7ac 100644
--- a/pandas/src/inference.pyx
+++ b/pandas/src/inference.pyx
@@ -92,6 +92,10 @@ def infer_dtype_list(list values):
         Py_ssize_t i, n = len(values)
     pass
 
+cdef inline bint is_timestamp(object o):
+    return isinstance(o, Timestamp)
+
+
 cdef inline bint is_datetime(object o):
     return PyDateTime_Check(o)
 
@@ -194,6 +198,24 @@ def is_datetime_array(ndarray[object] values):
             return False
     return True
 
+def is_timestamp_array(ndarray[object] values):
+    cdef int i, n = len(values)
+    if n == 0:
+        return False
+    for i in range(n):
+        if not is_timestamp(values[i]):
+            return False
+    return True
+
+def is_datetime64_array(ndarray values):
+    cdef int i, n = len(values)
+    if n == 0:
+        return False
+    for i in range(n):
+        if not util.is_datetime64_object(values[i]):
+            return False
+    return True
+
 def is_date_array(ndarray[object] values):
     cdef int i, n = len(values)
     if n == 0:
diff --git a/pandas/src/tseries.pyx b/pandas/src/tseries.pyx
index a06b9cc0c..2f71c103d 100644
--- a/pandas/src/tseries.pyx
+++ b/pandas/src/tseries.pyx
@@ -35,29 +35,6 @@ cdef extern from "math.h":
     double sqrt(double x)
     double fabs(double)
 
-cdef extern from "datetime.h":
-
-    ctypedef class datetime.datetime [object PyDateTime_DateTime]:
-        # cdef int *data
-        # cdef long hashcode
-        # cdef char hastzinfo
-        pass
-
-    int PyDateTime_GET_YEAR(datetime o)
-    int PyDateTime_GET_MONTH(datetime o)
-    int PyDateTime_GET_DAY(datetime o)
-    int PyDateTime_DATE_GET_HOUR(datetime o)
-    int PyDateTime_DATE_GET_MINUTE(datetime o)
-    int PyDateTime_DATE_GET_SECOND(datetime o)
-    int PyDateTime_DATE_GET_MICROSECOND(datetime o)
-    int PyDateTime_TIME_GET_HOUR(datetime o)
-    int PyDateTime_TIME_GET_MINUTE(datetime o)
-    int PyDateTime_TIME_GET_SECOND(datetime o)
-    int PyDateTime_TIME_GET_MICROSECOND(datetime o)
-    bint PyDateTime_Check(object o)
-    bint PyDate_Check(object o)
-    void PyDateTime_IMPORT()
-
 # import datetime C API
 PyDateTime_IMPORT
 
diff --git a/pandas/tests/test_tseries.py b/pandas/tests/test_tseries.py
index ab4e0d2ce..beacc785b 100644
--- a/pandas/tests/test_tseries.py
+++ b/pandas/tests/test_tseries.py
@@ -421,7 +421,7 @@ class TestTypeInference(unittest.TestCase):
         import datetime
         dates = [datetime.datetime(2012, 1, x) for x in range(1, 20)]
         index = Index(dates)
-        self.assert_(index.inferred_type == 'datetime')
+        self.assert_(index.inferred_type == 'datetime64')
 
     def test_date(self):
         import datetime
