commit da9e35883b28c83fcf55635f73c65bef89902f21
Author: alimcmaster1 <alimcmaster1@gmail.com>
Date:   Tue Oct 30 12:24:16 2018 +0000

    CLN: isort imports- util dir (#23331)

diff --git a/pandas/_version.py b/pandas/_version.py
index f4c8938c6..036c927df 100644
--- a/pandas/_version.py
+++ b/pandas/_version.py
@@ -12,6 +12,7 @@ import os
 import re
 import subprocess
 import sys
+
 from pandas.compat import PY3
 
 
diff --git a/pandas/conftest.py b/pandas/conftest.py
index b8ba34765..6142f188f 100644
--- a/pandas/conftest.py
+++ b/pandas/conftest.py
@@ -1,15 +1,15 @@
-import os
 import importlib
+import os
 
+import hypothesis
+from hypothesis import strategies as st
+import numpy as np
 import pytest
 
-import pandas
-import numpy as np
-import pandas as pd
 from pandas.compat import PY3
 import pandas.util._test_decorators as td
-import hypothesis
 
+import pandas as pd
 
 hypothesis.settings.register_profile(
     "ci",
@@ -285,7 +285,7 @@ def datapath(request):
 @pytest.fixture
 def iris(datapath):
     """The iris dataset as a DataFrame."""
-    return pandas.read_csv(datapath('data', 'iris.csv'))
+    return pd.read_csv(datapath('data', 'iris.csv'))
 
 
 @pytest.fixture(params=['nlargest', 'nsmallest'])
@@ -512,7 +512,6 @@ def mock():
 # ----------------------------------------------------------------
 # Global setup for tests using Hypothesis
 
-from hypothesis import strategies as st
 
 # Registering these strategies makes them globally available via st.from_type,
 # which is use for offsets in tests/tseries/offsets/test_offsets_properties.py
diff --git a/pandas/testing.py b/pandas/testing.py
index 3baf99957..dbea1ecc7 100644
--- a/pandas/testing.py
+++ b/pandas/testing.py
@@ -5,4 +5,4 @@ Public testing utility functions.
 """
 
 from pandas.util.testing import (
-    assert_frame_equal, assert_series_equal, assert_index_equal)
+    assert_frame_equal, assert_index_equal, assert_series_equal)
diff --git a/pandas/util/_decorators.py b/pandas/util/_decorators.py
index 82cd44113..638282f32 100644
--- a/pandas/util/_decorators.py
+++ b/pandas/util/_decorators.py
@@ -1,9 +1,10 @@
-from pandas.compat import callable, signature, PY2
-from pandas._libs.properties import cache_readonly  # noqa
+from functools import WRAPPER_ASSIGNMENTS, update_wrapper, wraps
 import inspect
-import warnings
 from textwrap import dedent, wrap
-from functools import wraps, update_wrapper, WRAPPER_ASSIGNMENTS
+import warnings
+
+from pandas._libs.properties import cache_readonly  # noqa
+from pandas.compat import PY2, callable, signature
 
 
 def deprecate(name, alternative, version, alt_name=None,
diff --git a/pandas/util/_depr_module.py b/pandas/util/_depr_module.py
index 9c648b76f..2c8feec79 100644
--- a/pandas/util/_depr_module.py
+++ b/pandas/util/_depr_module.py
@@ -3,8 +3,8 @@ This module houses a utility class for mocking deprecated modules.
 It is for internal use only and should not be used beyond this purpose.
 """
 
-import warnings
 import importlib
+import warnings
 
 
 class _DeprecatedModule(object):
diff --git a/pandas/util/_doctools.py b/pandas/util/_doctools.py
index c9e6e2736..4aee0a2e5 100644
--- a/pandas/util/_doctools.py
+++ b/pandas/util/_doctools.py
@@ -1,7 +1,9 @@
 import numpy as np
-import pandas as pd
+
 import pandas.compat as compat
 
+import pandas as pd
+
 
 class TablePlotter(object):
     """
diff --git a/pandas/util/_print_versions.py b/pandas/util/_print_versions.py
index 03fc82a3a..3016bf04b 100644
--- a/pandas/util/_print_versions.py
+++ b/pandas/util/_print_versions.py
@@ -1,11 +1,11 @@
+import codecs
+import importlib
+import locale
 import os
 import platform
-import sys
 import struct
 import subprocess
-import codecs
-import locale
-import importlib
+import sys
 
 
 def get_sys_info():
diff --git a/pandas/util/_test_decorators.py b/pandas/util/_test_decorators.py
index 2fe891346..52a6740f1 100644
--- a/pandas/util/_test_decorators.py
+++ b/pandas/util/_test_decorators.py
@@ -23,15 +23,17 @@ def test_foo():
 
 For more information, refer to the ``pytest`` documentation on ``skipif``.
 """
-import pytest
-import locale
 from distutils.version import LooseVersion
+import locale
 
-from pandas.compat import (is_platform_windows, is_platform_32bit, PY3,
-                           import_lzma)
+import pytest
+
+from pandas.compat import (
+    PY3, import_lzma, is_platform_32bit, is_platform_windows)
 from pandas.compat.numpy import _np_version_under1p15
-from pandas.core.computation.expressions import (_USE_NUMEXPR,
-                                                 _NUMEXPR_INSTALLED)
+
+from pandas.core.computation.expressions import (
+    _NUMEXPR_INSTALLED, _USE_NUMEXPR)
 
 
 def safe_import(mod_name, min_version=None):
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 8871cac6f..96387349e 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -1,57 +1,44 @@
 from __future__ import division
-# pylint: disable-msg=W0402
 
+from contextlib import contextmanager
+from datetime import datetime
+from functools import wraps
+import locale
+import os
 import re
 import string
+import subprocess
 import sys
 import tempfile
-import warnings
-import os
-import subprocess
-import locale
 import traceback
+import warnings
 
-from datetime import datetime
-from functools import wraps
-from contextlib import contextmanager
-
-from numpy.random import randn, rand
 import numpy as np
+from numpy.random import rand, randn
 
-import pandas as pd
-from pandas.core.arrays import (
-    ExtensionArray,
-    IntervalArray,
-    PeriodArray,
-)
-from pandas.core.dtypes.missing import array_equivalent
-from pandas.core.dtypes.common import (
-    is_datetimelike_v_numeric,
-    is_datetimelike_v_object,
-    is_number, is_bool,
-    needs_i8_conversion,
-    is_categorical_dtype,
-    is_interval_dtype,
-    is_sequence,
-    is_list_like,
-    is_extension_array_dtype)
-from pandas.io.formats.printing import pprint_thing
-from pandas.core.algorithms import take_1d
-import pandas.core.common as com
-
+from pandas._libs import testing as _testing
 import pandas.compat as compat
 from pandas.compat import (
-    filter, map, zip, range, unichr, lrange, lmap, lzip, u, callable, Counter,
-    raise_with_traceback, httplib, StringIO, string_types, PY3, PY2)
+    PY2, PY3, Counter, StringIO, callable, filter, httplib, lmap, lrange, lzip,
+    map, raise_with_traceback, range, string_types, u, unichr, zip)
+
+from pandas.core.dtypes.common import (
+    is_bool, is_categorical_dtype, is_datetimelike_v_numeric,
+    is_datetimelike_v_object, is_extension_array_dtype, is_interval_dtype,
+    is_list_like, is_number, is_sequence, needs_i8_conversion)
+from pandas.core.dtypes.missing import array_equivalent
 
-from pandas import (bdate_range, CategoricalIndex, Categorical, IntervalIndex,
-                    DatetimeIndex, TimedeltaIndex, PeriodIndex, RangeIndex,
-                    Index, MultiIndex,
-                    Series, DataFrame, Panel)
+import pandas as pd
+from pandas import (
+    Categorical, CategoricalIndex, DataFrame, DatetimeIndex, Index,
+    IntervalIndex, MultiIndex, Panel, PeriodIndex, RangeIndex, Series,
+    TimedeltaIndex, bdate_range)
+from pandas.core.algorithms import take_1d
+from pandas.core.arrays import ExtensionArray, IntervalArray, PeriodArray
+import pandas.core.common as com
 
-from pandas._libs import testing as _testing
 from pandas.io.common import urlopen
-
+from pandas.io.formats.printing import pprint_thing
 
 N = 30
 K = 4
diff --git a/setup.cfg b/setup.cfg
index 1cfefa1bb..edd3b507c 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -89,19 +89,6 @@ force_grid_wrap=0
 combine_as_imports=True
 force_sort_within_sections=True
 skip=
-    pandas/lib.py,
-    pandas/tslib.py,
-    pandas/testing.py,
-    pandas/conftest.py,
-    pandas/_version.py,
-    pandas/parser.py,
-    pandas/util/_depr_module.py,
-    pandas/util/testing.py,
-    pandas/util/_doctools.py,
-    pandas/util/decorators.py,
-    pandas/util/_print_versions.py,
-    pandas/util/_decorators.py,
-    pandas/util/_test_decorators.py,
     pandas/io/sas/sas7bdat.py,
     pandas/io/formats/console.py,
     pandas/io/formats/excel.py,
