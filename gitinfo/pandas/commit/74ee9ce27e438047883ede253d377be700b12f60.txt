commit 74ee9ce27e438047883ede253d377be700b12f60
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Aug 10 15:27:59 2011 -0400

    ENH: missing unstacked levels will be omitted

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 2672121b0..f665079a5 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -13,7 +13,6 @@ labeling information
 # pylint: disable=W0212,W0231,W0703,W0622
 
 from cStringIO import StringIO
-from datetime import datetime
 import operator
 import sys
 import warnings
diff --git a/pandas/core/series.py b/pandas/core/series.py
index cd61bcc75..48c55ff2c 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1584,9 +1584,18 @@ class _Unstacker(object):
 
     def get_result(self):
         from pandas.core.frame import DataFrame
-        return DataFrame(self.get_new_values(),
-                         index=self.get_new_index(),
-                         columns=self.get_new_columns())
+
+        # TODO: find a better way than this masking business
+
+        values, mask = self.get_new_values()
+        columns = self.get_new_columns()
+        index = self.get_new_index()
+
+        # filter out missing levels
+        values = values[:, mask]
+        columns = columns[mask]
+
+        return DataFrame(values, index=index, columns=columns)
 
     def get_new_values(self):
         # place the values
@@ -1595,15 +1604,20 @@ class _Unstacker(object):
         result_width = width * stride
 
         new_values = np.empty((length, result_width), dtype=self.values.dtype)
+        new_mask = np.zeros((length, result_width), dtype=bool)
+
         new_values.fill(np.nan)
 
         # is there a simpler / faster way of doing this?
         for i in xrange(self.values.shape[1]):
             chunk = new_values[:, i * width : (i + 1) * width]
+            mask_chunk = new_mask[:, i * width : (i + 1) * width]
+
             chunk.flat[self.mask] = self.sorted_values[:, i]
+            mask_chunk.flat[self.mask] = True
 
         new_values = new_values.take(self.unique_groups, axis=0)
-        return new_values
+        return new_values, new_mask.sum(0) > 0
 
     def get_new_columns(self):
         if self.value_columns is None:
