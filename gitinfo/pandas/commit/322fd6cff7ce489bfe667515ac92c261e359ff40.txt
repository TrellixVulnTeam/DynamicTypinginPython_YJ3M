commit 322fd6cff7ce489bfe667515ac92c261e359ff40
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Aug 9 22:38:58 2011 -0400

    ENH: hierarch xs working

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index a171883eb..c63d0eed8 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -871,12 +871,15 @@ class DataFrame(NDFrame):
         -------
         xs : Series
         """
-        if key not in self.index:
-            raise Exception('No cross-section for %s' % key)
+        # if key not in self.index:
+        #     raise Exception('No cross-section for %s' % key)
 
         self._consolidate_inplace()
-        values = self._data.xs(key, axis=1, copy=copy)
-        return Series(values.as_matrix(), index=self.columns)
+        new_data = self._data.xs(key, axis=1, copy=copy)
+        if new_data.ndim == 1:
+            return Series(new_data.as_matrix(), index=self.columns)
+        else:
+            return DataFrame(new_data)
 
     #----------------------------------------------------------------------
     # Reindexing
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 1811fa88c..8e3fd6b16 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -429,13 +429,17 @@ class BlockManager(object):
     def xs(self, key, axis=1, copy=True):
         assert(axis >= 1)
 
-        i = self.axes[axis].get_loc(key)
+        loc = self.axes[axis].get_loc(key)
         slicer = [slice(None, None) for _ in range(self.ndim)]
-        slicer[axis] = i
+        slicer[axis] = loc
         slicer = tuple(slicer)
 
         new_axes = list(self.axes)
-        new_axes.pop(axis)
+
+        if isinstance(loc, slice):
+            new_axes[axis] = new_axes[axis][loc]
+        else:
+            new_axes.pop(axis)
 
         new_blocks = []
         if len(self.blocks) > 1:
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index f4430d56d..60204e77a 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -41,8 +41,20 @@ class TestDataFrameMultiLevel(unittest.TestCase):
 
     def test_getitem_simple(self):
         df = self.frame.T
+
+        col = df['foo', 'one']
+        assert_almost_equal(col.values, df.values[:, 0])
         self.assertRaises(KeyError, df.__getitem__, ('foo', 'four'))
 
+    def test_xs(self):
+        xs = self.frame.xs(('bar', 'two'))
+        assert_almost_equal(xs.values, self.frame.values[4])
+
+    def test_xs_partial(self):
+        result = self.frame.xs('foo')
+        expected = self.frame.T['foo'].T
+        assert_frame_equal(result, expected)
+
     def test_getitem_toplevel(self):
         df = self.frame.T
 
@@ -54,14 +66,12 @@ class TestDataFrameMultiLevel(unittest.TestCase):
         expected = df.reindex(columns=df.columns[3:5])
         assert_frame_equal(result, expected)
 
+    def test_getitem_partial(self):
         ymd = self.ymd.T
         result = ymd[2000, 2]
         expected = ymd.reindex(columns=ymd.columns[ymd.columns.labels[1] == 1])
         assert_frame_equal(result, expected)
 
-    def test_getitem_partial(self):
-        pass
-
     def test_fancy_slice_partial(self):
         pass
 
