commit 02b59b63a5bb8bb03d5c6a0013399906d5f355a2
Author: topper-123 <terji78@gmail.com>
Date:   Mon Feb 19 13:50:56 2018 +0000

    add test for numpy ops, esp. nanmin/max bug for np<1.13 (#19753)

diff --git a/pandas/tests/test_nanops.py b/pandas/tests/test_nanops.py
index df3c49a73..dffb303af 100644
--- a/pandas/tests/test_nanops.py
+++ b/pandas/tests/test_nanops.py
@@ -13,6 +13,7 @@ from pandas.core.dtypes.common import is_integer_dtype
 import pandas.core.nanops as nanops
 import pandas.util.testing as tm
 import pandas.util._test_decorators as td
+from pandas.compat.numpy import _np_version_under1p13
 
 use_bn = nanops._USE_BOTTLENECK
 
@@ -1015,3 +1016,34 @@ def test_use_bottleneck():
         assert not pd.get_option('use_bottleneck')
 
         pd.set_option('use_bottleneck', use_bn)
+
+
+@pytest.mark.parametrize("numpy_op, expected", [
+    (np.sum, 10),
+    (np.nansum, 10),
+    (np.mean, 2.5),
+    (np.nanmean, 2.5),
+    (np.median, 2.5),
+    (np.nanmedian, 2.5),
+    (np.min, 1),
+    (np.max, 4),
+])
+def test_numpy_ops(numpy_op, expected):
+    # GH8383
+    result = numpy_op(pd.Series([1, 2, 3, 4]))
+    assert result == expected
+
+
+@pytest.mark.parametrize("numpy_op, expected", [
+    (np.nanmin, 1),
+    (np.nanmax, 4),
+])
+def test_numpy_ops_np_version_under1p13(numpy_op, expected):
+    # GH8383
+    result = numpy_op(pd.Series([1, 2, 3, 4]))
+    if _np_version_under1p13:
+        # bug for numpy < 1.13, where result is a series, should be a scalar
+        with pytest.raises(ValueError):
+            assert result == expected
+    else:
+        assert result == expected
