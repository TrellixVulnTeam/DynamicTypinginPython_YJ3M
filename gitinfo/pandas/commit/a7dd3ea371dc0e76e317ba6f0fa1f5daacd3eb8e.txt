commit a7dd3ea371dc0e76e317ba6f0fa1f5daacd3eb8e
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Tue Mar 31 10:08:50 2020 -0700

    REF: test_reindex_like (#33150)

diff --git a/pandas/tests/frame/indexing/test_indexing.py b/pandas/tests/frame/indexing/test_indexing.py
index 2498bfbaa..9e6d41a88 100644
--- a/pandas/tests/frame/indexing/test_indexing.py
+++ b/pandas/tests/frame/indexing/test_indexing.py
@@ -1616,11 +1616,6 @@ class TestDataFrameIndexing:
         actual = df.reindex(target, method=method)
         tm.assert_frame_equal(expected, actual)
 
-        actual = df.reindex_like(df, method=method, tolerance=0)
-        tm.assert_frame_equal(df, actual)
-        actual = df.reindex_like(df, method=method, tolerance=[0, 0, 0, 0])
-        tm.assert_frame_equal(df, actual)
-
         actual = df.reindex(target, method=method, tolerance=1)
         tm.assert_frame_equal(expected, actual)
         actual = df.reindex(target, method=method, tolerance=[1, 1, 1, 1])
@@ -1641,17 +1636,6 @@ class TestDataFrameIndexing:
         actual = df[::-1].reindex(target, method=switched_method)
         tm.assert_frame_equal(expected, actual)
 
-    def test_reindex_subclass(self):
-        # https://github.com/pandas-dev/pandas/issues/31925
-        class MyDataFrame(DataFrame):
-            pass
-
-        expected = DataFrame()
-        df = MyDataFrame()
-        result = df.reindex_like(expected)
-
-        tm.assert_frame_equal(result, expected)
-
     def test_reindex_methods_nearest_special(self):
         df = pd.DataFrame({"x": list(range(5))})
         target = np.array([-0.1, 0.9, 1.1, 1.5])
diff --git a/pandas/tests/frame/methods/test_reindex_like.py b/pandas/tests/frame/methods/test_reindex_like.py
new file mode 100644
index 000000000..ce68ec28e
--- /dev/null
+++ b/pandas/tests/frame/methods/test_reindex_like.py
@@ -0,0 +1,39 @@
+import numpy as np
+import pytest
+
+from pandas import DataFrame
+import pandas._testing as tm
+
+
+class TestDataFrameReindexLike:
+    def test_reindex_like(self, float_frame):
+        other = float_frame.reindex(index=float_frame.index[:10], columns=["C", "B"])
+
+        tm.assert_frame_equal(other, float_frame.reindex_like(other))
+
+    @pytest.mark.parametrize(
+        "method,expected_values",
+        [
+            ("nearest", [0, 1, 1, 2]),
+            ("pad", [np.nan, 0, 1, 1]),
+            ("backfill", [0, 1, 2, 2]),
+        ],
+    )
+    def test_reindex_like_methods(self, method, expected_values):
+        df = DataFrame({"x": list(range(5))})
+
+        result = df.reindex_like(df, method=method, tolerance=0)
+        tm.assert_frame_equal(df, result)
+        result = df.reindex_like(df, method=method, tolerance=[0, 0, 0, 0])
+        tm.assert_frame_equal(df, result)
+
+    def test_reindex_like_subclass(self):
+        # https://github.com/pandas-dev/pandas/issues/31925
+        class MyDataFrame(DataFrame):
+            pass
+
+        expected = DataFrame()
+        df = MyDataFrame()
+        result = df.reindex_like(expected)
+
+        tm.assert_frame_equal(result, expected)
diff --git a/pandas/tests/frame/test_axis_select_reindex.py b/pandas/tests/frame/test_axis_select_reindex.py
index 42fb722c9..f61512b1a 100644
--- a/pandas/tests/frame/test_axis_select_reindex.py
+++ b/pandas/tests/frame/test_axis_select_reindex.py
@@ -155,11 +155,6 @@ class TestDataFrameSelectReindex:
         smaller = int_frame.reindex(columns=["A", "B"])
         assert smaller["A"].dtype == np.int64
 
-    def test_reindex_like(self, float_frame):
-        other = float_frame.reindex(index=float_frame.index[:10], columns=["C", "B"])
-
-        tm.assert_frame_equal(other, float_frame.reindex_like(other))
-
     def test_reindex_columns(self, float_frame):
         new_frame = float_frame.reindex(columns=["A", "B", "E"])
 
diff --git a/pandas/tests/series/indexing/test_alter_index.py b/pandas/tests/series/indexing/test_alter_index.py
index b45f831ff..f2969e15f 100644
--- a/pandas/tests/series/indexing/test_alter_index.py
+++ b/pandas/tests/series/indexing/test_alter_index.py
@@ -1,5 +1,3 @@
-from datetime import datetime
-
 import numpy as np
 import pytest
 
@@ -149,25 +147,17 @@ def test_reindex_pad():
 def test_reindex_nearest():
     s = Series(np.arange(10, dtype="int64"))
     target = [0.1, 0.9, 1.5, 2.0]
-    actual = s.reindex(target, method="nearest")
+    result = s.reindex(target, method="nearest")
     expected = Series(np.around(target).astype("int64"), target)
-    tm.assert_series_equal(expected, actual)
-
-    actual = s.reindex_like(actual, method="nearest")
-    tm.assert_series_equal(expected, actual)
-
-    actual = s.reindex_like(actual, method="nearest", tolerance=1)
-    tm.assert_series_equal(expected, actual)
-    actual = s.reindex_like(actual, method="nearest", tolerance=[1, 2, 3, 4])
-    tm.assert_series_equal(expected, actual)
+    tm.assert_series_equal(expected, result)
 
-    actual = s.reindex(target, method="nearest", tolerance=0.2)
+    result = s.reindex(target, method="nearest", tolerance=0.2)
     expected = Series([0, 1, np.nan, 2], target)
-    tm.assert_series_equal(expected, actual)
+    tm.assert_series_equal(expected, result)
 
-    actual = s.reindex(target, method="nearest", tolerance=[0.3, 0.01, 0.4, 3])
+    result = s.reindex(target, method="nearest", tolerance=[0.3, 0.01, 0.4, 3])
     expected = Series([0, np.nan, np.nan, 2], target)
-    tm.assert_series_equal(expected, actual)
+    tm.assert_series_equal(expected, result)
 
 
 def test_reindex_backfill():
@@ -237,25 +227,6 @@ def test_reindex_categorical():
     tm.assert_series_equal(result, expected)
 
 
-def test_reindex_like(datetime_series):
-    other = datetime_series[::2]
-    tm.assert_series_equal(
-        datetime_series.reindex(other.index), datetime_series.reindex_like(other)
-    )
-
-    # GH 7179
-    day1 = datetime(2013, 3, 5)
-    day2 = datetime(2013, 5, 5)
-    day3 = datetime(2014, 3, 5)
-
-    series1 = Series([5, None, None], [day1, day2, day3])
-    series2 = Series([None, None], [day1, day3])
-
-    result = series1.reindex_like(series2, method="pad")
-    expected = Series([5, np.nan], index=[day1, day3])
-    tm.assert_series_equal(result, expected)
-
-
 def test_reindex_fill_value():
     # -----------------------------------------------------------
     # floats
diff --git a/pandas/tests/series/methods/test_reindex_like.py b/pandas/tests/series/methods/test_reindex_like.py
new file mode 100644
index 000000000..7f24c778f
--- /dev/null
+++ b/pandas/tests/series/methods/test_reindex_like.py
@@ -0,0 +1,41 @@
+from datetime import datetime
+
+import numpy as np
+
+from pandas import Series
+import pandas._testing as tm
+
+
+def test_reindex_like(datetime_series):
+    other = datetime_series[::2]
+    tm.assert_series_equal(
+        datetime_series.reindex(other.index), datetime_series.reindex_like(other)
+    )
+
+    # GH#7179
+    day1 = datetime(2013, 3, 5)
+    day2 = datetime(2013, 5, 5)
+    day3 = datetime(2014, 3, 5)
+
+    series1 = Series([5, None, None], [day1, day2, day3])
+    series2 = Series([None, None], [day1, day3])
+
+    result = series1.reindex_like(series2, method="pad")
+    expected = Series([5, np.nan], index=[day1, day3])
+    tm.assert_series_equal(result, expected)
+
+
+def test_reindex_like_nearest():
+    ser = Series(np.arange(10, dtype="int64"))
+
+    target = [0.1, 0.9, 1.5, 2.0]
+    other = ser.reindex(target, method="nearest")
+    expected = Series(np.around(target).astype("int64"), target)
+
+    result = ser.reindex_like(other, method="nearest")
+    tm.assert_series_equal(expected, result)
+
+    result = ser.reindex_like(other, method="nearest", tolerance=1)
+    tm.assert_series_equal(expected, result)
+    result = ser.reindex_like(other, method="nearest", tolerance=[1, 2, 3, 4])
+    tm.assert_series_equal(expected, result)
