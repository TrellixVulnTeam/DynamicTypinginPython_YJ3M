commit 35f37fa3a6350261810da3887ab75381acff6513
Author: jreback <jeff@reback.net>
Date:   Sat Dec 1 10:25:26 2012 -0500

    support a non-none where that is empty in removals (e.g. where = [])

diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index bcfe94c17..bfe447cf0 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -389,7 +389,7 @@ class HDFStore(object):
         if group is not None:
 
             # remove the node
-            if where is None:
+            if where is None or not len(where):
                 group = self.get_node(key)
                 group._f_remove(recursive=True)
             
@@ -468,19 +468,17 @@ class HDFStore(object):
 
             # recursively create the groups
             path = '/'
-            if len(paths) > 1:
-                for p in paths[:-1]:
-                    new_path = path
-                    if not path.endswith('/'):
-                        new_path += '/'
-                    new_path += p
-                    group = self.get_node(new_path)
-                    if group is None:
-                        group = self.handle.createGroup(path, p)
-                    path  = new_path
-
-            # create the required group
-            group = self.handle.createGroup(path, paths[-1])
+            for p in paths:
+                if not len(p):
+                    continue
+                new_path = path
+                if not path.endswith('/'):
+                    new_path += '/'
+                new_path += p
+                group = self.get_node(new_path)
+                if group is None:
+                    group = self.handle.createGroup(path, p)
+                path  = new_path
 
         kind = _TYPE_MAP[type(value)]
         if table or (append and _is_table_type(group)):
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index 0ecb71b8a..bc949a859 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -113,6 +113,8 @@ class TestHDFStore(unittest.TestCase):
         self.store['a'] = ts
         self.store['b'] = df[:10]
         self.store['foo/bar/bah'] = df[:10]
+        self.store['foo'] = df[:10]
+        self.store['/foo'] = df[:10]
         self.store.put('c', df[:10], table=True)
 
         # not OK, not a table
@@ -170,6 +172,19 @@ class TestHDFStore(unittest.TestCase):
             store.append('df2', df[10:])
             tm.assert_frame_equal(store['df2'], df)
 
+            store.append('/df3', df[:10])
+            store.append('/df3', df[10:])
+            tm.assert_frame_equal(store['df3'], df)
+
+            # this is allowed by almost always don't want to do it
+            import warnings
+            import tables
+            warnings.filterwarnings('ignore', category=tables.NaturalNameWarning)
+            store.append('/df3 foo', df[:10])
+            store.append('/df3 foo', df[10:])
+            tm.assert_frame_equal(store['df3 foo'], df)
+            warnings.filterwarnings('always', category=tables.NaturalNameWarning)
+
             wp = tm.makePanel()
             store.append('wp1', wp.ix[:,:10,:])
             store.append('wp1', wp.ix[:,10:,:])
@@ -319,7 +334,6 @@ class TestHDFStore(unittest.TestCase):
         self.store.remove('b')
         self.assertEquals(len(self.store), 1)
 
-
         # __delitem__
         self.store['a'] = ts
         self.store['b'] = df
@@ -342,6 +356,17 @@ class TestHDFStore(unittest.TestCase):
         expected = wp.reindex(minor_axis = ['B','C'])
         tm.assert_panel_equal(rs,expected)
 
+        # empty where
+        self.store.remove('wp')
+        self.store.put('wp', wp, table=True)
+        self.store.remove('wp', [])
+
+        # non - empty where
+        self.store.remove('wp')
+        self.store.put('wp', wp, table=True)
+        self.assertRaises(Exception, self.store.remove,
+                          'wp', ['foo'])
+
         # selectin non-table with a where
         self.store.put('wp2', wp, table=False)
         self.assertRaises(Exception, self.store.remove,
