commit 2e537fd87fe06b22f814107e6440a0eaee01ddf8
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Jun 2 17:28:25 2012 -0400

    ENH: enable df[bool_df] += value for compatible shapes, close #1366

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index d556b012c..2b3c541ba 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1653,6 +1653,12 @@ class DataFrame(NDFrame):
             return self._getitem_array(key)
         elif isinstance(self.columns, MultiIndex):
             return self._getitem_multilevel(key)
+        elif isinstance(key, DataFrame):
+            values = key.values
+            if values.dtype == bool:
+                return self.values[values]
+            else:
+                raise ValueError('Cannot index using non-boolean DataFrame')
         else:
             return self._get_item_cache(key)
 
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 098a199d1..edd5d79d0 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -470,16 +470,10 @@ class NDFrame(PandasObject):
         try:
             return cache[item]
         except Exception:
-            try:
-                values = self._data.get(item)
-                res = self._box_item_values(item, values)
-                cache[item] = res
-                return res
-            except Exception: # pragma: no cover
-                from pandas.core.frame import DataFrame
-                if isinstance(item, DataFrame):
-                    raise ValueError('Cannot index using (boolean) dataframe')
-                raise
+            values = self._data.get(item)
+            res = self._box_item_values(item, values)
+            cache[item] = res
+            return res
 
     def _box_item_values(self, key, values):
         raise NotImplementedError
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index d0d716d65..6c190fbe1 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -151,6 +151,16 @@ class CheckIndexing(object):
         _checkit([True, True, True])
         _checkit([False, False, False])
 
+    def test_getitem_boolean_iadd(self):
+        arr = randn(5, 5)
+
+        df = DataFrame(arr.copy())
+        df[df < 0] += 1
+
+        arr[arr < 0] += 1
+
+        assert_almost_equal(df.values, arr)
+
     def test_getattr(self):
         tm.assert_series_equal(self.frame.A, self.frame['A'])
         self.assertRaises(AttributeError, getattr, self.frame,
