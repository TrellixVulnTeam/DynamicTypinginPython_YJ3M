commit 0b201dcd4ab131087b57ce6e6de43f5cb118f97e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Nov 11 13:12:20 2011 -0500

    ENH: add DataFrame.from_dict with orient option

diff --git a/RELEASE.rst b/RELEASE.rst
index 1f135f7fc..3ac6044d2 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -49,6 +49,7 @@ pandas 0.5.1
   - Add matrix multiplication function `dot` to DataFrame (GH #65)
   - Add `orient` option to `Panel.from_dict` to ease creation of mixed-type
     Panels (GH #359)
+  - Add `DataFrame.from_dict` with similar `orient` option
 
 **Improvements to existing features**
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 390e3ef22..bb9b296f3 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -397,6 +397,44 @@ class DataFrame(NDFrame):
     #----------------------------------------------------------------------
     # IO methods (to / from other formats)
 
+    @classmethod
+    def from_dict(cls, data, orient='columns', dtype=None):
+        """
+        Construct Panel from dict of DataFrame objects
+
+        Parameters
+        ----------
+        data : dict
+            {field : DataFrame}
+        intersect : boolean
+            Intersect indexes of input DataFrames
+        orient : {'columns', 'index'}, default 'items'
+            The "orientation" of the data. If the keys of the passed dict
+            should be the items of the result panel, pass 'items'
+            (default). Otherwise if the columns of the values of the passed
+            DataFrame objects should be the items (which in the case of
+            mixed-dtype data you should do), instead pass 'minor'
+
+
+        Returns
+        -------
+        Panel
+        """
+        from collections import defaultdict
+
+        orient = orient.lower()
+        if orient == 'index':
+            # TODO: this should be seriously cythonized
+            new_data = defaultdict(dict)
+            for index, s in data.iteritems():
+                for col, v in s.iteritems():
+                    new_data[col][index] = v
+            data = new_data
+        elif orient != 'columns':  # pragma: no cover
+            raise ValueError('only recognize index or columns for orient')
+
+        return DataFrame(data, dtype=dtype)
+
     def to_dict(self):
         """
         Convert DataFrame to nested dictionary
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 42784c016..51c81dd1c 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -269,7 +269,7 @@ class Panel(NDFrame):
         return len(self.items), len(self.major_axis), len(self.minor_axis)
 
     @classmethod
-    def from_dict(cls, data, intersect=False, orient='items', dtype=float):
+    def from_dict(cls, data, intersect=False, orient='items', dtype=None):
         """
         Construct Panel from dict of DataFrame objects
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 761fb9a99..c61013be3 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1124,6 +1124,12 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = DataFrame({'A': Series([(1, 2), (3, 4)])})
         assert_frame_equal(result, expected)
 
+    def test_constructor_orient(self):
+        data_dict = self.mixed_frame.T._series
+        recons = DataFrame.from_dict(data_dict, orient='index')
+        expected = self.mixed_frame.sort_index()
+        assert_frame_equal(recons, expected)
+
     def test_astype(self):
         casted = self.frame.astype(int)
         expected = DataFrame(self.frame.values.astype(int),
