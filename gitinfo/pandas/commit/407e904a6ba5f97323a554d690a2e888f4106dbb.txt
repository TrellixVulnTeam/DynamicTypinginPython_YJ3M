commit 407e904a6ba5f97323a554d690a2e888f4106dbb
Author: jreback <jeff@reback.net>
Date:   Thu Sep 5 21:05:01 2013 -0400

    CLN: refactored out take from core/frame.py to use core/generic.py version

diff --git a/doc/source/release.rst b/doc/source/release.rst
index eae38a754..9a34cdbdf 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -151,6 +151,7 @@ pandas 0.13
   - ``Series.isin()`` and ``DataFrame.isin()``  now raise a ``TypeError`` when
     passed a string (:issue:`4763`). Pass a ``list`` of one element (containing
     the string) instead.
+  - Remove undocumented/unused ``kind`` keyword argument from ``read_excel``, and ``ExcelFile``. (:issue:`4713`, :issue:`4712`)
 
 **Internal Refactoring**
 
@@ -172,7 +173,7 @@ See :ref:`Internal Refactoring<whatsnew_0130.refactoring>`
     - ``_indexed_same,reindex_like,align,where,mask``
     - ``fillna,replace`` (``Series`` replace is now consistent with ``DataFrame``)
     - ``filter`` (also added axis argument to selectively filter on a different axis)
-    - ``reindex,reindex_axis`` (which was the biggest change to make generic)
+    - ``reindex,reindex_axis,take``
     - ``truncate`` (moved to become part of ``NDFrame``)
 
 - These are API changes which make ``Panel`` more consistent with ``DataFrame``
@@ -224,7 +225,6 @@ See :ref:`Internal Refactoring<whatsnew_0130.refactoring>`
 - Refactor of ``_get_numeric_data/_get_bool_data`` to core/generic.py, allowing Series/Panel functionaility
 - Refactor of Series arithmetic with time-like objects (datetime/timedelta/time
   etc.) into a separate, cleaned up wrapper class. (:issue:`4613`)
-- Remove undocumented/unused ``kind`` keyword argument from ``read_excel``, and ``ExcelFile``. (:issue:`4713`, :issue:`4712`)
 
 **Experimental Features**
 
diff --git a/doc/source/v0.13.0.txt b/doc/source/v0.13.0.txt
index d1decc164..6b8b7e73f 100644
--- a/doc/source/v0.13.0.txt
+++ b/doc/source/v0.13.0.txt
@@ -297,7 +297,7 @@ and behaviors. Series formerly subclassed directly from ``ndarray``. (:issue:`40
     - ``_indexed_same,reindex_like,align,where,mask``
     - ``fillna,replace`` (``Series`` replace is now consistent with ``DataFrame``)
     - ``filter`` (also added axis argument to selectively filter on a different axis)
-    - ``reindex,reindex_axis`` (which was the biggest change to make generic)
+    - ``reindex,reindex_axis,take``
     - ``truncate`` (moved to become part of ``NDFrame``)
 
 - These are API changes which make ``Panel`` more consistent with ``DataFrame``
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 7f79b4b6b..a3eb3ea54 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2513,48 +2513,6 @@ class DataFrame(NDFrame):
 
     delevel = deprecate('delevel', reset_index)
 
-    def take(self, indices, axis=0, convert=True):
-        """
-        Analogous to ndarray.take, return DataFrame corresponding to requested
-        indices along an axis
-
-        Parameters
-        ----------
-        indices : list / array of ints
-        axis : {0, 1}
-        convert : convert indices for negative values, check bounds, default True
-                  mainly useful for an user routine calling
-
-        Returns
-        -------
-        taken : DataFrame
-        """
-
-        # check/convert indicies here
-        if convert:
-            axis = self._get_axis_number(axis)
-            indices = _maybe_convert_indices(
-                indices, len(self._get_axis(axis)))
-
-        if self._is_mixed_type:
-            if axis == 0:
-                new_data = self._data.take(indices, axis=1, verify=False)
-                return DataFrame(new_data)
-            else:
-                return self.reindex(columns=indices, takeable=True)
-        else:
-            new_values = com.take_nd(self.values,
-                                     com._ensure_int64(indices),
-                                     axis=axis)
-            if axis == 0:
-                new_columns = self.columns
-                new_index = self.index.take(indices)
-            else:
-                new_columns = self.columns.take(indices)
-                new_index = self.index
-            return self._constructor(new_values, index=new_index,
-                                     columns=new_columns)
-
     #----------------------------------------------------------------------
     # Reindex-based selection methods
 
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 3bebb2bc3..7f5b9b7f7 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -862,12 +862,13 @@ class NDFrame(PandasObject):
             indices = _maybe_convert_indices(
                 indices, len(self._get_axis(axis)))
 
-        if axis == 0:
+        baxis = self._get_block_manager_axis(axis)
+        if baxis == 0:
             labels = self._get_axis(axis)
             new_items = labels.take(indices)
-            new_data = self._data.reindex_axis(new_items, axis=0)
+            new_data = self._data.reindex_axis(new_items, indexer=indices, axis=0)
         else:
-            new_data = self._data.take(indices, axis=axis, verify=False)
+            new_data = self._data.take(indices, axis=baxis)
         return self._constructor(new_data)
 
     def select(self, crit, axis=0):
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 6a5757dd7..91fdc712f 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -1516,7 +1516,20 @@ class SparseBlock(Block):
         if indexer is None:
             indexer = np.arange(len(self.items))
 
-        new_values = com.take_1d(self.values.values, indexer)
+        # single block
+        if self.ndim == 1:
+
+            new_items = new_ref_items
+            new_values = com.take_1d(self.values.values, indexer)
+
+        else:
+
+            # if we don't overlap at all, then don't include this block
+            new_items = self.items & new_ref_items
+            if not len(new_items):
+                return None
+
+            new_values = self.values.values
 
         # fill if needed
         if method is not None or limit is not None:
@@ -1524,7 +1537,7 @@ class SparseBlock(Block):
                 fill_value = self.fill_value
             new_values = com.interpolate_2d(new_values, method=method, limit=limit, fill_value=fill_value)
 
-        return self.make_block(new_values, items=new_ref_items, ref_items=new_ref_items, copy=copy)
+        return self.make_block(new_values, items=new_items, ref_items=new_ref_items, copy=copy)
 
     def sparse_reindex(self, new_index):
         """ sparse reindex and return a new block
@@ -2794,15 +2807,34 @@ class BlockManager(PandasObject):
         if indexer is None:
             for blk in self.blocks:
                 if copy:
-                    new_blocks.append(blk.reindex_items_from(new_items))
+                    blk = blk.reindex_items_from(new_items)
                 else:
                     blk.ref_items = new_items
+                if blk is not None:
                     new_blocks.append(blk)
         else:
-            for block in self.blocks:
-                newb = block.reindex_items_from(new_items, copy=copy)
-                if len(newb.items) > 0:
-                    new_blocks.append(newb)
+
+            # unique
+            if self.axes[0].is_unique:
+                for block in self.blocks:
+
+                    newb = block.reindex_items_from(new_items, copy=copy)
+                    if newb is not None and len(newb.items) > 0:
+                        new_blocks.append(newb)
+
+            # non-unique
+            else:
+                rl = self._set_ref_locs()
+                for i, idx in enumerate(indexer):
+                    blk, lidx = rl[idx]
+                    item = new_items.take([i])
+                    blk = make_block(_block_shape(blk.iget(lidx)),
+                                     item,
+                                     new_items,
+                                     ndim=self.ndim,
+                                     fastpath=True,
+                                     placement = [i])
+                    new_blocks.append(blk)
 
             # add a na block if we are missing items
             mask = indexer == -1
diff --git a/pandas/sparse/tests/test_sparse.py b/pandas/sparse/tests/test_sparse.py
index 91f2fe319..e0a9d2b93 100644
--- a/pandas/sparse/tests/test_sparse.py
+++ b/pandas/sparse/tests/test_sparse.py
@@ -384,7 +384,9 @@ class TestSparseSeries(TestCase,
         idx = self.bseries.index
         res = self.bseries[::2]
         tm.assert_isinstance(res, SparseSeries)
-        assert_sp_series_equal(res, self.bseries.reindex(idx[::2]))
+
+        expected = self.bseries.reindex(idx[::2])
+        assert_sp_series_equal(res, expected)
 
         res = self.bseries[:5]
         tm.assert_isinstance(res, SparseSeries)
