commit cde942451e6498ff5ec6d056c22ca5613fcaef32
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Apr 17 15:34:54 2011 -0400

    sparse progress

diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
new file mode 100644
index 000000000..8b26afca7
--- /dev/null
+++ b/pandas/core/sparse.py
@@ -0,0 +1,12 @@
+import numpy as np
+
+import operator
+
+from pandas.core.series import Series
+from pandas.core.frame import DataFrame
+
+class SparseSeries(Series):
+    pass
+
+class SparseDataFrame(DataFrame):
+    pass
diff --git a/pandas/lib/src/sparse.pyx b/pandas/lib/src/sparse.pyx
index dce19850c..dc8fe992c 100644
--- a/pandas/lib/src/sparse.pyx
+++ b/pandas/lib/src/sparse.pyx
@@ -280,7 +280,7 @@ cdef class SparseVector:
     cdef:
         float64_t* vbuf
 
-    def __init__(self, ndarray values, SparseIndex index, fill_value=None):
+    def __init__(self, ndarray values, SparseIndex index, fill_value=np.NaN):
         self.values = np.ascontiguousarray(values, dtype=np.float64)
         self.index = index
         self.vbuf = <float64_t*> self.values.data
@@ -295,6 +295,15 @@ cdef class SparseVector:
         output += '%s\n' % repr(self.index)
         return output
 
+    def to_ndarray(self):
+        output = np.empty(self.index.length, dtype=np.float64)
+        dense_index = self.index.to_dense()
+
+        output.fill(self.fill_value)
+        output.put(dense_index.indices, self.values)
+
+        return output
+
     cpdef reindex(self):
         pass
 
diff --git a/pandas/lib/test_sparse.py b/pandas/lib/test_sparse.py
index 3b014eacb..5019ecf18 100644
--- a/pandas/lib/test_sparse.py
+++ b/pandas/lib/test_sparse.py
@@ -138,11 +138,10 @@ class TestSparseVector(TestCase):
 
     def _arith_op_tests(self, op):
 
-        def _check_case_dict(case, expected):
-            _check_case(case['xloc'], case['xlen'], case['yloc'], case['ylen'],
-                        expected)
+        def _check_case_dict(case):
+            _check_case(case['xloc'], case['xlen'], case['yloc'], case['ylen'])
 
-        def _check_case(xloc, xlen, yloc, ylen, expected):
+        def _check_case(xloc, xlen, yloc, ylen):
             xindex = BlockIndex(TEST_LENGTH, xloc, xlen)
             yindex = BlockIndex(TEST_LENGTH, yloc, ylen)
 
@@ -167,7 +166,15 @@ class TestSparseVector(TestCase):
             series_result = op(xseries, yseries).valid()
             assert_equal(result_block.values, series_result.values)
 
-        _check_case_dict(plain_case, [])
+        _check_case_dict(plain_case)
+        _check_case_dict(delete_blocks)
+        _check_case_dict(split_blocks)
+        _check_case_dict(skip_block)
+        _check_case_dict(no_intersect)
+
+        # one or both is empty
+        _check_case([0], [5], [], [])
+        _check_case([], [], [], [])
 
 # too cute? oh but how I abhor code duplication
 
