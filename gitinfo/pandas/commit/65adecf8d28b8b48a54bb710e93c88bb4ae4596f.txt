commit 65adecf8d28b8b48a54bb710e93c88bb4ae4596f
Author: Chang She <chang@lambdafoundry.com>
Date:   Sun Mar 31 09:52:08 2013 -0700

    BUG: week of year incorrect at year boundaries #2768

diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index b9f653bd5..3d50bbc4d 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -205,7 +205,7 @@ class TestTimeSeriesDuplicates(unittest.TestCase):
 
         # GH 3070, make sure semantics work on Series/Frame
         expected = ts['2001']
-        
+
         df = DataFrame(dict(A = ts))
         result = df['2001']['A']
         assert_series_equal(expected,result)
@@ -1232,7 +1232,6 @@ class TestTimeSeries(unittest.TestCase):
 
     def test_timestamp_fields(self):
         # extra fields from DatetimeIndex like quarter and week
-        from pandas.lib import Timestamp
         idx = tm.makeDateIndex(100)
 
         fields = ['dayofweek', 'dayofyear', 'week', 'weekofyear', 'quarter']
@@ -1244,6 +1243,33 @@ class TestTimeSeries(unittest.TestCase):
         self.assertEqual(idx.freq, Timestamp(idx[-1], idx.freq).freq)
         self.assertEqual(idx.freqstr, Timestamp(idx[-1], idx.freq).freqstr)
 
+    def test_woy_boundary(self):
+        # make sure weeks at year boundaries are correct
+        d = datetime(2013,12,31)
+        result = Timestamp(d).week
+        expected = 1 # ISO standard
+        self.assertEqual(result, expected)
+
+        d = datetime(2008,12,28)
+        result = Timestamp(d).week
+        expected = 52 # ISO standard
+        self.assertEqual(result, expected)
+
+        d = datetime(2009,12,31)
+        result = Timestamp(d).week
+        expected = 53 # ISO standard
+        self.assertEqual(result, expected)
+
+        d = datetime(2010,1,1)
+        result = Timestamp(d).week
+        expected = 53 # ISO standard
+        self.assertEqual(result, expected)
+
+        d = datetime(2010,1,3)
+        result = Timestamp(d).week
+        expected = 53 # ISO standard
+        self.assertEqual(result, expected)
+
     def test_timestamp_date_out_of_range(self):
         self.assertRaises(ValueError, Timestamp, '1676-01-01')
         self.assertRaises(ValueError, Timestamp, '2263-01-01')
diff --git a/pandas/tslib.pyx b/pandas/tslib.pyx
index b2e007dc2..9730f5696 100644
--- a/pandas/tslib.pyx
+++ b/pandas/tslib.pyx
@@ -1668,6 +1668,7 @@ def get_date_field(ndarray[int64_t] dtindex, object field):
         ndarray[int32_t, ndim=2] _month_offset
         int isleap
         pandas_datetimestruct dts
+        int mo_off, doy, dow, woy
 
     _month_offset = np.array(
         [[ 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365 ],
@@ -1761,9 +1762,28 @@ def get_date_field(ndarray[int64_t] dtindex, object field):
             if dtindex[i] == NPY_NAT: out[i] = -1; continue
 
             pandas_datetime_to_datetimestruct(dtindex[i], PANDAS_FR_ns, &dts)
+            ts = convert_to_tsobject(dtindex[i], None)
             isleap = is_leapyear(dts.year)
-            out[i] = _month_offset[isleap, dts.month - 1] + dts.day
-            out[i] = ((out[i] - 1) / 7) + 1
+            mo_off = _month_offset[isleap, dts.month - 1]
+            doy = mo_off + dts.day
+            dow = ts_dayofweek(ts)
+
+            #estimate
+            woy = (doy - 1) - dow + 3
+            if woy >= 0:
+                woy = woy / 7 + 1
+
+            # verify
+            if woy < 0:
+                if (woy > -2) or (woy == -2 and isleap):
+                    woy = 53
+                else:
+                    woy = 52
+            elif woy == 53:
+                if 31 - dts.day + dow < 3:
+                    woy = 1
+
+            out[i] = woy
         return out
 
     elif field == 'q':
