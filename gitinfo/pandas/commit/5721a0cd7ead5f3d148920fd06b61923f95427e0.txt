commit 5721a0cd7ead5f3d148920fd06b61923f95427e0
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Apr 10 13:28:45 2012 -0400

    ENH: attach name to Series on axis=1 in DataFrame.apply, #983

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 3c02f9b5e..72bd453cf 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -3095,7 +3095,7 @@ class DataFrame(NDFrame):
         elif axis == 1:
             res_index = self.index
             res_columns = self.columns
-            series_gen = ((i, Series(v, self.columns))
+            series_gen = ((i, Series(v, self.columns, name=i))
                           for i, v in izip(self.index, self.values))
 
         results = {}
@@ -3125,7 +3125,8 @@ class DataFrame(NDFrame):
             else:
                 index = None
 
-            result = self._constructor(data=results, index=index)
+            result = self._constructor(data=results, index=index,
+                                       columns=res_index)
 
             if axis == 1:
                 result = result.T
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 27fd004a0..3cc6867b0 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3904,6 +3904,22 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = Series(self.frame.index, index=self.frame.index)
         assert_series_equal(result, expected)
 
+        # non-reductions
+        result = self.frame.apply(lambda x: np.repeat(x.name, len(x)))
+        expected = DataFrame(np.tile(self.frame.columns,
+                                     (len(self.frame.index), 1)),
+                             index=self.frame.index,
+                             columns=self.frame.columns)
+        assert_frame_equal(result, expected)
+
+        result = self.frame.apply(lambda x: np.repeat(x.name, len(x)),
+                                  axis=1)
+        expected = DataFrame(np.tile(self.frame.index,
+                                     (len(self.frame.columns), 1)).T,
+                             index=self.frame.index,
+                             columns=self.frame.columns)
+        assert_frame_equal(result, expected)
+
     def test_applymap(self):
         applied = self.frame.applymap(lambda x: x * 2)
         assert_frame_equal(applied, self.frame * 2)
