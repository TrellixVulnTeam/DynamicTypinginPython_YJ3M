commit bfe5a7f0c1d7250be68f1d2bceca2138d561014d
Author: cyrusmaher <cyrusmaher@users.noreply.github.com>
Date:   Wed Jun 17 23:59:06 2015 -0700

    API: allow a filter regex to work on numeric labels, #10506

diff --git a/doc/source/whatsnew/v0.17.0.txt b/doc/source/whatsnew/v0.17.0.txt
index da16734dc..71341a02b 100644
--- a/doc/source/whatsnew/v0.17.0.txt
+++ b/doc/source/whatsnew/v0.17.0.txt
@@ -35,6 +35,8 @@ Other enhancements
 
 - ``.as_blocks`` will now take a ``copy`` optional argument to return a copy of the data, default is to copy (no change in behavior from prior versions), (:issue:`9607`)
 
+- ``regex`` argument to ``DataFrame.filter`` now handles numeric column names instead of raising ``ValueError`` (:issue:`10384`).
+
 .. _whatsnew_0170.api:
 
 Backwards incompatible API changes
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index aba38ed4f..bdddc03ed 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -1928,7 +1928,7 @@ class NDFrame(PandasObject):
             return self.select(matchf, axis=axis_name)
         elif regex:
             matcher = re.compile(regex)
-            return self.select(lambda x: matcher.search(x) is not None,
+            return self.select(lambda x: matcher.search(str(x)) is not None,
                                axis=axis_name)
         else:
             raise TypeError('Must pass either `items`, `like`, or `regex`')
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 8c4efcc35..ae6102751 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -10781,7 +10781,7 @@ class TestDataFrame(tm.TestCase, CheckIndexing,
         idx = self.frame.index[0:4]
         filtered = self.frame.filter(idx, axis='index')
         expected = self.frame.reindex(index=idx)
-        assert_frame_equal(filtered,expected)
+        assert_frame_equal(filtered, expected)
 
         # like
         fcopy = self.frame.copy()
@@ -10796,6 +10796,17 @@ class TestDataFrame(tm.TestCase, CheckIndexing,
         filtered = df.filter(like='_')
         self.assertEqual(len(filtered.columns), 2)
 
+        # regex with ints in column names
+        # from PR #10384
+        df = DataFrame(0., index=[0, 1, 2], columns=['A1', 1, 'B', 2, 'C'])
+        expected = DataFrame(0., index=[0, 1, 2], columns=[1, 2])
+        filtered = df.filter(regex='^[0-9]+$')
+        self.assert_frame_equal(filtered, expected)
+
+        expected = DataFrame(0., index=[0, 1, 2], columns=[0, '0', 1, '1'])
+        filtered = expected.filter(regex='^[0-9]+$')  # shouldn't remove anything
+        self.assert_frame_equal(filtered, expected)
+
         # pass in None
         with assertRaisesRegexp(TypeError, 'Must pass'):
             self.frame.filter(items=None)
