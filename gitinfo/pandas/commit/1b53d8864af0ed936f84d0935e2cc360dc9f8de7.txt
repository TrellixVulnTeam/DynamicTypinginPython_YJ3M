commit 1b53d8864af0ed936f84d0935e2cc360dc9f8de7
Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
Date:   Fri Mar 31 08:40:58 2017 +0200

    Only call validation functions when args/kwargs are passed (#15850)

diff --git a/pandas/compat/numpy/function.py b/pandas/compat/numpy/function.py
index 4053994ef..f448a9aad 100644
--- a/pandas/compat/numpy/function.py
+++ b/pandas/compat/numpy/function.py
@@ -37,23 +37,24 @@ class CompatValidator(object):
 
     def __call__(self, args, kwargs, fname=None,
                  max_fname_arg_count=None, method=None):
-        fname = self.fname if fname is None else fname
-        max_fname_arg_count = (self.max_fname_arg_count if
-                               max_fname_arg_count is None
-                               else max_fname_arg_count)
-        method = self.method if method is None else method
-
-        if method == 'args':
-            validate_args(fname, args, max_fname_arg_count, self.defaults)
-        elif method == 'kwargs':
-            validate_kwargs(fname, kwargs, self.defaults)
-        elif method == 'both':
-            validate_args_and_kwargs(fname, args, kwargs,
-                                     max_fname_arg_count,
-                                     self.defaults)
-        else:
-            raise ValueError("invalid validation method "
-                             "'{method}'".format(method=method))
+        if args or kwargs:
+            fname = self.fname if fname is None else fname
+            max_fname_arg_count = (self.max_fname_arg_count if
+                                   max_fname_arg_count is None
+                                   else max_fname_arg_count)
+            method = self.method if method is None else method
+
+            if method == 'args':
+                validate_args(fname, args, max_fname_arg_count, self.defaults)
+            elif method == 'kwargs':
+                validate_kwargs(fname, kwargs, self.defaults)
+            elif method == 'both':
+                validate_args_and_kwargs(fname, args, kwargs,
+                                         max_fname_arg_count,
+                                         self.defaults)
+            else:
+                raise ValueError("invalid validation method "
+                                 "'{method}'".format(method=method))
 
 
 ARGMINMAX_DEFAULTS = dict(out=None)
