commit 80ac77360dfc580a5c2fe3e98d532023f29216af
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Apr 7 23:50:52 2013 -0700

    API: raise TypeError out of GroupBy.agg

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index cb0a03d30..1954321e5 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -438,7 +438,7 @@ class GroupBy(object):
                 dtype = obj.dtype
 
             if _is_numeric_dtype(dtype):
-                
+
                 # need to respect a non-number here (e.g. Decimal)
                 if len(result) and issubclass(type(result[0]),(np.number,float,int)):
                     result = _possibly_downcast_to_dtype(result, dtype)
@@ -494,7 +494,7 @@ class GroupBy(object):
                 values = result
                 if _is_numeric_dtype(values.dtype):
                     values = com.ensure_float(values)
-                
+
                 output[name] = self._try_cast(values[mask],result)
 
         return self._wrap_aggregated_output(output)
@@ -794,7 +794,7 @@ class Grouper(object):
 
                 # need to curry our sub-function
                 func = wrapper
-                
+
         else:
             func = get_func(ftype)
 
@@ -1778,7 +1778,7 @@ class NDFrameGroupBy(GroupBy):
                 colg = SeriesGroupBy(obj[item], selection=item,
                                      grouper=self.grouper)
                 result[item] = colg.aggregate(func, *args, **kwargs)
-            except (ValueError, TypeError):
+            except ValueError:
                 cannot_agg.append(item)
                 continue
 
@@ -1917,7 +1917,7 @@ class NDFrameGroupBy(GroupBy):
                     # if we make it here, test if we can use the fast path
                     try:
                         res_fast = fast_path(group)
-                    
+
                         # compare that we get the same results
                         if res.shape == res_fast.shape:
                             res_r = res.values.ravel()
@@ -1925,7 +1925,7 @@ class NDFrameGroupBy(GroupBy):
                             mask = notnull(res_r)
                             if (res_r[mask] == res_fast_r[mask]).all():
                                 path = fast_path
-                
+
                     except:
                         pass
                 except TypeError:
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 7aad2e0b7..3ca0c2d08 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -121,7 +121,7 @@ class TestGroupBy(unittest.TestCase):
             agged = grouped.aggregate([np.mean, np.std])
             agged = grouped.aggregate({'one': np.mean,
                                        'two': np.std})
-            
+
             group_constants = {
                 0: 10,
                 1: 20,
@@ -425,10 +425,11 @@ class TestGroupBy(unittest.TestCase):
         df['E'] = ['a'] * len(self.df)
         grouped = self.df.groupby('A')
 
-        def aggfun(ser):
-            return len(ser + 'a')
-        result = grouped.agg(aggfun)
-        self.assertEqual(len(result.columns), 1)
+        # API change in 0.11
+        # def aggfun(ser):
+        #     return len(ser + 'a')
+        # result = grouped.agg(aggfun)
+        # self.assertEqual(len(result.columns), 1)
 
         aggfun = lambda ser: ser.size
         result = grouped.agg(aggfun)
@@ -444,6 +445,19 @@ class TestGroupBy(unittest.TestCase):
         self.assert_(isinstance(result, DataFrame))
         self.assertEqual(len(result), 0)
 
+    def test_agg_item_by_item_raise_typeerror(self):
+        from numpy.random import randint
+
+        df = DataFrame(randint(10, size=(20, 10)))
+
+        def raiseException(df):
+          print '----------------------------------------'
+          print df.to_string()
+          raise TypeError
+
+        self.assertRaises(TypeError, df.groupby(0).agg,
+                          raiseException)
+
     def test_basic_regression(self):
         # regression
         T = [1.0 * x for x in range(1, 10) * 10][:1095]
@@ -614,7 +628,7 @@ class TestGroupBy(unittest.TestCase):
         df = DataFrame({'a':[1,2,2,2],
                         'b':range(4),
                         'c':range(5,9)})
-        
+
         df2 = DataFrame({'a':[3,2,2,2],
                          'b':range(4),
                          'c':range(5,9)})
@@ -624,7 +638,7 @@ class TestGroupBy(unittest.TestCase):
         result1 = df.groupby('a').apply(f1)
         result2 = df2.groupby('a').apply(f1)
         assert_frame_equal(result1, result2)
-        
+
         # should fail (not the same number of levels)
         self.assertRaises(AssertionError, df.groupby('a').apply, f2)
         self.assertRaises(AssertionError, df2.groupby('a').apply, f2)
