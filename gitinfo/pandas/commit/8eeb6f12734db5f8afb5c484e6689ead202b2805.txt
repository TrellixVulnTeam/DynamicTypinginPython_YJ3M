commit 8eeb6f12734db5f8afb5c484e6689ead202b2805
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jun 5 17:13:46 2012 -0400

    BUG: cast Series to array in quantile to avoid segfault in Factor from qcut

diff --git a/pandas/core/algorithms.py b/pandas/core/algorithms.py
index 10ff7729a..b16b035aa 100644
--- a/pandas/core/algorithms.py
+++ b/pandas/core/algorithms.py
@@ -227,7 +227,7 @@ def quantile(x, q, interpolation_method='fraction'):
     49.5
 
     """
-    values = np.sort(x)
+    values = np.sort(np.asarray(x))
 
     def _get_score(at):
         idx = at * (len(values) - 1)
diff --git a/pandas/src/generate_code.py b/pandas/src/generate_code.py
index 9439bb377..b82375368 100644
--- a/pandas/src/generate_code.py
+++ b/pandas/src/generate_code.py
@@ -59,6 +59,7 @@ cpdef ensure_platform_int(object arr):
 
 """
 
+
 take_1d_template = """@cython.wraparound(False)
 @cython.boundscheck(False)
 def take_1d_%(name)s(ndarray[%(c_type)s] values,
diff --git a/pandas/tests/test_algos.py b/pandas/tests/test_algos.py
index 5e8de5326..a159ddcce 100644
--- a/pandas/tests/test_algos.py
+++ b/pandas/tests/test_algos.py
@@ -2,6 +2,7 @@ import unittest
 
 import numpy as np
 
+from pandas.core.api import Series
 
 import pandas.core.algorithms as algos
 import pandas.util.testing as tm
@@ -41,6 +42,13 @@ class TestUnique(unittest.TestCase):
         self.assert_(isinstance(result, np.ndarray))
 
 
+def test_quantile():
+    s = Series(np.random.randn(100))
+
+    result = algos.quantile(s, [0, .25, .5, .75, 1.])
+    expected = algos.quantile(s.values, [0, .25, .5, .75, 1.])
+    tm.assert_almost_equal(result, expected)
+
 if __name__ == '__main__':
     import nose
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
diff --git a/pandas/tools/tile.py b/pandas/tools/tile.py
index 01a2478ed..e750e97ea 100644
--- a/pandas/tools/tile.py
+++ b/pandas/tools/tile.py
@@ -138,6 +138,8 @@ def qcut(x, q=4, labels=None, retbins=False, precision=3):
 
 def _bins_to_cuts(x, bins, right=True, labels=None, retbins=False,
                   precision=3):
+    x = np.asarray(x)
+
     side = 'left' if right else 'right'
     ids = bins.searchsorted(x, side=side)
 
@@ -153,11 +155,11 @@ def _bins_to_cuts(x, bins, right=True, labels=None, retbins=False,
 
         fmt = lambda v: _format_label(v, precision=precision)
         if right:
-            levels = ['(%s, %s]' % (fmt(x), fmt(y))
-                       for x, y in zip(labels, labels[1:])]
+            levels = ['(%s, %s]' % (fmt(a), fmt(b))
+                       for a, b in zip(labels, labels[1:])]
         else:
-            levels = ['[%s, %s)' % (fmt(x), fmt(y))
-                       for x, y in zip(labels, labels[1:])]
+            levels = ['[%s, %s)' % (fmt(a), fmt(b))
+                       for a, b in zip(labels, labels[1:])]
 
         levels = np.asarray(levels, dtype=object)
 
