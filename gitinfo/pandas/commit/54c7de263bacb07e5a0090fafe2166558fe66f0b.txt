commit 54c7de263bacb07e5a0090fafe2166558fe66f0b
Author: jreback <jeff@reback.net>
Date:   Thu Jul 4 09:24:07 2013 -0400

    BUG/TST: test fixes for windows compat

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index cc25d7e06..401a77469 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2206,7 +2206,10 @@ class DataFrame(NDFrame):
                                          'length of index')
 
                 if not isinstance(value, np.ndarray):
-                    value = com._asarray_tuplesafe(value)
+                    if isinstance(value, list) and len(value) > 0:
+                        value = com._possibly_convert_platform(value)
+                    else:
+                        value = com._asarray_tuplesafe(value)
                 elif isinstance(value, PeriodIndex):
                     value = value.asobject
                 elif value.ndim == 2:
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 3e45b69fb..915509bac 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -4891,14 +4891,17 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
                  s[-i] = NaT
                  s[i] = NaT
              return s
+
         # N=35000
         s1=make_dtnat_arr(chunksize+5)
         s2=make_dtnat_arr(chunksize+5,0)
+
         # s3=make_dtnat_arr(chunksize+5,0)
-        df=DataFrame(dict(a=s1,b=s2))
-        df.to_csv('/tmp/1.csv',chunksize=chunksize)
-        recons = DataFrame.from_csv('/tmp/1.csv').convert_objects('coerce')
-        assert_frame_equal(df, recons,check_names=False,check_less_precise=True)
+        with ensure_clean('1.csv') as path:
+            df=DataFrame(dict(a=s1,b=s2))
+            df.to_csv(path,chunksize=chunksize)
+            recons = DataFrame.from_csv(path).convert_objects('coerce')
+            assert_frame_equal(df, recons,check_names=False,check_less_precise=True)
 
         for ncols in [4]:
             base = int((chunksize// ncols or 1) or 1)
@@ -6864,7 +6867,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         df = DataFrame([['foo', 'bar', 'bah'], ['bar', 'foo', 'bah']])
         m = {'foo': 1, 'bar': 2, 'bah': 3}
         rep = df.replace(m)
-        expec = Series([np.int_, np.int_, np.int_])
+        expec = Series([ np.int64] * 3)
         res = rep.dtypes
         assert_series_equal(expec, res)
 
@@ -10079,7 +10082,6 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         result = df.rename(columns={})
         str(result)
-
         expected = DataFrame([[1,1.1],[2, 2.2]],columns=['a','b'])
         assert_frame_equal(result,expected)
         df.insert(0, 'c', [1.3, 2.3])
