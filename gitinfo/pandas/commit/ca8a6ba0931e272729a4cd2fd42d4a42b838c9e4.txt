commit ca8a6ba0931e272729a4cd2fd42d4a42b838c9e4
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Nov 13 18:22:42 2012 -0500

    BUG: make inplace semantics of DataFrame.where consistent. #2230

diff --git a/RELEASE.rst b/RELEASE.rst
index 7db939a06..7d6f2fbd3 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -57,6 +57,7 @@ pandas 0.9.1
   - Improve performance of Series/DataFrame.diff (re: #2087)
   - Support unary ~ (__invert__) in DataFrame (#2110)
   - Turn off pandas-style tick locators and formatters (#2205)
+  - DataFrame[DataFrame] uses DataFrame.where to compute masked frame (#2230)
 
 **Bug fixes**
 
@@ -100,6 +101,7 @@ pandas 0.9.1
   - Fix improper MultiIndex conversion issue when assigning
     e.g. DataFrame.index (#2200)
   - Fix conversion of mixed-type DataFrame to ndarray with dup columns (#2236)
+  - Fix duplicate columns issue (#2218, #2219)
 
 pandas 0.9.0
 ============
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
old mode 100755
new mode 100644
index c9184f148..25abc10ea
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1884,7 +1884,7 @@ class DataFrame(NDFrame):
         if self._is_mixed_type:
             raise ValueError('Cannot do boolean setting on mixed-type frame')
 
-        self.where(key, value, inplace=True)
+        self.where(-key, value, inplace=True)
 
     def _set_item_multiple(self, keys, value):
         if isinstance(value, DataFrame):
@@ -4872,7 +4872,6 @@ class DataFrame(NDFrame):
         Return a DataFrame with the same shape as self and whose corresponding
         entries are from self where cond is True and otherwise are from other.
 
-
         Parameters
         ----------
         cond: boolean DataFrame or array
@@ -4882,17 +4881,25 @@ class DataFrame(NDFrame):
         -------
         wh: DataFrame
         """
-        if not hasattr(cond,'shape'):
-            raise ValueError('where requires an ndarray like object for its condition')
+        if not hasattr(cond, 'shape'):
+            raise ValueError('where requires an ndarray like object for its '
+                             'condition')
 
         if isinstance(cond, np.ndarray):
             if cond.shape != self.shape:
                 raise ValueError('Array onditional must be same shape as self')
             cond = self._constructor(cond, index=self.index,
                                      columns=self.columns)
+
         if cond.shape != self.shape:
             cond = cond.reindex(self.index, columns=self.columns)
-            cond = cond.fillna(False)
+
+            if inplace:
+                cond = -(cond.fillna(True).astype(bool))
+            else:
+                cond = cond.fillna(False).astype(bool)
+        elif inplace:
+            cond = -cond
 
         if isinstance(other, DataFrame):
             _, other = self.align(other, join='left', fill_value=NA)
@@ -4903,7 +4910,7 @@ class DataFrame(NDFrame):
 
         rs = np.where(cond, self, other)
         return self._constructor(rs, self.index, self.columns)
-        
+
     def mask(self, cond):
         """
         Returns copy of self whose values are replaced with nan if the
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
old mode 100755
new mode 100644
index a0df3f918..5c6a8270c
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -143,7 +143,8 @@ class CheckIndexing(object):
 
         # test df[df >0] works
         bif = self.tsframe[self.tsframe > 0]
-        bifw = DataFrame(np.where(self.tsframe>0,self.tsframe,np.nan),index=self.tsframe.index,columns=self.tsframe.columns)
+        bifw = DataFrame(np.where(self.tsframe > 0, self.tsframe, np.nan),
+                         index=self.tsframe.index,columns=self.tsframe.columns)
         self.assert_(isinstance(bif,DataFrame))
         self.assert_(bif.shape == self.tsframe.shape)
         assert_frame_equal(bif,bifw)
@@ -285,8 +286,8 @@ class CheckIndexing(object):
         assert_almost_equal(df.values, values)
 
         # a df that needs alignment first
-        df[df[:-1]<0] = 2
-        np.putmask(values[:-1],values[:-1]<0,2)
+        df[df[:-1] < 0] = 2
+        np.putmask(values[:-1], values[:-1] < 0, 2)
         assert_almost_equal(df.values, values)
 
         self.assertRaises(Exception, df.__setitem__, df * 0, 2)
@@ -5268,6 +5269,13 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         self.assertRaises(ValueError, df.mask, True)
         self.assertRaises(ValueError, df.mask, 0)
 
+        # where inplace
+        df = DataFrame(np.random.randn(5, 3))
+
+        expected = df.mask(df < 0)
+        df.where(df >= 0, np.nan, inplace=True)
+        assert_frame_equal(df, expected)
+
     def test_mask(self):
         df = DataFrame(np.random.randn(5, 3))
         cond = df > 0
@@ -7232,13 +7240,15 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
     def test_boolean_indexing(self):
         idx = range(3)
         cols = range(3)
-        df1 = DataFrame(index=idx, columns=cols, \
-                           data=np.array([[0.0, 0.5, 1.0],
-                                          [1.5, 2.0, 2.5],
-                                          [3.0, 3.5, 4.0]], dtype=float))
-        df2 = DataFrame(index=idx, columns=cols, data=np.ones((len(idx), len(cols))))
-
-        expected = DataFrame(index=idx, columns=cols, \
+        df1 = DataFrame(index=idx, columns=cols,
+                        data=np.array([[0.0, 0.5, 1.0],
+                                       [1.5, 2.0, 2.5],
+                                       [3.0, 3.5, 4.0]],
+                                      dtype=float))
+        df2 = DataFrame(index=idx, columns=cols,
+                        data=np.ones((len(idx), len(cols))))
+
+        expected = DataFrame(index=idx, columns=cols,
                            data=np.array([[0.0, 0.5, 1.0],
                                           [1.5, 2.0, -1],
                                           [-1,  -1,  -1]], dtype=float))
