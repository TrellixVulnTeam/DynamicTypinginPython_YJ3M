commit 64017f6bc3df5a005864e7f6f155350ba8426670
Author: DSM <dsm054@gmail.com>
Date:   Sun Dec 15 21:56:44 2013 -0500

    Correct "sentinel" spelling.

diff --git a/doc/source/missing_data.rst b/doc/source/missing_data.rst
index 10053f61d..73ec9c47b 100644
--- a/doc/source/missing_data.rst
+++ b/doc/source/missing_data.rst
@@ -93,7 +93,7 @@ Datetimes
 ---------
 
 For datetime64[ns] types, ``NaT`` represents missing values. This is a pseudo-native
-sentinal value that can be represented by numpy in a singular dtype (datetime64[ns]).
+sentinel value that can be represented by numpy in a singular dtype (datetime64[ns]).
 Pandas objects provide intercompatibility between ``NaT`` and ``NaN``.
 
 .. ipython:: python
diff --git a/pandas/core/common.py b/pandas/core/common.py
index d251a2617..7569653fc 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -2332,11 +2332,11 @@ def _where_compat(mask, arr1, arr2):
     return np.where(mask, arr1, arr2)
 
 
-def sentinal_factory():
-    class Sentinal(object):
+def sentinel_factory():
+    class Sentinel(object):
         pass
 
-    return Sentinal()
+    return Sentinel()
 
 
 def in_interactive_session():
diff --git a/pandas/core/format.py b/pandas/core/format.py
index e14d34c2a..47745635b 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -740,8 +740,8 @@ class HTMLFormatter(TableFormatter):
             template = 'colspan="%d" halign="left"'
 
             # GH3547
-            sentinal = com.sentinal_factory()
-            levels = self.columns.format(sparsify=sentinal, adjoin=False,
+            sentinel = com.sentinel_factory()
+            levels = self.columns.format(sparsify=sentinel, adjoin=False,
                                          names=False)
             # Truncate column names
             if len(levels[0]) > self.max_cols:
@@ -750,7 +750,7 @@ class HTMLFormatter(TableFormatter):
             else:
                 truncated = False
 
-            level_lengths = _get_level_lengths(levels, sentinal)
+            level_lengths = _get_level_lengths(levels, sentinel)
 
             row_levels = self.frame.index.nlevels
 
@@ -859,14 +859,14 @@ class HTMLFormatter(TableFormatter):
         if self.fmt.sparsify:
 
             # GH3547
-            sentinal = com.sentinal_factory()
-            levels = frame.index[:nrows].format(sparsify=sentinal,
+            sentinel = com.sentinel_factory()
+            levels = frame.index[:nrows].format(sparsify=sentinel,
                                                 adjoin=False, names=False)
             # Truncate row names
             if truncate:
                 levels = [lev[:self.max_rows] for lev in levels]
 
-            level_lengths = _get_level_lengths(levels, sentinal)
+            level_lengths = _get_level_lengths(levels, sentinel)
 
             for i in range(min(len(frame), self.max_rows)):
                 row = []
@@ -905,14 +905,14 @@ class HTMLFormatter(TableFormatter):
             self.write_tr(row, indent, self.indent_delta, tags=None)
 
 
-def _get_level_lengths(levels, sentinal=''):
+def _get_level_lengths(levels, sentinel=''):
     from itertools import groupby
 
     def _make_grouper():
         record = {'count': 0}
 
         def grouper(x):
-            if x != sentinal:
+            if x != sentinel:
                 record['count'] += 1
             return record['count']
         return grouper
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 18d6a1a04..7ae273d08 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -2371,16 +2371,16 @@ class MultiIndex(Index):
             sparsify = get_option("display.multi_sparse")
 
         if sparsify:
-            sentinal = ''
+            sentinel = ''
             # GH3547
-            # use value of sparsify as sentinal,  unless it's an obvious
+            # use value of sparsify as sentinel,  unless it's an obvious
             # "Truthey" value
             if sparsify not in [True, 1]:
-                sentinal = sparsify
+                sentinel = sparsify
             # little bit of a kludge job for #1217
             result_levels = _sparsify(result_levels,
                                       start=int(names),
-                                      sentinal=sentinal)
+                                      sentinel=sentinel)
 
         if adjoin:
             return com.adjoin(space, *result_levels).split('\n')
@@ -3379,7 +3379,7 @@ class MultiIndex(Index):
 
 # For utility purposes
 
-def _sparsify(label_list, start=0, sentinal=''):
+def _sparsify(label_list, start=0, sentinel=''):
     pivoted = lzip(*label_list)
     k = len(label_list)
 
@@ -3396,7 +3396,7 @@ def _sparsify(label_list, start=0, sentinal=''):
                 break
 
             if p == t:
-                sparse_cur.append(sentinal)
+                sparse_cur.append(sentinel)
             else:
                 sparse_cur.extend(cur[i:])
                 result.append(sparse_cur)
