commit d6f6203128511e1b802e255cab583675bb94ca46
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Tue Mar 24 12:42:43 2020 -0700

    REF: misplaced DTI.shift tests (#32938)

diff --git a/pandas/tests/indexes/categorical/test_category.py b/pandas/tests/indexes/categorical/test_category.py
index c18cd1f25..956258239 100644
--- a/pandas/tests/indexes/categorical/test_category.py
+++ b/pandas/tests/indexes/categorical/test_category.py
@@ -488,7 +488,7 @@ class TestCategoricalIndex(Base):
         assert not ci.equals(CategoricalIndex(list("aabca") + [np.nan], ordered=True))
         assert ci.equals(ci.copy())
 
-    def test_equals_categoridcal_unordered(self):
+    def test_equals_categorical_unordered(self):
         # https://github.com/pandas-dev/pandas/issues/16603
         a = pd.CategoricalIndex(["A"], categories=["A", "B"])
         b = pd.CategoricalIndex(["A"], categories=["B", "A"])
diff --git a/pandas/tests/indexes/datetimes/test_ops.py b/pandas/tests/indexes/datetimes/test_ops.py
index cbb598286..cbf6b7b63 100644
--- a/pandas/tests/indexes/datetimes/test_ops.py
+++ b/pandas/tests/indexes/datetimes/test_ops.py
@@ -1,5 +1,4 @@
 from datetime import datetime
-import warnings
 
 import numpy as np
 import pytest
@@ -16,7 +15,7 @@ from pandas import (
 )
 import pandas._testing as tm
 
-from pandas.tseries.offsets import BDay, BMonthEnd, CDay, Day, Hour
+from pandas.tseries.offsets import BDay, Day, Hour
 
 START, END = datetime(2009, 1, 1), datetime(2010, 1, 1)
 
@@ -443,23 +442,6 @@ class TestBusinessDatetimeIndex:
         repr(cp)
         tm.assert_index_equal(cp, self.rng)
 
-    def test_shift(self):
-        shifted = self.rng.shift(5)
-        assert shifted[0] == self.rng[5]
-        assert shifted.freq == self.rng.freq
-
-        shifted = self.rng.shift(-5)
-        assert shifted[5] == self.rng[0]
-        assert shifted.freq == self.rng.freq
-
-        shifted = self.rng.shift(0)
-        assert shifted[0] == self.rng[0]
-        assert shifted.freq == self.rng.freq
-
-        rng = date_range(START, END, freq=BMonthEnd())
-        shifted = rng.shift(1, freq=BDay())
-        assert shifted[0] == rng[0] + BDay()
-
     def test_equals(self):
         assert not self.rng.equals(list(self.rng))
 
@@ -497,32 +479,6 @@ class TestCustomDatetimeIndex:
         repr(cp)
         tm.assert_index_equal(cp, self.rng)
 
-    def test_shift(self):
-
-        shifted = self.rng.shift(5)
-        assert shifted[0] == self.rng[5]
-        assert shifted.freq == self.rng.freq
-
-        shifted = self.rng.shift(-5)
-        assert shifted[5] == self.rng[0]
-        assert shifted.freq == self.rng.freq
-
-        shifted = self.rng.shift(0)
-        assert shifted[0] == self.rng[0]
-        assert shifted.freq == self.rng.freq
-
-        with warnings.catch_warnings(record=True):
-            warnings.simplefilter("ignore", pd.errors.PerformanceWarning)
-            rng = date_range(START, END, freq=BMonthEnd())
-            shifted = rng.shift(1, freq=CDay())
-            assert shifted[0] == rng[0] + CDay()
-
-    def test_shift_periods(self):
-        # GH#22458 : argument 'n' was deprecated in favor of 'periods'
-        idx = pd.date_range(start=START, end=END, periods=3)
-        tm.assert_index_equal(idx.shift(periods=0), idx)
-        tm.assert_index_equal(idx.shift(0), idx)
-
     def test_pickle_unpickle(self):
         unpickled = tm.round_trip_pickle(self.rng)
         assert unpickled.freq is not None
diff --git a/pandas/tests/indexes/datetimes/test_shift.py b/pandas/tests/indexes/datetimes/test_shift.py
index 1e2140455..6e53492b7 100644
--- a/pandas/tests/indexes/datetimes/test_shift.py
+++ b/pandas/tests/indexes/datetimes/test_shift.py
@@ -9,6 +9,8 @@ import pandas as pd
 from pandas import DatetimeIndex, Series, date_range
 import pandas._testing as tm
 
+START, END = datetime(2009, 1, 1), datetime(2010, 1, 1)
+
 
 class TestDatetimeIndexShift:
 
@@ -115,3 +117,34 @@ class TestDatetimeIndexShift:
         result = s.shift(shift, freq="H")
         expected = Series(1, index=DatetimeIndex([result_time], tz="EST"))
         tm.assert_series_equal(result, expected)
+
+    def test_shift_periods(self):
+        # GH#22458 : argument 'n' was deprecated in favor of 'periods'
+        idx = pd.date_range(start=START, end=END, periods=3)
+        tm.assert_index_equal(idx.shift(periods=0), idx)
+        tm.assert_index_equal(idx.shift(0), idx)
+
+    @pytest.mark.parametrize("freq", ["B", "C"])
+    def test_shift_bday(self, freq):
+        rng = date_range(START, END, freq=freq)
+        shifted = rng.shift(5)
+        assert shifted[0] == rng[5]
+        assert shifted.freq == rng.freq
+
+        shifted = rng.shift(-5)
+        assert shifted[5] == rng[0]
+        assert shifted.freq == rng.freq
+
+        shifted = rng.shift(0)
+        assert shifted[0] == rng[0]
+        assert shifted.freq == rng.freq
+
+    def test_shift_bmonth(self):
+        rng = date_range(START, END, freq=pd.offsets.BMonthEnd())
+        shifted = rng.shift(1, freq=pd.offsets.BDay())
+        assert shifted[0] == rng[0] + pd.offsets.BDay()
+
+        rng = date_range(START, END, freq=pd.offsets.BMonthEnd())
+        with tm.assert_produces_warning(pd.errors.PerformanceWarning):
+            shifted = rng.shift(1, freq=pd.offsets.CDay())
+            assert shifted[0] == rng[0] + pd.offsets.CDay()
