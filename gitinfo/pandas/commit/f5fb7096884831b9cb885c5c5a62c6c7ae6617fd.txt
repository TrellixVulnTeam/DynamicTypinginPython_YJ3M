commit f5fb7096884831b9cb885c5c5a62c6c7ae6617fd
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Jul 20 11:38:08 2012 -0400

    BUG: properly handle None values in dict input to concat, close #1649

diff --git a/RELEASE.rst b/RELEASE.rst
index 1da12b2e9..14adb7eb1 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -95,6 +95,7 @@ pandas 0.8.1
     DataFrame.xs / __getitem__ (#1644)
   - Fix use of string alias timestamps with tz-aware time series (#1647)
   - Fix Series.max/min and Series.describe on len-0 series (#1650)
+  - Handle None values in dict passed to concat (#1649)
 
 pandas 0.8.0
 ============
diff --git a/pandas/tools/merge.py b/pandas/tools/merge.py
index 9fdbbdaa6..12bd76a8e 100644
--- a/pandas/tools/merge.py
+++ b/pandas/tools/merge.py
@@ -858,8 +858,19 @@ class _Concatenator(object):
                 keys = sorted(objs)
             objs = [objs[k] for k in keys]
 
-        # filter Nones
-        objs = [obj for obj in objs if obj is not None]
+        if keys is None:
+            objs = [obj for obj in objs if obj is not None]
+        else:
+            # #1649
+            clean_keys = []
+            clean_objs = []
+            for k, v in zip(keys, objs):
+                if v is None:
+                    continue
+                clean_keys.append(k)
+                clean_objs.append(v)
+            objs = clean_objs
+            keys = clean_keys
 
         if len(objs) == 0:
             raise Exception('All objects passed were None')
diff --git a/pandas/tools/tests/test_merge.py b/pandas/tools/tests/test_merge.py
index 6be27a0a9..72ed06018 100644
--- a/pandas/tools/tests/test_merge.py
+++ b/pandas/tools/tests/test_merge.py
@@ -1377,6 +1377,20 @@ class TestConcatenate(unittest.TestCase):
         result = concat([df, df])
         self.assert_((result[:10]['time'] == rng).all())
 
+    def test_concat_keys_with_none(self):
+        # #1649
+        df0 = DataFrame([[10, 20, 30], [10, 20, 30], [10, 20, 30]])
+
+        result = concat(dict(a=None, b=df0, c=df0[:2], d=df0[:1], e=df0))
+        expected = concat(dict(b=df0, c=df0[:2], d=df0[:1], e=df0))
+        tm.assert_frame_equal(result, expected)
+
+        result = concat([None, df0, df0[:2], df0[:1], df0],
+                        keys=['a', 'b', 'c', 'd', 'e'])
+        expected = concat([df0, df0[:2], df0[:1], df0],
+                          keys=['b', 'c', 'd', 'e'])
+        tm.assert_frame_equal(result, expected)
+
 class TestOrderedMerge(unittest.TestCase):
 
     def setUp(self):
