commit 0cf93aa8b6ff1af83a460749b8092026d76b14e3
Author: Jeffrey Tratner <jeffrey.tratner@gmail.com>
Date:   Sun Jun 30 21:50:11 2013 -0400

    CLN: Make more core objects inherit PandasObject
    CLN: Make Categorical inherit from PandasObject
    
    CLN: Make GroupBy inherit from PandasObject
    
    CLN/ENH: Make Sparse* into PandasObjects
    
    Plus get all the string methods working...
    
    CLN: Index now a PandasObject + str method cleanup
    
    CLN: Make tseries/index fit with PandasObject.
    
    CLN: Use PandasObject in internals + cleanup
    
    CLN: Make Period into a PandasObject + cleanup
    
    CLN: Remove extraneous __repr__ from io/excel

diff --git a/pandas/core/categorical.py b/pandas/core/categorical.py
index 916bb2deb..b25a027ad 100644
--- a/pandas/core/categorical.py
+++ b/pandas/core/categorical.py
@@ -3,6 +3,7 @@
 import numpy as np
 
 from pandas.core.algorithms import factorize
+from pandas.core.base import PandasObject
 from pandas.core.index import Index
 import pandas.core.common as com
 from pandas.core.frame import DataFrame
@@ -25,8 +26,7 @@ def _cat_compare_op(op):
 
     return f
 
-
-class Categorical(object):
+class Categorical(PandasObject):
     """
     Represents a categorical variable in classic R / S-plus fashion
 
@@ -134,9 +134,9 @@ class Categorical(object):
     def __len__(self):
         return len(self.labels)
 
-    def __repr__(self):
+    def __unicode__(self):
         temp = 'Categorical: %s\n%s\n%s'
-        values = np.asarray(self)
+        values = com.pprint_thing(np.asarray(self))
         levheader = 'Levels (%d): ' % len(self.levels)
         levstring = np.array_repr(self.levels,
                                   max_line_width=60)
@@ -145,9 +145,9 @@ class Categorical(object):
         lines = levstring.split('\n')
         levstring = '\n'.join([lines[0]] +
                               [indent + x.lstrip() for x in lines[1:]])
+        name = '' if self.name is None else self.name
+        return temp % (name, values, levheader + levstring)
 
-        return temp % ('' if self.name is None else self.name,
-                       repr(values), levheader + levstring)
 
     def __getitem__(self, key):
         if isinstance(key, (int, np.integer)):
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 9bd7923f6..cc0a2b758 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -2,6 +2,7 @@ from itertools import izip
 import types
 import numpy as np
 
+from pandas.core.base import PandasObject
 from pandas.core.categorical import Categorical
 from pandas.core.frame import DataFrame
 from pandas.core.generic import NDFrame
@@ -100,7 +101,7 @@ def _last_compat(x, axis=0):
         return _last(x)
 
 
-class GroupBy(object):
+class GroupBy(PandasObject):
     """
     Class for grouping and aggregating relational data. See aggregate,
     transform, and apply functions on this object.
@@ -201,6 +202,10 @@ class GroupBy(object):
     def __len__(self):
         return len(self.indices)
 
+    def __unicode__(self):
+        # TODO: Better unicode/repr for GroupBy object
+        return object.__repr__(self)
+
     @property
     def groups(self):
         return self.grouper.groups
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 43b172c6e..0e15f9ee3 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -9,6 +9,7 @@ import pandas.lib as lib
 import pandas.algos as _algos
 import pandas.index as _index
 from pandas.lib import Timestamp
+from pandas.core.base import PandasObject
 
 from pandas.util.decorators import cache_readonly
 from pandas.core.common import isnull
@@ -47,7 +48,7 @@ def _shouldbe_timestamp(obj):
             or tslib.is_timestamp_array(obj))
 
 
-class Index(np.ndarray):
+class Index(PandasObject, np.ndarray):
     """
     Immutable ndarray implementing an ordered, sliceable set. The basic object
     storing axis labels for all pandas objects
@@ -142,28 +143,6 @@ class Index(np.ndarray):
     def _shallow_copy(self):
         return self.view()
 
-    def __str__(self):
-        """
-        Return a string representation for a particular Index
-
-        Invoked by str(df) in both py2/py3.
-        Yields Bytestring in Py2, Unicode String in py3.
-        """
-
-        if py3compat.PY3:
-            return self.__unicode__()
-        return self.__bytes__()
-
-    def __bytes__(self):
-        """
-        Return a string representation for a particular Index
-
-        Invoked by bytes(df) in py3 only.
-        Yields a bytestring in both py2/py3.
-        """
-        encoding = com.get_option("display.encoding")
-        return self.__unicode__().encode(encoding, 'replace')
-
     def __unicode__(self):
         """
         Return a string representation for a particular Index
@@ -173,14 +152,6 @@ class Index(np.ndarray):
         prepr = com.pprint_thing(self, escape_chars=('\t', '\r', '\n'),quote_strings=True)
         return '%s(%s, dtype=%s)' % (type(self).__name__, prepr, self.dtype)
 
-    def __repr__(self):
-        """
-        Return a string representation for a particular Index
-
-        Yields Bytestring in Py2, Unicode String in py3.
-        """
-        return str(self)
-
     def to_series(self):
         """
         return a series with both index and values equal to the index keys
@@ -1531,28 +1502,6 @@ class MultiIndex(Index):
     def dtype(self):
         return np.dtype('O')
 
-    def __str__(self):
-        """
-        Return a string representation for a particular Index
-
-        Invoked by str(df) in both py2/py3.
-        Yields Bytestring in Py2, Unicode String in py3.
-        """
-
-        if py3compat.PY3:
-            return self.__unicode__()
-        return self.__bytes__()
-
-    def __bytes__(self):
-        """
-        Return a string representation for a particular Index
-
-        Invoked by bytes(df) in py3 only.
-        Yields a bytestring in both py2/py3.
-        """
-        encoding = com.get_option("display.encoding")
-        return self.__unicode__().encode(encoding, 'replace')
-
     def __unicode__(self):
         """
         Return a string representation for a particular Index
@@ -1566,14 +1515,6 @@ class MultiIndex(Index):
 
         return output % summary
 
-    def __repr__(self):
-        """
-        Return a string representation for a particular Index
-
-        Yields Bytestring in Py2, Unicode String in py3.
-        """
-        return str(self)
-
     def __len__(self):
         return len(self.labels[0])
 
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 7a6a13da3..57be20a50 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -4,6 +4,7 @@ from datetime import datetime
 
 from numpy import nan
 import numpy as np
+from pandas.core.base import PandasObject
 
 from pandas.core.common import (_possibly_downcast_to_dtype, isnull, _NS_DTYPE,
                                 _TD_DTYPE)
@@ -19,7 +20,7 @@ from pandas.tslib import Timestamp
 from pandas.util import py3compat
 
 
-class Block(object):
+class Block(PandasObject):
     """
     Canonical n-dimensional unit of homogeneous dtype contained in a pandas
     data structure
@@ -91,14 +92,12 @@ class Block(object):
             self.items = ref_items.take(self.ref_locs)
         self.ref_items = ref_items
 
-    def __repr__(self):
+    def __unicode__(self):
         shape = ' x '.join([com.pprint_thing(s) for s in self.shape])
         name = type(self).__name__
         result = '%s: %s, %s, dtype %s' % (
             name, com.pprint_thing(self.items), shape, self.dtype)
-        if py3compat.PY3:
-            return unicode(result)
-        return com.console_encode(result)
+        return result
 
     def __contains__(self, item):
         return item in self.items
@@ -969,7 +968,7 @@ def make_block(values, items, ref_items, klass=None, fastpath=False, placement=N
 # TODO: flexible with index=None and/or items=None
 
 
-class BlockManager(object):
+class BlockManager(PandasObject):
     """
     Core internal data structure to implement DataFrame
 
@@ -1213,7 +1212,7 @@ class BlockManager(object):
     def __len__(self):
         return len(self.items)
 
-    def __repr__(self):
+    def __unicode__(self):
         output = 'BlockManager'
         for i, ax in enumerate(self.axes):
             if i == 0:
@@ -1222,7 +1221,7 @@ class BlockManager(object):
                 output += '\nAxis %d: %s' % (i, ax)
 
         for block in self.blocks:
-            output += '\n%s' % repr(block)
+            output += '\n%s' % com.pprint_thing(block)
         return output
 
     @property
diff --git a/pandas/io/excel.py b/pandas/io/excel.py
index 95702847d..f61db447f 100644
--- a/pandas/io/excel.py
+++ b/pandas/io/excel.py
@@ -73,9 +73,6 @@ class ExcelFile(object):
             data = path_or_buf.read()
             self.book = xlrd.open_workbook(file_contents=data)
 
-    def __repr__(self):
-        return object.__repr__(self)
-
     def parse(self, sheetname, header=0, skiprows=None, skip_footer=0,
               index_col=None, parse_cols=None, parse_dates=False,
               date_parser=None, na_values=None, thousands=None, chunksize=None,
diff --git a/pandas/sparse/array.py b/pandas/sparse/array.py
index de510aa15..48fa9caa0 100644
--- a/pandas/sparse/array.py
+++ b/pandas/sparse/array.py
@@ -8,6 +8,7 @@ from numpy import nan, ndarray
 import numpy as np
 
 import operator
+from pandas.core.base import PandasObject
 import pandas.core.common as com
 
 from pandas.util import py3compat
@@ -86,8 +87,7 @@ def _sparse_fillop(this, other, name):
 
     return result, result_index
 
-
-class SparseArray(np.ndarray):
+class SparseArray(PandasObject, np.ndarray):
     """Data structure for labeled, sparse floating point data
 
 Parameters
@@ -184,9 +184,9 @@ to sparse
     def __len__(self):
         return self.sp_index.length
 
-    def __repr__(self):
-        return '%s\n%s' % (np.ndarray.__repr__(self),
-                           repr(self.sp_index))
+    def __unicode__(self):
+        return '%s\n%s' % (com.pprint_thing(self),
+                           com.pprint_thing(self.sp_index))
 
     # Arithmetic operators
 
diff --git a/pandas/sparse/list.py b/pandas/sparse/list.py
index 9f59b9108..ceb03eae5 100644
--- a/pandas/sparse/list.py
+++ b/pandas/sparse/list.py
@@ -1,10 +1,12 @@
 import numpy as np
+from pandas.core.base import PandasObject
+from pandas.core.common import pprint_thing
 
 from pandas.sparse.array import SparseArray
 import pandas._sparse as splib
 
 
-class SparseList(object):
+class SparseList(PandasObject):
     """
     Data structure for accumulating data to be converted into a
     SparseArray. Has similar API to the standard Python list
@@ -21,9 +23,9 @@ class SparseList(object):
         if data is not None:
             self.append(data)
 
-    def __repr__(self):
+    def __unicode__(self):
         contents = '\n'.join(repr(c) for c in self._chunks)
-        return '%s\n%s' % (object.__repr__(self), contents)
+        return '%s\n%s' % (object.__repr__(self), pprint_thing(contents))
 
     def __len__(self):
         return sum(len(c) for c in self._chunks)
diff --git a/pandas/sparse/series.py b/pandas/sparse/series.py
index 1b8d3541d..802808954 100644
--- a/pandas/sparse/series.py
+++ b/pandas/sparse/series.py
@@ -241,8 +241,9 @@ class SparseSeries(SparseArray, Series):
     def __len__(self):
         return self.sp_index.length
 
-    def __repr__(self):
-        series_rep = Series.__repr__(self)
+    def __unicode__(self):
+        # currently, unicode is same as repr...fixes infinite loop
+        series_rep = Series.__unicode__(self)
         rep = '%s\n%s' % (series_rep, repr(self.sp_index))
         return rep
 
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 56df301b5..7fdb6d9d2 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -488,7 +488,7 @@ class DatetimeIndex(Int64Index):
         # how to represent ourselves to matplotlib
         return tslib.ints_to_pydatetime(self.asi8, self.tz)
 
-    def __repr__(self):
+    def __unicode__(self):
         from pandas.core.format import _format_datetime64
         values = self.values
 
@@ -514,8 +514,6 @@ class DatetimeIndex(Int64Index):
 
         return summary
 
-    __str__ = __repr__
-
     def __reduce__(self):
         """Necessary for making this object picklable"""
         object_state = list(np.ndarray.__reduce__(self))
diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index 34c640392..ac79fbd6b 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -3,6 +3,7 @@ import operator
 
 from datetime import datetime, date
 import numpy as np
+from pandas.core.base import PandasObject
 
 import pandas.tseries.offsets as offsets
 from pandas.tseries.frequencies import (get_freq_code as _gfc,
@@ -40,7 +41,7 @@ def _field_accessor(name, alias):
     return property(f)
 
 
-class Period(object):
+class Period(PandasObject):
     """
     Represents an period of time
 
@@ -272,28 +273,6 @@ class Period(object):
 
         return "Period('%s', '%s')" % (formatted, freqstr)
 
-    def __str__(self):
-        """
-        Return a string representation for a particular DataFrame
-
-        Invoked by str(df) in both py2/py3.
-        Yields Bytestring in Py2, Unicode String in py3.
-        """
-
-        if py3compat.PY3:
-            return self.__unicode__()
-        return self.__bytes__()
-
-    def __bytes__(self):
-        """
-        Return a string representation for a particular DataFrame
-
-        Invoked by bytes(df) in py3 only.
-        Yields a bytestring in both py2/py3.
-        """
-        encoding = com.get_option("display.encoding")
-        return self.__unicode__().encode(encoding, 'replace')
-
     def __unicode__(self):
         """
         Return a string representation for a particular DataFrame
@@ -303,9 +282,7 @@ class Period(object):
         """
         base, mult = _gfc(self.freq)
         formatted = tslib.period_format(self.ordinal, base)
-        value = (u"%s" % formatted)
-        assert type(value) == unicode
-
+        value = ("%s" % formatted)
         return value
 
 
