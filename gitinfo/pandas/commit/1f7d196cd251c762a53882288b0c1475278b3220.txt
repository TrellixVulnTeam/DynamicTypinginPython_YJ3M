commit 1f7d196cd251c762a53882288b0c1475278b3220
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jul 7 13:56:04 2011 -0400

    enhanced xs functionality returns lower dim BlockManager

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index ccb166238..052f1afaf 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -852,7 +852,7 @@ class DataFrame(PandasGeneric):
 
         self._consolidate_inplace()
         values = self._data.xs(key, axis=1, copy=copy)
-        return Series(values, index=self.columns)
+        return Series(values.as_matrix(), index=self.columns)
 
     #----------------------------------------------------------------------
     # Reindexing
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 54b8d3409..112e51fb6 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -374,7 +374,7 @@ class BlockManager(object):
                 # if not, then just call interleave per below
                 mat = blk.values
             else:
-                mat = self.reindex_columns(columns).as_matrix()
+                mat = self.reindex_items(items).as_matrix()
         else:
             if items is None:
                 mat = self._interleave(self.items)
@@ -407,24 +407,31 @@ class BlockManager(object):
     def xs(self, key, axis=1, copy=True):
         from pandas.core.series import Series
 
+        assert(axis >= 1)
+
         i = self.axes[axis].get_loc(key)
         slicer = [slice(None, None) for _ in range(self.ndim)]
         slicer[axis] = i
         slicer = tuple(slicer)
 
+        new_axes = list(self.axes)
+        new_axes.pop(axis)
+
         if len(self.blocks) > 1:
             if not copy:
                 raise Exception('cannot get view of mixed-type or '
                                 'non-consolidated DataFrame')
-            vals = np.concatenate([b.values[slicer] for b in self.blocks])
-            items = Index(np.concatenate([b.items for b in self.blocks]))
-            indexer, _ = items.get_indexer(self.items)
-            vals = vals.take(indexer, axis=0)
+            new_blocks = []
+            for blk in self.blocks:
+                newb = make_block(blk.values[slicer], blk.items, blk.ref_items)
+                new_blocks.append(newb)
         else:
             vals = self.blocks[0].values[slicer]
             if copy:
                 vals = vals.copy()
-        return vals
+            new_blocks = [make_block(vals, self.items, self.items)]
+
+        return BlockManager(new_blocks, new_axes)
 
     def consolidate(self):
         """
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index a9062a836..0b598e100 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -572,10 +572,11 @@ class WidePanel(Panel, PandasGeneric):
         y : DataFrame
             index -> minor axis, columns -> items
         """
-        values = self._data.xs(key, axis=1, copy=copy).T
-        return DataFrame(values, index=self.minor_axis, columns=self.items)
+        self._consolidate_inplace()
+        new_data = self._data.xs(key, axis=1, copy=copy)
+        return DataFrame(new_data)
 
-    def minor_xs(self, key, copy=False):
+    def minor_xs(self, key, copy=True):
         """
         Return slice of panel along minor axis
 
@@ -589,8 +590,9 @@ class WidePanel(Panel, PandasGeneric):
         y : DataFrame
             index -> major axis, columns -> items
         """
-        values = self._data.xs(key, axis=2, copy=copy).T
-        return DataFrame(values, index=self.major_axis, columns=self.items)
+        self._consolidate_inplace()
+        new_data = self._data.xs(key, axis=2, copy=copy)
+        return DataFrame(new_data)
 
     def getMinorXS(self, key): # pragma: no cover
         warnings.warn("getMinorXS has been replaced by the minor_xs function "
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 35eeebb2d..2d40a82f4 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -466,7 +466,6 @@ class TestWidePanel(unittest.TestCase, PanelTests,
         self.panel['ItemP'] = self.panel['ItemA'] > 0
         self.assert_(self.panel['ItemP'].values.dtype == np.bool_)
 
-
     def test_conform(self):
         df = self.panel['ItemA'][:-5].filter(items=['A', 'B'])
         conformed = self.panel.conform(df)
@@ -552,6 +551,12 @@ class TestWidePanel(unittest.TestCase, PanelTests,
         idx = self.panel.major_axis[0] - bday
         self.assertRaises(Exception, self.panel.major_xs, idx)
 
+    def test_major_xs_mixed(self):
+        self.panel['ItemD'] = 'foo'
+        xs = self.panel.major_xs(self.panel.major_axis[0])
+        self.assert_(xs['ItemA'].dtype == np.float64)
+        self.assert_(xs['ItemD'].dtype == np.object_)
+
     def test_minor_xs(self):
         ref = self.panel['ItemA']
 
@@ -563,6 +568,13 @@ class TestWidePanel(unittest.TestCase, PanelTests,
         # not contained
         self.assertRaises(Exception, self.panel.minor_xs, 'E')
 
+    def test_minor_xs_mixed(self):
+        self.panel['ItemD'] = 'foo'
+
+        xs = self.panel.minor_xs('D')
+        self.assert_(xs['ItemA'].dtype == np.float64)
+        self.assert_(xs['ItemD'].dtype == np.object_)
+
     def test_groupby(self):
         grouped = self.panel.groupby({'ItemA' : 0, 'ItemB' : 0, 'ItemC' : 1},
                                      axis='items')
