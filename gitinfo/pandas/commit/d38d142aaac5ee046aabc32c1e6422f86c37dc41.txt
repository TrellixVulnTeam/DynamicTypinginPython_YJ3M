commit d38d142aaac5ee046aabc32c1e6422f86c37dc41
Author: Jeff Reback <jeff@reback.net>
Date:   Wed Feb 8 18:45:04 2017 -0500

    TST: more test_period reorg

diff --git a/pandas/tests/indexes/period/test_construction.py b/pandas/tests/indexes/period/test_construction.py
index c1299c6ab..228615829 100644
--- a/pandas/tests/indexes/period/test_construction.py
+++ b/pandas/tests/indexes/period/test_construction.py
@@ -410,22 +410,9 @@ class TestPeriodIndex(tm.TestCase):
         self.assertTrue((i1 == i2).all())
         self.assertEqual(i1.freq, i2.freq)
 
-        try:
-            PeriodIndex(start=start, end=end_intv)
-            raise AssertionError('Cannot allow mixed freq for start and end')
-        except ValueError:
-            pass
-
         end_intv = Period('2005-05-01', 'B')
         i1 = PeriodIndex(start=start, end=end_intv)
 
-        try:
-            PeriodIndex(start=start)
-            raise AssertionError(
-                'Must specify periods if missing start or end')
-        except ValueError:
-            pass
-
         # infer freq from first element
         i2 = PeriodIndex([end_intv, Period('2005-05-05', 'B')])
         self.assertEqual(len(i2), 2)
@@ -441,6 +428,18 @@ class TestPeriodIndex(tm.TestCase):
         vals = np.array(vals)
         self.assertRaises(ValueError, PeriodIndex, vals)
 
+    def test_constructor_error(self):
+        start = Period('02-Apr-2005', 'B')
+        end_intv = Period('2006-12-31', ('w', 1))
+
+        msg = 'Start and end must have same freq'
+        with tm.assertRaisesRegexp(ValueError, msg):
+            PeriodIndex(start=start, end=end_intv)
+
+        msg = 'Must specify 2 of start, end, periods'
+        with tm.assertRaisesRegexp(ValueError, msg):
+            PeriodIndex(start=start)
+
     def test_recreate_from_data(self):
         for o in ['M', 'Q', 'A', 'D', 'B', 'T', 'S', 'L', 'U', 'N', 'H']:
             org = PeriodIndex(start='2001/04/01', freq=o, periods=1)
diff --git a/pandas/tests/indexes/period/test_indexing.py b/pandas/tests/indexes/period/test_indexing.py
new file mode 100644
index 000000000..8d9e26406
--- /dev/null
+++ b/pandas/tests/indexes/period/test_indexing.py
@@ -0,0 +1,317 @@
+from datetime import datetime
+
+import numpy as np
+import pandas as pd
+from pandas.util import testing as tm
+from pandas.compat import lrange
+from pandas import (PeriodIndex, Series, DatetimeIndex,
+                    period_range, Period, tslib, _np_version_under1p9)
+
+
+class TestGetItem(tm.TestCase):
+
+    def setUp(self):
+        pass
+
+    def test_getitem(self):
+        idx1 = pd.period_range('2011-01-01', '2011-01-31', freq='D',
+                               name='idx')
+
+        for idx in [idx1]:
+            result = idx[0]
+            self.assertEqual(result, pd.Period('2011-01-01', freq='D'))
+
+            result = idx[-1]
+            self.assertEqual(result, pd.Period('2011-01-31', freq='D'))
+
+            result = idx[0:5]
+            expected = pd.period_range('2011-01-01', '2011-01-05', freq='D',
+                                       name='idx')
+            self.assert_index_equal(result, expected)
+            self.assertEqual(result.freq, expected.freq)
+            self.assertEqual(result.freq, 'D')
+
+            result = idx[0:10:2]
+            expected = pd.PeriodIndex(['2011-01-01', '2011-01-03',
+                                       '2011-01-05',
+                                       '2011-01-07', '2011-01-09'],
+                                      freq='D', name='idx')
+            self.assert_index_equal(result, expected)
+            self.assertEqual(result.freq, expected.freq)
+            self.assertEqual(result.freq, 'D')
+
+            result = idx[-20:-5:3]
+            expected = pd.PeriodIndex(['2011-01-12', '2011-01-15',
+                                       '2011-01-18',
+                                       '2011-01-21', '2011-01-24'],
+                                      freq='D', name='idx')
+            self.assert_index_equal(result, expected)
+            self.assertEqual(result.freq, expected.freq)
+            self.assertEqual(result.freq, 'D')
+
+            result = idx[4::-1]
+            expected = PeriodIndex(['2011-01-05', '2011-01-04', '2011-01-03',
+                                    '2011-01-02', '2011-01-01'],
+                                   freq='D', name='idx')
+            self.assert_index_equal(result, expected)
+            self.assertEqual(result.freq, expected.freq)
+            self.assertEqual(result.freq, 'D')
+
+    def test_getitem_index(self):
+        idx = period_range('2007-01', periods=10, freq='M', name='x')
+
+        result = idx[[1, 3, 5]]
+        exp = pd.PeriodIndex(['2007-02', '2007-04', '2007-06'],
+                             freq='M', name='x')
+        tm.assert_index_equal(result, exp)
+
+        result = idx[[True, True, False, False, False,
+                      True, True, False, False, False]]
+        exp = pd.PeriodIndex(['2007-01', '2007-02', '2007-06', '2007-07'],
+                             freq='M', name='x')
+        tm.assert_index_equal(result, exp)
+
+    def test_getitem_partial(self):
+        rng = period_range('2007-01', periods=50, freq='M')
+        ts = Series(np.random.randn(len(rng)), rng)
+
+        self.assertRaises(KeyError, ts.__getitem__, '2006')
+
+        result = ts['2008']
+        self.assertTrue((result.index.year == 2008).all())
+
+        result = ts['2008':'2009']
+        self.assertEqual(len(result), 24)
+
+        result = ts['2008-1':'2009-12']
+        self.assertEqual(len(result), 24)
+
+        result = ts['2008Q1':'2009Q4']
+        self.assertEqual(len(result), 24)
+
+        result = ts[:'2009']
+        self.assertEqual(len(result), 36)
+
+        result = ts['2009':]
+        self.assertEqual(len(result), 50 - 24)
+
+        exp = result
+        result = ts[24:]
+        tm.assert_series_equal(exp, result)
+
+        ts = ts[10:].append(ts[10:])
+        self.assertRaisesRegexp(KeyError,
+                                "left slice bound for non-unique "
+                                "label: '2008'",
+                                ts.__getitem__, slice('2008', '2009'))
+
+    def test_getitem_datetime(self):
+        rng = period_range(start='2012-01-01', periods=10, freq='W-MON')
+        ts = Series(lrange(len(rng)), index=rng)
+
+        dt1 = datetime(2011, 10, 2)
+        dt4 = datetime(2012, 4, 20)
+
+        rs = ts[dt1:dt4]
+        tm.assert_series_equal(rs, ts)
+
+    def test_getitem_nat(self):
+        idx = pd.PeriodIndex(['2011-01', 'NaT', '2011-02'], freq='M')
+        self.assertEqual(idx[0], pd.Period('2011-01', freq='M'))
+        self.assertIs(idx[1], tslib.NaT)
+
+        s = pd.Series([0, 1, 2], index=idx)
+        self.assertEqual(s[pd.NaT], 1)
+
+        s = pd.Series(idx, index=idx)
+        self.assertEqual(s[pd.Period('2011-01', freq='M')],
+                         pd.Period('2011-01', freq='M'))
+        self.assertIs(s[pd.NaT], tslib.NaT)
+
+    def test_getitem_list_periods(self):
+        # GH 7710
+        rng = period_range(start='2012-01-01', periods=10, freq='D')
+        ts = Series(lrange(len(rng)), index=rng)
+        exp = ts.iloc[[1]]
+        tm.assert_series_equal(ts[[Period('2012-01-02', freq='D')]], exp)
+
+    def test_getitem_seconds(self):
+        # GH 6716
+        didx = DatetimeIndex(start='2013/01/01 09:00:00', freq='S',
+                             periods=4000)
+        pidx = PeriodIndex(start='2013/01/01 09:00:00', freq='S', periods=4000)
+
+        for idx in [didx, pidx]:
+            # getitem against index should raise ValueError
+            values = ['2014', '2013/02', '2013/01/02', '2013/02/01 9H',
+                      '2013/02/01 09:00']
+            for v in values:
+                if _np_version_under1p9:
+                    with tm.assertRaises(ValueError):
+                        idx[v]
+                else:
+                    # GH7116
+                    # these show deprecations as we are trying
+                    # to slice with non-integer indexers
+                    # with tm.assertRaises(IndexError):
+                    #    idx[v]
+                    continue
+
+            s = Series(np.random.rand(len(idx)), index=idx)
+            tm.assert_series_equal(s['2013/01/01 10:00'], s[3600:3660])
+            tm.assert_series_equal(s['2013/01/01 9H'], s[:3600])
+            for d in ['2013/01/01', '2013/01', '2013']:
+                tm.assert_series_equal(s[d], s)
+
+    def test_getitem_day(self):
+        # GH 6716
+        # Confirm DatetimeIndex and PeriodIndex works identically
+        didx = DatetimeIndex(start='2013/01/01', freq='D', periods=400)
+        pidx = PeriodIndex(start='2013/01/01', freq='D', periods=400)
+
+        for idx in [didx, pidx]:
+            # getitem against index should raise ValueError
+            values = ['2014', '2013/02', '2013/01/02', '2013/02/01 9H',
+                      '2013/02/01 09:00']
+            for v in values:
+
+                if _np_version_under1p9:
+                    with tm.assertRaises(ValueError):
+                        idx[v]
+                else:
+                    # GH7116
+                    # these show deprecations as we are trying
+                    # to slice with non-integer indexers
+                    # with tm.assertRaises(IndexError):
+                    #    idx[v]
+                    continue
+
+            s = Series(np.random.rand(len(idx)), index=idx)
+            tm.assert_series_equal(s['2013/01'], s[0:31])
+            tm.assert_series_equal(s['2013/02'], s[31:59])
+            tm.assert_series_equal(s['2014'], s[365:])
+
+            invalid = ['2013/02/01 9H', '2013/02/01 09:00']
+            for v in invalid:
+                with tm.assertRaises(KeyError):
+                    s[v]
+
+
+class TestIndexing(tm.TestCase):
+
+    def test_get_loc_msg(self):
+        idx = period_range('2000-1-1', freq='A', periods=10)
+        bad_period = Period('2012', 'A')
+        self.assertRaises(KeyError, idx.get_loc, bad_period)
+
+        try:
+            idx.get_loc(bad_period)
+        except KeyError as inst:
+            self.assertEqual(inst.args[0], bad_period)
+
+    def test_get_loc_nat(self):
+        didx = DatetimeIndex(['2011-01-01', 'NaT', '2011-01-03'])
+        pidx = PeriodIndex(['2011-01-01', 'NaT', '2011-01-03'], freq='M')
+
+        # check DatetimeIndex compat
+        for idx in [didx, pidx]:
+            self.assertEqual(idx.get_loc(pd.NaT), 1)
+            self.assertEqual(idx.get_loc(None), 1)
+            self.assertEqual(idx.get_loc(float('nan')), 1)
+            self.assertEqual(idx.get_loc(np.nan), 1)
+
+    def test_take(self):
+        # GH 10295
+        idx1 = pd.period_range('2011-01-01', '2011-01-31', freq='D',
+                               name='idx')
+
+        for idx in [idx1]:
+            result = idx.take([0])
+            self.assertEqual(result, pd.Period('2011-01-01', freq='D'))
+
+            result = idx.take([5])
+            self.assertEqual(result, pd.Period('2011-01-06', freq='D'))
+
+            result = idx.take([0, 1, 2])
+            expected = pd.period_range('2011-01-01', '2011-01-03', freq='D',
+                                       name='idx')
+            self.assert_index_equal(result, expected)
+            self.assertEqual(result.freq, 'D')
+            self.assertEqual(result.freq, expected.freq)
+
+            result = idx.take([0, 2, 4])
+            expected = pd.PeriodIndex(['2011-01-01', '2011-01-03',
+                                       '2011-01-05'], freq='D', name='idx')
+            self.assert_index_equal(result, expected)
+            self.assertEqual(result.freq, expected.freq)
+            self.assertEqual(result.freq, 'D')
+
+            result = idx.take([7, 4, 1])
+            expected = pd.PeriodIndex(['2011-01-08', '2011-01-05',
+                                       '2011-01-02'],
+                                      freq='D', name='idx')
+            self.assert_index_equal(result, expected)
+            self.assertEqual(result.freq, expected.freq)
+            self.assertEqual(result.freq, 'D')
+
+            result = idx.take([3, 2, 5])
+            expected = PeriodIndex(['2011-01-04', '2011-01-03', '2011-01-06'],
+                                   freq='D', name='idx')
+            self.assert_index_equal(result, expected)
+            self.assertEqual(result.freq, expected.freq)
+            self.assertEqual(result.freq, 'D')
+
+            result = idx.take([-3, 2, 5])
+            expected = PeriodIndex(['2011-01-29', '2011-01-03', '2011-01-06'],
+                                   freq='D', name='idx')
+            self.assert_index_equal(result, expected)
+            self.assertEqual(result.freq, expected.freq)
+            self.assertEqual(result.freq, 'D')
+
+    def test_take_misc(self):
+        index = PeriodIndex(start='1/1/10', end='12/31/12', freq='D',
+                            name='idx')
+        expected = PeriodIndex([datetime(2010, 1, 6), datetime(2010, 1, 7),
+                                datetime(2010, 1, 9), datetime(2010, 1, 13)],
+                               freq='D', name='idx')
+
+        taken1 = index.take([5, 6, 8, 12])
+        taken2 = index[[5, 6, 8, 12]]
+
+        for taken in [taken1, taken2]:
+            tm.assert_index_equal(taken, expected)
+            tm.assertIsInstance(taken, PeriodIndex)
+            self.assertEqual(taken.freq, index.freq)
+            self.assertEqual(taken.name, expected.name)
+
+    def test_take_fill_value(self):
+        # GH 12631
+        idx = pd.PeriodIndex(['2011-01-01', '2011-02-01', '2011-03-01'],
+                             name='xxx', freq='D')
+        result = idx.take(np.array([1, 0, -1]))
+        expected = pd.PeriodIndex(['2011-02-01', '2011-01-01', '2011-03-01'],
+                                  name='xxx', freq='D')
+        tm.assert_index_equal(result, expected)
+
+        # fill_value
+        result = idx.take(np.array([1, 0, -1]), fill_value=True)
+        expected = pd.PeriodIndex(['2011-02-01', '2011-01-01', 'NaT'],
+                                  name='xxx', freq='D')
+        tm.assert_index_equal(result, expected)
+
+        # allow_fill=False
+        result = idx.take(np.array([1, 0, -1]), allow_fill=False,
+                          fill_value=True)
+        expected = pd.PeriodIndex(['2011-02-01', '2011-01-01', '2011-03-01'],
+                                  name='xxx', freq='D')
+        tm.assert_index_equal(result, expected)
+
+        msg = ('When allow_fill=True and fill_value is not None, '
+               'all indices must be >= -1')
+        with tm.assertRaisesRegexp(ValueError, msg):
+            idx.take(np.array([1, 0, -2]), fill_value=True)
+        with tm.assertRaisesRegexp(ValueError, msg):
+            idx.take(np.array([1, 0, -5]), fill_value=True)
+
+        with tm.assertRaises(IndexError):
+            idx.take(np.array([1, -5]))
diff --git a/pandas/tests/indexes/period/test_ops.py b/pandas/tests/indexes/period/test_ops.py
index 70759e865..82a881d7c 100644
--- a/pandas/tests/indexes/period/test_ops.py
+++ b/pandas/tests/indexes/period/test_ops.py
@@ -1,14 +1,12 @@
 import numpy as np
-from datetime import timedelta, datetime
+from datetime import timedelta
 
 import pandas as pd
 import pandas.tslib as tslib
 import pandas.util.testing as tm
 import pandas.tseries.period as period
-from pandas.compat import lrange
 from pandas import (DatetimeIndex, PeriodIndex, period_range, Series, Period,
-                    _np_version_under1p10, Index, Timedelta, offsets,
-                    _np_version_under1p9)
+                    _np_version_under1p10, Index, Timedelta, offsets)
 
 from pandas.tests.test_base import Ops
 
@@ -285,57 +283,6 @@ Freq: Q-DEC"""
             idx = pd.period_range(start='2013-04-01', periods=30, freq=freq)
             self.assertEqual(idx.resolution, expected)
 
-    def test_union(self):
-        # union
-        rng1 = pd.period_range('1/1/2000', freq='D', periods=5)
-        other1 = pd.period_range('1/6/2000', freq='D', periods=5)
-        expected1 = pd.period_range('1/1/2000', freq='D', periods=10)
-
-        rng2 = pd.period_range('1/1/2000', freq='D', periods=5)
-        other2 = pd.period_range('1/4/2000', freq='D', periods=5)
-        expected2 = pd.period_range('1/1/2000', freq='D', periods=8)
-
-        rng3 = pd.period_range('1/1/2000', freq='D', periods=5)
-        other3 = pd.PeriodIndex([], freq='D')
-        expected3 = pd.period_range('1/1/2000', freq='D', periods=5)
-
-        rng4 = pd.period_range('2000-01-01 09:00', freq='H', periods=5)
-        other4 = pd.period_range('2000-01-02 09:00', freq='H', periods=5)
-        expected4 = pd.PeriodIndex(['2000-01-01 09:00', '2000-01-01 10:00',
-                                    '2000-01-01 11:00', '2000-01-01 12:00',
-                                    '2000-01-01 13:00', '2000-01-02 09:00',
-                                    '2000-01-02 10:00', '2000-01-02 11:00',
-                                    '2000-01-02 12:00', '2000-01-02 13:00'],
-                                   freq='H')
-
-        rng5 = pd.PeriodIndex(['2000-01-01 09:01', '2000-01-01 09:03',
-                               '2000-01-01 09:05'], freq='T')
-        other5 = pd.PeriodIndex(['2000-01-01 09:01', '2000-01-01 09:05'
-                                                     '2000-01-01 09:08'],
-                                freq='T')
-        expected5 = pd.PeriodIndex(['2000-01-01 09:01', '2000-01-01 09:03',
-                                    '2000-01-01 09:05', '2000-01-01 09:08'],
-                                   freq='T')
-
-        rng6 = pd.period_range('2000-01-01', freq='M', periods=7)
-        other6 = pd.period_range('2000-04-01', freq='M', periods=7)
-        expected6 = pd.period_range('2000-01-01', freq='M', periods=10)
-
-        rng7 = pd.period_range('2003-01-01', freq='A', periods=5)
-        other7 = pd.period_range('1998-01-01', freq='A', periods=8)
-        expected7 = pd.period_range('1998-01-01', freq='A', periods=10)
-
-        for rng, other, expected in [(rng1, other1, expected1),
-                                     (rng2, other2, expected2),
-                                     (rng3, other3, expected3), (rng4, other4,
-                                                                 expected4),
-                                     (rng5, other5, expected5), (rng6, other6,
-                                                                 expected6),
-                                     (rng7, other7, expected7)]:
-
-            result_union = rng.union(other)
-            tm.assert_index_equal(result_union, expected)
-
     def test_add_iadd(self):
         rng = pd.period_range('1/1/2000', freq='D', periods=5)
         other = pd.period_range('1/6/2000', freq='D', periods=5)
@@ -432,48 +379,6 @@ Freq: Q-DEC"""
         rng += 1
         tm.assert_index_equal(rng, expected)
 
-    def test_difference(self):
-        # diff
-        rng1 = pd.period_range('1/1/2000', freq='D', periods=5)
-        other1 = pd.period_range('1/6/2000', freq='D', periods=5)
-        expected1 = pd.period_range('1/1/2000', freq='D', periods=5)
-
-        rng2 = pd.period_range('1/1/2000', freq='D', periods=5)
-        other2 = pd.period_range('1/4/2000', freq='D', periods=5)
-        expected2 = pd.period_range('1/1/2000', freq='D', periods=3)
-
-        rng3 = pd.period_range('1/1/2000', freq='D', periods=5)
-        other3 = pd.PeriodIndex([], freq='D')
-        expected3 = pd.period_range('1/1/2000', freq='D', periods=5)
-
-        rng4 = pd.period_range('2000-01-01 09:00', freq='H', periods=5)
-        other4 = pd.period_range('2000-01-02 09:00', freq='H', periods=5)
-        expected4 = rng4
-
-        rng5 = pd.PeriodIndex(['2000-01-01 09:01', '2000-01-01 09:03',
-                               '2000-01-01 09:05'], freq='T')
-        other5 = pd.PeriodIndex(
-            ['2000-01-01 09:01', '2000-01-01 09:05'], freq='T')
-        expected5 = pd.PeriodIndex(['2000-01-01 09:03'], freq='T')
-
-        rng6 = pd.period_range('2000-01-01', freq='M', periods=7)
-        other6 = pd.period_range('2000-04-01', freq='M', periods=7)
-        expected6 = pd.period_range('2000-01-01', freq='M', periods=3)
-
-        rng7 = pd.period_range('2003-01-01', freq='A', periods=5)
-        other7 = pd.period_range('1998-01-01', freq='A', periods=8)
-        expected7 = pd.period_range('2006-01-01', freq='A', periods=2)
-
-        for rng, other, expected in [(rng1, other1, expected1),
-                                     (rng2, other2, expected2),
-                                     (rng3, other3, expected3),
-                                     (rng4, other4, expected4),
-                                     (rng5, other5, expected5),
-                                     (rng6, other6, expected6),
-                                     (rng7, other7, expected7), ]:
-            result_union = rng.difference(other)
-            tm.assert_index_equal(result_union, expected)
-
     def test_sub(self):
         rng = period_range('2007-01', periods=50)
 
@@ -833,98 +738,6 @@ Freq: Q-DEC"""
             self.assert_numpy_array_equal(indexer, exp, check_dtype=False)
             self.assertEqual(ordered.freq, 'D')
 
-    def test_getitem(self):
-        idx1 = pd.period_range('2011-01-01', '2011-01-31', freq='D',
-                               name='idx')
-
-        for idx in [idx1]:
-            result = idx[0]
-            self.assertEqual(result, pd.Period('2011-01-01', freq='D'))
-
-            result = idx[-1]
-            self.assertEqual(result, pd.Period('2011-01-31', freq='D'))
-
-            result = idx[0:5]
-            expected = pd.period_range('2011-01-01', '2011-01-05', freq='D',
-                                       name='idx')
-            self.assert_index_equal(result, expected)
-            self.assertEqual(result.freq, expected.freq)
-            self.assertEqual(result.freq, 'D')
-
-            result = idx[0:10:2]
-            expected = pd.PeriodIndex(['2011-01-01', '2011-01-03',
-                                       '2011-01-05',
-                                       '2011-01-07', '2011-01-09'],
-                                      freq='D', name='idx')
-            self.assert_index_equal(result, expected)
-            self.assertEqual(result.freq, expected.freq)
-            self.assertEqual(result.freq, 'D')
-
-            result = idx[-20:-5:3]
-            expected = pd.PeriodIndex(['2011-01-12', '2011-01-15',
-                                       '2011-01-18',
-                                       '2011-01-21', '2011-01-24'],
-                                      freq='D', name='idx')
-            self.assert_index_equal(result, expected)
-            self.assertEqual(result.freq, expected.freq)
-            self.assertEqual(result.freq, 'D')
-
-            result = idx[4::-1]
-            expected = PeriodIndex(['2011-01-05', '2011-01-04', '2011-01-03',
-                                    '2011-01-02', '2011-01-01'],
-                                   freq='D', name='idx')
-            self.assert_index_equal(result, expected)
-            self.assertEqual(result.freq, expected.freq)
-            self.assertEqual(result.freq, 'D')
-
-    def test_take(self):
-        # GH 10295
-        idx1 = pd.period_range('2011-01-01', '2011-01-31', freq='D',
-                               name='idx')
-
-        for idx in [idx1]:
-            result = idx.take([0])
-            self.assertEqual(result, pd.Period('2011-01-01', freq='D'))
-
-            result = idx.take([5])
-            self.assertEqual(result, pd.Period('2011-01-06', freq='D'))
-
-            result = idx.take([0, 1, 2])
-            expected = pd.period_range('2011-01-01', '2011-01-03', freq='D',
-                                       name='idx')
-            self.assert_index_equal(result, expected)
-            self.assertEqual(result.freq, 'D')
-            self.assertEqual(result.freq, expected.freq)
-
-            result = idx.take([0, 2, 4])
-            expected = pd.PeriodIndex(['2011-01-01', '2011-01-03',
-                                       '2011-01-05'], freq='D', name='idx')
-            self.assert_index_equal(result, expected)
-            self.assertEqual(result.freq, expected.freq)
-            self.assertEqual(result.freq, 'D')
-
-            result = idx.take([7, 4, 1])
-            expected = pd.PeriodIndex(['2011-01-08', '2011-01-05',
-                                       '2011-01-02'],
-                                      freq='D', name='idx')
-            self.assert_index_equal(result, expected)
-            self.assertEqual(result.freq, expected.freq)
-            self.assertEqual(result.freq, 'D')
-
-            result = idx.take([3, 2, 5])
-            expected = PeriodIndex(['2011-01-04', '2011-01-03', '2011-01-06'],
-                                   freq='D', name='idx')
-            self.assert_index_equal(result, expected)
-            self.assertEqual(result.freq, expected.freq)
-            self.assertEqual(result.freq, 'D')
-
-            result = idx.take([-3, 2, 5])
-            expected = PeriodIndex(['2011-01-29', '2011-01-03', '2011-01-06'],
-                                   freq='D', name='idx')
-            self.assert_index_equal(result, expected)
-            self.assertEqual(result.freq, expected.freq)
-            self.assertEqual(result.freq, 'D')
-
     def test_nat_new(self):
 
         idx = pd.period_range('2011-01', freq='M', periods=5, name='x')
@@ -1350,6 +1163,9 @@ class TestSeriesPeriod(tm.TestCase):
         tm.assert_series_equal(s2 - s, exp)
         tm.assert_series_equal(s - s2, -exp)
 
+
+class TestFramePeriod(tm.TestCase):
+
     def test_ops_frame_period(self):
         # GH 13043
         df = pd.DataFrame({'A': [pd.Period('2015-01', freq='M'),
@@ -1379,303 +1195,7 @@ class TestSeriesPeriod(tm.TestCase):
         tm.assert_frame_equal(df - df2, -exp)
 
 
-class TestPeriodIndex(tm.TestCase):
-
-    def setUp(self):
-        pass
-
-    def test_getitem_index(self):
-        idx = period_range('2007-01', periods=10, freq='M', name='x')
-
-        result = idx[[1, 3, 5]]
-        exp = pd.PeriodIndex(['2007-02', '2007-04', '2007-06'],
-                             freq='M', name='x')
-        tm.assert_index_equal(result, exp)
-
-        result = idx[[True, True, False, False, False,
-                      True, True, False, False, False]]
-        exp = pd.PeriodIndex(['2007-01', '2007-02', '2007-06', '2007-07'],
-                             freq='M', name='x')
-        tm.assert_index_equal(result, exp)
-
-    def test_getitem_partial(self):
-        rng = period_range('2007-01', periods=50, freq='M')
-        ts = Series(np.random.randn(len(rng)), rng)
-
-        self.assertRaises(KeyError, ts.__getitem__, '2006')
-
-        result = ts['2008']
-        self.assertTrue((result.index.year == 2008).all())
-
-        result = ts['2008':'2009']
-        self.assertEqual(len(result), 24)
-
-        result = ts['2008-1':'2009-12']
-        self.assertEqual(len(result), 24)
-
-        result = ts['2008Q1':'2009Q4']
-        self.assertEqual(len(result), 24)
-
-        result = ts[:'2009']
-        self.assertEqual(len(result), 36)
-
-        result = ts['2009':]
-        self.assertEqual(len(result), 50 - 24)
-
-        exp = result
-        result = ts[24:]
-        tm.assert_series_equal(exp, result)
-
-        ts = ts[10:].append(ts[10:])
-        self.assertRaisesRegexp(KeyError,
-                                "left slice bound for non-unique "
-                                "label: '2008'",
-                                ts.__getitem__, slice('2008', '2009'))
-
-    def test_getitem_datetime(self):
-        rng = period_range(start='2012-01-01', periods=10, freq='W-MON')
-        ts = Series(lrange(len(rng)), index=rng)
-
-        dt1 = datetime(2011, 10, 2)
-        dt4 = datetime(2012, 4, 20)
-
-        rs = ts[dt1:dt4]
-        tm.assert_series_equal(rs, ts)
-
-    def test_getitem_nat(self):
-        idx = pd.PeriodIndex(['2011-01', 'NaT', '2011-02'], freq='M')
-        self.assertEqual(idx[0], pd.Period('2011-01', freq='M'))
-        self.assertIs(idx[1], tslib.NaT)
-
-        s = pd.Series([0, 1, 2], index=idx)
-        self.assertEqual(s[pd.NaT], 1)
-
-        s = pd.Series(idx, index=idx)
-        self.assertEqual(s[pd.Period('2011-01', freq='M')],
-                         pd.Period('2011-01', freq='M'))
-        self.assertIs(s[pd.NaT], tslib.NaT)
-
-    def test_getitem_list_periods(self):
-        # GH 7710
-        rng = period_range(start='2012-01-01', periods=10, freq='D')
-        ts = Series(lrange(len(rng)), index=rng)
-        exp = ts.iloc[[1]]
-        tm.assert_series_equal(ts[[Period('2012-01-02', freq='D')]], exp)
-
-    def test_getitem_seconds(self):
-        # GH 6716
-        didx = DatetimeIndex(start='2013/01/01 09:00:00', freq='S',
-                             periods=4000)
-        pidx = PeriodIndex(start='2013/01/01 09:00:00', freq='S', periods=4000)
-
-        for idx in [didx, pidx]:
-            # getitem against index should raise ValueError
-            values = ['2014', '2013/02', '2013/01/02', '2013/02/01 9H',
-                      '2013/02/01 09:00']
-            for v in values:
-                if _np_version_under1p9:
-                    with tm.assertRaises(ValueError):
-                        idx[v]
-                else:
-                    # GH7116
-                    # these show deprecations as we are trying
-                    # to slice with non-integer indexers
-                    # with tm.assertRaises(IndexError):
-                    #    idx[v]
-                    continue
-
-            s = Series(np.random.rand(len(idx)), index=idx)
-            tm.assert_series_equal(s['2013/01/01 10:00'], s[3600:3660])
-            tm.assert_series_equal(s['2013/01/01 9H'], s[:3600])
-            for d in ['2013/01/01', '2013/01', '2013']:
-                tm.assert_series_equal(s[d], s)
-
-    def test_getitem_day(self):
-        # GH 6716
-        # Confirm DatetimeIndex and PeriodIndex works identically
-        didx = DatetimeIndex(start='2013/01/01', freq='D', periods=400)
-        pidx = PeriodIndex(start='2013/01/01', freq='D', periods=400)
-
-        for idx in [didx, pidx]:
-            # getitem against index should raise ValueError
-            values = ['2014', '2013/02', '2013/01/02', '2013/02/01 9H',
-                      '2013/02/01 09:00']
-            for v in values:
-
-                if _np_version_under1p9:
-                    with tm.assertRaises(ValueError):
-                        idx[v]
-                else:
-                    # GH7116
-                    # these show deprecations as we are trying
-                    # to slice with non-integer indexers
-                    # with tm.assertRaises(IndexError):
-                    #    idx[v]
-                    continue
-
-            s = Series(np.random.rand(len(idx)), index=idx)
-            tm.assert_series_equal(s['2013/01'], s[0:31])
-            tm.assert_series_equal(s['2013/02'], s[31:59])
-            tm.assert_series_equal(s['2014'], s[365:])
-
-            invalid = ['2013/02/01 9H', '2013/02/01 09:00']
-            for v in invalid:
-                with tm.assertRaises(KeyError):
-                    s[v]
-
-    def test_take(self):
-        index = PeriodIndex(start='1/1/10', end='12/31/12', freq='D',
-                            name='idx')
-        expected = PeriodIndex([datetime(2010, 1, 6), datetime(2010, 1, 7),
-                                datetime(2010, 1, 9), datetime(2010, 1, 13)],
-                               freq='D', name='idx')
-
-        taken1 = index.take([5, 6, 8, 12])
-        taken2 = index[[5, 6, 8, 12]]
-
-        for taken in [taken1, taken2]:
-            tm.assert_index_equal(taken, expected)
-            tm.assertIsInstance(taken, PeriodIndex)
-            self.assertEqual(taken.freq, index.freq)
-            self.assertEqual(taken.name, expected.name)
-
-    def test_take_fill_value(self):
-        # GH 12631
-        idx = pd.PeriodIndex(['2011-01-01', '2011-02-01', '2011-03-01'],
-                             name='xxx', freq='D')
-        result = idx.take(np.array([1, 0, -1]))
-        expected = pd.PeriodIndex(['2011-02-01', '2011-01-01', '2011-03-01'],
-                                  name='xxx', freq='D')
-        tm.assert_index_equal(result, expected)
-
-        # fill_value
-        result = idx.take(np.array([1, 0, -1]), fill_value=True)
-        expected = pd.PeriodIndex(['2011-02-01', '2011-01-01', 'NaT'],
-                                  name='xxx', freq='D')
-        tm.assert_index_equal(result, expected)
-
-        # allow_fill=False
-        result = idx.take(np.array([1, 0, -1]), allow_fill=False,
-                          fill_value=True)
-        expected = pd.PeriodIndex(['2011-02-01', '2011-01-01', '2011-03-01'],
-                                  name='xxx', freq='D')
-        tm.assert_index_equal(result, expected)
-
-        msg = ('When allow_fill=True and fill_value is not None, '
-               'all indices must be >= -1')
-        with tm.assertRaisesRegexp(ValueError, msg):
-            idx.take(np.array([1, 0, -2]), fill_value=True)
-        with tm.assertRaisesRegexp(ValueError, msg):
-            idx.take(np.array([1, 0, -5]), fill_value=True)
-
-        with tm.assertRaises(IndexError):
-            idx.take(np.array([1, -5]))
-
-    def test_get_loc_msg(self):
-        idx = period_range('2000-1-1', freq='A', periods=10)
-        bad_period = Period('2012', 'A')
-        self.assertRaises(KeyError, idx.get_loc, bad_period)
-
-        try:
-            idx.get_loc(bad_period)
-        except KeyError as inst:
-            self.assertEqual(inst.args[0], bad_period)
-
-    def test_get_loc_nat(self):
-        didx = DatetimeIndex(['2011-01-01', 'NaT', '2011-01-03'])
-        pidx = PeriodIndex(['2011-01-01', 'NaT', '2011-01-03'], freq='M')
-
-        # check DatetimeIndex compat
-        for idx in [didx, pidx]:
-            self.assertEqual(idx.get_loc(pd.NaT), 1)
-            self.assertEqual(idx.get_loc(None), 1)
-            self.assertEqual(idx.get_loc(float('nan')), 1)
-            self.assertEqual(idx.get_loc(np.nan), 1)
-
-
-class TestComparisons(tm.TestCase):
-
-    def setUp(self):
-        self.january1 = Period('2000-01', 'M')
-        self.january2 = Period('2000-01', 'M')
-        self.february = Period('2000-02', 'M')
-        self.march = Period('2000-03', 'M')
-        self.day = Period('2012-01-01', 'D')
-
-    def test_equal(self):
-        self.assertEqual(self.january1, self.january2)
-
-    def test_equal_Raises_Value(self):
-        with tm.assertRaises(period.IncompatibleFrequency):
-            self.january1 == self.day
-
-    def test_notEqual(self):
-        self.assertNotEqual(self.january1, 1)
-        self.assertNotEqual(self.january1, self.february)
-
-    def test_greater(self):
-        self.assertTrue(self.february > self.january1)
-
-    def test_greater_Raises_Value(self):
-        with tm.assertRaises(period.IncompatibleFrequency):
-            self.january1 > self.day
-
-    def test_greater_Raises_Type(self):
-        with tm.assertRaises(TypeError):
-            self.january1 > 1
-
-    def test_greaterEqual(self):
-        self.assertTrue(self.january1 >= self.january2)
-
-    def test_greaterEqual_Raises_Value(self):
-        with tm.assertRaises(period.IncompatibleFrequency):
-            self.january1 >= self.day
-
-        with tm.assertRaises(TypeError):
-            print(self.january1 >= 1)
-
-    def test_smallerEqual(self):
-        self.assertTrue(self.january1 <= self.january2)
-
-    def test_smallerEqual_Raises_Value(self):
-        with tm.assertRaises(period.IncompatibleFrequency):
-            self.january1 <= self.day
-
-    def test_smallerEqual_Raises_Type(self):
-        with tm.assertRaises(TypeError):
-            self.january1 <= 1
-
-    def test_smaller(self):
-        self.assertTrue(self.january1 < self.february)
-
-    def test_smaller_Raises_Value(self):
-        with tm.assertRaises(period.IncompatibleFrequency):
-            self.january1 < self.day
-
-    def test_smaller_Raises_Type(self):
-        with tm.assertRaises(TypeError):
-            self.january1 < 1
-
-    def test_sort(self):
-        periods = [self.march, self.january1, self.february]
-        correctPeriods = [self.january1, self.february, self.march]
-        self.assertEqual(sorted(periods), correctPeriods)
-
-    def test_period_nat_comp(self):
-        p_nat = Period('NaT', freq='D')
-        p = Period('2011-01-01', freq='D')
-
-        nat = pd.Timestamp('NaT')
-        t = pd.Timestamp('2011-01-01')
-        # confirm Period('NaT') work identical with Timestamp('NaT')
-        for left, right in [(p_nat, p), (p, p_nat), (p_nat, p_nat), (nat, t),
-                            (t, nat), (nat, nat)]:
-            self.assertEqual(left < right, False)
-            self.assertEqual(left > right, False)
-            self.assertEqual(left == right, False)
-            self.assertEqual(left != right, True)
-            self.assertEqual(left <= right, False)
-            self.assertEqual(left >= right, False)
+class TestPeriodIndexComparisons(tm.TestCase):
 
     def test_pi_pi_comp(self):
 
diff --git a/pandas/tests/indexes/period/test_setops.py b/pandas/tests/indexes/period/test_setops.py
index 06e15f917..d4f06bae8 100644
--- a/pandas/tests/indexes/period/test_setops.py
+++ b/pandas/tests/indexes/period/test_setops.py
@@ -43,6 +43,57 @@ class TestPeriodIndex(tm.TestCase):
         tm.assert_index_equal(res, expected)
 
     def test_union(self):
+        # union
+        rng1 = pd.period_range('1/1/2000', freq='D', periods=5)
+        other1 = pd.period_range('1/6/2000', freq='D', periods=5)
+        expected1 = pd.period_range('1/1/2000', freq='D', periods=10)
+
+        rng2 = pd.period_range('1/1/2000', freq='D', periods=5)
+        other2 = pd.period_range('1/4/2000', freq='D', periods=5)
+        expected2 = pd.period_range('1/1/2000', freq='D', periods=8)
+
+        rng3 = pd.period_range('1/1/2000', freq='D', periods=5)
+        other3 = pd.PeriodIndex([], freq='D')
+        expected3 = pd.period_range('1/1/2000', freq='D', periods=5)
+
+        rng4 = pd.period_range('2000-01-01 09:00', freq='H', periods=5)
+        other4 = pd.period_range('2000-01-02 09:00', freq='H', periods=5)
+        expected4 = pd.PeriodIndex(['2000-01-01 09:00', '2000-01-01 10:00',
+                                    '2000-01-01 11:00', '2000-01-01 12:00',
+                                    '2000-01-01 13:00', '2000-01-02 09:00',
+                                    '2000-01-02 10:00', '2000-01-02 11:00',
+                                    '2000-01-02 12:00', '2000-01-02 13:00'],
+                                   freq='H')
+
+        rng5 = pd.PeriodIndex(['2000-01-01 09:01', '2000-01-01 09:03',
+                               '2000-01-01 09:05'], freq='T')
+        other5 = pd.PeriodIndex(['2000-01-01 09:01', '2000-01-01 09:05'
+                                                     '2000-01-01 09:08'],
+                                freq='T')
+        expected5 = pd.PeriodIndex(['2000-01-01 09:01', '2000-01-01 09:03',
+                                    '2000-01-01 09:05', '2000-01-01 09:08'],
+                                   freq='T')
+
+        rng6 = pd.period_range('2000-01-01', freq='M', periods=7)
+        other6 = pd.period_range('2000-04-01', freq='M', periods=7)
+        expected6 = pd.period_range('2000-01-01', freq='M', periods=10)
+
+        rng7 = pd.period_range('2003-01-01', freq='A', periods=5)
+        other7 = pd.period_range('1998-01-01', freq='A', periods=8)
+        expected7 = pd.period_range('1998-01-01', freq='A', periods=10)
+
+        for rng, other, expected in [(rng1, other1, expected1),
+                                     (rng2, other2, expected2),
+                                     (rng3, other3, expected3), (rng4, other4,
+                                                                 expected4),
+                                     (rng5, other5, expected5), (rng6, other6,
+                                                                 expected6),
+                                     (rng7, other7, expected7)]:
+
+            result_union = rng.union(other)
+            tm.assert_index_equal(result_union, expected)
+
+    def test_union_misc(self):
         index = period_range('1/1/2000', '1/20/2000', freq='D')
 
         result = index[:-5].union(index[10:])
@@ -155,3 +206,45 @@ class TestPeriodIndex(tm.TestCase):
 
         result = rng.intersection(rng[0:0])
         self.assertEqual(len(result), 0)
+
+    def test_difference(self):
+        # diff
+        rng1 = pd.period_range('1/1/2000', freq='D', periods=5)
+        other1 = pd.period_range('1/6/2000', freq='D', periods=5)
+        expected1 = pd.period_range('1/1/2000', freq='D', periods=5)
+
+        rng2 = pd.period_range('1/1/2000', freq='D', periods=5)
+        other2 = pd.period_range('1/4/2000', freq='D', periods=5)
+        expected2 = pd.period_range('1/1/2000', freq='D', periods=3)
+
+        rng3 = pd.period_range('1/1/2000', freq='D', periods=5)
+        other3 = pd.PeriodIndex([], freq='D')
+        expected3 = pd.period_range('1/1/2000', freq='D', periods=5)
+
+        rng4 = pd.period_range('2000-01-01 09:00', freq='H', periods=5)
+        other4 = pd.period_range('2000-01-02 09:00', freq='H', periods=5)
+        expected4 = rng4
+
+        rng5 = pd.PeriodIndex(['2000-01-01 09:01', '2000-01-01 09:03',
+                               '2000-01-01 09:05'], freq='T')
+        other5 = pd.PeriodIndex(
+            ['2000-01-01 09:01', '2000-01-01 09:05'], freq='T')
+        expected5 = pd.PeriodIndex(['2000-01-01 09:03'], freq='T')
+
+        rng6 = pd.period_range('2000-01-01', freq='M', periods=7)
+        other6 = pd.period_range('2000-04-01', freq='M', periods=7)
+        expected6 = pd.period_range('2000-01-01', freq='M', periods=3)
+
+        rng7 = pd.period_range('2003-01-01', freq='A', periods=5)
+        other7 = pd.period_range('1998-01-01', freq='A', periods=8)
+        expected7 = pd.period_range('2006-01-01', freq='A', periods=2)
+
+        for rng, other, expected in [(rng1, other1, expected1),
+                                     (rng2, other2, expected2),
+                                     (rng3, other3, expected3),
+                                     (rng4, other4, expected4),
+                                     (rng5, other5, expected5),
+                                     (rng6, other6, expected6),
+                                     (rng7, other7, expected7), ]:
+            result_union = rng.difference(other)
+            tm.assert_index_equal(result_union, expected)
diff --git a/pandas/tests/scalar/test_period.py b/pandas/tests/scalar/test_period.py
index c94a7c62a..ffe00a4a6 100644
--- a/pandas/tests/scalar/test_period.py
+++ b/pandas/tests/scalar/test_period.py
@@ -7,12 +7,28 @@ import pandas.tseries.period as period
 from pandas.compat import text_type, iteritems
 from pandas.compat.numpy import np_datetime64_compat
 from pandas import Period, Timestamp, tslib, offsets, _period
-from pandas.tseries.frequencies import DAYS, MONTHS, _period_code_map
+from pandas.tseries.frequencies import DAYS, MONTHS
 
 
 class TestPeriodProperties(tm.TestCase):
     "Test properties such as year, month, weekday, etc...."
 
+    def test_is_leap_year(self):
+        # GH 13727
+        for freq in ['A', 'M', 'D', 'H']:
+            p = Period('2000-01-01 00:00:00', freq=freq)
+            self.assertTrue(p.is_leap_year)
+            self.assertIsInstance(p.is_leap_year, bool)
+
+            p = Period('1999-01-01 00:00:00', freq=freq)
+            self.assertFalse(p.is_leap_year)
+
+            p = Period('2004-01-01 00:00:00', freq=freq)
+            self.assertTrue(p.is_leap_year)
+
+            p = Period('2100-01-01 00:00:00', freq=freq)
+            self.assertFalse(p.is_leap_year)
+
     def test_quarterly_negative_ordinals(self):
         p = Period(ordinal=-1, freq='Q-DEC')
         self.assertEqual(p.year, 1969)
@@ -273,7 +289,7 @@ class TestPeriodProperties(tm.TestCase):
         self.assertEqual(p.to_timestamp(how='S'), pd.Timestamp('2011-01-01'))
         self.assertEqual(p.to_timestamp(how='E'), pd.Timestamp('2011-03-31'))
 
-    def test_period_constructor(self):
+    def test_construction(self):
         i1 = Period('1/1/2005', freq='M')
         i2 = Period('Jan 2005')
 
@@ -299,6 +315,41 @@ class TestPeriodProperties(tm.TestCase):
         self.assertEqual(i1, i2)
         self.assertEqual(i1, i3)
 
+        i1 = Period('1982', freq='min')
+        i2 = Period('1982', freq='MIN')
+        self.assertEqual(i1, i2)
+        i2 = Period('1982', freq=('Min', 1))
+        self.assertEqual(i1, i2)
+
+        i1 = Period(year=2005, month=3, day=1, freq='D')
+        i2 = Period('3/1/2005', freq='D')
+        self.assertEqual(i1, i2)
+
+        i3 = Period(year=2005, month=3, day=1, freq='d')
+        self.assertEqual(i1, i3)
+
+        i1 = Period('2007-01-01 09:00:00.001')
+        expected = Period(datetime(2007, 1, 1, 9, 0, 0, 1000), freq='L')
+        self.assertEqual(i1, expected)
+
+        expected = Period(np_datetime64_compat(
+            '2007-01-01 09:00:00.001Z'), freq='L')
+        self.assertEqual(i1, expected)
+
+        i1 = Period('2007-01-01 09:00:00.00101')
+        expected = Period(datetime(2007, 1, 1, 9, 0, 0, 1010), freq='U')
+        self.assertEqual(i1, expected)
+
+        expected = Period(np_datetime64_compat('2007-01-01 09:00:00.00101Z'),
+                          freq='U')
+        self.assertEqual(i1, expected)
+
+        self.assertRaises(ValueError, Period, ordinal=200701)
+
+        self.assertRaises(ValueError, Period, '2007-1-1', freq='X')
+
+    def test_construction_bday(self):
+
         # Biz day construction, roll forward if non-weekday
         i1 = Period('3/10/12', freq='B')
         i2 = Period('3/10/12', freq='D')
@@ -311,6 +362,12 @@ class TestPeriodProperties(tm.TestCase):
         i3 = Period('3/10/12', freq='b')
         self.assertEqual(i1, i3)
 
+        i1 = Period(year=2012, month=3, day=10, freq='B')
+        i2 = Period('3/12/12', freq='B')
+        self.assertEqual(i1, i2)
+
+    def test_construction_quarter(self):
+
         i1 = Period(year=2005, quarter=1, freq='Q')
         i2 = Period('1/1/2005', freq='Q')
         self.assertEqual(i1, i2)
@@ -319,17 +376,6 @@ class TestPeriodProperties(tm.TestCase):
         i2 = Period('9/1/2005', freq='Q')
         self.assertEqual(i1, i2)
 
-        i1 = Period(year=2005, month=3, day=1, freq='D')
-        i2 = Period('3/1/2005', freq='D')
-        self.assertEqual(i1, i2)
-
-        i3 = Period(year=2005, month=3, day=1, freq='d')
-        self.assertEqual(i1, i3)
-
-        i1 = Period(year=2012, month=3, day=10, freq='B')
-        i2 = Period('3/12/12', freq='B')
-        self.assertEqual(i1, i2)
-
         i1 = Period('2005Q1')
         i2 = Period(year=2005, quarter=1, freq='Q')
         i3 = Period('2005q1')
@@ -356,11 +402,7 @@ class TestPeriodProperties(tm.TestCase):
         lower = Period('4q1984')
         self.assertEqual(i1, lower)
 
-        i1 = Period('1982', freq='min')
-        i2 = Period('1982', freq='MIN')
-        self.assertEqual(i1, i2)
-        i2 = Period('1982', freq=('Min', 1))
-        self.assertEqual(i1, i2)
+    def test_construction_month(self):
 
         expected = Period('2007-01', freq='M')
         i1 = Period('200701', freq='M')
@@ -389,26 +431,6 @@ class TestPeriodProperties(tm.TestCase):
         self.assertEqual(i1, i4)
         self.assertEqual(i1, i5)
 
-        i1 = Period('2007-01-01 09:00:00.001')
-        expected = Period(datetime(2007, 1, 1, 9, 0, 0, 1000), freq='L')
-        self.assertEqual(i1, expected)
-
-        expected = Period(np_datetime64_compat(
-            '2007-01-01 09:00:00.001Z'), freq='L')
-        self.assertEqual(i1, expected)
-
-        i1 = Period('2007-01-01 09:00:00.00101')
-        expected = Period(datetime(2007, 1, 1, 9, 0, 0, 1010), freq='U')
-        self.assertEqual(i1, expected)
-
-        expected = Period(np_datetime64_compat('2007-01-01 09:00:00.00101Z'),
-                          freq='U')
-        self.assertEqual(i1, expected)
-
-        self.assertRaises(ValueError, Period, ordinal=200701)
-
-        self.assertRaises(ValueError, Period, '2007-1-1', freq='X')
-
     def test_period_constructor_offsets(self):
         self.assertEqual(Period('1/1/2005', freq=offsets.MonthEnd()),
                          Period('1/1/2005', freq='M'))
@@ -894,21 +916,6 @@ class TestPeriodProperties(tm.TestCase):
         p = Period('2007-01-01 07:10:15.123400')
         self.assertEqual(p.freq, 'U')
 
-    def test_asfreq_MS(self):
-        initial = Period("2013")
-
-        self.assertEqual(initial.asfreq(freq="M", how="S"),
-                         Period('2013-01', 'M'))
-
-        msg = pd.tseries.frequencies._INVALID_FREQ_ERROR
-        with self.assertRaisesRegexp(ValueError, msg):
-            initial.asfreq(freq="MS", how="S")
-
-        with tm.assertRaisesRegexp(ValueError, msg):
-            pd.Period('2013-01', 'MS')
-
-        self.assertTrue(_period_code_map.get("MS") is None)
-
     def test_badinput(self):
         self.assertRaises(ValueError, Period, '-2000', 'A')
         self.assertRaises(tslib.DateParseError, Period, '0', 'A')
@@ -945,722 +952,89 @@ class TestPeriodField(tm.TestCase):
                           np.empty(1), 0)
 
 
-class TestFreqConversion(tm.TestCase):
-    "Test frequency conversion of date objects"
-
-    def test_asfreq_corner(self):
-        val = Period(freq='A', year=2007)
-        result1 = val.asfreq('5t')
-        result2 = val.asfreq('t')
-        expected = Period('2007-12-31 23:59', freq='t')
-        self.assertEqual(result1.ordinal, expected.ordinal)
-        self.assertEqual(result1.freqstr, '5T')
-        self.assertEqual(result2.ordinal, expected.ordinal)
-        self.assertEqual(result2.freqstr, 'T')
-
-    def test_conv_annual(self):
-        # frequency conversion tests: from Annual Frequency
-
-        ival_A = Period(freq='A', year=2007)
-
-        ival_AJAN = Period(freq="A-JAN", year=2007)
-        ival_AJUN = Period(freq="A-JUN", year=2007)
-        ival_ANOV = Period(freq="A-NOV", year=2007)
-
-        ival_A_to_Q_start = Period(freq='Q', year=2007, quarter=1)
-        ival_A_to_Q_end = Period(freq='Q', year=2007, quarter=4)
-        ival_A_to_M_start = Period(freq='M', year=2007, month=1)
-        ival_A_to_M_end = Period(freq='M', year=2007, month=12)
-        ival_A_to_W_start = Period(freq='W', year=2007, month=1, day=1)
-        ival_A_to_W_end = Period(freq='W', year=2007, month=12, day=31)
-        ival_A_to_B_start = Period(freq='B', year=2007, month=1, day=1)
-        ival_A_to_B_end = Period(freq='B', year=2007, month=12, day=31)
-        ival_A_to_D_start = Period(freq='D', year=2007, month=1, day=1)
-        ival_A_to_D_end = Period(freq='D', year=2007, month=12, day=31)
-        ival_A_to_H_start = Period(freq='H', year=2007, month=1, day=1, hour=0)
-        ival_A_to_H_end = Period(freq='H', year=2007, month=12, day=31,
-                                 hour=23)
-        ival_A_to_T_start = Period(freq='Min', year=2007, month=1, day=1,
-                                   hour=0, minute=0)
-        ival_A_to_T_end = Period(freq='Min', year=2007, month=12, day=31,
-                                 hour=23, minute=59)
-        ival_A_to_S_start = Period(freq='S', year=2007, month=1, day=1, hour=0,
-                                   minute=0, second=0)
-        ival_A_to_S_end = Period(freq='S', year=2007, month=12, day=31,
-                                 hour=23, minute=59, second=59)
-
-        ival_AJAN_to_D_end = Period(freq='D', year=2007, month=1, day=31)
-        ival_AJAN_to_D_start = Period(freq='D', year=2006, month=2, day=1)
-        ival_AJUN_to_D_end = Period(freq='D', year=2007, month=6, day=30)
-        ival_AJUN_to_D_start = Period(freq='D', year=2006, month=7, day=1)
-        ival_ANOV_to_D_end = Period(freq='D', year=2007, month=11, day=30)
-        ival_ANOV_to_D_start = Period(freq='D', year=2006, month=12, day=1)
-
-        self.assertEqual(ival_A.asfreq('Q', 'S'), ival_A_to_Q_start)
-        self.assertEqual(ival_A.asfreq('Q', 'e'), ival_A_to_Q_end)
-        self.assertEqual(ival_A.asfreq('M', 's'), ival_A_to_M_start)
-        self.assertEqual(ival_A.asfreq('M', 'E'), ival_A_to_M_end)
-        self.assertEqual(ival_A.asfreq('W', 'S'), ival_A_to_W_start)
-        self.assertEqual(ival_A.asfreq('W', 'E'), ival_A_to_W_end)
-        self.assertEqual(ival_A.asfreq('B', 'S'), ival_A_to_B_start)
-        self.assertEqual(ival_A.asfreq('B', 'E'), ival_A_to_B_end)
-        self.assertEqual(ival_A.asfreq('D', 'S'), ival_A_to_D_start)
-        self.assertEqual(ival_A.asfreq('D', 'E'), ival_A_to_D_end)
-        self.assertEqual(ival_A.asfreq('H', 'S'), ival_A_to_H_start)
-        self.assertEqual(ival_A.asfreq('H', 'E'), ival_A_to_H_end)
-        self.assertEqual(ival_A.asfreq('min', 'S'), ival_A_to_T_start)
-        self.assertEqual(ival_A.asfreq('min', 'E'), ival_A_to_T_end)
-        self.assertEqual(ival_A.asfreq('T', 'S'), ival_A_to_T_start)
-        self.assertEqual(ival_A.asfreq('T', 'E'), ival_A_to_T_end)
-        self.assertEqual(ival_A.asfreq('S', 'S'), ival_A_to_S_start)
-        self.assertEqual(ival_A.asfreq('S', 'E'), ival_A_to_S_end)
-
-        self.assertEqual(ival_AJAN.asfreq('D', 'S'), ival_AJAN_to_D_start)
-        self.assertEqual(ival_AJAN.asfreq('D', 'E'), ival_AJAN_to_D_end)
-
-        self.assertEqual(ival_AJUN.asfreq('D', 'S'), ival_AJUN_to_D_start)
-        self.assertEqual(ival_AJUN.asfreq('D', 'E'), ival_AJUN_to_D_end)
-
-        self.assertEqual(ival_ANOV.asfreq('D', 'S'), ival_ANOV_to_D_start)
-        self.assertEqual(ival_ANOV.asfreq('D', 'E'), ival_ANOV_to_D_end)
-
-        self.assertEqual(ival_A.asfreq('A'), ival_A)
-
-    def test_conv_quarterly(self):
-        # frequency conversion tests: from Quarterly Frequency
-
-        ival_Q = Period(freq='Q', year=2007, quarter=1)
-        ival_Q_end_of_year = Period(freq='Q', year=2007, quarter=4)
-
-        ival_QEJAN = Period(freq="Q-JAN", year=2007, quarter=1)
-        ival_QEJUN = Period(freq="Q-JUN", year=2007, quarter=1)
-
-        ival_Q_to_A = Period(freq='A', year=2007)
-        ival_Q_to_M_start = Period(freq='M', year=2007, month=1)
-        ival_Q_to_M_end = Period(freq='M', year=2007, month=3)
-        ival_Q_to_W_start = Period(freq='W', year=2007, month=1, day=1)
-        ival_Q_to_W_end = Period(freq='W', year=2007, month=3, day=31)
-        ival_Q_to_B_start = Period(freq='B', year=2007, month=1, day=1)
-        ival_Q_to_B_end = Period(freq='B', year=2007, month=3, day=30)
-        ival_Q_to_D_start = Period(freq='D', year=2007, month=1, day=1)
-        ival_Q_to_D_end = Period(freq='D', year=2007, month=3, day=31)
-        ival_Q_to_H_start = Period(freq='H', year=2007, month=1, day=1, hour=0)
-        ival_Q_to_H_end = Period(freq='H', year=2007, month=3, day=31, hour=23)
-        ival_Q_to_T_start = Period(freq='Min', year=2007, month=1, day=1,
-                                   hour=0, minute=0)
-        ival_Q_to_T_end = Period(freq='Min', year=2007, month=3, day=31,
-                                 hour=23, minute=59)
-        ival_Q_to_S_start = Period(freq='S', year=2007, month=1, day=1, hour=0,
-                                   minute=0, second=0)
-        ival_Q_to_S_end = Period(freq='S', year=2007, month=3, day=31, hour=23,
-                                 minute=59, second=59)
-
-        ival_QEJAN_to_D_start = Period(freq='D', year=2006, month=2, day=1)
-        ival_QEJAN_to_D_end = Period(freq='D', year=2006, month=4, day=30)
-
-        ival_QEJUN_to_D_start = Period(freq='D', year=2006, month=7, day=1)
-        ival_QEJUN_to_D_end = Period(freq='D', year=2006, month=9, day=30)
-
-        self.assertEqual(ival_Q.asfreq('A'), ival_Q_to_A)
-        self.assertEqual(ival_Q_end_of_year.asfreq('A'), ival_Q_to_A)
-
-        self.assertEqual(ival_Q.asfreq('M', 'S'), ival_Q_to_M_start)
-        self.assertEqual(ival_Q.asfreq('M', 'E'), ival_Q_to_M_end)
-        self.assertEqual(ival_Q.asfreq('W', 'S'), ival_Q_to_W_start)
-        self.assertEqual(ival_Q.asfreq('W', 'E'), ival_Q_to_W_end)
-        self.assertEqual(ival_Q.asfreq('B', 'S'), ival_Q_to_B_start)
-        self.assertEqual(ival_Q.asfreq('B', 'E'), ival_Q_to_B_end)
-        self.assertEqual(ival_Q.asfreq('D', 'S'), ival_Q_to_D_start)
-        self.assertEqual(ival_Q.asfreq('D', 'E'), ival_Q_to_D_end)
-        self.assertEqual(ival_Q.asfreq('H', 'S'), ival_Q_to_H_start)
-        self.assertEqual(ival_Q.asfreq('H', 'E'), ival_Q_to_H_end)
-        self.assertEqual(ival_Q.asfreq('Min', 'S'), ival_Q_to_T_start)
-        self.assertEqual(ival_Q.asfreq('Min', 'E'), ival_Q_to_T_end)
-        self.assertEqual(ival_Q.asfreq('S', 'S'), ival_Q_to_S_start)
-        self.assertEqual(ival_Q.asfreq('S', 'E'), ival_Q_to_S_end)
-
-        self.assertEqual(ival_QEJAN.asfreq('D', 'S'), ival_QEJAN_to_D_start)
-        self.assertEqual(ival_QEJAN.asfreq('D', 'E'), ival_QEJAN_to_D_end)
-        self.assertEqual(ival_QEJUN.asfreq('D', 'S'), ival_QEJUN_to_D_start)
-        self.assertEqual(ival_QEJUN.asfreq('D', 'E'), ival_QEJUN_to_D_end)
-
-        self.assertEqual(ival_Q.asfreq('Q'), ival_Q)
-
-    def test_conv_monthly(self):
-        # frequency conversion tests: from Monthly Frequency
-
-        ival_M = Period(freq='M', year=2007, month=1)
-        ival_M_end_of_year = Period(freq='M', year=2007, month=12)
-        ival_M_end_of_quarter = Period(freq='M', year=2007, month=3)
-        ival_M_to_A = Period(freq='A', year=2007)
-        ival_M_to_Q = Period(freq='Q', year=2007, quarter=1)
-        ival_M_to_W_start = Period(freq='W', year=2007, month=1, day=1)
-        ival_M_to_W_end = Period(freq='W', year=2007, month=1, day=31)
-        ival_M_to_B_start = Period(freq='B', year=2007, month=1, day=1)
-        ival_M_to_B_end = Period(freq='B', year=2007, month=1, day=31)
-        ival_M_to_D_start = Period(freq='D', year=2007, month=1, day=1)
-        ival_M_to_D_end = Period(freq='D', year=2007, month=1, day=31)
-        ival_M_to_H_start = Period(freq='H', year=2007, month=1, day=1, hour=0)
-        ival_M_to_H_end = Period(freq='H', year=2007, month=1, day=31, hour=23)
-        ival_M_to_T_start = Period(freq='Min', year=2007, month=1, day=1,
-                                   hour=0, minute=0)
-        ival_M_to_T_end = Period(freq='Min', year=2007, month=1, day=31,
-                                 hour=23, minute=59)
-        ival_M_to_S_start = Period(freq='S', year=2007, month=1, day=1, hour=0,
-                                   minute=0, second=0)
-        ival_M_to_S_end = Period(freq='S', year=2007, month=1, day=31, hour=23,
-                                 minute=59, second=59)
-
-        self.assertEqual(ival_M.asfreq('A'), ival_M_to_A)
-        self.assertEqual(ival_M_end_of_year.asfreq('A'), ival_M_to_A)
-        self.assertEqual(ival_M.asfreq('Q'), ival_M_to_Q)
-        self.assertEqual(ival_M_end_of_quarter.asfreq('Q'), ival_M_to_Q)
-
-        self.assertEqual(ival_M.asfreq('W', 'S'), ival_M_to_W_start)
-        self.assertEqual(ival_M.asfreq('W', 'E'), ival_M_to_W_end)
-        self.assertEqual(ival_M.asfreq('B', 'S'), ival_M_to_B_start)
-        self.assertEqual(ival_M.asfreq('B', 'E'), ival_M_to_B_end)
-        self.assertEqual(ival_M.asfreq('D', 'S'), ival_M_to_D_start)
-        self.assertEqual(ival_M.asfreq('D', 'E'), ival_M_to_D_end)
-        self.assertEqual(ival_M.asfreq('H', 'S'), ival_M_to_H_start)
-        self.assertEqual(ival_M.asfreq('H', 'E'), ival_M_to_H_end)
-        self.assertEqual(ival_M.asfreq('Min', 'S'), ival_M_to_T_start)
-        self.assertEqual(ival_M.asfreq('Min', 'E'), ival_M_to_T_end)
-        self.assertEqual(ival_M.asfreq('S', 'S'), ival_M_to_S_start)
-        self.assertEqual(ival_M.asfreq('S', 'E'), ival_M_to_S_end)
-
-        self.assertEqual(ival_M.asfreq('M'), ival_M)
-
-    def test_conv_weekly(self):
-        # frequency conversion tests: from Weekly Frequency
-        ival_W = Period(freq='W', year=2007, month=1, day=1)
-
-        ival_WSUN = Period(freq='W', year=2007, month=1, day=7)
-        ival_WSAT = Period(freq='W-SAT', year=2007, month=1, day=6)
-        ival_WFRI = Period(freq='W-FRI', year=2007, month=1, day=5)
-        ival_WTHU = Period(freq='W-THU', year=2007, month=1, day=4)
-        ival_WWED = Period(freq='W-WED', year=2007, month=1, day=3)
-        ival_WTUE = Period(freq='W-TUE', year=2007, month=1, day=2)
-        ival_WMON = Period(freq='W-MON', year=2007, month=1, day=1)
-
-        ival_WSUN_to_D_start = Period(freq='D', year=2007, month=1, day=1)
-        ival_WSUN_to_D_end = Period(freq='D', year=2007, month=1, day=7)
-        ival_WSAT_to_D_start = Period(freq='D', year=2006, month=12, day=31)
-        ival_WSAT_to_D_end = Period(freq='D', year=2007, month=1, day=6)
-        ival_WFRI_to_D_start = Period(freq='D', year=2006, month=12, day=30)
-        ival_WFRI_to_D_end = Period(freq='D', year=2007, month=1, day=5)
-        ival_WTHU_to_D_start = Period(freq='D', year=2006, month=12, day=29)
-        ival_WTHU_to_D_end = Period(freq='D', year=2007, month=1, day=4)
-        ival_WWED_to_D_start = Period(freq='D', year=2006, month=12, day=28)
-        ival_WWED_to_D_end = Period(freq='D', year=2007, month=1, day=3)
-        ival_WTUE_to_D_start = Period(freq='D', year=2006, month=12, day=27)
-        ival_WTUE_to_D_end = Period(freq='D', year=2007, month=1, day=2)
-        ival_WMON_to_D_start = Period(freq='D', year=2006, month=12, day=26)
-        ival_WMON_to_D_end = Period(freq='D', year=2007, month=1, day=1)
-
-        ival_W_end_of_year = Period(freq='W', year=2007, month=12, day=31)
-        ival_W_end_of_quarter = Period(freq='W', year=2007, month=3, day=31)
-        ival_W_end_of_month = Period(freq='W', year=2007, month=1, day=31)
-        ival_W_to_A = Period(freq='A', year=2007)
-        ival_W_to_Q = Period(freq='Q', year=2007, quarter=1)
-        ival_W_to_M = Period(freq='M', year=2007, month=1)
-
-        if Period(freq='D', year=2007, month=12, day=31).weekday == 6:
-            ival_W_to_A_end_of_year = Period(freq='A', year=2007)
-        else:
-            ival_W_to_A_end_of_year = Period(freq='A', year=2008)
-
-        if Period(freq='D', year=2007, month=3, day=31).weekday == 6:
-            ival_W_to_Q_end_of_quarter = Period(freq='Q', year=2007, quarter=1)
-        else:
-            ival_W_to_Q_end_of_quarter = Period(freq='Q', year=2007, quarter=2)
-
-        if Period(freq='D', year=2007, month=1, day=31).weekday == 6:
-            ival_W_to_M_end_of_month = Period(freq='M', year=2007, month=1)
-        else:
-            ival_W_to_M_end_of_month = Period(freq='M', year=2007, month=2)
-
-        ival_W_to_B_start = Period(freq='B', year=2007, month=1, day=1)
-        ival_W_to_B_end = Period(freq='B', year=2007, month=1, day=5)
-        ival_W_to_D_start = Period(freq='D', year=2007, month=1, day=1)
-        ival_W_to_D_end = Period(freq='D', year=2007, month=1, day=7)
-        ival_W_to_H_start = Period(freq='H', year=2007, month=1, day=1, hour=0)
-        ival_W_to_H_end = Period(freq='H', year=2007, month=1, day=7, hour=23)
-        ival_W_to_T_start = Period(freq='Min', year=2007, month=1, day=1,
-                                   hour=0, minute=0)
-        ival_W_to_T_end = Period(freq='Min', year=2007, month=1, day=7,
-                                 hour=23, minute=59)
-        ival_W_to_S_start = Period(freq='S', year=2007, month=1, day=1, hour=0,
-                                   minute=0, second=0)
-        ival_W_to_S_end = Period(freq='S', year=2007, month=1, day=7, hour=23,
-                                 minute=59, second=59)
-
-        self.assertEqual(ival_W.asfreq('A'), ival_W_to_A)
-        self.assertEqual(ival_W_end_of_year.asfreq('A'),
-                         ival_W_to_A_end_of_year)
-        self.assertEqual(ival_W.asfreq('Q'), ival_W_to_Q)
-        self.assertEqual(ival_W_end_of_quarter.asfreq('Q'),
-                         ival_W_to_Q_end_of_quarter)
-        self.assertEqual(ival_W.asfreq('M'), ival_W_to_M)
-        self.assertEqual(ival_W_end_of_month.asfreq('M'),
-                         ival_W_to_M_end_of_month)
-
-        self.assertEqual(ival_W.asfreq('B', 'S'), ival_W_to_B_start)
-        self.assertEqual(ival_W.asfreq('B', 'E'), ival_W_to_B_end)
-
-        self.assertEqual(ival_W.asfreq('D', 'S'), ival_W_to_D_start)
-        self.assertEqual(ival_W.asfreq('D', 'E'), ival_W_to_D_end)
-
-        self.assertEqual(ival_WSUN.asfreq('D', 'S'), ival_WSUN_to_D_start)
-        self.assertEqual(ival_WSUN.asfreq('D', 'E'), ival_WSUN_to_D_end)
-        self.assertEqual(ival_WSAT.asfreq('D', 'S'), ival_WSAT_to_D_start)
-        self.assertEqual(ival_WSAT.asfreq('D', 'E'), ival_WSAT_to_D_end)
-        self.assertEqual(ival_WFRI.asfreq('D', 'S'), ival_WFRI_to_D_start)
-        self.assertEqual(ival_WFRI.asfreq('D', 'E'), ival_WFRI_to_D_end)
-        self.assertEqual(ival_WTHU.asfreq('D', 'S'), ival_WTHU_to_D_start)
-        self.assertEqual(ival_WTHU.asfreq('D', 'E'), ival_WTHU_to_D_end)
-        self.assertEqual(ival_WWED.asfreq('D', 'S'), ival_WWED_to_D_start)
-        self.assertEqual(ival_WWED.asfreq('D', 'E'), ival_WWED_to_D_end)
-        self.assertEqual(ival_WTUE.asfreq('D', 'S'), ival_WTUE_to_D_start)
-        self.assertEqual(ival_WTUE.asfreq('D', 'E'), ival_WTUE_to_D_end)
-        self.assertEqual(ival_WMON.asfreq('D', 'S'), ival_WMON_to_D_start)
-        self.assertEqual(ival_WMON.asfreq('D', 'E'), ival_WMON_to_D_end)
-
-        self.assertEqual(ival_W.asfreq('H', 'S'), ival_W_to_H_start)
-        self.assertEqual(ival_W.asfreq('H', 'E'), ival_W_to_H_end)
-        self.assertEqual(ival_W.asfreq('Min', 'S'), ival_W_to_T_start)
-        self.assertEqual(ival_W.asfreq('Min', 'E'), ival_W_to_T_end)
-        self.assertEqual(ival_W.asfreq('S', 'S'), ival_W_to_S_start)
-        self.assertEqual(ival_W.asfreq('S', 'E'), ival_W_to_S_end)
-
-        self.assertEqual(ival_W.asfreq('W'), ival_W)
+class TestComparisons(tm.TestCase):
 
-        msg = pd.tseries.frequencies._INVALID_FREQ_ERROR
-        with self.assertRaisesRegexp(ValueError, msg):
-            ival_W.asfreq('WK')
+    def setUp(self):
+        self.january1 = Period('2000-01', 'M')
+        self.january2 = Period('2000-01', 'M')
+        self.february = Period('2000-02', 'M')
+        self.march = Period('2000-03', 'M')
+        self.day = Period('2012-01-01', 'D')
 
-    def test_conv_weekly_legacy(self):
-        # frequency conversion tests: from Weekly Frequency
-        msg = pd.tseries.frequencies._INVALID_FREQ_ERROR
-        with self.assertRaisesRegexp(ValueError, msg):
-            Period(freq='WK', year=2007, month=1, day=1)
+    def test_equal(self):
+        self.assertEqual(self.january1, self.january2)
 
-        with self.assertRaisesRegexp(ValueError, msg):
-            Period(freq='WK-SAT', year=2007, month=1, day=6)
-        with self.assertRaisesRegexp(ValueError, msg):
-            Period(freq='WK-FRI', year=2007, month=1, day=5)
-        with self.assertRaisesRegexp(ValueError, msg):
-            Period(freq='WK-THU', year=2007, month=1, day=4)
-        with self.assertRaisesRegexp(ValueError, msg):
-            Period(freq='WK-WED', year=2007, month=1, day=3)
-        with self.assertRaisesRegexp(ValueError, msg):
-            Period(freq='WK-TUE', year=2007, month=1, day=2)
-        with self.assertRaisesRegexp(ValueError, msg):
-            Period(freq='WK-MON', year=2007, month=1, day=1)
-
-    def test_conv_business(self):
-        # frequency conversion tests: from Business Frequency"
-
-        ival_B = Period(freq='B', year=2007, month=1, day=1)
-        ival_B_end_of_year = Period(freq='B', year=2007, month=12, day=31)
-        ival_B_end_of_quarter = Period(freq='B', year=2007, month=3, day=30)
-        ival_B_end_of_month = Period(freq='B', year=2007, month=1, day=31)
-        ival_B_end_of_week = Period(freq='B', year=2007, month=1, day=5)
-
-        ival_B_to_A = Period(freq='A', year=2007)
-        ival_B_to_Q = Period(freq='Q', year=2007, quarter=1)
-        ival_B_to_M = Period(freq='M', year=2007, month=1)
-        ival_B_to_W = Period(freq='W', year=2007, month=1, day=7)
-        ival_B_to_D = Period(freq='D', year=2007, month=1, day=1)
-        ival_B_to_H_start = Period(freq='H', year=2007, month=1, day=1, hour=0)
-        ival_B_to_H_end = Period(freq='H', year=2007, month=1, day=1, hour=23)
-        ival_B_to_T_start = Period(freq='Min', year=2007, month=1, day=1,
-                                   hour=0, minute=0)
-        ival_B_to_T_end = Period(freq='Min', year=2007, month=1, day=1,
-                                 hour=23, minute=59)
-        ival_B_to_S_start = Period(freq='S', year=2007, month=1, day=1, hour=0,
-                                   minute=0, second=0)
-        ival_B_to_S_end = Period(freq='S', year=2007, month=1, day=1, hour=23,
-                                 minute=59, second=59)
-
-        self.assertEqual(ival_B.asfreq('A'), ival_B_to_A)
-        self.assertEqual(ival_B_end_of_year.asfreq('A'), ival_B_to_A)
-        self.assertEqual(ival_B.asfreq('Q'), ival_B_to_Q)
-        self.assertEqual(ival_B_end_of_quarter.asfreq('Q'), ival_B_to_Q)
-        self.assertEqual(ival_B.asfreq('M'), ival_B_to_M)
-        self.assertEqual(ival_B_end_of_month.asfreq('M'), ival_B_to_M)
-        self.assertEqual(ival_B.asfreq('W'), ival_B_to_W)
-        self.assertEqual(ival_B_end_of_week.asfreq('W'), ival_B_to_W)
-
-        self.assertEqual(ival_B.asfreq('D'), ival_B_to_D)
-
-        self.assertEqual(ival_B.asfreq('H', 'S'), ival_B_to_H_start)
-        self.assertEqual(ival_B.asfreq('H', 'E'), ival_B_to_H_end)
-        self.assertEqual(ival_B.asfreq('Min', 'S'), ival_B_to_T_start)
-        self.assertEqual(ival_B.asfreq('Min', 'E'), ival_B_to_T_end)
-        self.assertEqual(ival_B.asfreq('S', 'S'), ival_B_to_S_start)
-        self.assertEqual(ival_B.asfreq('S', 'E'), ival_B_to_S_end)
-
-        self.assertEqual(ival_B.asfreq('B'), ival_B)
-
-    def test_conv_daily(self):
-        # frequency conversion tests: from Business Frequency"
-
-        ival_D = Period(freq='D', year=2007, month=1, day=1)
-        ival_D_end_of_year = Period(freq='D', year=2007, month=12, day=31)
-        ival_D_end_of_quarter = Period(freq='D', year=2007, month=3, day=31)
-        ival_D_end_of_month = Period(freq='D', year=2007, month=1, day=31)
-        ival_D_end_of_week = Period(freq='D', year=2007, month=1, day=7)
-
-        ival_D_friday = Period(freq='D', year=2007, month=1, day=5)
-        ival_D_saturday = Period(freq='D', year=2007, month=1, day=6)
-        ival_D_sunday = Period(freq='D', year=2007, month=1, day=7)
-
-        # TODO: unused?
-        # ival_D_monday = Period(freq='D', year=2007, month=1, day=8)
-
-        ival_B_friday = Period(freq='B', year=2007, month=1, day=5)
-        ival_B_monday = Period(freq='B', year=2007, month=1, day=8)
-
-        ival_D_to_A = Period(freq='A', year=2007)
-
-        ival_Deoq_to_AJAN = Period(freq='A-JAN', year=2008)
-        ival_Deoq_to_AJUN = Period(freq='A-JUN', year=2007)
-        ival_Deoq_to_ADEC = Period(freq='A-DEC', year=2007)
-
-        ival_D_to_QEJAN = Period(freq="Q-JAN", year=2007, quarter=4)
-        ival_D_to_QEJUN = Period(freq="Q-JUN", year=2007, quarter=3)
-        ival_D_to_QEDEC = Period(freq="Q-DEC", year=2007, quarter=1)
-
-        ival_D_to_M = Period(freq='M', year=2007, month=1)
-        ival_D_to_W = Period(freq='W', year=2007, month=1, day=7)
-
-        ival_D_to_H_start = Period(freq='H', year=2007, month=1, day=1, hour=0)
-        ival_D_to_H_end = Period(freq='H', year=2007, month=1, day=1, hour=23)
-        ival_D_to_T_start = Period(freq='Min', year=2007, month=1, day=1,
-                                   hour=0, minute=0)
-        ival_D_to_T_end = Period(freq='Min', year=2007, month=1, day=1,
-                                 hour=23, minute=59)
-        ival_D_to_S_start = Period(freq='S', year=2007, month=1, day=1, hour=0,
-                                   minute=0, second=0)
-        ival_D_to_S_end = Period(freq='S', year=2007, month=1, day=1, hour=23,
-                                 minute=59, second=59)
-
-        self.assertEqual(ival_D.asfreq('A'), ival_D_to_A)
-
-        self.assertEqual(ival_D_end_of_quarter.asfreq('A-JAN'),
-                         ival_Deoq_to_AJAN)
-        self.assertEqual(ival_D_end_of_quarter.asfreq('A-JUN'),
-                         ival_Deoq_to_AJUN)
-        self.assertEqual(ival_D_end_of_quarter.asfreq('A-DEC'),
-                         ival_Deoq_to_ADEC)
-
-        self.assertEqual(ival_D_end_of_year.asfreq('A'), ival_D_to_A)
-        self.assertEqual(ival_D_end_of_quarter.asfreq('Q'), ival_D_to_QEDEC)
-        self.assertEqual(ival_D.asfreq("Q-JAN"), ival_D_to_QEJAN)
-        self.assertEqual(ival_D.asfreq("Q-JUN"), ival_D_to_QEJUN)
-        self.assertEqual(ival_D.asfreq("Q-DEC"), ival_D_to_QEDEC)
-        self.assertEqual(ival_D.asfreq('M'), ival_D_to_M)
-        self.assertEqual(ival_D_end_of_month.asfreq('M'), ival_D_to_M)
-        self.assertEqual(ival_D.asfreq('W'), ival_D_to_W)
-        self.assertEqual(ival_D_end_of_week.asfreq('W'), ival_D_to_W)
-
-        self.assertEqual(ival_D_friday.asfreq('B'), ival_B_friday)
-        self.assertEqual(ival_D_saturday.asfreq('B', 'S'), ival_B_friday)
-        self.assertEqual(ival_D_saturday.asfreq('B', 'E'), ival_B_monday)
-        self.assertEqual(ival_D_sunday.asfreq('B', 'S'), ival_B_friday)
-        self.assertEqual(ival_D_sunday.asfreq('B', 'E'), ival_B_monday)
-
-        self.assertEqual(ival_D.asfreq('H', 'S'), ival_D_to_H_start)
-        self.assertEqual(ival_D.asfreq('H', 'E'), ival_D_to_H_end)
-        self.assertEqual(ival_D.asfreq('Min', 'S'), ival_D_to_T_start)
-        self.assertEqual(ival_D.asfreq('Min', 'E'), ival_D_to_T_end)
-        self.assertEqual(ival_D.asfreq('S', 'S'), ival_D_to_S_start)
-        self.assertEqual(ival_D.asfreq('S', 'E'), ival_D_to_S_end)
-
-        self.assertEqual(ival_D.asfreq('D'), ival_D)
-
-    def test_conv_hourly(self):
-        # frequency conversion tests: from Hourly Frequency"
-
-        ival_H = Period(freq='H', year=2007, month=1, day=1, hour=0)
-        ival_H_end_of_year = Period(freq='H', year=2007, month=12, day=31,
-                                    hour=23)
-        ival_H_end_of_quarter = Period(freq='H', year=2007, month=3, day=31,
-                                       hour=23)
-        ival_H_end_of_month = Period(freq='H', year=2007, month=1, day=31,
-                                     hour=23)
-        ival_H_end_of_week = Period(freq='H', year=2007, month=1, day=7,
-                                    hour=23)
-        ival_H_end_of_day = Period(freq='H', year=2007, month=1, day=1,
-                                   hour=23)
-        ival_H_end_of_bus = Period(freq='H', year=2007, month=1, day=1,
-                                   hour=23)
-
-        ival_H_to_A = Period(freq='A', year=2007)
-        ival_H_to_Q = Period(freq='Q', year=2007, quarter=1)
-        ival_H_to_M = Period(freq='M', year=2007, month=1)
-        ival_H_to_W = Period(freq='W', year=2007, month=1, day=7)
-        ival_H_to_D = Period(freq='D', year=2007, month=1, day=1)
-        ival_H_to_B = Period(freq='B', year=2007, month=1, day=1)
-
-        ival_H_to_T_start = Period(freq='Min', year=2007, month=1, day=1,
-                                   hour=0, minute=0)
-        ival_H_to_T_end = Period(freq='Min', year=2007, month=1, day=1, hour=0,
-                                 minute=59)
-        ival_H_to_S_start = Period(freq='S', year=2007, month=1, day=1, hour=0,
-                                   minute=0, second=0)
-        ival_H_to_S_end = Period(freq='S', year=2007, month=1, day=1, hour=0,
-                                 minute=59, second=59)
-
-        self.assertEqual(ival_H.asfreq('A'), ival_H_to_A)
-        self.assertEqual(ival_H_end_of_year.asfreq('A'), ival_H_to_A)
-        self.assertEqual(ival_H.asfreq('Q'), ival_H_to_Q)
-        self.assertEqual(ival_H_end_of_quarter.asfreq('Q'), ival_H_to_Q)
-        self.assertEqual(ival_H.asfreq('M'), ival_H_to_M)
-        self.assertEqual(ival_H_end_of_month.asfreq('M'), ival_H_to_M)
-        self.assertEqual(ival_H.asfreq('W'), ival_H_to_W)
-        self.assertEqual(ival_H_end_of_week.asfreq('W'), ival_H_to_W)
-        self.assertEqual(ival_H.asfreq('D'), ival_H_to_D)
-        self.assertEqual(ival_H_end_of_day.asfreq('D'), ival_H_to_D)
-        self.assertEqual(ival_H.asfreq('B'), ival_H_to_B)
-        self.assertEqual(ival_H_end_of_bus.asfreq('B'), ival_H_to_B)
-
-        self.assertEqual(ival_H.asfreq('Min', 'S'), ival_H_to_T_start)
-        self.assertEqual(ival_H.asfreq('Min', 'E'), ival_H_to_T_end)
-        self.assertEqual(ival_H.asfreq('S', 'S'), ival_H_to_S_start)
-        self.assertEqual(ival_H.asfreq('S', 'E'), ival_H_to_S_end)
-
-        self.assertEqual(ival_H.asfreq('H'), ival_H)
-
-    def test_conv_minutely(self):
-        # frequency conversion tests: from Minutely Frequency"
-
-        ival_T = Period(freq='Min', year=2007, month=1, day=1, hour=0,
-                        minute=0)
-        ival_T_end_of_year = Period(freq='Min', year=2007, month=12, day=31,
-                                    hour=23, minute=59)
-        ival_T_end_of_quarter = Period(freq='Min', year=2007, month=3, day=31,
-                                       hour=23, minute=59)
-        ival_T_end_of_month = Period(freq='Min', year=2007, month=1, day=31,
-                                     hour=23, minute=59)
-        ival_T_end_of_week = Period(freq='Min', year=2007, month=1, day=7,
-                                    hour=23, minute=59)
-        ival_T_end_of_day = Period(freq='Min', year=2007, month=1, day=1,
-                                   hour=23, minute=59)
-        ival_T_end_of_bus = Period(freq='Min', year=2007, month=1, day=1,
-                                   hour=23, minute=59)
-        ival_T_end_of_hour = Period(freq='Min', year=2007, month=1, day=1,
-                                    hour=0, minute=59)
-
-        ival_T_to_A = Period(freq='A', year=2007)
-        ival_T_to_Q = Period(freq='Q', year=2007, quarter=1)
-        ival_T_to_M = Period(freq='M', year=2007, month=1)
-        ival_T_to_W = Period(freq='W', year=2007, month=1, day=7)
-        ival_T_to_D = Period(freq='D', year=2007, month=1, day=1)
-        ival_T_to_B = Period(freq='B', year=2007, month=1, day=1)
-        ival_T_to_H = Period(freq='H', year=2007, month=1, day=1, hour=0)
-
-        ival_T_to_S_start = Period(freq='S', year=2007, month=1, day=1, hour=0,
-                                   minute=0, second=0)
-        ival_T_to_S_end = Period(freq='S', year=2007, month=1, day=1, hour=0,
-                                 minute=0, second=59)
-
-        self.assertEqual(ival_T.asfreq('A'), ival_T_to_A)
-        self.assertEqual(ival_T_end_of_year.asfreq('A'), ival_T_to_A)
-        self.assertEqual(ival_T.asfreq('Q'), ival_T_to_Q)
-        self.assertEqual(ival_T_end_of_quarter.asfreq('Q'), ival_T_to_Q)
-        self.assertEqual(ival_T.asfreq('M'), ival_T_to_M)
-        self.assertEqual(ival_T_end_of_month.asfreq('M'), ival_T_to_M)
-        self.assertEqual(ival_T.asfreq('W'), ival_T_to_W)
-        self.assertEqual(ival_T_end_of_week.asfreq('W'), ival_T_to_W)
-        self.assertEqual(ival_T.asfreq('D'), ival_T_to_D)
-        self.assertEqual(ival_T_end_of_day.asfreq('D'), ival_T_to_D)
-        self.assertEqual(ival_T.asfreq('B'), ival_T_to_B)
-        self.assertEqual(ival_T_end_of_bus.asfreq('B'), ival_T_to_B)
-        self.assertEqual(ival_T.asfreq('H'), ival_T_to_H)
-        self.assertEqual(ival_T_end_of_hour.asfreq('H'), ival_T_to_H)
-
-        self.assertEqual(ival_T.asfreq('S', 'S'), ival_T_to_S_start)
-        self.assertEqual(ival_T.asfreq('S', 'E'), ival_T_to_S_end)
-
-        self.assertEqual(ival_T.asfreq('Min'), ival_T)
-
-    def test_conv_secondly(self):
-        # frequency conversion tests: from Secondly Frequency"
-
-        ival_S = Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0,
-                        second=0)
-        ival_S_end_of_year = Period(freq='S', year=2007, month=12, day=31,
-                                    hour=23, minute=59, second=59)
-        ival_S_end_of_quarter = Period(freq='S', year=2007, month=3, day=31,
-                                       hour=23, minute=59, second=59)
-        ival_S_end_of_month = Period(freq='S', year=2007, month=1, day=31,
-                                     hour=23, minute=59, second=59)
-        ival_S_end_of_week = Period(freq='S', year=2007, month=1, day=7,
-                                    hour=23, minute=59, second=59)
-        ival_S_end_of_day = Period(freq='S', year=2007, month=1, day=1,
-                                   hour=23, minute=59, second=59)
-        ival_S_end_of_bus = Period(freq='S', year=2007, month=1, day=1,
-                                   hour=23, minute=59, second=59)
-        ival_S_end_of_hour = Period(freq='S', year=2007, month=1, day=1,
-                                    hour=0, minute=59, second=59)
-        ival_S_end_of_minute = Period(freq='S', year=2007, month=1, day=1,
-                                      hour=0, minute=0, second=59)
-
-        ival_S_to_A = Period(freq='A', year=2007)
-        ival_S_to_Q = Period(freq='Q', year=2007, quarter=1)
-        ival_S_to_M = Period(freq='M', year=2007, month=1)
-        ival_S_to_W = Period(freq='W', year=2007, month=1, day=7)
-        ival_S_to_D = Period(freq='D', year=2007, month=1, day=1)
-        ival_S_to_B = Period(freq='B', year=2007, month=1, day=1)
-        ival_S_to_H = Period(freq='H', year=2007, month=1, day=1, hour=0)
-        ival_S_to_T = Period(freq='Min', year=2007, month=1, day=1, hour=0,
-                             minute=0)
-
-        self.assertEqual(ival_S.asfreq('A'), ival_S_to_A)
-        self.assertEqual(ival_S_end_of_year.asfreq('A'), ival_S_to_A)
-        self.assertEqual(ival_S.asfreq('Q'), ival_S_to_Q)
-        self.assertEqual(ival_S_end_of_quarter.asfreq('Q'), ival_S_to_Q)
-        self.assertEqual(ival_S.asfreq('M'), ival_S_to_M)
-        self.assertEqual(ival_S_end_of_month.asfreq('M'), ival_S_to_M)
-        self.assertEqual(ival_S.asfreq('W'), ival_S_to_W)
-        self.assertEqual(ival_S_end_of_week.asfreq('W'), ival_S_to_W)
-        self.assertEqual(ival_S.asfreq('D'), ival_S_to_D)
-        self.assertEqual(ival_S_end_of_day.asfreq('D'), ival_S_to_D)
-        self.assertEqual(ival_S.asfreq('B'), ival_S_to_B)
-        self.assertEqual(ival_S_end_of_bus.asfreq('B'), ival_S_to_B)
-        self.assertEqual(ival_S.asfreq('H'), ival_S_to_H)
-        self.assertEqual(ival_S_end_of_hour.asfreq('H'), ival_S_to_H)
-        self.assertEqual(ival_S.asfreq('Min'), ival_S_to_T)
-        self.assertEqual(ival_S_end_of_minute.asfreq('Min'), ival_S_to_T)
-
-        self.assertEqual(ival_S.asfreq('S'), ival_S)
-
-    def test_asfreq_mult(self):
-        # normal freq to mult freq
-        p = Period(freq='A', year=2007)
-        # ordinal will not change
-        for freq in ['3A', offsets.YearEnd(3)]:
-            result = p.asfreq(freq)
-            expected = Period('2007', freq='3A')
-
-            self.assertEqual(result, expected)
-            self.assertEqual(result.ordinal, expected.ordinal)
-            self.assertEqual(result.freq, expected.freq)
-        # ordinal will not change
-        for freq in ['3A', offsets.YearEnd(3)]:
-            result = p.asfreq(freq, how='S')
-            expected = Period('2007', freq='3A')
-
-            self.assertEqual(result, expected)
-            self.assertEqual(result.ordinal, expected.ordinal)
-            self.assertEqual(result.freq, expected.freq)
-
-        # mult freq to normal freq
-        p = Period(freq='3A', year=2007)
-        # ordinal will change because how=E is the default
-        for freq in ['A', offsets.YearEnd()]:
-            result = p.asfreq(freq)
-            expected = Period('2009', freq='A')
-
-            self.assertEqual(result, expected)
-            self.assertEqual(result.ordinal, expected.ordinal)
-            self.assertEqual(result.freq, expected.freq)
-        # ordinal will not change
-        for freq in ['A', offsets.YearEnd()]:
-            result = p.asfreq(freq, how='S')
-            expected = Period('2007', freq='A')
-
-            self.assertEqual(result, expected)
-            self.assertEqual(result.ordinal, expected.ordinal)
-            self.assertEqual(result.freq, expected.freq)
-
-        p = Period(freq='A', year=2007)
-        for freq in ['2M', offsets.MonthEnd(2)]:
-            result = p.asfreq(freq)
-            expected = Period('2007-12', freq='2M')
-
-            self.assertEqual(result, expected)
-            self.assertEqual(result.ordinal, expected.ordinal)
-            self.assertEqual(result.freq, expected.freq)
-        for freq in ['2M', offsets.MonthEnd(2)]:
-            result = p.asfreq(freq, how='S')
-            expected = Period('2007-01', freq='2M')
-
-            self.assertEqual(result, expected)
-            self.assertEqual(result.ordinal, expected.ordinal)
-            self.assertEqual(result.freq, expected.freq)
-
-        p = Period(freq='3A', year=2007)
-        for freq in ['2M', offsets.MonthEnd(2)]:
-            result = p.asfreq(freq)
-            expected = Period('2009-12', freq='2M')
-
-            self.assertEqual(result, expected)
-            self.assertEqual(result.ordinal, expected.ordinal)
-            self.assertEqual(result.freq, expected.freq)
-        for freq in ['2M', offsets.MonthEnd(2)]:
-            result = p.asfreq(freq, how='S')
-            expected = Period('2007-01', freq='2M')
-
-            self.assertEqual(result, expected)
-            self.assertEqual(result.ordinal, expected.ordinal)
-            self.assertEqual(result.freq, expected.freq)
-
-    def test_asfreq_combined(self):
-        # normal freq to combined freq
-        p = Period('2007', freq='H')
-
-        # ordinal will not change
-        expected = Period('2007', freq='25H')
-        for freq, how in zip(['1D1H', '1H1D'], ['E', 'S']):
-            result = p.asfreq(freq, how=how)
-            self.assertEqual(result, expected)
-            self.assertEqual(result.ordinal, expected.ordinal)
-            self.assertEqual(result.freq, expected.freq)
-
-        # combined freq to normal freq
-        p1 = Period(freq='1D1H', year=2007)
-        p2 = Period(freq='1H1D', year=2007)
-
-        # ordinal will change because how=E is the default
-        result1 = p1.asfreq('H')
-        result2 = p2.asfreq('H')
-        expected = Period('2007-01-02', freq='H')
-        self.assertEqual(result1, expected)
-        self.assertEqual(result1.ordinal, expected.ordinal)
-        self.assertEqual(result1.freq, expected.freq)
-        self.assertEqual(result2, expected)
-        self.assertEqual(result2.ordinal, expected.ordinal)
-        self.assertEqual(result2.freq, expected.freq)
-
-        # ordinal will not change
-        result1 = p1.asfreq('H', how='S')
-        result2 = p2.asfreq('H', how='S')
-        expected = Period('2007-01-01', freq='H')
-        self.assertEqual(result1, expected)
-        self.assertEqual(result1.ordinal, expected.ordinal)
-        self.assertEqual(result1.freq, expected.freq)
-        self.assertEqual(result2, expected)
-        self.assertEqual(result2.ordinal, expected.ordinal)
-        self.assertEqual(result2.freq, expected.freq)
+    def test_equal_Raises_Value(self):
+        with tm.assertRaises(period.IncompatibleFrequency):
+            self.january1 == self.day
 
-    def test_is_leap_year(self):
-        # GH 13727
-        for freq in ['A', 'M', 'D', 'H']:
-            p = Period('2000-01-01 00:00:00', freq=freq)
-            self.assertTrue(p.is_leap_year)
-            self.assertIsInstance(p.is_leap_year, bool)
+    def test_notEqual(self):
+        self.assertNotEqual(self.january1, 1)
+        self.assertNotEqual(self.january1, self.february)
 
-            p = Period('1999-01-01 00:00:00', freq=freq)
-            self.assertFalse(p.is_leap_year)
+    def test_greater(self):
+        self.assertTrue(self.february > self.january1)
 
-            p = Period('2004-01-01 00:00:00', freq=freq)
-            self.assertTrue(p.is_leap_year)
+    def test_greater_Raises_Value(self):
+        with tm.assertRaises(period.IncompatibleFrequency):
+            self.january1 > self.day
 
-            p = Period('2100-01-01 00:00:00', freq=freq)
-            self.assertFalse(p.is_leap_year)
+    def test_greater_Raises_Type(self):
+        with tm.assertRaises(TypeError):
+            self.january1 > 1
+
+    def test_greaterEqual(self):
+        self.assertTrue(self.january1 >= self.january2)
+
+    def test_greaterEqual_Raises_Value(self):
+        with tm.assertRaises(period.IncompatibleFrequency):
+            self.january1 >= self.day
+
+        with tm.assertRaises(TypeError):
+            print(self.january1 >= 1)
+
+    def test_smallerEqual(self):
+        self.assertTrue(self.january1 <= self.january2)
+
+    def test_smallerEqual_Raises_Value(self):
+        with tm.assertRaises(period.IncompatibleFrequency):
+            self.january1 <= self.day
+
+    def test_smallerEqual_Raises_Type(self):
+        with tm.assertRaises(TypeError):
+            self.january1 <= 1
+
+    def test_smaller(self):
+        self.assertTrue(self.january1 < self.february)
+
+    def test_smaller_Raises_Value(self):
+        with tm.assertRaises(period.IncompatibleFrequency):
+            self.january1 < self.day
+
+    def test_smaller_Raises_Type(self):
+        with tm.assertRaises(TypeError):
+            self.january1 < 1
+
+    def test_sort(self):
+        periods = [self.march, self.january1, self.february]
+        correctPeriods = [self.january1, self.february, self.march]
+        self.assertEqual(sorted(periods), correctPeriods)
+
+    def test_period_nat_comp(self):
+        p_nat = Period('NaT', freq='D')
+        p = Period('2011-01-01', freq='D')
+
+        nat = pd.Timestamp('NaT')
+        t = pd.Timestamp('2011-01-01')
+        # confirm Period('NaT') work identical with Timestamp('NaT')
+        for left, right in [(p_nat, p), (p, p_nat), (p_nat, p_nat), (nat, t),
+                            (t, nat), (nat, nat)]:
+            self.assertEqual(left < right, False)
+            self.assertEqual(left > right, False)
+            self.assertEqual(left == right, False)
+            self.assertEqual(left != right, True)
+            self.assertEqual(left <= right, False)
+            self.assertEqual(left >= right, False)
 
 
 class TestMethods(tm.TestCase):
diff --git a/pandas/tests/scalar/test_period_asfreq.py b/pandas/tests/scalar/test_period_asfreq.py
new file mode 100644
index 000000000..d311fef8a
--- /dev/null
+++ b/pandas/tests/scalar/test_period_asfreq.py
@@ -0,0 +1,721 @@
+import pandas as pd
+from pandas import Period, offsets
+from pandas.util import testing as tm
+from pandas.tseries.frequencies import _period_code_map
+
+
+class TestFreqConversion(tm.TestCase):
+    "Test frequency conversion of date objects"
+
+    def test_asfreq_corner(self):
+        val = Period(freq='A', year=2007)
+        result1 = val.asfreq('5t')
+        result2 = val.asfreq('t')
+        expected = Period('2007-12-31 23:59', freq='t')
+        self.assertEqual(result1.ordinal, expected.ordinal)
+        self.assertEqual(result1.freqstr, '5T')
+        self.assertEqual(result2.ordinal, expected.ordinal)
+        self.assertEqual(result2.freqstr, 'T')
+
+    def test_conv_annual(self):
+        # frequency conversion tests: from Annual Frequency
+
+        ival_A = Period(freq='A', year=2007)
+
+        ival_AJAN = Period(freq="A-JAN", year=2007)
+        ival_AJUN = Period(freq="A-JUN", year=2007)
+        ival_ANOV = Period(freq="A-NOV", year=2007)
+
+        ival_A_to_Q_start = Period(freq='Q', year=2007, quarter=1)
+        ival_A_to_Q_end = Period(freq='Q', year=2007, quarter=4)
+        ival_A_to_M_start = Period(freq='M', year=2007, month=1)
+        ival_A_to_M_end = Period(freq='M', year=2007, month=12)
+        ival_A_to_W_start = Period(freq='W', year=2007, month=1, day=1)
+        ival_A_to_W_end = Period(freq='W', year=2007, month=12, day=31)
+        ival_A_to_B_start = Period(freq='B', year=2007, month=1, day=1)
+        ival_A_to_B_end = Period(freq='B', year=2007, month=12, day=31)
+        ival_A_to_D_start = Period(freq='D', year=2007, month=1, day=1)
+        ival_A_to_D_end = Period(freq='D', year=2007, month=12, day=31)
+        ival_A_to_H_start = Period(freq='H', year=2007, month=1, day=1, hour=0)
+        ival_A_to_H_end = Period(freq='H', year=2007, month=12, day=31,
+                                 hour=23)
+        ival_A_to_T_start = Period(freq='Min', year=2007, month=1, day=1,
+                                   hour=0, minute=0)
+        ival_A_to_T_end = Period(freq='Min', year=2007, month=12, day=31,
+                                 hour=23, minute=59)
+        ival_A_to_S_start = Period(freq='S', year=2007, month=1, day=1, hour=0,
+                                   minute=0, second=0)
+        ival_A_to_S_end = Period(freq='S', year=2007, month=12, day=31,
+                                 hour=23, minute=59, second=59)
+
+        ival_AJAN_to_D_end = Period(freq='D', year=2007, month=1, day=31)
+        ival_AJAN_to_D_start = Period(freq='D', year=2006, month=2, day=1)
+        ival_AJUN_to_D_end = Period(freq='D', year=2007, month=6, day=30)
+        ival_AJUN_to_D_start = Period(freq='D', year=2006, month=7, day=1)
+        ival_ANOV_to_D_end = Period(freq='D', year=2007, month=11, day=30)
+        ival_ANOV_to_D_start = Period(freq='D', year=2006, month=12, day=1)
+
+        self.assertEqual(ival_A.asfreq('Q', 'S'), ival_A_to_Q_start)
+        self.assertEqual(ival_A.asfreq('Q', 'e'), ival_A_to_Q_end)
+        self.assertEqual(ival_A.asfreq('M', 's'), ival_A_to_M_start)
+        self.assertEqual(ival_A.asfreq('M', 'E'), ival_A_to_M_end)
+        self.assertEqual(ival_A.asfreq('W', 'S'), ival_A_to_W_start)
+        self.assertEqual(ival_A.asfreq('W', 'E'), ival_A_to_W_end)
+        self.assertEqual(ival_A.asfreq('B', 'S'), ival_A_to_B_start)
+        self.assertEqual(ival_A.asfreq('B', 'E'), ival_A_to_B_end)
+        self.assertEqual(ival_A.asfreq('D', 'S'), ival_A_to_D_start)
+        self.assertEqual(ival_A.asfreq('D', 'E'), ival_A_to_D_end)
+        self.assertEqual(ival_A.asfreq('H', 'S'), ival_A_to_H_start)
+        self.assertEqual(ival_A.asfreq('H', 'E'), ival_A_to_H_end)
+        self.assertEqual(ival_A.asfreq('min', 'S'), ival_A_to_T_start)
+        self.assertEqual(ival_A.asfreq('min', 'E'), ival_A_to_T_end)
+        self.assertEqual(ival_A.asfreq('T', 'S'), ival_A_to_T_start)
+        self.assertEqual(ival_A.asfreq('T', 'E'), ival_A_to_T_end)
+        self.assertEqual(ival_A.asfreq('S', 'S'), ival_A_to_S_start)
+        self.assertEqual(ival_A.asfreq('S', 'E'), ival_A_to_S_end)
+
+        self.assertEqual(ival_AJAN.asfreq('D', 'S'), ival_AJAN_to_D_start)
+        self.assertEqual(ival_AJAN.asfreq('D', 'E'), ival_AJAN_to_D_end)
+
+        self.assertEqual(ival_AJUN.asfreq('D', 'S'), ival_AJUN_to_D_start)
+        self.assertEqual(ival_AJUN.asfreq('D', 'E'), ival_AJUN_to_D_end)
+
+        self.assertEqual(ival_ANOV.asfreq('D', 'S'), ival_ANOV_to_D_start)
+        self.assertEqual(ival_ANOV.asfreq('D', 'E'), ival_ANOV_to_D_end)
+
+        self.assertEqual(ival_A.asfreq('A'), ival_A)
+
+    def test_conv_quarterly(self):
+        # frequency conversion tests: from Quarterly Frequency
+
+        ival_Q = Period(freq='Q', year=2007, quarter=1)
+        ival_Q_end_of_year = Period(freq='Q', year=2007, quarter=4)
+
+        ival_QEJAN = Period(freq="Q-JAN", year=2007, quarter=1)
+        ival_QEJUN = Period(freq="Q-JUN", year=2007, quarter=1)
+
+        ival_Q_to_A = Period(freq='A', year=2007)
+        ival_Q_to_M_start = Period(freq='M', year=2007, month=1)
+        ival_Q_to_M_end = Period(freq='M', year=2007, month=3)
+        ival_Q_to_W_start = Period(freq='W', year=2007, month=1, day=1)
+        ival_Q_to_W_end = Period(freq='W', year=2007, month=3, day=31)
+        ival_Q_to_B_start = Period(freq='B', year=2007, month=1, day=1)
+        ival_Q_to_B_end = Period(freq='B', year=2007, month=3, day=30)
+        ival_Q_to_D_start = Period(freq='D', year=2007, month=1, day=1)
+        ival_Q_to_D_end = Period(freq='D', year=2007, month=3, day=31)
+        ival_Q_to_H_start = Period(freq='H', year=2007, month=1, day=1, hour=0)
+        ival_Q_to_H_end = Period(freq='H', year=2007, month=3, day=31, hour=23)
+        ival_Q_to_T_start = Period(freq='Min', year=2007, month=1, day=1,
+                                   hour=0, minute=0)
+        ival_Q_to_T_end = Period(freq='Min', year=2007, month=3, day=31,
+                                 hour=23, minute=59)
+        ival_Q_to_S_start = Period(freq='S', year=2007, month=1, day=1, hour=0,
+                                   minute=0, second=0)
+        ival_Q_to_S_end = Period(freq='S', year=2007, month=3, day=31, hour=23,
+                                 minute=59, second=59)
+
+        ival_QEJAN_to_D_start = Period(freq='D', year=2006, month=2, day=1)
+        ival_QEJAN_to_D_end = Period(freq='D', year=2006, month=4, day=30)
+
+        ival_QEJUN_to_D_start = Period(freq='D', year=2006, month=7, day=1)
+        ival_QEJUN_to_D_end = Period(freq='D', year=2006, month=9, day=30)
+
+        self.assertEqual(ival_Q.asfreq('A'), ival_Q_to_A)
+        self.assertEqual(ival_Q_end_of_year.asfreq('A'), ival_Q_to_A)
+
+        self.assertEqual(ival_Q.asfreq('M', 'S'), ival_Q_to_M_start)
+        self.assertEqual(ival_Q.asfreq('M', 'E'), ival_Q_to_M_end)
+        self.assertEqual(ival_Q.asfreq('W', 'S'), ival_Q_to_W_start)
+        self.assertEqual(ival_Q.asfreq('W', 'E'), ival_Q_to_W_end)
+        self.assertEqual(ival_Q.asfreq('B', 'S'), ival_Q_to_B_start)
+        self.assertEqual(ival_Q.asfreq('B', 'E'), ival_Q_to_B_end)
+        self.assertEqual(ival_Q.asfreq('D', 'S'), ival_Q_to_D_start)
+        self.assertEqual(ival_Q.asfreq('D', 'E'), ival_Q_to_D_end)
+        self.assertEqual(ival_Q.asfreq('H', 'S'), ival_Q_to_H_start)
+        self.assertEqual(ival_Q.asfreq('H', 'E'), ival_Q_to_H_end)
+        self.assertEqual(ival_Q.asfreq('Min', 'S'), ival_Q_to_T_start)
+        self.assertEqual(ival_Q.asfreq('Min', 'E'), ival_Q_to_T_end)
+        self.assertEqual(ival_Q.asfreq('S', 'S'), ival_Q_to_S_start)
+        self.assertEqual(ival_Q.asfreq('S', 'E'), ival_Q_to_S_end)
+
+        self.assertEqual(ival_QEJAN.asfreq('D', 'S'), ival_QEJAN_to_D_start)
+        self.assertEqual(ival_QEJAN.asfreq('D', 'E'), ival_QEJAN_to_D_end)
+        self.assertEqual(ival_QEJUN.asfreq('D', 'S'), ival_QEJUN_to_D_start)
+        self.assertEqual(ival_QEJUN.asfreq('D', 'E'), ival_QEJUN_to_D_end)
+
+        self.assertEqual(ival_Q.asfreq('Q'), ival_Q)
+
+    def test_conv_monthly(self):
+        # frequency conversion tests: from Monthly Frequency
+
+        ival_M = Period(freq='M', year=2007, month=1)
+        ival_M_end_of_year = Period(freq='M', year=2007, month=12)
+        ival_M_end_of_quarter = Period(freq='M', year=2007, month=3)
+        ival_M_to_A = Period(freq='A', year=2007)
+        ival_M_to_Q = Period(freq='Q', year=2007, quarter=1)
+        ival_M_to_W_start = Period(freq='W', year=2007, month=1, day=1)
+        ival_M_to_W_end = Period(freq='W', year=2007, month=1, day=31)
+        ival_M_to_B_start = Period(freq='B', year=2007, month=1, day=1)
+        ival_M_to_B_end = Period(freq='B', year=2007, month=1, day=31)
+        ival_M_to_D_start = Period(freq='D', year=2007, month=1, day=1)
+        ival_M_to_D_end = Period(freq='D', year=2007, month=1, day=31)
+        ival_M_to_H_start = Period(freq='H', year=2007, month=1, day=1, hour=0)
+        ival_M_to_H_end = Period(freq='H', year=2007, month=1, day=31, hour=23)
+        ival_M_to_T_start = Period(freq='Min', year=2007, month=1, day=1,
+                                   hour=0, minute=0)
+        ival_M_to_T_end = Period(freq='Min', year=2007, month=1, day=31,
+                                 hour=23, minute=59)
+        ival_M_to_S_start = Period(freq='S', year=2007, month=1, day=1, hour=0,
+                                   minute=0, second=0)
+        ival_M_to_S_end = Period(freq='S', year=2007, month=1, day=31, hour=23,
+                                 minute=59, second=59)
+
+        self.assertEqual(ival_M.asfreq('A'), ival_M_to_A)
+        self.assertEqual(ival_M_end_of_year.asfreq('A'), ival_M_to_A)
+        self.assertEqual(ival_M.asfreq('Q'), ival_M_to_Q)
+        self.assertEqual(ival_M_end_of_quarter.asfreq('Q'), ival_M_to_Q)
+
+        self.assertEqual(ival_M.asfreq('W', 'S'), ival_M_to_W_start)
+        self.assertEqual(ival_M.asfreq('W', 'E'), ival_M_to_W_end)
+        self.assertEqual(ival_M.asfreq('B', 'S'), ival_M_to_B_start)
+        self.assertEqual(ival_M.asfreq('B', 'E'), ival_M_to_B_end)
+        self.assertEqual(ival_M.asfreq('D', 'S'), ival_M_to_D_start)
+        self.assertEqual(ival_M.asfreq('D', 'E'), ival_M_to_D_end)
+        self.assertEqual(ival_M.asfreq('H', 'S'), ival_M_to_H_start)
+        self.assertEqual(ival_M.asfreq('H', 'E'), ival_M_to_H_end)
+        self.assertEqual(ival_M.asfreq('Min', 'S'), ival_M_to_T_start)
+        self.assertEqual(ival_M.asfreq('Min', 'E'), ival_M_to_T_end)
+        self.assertEqual(ival_M.asfreq('S', 'S'), ival_M_to_S_start)
+        self.assertEqual(ival_M.asfreq('S', 'E'), ival_M_to_S_end)
+
+        self.assertEqual(ival_M.asfreq('M'), ival_M)
+
+    def test_conv_weekly(self):
+        # frequency conversion tests: from Weekly Frequency
+        ival_W = Period(freq='W', year=2007, month=1, day=1)
+
+        ival_WSUN = Period(freq='W', year=2007, month=1, day=7)
+        ival_WSAT = Period(freq='W-SAT', year=2007, month=1, day=6)
+        ival_WFRI = Period(freq='W-FRI', year=2007, month=1, day=5)
+        ival_WTHU = Period(freq='W-THU', year=2007, month=1, day=4)
+        ival_WWED = Period(freq='W-WED', year=2007, month=1, day=3)
+        ival_WTUE = Period(freq='W-TUE', year=2007, month=1, day=2)
+        ival_WMON = Period(freq='W-MON', year=2007, month=1, day=1)
+
+        ival_WSUN_to_D_start = Period(freq='D', year=2007, month=1, day=1)
+        ival_WSUN_to_D_end = Period(freq='D', year=2007, month=1, day=7)
+        ival_WSAT_to_D_start = Period(freq='D', year=2006, month=12, day=31)
+        ival_WSAT_to_D_end = Period(freq='D', year=2007, month=1, day=6)
+        ival_WFRI_to_D_start = Period(freq='D', year=2006, month=12, day=30)
+        ival_WFRI_to_D_end = Period(freq='D', year=2007, month=1, day=5)
+        ival_WTHU_to_D_start = Period(freq='D', year=2006, month=12, day=29)
+        ival_WTHU_to_D_end = Period(freq='D', year=2007, month=1, day=4)
+        ival_WWED_to_D_start = Period(freq='D', year=2006, month=12, day=28)
+        ival_WWED_to_D_end = Period(freq='D', year=2007, month=1, day=3)
+        ival_WTUE_to_D_start = Period(freq='D', year=2006, month=12, day=27)
+        ival_WTUE_to_D_end = Period(freq='D', year=2007, month=1, day=2)
+        ival_WMON_to_D_start = Period(freq='D', year=2006, month=12, day=26)
+        ival_WMON_to_D_end = Period(freq='D', year=2007, month=1, day=1)
+
+        ival_W_end_of_year = Period(freq='W', year=2007, month=12, day=31)
+        ival_W_end_of_quarter = Period(freq='W', year=2007, month=3, day=31)
+        ival_W_end_of_month = Period(freq='W', year=2007, month=1, day=31)
+        ival_W_to_A = Period(freq='A', year=2007)
+        ival_W_to_Q = Period(freq='Q', year=2007, quarter=1)
+        ival_W_to_M = Period(freq='M', year=2007, month=1)
+
+        if Period(freq='D', year=2007, month=12, day=31).weekday == 6:
+            ival_W_to_A_end_of_year = Period(freq='A', year=2007)
+        else:
+            ival_W_to_A_end_of_year = Period(freq='A', year=2008)
+
+        if Period(freq='D', year=2007, month=3, day=31).weekday == 6:
+            ival_W_to_Q_end_of_quarter = Period(freq='Q', year=2007, quarter=1)
+        else:
+            ival_W_to_Q_end_of_quarter = Period(freq='Q', year=2007, quarter=2)
+
+        if Period(freq='D', year=2007, month=1, day=31).weekday == 6:
+            ival_W_to_M_end_of_month = Period(freq='M', year=2007, month=1)
+        else:
+            ival_W_to_M_end_of_month = Period(freq='M', year=2007, month=2)
+
+        ival_W_to_B_start = Period(freq='B', year=2007, month=1, day=1)
+        ival_W_to_B_end = Period(freq='B', year=2007, month=1, day=5)
+        ival_W_to_D_start = Period(freq='D', year=2007, month=1, day=1)
+        ival_W_to_D_end = Period(freq='D', year=2007, month=1, day=7)
+        ival_W_to_H_start = Period(freq='H', year=2007, month=1, day=1, hour=0)
+        ival_W_to_H_end = Period(freq='H', year=2007, month=1, day=7, hour=23)
+        ival_W_to_T_start = Period(freq='Min', year=2007, month=1, day=1,
+                                   hour=0, minute=0)
+        ival_W_to_T_end = Period(freq='Min', year=2007, month=1, day=7,
+                                 hour=23, minute=59)
+        ival_W_to_S_start = Period(freq='S', year=2007, month=1, day=1, hour=0,
+                                   minute=0, second=0)
+        ival_W_to_S_end = Period(freq='S', year=2007, month=1, day=7, hour=23,
+                                 minute=59, second=59)
+
+        self.assertEqual(ival_W.asfreq('A'), ival_W_to_A)
+        self.assertEqual(ival_W_end_of_year.asfreq('A'),
+                         ival_W_to_A_end_of_year)
+        self.assertEqual(ival_W.asfreq('Q'), ival_W_to_Q)
+        self.assertEqual(ival_W_end_of_quarter.asfreq('Q'),
+                         ival_W_to_Q_end_of_quarter)
+        self.assertEqual(ival_W.asfreq('M'), ival_W_to_M)
+        self.assertEqual(ival_W_end_of_month.asfreq('M'),
+                         ival_W_to_M_end_of_month)
+
+        self.assertEqual(ival_W.asfreq('B', 'S'), ival_W_to_B_start)
+        self.assertEqual(ival_W.asfreq('B', 'E'), ival_W_to_B_end)
+
+        self.assertEqual(ival_W.asfreq('D', 'S'), ival_W_to_D_start)
+        self.assertEqual(ival_W.asfreq('D', 'E'), ival_W_to_D_end)
+
+        self.assertEqual(ival_WSUN.asfreq('D', 'S'), ival_WSUN_to_D_start)
+        self.assertEqual(ival_WSUN.asfreq('D', 'E'), ival_WSUN_to_D_end)
+        self.assertEqual(ival_WSAT.asfreq('D', 'S'), ival_WSAT_to_D_start)
+        self.assertEqual(ival_WSAT.asfreq('D', 'E'), ival_WSAT_to_D_end)
+        self.assertEqual(ival_WFRI.asfreq('D', 'S'), ival_WFRI_to_D_start)
+        self.assertEqual(ival_WFRI.asfreq('D', 'E'), ival_WFRI_to_D_end)
+        self.assertEqual(ival_WTHU.asfreq('D', 'S'), ival_WTHU_to_D_start)
+        self.assertEqual(ival_WTHU.asfreq('D', 'E'), ival_WTHU_to_D_end)
+        self.assertEqual(ival_WWED.asfreq('D', 'S'), ival_WWED_to_D_start)
+        self.assertEqual(ival_WWED.asfreq('D', 'E'), ival_WWED_to_D_end)
+        self.assertEqual(ival_WTUE.asfreq('D', 'S'), ival_WTUE_to_D_start)
+        self.assertEqual(ival_WTUE.asfreq('D', 'E'), ival_WTUE_to_D_end)
+        self.assertEqual(ival_WMON.asfreq('D', 'S'), ival_WMON_to_D_start)
+        self.assertEqual(ival_WMON.asfreq('D', 'E'), ival_WMON_to_D_end)
+
+        self.assertEqual(ival_W.asfreq('H', 'S'), ival_W_to_H_start)
+        self.assertEqual(ival_W.asfreq('H', 'E'), ival_W_to_H_end)
+        self.assertEqual(ival_W.asfreq('Min', 'S'), ival_W_to_T_start)
+        self.assertEqual(ival_W.asfreq('Min', 'E'), ival_W_to_T_end)
+        self.assertEqual(ival_W.asfreq('S', 'S'), ival_W_to_S_start)
+        self.assertEqual(ival_W.asfreq('S', 'E'), ival_W_to_S_end)
+
+        self.assertEqual(ival_W.asfreq('W'), ival_W)
+
+        msg = pd.tseries.frequencies._INVALID_FREQ_ERROR
+        with self.assertRaisesRegexp(ValueError, msg):
+            ival_W.asfreq('WK')
+
+    def test_conv_weekly_legacy(self):
+        # frequency conversion tests: from Weekly Frequency
+        msg = pd.tseries.frequencies._INVALID_FREQ_ERROR
+        with self.assertRaisesRegexp(ValueError, msg):
+            Period(freq='WK', year=2007, month=1, day=1)
+
+        with self.assertRaisesRegexp(ValueError, msg):
+            Period(freq='WK-SAT', year=2007, month=1, day=6)
+        with self.assertRaisesRegexp(ValueError, msg):
+            Period(freq='WK-FRI', year=2007, month=1, day=5)
+        with self.assertRaisesRegexp(ValueError, msg):
+            Period(freq='WK-THU', year=2007, month=1, day=4)
+        with self.assertRaisesRegexp(ValueError, msg):
+            Period(freq='WK-WED', year=2007, month=1, day=3)
+        with self.assertRaisesRegexp(ValueError, msg):
+            Period(freq='WK-TUE', year=2007, month=1, day=2)
+        with self.assertRaisesRegexp(ValueError, msg):
+            Period(freq='WK-MON', year=2007, month=1, day=1)
+
+    def test_conv_business(self):
+        # frequency conversion tests: from Business Frequency"
+
+        ival_B = Period(freq='B', year=2007, month=1, day=1)
+        ival_B_end_of_year = Period(freq='B', year=2007, month=12, day=31)
+        ival_B_end_of_quarter = Period(freq='B', year=2007, month=3, day=30)
+        ival_B_end_of_month = Period(freq='B', year=2007, month=1, day=31)
+        ival_B_end_of_week = Period(freq='B', year=2007, month=1, day=5)
+
+        ival_B_to_A = Period(freq='A', year=2007)
+        ival_B_to_Q = Period(freq='Q', year=2007, quarter=1)
+        ival_B_to_M = Period(freq='M', year=2007, month=1)
+        ival_B_to_W = Period(freq='W', year=2007, month=1, day=7)
+        ival_B_to_D = Period(freq='D', year=2007, month=1, day=1)
+        ival_B_to_H_start = Period(freq='H', year=2007, month=1, day=1, hour=0)
+        ival_B_to_H_end = Period(freq='H', year=2007, month=1, day=1, hour=23)
+        ival_B_to_T_start = Period(freq='Min', year=2007, month=1, day=1,
+                                   hour=0, minute=0)
+        ival_B_to_T_end = Period(freq='Min', year=2007, month=1, day=1,
+                                 hour=23, minute=59)
+        ival_B_to_S_start = Period(freq='S', year=2007, month=1, day=1, hour=0,
+                                   minute=0, second=0)
+        ival_B_to_S_end = Period(freq='S', year=2007, month=1, day=1, hour=23,
+                                 minute=59, second=59)
+
+        self.assertEqual(ival_B.asfreq('A'), ival_B_to_A)
+        self.assertEqual(ival_B_end_of_year.asfreq('A'), ival_B_to_A)
+        self.assertEqual(ival_B.asfreq('Q'), ival_B_to_Q)
+        self.assertEqual(ival_B_end_of_quarter.asfreq('Q'), ival_B_to_Q)
+        self.assertEqual(ival_B.asfreq('M'), ival_B_to_M)
+        self.assertEqual(ival_B_end_of_month.asfreq('M'), ival_B_to_M)
+        self.assertEqual(ival_B.asfreq('W'), ival_B_to_W)
+        self.assertEqual(ival_B_end_of_week.asfreq('W'), ival_B_to_W)
+
+        self.assertEqual(ival_B.asfreq('D'), ival_B_to_D)
+
+        self.assertEqual(ival_B.asfreq('H', 'S'), ival_B_to_H_start)
+        self.assertEqual(ival_B.asfreq('H', 'E'), ival_B_to_H_end)
+        self.assertEqual(ival_B.asfreq('Min', 'S'), ival_B_to_T_start)
+        self.assertEqual(ival_B.asfreq('Min', 'E'), ival_B_to_T_end)
+        self.assertEqual(ival_B.asfreq('S', 'S'), ival_B_to_S_start)
+        self.assertEqual(ival_B.asfreq('S', 'E'), ival_B_to_S_end)
+
+        self.assertEqual(ival_B.asfreq('B'), ival_B)
+
+    def test_conv_daily(self):
+        # frequency conversion tests: from Business Frequency"
+
+        ival_D = Period(freq='D', year=2007, month=1, day=1)
+        ival_D_end_of_year = Period(freq='D', year=2007, month=12, day=31)
+        ival_D_end_of_quarter = Period(freq='D', year=2007, month=3, day=31)
+        ival_D_end_of_month = Period(freq='D', year=2007, month=1, day=31)
+        ival_D_end_of_week = Period(freq='D', year=2007, month=1, day=7)
+
+        ival_D_friday = Period(freq='D', year=2007, month=1, day=5)
+        ival_D_saturday = Period(freq='D', year=2007, month=1, day=6)
+        ival_D_sunday = Period(freq='D', year=2007, month=1, day=7)
+
+        # TODO: unused?
+        # ival_D_monday = Period(freq='D', year=2007, month=1, day=8)
+
+        ival_B_friday = Period(freq='B', year=2007, month=1, day=5)
+        ival_B_monday = Period(freq='B', year=2007, month=1, day=8)
+
+        ival_D_to_A = Period(freq='A', year=2007)
+
+        ival_Deoq_to_AJAN = Period(freq='A-JAN', year=2008)
+        ival_Deoq_to_AJUN = Period(freq='A-JUN', year=2007)
+        ival_Deoq_to_ADEC = Period(freq='A-DEC', year=2007)
+
+        ival_D_to_QEJAN = Period(freq="Q-JAN", year=2007, quarter=4)
+        ival_D_to_QEJUN = Period(freq="Q-JUN", year=2007, quarter=3)
+        ival_D_to_QEDEC = Period(freq="Q-DEC", year=2007, quarter=1)
+
+        ival_D_to_M = Period(freq='M', year=2007, month=1)
+        ival_D_to_W = Period(freq='W', year=2007, month=1, day=7)
+
+        ival_D_to_H_start = Period(freq='H', year=2007, month=1, day=1, hour=0)
+        ival_D_to_H_end = Period(freq='H', year=2007, month=1, day=1, hour=23)
+        ival_D_to_T_start = Period(freq='Min', year=2007, month=1, day=1,
+                                   hour=0, minute=0)
+        ival_D_to_T_end = Period(freq='Min', year=2007, month=1, day=1,
+                                 hour=23, minute=59)
+        ival_D_to_S_start = Period(freq='S', year=2007, month=1, day=1, hour=0,
+                                   minute=0, second=0)
+        ival_D_to_S_end = Period(freq='S', year=2007, month=1, day=1, hour=23,
+                                 minute=59, second=59)
+
+        self.assertEqual(ival_D.asfreq('A'), ival_D_to_A)
+
+        self.assertEqual(ival_D_end_of_quarter.asfreq('A-JAN'),
+                         ival_Deoq_to_AJAN)
+        self.assertEqual(ival_D_end_of_quarter.asfreq('A-JUN'),
+                         ival_Deoq_to_AJUN)
+        self.assertEqual(ival_D_end_of_quarter.asfreq('A-DEC'),
+                         ival_Deoq_to_ADEC)
+
+        self.assertEqual(ival_D_end_of_year.asfreq('A'), ival_D_to_A)
+        self.assertEqual(ival_D_end_of_quarter.asfreq('Q'), ival_D_to_QEDEC)
+        self.assertEqual(ival_D.asfreq("Q-JAN"), ival_D_to_QEJAN)
+        self.assertEqual(ival_D.asfreq("Q-JUN"), ival_D_to_QEJUN)
+        self.assertEqual(ival_D.asfreq("Q-DEC"), ival_D_to_QEDEC)
+        self.assertEqual(ival_D.asfreq('M'), ival_D_to_M)
+        self.assertEqual(ival_D_end_of_month.asfreq('M'), ival_D_to_M)
+        self.assertEqual(ival_D.asfreq('W'), ival_D_to_W)
+        self.assertEqual(ival_D_end_of_week.asfreq('W'), ival_D_to_W)
+
+        self.assertEqual(ival_D_friday.asfreq('B'), ival_B_friday)
+        self.assertEqual(ival_D_saturday.asfreq('B', 'S'), ival_B_friday)
+        self.assertEqual(ival_D_saturday.asfreq('B', 'E'), ival_B_monday)
+        self.assertEqual(ival_D_sunday.asfreq('B', 'S'), ival_B_friday)
+        self.assertEqual(ival_D_sunday.asfreq('B', 'E'), ival_B_monday)
+
+        self.assertEqual(ival_D.asfreq('H', 'S'), ival_D_to_H_start)
+        self.assertEqual(ival_D.asfreq('H', 'E'), ival_D_to_H_end)
+        self.assertEqual(ival_D.asfreq('Min', 'S'), ival_D_to_T_start)
+        self.assertEqual(ival_D.asfreq('Min', 'E'), ival_D_to_T_end)
+        self.assertEqual(ival_D.asfreq('S', 'S'), ival_D_to_S_start)
+        self.assertEqual(ival_D.asfreq('S', 'E'), ival_D_to_S_end)
+
+        self.assertEqual(ival_D.asfreq('D'), ival_D)
+
+    def test_conv_hourly(self):
+        # frequency conversion tests: from Hourly Frequency"
+
+        ival_H = Period(freq='H', year=2007, month=1, day=1, hour=0)
+        ival_H_end_of_year = Period(freq='H', year=2007, month=12, day=31,
+                                    hour=23)
+        ival_H_end_of_quarter = Period(freq='H', year=2007, month=3, day=31,
+                                       hour=23)
+        ival_H_end_of_month = Period(freq='H', year=2007, month=1, day=31,
+                                     hour=23)
+        ival_H_end_of_week = Period(freq='H', year=2007, month=1, day=7,
+                                    hour=23)
+        ival_H_end_of_day = Period(freq='H', year=2007, month=1, day=1,
+                                   hour=23)
+        ival_H_end_of_bus = Period(freq='H', year=2007, month=1, day=1,
+                                   hour=23)
+
+        ival_H_to_A = Period(freq='A', year=2007)
+        ival_H_to_Q = Period(freq='Q', year=2007, quarter=1)
+        ival_H_to_M = Period(freq='M', year=2007, month=1)
+        ival_H_to_W = Period(freq='W', year=2007, month=1, day=7)
+        ival_H_to_D = Period(freq='D', year=2007, month=1, day=1)
+        ival_H_to_B = Period(freq='B', year=2007, month=1, day=1)
+
+        ival_H_to_T_start = Period(freq='Min', year=2007, month=1, day=1,
+                                   hour=0, minute=0)
+        ival_H_to_T_end = Period(freq='Min', year=2007, month=1, day=1, hour=0,
+                                 minute=59)
+        ival_H_to_S_start = Period(freq='S', year=2007, month=1, day=1, hour=0,
+                                   minute=0, second=0)
+        ival_H_to_S_end = Period(freq='S', year=2007, month=1, day=1, hour=0,
+                                 minute=59, second=59)
+
+        self.assertEqual(ival_H.asfreq('A'), ival_H_to_A)
+        self.assertEqual(ival_H_end_of_year.asfreq('A'), ival_H_to_A)
+        self.assertEqual(ival_H.asfreq('Q'), ival_H_to_Q)
+        self.assertEqual(ival_H_end_of_quarter.asfreq('Q'), ival_H_to_Q)
+        self.assertEqual(ival_H.asfreq('M'), ival_H_to_M)
+        self.assertEqual(ival_H_end_of_month.asfreq('M'), ival_H_to_M)
+        self.assertEqual(ival_H.asfreq('W'), ival_H_to_W)
+        self.assertEqual(ival_H_end_of_week.asfreq('W'), ival_H_to_W)
+        self.assertEqual(ival_H.asfreq('D'), ival_H_to_D)
+        self.assertEqual(ival_H_end_of_day.asfreq('D'), ival_H_to_D)
+        self.assertEqual(ival_H.asfreq('B'), ival_H_to_B)
+        self.assertEqual(ival_H_end_of_bus.asfreq('B'), ival_H_to_B)
+
+        self.assertEqual(ival_H.asfreq('Min', 'S'), ival_H_to_T_start)
+        self.assertEqual(ival_H.asfreq('Min', 'E'), ival_H_to_T_end)
+        self.assertEqual(ival_H.asfreq('S', 'S'), ival_H_to_S_start)
+        self.assertEqual(ival_H.asfreq('S', 'E'), ival_H_to_S_end)
+
+        self.assertEqual(ival_H.asfreq('H'), ival_H)
+
+    def test_conv_minutely(self):
+        # frequency conversion tests: from Minutely Frequency"
+
+        ival_T = Period(freq='Min', year=2007, month=1, day=1, hour=0,
+                        minute=0)
+        ival_T_end_of_year = Period(freq='Min', year=2007, month=12, day=31,
+                                    hour=23, minute=59)
+        ival_T_end_of_quarter = Period(freq='Min', year=2007, month=3, day=31,
+                                       hour=23, minute=59)
+        ival_T_end_of_month = Period(freq='Min', year=2007, month=1, day=31,
+                                     hour=23, minute=59)
+        ival_T_end_of_week = Period(freq='Min', year=2007, month=1, day=7,
+                                    hour=23, minute=59)
+        ival_T_end_of_day = Period(freq='Min', year=2007, month=1, day=1,
+                                   hour=23, minute=59)
+        ival_T_end_of_bus = Period(freq='Min', year=2007, month=1, day=1,
+                                   hour=23, minute=59)
+        ival_T_end_of_hour = Period(freq='Min', year=2007, month=1, day=1,
+                                    hour=0, minute=59)
+
+        ival_T_to_A = Period(freq='A', year=2007)
+        ival_T_to_Q = Period(freq='Q', year=2007, quarter=1)
+        ival_T_to_M = Period(freq='M', year=2007, month=1)
+        ival_T_to_W = Period(freq='W', year=2007, month=1, day=7)
+        ival_T_to_D = Period(freq='D', year=2007, month=1, day=1)
+        ival_T_to_B = Period(freq='B', year=2007, month=1, day=1)
+        ival_T_to_H = Period(freq='H', year=2007, month=1, day=1, hour=0)
+
+        ival_T_to_S_start = Period(freq='S', year=2007, month=1, day=1, hour=0,
+                                   minute=0, second=0)
+        ival_T_to_S_end = Period(freq='S', year=2007, month=1, day=1, hour=0,
+                                 minute=0, second=59)
+
+        self.assertEqual(ival_T.asfreq('A'), ival_T_to_A)
+        self.assertEqual(ival_T_end_of_year.asfreq('A'), ival_T_to_A)
+        self.assertEqual(ival_T.asfreq('Q'), ival_T_to_Q)
+        self.assertEqual(ival_T_end_of_quarter.asfreq('Q'), ival_T_to_Q)
+        self.assertEqual(ival_T.asfreq('M'), ival_T_to_M)
+        self.assertEqual(ival_T_end_of_month.asfreq('M'), ival_T_to_M)
+        self.assertEqual(ival_T.asfreq('W'), ival_T_to_W)
+        self.assertEqual(ival_T_end_of_week.asfreq('W'), ival_T_to_W)
+        self.assertEqual(ival_T.asfreq('D'), ival_T_to_D)
+        self.assertEqual(ival_T_end_of_day.asfreq('D'), ival_T_to_D)
+        self.assertEqual(ival_T.asfreq('B'), ival_T_to_B)
+        self.assertEqual(ival_T_end_of_bus.asfreq('B'), ival_T_to_B)
+        self.assertEqual(ival_T.asfreq('H'), ival_T_to_H)
+        self.assertEqual(ival_T_end_of_hour.asfreq('H'), ival_T_to_H)
+
+        self.assertEqual(ival_T.asfreq('S', 'S'), ival_T_to_S_start)
+        self.assertEqual(ival_T.asfreq('S', 'E'), ival_T_to_S_end)
+
+        self.assertEqual(ival_T.asfreq('Min'), ival_T)
+
+    def test_conv_secondly(self):
+        # frequency conversion tests: from Secondly Frequency"
+
+        ival_S = Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0,
+                        second=0)
+        ival_S_end_of_year = Period(freq='S', year=2007, month=12, day=31,
+                                    hour=23, minute=59, second=59)
+        ival_S_end_of_quarter = Period(freq='S', year=2007, month=3, day=31,
+                                       hour=23, minute=59, second=59)
+        ival_S_end_of_month = Period(freq='S', year=2007, month=1, day=31,
+                                     hour=23, minute=59, second=59)
+        ival_S_end_of_week = Period(freq='S', year=2007, month=1, day=7,
+                                    hour=23, minute=59, second=59)
+        ival_S_end_of_day = Period(freq='S', year=2007, month=1, day=1,
+                                   hour=23, minute=59, second=59)
+        ival_S_end_of_bus = Period(freq='S', year=2007, month=1, day=1,
+                                   hour=23, minute=59, second=59)
+        ival_S_end_of_hour = Period(freq='S', year=2007, month=1, day=1,
+                                    hour=0, minute=59, second=59)
+        ival_S_end_of_minute = Period(freq='S', year=2007, month=1, day=1,
+                                      hour=0, minute=0, second=59)
+
+        ival_S_to_A = Period(freq='A', year=2007)
+        ival_S_to_Q = Period(freq='Q', year=2007, quarter=1)
+        ival_S_to_M = Period(freq='M', year=2007, month=1)
+        ival_S_to_W = Period(freq='W', year=2007, month=1, day=7)
+        ival_S_to_D = Period(freq='D', year=2007, month=1, day=1)
+        ival_S_to_B = Period(freq='B', year=2007, month=1, day=1)
+        ival_S_to_H = Period(freq='H', year=2007, month=1, day=1, hour=0)
+        ival_S_to_T = Period(freq='Min', year=2007, month=1, day=1, hour=0,
+                             minute=0)
+
+        self.assertEqual(ival_S.asfreq('A'), ival_S_to_A)
+        self.assertEqual(ival_S_end_of_year.asfreq('A'), ival_S_to_A)
+        self.assertEqual(ival_S.asfreq('Q'), ival_S_to_Q)
+        self.assertEqual(ival_S_end_of_quarter.asfreq('Q'), ival_S_to_Q)
+        self.assertEqual(ival_S.asfreq('M'), ival_S_to_M)
+        self.assertEqual(ival_S_end_of_month.asfreq('M'), ival_S_to_M)
+        self.assertEqual(ival_S.asfreq('W'), ival_S_to_W)
+        self.assertEqual(ival_S_end_of_week.asfreq('W'), ival_S_to_W)
+        self.assertEqual(ival_S.asfreq('D'), ival_S_to_D)
+        self.assertEqual(ival_S_end_of_day.asfreq('D'), ival_S_to_D)
+        self.assertEqual(ival_S.asfreq('B'), ival_S_to_B)
+        self.assertEqual(ival_S_end_of_bus.asfreq('B'), ival_S_to_B)
+        self.assertEqual(ival_S.asfreq('H'), ival_S_to_H)
+        self.assertEqual(ival_S_end_of_hour.asfreq('H'), ival_S_to_H)
+        self.assertEqual(ival_S.asfreq('Min'), ival_S_to_T)
+        self.assertEqual(ival_S_end_of_minute.asfreq('Min'), ival_S_to_T)
+
+        self.assertEqual(ival_S.asfreq('S'), ival_S)
+
+    def test_asfreq_mult(self):
+        # normal freq to mult freq
+        p = Period(freq='A', year=2007)
+        # ordinal will not change
+        for freq in ['3A', offsets.YearEnd(3)]:
+            result = p.asfreq(freq)
+            expected = Period('2007', freq='3A')
+
+            self.assertEqual(result, expected)
+            self.assertEqual(result.ordinal, expected.ordinal)
+            self.assertEqual(result.freq, expected.freq)
+        # ordinal will not change
+        for freq in ['3A', offsets.YearEnd(3)]:
+            result = p.asfreq(freq, how='S')
+            expected = Period('2007', freq='3A')
+
+            self.assertEqual(result, expected)
+            self.assertEqual(result.ordinal, expected.ordinal)
+            self.assertEqual(result.freq, expected.freq)
+
+        # mult freq to normal freq
+        p = Period(freq='3A', year=2007)
+        # ordinal will change because how=E is the default
+        for freq in ['A', offsets.YearEnd()]:
+            result = p.asfreq(freq)
+            expected = Period('2009', freq='A')
+
+            self.assertEqual(result, expected)
+            self.assertEqual(result.ordinal, expected.ordinal)
+            self.assertEqual(result.freq, expected.freq)
+        # ordinal will not change
+        for freq in ['A', offsets.YearEnd()]:
+            result = p.asfreq(freq, how='S')
+            expected = Period('2007', freq='A')
+
+            self.assertEqual(result, expected)
+            self.assertEqual(result.ordinal, expected.ordinal)
+            self.assertEqual(result.freq, expected.freq)
+
+        p = Period(freq='A', year=2007)
+        for freq in ['2M', offsets.MonthEnd(2)]:
+            result = p.asfreq(freq)
+            expected = Period('2007-12', freq='2M')
+
+            self.assertEqual(result, expected)
+            self.assertEqual(result.ordinal, expected.ordinal)
+            self.assertEqual(result.freq, expected.freq)
+        for freq in ['2M', offsets.MonthEnd(2)]:
+            result = p.asfreq(freq, how='S')
+            expected = Period('2007-01', freq='2M')
+
+            self.assertEqual(result, expected)
+            self.assertEqual(result.ordinal, expected.ordinal)
+            self.assertEqual(result.freq, expected.freq)
+
+        p = Period(freq='3A', year=2007)
+        for freq in ['2M', offsets.MonthEnd(2)]:
+            result = p.asfreq(freq)
+            expected = Period('2009-12', freq='2M')
+
+            self.assertEqual(result, expected)
+            self.assertEqual(result.ordinal, expected.ordinal)
+            self.assertEqual(result.freq, expected.freq)
+        for freq in ['2M', offsets.MonthEnd(2)]:
+            result = p.asfreq(freq, how='S')
+            expected = Period('2007-01', freq='2M')
+
+            self.assertEqual(result, expected)
+            self.assertEqual(result.ordinal, expected.ordinal)
+            self.assertEqual(result.freq, expected.freq)
+
+    def test_asfreq_combined(self):
+        # normal freq to combined freq
+        p = Period('2007', freq='H')
+
+        # ordinal will not change
+        expected = Period('2007', freq='25H')
+        for freq, how in zip(['1D1H', '1H1D'], ['E', 'S']):
+            result = p.asfreq(freq, how=how)
+            self.assertEqual(result, expected)
+            self.assertEqual(result.ordinal, expected.ordinal)
+            self.assertEqual(result.freq, expected.freq)
+
+        # combined freq to normal freq
+        p1 = Period(freq='1D1H', year=2007)
+        p2 = Period(freq='1H1D', year=2007)
+
+        # ordinal will change because how=E is the default
+        result1 = p1.asfreq('H')
+        result2 = p2.asfreq('H')
+        expected = Period('2007-01-02', freq='H')
+        self.assertEqual(result1, expected)
+        self.assertEqual(result1.ordinal, expected.ordinal)
+        self.assertEqual(result1.freq, expected.freq)
+        self.assertEqual(result2, expected)
+        self.assertEqual(result2.ordinal, expected.ordinal)
+        self.assertEqual(result2.freq, expected.freq)
+
+        # ordinal will not change
+        result1 = p1.asfreq('H', how='S')
+        result2 = p2.asfreq('H', how='S')
+        expected = Period('2007-01-01', freq='H')
+        self.assertEqual(result1, expected)
+        self.assertEqual(result1.ordinal, expected.ordinal)
+        self.assertEqual(result1.freq, expected.freq)
+        self.assertEqual(result2, expected)
+        self.assertEqual(result2.ordinal, expected.ordinal)
+        self.assertEqual(result2.freq, expected.freq)
+
+    def test_asfreq_MS(self):
+        initial = Period("2013")
+
+        self.assertEqual(initial.asfreq(freq="M", how="S"),
+                         Period('2013-01', 'M'))
+
+        msg = pd.tseries.frequencies._INVALID_FREQ_ERROR
+        with self.assertRaisesRegexp(ValueError, msg):
+            initial.asfreq(freq="MS", how="S")
+
+        with tm.assertRaisesRegexp(ValueError, msg):
+            pd.Period('2013-01', 'MS')
+
+        self.assertTrue(_period_code_map.get("MS") is None)
