commit dd11fc22a3e76721e2c6634cc7c68840f5f1b636
Author: Matthew Roeschke <emailformattr@gmail.com>
Date:   Fri Jun 28 20:56:04 2019 -0500

    DEPR: Series.item and Index.item (#27112)
    
    * Deprecate item
    
    * Add whatsnew
    
    * Use assert_produces_warning instead

diff --git a/doc/source/whatsnew/v0.25.0.rst b/doc/source/whatsnew/v0.25.0.rst
index 28bf796be..e12088a7a 100644
--- a/doc/source/whatsnew/v0.25.0.rst
+++ b/doc/source/whatsnew/v0.25.0.rst
@@ -608,6 +608,7 @@ Other deprecations
 - :attr:`Index.dtype_str` is deprecated. (:issue:`18262`)
 - :attr:`Series.imag` and :attr:`Series.real` are deprecated. (:issue:`18262`)
 - :meth:`Series.put` is deprecated. (:issue:`18262`)
+- :meth:`Index.item` and :meth:`Series.item` is deprecated. (:issue:`18262`)
 
 .. _whatsnew_0250.prior_deprecations:
 
diff --git a/pandas/core/base.py b/pandas/core/base.py
index 30e800cb9..93db65def 100644
--- a/pandas/core/base.py
+++ b/pandas/core/base.py
@@ -693,11 +693,15 @@ class IndexOpsMixin:
         """
         Return the first element of the underlying data as a python scalar.
 
+        .. deprecated 0.25.0
+
         Returns
         -------
         scalar
             The first element of %(klass)s.
         """
+        warnings.warn('`item` has been deprecated and will be removed in a '
+                      'future version', FutureWarning, stacklevel=2)
         return self.values.item()
 
     @property
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index 6a7085366..4b7582fcf 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -57,13 +57,6 @@ _index_doc_kwargs = dict(klass='Index', inplace='',
 _index_shared_docs = dict()
 
 
-def _try_get_item(x):
-    try:
-        return x.item()
-    except AttributeError:
-        return x
-
-
 def _make_comparison_op(op, cls):
     def cmp_method(self, other):
         if isinstance(other, (np.ndarray, Index, ABCSeries)):
diff --git a/pandas/core/indexes/numeric.py b/pandas/core/indexes/numeric.py
index a228895e5..5f9c1f228 100644
--- a/pandas/core/indexes/numeric.py
+++ b/pandas/core/indexes/numeric.py
@@ -16,7 +16,6 @@ from pandas.core.dtypes.missing import isna
 
 from pandas.core import algorithms
 import pandas.core.common as com
-import pandas.core.indexes.base as ibase
 from pandas.core.indexes.base import (
     Index, InvalidIndexError, _index_shared_docs)
 from pandas.core.ops import get_op_result_name
@@ -442,7 +441,9 @@ class Float64Index(NumericIndex):
             return np.isnan(other) and self.hasnans
         except ValueError:
             try:
-                return len(other) <= 1 and ibase._try_get_item(other) in self
+                return len(other) <= 1 and other.item() in self
+            except AttributeError:
+                return len(other) <= 1 and other in self
             except TypeError:
                 pass
         except TypeError:
@@ -457,9 +458,7 @@ class Float64Index(NumericIndex):
                 nan_idxs = self._nan_idxs
                 try:
                     return nan_idxs.item()
-                except (ValueError, IndexError):
-                    # should only need to catch ValueError here but on numpy
-                    # 1.7 .item() can raise IndexError when NaNs are present
+                except ValueError:
                     if not len(nan_idxs):
                         raise KeyError(key)
                     return nan_idxs
diff --git a/pandas/core/indexes/period.py b/pandas/core/indexes/period.py
index b20b0c6f8..dc11099c3 100644
--- a/pandas/core/indexes/period.py
+++ b/pandas/core/indexes/period.py
@@ -874,7 +874,12 @@ class PeriodIndex(DatetimeIndexOpsMixin, Int64Index, PeriodDelegateMixin):
         """
         return the first element of the underlying data as a python
         scalar
+
+        .. deprecated 0.25.0
+
         """
+        warnings.warn('`item` has been deprecated and will be removed in a '
+                      'future version', FutureWarning, stacklevel=2)
         # TODO(DatetimeArray): remove
         if len(self) == 1:
             return self[0]
diff --git a/pandas/tests/series/test_api.py b/pandas/tests/series/test_api.py
index fac796fbf..1cd5bd09a 100644
--- a/pandas/tests/series/test_api.py
+++ b/pandas/tests/series/test_api.py
@@ -419,10 +419,11 @@ class TestSeriesMisc(TestData, SharedWithSparse):
         tm.assert_series_equal(result, expected)
 
         # .item()
-        s = Series([1])
-        result = s.item()
-        assert result == 1
-        assert s.item() == s.iloc[0]
+        with tm.assert_produces_warning(FutureWarning):
+            s = Series([1])
+            result = s.item()
+            assert result == 1
+            assert s.item() == s.iloc[0]
 
         # using an ndarray like function
         s = Series(np.random.randn(10))
diff --git a/pandas/tests/test_base.py b/pandas/tests/test_base.py
index d82b20580..f9a1bb97c 100644
--- a/pandas/tests/test_base.py
+++ b/pandas/tests/test_base.py
@@ -326,13 +326,15 @@ class TestIndexOps(Ops):
                 pass
 
             with pytest.raises(ValueError):
-                o.item()  # len > 1
+                with tm.assert_produces_warning(FutureWarning):
+                    o.item()  # len > 1
 
             assert o.ndim == 1
             assert o.size == len(o)
 
-        assert Index([1]).item() == 1
-        assert Series([1]).item() == 1
+        with tm.assert_produces_warning(FutureWarning):
+            assert Index([1]).item() == 1
+            assert Series([1]).item() == 1
 
     def test_value_counts_unique_nunique(self):
         for orig in self.objs:
