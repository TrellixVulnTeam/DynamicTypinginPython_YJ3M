commit eadaa403be60df0d2852ac6ee2c5ed1ca78aeb7a
Author: Marco Gorelli <33491632+MarcoGorelli@users.noreply.github.com>
Date:   Fri Dec 20 14:59:05 2019 +0000

    [CLN] remove now-unnecessary td.skip_if_no(pathlib) (#30376)

diff --git a/pandas/tests/io/pytables/test_store.py b/pandas/tests/io/pytables/test_store.py
index d9a76fe97..3cd9d9cdd 100644
--- a/pandas/tests/io/pytables/test_store.py
+++ b/pandas/tests/io/pytables/test_store.py
@@ -3,6 +3,7 @@ from datetime import timedelta
 from distutils.version import LooseVersion
 from io import BytesIO
 import os
+from pathlib import Path
 import re
 from warnings import catch_warnings, simplefilter
 
@@ -4594,12 +4595,9 @@ class TestHDFStore:
             with pytest.raises(ValueError):
                 read_hdf(path)
 
-    @td.skip_if_no("pathlib")
     def test_read_from_pathlib_path(self, setup_path):
 
         # GH11773
-        from pathlib import Path
-
         expected = DataFrame(
             np.random.rand(4, 5), index=list("abcd"), columns=list("ABCDE")
         )
diff --git a/pandas/tests/io/sas/test_sas7bdat.py b/pandas/tests/io/sas/test_sas7bdat.py
index e37561c86..49af18d29 100644
--- a/pandas/tests/io/sas/test_sas7bdat.py
+++ b/pandas/tests/io/sas/test_sas7bdat.py
@@ -1,5 +1,6 @@
 import io
 import os
+from pathlib import Path
 
 import numpy as np
 import pytest
@@ -68,10 +69,7 @@ class TestSAS7BDAT:
                 tm.assert_frame_equal(df, df0.iloc[2:5, :])
                 rdr.close()
 
-    @td.skip_if_no("pathlib")
     def test_path_pathlib(self):
-        from pathlib import Path
-
         for j in 0, 1:
             df0 = self.data[j]
             for k in self.test_ix[j]:
diff --git a/pandas/tests/io/test_common.py b/pandas/tests/io/test_common.py
index a15eac89e..d2633ea06 100644
--- a/pandas/tests/io/test_common.py
+++ b/pandas/tests/io/test_common.py
@@ -4,6 +4,7 @@ Tests for the pandas.io.common functionalities
 from io import StringIO
 import mmap
 import os
+from pathlib import Path
 
 import pytest
 
@@ -27,14 +28,7 @@ class CustomFSPath:
 
 
 # Functions that consume a string path and return a string or path-like object
-path_types = [str, CustomFSPath]
-
-try:
-    from pathlib import Path
-
-    path_types.append(Path)
-except ImportError:
-    pass
+path_types = [str, CustomFSPath, Path]
 
 try:
     from py.path import local as LocalPath
@@ -73,7 +67,6 @@ bar2,12,13,14,15
         assert expanded_name == filename
         assert os.path.expanduser(filename) == expanded_name
 
-    @td.skip_if_no("pathlib")
     def test_stringify_path_pathlib(self):
         rel_path = icom._stringify_path(Path("."))
         assert rel_path == "."
