commit 14f25bb8b7ba0c709dd36d79966abea648d0f48b
Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
Date:   Tue Oct 23 08:04:19 2018 +0200

    Revert "implement TimedeltaArray asm8, to_timedelta64 (#23205)" (#23290)
    
    This reverts commit 6e507133916fc5a8434e21eb267043fc9a3ba8d7.

diff --git a/pandas/core/arrays/datetimes.py b/pandas/core/arrays/datetimes.py
index b0b139708..ac9048351 100644
--- a/pandas/core/arrays/datetimes.py
+++ b/pandas/core/arrays/datetimes.py
@@ -707,22 +707,6 @@ class DatetimeArrayMixin(dtl.DatetimeLikeArrayMixin):
     # ----------------------------------------------------------------
     # Conversion Methods - Vectorized analogues of Timestamp methods
 
-    def to_datetime64(self):
-        """
-        Return numpy datetime64[ns] representation of self.  For timezone-aware
-        cases, the returned array represents UTC timestamps.
-
-        Returns
-        -------
-        ndarray[datetime64[ns]]
-        """
-        return self.asi8.view('M8[ns]')
-
-    @property
-    def asm8(self):
-        """Vectorized analogue of Timestamp.asm8"""
-        return self.to_datetime64()
-
     def to_pydatetime(self):
         """
         Return Datetime Array/Index as object ndarray of datetime.datetime
diff --git a/pandas/core/arrays/timedeltas.py b/pandas/core/arrays/timedeltas.py
index 522766804..eb7dabdc0 100644
--- a/pandas/core/arrays/timedeltas.py
+++ b/pandas/core/arrays/timedeltas.py
@@ -352,31 +352,6 @@ class TimedeltaArrayMixin(dtl.DatetimeLikeArrayMixin):
         """
         return tslibs.ints_to_pytimedelta(self.asi8)
 
-    def to_timedelta64(self):
-        """
-        Return numpy array with timedelta64[ns] dtype
-
-        Returns
-        -------
-        ndarray[timedelta64[ns]]
-
-        Notes
-        -----
-        This returns a view on self, not a copy.
-
-        See also
-        --------
-        Timedelta.to_timedelta64
-        """
-        return self.asi8.view('m8[ns]')
-
-    @property
-    def asm8(self):
-        """
-        Vectorized analogue of Timedelta.asm8
-        """
-        return self.to_timedelta64()
-
     days = _field_accessor("days", "days",
                            " Number of days for each element. ")
     seconds = _field_accessor("seconds", "seconds",
diff --git a/pandas/tests/arrays/test_datetimelike.py b/pandas/tests/arrays/test_datetimelike.py
index eeb173dfa..d0099aed0 100644
--- a/pandas/tests/arrays/test_datetimelike.py
+++ b/pandas/tests/arrays/test_datetimelike.py
@@ -106,30 +106,6 @@ class TestDatetimeArray(object):
         #  an EA-specific tm.assert_ function
         tm.assert_index_equal(pd.Index(result), pd.Index(expected))
 
-    def test_asm8(self, datetime_index):
-        dti = datetime_index
-        arr = DatetimeArrayMixin(dti)
-
-        expected = np.array([x.asm8 for x in dti], dtype='M8[ns]')
-
-        result = dti.asm8
-        tm.assert_numpy_array_equal(result, expected)
-
-        result = arr.asm8
-        tm.assert_numpy_array_equal(result, expected)
-
-    def test_to_datetime64(self, datetime_index):
-        dti = datetime_index
-        arr = DatetimeArrayMixin(dti)
-
-        expected = np.array([x.asm8 for x in dti], dtype='M8[ns]')
-
-        result = dti.to_datetime64()
-        tm.assert_numpy_array_equal(result, expected)
-
-        result = arr.to_datetime64()
-        tm.assert_numpy_array_equal(result, expected)
-
     @pytest.mark.parametrize('propname', pd.DatetimeIndex._bool_ops)
     def test_bool_properties(self, datetime_index, propname):
         # in this case _bool_ops is just `is_leap_year`
@@ -172,30 +148,6 @@ class TestTimedeltaArray(object):
         assert asobj.dtype == 'O'
         assert list(asobj) == list(tdi)
 
-    def test_asm8(self):
-        tdi = pd.TimedeltaIndex(['1 Hour', '3 Hours'])
-        arr = TimedeltaArrayMixin(tdi)
-
-        expected = np.array([3600, 10800], dtype='m8[ns]') * 1e9
-
-        result = tdi.asm8
-        tm.assert_numpy_array_equal(result, expected)
-
-        result = arr.asm8
-        tm.assert_numpy_array_equal(result, expected)
-
-    def test_to_timedelta64(self):
-        tdi = pd.TimedeltaIndex(['1 Hour', '3 Hours'])
-        arr = TimedeltaArrayMixin(tdi)
-
-        expected = np.array([3600, 10800], dtype='m8[ns]') * 1e9
-
-        result = tdi.to_timedelta64()
-        tm.assert_numpy_array_equal(result, expected)
-
-        result = arr.to_timedelta64()
-        tm.assert_numpy_array_equal(result, expected)
-
     def test_to_pytimedelta(self, timedelta_index):
         tdi = timedelta_index
         arr = TimedeltaArrayMixin(tdi)
