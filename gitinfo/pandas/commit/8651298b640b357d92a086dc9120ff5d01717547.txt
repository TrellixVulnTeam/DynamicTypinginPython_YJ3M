commit 8651298b640b357d92a086dc9120ff5d01717547
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Jul 3 20:26:51 2011 -0400

    test coverage

diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 9dfab3907..a9062a836 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -207,7 +207,7 @@ class WidePanel(Panel, PandasGeneric):
             elif dtype is not None:
                 # no choice but to copy
                 mgr = mgr.cast(dtype)
-        elif isinstance(data, np.ndarray):
+        elif isinstance(data, (np.ndarray, list)):
             mgr = self._init_matrix(data, [items, major_axis, minor_axis],
                                     dtype=dtype, copy=copy)
         else: # pragma: no cover
@@ -376,7 +376,7 @@ class WidePanel(Panel, PandasGeneric):
             self._data = state
         elif len(state) == 4: # pragma: no cover
             self._unpickle_panel_compat(state)
-        else:
+        else: # pragma: no cover
             raise ValueError('unrecognized pickle')
 
     def _unpickle_panel_compat(self, state): # pragma: no cover
@@ -550,10 +550,6 @@ class WidePanel(Panel, PandasGeneric):
 
             return WidePanel.from_dict(result)
         else:
-            # Float type values
-            if len(self.items) == 0:
-                return self
-
             new_data = self._data.fillna(value)
             return WidePanel(new_data)
 
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index b97c60b9e..35eeebb2d 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -334,6 +334,21 @@ class TestWidePanel(unittest.TestCase, PanelTests,
         self.assert_(wp._data is not self.panel._data)
         assert_panel_equal(wp, self.panel)
 
+        # strings handled prop
+        wp = WidePanel([[['foo', 'foo', 'foo',],
+                         ['foo', 'foo', 'foo']]])
+        self.assert_(wp.values.dtype == np.object_)
+
+        vals = self.panel.values
+
+        # no copy
+        wp = WidePanel(vals)
+        self.assert_(wp.values is vals)
+
+        # copy
+        wp = WidePanel(vals, copy=True)
+        self.assert_(wp.values is not vals)
+
     def test_constructor_cast(self):
         casted = WidePanel(self.panel._data, dtype=int)
         casted2 = WidePanel(self.panel.values, dtype=int)
@@ -443,6 +458,15 @@ class TestWidePanel(unittest.TestCase, PanelTests,
         self.panel['ItemG'] = 1
         self.panel['ItemE'] = 1
 
+        # object dtype
+        self.panel['ItemQ'] = 'foo'
+        self.assert_(self.panel['ItemQ'].values.dtype == np.object_)
+
+        # boolean dtype
+        self.panel['ItemP'] = self.panel['ItemA'] > 0
+        self.assert_(self.panel['ItemP'].values.dtype == np.bool_)
+
+
     def test_conform(self):
         df = self.panel['ItemA'][:-5].filter(items=['A', 'B'])
         conformed = self.panel.conform(df)
@@ -507,6 +531,10 @@ class TestWidePanel(unittest.TestCase, PanelTests,
         assert_frame_equal(filled['ItemA'],
                            self.panel['ItemA'].fillna(method='backfill'))
 
+        empty = self.panel.reindex(items=[])
+        filled = empty.fillna(0)
+        assert_panel_equal(filled, empty)
+
     def test_combinePanel_with_long(self):
         lng = self.panel.to_long(filter_observations=False)
         result = self.panel.add(lng)
