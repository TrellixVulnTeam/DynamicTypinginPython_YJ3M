commit 59315380b5cc3a10c68ec281569b37ceb4f4c99f
Author: y-p <yoval@gmx.com>
Date:   Thu Dec 13 09:52:37 2012 +0200

    ENH: implement option_context context manager

diff --git a/pandas/core/config.py b/pandas/core/config.py
index 5a2e6ef09..87f0b2050 100644
--- a/pandas/core/config.py
+++ b/pandas/core/config.py
@@ -67,37 +67,33 @@ _reserved_keys = ['all']  # keys which have a special meaning
 ##########################################
 # User API
 
-def _get_option(pat):
+def _get_single_key(pat, silent):
     keys = _select_options(pat)
     if len(keys) == 0:
-        _warn_if_deprecated(pat)
+        if not silent:
+            _warn_if_deprecated(pat)
         raise KeyError('No such keys(s)')
     if len(keys) > 1:
         raise KeyError('Pattern matched multiple keys')
     key = keys[0]
 
-    _warn_if_deprecated(key)
+    if not silent:
+        _warn_if_deprecated(key)
 
     key = _translate_key(key)
 
+    return key
+
+def _get_option(pat, silent=False):
+    key = _get_single_key(pat,silent)
+
     # walk the nested dict
     root, k = _get_root(key)
-
     return root[k]
 
 
-def _set_option(pat, value):
-
-    keys = _select_options(pat)
-    if len(keys) == 0:
-        _warn_if_deprecated(pat)
-        raise KeyError('No such keys(s)')
-    if len(keys) > 1:
-        raise KeyError('Pattern matched multiple keys')
-    key = keys[0]
-
-    _warn_if_deprecated(key)
-    key = _translate_key(key)
+def _set_option(pat, value, silent=False):
+    key = _get_single_key(pat,silent)
 
     o = _get_registered_option(key)
     if o and o.validator:
@@ -107,7 +103,7 @@ def _set_option(pat, value):
     root, k = _get_root(key)
     root[k] = value
 
-    if o and o.cb:
+    if o.cb:
         o.cb(key)
 
 
@@ -275,6 +271,28 @@ describe_option = CallableDyanmicDoc(_describe_option, _describe_option_tmpl)
 ######################################################
 # Functions for use by pandas developers, in addition to User - api
 
+class option_context(object):
+    def __init__(self,*args):
+        assert len(args) % 2 == 0 and len(args)>=2, \
+           "Need to invoke as option_context(pat,val,[(pat,val),..))."
+        ops = zip(args[::2],args[1::2])
+        undo=[]
+        for pat,val in ops:
+            undo.append((pat,_get_option(pat,silent=True)))
+
+        self.undo = undo
+
+        for pat,val in ops:
+            _set_option(pat,val,silent=True)
+
+    def __enter__(self):
+        pass
+
+    def __exit__(self, *args):
+        if self.undo:
+            for pat, val in self.undo:
+                _set_option(pat, val)
+
 def register_option(key, defval, doc='', validator=None, cb=None):
     """Register an option in the package-wide pandas config object
 
diff --git a/pandas/tests/test_config.py b/pandas/tests/test_config.py
index 828bc85df..14d0a115c 100644
--- a/pandas/tests/test_config.py
+++ b/pandas/tests/test_config.py
@@ -307,6 +307,21 @@ class TestConfig(unittest.TestCase):
         self.assertEqual(k[-1],"d.b")
 
 
+    def test_set_ContextManager(self):
+        def eq(val):
+            self.assertEqual(self.cf.get_option("a"),val)
+
+        self.cf.register_option('a',0)
+        eq(0)
+        with self.cf.option_context("a",15):
+            eq(15)
+            with self.cf.option_context("a",25):
+                eq(25)
+            eq(15)
+        eq(0)
+
+        self.cf.set_option("a",17)
+        eq(17)
 
 # fmt.reset_printoptions and fmt.set_printoptions were altered
 # to use core.config, test_format exercises those paths.
