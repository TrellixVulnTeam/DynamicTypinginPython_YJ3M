commit 9ada28ad80338df1a4fd957d8f9516a424c30427
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Dec 7 22:47:52 2011 -0500

    BUG: DateRange union bug caused by DateOffset __ne__ not being implemented, GH #456

diff --git a/RELEASE.rst b/RELEASE.rst
index 49bc73092..ee114c119 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -57,6 +57,7 @@ pandas 0.6.1
   - Don't "accidentally" upcast scalar values when indexing using .ix (GH #431)
   - Fix groupby exception raised with as_index=False and single column selected
     (GH #421)
+  - Implement DateOffset.__ne__ causing downstream bug (GH #456)
 
 Thanks
 ------
diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index f02939b3f..315f1b2d3 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -159,6 +159,9 @@ class DateOffset(object):
     def __eq__(self, other):
         return self._params() == other._params()
 
+    def __ne__(self, other):
+        return not self == other
+
     def __hash__(self):
         return hash(self._params())
 
diff --git a/pandas/tests/test_daterange.py b/pandas/tests/test_daterange.py
index 2857f8b5a..6aac1a49d 100644
--- a/pandas/tests/test_daterange.py
+++ b/pandas/tests/test_daterange.py
@@ -306,6 +306,15 @@ class TestDateRange(unittest.TestCase):
     def test_equals(self):
         self.assertFalse(self.rng.equals(list(self.rng)))
 
+    def test_daterange_bug_456(self):
+        # GH #456
+        rng1 = DateRange('12/5/2011', '12/5/2011')
+        rng2 = DateRange('12/2/2011', '12/5/2011')
+        rng2.offset = datetools.BDay()
+
+        result = rng1.union(rng2)
+        self.assert_(type(result) == DateRange)
+
 def _skip_if_no_pytz():
     try:
         import pytz
diff --git a/pandas/tests/test_datetools.py b/pandas/tests/test_datetools.py
index 38673fef3..e05e883f5 100644
--- a/pandas/tests/test_datetools.py
+++ b/pandas/tests/test_datetools.py
@@ -192,6 +192,12 @@ class TestBusinessDay(unittest.TestCase):
     def test_apply_corner(self):
         self.assertRaises(Exception, BDay().apply, BMonthEnd())
 
+    def test_offsets_compare_equal(self):
+        # root cause of #456
+        offset1 = BDay()
+        offset2 = BDay()
+        self.assertFalse(offset1 != offset2)
+
 def assertOnOffset(offset, date, expected):
     actual = offset.onOffset(date)
     assert actual == expected
@@ -253,6 +259,11 @@ class TestWeek(unittest.TestCase):
                     expected = False
             assertOnOffset(offset, date, expected)
 
+    def test_offsets_compare_equal(self):
+        # root cause of #456
+        offset1 = Week()
+        offset2 = Week()
+        self.assertFalse(offset1 != offset2)
 
 class TestWeekOfMonth(unittest.TestCase):
 
@@ -377,6 +388,12 @@ class TestBMonthEnd(unittest.TestCase):
         for offset, date, expected in tests:
             assertOnOffset(offset, date, expected)
 
+    def test_offsets_compare_equal(self):
+        # root cause of #456
+        offset1 = BMonthEnd()
+        offset2 = BMonthEnd()
+        self.assertFalse(offset1 != offset2)
+
 class TestMonthEnd(unittest.TestCase):
 
     def test_offset(self):
