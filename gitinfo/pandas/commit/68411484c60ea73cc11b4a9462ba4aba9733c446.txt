commit 68411484c60ea73cc11b4a9462ba4aba9733c446
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Nov 12 23:24:20 2011 -0500

    ENH: add DataFrame.get_value/put_value and micro-performance tweaks, GH #360 and #361 complete

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 936e78163..e4e071816 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -867,7 +867,7 @@ class DataFrame(NDFrame):
     #----------------------------------------------------------------------
     # Getting and setting elements
 
-    def get(self, index, col):
+    def get_value(self, index, col):
         """
         Retrieve single value at passed column and index
 
@@ -880,7 +880,23 @@ class DataFrame(NDFrame):
         -------
         element : scalar value
         """
-        return self._data.get_scalar((col, index))
+        iloc = self.index.get_loc(index)
+        vals = self._getitem_single(col).values
+        return vals[iloc]
+
+    def put_value(self, index, col, value):
+        """
+        Put single value at passed column and index
+
+        Parameters
+        ----------
+        index : row label
+        col : column label
+        value : scalar value
+        """
+        iloc = self.index.get_loc(index)
+        vals = self._getitem_single(col).values
+        vals[iloc] = value
 
     def __getitem__(self, key):
         # slice rows
@@ -942,15 +958,15 @@ class DataFrame(NDFrame):
             return self._getitem_single(key)
 
     def _getitem_single(self, key):
-        res = self._series_cache.get(key)
-        if res is not None:
+        cache = self._series_cache
+        try:
+            return cache[key]
+        except:
+            values = self._data.get(key)
+            res = Series(values, index=self.index, name=key)
+            cache[key] = res
             return res
 
-        values = self._data.get(key)
-        res = Series(values, index=self.index, name=key)
-        self._series_cache[key] = res
-        return res
-
     def __getattr__(self, name):
         """After regular attribute access, try looking up the name of a column.
         This allows simpler access to columns for interactive use."""
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 55900f4bf..8abc837e0 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1485,10 +1485,7 @@ class MultiIndex(Index):
 
         result_names = self.names if self.names == other.names else None
 
-        self_tuples = self.get_tuple_index()
-        other_tuples = other.get_tuple_index()
-
-        uniq_tuples = lib.fast_unique_multiple([self_tuples, other_tuples])
+        uniq_tuples = lib.fast_unique_multiple([self.values, other.values])
         return MultiIndex.from_arrays(zip(*uniq_tuples), sortorder=0,
                                       names=result_names)
 
@@ -1511,8 +1508,8 @@ class MultiIndex(Index):
 
         result_names = self.names if self.names == other.names else None
 
-        self_tuples = self.get_tuple_index()
-        other_tuples = other.get_tuple_index()
+        self_tuples = self.values
+        other_tuples = other.values
         uniq_tuples = sorted(set(self_tuples) & set(other_tuples))
         if len(uniq_tuples) == 0:
             return MultiIndex(levels=[[]]*self.nlevels,
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 4d7cb30c8..66b2c3009 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -660,13 +660,19 @@ class CheckIndexing(object):
     def test_setitem_boolean_missing(self):
         pass
 
-    def test_get_scalar(self):
+    def test_get_value(self):
         for idx in self.frame.index:
             for col in self.frame.columns:
-                result = self.frame.get(idx, col)
+                result = self.frame.get_value(idx, col)
                 expected = self.frame[col][idx]
                 self.assertEqual(result, expected)
 
+    def test_put_value(self):
+        for idx in self.frame.index:
+            for col in self.frame.columns:
+                self.frame.put_value(idx, col, 1)
+                self.assertEqual(self.frame[col][idx], 1)
+
 _seriesd = tm.getSeriesData()
 _tsd = tm.getTimeSeriesData()
 
