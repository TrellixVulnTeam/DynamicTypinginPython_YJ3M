commit 38f59de2d410bcd871d645af1a35e6a05144fa87
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Dec 28 22:51:34 2011 -0500

    BUG: fix aggregating multiple levels in DataFrame stat ops, use cythonized groupers when possible for > 15x speedup, GH #545

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 16a0236b0..a856292df 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -3108,6 +3108,14 @@ class DataFrame(NDFrame):
                             numeric_only=None)
     _add_stat_doc(skew, 'unbiased skewness', 'skew')
 
+    def _agg_by_level(self, name, axis=0, level=0, skipna=True):
+        grouped = self.groupby(level=level, axis=axis)
+        if hasattr(grouped, name) and skipna:
+            return getattr(grouped, name)()
+        method = getattr(type(self), name)
+        applyf = lambda x: method(x, axis=axis, skipna=skipna)
+        return grouped.aggregate(applyf)
+
     def _reduce(self, op, axis=0, skipna=True, numeric_only=None):
         f = lambda x: op(x, axis=axis, skipna=skipna, copy=True)
         labels = self._get_agg_axis(axis)
@@ -3180,11 +3188,6 @@ class DataFrame(NDFrame):
         result = [index[i] if i >= 0 else np.nan for i in indices]
         return Series(result, index=self._get_agg_axis(axis))
 
-    def _agg_by_level(self, name, axis=0, level=0, skipna=True):
-        method = getattr(type(self), name)
-        applyf = lambda x: method(x, axis=axis, skipna=skipna)
-        return self.groupby(level=level, axis=axis).aggregate(applyf)
-
     def _get_agg_axis(self, axis_num):
         if axis_num == 0:
             return self.columns
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 9e350fbea..02523d2f9 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -401,6 +401,9 @@ class GroupBy(object):
             except TypeError:
                 continue
 
+        if len(output) == 0:
+            return self._python_apply_general(func, *args, **kwargs)
+
         mask = counts.ravel() > 0
         for name, result in output.iteritems():
             output[name] = result[mask]
@@ -579,7 +582,7 @@ class Grouping(object):
 
     @cache_readonly
     def indices(self):
-        return lib.groupby_indices(self.grouper)
+        return _groupby_indices(self.grouper)
 
     @property
     def labels(self):
@@ -608,7 +611,7 @@ class Grouping(object):
         return Index([self.ids[i] for i in range(len(self.ids))])
 
     def _make_labels(self):
-        ids, labels, counts  = lib.group_labels(self.grouper)
+        ids, labels, counts  = _group_labels(self.grouper)
         sids, slabels, scounts = sort_group_labels(ids, labels, counts)
         self._labels = slabels
         self._ids = sids
@@ -1413,6 +1416,16 @@ _cython_transforms = {
 #----------------------------------------------------------------------
 # sorting levels...cleverly?
 
+def _groupby_indices(values):
+    if values.dtype != np.object_:
+        values = values.astype('O')
+    return lib.groupby_indices(values)
+
+def _group_labels(values):
+    if values.dtype != np.object_:
+        values = values.astype('O')
+    return lib.group_labels(values)
+
 def sort_group_labels(ids, labels, counts):
     n = len(ids)
     rng = np.arange(n)
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index c6df1c2b8..c87fc9ba9 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -43,6 +43,10 @@ class TestMultiLevel(unittest.TestCase):
         self.tdf = tm.makeTimeDataFrame()
         self.ymd = self.tdf.groupby([lambda x: x.year, lambda x: x.month,
                                      lambda x: x.day]).sum()
+
+        # use Int64Index, to make sure things work
+        self.ymd.index.levels = [lev.astype('i8')
+                                 for lev in self.ymd.index.levels]
         self.ymd.index.names = ['year', 'month', 'day']
 
     def test_append(self):
@@ -721,6 +725,11 @@ class TestMultiLevel(unittest.TestCase):
                                            skipna=skipna)
             assert_frame_equal(leftside, rightside)
 
+    def test_frame_series_agg_multiple_levels(self):
+        result = self.ymd.sum(level=['year', 'month'])
+        expected = self.ymd.groupby(level=['year', 'month']).sum()
+        assert_frame_equal(result, expected)
+
     def test_groupby_multilevel(self):
         result = self.ymd.groupby(level=[0, 1]).mean()
 
diff --git a/vb_suite/reindex.py b/vb_suite/reindex.py
index f8ffd7f15..2d85167b0 100644
--- a/vb_suite/reindex.py
+++ b/vb_suite/reindex.py
@@ -89,19 +89,20 @@ reindex_fillna_backfill = Benchmark("ts3.fillna(method='backfill')", setup,
 # align on level
 
 setup = common_setup + """
-index = MultiIndex(levels=[np.arange(100), np.arange(100)],
-                   labels=[np.arange(100).repeat(100),
-                           np.tile(np.arange(100), 100)])
+index = MultiIndex(levels=[np.arange(10), np.arange(100), np.arange(100)],
+                   labels=[np.arange(10).repeat(10000),
+                           np.tile(np.arange(100).repeat(100), 10),
+                           np.tile(np.tile(np.arange(100), 100), 10)])
 random.shuffle(index.values)
 df = DataFrame(np.random.randn(len(index), 4), index=index)
-df_level = DataFrame(np.random.randn(100, 4), index=index.levels[0])
+df_level = DataFrame(np.random.randn(100, 4), index=index.levels[1])
 """
 
 reindex_frame_level_align = \
-    Benchmark("df.align(df_level, level=0, copy=False)", setup,
+    Benchmark("df.align(df_level, level=1, copy=False)", setup,
               start_date=datetime(2011, 12, 27))
 
 reindex_frame_level_reindex = \
-    Benchmark("df_level.reindex(df.index, level=0)", setup,
+    Benchmark("df_level.reindex(df.index, level=1)", setup,
               start_date=datetime(2011, 12, 27))
 
diff --git a/vb_suite/stat_ops.py b/vb_suite/stat_ops.py
new file mode 100644
index 000000000..e6cc611ca
--- /dev/null
+++ b/vb_suite/stat_ops.py
@@ -0,0 +1,27 @@
+from vbench.benchmark import Benchmark
+from datetime import datetime
+
+common_setup = """from pandas_vb_common import *
+"""
+
+#----------------------------------------------------------------------
+# ops by level
+
+setup = common_setup + """
+index = MultiIndex(levels=[np.arange(10), np.arange(100), np.arange(100)],
+                   labels=[np.arange(10).repeat(10000),
+                           np.tile(np.arange(100).repeat(100), 10),
+                           np.tile(np.tile(np.arange(100), 100), 10)])
+random.shuffle(index.values)
+df = DataFrame(np.random.randn(len(index), 4), index=index)
+df_level = DataFrame(np.random.randn(100, 4), index=index.levels[1])
+"""
+
+stat_ops_level_frame_sum = \
+    Benchmark("df.sum(level=1)", setup,
+              start_date=datetime(2011, 11, 15))
+
+stat_ops_level_frame_sum_multiple = \
+    Benchmark("df.sum(level=[0, 1])", setup, repeat=1,
+              start_date=datetime(2011, 11, 15))
+
diff --git a/vb_suite/suite.py b/vb_suite/suite.py
index c7b0e83ea..d017ab1f3 100644
--- a/vb_suite/suite.py
+++ b/vb_suite/suite.py
@@ -4,7 +4,8 @@ from datetime import datetime
 import os
 
 modules = ['groupby', 'indexing', 'reindex', 'binary_ops',
-           'sparse', 'index_object', 'miscellaneous']
+           'sparse', 'index_object', 'miscellaneous',
+           'stat_ops']
 
 by_module = {}
 benchmarks = []
