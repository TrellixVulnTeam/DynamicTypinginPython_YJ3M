commit cb6dba0959903ada7a2eda79c71aa2eeac275788
Author: jreback <jeff@reback.net>
Date:   Thu Feb 14 15:12:01 2013 -0500

    TST: added tests for GH #2837

diff --git a/pandas/sparse/frame.py b/pandas/sparse/frame.py
index 036d42467..bf978c322 100644
--- a/pandas/sparse/frame.py
+++ b/pandas/sparse/frame.py
@@ -241,8 +241,11 @@ class SparseDataFrame(DataFrame):
         return DataFrame(data, index=self.index)
 
     def get_dtype_counts(self):
-        from collections import Counter
-        return Series(Counter([ v.dtype.name for k, v in self.iteritems() ]))
+        from collections import defaultdict
+        d = defaultdict(int)
+        for k, v in self.iteritems():
+            d[v.dtype.name] += 1
+        return Series(d)
      
     def astype(self, dtype):
         raise NotImplementedError
diff --git a/pandas/sparse/tests/test_sparse.py b/pandas/sparse/tests/test_sparse.py
index fcb3f2a5c..af9112b82 100644
--- a/pandas/sparse/tests/test_sparse.py
+++ b/pandas/sparse/tests/test_sparse.py
@@ -821,6 +821,23 @@ class TestSparseDataFrame(TestCase, test_frame.SafeForSparse):
         sdf = SparseDataFrame(columns=range(4), index=arr)
         self.assertTrue(sdf[0].index is sdf[1].index)
 
+    def test_constructor_from_series(self):
+
+        # GH 2873
+        x = Series(np.random.randn(10000), name='a')
+        x = x.to_sparse(fill_value=0)
+        self.assert_(isinstance(x,SparseSeries))
+        df = SparseDataFrame(x)
+        self.assert_(isinstance(df,SparseDataFrame))
+
+        x = Series(np.random.randn(10000), name ='a')
+        y = Series(np.random.randn(10000), name ='b')
+        x.ix[:9998] = 0
+        x = x.to_sparse(fill_value=0)
+        
+        # currently fails
+        #df1 = SparseDataFrame([x, y])
+
     def test_dtypes(self):
         df = DataFrame(np.random.randn(10000, 4))
         df.ix[:9998] = np.nan
