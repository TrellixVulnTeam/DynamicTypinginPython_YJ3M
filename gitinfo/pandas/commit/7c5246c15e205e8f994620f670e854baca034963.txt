commit 7c5246c15e205e8f994620f670e854baca034963
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Wed May 27 10:23:33 2020 -0700

    CLN: de-duplicate paths in tslibs (#34400)

diff --git a/pandas/_libs/tslibs/parsing.pyx b/pandas/_libs/tslibs/parsing.pyx
index bf895f155..3a1af9fdb 100644
--- a/pandas/_libs/tslibs/parsing.pyx
+++ b/pandas/_libs/tslibs/parsing.pyx
@@ -376,7 +376,7 @@ cpdef bint _does_string_look_like_datetime(str py_string):
     return True
 
 
-cdef inline object _parse_dateabbr_string(object date_string, object default,
+cdef inline object _parse_dateabbr_string(object date_string, datetime default,
                                           object freq):
     cdef:
         object ret
diff --git a/pandas/_libs/tslibs/period.pyx b/pandas/_libs/tslibs/period.pyx
index fa8c0414a..ec6f8de15 100644
--- a/pandas/_libs/tslibs/period.pyx
+++ b/pandas/_libs/tslibs/period.pyx
@@ -955,35 +955,6 @@ cdef inline int month_to_quarter(int month) nogil:
 # ----------------------------------------------------------------------
 # Period logic
 
-@cython.wraparound(False)
-@cython.boundscheck(False)
-def dt64arr_to_periodarr(const int64_t[:] dtarr, int freq, tz=None):
-    """
-    Convert array of datetime64 values (passed in as 'i8' dtype) to a set of
-    periods corresponding to desired frequency, per period convention.
-    """
-    cdef:
-        int64_t[:] out
-        Py_ssize_t i, l
-        npy_datetimestruct dts
-
-    l = len(dtarr)
-
-    out = np.empty(l, dtype='i8')
-
-    if tz is None:
-        with nogil:
-            for i in range(l):
-                if dtarr[i] == NPY_NAT:
-                    out[i] = NPY_NAT
-                    continue
-                dt64_to_dtstruct(dtarr[i], &dts)
-                out[i] = get_period_ordinal(&dts, freq)
-    else:
-        out = localize_dt64arr_to_period(dtarr, freq, tz)
-    return out.base  # .base to access underlying np.ndarray
-
-
 @cython.wraparound(False)
 @cython.boundscheck(False)
 def periodarr_to_dt64arr(const int64_t[:] periodarr, int freq):
@@ -1473,8 +1444,7 @@ def extract_freq(ndarray[object] values):
 
 @cython.wraparound(False)
 @cython.boundscheck(False)
-cdef int64_t[:] localize_dt64arr_to_period(const int64_t[:] stamps,
-                                           int freq, object tz):
+def dt64arr_to_periodarr(const int64_t[:] stamps, int freq, object tz):
     cdef:
         Py_ssize_t n = len(stamps)
         int64_t[:] result = np.empty(n, dtype=np.int64)
@@ -1523,7 +1493,7 @@ cdef int64_t[:] localize_dt64arr_to_period(const int64_t[:] stamps,
                 dt64_to_dtstruct(stamps[i] + deltas[pos[i]], &dts)
                 result[i] = get_period_ordinal(&dts, freq)
 
-    return result
+    return result.base  # .base to get underlying ndarray
 
 
 DIFFERENT_FREQ = ("Input has different freq={other_freq} "
diff --git a/pandas/_libs/tslibs/resolution.pyx b/pandas/_libs/tslibs/resolution.pyx
index 3d76483f7..2133573ee 100644
--- a/pandas/_libs/tslibs/resolution.pyx
+++ b/pandas/_libs/tslibs/resolution.pyx
@@ -28,27 +28,19 @@ cdef:
 
 # ----------------------------------------------------------------------
 
-cpdef resolution(const int64_t[:] stamps, tz=None):
+def resolution(const int64_t[:] stamps, tz=None):
     cdef:
         Py_ssize_t i, n = len(stamps)
         npy_datetimestruct dts
         int reso = RESO_DAY, curr_reso
-
-    if tz is not None:
-        tz = maybe_get_tz(tz)
-    return _reso_local(stamps, tz)
-
-
-cdef _reso_local(const int64_t[:] stamps, object tz):
-    cdef:
-        Py_ssize_t i, n = len(stamps)
-        int reso = RESO_DAY, curr_reso
         ndarray[int64_t] trans
         int64_t[:] deltas
         Py_ssize_t[:] pos
-        npy_datetimestruct dts
         int64_t local_val, delta
 
+    if tz is not None:
+        tz = maybe_get_tz(tz)
+
     if is_utc(tz) or tz is None:
         for i in range(n):
             if stamps[i] == NPY_NAT:
