commit 8171930a6de58bd227f80fee3209c0b125b40ff5
Author: Adam Klein <adamklein@gmail.com>
Date:   Tue Jan 24 20:53:16 2012 -0500

    small fix to Delta

diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index 47ad429b4..19dba462e 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -276,23 +276,6 @@ cdef class Duration:
     def __repr__(self):
         return "Duration(%d, %d, %d)" % (self.days, self.seconds, self.microseconds)
 
-cdef class Filter:
-    """
-    The idea of this class is to select out, quickly, the timestamps within
-    an interval that satisfy some criteria.
-
-    The purpose is to allow us to construct a DatetimeIndex very quickly
-    between two points in time.
-
-    Some examples might be:
-    - Business days
-    - Business month ends
-    - Last friday before end of month
-    - Quarterly business month ends, where first quarter is Feb
-    """
-    def __init__(self):
-        pass
-
 
 # The following is derived from relativedelta.py in dateutil package
 # ------------------------------------------------------------------------------
@@ -494,6 +477,7 @@ cdef class Delta:
             self.minutes = minutes
             self.seconds = seconds
             self.microseconds = microseconds
+
             self.year = year
             self.month = month
             self.day = day
@@ -516,7 +500,7 @@ cdef class Delta:
                 yday = yearday
                 if yearday > 59:
                     self.leapdays = -1
-            if yday != -1:
+            if yday:
                 ydayidx = [31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334,
                            366]
                 for idx, ydays in enumerate(ydayidx):
@@ -684,7 +668,7 @@ cdef class Delta:
                      microsecond=self.microsecond)
 
 
-    def __mul__(self, double f):
+    def __mul__(self, int f):
         return Delta(years=self.years*f,
                      months=self.months*f,
                      days=self.days*f,
@@ -702,9 +686,6 @@ cdef class Delta:
                      second=self.second,
                      microsecond=self.microsecond)
 
-    def __div__(self, double f):
-        return self.__mul__(1./f)
-
     def __repr__(self):
         l = []
         for attr in ["years", "months", "days", "leapdays",
diff --git a/pandas/tests/test_datetools.py b/pandas/tests/test_datetools.py
index 97071467f..e78c3ec04 100644
--- a/pandas/tests/test_datetools.py
+++ b/pandas/tests/test_datetools.py
@@ -115,31 +115,19 @@ class TestDelta(unittest.TestCase):
         repr(2 * Delta(months=2))
 
     def test_mul(self):
-        assert Delta(2) == 2 * Delta(1)
-        assert Delta(2) == Delta(1) * 2
+        assert Delta(days=2) == 2 * Delta(days=1)
+        assert Delta(days=2) == Delta(days=1) * 2
 
     def test_constructor(self):
 
         assert((self.d + Delta(months=2)) == Timestamp(datetime(2008, 3, 2)))
         assert((self.d - Delta(months=2)) == Timestamp(datetime(2007, 11, 2)))
 
-        assert((self.d + Delta(2)) == Timestamp(datetime(2008, 1, 4)))
-
-        assert not Delta(2).isAnchored()
-        assert Delta(1).isAnchored()
+        assert((self.d + Delta(days=2)) == Timestamp(datetime(2008, 1, 4)))
 
         d = Timestamp(datetime(2008, 1, 31))
         assert((d + Delta(months=1)) == Timestamp(datetime(2008, 2, 29)))
 
-    def test_copy(self):
-        assert(Delta(months=2).copy() == Delta(months=2))
-
-    def test_eq(self):
-        offset1 = Delta(days=1)
-        offset2 = Delta(days=365)
-
-        self.assert_(offset1 != offset2)
-        self.assert_(not (offset1 == offset2))
 
 class TestBusinessDay(unittest.TestCase):
 
