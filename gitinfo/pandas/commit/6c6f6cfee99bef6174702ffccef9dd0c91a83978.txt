commit 6c6f6cfee99bef6174702ffccef9dd0c91a83978
Author: y-p <yoval@gmx.com>
Date:   Sat Mar 16 10:54:14 2013 +0200

    REF: apply native type conv to ix, cols before write_csv

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 7c65b105c..6de1e3012 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -24,7 +24,7 @@ import numpy.ma as ma
 
 from pandas.core.common import (isnull, notnull, PandasError, _try_sort,
                                 _default_index, _maybe_upcast, _is_sequence,
-                                _infer_dtype_from_scalar)
+                                _infer_dtype_from_scalar, _ndarray_to_native_types)
 from pandas.core.generic import NDFrame
 from pandas.core.index import Index, MultiIndex, _ensure_index
 from pandas.core.indexing import (_NDFrameIndexer, _maybe_droplevels,
@@ -1352,7 +1352,10 @@ class DataFrame(NDFrame):
             chunksize = 100000
         chunks = int(nrows / chunksize)+1
 
-        cols = list(cols)
+        if isinstance(cols,np.ndarray):
+            cols = _ndarray_to_native_types(cols,na_rep,float_format)
+        else:
+            cols=list(cols)
 
         for i in xrange(chunks):
             start_i = i * chunksize
@@ -1365,27 +1368,12 @@ class DataFrame(NDFrame):
 
             series = {}
             for k, v in chunk.iteritems():
-                mask = isnull(v)
-                imask = -mask
-
-                if v.dtype == 'datetime64[ns]' or v.dtype == 'timedelta64[ns]':
-                    values = np.empty(len(v),dtype=object)
-                    values[mask] = 'NaT'
-
-                    if v.dtype == 'datetime64[ns]':
-                        values[imask] = np.array([ val._repr_base for val in v[imask] ],dtype=object)
-                    elif v.dtype == 'timedelta64[ns]':
-                        values[imask] = np.array([ lib.repr_timedelta64(val) for val in v[imask] ],dtype=object)
-                else:
-                    values = np.array(v.values,dtype=object)
-                    values[mask] = na_rep
-                    if issubclass(v.dtype.type,np.floating):
-                        if float_format:
-                            values[imask] = np.array([ float_format % val for val in v[imask] ])
+                series[k] = _ndarray_to_native_types(v,na_rep,float_format)
 
-                series[k] = values.tolist()
+            ix = _ndarray_to_native_types(data_index[start_i:end_i],
+                                          na_rep,float_format)
 
-            lib.write_csv_rows(series, list(data_index[start_i:end_i]), nlevels, cols, writer)
+            lib.write_csv_rows(series, ix, nlevels, cols, writer)
 
     def to_csv(self, path_or_buf, sep=",", na_rep='', float_format=None,
                cols=None, header=True, index=True, index_label=None,
