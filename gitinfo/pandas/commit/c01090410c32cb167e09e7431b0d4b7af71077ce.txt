commit c01090410c32cb167e09e7431b0d4b7af71077ce
Author: y-p <yoval@gmx.com>
Date:   Fri Dec 14 07:19:49 2012 +0200

    REF: rename option key "print" to "display"
    
    print is a python keyword, bad choice.

diff --git a/doc/source/basics.rst b/doc/source/basics.rst
index cba175025..6d26aaf86 100644
--- a/doc/source/basics.rst
+++ b/doc/source/basics.rst
@@ -1058,25 +1058,28 @@ and they are:
 
 **Note:** developers can check out pandas/core/config.py for more info.
 
-Options have a full "dotted-style", case-insensitive name (e.g. ``print.max_rows``),
+Options have a full "dotted-style", case-insensitive name (e.g. ``display.max_rows``),
 but all of the functions above accept a regexp pattern (``re.search`` style) as argument,
 so passing in a substring will work - as long as it is unambiguous :
 
 .. ipython:: python
 
-   get_option("print.max_rows")
-   set_option("print.max_rows",101)
-   get_option("print.max_rows")
+   get_option("display.max_rows")
+   set_option("display.max_rows",101)
+   get_option("display.max_rows")
    set_option("max_r",102)
-   get_option("print.max_rows")
+   get_option("display.max_rows")
 
 
-However, the following will **not work** because it matches multiple option names, e.g.``print.max_colwidth``, ``print.max_rows``, ``print.max_columns``:
+However, the following will **not work** because it matches multiple option names, e.g.``display.max_colwidth``, ``display.max_rows``, ``display.max_columns``:
 
 .. ipython:: python
    :okexcept:
 
-   get_option("print.max_")
+   try:
+       get_option("display.max_")
+   except KeyError as e:
+       print(e)
 
 
 **Note:** Using this form of convenient shorthand may make your code break if new options with similar names are added in future versions.
@@ -1103,23 +1106,23 @@ All options also have a default value, and you can use the ``reset_option`` to d
 .. ipython:: python
    :suppress:
 
-   reset_option("print.max_rows")
+   reset_option("display.max_rows")
 
 
 .. ipython:: python
 
-   get_option("print.max_rows")
-   set_option("print.max_rows",999)
-   get_option("print.max_rows")
-   reset_option("print.max_rows")
-   get_option("print.max_rows")
+   get_option("display.max_rows")
+   set_option("display.max_rows",999)
+   get_option("display.max_rows")
+   reset_option("display.max_rows")
+   get_option("display.max_rows")
 
 
 and you also set multiple options at once:
 
 .. ipython:: python
 
-   reset_option("^print\.")
+   reset_option("^display\.")
 
 
 
diff --git a/doc/source/v0.10.0.txt b/doc/source/v0.10.0.txt
index 4169864fc..d24493e14 100644
--- a/doc/source/v0.10.0.txt
+++ b/doc/source/v0.10.0.txt
@@ -160,11 +160,11 @@ Convenience methods ``ffill`` and  ``bfill`` have been added:
     arguments. print all registered options.
 
   Note: ``set_printoptions``/ ``reset_printoptions`` are now deprecated (but
-  functioning), the print options now live under "print.XYZ". For example:
+  functioning), the print options now live under "display.XYZ". For example:
 
   .. ipython:: python
 
-     get_option("print.max_rows")
+     get_option("display.max_rows")
 
 - to_string() methods now always return unicode strings  (GH2224_).
 
@@ -284,7 +284,7 @@ Updated PyTables Support
       df['string'] = 'string'
       df['int']    = 1
       store.append('df',df)
-      df1 = store.select('df') 
+      df1 = store.select('df')
       df1
       df1.get_dtype_counts()
 
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 2b9e19f90..f7319f688 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -1213,7 +1213,7 @@ def in_qtconsole():
 # 2) If you need to send something to the console, use console_encode().
 #
 #    console_encode() should (hopefully) choose the right encoding for you
-#    based on the encoding set in option "print.encoding"
+#    based on the encoding set in option "display.encoding"
 #
 # 3) if you need to write something out to file, use
 #    pprint_thing_encoded(encoding).
@@ -1272,10 +1272,10 @@ def pprint_thing(thing, _nest_lvl=0, escape_chars=None):
          hasattr(thing,'next'):
         return unicode(thing)
     elif (isinstance(thing, dict) and
-          _nest_lvl < get_option("print.pprint_nest_depth")):
+          _nest_lvl < get_option("display.pprint_nest_depth")):
         result = _pprint_dict(thing, _nest_lvl)
     elif _is_sequence(thing) and _nest_lvl < \
-		get_option("print.pprint_nest_depth"):
+		get_option("display.pprint_nest_depth"):
         result = _pprint_seq(thing, _nest_lvl, escape_chars=escape_chars)
     else:
         # when used internally in the package, everything
@@ -1313,8 +1313,8 @@ def console_encode(object, **kwds):
     this is the sanctioned way to prepare something for
     sending *to the console*, it delegates to pprint_thing() to get
     a unicode representation of the object relies on the global encoding
-    set in print.encoding. Use this everywhere
+    set in display.encoding. Use this everywhere
     where you output to the console.
     """
     return pprint_thing_encoded(object,
-             get_option("print.encoding"))
+             get_option("display.encoding"))
diff --git a/pandas/core/config_init.py b/pandas/core/config_init.py
index 3342f4e60..aaf058417 100644
--- a/pandas/core/config_init.py
+++ b/pandas/core/config_init.py
@@ -16,7 +16,7 @@ module is imported, register them here rather then in the module.
 
 
 ###########################################
-# options from the "print" namespace
+# options from the "display" namespace
 
 pc_precision_doc="""
 : int
@@ -121,7 +121,7 @@ pc_line_width_doc="""
     When printing wide DataFrames, this is the width of each line.
 """
 
-with cf.config_prefix('print'):
+with cf.config_prefix('display'):
     cf.register_option('precision', 7, pc_precision_doc, validator=is_int)
     cf.register_option('float_format', None, float_format_doc)
     cf.register_option('column_space', 12, validator=is_int)
diff --git a/pandas/core/format.py b/pandas/core/format.py
index fa4304c1c..82c8ce99f 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -74,7 +74,7 @@ class SeriesFormatter(object):
         self.header = header
 
         if float_format is None:
-            float_format = get_option("print.float_format")
+            float_format = get_option("display.float_format")
         self.float_format = float_format
 
     def _get_footer(self):
@@ -151,7 +151,7 @@ def _encode_diff_func():
     if py3compat.PY3:  # pragma: no cover
         _encode_diff = lambda x: 0
     else:
-        encoding = get_option("print.encoding")
+        encoding = get_option("display.encoding")
         def _encode_diff(x):
             return len(x) - len(x.decode(encoding))
 
@@ -162,7 +162,7 @@ def _strlen_func():
     if py3compat.PY3:  # pragma: no cover
         _strlen = len
     else:
-        encoding = get_option("print.encoding")
+        encoding = get_option("display.encoding")
         def _strlen(x):
             try:
                 return len(x.decode(encoding))
@@ -208,7 +208,7 @@ class DataFrameFormatter(TableFormatter):
         self.show_index_names = index_names
 
         if sparsify is None:
-            sparsify = get_option("print.multi_sparse")
+            sparsify = get_option("display.multi_sparse")
 
         self.sparsify = sparsify
 
@@ -221,7 +221,7 @@ class DataFrameFormatter(TableFormatter):
         self.line_width = line_width
 
         if justify is None:
-            self.justify = get_option("print.colheader_justify")
+            self.justify = get_option("display.colheader_justify")
         else:
             self.justify = justify
 
@@ -1005,13 +1005,13 @@ def format_array(values, formatter, float_format=None, na_rep='NaN',
         fmt_klass = GenericArrayFormatter
 
     if space is None:
-        space = get_option("print.column_space")
+        space = get_option("display.column_space")
 
     if float_format is None:
-        float_format = get_option("print.float_format")
+        float_format = get_option("display.float_format")
 
     if digits is None:
-        digits = get_option("print.precision")
+        digits = get_option("display.precision")
 
     fmt_obj = fmt_klass(values, digits, na_rep=na_rep,
                         float_format=float_format,
@@ -1039,9 +1039,9 @@ class GenericArrayFormatter(object):
 
     def _format_strings(self):
         if self.float_format is None:
-            float_format = get_option("print.float_format")
+            float_format = get_option("display.float_format")
             if float_format is None:
-                fmt_str = '%% .%dg' % get_option("print.precision")
+                fmt_str = '%% .%dg' % get_option("display.precision")
                 float_format = lambda x: fmt_str % x
         else:
             float_format = self.float_format
@@ -1167,7 +1167,7 @@ def _make_fixed_width(strings, justify='right', minimum=None):
     if minimum is not None:
         max_len = max(minimum, max_len)
 
-    conf_max = get_option("print.max_colwidth")
+    conf_max = get_option("display.max_colwidth")
     if conf_max is not None and max_len > conf_max:
         max_len = conf_max
 
@@ -1281,35 +1281,35 @@ def set_printoptions(precision=None, column_space=None, max_rows=None,
     warnings.warn("set_printoptions is deprecated, use set_option instead",
                           FutureWarning)
     if precision is not None:
-        set_option("print.precision", precision)
+        set_option("display.precision", precision)
     if column_space is not None:
-        set_option("print.column_space", column_space)
+        set_option("display.column_space", column_space)
     if max_rows is not None:
-        set_option("print.max_rows", max_rows)
+        set_option("display.max_rows", max_rows)
     if max_colwidth is not None:
-        set_option("print.max_colwidth", max_colwidth)
+        set_option("display.max_colwidth", max_colwidth)
     if max_columns is not None:
-        set_option("print.max_columns", max_columns)
+        set_option("display.max_columns", max_columns)
     if colheader_justify is not None:
-        set_option("print.colheader_justify", colheader_justify)
+        set_option("display.colheader_justify", colheader_justify)
     if notebook_repr_html is not None:
-        set_option("print.notebook_repr_html", notebook_repr_html)
+        set_option("display.notebook_repr_html", notebook_repr_html)
     if date_dayfirst is not None:
-        set_option("print.date_dayfirst", date_dayfirst)
+        set_option("display.date_dayfirst", date_dayfirst)
     if date_yearfirst is not None:
-        set_option("print.date_yearfirst", date_yearfirst)
+        set_option("display.date_yearfirst", date_yearfirst)
     if pprint_nest_depth is not None:
-        set_option("print.pprint_nest_depth", pprint_nest_depth)
+        set_option("display.pprint_nest_depth", pprint_nest_depth)
     if multi_sparse is not None:
-        set_option("print.multi_sparse", multi_sparse)
+        set_option("display.multi_sparse", multi_sparse)
     if encoding is not None:
-        set_option("print.encoding", encoding)
+        set_option("display.encoding", encoding)
 
 def reset_printoptions():
     import warnings
     warnings.warn("reset_printoptions is deprecated, use reset_option instead",
                           FutureWarning)
-    reset_option("^print\.")
+    reset_option("^display\.")
 
 def detect_console_encoding():
     """
@@ -1441,8 +1441,8 @@ def set_eng_float_format(precision=None, accuracy=3, use_eng_prefix=False):
                       "being renamed to 'accuracy'", FutureWarning)
         accuracy = precision
 
-    set_option("print.float_format", EngFormatter(accuracy, use_eng_prefix))
-    set_option("print.column_space", max(12, accuracy + 9))
+    set_option("display.float_format", EngFormatter(accuracy, use_eng_prefix))
+    set_option("display.column_space", max(12, accuracy + 9))
 
 def _put_lines(buf, lines):
     if any(isinstance(x, unicode) for x in lines):
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 0f770937d..fbf5f0eec 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -594,10 +594,10 @@ class DataFrame(NDFrame):
             terminal_width, terminal_height = 100, 100
         else:
             terminal_width, terminal_height = get_terminal_size()
-        max_rows = (terminal_height if get_option("print.max_rows") == 0
-                    else get_option("print.max_rows"))
-        max_columns = get_option("print.max_columns")
-        expand_repr = get_option("print.expand_frame_repr")
+        max_rows = (terminal_height if get_option("display.max_rows") == 0
+                    else get_option("display.max_rows"))
+        max_columns = get_option("display.max_columns")
+        expand_repr = get_option("display.expand_frame_repr")
 
         if max_columns > 0:
             if (len(self.index) <= max_rows and
@@ -642,7 +642,7 @@ class DataFrame(NDFrame):
         Invoked by bytes(df) in py3 only.
         Yields a bytestring in both py2/py3.
         """
-        encoding = com.get_option("print.encoding")
+        encoding = com.get_option("display.encoding")
         return self.__unicode__().encode(encoding , 'replace')
 
     def __unicode__(self):
@@ -659,7 +659,7 @@ class DataFrame(NDFrame):
             is_wide = self._need_wide_repr()
             line_width = None
             if is_wide:
-                line_width = get_option('print.line_width')
+                line_width = get_option('display.line_width')
             self.to_string(buf=buf, line_width=line_width)
 
         value = buf.getvalue()
@@ -668,7 +668,7 @@ class DataFrame(NDFrame):
         return value
 
     def _need_wide_repr(self):
-        return (get_option("print.expand_frame_repr")
+        return (get_option("display.expand_frame_repr")
                 and com.in_interactive_session())
 
     def __repr__(self):
@@ -687,7 +687,7 @@ class DataFrame(NDFrame):
         if com.in_qtconsole():
             raise ValueError('Disable HTML output in QtConsole')
 
-        if get_option("print.notebook_repr_html"):
+        if get_option("display.notebook_repr_html"):
             if self._need_info_repr_():
                 return None
             else:
@@ -1597,7 +1597,7 @@ class DataFrame(NDFrame):
 
         # hack
         if max_cols is None:
-            max_cols = get_option('print.max_info_columns')
+            max_cols = get_option('display.max_info_columns')
 
         if verbose and len(self.columns) <= max_cols:
             lines.append('Data columns:')
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 337ce3d12..35578421b 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -159,7 +159,7 @@ class Index(np.ndarray):
         Invoked by bytes(df) in py3 only.
         Yields a bytestring in both py2/py3.
         """
-        encoding = com.get_option("print.encoding")
+        encoding = com.get_option("display.encoding")
         return self.__unicode__().encode(encoding , 'replace')
 
     def __unicode__(self):
@@ -1380,7 +1380,7 @@ class MultiIndex(Index):
         Invoked by bytes(df) in py3 only.
         Yields a bytestring in both py2/py3.
         """
-        encoding = com.get_option("print.encoding")
+        encoding = com.get_option("display.encoding")
         return self.__unicode__().encode(encoding , 'replace')
 
     def __unicode__(self):
@@ -1586,7 +1586,7 @@ class MultiIndex(Index):
             result_levels.append(level)
 
         if sparsify is None:
-            sparsify = get_option("print.multi_sparse")
+            sparsify = get_option("display.multi_sparse")
 
         if sparsify:
             # little bit of a kludge job for #1217
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index b2730677c..9805da28d 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -473,7 +473,7 @@ class Panel(NDFrame):
         Invoked by bytes(df) in py3 only.
         Yields a bytestring in both py2/py3.
         """
-        encoding = com.get_option("print.encoding")
+        encoding = com.get_option("display.encoding")
         return self.__unicode__().encode(encoding , 'replace')
 
     def __unicode__(self):
@@ -1556,7 +1556,7 @@ class Panel(NDFrame):
         # doc strings substitors
         _agg_doc = """
 Wrapper method for %s
-                
+
 Parameters
 ----------
 other : """ + "%s or %s" % (cls._constructor_sliced.__name__,cls.__name__) + """
@@ -1634,7 +1634,7 @@ If all values are NA, result will be NA"""
         def skew(self, axis='major', skipna=True):
             return self._reduce(nanops.nanskew, axis=axis, skipna=skipna)
         cls.skew = skew
-        
+
         @Substitution(desc='product', outname='prod')
         @Appender(_agg_doc)
         def prod(self, axis='major', skipna=True):
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 18ccf4b48..6cf511d32 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -943,7 +943,7 @@ copy : boolean, default False
         Invoked by bytes(df) in py3 only.
         Yields a bytestring in both py2/py3.
         """
-        encoding = com.get_option("print.encoding")
+        encoding = com.get_option("display.encoding")
         return self.__unicode__().encode(encoding , 'replace')
 
     def __unicode__(self):
@@ -953,8 +953,8 @@ copy : boolean, default False
         Invoked by unicode(df) in py2 only. Yields a Unicode String in both py2/py3.
         """
         width, height = get_terminal_size()
-        max_rows = (height if get_option("print.max_rows") == 0
-                    else get_option("print.max_rows"))
+        max_rows = (height if get_option("display.max_rows") == 0
+                    else get_option("display.max_rows"))
         if len(self.index) > (max_rows or 1000):
             result = self._tidy_repr(min(30, max_rows - 4))
         elif len(self.index) > 0:
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index e5046dc84..2ee9be660 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -76,7 +76,7 @@ class TestDataFrameFormatting(unittest.TestCase):
 
     def test_repr_truncation(self):
         max_len = 20
-        with option_context("print.max_colwidth", max_len):
+        with option_context("display.max_colwidth", max_len):
             df = DataFrame({'A': np.random.randn(10),
                      'B': [tm.rands(np.random.randint(max_len - 1,
                          max_len + 1)) for i in range(10)]})
@@ -91,10 +91,10 @@ class TestDataFrameFormatting(unittest.TestCase):
                 else:
                     self.assert_('...' not in line)
 
-        with option_context("print.max_colwidth", 999999):
+        with option_context("display.max_colwidth", 999999):
             self.assert_('...' not in repr(df))
 
-        with option_context("print.max_colwidth", max_len + 2):
+        with option_context("display.max_colwidth", max_len + 2):
             self.assert_('...' not in repr(df))
 
     def test_repr_should_return_str (self):
@@ -415,17 +415,17 @@ class TestDataFrameFormatting(unittest.TestCase):
         with option_context('mode.sim_interactive', True):
             col = lambda l, k: [tm.rands(k) for _ in xrange(l)]
             df = DataFrame([col(20, 25) for _ in range(10)])
-            set_option('print.expand_frame_repr', False)
+            set_option('display.expand_frame_repr', False)
             rep_str = repr(df)
-            set_option('print.expand_frame_repr', True)
+            set_option('display.expand_frame_repr', True)
             wide_repr = repr(df)
             self.assert_(rep_str != wide_repr)
 
-            with option_context('print.line_width', 120):
+            with option_context('display.line_width', 120):
                 wider_repr = repr(df)
                 self.assert_(len(wider_repr) < len(wide_repr))
 
-        reset_option('print.expand_frame_repr')
+        reset_option('display.expand_frame_repr')
 
     def test_wide_repr_wide_columns(self):
         with option_context('mode.sim_interactive', True):
@@ -439,21 +439,21 @@ class TestDataFrameFormatting(unittest.TestCase):
             col = lambda l, k: [tm.rands(k) for _ in xrange(l)]
             df = DataFrame([col(20, 25) for _ in range(10)])
             df.index.name = 'DataFrame Index'
-            set_option('print.expand_frame_repr', False)
+            set_option('display.expand_frame_repr', False)
 
             rep_str = repr(df)
-            set_option('print.expand_frame_repr', True)
+            set_option('display.expand_frame_repr', True)
             wide_repr = repr(df)
             self.assert_(rep_str != wide_repr)
 
-            with option_context('print.line_width', 120):
+            with option_context('display.line_width', 120):
                 wider_repr = repr(df)
                 self.assert_(len(wider_repr) < len(wide_repr))
 
             for line in wide_repr.splitlines()[1::13]:
                 self.assert_('DataFrame Index' in line)
 
-        reset_option('print.expand_frame_repr')
+        reset_option('display.expand_frame_repr')
 
     def test_wide_repr_multiindex(self):
         with option_context('mode.sim_interactive', True):
@@ -463,20 +463,20 @@ class TestDataFrameFormatting(unittest.TestCase):
             df = DataFrame([col(20, 25) for _ in range(10)],
                            index=midx)
             df.index.names = ['Level 0', 'Level 1']
-            set_option('print.expand_frame_repr', False)
+            set_option('display.expand_frame_repr', False)
             rep_str = repr(df)
-            set_option('print.expand_frame_repr', True)
+            set_option('display.expand_frame_repr', True)
             wide_repr = repr(df)
             self.assert_(rep_str != wide_repr)
 
-            with option_context('print.line_width', 120):
+            with option_context('display.line_width', 120):
                 wider_repr = repr(df)
                 self.assert_(len(wider_repr) < len(wide_repr))
 
             for line in wide_repr.splitlines()[1::13]:
                 self.assert_('Level 0 Level 1' in line)
 
-        reset_option('print.expand_frame_repr')
+        reset_option('display.expand_frame_repr')
 
     def test_wide_repr_multiindex_cols(self):
         with option_context('mode.sim_interactive', True):
@@ -488,34 +488,34 @@ class TestDataFrameFormatting(unittest.TestCase):
             df = DataFrame([col(20, 25) for _ in range(10)],
                            index=midx, columns=mcols)
             df.index.names = ['Level 0', 'Level 1']
-            set_option('print.expand_frame_repr', False)
+            set_option('display.expand_frame_repr', False)
             rep_str = repr(df)
-            set_option('print.expand_frame_repr', True)
+            set_option('display.expand_frame_repr', True)
             wide_repr = repr(df)
             self.assert_(rep_str != wide_repr)
 
-        with option_context('print.line_width', 120):
+        with option_context('display.line_width', 120):
             wider_repr = repr(df)
             self.assert_(len(wider_repr) < len(wide_repr))
             self.assert_(len(wide_repr.splitlines()) == 14 * 10 - 1)
 
-        reset_option('print.expand_frame_repr')
+        reset_option('display.expand_frame_repr')
 
     def test_wide_repr_unicode(self):
         with option_context('mode.sim_interactive', True):
             col = lambda l, k: [tm.randu(k) for _ in xrange(l)]
             df = DataFrame([col(20, 25) for _ in range(10)])
-            set_option('print.expand_frame_repr', False)
+            set_option('display.expand_frame_repr', False)
             rep_str = repr(df)
-            set_option('print.expand_frame_repr', True)
+            set_option('display.expand_frame_repr', True)
             wide_repr = repr(df)
             self.assert_(rep_str != wide_repr)
 
-            with option_context('print.line_width', 120):
+            with option_context('display.line_width', 120):
                 wider_repr = repr(df)
                 self.assert_(len(wider_repr) < len(wide_repr))
 
-        reset_option('print.expand_frame_repr')
+        reset_option('display.expand_frame_repr')
 
 
     def test_wide_repr_wide_long_columns(self):
@@ -628,7 +628,7 @@ class TestDataFrameFormatting(unittest.TestCase):
         assert(df_s == expected)
 
         fmt.reset_printoptions()
-        self.assertEqual(get_option("print.precision"), 7)
+        self.assertEqual(get_option("display.precision"), 7)
 
         df = DataFrame({'x': [1e9, 0.2512]})
         df_s = df.to_string()
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index e2006672a..b7d4e5908 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3989,11 +3989,11 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         self.assert_(len(rs.splitlines()) > 100)
         xp = rs
 
-        set_option('print.max_info_columns', 101)
+        set_option('display.max_info_columns', 101)
         io = StringIO()
         df.info(buf=io)
         self.assert_(rs == xp)
-        reset_option('print.max_info_columns')
+        reset_option('display.max_info_columns')
 
 
     def test_info_duplicate_columns(self):
diff --git a/pandas/tseries/tools.py b/pandas/tseries/tools.py
index 9388f45ad..b724e5eb1 100644
--- a/pandas/tseries/tools.py
+++ b/pandas/tseries/tools.py
@@ -225,9 +225,9 @@ def parse_time_string(arg, freq=None, dayfirst=None, yearfirst=None):
         return mresult
 
     if dayfirst is None:
-        dayfirst = get_option("print.date_dayfirst")
+        dayfirst = get_option("display.date_dayfirst")
     if yearfirst is None:
-        yearfirst = get_option("print.date_yearfirst")
+        yearfirst = get_option("display.date_yearfirst")
 
     try:
         parsed, reso = dateutil_parse(arg, default, dayfirst=dayfirst,
