commit d2624b54dcc44a9d7fa5770db429ad0b28cf9079
Author: Thierry Moisan <thierry.moisan@gmail.com>
Date:   Sun Mar 10 19:00:28 2013 -0400

    use a function factory for comparisons of Period objects

diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index 72dad3e53..7b5709712 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -156,37 +156,22 @@ class Period(object):
         else:  # pragma: no cover
             raise TypeError(other)
 
-    def __lt__(self, other):
-        if isinstance(other, Period):
-            if other.freq != self.freq:
-                raise ValueError("Cannot compare non-conforming periods")
-            return self.ordinal < other.ordinal
-        else:
-            raise TypeError(other)
-
-    def __le__(self, other):
-        if isinstance(other, Period):
-            if other.freq != self.freq:
-                raise ValueError("Cannot compare non-conforming periods")
-            return self.ordinal <= other.ordinal
-        else:
-            raise TypeError(other)
+    def _comp_method(func, name):
+        def f(self, other):
+            if isinstance(other, Period):
+                if other.freq != self.freq:
+                    raise ValueError("Cannot compare non-conforming periods")
+                return func(self.ordinal, other.ordinal)
+            else:
+                raise TypeError(other)
 
-    def __gt__(self, other):
-        if isinstance(other, Period):
-            if other.freq != self.freq:
-                raise ValueError("Cannot compare non-conforming periods")
-            return self.ordinal > other.ordinal
-        else:
-            raise TypeError(other)
+        f.__name__ = name
+        return f
 
-    def __ge__(self, other):
-        if isinstance(other, Period):
-            if other.freq != self.freq:
-                raise ValueError("Cannot compare non-conforming periods")
-            return self.ordinal >= other.ordinal
-        else:
-            raise TypeError(other)
+    __lt__ = _comp_method(operator.lt, '__lt__')
+    __le__ = _comp_method(operator.le, '__le__')
+    __gt__ = _comp_method(operator.gt, '__gt__')
+    __ge__ = _comp_method(operator.ge, '__ge__')
 
     def asfreq(self, freq, how='E'):
         """
