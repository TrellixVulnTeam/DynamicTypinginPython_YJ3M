commit 8d7641a14f6f13317447f6503fd33adf5c81e919
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jan 5 00:43:36 2010 +0000

    fixed inconsistencies with weighted panel regression, some code cleanup
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@103 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/stats/ols.py b/pandas/stats/ols.py
index 5a5ba3f97..b6b935c36 100644
--- a/pandas/stats/ols.py
+++ b/pandas/stats/ols.py
@@ -40,10 +40,14 @@ class OLS(object):
         (self._y, self._x, self._x_filtered,
          self._index, self._time_has_obs) = self._prepare_data()
 
+        # for compat with PanelOLS
+        self._x_trans = self._x
+        self._y_trans = self._y
+
         self._x_raw = self._x.values
         self._y_raw = self._y.view(np.ndarray)
 
-        self.sm_ols = sm.OLS(self._y_raw, self._x_raw).fit()
+        self.sm_ols = sm.OLS(self._y_raw, self._x.values).fit()
 
     def _prepare_data(self):
         """
@@ -96,7 +100,7 @@ class OLS(object):
     @cache_readonly
     def _df_raw(self):
         """Returns the degrees of freedom."""
-        return math.rank(self._x_raw)
+        return math.rank(self._x.values)
 
     @cache_readonly
     def df(self):
@@ -291,7 +295,7 @@ class OLS(object):
         """
         Returns the raw covariance of beta.
         """
-        x = self._x_raw
+        x = self._x.values
         y = self._y_raw
 
         xx = np.dot(x.T, x)
@@ -638,7 +642,7 @@ class MovingOLS(OLS):
 
     @cache_readonly
     def _rolling_ols_call(self):
-        return self._calc_betas(self._x, self._y)
+        return self._calc_betas(self._x_trans, self._y_trans)
 
     def _calc_betas(self, x, y):
         N = len(self._index)
@@ -715,18 +719,6 @@ class MovingOLS(OLS):
         valid = self._time_has_obs
         cum_xy = []
 
-        # A little kludge so we can use this method for both
-        # MovingOLS and MovingPanelOLS
-        def y_converter(y):
-            if isinstance(y, Series):
-                return np.asarray(y)
-            else:
-                y = y.values.squeeze()
-                if y.ndim == 0:
-                    return np.array([y])
-                else:
-                    return y
-
         last = np.zeros(len(x.cols()))
         for i, date in enumerate(dates):
             if not valid[i]:
@@ -734,7 +726,7 @@ class MovingOLS(OLS):
                 continue
 
             x_slice = x.truncate(date, date).values
-            y_slice = y_converter(y.truncate(date, date))
+            y_slice = _y_converter(y.truncate(date, date))
 
             xy = last = last + np.dot(x_slice.T, y_slice)
             cum_xy.append(xy)
@@ -820,8 +812,8 @@ class MovingOLS(OLS):
         sst = []
         sse = []
 
-        Y = self._y
-        X = self._x
+        Y = self._y_trans
+        X = self._x_trans
         dates = self._index
         window = self._window
         for n, index in enumerate(self._valid_indices):
@@ -834,7 +826,7 @@ class MovingOLS(OLS):
             beta = self._beta_raw[n]
 
             X_slice = X.truncate(before=prior_date, after=date).values
-            Y_slice = np.asarray(Y.truncate(before=prior_date, after=date))
+            Y_slice = _y_converter(Y.truncate(before=prior_date, after=date))
 
             resid = Y_slice - np.dot(X_slice, beta)
             SS_err = (resid ** 2).sum()
@@ -936,12 +928,12 @@ class MovingOLS(OLS):
     @cache_readonly
     def _y_fitted_raw(self):
         """Returns the raw fitted y values."""
-        return (self._x_raw * self._beta_matrix(lag=0)).sum(1)
+        return (self._x.values * self._beta_matrix(lag=0)).sum(1)
 
     @cache_readonly
     def _y_predict_raw(self):
         """Returns the raw predicted y values."""
-        return (self._x_raw * self._beta_matrix(lag=1)).sum(1)
+        return (self._x.values * self._beta_matrix(lag=1)).sum(1)
 
     @cache_readonly
     def _results(self):
@@ -1082,3 +1074,16 @@ def _filter_data(lhs, rhs):
 
     return filtered_lhs, filtered_rhs, pre_filtered_rhs, index, valid
 
+
+
+# A little kludge so we can use this method for both
+# MovingOLS and MovingPanelOLS
+def _y_converter(y):
+    if isinstance(y, Series):
+        return np.asarray(y)
+    else:
+        y = y.values.squeeze()
+        if y.ndim == 0:
+            return np.array([y])
+        else:
+            return y
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index d3008a416..3ac08e680 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -312,6 +312,19 @@ class PanelOLS(OLS):
     def beta(self):
         return Series(self._beta_raw, index=self._x.items)
 
+    @cache_readonly
+    def _weighted_x(self):
+        if self._weights:
+            return self._x.multiply(self._weights)
+        return self._x
+
+    @cache_readonly
+    def _weighted_y(self):
+        if self._weights:
+            return self._y.multiply(self._weights)
+
+        return self._y
+
     @cache_readonly
     def _df_model_raw(self):
         """Returns the raw model degrees of freedom."""
@@ -333,16 +346,15 @@ class PanelOLS(OLS):
 
     @cache_readonly
     def _r2_raw(self):
-        Y = self._y_trans_raw
-        Y_orig = self._y.values
-        X = self._x_trans_raw
+        Y = self._y.values.squeeze()
+        X = self._x.values
 
         resid = Y - np.dot(X, self._beta_raw)
-        SS_err = (resid ** 2).sum()
 
-        SS_total = ((Y_orig - np.mean(Y_orig)) ** 2).sum()
+        SSE = (resid ** 2).sum()
+        SST = ((Y - np.mean(Y)) ** 2).sum()
 
-        return 1 - SS_err / SS_total
+        return 1 - SSE / SST
 
     @cache_readonly
     def _r2_adj_raw(self):
@@ -353,8 +365,8 @@ class PanelOLS(OLS):
 
     @cache_readonly
     def _resid_raw(self):
-        Y = self._y_trans.values.squeeze()
-        X = self._x_trans.values
+        Y = self._y.values.squeeze()
+        X = self._x.values
         return Y - np.dot(X, self._beta_raw)
 
     @cache_readonly
@@ -364,8 +376,9 @@ class PanelOLS(OLS):
     @cache_readonly
     def _rmse_raw(self):
         """Returns the raw rmse values."""
-        X = self._x_trans_raw
-        Y = self._y_trans_raw
+        X = self._x.values
+        Y = self._y.values.squeeze()
+
         resid = Y - np.dot(X, self._beta_raw)
         ss = (resid ** 2).sum()
         return np.sqrt(ss / (self._nobs - self._df_raw))
@@ -378,14 +391,17 @@ class PanelOLS(OLS):
         elif self._cluster == common.ENTITY:
             cluster_axis = 1
 
+        x = self._x
+        y = self._y
+
         if self._time_effects:
-            xx = _xx_time_effects(self._x, self._y)
+            xx = _xx_time_effects(x, y)
         else:
-            xx = np.dot(self._x.values.T, self._x.values)
+            xx = np.dot(x.values.T, x.values)
 
-        return _var_beta_panel(self._y, self._x, self._beta_raw, xx,
-                              self._rmse_raw, cluster_axis, self._nw_lags,
-                              self._nobs, self._df_raw, self._nw_overlap)
+        return _var_beta_panel(y, x, self._beta_raw, xx,
+                               self._rmse_raw, cluster_axis, self._nw_lags,
+                               self._nobs, self._df_raw, self._nw_overlap)
 
     @cache_readonly
     def _y_fitted_raw(self):
@@ -462,8 +478,7 @@ class PanelOLS(OLS):
 
     @cache_readonly
     def _time_obs_count(self):
-        # XXX
-        return self._y.count()
+        return self._y_trans.count()
 
     @cache_readonly
     def _time_has_obs(self):
@@ -627,6 +642,7 @@ class MovingPanelOLS(MovingOLS, PanelOLS):
         """Returns the raw covariance of beta."""
         x = self._x
         y = self._y
+
         dates = x.index.major_axis
 
         cluster_axis = None
@@ -643,7 +659,7 @@ class MovingPanelOLS(MovingOLS, PanelOLS):
 
         if not self._time_effects:
             # Non-transformed X
-            cum_xx = self._cum_xx(self._x)
+            cum_xx = self._cum_xx(x)
 
         results = []
         for n, i in enumerate(self._valid_indices):
@@ -674,9 +690,8 @@ class MovingPanelOLS(MovingOLS, PanelOLS):
 
     @cache_readonly
     def _resid_stats(self):
-        Y = self._y_trans
-        Y_orig = self._y
-        X = self._x_trans
+        Y = self._y
+        X = self._x
         dates = self._index
         window = self._window
 
@@ -693,14 +708,13 @@ class MovingPanelOLS(MovingOLS, PanelOLS):
 
             X_slice = X.truncate(prior_date, date).values
             Y_slice = Y.truncate(prior_date, date).values.squeeze()
-            Y_orig_slice = Y_orig.truncate(prior_date, date).values.squeeze()
 
             beta_slice = self._beta_raw[n]
 
             resid = Y_slice - np.dot(X_slice, beta_slice)
             SS_err = (resid ** 2).sum()
 
-            SS_total = ((Y_orig_slice - Y_orig_slice.mean()) ** 2).sum()
+            SS_total = ((Y_slice - Y_slice.mean()) ** 2).sum()
 
             sse.append(SS_err)
             sst.append(SS_total)
@@ -717,8 +731,8 @@ class MovingPanelOLS(MovingOLS, PanelOLS):
     def _resid_raw(self):
         beta_matrix = self._beta_matrix(lag=0)
 
-        Y = self._y_trans.values.squeeze()
-        X = self._x_trans.values
+        Y = self._y.values.squeeze()
+        X = self._x.values
         resid = Y - (X * beta_matrix).sum(1)
 
         return resid
