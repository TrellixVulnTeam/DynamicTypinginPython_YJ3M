commit f6e4bbd0ad779b0bfa02a3473efa86ac92f6158f
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat May 25 16:35:40 2013 -0700

    TST: unit test for #3503

diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index fddbbf935..207d08e79 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -23,6 +23,7 @@ import pandas.core.datetools as datetools
 from pandas.core.api import (DataFrame, Index, Series, notnull, isnull,
                              MultiIndex, DatetimeIndex, Timestamp, Period)
 from pandas import date_range
+import pandas as pd
 from pandas.io.parsers import read_csv
 
 from pandas.util.testing import (assert_almost_equal,
@@ -4037,7 +4038,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         ### this is technically wrong as the integer portion is coerced to float ###
         expected = DataFrame({ 'first' : Series([1,1,1,1],dtype='float64'), 'second' : Series([np.inf,np.inf,np.inf,1]) })
         assert_frame_equal(result,expected)
-        
+
         result2 = DataFrame(p.values.astype('float64')/p.values,index=p.index,columns=p.columns).fillna(np.inf)
         assert_frame_equal(result2,expected)
 
@@ -4723,7 +4724,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
                        if isinstance(obj_df,Series):
                            assert_series_equal(obj_df,obj_rs)
                        else:
-                           assert_frame_equal(obj_df,obj_rs,check_names=False) 
+                           assert_frame_equal(obj_df,obj_rs,check_names=False)
 
                 # wrote in the same order
                 else:
@@ -4990,9 +4991,9 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
             def _make_frame(names=None):
                 if names is True:
                     names = ['first','second']
-                return DataFrame(np.random.randint(0,10,size=(3,3)), 
-                                 columns=MultiIndex.from_tuples([('bah', 'foo'), 
-                                                                 ('bah', 'bar'), 
+                return DataFrame(np.random.randint(0,10,size=(3,3)),
+                                 columns=MultiIndex.from_tuples([('bah', 'foo'),
+                                                                 ('bah', 'bar'),
                                                                  ('ban', 'baz')],
                                                                 names=names),
                                  dtype='int64')
@@ -5069,12 +5070,12 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
                     raise AssertionError("failure in read_csv header=range(3)")
 
             try:
-                read_csv(path,tupleize_cols=False,header=range(7),index_col=0)  
+                read_csv(path,tupleize_cols=False,header=range(7),index_col=0)
             except (Exception), detail:
                 if not str(detail).startswith('Passed header=[0,1,2,3,4,5,6], len of 7, but only 6 lines in file'):
                     raise AssertionError("failure in read_csv header=range(7)")
 
-            for i in [3,4,5,6,7]: 
+            for i in [3,4,5,6,7]:
                  self.assertRaises(Exception, read_csv, path, tupleize_cols=False, header=range(i), index_col=0)
             self.assertRaises(Exception, read_csv, path, tupleize_cols=False, header=[0,2], index_col=0)
 
@@ -5168,7 +5169,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         with ensure_clean() as filename:
             df.to_csv(filename)
             result = read_csv(filename,index_col=0)
-          
+
             # date cols
             for i in ['0.4','1.4','2.4']:
                  result[i] = to_datetime(result[i])
@@ -5281,6 +5282,14 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         self.assertEqual(result, expected)
 
+        # quoting windows line terminators, presents with encoding?
+        # #3503
+        text = 'a,b,c\n1,"test \r\n",3\n'
+        df = pd.read_csv(StringIO(text))
+        buf = StringIO()
+        df.to_csv(buf, encoding='utf-8', index=False)
+        self.assertEqual(buf.getvalue(), text)
+
     def test_to_csv_unicodewriter_quoting(self):
         import csv
 
@@ -8540,7 +8549,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         result = df1.combine_first(df2)[2]
         expected = Series([True,True,False])
-        assert_series_equal(result,expected) 
+        assert_series_equal(result,expected)
 
         # GH 3593, converting datetime64[ns] incorrecly
         df0 = DataFrame({"a":[datetime(2000, 1, 1), datetime(2000, 1, 2), datetime(2000, 1, 3)]})
@@ -9942,11 +9951,11 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
              df.iloc[:,i]
 
         # dup columns across dtype GH 2079/2194
-        vals = [[1, -1, 2.], [2, -2, 3.]] 
-        rs = DataFrame(vals, columns=['A', 'A', 'B']) 
-        xp = DataFrame(vals) 
-        xp.columns = ['A', 'A', 'B'] 
-        assert_frame_equal(rs, xp) 
+        vals = [[1, -1, 2.], [2, -2, 3.]]
+        rs = DataFrame(vals, columns=['A', 'A', 'B'])
+        xp = DataFrame(vals)
+        xp.columns = ['A', 'A', 'B']
+        assert_frame_equal(rs, xp)
 
     def test_cast_internals(self):
         casted = DataFrame(self.frame._data, dtype=int)
