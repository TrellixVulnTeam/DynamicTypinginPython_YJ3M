commit 9093ad6631fd338550955a1e8f75da4bb3a3b129
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Jan 6 00:07:07 2012 -0500

    BUG: DateOffset.__eq__ between offsets with different keywords

diff --git a/RELEASE.rst b/RELEASE.rst
index f431210c4..756131228 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -142,7 +142,9 @@ pandas 0.7.0
   - Fix bug related to integer type-checking in .ix-based indexing
   - Handle non-string index name passed to DataFrame.from_records
   - DataFrame.insert caused the columns name(s) field to be discarded (GH #527)
-  - Fix erroneous in monotonic many-to-one left joins
+  - Fix error in monotonic many-to-one left joins
+  - Fix __eq__ comparison between DateOffsets with different relativedelta
+    keywords passed
 
 Thanks
 ------
@@ -162,6 +164,7 @@ Thanks
 - Ted Square
 - Dieter Vandenbussche
 - Texas P.
+- Pinxing Ye
 
 pandas 0.6.1
 ============
diff --git a/bench/bench_merge_sqlite.py b/bench/bench_merge_sqlite.py
index 8ff74779f..c50876310 100644
--- a/bench/bench_merge_sqlite.py
+++ b/bench/bench_merge_sqlite.py
@@ -27,7 +27,7 @@ right = right2
 
 # Prepare Database
 import sqlite3
-create_sql_indexes = False
+create_sql_indexes = True
 
 conn = sqlite3.connect(':memory:')
 conn.execute('create table left( key varchar(10), key2 varchar(10), value int);')
@@ -48,21 +48,25 @@ sql_results = DataFrame(index=join_methods, columns=[False])
 niter = 5
 for sort in [False]:
     for join_method in join_methods:
-        sql = """select *
+        sql = """CREATE TABLE test as select *
         from left
            %s join right
              on left.key=right.key
-               and left.key2 = right.key2""" % join_method
+               and left.key2 = right.key2;""" % join_method
         if sort:
             sql = '%s order by key, key2' % sql
         f = lambda: list(conn.execute(sql)) # list fetches results
         g = lambda: conn.execute(sql) # list fetches results
         gc.disable()
         start = time.time()
-        for _ in xrange(niter):
-            f()
+        # for _ in xrange(niter):
+        g()
         elapsed = (time.time() - start) / niter
         gc.enable()
+
+        cur = conn.execute("DROP TABLE test")
+        conn.commit()
+
         sql_results[sort][join_method] = elapsed
 sql_results.columns = ['sqlite3'] # ['dont_sort', 'sort']
 sql_results.index = ['inner', 'outer', 'left']
diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index 14eb839fb..8dd44f66f 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -130,8 +130,11 @@ class DateOffset(object):
         return self.__class__(self.n, **self.kwds)
 
     def _params(self):
-        attrs = sorted((item for item in self.__dict__.iteritems()
-                        if item[0] not in ('kwds', '_offset')))
+        attrs = [(k, v) for k, v in vars(self).iteritems()
+                 if k not in ['kwds', '_offset']]
+        attrs.extend(self.kwds.items())
+        attrs = sorted(set(attrs))
+
         params = tuple([str(self.__class__)] + attrs)
         return params
 
diff --git a/pandas/tests/test_datetools.py b/pandas/tests/test_datetools.py
index e05e883f5..3543ba698 100644
--- a/pandas/tests/test_datetools.py
+++ b/pandas/tests/test_datetools.py
@@ -41,7 +41,7 @@ def test_normalize_date():
 ### DateOffset Tests
 #####
 
-class TestDateOffset(object):
+class TestDateOffset(unittest.TestCase):
 
     def setUp(self):
         self.d = datetime(2008, 1, 2)
@@ -72,6 +72,13 @@ class TestDateOffset(object):
     def test_copy(self):
         assert(DateOffset(months=2).copy() == DateOffset(months=2))
 
+    def test_eq(self):
+        offset1 = DateOffset(days=1)
+        offset2 = DateOffset(days=365)
+
+        self.assert_(offset1 != offset2)
+        self.assert_(not (offset1 == offset2))
+
 class TestBusinessDay(unittest.TestCase):
 
     def setUp(self):
