commit 2e1bd5bd493378dc3a8e4831900d28cee14f280f
Author: Jeffrey Tratner <jeffrey.tratner@gmail.com>
Date:   Sun Jun 16 13:48:06 2013 -0400

    CLN: pandas/tseries: replace bare exceptions
    
    Replaces bare exceptions with more descriptive ones.
    CLN: tseries/frequencies: replace bare exceptions
    
    CLN: tseries/index: replace bare exceptions (mostly tz-aware + tz-naive
    TypeError stuff)
    
    CLN: tseries/offsets: replace bare exceptions
    
    CLN: tseries/tools: replace bare exceptions
    
    CLN: Remove exclamation points from error messages.
    
    TST: Add more descriptive tests for tseries.
    
    TST: Change tests in tseries/test_offsets to be more descriptive
    
    TST: Update tests for exceptions from frequencies.py
    
    TST: Make more Exception tests in tseries/test_timezones explicit
    
    TST: Change test of ole2datetime to use explicit Exception check
    
    TST: Fix up tests in tseries/test/test_daterange
    
    In particular, fix up a bunch of test cases that were failing because
    of TypeErrors/clearly not changing when _cached_range changed type
    signature.

diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index 5985a8a89..f54bfee55 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -499,7 +499,7 @@ def get_offset(name):
     if offset is not None:
         return offset
     else:
-        raise Exception('Bad rule name requested: %s!' % name)
+        raise ValueError('Bad rule name requested: %s.' % name)
 
 
 getOffset = get_offset
@@ -522,7 +522,7 @@ def get_offset_name(offset):
     if name is not None:
         return name
     else:
-        raise Exception('Bad rule given: %s!' % offset)
+        raise ValueError('Bad rule given: %s.' % offset)
 
 
 def get_legacy_offset_name(offset):
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 7f726b8f3..867e5cf4d 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -428,7 +428,7 @@ class DatetimeIndex(Int64Index):
             end = Timestamp(end)
 
         if offset is None:
-            raise Exception('Must provide a DateOffset!')
+            raise TypeError('Must provide a DateOffset!')
 
         drc = _daterange_cache
         if offset not in _daterange_cache:
@@ -922,10 +922,10 @@ class DatetimeIndex(Int64Index):
         if isinstance(other, DatetimeIndex):
             if self.tz is not None:
                 if other.tz is None:
-                    raise Exception('Cannot join tz-naive with tz-aware '
+                    raise TypeError('Cannot join tz-naive with tz-aware '
                                     'DatetimeIndex')
             elif other.tz is not None:
-                raise Exception('Cannot join tz-naive with tz-aware '
+                raise TypeError('Cannot join tz-naive with tz-aware '
                                 'DatetimeIndex')
 
             if self.tz != other.tz:
@@ -1492,7 +1492,7 @@ class DatetimeIndex(Int64Index):
 
         if self.tz is None:
             # tz naive, use tz_localize
-            raise Exception('Cannot convert tz-naive timestamps, use '
+            raise TypeError('Cannot convert tz-naive timestamps, use '
                             'tz_localize to localize')
 
         # No conversion since timestamps are all UTC to begin with
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index 025a12a17..9585d1f81 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -351,7 +351,7 @@ class BusinessDay(CacheableOffset, DateOffset):
             return BDay(self.n, offset=self.offset + other,
                         normalize=self.normalize)
         else:
-            raise Exception('Only know how to combine business day with '
+            raise TypeError('Only know how to combine business day with '
                             'datetime or timedelta!')
 
     @classmethod
@@ -487,7 +487,7 @@ class Week(DateOffset, CacheableOffset):
 
         if self.weekday is not None:
             if self.weekday < 0 or self.weekday > 6:
-                raise Exception('Day must be 0<=day<=6, got %d' %
+                raise ValueError('Day must be 0<=day<=6, got %d' %
                                 self.weekday)
 
         self._inc = timedelta(weeks=1)
@@ -562,13 +562,13 @@ class WeekOfMonth(DateOffset, CacheableOffset):
         self.week = kwds['week']
 
         if self.n == 0:
-            raise Exception('N cannot be 0')
+            raise ValueError('N cannot be 0')
 
         if self.weekday < 0 or self.weekday > 6:
-            raise Exception('Day must be 0<=day<=6, got %d' %
+            raise ValueError('Day must be 0<=day<=6, got %d' %
                             self.weekday)
         if self.week < 0 or self.week > 3:
-            raise Exception('Week must be 0<=day<=3, got %d' %
+            raise ValueError('Week must be 0<=day<=3, got %d' %
                             self.week)
 
         self.kwds = kwds
diff --git a/pandas/tseries/tests/test_daterange.py b/pandas/tseries/tests/test_daterange.py
index 22ed41f82..7fbdbbe32 100644
--- a/pandas/tseries/tests/test_daterange.py
+++ b/pandas/tseries/tests/test_daterange.py
@@ -13,6 +13,7 @@ from pandas.tseries.index import bdate_range, date_range
 import pandas.tseries.tools as tools
 
 import pandas.core.datetools as datetools
+from pandas.util.testing import assertRaisesRegexp
 
 
 def _skip_if_no_pytz():
@@ -65,6 +66,12 @@ class TestDateRange(unittest.TestCase):
         self.assertRaises(ValueError, date_range, '2011-1-1', '2012-1-1', 'B')
         self.assertRaises(ValueError, bdate_range, '2011-1-1', '2012-1-1', 'B')
 
+    def test_naive_aware_conflicts(self):
+        naive = bdate_range(START, END, freq=datetools.bday, tz=None)
+        aware = bdate_range(START, END, freq=datetools.bday, tz="Asia/Hong_Kong")
+        assertRaisesRegexp(TypeError, "tz-naive.*tz-aware", naive.join, aware)
+        assertRaisesRegexp(TypeError, "tz-naive.*tz-aware", aware.join, naive)
+
     def test_cached_range(self):
         rng = DatetimeIndex._cached_range(START, END,
                                           offset=datetools.bday)
@@ -73,16 +80,16 @@ class TestDateRange(unittest.TestCase):
         rng = DatetimeIndex._cached_range(end=START, periods=20,
                                           offset=datetools.bday)
 
-        self.assertRaises(Exception, DatetimeIndex._cached_range, START, END)
+        assertRaisesRegexp(TypeError, "offset", DatetimeIndex._cached_range, START, END)
 
-        self.assertRaises(Exception, DatetimeIndex._cached_range, START,
-                          freq=datetools.bday)
+        assertRaisesRegexp(TypeError, "specify period", DatetimeIndex._cached_range, START,
+                          offset=datetools.bday)
 
-        self.assertRaises(Exception, DatetimeIndex._cached_range, end=END,
-                          freq=datetools.bday)
+        assertRaisesRegexp(TypeError, "specify period", DatetimeIndex._cached_range, end=END,
+                          offset=datetools.bday)
 
-        self.assertRaises(Exception, DatetimeIndex._cached_range, periods=20,
-                          freq=datetools.bday)
+        assertRaisesRegexp(TypeError, "start or end", DatetimeIndex._cached_range, periods=20,
+                          offset=datetools.bday)
 
     def test_cached_range_bug(self):
         rng = date_range('2010-09-01 05:00:00', periods=50,
diff --git a/pandas/tseries/tests/test_offsets.py b/pandas/tseries/tests/test_offsets.py
index 209f770da..bcd74e7e6 100644
--- a/pandas/tseries/tests/test_offsets.py
+++ b/pandas/tseries/tests/test_offsets.py
@@ -20,6 +20,7 @@ from nose.tools import assert_raises
 
 from pandas.tslib import monthrange
 from pandas.lib import Timestamp
+from pandas.util.testing import assertRaisesRegexp
 
 _multiprocess_can_split_ = True
 
@@ -44,7 +45,7 @@ def test_ole2datetime():
     actual = ole2datetime(60000)
     assert actual == datetime(2064, 4, 8)
 
-    assert_raises(Exception, ole2datetime, 60)
+    assert_raises(ValueError, ole2datetime, 60)
 
 
 def test_to_datetime1():
@@ -285,7 +286,7 @@ class TestBusinessDay(unittest.TestCase):
         self.assertEqual(rs, xp)
 
     def test_apply_corner(self):
-        self.assertRaises(Exception, BDay().apply, BMonthEnd())
+        self.assertRaises(TypeError, BDay().apply, BMonthEnd())
 
     def test_offsets_compare_equal(self):
         # root cause of #456
@@ -301,8 +302,8 @@ def assertOnOffset(offset, date, expected):
 
 class TestWeek(unittest.TestCase):
     def test_corner(self):
-        self.assertRaises(Exception, Week, weekday=7)
-        self.assertRaises(Exception, Week, weekday=-1)
+        self.assertRaises(ValueError, Week, weekday=7)
+        assertRaisesRegexp(ValueError, "Day must be", Week, weekday=-1)
 
     def test_isAnchored(self):
         self.assert_(Week(weekday=0).isAnchored())
@@ -366,11 +367,11 @@ class TestWeek(unittest.TestCase):
 class TestWeekOfMonth(unittest.TestCase):
 
     def test_constructor(self):
-        self.assertRaises(Exception, WeekOfMonth, n=0, week=1, weekday=1)
-        self.assertRaises(Exception, WeekOfMonth, n=1, week=4, weekday=0)
-        self.assertRaises(Exception, WeekOfMonth, n=1, week=-1, weekday=0)
-        self.assertRaises(Exception, WeekOfMonth, n=1, week=0, weekday=-1)
-        self.assertRaises(Exception, WeekOfMonth, n=1, week=0, weekday=7)
+        assertRaisesRegexp(ValueError, "^N cannot be 0", WeekOfMonth, n=0, week=1, weekday=1)
+        assertRaisesRegexp(ValueError, "^Week", WeekOfMonth, n=1, week=4, weekday=0)
+        assertRaisesRegexp(ValueError, "^Week", WeekOfMonth, n=1, week=-1, weekday=0)
+        assertRaisesRegexp(ValueError, "^Day", WeekOfMonth, n=1, week=0, weekday=-1)
+        assertRaisesRegexp(ValueError, "^Day", WeekOfMonth, n=1, week=0, weekday=7)
 
     def test_offset(self):
         date1 = datetime(2011, 1, 4)  # 1st Tuesday of Month
@@ -1445,7 +1446,7 @@ def test_hasOffsetName():
 
 
 def test_get_offset_name():
-    assert_raises(Exception, get_offset_name, BDay(2))
+    assertRaisesRegexp(ValueError, 'Bad rule.*BusinessDays', get_offset_name, BDay(2))
 
     assert get_offset_name(BDay()) == 'B'
     assert get_offset_name(BMonthEnd()) == 'BM'
@@ -1457,7 +1458,7 @@ def test_get_offset_name():
 
 
 def test_get_offset():
-    assert_raises(Exception, get_offset, 'gibberish')
+    assertRaisesRegexp(ValueError, "rule.*GIBBERISH", get_offset, 'gibberish')
 
     assert get_offset('B') == BDay()
     assert get_offset('b') == BDay()
diff --git a/pandas/tseries/tests/test_timezones.py b/pandas/tseries/tests/test_timezones.py
index 21b11bb45..e57b554b7 100644
--- a/pandas/tseries/tests/test_timezones.py
+++ b/pandas/tseries/tests/test_timezones.py
@@ -18,8 +18,9 @@ import pandas.core.datetools as datetools
 import pandas.tseries.offsets as offsets
 from pandas.tseries.index import bdate_range, date_range
 import pandas.tseries.tools as tools
+from pytz import NonExistentTimeError
 
-from pandas.util.testing import assert_series_equal, assert_almost_equal
+from pandas.util.testing import assert_series_equal, assert_almost_equal, assertRaisesRegexp
 import pandas.util.testing as tm
 
 import pandas.lib as lib
@@ -93,7 +94,8 @@ class TestTimeZoneSupport(unittest.TestCase):
 
         # DST ambiguity, this should fail
         rng = date_range('3/11/2012', '3/12/2012', freq='30T')
-        self.assertRaises(Exception, rng.tz_localize, 'US/Eastern')
+        # Is this really how it should fail??
+        self.assertRaises(NonExistentTimeError, rng.tz_localize, 'US/Eastern')
 
     def test_timestamp_tz_localize(self):
         stamp = Timestamp('3/11/2012 04:00')
@@ -672,7 +674,7 @@ class TestTimeZones(unittest.TestCase):
         # Can't localize if already tz-aware
         rng = date_range('1/1/2011', periods=100, freq='H', tz='utc')
         ts = Series(1, index=rng)
-        self.assertRaises(Exception, ts.tz_localize, 'US/Eastern')
+        assertRaisesRegexp(TypeError, 'Already tz-aware', ts.tz_localize, 'US/Eastern')
 
     def test_series_frame_tz_convert(self):
         rng = date_range('1/1/2011', periods=200, freq='D',
@@ -696,7 +698,7 @@ class TestTimeZones(unittest.TestCase):
         # can't convert tz-naive
         rng = date_range('1/1/2011', periods=200, freq='D')
         ts = Series(1, index=rng)
-        self.assertRaises(Exception, ts.tz_convert, 'US/Eastern')
+        assertRaisesRegexp(TypeError, "Cannot convert tz-naive", ts.tz_convert, 'US/Eastern')
 
     def test_join_utc_convert(self):
         rng = date_range('1/1/2011', periods=100, freq='H', tz='utc')
diff --git a/pandas/tseries/tools.py b/pandas/tseries/tools.py
index c80d2ef5d..531d9f399 100644
--- a/pandas/tseries/tools.py
+++ b/pandas/tseries/tools.py
@@ -344,6 +344,6 @@ def ole2datetime(oledt):
     # Excel has a bug where it thinks the date 2/29/1900 exists
     # we just reject any date before 3/1/1900.
     if val < 61:
-        raise Exception("Value is outside of acceptable range: %s " % val)
+        raise ValueError("Value is outside of acceptable range: %s " % val)
 
     return OLE_TIME_ZERO + timedelta(days=val)
