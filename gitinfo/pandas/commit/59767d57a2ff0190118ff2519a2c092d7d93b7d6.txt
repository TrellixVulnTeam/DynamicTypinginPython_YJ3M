commit 59767d57a2ff0190118ff2519a2c092d7d93b7d6
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Sep 9 22:42:12 2012 -0400

    BUG: fix #1866 and DatetimeIndex union with Int64Index bug

diff --git a/RELEASE.rst b/RELEASE.rst
index e233737b2..f3aa06f86 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -132,6 +132,9 @@ pandas 0.9.0
     (1677-2262)
   - Revert to prior behavior of normalize_date with datetime.date objects
     (return datetime)
+  - Fix broken interaction between np.nansum and Series.any/all
+  - Fix bug with multiple column date parsers (#1866)
+  - DatetimeIndex.union(Int64Index) was broken
 
 pandas 0.8.1
 ============
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index ba5b6dcd2..8be288248 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -267,6 +267,21 @@ KORD,19990127 22:00:00, 21:56:00, -0.5900, 1.7100, 5.1000, 0.0000, 290.0000
         d = datetime(1999, 1, 27, 19, 0)
         self.assert_(df.index[0] == d)
 
+    def test_multiple_date_cols_int_cast(self):
+        data =  ("KORD,19990127, 19:00:00, 18:56:00, 0.8100\n"
+                 "KORD,19990127, 20:00:00, 19:56:00, 0.0100\n"
+                 "KORD,19990127, 21:00:00, 20:56:00, -0.5900\n"
+                 "KORD,19990127, 21:00:00, 21:18:00, -0.9900\n"
+                 "KORD,19990127, 22:00:00, 21:56:00, -0.5900\n"
+                 "KORD,19990127, 23:00:00, 22:56:00, -0.5900")
+        date_spec = {'nominal': [1, 2], 'actual': [1, 3]}
+        import pandas.io.date_converters as conv
+
+        # it works!
+        df = read_csv(StringIO(data), header=None, parse_dates=date_spec,
+                      date_parser=conv.parse_date_time)
+        self.assert_('nominal' in df)
+
     def test_single_line(self):
         df = read_csv(StringIO('1,2'), names=['a', 'b'], sep=None)
         assert_frame_equal(DataFrame({'a': [1], 'b': [2]}), df)
diff --git a/pandas/src/inference.pyx b/pandas/src/inference.pyx
index 6ffb8c1bb..95d0fcf72 100644
--- a/pandas/src/inference.pyx
+++ b/pandas/src/inference.pyx
@@ -546,7 +546,7 @@ def try_parse_date_and_time(ndarray[object] dates, ndarray[object] times,
     if date_parser is None:
         try:
             from dateutil.parser import parse
-            parse_date = lambda x: parse(x, dayfirst=dayfirst)
+            parse_date = lambda x: parse(str(x), dayfirst=dayfirst)
         except ImportError: # pragma: no cover
             def parse_date(s):
                 try:
@@ -559,7 +559,7 @@ def try_parse_date_and_time(ndarray[object] dates, ndarray[object] times,
     if time_parser is None:
         try:
             from dateutil.parser import parse
-            parse_time = lambda x: parse(x)
+            parse_time = lambda x: parse(str(x))
         except ImportError: # pragma: no cover
             def parse_time(s):
                 try:
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 89dc6e1f8..35f5b4d81 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -219,6 +219,8 @@ class DatetimeIndex(Int64Index):
                 else:
                     subarr = data
         elif data.dtype == _INT64_DTYPE:
+            if isinstance(data, Int64Index):
+                raise TypeError('cannot convert Int64Index->DatetimeIndex')
             if copy:
                 subarr = np.asarray(data, dtype=_NS_DTYPE)
             else:
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 3ea2d85c2..50b191298 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -11,9 +11,9 @@ import nose
 import numpy as np
 randn = np.random.randn
 
-from pandas import (Index, Series, TimeSeries, DataFrame, isnull,
-                    date_range, Timestamp, DatetimeIndex, Int64Index,
-                    to_datetime, bdate_range)
+from pandas import (Index, Series, TimeSeries, DataFrame,
+                    isnull, date_range, Timestamp, DatetimeIndex,
+                    Int64Index, to_datetime, bdate_range)
 
 from pandas.core.daterange import DateRange
 import pandas.core.datetools as datetools
@@ -1341,6 +1341,19 @@ class TestDatetimeIndex(unittest.TestCase):
         assert_almost_equal(index.isin([index[2], 5]),
                             [False, False, True, False])
 
+    def test_union(self):
+        i1 = Int64Index(np.arange(0, 20, 2))
+        i2 = Int64Index(np.arange(10, 30, 2))
+        result = i1.union(i2)
+        expected = Int64Index(np.arange(0, 30, 2))
+        self.assert_(np.array_equal(result, expected))
+
+    def test_union_with_DatetimeIndex(self):
+        i1 = Int64Index(np.arange(0, 20, 2))
+        i2 = DatetimeIndex(start='2012-01-03 00:00:00', periods=10, freq='D')
+        i1.union(i2) # Works
+        i2.union(i1) # Fails with "AttributeError: can't set attribute"
+
 class TestLegacySupport(unittest.TestCase):
 
     @classmethod
