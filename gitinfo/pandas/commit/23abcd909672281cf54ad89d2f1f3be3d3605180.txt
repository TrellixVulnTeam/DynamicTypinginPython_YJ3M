commit 23abcd909672281cf54ad89d2f1f3be3d3605180
Author: Mike Kutzma <michaelkutzma@gmail.com>
Date:   Sun Mar 15 22:30:09 2020 -0400

    [BUG] add consistency to_numeric on empty list (#32512)

diff --git a/doc/source/whatsnew/v1.1.0.rst b/doc/source/whatsnew/v1.1.0.rst
index 36cfb4a90..9be994ee7 100644
--- a/doc/source/whatsnew/v1.1.0.rst
+++ b/doc/source/whatsnew/v1.1.0.rst
@@ -268,6 +268,7 @@ Numeric
 ^^^^^^^
 - Bug in :meth:`DataFrame.floordiv` with ``axis=0`` not treating division-by-zero like :meth:`Series.floordiv` (:issue:`31271`)
 - Bug in :meth:`to_numeric` with string argument ``"uint64"`` and ``errors="coerce"`` silently fails (:issue:`32394`)
+- Bug in :meth:`to_numeric` with ``downcast="unsigned"`` fails for empty data (:issue:`32493`)
 -
 
 Conversion
diff --git a/pandas/core/tools/numeric.py b/pandas/core/tools/numeric.py
index 7d1e4bbd8..a6198f8b7 100644
--- a/pandas/core/tools/numeric.py
+++ b/pandas/core/tools/numeric.py
@@ -162,7 +162,7 @@ def to_numeric(arg, errors="raise", downcast=None):
 
         if downcast in ("integer", "signed"):
             typecodes = np.typecodes["Integer"]
-        elif downcast == "unsigned" and np.min(values) >= 0:
+        elif downcast == "unsigned" and (not len(values) or np.min(values) >= 0):
             typecodes = np.typecodes["UnsignedInteger"]
         elif downcast == "float":
             typecodes = np.typecodes["Float"]
diff --git a/pandas/tests/tools/test_to_numeric.py b/pandas/tests/tools/test_to_numeric.py
index e0dfeac4a..263887a8e 100644
--- a/pandas/tests/tools/test_to_numeric.py
+++ b/pandas/tests/tools/test_to_numeric.py
@@ -629,6 +629,18 @@ def test_non_coerce_uint64_conflict(errors, exp):
         tm.assert_series_equal(result, ser)
 
 
+@pytest.mark.parametrize("dc1", ["integer", "float", "unsigned"])
+@pytest.mark.parametrize("dc2", ["integer", "float", "unsigned"])
+def test_downcast_empty(dc1, dc2):
+    # GH32493
+
+    tm.assert_numpy_array_equal(
+        pd.to_numeric([], downcast=dc1),
+        pd.to_numeric([], downcast=dc2),
+        check_dtype=False,
+    )
+
+
 def test_failure_to_convert_uint64_string_to_NaN():
     # GH 32394
     result = to_numeric("uint64", errors="coerce")
