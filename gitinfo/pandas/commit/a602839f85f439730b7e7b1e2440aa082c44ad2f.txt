commit a602839f85f439730b7e7b1e2440aa082c44ad2f
Author: jreback <jeff@reback.net>
Date:   Wed Dec 26 15:01:47 2012 -0500

    ENH: allow index=list of columns or True/False/None to guide index creation at append time

diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index c736c677e..a389ccf00 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -798,7 +798,7 @@ class HDFStore(object):
         t.write(axes=axes, obj=obj,
                 append=append, compression=comp, **kwargs)
         if index:
-            t.create_index()
+            t.create_index(columns = index)
 
     def _read_ndim_table(self, group, where=None, **kwargs):
         t = create_table(self, group, **kwargs)
@@ -811,7 +811,7 @@ class HDFStore(object):
         t = create_table(self, group, typ = 'appendable_frame' if df.index.nlevels == 1 else 'appendable_multiframe')
         t.write(axes=axes, obj=df, append=append, compression=comp, **kwargs)
         if index:
-            t.create_index()
+            t.create_index(columns = index)
 
     _read_frame_table = _read_ndim_table
 
@@ -822,7 +822,7 @@ class HDFStore(object):
         t.write(axes=axes, obj=panel,
                 append=append, compression=comp, **kwargs)
         if index:
-            t.create_index()
+            t.create_index(columns = index)
 
     _read_wide_table = _read_ndim_table
 
@@ -1617,12 +1617,12 @@ class Table(object):
     def create_index(self, columns = None, optlevel = None, kind = None):
         """
         Create a pytables index on the specified columns
-          note: cannot index Time64Col() currently; PyTables must be >= 2.3.1
+          note: cannot index Time64Col() currently; PyTables must be >= 2.3
 
 
         Paramaters
         ----------
-        columns : None or list_like (the indexers to index)
+        columns : False (don't create an index), True (create all columns index), None or list_like (the indexers to index)
         optlevel: optimization level (defaults to 6)
         kind    : kind of index (defaults to 'medium')
 
@@ -1633,9 +1633,10 @@ class Table(object):
         """
 
         if not self.infer_axes(): return
+        if columns is False: return
 
         # index all indexables and data_columns
-        if columns is None:
+        if columns is None or columns is True:
             columns = [ a.cname for a in self.axes if a.is_data_indexable ]
         if not isinstance(columns, (tuple,list)):
             columns = [ columns ]
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index aed81bc43..096d35922 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -544,42 +544,54 @@ class TestHDFStore(unittest.TestCase):
 
     def test_create_table_index(self):
 
+        def col(t,column):
+            return getattr(self.store.get_table(t).table.cols,column)
+
         # index=False
         wp = tm.makePanel()
         self.store.append('p5', wp, index=False)
         self.store.create_table_index('p5', columns = ['major_axis'])
-
-        assert(self.store.handle.root.p5.table.cols.major_axis.is_indexed == True)
-        assert(self.store.handle.root.p5.table.cols.minor_axis.is_indexed == False)
+        assert(col('p5','major_axis').is_indexed == True)
+        assert(col('p5','minor_axis').is_indexed == False)
 
         # index=True
         self.store.append('p5i', wp, index=True)
-
-        assert(self.store.handle.root.p5i.table.cols.major_axis.is_indexed == True)
-        assert(self.store.handle.root.p5i.table.cols.minor_axis.is_indexed == True)
+        assert(col('p5i','major_axis').is_indexed == True)
+        assert(col('p5i','minor_axis').is_indexed == True)
 
         # default optlevels
-        assert(self.store.handle.root.p5.table.cols.major_axis.index.optlevel == 6)
-        assert(self.store.handle.root.p5.table.cols.major_axis.index.kind == 'medium')
+        self.store.get_table('p5').create_index()
+        assert(col('p5','major_axis').index.optlevel == 6)
+        assert(col('p5','minor_axis').index.kind == 'medium')
 
         # let's change the indexing scheme
         self.store.create_table_index('p5')
-        assert(self.store.handle.root.p5.table.cols.major_axis.index.optlevel == 6)
-        assert(self.store.handle.root.p5.table.cols.major_axis.index.kind == 'medium')
+        assert(col('p5','major_axis').index.optlevel == 6)
+        assert(col('p5','minor_axis').index.kind == 'medium')
         self.store.create_table_index('p5', optlevel=9)
-        assert(self.store.handle.root.p5.table.cols.major_axis.index.optlevel == 9)
-        assert(self.store.handle.root.p5.table.cols.major_axis.index.kind == 'medium')
+        assert(col('p5','major_axis').index.optlevel == 9)
+        assert(col('p5','minor_axis').index.kind == 'medium')
         self.store.create_table_index('p5', kind='full')
-        assert(self.store.handle.root.p5.table.cols.major_axis.index.optlevel == 9)
-        assert(self.store.handle.root.p5.table.cols.major_axis.index.kind == 'full')
+        assert(col('p5','major_axis').index.optlevel == 9)
+        assert(col('p5','minor_axis').index.kind == 'full')
         self.store.create_table_index('p5', optlevel=1, kind='light')
-        assert(self.store.handle.root.p5.table.cols.major_axis.index.optlevel == 1)
-        assert(self.store.handle.root.p5.table.cols.major_axis.index.kind == 'light')
-
+        assert(col('p5','major_axis').index.optlevel == 1)
+        assert(col('p5','minor_axis').index.kind == 'light')
+        
+        # data columns
         df = tm.makeTimeDataFrame()
-        self.store.append('f', df[:10])
-        self.store.append('f', df[10:])
-        self.store.create_table_index('f')
+        df['string'] = 'foo'
+        df['string2'] = 'bar'
+        self.store.append('f', df, data_columns=['string','string2'])
+        assert(col('f','index').is_indexed == True)
+        assert(col('f','string').is_indexed == True)
+        assert(col('f','string2').is_indexed == True)
+
+        # specify index=columns
+        self.store.append('f2', df, index=['string'], data_columns=['string','string2'])
+        assert(col('f2','index').is_indexed == False)
+        assert(col('f2','string').is_indexed == True)
+        assert(col('f2','string2').is_indexed == False)
 
         # try to index a non-table
         self.store.put('f2', df)
