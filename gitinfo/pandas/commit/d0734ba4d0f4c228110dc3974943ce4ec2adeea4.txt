commit d0734ba4d0f4c228110dc3974943ce4ec2adeea4
Author: Yadunandan <yadunandan2001@gmail.com>
Date:   Wed May 11 18:13:30 2016 -0400

    BUG: Added checks for NaN in __call__ of EngFormatter
    
    closes #11981
    
    Author: Yadunandan <yadunandan2001@gmail.com>
    
    Closes #13124 from yaduart/bugfix-11981 and squashes the following commits:
    
    8de1f64 [Yadunandan] BUG: Added checks for Nan in __call__ of EngFormatter

diff --git a/doc/source/whatsnew/v0.18.2.txt b/doc/source/whatsnew/v0.18.2.txt
index fa426aa30..5ffbce986 100644
--- a/doc/source/whatsnew/v0.18.2.txt
+++ b/doc/source/whatsnew/v0.18.2.txt
@@ -132,3 +132,4 @@ Bug Fixes
 
 - Bug in ``NaT`` - ``Period`` raises ``AttributeError`` (:issue:`13071`)
 - Bug in ``Period`` addition raises ``TypeError`` if ``Period`` is on right hand side (:issue:`13069`)
+- Bug in ``pd.set_eng_float_format()`` that would prevent NaN's from formatting (:issue:`11981`)
diff --git a/pandas/formats/format.py b/pandas/formats/format.py
index c3ffc018d..70b506a14 100644
--- a/pandas/formats/format.py
+++ b/pandas/formats/format.py
@@ -2590,6 +2590,9 @@ class EngFormatter(object):
         import math
         dnum = decimal.Decimal(str(num))
 
+        if decimal.Decimal.is_nan(dnum):
+            return 'NaN'
+
         sign = 1
 
         if dnum < 0:  # pragma: no cover
diff --git a/pandas/tests/formats/test_format.py b/pandas/tests/formats/test_format.py
index 4fcee32c4..96770a86f 100644
--- a/pandas/tests/formats/test_format.py
+++ b/pandas/tests/formats/test_format.py
@@ -3087,11 +3087,11 @@ $1$,$2$
 
     def test_to_csv_escapechar(self):
         df = DataFrame({'col': ['a"a', '"bb"']})
-        expected = """\
+        expected = '''\
 "","col"
 "0","a\\"a"
 "1","\\"bb\\""
-"""
+'''
 
         with tm.ensure_clean('test.csv') as path:  # QUOTE_ALL
             df.to_csv(path, quoting=1, doublequote=False, escapechar='\\')
@@ -3925,6 +3925,21 @@ class TestEngFormatter(tm.TestCase):
         result = formatter(0)
         self.assertEqual(result, u(' 0.000'))
 
+    def test_nan(self):
+        # Issue #11981
+
+        formatter = fmt.EngFormatter(accuracy=1, use_eng_prefix=True)
+        result = formatter(np.nan)
+        self.assertEqual(result, u('NaN'))
+
+        df = pd.DataFrame({'a':[1.5, 10.3, 20.5],
+                           'b':[50.3, 60.67, 70.12],
+                           'c':[100.2, 101.33, 120.33]})
+        pt = df.pivot_table(values='a', index='b', columns='c')
+        fmt.set_eng_float_format(accuracy=1)
+        result = pt.to_string()
+        self.assertTrue('NaN' in result)
+        self.reset_display_options()
 
 def _three_digit_exp():
     return '%.4g' % 1.7e8 == '1.7e+008'
