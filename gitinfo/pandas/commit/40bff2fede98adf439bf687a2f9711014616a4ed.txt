commit 40bff2fede98adf439bf687a2f9711014616a4ed
Author: MomIsBestFriend <50263213+MomIsBestFriend@users.noreply.github.com>
Date:   Tue Jan 7 03:48:03 2020 +0200

    STY: spaces in wrong place (#30767)

diff --git a/pandas/tests/indexes/categorical/test_category.py b/pandas/tests/indexes/categorical/test_category.py
index 61e30d3e5..d09dc586f 100644
--- a/pandas/tests/indexes/categorical/test_category.py
+++ b/pandas/tests/indexes/categorical/test_category.py
@@ -298,8 +298,8 @@ class TestCategoricalIndex(Base):
 
         # invalid
         msg = (
-            "cannot insert an item into a CategoricalIndex that is not"
-            " already an existing category"
+            "cannot insert an item into a CategoricalIndex that is not "
+            "already an existing category"
         )
         with pytest.raises(TypeError, match=msg):
             ci.insert(0, "d")
@@ -528,8 +528,8 @@ class TestCategoricalIndex(Base):
             tm.assert_almost_equal(r1, np.array([0, 1, 2, -1], dtype=np.intp))
 
         msg = (
-            "method='pad' and method='backfill' not implemented yet for"
-            " CategoricalIndex"
+            "method='pad' and method='backfill' not implemented yet for "
+            "CategoricalIndex"
         )
         with pytest.raises(NotImplementedError, match=msg):
             idx2.get_indexer(idx1, method="pad")
@@ -673,8 +673,8 @@ class TestCategoricalIndex(Base):
             ci1 == Index(["a", "b", "c"])
 
         msg = (
-            "categorical index comparisons must have the same categories"
-            " and ordered attributes"
+            "categorical index comparisons must have the same categories "
+            "and ordered attributes"
             "|"
             "Categoricals can only be compared if 'categories' are the same. "
             "Categories are different lengths"
diff --git a/pandas/tests/indexes/datetimes/test_constructors.py b/pandas/tests/indexes/datetimes/test_constructors.py
index 46d7cd2c1..ffe51dd1f 100644
--- a/pandas/tests/indexes/datetimes/test_constructors.py
+++ b/pandas/tests/indexes/datetimes/test_constructors.py
@@ -547,15 +547,15 @@ class TestDatetimeIndex:
 
         # non-conforming
         msg = (
-            "Inferred frequency None from passed values does not conform"
-            " to passed frequency D"
+            "Inferred frequency None from passed values does not conform "
+            "to passed frequency D"
         )
         with pytest.raises(ValueError, match=msg):
             DatetimeIndex(["2000-01-01", "2000-01-02", "2000-01-04"], freq="D")
 
         msg = (
-            "Of the four parameters: start, end, periods, and freq, exactly"
-            " three must be specified"
+            "Of the four parameters: start, end, periods, and freq, exactly "
+            "three must be specified"
         )
         with pytest.raises(ValueError, match=msg):
             date_range(start="2011-01-01", freq="b")
diff --git a/pandas/tests/indexes/datetimes/test_tools.py b/pandas/tests/indexes/datetimes/test_tools.py
index a6a43697c..fe65653ba 100644
--- a/pandas/tests/indexes/datetimes/test_tools.py
+++ b/pandas/tests/indexes/datetimes/test_tools.py
@@ -616,8 +616,8 @@ class TestToDatetime:
             pd.Timestamp("2013-01-02 14:00:00", tz="US/Eastern"),
         ]
         msg = (
-            "Tz-aware datetime.datetime cannot be converted to datetime64"
-            " unless utc=True"
+            "Tz-aware datetime.datetime cannot be "
+            "converted to datetime64 unless utc=True"
         )
         with pytest.raises(ValueError, match=msg):
             pd.to_datetime(arr, cache=cache)
diff --git a/pandas/tests/indexes/interval/test_indexing.py b/pandas/tests/indexes/interval/test_indexing.py
index 3c54442cf..1bfc58733 100644
--- a/pandas/tests/indexes/interval/test_indexing.py
+++ b/pandas/tests/indexes/interval/test_indexing.py
@@ -349,8 +349,8 @@ class TestSliceLocs:
         with pytest.raises(
             KeyError,
             match=re.escape(
-                '"Cannot get left slice bound for non-unique label:'
-                " Interval(0, 2, closed='right')\""
+                '"Cannot get left slice bound for non-unique label: '
+                "Interval(0, 2, closed='right')\""
             ),
         ):
             index.slice_locs(start=Interval(0, 2), end=Interval(2, 4))
@@ -358,8 +358,8 @@ class TestSliceLocs:
         with pytest.raises(
             KeyError,
             match=re.escape(
-                '"Cannot get left slice bound for non-unique label:'
-                " Interval(0, 2, closed='right')\""
+                '"Cannot get left slice bound for non-unique label: '
+                "Interval(0, 2, closed='right')\""
             ),
         ):
             index.slice_locs(start=Interval(0, 2))
@@ -369,8 +369,8 @@ class TestSliceLocs:
         with pytest.raises(
             KeyError,
             match=re.escape(
-                '"Cannot get right slice bound for non-unique label:'
-                " Interval(0, 2, closed='right')\""
+                '"Cannot get right slice bound for non-unique label: '
+                "Interval(0, 2, closed='right')\""
             ),
         ):
             index.slice_locs(end=Interval(0, 2))
@@ -378,8 +378,8 @@ class TestSliceLocs:
         with pytest.raises(
             KeyError,
             match=re.escape(
-                '"Cannot get right slice bound for non-unique label:'
-                " Interval(0, 2, closed='right')\""
+                '"Cannot get right slice bound for non-unique label: '
+                "Interval(0, 2, closed='right')\""
             ),
         ):
             index.slice_locs(start=Interval(2, 4), end=Interval(0, 2))
@@ -431,8 +431,8 @@ class TestSliceLocs:
         with pytest.raises(
             KeyError,
             match=(
-                "'can only get slices from an IntervalIndex if bounds are"
-                " non-overlapping and all monotonic increasing or decreasing'"
+                "'can only get slices from an IntervalIndex if bounds are "
+                "non-overlapping and all monotonic increasing or decreasing'"
             ),
         ):
             index.slice_locs(start, stop)
diff --git a/pandas/tests/indexes/interval/test_interval.py b/pandas/tests/indexes/interval/test_interval.py
index 58f88ffb1..47a0ba7fe 100644
--- a/pandas/tests/indexes/interval/test_interval.py
+++ b/pandas/tests/indexes/interval/test_interval.py
@@ -586,8 +586,8 @@ class TestIntervalIndex:
         assert idx.equals(idx2)
 
         msg = (
-            "missing values must be missing in the same location both left"
-            " and right sides"
+            "missing values must be missing in the same location both left "
+            "and right sides"
         )
         with pytest.raises(ValueError, match=msg):
             IntervalIndex.from_arrays(
diff --git a/pandas/tests/indexes/multi/test_analytics.py b/pandas/tests/indexes/multi/test_analytics.py
index 8e6a360af..ac1e08936 100644
--- a/pandas/tests/indexes/multi/test_analytics.py
+++ b/pandas/tests/indexes/multi/test_analytics.py
@@ -348,9 +348,9 @@ def test_numpy_ufuncs(idx, func):
 )
 def test_numpy_type_funcs(idx, func):
     msg = (
-        f"ufunc '{func.__name__}' not supported for the input types, and the inputs"
-        " could not be safely coerced to any supported types according to"
-        " the casting rule ''safe''"
+        f"ufunc '{func.__name__}' not supported for the input types, and the inputs "
+        "could not be safely coerced to any supported types according to "
+        "the casting rule ''safe''"
     )
     with pytest.raises(TypeError, match=msg):
         func(idx)
diff --git a/pandas/tests/indexes/multi/test_constructors.py b/pandas/tests/indexes/multi/test_constructors.py
index 4beae4fa1..2c4b3ce04 100644
--- a/pandas/tests/indexes/multi/test_constructors.py
+++ b/pandas/tests/indexes/multi/test_constructors.py
@@ -65,8 +65,8 @@ def test_constructor_mismatched_codes_levels(idx):
         MultiIndex(levels=levels, codes=codes)
 
     length_error = (
-        r"On level 0, code max \(3\) >= length of level \(1\)\."
-        " NOTE: this index is in an inconsistent state"
+        r"On level 0, code max \(3\) >= length of level \(1\)\. "
+        "NOTE: this index is in an inconsistent state"
     )
     label_error = r"Unequal code lengths: \[4, 2\]"
     code_value_error = r"On level 0, code value \(-2\) < -1"
diff --git a/pandas/tests/indexes/multi/test_drop.py b/pandas/tests/indexes/multi/test_drop.py
index 25261dd25..b909025b3 100644
--- a/pandas/tests/indexes/multi/test_drop.py
+++ b/pandas/tests/indexes/multi/test_drop.py
@@ -108,8 +108,8 @@ def test_droplevel_list():
     assert dropped.equals(expected)
 
     msg = (
-        "Cannot remove 3 levels from an index with 3 levels: at least one"
-        " level must be left"
+        "Cannot remove 3 levels from an index with 3 levels: "
+        "at least one level must be left"
     )
     with pytest.raises(ValueError, match=msg):
         index[:2].droplevel(["one", "two", "three"])
diff --git a/pandas/tests/indexes/period/test_period.py b/pandas/tests/indexes/period/test_period.py
index 3276fea4d..4eacf4038 100644
--- a/pandas/tests/indexes/period/test_period.py
+++ b/pandas/tests/indexes/period/test_period.py
@@ -223,8 +223,8 @@ class TestPeriodIndex(DatetimeLike):
         i1 = period_range(start=start, end=end_intv)
 
         msg = (
-            "Of the three parameters: start, end, and periods, exactly two"
-            " must be specified"
+            "Of the three parameters: start, end, and periods, exactly two "
+            "must be specified"
         )
         with pytest.raises(ValueError, match=msg):
             period_range(start=start)
@@ -427,8 +427,8 @@ class TestPeriodIndex(DatetimeLike):
 
     def test_periods_number_check(self):
         msg = (
-            "Of the three parameters: start, end, and periods, exactly two"
-            " must be specified"
+            "Of the three parameters: start, end, and periods, exactly two "
+            "must be specified"
         )
         with pytest.raises(ValueError, match=msg):
             period_range("2011-1-1", "2012-1-1", "B")
diff --git a/pandas/tests/indexes/test_base.py b/pandas/tests/indexes/test_base.py
index c1ab5a9db..2c7fc8b32 100644
--- a/pandas/tests/indexes/test_base.py
+++ b/pandas/tests/indexes/test_base.py
@@ -109,8 +109,8 @@ class TestIndex(Base):
     def test_constructor_corner(self):
         # corner case
         msg = (
-            r"Index\(\.\.\.\) must be called with a collection of some"
-            " kind, 0 was passed"
+            r"Index\(\.\.\.\) must be called with a collection of some "
+            "kind, 0 was passed"
         )
         with pytest.raises(TypeError, match=msg):
             Index(0)
diff --git a/pandas/tests/indexes/test_numeric.py b/pandas/tests/indexes/test_numeric.py
index 69a398312..f02516864 100644
--- a/pandas/tests/indexes/test_numeric.py
+++ b/pandas/tests/indexes/test_numeric.py
@@ -194,8 +194,8 @@ class TestFloat64Index(Numeric):
         with pytest.raises(TypeError, match=msg):
             Float64Index(0.0)
         msg = (
-            "String dtype not supported, you may need to explicitly cast to"
-            " a numeric type"
+            "String dtype not supported, "
+            "you may need to explicitly cast to a numeric type"
         )
         with pytest.raises(TypeError, match=msg):
             Float64Index(["a", "b", 0.0])
@@ -570,8 +570,8 @@ class NumericInt(Numeric):
 
     def test_cant_or_shouldnt_cast(self):
         msg = (
-            "String dtype not supported, you may need to explicitly cast to"
-            " a numeric type"
+            "String dtype not supported, "
+            "you may need to explicitly cast to a numeric type"
         )
         # can't
         data = ["foo", "bar", "baz"]
@@ -655,8 +655,8 @@ class TestInt64Index(NumericInt):
 
         # scalar raise Exception
         msg = (
-            r"Int64Index\(\.\.\.\) must be called with a collection of some"
-            " kind, 5 was passed"
+            r"Int64Index\(\.\.\.\) must be called with a collection of some "
+            "kind, 5 was passed"
         )
         with pytest.raises(TypeError, match=msg):
             Int64Index(5)
diff --git a/pandas/tests/indexes/timedeltas/test_constructors.py b/pandas/tests/indexes/timedeltas/test_constructors.py
index e9540c950..39abbf59d 100644
--- a/pandas/tests/indexes/timedeltas/test_constructors.py
+++ b/pandas/tests/indexes/timedeltas/test_constructors.py
@@ -176,15 +176,15 @@ class TestTimedeltaIndex:
 
         # non-conforming freq
         msg = (
-            "Inferred frequency None from passed values does not conform to"
-            " passed frequency D"
+            "Inferred frequency None from passed values does not conform to "
+            "passed frequency D"
         )
         with pytest.raises(ValueError, match=msg):
             TimedeltaIndex(["1 days", "2 days", "4 days"], freq="D")
 
         msg = (
-            "Of the four parameters: start, end, periods, and freq, exactly"
-            " three must be specified"
+            "Of the four parameters: start, end, periods, and freq, exactly "
+            "three must be specified"
         )
         with pytest.raises(ValueError, match=msg):
             timedelta_range(periods=10, freq="D")
diff --git a/pandas/tests/indexes/timedeltas/test_tools.py b/pandas/tests/indexes/timedeltas/test_tools.py
index 223bde8b0..477fc092a 100644
--- a/pandas/tests/indexes/timedeltas/test_tools.py
+++ b/pandas/tests/indexes/timedeltas/test_tools.py
@@ -73,8 +73,7 @@ class TestTimedeltas:
 
         # time not supported ATM
         msg = (
-            "Value must be Timedelta, string, integer, float, timedelta or"
-            " convertible"
+            "Value must be Timedelta, string, integer, float, timedelta or convertible"
         )
         with pytest.raises(ValueError, match=msg):
             to_timedelta(time(second=1))
