commit c16e3b89ffb4cb8c3194d6c5de6b708edb3ef5c3
Author: Jeff Reback <jeff@reback.net>
Date:   Thu Sep 10 07:52:28 2015 -0400

    DOC: versionadded directions added where needed

diff --git a/doc/source/api.rst b/doc/source/api.rst
index 38c2c1091..0030d5e98 100644
--- a/doc/source/api.rst
+++ b/doc/source/api.rst
@@ -488,7 +488,6 @@ These can be accessed like ``Series.dt.<property>``.
    Series.dt.second
    Series.dt.microsecond
    Series.dt.nanosecond
-   Series.dt.second
    Series.dt.week
    Series.dt.weekofyear
    Series.dt.dayofweek
@@ -538,6 +537,7 @@ These can be accessed like ``Series.dt.<property>``.
    :template: autosummary/accessor_method.rst
 
    Series.dt.to_pytimedelta
+   Series.dt.total_seconds
 
 String handling
 ~~~~~~~~~~~~~~~
@@ -1439,6 +1439,7 @@ Time-specific operations
    :toctree: generated/
 
    DatetimeIndex.normalize
+   DatetimeIndex.strftime
    DatetimeIndex.snap
    DatetimeIndex.tz_convert
    DatetimeIndex.tz_localize
diff --git a/doc/source/whatsnew/v0.17.0.txt b/doc/source/whatsnew/v0.17.0.txt
index 0b6f6522d..8fe52433e 100644
--- a/doc/source/whatsnew/v0.17.0.txt
+++ b/doc/source/whatsnew/v0.17.0.txt
@@ -257,7 +257,7 @@ has been changed to make this keyword unnecessary - the change is shown below.
 Other enhancements
 ^^^^^^^^^^^^^^^^^^
 
-- ``pd.read_sql`` and ``to_sql`` can accept database URI as con parameter (:issue:`10214`)
+- ``pd.read_sql`` and ``to_sql`` can accept database URI as ``con`` parameter (:issue:`10214`)
 - Enable ``pd.read_hdf`` to be used without specifying a key when the HDF file contains a single dataset (:issue:`10443`)
 - Enable writing Excel files in :ref:`memory <_io.excel_writing_buffer>` using StringIO/BytesIO (:issue:`7074`)
 - Enable serialization of lists and dicts to strings in ``ExcelWriter`` (:issue:`8188`)
@@ -444,7 +444,7 @@ We have also deprecated and changed similar methods in two Series-like classes,
 Previous                              Replacement
 ==================================    ====================================
 \* ``Index.order()``                  ``Index.sort_values()``
-\* ``Categorical.order()``            ``Categorical.sort_values``
+\* ``Categorical.order()``            ``Categorical.sort_values()``
 ==================================    ====================================
 
 .. _whatsnew_0170.api_breaking.to_datetime:
@@ -817,7 +817,7 @@ Other API Changes
 ^^^^^^^^^^^^^^^^^
 
 - Line and kde plot with ``subplots=True`` now uses default colors, not all black. Specify ``color='k'`` to draw all lines in black (:issue:`9894`)
-- Calling the ``.value_counts`` method on a Series with ``categorical`` dtype now returns a Series with a ``CategoricalIndex`` (:issue:`10704`)
+- Calling the ``.value_counts()`` method on a Series with ``categorical`` dtype now returns a Series with a ``CategoricalIndex`` (:issue:`10704`)
 - Allow passing `kwargs` to the interpolation methods (:issue:`10378`).
 - The metadata properties of subclasses of pandas objects will now be serialized (:issue:`10553`).
 - ``groupby`` using ``Categorical`` follows the same rule as ``Categorical.unique`` described above  (:issue:`10508`)
@@ -848,7 +848,7 @@ Deprecations
   Deprecated Function    Replacement
   =====================  =================================
   ``.irow(i)``           ``.iloc[i]`` or ``.iat[i]``
-  ``.iget(i)``           ``.iloc[i]``
+  ``.iget(i)``           ``.iloc[i]`` or ``.iat[i]``
   ``.iget_value(i)``     ``.iloc[i]`` or ``.iat[i]``
   =====================  =================================
 
@@ -987,7 +987,7 @@ Bug Fixes
 - Bug in ``Series.shift`` and ``DataFrame.shift`` not supporting categorical data (:issue:`9416`)
 - Bug in ``Series.map`` using categorical ``Series`` raises ``AttributeError`` (:issue:`10324`)
 - Bug in ``MultiIndex.get_level_values`` including ``Categorical`` raises ``AttributeError`` (:issue:`10460`)
-- Bug in ``pd.get_dummies`` with `sparse=True` not returning ``SparseDataFrame`` (:issue:`10531`)
+- Bug in ``pd.get_dummies`` with ``sparse=True`` not returning ``SparseDataFrame`` (:issue:`10531`)
 - Bug in ``Index`` subtypes (such as ``PeriodIndex``) not returning their own type for ``.drop`` and ``.insert`` methods (:issue:`10620`)
 - Bug in ``algos.outer_join_indexer`` when ``right`` array is empty (:issue:`10618`)
 
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 75525d8e1..6aec297c3 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -2472,6 +2472,8 @@ class NDFrame(PandasObject):
         ----------
         copy : boolean, default True
 
+               .. versionadded: 0.16.1
+
         Returns
         -------
         values : a dict of dtype -> Constructor Types
@@ -3275,8 +3277,8 @@ class NDFrame(PandasObject):
             effectively "SQL-style" grouped output
         sort : boolean, default True
             Sort group keys. Get better performance by turning this off.
-            Note this does not influence the order of observations within each group. 
-            groupby preserves the order of rows within each group. 
+            Note this does not influence the order of observations within each group.
+            groupby preserves the order of rows within each group.
         group_keys : boolean, default True
             When calling apply, add group keys to index to identify pieces
         squeeze : boolean, default False
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 0c44f79fe..2612bbaa7 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -824,7 +824,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         DEPRECATED. Use ``.iloc[i]`` or ``.iat[i]`` instead
         """
 
-        warnings.warn("iget(i) is deprecated. Please use .iloc[i]",
+        warnings.warn("iget(i) is deprecated. Please use .iloc[i] or .iat[i]",
                       FutureWarning, stacklevel=2)
         return self._ixs(i)
 
@@ -832,7 +832,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         """
         DEPRECATED. Use ``.iloc[i]`` or ``.iat[i]`` instead
         """
-        warnings.warn("irow(i) is deprecated. Please use .iloc[i] or iat[i]",
+        warnings.warn("irow(i) is deprecated. Please use .iloc[i] or .iat[i]",
                       FutureWarning, stacklevel=2)
         return self._ixs(i)
 
diff --git a/pandas/tseries/base.py b/pandas/tseries/base.py
index 5062b7ead..ebf3af5f4 100644
--- a/pandas/tseries/base.py
+++ b/pandas/tseries/base.py
@@ -28,6 +28,8 @@ class DatelikeOps(object):
         of the string format can be found in the `python string format doc
         <https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior>`__
 
+        .. versionadded:: 0.17.0
+
         Parameters
         ----------
         date_format : str
diff --git a/pandas/tseries/tdi.py b/pandas/tseries/tdi.py
index 0f6355ec9..89229fc48 100644
--- a/pandas/tseries/tdi.py
+++ b/pandas/tseries/tdi.py
@@ -400,7 +400,11 @@ class TimedeltaIndex(DatetimeIndexOpsMixin, Int64Index):
         return result
 
     def total_seconds(self):
-        """ Total duration of each element expressed in seconds. """
+        """
+        Total duration of each element expressed in seconds.
+
+        .. versionadded:: 0.17.0
+        """
         return self._maybe_mask_results(1e-9*self.asi8)
 
     def to_pytimedelta(self):
diff --git a/pandas/tseries/tools.py b/pandas/tseries/tools.py
index 5d9808849..bd19b771f 100644
--- a/pandas/tseries/tools.py
+++ b/pandas/tseries/tools.py
@@ -199,6 +199,9 @@ def to_datetime(arg, errors='raise', dayfirst=False, yearfirst=False,
         - If both dayfirst and yearfirst are True, yearfirst is preceded (same as dateutil).
         Warning: yearfirst=True is not strict, but will prefer to parse
         with year first (this is a known bug, based on dateutil beahavior).
+
+        .. versionadded: 0.16.1
+
     utc : boolean, default None
         Return UTC DatetimeIndex if True (converting any tz-aware
         datetime.datetime objects as well).
