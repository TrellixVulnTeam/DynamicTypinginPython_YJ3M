commit 1311add89d10af7730753506d3b8f2a972590579
Author: Jeff Reback <jeff@reback.net>
Date:   Fri Dec 30 14:01:28 2016 -0500

    CLN: additional tests for qcut with duplicates

diff --git a/pandas/tools/tests/test_tile.py b/pandas/tools/tests/test_tile.py
index 8b1809578..5c7cee862 100644
--- a/pandas/tools/tests/test_tile.py
+++ b/pandas/tools/tests/test_tile.py
@@ -272,18 +272,20 @@ class TestCut(tm.TestCase):
                                     np.array([0, 0, 1, 1], dtype=np.int8))
         tm.assert_numpy_array_equal(bins, np.array([0, 1.5, 3]))
 
-    def test_qcut_duplicates_drop(self):
+    def test_qcut_duplicates_bin(self):
         # GH 7751
         values = [0, 0, 0, 0, 1, 2, 3]
+        result_levels = ['[0, 1]', '(1, 3]']
+
         cats = qcut(values, 3, duplicates='drop')
-        ex_levels = ['[0, 1]', '(1, 3]']
-        self.assertTrue((cats.categories == ex_levels).all())
+        self.assertTrue((cats.categories == result_levels).all())
 
-    def test_qcut_duplicates_raise(self):
-        # GH 7751
-        values = [0, 0, 0, 0, 1, 2, 3]
+        self.assertRaises(ValueError, qcut, values, 3)
         self.assertRaises(ValueError, qcut, values, 3, duplicates='raise')
 
+        # invalid
+        self.assertRaises(ValueError, qcut, values, 3, duplicates='foo')
+
     def test_single_bin(self):
         # issue 14652
         expected = Series([0, 0])
diff --git a/pandas/tools/tile.py b/pandas/tools/tile.py
index 2875d9c14..feb4d4bfd 100644
--- a/pandas/tools/tile.py
+++ b/pandas/tools/tile.py
@@ -208,9 +208,9 @@ def _bins_to_cuts(x, bins, right=True, labels=None,
     unique_bins = algos.unique(bins)
     if len(unique_bins) < len(bins):
         if duplicates == 'raise':
-            raise ValueError("Bin edges must be unique: {}. You "
+            raise ValueError("Bin edges must be unique: {}.\nYou "
                              "can drop duplicate edges by setting "
-                             "'duplicates' param".format(repr(bins)))
+                             "the 'duplicates' kwarg".format(repr(bins)))
         else:
             bins = unique_bins
 
