commit e501e1d7d161da9596156e07201b1370ed2ee10e
Author: gfyoung <gfyoung17@gmail.com>
Date:   Sun Apr 23 16:38:02 2017 -0400

    MAINT: Remove assertIn from testing (#16101)

diff --git a/pandas/tests/frame/test_alter_axes.py b/pandas/tests/frame/test_alter_axes.py
index f32e001ea..1a3de7b46 100644
--- a/pandas/tests/frame/test_alter_axes.py
+++ b/pandas/tests/frame/test_alter_axes.py
@@ -138,7 +138,7 @@ class TestDataFrameAlterAxes(tm.TestCase, TestData):
                         'E': np.random.randn(5)})
         with assertRaisesRegexp(ValueError, 'Index has duplicate keys'):
             df.set_index('A', verify_integrity=True, inplace=True)
-        self.assertIn('A', df)
+        assert 'A' in df
 
     def test_set_index_bug(self):
         # GH1590
diff --git a/pandas/tests/frame/test_axis_select_reindex.py b/pandas/tests/frame/test_axis_select_reindex.py
index 5b3a0a9e0..636194d32 100644
--- a/pandas/tests/frame/test_axis_select_reindex.py
+++ b/pandas/tests/frame/test_axis_select_reindex.py
@@ -734,7 +734,7 @@ class TestDataFrameSelectReindex(tm.TestCase, TestData):
         # regex
         filtered = fcopy.filter(regex='[A]+')
         self.assertEqual(len(filtered.columns), 2)
-        self.assertIn('AA', filtered)
+        assert 'AA' in filtered
 
         # doesn't have to be at beginning
         df = DataFrame({'aBBa': [1, 2],
diff --git a/pandas/tests/frame/test_convert_to.py b/pandas/tests/frame/test_convert_to.py
index 64edc5250..6a49c88f1 100644
--- a/pandas/tests/frame/test_convert_to.py
+++ b/pandas/tests/frame/test_convert_to.py
@@ -156,16 +156,16 @@ class TestDataFrameConvertTo(tm.TestCase, TestData):
         df = DataFrame(np.random.randn(3, 3))
         df.index.name = 'X'
         rs = df.to_records()
-        self.assertIn('X', rs.dtype.fields)
+        assert 'X' in rs.dtype.fields
 
         df = DataFrame(np.random.randn(3, 3))
         rs = df.to_records()
-        self.assertIn('index', rs.dtype.fields)
+        assert 'index' in rs.dtype.fields
 
         df.index = MultiIndex.from_tuples([('a', 'x'), ('a', 'y'), ('b', 'z')])
         df.index.names = ['A', None]
         rs = df.to_records()
-        self.assertIn('level_0', rs.dtype.fields)
+        assert 'level_0' in rs.dtype.fields
 
     def test_to_records_with_unicode_index(self):
         # GH13172
diff --git a/pandas/tests/frame/test_indexing.py b/pandas/tests/frame/test_indexing.py
index 780cb3d04..12c5b33fc 100644
--- a/pandas/tests/frame/test_indexing.py
+++ b/pandas/tests/frame/test_indexing.py
@@ -422,7 +422,7 @@ class TestDataFrameIndexing(tm.TestCase, TestData):
         # not sure what else to do here
         series = self.frame['A'][::2]
         self.frame['col5'] = series
-        self.assertIn('col5', self.frame)
+        assert 'col5' in self.frame
 
         self.assertEqual(len(series), 15)
         self.assertEqual(len(self.frame), 30)
@@ -600,7 +600,7 @@ class TestDataFrameIndexing(tm.TestCase, TestData):
                        index=np.arange(3))
         del df['B']
         df['B'] = [1., 2., 3.]
-        self.assertIn('B', df)
+        assert 'B' in df
         self.assertEqual(len(df.columns), 2)
 
         df['A'] = 'beginning'
diff --git a/pandas/tests/frame/test_operators.py b/pandas/tests/frame/test_operators.py
index ce756ca18..186399906 100644
--- a/pandas/tests/frame/test_operators.py
+++ b/pandas/tests/frame/test_operators.py
@@ -831,7 +831,7 @@ class TestDataFrameOperators(tm.TestCase, TestData):
 
         for key, s in compat.iteritems(self.frame):
             assert_series_equal(larger_added[key], s + series[key])
-        self.assertIn('E', larger_added)
+        assert 'E' in larger_added
         self.assertTrue(np.isnan(larger_added['E']).all())
 
         # vs mix (upcast) as needed
diff --git a/pandas/tests/frame/test_repr_info.py b/pandas/tests/frame/test_repr_info.py
index be55efac2..efbdc05ba 100644
--- a/pandas/tests/frame/test_repr_info.py
+++ b/pandas/tests/frame/test_repr_info.py
@@ -171,7 +171,7 @@ class TestDataFrameReprInfoEtc(tm.TestCase, TestData):
                                       ' the File through the code..')})
 
         result = repr(df)
-        self.assertIn('StringCol', result)
+        assert 'StringCol' in result
 
     def test_latex_repr(self):
         result = r"""\begin{tabular}{llll}
diff --git a/pandas/tests/frame/test_to_csv.py b/pandas/tests/frame/test_to_csv.py
index 2df2e23c3..0fd1df0b7 100644
--- a/pandas/tests/frame/test_to_csv.py
+++ b/pandas/tests/frame/test_to_csv.py
@@ -909,7 +909,7 @@ class TestDataFrameToCSV(tm.TestCase, TestData):
             text = f.read().decode('utf8')
             f.close()
             for col in df.columns:
-                self.assertIn(col, text)
+                assert col in text
 
     def test_to_csv_compression_bz2(self):
         # GH7615
@@ -932,7 +932,7 @@ class TestDataFrameToCSV(tm.TestCase, TestData):
             text = f.read().decode('utf8')
             f.close()
             for col in df.columns:
-                self.assertIn(col, text)
+                assert col in text
 
     def test_to_csv_compression_xz(self):
         # GH11852
diff --git a/pandas/tests/groupby/test_groupby.py b/pandas/tests/groupby/test_groupby.py
index 752c0689b..05fe1c6f5 100644
--- a/pandas/tests/groupby/test_groupby.py
+++ b/pandas/tests/groupby/test_groupby.py
@@ -2483,14 +2483,14 @@ class TestGroupBy(MixIn, tm.TestCase):
         result = self.df.groupby(self.df['A']).mean()
         result2 = self.df.groupby(self.df['A'], as_index=False).mean()
         self.assertEqual(result.index.name, 'A')
-        self.assertIn('A', result2)
+        assert 'A' in result2
 
         result = self.df.groupby([self.df['A'], self.df['B']]).mean()
         result2 = self.df.groupby([self.df['A'], self.df['B']],
                                   as_index=False).mean()
         self.assertEqual(result.index.names, ('A', 'B'))
-        self.assertIn('A', result2)
-        self.assertIn('B', result2)
+        assert 'A' in result2
+        assert 'B' in result2
 
     def test_seriesgroupby_name_attr(self):
         # GH 6265
@@ -3357,10 +3357,10 @@ class TestGroupBy(MixIn, tm.TestCase):
                            'change': [1234, 5678]},
                           index=pd.DatetimeIndex(['2014-09-10', '2013-10-10']))
         grouped = df.groupby([pd.TimeGrouper(freq='M'), 'event'])
-        self.assertEqual(len(grouped.groups), 2)
-        self.assertEqual(grouped.ngroups, 2)
-        self.assertIn((pd.Timestamp('2014-09-30'), 'start'), grouped.groups)
-        self.assertIn((pd.Timestamp('2013-10-31'), 'start'), grouped.groups)
+        assert len(grouped.groups) == 2
+        assert grouped.ngroups == 2
+        assert (pd.Timestamp('2014-09-30'), 'start') in grouped.groups
+        assert (pd.Timestamp('2013-10-31'), 'start') in grouped.groups
 
         res = grouped.get_group((pd.Timestamp('2014-09-30'), 'start'))
         tm.assert_frame_equal(res, df.iloc[[0], :])
@@ -3372,10 +3372,10 @@ class TestGroupBy(MixIn, tm.TestCase):
                           index=pd.DatetimeIndex(['2014-09-10', '2013-10-10',
                                                   '2014-09-15']))
         grouped = df.groupby([pd.TimeGrouper(freq='M'), 'event'])
-        self.assertEqual(len(grouped.groups), 2)
-        self.assertEqual(grouped.ngroups, 2)
-        self.assertIn((pd.Timestamp('2014-09-30'), 'start'), grouped.groups)
-        self.assertIn((pd.Timestamp('2013-10-31'), 'start'), grouped.groups)
+        assert len(grouped.groups) == 2
+        assert grouped.ngroups == 2
+        assert (pd.Timestamp('2014-09-30'), 'start') in grouped.groups
+        assert (pd.Timestamp('2013-10-31'), 'start') in grouped.groups
 
         res = grouped.get_group((pd.Timestamp('2014-09-30'), 'start'))
         tm.assert_frame_equal(res, df.iloc[[0, 2], :])
@@ -3388,11 +3388,11 @@ class TestGroupBy(MixIn, tm.TestCase):
                           index=pd.DatetimeIndex(['2014-09-10', '2013-10-10',
                                                   '2014-08-05']))
         grouped = df.groupby([pd.TimeGrouper(freq='M'), 'event'])
-        self.assertEqual(len(grouped.groups), 3)
-        self.assertEqual(grouped.ngroups, 3)
-        self.assertIn((pd.Timestamp('2014-09-30'), 'start'), grouped.groups)
-        self.assertIn((pd.Timestamp('2013-10-31'), 'start'), grouped.groups)
-        self.assertIn((pd.Timestamp('2014-08-31'), 'start'), grouped.groups)
+        assert len(grouped.groups) == 3
+        assert grouped.ngroups == 3
+        assert (pd.Timestamp('2014-09-30'), 'start') in grouped.groups
+        assert (pd.Timestamp('2013-10-31'), 'start') in grouped.groups
+        assert (pd.Timestamp('2014-08-31'), 'start') in grouped.groups
 
         res = grouped.get_group((pd.Timestamp('2014-09-30'), 'start'))
         tm.assert_frame_equal(res, df.iloc[[0], :])
diff --git a/pandas/tests/indexes/datetimes/test_datetime.py b/pandas/tests/indexes/datetimes/test_datetime.py
index 7cef5eeb9..93fc85517 100644
--- a/pandas/tests/indexes/datetimes/test_datetime.py
+++ b/pandas/tests/indexes/datetimes/test_datetime.py
@@ -101,7 +101,7 @@ class TestDatetimeIndex(tm.TestCase):
         try:
             index.get_loc('1/1/2000')
         except KeyError as e:
-            self.assertIn('2000', str(e))
+            assert '2000' in str(e)
 
     def test_roundtrip_pickle_with_tz(self):
 
diff --git a/pandas/tests/indexes/datetimes/test_ops.py b/pandas/tests/indexes/datetimes/test_ops.py
index 2eff8a12d..235c8f1de 100644
--- a/pandas/tests/indexes/datetimes/test_ops.py
+++ b/pandas/tests/indexes/datetimes/test_ops.py
@@ -632,7 +632,7 @@ Freq: D"""
         for idx in map(DatetimeIndex,
                        ([0, 1, 0], [0, 0, -1], [0, -1, -1],
                         ['2015', '2015', '2016'], ['2015', '2015', '2014'])):
-            tm.assertIn(idx[0], idx)
+            assert idx[0] in idx
 
     def test_order(self):
         # with freq
diff --git a/pandas/tests/indexes/test_base.py b/pandas/tests/indexes/test_base.py
index 9a166aa33..7db7410d7 100644
--- a/pandas/tests/indexes/test_base.py
+++ b/pandas/tests/indexes/test_base.py
@@ -857,10 +857,10 @@ class TestIndex(Base, tm.TestCase):
     def test_iadd_string(self):
         index = pd.Index(['a', 'b', 'c'])
         # doesn't fail test unless there is a check before `+=`
-        self.assertIn('a', index)
+        assert 'a' in index
 
         index += '_x'
-        self.assertIn('a_x', index)
+        assert 'a_x' in index
 
     def test_difference(self):
 
@@ -963,8 +963,8 @@ class TestIndex(Base, tm.TestCase):
         ind = Index(['{other}%s', "~:{range}:0"], name='A')
         result = ind.summary()
         # shouldn't be formatted accidentally.
-        self.assertIn('~:{range}:0', result)
-        self.assertIn('{other}%s', result)
+        assert '~:{range}:0' in result
+        assert '{other}%s' in result
 
     def test_format(self):
         self._check_method_works(Index.format)
diff --git a/pandas/tests/indexes/test_multi.py b/pandas/tests/indexes/test_multi.py
index 5000a71df..98fce437d 100644
--- a/pandas/tests/indexes/test_multi.py
+++ b/pandas/tests/indexes/test_multi.py
@@ -1597,8 +1597,8 @@ class TestMultiIndex(Base, tm.TestCase):
         #     other = Index(['A', 'B', 'C'])
 
         #     result = other.union(self.index)
-        #     self.assertIn(('foo', 'one'), result)
-        #     self.assertIn('B', result)
+        #     assert ('foo', 'one') in result
+        #     assert 'B' in result
 
         #     result2 = self.index.union(other)
         #     self.assertTrue(result.equals(result2))
diff --git a/pandas/tests/indexes/timedeltas/test_ops.py b/pandas/tests/indexes/timedeltas/test_ops.py
index 5201af3af..adf164977 100644
--- a/pandas/tests/indexes/timedeltas/test_ops.py
+++ b/pandas/tests/indexes/timedeltas/test_ops.py
@@ -561,7 +561,7 @@ Freq: D"""
         for idx in map(TimedeltaIndex, ([0, 1, 0], [0, 0, -1], [0, -1, -1],
                                         ['00:01:00', '00:01:00', '00:02:00'],
                                         ['00:01:00', '00:01:00', '00:00:01'])):
-            tm.assertIn(idx[0], idx)
+            assert idx[0] in idx
 
     def test_unknown_attribute(self):
         # see gh-9680
diff --git a/pandas/tests/indexing/test_chaining_and_caching.py b/pandas/tests/indexing/test_chaining_and_caching.py
index c0d83c580..b776d3c2d 100644
--- a/pandas/tests/indexing/test_chaining_and_caching.py
+++ b/pandas/tests/indexing/test_chaining_and_caching.py
@@ -373,15 +373,15 @@ class TestChaining(tm.TestCase):
         df['A']  # cache series
         with catch_warnings(record=True):
             df.ix["Hello Friend"] = df.ix[0]
-        self.assertIn("Hello Friend", df['A'].index)
-        self.assertIn("Hello Friend", df['B'].index)
+        assert "Hello Friend" in df['A'].index
+        assert "Hello Friend" in df['B'].index
 
         with catch_warnings(record=True):
             panel = tm.makePanel()
             panel.ix[0]  # get first item into cache
             panel.ix[:, :, 'A+1'] = panel.ix[:, :, 'A'] + 1
-            self.assertIn("A+1", panel.ix[0].columns)
-            self.assertIn("A+1", panel.ix[1].columns)
+            assert "A+1" in panel.ix[0].columns
+            assert "A+1" in panel.ix[1].columns
 
         # 5216
         # make sure that we don't try to set a dead cache
diff --git a/pandas/tests/io/formats/test_format.py b/pandas/tests/io/formats/test_format.py
index ea796a497..ba59add43 100644
--- a/pandas/tests/io/formats/test_format.py
+++ b/pandas/tests/io/formats/test_format.py
@@ -959,7 +959,7 @@ class TestDataFrameFormatting(tm.TestCase):
                 self.assertTrue(len(wider_repr) < len(wide_repr))
 
             for line in wide_repr.splitlines()[1::13]:
-                self.assertIn('DataFrame Index', line)
+                assert 'DataFrame Index' in line
 
         reset_option('display.expand_frame_repr')
 
@@ -981,7 +981,7 @@ class TestDataFrameFormatting(tm.TestCase):
                 self.assertTrue(len(wider_repr) < len(wide_repr))
 
             for line in wide_repr.splitlines()[1::13]:
-                self.assertIn('Level 0 Level 1', line)
+                assert 'Level 0 Level 1' in line
 
         reset_option('display.expand_frame_repr')
 
@@ -1875,9 +1875,9 @@ class TestSeriesFormatting(tm.TestCase):
             if line.startswith('dtype:'):
                 continue
             if _three_digit_exp():
-                self.assertIn('+010', line)
+                assert '+010' in line
             else:
-                self.assertIn('+10', line)
+                assert '+10' in line
 
     def test_datetimeindex(self):
 
diff --git a/pandas/tests/io/parser/c_parser_only.py b/pandas/tests/io/parser/c_parser_only.py
index 6d3dc8f63..f4ca632e0 100644
--- a/pandas/tests/io/parser/c_parser_only.py
+++ b/pandas/tests/io/parser/c_parser_only.py
@@ -33,7 +33,7 @@ class CParserTests(object):
             try:
                 self.read_table(StringIO(malf))
             except Exception as err:
-                self.assertIn(cperr, str(err))
+                assert cperr in str(err)
 
     def test_buffer_rd_bytes(self):
         # see gh-12098: src->buffer in the C parser can be freed twice leading
diff --git a/pandas/tests/io/parser/parse_dates.py b/pandas/tests/io/parser/parse_dates.py
index cdc4f9fa9..b7147cd77 100644
--- a/pandas/tests/io/parser/parse_dates.py
+++ b/pandas/tests/io/parser/parse_dates.py
@@ -135,7 +135,7 @@ KORD,19990127 22:00:00, 21:56:00, -0.5900, 1.7100, 5.1000, 0.0000, 290.0000
         # it works!
         df = self.read_csv(StringIO(data), header=None, parse_dates=date_spec,
                            date_parser=conv.parse_date_time)
-        self.assertIn('nominal', df)
+        assert 'nominal' in df
 
     def test_multiple_date_col_timestamp_parse(self):
         data = """05/31/2012,15:30:00.029,1306.25,1,E,0,,1306.25
@@ -530,7 +530,7 @@ date, time, a, b
         df = self.read_csv(StringIO(data), sep=',', header=0,
                            parse_dates=datecols,
                            date_parser=conv.parse_date_time)
-        self.assertIn('date_time', df)
+        assert 'date_time' in df
         self.assertEqual(df.date_time.loc[0], datetime(2001, 1, 5, 10, 0, 0))
 
         data = ("KORD,19990127, 19:00:00, 18:56:00, 0.8100\n"
@@ -558,7 +558,7 @@ date, time, a, b
         df = self.read_csv(StringIO(data), sep=',', header=0,
                            parse_dates=datecols,
                            date_parser=conv.parse_date_fields)
-        self.assertIn('ymd', df)
+        assert 'ymd' in df
         self.assertEqual(df.ymd.loc[0], datetime(2001, 1, 10))
 
     def test_datetime_six_col(self):
@@ -585,7 +585,7 @@ year, month, day, hour, minute, second, a, b
         df = self.read_csv(StringIO(data), sep=',', header=0,
                            parse_dates=datecols,
                            date_parser=conv.parse_all_fields)
-        self.assertIn('ymdHMS', df)
+        assert 'ymdHMS' in df
         self.assertEqual(df.ymdHMS.loc[0], datetime(2001, 1, 5, 10, 0, 0))
 
     def test_datetime_fractional_seconds(self):
@@ -598,7 +598,7 @@ year, month, day, hour, minute, second, a, b
         df = self.read_csv(StringIO(data), sep=',', header=0,
                            parse_dates=datecols,
                            date_parser=conv.parse_all_fields)
-        self.assertIn('ymdHMS', df)
+        assert 'ymdHMS' in df
         self.assertEqual(df.ymdHMS.loc[0], datetime(2001, 1, 5, 10, 0, 0,
                                                     microsecond=123456))
         self.assertEqual(df.ymdHMS.loc[1], datetime(2001, 1, 5, 10, 0, 0,
@@ -611,7 +611,7 @@ year, month, day, hour, minute, second, a, b
         df = self.read_csv(StringIO(data), sep=',', header=0,
                            parse_dates=datecols,
                            date_parser=dateconverter)
-        self.assertIn('ym', df)
+        assert 'ym' in df
         self.assertEqual(df.ym.loc[0], date(2001, 1, 1))
 
     def test_dateparser_resolution_if_not_ns(self):
diff --git a/pandas/tests/io/test_html.py b/pandas/tests/io/test_html.py
index 866ed2cf2..e7eaab098 100644
--- a/pandas/tests/io/test_html.py
+++ b/pandas/tests/io/test_html.py
@@ -566,10 +566,10 @@ class TestReadHtml(tm.TestCase, ReadHtmlMixin):
         with open(self.banklist_data, 'r') as f:
             raw_text = f.read()
 
-        self.assertIn(gc, raw_text)
+        assert gc in raw_text
         df = self.read_html(self.banklist_data, 'Gold Canyon',
                             attrs={'id': 'table'})[0]
-        self.assertIn(gc, df.to_string())
+        assert gc in df.to_string()
 
     def test_different_number_of_rows(self):
         expected = """<table border="1" class="dataframe">
diff --git a/pandas/tests/reshape/test_join.py b/pandas/tests/reshape/test_join.py
index aa42f1909..7e39806b4 100644
--- a/pandas/tests/reshape/test_join.py
+++ b/pandas/tests/reshape/test_join.py
@@ -153,15 +153,15 @@ class TestJoin(tm.TestCase):
         joined = merge(self.df, self.df2, on='key2',
                        suffixes=['.foo', '.bar'])
 
-        self.assertIn('key1.foo', joined)
-        self.assertIn('key1.bar', joined)
+        assert 'key1.foo' in joined
+        assert 'key1.bar' in joined
 
     def test_handle_overlap_arbitrary_key(self):
         joined = merge(self.df, self.df2,
                        left_on='key2', right_on='key1',
                        suffixes=['.foo', '.bar'])
-        self.assertIn('key1.foo', joined)
-        self.assertIn('key2.bar', joined)
+        assert 'key1.foo' in joined
+        assert 'key2.bar' in joined
 
     def test_join_on(self):
         target = self.target
@@ -251,7 +251,7 @@ class TestJoin(tm.TestCase):
         # nothing to merge
         merged = self.target.join(self.source.reindex([]), on='C')
         for col in self.source:
-            self.assertIn(col, merged)
+            assert col in merged
             self.assertTrue(merged[col].isnull().all())
 
         merged2 = self.target.join(self.source.reindex([]), on='C',
diff --git a/pandas/tests/reshape/test_merge.py b/pandas/tests/reshape/test_merge.py
index 8ddeb4bdd..73d034654 100644
--- a/pandas/tests/reshape/test_merge.py
+++ b/pandas/tests/reshape/test_merge.py
@@ -128,8 +128,8 @@ class TestMerge(tm.TestCase):
         merged = merge(self.left, self.left, on='key')
         exp_len = (self.left['key'].value_counts() ** 2).sum()
         self.assertEqual(len(merged), exp_len)
-        self.assertIn('v1_x', merged)
-        self.assertIn('v1_y', merged)
+        assert 'v1_x' in merged
+        assert 'v1_y' in merged
 
     def test_merge_different_column_key_names(self):
         left = DataFrame({'lkey': ['foo', 'bar', 'baz', 'foo'],
diff --git a/pandas/tests/scalar/test_period.py b/pandas/tests/scalar/test_period.py
index 50c8bcbb6..1635d9018 100644
--- a/pandas/tests/scalar/test_period.py
+++ b/pandas/tests/scalar/test_period.py
@@ -54,7 +54,7 @@ class TestPeriodProperties(tm.TestCase):
         for month in MONTHS:
             freq = 'Q-%s' % month
             exp = Period('1989Q3', freq=freq)
-            self.assertIn('1989Q3', str(exp))
+            assert '1989Q3' in str(exp)
             stamp = exp.to_timestamp('D', how='end')
             p = Period(stamp, freq=freq)
             self.assertEqual(p, exp)
@@ -544,14 +544,14 @@ class TestPeriodProperties(tm.TestCase):
 
     def test_repr(self):
         p = Period('Jan-2000')
-        self.assertIn('2000-01', repr(p))
+        assert '2000-01' in repr(p)
 
         p = Period('2000-12-15')
-        self.assertIn('2000-12-15', repr(p))
+        assert '2000-12-15' in repr(p)
 
     def test_repr_nat(self):
         p = Period('nat', freq='M')
-        self.assertIn(repr(tslib.NaT), repr(p))
+        assert repr(tslib.NaT) in repr(p)
 
     def test_millisecond_repr(self):
         p = Period('2000-01-01 12:15:02.123')
diff --git a/pandas/tests/scalar/test_timestamp.py b/pandas/tests/scalar/test_timestamp.py
index 055da8b2c..c1d5a069c 100644
--- a/pandas/tests/scalar/test_timestamp.py
+++ b/pandas/tests/scalar/test_timestamp.py
@@ -1133,24 +1133,24 @@ class TestTimestampNsOperations(tm.TestCase):
         expected_repr = '2013-05-01 07:15:45.123456789'
         expected_value = 1367392545123456789
         self.assertEqual(ts.value, expected_value)
-        self.assertIn(expected_repr, repr(ts))
+        assert expected_repr in repr(ts)
 
         ts = Timestamp('2013-05-01 07:15:45.123456789+09:00', tz='Asia/Tokyo')
         self.assertEqual(ts.value, expected_value - 9 * 3600 * 1000000000)
-        self.assertIn(expected_repr, repr(ts))
+        assert expected_repr in repr(ts)
 
         ts = Timestamp('2013-05-01 07:15:45.123456789', tz='UTC')
         self.assertEqual(ts.value, expected_value)
-        self.assertIn(expected_repr, repr(ts))
+        assert expected_repr in repr(ts)
 
         ts = Timestamp('2013-05-01 07:15:45.123456789', tz='US/Eastern')
         self.assertEqual(ts.value, expected_value + 4 * 3600 * 1000000000)
-        self.assertIn(expected_repr, repr(ts))
+        assert expected_repr in repr(ts)
 
         # GH 10041
         ts = Timestamp('20130501T071545.123456789')
         self.assertEqual(ts.value, expected_value)
-        self.assertIn(expected_repr, repr(ts))
+        assert expected_repr in repr(ts)
 
     def test_nanosecond_timestamp(self):
         # GH 7610
@@ -1365,7 +1365,7 @@ class TestTimeSeries(tm.TestCase):
         iso8601 = '1850-01-01 01:23:45.012345'
         stamp = Timestamp(iso8601, tz='US/Eastern')
         result = repr(stamp)
-        self.assertIn(iso8601, result)
+        assert iso8601 in result
 
     def test_timestamp_from_ordinal(self):
 
@@ -1440,7 +1440,7 @@ class TestTimeSeries(tm.TestCase):
         df = DataFrame(np.random.randn(10, 4), index=rng)
 
         result = df.to_html()
-        self.assertIn('2000-01-01', result)
+        assert '2000-01-01' in result
 
     def test_series_map_box_timestamps(self):
         # #2689, #2627
diff --git a/pandas/tests/series/test_alter_axes.py b/pandas/tests/series/test_alter_axes.py
index a7b8d285b..17a270c3a 100644
--- a/pandas/tests/series/test_alter_axes.py
+++ b/pandas/tests/series/test_alter_axes.py
@@ -118,10 +118,10 @@ class TestSeriesAlterAxes(TestData, tm.TestCase):
 
         ser.name = 'value'
         df = ser.reset_index()
-        self.assertIn('value', df)
+        assert 'value' in df
 
         df = ser.reset_index(name='value2')
-        self.assertIn('value2', df)
+        assert 'value2' in df
 
         # check inplace
         s = ser.reset_index(drop=True)
diff --git a/pandas/tests/series/test_indexing.py b/pandas/tests/series/test_indexing.py
index 1181e3a44..22869fca3 100644
--- a/pandas/tests/series/test_indexing.py
+++ b/pandas/tests/series/test_indexing.py
@@ -2397,7 +2397,7 @@ class TestTimeSeriesDuplicates(tm.TestCase):
 
             pos = n * 3
             timestamp = df.index[pos]
-            self.assertIn(timestamp, df.index)
+            assert timestamp in df.index
 
             # it works!
             df.loc[timestamp]
diff --git a/pandas/tests/series/test_missing.py b/pandas/tests/series/test_missing.py
index 2f7bf6902..e7c1b2221 100644
--- a/pandas/tests/series/test_missing.py
+++ b/pandas/tests/series/test_missing.py
@@ -459,7 +459,7 @@ class TestSeriesMissingData(TestData, tm.TestCase):
         try:
             self.ts.fillna(method='ffil')
         except ValueError as inst:
-            self.assertIn('ffil', str(inst))
+            assert 'ffil' in str(inst)
 
     def test_ffill(self):
         ts = Series([0., 1., 2., 3., 4.], index=tm.makeDateIndex(5))
diff --git a/pandas/tests/series/test_repr.py b/pandas/tests/series/test_repr.py
index a80c5edcc..b4ad90f6f 100644
--- a/pandas/tests/series/test_repr.py
+++ b/pandas/tests/series/test_repr.py
@@ -95,12 +95,12 @@ class TestSeriesRepr(TestData, tm.TestCase):
         # 0 as name
         ser = Series(np.random.randn(100), name=0)
         rep_str = repr(ser)
-        self.assertIn("Name: 0", rep_str)
+        assert "Name: 0" in rep_str
 
         # tidy repr
         ser = Series(np.random.randn(1001), name=0)
         rep_str = repr(ser)
-        self.assertIn("Name: 0", rep_str)
+        assert "Name: 0" in rep_str
 
         ser = Series(["a\n\r\tb"], name="a\n\r\td", index=["a\n\r\tf"])
         self.assertFalse("\t" in repr(ser))
diff --git a/pandas/tests/series/test_timeseries.py b/pandas/tests/series/test_timeseries.py
index bafb8ebfd..486f129b6 100644
--- a/pandas/tests/series/test_timeseries.py
+++ b/pandas/tests/series/test_timeseries.py
@@ -796,7 +796,7 @@ class TestTimeSeries(TestData, tm.TestCase):
         frame.to_csv(buf)
 
         result = buf.getvalue()
-        self.assertIn('2000-01-01', result)
+        assert '2000-01-01' in result
 
     def test_series_map_box_timedelta(self):
         # GH 11349
diff --git a/pandas/tests/tseries/test_timezones.py b/pandas/tests/tseries/test_timezones.py
index c9ac4f36e..40ff2421a 100644
--- a/pandas/tests/tseries/test_timezones.py
+++ b/pandas/tests/tseries/test_timezones.py
@@ -372,7 +372,7 @@ class TestTimeZoneSupportPytz(tm.TestCase):
         rng = date_range('3/13/2012', '3/14/2012', freq='H', tz='utc')
         rng_eastern = rng.tz_convert(self.tzstr('US/Eastern'))
         # test not valid for dateutil timezones.
-        # self.assertIn('EDT', repr(rng_eastern[0].tzinfo))
+        # assert 'EDT' in repr(rng_eastern[0].tzinfo)
         self.assertTrue('EDT' in repr(rng_eastern[0].tzinfo) or 'tzfile' in
                         repr(rng_eastern[0].tzinfo))
 
@@ -683,7 +683,7 @@ class TestTimeZoneSupportPytz(tm.TestCase):
         rng_eastern = rng.tz_localize(self.tzstr('US/Eastern'))
 
         rng_repr = repr(rng_eastern)
-        self.assertIn('2010-04-13 00:00:00', rng_repr)
+        assert '2010-04-13 00:00:00' in rng_repr
 
     def test_index_astype_asobject_tzinfos(self):
         # #1345
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 7565cbb85..d6f3e00b7 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -894,7 +894,7 @@ def assert_index_equal(left, right, exact='equiv', check_names=True,
             assert_attr_equal('dtype', l, r, obj=obj)
             # allow string-like to have different inferred_types
             if l.inferred_type in ('string', 'unicode'):
-                assertIn(r.inferred_type, ('string', 'unicode'))
+                assert r.inferred_type in ('string', 'unicode')
             else:
                 assert_attr_equal('inferred_type', l, r, obj=obj)
 
@@ -1066,12 +1066,6 @@ def assertIs(first, second, msg=''):
     assert a is b, "%s: %r is not %r" % (msg.format(a, b), a, b)
 
 
-def assertIn(first, second, msg=''):
-    """Checks that 'first' is in 'second'"""
-    a, b = first, second
-    assert a in b, "%s: %r is not in %r" % (msg.format(a, b), a, b)
-
-
 def assertIsNone(expr, msg=''):
     """Checks that 'expr' is None"""
     return assertIs(expr, None, msg)
