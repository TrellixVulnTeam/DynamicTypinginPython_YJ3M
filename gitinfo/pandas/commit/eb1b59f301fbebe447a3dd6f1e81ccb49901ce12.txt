commit eb1b59f301fbebe447a3dd6f1e81ccb49901ce12
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Sep 20 12:30:52 2011 -0400

    BUG: address GH #135 and implement some setting on mixed-type DataFrame using .ix

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index a8e3d1d9c..c601e8b2a 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -101,6 +101,7 @@ def comp_method(func, name):
 class DataFrame(NDFrame):
     _auto_consolidate = True
     _verbose_info = True
+    _het_axis = 1
 
     _AXIS_NUMBERS = {
         'index' : 0,
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 48f8d90af..84dff7b7a 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -36,11 +36,6 @@ class _NDFrameIndexer(object):
             return self.obj.xs(idx, axis=axis, copy=True)
 
     def __setitem__(self, key, value):
-        # also has the side effect of consolidating in-place
-        if self.obj._is_mixed_type:
-            raise IndexingError('setting on mixed-type frames not '
-                                'yet supported')
-
         if isinstance(key, tuple):
             if len(key) > self.ndim:
                 raise IndexingError('only tuples of length <= %d supported',
@@ -54,7 +49,31 @@ class _NDFrameIndexer(object):
         else:
             indexer = self._convert_to_indexer(key)
 
-        self.obj.values[indexer] = value
+        self._setitem_with_indexer(indexer, value)
+
+    def _setitem_with_indexer(self, indexer, value):
+        # also has the side effect of consolidating in-place
+        if self.obj._is_mixed_type:
+            if not isinstance(indexer, tuple):
+                indexer = self._tuplify(indexer)
+
+            het_axis = self.obj._het_axis
+            het_idx = indexer[het_axis]
+
+            if isinstance(het_idx, (int, long)):
+                het_idx = [het_idx]
+
+            if not np.isscalar(value):
+                raise IndexingError('setting on mixed-type frames only '
+                                    'allowedwith scalar values')
+
+            plane_indexer = indexer[:het_axis] + indexer[het_axis+1:]
+            item_labels = self.obj._get_axis(het_axis)
+            for item in item_labels[het_idx]:
+                data = self.obj[item]
+                data.values[plane_indexer] = value
+        else:
+            self.obj.values[indexer] = value
 
     def _getitem_tuple(self, tup):
         # a bit kludgy
@@ -205,6 +224,11 @@ class _NDFrameIndexer(object):
                 return obj
             return index.get_loc(obj)
 
+    def _tuplify(self, loc):
+        tup = [slice(None, None) for _ in range(self.ndim)]
+        tup[0] = loc
+        return tuple(tup)
+
     def _get_slice_axis(self, slice_obj, axis=0):
         obj = self.obj
 
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 3d39d7f7d..841ec1704 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -44,7 +44,7 @@ def panel_index(time, panels, names=['time', 'panel']):
     Parameters
     ----------
     time : array-like
-        Time index, does not have to repeat 
+        Time index, does not have to repeat
     panels : array-like
         Panel index, does not have to repeat
     names : list, optional
@@ -63,8 +63,8 @@ def panel_index(time, panels, names=['time', 'panel']):
     >>> panel_idx
     MultiIndex([(1960, 'A'), (1961, 'A'), (1962, 'A'), (1960, 'B'), (1961, 'B'),
        (1962, 'B'), (1960, 'C'), (1961, 'C'), (1962, 'C')], dtype=object)
-    
-    or 
+
+    or
 
     >>> import numpy as np
     >>> years = np.repeat(range(1960,1963), 3)
@@ -166,6 +166,7 @@ class Panel(NDFrame):
 
     # major
     _default_stat_axis = 1
+    _het_axis = 0
 
     items = AxisProperty(0)
     major_axis = AxisProperty(1)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 8e37a6dac..154147c1c 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -409,8 +409,12 @@ class CheckIndexing(object):
                           (slice(None, None), 'E'), 1)
 
     def test_setitem_fancy_mixed_2d(self):
-        self.assertRaises(Exception, self.mixed_frame.ix.__setitem__,
-                          (slice(0, 5), ['C', 'B', 'A']), 5)
+        self.mixed_frame.ix[:5, ['C', 'B', 'A']] = 5
+        result = self.mixed_frame.ix[:5, ['C', 'B', 'A']]
+        self.assert_((result.values == 5).all())
+
+        self.mixed_frame.ix[5] = np.nan
+        self.assert_(isnull(self.mixed_frame.ix[5]).all())
 
     def test_getitem_fancy_1d(self):
         f = self.frame
@@ -591,6 +595,14 @@ class CheckIndexing(object):
         self.assertRaises(Exception, ix.__getitem__, mask)
         self.assertRaises(Exception, ix.__setitem__, mask, 1.)
 
+    def test_setitem_single_column_mixed(self):
+        df = DataFrame(randn(5, 3), index=['a', 'b', 'c', 'd', 'e'],
+                       columns=['foo', 'bar', 'baz'])
+        df['str'] = 'qux'
+        df.ix[::2, 'str'] = nan
+        expected = [nan, 'qux', nan, 'qux', nan]
+        assert_almost_equal(df['str'].values, expected)
+
     def test_setitem_fancy_exceptions(self):
         pass
 
