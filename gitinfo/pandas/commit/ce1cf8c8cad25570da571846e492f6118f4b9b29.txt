commit ce1cf8c8cad25570da571846e492f6118f4b9b29
Author: jreback <jeff@reback.net>
Date:   Tue Apr 8 13:16:07 2014 -0400

    DOC: v0.14.0 updates

diff --git a/doc/source/release.rst b/doc/source/release.rst
index e81c8f903..20269f407 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -161,12 +161,12 @@ API Changes
 
 - Added ``nunique`` and ``value_counts`` functions to ``Index`` for counting unique elements. (:issue:`6734`)
 
-- ``DataFrame.plot`` and ``Series.plot`` now support a ``table`` keyword for plotting ``matplotlib.Table``. The ``table`` kewyword can receive the following values. 
-  
+- ``DataFrame.plot`` and ``Series.plot`` now support a ``table`` keyword for plotting ``matplotlib.Table``. The ``table`` kewyword can receive the following values.
+
   - ``False``: Do nothing (default).
 
   - ``True``: Draw a table using the ``DataFrame`` or ``Series`` called ``plot`` method. Data will be transposed to meet matplotlib's default layout.
-  
+
   - ``DataFrame`` or ``Series``: Draw matplotlib.table using the passed data. The data will be drawn as displayed in print method (not transposed automatically).
 
   Also, helper function ``pandas.tools.plotting.table`` is added to create a table from ``DataFrame`` and ``Series``, and add it to an ``matplotlib.Axes``.
diff --git a/doc/source/v0.14.0.txt b/doc/source/v0.14.0.txt
index 0b36382af..383e95e34 100644
--- a/doc/source/v0.14.0.txt
+++ b/doc/source/v0.14.0.txt
@@ -7,11 +7,25 @@ This is a major release from 0.13.1 and includes a small number of API changes,
 enhancements, and performance improvements along with a large number of bug fixes. We recommend that all
 users upgrade to this version.
 
-Highlights include:
+- Highlights include:
 
-- MultIndexing Using Slicers
-- Joining a singly-indexed DataFrame with a multi-indexed DataFrame
-- More consistency in groupby results and more flexible groupby specifications
+  - SQL interfaces updated to use ``sqlalchemy``, See :ref:`Here<whatsnew_0140.sql>`.
+  - MultiIndexing Using Slicers, See :ref:`Here<whatsnew_0140.slicers>`.
+  - Ability to join a singly-indexed DataFrame with a multi-indexed DataFrame, see :ref:`Here <merging.join_on_mi>`
+  - More consistency in groupby results and more flexible groupby specifications, see :ref:`Here <groupby.specify>`
+  - Holiday calendars are now supported in ``CustomBusinessDay``, see :ref:`Here <timeseries.holiday>`
+  - Updated plotting options, See :ref:`Here<whatsnew_0140.plotting>`.
+  - Performance doc section on I/O operations, See :ref:`Here <io.perf>`
+
+- :ref:`Other Enhancements <whatsnew_0140.enhancements>`
+
+- :ref:`API Changes <whatsnew_0140.api>`
+
+- :ref:`Deprecations <whatsnew_0140.deprecations>`
+
+- :ref:`Bug Fixes <release.bug_fixes-0.14.0>`
+
+.. _whatsnew_0140.api:
 
 API changes
 ~~~~~~~~~~~
@@ -173,16 +187,6 @@ API changes
     # New output, 4-level MultiIndex
     df_multi.set_index([df_multi.index, df_multi.index])
 
-- Following keywords are now acceptable for :meth:`DataFrame.plot(kind='bar')` and :meth:`DataFrame.plot(kind='barh')`.
-
-  - `width`: Specify the bar width. In previous versions, static value 0.5 was passed to matplotlib and it cannot be overwritten. (:issue:`6604`)
-
-  - `align`: Specify the bar alignment. Default is `center` (different from matplotlib). In previous versions, pandas passes `align='edge'` to matplotlib and adjust the location to `center` by itself, and it results `align` keyword is not applied as expected. (:issue:`4525`)
-
-  - `position`: Specify relative alignments for bar plot layout. From 0 (left/bottom-end) to 1(right/top-end). Default is 0.5 (center). (:issue:`6604`)
-
-  Because of the default `align` value changes, coordinates of bar plots are now located on integer values (0.0, 1.0, 2.0 ...). This is intended to make bar plot be located on the same coodinates as line plot. However, bar plot may differs unexpectedly when you manually adjust the bar location or drawing area, such as using `set_xlim`, `set_ylim`, etc. In this cases, please modify your script to meet with new coordinates.
-
 - ``pairwise`` keyword was added to the statistical moment functions
   ``rolling_cov``, ``rolling_corr``, ``ewmcov``, ``ewmcorr``,
   ``expanding_cov``, ``expanding_corr`` to allow the calculation of moving
@@ -201,16 +205,13 @@ API changes
 
 - Added ``nunique`` and ``value_counts`` functions to ``Index`` for counting unique elements. (:issue:`6734`)
 
-- ``DataFrame.plot`` and ``Series.plot`` now support a ``table`` keyword for plotting ``matplotlib.Table``. The ``table`` kewyword can receive the following values. 
-  
-  - ``False``: Do nothing (default).
 
-  - ``True``: Draw a table using the ``DataFrame`` or ``Series`` called ``plot`` method. Data will be transposed to meet matplotlib's default layout.
-  
-  - ``DataFrame`` or ``Series``: Draw matplotlib.table using the passed data. The data will be drawn as displayed in print method (not transposed automatically).
+.. _whatsnew_0140.sql:
 
-  Also, helper function ``pandas.tools.plotting.table`` is added to create a table from ``DataFrame`` and ``Series``, and add it to an ``matplotlib.Axes``.
+SQL
+~~~
 
+.. _whatsnew_0140.slicers:
 
 MultiIndexing Using Slicers
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -319,19 +320,29 @@ You can use a right-hand-side of an alignable object as well.
    df2.loc[idx[:,:,['C1','C3']],:] = df2*1000
    df2
 
-Plotting With Errorbars
-~~~~~~~~~~~~~~~~~~~~~~~
+.. _whatsnew_0140.plotting:
 
-Plotting with error bars is now supported in the ``.plot`` method of ``DataFrame`` and ``Series`` objects (:issue:`3796`).
+Plotting
+~~~~~~~~
 
-x and y errorbars are supported and can be supplied using the ``xerr`` and ``yerr`` keyword arguments to ``.plot()`` The error values can be specified using a variety of formats.
+- Hexagonal bin plots from ``DataFrame.plot`` with ``kind='hexbin'`` (:issue:`5478`), See :ref:`the docs<visualization.hexbin>`.
 
-- As a ``DataFrame`` or ``dict`` of errors with one or more of the column names (or dictionary keys) matching one or more of the column names of the plotting ``DataFrame`` or matching the ``name`` attribute of the ``Series``
-- As a ``str`` indicating which of the columns of plotting ``DataFrame`` contain the error values
-- As raw values (``list``, ``tuple``, or ``np.ndarray``). Must be the same length as the plotting ``DataFrame``/``Series``
+- Plotting with Error Bars is now supported in the ``.plot`` method of ``DataFrame`` and ``Series`` objects (:issue:`3796`), See :ref:`the docs<visualization.errorbars>`.
 
-Asymmetrical error bars are also supported, however raw error values must be provided in this case. For a ``M`` length ``Series``, a ``Mx2`` array should be provided indicating lower and upper (or left and right) errors. For a ``MxN`` ``DataFrame``, asymmetrical errors should be in a ``Mx2xN`` array.
+- ``DataFrame.plot`` and ``Series.plot`` now support a ``table`` keyword for plotting ``matplotlib.Table``, See :ref:`the docs<visualization.table>`.
 
+- ``plot(legend='reverse')`` will now reverse the order of legend labels for
+  most plot kinds. (:issue:`6014`)
+
+- Following keywords are now acceptable for :meth:`DataFrame.plot(kind='bar')` and :meth:`DataFrame.plot(kind='barh')`.
+
+  - `width`: Specify the bar width. In previous versions, static value 0.5 was passed to matplotlib and it cannot be overwritten. (:issue:`6604`)
+
+  - `align`: Specify the bar alignment. Default is `center` (different from matplotlib). In previous versions, pandas passes `align='edge'` to matplotlib and adjust the location to `center` by itself, and it results `align` keyword is not applied as expected. (:issue:`4525`)
+
+  - `position`: Specify relative alignments for bar plot layout. From 0 (left/bottom-end) to 1(right/top-end). Default is 0.5 (center). (:issue:`6604`)
+
+  Because of the default `align` value changes, coordinates of bar plots are now located on integer values (0.0, 1.0, 2.0 ...). This is intended to make bar plot be located on the same coodinates as line plot. However, bar plot may differs unexpectedly when you manually adjust the bar location or drawing area, such as using `set_xlim`, `set_ylim`, etc. In this cases, please modify your script to meet with new coordinates.
 
 Prior Version Deprecations/Changes
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -340,6 +351,8 @@ There are prior version deprecations that are taking effect as of 0.14.0.
 
 - Remove ``column`` keyword from ``DataFrame.sort`` (:issue:`4370`)
 
+.. _whatsnew_0140.deprecations:
+
 Deprecations
 ~~~~~~~~~~~~
 
@@ -358,15 +371,14 @@ Deprecations
   ``FutureWarning`` is raised  to alert that the old ``cols`` arguments
   will not be supported in a future release (:issue:`6645`)
 
+.. _whatsnew_0140.enhancements:
+
 Enhancements
 ~~~~~~~~~~~~
 
 - ``DataFrame.to_latex`` now takes a longtable keyword, which if True will return a table in a longtable environment. (:issue:`6617`)
 - ``pd.read_clipboard`` will, if 'sep' is unspecified, try to detect data copied from a spreadsheet
   and parse accordingly. (:issue:`6223`)
-- ``plot(legend='reverse')`` will now reverse the order of legend labels for
-  most plot kinds. (:issue:`6014`)
-- Hexagonal bin plots from ``DataFrame.plot`` with ``kind='hexbin'`` (:issue:`5478`)
 - Joining a singly-indexed DataFrame with a multi-indexed DataFrame (:issue:`3662`)
 
   See :ref:`the docs<merging.join_on_mi>`. Joining multi-index DataFrames on both the left and right is not yet supported ATM.
@@ -403,7 +415,7 @@ Enhancements
   file. (:issue:`6545`)
 - ``pandas.io.gbq`` now handles reading unicode strings properly. (:issue:`5940`)
 - Improve performance of ``CustomBusinessDay`` (:issue:`6584`)
-- :ref:`Holidays and holiday calendars<timeseries.holiday>` are now available and can be used with CustomBusinessDay (:issue:`6719`)
+- :ref:`Holidays Calendars<timeseries.holiday>` are now available and can be used with CustomBusinessDay (:issue:`6719`)
 
 Performance
 ~~~~~~~~~~~
diff --git a/doc/source/visualization.rst b/doc/source/visualization.rst
index 09decc5ed..f42d2b3b5 100644
--- a/doc/source/visualization.rst
+++ b/doc/source/visualization.rst
@@ -385,6 +385,9 @@ columns:
 
 Plotting With Error Bars
 ~~~~~~~~~~~~~~~~~~~~~~~~
+
+.. versionadded:: 0.14
+
 Plotting with error bars is now supported in the ``.plot`` method of ``DataFrame`` and ``Series`` objects.
 
 x and y errorbars are supported and be supplied using the ``xerr`` and ``yerr`` keyword arguments to ``.plot()`` The error values can be specified using a variety of formats.
@@ -415,6 +418,8 @@ Here is an example of one way to easily plot group means with standard deviation
    @savefig errorbar_example.png
    means.plot(yerr=errors, ax=ax, kind='bar')
 
+.. _visualization.table:
+
 Plotting With Table
 ~~~~~~~~~~~~~~~~~~~~~~~~
 
@@ -448,7 +453,7 @@ Finally, there is a helper function ``pandas.tools.plotting.table`` to create a
    from pandas.tools.plotting import table
    fig, ax = plt.subplots(1, 1)
 
-   table(ax, np.round(df.describe(), 2), 
+   table(ax, np.round(df.describe(), 2),
          loc='upper right', colWidths=[0.2, 0.2, 0.2])
 
    @savefig line_plot_table_describe.png
@@ -494,7 +499,10 @@ setting ``kind='kde'``:
 
 Hexagonal Bin plot
 ~~~~~~~~~~~~~~~~~~
-*New in .14* You can create hexagonal bin plots with ``DataFrame.plot`` and
+
+.. versionadded:: 0.14
+
+You can create hexagonal bin plots with ``DataFrame.plot`` and
 ``kind='hexbin'``.
 Hexbin plots can be a useful alternative to scatter plots if your data are
 too dense to plot each point individually.
@@ -693,17 +701,17 @@ be colored differently.
 Colormaps
 ~~~~~~~~~
 
-A potential issue when plotting a large number of columns is that it can be 
+A potential issue when plotting a large number of columns is that it can be
 difficult to distinguish some series due to repetition in the default colors. To
-remedy this, DataFrame plotting supports the use of the ``colormap=`` argument, 
-which accepts either a Matplotlib `colormap <http://matplotlib.org/api/cm_api.html>`__ 
-or a string that is a name of a colormap registered with Matplotlib. A 
-visualization of the default matplotlib colormaps is available `here 
+remedy this, DataFrame plotting supports the use of the ``colormap=`` argument,
+which accepts either a Matplotlib `colormap <http://matplotlib.org/api/cm_api.html>`__
+or a string that is a name of a colormap registered with Matplotlib. A
+visualization of the default matplotlib colormaps is available `here
 <http://wiki.scipy.org/Cookbook/Matplotlib/Show_colormaps>`__.
 
-As matplotlib does not directly support colormaps for line-based plots, the 
+As matplotlib does not directly support colormaps for line-based plots, the
 colors are selected based on an even spacing determined by the number of columns
-in the DataFrame. There is no consideration made for background color, so some 
+in the DataFrame. There is no consideration made for background color, so some
 colormaps will produce lines that are not easily visible.
 
 To use the jet colormap, we can simply pass ``'jet'`` to ``colormap=``
@@ -762,16 +770,16 @@ Andrews curves charts:
 Plotting directly with matplotlib
 ---------------------------------
 
-In some situations it may still be preferable or necessary to prepare plots 
-directly with matplotlib, for instance when a certain type of plot or 
-customization is not (yet) supported by pandas. Series and DataFrame objects  
-behave like arrays and can therefore be passed directly to matplotlib functions 
+In some situations it may still be preferable or necessary to prepare plots
+directly with matplotlib, for instance when a certain type of plot or
+customization is not (yet) supported by pandas. Series and DataFrame objects
+behave like arrays and can therefore be passed directly to matplotlib functions
 without explicit casts.
 
-Pandas also automatically registers formatters and locators that recognize date 
-indices, thereby extending date and time support to practically all plot types 
-available in matplotlib. Although this formatting does not provide the same 
-level of refinement you would get when plotting via pandas, it can be faster 
+Pandas also automatically registers formatters and locators that recognize date
+indices, thereby extending date and time support to practically all plot types
+available in matplotlib. Although this formatting does not provide the same
+level of refinement you would get when plotting via pandas, it can be faster
 when plotting a large number of points.
 
 .. note::
@@ -781,7 +789,7 @@ when plotting a large number of points.
 
 .. ipython:: python
 
-   price = Series(randn(150).cumsum(), 
+   price = Series(randn(150).cumsum(),
                   index=date_range('2000-1-1', periods=150, freq='B'))
    ma = pd.rolling_mean(price, 20)
    mstd = pd.rolling_std(price, 20)
