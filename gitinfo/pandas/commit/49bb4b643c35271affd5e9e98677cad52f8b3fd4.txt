commit 49bb4b643c35271affd5e9e98677cad52f8b3fd4
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Oct 1 00:22:08 2010 -0400

    Misc cleanup, docs, pylint directives, etc.

diff --git a/pandas/core/api.py b/pandas/core/api.py
index 4443dbf3c..2c613a4f7 100644
--- a/pandas/core/api.py
+++ b/pandas/core/api.py
@@ -1,4 +1,4 @@
-# pylint: disable-msg=W0614,W0401,W0611
+# pylint: disable=W0614,W0401,W0611
 
 import numpy as np
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index bd5b0b988..ed4121ad9 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1,5 +1,5 @@
-# pylint: disable-msg=E1101,E1103
-# pylint: disable-msg=W0212,W0231,W0703,W0622
+# pylint: disable=E1101,E1103
+# pylint: disable=W0212,W0231,W0703,W0622
 
 from cStringIO import StringIO
 import operator
diff --git a/pandas/core/index.py b/pandas/core/index.py
index ba4c7acec..2ab297189 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1,9 +1,9 @@
-# pylint: disable-msg=E1101
-# pylint: disable-msg=E1103
-# pylint: disable-msg=W0232
+# pylint: disable=E1101,E1103,W0232
 
 import numpy as np
-from pandas.lib.tseries import map_indices, isAllDates
+import pandas.lib.tseries as _tseries
+
+__all__ = ['Index']
 
 def _indexOp(opname):
     """
@@ -15,16 +15,21 @@ def _indexOp(opname):
         return func(other)
     return wrapper
 
-
-
 class Index(np.ndarray):
-    """Extension of numpy-array to represent a series index,
-    dates or otherwise.
-
-    Index is immutable always (don't even try to change elements!).
-
-    Note that the Index can ONLY contain immutable objects. Mutable
-    objects are not hashable, and that's bad!
+    """
+    Immutable ndarray implementing an ordered, sliceable set
+
+    Parameters
+    ----------
+    data : array-like (1-dimensional)
+    dtype : NumPy dtype (default: object)
+    copy : bool
+        Make a copy of input ndarray
+
+    Note
+    ----
+    An Index instance can **only** contain immutable objects for
+    reasons of hashability.
     """
     def __new__(cls, data, dtype=object, copy=False):
         subarr = np.array(data, dtype=dtype, copy=copy)
@@ -33,13 +38,11 @@ class Index(np.ndarray):
             raise Exception('Index(...) must be called with a collection '
                             'of some kind, %s was passed' % repr(data))
 
-        subarr = subarr.view(cls)
-        return subarr
+        return subarr.view(cls)
 
     def __array_finalize__(self, obj):
         if self.ndim == 0:
             # tolist will cause a bus error if this is not here, hmm
-
             return self.item()
             # raise Exception('Cannot create 0-dimensional Index!')
 
@@ -62,14 +65,14 @@ class Index(np.ndarray):
     @property
     def indexMap(self):
         if not hasattr(self, '_cache_indexMap'):
-            self._cache_indexMap = map_indices(self)
+            self._cache_indexMap = _tseries.map_indices(self)
 
         return self._cache_indexMap
 
     @property
     def _allDates(self):
         if not hasattr(self, '_cache_allDates'):
-            self._cache_allDates = isAllDates(self)
+            self._cache_allDates = _tseries.isAllDates(self)
 
         return self._cache_allDates
 
@@ -83,8 +86,8 @@ class Index(np.ndarray):
     def __setstate__(self,state):
         """Necessary for making this object picklable"""
         np.ndarray.__setstate__(self, state)
-        self._cache_indexMap = map_indices(self)
-        self._cache_allDates = isAllDates(self)
+        self._cache_indexMap = _tseries.map_indices(self)
+        self._cache_allDates = _tseries.isAllDates(self)
 
     def __deepcopy__(self, memo={}):
         """
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index d8e3eb63b..4d97b8279 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -1,5 +1,5 @@
-# pylint: disable-msg=E1101,E1103
-# pylint: disable-msg=W0212,W0703,W0231,W0622
+# pylint: disable=E1101,E1103
+# pylint: disable=W0212,W0703,W0231,W0622
 
 from cStringIO import StringIO
 import sys
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index b425826e9..04055f0cd 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -1,10 +1,10 @@
 """
 Contains data structures designed for manipulating panel (3-dimensional) data
 """
-# pylint: disable-msg=E1103
-# pylint: disable-msg=W0231
-# pylint: disable-msg=W0212
-# pylint: disable-msg=W0621
+# pylint: disable=E1103
+# pylint: disable=W0231
+# pylint: disable=W0212
+# pylint: disable=W0621
 
 import operator
 import sys
diff --git a/pandas/core/series.py b/pandas/core/series.py
index f5f9ee749..e96036b6e 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2,8 +2,8 @@
 Data structure for 1-dimensional cross-sectional and time series data
 """
 
-# pylint: disable-msg=E1101,E1103
-# pylint: disable-msg=W0703,W0622
+# pylint: disable=E1101,E1103
+# pylint: disable=W0703,W0622
 
 import itertools
 import sys
@@ -374,13 +374,13 @@ class Series(np.ndarray, Picklable, Groupable):
 
     def sum(self, axis=None, dtype=None, out=None):
         """
-        Compute sum of non-null values
+        Sum of non-null values
         """
         return self._ndarray_statistic('sum')
 
     def mean(self, axis=None, dtype=None, out=None):
         """
-        Compute mean of non-null values
+        Mean of non-null values
         """
         return self._ndarray_statistic('mean')
 
@@ -396,7 +396,7 @@ class Series(np.ndarray, Picklable, Groupable):
 
     def min(self, axis=None, out=None):
         """
-        Compute minimum of non-null values
+        Minimum of non-null values
         """
         arr = self.values.copy()
         if not issubclass(arr.dtype.type, np.int_):
@@ -405,7 +405,7 @@ class Series(np.ndarray, Picklable, Groupable):
 
     def max(self, axis=None, out=None):
         """
-        Compute maximum of non-null values
+        Maximum of non-null values
         """
         arr = self.values.copy()
         if not issubclass(arr.dtype.type, np.int_):
@@ -414,7 +414,7 @@ class Series(np.ndarray, Picklable, Groupable):
 
     def std(self, axis=None, dtype=None, out=None, ddof=1):
         """
-        Compute unbiased standard deviation of non-null values
+        Unbiased standard deviation of non-null values
         """
         nona = remove_na(self.values)
         if len(nona) < 2:
@@ -423,7 +423,7 @@ class Series(np.ndarray, Picklable, Groupable):
 
     def var(self, axis=None, dtype=None, out=None, ddof=1):
         """
-        Compute unbiased variance of non-null values
+        Unbiased variance of non-null values
         """
         nona = remove_na(self.values)
         if len(nona) < 2:
@@ -432,7 +432,7 @@ class Series(np.ndarray, Picklable, Groupable):
 
     def skew(self):
         """
-        Computes the skewness of the non-null values
+        Unbiased skewness of the non-null values
 
         Returns
         -------
@@ -451,7 +451,13 @@ class Series(np.ndarray, Picklable, Groupable):
 
     def cumsum(self, axis=0, dtype=None, out=None):
         """
-        Overriding numpy's built-in cumsum functionality
+        Cumulative sum of values. Preserves NaN values
+
+        Extra parameters are to preserve ndarray interface.
+
+        Returns
+        -------
+
         """
         arr = self.copy()
         okLocs = notnull(arr)
