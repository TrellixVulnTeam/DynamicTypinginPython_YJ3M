commit 268ee21f0a834d901e25911f3ca044a4ff14d4a9
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Nov 6 15:38:26 2012 -0600

    BLD: c-parser branch fixes for win32 platforms

diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index 336a19a89..317629d7a 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -1735,6 +1735,10 @@ a,b,c
                 os.remove('__tmp__')
             except:
                 pass
+    
+    def test_memory_map(self):
+        # it works!
+        result = self.read_csv(self.csv1, memory_map=True)
 
 
 class TestParseSQL(unittest.TestCase):
diff --git a/pandas/src/parser.pyx b/pandas/src/parser.pyx
index eeaae0f57..57fae7ea0 100644
--- a/pandas/src/parser.pyx
+++ b/pandas/src/parser.pyx
@@ -48,6 +48,7 @@ cdef extern from "stdint.h":
     enum: UINT8_MAX
     enum: UINT16_MAX
     enum: UINT32_MAX
+    enum: UINT64_MAX
     enum: INT8_MIN
     enum: INT8_MAX
     enum: INT16_MIN
@@ -186,13 +187,15 @@ cdef extern from "parser/parser.h":
 
 cdef extern from "parser/io.h":
     void *new_mmap(char *fname)
+    int del_mmap(void *src)
+    void* buffer_mmap_bytes(void *source, size_t nbytes,
+                            size_t *bytes_read, int *status)
 
     void *new_file_source(char *fname, size_t buffer_size)
 
     void *new_rd_source(object obj)
 
     int del_file_source(void *src)
-    int del_mmap(void *src)
     int del_rd_source(void *src)
 
     void* buffer_file_bytes(void *source, size_t nbytes,
@@ -201,9 +204,6 @@ cdef extern from "parser/io.h":
     void* buffer_rd_bytes(void *source, size_t nbytes,
                           size_t *bytes_read, int *status)
 
-    void* buffer_mmap_bytes(void *source, size_t nbytes,
-                            size_t *bytes_read, int *status)
-
 
 DEFAULT_CHUNKSIZE = 256 * 1024
 
@@ -294,6 +294,8 @@ cdef class TextReader:
         self.clocks = []
 
         self.compression = compression
+        self.memory_map = memory_map
+
         self._setup_parser_source(source)
         parser_set_default_options(self.parser)
 
@@ -354,7 +356,6 @@ cdef class TextReader:
         self.delimiter = delimiter
         self.delim_whitespace = delim_whitespace
 
-        self.memory_map = memory_map
         self.na_values = na_values
         self.converters = converters
 
@@ -457,8 +458,14 @@ cdef class TextReader:
 
             if self.memory_map:
                 ptr = new_mmap(source)
-                self.parser.cb_io = &buffer_mmap_bytes
-                self.parser.cb_cleanup = &del_mmap
+                if ptr == NULL:         
+                    # fall back
+                    ptr = new_file_source(source, self.parser.chunksize)
+                    self.parser.cb_io = &buffer_file_bytes
+                    self.parser.cb_cleanup = &del_file_source
+                else:
+                    self.parser.cb_io = &buffer_mmap_bytes
+                    self.parser.cb_cleanup = &del_mmap
             else:
                 ptr = new_file_source(source, self.parser.chunksize)
                 self.parser.cb_io = &buffer_file_bytes
@@ -1436,6 +1443,12 @@ na_values = {
     np.float64 : np.nan,
     np.int64 : INT64_MIN,
     np.int32 : INT32_MIN,
+    np.int16 : INT16_MIN,
+    np.int8  : INT8_MIN,
+    np.uint64 : UINT64_MAX,
+    np.uint32 : UINT32_MAX,
+    np.uint16 : UINT16_MAX,
+    np.uint8 : UINT8_MAX,
     np.bool_ : UINT8_MAX,
     np.object_ : np.nan    # oof
 }
diff --git a/pandas/src/parser/io.c b/pandas/src/parser/io.c
index d1f32ea3e..8c7d7ec1b 100644
--- a/pandas/src/parser/io.c
+++ b/pandas/src/parser/io.c
@@ -38,49 +38,6 @@ void *new_file_source(char *fname, size_t buffer_size) {
  *  buffer_size is ignored.
  */
 
-void *new_mmap(char *fname)
-{
-    struct stat buf;
-    int fd;
-    memory_map *mm;
-    /* off_t position; */
-    off_t filesize;
-
-    mm = (memory_map *) malloc(sizeof(memory_map));
-    mm->fp = fopen(fname, "rb");
-
-    fd = fileno(mm->fp);
-    if (fstat(fd, &buf) == -1) {
-        fprintf(stderr, "new_file_buffer: fstat() failed. errno =%d\n", errno);
-        return NULL;
-    }
-    filesize = buf.st_size;  /* XXX This might be 32 bits. */
-
-
-    if (mm == NULL) {
-        /* XXX Eventually remove this print statement. */
-        fprintf(stderr, "new_file_buffer: malloc() failed.\n");
-        return NULL;
-    }
-    mm->size = (off_t) filesize;
-    mm->line_number = 0;
-
-    mm->fileno = fd;
-    mm->position = ftell(mm->fp);
-    mm->last_pos = (off_t) filesize;
-
-    mm->memmap = mmap(NULL, filesize, PROT_READ, MAP_SHARED, fd, 0);
-    if (mm->memmap == NULL) {
-        /* XXX Eventually remove this print statement. */
-        fprintf(stderr, "new_file_buffer: mmap() failed.\n");
-        free(mm);
-        mm = NULL;
-    }
-
-    return (void*) mm;
-}
-
-
 
 void* new_rd_source(PyObject *obj) {
     rd_source *rds = (rd_source *) malloc(sizeof(rd_source));
@@ -119,24 +76,6 @@ int del_rd_source(void *rds) {
     return 0;
 }
 
-int del_mmap(void *src)
-{
-    munmap(MM(src)->memmap, MM(src)->size);
-
-    fclose(MM(src)->fp);
-
-    /*
-     *  With a memory mapped file, there is no need to do
-     *  anything if restore == RESTORE_INITIAL.
-     */
-    /* if (restore == RESTORE_FINAL) { */
-    /*     fseek(FB(fb)->file, FB(fb)->current_pos, SEEK_SET); */
-    /* } */
-    free(src);
-
-    return 0;
-}
-
 /*
 
   IO callbacks
@@ -144,34 +83,6 @@ int del_mmap(void *src)
  */
 
 
-void* buffer_mmap_bytes(void *source, size_t nbytes,
-                        size_t *bytes_read, int *status) {
-    void *retval;
-    memory_map *src = MM(source);
-
-    if (src->position == src->last_pos) {
-        *bytes_read = 0;
-        *status = REACHED_EOF;
-        return NULL;
-    }
-
-    retval = src->memmap + src->position;
-
-    if (src->position + nbytes > src->last_pos) {
-        // fewer than nbytes remaining
-        *bytes_read = src->last_pos - src->position;
-    } else {
-        *bytes_read = nbytes;
-    }
-
-    *status = 0;
-
-    /* advance position in mmap data structure */
-    src->position += *bytes_read;
-
-    return retval;
-}
-
 void* buffer_file_bytes(void *source, size_t nbytes,
                         size_t *bytes_read, int *status) {
     file_source *src = FS(source);
@@ -241,3 +152,119 @@ void* buffer_rd_bytes(void *source, size_t nbytes,
 
     return retval;
 }
+
+
+#ifdef HAVE_MMAP
+
+#include <sys/stat.h>
+#include <sys/mman.h>
+
+void *new_mmap(char *fname)
+{
+    struct stat buf;
+    int fd;
+    memory_map *mm;
+    /* off_t position; */
+    off_t filesize;
+
+    mm = (memory_map *) malloc(sizeof(memory_map));
+    mm->fp = fopen(fname, "rb");
+
+    fd = fileno(mm->fp);
+    if (fstat(fd, &buf) == -1) {
+        fprintf(stderr, "new_file_buffer: fstat() failed. errno =%d\n", errno);
+        return NULL;
+    }
+    filesize = buf.st_size;  /* XXX This might be 32 bits. */
+
+
+    if (mm == NULL) {
+        /* XXX Eventually remove this print statement. */
+        fprintf(stderr, "new_file_buffer: malloc() failed.\n");
+        return NULL;
+    }
+    mm->size = (off_t) filesize;
+    mm->line_number = 0;
+
+    mm->fileno = fd;
+    mm->position = ftell(mm->fp);
+    mm->last_pos = (off_t) filesize;
+
+    mm->memmap = mmap(NULL, filesize, PROT_READ, MAP_SHARED, fd, 0);
+    if (mm->memmap == NULL) {
+        /* XXX Eventually remove this print statement. */
+        fprintf(stderr, "new_file_buffer: mmap() failed.\n");
+        free(mm);
+        mm = NULL;
+    }
+
+    return (void*) mm;
+}
+
+
+int del_mmap(void *src)
+{
+    munmap(MM(src)->memmap, MM(src)->size);
+
+    fclose(MM(src)->fp);
+
+    /*
+     *  With a memory mapped file, there is no need to do
+     *  anything if restore == RESTORE_INITIAL.
+     */
+    /* if (restore == RESTORE_FINAL) { */
+    /*     fseek(FB(fb)->file, FB(fb)->current_pos, SEEK_SET); */
+    /* } */
+    free(src);
+
+    return 0;
+}
+
+void* buffer_mmap_bytes(void *source, size_t nbytes,
+                        size_t *bytes_read, int *status) {
+    void *retval;
+    memory_map *src = MM(source);
+
+    if (src->position == src->last_pos) {
+        *bytes_read = 0;
+        *status = REACHED_EOF;
+        return NULL;
+    }
+
+    retval = src->memmap + src->position;
+
+    if (src->position + nbytes > src->last_pos) {
+        // fewer than nbytes remaining
+        *bytes_read = src->last_pos - src->position;
+    } else {
+        *bytes_read = nbytes;
+    }
+
+    *status = 0;
+
+    /* advance position in mmap data structure */
+    src->position += *bytes_read;
+
+    return retval;
+}
+
+#else
+
+/* kludgy */
+
+void *new_mmap(char *fname) {
+  return NULL;
+}
+
+int del_mmap(void *src) {
+  return 0;
+}
+
+/* don't use this! */
+
+void* buffer_mmap_bytes(void *source, size_t nbytes,
+                        size_t *bytes_read, int *status) {
+  return NULL;
+}
+
+#endif 
diff --git a/pandas/src/parser/io.h b/pandas/src/parser/io.h
index 13fae59c4..3fa25ce94 100644
--- a/pandas/src/parser/io.h
+++ b/pandas/src/parser/io.h
@@ -29,9 +29,9 @@ typedef struct _file_source {
 
 #define FS(source) ((file_source *)source)
 
-
-#include <sys/stat.h>
-#include <sys/mman.h>
+#if !defined(_WIN32)
+#define HAVE_MMAP
+#endif
 
 typedef struct _memory_map {
 
@@ -54,6 +54,13 @@ typedef struct _memory_map {
 
 #define MM(src) ((memory_map*) src)
 
+void *new_mmap(char *fname);
+
+int del_mmap(void *src);
+
+void* buffer_mmap_bytes(void *source, size_t nbytes,
+                        size_t *bytes_read, int *status);
+
 
 typedef struct _rd_source {
     PyObject* obj;
@@ -63,14 +70,11 @@ typedef struct _rd_source {
 
 #define RDS(source) ((rd_source *)source)
 
-void *new_mmap(char *fname);
-
 void *new_file_source(char *fname, size_t buffer_size);
 
 void *new_rd_source(PyObject *obj);
 
 int del_file_source(void *src);
-int del_mmap(void *src);
 int del_rd_source(void *src);
 
 void* buffer_file_bytes(void *source, size_t nbytes,
@@ -79,6 +83,3 @@ void* buffer_file_bytes(void *source, size_t nbytes,
 void* buffer_rd_bytes(void *source, size_t nbytes,
                       size_t *bytes_read, int *status);
 
-void* buffer_mmap_bytes(void *source, size_t nbytes,
-                        size_t *bytes_read, int *status);
-
diff --git a/setup.py b/setup.py
index 42bbc6608..dacb4b5fb 100755
--- a/setup.py
+++ b/setup.py
@@ -259,6 +259,7 @@ class CleanCommand(Command):
                                'np_datetime_strings.c',
                                'period.c',
                                'parser.c',
+                               'io.c',
                                'str_to.c']
 
         for root, dirs, files in list(os.walk('pandas')):
