commit fff4f3fa2b3a142632831c2d7b558843db3c048f
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Thu Jan 23 15:01:07 2020 -0800

    REF: avoid calling engine for EA values (#31258)

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 5d802e8a6..3b69dae78 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2892,14 +2892,17 @@ class DataFrame(NDFrame):
         engine = self.index._engine
 
         try:
-            return engine.get_value(series._values, index)
+            if isinstance(series._values, np.ndarray):
+                # i.e. not EA, we can use engine
+                return engine.get_value(series._values, index)
+            else:
+                loc = series.index.get_loc(index)
+                return series._values[loc]
         except KeyError:
             # GH 20629
             if self.index.nlevels > 1:
                 # partial indexing forbidden
                 raise
-        except (TypeError, ValueError):
-            pass
 
         # we cannot handle direct indexing
         # use positional
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 17a817116..6ac7876a8 100755
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -2101,8 +2101,7 @@ class _ScalarAccessIndexer(_NDFrameIndexerBase):
         if len(key) != self.ndim:
             raise ValueError("Not enough indexers for scalar access (setting)!")
         key = list(self._convert_key(key, is_setter=True))
-        key.append(value)
-        self.obj._set_value(*key, takeable=self._takeable)
+        self.obj._set_value(*key, value=value, takeable=self._takeable)
 
 
 @Appender(IndexingMixin.at.__doc__)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index e4883c4f0..2af413930 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1060,9 +1060,12 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         try:
             if takeable:
                 self._values[label] = value
-            else:
+            elif isinstance(self._values, np.ndarray):
+                # i.e. not EA, so we can use _engine
                 self.index._engine.set_value(self._values, label, value)
-        except (KeyError, TypeError):
+            else:
+                self.loc[label] = value
+        except KeyError:
 
             # set using a non-recursive method
             self.loc[label] = value
