commit 8d599a462ded9bee7f5e1bf6ba632c4a345339f2
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Apr 25 20:14:46 2012 -0400

    TST: unit test for frequency inference function

diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 1076feafa..5e946f04a 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -5,6 +5,7 @@ import numpy as np
 
 from pandas.core.index import Index, Int64Index
 from pandas.tseries.tools import parse_time_string
+from pandas.util.decorators import cache_readonly
 import pandas.core.common as com
 import pandas.core.datetools as datetools
 import pandas.tseries.tools as tools
@@ -838,6 +839,11 @@ class DatetimeIndex(Int64Index):
     def freq(self):
         return self.offset
 
+    @cache_readonly
+    def inferred_freq(self):
+        import pandas._sandbox as sbx
+        return sbx.infer_freq(self.asi8)
+
     @property
     def freqstr(self):
         return self.offset.freqstr
diff --git a/pandas/tseries/tests/test_frequencies.py b/pandas/tseries/tests/test_frequencies.py
new file mode 100644
index 000000000..012e44b4e
--- /dev/null
+++ b/pandas/tseries/tests/test_frequencies.py
@@ -0,0 +1,133 @@
+from datetime import datetime, time, timedelta
+import sys
+import os
+import unittest
+
+import nose
+
+import numpy as np
+
+from pandas import Index, DatetimeIndex, date_range
+
+from pandas.tseries.frequencies import to_offset
+import pandas.tseries.offsets as offsets
+
+import pandas._tseries as lib
+
+def test_to_offset_multiple():
+    freqstr = '2h30min'
+    freqstr2 = '2h 30min'
+
+    result = to_offset(freqstr)
+    assert(result == to_offset(freqstr2))
+    expected = offsets.Minute(150)
+    assert(result == expected)
+
+    freqstr = '2h30min15s'
+    result = to_offset(freqstr)
+    expected = offsets.Second(150 * 60 + 15)
+    assert(result == expected)
+
+    freqstr = '2h 60min'
+    result = to_offset(freqstr)
+    expected = offsets.Hour(3)
+    assert(result == expected)
+
+    freqstr = '15l500u'
+    result = to_offset(freqstr)
+    expected = offsets.Micro(15500)
+    assert(result == expected)
+
+    freqstr = '10s75L'
+    result = to_offset(freqstr)
+    expected = offsets.Milli(10075)
+    assert(result == expected)
+
+_dti = DatetimeIndex
+
+class TestFrequencyInference(unittest.TestCase):
+
+    def test_business_daily(self):
+        index = _dti(['12/31/1999', '1/3/1999'])
+        self.assert_(index.inferred_freq == 'B')
+
+    def test_day(self):
+        self._check_tick(timedelta(1), 'D')
+
+    def test_day_corner(self):
+        index = _dti(['1/1/2000', '1/2/2000'])
+        self.assert_(index.inferred_freq == 'D')
+
+    def test_hour(self):
+        self._check_tick(timedelta(hours=1), 'H')
+
+    def test_minute(self):
+        self._check_tick(timedelta(minutes=1), 'T')
+
+    def test_second(self):
+        self._check_tick(timedelta(seconds=1), 'S')
+
+    def test_millisecond(self):
+        self._check_tick(timedelta(microseconds=1000), 'L')
+
+    def test_microsecond(self):
+        self._check_tick(timedelta(microseconds=1), 'U')
+
+    def _check_tick(self, base_delta, code):
+        b = datetime.now()
+        for i in range(1, 5):
+            inc = base_delta * i
+            index = _dti([b + inc * j for j in range(3)])
+            self.assert_(index.inferred_freq == '%d%s' % (i, code))
+
+        index = _dti([b + base_delta - 7] +
+                     [b + base_delta * j for j in range(3)])
+        self.assert_(index.inferred_freq is None)
+
+        index = _dti([b + base_delta * j for j in range(3)] +
+                     [b + base_delta * 7])
+        self.assert_(index.inferred_freq is None)
+
+    def test_weekly(self):
+        days = ['MON', 'TUE', 'WED', 'THU', 'FRI']
+
+        for day in days:
+            self._check_generated_range('1/1/2000', 'W-%s' % day)
+
+    def test_monthly(self):
+        self._check_generated_range('1/1/2000', 'M')
+
+    def test_business_monthly(self):
+        self._check_generated_range('1/1/2000', 'BM')
+
+    def test_quarterly(self):
+        for month in ['JAN', 'FEB', 'MAR']:
+            self._check_generated_range('1/1/2000', 'Q-%s' % month)
+
+    def test_annual(self):
+        for month in MONTHS:
+            self._check_generated_range('1/1/2000', 'A-%s' % month)
+
+    def test_business_annual(self):
+        for month in MONTHS:
+            self._check_generated_range('1/1/2000', 'BA-%s' % month)
+
+    def _check_generated_range(self, start, freq):
+        freq = freq.upper()
+
+        gen = date_range(start, periods=3, freq=freq)
+        index = _dti(gen.values)
+        self.assert_(index.inferred_freq == gen.freq)
+
+        gen = date_range(start, periods=5, freq=freq)
+        index = _dti(gen.values)
+        self.assert_(index.inferred_freq == gen.freq)
+
+MONTHS = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP',
+          'OCT', 'NOV', 'DEC']
+
+if __name__ == '__main__':
+    import nose
+    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
+                   exit=False)
+
