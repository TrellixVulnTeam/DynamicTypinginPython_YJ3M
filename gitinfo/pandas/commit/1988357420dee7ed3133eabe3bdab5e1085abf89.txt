commit 1988357420dee7ed3133eabe3bdab5e1085abf89
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Feb 8 12:46:39 2012 -0500

    TST: test coverage

diff --git a/pandas/core/algorithms.py b/pandas/core/algorithms.py
index 17c3a12dc..5a0c7c948 100644
--- a/pandas/core/algorithms.py
+++ b/pandas/core/algorithms.py
@@ -1,5 +1,6 @@
 """
-Generic data algorithms
+Generic data algorithms. This module is experimental at the moment and not
+intended for public consumption
 """
 
 import numpy as np
diff --git a/pandas/tests/test_common.py b/pandas/tests/test_common.py
index 40a800227..a69175257 100644
--- a/pandas/tests/test_common.py
+++ b/pandas/tests/test_common.py
@@ -4,7 +4,7 @@ import unittest
 
 from pandas import Series, DataFrame
 from pandas.core.common import notnull, isnull
-import pandas.core.common as common
+import pandas.core.common as com
 import pandas.util.testing as tm
 
 import numpy as np
@@ -45,16 +45,16 @@ def test_isnull_datetime():
     assert notnull(datetime.now())
 
 def test_any_none():
-    assert(common._any_none(1, 2, 3, None))
-    assert(not common._any_none(1, 2, 3, 4))
+    assert(com._any_none(1, 2, 3, None))
+    assert(not com._any_none(1, 2, 3, 4))
 
 def test_all_not_none():
-    assert(common._all_not_none(1, 2, 3, 4))
-    assert(not common._all_not_none(1, 2, 3, None))
-    assert(not common._all_not_none(None, None, None, None))
+    assert(com._all_not_none(1, 2, 3, 4))
+    assert(not com._all_not_none(1, 2, 3, None))
+    assert(not com._all_not_none(None, None, None, None))
 
 def test_rands():
-    r = common.rands(10)
+    r = com.rands(10)
     assert(len(r) == 10)
 
 def test_adjoin():
@@ -63,7 +63,7 @@ def test_adjoin():
             ['ggg', 'hhh', 'iii']]
     expected = 'a  dd  ggg\nb  ee  hhh\nc  ff  iii'
 
-    adjoined = common.adjoin(2, *data)
+    adjoined = com.adjoin(2, *data)
 
     assert(adjoined == expected)
 
@@ -73,25 +73,25 @@ def test_iterpairs():
                 (2, 3),
                 (3, 4)]
 
-    result = list(common.iterpairs(data))
+    result = list(com.iterpairs(data))
 
     assert(result == expected)
 
 def test_indent():
     s = 'a b c\nd e f'
-    result = common.indent(s, spaces=6)
+    result = com.indent(s, spaces=6)
 
     assert(result == '      a b c\n      d e f')
 
 def test_banner():
-    ban = common.banner('hi')
+    ban = com.banner('hi')
     assert(ban == ('%s\nhi\n%s' % ('=' * 80, '=' * 80)))
 
 def test_map_indices_py():
     data = [4, 3, 2, 1]
     expected = {4 : 0, 3 : 1, 2 : 2, 1 : 3}
 
-    result = common.map_indices_py(data)
+    result = com.map_indices_py(data)
 
     assert(result == expected)
 
@@ -99,7 +99,7 @@ def test_union():
     a = [1, 2, 3]
     b = [4, 5, 6]
 
-    union = sorted(common.union(a, b))
+    union = sorted(com.union(a, b))
 
     assert((a + b) == union)
 
@@ -107,7 +107,7 @@ def test_difference():
     a = [1, 2, 3]
     b = [1, 2, 3, 4, 5, 6]
 
-    inter = sorted(common.difference(b, a))
+    inter = sorted(com.difference(b, a))
 
     assert([4, 5, 6] == inter)
 
@@ -115,7 +115,7 @@ def test_intersection():
     a = [1, 2, 3]
     b = [1, 2, 3, 4, 5, 6]
 
-    inter = sorted(common.intersection(a, b))
+    inter = sorted(com.intersection(a, b))
 
     assert(a == inter)
 
@@ -125,11 +125,21 @@ def test_groupby():
                 'b' : ['bar', 'baz', 'baz2'],
                 'q' : ['qux']}
 
-    grouped = common.groupby(values, lambda x: x[0])
+    grouped = com.groupby(values, lambda x: x[0])
 
     for k, v in grouped:
         assert v == expected[k]
 
+def test_ensure_int32():
+    values = np.arange(10, dtype=np.int32)
+    result = com._ensure_int32(values)
+    assert(result.dtype == np.int32)
+
+    values = np.arange(10, dtype=np.int64)
+    result = com._ensure_int32(values)
+    assert(result.dtype == np.int32)
+
+
 class TestTake(unittest.TestCase):
 
     def test_1d_with_out(self):
@@ -155,7 +165,7 @@ class TestTake(unittest.TestCase):
             data = np.random.randint(0, 2, 5).astype(dtype)
 
             indexer = [2, 1, 0, -1]
-            self.assertRaises(Exception, common.take_1d, data,
+            self.assertRaises(Exception, com.take_1d, data,
                               indexer, out=out)
 
         _test_dtype(np.int64)
@@ -172,9 +182,9 @@ class TestTake(unittest.TestCase):
             data = np.random.randint(0, 2, (5, 3)).astype(dtype)
 
             indexer = [2, 1, 0, -1]
-            self.assertRaises(Exception, common.take_2d, data,
+            self.assertRaises(Exception, com.take_2d, data,
                               indexer, out=out0, axis=0)
-            self.assertRaises(Exception, common.take_2d, data,
+            self.assertRaises(Exception, com.take_2d, data,
                               indexer, out=out1, axis=1)
 
             # no exception o/w
@@ -191,7 +201,7 @@ class TestTake(unittest.TestCase):
         arr = np.random.randn(10).astype(np.float32)
 
         indexer = [1, 2, 3, -1]
-        result = common.take_1d(arr, indexer)
+        result = com.take_1d(arr, indexer)
         expected = arr.take(indexer)
         expected[-1] = np.nan
         tm.assert_almost_equal(result, expected)
@@ -202,13 +212,13 @@ class TestTake(unittest.TestCase):
         indexer = [1, 2, 3, -1]
 
         # axis=0
-        result = common.take_2d(arr, indexer, axis=0)
+        result = com.take_2d(arr, indexer, axis=0)
         expected = arr.take(indexer, axis=0)
         expected[-1] = np.nan
         tm.assert_almost_equal(result, expected)
 
         # axis=1
-        result = common.take_2d(arr, indexer, axis=1)
+        result = com.take_2d(arr, indexer, axis=1)
         expected = arr.take(indexer, axis=1)
         expected[:, -1] = np.nan
         tm.assert_almost_equal(result, expected)
@@ -216,11 +226,11 @@ class TestTake(unittest.TestCase):
     def test_1d_bool(self):
         arr = np.array([0, 1, 0], dtype=bool)
 
-        result = common.take_1d(arr, [0, 2, 2, 1])
+        result = com.take_1d(arr, [0, 2, 2, 1])
         expected = arr.take([0, 2, 2, 1])
         self.assert_(np.array_equal(result, expected))
 
-        result = common.take_1d(arr, [0, 2, -1])
+        result = com.take_1d(arr, [0, 2, -1])
         self.assert_(result.dtype == np.object_)
 
     def test_2d_bool(self):
@@ -228,15 +238,15 @@ class TestTake(unittest.TestCase):
                         [1, 0, 1],
                         [0, 1, 1]], dtype=bool)
 
-        result = common.take_2d(arr, [0, 2, 2, 1])
+        result = com.take_2d(arr, [0, 2, 2, 1])
         expected = arr.take([0, 2, 2, 1], axis=0)
         self.assert_(np.array_equal(result, expected))
 
-        result = common.take_2d(arr, [0, 2, 2, 1], axis=1)
+        result = com.take_2d(arr, [0, 2, 2, 1], axis=1)
         expected = arr.take([0, 2, 2, 1], axis=1)
         self.assert_(np.array_equal(result, expected))
 
-        result = common.take_2d(arr, [0, 2, -1])
+        result = com.take_2d(arr, [0, 2, -1])
         self.assert_(result.dtype == np.object_)
 
     def test_2d_float32(self):
@@ -244,9 +254,9 @@ class TestTake(unittest.TestCase):
         indexer = [0, 2, -1, 1, -1]
 
         # axis=0
-        result = common.take_2d(arr, indexer)
+        result = com.take_2d(arr, indexer)
         result2 = np.empty_like(result)
-        common.take_2d(arr, indexer, out=result2)
+        com.take_2d(arr, indexer, out=result2)
         tm.assert_almost_equal(result, result)
 
         expected = arr.take(indexer, axis=0)
@@ -255,12 +265,12 @@ class TestTake(unittest.TestCase):
 
         # test with float64 out buffer
         out = np.empty((len(indexer), arr.shape[1]), dtype='f8')
-        common.take_2d(arr, indexer, out=out) # it works!
+        com.take_2d(arr, indexer, out=out) # it works!
 
         # axis=1
-        result = common.take_2d(arr, indexer, axis=1)
+        result = com.take_2d(arr, indexer, axis=1)
         result2 = np.empty_like(result)
-        common.take_2d(arr, indexer, axis=1, out=result2)
+        com.take_2d(arr, indexer, axis=1, out=result2)
         tm.assert_almost_equal(result, result)
 
         expected = arr.take(indexer, axis=1)
