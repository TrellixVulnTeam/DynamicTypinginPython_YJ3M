commit 2bf7613a43c7ab8721e3ad304f0cdfb662fb930a
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Nov 25 00:48:31 2011 -0500

    ENH: respect dtype argument in Panel._init_dict for missing items, GH #411

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index a74a7ec59..5593bb868 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2262,6 +2262,7 @@ class DataFrame(NDFrame):
 
     def _apply_standard(self, func, axis, ignore_failures=False):
         try:
+
             assert(not self._is_mixed_type)  # maybe a hack for now
             values = self.values
             dummy = Series(np.nan, index=self._get_axis(axis),
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 51c81dd1c..f8b77a567 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -251,13 +251,21 @@ class Panel(NDFrame):
 
         reshaped_data = data.copy() # shallow
         # homogenize
-        for k, v in data.iteritems():
-            v = v.reindex(index=major, columns=minor, copy=False)
-            if dtype is not None:
-                v = v.astype(dtype)
-            values = v.values
-            shape = values.shape
-            reshaped_data[k] = values.reshape((1,) + shape)
+
+        item_shape = (1, len(major), len(minor))
+        for k in items:
+            if k not in data:
+                values = np.empty(item_shape, dtype=dtype)
+                values.fill(np.nan)
+                reshaped_data[k] = values
+            else:
+                v = data[k]
+                v = v.reindex(index=major, columns=minor, copy=False)
+                if dtype is not None:
+                    v = v.astype(dtype)
+                values = v.values
+                shape = values.shape
+                reshaped_data[k] = values.reshape((1,) + shape)
 
         # segregates dtypes and forms blocks matching to columns
         blocks = form_blocks(reshaped_data, axes)
diff --git a/pandas/src/reduce.pyx b/pandas/src/reduce.pyx
index 61b48b97c..9f54f1a8f 100644
--- a/pandas/src/reduce.pyx
+++ b/pandas/src/reduce.pyx
@@ -54,22 +54,15 @@ cdef class Reducer:
 
         arr = self.arr
         chunk = self.dummy
-        it = <flatiter> PyArray_IterNew(result)
 
         dummy_buf = chunk.data
         chunk.data = arr.data
         try:
-            for i in range(1, self.nresults):
+            for i in range(self.nresults):
                 res = self.f(self.dummy)
                 if i == 0:
-                    try:
-                        assert(not isinstance(res, np.ndarray))
-                        if hasattr(res, 'dtype'):
-                            result = np.empty(self.nresults, dtype=res.dtype)
-                        else:
-                            result = np.empty(self.nresults, dtype='O')
-                    except Exception:
-                        raise ValueError('function does not reduce')
+                    result = self._get_result_array(res)
+                    it = <flatiter> PyArray_IterNew(result)
 
                 PyArray_SETITEM(result, PyArray_ITER_DATA(it), res)
                 chunk.data = chunk.data + self.increment
@@ -83,6 +76,18 @@ cdef class Reducer:
 
         return result
 
+    def _get_result_array(self, object res):
+        try:
+            assert(not isinstance(res, np.ndarray))
+            if hasattr(res, 'dtype'):
+                result = np.empty(self.nresults, dtype=res.dtype)
+            else:
+                result = np.empty(self.nresults, dtype='O')
+            result[0] = res
+        except Exception:
+            raise ValueError('function does not reduce')
+        return result
+
 def reduce(arr, f, axis=0, dummy=None):
     reducer = Reducer(arr, f, axis=axis, dummy=dummy)
     return reducer.get_result()
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 22d4cf6d6..a8d65e4f3 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -573,6 +573,12 @@ class TestPanel(unittest.TestCase, PanelTests, CheckIndexing,
         self.assert_(len(empty.major_axis) == 0)
         self.assert_(len(empty.minor_axis) == 0)
 
+    def test_constructor_observe_dtype(self):
+        # GH #411
+        panel = Panel(items=range(3), major_axis=range(3),
+                      minor_axis=range(3), dtype='O')
+        self.assert_(panel.values.dtype == np.object_)
+
     def test_consolidate(self):
         self.assert_(self.panel._data.is_consolidated())
 
