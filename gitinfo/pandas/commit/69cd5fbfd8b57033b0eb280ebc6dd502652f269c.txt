commit 69cd5fbfd8b57033b0eb280ebc6dd502652f269c
Author: Tommy <10076072+tommyod@users.noreply.github.com>
Date:   Fri Feb 2 13:50:46 2018 +0100

    DOC: Exposed arguments in plot.kde (#19229)
    
    * Exposed arguments in plot.kde, added number of sample points as option
    
    * Added a test for plot.kde with  as an integer
    
    * Added whatsnew. Fixed flake8 errors. Used is_integer  to infer type.
    
    * Updated scipy reference
    
    * Added test, rewrote whatsnew, removed import
    
    * Changed from Series to DataFrame in doc
    
    * Fixed PEP8 errors in test file
    
    * Fixed typo which made tests crash

diff --git a/doc/source/whatsnew/v0.23.0.txt b/doc/source/whatsnew/v0.23.0.txt
index b28378f13..26a7a78bb 100644
--- a/doc/source/whatsnew/v0.23.0.txt
+++ b/doc/source/whatsnew/v0.23.0.txt
@@ -536,7 +536,7 @@ Plotting
 
 - :func: `DataFrame.plot` now raises a ``ValueError`` when the ``x`` or ``y`` argument is improperly formed (:issue:`18671`)
 - Bug in formatting tick labels with ``datetime.time()`` and fractional seconds (:issue:`18478`).
--
+- :meth:`Series.plot.kde` has exposed the args ``ind`` and ``bw_method`` in the docstring (:issue:`18461`). The argument ``ind`` may now also be an integer (number of sample points).
 -
 
 Groupby/Resample/Rolling
diff --git a/pandas/plotting/_core.py b/pandas/plotting/_core.py
index 88b899ad6..b15c5271a 100644
--- a/pandas/plotting/_core.py
+++ b/pandas/plotting/_core.py
@@ -1398,6 +1398,10 @@ class KdePlot(HistPlot):
             sample_range = np.nanmax(y) - np.nanmin(y)
             ind = np.linspace(np.nanmin(y) - 0.5 * sample_range,
                               np.nanmax(y) + 0.5 * sample_range, 1000)
+        elif is_integer(self.ind):
+            sample_range = np.nanmax(y) - np.nanmin(y)
+            ind = np.linspace(np.nanmin(y) - 0.5 * sample_range,
+                              np.nanmax(y) + 0.5 * sample_range, self.ind)
         else:
             ind = self.ind
         return ind
@@ -2598,12 +2602,22 @@ class SeriesPlotMethods(BasePlotMethods):
         """
         return self(kind='hist', bins=bins, **kwds)
 
-    def kde(self, **kwds):
+    def kde(self, bw_method=None, ind=None, **kwds):
         """
         Kernel Density Estimate plot
 
         Parameters
         ----------
+        bw_method: str, scalar or callable, optional
+            The method used to calculate the estimator bandwidth.  This can be
+            'scott', 'silverman', a scalar constant or a callable.
+            If None (default), 'scott' is used.
+            See :class:`scipy.stats.gaussian_kde` for more information.
+        ind : NumPy array or integer, optional
+            Evaluation points. If None (default), 1000 equally spaced points
+            are used. If `ind` is a NumPy array, the kde is evaluated at the
+            points passed. If `ind` is an integer, `ind` number of equally
+            spaced points are used.
         `**kwds` : optional
             Keyword arguments to pass on to :py:meth:`pandas.Series.plot`.
 
@@ -2611,7 +2625,7 @@ class SeriesPlotMethods(BasePlotMethods):
         -------
         axes : matplotlib.AxesSubplot or np.array of them
         """
-        return self(kind='kde', **kwds)
+        return self(kind='kde', bw_method=bw_method, ind=ind, **kwds)
 
     density = kde
 
@@ -2766,12 +2780,22 @@ class FramePlotMethods(BasePlotMethods):
         """
         return self(kind='hist', by=by, bins=bins, **kwds)
 
-    def kde(self, **kwds):
+    def kde(self, bw_method=None, ind=None, **kwds):
         """
         Kernel Density Estimate plot
 
         Parameters
         ----------
+        bw_method: str, scalar or callable, optional
+            The method used to calculate the estimator bandwidth.  This can be
+            'scott', 'silverman', a scalar constant or a callable.
+            If None (default), 'scott' is used.
+            See :class:`scipy.stats.gaussian_kde` for more information.
+        ind : NumPy array or integer, optional
+            Evaluation points. If None (default), 1000 equally spaced points
+            are used. If `ind` is a NumPy array, the kde is evaluated at the
+            points passed. If `ind` is an integer, `ind` number of equally
+            spaced points are used.
         `**kwds` : optional
             Keyword arguments to pass on to :py:meth:`pandas.DataFrame.plot`.
 
@@ -2779,7 +2803,7 @@ class FramePlotMethods(BasePlotMethods):
         -------
         axes : matplotlib.AxesSubplot or np.array of them
         """
-        return self(kind='kde', **kwds)
+        return self(kind='kde', bw_method=bw_method, ind=ind, **kwds)
 
     density = kde
 
diff --git a/pandas/tests/plotting/test_series.py b/pandas/tests/plotting/test_series.py
index 2458fc0dc..278be4331 100644
--- a/pandas/tests/plotting/test_series.py
+++ b/pandas/tests/plotting/test_series.py
@@ -621,14 +621,16 @@ class TestSeriesPlots(TestPlotBase):
         if not self.mpl_ge_1_5_0:
             pytest.skip("mpl is not supported")
 
-        from numpy import linspace
-        _check_plot_works(self.ts.plot.kde, bw_method=.5,
-                          ind=linspace(-100, 100, 20))
+        sample_points = np.linspace(-100, 100, 20)
+        _check_plot_works(self.ts.plot.kde, bw_method='scott', ind=20)
+        _check_plot_works(self.ts.plot.kde, bw_method=None, ind=20)
+        _check_plot_works(self.ts.plot.kde, bw_method=None, ind=np.int(20))
+        _check_plot_works(self.ts.plot.kde, bw_method=.5, ind=sample_points)
         _check_plot_works(self.ts.plot.density, bw_method=.5,
-                          ind=linspace(-100, 100, 20))
+                          ind=sample_points)
         _, ax = self.plt.subplots()
-        ax = self.ts.plot.kde(logy=True, bw_method=.5,
-                              ind=linspace(-100, 100, 20), ax=ax)
+        ax = self.ts.plot.kde(logy=True, bw_method=.5, ind=sample_points,
+                              ax=ax)
         self._check_ax_scales(ax, yaxis='log')
         self._check_text_labels(ax.yaxis.get_label(), 'Density')
 
