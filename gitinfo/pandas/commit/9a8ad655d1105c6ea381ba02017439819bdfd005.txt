commit 9a8ad655d1105c6ea381ba02017439819bdfd005
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Jul 11 19:37:08 2012 -0400

    BUG: check for monotonicity in resampling, close #1580

diff --git a/RELEASE.rst b/RELEASE.rst
index a58faa008..9b9e7e5b8 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -62,6 +62,7 @@ pandas 0.8.1
   - Override Index.tolist for compatibility with MultiIndex (#1576)
   - Fix hierarchical summing bug with MultiIndex of length 1 (#1568)
   - Work around numpy.concatenate use/bug in Series.set_value (#1561)
+  - Ensure Series/DataFrame are sorted before resampling (#1580)
 
 pandas 0.8.0
 ============
diff --git a/pandas/tseries/resample.py b/pandas/tseries/resample.py
index 9ecaeb5d8..c5ba73eda 100644
--- a/pandas/tseries/resample.py
+++ b/pandas/tseries/resample.py
@@ -53,6 +53,13 @@ class TimeGrouper(CustomGrouper):
 
     def resample(self, obj):
         axis = obj._get_axis(self.axis)
+
+        if not axis.is_monotonic:
+            try:
+                obj = obj.sort_index(axis=self.axis)
+            except TypeError:
+                obj = obj.sort_index()
+
         if isinstance(axis, DatetimeIndex):
             return self._resample_timestamps(obj)
         elif isinstance(axis, PeriodIndex):
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 216eb9232..14a05aaf4 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -510,6 +510,16 @@ class TestResample(unittest.TestCase):
         result = ts.resample('20min', how=['mean', 'sum'])
         self.assert_(isinstance(result, DataFrame))
 
+    def test_resample_not_monotonic(self):
+        rng = pd.date_range('2012-06-12', periods=200, freq='h')
+        ts = Series(np.random.randn(len(rng)), index=rng)
+
+        ts = ts.take(np.random.permutation(len(ts)))
+
+        result = ts.resample('D', how='sum')
+        exp = ts.sort_index().resample('D', how='sum')
+        assert_series_equal(result, exp)
+
 def _simple_ts(start, end, freq='D'):
     rng = date_range(start, end, freq=freq)
     return Series(np.random.randn(len(rng)), index=rng)
