commit e640d0f2a52a80b3dbff833625d849e36d821204
Author: jreback <jeff@reback.net>
Date:   Mon Nov 25 13:04:49 2013 -0500

    TST: changed refs to use testing/TestCase where setUpClass/tearDownClass are defined

diff --git a/pandas/computation/tests/test_eval.py b/pandas/computation/tests/test_eval.py
index f2d75d3fd..cfbd9335e 100644
--- a/pandas/computation/tests/test_eval.py
+++ b/pandas/computation/tests/test_eval.py
@@ -1,6 +1,5 @@
 #!/usr/bin/env python
 
-import unittest
 import functools
 from itertools import product
 
@@ -104,10 +103,11 @@ def _is_py3_complex_incompat(result, expected):
 _good_arith_ops = com.difference(_arith_ops_syms, _special_case_arith_ops_syms)
 
 
-class TestEvalNumexprPandas(unittest.TestCase):
+class TestEvalNumexprPandas(tm.TestCase):
 
     @classmethod
     def setUpClass(cls):
+        super(TestEvalNumexprPandas, cls).setUpClass()
         skip_if_no_ne()
         import numexpr as ne
         cls.ne = ne
@@ -116,6 +116,7 @@ class TestEvalNumexprPandas(unittest.TestCase):
 
     @classmethod
     def tearDownClass(cls):
+        super(TestEvalNumexprPandas, cls).tearDownClass()
         del cls.engine, cls.parser
         if hasattr(cls, 'ne'):
             del cls.ne
@@ -707,6 +708,7 @@ class TestEvalNumexprPython(TestEvalNumexprPandas):
 
     @classmethod
     def setUpClass(cls):
+        super(TestEvalNumexprPython, cls).setUpClass()
         skip_if_no_ne()
         import numexpr as ne
         cls.ne = ne
@@ -733,6 +735,7 @@ class TestEvalPythonPython(TestEvalNumexprPython):
 
     @classmethod
     def setUpClass(cls):
+        super(TestEvalPythonPython, cls).setUpClass()
         cls.engine = 'python'
         cls.parser = 'python'
 
@@ -761,6 +764,7 @@ class TestEvalPythonPandas(TestEvalPythonPython):
 
     @classmethod
     def setUpClass(cls):
+        super(TestEvalPythonPandas, cls).setUpClass()
         cls.engine = 'python'
         cls.parser = 'pandas'
 
@@ -1024,10 +1028,11 @@ class TestAlignment(object):
 #------------------------------------
 # slightly more complex ops
 
-class TestOperationsNumExprPandas(unittest.TestCase):
+class TestOperationsNumExprPandas(tm.TestCase):
 
     @classmethod
     def setUpClass(cls):
+        super(TestOperationsNumExprPandas, cls).setUpClass()
         skip_if_no_ne()
         cls.engine = 'numexpr'
         cls.parser = 'pandas'
@@ -1035,6 +1040,7 @@ class TestOperationsNumExprPandas(unittest.TestCase):
 
     @classmethod
     def tearDownClass(cls):
+        super(TestOperationsNumExprPandas, cls).tearDownClass()
         del cls.engine, cls.parser
 
     def eval(self, *args, **kwargs):
@@ -1337,6 +1343,7 @@ class TestOperationsNumExprPython(TestOperationsNumExprPandas):
 
     @classmethod
     def setUpClass(cls):
+        super(TestOperationsNumExprPython, cls).setUpClass()
         if not _USE_NUMEXPR:
             raise nose.SkipTest("numexpr engine not installed")
         cls.engine = 'numexpr'
@@ -1404,6 +1411,7 @@ class TestOperationsPythonPython(TestOperationsNumExprPython):
 
     @classmethod
     def setUpClass(cls):
+        super(TestOperationsPythonPython, cls).setUpClass()
         cls.engine = cls.parser = 'python'
         cls.arith_ops = expr._arith_ops_syms + expr._cmp_ops_syms
         cls.arith_ops = filter(lambda x: x not in ('in', 'not in'),
@@ -1414,6 +1422,7 @@ class TestOperationsPythonPandas(TestOperationsNumExprPandas):
 
     @classmethod
     def setUpClass(cls):
+        super(TestOperationsPythonPandas, cls).setUpClass()
         cls.engine = 'python'
         cls.parser = 'pandas'
         cls.arith_ops = expr._arith_ops_syms + expr._cmp_ops_syms
diff --git a/pandas/io/tests/test_clipboard.py b/pandas/io/tests/test_clipboard.py
index 6ee0afa1c..210427c1a 100644
--- a/pandas/io/tests/test_clipboard.py
+++ b/pandas/io/tests/test_clipboard.py
@@ -1,5 +1,3 @@
-import unittest
-
 import numpy as np
 from numpy.random import randint
 
@@ -18,9 +16,10 @@ except OSError:
     raise nose.SkipTest("no clipboard found")
 
 
-class TestClipboard(unittest.TestCase):
+class TestClipboard(tm.TestCase):
     @classmethod
     def setUpClass(cls):
+        super(TestClipboard, cls).setupClass()
         cls.data = {}
         cls.data['string'] = mkdf(5, 3, c_idx_type='s', r_idx_type='i',
                                   c_idx_names=[None], r_idx_names=[None])
@@ -43,6 +42,7 @@ class TestClipboard(unittest.TestCase):
 
     @classmethod
     def tearDownClass(cls):
+        super(TestClipboard, cls).tearDownClass()
         del cls.data_types, cls.data
 
     def check_round_trip_frame(self, data_type, excel=None, sep=None):
diff --git a/pandas/io/tests/test_data.py b/pandas/io/tests/test_data.py
index 4e2331f05..8f289f41e 100644
--- a/pandas/io/tests/test_data.py
+++ b/pandas/io/tests/test_data.py
@@ -1,6 +1,5 @@
 from __future__ import print_function
 from pandas import compat
-import unittest
 import warnings
 import nose
 from nose.tools import assert_equal
@@ -35,15 +34,17 @@ def assert_n_failed_equals_n_null_columns(wngs, obj, cls=SymbolWarning):
     assert msgs.str.contains('|'.join(failed_symbols)).all()
 
 
-class TestGoogle(unittest.TestCase):
+class TestGoogle(tm.TestCase):
     @classmethod
     def setUpClass(cls):
+        super(TestGoogle, cls).setupClass()
         cls.locales = tm.get_locales(prefix='en_US')
         if not cls.locales:
             raise nose.SkipTest("US English locale not available for testing")
 
     @classmethod
     def tearDownClass(cls):
+        super(TestGoogle, cls).tearDownClass()
         del cls.locales
 
     @network
@@ -105,9 +106,10 @@ class TestGoogle(unittest.TestCase):
                 assert_n_failed_equals_n_null_columns(w, result)
 
 
-class TestYahoo(unittest.TestCase):
+class TestYahoo(tm.TestCase):
     @classmethod
     def setUpClass(cls):
+        super(TestYahoo, cls).setupClass()
         _skip_if_no_lxml()
 
     @network
@@ -224,9 +226,10 @@ class TestYahoo(unittest.TestCase):
         assert np.issubdtype(pan.values.dtype, np.floating)
 
 
-class TestYahooOptions(unittest.TestCase):
+class TestYahooOptions(tm.TestCase):
     @classmethod
     def setUpClass(cls):
+        super(TestYahooOptions, cls).setupClass()
         _skip_if_no_lxml()
 
         # aapl has monthlies
@@ -241,6 +244,7 @@ class TestYahooOptions(unittest.TestCase):
 
     @classmethod
     def tearDownClass(cls):
+        super(TestYahooOptions, cls).tearDownClass()
         del cls.aapl, cls.expiry
 
     @network
@@ -283,9 +287,10 @@ class TestYahooOptions(unittest.TestCase):
             assert len(puts)>1
 
 
-class TestOptionsWarnings(unittest.TestCase):
+class TestOptionsWarnings(tm.TestCase):
     @classmethod
     def setUpClass(cls):
+        super(TestOptionsWarnings, cls).setupClass()
         _skip_if_no_lxml()
 
         with assert_produces_warning(FutureWarning):
@@ -300,6 +305,7 @@ class TestOptionsWarnings(unittest.TestCase):
 
     @classmethod
     def tearDownClass(cls):
+        super(TestOptionsWarnings, cls).tearDownClass()
         del cls.aapl, cls.year, cls.month
 
     @network
@@ -342,7 +348,7 @@ class TestOptionsWarnings(unittest.TestCase):
                 warnings.warn("IndexError thrown no tables found")
 
 
-class TestDataReader(unittest.TestCase):
+class TestDataReader(tm.TestCase):
     def test_is_s3_url(self):
         from pandas.io.common import _is_s3_url
         self.assert_(_is_s3_url("s3://pandas/somethingelse.com"))
@@ -372,7 +378,7 @@ class TestDataReader(unittest.TestCase):
             assert isinstance(ff, dict)
 
 
-class TestFred(unittest.TestCase):
+class TestFred(tm.TestCase):
     @network
     def test_fred(self):
         """
diff --git a/pandas/io/tests/test_gbq.py b/pandas/io/tests/test_gbq.py
index f56c1aa04..ba653f397 100644
--- a/pandas/io/tests/test_gbq.py
+++ b/pandas/io/tests/test_gbq.py
@@ -3,7 +3,6 @@ import nose
 import os
 import shutil
 import subprocess
-import unittest
 
 import numpy as np
 
@@ -41,18 +40,18 @@ class FakeClient:
 class FakeApiClient:
     def __init__(self):
         self._fakejobs = FakeJobs()
-        
+
 
     def jobs(self):
         return self._fakejobs
 
 class FakeJobs:
-    def __init__(self): 
+    def __init__(self):
         self._fakequeryresults = FakeResults()
 
     def getQueryResults(self, job_id=None, project_id=None,
                         max_results=None, timeout_ms=None, **kwargs):
-        return self._fakequeryresults   
+        return self._fakequeryresults
 
 class FakeResults:
     def execute(self):
@@ -74,7 +73,7 @@ class FakeResults:
 
 ####################################################################################
 
-class test_gbq(unittest.TestCase):
+class TestGbq(tm.TestCase):
     def setUp(self):
         with open(self.fake_job_path, 'r') as fin:
             self.fake_job = ast.literal_eval(fin.read())
@@ -102,7 +101,7 @@ class test_gbq(unittest.TestCase):
              ('othello', 1603, 'brawl', 2),
              ('othello', 1603, "'", 17),
              ('othello', 1603, 'troubled', 1)
-            ], 
+            ],
             dtype=[('corpus', 'S16'),
                    ('corpus_date', '<i8'),
                    ('word', 'S16'),
@@ -137,17 +136,18 @@ class test_gbq(unittest.TestCase):
           'TRUE_BOOLEAN',
           'FALSE_BOOLEAN',
           'NULL_BOOLEAN']]
-    
+
     @classmethod
     def setUpClass(self):
         # Integration tests require a valid bigquery token
         # be present in the user's home directory. This
         # can be generated with 'bq init' in the command line
+        super(TestGbq, cls).setupClass()
         self.dirpath = tm.get_data_path()
         home = os.path.expanduser("~")
         self.bq_token = os.path.join(home, '.bigquery.v2.token')
         self.fake_job_path = os.path.join(self.dirpath, 'gbq_fake_job.txt')
-        
+
         # If we're using a valid token, make a test dataset
         # Note, dataset functionality is beyond the scope
         # of the module under test, so we rely on the command
@@ -167,7 +167,7 @@ class test_gbq(unittest.TestCase):
         # If the user has a token file, they should recieve a client from gbq._authenticate
         if not os.path.exists(self.bq_token):
             raise nose.SkipTest('Skipped because authentication information is not available.')
-        
+
         self.assertTrue(gbq._authenticate is not None, 'Authentication To GBQ Failed')
 
     @with_connectivity_check
@@ -205,14 +205,14 @@ class test_gbq(unittest.TestCase):
                         'An element in the result DataFrame didn\'t match the sample set')
 
     def test_index_column(self):
-        # A user should be able to specify an index column for return     
+        # A user should be able to specify an index column for return
         result_frame = gbq._parse_data(FakeClient(), self.fake_job, index_col='word')
         correct_frame = DataFrame(self.correct_data_small)
         correct_frame.set_index('word', inplace=True)
         self.assertTrue(result_frame.index.name == correct_frame.index.name)
 
     def test_column_order(self):
-        # A User should be able to specify the order in which columns are returned in the dataframe    
+        # A User should be able to specify the order in which columns are returned in the dataframe
         col_order = ['corpus_date', 'word_count', 'corpus', 'word']
         result_frame = gbq._parse_data(FakeClient(), self.fake_job, col_order=col_order)
         tm.assert_index_equal(result_frame.columns, DataFrame(self.correct_data_small)[col_order].columns)
@@ -279,8 +279,8 @@ class test_gbq(unittest.TestCase):
     @with_connectivity_check
     def test_table_exists(self):
         # Given a table name in the format {dataset}.{tablename}, if a table exists,
-        # the GetTableReference should accurately indicate this. 
-        # This could possibly change in future implementations of bq, 
+        # the GetTableReference should accurately indicate this.
+        # This could possibly change in future implementations of bq,
         # but it is the simplest way to provide users with appropriate
         # error messages regarding schemas.
         if not os.path.exists(self.bq_token):
@@ -309,7 +309,7 @@ class test_gbq(unittest.TestCase):
         df = DataFrame(self.correct_data_small)
         with self.assertRaises(gbq.SchemaMissing):
             gbq.to_gbq(df, 'pandas_testing_dataset.test_database', schema=None, col_order=None, if_exists='fail')
- 
+
     @with_connectivity_check
     def test_upload_replace_schema_error(self):
         # Attempting to replace an existing table without specifying a schema should fail
@@ -319,7 +319,7 @@ class test_gbq(unittest.TestCase):
         df = DataFrame(self.correct_data_small)
         with self.assertRaises(gbq.SchemaMissing):
             gbq.to_gbq(df, 'pandas_testing_dataset.test_database', schema=None, col_order=None, if_exists='replace')
-    
+
     @with_connectivity_check
     def test_upload_public_data_error(self):
         # Attempting to upload to a public, read-only, dataset should fail
@@ -432,7 +432,7 @@ class test_gbq(unittest.TestCase):
                                        'contributor_ip','contributor_id','contributor_username','timestamp',
                                        'is_minor','is_bot','reversion_id','comment','num_characters'])
         gbq.to_gbq(df1, 'pandas_testing_dataset.test_data5', schema=schema, col_order=None, if_exists='fail')
-        
+
         array2 = [['TESTING_GBQ', 999999999, 'hi', 0, True, 9999999999, '00.000.00.000', 1, 'hola',
                  99999999, False, False, 1, 'Jedi', 11210]]
 
@@ -441,7 +441,7 @@ class test_gbq(unittest.TestCase):
                                        'contributor_ip','contributor_id','contributor_username','timestamp',
                                        'is_minor','is_bot','reversion_id','comment','num_characters'])
         gbq.to_gbq(df2, 'pandas_testing_dataset.test_data5', schema=schema, col_order=None, if_exists='replace')
-        
+
         # Read the table and confirm the new data is all that is there
         a = gbq.read_gbq("SELECT * FROM pandas_testing_dataset.test_data5")
         self.assertTrue((a == df2).all().all())
diff --git a/pandas/io/tests/test_html.py b/pandas/io/tests/test_html.py
index c26048d4c..2471667aa 100644
--- a/pandas/io/tests/test_html.py
+++ b/pandas/io/tests/test_html.py
@@ -3,7 +3,6 @@ from __future__ import print_function
 import os
 import re
 import warnings
-import unittest
 
 try:
     from importlib import import_module
@@ -85,9 +84,10 @@ def test_bs4_version_fails():
                          flavor='bs4')
 
 
-class TestReadHtml(unittest.TestCase):
+class TestReadHtml(tm.TestCase):
     @classmethod
     def setUpClass(cls):
+        super(TestReadHtml, cls).setupClass()
         _skip_if_none_of(('bs4', 'html5lib'))
 
     def read_html(self, *args, **kwargs):
@@ -582,9 +582,10 @@ class TestReadHtml(unittest.TestCase):
         tm.assert_frame_equal(newdf, res[0])
 
 
-class TestReadHtmlLxml(unittest.TestCase):
+class TestReadHtmlLxml(tm.TestCase):
     @classmethod
     def setUpClass(cls):
+        super(TestReadHtmlLxml, cls).setupClass()
         _skip_if_no('lxml')
 
     def read_html(self, *args, **kwargs):
diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index 69a101021..82f9db52d 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -9,7 +9,6 @@ from __future__ import division
 from datetime import datetime
 from pandas import compat
 from distutils.version import LooseVersion
-import unittest
 import nose
 import numpy as np
 from numpy.testing.decorators import slow
@@ -70,6 +69,7 @@ class TestOLS(BaseTest):
 
     @classmethod
     def setUpClass(cls):
+        super(BaseTest, cls).setupClass()
         try:
             import matplotlib as mpl
             mpl.use('Agg', warn=False)
@@ -252,7 +252,7 @@ class TestOLS(BaseTest):
         summary = repr(model)
 
 
-class TestOLSMisc(unittest.TestCase):
+class TestOLSMisc(tm.TestCase):
 
     _multiprocess_can_split_ = True
 
@@ -261,6 +261,7 @@ class TestOLSMisc(unittest.TestCase):
     '''
     @classmethod
     def setupClass(cls):
+        super(BaseTest, cls).setupClass()
         if not _have_statsmodels:
             raise nose.SkipTest("no statsmodels")
 
@@ -804,7 +805,7 @@ def _period_slice(panelModel, i):
     return slice(L, R)
 
 
-class TestOLSFilter(unittest.TestCase):
+class TestOLSFilter(tm.TestCase):
 
     _multiprocess_can_split_ = True
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index cef8edaea..456c41849 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -7,7 +7,6 @@ from datetime import datetime, timedelta, time
 import operator
 import re
 import csv
-import unittest
 import nose
 import functools
 import itertools
@@ -12256,17 +12255,15 @@ class TestDataFrameQueryNumExprPandas(tm.TestCase):
 
 
 class TestDataFrameQueryNumExprPython(TestDataFrameQueryNumExprPandas):
+
     @classmethod
     def setUpClass(cls):
+        super(TestDataFrameQueryNumExprPython, cls).setUpClass()
         cls.engine = 'numexpr'
         cls.parser = 'python'
         skip_if_no_ne(cls.engine)
         cls.frame = _frame.copy()
 
-    @classmethod
-    def tearDownClass(cls):
-        del cls.frame, cls.engine, cls.parser
-
     def test_date_query_method(self):
         engine, parser = self.engine, self.parser
         df = DataFrame(randn(5, 3))
@@ -12359,28 +12356,22 @@ class TestDataFrameQueryNumExprPython(TestDataFrameQueryNumExprPandas):
 
 
 class TestDataFrameQueryPythonPandas(TestDataFrameQueryNumExprPandas):
+
     @classmethod
     def setUpClass(cls):
+        super(TestDataFrameQueryPythonPandas, cls).setUpClass()
         cls.engine = 'python'
         cls.parser = 'pandas'
         cls.frame = _frame.copy()
 
-    @classmethod
-    def tearDownClass(cls):
-        del cls.frame, cls.engine, cls.parser
-
-
 class TestDataFrameQueryPythonPython(TestDataFrameQueryNumExprPython):
+
     @classmethod
     def setUpClass(cls):
+        super(TestDataFrameQueryPythonPython, cls).setUpClass()
         cls.engine = cls.parser = 'python'
         cls.frame = _frame.copy()
 
-    @classmethod
-    def tearDownClass(cls):
-        del cls.frame, cls.engine, cls.parser
-
-
 PARSERS = 'python', 'pandas'
 ENGINES = 'python', 'numexpr'
 
@@ -12513,17 +12504,15 @@ class TestDataFrameQueryStrings(object):
             yield self.check_object_array_eq_ne, parser, engine
 
 
-class TestDataFrameEvalNumExprPandas(unittest.TestCase):
+class TestDataFrameEvalNumExprPandas(tm.TestCase):
+
     @classmethod
     def setUpClass(cls):
+        super(TestDataFrameEvalNumExprPandas, cls).setUpClass()
         cls.engine = 'numexpr'
         cls.parser = 'pandas'
         skip_if_no_ne()
 
-    @classmethod
-    def tearDownClass(cls):
-        del cls.engine, cls.parser
-
     def setUp(self):
         self.frame = DataFrame(randn(10, 3), columns=list('abc'))
 
@@ -12543,38 +12532,29 @@ class TestDataFrameEvalNumExprPandas(unittest.TestCase):
 
 
 class TestDataFrameEvalNumExprPython(TestDataFrameEvalNumExprPandas):
+
     @classmethod
     def setUpClass(cls):
+        super(TestDataFrameEvalNumExprPython, cls).setUpClass()
         cls.engine = 'numexpr'
         cls.parser = 'python'
         skip_if_no_ne()
 
-    @classmethod
-    def tearDownClass(cls):
-        del cls.engine, cls.parser
-
-
 class TestDataFrameEvalPythonPandas(TestDataFrameEvalNumExprPandas):
+
     @classmethod
     def setUpClass(cls):
+        super(TestDataFrameEvalPythonPandas, cls).setUpClass()
         cls.engine = 'python'
         cls.parser = 'pandas'
 
-    @classmethod
-    def tearDownClass(cls):
-        del cls.engine, cls.parser
-
-
 class TestDataFrameEvalPythonPython(TestDataFrameEvalNumExprPython):
+
     @classmethod
     def setUpClass(cls):
+        super(TestDataFrameEvalPythonPython, cls).tearDownClass()
         cls.engine = cls.parser = 'python'
 
-    @classmethod
-    def tearDownClass(cls):
-        del cls.engine, cls.parser
-
-
 if __name__ == '__main__':
     nose.runmodule(argv=[__file__, '-vvs', '-x', '--pdb', '--pdb-failure'],
                    exit=False)
diff --git a/pandas/tools/tests/test_util.py b/pandas/tools/tests/test_util.py
index 66ae52983..183bf2afb 100644
--- a/pandas/tools/tests/test_util.py
+++ b/pandas/tools/tests/test_util.py
@@ -1,8 +1,6 @@
 import os
 import locale
 import codecs
-import unittest
-
 import nose
 
 import numpy as np
@@ -16,7 +14,7 @@ CURRENT_LOCALE = locale.getlocale()
 LOCALE_OVERRIDE = os.environ.get('LOCALE_OVERRIDE', None)
 
 
-class TestCartesianProduct(unittest.TestCase):
+class TestCartesianProduct(tm.TestCase):
 
     def test_simple(self):
         x, y = list('ABC'), [1, 22]
@@ -26,9 +24,11 @@ class TestCartesianProduct(unittest.TestCase):
         assert_equal(result, expected)
 
 
-class TestLocaleUtils(unittest.TestCase):
+class TestLocaleUtils(tm.TestCase):
+
     @classmethod
     def setUpClass(cls):
+        super(TestLocaleUtils, cls).setupClass()
         cls.locales = tm.get_locales()
 
         if not cls.locales:
@@ -39,6 +39,7 @@ class TestLocaleUtils(unittest.TestCase):
 
     @classmethod
     def tearDownClass(cls):
+        super(TestLocaleUtils, cls).tearDownClass()
         del cls.locales
 
     def test_get_locales(self):
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index ebadc2103..0c4e083b5 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -58,10 +58,11 @@ class TestCase(unittest.TestCase):
     @classmethod
     def setUpClass(cls):
         pd.set_option('chained_assignment','raise')
-        print("setting up: {0}".format(cls))
+        #print("setting up: {0}".format(cls))
 
     @classmethod
     def tearDownClass(cls):
+        #print("tearing down up: {0}".format(cls))
         pass
 
 # NOTE: don't pass an NDFrame or index to this function - may not handle it
