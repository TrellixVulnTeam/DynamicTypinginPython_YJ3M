commit 041fd74da205be924f3cffcae32c851f92e1398e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Dec 7 14:33:11 2011 -0500

    BLD: cross-platform inline attribute, MSVC fix with pointer arithmetic, re #458 and #460

diff --git a/pandas/src/numpy_helper.h b/pandas/src/numpy_helper.h
index f5779dd7c..5315920e9 100644
--- a/pandas/src/numpy_helper.h
+++ b/pandas/src/numpy_helper.h
@@ -1,30 +1,41 @@
 #include "Python.h"
 #include "numpy/ndarrayobject.h"
 
-inline int
+#ifndef PANDAS_INLINE
+  #if defined(__GNUC__)
+    #define PANDAS_INLINE __inline__
+  #elif defined(_MSC_VER)
+    #define PANDAS_INLINE __inline
+  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
+    #define PANDAS_INLINE inline
+  #else
+    #define PANDAS_INLINE
+  #endif
+#endif
+
+PANDAS_INLINE int
 is_integer_object(PyObject* obj) {
   return PyArray_IsIntegerScalar(obj);
 }
 
-inline int
+PANDAS_INLINE int
 is_float_object(PyObject* obj) {
   return (PyFloat_Check(obj) || PyArray_IsScalar(obj, Floating));
 }
 
-inline int
+PANDAS_INLINE int
 is_bool_object(PyObject* obj) {
   return (PyBool_Check(obj) || PyArray_IsScalar(obj, Bool));
 }
 
-inline int
+PANDAS_INLINE int
 is_string_object(PyObject* obj) {
   return (PyString_Check(obj) || PyUnicode_Check(obj));
 }
 
-inline int
+PANDAS_INLINE int
 assign_value_1d(PyArrayObject* ap, Py_ssize_t _i, PyObject* v) {
-  char *item;
   npy_intp i = (npy_intp) _i;
-  item = PyArray_DATA(ap) + i * PyArray_STRIDE(ap, 0);
+  char *item = (char *) PyArray_DATA(ap) + i * PyArray_STRIDE(ap, 0);
   return PyArray_DESCR(ap)->f->setitem(v, item, ap);
 }
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 1019f8d7c..96270b8c5 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2038,6 +2038,9 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
                              ignore_index=True)
         assert_frame_equal(result, expected)
 
+        # can append when name set
+
+
     def test_append_different_columns(self):
         df = DataFrame({'bools' : np.random.randn(10) > 0,
                         'ints' : np.random.randint(0, 10, 10),
