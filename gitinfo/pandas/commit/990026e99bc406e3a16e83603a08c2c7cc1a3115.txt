commit 990026e99bc406e3a16e83603a08c2c7cc1a3115
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Oct 21 19:33:40 2011 -0400

    DOC: pivot_table docs

diff --git a/RELEASE.rst b/RELEASE.rst
index 8eab725b4..a2c3334a1 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -52,6 +52,8 @@ feedback on the library.
   - Changed `buffer` argument name in `Series.to_string` to `buf`
   - `Series.to_string` and `DataFrame.to_string` now return strings by default
     instead of printing to sys.stdout
+  - Deprecated `nanRep` argument in various `to_string` and `to_csv` functions
+    in favor of `na_rep`. Will be removed in 0.6 (GH #275)
   - Series functions renamed (and thus deprecated) in 0.4 series have been
     removed:
 
diff --git a/TODO.rst b/TODO.rst
index 31cf38c75..0646b0538 100644
--- a/TODO.rst
+++ b/TODO.rst
@@ -11,14 +11,14 @@ TODO
 TODO docs
 ---------
 
-- read_csv / read_table
+- DONE read_csv / read_table
   - auto-sniff delimiter
   - MultiIndex
   - generally more documentation
 
 - pivot_table
 
-- Set mixed-type values with .ix
+- DONE Set mixed-type values with .ix
 - get_dtype_counts / dtypes
 - save / load functions
 - combine_first
diff --git a/doc/source/io.rst b/doc/source/io.rst
index 5771dade8..1c169589e 100644
--- a/doc/source/io.rst
+++ b/doc/source/io.rst
@@ -34,7 +34,8 @@ data into a DataFrame object. They can take a number of arguments:
     of inferring automatically "sniffing" the delimiter in some cases
   - ``header``: row number to use as the column names, and the start of the data.
     Defaults to 0 (first row); specify None if there is no header row.
-  - ``names``: List of column names to use if header is None.
+  - ``names``: List of column names to use. If passed, header will be
+    implicitly set to None.
   - ``skiprows``: A collection of numbers for rows in the file to skip.
   - ``index_col``: column number, or list of column numbers, to use as the
     ``index`` (row labels) of the resulting DataFrame. By default, it will number
diff --git a/doc/source/reshaping.rst b/doc/source/reshaping.rst
index c1388edc7..99eba88c6 100644
--- a/doc/source/reshaping.rst
+++ b/doc/source/reshaping.rst
@@ -11,15 +11,9 @@
    randn = np.random.randn
    np.set_printoptions(precision=4, suppress=True)
 
-***************************
-Pivoting and reshaping data
-***************************
-
-.. note::
-
-   Since some of the functionality documented in this section is very new, the
-   user should keep an eye on any changes to the API or behavior which may
-   occur by the next release.
+**********************
+Reshaping fundamentals
+**********************
 
 Reshaping by pivoting DataFrame objects
 ---------------------------------------
@@ -195,3 +189,52 @@ some very expressive and fast data manipulations.
    df.stack().groupby(level=1).mean()
 
    df.mean().unstack(0)
+
+
+**********************************
+Pivot tables and cross-tabulations
+**********************************
+
+The function `pandas.pivot_table` can be used to create spreadsheet-style pivot
+tables. It takes a number of arguments
+
+- ``data``: A DataFrame object
+- ``values``: column to aggregate
+- ``xby``: list of columns to group by on the `x`-axis
+- ``yby``: list of columns to group by on the `y`-axis
+- ``aggfunc``: function to use for aggregation, defaulting to ``numpy.mean``
+
+Consider a data set like this:
+
+.. ipython:: python
+
+   df = DataFrame({'A' : ['one', 'one', 'two', 'three'] * 3,
+                   'B' : ['A', 'B', 'C'] * 4,
+                   'C' : ['foo', 'foo', 'foo', 'bar', 'bar', 'bar'] * 2,
+                   'D' : np.random.randn(12),
+                   'E' : np.random.randn(12)})
+   df
+
+We can produce pivot tables from this data very easily:
+
+.. ipython:: python
+
+   pivot_table(df, values='D', xby=['A', 'B'], yby=['C'])
+   pivot_table(df, values='D', xby=['B'], yby=['A', 'C'], aggfunc=np.sum)
+
+The result object is a DataFrame having potentially hierarchical indexes on the
+rows and columns. If the ``values`` column name is not given, the pivot table
+will include all of the data that can be aggregated in an additional level of
+hierarchy in the columns:
+
+.. ipython:: python
+
+   pivot_table(df, xby=['A', 'B'], yby=['C'])
+
+You can render a nice output of the table omitting the missing values by
+calling ``to_string`` if you wish:
+
+.. ipython:: python
+
+   table = pivot_table(df, xby=['A', 'B'], yby=['C'])
+   print table.to_string(na_rep='')
