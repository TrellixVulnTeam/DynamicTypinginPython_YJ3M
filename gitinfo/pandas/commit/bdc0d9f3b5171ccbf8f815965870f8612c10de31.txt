commit bdc0d9f3b5171ccbf8f815965870f8612c10de31
Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
Date:   Thu Dec 11 11:25:40 2014 +0100

    TST: start tests for PeriodConverter

diff --git a/pandas/tseries/tests/test_converter.py b/pandas/tseries/tests/test_converter.py
index b5a284d5f..9a57b66f4 100644
--- a/pandas/tseries/tests/test_converter.py
+++ b/pandas/tseries/tests/test_converter.py
@@ -6,7 +6,7 @@ import nose
 
 import numpy as np
 from numpy.testing import assert_almost_equal as np_assert_almost_equal
-from pandas import Timestamp
+from pandas import Timestamp, Period
 from pandas.compat import u
 import pandas.util.testing as tm
 from pandas.tseries.offsets import Second, Milli, Micro
@@ -103,6 +103,62 @@ class TestDateTimeConverter(tm.TestCase):
         _assert_less(ts, ts + Micro(50))
 
 
+class TestPeriodConverter(tm.TestCase):
+
+    def setUp(self):
+        self.pc = converter.PeriodConverter()
+
+        class Axis(object):
+            pass
+
+        self.axis = Axis()
+        self.axis.freq = 'D'
+
+    def test_convert_accepts_unicode(self):
+        # FIXME
+        raise nose.SkipTest("PeriodConverter does not yet handle unicode")
+        r1 = self.pc.convert("2012-1-1", None, self.axis)
+        r2 = self.pc.convert(u("2012-1-1"), None, self.axis)
+        self.assert_equal(r1, r2, "PeriodConverter.convert should accept unicode")
+
+    def test_conversion(self):
+        rs = self.pc.convert(['2012-1-1'], None, self.axis)[0]
+        xp = Period('2012-1-1').ordinal
+        self.assertEqual(rs, xp)
+
+        rs = self.pc.convert('2012-1-1', None, self.axis)
+        self.assertEqual(rs, xp)
+
+        rs = self.pc.convert([date(2012, 1, 1)], None, self.axis)[0]
+        self.assertEqual(rs, xp)
+
+        rs = self.pc.convert(date(2012, 1, 1), None, self.axis)
+        self.assertEqual(rs, xp)
+
+        rs = self.pc.convert([Timestamp('2012-1-1')], None, self.axis)[0]
+        self.assertEqual(rs, xp)
+
+        rs = self.pc.convert(Timestamp('2012-1-1'), None, self.axis)
+        self.assertEqual(rs, xp)
+
+        # FIXME
+        # rs = self.pc.convert(np.datetime64('2012-01-01'), None, self.axis)
+        # self.assertEqual(rs, xp)
+        #
+        # rs = self.pc.convert(np.datetime64('2012-01-01 00:00:00+00:00'), None, self.axis)
+        # self.assertEqual(rs, xp)
+        #
+        # rs = self.pc.convert(np.array([np.datetime64('2012-01-01 00:00:00+00:00'),
+        #                                 np.datetime64('2012-01-02 00:00:00+00:00')]), None, self.axis)
+        # self.assertEqual(rs[0], xp)
+
+    def test_integer_passthrough(self):
+        # GH9012
+        rs = self.pc.convert([0, 1], None, self.axis)
+        xp = [0, 1]
+        self.assertEqual(rs, xp)
+
+
 if __name__ == '__main__':
     import nose
     nose.runmodule(argv=[__file__, '-vvs', '-x', '--pdb', '--pdb-failure'],
