commit 6f484a7e65e39e851d92ea9a76105106317989df
Author: jreback <jeff@reback.net>
Date:   Tue Oct 8 19:23:24 2013 -0400

    DOC:  Move qt interface instructions to faq.rst from visualization.rst

diff --git a/doc/source/faq.rst b/doc/source/faq.rst
index d77236d4f..e5312e241 100644
--- a/doc/source/faq.rst
+++ b/doc/source/faq.rst
@@ -266,3 +266,78 @@ using something similar to the following:
 See `the NumPy documentation on byte order
 <http://docs.scipy.org/doc/numpy/user/basics.byteswapping.html>`__ for more
 details.
+
+
+Visualizing Data in Qt applications
+-----------------------------------
+
+There is experimental support for visualizing DataFrames in PyQt4 and PySide
+applications. At the moment you can display and edit the values of the cells
+in the DataFrame. Qt will take care of displaying just the portion of the
+DataFrame that is currently visible and the edits will be immediately saved to
+the underlying DataFrame
+
+To demonstrate this we will create a simple PySide application that will switch
+between two editable DataFrames. For this will use the ``DataFrameModel`` class
+that handles the access to the DataFrame, and the ``DataFrameWidget``, which is
+just a thin layer around the ``QTableView``.
+
+.. code-block:: python
+
+	import numpy as np
+	import pandas as pd
+	from pandas.sandbox.qtpandas import DataFrameModel, DataFrameWidget
+	from PySide import QtGui, QtCore
+
+	# Or if you use PyQt4:
+	# from PyQt4 import QtGui, QtCore
+
+	class MainWidget(QtGui.QWidget):
+	    def __init__(self, parent=None):
+	        super(MainWidget, self).__init__(parent)
+
+	        # Create two DataFrames
+	        self.df1 = pd.DataFrame(np.arange(9).reshape(3, 3),
+	                                columns=['foo', 'bar', 'baz'])
+	        self.df2 = pd.DataFrame({
+	                'int': [1, 2, 3],
+	                'float': [1.5, 2.5, 3.5],
+	                'string': ['a', 'b', 'c'],
+	                'nan': [np.nan, np.nan, np.nan]
+	            }, index=['AAA', 'BBB', 'CCC'],
+	            columns=['int', 'float', 'string', 'nan'])
+
+	        # Create the widget and set the first DataFrame
+	        self.widget = DataFrameWidget(self.df1)
+
+	        # Create the buttons for changing DataFrames
+	        self.button_first = QtGui.QPushButton('First')
+	        self.button_first.clicked.connect(self.on_first_click)
+	        self.button_second = QtGui.QPushButton('Second')
+	        self.button_second.clicked.connect(self.on_second_click)
+
+	        # Set the layout
+	        vbox = QtGui.QVBoxLayout()
+	        vbox.addWidget(self.widget)
+	        hbox = QtGui.QHBoxLayout()
+	        hbox.addWidget(self.button_first)
+	        hbox.addWidget(self.button_second)
+	        vbox.addLayout(hbox)
+	        self.setLayout(vbox)
+
+	    def on_first_click(self):
+	    	'''Sets the first DataFrame'''
+	        self.widget.setDataFrame(self.df1)
+
+	    def on_second_click(self):
+	    	'''Sets the second DataFrame'''
+	        self.widget.setDataFrame(self.df2)
+
+	if __name__ == '__main__':
+	    import sys
+
+	    # Initialize the application
+	    app = QtGui.QApplication(sys.argv)
+	    mw = MainWidget()
+	    mw.show()
+	    app.exec_()
diff --git a/doc/source/visualization.rst b/doc/source/visualization.rst
index a99269470..6e357d6d3 100644
--- a/doc/source/visualization.rst
+++ b/doc/source/visualization.rst
@@ -594,79 +594,3 @@ Andrews curves charts:
 
    @savefig andrews_curve_winter.png
    andrews_curves(data, 'Name', colormap='winter')
-
-
-****************************************
-Visualizing your data in Qt applications
-****************************************
-
-There is an experimental support for visualizing DataFrames in PyQt4 and PySide
-applications. At the moment you can display and edit the values of the cells
-in the DataFrame. Qt will take care of displaying just the portion of the
-DataFrame that is currently visible and the edits will be immediately saved to
-the underlying DataFrame
-
-To demonstrate this we will create a simple PySide application that will switch
-between two editable DataFrames. For this will use the ``DataFrameModel`` class
-that handles the access to the DataFrame, and the ``DataFrameWidget``, which is
-just a thin layer around the ``QTableView``.
-
-.. code-block:: python
-
-	import numpy as np
-	import pandas as pd
-	from pandas.sandbox.qtpandas import DataFrameModel, DataFrameWidget 
-	from PySide import QtGui, QtCore
-	
-	# Or if you use PyQt4:
-	# from PyQt4 import QtGui, QtCore
-	
-	class MainWidget(QtGui.QWidget):
-	    def __init__(self, parent=None):
-	        super(MainWidget, self).__init__(parent)
-	        
-	        # Create two DataFrames
-	        self.df1 = pd.DataFrame(np.arange(9).reshape(3, 3),
-	                                columns=['foo', 'bar', 'baz'])
-	        self.df2 = pd.DataFrame({
-	                'int': [1, 2, 3],
-	                'float': [1.5, 2.5, 3.5],
-	                'string': ['a', 'b', 'c'],
-	                'nan': [np.nan, np.nan, np.nan]
-	            }, index=['AAA', 'BBB', 'CCC'],
-	            columns=['int', 'float', 'string', 'nan'])
-	
-	        # Create the widget and set the first DataFrame
-	        self.widget = DataFrameWidget(self.df1)
-	        
-	        # Create the buttons for changing DataFrames
-	        self.button_first = QtGui.QPushButton('First')
-	        self.button_first.clicked.connect(self.on_first_click)
-	        self.button_second = QtGui.QPushButton('Second')
-	        self.button_second.clicked.connect(self.on_second_click)
-	        
-	        # Set the layout
-	        vbox = QtGui.QVBoxLayout()
-	        vbox.addWidget(self.widget)
-	        hbox = QtGui.QHBoxLayout()
-	        hbox.addWidget(self.button_first)
-	        hbox.addWidget(self.button_second)
-	        vbox.addLayout(hbox)
-	        self.setLayout(vbox)
-	    
-	    def on_first_click(self):
-	    	'''Sets the first DataFrame'''
-	        self.widget.setDataFrame(self.df1)
-	    
-	    def on_second_click(self):
-	    	'''Sets the second DataFrame'''
-	        self.widget.setDataFrame(self.df2)
-	
-	if __name__ == '__main__':
-	    import sys
-	    
-	    # Initialize the application
-	    app = QtGui.QApplication(sys.argv)
-	    mw = MainWidget()
-	    mw.show()
-	    app.exec_()
