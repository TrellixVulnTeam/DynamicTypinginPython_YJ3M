commit e8382665d12dcf270f587cf76cd0e6d5a1dac184
Author: Varun <k.varun@outlook.com>
Date:   Sat Nov 21 22:17:30 2015 -0500

    BUG: fixes timezone selection error, #11616 & timezone info lost, #11682

diff --git a/doc/source/whatsnew/v0.18.0.txt b/doc/source/whatsnew/v0.18.0.txt
index 926e191c9..d4ed68b9f 100644
--- a/doc/source/whatsnew/v0.18.0.txt
+++ b/doc/source/whatsnew/v0.18.0.txt
@@ -108,4 +108,7 @@ Bug Fixes
 
 
 
+
 - Bug in ``.loc`` against ``CategoricalIndex`` may result in normal ``Index`` (:issue:`11586`)
+- Bug groupby on tz-aware data where selection not returning ``Timestamp`` (:issue:`11616`)
+- Bug in timezone info lost when broadcasting scalar datetime to ``DataFrame`` (:issue:`11682`)
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 43d018edb..b3a42335e 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -1025,7 +1025,7 @@ def _infer_dtype_from_scalar(val):
 
         dtype = np.object_
 
-    elif isinstance(val, (np.datetime64, datetime)) and getattr(val,'tz',None) is None:
+    elif isinstance(val, (np.datetime64, datetime)) and getattr(val,'tzinfo',None) is None:
         val = lib.Timestamp(val).value
         dtype = np.dtype('M8[ns]')
 
@@ -1321,7 +1321,9 @@ def _possibly_downcast_to_dtype(result, dtype):
             try:
                 result = result.astype(dtype)
             except:
-                pass
+                if dtype.tz:
+                    # convert to datetime and change timezone
+                    result = pd.to_datetime(result).tz_localize(dtype.tz)
 
     except:
         pass
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 025ed1719..337b5d914 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -4096,6 +4096,30 @@ class TestGroupBy(tm.TestCase):
         grouped = series.groupby(grouper)
         assert next(iter(grouped), None) is None
 
+    def test_groupby_with_timezone_selection(self):
+        # GH 11616
+        # Test that column selection returns output in correct timezone.
+        np.random.seed(42)
+        df = pd.DataFrame({
+            'factor': np.random.randint(0, 3, size=60),
+            'time': pd.date_range('01/01/2000 00:00', periods=60, freq='s', tz='UTC')
+        })
+        df1 = df.groupby('factor').max()['time']
+        df2 = df.groupby('factor')['time'].max()
+        tm.assert_series_equal(df1, df2)
+
+    def test_timezone_info(self):
+        #GH 11682
+        # Timezone info lost when broadcasting scalar datetime to DataFrame
+        tm._skip_if_no_pytz()
+        import pytz
+
+        df = pd.DataFrame({'a': [1], 'b': [datetime.now(pytz.utc)]})
+        tm.assert_equal(df['b'][0].tzinfo, pytz.utc)
+        df = pd.DataFrame({'a': [1,2,3]})
+        df['b'] = datetime.now(pytz.utc)
+        tm.assert_equal(df['b'][0].tzinfo, pytz.utc)
+
     def test_groupby_with_timegrouper(self):
         # GH 4161
         # TimeGrouper requires a sorted index
