commit 3788c65735445eb2142d83fdd7e7633c7f6a7b43
Author: Phillip Cloud <cpcloud@gmail.com>
Date:   Fri Oct 17 20:01:18 2014 -0400

    BUG: dtype query with negation bug (GH8568)

diff --git a/doc/source/v0.15.0.txt b/doc/source/v0.15.0.txt
index a40e1d877..ee964b443 100644
--- a/doc/source/v0.15.0.txt
+++ b/doc/source/v0.15.0.txt
@@ -1121,3 +1121,6 @@ Bug Fixes
 - Bug in ``Series`` that allows it to be indexed by a ``DataFrame`` which has unexpected results.  Such indexing is no longer permitted (:issue:`8444`)
 - Bug in item assignment of a ``DataFrame`` with multi-index columns where right-hand-side columns were not aligned (:issue:`7655`)
 - Suppress FutureWarning generated by NumPy when comparing object arrays containing NaN for equality (:issue:`7065`)
+
+- Bug in ``DataFrame.eval()`` where the dtype of the ``not`` operator (``~``)
+  was not correctly inferred as ``bool``.
diff --git a/pandas/computation/ops.py b/pandas/computation/ops.py
index 81526b88c..9df9975b4 100644
--- a/pandas/computation/ops.py
+++ b/pandas/computation/ops.py
@@ -1,10 +1,8 @@
 """Operator classes for eval.
 """
 
-import re
 import operator as op
 from functools import partial
-from itertools import product, islice, chain
 from datetime import datetime
 
 import numpy as np
@@ -69,7 +67,6 @@ class Term(StringMixin):
         return self
 
     def _resolve_name(self):
-        key = self.name
         res = self.env.resolve(self.local_name, is_local=self.is_local)
         self.update(res)
 
@@ -491,3 +488,13 @@ class UnaryOp(Op):
 
     def __unicode__(self):
         return com.pprint_thing('{0}({1})'.format(self.op, self.operand))
+
+    @property
+    def return_type(self):
+        operand = self.operand
+        if operand.return_type == np.dtype('bool'):
+            return np.dtype('bool')
+        if (isinstance(operand, Op) and
+            (operand.op in _cmp_ops_dict or operand.op in _bool_ops_dict)):
+            return np.dtype('bool')
+        return np.dtype('int')
diff --git a/pandas/computation/tests/test_eval.py b/pandas/computation/tests/test_eval.py
index 1193dbb3c..0c07dc5c2 100644
--- a/pandas/computation/tests/test_eval.py
+++ b/pandas/computation/tests/test_eval.py
@@ -1627,6 +1627,26 @@ def test_inf():
         yield check_inf, engine, parser
 
 
+def check_negate_lt_eq_le(engine, parser):
+    tm.skip_if_no_ne(engine)
+    df = pd.DataFrame([[0, 10], [1, 20]], columns=['cat', 'count'])
+    expected = df[~(df.cat > 0)]
+
+    result = df.query('~(cat > 0)', engine=engine, parser=parser)
+    tm.assert_frame_equal(result, expected)
+
+    if parser == 'python':
+        with tm.assertRaises(NotImplementedError):
+            df.query('not (cat > 0)', engine=engine, parser=parser)
+    else:
+        result = df.query('not (cat > 0)', engine=engine, parser=parser)
+        tm.assert_frame_equal(result, expected)
+
+def test_negate_lt_eq_le():
+    for engine, parser in product(_engines, expr._parsers):
+        yield check_negate_lt_eq_le, engine, parser
+
+
 if __name__ == '__main__':
     nose.runmodule(argv=[__file__, '-vvs', '-x', '--pdb', '--pdb-failure'],
                    exit=False)
