commit 316c57e2fcb52e1fe0e6130eb6d9b0507e195c50
Author: Kevin Bowey <kwbowey@gmail.com>
Date:   Tue Jun 23 21:28:52 2020 +0200

    TST: pandas/test/window/ changes for #30999 (#34907)

diff --git a/pandas/tests/window/moments/test_moments_ewm.py b/pandas/tests/window/moments/test_moments_ewm.py
index c6a92c0ad..89d46a8bb 100644
--- a/pandas/tests/window/moments/test_moments_ewm.py
+++ b/pandas/tests/window/moments/test_moments_ewm.py
@@ -116,10 +116,12 @@ def test_ewma_span_com_args(series):
     A = series.ewm(com=9.5).mean()
     B = series.ewm(span=20).mean()
     tm.assert_almost_equal(A, B)
-
-    with pytest.raises(ValueError):
+    msg = "comass, span, halflife, and alpha are mutually exclusive"
+    with pytest.raises(ValueError, match=msg):
         series.ewm(com=9.5, span=20)
-    with pytest.raises(ValueError):
+
+    msg = "Must pass one of comass, span, halflife, or alpha"
+    with pytest.raises(ValueError, match=msg):
         series.ewm().mean()
 
 
@@ -127,8 +129,8 @@ def test_ewma_halflife_arg(series):
     A = series.ewm(com=13.932726172912965).mean()
     B = series.ewm(halflife=10.0).mean()
     tm.assert_almost_equal(A, B)
-
-    with pytest.raises(ValueError):
+    msg = "comass, span, halflife, and alpha are mutually exclusive"
+    with pytest.raises(ValueError, match=msg):
         series.ewm(span=20, halflife=50)
     with pytest.raises(ValueError):
         series.ewm(com=9.5, halflife=50)
@@ -153,13 +155,16 @@ def test_ewm_alpha(arr):
 def test_ewm_alpha_arg(series):
     # GH 10789
     s = series
-    with pytest.raises(ValueError):
+    msg = "Must pass one of comass, span, halflife, or alpha"
+    with pytest.raises(ValueError, match=msg):
         s.ewm()
-    with pytest.raises(ValueError):
+
+    msg = "comass, span, halflife, and alpha are mutually exclusive"
+    with pytest.raises(ValueError, match=msg):
         s.ewm(com=10.0, alpha=0.5)
-    with pytest.raises(ValueError):
+    with pytest.raises(ValueError, match=msg):
         s.ewm(span=10.0, alpha=0.5)
-    with pytest.raises(ValueError):
+    with pytest.raises(ValueError, match=msg):
         s.ewm(halflife=10.0, alpha=0.5)
 
 
diff --git a/pandas/tests/window/moments/test_moments_rolling.py b/pandas/tests/window/moments/test_moments_rolling.py
index f6e283496..81f020fe7 100644
--- a/pandas/tests/window/moments/test_moments_rolling.py
+++ b/pandas/tests/window/moments/test_moments_rolling.py
@@ -198,7 +198,8 @@ def test_centered_axis_validation():
     Series(np.ones(10)).rolling(window=3, center=True, axis=0).mean()
 
     # bad axis
-    with pytest.raises(ValueError):
+    msg = "No axis named 1 for object type Series"
+    with pytest.raises(ValueError, match=msg):
         Series(np.ones(10)).rolling(window=3, center=True, axis=1).mean()
 
     # ok ok
@@ -206,7 +207,8 @@ def test_centered_axis_validation():
     DataFrame(np.ones((10, 10))).rolling(window=3, center=True, axis=1).mean()
 
     # bad axis
-    with pytest.raises(ValueError):
+    msg = "No axis named 2 for object type DataFrame"
+    with pytest.raises(ValueError, match=msg):
         (DataFrame(np.ones((10, 10))).rolling(window=3, center=True, axis=2).mean())
 
 
@@ -743,8 +745,8 @@ def test_rolling_min(raw, series, frame):
     result = a.rolling(window=100, min_periods=1).min()
     expected = pd.Series(np.ones(len(a)))
     tm.assert_series_equal(result, expected)
-
-    with pytest.raises(ValueError):
+    msg = "min_periods 5 must be <= window 3"
+    with pytest.raises(ValueError, match=msg):
         pd.Series([1, 2, 3]).rolling(window=3, min_periods=5).min()
 
 
@@ -754,8 +756,8 @@ def test_rolling_max(raw, series, frame):
     a = pd.Series([1, 2, 3, 4, 5], dtype=np.float64)
     b = a.rolling(window=100, min_periods=1).max()
     tm.assert_almost_equal(a, b)
-
-    with pytest.raises(ValueError):
+    msg = "min_periods 5 must be <= window 3"
+    with pytest.raises(ValueError, match=msg):
         pd.Series([1, 2, 3]).rolling(window=3, min_periods=5).max()
 
 
@@ -841,14 +843,16 @@ def test_invalid_quantile_value():
 
 def test_rolling_quantile_param():
     ser = Series([0.0, 0.1, 0.5, 0.9, 1.0])
-
-    with pytest.raises(ValueError):
+    msg = "quantile value -0.1 not in \\[0, 1\\]"
+    with pytest.raises(ValueError, match=msg):
         ser.rolling(3).quantile(-0.1)
 
-    with pytest.raises(ValueError):
+    msg = "quantile value 10.0 not in \\[0, 1\\]"
+    with pytest.raises(ValueError, match=msg):
         ser.rolling(3).quantile(10.0)
 
-    with pytest.raises(TypeError):
+    msg = "must be real number, not str"
+    with pytest.raises(TypeError, match=msg):
         ser.rolling(3).quantile("foo")
 
 
diff --git a/pandas/tests/window/test_dtypes.py b/pandas/tests/window/test_dtypes.py
index b1c9b66ab..0aa5bf019 100644
--- a/pandas/tests/window/test_dtypes.py
+++ b/pandas/tests/window/test_dtypes.py
@@ -220,7 +220,8 @@ class DatetimeLike(Dtype):
             tm.assert_almost_equal(result, exp)
 
         else:
-            with pytest.raises(DataError):
+            msg = "No numeric types to aggregate"
+            with pytest.raises(DataError, match=msg):
                 f(roll)
 
 
diff --git a/pandas/tests/window/test_ewm.py b/pandas/tests/window/test_ewm.py
index 0957cac7a..44015597d 100644
--- a/pandas/tests/window/test_ewm.py
+++ b/pandas/tests/window/test_ewm.py
@@ -28,28 +28,33 @@ def test_constructor(which):
     c(halflife=0.75, alpha=None)
 
     # not valid: mutually exclusive
-    with pytest.raises(ValueError):
+    msg = "comass, span, halflife, and alpha are mutually exclusive"
+    with pytest.raises(ValueError, match=msg):
         c(com=0.5, alpha=0.5)
-    with pytest.raises(ValueError):
+    with pytest.raises(ValueError, match=msg):
         c(span=1.5, halflife=0.75)
-    with pytest.raises(ValueError):
+    with pytest.raises(ValueError, match=msg):
         c(alpha=0.5, span=1.5)
 
     # not valid: com < 0
-    with pytest.raises(ValueError):
+    msg = "comass must satisfy: comass >= 0"
+    with pytest.raises(ValueError, match=msg):
         c(com=-0.5)
 
     # not valid: span < 1
-    with pytest.raises(ValueError):
+    msg = "span must satisfy: span >= 1"
+    with pytest.raises(ValueError, match=msg):
         c(span=0.5)
 
     # not valid: halflife <= 0
-    with pytest.raises(ValueError):
+    msg = "halflife must satisfy: halflife > 0"
+    with pytest.raises(ValueError, match=msg):
         c(halflife=0)
 
     # not valid: alpha <= 0 or alpha > 1
+    msg = "alpha must satisfy: 0 < alpha <= 1"
     for alpha in (-0.5, 1.5):
-        with pytest.raises(ValueError):
+        with pytest.raises(ValueError, match=msg):
             c(alpha=alpha)
 
 
diff --git a/pandas/tests/window/test_expanding.py b/pandas/tests/window/test_expanding.py
index b57467385..30d65ebe8 100644
--- a/pandas/tests/window/test_expanding.py
+++ b/pandas/tests/window/test_expanding.py
@@ -28,9 +28,12 @@ def test_constructor(which):
 
     # not valid
     for w in [2.0, "foo", np.array([2])]:
-        with pytest.raises(ValueError):
+        msg = "min_periods must be an integer"
+        with pytest.raises(ValueError, match=msg):
             c(min_periods=w)
-        with pytest.raises(ValueError):
+
+        msg = "center must be a boolean"
+        with pytest.raises(ValueError, match=msg):
             c(min_periods=1, center=w)
 
 
diff --git a/pandas/tests/window/test_timeseries_window.py b/pandas/tests/window/test_timeseries_window.py
index 0c5289cd7..8aa4d7103 100644
--- a/pandas/tests/window/test_timeseries_window.py
+++ b/pandas/tests/window/test_timeseries_window.py
@@ -55,28 +55,35 @@ class TestRollingTS:
         df = self.regular
 
         # not a valid freq
-        with pytest.raises(ValueError):
+        msg = "passed window foobar is not compatible with a datetimelike index"
+        with pytest.raises(ValueError, match=msg):
             df.rolling(window="foobar")
-
         # not a datetimelike index
-        with pytest.raises(ValueError):
+        msg = "window must be an integer"
+        with pytest.raises(ValueError, match=msg):
             df.reset_index().rolling(window="foobar")
 
         # non-fixed freqs
+        msg = "\\<2 \\* MonthBegins\\> is a non-fixed frequency"
         for freq in ["2MS", offsets.MonthBegin(2)]:
-            with pytest.raises(ValueError):
+            with pytest.raises(ValueError, match=msg):
                 df.rolling(window=freq)
 
         for freq in ["1D", offsets.Day(2), "2ms"]:
             df.rolling(window=freq)
 
         # non-integer min_periods
+        msg = (
+            r"local variable 'minp' referenced before assignment|"
+            "min_periods must be an integer"
+        )
         for minp in [1.0, "foo", np.array([1, 2, 3])]:
-            with pytest.raises(ValueError):
+            with pytest.raises(ValueError, match=msg):
                 df.rolling(window="1D", min_periods=minp)
 
         # center is not implemented
-        with pytest.raises(NotImplementedError):
+        msg = "center is not implemented for datetimelike and offset based windows"
+        with pytest.raises(NotImplementedError, match=msg):
             df.rolling(window="1D", center=True)
 
     def test_on(self):
@@ -84,7 +91,11 @@ class TestRollingTS:
         df = self.regular
 
         # not a valid column
-        with pytest.raises(ValueError):
+        msg = (
+            r"invalid on specified as foobar, must be a column "
+            "\\(of DataFrame\\), an Index or None"
+        )
+        with pytest.raises(ValueError, match=msg):
             df.rolling(window="2s", on="foobar")
 
         # column is valid
@@ -93,7 +104,8 @@ class TestRollingTS:
         df.rolling(window="2d", on="C").sum()
 
         # invalid columns
-        with pytest.raises(ValueError):
+        msg = "window must be an integer"
+        with pytest.raises(ValueError, match=msg):
             df.rolling(window="2d", on="B")
 
         # ok even though on non-selected
@@ -125,11 +137,17 @@ class TestRollingTS:
 
         assert not df.index.is_monotonic
 
-        with pytest.raises(ValueError):
+        msg = "index must be monotonic"
+        with pytest.raises(ValueError, match=msg):
             df.rolling("2s").sum()
 
         df = df.reset_index()
-        with pytest.raises(ValueError):
+
+        msg = (
+            r"invalid on specified as A, must be a column "
+            "\\(of DataFrame\\), an Index or None"
+        )
+        with pytest.raises(ValueError, match=msg):
             df.rolling("2s", on="A").sum()
 
     def test_frame_on(self):
@@ -254,7 +272,8 @@ class TestRollingTS:
         )
 
         # closed must be 'right', 'left', 'both', 'neither'
-        with pytest.raises(ValueError):
+        msg = "closed must be 'right', 'left', 'both' or 'neither'"
+        with pytest.raises(ValueError, match=msg):
             self.regular.rolling(window="2s", closed="blabla")
 
         expected = df.copy()
