commit 5600fc16f46194d890ff1b3edfe16bda25a56c32
Author: willpeppo <willpeppo@gmail.com>
Date:   Sat Jun 13 13:04:13 2020 -0400

    DOC: updated strings.py for SS06 errors (#34745)

diff --git a/pandas/core/strings.py b/pandas/core/strings.py
index b27ad744d..a1db77429 100644
--- a/pandas/core/strings.py
+++ b/pandas/core/strings.py
@@ -570,9 +570,9 @@ def str_endswith(arr, pat, na=np.nan):
 
 def str_replace(arr, pat, repl, n=-1, case=None, flags=0, regex=True):
     r"""
-    Replace occurrences of pattern/regex in the Series/Index with
-    some other string. Equivalent to :meth:`str.replace` or
-    :func:`re.sub`, depending on the regex value.
+    Replace each occurrence of pattern/regex in the Series/Index.
+
+    Equivalent to :meth:`str.replace` or :func:`re.sub`, depending on the regex value.
 
     Parameters
     ----------
@@ -1063,6 +1063,8 @@ def str_extract(arr, pat, flags=0, expand=True):
 
 def str_extractall(arr, pat, flags=0):
     r"""
+    Extract capture groups in the regex `pat` as columns in DataFrame.
+
     For each subject string in the Series, extract groups from all
     matches of regular expression pat. When each subject string in the
     Series has exactly one match, extractall(pat).xs(0, level='match')
@@ -1174,7 +1176,9 @@ def str_extractall(arr, pat, flags=0):
 
 def str_get_dummies(arr, sep="|"):
     """
-    Split each string in the Series by sep and return a DataFrame
+    Return DataFrame of dummy/indicator variables for Series.
+
+    Each string in Series is split by sep and returned as a DataFrame
     of dummy/indicator variables.
 
     Parameters
@@ -1743,8 +1747,7 @@ def str_strip(arr, to_strip=None, side="both"):
 
 def str_wrap(arr, width, **kwargs):
     r"""
-    Wrap long strings in the Series/Index to be formatted in
-    paragraphs with length less than a given width.
+    Wrap strings in Series/Index at specified line width.
 
     This method has the same keyword parameters and defaults as
     :class:`textwrap.TextWrapper`.
@@ -1807,6 +1810,7 @@ def str_wrap(arr, width, **kwargs):
 def str_translate(arr, table):
     """
     Map all characters in the string through the given mapping table.
+
     Equivalent to standard :meth:`str.translate`.
 
     Parameters
@@ -1889,6 +1893,7 @@ def str_get(arr, i):
 def str_decode(arr, encoding, errors="strict"):
     """
     Decode character string in the Series/Index using indicated encoding.
+
     Equivalent to :meth:`str.decode` in python2 and :meth:`bytes.decode` in
     python3.
 
@@ -1913,6 +1918,7 @@ def str_decode(arr, encoding, errors="strict"):
 def str_encode(arr, encoding, errors="strict"):
     """
     Encode character string in the Series/Index using indicated encoding.
+
     Equivalent to :meth:`str.encode`.
 
     Parameters
@@ -2068,9 +2074,11 @@ def copy(source):
 
 class StringMethods(NoNewAttributesMixin):
     """
-    Vectorized string functions for Series and Index. NAs stay NA unless
-    handled otherwise by a particular method. Patterned after Python's string
-    methods, with some inspiration from R's stringr package.
+    Vectorized string functions for Series and Index.
+
+    NAs stay NA unless handled otherwise by a particular method.
+    Patterned after Python's string methods, with some inspiration from
+    R's stringr package.
 
     Examples
     --------
@@ -2853,8 +2861,9 @@ class StringMethods(NoNewAttributesMixin):
     _shared_docs[
         "str_pad"
     ] = """
-    Filling %(side)s side of strings in the Series/Index with an
-    additional character. Equivalent to :meth:`str.%(method)s`.
+    Pad %(side)s side of strings in the Series/Index.
+
+    Equivalent to :meth:`str.%(method)s`.
 
     Parameters
     ----------
@@ -3117,9 +3126,11 @@ class StringMethods(NoNewAttributesMixin):
     _shared_docs[
         "find"
     ] = """
-    Return %(side)s indexes in each strings in the Series/Index
-    where the substring is fully contained between [start:end].
-    Return -1 on failure. Equivalent to standard :meth:`str.%(method)s`.
+    Return %(side)s indexes in each strings in the Series/Index.
+
+    Each of returned indexes corresponds to the position where the
+    substring is fully contained between [start:end]. Return -1 on
+    failure. Equivalent to standard :meth:`str.%(method)s`.
 
     Parameters
     ----------
@@ -3169,6 +3180,7 @@ class StringMethods(NoNewAttributesMixin):
     def normalize(self, form):
         """
         Return the Unicode normal form for the strings in the Series/Index.
+
         For more information on the forms, see the
         :func:`unicodedata.normalize`.
 
@@ -3190,10 +3202,13 @@ class StringMethods(NoNewAttributesMixin):
     _shared_docs[
         "index"
     ] = """
-    Return %(side)s indexes in each strings where the substring is
-    fully contained between [start:end]. This is the same as
-    ``str.%(similar)s`` except instead of returning -1, it raises a ValueError
-    when the substring is not found. Equivalent to standard ``str.%(method)s``.
+    Return %(side)s indexes in each string in Series/Index.
+
+    Each of the returned indexes corresponds to the position where the
+    substring is fully contained between [start:end]. This is the same
+    as ``str.%(similar)s`` except instead of returning -1, it raises a
+    ValueError when the substring is not found. Equivalent to standard
+    ``str.%(method)s``.
 
     Parameters
     ----------
@@ -3244,8 +3259,9 @@ class StringMethods(NoNewAttributesMixin):
     _shared_docs[
         "len"
     ] = """
-    Compute the length of each element in the Series/Index. The element may be
-    a sequence (such as a string, tuple or list) or a collection
+    Compute the length of each element in the Series/Index.
+
+    The element may be a sequence (such as a string, tuple or list) or a collection
     (such as a dictionary).
 
     Returns
