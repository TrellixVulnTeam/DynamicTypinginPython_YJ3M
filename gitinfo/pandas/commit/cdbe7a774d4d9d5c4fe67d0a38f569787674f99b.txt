commit cdbe7a774d4d9d5c4fe67d0a38f569787674f99b
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Sep 5 22:53:12 2011 -0400

    TST: test coverage

diff --git a/RELEASE.rst b/RELEASE.rst
index cc63f4e82..370a77bf0 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -49,10 +49,17 @@ Release notes
       invoke methods on groups. e.g. s.groupby(crit).std() will work even though
       `std` is not implemented on the `GroupBy` class
 
-  - Hierarchical / multi-level indexing via the `MultiIndex` class. Integrated
-    `MultiIndex` into `Series` and `DataFrame` fancy indexing, slicing,
-    __getitem__ and __setitem, reindexing, etc. Added `level` keyword argument to
-    `groupby` to enable grouping by a level of a `MultiIndex`
+  - Hierarchical / multi-level indexing
+
+    * New the `MultiIndex` class. Integrated `MultiIndex` into `Series` and
+      `DataFrame` fancy indexing, slicing, __getitem__ and __setitem,
+      reindexing, etc. Added `level` keyword argument to `groupby` to enable
+      grouping by a level of a `MultiIndex`
+
+  - New data reshaping functions: `stack` and `unstack` on DataFrame and Series
+
+    * Integrate with MultiIndex to enable sophisticated reshaping of data
+
   - `Index` objects (labels for axes) are now capable of holding tuples
   - `Series.describe`, `DataFrame.describe`: produces an R-like table of summary
     statistics about each data column
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 20770deda..f852682f8 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2821,7 +2821,7 @@ class DataFrame(NDFrame):
         else:
             return self.dropna(axis=0, subset=specificColumns, thresh=minObs)
 
-    def tapply(self, func):
+    def tapply(self, func):  # pragma: no cover
         """
         Apply func to the transposed DataFrame, results as per apply
         """
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 423a01fef..baa1e6cd6 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -24,7 +24,6 @@ def _indexOp(opname):
         return func(other)
     return wrapper
 
-__DEBUG__ = False
 
 class Index(np.ndarray):
     """
@@ -43,10 +42,6 @@ class Index(np.ndarray):
     An Index instance can **only** contain hashable objects
     """
     def __new__(cls, data, dtype=object, copy=False):
-        if __DEBUG__:
-            import pandas.util.testing as t
-            t.set_trace()
-
         if isinstance(data, np.ndarray):
             subarr = np.array(data, dtype=dtype, copy=copy)
         elif np.isscalar(data):
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 040b72938..a010c0813 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -210,8 +210,10 @@ class _DataFrameIndexer(object):
                     try:
                         return self.frame.xs(key)
                     except (KeyError, TypeError):
-                        pass
-                elif not is_int_index:
+                        if _is_integer_index(self.frame.index.levels[0]):
+                            raise
+
+                if not is_int_index:
                     idx = self.frame.index[key]
 
             if self.frame._is_mixed_type:
diff --git a/pandas/tests/test_common.py b/pandas/tests/test_common.py
index 371dc1c7e..4dfd327c7 100644
--- a/pandas/tests/test_common.py
+++ b/pandas/tests/test_common.py
@@ -1,6 +1,7 @@
-from pandas import Series
+from pandas import Series, DataFrame
 from pandas.core.common import notnull, isnull
 import pandas.core.common as common
+import pandas.util.testing as tm
 
 import numpy as np
 
@@ -28,6 +29,13 @@ def test_isnull():
     assert(isinstance(isnull(float_series), Series))
     assert(isinstance(isnull(obj_series), Series))
 
+    # call on DataFrame
+    df = DataFrame(np.random.randn(10, 5))
+    df['foo'] = 'bar'
+    result = isnull(df)
+    expected = result.apply(isnull)
+    tm.assert_frame_equal(result, expected)
+
 def test_any_none():
     assert(common._any_none(1, 2, 3, None))
     assert(not common._any_none(1, 2, 3, 4))
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 656f413e5..d1dbff2ab 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -508,6 +508,24 @@ class TestGroupBy(unittest.TestCase):
 
         assert_series_equal(result, expected)
 
+    def test_groupby_as_index(self):
+        data = self.df
+
+        grouped = data.groupby(['A'], as_index=False)
+        result = grouped.mean()
+        expected = data.groupby(['A']).mean()
+        expected.insert(0, 'A', expected.index)
+        expected.index = np.arange(len(expected))
+
+        grouped = data.groupby(['A', 'B'], as_index=False)
+        result = grouped.mean()
+        expected = data.groupby(['A', 'B']).mean()
+
+        arrays = zip(*expected.index.get_tuple_index())
+        expected.insert(0, 'A', arrays[0])
+        expected.insert(1, 'B', arrays[1])
+        expected.index = np.arange(len(expected))
+
     def test_groupby_multiple_key(self):
         df = tm.makeTimeDataFrame()
         grouped = df.groupby([lambda x: x.year,
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 22ad4b0c9..a923df51c 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -172,6 +172,14 @@ class TestMultiLevel(unittest.TestCase):
         expected.index = expected.index.droplevel(0)
         assert_frame_equal(result, expected)
 
+        # raises exception
+        self.assertRaises(KeyError, frame.ix.__getitem__, 3)
+
+        # however this will work
+        result = self.frame.ix[2]
+        expected = self.frame.xs(self.frame.index[2])
+        assert_series_equal(result, expected)
+
     def test_getitem_partial(self):
         ymd = self.ymd.T
         result = ymd[2000, 2]
