commit 673436eb0ee68d1273b372c5f9954cd1eff83bc1
Author: Martin Winkel <martin.winkel.pps@gmail.com>
Date:   Fri Dec 6 19:47:57 2019 +0100

    moved mixins to the location where they are used (#30110)

diff --git a/pandas/tests/indexes/test_frozen.py b/pandas/tests/indexes/test_frozen.py
index 9f6b0325b..40f69ee86 100644
--- a/pandas/tests/indexes/test_frozen.py
+++ b/pandas/tests/indexes/test_frozen.py
@@ -1,10 +1,69 @@
+import re
+
 import pytest
 
 from pandas.core.indexes.frozen import FrozenList
-from pandas.tests.test_base import CheckImmutable, CheckStringMixin
 
 
-class TestFrozenList(CheckImmutable, CheckStringMixin):
+class CheckImmutableMixin:
+    mutable_regex = re.compile("does not support mutable operations")
+
+    def check_mutable_error(self, *args, **kwargs):
+        # Pass whatever function you normally would to pytest.raises
+        # (after the Exception kind).
+        with pytest.raises(TypeError):
+            self.mutable_regex(*args, **kwargs)
+
+    def test_no_mutable_funcs(self):
+        def setitem():
+            self.container[0] = 5
+
+        self.check_mutable_error(setitem)
+
+        def setslice():
+            self.container[1:2] = 3
+
+        self.check_mutable_error(setslice)
+
+        def delitem():
+            del self.container[0]
+
+        self.check_mutable_error(delitem)
+
+        def delslice():
+            del self.container[0:3]
+
+        self.check_mutable_error(delslice)
+        mutable_methods = getattr(self, "mutable_methods", [])
+
+        for meth in mutable_methods:
+            self.check_mutable_error(getattr(self.container, meth))
+
+    def test_slicing_maintains_type(self):
+        result = self.container[1:2]
+        expected = self.lst[1:2]
+        self.check_result(result, expected)
+
+    def check_result(self, result, expected, klass=None):
+        klass = klass or self.klass
+        assert isinstance(result, klass)
+        assert result == expected
+
+
+class CheckStringMixin:
+    def test_string_methods_dont_fail(self):
+        repr(self.container)
+        str(self.container)
+        bytes(self.container)
+
+    def test_tricky_container(self):
+        if not hasattr(self, "unicode_container"):
+            pytest.skip("Need unicode_container to test with this")
+        repr(self.unicode_container)
+        str(self.unicode_container)
+
+
+class TestFrozenList(CheckImmutableMixin, CheckStringMixin):
     mutable_methods = ("extend", "pop", "remove", "insert")
     unicode_container = FrozenList(["\u05d0", "\u05d1", "c"])
 
diff --git a/pandas/tests/test_base.py b/pandas/tests/test_base.py
index 5c9a11940..6e5f5b729 100644
--- a/pandas/tests/test_base.py
+++ b/pandas/tests/test_base.py
@@ -1,6 +1,5 @@
 from datetime import datetime, timedelta
 from io import StringIO
-import re
 import sys
 
 import numpy as np
@@ -40,64 +39,6 @@ from pandas.core.indexes.datetimelike import DatetimeIndexOpsMixin
 import pandas.util.testing as tm
 
 
-class CheckStringMixin:
-    def test_string_methods_dont_fail(self):
-        repr(self.container)
-        str(self.container)
-        bytes(self.container)
-
-    def test_tricky_container(self):
-        if not hasattr(self, "unicode_container"):
-            pytest.skip("Need unicode_container to test with this")
-        repr(self.unicode_container)
-        str(self.unicode_container)
-
-
-class CheckImmutable:
-    mutable_regex = re.compile("does not support mutable operations")
-
-    def check_mutable_error(self, *args, **kwargs):
-        # Pass whatever function you normally would to pytest.raises
-        # (after the Exception kind).
-        with pytest.raises(TypeError):
-            self.mutable_regex(*args, **kwargs)
-
-    def test_no_mutable_funcs(self):
-        def setitem():
-            self.container[0] = 5
-
-        self.check_mutable_error(setitem)
-
-        def setslice():
-            self.container[1:2] = 3
-
-        self.check_mutable_error(setslice)
-
-        def delitem():
-            del self.container[0]
-
-        self.check_mutable_error(delitem)
-
-        def delslice():
-            del self.container[0:3]
-
-        self.check_mutable_error(delslice)
-        mutable_methods = getattr(self, "mutable_methods", [])
-
-        for meth in mutable_methods:
-            self.check_mutable_error(getattr(self.container, meth))
-
-    def test_slicing_maintains_type(self):
-        result = self.container[1:2]
-        expected = self.lst[1:2]
-        self.check_result(result, expected)
-
-    def check_result(self, result, expected, klass=None):
-        klass = klass or self.klass
-        assert isinstance(result, klass)
-        assert result == expected
-
-
 class TestPandasDelegate:
     class Delegator:
         _properties = ["foo"]
