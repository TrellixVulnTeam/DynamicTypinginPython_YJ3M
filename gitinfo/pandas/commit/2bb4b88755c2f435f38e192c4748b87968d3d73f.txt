commit 2bb4b88755c2f435f38e192c4748b87968d3d73f
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jan 19 20:18:36 2012 -0500

    BUG: be less aggressive with type conversion in lib.map_infer

diff --git a/pandas/src/inference.pyx b/pandas/src/inference.pyx
index 309a8f116..edacd8f24 100644
--- a/pandas/src/inference.pyx
+++ b/pandas/src/inference.pyx
@@ -216,7 +216,7 @@ def maybe_convert_numeric(ndarray[object] values, set na_values):
             floats[i] = nan
             seen_float = 1
         else:
-            fval = float(val)
+            fval = util.floatify(val)
             floats[i] = fval
             if not seen_float:
                 if '.' in val:
@@ -229,7 +229,7 @@ def maybe_convert_numeric(ndarray[object] values, set na_values):
     else:
         return ints
 
-def maybe_convert_objects(ndarray[object] objects):
+def maybe_convert_objects(ndarray[object] objects, bint try_float=1):
     '''
     Type inference function-- convert object array to proper dtype
     '''
@@ -273,13 +273,13 @@ def maybe_convert_objects(ndarray[object] objects):
         elif util.is_float_object(val):
             floats[i] = val
             seen_float = 1
-        elif not util.is_string_object(val):
+        elif try_float and not util.is_string_object(val):
             # this will convert Decimal objects
             try:
                 floats[i] = float(val)
                 seen_float = 1
             except Exception:
-                pass
+                seen_object = 1
         else:
             seen_object = 1
 
@@ -402,7 +402,7 @@ def map_infer(ndarray arr, object f):
         result[i] = f(val)
         PyArray_ITER_NEXT(it)
 
-    return maybe_convert_objects(result)
+    return maybe_convert_objects(result, try_float=0)
 
 def to_object_array(list rows):
     cdef:
diff --git a/pandas/src/numpy_helper.h b/pandas/src/numpy_helper.h
index 10cc9bc21..56106803b 100644
--- a/pandas/src/numpy_helper.h
+++ b/pandas/src/numpy_helper.h
@@ -98,6 +98,15 @@ get_c_string(PyObject* obj) {
 //   return PyString_Check(obj);
 // #endif
 
+PANDAS_INLINE PyObject* floatify(PyObject* str) {
+
+#if PY_VERSION_HEX >= 0x03000000
+  return PyFloat_FromString(str);
+#else
+  return PyFloat_FromString(str, NULL);
+#endif
+
+}
 
 
 // PANDAS_INLINE PyObject*
diff --git a/pandas/src/util.pxd b/pandas/src/util.pxd
index da75ff98e..12fe0d6dc 100644
--- a/pandas/src/util.pxd
+++ b/pandas/src/util.pxd
@@ -9,6 +9,7 @@ cdef extern from "numpy_helper.h":
     inline int assign_value_1d(ndarray, Py_ssize_t, object) except -1
     inline object get_value_1d(ndarray, Py_ssize_t)
     inline char *get_c_string(object)
+    inline object floatify(object)
 
 cdef inline object get_value_at(ndarray arr, object loc):
     cdef:
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 332ffed59..fa3104316 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1601,6 +1601,13 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         self.assert_(isnull(merged['d']))
         self.assert_(not isnull(merged['c']))
 
+    def test_map_decimal(self):
+        from decimal import Decimal
+
+        result = self.series.map(Decimal)
+        self.assert_(result.dtype == np.object_)
+        self.assert_(isinstance(result[0], Decimal))
+
     def test_apply(self):
         assert_series_equal(self.ts.apply(np.sqrt), np.sqrt(self.ts))
 
diff --git a/vb_suite/pandas_vb_common.py b/vb_suite/pandas_vb_common.py
index da74bfaa5..6009f2940 100644
--- a/vb_suite/pandas_vb_common.py
+++ b/vb_suite/pandas_vb_common.py
@@ -1,6 +1,7 @@
 from pandas import *
 from pandas.util.testing import rands
 from datetime import timedelta
+from numpy.random import randn
 import pandas.util.testing as tm
 import random
 import numpy as np
diff --git a/vb_suite/suite.py b/vb_suite/suite.py
index a8f922cd1..673e6cf2d 100644
--- a/vb_suite/suite.py
+++ b/vb_suite/suite.py
@@ -6,7 +6,7 @@ import os
 modules = ['groupby', 'indexing', 'reindex',
            'sparse', 'index_object', 'miscellaneous',
            'stat_ops', 'join_merge', 'panel_ctor', 'frame_ctor',
-           'frame_methods']
+           'frame_methods', 'io']
 
 by_module = {}
 benchmarks = []
