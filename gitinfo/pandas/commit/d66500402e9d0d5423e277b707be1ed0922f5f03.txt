commit d66500402e9d0d5423e277b707be1ed0922f5f03
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Dec 11 18:47:59 2011 -0500

    BUG: exclude NAs also with dtype=object in nanmean, others, GH #469

diff --git a/RELEASE.rst b/RELEASE.rst
index f8639a0b2..deab83e04 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -85,6 +85,7 @@ Thanks
 - Jev Kuznetsov
 - Wouter Overmeire
 - Fernando Perez
+- Nathan Pinger
 - Christian Prinoth
 - Joon Ro
 - Chang She
diff --git a/pandas/core/nanops.py b/pandas/core/nanops.py
index 58c1120c0..b1f90b4ce 100644
--- a/pandas/core/nanops.py
+++ b/pandas/core/nanops.py
@@ -10,43 +10,36 @@ except ImportError:  # pragma: no cover
     _USE_BOTTLENECK = False
 
 def nansum(values, axis=None, skipna=True, copy=True):
-    if values.dtype == np.object_:
-        the_sum = values.sum(axis)
-    else:
-        mask = isnull(values)
+    mask = isnull(values)
 
-        if skipna and not issubclass(values.dtype.type, np.integer):
-            if copy:
-                values = values.copy()
-            np.putmask(values, mask, 0)
+    if skipna and not issubclass(values.dtype.type, np.integer):
+        if copy:
+            values = values.copy()
+        np.putmask(values, mask, 0)
 
-        the_sum = values.sum(axis)
-        the_sum = _maybe_null_out(the_sum, axis, mask)
+    the_sum = values.sum(axis)
+    the_sum = _maybe_null_out(the_sum, axis, mask)
 
     return the_sum
 
 def nanmean(values, axis=None, skipna=True, copy=True):
-    if values.dtype == np.object_:
-        the_mean = values.sum(axis) / float(values.shape[axis])
-    else:
-        mask = isnull(values)
-
-        if skipna and not issubclass(values.dtype.type, np.integer):
-            if copy:
-                values = values.copy()
-            np.putmask(values, mask, 0)
+    mask = isnull(values)
 
-        the_sum = values.sum(axis)
-        count = _get_counts(mask, axis)
+    if skipna and not issubclass(values.dtype.type, np.integer):
+        if copy:
+            values = values.copy()
+        np.putmask(values, mask, 0)
 
-        if axis is not None:
-            the_mean = the_sum / count
-            ct_mask = count == 0
-            if ct_mask.any():
-                the_mean[ct_mask] = np.nan
-        else:
-            the_mean = the_sum / count if count > 0 else np.nan
+    the_sum = values.sum(axis)
+    count = _get_counts(mask, axis)
 
+    if axis is not None:
+        the_mean = the_sum / count
+        ct_mask = count == 0
+        if ct_mask.any():
+            the_mean[ct_mask] = np.nan
+    else:
+        the_mean = the_sum / count if count > 0 else np.nan
     return the_mean
 
 def nanmedian(values, axis=None, skipna=True, copy=True):
@@ -121,7 +114,8 @@ def nanmin(values, axis=None, skipna=True, copy=True):
     # numpy 1.6.1 workaround in Python 3.x
     if values.dtype == np.object_:  # pragma: no cover
         import __builtin__
-        result = np.apply_along_axis(__builtin__.min, axis, values)
+        apply_ax = axis if axis is not None else 0
+        result = np.apply_along_axis(__builtin__.min, apply_ax, values)
     else:
         result = values.min(axis)
 
@@ -136,7 +130,8 @@ def nanmax(values, axis=None, skipna=True, copy=True):
     # numpy 1.6.1 workaround in Python 3.x
     if values.dtype == np.object_:  # pragma: no cover
         import __builtin__
-        result = np.apply_along_axis(__builtin__.max, axis, values)
+        apply_ax = axis if axis is not None else 0
+        result = np.apply_along_axis(__builtin__.max, apply_ax, values)
     else:
         result = values.max(axis)
     return _maybe_null_out(result, axis, mask)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index dca639449..480699e20 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3234,7 +3234,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
     def test_sum(self):
         self._check_stat_op('sum', np.sum, has_numeric_only=True)
 
-    def test_stat_ops_attempt_obj_array(self):
+    def test_stat_operators_attempt_obj_array(self):
         data = {
             'a': [-0.00049987540199591344, -0.0016467257772919831,
                    0.00067695870775883013],
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 6bd827ef4..6c4aa1d4c 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -603,6 +603,10 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         allna = self.series * nan
         self.assert_(np.isnan(f(allna)))
 
+        # dtype=object with None, it works!
+        s = Series([1, 2, 3, None, 5])
+        f(s)
+
     def _check_accum_op(self, name):
         func = getattr(np, name)
         self.assert_(np.array_equal(func(self.ts), func(np.array(self.ts))))
