commit a406a4a1be3e14eb00b1e3792b5d7e340ac0aae0
Author: Takafumi Arakaki <aka.tkf@gmail.com>
Date:   Fri Apr 20 23:38:04 2012 +0200

    ENH: treat complex number in maybe_convert_objects

diff --git a/pandas/src/inference.pyx b/pandas/src/inference.pyx
index 3b23de6ea..20b31707a 100644
--- a/pandas/src/inference.pyx
+++ b/pandas/src/inference.pyx
@@ -270,9 +270,11 @@ def maybe_convert_objects(ndarray[object] objects, bint try_float=0,
     cdef:
         Py_ssize_t i, n
         ndarray[float64_t] floats
+        ndarray[complex64_t] complexes
         ndarray[int64_t] ints
         ndarray[uint8_t] bools
         bint seen_float = 0
+        bint seen_complex = 0
         bint seen_int = 0
         bint seen_bool = 0
         bint seen_object = 0
@@ -283,6 +285,7 @@ def maybe_convert_objects(ndarray[object] objects, bint try_float=0,
     n = len(objects)
 
     floats = np.empty(n, dtype='f8')
+    complexes = np.empty(n, dtype='c8')
     ints = np.empty(n, dtype='i8')
     bools = np.empty(n, dtype=np.uint8)
 
@@ -294,7 +297,7 @@ def maybe_convert_objects(ndarray[object] objects, bint try_float=0,
 
         if val is None:
             seen_null = 1
-            floats[i] = fnan
+            floats[i] = complexes[i] = fnan
         elif util.is_bool_object(val):
             seen_bool = 1
             bools[i] = val
@@ -305,15 +308,20 @@ def maybe_convert_objects(ndarray[object] objects, bint try_float=0,
         elif util.is_integer_object(val):
             seen_int = 1
             floats[i] = <float64_t> val
+            complexes[i] = <double complex> val
             if not seen_null:
                 ints[i] = val
         elif util.is_float_object(val):
-            floats[i] = val
+            floats[i] = complexes[i] = val
             seen_float = 1
+        elif util.is_complex_object(val):
+            complexes[i] = val
+            seen_complex = 1
         elif try_float and not util.is_string_object(val):
             # this will convert Decimal objects
             try:
                 floats[i] = float(val)
+                complexes[i] = complex(val)
                 seen_float = 1
             except Exception:
                 seen_object = 1
@@ -323,14 +331,19 @@ def maybe_convert_objects(ndarray[object] objects, bint try_float=0,
     if not safe:
         if seen_null:
             if (seen_float or seen_int) and not seen_object:
-                return floats
+                if seen_complex:
+                    return complexes
+                else:
+                    return floats
             else:
                 return objects
         else:
             if seen_object:
                 return objects
             elif not seen_bool:
-                if seen_float:
+                if seen_complex:
+                    return complexes
+                elif seen_float:
                     return floats
                 elif seen_int:
                     return ints
@@ -343,7 +356,10 @@ def maybe_convert_objects(ndarray[object] objects, bint try_float=0,
         # don't cast int to float, etc.
         if seen_null:
             if (seen_float or seen_int) and not seen_object:
-                return floats
+                if seen_complex:
+                    return complexes
+                else:
+                    return floats
             else:
                 return objects
         else:
@@ -352,6 +368,8 @@ def maybe_convert_objects(ndarray[object] objects, bint try_float=0,
             elif not seen_bool:
                 if seen_int and seen_float:
                     return objects
+                elif seen_complex:
+                    return complexes
                 elif seen_float:
                     return floats
                 elif seen_int:
diff --git a/pandas/src/numpy_helper.h b/pandas/src/numpy_helper.h
index b2fecfdd7..b63835119 100644
--- a/pandas/src/numpy_helper.h
+++ b/pandas/src/numpy_helper.h
@@ -64,6 +64,10 @@ PANDAS_INLINE int
 is_float_object(PyObject* obj) {
   return (PyFloat_Check(obj) || PyArray_IsScalar(obj, Floating));
 }
+PANDAS_INLINE int
+is_complex_object(PyObject* obj) {
+  return (PyComplex_Check(obj) || PyArray_IsScalar(obj, ComplexFloating));
+}
 
 PANDAS_INLINE int
 is_bool_object(PyObject* obj) {
diff --git a/pandas/src/util.pxd b/pandas/src/util.pxd
index 22d7c7896..3ebd72cc8 100644
--- a/pandas/src/util.pxd
+++ b/pandas/src/util.pxd
@@ -4,6 +4,7 @@ cimport numpy as cnp
 cdef extern from "numpy_helper.h":
     inline int is_integer_object(object)
     inline int is_float_object(object)
+    inline int is_complex_object(object)
     inline int is_bool_object(object)
     inline int is_string_object(object)
     inline int is_datetime64_object(object)
diff --git a/pandas/tests/test_tseries.py b/pandas/tests/test_tseries.py
index d9ddf63fe..a25dc6005 100644
--- a/pandas/tests/test_tseries.py
+++ b/pandas/tests/test_tseries.py
@@ -208,6 +208,13 @@ def test_convert_objects_ints():
         result = lib.maybe_convert_objects(arr)
         assert(issubclass(result.dtype.type, np.integer))
 
+def test_convert_objects_complex_number():
+    for dtype in np.sctypes['complex']:
+        arr = np.array(list(1j * np.arange(20, dtype=dtype)), dtype='O')
+        assert(arr[0].dtype == np.dtype(dtype))
+        result = lib.maybe_convert_objects(arr)
+        assert(issubclass(result.dtype.type, np.complexfloating))
+
 def test_rank():
     from pandas.compat.scipy import rankdata
 
