commit 85b75f94b33bfafa1a8b4b54371da1906259f041
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Jan 11 20:03:19 2012 -0500

    TST: test both with and without bottleneck, GH #91

diff --git a/RELEASE.rst b/RELEASE.rst
index e32a70341..fd34ff4ac 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -126,6 +126,8 @@ pandas 0.7.0
     #477)
   - Improve DataFrame.to_string and console formatting to be more consistent in
     the number of displayed digits (GH #395)
+  - Use bottleneck if available for performing NaN-friendly statistical
+    operations that it implemented (GH #91)
 
 **Bug fixes**
 
@@ -182,6 +184,7 @@ pandas 0.7.0
     keywords passed
   - Fix exception caused by parser converter returning strings (GH #583)
   - Fix MultiIndex formatting bug with integer names (GH #601)
+  - Fix bug in handling of non-numeric aggregates in Series.groupby (GH #612)
 
 Thanks
 ------
@@ -189,6 +192,7 @@ Thanks
 - Marius Cobzarenco
 - Mario Gamboa-Cavazos
 - Arthur Gerigk
+- Yaroslav Halchenko
 - Matt Harrison
 - Andreas Hilboll
 - Luc Kesters
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 535fcf04c..c70c6f38a 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -641,6 +641,13 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         s2[5:8] = np.nan
         assert_almost_equal(s.sum(), s2.sum())
 
+        import pandas.core.nanops as nanops
+        arr = np.random.randn(100, 100).astype('f4')
+        arr[:, 2] = np.inf
+        res = nanops.nansum(arr, axis=1)
+        expected = nanops._nansum(arr, axis=1)
+        assert_almost_equal(res, expected)
+
     def test_mean(self):
         self._check_stat_op('mean', np.mean)
 
@@ -686,33 +693,46 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
 
     def _check_stat_op(self, name, alternate, check_objects=False):
         from pandas import DateRange
+        import pandas.core.nanops as nanops
 
-        f = getattr(Series, name)
+        def testit():
+            f = getattr(Series, name)
 
-        # add some NaNs
-        self.series[5:15] = np.NaN
+            # add some NaNs
+            self.series[5:15] = np.NaN
 
-        # skipna or no
-        self.assert_(notnull(f(self.series)))
-        self.assert_(isnull(f(self.series, skipna=False)))
+            # skipna or no
+            self.assert_(notnull(f(self.series)))
+            self.assert_(isnull(f(self.series, skipna=False)))
 
-        # check the result is correct
-        nona = self.series.dropna()
-        assert_almost_equal(f(nona), alternate(nona))
+            # check the result is correct
+            nona = self.series.dropna()
+            assert_almost_equal(f(nona), alternate(nona))
+
+            allna = self.series * nan
+            self.assert_(np.isnan(f(allna)))
+
+            # dtype=object with None, it works!
+            s = Series([1, 2, 3, None, 5])
+            f(s)
+
+            # check DateRange
+            if check_objects:
+                s = Series(DateRange('1/1/2000', periods=10))
+                res = f(s)
+                exp = alternate(s)
+                self.assertEqual(res, exp)
+
+        testit()
+
+        try:
+            import bottleneck as bn
+            nanops._USE_BOTTLENECK = False
+            testit()
+            nanops._USE_BOTTLENECK = True
+        except ImportError:
+            pass
 
-        allna = self.series * nan
-        self.assert_(np.isnan(f(allna)))
-
-        # dtype=object with None, it works!
-        s = Series([1, 2, 3, None, 5])
-        f(s)
-
-        # check DateRange
-        if check_objects:
-            s = Series(DateRange('1/1/2000', periods=10))
-            res = f(s)
-            exp = alternate(s)
-            self.assertEqual(res, exp)
 
     def _check_accum_op(self, name):
         func = getattr(np, name)
