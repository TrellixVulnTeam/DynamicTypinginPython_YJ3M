commit b5b06cf7615a8c8f956aa80ef023a3748e786df5
Author: ajcr <ajcriley@gmail.com>
Date:   Wed Sep 2 23:34:45 2015 +0100

    BUG: DataFrame constructor should not promote complex64 dtypes (GH10952)

diff --git a/doc/source/whatsnew/v0.17.0.txt b/doc/source/whatsnew/v0.17.0.txt
index 4acd77222..26fcf5636 100644
--- a/doc/source/whatsnew/v0.17.0.txt
+++ b/doc/source/whatsnew/v0.17.0.txt
@@ -641,6 +641,7 @@ Other API Changes
 - Allow ``DataFrame`` with ``MultiIndex`` columns to be written to Excel (:issue:`10564`). This was changed in 0.16.2 as the read-back method could not always guarantee perfect fidelity (:issue:`9794`).
 - ``groupby`` using ``Categorical`` follows the same rule as ``Categorical.unique`` described above  (:issue:`10508`)
 - Improved error message when concatenating an empty iterable of dataframes (:issue:`9157`)
+- When constructing ``DataFrame`` with an array of ``complex64`` dtype that meant the corresponding column was automatically promoted to the ``complex128`` dtype. Pandas will now preserve the itemsize of the input for complex data (:issue:`10952`)
 
 - ``NaT``'s methods now either raise ``ValueError``, or return ``np.nan`` or ``NaT`` (:issue:`9513`)
 
@@ -866,4 +867,3 @@ Bug Fixes
 - Bug in plotting functions may raise ``IndexError`` when plotted on ``GridSpec`` (:issue:`10819`)
 - Bug in plot result may show unnecessary minor ticklabels (:issue:`10657`)
 - Bug in ``groupby`` incorrect computation for aggregation on ``DataFrame`` with ``NaT`` (E.g ``first``, ``last``, ``min``). (:issue:`10590`)
-- Bug when constructing ``DataFrame`` where passing a dictionary with only scalar values and specifying columns did not raise an error (:issue:`10856`)
\ No newline at end of file
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index f110e28e8..5366c5a6b 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -3657,8 +3657,7 @@ def form_blocks(arrays, names, axes):
         blocks.extend(float_blocks)
 
     if len(complex_items):
-        complex_blocks = _simple_blockify(
-            complex_items, np.complex128)
+        complex_blocks = _multi_blockify(complex_items)
         blocks.extend(complex_blocks)
 
     if len(int_items):
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 9bdb7f08f..659a5925b 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2668,6 +2668,15 @@ class TestDataFrame(tm.TestCase, CheckIndexing,
         df     = _make_mixed_dtypes_df('int')
         _check_mixed_dtypes(df)
 
+    def test_constructor_complex_dtypes(self):
+        # GH10952
+        a = np.random.rand(10).astype(np.complex64)
+        b = np.random.rand(10).astype(np.complex128)
+
+        df = DataFrame({'a': a, 'b': b})
+        self.assertEqual(a.dtype, df.a.dtype)
+        self.assertEqual(b.dtype, df.b.dtype)
+
     def test_constructor_rec(self):
         rec = self.frame.to_records(index=False)
 
