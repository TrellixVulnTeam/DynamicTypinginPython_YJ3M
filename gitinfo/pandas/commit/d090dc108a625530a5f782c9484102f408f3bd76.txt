commit d090dc108a625530a5f782c9484102f408f3bd76
Author: Skipper Seabold <jsseabold@gmail.com>
Date:   Tue May 14 15:35:48 2013 -0400

    ENH/DOC: Allow levels=None for Categorical

diff --git a/pandas/core/categorical.py b/pandas/core/categorical.py
index 251b8a4a4..16a577a88 100644
--- a/pandas/core/categorical.py
+++ b/pandas/core/categorical.py
@@ -32,27 +32,68 @@ class Categorical(object):
     Parameters
     ----------
     labels : ndarray of integers
-        The integer at label `i` is the index of the level for that label.
-        I.e., the level at labels[i] is levels[labels[i]].
-        for which this lab
-    levels : Index-like (unique)
-        The unique levels for each label.
+        If levels is given, the integer at label `i` is the index of the level
+        for that label. I.e., the level at labels[i] is levels[labels[i]].
+        Otherwise, if levels is None, these are just the labels and the levels
+        are assumed to be the unique labels. See from_array.
+    levels : Index-like (unique), optional
+        The unique levels for each label. If not given, the levels are assumed
+        to be the unique values of labels.
     name : str, optional
-        Name for the Categorical variable.
+        Name for the Categorical variable. If levels is None, will attempt
+        try to be inferred from labels.
 
     Returns
     -------
     **Attributes**
       * labels : ndarray
       * levels : ndarray
+
+    Examples
+    --------
+    >>> from pandas import Categorical
+    >>> Categorical([0, 1, 2, 0, 1, 2], [1, 2, 3])
+    Categorical:
+    array([1, 2, 3, 1, 2, 3])
+    Levels (3): Int64Index([1, 2, 3])
+
+    >>> Categorical([0,1,2,0,1,2], ['a', 'b', 'c'])
+    Categorical:
+    array(['a', 'b', 'c', 'a', 'b', 'c'], dtype=object)
+    Levels (3): Index(['a', 'b', 'c'], dtype=object)
+
+    >>> Categorical(['a', 'b', 'c', 'a', 'b', 'c'])
+    Categorical:
+    array(['a', 'b', 'c', 'a', 'b', 'c'], dtype=object)
+    Levels (3): Index(['a', 'b', 'c'], dtype=object)
     """
-    def __init__(self, labels, levels, name=None):
+    def __init__(self, labels, levels=None, name=None):
+        if levels is None:
+            if name is None:
+                name = getattr(labels, 'name', None)
+            if isinstance(labels, Index) and hasattr(labels, 'factorize'):
+                labels, levels = labels.factorize()
+            else:
+                try:
+                    labels, levels = factorize(labels, sort=True)
+                except TypeError:
+                    labels, levels = factorize(labels, sort=False)
+
         self.labels = labels
         self.levels = levels
         self.name = name
 
     @classmethod
     def from_array(cls, data):
+        """
+        Make a Categorical type from a single array-like object.
+
+        Parameters
+        ----------
+        data : array-like
+            Can be an Index or array-like. The levels are assumed to be
+            the unique values of `data`.
+        """
         if isinstance(data, Index) and hasattr(data, 'factorize'):
             labels, levels = data.factorize()
         else:
