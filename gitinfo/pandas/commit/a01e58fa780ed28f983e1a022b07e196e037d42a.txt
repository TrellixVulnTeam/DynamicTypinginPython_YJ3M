commit a01e58fa780ed28f983e1a022b07e196e037d42a
Author: sinhrks <sinhrks@gmail.com>
Date:   Thu Aug 18 18:26:27 2016 -0400

    BUG: ufunc with PeriodIndex may raise IncompatibleFrequency
    
    Author: sinhrks <sinhrks@gmail.com>
    
    Closes #13980 from sinhrks/period_numpy_ufunc and squashes the following commits:
    
    f94d027 [sinhrks] BUG: ufunc with PeriodIndex may raise IncompatibleFrequency

diff --git a/doc/source/whatsnew/v0.19.0.txt b/doc/source/whatsnew/v0.19.0.txt
index 9ac265a20..c7f0beb43 100644
--- a/doc/source/whatsnew/v0.19.0.txt
+++ b/doc/source/whatsnew/v0.19.0.txt
@@ -1065,6 +1065,7 @@ Bug Fixes
 - Bug in ``concat`` and ``groupby`` for hierarchical frames with ``RangeIndex`` levels (:issue:`13542`).
 
 - Bug in ``agg()`` function on groupby dataframe changes dtype of ``datetime64[ns]`` column to ``float64`` (:issue:`12821`)
+- Bug in using NumPy ufunc with ``PeriodIndex`` to add or subtract integer raise ``IncompatibleFrequency``. Note that using standard operator like ``+`` or ``-`` is recommended, because standard operators use more efficient path (:issue:`13980`)
 
 - Bug in operations on ``NaT`` returning ``float`` instead of ``datetime64[ns]`` (:issue:`12941`)
 
diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index 36bb941e8..9b2fa705d 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -359,9 +359,15 @@ class PeriodIndex(DatelikeOps, DatetimeIndexOpsMixin, Int64Index):
         if isinstance(context, tuple) and len(context) > 0:
             func = context[0]
             if (func is np.add):
-                return self._add_delta(context[1][1])
+                try:
+                    return self._add_delta(context[1][1])
+                except IncompatibleFrequency:
+                    raise TypeError
             elif (func is np.subtract):
-                return self._add_delta(-context[1][1])
+                try:
+                    return self._add_delta(-context[1][1])
+                except IncompatibleFrequency:
+                    raise TypeError
             elif isinstance(func, np.ufunc):
                 if 'M->M' not in func.types:
                     msg = "ufunc '{0}' not supported for the PeriodIndex"
@@ -371,7 +377,7 @@ class PeriodIndex(DatelikeOps, DatetimeIndexOpsMixin, Int64Index):
 
         if is_bool_dtype(result):
             return result
-        return PeriodIndex(result, freq=self.freq, name=self.name)
+        return self._shallow_copy(result)
 
     @property
     def _box_func(self):
@@ -628,6 +634,11 @@ class PeriodIndex(DatelikeOps, DatetimeIndexOpsMixin, Int64Index):
                     offset_nanos = tslib._delta_to_nanoseconds(offset)
                     if (nanos % offset_nanos).all() == 0:
                         return nanos // offset_nanos
+        elif is_integer(other):
+            # integer is passed to .shift via
+            # _add_datetimelike_methods basically
+            # but ufunc may pass integer to _add_delta
+            return other
         # raise when input doesn't have freq
         msg = "Input has different freq from PeriodIndex(freq={0})"
         raise IncompatibleFrequency(msg.format(self.freqstr))
diff --git a/pandas/tseries/tests/test_base.py b/pandas/tseries/tests/test_base.py
index 45a5feec7..0d6c991f0 100644
--- a/pandas/tseries/tests/test_base.py
+++ b/pandas/tseries/tests/test_base.py
@@ -1758,12 +1758,11 @@ class TestPeriodIndexOps(Ops):
         idx1 = PeriodIndex([], freq='D')
         idx2 = PeriodIndex(['2011-01-01'], freq='D')
         idx3 = PeriodIndex(['2011-01-01', '2011-01-02'], freq='D')
-        idx4 = PeriodIndex(
-            ['2011-01-01', '2011-01-02', '2011-01-03'], freq='D')
+        idx4 = PeriodIndex(['2011-01-01', '2011-01-02', '2011-01-03'],
+                           freq='D')
         idx5 = PeriodIndex(['2011', '2012', '2013'], freq='A')
-        idx6 = PeriodIndex(
-            ['2011-01-01 09:00', '2012-02-01 10:00', 'NaT'], freq='H')
-
+        idx6 = PeriodIndex(['2011-01-01 09:00', '2012-02-01 10:00',
+                            'NaT'], freq='H')
         idx7 = pd.period_range('2013Q1', periods=1, freq="Q")
         idx8 = pd.period_range('2013Q1', periods=2, freq="Q")
         idx9 = pd.period_range('2013Q1', periods=3, freq="Q")
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index 5e13d80a7..fe6dcf69e 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -4140,6 +4140,7 @@ class TestPeriodIndexSeriesMethods(tm.TestCase):
         s = pd.Series(idx)
 
         msg = "unsupported operand type\(s\)"
+
         for obj in [idx, s]:
             for ng in ["str", 1.5]:
                 with tm.assertRaisesRegexp(TypeError, msg):
@@ -4152,6 +4153,20 @@ class TestPeriodIndexSeriesMethods(tm.TestCase):
                 with tm.assertRaisesRegexp(TypeError, msg):
                     obj - ng
 
+            # ToDo: currently, it accepts float because PeriodIndex.values
+            # is internally int. Should be fixed after GH13988
+            # msg is different depending on NumPy version
+            if not _np_version_under1p9:
+                for ng in ["str"]:
+                    with tm.assertRaises(TypeError):
+                        np.add(obj, ng)
+
+                    with tm.assertRaises(TypeError):
+                        np.add(ng, obj)
+
+                    with tm.assertRaises(TypeError):
+                            np.subtract(ng, obj)
+
     def test_pi_ops_nat(self):
         idx = PeriodIndex(['2011-01', '2011-02', 'NaT',
                            '2011-04'], freq='M', name='idx')
@@ -4159,8 +4174,22 @@ class TestPeriodIndexSeriesMethods(tm.TestCase):
                                 'NaT', '2011-06'], freq='M', name='idx')
         self._check(idx, lambda x: x + 2, expected)
         self._check(idx, lambda x: 2 + x, expected)
+        self._check(idx, lambda x: np.add(x, 2), expected)
 
         self._check(idx + 2, lambda x: x - 2, idx)
+        self._check(idx + 2, lambda x: np.subtract(x, 2), idx)
+
+        # freq with mult
+        idx = PeriodIndex(['2011-01', '2011-02', 'NaT',
+                           '2011-04'], freq='2M', name='idx')
+        expected = PeriodIndex(['2011-07', '2011-08',
+                                'NaT', '2011-10'], freq='2M', name='idx')
+        self._check(idx, lambda x: x + 3, expected)
+        self._check(idx, lambda x: 3 + x, expected)
+        self._check(idx, lambda x: np.add(x, 3), expected)
+
+        self._check(idx + 3, lambda x: x - 3, idx)
+        self._check(idx + 3, lambda x: np.subtract(x, 3), idx)
 
     def test_pi_ops_array_int(self):
         idx = PeriodIndex(['2011-01', '2011-02', 'NaT',
