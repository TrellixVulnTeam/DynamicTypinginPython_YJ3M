commit 5e9c40442e2aafde5caaa07bf5e8a950127c99da
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jun 7 21:50:50 2010 +0000

    lowered version, spot of code reformatting
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@191 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/doc/source/index.rst b/doc/source/index.rst
index 543bd93ee..ba95a3b8a 100755
--- a/doc/source/index.rst
+++ b/doc/source/index.rst
@@ -54,6 +54,9 @@ User manual
 
 **Code Repository:** http://pandas.googlecode.com
 
+**Pardon the dust, documentation will be updated frequently in the
+coming weeks and months but will be incomplete in many places.**
+
 Library documentation
 ~~~~~~~~~~~~~~~~~~~~~
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index f85232b66..d983ad08c 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1171,7 +1171,12 @@ class DataFrame(Picklable, Groupable):
             results[k] = func(target[k])
 
         if hasattr(results.values()[0], '__iter__'):
-            return self._constructor(data=results, index=target.index)
+            result = self._constructor(data=results, index=target.index)
+
+            if axis == 1:
+                result = result.T
+
+            return result
         else:
             return Series(results, index=agg_index)
 
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index e2d941e42..d834046da 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -1353,16 +1353,25 @@ class TestDataFrame(unittest.TestCase):
 
         assert_series_equal(cumsum['A'], np.cumsum(self.tsframe['A'].fill(0)))
 
-        df = DataFrame({'A' : np.arange(20)}, index=np.arange(20))
+        df = self.klass({'A' : np.arange(20)}, index=np.arange(20))
 
         # works
         result = df.cumsum()
 
+        # fix issue
+        cumsum_xs = self.tsframe.cumsum(axis=1)
+        self.assertEqual(np.shape(cumsum_xs), np.shape(self.tsframe))
+
     def test_cumprod(self):
         cumprod = self.tsframe.cumprod()
 
         assert_series_equal(cumprod['A'],
                             np.cumprod(self.tsframe['A'].fill(1)))
 
+        # fix issue
+        cumprod_xs = self.tsframe.cumprod(axis=1)
+        self.assertEqual(np.shape(cumprod_xs), np.shape(self.tsframe))
+
 if __name__ == '__main__':
     unittest.main()
+
diff --git a/pandas/stats/interface.py b/pandas/stats/interface.py
index eb0dead5e..2a91c7b02 100644
--- a/pandas/stats/interface.py
+++ b/pandas/stats/interface.py
@@ -51,7 +51,7 @@ def ols(**kwargs):
     The appropriate OLS object, which allows you to obtain betas and various
     statistics, such as std err, t-stat, etc.
 
-    Example
+    Examples
     --------
     # Run simple OLS.
     result = ols(y=y, x=x)
diff --git a/pandas/stats/moments.py b/pandas/stats/moments.py
index a22c55820..af443b1a4 100644
--- a/pandas/stats/moments.py
+++ b/pandas/stats/moments.py
@@ -182,8 +182,7 @@ def _getMinPeriods(minPct, rho):
 
     return int(np.ceil(np.log(minPct) / np.log(rho)))
 
-def _ewmoment(values, func, min_periods=None, minPct=0.95,
-              biasCorrection=None):
+def _ewmoment(values, func, min_periods=None, biasCorrection=None):
     """
     Generic rolling exponential moment function using blended accumulator
     method.
@@ -197,10 +196,6 @@ def _ewmoment(values, func, min_periods=None, minPct=0.95,
     biasCorrection : float
         Optional bias correction
 
-    ** Mutually exclusive options **
-
-    minPct : float
-        Minimum percentage of weight "in window" to require to have a value
     min_periods : int, optional
         require a particular number of periods "in window" to compute statistic
         If provided, overrides the minPct argument
@@ -368,14 +363,14 @@ def ewmcov(seriesA, seriesB, com, minCom=0, correctBias=True):
     cleanSeriesA = seriesA[okLocs]
     cleanSeriesB = seriesB.reindex(cleanSeriesA.index)
 
-    XY = ewma(cleanSeriesA * cleanSeriesB, com = com, minCom = minCom)
-    X  = ewma(cleanSeriesA, com = com, minCom = minCom)
-    Y  = ewma(cleanSeriesB, com = com, minCom = minCom)
+    XY = ewma(cleanSeriesA * cleanSeriesB, com=com, minCom=minCom)
+    X  = ewma(cleanSeriesA, com=com, minCom=minCom)
+    Y  = ewma(cleanSeriesB, com=com, minCom=minCom)
 
     return biasCorrection * (XY - X * Y)
 
 
-def ewmcorr(seriesA, seriesB, com, minCom = 0):
+def ewmcorr(seriesA, seriesB, com, minCom=0):
     """
     Calculates a rolling exponentially weighted moving correlation of
     2 series.
@@ -406,12 +401,11 @@ def ewmcorr(seriesA, seriesB, com, minCom = 0):
     cleanSeriesA = seriesA[okLocs]
     cleanSeriesB = seriesB.reindex(cleanSeriesA.index)
 
-    XY = ewma(cleanSeriesA * cleanSeriesB, com = com, minCom = minCom)
-    X  = ewma(cleanSeriesA, com = com, minCom = minCom)
-    Y  = ewma(cleanSeriesB, com = com, minCom = minCom)
-    varX = ewmvar(cleanSeriesA, com = com, minCom = minCom, correctBias = False)
-    varY = ewmvar(cleanSeriesB, com = com, minCom = minCom, correctBias = False)
-
+    XY = ewma(cleanSeriesA * cleanSeriesB, com=com, minCom=minCom)
+    X  = ewma(cleanSeriesA, com=com, minCom=minCom)
+    Y  = ewma(cleanSeriesB, com=com, minCom=minCom)
+    varX = ewmvar(cleanSeriesA, com=com, minCom=minCom, correctBias=False)
+    varY = ewmvar(cleanSeriesB, com=com, minCom=minCom, correctBias=False)
 
-    return (XY - X * Y) / np.sqrt( varX * varY )
+    return (XY - X * Y) / np.sqrt(varX * varY)
 
diff --git a/pandas/stats/ols.py b/pandas/stats/ols.py
index f57b42f09..4ce978df8 100644
--- a/pandas/stats/ols.py
+++ b/pandas/stats/ols.py
@@ -180,7 +180,8 @@ class OLS(object):
         The equations can be passed as either a single string or a
         list of strings.
 
-        Examples:
+        Examples
+        --------
         o = ols(...)
         o.f_test('1*x1+2*x2=0,1*x3=0')
         o.f_test(['1*x1+2*x2=0','1*x3=0'])
diff --git a/pandas/version.py b/pandas/version.py
index dc4075dc6..2988238b8 100644
--- a/pandas/version.py
+++ b/pandas/version.py
@@ -1,17 +1,17 @@
-# THIS FILE IS GENERATED FROM PANDAS setup.py
-short_version='0.3.0'
-version='0.3.0'
-release=False
-
-if not release:
-    version += '.dev'
-    import os
-    svn_version_file = os.path.join(os.path.dirname(__file__),
-                                    '__svn_version__.py')
-    if os.path.isfile(svn_version_file):
-        import imp
-        svn = imp.load_module('pandas.__svn_version__',
-                              open(svn_version_file),
-                              svn_version_file,
-                              ('.py','U',1))
-        version += svn.version
+# THIS FILE IS GENERATED FROM PANDAS setup.py
+short_version='0.2.1'
+version='0.2.1'
+release=False
+
+if not release:
+    version += '.dev'
+    import os
+    svn_version_file = os.path.join(os.path.dirname(__file__),
+                                    '__svn_version__.py')
+    if os.path.isfile(svn_version_file):
+        import imp
+        svn = imp.load_module('pandas.__svn_version__',
+                              open(svn_version_file),
+                              svn_version_file,
+                              ('.py','U',1))
+        version += svn.version
diff --git a/setup.py b/setup.py
index fedfa4db4..1a14062fe 100644
--- a/setup.py
+++ b/setup.py
@@ -49,8 +49,8 @@ CLASSIFIERS = [
 ]
 
 MAJOR = 0
-MINOR = 3
-MICRO = 0
+MINOR = 2
+MICRO = 1
 ISRELEASED = False
 VERSION = '%d.%d.%d' % (MAJOR, MINOR, MICRO)
 
