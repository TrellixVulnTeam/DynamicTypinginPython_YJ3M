commit f49052837799bb6826271d028e2e8a681ef4d9e1
Author: tshauck <trent.hauck@gmail.com>
Date:   Sun Sep 30 10:16:39 2012 -0500

    Allow DataFrame.update to accept non DataFrame object and attempt to coerce.

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 43419c2fe..91005ead0 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -3395,7 +3395,7 @@ class DataFrame(NDFrame):
 
         Parameters
         ----------
-        other : DataFrame
+        other : DataFrame, or object coercible into a DataFrame
         join : {'left', 'right', 'outer', 'inner'}, default 'left'
         overwrite : boolean, default True
             If True then overwrite values for common keys in the calling frame
@@ -3409,7 +3409,11 @@ class DataFrame(NDFrame):
         if join != 'left':
             raise NotImplementedError
 
+        if not isinstance(other, DataFrame):
+            other = DataFrame(other)
+
         other = other.reindex_like(self)
+
         for col in self.columns:
             this = self[col].values
             that = other[col].values
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index fd2f3fb85..60490d6b5 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -5784,6 +5784,11 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
                               [1.5, nan, 7.]])
         assert_frame_equal(df, expected)
 
+
+
+
+
+
     def test_update_nooverwrite(self):
         df = DataFrame([[1.5, nan, 3.],
                         [1.5, nan, 3.],
@@ -5830,6 +5835,27 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         np.testing.assert_raises(Exception, df.update, *(other,),
                 **{'raise_conflict' : True})
 
+    def test_update_from_non_df(self):
+        d = {'a': Series([1, 2, 3, 4]), 'b': Series([5, 6, 7, 8])}
+        df = DataFrame(d)
+
+        d['a'] = Series([5, 6, 7, 8])
+        df.update(d)
+
+        expected = DataFrame(d)
+
+        assert_frame_equal(df, expected)
+
+        d = {'a': [1, 2, 3, 4], 'b': [5, 6, 7, 8]}
+        df = DataFrame(d)
+
+        d['a'] = [5, 6, 7, 8]
+        df.update(d)
+
+        expected = DataFrame(d)
+
+        assert_frame_equal(df, expected)
+
     def test_combineAdd(self):
         # trivial
         comb = self.frame.combineAdd(self.frame)
