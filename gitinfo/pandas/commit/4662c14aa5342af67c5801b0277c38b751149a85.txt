commit 4662c14aa5342af67c5801b0277c38b751149a85
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Oct 19 18:19:18 2011 -0400

    ENH: add Series.histogram, address GH #240

diff --git a/pandas/core/series.py b/pandas/core/series.py
index 494d188e6..4e04fca30 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -592,6 +592,21 @@ copy : boolean, default False
 
         return Series(result, index=level_index)
 
+    def histogram(self):
+        """
+        Returns Series containing counts of unique values. The result Series's
+        index will be the sorted unique values
+
+        Returns
+        -------
+        histogram : Series
+        """
+        from collections import defaultdict
+        counter = defaultdict(lambda: 0)
+        for value in self.values:
+            counter[value] += 1
+        return Series(counter)
+
     def sum(self, axis=0, dtype=None, out=None, skipna=True):
         """
         Sum of values
@@ -881,12 +896,12 @@ copy : boolean, default False
         """
         if self.dtype == object:
             names = ['count', 'unique', 'top', 'freq']
-            
+
             objcounts = Counter(self)
             top, freq = objcounts.most_common(1)[0]
             data = [self.count(), len(objcounts), top, freq]
-            
-        else:    
+
+        else:
             names = ['count', 'mean', 'std', 'min',
                      '25%', '50%', '75%', 'max']
 
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 9a4ce0584..b6214fc94 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -759,6 +759,17 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
 
         self.assertEqual(self.ts.count(), np.isfinite(self.ts).sum())
 
+    def test_histogram(self):
+        s = Series(['a', 'b', 'b', 'b', 'a', 'c', 'd', 'd', 'a'])
+        hist = s.histogram()
+        expected = Series([3, 3, 1, 2], index=['a', 'b', 'c', 'd'])
+        assert_series_equal(hist, expected)
+
+        s = Series({})
+        hist = s.histogram()
+        expected = Series([])
+        assert_series_equal(hist, expected)
+
     def test_sort(self):
         ts = self.ts.copy()
         ts.sort()
