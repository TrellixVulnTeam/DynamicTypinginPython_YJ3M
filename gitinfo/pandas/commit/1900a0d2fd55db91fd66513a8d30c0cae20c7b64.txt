commit 1900a0d2fd55db91fd66513a8d30c0cae20c7b64
Author: Adam Klein <adamklein@gmail.com>
Date:   Mon Jan 2 17:33:11 2012 -0500

    100% sparse coverage

diff --git a/pandas/sparse/frame.py b/pandas/sparse/frame.py
index 974dd44df..7d598752a 100644
--- a/pandas/sparse/frame.py
+++ b/pandas/sparse/frame.py
@@ -525,14 +525,10 @@ class SparseDataFrame(DataFrame):
 
     def _join_compat(self, other, on=None, how='left', lsuffix='', rsuffix=''):
         if on is not None:
-            return self._join_on(other, on, how, lsuffix, rsuffix)
+            raise NotImplementedError
         else:
             return self._join_index(other, how, lsuffix, rsuffix)
 
-    def _join_on(self, other, on, how, lsuffix, rsuffix):
-        # need to implement?
-        raise NotImplementedError
-
     def _join_index(self, other, how, lsuffix, rsuffix):
         if isinstance(other, Series):
             assert(other.name is not None)
diff --git a/pandas/sparse/tests/test_sparse.py b/pandas/sparse/tests/test_sparse.py
index 1339392e1..69d0242e4 100644
--- a/pandas/sparse/tests/test_sparse.py
+++ b/pandas/sparse/tests/test_sparse.py
@@ -492,6 +492,9 @@ class TestSparseSeries(TestCase,
             expected = expected.reindex(int_indices2).fillna(fill_value)
             assert_almost_equal(expected.values, reindexed.sp_values)
 
+            # make sure level argument asserts
+            expected = expected.reindex(int_indices2).fillna(fill_value)
+
         def _check_with_fill_value(values, first, second, fill_value=nan):
             i_index1 = IntIndex(length, first)
             i_index2 = IntIndex(length, second)
@@ -718,6 +721,9 @@ class TestSparseDataFrame(TestCase, test_frame.SafeForSparse):
         reindexed = self.frame.reindex(idx)
         assert_sp_frame_equal(cons, reindexed)
 
+        # assert level parameter breaks reindex
+        self.assertRaises(Exception, self.frame.reindex, idx, level=0)
+
     def test_constructor_ndarray(self):
         # no index or columns
         sp = SparseDataFrame(self.frame.values)
@@ -727,6 +733,10 @@ class TestSparseDataFrame(TestCase, test_frame.SafeForSparse):
                              columns=['A'])
         assert_sp_frame_equal(sp, self.frame.reindex(columns=['A']))
 
+        # raise on level argument
+        self.assertRaises(Exception, self.frame.reindex, columns=['A'],
+                          level=1)
+
         # wrong length index / columns
         self.assertRaises(Exception, SparseDataFrame, self.frame.values,
                           index=self.frame.index[:-1])
