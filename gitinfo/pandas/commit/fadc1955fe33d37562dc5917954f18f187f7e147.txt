commit fadc1955fe33d37562dc5917954f18f187f7e147
Author: Phillip Cloud <cpcloud@gmail.com>
Date:   Mon Feb 17 20:49:09 2014 -0500

    BUG: ChainMap m parameter only exists in Python 3.4
    
    So backport that as well.

diff --git a/pandas/compat/chainmap.py b/pandas/compat/chainmap.py
index d61d04415..9edd2ef05 100644
--- a/pandas/compat/chainmap.py
+++ b/pandas/compat/chainmap.py
@@ -1,7 +1,7 @@
 try:
     from collections import ChainMap
 except ImportError:
-    from chainmap_impl import ChainMap
+    from pandas.compat.chainmap_impl import ChainMap
 
 
 class DeepChainMap(ChainMap):
@@ -18,3 +18,9 @@ class DeepChainMap(ChainMap):
                 del mapping[key]
                 return
         raise KeyError(key)
+
+    # override because the m parameter is introduced in Python 3.4
+    def new_child(self, m=None):
+        if m is None:
+            m = {}
+        return self.__class__(m, *self.maps)
diff --git a/pandas/compat/chainmap_impl.py b/pandas/compat/chainmap_impl.py
index 1110831d5..92d242405 100644
--- a/pandas/compat/chainmap_impl.py
+++ b/pandas/compat/chainmap_impl.py
@@ -1,5 +1,9 @@
 from collections import MutableMapping
-from thread import get_ident
+
+try:
+    from thread import get_ident
+except ImportError:
+    from _thread import get_ident
 
 
 def recursive_repr(fillvalue='...'):
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index dcdd5408c..ad02cdb4f 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -59,6 +59,7 @@ def create_tempfile(path):
     """ create an unopened named temporary file """
     return os.path.join(tempfile.gettempdir(),path)
 
+
 @contextmanager
 def ensure_clean_store(path, mode='a', complevel=None, complib=None,
               fletcher32=False):
@@ -77,6 +78,7 @@ def ensure_clean_store(path, mode='a', complevel=None, complib=None,
         if mode == 'w' or mode == 'a':
             safe_remove(path)
 
+
 @contextmanager
 def ensure_clean_path(path):
     """
@@ -95,6 +97,7 @@ def ensure_clean_path(path):
         for f in filenames:
             safe_remove(f)
 
+
 # set these parameters so we don't have file sharing
 tables.parameters.MAX_NUMEXPR_THREADS = 1
 tables.parameters.MAX_BLOSC_THREADS   = 1
@@ -256,7 +259,6 @@ class TestHDFStore(tm.TestCase):
             self.assertRaises(TypeError, df.to_hdf, path,'df',append=True,format='foo')
             self.assertRaises(TypeError, df.to_hdf, path,'df',append=False,format='bar')
 
-
     def test_api_default_format(self):
 
         # default_format option
@@ -2257,7 +2259,6 @@ class TestHDFStore(tm.TestCase):
             expected = wp.reindex(major_axis=wp.major_axis-wp.major_axis[np.arange(0,20,3)])
             assert_panel_equal(result, expected)
 
-
     def test_remove_crit(self):
 
         with ensure_clean_store(self.path) as store:
@@ -2517,7 +2518,7 @@ class TestHDFStore(tm.TestCase):
                 result = store.select('wp', [('minor_axis','=',['A','B'])])
             expected = wp.loc[:,:,['A','B']]
             assert_panel_equal(result, expected)
-            
+
     def test_same_name_scoping(self):
 
         with ensure_clean_store(self.path) as store:
@@ -3323,6 +3324,8 @@ class TestHDFStore(tm.TestCase):
             date = df.index[len(df) // 2]
 
             crit1 = Term('index>=date')
+            self.assertEqual(crit1.env.scope['date'], date)
+
             crit2 = ("columns=['A', 'D']")
             crit3 = ('columns=A')
 
@@ -3776,7 +3779,6 @@ class TestHDFStore(tm.TestCase):
             self.assertRaises(ValueError, store.select_as_multiple,
                               ['df1','df3'], where=['A>0', 'B>0'], selector='df1')
 
-
     def test_nan_selection_bug_4858(self):
 
         # GH 4858; nan selection bug, only works for pytables >= 3.1
@@ -4227,6 +4229,7 @@ class TestHDFStore(tm.TestCase):
             result = store.select('test', 'a = "test & test"')
         tm.assert_frame_equal(expected, result)
 
+
 def _test_sort(obj):
     if isinstance(obj, DataFrame):
         return obj.reindex(sorted(obj.index))
