commit 31af0525345b287b1dd39267ed78754534273e60
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jun 14 20:33:54 2012 -0400

    ENH: condense DataFrame.pivot into set_index/unstack for speedup

diff --git a/pandas/core/categorical.py b/pandas/core/categorical.py
index 7ab1ebb73..0a3313109 100644
--- a/pandas/core/categorical.py
+++ b/pandas/core/categorical.py
@@ -52,7 +52,8 @@ class Categorical(object):
         except TypeError:
             labels, levels, _ = factorize(data, sort=False)
 
-        return Categorical(labels, levels)
+        return Categorical(labels, levels,
+                           name=getattr(data, 'name', None))
 
     _levels = None
     def _set_levels(self, levels):
diff --git a/pandas/core/index.py b/pandas/core/index.py
index d4d12fada..acfb55341 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1503,15 +1503,14 @@ class MultiIndex(Index):
             name = None if names is None else names[0]
             return Index(arrays[0], name=name)
 
-        levels = []
-        labels = []
-        for arr in arrays:
-            factor = Categorical.from_array(arr)
-            levels.append(factor.levels)
-            labels.append(factor.labels)
-
-        return MultiIndex(levels=levels, labels=labels, sortorder=sortorder,
-                          names=names)
+        cats = [Categorical.from_array(arr) for arr in arrays]
+        levels = [c.levels for c in cats]
+        labels = [c.labels for c in cats]
+        if names is None:
+            names = [c.name for c in cats]
+
+        return MultiIndex(levels=levels, labels=labels,
+                          sortorder=sortorder, names=names)
 
     @classmethod
     def from_tuples(cls, tuples, sortorder=None, names=None):
diff --git a/pandas/core/reshape.py b/pandas/core/reshape.py
index 30ddcb29f..a4ce1aa89 100644
--- a/pandas/core/reshape.py
+++ b/pandas/core/reshape.py
@@ -283,27 +283,13 @@ def pivot(self, index=None, columns=None, values=None):
     """
     See DataFrame.pivot
     """
-    index_vals = self[index]
-    column_vals = self[columns]
-    mindex = MultiIndex.from_arrays([index_vals, column_vals],
-                                    names=[index, columns])
-
     if values is None:
-        items = self.columns - [index, columns]
-        mat = self.reindex(columns=items).values
+        indexed = self.set_index([index, columns])
+        return indexed.unstack(columns)
     else:
-        items = [values]
-        mat = np.atleast_2d(self[values].values).T
-
-    stacked = DataFrame(mat, index=mindex, columns=items)
-
-    if not mindex.is_lexsorted():
-        stacked = stacked.sortlevel(level=0)
-
-    unstacked = stacked.unstack()
-    if values is not None:
-        unstacked.columns = unstacked.columns.droplevel(0)
-    return unstacked
+        indexed = Series(self[values],
+                         index=[self[index], self[columns]])
+        return indexed.unstack(columns)
 
 def pivot_simple(index, columns, values):
     """
