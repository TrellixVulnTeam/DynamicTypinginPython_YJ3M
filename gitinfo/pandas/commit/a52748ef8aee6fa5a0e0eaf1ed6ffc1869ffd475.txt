commit a52748ef8aee6fa5a0e0eaf1ed6ffc1869ffd475
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Mar 1 04:57:45 2010 +0000

    further test coverage (technically 100%) for frame.py and matrix.py
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@132 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index eccc70a62..311b35f8e 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1352,18 +1352,20 @@ class DataFrame(Picklable, Groupable):
         c   1
         d   0
         """
-        if len(other.index) == 0:
-            return self
-
-        if on not in self:
-            raise Exception('%s column not contained in this frame!' % on)
-
         # Check for column overlap
         overlap = set(self.cols()) & set(other.cols())
 
         if overlap:
             raise Exception('Columns overlap: %s' % sorted(overlap))
 
+        if len(other.index) == 0:
+            result = self.copy()
+
+            for col in other:
+                result[col] = np.NaN
+
+            return result
+
         fillVec, mask = tseries.getMergeVec(self[on], other.index.indexMap)
 
         newSeries = {}
@@ -1401,7 +1403,7 @@ class DataFrame(Picklable, Groupable):
             s = self[col]
             plot(s.index, s, label=col)
 
-    def _get_axis(self, axis_num):
+    def _get_agg_axis(self, axis_num):
         if axis_num == 0:
             return self.columns
         elif axis_num == 1:
@@ -1429,7 +1431,7 @@ class DataFrame(Picklable, Groupable):
             f = lambda s: notnull(s).sum()
             theCount = self.apply(f, axis=axis)
 
-        return Series(theCount, index=self._get_axis(axis))
+        return Series(theCount, index=self._get_agg_axis(axis))
 
     def sum(self, axis=0):
         """
@@ -1469,7 +1471,7 @@ class DataFrame(Picklable, Groupable):
         except Exception:
             theSum = self.apply(np.sum, axis=axis)
 
-        return Series(theSum, index=self._get_axis(axis))
+        return Series(theSum, index=self._get_agg_axis(axis))
 
     def cumsum(self, axis=0):
         """
@@ -1543,7 +1545,7 @@ class DataFrame(Picklable, Groupable):
         except Exception:
             theProd = self.apply(np.prod, axis=axis)
 
-        return Series(theProd, index=self._get_axis(axis))
+        return Series(theProd, index=self._get_agg_axis(axis))
 
     def mean(self, axis=0):
         """
@@ -1683,7 +1685,7 @@ class DataFrame(Picklable, Groupable):
 
         theVar = (XX - X**2 / count) / (count - 1)
 
-        return Series(theVar, index=self._get_axis(axis))
+        return Series(theVar, index=self._get_agg_axis(axis))
 
     def std(self, axis=0):
         """
@@ -1724,5 +1726,5 @@ class DataFrame(Picklable, Groupable):
 
         theSkew = (np.sqrt((count**2-count))*C) / ((count-2)*np.sqrt(B)**3)
 
-        return Series(theSkew, index=self._get_axis(axis))
+        return Series(theSkew, index=self._get_agg_axis(axis))
 
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index f0371a60f..ba82a50dd 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -50,10 +50,27 @@ class DataMatrix(DataFrame):
              values, objects) = self._initDict(data, index, columns, objects,
                                                dtype)
         elif isinstance(data, np.ndarray):
-            (index, columns,
-             values, objects) = self._initMatrix(data, index, columns, objects,
-                                                 dtype)
+            (index, columns, values) = self._initMatrix(data, index,
+                                                        columns, dtype)
+
+            if objects is not None:
+                if isinstance(objects, DataMatrix):
+                    if objects.index is not index:
+                        objects = objects.reindex(index)
+                else:
+                    objects = DataMatrix(objects, index=index)
+
         elif data is None:
+            # this is a touch convoluted...
+            if objects is not None:
+                if isinstance(objects, DataMatrix):
+                    if index is not None and objects.index is not index:
+                        objects = objects.reindex(index)
+                else:
+                    objects = DataMatrix(objects, index=index)
+
+                index = objects.index
+
             if index is None:
                 N = 0
                 index = NULL_INDEX
@@ -68,17 +85,9 @@ class DataMatrix(DataFrame):
 
             values = np.empty((N, K), dtype=dtype)
             values[:] = NaN
-
         else:
             raise Exception('DataMatrix constructor not properly called!')
 
-        if objects is not None:
-            if isinstance(objects, DataMatrix):
-                if objects.index is not index:
-                    self.objects = objects.reindex(index)
-            else:
-                objects = DataMatrix(objects, index=index)
-
         self.values = values
         self.index = index
         self.columns = columns
@@ -167,7 +176,7 @@ class DataMatrix(DataFrame):
 
         return index, columns, values, objects
 
-    def _initMatrix(self, data, index, columns, objects, dtype):
+    def _initMatrix(self, data, index, columns, dtype):
         if data.ndim == 1:
             N = data.shape[0]
             if N == 0:
@@ -199,7 +208,7 @@ class DataMatrix(DataFrame):
             else:
                 raise Exception('Must pass columns!')
 
-        return index, columns, values, objects
+        return index, columns, values
 
     @property
     def _constructor(self):
@@ -780,10 +789,7 @@ class DataMatrix(DataFrame):
 
             # Constant of some kind
             newCols = self.columns
-            try:
-                resultMatrix = func(self.values, other)
-            except Exception:
-                raise Exception('Bad operator value: %s' % other)
+            resultMatrix = func(self.values, other)
 
         # TODO: deal with objects
         return DataMatrix(resultMatrix, index=newIndex, columns=newCols)
@@ -1259,29 +1265,42 @@ class DataMatrix(DataFrame):
         try:
             results = results.astype(self.values.dtype)
         except Exception:
-            return DataFrame.fromMatrix(results, self.columns, self.index)
-        return DataMatrix(data=results, index=self.index, columns=self.columns)
+            pass
 
-    def append(self, otherFrame):
-        if not otherFrame:
+        return DataMatrix(results, index=self.index, columns=self.columns)
+
+    def append(self, other):
+        """
+        Glue together DataFrame objects having non-overlapping indices
+
+        Parameters
+        ----------
+        other : DataFrame
+        """
+        if not other:
             return self
         if not self:
-            return otherFrame
-        if (isinstance(otherFrame, DataMatrix) and
-            list(self.columns) == list(otherFrame.columns)):
-
-            idx = Index(np.concatenate([self.index, otherFrame.index]))
-            mat = np.vstack((self.values, otherFrame.values))
-            dm = DataMatrix(mat, idx, self.columns)
-            if otherFrame.objects is None:
-                dm.objects = self.objects
+            return other
+        if (isinstance(other, DataMatrix) and
+            self.columns.equals(other.columns)):
+
+            idx = Index(np.concatenate([self.index, other.index]))
+            mat = np.vstack((self.values, other.values))
+
+            if other.objects is None:
+                objects = self.objects
             elif self.objects is None:
-                dm.objects = otherFrame.objects
+                objects = other.objects
             else:
-                dm.objects = self.objects.append(otherFrame.objects)
+                objects = self.objects.append(other.objects)
+
+            if objects:
+                objects = objects.reindex(idx)
+
+            dm = DataMatrix(mat, idx, self.columns, objects=objects)
             return dm
         else:
-            return super(DataMatrix, self).append(otherFrame)
+            return super(DataMatrix, self).append(other)
 
     def outerJoin(self, *frames):
         """
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index 109b8c6c1..880392cbb 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -150,6 +150,11 @@ class TestDataFrame(unittest.TestCase):
         self.assertRaises(Exception, self.klass, mat, index=[1])
         self.assertRaises(Exception, self.klass, mat, columns=['A', 'B', 'C'])
 
+    def test_pickle(self):
+        import cPickle as pickle
+
+        unpickled = pickle.loads(pickle.dumps(self.mixed_frame))
+        assert_frame_equal(self.mixed_frame, unpickled)
 
     def test_toDict(self):
         test_data = {
@@ -176,6 +181,15 @@ class TestDataFrame(unittest.TestCase):
         records = indexed_frame.toRecords()
         self.assertEqual(len(records.dtype.names), 3)
 
+    def test_get_agg_axis(self):
+        cols = self.frame._get_agg_axis(0)
+        self.assert_(list(cols) == list(self.frame.columns))
+
+        idx = self.frame._get_agg_axis(1)
+        self.assert_(idx is self.frame.index)
+
+        self.assertRaises(Exception, self.frame._get_agg_axis, 2)
+
     def test_nonzero(self):
         self.assertFalse(self.empty)
 
@@ -475,6 +489,16 @@ class TestDataFrame(unittest.TestCase):
         partial_appended = end_frame.append(begin_frame)
         self.assert_('A' in partial_appended)
 
+        # mixed type handling
+        appended = self.mixed_frame[:5].append(self.mixed_frame[5:])
+        assert_frame_equal(appended, self.mixed_frame)
+
+        # what to test here
+        mixed_appended = self.mixed_frame[:5].append(self.frame[5:])
+        mixed_appended2 = self.frame[:5].append(self.mixed_frame[5:])
+
+        assert_frame_equal(mixed_appended, mixed_appended2)
+
     def test_asfreq(self):
         offset_monthly = self.tsframe.asfreq(datetools.bmonthEnd)
         rule_monthly = self.tsframe.asfreq('EOM')
@@ -694,6 +718,10 @@ class TestDataFrame(unittest.TestCase):
         self.assert_(np.isnan(newFrame['E']).all())
         self.assert_('C' not in newFrame)
 
+        # length zero
+        newFrame = self.frame.reindex(columns=[])
+        self.assert_(not newFrame)
+
     def test_reindex_mixed(self):
         pass
 
@@ -735,6 +763,10 @@ class TestDataFrame(unittest.TestCase):
         shiftedSeries = self.tsframe['A'].shift(-5)
         assert_series_equal(shiftedFrame['A'], shiftedSeries)
 
+        # shift by 0
+        unshifted = self.tsframe.shift(0)
+        assert_frame_equal(unshifted, self.tsframe)
+
         # shift by DateOffset
         shiftedFrame = self.tsframe.shift(5, offset=datetools.BDay())
         self.assert_(len(shiftedFrame) == len(self.tsframe))
@@ -763,11 +795,11 @@ class TestDataFrame(unittest.TestCase):
         self.assertEqual(tapplied[d], np.mean(self.frame.getXS(d)))
 
     def test_applymap(self):
-        f = lambda x: x * 2
-        applied = self.frame.applymap(f)
-
+        applied = self.frame.applymap(lambda x: x * 2)
         assert_frame_equal(applied, self.frame * 2)
 
+        result = self.frame.applymap(type)
+
     def test_groupby(self):
         grouped = self.tsframe.groupby(lambda x: x.weekday())
 
@@ -942,7 +974,15 @@ class TestDataFrame(unittest.TestCase):
 
         # Test when some are missing
 
-        # corner case
+        # corner cases
+
+        # nothing to merge
+        merged = target.merge(source[:0], on='C')
+
+        # overlap
+        source_copy = source.copy()
+        source_copy['A'] = 0
+        self.assertRaises(Exception, target.merge, source_copy, on='A')
 
     def test_statistics(self):
         sumFrame = self.frame.apply(np.sum)
diff --git a/pandas/core/tests/test_matrix.py b/pandas/core/tests/test_matrix.py
index 90dfdb817..b8dd696ad 100644
--- a/pandas/core/tests/test_matrix.py
+++ b/pandas/core/tests/test_matrix.py
@@ -36,6 +36,29 @@ class TestDataMatrix(test_frame.TestDataFrame):
         # corner, silly
         self.assertRaises(Exception, self.klass, (1, 2, 3))
 
+    def test_constructor_with_objects(self):
+        index = self.mixed_frame.index[:5]
+
+        dm = DataMatrix(data=None, index=index,
+                        objects=self.mixed_frame.objects)
+        self.assert_(dm.index is index)
+        self.assert_(dm.objects.index is index)
+
+        dm = DataMatrix(data=None, index=index,
+                        objects=self.mixed_frame.objects._series)
+        self.assert_(dm.index is index)
+        self.assert_(dm.objects.index is index)
+
+        index = self.mixed_frame.index
+        dm = DataMatrix(data=None, index=index,
+                        objects=self.mixed_frame.objects)
+        self.assert_(dm.index is index)
+        self.assert_(dm.objects.index is index)
+
+        index = self.mixed_frame.index
+        dm = DataMatrix(objects=self.mixed_frame.objects)
+        self.assert_(dm.index is self.mixed_frame.index)
+
     def test_copy(self):
         # copy objects
         copy = self.mixed_frame.copy()
@@ -68,6 +91,19 @@ class TestDataMatrix(test_frame.TestDataFrame):
         df[datetime.now()] = 'date'
         df[datetime.now()] = 5.
 
+        # what to do when empty frame with index
+        dm = DataMatrix(index=self.frame.index)
+        dm['A'] = 'foo'
+        dm['B'] = 'bar'
+        self.assertEqual(len(dm.objects.columns), 2)
+
+        dm['C'] = 1
+        self.assertEqual(len(dm.columns), 1)
+
+        # set existing column
+        dm['A'] = 'bar'
+        self.assertEqual('bar', dm['A'][0])
+
     def test_more_fromDict(self):
         pass
 
