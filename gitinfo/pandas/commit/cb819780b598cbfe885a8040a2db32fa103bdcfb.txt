commit cb819780b598cbfe885a8040a2db32fa103bdcfb
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Oct 21 14:08:59 2011 -0400

    ENH: implement Panel.rename_axis, GH #243

diff --git a/RELEASE.rst b/RELEASE.rst
index 4accf2ade..df1b5cf8d 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -119,6 +119,8 @@ feedback on the library.
     #253)
   - Can use & and | to intersection / union Index objects, respectively (GH
     #261)
+  - Added `pivot_table` convenience function to pandas namespace (GH #234)
+  - Implemented `Panel.rename_axis` function (GH #243)
 
 **Improvements to existing features**
 
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 715c91a99..2d6ec55c6 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -531,3 +531,4 @@ def _asarray_tuplesafe(values, dtype=None):
         result[:] = values
 
     return result
+
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index b8f54e867..7386a987c 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1474,27 +1474,14 @@ class DataFrame(NDFrame):
         -------
         renamed : DataFrame (new object)
         """
-        if isinstance(index, (dict, Series)):
-            def index_f(x):
-                if x in index:
-                    return index[x]
-                else:
-                    return x
-        else:
-            index_f = index
-
-        if isinstance(columns, (dict, Series)):
-            def columns_f(x):
-                if x in columns:
-                    return columns[x]
-                else:
-                    return x
-        else:
-            columns_f = columns
+        from pandas.core.series import _get_rename_function
 
         if index is None and columns is None:
             raise Exception('must pass either index or columns')
 
+        index_f = _get_rename_function(index)
+        columns_f = _get_rename_function(columns)
+
         self._consolidate_inplace()
 
         result = self.copy(deep=copy)
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index be61619b7..c108201f5 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -458,3 +458,40 @@ class NDFrame(PandasObject):
         """
         new_data = self._data.add_suffix(suffix)
         return self._constructor(new_data)
+
+    def rename_axis(self, mapper, axis=0, copy=True):
+        """
+        Alter index and / or columns using input function or
+        functions. Function / dict values must be unique (1-to-1). Labels not
+        contained in a dict / Series will be left as-is.
+
+        Parameters
+        ----------
+        index : dict-like or function, optional
+            Transformation to apply to index values
+        columns : dict-like or function, optional
+            Transformation to apply to column values
+        copy : boolean, default True
+            Also copy underlying data
+
+        See also
+        --------
+        Series.rename
+
+        Returns
+        -------
+        renamed : DataFrame (new object)
+        """
+        # should move this at some point
+        from pandas.core.series import _get_rename_function
+
+        mapper_f = _get_rename_function(mapper)
+
+        if axis == 0:
+            new_data = self._data.rename_items(mapper_f, copydata=copy)
+        else:
+            new_data = self._data.rename_axis(mapper_f, axis=axis)
+            if copy:
+                new_data = new_data.copy()
+
+        return self._constructor(new_data)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index f3c32ece0..c79cddcc3 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1858,15 +1858,7 @@ copy : boolean, default False
         -------
         renamed : Series (new object)
         """
-        if isinstance(mapper, (dict, Series)):
-            def mapper_f(x):
-                if x in mapper:
-                    return mapper[x]
-                else:
-                    return x
-        else:
-            mapper_f = mapper
-
+        mapper_f = _get_rename_function(mapper)
         result = self.copy()
         result.index = [mapper_f(x) for x in self.index]
 
@@ -1888,3 +1880,16 @@ def remove_na(arr):
     Return array containing only true/non-NaN values, possibly empty.
     """
     return arr[notnull(arr)]
+
+
+def _get_rename_function(mapper):
+    if isinstance(mapper, (dict, Series)):
+        def f(x):
+            if x in mapper:
+                return mapper[x]
+            else:
+                return x
+    else:
+        f = mapper
+
+    return f
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index cb3e7b4a9..387839c09 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -830,6 +830,26 @@ class TestPanel(unittest.TestCase, PanelTests, CheckIndexing,
         empty = Panel()
         repr(empty)
 
+    def test_rename(self):
+        mapper = {
+            'ItemA' : 'foo',
+            'ItemB' : 'bar',
+            'ItemC' : 'baz'
+        }
+
+        renamed = self.panel.rename_axis(mapper, axis=0)
+        exp = Index(['foo', 'bar', 'baz'])
+        self.assert_(renamed.items.equals(exp))
+
+        renamed = self.panel.rename_axis(str.lower, axis=2)
+        exp = Index(['a', 'b', 'c', 'd'])
+        self.assert_(renamed.minor_axis.equals(exp))
+
+        # don't copy
+        renamed_nocopy = self.panel.rename_axis(mapper, axis=0, copy=False)
+        renamed_nocopy['foo'] = 3.
+        self.assert_((self.panel['ItemA'].values == 3).all())
+
 class TestLongPanel(unittest.TestCase):
 
     def setUp(self):
@@ -1149,7 +1169,6 @@ class TestLongPanel(unittest.TestCase):
         df = pivot(np.array([]), np.array([]), np.array([]))
 
 
-
 def test_group_agg():
     values = np.ones((10, 2)) * np.arange(10).reshape((10, 1))
     bounds = np.arange(5) * 2
