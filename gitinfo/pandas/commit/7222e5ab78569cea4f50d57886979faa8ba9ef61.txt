commit 7222e5ab78569cea4f50d57886979faa8ba9ef61
Author: Jeffrey Tratner <jeffrey.tratner@gmail.com>
Date:   Sun Jun 30 21:52:41 2013 -0400

    CLN: Have PyTables, stats, & Stata use StringMixin
    
    CLN: Make PyTables unicode safe + add StringMixin
    
    CLN: Make StataMissingValue use StringMixin
    
    ENH: Use StringMixin for addl string methods in stats

diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 5bf309edf..fdb86c43b 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -17,7 +17,8 @@ from pandas import (Series, TimeSeries, DataFrame, Panel, Panel4D, Index,
 from pandas.sparse.api import SparseSeries, SparseDataFrame, SparsePanel
 from pandas.sparse.array import BlockIndex, IntIndex
 from pandas.tseries.api import PeriodIndex, DatetimeIndex
-from pandas.core.common import adjoin, is_list_like
+from pandas.core.base import StringMixin
+from pandas.core.common import adjoin, is_list_like, pprint_thing
 from pandas.core.algorithms import match, unique
 from pandas.core.categorical import Categorical
 from pandas.core.common import _asarray_tuplesafe
@@ -218,7 +219,7 @@ def read_hdf(path_or_buf, key, **kwargs):
     # a passed store; user controls open/close
     f(path_or_buf, False)
 
-class HDFStore(object):
+class HDFStore(StringMixin):
     """
     dict-like IO interface for storing pandas objects in PyTables
     format.
@@ -315,8 +316,8 @@ class HDFStore(object):
     def __len__(self):
         return len(self.groups())
 
-    def __repr__(self):
-        output = '%s\nFile path: %s\n' % (type(self), self._path)
+    def __unicode__(self):
+        output = '%s\nFile path: %s\n' % (type(self), pprint_thing(self._path))
 
         if len(self.keys()):
             keys   = []
@@ -326,11 +327,11 @@ class HDFStore(object):
                 try:
                     s = self.get_storer(k)
                     if s is not None:
-                        keys.append(str(s.pathname or k))
-                        values.append(str(s or 'invalid_HDFStore node'))
-                except (Exception), detail:
+                        keys.append(pprint_thing(s.pathname or k))
+                        values.append(pprint_thing(s or 'invalid_HDFStore node'))
+                except Exception as detail:
                     keys.append(k)
-                    values.append("[invalid_HDFStore node: %s]" % str(detail))
+                    values.append("[invalid_HDFStore node: %s]" % pprint_thing(detail))
 
             output += adjoin(12, keys, values)
         else:
@@ -984,7 +985,7 @@ class TableIterator(object):
         self.close()
         return results
 
-class IndexCol(object):
+class IndexCol(StringMixin):
     """ an index column description class
 
         Parameters
@@ -1050,10 +1051,9 @@ class IndexCol(object):
         self.table = table
         return self
 
-    def __repr__(self):
-        return "name->%s,cname->%s,axis->%s,pos->%s,kind->%s" % (self.name, self.cname, self.axis, self.pos, self.kind)
-
-    __str__ = __repr__
+    def __unicode__(self):
+        temp = tuple(map(pprint_thing, (self.name, self.cname, self.axis, self.pos, self.kind)))
+        return "name->%s,cname->%s,axis->%s,pos->%s,kind->%s" % temp
 
     def __eq__(self, other):
         """ compare 2 col items """
@@ -1570,7 +1570,7 @@ class GenericDataIndexableCol(DataIndexableCol):
     def get_attr(self):
         pass
 
-class Storer(object):
+class Storer(StringMixin):
     """ represent an object in my store
           facilitate read/write of various types of objects
           this is an abstract base class
@@ -1610,19 +1610,16 @@ class Storer(object):
     def pandas_type(self):
         return _ensure_decoded(getattr(self.group._v_attrs, 'pandas_type', None))
 
-    def __repr__(self):
-        """ return a pretty representatgion of myself """
+    def __unicode__(self):
+        """ return a pretty representation of myself """
         self.infer_axes()
         s = self.shape
         if s is not None:
             if isinstance(s, (list,tuple)):
-                s = "[%s]" % ','.join([ str(x) for x in s ])
+                s = "[%s]" % ','.join([pprint_thing(x) for x in s])
             return "%-12.12s (shape->%s)" % (self.pandas_type,s)
         return self.pandas_type
 
-    def __str__(self):
-        return self.__repr__()
-
     def set_object_info(self):
         """ set my pandas type & version """
         self.attrs.pandas_type = self.pandas_kind
@@ -3435,7 +3432,7 @@ def _need_convert(kind):
         return True
     return False
 
-class Term(object):
+class Term(StringMixin):
     """create a term object that holds a field, op, and value
 
     Parameters
@@ -3540,10 +3537,9 @@ class Term(object):
         if len(self.q):
             self.eval()
 
-    def __str__(self):
-        return "field->%s,op->%s,value->%s" % (self.field, self.op, self.value)
-
-    __repr__ = __str__
+    def __unicode__(self):
+        attrs = map(pprint_thing, (self.field, self.op, self.value))
+        return "field->%s,op->%s,value->%s" % tuple(attrs)
 
     @property
     def is_valid(self):
diff --git a/pandas/io/stata.py b/pandas/io/stata.py
index 632e97c24..603924ac6 100644
--- a/pandas/io/stata.py
+++ b/pandas/io/stata.py
@@ -15,6 +15,7 @@ import numpy as np
 
 import sys
 import struct
+from pandas.core.base import StringMixin
 from pandas.core.frame import DataFrame
 from pandas.core.series import Series
 from pandas.core.categorical import Categorical
@@ -163,7 +164,7 @@ def _datetime_to_stata_elapsed(date, fmt):
         raise ValueError("fmt %s not understood" % fmt)
 
 
-class StataMissingValue(object):
+class StataMissingValue(StringMixin):
     """
     An observation's missing value.
 
@@ -192,10 +193,12 @@ class StataMissingValue(object):
     string = property(lambda self: self._str, doc="The Stata representation of the missing value: '.', '.a'..'.z'")
     value = property(lambda self: self._value, doc='The binary representation of the missing value.')
 
-    def __str__(self):
-        return self._str
+    def __unicode__(self):
+        return self.string
 
-    __str__.__doc__ = string.__doc__
+    def __repr__(self):
+        # not perfect :-/
+        return "%s(%s)" % (self.__class__, self)
 
 
 class StataParser(object):
diff --git a/pandas/stats/fama_macbeth.py b/pandas/stats/fama_macbeth.py
index b75029c61..967199c0b 100644
--- a/pandas/stats/fama_macbeth.py
+++ b/pandas/stats/fama_macbeth.py
@@ -1,3 +1,4 @@
+from pandas.core.base import StringMixin
 from pandas.util.py3compat import StringIO
 
 import numpy as np
@@ -26,7 +27,7 @@ def fama_macbeth(**kwargs):
     return klass(**kwargs)
 
 
-class FamaMacBeth(object):
+class FamaMacBeth(StringMixin):
     def __init__(self, y, x, intercept=True, nw_lags=None,
                  nw_lags_beta=None,
                  entity_effects=False, time_effects=False, x_effects=None,
@@ -114,7 +115,7 @@ class FamaMacBeth(object):
 
         return buffer.getvalue()
 
-    def __repr__(self):
+    def __unicode__(self):
         return self.summary
 
     @cache_readonly
diff --git a/pandas/stats/ols.py b/pandas/stats/ols.py
index cdcf1ab2a..742d832a9 100644
--- a/pandas/stats/ols.py
+++ b/pandas/stats/ols.py
@@ -10,6 +10,7 @@ from StringIO import StringIO
 import numpy as np
 
 from pandas.core.api import DataFrame, Series, isnull
+from pandas.core.base import StringMixin
 from pandas.core.common import _ensure_float64
 from pandas.core.index import MultiIndex
 from pandas.core.panel import Panel
@@ -22,7 +23,7 @@ import pandas.stats.moments as moments
 _FP_ERR = 1e-8
 
 
-class OLS(object):
+class OLS(StringMixin):
     """
     Runs a full sample ordinary least squares regression.
 
@@ -581,7 +582,7 @@ Degrees of Freedom: model %(df_model)d, resid %(df_resid)d
 
         return template % params
 
-    def __repr__(self):
+    def __unicode__(self):
         return self.summary
 
     @cache_readonly
diff --git a/pandas/stats/var.py b/pandas/stats/var.py
index e993b60e1..8953f7bad 100644
--- a/pandas/stats/var.py
+++ b/pandas/stats/var.py
@@ -1,7 +1,7 @@
 from __future__ import division
 
 import numpy as np
-
+from pandas.core.base import StringMixin
 from pandas.util.decorators import cache_readonly
 from pandas.core.frame import DataFrame
 from pandas.core.panel import Panel
@@ -11,7 +11,7 @@ from pandas.stats.math import inv
 from pandas.stats.ols import _combine_rhs
 
 
-class VAR(object):
+class VAR(StringMixin):
     """
     Estimates VAR(p) regression on multivariate time series data
     presented in pandas data structures.
@@ -477,7 +477,7 @@ BIC:                            %(bic).3f
 
         return np.dot(resid, resid.T) / (n - k)
 
-    def __repr__(self):
+    def __unicode__(self):
         return self.summary
 
 
