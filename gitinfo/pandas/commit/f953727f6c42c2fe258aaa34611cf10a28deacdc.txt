commit f953727f6c42c2fe258aaa34611cf10a28deacdc
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Sep 10 19:06:23 2012 -0400

    BUG: fix concat failure with PeriodIndex, close #1815

diff --git a/RELEASE.rst b/RELEASE.rst
index fb5ea1918..51d19a6d6 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -142,6 +142,7 @@ pandas 0.9.0
   - Fix float64/float32 merging bug (#1849)
   - Fixes to Period.start_time for non-daily frequencies (#1857)
   - Fix failure when converter used on index_col in read_csv (#1835)
+  - Implement PeriodIndex.append so that pandas.concat works correctly (#1815)
 
 pandas 0.8.1
 ============
diff --git a/pandas/core/index.py b/pandas/core/index.py
index ac954c8b6..633168a06 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -342,12 +342,24 @@ class Index(np.ndarray):
                 name = None
                 break
 
-        to_concat = _ensure_compat_concat(to_concat)
+        to_concat = self._ensure_compat_concat(to_concat)
         to_concat = [x.values if isinstance(x, Index) else x
                      for x in to_concat]
 
         return Index(np.concatenate(to_concat), name=name)
 
+    @staticmethod
+    def _ensure_compat_concat(indexes):
+        from pandas.tseries.api import DatetimeIndex, PeriodIndex
+        klasses = DatetimeIndex, PeriodIndex
+
+        is_ts = [isinstance(idx, klasses) for idx in indexes]
+
+        if any(is_ts) and not all(is_ts):
+            return [_maybe_box(idx) for idx in indexes]
+
+        return indexes
+
     def take(self, indexer, axis=0):
         """
         Analogous to ndarray.take
@@ -2516,16 +2528,11 @@ def _get_consensus_names(indexes):
             break
     return consensus_name
 
-def _ensure_compat_concat(indexes):
-    from pandas.tseries.index import DatetimeIndex
-    is_m8 = [isinstance(idx, DatetimeIndex) for idx in indexes]
-    if any(is_m8) and not all(is_m8):
-        return [_maybe_box_dtindex(idx) for idx in indexes]
-    return indexes
+def _maybe_box(idx):
+    from pandas.tseries.api import DatetimeIndex, PeriodIndex
+    klasses = DatetimeIndex, PeriodIndex
 
-def _maybe_box_dtindex(idx):
-    from pandas.tseries.index import DatetimeIndex
-    if isinstance(idx, DatetimeIndex):
+    if isinstance(idx, klasses):
         return idx.asobject
     return idx
 
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 35f5b4d81..f0b936bcc 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -601,8 +601,6 @@ class DatetimeIndex(Int64Index):
         -------
         appended : Index
         """
-        from pandas.core.index import _ensure_compat_concat
-
         name = self.name
         to_concat = [self]
 
@@ -616,7 +614,7 @@ class DatetimeIndex(Int64Index):
                 name = None
                 break
 
-        to_concat = _ensure_compat_concat(to_concat)
+        to_concat = self._ensure_compat_concat(to_concat)
         to_concat = [x.values if isinstance(x, Index) else x
                      for x in to_concat]
 
diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index 7f1939ab3..8d195a6d9 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -4,7 +4,7 @@ import numpy as np
 
 from pandas.tseries.frequencies import (get_freq_code as _gfc, to_offset,
                                         _month_numbers, FreqGroup)
-from pandas.tseries.index import DatetimeIndex, Int64Index
+from pandas.tseries.index import DatetimeIndex, Int64Index, Index
 from pandas.tseries.tools import parse_time_string
 import pandas.tseries.frequencies as _freq_mod
 
@@ -632,6 +632,11 @@ class PeriodIndex(Int64Index):
         f = lambda x: Period(ordinal=x, freq=self.freq)
         return lib.map_infer(values, f)
 
+    @property
+    def asobject(self):
+        from pandas.core.index import Index
+        return Index(self._box_values(self.values), dtype=object)
+
     def astype(self, dtype):
         dtype = np.dtype(dtype)
         if dtype == np.object_:
@@ -982,6 +987,45 @@ class PeriodIndex(Int64Index):
         taken.name = self.name
         return taken
 
+    def append(self, other):
+        """
+        Append a collection of Index options together
+
+        Parameters
+        ----------
+        other : Index or list/tuple of indices
+
+        Returns
+        -------
+        appended : Index
+        """
+        name = self.name
+        to_concat = [self]
+
+        if isinstance(other, (list, tuple)):
+            to_concat = to_concat + list(other)
+        else:
+            to_concat.append(other)
+
+        for obj in to_concat:
+            if isinstance(obj, Index) and obj.name != name:
+                name = None
+                break
+
+        to_concat = self._ensure_compat_concat(to_concat)
+
+        if isinstance(to_concat[0], PeriodIndex):
+            if len(set([x.freq for x in to_concat])) > 1:
+                # box
+                to_concat = [x.asobject for x in to_concat]
+            else:
+                cat_values = np.concatenate([x.values for x in to_concat])
+                return PeriodIndex(cat_values, freq=self.freq, name=name)
+
+        to_concat = [x.values if isinstance(x, Index) else x
+                     for x in to_concat]
+        return Index(com._concat_compat(to_concat), name=name)
+
 
 def _get_ordinal_range(start, end, periods, freq):
     if com._count_not_none(start, end, periods) < 2:
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index d2f723677..4c0177ba9 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -1848,6 +1848,22 @@ class TestPeriodIndex(TestCase):
         result = index.to_datetime()
         self.assertEquals(result[0], Timestamp('1/1/2012'))
 
+    def test_append_concat(self):
+        # #1815
+        d1 = date_range('12/31/1990', '12/31/1999', freq='A-DEC')
+        d2 = date_range('12/31/2000', '12/31/2009', freq='A-DEC')
+
+        s1 = Series(np.random.randn(10), d1)
+        s2 = Series(np.random.randn(10), d2)
+
+        s1 = s1.to_period()
+        s2 = s2.to_period()
+
+        # drops index
+        result = pd.concat([s1,s2])
+        self.assert_(isinstance(result.index, PeriodIndex))
+        self.assertEquals(result.index[0], s1.index[0])
+
 def _permute(obj):
     return obj.take(np.random.permutation(len(obj)))
 
