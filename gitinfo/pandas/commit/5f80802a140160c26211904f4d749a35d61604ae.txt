commit 5f80802a140160c26211904f4d749a35d61604ae
Author: Andy Hayden <andyhayden1@gmail.com>
Date:   Sat Mar 30 18:25:06 2013 +0000

    ENH index diff respects names

diff --git a/pandas/core/index.py b/pandas/core/index.py
index 38a97af57..9551ae12d 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -715,13 +715,16 @@ class Index(np.ndarray):
             raise Exception('Input must be iterable!')
 
         if self.equals(other):
-            return Index([])
+            return Index([], name=self.name)
 
         if not isinstance(other, Index):
             other = np.asarray(other)
+            result_name = self.name
+        else:
+            result_name = self.name if self.name == other.name else None
 
         theDiff = sorted(set(self) - set(other))
-        return Index(theDiff)
+        return Index(theDiff, name=result_name)
 
     def unique(self):
         """
@@ -2508,7 +2511,16 @@ class MultiIndex(Index):
         """
         self._assert_can_do_setop(other)
 
-        result_names = self.names if self.names == other.names else None
+        if not isinstance(other, MultiIndex):
+            if len(other) == 0:
+                return self
+            try:
+                other = MultiIndex.from_tuples(other)
+            except:
+                raise TypeError("other should be a MultiIndex or a list of tuples")
+            result_names = self.names
+        else:
+            result_names = self.names if self.names == other.names else None
 
         if self.equals(other):
             return MultiIndex(levels=[[]] * self.nlevels,
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index aad2a7d98..65a3d3b1c 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -299,12 +299,27 @@ class TestIndex(unittest.TestCase):
         first = self.strIndex[5:20]
         second = self.strIndex[:10]
         answer = self.strIndex[10:20]
+        first.name = 'name'
+        # different names
         result = first - second
 
         self.assert_(tm.equalContents(result, answer))
+        self.assertEqual(result.name, None)
 
-        diff = first.diff(first)
-        self.assert_(len(diff) == 0)
+        # same names
+        second.name = 'name'
+        result = first - second
+        self.assertEqual(result.name, 'name')
+
+        # with empty
+        result = first.diff([])
+        self.assert_(tm.equalContents(result, first))
+        self.assertEqual(result.name, first.name)
+
+        # with everythin
+        result = first.diff(first)
+        self.assert_(len(result) == 0)
+        self.assertEqual(result.name, first.name)
 
         # non-iterable input
         self.assertRaises(Exception, first.diff, 0.5)
@@ -1511,6 +1526,18 @@ class TestMultiIndex(unittest.TestCase):
         result = first.diff(first._tuple_index)
         self.assertTrue(result.equals(first[:0]))
 
+        # name from empty array
+        result = first.diff([])
+        self.assert_(first.equals(result))
+        self.assertEqual(first.names, result.names)
+
+        # name from non-empty array 
+        result = first.diff([('foo', 'one')])
+        expected = pd.MultiIndex.from_tuples([('bar', 'one'), ('baz', 'two'), ('foo', 'two'),
+                                              ('qux', 'one'), ('qux', 'two')])
+        expected.names = first.names
+        self.assertEqual(first.names, result.names)
+
     def test_from_tuples(self):
         self.assertRaises(Exception, MultiIndex.from_tuples, [])
 
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 08d214570..240e0c4b1 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -939,11 +939,13 @@ Thur,Lunch,Yes,51.51,17"""
         df = DataFrame(dict(ID=id_col, NAME=name, DATE=date, VAR1=var1))
 
         multi = df.set_index(['DATE', 'ID'])
+        multi.columns.name = 'Params'
         unst = multi.unstack('ID')
         down = unst.resample('W-THU')
 
         rs = down.stack('ID')
         xp = unst.ix[:, ['VAR1']].resample('W-THU').stack('ID')
+        xp.columns.name = 'Params'
         assert_frame_equal(rs, xp)
 
     def test_unstack_multiple_hierarchical(self):
