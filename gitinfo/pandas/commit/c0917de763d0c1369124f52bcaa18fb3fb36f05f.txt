commit c0917de763d0c1369124f52bcaa18fb3fb36f05f
Author: Francesco Brundu <francesco.brundu@gmail.com>
Date:   Tue Feb 24 21:56:15 2015 +0100

    ENH: validate for axis parameter on pandas.DataFrame.quantile() #9544

diff --git a/doc/source/whatsnew/v0.16.2.txt b/doc/source/whatsnew/v0.16.2.txt
index ab557e48e..682307fbb 100644
--- a/doc/source/whatsnew/v0.16.2.txt
+++ b/doc/source/whatsnew/v0.16.2.txt
@@ -97,6 +97,7 @@ Other API Changes
 ^^^^^^^^^^^^^^^^^
 
 - ``Holiday`` now raises ``NotImplementedError`` if both ``offset`` and ``observance`` are used in constructor instead of returning an incorrect result (:issue:`10217`).
+- ``axis`` parameter of ``DataFrame.quantile`` now accepts also ``index`` and``column``. (:issue:`9543`)
 
 - Adding empty ``DataFrame``s results in a ``DataFrame`` that ``.equals`` an empty ``DataFrame`` (:issue:`10181`)
 
@@ -116,7 +117,11 @@ Bug Fixes
 - Bug where read_hdf store.select modifies the passed columns list when
   multi-indexed (:issue:`7212`)
 - Bug in ``Categorical`` repr with ``display.width`` of ``None`` in Python 3 (:issue:`10087`)
+
 - Bug where some of the nan funcs do not have consistent return dtypes (:issue:`10251`)
+
+- Bug in ``DataFrame.quantile`` on checking that a valid axis was passed (:issue:`9543`)
+
 - Bug in groupby.apply aggregation for Categorical not preserving categories (:issue:`10138`)
 - Bug in ``to_csv`` where ``date_format`` is ignored if the ``datetime`` is fractional (:issue:`10209`)
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index ab6f11a4b..2b434c98d 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -4477,8 +4477,9 @@ class DataFrame(NDFrame):
         ----------
         q : float or array-like, default 0.5 (50% quantile)
             0 <= q <= 1, the quantile(s) to compute
-        axis : {0, 1}
-            0 for row-wise, 1 for column-wise
+        axis : {0, 1, 'index', 'columns'} (default 0)
+            0 or 'index' for row-wise, 1 or 'columns' for column-wise 
+
 
         Returns
         -------
@@ -4524,6 +4525,9 @@ class DataFrame(NDFrame):
                 return _quantile(values, per)
 
         data = self._get_numeric_data() if numeric_only else self
+
+        axis = self._get_axis_number(axis)
+
         if axis == 1:
             data = data.T
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index c25a40f0e..e6571e83c 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -12101,6 +12101,31 @@ class TestDataFrame(tm.TestCase, CheckIndexing,
         expected = Series([3., 4.], index=[0, 1])
         assert_series_equal(result, expected)
 
+    def test_quantile_axis_parameter(self):
+        # GH 9543/9544
+        from numpy import percentile
+
+        df = DataFrame({"A": [1, 2, 3], "B": [2, 3, 4]}, index=[1, 2, 3])
+
+        result = df.quantile(.5, axis=0)
+
+        expected = Series([2., 3.], index=["A", "B"])
+        assert_series_equal(result, expected)
+
+        expected = df.quantile(.5, axis="index")
+        assert_series_equal(result, expected)
+
+        result = df.quantile(.5, axis=1)
+
+        expected = Series([1.5, 2.5, 3.5], index=[1, 2, 3])
+        assert_series_equal(result, expected)
+
+        result = df.quantile(.5, axis="columns")
+        assert_series_equal(result, expected)
+
+        self.assertRaises(ValueError, df.quantile, 0.1, axis=-1)
+        self.assertRaises(ValueError, df.quantile, 0.1, axis="column")
+
     def test_quantile_multi(self):
         df = DataFrame([[1, 1, 1], [2, 2, 2], [3, 3, 3]],
                        columns=['a', 'b', 'c'])
