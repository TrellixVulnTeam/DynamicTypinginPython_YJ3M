commit b922189140108cf58d808a4bf9e4e0cc74861de5
Author: jreback <jeff@reback.net>
Date:   Mon Nov 25 14:15:15 2013 -0500

    TST: change from using unittest.TestCase directly to using pandas.util.testing.TestCase

diff --git a/pandas/io/tests/test_clipboard.py b/pandas/io/tests/test_clipboard.py
index 210427c1a..3556dfd99 100644
--- a/pandas/io/tests/test_clipboard.py
+++ b/pandas/io/tests/test_clipboard.py
@@ -19,7 +19,7 @@ except OSError:
 class TestClipboard(tm.TestCase):
     @classmethod
     def setUpClass(cls):
-        super(TestClipboard, cls).setupClass()
+        super(TestClipboard, cls).setUpClass()
         cls.data = {}
         cls.data['string'] = mkdf(5, 3, c_idx_type='s', r_idx_type='i',
                                   c_idx_names=[None], r_idx_names=[None])
diff --git a/pandas/io/tests/test_cparser.py b/pandas/io/tests/test_cparser.py
index 8db9c7de6..0b104ffba 100644
--- a/pandas/io/tests/test_cparser.py
+++ b/pandas/io/tests/test_cparser.py
@@ -9,7 +9,6 @@ import csv
 import os
 import sys
 import re
-import unittest
 
 import nose
 
@@ -32,7 +31,7 @@ from pandas.parser import TextReader
 import pandas.parser as parser
 
 
-class TestCParser(unittest.TestCase):
+class TestCParser(tm.TestCase):
 
     def setUp(self):
         self.dirpath = tm.get_data_path()
@@ -132,7 +131,7 @@ class TestCParser(unittest.TestCase):
 
         expected = [123456, 12500]
         tm.assert_almost_equal(result[0], expected)
-        
+
     def test_integer_thousands_alt(self):
         data = '123.456\n12.500'
 
diff --git a/pandas/io/tests/test_data.py b/pandas/io/tests/test_data.py
index 8f289f41e..831be69b9 100644
--- a/pandas/io/tests/test_data.py
+++ b/pandas/io/tests/test_data.py
@@ -37,7 +37,7 @@ def assert_n_failed_equals_n_null_columns(wngs, obj, cls=SymbolWarning):
 class TestGoogle(tm.TestCase):
     @classmethod
     def setUpClass(cls):
-        super(TestGoogle, cls).setupClass()
+        super(TestGoogle, cls).setUpClass()
         cls.locales = tm.get_locales(prefix='en_US')
         if not cls.locales:
             raise nose.SkipTest("US English locale not available for testing")
@@ -109,7 +109,7 @@ class TestGoogle(tm.TestCase):
 class TestYahoo(tm.TestCase):
     @classmethod
     def setUpClass(cls):
-        super(TestYahoo, cls).setupClass()
+        super(TestYahoo, cls).setUpClass()
         _skip_if_no_lxml()
 
     @network
@@ -229,7 +229,7 @@ class TestYahoo(tm.TestCase):
 class TestYahooOptions(tm.TestCase):
     @classmethod
     def setUpClass(cls):
-        super(TestYahooOptions, cls).setupClass()
+        super(TestYahooOptions, cls).setUpClass()
         _skip_if_no_lxml()
 
         # aapl has monthlies
@@ -290,7 +290,7 @@ class TestYahooOptions(tm.TestCase):
 class TestOptionsWarnings(tm.TestCase):
     @classmethod
     def setUpClass(cls):
-        super(TestOptionsWarnings, cls).setupClass()
+        super(TestOptionsWarnings, cls).setUpClass()
         _skip_if_no_lxml()
 
         with assert_produces_warning(FutureWarning):
diff --git a/pandas/io/tests/test_date_converters.py b/pandas/io/tests/test_date_converters.py
index 8c1009b90..74dad8537 100644
--- a/pandas/io/tests/test_date_converters.py
+++ b/pandas/io/tests/test_date_converters.py
@@ -4,7 +4,6 @@ import csv
 import os
 import sys
 import re
-import unittest
 
 import nose
 
@@ -22,9 +21,9 @@ import pandas.lib as lib
 from pandas import compat
 from pandas.lib import Timestamp
 import pandas.io.date_converters as conv
+import pandas.util.testing as tm
 
-
-class TestConverters(unittest.TestCase):
+class TestConverters(tm.TestCase):
 
     def setUp(self):
         self.years = np.array([2007, 2008])
diff --git a/pandas/io/tests/test_excel.py b/pandas/io/tests/test_excel.py
index 861f3a785..3446eb07a 100644
--- a/pandas/io/tests/test_excel.py
+++ b/pandas/io/tests/test_excel.py
@@ -3,7 +3,6 @@
 from pandas.compat import u, range, map
 from datetime import datetime
 import os
-import unittest
 
 import nose
 
@@ -86,7 +85,7 @@ class SharedItems(object):
         return read_csv(*args, **kwds)
 
 
-class ExcelReaderTests(SharedItems, unittest.TestCase):
+class ExcelReaderTests(SharedItems, tm.TestCase):
     def test_parse_cols_int(self):
         _skip_if_no_openpyxl()
         _skip_if_no_xlrd()
@@ -942,7 +941,7 @@ class ExcelWriterBase(SharedItems):
             tm.assert_series_equal(write_frame['B'], read_frame['B'])
 
 
-class OpenpyxlTests(ExcelWriterBase, unittest.TestCase):
+class OpenpyxlTests(ExcelWriterBase, tm.TestCase):
     ext = '.xlsx'
     engine_name = 'openpyxl'
     check_skip = staticmethod(_skip_if_no_openpyxl)
@@ -975,7 +974,7 @@ class OpenpyxlTests(ExcelWriterBase, unittest.TestCase):
                           xlsx_style.alignment.vertical)
 
 
-class XlwtTests(ExcelWriterBase, unittest.TestCase):
+class XlwtTests(ExcelWriterBase, tm.TestCase):
     ext = '.xls'
     engine_name = 'xlwt'
     check_skip = staticmethod(_skip_if_no_xlwt)
@@ -1002,13 +1001,13 @@ class XlwtTests(ExcelWriterBase, unittest.TestCase):
         self.assertEquals(xlwt.Alignment.VERT_TOP, xls_style.alignment.vert)
 
 
-class XlsxWriterTests(ExcelWriterBase, unittest.TestCase):
+class XlsxWriterTests(ExcelWriterBase, tm.TestCase):
     ext = '.xlsx'
     engine_name = 'xlsxwriter'
     check_skip = staticmethod(_skip_if_no_xlsxwriter)
 
 
-class OpenpyxlTests_NoMerge(ExcelWriterBase, unittest.TestCase):
+class OpenpyxlTests_NoMerge(ExcelWriterBase, tm.TestCase):
     ext = '.xlsx'
     engine_name = 'openpyxl'
     check_skip = staticmethod(_skip_if_no_openpyxl)
@@ -1017,7 +1016,7 @@ class OpenpyxlTests_NoMerge(ExcelWriterBase, unittest.TestCase):
     merge_cells = False
 
 
-class XlwtTests_NoMerge(ExcelWriterBase, unittest.TestCase):
+class XlwtTests_NoMerge(ExcelWriterBase, tm.TestCase):
     ext = '.xls'
     engine_name = 'xlwt'
     check_skip = staticmethod(_skip_if_no_xlwt)
@@ -1026,7 +1025,7 @@ class XlwtTests_NoMerge(ExcelWriterBase, unittest.TestCase):
     merge_cells = False
 
 
-class XlsxWriterTests_NoMerge(ExcelWriterBase, unittest.TestCase):
+class XlsxWriterTests_NoMerge(ExcelWriterBase, tm.TestCase):
     ext = '.xlsx'
     engine_name = 'xlsxwriter'
     check_skip = staticmethod(_skip_if_no_xlsxwriter)
@@ -1035,7 +1034,7 @@ class XlsxWriterTests_NoMerge(ExcelWriterBase, unittest.TestCase):
     merge_cells = False
 
 
-class ExcelWriterEngineTests(unittest.TestCase):
+class ExcelWriterEngineTests(tm.TestCase):
     def test_ExcelWriter_dispatch(self):
         with tm.assertRaisesRegexp(ValueError, 'No engine'):
             ExcelWriter('nothing')
diff --git a/pandas/io/tests/test_ga.py b/pandas/io/tests/test_ga.py
index 166917799..33ead20b6 100644
--- a/pandas/io/tests/test_ga.py
+++ b/pandas/io/tests/test_ga.py
@@ -1,5 +1,4 @@
 import os
-import unittest
 from datetime import datetime
 
 import nose
@@ -7,6 +6,7 @@ import pandas as pd
 from pandas import DataFrame
 from pandas.util.testing import network, assert_frame_equal, with_connectivity_check
 from numpy.testing.decorators import slow
+import pandas.util.testing as tm
 
 try:
     import httplib2
@@ -17,7 +17,7 @@ try:
 except ImportError:
     raise nose.SkipTest("need httplib2 and auth libs")
 
-class TestGoogle(unittest.TestCase):
+class TestGoogle(tm.TestCase):
 
     _multiprocess_can_split_ = True
 
@@ -103,17 +103,17 @@ class TestGoogle(unittest.TestCase):
         advanced_segment_id = 1234567
         query = ga.format_query('google_profile_id', ['visits'], '2013-09-01', segment=advanced_segment_id)
         assert query['segment'] == 'gaid::' + str(advanced_segment_id), "An integer value should be formatted as an advanced segment."
-    
+
     def test_v2_dynamic_segment_format(self):
         dynamic_segment_id = 'medium==referral'
         query = ga.format_query('google_profile_id', ['visits'], '2013-09-01', segment=dynamic_segment_id)
         assert query['segment'] == 'dynamic::ga:' + str(dynamic_segment_id), "A string value with more than just letters and numbers should be formatted as a dynamic segment."
-    
+
     def test_v3_advanced_segment_common_format(self):
         advanced_segment_id = 'aZwqR234'
         query = ga.format_query('google_profile_id', ['visits'], '2013-09-01', segment=advanced_segment_id)
         assert query['segment'] == 'gaid::' + str(advanced_segment_id), "A string value with just letters and numbers should be formatted as an advanced segment."
-    
+
     def test_v3_advanced_segment_weird_format(self):
         advanced_segment_id = 'aZwqR234-s1'
         query = ga.format_query('google_profile_id', ['visits'], '2013-09-01', segment=advanced_segment_id)
diff --git a/pandas/io/tests/test_gbq.py b/pandas/io/tests/test_gbq.py
index ba653f397..ec051d008 100644
--- a/pandas/io/tests/test_gbq.py
+++ b/pandas/io/tests/test_gbq.py
@@ -138,28 +138,30 @@ class TestGbq(tm.TestCase):
           'NULL_BOOLEAN']]
 
     @classmethod
-    def setUpClass(self):
+    def setUpClass(cls):
         # Integration tests require a valid bigquery token
         # be present in the user's home directory. This
         # can be generated with 'bq init' in the command line
-        super(TestGbq, cls).setupClass()
-        self.dirpath = tm.get_data_path()
+        super(TestGbq, cls).setUpClass()
+        cls.dirpath = tm.get_data_path()
         home = os.path.expanduser("~")
-        self.bq_token = os.path.join(home, '.bigquery.v2.token')
-        self.fake_job_path = os.path.join(self.dirpath, 'gbq_fake_job.txt')
+        cls.bq_token = os.path.join(home, '.bigquery.v2.token')
+        cls.fake_job_path = os.path.join(cls.dirpath, 'gbq_fake_job.txt')
 
         # If we're using a valid token, make a test dataset
         # Note, dataset functionality is beyond the scope
         # of the module under test, so we rely on the command
         # line utility for this.
-        if os.path.exists(self.bq_token):
+        if os.path.exists(cls.bq_token):
             subprocess.call(['bq','mk', '-d', 'pandas_testing_dataset'])
 
     @classmethod
-    def tearDownClass(self):
+    def tearDownClass(cls):
+        super(TestGbq, cls).tearDownClass()
+
         # If we're using a valid token, remove the test dataset
         # created.
-        if os.path.exists(self.bq_token):
+        if os.path.exists(cls.bq_token):
             subprocess.call(['bq', 'rm', '-r', '-f', '-d', 'pandas_testing_dataset'])
 
     @with_connectivity_check
diff --git a/pandas/io/tests/test_html.py b/pandas/io/tests/test_html.py
index 2471667aa..893b1768b 100644
--- a/pandas/io/tests/test_html.py
+++ b/pandas/io/tests/test_html.py
@@ -87,7 +87,7 @@ def test_bs4_version_fails():
 class TestReadHtml(tm.TestCase):
     @classmethod
     def setUpClass(cls):
-        super(TestReadHtml, cls).setupClass()
+        super(TestReadHtml, cls).setUpClass()
         _skip_if_none_of(('bs4', 'html5lib'))
 
     def read_html(self, *args, **kwargs):
@@ -585,7 +585,7 @@ class TestReadHtml(tm.TestCase):
 class TestReadHtmlLxml(tm.TestCase):
     @classmethod
     def setUpClass(cls):
-        super(TestReadHtmlLxml, cls).setupClass()
+        super(TestReadHtmlLxml, cls).setUpClass()
         _skip_if_no('lxml')
 
     def read_html(self, *args, **kwargs):
diff --git a/pandas/io/tests/test_json/test_pandas.py b/pandas/io/tests/test_json/test_pandas.py
index 6d392eb26..084bc6318 100644
--- a/pandas/io/tests/test_json/test_pandas.py
+++ b/pandas/io/tests/test_json/test_pandas.py
@@ -2,7 +2,6 @@
 from pandas.compat import range, lrange, StringIO
 from pandas import compat
 import os
-import unittest
 
 import numpy as np
 
@@ -27,7 +26,7 @@ _tsframe = DataFrame(_tsd)
 
 _mixed_frame = _frame.copy()
 
-class TestPandasContainer(unittest.TestCase):
+class TestPandasContainer(tm.TestCase):
 
     def setUp(self):
         self.dirpath = tm.get_data_path()
diff --git a/pandas/io/tests/test_json_norm.py b/pandas/io/tests/test_json_norm.py
index e96a89e71..8084446d2 100644
--- a/pandas/io/tests/test_json_norm.py
+++ b/pandas/io/tests/test_json_norm.py
@@ -1,5 +1,4 @@
 import nose
-import unittest
 
 from pandas import DataFrame
 import numpy as np
@@ -15,7 +14,7 @@ def _assert_equal_data(left, right):
     tm.assert_frame_equal(left, right)
 
 
-class TestJSONNormalize(unittest.TestCase):
+class TestJSONNormalize(tm.TestCase):
 
     def setUp(self):
         self.state_data = [
@@ -165,7 +164,7 @@ class TestJSONNormalize(unittest.TestCase):
         tm.assert_frame_equal(result, expected)
 
 
-class TestNestedToRecord(unittest.TestCase):
+class TestNestedToRecord(tm.TestCase):
 
     def test_flat_stays_flat(self):
         recs = [dict(flat1=1,flat2=2),
diff --git a/pandas/io/tests/test_packers.py b/pandas/io/tests/test_packers.py
index 28c541e37..1563406b1 100644
--- a/pandas/io/tests/test_packers.py
+++ b/pandas/io/tests/test_packers.py
@@ -1,5 +1,4 @@
 import nose
-import unittest
 
 import datetime
 import numpy as np
@@ -44,7 +43,7 @@ def check_arbitrary(a, b):
         assert(a == b)
 
 
-class Test(unittest.TestCase):
+class TestPackers(tm.TestCase):
 
     def setUp(self):
         self.path = '__%s__.msg' % tm.rands(10)
@@ -57,7 +56,7 @@ class Test(unittest.TestCase):
             to_msgpack(p, x, **kwargs)
             return read_msgpack(p, **kwargs)
 
-class TestAPI(Test):
+class TestAPI(TestPackers):
 
     def test_string_io(self):
 
@@ -94,7 +93,7 @@ class TestAPI(Test):
         for i, result in enumerate(read_msgpack(s,iterator=True)):
             tm.assert_frame_equal(result,dfs[i])
 
-class TestNumpy(Test):
+class TestNumpy(TestPackers):
 
     def test_numpy_scalar_float(self):
         x = np.float32(np.random.rand())
@@ -187,7 +186,7 @@ class TestNumpy(Test):
         x_rec = self.encode_decode(x)
         tm.assert_almost_equal(x,x_rec)
 
-class TestBasic(Test):
+class TestBasic(TestPackers):
 
     def test_timestamp(self):
 
@@ -219,7 +218,7 @@ class TestBasic(Test):
             self.assert_(i == i_rec)
 
 
-class TestIndex(Test):
+class TestIndex(TestPackers):
 
     def setUp(self):
         super(TestIndex, self).setUp()
@@ -273,7 +272,7 @@ class TestIndex(Test):
         #self.assert_(i.equals(i_rec))
 
 
-class TestSeries(Test):
+class TestSeries(TestPackers):
 
     def setUp(self):
         super(TestSeries, self).setUp()
@@ -312,7 +311,7 @@ class TestSeries(Test):
                 assert_series_equal(i, i_rec)
 
 
-class TestNDFrame(Test):
+class TestNDFrame(TestPackers):
 
     def setUp(self):
         super(TestNDFrame, self).setUp()
@@ -374,7 +373,7 @@ class TestNDFrame(Test):
                 check_arbitrary(packed, l[i])
 
 
-class TestSparse(Test):
+class TestSparse(TestPackers):
 
     def _check_roundtrip(self, obj, comparator, **kwargs):
 
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index 84736f16e..563e9c136 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -6,7 +6,6 @@ import csv
 import os
 import sys
 import re
-import unittest
 import nose
 import platform
 
@@ -2049,7 +2048,7 @@ a,b,c
         tm.assertRaises(Exception, read_csv, StringIO(data), header=0, names=['a', 'b', 'c', 'd'])
 
 
-class TestPythonParser(ParserTests, unittest.TestCase):
+class TestPythonParser(ParserTests, tm.TestCase):
     def test_negative_skipfooter_raises(self):
         text = """#foo,a,b,c
 #foo,a,b,c
@@ -2364,7 +2363,7 @@ eight,1,2,3"""
                 tm.assert_series_equal(result, expected)
 
 
-class TestFwfColspaceSniffing(unittest.TestCase):
+class TestFwfColspaceSniffing(tm.TestCase):
     def test_full_file(self):
         # File with all values
         test = '''index                             A    B    C
@@ -2464,7 +2463,7 @@ col1~~~~~col2  col3++++++++++++++++++col4
                                                  header=None, encoding='utf8'))
 
 
-class TestCParserHighMemory(ParserTests, unittest.TestCase):
+class TestCParserHighMemory(ParserTests, tm.TestCase):
 
     def read_csv(self, *args, **kwds):
         kwds = kwds.copy()
@@ -2504,7 +2503,7 @@ class TestCParserHighMemory(ParserTests, unittest.TestCase):
         raise nose.SkipTest("Usecols is not supported in C High Memory engine.")
 
 
-class TestCParserLowMemory(ParserTests, unittest.TestCase):
+class TestCParserLowMemory(ParserTests, tm.TestCase):
 
     def read_csv(self, *args, **kwds):
         kwds = kwds.copy()
@@ -2831,7 +2830,7 @@ No,No,No"""
                                                                    engine)):
                     read_csv(StringIO(data), engine=engine, **kwargs)
 
-class TestParseSQL(unittest.TestCase):
+class TestParseSQL(tm.TestCase):
 
     def test_convert_sql_column_floats(self):
         arr = np.array([1.5, None, 3, 4.2], dtype=object)
diff --git a/pandas/io/tests/test_pickle.py b/pandas/io/tests/test_pickle.py
index ea769a051..b70248d1e 100644
--- a/pandas/io/tests/test_pickle.py
+++ b/pandas/io/tests/test_pickle.py
@@ -5,7 +5,6 @@
 from datetime import datetime, timedelta
 import operator
 import pickle as pkl
-import unittest
 import nose
 import os
 
@@ -24,7 +23,7 @@ def _read_pickle(vf, encoding=None, compat=False):
     with open(vf,'rb') as fh:
         pc.load(fh, encoding=encoding, compat=compat)
 
-class TestPickle(unittest.TestCase):
+class TestPickle(tm.TestCase):
     _multiprocess_can_split_ = True
 
     def setUp(self):
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index ba69f7a83..78d9dcb1f 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -1,5 +1,4 @@
 import nose
-import unittest
 import sys
 import os
 import warnings
@@ -118,7 +117,7 @@ def compat_assert_produces_warning(w,f):
             f()
 
 
-class TestHDFStore(unittest.TestCase):
+class TestHDFStore(tm.TestCase):
 
     def setUp(self):
         warnings.filterwarnings(action='ignore', category=FutureWarning)
diff --git a/pandas/io/tests/test_sql.py b/pandas/io/tests/test_sql.py
index f135a3619..38770def8 100644
--- a/pandas/io/tests/test_sql.py
+++ b/pandas/io/tests/test_sql.py
@@ -1,5 +1,4 @@
 from __future__ import print_function
-import unittest
 import sqlite3
 import sys
 
@@ -52,7 +51,7 @@ def _skip_if_no_MySQLdb():
     except ImportError:
         raise nose.SkipTest('MySQLdb not installed, skipping')
 
-class TestSQLite(unittest.TestCase):
+class TestSQLite(tm.TestCase):
 
     def setUp(self):
         self.db = sqlite3.connect(':memory:')
@@ -243,7 +242,7 @@ class TestSQLite(unittest.TestCase):
         tm.assert_frame_equal(result,mono_df)
 
 
-class TestMySQL(unittest.TestCase):
+class TestMySQL(tm.TestCase):
 
     def setUp(self):
         _skip_if_no_MySQLdb()
@@ -487,8 +486,5 @@ class TestMySQL(unittest.TestCase):
 
 
 if __name__ == '__main__':
-    # unittest.main()
-    # nose.runmodule(argv=[__file__,'-vvs','-x', '--pdb-failure'],
-    #                exit=False)
     nose.runmodule(argv=[__file__, '-vvs', '-x', '--pdb', '--pdb-failure'],
                    exit=False)
diff --git a/pandas/io/tests/test_stata.py b/pandas/io/tests/test_stata.py
index 0a87ada70..76dae396c 100644
--- a/pandas/io/tests/test_stata.py
+++ b/pandas/io/tests/test_stata.py
@@ -2,7 +2,6 @@
 
 from datetime import datetime
 import os
-import unittest
 import warnings
 import nose
 
@@ -15,7 +14,7 @@ import pandas.util.testing as tm
 from pandas.util.misc import is_little_endian
 from pandas import compat
 
-class StataTests(unittest.TestCase):
+class TestStata(tm.TestCase):
 
     def setUp(self):
         # Unit test datasets for dta7 - dta9 (old stata formats 104, 105 and 107) can be downloaded from:
diff --git a/pandas/io/tests/test_wb.py b/pandas/io/tests/test_wb.py
index 60b4d8d46..954937282 100644
--- a/pandas/io/tests/test_wb.py
+++ b/pandas/io/tests/test_wb.py
@@ -1,42 +1,47 @@
 import nose
 
 import pandas
+from pandas.compat import u
 from pandas.util.testing import network
 from pandas.util.testing import assert_frame_equal
 from numpy.testing.decorators import slow
 from pandas.io.wb import search, download
+import pandas.util.testing as tm
 
+class TestWB(tm.TestCase):
 
-@slow
-@network
-def test_wdi_search():
-    raise nose.SkipTest("skipping for now")
-    expected = {u('id'): {2634: u('GDPPCKD'),
-                        4649: u('NY.GDP.PCAP.KD'),
-                        4651: u('NY.GDP.PCAP.KN'),
-                        4653: u('NY.GDP.PCAP.PP.KD')},
-                u('name'): {2634: u('GDP per Capita, constant US$, '
-                                             'millions'),
-                          4649: u('GDP per capita (constant 2000 US$)'),
-                          4651: u('GDP per capita (constant LCU)'),
-                          4653: u('GDP per capita, PPP (constant 2005 '
-                                      'international $)')}}
-    result = search('gdp.*capita.*constant').ix[:, :2]
-    expected = pandas.DataFrame(expected)
-    expected.index = result.index
-    assert_frame_equal(result, expected)
-
-
-@slow
-@network
-def test_wdi_download():
-    raise nose.SkipTest("skipping for now")
-    expected = {'GDPPCKN': {(u('United States'), u('2003')): u('40800.0735367688'), (u('Canada'), u('2004')): u('37857.1261134552'), (u('United States'), u('2005')): u('42714.8594790102'), (u('Canada'), u('2003')): u('37081.4575704003'), (u('United States'), u('2004')): u('41826.1728310667'), (u('Mexico'), u('2003')): u('72720.0691255285'), (u('Mexico'), u('2004')): u('74751.6003347038'), (u('Mexico'), u('2005')): u('76200.2154469437'), (u('Canada'), u('2005')): u('38617.4563629611')}, 'GDPPCKD': {(u('United States'), u('2003')): u('40800.0735367688'), (u('Canada'), u('2004')): u('34397.055116118'), (u('United States'), u('2005')): u('42714.8594790102'), (u('Canada'), u('2003')): u('33692.2812368928'), (u('United States'), u('2004')): u('41826.1728310667'), (u('Mexico'), u('2003')): u('7608.43848670658'), (u('Mexico'), u('2004')): u('7820.99026814334'), (u('Mexico'), u('2005')): u('7972.55364129367'), (u('Canada'), u('2005')): u('35087.8925933298')}}
-    expected = pandas.DataFrame(expected)
-    result = download(country=['CA', 'MX', 'US', 'junk'], indicator=['GDPPCKD',
-                                                                     'GDPPCKN', 'junk'], start=2003, end=2005)
-    expected.index = result.index
-    assert_frame_equal(result, pandas.DataFrame(expected))
+    @slow
+    @network
+    def test_wdi_search(self):
+        raise nose.SkipTest
+
+        expected = {u('id'): {2634: u('GDPPCKD'),
+                              4649: u('NY.GDP.PCAP.KD'),
+                              4651: u('NY.GDP.PCAP.KN'),
+                              4653: u('NY.GDP.PCAP.PP.KD')},
+                    u('name'): {2634: u('GDP per Capita, constant US$, '
+                                        'millions'),
+                                4649: u('GDP per capita (constant 2000 US$)'),
+                                4651: u('GDP per capita (constant LCU)'),
+                                4653: u('GDP per capita, PPP (constant 2005 '
+                                        'international $)')}}
+        result = search('gdp.*capita.*constant').ix[:, :2]
+        expected = pandas.DataFrame(expected)
+        expected.index = result.index
+        assert_frame_equal(result, expected)
+
+
+    @slow
+    @network
+    def test_wdi_download(self):
+        raise nose.SkipTest
+
+        expected = {'GDPPCKN': {(u('United States'), u('2003')): u('40800.0735367688'), (u('Canada'), u('2004')): u('37857.1261134552'), (u('United States'), u('2005')): u('42714.8594790102'), (u('Canada'), u('2003')): u('37081.4575704003'), (u('United States'), u('2004')): u('41826.1728310667'), (u('Mexico'), u('2003')): u('72720.0691255285'), (u('Mexico'), u('2004')): u('74751.6003347038'), (u('Mexico'), u('2005')): u('76200.2154469437'), (u('Canada'), u('2005')): u('38617.4563629611')}, 'GDPPCKD': {(u('United States'), u('2003')): u('40800.0735367688'), (u('Canada'), u('2004')): u('34397.055116118'), (u('United States'), u('2005')): u('42714.8594790102'), (u('Canada'), u('2003')): u('33692.2812368928'), (u('United States'), u('2004')): u('41826.1728310667'), (u('Mexico'), u('2003')): u('7608.43848670658'), (u('Mexico'), u('2004')): u('7820.99026814334'), (u('Mexico'), u('2005')): u('7972.55364129367'), (u('Canada'), u('2005')): u('35087.8925933298')}}
+        expected = pandas.DataFrame(expected)
+        result = download(country=['CA', 'MX', 'US', 'junk'], indicator=['GDPPCKD',
+                                                                         'GDPPCKN', 'junk'], start=2003, end=2005)
+        expected.index = result.index
+        assert_frame_equal(result, pandas.DataFrame(expected))
 
 
 if __name__ == '__main__':
diff --git a/pandas/sparse/tests/test_array.py b/pandas/sparse/tests/test_array.py
index 21ab1c435..86fc4598f 100644
--- a/pandas/sparse/tests/test_array.py
+++ b/pandas/sparse/tests/test_array.py
@@ -5,7 +5,6 @@ import numpy as np
 
 import operator
 import pickle
-import unittest
 
 from pandas.core.series import Series
 from pandas.core.common import notnull
@@ -23,7 +22,7 @@ def assert_sp_array_equal(left, right):
         assert(left.fill_value == right.fill_value)
 
 
-class TestSparseArray(unittest.TestCase):
+class TestSparseArray(tm.TestCase):
     _multiprocess_can_split_ = True
 
     def setUp(self):
diff --git a/pandas/sparse/tests/test_libsparse.py b/pandas/sparse/tests/test_libsparse.py
index f820142a6..8cbebad61 100644
--- a/pandas/sparse/tests/test_libsparse.py
+++ b/pandas/sparse/tests/test_libsparse.py
@@ -1,5 +1,3 @@
-from unittest import TestCase
-
 from pandas import Series
 
 import nose
@@ -235,7 +233,7 @@ def test_intersect():
     check_cases(_check_case)
 
 
-class TestBlockIndex(TestCase):
+class TestBlockIndex(tm.TestCase):
 
     def test_equals(self):
         index = BlockIndex(10, [0, 4], [2, 5])
@@ -274,7 +272,7 @@ class TestBlockIndex(TestCase):
         self.assert_(index.to_block_index() is index)
 
 
-class TestIntIndex(TestCase):
+class TestIntIndex(tm.TestCase):
 
     def test_equals(self):
         index = IntIndex(10, [0, 1, 2, 3, 4])
@@ -299,7 +297,7 @@ class TestIntIndex(TestCase):
         self.assert_(index.to_int_index() is index)
 
 
-class TestSparseOperators(TestCase):
+class TestSparseOperators(tm.TestCase):
 
     def _nan_op_tests(self, sparse_op, python_op):
         def _check_case(xloc, xlen, yloc, ylen, eloc, elen):
diff --git a/pandas/sparse/tests/test_sparse.py b/pandas/sparse/tests/test_sparse.py
index b3f2a8b3b..bd05a7093 100644
--- a/pandas/sparse/tests/test_sparse.py
+++ b/pandas/sparse/tests/test_sparse.py
@@ -1,6 +1,5 @@
 # pylint: disable-msg=E1101,W0612
 
-from unittest import TestCase
 import operator
 from datetime import datetime
 
@@ -119,7 +118,7 @@ def assert_sp_panel_equal(left, right, exact_indices=True):
         assert(item in left)
 
 
-class TestSparseSeries(TestCase,
+class TestSparseSeries(tm.TestCase,
                        test_series.CheckNameIntegration):
     _multiprocess_can_split_ = True
 
@@ -742,11 +741,11 @@ class TestSparseSeries(TestCase,
         assert_sp_series_equal(result, expected)
 
 
-class TestSparseTimeSeries(TestCase):
+class TestSparseTimeSeries(tm.TestCase):
     pass
 
 
-class TestSparseDataFrame(TestCase, test_frame.SafeForSparse):
+class TestSparseDataFrame(tm.TestCase, test_frame.SafeForSparse):
     klass = SparseDataFrame
     _multiprocess_can_split_ = True
 
@@ -1562,7 +1561,7 @@ def panel_data3():
     }, index=index)
 
 
-class TestSparsePanel(TestCase,
+class TestSparsePanel(tm.TestCase,
                       test_panel.SafeForLongAndSparse,
                       test_panel.SafeForSparse):
     _multiprocess_can_split_ = True
diff --git a/pandas/stats/tests/common.py b/pandas/stats/tests/common.py
index 2866a36bc..717eb5129 100644
--- a/pandas/stats/tests/common.py
+++ b/pandas/stats/tests/common.py
@@ -2,13 +2,14 @@
 
 from datetime import datetime
 import string
-import unittest
 import nose
 
 import numpy as np
 
 from pandas import DataFrame, bdate_range
 from pandas.util.testing import assert_almost_equal  # imported in other tests
+import pandas.util.testing as tm
+
 N = 100
 K = 4
 
@@ -52,7 +53,7 @@ def check_for_statsmodels():
             raise nose.SkipTest('no statsmodels')
 
 
-class BaseTest(unittest.TestCase):
+class BaseTest(tm.TestCase):
     def setUp(self):
         check_for_scipy()
         check_for_statsmodels()
diff --git a/pandas/stats/tests/test_math.py b/pandas/stats/tests/test_math.py
index 008fffdc1..32ec2ff2c 100644
--- a/pandas/stats/tests/test_math.py
+++ b/pandas/stats/tests/test_math.py
@@ -1,4 +1,3 @@
-import unittest
 import nose
 
 from datetime import datetime
@@ -26,7 +25,7 @@ except ImportError:
         _have_statsmodels = False
 
 
-class TestMath(unittest.TestCase):
+class TestMath(tm.TestCase):
 
     _nan_locs = np.arange(20, 40)
     _inf_locs = np.array([])
diff --git a/pandas/stats/tests/test_moments.py b/pandas/stats/tests/test_moments.py
index 5c7112a2b..7381d4c1a 100644
--- a/pandas/stats/tests/test_moments.py
+++ b/pandas/stats/tests/test_moments.py
@@ -1,4 +1,3 @@
-import unittest
 import nose
 import sys
 import functools
@@ -24,7 +23,7 @@ def _skip_if_no_scipy():
     except ImportError:
         raise nose.SkipTest("no scipy.stats")
 
-class TestMoments(unittest.TestCase):
+class TestMoments(tm.TestCase):
 
     _multiprocess_can_split_ = True
 
diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index 82f9db52d..476dec8c1 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -69,7 +69,7 @@ class TestOLS(BaseTest):
 
     @classmethod
     def setUpClass(cls):
-        super(BaseTest, cls).setupClass()
+        super(TestOLS, cls).setUpClass()
         try:
             import matplotlib as mpl
             mpl.use('Agg', warn=False)
@@ -260,8 +260,8 @@ class TestOLSMisc(tm.TestCase):
     For test coverage with faux data
     '''
     @classmethod
-    def setupClass(cls):
-        super(BaseTest, cls).setupClass()
+    def setUpClass(cls):
+        super(TestOLSMisc, cls).setUpClass()
         if not _have_statsmodels:
             raise nose.SkipTest("no statsmodels")
 
diff --git a/pandas/tests/test_algos.py b/pandas/tests/test_algos.py
index 6458d7c31..2cbccbaf5 100644
--- a/pandas/tests/test_algos.py
+++ b/pandas/tests/test_algos.py
@@ -1,5 +1,4 @@
 from pandas.compat import range
-import unittest
 
 import numpy as np
 
@@ -10,7 +9,7 @@ import pandas.core.algorithms as algos
 import pandas.util.testing as tm
 
 
-class TestMatch(unittest.TestCase):
+class TestMatch(tm.TestCase):
     _multiprocess_can_split_ = True
 
     def test_ints(self):
@@ -30,7 +29,7 @@ class TestMatch(unittest.TestCase):
         self.assert_(np.array_equal(result, expected))
 
 
-class TestUnique(unittest.TestCase):
+class TestUnique(tm.TestCase):
     _multiprocess_can_split_ = True
 
     def test_ints(self):
@@ -63,7 +62,7 @@ class TestUnique(unittest.TestCase):
 
         tm.assert_almost_equal(result, expected)
 
-class TestValueCounts(unittest.TestCase):
+class TestValueCounts(tm.TestCase):
     _multiprocess_can_split_ = True
 
     def test_value_counts(self):
@@ -86,7 +85,7 @@ class TestValueCounts(unittest.TestCase):
 
         result = algos.value_counts(s, bins=2, sort=False)
         self.assertEqual(result.tolist(), [2, 2])
-        self.assertEqual(result.index[0], 0.997)        
+        self.assertEqual(result.index[0], 0.997)
         self.assertEqual(result.index[1], 2.5)
 
     def test_value_counts_dtypes(self):
diff --git a/pandas/tests/test_base.py b/pandas/tests/test_base.py
index 5d5a269b9..3cb3528b6 100644
--- a/pandas/tests/test_base.py
+++ b/pandas/tests/test_base.py
@@ -1,11 +1,10 @@
 import re
-import unittest
 import numpy as np
 import pandas.compat as compat
 from pandas.compat import u
 from pandas.core.base import FrozenList, FrozenNDArray
 from pandas.util.testing import assertRaisesRegexp, assert_isinstance
-
+import pandas.util.testing as tm
 
 class CheckStringMixin(object):
     def test_string_methods_dont_fail(self):
@@ -63,7 +62,7 @@ class CheckImmutable(object):
         self.assertEqual(result, expected)
 
 
-class TestFrozenList(CheckImmutable, CheckStringMixin, unittest.TestCase):
+class TestFrozenList(CheckImmutable, CheckStringMixin, tm.TestCase):
     mutable_methods = ('extend', 'pop', 'remove', 'insert')
     unicode_container = FrozenList([u("\u05d0"), u("\u05d1"), "c"])
 
@@ -89,7 +88,7 @@ class TestFrozenList(CheckImmutable, CheckStringMixin, unittest.TestCase):
         self.check_result(r, self.lst)
 
 
-class TestFrozenNDArray(CheckImmutable, CheckStringMixin, unittest.TestCase):
+class TestFrozenNDArray(CheckImmutable, CheckStringMixin, tm.TestCase):
     mutable_methods = ('put', 'itemset', 'fill')
     unicode_container = FrozenNDArray([u("\u05d0"), u("\u05d1"), "c"])
 
diff --git a/pandas/tests/test_categorical.py b/pandas/tests/test_categorical.py
index f41f6a985..7f7af41b6 100644
--- a/pandas/tests/test_categorical.py
+++ b/pandas/tests/test_categorical.py
@@ -2,7 +2,6 @@
 
 from datetime import datetime
 from pandas.compat import range, lrange, u
-import unittest
 import nose
 import re
 
@@ -17,7 +16,7 @@ import pandas.core.common as com
 import pandas.util.testing as tm
 
 
-class TestCategorical(unittest.TestCase):
+class TestCategorical(tm.TestCase):
     _multiprocess_can_split_ = True
 
     def setUp(self):
diff --git a/pandas/tests/test_common.py b/pandas/tests/test_common.py
index 7b4ea855f..2dd82870e 100644
--- a/pandas/tests/test_common.py
+++ b/pandas/tests/test_common.py
@@ -1,6 +1,5 @@
 from datetime import datetime
 import re
-import unittest
 
 import nose
 from nose.tools import assert_equal
@@ -350,7 +349,7 @@ def test_ensure_int32():
     assert(result.dtype == np.int32)
 
 
-class TestEnsureNumeric(unittest.TestCase):
+class TestEnsureNumeric(tm.TestCase):
     def test_numeric_values(self):
         # Test integer
         self.assertEqual(nanops._ensure_numeric(1), 1, 'Failed for int')
@@ -457,7 +456,7 @@ def test_is_recompilable():
         assert not com.is_re_compilable(f)
 
 
-class TestTake(unittest.TestCase):
+class TestTake(tm.TestCase):
     # standard incompatible fill error
     fill_error = re.compile("Incompatible type for fill_value")
 
diff --git a/pandas/tests/test_expressions.py b/pandas/tests/test_expressions.py
index 6284e4551..7d392586c 100644
--- a/pandas/tests/test_expressions.py
+++ b/pandas/tests/test_expressions.py
@@ -1,7 +1,6 @@
 from __future__ import print_function
 # pylint: disable-msg=W0612,E1101
 
-import unittest
 import nose
 
 from numpy.random import randn
@@ -48,7 +47,7 @@ _mixed_panel = Panel(dict(ItemA=_mixed, ItemB=(_mixed + 3)))
 _mixed2_panel = Panel(dict(ItemA=_mixed2, ItemB=(_mixed2 + 3)))
 
 
-class TestExpressions(unittest.TestCase):
+class TestExpressions(tm.TestCase):
 
     _multiprocess_can_split_ = False
 
@@ -341,7 +340,6 @@ class TestExpressions(unittest.TestCase):
         testit()
 
 if __name__ == '__main__':
-    # unittest.main()
     import nose
     nose.runmodule(argv=[__file__, '-vvs', '-x', '--pdb', '--pdb-failure'],
                    exit=False)
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 8e23176e9..7abe9b8be 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -6,7 +6,6 @@ import pandas.compat as compat
 import itertools
 import os
 import sys
-import unittest
 from textwrap import dedent
 import warnings
 
@@ -57,7 +56,7 @@ def has_expanded_repr(df):
     return False
 
 
-class TestDataFrameFormatting(unittest.TestCase):
+class TestDataFrameFormatting(tm.TestCase):
     _multiprocess_can_split_ = True
 
     def setUp(self):
@@ -1622,7 +1621,7 @@ c  10  11  12  13  14\
 """
         self.assertEqual(withoutindex_result, withoutindex_expected)
 
-class TestSeriesFormatting(unittest.TestCase):
+class TestSeriesFormatting(tm.TestCase):
     _multiprocess_can_split_ = True
 
     def setUp(self):
@@ -1809,7 +1808,7 @@ class TestSeriesFormatting(unittest.TestCase):
         self.assertTrue('2012-01-01' in result)
 
 
-class TestEngFormatter(unittest.TestCase):
+class TestEngFormatter(tm.TestCase):
     _multiprocess_can_split_ = True
 
     def test_eng_float_formatter(self):
@@ -2014,7 +2013,7 @@ def _three_digit_exp():
     return '%.4g' % 1.7e8 == '1.7e+008'
 
 
-class TestFloatArrayFormatter(unittest.TestCase):
+class TestFloatArrayFormatter(tm.TestCase):
 
     def test_misc(self):
         obj = fmt.FloatArrayFormatter(np.array([], dtype=np.float64))
diff --git a/pandas/tests/test_generic.py b/pandas/tests/test_generic.py
index cf9b2d174..97e25f105 100644
--- a/pandas/tests/test_generic.py
+++ b/pandas/tests/test_generic.py
@@ -2,7 +2,6 @@
 
 from datetime import datetime, timedelta
 import operator
-import unittest
 import nose
 
 import numpy as np
@@ -350,7 +349,7 @@ class Generic(object):
             self._compare(o.head(-3), o.head(7))
             self._compare(o.tail(-3), o.tail(7))
 
-class TestSeries(unittest.TestCase, Generic):
+class TestSeries(tm.TestCase, Generic):
     _typ = Series
     _comparator = lambda self, x, y: assert_series_equal(x,y)
 
@@ -576,7 +575,7 @@ class TestSeries(unittest.TestCase, Generic):
         with tm.assertRaises(ValueError):
             s.interpolate(method='krogh')
 
-class TestDataFrame(unittest.TestCase, Generic):
+class TestDataFrame(tm.TestCase, Generic):
     _typ = DataFrame
     _comparator = lambda self, x, y: assert_frame_equal(x,y)
 
@@ -769,11 +768,41 @@ class TestDataFrame(unittest.TestCase, Generic):
         expected = Series([1, 2, 3, 4, 5, 6, 7])
         assert_series_equal(result, expected)
 
-
-class TestPanel(unittest.TestCase, Generic):
+class TestPanel(tm.TestCase, Generic):
     _typ = Panel
     _comparator = lambda self, x, y: assert_panel_equal(x, y)
 
+
+class TestNDFrame(tm.TestCase):
+    # tests that don't fit elsewhere
+
+    def test_squeeze(self):
+        # noop
+        for s in [ tm.makeFloatSeries(), tm.makeStringSeries(), tm.makeObjectSeries() ]:
+            tm.assert_series_equal(s.squeeze(),s)
+        for df in [ tm.makeTimeDataFrame() ]:
+            tm.assert_frame_equal(df.squeeze(),df)
+        for p in [ tm.makePanel() ]:
+            tm.assert_panel_equal(p.squeeze(),p)
+        for p4d in [ tm.makePanel4D() ]:
+            tm.assert_panel4d_equal(p4d.squeeze(),p4d)
+
+        # squeezing
+        df = tm.makeTimeDataFrame().reindex(columns=['A'])
+        tm.assert_series_equal(df.squeeze(),df['A'])
+
+        p = tm.makePanel().reindex(items=['ItemA'])
+        tm.assert_frame_equal(p.squeeze(),p['ItemA'])
+
+        p = tm.makePanel().reindex(items=['ItemA'],minor_axis=['A'])
+        tm.assert_series_equal(p.squeeze(),p.ix['ItemA',:,'A'])
+
+        p4d = tm.makePanel4D().reindex(labels=['label1'])
+        tm.assert_panel_equal(p4d.squeeze(),p4d['label1'])
+
+        p4d = tm.makePanel4D().reindex(labels=['label1'],items=['ItemA'])
+        tm.assert_frame_equal(p4d.squeeze(),p4d.ix['label1','ItemA'])
+
 if __name__ == '__main__':
     nose.runmodule(argv=[__file__, '-vvs', '-x', '--pdb', '--pdb-failure'],
                    exit=False)
diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index 8f48c2d59..7c8b17fb1 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -1,7 +1,6 @@
 import nose
 import os
 import string
-import unittest
 from distutils.version import LooseVersion
 
 from datetime import datetime, date, timedelta
@@ -30,7 +29,7 @@ def _skip_if_no_scipy():
 
 
 @tm.mplskip
-class TestSeriesPlots(unittest.TestCase):
+class TestSeriesPlots(tm.TestCase):
     def setUp(self):
         import matplotlib as mpl
         self.mpl_le_1_2_1 = str(mpl.__version__) <= LooseVersion('1.2.1')
@@ -351,7 +350,7 @@ class TestSeriesPlots(unittest.TestCase):
 
 
 @tm.mplskip
-class TestDataFramePlots(unittest.TestCase):
+class TestDataFramePlots(tm.TestCase):
     def setUp(self):
         import matplotlib as mpl
         self.mpl_le_1_2_1 = str(mpl.__version__) <= LooseVersion('1.2.1')
@@ -449,7 +448,7 @@ class TestDataFramePlots(unittest.TestCase):
 
         # columns.inferred_type == 'mixed'
         # TODO add MultiIndex test
-        
+
     @slow
     def test_xcompat(self):
         import pandas as pd
@@ -540,10 +539,10 @@ class TestDataFramePlots(unittest.TestCase):
         df = DataFrame(randn(6, 4),
                        index=list(string.ascii_letters[:6]),
                        columns=['x', 'y', 'z', 'four'])
-                       
+
         _check_plot_works(df.plot, x='x', y='y', kind='scatter')
         _check_plot_works(df.plot, x=1, y=2, kind='scatter')
-        
+
         with tm.assertRaises(ValueError):
             df.plot(x='x', kind='scatter')
         with tm.assertRaises(ValueError):
@@ -946,7 +945,7 @@ class TestDataFramePlots(unittest.TestCase):
 
 
 @tm.mplskip
-class TestDataFrameGroupByPlots(unittest.TestCase):
+class TestDataFrameGroupByPlots(tm.TestCase):
     def tearDown(self):
         tm.close()
 
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index d9bdc3adc..76fee1702 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -1,6 +1,5 @@
 from __future__ import print_function
 import nose
-import unittest
 
 from numpy.testing.decorators import slow
 
@@ -49,7 +48,7 @@ def commonSetUp(self):
                                 index=self.dateRange)
 
 
-class TestGroupBy(unittest.TestCase):
+class TestGroupBy(tm.TestCase):
 
     _multiprocess_can_split_ = True
 
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index c3214a444..d102ac999 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -5,7 +5,6 @@ from pandas.compat import range, lrange, lzip, u, zip
 import operator
 import pickle
 import re
-import unittest
 import nose
 import warnings
 import os
@@ -34,7 +33,7 @@ from pandas.lib import Timestamp
 from pandas import _np_version_under1p7
 
 
-class TestIndex(unittest.TestCase):
+class TestIndex(tm.TestCase):
     _multiprocess_can_split_ = True
 
     def setUp(self):
@@ -691,7 +690,7 @@ class TestIndex(unittest.TestCase):
                 self.assert_(res is joined)
 
 
-class TestFloat64Index(unittest.TestCase):
+class TestFloat64Index(tm.TestCase):
     _multiprocess_can_split_ = True
 
     def setUp(self):
@@ -784,7 +783,7 @@ class TestFloat64Index(unittest.TestCase):
         self.check_is_index(result)
 
 
-class TestInt64Index(unittest.TestCase):
+class TestInt64Index(tm.TestCase):
     _multiprocess_can_split_ = True
 
     def setUp(self):
@@ -1203,7 +1202,7 @@ class TestInt64Index(unittest.TestCase):
         self.assertEqual(idx.name, idx[1:].name)
 
 
-class TestMultiIndex(unittest.TestCase):
+class TestMultiIndex(tm.TestCase):
     _multiprocess_can_split_ = True
 
     def setUp(self):
diff --git a/pandas/tests/test_indexing.py b/pandas/tests/test_indexing.py
index 8baf2b43a..441606092 100644
--- a/pandas/tests/test_indexing.py
+++ b/pandas/tests/test_indexing.py
@@ -1,5 +1,4 @@
 # pylint: disable-msg=W0612,E1101
-import unittest
 import nose
 import itertools
 import warnings
@@ -84,7 +83,7 @@ def _axify(obj, key, axis):
     return k
 
 
-class TestIndexing(unittest.TestCase):
+class TestIndexing(tm.TestCase):
 
     _multiprocess_can_split_ = True
 
diff --git a/pandas/tests/test_internals.py b/pandas/tests/test_internals.py
index b0a64d282..701b24047 100644
--- a/pandas/tests/test_internals.py
+++ b/pandas/tests/test_internals.py
@@ -1,6 +1,5 @@
 # pylint: disable=W0102
 
-import unittest
 import nose
 import numpy as np
 
@@ -88,7 +87,7 @@ def create_singleblockmanager(blocks):
 
     return SingleBlockManager(blocks, [items])
 
-class TestBlock(unittest.TestCase):
+class TestBlock(tm.TestCase):
 
     _multiprocess_can_split_ = True
 
@@ -234,7 +233,7 @@ class TestBlock(unittest.TestCase):
         pass
 
 
-class TestBlockManager(unittest.TestCase):
+class TestBlockManager(tm.TestCase):
 
     _multiprocess_can_split_ = True
 
@@ -586,9 +585,6 @@ class TestBlockManager(unittest.TestCase):
             pass  # this is the expected exception
 
 if __name__ == '__main__':
-    # unittest.main()
     import nose
-    # nose.runmodule(argv=[__file__,'-vvs','-x', '--pdb-failure'],
-    #                exit=False)
     nose.runmodule(argv=[__file__, '-vvs', '-x', '--pdb', '--pdb-failure'],
                    exit=False)
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index bd431843a..151f222d7 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -1,6 +1,5 @@
 # pylint: disable-msg=W0612,E1101,W0141
 import nose
-import unittest
 
 from numpy.random import randn
 import numpy as np
@@ -21,7 +20,7 @@ import pandas as pd
 import pandas.index as _index
 
 
-class TestMultiLevel(unittest.TestCase):
+class TestMultiLevel(tm.TestCase):
 
     _multiprocess_can_split_ = True
 
@@ -1860,9 +1859,6 @@ Thur,Lunch,Yes,51.51,17"""
 
 if __name__ == '__main__':
 
-    # unittest.main()
     import nose
-    # nose.runmodule(argv=[__file__,'-vvs','-x', '--pdb-failure'],
-    #                exit=False)
     nose.runmodule(argv=[__file__, '-vvs', '-x', '--pdb', '--pdb-failure'],
                    exit=False)
diff --git a/pandas/tests/test_ndframe.py b/pandas/tests/test_ndframe.py
deleted file mode 100644
index edafeb64a..000000000
--- a/pandas/tests/test_ndframe.py
+++ /dev/null
@@ -1,47 +0,0 @@
-import unittest
-
-import numpy as np
-
-from pandas.core.generic import NDFrame
-import pandas.util.testing as t
-
-
-class TestNDFrame(unittest.TestCase):
-
-    _multiprocess_can_split_ = True
-
-    def setUp(self):
-        tdf = t.makeTimeDataFrame()
-        self.ndf = NDFrame(tdf._data)
-
-    def test_squeeze(self):
-        # noop
-        for s in [ t.makeFloatSeries(), t.makeStringSeries(), t.makeObjectSeries() ]:
-            t.assert_series_equal(s.squeeze(),s)
-        for df in [ t.makeTimeDataFrame() ]:
-            t.assert_frame_equal(df.squeeze(),df)
-        for p in [ t.makePanel() ]:
-            t.assert_panel_equal(p.squeeze(),p)
-        for p4d in [ t.makePanel4D() ]:
-            t.assert_panel4d_equal(p4d.squeeze(),p4d)
-
-        # squeezing
-        df = t.makeTimeDataFrame().reindex(columns=['A'])
-        t.assert_series_equal(df.squeeze(),df['A'])
-
-        p = t.makePanel().reindex(items=['ItemA'])
-        t.assert_frame_equal(p.squeeze(),p['ItemA'])
-
-        p = t.makePanel().reindex(items=['ItemA'],minor_axis=['A'])
-        t.assert_series_equal(p.squeeze(),p.ix['ItemA',:,'A'])
-
-        p4d = t.makePanel4D().reindex(labels=['label1'])
-        t.assert_panel_equal(p4d.squeeze(),p4d['label1'])
-
-        p4d = t.makePanel4D().reindex(labels=['label1'],items=['ItemA'])
-        t.assert_frame_equal(p4d.squeeze(),p4d.ix['label1','ItemA'])
-
-if __name__ == '__main__':
-    import nose
-    nose.runmodule(argv=[__file__, '-vvs', '-x', '--pdb', '--pdb-failure'],
-                   exit=False)
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 96f14a091..1122b4c7d 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -2,7 +2,6 @@
 
 from datetime import datetime
 import operator
-import unittest
 import nose
 
 import numpy as np
@@ -811,7 +810,7 @@ _panel = tm.makePanel()
 tm.add_nans(_panel)
 
 
-class TestPanel(unittest.TestCase, PanelTests, CheckIndexing,
+class TestPanel(tm.TestCase, PanelTests, CheckIndexing,
                 SafeForLongAndSparse,
                 SafeForSparse):
     _multiprocess_can_split_ = True
@@ -1782,7 +1781,7 @@ class TestPanel(unittest.TestCase, PanelTests, CheckIndexing,
                                  **{'raise_conflict': True})
 
 
-class TestLongPanel(unittest.TestCase):
+class TestLongPanel(tm.TestCase):
     """
     LongPanel no longer exists, but...
     """
diff --git a/pandas/tests/test_panel4d.py b/pandas/tests/test_panel4d.py
index 4d5d29e08..ea6602dbb 100644
--- a/pandas/tests/test_panel4d.py
+++ b/pandas/tests/test_panel4d.py
@@ -2,7 +2,6 @@ from datetime import datetime
 from pandas.compat import range, lrange
 import os
 import operator
-import unittest
 import nose
 
 import numpy as np
@@ -543,7 +542,7 @@ class CheckIndexing(object):
         self.assert_(com.is_float_dtype(res3['l4'].values))
 
 
-class TestPanel4d(unittest.TestCase, CheckIndexing, SafeForSparse,
+class TestPanel4d(tm.TestCase, CheckIndexing, SafeForSparse,
                   SafeForLongAndSparse):
 
     _multiprocess_can_split_ = True
diff --git a/pandas/tests/test_panelnd.py b/pandas/tests/test_panelnd.py
index 3c86998c5..92083afb3 100644
--- a/pandas/tests/test_panelnd.py
+++ b/pandas/tests/test_panelnd.py
@@ -1,7 +1,6 @@
 from datetime import datetime
 import os
 import operator
-import unittest
 import nose
 
 import numpy as np
@@ -19,7 +18,7 @@ from pandas.util.testing import (assert_panel_equal,
 import pandas.util.testing as tm
 
 
-class TestPanelnd(unittest.TestCase):
+class TestPanelnd(tm.TestCase):
 
     def setUp(self):
         pass
diff --git a/pandas/tests/test_reshape.py b/pandas/tests/test_reshape.py
index c4e75fcb4..c6eb9739c 100644
--- a/pandas/tests/test_reshape.py
+++ b/pandas/tests/test_reshape.py
@@ -3,7 +3,6 @@ from copy import deepcopy
 from datetime import datetime, timedelta
 import operator
 import os
-import unittest
 
 import nose
 
@@ -23,7 +22,7 @@ from pandas.compat import StringIO, cPickle, range
 _multiprocess_can_split_ = True
 
 
-class TestMelt(unittest.TestCase):
+class TestMelt(tm.TestCase):
 
     def setUp(self):
         self.df = tm.makeTimeDataFrame()[:10]
@@ -148,7 +147,7 @@ class TestMelt(unittest.TestCase):
         self.assertEqual(res.columns.tolist(), ['CAP', 'low', 'value'])
 
 
-class TestGetDummies(unittest.TestCase):
+class TestGetDummies(tm.TestCase):
     def test_basic(self):
         s_list = list('abc')
         s_series = Series(s_list)
@@ -199,7 +198,7 @@ class TestGetDummies(unittest.TestCase):
         exp_just_na = DataFrame(Series(1.0,index=[0]),columns=[nan])
         assert_array_equal(res_just_na.values, exp_just_na.values)
 
-class TestConvertDummies(unittest.TestCase):
+class TestConvertDummies(tm.TestCase):
     def test_convert_dummies(self):
         df = DataFrame({'A': ['foo', 'bar', 'foo', 'bar',
                               'foo', 'bar', 'foo', 'foo'],
@@ -225,7 +224,7 @@ class TestConvertDummies(unittest.TestCase):
         tm.assert_frame_equal(result2, expected2)
 
 
-class TestLreshape(unittest.TestCase):
+class TestLreshape(tm.TestCase):
 
     def test_pairs(self):
         data = {'birthdt': ['08jan2009', '20dec2008', '30dec2008',
diff --git a/pandas/tests/test_rplot.py b/pandas/tests/test_rplot.py
index d59b182b7..ddfce477a 100644
--- a/pandas/tests/test_rplot.py
+++ b/pandas/tests/test_rplot.py
@@ -1,5 +1,4 @@
 from pandas.compat import range
-import unittest
 import pandas.tools.rplot as rplot
 import pandas.util.testing as tm
 from pandas import read_csv
@@ -33,7 +32,7 @@ def between(a, b, x):
 
 
 @tm.mplskip
-class TestUtilityFunctions(unittest.TestCase):
+class TestUtilityFunctions(tm.TestCase):
     """
     Tests for RPlot utility functions.
     """
@@ -102,7 +101,7 @@ class TestUtilityFunctions(unittest.TestCase):
 
 
 @tm.mplskip
-class TestTrellis(unittest.TestCase):
+class TestTrellis(tm.TestCase):
     def setUp(self):
         path = os.path.join(curpath(), 'data/tips.csv')
         self.data = read_csv(path, sep=',')
@@ -150,7 +149,7 @@ class TestTrellis(unittest.TestCase):
 
 
 @tm.mplskip
-class TestScaleGradient(unittest.TestCase):
+class TestScaleGradient(tm.TestCase):
     def setUp(self):
         path = os.path.join(curpath(), 'data/iris.csv')
         self.data = read_csv(path, sep=',')
@@ -170,7 +169,7 @@ class TestScaleGradient(unittest.TestCase):
 
 
 @tm.mplskip
-class TestScaleGradient2(unittest.TestCase):
+class TestScaleGradient2(tm.TestCase):
     def setUp(self):
         path = os.path.join(curpath(), 'data/iris.csv')
         self.data = read_csv(path, sep=',')
@@ -198,7 +197,7 @@ class TestScaleGradient2(unittest.TestCase):
 
 
 @tm.mplskip
-class TestScaleRandomColour(unittest.TestCase):
+class TestScaleRandomColour(tm.TestCase):
     def setUp(self):
         path = os.path.join(curpath(), 'data/iris.csv')
         self.data = read_csv(path, sep=',')
@@ -218,7 +217,7 @@ class TestScaleRandomColour(unittest.TestCase):
 
 
 @tm.mplskip
-class TestScaleConstant(unittest.TestCase):
+class TestScaleConstant(tm.TestCase):
     def test_scale_constant(self):
         scale = rplot.ScaleConstant(1.0)
         self.assertEqual(scale(None, None), 1.0)
@@ -226,7 +225,7 @@ class TestScaleConstant(unittest.TestCase):
         self.assertEqual(scale(None, None), "test")
 
 
-class TestScaleSize(unittest.TestCase):
+class TestScaleSize(tm.TestCase):
     def setUp(self):
         path = os.path.join(curpath(), 'data/iris.csv')
         self.data = read_csv(path, sep=',')
@@ -247,7 +246,7 @@ class TestScaleSize(unittest.TestCase):
 
 
 @tm.mplskip
-class TestRPlot(unittest.TestCase):
+class TestRPlot(tm.TestCase):
     def test_rplot1(self):
         import matplotlib.pyplot as plt
         path = os.path.join(curpath(), 'data/tips.csv')
@@ -295,4 +294,5 @@ class TestRPlot(unittest.TestCase):
 
 
 if __name__ == '__main__':
+    import unittest
     unittest.main()
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 5a6f790d5..0f67fce8b 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -2,7 +2,6 @@
 
 from datetime import datetime, timedelta
 import operator
-import unittest
 import string
 from itertools import product, starmap
 from distutils.version import LooseVersion
@@ -246,7 +245,7 @@ class CheckNameIntegration(object):
         self.assertEquals(result.name, self.ts.name)
 
 
-class TestNanops(unittest.TestCase):
+class TestNanops(tm.TestCase):
 
     _multiprocess_can_split_ = True
 
@@ -298,7 +297,7 @@ class SafeForSparse(object):
 
 _ts = tm.makeTimeSeries()
 
-class TestSeries(unittest.TestCase, CheckNameIntegration):
+class TestSeries(tm.TestCase, CheckNameIntegration):
 
     _multiprocess_can_split_ = True
 
@@ -5336,7 +5335,7 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         result = np.unique(self.ts)
 
 
-class TestSeriesNonUnique(unittest.TestCase):
+class TestSeriesNonUnique(tm.TestCase):
 
     _multiprocess_can_split_ = True
 
diff --git a/pandas/tests/test_stats.py b/pandas/tests/test_stats.py
index e3533afc7..7e2144e80 100644
--- a/pandas/tests/test_stats.py
+++ b/pandas/tests/test_stats.py
@@ -1,6 +1,5 @@
 from pandas import compat
 import nose
-import unittest
 
 from numpy import nan
 import numpy as np
@@ -11,9 +10,10 @@ from pandas.compat import product
 from pandas.util.testing import (assert_frame_equal,
                                  assert_series_equal,
                                  assert_almost_equal)
+import pandas.util.testing as tm
 
 
-class TestRank(unittest.TestCase):
+class TestRank(tm.TestCase):
     _multiprocess_can_split_ = True
     s = Series([1, 3, 4, 2, nan, 2, 1, 5, nan, 3])
     df = DataFrame({'A': s, 'B': s})
diff --git a/pandas/tests/test_strings.py b/pandas/tests/test_strings.py
index c75fec44c..15193e44b 100644
--- a/pandas/tests/test_strings.py
+++ b/pandas/tests/test_strings.py
@@ -4,7 +4,6 @@ from datetime import datetime, timedelta, date
 import os
 import operator
 import re
-import unittest
 import warnings
 
 import nose
@@ -26,7 +25,7 @@ import pandas.util.testing as tm
 import pandas.core.strings as strings
 
 
-class TestStringMethods(unittest.TestCase):
+class TestStringMethods(tm.TestCase):
 
     _multiprocess_can_split_ = True
 
@@ -480,7 +479,7 @@ class TestStringMethods(unittest.TestCase):
         tm.assert_frame_equal(result, exp)
 
         # no groups
-        s = Series(['A1', 'B2', 'C3']) 
+        s = Series(['A1', 'B2', 'C3'])
         f = lambda: s.str.extract('[ABC][123]')
         self.assertRaises(ValueError, f)
 
@@ -492,7 +491,7 @@ class TestStringMethods(unittest.TestCase):
         result = s.str.extract('(_)')
         exp = Series([NA, NA, NA])
         tm.assert_series_equal(result, exp)
- 
+
         # two groups, no matches
         result = s.str.extract('(_)(_)')
         exp = DataFrame([[NA, NA], [NA, NA], [NA, NA]])
diff --git a/pandas/tests/test_tseries.py b/pandas/tests/test_tseries.py
index c1eda3541..7215b9dbf 100644
--- a/pandas/tests/test_tseries.py
+++ b/pandas/tests/test_tseries.py
@@ -1,17 +1,15 @@
-import unittest
 
 from numpy import nan
 import numpy as np
 from pandas import Index, isnull, Timestamp
 from pandas.util.testing import assert_almost_equal
-import pandas.util.testing as common
+import pandas.util.testing as tm
 from pandas.compat import range, lrange, zip
 import pandas.lib as lib
 import pandas.algos as algos
 from datetime import datetime
 
-
-class TestTseriesUtil(unittest.TestCase):
+class TestTseriesUtil(tm.TestCase):
     _multiprocess_can_split_ = True
 
     def test_combineFunc(self):
@@ -421,7 +419,7 @@ def test_series_bin_grouper():
     assert_almost_equal(counts, exp_counts)
 
 
-class TestBinGroupers(unittest.TestCase):
+class TestBinGroupers(tm.TestCase):
     _multiprocess_can_split_ = True
 
     def setUp(self):
@@ -560,7 +558,7 @@ def test_try_parse_dates():
     assert(np.array_equal(result, expected))
 
 
-class TestTypeInference(unittest.TestCase):
+class TestTypeInference(tm.TestCase):
     _multiprocess_can_split_ = True
 
     def test_length_zero(self):
@@ -653,11 +651,11 @@ class TestTypeInference(unittest.TestCase):
             pass
 
 
-class TestMoments(unittest.TestCase):
+class TestMoments(tm.TestCase):
     pass
 
 
-class TestReducer(unittest.TestCase):
+class TestReducer(tm.TestCase):
 
     def test_int_index(self):
         from pandas.core.series import Series
@@ -685,7 +683,7 @@ class TestReducer(unittest.TestCase):
         assert_almost_equal(result, expected)
 
 
-class TestTsUtil(unittest.TestCase):
+class TestTsUtil(tm.TestCase):
     def test_min_valid(self):
         # Ensure that Timestamp.min is a valid Timestamp
         Timestamp(Timestamp.min)
@@ -700,7 +698,7 @@ class TestTsUtil(unittest.TestCase):
         self.assertEqual(Timestamp(Timestamp.max.to_pydatetime()).value/1000, Timestamp.max.value/1000)
         self.assertEqual(Timestamp(Timestamp.min.to_pydatetime()).value/1000, Timestamp.min.value/1000)
 
-class TestPeriodField(unittest.TestCase):
+class TestPeriodField(tm.TestCase):
 
     def test_get_period_field_raises_on_out_of_range(self):
         from pandas import tslib
diff --git a/pandas/tools/tests/test_merge.py b/pandas/tools/tests/test_merge.py
index eec134ebe..e3b448b65 100644
--- a/pandas/tools/tests/test_merge.py
+++ b/pandas/tools/tests/test_merge.py
@@ -1,7 +1,6 @@
 # pylint: disable=E1103
 
 import nose
-import unittest
 
 from datetime import datetime
 from numpy.random import randn
@@ -39,7 +38,7 @@ def get_test_data(ngroups=NGROUPS, n=N):
     return arr
 
 
-class TestMerge(unittest.TestCase):
+class TestMerge(tm.TestCase):
 
     _multiprocess_can_split_ = True
 
@@ -818,7 +817,7 @@ def _check_merge(x, y):
         assert_frame_equal(result, expected, check_names=False)  # TODO check_names on merge?
 
 
-class TestMergeMulti(unittest.TestCase):
+class TestMergeMulti(tm.TestCase):
 
     def setUp(self):
         self.index = MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'],
@@ -1082,7 +1081,7 @@ def _join_by_hand(a, b, how='left'):
     return a_re.reindex(columns=result_columns)
 
 
-class TestConcatenate(unittest.TestCase):
+class TestConcatenate(tm.TestCase):
 
     _multiprocess_can_split_ = True
 
@@ -1840,7 +1839,7 @@ class TestConcatenate(unittest.TestCase):
         with tm.assertRaisesRegexp(TypeError, "Cannot concatenate.+"):
             concat([df, df[0]], axis=1)
 
-class TestOrderedMerge(unittest.TestCase):
+class TestOrderedMerge(tm.TestCase):
 
     def setUp(self):
         self.left = DataFrame({'key': ['a', 'c', 'e'],
diff --git a/pandas/tools/tests/test_pivot.py b/pandas/tools/tests/test_pivot.py
index 6c18b6582..0ede6bd2b 100644
--- a/pandas/tools/tests/test_pivot.py
+++ b/pandas/tools/tests/test_pivot.py
@@ -1,5 +1,4 @@
 import datetime
-import unittest
 
 import numpy as np
 from numpy.testing import assert_equal
@@ -12,7 +11,7 @@ from pandas.compat import range, u, product
 import pandas.util.testing as tm
 
 
-class TestPivotTable(unittest.TestCase):
+class TestPivotTable(tm.TestCase):
 
     _multiprocess_can_split_ = True
 
@@ -320,7 +319,7 @@ class TestPivotTable(unittest.TestCase):
         self.assertEqual(result.All.tolist(), [3.0, 1.0, 4.0, 3.0, 11.0])
 
 
-class TestCrosstab(unittest.TestCase):
+class TestCrosstab(tm.TestCase):
 
     def setUp(self):
         df = DataFrame({'A': ['foo', 'foo', 'foo', 'foo',
diff --git a/pandas/tools/tests/test_tile.py b/pandas/tools/tests/test_tile.py
index 3200f3363..ba5194617 100644
--- a/pandas/tools/tests/test_tile.py
+++ b/pandas/tools/tests/test_tile.py
@@ -1,6 +1,5 @@
 import os
 import nose
-import unittest
 
 import numpy as np
 from pandas.compat import zip
@@ -17,7 +16,7 @@ import pandas.tools.tile as tmod
 from numpy.testing import assert_equal, assert_almost_equal
 
 
-class TestCut(unittest.TestCase):
+class TestCut(tm.TestCase):
 
     def test_simple(self):
         data = np.ones(5)
@@ -120,9 +119,9 @@ class TestCut(unittest.TestCase):
 
         result = cut(data, [-np.inf, 2, 4, np.inf])
         result_ser = cut(data_ser, [-np.inf, 2, 4, np.inf])
-        
+
         ex_levels = ['(-inf, 2]', '(2, 4]', '(4, inf]']
-        
+
         np.testing.assert_array_equal(result.levels, ex_levels)
         np.testing.assert_array_equal(result_ser.levels, ex_levels)
         self.assertEquals(result[5], '(4, inf]')
diff --git a/pandas/tools/tests/test_tools.py b/pandas/tools/tests/test_tools.py
index b57ff68c9..2c70427f7 100644
--- a/pandas/tools/tests/test_tools.py
+++ b/pandas/tools/tests/test_tools.py
@@ -1,22 +1,23 @@
-# import unittest
-
 from pandas import DataFrame
 from pandas.tools.describe import value_range
 
 import numpy as np
+import pandas.util.testing as tm
+
 
+class TestTools(tm.TestCase):
 
-def test_value_range():
-    df = DataFrame(np.random.randn(5, 5))
-    df.ix[0, 2] = -5
-    df.ix[2, 0] = 5
+    def test_value_range(self):
+        df = DataFrame(np.random.randn(5, 5))
+        df.ix[0, 2] = -5
+        df.ix[2, 0] = 5
 
-    res = value_range(df)
+        res = value_range(df)
 
-    assert(res['Minimum'] == -5)
-    assert(res['Maximum'] == 5)
+        self.assert_(res['Minimum'] == -5)
+        self.assert_(res['Maximum'] == 5)
 
-    df.ix[0, 1] = np.NaN
+        df.ix[0, 1] = np.NaN
 
-    assert(res['Minimum'] == -5)
-    assert(res['Maximum'] == 5)
+        self.assert_(res['Minimum'] == -5)
+        self.assert_(res['Maximum'] == 5)
diff --git a/pandas/tools/tests/test_util.py b/pandas/tools/tests/test_util.py
index 183bf2afb..36cfb4870 100644
--- a/pandas/tools/tests/test_util.py
+++ b/pandas/tools/tests/test_util.py
@@ -28,7 +28,7 @@ class TestLocaleUtils(tm.TestCase):
 
     @classmethod
     def setUpClass(cls):
-        super(TestLocaleUtils, cls).setupClass()
+        super(TestLocaleUtils, cls).setUpClass()
         cls.locales = tm.get_locales()
 
         if not cls.locales:
diff --git a/pandas/tseries/tests/test_converter.py b/pandas/tseries/tests/test_converter.py
index 7cb84b513..29137f9cb 100644
--- a/pandas/tseries/tests/test_converter.py
+++ b/pandas/tseries/tests/test_converter.py
@@ -1,12 +1,12 @@
 from datetime import datetime, time, timedelta, date
 import sys
 import os
-import unittest
 
 import nose
 
 import numpy as np
 from pandas.compat import u
+import pandas.util.testing as tm
 
 try:
     import pandas.tseries.converter as converter
@@ -18,7 +18,7 @@ def test_timtetonum_accepts_unicode():
     assert(converter.time2num("00:01") == converter.time2num(u("00:01")))
 
 
-class TestDateTimeConverter(unittest.TestCase):
+class TestDateTimeConverter(tm.TestCase):
 
     def setUp(self):
         self.dtc = converter.DatetimeConverter()
diff --git a/pandas/tseries/tests/test_cursor.py b/pandas/tseries/tests/test_cursor.py
deleted file mode 100644
index fc02a83cb..000000000
--- a/pandas/tseries/tests/test_cursor.py
+++ /dev/null
@@ -1,196 +0,0 @@
-
-"""
-
-class TestNewOffsets(unittest.TestCase):
-
-    def test_yearoffset(self):
-        off = lib.YearOffset(dayoffset=0, biz=0, anchor=datetime(2002,1,1))
-
-        for i in range(500):
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.day == 1)
-            self.assert_(t.month == 1)
-            self.assert_(t.year == 2002 + i)
-            next(off)
-
-        for i in range(499, -1, -1):
-            off.prev()
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.day == 1)
-            self.assert_(t.month == 1)
-            self.assert_(t.year == 2002 + i)
-
-        off = lib.YearOffset(dayoffset=-1, biz=0, anchor=datetime(2002,1,1))
-
-        for i in range(500):
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.month == 12)
-            self.assert_(t.day == 31)
-            self.assert_(t.year == 2001 + i)
-            next(off)
-
-        for i in range(499, -1, -1):
-            off.prev()
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.month == 12)
-            self.assert_(t.day == 31)
-            self.assert_(t.year == 2001 + i)
-
-        off = lib.YearOffset(dayoffset=-1, biz=-1, anchor=datetime(2002,1,1))
-
-        stack = []
-
-        for i in range(500):
-            t = lib.Timestamp(off.ts)
-            stack.append(t)
-            self.assert_(t.month == 12)
-            self.assert_(t.day == 31 or t.day == 30 or t.day == 29)
-            self.assert_(t.year == 2001 + i)
-            self.assert_(t.weekday() < 5)
-            next(off)
-
-        for i in range(499, -1, -1):
-            off.prev()
-            t = lib.Timestamp(off.ts)
-            self.assert_(t == stack.pop())
-            self.assert_(t.month == 12)
-            self.assert_(t.day == 31 or t.day == 30 or t.day == 29)
-            self.assert_(t.year == 2001 + i)
-            self.assert_(t.weekday() < 5)
-
-    def test_monthoffset(self):
-        off = lib.MonthOffset(dayoffset=0, biz=0, anchor=datetime(2002,1,1))
-
-        for i in range(12):
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.day == 1)
-            self.assert_(t.month == 1 + i)
-            self.assert_(t.year == 2002)
-            next(off)
-
-        for i in range(11, -1, -1):
-            off.prev()
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.day == 1)
-            self.assert_(t.month == 1 + i)
-            self.assert_(t.year == 2002)
-
-        off = lib.MonthOffset(dayoffset=-1, biz=0, anchor=datetime(2002,1,1))
-
-        for i in range(12):
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.day >= 28)
-            self.assert_(t.month == (12 if i == 0 else i))
-            self.assert_(t.year == 2001 + (i != 0))
-            next(off)
-
-        for i in range(11, -1, -1):
-            off.prev()
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.day >= 28)
-            self.assert_(t.month == (12 if i == 0 else i))
-            self.assert_(t.year == 2001 + (i != 0))
-
-        off = lib.MonthOffset(dayoffset=-1, biz=-1, anchor=datetime(2002,1,1))
-
-        stack = []
-
-        for i in range(500):
-            t = lib.Timestamp(off.ts)
-            stack.append(t)
-            if t.month != 2:
-                self.assert_(t.day >= 28)
-            else:
-                self.assert_(t.day >= 26)
-            self.assert_(t.weekday() < 5)
-            next(off)
-
-        for i in range(499, -1, -1):
-            off.prev()
-            t = lib.Timestamp(off.ts)
-            self.assert_(t == stack.pop())
-            if t.month != 2:
-                self.assert_(t.day >= 28)
-            else:
-                self.assert_(t.day >= 26)
-            self.assert_(t.weekday() < 5)
-
-        for i in (-2, -1, 1, 2):
-            for j in (-1, 0, 1):
-                off1 = lib.MonthOffset(dayoffset=i, biz=j, stride=12,
-                                       anchor=datetime(2002,1,1))
-                off2 = lib.YearOffset(dayoffset=i, biz=j,
-                                      anchor=datetime(2002,1,1))
-
-                for k in range(500):
-                    self.assert_(off1.ts == off2.ts)
-                    next(off1)
-                    next(off2)
-
-                for k in range(500):
-                    self.assert_(off1.ts == off2.ts)
-                    off1.prev()
-                    off2.prev()
-
-    def test_dayoffset(self):
-        off = lib.DayOffset(biz=0, anchor=datetime(2002,1,1))
-
-        us_in_day = 1e6 * 60 * 60 * 24
-
-        t0 = lib.Timestamp(off.ts)
-        for i in range(500):
-            next(off)
-            t1 = lib.Timestamp(off.ts)
-            self.assert_(t1.value - t0.value == us_in_day)
-            t0 = t1
-
-        t0 = lib.Timestamp(off.ts)
-        for i in range(499, -1, -1):
-            off.prev()
-            t1 = lib.Timestamp(off.ts)
-            self.assert_(t0.value - t1.value == us_in_day)
-            t0 = t1
-
-        off = lib.DayOffset(biz=1, anchor=datetime(2002,1,1))
-
-        t0 = lib.Timestamp(off.ts)
-        for i in range(500):
-            next(off)
-            t1 = lib.Timestamp(off.ts)
-            self.assert_(t1.weekday() < 5)
-            self.assert_(t1.value - t0.value == us_in_day or
-                         t1.value - t0.value == 3 * us_in_day)
-            t0 = t1
-
-        t0 = lib.Timestamp(off.ts)
-        for i in range(499, -1, -1):
-            off.prev()
-            t1 = lib.Timestamp(off.ts)
-            self.assert_(t1.weekday() < 5)
-            self.assert_(t0.value - t1.value == us_in_day or
-                         t0.value - t1.value == 3 * us_in_day)
-            t0 = t1
-
-
-    def test_dayofmonthoffset(self):
-        for week in (-1, 0, 1):
-            for day in (0, 2, 4):
-                off = lib.DayOfMonthOffset(week=-1, day=day,
-                                           anchor=datetime(2002,1,1))
-
-                stack = []
-
-                for i in range(500):
-                    t = lib.Timestamp(off.ts)
-                    stack.append(t)
-                    self.assert_(t.weekday() == day)
-                    next(off)
-
-                for i in range(499, -1, -1):
-                    off.prev()
-                    t = lib.Timestamp(off.ts)
-                    self.assert_(t == stack.pop())
-                    self.assert_(t.weekday() == day)
-
-
-"""
diff --git a/pandas/tseries/tests/test_daterange.py b/pandas/tseries/tests/test_daterange.py
index 3b40e7519..0af3b6281 100644
--- a/pandas/tseries/tests/test_daterange.py
+++ b/pandas/tseries/tests/test_daterange.py
@@ -1,7 +1,6 @@
 from datetime import datetime
 from pandas.compat import range
 import pickle
-import unittest
 import nose
 
 import numpy as np
@@ -39,7 +38,7 @@ def eq_gen_range(kwargs, expected):
 START, END = datetime(2009, 1, 1), datetime(2010, 1, 1)
 
 
-class TestGenRangeGeneration(unittest.TestCase):
+class TestGenRangeGeneration(tm.TestCase):
     def test_generate(self):
         rng1 = list(generate_range(START, END, offset=datetools.bday))
         rng2 = list(generate_range(START, END, time_rule='B'))
@@ -68,7 +67,7 @@ class TestGenRangeGeneration(unittest.TestCase):
                      [])
 
 
-class TestDateRange(unittest.TestCase):
+class TestDateRange(tm.TestCase):
 
     def setUp(self):
         self.rng = bdate_range(START, END)
@@ -410,7 +409,7 @@ class TestDateRange(unittest.TestCase):
             self.assert_(expected_right.equals(right))
 
 
-class TestCustomDateRange(unittest.TestCase):
+class TestCustomDateRange(tm.TestCase):
 
     def setUp(self):
         _skip_if_no_cday()
diff --git a/pandas/tseries/tests/test_frequencies.py b/pandas/tseries/tests/test_frequencies.py
index f1078f44e..ad9c93592 100644
--- a/pandas/tseries/tests/test_frequencies.py
+++ b/pandas/tseries/tests/test_frequencies.py
@@ -2,7 +2,6 @@ from datetime import datetime, time, timedelta
 from pandas.compat import range
 import sys
 import os
-import unittest
 
 import nose
 
@@ -18,7 +17,7 @@ import pandas.tseries.offsets as offsets
 import pandas.lib as lib
 
 from pandas import _np_version_under1p7
-
+import pandas.util.testing as tm
 
 def test_to_offset_multiple():
     freqstr = '2h30min'
@@ -87,7 +86,7 @@ def test_anchored_shortcuts():
 _dti = DatetimeIndex
 
 
-class TestFrequencyInference(unittest.TestCase):
+class TestFrequencyInference(tm.TestCase):
 
     def test_raise_if_too_few(self):
         index = _dti(['12/31/1998', '1/3/1999'])
@@ -159,7 +158,7 @@ class TestFrequencyInference(unittest.TestCase):
         for day in days:
             for i in range(1, 5):
                 self._check_generated_range('1/1/2000', 'WOM-%d%s' % (i, day))
-    
+
     def test_week_of_month_fake(self):
         #All of these dates are on same day of week and are 4 or 5 weeks apart
         index = DatetimeIndex(["2013-08-27","2013-10-01","2013-10-29","2013-11-26"])
diff --git a/pandas/tseries/tests/test_offsets.py b/pandas/tseries/tests/test_offsets.py
index 008bda0a6..047bd244f 100644
--- a/pandas/tseries/tests/test_offsets.py
+++ b/pandas/tseries/tests/test_offsets.py
@@ -2,7 +2,6 @@ from datetime import date, datetime, timedelta
 from dateutil.relativedelta import relativedelta
 from pandas.compat import range
 from pandas import compat
-import unittest
 import nose
 from nose.tools import assert_raises
 
@@ -95,7 +94,7 @@ def test_to_m8():
 ### DateOffset Tests
 #####
 
-class TestBase(unittest.TestCase):
+class TestBase(tm.TestCase):
     _offset = None
 
     def test_apply_out_of_range(self):
@@ -1304,25 +1303,25 @@ class TestFY5253NearestEndMonth(TestBase):
         self.assertEqual(makeFY5253NearestEndMonth(startingMonth=8, weekday=WeekDay.SUN).get_year_end(datetime(2013,1,1)), datetime(2013,9,1))
         self.assertEqual(makeFY5253NearestEndMonth(startingMonth=8, weekday=WeekDay.FRI).get_year_end(datetime(2013,1,1)), datetime(2013,8,30))
 
-        offset_n = FY5253(weekday=WeekDay.TUE, startingMonth=12, 
+        offset_n = FY5253(weekday=WeekDay.TUE, startingMonth=12,
                       variation="nearest")
         self.assertEqual(offset_n.get_year_end(datetime(2012,1,1)), datetime(2013,1,1))
         self.assertEqual(offset_n.get_year_end(datetime(2012,1,10)), datetime(2013,1,1))
-        
-        self.assertEqual(offset_n.get_year_end(datetime(2013,1,1)), datetime(2013,12,31))        
-        self.assertEqual(offset_n.get_year_end(datetime(2013,1,2)), datetime(2013,12,31))        
-        self.assertEqual(offset_n.get_year_end(datetime(2013,1,3)), datetime(2013,12,31))        
+
+        self.assertEqual(offset_n.get_year_end(datetime(2013,1,1)), datetime(2013,12,31))
+        self.assertEqual(offset_n.get_year_end(datetime(2013,1,2)), datetime(2013,12,31))
+        self.assertEqual(offset_n.get_year_end(datetime(2013,1,3)), datetime(2013,12,31))
         self.assertEqual(offset_n.get_year_end(datetime(2013,1,10)), datetime(2013,12,31))
-        
+
         JNJ = FY5253(n=1, startingMonth=12, weekday=6, variation="nearest")
         self.assertEqual(JNJ.get_year_end(datetime(2006, 1, 1)), datetime(2006, 12, 31))
-        
+
     def test_onOffset(self):
         offset_lom_aug_sat = makeFY5253NearestEndMonth(1, startingMonth=8, weekday=WeekDay.SAT)
         offset_lom_aug_thu = makeFY5253NearestEndMonth(1, startingMonth=8, weekday=WeekDay.THU)
-        offset_n = FY5253(weekday=WeekDay.TUE, startingMonth=12, 
+        offset_n = FY5253(weekday=WeekDay.TUE, startingMonth=12,
                       variation="nearest")
-                
+
         tests = [
 #             From Wikipedia (see: http://en.wikipedia.org/wiki/4%E2%80%934%E2%80%935_calendar#Saturday_nearest_the_end_of_month)
 #             2006-09-02   2006 September 2
@@ -1369,7 +1368,7 @@ class TestFY5253NearestEndMonth(TestBase):
             #From Micron, see: http://google.brand.edgar-online.com/?sym=MU&formtypeID=7
             (offset_lom_aug_thu, datetime(2012, 8, 30), True),
             (offset_lom_aug_thu, datetime(2011, 9, 1), True),
-            
+
             (offset_n, datetime(2012, 12, 31), False),
             (offset_n, datetime(2013, 1, 1), True),
             (offset_n, datetime(2013, 1, 2), False),
@@ -1379,16 +1378,16 @@ class TestFY5253NearestEndMonth(TestBase):
             assertOnOffset(offset, date, expected)
 
     def test_apply(self):
-        date_seq_nem_8_sat = [datetime(2006, 9, 2), datetime(2007, 9, 1), 
-                              datetime(2008, 8, 30), datetime(2009, 8, 29), 
+        date_seq_nem_8_sat = [datetime(2006, 9, 2), datetime(2007, 9, 1),
+                              datetime(2008, 8, 30), datetime(2009, 8, 29),
                               datetime(2010, 8, 28), datetime(2011, 9, 3)]
-        
-        JNJ = [datetime(2005, 1, 2), datetime(2006, 1, 1), 
-               datetime(2006, 12, 31), datetime(2007, 12, 30), 
-               datetime(2008, 12, 28), datetime(2010, 1, 3), 
-               datetime(2011, 1, 2), datetime(2012, 1, 1), 
+
+        JNJ = [datetime(2005, 1, 2), datetime(2006, 1, 1),
+               datetime(2006, 12, 31), datetime(2007, 12, 30),
+               datetime(2008, 12, 28), datetime(2010, 1, 3),
+               datetime(2011, 1, 2), datetime(2012, 1, 1),
                datetime(2012, 12, 30)]
-        
+
         DEC_SAT = FY5253(n=-1, startingMonth=12, weekday=5, variation="nearest")
 
         tests = [
@@ -1547,7 +1546,7 @@ class TestFY5253LastOfMonthQuarter(TestBase):
     def test_get_weeks(self):
         sat_dec_1 = makeFY5253LastOfMonthQuarter(1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1)
         sat_dec_4 = makeFY5253LastOfMonthQuarter(1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=4)
-        
+
         self.assertEqual(sat_dec_1.get_weeks(datetime(2011, 4, 2)), [14, 13, 13, 13])
         self.assertEqual(sat_dec_4.get_weeks(datetime(2011, 4, 2)), [13, 13, 13, 14])
         self.assertEqual(sat_dec_1.get_weeks(datetime(2010, 12, 25)), [13, 13, 13, 13])
@@ -1558,9 +1557,9 @@ class TestFY5253NearestEndMonthQuarter(TestBase):
 
         offset_nem_sat_aug_4 = makeFY5253NearestEndMonthQuarter(1, startingMonth=8, weekday=WeekDay.SAT, qtr_with_extra_week=4)
         offset_nem_thu_aug_4 = makeFY5253NearestEndMonthQuarter(1, startingMonth=8, weekday=WeekDay.THU, qtr_with_extra_week=4)
-        offset_n = FY5253(weekday=WeekDay.TUE, startingMonth=12, 
+        offset_n = FY5253(weekday=WeekDay.TUE, startingMonth=12,
                       variation="nearest", qtr_with_extra_week=4)
-                
+
         tests = [
             #From Wikipedia
             (offset_nem_sat_aug_4, datetime(2006, 9, 2), True),
@@ -1622,12 +1621,12 @@ class TestFY5253NearestEndMonthQuarter(TestBase):
 
         assertEq(offset, datetime(2012, 5, 31), datetime(2012, 8, 30))
         assertEq(offset, datetime(2012, 5, 30), datetime(2012, 5, 31))
-        
-        offset2 = FY5253Quarter(weekday=5, startingMonth=12, 
+
+        offset2 = FY5253Quarter(weekday=5, startingMonth=12,
                      variation="last", qtr_with_extra_week=4)
-        
+
         assertEq(offset2, datetime(2013,1,15), datetime(2013, 3, 30))
-        
+
 class TestQuarterBegin(TestBase):
 
     def test_repr(self):
@@ -2281,7 +2280,7 @@ def test_compare_ticks():
             assert(kls(3) != kls(4))
 
 
-class TestOffsetNames(unittest.TestCase):
+class TestOffsetNames(tm.TestCase):
     def test_get_offset_name(self):
         assertRaisesRegexp(ValueError, 'Bad rule.*BusinessDays', get_offset_name, BDay(2))
 
@@ -2350,7 +2349,7 @@ def test_quarterly_dont_normalize():
         assert(result.time() == date.time())
 
 
-class TestOffsetAliases(unittest.TestCase):
+class TestOffsetAliases(tm.TestCase):
 
     def setUp(self):
         _offset_map.clear()
@@ -2423,7 +2422,7 @@ def get_all_subclasses(cls):
         ret | get_all_subclasses(this_subclass)
     return ret
 
-class TestCaching(unittest.TestCase):
+class TestCaching(tm.TestCase):
     no_simple_ctr = [WeekOfMonth, FY5253,
                      FY5253Quarter,
                      LastWeekOfMonth]
@@ -2474,7 +2473,7 @@ class TestCaching(unittest.TestCase):
         self.assertTrue(inst2 in _daterange_cache)
 
 
-class TestReprNames(unittest.TestCase):
+class TestReprNames(tm.TestCase):
     def test_str_for_named_is_name(self):
         # look at all the amazing combinations!
         month_prefixes = ['A', 'AS', 'BA', 'BAS', 'Q', 'BQ', 'BQS', 'QS']
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index de6918eb8..ca0eba59f 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -6,9 +6,7 @@ Parts derived from scikits.timeseries code, original authors:
 
 """
 
-from unittest import TestCase
 from datetime import datetime, date, timedelta
-import unittest
 
 from numpy.ma.testutils import assert_equal
 
@@ -33,11 +31,9 @@ from pandas import compat
 from numpy.testing import assert_array_equal
 
 
-class TestPeriodProperties(TestCase):
+class TestPeriodProperties(tm.TestCase):
     "Test properties such as year, month, weekday, etc...."
     #
-    def __init__(self, *args, **kwds):
-        TestCase.__init__(self, *args, **kwds)
 
     def test_quarterly_negative_ordinals(self):
         p = Period(ordinal=-1, freq='Q-DEC')
@@ -494,12 +490,9 @@ def noWrap(item):
     return item
 
 
-class TestFreqConversion(TestCase):
+class TestFreqConversion(tm.TestCase):
     "Test frequency conversion of date objects"
 
-    def __init__(self, *args, **kwds):
-        TestCase.__init__(self, *args, **kwds)
-
     def test_asfreq_corner(self):
         val = Period(freq='A', year=2007)
         self.assertRaises(ValueError, val.asfreq, '5t')
@@ -1074,7 +1067,8 @@ class TestFreqConversion(TestCase):
         assert_equal(ival_S.asfreq('S'), ival_S)
 
 
-class TestPeriodIndex(TestCase):
+class TestPeriodIndex(tm.TestCase):
+
     def setUp(self):
         pass
 
@@ -2168,12 +2162,9 @@ def _permute(obj):
     return obj.take(np.random.permutation(len(obj)))
 
 
-class TestMethods(TestCase):
+class TestMethods(tm.TestCase):
     "Base test class for MaskedArrays."
 
-    def __init__(self, *args, **kwds):
-        TestCase.__init__(self, *args, **kwds)
-
     def test_add(self):
         dt1 = Period(freq='D', year=2008, month=1, day=1)
         dt2 = Period(freq='D', year=2008, month=1, day=2)
@@ -2183,7 +2174,7 @@ class TestMethods(TestCase):
         self.assertRaises(TypeError, dt1.__add__, dt2)
 
 
-class TestPeriodRepresentation(unittest.TestCase):
+class TestPeriodRepresentation(tm.TestCase):
     """
     Wish to match NumPy units
     """
@@ -2244,7 +2235,7 @@ class TestPeriodRepresentation(unittest.TestCase):
         repr(period)
 
 
-class TestComparisons(unittest.TestCase):
+class TestComparisons(tm.TestCase):
     def setUp(self):
         self.january1 = Period('2000-01', 'M')
         self.january2 = Period('2000-01', 'M')
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index 233c9f249..e55dd96d6 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -1,6 +1,5 @@
 from datetime import datetime, timedelta, date, time
 
-import unittest
 import nose
 from pandas.compat import lrange, zip
 
@@ -27,7 +26,7 @@ def _skip_if_no_scipy():
 
 
 @tm.mplskip
-class TestTSPlot(unittest.TestCase):
+class TestTSPlot(tm.TestCase):
     def setUp(self):
         freq = ['S', 'T', 'H', 'D', 'W', 'M', 'Q', 'Y']
         idx = [period_range('12/31/1999', freq=x, periods=100) for x in freq]
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index c60d4b3fd..707b05203 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -16,7 +16,6 @@ from pandas.tseries.frequencies import MONTHS, DAYS
 import pandas.tseries.offsets as offsets
 import pandas as pd
 
-import unittest
 import nose
 
 from pandas.util.testing import (assert_series_equal, assert_almost_equal,
@@ -33,7 +32,7 @@ def _skip_if_no_pytz():
         raise nose.SkipTest("pytz not installed")
 
 
-class TestResample(unittest.TestCase):
+class TestResample(tm.TestCase):
     _multiprocess_can_split_ = True
 
     def setUp(self):
@@ -662,7 +661,7 @@ def _simple_pts(start, end, freq='D'):
     return TimeSeries(np.random.randn(len(rng)), index=rng)
 
 
-class TestResamplePeriodIndex(unittest.TestCase):
+class TestResamplePeriodIndex(tm.TestCase):
 
     _multiprocess_can_split_ = True
 
@@ -1055,7 +1054,7 @@ class TestResamplePeriodIndex(unittest.TestCase):
         self.assertEquals(result.index[0], dates[0])
 
 
-class TestTimeGrouper(unittest.TestCase):
+class TestTimeGrouper(tm.TestCase):
 
     def setUp(self):
         self.ts = Series(np.random.randn(1000),
diff --git a/pandas/tseries/tests/test_timedeltas.py b/pandas/tseries/tests/test_timedeltas.py
index df03851ca..1d34c5b91 100644
--- a/pandas/tseries/tests/test_timedeltas.py
+++ b/pandas/tseries/tests/test_timedeltas.py
@@ -2,7 +2,6 @@
 
 from datetime import datetime, timedelta
 import nose
-import unittest
 
 import numpy as np
 import pandas as pd
@@ -24,7 +23,7 @@ def _skip_if_numpy_not_friendly():
     if _np_version_under1p7:
         raise nose.SkipTest("numpy < 1.7")
 
-class TestTimedeltas(unittest.TestCase):
+class TestTimedeltas(tm.TestCase):
     _multiprocess_can_split_ = True
 
     def setUp(self):
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index a7bd2250f..f2f137e18 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -2,7 +2,6 @@
 from datetime import datetime, time, timedelta, date
 import sys
 import os
-import unittest
 import operator
 
 from distutils.version import LooseVersion
@@ -51,7 +50,7 @@ def _skip_if_no_pytz():
         raise nose.SkipTest("pytz not installed")
 
 
-class TestTimeSeriesDuplicates(unittest.TestCase):
+class TestTimeSeriesDuplicates(tm.TestCase):
     _multiprocess_can_split_ = True
 
     def setUp(self):
@@ -271,7 +270,7 @@ def assert_range_equal(left, right):
     assert(left.tz == right.tz)
 
 
-class TestTimeSeries(unittest.TestCase):
+class TestTimeSeries(tm.TestCase):
     _multiprocess_can_split_ = True
 
     def test_is_(self):
@@ -1420,7 +1419,7 @@ class TestTimeSeries(unittest.TestCase):
         result = rng.normalize()
         expected = date_range('1/1/2000', periods=10, freq='D')
         self.assert_(result.equals(expected))
-        
+
         rng_ns = pd.DatetimeIndex(np.array([1380585623454345752, 1380585612343234312]).astype("datetime64[ns]"))
         rng_ns_normalized = rng_ns.normalize()
         expected = pd.DatetimeIndex(np.array([1380585600000000000, 1380585600000000000]).astype("datetime64[ns]"))
@@ -1878,7 +1877,7 @@ def _simple_ts(start, end, freq='D'):
     return Series(np.random.randn(len(rng)), index=rng)
 
 
-class TestDatetimeIndex(unittest.TestCase):
+class TestDatetimeIndex(tm.TestCase):
     _multiprocess_can_split_ = True
 
     def test_hash_error(self):
@@ -2217,7 +2216,7 @@ class TestDatetimeIndex(unittest.TestCase):
                 df.columns.join(s.index, how=join)
 
 
-class TestDatetime64(unittest.TestCase):
+class TestDatetime64(tm.TestCase):
     """
     Also test supoprt for datetime64[ns] in Series / DataFrame
     """
@@ -2431,7 +2430,7 @@ class TestDatetime64(unittest.TestCase):
         s.ix[datetime(1900, 1, 1):datetime(2100, 1, 1)]
 
 
-class TestSeriesDatetime64(unittest.TestCase):
+class TestSeriesDatetime64(tm.TestCase):
 
     def setUp(self):
         self.series = Series(date_range('1/1/2000', periods=10))
@@ -2550,7 +2549,7 @@ class TestSeriesDatetime64(unittest.TestCase):
         self.assertEquals(result.name, df.index[2])
 
 
-class TestTimestamp(unittest.TestCase):
+class TestTimestamp(tm.TestCase):
 
     def test_class_ops(self):
         _skip_if_no_pytz()
@@ -2794,7 +2793,7 @@ class TestTimestamp(unittest.TestCase):
             tm.assert_series_equal(result, expected)
 
 
-class TestSlicing(unittest.TestCase):
+class TestSlicing(tm.TestCase):
 
     def test_slice_year(self):
         dti = DatetimeIndex(freq='B', start=datetime(2005, 1, 1), periods=500)
diff --git a/pandas/tseries/tests/test_timezones.py b/pandas/tseries/tests/test_timezones.py
index 083de9589..d82f91767 100644
--- a/pandas/tseries/tests/test_timezones.py
+++ b/pandas/tseries/tests/test_timezones.py
@@ -2,7 +2,6 @@
 from datetime import datetime, time, timedelta, tzinfo, date
 import sys
 import os
-import unittest
 import nose
 
 import numpy as np
@@ -65,7 +64,7 @@ fixed_off = FixedOffset(-420, '-07:00')
 fixed_off_no_name = FixedOffset(-330, None)
 
 
-class TestTimeZoneSupport(unittest.TestCase):
+class TestTimeZoneSupport(tm.TestCase):
     _multiprocess_can_split_ = True
 
     def setUp(self):
@@ -366,18 +365,18 @@ class TestTimeZoneSupport(unittest.TestCase):
         tz = pytz.timezone('US/Eastern')
         dr = date_range(datetime(2011, 11, 6, 0), periods=5,
                         freq=datetools.Hour())
-        self.assertRaises(pytz.AmbiguousTimeError, dr.tz_localize, 
+        self.assertRaises(pytz.AmbiguousTimeError, dr.tz_localize,
                           tz, infer_dst=True)
-        
+
         # With repeated hours, we can infer the transition
-        dr = date_range(datetime(2011, 11, 6, 0), periods=5, 
+        dr = date_range(datetime(2011, 11, 6, 0), periods=5,
                         freq=datetools.Hour(), tz=tz)
-        di = DatetimeIndex(['11/06/2011 00:00', '11/06/2011 01:00', 
-                            '11/06/2011 01:00', '11/06/2011 02:00', 
+        di = DatetimeIndex(['11/06/2011 00:00', '11/06/2011 01:00',
+                            '11/06/2011 01:00', '11/06/2011 02:00',
                             '11/06/2011 03:00'])
         localized = di.tz_localize(tz, infer_dst=True)
         self.assert_(np.array_equal(dr, localized))
-        
+
         # When there is no dst transition, nothing special happens
         dr = date_range(datetime(2011, 6, 1, 0), periods=10,
                         freq=datetools.Hour())
@@ -673,7 +672,7 @@ class TestTimeZoneSupport(unittest.TestCase):
             self.assert_(idx1.equals(other))
 
 
-class TestTimeZones(unittest.TestCase):
+class TestTimeZones(tm.TestCase):
     _multiprocess_can_split_ = True
 
     def setUp(self):
diff --git a/pandas/tseries/tests/test_tslib.py b/pandas/tseries/tests/test_tslib.py
index 40dbb2d37..9a8c19bdc 100644
--- a/pandas/tseries/tests/test_tslib.py
+++ b/pandas/tseries/tests/test_tslib.py
@@ -1,4 +1,3 @@
-import unittest
 import nose
 
 import numpy as np
@@ -7,15 +6,12 @@ from pandas import tslib
 import datetime
 
 from pandas.core.api import Timestamp
-
 from pandas.tslib import period_asfreq, period_ordinal
-
 from pandas.tseries.frequencies import get_freq
-
 from pandas import _np_version_under1p7
+import pandas.util.testing as tm
 
-
-class TestTimestamp(unittest.TestCase):
+class TestTimestamp(tm.TestCase):
     def test_bounds_with_different_units(self):
         out_of_bounds_dates = (
             '1677-09-21',
@@ -61,7 +57,7 @@ class TestTimestamp(unittest.TestCase):
         # One us more than the maximum is an error
         self.assertRaises(ValueError, tslib.Timestamp, max_ts_us + one_us)
 
-class TestDatetimeParsingWrappers(unittest.TestCase):
+class TestDatetimeParsingWrappers(tm.TestCase):
     def test_does_not_convert_mixed_integer(self):
         bad_date_strings = (
             '-50000',
@@ -91,7 +87,7 @@ class TestDatetimeParsingWrappers(unittest.TestCase):
             )
 
 
-class TestArrayToDatetime(unittest.TestCase):
+class TestArrayToDatetime(tm.TestCase):
     def test_parsing_valid_dates(self):
         arr = np.array(['01-01-2013', '01-02-2013'], dtype=object)
         self.assert_(
@@ -194,7 +190,7 @@ class TestArrayToDatetime(unittest.TestCase):
         )
 
 
-class TestTimestampNsOperations(unittest.TestCase):
+class TestTimestampNsOperations(tm.TestCase):
     def setUp(self):
         if _np_version_under1p7:
             raise nose.SkipTest('numpy >= 1.7 required')
@@ -224,7 +220,7 @@ class TestTimestampNsOperations(unittest.TestCase):
         self.assertEqual(self.timestamp.value, 1367392545123456000)
 
 
-class TestTslib(unittest.TestCase):
+class TestTslib(tm.TestCase):
 
     def test_intraday_conversion_factors(self):
         self.assertEqual(period_asfreq(1, get_freq('D'), get_freq('H'), False), 24)
@@ -283,7 +279,7 @@ class TestTslib(unittest.TestCase):
         # Tuesday
         self.assertEqual(11418, period_ordinal(2013, 10, 8, 0, 0, 0, 0, 0, get_freq('B')))
 
-class TestTomeStampOps(unittest.TestCase):
+class TestTomeStampOps(tm.TestCase):
     def test_timestamp_and_datetime(self):
         self.assertEqual((Timestamp(datetime.datetime(2013, 10,13)) - datetime.datetime(2013, 10,12)).days, 1)
         self.assertEqual((datetime.datetime(2013, 10, 12) - Timestamp(datetime.datetime(2013, 10,13))).days, -1)
diff --git a/pandas/tseries/tests/test_util.py b/pandas/tseries/tests/test_util.py
index 8bf448118..b10c4351c 100644
--- a/pandas/tseries/tests/test_util.py
+++ b/pandas/tseries/tests/test_util.py
@@ -1,6 +1,5 @@
 from pandas.compat import range
 import nose
-import unittest
 
 import numpy as np
 from numpy.testing.decorators import slow
@@ -14,7 +13,7 @@ from pandas.tseries.tools import normalize_date
 from pandas.tseries.util import pivot_annual, isleapyear
 
 
-class TestPivotAnnual(unittest.TestCase):
+class TestPivotAnnual(tm.TestCase):
     """
     New pandas of scikits.timeseries pivot_annual
     """
