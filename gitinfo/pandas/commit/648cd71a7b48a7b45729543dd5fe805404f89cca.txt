commit 648cd71a7b48a7b45729543dd5fe805404f89cca
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Sat May 9 12:14:53 2020 -0700

    CLN: avoid _typ checks in _libs (#34084)

diff --git a/pandas/_libs/tslibs/offsets.pyx b/pandas/_libs/tslibs/offsets.pyx
index 0c9e0e2f7..3647669cb 100644
--- a/pandas/_libs/tslibs/offsets.pyx
+++ b/pandas/_libs/tslibs/offsets.pyx
@@ -127,7 +127,7 @@ def apply_index_wraps(func):
     # not play nicely with cython class methods
     def wrapper(self, other):
 
-        is_index = getattr(other, "_typ", "") == "datetimeindex"
+        is_index = not util.is_array(other._data)
 
         # operate on DatetimeArray
         arr = other._data if is_index else other
@@ -412,11 +412,6 @@ class _BaseOffset:
         return type(self)(n=1, normalize=self.normalize, **self.kwds)
 
     def __add__(self, other):
-        if getattr(other, "_typ", None) in ["datetimeindex", "periodindex",
-                                            "datetimearray", "periodarray",
-                                            "series", "period", "dataframe"]:
-            # defer to the other class's implementation
-            return other + self
         try:
             return self.apply(other)
         except ApplyTypeError:
@@ -613,10 +608,7 @@ class BaseOffset(_BaseOffset):
         return self.__add__(other)
 
     def __rsub__(self, other):
-        if getattr(other, '_typ', None) in ['datetimeindex', 'series']:
-            # i.e. isinstance(other, (ABCDatetimeIndex, ABCSeries))
-            return other - self
-        return -self + other
+        return (-self).__add__(other)
 
 
 cdef class _Tick(ABCTick):
diff --git a/pandas/_libs/tslibs/timedeltas.pyx b/pandas/_libs/tslibs/timedeltas.pyx
index 9016df335..68e70458b 100644
--- a/pandas/_libs/tslibs/timedeltas.pyx
+++ b/pandas/_libs/tslibs/timedeltas.pyx
@@ -579,21 +579,9 @@ def _binary_op_method_timedeltalike(op, name):
     # define a binary operation that only works if the other argument is
     # timedelta like or an array of timedeltalike
     def f(self, other):
-        if hasattr(other, '_typ'):
-            # Series, DataFrame, ...
-            if other._typ == 'dateoffset' and hasattr(other, 'delta'):
-                # Tick offset
-                return op(self, other.delta)
-            return NotImplemented
-
-        elif other is NaT:
+        if other is NaT:
             return NaT
 
-        elif is_timedelta64_object(other):
-            # convert to Timedelta below; avoid catching this in
-            # has-dtype check before then
-            pass
-
         elif is_datetime64_object(other) or (
            PyDateTime_Check(other) and not isinstance(other, ABCTimestamp)):
             # this case is for a datetime object that is specifically
@@ -614,6 +602,7 @@ def _binary_op_method_timedeltalike(op, name):
                 return NotImplemented
 
         elif not _validate_ops_compat(other):
+            # Includes any of our non-cython classes
             return NotImplemented
 
         try:
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index aabc10609..d9e67f45e 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -85,7 +85,8 @@ def apply_wraps(func):
         elif isinstance(other, (np.datetime64, datetime, date)):
             other = Timestamp(other)
         else:
-            raise TypeError(other)
+            # This will end up returning NotImplemented back in __add__
+            raise ApplyTypeError
 
         tz = other.tzinfo
         nano = other.nanosecond
