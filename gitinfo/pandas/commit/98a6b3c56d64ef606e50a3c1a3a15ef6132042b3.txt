commit 98a6b3c56d64ef606e50a3c1a3a15ef6132042b3
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Sat Mar 14 09:34:47 2020 -0700

    ENH: implement ExtensionIndex.insert (#32476)

diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index 23e68802e..319664894 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -5195,9 +5195,11 @@ class Index(IndexOpsMixin, PandasObject):
         -------
         new_index : Index
         """
-        _self = np.asarray(self)
-        item = self._coerce_scalar_to_index(item)._ndarray_values
-        idx = np.concatenate((_self[:loc], item, _self[loc:]))
+        # Note: this method is overriden by all ExtensionIndex subclasses,
+        #  so self is never backed by an EA.
+        arr = np.asarray(self)
+        item = self._coerce_scalar_to_index(item)._values
+        idx = np.concatenate((arr[:loc], item, arr[loc:]))
         return self._shallow_copy_with_infer(idx)
 
     def drop(self, labels, errors: str_t = "raise"):
diff --git a/pandas/core/indexes/extension.py b/pandas/core/indexes/extension.py
index 4984fc275..6d5f0dbb8 100644
--- a/pandas/core/indexes/extension.py
+++ b/pandas/core/indexes/extension.py
@@ -6,6 +6,7 @@ from typing import List
 import numpy as np
 
 from pandas.compat.numpy import function as nv
+from pandas.errors import AbstractMethodError
 from pandas.util._decorators import Appender, cache_readonly
 
 from pandas.core.dtypes.common import (
@@ -248,6 +249,10 @@ class ExtensionIndex(Index):
         result = self._data.repeat(repeats, axis=axis)
         return self._shallow_copy(result)
 
+    def insert(self, loc: int, item):
+        # ExtensionIndex subclasses must override Index.insert
+        raise AbstractMethodError(self)
+
     def _concat_same_dtype(self, to_concat, name):
         arr = type(self._data)._concat_same_type(to_concat)
         return type(self)._simple_new(arr, name=name)
