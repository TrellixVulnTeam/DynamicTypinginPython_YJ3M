commit 714b28c6b3fc8aca86b2f0bea761835995bc78f9
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon May 14 10:49:52 2012 -0400

    TST: test with headers

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index b8cc2f0d1..aeb36963c 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -49,8 +49,12 @@ names : array-like
 na_values : list-like or dict, default None
     Additional strings to recognize as NA/NaN. If dict passed, specific
     per-column NA values
-parse_dates : boolean or list of column numbers/name, default False
-    Attempt to parse dates in the indicated columns
+parse_dates : boolean, list of ints or names, list of lists, or dict
+    True -> try parsing all columns
+    [1, 2, 3] -> try parsing columns 1, 2, 3
+    [[1, 3]] -> combine columns 1 and 3 and parse as date (for dates split
+                across multiple columns), and munge column names
+    {'foo' : [1, 3]} -> parse columns 1, 3 as date and call result 'foo'
 date_parser : function
     Function to use for converting dates to strings. Defaults to
     dateutil.parser
@@ -936,15 +940,16 @@ def _try_convert_dates(parser, colspec, data_dict, columns):
     try:
         new_col = parser(*to_parse)
     except DateConversionError:
-        new_col = _concat_date_cols(to_parse)
+        new_col = parser(_concat_date_cols(to_parse))
     return new_name, new_col
 
 def _concat_date_cols(date_cols):
     if len(date_cols) == 1:
         return date_cols[0]
-    concat = lambda x: ' '.join(x)
-    return np.array(np.apply_along_axis(concat, 0, np.vstack(date_cols)),
-                    dtype=object)
+
+    # stripped = [map(str.strip, x) for x in date_cols]
+    return np.array([' '.join(x) for x in zip(*date_cols)], dtype=object)
+
 
 class FixedWidthReader(object):
     """
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index e8589757c..3960f8523 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -104,7 +104,7 @@ KORD,19990127, 23:00:00, 22:56:00, -0.5900, 1.7100, 4.6000, 0.0000, 280.0000
         def func(*date_cols):
             return lib.try_parse_dates(parsers._concat_date_cols(date_cols))
 
-        df = read_table(StringIO(data), sep=',', header=None,
+        df = read_csv(StringIO(data), header=None,
                         date_parser=func,
                         parse_dates={'nominal' : [1, 2],
                                      'actual' : [1,3]})
@@ -122,7 +122,7 @@ KORD,19990127, 21:00:00, 21:18:00, -0.9900, 2.0100, 3.6000, 0.0000, 270.0000
 KORD,19990127, 22:00:00, 21:56:00, -0.5900, 1.7100, 5.1000, 0.0000, 290.0000
 KORD,19990127, 23:00:00, 22:56:00, -0.5900, 1.7100, 4.6000, 0.0000, 280.0000
 """
-        df = read_table(StringIO(data), sep=',', header=None,
+        df = read_csv(StringIO(data), header=None,
                         parse_dates=[[1, 2], [1,3]])
         self.assert_('X.2_X.3' in df)
         self.assert_('X.2_X.4' in df)
@@ -137,12 +137,25 @@ KORD,19990127 21:00:00, 20:56:00, -0.5900, 2.2100, 5.7000, 0.0000, 280.0000
 KORD,19990127 21:00:00, 21:18:00, -0.9900, 2.0100, 3.6000, 0.0000, 270.0000
 KORD,19990127 22:00:00, 21:56:00, -0.5900, 1.7100, 5.1000, 0.0000, 290.0000
 '''
-        df = read_table(StringIO(data), sep=',', header=None,
-                        parse_dates=[1], index_col=1)
+        df = read_csv(StringIO(data), sep=',', header=None,
+                      parse_dates=[1], index_col=1)
         from datetime import datetime
         d = datetime(1999, 1, 27, 19, 0)
         self.assert_(df.index[0] == d)
 
+    def test_multiple_date_cols_with_header(self):
+        data = """\
+ID,date,NominalTime,ActualTime,TDew,TAir,Windspeed,Precip,WindDir
+KORD,19990127, 19:00:00, 18:56:00, 0.8100, 2.8100, 7.2000, 0.0000, 280.0000
+KORD,19990127, 20:00:00, 19:56:00, 0.0100, 2.2100, 7.2000, 0.0000, 260.0000
+KORD,19990127, 21:00:00, 20:56:00, -0.5900, 2.2100, 5.7000, 0.0000, 280.0000
+KORD,19990127, 21:00:00, 21:18:00, -0.9900, 2.0100, 3.6000, 0.0000, 270.0000
+KORD,19990127, 22:00:00, 21:56:00, -0.5900, 1.7100, 5.1000, 0.0000, 290.0000
+KORD,19990127, 23:00:00, 22:56:00, -0.5900, 1.7100, 4.6000, 0.0000, 280.0000"""
+
+        df = read_csv(StringIO(data), parse_dates={'nominal': [1, 2]})
+        self.assert_(not isinstance(df.nominal[0], basestring))
+
     def test_malformed(self):
         # all
         data = """ignore
@@ -429,7 +442,7 @@ baz,7,8,9
         parsed = excel_data.parse('Sheet1')
         expected = DataFrame([['aaaa','bbbbb']], columns=['Test', 'Test1'])
         assert_frame_equal(parsed, expected)
-        
+
     def test_excel_cell_error_na(self):
         try:
             import xlrd
