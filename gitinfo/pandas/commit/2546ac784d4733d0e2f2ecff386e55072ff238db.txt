commit 2546ac784d4733d0e2f2ecff386e55072ff238db
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Feb 9 00:08:30 2012 -0500

    TST: test coverage

diff --git a/pandas/sparse/frame.py b/pandas/sparse/frame.py
index 4686f35a6..d0749ea59 100644
--- a/pandas/sparse/frame.py
+++ b/pandas/sparse/frame.py
@@ -408,26 +408,16 @@ class SparseDataFrame(DataFrame):
     # Arithmetic-related methods
 
     def _combine_frame(self, other, func, fill_value=None, level=None):
-        new_index = self.index.union(other.index)
-        new_columns = self.columns.union(other.columns)
+        this, other = self.align(other, join='outer', level=level,
+                                 copy=False)
+        new_index, new_columns = this.index, this.columns
 
         if fill_value is not None or level is not None:
             raise NotImplementedError
 
-        this = self
-        if self.index is not new_index:
-            this = self.reindex(new_index)
-            other = other.reindex(new_index)
-
         if not self and not other:
             return SparseDataFrame(index=new_index)
 
-        if not other:
-            return self * nan
-
-        if not self:
-            return other * nan
-
         new_data = {}
         for col in new_columns:
             if col in this and col in other:
@@ -535,7 +525,10 @@ class SparseDataFrame(DataFrame):
         for col in columns:
             if col not in self:
                 continue
-            new_arrays[col] = com.take_1d(self[col].values, row_indexer)
+            if row_indexer is not None:
+                new_arrays[col] = com.take_1d(self[col].values, row_indexer)
+            else:
+                new_arrays[col] = self[col]
 
         return self._constructor(new_arrays, index=index, columns=columns)
 
diff --git a/pandas/sparse/tests/test_sparse.py b/pandas/sparse/tests/test_sparse.py
index 4635f3143..eb989b012 100644
--- a/pandas/sparse/tests/test_sparse.py
+++ b/pandas/sparse/tests/test_sparse.py
@@ -872,10 +872,10 @@ class TestSparseDataFrame(TestCase, test_frame.SafeForSparse):
         self.assert_(not empty)
 
         foo = self.frame + self.empty
-        assert_sp_frame_equal(foo, self.frame * np.nan)
+        assert_frame_equal(foo, self.frame * np.nan)
 
         foo = self.empty + self.frame
-        assert_sp_frame_equal(foo, self.frame * np.nan)
+        assert_frame_equal(foo, self.frame * np.nan)
 
     def test_scalar_ops(self):
         pass
