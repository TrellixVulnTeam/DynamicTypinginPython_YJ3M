commit dc57f285939063eff9506c39a5db7285a3be4a85
Author: Kenny Huynh <hkennyv@gmail.com>
Date:   Sun Apr 26 12:57:37 2020 -0700

    BUG, TST, DOC: fix core.missing._akima_interpolate will raise AttributeError (#33784)

diff --git a/doc/source/whatsnew/v1.1.0.rst b/doc/source/whatsnew/v1.1.0.rst
index 841eb85ff..e06b58692 100644
--- a/doc/source/whatsnew/v1.1.0.rst
+++ b/doc/source/whatsnew/v1.1.0.rst
@@ -574,6 +574,7 @@ Missing
 - Calling :meth:`fillna` on an empty Series now correctly returns a shallow copied object. The behaviour is now consistent with :class:`Index`, :class:`DataFrame` and a non-empty :class:`Series` (:issue:`32543`).
 - Bug in :meth:`replace` when argument ``to_replace`` is of type dict/list and is used on a :class:`Series` containing ``<NA>`` was raising a ``TypeError``. The method now handles this by ignoring ``<NA>`` values when doing the comparison for the replacement (:issue:`32621`)
 - Bug in :meth:`~Series.any` and :meth:`~Series.all` incorrectly returning ``<NA>`` for all ``False`` or all ``True`` values using the nulllable boolean dtype and with ``skipna=False`` (:issue:`33253`)
+- Clarified documentation on interpolate with method =akima. The ``der`` parameter must be scalar or None (:issue:`33426`)
 
 MultiIndex
 ^^^^^^^^^^
diff --git a/pandas/core/missing.py b/pandas/core/missing.py
index 2acaa808d..7b5399ca8 100644
--- a/pandas/core/missing.py
+++ b/pandas/core/missing.py
@@ -445,8 +445,9 @@ def _akima_interpolate(xi, yi, x, der=0, axis=0):
         A 1-D array of real values.  `yi`'s length along the interpolation
         axis must be equal to the length of `xi`. If N-D array, use axis
         parameter to select correct axis.
-    x : scalar or array_like of length M.
-    der : int or list, optional
+    x : scalar or array_like
+        Of length M.
+    der : int, optional
         How many derivatives to extract; None for all potentially
         nonzero derivatives (that is a number equal to the number
         of points), or a list of derivatives to extract. This number
@@ -468,12 +469,7 @@ def _akima_interpolate(xi, yi, x, der=0, axis=0):
 
     P = interpolate.Akima1DInterpolator(xi, yi, axis=axis)
 
-    if der == 0:
-        return P(x)
-    elif interpolate._isscalar(der):
-        return P(x, der=der)
-    else:
-        return [P(x, nu) for nu in der]
+    return P(x, nu=der)
 
 
 def _cubicspline_interpolate(xi, yi, x, axis=0, bc_type="not-a-knot", extrapolate=None):
diff --git a/pandas/tests/series/methods/test_interpolate.py b/pandas/tests/series/methods/test_interpolate.py
index b26cb21bc..db1c07e1b 100644
--- a/pandas/tests/series/methods/test_interpolate.py
+++ b/pandas/tests/series/methods/test_interpolate.py
@@ -133,17 +133,28 @@ class TestSeriesInterpolateData:
 
         ser = Series([10, 11, 12, 13])
 
+        # interpolate at new_index where `der` is zero
         expected = Series(
             [11.00, 11.25, 11.50, 11.75, 12.00, 12.25, 12.50, 12.75, 13.00],
             index=Index([1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 2.75, 3.0]),
         )
-        # interpolate at new_index
         new_index = ser.index.union(Index([1.25, 1.5, 1.75, 2.25, 2.5, 2.75])).astype(
             float
         )
         interp_s = ser.reindex(new_index).interpolate(method="akima")
         tm.assert_series_equal(interp_s[1:3], expected)
 
+        # interpolate at new_index where `der` is a non-zero int
+        expected = Series(
+            [11.0, 1.0, 1.0, 1.0, 12.0, 1.0, 1.0, 1.0, 13.0],
+            index=Index([1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 2.75, 3.0]),
+        )
+        new_index = ser.index.union(Index([1.25, 1.5, 1.75, 2.25, 2.5, 2.75])).astype(
+            float
+        )
+        interp_s = ser.reindex(new_index).interpolate(method="akima", der=1)
+        tm.assert_series_equal(interp_s[1:3], expected)
+
     @td.skip_if_no_scipy
     def test_interpolate_piecewise_polynomial(self):
         ser = Series([10, 11, 12, 13])
