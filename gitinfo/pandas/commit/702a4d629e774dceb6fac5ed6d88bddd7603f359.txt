commit 702a4d629e774dceb6fac5ed6d88bddd7603f359
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Oct 2 21:27:06 2011 -0400

    TST: finish up pandas.core test coverage, test Series.align

diff --git a/RELEASE.rst b/RELEASE.rst
index 33bdc66e2..71e1ecdeb 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -21,6 +21,8 @@ This is an incremental bug fix and performance enhancement release
   - Refactored `Index` classes to have a `join` method and associated data
     alignment routines throughout the codebase to be able to leverage optimized
     joining / merging routines.
+  - Added `Series.align` method for aligning two series with choice of join
+    method
   - Wrote faster Cython data alignment / merging routines resulting in
     substantial speed increases
   - Added `is_monotonic` property to `Index` classes with associated Cython
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 9cab91d9d..a3df3b16b 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -972,7 +972,7 @@ def join_managers(left, right, axis=1, how='left'):
 
     # copies all data by definition
 
-    kinds = [FloatBlock, ObjectBlock, BoolBlock, IntBlock]
+    kinds = set(left_blockmap) | set(right_blockmap)
     for klass in kinds:
         if klass in left_blockmap and klass in right_blockmap:
             # true merge, do not produce intermediate copy
@@ -1002,9 +1002,6 @@ def join_managers(left, right, axis=1, how='left'):
                 res_blk = blk.reindex_axis(rindexer, rmask, rneed_masking,
                                            axis=axis)
             res_blk.ref_items = result_items
-        else:
-            # not found in either
-            continue
 
         result_blocks.append(res_blk)
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 3259a9632..64f86aeb8 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -26,6 +26,8 @@ import pandas.util.testing as tm
 #-------------------------------------------------------------------------------
 # DataFrame test cases
 
+JOIN_TYPES = ['inner', 'outer', 'left', 'right']
+
 class CheckIndexing(object):
 
     def test_getitem(self):
@@ -2490,7 +2492,6 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
                           how='left')
 
     def test_join_index_mixed(self):
-        join_types = ['inner', 'outer', 'left', 'right']
 
         df1 = DataFrame({'A' : 1., 'B' : 2, 'C' : 'foo', 'D' : True},
                         index=np.arange(10),
@@ -2520,7 +2521,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         df2['int'] = 1
         df2['float'] = 1.
 
-        for kind in join_types:
+        for kind in JOIN_TYPES:
             joined = df1.join(df2, how=kind)
             expected = _join_by_hand(df1, df2, how=kind)
             assert_frame_equal(joined, expected)
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index d57927939..18a8df27b 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -17,6 +17,8 @@ import pandas.util.testing as common
 #-------------------------------------------------------------------------------
 # Series test cases
 
+JOIN_TYPES = ['inner', 'outer', 'left', 'right']
+
 class TestSeries(unittest.TestCase):
 
     def setUp(self):
@@ -869,6 +871,49 @@ class TestSeries(unittest.TestCase):
         import math
         assert_series_equal(self.ts.apply(math.exp), np.exp(self.ts))
 
+    def test_align(self):
+        def _check_align(a, b, how='left'):
+            aa, ab = a.align(b, join=how)
+
+            join_index = a.index.join(b.index, how=how)
+            ea = a.reindex(join_index)
+            eb = b.reindex(join_index)
+
+            assert_series_equal(aa, ea)
+            assert_series_equal(ab, eb)
+
+        for kind in JOIN_TYPES:
+            _check_align(self.ts[2:], self.ts[:-5])
+
+    def test_align_nocopy(self):
+        b = self.ts[:5].copy()
+
+        # do copy
+        a = self.ts.copy()
+        ra, _ = a.align(b, join='left')
+        ra[:5] = 5
+        self.assert_(not (a[:5] == 5).any())
+
+        # do not copy
+        a = self.ts.copy()
+        ra, _ = a.align(b, join='left', copy=False)
+        ra[:5] = 5
+        self.assert_((a[:5] == 5).all())
+
+        # do copy
+        a = self.ts.copy()
+        b = self.ts[:5].copy()
+        _, rb = a.align(b, join='right')
+        rb[:3] = 5
+        self.assert_(not (b[:3] == 5).any())
+
+        # do not copy
+        a = self.ts.copy()
+        b = self.ts[:5].copy()
+        _, rb = a.align(b, join='right', copy=False)
+        rb[:2] = 5
+        self.assert_((b[:2] == 5).all())
+
     def test_reindex(self):
         identity = self.series.reindex(self.series.index)
         self.assertEqual(id(self.series.index), id(identity.index))
