commit b72cfb5220589f61cca67ecfcfaef8d042949273
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Oct 14 18:12:27 2011 -0400

    API: removed functions and methods deprecated in 0.4 Series, address GH #229

diff --git a/RELEASE.rst b/RELEASE.rst
index 33a6e46c7..e12bdab36 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -22,6 +22,52 @@ pandas 0.5.0
   - Changed `buffer` argument name in `Series.to_string` to `buf`
   - `Series.to_string` and `DataFrame.to_string` now return strings by default
     instead of printing to sys.stdout
+  - Series functions renamed (and thus deprecated) in 0.4 series have been
+    removed:
+
+    * `asOf`, use `asof`
+    * `toDict`, use `to_dict`
+    * `toString`, use `to_string`
+    * `toCSV`, use `to_csv`
+    * `merge`, use `map`
+    * `applymap`, use `apply`
+    * `combineFirst`, use `combine_first`
+    * `_firstTimeWithValue` use `first_valid_index`
+    * `_lastTimeWithValue` use `last_valid_index`
+
+  - DataFrame functions renamed / deprecated in 0.4 series have been removed:
+
+    * `asMatrix` method, use `as_matrix` or `values` attribute
+    * `combineFirst`, use `combine_first`
+    * `getXS`, use `xs`
+    * `merge`, use `join`
+    * `fromRecords`, use `from_records`
+    * `fromcsv`, use `from_csv`
+    * `toRecords`, use `to_records`
+    * `toDict`, use `to_dict`
+    * `toString`, use `to_string`
+    * `toCSV`, use `to_csv`
+    * `_firstTimeWithValue` use `first_valid_index`
+    * `_lastTimeWithValue` use `last_valid_index`
+    * `toDataMatrix` is no longer needed
+    * `rows()` method, use `index` attribute
+    * `cols()` method, use `columns` attribute
+    * `dropEmptyRows()`, use `dropna(how='all')`
+    * `dropIncompleteRows()`, use `dropna()`
+    * `tapply(f)`, use `apply(f, axis=1)`
+    * `tgroupby(keyfunc, aggfunc)`, use `groupby` with `axis=1`
+
+  - Other outstanding deprecations have been removed:
+
+    * `indexField` argument in `DataFrame.from_records`
+    * `missingAtEnd` argument in `Series.order`. Use `na_last` instead
+    * `Series.fromValue` classmethod, use regular `Series` constructor instead
+    * Functions `parseCSV`, `parseText`, and `parseExcel` methods in
+      `pandas.io.parsers` have been removed
+    * `Index.asOfDate` function
+    * `Panel.getMinorXS` (use `minor_xs`) and `Panel.getMajorXS` (use
+      `major_xs`)
+    * `Panel.toWide`, use `Panel.to_wide` instead
 
 **New features / modules**
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 02481123e..4c17016fe 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -16,7 +16,6 @@ from StringIO import StringIO
 import csv
 import operator
 import sys
-import warnings
 
 from numpy import nan
 import numpy as np
@@ -30,7 +29,6 @@ from pandas.core.index import Index, MultiIndex, NULL_INDEX, _ensure_index
 from pandas.core.indexing import _NDFrameIndexer, _maybe_droplevels
 from pandas.core.internals import BlockManager, make_block, form_blocks
 from pandas.core.series import Series, _is_bool_indexer
-from pandas.util.decorators import deprecate
 from pandas.util import py3compat
 import pandas.core.common as common
 import pandas.core.datetools as datetools
@@ -355,8 +353,7 @@ class DataFrame(NDFrame):
         return dict((k, v.to_dict()) for k, v in self.iteritems())
 
     @classmethod
-    def from_records(cls, data, index=None, indexField=None,
-                     exclude=None):
+    def from_records(cls, data, index=None, exclude=None):
         """
         Convert structured or record ndarray to DataFrame
 
@@ -371,11 +368,6 @@ class DataFrame(NDFrame):
         -------
         df : DataFrame
         """
-        if indexField is not None:  # pragma: no cover
-            warnings.warn("indexField argument is deprecated. Use index "
-                          "instead", FutureWarning)
-            index = indexField
-
         columns, sdict = _rec_to_dict(data)
 
         if exclude is None:
@@ -2943,124 +2935,6 @@ class DataFrame(NDFrame):
         """
         return self.mul(other, fill_value=1.)
 
-    def toDataMatrix(self):  # pragma: no cover
-        warnings.warn("toDataMatrix will disappear in next release "
-                      "as there is no longer a DataMatrix class",
-                      FutureWarning)
-        return self.copy()
-
-    def rows(self):  # pragma: no cover
-        """Alias for the frame's index"""
-        warnings.warn("Replace usage of .rows() with .index, will be removed "
-                      "in next release", FutureWarning)
-        return self.index
-
-    def cols(self):  # pragma: no cover
-        """Return sorted list of frame's columns"""
-        warnings.warn("Replace usage of .cols() with .columns, will be "
-                      "removed in next release", FutureWarning)
-        return list(self.columns)
-
-    def asMatrix(self, *args, **kwargs):  # pragma: no cover
-        warnings.warn("asMatrix is deprecated. Use 'as_matrix' or .values "
-                      "instead", FutureWarning)
-        return self.as_matrix(*args, **kwargs)
-
-    @classmethod
-    def fromRecords(cls, *args, **kwargs):  # pragma: no cover
-        warnings.warn("fromRecords is deprecated. Use 'from_records' "
-                      "instead", FutureWarning)
-        return cls.from_records(*args, **kwargs)
-
-    @classmethod
-    def fromcsv(cls, *args, **kwargs):  # pragma: no cover
-        warnings.warn("fromcsv is deprecated. Use 'from_csv' "
-                      "instead", FutureWarning)
-        return cls.from_csv(*args, **kwargs)
-
-    combineFirst = deprecate('combineFirst', combine_first)
-    getXS = deprecate('getXS', xs)
-    merge = deprecate('merge', join)
-    toRecords = deprecate('toRecords', to_records)
-    toDict = deprecate('toDict', to_dict)
-    toString = deprecate('toString', to_string)
-    _firstTimeWithValue = deprecate('_firstTimeWithValue', first_valid_index)
-    _lastTimeWithValue = deprecate('_lastTimeWithValue', last_valid_index)
-    toCSV = deprecate('toCSV', to_csv)
-
-    def dropEmptyRows(self, specificColumns=None):  # pragma: no cover
-        """
-        Return DataFrame with rows omitted containing ALL NaN values
-        for optionally specified set of columns.
-
-        Parameters
-        ----------
-        specificColumns : list-like, optional keyword
-            Columns to consider in removing NaN values. As a typical
-            application, you might provide the list of the columns involved in
-            a regression to exlude all the missing data in one shot.
-
-        Returns
-        -------
-        This DataFrame with rows containing any NaN values deleted
-        """
-        warnings.warn("dropEmptyRows is deprecated. Use dropna(how='all')",
-                      FutureWarning)
-        return self.dropna(axis=0, subset=specificColumns, how='all')
-
-    def dropIncompleteRows(self, specificColumns=None,
-                           minObs=None):  # pragma: no cover
-        """
-        Return DataFrame with rows omitted containing ANY NaN values for
-        optionally specified set of columns.
-
-        Parameters
-        ----------
-        minObs : int or None (default)
-           Instead of requiring all the columns to have observations, require
-           only minObs observations
-        specificColumns : list-like, optional keyword
-            Columns to consider in removing NaN values. As a typical
-            application, you might provide the list of the columns involved in
-            a regression to exlude all the missing data in one shot.
-
-        Returns
-        -------
-        This DataFrame with rows containing any NaN values deleted
-
-        """
-        warnings.warn("dropEmptyRows is deprecated. Use dropna()",
-                      FutureWarning)
-        if minObs is None:
-            return self.dropna(axis=0, subset=specificColumns, how='any')
-        else:
-            return self.dropna(axis=0, subset=specificColumns, thresh=minObs)
-
-    def tapply(self, func):  # pragma: no cover
-        """
-        Apply func to the transposed DataFrame, results as per apply
-        """
-        warnings.warn("tapply is deprecated. Use apply(f, axis=1)",
-                      FutureWarning)
-        return self.apply(func, axis=1)
-
-    def tgroupby(self, keyfunc, applyfunc):  # pragma: no cover
-        """
-        Aggregate columns based on passed function
-
-        Parameters
-        ----------
-        keyfunc : function
-        applyfunc : function
-
-        Returns
-        -------
-        y : DataFrame
-        """
-        warnings.warn("tgroupby is deprecated. Use groupby with axis=1",
-                      FutureWarning)
-        return self.T.groupby(keyfunc).aggregate(applyfunc).T
-
 def group_agg(values, bounds, f):
     """
     R-style aggregator
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 7582e06ca..418b0940a 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -7,7 +7,7 @@ import numpy as np
 
 from pandas.core.common import (adjoin as _adjoin, _stringify,
                                 _is_bool_indexer, _asarray_tuplesafe)
-from pandas.util.decorators import deprecate, cache_readonly
+from pandas.util.decorators import cache_readonly
 import pandas._tseries as lib
 
 __all__ = ['Index']
@@ -595,11 +595,6 @@ class Index(np.ndarray):
         cp.__dict__.update(self.__dict__)
         return cp
 
-    #----------------------------------------------------------------------
-    # deprecated stuff
-
-    asOfDate = deprecate('asOfDate', asof)
-
 
 class Int64Index(Index):
 
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index d0378821c..64f8e449d 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -14,7 +14,6 @@ from pandas.core.internals import BlockManager, make_block, form_blocks
 from pandas.core.frame import DataFrame, _union_indexes
 from pandas.core.generic import AxisProperty, NDFrame
 from pandas.core.series import Series
-from pandas.util.decorators import deprecate
 from pandas.util import py3compat
 import pandas.core.common as common
 import pandas._tseries as _tseries
@@ -1080,12 +1079,6 @@ class Panel(NDFrame):
             join_minor = self.minor_axis.union(other.minor_axis)
         return join_major, join_minor
 
-    #----------------------------------------------------------------------
-    # Deprecated stuff
-
-    getMinorXS = deprecate('getMinorXS', minor_xs)
-    getMajorXS = deprecate('getMajorXS', major_xs)
-
 WidePanel = Panel
 
 #-------------------------------------------------------------------------------
@@ -1277,8 +1270,6 @@ class LongPanel(DataFrame):
                                    columns=self.minor_axis)
         return Panel.from_dict(data)
 
-    toWide = deprecate('toWide', to_wide)
-
     def toCSV(self, path):
         def format_cols(items):
             cols = ['Major', 'Minor'] + list(items)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index d6db7bbdb..bc921dfd3 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -8,8 +8,6 @@ Data structure for 1-dimensional cross-sectional and time series data
 import csv
 import itertools
 import operator
-import sys
-import warnings
 
 from numpy import nan, ndarray
 import numpy as np
@@ -20,7 +18,6 @@ from pandas.core.daterange import DateRange
 from pandas.core.generic import PandasObject
 from pandas.core.index import Index, MultiIndex, _ensure_index
 from pandas.core.indexing import _SeriesIndexer, _maybe_droplevels
-from pandas.util.decorators import deprecate
 from pandas.util import py3compat
 import pandas.core.common as common
 import pandas.core.datetools as datetools
@@ -1156,7 +1153,7 @@ copy : boolean, default False
         else:
             return Series(np.argsort(values), index=self.index, name=self.name)
 
-    def order(self, na_last=True, ascending=True, **kwds):
+    def order(self, na_last=True, ascending=True):
         """
         Sorts Series object, by value, maintaining index-value link
 
@@ -1179,11 +1176,6 @@ copy : boolean, default False
                 # stable sort not available for object dtype
                 return arr.argsort()
 
-        if 'missingAtEnd' in kwds:  # pragma: no cover
-            warnings.warn("missingAtEnd is deprecated, use na_last",
-                          FutureWarning)
-            na_last = kwds['missingAtEnd']
-
         arr = self.values
         sortedIdx = np.empty(len(self), dtype=np.int32)
 
@@ -1852,24 +1844,6 @@ copy : boolean, default False
     def weekday(self):
         return Series([d.weekday() for d in self.index], index=self.index)
 
-    #----------------------------------------------------------------------
-    # Deprecated stuff
-
-    @classmethod
-    def fromValue(cls, value=nan, index=None, dtype=None):  # pragma: no cover
-        warnings.warn("'fromValue', can call Series(value, index=index) now",
-                      FutureWarning)
-        return Series(value, index=index, dtype=dtype)
-
-    asOf = deprecate('asOf', asof)
-    toDict = deprecate('toDict', to_dict)
-    toString = deprecate('toString', to_string)
-    merge = deprecate('merge', map)
-    applymap = deprecate('applymap', apply)
-    combineFirst = deprecate('combineFirst', combine_first)
-    _firstTimeWithValue = deprecate('_firstTimeWithValue', first_valid_index)
-    _lastTimeWithValue = deprecate('_lastTimeWithValue', last_valid_index)
-    toCSV = deprecate('toCSV', to_csv)
 
 class TimeSeries(Series):
     pass
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 4ec49ce18..4124cfc74 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -379,43 +379,3 @@ class ExcelFile(object):
         return _simple_parser(data, header=header, index_col=index_col,
                               parse_dates=parse_dates, date_parser=date_parser,
                               na_values=na_values)
-
-#-------------------------------------------------------------------------------
-# Deprecated stuff
-
-import warnings
-
-def parseCSV(filepath, header=0, skiprows=None, indexCol=0,
-             na_values=None): # pragma: no cover
-    """
-    Parse CSV file into a DataFrame object. Try to parse dates if possible.
-    """
-    warnings.warn("parseCSV is deprecated. Use read_csv instead", FutureWarning)
-    return read_csv(filepath, header=header, skiprows=skiprows,
-                    index_col=indexCol, na_values=na_values,
-                    parse_dates=True)
-
-def parseText(filepath, sep='\t', header=0,
-              indexCol=0, colNames=None): # pragma: no cover
-    """
-    Parse whitespace separated file into a DataFrame object.
-    Try to parse dates if possible.
-    """
-    warnings.warn("parseText is deprecated. Use read_table instead",
-                  FutureWarning)
-    return read_table(filepath, sep=sep, header=header, index_col=indexCol,
-                      names=colNames, parse_dates=True)
-
-
-def parseExcel(filepath, header=None, indexCol=0,
-               sheetname=None, **kwds): # pragma: no cover
-    """
-
-    """
-    warnings.warn("parseExcel is deprecated. Use the ExcelFile class instead",
-                  FutureWarning)
-    excel_file = ExcelFile(filepath)
-    return excel_file.parse(sheetname, header=header, index_col=indexCol,
-                            parse_dates=True)
-
-
