commit 1aa7c2c94170f5a0fd0daf3c90cb89f1aa85d8c3
Author: behzad nouri <behzadnouri@gmail.com>
Date:   Thu Sep 25 23:17:51 2014 -0400

    BUG: apply Series mask to aligned new values (GH8387)

diff --git a/doc/source/v0.15.0.txt b/doc/source/v0.15.0.txt
index 988acc24b..9890f200a 100644
--- a/doc/source/v0.15.0.txt
+++ b/doc/source/v0.15.0.txt
@@ -986,3 +986,4 @@ Bug Fixes
   (:issue:`5884').
 - Bug in ``DataFrame.dropna`` that interpreted non-existent columns in the subset argument as the 'last column' (:issue:`8303`)
 - Bug in Index.intersection on non-monotonic non-unique indexes (:issue:`8362`).
+- Bug in masked series assignment where mismatching types would break alignment (:issue:`8387`)
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 0055947c5..354ccd2c9 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -3924,14 +3924,16 @@ def _putmask_smart(v, m, n):
 
     Parameters
     ----------
-    v : array_like
-    m : array_like
-    n : array_like
+    v : `values`, updated in-place (array like)
+    m : `mask`, applies to both sides (array like)
+    n : `new values` either scalar or an array like aligned with `values`
     """
 
     # n should be the length of the mask or a scalar here
     if not is_list_like(n):
         n = np.array([n] * len(m))
+    elif isinstance(n, np.ndarray) and n.ndim == 0: # numpy scalar
+        n = np.repeat(np.array(n, ndmin=1), len(m))
 
     # see if we are only masking values that if putted
     # will work in the current dtype
@@ -3949,10 +3951,10 @@ def _putmask_smart(v, m, n):
     dtype, _ = com._maybe_promote(n.dtype)
     nv = v.astype(dtype)
     try:
-        nv[m] = n
+        nv[m] = n[m]
     except ValueError:
         idx, = np.where(np.squeeze(m))
-        for mask_index, new_val in zip(idx, n):
+        for mask_index, new_val in zip(idx, n[m]):
             nv[mask_index] = new_val
     return nv
 
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 0b863f966..013624c98 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -5014,6 +5014,27 @@ class TestSeries(tm.TestCase, CheckNameIntegration):
 
         assert_series_equal(s, expected)
 
+    def test_type_promote_putmask(self):
+
+        # GH8387: test that changing types does not break alignment
+        ts = Series(np.random.randn(100), index=np.arange(100,0,-1)).round(5)
+        left, mask = ts.copy(), ts > 0
+        right = ts[mask].copy().map(str)
+        left[mask] = right
+        assert_series_equal(left, ts.map(lambda t: str(t) if t > 0 else t))
+
+        s = Series([0, 1, 2, 0 ])
+        mask = s > 0
+        s2 = s[ mask ].map( str )
+        s[mask] = s2
+        assert_series_equal(s, Series([0, '1', '2', 0]))
+
+        s = Series([0, 'foo', 'bar', 0 ])
+        mask = Series([False, True, True, False])
+        s2 = s[ mask ]
+        s[mask] = s2
+        assert_series_equal(s, Series([0, 'foo','bar', 0]))
+
     def test_astype_cast_nan_int(self):
         df = Series([1.0, 2.0, 3.0, np.nan])
         self.assertRaises(ValueError, df.astype, np.int64)
@@ -6286,4 +6307,3 @@ class TestSeriesNonUnique(tm.TestCase):
 if __name__ == '__main__':
     nose.runmodule(argv=[__file__, '-vvs', '-x', '--pdb', '--pdb-failure'],
                    exit=False)
-
