commit a9dafe3279341716ec99260fb8e3787252f1b61d
Author: jreback <jeff@reback.net>
Date:   Fri Jun 7 21:55:35 2013 -0400

    DOC: io.rst doc updates

diff --git a/doc/source/io.rst b/doc/source/io.rst
index 625ff39cd..c98b49be9 100644
--- a/doc/source/io.rst
+++ b/doc/source/io.rst
@@ -949,6 +949,22 @@ Read and write ``JSON`` format files.
 
 Writing JSON
 ~~~~~~~~~~~~
+ 
+A ``Series`` or ``DataFrame`` can be converted to a valid JSON string. Use ``to_json``
+with optional parameters:
+
+- orient : The format of the JSON string, default is ``index`` for ``Series``, ``columns`` for ``DataFrame``
+
+  * split   : dict like {index -> [index], columns -> [columns], data -> [values]}
+  * records : list like [{column -> value}, ... , {column -> value}]
+  * index   : dict like {index -> {column -> value}}
+  * columns : dict like {column -> {index -> value}}
+  * values  : just the values array
+
+- double_precision : The number of decimal places to use when encoding floating point values, default 10.
+- force_ascii : force encoded string to be ASCII, default True.
+
+Note NaN's and None will be converted to null and datetime objects will be converted to UNIX timestamps.
 
 .. ipython:: python
 
@@ -959,6 +975,24 @@ Writing JSON
 Reading JSON
 ~~~~~~~~~~~~
 
+Reading a JSON string to pandas object can take a number of parameters.
+The parser will try to parse a ``DataFrame`` if ``typ`` is not supplied or
+is ``None``. To explicity force ``Series`` parsing, pass ``typ=series``
+
+- json   : The JSON string to parse.
+- typ    : type of object to recover (series or frame), default 'frame'
+- orient : The format of the JSON string, one of the following
+
+  * split : dict like {index -> [index], name -> name, data -> [values]}
+  * records : list like [value, ... , value]
+  * index : dict like {index -> value}
+
+- dtype : dtype of the resulting Series
+- numpy : direct decoding to numpy arrays. default True but falls back to standard decoding if a problem occurs.
+
+The parser will raise one of ``ValueError/TypeError/AssertionError`` if the JSON is
+not parsable.
+
 .. ipython:: python
 
    pd.read_json(s)
diff --git a/pandas/io/json.py b/pandas/io/json.py
index 7c8f6f40b..76d8ae05b 100644
--- a/pandas/io/json.py
+++ b/pandas/io/json.py
@@ -36,6 +36,7 @@ def to_json(obj, orient=None, double_precision=10,
         -------
         result : JSON compatible string
         """
+        
         if orient is None:
             if isinstance(obj, Series):
                 orient = 'index'
@@ -60,7 +61,7 @@ def read_json(json, typ='frame', orient=None, dtype=None, numpy=True):
         records : list like [value, ... , value]
         index : dict like {index -> value}
     dtype : dtype of the resulting Series
-    nupmpy: direct decoding to numpy arrays. default True but falls back
+    numpy: direct decoding to numpy arrays. default True but falls back
         to standard decoding if a problem occurs.
 
     Returns
