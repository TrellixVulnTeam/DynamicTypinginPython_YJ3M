commit 58c2f098ab13178f7cf3d3a61c9f4e0fa5d54ead
Author: topper-123 <terji78@gmail.com>
Date:   Sun Nov 5 10:54:49 2017 +0000

    Let CategoricalIndex take CategoricalDtype as dtype (#18116)

diff --git a/doc/source/whatsnew/v0.21.1.txt b/doc/source/whatsnew/v0.21.1.txt
index 6dc329c4a..088168fd8 100644
--- a/doc/source/whatsnew/v0.21.1.txt
+++ b/doc/source/whatsnew/v0.21.1.txt
@@ -122,7 +122,7 @@ Categorical
 - Bug in :meth:`DataFrame.astype` where casting to 'category' on an empty ``DataFrame`` causes a segmentation fault (:issue:`18004`)
 - Error messages in the testing module have been improved when items have
   different ``CategoricalDtype`` (:issue:`18069`)
--
+- ``CategoricalIndex`` can now correctly take a ``pd.api.types.CategoricalDtype`` as its dtype (:issue:`18116`)
 
 Other
 ^^^^^
diff --git a/pandas/core/indexes/category.py b/pandas/core/indexes/category.py
index 8b6801277..70b531ffb 100644
--- a/pandas/core/indexes/category.py
+++ b/pandas/core/indexes/category.py
@@ -79,7 +79,8 @@ class CategoricalIndex(Index, accessor.PandasDelegate):
                 if data is not None or categories is None:
                     cls._scalar_data_error(data)
                 data = []
-            data = cls._create_categorical(cls, data, categories, ordered)
+            data = cls._create_categorical(cls, data, categories, ordered,
+                                           dtype)
 
         if copy:
             data = data.copy()
diff --git a/pandas/tests/indexes/test_category.py b/pandas/tests/indexes/test_category.py
index d8ec23b9c..5e40e06d5 100644
--- a/pandas/tests/indexes/test_category.py
+++ b/pandas/tests/indexes/test_category.py
@@ -4,6 +4,7 @@ import pytest
 
 import pandas.util.testing as tm
 from pandas.core.indexes.api import Index, CategoricalIndex
+from pandas.core.dtypes.dtypes import CategoricalDtype
 from .common import Base
 
 from pandas.compat import range, PY3
@@ -95,6 +96,11 @@ class TestCategoricalIndex(Base):
                                               1, -1, 0], dtype='int8'))
         assert result.ordered
 
+        result = pd.CategoricalIndex(ci, categories=list('ab'), ordered=True)
+        expected = pd.CategoricalIndex(ci, categories=list('ab'), ordered=True,
+                                       dtype='category')
+        tm.assert_index_equal(result, expected, exact=True)
+
         # turn me to an Index
         result = Index(np.array(ci))
         assert isinstance(result, Index)
@@ -125,6 +131,25 @@ class TestCategoricalIndex(Base):
         result = CategoricalIndex(idx, categories=idx, ordered=True)
         tm.assert_index_equal(result, expected, exact=True)
 
+    def test_construction_with_categorical_dtype(self):
+        # construction with CategoricalDtype
+        # GH18109
+        data, cats, ordered = 'a a b b'.split(), 'c b a'.split(), True
+        dtype = CategoricalDtype(categories=cats, ordered=ordered)
+
+        result = pd.CategoricalIndex(data, dtype=dtype)
+        expected = pd.CategoricalIndex(data, categories=cats,
+                                       ordered=ordered)
+        tm.assert_index_equal(result, expected, exact=True)
+
+        # error to combine categories or ordered and dtype keywords args
+        with pytest.raises(ValueError, match="Cannot specify both `dtype` and "
+                                             "`categories` or `ordered`."):
+            pd.CategoricalIndex(data, categories=cats, dtype=dtype)
+        with pytest.raises(ValueError, match="Cannot specify both `dtype` and "
+                                             "`categories` or `ordered`."):
+            pd.CategoricalIndex(data, ordered=ordered, dtype=dtype)
+
     def test_create_categorical(self):
         # https://github.com/pandas-dev/pandas/pull/17513
         # The public CI constructor doesn't hit this code path with
