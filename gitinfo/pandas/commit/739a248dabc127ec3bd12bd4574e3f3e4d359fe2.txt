commit 739a248dabc127ec3bd12bd4574e3f3e4d359fe2
Author: Sourav kumar <33771969+souravs17031999@users.noreply.github.com>
Date:   Wed Dec 4 18:55:02 2019 +0530

    changed "fun !r" -> "repr(fun)" (#30032)

diff --git a/pandas/core/series.py b/pandas/core/series.py
index 11e87a4ee..302d4b591 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2944,7 +2944,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
             sortedIdx[n:] = idx[good][argsorted]
             sortedIdx[:n] = idx[bad]
         else:
-            raise ValueError("invalid na_position: {!r}".format(na_position))
+            raise ValueError(f"invalid na_position: {repr(na_position)}")
 
         result = self._constructor(arr[sortedIdx], index=self.index[sortedIdx])
 
diff --git a/pandas/core/sorting.py b/pandas/core/sorting.py
index 82eb93dd4..ed9ef2313 100644
--- a/pandas/core/sorting.py
+++ b/pandas/core/sorting.py
@@ -208,7 +208,7 @@ def lexsort_indexer(keys, orders=None, na_position="last"):
             cat = Categorical(key, ordered=True)
 
         if na_position not in ["last", "first"]:
-            raise ValueError("invalid na_position: {!r}".format(na_position))
+            raise ValueError(f"invalid na_position: {repr(na_position)}")
 
         n = len(cat.categories)
         codes = cat.codes.copy()
@@ -264,7 +264,7 @@ def nargsort(items, kind="quicksort", ascending: bool = True, na_position="last"
     elif na_position == "first":
         indexer = np.concatenate([nan_idx, indexer])
     else:
-        raise ValueError("invalid na_position: {!r}".format(na_position))
+        raise ValueError(f"invalid na_position: {repr(na_position)}")
     return indexer
 
 
diff --git a/pandas/core/strings.py b/pandas/core/strings.py
index 137c37f93..04c87e264 100644
--- a/pandas/core/strings.py
+++ b/pandas/core/strings.py
@@ -1933,10 +1933,8 @@ def forbid_nonstring_types(forbidden, name=None):
         def wrapper(self, *args, **kwargs):
             if self._inferred_dtype not in allowed_types:
                 msg = (
-                    "Cannot use .str.{name} with values of inferred dtype "
-                    "{inf_type!r}.".format(
-                        name=func_name, inf_type=self._inferred_dtype
-                    )
+                    f"Cannot use .str.{func_name} with values of inferred dtype "
+                    f"{repr(self._inferred_dtype)}."
                 )
                 raise TypeError(msg)
             return func(self, *args, **kwargs)
