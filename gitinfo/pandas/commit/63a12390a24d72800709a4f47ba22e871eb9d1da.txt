commit 63a12390a24d72800709a4f47ba22e871eb9d1da
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jan 24 14:05:25 2012 -0500

    BUG: don't type-cast when setting integer into existing DataFrame float column. special case for now, GH #669

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 73b6dfd45..abd362e78 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1426,8 +1426,7 @@ class DataFrame(NDFrame):
         Series/TimeSeries will be conformed to the DataFrame's index to
         ensure homogeneity.
         """
-        value = self._sanitize_column(value)
-        value = np.atleast_2d(value)
+        value = self._sanitize_column(key, value)
         NDFrame._set_item(self, key, value)
 
     def insert(self, loc, column, value):
@@ -1442,11 +1441,10 @@ class DataFrame(NDFrame):
         column : object
         value : int, Series, or array-like
         """
-        value = self._sanitize_column(value)
-        value = np.atleast_2d(value)
+        value = self._sanitize_column(column, value)
         self._data.insert(loc, column, value)
 
-    def _sanitize_column(self, value):
+    def _sanitize_column(self, key, value):
         # Need to make sure new columns (which go into the BlockManager as new
         # blocks) are always copied
         if _is_sequence(value):
@@ -1465,8 +1463,14 @@ class DataFrame(NDFrame):
                     value = value.copy()
         else:
             value = np.repeat(value, len(self.index))
-
-        return np.asarray(value)
+            if key in self.columns:
+                existing_column = self[key]
+                # special case for now
+                if (com.is_float_dtype(existing_column) and
+                    com.is_integer_dtype(value)):
+                    value = value.astype(np.float64)
+
+        return np.atleast_2d(np.asarray(value))
 
     def pop(self, item):
         """
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 558d99c69..346ea3f79 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -222,6 +222,29 @@ class CheckIndexing(object):
         self.frame['D'] = self.frame['D'].astype('i8')
         self.assert_(self.frame['D'].dtype == np.int64)
 
+        # #669, should not cast?
+        self.frame['B'] = 0
+        self.assert_(self.frame['B'].dtype == np.float64)
+
+        # cast if pass array of course
+        self.frame['B'] = np.arange(len(self.frame))
+        self.assert_(issubclass(self.frame['B'].dtype.type, np.integer))
+
+        self.frame['foo'] = 'bar'
+        self.frame['foo'] = 0
+        self.assert_(self.frame['foo'].dtype == np.int64)
+
+        self.frame['foo'] = 'bar'
+        self.frame['foo'] = 2.5
+        self.assert_(self.frame['foo'].dtype == np.float64)
+
+        self.frame['something'] = 0
+        self.assert_(self.frame['something'].dtype == np.int64)
+        self.frame['something'] = 2
+        self.assert_(self.frame['something'].dtype == np.int64)
+        self.frame['something'] = 2.5
+        self.assert_(self.frame['something'].dtype == np.float64)
+
     def test_setitem_boolean_column(self):
         expected = self.frame.copy()
         mask = self.frame['A'] > 0
