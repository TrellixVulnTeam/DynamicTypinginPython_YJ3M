commit e04868400ae3299a69a1901978a18f55650fca9a
Author: William Ayd <will_ayd@innobi.io>
Date:   Fri Jun 12 13:54:55 2020 -0700

    Debug CI Issue (#34721)

diff --git a/pandas/compat/numpy/__init__.py b/pandas/compat/numpy/__init__.py
index a8f49d91f..789a4668b 100644
--- a/pandas/compat/numpy/__init__.py
+++ b/pandas/compat/numpy/__init__.py
@@ -11,6 +11,8 @@ _nlv = LooseVersion(_np_version)
 _np_version_under1p16 = _nlv < LooseVersion("1.16")
 _np_version_under1p17 = _nlv < LooseVersion("1.17")
 _np_version_under1p18 = _nlv < LooseVersion("1.18")
+_np_version_under1p19 = _nlv < LooseVersion("1.19")
+_np_version_under1p20 = _nlv < LooseVersion("1.20")
 _is_numpy_dev = ".dev" in str(_nlv)
 
 
diff --git a/pandas/tests/extension/base/dtype.py b/pandas/tests/extension/base/dtype.py
index 65e32d716..154fcdc38 100644
--- a/pandas/tests/extension/base/dtype.py
+++ b/pandas/tests/extension/base/dtype.py
@@ -68,18 +68,22 @@ class BaseDtypeTests(BaseExtensionTests):
             {"A": pd.Series(data, dtype=dtype), "B": data, "C": "foo", "D": 1}
         )
 
-        # np.dtype('int64') == 'Int64' == 'int64'
-        # so can't distinguish
-        if dtype.name == "Int64":
-            expected = pd.Series([True, True, False, True], index=list("ABCD"))
-        else:
-            expected = pd.Series([True, True, False, False], index=list("ABCD"))
-
-        # FIXME: This should probably be *fixed* not ignored.
-        # See libops.scalar_compare
+        # TODO(numpy-1.20): This warnings filter and if block can be removed
+        # once we require numpy>=1.20
         with warnings.catch_warnings():
             warnings.simplefilter("ignore", DeprecationWarning)
             result = df.dtypes == str(dtype)
+            # NumPy>=1.20.0, but not pandas.compat.numpy till there
+            # is a wheel available with this change.
+            try:
+                new_numpy_behavior = np.dtype("int64") != "Int64"
+            except TypeError:
+                new_numpy_behavior = True
+
+        if dtype.name == "Int64" and not new_numpy_behavior:
+            expected = pd.Series([True, True, False, True], index=list("ABCD"))
+        else:
+            expected = pd.Series([True, True, False, False], index=list("ABCD"))
 
         self.assert_series_equal(result, expected)
 
diff --git a/pandas/tests/plotting/test_misc.py b/pandas/tests/plotting/test_misc.py
index 27039948d..0b0d23632 100644
--- a/pandas/tests/plotting/test_misc.py
+++ b/pandas/tests/plotting/test_misc.py
@@ -96,13 +96,17 @@ class TestSeriesPlots(TestPlotBase):
 class TestDataFramePlots(TestPlotBase):
     @td.skip_if_no_scipy
     def test_scatter_matrix_axis(self):
+        from pandas.plotting._matplotlib.compat import _mpl_ge_3_0_0
+
         scatter_matrix = plotting.scatter_matrix
 
         with tm.RNGContext(42):
             df = DataFrame(randn(100, 3))
 
         # we are plotting multiples on a sub-plot
-        with tm.assert_produces_warning(UserWarning):
+        with tm.assert_produces_warning(
+            UserWarning, raise_on_extra_warnings=_mpl_ge_3_0_0()
+        ):
             axes = _check_plot_works(
                 scatter_matrix, filterwarnings="always", frame=df, range_padding=0.1
             )
