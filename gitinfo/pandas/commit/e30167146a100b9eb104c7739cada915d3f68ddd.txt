commit e30167146a100b9eb104c7739cada915d3f68ddd
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Nov 1 11:17:37 2012 -0400

    ENH: per-level sort order in sort/sort_index. close #928

diff --git a/RELEASE.rst b/RELEASE.rst
index 4b1ba2387..609e77539 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -27,6 +27,10 @@ pandas 0.9.1
 
 **Release date:** NOT YET RELEASED
 
+**New features**
+
+  - Can specify multiple sort orders in DataFrame/Series.sort/sort_index (#928)
+
 **Improvements to existing features**
 
   - Improve performance of datetime + business day offset with large number of
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 1b4662e92..f14d13e73 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2796,13 +2796,18 @@ class DataFrame(NDFrame):
         columns : object
             Column name(s) in frame. Accepts a column name or a list or tuple
             for a nested sort.
-        ascending : boolean, default True
-            Sort ascending vs. descending
+        ascending : boolean or list, default True
+            Sort ascending vs. descending. Specify list for multiple sort
+            orders
         axis : {0, 1}
             Sort index/rows versus columns
         inplace : boolean, default False
             Sort the DataFrame without creating a new instance
 
+        Examples
+        --------
+        >>> result = df.sort(['A', 'B'], ascending=[1, 0])
+
         Returns
         -------
         sorted : DataFrame
@@ -2826,11 +2831,16 @@ class DataFrame(NDFrame):
         by : object
             Column name(s) in frame. Accepts a column name or a list or tuple
             for a nested sort.
-        ascending : boolean, default True
-            Sort ascending vs. descending
+        ascending : boolean or list, default True
+            Sort ascending vs. descending. Specify list for multiple sort
+            orders
         inplace : boolean, default False
             Sort the DataFrame without creating a new instance
 
+        Examples
+        --------
+        >>> result = df.sort_index(by=['A', 'B'], ascending=[1, 0])
+
         Returns
         -------
         sorted : DataFrame
@@ -2846,14 +2856,17 @@ class DataFrame(NDFrame):
             assert(axis == 0)
             if isinstance(by, (tuple, list)):
                 keys = [self[x].values for x in by]
-                indexer = _lexsort_indexer(keys)
+                indexer = _lexsort_indexer(keys, orders=ascending)
             else:
                 indexer = self[by].values.argsort()
+                if not ascending:
+                    indexer = indexer[::-1]
+        elif isinstance(labels, MultiIndex):
+            indexer = _lexsort_indexer(labels.labels, orders=ascending)
         else:
             indexer = labels.argsort()
-
-        if not ascending:
-            indexer = indexer[::-1]
+            if not ascending:
+                indexer = indexer[::-1]
 
         if inplace:
             if axis == 1:
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index c6583c849..3ace2e9df 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -2103,18 +2103,31 @@ def _indexer_from_factorized(labels, shape, compress=True):
     return indexer
 
 
-def _lexsort_indexer(keys):
+def _lexsort_indexer(keys, orders=None):
     labels = []
     shape = []
-    for key in keys:
+
+    if isinstance(orders, bool):
+        orders = [orders] * len(keys)
+    elif orders is None:
+        orders = [True] * len(keys)
+
+    for key, order in zip(keys, orders):
         rizer = lib.Factorizer(len(key))
 
         if not key.dtype == np.object_:
             key = key.astype('O')
 
         ids, _ = rizer.factorize(key, sort=True)
+
+        n = len(rizer.uniques)
+        shape.append(n)
+        if not order:
+            mask = ids == -1
+            ids = np.where(mask, -1, n - ids)
+
         labels.append(ids)
-        shape.append(len(rizer.uniques))
+
     return _indexer_from_factorized(labels, shape)
 
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 7a7fc7159..cb396aced 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1749,15 +1749,28 @@ copy : boolean, default False
 
         Parameters
         ----------
-        ascending : boolean, default True
-            Sort ascending vs. descending
+        ascending : boolean or list, default True
+            Sort ascending vs. descending. Specify list for multiple sort
+            orders
+
+        Examples
+        --------
+        >>> result1 = s.sort_index(ascending=False)
+        >>> result2 = s.sort_index(ascending=[1, 0])
 
         Returns
         -------
         sorted_obj : Series
         """
-        new_labels, indexer = self.index.order(return_indexer=True,
-                                               ascending=ascending)
+        index = self.index
+        if isinstance(index, MultiIndex):
+            from pandas.core.groupby import _lexsort_indexer
+            indexer = _lexsort_indexer(index.labels, orders=ascending)
+            new_labels = index.take(indexer)
+        else:
+            new_labels, indexer = index.order(return_indexer=True,
+                                              ascending=ascending)
+
         new_values = self.values.take(indexer)
         return Series(new_values, new_labels, name=self.name)
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index a3a3d1022..2d80fe03d 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -5657,7 +5657,9 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         assert_frame_equal(result, expected)
 
         result = frame.sort_index(by=['A', 'B'], ascending=False)
-        expected = frame.take(indexer[::-1])
+        indexer = np.lexsort((frame['B'].rank(ascending=False),
+                              frame['A'].rank(ascending=False)))
+        expected = frame.take(indexer)
         assert_frame_equal(result, expected)
 
         result = frame.sort_index(by=['B', 'A'])
@@ -5695,6 +5697,35 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = frame.ix[:, ::-1]
         assert_frame_equal(df, expected)
 
+    def test_sort_index_different_sortorder(self):
+        import random
+        A = np.arange(20).repeat(5)
+        B = np.tile(np.arange(5), 20)
+
+        indexer = np.random.permutation(100)
+        A = A.take(indexer)
+        B = B.take(indexer)
+
+        df = DataFrame({'A' : A, 'B' : B,
+                        'C' : np.random.randn(100)})
+
+        result = df.sort_index(by=['A', 'B'], ascending=[1, 0])
+
+        ex_indexer = np.lexsort((df.B.max() - df.B, df.A))
+        expected = df.take(ex_indexer)
+        assert_frame_equal(result, expected)
+
+        # test with multiindex, too
+        idf = df.set_index(['A', 'B'])
+
+        result = idf.sort_index(ascending=[1, 0])
+        expected = idf.take(ex_indexer)
+        assert_frame_equal(result, expected)
+
+        # also, Series!
+        result = idf['C'].sort_index(ascending=[1, 0])
+        assert_series_equal(result, expected['C'])
+
     def test_sort_inplace(self):
         frame = DataFrame(np.random.randn(4, 4), index=[1, 2, 3, 4],
                           columns=['A', 'B', 'C', 'D'])
