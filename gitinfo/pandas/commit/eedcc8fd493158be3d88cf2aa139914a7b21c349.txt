commit eedcc8fd493158be3d88cf2aa139914a7b21c349
Author: Jeff Reback <jeff@reback.net>
Date:   Mon Apr 3 17:37:33 2017 -0400

    DOC: whatsnew cleaning

diff --git a/doc/source/whatsnew/v0.20.0.txt b/doc/source/whatsnew/v0.20.0.txt
index fd7744158..107b682a8 100644
--- a/doc/source/whatsnew/v0.20.0.txt
+++ b/doc/source/whatsnew/v0.20.0.txt
@@ -1,7 +1,7 @@
 .. _whatsnew_0200:
 
-v0.20.0 (????, 2017)
---------------------
+v0.20.0 (April ??, 2017)
+------------------------
 
 This is a major release from 0.19 and includes a small number of API changes, several new features,
 enhancements, and performance improvements along with a large number of bug fixes. We recommend that all
@@ -9,12 +9,13 @@ users upgrade to this version.
 
 Highlights include:
 
-- Building pandas for development now requires ``cython >= 0.23`` (:issue:`14831`)
 - The ``.ix`` indexer has been deprecated, see :ref:`here <whatsnew_0200.api_breaking.deprecate_ix>`
-- Switched the test framework to `pytest`_ (:issue:`13097`)
+- Improved user API when accessing levels in ``.groupby()``, see :ref:`here <whatsnew_0200.enhancements.groupby_access>`
+- Improved support for UInt64 dtypes, see :ref:`here <whatsnew_0200.enhancements.uint64_support>`
 - A new orient for JSON serialization, ``orient='table'``, that uses the Table Schema spec, see :ref:`here <whatsnew_0200.enhancements.table_schema>`
-
-.. _pytest: http://doc.pytest.org/en/latest/
+- Support for S3 handling now uses ``s3fs``, see :ref:`here <whatsnew_0200.api_breaking.s3>`
+- Google BigQuery support now uses the ``pandas-gbq`` library, see :ref:`here <whatsnew_0200.api_breaking.gbq>`
+- Switched the test framework to use `pytest <http://doc.pytest.org/en/latest>`__ (:issue:`13097`)
 
 Check the :ref:`API Changes <whatsnew_0200.api_breaking>` and :ref:`deprecations <whatsnew_0200.deprecations>` before updating.
 
@@ -542,7 +543,7 @@ S3 File Handling
 ^^^^^^^^^^^^^^^^
 
 pandas now uses `s3fs <http://s3fs.readthedocs.io/>`_ for handling S3 connections. This shouldn't break
-any code. However, since s3fs is not a required dependency, you will need to install it separately, like ``boto``
+any code. However, since ``s3fs`` is not a required dependency, you will need to install it separately, like ``boto``
 in prior versions of pandas. (:issue:`11915`).
 
 .. _whatsnew_0200.api_breaking.partial_string_indexing:
@@ -776,9 +777,9 @@ New Behavior:
 Index.intersection and inner join now preserve the order of the left Index
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-`:meth:Index.intersection` now preserves the order of the calling ``Index`` (left)
+:meth:`Index.intersection` now preserves the order of the calling ``Index`` (left)
 instead of the other ``Index`` (right) (:issue:`15582`). This affects the inner
-joins (`:meth:DataFrame.join` and `:func:merge`) and the ``.align`` methods.
+joins, :meth:`DataFrame.join` and :func:`merge`, and the ``.align`` methods.
 
 - ``Index.intersection``
 
@@ -844,8 +845,6 @@ Other API Changes
 - ``inplace`` arguments now require a boolean value, else a ``ValueError`` is thrown (:issue:`14189`)
 - ``pandas.api.types.is_datetime64_ns_dtype`` will now report ``True`` on a tz-aware dtype, similar to ``pandas.api.types.is_datetime64_any_dtype``
 - ``DataFrame.asof()`` will return a null filled ``Series`` instead the scalar ``NaN`` if a match is not found (:issue:`15118`)
-- Reorganization of timeseries development tests (:issue:`14854`)
-- Reorganization of date converter tests (:issue:`15707`)
 - Specific support for ``copy.copy()`` and ``copy.deepcopy()`` functions on NDFrame objects (:issue:`15444`)
 - ``Series.sort_values()`` accepts a one element list of bool for consistency with the behavior of ``DataFrame.sort_values()`` (:issue:`15604`)
 - ``.merge()`` and ``.join()`` on ``category`` dtype columns will now preserve the category dtype when possible (:issue:`10409`)
@@ -860,6 +859,16 @@ Other API Changes
 - ``NaT`` will now returns ``NaT`` for ``tz_localize`` and ``tz_convert``
   methods (:issue:`15830`)
 
+.. _whatsnew_0200.develop:
+
+Development Changes
+~~~~~~~~~~~~~~~~~~~
+
+- Building pandas for development now requires ``cython >= 0.23`` (:issue:`14831`)
+- Require at least 0.23 version of cython to avoid problems with character encodings (:issue:`14699`)
+- Reorganization of timeseries tests (:issue:`14854`)
+- Reorganization of date converter tests (:issue:`15707`)
+
 .. _whatsnew_0200.deprecations:
 
 Deprecations
@@ -915,7 +924,7 @@ Performance Improvements
 ~~~~~~~~~~~~~~~~~~~~~~~~
 
 - Improved performance of ``pd.wide_to_long()`` (:issue:`14779`)
-- Increased performance of ``pd.factorize()`` by releasing the GIL with ``object`` dtype when inferred as strings (:issue:`14859`)
+- Improved performance of ``pd.factorize()`` by releasing the GIL with ``object`` dtype when inferred as strings (:issue:`14859`)
 - Improved performance of timeseries plotting with an irregular DatetimeIndex
   (or with ``compat_x=True``) (:issue:`15073`).
 - Improved performance of ``groupby().cummin()`` and ``groupby().cummax()`` (:issue:`15048`, :issue:`15109`, :issue:`15561`, :issue:`15635`)
@@ -1000,7 +1009,8 @@ I/O
 - Bug in ``pd.tools.hashing.hash_pandas_object()`` in which hashing of categoricals depended on the ordering of categories, instead of just their values. (:issue:`15143`)
 - Bug in ``.to_json()`` where ``lines=True`` and contents (keys or values) contain escaped characters (:issue:`15096`)
 - Bug in ``.to_json()`` causing single byte ascii characters to be expanded to four byte unicode (:issue:`15344`)
-- Bug in ``.read_json()`` for Python 2 where ``lines=True`` and contents contain non-ascii unicode characters (:issue:`15132`)
+- Bug in ``.to_json()`` for the C engine where rollover was not correctly handled for case where frac is odd and diff is exactly 0.5 (:issue:`15716`, :issue:`15864`)
+- Bug in ``pd.read_json()`` for Python 2 where ``lines=True`` and contents contain non-ascii unicode characters (:issue:`15132`)
 - Bug in ``pd.read_msgpack()`` in which ``Series`` categoricals were being improperly processed (:issue:`14901`)
 - Bug in ``pd.read_msgpack()`` which did not allow loading of a dataframe with an index of type ``CategoricalIndex`` (:issue:`15487`)
 - Bug in ``pd.read_msgpack()`` when deserializing a ``CategoricalIndex`` (:issue:`15487`)
@@ -1011,7 +1021,6 @@ I/O
 - Bug in ``pd.read_hdf()`` passing a ``Timestamp`` to the ``where`` parameter with a non date column (:issue:`15492`)
 - Bug in ``DataFrame.to_stata()`` and ``StataWriter`` which produces incorrectly formatted files to be produced for some locales (:issue:`13856`)
 - Bug in ``StataReader`` and ``StataWriter`` which allows invalid encodings (:issue:`15723`)
-- Bug in ``pd.to_json()`` for the C engine where rollover was not correctly handled for case where frac is odd and diff is exactly 0.5 (:issue:`15716`, :issue:`15864`)
 
 Plotting
 ^^^^^^^^
@@ -1026,7 +1035,7 @@ Groupby/Resample/Rolling
 - Properly set ``__name__`` and ``__qualname__`` for ``Groupby.*`` functions (:issue:`14620`)
 - Bug in ``GroupBy.get_group()`` failing with a categorical grouper (:issue:`15155`)
 - Bug in ``.groupby(...).rolling(...)`` when ``on`` is specified and using a ``DatetimeIndex`` (:issue:`15130`)
-- Bug in groupby operations with timedelta64 when passing ``numeric_only=False`` (:issue:`5724`)
+- Bug in groupby operations with ``timedelta64`` when passing ``numeric_only=False`` (:issue:`5724`)
 - Bug in ``groupby.apply()`` coercing ``object`` dtypes to numeric types, when not all values were numeric (:issue:`14423`, :issue:`15421`, :issue:`15670`)
 - Bug in ``resample``, where a non-string ``loffset`` argument would not be applied when resampling a timeseries (:issue:`13218`)
 - Bug in ``DataFrame.groupby().describe()`` when grouping on ``Index`` containing tuples (:issue:`14848`)
@@ -1073,6 +1082,5 @@ Other
 
 - Compat with SciPy 0.19.0 for testing on ``.interpolate()`` (:issue:`15662`)
 - Compat for 32-bit platforms for ``.qcut/cut``; bins will now be ``int64`` dtype (:issue:`14866`)
-- Require at least 0.23 version of cython to avoid problems with character encodings (:issue:`14699`)
 - Bug in interactions with ``Qt`` when a ``QtApplication`` already exists (:issue:`14372`)
 - Avoid use of ``np.finfo()`` during ``import pandas`` removed to mitigate deadlock on Python GIL misuse (:issue:`14641`)
