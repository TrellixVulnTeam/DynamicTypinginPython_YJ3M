commit a4700f9440c4cabcdd724ef2d3b607b88bddb738
Author: Adam Klein <adamklein@gmail.com>
Date:   Tue Mar 20 14:01:26 2012 -0400

    ENH: clean interval freq representation handling

diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index 63bddaedf..44636f75b 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -228,15 +228,7 @@ class Interval:
         self.ordinal = None
 
         if freq is not None:
-            if isinstance(freq, basestring):
-                base, mult = _get_freq_code(freq)
-                self.freq = (base, mult)
-            elif isinstance(freq, tuple):
-                self.freq = freq
-            elif isinstance(freq, (int, long)):
-                self.freq = (freq, 1)
-            else:
-                raise ValueError("Expected (timerule, mult) tuple for freq")
+            self.freq = freq
 
         if value is None:
             if self.freq is None:
@@ -248,7 +240,7 @@ class Interval:
             if quarter is not None:
                 month = (quarter - 1) * 3 + 1
 
-            base, mult = self.freq
+            base, mult = _get_freq_code(self.freq)
 
             self.ordinal = lib.skts_ordinal(year, month, day, hour, minute,
                                             second, base, mult)
@@ -256,7 +248,7 @@ class Interval:
 
         if isinstance(value, Interval):
             other = value
-            if self.freq is None or self.freq == other.freq:
+            if self.freq is None or _gfc(self.freq) == _gfc(other.freq):
                 self.ordinal = other.ordinal
                 self.freq = other.freq
             else:
@@ -269,20 +261,20 @@ class Interval:
 
             if freq is None:
                 if reso == 'year':
-                    freq = _interval_code_map['A']
+                    freq = 'A'
                 elif reso == 'month':
-                    freq = _interval_code_map['M']
+                    freq = 'M'
                 elif reso == 'day':
-                    freq = _interval_code_map['D']
+                    freq = 'D'
                 elif reso == 'hour':
-                    freq = _interval_code_map['H']
+                    freq = 'H'
                 elif reso == 'minute':
-                    freq = _interval_code_map['Min']
+                    freq = 'Min'
                 elif reso == 'second':
-                    freq = _interval_code_map['S']
+                    freq = 'S'
                 else:
                     raise ValueError("Could not infer frequency for interval")
-                self.freq = (freq, 1)
+                self.freq = freq
 
         elif isinstance(value, datetime):
             dt = value
@@ -293,7 +285,7 @@ class Interval:
         else:
             raise ValueError("Value must be string or datetime")
 
-        base, mult = self.freq
+        base, mult = _gfc(self.freq)
 
         if self.ordinal is None:
             self.ordinal = lib.skts_ordinal(dt.year, dt.month, dt.day, dt.hour,
@@ -301,7 +293,8 @@ class Interval:
 
     def __eq__(self, other):
         if isinstance(other, Interval):
-            return self.ordinal == other.ordinal and self.freq == other.freq
+            return (self.ordinal == other.ordinal
+                    and _gfc(self.freq) == _gfc(other.freq))
         return False
 
     def __add__(self, other):
@@ -323,12 +316,8 @@ class Interval:
         if how not in ('S', 'E'):
             raise ValueError('How must be one of S or E')
 
-        base1, mult1 = self.freq
-
-        if isinstance(freq, basestring):
-            base2, mult2 = _get_freq_code(freq)
-        else:
-            base2, mult2 = freq
+        base1, mult1 = _get_freq_code(self.freq)
+        base2, mult2 = _get_freq_code(freq)
 
         new_ordinal = lib.skts_resample(self.ordinal, base1, mult1,
                                         base2, mult2, how)
@@ -342,62 +331,62 @@ class Interval:
 
     @property
     def year(self):
-        base, mult = self.freq
+        base, mult = _gfc(self.freq)
         return lib.get_skts_year(self.ordinal, base, mult)
 
     @property
     def month(self):
-        base, mult = self.freq
+        base, mult = _gfc(self.freq)
         return lib.get_skts_month(self.ordinal, base, mult)
 
     @property
     def qyear(self):
-        base, mult = self.freq
+        base, mult = _gfc(self.freq)
         return lib.get_skts_qyear(self.ordinal, base, mult)
 
     @property
     def quarter(self):
-        base, mult = self.freq
+        base, mult = _gfc(self.freq)
         return lib.get_skts_quarter(self.ordinal, base, mult)
 
     @property
     def day(self):
-        base, mult = self.freq
+        base, mult = _gfc(self.freq)
         return lib.get_skts_day(self.ordinal, base, mult)
 
     @property
     def week(self):
-        base, mult = self.freq
+        base, mult = _gfc(self.freq)
         return lib.get_skts_week(self.ordinal, base, mult)
 
     @property
     def weekday(self):
-        base, mult = self.freq
+        base, mult = _gfc(self.freq)
         return lib.get_skts_weekday(self.ordinal, base, mult)
 
     @property
     def day_of_week(self):
-        base, mult = self.freq
+        base, mult = _gfc(self.freq)
         return lib.get_skts_dow(self.ordinal, base, mult)
 
     @property
     def day_of_year(self):
-        base, mult = self.freq
+        base, mult = _gfc(self.freq)
         return lib.get_skts_doy(self.ordinal, base, mult)
 
     @property
     def hour(self):
-        base, mult = self.freq
+        base, mult = _gfc(self.freq)
         return lib.get_skts_hour(self.ordinal, base, mult)
 
     @property
     def minute(self):
-        base, mult = self.freq
+        base, mult = _gfc(self.freq)
         return lib.get_skts_minute(self.ordinal, base, mult)
 
     @property
     def second(self):
-        base, mult = self.freq
+        base, mult = _gfc(self.freq)
         return lib.get_skts_second(self.ordinal, base, mult)
 
     @classmethod
@@ -417,21 +406,18 @@ class Interval:
         return Interval(skts_ordinal, sfreq).resample(freq)
 
     def __repr__(self):
-        base = self.freq[0]
-        mult = self.freq[1]
+        base, mult = _gfc(self.freq)
         formatted = lib.skts_ordinal_to_string(self.ordinal, base, mult)
         freqstr = _reverse_interval_code_map[base]
         return ("Interval('%s', '%d%s')" % (formatted, mult, freqstr))
 
     def __str__(self):
-        base = self.freq[0]
-        mult = self.freq[1]
+        base, mult = _gfc(self.freq)
         formatted = lib.skts_ordinal_to_string(self.ordinal, base, mult)
         return ("%s" % formatted)
 
     def strftime(self, fmt):
-        base = self.freq[0]
-        mult = self.freq[1]
+        base, mult = _gfc(self.freq)
         if fmt is not None:
             return lib.skts_strftime(self.ordinal, base, mult, fmt)
         else:
@@ -447,10 +433,17 @@ def _interval_group(freqstr):
 def _get_freq_code(freqstr):
     if isinstance(freqstr, tuple):
         return freqstr
+
+    if isinstance(freqstr, (int, long)):
+        return (freqstr, 1)
+
     base, stride = _base_and_stride(freqstr)
     code = _interval_code_map[base]
+
     return code, stride
 
+_gfc = _get_freq_code
+
 #-------------------------------------------------------------------------------
 # Miscellaneous date functions
 
diff --git a/pandas/tools/tsplot.py b/pandas/tools/tsplot.py
index 5c02f7fbf..b995bac50 100644
--- a/pandas/tools/tsplot.py
+++ b/pandas/tools/tsplot.py
@@ -5,40 +5,13 @@ Adopted from scikits.timeseries by Pierre GF Gerard-Marchant & Matt Knox
 #!!! TODO: Use the fact that axis can have units to simplify the process
 
 
-from matplotlib import pylab, rcParams
+from matplotlib import pylab
 from matplotlib import _pylab_helpers
-from matplotlib.artist import setp
 from matplotlib.axes import Subplot
 from matplotlib.figure import Figure
-from matplotlib.ticker import Formatter, ScalarFormatter, FuncFormatter, \
-                              Locator, FixedLocator, MultipleLocator
+from matplotlib.ticker import Formatter, Locator
 from matplotlib.transforms import nonsingular
 
-from matplotlib.pyplot import acorr, annotate, arrow, autumn, axes, axhline, \
-    axhspan, axis, axvline, axvspan, \
-    bar, barbs, barh, bone, box, boxplot, broken_barh, \
-    cla, clabel, clf, clim, close, cm, cohere, colorbar, colormaps, colors, \
-    connect, contour, contourf, cool, copper, csd, \
-    dedent, delaxes, disconnect, draw, draw_if_interactive, \
-    errorbar, \
-    figaspect, figimage, figlegend, figtext, figure, fill, findobj, flag, \
-    gca, gcf, gci, get, get_backend, get_cmap, get_current_fig_manager, \
-    get_plot_commands, get_scale_docs, get_scale_names, getp, ginput, gray, \
-    grid, \
-    hexbin, hist, hlines, hold, hot, hsv, \
-    imread, imshow, interactive, ioff, ion, is_numlike, is_string_like, ishold,\
-    isinteractive, jet, legend, loglog, \
-    matshow, mlab, new_figure_manager, normalize, over, \
-    pcolor, pcolormesh, pie, pink, plot, plot_date, plotfile, plotting, polar, \
-    prism, psd, pylab_setup, \
-    quiver, quiverkey, rc, rcParams, rcParamsDefault, rcdefaults, rgrids, \
-    savefig, scatter, sci, semilogx, semilogy, setp, show, silent_list, \
-    specgram, spectral, spring, spy, stem, step, subplot, subplot_tool, \
-    subplots_adjust, summer, suptitle, switch_backend, \
-    table, text, thetagrids, title, twinx, twiny, \
-    vlines, waitforbuttonpress, winter, xcorr, xlabel, xlim, xscale, xticks, \
-    ylabel, ylim, yscale, yticks
-
 import numpy as np
 
 import pandas.core.datetools as datetools
@@ -1323,6 +1296,10 @@ def tsplot(series, *args, **kwargs):
     kwargs : var
         Optional arguments for the creation of the subplot.
     """
+    base, mult = datetools._get_freq_code(series.freq)
+    if mult != 1:
+        series = series.resample(base)
+
     # allow callers to override the hold state by passing hold=True|False
     b = pylab.ishold()
     h = kwargs.pop('hold', None)
