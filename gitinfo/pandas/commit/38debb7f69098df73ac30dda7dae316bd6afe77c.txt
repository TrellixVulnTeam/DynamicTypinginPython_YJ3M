commit 38debb7f69098df73ac30dda7dae316bd6afe77c
Author: jreback <jeff@reback.net>
Date:   Fri Jan 4 20:16:55 2013 -0500

    TST: more tests, added ncols to table output in printing

diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 73db79306..60c91e2d5 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -233,8 +233,8 @@ class HDFStore(object):
             for k in self.keys():
                 s = self.get_storer(k)
                 if s is not None:
-                    keys.append(str(s.pathname))
-                    values.append(str(s))
+                    keys.append(str(s.pathname or k))
+                    values.append(str(s or 'invalid_HDFStore node'))
 
             output += adjoin(12, keys, values)
         else:
@@ -671,15 +671,22 @@ class HDFStore(object):
     def _create_storer(self, group, value = None, table = False, append = False, **kwargs):
         """ return a suitable Storer class to operate """
 
+        def error(t):
+            raise Exception("cannot properly create the storer for: [%s] [group->%s,value->%s,table->%s,append->%s,kwargs->%s]" % 
+                            (t,group,type(value),table,append,kwargs))
+        
         pt = getattr(group._v_attrs,'pandas_type',None)
         tt = getattr(group._v_attrs,'table_type',None)
 
-        # infer the typ from the passed value
+        # infer the pt from the passed value
         if pt is None:
             if value is None:
                 raise Exception("cannot create a storer if the object is not existing nor a value are passed")
 
-            pt = _TYPE_MAP[type(value)]
+            try:
+                pt = _TYPE_MAP[type(value)]
+            except:
+                error('_TYPE_MAP')
 
             # we are actually a table
             if table or append:
@@ -690,8 +697,7 @@ class HDFStore(object):
             try:
                 return globals()[_STORER_MAP[pt]](self, group, **kwargs)
             except:
-                raise Exception("cannot properly create the storer for: [group->%s,value->%s,table->%s,append->%s,kwargs->%s]" % 
-                                (group,value,table,append,kwargs))
+                error('_STORER_MAP')
 
         # existing node (and must be a table)
         if tt is None:
@@ -718,10 +724,9 @@ class HDFStore(object):
                     pass
 
         try:
-            return globals()[_TABLE_MAP[tt or 'appendable_panel']](self, group, **kwargs)
+            return globals()[_TABLE_MAP[tt]](self, group, **kwargs)
         except:
-            raise Exception("cannot properly create the storer for: [group->%s,value->%s,table->%s,append->%s,kwargs->%s]" % 
-                            (group,value,table,append,kwargs))
+            error('_TABLE_MAP')
 
     def _write_to_group(self, key, value, index=True, table=False, append=False, complib=None, **kwargs):
         group = self.get_node(key)
@@ -1834,12 +1839,13 @@ class Table(Storer):
         if self.is_old_version:
             ver = "[%s]" % '.'.join([ str(x) for x in self.version ])
 
-        return "%-12.12s%s (typ->%s,nrows->%s,indexers->[%s]%s)" % (self.pandas_type,
-                                                                    ver,
-                                                                    self.table_type_short,
-                                                                    self.nrows,
-                                                                    ','.join([ a.name for a in self.index_axes ]),
-                                                                    dc)
+        return "%-12.12s%s (typ->%s,nrows->%s,ncols->%s,indexers->[%s]%s)" % (self.pandas_type,
+                                                                              ver,
+                                                                              self.table_type_short,
+                                                                              self.nrows,
+                                                                              self.ncols,
+                                                                              ','.join([ a.name for a in self.index_axes ]),
+                                                                              dc)
     
     def __getitem__(self, c):
         """ return the axis for c """
@@ -1887,6 +1893,11 @@ class Table(Storer):
     def axes(self):
         return itertools.chain(self.index_axes, self.values_axes)
 
+    @property
+    def ncols(self):
+        """ the number of total columns in the values axes """
+        return sum([ len(a.values) for a in self.values_axes ])
+
     @property
     def is_transposed(self):
         return False
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index ebf5b25a4..29a4ec54b 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -89,6 +89,10 @@ class TestHDFStore(unittest.TestCase):
         df.ix[3:6,['obj1']] = np.nan
         df = df.consolidate().convert_objects()
         self.store['df'] = df
+        
+        # make a random group in hdf space
+        self.store.handle.createGroup(self.store.handle.root,'bah')
+
         repr(self.store)
         str(self.store)
 
@@ -776,6 +780,20 @@ class TestHDFStore(unittest.TestCase):
 
     def test_append_misc(self):
 
+        # unsuported data types for non-tables
+        p4d = tm.makePanel4D()
+        self.assertRaises(Exception, self.store.put,'p4d',p4d)
+
+        # unsupported data type for table
+        s = tm.makeStringSeries()
+        self.assertRaises(Exception, self.store.append,'s',s)
+
+        # unsuported data types
+        self.assertRaises(Exception, self.store.put,'abc',None)
+        self.assertRaises(Exception, self.store.put,'abc','123')
+        self.assertRaises(Exception, self.store.put,'abc',123)
+        self.assertRaises(Exception, self.store.put,'abc',np.arange(5))
+
         df = tm.makeDataFrame()
         self.store.append('df', df, chunksize=1)
         result = self.store.select('df')
