commit 721a2eb268b71168ad962ff818b19db15f4133ca
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Thu Jan 16 11:55:20 2020 -0800

    CLN: remove unnecessary arg from _to_dt64 (#30895)

diff --git a/pandas/_libs/tslibs/offsets.pyx b/pandas/_libs/tslibs/offsets.pyx
index f24dce28c..31dc2945f 100644
--- a/pandas/_libs/tslibs/offsets.pyx
+++ b/pandas/_libs/tslibs/offsets.pyx
@@ -216,7 +216,7 @@ def _get_calendar(weekmask, holidays, calendar):
         holidays = holidays + calendar.holidays().tolist()
     except AttributeError:
         pass
-    holidays = [_to_dt64(dt, dtype='datetime64[D]') for dt in holidays]
+    holidays = [_to_dt64D(dt) for dt in holidays]
     holidays = tuple(sorted(holidays))
 
     kwargs = {'weekmask': weekmask}
@@ -227,7 +227,7 @@ def _get_calendar(weekmask, holidays, calendar):
     return busdaycalendar, holidays
 
 
-def _to_dt64(dt, dtype='datetime64'):
+def _to_dt64D(dt):
     # Currently
     # > np.datetime64(dt.datetime(2013,5,1),dtype='datetime64[D]')
     # numpy.datetime64('2013-05-01T02:00:00.000000+0200')
@@ -238,8 +238,8 @@ def _to_dt64(dt, dtype='datetime64'):
         dt = np.int64(dt).astype('datetime64[ns]')
     else:
         dt = np.datetime64(dt)
-    if dt.dtype.name != dtype:
-        dt = dt.astype(dtype)
+    if dt.dtype.name != "datetime64[D]":
+        dt = dt.astype("datetime64[D]")
     return dt
 
 
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index 2808d74e6..220ff241e 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -26,7 +26,7 @@ from pandas._libs.tslibs.offsets import (
     BaseOffset,
     _get_calendar,
     _is_normalized,
-    _to_dt64,
+    _to_dt64D,
     apply_index_wraps,
     as_datetime,
     roll_yearday,
@@ -1090,7 +1090,7 @@ class CustomBusinessDay(_CustomMixin, BusinessDay):
     def is_on_offset(self, dt: datetime) -> bool:
         if self.normalize and not _is_normalized(dt):
             return False
-        day64 = _to_dt64(dt, "datetime64[D]")
+        day64 = _to_dt64D(dt)
         return np.is_busday(day64, busdaycal=self.calendar)
 
 
