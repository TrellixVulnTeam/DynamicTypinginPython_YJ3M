commit 18fba53089fdfa3075cb9faa1f3ac57a2146be9b
Author: Keshav Ramaswamy <keshav.ramaswamy@gmail.com>
Date:   Mon Oct 24 18:25:29 2016 -0400

    DOC: updated docstring in .to_datetime() for out-of-bounds timestamps
    with errors='ignore'
    
    closes #14448
    
    Author: Keshav Ramaswamy <keshav.ramaswamy@gmail.com>
    Author: Keshav Ramaswamy <keshav.ramaswamy@infor.com>
    
    Closes #14452 from keshavramaswamy/master and squashes the following commits:
    
    5468fc5 [Keshav Ramaswamy] added link to timestamp limitations in docstring
    3aa78cf [Keshav Ramaswamy] edit docstring to fit python standards
    8bfa58e [Keshav Ramaswamy] edited docstring to fit python standards
    5ed8ef5 [Keshav Ramaswamy] edut docstring to fit Python Standards
    7402de4 [Keshav Ramaswamy] edited docstring to fit python standards
    c16ad6b [Keshav Ramaswamy] added timestamp limitations and default behavior to docstring
    0db07b5 [Keshav Ramaswamy] updated docstring in .to_datetime()

diff --git a/pandas/tseries/tools.py b/pandas/tseries/tools.py
index 637e70b76..326bc5be3 100644
--- a/pandas/tseries/tools.py
+++ b/pandas/tseries/tools.py
@@ -42,6 +42,7 @@ def _infer_tzinfo(start, end):
                 raise AssertionError('Inputs must both have the same timezone,'
                                      ' {0} != {1}'.format(tz, b.tzinfo))
         return tz
+
     tz = None
     if start is not None:
         tz = _infer(start, end)
@@ -264,10 +265,15 @@ def to_datetime(arg, errors='raise', dayfirst=False, yearfirst=False,
     1   2016-03-05
     dtype: datetime64[ns]
 
-    If a date that does not meet timestamp limitations, passing errors='coerce'
-    will force to NaT. Furthermore this will force non-dates to NaT as well.
+    If a date does not meet the `timestamp limitations
+    <http://pandas.pydata.org/pandas-docs/stable/timeseries.html
+    #timeseries-timestamp-limits>`_, passing errors='ignore'
+    will return the original input instead of raising any exception.
+
+    Passing errors='coerce' will force an out-of-bounds date to NaT,
+    in addition to forcing non-dates (or non-parseable dates) to NaT.
 
-    >>> pd.to_datetime('13000101', format='%Y%m%d')
+    >>> pd.to_datetime('13000101', format='%Y%m%d', errors='ignore')
     datetime.datetime(1300, 1, 1, 0, 0)
     >>> pd.to_datetime('13000101', format='%Y%m%d', errors='coerce')
     NaT
@@ -420,6 +426,7 @@ def to_datetime(arg, errors='raise', dayfirst=False, yearfirst=False,
 
     return _convert_listlike(np.array([arg]), box, format)[0]
 
+
 # mappings for assembling units
 _unit_map = {'year': 'year',
              'years': 'year',
@@ -552,7 +559,7 @@ def _attempt_YYYYMMDD(arg, errors):
         result = np.empty(carg.shape, dtype='M8[ns]')
         iresult = result.view('i8')
         iresult[~mask] = tslib.iNaT
-        result[mask] = calc(carg[mask].astype(np.float64).astype(np.int64)).\
+        result[mask] = calc(carg[mask].astype(np.float64).astype(np.int64)). \
             astype('M8[ns]')
         return result
 
@@ -637,7 +644,6 @@ def parse_time_string(arg, freq=None, dayfirst=None, yearfirst=None):
 DateParseError = tslib.DateParseError
 normalize_date = tslib.normalize_date
 
-
 # Fixed time formats for time parsing
 _time_formats = ["%H:%M", "%H%M", "%I:%M%p", "%I%M%p",
                  "%H:%M:%S", "%H%M%S", "%I:%M:%S%p", "%I%M%S%p"]
@@ -763,6 +769,7 @@ def format(dt):
     """Returns date in YYYYMMDD format."""
     return dt.strftime('%Y%m%d')
 
+
 OLE_TIME_ZERO = datetime(1899, 12, 30, 0, 0, 0)
 
 
