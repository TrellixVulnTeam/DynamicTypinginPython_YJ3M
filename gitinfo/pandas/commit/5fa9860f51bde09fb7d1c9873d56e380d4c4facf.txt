commit 5fa9860f51bde09fb7d1c9873d56e380d4c4facf
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Thu Feb 27 15:08:51 2020 -0800

    API/BUG: raise only KeyError failed on geitem/loc lookups (#31867)

diff --git a/doc/source/whatsnew/v1.1.0.rst b/doc/source/whatsnew/v1.1.0.rst
index 830b9042b..0f18a1fd8 100644
--- a/doc/source/whatsnew/v1.1.0.rst
+++ b/doc/source/whatsnew/v1.1.0.rst
@@ -90,7 +90,76 @@ Backwards incompatible API changes
   now raise a  ``TypeError`` if a not-accepted keyword argument is passed into it.
   Previously a ``UnsupportedFunctionCall`` was raised (``AssertionError`` if ``min_count`` passed into :meth:`~DataFrameGroupby.median``) (:issue:`31485`)
 - :meth:`DataFrame.at` and :meth:`Series.at` will raise a ``TypeError`` instead of a ``ValueError`` if an incompatible key is passed, and ``KeyError`` if a missing key is passed, matching the behavior of ``.loc[]`` (:issue:`31722`)
--
+
+.. _whatsnew_110.api_breaking.indexing_raises_key_errors:
+
+Failed Label-Based Lookups Always Raise KeyError
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Label lookups ``series[key]``, ``series.loc[key]`` and ``frame.loc[key]``
+used to raises either ``KeyError`` or ``TypeError`` depending on the type of
+key and type of :class:`Index`.  These now consistently raise ``KeyError`` (:issue:`31867`)
+
+.. ipython:: python
+
+    ser1 = pd.Series(range(3), index=[0, 1, 2])
+    ser2 = pd.Series(range(3), index=pd.date_range("2020-02-01", periods=3))
+
+*Previous behavior*:
+
+.. code-block:: ipython
+
+    In [3]: ser1[1.5]
+    ...
+    TypeError: cannot do label indexing on Int64Index with these indexers [1.5] of type float
+
+    In [4] ser1["foo"]
+    ...
+    KeyError: 'foo'
+
+    In [5]: ser1.loc[1.5]
+    ...
+    TypeError: cannot do label indexing on Int64Index with these indexers [1.5] of type float
+
+    In [6]: ser1.loc["foo"]
+    ...
+    KeyError: 'foo'
+
+    In [7]: ser2.loc[1]
+    ...
+    TypeError: cannot do label indexing on DatetimeIndex with these indexers [1] of type int
+
+    In [8]: ser2.loc[pd.Timestamp(0)]
+    ...
+    KeyError: Timestamp('1970-01-01 00:00:00')
+
+*New behavior*:
+
+.. code-block:: ipython
+
+    In [3]: ser1[1.5]
+    ...
+    KeyError: 1.5
+
+    In [4] ser1["foo"]
+    ...
+    KeyError: 'foo'
+
+    In [5]: ser1.loc[1.5]
+    ...
+    KeyError: 1.5
+
+    In [6]: ser1.loc["foo"]
+    ...
+    KeyError: 'foo'
+
+    In [7]: ser2.loc[1]
+    ...
+    KeyError: 1
+
+    In [8]: ser2.loc[pd.Timestamp(0)]
+    ...
+    KeyError: Timestamp('1970-01-01 00:00:00')
 
 .. ---------------------------------------------------------------------------
 
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index b5e323fbd..5b674458e 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -3096,7 +3096,7 @@ class Index(IndexOpsMixin, PandasObject):
 
             if kind == "getitem" and is_float(key):
                 if not self.is_floating():
-                    self._invalid_indexer("label", key)
+                    raise KeyError(key)
 
             elif kind == "loc" and is_float(key):
 
@@ -3110,11 +3110,11 @@ class Index(IndexOpsMixin, PandasObject):
                     "string",
                     "mixed",
                 ]:
-                    self._invalid_indexer("label", key)
+                    raise KeyError(key)
 
             elif kind == "loc" and is_integer(key):
                 if not (is_integer_dtype(self.dtype) or is_object_dtype(self.dtype)):
-                    self._invalid_indexer("label", key)
+                    raise KeyError(key)
 
         return key
 
diff --git a/pandas/core/indexes/category.py b/pandas/core/indexes/category.py
index 4475cb414..8c2d7f4aa 100644
--- a/pandas/core/indexes/category.py
+++ b/pandas/core/indexes/category.py
@@ -581,7 +581,7 @@ class CategoricalIndex(ExtensionIndex, accessor.PandasDelegate):
             try:
                 return self.categories._convert_scalar_indexer(key, kind="loc")
             except TypeError:
-                self._invalid_indexer("label", key)
+                raise KeyError(key)
         return super()._convert_scalar_indexer(key, kind=kind)
 
     @Appender(Index._convert_list_indexer.__doc__)
diff --git a/pandas/core/indexes/datetimelike.py b/pandas/core/indexes/datetimelike.py
index 72a2aba2d..d3038ae88 100644
--- a/pandas/core/indexes/datetimelike.py
+++ b/pandas/core/indexes/datetimelike.py
@@ -397,9 +397,9 @@ class DatetimeIndexOpsMixin(ExtensionIndex):
         is_int = is_integer(key)
         is_flt = is_float(key)
         if kind == "loc" and (is_int or is_flt):
-            self._invalid_indexer("label", key)
+            raise KeyError(key)
         elif kind == "getitem" and is_flt:
-            self._invalid_indexer("label", key)
+            raise KeyError(key)
 
         return super()._convert_scalar_indexer(key, kind=kind)
 
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 69283bc58..a0e96ac16 100755
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -1143,7 +1143,7 @@ class _LocIndexer(_LocationIndexer):
             # try to find out correct indexer, if not type correct raise
             try:
                 key = labels._convert_scalar_indexer(key, kind="loc")
-            except TypeError:
+            except KeyError:
                 # but we will allow setting
                 if not is_setter:
                     raise
diff --git a/pandas/tests/frame/test_constructors.py b/pandas/tests/frame/test_constructors.py
index a42cfc6a2..071d2409f 100644
--- a/pandas/tests/frame/test_constructors.py
+++ b/pandas/tests/frame/test_constructors.py
@@ -1864,11 +1864,7 @@ class TestDataFrameConstructors:
 
             # No NaN found -> error
             if len(indexer) == 0:
-                msg = (
-                    "cannot do label indexing on RangeIndex "
-                    r"with these indexers \[nan\] of type float"
-                )
-                with pytest.raises(TypeError, match=msg):
+                with pytest.raises(KeyError, match="^nan$"):
                     df.loc[:, np.nan]
             # single nan should result in Series
             elif len(indexer) == 1:
diff --git a/pandas/tests/indexing/test_floats.py b/pandas/tests/indexing/test_floats.py
index a84e88cef..c966962a7 100644
--- a/pandas/tests/indexing/test_floats.py
+++ b/pandas/tests/indexing/test_floats.py
@@ -97,11 +97,9 @@ class TestFloatIndexers:
         # getting
         for idxr, getitem in [(lambda x: x.iloc, False), (lambda x: x, True)]:
 
-            # gettitem on a DataFrame is a KeyError as it is indexing
-            # via labels on the columns
-            if getitem and isinstance(s, DataFrame):
+            if getitem:
                 error = KeyError
-                msg = r"^3(\.0)?$"
+                msg = r"^3\.0?$"
             else:
                 error = TypeError
                 msg = (
@@ -120,6 +118,9 @@ class TestFloatIndexers:
             "string",
             "unicode",
             "mixed",
+            "period",
+            "timedelta64",
+            "datetime64",
         }:
             error = KeyError
             msg = r"^3\.0$"
@@ -181,12 +182,7 @@ class TestFloatIndexers:
         i = index_func(5)
         s = Series(np.arange(len(i)), index=i)
         s[3]
-        msg = (
-            r"cannot do (label|positional) indexing "
-            fr"on {type(i).__name__} with these indexers \[3\.0\] of "
-            "type float"
-        )
-        with pytest.raises(TypeError, match=msg):
+        with pytest.raises(KeyError, match="^3.0$"):
             s[3.0]
 
     def test_scalar_with_mixed(self):
@@ -197,12 +193,12 @@ class TestFloatIndexers:
         # lookup in a pure stringstr
         # with an invalid indexer
         msg = (
-            "cannot do label indexing "
-            fr"on {Index.__name__} with these indexers \[1\.0\] of "
+            r"cannot do label indexing "
+            r"on Index with these indexers \[1\.0\] of "
             r"type float|"
             "Cannot index by location index with a non-integer key"
         )
-        with pytest.raises(TypeError, match=msg):
+        with pytest.raises(KeyError, match="^1.0$"):
             s2[1.0]
         with pytest.raises(TypeError, match=msg):
             s2.iloc[1.0]
@@ -216,12 +212,7 @@ class TestFloatIndexers:
 
         # mixed index so we have label
         # indexing
-        msg = (
-            "cannot do label indexing "
-            fr"on {Index.__name__} with these indexers \[1\.0\] of "
-            "type float"
-        )
-        with pytest.raises(TypeError, match=msg):
+        with pytest.raises(KeyError, match="^1.0$"):
             s3[1.0]
 
         result = s3[1]
diff --git a/pandas/tests/indexing/test_loc.py b/pandas/tests/indexing/test_loc.py
index 276d11a67..4d042af8d 100644
--- a/pandas/tests/indexing/test_loc.py
+++ b/pandas/tests/indexing/test_loc.py
@@ -35,7 +35,7 @@ class TestLoc(Base):
             "loc", 20, typs=["ints", "uints", "mixed"], fails=KeyError,
         )
         self.check_result("loc", 20, typs=["labels"], fails=KeyError)
-        self.check_result("loc", 20, typs=["ts"], axes=0, fails=TypeError)
+        self.check_result("loc", 20, typs=["ts"], axes=0, fails=KeyError)
         self.check_result("loc", 20, typs=["floats"], axes=0, fails=KeyError)
 
     def test_loc_getitem_label_list(self):
