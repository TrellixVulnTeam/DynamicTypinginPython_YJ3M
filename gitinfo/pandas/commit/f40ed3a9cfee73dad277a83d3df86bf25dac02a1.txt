commit f40ed3a9cfee73dad277a83d3df86bf25dac02a1
Author: Adam Klein <adamklein@gmail.com>
Date:   Tue Dec 20 20:34:06 2011 -0500

    continued documenting 0.5.0 release

diff --git a/doc/source/basics.rst b/doc/source/basics.rst
index 69250e90e..c382287f2 100644
--- a/doc/source/basics.rst
+++ b/doc/source/basics.rst
@@ -278,6 +278,8 @@ course):
     frame.ix[::2] = np.nan
     frame.describe()
 
+.. _basics.describe:
+
 For a non-numerical Series object, `describe` will give a simple summary of the
 number of unique values and most frequently occurring values:
 
@@ -610,6 +612,8 @@ The ``rename`` method also provides a ``copy`` named parameter that is by
 default ``True`` and copies the underlying data. Pass ``copy=False`` to rename
 the data in place.
 
+.. _basics.rename_axis:
+
 The Panel class has an a related ``rename_axis`` class which can rename any of
 its three axes.
 
diff --git a/doc/source/indexing.rst b/doc/source/indexing.rst
index d955fa34a..78e461c9e 100644
--- a/doc/source/indexing.rst
+++ b/doc/source/indexing.rst
@@ -189,15 +189,18 @@ this indexing method.
 
 .. _indexing.columns.multiple:
 
-Getting and setting multiple DataFrame columns
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+.. _indexing.df_cols:
 
-You can pass a list of columns to ``[]`` to select columns in that order:
+You may access a column on a dataframe directly as an attribute:
 
 .. ipython:: python
 
-   df[['C', 'A', 'B']]
+   df.A
+
+If you are using the IPython environment, you may also use tab-completion to
+see the accessible columns of a DataFrame.
 
+You can pass a list of columns to ``[]`` to select columns in that order:
 If a column is not contained in the DataFrame, an exception will be
 raised. Multiple columns can also be set in this manner:
 
@@ -368,6 +371,8 @@ display:
 Set operations on Index objects
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
+.. _indexing.set_ops:
+
 The three main operations are ``union (|)``, ``intersection (&)``, and ``diff
 (-)``. These can be directly called as instance methods or used via overloaded
 operators:
diff --git a/doc/source/io.rst b/doc/source/io.rst
index 9ad3497ee..63400a380 100644
--- a/doc/source/io.rst
+++ b/doc/source/io.rst
@@ -214,6 +214,26 @@ Specifying ``iterator=True`` will also return the ``TextParser`` object:
    reader = read_table('tmp.sv', sep='|', iterator=True)
    reader.get_chunk(5)
 
+Writing to CSV format
+~~~~~~~~~~~~~~~~~~~~~
+
+.. _io.store_in_csv:
+
+The Series and DataFrame objects have an instance method ``to_csv`` which
+allows storing the contents of the object as a comma-separated-values file. The
+function takes a number of arguments. Only the first is required.
+
+  - ``path``: A string path to the file to write
+    ``nanRep``: A string representation of a missing value (default '')
+  - ``cols``: Columns to write (default None)
+  - ``header``: Whether to write out the column names (default True)
+  - ``index``: whether to write row (index) names (default True)
+  - ``index_label``: Column label(s) for index column(s) if desired. If None
+    (default), and `header` and `index` are True, then the index names are
+    used. (A sequence should be given if the DataFrame uses MultiIndex).
+  - ``mode`` : Python write mode, default 'w'
+  - ``sep`` : Field delimiter for the output file (default "'")
+
 Excel 2003 files
 ----------------
 
diff --git a/doc/source/merging.rst b/doc/source/merging.rst
index df83821d9..7157cb1cb 100644
--- a/doc/source/merging.rst
+++ b/doc/source/merging.rst
@@ -104,6 +104,8 @@ passed DataFrame's index. This is best illustrated by example:
    to_join
    df.join(to_join, on='key')
 
+.. _merging.multikey_join:
+
 To join on multiple keys, the passed DataFrame must have a ``MultiIndex``:
 
 .. ipython:: python
@@ -133,6 +135,8 @@ To join on multiple keys, the passed DataFrame must have a ``MultiIndex``:
 
    data.join(to_join, on=['key1', 'key2'])
 
+.. _merging.df_inner_join:
+
 This is by default a "many-to-one" or "VLOOKUP"-style left join operation. An
 inner join is also supported:
 
diff --git a/doc/source/whatsnew/v0.5.0.rst b/doc/source/whatsnew/v0.5.0.rst
index 7ab688998..4a18f0af7 100644
--- a/doc/source/whatsnew/v0.5.0.rst
+++ b/doc/source/whatsnew/v0.5.0.rst
@@ -8,23 +8,23 @@ New Features
 ============
 - :ref:`Added <basics.df_join>` ``DataFrame.align`` method with standard join options
 - :ref:`Added <io.parse_dates>` ``parse_dates`` option to ``read_csv`` and ``read_table`` methods to optionally try to parse dates in the index columns
-- MAYBE DONE? Add ``nrows``, ``chunksize``, and ``iterator`` arguments to ``read_csv`` and ``read_table``. The last two return a new ``TextParser`` class capable of lazily iterating through chunks of a flat file (GH242_)
-- I THINK DONE? Added ability to join on multiple columns in ``DataFrame.join`` (GH214_)
-- SHOULD BE PUBLIC? Added private ``_get_duplicates`` function to ``Index`` for identifying duplicate values more easily
-- Added column attribute access to DataFrame, e.g. df.A equivalent to df['A'] if 'A' is a column in the DataFrame (PR213_)
-- Added IPython tab completion hook for DataFrame columns. (PR233_, GH230_)
-- Implement ``Series.describe`` for Series containing objects (PR241_)
-- I THINK DONE Add inner join option to ``DataFrame.join`` when joining on key(s) (GH248_)
-- I THINK DONE Can select set of DataFrame columns by passing a list to ``__getitem__`` (GH253_)
-- I THINK DONE Can use & and | to intersection / union Index objects, respectively (GH261_)
+- :ref:`Added <io.parse_dates>` ``nrows``, ``chunksize``, and ``iterator`` arguments to ``read_csv`` and ``read_table``. The last two return a new ``TextParser`` class capable of lazily iterating through chunks of a flat file (GH242_)
+- :ref:`Added <merging.multikey_join>` ability to join on multiple columns in ``DataFrame.join`` (GH214_)
+- (Added private ``_get_duplicates`` function to ``Index`` for identifying duplicate values more easily)
+- :ref:`Added <indexing.df_cols>` column attribute access to DataFrame.
+- :ref:`Added <indexing.df_cols>` Python tab completion hook for DataFrame columns. (PR233_, GH230_)
+- :ref:`Implemented <basics.describe>` ``Series.describe`` for Series containing objects (PR241_)
+- :ref:`Added <merging.df_inner_join>` inner join option to ``DataFrame.join`` when joining on key(s) (GH248_)
+- :ref:`Implemented <indexing.df_cols>` selecting DataFrame columns by passing a list to ``__getitem__`` (GH253_)
+- :ref:`Implemented <indexing.set_ops>` & and | to intersect / union Index objects, respectively (GH261_)
 - MORE ON PIVOT TABLES Added ``pivot_table`` convenience function to pandas namespace (GH234_)
-- Implemented ``Panel.rename_axis`` function (GH243_)
-- DataFrame will show index level names in console output
+- :ref:`Implemented <basics.rename_axis>` ``Panel.rename_axis`` function (GH243_)
+- (DataFrame will show index level names in console output)
 - DOCS ABOUT TAKE METHODS Implemented ``Panel.take``
-- SORT OF WANT? Add ``set_eng_float_format`` function for setting alternate DataFrame floating point string formatting
+- SORT OF WANT? Add ``set_eng_float_format`` for alternate DataFrame floating point string formatting
 - DONE? Add convenience ``set_index`` function for creating a DataFrame index from its existing columns
 - Can pass hierarchical index level name to ``groupby`` instead of the level number if desired (GH223_)
-- Add support for different delimiters in ``DataFrame.to_csv`` (PR244_)
+- :ref:`Added <io.store_in_csv>` support for different delimiters in ``DataFrame.to_csv`` (PR244_)
 
 Performance Enhancements
 ========================
