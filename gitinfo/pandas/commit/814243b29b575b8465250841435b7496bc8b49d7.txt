commit 814243b29b575b8465250841435b7496bc8b49d7
Author: Thomas Kluyver <takowl@gmail.com>
Date:   Thu Oct 6 18:38:36 2011 +0100

    Use .iterkv() instead of .iteritems(), which gets incorrectly converted to .items() by 2to3.

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 60cfb2b8c..b1db6289b 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -279,6 +279,7 @@ class DataFrame(NDFrame):
         series = self._series
         return ((k, series[k]) for k in self.columns)
     
+    iterkv = iteritems
     if py3compat.PY3:
         items = iteritems
 
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 4a1e9160d..ed943c9b9 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -336,6 +336,10 @@ class Panel(NDFrame):
     def iteritems(self):
         for item in self.items:
             yield item, self[item]
+    
+    # Name that won't get automatically converted to items by 2to3. items is
+    # already in use for the first axis.
+    iterkv = iteritems
 
     def _get_plane_axes(self, axis):
         """
@@ -390,7 +394,7 @@ class Panel(NDFrame):
         y : SparseDataFrame
         """
         from pandas.core.sparse import SparsePanel
-        frames = dict(self.iteritems())
+        frames = dict(self.iterkv())
         return SparsePanel(frames, items=self.items,
                            major_axis=self.major_axis,
                            minor_axis=self.minor_axis,
@@ -639,7 +643,7 @@ class Panel(NDFrame):
         """
         if value is None:
             result = {}
-            for col, s in self.iteritems():
+            for col, s in self.iterkv():
                 result[col] = s.fillna(method=method, value=value)
 
             return Panel.from_dict(result)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 54079f11b..7d7153668 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -420,6 +420,7 @@ copy : boolean, default False
         """
         return itertools.izip(iter(self.index), iter(self))
     
+    iterkv = iteritems
     if py3compat.PY3:
         items = iteritems
 
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index b7422f3e0..40ca5f762 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -1599,7 +1599,7 @@ class SparsePanel(Panel):
             return self._combinePanel(other, func)
         elif np.isscalar(other):
             new_frames = dict((k, func(v, other))
-                              for k, v in self.iteritems())
+                              for k, v in self.iterkv())
             return self._new_like(new_frames)
 
     def _combineFrame(self, other, func, axis=0):
@@ -1675,7 +1675,7 @@ class SparsePanel(Panel):
         y : DataFrame
             index -> minor axis, columns -> items
         """
-        slices = dict((k, v.xs(key)) for k, v in self.iteritems())
+        slices = dict((k, v.xs(key)) for k, v in self.iterkv())
         return DataFrame(slices, index=self.minor_axis, columns=self.items)
 
     def minor_xs(self, key):
@@ -1692,7 +1692,7 @@ class SparsePanel(Panel):
         y : SparseDataFrame
             index -> major axis, columns -> items
         """
-        slices = dict((k, v[key]) for k, v in self.iteritems())
+        slices = dict((k, v[key]) for k, v in self.iterkv())
         return SparseDataFrame(slices, index=self.major_axis,
                                columns=self.items,
                                default_fill_value=self.default_fill_value,
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index 8634ed7a5..43d6322f8 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -210,7 +210,10 @@ class PanelOLS(OLS):
         # for x named 'variety', then x_conversion['variety'][0] is 'A'.
         x_converted = {}
         cat_mapping = {}
-        for key, df in x.iteritems():
+        # x can be either a dict or a Panel, but in Python 3, dicts don't have
+        # .iteritems
+        iteritems = getattr(x, 'iteritems', x.items)
+        for key, df in iteritems():
             assert(isinstance(df, DataFrame))
 
             if _is_numeric(df):
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index dd0f6a8d5..fc5cdbcac 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -221,11 +221,12 @@ class SafeForSparse(object):
         common.equalContents(self.panel.keys(), self.panel.items)
 
     def test_iteritems(self):
+        """Test panel.iteritems(), aka panel.iterkv()"""
         # just test that it works
-        for k, v in self.panel.iteritems():
+        for k, v in self.panel.iterkv():
             pass
 
-        self.assertEqual(len(list(self.panel.iteritems())),
+        self.assertEqual(len(list(self.panel.iterkv())),
                          len(self.panel.items))
 
     def test_combineFrame(self):
diff --git a/pandas/tests/test_sparse.py b/pandas/tests/test_sparse.py
index a7794d80c..cc742a7e7 100644
--- a/pandas/tests/test_sparse.py
+++ b/pandas/tests/test_sparse.py
@@ -90,7 +90,7 @@ def assert_sp_frame_equal(left, right, exact_indices=True):
         assert(col in left)
 
 def assert_sp_panel_equal(left, right, exact_indices=True):
-    for item, frame in left.iteritems():
+    for item, frame in left.iterkv():
         assert(item in right)
         # trade-off?
         assert_sp_frame_equal(frame, right[item], exact_indices=exact_indices)
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 7fff17e9f..c398eebc8 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -123,7 +123,7 @@ def assert_series_equal(left, right):
 def assert_frame_equal(left, right):
     assert(isinstance(left, DataFrame))
     assert(isinstance(right, DataFrame))
-    for col, series in left.iteritems():
+    for col, series in left.iterkv():
         assert(col in right)
         assert_series_equal(series, right[col])
     for col in right:
@@ -136,7 +136,7 @@ def assert_panel_equal(left, right):
     assert(left.major_axis.equals(right.major_axis))
     assert(left.minor_axis.equals(right.minor_axis))
 
-    for col, series in left.iteritems():
+    for col, series in left.iterkv():
         assert(col in right)
         assert_frame_equal(series, right[col])
 
