commit 4c78b9738e01ae147106301cca76c6b36ee68d06
Author: Anjali2019 <Anjali2019@users.noreply.github.com>
Date:   Thu Oct 4 13:23:39 2018 +0200

    TST: Fixturize series/test_constructors.py (#22965)

diff --git a/pandas/tests/series/test_constructors.py b/pandas/tests/series/test_constructors.py
index 4817f5bdc..57a3f54fa 100644
--- a/pandas/tests/series/test_constructors.py
+++ b/pandas/tests/series/test_constructors.py
@@ -26,10 +26,8 @@ from pandas.compat import lrange, range, zip, long, PY36
 from pandas.util.testing import assert_series_equal
 import pandas.util.testing as tm
 
-from .common import TestData
 
-
-class TestSeriesConstructors(TestData):
+class TestSeriesConstructors():
 
     def test_invalid_dtype(self):
         # GH15520
@@ -50,23 +48,23 @@ class TestSeriesConstructors(TestData):
         assert int(Series([1.])) == 1
         assert long(Series([1.])) == 1
 
-    def test_constructor(self):
-        assert self.ts.index.is_all_dates
+    def test_constructor(self, datetime_series, empty_series):
+        assert datetime_series.index.is_all_dates
 
         # Pass in Series
-        derived = Series(self.ts)
+        derived = Series(datetime_series)
         assert derived.index.is_all_dates
 
-        assert tm.equalContents(derived.index, self.ts.index)
+        assert tm.equalContents(derived.index, datetime_series.index)
         # Ensure new index is not created
-        assert id(self.ts.index) == id(derived.index)
+        assert id(datetime_series.index) == id(derived.index)
 
         # Mixed type Series
         mixed = Series(['hello', np.NaN], index=[0, 1])
         assert mixed.dtype == np.object_
         assert mixed[1] is np.NaN
 
-        assert not self.empty.index.is_all_dates
+        assert not empty_series.index.is_all_dates
         assert not Series({}).index.is_all_dates
         pytest.raises(Exception, Series, np.random.randn(3, 3),
                       index=np.arange(3))
@@ -977,27 +975,27 @@ class TestSeriesConstructors(TestData):
         series = Series(data, dtype=float)
         assert series.dtype == np.float64
 
-    def test_fromValue(self):
+    def test_fromValue(self, datetime_series):
 
-        nans = Series(np.NaN, index=self.ts.index)
+        nans = Series(np.NaN, index=datetime_series.index)
         assert nans.dtype == np.float_
-        assert len(nans) == len(self.ts)
+        assert len(nans) == len(datetime_series)
 
-        strings = Series('foo', index=self.ts.index)
+        strings = Series('foo', index=datetime_series.index)
         assert strings.dtype == np.object_
-        assert len(strings) == len(self.ts)
+        assert len(strings) == len(datetime_series)
 
         d = datetime.now()
-        dates = Series(d, index=self.ts.index)
+        dates = Series(d, index=datetime_series.index)
         assert dates.dtype == 'M8[ns]'
-        assert len(dates) == len(self.ts)
+        assert len(dates) == len(datetime_series)
 
         # GH12336
         # Test construction of categorical series from value
-        categorical = Series(0, index=self.ts.index, dtype="category")
-        expected = Series(0, index=self.ts.index).astype("category")
+        categorical = Series(0, index=datetime_series.index, dtype="category")
+        expected = Series(0, index=datetime_series.index).astype("category")
         assert categorical.dtype == 'category'
-        assert len(categorical) == len(self.ts)
+        assert len(categorical) == len(datetime_series)
         tm.assert_series_equal(categorical, expected)
 
     def test_constructor_dtype_timedelta64(self):
