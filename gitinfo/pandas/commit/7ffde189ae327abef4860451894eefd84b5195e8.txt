commit 7ffde189ae327abef4860451894eefd84b5195e8
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Dec 17 16:18:27 2009 +0000

    added lagged_y_predict to PanelOLS
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@87 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index 92a1ebf97..a5bc403a5 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -1482,13 +1482,15 @@ class DataMatrix(DataFrame):
         Combine two DataFrame / DataMatrix objects and default to value
         in frame calling the method.
 
-        Example : a.combineFirst(b)
-            a's values prioritized, use values from b to fill holes
-
         Parameters
         ----------
         otherFrame : DataFrame / Matrix
 
+        Example
+        -------
+        a.combineFirst(b)
+            a's values prioritized, use values from b to fill holes
+
         Returns
         -------
         DataMatrix
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index aa12b9c91..485f73b95 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -68,6 +68,13 @@ class Panel(Picklable):
 
         return output
 
+    def __iter__(self):
+        return iter(self.items)
+
+    def iteritems(self):
+        for item in self:
+            yield item, self[item]
+
     def _get_items(self):
         return self._items
 
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index 5c88c46dd..129294780 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -10,7 +10,7 @@ from __future__ import division
 import numpy as np
 
 from pandas.core.panel import WidePanel, LongPanel
-from pandas.core.matrix import DataMatrix
+from pandas.core.matrix import DataFrame, DataMatrix
 from pandas.core.series import Series
 from pandas.stats.ols import OLS, MovingOLS
 from pandas.util.decorators import cache_readonly
@@ -184,8 +184,11 @@ class PanelOLS(OLS):
         # for x named 'variety', then x_conversion['variety'][0] is 'A'.
         x_converted = {}
         x_conversion = {}
-        for key, value in x.iteritems():
-            df = value
+        for key, df in x.iteritems():
+            if not isinstance(df, DataFrame):
+                raise TypeError('Input X data set contained an object of '
+                                'type %s' % type(df))
+
             if _is_numeric(df):
                 x_converted[key] = df
             else:
@@ -230,9 +233,9 @@ class PanelOLS(OLS):
 
         if not self._use_all_dummies:
             if 'entity' in self._dropped_dummies:
-                to_exclude = self._dropped_dummies.get('entity')
+                to_exclude = str(self._dropped_dummies.get('entity'))
             else:
-                to_exclude = panel.minor_axis[0]
+                to_exclude = dummies.items[0]
 
             if to_exclude not in dummies.items:
                 raise Exception('%s not in %s' % (to_exclude,
@@ -593,6 +596,23 @@ class MovingPanelOLS(MovingOLS, PanelOLS):
         """Returns the predicted y values."""
         return self._unstack_y(self._y_predict_raw)
 
+    def lagged_y_predict(self, lag=1):
+        """
+        Compute forecast Y value lagging coefficient by input number
+        of time periods
+
+        Parameters
+        ----------
+        lag : int
+
+        Returns
+        -------
+        DataMatrix
+        """
+        x = self._x_raw
+        betas = self._beta_matrix(lag=lag)
+        return self._unstack_y((betas * x).sum(1))
+
     @cache_readonly
     def _rolling_ols_call(self):
         return self._calc_betas(self._x_trans, self._y_trans)
