commit 8ac148996b14788b8fe499e35394b52c829b053c
Author: Egor <multicolor.mood@gmail.com>
Date:   Thu Aug 20 13:35:30 2015 +0300

    BUG: #10833 Added test and info to whatsnew

diff --git a/doc/source/whatsnew/v0.17.0.txt b/doc/source/whatsnew/v0.17.0.txt
index 1079ec523..e41fe592a 100644
--- a/doc/source/whatsnew/v0.17.0.txt
+++ b/doc/source/whatsnew/v0.17.0.txt
@@ -678,3 +678,4 @@ Bug Fixes
 - Bug in ``iloc`` allowing memory outside bounds of a Series to be accessed with negative integers (:issue:`10779`)
 - Bug in ``read_msgpack`` where encoding is not respected (:issue:`10580`)
 - Bug preventing access to the first index when using ``iloc`` with a list containing the appropriate negative integer (:issue:`10547`, :issue:`10779`)
+- Bug in ``TimedeltaIndex`` formatter causing error while trying to save ``DataFrame`` with ``TimedeltaIndex`` using ``to_csv`` (:issue:`10833`)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index a3a57929a..e4085310c 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -6308,7 +6308,6 @@ class TestDataFrame(tm.TestCase, CheckIndexing,
                               header=['AA', 'X'])
 
         with ensure_clean(pname) as path:
-            import pandas as pd
             df1 = DataFrame(np.random.randn(3, 1))
             df2 = DataFrame(np.random.randn(3, 1))
 
@@ -6320,6 +6319,20 @@ class TestDataFrame(tm.TestCase, CheckIndexing,
             xp.columns = lmap(int,xp.columns)
             assert_frame_equal(xp,rs)
 
+        with ensure_clean() as path:
+            # GH 10833 (TimedeltaIndex formatting)
+            dt = pd.Timedelta(seconds=1)
+            df_orig = pd.DataFrame({'data': list(range(10))},
+                                   index=[i*dt for i in range(10)])
+            df_orig.index.rename('timestamp', inplace=True)
+            df_orig.to_csv(path)
+
+            df_test = pd.read_csv(path, index_col='timestamp')
+            df_test.index = pd.to_timedelta(df_test.index)
+            df_test.index.rename('timestamp', inplace=True)
+
+            self.assertTrue(df_test.equal(df_orig))
+
     def test_to_csv_cols_reordering(self):
         # GH3454
         import pandas as pd
