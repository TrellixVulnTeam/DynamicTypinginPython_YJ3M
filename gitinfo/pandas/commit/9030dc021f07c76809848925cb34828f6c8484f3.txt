commit 9030dc021f07c76809848925cb34828f6c8484f3
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Dec 22 15:59:47 2011 -0500

    ENH: rename delevel -> reset_index, add back deprecation decorator

diff --git a/RELEASE.rst b/RELEASE.rst
index bb3291ec6..47fb0a031 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -27,6 +27,11 @@ pandas 0.6.2
 
 **Release date:** NOT YET RELEASED
 
+**API Changes**
+
+  - Rename ``DataFrame.delevel`` to ``DataFrame.reset_index`` and add
+    deprecation warning
+
 **New features / modules**
 
   - Handle differently-indexed output values in ``DataFrame.apply`` (GH #498)
diff --git a/doc/source/whatsnew/v0.6.1.rst b/doc/source/whatsnew/v0.6.1.rst
index a25fed546..ddeb164de 100644
--- a/doc/source/whatsnew/v0.6.1.rst
+++ b/doc/source/whatsnew/v0.6.1.rst
@@ -30,8 +30,6 @@ New features
 - Add :ref:`margins <reshaping.pivot.margins>` option to :ref:`pivot_table
   <reshaping.pivot>` for computing subgroup aggregates (GH114_)
 - Add `Series.from_csv` function (PR #482)
-- Improve memory usage of `DataFrame.describe` (do not copy data
-  unnecessarily) (PR #425)
 - Use same formatting function for outputting floating point Series to console
   as in DataFrame (PR #420)
 - DataFrame.delevel will try to infer better dtype for new columns (GH #440)
@@ -55,6 +53,10 @@ New features
 Performance improvements
 ~~~~~~~~~~~~~~~~~~~~~~~~
 
+- Improve memory usage of `DataFrame.describe` (do not copy data
+  unnecessarily) (PR #425)
+
+
 .. _GH114: https://github.com/wesm/pandas/issues/114
 .. _GH189: https://github.com/wesm/pandas/issues/302
 .. _GH302: https://github.com/wesm/pandas/issues/302
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 8285b3cf1..770c8b9f8 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -33,6 +33,8 @@ from pandas.core.internals import BlockManager, make_block, form_blocks
 from pandas.core.series import Series, _is_bool_indexer
 from pandas.util import py3compat
 from pandas.util.terminal import get_terminal_size
+from pandas.util.decorators import deprecate
+
 import pandas.core.nanops as nanops
 import pandas.core.common as com
 import pandas.core.datetools as datetools
@@ -884,7 +886,6 @@ class DataFrame(NDFrame):
     #----------------------------------------------------------------------
     # properties for index and columns
 
-
     columns = AxisProperty(0)
     index = AxisProperty(1)
 
@@ -1470,6 +1471,42 @@ class DataFrame(NDFrame):
         frame.index = index
         return frame
 
+    def reset_index(self):
+        """
+        For DataFrame with multi-level index, return new DataFrame with
+        labeling information in the columns under the index names, defaulting
+        to 'level_0', 'level_1', etc. if any are None
+
+        Notes
+        -----
+        Experimental, subject to API change
+
+        Returns
+        -------
+        deleveled : DataFrame
+        """
+        new_obj = self.copy()
+        if isinstance(self.index, MultiIndex):
+            names = self.index.names
+            zipped = zip(self.index.levels, self.index.labels)
+            for i, (lev, lab) in reversed(list(enumerate(zipped))):
+                col_name = names[i]
+                if col_name is None:
+                    col_name = 'level_%d' % i
+
+                # to ndarray and maybe infer different dtype
+                level_values = lev.values
+                level_values = lib.maybe_convert_objects(level_values)
+                new_obj.insert(0, col_name, level_values.take(lab))
+        else:
+            if self.index.name is None:
+                raise Exception('Must have name set')
+            new_obj.insert(0, self.index.name, self.index.values)
+        new_obj.index = np.arange(len(new_obj))
+        return new_obj
+
+    delevel = deprecate('delevel', reset_index)
+
     def take(self, indices, axis=0):
         """
         Analogous to ndarray.take, return DataFrame corresponding to requested
@@ -2159,39 +2196,6 @@ class DataFrame(NDFrame):
         else:
             return unstack(self, level)
 
-    def delevel(self):
-        """
-        For DataFrame with multi-level index, return new DataFrame with labeling
-        information in the columns under names 'level_0', 'level_1', etc.
-
-        Notes
-        -----
-        Experimental, subject to API change
-
-        Returns
-        -------
-        deleveled : DataFrame
-        """
-        new_obj = self.copy()
-        if isinstance(self.index, MultiIndex):
-            names = self.index.names
-            zipped = zip(self.index.levels, self.index.labels)
-            for i, (lev, lab) in reversed(list(enumerate(zipped))):
-                col_name = names[i]
-                if col_name is None:
-                    col_name = 'level_%d' % i
-
-                # to ndarray and maybe infer different dtype
-                level_values = lev.values
-                level_values = lib.maybe_convert_objects(level_values)
-                new_obj.insert(0, col_name, level_values.take(lab))
-        else:
-            if self.index.name is None:
-                raise Exception('Must have name set')
-            new_obj.insert(0, self.index.name, self.index.values)
-        new_obj.index = np.arange(len(new_obj))
-        return new_obj
-
     #----------------------------------------------------------------------
     # Time series-related
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 053dccdc3..e789a573a 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3727,13 +3727,13 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         assert_frame_equal(unstacked_cols.T, self.frame)
         assert_frame_equal(unstacked_cols_df['bar'].T, self.frame)
 
-    def test_delevel(self):
+    def test_reset_index(self):
         stacked = self.frame.stack()[::2]
         stacked = DataFrame({'foo' : stacked, 'bar' : stacked})
 
         names = ['first', 'second']
         stacked.index.names = names
-        deleveled = stacked.delevel()
+        deleveled = stacked.reset_index()
         for i, (lev, lab) in enumerate(zip(stacked.index.levels,
                                            stacked.index.labels)):
             values = lev.take(lab)
@@ -3741,7 +3741,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
             assert_almost_equal(values, deleveled[name])
 
         stacked.index.names = [None, None]
-        deleveled2 = stacked.delevel()
+        deleveled2 = stacked.reset_index()
         self.assert_(np.array_equal(deleveled['first'],
                                     deleveled2['level_0']))
         self.assert_(np.array_equal(deleveled['second'],
@@ -3752,7 +3752,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         # but this is ok
         self.frame.index.name = 'index'
-        deleveled = self.frame.delevel()
+        deleveled = self.frame.reset_index()
         self.assert_(np.array_equal(deleveled['index'],
                                     self.frame.index.values))
         self.assert_(np.array_equal(deleveled.index,
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 3598a50f4..340039511 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -760,6 +760,14 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         # it works!
         _ = s1 * s2
 
+    # NumPy limitiation =(
+
+    # def test_logical_range_select(self):
+    #     np.random.seed(12345)
+    #     selector = -0.5 <= self.ts <= 0.5
+    #     expected = (self.ts >= -0.5) & (self.ts <= 0.5)
+    #     assert_series_equal(selector, expected)
+
     def test_idxmin(self):
         # test idxmin
         # _check_stat_op approach can not be used here because of isnull check.
diff --git a/pandas/util/decorators.py b/pandas/util/decorators.py
index 58ee9551b..cbca3763d 100644
--- a/pandas/util/decorators.py
+++ b/pandas/util/decorators.py
@@ -1,2 +1,11 @@
 from pandas._tseries import cache_readonly
+import warnings
+
+def deprecate(name, alternative):
+    alt_name = alternative.func_name
+    def wrapper(*args, **kwargs):
+        warnings.warn("%s is deprecated. Use %s instead" % (name, alt_name),
+                      FutureWarning)
+        return alternative(*args, **kwargs)
+    return wrapper
 
