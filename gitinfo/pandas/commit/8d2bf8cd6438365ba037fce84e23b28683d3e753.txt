commit 8d2bf8cd6438365ba037fce84e23b28683d3e753
Author: Adam Klein <adamklein@gmail.com>
Date:   Wed Mar 21 16:13:08 2012 -0400

    ENH: added dumb snap function to datetimeindex, to get to nearest offset

diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index 44636f75b..5ae7726f7 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -1610,6 +1610,9 @@ def to_offset(freqstr):
     -------
     to_offset('5Min') -> Minute(5)
     """
+    if isinstance(freqstr, DateOffset):
+        return freqstr
+
     name, stride = _base_and_stride(freqstr)
 
     offset = _newOffsetMap.get(name)
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 5dcab33c7..6e5ec66c4 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1401,6 +1401,32 @@ class DatetimeIndex(Int64Index):
 
         return IntervalIndex(self.values, freq=freq)
 
+    def snap(self, freq='S'):
+        """
+        Snap time stamps to nearest occuring frequency
+
+        """
+        # Superdumb, punting on any optimizing
+        freq = datetools.to_offset(freq)
+
+        snapped = np.empty(len(self), dtype='M8[us]')
+
+        for i, v in enumerate(self):
+            s = v
+            if not freq.onOffset(s):
+                t0 = freq.rollback(s)
+                t1 = freq.rollforward(s)
+                if abs(s - t0) < abs(t1 - s):
+                    s = t0
+                else:
+                    s = t1
+            snapped[i] = np.datetime64(s)
+
+        dti = DatetimeIndex(snapped) # we know it conforms; this skips check
+        dti.offset = freq
+
+        return dti
+
     def shift(self, n, freq=None):
         """
         Specialized shift which produces a DatetimeIndex
diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index e15735bba..d74a28bc3 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -91,13 +91,13 @@ cdef class _Timestamp(datetime):
             else:
                 return Timestamp((self.offset.__mul__(other)).apply(self))
         else:
-            return super(_Timestamp, self).__add__(other)
+            return datetime.__add__(self, other)
 
     def __sub__(self, other):
         if is_integer_object(other):
             return self.__add__(-other)
         else:
-            return super(_Timestamp, self).__sub__(other)
+            return datetime.__sub__(self, other)
 
 # lightweight C object to hold datetime & int64 pair
 cdef class _TSObject:
