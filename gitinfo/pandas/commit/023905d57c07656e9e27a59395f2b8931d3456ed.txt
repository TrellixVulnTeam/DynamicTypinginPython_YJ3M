commit 023905d57c07656e9e27a59395f2b8931d3456ed
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Dec 22 05:06:40 2009 +0000

    latest Series docs, installation, front page material
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@92 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/doc/source/api.rst b/doc/source/api.rst
deleted file mode 100755
index c5ed5c9f6..000000000
--- a/doc/source/api.rst
+++ /dev/null
@@ -1,36 +0,0 @@
-.. currentmodule:: pandas.core
-
-
-.. _matrix:
-
-
-API
-===
-
-Introduction
-------------
-
-Examples
---------
-
-
-Module Reference
-----------------
-
-Model and Result Classes
-^^^^^^^^^^^^^^^^^^^^^^^^
-
-.. autosummary::
-   :toctree: generated/
-
-
-
-
-Technical Documentation
------------------------
-
-.. toctree::
-   :maxdepth: 1
-
-   data_techn1
-
diff --git a/doc/source/api/datastructures.rst b/doc/source/api/datastructures.rst
deleted file mode 100644
index 98fa07fdb..000000000
--- a/doc/source/api/datastructures.rst
+++ /dev/null
@@ -1,10 +0,0 @@
-********************
-Core data structures
-********************
-
-
-:mod:`pandas.core.api`
-======================
-
-.. automodule:: pandas.core.series
-   :members:
diff --git a/doc/source/core.rst b/doc/source/core.rst
index afff73bea..e24e704e3 100755
--- a/doc/source/core.rst
+++ b/doc/source/core.rst
@@ -1,30 +1,15 @@
-.. currentmodule:: pandas.core.api
-
 .. _core:
 
+***************
 Data Structures
-===============
-
-Introduction
-------------
-
-Examples
---------
-
-Module Reference
-----------------
-
-.. autosummary::
-   :toctree: generated/
+***************
 
-   Index
-   Series
-   TimeSeries
-   DataFrame
-   DataMatrix
-   WidePanel
-   LongPanel
+.. currentmodule:: pandas
 
-Examples
---------
+.. toctree::
+   :maxdepth: 2
 
+   indexobj
+   series
+   dataframe
+   panel
diff --git a/doc/source/data_techn1.rst b/doc/source/data_techn1.rst
deleted file mode 100755
index 5929366ca..000000000
--- a/doc/source/data_techn1.rst
+++ /dev/null
@@ -1,12 +0,0 @@
-.. currentmodule:: scikits.statsmodels.glm
-
-
-.. _glm_techn1:
-
-Technical Documentation
-=======================
-
-Introduction
-------------
-
-Just a placeholder
diff --git a/doc/source/datastruct.rst b/doc/source/datastruct.rst
deleted file mode 100755
index 7c46844e8..000000000
--- a/doc/source/datastruct.rst
+++ /dev/null
@@ -1,22 +0,0 @@
-.. currentmodule:: pandas.core.api
-
-Data Structures
-===============
-
-Introduction
-------------
-
-.. autosummary::
-   :toctree: generated/
-
-   Index
-   Series
-   TimeSeries
-   DataFrame
-   DataMatrix
-   WidePanel
-   LongPanel
-
-Examples
---------
-
diff --git a/doc/source/index.rst b/doc/source/index.rst
index c6f2e2558..d3c1b3e8a 100755
--- a/doc/source/index.rst
+++ b/doc/source/index.rst
@@ -1,19 +1,76 @@
 .. Pandas documentation master file, created by
 
 
-Welcome to pandas's documentation!
-==================================
+pandas: a python data analysis library
+======================================
 
+:mod:`pandas` is a python package providing convenient data structures
+for time series, cross-sectional, or any other form of "labeled" data,
+with tools for building statistical and econometric models.
 
-Table of Contents
------------------
+This library was created with the following design principles:
+
+  - Working with time series and cross-sectional data should be easy
+  - The user should not have to worry (much) about handling missing data
+  - Data alignment should be automatic and transparent
+  - Speed matters
+  - Perhaps most importantly: *things should work just like you want them to*
+
+Many of these principles are here to address the shortcomings
+frequently experienced using other languages / scientific research
+environments. In MATLAB, for example, you spend a lot of time coercing
+data into matrices, cleaning and aligning it, and keeping everything
+homogeneous. You have to use lots of functions like **nanmean, nanstd,
+repmat** (for broadcasting), and other functions which help you to
+maintain reliable data. Using `NumPy <http://www.numpy.org>`__ and a
+Pythonic approach, pandas helps hide the dirty details of working with
+unclean data, allowing you to focus on the problem you're trying to
+solve rather than the implementation.
+
+pandas is implemented primarily using NumPy and is intended to be able
+to integrate very easily with other NumPy-based scientific libraries,
+such as :mod:`scikits.statsmodels`.
+
+.. note::
+
+   This documentation assumes general familiarity with NumPy. If you
+   haven't used NumPy much or at all, please check out the `NumPy
+   documentation <http://docs.scipy.org>`__ first.
+
+User manual
+-----------
+
+.. module:: pandas
+
+**License:** BSD
+
+**Requirements:** python 2.4 to 2.6 and latest NumPy
+
+**Code Repository:** http://pandas.googlecode.com
 
 .. toctree::
-   :maxdepth: 5
+    :maxdepth: 2
+
+    installation
+    core
+    datetools
+    stats
+
 
-   introduction
-   core
-   stats
+***************
+Quick Reference
+***************
+
+.. autosummary::
+   :toctree: generated/
+
+   Index
+   Series
+   TimeSeries
+   DataFrame
+   DataMatrix
+   WidePanel
+   LongPanel
 
 Indices and tables
 ------------------
@@ -22,3 +79,8 @@ Indices and tables
 * :ref:`modindex`
 * :ref:`search`
 
+Contact
+-------
+
+Please feel free to send comments or questions directly to
+wesmckinn@gmail.com or the pystatsmodels mailing list.
\ No newline at end of file
diff --git a/doc/source/indexobj.rst b/doc/source/indexobj.rst
new file mode 100644
index 000000000..407b0a352
--- /dev/null
+++ b/doc/source/indexobj.rst
@@ -0,0 +1,3 @@
+
+Index
+=====
diff --git a/doc/source/installation.rst b/doc/source/installation.rst
new file mode 100644
index 000000000..3678243f4
--- /dev/null
+++ b/doc/source/installation.rst
@@ -0,0 +1,52 @@
+************
+Installation
+************
+
+You have the option to install an official release or to build from
+source. If you choose to install from source and are on Windows, you
+will have to ensure that you have a compatible C compiler (gcc)
+installed (see below).
+
+Binary installers
+-----------------
+
+Available from the Google Code website and PyPI.
+
+Dependencies
+------------
+  * `NumPy <http://www.numpy.org>`__: 1.3.0 or higher
+  * `dateutil <http://labix.org/python-dateutil>`__
+
+Optional dependencies
+---------------------
+  * `SciPy <http://www.scipy.org>`__: miscellaneous statistical functions
+  * `matplotlib <http://matplotlib.sourceforge.net/>`__: for plotting
+  * `scikits.statsmodels <http://statsmodels.sourceforge.net/>`__
+     * Needed for many parts of :mod:`pandas.stats`
+
+.. note::
+
+   Without the optional dependencies, many unit tests will fail.
+
+Installing from source
+----------------------
+
+The source code is hosted at http://pandas.googlecode.com, it can be
+checked out using SVN and compiled / installed like so:
+
+::
+
+  svn co http://pandas.googlecode.com/svn/trunk/ pandas
+
+  cd pandas
+
+  python setup.py install
+
+On Windows, you will need to download and install `gcc / MinGW
+<http://www.mingw.org/wiki/HOWTO_Install_the_MinGW_GCC_Compiler_Suite>`__.
+After adding it to your system path , you can install pandas by typing
+instead:
+
+::
+
+  python setup.py install --compiler=mingw32
diff --git a/doc/source/intro.rst b/doc/source/intro.rst
new file mode 100644
index 000000000..dfa475188
--- /dev/null
+++ b/doc/source/intro.rst
@@ -0,0 +1,9 @@
+************
+Introduction
+************
+
+About
+-----
+
+History
+-------
\ No newline at end of file
diff --git a/doc/source/other.rst b/doc/source/other.rst
index e1559c272..a49932d66 100755
--- a/doc/source/other.rst
+++ b/doc/source/other.rst
@@ -1,4 +1,4 @@
-.. currentmodule:: pandas.core
+.. currentmodule:: pandas
 
 .. _core:
 
diff --git a/doc/source/panel.rst b/doc/source/panel.rst
new file mode 100644
index 000000000..c484bfe14
--- /dev/null
+++ b/doc/source/panel.rst
@@ -0,0 +1,2 @@
+WidePanel / LongPanel
+=====================
diff --git a/doc/source/related.rst b/doc/source/related.rst
new file mode 100644
index 000000000..8a066cefe
--- /dev/null
+++ b/doc/source/related.rst
@@ -0,0 +1,17 @@
+************************
+Related Python libraries
+************************
+
+scikits.statsmodels
+-------------------
+
+scikits.timeseries
+------------------
+
+:mod:`scikits.timeseries` provides a data structure for fixed
+frequency time series data based on the numpy.MaskedArray class. For
+time series data, it provides much of the same functionality to the
+pandas Series class. It has many more functions for time
+series-specific manipulation.
+
+In designing
\ No newline at end of file
diff --git a/doc/source/series.rst b/doc/source/series.rst
new file mode 100644
index 000000000..0bfc63033
--- /dev/null
+++ b/doc/source/series.rst
@@ -0,0 +1,414 @@
+.. _series:
+
+*******************
+Series / TimeSeries
+*******************
+
+.. currentmodule:: pandas
+
+:class:`Series` is a NumPy ndarray subclass which contains a vector
+of labels corresponding to the data values. The labels, which will be
+referred to everywhere as the **index**, can be any Python object;
+common examples are datetimes or strings. The object is designed to
+handle missing observations and support arithmetic between
+different-sized Series by matching index values.
+
+Because Series is an ndarray, it can be used interchangeably in
+NumPy-based functions expecting one-dimensional ndarrays.
+
+.. note::
+
+    The basic concepts presented here apply to the higher dimensional
+    data structures in pandas as well
+
+Construction
+------------
+
+There are a number of ways to create Series objects. The most common
+is to use the default constructor and pass two equal-length sequences:
+one for the values, one for the index:
+
+::
+
+    >>> import numpy as np; from pandas import *
+
+    >>> values = np.arange(5.)
+    >>> labels = ['a', 'b', 'c', 'd', 'e']
+    >>> s = Series(values, index=labels)
+    >>> s
+    a    0.0
+    b    1.0
+    c    2.0
+    d    3.0
+    e    4.0
+
+We could also create this Series from a dict representing the data:
+
+::
+
+    >>> data = {'a': 0.0, 'b': 1.0, 'c': 2.0, 'd': 3.0, 'e': 4.0}
+    >>> Series.fromDict(data)
+    a    0.0
+    b    1.0
+    c    2.0
+    d    3.0
+    e    4.0
+
+
+Any Series instance has the attribute **index** which is an Index
+object containing the value labels:
+
+::
+
+    >>> s.index
+    Index([a, b, c, d, e], dtype=object)
+
+The index defines the *__contains__* behavior of the Series:
+
+::
+
+    >>> 'a' in s
+    True
+
+    >>> 'a' in s.index
+    True
+
+If an index contains all Python datetime objects, the created series
+will be of type TimeSeries (so it is never necessary to explicitly use
+the TimeSeries constructor):
+
+::
+
+    >>> dates
+    [datetime.datetime(2009, 1, 1, 0, 0),
+     datetime.datetime(2009, 1, 2, 0, 0),
+     datetime.datetime(2009, 1, 5, 0, 0),
+     datetime.datetime(2009, 1, 6, 0, 0),
+     datetime.datetime(2009, 1, 7, 0, 0)]
+
+    >>> ts = Series(values, index=dates)
+    2009-01-01 00:00:00    0.0
+    2009-01-02 00:00:00    1.0
+    2009-01-05 00:00:00    2.0
+    2009-01-06 00:00:00    3.0
+    2009-01-07 00:00:00    4.0
+
+    >>> type(ts)
+    <class 'pandas.core.series.TimeSeries'>
+
+Summary of constructors
+~~~~~~~~~~~~~~~~~~~~~~~
+
+.. autosummary::
+   :toctree: generated/
+
+   Series
+   Series.fromDict
+   Series.fromValue
+
+Indexing
+--------
+
+A Series operations similar to both an ndarray and a Python dict. For
+example, values can be accessed either by integer location or by
+index value:
+
+::
+
+    >>> s[1]
+    1.0
+    >>> s['b']
+    1.0
+
+If the index contains integers and there is ambiguity, the index will
+be preferred.
+
+For completeness of the dict-like interface, the **get** function is
+provided for analogous behavior:
+
+::
+
+    >>> s.get('f')
+    None
+
+    >>> s.get('f', 0)
+    0
+
+Standard Python boolean indexing works as expected, as do slicing and
+NumPy fancy indexing:
+
+::
+
+    >>> s[s > 2]
+    d    3.0
+    e    4.0
+
+    >>> s[-3:]
+    c    2.0
+    d    3.0
+    e    4.0
+
+    >>> s[[4, 3, 1]]
+    e    4.0
+    d    3.0
+    b    1.0
+
+Observe that a new Index has been constructed corresponding to the
+selected data.
+
+Of course, the same behavior applies to *setting* values:
+
+::
+
+    >>> s[s > 2] = -1
+    >>> print s
+    a    0.0
+    b    1.0
+    c    2.0
+    d    -1.0
+    e    -1.0
+
+
+Arithmetic, data alignment
+--------------------------
+
+Binary operations between Series objects ensure that two values being
+combined have the same index value. This serves to prevent a lot of
+the headache generally associated with heterogeneous data; the user is
+**not** to ensure that all Series have the same index.
+
+::
+
+    >>> s + 2 * s
+    a    0.0
+    b    3.0
+    c    6.0
+    d    9.0
+    e    12.0
+
+    >>> s + s[2:]
+    a    nan
+    b    nan
+    c    4.0
+    d    6.0
+    e    8.0
+
+In this latter example, you can see that, since the **a** and **b**
+values were missing in the second Series, the sum has NaN in those
+locations. In general, pandas represents missing data as NaN (more on
+this below).
+
+Handling missing data and reindexing
+------------------------------------
+
+For all of the pandas data structures, we chose to represent missing
+data as NaN. However, missing data could be represented in some other
+forms (e.g. *None* values generated from DBNULL values in SQL
+data). This problem is compounded by the fact that *numpy.isnan* is
+only valid on float arrays. For this reason, pandas includes two
+functions for testing for validity, **isnull** and **notnull**. These
+functions are implemented in Cython and provide reasonably good
+performance on object arrays. For numerical arrays, the performance
+will be equivalent to *numpy.isfinite*.
+
+::
+
+    >>> s
+    a    0.0
+    b    1.0
+    c    nan
+    d    3.0
+    e    4.0
+
+    >>> isnull(s)
+    a    False
+    b    False
+    c    True
+    d    False
+    e    False
+
+    >>> isnull(None)
+    True
+
+These functions can be used, for example, to select only valid data
+from a Series. Since this is such a common operation, a method
+**valid** to do the same thing:
+
+::
+
+    >>> s[notnull(s)]
+    a    0.0
+    b    1.0
+    d    3.0
+    e    4.0
+
+    >>> s.valid()
+    a    0.0
+    b    1.0
+    d    3.0
+    e    4.0
+
+.. note::
+
+    The choice of using NaN for missing data was one of practicality
+    and ease-of-implementation. It differs from the MaskedArray
+    approach of, for example, :mod:`scikits.timeseries`.
+
+Filling, padding, and interpolating values
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+.. autosummary::
+   :toctree: generated/
+
+   Series.fill
+   Series.interpolate
+
+Reindexing
+~~~~~~~~~~
+
+.. autosummary::
+   :toctree: generated/
+
+   Series.reindex
+   Series.valid
+   Series.merge
+   Series.truncate
+
+Iterating
+---------
+
+Series iterates by default over its values as though it were a regular
+ndarray.
+
+Otherwise, methods providing dict-like iteration are available:
+
+.. autosummary::
+   :toctree: generated/
+
+   Series.keys
+   Series.values
+   Series.iteritems
+
+Basic statistical functions
+---------------------------
+
+There are many built-in ndarray methods providing basic descriptive
+statistics. Since these do not handle missing observations (which are
+represented in our case as NaN), we've overrided these methods to do
+the appropriate handling.
+
+For example:
+
+::
+
+    >>> s
+    a    0.0
+    b    1.0
+    c    nan
+    d    3.0
+    e    4.0
+
+    >>> s.count()
+    4
+
+    >>> s.std()
+    1.8257418583505536
+
+    >>> s.cumsum()
+    a    0.0
+    b    1.0
+    c    nan
+    d    4.0
+    e    8.0
+
+Due to the way the numpy.{sum, mean, var, std} are implemented, they
+can be used safely:
+
+::
+
+    >>> np.mean(s)
+    2.0
+
+Method summary
+~~~~~~~~~~~~~~
+
+.. autosummary::
+   :toctree: generated/
+
+   Series.count
+   Series.sum
+   Series.mean
+   Series.min
+   Series.max
+   Series.std
+   Series.var
+   Series.skew
+   Series.median
+   Series.cumsum
+   Series.cumprod
+
+Additionally, some other useful methods not present in ndarray are
+implemented:
+
+.. autosummary::
+   :toctree: generated/
+
+   Series.corr
+   Series.cap
+   Series.floor
+
+Sorting
+-------
+
+TODO
+
+.. autosummary::
+   :toctree: generated/
+
+   Series.argsort
+   Series.sort
+   Series.order
+
+TimeSeries-oriented methods
+---------------------------
+
+TODO
+
+.. autosummary::
+   :toctree: generated/
+
+   Series.asfreq
+   Series.shift
+   Series.asOf
+   Series.weekday
+
+GroupBy functionality
+---------------------
+
+TODO
+
+Plotting
+--------
+
+TODO
+
+.. autosummary::
+   :toctree: generated/
+
+   Series.plot
+
+Misc methods
+------------
+
+TODO
+
+.. autosummary::
+   :toctree: generated/
+
+   Series.append
+   Series.combineFunc
+   Series.combineFirst
+   Series.map
+   Series.copy
+   Series.toCSV
+   Series.diff
