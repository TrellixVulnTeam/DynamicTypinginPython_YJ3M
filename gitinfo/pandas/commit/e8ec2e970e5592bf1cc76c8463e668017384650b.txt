commit e8ec2e970e5592bf1cc76c8463e668017384650b
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Jul 9 15:03:03 2011 -0400

    some generification

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index a073197f3..82ae28f6b 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -24,7 +24,7 @@ import numpy as np
 from pandas.core.common import (isnull, notnull, PandasError, _ensure_index,
                                 _try_sort, _pfixed, _default_index)
 from pandas.core.daterange import DateRange
-from pandas.core.generic import PandasGeneric
+from pandas.core.generic import AxisProperty, PandasGeneric
 from pandas.core.index import Index, NULL_INDEX
 from pandas.core.internals import BlockManager, make_block
 from pandas.core.series import Series, _is_bool_indexer
@@ -130,6 +130,9 @@ class DataFrame(PandasGeneric):
         if data is None:
             data = {}
 
+        if isinstance(data, DataFrame):
+            data = data._data
+
         if isinstance(data, BlockManager):
             # do not copy BlockManager unless explicitly done
             mgr = data
@@ -138,13 +141,6 @@ class DataFrame(PandasGeneric):
             elif dtype is not None:
                 # no choice but to copy
                 mgr = mgr.cast(dtype)
-        elif isinstance(data, DataFrame):
-            mgr = data._data
-            if copy and dtype is None:
-                mgr = mgr.copy()
-            elif dtype is not None:
-                # no choice but to copy
-                mgr = mgr.cast(dtype)
         elif isinstance(data, dict):
             mgr = self._init_dict(data, index, columns, dtype=dtype)
         elif isinstance(data, (np.ndarray, list)):
@@ -571,29 +567,9 @@ class DataFrame(PandasGeneric):
     #----------------------------------------------------------------------
     # properties for index and columns
 
-    def _set_columns(self, cols):
-        self._data.items = cols
-
-    def _set_index(self, index):
-        self._data.set_axis(1, index)
-
-    def _get_index(self):
-        return self._data.axes[1]
-
-    def _get_columns(self):
-        return self._data.items
-
-    def _get_values(self):
-        self._consolidate_inplace()
-        # returns items x index
-        values = self._data.as_matrix()
-        return values.T
-
-    index = property(fget=lambda self: self._get_index(),
-                     fset=lambda self, x: self._set_index(x))
-    columns = property(fget=lambda self: self._get_columns(),
-                       fset=lambda self, x: self._set_columns(x))
-    values = property(fget=_get_values)
+    # reference underlying BlockManager
+    columns = AxisProperty(0)
+    index = AxisProperty(1)
 
     def as_matrix(self, columns=None):
         """
@@ -605,6 +581,8 @@ class DataFrame(PandasGeneric):
         self._consolidate_inplace()
         return self._data.as_matrix(columns).T
 
+    values = property(fget=as_matrix)
+
     def transpose(self):
         """
         Returns a DataFrame with the rows/columns switched. Copy of data is not
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index af8212110..9f964d7ec 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -24,6 +24,19 @@ class Picklable(object):
 class PandasError(Exception):
     pass
 
+class AxisProperty(object):
+
+    def __init__(self, axis=0):
+        self.axis = axis
+
+    def __get__(self, obj, type=None):
+        data = getattr(obj, '_data')
+        return data.axes[self.axis]
+
+    def __set__(self, obj, value):
+        data = getattr(obj, '_data')
+        data.set_axis(self.axis, value)
+
 class NDFrame(object):
     """
     N-dimensional labeled array data structure with potentially heterogenous
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index eccd76f52..d2ff18a83 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -248,10 +248,12 @@ class BlockManager(object):
                             % (len(index), len(cur_axis)))
         self.axes[axis] = _ensure_index(value)
 
+        if axis == 0:
+            for block in self.blocks:
+                block.set_ref_items(self.items, maybe_rename=True)
+
     def _set_items(self, value):
         self.set_axis(0, value)
-        for block in self.blocks:
-            block.set_ref_items(self.items, maybe_rename=True)
 
     def _get_items(self):
         return self.axes[0]
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 675566d8b..0a8be5518 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -14,7 +14,7 @@ from pandas.core.common import (PandasError, _mut_exclusive, _ensure_index,
 from pandas.core.index import Index
 from pandas.core.internals import BlockManager, make_block
 from pandas.core.frame import DataFrame
-from pandas.core.generic import PandasGeneric, Picklable
+from pandas.core.generic import AxisProperty, PandasGeneric, Picklable
 import pandas.core.common as common
 import pandas._tseries as _tseries
 
@@ -153,19 +153,6 @@ class Panel(object):
                       FutureWarning)
         return self.shape
 
-class AxisProperty(object):
-
-    def __init__(self, axis=0):
-        self.axis = axis
-
-    def __get__(self, obj, type=None):
-        data = getattr(obj, '_data')
-        return data.axes[self.axis]
-
-    def __set__(self, obj, value):
-        data = getattr(obj, '_data')
-        data.set_axis(self.axis, value)
-
 class WidePanel(Panel, PandasGeneric):
     """
     Represents wide format panel data, stored as 3-dimensional array
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index fbddbec7f..c58763ea1 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -601,12 +601,14 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         idx = Index(np.arange(len(self.mixed_frame)))
         self.mixed_frame.index = idx
         self.assert_(self.mixed_frame['foo'].index  is idx)
-        self.assertRaises(Exception, self.mixed_frame._set_index, idx[::2])
+        self.assertRaises(Exception, setattr, self.mixed_frame, 'index',
+                          idx[::2])
 
     def test_set_columns(self):
         cols = Index(np.arange(len(self.mixed_frame.columns)))
         self.mixed_frame.columns = cols
-        self.assertRaises(Exception, self.mixed_frame._set_columns, cols[::2])
+        self.assertRaises(Exception, setattr, self.mixed_frame, 'columns',
+                          cols[::2])
 
     def test_constructor(self):
         df = self.klass()
