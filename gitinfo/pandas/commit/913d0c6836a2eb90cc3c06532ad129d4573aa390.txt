commit 913d0c6836a2eb90cc3c06532ad129d4573aa390
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Jan 5 10:41:17 2011 -0500

    fix DataMatrix.combineFirst issues + unit tests

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 03b5e1d97..c97002af8 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -767,7 +767,7 @@ class DataFrame(Picklable, Groupable):
         of columns is provided.
         """
         if columns is None:
-            return np.array([self[col] for col in self.columns]).T
+            return np.array([self[col] for col in self.cols()]).T
         else:
             return np.array([self[col] for col in columns]).T
 
@@ -1463,7 +1463,6 @@ class DataFrame(Picklable, Groupable):
             return other.copy()
 
         new_index = self.index
-        new_columns = self.columns
         this = self
 
         if not self.index.equals(other.index):
@@ -1471,9 +1470,7 @@ class DataFrame(Picklable, Groupable):
             this = self.reindex(new_index)
             other = other.reindex(new_index)
 
-        if not self.columns.equals(other.columns):
-            new_columns = self.columns + other.columns
-
+        new_columns = _try_sort(set(this.cols() + other.cols()))
         do_fill = fill_value is not None
 
         result = {}
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index 8cfb271d3..bccb250a0 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -911,8 +911,12 @@ class DataMatrix(DataFrame):
 
             if self.objects:
                 values = np.column_stack((values, self.objects.values))
+                order = Index(np.concatenate((self.columns,
+                                                self.objects.columns)))
+            else:
+                order = self.columns
 
-            return values
+            columns = Index(self.cols())
         else:
             if not isinstance(columns, Index):
                 columns = Index(columns)
@@ -927,13 +931,11 @@ class DataMatrix(DataFrame):
                 obj_values = self.objects.values.take(indexer, axis=1)
 
                 values = np.column_stack((values, obj_values))
-                order = Index(np.concatenate((order, self.objects.columns)))
 
-                # now put in the right order
-
-            values = _reorder_columns(values, order, columns)
+                order = Index(np.concatenate((order, self.objects.columns)))
 
-            return values
+        # now put in the right order
+        return _reorder_columns(values, order, columns)
 
     def cols(self):
         """Return sorted list of frame's columns"""
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index 8fd67611e..7ea9f570c 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -1204,6 +1204,29 @@ class TestDataFrame(unittest.TestCase):
         comb = self.empty.combineFirst(self.frame)
         assert_frame_equal(comb, self.frame)
 
+    def test_combineFirst_mixed_bug(self):
+	idx = Index(['a','b','c','e'])
+	ser1 = Series([5.0,-9.0,4.0,100.],index=idx)
+	ser2 = Series(['a', 'b', 'c', 'e'], index=idx)
+	ser3 = Series([12,4,5,97], index=idx)
+
+	frame1 = self.klass({"col0" : ser1,
+                             "col2" : ser2,
+                             "col3" : ser3})
+
+	idx = Index(['a','b','c','f'])
+	ser1 = Series([5.0,-9.0,4.0,100.], index=idx)
+	ser2 = Series(['a','b','c','f'], index=idx)
+	ser3 = Series([12,4,5,97],index=idx)
+
+	frame2 = self.klass({"col1" : ser1,
+                             "col2" : ser2,
+                             "col5" : ser3})
+
+
+        combined = frame1.combineFirst(frame2)
+        self.assertEqual(len(combined.cols()), 5)
+
     def test_combineAdd(self):
         # trivial
         comb = self.frame.combineAdd(self.frame)
diff --git a/pandas/core/tests/test_series.py b/pandas/core/tests/test_series.py
index 9e08bc183..222d8a6ad 100644
--- a/pandas/core/tests/test_series.py
+++ b/pandas/core/tests/test_series.py
@@ -628,7 +628,7 @@ class TestSeries(unittest.TestCase):
         reindexed = self.empty.reindex(self.ts.index, method='pad')
 
         # don't forget to fix this
-        reindexed_dep = self.empty.reindex(self.ts.index, fillMethod='pad')
+        reindexed_dep = self.empty.reindex(self.ts.index, method='pad')
 
         # pass non-Index
         reindexed = self.ts.reindex(list(self.ts.index))
diff --git a/setup.py b/setup.py
index 4e8387074..b417f2cd1 100644
--- a/setup.py
+++ b/setup.py
@@ -70,7 +70,7 @@ version = '%s'
         a.close()
 
 def configuration(parent_package='', top_path=None):
-    write_version_py()
+    # write_version_py()
 
     config = Configuration(None, parent_package, top_path,
                            version=FULLVERSION)
