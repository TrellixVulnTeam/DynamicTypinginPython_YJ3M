commit bd8e1ce54b5e9580de0573c270d630a016d5614e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Dec 3 19:48:59 2009 +0000

    deleted miscellaneous unneeded methods, bugfix to DataMatrix.__init__
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@70 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index db95ec0da..17efeb8d4 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -236,40 +236,6 @@ class DataFrame(Picklable, Groupable):
                                       for idx in colIndex]),
                          index = index)
 
-    @classmethod
-    def load(cls, baseFile):
-        """
-        Load DataFrame from file.
-
-        Parameters
-        ----------
-        baseFile: string
-            Filename base where index/values are stored.
-            e.g. baseFile='myfile' --> 'myfile_index.npy', 'myfile_values.npy'
-
-        Returns
-        -------
-        DataFrame
-        """
-        cacheLoad = np.load(baseFile + '.npz')
-
-        values = cacheLoad['v']
-        index = Index(cacheLoad['i'])
-        cols = cacheLoad['c']
-
-        return cls.fromMatrix(values, cols, index)
-
-    def save(self, baseFile):
-        """
-        Write DataFrame efficiently to file using NumPy serialization,
-        which is easily 100x faster than cPickle.
-
-        Note
-        ----
-        Saves data to 3 files, one for index, columns, and values matrix.
-        """
-        np.savez(baseFile, i=self.index, v=self.values, c=self.columns)
-
 #-------------------------------------------------------------------------------
 # Magic methods
 
@@ -316,20 +282,6 @@ class DataFrame(Picklable, Groupable):
             else:
                 raise
 
-    def pop(self, item):
-        """
-        Return column and drop from frame. Raise KeyError if not
-        found.
-
-        Returns
-        -------
-        Series
-        """
-        result = self[item]
-        del self[item]
-
-        return result
-
     def __setitem__(self, key, value):
         """
         Add series to DataFrame in specified column.
@@ -364,6 +316,20 @@ class DataFrame(Picklable, Groupable):
         """
         r = self._series.pop(key, None)
 
+    def pop(self, item):
+        """
+        Return column and drop from frame. Raise KeyError if not
+        found.
+
+        Returns
+        -------
+        Series
+        """
+        result = self[item]
+        del self[item]
+
+        return result
+
     def __iter__(self):
         """
         Iterate over columns of the frame.
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 47f9385b1..bc42e21a7 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -129,6 +129,7 @@ class Index(np.ndarray):
                 return self[loc-1]
             else:
                 return None
+
         return date
 
     def sort(self, *args, **kwargs):
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index 04a7403ff..1035c351e 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -91,16 +91,16 @@ class DataMatrix(DataFrame):
                         objectDict[k] = v
 
                 if columns is None:
-                    valueColumns = Index(sorted(valueDict))
+                    columns = Index(sorted(valueDict))
                     objectColumns = Index(sorted(objectDict))
                 else:
-                    valueColumns = Index([c for c in columns if c in valueDict])
                     objectColumns = Index([c for c in columns if c in objectDict])
+                    columns = Index([c for c in columns if c in valueDict])
 
                 if len(valueDict) == 0:
                     dtype = np.object_
                     valueDict = objectDict
-                    valueColumns = objectColumns
+                    columns = objectColumns
                 else:
                     dtype = np.float_
                     if len(objectDict) > 0:
@@ -109,12 +109,12 @@ class DataMatrix(DataFrame):
                     else:
                         objects = None
 
-                values = np.empty((len(index), len(valueColumns)), dtype=dtype)
+                values = np.empty((len(index), len(columns)), dtype=dtype)
 
-                for i, col in enumerate(valueColumns):
+                for i, col in enumerate(columns):
                     values[:, i] = valueDict[col]
 
-            return index, valueColumns, values, objects
+            return index, columns, values, objects
 
         if isinstance(data, dict):
             index, columns, values, objects = handleDict(data, index,
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index e1223a07a..e5ee13831 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -1414,11 +1414,6 @@ def _makeItemName(item, prefix=None):
     template = '%g%s' if isinstance(item, float) else '%s%s'
     return template % (prefix, item)
 
-def _makePrefixedLongPanel(values, items, index, prefix):
-    items = [_makeItemName(item, prefix) for item in items]
-
-    return LongPanel(values, items, index)
-
 def _homogenize(frames, intersect=True):
     """
     Conform set of DataFrame-like objects to either an intersection
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 5a0af81a4..335ceebe8 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -228,44 +228,6 @@ class Series(np.ndarray, Picklable, Groupable):
 
         return Series(arr, index=index)
 
-    @classmethod
-    def load(cls, baseFile):
-        """
-        Load Series from file.
-
-        Parameters
-        ----------
-        baseFile: string
-            Filename base where index/values are stored.
-            e.g. baseFile='myfile' --> 'myfile_index.npy', 'myfile_values.npy'
-
-        Returns
-        -------
-        Series or TimeSeries
-        """
-        indexFile = baseFile + '_index.npy'
-        valuesFile = baseFile + '_values.npy'
-        index = np.load(indexFile)
-        values = np.load(valuesFile)
-
-        return cls(values, index=index)
-
-    def save(self, baseFile):
-        """
-        Save Series to file.
-
-        Parameters
-        ----------
-        baseFile: string
-            Filename base where index/values are stored.
-            e.g. baseFile='myfile' --> 'myfile_index.npy', 'myfile_values.npy'
-        """
-        indexFile = baseFile + '_index'
-        valuesFile = baseFile + '_values'
-
-        np.save(indexFile, self.index)
-        np.save(valuesFile, self)
-
     def __contains__(self, key):
         return key in self.index
 
@@ -781,21 +743,6 @@ class Series(np.ndarray, Picklable, Groupable):
 
         pylab.plot(self.index, self, **kwds)
 
-    def unstack(self):
-        """
-        Inverse operator for *stack*
-        """
-        from pandas.core.frame import DataFrame
-        data = {}
-        for idx, value in self.iteritems():
-            row, col = idx.split(';')
-            try:
-                row = datetime.fromordinal(int(row))
-            except Exception, e:
-                pass
-            data.setdefault(row, {})[col] = value
-        return DataFrame.fromDict(data)
-
     def toCSV(self, path=None):
         """
         Write the Series to a CSV file
@@ -840,6 +787,22 @@ class Series(np.ndarray, Picklable, Groupable):
         """
         return remove_na(self)
 
+    def _firstTimeWithValue(self):
+        noNA = remove_na(self)
+
+        if len(noNA) > 0:
+            return noNA.index[0]
+        else:
+            return None
+
+    def _lastTimeWithValue(self):
+        noNA = remove_na(self)
+
+        if len(noNA) > 0:
+            return noNA.index[-1]
+        else:
+            return None
+
 #-------------------------------------------------------------------------------
 # TimeSeries methods
 
@@ -911,6 +874,35 @@ class Series(np.ndarray, Picklable, Groupable):
 
         return self[beg_slice:end_slice]
 
+    def truncate(self, before=None, after=None):
+        """Function truncate a TimeSeries before and/or after some
+        particular dates.
+
+        Parameters
+        ----------
+        before: date
+            Truncate before date
+        after: date
+            Truncate after date
+
+        Note
+        ----
+        If TimeSeries is contained in a DataFrame, consider using the version
+        of the function there.
+
+        Returns
+        -------
+        TimeSeries
+        """
+        before = datetools.to_datetime(before)
+        after = datetools.to_datetime(after)
+
+        if before is None:
+            before = min(self.index)
+        if after is None:
+            after = max(self.index)
+        return self.slice(before, after)
+
     def asOf(self, date):
         """
         Return last good (non-NaN) value in TimeSeries if value is NaN for
@@ -1105,35 +1097,6 @@ class Series(np.ndarray, Picklable, Groupable):
         return self.__class__([d.weekday() for d in self.index],
                               index = self.index)
 
-    def truncate(self, before=None, after=None):
-        """Function truncate a TimeSeries before and/or after some
-        particular dates.
-
-        Parameters
-        ----------
-        before: date
-            Truncate before date
-        after: date
-            Truncate after date
-
-        Note
-        ----
-        If TimeSeries is contained in a DataFrame, consider using the version
-        of the function there.
-
-        Returns
-        -------
-        TimeSeries
-        """
-        before = datetools.to_datetime(before)
-        after = datetools.to_datetime(after)
-
-        if before is None:
-            before = min(self.index)
-        if after is None:
-            after = max(self.index)
-        return self.slice(before, after)
-
     def diff(self):
         """
         1st discrete difference of object
@@ -1154,22 +1117,6 @@ class Series(np.ndarray, Picklable, Groupable):
         """
         return self.corr(self.shift(1))
 
-    def _firstTimeWithValue(self):
-        noNA = remove_na(self)
-
-        if len(noNA) > 0:
-            return noNA.index[0]
-        else:
-            return None
-
-    def _lastTimeWithValue(self):
-        noNA = remove_na(self)
-
-        if len(noNA) > 0:
-            return noNA.index[-1]
-        else:
-            return None
-
 
 class TimeSeries(Series):
     pass
diff --git a/pandas/core/tests/test_matrix.py b/pandas/core/tests/test_matrix.py
index b08a41812..3e386b4f8 100644
--- a/pandas/core/tests/test_matrix.py
+++ b/pandas/core/tests/test_matrix.py
@@ -15,5 +15,12 @@ import pandas.core.tests.common as common
 class TestDataMatrix(test_frame.TestDataFrame):
     klass = DataMatrix
 
+    def test_more_constructor(self):
+        pass
+
+    def test_more_fromDict(self):
+        pass
+
+
 if __name__ == '__main__':
     unittest.main()
diff --git a/pandas/stats/math.py b/pandas/stats/math.py
index db4b61269..369366d1c 100644
--- a/pandas/stats/math.py
+++ b/pandas/stats/math.py
@@ -120,3 +120,13 @@ def calc_F(R, r, beta, var_beta, nobs, df):
     p_value = 1 - stats.f.cdf(F, q, nobs - df)
 
     return F, (q, nobs - df), p_value
+
+def chain_dot(*matrices):
+    """
+    Returns the dot product of the given matrices.
+
+    Parameters
+    ----------
+    matrices: argument list of ndarray
+    """
+    return reduce(lambda x, y: np.dot(y, x), matrices[::-1])
diff --git a/pandas/stats/tests/common.py b/pandas/stats/tests/common.py
index c149e20dd..2c84c5612 100644
--- a/pandas/stats/tests/common.py
+++ b/pandas/stats/tests/common.py
@@ -1,3 +1,5 @@
+# pylint: disable-msg=W0611,W0402
+
 from datetime import datetime
 import string
 import unittest
