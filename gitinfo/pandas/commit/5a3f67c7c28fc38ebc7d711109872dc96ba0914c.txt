commit 5a3f67c7c28fc38ebc7d711109872dc96ba0914c
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jun 11 12:55:12 2012 -0400

    BUG: assignment of rows via ix in mixed-dtype DataFrame. close #1432

diff --git a/RELEASE.rst b/RELEASE.rst
index af05f58c5..d506ecf13 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -177,6 +177,7 @@ pandas 0.8.0
   - Treat dict return values as Series in GroupBy.apply (#823)
   - Respect column selection for DataFrame in in GroupBy.transform (#1365)
   - Fix MultiIndex partial indexing bug (#1352)
+  - Enable assignment of rows in mixed-type DataFrame via .ix (#1432)
 
 pandas 0.7.3
 ============
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 280c0a41e..c42e44fa1 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -88,9 +88,15 @@ class _NDFrameIndexer(object):
 
             plane_indexer = indexer[:het_axis] + indexer[het_axis + 1:]
             item_labels = self.obj._get_axis(het_axis)
-            for item in item_labels[het_idx]:
-                data = self.obj[item]
-                data.values[plane_indexer] = value
+
+            try:
+                for item in item_labels[het_idx]:
+                    data = self.obj[item]
+                    data.values[plane_indexer] = value
+            except ValueError:
+                for item, v in zip(item_labels[het_idx], value):
+                    data = self.obj[item]
+                    data.values[plane_indexer] = v
         else:
             if isinstance(indexer, tuple):
                 indexer = _maybe_convert_ix(*indexer)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 06f47677c..ce104d6b4 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -640,8 +640,31 @@ class CheckIndexing(object):
         self.mixed_frame.ix[5] = np.nan
         self.assert_(isnull(self.mixed_frame.ix[5]).all())
 
-        self.assertRaises(Exception, self.mixed_frame.ix.__setitem__,
-                          5, self.mixed_frame.ix[6])
+        self.mixed_frame.ix[5] = self.mixed_frame.ix[6]
+        assert_series_equal(self.mixed_frame.ix[5], self.mixed_frame.ix[6])
+
+        # #1432
+        df = DataFrame({1: [1., 2., 3.],
+                        2: [3, 4, 5]})
+        self.assert_(df._is_mixed_type)
+
+        df.ix[1] = [5, 10]
+
+        expected = DataFrame({1: [1., 5., 3.],
+                              2: [3, 10, 5]})
+
+        assert_frame_equal(df, expected)
+
+    def test_getitem_setitem_non_ix_labels(self):
+        df = tm.makeTimeDataFrame()
+
+        start, end = df.index[[5, 10]]
+
+        result = df.ix[start:end]
+        result2 = df[start:end]
+        expected = df[5:11]
+        assert_frame_equal(result, expected)
+        assert_frame_equal(result2, expected)
 
     def test_ix_assign_column_mixed(self):
         # GH #1142
@@ -906,27 +929,6 @@ class CheckIndexing(object):
         expected = [nan, 'qux', nan, 'qux', nan]
         assert_almost_equal(df['str'].values, expected)
 
-    def test_getitem_setitem_non_ix_labels(self):
-        df = tm.makeTimeDataFrame()
-
-        start, end = df.index[[5, 10]]
-
-        result = df.ix[start:end]
-        result2 = df[start:end]
-        expected = df[5:11]
-        assert_frame_equal(result, expected)
-        assert_frame_equal(result2, expected)
-
-        # not implementing this yet
-
-        # exp = df.copy()
-        # exp[5:10] = exp[-5:].values
-
-        # # setting
-
-        # df[start:end] = df[-5:].values
-        # assert_frame_equal(df, exp)
-
     def test_setitem_fancy_exceptions(self):
         pass
 
