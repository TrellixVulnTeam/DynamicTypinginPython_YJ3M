commit 1bcc368ed7bd955303ff7d9378b59f228a100aa2
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Tue Feb 25 12:41:54 2020 -0800

    REF/TST: method-specific files for combine, update; parametrize (#32228)

diff --git a/pandas/tests/series/methods/test_combine.py b/pandas/tests/series/methods/test_combine.py
new file mode 100644
index 000000000..75d47e3da
--- /dev/null
+++ b/pandas/tests/series/methods/test_combine.py
@@ -0,0 +1,17 @@
+from pandas import Series
+import pandas._testing as tm
+
+
+class TestCombine:
+    def test_combine_scalar(self):
+        # GH#21248
+        # Note - combine() with another Series is tested elsewhere because
+        # it is used when testing operators
+        ser = Series([i * 10 for i in range(5)])
+        result = ser.combine(3, lambda x, y: x + y)
+        expected = Series([i * 10 + 3 for i in range(5)])
+        tm.assert_series_equal(result, expected)
+
+        result = ser.combine(22, lambda x, y: min(x, y))
+        expected = Series([min(i * 10, 22) for i in range(5)])
+        tm.assert_series_equal(result, expected)
diff --git a/pandas/tests/series/methods/test_update.py b/pandas/tests/series/methods/test_update.py
new file mode 100644
index 000000000..b7f5f3329
--- /dev/null
+++ b/pandas/tests/series/methods/test_update.py
@@ -0,0 +1,58 @@
+import numpy as np
+import pytest
+
+from pandas import DataFrame, Series
+import pandas._testing as tm
+
+
+class TestUpdate:
+    def test_update(self):
+        s = Series([1.5, np.nan, 3.0, 4.0, np.nan])
+        s2 = Series([np.nan, 3.5, np.nan, 5.0])
+        s.update(s2)
+
+        expected = Series([1.5, 3.5, 3.0, 5.0, np.nan])
+        tm.assert_series_equal(s, expected)
+
+        # GH 3217
+        df = DataFrame([{"a": 1}, {"a": 3, "b": 2}])
+        df["c"] = np.nan
+
+        df["c"].update(Series(["foo"], index=[0]))
+        expected = DataFrame(
+            [[1, np.nan, "foo"], [3, 2.0, np.nan]], columns=["a", "b", "c"]
+        )
+        tm.assert_frame_equal(df, expected)
+
+    @pytest.mark.parametrize(
+        "other, dtype, expected",
+        [
+            # other is int
+            ([61, 63], "int32", Series([10, 61, 12], dtype="int32")),
+            ([61, 63], "int64", Series([10, 61, 12])),
+            ([61, 63], float, Series([10.0, 61.0, 12.0])),
+            ([61, 63], object, Series([10, 61, 12], dtype=object)),
+            # other is float, but can be cast to int
+            ([61.0, 63.0], "int32", Series([10, 61, 12], dtype="int32")),
+            ([61.0, 63.0], "int64", Series([10, 61, 12])),
+            ([61.0, 63.0], float, Series([10.0, 61.0, 12.0])),
+            ([61.0, 63.0], object, Series([10, 61.0, 12], dtype=object)),
+            # others is float, cannot be cast to int
+            ([61.1, 63.1], "int32", Series([10.0, 61.1, 12.0])),
+            ([61.1, 63.1], "int64", Series([10.0, 61.1, 12.0])),
+            ([61.1, 63.1], float, Series([10.0, 61.1, 12.0])),
+            ([61.1, 63.1], object, Series([10, 61.1, 12], dtype=object)),
+            # other is object, cannot be cast
+            ([(61,), (63,)], "int32", Series([10, (61,), 12])),
+            ([(61,), (63,)], "int64", Series([10, (61,), 12])),
+            ([(61,), (63,)], float, Series([10.0, (61,), 12.0])),
+            ([(61,), (63,)], object, Series([10, (61,), 12])),
+        ],
+    )
+    def test_update_dtypes(self, other, dtype, expected):
+
+        ser = Series([10, 11, 12], dtype=dtype)
+        other = Series(other, index=[1, 3])
+        ser.update(other)
+
+        tm.assert_series_equal(ser, expected)
diff --git a/pandas/tests/series/test_combine_concat.py b/pandas/tests/series/test_combine_concat.py
index 4afa083e9..adb79f69c 100644
--- a/pandas/tests/series/test_combine_concat.py
+++ b/pandas/tests/series/test_combine_concat.py
@@ -2,84 +2,27 @@ import numpy as np
 import pytest
 
 import pandas as pd
-from pandas import DataFrame, Series
-import pandas._testing as tm
+from pandas import Series
 
 
 class TestSeriesCombine:
-    def test_combine_scalar(self):
-        # GH 21248
-        # Note - combine() with another Series is tested elsewhere because
-        # it is used when testing operators
-        s = pd.Series([i * 10 for i in range(5)])
-        result = s.combine(3, lambda x, y: x + y)
-        expected = pd.Series([i * 10 + 3 for i in range(5)])
-        tm.assert_series_equal(result, expected)
-
-        result = s.combine(22, lambda x, y: min(x, y))
-        expected = pd.Series([min(i * 10, 22) for i in range(5)])
-        tm.assert_series_equal(result, expected)
-
-    def test_update(self):
-        s = Series([1.5, np.nan, 3.0, 4.0, np.nan])
-        s2 = Series([np.nan, 3.5, np.nan, 5.0])
-        s.update(s2)
-
-        expected = Series([1.5, 3.5, 3.0, 5.0, np.nan])
-        tm.assert_series_equal(s, expected)
-
-        # GH 3217
-        df = DataFrame([{"a": 1}, {"a": 3, "b": 2}])
-        df["c"] = np.nan
-
-        df["c"].update(Series(["foo"], index=[0]))
-        expected = DataFrame(
-            [[1, np.nan, "foo"], [3, 2.0, np.nan]], columns=["a", "b", "c"]
-        )
-        tm.assert_frame_equal(df, expected)
-
     @pytest.mark.parametrize(
-        "other, dtype, expected",
-        [
-            # other is int
-            ([61, 63], "int32", pd.Series([10, 61, 12], dtype="int32")),
-            ([61, 63], "int64", pd.Series([10, 61, 12])),
-            ([61, 63], float, pd.Series([10.0, 61.0, 12.0])),
-            ([61, 63], object, pd.Series([10, 61, 12], dtype=object)),
-            # other is float, but can be cast to int
-            ([61.0, 63.0], "int32", pd.Series([10, 61, 12], dtype="int32")),
-            ([61.0, 63.0], "int64", pd.Series([10, 61, 12])),
-            ([61.0, 63.0], float, pd.Series([10.0, 61.0, 12.0])),
-            ([61.0, 63.0], object, pd.Series([10, 61.0, 12], dtype=object)),
-            # others is float, cannot be cast to int
-            ([61.1, 63.1], "int32", pd.Series([10.0, 61.1, 12.0])),
-            ([61.1, 63.1], "int64", pd.Series([10.0, 61.1, 12.0])),
-            ([61.1, 63.1], float, pd.Series([10.0, 61.1, 12.0])),
-            ([61.1, 63.1], object, pd.Series([10, 61.1, 12], dtype=object)),
-            # other is object, cannot be cast
-            ([(61,), (63,)], "int32", pd.Series([10, (61,), 12])),
-            ([(61,), (63,)], "int64", pd.Series([10, (61,), 12])),
-            ([(61,), (63,)], float, pd.Series([10.0, (61,), 12.0])),
-            ([(61,), (63,)], object, pd.Series([10, (61,), 12])),
-        ],
+        "dtype", ["float64", "int8", "uint8", "bool", "m8[ns]", "M8[ns]"]
     )
-    def test_update_dtypes(self, other, dtype, expected):
+    def test_concat_empty_series_dtypes_match_roundtrips(self, dtype):
+        dtype = np.dtype(dtype)
 
-        s = Series([10, 11, 12], dtype=dtype)
-        other = Series(other, index=[1, 3])
-        s.update(other)
+        result = pd.concat([Series(dtype=dtype)])
+        assert result.dtype == dtype
 
-        tm.assert_series_equal(s, expected)
+        result = pd.concat([Series(dtype=dtype), Series(dtype=dtype)])
+        assert result.dtype == dtype
 
     def test_concat_empty_series_dtypes_roundtrips(self):
 
         # round-tripping with self & like self
         dtypes = map(np.dtype, ["float64", "int8", "uint8", "bool", "m8[ns]", "M8[ns]"])
 
-        for dtype in dtypes:
-            assert pd.concat([Series(dtype=dtype)]).dtype == dtype
-            assert pd.concat([Series(dtype=dtype), Series(dtype=dtype)]).dtype == dtype
-
         def int_result_type(dtype, dtype2):
             typs = {dtype.kind, dtype2.kind}
             if not len(typs - {"i", "u", "b"}) and (
@@ -118,35 +61,28 @@ class TestSeriesCombine:
                 result = pd.concat([Series(dtype=dtype), Series(dtype=dtype2)]).dtype
                 assert result.kind == expected
 
-    def test_concat_empty_series_dtypes(self):
+    @pytest.mark.parametrize(
+        "left,right,expected",
+        [
+            # booleans
+            (np.bool_, np.int32, np.int32),
+            (np.bool_, np.float32, np.object_),
+            # datetime-like
+            ("m8[ns]", np.bool, np.object_),
+            ("m8[ns]", np.int64, np.object_),
+            ("M8[ns]", np.bool, np.object_),
+            ("M8[ns]", np.int64, np.object_),
+            # categorical
+            ("category", "category", "category"),
+            ("category", "object", "object"),
+        ],
+    )
+    def test_concat_empty_series_dtypes(self, left, right, expected):
+        result = pd.concat([Series(dtype=left), Series(dtype=right)])
+        assert result.dtype == expected
 
-        # booleans
-        assert (
-            pd.concat([Series(dtype=np.bool_), Series(dtype=np.int32)]).dtype
-            == np.int32
-        )
-        assert (
-            pd.concat([Series(dtype=np.bool_), Series(dtype=np.float32)]).dtype
-            == np.object_
-        )
+    def test_concat_empty_series_dtypes_triple(self):
 
-        # datetime-like
-        assert (
-            pd.concat([Series(dtype="m8[ns]"), Series(dtype=np.bool)]).dtype
-            == np.object_
-        )
-        assert (
-            pd.concat([Series(dtype="m8[ns]"), Series(dtype=np.int64)]).dtype
-            == np.object_
-        )
-        assert (
-            pd.concat([Series(dtype="M8[ns]"), Series(dtype=np.bool)]).dtype
-            == np.object_
-        )
-        assert (
-            pd.concat([Series(dtype="M8[ns]"), Series(dtype=np.int64)]).dtype
-            == np.object_
-        )
         assert (
             pd.concat(
                 [Series(dtype="M8[ns]"), Series(dtype=np.bool_), Series(dtype=np.int64)]
@@ -154,11 +90,7 @@ class TestSeriesCombine:
             == np.object_
         )
 
-        # categorical
-        assert (
-            pd.concat([Series(dtype="category"), Series(dtype="category")]).dtype
-            == "category"
-        )
+    def test_concat_empty_series_dtype_category_with_array(self):
         # GH 18515
         assert (
             pd.concat(
@@ -166,13 +98,8 @@ class TestSeriesCombine:
             ).dtype
             == "float64"
         )
-        assert (
-            pd.concat([Series(dtype="category"), Series(dtype="object")]).dtype
-            == "object"
-        )
 
-        # sparse
-        # TODO: move?
+    def test_concat_empty_series_dtypes_sparse(self):
         result = pd.concat(
             [
                 Series(dtype="float64").astype("Sparse"),
