commit b18024d051603702d1fd58b5bdb5b1ac5c7cf119
Author: MomIsBestFriend <50263213+MomIsBestFriend@users.noreply.github.com>
Date:   Tue Jan 14 13:07:24 2020 +0200

    STY: Whitespaces placed at the beginning instead at the end of a line (#30996)

diff --git a/pandas/core/arrays/categorical.py b/pandas/core/arrays/categorical.py
index 280663521..9d7359dd9 100644
--- a/pandas/core/arrays/categorical.py
+++ b/pandas/core/arrays/categorical.py
@@ -2404,8 +2404,8 @@ class Categorical(ExtensionArray, PandasObject):
         if not is_list_like(values):
             values_type = type(values).__name__
             raise TypeError(
-                "only list-like objects are allowed to be passed"
-                f" to isin(), you passed a [{values_type}]"
+                "only list-like objects are allowed to be passed "
+                f"to isin(), you passed a [{values_type}]"
             )
         values = sanitize_array(values, None, None)
         null_mask = np.asarray(isna(values))
diff --git a/pandas/core/arrays/datetimes.py b/pandas/core/arrays/datetimes.py
index e42402b30..1988b2e9e 100644
--- a/pandas/core/arrays/datetimes.py
+++ b/pandas/core/arrays/datetimes.py
@@ -234,11 +234,10 @@ class DatetimeArray(dtl.DatetimeLikeArrayMixin, dtl.TimelikeOps, dtl.DatelikeOps
             values = values._data
 
         if not isinstance(values, np.ndarray):
-            msg = (
+            raise ValueError(
                 f"Unexpected type '{type(values).__name__}'. 'values' must be "
                 "a DatetimeArray ndarray, or Series or Index containing one of those."
             )
-            raise ValueError(msg)
         if values.ndim not in [1, 2]:
             raise ValueError("Only 1-dimensional input arrays are supported.")
 
@@ -249,20 +248,18 @@ class DatetimeArray(dtl.DatetimeLikeArrayMixin, dtl.TimelikeOps, dtl.DatelikeOps
             values = values.view(_NS_DTYPE)
 
         if values.dtype != _NS_DTYPE:
-            msg = (
-                "The dtype of 'values' is incorrect. Must be 'datetime64[ns]'."
-                f" Got {values.dtype} instead."
+            raise ValueError(
+                "The dtype of 'values' is incorrect. Must be 'datetime64[ns]'. "
+                f"Got {values.dtype} instead."
             )
-            raise ValueError(msg)
 
         dtype = _validate_dt64_dtype(dtype)
 
         if freq == "infer":
-            msg = (
+            raise ValueError(
                 "Frequency inference not allowed in DatetimeArray.__init__. "
                 "Use 'pd.array()' instead."
             )
-            raise ValueError(msg)
 
         if copy:
             values = values.copy()
diff --git a/pandas/core/arrays/period.py b/pandas/core/arrays/period.py
index 697d75920..1e2a02e98 100644
--- a/pandas/core/arrays/period.py
+++ b/pandas/core/arrays/period.py
@@ -297,8 +297,8 @@ class PeriodArray(dtl.DatetimeLikeArrayMixin, dtl.DatelikeOps):
                 # ensure we have the same freq
                 if self.freqstr != type.freq:
                     raise TypeError(
-                        "Not supported to convert PeriodArray to array with different"
-                        f" 'freq' ({self.freqstr} vs {type.freq})"
+                        "Not supported to convert PeriodArray to array with different "
+                        f"'freq' ({self.freqstr} vs {type.freq})"
                     )
             else:
                 raise TypeError(
diff --git a/pandas/core/computation/expr.py b/pandas/core/computation/expr.py
index 1350587b5..d91586e6c 100644
--- a/pandas/core/computation/expr.py
+++ b/pandas/core/computation/expr.py
@@ -466,8 +466,8 @@ class BaseExprVisitor(ast.NodeVisitor):
 
         if res.has_invalid_return_type:
             raise TypeError(
-                f"unsupported operand type(s) for {res.op}:"
-                f" '{lhs.type}' and '{rhs.type}'"
+                f"unsupported operand type(s) for {res.op}: "
+                f"'{lhs.type}' and '{rhs.type}'"
             )
 
         if self.engine != "pytables":
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index ada26b55a..c501ada6b 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -265,8 +265,8 @@ class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):
             # a compound dtype
             if dtype.kind == "V":
                 raise NotImplementedError(
-                    "compound dtypes are not implemented"
-                    f" in the {type(self).__name__} constructor"
+                    "compound dtypes are not implemented "
+                    f"in the {type(self).__name__} constructor"
                 )
 
         return dtype
@@ -8993,11 +8993,10 @@ class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):
                 new_data = self._data.copy()
                 new_data.axes[block_axis] = index.shift(periods)
             elif orig_freq is not None:
-                msg = (
-                    f"Given freq {freq.rule_code} does not match"
-                    f" PeriodIndex freq {orig_freq.rule_code}"
+                raise ValueError(
+                    f"Given freq {freq.rule_code} does not match "
+                    f"PeriodIndex freq {orig_freq.rule_code}"
                 )
-                raise ValueError(msg)
         else:
             new_data = self._data.copy()
             new_data.axes[block_axis] = index.shift(periods, freq)
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index 62e3fd28f..f2f53f564 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -4790,8 +4790,8 @@ class Index(IndexOpsMixin, PandasObject):
 
         if side not in ("left", "right"):
             raise ValueError(
-                f"Invalid value for side kwarg, must be either"
-                f" 'left' or 'right': {side}"
+                "Invalid value for side kwarg, must be either "
+                f"'left' or 'right': {side}"
             )
 
         original_label = label
diff --git a/pandas/core/indexes/multi.py b/pandas/core/indexes/multi.py
index 84d7399cc..21421a6f6 100644
--- a/pandas/core/indexes/multi.py
+++ b/pandas/core/indexes/multi.py
@@ -1288,8 +1288,8 @@ class MultiIndex(Index):
                 if level < 0:
                     orig_level = level - self.nlevels
                     raise IndexError(
-                        f"Too many levels: Index has only {self.nlevels} levels,"
-                        f" {orig_level} is not a valid level number"
+                        f"Too many levels: Index has only {self.nlevels} levels, "
+                        f"{orig_level} is not a valid level number"
                     )
             # Note: levels are zero-based
             elif level >= self.nlevels:
@@ -2171,8 +2171,8 @@ class MultiIndex(Index):
         order = [self._get_level_number(i) for i in order]
         if len(order) != self.nlevels:
             raise AssertionError(
-                f"Length of order must be same as number of levels ({self.nlevels}),"
-                f" got {len(order)}"
+                f"Length of order must be same as number of levels ({self.nlevels}), "
+                f"got {len(order)}"
             )
         new_levels = [self.levels[i] for i in order]
         new_codes = [self.codes[i] for i in order]
@@ -2527,8 +2527,8 @@ class MultiIndex(Index):
     def _partial_tup_index(self, tup, side="left"):
         if len(tup) > self.lexsort_depth:
             raise UnsortedIndexError(
-                f"Key length ({len(tup)}) was greater than MultiIndex lexsort depth"
-                f" ({self.lexsort_depth})"
+                f"Key length ({len(tup)}) was greater than MultiIndex lexsort depth "
+                f"({self.lexsort_depth})"
             )
 
         n = len(tup)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index fe5c5fd5e..33565bbed 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1404,8 +1404,8 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         # catch contract violations
         if not isinstance(result, str):
             raise AssertionError(
-                "result must be of type str, type"
-                f" of result is {repr(type(result).__name__)}"
+                "result must be of type str, type "
+                f"of result is {repr(type(result).__name__)}"
             )
 
         if buf is None:
diff --git a/pandas/io/common.py b/pandas/io/common.py
index 6a764ff25..cf1916921 100644
--- a/pandas/io/common.py
+++ b/pandas/io/common.py
@@ -406,8 +406,8 @@ def get_handle(
                     raise ValueError(f"Zero files found in ZIP file {path_or_buf}")
                 else:
                     raise ValueError(
-                        "Multiple files found in ZIP file."
-                        f" Only one file per ZIP: {zip_names}"
+                        "Multiple files found in ZIP file. "
+                        f"Only one file per ZIP: {zip_names}"
                     )
 
         # XZ Compression
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 62b82f174..41db6ed0e 100755
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -906,8 +906,8 @@ class TextFileReader(abc.Iterator):
                         pass
                     else:
                         raise ValueError(
-                            f"The {repr(argname)} option is not supported with the"
-                            f" {repr(engine)} engine"
+                            f"The {repr(argname)} option is not supported with the "
+                            f"{repr(engine)} engine"
                         )
             else:
                 value = _deprecated_defaults.get(argname, default)
diff --git a/pandas/tests/arrays/categorical/test_operators.py b/pandas/tests/arrays/categorical/test_operators.py
index 8643e7f6f..0c830c65e 100644
--- a/pandas/tests/arrays/categorical/test_operators.py
+++ b/pandas/tests/arrays/categorical/test_operators.py
@@ -97,8 +97,8 @@ class TestCategoricalOpsWithFactor(TestCategorical):
         # comparison (in both directions) with Series will raise
         s = Series(["b", "b", "b"])
         msg = (
-            "Cannot compare a Categorical for op __gt__ with type"
-            r" <class 'numpy\.ndarray'>"
+            "Cannot compare a Categorical for op __gt__ with type "
+            r"<class 'numpy\.ndarray'>"
         )
         with pytest.raises(TypeError, match=msg):
             cat > s
@@ -265,8 +265,8 @@ class TestCategoricalOps:
         # categorical cannot be compared to Series or numpy array, and also
         # not the other way around
         msg = (
-            "Cannot compare a Categorical for op __gt__ with type"
-            r" <class 'numpy\.ndarray'>"
+            "Cannot compare a Categorical for op __gt__ with type "
+            r"<class 'numpy\.ndarray'>"
         )
         with pytest.raises(TypeError, match=msg):
             cat > s
diff --git a/pandas/tests/computation/test_eval.py b/pandas/tests/computation/test_eval.py
index 7f68abb92..656b274aa 100644
--- a/pandas/tests/computation/test_eval.py
+++ b/pandas/tests/computation/test_eval.py
@@ -274,9 +274,9 @@ class TestEvalNumexprPandas:
     def check_simple_cmp_op(self, lhs, cmp1, rhs):
         ex = f"lhs {cmp1} rhs"
         msg = (
-            r"only list-like( or dict-like)? objects are allowed to be"
-            r" passed to (DataFrame\.)?isin\(\), you passed a"
-            r" (\[|')bool(\]|')|"
+            r"only list-like( or dict-like)? objects are allowed to be "
+            r"passed to (DataFrame\.)?isin\(\), you passed a "
+            r"(\[|')bool(\]|')|"
             "argument of type 'bool' is not iterable"
         )
         if cmp1 in ("in", "not in") and not is_list_like(rhs):
@@ -408,9 +408,9 @@ class TestEvalNumexprPandas:
         ex = f"~(lhs {cmp1} rhs)"
 
         msg = (
-            r"only list-like( or dict-like)? objects are allowed to be"
-            r" passed to (DataFrame\.)?isin\(\), you passed a"
-            r" (\[|')float(\]|')|"
+            r"only list-like( or dict-like)? objects are allowed to be "
+            r"passed to (DataFrame\.)?isin\(\), you passed a "
+            r"(\[|')float(\]|')|"
             "argument of type 'float' is not iterable"
         )
         if is_scalar(rhs) and cmp1 in skip_these:
diff --git a/pandas/tests/frame/indexing/test_indexing.py b/pandas/tests/frame/indexing/test_indexing.py
index 33c0e9284..40ecda7d7 100644
--- a/pandas/tests/frame/indexing/test_indexing.py
+++ b/pandas/tests/frame/indexing/test_indexing.py
@@ -447,8 +447,8 @@ class TestDataFrameIndexing:
         tm.assert_series_equal(series, float_frame["col6"], check_names=False)
 
         msg = (
-            r"\"None of \[Float64Index\(\[.*dtype='float64'\)\] are in the"
-            r" \[columns\]\""
+            r"\"None of \[Float64Index\(\[.*dtype='float64'\)\] are in the "
+            r"\[columns\]\""
         )
         with pytest.raises(KeyError, match=msg):
             float_frame[np.random.randn(len(float_frame) + 1)] = 1
@@ -1039,9 +1039,9 @@ class TestDataFrameIndexing:
 
         # positional slicing only via iloc!
         msg = (
-            "cannot do slice indexing on"
-            r" <class 'pandas\.core\.indexes\.numeric\.Float64Index'> with"
-            r" these indexers \[1.0\] of <class 'float'>"
+            "cannot do slice indexing on "
+            r"<class 'pandas\.core\.indexes\.numeric\.Float64Index'> with "
+            r"these indexers \[1.0\] of <class 'float'>"
         )
         with pytest.raises(TypeError, match=msg):
             df.iloc[1.0:5]
diff --git a/pandas/tests/frame/test_api.py b/pandas/tests/frame/test_api.py
index 9263409f7..9de5d6fe1 100644
--- a/pandas/tests/frame/test_api.py
+++ b/pandas/tests/frame/test_api.py
@@ -382,8 +382,8 @@ class TestDataFrameMisc:
         tm.assert_frame_equal(df.T, df.swapaxes(1, 0))
         tm.assert_frame_equal(df, df.swapaxes(0, 0))
         msg = (
-            "No axis named 2 for object type"
-            r" <class 'pandas.core(.sparse)?.frame.(Sparse)?DataFrame'>"
+            "No axis named 2 for object type "
+            r"<class 'pandas.core(.sparse)?.frame.(Sparse)?DataFrame'>"
         )
         with pytest.raises(ValueError, match=msg):
             df.swapaxes(2, 5)
diff --git a/pandas/tests/frame/test_constructors.py b/pandas/tests/frame/test_constructors.py
index ea1e339f4..a861e0eb5 100644
--- a/pandas/tests/frame/test_constructors.py
+++ b/pandas/tests/frame/test_constructors.py
@@ -1854,9 +1854,9 @@ class TestDataFrameConstructors:
             # No NaN found -> error
             if len(indexer) == 0:
                 msg = (
-                    "cannot do label indexing on"
-                    r" <class 'pandas\.core\.indexes\.range\.RangeIndex'>"
-                    r" with these indexers \[nan\] of <class 'float'>"
+                    "cannot do label indexing on "
+                    r"<class 'pandas\.core\.indexes\.range\.RangeIndex'> "
+                    r"with these indexers \[nan\] of <class 'float'>"
                 )
                 with pytest.raises(TypeError, match=msg):
                     df.loc[:, np.nan]
diff --git a/pandas/tests/frame/test_dtypes.py b/pandas/tests/frame/test_dtypes.py
index 06bb04022..0d34f61ef 100644
--- a/pandas/tests/frame/test_dtypes.py
+++ b/pandas/tests/frame/test_dtypes.py
@@ -897,15 +897,15 @@ class TestDataFrameDataTypes:
 
         df = DataFrame(np.array([[1, 2, 3]], dtype=dtype))
         msg = (
-            r"cannot astype a datetimelike from \[datetime64\[ns\]\] to"
-            r" \[timedelta64\[{}\]\]"
+            r"cannot astype a datetimelike from \[datetime64\[ns\]\] to "
+            r"\[timedelta64\[{}\]\]"
         ).format(unit)
         with pytest.raises(TypeError, match=msg):
             df.astype(other)
 
         msg = (
-            r"cannot astype a timedelta from \[timedelta64\[ns\]\] to"
-            r" \[datetime64\[{}\]\]"
+            r"cannot astype a timedelta from \[timedelta64\[ns\]\] to "
+            r"\[datetime64\[{}\]\]"
         ).format(unit)
         df = DataFrame(np.array([[1, 2, 3]], dtype=other))
         with pytest.raises(TypeError, match=msg):
diff --git a/pandas/tests/indexes/common.py b/pandas/tests/indexes/common.py
index a16017b0e..afc068d66 100644
--- a/pandas/tests/indexes/common.py
+++ b/pandas/tests/indexes/common.py
@@ -37,8 +37,8 @@ class Base:
     def test_pickle_compat_construction(self):
         # need an object to create with
         msg = (
-            r"Index\(\.\.\.\) must be called with a collection of some"
-            r" kind, None was passed|"
+            r"Index\(\.\.\.\) must be called with a collection of some "
+            r"kind, None was passed|"
             r"__new__\(\) missing 1 required positional argument: 'data'|"
             r"__new__\(\) takes at least 2 arguments \(1 given\)"
         )
diff --git a/pandas/tests/indexes/datetimes/test_constructors.py b/pandas/tests/indexes/datetimes/test_constructors.py
index ffe51dd1f..95d14ad4c 100644
--- a/pandas/tests/indexes/datetimes/test_constructors.py
+++ b/pandas/tests/indexes/datetimes/test_constructors.py
@@ -644,8 +644,8 @@ class TestDatetimeIndex:
         )
 
         msg = (
-            "cannot supply both a tz and a timezone-naive dtype"
-            r" \(i\.e\. datetime64\[ns\]\)"
+            "cannot supply both a tz and a timezone-naive dtype "
+            r"\(i\.e\. datetime64\[ns\]\)"
         )
         with pytest.raises(ValueError, match=msg):
             DatetimeIndex(idx, dtype="datetime64[ns]")
diff --git a/pandas/tests/indexes/multi/test_analytics.py b/pandas/tests/indexes/multi/test_analytics.py
index ac1e08936..209cc627a 100644
--- a/pandas/tests/indexes/multi/test_analytics.py
+++ b/pandas/tests/indexes/multi/test_analytics.py
@@ -334,8 +334,8 @@ def test_numpy_ufuncs(idx, func):
     else:
         expected_exception = TypeError
         msg = (
-            "loop of ufunc does not support argument 0 of type tuple which"
-            f" has no callable {func.__name__} method"
+            "loop of ufunc does not support argument 0 of type tuple which "
+            f"has no callable {func.__name__} method"
         )
     with pytest.raises(expected_exception, match=msg):
         func(idx)
diff --git a/pandas/tests/indexes/period/test_indexing.py b/pandas/tests/indexes/period/test_indexing.py
index 7dbefbdaf..2e3bf8526 100644
--- a/pandas/tests/indexes/period/test_indexing.py
+++ b/pandas/tests/indexes/period/test_indexing.py
@@ -409,8 +409,8 @@ class TestIndexing:
             idx0.get_loc(1.1)
 
         msg = (
-            r"'PeriodIndex\(\['2017-09-01', '2017-09-02', '2017-09-03'\],"
-            r" dtype='period\[D\]', freq='D'\)' is an invalid key"
+            r"'PeriodIndex\(\['2017-09-01', '2017-09-02', '2017-09-03'\], "
+            r"dtype='period\[D\]', freq='D'\)' is an invalid key"
         )
         with pytest.raises(TypeError, match=msg):
             idx0.get_loc(idx0)
@@ -434,8 +434,8 @@ class TestIndexing:
             idx1.get_loc(1.1)
 
         msg = (
-            r"'PeriodIndex\(\['2017-09-02', '2017-09-02', '2017-09-03'\],"
-            r" dtype='period\[D\]', freq='D'\)' is an invalid key"
+            r"'PeriodIndex\(\['2017-09-02', '2017-09-02', '2017-09-03'\], "
+            r"dtype='period\[D\]', freq='D'\)' is an invalid key"
         )
         with pytest.raises(TypeError, match=msg):
             idx1.get_loc(idx1)
diff --git a/pandas/tests/indexes/test_numeric.py b/pandas/tests/indexes/test_numeric.py
index f02516864..582f6c619 100644
--- a/pandas/tests/indexes/test_numeric.py
+++ b/pandas/tests/indexes/test_numeric.py
@@ -188,8 +188,8 @@ class TestFloat64Index(Numeric):
 
         # invalid
         msg = (
-            r"Float64Index\(\.\.\.\) must be called with a collection of"
-            r" some kind, 0\.0 was passed"
+            r"Float64Index\(\.\.\.\) must be called with a collection of "
+            r"some kind, 0\.0 was passed"
         )
         with pytest.raises(TypeError, match=msg):
             Float64Index(0.0)
diff --git a/pandas/tests/indexing/test_floats.py b/pandas/tests/indexing/test_floats.py
index 2cc823256..5530896a9 100644
--- a/pandas/tests/indexing/test_floats.py
+++ b/pandas/tests/indexing/test_floats.py
@@ -123,9 +123,9 @@ class TestFloatIndexers:
 
                 # setting with a float fails with iloc
                 msg = (
-                    r"cannot do (label|index|positional) indexing"
-                    r" on {klass} with these indexers \[3\.0\] of"
-                    r" {kind}".format(klass=type(i), kind=str(float))
+                    r"cannot do (label|index|positional) indexing "
+                    r"on {klass} with these indexers \[3\.0\] of "
+                    r"{kind}".format(klass=type(i), kind=str(float))
                 )
                 with pytest.raises(TypeError, match=msg):
                     s.iloc[3.0] = 0
@@ -160,9 +160,9 @@ class TestFloatIndexers:
             s = Series(np.arange(len(i)), index=i)
             s[3]
             msg = (
-                r"cannot do (label|index) indexing"
-                r" on {klass} with these indexers \[3\.0\] of"
-                r" {kind}".format(klass=type(i), kind=str(float))
+                r"cannot do (label|index) indexing "
+                r"on {klass} with these indexers \[3\.0\] of "
+                r"{kind}".format(klass=type(i), kind=str(float))
             )
             with pytest.raises(TypeError, match=msg):
                 s[3.0]
@@ -177,9 +177,9 @@ class TestFloatIndexers:
         for idxr in [lambda x: x, lambda x: x.iloc]:
 
             msg = (
-                r"cannot do label indexing"
-                r" on {klass} with these indexers \[1\.0\] of"
-                r" {kind}|"
+                r"cannot do label indexing "
+                r"on {klass} with these indexers \[1\.0\] of "
+                r"{kind}|"
                 "Cannot index by location index with a non-integer key".format(
                     klass=str(Index), kind=str(float)
                 )
@@ -199,9 +199,9 @@ class TestFloatIndexers:
         for idxr in [lambda x: x]:
 
             msg = (
-                r"cannot do label indexing"
-                r" on {klass} with these indexers \[1\.0\] of"
-                r" {kind}".format(klass=str(Index), kind=str(float))
+                r"cannot do label indexing "
+                r"on {klass} with these indexers \[1\.0\] of "
+                r"{kind}".format(klass=str(Index), kind=str(float))
             )
             with pytest.raises(TypeError, match=msg):
                 idxr(s3)[1.0]
@@ -313,9 +313,9 @@ class TestFloatIndexers:
                 s.iloc[3.0]
 
             msg = (
-                r"cannot do positional indexing"
-                r" on {klass} with these indexers \[3\.0\] of"
-                r" {kind}".format(klass=str(Float64Index), kind=str(float))
+                r"cannot do positional indexing "
+                r"on {klass} with these indexers \[3\.0\] of "
+                r"{kind}".format(klass=str(Float64Index), kind=str(float))
             )
             with pytest.raises(TypeError, match=msg):
                 s2.iloc[3.0] = 0
@@ -379,10 +379,10 @@ class TestFloatIndexers:
 
                     for idxr in [lambda x: x.loc, lambda x: x.iloc, lambda x: x]:
                         msg = (
-                            "cannot do slice indexing"
-                            r" on {klass} with these indexers"
-                            r" \[(3|4)(\.0)?\]"
-                            r" of ({kind_float}|{kind_int})".format(
+                            "cannot do slice indexing "
+                            r"on {klass} with these indexers "
+                            r"\[(3|4)(\.0)?\] "
+                            r"of ({kind_float}|{kind_int})".format(
                                 klass=type(index),
                                 kind_float=str(float),
                                 kind_int=str(int),
diff --git a/pandas/tests/indexing/test_iloc.py b/pandas/tests/indexing/test_iloc.py
index 26dedf02e..48c25ec03 100644
--- a/pandas/tests/indexing/test_iloc.py
+++ b/pandas/tests/indexing/test_iloc.py
@@ -437,9 +437,9 @@ class TestiLoc(Base):
 
         # trying to use a label
         msg = (
-            r"Location based indexing can only have \[integer, integer"
-            r" slice \(START point is INCLUDED, END point is EXCLUDED\),"
-            r" listlike of integers, boolean array\] types"
+            r"Location based indexing can only have \[integer, integer "
+            r"slice \(START point is INCLUDED, END point is EXCLUDED\), "
+            r"listlike of integers, boolean array\] types"
         )
         with pytest.raises(ValueError, match=msg):
             df.iloc["j", "D"]
diff --git a/pandas/tests/indexing/test_indexing.py b/pandas/tests/indexing/test_indexing.py
index 448a06070..1913caae9 100644
--- a/pandas/tests/indexing/test_indexing.py
+++ b/pandas/tests/indexing/test_indexing.py
@@ -81,8 +81,8 @@ class TestFancy(Base):
         nd3 = np.random.randint(5, size=(2, 2, 2))
 
         msg = (
-            r"Buffer has wrong number of dimensions \(expected 1,"
-            r" got 3\)|"
+            r"Buffer has wrong number of dimensions \(expected 1, "
+            r"got 3\)|"
             "Cannot index with multidimensional key|"
             r"Wrong number of dimensions. values.ndim != ndim \[3 != 1\]|"
             "Index data must be 1-dimensional"
@@ -134,8 +134,8 @@ class TestFancy(Base):
         nd3 = np.random.randint(5, size=(2, 2, 2))
 
         msg = (
-            r"Buffer has wrong number of dimensions \(expected 1,"
-            r" got 3\)|"
+            r"Buffer has wrong number of dimensions \(expected 1, "
+            r"got 3\)|"
             "'pandas._libs.interval.IntervalTree' object has no attribute "
             "'set_value'|"  # AttributeError
             "unhashable type: 'numpy.ndarray'|"  # TypeError
diff --git a/pandas/tests/indexing/test_loc.py b/pandas/tests/indexing/test_loc.py
index a36078b11..78fcd15ab 100644
--- a/pandas/tests/indexing/test_loc.py
+++ b/pandas/tests/indexing/test_loc.py
@@ -219,8 +219,8 @@ class TestLoc(Base):
 
         # raise a KeyError?
         msg = (
-            r"\"None of \[Int64Index\(\[1, 2\], dtype='int64'\)\] are"
-            r" in the \[index\]\""
+            r"\"None of \[Int64Index\(\[1, 2\], dtype='int64'\)\] are "
+            r"in the \[index\]\""
         )
         with pytest.raises(KeyError, match=msg):
             df.loc[[1, 2], [1, 2]]
@@ -236,8 +236,8 @@ class TestLoc(Base):
             s.loc[-1]
 
         msg = (
-            r"\"None of \[Int64Index\(\[-1, -2\], dtype='int64'\)\] are"
-            r" in the \[index\]\""
+            r"\"None of \[Int64Index\(\[-1, -2\], dtype='int64'\)\] are "
+            r"in the \[index\]\""
         )
         with pytest.raises(KeyError, match=msg):
             s.loc[[-1, -2]]
@@ -252,8 +252,8 @@ class TestLoc(Base):
 
         s["a"] = 2
         msg = (
-            r"\"None of \[Int64Index\(\[-2\], dtype='int64'\)\] are"
-            r" in the \[index\]\""
+            r"\"None of \[Int64Index\(\[-2\], dtype='int64'\)\] are "
+            r"in the \[index\]\""
         )
         with pytest.raises(KeyError, match=msg):
             s.loc[[-2]]
@@ -268,8 +268,8 @@ class TestLoc(Base):
         df = DataFrame([["a"], ["b"]], index=[1, 2], columns=["value"])
 
         msg = (
-            r"\"None of \[Int64Index\(\[3\], dtype='int64'\)\] are"
-            r" in the \[index\]\""
+            r"\"None of \[Int64Index\(\[3\], dtype='int64'\)\] are "
+            r"in the \[index\]\""
         )
         with pytest.raises(KeyError, match=msg):
             df.loc[[3], :]
diff --git a/pandas/tests/indexing/test_partial.py b/pandas/tests/indexing/test_partial.py
index 5fda75902..2ce07ec41 100644
--- a/pandas/tests/indexing/test_partial.py
+++ b/pandas/tests/indexing/test_partial.py
@@ -205,8 +205,8 @@ class TestPartialSetting:
 
         # raises as nothing in in the index
         msg = (
-            r"\"None of \[Int64Index\(\[3, 3, 3\], dtype='int64'\)\] are"
-            r" in the \[index\]\""
+            r"\"None of \[Int64Index\(\[3, 3, 3\], dtype='int64'\)\] are "
+            r"in the \[index\]\""
         )
         with pytest.raises(KeyError, match=msg):
             ser.loc[[3, 3, 3]]
@@ -286,8 +286,8 @@ class TestPartialSetting:
 
         # raises as nothing in in the index
         msg = (
-            r"\"None of \[Int64Index\(\[3, 3, 3\], dtype='int64',"
-            r" name='idx'\)\] are in the \[index\]\""
+            r"\"None of \[Int64Index\(\[3, 3, 3\], dtype='int64', "
+            r"name='idx'\)\] are in the \[index\]\""
         )
         with pytest.raises(KeyError, match=msg):
             ser.loc[[3, 3, 3]]
diff --git a/pandas/tests/io/test_common.py b/pandas/tests/io/test_common.py
index a126f8316..22aa78919 100644
--- a/pandas/tests/io/test_common.py
+++ b/pandas/tests/io/test_common.py
@@ -146,8 +146,8 @@ bar2,12,13,14,15
         msg3 = "Expected object or value"
         msg4 = "path_or_buf needs to be a string file path or file-like"
         msg5 = (
-            fr"\[Errno 2\] File .+does_not_exist\.{fn_ext} does not exist:"
-            fr" '.+does_not_exist\.{fn_ext}'"
+            fr"\[Errno 2\] File .+does_not_exist\.{fn_ext} does not exist: "
+            fr"'.+does_not_exist\.{fn_ext}'"
         )
         msg6 = fr"\[Errno 2\] 没有那个文件或目录: '.+does_not_exist\.{fn_ext}'"
         msg7 = (
@@ -186,8 +186,8 @@ bar2,12,13,14,15
         msg3 = "Unexpected character found when decoding 'false'"
         msg4 = "path_or_buf needs to be a string file path or file-like"
         msg5 = (
-            fr"\[Errno 2\] File .+does_not_exist\.{fn_ext} does not exist:"
-            fr" '.+does_not_exist\.{fn_ext}'"
+            fr"\[Errno 2\] File .+does_not_exist\.{fn_ext} does not exist: "
+            fr"'.+does_not_exist\.{fn_ext}'"
         )
         msg6 = fr"\[Errno 2\] 没有那个文件或目录: '.+does_not_exist\.{fn_ext}'"
         msg7 = (
diff --git a/pandas/tests/io/test_stata.py b/pandas/tests/io/test_stata.py
index 1d3cddbf0..5e4ec1166 100644
--- a/pandas/tests/io/test_stata.py
+++ b/pandas/tests/io/test_stata.py
@@ -737,10 +737,10 @@ class TestStata:
             )
         original = DataFrame(s)
         msg = (
-            r"Fixed width strings in Stata \.dta files are limited to 244"
-            r" \(or fewer\)\ncharacters\.  Column 's500' does not satisfy"
-            r" this restriction\. Use the\n'version=117' parameter to write"
-            r" the newer \(Stata 13 and later\) format\."
+            r"Fixed width strings in Stata \.dta files are limited to 244 "
+            r"\(or fewer\)\ncharacters\.  Column 's500' does not satisfy "
+            r"this restriction\. Use the\n'version=117' parameter to write "
+            r"the newer \(Stata 13 and later\) format\."
         )
         with pytest.raises(ValueError, match=msg):
             with tm.ensure_clean() as path:
@@ -968,8 +968,8 @@ class TestStata:
         )
         with tm.ensure_clean() as path:
             msg = (
-                "Stata value labels for a single variable must have"
-                r" a combined length less than 32,000 characters\."
+                "Stata value labels for a single variable must have "
+                r"a combined length less than 32,000 characters\."
             )
             with pytest.raises(ValueError, match=msg):
                 original.to_stata(path)
@@ -1714,12 +1714,12 @@ The repeated labels are:\n-+\nwolof
         df = DataFrame([content], columns=["invalid"])
         with tm.ensure_clean() as path:
             msg1 = (
-                r"'latin-1' codec can't encode character '\\ufffd'"
-                r" in position 14: ordinal not in range\(256\)"
+                r"'latin-1' codec can't encode character '\\ufffd' "
+                r"in position 14: ordinal not in range\(256\)"
             )
             msg2 = (
-                "'ascii' codec can't decode byte 0xef in position 14:"
-                r" ordinal not in range\(128\)"
+                "'ascii' codec can't decode byte 0xef in position 14: "
+                r"ordinal not in range\(128\)"
             )
             with pytest.raises(UnicodeEncodeError, match=r"{}|{}".format(msg1, msg2)):
                 with tm.assert_produces_warning(ResourceWarning):
diff --git a/pandas/tests/resample/test_resample_api.py b/pandas/tests/resample/test_resample_api.py
index 170201b4f..d552241f9 100644
--- a/pandas/tests/resample/test_resample_api.py
+++ b/pandas/tests/resample/test_resample_api.py
@@ -257,8 +257,8 @@ def test_fillna():
     tm.assert_series_equal(result, expected)
 
     msg = (
-        r"Invalid fill method\. Expecting pad \(ffill\), backfill"
-        r" \(bfill\) or nearest\. Got 0"
+        r"Invalid fill method\. Expecting pad \(ffill\), backfill "
+        r"\(bfill\) or nearest\. Got 0"
     )
     with pytest.raises(ValueError, match=msg):
         r.fillna(0)
diff --git a/pandas/tests/scalar/timedelta/test_arithmetic.py b/pandas/tests/scalar/timedelta/test_arithmetic.py
index 3764d9b75..ce08a47f8 100644
--- a/pandas/tests/scalar/timedelta/test_arithmetic.py
+++ b/pandas/tests/scalar/timedelta/test_arithmetic.py
@@ -271,8 +271,8 @@ class TestTimedeltaAdditionSubtraction:
         tm.assert_numpy_array_equal(td * np.array([2]), expected)
         tm.assert_numpy_array_equal(np.array([2]) * td, expected)
         msg = (
-            "ufunc '?multiply'? cannot use operands with types"
-            r" dtype\('<m8\[ns\]'\) and dtype\('<m8\[ns\]'\)"
+            "ufunc '?multiply'? cannot use operands with types "
+            r"dtype\('<m8\[ns\]'\) and dtype\('<m8\[ns\]'\)"
         )
         with pytest.raises(TypeError, match=msg):
             td * other
diff --git a/pandas/tests/series/indexing/test_alter_index.py b/pandas/tests/series/indexing/test_alter_index.py
index 47f40e24e..dc8b91de3 100644
--- a/pandas/tests/series/indexing/test_alter_index.py
+++ b/pandas/tests/series/indexing/test_alter_index.py
@@ -243,8 +243,8 @@ def test_reindex_corner(datetime_series):
     # bad fill method
     ts = datetime_series[::2]
     msg = (
-        r"Invalid fill method\. Expecting pad \(ffill\), backfill"
-        r" \(bfill\) or nearest\. Got foo"
+        r"Invalid fill method\. Expecting pad \(ffill\), backfill "
+        r"\(bfill\) or nearest\. Got foo"
     )
     with pytest.raises(ValueError, match=msg):
         ts.reindex(datetime_series.index, method="foo")
diff --git a/pandas/tests/series/indexing/test_boolean.py b/pandas/tests/series/indexing/test_boolean.py
index d75efcf52..16a29d10e 100644
--- a/pandas/tests/series/indexing/test_boolean.py
+++ b/pandas/tests/series/indexing/test_boolean.py
@@ -44,8 +44,8 @@ def test_getitem_boolean_empty():
     # invalid because of the boolean indexer
     # that's empty or not-aligned
     msg = (
-        r"Unalignable boolean Series provided as indexer \(index of"
-        r" the boolean Series and of the indexed object do not match"
+        r"Unalignable boolean Series provided as indexer \(index of "
+        r"the boolean Series and of the indexed object do not match"
     )
     with pytest.raises(IndexingError, match=msg):
         s[Series([], dtype=bool)]
@@ -89,8 +89,8 @@ def test_getitem_setitem_boolean_corner(datetime_series):
     # these used to raise...??
 
     msg = (
-        r"Unalignable boolean Series provided as indexer \(index of"
-        r" the boolean Series and of the indexed object do not match"
+        r"Unalignable boolean Series provided as indexer \(index of "
+        r"the boolean Series and of the indexed object do not match"
     )
     with pytest.raises(IndexingError, match=msg):
         ts[mask_shifted]
diff --git a/pandas/tests/series/indexing/test_indexing.py b/pandas/tests/series/indexing/test_indexing.py
index 4601cabf6..d552ce739 100644
--- a/pandas/tests/series/indexing/test_indexing.py
+++ b/pandas/tests/series/indexing/test_indexing.py
@@ -393,8 +393,8 @@ def test_2d_to_1d_assignment_raises():
     y = pd.Series(range(2))
 
     msg = (
-        r"shape mismatch: value array of shape \(2,2\) could not be"
-        r" broadcast to indexing result of shape \(2,\)"
+        r"shape mismatch: value array of shape \(2,2\) could not be "
+        r"broadcast to indexing result of shape \(2,\)"
     )
     with pytest.raises(ValueError, match=msg):
         y.loc[range(2)] = x
diff --git a/pandas/tests/series/indexing/test_numeric.py b/pandas/tests/series/indexing/test_numeric.py
index ce0d04ff9..3684ca00c 100644
--- a/pandas/tests/series/indexing/test_numeric.py
+++ b/pandas/tests/series/indexing/test_numeric.py
@@ -261,8 +261,8 @@ def test_setitem_float_labels():
 def test_slice_float_get_set(datetime_series):
     msg = (
         r"cannot do slice indexing on <class 'pandas\.core\.indexes"
-        r"\.datetimes\.DatetimeIndex'> with these indexers \[{key}\]"
-        r" of <class 'float'>"
+        r"\.datetimes\.DatetimeIndex'> with these indexers \[{key}\] "
+        r"of <class 'float'>"
     )
     with pytest.raises(TypeError, match=msg.format(key=r"4\.0")):
         datetime_series[4.0:10.0]
diff --git a/pandas/tests/series/methods/test_argsort.py b/pandas/tests/series/methods/test_argsort.py
index 1fc98ded0..62273e2d3 100644
--- a/pandas/tests/series/methods/test_argsort.py
+++ b/pandas/tests/series/methods/test_argsort.py
@@ -52,8 +52,8 @@ class TestSeriesArgsort:
         tm.assert_series_equal(mindexer, Series(mexpected), check_dtype=False)
         tm.assert_series_equal(qindexer, Series(qexpected), check_dtype=False)
         msg = (
-            r"ndarray Expected type <class 'numpy\.ndarray'>,"
-            r" found <class 'pandas\.core\.series\.Series'> instead"
+            r"ndarray Expected type <class 'numpy\.ndarray'>, "
+            r"found <class 'pandas\.core\.series\.Series'> instead"
         )
         with pytest.raises(AssertionError, match=msg):
             tm.assert_numpy_array_equal(qindexer, mindexer)
diff --git a/pandas/tests/series/methods/test_isin.py b/pandas/tests/series/methods/test_isin.py
index ca93e989b..3836c1d56 100644
--- a/pandas/tests/series/methods/test_isin.py
+++ b/pandas/tests/series/methods/test_isin.py
@@ -29,8 +29,8 @@ class TestSeriesIsIn:
         # GH#4763
         s = Series(["A", "B", "C", "a", "B", "B", "A", "C"])
         msg = (
-            r"only list-like objects are allowed to be passed to isin\(\),"
-            r" you passed a \[str\]"
+            r"only list-like objects are allowed to be passed to isin\(\), "
+            r"you passed a \[str\]"
         )
         with pytest.raises(TypeError, match=msg):
             s.isin("a")
diff --git a/pandas/tests/series/methods/test_replace.py b/pandas/tests/series/methods/test_replace.py
index b20baa283..770ad38b0 100644
--- a/pandas/tests/series/methods/test_replace.py
+++ b/pandas/tests/series/methods/test_replace.py
@@ -120,8 +120,8 @@ class TestSeriesReplace:
         # make sure things don't get corrupted when fillna call fails
         s = ser.copy()
         msg = (
-            r"Invalid fill method\. Expecting pad \(ffill\) or backfill"
-            r" \(bfill\)\. Got crash_cymbal"
+            r"Invalid fill method\. Expecting pad \(ffill\) or backfill "
+            r"\(bfill\)\. Got crash_cymbal"
         )
         with pytest.raises(ValueError, match=msg):
             s.replace([1, 2, 3], inplace=True, method="crash_cymbal")
diff --git a/pandas/tests/series/test_alter_axes.py b/pandas/tests/series/test_alter_axes.py
index 628c66583..71f6681e8 100644
--- a/pandas/tests/series/test_alter_axes.py
+++ b/pandas/tests/series/test_alter_axes.py
@@ -11,8 +11,8 @@ class TestSeriesAlterAxes:
     def test_setindex(self, string_series):
         # wrong type
         msg = (
-            r"Index\(\.\.\.\) must be called with a collection of some"
-            r" kind, None was passed"
+            r"Index\(\.\.\.\) must be called with a collection of some "
+            r"kind, None was passed"
         )
         with pytest.raises(TypeError, match=msg):
             string_series.index = None
diff --git a/pandas/tests/series/test_dtypes.py b/pandas/tests/series/test_dtypes.py
index a57ec2ba0..1fc582156 100644
--- a/pandas/tests/series/test_dtypes.py
+++ b/pandas/tests/series/test_dtypes.py
@@ -193,8 +193,8 @@ class TestSeriesDtypes:
 
         dt3 = dtype_class({"abc": str, "def": str})
         msg = (
-            "Only the Series name can be used for the key in Series dtype"
-            r" mappings\."
+            "Only the Series name can be used for the key in Series dtype "
+            r"mappings\."
         )
         with pytest.raises(KeyError, match=msg):
             s.astype(dt3)
@@ -410,8 +410,8 @@ class TestSeriesDtypes:
         s = Series([1, 2, 3])
 
         msg = (
-            r"Expected value of kwarg 'errors' to be one of \['raise',"
-            r" 'ignore'\]\. Supplied value is 'False'"
+            r"Expected value of kwarg 'errors' to be one of \['raise', "
+            r"'ignore'\]\. Supplied value is 'False'"
         )
         with pytest.raises(ValueError, match=msg):
             s.astype(np.float64, errors=False)
diff --git a/pandas/tests/series/test_missing.py b/pandas/tests/series/test_missing.py
index d8eeefcbd..6b7d9e00a 100644
--- a/pandas/tests/series/test_missing.py
+++ b/pandas/tests/series/test_missing.py
@@ -1324,8 +1324,8 @@ class TestSeriesInterpolateData:
         s = Series([1, 3, np.nan, np.nan, np.nan, 11])
 
         msg = (
-            r"Invalid limit_direction: expecting one of \['forward',"
-            r" 'backward', 'both'\], got 'abc'"
+            r"Invalid limit_direction: expecting one of \['forward', "
+            r"'backward', 'both'\], got 'abc'"
         )
         with pytest.raises(ValueError, match=msg):
             s.interpolate(method="linear", limit=2, limit_direction="abc")
diff --git a/pandas/tests/test_algos.py b/pandas/tests/test_algos.py
index 2b46f86d4..6c7f8c9b0 100644
--- a/pandas/tests/test_algos.py
+++ b/pandas/tests/test_algos.py
@@ -653,8 +653,8 @@ class TestIsin:
     def test_invalid(self):
 
         msg = (
-            r"only list-like objects are allowed to be passed to isin\(\),"
-            r" you passed a \[int\]"
+            r"only list-like objects are allowed to be passed to isin\(\), "
+            r"you passed a \[int\]"
         )
         with pytest.raises(TypeError, match=msg):
             algos.isin(1, 1)
diff --git a/pandas/tests/util/test_validate_kwargs.py b/pandas/tests/util/test_validate_kwargs.py
index a7b6d8f98..8fe2a3712 100644
--- a/pandas/tests/util/test_validate_kwargs.py
+++ b/pandas/tests/util/test_validate_kwargs.py
@@ -49,8 +49,8 @@ def test_validation():
 @pytest.mark.parametrize("value", [1, "True", [1, 2, 3], 5.0])
 def test_validate_bool_kwarg_fail(name, value):
     msg = (
-        f'For argument "{name}" expected type bool,'
-        f" received type {type(value).__name__}"
+        f'For argument "{name}" expected type bool, '
+        f"received type {type(value).__name__}"
     )
 
     with pytest.raises(ValueError, match=msg):
