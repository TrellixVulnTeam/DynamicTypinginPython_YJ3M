commit f655ff8091dda8596afd84c8fd9c435f00259e0d
Author: Dieter Vandenbussche <dvandenbussche@axioma.com>
Date:   Thu Dec 29 10:05:52 2011 -0500

    Add get_attr behavior for Panel, similar to DataFrame
    
    Support IPython tab completion for Panel items

diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 8fbe34f36..7b306d83a 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -4,6 +4,7 @@ Contains data structures designed for manipulating panel (3-dimensional) data
 # pylint: disable=E1103,W0231,W0212,W0621
 
 import operator
+import sys
 import numpy as np
 
 from pandas.core.common import (PandasError, _mut_exclusive,
@@ -509,6 +510,14 @@ class Panel(NDFrame):
     def _box_item_values(self, key, values):
         return DataFrame(values, index=self.major_axis, columns=self.minor_axis)
 
+    def __getattr__(self, name):
+        """After regular attribute access, try looking up the name of an item.
+        This allows simpler access to items for interactive use."""
+        if name in self.items:
+            return self[name]
+        raise AttributeError("'%s' object has no attribute '%s'" %
+                             (type(self).__name__, name))
+
     def _slice(self, slobj, axis=0):
         new_data = self._data.get_slice(slobj, axis=axis)
         return self._constructor(new_data)
@@ -1191,3 +1200,22 @@ def _get_distinct_indexes(indexes):
 
 def _monotonic(arr):
     return not (arr[1:] < arr[:-1]).any()
+
+def install_ipython_completers():  # pragma: no cover
+    """Register the Panel type with IPython's tab completion machinery, so
+    that it knows about accessing column names as attributes."""
+    from IPython.utils.generics import complete_object
+
+    @complete_object.when_type(Panel)
+    def complete_dataframe(obj, prev_completions):
+        return prev_completions + [c for c in obj.items \
+                    if isinstance(c, basestring) and py3compat.isidentifier(c)]
+
+# Importing IPython brings in about 200 modules, so we want to avoid it unless
+# we're in IPython (when those modules are loaded anyway).
+if "IPython" in sys.modules:  # pragma: no cover
+    try:
+        install_ipython_completers()
+    except Exception:
+        pass
+
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 891f74031..069c6efe0 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -968,6 +968,8 @@ class TestPanel(unittest.TestCase, PanelTests, CheckIndexing,
         renamed_nocopy['foo'] = 3.
         self.assert_((self.panel['ItemA'].values == 3).all())
 
+    def test_get_attr(self):
+        assert_frame_equal(self.panel['ItemA'], self.panel.ItemA)
     def test_group_agg(self):
         values = np.ones((10, 2)) * np.arange(10).reshape((10, 1))
         bounds = np.arange(5) * 2
