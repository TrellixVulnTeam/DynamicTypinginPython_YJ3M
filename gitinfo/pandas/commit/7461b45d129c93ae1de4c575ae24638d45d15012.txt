commit 7461b45d129c93ae1de4c575ae24638d45d15012
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Dec 7 11:53:10 2012 -0500

    BUG: dateutil.tz.tzoffset tzname formatting fails with dateutil 2.1. close #2443

diff --git a/RELEASE.rst b/RELEASE.rst
index e21020187..2185785d3 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -44,9 +44,10 @@ pandas 0.10.0
     `reset_printoptions` (#2393)
 
 **Experimental Features**
+
   - Add support for Panel4D, a named 4 Dimensional stucture
-  - Add support for ndpanel factory functions, to create custom, domain-specific
-     N Dimensional containers
+  - Add support for ndpanel factory functions, to create custom,
+    domain-specific N-Dimensional containers
 
 **API Changes**
 
@@ -135,6 +136,7 @@ pandas 0.10.0
   - Fixed issued with duplicate keys in an index (#2347, #2380)
   - Fixed issues related to Hash randomization, on by default starting with 3.3 (#2331)
   - Fixed issue with missing attributes after loading a pickled dataframe (#2431)
+  - Fix Timestamp formatting with tzoffset time zone in dateutil 2.1 (#2443)
 
 pandas 0.9.1
 ============
diff --git a/pandas/tseries/tests/test_timezones.py b/pandas/tseries/tests/test_timezones.py
index 85f9d2b48..120a1414b 100644
--- a/pandas/tseries/tests/test_timezones.py
+++ b/pandas/tseries/tests/test_timezones.py
@@ -539,6 +539,10 @@ class TestTimeZoneSupport(unittest.TestCase):
 
         self.assertEquals(series.index.tz, tzinfo)
 
+        # it works! #2443
+        repr(series.index[0])
+
+
 class TestTimeZones(unittest.TestCase):
     _multiprocess_can_split_ = True
     def setUp(self):
diff --git a/pandas/tslib.pyx b/pandas/tslib.pyx
index 332018359..490ccf2e7 100644
--- a/pandas/tslib.pyx
+++ b/pandas/tslib.pyx
@@ -126,13 +126,13 @@ class Timestamp(_Timestamp):
             result += self.strftime('%z')
             if self.tzinfo:
                 zone = _get_zone(self.tzinfo)
-                result += self.strftime(' %%Z, tz=%s' % zone)
+                result += _tz_format(self, zone)
         except ValueError:
             year2000 = self.replace(year=2000)
             result += year2000.strftime('%z')
             if self.tzinfo:
                 zone = _get_zone(self.tzinfo)
-                result += year2000.strftime(' %%Z, tz=%s' % zone)
+                result += _tz_format(year2000, zone)
 
         return '<Timestamp: %s>' % result
 
@@ -302,6 +302,11 @@ NaT = NaTType()
 
 iNaT = util.get_nat()
 
+cdef _tz_format(object obj, object zone):
+    try:
+        return obj.strftime(' %%Z, tz=%s' % zone)
+    except:
+        return ', tz=%s' % zone
 
 def is_timestamp_array(ndarray[object] values):
     cdef int i, n = len(values)
