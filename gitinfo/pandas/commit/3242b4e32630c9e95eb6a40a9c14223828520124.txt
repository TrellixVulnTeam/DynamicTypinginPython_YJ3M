commit 3242b4e32630c9e95eb6a40a9c14223828520124
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Wed Mar 4 06:14:19 2020 -0800

    CLN: move away from .values, _ndarray_values (#32419)

diff --git a/pandas/_testing.py b/pandas/_testing.py
index b0f18cb6f..33ec4e488 100644
--- a/pandas/_testing.py
+++ b/pandas/_testing.py
@@ -706,11 +706,11 @@ def assert_index_equal(
     if isinstance(left, pd.PeriodIndex) or isinstance(right, pd.PeriodIndex):
         assert_attr_equal("freq", left, right, obj=obj)
     if isinstance(left, pd.IntervalIndex) or isinstance(right, pd.IntervalIndex):
-        assert_interval_array_equal(left.values, right.values)
+        assert_interval_array_equal(left._values, right._values)
 
     if check_categorical:
         if is_categorical_dtype(left) or is_categorical_dtype(right):
-            assert_categorical_equal(left.values, right.values, obj=f"{obj} category")
+            assert_categorical_equal(left._values, right._values, obj=f"{obj} category")
 
 
 def assert_class_equal(left, right, exact: Union[bool, str] = True, obj="Input"):
@@ -883,7 +883,7 @@ def assert_interval_array_equal(left, right, exact="equiv", obj="IntervalArray")
 def assert_period_array_equal(left, right, obj="PeriodArray"):
     _check_isinstance(left, right, PeriodArray)
 
-    assert_numpy_array_equal(left._data, right._data, obj=f"{obj}.values")
+    assert_numpy_array_equal(left._data, right._data, obj=f"{obj}._data")
     assert_attr_equal("freq", left, right, obj=obj)
 
 
@@ -1170,10 +1170,10 @@ def assert_series_equal(
 
             # datetimelike may have different objects (e.g. datetime.datetime
             # vs Timestamp) but will compare equal
-            if not Index(left.values).equals(Index(right.values)):
+            if not Index(left._values).equals(Index(right._values)):
                 msg = (
-                    f"[datetimelike_compat=True] {left.values} "
-                    f"is not equal to {right.values}."
+                    f"[datetimelike_compat=True] {left._values} "
+                    f"is not equal to {right._values}."
                 )
                 raise AssertionError(msg)
         else:
@@ -1212,8 +1212,8 @@ def assert_series_equal(
     if check_categorical:
         if is_categorical_dtype(left) or is_categorical_dtype(right):
             assert_categorical_equal(
-                left.values,
-                right.values,
+                left._values,
+                right._values,
                 obj=f"{obj} category",
                 check_category_order=check_category_order,
             )
diff --git a/pandas/core/dtypes/cast.py b/pandas/core/dtypes/cast.py
index c06bd8a1d..7dac36b53 100644
--- a/pandas/core/dtypes/cast.py
+++ b/pandas/core/dtypes/cast.py
@@ -1181,9 +1181,11 @@ def maybe_infer_to_datetimelike(value, convert_dates: bool = False):
         from pandas import to_timedelta
 
         try:
-            return to_timedelta(v)._ndarray_values.reshape(shape)
+            td_values = to_timedelta(v)
         except ValueError:
             return v.reshape(shape)
+        else:
+            return np.asarray(td_values).reshape(shape)
 
     inferred_type = lib.infer_datetimelike_array(ensure_object(v))
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 5a4b4f74b..61641bfb2 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -4580,7 +4580,7 @@ class DataFrame(NDFrame):
         duplicated = self.duplicated(subset, keep=keep)
 
         if inplace:
-            (inds,) = (-duplicated)._ndarray_values.nonzero()
+            (inds,) = np.asarray(-duplicated).nonzero()
             new_data = self._data.take(inds)
 
             if ignore_index:
diff --git a/pandas/core/indexes/multi.py b/pandas/core/indexes/multi.py
index f70975e19..c1efa512f 100644
--- a/pandas/core/indexes/multi.py
+++ b/pandas/core/indexes/multi.py
@@ -2998,7 +2998,7 @@ class MultiIndex(Index):
                     indexer = _update_indexer(indexers, indexer=indexer)
                 else:
                     # no matches we are done
-                    return Int64Index([])._ndarray_values
+                    return np.array([], dtype=np.int64)
 
             elif com.is_null_slice(k):
                 # empty slice
@@ -3024,7 +3024,7 @@ class MultiIndex(Index):
 
         # empty indexer
         if indexer is None:
-            return Int64Index([])._ndarray_values
+            return np.array([], dtype=np.int64)
 
         indexer = self._reorder_indexer(seq, indexer)
 
diff --git a/pandas/core/indexes/numeric.py b/pandas/core/indexes/numeric.py
index cb6f68ae0..6c250ccd0 100644
--- a/pandas/core/indexes/numeric.py
+++ b/pandas/core/indexes/numeric.py
@@ -425,7 +425,7 @@ class Float64Index(NumericIndex):
                 other = self._constructor(other)
             if not is_dtype_equal(self.dtype, other.dtype) or self.shape != other.shape:
                 return False
-            left, right = self._ndarray_values, other._ndarray_values
+            left, right = self._values, other._values
             return ((left == right) | (self._isnan & other._isnan)).all()
         except (TypeError, ValueError):
             return False
diff --git a/pandas/io/stata.py b/pandas/io/stata.py
index 0397dfa92..6e79f5890 100644
--- a/pandas/io/stata.py
+++ b/pandas/io/stata.py
@@ -1672,7 +1672,7 @@ the string values returned are correct."""
                 continue
 
             if convert_missing:  # Replacement follows Stata notation
-                missing_loc = np.nonzero(missing._ndarray_values)[0]
+                missing_loc = np.nonzero(np.asarray(missing))[0]
                 umissing, umissing_loc = np.unique(series[missing], return_inverse=True)
                 replacement = Series(series, dtype=np.object)
                 for j, um in enumerate(umissing):
diff --git a/pandas/plotting/_matplotlib/converter.py b/pandas/plotting/_matplotlib/converter.py
index c399e5b9b..8260684c0 100644
--- a/pandas/plotting/_matplotlib/converter.py
+++ b/pandas/plotting/_matplotlib/converter.py
@@ -218,13 +218,13 @@ class PeriodConverter(dates.DateConverter):
         if isinstance(values, valid_types) or is_integer(values) or is_float(values):
             return get_datevalue(values, axis.freq)
         elif isinstance(values, PeriodIndex):
-            return values.asfreq(axis.freq)._ndarray_values
+            return values.asfreq(axis.freq).asi8
         elif isinstance(values, Index):
             return values.map(lambda x: get_datevalue(x, axis.freq))
         elif lib.infer_dtype(values, skipna=False) == "period":
             # https://github.com/pandas-dev/pandas/issues/24304
             # convert ndarray[period] -> PeriodIndex
-            return PeriodIndex(values, freq=axis.freq)._ndarray_values
+            return PeriodIndex(values, freq=axis.freq).asi8
         elif isinstance(values, (list, tuple, np.ndarray, Index)):
             return [get_datevalue(x, axis.freq) for x in values]
         return values
@@ -607,7 +607,7 @@ def _daily_finder(vmin, vmax, freq):
     info = np.zeros(
         span, dtype=[("val", np.int64), ("maj", bool), ("min", bool), ("fmt", "|S20")]
     )
-    info["val"][:] = dates_._ndarray_values
+    info["val"][:] = dates_.asi8
     info["fmt"][:] = ""
     info["maj"][[0, -1]] = True
     # .. and set some shortcuts
