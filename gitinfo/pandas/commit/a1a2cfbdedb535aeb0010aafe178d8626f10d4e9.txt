commit a1a2cfbdedb535aeb0010aafe178d8626f10d4e9
Author: immerrr <immerrr@gmail.com>
Date:   Mon Mar 3 16:28:24 2014 +0400

    BUG: fix _ref_locs corruption when slice indexing across columns axis

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 08bfcbe42..49955ec79 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -194,6 +194,7 @@ Bug Fixes
 - Bug in ``read_html`` tests where redirected invalid URLs would make one test
   fail (:issue:`6445`).
 - Bug in multi-axis indexing using ``.loc`` on non-unique indices (:issue:`6504`)
+- Bug that caused _ref_locs corruption when slice indexing across columns axis of a DataFrame (:issue:`6525`)
 
 pandas 0.13.1
 -------------
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 74a8ce011..6d2b2933e 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -133,6 +133,12 @@ class Block(PandasObject):
         tindexer[indexer] = False
         tindexer = tindexer.astype(int).cumsum()[indexer]
         ref_locs = ref_locs[indexer]
+
+        # Make sure the result is a copy, or otherwise self._ref_locs will be
+        # updated.
+        if ref_locs.base is not None:
+            ref_locs = ref_locs.copy()
+
         ref_locs -= tindexer
         return ref_locs
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 3c39d610c..a36b3c5b1 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -12267,6 +12267,19 @@ starting,ending,measure
                                                             ('b', 'bool:dense'),
                                                             ('c', 'float64:dense')])))
 
+    def test_dtypes_are_correct_after_column_slice(self):
+        # GH6525
+        df = pd.DataFrame(index=range(5), columns=list("abc"), dtype=np.float_)
+        odict = OrderedDict
+        assert_series_equal(df.dtypes,
+                            pd.Series(odict([('a', np.float_), ('b', np.float_),
+                                             ('c', np.float_),])))
+        assert_series_equal(df.iloc[:,2:].dtypes,
+                            pd.Series(odict([('c', np.float_)])))
+        assert_series_equal(df.dtypes,
+                            pd.Series(odict([('a', np.float_), ('b', np.float_),
+                                             ('c', np.float_),])))
+
 
 def skip_if_no_ne(engine='numexpr'):
     if engine == 'numexpr':
