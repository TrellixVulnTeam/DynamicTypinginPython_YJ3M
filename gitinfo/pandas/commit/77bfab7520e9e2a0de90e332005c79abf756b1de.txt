commit 77bfab7520e9e2a0de90e332005c79abf756b1de
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jun 18 11:44:48 2012 -0400

    ENH: cache tuple index when used for speedup in GroupBy.transform

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 11733c14f..765c0f628 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -1315,6 +1315,7 @@ class SeriesGroupBy(GroupBy):
         for name, group in self:
             object.__setattr__(group, 'name', name)
             res = wrapper(group)
+            # result[group.index] = res
             indexer = self.obj.index.get_indexer(group.index)
             np.put(result, indexer, res)
 
diff --git a/pandas/core/index.py b/pandas/core/index.py
index acfb55341..2d689b722 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1834,12 +1834,12 @@ class MultiIndex(Index):
 
         target_index = target
         if isinstance(target, MultiIndex):
-            target_index = target.get_tuple_index()
+            target_index = target._tuple_index
 
         if target_index.dtype != object:
             return np.ones(len(target_index)) * -1
 
-        self_index = self.get_tuple_index()
+        self_index = self._tuple_index
 
         if method == 'pad':
             assert(self.is_unique and self.is_monotonic)
@@ -1887,7 +1887,8 @@ class MultiIndex(Index):
 
         return target, indexer
 
-    def get_tuple_index(self):
+    @cache_readonly
+    def _tuple_index(self):
         """
         Convert MultiIndex to an Index of tuples
 
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 75b0b4f24..52af5eff7 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -874,7 +874,7 @@ class HDFStore(object):
             lp = DataFrame(values, index=long_index, columns=fields)
 
             # need a better algorithm
-            tuple_index = long_index.get_tuple_index()
+            tuple_index = long_index._tuple_index
 
             unique_tuples = lib.fast_unique(tuple_index)
             unique_tuples = _asarray_tuplesafe(unique_tuples)
diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index b33de1ff5..8877c4e69 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -495,9 +495,9 @@ class TestPanelOLS(BaseTest):
         weights = x.std('items')
         stack_weights = weights.stack()
 
-        stack_y.index = stack_y.index.get_tuple_index()
-        stack_x.index = stack_x.index.get_tuple_index()
-        stack_weights.index = stack_weights.index.get_tuple_index()
+        stack_y.index = stack_y.index._tuple_index
+        stack_x.index = stack_x.index._tuple_index
+        stack_weights.index = stack_weights.index._tuple_index
 
         result = ols(y=y, x=x, weights=1/weights)
         expected = ols(y=stack_y, x=stack_x, weights=1/stack_weights)
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 3921a0dd6..e340460f6 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -879,7 +879,7 @@ class TestGroupBy(unittest.TestCase):
         result = grouped.mean()
         expected = data.groupby(['A', 'B']).mean()
 
-        arrays = zip(*expected.index.get_tuple_index())
+        arrays = zip(*expected.index._tuple_index)
         expected.insert(0, 'A', arrays[0])
         expected.insert(1, 'B', arrays[1])
         expected.index = np.arange(len(expected))
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 186936e07..b45390779 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -1169,7 +1169,7 @@ class TestMultiIndex(unittest.TestCase):
         assert_almost_equal(r1, rbfill1)
 
         # pass non-MultiIndex
-        r1 = idx1.get_indexer(idx2.get_tuple_index())
+        r1 = idx1.get_indexer(idx2._tuple_index)
         rexp1 = idx1.get_indexer(idx2)
         assert_almost_equal(r1, rexp1)
 
@@ -1177,7 +1177,7 @@ class TestMultiIndex(unittest.TestCase):
         self.assert_( (r1 == [-1, -1, -1]).all() )
 
         # self.assertRaises(Exception, idx1.get_indexer,
-        #                   list(list(zip(*idx2.get_tuple_index()))[0]))
+        #                   list(list(zip(*idx2._tuple_index))[0]))
 
     def test_format(self):
         self.index.format()
@@ -1198,7 +1198,7 @@ class TestMultiIndex(unittest.TestCase):
 
         self.assert_(not self.index.equals(self.index[:-1]))
 
-        self.assert_(self.index.equals(self.index.get_tuple_index()))
+        self.assert_(self.index.equals(self.index._tuple_index))
 
         # different number of levels
         index = MultiIndex(levels=[Index(range(4)),
@@ -1242,7 +1242,7 @@ class TestMultiIndex(unittest.TestCase):
 
         the_union = piece1 | piece2
 
-        tups = sorted(self.index.get_tuple_index())
+        tups = sorted(self.index._tuple_index)
         expected = MultiIndex.from_tuples(tups)
 
         self.assert_(the_union.equals(expected))
@@ -1255,7 +1255,7 @@ class TestMultiIndex(unittest.TestCase):
         self.assert_(the_union is self.index)
 
         # won't work in python 3
-        # tuples = self.index.get_tuple_index()
+        # tuples = self.index._tuple_index
         # result = self.index[:4] | tuples[4:]
         # self.assert_(result.equals(tuples))
 
@@ -1275,7 +1275,7 @@ class TestMultiIndex(unittest.TestCase):
         piece2 = self.index[3:]
 
         the_int = piece1 & piece2
-        tups = sorted(self.index[3:5].get_tuple_index())
+        tups = sorted(self.index[3:5]._tuple_index)
         expected = MultiIndex.from_tuples(tups)
         self.assert_(the_int.equals(expected))
 
@@ -1289,7 +1289,7 @@ class TestMultiIndex(unittest.TestCase):
         self.assert_(empty.equals(expected))
 
         # can't do in python 3
-        # tuples = self.index.get_tuple_index()
+        # tuples = self.index._tuple_index
         # result = self.index & tuples
         # self.assert_(result.equals(tuples))
 
@@ -1333,7 +1333,7 @@ class TestMultiIndex(unittest.TestCase):
         self.assert_(len(result) == 0)
 
         # raise Exception called with non-MultiIndex
-        self.assertRaises(Exception, first.diff, first.get_tuple_index())
+        self.assertRaises(Exception, first.diff, first._tuple_index)
 
     def test_from_tuples(self):
         self.assertRaises(Exception, MultiIndex.from_tuples, [])
@@ -1343,7 +1343,7 @@ class TestMultiIndex(unittest.TestCase):
 
     def test_argsort(self):
         result = self.index.argsort()
-        expected = self.index.get_tuple_index().argsort()
+        expected = self.index._tuple_index.argsort()
         self.assert_(np.array_equal(result, expected))
 
     def test_sortlevel(self):
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 0c55fd93a..d7db52953 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -899,7 +899,7 @@ x   q   30      3    -0.6662 -0.5243 -0.3580  0.89145  2.5838"""
         df = self.frame.T
         df['foo', 'four'] = 'foo'
 
-        arrays = [np.array(x) for x in zip(*df.columns.get_tuple_index())]
+        arrays = [np.array(x) for x in zip(*df.columns._tuple_index)]
 
         result = df['foo']
         result2 = df.ix[:, 'foo']
@@ -923,7 +923,7 @@ x   q   30      3    -0.6662 -0.5243 -0.3580  0.89145  2.5838"""
         index = MultiIndex.from_tuples(tuples)
         s = Series(randn(8), index=index)
 
-        arrays = [np.array(x) for x in zip(*index.get_tuple_index())]
+        arrays = [np.array(x) for x in zip(*index._tuple_index)]
 
         result = s['qux']
         result2 = s.ix['qux']
diff --git a/pandas/tools/tests/test_merge.py b/pandas/tools/tests/test_merge.py
index 68b540351..83ea8399c 100644
--- a/pandas/tools/tests/test_merge.py
+++ b/pandas/tools/tests/test_merge.py
@@ -352,7 +352,7 @@ class TestMerge(unittest.TestCase):
         df2 = df2.sortlevel(0)
 
         joined = df1.join(df2, how='outer')
-        ex_index = index1.get_tuple_index() + index2.get_tuple_index()
+        ex_index = index1._tuple_index + index2._tuple_index
         expected = df1.reindex(ex_index).join(df2.reindex(ex_index))
         assert_frame_equal(joined, expected)
         self.assertEqual(joined.index.names, index1.names)
@@ -361,7 +361,7 @@ class TestMerge(unittest.TestCase):
         df2 = df2.sortlevel(1)
 
         joined = df1.join(df2, how='outer').sortlevel(0)
-        ex_index = index1.get_tuple_index() + index2.get_tuple_index()
+        ex_index = index1._tuple_index + index2._tuple_index
         expected = df1.reindex(ex_index).join(df2.reindex(ex_index))
 
         assert_frame_equal(joined, expected)
