commit feb68708eb395b4c55a905a080f522e1715b5a63
Author: jreback <jeff@reback.net>
Date:   Fri Sep 19 19:27:31 2014 -0400

    DOC: v0.15.0.txt edits

diff --git a/doc/source/v0.15.0.txt b/doc/source/v0.15.0.txt
index a4403699c..bf6a39b14 100644
--- a/doc/source/v0.15.0.txt
+++ b/doc/source/v0.15.0.txt
@@ -25,7 +25,7 @@ users upgrade to this version.
 
 - :ref:`Other Enhancements <whatsnew_0150.enhancements>`
 
-- :ref:`API Changes <whatsnew_0150.api>`, and :ref:`Rolling/expanding moments API Changes <whatsnew_0150.roll>`
+- :ref:`API Changes <whatsnew_0150.api>`, and :ref:`Rolling/Expanding Moments API Changes <whatsnew_0150.roll>`
 
 - :ref:`Performance Improvements <whatsnew_0150.performance>`
 
@@ -63,8 +63,7 @@ API changes
 
 - Made both the C-based and Python engines for `read_csv` and `read_table` ignore empty lines in input as well as
   whitespace-filled lines, as long as `sep` is not whitespace. This is an API change
-  that can be controlled by the keyword parameter `skip_blank_lines`.
-  (:issue:`4466`, see :ref:`skiplines <_io.skiplines>`)
+  that can be controlled by the keyword parameter `skip_blank_lines`. see :ref:`here <io.skiplines>`(:issue:`4466`)
 
 - Bug in passing a ``DatetimeIndex`` with a timezone that was not being retained in DataFrame construction from a dict (:issue:`7822`)
 
@@ -159,8 +158,8 @@ API changes
 
   In prior versions there was a difference in these two constructs:
 
-    - ``df.loc[[3]]`` would (prior to 0.15.0) return a frame reindexed by 3 (with all ``np.nan`` values)
-    - ``df.loc[[3],:]`` would raise ``KeyError``.
+  - ``df.loc[[3]]`` would (prior to 0.15.0) return a frame reindexed by 3 (with all ``np.nan`` values)
+  - ``df.loc[[3],:]`` would raise ``KeyError``.
 
   Both will now raise a ``KeyError``. The rule is that *at least 1* indexer must be found when using a list-like and ``.loc`` (:issue:`7999`)
 
@@ -242,8 +241,7 @@ API changes
      df
      df.dtypes
 
-- ``Series.to_csv()`` now returns a string when ``path=None``, matching the behaviour of
-    ``DataFrame.to_csv()`` (:issue:`8215`).
+- ``Series.to_csv()`` now returns a string when ``path=None``, matching the behaviour of ``DataFrame.to_csv()`` (:issue:`8215`).
 
 .. _whatsnew_0150.index_set_ops:
 
@@ -265,6 +263,10 @@ API changes
      # should be replaced by
      Index(['a','b','c']).difference(Index(['b','c','d']))
 
+- ``tz_localize`` now accepts the ``ambiguous`` keyword which allows for passing an array of bools
+  indicating whether the date belongs in DST or not, 'NaT' for setting transition times to NaT,
+  'infer' for inferring DST/non-DST, and 'raise' (default) for an AmbiguousTimeError to be raised. See :ref:`the docs<timeseries.timezone_ambiguous>` for more details (:issue:`7943`)
+
 - ``DataFrame.info()`` now ends its output with a newline character (:issue:`8114`)
 
 .. _whatsnew_0150.dt:
@@ -320,7 +322,7 @@ The ``.dt`` accessor works for period and timedelta dtypes.
 
 .. _whatsnew_0150.roll:
 
-Rolling/exapnding moments API changes
+Rolling/Expanding Moments API changes
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 - :func:`rolling_min`, :func:`rolling_max`, :func:`rolling_cov`, and :func:`rolling_corr`
@@ -433,6 +435,60 @@ Rolling/exapnding moments API changes
      ewma(Series([1., None, 8.]), com=2., ignore_na=True)  # pre-0.15.0 behavior
      ewma(Series([1., None, 8.]), com=2., ignore_na=False)  # new default
 
+- Bug in :func:`expanding_cov`, :func:`expanding_corr`, :func:`rolling_cov`, :func:`rolling_cor`, :func:`ewmcov`, and :func:`ewmcorr`
+  returning results with columns sorted by name and producing an error for non-unique columns;
+  now handles non-unique columns and returns columns in original order
+  (except for the case of two DataFrames with ``pairwise=False``, where behavior is unchanged) (:issue:`7542`)
+- Bug in :func:`rolling_count` and ``expanding_*`` functions unnecessarily producing error message for zero-length data (:issue:`8056`)
+- Bug in :func:`rolling_apply` and :func:`expanding_apply` interpreting ``min_periods=0`` as ``min_periods=1`` (:issue:`8080`)
+- Bug in :func:`expanding_std` and :func:`expanding_var` for a single value producing a confusing error message (:issue:`7900`)
+- Bug in :func:`rolling_std` and :func:`rolling_var` for a single value producing ``0`` rather than ``NaN`` (:issue:`7900`)
+
+- Bug in :func:`ewmstd`, :func:`ewmvol`, :func:`ewmvar`, and :func:`ewmcov`
+  calculation of de-biasing factors when ``bias=False`` (the default).
+  Previously an incorrect constant factor was used, based on ``adjust=True``, ``ignore_na=True``,
+  and an infinite number of observations.
+  Now a different factor is used for each entry, based on the actual weights
+  (analogous to the usual ``N/(N-1)`` factor).
+  In particular, for a single point a value of ``NaN`` is returned when ``bias=False``,
+  whereas previously a value of (approximately) ``0`` was returned.
+
+  For example, consider the following pre-0.15.0 results for ``ewmvar(..., bias=False)``,
+  and the corresponding debiasing factors:
+
+  .. ipython:: python
+
+     s = Series([1., 2., 0., 4.])
+
+  .. code-block:: python
+
+	 In [69]: ewmvar(s, com=2., bias=False)
+	 Out[69]:
+	 0   -2.775558e-16
+	 1    3.000000e-01
+	 2    9.556787e-01
+	 3    3.585799e+00
+	 dtype: float64
+
+	 In [70]: ewmvar(s, com=2., bias=False) / ewmvar(s, com=2., bias=True)
+	 Out[70]:
+	 0    1.25
+	 1    1.25
+	 2    1.25
+	 3    1.25
+	 dtype: float64
+
+  Note that entry ``0`` is approximately 0, and the debiasing factors are a constant 1.25.
+  By comparison, the following 0.15.0 results have a ``NaN`` for entry ``0``,
+  and the debiasing factors are decreasing (towards 1.25):
+
+  .. ipython:: python
+
+     ewmvar(s, com=2., bias=False)
+     ewmvar(s, com=2., bias=False) / ewmvar(s, com=2., bias=True)
+
+  See :ref:`Exponentially weighted moment functions <stats.moments.exponentially_weighted>` for details. (:issue:`7912`)
+
 .. _whatsnew_0150.refactoring:
 
 Internal Refactoring
@@ -655,15 +711,14 @@ Enhancements
 
 - ``Period`` and ``PeriodIndex`` supports addition/subtraction with ``timedelta``-likes (:issue:`7966`)
 
-  If ``Period`` freq is ``D``, ``H``, ``T``, ``S``, ``L``, ``U``, ``N``, ``timedelta``-like can be added if the result can have same freq. Otherwise, only the same ``offsets`` can be added.
+  If ``Period`` freq is ``D``, ``H``, ``T``, ``S``, ``L``, ``U``, ``N``, ``Timedelta``-like can be added if the result can have same freq. Otherwise, only the same ``offsets`` can be added.
 
   .. ipython:: python
 
     idx = pd.period_range('2014-07-01 09:00', periods=5, freq='H')
     idx
     idx + pd.offsets.Hour(2)
-    idx + timedelta(minutes=120)
-    idx + np.timedelta64(7200, 's')
+    idx + Timedelta('120m')
 
     idx = pd.period_range('2014-07', periods=5, freq='M')
     idx
@@ -686,16 +741,6 @@ Enhancements
 
 
 
-- ``tz_localize`` now accepts the ``ambiguous`` keyword which allows for passing an array of bools
-  indicating whether the date belongs in DST or not, 'NaT' for setting transition times to NaT,
-  'infer' for inferring DST/non-DST, and 'raise' (default) for an AmbiguousTimeError to be raised (:issue:`7943`).
-  See :ref:`the docs<timeseries.timezone_ambiguous>` for more details.
-
-
-
-
-
-
 .. _whatsnew_0150.performance:
 
 Performance
@@ -777,60 +822,6 @@ Bug Fixes
 - Bug in ``StataReader`` which did not read variable labels in 117 files due to difference between Stata documentation and implementation (:issue:`7816`)
 - Bug in ``StataReader`` where strings were always converted to 244 characters-fixed width irrespective of underlying string size (:issue:`7858`)
 
-- Bug in :func:`expanding_cov`, :func:`expanding_corr`, :func:`rolling_cov`, :func:`rolling_cor`, :func:`ewmcov`, and :func:`ewmcorr`
-  returning results with columns sorted by name and producing an error for non-unique columns;
-  now handles non-unique columns and returns columns in original order
-  (except for the case of two DataFrames with ``pairwise=False``, where behavior is unchanged) (:issue:`7542`)
-- Bug in :func:`rolling_count` and ``expanding_*`` functions unnecessarily producing error message for zero-length data (:issue:`8056`)
-- Bug in :func:`rolling_apply` and :func:`expanding_apply` interpreting ``min_periods=0`` as ``min_periods=1`` (:issue:`8080`)
-- Bug in :func:`expanding_std` and :func:`expanding_var` for a single value producing a confusing error message (:issue:`7900`)
-- Bug in :func:`rolling_std` and :func:`rolling_var` for a single value producing ``0`` rather than ``NaN`` (:issue:`7900`)
-
-- Bug in :func:`ewmstd`, :func:`ewmvol`, :func:`ewmvar`, and :func:`ewmcov`
-  calculation of de-biasing factors when ``bias=False`` (the default).
-  Previously an incorrect constant factor was used, based on ``adjust=True``, ``ignore_na=True``,
-  and an infinite number of observations.
-  Now a different factor is used for each entry, based on the actual weights
-  (analogous to the usual ``N/(N-1)`` factor).
-  In particular, for a single point a value of ``NaN`` is returned when ``bias=False``,
-  whereas previously a value of (approximately) ``0`` was returned.
-
-  For example, consider the following pre-0.15.0 results for ``ewmvar(..., bias=False)``,
-  and the corresponding debiasing factors:
-
-  .. ipython:: python
-
-     s = Series([1., 2., 0., 4.])
-
-  .. code-block:: python
-
-	 In [69]: ewmvar(s, com=2., bias=False)
-	 Out[69]:
-	 0   -2.775558e-16
-	 1    3.000000e-01
-	 2    9.556787e-01
-	 3    3.585799e+00
-	 dtype: float64
-
-	 In [70]: ewmvar(s, com=2., bias=False) / ewmvar(s, com=2., bias=True)
-	 Out[70]:
-	 0    1.25
-	 1    1.25
-	 2    1.25
-	 3    1.25
-	 dtype: float64
-
-  Note that entry ``0`` is approximately 0, and the debiasing factors are a constant 1.25.
-  By comparison, the following 0.15.0 results have a ``NaN`` for entry ``0``,
-  and the debiasing factors are decreasing (towards 1.25):
-
-  .. ipython:: python
-
-     ewmvar(s, com=2., bias=False)
-     ewmvar(s, com=2., bias=False) / ewmvar(s, com=2., bias=True)
-
-  See :ref:`Exponentially weighted moment functions <stats.moments.exponentially_weighted>` for details. (:issue:`7912`)
-
 - Bug in ``DataFrame.plot`` and ``Series.plot`` may ignore ``rot`` and ``fontsize`` keywords (:issue:`7844`)
 
 
@@ -929,9 +920,7 @@ Bug Fixes
 - Bug in ``DataFrame.__setitem__`` that caused errors when setting a dataframe column to a sparse array (:issue:`8131`)
 - Bug where ``Dataframe.boxplot()`` failed when entire column was empty (:issue:`8181`).
 - Bug with messed variables in ``radviz`` visualization (:issue:`8199`).
-- Bug in interpolation methods with the ``limit`` keyword when no values
-needed interpolating (:issue:`7173`).
-- Bug where ``col_space`` was ignored in ``DataFrame.to_string()`` when ``header=False``
-  (:issue:`8230`).
+- Bug in interpolation methods with the ``limit`` keyword when no values needed interpolating (:issue:`7173`).
+- Bug where ``col_space`` was ignored in ``DataFrame.to_string()`` when ``header=False`` (:issue:`8230`).
 
 - Bug in DataFrame terminal display: Setting max_column/max_rows to zero did not trigger auto-resizing of dfs to fit terminal width/height (:issue:`7180`).
