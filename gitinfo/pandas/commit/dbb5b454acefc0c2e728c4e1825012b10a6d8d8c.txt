commit dbb5b454acefc0c2e728c4e1825012b10a6d8d8c
Author: Adam Klein <adamklein@gmail.com>
Date:   Wed May 30 16:43:15 2012 -0400

    ENH: fix nancorr further

diff --git a/pandas/src/moments.pyx b/pandas/src/moments.pyx
index b2eb3d5c1..7caeac0f4 100644
--- a/pandas/src/moments.pyx
+++ b/pandas/src/moments.pyx
@@ -252,7 +252,7 @@ def ewma(ndarray[double_t] input, double_t com):
 
 @cython.boundscheck(False)
 @cython.wraparound(False)
-def nancorr(ndarray[float64_t, ndim=2] mat, na_ok=False):
+def nancorr(ndarray[float64_t, ndim=2] mat):
     cdef:
         Py_ssize_t i, j, xi, yi, N, K
         ndarray[float64_t, ndim=2] result
@@ -276,27 +276,30 @@ def nancorr(ndarray[float64_t, ndim=2] mat, na_ok=False):
                     sumx += vx
                     sumy += vy
 
-            meanx = sumx / nobs
-            meany = sumy / nobs
+            if nobs == 0:
+                result[xi, yi] = result[yi, xi] = np.NaN
+            else:
+                meanx = sumx / nobs
+                meany = sumy / nobs
 
-            # now the cov numerator
-            sumx = 0
+                # now the cov numerator
+                sumx = 0
 
-            for i in range(N):
-                if mask[i, xi] and mask[i, yi]:
-                    vx = mat[i, xi] - meanx
-                    vy = mat[i, yi] - meany
+                for i in range(N):
+                    if mask[i, xi] and mask[i, yi]:
+                        vx = mat[i, xi] - meanx
+                        vy = mat[i, yi] - meany
 
-                    sumx += vx * vy
-                    sumxx += vx * vx
-                    sumyy += vy * vy
+                        sumx += vx * vy
+                        sumxx += vx * vx
+                        sumyy += vy * vy
 
-            divisor = sqrt(sumxx * sumyy)
+                divisor = sqrt(sumxx * sumyy)
 
-            if na_ok == 0:
-                result[xi, yi] = result[yi, xi] = sumx / divisor if divisor != 0 else np.NaN
-            else:
-                result[xi, yi] = result[yi, xi] = sumx / divisor
+                if divisor != 0:
+                    result[xi, yi] = result[yi, xi] = sumx / divisor
+                else:
+                    result[xi, yi] = result[yi, xi] = np.NaN
 
     return result
 
