commit 7d40f18718ba80e8b8d706eaed2fc4c098686e71
Author: Jeff Reback <jeff@reback.net>
Date:   Thu Oct 13 15:59:21 2016 -0400

    DOC: pydata/pandas -> pandas-dev/pandas (#14409)

diff --git a/asv_bench/benchmarks/attrs_caching.py b/asv_bench/benchmarks/attrs_caching.py
index 2b10cb88a..de9aa1893 100644
--- a/asv_bench/benchmarks/attrs_caching.py
+++ b/asv_bench/benchmarks/attrs_caching.py
@@ -20,4 +20,4 @@ class setattr_dataframe_index(object):
         self.cur_index = self.df.index
 
     def time_setattr_dataframe_index(self):
-        self.df.index = self.cur_index
\ No newline at end of file
+        self.df.index = self.cur_index
diff --git a/asv_bench/benchmarks/ctors.py b/asv_bench/benchmarks/ctors.py
index 265ffbc72..f68cf9399 100644
--- a/asv_bench/benchmarks/ctors.py
+++ b/asv_bench/benchmarks/ctors.py
@@ -49,4 +49,4 @@ class index_from_series_ctor(object):
         self.s = Series(([Timestamp('20110101'), Timestamp('20120101'), Timestamp('20130101')] * 1000))
 
     def time_index_from_series_ctor(self):
-        Index(self.s)
\ No newline at end of file
+        Index(self.s)
diff --git a/asv_bench/benchmarks/frame_ctor.py b/asv_bench/benchmarks/frame_ctor.py
index 85f3c1628..6f40611e6 100644
--- a/asv_bench/benchmarks/frame_ctor.py
+++ b/asv_bench/benchmarks/frame_ctor.py
@@ -1703,4 +1703,4 @@ class series_ctor_from_dict(object):
         self.dict_list = [dict(zip(self.columns, row)) for row in self.frame.values]
 
     def time_series_ctor_from_dict(self):
-        Series(self.some_dict)
\ No newline at end of file
+        Series(self.some_dict)
diff --git a/asv_bench/benchmarks/hdfstore_bench.py b/asv_bench/benchmarks/hdfstore_bench.py
index 7638cc2a0..659fc4941 100644
--- a/asv_bench/benchmarks/hdfstore_bench.py
+++ b/asv_bench/benchmarks/hdfstore_bench.py
@@ -348,4 +348,4 @@ class write_store_table_wide(object):
         try:
             os.remove(self.f)
         except:
-            pass
\ No newline at end of file
+            pass
diff --git a/asv_bench/benchmarks/index_object.py b/asv_bench/benchmarks/index_object.py
index a0a1b560d..2c94f9b2b 100644
--- a/asv_bench/benchmarks/index_object.py
+++ b/asv_bench/benchmarks/index_object.py
@@ -344,4 +344,4 @@ class multiindex_with_datetime_level_sliced(object):
         self.mi = MultiIndex.from_product([self.level1, self.level2])
 
     def time_multiindex_with_datetime_level_sliced(self):
-        self.mi[:10].values
\ No newline at end of file
+        self.mi[:10].values
diff --git a/asv_bench/benchmarks/io_sql.py b/asv_bench/benchmarks/io_sql.py
index 9a6b21f9e..c583ac176 100644
--- a/asv_bench/benchmarks/io_sql.py
+++ b/asv_bench/benchmarks/io_sql.py
@@ -212,4 +212,4 @@ class sql_write_sqlalchemy(object):
         self.df = DataFrame({'float1': randn(10000), 'float2': randn(10000), 'string1': (['foo'] * 10000), 'bool1': ([True] * 10000), 'int1': np.random.randint(0, 100000, size=10000), }, index=self.index)
 
     def time_sql_write_sqlalchemy(self):
-        self.df.to_sql('test1', self.engine, if_exists='replace')
\ No newline at end of file
+        self.df.to_sql('test1', self.engine, if_exists='replace')
diff --git a/asv_bench/benchmarks/panel_ctor.py b/asv_bench/benchmarks/panel_ctor.py
index 0b0e73847..4f6fd4a5a 100644
--- a/asv_bench/benchmarks/panel_ctor.py
+++ b/asv_bench/benchmarks/panel_ctor.py
@@ -61,4 +61,4 @@ class panel_from_dict_two_different_indexes(object):
             self.data_frames[x] = self.df
 
     def time_panel_from_dict_two_different_indexes(self):
-        Panel.from_dict(self.data_frames)
\ No newline at end of file
+        Panel.from_dict(self.data_frames)
diff --git a/asv_bench/benchmarks/panel_methods.py b/asv_bench/benchmarks/panel_methods.py
index 90118eaf6..0bd572db2 100644
--- a/asv_bench/benchmarks/panel_methods.py
+++ b/asv_bench/benchmarks/panel_methods.py
@@ -53,4 +53,4 @@ class panel_shift_minor(object):
         self.panel = Panel(np.random.randn(100, len(self.index), 1000))
 
     def time_panel_shift_minor(self):
-        self.panel.shift(1, axis='minor')
\ No newline at end of file
+        self.panel.shift(1, axis='minor')
diff --git a/asv_bench/benchmarks/replace.py b/asv_bench/benchmarks/replace.py
index e9f33ebfc..869ddd8d6 100644
--- a/asv_bench/benchmarks/replace.py
+++ b/asv_bench/benchmarks/replace.py
@@ -45,4 +45,4 @@ class replace_replacena(object):
         self.ts = Series(np.random.randn(self.N), index=self.rng)
 
     def time_replace_replacena(self):
-        self.ts.replace(np.nan, 0.0, inplace=True)
\ No newline at end of file
+        self.ts.replace(np.nan, 0.0, inplace=True)
diff --git a/asv_bench/benchmarks/reshape.py b/asv_bench/benchmarks/reshape.py
index 604fa5092..ab235e085 100644
--- a/asv_bench/benchmarks/reshape.py
+++ b/asv_bench/benchmarks/reshape.py
@@ -73,4 +73,4 @@ class unstack_sparse_keyspace(object):
                 break
 
     def time_unstack_sparse_keyspace(self):
-        self.idf.unstack()
\ No newline at end of file
+        self.idf.unstack()
diff --git a/asv_bench/benchmarks/stat_ops.py b/asv_bench/benchmarks/stat_ops.py
index daf5135e6..12fbb2478 100644
--- a/asv_bench/benchmarks/stat_ops.py
+++ b/asv_bench/benchmarks/stat_ops.py
@@ -258,4 +258,4 @@ class stats_rolling_mean(object):
         rolling_skew(self.arr, self.win)
 
     def time_rolling_kurt(self):
-        rolling_kurt(self.arr, self.win)
\ No newline at end of file
+        rolling_kurt(self.arr, self.win)
diff --git a/asv_bench/benchmarks/strings.py b/asv_bench/benchmarks/strings.py
index e4f91b1b9..d64606214 100644
--- a/asv_bench/benchmarks/strings.py
+++ b/asv_bench/benchmarks/strings.py
@@ -390,4 +390,4 @@ class strings_upper(object):
         self.many.str.upper()
 
     def make_series(self, letters, strlen, size):
-        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
\ No newline at end of file
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
diff --git a/doc/README.rst b/doc/README.rst
index a93ad32a4..a3733846d 100644
--- a/doc/README.rst
+++ b/doc/README.rst
@@ -155,9 +155,9 @@ Where to start?
 ---------------
 
 There are a number of issues listed under `Docs
-<https://github.com/pydata/pandas/issues?labels=Docs&sort=updated&state=open>`_
+<https://github.com/pandas-dev/pandas/issues?labels=Docs&sort=updated&state=open>`_
 and `Good as first PR
-<https://github.com/pydata/pandas/issues?labels=Good+as+first+PR&sort=updated&state=open>`_
+<https://github.com/pandas-dev/pandas/issues?labels=Good+as+first+PR&sort=updated&state=open>`_
 where you could start out.
 
 Or maybe you have an idea of your own, by using pandas, looking for something
diff --git a/doc/_templates/autosummary/accessor_attribute.rst b/doc/_templates/autosummary/accessor_attribute.rst
index e38a9f22f..a2f0eb5e0 100644
--- a/doc/_templates/autosummary/accessor_attribute.rst
+++ b/doc/_templates/autosummary/accessor_attribute.rst
@@ -3,4 +3,4 @@
 
 .. currentmodule:: {{ module.split('.')[0] }}
 
-.. autoaccessorattribute:: {{ [module.split('.')[1], objname]|join('.') }}
\ No newline at end of file
+.. autoaccessorattribute:: {{ [module.split('.')[1], objname]|join('.') }}
diff --git a/doc/_templates/autosummary/accessor_method.rst b/doc/_templates/autosummary/accessor_method.rst
index 8175d8615..43dfc3b81 100644
--- a/doc/_templates/autosummary/accessor_method.rst
+++ b/doc/_templates/autosummary/accessor_method.rst
@@ -3,4 +3,4 @@
 
 .. currentmodule:: {{ module.split('.')[0] }}
 
-.. autoaccessormethod:: {{ [module.split('.')[1], objname]|join('.') }}
\ No newline at end of file
+.. autoaccessormethod:: {{ [module.split('.')[1], objname]|join('.') }}
diff --git a/doc/source/categorical.rst b/doc/source/categorical.rst
index f52f72b49..090998570 100644
--- a/doc/source/categorical.rst
+++ b/doc/source/categorical.rst
@@ -973,7 +973,7 @@ are not numeric data (even in the case that ``.categories`` is numeric).
          print("TypeError: " + str(e))
 
 .. note::
-    If such a function works, please file a bug at https://github.com/pydata/pandas!
+    If such a function works, please file a bug at https://github.com/pandas-dev/pandas!
 
 dtype in apply
 ~~~~~~~~~~~~~~
diff --git a/doc/source/comparison_with_sas.rst b/doc/source/comparison_with_sas.rst
index 85d432b54..7ec91d251 100644
--- a/doc/source/comparison_with_sas.rst
+++ b/doc/source/comparison_with_sas.rst
@@ -116,7 +116,7 @@ Reading External Data
 
 Like SAS, pandas provides utilities for reading in data from
 many formats.  The ``tips`` dataset, found within the pandas
-tests (`csv <https://raw.github.com/pydata/pandas/master/pandas/tests/data/tips.csv>`_)
+tests (`csv <https://raw.github.com/pandas-dev/pandas/master/pandas/tests/data/tips.csv>`_)
 will be used in many of the following examples.
 
 SAS provides ``PROC IMPORT`` to read csv data into a data set.
@@ -131,7 +131,7 @@ The pandas method is :func:`read_csv`, which works similarly.
 
 .. ipython:: python
 
-   url = 'https://raw.github.com/pydata/pandas/master/pandas/tests/data/tips.csv'
+   url = 'https://raw.github.com/pandas-dev/pandas/master/pandas/tests/data/tips.csv'
    tips = pd.read_csv(url)
    tips.head()
 
diff --git a/doc/source/comparison_with_sql.rst b/doc/source/comparison_with_sql.rst
index 099a0e946..7962e0e69 100644
--- a/doc/source/comparison_with_sql.rst
+++ b/doc/source/comparison_with_sql.rst
@@ -23,7 +23,7 @@ structure.
 
 .. ipython:: python
 
-    url = 'https://raw.github.com/pydata/pandas/master/pandas/tests/data/tips.csv'
+    url = 'https://raw.github.com/pandas-dev/pandas/master/pandas/tests/data/tips.csv'
     tips = pd.read_csv(url)
     tips.head()
 
diff --git a/doc/source/conf.py b/doc/source/conf.py
index 4f916c6ba..4f679f3f7 100644
--- a/doc/source/conf.py
+++ b/doc/source/conf.py
@@ -301,9 +301,9 @@ import glob
 autosummary_generate = glob.glob("*.rst")
 
 # extlinks alias
-extlinks = {'issue': ('https://github.com/pydata/pandas/issues/%s',
+extlinks = {'issue': ('https://github.com/pandas-dev/pandas/issues/%s',
                       'GH'),
-            'wiki': ('https://github.com/pydata/pandas/wiki/%s',
+            'wiki': ('https://github.com/pandas-dev/pandas/wiki/%s',
                      'wiki ')}
 
 ipython_exec_lines = [
@@ -468,10 +468,10 @@ def linkcode_resolve(domain, info):
     fn = os.path.relpath(fn, start=os.path.dirname(pandas.__file__))
 
     if '+' in pandas.__version__:
-        return "http://github.com/pydata/pandas/blob/master/pandas/%s%s" % (
+        return "http://github.com/pandas-dev/pandas/blob/master/pandas/%s%s" % (
             fn, linespec)
     else:
-        return "http://github.com/pydata/pandas/blob/v%s/pandas/%s%s" % (
+        return "http://github.com/pandas-dev/pandas/blob/v%s/pandas/%s%s" % (
             pandas.__version__, fn, linespec)
 
 
diff --git a/doc/source/contributing.rst b/doc/source/contributing.rst
index 446a40a7e..a8a47a9d9 100644
--- a/doc/source/contributing.rst
+++ b/doc/source/contributing.rst
@@ -14,11 +14,11 @@ All contributions, bug reports, bug fixes, documentation improvements,
 enhancements and ideas are welcome.
 
 If you are simply looking to start working with the *pandas* codebase, navigate to the
-`GitHub "issues" tab <https://github.com/pydata/pandas/issues>`_ and start looking through
+`GitHub "issues" tab <https://github.com/pandas-dev/pandas/issues>`_ and start looking through
 interesting issues.  There are a number of issues listed under `Docs
-<https://github.com/pydata/pandas/issues?labels=Docs&sort=updated&state=open>`_
+<https://github.com/pandas-dev/pandas/issues?labels=Docs&sort=updated&state=open>`_
 and `Difficulty Novice
-<https://github.com/pydata/pandas/issues?q=is%3Aopen+is%3Aissue+label%3A%22Difficulty+Novice%22>`_
+<https://github.com/pandas-dev/pandas/issues?q=is%3Aopen+is%3Aissue+label%3A%22Difficulty+Novice%22>`_
 where you could start out.
 
 Or maybe through using *pandas* you have an idea of your own or are looking for something
@@ -27,7 +27,7 @@ about it!
 
 Feel free to ask questions on the `mailing list
 <https://groups.google.com/forum/?fromgroups#!forum/pydata>`_ or on `Gitter
-<https://gitter.im/pydata/pandas>`_.
+<https://gitter.im/pandas-dev/pandas>`_.
 
 Bug reports and enhancement requests
 ====================================
@@ -79,7 +79,7 @@ It can very quickly become overwhelming, but sticking to the guidelines below wi
 straightforward and mostly trouble free.  As always, if you are having difficulties please
 feel free to ask for help.
 
-The code is hosted on `GitHub <https://www.github.com/pydata/pandas>`_. To
+The code is hosted on `GitHub <https://www.github.com/pandas-dev/pandas>`_. To
 contribute you will need to sign up for a `free GitHub account
 <https://github.com/signup/free>`_. We use `Git <http://git-scm.com/>`_ for
 version control to allow many people to work together on the project.
@@ -103,12 +103,12 @@ Forking
 -------
 
 You will need your own fork to work on the code. Go to the `pandas project
-page <https://github.com/pydata/pandas>`_ and hit the ``Fork`` button. You will
+page <https://github.com/pandas-dev/pandas>`_ and hit the ``Fork`` button. You will
 want to clone your fork to your machine::
 
     git clone git@github.com:your-user-name/pandas.git pandas-yourname
     cd pandas-yourname
-    git remote add upstream git://github.com/pydata/pandas.git
+    git remote add upstream git://github.com/pandas-dev/pandas.git
 
 This creates the directory `pandas-yourname` and connects your repository to
 the upstream (main project) *pandas* repository.
@@ -467,7 +467,7 @@ and make these changes with::
     pep8radius master --diff --in-place
 
 Additional standards are outlined on the `code style wiki
-page <https://github.com/pydata/pandas/wiki/Code-Style-and-Conventions>`_.
+page <https://github.com/pandas-dev/pandas/wiki/Code-Style-and-Conventions>`_.
 
 Please try to maintain backward compatibility. *pandas* has lots of users with lots of
 existing code, so don't break it if at all possible.  If you think breakage is required,
@@ -501,7 +501,7 @@ All tests should go into the ``tests`` subdirectory of the specific package.
 This folder contains many current examples of tests, and we suggest looking to these for
 inspiration.  If your test requires working with files or
 network connectivity, there is more information on the `testing page
-<https://github.com/pydata/pandas/wiki/Testing>`_ of the wiki.
+<https://github.com/pandas-dev/pandas/wiki/Testing>`_ of the wiki.
 
 The ``pandas.util.testing`` module has many special ``assert`` functions that
 make it easier to make statements about whether Series or DataFrame objects are
@@ -639,7 +639,7 @@ on Travis-CI. The first step is to create a `service account
 Integration tests for ``pandas.io.gbq`` are skipped in pull requests because
 the credentials that are required for running Google BigQuery integration
 tests are `encrypted <https://docs.travis-ci.com/user/encrypting-files/>`__
-on Travis-CI and are only accessible from the pydata/pandas repository. The
+on Travis-CI and are only accessible from the pandas-dev/pandas repository. The
 credentials won't be available on forks of pandas. Here are the steps to run
 gbq integration tests on a forked repository:
 
@@ -688,7 +688,7 @@ performance regressions.
 
 You can run specific benchmarks using the ``-r`` flag, which takes a regular expression.
 
-See the `performance testing wiki <https://github.com/pydata/pandas/wiki/Performance-Testing>`_ for information
+See the `performance testing wiki <https://github.com/pandas-dev/pandas/wiki/Performance-Testing>`_ for information
 on how to write a benchmark.
 
 Documenting your code
@@ -712,8 +712,8 @@ directive is used. The sphinx syntax for that is:
 
 This will put the text *New in version 0.17.0* wherever you put the sphinx
 directive. This should also be put in the docstring when adding a new function
-or method (`example <https://github.com/pydata/pandas/blob/v0.16.2/pandas/core/generic.py#L1959>`__)
-or a new keyword argument (`example <https://github.com/pydata/pandas/blob/v0.16.2/pandas/core/frame.py#L1171>`__).
+or method (`example <https://github.com/pandas-dev/pandas/blob/v0.16.2/pandas/core/generic.py#L1959>`__)
+or a new keyword argument (`example <https://github.com/pandas-dev/pandas/blob/v0.16.2/pandas/core/frame.py#L1171>`__).
 
 Contributing your changes to *pandas*
 =====================================
@@ -806,8 +806,8 @@ like::
 
     origin  git@github.com:yourname/pandas.git (fetch)
     origin  git@github.com:yourname/pandas.git (push)
-    upstream        git://github.com/pydata/pandas.git (fetch)
-    upstream        git://github.com/pydata/pandas.git (push)
+    upstream        git://github.com/pandas-dev/pandas.git (fetch)
+    upstream        git://github.com/pandas-dev/pandas.git (push)
 
 Now your code is on GitHub, but it is not yet a part of the *pandas* project.  For that to
 happen, a pull request needs to be submitted on GitHub.
diff --git a/doc/source/cookbook.rst b/doc/source/cookbook.rst
index 27462a08b..3e84d15ca 100644
--- a/doc/source/cookbook.rst
+++ b/doc/source/cookbook.rst
@@ -200,7 +200,7 @@ The :ref:`indexing <indexing>` docs.
    df[(df.AAA <= 6) & (df.index.isin([0,2,4]))]
 
 `Use loc for label-oriented slicing and iloc positional slicing
-<https://github.com/pydata/pandas/issues/2904>`__
+<https://github.com/pandas-dev/pandas/issues/2904>`__
 
 .. ipython:: python
 
@@ -410,7 +410,7 @@ Sorting
    df.sort_values(by=('Labs', 'II'), ascending=False)
 
 `Partial Selection, the need for sortedness;
-<https://github.com/pydata/pandas/issues/2995>`__
+<https://github.com/pandas-dev/pandas/issues/2995>`__
 
 Levels
 ******
@@ -787,7 +787,7 @@ The :ref:`Resample <timeseries.resampling>` docs.
 <http://stackoverflow.com/questions/14569223/timegrouper-pandas>`__
 
 `Using TimeGrouper and another grouping to create subgroups, then apply a custom function
-<https://github.com/pydata/pandas/issues/3791>`__
+<https://github.com/pandas-dev/pandas/issues/3791>`__
 
 `Resampling with custom periods
 <http://stackoverflow.com/questions/15408156/resampling-with-custom-periods>`__
@@ -823,7 +823,7 @@ ignore_index is needed in pandas < v0.13, and depending on df construction
    df = df1.append(df2,ignore_index=True); df
 
 `Self Join of a DataFrame
-<https://github.com/pydata/pandas/issues/2996>`__
+<https://github.com/pandas-dev/pandas/issues/2996>`__
 
 .. ipython:: python
 
@@ -936,7 +936,7 @@ using that handle to read.
 <http://stackoverflow.com/questions/15555005/get-inferred-dataframe-types-iteratively-using-chunksize>`__
 
 `Dealing with bad lines
-<http://github.com/pydata/pandas/issues/2886>`__
+<http://github.com/pandas-dev/pandas/issues/2886>`__
 
 `Dealing with bad lines II
 <http://nipunbatra.github.io/2013/06/reading-unclean-data-csv-using-pandas/>`__
@@ -1075,7 +1075,7 @@ The :ref:`HDFStores <io.hdf5>` docs
 <http://stackoverflow.com/questions/13926089/selecting-columns-from-pandas-hdfstore-table>`__
 
 `Managing heterogeneous data using a linked multiple table hierarchy
-<http://github.com/pydata/pandas/issues/3032>`__
+<http://github.com/pandas-dev/pandas/issues/3032>`__
 
 `Merging on-disk tables with millions of rows
 <http://stackoverflow.com/questions/14614512/merging-two-tables-with-millions-of-rows-in-python/14617925#14617925>`__
@@ -1216,7 +1216,7 @@ Timedeltas
 The :ref:`Timedeltas <timedeltas.timedeltas>` docs.
 
 `Using timedeltas
-<http://github.com/pydata/pandas/pull/2899>`__
+<http://github.com/pandas-dev/pandas/pull/2899>`__
 
 .. ipython:: python
 
diff --git a/doc/source/ecosystem.rst b/doc/source/ecosystem.rst
index 087b265ee..a37b1e89c 100644
--- a/doc/source/ecosystem.rst
+++ b/doc/source/ecosystem.rst
@@ -143,7 +143,7 @@ both "column wise min/max and global min/max coloring."
 API
 -----
 
-`pandas-datareader <https://github.com/pydata/pandas-datareader>`__
+`pandas-datareader <https://github.com/pandas-dev/pandas-datareader>`__
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ``pandas-datareader`` is a remote data access library for pandas. ``pandas.io`` from pandas < 0.17.0 is now refactored/split-off to and importable from ``pandas_datareader`` (PyPI:``pandas-datareader``). Many/most of the supported APIs have at least a documentation paragraph in the `pandas-datareader docs <https://pandas-datareader.readthedocs.io/en/latest/>`_:
 
diff --git a/doc/source/gotchas.rst b/doc/source/gotchas.rst
index 99d7486cd..cfac5c257 100644
--- a/doc/source/gotchas.rst
+++ b/doc/source/gotchas.rst
@@ -391,7 +391,7 @@ This is because ``reindex_like`` silently inserts ``NaNs`` and the ``dtype``
 changes accordingly.  This can cause some issues when using ``numpy`` ``ufuncs``
 such as ``numpy.logical_and``.
 
-See the `this old issue <https://github.com/pydata/pandas/issues/2388>`__ for a more
+See the `this old issue <https://github.com/pandas-dev/pandas/issues/2388>`__ for a more
 detailed discussion.
 
 Parsing Dates from Text Files
diff --git a/doc/source/install.rst b/doc/source/install.rst
index 73685e0be..923c22aa9 100644
--- a/doc/source/install.rst
+++ b/doc/source/install.rst
@@ -13,7 +13,7 @@ This is the recommended installation method for most users.
 
 Instructions for installing from source,
 `PyPI <http://pypi.python.org/pypi/pandas>`__, various Linux distributions, or a
-`development version <http://github.com/pydata/pandas>`__ are also provided.
+`development version <http://github.com/pandas-dev/pandas>`__ are also provided.
 
 Python version support
 ----------------------
diff --git a/doc/source/io.rst b/doc/source/io.rst
index 811fca434..ae71587c8 100644
--- a/doc/source/io.rst
+++ b/doc/source/io.rst
@@ -2035,7 +2035,7 @@ You can even pass in an instance of ``StringIO`` if you so desire
    that having so many network-accessing functions slows down the documentation
    build. If you spot an error or an example that doesn't run, please do not
    hesitate to report it over on `pandas GitHub issues page
-   <http://www.github.com/pydata/pandas/issues>`__.
+   <http://www.github.com/pandas-dev/pandas/issues>`__.
 
 
 Read a URL and match a table that contains specific text
diff --git a/doc/source/overview.rst b/doc/source/overview.rst
index b1addddc2..92caeec31 100644
--- a/doc/source/overview.rst
+++ b/doc/source/overview.rst
@@ -81,7 +81,7 @@ Getting Support
 ---------------
 
 The first stop for pandas issues and ideas is the `Github Issue Tracker
-<https://github.com/pydata/pandas/issues>`__. If you have a general question,
+<https://github.com/pandas-dev/pandas/issues>`__. If you have a general question,
 pandas community experts can answer through `Stack Overflow
 <http://stackoverflow.com/questions/tagged/pandas>`__.
 
@@ -103,7 +103,7 @@ training, and consulting for pandas.
 
 pandas is only made possible by a group of people around the world like you
 who have contributed new code, bug reports, fixes, comments and ideas. A
-complete list can be found `on Github <http://www.github.com/pydata/pandas/contributors>`__.
+complete list can be found `on Github <http://www.github.com/pandas-dev/pandas/contributors>`__.
 
 Development Team
 ----------------
diff --git a/doc/source/r_interface.rst b/doc/source/r_interface.rst
index bde97d88a..f2a8668bb 100644
--- a/doc/source/r_interface.rst
+++ b/doc/source/r_interface.rst
@@ -71,7 +71,7 @@ The ``convert_to_r_matrix`` function can be replaced by the normal
     Not all conversion functions in rpy2 are working exactly the same as the
     current methods in pandas. If you experience problems or limitations in
     comparison to the ones in pandas, please report this at the
-    `issue tracker <https://github.com/pydata/pandas/issues>`_.
+    `issue tracker <https://github.com/pandas-dev/pandas/issues>`_.
 
 See also the documentation of the `rpy2 <http://rpy2.bitbucket.org/>`__ project.
 
diff --git a/doc/source/release.rst b/doc/source/release.rst
index 7e987fcff..d210065f0 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -20,7 +20,7 @@ Release Notes
 *************
 
 This is the list of changes to pandas between each release. For full details,
-see the commit logs at http://github.com/pydata/pandas
+see the commit logs at http://github.com/pandas-dev/pandas
 
 **What is it**
 
@@ -33,7 +33,7 @@ analysis / manipulation tool available in any language.
 
 **Where to get it**
 
-* Source code: http://github.com/pydata/pandas
+* Source code: http://github.com/pandas-dev/pandas
 * Binary installers on PyPI: http://pypi.python.org/pypi/pandas
 * Documentation: http://pandas.pydata.org
 
diff --git a/doc/source/remote_data.rst b/doc/source/remote_data.rst
index 019aa82fe..e2c713ac8 100644
--- a/doc/source/remote_data.rst
+++ b/doc/source/remote_data.rst
@@ -13,7 +13,7 @@ DataReader
 
 The sub-package ``pandas.io.data`` is removed in favor of a separately
 installable `pandas-datareader package
-<https://github.com/pydata/pandas-datareader>`_. This will allow the data
+<https://github.com/pandas-dev/pandas-datareader>`_. This will allow the data
 modules to be independently updated to your pandas installation. The API for
 ``pandas-datareader v0.1.1`` is the same as in ``pandas v0.16.1``.
 (:issue:`8961`)
diff --git a/doc/source/visualization.rst b/doc/source/visualization.rst
index 6e05c3ff0..e3b186abe 100644
--- a/doc/source/visualization.rst
+++ b/doc/source/visualization.rst
@@ -892,7 +892,7 @@ for Fourier series. By coloring these curves differently for each class
 it is possible to visualize data clustering. Curves belonging to samples
 of the same class will usually be closer together and form larger structures.
 
-**Note**: The "Iris" dataset is available `here <https://raw.github.com/pydata/pandas/master/pandas/tests/data/iris.csv>`__.
+**Note**: The "Iris" dataset is available `here <https://raw.github.com/pandas-dev/pandas/master/pandas/tests/data/iris.csv>`__.
 
 .. ipython:: python
 
@@ -1044,7 +1044,7 @@ forces acting on our sample are at an equilibrium) is where a dot representing
 our sample will be drawn. Depending on which class that sample belongs it will
 be colored differently.
 
-**Note**: The "Iris" dataset is available `here <https://raw.github.com/pydata/pandas/master/pandas/tests/data/iris.csv>`__.
+**Note**: The "Iris" dataset is available `here <https://raw.github.com/pandas-dev/pandas/master/pandas/tests/data/iris.csv>`__.
 
 .. ipython:: python
 
diff --git a/pandas/compat/__init__.py b/pandas/compat/__init__.py
index 990018f2f..1b8930dca 100644
--- a/pandas/compat/__init__.py
+++ b/pandas/compat/__init__.py
@@ -392,7 +392,7 @@ class OrderedDefaultdict(OrderedDict):
         return type(self), args, None, None, list(self.items())
 
 
-# https://github.com/pydata/pandas/pull/9123
+# https://github.com/pandas-dev/pandas/pull/9123
 def is_platform_little_endian():
     """ am I little endian """
     return sys.byteorder == 'little'
diff --git a/pandas/computation/tests/test_eval.py b/pandas/computation/tests/test_eval.py
index 72fbc3906..f480eae2d 100644
--- a/pandas/computation/tests/test_eval.py
+++ b/pandas/computation/tests/test_eval.py
@@ -1693,11 +1693,11 @@ class TestMathPythonPython(tm.TestCase):
         self.check_result_type(np.float64, np.float64)
 
     def test_result_types2(self):
-        # xref https://github.com/pydata/pandas/issues/12293
+        # xref https://github.com/pandas-dev/pandas/issues/12293
         raise nose.SkipTest("unreliable tests on complex128")
 
         # Did not test complex64 because DataFrame is converting it to
-        # complex128. Due to https://github.com/pydata/pandas/issues/10952
+        # complex128. Due to https://github.com/pandas-dev/pandas/issues/10952
         self.check_result_type(np.complex128, np.complex128)
 
     def test_undefined_func(self):
diff --git a/pandas/core/categorical.py b/pandas/core/categorical.py
index db48f2a46..9efaff606 100644
--- a/pandas/core/categorical.py
+++ b/pandas/core/categorical.py
@@ -1681,7 +1681,7 @@ class Categorical(PandasObject):
         else:
             # There is a bug in numpy, which does not accept a Series as a
             # indexer
-            # https://github.com/pydata/pandas/issues/6168
+            # https://github.com/pandas-dev/pandas/issues/6168
             # https://github.com/numpy/numpy/issues/4240 -> fixed in numpy 1.9
             # FIXME: remove when numpy 1.9 is the lowest numpy version pandas
             # accepts...
@@ -1690,7 +1690,7 @@ class Categorical(PandasObject):
         lindexer = self.categories.get_indexer(rvalue)
 
         # FIXME: the following can be removed after GH7820 is fixed:
-        # https://github.com/pydata/pandas/issues/7820
+        # https://github.com/pandas-dev/pandas/issues/7820
         # float categories do currently return -1 for np.nan, even if np.nan is
         # included in the index -> "repair" this here
         if isnull(rvalue).any() and isnull(self.categories).any():
diff --git a/pandas/io/data.py b/pandas/io/data.py
index e76790a6a..09c7aef0c 100644
--- a/pandas/io/data.py
+++ b/pandas/io/data.py
@@ -1,6 +1,6 @@
 raise ImportError(
     "The pandas.io.data module is moved to a separate package "
     "(pandas-datareader). After installing the pandas-datareader package "
-    "(https://github.com/pydata/pandas-datareader), you can change "
+    "(https://github.com/pandas-dev/pandas-datareader), you can change "
     "the import ``from pandas.io import data, wb`` to "
     "``from pandas_datareader import data, wb``.")
diff --git a/pandas/io/gbq.py b/pandas/io/gbq.py
index d6f8660f2..8038cc500 100644
--- a/pandas/io/gbq.py
+++ b/pandas/io/gbq.py
@@ -236,7 +236,7 @@ class GbqConnector(object):
         return credentials
 
     def get_service_account_credentials(self):
-        # Bug fix for https://github.com/pydata/pandas/issues/12572
+        # Bug fix for https://github.com/pandas-dev/pandas/issues/12572
         # We need to know that a supported version of oauth2client is installed
         # Test that either of the following is installed:
         # - SignedJwtAssertionCredentials from oauth2client.client
diff --git a/pandas/io/tests/json/test_pandas.py b/pandas/io/tests/json/test_pandas.py
index 47bdd2557..ffac5d5f4 100644
--- a/pandas/io/tests/json/test_pandas.py
+++ b/pandas/io/tests/json/test_pandas.py
@@ -767,7 +767,7 @@ DataFrame\\.index values are different \\(100\\.0 %\\)
 
     @network
     def test_url(self):
-        url = 'https://api.github.com/repos/pydata/pandas/issues?per_page=5'
+        url = 'https://api.github.com/repos/pandas-dev/pandas/issues?per_page=5'  # noqa
         result = read_json(url, convert_dates=True)
         for c in ['created_at', 'closed_at', 'updated_at']:
             self.assertEqual(result[c].dtype, 'datetime64[ns]')
diff --git a/pandas/io/tests/parser/common.py b/pandas/io/tests/parser/common.py
index 0b59b695e..0219e1639 100644
--- a/pandas/io/tests/parser/common.py
+++ b/pandas/io/tests/parser/common.py
@@ -629,7 +629,7 @@ bar"""
     @tm.network
     def test_url(self):
         # HTTP(S)
-        url = ('https://raw.github.com/pydata/pandas/master/'
+        url = ('https://raw.github.com/pandas-dev/pandas/master/'
                'pandas/io/tests/parser/data/salary.table.csv')
         url_table = self.read_table(url)
         dirpath = tm.get_data_path()
diff --git a/pandas/io/tests/parser/test_network.py b/pandas/io/tests/parser/test_network.py
index 8b8a6de36..7e2f03985 100644
--- a/pandas/io/tests/parser/test_network.py
+++ b/pandas/io/tests/parser/test_network.py
@@ -23,7 +23,7 @@ class TestUrlGz(tm.TestCase):
 
     @tm.network
     def test_url_gz(self):
-        url = ('https://raw.github.com/pydata/pandas/'
+        url = ('https://raw.github.com/pandas-dev/pandas/'
                'master/pandas/io/tests/parser/data/salary.table.gz')
         url_table = read_table(url, compression="gzip", engine="python")
         tm.assert_frame_equal(url_table, self.local_table)
diff --git a/pandas/io/tests/test_excel.py b/pandas/io/tests/test_excel.py
index d163b05aa..998e71076 100644
--- a/pandas/io/tests/test_excel.py
+++ b/pandas/io/tests/test_excel.py
@@ -543,7 +543,7 @@ class XlrdTests(ReadingTestsBase):
 
     @tm.network
     def test_read_from_http_url(self):
-        url = ('https://raw.github.com/pydata/pandas/master/'
+        url = ('https://raw.github.com/pandas-dev/pandas/master/'
                'pandas/io/tests/data/test1' + self.ext)
         url_table = read_excel(url)
         local_table = self.get_exceldf('test1')
diff --git a/pandas/io/tests/test_gbq.py b/pandas/io/tests/test_gbq.py
index 0ea4b5204..cca1580b8 100644
--- a/pandas/io/tests/test_gbq.py
+++ b/pandas/io/tests/test_gbq.py
@@ -150,7 +150,7 @@ def _test_imports():
         raise ImportError(
             "pandas requires httplib2 for Google BigQuery support")
 
-    # Bug fix for https://github.com/pydata/pandas/issues/12572
+    # Bug fix for https://github.com/pandas-dev/pandas/issues/12572
     # We need to know that a supported version of oauth2client is installed
     # Test that either of the following is installed:
     # - SignedJwtAssertionCredentials from oauth2client.client
@@ -651,7 +651,7 @@ class TestReadGBQIntegration(tm.TestCase):
         self.assertEqual(len(df.drop_duplicates()), test_size)
 
     def test_zero_rows(self):
-        # Bug fix for https://github.com/pydata/pandas/issues/10273
+        # Bug fix for https://github.com/pandas-dev/pandas/issues/10273
         df = gbq.read_gbq("SELECT title, id "
                           "FROM [publicdata:samples.wikipedia] "
                           "WHERE timestamp=-9999999",
diff --git a/pandas/io/tests/test_packers.py b/pandas/io/tests/test_packers.py
index cf61ad9a3..91042775b 100644
--- a/pandas/io/tests/test_packers.py
+++ b/pandas/io/tests/test_packers.py
@@ -544,7 +544,7 @@ class TestSparse(TestPackers):
 
 
 class TestCompression(TestPackers):
-    """See https://github.com/pydata/pandas/pull/9783
+    """See https://github.com/pandas-dev/pandas/pull/9783
     """
 
     def setUp(self):
diff --git a/pandas/io/tests/test_sql.py b/pandas/io/tests/test_sql.py
index 198a4017b..af8989baa 100644
--- a/pandas/io/tests/test_sql.py
+++ b/pandas/io/tests/test_sql.py
@@ -1610,7 +1610,7 @@ class _TestSQLAlchemy(SQLAlchemyMixIn, PandasSQLTest):
 
     def test_connectable_issue_example(self):
         # This tests the example raised in issue
-        # https://github.com/pydata/pandas/issues/10104
+        # https://github.com/pandas-dev/pandas/issues/10104
 
         def foo(connection):
             query = 'SELECT test_foo_data FROM test_foo_data'
diff --git a/pandas/io/wb.py b/pandas/io/wb.py
index 5dc4d9ce1..2183290c7 100644
--- a/pandas/io/wb.py
+++ b/pandas/io/wb.py
@@ -1,6 +1,6 @@
 raise ImportError(
     "The pandas.io.wb module is moved to a separate package "
     "(pandas-datareader). After installing the pandas-datareader package "
-    "(https://github.com/pydata/pandas-datareader), you can change "
+    "(https://github.com/pandas-dev/pandas-datareader), you can change "
     "the import ``from pandas.io import data, wb`` to "
     "``from pandas_datareader import data, wb``.")
diff --git a/pandas/tests/formats/test_style.py b/pandas/tests/formats/test_style.py
index 3083750e5..2fec04b9c 100644
--- a/pandas/tests/formats/test_style.py
+++ b/pandas/tests/formats/test_style.py
@@ -144,7 +144,7 @@ class TestStyler(TestCase):
         self.assertEqual(result, expected)
 
     def test_empty_index_name_doesnt_display(self):
-        # https://github.com/pydata/pandas/pull/12090#issuecomment-180695902
+        # https://github.com/pandas-dev/pandas/pull/12090#issuecomment-180695902
         df = pd.DataFrame({'A': [1, 2], 'B': [3, 4], 'C': [5, 6]})
         result = df.style._translate()
 
@@ -175,7 +175,7 @@ class TestStyler(TestCase):
         self.assertEqual(result['head'], expected)
 
     def test_index_name(self):
-        # https://github.com/pydata/pandas/issues/11655
+        # https://github.com/pandas-dev/pandas/issues/11655
         df = pd.DataFrame({'A': [1, 2], 'B': [3, 4], 'C': [5, 6]})
         result = df.set_index('A').style._translate()
 
@@ -195,7 +195,7 @@ class TestStyler(TestCase):
         self.assertEqual(result['head'], expected)
 
     def test_multiindex_name(self):
-        # https://github.com/pydata/pandas/issues/11655
+        # https://github.com/pandas-dev/pandas/issues/11655
         df = pd.DataFrame({'A': [1, 2], 'B': [3, 4], 'C': [5, 6]})
         result = df.set_index(['A', 'B']).style._translate()
 
@@ -217,7 +217,7 @@ class TestStyler(TestCase):
         self.assertEqual(result['head'], expected)
 
     def test_numeric_columns(self):
-        # https://github.com/pydata/pandas/issues/12125
+        # https://github.com/pandas-dev/pandas/issues/12125
         # smoke test for _translate
         df = pd.DataFrame({0: [1, 2, 3]})
         df.style._translate()
diff --git a/pandas/tests/indexing/test_categorical.py b/pandas/tests/indexing/test_categorical.py
index 2cb62a60f..9ef2802cb 100644
--- a/pandas/tests/indexing/test_categorical.py
+++ b/pandas/tests/indexing/test_categorical.py
@@ -392,7 +392,7 @@ class TestCategoricalIndex(tm.TestCase):
 
     def test_indexing_with_category(self):
 
-        # https://github.com/pydata/pandas/issues/12564
+        # https://github.com/pandas-dev/pandas/issues/12564
         # consistent result if comparing as Dataframe
 
         cat = DataFrame({'A': ['foo', 'bar', 'baz']})
diff --git a/pandas/tests/plotting/test_boxplot_method.py b/pandas/tests/plotting/test_boxplot_method.py
index 333792c5f..0916693ad 100644
--- a/pandas/tests/plotting/test_boxplot_method.py
+++ b/pandas/tests/plotting/test_boxplot_method.py
@@ -100,7 +100,7 @@ class TestDataFramePlots(TestPlotBase):
 
     @slow
     def test_boxplot_return_type_legacy(self):
-        # API change in https://github.com/pydata/pandas/pull/7096
+        # API change in https://github.com/pandas-dev/pandas/pull/7096
         import matplotlib as mpl  # noqa
 
         df = DataFrame(randn(6, 4),
diff --git a/pandas/tests/plotting/test_frame.py b/pandas/tests/plotting/test_frame.py
index 4d0c1e921..87cf89ebf 100644
--- a/pandas/tests/plotting/test_frame.py
+++ b/pandas/tests/plotting/test_frame.py
@@ -84,7 +84,7 @@ class TestDataFramePlots(TestPlotBase):
         # We have to redo it here because _check_plot_works does two plots,
         # once without an ax kwarg and once with an ax kwarg and the new sharex
         # behaviour does not remove the visibility of the latter axis (as ax is
-        # present).  see: https://github.com/pydata/pandas/issues/9737
+        # present).  see: https://github.com/pandas-dev/pandas/issues/9737
 
         axes = df.plot(subplots=True, title='blah')
         self._check_axes_shape(axes, axes_num=3, layout=(3, 1))
@@ -927,7 +927,7 @@ class TestDataFramePlots(TestPlotBase):
 
         # Ensure that we can pass an np.array straight through to matplotlib,
         # this functionality was accidentally removed previously.
-        # See https://github.com/pydata/pandas/issues/8852 for bug report
+        # See https://github.com/pandas-dev/pandas/issues/8852 for bug report
         #
         # Exercise colormap path and non-colormap path as they are independent
         #
@@ -2115,7 +2115,7 @@ class TestDataFramePlots(TestPlotBase):
             self.assertEqual(result, expected)
             # legend labels
             # NaN's not included in legend with subplots
-            # see https://github.com/pydata/pandas/issues/8390
+            # see https://github.com/pandas-dev/pandas/issues/8390
             self.assertEqual([x.get_text() for x in
                               ax.get_legend().get_texts()],
                              base_expected[:i] + base_expected[i + 1:])
@@ -2336,9 +2336,9 @@ class TestDataFramePlots(TestPlotBase):
 
     @slow
     def test_sharex_and_ax(self):
-        # https://github.com/pydata/pandas/issues/9737 using gridspec, the axis
-        # in fig.get_axis() are sorted differently than pandas expected them,
-        # so make sure that only the right ones are removed
+        # https://github.com/pandas-dev/pandas/issues/9737 using gridspec,
+        # the axis in fig.get_axis() are sorted differently than pandas
+        # expected them, so make sure that only the right ones are removed
         import matplotlib.pyplot as plt
         plt.close('all')
         gs, axes = _generate_4_axes_via_gridspec()
@@ -2388,9 +2388,9 @@ class TestDataFramePlots(TestPlotBase):
 
     @slow
     def test_sharey_and_ax(self):
-        # https://github.com/pydata/pandas/issues/9737 using gridspec, the axis
-        # in fig.get_axis() are sorted differently than pandas expected them,
-        # so make sure that only the right ones are removed
+        # https://github.com/pandas-dev/pandas/issues/9737 using gridspec,
+        # the axis in fig.get_axis() are sorted differently than pandas
+        # expected them, so make sure that only the right ones are removed
         import matplotlib.pyplot as plt
 
         gs, axes = _generate_4_axes_via_gridspec()
diff --git a/pandas/tests/series/test_datetime_values.py b/pandas/tests/series/test_datetime_values.py
index 8f2ab0ed2..ed441f2f8 100644
--- a/pandas/tests/series/test_datetime_values.py
+++ b/pandas/tests/series/test_datetime_values.py
@@ -273,7 +273,7 @@ class TestSeriesDatetimeValues(TestData, tm.TestCase):
             self.assertRaises(com.SettingWithCopyError, f)
 
     def test_dt_accessor_no_new_attributes(self):
-        # https://github.com/pydata/pandas/issues/10673
+        # https://github.com/pandas-dev/pandas/issues/10673
         s = Series(date_range('20130101', periods=5, freq='D'))
         with tm.assertRaisesRegexp(AttributeError,
                                    "You cannot add any new attribute"):
diff --git a/pandas/tests/series/test_operators.py b/pandas/tests/series/test_operators.py
index f688ec2d4..086946d05 100644
--- a/pandas/tests/series/test_operators.py
+++ b/pandas/tests/series/test_operators.py
@@ -1412,7 +1412,7 @@ class TestSeriesOperators(TestData, tm.TestCase):
         # NotImplemented
 
         # this is an alignment issue; these are equivalent
-        # https://github.com/pydata/pandas/issues/5284
+        # https://github.com/pandas-dev/pandas/issues/5284
 
         self.assertRaises(ValueError, lambda: d.__and__(s, axis='columns'))
         self.assertRaises(ValueError, tester, s, d)
diff --git a/pandas/tests/test_algos.py b/pandas/tests/test_algos.py
index 092e02ee2..f89f41abd 100644
--- a/pandas/tests/test_algos.py
+++ b/pandas/tests/test_algos.py
@@ -595,7 +595,7 @@ class TestValueCounts(tm.TestCase):
         tm.assert_series_equal(result, expected, check_index_type=True)
 
     def test_dropna(self):
-        # https://github.com/pydata/pandas/issues/9443#issuecomment-73719328
+        # https://github.com/pandas-dev/pandas/issues/9443#issuecomment-73719328
 
         tm.assert_series_equal(
             pd.Series([True, True, False]).value_counts(dropna=True),
diff --git a/pandas/tests/test_categorical.py b/pandas/tests/test_categorical.py
index a494a0d53..f01fff035 100644
--- a/pandas/tests/test_categorical.py
+++ b/pandas/tests/test_categorical.py
@@ -191,7 +191,7 @@ class TestCategorical(tm.TestCase):
         cat = pd.Categorical([1, 2, 3, np.nan], categories=[1, 2, 3])
         self.assertTrue(is_integer_dtype(cat.categories))
 
-        # https://github.com/pydata/pandas/issues/3678
+        # https://github.com/pandas-dev/pandas/issues/3678
         cat = pd.Categorical([np.nan, 1, 2, 3])
         self.assertTrue(is_integer_dtype(cat.categories))
 
@@ -618,7 +618,7 @@ class TestCategorical(tm.TestCase):
                              index=exp_index)
         tm.assert_frame_equal(desc, expected)
 
-        # https://github.com/pydata/pandas/issues/3678
+        # https://github.com/pandas-dev/pandas/issues/3678
         # describe should work with NaN
         cat = pd.Categorical([np.nan, 1, 2, 2])
         desc = cat.describe()
@@ -1547,7 +1547,7 @@ Categories (3, object): [ああああ, いいいいい, ううううううう]""
         self.assertTrue(abs(diff) < 100)
 
     def test_searchsorted(self):
-        # https://github.com/pydata/pandas/issues/8420
+        # https://github.com/pandas-dev/pandas/issues/8420
         s1 = pd.Series(['apple', 'bread', 'bread', 'cheese', 'milk'])
         s2 = pd.Series(['apple', 'bread', 'bread', 'cheese', 'milk', 'donuts'])
         c1 = pd.Categorical(s1, ordered=True)
@@ -1633,7 +1633,7 @@ Categories (3, object): [ああああ, いいいいい, ううううううう]""
                                       np.array([False, True, True]))
 
     def test_comparison_with_unknown_scalars(self):
-        # https://github.com/pydata/pandas/issues/9836#issuecomment-92123057
+        # https://github.com/pandas-dev/pandas/issues/9836#issuecomment-92123057
         # and following comparisons with scalars not in categories should raise
         # for unequal comps, but not for equal/not equal
         cat = pd.Categorical([1, 2, 3], ordered=True)
@@ -3829,7 +3829,7 @@ Categories (10, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01
 
         self.assertRaises(TypeError, f)
 
-        # https://github.com/pydata/pandas/issues/9836#issuecomment-92123057
+        # https://github.com/pandas-dev/pandas/issues/9836#issuecomment-92123057
         # and following comparisons with scalars not in categories should raise
         # for unequal comps, but not for equal/not equal
         cat = Series(Categorical(list("abc"), ordered=True))
@@ -4303,14 +4303,14 @@ Categories (10, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01
         self.assertFalse(hasattr(invalid, 'cat'))
 
     def test_cat_accessor_no_new_attributes(self):
-        # https://github.com/pydata/pandas/issues/10673
+        # https://github.com/pandas-dev/pandas/issues/10673
         c = Series(list('aabbcde')).astype('category')
         with tm.assertRaisesRegexp(AttributeError,
                                    "You cannot add any new attribute"):
             c.cat.xlabel = "a"
 
     def test_str_accessor_api_for_categorical(self):
-        # https://github.com/pydata/pandas/issues/10661
+        # https://github.com/pandas-dev/pandas/issues/10661
         from pandas.core.strings import StringMethods
         s = Series(list('aabb'))
         s = s + " " + s
@@ -4385,7 +4385,7 @@ Categories (10, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01
         self.assertFalse(hasattr(invalid, 'str'))
 
     def test_dt_accessor_api_for_categorical(self):
-        # https://github.com/pydata/pandas/issues/10661
+        # https://github.com/pandas-dev/pandas/issues/10661
         from pandas.tseries.common import Properties
         from pandas.tseries.index import date_range, DatetimeIndex
         from pandas.tseries.period import period_range, PeriodIndex
diff --git a/pandas/tests/test_config.py b/pandas/tests/test_config.py
index 62ad4c5aa..ea226851c 100644
--- a/pandas/tests/test_config.py
+++ b/pandas/tests/test_config.py
@@ -427,7 +427,7 @@ class TestConfig(unittest.TestCase):
     def test_option_context_scope(self):
         # Ensure that creating a context does not affect the existing
         # environment as it is supposed to be used with the `with` statement.
-        # See https://github.com/pydata/pandas/issues/8514
+        # See https://github.com/pandas-dev/pandas/issues/8514
 
         original_value = 60
         context_value = 10
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 01c1d48c6..02917ab18 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -6443,7 +6443,7 @@ class TestGroupBy(tm.TestCase):
 
     def test_groupby_categorical_two_columns(self):
 
-        # https://github.com/pydata/pandas/issues/8138
+        # https://github.com/pandas-dev/pandas/issues/8138
         d = {'cat':
              pd.Categorical(["a", "b", "a", "b"], categories=["a", "b", "c"],
                             ordered=True),
diff --git a/pandas/tests/test_strings.py b/pandas/tests/test_strings.py
index 4019bbe20..9a3505c34 100644
--- a/pandas/tests/test_strings.py
+++ b/pandas/tests/test_strings.py
@@ -2604,7 +2604,7 @@ class TestStringMethods(tm.TestCase):
         self.assertEqual(str_multiple.loc[1], '2011 2 2')
 
     def test_str_cat_raises_intuitive_error(self):
-        # https://github.com/pydata/pandas/issues/11334
+        # https://github.com/pandas-dev/pandas/issues/11334
         s = Series(['a', 'b', 'c', 'd'])
         message = "Did you mean to supply a `sep` keyword?"
         with tm.assertRaisesRegexp(ValueError, message):
@@ -2661,7 +2661,7 @@ class TestStringMethods(tm.TestCase):
             idx.str
 
     def test_str_accessor_no_new_attributes(self):
-        # https://github.com/pydata/pandas/issues/10673
+        # https://github.com/pandas-dev/pandas/issues/10673
         s = Series(list('aabbcde'))
         with tm.assertRaisesRegexp(AttributeError,
                                    "You cannot add any new attribute"):
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 7fd0b1044..d46dc4d35 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -722,7 +722,7 @@ def parallel_coordinates(frame, class_column, cols=None, ax=None, color=None,
     >>> from pandas import read_csv
     >>> from pandas.tools.plotting import parallel_coordinates
     >>> from matplotlib import pyplot as plt
-    >>> df = read_csv('https://raw.github.com/pydata/pandas/master'
+    >>> df = read_csv('https://raw.github.com/pandas-dev/pandas/master'
                       '/pandas/tests/data/iris.csv')
     >>> parallel_coordinates(df, 'Name', color=('#556270',
                              '#4ECDC4', '#C7F464'))
@@ -2773,7 +2773,7 @@ def boxplot(data, column=None, by=None, ax=None, fontsize=None,
 
     if by is not None:
         # Prefer array return type for 2-D plots to match the subplot layout
-        # https://github.com/pydata/pandas/pull/12216#issuecomment-241175580
+        # https://github.com/pandas-dev/pandas/pull/12216#issuecomment-241175580
         result = _grouped_plot_by_column(plot_group, data, columns=columns,
                                          by=by, grid=grid, figsize=figsize,
                                          ax=ax, layout=layout,
diff --git a/pandas/tseries/resample.py b/pandas/tseries/resample.py
index f1a209053..d02c403cb 100644
--- a/pandas/tseries/resample.py
+++ b/pandas/tseries/resample.py
@@ -1281,7 +1281,7 @@ def _adjust_dates_anchored(first, last, offset, closed='right', base=0):
     # error cause by resampling across multiple days when a one day period is
     # not a multiple of the frequency.
     #
-    # See https://github.com/pydata/pandas/issues/8683
+    # See https://github.com/pandas-dev/pandas/issues/8683
 
     first_tzinfo = first.tzinfo
     first = first.tz_localize(None)
diff --git a/pandas/tseries/tests/test_offsets.py b/pandas/tseries/tests/test_offsets.py
index b3da62c8d..1735ac4e2 100644
--- a/pandas/tseries/tests/test_offsets.py
+++ b/pandas/tseries/tests/test_offsets.py
@@ -4606,7 +4606,7 @@ class TestParseTimeString(tm.TestCase):
         self.assertEqual(reso, reso_lower)
 
     def test_parse_time_quarter_w_dash(self):
-        # https://github.com/pydata/pandas/issue/9688
+        # https://github.com/pandas-dev/pandas/issue/9688
         pairs = [('1988-Q2', '1988Q2'), ('2Q-1988', '2Q1988'), ]
 
         for dashed, normal in pairs:
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 204808dd5..9d3d27f32 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -1678,7 +1678,7 @@ class TestDatetimeIndex(Base, tm.TestCase):
         # start date gets used to determine the offset.  Fixes issue where
         # a one day period is not a multiple of the frequency.
         #
-        # See: https://github.com/pydata/pandas/issues/8683
+        # See: https://github.com/pandas-dev/pandas/issues/8683
 
         index = pd.date_range(
             '2014-10-14 23:06:23.206', periods=3, freq='400L'
diff --git a/pandas/tseries/tests/test_timezones.py b/pandas/tseries/tests/test_timezones.py
index c7e4f03fc..00e8ee631 100644
--- a/pandas/tseries/tests/test_timezones.py
+++ b/pandas/tseries/tests/test_timezones.py
@@ -942,7 +942,7 @@ class TestTimeZoneSupportDateutil(TestTimeZoneSupportPytz):
 
     def test_tz_convert_hour_overflow_dst(self):
         # Regression test for:
-        # https://github.com/pydata/pandas/issues/13306
+        # https://github.com/pandas-dev/pandas/issues/13306
 
         # sorted case US/Eastern -> UTC
         ts = ['2008-05-12 09:50:00',
@@ -982,7 +982,7 @@ class TestTimeZoneSupportDateutil(TestTimeZoneSupportPytz):
 
     def test_tz_convert_hour_overflow_dst_timestamps(self):
         # Regression test for:
-        # https://github.com/pydata/pandas/issues/13306
+        # https://github.com/pandas-dev/pandas/issues/13306
 
         tz = self.tzstr('US/Eastern')
 
@@ -1024,7 +1024,7 @@ class TestTimeZoneSupportDateutil(TestTimeZoneSupportPytz):
 
     def test_tslib_tz_convert_trans_pos_plus_1__bug(self):
         # Regression test for tslib.tz_convert(vals, tz1, tz2).
-        # See https://github.com/pydata/pandas/issues/4496 for details.
+        # See https://github.com/pandas-dev/pandas/issues/4496 for details.
         for freq, n in [('H', 1), ('T', 60), ('S', 3600)]:
             idx = date_range(datetime(2011, 3, 26, 23),
                              datetime(2011, 3, 27, 1), freq=freq)
diff --git a/scripts/find_undoc_args.py b/scripts/find_undoc_args.py
index f00273bc7..49273bacc 100755
--- a/scripts/find_undoc_args.py
+++ b/scripts/find_undoc_args.py
@@ -19,7 +19,7 @@ parser.add_argument('-p', '--path', metavar='PATH', type=str, required=False,
 parser.add_argument('-m', '--module', metavar='MODULE', type=str,required=True,
                    help='name of package to import and examine',action='store')
 parser.add_argument('-G', '--github_repo', metavar='REPO', type=str,required=False,
-                   help='github project where the the code lives, e.g. "pydata/pandas"',
+                   help='github project where the the code lives, e.g. "pandas-dev/pandas"',
                    default=None,action='store')
 
 args = parser.parse_args()
diff --git a/scripts/gen_release_notes.py b/scripts/gen_release_notes.py
index 02ba4f57c..7e4ffca59 100644
--- a/scripts/gen_release_notes.py
+++ b/scripts/gen_release_notes.py
@@ -46,7 +46,7 @@ def get_issues():
 
 
 def _get_page(page_number):
-    gh_url = ('https://api.github.com/repos/pydata/pandas/issues?'
+    gh_url = ('https://api.github.com/repos/pandas-dev/pandas/issues?'
               'milestone=*&state=closed&assignee=*&page=%d') % page_number
     with urlopen(gh_url) as resp:
         rs = resp.readlines()[0]
diff --git a/scripts/touchup_gh_issues.py b/scripts/touchup_gh_issues.py
index 96ee220f5..8aa6d4261 100755
--- a/scripts/touchup_gh_issues.py
+++ b/scripts/touchup_gh_issues.py
@@ -14,7 +14,7 @@ section header
 
 pat = "((?:\s*GH\s*)?)#(\d{3,4})([^_]|$)?"
 rep_pat = r"\1GH\2_\3"
-anchor_pat = ".. _GH{id}: https://github.com/pydata/pandas/issues/{id}"
+anchor_pat = ".. _GH{id}: https://github.com/pandas-dev/pandas/issues/{id}"
 section_pat = "^pandas\s[\d\.]+\s*$"
 
 
diff --git a/vb_suite/perf_HEAD.py b/vb_suite/perf_HEAD.py
index c14a1795f..143d943b9 100755
--- a/vb_suite/perf_HEAD.py
+++ b/vb_suite/perf_HEAD.py
@@ -192,7 +192,7 @@ def get_build_results(build):
     return convert_json_to_df(r_url)
 
 
-def get_all_results(repo_id=53976):  # travis pydata/pandas id
+def get_all_results(repo_id=53976):  # travis pandas-dev/pandas id
     """Fetches the VBENCH results for all travis builds, and returns a list of result df
 
    unsuccesful individual vbenches are dropped.
diff --git a/vb_suite/suite.py b/vb_suite/suite.py
index 70a6278c0..45053b661 100644
--- a/vb_suite/suite.py
+++ b/vb_suite/suite.py
@@ -67,7 +67,7 @@ try:
     TMP_DIR = config.get('setup', 'tmp_dir')
 except:
     REPO_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "../"))
-    REPO_URL = 'git@github.com:pydata/pandas.git'
+    REPO_URL = 'git@github.com:pandas-dev/pandas.git'
     DB_PATH = os.path.join(REPO_PATH, 'vb_suite/benchmarks.db')
     TMP_DIR = os.path.join(HOME, 'tmp/vb_pandas')
 
@@ -138,7 +138,7 @@ These historical benchmark graphs were produced with `vbench
 
 The ``.pandas_vb_common`` setup script can be found here_
 
-.. _here: https://github.com/pydata/pandas/tree/master/vb_suite
+.. _here: https://github.com/pandas-dev/pandas/tree/master/vb_suite
 
 Produced on a machine with
 
