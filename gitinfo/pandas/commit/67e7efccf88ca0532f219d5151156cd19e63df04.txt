commit 67e7efccf88ca0532f219d5151156cd19e63df04
Author: Tom Augspurger <TomAugspurger@users.noreply.github.com>
Date:   Wed May 3 13:23:28 2017 -0500

    API Change repr name for table schema (#16204)
    
    * API Change repr name for table schema
    
    Not API breaking, since pandas 0.20.0 hasn't been released yet.
    
    * REF: Move Formatter to printing
    
    * pep8

diff --git a/pandas/core/config_init.py b/pandas/core/config_init.py
index 81fb8090a..7e6ffaaff 100644
--- a/pandas/core/config_init.py
+++ b/pandas/core/config_init.py
@@ -9,7 +9,6 @@ If you need to make sure options are available even before a certain
 module is imported, register them here rather then in the module.
 
 """
-import sys
 import warnings
 
 import pandas.core.config as cf
@@ -342,36 +341,8 @@ def mpl_style_cb(key):
 
 
 def table_schema_cb(key):
-    # first, check if we are in IPython
-    if 'IPython' not in sys.modules:
-        # definitely not in IPython
-        return
-    from IPython import get_ipython
-    ip = get_ipython()
-    if ip is None:
-        # still not in IPython
-        return
-
-    formatters = ip.display_formatter.formatters
-
-    mimetype = "application/vnd.dataresource+json"
-
-    if cf.get_option(key):
-        if mimetype not in formatters:
-            # define tableschema formatter
-            from IPython.core.formatters import BaseFormatter
-
-            class TableSchemaFormatter(BaseFormatter):
-                print_method = '_repr_table_schema_'
-                _return_type = (dict,)
-            # register it:
-            formatters[mimetype] = TableSchemaFormatter()
-        # enable it if it's been disabled:
-        formatters[mimetype].enabled = True
-    else:
-        # unregister tableschema mime-type
-        if mimetype in formatters:
-            formatters[mimetype].enabled = False
+    from pandas.io.formats.printing import _enable_data_resource_formatter
+    _enable_data_resource_formatter(cf.get_option(key))
 
 
 with cf.config_prefix('display'):
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index b3498583f..2bc64795b 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -129,7 +129,7 @@ class NDFrame(PandasObject, SelectionMixin):
         object.__setattr__(self, '_data', data)
         object.__setattr__(self, '_item_cache', {})
 
-    def _repr_table_schema_(self):
+    def _repr_data_resource_(self):
         """
         Not a real Jupyter special repr method, but we use the same
         naming convention.
diff --git a/pandas/io/formats/printing.py b/pandas/io/formats/printing.py
index 5ea47df2c..cbad60363 100644
--- a/pandas/io/formats/printing.py
+++ b/pandas/io/formats/printing.py
@@ -2,6 +2,7 @@
 printing tools
 """
 
+import sys
 from pandas.core.dtypes.inference import is_sequence
 from pandas import compat
 from pandas.compat import u
@@ -233,3 +234,34 @@ def pprint_thing(thing, _nest_lvl=0, escape_chars=None, default_escapes=False,
 def pprint_thing_encoded(object, encoding='utf-8', errors='replace', **kwds):
     value = pprint_thing(object)  # get unicode representation of object
     return value.encode(encoding, errors, **kwds)
+
+
+def _enable_data_resource_formatter(enable):
+    if 'IPython' not in sys.modules:
+        # definitely not in IPython
+        return
+    from IPython import get_ipython
+    ip = get_ipython()
+    if ip is None:
+        # still not in IPython
+        return
+
+    formatters = ip.display_formatter.formatters
+    mimetype = "application/vnd.dataresource+json"
+
+    if enable:
+        if mimetype not in formatters:
+            # define tableschema formatter
+            from IPython.core.formatters import BaseFormatter
+
+            class TableSchemaFormatter(BaseFormatter):
+                print_method = '_repr_data_resource_'
+                _return_type = (dict,)
+            # register it:
+            formatters[mimetype] = TableSchemaFormatter()
+        # enable it if it's been disabled:
+        formatters[mimetype].enabled = True
+    else:
+        # unregister tableschema mime-type
+        if mimetype in formatters:
+            formatters[mimetype].enabled = False
diff --git a/pandas/tests/io/formats/test_printing.py b/pandas/tests/io/formats/test_printing.py
index 3acd5c7a5..44fbd5a95 100644
--- a/pandas/tests/io/formats/test_printing.py
+++ b/pandas/tests/io/formats/test_printing.py
@@ -180,23 +180,19 @@ class TestTableSchemaRepr(tm.TestCase):
     def test_config_on(self):
         df = pd.DataFrame({"A": [1, 2]})
         with pd.option_context("display.html.table_schema", True):
-            result = df._repr_table_schema_()
+            result = df._repr_data_resource_()
 
         assert result is not None
 
     def test_config_default_off(self):
         df = pd.DataFrame({"A": [1, 2]})
         with pd.option_context("display.html.table_schema", False):
-            result = df._repr_table_schema_()
+            result = df._repr_data_resource_()
 
         assert result is None
 
-    def test_config_monkeypatches(self):
+    def test_enable_data_resource_formatter(self):
         # GH 10491
-        df = pd.DataFrame({"A": [1, 2]})
-        assert not hasattr(df, '_ipython_display_')
-        assert not hasattr(df['A'], '_ipython_display_')
-
         formatters = self.display_formatter.formatters
         mimetype = 'application/vnd.dataresource+json'
 
