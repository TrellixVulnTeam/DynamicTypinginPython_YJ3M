commit 546920e002b5d773112249a8200e5ae62b9c15b2
Author: Chang She <changshe@gmail.com>
Date:   Tue Sep 18 15:46:55 2012 -0400

    BUG: apply non-uq with tests #1878

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 501b6ead3..5a793e271 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -3751,7 +3751,9 @@ class DataFrame(NDFrame):
         elif axis == 1:
             res_index = self.index
             res_columns = self.columns
-            series_gen = (self.irow(i) for i in range(len(self.index)))
+            series_gen = (Series(self.values[i], index=res_columns,
+                                 name=res_index[i])
+                                 for i in range(len(res_index)))
 
         keys = []
         results = {}
@@ -3789,7 +3791,8 @@ class DataFrame(NDFrame):
                 index = None
 
             result = self._constructor(data=results, index=index)
-            result._set_columns(res_index)
+            result.rename(columns=dict(zip(range(len(res_index)), res_index)),
+                                       inplace=True)
 
             if axis == 1:
                 result = result.T
diff --git a/pandas/sparse/tests/test_sparse.py b/pandas/sparse/tests/test_sparse.py
index fd2eace9e..c3df935d7 100644
--- a/pandas/sparse/tests/test_sparse.py
+++ b/pandas/sparse/tests/test_sparse.py
@@ -1057,6 +1057,19 @@ class TestSparseDataFrame(TestCase, test_frame.SafeForSparse):
 
         self.assert_(self.empty.apply(np.sqrt) is self.empty)
 
+    def test_apply_nonuq(self):
+        df_orig = DataFrame([[1,2,3], [4,5,6], [7,8,9]], index=['a','a','c'])
+        df = df_orig.to_sparse()
+        rs = df.apply(lambda s: s[0], axis=1)
+        xp = Series([1., 4., 7.], ['a', 'a', 'c'])
+        assert_series_equal(rs, xp)
+
+        #df.T breaks
+        df = df_orig.T.to_sparse()
+        rs = df.apply(lambda s: s[0], axis=0)
+        #no non-unique columns supported in sparse yet
+        #assert_series_equal(rs, xp)
+
     def test_applymap(self):
         # just test that it works
         result = self.frame.applymap(lambda x: x * 2)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 12fd35eca..9f8179c5c 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -5134,6 +5134,15 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = Series(np.nan, index=self.frame.index)
         assert_series_equal(result, expected)
 
+    def test_apply_standard_nonunique(self):
+        df = DataFrame([[1,2,3], [4,5,6], [7,8,9]], index=['a','a','c'])
+        rs = df.apply(lambda s: s[0], axis=1)
+        xp = Series([1, 4, 7], ['a', 'a', 'c'])
+        assert_series_equal(rs, xp)
+
+        rs = df.T.apply(lambda s: s[0], axis=0)
+        assert_series_equal(rs, xp)
+
     def test_apply_broadcast(self):
         broadcasted = self.frame.apply(np.mean, broadcast=True)
         agged = self.frame.apply(np.mean)
