commit 631e0ba4935064534cdfa56dbf7476d767b5f916
Author: jreback <jeff@reback.net>
Date:   Wed Sep 17 18:19:17 2014 -0400

    TST: windows test fixes for 2.6 / older mpl

diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index fffb4f279..7ee532d7b 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -910,6 +910,7 @@ class TestDataFramePlots(TestPlotBase):
         mpl.rcdefaults()
 
         self.mpl_le_1_2_1 = str(mpl.__version__) <= LooseVersion('1.2.1')
+        self.mpl_ge_1_3_1 = str(mpl.__version__) >= LooseVersion('1.3.1')
 
         self.tdf = tm.makeTimeDataFrame()
         self.hexbin_df = DataFrame({"A": np.random.uniform(size=20),
@@ -1531,9 +1532,12 @@ class TestDataFramePlots(TestPlotBase):
         for ax in axes:
             # default to RdBu
             self.assertEqual(ax.collections[0].cmap.name, 'RdBu')
-            # n.b. there appears to be no public method to get the colorbar
-            # label
-            self.assertEqual(ax.collections[0].colorbar._label, 'z')
+
+            if self.mpl_ge_1_3_1:
+
+                # n.b. there appears to be no public method to get the colorbar
+                # label
+                self.assertEqual(ax.collections[0].colorbar._label, 'z')
 
         cm = 'cubehelix'
         ax = df.plot(kind='scatter', x='x', y='y', c='z', colormap=cm)
@@ -1893,7 +1897,7 @@ class TestDataFramePlots(TestPlotBase):
 
         def _check_ax_limits(col, ax):
             y_min, y_max = ax.get_ylim()
-            self.assertLessEqual(y_min, col.min())
+            self.assertTrue(y_min <= col.min())
             self.assertGreaterEqual(y_max, col.max())
 
         df = self.hist_df.copy()
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 0c150074a..fad97045e 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -1392,6 +1392,9 @@ class ScatterPlot(MPLPlot):
         return 1
 
     def _make_plot(self):
+        import matplotlib as mpl
+        mpl_ge_1_3_1 = str(mpl.__version__) >= LooseVersion('1.3.1')
+
         import matplotlib.pyplot as plt
 
         x, y, c, data = self.x, self.y, self.c, self.data
@@ -1419,8 +1422,10 @@ class ScatterPlot(MPLPlot):
                              label=label, cmap=cmap, **self.kwds)
         if cb:
             img = ax.collections[0]
-            cb_label = c if c in self.data.columns else ''
-            self.fig.colorbar(img, ax=ax, label=cb_label)
+            kws = dict(ax=ax)
+            if mpl_ge_1_3_1:
+                kws['label'] = c if c in self.data.columns else ''
+            self.fig.colorbar(img, **kws)
 
         self._add_legend_handle(scatter, label)
 
