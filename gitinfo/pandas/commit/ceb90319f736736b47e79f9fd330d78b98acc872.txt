commit ceb90319f736736b47e79f9fd330d78b98acc872
Author: Jaume Bonet <jaume.bonet@gmail.com>
Date:   Tue Feb 27 02:15:31 2018 +0100

    CLN: Remove Series._from_array (#19893)

diff --git a/pandas/core/dtypes/concat.py b/pandas/core/dtypes/concat.py
index d306d0d78..0501493e7 100644
--- a/pandas/core/dtypes/concat.py
+++ b/pandas/core/dtypes/concat.py
@@ -101,6 +101,27 @@ def _get_frame_result_type(result, objs):
                                                           ABCSparseDataFrame))
 
 
+def _get_sliced_frame_result_type(data, obj):
+    """
+    return appropriate class of Series. When data is sparse
+    it will return a SparseSeries, otherwise it will return
+    the Series.
+
+    Parameters
+    ----------
+    data : array-like
+    obj : DataFrame
+
+    Returns
+    -------
+    Series or SparseSeries
+    """
+    if is_sparse(data):
+        from pandas.core.sparse.api import SparseSeries
+        return SparseSeries
+    return obj._constructor_sliced
+
+
 def _concat_compat(to_concat, axis=0):
     """
     provide concatenation of an array of arrays each of which is a single
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index e4ef1b978..1f26a3673 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -60,6 +60,7 @@ from pandas.core.dtypes.common import (
     is_iterator,
     is_sequence,
     is_named_tuple)
+from pandas.core.dtypes.concat import _get_sliced_frame_result_type
 from pandas.core.dtypes.missing import isna, notna
 
 
@@ -2166,8 +2167,7 @@ class DataFrame(NDFrame):
 
                 if index_len and not len(values):
                     values = np.array([np.nan] * index_len, dtype=object)
-                result = self._constructor_sliced._from_array(
-                    values, index=self.index, name=label, fastpath=True)
+                result = self._box_col_values(values, label)
 
                 # this is a cached value, mark it so
                 result._set_as_cached(label, self)
@@ -2563,8 +2563,8 @@ class DataFrame(NDFrame):
 
     def _box_col_values(self, values, items):
         """ provide boxed values for a column """
-        return self._constructor_sliced._from_array(values, index=self.index,
-                                                    name=items, fastpath=True)
+        klass = _get_sliced_frame_result_type(values, self)
+        return klass(values, index=self.index, name=items, fastpath=True)
 
     def __setitem__(self, key, value):
         key = com._apply_if_callable(key, self)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 8053651a4..6822f1f6b 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -316,25 +316,11 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         warnings.warn("'from_array' is deprecated and will be removed in a "
                       "future version. Please use the pd.Series(..) "
                       "constructor instead.", FutureWarning, stacklevel=2)
-        return cls._from_array(arr, index=index, name=name, dtype=dtype,
-                               copy=copy, fastpath=fastpath)
-
-    @classmethod
-    def _from_array(cls, arr, index=None, name=None, dtype=None, copy=False,
-                    fastpath=False):
-        """
-        Internal method used in DataFrame.__setitem__/__getitem__.
-        Difference with Series(..) is that this method checks if a sparse
-        array is passed.
-
-        """
-        # return a sparse series here
         if isinstance(arr, ABCSparseArray):
             from pandas.core.sparse.series import SparseSeries
             cls = SparseSeries
-
-        return cls(arr, index=index, name=name, dtype=dtype, copy=copy,
-                   fastpath=fastpath)
+        return cls(arr, index=index, name=name, dtype=dtype,
+                   copy=copy, fastpath=fastpath)
 
     @property
     def _constructor(self):
diff --git a/pandas/core/sparse/series.py b/pandas/core/sparse/series.py
index 7a1496bf1..f8b98a1a4 100644
--- a/pandas/core/sparse/series.py
+++ b/pandas/core/sparse/series.py
@@ -216,12 +216,6 @@ class SparseSeries(Series):
         warnings.warn("'from_array' is deprecated and will be removed in a "
                       "future version. Please use the pd.SparseSeries(..) "
                       "constructor instead.", FutureWarning, stacklevel=2)
-        return cls._from_array(arr, index=index, name=name, copy=copy,
-                               fill_value=fill_value, fastpath=fastpath)
-
-    @classmethod
-    def _from_array(cls, arr, index=None, name=None, copy=False,
-                    fill_value=None, fastpath=False):
         return cls(arr, index=index, name=name, copy=copy,
                    fill_value=fill_value, fastpath=fastpath)
 
