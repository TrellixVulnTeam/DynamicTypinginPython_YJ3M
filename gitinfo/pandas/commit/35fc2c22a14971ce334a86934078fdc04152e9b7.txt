commit 35fc2c22a14971ce334a86934078fdc04152e9b7
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Nov 7 16:11:59 2011 -0500

    BUG: could not pass SparseSeries to DataFrame constructor

diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index ef00edbac..7605f7b4e 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -878,8 +878,18 @@ def _simple_blockify(dct, ref_items, dtype):
     return make_block(values, block_items, ref_items, do_integrity_check=True)
 
 def _stack_dict(dct, ref_items):
+    from pandas.core.series import Series
+
+    # fml
+    def _asarray_compat(x):
+        # asarray shouldn't be called on SparseSeries
+        if isinstance(x, Series):
+            return x.values
+        else:
+            return np.asarray(x)
+
     items = [x for x in ref_items if x in dct]
-    stacked = np.vstack([np.asarray(dct[k]) for k in items])
+    stacked = np.vstack([_asarray_compat(dct[k]) for k in items])
     return items, stacked
 
 def _blocks_to_series_dict(blocks, index=None):
diff --git a/pandas/stats/tests/test_ols_filter.py b/pandas/stats/tests/test_ols_filter.py
deleted file mode 100644
index 1624ddc47..000000000
--- a/pandas/stats/tests/test_ols_filter.py
+++ /dev/null
@@ -1,84 +0,0 @@
-from datetime import datetime
-import unittest
-
-from numpy import NaN
-import numpy as np
-
-from pandas.core.datetools import bday
-from pandas.core.api import DateRange, Series, DataFrame
-from pandas.stats.ols import _filter_data
-
-class TestOLSFilter(unittest.TestCase):
-
-    def setUp(self):
-        date_index = DateRange(datetime(2009, 12, 11), periods=3, offset=bday)
-        ts = Series([3, 1, 4], index=date_index)
-        self.TS1 = ts
-
-        date_index = DateRange(datetime(2009, 12, 11), periods=5, offset=bday)
-        ts = Series([1, 5, 9, 2, 6], index=date_index)
-        self.TS2 = ts
-
-        date_index = DateRange(datetime(2009, 12, 11), periods=3, offset=bday)
-        ts = Series([5, NaN, 3], index=date_index)
-        self.TS3 = ts
-
-        date_index = DateRange(datetime(2009, 12, 11), periods=5, offset=bday)
-        ts = Series([NaN, 5, 8, 9, 7], index=date_index)
-        self.TS4 = ts
-
-        data = {'x1' : self.TS2, 'x2' : self.TS4}
-        self.DF1 = DataFrame(data=data)
-
-        data = {'x1' : self.TS2, 'x2' : self.TS4}
-        self.DICT1 = data
-
-    def testFilterWithSeriesRHS(self):
-        (lhs, rhs, weights, rhs_pre,
-        index, valid) = _filter_data(self.TS1, {'x1' : self.TS2}, None)
-        self.tsAssertEqual(self.TS1, lhs)
-        self.tsAssertEqual(self.TS2[:3], rhs['x1'])
-        self.tsAssertEqual(self.TS2, rhs_pre['x1'])
-
-    def testFilterWithSeriesRHS2(self):
-        (lhs, rhs, weights, rhs_pre,
-        index, valid) = _filter_data(self.TS2, {'x1' : self.TS1}, None)
-        self.tsAssertEqual(self.TS2[:3], lhs)
-        self.tsAssertEqual(self.TS1, rhs['x1'])
-        self.tsAssertEqual(self.TS1, rhs_pre['x1'])
-
-    def testFilterWithSeriesRHS3(self):
-        (lhs, rhs, weights, rhs_pre,
-        index, valid) = _filter_data(self.TS3, {'x1' : self.TS4}, None)
-        exp_lhs = self.TS3[2:3]
-        exp_rhs = self.TS4[2:3]
-        exp_rhs_pre = self.TS4[1:]
-        self.tsAssertEqual(exp_lhs, lhs)
-        self.tsAssertEqual(exp_rhs, rhs['x1'])
-        self.tsAssertEqual(exp_rhs_pre, rhs_pre['x1'])
-
-    def testFilterWithDataFrameRHS(self):
-        (lhs, rhs, weights, rhs_pre,
-        index, valid) = _filter_data(self.TS1, self.DF1, None)
-        exp_lhs = self.TS1[1:]
-        exp_rhs1 = self.TS2[1:3]
-        exp_rhs2 = self.TS4[1:3]
-        self.tsAssertEqual(exp_lhs, lhs)
-        self.tsAssertEqual(exp_rhs1, rhs['x1'])
-        self.tsAssertEqual(exp_rhs2, rhs['x2'])
-
-    def testFilterWithDictRHS(self):
-        (lhs, rhs, weights, rhs_pre,
-        index, valid) = _filter_data(self.TS1, self.DICT1, None)
-        exp_lhs = self.TS1[1:]
-        exp_rhs1 = self.TS2[1:3]
-        exp_rhs2 = self.TS4[1:3]
-        self.tsAssertEqual(exp_lhs, lhs)
-        self.tsAssertEqual(exp_rhs1, rhs['x1'])
-        self.tsAssertEqual(exp_rhs2, rhs['x2'])
-
-    def tsAssertEqual(self, ts1, ts2):
-        self.assert_(np.array_equal(ts1, ts2))
-
-if __name__ == '__main__':
-    unittest.main()
diff --git a/pandas/tests/test_sparse.py b/pandas/tests/test_sparse.py
index a361dc70e..6c0836943 100644
--- a/pandas/tests/test_sparse.py
+++ b/pandas/tests/test_sparse.py
@@ -135,6 +135,10 @@ class TestSparseSeries(TestCase,
         self.ziseries2 = SparseSeries(arr, index=index, kind='integer',
                                       fill_value=0)
 
+    def test_construct_DataFrame_with_sp_series(self):
+        # it works!
+        df = DataFrame({'col' : self.bseries})
+
     def test_sparse_to_dense(self):
         arr, index = _test_data1()
         series = self.bseries.to_dense()
