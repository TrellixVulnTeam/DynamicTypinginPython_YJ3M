commit e0bd3945ad5261bf32527729cfebd92355a684fe
Author: Joel Nothman <joel.nothman@gmail.com>
Date:   Tue Jan 21 06:52:08 2020 +1100

    ENH Avoid redundant CSS in Styler.render (#30876)

diff --git a/doc/source/whatsnew/v1.1.0.rst b/doc/source/whatsnew/v1.1.0.rst
index 294183e24..01c089b46 100644
--- a/doc/source/whatsnew/v1.1.0.rst
+++ b/doc/source/whatsnew/v1.1.0.rst
@@ -18,6 +18,7 @@ Enhancements
 Other enhancements
 ^^^^^^^^^^^^^^^^^^
 
+- :class:`Styler` may now render CSS more efficiently where multiple cells have the same styling (:issue:`30876`)
 -
 -
 
diff --git a/pandas/io/formats/style.py b/pandas/io/formats/style.py
index 4f2430b6c..565752e26 100644
--- a/pandas/io/formats/style.py
+++ b/pandas/io/formats/style.py
@@ -286,7 +286,7 @@ class Styler:
             clabels = [[x] for x in clabels]
         clabels = list(zip(*clabels))
 
-        cellstyle = []
+        cellstyle_map = defaultdict(list)
         head = []
 
         for r in range(n_clvls):
@@ -408,12 +408,17 @@ class Styler:
                 for x in ctx[r, c]:
                     # have to handle empty styles like ['']
                     if x.count(":"):
-                        props.append(x.split(":"))
+                        props.append(tuple(x.split(":")))
                     else:
-                        props.append(["", ""])
-                cellstyle.append({"props": props, "selector": f"row{r}_col{c}"})
+                        props.append(("", ""))
+                cellstyle_map[tuple(props)].append(f"row{r}_col{c}")
             body.append(row_es)
 
+        cellstyle = [
+            {"props": list(props), "selectors": selectors}
+            for props, selectors in cellstyle_map.items()
+        ]
+
         table_attr = self.table_attributes
         use_mathjax = get_option("display.html.use_mathjax")
         if not use_mathjax:
diff --git a/pandas/io/formats/templates/html.tpl b/pandas/io/formats/templates/html.tpl
index 15feafcea..97bfda9af 100644
--- a/pandas/io/formats/templates/html.tpl
+++ b/pandas/io/formats/templates/html.tpl
@@ -14,7 +14,7 @@
 {% block before_cellstyle %}{% endblock before_cellstyle %}
 {% block cellstyle %}
 {%- for s in cellstyle %}
-    #T_{{uuid}}{{s.selector}} {
+    {%- for selector in s.selectors -%}{%- if not loop.first -%},{%- endif -%}#T_{{uuid}}{{selector}}{%- endfor -%} {
     {% for p,val in s.props %}
         {{p}}: {{val}};
     {% endfor %}
diff --git a/pandas/tests/io/formats/test_style.py b/pandas/tests/io/formats/test_style.py
index e5dac18ac..a2659079b 100644
--- a/pandas/tests/io/formats/test_style.py
+++ b/pandas/tests/io/formats/test_style.py
@@ -472,8 +472,19 @@ class TestStyler:
 
         result = s._translate()["cellstyle"]
         expected = [
-            {"props": [["color", " red"]], "selector": "row0_col0"},
-            {"props": [["", ""]], "selector": "row1_col0"},
+            {"props": [("color", " red")], "selectors": ["row0_col0"]},
+            {"props": [("", "")], "selectors": ["row1_col0"]},
+        ]
+        assert result == expected
+
+    def test_duplicate(self):
+        df = pd.DataFrame({"A": [1, 0]})
+        s = df.style
+        s.ctx = {(0, 0): ["color: red"], (1, 0): ["color: red"]}
+
+        result = s._translate()["cellstyle"]
+        expected = [
+            {"props": [("color", " red")], "selectors": ["row0_col0", "row1_col0"]}
         ]
         assert result == expected
 
