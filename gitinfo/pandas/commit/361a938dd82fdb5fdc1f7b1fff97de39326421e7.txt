commit 361a938dd82fdb5fdc1f7b1fff97de39326421e7
Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
Date:   Wed Feb 12 13:38:26 2020 +0100

    BUG: fix StringArray/PandasArray setitem with slice (#31773)

diff --git a/doc/source/whatsnew/v1.0.2.rst b/doc/source/whatsnew/v1.0.2.rst
index 8f04032e1..b31f7c116 100644
--- a/doc/source/whatsnew/v1.0.2.rst
+++ b/doc/source/whatsnew/v1.0.2.rst
@@ -36,6 +36,10 @@ Bug fixes
 
 - Using ``pd.NA`` with :meth:`DataFrame.to_json` now correctly outputs a null value instead of an empty object (:issue:`31615`)
 
+**Experimental dtypes**
+
+- Fixed bug in setting values using a slice indexer with string dtype (:issue:`31772`)
+
 .. ---------------------------------------------------------------------------
 
 .. _whatsnew_102.contributors:
diff --git a/pandas/core/arrays/numpy_.py b/pandas/core/arrays/numpy_.py
index e573fe661..0e64967ce 100644
--- a/pandas/core/arrays/numpy_.py
+++ b/pandas/core/arrays/numpy_.py
@@ -263,12 +263,8 @@ class PandasArray(ExtensionArray, ExtensionOpsMixin, NDArrayOperatorsMixin):
         value = extract_array(value, extract_numpy=True)
 
         key = check_array_indexer(self, key)
-        scalar_key = lib.is_scalar(key)
         scalar_value = lib.is_scalar(value)
 
-        if not scalar_key and scalar_value:
-            key = np.asarray(key)
-
         if not scalar_value:
             value = np.asarray(value, dtype=self._ndarray.dtype)
 
diff --git a/pandas/tests/extension/base/setitem.py b/pandas/tests/extension/base/setitem.py
index e0ca603aa..590bcd586 100644
--- a/pandas/tests/extension/base/setitem.py
+++ b/pandas/tests/extension/base/setitem.py
@@ -173,6 +173,29 @@ class BaseSetitemTests(BaseExtensionTests):
         s[(0, 1)] = data[1]
         self.assert_series_equal(s, expected)
 
+    def test_setitem_slice(self, data, box_in_series):
+        arr = data[:5].copy()
+        expected = data.take([0, 0, 0, 3, 4])
+        if box_in_series:
+            arr = pd.Series(arr)
+            expected = pd.Series(expected)
+
+        arr[:3] = data[0]
+        self.assert_equal(arr, expected)
+
+    def test_setitem_loc_iloc_slice(self, data):
+        arr = data[:5].copy()
+        s = pd.Series(arr, index=["a", "b", "c", "d", "e"])
+        expected = pd.Series(data.take([0, 0, 0, 3, 4]), index=s.index)
+
+        result = s.copy()
+        result.iloc[:3] = data[0]
+        self.assert_equal(result, expected)
+
+        result = s.copy()
+        result.loc[:"c"] = data[0]
+        self.assert_equal(result, expected)
+
     def test_setitem_slice_mismatch_length_raises(self, data):
         arr = data[:5]
         with pytest.raises(ValueError):
diff --git a/pandas/tests/extension/test_numpy.py b/pandas/tests/extension/test_numpy.py
index 8a820c874..76573242a 100644
--- a/pandas/tests/extension/test_numpy.py
+++ b/pandas/tests/extension/test_numpy.py
@@ -396,6 +396,14 @@ class TestSetitem(BaseNumPyTests, base.BaseSetitemTests):
         # Failed: DID NOT RAISE <class 'ValueError'>
         super().test_setitem_scalar_key_sequence_raise(data)
 
+    @skip_nested
+    def test_setitem_slice(self, data, box_in_series):
+        super().test_setitem_slice(data, box_in_series)
+
+    @skip_nested
+    def test_setitem_loc_iloc_slice(self, data):
+        super().test_setitem_loc_iloc_slice(data)
+
 
 @skip_nested
 class TestParsing(BaseNumPyTests, base.BaseParsingTests):
