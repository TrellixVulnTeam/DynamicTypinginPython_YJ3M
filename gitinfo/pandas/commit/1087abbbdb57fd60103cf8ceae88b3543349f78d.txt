commit 1087abbbdb57fd60103cf8ceae88b3543349f78d
Author: bwignall <brianwignall@gmail.com>
Date:   Sun Feb 16 12:17:35 2014 -0500

    CLN: Specialize assert_(np.array_equal(...))
    
    Work on #6175. This is the second half of the work started in #6368.

diff --git a/pandas/tests/test_common.py b/pandas/tests/test_common.py
index 2c32b5d03..3b3b2becc 100644
--- a/pandas/tests/test_common.py
+++ b/pandas/tests/test_common.py
@@ -800,7 +800,7 @@ class TestTake(tm.TestCase):
 
         result = com.take_1d(arr, [0, 2, 2, 1])
         expected = arr.take([0, 2, 2, 1])
-        self.assert_(np.array_equal(result, expected))
+        self.assert_numpy_array_equal(result, expected)
 
         result = com.take_1d(arr, [0, 2, -1])
         self.assertEqual(result.dtype, np.object_)
@@ -812,11 +812,11 @@ class TestTake(tm.TestCase):
 
         result = com.take_nd(arr, [0, 2, 2, 1])
         expected = arr.take([0, 2, 2, 1], axis=0)
-        self.assert_(np.array_equal(result, expected))
+        self.assert_numpy_array_equal(result, expected)
 
         result = com.take_nd(arr, [0, 2, 2, 1], axis=1)
         expected = arr.take([0, 2, 2, 1], axis=1)
-        self.assert_(np.array_equal(result, expected))
+        self.assert_numpy_array_equal(result, expected)
 
         result = com.take_nd(arr, [0, 2, -1])
         self.assertEqual(result.dtype, np.object_)
diff --git a/pandas/tests/test_generic.py b/pandas/tests/test_generic.py
index 6c7e455bb..d694efff9 100644
--- a/pandas/tests/test_generic.py
+++ b/pandas/tests/test_generic.py
@@ -447,7 +447,7 @@ class TestSeries(tm.TestCase, Generic):
         ts_copy[5:10] = np.NaN
 
         linear_interp = ts_copy.interpolate(method='linear')
-        self.assert_(np.array_equal(linear_interp, ts))
+        self.assert_numpy_array_equal(linear_interp, ts)
 
         ord_ts = Series([d.toordinal() for d in self.ts.index],
                         index=self.ts.index).astype(float)
@@ -456,7 +456,7 @@ class TestSeries(tm.TestCase, Generic):
         ord_ts_copy[5:10] = np.NaN
 
         time_interp = ord_ts_copy.interpolate(method='time')
-        self.assert_(np.array_equal(time_interp, ord_ts))
+        self.assert_numpy_array_equal(time_interp, ord_ts)
 
         # try time interpolation on a non-TimeSeries
         self.assertRaises(ValueError, self.series.interpolate, method='time')
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index ba06cebd2..fa7a2b2d2 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -1720,7 +1720,7 @@ class TestGroupBy(tm.TestCase):
         result = grouped.apply(len)
         expected = grouped.count()['C']
         self.assert_(result.index.equals(expected.index))
-        self.assert_(np.array_equal(result.values, expected.values))
+        self.assert_numpy_array_equal(result.values, expected.values)
 
     def test_apply_frame_concat_series(self):
         def trans(group):
@@ -2198,17 +2198,17 @@ class TestGroupBy(tm.TestCase):
 
         tm.assert_panel_equal(agged, agged2)
 
-        self.assert_(np.array_equal(agged.items, [0, 1]))
+        self.assert_numpy_array_equal(agged.items, [0, 1])
 
         grouped = self.panel.groupby(lambda x: x.month, axis='major')
         agged = grouped.mean()
 
-        self.assert_(np.array_equal(agged.major_axis, [1, 2]))
+        self.assert_numpy_array_equal(agged.major_axis, [1, 2])
 
         grouped = self.panel.groupby({'A': 0, 'B': 0, 'C': 1, 'D': 1},
                                      axis='minor')
         agged = grouped.mean()
-        self.assert_(np.array_equal(agged.minor_axis, [0, 1]))
+        self.assert_numpy_array_equal(agged.minor_axis, [0, 1])
 
     def test_numpy_groupby(self):
         from pandas.core.groupby import numpy_groupby
@@ -2234,8 +2234,8 @@ class TestGroupBy(tm.TestCase):
         d['label'] = ['l1', 'l2']
         tmp = d.groupby(['group']).mean()
         res_values = np.array([[0., 1.], [0., 1.]])
-        self.assert_(np.array_equal(tmp.columns, ['zeros', 'ones']))
-        self.assert_(np.array_equal(tmp.values, res_values))
+        self.assert_numpy_array_equal(tmp.columns, ['zeros', 'ones'])
+        self.assert_numpy_array_equal(tmp.values, res_values)
 
     def test_int32_overflow(self):
         B = np.concatenate((np.arange(10000), np.arange(10000),
@@ -2290,19 +2290,19 @@ class TestGroupBy(tm.TestCase):
         tups = lmap(tuple, df[['a', 'b', 'c']].values)
         tups = com._asarray_tuplesafe(tups)
         result = df.groupby(['a', 'b', 'c'], sort=True).sum()
-        self.assert_(np.array_equal(result.index.values,
-                                    tups[[1, 2, 0]]))
+        self.assert_numpy_array_equal(result.index.values,
+                                      tups[[1, 2, 0]])
 
         tups = lmap(tuple, df[['c', 'a', 'b']].values)
         tups = com._asarray_tuplesafe(tups)
         result = df.groupby(['c', 'a', 'b'], sort=True).sum()
-        self.assert_(np.array_equal(result.index.values, tups))
+        self.assert_numpy_array_equal(result.index.values, tups)
 
         tups = lmap(tuple, df[['b', 'c', 'a']].values)
         tups = com._asarray_tuplesafe(tups)
         result = df.groupby(['b', 'c', 'a'], sort=True).sum()
-        self.assert_(np.array_equal(result.index.values,
-                                    tups[[2, 1, 0]]))
+        self.assert_numpy_array_equal(result.index.values,
+                                      tups[[2, 1, 0]])
 
         df = DataFrame({'a': [0, 1, 2, 0, 1, 2],
                         'b': [0, 0, 0, 1, 1, 1],
@@ -2452,7 +2452,7 @@ class TestGroupBy(tm.TestCase):
         result = self.df.groupby('A')['C'].agg(funcs)
         exp_cols = ['mean', 'max', 'min']
 
-        self.assert_(np.array_equal(result.columns, exp_cols))
+        self.assert_numpy_array_equal(result.columns, exp_cols)
 
     def test_multiple_functions_tuples_and_non_tuples(self):
         # #1359
@@ -2651,10 +2651,10 @@ class TestGroupBy(tm.TestCase):
         df = DataFrame([[long(1), 'A']], columns=midx)
 
         grouped = df.groupby('to filter').groups
-        self.assert_(np.array_equal(grouped['A'], [0]))
+        self.assert_numpy_array_equal(grouped['A'], [0])
 
         grouped = df.groupby([('to filter', '')]).groups
-        self.assert_(np.array_equal(grouped['A'], [0]))
+        self.assert_numpy_array_equal(grouped['A'], [0])
 
         df = DataFrame([[long(1), 'A'], [long(2), 'B']], columns=midx)
 
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index b997d1fff..492f681a7 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -1509,7 +1509,7 @@ Thur,Lunch,Yes,51.51,17"""
         exp = self.ymd['A'].copy()
         s[5:] = 0
         exp.values[5:] = 0
-        self.assert_(np.array_equal(s.values, exp.values))
+        self.assert_numpy_array_equal(s.values, exp.values)
 
         result = self.ymd[5:]
         expected = self.ymd.reindex(s.index[5:])
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 2727d0b5b..702307c8b 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -754,8 +754,8 @@ class CheckIndexing(object):
 
             # versus same index
             result = func(p1, p2)
-            self.assert_(np.array_equal(result.values,
-                                        func(p1.values, p2.values)))
+            self.assert_numpy_array_equal(result.values,
+                                          func(p1.values, p2.values))
 
             # versus non-indexed same objs
             self.assertRaises(Exception, func, p1, tp)
@@ -765,8 +765,8 @@ class CheckIndexing(object):
 
             # versus scalar
             result3 = func(self.panel, 0)
-            self.assert_(np.array_equal(result3.values,
-                                        func(self.panel.values, 0)))
+            self.assert_numpy_array_equal(result3.values,
+                                          func(self.panel.values, 0))
 
         test_comp(operator.eq)
         test_comp(operator.ne)
@@ -2155,7 +2155,7 @@ class TestLongPanel(tm.TestCase):
         transformed = make_axis_dummies(self.panel, 'minor',
                                         transform=mapping.get)
         self.assertEqual(len(transformed.columns), 2)
-        self.assert_(np.array_equal(transformed.columns, ['one', 'two']))
+        self.assert_numpy_array_equal(transformed.columns, ['one', 'two'])
 
         # TODO: test correctness
 
@@ -2165,7 +2165,7 @@ class TestLongPanel(tm.TestCase):
         self.panel['Label'] = self.panel.index.labels[1]
         minor_dummies = make_axis_dummies(self.panel, 'minor')
         dummies = get_dummies(self.panel['Label'])
-        self.assert_(np.array_equal(dummies.values, minor_dummies.values))
+        self.assert_numpy_array_equal(dummies.values, minor_dummies.values)
 
     def test_mean(self):
         means = self.panel.mean(level='minor')
diff --git a/pandas/tests/test_strings.py b/pandas/tests/test_strings.py
index d6a1f4f03..ad55ce5c3 100644
--- a/pandas/tests/test_strings.py
+++ b/pandas/tests/test_strings.py
@@ -133,7 +133,7 @@ class TestStringMethods(tm.TestCase):
         # Multiple arrays
         result = strings.str_cat(one, [two], na_rep='NA')
         exp = ['aa', 'aNA', 'bb', 'bd', 'cfoo', 'NANA']
-        self.assert_(np.array_equal(result, exp))
+        self.assert_numpy_array_equal(result, exp)
 
         result = strings.str_cat(one, two)
         exp = ['aa', NA, 'bb', 'bd', 'cfoo', NA]
