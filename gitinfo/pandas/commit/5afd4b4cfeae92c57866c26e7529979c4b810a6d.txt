commit 5afd4b4cfeae92c57866c26e7529979c4b810a6d
Author: jreback <jeff@reback.net>
Date:   Tue Sep 3 17:58:15 2013 -0400

    API: allow single element boolean Series to mimic numpy behavior( related GH4657)
    
    TST: test for single element with null-like
    
    DOC: deprecation message for using bool(Series([True]))

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 801158a00..da3b9882c 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -241,7 +241,8 @@ API Changes
 
   - Infer and downcast dtype if ``downcast='infer'`` is passed to ``fillna/ffill/bfill`` (:issue:`4604`)
   - ``__nonzero__`` for all NDFrame objects, will now raise a ``ValueError``, this reverts back to (:issue:`1073`, :issue:`4633`)
-    behavior.
+    behavior (except for a single-element boolean Series, which mimics ``numpy`` behavior and will evaluate
+    to the bool of the element)
   - ``DataFrame.update()`` no longer raises a ``DataConflictError``, it now
     will raise a ``ValueError`` instead (if necessary) (:issue:`4732`)
   - ``Series.isin()`` and ``DataFrame.isin()``  now raise a ``TypeError`` when
diff --git a/doc/source/v0.13.0.txt b/doc/source/v0.13.0.txt
index 9a4d644b1..83bb5f1a2 100644
--- a/doc/source/v0.13.0.txt
+++ b/doc/source/v0.13.0.txt
@@ -56,9 +56,10 @@ API changes
 
   - Infer and downcast dtype if ``downcast='infer'`` is passed to ``fillna/ffill/bfill`` (:issue:`4604`)
   - ``__nonzero__`` for all NDFrame objects, will now raise a ``ValueError``, this reverts back to (:issue:`1073`, :issue:`4633`)
-    behavior. See :ref:`gotchas<gotchas.truth>` for a more detailed discussion.
+    behavior (except for a single-element boolean Series, which mimics ``numpy`` behavior and will evaluate
+    to the bool of the element). See :ref:`gotchas<gotchas.truth>` for a more detailed discussion.
 
-    This prevent behaviors like (which will now all raise ``ValueError``)
+    This prevents behaviors like (which will now all raise ``ValueError``)
 
     .. code-block:: python
 
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 18a03eb31..3125995a1 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -596,7 +596,8 @@ class NDFrame(PandasObject):
         return not all(len(self._get_axis(a)) > 0 for a in self._AXIS_ORDERS)
 
     def __nonzero__(self):
-        raise ValueError("The truth value of an array is ambiguous. Use a.empty, a.item(), a.any() or a.all().")
+        raise ValueError("The truth value of a {0} is ambiguous. "
+                         "Use a.empty, a.item(), a.any() or a.all().".format(self.__class__.__name__))
 
     __bool__ = __nonzero__
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 884e737f3..15dda7020 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -7,6 +7,7 @@ Data structure for 1-dimensional cross-sectional and time series data
 
 import operator
 import types
+import warnings
 
 from numpy import nan, ndarray
 import numpy as np
@@ -364,6 +365,17 @@ class Series(generic.NDFrame):
     __long__ = _coerce_method(int)
     __int__ = _coerce_method(int)
 
+    def __nonzero__(self):
+        if len(self) == 1 and self.dtype == np.bool_:
+            warnings.warn("bool on a single-element boolean dtyped Series is deprecated,\n"
+                          " please use a.empty, a.item(), a.any(), or a.all() instead\n",
+                          UserWarning)
+            return bool(self.iloc[0])
+        raise ValueError("The truth value of a {0} is ambiguous.\n"
+                         "Use a.empty, a.item(), a.any() or a.all().\n"
+                         "Currently, a boolean Series of length 1 is the exception\n".format(self.__class__.__name__))
+    __bool__ = __nonzero__
+
     # we are preserving name here
     def __getstate__(self):
         return dict(_data=self._data, name=self.name)
@@ -913,7 +925,6 @@ class Series(generic.NDFrame):
         """
 
         if nanRep is not None:  # pragma: no cover
-            import warnings
             warnings.warn("nanRep is deprecated, use na_rep", FutureWarning)
             na_rep = nanRep
 
diff --git a/pandas/tests/test_generic.py b/pandas/tests/test_generic.py
index 7f50cb245..04977a9cc 100644
--- a/pandas/tests/test_generic.py
+++ b/pandas/tests/test_generic.py
@@ -205,11 +205,26 @@ class TestSeries(unittest.TestCase, Generic):
 
     def test_nonzero_single_element(self):
 
+        # single item to follow numpy
         s = Series([True])
-        self.assertRaises(ValueError, lambda : bool(s))
+        self.assert_(bool(s) == True)
 
         s = Series([False])
-        self.assertRaises(ValueError, lambda : bool(s))
+        self.assert_(bool(s) == False)
+
+        # single item nan to raise
+        for s in [ Series([np.nan]), Series([pd.NaT]) ]:
+            self.assertRaises(ValueError, lambda : bool(s))
+
+        # multiple bool are still an error
+        for s in [Series([True,True]), Series([False, False])]:
+            self.assertRaises(ValueError, lambda : bool(s))
+
+        # single non-bool are an error
+        for s in [Series([1]), Series([0]),
+                  Series(['a']), Series([0.0])]:
+                self.assertRaises(ValueError, lambda : bool(s))
+
 
 class TestDataFrame(unittest.TestCase, Generic):
     _typ = DataFrame
