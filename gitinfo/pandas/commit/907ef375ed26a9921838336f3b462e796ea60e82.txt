commit 907ef375ed26a9921838336f3b462e796ea60e82
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Aug 20 16:24:45 2011 -0400

    ENH: more groupby tests, tweaking apply result output inference

diff --git a/pandas/core/api.py b/pandas/core/api.py
index 8e4a58822..8daa089d2 100644
--- a/pandas/core/api.py
+++ b/pandas/core/api.py
@@ -6,7 +6,7 @@ from pandas.core.datetools import DateOffset
 import pandas.core.datetools as datetools
 
 from pandas.core.common import isnull, notnull
-from pandas.core.index import Index, MultiIndex
+from pandas.core.index import Index, Factor, MultiIndex
 from pandas.core.daterange import DateRange
 from pandas.core.series import Series, TimeSeries
 from pandas.core.frame import DataFrame
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index a54fc92ec..12e2743c9 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -153,20 +153,21 @@ class GroupBy(object):
         elif isinstance(self.obj, Series):
             tipo = Series
 
-        def flatten(gen, level=0):
+        def flatten(gen, level=0, shape_axis=0):
             ids = self.groupings[level].ids
             for cat, subgen in gen:
                 if isinstance(subgen, tipo):
                     yield (ids[cat],), subgen
                 else:
-                    for subcat, data in flatten(subgen, level=level+1):
-                        if len(data) == 0:
+                    for subcat, data in flatten(subgen, level=level+1,
+                                                shape_axis=shape_axis):
+                        if data.shape[shape_axis] == 0:
                             continue
                         yield (ids[cat],) + subcat, data
 
         gen = self._generator_factory(data)
 
-        for cats, data in flatten(gen):
+        for cats, data in flatten(gen, shape_axis=self.axis):
             yield cats + (data,)
 
     def apply(self, func):
@@ -197,10 +198,7 @@ class GroupBy(object):
         """
         Compute mean of groups, excluding missing values
         """
-        try:
-            return self._cython_agg_general('mean')
-        except Exception:
-            return self.aggregate(np.mean)
+        return self._cython_agg_general('mean')
 
     def sum(self):
         """
@@ -308,7 +306,7 @@ class GroupBy(object):
             res = arg(group)
 
             if not _is_indexed_like(res, group):
-               not_indexed_same = True
+                not_indexed_same = True
 
             result_keys.append(key)
             result_values.append(res)
@@ -319,6 +317,16 @@ class GroupBy(object):
     def _wrap_applied_output(self, *args, **kwargs):
         raise NotImplementedError
 
+    def _wrap_frames(self, keys, values, not_indexed_same=False):
+        if not_indexed_same:
+            result = _concat_frames_hierarchical(values, keys,
+                                                 self.groupings,
+                                                 axis=self.axis)
+        else:
+            result = _concat_frames(values)
+
+        return result
+
     @property
     def _generator_factory(self):
         labels = [ping.labels for ping in self.groupings]
@@ -329,9 +337,8 @@ class GroupBy(object):
         else:
             factory = None
 
-        factory = None
-        axis = self.axis
-        return lambda obj: generate_groups(obj, labels, shape, axis=axis,
+        return lambda obj: generate_groups(obj, labels, shape,
+                                           axis=self.axis,
                                            factory=factory)
 
 def _is_indexed_like(obj, other):
@@ -340,7 +347,9 @@ def _is_indexed_like(obj, other):
             return False
         return obj.index.equals(other.index)
     elif isinstance(obj, DataFrame):
-        if not isinstance(other, DataFrame):
+        if isinstance(other, Series):
+            return obj.index.equals(other.index)
+        elif not isinstance(other, DataFrame):
             return False
 
         return obj._indexed_same(other)
@@ -560,6 +569,10 @@ class SeriesGroupBy(GroupBy):
                 cat_index = np.concatenate([np.asarray(x.index)
                                             for x in values])
                 return Series(cat_values, index=cat_index)
+        elif isinstance(values[0], DataFrame):
+            # possible that Series -> DataFrame by applied function
+            return self._wrap_frames(keys, values,
+                                     not_indexed_same=not_indexed_same)
         else:
             if len(self.groupings) > 1:
                 index = MultiIndex.from_tuples(keys)
@@ -789,14 +802,8 @@ class DataFrameGroupBy(GroupBy):
             return DataFrame({})
 
         if isinstance(values[0], DataFrame):
-            if not_indexed_same:
-                result = _concat_frames_hierarchical(values, keys,
-                                                     self.groupings,
-                                                     axis=self.axis)
-            else:
-                result = _concat_frames(values)
-
-            return result
+            return self._wrap_frames(keys, values,
+                                     not_indexed_same=not_indexed_same)
         else:
             if len(self.groupings) > 1:
                 keys = MultiIndex.from_tuples(keys)
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 57fa4310c..2f8fba00c 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -351,7 +351,7 @@ class Factor(object):
         return Factor(labels, levels=levels)
 
     def asarray(self):
-        return self.levels[self.labels]
+        return np.asarray(self.levels).take(self.labels)
 
     def __len__(self):
         return len(self.labels)
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 7c897ab8d..8c6e405ab 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -384,6 +384,17 @@ class TestGroupBy(unittest.TestCase):
             groups[a, b] = gp
         self.assertEquals(len(groups), 2)
 
+    def test_multi_iter_panel(self):
+        wp = tm.makeWidePanel()
+        grouped = wp.groupby([lambda x: x.month, lambda x: x.weekday()],
+                             axis=1)
+
+        for month, wd, group in grouped:
+            exp_axis = [x for x in wp.major_axis
+                        if x.month == month and x.weekday() == wd]
+            expected = wp.reindex(major=exp_axis)
+            assert_panel_equal(group, expected)
+
     def test_multi_func(self):
         col1 = self.df['A']
         col2 = self.df['B']
@@ -552,6 +563,30 @@ class TestGroupBy(unittest.TestCase):
         assert_frame_equal(result0, expected0)
         assert_frame_equal(result1, expected1)
 
+    def test_cython_fail_agg(self):
+        dr = DateRange('1/1/2000', periods=50)
+        ts = Series(['A', 'B', 'C', 'D', 'E'] * 10, index=dr)
+
+        grouped = ts.groupby(lambda x: x.month)
+        summed = grouped.sum()
+        expected = grouped.agg(np.sum)
+        assert_series_equal(summed, expected)
+
+    def test_apply_series_to_frame(self):
+        def f(piece):
+            return DataFrame({'value' : piece,
+                              'demeaned' : piece - piece.mean(),
+                              'logged' : np.log(piece)})
+
+        dr = DateRange('1/1/2000', periods=100)
+        ts = Series(np.random.randn(100), index=dr)
+
+        grouped = ts.groupby(lambda x: x.month)
+        result = grouped.apply(f)
+
+        self.assert_(isinstance(result, DataFrame))
+        self.assert_(result.index.equals(ts.index))
+
 class TestPanelGroupBy(unittest.TestCase):
 
     def setUp(self):
