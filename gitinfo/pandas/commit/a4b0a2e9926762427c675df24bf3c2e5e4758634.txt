commit a4b0a2e9926762427c675df24bf3c2e5e4758634
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jan 16 16:38:07 2012 -0500

    BUG: fix bugs related to comments in #371

diff --git a/RELEASE.rst b/RELEASE.rst
index 27e3ff175..69da0ba71 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -148,6 +148,8 @@ pandas 0.7.0
     yielding an aggregated result with hierarchical columns (GH #166)
   - Monkey-patch context to traceback in ``DataFrame.apply`` to indicate which
     row/column the function application failed on (GH #614)
+  - Improved ability of read_table and read_clipboard to parse
+    console-formatted DataFrames (can read the row of index names, etc.)
 
 **Bug fixes**
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 046bcac67..1150b0bbd 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1415,9 +1415,17 @@ class DataFrame(NDFrame):
         """
         labels = self._get_axis(axis)
         if level is not None:
-            indexer = [slice(None, None)] * 2
-            indexer[axis] = labels.get_loc_level(key, level=level)
-            result = self.ix[tuple(indexer)]
+            loc = labels.get_loc_level(key, level=level)
+
+            # level = 0
+            if not isinstance(loc, slice):
+                indexer = [slice(None, None)] * 2
+                indexer[axis] = loc
+                indexer = tuple(indexer)
+            else:
+                indexer = loc
+
+            result = self.ix[indexer]
             new_ax = result._get_axis(axis).droplevel(level)
             setattr(result, result._get_axis_name(axis), new_ax)
             return result
diff --git a/pandas/core/index.py b/pandas/core/index.py
index cf6b4d84d..e109ccf26 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1640,6 +1640,9 @@ class MultiIndex(Index):
             section = labs[start:end]
 
             if lab not in lev:
+                if lib.infer_dtype([lab]) != lev.inferred_type:
+                    raise Exception('Level type mismatch: %s' % lab)
+
                 # short circuit
                 loc = lev.searchsorted(lab, side=side)
                 if side == 'right' and loc >= 0:
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 3d0a742b0..09288d965 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -201,6 +201,19 @@ class TestMultiLevel(unittest.TestCase):
     def test_series_slice_partial(self):
         pass
 
+    def test_frame_getitem_setitem_slice(self):
+        # getitem
+        result = self.frame.ix[:4]
+        expected = self.frame[:4]
+        assert_frame_equal(result, expected)
+
+        # setitem
+        cp = self.frame.copy()
+        cp.ix[:4] = 0
+
+        self.assert_((cp.values[:4] == 0).all())
+        self.assert_((cp.values[4:] != 0).all())
+
     def test_xs(self):
         xs = self.frame.xs(('bar', 'two'))
         xs2 = self.frame.ix[('bar', 'two')]
@@ -230,6 +243,22 @@ class TestMultiLevel(unittest.TestCase):
         expected.index = expected.index.droplevel(2)
         assert_frame_equal(result, expected)
 
+    def test_xs_level0(self):
+        from pandas import read_table
+        from StringIO import StringIO
+        text = """                      A       B       C       D        E
+one two three   four
+a   b   10.0032 5    -0.5109 -2.3358 -0.4645  0.05076  0.3640
+a   q   20      4     0.4473  1.4152  0.2834  1.00661  0.1744
+x   q   30      3    -0.6662 -0.5243 -0.3580  0.89145  2.5838"""
+
+        df = read_table(StringIO(text), sep='\s+')
+
+        result = df.xs('a', level=0)
+        expected = df.xs('a')
+        self.assertEqual(len(result), 2)
+        assert_frame_equal(result, expected)
+
     def test_xs_level_series(self):
         s = self.frame['A']
         result = s[:, 'two']
