commit 94cbc2f81f1f234347cd91fadaf339c3361da099
Author: Paul Lee <plee032@uottawa.ca>
Date:   Fri Jan 3 17:21:19 2020 -0500

    CLN: Update old string formatting to f-string (#30631)
    
    * CLN: Update old string formatting to f-string

diff --git a/pandas/core/ops/array_ops.py b/pandas/core/ops/array_ops.py
index e0ddd1733..b84d468ff 100644
--- a/pandas/core/ops/array_ops.py
+++ b/pandas/core/ops/array_ops.py
@@ -246,7 +246,7 @@ def comparison_op(
         res_values = comp_method_OBJECT_ARRAY(op, lvalues, rvalues)
 
     else:
-        op_name = "__{op}__".format(op=op.__name__)
+        op_name = f"__{op.__name__}__"
         method = getattr(lvalues, op_name)
         with np.errstate(all="ignore"):
             res_values = method(rvalues)
@@ -254,9 +254,8 @@ def comparison_op(
         if res_values is NotImplemented:
             res_values = invalid_comparison(lvalues, rvalues, op)
         if is_scalar(res_values):
-            raise TypeError(
-                "Could not compare {typ} type with Series".format(typ=type(rvalues))
-            )
+            typ = type(rvalues)
+            raise TypeError(f"Could not compare {typ} type with Series")
 
     return res_values
 
@@ -293,11 +292,10 @@ def na_logical_op(x: np.ndarray, y, op):
                 OverflowError,
                 NotImplementedError,
             ):
+                typ = type(y).__name__
                 raise TypeError(
-                    "Cannot perform '{op}' with a dtyped [{dtype}] array "
-                    "and scalar of type [{typ}]".format(
-                        op=op.__name__, dtype=x.dtype, typ=type(y).__name__
-                    )
+                    f"Cannot perform '{op.__name__}' with a dtyped [{x.dtype}] array "
+                    f"and scalar of type [{typ}]"
                 )
 
     return result
diff --git a/pandas/core/ops/dispatch.py b/pandas/core/ops/dispatch.py
index 1eb952c13..f35279378 100644
--- a/pandas/core/ops/dispatch.py
+++ b/pandas/core/ops/dispatch.py
@@ -210,10 +210,10 @@ def maybe_dispatch_ufunc_to_dunder_op(
 
     if method == "__call__" and op_name in special and kwargs.get("out") is None:
         if isinstance(inputs[0], type(self)):
-            name = "__{}__".format(op_name)
+            name = f"__{op_name}__"
             return getattr(self, name, not_implemented)(inputs[1])
         else:
-            name = flipped.get(op_name, "__r{}__".format(op_name))
+            name = flipped.get(op_name, f"__r{op_name}__")
             return getattr(self, name, not_implemented)(inputs[0])
     else:
         return NotImplemented
diff --git a/pandas/core/ops/invalid.py b/pandas/core/ops/invalid.py
index 013ff7689..cc4a1f11e 100644
--- a/pandas/core/ops/invalid.py
+++ b/pandas/core/ops/invalid.py
@@ -30,11 +30,8 @@ def invalid_comparison(left, right, op):
     elif op is operator.ne:
         res_values = np.ones(left.shape, dtype=bool)
     else:
-        raise TypeError(
-            "Invalid comparison between dtype={dtype} and {typ}".format(
-                dtype=left.dtype, typ=type(right).__name__
-            )
-        )
+        typ = type(right).__name__
+        raise TypeError(f"Invalid comparison between dtype={left.dtype} and {typ}")
     return res_values
 
 
@@ -52,10 +49,8 @@ def make_invalid_op(name: str):
     """
 
     def invalid_op(self, other=None):
-        raise TypeError(
-            "cannot perform {name} with this index type: "
-            "{typ}".format(name=name, typ=type(self).__name__)
-        )
+        typ = type(self).__name__
+        raise TypeError(f"cannot perform {name} with this index type: {typ}")
 
     invalid_op.__name__ = name
     return invalid_op
diff --git a/pandas/core/ops/methods.py b/pandas/core/ops/methods.py
index 8c66eea27..c04658565 100644
--- a/pandas/core/ops/methods.py
+++ b/pandas/core/ops/methods.py
@@ -102,7 +102,8 @@ def add_special_arithmetic_methods(cls):
 
             return self
 
-        f.__name__ = "__i{name}__".format(name=method.__name__.strip("__"))
+        name = method.__name__.strip("__")
+        f.__name__ = f"__i{name}__"
         return f
 
     new_methods.update(
@@ -214,7 +215,7 @@ def _create_methods(cls, arith_method, comp_method, bool_method, special):
         )
 
     if special:
-        dunderize = lambda x: "__{name}__".format(name=x.strip("_"))
+        dunderize = lambda x: f"__{x.strip('_')}__"
     else:
         dunderize = lambda x: x
     new_methods = {dunderize(k): v for k, v in new_methods.items()}
diff --git a/pandas/core/ops/roperator.py b/pandas/core/ops/roperator.py
index 4cb02238a..e6691ddf8 100644
--- a/pandas/core/ops/roperator.py
+++ b/pandas/core/ops/roperator.py
@@ -34,9 +34,8 @@ def rmod(left, right):
     # formatting operation; this is a TypeError
     # otherwise perform the op
     if isinstance(right, str):
-        raise TypeError(
-            "{typ} cannot perform the operation mod".format(typ=type(left).__name__)
-        )
+        typ = type(left).__name__
+        raise TypeError(f"{typ} cannot perform the operation mod")
 
     return right % left
 
