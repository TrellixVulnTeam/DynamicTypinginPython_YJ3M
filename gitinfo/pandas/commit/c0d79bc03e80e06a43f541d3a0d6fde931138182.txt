commit c0d79bc03e80e06a43f541d3a0d6fde931138182
Author: Chang She <chang@lambdafoundry.com>
Date:   Tue Sep 18 17:32:35 2012 -0400

    BUG: more fixedoffset occurrences #1928

diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index b2289baa5..c82dab08a 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -579,7 +579,10 @@ class HDFStore(object):
                 node._v_attrs.freq = index.freq
 
             if hasattr(index, 'tz') and index.tz is not None:
-                node._v_attrs.tz = lib.get_timezone(index.tz)
+                zone = lib.get_timezone(index.tz)
+                if zone is None:
+                    zone = lib.tot_seconds(index.tz.utcoffset())
+                node._v_attrs.tz = zone
 
     def _read_index(self, group, key):
         variety = getattr(group._v_attrs, '%s_variety' % key)
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index 57c57bfca..9442f274a 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -380,6 +380,19 @@ class TestHDFStore(unittest.TestCase):
             store.close()
             os.remove(self.scratchpath)
 
+    def test_fixed_offset_tz(self):
+        rng = date_range('1/1/2000 00:00:00-07:00', '1/30/2000 00:00:00-07:00')
+        frame = DataFrame(np.random.randn(len(rng), 4), index=rng)
+        try:
+            store = HDFStore(self.scratchpath)
+            store['frame'] = frame
+            recons = store['frame']
+            self.assert_(recons.index.equals(rng))
+            self.assertEquals(rng.tz, recons.index.tz)
+        finally:
+            store.close()
+            os.remove(self.scratchpath)
+
     def test_store_hierarchical(self):
         index = MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'],
                                    ['one', 'two', 'three']],
diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index 80ebcecc6..aae507e2b 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -1031,6 +1031,9 @@ cdef double total_seconds(object td): # Python 2.6 compat
     return ((td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6) //
             10**6)
 
+def tot_seconds(td):
+    return total_seconds(td)
+
 cpdef ndarray _unbox_utcoffsets(object transinfo):
     cdef:
         Py_ssize_t i, sz
diff --git a/pandas/tseries/tests/test_timezones.py b/pandas/tseries/tests/test_timezones.py
index 1fe3adbb2..18783bd0d 100644
--- a/pandas/tseries/tests/test_timezones.py
+++ b/pandas/tseries/tests/test_timezones.py
@@ -60,7 +60,7 @@ class FixedOffset(tzinfo):
     def dst(self, dt):
         return timedelta(0)
 
-fixed_off = FixedOffset(-4200, '-07:00')
+fixed_off = FixedOffset(-420, '-07:00')
 
 class TestTimeZoneSupport(unittest.TestCase):
 
@@ -153,15 +153,18 @@ class TestTimeZoneSupport(unittest.TestCase):
         self.assertEquals(utc_stamp.hour, 5)
 
     def test_create_with_fixed_tz(self):
-        off = FixedOffset(4200, '+07:00')
-        start = Timestamp('3/11/2012 05:00', tz=off)
-        end = Timestamp('6/11/2012 05:00', tz=off)
+        off = FixedOffset(420, '+07:00')
+        start = datetime(2012, 3, 11, 5, 0, 0, tzinfo=off)
+        end = datetime(2012, 6, 11, 5, 0, 0, tzinfo=off)
         rng = date_range(start=start, end=end)
         self.assertEqual(off, rng.tz)
 
         rng2 = date_range(start, periods=len(rng), tz=off)
         self.assert_(rng.equals(rng2))
 
+        rng3 = date_range('3/11/2012 05:00:00+07:00', '6/11/2012 05:00:00+07:00')
+        self.assert_((rng.values == rng3.values).all())
+
     def test_date_range_localize(self):
         rng = date_range('3/11/2012 03:00', periods=15, freq='H', tz='US/Eastern')
         rng2 = DatetimeIndex(['3/11/2012 03:00', '3/11/2012 04:00'],
diff --git a/pandas/tseries/tools.py b/pandas/tseries/tools.py
index 16b8c7497..cb10820ff 100644
--- a/pandas/tseries/tools.py
+++ b/pandas/tseries/tools.py
@@ -39,6 +39,9 @@ def _maybe_get_tz(tz):
     if isinstance(tz, (str, unicode)):
         import pytz
         tz = pytz.timezone(tz)
+    if com.is_integer(tz):
+        import pytz
+        tz = pytz.FixedOffset(tz / 60)
     return tz
 
 
