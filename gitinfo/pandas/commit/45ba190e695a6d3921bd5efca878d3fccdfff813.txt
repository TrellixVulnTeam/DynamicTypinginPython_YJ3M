commit 45ba190e695a6d3921bd5efca878d3fccdfff813
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Apr 21 23:56:46 2012 -0400

    ENH: Timestamp can accept date objects, promote datetime.date in Index.join/get_indexer, close #867

diff --git a/pandas/core/index.py b/pandas/core/index.py
index 15bb06b52..c1b9ac699 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -51,6 +51,9 @@ class Index(np.ndarray):
     ----
     An Index instance can **only** contain hashable objects
     """
+    # To hand over control to subclasses
+    _join_precedence = 1
+
     # Cython methods
     _groupby = lib.groupby_object
     _arrmap = lib.arrmap_object
@@ -644,9 +647,12 @@ class Index(np.ndarray):
         (indexer, mask) : (ndarray, ndarray)
         """
         method = self._get_method(method)
-
         target = _ensure_index(target)
 
+        pself, ptarget = self._possibly_promote(target)
+        if pself is not self or ptarget is not target:
+            return pself.get_indexer(ptarget, method=method, limit=limit)
+
         if self.dtype != target.dtype:
             this = Index(self, dtype=object)
             target = Index(target, dtype=object)
@@ -665,6 +671,13 @@ class Index(np.ndarray):
 
         return indexer
 
+    def _possibly_promote(self, other):
+        # A hack, but it works
+        from pandas.tseries.index import DatetimeIndex
+        if self.inferred_type == 'date' and isinstance(other, DatetimeIndex):
+            return DatetimeIndex(self), other
+        return self, other
+
     def _get_indexer_standard(self, other):
         if (self.dtype != np.object_ and
             self.is_monotonic and other.is_monotonic):
@@ -767,6 +780,15 @@ class Index(np.ndarray):
             else:
                 return join_index
 
+        if self._join_precedence < other._join_precedence:
+            how = {'right': 'left', 'left': 'right'}.get(how, how)
+            result = other.join(self, how=how, level=level,
+                                return_indexers=return_indexers)
+            if return_indexers:
+                x, y, z = result
+                result = x, z, y
+            return result
+
         if self.dtype != other.dtype:
             this = self.astype('O')
             other = other.astype('O')
diff --git a/pandas/src/datetime.pxd b/pandas/src/datetime.pxd
index 882c95631..291269336 100644
--- a/pandas/src/datetime.pxd
+++ b/pandas/src/datetime.pxd
@@ -3,6 +3,9 @@ from cpython cimport PyObject
 
 cdef extern from "datetime.h":
 
+    ctypedef class datetime.date [object PyDateTime_Date]:
+        pass
+
     ctypedef class datetime.datetime [object PyDateTime_DateTime]:
         pass
 
@@ -11,21 +14,21 @@ cdef extern from "datetime.h":
 
     void PyDateTime_IMPORT()
 
-    int PyDateTime_GET_YEAR(datetime o)
-    int PyDateTime_GET_MONTH(datetime o)
-    int PyDateTime_GET_DAY(datetime o)
-    int PyDateTime_DATE_GET_HOUR(datetime o)
-    int PyDateTime_DATE_GET_MINUTE(datetime o)
-    int PyDateTime_DATE_GET_SECOND(datetime o)
-    int PyDateTime_DATE_GET_MICROSECOND(datetime o)
-    int PyDateTime_TIME_GET_HOUR(datetime o)
-    int PyDateTime_TIME_GET_MINUTE(datetime o)
-    int PyDateTime_TIME_GET_SECOND(datetime o)
-    int PyDateTime_TIME_GET_MICROSECOND(datetime o)
+    int PyDateTime_GET_YEAR(date)
+    int PyDateTime_GET_MONTH(date)
+    int PyDateTime_GET_DAY(date)
+    int PyDateTime_DATE_GET_HOUR(object o)
+    int PyDateTime_DATE_GET_MINUTE(object o)
+    int PyDateTime_DATE_GET_SECOND(object o)
+    int PyDateTime_DATE_GET_MICROSECOND(object o)
+    int PyDateTime_TIME_GET_HOUR(object o)
+    int PyDateTime_TIME_GET_MINUTE(object o)
+    int PyDateTime_TIME_GET_SECOND(object o)
+    int PyDateTime_TIME_GET_MICROSECOND(object o)
     bint PyDateTime_Check(object o)
     bint PyDate_Check(object o)
-    PyObject *PyDateTime_FromDateAndTime(int year, int month, int day, int hour,
-                                         int minute, int second, int us)
+    object PyDateTime_FromDateAndTime(int year, int month, int day, int hour,
+                                      int minute, int second, int us)
 
 cdef extern from "numpy/ndarrayobject.h":
 
diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index ad2d9a11e..e972d8026 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -217,6 +217,17 @@ cdef convert_to_tsobject(object ts, object tzinfo=None):
         dts.sec = PyDateTime_DATE_GET_SECOND(ts)
         dts.us = PyDateTime_DATE_GET_MICROSECOND(ts)
         retval.value = PyArray_DatetimeStructToDatetime(NPY_FR_us, &dts)
+    elif PyDate_Check(ts):
+        dts.year = PyDateTime_GET_YEAR(ts)
+        dts.month = PyDateTime_GET_MONTH(ts)
+        dts.day = PyDateTime_GET_DAY(ts)
+        retval.dtval = PyDateTime_FromDateAndTime(dts.year, dts.month, dts.day,
+                                                  0, 0, 0, 0)
+        dts.hour = 0
+        dts.min = 0
+        dts.sec = 0
+        dts.us = 0
+        retval.value = PyArray_DatetimeStructToDatetime(NPY_FR_us, &dts)
     # pretty cheap
     elif isinstance(ts, _Timestamp):
         tmp = ts
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 930d5d081..8bbb5a220 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -120,6 +120,7 @@ class DatetimeIndex(Int64Index):
         If periods is none, generated index will extend to first conforming
         time on or just past end argument
     """
+    _join_precedence = 10
 
     _inner_indexer = _join_i8_wrapper(lib.inner_join_indexer_int64)
     _outer_indexer = _join_i8_wrapper(lib.outer_join_indexer_int64)
@@ -675,6 +676,11 @@ class DatetimeIndex(Int64Index):
         right = stamps.searchsorted(t2.value, side='right')
         return slice(left, right)
 
+    def _possibly_promote(self, other):
+        if other.inferred_type == 'date':
+            other = DatetimeIndex(other)
+        return self, other
+
     def get_value(self, series, key):
         """
         Fast lookup of value from 1-dimensional ndarray. Only use this if you
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 8b17e9b67..94d864d6d 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -411,6 +411,24 @@ class TestTimeSeries(unittest.TestCase):
         result = ts[list(ts.index[5:10])]
         tm.assert_series_equal(result, expected)
 
+    def test_promote_datetime_date(self):
+        rng = date_range('1/1/2000', periods=20)
+        ts = Series(np.random.randn(20), index=rng)
+
+        ts2 = ts[5:]
+        ts2.index = [x.date() for x in ts2.index]
+
+        result = ts + ts2
+        result2 = ts2 + ts
+        expected = ts + ts[5:]
+        assert_series_equal(result, expected)
+        assert_series_equal(result2, expected)
+
+        # test asfreq
+        result = ts2.asfreq('4H', method='ffill')
+        expected = ts[5:].asfreq('4H', method='ffill')
+        assert_series_equal(result, expected)
+
 def _skip_if_no_pytz():
     try:
         import pytz
