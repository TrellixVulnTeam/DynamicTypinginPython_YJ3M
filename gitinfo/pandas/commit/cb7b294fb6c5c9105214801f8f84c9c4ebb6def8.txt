commit cb7b294fb6c5c9105214801f8f84c9c4ebb6def8
Author: kota matsuoka <kota11250910@gmail.com>
Date:   Sun May 10 04:56:14 2020 +0900

    BUG: Create empty dataframe with string dtype fails (#33651)

diff --git a/doc/source/whatsnew/v1.1.0.rst b/doc/source/whatsnew/v1.1.0.rst
index 79f784719..483083cb1 100644
--- a/doc/source/whatsnew/v1.1.0.rst
+++ b/doc/source/whatsnew/v1.1.0.rst
@@ -766,6 +766,7 @@ ExtensionArray
 - Fixed bug that caused :meth:`Series.__repr__()` to crash for extension types whose elements are multidimensional arrays (:issue:`33770`).
 - Fixed bug where :meth:`Series.update` would raise a ``ValueError`` for ``ExtensionArray`` dtypes with missing values (:issue:`33980`)
 - Fixed bug where :meth:`StringArray.memory_usage` was not implemented (:issue:`33963`)
+- Fixed bug that `DataFrame(columns=.., dtype='string')` would fail (:issue:`27953`, :issue:`33623`)
 
 
 Other
diff --git a/pandas/core/internals/construction.py b/pandas/core/internals/construction.py
index ce3f07d06..b2af149cc 100644
--- a/pandas/core/internals/construction.py
+++ b/pandas/core/internals/construction.py
@@ -257,7 +257,10 @@ def init_dict(data: Dict, index, columns, dtype: Optional[DtypeObj] = None):
 
         # no obvious "empty" int column
         if missing.any() and not is_integer_dtype(dtype):
-            if dtype is None or np.issubdtype(dtype, np.flexible):
+            if dtype is None or (
+                not is_extension_array_dtype(dtype)
+                and np.issubdtype(dtype, np.flexible)
+            ):
                 # GH#1783
                 nan_dtype = np.dtype(object)
             else:
diff --git a/pandas/tests/extension/arrow/test_bool.py b/pandas/tests/extension/arrow/test_bool.py
index 681c6f9a1..48f1c3476 100644
--- a/pandas/tests/extension/arrow/test_bool.py
+++ b/pandas/tests/extension/arrow/test_bool.py
@@ -69,6 +69,10 @@ class TestConstructors(BaseArrowTests, base.BaseConstructorsTests):
         # pyarrow.lib.ArrowInvalid: only handle 1-dimensional arrays
         super().test_series_constructor_scalar_na_with_index(dtype, na_value)
 
+    @pytest.mark.xfail(reason="raises AssertionError")
+    def test_construct_empty_dataframe(self, dtype):
+        super().test_construct_empty_dataframe(dtype)
+
 
 class TestReduce(base.BaseNoReduceTests):
     def test_reduce_series_boolean(self):
diff --git a/pandas/tests/extension/base/constructors.py b/pandas/tests/extension/base/constructors.py
index 52e29cffc..5c9e5dcf3 100644
--- a/pandas/tests/extension/base/constructors.py
+++ b/pandas/tests/extension/base/constructors.py
@@ -108,3 +108,11 @@ class BaseConstructorsTests(BaseExtensionTests):
         result = pd.array(data, dtype=np.dtype(object))
         expected = pd.arrays.PandasArray(np.asarray(data, dtype=object))
         self.assert_equal(result, expected)
+
+    def test_construct_empty_dataframe(self, dtype):
+        # GH 33623
+        result = pd.DataFrame(columns=["a"], dtype=dtype)
+        expected = pd.DataFrame(
+            {"a": pd.array([], dtype=dtype)}, index=pd.Index([], dtype="object")
+        )
+        self.assert_frame_equal(result, expected)
