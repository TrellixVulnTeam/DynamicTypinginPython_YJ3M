commit 72fb8c66c4c6e3ccc94bde63dc038de031e3b13e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Jun 8 17:19:23 2012 -0400

    BUG: fix DatetimeIndex.groupby bug close #1430

diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index d274215cf..ee7dcd09d 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -576,7 +576,7 @@ class TestGroupBy(unittest.TestCase):
 
         for k, v in groups.iteritems():
             samething = self.tsframe.index.take(indices[k])
-            self.assert_(np.array_equal(v, samething.values))
+            self.assert_((samething == v).all())
 
     def test_grouping_is_iterable(self):
         # this code path isn't used anywhere else
@@ -1920,6 +1920,18 @@ class TestGroupBy(unittest.TestCase):
         expected = ord_data.groupby(ord_labels, sort=False).describe()
         assert_frame_equal(desc_result, expected)
 
+    def test_groupby_groups_datetimeindex(self):
+        # #1430
+        from pandas.tseries.api import DatetimeIndex
+        periods = 1000
+        ind = DatetimeIndex(start='2012/1/1', freq='5min', periods=periods)
+        df = DataFrame({'high': np.arange(periods),
+                        'low': np.arange(periods)}, index=ind)
+        grouped = df.groupby(lambda x: datetime(x.year, x.month, x.day))
+
+        # it works!
+        groups = grouped.groups
+        self.assert_(isinstance(groups.keys()[0], datetime))
 
 
 def _check_groupby(df, result, keys, field, f=lambda x: x.sum()):
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index ae3ef3046..1b425f559 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -77,16 +77,16 @@ def _dt_index_cmp(opname):
     Wrap comparison operations to convert datetime-like to datetime64
     """
     def wrapper(self, other):
+        func = getattr(super(DatetimeIndex, self), opname)
         if isinstance(other, datetime):
             func = getattr(self, opname)
-            result = func(_to_m8(other))
-        elif isinstance(other, np.ndarray):
-            func = getattr(super(DatetimeIndex, self), opname)
-            result = func(other)
-        else:
+            other = _to_m8(other)
+        elif isinstance(other, list):
+            other = DatetimeIndex(other)
+        elif not isinstance(other, np.ndarray):
             other = _ensure_datetime64(other)
-            func = getattr(super(DatetimeIndex, self), opname)
-            result = func(other)
+        result = func(other)
+
         try:
             return result.view(np.ndarray)
         except:
@@ -153,7 +153,6 @@ class DatetimeIndex(Int64Index):
     _left_indexer  = _join_i8_wrapper(_algos.left_join_indexer_int64)
     _left_indexer_unique  = _join_i8_wrapper(
         _algos.left_join_indexer_unique_int64, with_indexers=False)
-    _groupby = lib.groupby_arrays # _wrap_i8_function(lib.groupby_int64)
 
     _arrmap = _wrap_dt_function(_algos.arrmap_object)
 
@@ -499,6 +498,10 @@ class DatetimeIndex(Int64Index):
             new_values = self.astype('O') + delta
         return DatetimeIndex(new_values, tz=self.tz, freq='infer')
 
+    def groupby(self, f):
+        objs = self.asobject
+        return _algos.groupby_object(objs, f)
+
     def summary(self, name=None):
         if len(self) > 0:
             index_summary = ', %s to %s' % (str(self[0]), str(self[-1]))
