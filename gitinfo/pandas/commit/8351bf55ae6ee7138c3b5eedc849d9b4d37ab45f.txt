commit 8351bf55ae6ee7138c3b5eedc849d9b4d37ab45f
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Sep 25 17:47:19 2011 -0400

    DOC: documented reading CSV/table into MultiIndex, address GH #165

diff --git a/doc/data/mindex_ex.csv b/doc/data/mindex_ex.csv
new file mode 100644
index 000000000..935ff936c
--- /dev/null
+++ b/doc/data/mindex_ex.csv
@@ -0,0 +1,16 @@
+year,indiv,zit,xit
+1977,"A",1.2,.6
+1977,"B",1.5,.5
+1977,"C",1.7,.8
+1978,"A",.2,.06
+1978,"B",.7,.2
+1978,"C",.8,.3
+1978,"D",.9,.5
+1978,"E",1.4,.9
+1979,"C",.2,.15
+1979,"D",.14,.05
+1979,"E",.5,.15
+1979,"F",1.2,.5
+1979,"G",3.4,1.9
+1979,"H",5.4,2.7
+1979,"I",6.4,1.2
diff --git a/doc/source/io.rst b/doc/source/io.rst
index 2c630d1f4..6e92a5ec1 100644
--- a/doc/source/io.rst
+++ b/doc/source/io.rst
@@ -96,6 +96,24 @@ fragile. Type inference is a pretty big deal. So if a column can be coerced to
 integer dtype without altering the contents, it will do so. Any non-numeric
 columns will come through as object dtype as with the rest of pandas objects.
 
+Reading DataFrame objects with ``MultiIndex``
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Suppose you have data indexed by two columns:
+
+.. ipython:: python
+
+   print open('data/mindex_ex.csv').read()
+
+The ``index_col`` argument to ``read_csv`` and ``read_table`` can take a list of
+column numbers to turn multiple columns into a ``MultiIndex``:
+
+.. ipython:: python
+
+   df = read_csv("data/mindex_ex.csv", index_col=[0,1])
+   df
+   df.ix[1978]
+
 Excel 2003 files
 ----------------
 
