commit a88afc79f1696470471fbc731d881b6d513f7a0f
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Apr 21 21:49:49 2012 -0400

    BUG: better error message with misspecified date_range, fix buglet. close #1095

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 4807de6c9..9f5660b34 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -459,6 +459,9 @@ def _try_sort(iterable):
     except Exception:
         return listed
 
+def _count_not_none(*args):
+    return sum(x is not None for x in args)
+
 #------------------------------------------------------------------------------
 # miscellaneous python tools
 
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 251a78c22..5a82c91f4 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -211,24 +211,7 @@ class DatetimeIndex(Int64Index):
                 index = cls._cached_range(start, end, periods=periods,
                                           offset=offset, name=name)
             else:
-                if isinstance(offset, datetools.Tick):
-                    if periods is None:
-                        b, e = Timestamp(start), Timestamp(end)
-                        data = np.arange(b.value, e.value+1,
-                                        offset.us_stride(), dtype=np.int64)
-                    else:
-                        b = Timestamp(start)
-                        e = b.value + periods * offset.us_stride()
-                        data = np.arange(b.value, e,
-                                         offset.us_stride(), dtype=np.int64)
-
-                else:
-                    xdr = datetools.generate_range(start=start, end=end,
-                        periods=periods, offset=offset)
-
-                    data = _to_m8_array(list(xdr))
-
-                index = np.array(data, dtype=np.datetime64, copy=False)
+                index = _generate_regular_range(start, end, periods, offset)
 
             index = index.view(cls)
             index.name = name
@@ -967,6 +950,32 @@ class DatetimeIndex(Int64Index):
         return True
 
 
+def _generate_regular_range(start, end, periods, offset):
+    if com._count_not_none(start, end, periods) < 2:
+        raise ValueError('Must specify two of start, end, or periods')
+
+    if isinstance(offset, datetools.Tick):
+        if periods is None:
+            b = Timestamp(start).value
+            e = Timestamp(end).value + 1
+        elif start is not None:
+            b = Timestamp(start).value
+            e = b + periods * offset.us_stride()
+        else:
+            e = Timestamp(start).value
+            b = e - periods * offset.us_stride()
+
+        data = np.arange(b, e, offset.us_stride(), dtype=np.int64)
+        data = data.view('M8[us]')
+    else:
+        xdr = datetools.generate_range(start=start, end=end,
+            periods=periods, offset=offset)
+
+        data = np.array(list(xdr), dtype='M8[us]')
+
+    return data
+
+
 def date_range(start=None, end=None, periods=None, freq='D', tz=None,
                normalize=False):
     """
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index 9a4859dad..1f74061d3 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -2,6 +2,7 @@ from datetime import datetime, timedelta
 
 import numpy as np
 
+from pandas.core.common import _count_not_none
 from pandas.tseries.tools import to_datetime
 
 # import after tools, dateutil check
@@ -1005,6 +1006,9 @@ def generate_range(start=None, end=None, periods=None,
             end = None
             periods = 0
 
+    if _count_not_none(start, end, periods) < 2:
+        raise ValueError('Must specify 2 of start, end, periods')
+
     if end is None:
         end = start + (periods - 1) * offset
 
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 7ffd6de25..aa54efcc5 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -381,6 +381,17 @@ class TestTimeSeries(unittest.TestCase):
         expected = DatetimeIndex(datetools.to_datetime(idx.values))
         self.assert_(result.equals(expected))
 
+    def test_range_misspecified(self):
+        # GH #1095
+
+        self.assertRaises(ValueError, date_range, '1/1/2000')
+        self.assertRaises(ValueError, date_range, end='1/1/2000')
+        self.assertRaises(ValueError, date_range, periods=10)
+
+        self.assertRaises(ValueError, date_range, '1/1/2000', freq='H')
+        self.assertRaises(ValueError, date_range, end='1/1/2000', freq='H')
+        self.assertRaises(ValueError, date_range, periods=10, freq='H')
+
 def _skip_if_no_pytz():
     try:
         import pytz
