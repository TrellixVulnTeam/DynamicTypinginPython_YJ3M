commit 40c528113b1cf5af14cac4c6194e06972536a399
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Feb 17 20:03:09 2012 -0500

    BUG: fix mixed float/int index formatting issue

diff --git a/pandas/core/index.py b/pandas/core/index.py
index c3dbd46c4..eb72aeaf8 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -278,8 +278,9 @@ class Index(np.ndarray):
             return header + result
 
         values = self.values
+
         if values.dtype == np.object_:
-            values = lib.maybe_convert_objects(values)
+            values = lib.maybe_convert_objects(values, safe=1)
 
         if values.dtype == np.object_:
             result = [com._stringify(x) for x in values]
diff --git a/pandas/src/inference.pyx b/pandas/src/inference.pyx
index 0c75a65a2..e10730757 100644
--- a/pandas/src/inference.pyx
+++ b/pandas/src/inference.pyx
@@ -227,7 +227,8 @@ def maybe_convert_numeric(ndarray[object] values, set na_values):
     else:
         return ints
 
-def maybe_convert_objects(ndarray[object] objects, bint try_float=0):
+def maybe_convert_objects(ndarray[object] objects, bint try_float=0,
+                          bint safe=0):
     '''
     Type inference function-- convert object array to proper dtype
     '''
@@ -280,24 +281,48 @@ def maybe_convert_objects(ndarray[object] objects, bint try_float=0):
         else:
             seen_object = 1
 
-    if seen_null:
-        if (seen_float or seen_int) and not seen_object:
-            return floats
+    if not safe:
+        if seen_null:
+            if (seen_float or seen_int) and not seen_object:
+                return floats
+            else:
+                return objects
         else:
+            if seen_object:
+                return objects
+            elif not seen_bool:
+                if seen_float:
+                    return floats
+                elif seen_int:
+                    return ints
+            else:
+                if not seen_float and not seen_int:
+                    return bools.view(np.bool_)
+
             return objects
     else:
-        if seen_object:
-            return objects
-        elif not seen_bool:
-            if seen_float:
+        # don't cast int to float, etc.
+        if seen_null:
+            if (seen_float or seen_int) and not seen_object:
                 return floats
-            elif seen_int:
-                return ints
+            else:
+                return objects
         else:
-            if not seen_float and not seen_int:
-                return bools.view(np.bool_)
+            if seen_object:
+                return objects
+            elif not seen_bool:
+                if seen_int and seen_float:
+                    return objects
+                elif seen_float:
+                    return floats
+                elif seen_int:
+                    return ints
+            else:
+                if not seen_float and not seen_int:
+                    return bools.view(np.bool_)
+
+            return objects
 
-        return objects
 
 def convert_sql_column(x):
     return maybe_convert_objects(x, try_float=1)
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index cc34d5254..eebad8e3f 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -6,7 +6,7 @@ from numpy import nan
 from numpy.random import randn
 import numpy as np
 
-from pandas import DataFrame, Series
+from pandas import DataFrame, Series, Index
 import pandas.core.format as fmt
 import pandas.util.testing as tm
 
@@ -233,6 +233,19 @@ class TestDataFrameFormatting(unittest.TestCase):
                         '1  2.512000e-01')
         assert(df_s == expected)
 
+    def test_to_string_float_index(self):
+        index = Index([1.5, 2, 3, 4, 5])
+        df = DataFrame(range(5), index=index)
+
+        result = df.to_string()
+        expected = ('     0\n'
+                    '1.5  0\n'
+                    '2    1\n'
+                    '3    2\n'
+                    '4    3\n'
+                    '5    4')
+        self.assertEqual(result, expected)
+
     def test_to_string_ascii_error(self):
         data = [('0  ',
                  u'                        .gitignore ',
