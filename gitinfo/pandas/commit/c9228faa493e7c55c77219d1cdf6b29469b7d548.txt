commit c9228faa493e7c55c77219d1cdf6b29469b7d548
Author: Chang She <changshe@gmail.com>
Date:   Tue Jul 17 00:59:31 2012 -0400

    ENH: unified legend for secondary axis

diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 8900a1eb3..0b5aba7ae 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -531,6 +531,8 @@ class MPLPlot(object):
         self.fig = fig
         self.axes = None
 
+        if not isinstance(secondary_y, (bool, tuple, list, np.ndarray)):
+            secondary_y = [secondary_y]
         self.secondary_y = secondary_y
 
         self.kwds = kwds
@@ -577,13 +579,25 @@ class MPLPlot(object):
         pass
 
     def _maybe_right_yaxis(self, ax):
-        ypos = ax.get_yaxis().get_ticks_position().strip().lower()
-
-        if self.secondary_y and ypos != 'right':
-            orig_ax = ax
-            ax = ax.twinx()
+        _types = (list, tuple, np.ndarray)
+        need_second = ((isinstance(self.secondary_y, bool) and self.secondary_y)
+                       or (isinstance(self.secondary_y, _types)
+                           and len(self.secondary_y) > 0))
+
+        if need_second and not hasattr(ax, 'right_ax'):
+            orig_ax, new_ax = ax, ax.twinx()
+            orig_ax.right_ax, new_ax.left_ax = new_ax, orig_ax
             if len(orig_ax.get_lines()) == 0: # no data on left y
                 orig_ax.get_yaxis().set_visible(False)
+            if len(new_ax.get_lines()) == 0:
+                new_ax.get_yaxis().set_visible(False)
+
+            if ((isinstance(self.secondary_y, bool) and self.secondary_y) or
+                (isinstance(self.secondary_y, _types) and
+                 (len(self.secondary_y) == self.nseries))):
+                ax = new_ax
+            else:
+                ax = orig_ax
         else:
             ax.get_yaxis().set_visible(True)
 
@@ -749,8 +763,23 @@ class MPLPlot(object):
             ax = self.axes[i]
         else:
             ax = self.ax
+            if self.on_right(i):
+                if hasattr(ax, 'right_ax'):
+                    ax = ax.right_ax
+            elif hasattr(ax, 'left_ax'):
+                    ax = ax.left_ax
+
+        ax.get_yaxis().set_visible(True)
         return ax
 
+    def on_right(self, i):
+        from pandas.core.frame import DataFrame
+        if isinstance(self.secondary_y, bool):
+            return self.secondary_y
+        if (isinstance(self.data, DataFrame) and
+            isinstance(self.secondary_y, (tuple, list, np.ndarray))):
+            return self.data.columns[i] in self.secondary_y
+
     def _get_ax_and_style(self, i, col_name):
         ax = self._get_ax(i)
 
@@ -834,6 +863,8 @@ class LinePlot(MPLPlot):
             data = self._maybe_convert_index(self.data)
             self._make_ts_plot(data)
         else:
+            lines = []
+            labels = []
             x = self._get_xticks(convert_period=True)
 
             plotf = self._get_plot_function()
@@ -848,9 +879,14 @@ class LinePlot(MPLPlot):
                     y = np.ma.array(y)
                     y = np.ma.masked_where(mask, y)
 
-                plotf(ax, x, y, style, label=label, **self.kwds)
+                newline = plotf(ax, x, y, style, label=label, **self.kwds)[0]
+                lines.append(newline)
+                labels.append(label)
                 ax.grid(self.grid)
 
+            if self.legend and not self.subplots:
+                ax.legend(lines, labels, loc='best', title=self.legend_title)
+
     def _maybe_convert_index(self, data):
         # tsplot converts automatically, but don't want to convert index
         # over and over for DataFrames
@@ -883,22 +919,31 @@ class LinePlot(MPLPlot):
         from pandas.tseries.plotting import tsplot
 
         plotf = self._get_plot_function()
+        lines = []
+        labels = []
 
         if isinstance(data, Series):
             ax = self._get_ax(0) #self.axes[0]
             style = self.style or ''
             label = com._stringify(self.label)
-            tsplot(data, plotf, ax=ax, label=label, style=self.style,
-                   **kwargs)
+            newline = tsplot(data, plotf, ax=ax, label=label, style=self.style,
+                             **kwargs)[0]
             ax.grid(self.grid)
+            lines.append(newline)
+            labels.append(label)
         else:
             for i, col in enumerate(data.columns):
                 ax, style = self._get_ax_and_style(i, col)
                 label = com._stringify(col)
-                tsplot(data[col], plotf, ax=ax, label=label, style=style,
-                       **kwargs)
+                newline = tsplot(data[col], plotf, ax=ax, label=label,
+                                 style=style, **kwargs)[0]
+                lines.append(newline)
+                labels.append(label)
                 ax.grid(self.grid)
 
+        if self.legend and not self.subplots:
+            ax.legend(lines, labels, loc='best', title=self.legend_title)
+
         # self.fig.subplots_adjust(wspace=0, hspace=0)
 
 
@@ -926,6 +971,7 @@ class LinePlot(MPLPlot):
             if index_name is not None:
                 ax.set_xlabel(index_name)
 
+
 class BarPlot(MPLPlot):
     _default_rot = {'bar' : 90, 'barh' : 0}
 
@@ -1715,6 +1761,8 @@ def _subplots(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True,
         orig_ax = ax0
         ax0 = ax0.twinx()
         orig_ax.get_yaxis().set_visible(False)
+        orig_ax.right_ax = ax0
+        ax0.left_ax = orig_ax
 
     if sharex:
         subplot_kw['sharex'] = ax0
diff --git a/pandas/tseries/plotting.py b/pandas/tseries/plotting.py
index bb1177478..0541f07eb 100644
--- a/pandas/tseries/plotting.py
+++ b/pandas/tseries/plotting.py
@@ -1,5 +1,6 @@
 """
-Adapted from scikits.timeseries by Pierre GF Gerard-Marchant & Matt Knox
+Period formatters and locators adapted from scikits.timeseries by
+Pierre GF Gerard-Marchant & Matt Knox
 """
 
 #!!! TODO: Use the fact that axis can have units to simplify the process
@@ -74,18 +75,14 @@ def tsplot(series, plotf, **kwargs):
     if style is not None:
         args.append(style)
 
-    plotf(ax, *args,  **kwargs)
-
-    if (ax.get_legend() is None and kwargs.get('legend', True)
-        and len(ax._plot_data) > 1):
-        ax.legend(loc='best')
+    line = plotf(ax, *args,  **kwargs)
 
     # set date formatter, locators and rescale limits
     format_dateaxis(ax, ax.freq)
     left, right = _get_xlim(ax.get_lines())
     ax.set_xlim(left, right)
 
-    return ax
+    return line
 
 def _maybe_resample(series, ax, freq, plotf, kwargs):
     ax_freq = getattr(ax, 'freq', None)
@@ -102,7 +99,7 @@ def _maybe_resample(series, ax, freq, plotf, kwargs):
             series = series.resample(ax_freq, how=how).dropna()
             freq = ax_freq
         elif _is_sub(freq, ax_freq):
-            _upsample_others(series, ax, freq, ax_freq, plotf, kwargs, True)
+            _upsample_others(ax, freq, ax_freq, plotf, kwargs, True)
             ax_freq = freq
         else:
             raise ValueError('Incompatible frequency conversion')
@@ -116,17 +113,42 @@ def _is_sup(f1, f2):
     return ((f1.startswith('W') and frequencies.is_superperiod('D', f2)) or
             (f2.startswith('W') and frequencies.is_superperiod(f1, 'D')))
 
-def _upsample_others(series, ax, freq, ax_freq, plotf, kwargs,
+def _upsample_others(ax, freq, ax_freq, plotf, kwargs,
                      via_daily=False):
+    legend = ax.get_legend()
+    lines, labels = _replot_ax(ax, freq, ax_freq, plotf, kwargs, via_daily)
+
+    other_ax = None
+    if hasattr(ax, 'left_ax'):
+        other_ax = ax.left_ax
+    if hasattr(ax, 'right_ax'):
+        other_ax = ax.right_ax
+
+    if other_ax is not None:
+        other_leg = other_ax.get_legend()
+        rlines, rlabels = _replot_ax(ax, freq, ax_freq, plotf, kwargs,
+                                     via_daily)
+        lines.extend(rlines)
+        labels.extend(rlabels)
+
+    if legend is not None and kwargs.get('legend', True):
+        ax.legend(lines, labels, loc='best', ax.get_title().get_text())
+
+def _replot_ax(ax, freq, ax_freq, plotf, kwargs, via_daily):
     data = ax._plot_data
     ax._plot_data = []
     ax.clear()
     _decorate_axes(ax, freq, kwargs)
+    lines = []
+    labels = []
     for series, kwds in data:
         series = _upsample(series, freq, via_daily)
         ax._plot_data.append(series)
         args = _maybe_mask(series)
-        plotf(ax, *args, **kwds)
+        lines.append(plotf(ax, *args, **kwds)[0])
+        labels.append(com._stringify(series.name))
+
+    return lines, labels
 
 def _upsample(series, freq, via_daily):
     if not via_daily:
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index 06fa4067a..14ff96f49 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -73,8 +73,7 @@ class TestTSPlot(unittest.TestCase):
 
         ax = plt.gca()
         ts = tm.makeTimeSeries()
-        plot_ax = tsplot(ts, plt.Axes.plot)
-        self.assert_(plot_ax == ax)
+        tsplot(ts, plt.Axes.plot)
 
         f = lambda *args, **kwds: tsplot(s, plt.Axes.plot, *args, **kwds)
         plt.close('all')
