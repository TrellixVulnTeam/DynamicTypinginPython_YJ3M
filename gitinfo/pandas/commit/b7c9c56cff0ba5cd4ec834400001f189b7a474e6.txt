commit b7c9c56cff0ba5cd4ec834400001f189b7a474e6
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Sun Mar 15 19:28:55 2020 -0700

    CLN: Prelims for stronger typing in Block methods (#32712)

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index fc5d071d7..baa6fb07f 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -6509,7 +6509,7 @@ Wild         185.0
     # ----------------------------------------------------------------------
     # Time series-related
 
-    def diff(self, periods=1, axis=0) -> "DataFrame":
+    def diff(self, periods: int = 1, axis: Axis = 0) -> "DataFrame":
         """
         First discrete difference of element.
 
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 8d5631133..9720819ad 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -8587,12 +8587,15 @@ class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):
             for dt in cond.dtypes:
                 if not is_bool_dtype(dt):
                     raise ValueError(msg.format(dtype=dt))
+        else:
+            # GH#21947 we have an empty DataFrame, could be object-dtype
+            cond = cond.astype(bool)
 
         cond = -cond if inplace else cond
 
         # try to align with other
         try_quick = True
-        if hasattr(other, "align"):
+        if isinstance(other, NDFrame):
 
             # align with me
             if other.ndim <= self.ndim:
diff --git a/pandas/core/internals/managers.py b/pandas/core/internals/managers.py
index 93d4b0231..3a7ab98ea 100644
--- a/pandas/core/internals/managers.py
+++ b/pandas/core/internals/managers.py
@@ -569,8 +569,8 @@ class BlockManager(PandasObject):
     def putmask(self, **kwargs):
         return self.apply("putmask", **kwargs)
 
-    def diff(self, **kwargs) -> "BlockManager":
-        return self.apply("diff", **kwargs)
+    def diff(self, n: int, axis: int) -> "BlockManager":
+        return self.apply("diff", n=n, axis=axis)
 
     def interpolate(self, **kwargs) -> "BlockManager":
         return self.apply("interpolate", **kwargs)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index e120695cc..501555aee 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -872,6 +872,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
             if com.is_bool_indexer(key):
                 key = check_bool_indexer(self.index, key)
+                key = np.asarray(key, dtype=bool)
                 return self._get_values(key)
 
         return self._get_with(key)
@@ -993,6 +994,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
             if com.is_bool_indexer(key):
                 key = check_bool_indexer(self.index, key)
+                key = np.asarray(key, dtype=bool)
                 try:
                     self._where(~key, value, inplace=True)
                     return
@@ -2240,7 +2242,7 @@ Name: Max Speed, dtype: float64
             return np.nan
         return nanops.nancov(this.values, other.values, min_periods=min_periods)
 
-    def diff(self, periods=1) -> "Series":
+    def diff(self, periods: int = 1) -> "Series":
         """
         First discrete difference of element.
 
diff --git a/pandas/tests/frame/indexing/test_where.py b/pandas/tests/frame/indexing/test_where.py
index eee754a47..bbf8ee597 100644
--- a/pandas/tests/frame/indexing/test_where.py
+++ b/pandas/tests/frame/indexing/test_where.py
@@ -397,7 +397,8 @@ class TestDataFrameIndexingWhere:
     def test_where_empty_df_and_empty_cond_having_non_bool_dtypes(self):
         # see gh-21947
         df = pd.DataFrame(columns=["a"])
-        cond = df.applymap(lambda x: x > 0)
+        cond = df
+        assert (cond.dtypes == object).all()
 
         result = df.where(cond)
         tm.assert_frame_equal(result, df)
