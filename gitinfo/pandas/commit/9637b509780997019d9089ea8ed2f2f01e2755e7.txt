commit 9637b509780997019d9089ea8ed2f2f01e2755e7
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Jan 18 19:56:23 2012 -0500

    BLD: python 3 compatibility for now, GH #648

diff --git a/pandas/src/hashtable.pyx b/pandas/src/hashtable.pyx
index e496dbea2..0e643bccf 100644
--- a/pandas/src/hashtable.pyx
+++ b/pandas/src/hashtable.pyx
@@ -1,6 +1,4 @@
 from khash cimport *
-from cpython cimport PyString_Check, PyString_AsString
-
 
 def test(ndarray arr, Py_ssize_t size_hint):
     cdef:
@@ -55,7 +53,7 @@ def test_str(ndarray arr, Py_ssize_t size_hint):
     indexer = np.empty(n, dtype=np.int_)
 
     for i in range(n):
-        k = kh_put_str(table, PyString_AsString(<object> data[i]), &ret)
+        k = kh_put_str(table, util.get_c_string(<object> data[i]), &ret)
 
         # if not ret:
         #     kh_del_str(table, k)
@@ -172,11 +170,11 @@ cdef class StringHashTable:
         kh_destroy_str(self.table)
 
     cdef inline int check_type(self, object val):
-        return PyString_Check(val)
+        return util.is_string_object(val)
 
     cpdef get_item(self, object val):
         cdef khiter_t k
-        k = kh_get_str(self.table, PyString_AsString(val))
+        k = kh_get_str(self.table, util.get_c_string(val))
         if k != self.table.n_buckets:
             return self.table.vals[k]
         else:
@@ -185,7 +183,7 @@ cdef class StringHashTable:
     def get_iter_test(self, object key, Py_ssize_t iterations):
         cdef Py_ssize_t i, val
         for i in range(iterations):
-            k = kh_get_str(self.table, PyString_AsString(key))
+            k = kh_get_str(self.table, util.get_c_string(key))
             if k != self.table.n_buckets:
                 val = self.table.vals[k]
 
@@ -195,7 +193,7 @@ cdef class StringHashTable:
             int ret
             char* buf
 
-        buf = PyString_AsString(key)
+        buf = util.get_c_string(key)
 
         k = kh_put_str(self.table, buf, &ret)
         self.table.keys[k] = key
@@ -214,7 +212,7 @@ cdef class StringHashTable:
             kh_str_t *table = self.table
 
         for i in range(n):
-            buf = PyString_AsString(values[i])
+            buf = util.get_c_string(values[i])
             k = kh_get_str(table, buf)
             if k != table.n_buckets:
                 resbuf[i] = table.vals[k]
@@ -234,7 +232,7 @@ cdef class StringHashTable:
 
         for i in range(n):
             val = values[i]
-            buf = PyString_AsString(val)
+            buf = util.get_c_string(val)
             k = kh_get_str(self.table, buf)
             if k == self.table.n_buckets:
                 k = kh_put_str(self.table, buf, &ret)
@@ -261,7 +259,7 @@ cdef class StringHashTable:
 
         for i in range(n):
             val = values[i]
-            buf = PyString_AsString(val)
+            buf = util.get_c_string(val)
             k = kh_get_str(self.table, buf)
             if k != self.table.n_buckets:
                 idx = self.table.vals[k]
@@ -298,7 +296,7 @@ cdef class Int32HashTable:
         kh_destroy_int32(self.table)
 
     cdef inline int check_type(self, object val):
-        return PyString_Check(val)
+        return util.is_string_object(val)
 
     cpdef get_item(self, int32_t val):
         cdef khiter_t k
@@ -404,9 +402,6 @@ cdef class Int64HashTable:
     def __dealloc__(self):
         kh_destroy_int64(self.table)
 
-    cdef inline int check_type(self, object val):
-        return PyString_Check(val)
-
     cpdef get_item(self, int64_t val):
         cdef khiter_t k
         k = kh_get_int64(self.table, val)
diff --git a/pandas/src/numpy_helper.h b/pandas/src/numpy_helper.h
index 83ae9b61b..53490c65e 100644
--- a/pandas/src/numpy_helper.h
+++ b/pandas/src/numpy_helper.h
@@ -72,6 +72,31 @@ get_value_1d(PyArrayObject* ap, Py_ssize_t i) {
   return PyArray_Scalar(item, PyArray_DESCR(ap), (PyObject*) ap);
 }
 
+
+PANDAS_INLINE char*
+get_c_string(PyObject* obj) {
+#if PY_VERSION_HEX >= 0x03000000
+  PyObject* enc_str = PyUnicode_AsEncodedString(obj);
+  char *ret;
+  ret = PyBytes_AS_STRING(enc_str);
+
+  Py_XDECREF(enc_str);
+  return ret;
+#else
+  return PyString_AsString(obj);
+#endif
+}
+
+// PANDAS_INLINE int
+// is_string(PyObject* obj) {
+// #if PY_VERSION_HEX >= 0x03000000
+//   return PyUnicode_Check(obj);
+// #else
+//   return PyString_Check(obj);
+// #endif
+
+
+
 // PANDAS_INLINE PyObject*
 // get_base_ndarray(PyObject* ap) {
 //   // if (!ap || (NULL == ap)) {
diff --git a/pandas/src/util.pxd b/pandas/src/util.pxd
index 7445a3048..da75ff98e 100644
--- a/pandas/src/util.pxd
+++ b/pandas/src/util.pxd
@@ -2,13 +2,13 @@ from numpy cimport ndarray
 cimport numpy as cnp
 
 cdef extern from "numpy_helper.h":
-    inline int is_integer_object(object)
-    inline int is_float_object(object)
-    inline int is_bool_object(object)
-    inline int is_string_object(object)
+    inline bint is_integer_object(object)
+    inline bint is_float_object(object)
+    inline bint is_bool_object(object)
+    inline bint is_string_object(object)
     inline int assign_value_1d(ndarray, Py_ssize_t, object) except -1
     inline object get_value_1d(ndarray, Py_ssize_t)
-
+    inline char *get_c_string(object)
 
 cdef inline object get_value_at(ndarray arr, object loc):
     cdef:
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index b335fe8dd..9a6c9c4b6 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -4344,7 +4344,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 if __name__ == '__main__':
     # unittest.main()
     import nose
-    # nose.runmodule(argv=[__file__,'-vvs','-x', '--pdb-failure'],
+    # nose.runmodule(argv=[__file__,'-vvs','-x', '--ipdb-failure'],
     #                exit=False)
-    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
+    nose.runmodule(argv=[__file__,'-vvs','-x','--ipdb', '--ipdb-failure'],
                    exit=False)
diff --git a/pandas/tools/tests/test_pivot.py b/pandas/tools/tests/test_pivot.py
index 12164d01e..bcd4aab1f 100644
--- a/pandas/tools/tests/test_pivot.py
+++ b/pandas/tools/tests/test_pivot.py
@@ -227,7 +227,7 @@ class TestCrosstab(unittest.TestCase):
 
 if __name__ == '__main__':
     import nose
-    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
+    nose.runmodule(argv=[__file__,'-vvs','-x','--ipdb', '--ipdb-failure'],
                    exit=False)
 
 
