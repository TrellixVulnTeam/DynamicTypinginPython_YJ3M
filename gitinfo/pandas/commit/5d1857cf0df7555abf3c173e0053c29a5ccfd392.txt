commit 5d1857cf0df7555abf3c173e0053c29a5ccfd392
Author: alex argunov <sajkoooo@gmail.com>
Date:   Wed Feb 17 08:19:53 2016 -0500

    CLN: change getargspec -> signature
    
    Change signature in compat to be able to return defaults, varargs,
    kwargs    Closes #12171
    
    Author: alex argunov <sajkoooo@gmail.com>
    
    Closes #12325 from troglotit/getargspec_deprecation and squashes the following commits:
    
    e9153d9 [alex argunov] Add reference to Django; import to the top
    522df01 [alex argunov] CLN: change getargspec -> signature

diff --git a/pandas/compat/__init__.py b/pandas/compat/__init__.py
index d991b3f1f..cbdb69d1d 100644
--- a/pandas/compat/__init__.py
+++ b/pandas/compat/__init__.py
@@ -36,6 +36,7 @@ import types
 from unicodedata import east_asian_width
 import struct
 import inspect
+from collections import namedtuple
 
 PY2 = sys.version_info[0] == 2
 PY3 = (sys.version_info[0] >= 3)
@@ -70,8 +71,32 @@ if PY3:
     def bytes_to_str(b, encoding=None):
         return b.decode(encoding or 'utf-8')
 
+    # The signature version below is directly copied from Django,
+    # https://github.com/django/django/pull/4846
     def signature(f):
-        return list(inspect.signature(f).parameters.keys())
+        sig = inspect.signature(f)
+        args = [
+            p.name for p in sig.parameters.values()
+            if p.kind == inspect.Parameter.POSITIONAL_OR_KEYWORD
+            ]
+        varargs = [
+            p.name for p in sig.parameters.values()
+            if p.kind == inspect.Parameter.VAR_POSITIONAL
+            ]
+        varargs = varargs[0] if varargs else None
+        keywords = [
+            p.name for p in sig.parameters.values()
+            if p.kind == inspect.Parameter.VAR_KEYWORD
+            ]
+        keywords = keywords[0] if keywords else None
+        defaults = [
+            p.default for p in sig.parameters.values()
+            if p.kind == inspect.Parameter.POSITIONAL_OR_KEYWORD
+            and p.default is not p.empty
+            ] or None
+        argspec = namedtuple('Signature',['args','defaults',
+                                'varargs','keywords'])
+        return argspec(args,defaults,varargs,keywords)
 
     # have to explicitly put builtins into the namespace
     range = range
@@ -110,7 +135,7 @@ else:
         return b
 
     def signature(f):
-        return inspect.getargspec(f).args
+        return inspect.getargspec(f)
 
     # import iterator versions of these functions
     range = xrange
diff --git a/pandas/tests/series/test_analytics.py b/pandas/tests/series/test_analytics.py
index a9dfe07c2..455e5cda0 100644
--- a/pandas/tests/series/test_analytics.py
+++ b/pandas/tests/series/test_analytics.py
@@ -1,7 +1,6 @@
 # coding=utf-8
 # pylint: disable-msg=E1101,W0612
 
-from inspect import getargspec
 from itertools import product
 from distutils.version import LooseVersion
 
@@ -465,7 +464,7 @@ class TestSeriesAnalytics(TestData, tm.TestCase):
             self.assertRaises(ValueError, f, self.series, axis=1)
 
             # Unimplemented numeric_only parameter.
-            if 'numeric_only' in getargspec(f).args:
+            if 'numeric_only' in compat.signature(f).args:
                 self.assertRaisesRegexp(NotImplementedError, name, f,
                                         self.series, numeric_only=True)
 
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 9b9f952bb..dd7468723 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -201,7 +201,7 @@ class SafeForLongAndSparse(object):
         self.assertRaises(Exception, f, axis=obj.ndim)
 
         # Unimplemented numeric_only parameter.
-        if 'numeric_only' in signature(f):
+        if 'numeric_only' in signature(f).args:
             self.assertRaisesRegexp(NotImplementedError, name, f,
                                     numeric_only=True)
 
diff --git a/pandas/util/decorators.py b/pandas/util/decorators.py
index c2d25b30c..0a59c2e8e 100644
--- a/pandas/util/decorators.py
+++ b/pandas/util/decorators.py
@@ -1,4 +1,4 @@
-from pandas.compat import StringIO, callable
+from pandas.compat import StringIO, callable, signature
 from pandas.lib import cache_readonly  # noqa
 import sys
 import warnings
@@ -275,8 +275,7 @@ def make_signature(func):
     >>> print(_make_signature(f))
     a,b,c=2
     """
-    from inspect import getargspec
-    spec = getargspec(func)
+    spec = signature(func)
     if spec.defaults is None:
         n_wo_defaults = len(spec.args)
         defaults = ('',) * n_wo_defaults
