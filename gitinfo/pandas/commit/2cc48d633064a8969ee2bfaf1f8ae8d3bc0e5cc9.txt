commit 2cc48d633064a8969ee2bfaf1f8ae8d3bc0e5cc9
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Sep 11 11:37:18 2011 -0400

    BUG: win64 buglet in pytables IO

diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index c2eee0094..9b1e96178 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -676,9 +676,10 @@ def _convert_index(index):
         converted = np.array(list(values), dtype=np.str_)
         itemsize = converted.dtype.itemsize
         return converted, 'string', _tables().StringCol(itemsize)
-    elif isinstance(values[0], (int, np.integer)):
+    elif isinstance(values[0], (long, int, np.integer)):
         # take a guess for now, hope the values fit
-        return np.asarray(values, dtype=int), 'integer', _tables().Int64Col()
+        atom = _tables().Int64Col()
+        return np.asarray(values, dtype=np.int64), 'integer', atom
     else: # pragma: no cover
         raise ValueError('unrecognized index type %s' % type(values[0]))
 
diff --git a/scripts/git_code_churn.py b/scripts/git_code_churn.py
new file mode 100644
index 000000000..2afece76e
--- /dev/null
+++ b/scripts/git_code_churn.py
@@ -0,0 +1,115 @@
+from dateutil import parser
+import subprocess
+import os
+import re
+import sys
+
+import numpy as np
+
+from pandas import *
+
+repo_path = '/home/wesm/code/pandas'
+githist = ('git log --pretty=format:\"%h %ad | %s%d [%an]\" --date=short ' +
+           repo_path + ' > githist.txt')
+
+def rungithist():
+    os.system(githist)
+
+def get_commit_history():
+    # return TimeSeries
+
+    rungithist()
+
+    githist = open('githist.txt').read()
+    os.remove('githist.txt')
+
+    sha_date = []
+    for line in githist.split('\n'):
+        sha_date.append(line.split()[:2])
+
+    shas, dates = zip(*sha_date)
+
+    hists = dict(zip(shas, githist.split('\n')))
+
+    dates = [parser.parse(d) for d in dates]
+
+    return Series(dates, shas), hists
+
+def get_commit_churn(sha, prev_sha):
+    stdout = subprocess.Popen(['git', 'diff', sha, prev_sha, '--numstat'],
+                              stdout=subprocess.PIPE).stdout
+
+    stdout = stdout.read()
+
+    insertions = {}
+    deletions = {}
+
+    for line in stdout.split('\n'):
+        try:
+            i, d, path = line.split('\t')
+            insertions[path] = int(i)
+            deletions[path] = int(d)
+        except: # EAFP
+            pass
+
+    # statline = stdout.split('\n')[-2]
+
+    # match = re.match('.*\s(.*)\sinsertions.*\s(.*)\sdeletions', statline)
+
+    # insertions = int(match.group(1))
+    # deletions = int(match.group(2))
+
+    return insertions, deletions
+
+def get_code_churn(commits):
+    shas = commits.index[::-1]
+
+    prev = shas[0]
+
+    insertions = [np.nan]
+    deletions = [np.nan]
+
+    insertions = {}
+    deletions = {}
+
+    for cur in shas[1:]:
+        i, d = get_commit_churn(cur, prev)
+
+        insertions[cur] = i
+        deletions[cur] = d
+
+        # insertions.append(i)
+        # deletions.append(d)
+
+        prev = cur
+
+    return Panel({'insertions' : DataFrame(insertions),
+                  'deletions' : DataFrame(deletions)}, minor_axis=shas)
+
+
+    # return DataFrame({'insertions' : insertions,
+    #                   'deletions' : deletions}, index=shas)
+
+if __name__ == '__main__':
+    commits, hists = get_commit_history()
+    churn = get_code_churn(commits)
+
+    file_include = []
+    for path in churn.major_axis:
+        if path.endswith('.pyx') or path.endswith('.py'):
+            file_include.append(path)
+    commits_include = [sha for sha in churn.minor_axis
+                       if 'LF' not in hists[sha]]
+    commits_include.remove('dcf3490')
+
+    clean_churn = churn.reindex(major=file_include, minor=commits_include)
+
+    by_commit = clean_churn.sum('major').sum(1)
+
+    by_date = by_commit.groupby(commits).sum()
+
+    by_date = by_date.drop([datetime(2011, 6, 10)]
+
+    # clean out days where I touched Cython
+
+    by_date = by_date[by_date.sum(1) < 5000]
