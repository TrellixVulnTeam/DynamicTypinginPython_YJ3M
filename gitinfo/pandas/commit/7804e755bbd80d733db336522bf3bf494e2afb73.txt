commit 7804e755bbd80d733db336522bf3bf494e2afb73
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Aug 21 17:19:31 2011 -0400

    TST: Index/MultiIndex tests, other misc coverage

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 6235601a5..34d7b7e0a 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -331,3 +331,18 @@ def intersection(*seqs):
             seq = set(seq)
         result &= seq
     return type(seqs[0])(list(result))
+
+def _asarray_tuplesafe(values):
+    if not isinstance(values, (list, np.ndarray)):
+        values = list(values)
+
+    result = np.asarray(values)
+
+    if issubclass(result.dtype.type, basestring):
+        result = np.asarray(values, dtype=object)
+
+    if result.ndim == 2:
+        result = np.empty(len(values), dtype=object)
+        result[:] = values
+
+    return result
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 10c538b6f..305907e81 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -308,20 +308,3 @@ class NDFrame(PandasObject):
         result[count == 0] = np.NaN
 
         return result
-
-    def _values_accum(self, func, axis, fill_value):
-        axis = self._get_axis_number(axis)
-
-        values = self.values
-        mask = np.isfinite(values)
-
-        if fill_value is not None:
-            values = values.copy()
-            values[-mask] = fill_value
-
-        result = func(values, axis=axis)
-
-        if fill_value is not None:
-            result[-mask] = np.NaN
-
-        return result
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 2f8fba00c..ddf215419 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -6,7 +6,8 @@ from itertools import izip
 import numpy as np
 
 from pandas.core.common import (_format, adjoin as _adjoin, _stringify,
-                                _ensure_index, _is_bool_indexer)
+                                _ensure_index, _is_bool_indexer,
+                                _asarray_tuplesafe)
 import pandas.core.common as common
 import pandas._tseries as _tseries
 
@@ -412,6 +413,9 @@ class MultiIndex(Index):
             return False
 
     def format(self, space=2, sparsify=True, vertical=False, adjoin=True):
+        if len(self) == 0:
+            return []
+
         stringified_levels = [lev.format() for lev in self.levels]
 
         result_levels = []
@@ -525,10 +529,12 @@ class MultiIndex(Index):
 
     def drop(self, labels):
         try:
-            arr = np.asarray(list(labels), dtype=object)
-            indexer, mask = self.get_indexer(arr)
+            if not isinstance(labels, np.ndarray):
+                labels = _asarray_tuplesafe(labels)
+            indexer, mask = self.get_indexer(labels)
             if not mask.all():
-                raise ValueError('labels %s not contained in axis' % arr[-mask])
+                raise ValueError('labels %s not contained in axis' % labels[-mask])
+            return self.delete(indexer)
         except Exception:
             pass
 
@@ -871,10 +877,6 @@ NULL_INDEX = Index([])
 
 def _sparsify(label_list):
     pivoted = zip(*label_list)
-
-    if len(pivoted) == 0:
-        return label_list
-
     k = len(label_list)
 
     result = [pivoted[0]]
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index d487c3f76..c2186768c 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -1,3 +1,4 @@
+from pandas.core.common import _asarray_tuplesafe
 from pandas.core.index import MultiIndex
 
 import numpy as np
@@ -313,20 +314,5 @@ def _maybe_droplevels(index, key):
 
     return index
 
-def _asarray_tuplesafe(values):
-    if not isinstance(values, (list, np.ndarray)):
-        values = list(values)
-
-    result = np.asarray(values)
-
-    if issubclass(result.dtype.type, basestring):
-        result = np.asarray(values, dtype=object)
-
-    if result.ndim == 2:
-        result = np.empty(len(values), dtype=object)
-        result[:] = values
-
-    return result
-
 _isboolarr = lambda x: np.asarray(x).dtype == np.bool_
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index bea5bb812..c0f3c374d 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2449,6 +2449,11 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         cumprod_xs = self.tsframe.cumprod(axis=1)
         self.assertEqual(np.shape(cumprod_xs), np.shape(self.tsframe))
 
+        # ints
+        df = self.tsframe.astype(int)
+        df.cumprod(0)
+        df.cumprod(1)
+
     def test_describe(self):
         desc = self.tsframe.describe()
         desc = self.mixed_frame.describe()
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 9c2bc46df..0cacfef99 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -236,6 +236,8 @@ class TestIndex(unittest.TestCase):
         expected = [str(index[0])]
         self.assertEquals(formatted, expected)
 
+        self.strIndex[:0].format()
+
     def test_take(self):
         indexer = [4, 3, 0, 2]
         result = self.dateIndex.take(indexer)
@@ -284,6 +286,15 @@ class TestIndex(unittest.TestCase):
         self.assertEquals(idx.slice_locs(end=8), (0, 6))
         self.assertEquals(idx.slice_locs(end=9), (0, 7))
 
+    def test_drop(self):
+        n = len(self.strIndex)
+
+        dropped = self.strIndex.drop(self.strIndex[range(5, 10)])
+        expected = self.strIndex[range(5) + range(10, n)]
+        self.assert_(dropped.equals(expected))
+
+        self.assertRaises(ValueError, self.strIndex.drop, ['foo', 'bar'])
+
 class TestMultiIndex(unittest.TestCase):
 
     def setUp(self):
@@ -506,6 +517,7 @@ class TestMultiIndex(unittest.TestCase):
 
     def test_format(self):
         self.index.format()
+        self.index[:0].format()
 
     def test_bounds(self):
         self.index._bounds
@@ -619,6 +631,23 @@ class TestMultiIndex(unittest.TestCase):
     def test_dims(self):
         pass
 
+    def test_drop(self):
+        dropped = self.index.drop([('foo', 'two'), ('qux', 'one')])
+
+        index = MultiIndex.from_tuples([('foo', 'two'), ('qux', 'one')])
+        dropped2 = self.index.drop(index)
+
+        expected = self.index[[0, 2, 3, 5]]
+        self.assert_(dropped.equals(expected))
+        self.assert_(dropped2.equals(expected))
+
+        dropped = self.index.drop(['bar'])
+        expected = self.index[[0, 1, 3, 4, 5]]
+        self.assert_(dropped.equals(expected))
+
+        index = MultiIndex.from_tuples([('bar', 'two')])
+        self.assertRaises(Exception, self.index.drop, [('bar', 'two')])
+        self.assertRaises(Exception, self.index.drop, index)
 
 class TestFactor(unittest.TestCase):
 
