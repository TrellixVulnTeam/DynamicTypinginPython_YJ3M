commit 6c3a89d33417367091bcb831c64ef6c8a61d8e30
Author: jreback <jeff@reback.net>
Date:   Tue Apr 30 16:57:35 2013 -0400

    CLN: _possibily_convert_datetimes now uses to_datetimes internally

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 5d1f6a7e7..099c5e1bf 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -1084,6 +1084,12 @@ def _possibly_cast_to_datetime(value, dtype, coerce = False):
 
         if is_datetime64 or is_timedelta64:
 
+            # force the dtype if needed
+            #if is_datetime64 and dtype != 'datetime64[ns]':
+            #    dtype = np.dtype('datetime64[ns]')
+            #elif is_timedelta64 and dtype != 'timedelta64[ns]':
+            #    dtype = np.dtype('timedelta64[ns]')
+
             if np.isscalar(value):
                 if value == tslib.iNaT or isnull(value):
                     value = tslib.iNaT
@@ -1098,7 +1104,9 @@ def _possibly_cast_to_datetime(value, dtype, coerce = False):
                 elif np.prod(value.shape) and value.dtype != dtype:
                     try:
                         if is_datetime64:
-                            value = tslib.array_to_datetime(value, coerce = coerce)
+                            from pandas.tseries.tools import to_datetime
+                            value = to_datetime(value, coerce=coerce).values
+                            #value = tslib.array_to_datetime(value, coerce = coerce)
                         elif is_timedelta64:
                             value = _possibly_cast_to_timedelta(value)
                     except:
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 3918cad4e..265403f8a 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -470,7 +470,6 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         self.assert_(s.dtype == 'M8[ns]')
 
         # GH3416
-        import pdb; pdb.set_trace()
         dates = [
             np.datetime64(datetime(2013, 1, 1)),
             np.datetime64(datetime(2013, 1, 2)),
@@ -483,6 +482,14 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         s.ix[0] = np.nan
         self.assert_(s.dtype == 'M8[ns]')
 
+        # GH3414 related
+        #import pdb; pdb.set_trace()
+        #result = Series(Series(dates).astype('int')/1e6,dtype='M8[ms]')
+        #self.assert_(result.dtype == 'M8[ns]')
+
+        #s = Series(dates, dtype='datetime64')
+        #self.assert_(s.dtype == 'M8[ns]')
+
     def test_constructor_dict(self):
         d = {'a': 0., 'b': 1., 'c': 2.}
         result = Series(d, index=['b', 'c', 'd', 'a'])
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index e52d9c9c8..9b20ac1e3 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -1470,7 +1470,7 @@ class TestTimeSeries(unittest.TestCase):
                         (3, np.datetime64('2012-07-04'))],
                        columns=['a', 'date'])
         result = df.groupby('a').first()
-        self.assertEqual(result['date'][3], np.datetime64('2012-07-03'))
+        self.assertEqual(result['date'][3], datetime(2012,7,3))
 
     def test_series_interpolate_intraday(self):
         # #1698
diff --git a/pandas/tseries/tools.py b/pandas/tseries/tools.py
index f9608be01..62ee19da6 100644
--- a/pandas/tseries/tools.py
+++ b/pandas/tseries/tools.py
@@ -50,7 +50,7 @@ def _maybe_get_tz(tz):
 
 
 def to_datetime(arg, errors='ignore', dayfirst=False, utc=None, box=True,
-                format=None):
+                format=None, coerce=False):
     """
     Convert argument to datetime
 
@@ -68,6 +68,7 @@ def to_datetime(arg, errors='ignore', dayfirst=False, utc=None, box=True,
         If True returns a DatetimeIndex, if False returns ndarray of values
     format : string, default None
         strftime to parse time, eg "%d/%m/%Y"
+    coerce : force errors to NaT (False by default)
 
     Returns
     -------
@@ -84,7 +85,8 @@ def to_datetime(arg, errors='ignore', dayfirst=False, utc=None, box=True,
                 result = tslib.array_strptime(arg, format)
             else:
                 result = tslib.array_to_datetime(arg, raise_=errors == 'raise',
-                                                 utc=utc, dayfirst=dayfirst)
+                                                 utc=utc, dayfirst=dayfirst,
+                                                 coerce=coerce)
             if com.is_datetime64_dtype(result) and box:
                 result = DatetimeIndex(result, tz='utc' if utc else None)
             return result
