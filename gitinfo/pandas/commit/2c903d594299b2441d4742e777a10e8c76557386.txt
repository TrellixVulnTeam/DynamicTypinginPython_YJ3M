commit 2c903d594299b2441d4742e777a10e8c76557386
Author: David Fischer <david.fischer.ch@gmail.com>
Date:   Mon Dec 4 13:55:54 2017 +0100

    json_normalize: Make code more pythonic and avoid modification of meta if mutable (#18610)

diff --git a/doc/source/whatsnew/v0.21.1.txt b/doc/source/whatsnew/v0.21.1.txt
index 3d4850b33..a9608594b 100644
--- a/doc/source/whatsnew/v0.21.1.txt
+++ b/doc/source/whatsnew/v0.21.1.txt
@@ -90,6 +90,7 @@ I/O
 - Bug in parsing integer datetime-like columns with specified format in ``read_sql`` (:issue:`17855`).
 - Bug in :meth:`DataFrame.to_msgpack` when serializing data of the numpy.bool_ datatype (:issue:`18390`)
 - Bug in :func:`read_json` not decoding when reading line deliminted JSON from S3 (:issue:`17200`)
+- Bug in :func:`pandas.io.json.json_normalize` to avoid modification of ``meta`` (:issue:`18610`)
 
 Plotting
 ^^^^^^^^
diff --git a/pandas/io/json/normalize.py b/pandas/io/json/normalize.py
index d062e4f28..595031b04 100644
--- a/pandas/io/json/normalize.py
+++ b/pandas/io/json/normalize.py
@@ -181,7 +181,7 @@ def json_normalize(data, record_path=None, meta=None,
 
         return result
 
-    if isinstance(data, list) and len(data) is 0:
+    if isinstance(data, list) and not data:
         return DataFrame()
 
     # A bit of a hackjob
@@ -207,9 +207,7 @@ def json_normalize(data, record_path=None, meta=None,
     elif not isinstance(meta, list):
         meta = [meta]
 
-    for i, x in enumerate(meta):
-        if not isinstance(x, list):
-            meta[i] = [x]
+    meta = [m if isinstance(m, list) else [m] for m in meta]
 
     # Disastrously inefficient for now
     records = []
diff --git a/pandas/tests/io/json/test_normalize.py b/pandas/tests/io/json/test_normalize.py
index 49b765b18..1cceae32c 100644
--- a/pandas/tests/io/json/test_normalize.py
+++ b/pandas/tests/io/json/test_normalize.py
@@ -173,6 +173,21 @@ class TestJSONNormalize(object):
         for val in ['metafoo', 'metabar', 'foo', 'bar']:
             assert val in result
 
+    def test_meta_parameter_not_modified(self):
+        # GH 18610
+        data = [{'foo': 'hello',
+                 'bar': 'there',
+                 'data': [{'foo': 'something', 'bar': 'else'},
+                          {'foo': 'something2', 'bar': 'else2'}]}]
+
+        COLUMNS = ['foo', 'bar']
+        result = json_normalize(data, 'data', meta=COLUMNS,
+                                meta_prefix='meta')
+
+        assert COLUMNS == ['foo', 'bar']
+        for val in ['metafoo', 'metabar', 'foo', 'bar']:
+            assert val in result
+
     def test_record_prefix(self, state_data):
         result = json_normalize(state_data[0], 'counties')
         expected = DataFrame(state_data[0]['counties'])
