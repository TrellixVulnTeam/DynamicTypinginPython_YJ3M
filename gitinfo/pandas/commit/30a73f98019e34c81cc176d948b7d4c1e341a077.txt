commit 30a73f98019e34c81cc176d948b7d4c1e341a077
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Jan 20 19:01:17 2012 -0500

    ENH: try to convert dtypes in Index.map

diff --git a/pandas/src/generate_code.py b/pandas/src/generate_code.py
index a0c8057ef..66f23d390 100644
--- a/pandas/src/generate_code.py
+++ b/pandas/src/generate_code.py
@@ -316,21 +316,20 @@ cpdef map_indices_%(name)s(ndarray[%(c_type)s] index):
 
 groupby_template = """@cython.wraparound(False)
 @cython.boundscheck(False)
-def groupby_%(name)s(ndarray[%(c_type)s] index, ndarray[object] labels):
+def groupby_%(name)s(ndarray[%(c_type)s] index, ndarray labels):
     cdef dict result = {}
-    cdef ndarray[uint8_t] mask
     cdef Py_ssize_t i, length
     cdef list members
     cdef object idx, key
 
     length = len(index)
-    mask = isnullobj(labels).view(np.uint8)
 
     for i in range(length):
-        if mask[i]:
+        key = util.get_value_1d(labels, i)
+
+        if _checknull(key):
             continue
 
-        key = labels[i]
         idx = index[i]
         if key in result:
             members = result[key]
@@ -353,7 +352,7 @@ def arrmap_%(name)s(ndarray[%(c_type)s] index, object func):
     for i in range(length):
         result[i] = func(index[i])
 
-    return result
+    return maybe_convert_objects(result)
 
 """
 
diff --git a/pandas/src/generated.pyx b/pandas/src/generated.pyx
index 5edae9df9..ba1eb0a31 100644
--- a/pandas/src/generated.pyx
+++ b/pandas/src/generated.pyx
@@ -966,21 +966,20 @@ def is_monotonic_bool(ndarray[uint8_t] arr):
 
 @cython.wraparound(False)
 @cython.boundscheck(False)
-def groupby_float64(ndarray[float64_t] index, ndarray[object] labels):
+def groupby_float64(ndarray[float64_t] index, ndarray labels):
     cdef dict result = {}
-    cdef ndarray[uint8_t] mask
     cdef Py_ssize_t i, length
     cdef list members
     cdef object idx, key
 
     length = len(index)
-    mask = isnullobj(labels).view(np.uint8)
 
     for i in range(length):
-        if mask[i]:
+        key = util.get_value_1d(labels, i)
+
+        if _checknull(key):
             continue
 
-        key = labels[i]
         idx = index[i]
         if key in result:
             members = result[key]
@@ -992,21 +991,20 @@ def groupby_float64(ndarray[float64_t] index, ndarray[object] labels):
 
 @cython.wraparound(False)
 @cython.boundscheck(False)
-def groupby_object(ndarray[object] index, ndarray[object] labels):
+def groupby_object(ndarray[object] index, ndarray labels):
     cdef dict result = {}
-    cdef ndarray[uint8_t] mask
     cdef Py_ssize_t i, length
     cdef list members
     cdef object idx, key
 
     length = len(index)
-    mask = isnullobj(labels).view(np.uint8)
 
     for i in range(length):
-        if mask[i]:
+        key = util.get_value_1d(labels, i)
+
+        if _checknull(key):
             continue
 
-        key = labels[i]
         idx = index[i]
         if key in result:
             members = result[key]
@@ -1018,21 +1016,20 @@ def groupby_object(ndarray[object] index, ndarray[object] labels):
 
 @cython.wraparound(False)
 @cython.boundscheck(False)
-def groupby_int32(ndarray[int32_t] index, ndarray[object] labels):
+def groupby_int32(ndarray[int32_t] index, ndarray labels):
     cdef dict result = {}
-    cdef ndarray[uint8_t] mask
     cdef Py_ssize_t i, length
     cdef list members
     cdef object idx, key
 
     length = len(index)
-    mask = isnullobj(labels).view(np.uint8)
 
     for i in range(length):
-        if mask[i]:
+        key = util.get_value_1d(labels, i)
+
+        if _checknull(key):
             continue
 
-        key = labels[i]
         idx = index[i]
         if key in result:
             members = result[key]
@@ -1044,21 +1041,20 @@ def groupby_int32(ndarray[int32_t] index, ndarray[object] labels):
 
 @cython.wraparound(False)
 @cython.boundscheck(False)
-def groupby_int64(ndarray[int64_t] index, ndarray[object] labels):
+def groupby_int64(ndarray[int64_t] index, ndarray labels):
     cdef dict result = {}
-    cdef ndarray[uint8_t] mask
     cdef Py_ssize_t i, length
     cdef list members
     cdef object idx, key
 
     length = len(index)
-    mask = isnullobj(labels).view(np.uint8)
 
     for i in range(length):
-        if mask[i]:
+        key = util.get_value_1d(labels, i)
+
+        if _checknull(key):
             continue
 
-        key = labels[i]
         idx = index[i]
         if key in result:
             members = result[key]
@@ -1070,21 +1066,20 @@ def groupby_int64(ndarray[int64_t] index, ndarray[object] labels):
 
 @cython.wraparound(False)
 @cython.boundscheck(False)
-def groupby_bool(ndarray[uint8_t] index, ndarray[object] labels):
+def groupby_bool(ndarray[uint8_t] index, ndarray labels):
     cdef dict result = {}
-    cdef ndarray[uint8_t] mask
     cdef Py_ssize_t i, length
     cdef list members
     cdef object idx, key
 
     length = len(index)
-    mask = isnullobj(labels).view(np.uint8)
 
     for i in range(length):
-        if mask[i]:
+        key = util.get_value_1d(labels, i)
+
+        if _checknull(key):
             continue
 
-        key = labels[i]
         idx = index[i]
         if key in result:
             members = result[key]
@@ -1106,7 +1101,7 @@ def arrmap_float64(ndarray[float64_t] index, object func):
     for i in range(length):
         result[i] = func(index[i])
 
-    return result
+    return maybe_convert_objects(result)
 
 @cython.wraparound(False)
 @cython.boundscheck(False)
@@ -1119,7 +1114,7 @@ def arrmap_object(ndarray[object] index, object func):
     for i in range(length):
         result[i] = func(index[i])
 
-    return result
+    return maybe_convert_objects(result)
 
 @cython.wraparound(False)
 @cython.boundscheck(False)
@@ -1132,7 +1127,7 @@ def arrmap_int32(ndarray[int32_t] index, object func):
     for i in range(length):
         result[i] = func(index[i])
 
-    return result
+    return maybe_convert_objects(result)
 
 @cython.wraparound(False)
 @cython.boundscheck(False)
@@ -1145,7 +1140,7 @@ def arrmap_int64(ndarray[int64_t] index, object func):
     for i in range(length):
         result[i] = func(index[i])
 
-    return result
+    return maybe_convert_objects(result)
 
 @cython.wraparound(False)
 @cython.boundscheck(False)
@@ -1158,7 +1153,7 @@ def arrmap_bool(ndarray[uint8_t] index, object func):
     for i in range(length):
         result[i] = func(index[i])
 
-    return result
+    return maybe_convert_objects(result)
 
 
 @cython.wraparound(False)
diff --git a/pandas/tests/test_tseries.py b/pandas/tests/test_tseries.py
index 6d15814fc..9958d413e 100644
--- a/pandas/tests/test_tseries.py
+++ b/pandas/tests/test_tseries.py
@@ -261,6 +261,10 @@ def test_pad_backfill_object_segfault():
     expected = np.array([], dtype='i4')
     assert(np.array_equal(result, expected))
 
+def test_arrmap():
+    values = np.array(['foo', 'foo', 'bar', 'bar', 'baz', 'qux'], dtype='O')
+    result = lib.arrmap_object(values, lambda x: x in ['foo', 'bar'])
+    assert(result.dtype == np.bool_)
 
 class TestTypeInference(unittest.TestCase):
 
