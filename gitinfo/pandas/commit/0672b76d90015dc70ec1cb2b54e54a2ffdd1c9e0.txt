commit 0672b76d90015dc70ec1cb2b54e54a2ffdd1c9e0
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Aug 31 16:06:51 2011 -0400

    DOC: yet more basics docs and reorg

diff --git a/doc/source/api.rst b/doc/source/api.rst
index 0a98d1401..7e3368736 100644
--- a/doc/source/api.rst
+++ b/doc/source/api.rst
@@ -362,3 +362,40 @@ GroupBy
 Moving window statistics
 ------------------------
 
+Standard moving window functions
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+.. currentmodule:: pandas.stats.moments
+
+.. autosummary::
+   :toctree: generated/
+Apr 4Apr 11Apr 18Apr 25May 2May 9May 16May 23May 30Jun 6Jun 13Jun 20Jun 27Jul 4Jul 11Jul 18Jul 25Aug 1Aug 8Aug 15Aug 22Aug 29Sep 5
+
+JulAugSepOctNovDec2010FebMarAprMayJunJulAugSepOctNovDec2011FebMarAprMayJunJulAugSepOctNovDec
+
+
+   rolling_count
+   rolling_sum
+   rolling_mean
+   rolling_median
+   rolling_var
+   rolling_std
+   rolling_corr
+   rolling_cov
+   rolling_skew
+   rolling_kurt
+   rolling_apply
+   rolling_quantile
+
+Exponentially-weighted moving window functions
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+.. autosummary::
+   :toctree: generated/
+
+   ewma
+   ewmstd
+   ewmvar
+   ewmcorr
+   ewmcov
+
diff --git a/doc/source/basics.rst b/doc/source/basics.rst
index 6b18aed1c..92fd0eece 100644
--- a/doc/source/basics.rst
+++ b/doc/source/basics.rst
@@ -650,7 +650,7 @@ have the option of inputting a *fill_value*, namely a value to substitute when
 at most one of the values at a location are missing. For example, when adding
 two DataFrame objects, you may wish to treat NaN as 0 unless both DataFrames
 are missing that value, in which case the result will be NaN (you can later
-replace NaN with some other value using **fillna** if you wish).
+replace NaN with some other value using ``fillna`` if you wish).
 
 .. ipython:: python
    :suppress:
@@ -877,6 +877,12 @@ following can be done:
 This means that the reindexed Series's index is the same Python object as the
 DataFrame's index.
 
+
+.. seealso::
+
+   :ref:`Fancy indexing <indexing.fancy>` is an even more concise way of doing
+   reindexing.
+
 .. note::
 
     When writing performance-sensitive code, there is a good reason to spend
@@ -887,6 +893,8 @@ DataFrame's index.
     cycles matter sprinking a few explicit ``reindex`` calls here and there can
     have an impact.
 
+.. _basics.reindex_like:
+
 Reindexing to align with another object
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
@@ -908,102 +916,94 @@ make this simpler:
    df2
    df.reindex_like(df2)
 
+.. _basics.reindex_fill:
+
 Filling while reindexing
 ~~~~~~~~~~~~~~~~~~~~~~~~
 
-For TimeSeries or other ordered Series, an additional argument can be
-specified to perform forward- (referred to as "padding") or
-back-filling:
+``reindex`` takes an optional parameter ``method`` which is a filling method
+chosen from the following table:
 
-::
+.. csv-table::
+    :header: "Method", "Action"
+    :widths: 30, 50
 
-    >>> ts
-    2009-01-02 00:00:00    1.0
-    2009-01-07 00:00:00    4.0
+    pad / ffill, Fill values forward
+    bfill / backfill, Fill values backward
 
-    >>> ts.reindex(dates, method='pad')
-    2009-01-01 00:00:00    nan
-    2009-01-02 00:00:00    1.0
-    2009-01-05 00:00:00    1.0
-    2009-01-06 00:00:00    1.0
-    2009-01-07 00:00:00    4.0
+Other fill methods could be added, of course, but these are the two most
+commonly used for time series data. In a way they only make sense for time
+series or otherwise ordered data, but you may have an application on non-time
+series data where this sort of "interpolation" logic is the correct thing to
+do. More sophisticated interpolation of missing values would be an obvious
+extension.
 
-    >>> ts.reindex(dates, method='backfill')
-    2009-01-01 00:00:00    1.0
-    2009-01-02 00:00:00    1.0
-    2009-01-05 00:00:00    4.0
-    2009-01-06 00:00:00    4.0
-    2009-01-07 00:00:00    4.0
+We illustrate these fill methods on a simple TimeSeries:
 
-.. note::
+.. ipython:: python
 
-    This filling logic assumes that the both the new and old Index
-    objects have ordered values.
+   rng = DateRange('1/3/2000', periods=8)
+   ts = Series(randn(8), index=rng)
+   ts2 = ts[[0, 3, 6]]
+   ts
+   ts2
 
-Two common reindexing methods are provided: **valid** (which we
-already mentioned) and **truncate** (for selecting intervals of index
-values).
+   ts2.reindex(ts.index)
+   ts2.reindex(ts.index, method='ffill')
+   ts2.reindex(ts.index, method='bfill')
 
-::
+Note the same result could have been achieved using :ref:`fillna
+<missing_data.fillna>`:
 
-    >>> ts
-    2009-01-01 00:00:00    0.0
-    2009-01-02 00:00:00    1.0
-    2009-01-05 00:00:00    2.0
-    2009-01-06 00:00:00    3.0
-    2009-01-07 00:00:00    4.0
+.. ipython:: python
 
-    >>> ts.truncate(before=datetime(2009, 1, 5), after=datetime(2009, 1, 6))
-    2009-01-05 00:00:00    2.0
-    2009-01-06 00:00:00    3.0
+   ts2.reindex(ts.index).fillna(method='ffill')
 
-Since writing out datetimes interactively like that can be a bit
-verbose, one can also pass a string date representation:
+Note these methods generally assume that the indexes are **sorted**. They may
+be modified in the future to be a bit more flexible but as time series data is
+ordered most of the time anyway, this has not been a major priority.
 
-::
+.. _basics.drop:
 
-    >>> ts.truncate(after='1/5/2009')
-    2009-01-01 00:00:00    0.0
-    2009-01-02 00:00:00    1.0
-    2009-01-05 00:00:00    2.0
+Dropping labels from an axis
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
+A method closely related to ``reindex`` is the ``drop`` function. It removes a
+set of labels from an axis:
 
-::
+.. ipython:: python
 
-    >>> reindexed = df.reindex(index=new_index,
-                               columns=new_columns)
+   df
+   df.drop(['a', 'd'], axis=0)
+   df.drop(['one'], axis=1)
 
-For time series data, if the new index is higher frequency than the
-old one, you may wish to "fill" holes with the values as of each date:
+Note that the following also works, but a bit less obvious / clean:
 
+.. ipython:: python
 
+   df.reindex(df.index - ['a', 'd'])
 
-Dropping labels from an axis
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+.. _basics.rename:
 
 Renaming / mapping labels
 ~~~~~~~~~~~~~~~~~~~~~~~~~
 
-One might want to relabel the index based on a mapping or
-function. For this the :func:`Series.rename` method is provided. It
-can accept either a dict or a function:
+The ``rename`` method allows you to relabel an axis based on some mapping (a
+dict or Series) or an arbitrary function.
 
-::
+.. ipython:: python
 
-    >>> s
-    a    -0.544970223484
-    b    -0.946388873158
-    c    0.0360854957476
-    d    -0.795018577574
-    e    0.195977583894
-
-    >>> s.rename(str.upper)
-    A    -0.544970223484
-    B    -0.946388873158
-    C    0.0360854957476
-    D    -0.795018577574
-    E    0.195977583894
+   s
+   s.rename(str.upper)
+
+If you pass a function, it must return a value when called with any of the
+labels (and must produce a set of unique values). But if you pass a dict or
+Series, it need only contain a subset of the labels as keys:
+
+.. ipython:: python
 
+   df.rename(columns={'one' : 'foo', 'two' : 'bar'},
+             index={'a' : 'apple', 'b' : 'banana', 'd' : 'durian'})
 
 Iteration
 ---------
diff --git a/doc/source/conf.py b/doc/source/conf.py
index 961630a15..da32e37ec 100644
--- a/doc/source/conf.py
+++ b/doc/source/conf.py
@@ -207,7 +207,8 @@ htmlhelp_basename = 'pandas'
 # Grouping the document tree into LaTeX files. List of tuples
 # (source start file, target name, title, author, documentclass [howto/manual]).
 latex_documents = [
-  ('index', 'pandas.tex', u'pandas Documentation',
+  ('index', 'pandas.tex',
+   u'pandas: powerful Python data analysis toolkit',
    u'Wes McKinney', 'manual'),
 ]
 
diff --git a/doc/source/index.rst b/doc/source/index.rst
index cdabc25bc..05879751d 100755
--- a/doc/source/index.rst
+++ b/doc/source/index.rst
@@ -1,8 +1,8 @@
 .. Pandas documentation master file, created by
 
-*************************************************
-pandas: Pythonic data analysis for the real world
-*************************************************
+*********************************************
+pandas: powerful Python data analysis toolkit
+*********************************************
 
 .. note::
 
diff --git a/doc/source/missing_data.rst b/doc/source/missing_data.rst
index f9e72cd3f..89c095dc4 100644
--- a/doc/source/missing_data.rst
+++ b/doc/source/missing_data.rst
@@ -117,6 +117,8 @@ NA values in GroupBy
 NA groups in GroupBy are automatically excluded. This behavior is consistent
 with R, for example.
 
+
+
 Cleaning / filling missing data
 --------------------------------
 
@@ -125,6 +127,8 @@ with missing data.
 
 dropna:
 
+.. _missing_data.fillna:
+
 Filling missing values: fillna
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
diff --git a/doc/source/stats_moments.rst b/doc/source/stats_moments.rst
index 85b6507cb..5d204fc8d 100644
--- a/doc/source/stats_moments.rst
+++ b/doc/source/stats_moments.rst
@@ -120,23 +120,6 @@ And the binary moment functions:
 
 .. plot:: plots/stats/moments_rolling_binary.py
 
-Method summary
-~~~~~~~~~~~~~~
-
-.. autosummary::
-   :toctree: generated/
-
-   rolling_count
-   rolling_sum
-   rolling_mean
-   rolling_median
-   rolling_var
-   rolling_std
-   rolling_corr
-   rolling_cov
-   rolling_skew
-   rolling_kurt
-
 Exponentially weighted moment functions
 ---------------------------------------
 
@@ -175,12 +158,3 @@ The binary `emwcov` and `ewmcorr` are similar to their equal-weighted
 counterparts above.
 
 .. autofunction:: pandas.stats.moments.ewma
-
-.. autosummary::
-   :toctree: generated/
-
-   ewma
-   ewmstd
-   ewmvar
-   ewmcorr
-   ewmcov
