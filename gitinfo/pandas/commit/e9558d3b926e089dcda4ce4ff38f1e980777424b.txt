commit e9558d3b926e089dcda4ce4ff38f1e980777424b
Author: Bran Yang <snowolfy@163.com>
Date:   Wed Feb 10 12:26:26 2016 -0500

    Fix #12169 - Resample category data with timedelta index
    
    closes #12169
    
    Author: Bran Yang <snowolfy@163.com>
    
    Closes #12271 from BranYang/issue12169 and squashes the following commits:
    
    4a5605f [Bran Yang] add tests to Series/test_constructors; and update whatsnew
    7cf1be9 [Bran Yang] Fix #12169 - Resample category data with timedelta index

diff --git a/doc/source/whatsnew/v0.18.0.txt b/doc/source/whatsnew/v0.18.0.txt
index a43ab7157..b1248eda3 100644
--- a/doc/source/whatsnew/v0.18.0.txt
+++ b/doc/source/whatsnew/v0.18.0.txt
@@ -845,6 +845,7 @@ Bug Fixes
 - Bug in ``DataFrame.query`` containing an assignment (:issue:`8664`)
 
 - Bug in ``from_msgpack`` where ``__contains__()`` fails for columns of the unpacked ``DataFrame``, if the ``DataFrame`` has object columns. (:issue:`11880`)
+- Bug in ``df.resample()`` on categorical data with ``TimedeltaIndex`` (:issue:`12169`)
 
 
 - Bug in timezone info lost when broadcasting scalar datetime to ``DataFrame`` (:issue:`11682`)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 68ae58737..a6cfacc36 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -177,7 +177,8 @@ class Series(base.IndexOpsMixin, strings.StringAccessorMixin,
                                                      default=np.nan)
                         else:
                             data = np.nan
-                    elif isinstance(index, PeriodIndex):
+                    # GH #12169
+                    elif isinstance(index, (PeriodIndex, TimedeltaIndex)):
                         data = ([data.get(i, nan) for i in index]
                                 if data else np.nan)
                     else:
diff --git a/pandas/tests/series/test_constructors.py b/pandas/tests/series/test_constructors.py
index 6ae24bbcc..c5783779c 100644
--- a/pandas/tests/series/test_constructors.py
+++ b/pandas/tests/series/test_constructors.py
@@ -519,6 +519,24 @@ class TestSeriesConstructors(TestData, tm.TestCase):
         ser = ser.reindex(index=expected.index)
         check(ser, expected)
 
+    def test_constructor_dict_timedelta_index(self):
+        # GH #12169 : Resample category data with timedelta index
+        # construct Series from dict as data and TimedeltaIndex as index
+        # will result NaN in result Series data
+        expected = Series(
+            data=['A', 'B', 'C'],
+            index=pd.to_timedelta([0, 10, 20], unit='s')
+        )
+
+        result = Series(
+            data={pd.to_timedelta(0, unit='s'): 'A',
+                  pd.to_timedelta(10, unit='s'): 'B',
+                  pd.to_timedelta(20, unit='s'): 'C'},
+            index=pd.to_timedelta([0, 10, 20], unit='s')
+        )
+        # this should work
+        assert_series_equal(result, expected)
+
     def test_constructor_subclass_dict(self):
         data = tm.TestSubDict((x, 10.0 * x) for x in range(10))
         series = Series(data)
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index c761a3564..233d79501 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -1147,6 +1147,18 @@ class TestResample(tm.TestCase):
         self.assertTrue(without_base.index.equals(exp_without_base))
         self.assertTrue(with_base.index.equals(exp_with_base))
 
+    def test_resample_categorical_data_with_timedeltaindex(self):
+        # GH #12169
+        df = DataFrame({'Group_obj': 'A'},
+                       index=pd.to_timedelta(list(range(20)), unit='s'))
+        df['Group'] = df['Group_obj'].astype('category')
+        result = df.resample('10s').agg(lambda x: (x.value_counts().index[0]))
+        expected = DataFrame({'Group_obj': ['A', 'A'],
+                              'Group': ['A', 'A']},
+                             index=pd.to_timedelta([0, 10], unit='s'))
+        expected = expected.reindex_axis(['Group_obj', 'Group'], 1)
+        tm.assert_frame_equal(result, expected)
+
     def test_resample_daily_anchored(self):
         rng = date_range('1/1/2000 0:00:00', periods=10000, freq='T')
         ts = Series(np.random.randn(len(rng)), index=rng)
