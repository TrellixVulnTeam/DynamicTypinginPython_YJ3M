commit 81972447bf4277b7a495fe2cf927de6f406ae313
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri May 6 13:28:36 2011 -0400

    lookup bugfixes and tests

diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index ba6489e3d..ab51a3eb7 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -29,7 +29,7 @@ def make_sparse(arr, kind='block', fill_value=nan):
 
     Returns
     -------
-    vector : SparseVector
+    (sparse_values, index) : (ndarray, SparseIndex)
     """
     arr = np.asarray(arr)
     length = len(arr)
diff --git a/pandas/core/tests/test_sparse.py b/pandas/core/tests/test_sparse.py
index e06ecbe57..b30d3e672 100644
--- a/pandas/core/tests/test_sparse.py
+++ b/pandas/core/tests/test_sparse.py
@@ -100,6 +100,10 @@ class TestSparseSeries(TestCase):
         self.ziseries2 = SparseSeries(arr, index=index, kind='integer',
                                       fill_value=0)
 
+    def test_kind(self):
+        self.assertEquals(self.bseries.kind, 'block')
+        self.assertEquals(self.iseries.kind, 'integer')
+
     def test_sparse_to_dense(self):
         arr, index = _test_data1()
         series = self.bseries.to_dense()
diff --git a/pandas/lib/build.py b/pandas/lib/build.py
index 03c748a44..bbae8fa90 100755
--- a/pandas/lib/build.py
+++ b/pandas/lib/build.py
@@ -8,7 +8,7 @@ from Cython.Distutils import build_ext
 pyx_ext = Extension('tseries', ['src/tseries.pyx'],
                     include_dirs=[numpy.get_include()])
 
-sparse_ext = Extension('sparse', ['src/sparse.pyx'],
+sparse_ext = Extension('pandas.lib.sparse', ['src/sparse.pyx'],
                        include_dirs=[numpy.get_include()])
 
 setup(name='pandas.lib.tseries', description='Nothing',
diff --git a/pandas/lib/src/sparse.pyx b/pandas/lib/src/sparse.pyx
index 74c60599d..428bba761 100644
--- a/pandas/lib/src/sparse.pyx
+++ b/pandas/lib/src/sparse.pyx
@@ -187,7 +187,9 @@ cdef class IntIndex(SparseIndex):
 
         inds = self.indices
         res = inds.searchsorted(index)
-        if inds[res] == index:
+        if res == self.npoints:
+            return -1
+        elif inds[res] == index:
             return res
         else:
             return -1
@@ -247,6 +249,7 @@ cdef class BlockIndex(SparseIndex):
         ndarray blocs, blengths
 
     cdef:
+        object __weakref__ # need to be picklable
         int32_t* locbuf, *lenbuf
 
     def __init__(self, length, blocs, blengths):
@@ -267,6 +270,10 @@ cdef class BlockIndex(SparseIndex):
 
         self.check_integrity()
 
+    def __reduce__(self):
+        args = (self.length, self.blocs, self.blengths)
+        return (BlockIndex, args)
+
     def __repr__(self):
         output = 'sparse.BlockIndex\n'
         output += 'Block locations: %s\n' % repr(self.blocs)
@@ -436,7 +443,7 @@ cdef class BlockIndex(SparseIndex):
         Returns -1 if not found
         '''
         cdef:
-            pyst i, cum_len = 0
+            pyst i, cum_len
             ndarray[int32_t, ndim=1] locs, lens
 
         locs = self.blocs
@@ -447,8 +454,9 @@ cdef class BlockIndex(SparseIndex):
         elif index < locs[0]:
             return -1
 
+        cum_len = 0
         for i from 0 <= i < self.nblocks:
-            if index < locs[i] + lens[i]:
+            if index >= locs[i] and index < locs[i] + lens[i]:
                 return cum_len + index - locs[i]
             cum_len += lens[i]
 
diff --git a/pandas/lib/tests/test_sparse.py b/pandas/lib/tests/test_sparse.py
index 99d08fd88..cfa90905a 100644
--- a/pandas/lib/tests/test_sparse.py
+++ b/pandas/lib/tests/test_sparse.py
@@ -161,8 +161,12 @@ def test_lookup():
         assert(index.lookup(5) == 0)
         assert(index.lookup(7) == 2)
         assert(index.lookup(8) == -1)
+        assert(index.lookup(9) == -1)
+        assert(index.lookup(10) == -1)
+        assert(index.lookup(11) == -1)
         assert(index.lookup(12) == 3)
         assert(index.lookup(17) == 8)
+        assert(index.lookup(18) == -1)
 
     bindex = BlockIndex(20, [5, 12], [3, 6])
     iindex = bindex.to_int_index()
@@ -170,6 +174,8 @@ def test_lookup():
     _check(bindex)
     _check(iindex)
 
+    # corner cases
+
 class TestBlockIndex(TestCase):
 
     def test_equals(self):
