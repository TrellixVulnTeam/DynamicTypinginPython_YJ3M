commit 5f040c90d3063989fae2dddc3970c84fe9d01468
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Nov 2 18:29:59 2012 -0400

    BUG: use re.search instead of re.match in DataFrame.filter with regex argument. close #1976

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index dcb743f94..ead8e46c6 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2667,7 +2667,7 @@ class DataFrame(NDFrame):
             return self.select(lambda x: like in x, axis=1)
         elif regex:
             matcher = re.compile(regex)
-            return self.select(lambda x: matcher.match(x) is not None, axis=1)
+            return self.select(lambda x: matcher.search(x) is not None, axis=1)
         else:
             raise ValueError('items was None!')
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 2312784be..d8bde3da9 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -5621,11 +5621,6 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         self.assertEqual(len(filtered.columns), 2)
         self.assert_('AA' in filtered)
 
-        # regex
-        filtered = fcopy.filter(regex='[A]+')
-        self.assertEqual(len(filtered.columns), 2)
-        self.assert_('AA' in filtered)
-
         # pass in None
         self.assertRaises(Exception, self.frame.filter, items=None)
 
@@ -5633,6 +5628,25 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         filtered = self.mixed_frame.filter(like='foo')
         self.assert_('foo' in filtered)
 
+    def test_filter_regex_search(self):
+        fcopy = self.frame.copy()
+        fcopy['AA'] = 1
+
+        # regex
+        filtered = fcopy.filter(regex='[A]+')
+        self.assertEqual(len(filtered.columns), 2)
+        self.assert_('AA' in filtered)
+
+        # doesn't have to be at beginning
+        df = DataFrame({'aBBa': [1, 2],
+                        'BBaBB': [1, 2],
+                        'aCCa': [1, 2],
+                        'aCCaBB': [1, 2]})
+
+        result = df.filter(regex='BB')
+        exp = df[[x for x in df.columns if 'BB' in x]]
+        assert_frame_equal(result, exp)
+
     def test_filter_corner(self):
         empty = DataFrame()
 
