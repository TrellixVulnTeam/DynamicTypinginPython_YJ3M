commit 2b136054db3b8f4c8d1aa33160c4bbe3b8ce940e
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Tue Jul 3 16:40:08 2018 -0700

    Move Unchanged arith methods to EA mixins (#21712)

diff --git a/pandas/core/arrays/datetimelike.py b/pandas/core/arrays/datetimelike.py
index 180417ce5..be3f94201 100644
--- a/pandas/core/arrays/datetimelike.py
+++ b/pandas/core/arrays/datetimelike.py
@@ -167,3 +167,15 @@ class DatetimeLikeArrayMixin(object):
             mask = (self._isnan) | (other._isnan)
             new_values[mask] = iNaT
         return new_values.view('i8')
+
+    def _sub_nat(self):
+        """Subtract pd.NaT from self"""
+        # GH#19124 Timedelta - datetime is not in general well-defined.
+        # We make an exception for pd.NaT, which in this case quacks
+        # like a timedelta.
+        # For datetime64 dtypes by convention we treat NaT as a datetime, so
+        # this subtraction returns a timedelta64 dtype.
+        # For period dtype, timedelta64 is a close-enough return dtype.
+        result = np.zeros(len(self), dtype=np.int64)
+        result.fill(iNaT)
+        return result.view('timedelta64[ns]')
diff --git a/pandas/core/arrays/period.py b/pandas/core/arrays/period.py
index 1158bae74..03c0128c6 100644
--- a/pandas/core/arrays/period.py
+++ b/pandas/core/arrays/period.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 
+from pandas._libs.tslib import NaT
 from pandas._libs.tslibs.period import Period
 
 from pandas.util._decorators import cache_readonly
@@ -26,3 +27,10 @@ class PeriodArrayMixin(DatetimeLikeArrayMixin):
     @property
     def asi8(self):
         return self._ndarray_values.view('i8')
+
+    # ------------------------------------------------------------------
+    # Arithmetic Methods
+
+    def _sub_datelike(self, other):
+        assert other is not NaT
+        return NotImplemented
diff --git a/pandas/core/arrays/timedelta.py b/pandas/core/arrays/timedelta.py
index 487858c49..85c5bdc56 100644
--- a/pandas/core/arrays/timedelta.py
+++ b/pandas/core/arrays/timedelta.py
@@ -1,9 +1,11 @@
 # -*- coding: utf-8 -*-
 
-from pandas._libs.tslib import Timedelta
+from pandas._libs.tslib import Timedelta, NaT
 
 from pandas.core.dtypes.common import _TD_DTYPE
 
+from pandas.tseries.offsets import Tick
+
 from .datetimelike import DatetimeLikeArrayMixin
 
 
@@ -15,3 +17,17 @@ class TimedeltaArrayMixin(DatetimeLikeArrayMixin):
     @property
     def dtype(self):
         return _TD_DTYPE
+
+    # ----------------------------------------------------------------
+    # Arithmetic Methods
+
+    def _add_offset(self, other):
+        assert not isinstance(other, Tick)
+        raise TypeError("cannot add the type {typ} to a {cls}"
+                        .format(typ=type(other).__name__,
+                                cls=type(self).__name__))
+
+    def _sub_datelike(self, other):
+        assert other is not NaT
+        raise TypeError("cannot subtract a datelike from a {cls}"
+                        .format(cls=type(self).__name__))
diff --git a/pandas/core/indexes/datetimelike.py b/pandas/core/indexes/datetimelike.py
index 0ca8af335..88a1529b3 100644
--- a/pandas/core/indexes/datetimelike.py
+++ b/pandas/core/indexes/datetimelike.py
@@ -696,20 +696,6 @@ class DatetimeIndexOpsMixin(DatetimeLikeArrayMixin):
         # and datetime dtypes
         return self._nat_new(box=True)
 
-    def _sub_nat(self):
-        """Subtract pd.NaT from self"""
-        # GH#19124 Timedelta - datetime is not in general well-defined.
-        # We make an exception for pd.NaT, which in this case quacks
-        # like a timedelta.
-        # For datetime64 dtypes by convention we treat NaT as a datetime, so
-        # this subtraction returns a timedelta64 dtype.
-        # For period dtype, timedelta64 is a close-enough return dtype.
-        result = self._nat_new(box=False)
-        return result.view('timedelta64[ns]')
-
-    def _sub_period(self, other):
-        return NotImplemented
-
     def _sub_period_array(self, other):
         """
         Subtract one PeriodIndex from another.  This is only valid if they
@@ -745,9 +731,6 @@ class DatetimeIndexOpsMixin(DatetimeLikeArrayMixin):
             new_values[mask] = NaT
         return new_values
 
-    def _add_offset(self, offset):
-        raise com.AbstractMethodError(self)
-
     def _addsub_offset_array(self, other, op):
         """
         Add or subtract array-like of DateOffset objects
diff --git a/pandas/core/indexes/period.py b/pandas/core/indexes/period.py
index c9525b9c3..e04d729d9 100644
--- a/pandas/core/indexes/period.py
+++ b/pandas/core/indexes/period.py
@@ -743,10 +743,6 @@ class PeriodIndex(PeriodArrayMixin, DatelikeOps, DatetimeIndexOpsMixin,
         ordinal_delta = self._maybe_convert_timedelta(other)
         return self.shift(ordinal_delta)
 
-    def _sub_datelike(self, other):
-        assert other is not tslib.NaT
-        return NotImplemented
-
     def _sub_period(self, other):
         # If the operation is well-defined, we return an object-Index
         # of DateOffsets.  Null entries are filled with pd.NaT
@@ -761,6 +757,7 @@ class PeriodIndex(PeriodArrayMixin, DatelikeOps, DatetimeIndexOpsMixin,
         if self.hasnans:
             new_data[self._isnan] = tslib.NaT
 
+        # TODO: Should name=self.name be passed here?
         return Index(new_data)
 
     def shift(self, n):
diff --git a/pandas/core/indexes/timedeltas.py b/pandas/core/indexes/timedeltas.py
index 8b62d9aa6..80b9bf92d 100644
--- a/pandas/core/indexes/timedeltas.py
+++ b/pandas/core/indexes/timedeltas.py
@@ -349,12 +349,6 @@ class TimedeltaIndex(TimedeltaArrayMixin, DatetimeIndexOpsMixin,
             attrs['freq'] = 'infer'
         return attrs
 
-    def _add_offset(self, other):
-        assert not isinstance(other, Tick)
-        raise TypeError("cannot add the type {typ} to a {cls}"
-                        .format(typ=type(other).__name__,
-                                cls=type(self).__name__))
-
     def _add_delta(self, delta):
         """
         Add a timedelta-like, Tick, or TimedeltaIndex-like object
@@ -430,11 +424,6 @@ class TimedeltaIndex(TimedeltaArrayMixin, DatetimeIndexOpsMixin,
             result = self._maybe_mask_results(result, fill_value=iNaT)
             return DatetimeIndex(result)
 
-    def _sub_datelike(self, other):
-        assert other is not NaT
-        raise TypeError("cannot subtract a datelike from a {cls}"
-                        .format(cls=type(self).__name__))
-
     def _addsub_offset_array(self, other, op):
         # Add or subtract Array-like of DateOffset objects
         try:
