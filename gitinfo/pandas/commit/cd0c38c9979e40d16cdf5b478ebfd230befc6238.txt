commit cd0c38c9979e40d16cdf5b478ebfd230befc6238
Author: Simon Hawkins <simonjayhawkins@gmail.com>
Date:   Fri Jan 31 11:46:53 2020 +0000

    TYP: pandas/core/arrays/string_.py (#31386)

diff --git a/pandas/core/arrays/string_.py b/pandas/core/arrays/string_.py
index c485d1f50..309a0beb9 100644
--- a/pandas/core/arrays/string_.py
+++ b/pandas/core/arrays/string_.py
@@ -1,5 +1,5 @@
 import operator
-from typing import Type
+from typing import TYPE_CHECKING, Type, Union
 
 import numpy as np
 
@@ -17,6 +17,9 @@ from pandas.core.arrays import PandasArray
 from pandas.core.construction import extract_array
 from pandas.core.missing import isna
 
+if TYPE_CHECKING:
+    import pyarrow  # noqa: F401
+
 
 @register_extension_dtype
 class StringDtype(ExtensionDtype):
@@ -53,19 +56,30 @@ class StringDtype(ExtensionDtype):
     na_value = libmissing.NA
 
     @property
-    def type(self) -> Type:
+    def type(self) -> Type[str]:
         return str
 
     @classmethod
-    def construct_array_type(cls) -> "Type[StringArray]":
+    def construct_array_type(cls) -> Type["StringArray"]:
+        """
+        Return the array type associated with this dtype.
+
+        Returns
+        -------
+        type
+        """
         return StringArray
 
     def __repr__(self) -> str:
         return "StringDtype"
 
-    def __from_arrow__(self, array):
-        """Construct StringArray from passed pyarrow Array/ChunkedArray"""
-        import pyarrow
+    def __from_arrow__(
+        self, array: Union["pyarrow.Array", "pyarrow.ChunkedArray"]
+    ) -> "StringArray":
+        """
+        Construct StringArray from pyarrow Array/ChunkedArray.
+        """
+        import pyarrow  # noqa: F811
 
         if isinstance(array, pyarrow.Array):
             chunks = [array]
