commit 2e7fd561b6ac099164473d710ef291c9489c4ff3
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jan 11 20:15:17 2011 -0500

    unit tests for WeekOfMonth

diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index 6895c9c76..83097774e 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -5,7 +5,7 @@ from datetime import datetime, timedelta
 try:
     from dateutil import parser
     from dateutil.relativedelta import relativedelta
-except ImportError:
+except ImportError: # pragma: no cover
     print 'Please install python-dateutil via easy_install or some method!'
 
 import calendar
@@ -369,16 +369,21 @@ class Week(DateOffset):
 
 class WeekOfMonth(DateOffset):
     """
-    weekday
-    0: Mondays
-    1: Tuedays
-    2: Wednesdays
-    3: Thursdays
-    4: Fridays
-    5: Saturdays
-    6: Sundays
-
-    week: 0 means 1st week of month, 1 means 2nd week, etc.
+    Describes monthly dates like "the Tuesday of the 2nd week of each month"
+
+    Parameters
+    ----------
+    n : int
+    week : {0, 1, 2, 3, ...}
+        0 is 1st week of month, 1 2nd week, etc.
+    weekday : {0, 1, ..., 6}
+        0: Mondays
+        1: Tuedays
+        2: Wednesdays
+        3: Thursdays
+        4: Fridays
+        5: Saturdays
+        6: Sundays
     """
     _normalizeFirst = True
     def __init__(self, n=1, **kwds):
@@ -400,8 +405,10 @@ class WeekOfMonth(DateOffset):
 
     def apply(self, other):
         offsetOfMonth = self.getOffsetOfMonth(other)
-        offsetOfPrevMonth = self.getOffsetOfMonth(other + relativedelta(months=-1, day=1))
-        offsetOfNextMonth = self.getOffsetOfMonth(other + relativedelta(months=1, day=1))
+
+        one_month = relativedelta(months=1, day=1)
+        offsetOfPrevMonth = self.getOffsetOfMonth(other - one_month)
+        offsetOfNextMonth = self.getOffsetOfMonth(other + one_month)
 
         if other < offsetOfMonth:
             if self.n == 1:
@@ -409,7 +416,8 @@ class WeekOfMonth(DateOffset):
             elif self.n == -1:
                 return offsetOfPrevMonth
         elif other == offsetOfMonth:
-            return self.getOffsetOfMonth(other + relativedelta(months=self.n, day=1))
+            delta = relativedelta(months=self.n, day=1)
+            return self.getOffsetOfMonth(other + delta)
         else:
             if self.n == 1:
                 return offsetOfNextMonth
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 0a92fa556..b8efc7819 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -236,9 +236,8 @@ class DataFrame(Picklable, Groupable):
 
     def _get_axis(self, axis):
         results = {
-            0 : self.items,
-            1 : self.major_axis,
-            2 : self.minor_axis
+            0 : self.index,
+            1 : self.columns,
         }
 
         return results[self._get_axis_number(axis)]
diff --git a/pandas/core/tests/test_datetools.py b/pandas/core/tests/test_datetools.py
index 64e6472df..96c3e7849 100644
--- a/pandas/core/tests/test_datetools.py
+++ b/pandas/core/tests/test_datetools.py
@@ -4,7 +4,7 @@ import unittest
 from pandas.core.datetools import (
     bday, BDay, BQuarterEnd, BMonthEnd, BYearEnd, MonthEnd,
     DateOffset, Week, YearBegin, YearEnd, Hour, Minute, Second,
-    format, ole2datetime, to_datetime, normalize_date,
+    WeekOfMonth, format, ole2datetime, to_datetime, normalize_date,
     getOffset, getOffsetName, inferTimeRule, hasOffsetName)
 
 from nose.tools import assert_raises
@@ -241,67 +241,78 @@ class TestWeek(unittest.TestCase):
                 assertEq(dateOffset, baseDate, expected)
 
     def test_onOffset(self):
+        for weekday in range(7):
+            offset = Week(weekday=weekday)
 
-        tests = [(Week(weekday=0), datetime(2008, 1, 1), False),
-                 (Week(weekday=0), datetime(2008, 1, 2), False),
-                 (Week(weekday=0), datetime(2008, 1, 3), False),
-                 (Week(weekday=0), datetime(2008, 1, 4), False),
-                 (Week(weekday=0), datetime(2008, 1, 5), False),
-                 (Week(weekday=0), datetime(2008, 1, 6), False),
-                 (Week(weekday=0), datetime(2008, 1, 7), True),
-
-                 (Week(weekday=1), datetime(2008, 1, 1), True),
-                 (Week(weekday=1), datetime(2008, 1, 2), False),
-                 (Week(weekday=1), datetime(2008, 1, 3), False),
-                 (Week(weekday=1), datetime(2008, 1, 4), False),
-                 (Week(weekday=1), datetime(2008, 1, 5), False),
-                 (Week(weekday=1), datetime(2008, 1, 6), False),
-                 (Week(weekday=1), datetime(2008, 1, 7), False),
-
-                 (Week(weekday=2), datetime(2008, 1, 1), False),
-                 (Week(weekday=2), datetime(2008, 1, 2), True),
-                 (Week(weekday=2), datetime(2008, 1, 3), False),
-                 (Week(weekday=2), datetime(2008, 1, 4), False),
-                 (Week(weekday=2), datetime(2008, 1, 5), False),
-                 (Week(weekday=2), datetime(2008, 1, 6), False),
-                 (Week(weekday=2), datetime(2008, 1, 7), False),
-
-                 (Week(weekday=3), datetime(2008, 1, 1), False),
-                 (Week(weekday=3), datetime(2008, 1, 2), False),
-                 (Week(weekday=3), datetime(2008, 1, 3), True),
-                 (Week(weekday=3), datetime(2008, 1, 4), False),
-                 (Week(weekday=3), datetime(2008, 1, 5), False),
-                 (Week(weekday=3), datetime(2008, 1, 6), False),
-                 (Week(weekday=3), datetime(2008, 1, 7), False),
-
-                 (Week(weekday=4), datetime(2008, 1, 1), False),
-                 (Week(weekday=4), datetime(2008, 1, 2), False),
-                 (Week(weekday=4), datetime(2008, 1, 3), False),
-                 (Week(weekday=4), datetime(2008, 1, 4), True),
-                 (Week(weekday=4), datetime(2008, 1, 5), False),
-                 (Week(weekday=4), datetime(2008, 1, 6), False),
-                 (Week(weekday=4), datetime(2008, 1, 7), False),
-
-                 (Week(weekday=5), datetime(2008, 1, 1), False),
-                 (Week(weekday=5), datetime(2008, 1, 2), False),
-                 (Week(weekday=5), datetime(2008, 1, 3), False),
-                 (Week(weekday=5), datetime(2008, 1, 4), False),
-                 (Week(weekday=5), datetime(2008, 1, 5), True),
-                 (Week(weekday=5), datetime(2008, 1, 6), False),
-                 (Week(weekday=5), datetime(2008, 1, 7), False),
-
-                 (Week(weekday=6), datetime(2008, 1, 1), False),
-                 (Week(weekday=6), datetime(2008, 1, 2), False),
-                 (Week(weekday=6), datetime(2008, 1, 3), False),
-                 (Week(weekday=6), datetime(2008, 1, 4), False),
-                 (Week(weekday=6), datetime(2008, 1, 5), False),
-                 (Week(weekday=6), datetime(2008, 1, 6), True),
-                 (Week(weekday=6), datetime(2008, 1, 7), False),
-             ]
+            for day in range(1, 8):
+                date = datetime(2008, 1, day)
 
-        for offset, date, expected in tests:
+                if day % 7 == weekday:
+                    expected = True
+                else:
+                    expected = False
             assertOnOffset(offset, date, expected)
 
+class TestWeekOfMonth(unittest.TestCase):
+
+    def test_constructor(self):
+        self.assertRaises(Exception, WeekOfMonth, n=2, week=0, weekday=0)
+        self.assertRaises(Exception, WeekOfMonth, n=1, week=4, weekday=0)
+        self.assertRaises(Exception, WeekOfMonth, n=1, week=-1, weekday=0)
+        self.assertRaises(Exception, WeekOfMonth, n=1, week=0, weekday=-1)
+        self.assertRaises(Exception, WeekOfMonth, n=1, week=0, weekday=7)
+
+    def test_offset(self):
+        date1 = datetime(2011, 1, 11) # 1st Tuesday of Month
+        date2 = datetime(2011, 1, 11) # 2nd Tuesday of Month
+        date3 = datetime(2011, 1, 18) # 3rd Tuesday of Month
+        date4 = datetime(2011, 1, 25) # 3rd Tuesday of Month
+
+        # see for loop for structure
+        test_cases = [
+            (0, 0, date1, datetime(2011, 2, 7)),
+            (0, 0, date2, datetime(2011, 2, 7)),
+            (0, 0, date3, datetime(2011, 2, 7)),
+            (0, 0, date4, datetime(2011, 2, 7)),
+            (0, 1, date1, datetime(2011, 2, 1)),
+            (0, 1, date2, datetime(2011, 2, 1)),
+            (0, 1, date3, datetime(2011, 2, 1)),
+            (0, 1, date4, datetime(2011, 2, 1)),
+            (0, 2, date1, datetime(2011, 2, 2)),
+            (0, 2, date2, datetime(2011, 2, 2)),
+            (0, 2, date3, datetime(2011, 2, 2)),
+            (0, 2, date4, datetime(2011, 2, 2)),
+
+            (2, 1, date1, datetime(2011, 1, 18)),
+            (2, 1, date2, datetime(2011, 1, 18)),
+            (2, 1, date3, datetime(2011, 2, 15)),
+            (2, 1, date4, datetime(2011, 2, 15)),
+        ]
+
+        for week, weekday, date, expected in test_cases:
+            offset = WeekOfMonth(week=week, weekday=weekday)
+            assertEq(offset, date, expected)
+
+        # try subtracting
+        result = datetime(2011, 2, 1) - WeekOfMonth(week=1, weekday=2)
+        self.assertEqual(result, datetime(2011, 1, 12))
+        result = datetime(2011, 2, 3) - WeekOfMonth(week=0, weekday=2)
+        self.assertEqual(result, datetime(2011, 2, 2))
+
+    def test_onOffset(self):
+        test_cases = [
+            (0, 0, datetime(2011, 2, 7), True),
+            (0, 0, datetime(2011, 2, 6), False),
+            (0, 0, datetime(2011, 2, 14), False),
+            (1, 0, datetime(2011, 2, 14), True),
+            (0, 1, datetime(2011, 2, 1), True),
+            (0, 1, datetime(2011, 2, 8), False),
+        ]
+
+        for week, weekday, date, expected in test_cases:
+            offset = WeekOfMonth(week=week, weekday=weekday)
+            self.assert_(offset.onOffset(date) == expected)
+
 class TestBMonthEnd(unittest.TestCase):
 
     def test_offset(self):
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 3e424ab9f..424bcb10f 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -134,14 +134,11 @@ def _try_parse_dates(values):
 # Excel tools
 #===============================================================================
 
-OLE_TIME_ZERO = datetime(1899, 12, 30, 0, 0, 0)
-def ole2datetime(oledt):
-    """function for converting excel date to normal date format"""
-    return OLE_TIME_ZERO + timedelta(days=float(oledt))
 
 
 def parseExcel(filepath, header = None, indexCol = 0, dateCol = 0,
                sheetname = None):
+    from pandas.core.datetools import ole2datetime
     try:
         import xlrd
     except:
