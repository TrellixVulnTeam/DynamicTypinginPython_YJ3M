commit bb7eaff7847b70c07e488af3bd764888c1937b73
Author: Chang She <changshe@gmail.com>
Date:   Mon Dec 10 12:07:12 2012 -0500

    BUG: empty frame.apply with func that fails on empty series #2476

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index de5224945..f8a7f6ed9 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -4048,8 +4048,14 @@ class DataFrame(NDFrame):
         else:
             if not broadcast:
                 if not all(self.shape):
-                    is_reduction = not isinstance(f(_EMPTY_SERIES),
-                                                  np.ndarray)
+                    # How to determine this better?
+                    is_reduction = False
+                    try:
+                        is_reduction = not isinstance(f(_EMPTY_SERIES),
+                                                      np.ndarray)
+                    except Exception:
+                        pass
+
                     if is_reduction:
                         return Series(NA, index=self._get_agg_axis(axis))
                     else:
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 20d8d0731..ef5bc2973 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -5626,6 +5626,11 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         self.assertEqual(applied[d], np.mean(self.frame.xs(d)))
         self.assert_(applied.index is self.frame.index) # want this
 
+        #invalid axis
+        df = DataFrame([[1,2,3], [4,5,6], [7,8,9]], index=['a','a','c'])
+        self.assertRaises(ValueError, df.apply, lambda x: x, 2)
+
+    def test_apply_empty(self):
         # empty
         applied = self.empty.apply(np.sqrt)
         self.assert_(applied.empty)
@@ -5643,9 +5648,10 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = Series(np.nan, index=self.frame.index)
         assert_series_equal(result, expected)
 
-        #invalid axis
-        df = DataFrame([[1,2,3], [4,5,6], [7,8,9]], index=['a','a','c'])
-        self.assertRaises(ValueError, df.apply, lambda x: x, 2)
+        #2476
+        xp = DataFrame(index=['a'])
+        rs = xp.apply(lambda x: x['a'], axis=1)
+        assert_frame_equal(xp, rs)
 
     def test_apply_standard_nonunique(self):
         df = DataFrame([[1,2,3], [4,5,6], [7,8,9]], index=['a','a','c'])
