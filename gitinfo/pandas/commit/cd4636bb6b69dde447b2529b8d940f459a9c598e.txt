commit cd4636bb6b69dde447b2529b8d940f459a9c598e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Jan 6 15:22:28 2012 -0500

    BUG: catch np.vectorize returning str/unicode dtype, fix #583

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index a9eba10e2..dda9358ae 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -437,7 +437,10 @@ class TextParser(object):
         for col, f in self.converters.iteritems():
             if isinstance(col, int) and col not in self.columns:
                 col = self.columns[col]
-            data[col] = np.vectorize(f)(data[col])
+            result = np.vectorize(f)(data[col])
+            if issubclass(result.dtype.type, (basestring, unicode)):
+                result = result.astype('O')
+            data[col] = result
 
         data = _convert_to_ndarrays(data, self.na_values)
 
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index 118bd9781..7534c8710 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -478,6 +478,29 @@ c,4,5,01/03/2009
         expected['D'] = expected['D'].map(converter)
         assert_frame_equal(result, expected)
 
+    def test_converters_euro_decimal_format(self):
+        data = """Id;Number1;Number2;Text1;Text2;Number3
+1;1521,1541;187101,9543;ABC;poi;4,738797819
+2;121,12;14897,76;DEF;uyt;0,377320872
+3;878,158;108013,434;GHI;rez;2,735694704"""
+        f = lambda x : float(x.replace(",", "."))
+        converter = {'Number1':f,'Number2':f, 'Number3':f}
+        df2 = read_csv(StringIO(data), sep=';',converters=converter)
+        self.assert_(df2['Number1'].dtype == float)
+        self.assert_(df2['Number2'].dtype == float)
+        self.assert_(df2['Number3'].dtype == float)
+
+    def test_converter_return_string_bug(self):
+        # GH #583
+        data = """Id;Number1;Number2;Text1;Text2;Number3
+1;1521,1541;187101,9543;ABC;poi;4,738797819
+2;121,12;14897,76;DEF;uyt;0,377320872
+3;878,158;108013,434;GHI;rez;2,735694704"""
+        f = lambda x : x.replace(",", ".")
+        converter = {'Number1':f,'Number2':f, 'Number3':f}
+        df2 = read_csv(StringIO(data), sep=';',converters=converter)
+        self.assert_(df2['Number1'].dtype == float)
+
     def test_regex_separator(self):
         data = """   A   B   C   D
 a   1   2   3   4
