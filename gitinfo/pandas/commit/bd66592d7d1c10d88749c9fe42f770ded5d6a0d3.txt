commit bd66592d7d1c10d88749c9fe42f770ded5d6a0d3
Author: Adrien Emery <adrien.emery@gmail.com>
Date:   Tue Jun 14 17:20:22 2016 -0400

    ENH: Add SemiMonthEnd and SemiMonthBegin offsets #1543
    
    closes #1543
    
    Author: Adrien Emery <adrien.emery@gmail.com>
    
    Closes #13315 from adrienemery/semi-monthly-offset and squashes the following commits:
    
    fe221b2 [Adrien Emery] ENH: Add SemiMonthEnd and SemiMonthBegin offsets #1543

diff --git a/asv_bench/benchmarks/timeseries.py b/asv_bench/benchmarks/timeseries.py
index bdf193cd1..2b0d09867 100644
--- a/asv_bench/benchmarks/timeseries.py
+++ b/asv_bench/benchmarks/timeseries.py
@@ -1155,3 +1155,63 @@ class timeseries_year_incr(object):
 
     def time_timeseries_year_incr(self):
         (self.date + self.year)
+
+
+class timeseries_semi_month_offset(object):
+    goal_time = 0.2
+
+    def setup(self):
+        self.N = 100000
+        self.rng = date_range(start='1/1/2000', periods=self.N, freq='T')
+        # date is not on an offset which will be slowest case
+        self.date = dt.datetime(2011, 1, 2)
+        self.semi_month_end = pd.offsets.SemiMonthEnd()
+        self.semi_month_begin = pd.offsets.SemiMonthBegin()
+
+    def time_semi_month_end_apply(self):
+        self.semi_month_end.apply(self.date)
+
+    def time_semi_month_end_incr(self):
+        self.date + self.semi_month_end
+
+    def time_semi_month_end_incr_n(self):
+        self.date + 10 * self.semi_month_end
+
+    def time_semi_month_end_decr(self):
+        self.date - self.semi_month_end
+
+    def time_semi_month_end_decr_n(self):
+        self.date - 10 * self.semi_month_end
+
+    def time_semi_month_end_apply_index(self):
+        self.semi_month_end.apply_index(self.rng)
+
+    def time_semi_month_end_incr_rng(self):
+        self.rng + self.semi_month_end
+
+    def time_semi_month_end_decr_rng(self):
+        self.rng - self.semi_month_end
+
+    def time_semi_month_begin_apply(self):
+        self.semi_month_begin.apply(self.date)
+
+    def time_semi_month_begin_incr(self):
+        self.date + self.semi_month_begin
+
+    def time_semi_month_begin_incr_n(self):
+        self.date + 10 * self.semi_month_begin
+
+    def time_semi_month_begin_decr(self):
+        self.date - self.semi_month_begin
+
+    def time_semi_month_begin_decr_n(self):
+        self.date - 10 * self.semi_month_begin
+
+    def time_semi_month_begin_apply_index(self):
+        self.semi_month_begin.apply_index(self.rng)
+
+    def time_semi_month_begin_incr_rng(self):
+        self.rng + self.semi_month_begin
+
+    def time_semi_month_begin_decr_rng(self):
+        self.rng - self.semi_month_begin
diff --git a/doc/source/timeseries.rst b/doc/source/timeseries.rst
index 626018214..7e832af14 100644
--- a/doc/source/timeseries.rst
+++ b/doc/source/timeseries.rst
@@ -589,6 +589,8 @@ frequency increment. Specific offset logic like "month", "business day", or
     BMonthBegin, "business month begin"
     CBMonthEnd, "custom business month end"
     CBMonthBegin, "custom business month begin"
+    SemiMonthEnd, "15th (or other day_of_month) and calendar month end"
+    SemiMonthBegin, "15th (or other day_of_month) and calendar month begin"
     QuarterEnd, "calendar quarter end"
     QuarterBegin, "calendar quarter begin"
     BQuarterEnd, "business quarter end"
@@ -967,9 +969,11 @@ frequencies. We will refer to these aliases as *offset aliases*
     "D", "calendar day frequency"
     "W", "weekly frequency"
     "M", "month end frequency"
+    "SM", "semi-month end frequency (15th and end of month)"
     "BM", "business month end frequency"
     "CBM", "custom business month end frequency"
     "MS", "month start frequency"
+    "SMS", "semi-month start frequency (1st and 15th)"
     "BMS", "business month start frequency"
     "CBMS", "custom business month start frequency"
     "Q", "quarter end frequency"
diff --git a/doc/source/whatsnew/v0.18.2.txt b/doc/source/whatsnew/v0.18.2.txt
index e469cbf79..f1890fd3a 100644
--- a/doc/source/whatsnew/v0.18.2.txt
+++ b/doc/source/whatsnew/v0.18.2.txt
@@ -51,6 +51,43 @@ New behaviour:
 
    In [2]: pd.read_csv(StringIO(data), names=names)
 
+.. _whatsnew_0182.enhancements.semi_month_offsets:
+
+Semi-Month Offsets
+^^^^^^^^^^^^^^^^^^
+
+Pandas has gained new frequency offsets, ``SemiMonthEnd`` ('SM') and ``SemiMonthBegin`` ('SMS').
+These provide date offsets anchored (by default) to the 15th and end of month, and 15th and 1st of month respectively.
+(:issue:`1543`)
+
+.. ipython:: python
+
+    from pandas.tseries.offsets import SemiMonthEnd, SemiMonthBegin
+
+SemiMonthEnd:
+
+.. ipython:: python
+
+    Timestamp('2016-01-01') + SemiMonthEnd()
+
+    pd.date_range('2015-01-01', freq='SM', periods=4)
+
+SemiMonthBegin:
+
+.. ipython:: python
+
+    Timestamp('2016-01-01') + SemiMonthBegin()
+
+    pd.date_range('2015-01-01', freq='SMS', periods=4)
+
+Using the anchoring suffix, you can also specify the day of month to use instead of the 15th.
+
+.. ipython:: python
+
+    pd.date_range('2015-01-01', freq='SMS-16', periods=4)
+
+    pd.date_range('2015-01-01', freq='SM-14', periods=4)
+
 .. _whatsnew_0182.enhancements.other:
 
 Other enhancements
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index 7d3255add..f4b75ddd7 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -4,7 +4,8 @@ from pandas import compat
 import numpy as np
 
 from pandas.tseries.tools import to_datetime, normalize_date
-from pandas.core.common import ABCSeries, ABCDatetimeIndex, ABCPeriod
+from pandas.core.common import (ABCSeries, ABCDatetimeIndex, ABCPeriod,
+                                AbstractMethodError)
 
 # import after tools, dateutil check
 from dateutil.relativedelta import relativedelta, weekday
@@ -18,6 +19,7 @@ import operator
 __all__ = ['Day', 'BusinessDay', 'BDay', 'CustomBusinessDay', 'CDay',
            'CBMonthEnd', 'CBMonthBegin',
            'MonthBegin', 'BMonthBegin', 'MonthEnd', 'BMonthEnd',
+           'SemiMonthEnd', 'SemiMonthBegin',
            'BusinessHour', 'CustomBusinessHour',
            'YearBegin', 'BYearBegin', 'YearEnd', 'BYearEnd',
            'QuarterBegin', 'BQuarterBegin', 'QuarterEnd', 'BQuarterEnd',
@@ -1160,6 +1162,214 @@ class MonthBegin(MonthOffset):
     _prefix = 'MS'
 
 
+class SemiMonthOffset(DateOffset):
+    _adjust_dst = True
+    _default_day_of_month = 15
+    _min_day_of_month = 2
+
+    def __init__(self, n=1, day_of_month=None, normalize=False, **kwds):
+        if day_of_month is None:
+            self.day_of_month = self._default_day_of_month
+        else:
+            self.day_of_month = int(day_of_month)
+        if not self._min_day_of_month <= self.day_of_month <= 27:
+            raise ValueError('day_of_month must be '
+                             '{}<=day_of_month<=27, got {}'.format(
+                                 self._min_day_of_month, self.day_of_month))
+        self.n = int(n)
+        self.normalize = normalize
+        self.kwds = kwds
+        self.kwds['day_of_month'] = self.day_of_month
+
+    @classmethod
+    def _from_name(cls, suffix=None):
+        return cls(day_of_month=suffix)
+
+    @property
+    def rule_code(self):
+        suffix = '-{}'.format(self.day_of_month)
+        return self._prefix + suffix
+
+    @apply_wraps
+    def apply(self, other):
+        n = self.n
+        if not self.onOffset(other):
+            _, days_in_month = tslib.monthrange(other.year, other.month)
+            if 1 < other.day < self.day_of_month:
+                other += relativedelta(day=self.day_of_month)
+                if n > 0:
+                    # rollforward so subtract 1
+                    n -= 1
+            elif self.day_of_month < other.day < days_in_month:
+                other += relativedelta(day=self.day_of_month)
+                if n < 0:
+                    # rollforward in the negative direction so add 1
+                    n += 1
+                elif n == 0:
+                    n = 1
+
+        return self._apply(n, other)
+
+    def _apply(self, n, other):
+        """Handle specific apply logic for child classes"""
+        raise AbstractMethodError(self)
+
+    @apply_index_wraps
+    def apply_index(self, i):
+        # determine how many days away from the 1st of the month we are
+        days_from_start = i.to_perioddelta('M').asi8
+        delta = Timedelta(days=self.day_of_month - 1).value
+
+        # get boolean array for each element before the day_of_month
+        before_day_of_month = days_from_start < delta
+
+        # get boolean array for each element after the day_of_month
+        after_day_of_month = days_from_start > delta
+
+        # determine the correct n for each date in i
+        roll = self._get_roll(i, before_day_of_month, after_day_of_month)
+
+        # isolate the time since it will be striped away one the next line
+        time = i.to_perioddelta('D')
+
+        # apply the correct number of months
+        i = (i.to_period('M') + (roll // 2)).to_timestamp()
+
+        # apply the correct day
+        i = self._apply_index_days(i, roll)
+
+        return i + time
+
+    def _get_roll(self, i, before_day_of_month, after_day_of_month):
+        """Return an array with the correct n for each date in i.
+
+        The roll array is based on the fact that i gets rolled back to
+        the first day of the month.
+        """
+        raise AbstractMethodError(self)
+
+    def _apply_index_days(self, i, roll):
+        """Apply the correct day for each date in i"""
+        raise AbstractMethodError(self)
+
+
+class SemiMonthEnd(SemiMonthOffset):
+    """
+    Two DateOffset's per month repeating on the last
+    day of the month and day_of_month.
+
+    .. versionadded:: 0.18.2
+
+    Parameters
+    ----------
+    n: int
+    normalize : bool, default False
+    day_of_month: int, {1, 3,...,27}, default 15
+    """
+    _prefix = 'SM'
+    _min_day_of_month = 1
+
+    def onOffset(self, dt):
+        if self.normalize and not _is_normalized(dt):
+            return False
+        _, days_in_month = tslib.monthrange(dt.year, dt.month)
+        return dt.day in (self.day_of_month, days_in_month)
+
+    def _apply(self, n, other):
+        # if other.day is not day_of_month move to day_of_month and update n
+        if other.day < self.day_of_month:
+            other += relativedelta(day=self.day_of_month)
+            if n > 0:
+                n -= 1
+        elif other.day > self.day_of_month:
+            other += relativedelta(day=self.day_of_month)
+            if n == 0:
+                n = 1
+            else:
+                n += 1
+
+        months = n // 2
+        day = 31 if n % 2 else self.day_of_month
+        return other + relativedelta(months=months, day=day)
+
+    def _get_roll(self, i, before_day_of_month, after_day_of_month):
+        n = self.n
+        is_month_end = i.is_month_end
+        if n > 0:
+            roll_end = np.where(is_month_end, 1, 0)
+            roll_before = np.where(before_day_of_month, n, n + 1)
+            roll = roll_end + roll_before
+        elif n == 0:
+            roll_after = np.where(after_day_of_month, 2, 0)
+            roll_before = np.where(~after_day_of_month, 1, 0)
+            roll = roll_before + roll_after
+        else:
+            roll = np.where(after_day_of_month, n + 2, n + 1)
+        return roll
+
+    def _apply_index_days(self, i, roll):
+        i += (roll % 2) * Timedelta(days=self.day_of_month).value
+        return i + Timedelta(days=-1)
+
+
+class SemiMonthBegin(SemiMonthOffset):
+    """
+    Two DateOffset's per month repeating on the first
+    day of the month and day_of_month.
+
+    .. versionadded:: 0.18.2
+
+    Parameters
+    ----------
+    n: int
+    normalize : bool, default False
+    day_of_month: int, {2, 3,...,27}, default 15
+    """
+    _prefix = 'SMS'
+
+    def onOffset(self, dt):
+        if self.normalize and not _is_normalized(dt):
+            return False
+        return dt.day in (1, self.day_of_month)
+
+    def _apply(self, n, other):
+        # if other.day is not day_of_month move to day_of_month and update n
+        if other.day < self.day_of_month:
+            other += relativedelta(day=self.day_of_month)
+            if n == 0:
+                n = -1
+            else:
+                n -= 1
+        elif other.day > self.day_of_month:
+            other += relativedelta(day=self.day_of_month)
+            if n == 0:
+                n = 1
+            elif n < 0:
+                n += 1
+
+        months = n // 2 + n % 2
+        day = 1 if n % 2 else self.day_of_month
+        return other + relativedelta(months=months, day=day)
+
+    def _get_roll(self, i, before_day_of_month, after_day_of_month):
+        n = self.n
+        is_month_start = i.is_month_start
+        if n > 0:
+            roll = np.where(before_day_of_month, n, n + 1)
+        elif n == 0:
+            roll_start = np.where(is_month_start, 0, 1)
+            roll_after = np.where(after_day_of_month, 1, 0)
+            roll = roll_start + roll_after
+        else:
+            roll_after = np.where(after_day_of_month, n + 2, n + 1)
+            roll_start = np.where(is_month_start, -1, 0)
+            roll = roll_after + roll_start
+        return roll
+
+    def _apply_index_days(self, i, roll):
+        return i + (roll % 2) * Timedelta(days=self.day_of_month - 1).value
+
+
 class BusinessMonthEnd(MonthOffset):
     """DateOffset increments between business EOM dates"""
 
@@ -2720,6 +2930,8 @@ prefix_mapping = dict((offset._prefix, offset) for offset in [
     CustomBusinessHour,        # 'CBH'
     MonthEnd,                  # 'M'
     MonthBegin,                # 'MS'
+    SemiMonthEnd,              # 'SM'
+    SemiMonthBegin,            # 'SMS'
     Week,                      # 'W'
     Second,                    # 'S'
     Minute,                    # 'T'
diff --git a/pandas/tseries/tests/test_frequencies.py b/pandas/tseries/tests/test_frequencies.py
index 528b9cc0b..1f06b7ad4 100644
--- a/pandas/tseries/tests/test_frequencies.py
+++ b/pandas/tseries/tests/test_frequencies.py
@@ -52,6 +52,26 @@ def test_to_offset_multiple():
     expected = offsets.Nano(2800)
     assert (result == expected)
 
+    freqstr = '2SM'
+    result = frequencies.to_offset(freqstr)
+    expected = offsets.SemiMonthEnd(2)
+    assert (result == expected)
+
+    freqstr = '2SM-16'
+    result = frequencies.to_offset(freqstr)
+    expected = offsets.SemiMonthEnd(2, day_of_month=16)
+    assert (result == expected)
+
+    freqstr = '2SMS-14'
+    result = frequencies.to_offset(freqstr)
+    expected = offsets.SemiMonthBegin(2, day_of_month=14)
+    assert (result == expected)
+
+    freqstr = '2SMS-15'
+    result = frequencies.to_offset(freqstr)
+    expected = offsets.SemiMonthBegin(2)
+    assert (result == expected)
+
     # malformed
     try:
         frequencies.to_offset('2h20m')
@@ -70,6 +90,14 @@ def test_to_offset_negative():
     result = frequencies.to_offset(freqstr)
     assert (result.n == -310)
 
+    freqstr = '-2SM'
+    result = frequencies.to_offset(freqstr)
+    assert (result.n == -2)
+
+    freqstr = '-1SMS'
+    result = frequencies.to_offset(freqstr)
+    assert (result.n == -1)
+
 
 def test_to_offset_leading_zero():
     freqstr = '00H 00T 01S'
@@ -137,6 +165,41 @@ def test_anchored_shortcuts():
     expected = offsets.QuarterEnd(startingMonth=5)
     assert (result1 == expected)
 
+    result1 = frequencies.to_offset('SM')
+    result2 = frequencies.to_offset('SM-15')
+    expected = offsets.SemiMonthEnd(day_of_month=15)
+    assert (result1 == expected)
+    assert (result2 == expected)
+
+    result = frequencies.to_offset('SM-1')
+    expected = offsets.SemiMonthEnd(day_of_month=1)
+    assert (result == expected)
+
+    result = frequencies.to_offset('SM-27')
+    expected = offsets.SemiMonthEnd(day_of_month=27)
+    assert (result == expected)
+
+    result = frequencies.to_offset('SMS-2')
+    expected = offsets.SemiMonthBegin(day_of_month=2)
+    assert (result == expected)
+
+    result = frequencies.to_offset('SMS-27')
+    expected = offsets.SemiMonthBegin(day_of_month=27)
+    assert (result == expected)
+
+    # ensure invalid cases fail as expected
+    invalid_anchors = ['SM-0', 'SM-28', 'SM-29',
+                       'SM-FOO', 'BSM', 'SM--1'
+                       'SMS-1', 'SMS-28', 'SMS-30',
+                       'SMS-BAR', 'BSMS', 'SMS--2']
+    for invalid_anchor in invalid_anchors:
+        try:
+            frequencies.to_offset(invalid_anchor)
+        except ValueError:
+            pass
+        else:
+            raise AssertionError(invalid_anchor)
+
 
 def test_get_rule_month():
     result = frequencies._get_rule_month('W')
diff --git a/pandas/tseries/tests/test_offsets.py b/pandas/tseries/tests/test_offsets.py
index ec88acc42..5965a6616 100644
--- a/pandas/tseries/tests/test_offsets.py
+++ b/pandas/tseries/tests/test_offsets.py
@@ -11,9 +11,9 @@ import numpy as np
 from pandas.compat.numpy import np_datetime64_compat
 from pandas.core.datetools import (bday, BDay, CDay, BQuarterEnd, BMonthEnd,
                                    BusinessHour, CustomBusinessHour,
-                                   CBMonthEnd, CBMonthBegin,
-                                   BYearEnd, MonthEnd, MonthBegin, BYearBegin,
-                                   QuarterBegin,
+                                   CBMonthEnd, CBMonthBegin, BYearEnd,
+                                   MonthEnd, MonthBegin, SemiMonthBegin,
+                                   SemiMonthEnd, BYearBegin, QuarterBegin,
                                    BQuarterBegin, BMonthBegin, DateOffset,
                                    Week, YearBegin, YearEnd, Hour, Minute,
                                    Second, Day, Micro, Milli, Nano, Easter,
@@ -21,6 +21,7 @@ from pandas.core.datetools import (bday, BDay, CDay, BQuarterEnd, BMonthEnd,
                                    QuarterEnd, to_datetime, normalize_date,
                                    get_offset, get_standard_freq)
 
+from pandas.core.series import Series
 from pandas.tseries.frequencies import (_offset_map, get_freq_code,
                                         _get_freq_str)
 from pandas.tseries.index import _to_m8, DatetimeIndex, _daterange_cache
@@ -182,6 +183,8 @@ class TestCommon(Base):
                           'BusinessMonthBegin':
                           Timestamp('2011-01-03 09:00:00'),
                           'MonthEnd': Timestamp('2011-01-31 09:00:00'),
+                          'SemiMonthEnd': Timestamp('2011-01-15 09:00:00'),
+                          'SemiMonthBegin': Timestamp('2011-01-15 09:00:00'),
                           'BusinessMonthEnd': Timestamp('2011-01-31 09:00:00'),
                           'YearBegin': Timestamp('2012-01-01 09:00:00'),
                           'BYearBegin': Timestamp('2011-01-03 09:00:00'),
@@ -311,9 +314,9 @@ class TestCommon(Base):
         expecteds = self.expecteds.copy()
 
         # result will not be changed if the target is on the offset
-        no_changes = ['Day', 'MonthBegin', 'YearBegin', 'Week', 'Hour',
-                      'Minute', 'Second', 'Milli', 'Micro', 'Nano',
-                      'DateOffset']
+        no_changes = ['Day', 'MonthBegin', 'SemiMonthBegin', 'YearBegin',
+                      'Week', 'Hour', 'Minute', 'Second', 'Milli', 'Micro',
+                      'Nano', 'DateOffset']
         for n in no_changes:
             expecteds[n] = Timestamp('2011/01/01 09:00')
 
@@ -328,6 +331,7 @@ class TestCommon(Base):
         normalized = {'Day': Timestamp('2011-01-02 00:00:00'),
                       'DateOffset': Timestamp('2011-01-02 00:00:00'),
                       'MonthBegin': Timestamp('2011-02-01 00:00:00'),
+                      'SemiMonthBegin': Timestamp('2011-01-15 00:00:00'),
                       'YearBegin': Timestamp('2012-01-01 00:00:00'),
                       'Week': Timestamp('2011-01-08 00:00:00'),
                       'Hour': Timestamp('2011-01-01 00:00:00'),
@@ -358,6 +362,7 @@ class TestCommon(Base):
                      Timestamp('2010-12-01 09:00:00'),
                      'BusinessMonthBegin': Timestamp('2010-12-01 09:00:00'),
                      'MonthEnd': Timestamp('2010-12-31 09:00:00'),
+                     'SemiMonthEnd': Timestamp('2010-12-31 09:00:00'),
                      'BusinessMonthEnd': Timestamp('2010-12-31 09:00:00'),
                      'BYearBegin': Timestamp('2010-01-01 09:00:00'),
                      'YearEnd': Timestamp('2010-12-31 09:00:00'),
@@ -375,8 +380,9 @@ class TestCommon(Base):
                      'Easter': Timestamp('2010-04-04 09:00:00')}
 
         # result will not be changed if the target is on the offset
-        for n in ['Day', 'MonthBegin', 'YearBegin', 'Week', 'Hour', 'Minute',
-                  'Second', 'Milli', 'Micro', 'Nano', 'DateOffset']:
+        for n in ['Day', 'MonthBegin', 'SemiMonthBegin', 'YearBegin', 'Week',
+                  'Hour', 'Minute', 'Second', 'Milli', 'Micro', 'Nano',
+                  'DateOffset']:
             expecteds[n] = Timestamp('2011/01/01 09:00')
 
         # but be changed when normalize=True
@@ -387,6 +393,7 @@ class TestCommon(Base):
         normalized = {'Day': Timestamp('2010-12-31 00:00:00'),
                       'DateOffset': Timestamp('2010-12-31 00:00:00'),
                       'MonthBegin': Timestamp('2010-12-01 00:00:00'),
+                      'SemiMonthBegin': Timestamp('2010-12-15 00:00:00'),
                       'YearBegin': Timestamp('2010-01-01 00:00:00'),
                       'Week': Timestamp('2010-12-25 00:00:00'),
                       'Hour': Timestamp('2011-01-01 00:00:00'),
@@ -2646,6 +2653,353 @@ class TestMonthEnd(Base):
             assertOnOffset(offset, dt, expected)
 
 
+class TestSemiMonthEnd(Base):
+    _offset = SemiMonthEnd
+
+    def _get_tests(self):
+        tests = []
+
+        tests.append((SemiMonthEnd(),
+                      {datetime(2008, 1, 1): datetime(2008, 1, 15),
+                       datetime(2008, 1, 15): datetime(2008, 1, 31),
+                       datetime(2008, 1, 31): datetime(2008, 2, 15),
+                       datetime(2006, 12, 14): datetime(2006, 12, 15),
+                       datetime(2006, 12, 29): datetime(2006, 12, 31),
+                       datetime(2006, 12, 31): datetime(2007, 1, 15),
+                       datetime(2007, 1, 1): datetime(2007, 1, 15),
+                       datetime(2006, 12, 1): datetime(2006, 12, 15),
+                       datetime(2006, 12, 15): datetime(2006, 12, 31)}))
+
+        tests.append((SemiMonthEnd(day_of_month=20),
+                      {datetime(2008, 1, 1): datetime(2008, 1, 20),
+                       datetime(2008, 1, 15): datetime(2008, 1, 20),
+                       datetime(2008, 1, 21): datetime(2008, 1, 31),
+                       datetime(2008, 1, 31): datetime(2008, 2, 20),
+                       datetime(2006, 12, 14): datetime(2006, 12, 20),
+                       datetime(2006, 12, 29): datetime(2006, 12, 31),
+                       datetime(2006, 12, 31): datetime(2007, 1, 20),
+                       datetime(2007, 1, 1): datetime(2007, 1, 20),
+                       datetime(2006, 12, 1): datetime(2006, 12, 20),
+                       datetime(2006, 12, 15): datetime(2006, 12, 20)}))
+
+        tests.append((SemiMonthEnd(0),
+                      {datetime(2008, 1, 1): datetime(2008, 1, 15),
+                       datetime(2008, 1, 16): datetime(2008, 1, 31),
+                       datetime(2008, 1, 15): datetime(2008, 1, 15),
+                       datetime(2008, 1, 31): datetime(2008, 1, 31),
+                       datetime(2006, 12, 29): datetime(2006, 12, 31),
+                       datetime(2006, 12, 31): datetime(2006, 12, 31),
+                       datetime(2007, 1, 1): datetime(2007, 1, 15)}))
+
+        tests.append((SemiMonthEnd(0, day_of_month=16),
+                      {datetime(2008, 1, 1): datetime(2008, 1, 16),
+                       datetime(2008, 1, 16): datetime(2008, 1, 16),
+                       datetime(2008, 1, 15): datetime(2008, 1, 16),
+                       datetime(2008, 1, 31): datetime(2008, 1, 31),
+                       datetime(2006, 12, 29): datetime(2006, 12, 31),
+                       datetime(2006, 12, 31): datetime(2006, 12, 31),
+                       datetime(2007, 1, 1): datetime(2007, 1, 16)}))
+
+        tests.append((SemiMonthEnd(2),
+                      {datetime(2008, 1, 1): datetime(2008, 1, 31),
+                       datetime(2008, 1, 31): datetime(2008, 2, 29),
+                       datetime(2006, 12, 29): datetime(2007, 1, 15),
+                       datetime(2006, 12, 31): datetime(2007, 1, 31),
+                       datetime(2007, 1, 1): datetime(2007, 1, 31),
+                       datetime(2007, 1, 16): datetime(2007, 2, 15),
+                       datetime(2006, 11, 1): datetime(2006, 11, 30)}))
+
+        tests.append((SemiMonthEnd(-1),
+                      {datetime(2007, 1, 1): datetime(2006, 12, 31),
+                       datetime(2008, 6, 30): datetime(2008, 6, 15),
+                       datetime(2008, 12, 31): datetime(2008, 12, 15),
+                       datetime(2006, 12, 29): datetime(2006, 12, 15),
+                       datetime(2006, 12, 30): datetime(2006, 12, 15),
+                       datetime(2007, 1, 1): datetime(2006, 12, 31)}))
+
+        tests.append((SemiMonthEnd(-1, day_of_month=4),
+                      {datetime(2007, 1, 1): datetime(2006, 12, 31),
+                       datetime(2007, 1, 4): datetime(2006, 12, 31),
+                       datetime(2008, 6, 30): datetime(2008, 6, 4),
+                       datetime(2008, 12, 31): datetime(2008, 12, 4),
+                       datetime(2006, 12, 5): datetime(2006, 12, 4),
+                       datetime(2006, 12, 30): datetime(2006, 12, 4),
+                       datetime(2007, 1, 1): datetime(2006, 12, 31)}))
+
+        tests.append((SemiMonthEnd(-2),
+                      {datetime(2007, 1, 1): datetime(2006, 12, 15),
+                       datetime(2008, 6, 30): datetime(2008, 5, 31),
+                       datetime(2008, 3, 15): datetime(2008, 2, 15),
+                       datetime(2008, 12, 31): datetime(2008, 11, 30),
+                       datetime(2006, 12, 29): datetime(2006, 11, 30),
+                       datetime(2006, 12, 14): datetime(2006, 11, 15),
+                       datetime(2007, 1, 1): datetime(2006, 12, 15)}))
+
+        return tests
+
+    def test_offset_whole_year(self):
+        dates = (datetime(2007, 12, 31),
+                 datetime(2008, 1, 15),
+                 datetime(2008, 1, 31),
+                 datetime(2008, 2, 15),
+                 datetime(2008, 2, 29),
+                 datetime(2008, 3, 15),
+                 datetime(2008, 3, 31),
+                 datetime(2008, 4, 15),
+                 datetime(2008, 4, 30),
+                 datetime(2008, 5, 15),
+                 datetime(2008, 5, 31),
+                 datetime(2008, 6, 15),
+                 datetime(2008, 6, 30),
+                 datetime(2008, 7, 15),
+                 datetime(2008, 7, 31),
+                 datetime(2008, 8, 15),
+                 datetime(2008, 8, 31),
+                 datetime(2008, 9, 15),
+                 datetime(2008, 9, 30),
+                 datetime(2008, 10, 15),
+                 datetime(2008, 10, 31),
+                 datetime(2008, 11, 15),
+                 datetime(2008, 11, 30),
+                 datetime(2008, 12, 15),
+                 datetime(2008, 12, 31))
+
+        for base, exp_date in zip(dates[:-1], dates[1:]):
+            assertEq(SemiMonthEnd(), base, exp_date)
+
+        # ensure .apply_index works as expected
+        s = DatetimeIndex(dates[:-1])
+        result = SemiMonthEnd().apply_index(s)
+        exp = DatetimeIndex(dates[1:])
+        tm.assert_index_equal(result, exp)
+
+        # ensure generating a range with DatetimeIndex gives same result
+        result = DatetimeIndex(start=dates[0], end=dates[-1], freq='SM')
+        exp = DatetimeIndex(dates)
+        tm.assert_index_equal(result, exp)
+
+    def test_offset(self):
+        for offset, cases in self._get_tests():
+            for base, expected in compat.iteritems(cases):
+                assertEq(offset, base, expected)
+
+    def test_apply_index(self):
+        for offset, cases in self._get_tests():
+            s = DatetimeIndex(cases.keys())
+            result = offset.apply_index(s)
+            exp = DatetimeIndex(cases.values())
+            tm.assert_index_equal(result, exp)
+
+    def test_onOffset(self):
+
+        tests = [(datetime(2007, 12, 31), True),
+                 (datetime(2007, 12, 15), True),
+                 (datetime(2007, 12, 14), False),
+                 (datetime(2007, 12, 1), False),
+                 (datetime(2008, 2, 29), True)]
+
+        for dt, expected in tests:
+            assertOnOffset(SemiMonthEnd(), dt, expected)
+
+    def test_vectorized_offset_addition(self):
+        for klass, assert_func in zip([Series, DatetimeIndex],
+                                      [self.assert_series_equal,
+                                       tm.assert_index_equal]):
+            s = klass([Timestamp('2000-01-15 00:15:00', tz='US/Central'),
+                       Timestamp('2000-02-15', tz='US/Central')], name='a')
+
+            result = s + SemiMonthEnd()
+            result2 = SemiMonthEnd() + s
+            exp = klass([Timestamp('2000-01-31 00:15:00', tz='US/Central'),
+                         Timestamp('2000-02-29', tz='US/Central')], name='a')
+            assert_func(result, exp)
+            assert_func(result2, exp)
+
+            s = klass([Timestamp('2000-01-01 00:15:00', tz='US/Central'),
+                       Timestamp('2000-02-01', tz='US/Central')], name='a')
+            result = s + SemiMonthEnd()
+            result2 = SemiMonthEnd() + s
+            exp = klass([Timestamp('2000-01-15 00:15:00', tz='US/Central'),
+                         Timestamp('2000-02-15', tz='US/Central')], name='a')
+            assert_func(result, exp)
+            assert_func(result2, exp)
+
+
+class TestSemiMonthBegin(Base):
+    _offset = SemiMonthBegin
+
+    def _get_tests(self):
+        tests = []
+
+        tests.append((SemiMonthBegin(),
+                      {datetime(2008, 1, 1): datetime(2008, 1, 15),
+                       datetime(2008, 1, 15): datetime(2008, 2, 1),
+                       datetime(2008, 1, 31): datetime(2008, 2, 1),
+                       datetime(2006, 12, 14): datetime(2006, 12, 15),
+                       datetime(2006, 12, 29): datetime(2007, 1, 1),
+                       datetime(2006, 12, 31): datetime(2007, 1, 1),
+                       datetime(2007, 1, 1): datetime(2007, 1, 15),
+                       datetime(2006, 12, 1): datetime(2006, 12, 15),
+                       datetime(2006, 12, 15): datetime(2007, 1, 1)}))
+
+        tests.append((SemiMonthBegin(day_of_month=20),
+                      {datetime(2008, 1, 1): datetime(2008, 1, 20),
+                       datetime(2008, 1, 15): datetime(2008, 1, 20),
+                       datetime(2008, 1, 21): datetime(2008, 2, 1),
+                       datetime(2008, 1, 31): datetime(2008, 2, 1),
+                       datetime(2006, 12, 14): datetime(2006, 12, 20),
+                       datetime(2006, 12, 29): datetime(2007, 1, 1),
+                       datetime(2006, 12, 31): datetime(2007, 1, 1),
+                       datetime(2007, 1, 1): datetime(2007, 1, 20),
+                       datetime(2006, 12, 1): datetime(2006, 12, 20),
+                       datetime(2006, 12, 15): datetime(2006, 12, 20)}))
+
+        tests.append((SemiMonthBegin(0),
+                      {datetime(2008, 1, 1): datetime(2008, 1, 1),
+                       datetime(2008, 1, 16): datetime(2008, 2, 1),
+                       datetime(2008, 1, 15): datetime(2008, 1, 15),
+                       datetime(2008, 1, 31): datetime(2008, 2, 1),
+                       datetime(2006, 12, 29): datetime(2007, 1, 1),
+                       datetime(2006, 12, 2): datetime(2006, 12, 15),
+                       datetime(2007, 1, 1): datetime(2007, 1, 1)}))
+
+        tests.append((SemiMonthBegin(0, day_of_month=16),
+                      {datetime(2008, 1, 1): datetime(2008, 1, 1),
+                       datetime(2008, 1, 16): datetime(2008, 1, 16),
+                       datetime(2008, 1, 15): datetime(2008, 1, 16),
+                       datetime(2008, 1, 31): datetime(2008, 2, 1),
+                       datetime(2006, 12, 29): datetime(2007, 1, 1),
+                       datetime(2006, 12, 31): datetime(2007, 1, 1),
+                       datetime(2007, 1, 5): datetime(2007, 1, 16),
+                       datetime(2007, 1, 1): datetime(2007, 1, 1)}))
+
+        tests.append((SemiMonthBegin(2),
+                      {datetime(2008, 1, 1): datetime(2008, 2, 1),
+                       datetime(2008, 1, 31): datetime(2008, 2, 15),
+                       datetime(2006, 12, 1): datetime(2007, 1, 1),
+                       datetime(2006, 12, 29): datetime(2007, 1, 15),
+                       datetime(2006, 12, 15): datetime(2007, 1, 15),
+                       datetime(2007, 1, 1): datetime(2007, 2, 1),
+                       datetime(2007, 1, 16): datetime(2007, 2, 15),
+                       datetime(2006, 11, 1): datetime(2006, 12, 1)}))
+
+        tests.append((SemiMonthBegin(-1),
+                      {datetime(2007, 1, 1): datetime(2006, 12, 15),
+                       datetime(2008, 6, 30): datetime(2008, 6, 15),
+                       datetime(2008, 6, 14): datetime(2008, 6, 1),
+                       datetime(2008, 12, 31): datetime(2008, 12, 15),
+                       datetime(2006, 12, 29): datetime(2006, 12, 15),
+                       datetime(2006, 12, 15): datetime(2006, 12, 1),
+                       datetime(2007, 1, 1): datetime(2006, 12, 15)}))
+
+        tests.append((SemiMonthBegin(-1, day_of_month=4),
+                      {datetime(2007, 1, 1): datetime(2006, 12, 4),
+                       datetime(2007, 1, 4): datetime(2007, 1, 1),
+                       datetime(2008, 6, 30): datetime(2008, 6, 4),
+                       datetime(2008, 12, 31): datetime(2008, 12, 4),
+                       datetime(2006, 12, 5): datetime(2006, 12, 4),
+                       datetime(2006, 12, 30): datetime(2006, 12, 4),
+                       datetime(2006, 12, 2): datetime(2006, 12, 1),
+                       datetime(2007, 1, 1): datetime(2006, 12, 4)}))
+
+        tests.append((SemiMonthBegin(-2),
+                      {datetime(2007, 1, 1): datetime(2006, 12, 1),
+                       datetime(2008, 6, 30): datetime(2008, 6, 1),
+                       datetime(2008, 6, 14): datetime(2008, 5, 15),
+                       datetime(2008, 12, 31): datetime(2008, 12, 1),
+                       datetime(2006, 12, 29): datetime(2006, 12, 1),
+                       datetime(2006, 12, 15): datetime(2006, 11, 15),
+                       datetime(2007, 1, 1): datetime(2006, 12, 1)}))
+
+        return tests
+
+    def test_offset_whole_year(self):
+        dates = (datetime(2007, 12, 15),
+                 datetime(2008, 1, 1),
+                 datetime(2008, 1, 15),
+                 datetime(2008, 2, 1),
+                 datetime(2008, 2, 15),
+                 datetime(2008, 3, 1),
+                 datetime(2008, 3, 15),
+                 datetime(2008, 4, 1),
+                 datetime(2008, 4, 15),
+                 datetime(2008, 5, 1),
+                 datetime(2008, 5, 15),
+                 datetime(2008, 6, 1),
+                 datetime(2008, 6, 15),
+                 datetime(2008, 7, 1),
+                 datetime(2008, 7, 15),
+                 datetime(2008, 8, 1),
+                 datetime(2008, 8, 15),
+                 datetime(2008, 9, 1),
+                 datetime(2008, 9, 15),
+                 datetime(2008, 10, 1),
+                 datetime(2008, 10, 15),
+                 datetime(2008, 11, 1),
+                 datetime(2008, 11, 15),
+                 datetime(2008, 12, 1),
+                 datetime(2008, 12, 15))
+
+        for base, exp_date in zip(dates[:-1], dates[1:]):
+            assertEq(SemiMonthBegin(), base, exp_date)
+
+        # ensure .apply_index works as expected
+        s = DatetimeIndex(dates[:-1])
+        result = SemiMonthBegin().apply_index(s)
+        exp = DatetimeIndex(dates[1:])
+        tm.assert_index_equal(result, exp)
+
+        # ensure generating a range with DatetimeIndex gives same result
+        result = DatetimeIndex(start=dates[0], end=dates[-1], freq='SMS')
+        exp = DatetimeIndex(dates)
+        tm.assert_index_equal(result, exp)
+
+    def test_offset(self):
+        for offset, cases in self._get_tests():
+            for base, expected in compat.iteritems(cases):
+                assertEq(offset, base, expected)
+
+    def test_apply_index(self):
+        for offset, cases in self._get_tests():
+            s = DatetimeIndex(cases.keys())
+            result = offset.apply_index(s)
+            exp = DatetimeIndex(cases.values())
+            tm.assert_index_equal(result, exp)
+
+    def test_onOffset(self):
+        tests = [(datetime(2007, 12, 1), True),
+                 (datetime(2007, 12, 15), True),
+                 (datetime(2007, 12, 14), False),
+                 (datetime(2007, 12, 31), False),
+                 (datetime(2008, 2, 15), True)]
+
+        for dt, expected in tests:
+            assertOnOffset(SemiMonthBegin(), dt, expected)
+
+    def test_vectorized_offset_addition(self):
+        for klass, assert_func in zip([Series, DatetimeIndex],
+                                      [self.assert_series_equal,
+                                       tm.assert_index_equal]):
+
+            s = klass([Timestamp('2000-01-15 00:15:00', tz='US/Central'),
+                       Timestamp('2000-02-15', tz='US/Central')], name='a')
+            result = s + SemiMonthBegin()
+            result2 = SemiMonthBegin() + s
+            exp = klass([Timestamp('2000-02-01 00:15:00', tz='US/Central'),
+                         Timestamp('2000-03-01', tz='US/Central')], name='a')
+            assert_func(result, exp)
+            assert_func(result2, exp)
+
+            s = klass([Timestamp('2000-01-01 00:15:00', tz='US/Central'),
+                       Timestamp('2000-02-01', tz='US/Central')], name='a')
+            result = s + SemiMonthBegin()
+            result2 = SemiMonthBegin() + s
+            exp = klass([Timestamp('2000-01-15 00:15:00', tz='US/Central'),
+                         Timestamp('2000-02-15', tz='US/Central')], name='a')
+            assert_func(result, exp)
+            assert_func(result2, exp)
+
+
 class TestBQuarterBegin(Base):
     _offset = BQuarterBegin
 
@@ -4537,6 +4891,8 @@ class TestDST(tm.TestCase):
                  BMonthEnd: ['11/2/2012', '11/30/2012'],
                  CBMonthBegin: ['11/2/2012', '12/3/2012'],
                  CBMonthEnd: ['11/2/2012', '11/30/2012'],
+                 SemiMonthBegin: ['11/2/2012', '11/15/2012'],
+                 SemiMonthEnd: ['11/2/2012', '11/15/2012'],
                  Week: ['11/2/2012', '11/9/2012'],
                  YearBegin: ['11/2/2012', '1/1/2013'],
                  YearEnd: ['11/2/2012', '12/31/2012'],
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index f6d80f7ee..fcc544ec7 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -3095,10 +3095,14 @@ class TestDatetimeIndex(tm.TestCase):
                     exp = klass([Timestamp('2001-1-1'), Timestamp('2001-2-1')])
                     assert_func(result, exp)
 
-            s = klass([Timestamp('2000-01-05 00:15:00'), Timestamp(
-                '2000-01-31 00:23:00'), Timestamp('2000-01-01'), Timestamp(
-                    '2000-03-31'), Timestamp('2000-02-29'), Timestamp(
-                        '2000-12-31')])
+            s = klass([Timestamp('2000-01-05 00:15:00'),
+                       Timestamp('2000-01-31 00:23:00'),
+                       Timestamp('2000-01-01'),
+                       Timestamp('2000-03-31'),
+                       Timestamp('2000-02-29'),
+                       Timestamp('2000-12-31'),
+                       Timestamp('2000-05-15'),
+                       Timestamp('2001-06-15')])
 
             # DateOffset relativedelta fastpath
             relative_kwargs = [('years', 2), ('months', 5), ('days', 3),
@@ -3115,6 +3119,7 @@ class TestDatetimeIndex(tm.TestCase):
             # assert these are equal on a piecewise basis
             offsets = ['YearBegin', ('YearBegin', {'month': 5}), 'YearEnd',
                        ('YearEnd', {'month': 5}), 'MonthBegin', 'MonthEnd',
+                       'SemiMonthEnd', 'SemiMonthBegin',
                        'Week', ('Week', {
                            'weekday': 3
                        }), 'BusinessDay', 'BDay', 'QuarterEnd', 'QuarterBegin',
