commit 4aac0c8a3ffd841a6916a5b49a8c4aa55fa8b080
Author: Tom Augspurger <TomAugspurger@users.noreply.github.com>
Date:   Wed Apr 25 15:21:40 2018 -0500

    BUG: Fixed NDFrame.transform('abs') (#20800)
    
    * BUG: Fixed NDFrame.transform('abs')
    
    Closes https://github.com/pandas-dev/pandas/issues/19760

diff --git a/pandas/core/apply.py b/pandas/core/apply.py
index 8fb74e2e8..ac173c518 100644
--- a/pandas/core/apply.py
+++ b/pandas/core/apply.py
@@ -111,8 +111,14 @@ class FrameApply(object):
 
         # string dispatch
         if isinstance(self.f, compat.string_types):
-            self.kwds['axis'] = self.axis
-            return getattr(self.obj, self.f)(*self.args, **self.kwds)
+            # Support for `frame.transform('method')`
+            # Some methods (shift, etc.) require the axis argument, others
+            # don't, so inspect and insert if nescessary.
+            func = getattr(self.obj, self.f)
+            sig = compat.signature(func)
+            if 'axis' in sig.args:
+                self.kwds['axis'] = self.axis
+            return func(*self.args, **self.kwds)
 
         # ufunc
         elif isinstance(self.f, np.ufunc):
diff --git a/pandas/tests/frame/test_apply.py b/pandas/tests/frame/test_apply.py
index a057ca087..af39c8f01 100644
--- a/pandas/tests/frame/test_apply.py
+++ b/pandas/tests/frame/test_apply.py
@@ -4,6 +4,7 @@ from __future__ import print_function
 
 import pytest
 
+import operator
 from datetime import datetime
 
 import warnings
@@ -880,6 +881,16 @@ class TestDataFrameAggregate(TestData):
             with np.errstate(all='ignore'):
                 df.agg({'A': ['abs', 'sum'], 'B': ['mean', 'max']})
 
+    @pytest.mark.parametrize('method', [
+        'abs', 'shift', 'pct_change', 'cumsum', 'rank',
+    ])
+    def test_transform_method_name(self, method):
+        # https://github.com/pandas-dev/pandas/issues/19760
+        df = pd.DataFrame({"A": [-1, 2]})
+        result = df.transform(method)
+        expected = operator.methodcaller(method)(df)
+        tm.assert_frame_equal(result, expected)
+
     def test_demo(self):
         # demonstration tests
         df = pd.DataFrame({'A': range(5), 'B': 5})
