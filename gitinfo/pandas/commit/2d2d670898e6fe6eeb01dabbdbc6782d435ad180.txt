commit 2d2d670898e6fe6eeb01dabbdbc6782d435ad180
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Mon Jul 22 14:13:56 2019 -0700

    stop conflating iNaT with td64-NaT (#27411)

diff --git a/pandas/core/internals/blocks.py b/pandas/core/internals/blocks.py
index e352444a9..9804360a9 100644
--- a/pandas/core/internals/blocks.py
+++ b/pandas/core/internals/blocks.py
@@ -2607,6 +2607,7 @@ class TimeDeltaBlock(DatetimeLikeBlockMixin, IntBlock):
     is_timedelta = True
     _can_hold_na = True
     is_numeric = False
+    fill_value = np.timedelta64("NaT", "ns")
 
     def __init__(self, values, placement, ndim=None):
         if values.dtype != _TD_DTYPE:
@@ -2627,15 +2628,11 @@ class TimeDeltaBlock(DatetimeLikeBlockMixin, IntBlock):
     def _can_hold_element(self, element):
         tipo = maybe_infer_dtype_type(element)
         if tipo is not None:
-            # TODO: remove the np.int64 support once coerce_values and
-            #  _try_coerce_args both coerce to m8[ns] and not i8.
-            return issubclass(tipo.type, (np.timedelta64, np.int64))
+            return issubclass(tipo.type, np.timedelta64)
         elif element is NaT:
             return True
         elif isinstance(element, (timedelta, np.timedelta64)):
             return True
-        elif is_integer(element):
-            return element == tslibs.iNaT
         return is_valid_nat_for_dtype(element, self.dtype)
 
     def fillna(self, value, **kwargs):
@@ -2655,9 +2652,6 @@ class TimeDeltaBlock(DatetimeLikeBlockMixin, IntBlock):
             value = Timedelta(value, unit="s")
         return super().fillna(value, **kwargs)
 
-    def _coerce_values(self, values):
-        return values.view("i8")
-
     def _try_coerce_args(self, other):
         """
         Coerce values and other to int64, with null values converted to
@@ -2673,13 +2667,12 @@ class TimeDeltaBlock(DatetimeLikeBlockMixin, IntBlock):
         """
 
         if is_valid_nat_for_dtype(other, self.dtype):
-            other = tslibs.iNaT
-        elif is_integer(other) and other == tslibs.iNaT:
-            pass
+            other = np.timedelta64("NaT", "ns")
         elif isinstance(other, (timedelta, np.timedelta64)):
-            other = Timedelta(other).value
+            other = Timedelta(other).to_timedelta64()
         elif hasattr(other, "dtype") and is_timedelta64_dtype(other):
-            other = other.astype("i8", copy=False).view("i8")
+            # TODO: can we get here with non-nano dtype?
+            pass
         else:
             # coercion issues
             # let higher levels handle
@@ -2693,7 +2686,7 @@ class TimeDeltaBlock(DatetimeLikeBlockMixin, IntBlock):
             mask = isna(result)
             if result.dtype.kind in ["i", "f"]:
                 result = result.astype("m8[ns]")
-            result[mask] = tslibs.iNaT
+            result[mask] = np.timedelta64("NaT", "ns")
 
         elif isinstance(result, (np.integer, np.float)):
             result = self._box_func(result)
diff --git a/pandas/core/nanops.py b/pandas/core/nanops.py
index d3dacee04..260da862a 100644
--- a/pandas/core/nanops.py
+++ b/pandas/core/nanops.py
@@ -1360,6 +1360,14 @@ def _nanpercentile_1d(values, mask, q, na_value, interpolation):
     quantiles : scalar or array
     """
     # mask is Union[ExtensionArray, ndarray]
+    if values.dtype.kind == "m":
+        # need to cast to integer to avoid rounding errors in numpy
+        result = _nanpercentile_1d(values.view("i8"), mask, q, na_value, interpolation)
+
+        # Note: we have to do do `astype` and not view because in general we
+        #  have float result at this point, not i8
+        return result.astype(values.dtype)
+
     values = values[~mask]
 
     if len(values) == 0:
diff --git a/pandas/tests/series/test_missing.py b/pandas/tests/series/test_missing.py
index c5fc52b9b..8398591f1 100644
--- a/pandas/tests/series/test_missing.py
+++ b/pandas/tests/series/test_missing.py
@@ -791,9 +791,11 @@ class TestSeriesMissingData:
         td1[0] = td[0]
         assert not isna(td1[0])
 
+        # GH#16674 iNaT is treated as an integer when given by the user
         td1[1] = iNaT
-        assert isna(td1[1])
-        assert td1[1].value == iNaT
+        assert not isna(td1[1])
+        assert td1.dtype == np.object_
+        assert td1[1] == iNaT
         td1[1] = td[1]
         assert not isna(td1[1])
 
@@ -803,6 +805,7 @@ class TestSeriesMissingData:
         td1[2] = td[2]
         assert not isna(td1[2])
 
+        # FIXME: don't leave commented-out
         # boolean setting
         # this doesn't work, not sure numpy even supports it
         # result = td[(td>np.timedelta64(timedelta(days=3))) &
