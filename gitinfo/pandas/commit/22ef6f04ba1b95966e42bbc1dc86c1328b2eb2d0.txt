commit 22ef6f04ba1b95966e42bbc1dc86c1328b2eb2d0
Author: sinhrks <sinhrks@gmail.com>
Date:   Sat Aug 13 20:10:07 2016 -0400

    CLN: Move PeriodIndex.repeat to DatetimeIndexOpsMixin
    
    related to #6469
    
    Author: sinhrks <sinhrks@gmail.com>
    
    Closes #13995 from sinhrks/period_repeat and squashes the following commits:
    
    c627549 [sinhrks] CLN: Move PeriodIndex.repeat to DatetimeIndexOpsMixin

diff --git a/pandas/tseries/base.py b/pandas/tseries/base.py
index 188f53837..d10e77d7a 100644
--- a/pandas/tseries/base.py
+++ b/pandas/tseries/base.py
@@ -749,7 +749,12 @@ class DatetimeIndexOpsMixin(object):
         Analogous to ndarray.repeat
         """
         nv.validate_repeat(args, kwargs)
-        return self._shallow_copy(self.values.repeat(repeats), freq=None)
+        if isinstance(self, ABCPeriodIndex):
+            freq = self.freq
+        else:
+            freq = None
+        return self._shallow_copy(self.asi8.repeat(repeats),
+                                  freq=freq)
 
     def where(self, cond, other=None):
         """
diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index 831d73207..8126d5f1d 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -34,7 +34,6 @@ from pandas.core.base import _shared_docs
 from pandas.indexes.base import _index_shared_docs
 
 from pandas import compat
-from pandas.compat.numpy import function as nv
 from pandas.util.decorators import Appender, cache_readonly, Substitution
 from pandas.lib import Timedelta
 import pandas.tslib as tslib
@@ -941,19 +940,6 @@ class PeriodIndex(DatelikeOps, DatetimeIndexOpsMixin, Int64Index):
                      for x in to_concat]
         return Index(com._concat_compat(to_concat), name=name)
 
-    def repeat(self, n, *args, **kwargs):
-        """
-        Return a new Index of the values repeated `n` times.
-
-        See also
-        --------
-        numpy.ndarray.repeat
-        """
-        nv.validate_repeat(args, kwargs)
-
-        # overwrites method from DatetimeIndexOpsMixin
-        return self._shallow_copy(self.values.repeat(n))
-
     def __setstate__(self, state):
         """Necessary for making this object picklable"""
 
diff --git a/pandas/tseries/tests/test_base.py b/pandas/tseries/tests/test_base.py
index 05f7d9d9c..5e8f8d3fb 100644
--- a/pandas/tseries/tests/test_base.py
+++ b/pandas/tseries/tests/test_base.py
@@ -170,23 +170,39 @@ class TestDatetimeIndexOps(Ops):
             tm.assertRaisesRegexp(ValueError, msg, rng.round, freq='M')
             tm.assertRaisesRegexp(ValueError, msg, elt.round, freq='M')
 
-    def test_repeat(self):
-        reps = 2
-
-        for tz in self.tz:
-            rng = pd.date_range(start='2016-01-01', periods=2,
-                                freq='30Min', tz=tz)
+    def test_repeat_range(self):
+        rng = date_range('1/1/2000', '1/1/2001')
 
-            expected_rng = DatetimeIndex([
-                Timestamp('2016-01-01 00:00:00', tz=tz, freq='30T'),
-                Timestamp('2016-01-01 00:00:00', tz=tz, freq='30T'),
-                Timestamp('2016-01-01 00:30:00', tz=tz, freq='30T'),
-                Timestamp('2016-01-01 00:30:00', tz=tz, freq='30T'),
-            ])
+        result = rng.repeat(5)
+        self.assertIsNone(result.freq)
+        self.assertEqual(len(result), 5 * len(rng))
 
-            tm.assert_index_equal(rng.repeat(reps), expected_rng)
+        for tz in self.tz:
+            index = pd.date_range('2001-01-01', periods=2, freq='D', tz=tz)
+            exp = pd.DatetimeIndex(['2001-01-01', '2001-01-01',
+                                    '2001-01-02', '2001-01-02'], tz=tz)
+            for res in [index.repeat(2), np.repeat(index, 2)]:
+                tm.assert_index_equal(res, exp)
+                self.assertIsNone(res.freq)
+
+            index = pd.date_range('2001-01-01', periods=2, freq='2D', tz=tz)
+            exp = pd.DatetimeIndex(['2001-01-01', '2001-01-01',
+                                    '2001-01-03', '2001-01-03'], tz=tz)
+            for res in [index.repeat(2), np.repeat(index, 2)]:
+                tm.assert_index_equal(res, exp)
+                self.assertIsNone(res.freq)
+
+            index = pd.DatetimeIndex(['2001-01-01', 'NaT', '2003-01-01'],
+                                     tz=tz)
+            exp = pd.DatetimeIndex(['2001-01-01', '2001-01-01', '2001-01-01',
+                                    'NaT', 'NaT', 'NaT',
+                                    '2003-01-01', '2003-01-01', '2003-01-01'],
+                                   tz=tz)
+            for res in [index.repeat(3), np.repeat(index, 3)]:
+                tm.assert_index_equal(res, exp)
+                self.assertIsNone(res.freq)
 
-    def test_numpy_repeat(self):
+    def test_repeat(self):
         reps = 2
         msg = "the 'axis' parameter is not supported"
 
@@ -201,6 +217,10 @@ class TestDatetimeIndexOps(Ops):
                 Timestamp('2016-01-01 00:30:00', tz=tz, freq='30T'),
             ])
 
+            res = rng.repeat(reps)
+            tm.assert_index_equal(res, expected_rng)
+            self.assertIsNone(res.freq)
+
             tm.assert_index_equal(np.repeat(rng, reps), expected_rng)
             tm.assertRaisesRegexp(ValueError, msg, np.repeat,
                                   rng, reps, axis=1)
@@ -1605,6 +1625,21 @@ Freq: D"""
                                 name='xxx')
         tm.assert_index_equal(idx.shift(-3, freq='T'), exp)
 
+    def test_repeat(self):
+        index = pd.timedelta_range('1 days', periods=2, freq='D')
+        exp = pd.TimedeltaIndex(['1 days', '1 days', '2 days', '2 days'])
+        for res in [index.repeat(2), np.repeat(index, 2)]:
+            tm.assert_index_equal(res, exp)
+            self.assertIsNone(res.freq)
+
+        index = TimedeltaIndex(['1 days', 'NaT', '3 days'])
+        exp = TimedeltaIndex(['1 days', '1 days', '1 days',
+                              'NaT', 'NaT', 'NaT',
+                              '3 days', '3 days', '3 days'])
+        for res in [index.repeat(3), np.repeat(index, 3)]:
+            tm.assert_index_equal(res, exp)
+            self.assertIsNone(res.freq)
+
 
 class TestPeriodIndexOps(Ops):
     def setUp(self):
@@ -2526,6 +2561,26 @@ Freq: Q-DEC"""
                               '2011-01-01 09:00'], name='xxx', freq='H')
         tm.assert_index_equal(idx.shift(-3), exp)
 
+    def test_repeat(self):
+        index = pd.period_range('2001-01-01', periods=2, freq='D')
+        exp = pd.PeriodIndex(['2001-01-01', '2001-01-01',
+                              '2001-01-02', '2001-01-02'], freq='D')
+        for res in [index.repeat(2), np.repeat(index, 2)]:
+            tm.assert_index_equal(res, exp)
+
+        index = pd.period_range('2001-01-01', periods=2, freq='2D')
+        exp = pd.PeriodIndex(['2001-01-01', '2001-01-01',
+                              '2001-01-03', '2001-01-03'], freq='2D')
+        for res in [index.repeat(2), np.repeat(index, 2)]:
+            tm.assert_index_equal(res, exp)
+
+        index = pd.PeriodIndex(['2001-01', 'NaT', '2003-01'], freq='M')
+        exp = pd.PeriodIndex(['2001-01', '2001-01', '2001-01',
+                              'NaT', 'NaT', 'NaT',
+                              '2003-01', '2003-01', '2003-01'], freq='M')
+        for res in [index.repeat(3), np.repeat(index, 3)]:
+            tm.assert_index_equal(res, exp)
+
 
 if __name__ == '__main__':
     import nose
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index d7f1a5261..8baac297f 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -2558,15 +2558,6 @@ class TestPeriodIndex(tm.TestCase):
         vals = np.array(vals)
         self.assertRaises(ValueError, PeriodIndex, vals)
 
-    def test_repeat(self):
-        index = period_range('20010101', periods=2)
-        expected = PeriodIndex([
-            Period('2001-01-01'), Period('2001-01-01'),
-            Period('2001-01-02'), Period('2001-01-02'),
-        ])
-
-        tm.assert_index_equal(index.repeat(2), expected)
-
     def test_numpy_repeat(self):
         index = period_range('20010101', periods=2)
         expected = PeriodIndex([Period('2001-01-01'), Period('2001-01-01'),
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index e5bbb9239..0544d8a8e 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -1342,13 +1342,6 @@ class TestTimeSeries(tm.TestCase):
         ts = Series(1, index=rng)
         repr(ts)
 
-    def test_repeat(self):
-        rng = date_range('1/1/2000', '1/1/2001')
-
-        result = rng.repeat(5)
-        self.assertIsNone(result.freq)
-        self.assertEqual(len(result), 5 * len(rng))
-
     def test_at_time(self):
         rng = date_range('1/1/2000', '1/5/2000', freq='5min')
         ts = Series(np.random.randn(len(rng)), index=rng)
