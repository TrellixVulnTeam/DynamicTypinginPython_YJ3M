commit 5cdad821666679836cb875f46e58bf4e4ebcc1f6
Author: jreback <jeff@reback.net>
Date:   Fri Aug 23 08:56:30 2013 -0400

    DOC: revised 0.13 internal refactoring to add np.where

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 578e235b0..29777e0c2 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -152,7 +152,7 @@ See :ref:`Internal Refactoring<whatsnew_0130.refactoring>`
   There are several minor changes that affect the API.
 
   - numpy functions that do not support the array interface will now
-    return ``ndarrays`` rather than series, e.g. ``np.diff`` and ``np.ones_like``
+    return ``ndarrays`` rather than series, e.g. ``np.diff``, ``np.ones_like``, ``np.where``
   - ``Series(0.5)`` would previously return the scalar ``0.5``, this is no
     longer supported
   - ``TimeSeries`` is now an alias for ``Series``. the property ``is_time_series``
diff --git a/doc/source/v0.13.0.txt b/doc/source/v0.13.0.txt
index 67d676618..6e735fb5d 100644
--- a/doc/source/v0.13.0.txt
+++ b/doc/source/v0.13.0.txt
@@ -156,20 +156,28 @@ and behaviors. Series formerly subclassed directly from ``ndarray``. (:issue:`40
    There are two potential incompatibilities from < 0.13.0
 
    - Using certain numpy functions would previously return a ``Series`` if passed a ``Series``
-     as an argument. This seems only to affect ``np.ones_like``, ``np.empty_like``, and
-     ``np.diff``. These now return ``ndarrays``.
+     as an argument. This seems only to affect ``np.ones_like``, ``np.empty_like``,
+     ``np.diff`` and ``np.where``. These now return ``ndarrays``.
 
      .. ipython:: python
 
         s = Series([1,2,3,4])
 
-        # numpy usage
+     Numpy Usage
+
+     .. ipython:: python
+
         np.ones_like(s)
         np.diff(s)
+        np.where(s>1,s,np.nan)
+
+     Pandonic Usage
+
+     .. ipython:: python
 
-        # pandonic usage
         Series(1,index=s.index)
         s.diff()
+        s.where(s>1)
 
    - Passing a ``Series`` directly to a cython function expecting an ``ndarray`` type will no
      long work directly, you must pass ``Series.values``, See :ref:`Enhancing Performance<enhancingperf.ndarray>`
