commit 501f4913481077d189a5b85c7beb3cc923d931e5
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jun 9 18:34:45 2011 -0400

    test suite passes, yay

diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 9b242a98b..656264cc4 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -338,7 +338,7 @@ class BlockManager(object):
             return self
 
         new_blocks = _consolidate(self.blocks)
-        return BlockManager(new_blocks, self.columns)
+        return BlockManager(new_blocks, self.index, self.columns)
 
     def get(self, col):
         _, block = self._find_block(col)
@@ -407,9 +407,6 @@ class BlockManager(object):
     def _chunk_index(self, col):
         pass
 
-    def rename(self, mapper):
-        pass
-
     def reindex_index(self, new_index, method=None):
         new_index = _ensure_index(new_index)
         indexer, mask = self.index.get_indexer(new_index, method)
@@ -457,23 +454,41 @@ class BlockManager(object):
         # will put these in the float bucket
         extra_columns = new_columns - self.columns
         if len(extra_columns):
-            # create new block, then consolidate
-            indexer, mask = extra_columns.get_indexer(new_columns)
+            new_blocks = add_na_columns(new_blocks, extra_columns,
+                                        self.index, new_columns)
 
-            # reorder to match relative order of new columns
-            extra_columns = extra_columns.take(indexer[mask])
+        return BlockManager(new_blocks, self.index, new_columns)
 
-            values = _nan_array(self.index, extra_columns)
-            newb = make_block(values, extra_columns)
-            new_blocks.append(newb)
-            new_blocks = _consolidate(new_blocks)
+    def rename_index(self, mapper):
+        new_index = [mapper(x) for x in self.index]
+        return BlockManager(self.blocks, new_index, self.columns)
 
+    def rename_columns(self, mapper):
+        def _rename_block(blk):
+            new_cols = [mapper(x) for x in blk.columns]
+            return make_block(blk.values, new_cols)
+
+        new_blocks = [_rename_block(x) for x in self.blocks]
+        new_columns = [mapper(x) for x in self.columns]
         return BlockManager(new_blocks, self.index, new_columns)
 
     def fillna(self, value):
         new_blocks = [b.fillna(value) for b in self.blocks]
         return BlockManager(new_blocks, self.index, self.columns)
 
+
+def add_na_columns(blocks, new_columns, index, columns):
+    # create new block, then consolidate
+    indexer, mask = new_columns.get_indexer(columns)
+
+    # reorder to match relative order of new columns
+    new_columns = new_columns.take(indexer[mask])
+
+    values = _nan_array(index, new_columns)
+    newb = make_block(values, new_columns)
+    blocks.append(newb)
+    return _consolidate(blocks)
+
 def _slice_blocks(blocks, slice_obj):
     new_blocks = []
     for block in blocks:
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index 76cac608a..058cf6436 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -141,11 +141,11 @@ class DataMatrix(DataFrame):
         new_data = self._data.reindex_columns(new_columns)
         return DataMatrix(new_data)
 
-    def _rename_columns_inplace(self, mapper):
-        self.columns = [mapper(x) for x in self.columns]
+    def _rename_index_inplace(self, mapper):
+        self._data = self._data.rename_index(mapper)
 
-        if self.objects is not None:
-            self.objects._rename_columns_inplace(mapper)
+    def _rename_columns_inplace(self, mapper):
+        self._data = self._data.rename_columns(mapper)
 
     def _combine_frame(self, other, func):
         """
@@ -595,13 +595,11 @@ class DataMatrix(DataFrame):
             indexer = self._shift_indexer(periods)
             new_blocks = [_shift_block(b, indexer) for b in self._data.blocks]
             new_data = BlockManager(new_blocks, self.index, self.columns)
-            new_index = self.index
         else:
-            new_index = self.index.shift(periods, offset)
             new_data = self._data.copy()
+            new_data.index = self.index.shift(periods, offset)
 
-        return DataMatrix(data=new_data, index=new_index,
-                          columns=self.columns)
+        return DataMatrix(new_data)
 
 _data_types = [np.float_, np.int_]
 
@@ -653,6 +651,9 @@ def _init_dict(data, index, columns, dtype):
     return BlockManager(blocks, index, columns)
 
 def _form_blocks(data, index, columns):
+    from pandas.core.internals import add_na_columns
+
+
     # pre-filter out columns if we passed it
     if columns is None:
         columns = Index(_try_sort(data.keys()))
@@ -663,27 +664,37 @@ def _form_blocks(data, index, columns):
 
     # put "leftover" columns in float bucket, where else?
     # generalize?
-    float_dict = {}
+    num_dict = {}
     object_dict = {}
     for k, v in data.iteritems():
         if issubclass(v.dtype.type, (np.floating, np.integer)):
-            float_dict[k] = v
+            num_dict[k] = v
         else:
             object_dict[k] = v
 
     blocks = []
 
-    # TODO: find corner cases
-    # oof, this sucks
-    fcolumns = extra_columns.union(float_dict.keys())
-    if len(fcolumns) > 0:
-        float_block = _float_blockify(float_dict, index, fcolumns)
-        blocks.append(float_block)
+
+    if len(num_dict) > 0:
+        num_dtypes = set(v.dtype for v in num_dict.values())
+        if len(num_dtypes) > 1:
+            num_dtype = np.float_
+        else:
+            num_dtype = list(num_dtypes)[0]
+
+        # TODO: find corner cases
+        # TODO: check type inference
+        num_block = _simple_blockify(num_dict, num_dtype)
+        blocks.append(num_block)
 
     if len(object_dict) > 0:
         object_block = _simple_blockify(object_dict, np.object_)
         blocks.append(object_block)
 
+    if len(extra_columns):
+        blocks = add_na_columns(blocks, extra_columns,
+                                index, columns)
+
     return blocks, columns
 
 def _simple_blockify(dct, dtype):
diff --git a/pandas/core/tests/test_matrix.py b/pandas/core/tests/test_matrix.py
index 525b64665..ea8b18038 100644
--- a/pandas/core/tests/test_matrix.py
+++ b/pandas/core/tests/test_matrix.py
@@ -158,7 +158,7 @@ class TestDataMatrix(test_frame.TestDataFrame):
         del df['B']
         df['B'] = [1., 2., 3.]
         self.assert_('B' in df)
-        self.assertEqual(len(df.columns), 1)
+        self.assertEqual(len(df.columns), 2)
 
         df['A'] = 'beginning'
         df['E'] = 'foo'
@@ -170,10 +170,11 @@ class TestDataMatrix(test_frame.TestDataFrame):
         dm = DataMatrix(index=self.frame.index)
         dm['A'] = 'foo'
         dm['B'] = 'bar'
-        self.assertEqual(len(dm.objects.columns), 2)
+        self.assertEqual(len(dm.columns), 2)
+        self.assertEqual(dm.values.dtype, np.object_)
 
         dm['C'] = 1
-        self.assertEqual(len(dm.columns), 1)
+        self.assertEqual(dm['C'].dtype, np.int_)
 
         # set existing column
         dm['A'] = 'bar'
@@ -184,7 +185,10 @@ class TestDataMatrix(test_frame.TestDataFrame):
         dm['foo'] = 'bar'
         del dm['foo']
         dm['foo'] = 'bar'
-        self.assertEqual(len(dm.objects.columns), 1)
+        self.assertEqual(dm['foo'].dtype, np.object_)
+
+        dm['coercable'] = ['1', '2', '3']
+        self.assertEqual(dm['coercable'].dtype, np.object_)
 
     def test_setitem_ambig(self):
         # difficulties with mixed-type data
@@ -199,17 +203,16 @@ class TestDataMatrix(test_frame.TestDataFrame):
 
         dm[0] = np.ones(3)
         self.assertEqual(len(dm.cols()), 3)
-        self.assert_(dm.objects is None)
+        # self.assert_(dm.objects is None)
 
         dm[1] = coercable_series
         self.assertEqual(len(dm.cols()), 3)
-        self.assert_(dm.objects is None)
+        # self.assert_(dm.objects is None)
 
         dm[2] = uncoercable_series
         self.assertEqual(len(dm.cols()), 3)
-        self.assert_(dm.objects is not None)
-        self.assert_(2 in dm.objects)
-        self.assert_(2 not in dm.columns)
+        # self.assert_(dm.objects is not None)
+        self.assert_(dm[2].dtype == np.object_)
 
     def test_delitem_corner(self):
         f = self.frame.copy()
@@ -219,13 +222,13 @@ class TestDataMatrix(test_frame.TestDataFrame):
         del f['B']
         self.assertEqual(len(f.columns), 2)
 
-    def test_shift_objects(self):
-        tsf = self.tsframe.copy()
-        tsf['foo'] = 'bar'
+    # def test_shift_objects(self):
+    #     tsf = self.tsframe.copy()
+    #     tsf['foo'] = 'bar'
 
-        shifted = tsf.shift(1)
-        self.assert_(shifted.objects is not None)
-        self.assert_(shifted.objects.index is shifted.index)
+    #     shifted = tsf.shift(1)
+    #     self.assert_(shifted.objects is not None)
+    #     self.assert_(shifted.objects.index is shifted.index)
 
     def test_more_asMatrix(self):
         values = self.mixed_frame.asMatrix()
diff --git a/refactor_notes.txt b/refactor_notes.txt
index 2c931b896..d268dc91f 100644
--- a/refactor_notes.txt
+++ b/refactor_notes.txt
@@ -7,6 +7,8 @@
 - Deal with emptiness: empty index and / or columns
 - Transpose: float casted to string??
 - Casting, want to continue to support?
+- Column ordering during consolidation
+- Different index passed with BlockManager
 
 - Need sparse internal data structure
 
