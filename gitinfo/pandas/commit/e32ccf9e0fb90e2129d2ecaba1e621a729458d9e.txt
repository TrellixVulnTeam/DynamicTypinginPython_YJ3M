commit e32ccf9e0fb90e2129d2ecaba1e621a729458d9e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Aug 12 13:49:55 2012 -0400

    BUG: close #1681 for real

diff --git a/RELEASE.rst b/RELEASE.rst
index 1dcfc0d3e..2b10d17c9 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -64,7 +64,7 @@ pandas 0.8.2
   - Fix field access with  UTC->local conversion on unsorted arrays (#1756)
   - Fix isnull handling of array-like (list) inputs (#1755)
   - Fix regression in handling of Series in Series constructor (#1671)
-  - Fix another NumPy datetime64 concatenate bug in DataFrame.append (#1681)
+  - Fix comparison of Int64Index with DatetimeIndex (#1681)
   - Fix min_periods handling in new rolling_max/min at array start (#1695)
   - Fix errors with how='median' and generic NumPy resampling in some cases
     caused by SeriesBinGrouper (#1648, #1688)
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 48ff22e5e..fd2d77571 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1211,7 +1211,11 @@ class Int64Index(Index):
         # if not isinstance(other, Int64Index):
         #     return False
 
-        return np.array_equal(self, other)
+        try:
+            return np.array_equal(self, other)
+        except TypeError:
+            # e.g. fails in numpy 1.6 with DatetimeIndex #1681
+            return False
 
     def _wrap_joined_index(self, joined, other):
         name = self.name if self.name == other.name else None
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 64179e9ef..4724ad9b7 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -1067,6 +1067,14 @@ class TestTimeSeries(unittest.TestCase):
         DataFrame({'a': 'foo', 'b': s}, index=dr)
         DataFrame({'a': 'foo', 'b': s.values}, index=dr)
 
+    def test_frame_datetime64_mixed_index_ctor_1681(self):
+        dr = date_range('2011/1/1', '2012/1/1', freq='W-FRI')
+        ts = Series(dr)
+
+        # it works!
+        d = DataFrame({'A': 'foo', 'B': ts}, index=dr)
+        self.assert_(d['B'].isnull().all())
+
 def _simple_ts(start, end, freq='D'):
     rng = date_range(start, end, freq=freq)
     return Series(np.random.randn(len(rng)), index=rng)
