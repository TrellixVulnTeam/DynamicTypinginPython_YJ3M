commit 840098474036618c56a6491bf1eff16c2b3e0365
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Jun 6 14:41:25 2012 -0400

    BUG: concatenate Series, don't create DataFrame in GroupBy.apply when indexes not all the same

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 1962ea6cc..fdd499269 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -2,6 +2,7 @@ from itertools import izip
 import types
 import numpy as np
 
+from pandas.core.algorithms import unique
 from pandas.core.factor import Factor
 from pandas.core.frame import DataFrame
 from pandas.core.generic import NDFrame
@@ -1570,6 +1571,8 @@ class NDFrameGroupBy(GroupBy):
         return output_keys
 
     def _wrap_applied_output(self, keys, values, not_indexed_same=False):
+        from pandas.core.index import _all_indexes_same
+
         if len(keys) == 0:
             # XXX
             return DataFrame({})
@@ -1597,6 +1600,11 @@ class NDFrameGroupBy(GroupBy):
                     key_index = Index(keys, name=key_names[0])
 
             if isinstance(values[0], np.ndarray):
+                if (isinstance(values[0], Series) and
+                    not _all_indexes_same([x.index for x in values])):
+                    return self._concat_objects(keys, values,
+                                                not_indexed_same=not_indexed_same)
+
                 if self.axis == 0:
                     stacked_values = np.vstack([np.asarray(x)
                                                 for x in values])
diff --git a/pandas/core/index.py b/pandas/core/index.py
index e5248648d..ba117b920 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -2437,3 +2437,9 @@ def _clean_arrays(values):
     return result
 
 
+def _all_indexes_same(indexes):
+    first = indexes[0]
+    for index in indexes[1:]:
+        if not first.equals(index):
+            return False
+    return True
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 797328843..d274215cf 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -1211,6 +1211,22 @@ class TestGroupBy(unittest.TestCase):
         self.assert_(result.index.equals(expected.index))
         self.assert_(np.array_equal(result.values, expected.values))
 
+    def test_apply_frame_concat_series(self):
+        def trans(group):
+            return group.groupby('B')['C'].sum().order()[:2]
+
+        def trans2(group):
+            grouped = group.groupby(df.reindex(group.index)['B'])
+            return grouped.sum().order()[:2]
+
+        df = DataFrame({'A': np.random.randint(0, 5, 1000),
+                        'B': np.random.randint(0, 5, 1000),
+                        'C': np.random.randn(1000)})
+
+        result = df.groupby('A').apply(trans)
+        exp = df.groupby('A')['C'].apply(trans2)
+        assert_series_equal(result, exp)
+
     def test_apply_transform(self):
         grouped = self.ts.groupby(lambda x: x.month)
         result = grouped.apply(lambda x: x * 2)
diff --git a/pandas/tools/merge.py b/pandas/tools/merge.py
index a607df5b7..245906144 100644
--- a/pandas/tools/merge.py
+++ b/pandas/tools/merge.py
@@ -10,7 +10,8 @@ from pandas.core.generic import NDFrame
 from pandas.core.groupby import get_group_index
 from pandas.core.series import Series
 from pandas.core.index import (Index, MultiIndex, _get_combined_index,
-                               _ensure_index, _get_consensus_names)
+                               _ensure_index, _get_consensus_names,
+                               _all_indexes_same)
 from pandas.core.internals import (IntBlock, BoolBlock, BlockManager,
                                    make_block, _consolidate)
 from pandas.util.decorators import cache_readonly, Appender, Substitution
@@ -1194,13 +1195,6 @@ def _should_fill(lname, rname):
     return lname == rname
 
 
-def _all_indexes_same(indexes):
-    first = indexes[0]
-    for index in indexes[1:]:
-        if not first.equals(index):
-            return False
-    return True
-
 
 def _any(x):
     return x is not None and len(x) > 0 and any([y is not None for y in x])
