commit d7913621195424f538748915e82c5c2fcc4164bd
Author: gfyoung <gfyoung17@gmail.com>
Date:   Sun Apr 16 14:27:46 2017 -0400

    MAINT: Strip internals from TestCase class (#16016)
    
    * MAINT: Move reset_display_options outside of TestCase
    
    * MAINT: Move round_trip_pickle outside of TestCase
    
    * MAINT: Remove all deprecated aliases from TestCase
    
    * DOC: Add doc explaining TestCase usage under pytest

diff --git a/pandas/tests/core/dtypes/test_dtypes.py b/pandas/tests/core/dtypes/test_dtypes.py
index ec9876df1..46569fecf 100644
--- a/pandas/tests/core/dtypes/test_dtypes.py
+++ b/pandas/tests/core/dtypes/test_dtypes.py
@@ -40,7 +40,7 @@ class Base(object):
         self.assertNotEqual(np.str_, self.dtype)
 
     def test_pickle(self):
-        result = self.round_trip_pickle(self.dtype)
+        result = tm.round_trip_pickle(self.dtype)
         self.assertEqual(result, self.dtype)
 
 
diff --git a/pandas/tests/core/sparse/test_array.py b/pandas/tests/core/sparse/test_array.py
index b7b664e7b..9a1346430 100644
--- a/pandas/tests/core/sparse/test_array.py
+++ b/pandas/tests/core/sparse/test_array.py
@@ -562,7 +562,7 @@ class TestSparseArray(tm.TestCase):
 
     def test_pickle(self):
         def _check_roundtrip(obj):
-            unpickled = self.round_trip_pickle(obj)
+            unpickled = tm.round_trip_pickle(obj)
             tm.assert_sp_array_equal(unpickled, obj)
 
         _check_roundtrip(self.arr)
diff --git a/pandas/tests/core/sparse/test_frame.py b/pandas/tests/core/sparse/test_frame.py
index 5774a74c6..279fe9ea7 100644
--- a/pandas/tests/core/sparse/test_frame.py
+++ b/pandas/tests/core/sparse/test_frame.py
@@ -278,7 +278,7 @@ class TestSparseDataFrame(tm.TestCase, SharedWithSparse):
     def test_pickle(self):
 
         def _test_roundtrip(frame, orig):
-            result = self.round_trip_pickle(frame)
+            result = tm.round_trip_pickle(frame)
             tm.assert_sp_frame_equal(frame, result)
             tm.assert_frame_equal(result.to_dense(), orig, check_dtype=False)
 
diff --git a/pandas/tests/core/sparse/test_series.py b/pandas/tests/core/sparse/test_series.py
index 0b71dffe1..52032b618 100644
--- a/pandas/tests/core/sparse/test_series.py
+++ b/pandas/tests/core/sparse/test_series.py
@@ -390,7 +390,7 @@ class TestSparseSeries(tm.TestCase, SharedWithSparse):
 
     def test_pickle(self):
         def _test_roundtrip(series):
-            unpickled = self.round_trip_pickle(series)
+            unpickled = tm.round_trip_pickle(series)
             tm.assert_sp_series_equal(series, unpickled)
             tm.assert_series_equal(series.to_dense(), unpickled.to_dense())
 
diff --git a/pandas/tests/frame/test_block_internals.py b/pandas/tests/frame/test_block_internals.py
index accd3ddeb..bfe1b0aae 100644
--- a/pandas/tests/frame/test_block_internals.py
+++ b/pandas/tests/frame/test_block_internals.py
@@ -350,18 +350,18 @@ class TestDataFrameBlockInternals(tm.TestCase, TestData):
         self.assertIsNot(copy._data, self.mixed_frame._data)
 
     def test_pickle(self):
-        unpickled = self.round_trip_pickle(self.mixed_frame)
+        unpickled = tm.round_trip_pickle(self.mixed_frame)
         assert_frame_equal(self.mixed_frame, unpickled)
 
         # buglet
         self.mixed_frame._data.ndim
 
         # empty
-        unpickled = self.round_trip_pickle(self.empty)
+        unpickled = tm.round_trip_pickle(self.empty)
         repr(unpickled)
 
         # tz frame
-        unpickled = self.round_trip_pickle(self.tzframe)
+        unpickled = tm.round_trip_pickle(self.tzframe)
         assert_frame_equal(self.tzframe, unpickled)
 
     def test_consolidate_datetime64(self):
diff --git a/pandas/tests/frame/test_repr_info.py b/pandas/tests/frame/test_repr_info.py
index 740a24f38..be55efac2 100644
--- a/pandas/tests/frame/test_repr_info.py
+++ b/pandas/tests/frame/test_repr_info.py
@@ -118,7 +118,7 @@ class TestDataFrameReprInfoEtc(tm.TestCase, TestData):
         fmt.set_option('display.max_rows', 1000, 'display.max_columns', 1000)
         repr(self.frame)
 
-        self.reset_display_options()
+        tm.reset_display_options()
 
         warnings.filters = warn_filters
 
diff --git a/pandas/tests/frame/test_subclass.py b/pandas/tests/frame/test_subclass.py
index dbb2e0417..1899df74c 100644
--- a/pandas/tests/frame/test_subclass.py
+++ b/pandas/tests/frame/test_subclass.py
@@ -85,7 +85,7 @@ class TestDataFrameSubclassing(tm.TestCase, TestData):
         self.assertEqual(df.iloc[0:1, :].testattr, 'XXX')
 
         # GH10553
-        unpickled = self.round_trip_pickle(df)
+        unpickled = tm.round_trip_pickle(df)
         tm.assert_frame_equal(df, unpickled)
         self.assertEqual(df._metadata, unpickled._metadata)
         self.assertEqual(df.testattr, unpickled.testattr)
diff --git a/pandas/tests/indexes/common.py b/pandas/tests/indexes/common.py
index 25214e6b1..15eceac6b 100644
--- a/pandas/tests/indexes/common.py
+++ b/pandas/tests/indexes/common.py
@@ -28,7 +28,7 @@ class Base(object):
             setattr(self, name, idx)
 
     def verify_pickle(self, index):
-        unpickled = self.round_trip_pickle(index)
+        unpickled = tm.round_trip_pickle(index)
         self.assertTrue(index.equals(unpickled))
 
     def test_pickle_compat_construction(self):
diff --git a/pandas/tests/indexes/datetimes/test_datetime.py b/pandas/tests/indexes/datetimes/test_datetime.py
index 78c37f773..feedde77e 100644
--- a/pandas/tests/indexes/datetimes/test_datetime.py
+++ b/pandas/tests/indexes/datetimes/test_datetime.py
@@ -106,7 +106,7 @@ class TestDatetimeIndex(tm.TestCase):
         # GH 8367
         # round-trip of timezone
         index = date_range('20130101', periods=3, tz='US/Eastern', name='foo')
-        unpickled = self.round_trip_pickle(index)
+        unpickled = tm.round_trip_pickle(index)
         self.assert_index_equal(index, unpickled)
 
     def test_reindex_preserves_tz_if_target_is_empty_list_or_array(self):
diff --git a/pandas/tests/indexes/datetimes/test_ops.py b/pandas/tests/indexes/datetimes/test_ops.py
index 4be999998..6e6d6bf19 100644
--- a/pandas/tests/indexes/datetimes/test_ops.py
+++ b/pandas/tests/indexes/datetimes/test_ops.py
@@ -1121,7 +1121,7 @@ class TestBusinessDatetimeIndex(tm.TestCase):
         self.assertFalse(comp[9])
 
     def test_pickle_unpickle(self):
-        unpickled = self.round_trip_pickle(self.rng)
+        unpickled = tm.round_trip_pickle(self.rng)
         self.assertIsNotNone(unpickled.offset)
 
     def test_copy(self):
@@ -1272,7 +1272,7 @@ class TestCustomDatetimeIndex(tm.TestCase):
             self.assertEqual(shifted[0], rng[0] + CDay())
 
     def test_pickle_unpickle(self):
-        unpickled = self.round_trip_pickle(self.rng)
+        unpickled = tm.round_trip_pickle(self.rng)
         self.assertIsNotNone(unpickled.offset)
 
     def test_summary(self):
diff --git a/pandas/tests/indexes/period/test_period.py b/pandas/tests/indexes/period/test_period.py
index 6639fcd98..fcbb1c104 100644
--- a/pandas/tests/indexes/period/test_period.py
+++ b/pandas/tests/indexes/period/test_period.py
@@ -58,7 +58,7 @@ class TestPeriodIndex(DatetimeLike, tm.TestCase):
     def test_pickle_round_trip(self):
         for freq in ['D', 'M', 'Y']:
             idx = PeriodIndex(['2016-05-16', 'NaT', NaT, np.NaN], freq='D')
-            result = self.round_trip_pickle(idx)
+            result = tm.round_trip_pickle(idx)
             tm.assert_index_equal(result, idx)
 
     def test_get_loc(self):
@@ -761,7 +761,7 @@ class TestPeriodIndex(DatetimeLike, tm.TestCase):
     def test_pickle_freq(self):
         # GH2891
         prng = period_range('1/1/2011', '1/1/2012', freq='M')
-        new_prng = self.round_trip_pickle(prng)
+        new_prng = tm.round_trip_pickle(prng)
         self.assertEqual(new_prng.freq, offsets.MonthEnd())
         self.assertEqual(new_prng.freqstr, 'M')
 
diff --git a/pandas/tests/indexes/test_multi.py b/pandas/tests/indexes/test_multi.py
index e93319a30..b33a317ee 100644
--- a/pandas/tests/indexes/test_multi.py
+++ b/pandas/tests/indexes/test_multi.py
@@ -1044,7 +1044,7 @@ class TestMultiIndex(Base, tm.TestCase):
             [[1, 2], ['a', 'b'], date_range('20130101', periods=3,
                                             tz='US/Eastern')
              ], names=['one', 'two', 'three'])
-        unpickled = self.round_trip_pickle(index)
+        unpickled = tm.round_trip_pickle(index)
         self.assertTrue(index.equal_levels(unpickled))
 
     def test_from_tuples_index_values(self):
@@ -1392,7 +1392,7 @@ class TestMultiIndex(Base, tm.TestCase):
         result = self.index.format()
         self.assertEqual(result[1], 'foo  two')
 
-        self.reset_display_options()
+        tm.reset_display_options()
 
         warnings.filters = warn_filters
 
diff --git a/pandas/tests/indexes/timedeltas/test_timedelta.py b/pandas/tests/indexes/timedeltas/test_timedelta.py
index 3abc2d842..f434938a6 100644
--- a/pandas/tests/indexes/timedeltas/test_timedelta.py
+++ b/pandas/tests/indexes/timedeltas/test_timedelta.py
@@ -454,7 +454,7 @@ class TestTimedeltaIndex(DatetimeLike, tm.TestCase):
     def test_pickle(self):
 
         rng = timedelta_range('1 days', periods=10)
-        rng_p = self.round_trip_pickle(rng)
+        rng_p = tm.round_trip_pickle(rng)
         tm.assert_index_equal(rng, rng_p)
 
     def test_hash_error(self):
diff --git a/pandas/tests/io/formats/test_eng_formatting.py b/pandas/tests/io/formats/test_eng_formatting.py
index 225a49219..8eb4ed576 100644
--- a/pandas/tests/io/formats/test_eng_formatting.py
+++ b/pandas/tests/io/formats/test_eng_formatting.py
@@ -38,7 +38,7 @@ class TestEngFormatter(tm.TestCase):
                     '3    1E+06')
         self.assertEqual(result, expected)
 
-        self.reset_display_options()
+        tm.reset_display_options()
 
     def compare(self, formatter, input, output):
         formatted_input = formatter(input)
@@ -185,7 +185,7 @@ class TestEngFormatter(tm.TestCase):
         fmt.set_eng_float_format(accuracy=1)
         result = pt.to_string()
         self.assertTrue('NaN' in result)
-        self.reset_display_options()
+        tm.reset_display_options()
 
     def test_inf(self):
         # Issue #11981
diff --git a/pandas/tests/io/formats/test_format.py b/pandas/tests/io/formats/test_format.py
index b880ba8b1..bb766ae38 100644
--- a/pandas/tests/io/formats/test_format.py
+++ b/pandas/tests/io/formats/test_format.py
@@ -138,7 +138,7 @@ class TestDataFrameFormatting(tm.TestCase):
 
         fmt.set_eng_float_format(accuracy=0)
         repr(self.frame)
-        self.reset_display_options()
+        tm.reset_display_options()
 
     def test_show_null_counts(self):
 
@@ -1197,7 +1197,7 @@ class TestDataFrameFormatting(tm.TestCase):
         self.assertEqual(df_s, expected)
 
     def test_to_string_float_formatting(self):
-        self.reset_display_options()
+        tm.reset_display_options()
         fmt.set_option('display.precision', 5, 'display.column_space', 12,
                        'display.notebook_repr_html', False)
 
@@ -1226,7 +1226,7 @@ class TestDataFrameFormatting(tm.TestCase):
         expected = ('          x\n' '0  3234.000\n' '1     0.253')
         self.assertEqual(df_s, expected)
 
-        self.reset_display_options()
+        tm.reset_display_options()
         self.assertEqual(get_option("display.precision"), 6)
 
         df = DataFrame({'x': [1e9, 0.2512]})
@@ -1310,14 +1310,14 @@ c  10  11  12  13  14\
         self.assertEqual(rs, xp)
 
     def test_to_string_left_justify_cols(self):
-        self.reset_display_options()
+        tm.reset_display_options()
         df = DataFrame({'x': [3234, 0.253]})
         df_s = df.to_string(justify='left')
         expected = ('   x       \n' '0  3234.000\n' '1     0.253')
         self.assertEqual(df_s, expected)
 
     def test_to_string_format_na(self):
-        self.reset_display_options()
+        tm.reset_display_options()
         df = DataFrame({'A': [np.nan, -1, -2.1234, 3, 4],
                         'B': [np.nan, 'foo', 'foooo', 'fooooo', 'bar']})
         result = df.to_string()
@@ -1380,7 +1380,7 @@ c  10  11  12  13  14\
         fmt.set_option('display.notebook_repr_html', False)
         self.frame._repr_html_()
 
-        self.reset_display_options()
+        tm.reset_display_options()
 
         df = DataFrame([[1, 2], [3, 4]])
         fmt.set_option('display.show_dimensions', True)
@@ -1388,7 +1388,7 @@ c  10  11  12  13  14\
         fmt.set_option('display.show_dimensions', False)
         self.assertFalse('2 rows' in df._repr_html_())
 
-        self.reset_display_options()
+        tm.reset_display_options()
 
     def test_repr_html_wide(self):
         max_cols = get_option('display.max_columns')
@@ -1552,7 +1552,7 @@ c  10  11  12  13  14\
         repstr = self.frame._repr_html_()
         self.assertIn('class', repstr)  # info fallback
 
-        self.reset_display_options()
+        tm.reset_display_options()
 
     def test_pprint_pathological_object(self):
         """
diff --git a/pandas/tests/scalar/test_period.py b/pandas/tests/scalar/test_period.py
index 7a15600d6..98af00284 100644
--- a/pandas/tests/scalar/test_period.py
+++ b/pandas/tests/scalar/test_period.py
@@ -909,7 +909,7 @@ class TestPeriodProperties(tm.TestCase):
     def test_round_trip(self):
 
         p = Period('2000Q1')
-        new_p = self.round_trip_pickle(p)
+        new_p = tm.round_trip_pickle(p)
         self.assertEqual(new_p, p)
 
 
diff --git a/pandas/tests/scalar/test_timedelta.py b/pandas/tests/scalar/test_timedelta.py
index c22d1d232..abdbf2900 100644
--- a/pandas/tests/scalar/test_timedelta.py
+++ b/pandas/tests/scalar/test_timedelta.py
@@ -559,7 +559,7 @@ class TestTimedeltas(tm.TestCase):
     def test_pickle(self):
 
         v = Timedelta('1 days 10:11:12.0123456')
-        v_p = self.round_trip_pickle(v)
+        v_p = tm.round_trip_pickle(v)
         self.assertEqual(v, v_p)
 
     def test_timedelta_hash_equality(self):
diff --git a/pandas/tests/series/test_io.py b/pandas/tests/series/test_io.py
index d514fbfc1..a86ca880e 100644
--- a/pandas/tests/series/test_io.py
+++ b/pandas/tests/series/test_io.py
@@ -134,7 +134,7 @@ class TestSeriesIO(TestData, tm.TestCase):
         from pandas import period_range
         prng = period_range('1/1/2011', '1/1/2012', freq='M')
         ts = Series(np.random.randn(len(prng)), prng)
-        new_ts = self.round_trip_pickle(ts)
+        new_ts = tm.round_trip_pickle(ts)
         self.assertEqual(new_ts.index.freq, 'M')
 
     def test_pickle_preserve_name(self):
diff --git a/pandas/tests/series/test_timeseries.py b/pandas/tests/series/test_timeseries.py
index ce7d5a573..5a88b5bf9 100644
--- a/pandas/tests/series/test_timeseries.py
+++ b/pandas/tests/series/test_timeseries.py
@@ -827,11 +827,11 @@ class TestTimeSeries(TestData, tm.TestCase):
     def test_pickle(self):
 
         # GH4606
-        p = self.round_trip_pickle(NaT)
+        p = tm.round_trip_pickle(NaT)
         self.assertTrue(p is NaT)
 
         idx = pd.to_datetime(['2013-01-01', NaT, '2014-01-06'])
-        idx_p = self.round_trip_pickle(idx)
+        idx_p = tm.round_trip_pickle(idx)
         self.assertTrue(idx_p[0] == idx[0])
         self.assertTrue(idx_p[1] is NaT)
         self.assertTrue(idx_p[2] == idx[2])
@@ -839,7 +839,7 @@ class TestTimeSeries(TestData, tm.TestCase):
         # GH11002
         # don't infer freq
         idx = date_range('1750-1-1', '2050-1-1', freq='7D')
-        idx_p = self.round_trip_pickle(idx)
+        idx_p = tm.round_trip_pickle(idx)
         tm.assert_index_equal(idx, idx_p)
 
     def test_setops_preserve_freq(self):
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 648a3b98b..24bbf8955 100755
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -179,7 +179,7 @@ class TestMultiLevel(Base, tm.TestCase):
 
     def test_pickle(self):
         def _test_roundtrip(frame):
-            unpickled = self.round_trip_pickle(frame)
+            unpickled = tm.round_trip_pickle(frame)
             tm.assert_frame_equal(frame, unpickled)
 
         _test_roundtrip(self.frame)
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 60173dda5..4e9805ca9 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -43,7 +43,7 @@ class PanelTests(object):
 
     def test_pickle(self):
         with catch_warnings(record=True):
-            unpickled = self.round_trip_pickle(self.panel)
+            unpickled = tm.round_trip_pickle(self.panel)
             assert_frame_equal(unpickled['ItemA'], self.panel['ItemA'])
 
     def test_rank(self):
diff --git a/pandas/tests/test_testing.py b/pandas/tests/test_testing.py
index e5cb953cb..fe4149583 100644
--- a/pandas/tests/test_testing.py
+++ b/pandas/tests/test_testing.py
@@ -746,26 +746,6 @@ class TestRNGContext(unittest.TestCase):
             self.assertEqual(np.random.randn(), expected0)
 
 
-class TestDeprecatedTests(tm.TestCase):
-
-    def test_warning(self):
-
-        with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):
-            self.assertEquals(1, 1)
-
-        with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):
-            self.assertNotEquals(1, 2)
-
-        with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):
-            self.assert_(True)
-
-        with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):
-            self.assertAlmostEquals(1.0, 1.0000000001)
-
-        with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):
-            self.assertNotAlmostEquals(1, 2)
-
-
 class TestLocale(tm.TestCase):
 
     def test_locale(self):
diff --git a/pandas/tests/tseries/test_offsets.py b/pandas/tests/tseries/test_offsets.py
index f644c3539..2dc248555 100644
--- a/pandas/tests/tseries/test_offsets.py
+++ b/pandas/tests/tseries/test_offsets.py
@@ -1906,7 +1906,7 @@ class TestCustomBusinessDay(Base):
 
     def test_roundtrip_pickle(self):
         def _check_roundtrip(obj):
-            unpickled = self.round_trip_pickle(obj)
+            unpickled = tm.round_trip_pickle(obj)
             self.assertEqual(unpickled, obj)
 
         _check_roundtrip(self.offset)
@@ -1967,7 +1967,7 @@ class CustomBusinessMonthBase(object):
 
     def test_roundtrip_pickle(self):
         def _check_roundtrip(obj):
-            unpickled = self.round_trip_pickle(obj)
+            unpickled = tm.round_trip_pickle(obj)
             self.assertEqual(unpickled, obj)
 
         _check_roundtrip(self._object())
diff --git a/pandas/util/decorators.py b/pandas/util/decorators.py
index ca588e2a0..772b206f8 100644
--- a/pandas/util/decorators.py
+++ b/pandas/util/decorators.py
@@ -24,7 +24,7 @@ def deprecate_kwarg(old_arg_name, new_arg_name, mapping=None, stacklevel=2):
     old_arg_name : str
         Name of argument in function to deprecate
     new_arg_name : str
-        Name of prefered argument in function
+        Name of preferred argument in function
     mapping : dict or callable
         If mapping is present, use it to translate old arguments to
         new arguments. A callable must do its own value checking;
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 47ed762b3..e9ec9d553 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -50,7 +50,6 @@ from pandas import (bdate_range, CategoricalIndex, Categorical, IntervalIndex,
                     Index, MultiIndex,
                     Series, DataFrame, Panel, Panel4D)
 
-from pandas.util.decorators import deprecate
 from pandas.util import libtesting
 from pandas.io.common import urlopen
 slow = pytest.mark.slow
@@ -83,6 +82,14 @@ set_testing_mode()
 
 
 class TestCase(unittest.TestCase):
+    """
+    The test case class that we originally used when using the
+    nosetests framework. Under the new pytest framework, we are
+    moving away from this class.
+
+    Do not create new test classes derived from this one. Rather,
+    they should inherit from object directly.
+    """
 
     @classmethod
     def setUpClass(cls):
@@ -92,36 +99,32 @@ class TestCase(unittest.TestCase):
     def tearDownClass(cls):
         pass
 
-    def reset_display_options(self):
-        # reset the display options
-        pd.reset_option('^display.', silent=True)
-
-    def round_trip_pickle(self, obj, path=None):
-        return round_trip_pickle(obj, path=path)
 
-    # https://docs.python.org/3/library/unittest.html#deprecated-aliases
-    def assertEquals(self, *args, **kwargs):
-        return deprecate('assertEquals',
-                         self.assertEqual)(*args, **kwargs)
+def reset_display_options():
+    """
+    Reset the display options for printing and representing objects.
+    """
 
-    def assertNotEquals(self, *args, **kwargs):
-        return deprecate('assertNotEquals',
-                         self.assertNotEqual)(*args, **kwargs)
+    pd.reset_option('^display.', silent=True)
 
-    def assert_(self, *args, **kwargs):
-        return deprecate('assert_',
-                         self.assertTrue)(*args, **kwargs)
 
-    def assertAlmostEquals(self, *args, **kwargs):
-        return deprecate('assertAlmostEquals',
-                         self.assertAlmostEqual)(*args, **kwargs)
+def round_trip_pickle(obj, path=None):
+    """
+    Pickle an object and then read it again.
 
-    def assertNotAlmostEquals(self, *args, **kwargs):
-        return deprecate('assertNotAlmostEquals',
-                         self.assertNotAlmostEqual)(*args, **kwargs)
+    Parameters
+    ----------
+    obj : pandas object
+        The object to pickle and then re-read.
+    path : str, default None
+        The path where the pickled object is written and then read.
 
+    Returns
+    -------
+    round_trip_pickled_object : pandas object
+        The original object that was pickled and then re-read.
+    """
 
-def round_trip_pickle(obj, path=None):
     if path is None:
         path = u('__%s__.pickle' % rands(10))
     with ensure_clean(path) as path:
