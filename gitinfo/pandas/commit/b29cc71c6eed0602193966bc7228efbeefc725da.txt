commit b29cc71c6eed0602193966bc7228efbeefc725da
Author: Chang She <chang@lambdafoundry.com>
Date:   Fri May 25 15:15:08 2012 -0400

    TST: additional test coverage for pytables and parsers

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 0e17ede3e..8ac9d88ce 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -475,10 +475,6 @@ class TextParser(object):
                     self.pos += 1
                     line = f.readline()
 
-                while self._is_commented(line):
-                    self.pos += 1
-                    line = f.readline()
-
                 line = self._check_comments([line])[0]
 
                 self.pos += 1
@@ -551,11 +547,7 @@ class TextParser(object):
                 self.pos += 1
 
             try:
-                while True:
-                    line = self.data[self.pos]
-                    if not self._is_commented(line):
-                        break
-                    self.pos += 1
+                line = self.data[self.pos]
             except IndexError:
                 raise StopIteration
         else:
@@ -563,11 +555,7 @@ class TextParser(object):
                 next(self.data)
                 self.pos += 1
 
-            while True:
-                line = next(self.data)
-                if not self._is_commented(line):
-                    break
-                self.pos += 1
+            line = next(self.data)
 
         line = self._check_comments([line])[0]
         line = self._check_thousands([line])[0]
@@ -577,11 +565,6 @@ class TextParser(object):
 
         return line
 
-    def _is_commented(self, line):
-        if self.comment is None or len(line) == 0:
-            return False
-        return line[0].startswith(self.comment)
-
     def _check_comments(self, lines):
         if self.comment is None:
             return lines
@@ -693,6 +676,7 @@ class TextParser(object):
                     name = cp_cols[c]
                     columns.remove(name)
                     index_name.append(name)
+            self.index_col = index_col
 
         return index_name
 
@@ -754,7 +738,7 @@ class TextParser(object):
                 col = self.columns[col]
             data[col] = lib.map_infer(data[col], f)
 
-        columns = self.columns
+        columns = list(self.columns)
         if self.parse_dates is not None:
             data, columns = self._process_date_conversion(data)
 
@@ -766,7 +750,6 @@ class TextParser(object):
                 self.index_name = self._get_index_name()
                 self._name_processed = True
             data = dict(((k, v) for k, v in df.iteritems()))
-            columns = list(columns)
             index = self._get_index(data, col_order=columns, parse_dates=False)
             data = dict(((k, v.values) for k, v in data.iteritems()))
             df = DataFrame(data=data, columns=columns, index=index)
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index d18caa848..f565cee7a 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -785,7 +785,7 @@ bar,two,12,13,14,15
         expected = read_csv(StringIO(data), index_col=[0, 1])
         assert_frame_equal(df, expected)
 
-        df = read_csv(StringIO(data), header=0, index_col=['index1', 'index2'])
+        df = read_csv(StringIO(data), index_col=['index1', 'index2'])
         assert_frame_equal(df, expected)
 
     def test_multi_index_no_level_names(self):
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index 6cb97e3bc..8576b3d69 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -9,7 +9,7 @@ from datetime import datetime
 import numpy as np
 
 from pandas import (Series, DataFrame, Panel, MultiIndex, bdate_range,
-                    date_range)
+                    date_range, Index)
 from pandas.io.pytables import HDFStore, get_store
 import pandas.util.testing as tm
 from pandas.tests.test_series import assert_series_equal
@@ -202,6 +202,13 @@ class TestHDFStore(unittest.TestCase):
         ts = tm.makeTimeSeries()
         self._check_roundtrip(ts, tm.assert_series_equal)
 
+        ts2 = Series(ts.index, Index(ts.index, dtype=object))
+        self._check_roundtrip(ts2, tm.assert_series_equal)
+
+        ts3 = Series(ts.values, Index(np.asarray(ts.index, dtype=object),
+                                      dtype=object))
+        self._check_roundtrip(ts3, tm.assert_series_equal)
+
     def test_sparse_series(self):
         s = tm.makeStringSeries()
         s[3:5] = np.nan
@@ -222,32 +229,32 @@ class TestHDFStore(unittest.TestCase):
         s.ix[3:5, 1:3] = np.nan
         s.ix[8:10, -2] = np.nan
         ss = s.to_sparse()
-        self._check_roundtrip(ss, tm.assert_frame_equal,
-                              check_frame_type=True)
+        self._check_double_roundtrip(ss, tm.assert_frame_equal,
+                                     check_frame_type=True)
 
         ss2 = s.to_sparse(kind='integer')
-        self._check_roundtrip(ss2, tm.assert_frame_equal,
-                              check_frame_type=True)
+        self._check_double_roundtrip(ss2, tm.assert_frame_equal,
+                                     check_frame_type=True)
 
         ss3 = s.to_sparse(fill_value=0)
-        self._check_roundtrip(ss3, tm.assert_frame_equal,
-                              check_frame_type=True)
+        self._check_double_roundtrip(ss3, tm.assert_frame_equal,
+                                     check_frame_type=True)
 
     def test_sparse_panel(self):
         items = ['x', 'y', 'z']
         p = Panel(dict((i, tm.makeDataFrame()) for i in items))
         sp = p.to_sparse()
 
-        self._check_roundtrip(sp, tm.assert_panel_equal,
-                              check_panel_type=True)
+        self._check_double_roundtrip(sp, tm.assert_panel_equal,
+                                     check_panel_type=True)
 
         sp2 = p.to_sparse(kind='integer')
-        self._check_roundtrip(sp2, tm.assert_panel_equal,
-                              check_panel_type=True)
+        self._check_double_roundtrip(sp2, tm.assert_panel_equal,
+                                     check_panel_type=True)
 
         sp3 = p.to_sparse(fill_value=0)
-        self._check_roundtrip(sp3, tm.assert_panel_equal,
-                              check_panel_type=True)
+        self._check_double_roundtrip(sp3, tm.assert_panel_equal,
+                                     check_panel_type=True)
 
     def test_float_index(self):
         # GH #454
@@ -561,6 +568,24 @@ class TestHDFStore(unittest.TestCase):
             store.close()
             os.remove(self.scratchpath)
 
+    def _check_double_roundtrip(self, obj, comparator, compression=False,
+                                **kwargs):
+        options = {}
+        if compression:
+            options['complib'] = _default_compressor
+
+        store = HDFStore(self.scratchpath, 'w', **options)
+        try:
+            store['obj'] = obj
+            retrieved = store['obj']
+            comparator(retrieved, obj, **kwargs)
+            store['obj'] = retrieved
+            again = store['obj']
+            comparator(again, obj, **kwargs)
+        finally:
+            store.close()
+            os.remove(self.scratchpath)
+
     def _check_roundtrip_table(self, obj, comparator, compression=False):
         options = {}
         if compression:
