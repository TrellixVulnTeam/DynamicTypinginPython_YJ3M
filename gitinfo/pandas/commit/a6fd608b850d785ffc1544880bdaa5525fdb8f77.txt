commit a6fd608b850d785ffc1544880bdaa5525fdb8f77
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jun 5 14:00:34 2012 -0400

    BUG: raise exception in comparisons between tz-naive and tz-aware Timestamp objects, close #1404

diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index 199192de9..dff3551dd 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -341,6 +341,12 @@ cdef class _Timestamp(datetime):
             else:
                 raise TypeError('Cannot compare Timestamp with %s' % str(other))
 
+        if self.tzinfo is None:
+            if other.tzinfo is not None:
+                raise Exception('Cannot compare tz-naive and tz-aware timestamps')
+        elif other.tzinfo is None:
+            raise Exception('Cannot compare tz-naive and tz-aware timestamps')
+
         if op == 2: # ==
             return self.value == ots.value
         elif op == 3: # !=
@@ -464,14 +470,16 @@ cpdef convert_to_tsobject(object ts, object tz=None):
             if ts.tzinfo is not None:
                 ts = tz.normalize(ts)
                 obj.value = _pydatetime_to_dts(ts, &obj.dts)
+                obj.tzinfo = ts.tzinfo
             elif tz is not pytz.utc:
                 ts = tz.localize(ts)
                 obj.value = _pydatetime_to_dts(ts, &obj.dts)
                 obj.value -= _delta_to_nanoseconds(ts.tzinfo._utcoffset)
+                obj.tzinfo = ts.tzinfo
             else:
                 # UTC
                 obj.value = _pydatetime_to_dts(ts, &obj.dts)
-            obj.tzinfo = ts.tzinfo
+                obj.tzinfo = tz
         else:
             obj.value = _pydatetime_to_dts(ts, &obj.dts)
             obj.tzinfo = ts.tzinfo
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index e41728272..e57c1c727 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -1494,22 +1494,28 @@ class TestTimestamp(unittest.TestCase):
         self.assert_(other > val)
         self.assert_(other >= val)
 
+    def test_cant_compare_tz_naive_w_aware(self):
+        # #1404
+        a = Timestamp('3/12/2012')
+        b = Timestamp('3/12/2012', tz='utc')
+
+        self.assertRaises(Exception, a.__eq__, b)
+        self.assertRaises(Exception, a.__ne__, b)
+        self.assertRaises(Exception, a.__lt__, b)
+        self.assertRaises(Exception, a.__gt__, b)
+        self.assertRaises(Exception, b.__eq__, a)
+        self.assertRaises(Exception, b.__ne__, a)
+        self.assertRaises(Exception, b.__lt__, a)
+        self.assertRaises(Exception, b.__gt__, a)
+
+        self.assertRaises(Exception, a.__eq__, b.to_pydatetime())
+        self.assertRaises(Exception, a.to_pydatetime().__eq__, b)
+
     def test_delta_preserve_nanos(self):
         val = Timestamp(1337299200000000123L)
         result = val + timedelta(1)
         self.assert_(result.nanosecond == val.nanosecond)
 
-    def test_create_with_tz(self):
-        stamp = Timestamp('3/11/2012 05:00', tz='US/Eastern')
-        self.assertEquals(stamp.hour, 5)
-
-        rng = date_range('3/11/2012 04:00', periods=10, freq='H', tz='US/Eastern')
-
-        self.assertEquals(stamp, rng[1])
-
-        utc_stamp = Timestamp('3/11/2012 05:00', tz='utc')
-        self.assertEquals(utc_stamp.hour, 5)
-
     def test_tz_convert_localize(self):
         stamp = Timestamp('3/11/2012 04:00')
 
diff --git a/pandas/tseries/tests/test_timezones.py b/pandas/tseries/tests/test_timezones.py
index 2e481f4d8..ba38ef382 100644
--- a/pandas/tseries/tests/test_timezones.py
+++ b/pandas/tseries/tests/test_timezones.py
@@ -100,6 +100,21 @@ class TestTimeZoneSupport(unittest.TestCase):
         self.assertRaises(pytz.AmbiguousTimeError, dti.tz_localize,
                           'US/Eastern')
 
+    def test_create_with_tz(self):
+        stamp = Timestamp('3/11/2012 05:00', tz='US/Eastern')
+        self.assertEquals(stamp.hour, 5)
+
+        rng = date_range('3/11/2012 04:00', periods=10, freq='H', tz='US/Eastern')
+
+        self.assertEquals(stamp, rng[1])
+
+        utc_stamp = Timestamp('3/11/2012 05:00', tz='utc')
+        self.assert_(utc_stamp.tzinfo is pytz.utc)
+        self.assertEquals(utc_stamp.hour, 5)
+
+        stamp = Timestamp('3/11/2012 05:00').tz_localize('utc')
+        self.assertEquals(utc_stamp.hour, 5)
+
     def test_date_range_localize(self):
         rng = date_range('3/11/2012 03:00', periods=15, freq='H', tz='US/Eastern')
         rng2 = DatetimeIndex(['3/11/2012 03:00', '3/11/2012 04:00'],
