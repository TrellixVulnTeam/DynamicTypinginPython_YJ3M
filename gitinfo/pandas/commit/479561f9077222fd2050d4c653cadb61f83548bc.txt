commit 479561f9077222fd2050d4c653cadb61f83548bc
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Jun 6 22:04:31 2012 -0400

    BUG: fix a number of negative ordinal bugs, check for out-of-range quarters

diff --git a/pandas/src/period.c b/pandas/src/period.c
index 5745f02e5..0f51f5c06 100644
--- a/pandas/src/period.c
+++ b/pandas/src/period.c
@@ -20,6 +20,17 @@ static int mod_compat(int x, int m) {
   return result;
 }
 
+static int floordiv(int x, int divisor) {
+    if (x < 0) {
+        if (mod_compat(x, divisor)) {
+            return x / divisor - 1;
+        }
+        else return x / divisor;
+    } else {
+        return x / divisor;
+    }
+}
+
 static asfreq_info NULL_AF_INFO;
 
 /* Table with day offsets for each month (0-based, without and with leap) */
@@ -590,8 +601,8 @@ static npy_int64 asfreq_MtoS(npy_int64 ordinal, char relation, asfreq_info *af_i
 //************ FROM QUARTERLY ***************
 
 static void QtoD_ym(npy_int64 ordinal, int *y, int *m, asfreq_info *af_info) {
-    *y = ordinal / 4 + BASE_YEAR;
-    *m = (ordinal % 4) * 3 + 1;
+    *y = floordiv(ordinal, 4) + BASE_YEAR;
+    *m = mod_compat(ordinal, 4) * 3 + 1;
 
     if (af_info->from_q_year_end != 12) {
         *m += af_info->from_q_year_end;
@@ -612,7 +623,7 @@ static npy_int64 asfreq_QtoD(npy_int64 ordinal, char relation, asfreq_info *af_i
         return absdate - ORD_OFFSET;
     } else {
         QtoD_ym(ordinal+1, &y, &m, af_info);
-		// printf("ordinal: %d, year: %d, month: %d\n", (int) ordinal, y, m);
+		/* printf("ordinal: %d, year: %d, month: %d\n", (int) ordinal, y, m); */
         if ((absdate = absdate_from_ymd(y, m, 1)) == INT_ERR_CODE) return INT_ERR_CODE;
         return absdate - 1 - ORD_OFFSET;
     }
diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index bd54ad550..9be4a28ce 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -1060,8 +1060,8 @@ def _make_field_arrays(*fields):
             if length is not None and len(x) != length:
                 raise ValueError('Mismatched Period array lengths')
 
-    arrays = [x if isinstance(x, np.ndarray) else np.repeat(x, length)
-              for x in fields]
+    arrays = [np.asarray(x) if isinstance(x, (np.ndarray, list))
+              else np.repeat(x, length) for x in fields]
 
     return arrays
 
@@ -1079,6 +1079,9 @@ def _ordinal_from_fields(year, month, quarter, day, hour, minute,
 
 def _quarter_to_myear(year, quarter, freq):
     if quarter is not None:
+        if quarter <= 0 or quarter > 4:
+            raise ValueError('Quarter must be 1 <= q <= 4')
+
         mnum = _month_numbers[_freq_mod._get_rule_month(freq)] + 1
         month = (mnum + (quarter - 1) * 3) % 12 + 1
         if month > mnum:
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index 875058a92..82baf10e9 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -31,6 +31,15 @@ class TestPeriodProperties(TestCase):
     def __init__(self, *args, **kwds):
         TestCase.__init__(self, *args, **kwds)
 
+    def test_quarterly_negative_ordinals(self):
+        p = Period(ordinal=-1, freq='Q-DEC')
+        self.assertEquals(p.year, 1969)
+        self.assertEquals(p.quarter, 4)
+
+        p = Period(ordinal=-2, freq='Q-DEC')
+        self.assertEquals(p.year, 1969)
+        self.assertEquals(p.quarter, 3)
+
     def test_period_cons_quarterly(self):
         # bugs in scikits.timeseries
         for month in MONTHS:
@@ -943,6 +952,19 @@ class TestPeriodIndex(TestCase):
         index = PeriodIndex(year=years, quarter=quarters)
         self.assert_(index.equals(expected))
 
+    def test_constructor_arrays_negative_year(self):
+        years = np.arange(1960, 2000).repeat(4)
+        quarters = np.tile(range(1, 5), 40)
+
+        pindex = PeriodIndex(year=years, quarter=quarters)
+
+        self.assert_(np.array_equal(pindex.year, years))
+        self.assert_(np.array_equal(pindex.quarter, quarters))
+
+    def test_constructor_invalid_quarters(self):
+        self.assertRaises(ValueError, PeriodIndex, year=range(2000, 2004),
+                          quarter=range(4), freq='Q-DEC')
+
     def test_to_timestamp(self):
         index = PeriodIndex(freq='A', start='1/1/2001', end='12/1/2009')
         series = Series(1, index=index, name='foo')
@@ -978,7 +1000,7 @@ class TestPeriodIndex(TestCase):
 
     def test_to_timestamp_quarterly_bug(self):
         years = np.arange(1960, 2000).repeat(4)
-        quarters = np.tile(range(4), 40)
+        quarters = np.tile(range(1, 5), 40)
 
         pindex = PeriodIndex(year=years, quarter=quarters)
 
