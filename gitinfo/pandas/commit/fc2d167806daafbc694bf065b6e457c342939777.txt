commit fc2d167806daafbc694bf065b6e457c342939777
Author: acorbe <corbisoft.codes@gmail.com>
Date:   Sun Dec 8 14:34:34 2013 +0100

    BUG: scatter_plot ranges are unaligned among subframes GH5497

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 6e764e39b..94652eb48 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -126,6 +126,8 @@ Bug Fixes
     of pandas in QTConsole, now fixed. If you're using an older version and
     need to supress the warnings, see (:issue:`5922`).
   - Bug in merging ``timedelta`` dtypes (:issue:`5695`)
+  - Bug in plotting.scatter_matrix function. Wrong alignment among diagonal 
+    and off-diagonal plots, see (:issue:`5497`).
 
 pandas 0.13.0
 -------------
diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index c3a19bb57..1fee31805 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -755,6 +755,7 @@ class TestDataFramePlots(tm.TestCase):
         _check_plot_works(scat, diagonal='kde')
         _check_plot_works(scat, diagonal='density')
         _check_plot_works(scat, diagonal='hist')
+        _check_plot_works(scat, range_padding=.1)
 
         def scat2(x, y, by=None, ax=None, figsize=None):
             return plt.scatter_plot(df, x, y, by, ax, figsize=None)
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index aa5a5a017..9984c3fd7 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -202,25 +202,34 @@ plot_params = _Options()
 
 def scatter_matrix(frame, alpha=0.5, figsize=None, ax=None, grid=False,
                    diagonal='hist', marker='.', density_kwds=None,
-                   hist_kwds=None, **kwds):
+                   hist_kwds=None, range_padding=0.05, **kwds):
     """
     Draw a matrix of scatter plots.
 
     Parameters
     ----------
     frame : DataFrame
-    alpha : amount of transparency applied
-    figsize : a tuple (width, height) in inches
-    ax : Matplotlib axis object
-    grid : setting this to True will show the grid
-    diagonal : pick between 'kde' and 'hist' for
+    alpha : float, optional
+        amount of transparency applied
+    figsize : (float,float), optional
+        a tuple (width, height) in inches
+    ax : Matplotlib axis object, optional
+    grid : bool, optional
+        setting this to True will show the grid
+    diagonal : {'hist', 'kde'}
+        pick between 'kde' and 'hist' for
         either Kernel Density Estimation or Histogram
         plot in the diagonal
-    marker : Matplotlib marker type, default '.'
+    marker : str, optional
+        Matplotlib marker type, default '.'    
     hist_kwds : other plotting keyword arguments
         To be passed to hist function
     density_kwds : other plotting keyword arguments
         To be passed to kernel density estimate plot
+    range_padding : float, optional
+        relative extension of axis range in x and y
+        with respect to (x_max - x_min) or (y_max - y_min),
+        default 0.05
     kwds : other plotting keyword arguments
         To be passed to scatter function
 
@@ -250,6 +259,13 @@ def scatter_matrix(frame, alpha=0.5, figsize=None, ax=None, grid=False,
     # workaround because `c='b'` is hardcoded in matplotlibs scatter method
     kwds.setdefault('c', plt.rcParams['patch.facecolor'])
 
+    boundaries_list = []
+    for a in df.columns:
+        values = df[a].values[mask[a].values]
+        rmin_, rmax_ = np.min(values), np.max(values)
+        rdelta_ext = (rmax_ - rmin_) * range_padding / 2.
+        boundaries_list.append((rmin_ - rdelta_ext, rmax_+ rdelta_ext))
+
     for i, a in zip(lrange(n), df.columns):
         for j, b in zip(lrange(n), df.columns):
             ax = axes[i, j]
@@ -260,18 +276,25 @@ def scatter_matrix(frame, alpha=0.5, figsize=None, ax=None, grid=False,
                 # Deal with the diagonal by drawing a histogram there.
                 if diagonal == 'hist':
                     ax.hist(values, **hist_kwds)
+
                 elif diagonal in ('kde', 'density'):
                     from scipy.stats import gaussian_kde
                     y = values
                     gkde = gaussian_kde(y)
                     ind = np.linspace(y.min(), y.max(), 1000)
                     ax.plot(ind, gkde.evaluate(ind), **density_kwds)
+
+                ax.set_xlim(boundaries_list[i])
+
             else:
                 common = (mask[a] & mask[b]).values
 
                 ax.scatter(df[b][common], df[a][common],
                            marker=marker, alpha=alpha, **kwds)
 
+                ax.set_xlim(boundaries_list[j])
+                ax.set_ylim(boundaries_list[i])
+
             ax.set_xlabel('')
             ax.set_ylabel('')
 
