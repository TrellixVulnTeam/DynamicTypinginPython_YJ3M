commit 220895a0a387274a610aa86f2e1ff9763eee5edb
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Jun 11 21:59:07 2010 +0000

    renamed cap methods to clip
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@195 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index ab079f48e..14b454cd1 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1494,25 +1494,40 @@ class DataFrame(Picklable, Groupable):
         else:
             raise Exception('Must have 0<= axis <= 1')
 
-    def cap(self, threshold):
+    def clip(self, upper=None, lower=None):
         """
-        Trim values at threshold
+        Trim values at input threshold(s)
+
+        Parameters
+        ----------
+        lower : float, default None
+        upper : float, default None
 
         Returns
         -------
-        DataFrame
+        y : DataFrame
         """
-        return self.apply(lambda x: x.cap(threshold))
+        return self.apply(lambda x: x.clip(lower=lower, upper=upper))
 
-    def floor(self, threshold):
+    def clip_upper(self, threshold):
+        """
+        Trim values above threshold
+
+        Returns
+        -------
+        y : DataFrame
+        """
+        return self.apply(lambda x: x.clip_upper(threshold))
+
+    def clip_lower(self, threshold):
         """
         Trim values below threshold
 
         Returns
         -------
-        DataFrame
+        y : DataFrame
         """
-        return self.apply(lambda x: x.floor(threshold))
+        return self.apply(lambda x: x.clip_lower(threshold))
 
     # ndarray-like stats methods
     def count(self, axis=0):
@@ -1681,7 +1696,10 @@ class DataFrame(Picklable, Groupable):
         summed = self.sum(axis)
         count = self.count(axis).astype(float)
 
-        return summed / count.reindex(summed.index)
+        if not count.index.equals(summed.index):
+            count= count.reindex(summed.index)
+
+        return summed / count
 
     def median(self, axis=0):
         """
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index af79335a1..17948b615 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -121,8 +121,10 @@ class DataMatrix(DataFrame):
         valueDict = {}
         for k, v in data.iteritems():
             if isinstance(v, Series):
-                # Forces alignment, copies data
-                v = v.reindex(index)
+                if v.index is not index:
+                    # Forces alignment. No need to copy data since we
+                    # are putting it into an ndarray later
+                    v = v.reindex(index)
             else:
                 if isinstance(v, dict):
                     v = [v.get(i, NaN) for i in index]
@@ -401,12 +403,22 @@ class DataMatrix(DataFrame):
             # Operate row-wise
             if self.index.equals(other.index):
                 newIndex = self.index
+                other_vals = other.values
+                values = self.values
             else:
                 newIndex = self.index + other.index
 
-            other = other.reindex(newIndex).view(np.ndarray)
-            myReindex = self.reindex(newIndex)
-            resultMatrix = func(myReindex.values.T, other).T
+                if other.index.equals(newIndex):
+                    other_vals = other.values
+                else:
+                    other_vals = other.reindex(newIndex).values
+
+                if self.index.equals(newIndex):
+                    values = self.values
+                else:
+                    values = self.reindex(newIndex).values
+
+            resultMatrix = func(values.T, other_vals).T
         else:
             if len(other) == 0:
                 return self * NaN
@@ -613,8 +625,11 @@ class DataMatrix(DataFrame):
         """
         if hasattr(value, '__iter__'):
             if isinstance(value, Series):
-                value = np.asarray(value.reindex(self.index))
-
+                if value.index.equals(self.index):
+                    # no need to copy
+                    value = value.values
+                else:
+                    value = value.reindex(self.index).values
             else:
                 assert(len(value) == len(self.index))
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index d998a2c27..a432b6a6f 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -519,11 +519,32 @@ class Series(np.ndarray, Picklable, Groupable):
         """
         return self.corr(self.shift(1))
 
-    def cap(self, threshold):
+    def clip(self, upper=None, lower=None):
+        """
+        Trim values at input threshold(s)
+
+        Parameters
+        ----------
+        lower : float, default None
+        upper : float, default None
+
+        Returns
+        -------
+        y : Series
+        """
+        result = self
+        if lower is not None:
+            result = result.caplower(lower)
+        if upper is not None:
+            result = result.capupper(upper)
+
+        return result
+
+    def clip_upper(self, threshold):
         """Return copy of series with values above given value truncated"""
         return np.where(self > threshold, threshold, self)
 
-    def floor(self, threshold):
+    def clip_lower(self, threshold):
         """Return copy of series with values below given value truncated"""
         return np.where(self < threshold, threshold, self)
 
@@ -755,7 +776,7 @@ class Series(np.ndarray, Picklable, Groupable):
         -------
         TimeSeries
         """
-        if self.index is newIndex:
+        if self.index.equals(newIndex):
             return self.copy()
 
         if not isinstance(newIndex, Index):
@@ -940,9 +961,7 @@ class Series(np.ndarray, Picklable, Groupable):
 
             return Series(newValues, index=self.index)
         else:
-            offset = periods * offset
-            newIndex = Index([idx + offset for idx in self.index])
-
+            newIndex = self.index.shift(periods, offset)
             return Series(self, index=newIndex)
 
     def truncate(self, before=None, after=None):
