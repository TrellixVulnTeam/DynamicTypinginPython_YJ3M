commit 6eeff1a7c8256d37edc74ff0542fd305b6c6afcb
Author: Phillip Cloud <cpcloud@gmail.com>
Date:   Sat Jun 15 06:05:23 2013 -0400

    DOC: add release notes/whatsnew

diff --git a/RELEASE.rst b/RELEASE.rst
index 9d862c687..f03e10df1 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -77,8 +77,10 @@ pandas 0.11.1
     dependencies offered for Linux) (GH3837_).
   - Plotting functions now raise a ``TypeError`` before trying to plot anything
     if the associated objects have have a dtype of ``object`` (GH1818_,
-    GH3572_). This happens before any drawing takes place which elimnates any
-    spurious plots from showing up.
+    GH3572_, GH3911_, GH3912_), but they will try to convert object arrays to
+    numeric arrays if possible so that you can still plot, for example, an
+    object array with floats. This happens before any drawing takes place which
+    elimnates any spurious plots from showing up.
   - Added Faq section on repr display options, to help users customize their setup.
   - ``where`` operations that result in block splitting are much faster (GH3733_)
   - Series and DataFrame hist methods now take a ``figsize`` argument (GH3834_)
@@ -341,13 +343,13 @@ pandas 0.11.1
 .. _GH3834: https://github.com/pydata/pandas/issues/3834
 .. _GH3873: https://github.com/pydata/pandas/issues/3873
 .. _GH3877: https://github.com/pydata/pandas/issues/3877
+.. _GH3659: https://github.com/pydata/pandas/issues/3659
+.. _GH3679: https://github.com/pydata/pandas/issues/3679
 .. _GH3880: https://github.com/pydata/pandas/issues/3880
-<<<<<<< HEAD
 .. _GH3911: https://github.com/pydata/pandas/issues/3911
-=======
 .. _GH3907: https://github.com/pydata/pandas/issues/3907
->>>>>>> 7b5933247b80174de4ba571e95a1add809dd9d09
-
+.. _GH3911: https://github.com/pydata/pandas/issues/3911
+.. _GH3912: https://github.com/pydata/pandas/issues/3912
 
 pandas 0.11.0
 =============
diff --git a/doc/source/v0.11.1.txt b/doc/source/v0.11.1.txt
index dd87c5ea8..76ae85a53 100644
--- a/doc/source/v0.11.1.txt
+++ b/doc/source/v0.11.1.txt
@@ -300,9 +300,11 @@ Bug Fixes
 ~~~~~~~~~
 
   - Plotting functions now raise a ``TypeError`` before trying to plot anything
-    if the associated objects have have a ``dtype`` of ``object`` (GH1818_,
-    GH3572_).  This happens before any drawing takes place which elimnates any
-    spurious plots from showing up.
+    if the associated objects have have a dtype of ``object`` (GH1818_,
+    GH3572_, GH3911_, GH3912_), but they will try to convert object arrays to
+    numeric arrays if possible so that you can still plot, for example, an
+    object array with floats. This happens before any drawing takes place which
+    elimnates any spurious plots from showing up.
 
   - ``fillna`` methods now raise a ``TypeError`` if the ``value`` parameter is
     a list or tuple.
@@ -416,3 +418,5 @@ on GitHub for a complete list.
 .. _GH3659: https://github.com/pydata/pandas/issues/3659
 .. _GH3679: https://github.com/pydata/pandas/issues/3679
 .. _GH3907: https://github.com/pydata/pandas/issues/3907
+.. _GH3911: https://github.com/pydata/pandas/issues/3911
+.. _GH3912: https://github.com/pydata/pandas/issues/3912
diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index 56b3c3371..4851ea975 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -10,6 +10,7 @@ import pandas.util.testing as tm
 from pandas.util.testing import ensure_clean
 from pandas.core.config import set_option
 
+
 import numpy as np
 
 from numpy.testing import assert_array_equal
@@ -198,11 +199,13 @@ class TestSeriesPlots(unittest.TestCase):
 
     @slow
     def test_valid_object_plot(self):
+        from pandas.io.pytables import PerformanceWarning
         s = Series(range(10), dtype=object)
         kinds = 'line', 'bar', 'barh', 'kde', 'density'
 
         for kind in kinds:
-            _check_plot_works(s.plot, kind=kind)
+            tm.assert_warns(PerformanceWarning, _check_plot_works, s.plot,
+                            kind=kind)
 
     def test_partially_invalid_plot_data(self):
         s = Series(['a', 'b', 1.0, 2])
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 3c7bd7fb5..51bad322f 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -877,16 +877,25 @@ class MPLPlot(object):
         return (len(self.data.columns), 1)
 
     def _compute_plot_data(self):
+        from pandas.io.pytables import PerformanceWarning
         try:
             # might be a frame
             numeric_data = self.data._get_numeric_data()
         except AttributeError:
-            # attempt soft conversion
-            numeric_data = self.data.convert_objects()
+            numeric_data = self.data
+            orig_dtype = numeric_data.dtype
 
-            # a series, but no object dtypes allowed!
-            if numeric_data.dtype == np.object_:
-                raise TypeError('invalid dtype for plotting')
+            if orig_dtype == np.object_:
+                # attempt soft conversion, but raise a perf warning
+                numeric_data = numeric_data.convert_objects()
+                num_data_dtype = numeric_data.dtype
+
+                if num_data_dtype == np.object_:
+                    raise TypeError('No numeric data to plot')
+                else:
+                    warnings.warn('Coerced object dtype to numeric dtype, '
+                                  'you should avoid object dtyped Series if '
+                                  'possible', PerformanceWarning)
 
         try:
             is_empty = numeric_data.empty
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index dd86862a2..66fc7d66f 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -7,6 +7,7 @@ import random
 import string
 import sys
 import tempfile
+import warnings
 
 from contextlib import contextmanager  # contextlib is available since 2.5
 
@@ -746,3 +747,15 @@ def stdin_encoding(encoding=None):
     sys.stdin = SimpleMock(sys.stdin, "encoding", encoding)
     yield
     sys.stdin = _stdin
+
+
+def assert_warns(warning, f, *args, **kwargs):
+    """
+    From: http://stackoverflow.com/questions/3892218/how-to-test-with-pythons-unittest-that-a-warning-has-been-thrown
+    """
+    with warnings.catch_warnings(record=True) as warning_list:
+        warnings.simplefilter('always')
+        f(*args, **kwargs)
+        msg = '{0!r} not raised'.format(warning)
+        assert any(issubclass(item.category, warning)
+                   for item in warning_list), msg
