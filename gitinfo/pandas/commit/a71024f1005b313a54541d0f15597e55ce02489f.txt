commit a71024f1005b313a54541d0f15597e55ce02489f
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jan 3 20:24:30 2011 -0500

    maintain sortedness of columns on insertion again (when possible)

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index adada71b3..03b5e1d97 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -235,11 +235,24 @@ class DataFrame(Picklable, Groupable):
 
         self._columns = cols
 
-    def _insert_column_index(self, key):
-        if len(self.columns) == 0:
-            self.columns = Index([key])
+    def _insert_column_index(self, key, loc):
+        if loc == len(self.columns):
+            columns = Index(np.concatenate((self.columns, [key])))
+        elif loc == 0:
+            columns = Index(np.concatenate(([key], self.columns)))
         else:
-            self.columns = Index(np.concatenate((self.columns, [key])))
+            columns = Index(np.concatenate((self.columns[:loc], [key],
+                                            self.columns[loc:])))
+
+        self.columns = columns
+
+    def _get_insert_loc(self, key):
+        try:
+            loc = self.columns.searchsorted(key)
+        except TypeError:
+            loc = len(self.columns)
+
+        return loc
 
     def _delete_column_index(self, loc):
         if loc == len(self.columns) - 1:
@@ -413,7 +426,8 @@ class DataFrame(Picklable, Groupable):
             self._series[key] = Series.fromValue(value, index=self.index)
 
         if key not in self.columns:
-            self._insert_column_index(key)
+            loc = self._get_insert_loc(key)
+            self._insert_column_index(key, loc)
 
     def __delitem__(self, key):
         """
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index 4d3ce993e..ded8f30e8 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -610,24 +610,33 @@ class DataMatrix(DataFrame):
         elif key in self.columns:
             self.values[:, self.columns.indexMap[key]] = value
         else:
-            if len(self.columns) == 0:
-                self.values = value.reshape((len(value), 1)).astype(np.float)
-            else:
-                self.values = np.c_[self.values, value]
-
-            self._insert_column_index(key)
+            loc = self._get_insert_loc(key)
+            self._insert_column( value.astype(float), loc)
+            self._insert_column_index(key, loc)
 
     def _insert_object_dtype(self, key, value):
         if key in self.columns:
             loc = self.columns.indexMap[key]
             self.values[:, loc] = value
         else:
-            if len(self.columns) == 0:
-                self.values = value.reshape((len(value), 1)).copy()
-            else:
-                self.values = np.c_[self.values, value]
+            loc = self._get_insert_loc(key)
+            self._insert_column(value, loc)
+            self._insert_column_index(key, loc)
 
-            self._insert_column_index(key)
+    def _insert_column(self, column, loc):
+        mat = self.values
+
+        if column.ndim == 1:
+            column = column.reshape((len(column), 1))
+
+        if loc == mat.shape[1]:
+            values = np.hstack((mat, column))
+        elif loc == 0:
+            values = np.hstack((column, mat))
+        else:
+            values = np.hstack((mat[:, :loc], column, mat[:, loc:]))
+
+        self.values = values
 
     def __delitem__(self, key):
         """
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index 6933a060c..ea79aa68e 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -394,6 +394,9 @@ class TestDataFrame(unittest.TestCase):
         self.frame['col7'] = 5
         assert((self.frame['col7'] == 5).all())
 
+        self.frame['col0'] = 3.14
+        assert((self.frame['col0'] == 3.14).all())
+
         self.frame['col8'] = 'foo'
         assert((self.frame['col8'] == 'foo').all())
 
@@ -589,7 +592,17 @@ class TestDataFrame(unittest.TestCase):
         self.assert_(self.tsframe.rows() is self.tsframe.index)
 
     def test_cols(self):
-        self.assert_(self.tsframe.cols() is self.tsframe.columns)
+        cols = self.tsframe.cols()
+        self.assert_(isinstance(cols, list))
+        self.assert_(np.array_equal(self.tsframe.columns, cols))
+
+        mcols = self.mixed_frame.cols()
+
+        if hasattr(self.mixed_frame, 'objects'):
+            self.assert_(not np.array_equal(self.mixed_frame.columns,
+                                            mcols))
+        else:
+            self.assert_(np.array_equal(self.mixed_frame.columns, mcols))
 
     def test_columns(self):
         pass
