commit 8449ffd90eb07abaa76b5c17e2a7fa753dd881f8
Author: Chris Burr <chrisburr@users.noreply.github.com>
Date:   Mon Oct 30 13:53:39 2017 +0100

    BUG: read_msgpack raise an error when passed an non existent path in Python 2 (#16523)
    
    * TST: Add tests for trying to read non-existent files #15296
    
    * BUG: Fix passing non-existant file to read_msgpack #15296
    
    * TST: Fix io.test_common.test_read_non_existant for external modules
    
    * CLN: Import FileNotFoundError in tests/io/test_common.py

diff --git a/doc/source/whatsnew/v0.22.0.txt b/doc/source/whatsnew/v0.22.0.txt
index a51ffe7b3..87ac2c9a1 100644
--- a/doc/source/whatsnew/v0.22.0.txt
+++ b/doc/source/whatsnew/v0.22.0.txt
@@ -87,6 +87,8 @@ Documentation Changes
 Bug Fixes
 ~~~~~~~~~
 
+- Bug in ``pd.read_msgpack()`` with a non existent file is passed in Python 2 (:issue:`15296`)
+
 Conversion
 ^^^^^^^^^^
 
diff --git a/pandas/io/packers.py b/pandas/io/packers.py
index abd258034..ef65a3275 100644
--- a/pandas/io/packers.py
+++ b/pandas/io/packers.py
@@ -192,7 +192,6 @@ def read_msgpack(path_or_buf, encoding='utf-8', iterator=False, **kwargs):
 
     # see if we have an actual file
     if isinstance(path_or_buf, compat.string_types):
-
         try:
             exists = os.path.exists(path_or_buf)
         except (TypeError, ValueError):
@@ -202,18 +201,21 @@ def read_msgpack(path_or_buf, encoding='utf-8', iterator=False, **kwargs):
             with open(path_or_buf, 'rb') as fh:
                 return read(fh)
 
-    # treat as a binary-like
     if isinstance(path_or_buf, compat.binary_type):
+        # treat as a binary-like
         fh = None
         try:
-            fh = compat.BytesIO(path_or_buf)
-            return read(fh)
+            # We can't distinguish between a path and a buffer of bytes in
+            # Python 2 so instead assume the first byte of a valid path is
+            # less than 0x80.
+            if compat.PY3 or ord(path_or_buf[0]) >= 0x80:
+                fh = compat.BytesIO(path_or_buf)
+                return read(fh)
         finally:
             if fh is not None:
                 fh.close()
-
-    # a buffer like
-    if hasattr(path_or_buf, 'read') and compat.callable(path_or_buf.read):
+    elif hasattr(path_or_buf, 'read') and compat.callable(path_or_buf.read):
+        # treat as a buffer like
         return read(path_or_buf)
 
     raise ValueError('path_or_buf needs to be a string file path or file-like')
diff --git a/pandas/tests/io/test_common.py b/pandas/tests/io/test_common.py
index 30904593f..707580bfe 100644
--- a/pandas/tests/io/test_common.py
+++ b/pandas/tests/io/test_common.py
@@ -10,7 +10,7 @@ import pandas as pd
 import pandas.util.testing as tm
 
 from pandas.io import common
-from pandas.compat import is_platform_windows, StringIO
+from pandas.compat import is_platform_windows, StringIO, FileNotFoundError
 
 from pandas import read_csv, concat
 
@@ -125,6 +125,26 @@ bar2,12,13,14,15
         tm.assert_frame_equal(first, expected.iloc[[0]])
         tm.assert_frame_equal(concat(it), expected.iloc[1:])
 
+    @pytest.mark.parametrize('reader, module, error_class, fn_ext', [
+        (pd.read_csv, 'os', FileNotFoundError, 'csv'),
+        (pd.read_table, 'os', FileNotFoundError, 'csv'),
+        (pd.read_fwf, 'os', FileNotFoundError, 'txt'),
+        (pd.read_excel, 'xlrd', FileNotFoundError, 'xlsx'),
+        (pd.read_feather, 'feather', Exception, 'feather'),
+        (pd.read_hdf, 'tables', FileNotFoundError, 'h5'),
+        (pd.read_stata, 'os', FileNotFoundError, 'dta'),
+        (pd.read_sas, 'os', FileNotFoundError, 'sas7bdat'),
+        (pd.read_json, 'os', ValueError, 'json'),
+        (pd.read_msgpack, 'os', ValueError, 'mp'),
+        (pd.read_pickle, 'os', FileNotFoundError, 'pickle'),
+    ])
+    def test_read_non_existant(self, reader, module, error_class, fn_ext):
+        pytest.importorskip(module)
+
+        path = os.path.join(HERE, 'data', 'does_not_exist.' + fn_ext)
+        with pytest.raises(error_class):
+            reader(path)
+
     @pytest.mark.parametrize('reader, module, path', [
         (pd.read_csv, 'os', os.path.join(HERE, 'data', 'iris.csv')),
         (pd.read_table, 'os', os.path.join(HERE, 'data', 'iris.csv')),
