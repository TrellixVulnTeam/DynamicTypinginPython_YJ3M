commit 84bc3b2498d89ffd84977c6a5337fb9bb63be176
Author: Dr-Irv <irv@princeton.com>
Date:   Tue Jan 24 13:44:35 2017 -0500

    BUG: GH14233 resample().median() failed if duplicate column names werâ€¦
    
    Simple fix for  median issue.  Should use cython implementation.
    
    closes #14233
    
    Author: Dr-Irv <irv@princeton.com>
    
    Closes #15202 from Dr-Irv/Issue14233 and squashes the following commits:
    
    6e0d900 [Dr-Irv] Use randn in test
    1a3b4aa [Dr-Irv] BUG: GH14233 resample().median() failed if duplicate column names were present

diff --git a/doc/source/whatsnew/v0.20.0.txt b/doc/source/whatsnew/v0.20.0.txt
index 49e0f4cb0..6aaed803c 100644
--- a/doc/source/whatsnew/v0.20.0.txt
+++ b/doc/source/whatsnew/v0.20.0.txt
@@ -433,6 +433,7 @@ Bug Fixes
 
 - Bug in ``.to_json()`` where ``lines=True`` and contents (keys or values) contain escaped characters (:issue:`15096`)
 - Bug in ``.rolling/expanding()`` functions where ``count()`` was not counting ``np.Inf``, nor handling ``object`` dtypes (:issue:`12541`)
+- Bug in ``DataFrame.resample().median()`` if duplicate column names are present (:issue:`14233`)
 
 - Bug in ``DataFrame.groupby().describe()`` when grouping on ``Index`` containing tuples (:issue:`14848`)
 - Bug in creating a ``MultiIndex`` with tuples and not passing a list of names; this will now raise ``ValueError`` (:issue:`15110`)
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 84858ef5c..e4edbcacd 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -2205,7 +2205,6 @@ class BinGrouper(BaseGrouper):
     # cython aggregation
 
     _cython_functions = copy.deepcopy(BaseGrouper._cython_functions)
-    _cython_functions['aggregate'].pop('median')
 
 
 class Grouping(object):
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index fbf0e0095..569535412 100755
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -2931,6 +2931,20 @@ class TestResamplerGrouper(tm.TestCase):
         self.assertEqual(result.index.nlevels, 2)
         tm.assert_index_equal(result.index.levels[0], expected)
 
+    def test_median_duplicate_columns(self):
+        # GH 14233
+
+        df = pd.DataFrame(np.random.randn(20, 3),
+                          columns=list('aaa'),
+                          index=pd.date_range('2012-01-01',
+                                              periods=20, freq='s'))
+        df2 = df.copy()
+        df2.columns = ['a', 'b', 'c']
+        expected = df2.resample('5s').median()
+        result = df.resample('5s').median()
+        expected.columns = result.columns
+        assert_frame_equal(result, expected)
+
 
 class TestTimeGrouper(tm.TestCase):
     def setUp(self):
