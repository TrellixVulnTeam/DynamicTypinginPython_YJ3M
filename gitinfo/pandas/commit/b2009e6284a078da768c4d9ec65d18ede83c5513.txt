commit b2009e6284a078da768c4d9ec65d18ede83c5513
Author: Gábor Lipták <gliptak@gmail.com>
Date:   Sat May 7 10:35:17 2016 -0400

    COMPAT: Convert to native datatypes for Series.tolist()
    
    closes #10904
    
    Author: Gábor Lipták <gliptak@gmail.com>
    
    Closes #13050 from gliptak/npcompat1 and squashes the following commits:
    
    4da83ac [Gábor Lipták] Convert to native datatypes for Series.tolist()

diff --git a/doc/source/whatsnew/v0.18.2.txt b/doc/source/whatsnew/v0.18.2.txt
index a5734dc1d..d5631d3cd 100644
--- a/doc/source/whatsnew/v0.18.2.txt
+++ b/doc/source/whatsnew/v0.18.2.txt
@@ -41,6 +41,32 @@ API changes
 - Non-convertible dates in an excel date column will be returned without conversion and the column will be ``object`` dtype, rather than raising an exception  (:issue:`10001`)
 
 
+.. _whatsnew_0182.api.tolist:
+
+``Series.tolist()`` will now return Python types
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+``Series.tolist()`` will now return Python types in the output, mimicking NumPy ``.tolist()`` behaviour (:issue:`10904`)
+
+
+.. ipython:: python
+
+   s = pd.Series([1,2,3])
+   type(s.tolist()[0])
+
+Previous Behavior:
+
+.. code-block:: ipython
+
+   In [7]: type(s.tolist()[0])
+   Out[7]:
+    <class 'numpy.int64'>
+
+New Behavior:
+
+.. ipython:: python
+
+   type(s.tolist()[0])
 
 
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index d5571e61a..58e983ad9 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1085,7 +1085,7 @@ class Series(base.IndexOpsMixin, strings.StringAccessorMixin,
 
     def tolist(self):
         """ Convert Series to a nested list """
-        return list(self)
+        return list(self.asobject)
 
     def to_dict(self):
         """
diff --git a/pandas/tests/series/test_io.py b/pandas/tests/series/test_io.py
index 2cdd6b22a..4ce80b42a 100644
--- a/pandas/tests/series/test_io.py
+++ b/pandas/tests/series/test_io.py
@@ -8,7 +8,7 @@ import pandas as pd
 
 from pandas import Series, DataFrame
 
-from pandas.compat import StringIO, u
+from pandas.compat import StringIO, u, long
 from pandas.util.testing import (assert_series_equal, assert_almost_equal,
                                  assert_frame_equal, ensure_clean)
 import pandas.util.testing as tm
@@ -16,7 +16,7 @@ import pandas.util.testing as tm
 from .common import TestData
 
 
-class TestSeriesIO(TestData, tm.TestCase):
+class TestSeriesToCSV(TestData, tm.TestCase):
 
     _multiprocess_can_split_ = True
 
@@ -82,35 +82,6 @@ class TestSeriesIO(TestData, tm.TestCase):
 
         assert_series_equal(s, s2)
 
-    def test_tolist(self):
-        rs = self.ts.tolist()
-        xp = self.ts.values.tolist()
-        assert_almost_equal(rs, xp)
-
-        # datetime64
-        s = Series(self.ts.index)
-        rs = s.tolist()
-        self.assertEqual(self.ts.index[0], rs[0])
-
-    def test_to_frame(self):
-        self.ts.name = None
-        rs = self.ts.to_frame()
-        xp = pd.DataFrame(self.ts.values, index=self.ts.index)
-        assert_frame_equal(rs, xp)
-
-        self.ts.name = 'testname'
-        rs = self.ts.to_frame()
-        xp = pd.DataFrame(dict(testname=self.ts.values), index=self.ts.index)
-        assert_frame_equal(rs, xp)
-
-        rs = self.ts.to_frame(name='testdifferent')
-        xp = pd.DataFrame(
-            dict(testdifferent=self.ts.values), index=self.ts.index)
-        assert_frame_equal(rs, xp)
-
-    def test_to_dict(self):
-        self.assert_numpy_array_equal(Series(self.ts.to_dict()), self.ts)
-
     def test_to_csv_float_format(self):
 
         with ensure_clean() as filename:
@@ -137,6 +108,29 @@ class TestSeriesIO(TestData, tm.TestCase):
         csv_str = s.to_csv(path=None)
         self.assertIsInstance(csv_str, str)
 
+class TestSeriesIO(TestData, tm.TestCase):
+
+    _multiprocess_can_split_ = True
+
+    def test_to_frame(self):
+        self.ts.name = None
+        rs = self.ts.to_frame()
+        xp = pd.DataFrame(self.ts.values, index=self.ts.index)
+        assert_frame_equal(rs, xp)
+
+        self.ts.name = 'testname'
+        rs = self.ts.to_frame()
+        xp = pd.DataFrame(dict(testname=self.ts.values), index=self.ts.index)
+        assert_frame_equal(rs, xp)
+
+        rs = self.ts.to_frame(name='testdifferent')
+        xp = pd.DataFrame(
+            dict(testdifferent=self.ts.values), index=self.ts.index)
+        assert_frame_equal(rs, xp)
+
+    def test_to_dict(self):
+        self.assert_numpy_array_equal(Series(self.ts.to_dict()), self.ts)
+
     def test_timeseries_periodindex(self):
         # GH2891
         from pandas import period_range
@@ -174,3 +168,39 @@ class TestSeriesIO(TestData, tm.TestCase):
         self.assertTrue(isinstance(result, SubclassedFrame))
         expected = SubclassedFrame({'X': [1, 2, 3]})
         assert_frame_equal(result, expected)
+
+
+class TestSeriesToList(TestData, tm.TestCase):
+
+    _multiprocess_can_split_ = True
+
+    def test_tolist(self):
+        rs = self.ts.tolist()
+        xp = self.ts.values.tolist()
+        assert_almost_equal(rs, xp)
+
+        # datetime64
+        s = Series(self.ts.index)
+        rs = s.tolist()
+        self.assertEqual(self.ts.index[0], rs[0])
+
+    def test_tolist_np_int(self):
+        # GH10904
+        for t in ['int8', 'int16', 'int32', 'int64']:
+            s = pd.Series([1], dtype=t)
+            self.assertIsInstance(s.tolist()[0], int)
+
+    def test_tolist_np_uint(self):
+        # GH10904
+        for t in ['uint8', 'uint16']:
+            s = pd.Series([1], dtype=t)
+            self.assertIsInstance(s.tolist()[0], int)
+        for t in ['uint32', 'uint64']:
+            s = pd.Series([1], dtype=t)
+            self.assertIsInstance(s.tolist()[0], long)
+
+    def test_tolist_np_float(self):
+        # GH10904
+        for t in ['float16', 'float32', 'float64']:
+            s = pd.Series([1], dtype=t)
+            self.assertIsInstance(s.tolist()[0], float)
