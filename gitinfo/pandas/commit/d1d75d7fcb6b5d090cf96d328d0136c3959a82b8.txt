commit d1d75d7fcb6b5d090cf96d328d0136c3959a82b8
Author: Jeff Reback <jeff@reback.net>
Date:   Tue Oct 25 18:18:53 2016 -0400

    Revert "BUG: downcast='unsigned' on 0 would would not downcast to unsigned."
    
    This reverts commit 6ff53c2b47b026f605e415d3cd5f3b0dda7e0774.

diff --git a/doc/source/whatsnew/v0.19.1.txt b/doc/source/whatsnew/v0.19.1.txt
index 3256e017b..8f5f78a5e 100644
--- a/doc/source/whatsnew/v0.19.1.txt
+++ b/doc/source/whatsnew/v0.19.1.txt
@@ -61,7 +61,6 @@ Bug Fixes
 
 - Bug in ``Timestamp`` where dates very near the minimum (1677-09) could underflow on creation (:issue:`14415`)
 
-- Bug in ``pd.to_numeric`` where 0 was not included when ``downcast='unsigned'`` is passed (:issue:`14401`)
 - Bug in ``pd.concat`` where names of the ``keys`` were not propagated to the resulting ``MultiIndex`` (:issue:`14252`)
 - Bug in ``pd.concat`` where ``axis`` cannot take string parameters ``'rows'`` or ``'columns'`` (:issue:`14369`)
 - Bug in ``pd.concat`` with dataframes heterogeneous in length and tuple ``keys`` (:issue:`14438`)
diff --git a/pandas/tools/tests/test_util.py b/pandas/tools/tests/test_util.py
index ddd408202..8c16308d7 100644
--- a/pandas/tools/tests/test_util.py
+++ b/pandas/tools/tests/test_util.py
@@ -401,52 +401,6 @@ class TestToNumeric(tm.TestCase):
             res = pd.to_numeric(data, downcast=downcast)
             tm.assert_numpy_array_equal(res, expected)
 
-    def test_downcast_limits(self):
-        # Test the limits of each downcast. #14401
-        # uint64 is not fully supported ATM
-        dtype_downcast_min_max = [
-            ('int8', 'integer',
-             [np.iinfo(np.int8).min, np.iinfo(np.int8).max]),
-            ('int16', 'integer',
-             [np.iinfo(np.int16).min, np.iinfo(np.int16).max]),
-            ('int32', 'integer',
-             [np.iinfo(np.int32).min, np.iinfo(np.int32).max]),
-            ('int64', 'integer',
-             [np.iinfo(np.int64).min, np.iinfo(np.int64).max]),
-            ('uint8', 'unsigned',
-             [np.iinfo(np.uint8).min, np.iinfo(np.uint8).max]),
-            ('uint16', 'unsigned',
-             [np.iinfo(np.uint16).min, np.iinfo(np.uint16).max]),
-            ('uint32', 'unsigned',
-             [np.iinfo(np.uint32).min, np.iinfo(np.uint32).max]),
-            # ('uint64', 'unsigned',
-            # [np.iinfo(np.uint64).min, np.iinfo(np.uint64).max]),
-
-            ('int16', 'integer',
-             [np.iinfo(np.int8).min, np.iinfo(np.int8).max + 1]),
-            ('int32', 'integer',
-             [np.iinfo(np.int16).min, np.iinfo(np.int16).max + 1]),
-            ('int64', 'integer',
-             [np.iinfo(np.int32).min, np.iinfo(np.int32).max + 1]),
-            ('int16', 'integer',
-             [np.iinfo(np.int8).min - 1, np.iinfo(np.int16).max]),
-            ('int32', 'integer',
-             [np.iinfo(np.int16).min - 1, np.iinfo(np.int32).max]),
-            ('int64', 'integer',
-             [np.iinfo(np.int32).min - 1, np.iinfo(np.int64).max]),
-            ('uint16', 'unsigned',
-             [np.iinfo(np.uint8).min, np.iinfo(np.uint8).max + 1]),
-            ('uint32', 'unsigned',
-             [np.iinfo(np.uint16).min, np.iinfo(np.uint16).max + 1]),
-            # ('uint64', 'unsigned',
-            # [np.iinfo(np.uint32).min, np.iinfo(np.uint32).max + 1]),
-        ]
-
-        for dtype, downcast, min_max in dtype_downcast_min_max:
-            series = pd.to_numeric(pd.Series(min_max), downcast=downcast)
-            tm.assert_equal(series.dtype, dtype)
-
-
 if __name__ == '__main__':
     nose.runmodule(argv=[__file__, '-vvs', '-x', '--pdb', '--pdb-failure'],
                    exit=False)
diff --git a/pandas/tools/util.py b/pandas/tools/util.py
index b50bf9dc4..fec56328c 100644
--- a/pandas/tools/util.py
+++ b/pandas/tools/util.py
@@ -205,7 +205,7 @@ def to_numeric(arg, errors='raise', downcast=None):
 
         if downcast in ('integer', 'signed'):
             typecodes = np.typecodes['Integer']
-        elif downcast == 'unsigned' and np.min(values) >= 0:
+        elif downcast == 'unsigned' and np.min(values) > 0:
             typecodes = np.typecodes['UnsignedInteger']
         elif downcast == 'float':
             typecodes = np.typecodes['Float']
