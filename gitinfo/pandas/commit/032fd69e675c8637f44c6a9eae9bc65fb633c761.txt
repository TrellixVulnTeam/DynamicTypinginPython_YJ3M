commit 032fd69e675c8637f44c6a9eae9bc65fb633c761
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Apr 11 20:10:35 2012 -0400

    DOC: add what's new for 0.7.3, some scatter_matrix improvements

diff --git a/RELEASE.rst b/RELEASE.rst
index a187388c1..28d23b3af 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -29,17 +29,17 @@ pandas 0.7.3
 
 **New features / modules**
 
+  - Added fixed-width file reader, read_fwf (PR #952)
   - Add group_keys argument to groupby to not add group names to MultiIndex in
     result of apply (GH #938)
   - DataFrame can now accept non-integer label slicing (GH #946). Previously
     only DataFrame.ix was able to do so.
-  - DataFrame.apply now retains name attributes (GH #983)
+  - DataFrame.apply now retains name attributes on Series objects (GH #983)
   - Numeric DataFrame comparisons with non-numeric values now raises proper
     TypeError (GH #943). Previously raise "PandasError: DataFrame constructor
     not properly called!"
   - Add ``kurt`` methods to Series and DataFrame (PR #964)
   - Can pass dict of column -> list/set NA values for text parsers (GH #754)
-  - Added fixed-width file reader (PR #952)
   - Allows users specified NA values in text parsers (GH #754)
   - Parsers checks for openpyxl dependency and raises ImportError if not found
     (PR #1007)
@@ -54,19 +54,21 @@ pandas 0.7.3
   - More informative Series.apply docstring regarding element-wise apply
     (GH #977)
   - Notes on rpy2 installation (GH #1006)
+  - Add rotation and font size options to hist method (#1012)
 
 **API Changes**
 
   - Calling apply on grouped Series, e.g. describe(), will no longer yield
     DataFrame by default. Will have to call unstack() to get prior behavior
+  - NA handling in non-numeric comparisons has been tightened up (#933, #953)
 
 **Bug fixes**
 
-  - Don't attach nonsense 'result' name to groupby results (GH #995)
   - Fix logic error when selecting part of a row in a DataFrame with a
     MultiIndex index (GH #1013)
   - Series comparison with Series of differing length causes crash (GH #1016).
-  - DataFrame.ix[tup, list] raises Exception (GH #1013)
+  - Fix bug in indexing when selecting section of hierarchically-indexed row
+    (GH #1013)
   - DataFrame.plot(logy=True) has no effect (GH #1011).
   - Broken arithmetic operations between SparsePanel-Panel (GH #1015)
   - Unicode repr issues in MultiIndex with non-ascii characters (GH #1010)
@@ -75,7 +77,6 @@ pandas 0.7.3
   - DataFrame arithmetic operations not treating None as NA (GH #992)
   - DataFrameGroupBy.apply returns incorrect result (GH #991)
   - Series.reshape returns incorrect result for multiple dimensions (GH #989)
-  - Series comparison with nan doesn't always return boolean type (GH #933 #953)
   - Series.std and Series.var ignores ddof parameter (GH #934)
   - DataFrame.append loses index names (GH #980)
   - DataFrame.plot(kind='bar') ignores color argument (GH #958)
diff --git a/doc/source/visualization.rst b/doc/source/visualization.rst
index 371057d82..7c1885730 100644
--- a/doc/source/visualization.rst
+++ b/doc/source/visualization.rst
@@ -112,8 +112,8 @@ Other plotting features
 
 .. _visualization.barplot:
 
-Plotting non-time series data
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+Bar plots
+~~~~~~~~~
 
 For labeled, non-time series data, you may wish to produce a bar plot:
 
@@ -124,8 +124,47 @@ For labeled, non-time series data, you may wish to produce a bar plot:
    @savefig bar_plot_ex.png width=4.5in
    df.ix[5].plot(kind='bar'); plt.axhline(0, color='k')
 
-Histogramming
-~~~~~~~~~~~~~
+Calling a DataFrame's ``plot`` method with ``kind='bar'`` produces a multiple
+bar plot:
+
+.. ipython:: python
+   :suppress:
+
+   plt.figure();
+
+.. ipython:: python
+
+   df2 = DataFrame(np.random.rand(10, 4), columns=['a', 'b', 'c', 'd'])
+
+   @savefig bar_plot_multi_ex.png width=5in
+   df2.plot(kind='bar');
+
+To produce a stacked bar plot, pass ``stacked=True``:
+
+.. ipython:: python
+   :suppress:
+
+   plt.figure();
+
+.. ipython:: python
+
+   @savefig bar_plot_stacked_ex.png width=5in
+   df2.plot(kind='bar', stacked=True);
+
+To get horizontal bar plots, pass ``kind='barh'``:
+
+.. ipython:: python
+   :suppress:
+
+   plt.figure();
+
+.. ipython:: python
+
+   @savefig barh_plot_stacked_ex.png width=5in
+   df2.plot(kind='barh', stacked=True);
+
+Histograms
+~~~~~~~~~~
 .. ipython:: python
 
    plt.figure();
@@ -160,7 +199,7 @@ a uniform random variable on [0,1).
    plt.figure();
 
    @savefig box_plot_ex.png width=4.5in
-   df.boxplot()
+   bp = df.boxplot()
 
 You can create a stratified boxplot using the ``by`` keyword argument to create
 groupings.  For instance,
@@ -173,7 +212,7 @@ groupings.  For instance,
    plt.figure();
 
    @savefig box_plot_ex2.png width=4.5in
-   df.boxplot(by='X')
+   bp = df.boxplot(by='X')
 
 You can also pass a subset of columns to plot, as well as group by multiple
 columns:
@@ -187,4 +226,20 @@ columns:
    plt.figure();
 
    @savefig box_plot_ex3.png width=4.5in
-   df.boxplot(column=['Col1','Col2'], by=['X','Y'])
+   bp = df.boxplot(column=['Col1','Col2'], by=['X','Y'])
+
+.. _visualization.scatter_matrix:
+
+Scatter plot matrix
+~~~~~~~~~~~~~~~~~~~
+
+*New in 0.7.3.* You can create a scatter plot matrix using the
+ ``scatter_matrix`` method in ``pandas.tools.plotting``:
+
+.. ipython:: python
+
+   from pandas.tools.plotting import scatter_matrix
+   df = DataFrame(np.random.randn(1000, 4), columns=['a', 'b', 'c', 'd'])
+
+   @savefig scatter_matrix_ex.png width=6in
+   scatter_matrix(df, alpha=0.2, figsize=(8, 8))
diff --git a/doc/source/whatsnew.rst b/doc/source/whatsnew.rst
index 7d50178aa..85c47d46b 100644
--- a/doc/source/whatsnew.rst
+++ b/doc/source/whatsnew.rst
@@ -16,6 +16,8 @@ What's New
 
 These are new features and improvements of note in each release.
 
+.. include:: whatsnew/v0.7.3.txt
+
 .. include:: whatsnew/v0.7.2.txt
 
 .. include:: whatsnew/v0.7.1.txt
diff --git a/doc/source/whatsnew/v0.7.3.txt b/doc/source/whatsnew/v0.7.3.txt
new file mode 100644
index 000000000..ba21e06a2
--- /dev/null
+++ b/doc/source/whatsnew/v0.7.3.txt
@@ -0,0 +1,94 @@
+.. _whatsnew_0703:
+
+v.0.7.3 (April 12, 2012)
+------------------------
+
+This is a minor release from 0.7.2 and fixes many minor bugs and adds a number
+of nice new features. There are also a couple of API changes to note; these
+should not affect very many users, and we are inclined to call them "bug fixes"
+even though they do constitute a change in behavior. See the full release notes
+or issue tracker on GitHub for a complete list.
+
+New features
+~~~~~~~~~~~~
+
+- New fixed width file reader, ``read_fwf``
+- New :ref:`scatter_matrix <visualization.scatter_matrix>` function
+
+.. code-block:: python
+
+   from pandas.tools.plotting import scatter_matrix
+   scatter_matrix(df, alpha=0.2)
+
+.. image:: _static/scatter_matrix_ex.png
+   :width: 5in
+
+- Add ``stacked`` argument to Series and DataFrame's ``plot`` method for
+  :ref:`stacked bar plots <visualization.barplot>`.
+
+.. code-block:: python
+
+   df.plot(kind='bar', stacked=True)
+
+.. image:: _static/bar_plot_stacked_ex.png
+   :width: 4in
+
+.. code-block:: python
+
+   df.plot(kind='barh', stacked=True)
+
+.. image:: _static/barh_plot_stacked_ex.png
+   :width: 4in
+
+- Add log x and y :ref:`scaling options <visualization.basic>` to
+  ``DataFrame.plot`` and ``Series.plot``
+- Add ``kurt`` methods to Series and DataFrame for computing kurtosis
+
+
+NA Boolean Comparison API Change
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Reverted some changes to how NA values (represented typically as ``NaN`` or
+``None``) are handled in non-numeric Series:
+
+.. ipython:: python
+
+   series = Series(['Steve', np.nan, 'Joe'])
+   series == 'Steve'
+   series != 'Steve'
+
+In comparisons, NA / NaN will always come through as ``False`` except with
+``!=`` which is ``True``. *Be very careful* with boolean arithmetic, especially
+negation, in the presence of NA data. You may wish to add an explicit NA
+filter into boolean array operations if you are worried about this:
+
+.. ipython:: python
+
+   mask = series == 'Steve'
+   series[mask & series.notnull()]
+
+While propagating NA in comparisons may seem like the right behavior to some
+users (and you could argue on purely technical grounds that this is the right
+thing to do), the evaluation was made that propagating NA everywhere, including
+in numerical arrays, would cause a large amount of problems for users. Thus, a
+"practicality beats purity" approach was taken. This issue may be revisited at
+some point in the future.
+
+Other API Changes
+~~~~~~~~~~~~~~~~~
+
+When calling ``apply`` on a grouped Series, the return value will also be a
+Series, to be more consistent with the ``groupby`` behavior with DataFrame:
+
+.. ipython:: python
+
+    df = DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',
+                        'foo', 'bar', 'foo', 'foo'],
+                    'B' : ['one', 'one', 'two', 'three',
+                           'two', 'two', 'one', 'three'],
+                    'C' : np.random.randn(8), 'D' : np.random.randn(8)})
+    df
+    grouped = df.groupby('A')['C']
+    grouped.describe()
+    grouped.apply(lambda x: x.order()[-2:]) # top 2 values
+
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index ea30787d0..8571212d5 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -7,7 +7,7 @@ import pandas.core.common as com
 import numpy as np
 
 
-def scatter_matrix(frame, **kwds):
+def scatter_matrix(frame, alpha=0.5, figsize=None, **kwds):
     """
     Draw a matrix of scatter plots.
 
@@ -23,14 +23,14 @@ def scatter_matrix(frame, **kwds):
     """
     df = frame._get_numeric_data()
     n = df.columns.size
-    fig, axes = _subplots(nrows=n, ncols=n)
+    fig, axes = _subplots(nrows=n, ncols=n, figsize=figsize)
 
     # no gaps between subplots
     fig.subplots_adjust(wspace=0, hspace=0)
 
     for i, a in zip(range(n), df.columns):
         for j, b in zip(range(n), df.columns):
-            axes[i, j].scatter(df[b], df[a], **kwds)
+            axes[i, j].scatter(df[b], df[a], alpha=alpha, **kwds)
             axes[i, j].yaxis.set_visible(False)
             axes[i, j].xaxis.set_visible(False)
 
