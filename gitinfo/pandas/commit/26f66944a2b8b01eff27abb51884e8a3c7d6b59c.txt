commit 26f66944a2b8b01eff27abb51884e8a3c7d6b59c
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Apr 11 21:06:33 2012 -0400

    DOC: some docs re: Panel.from_dict with orient='minor', close #1009

diff --git a/RELEASE.rst b/RELEASE.rst
index 28d23b3af..3023fce91 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -55,6 +55,8 @@ pandas 0.7.3
     (GH #977)
   - Notes on rpy2 installation (GH #1006)
   - Add rotation and font size options to hist method (#1012)
+  - Use exogenous / X variable index in result of OLS.y_predict. Add
+    OLS.predict method (PR #1027, #1008)
 
 **API Changes**
 
diff --git a/doc/source/dsintro.rst b/doc/source/dsintro.rst
index 44335d184..b227352e4 100644
--- a/doc/source/dsintro.rst
+++ b/doc/source/dsintro.rst
@@ -687,7 +687,20 @@ For example, compare to the construction above:
 
    Panel.from_dict(data, orient='minor')
 
-Orient is especially useful for mixed-type DataFrames.
+Orient is especially useful for mixed-type DataFrames. If you pass a dict of
+DataFrame objects with mixed-type columns, all of the data will get upcasted to
+``dtype=object`` unless you pass ``orient='minor'``:
+
+.. ipython:: python
+
+   df = DataFrame({'a': ['foo', 'bar', 'baz'],
+                   'b': np.random.randn(3)})
+   df
+   data = {'item1': df, 'item2': df}
+   panel = Panel.from_dict(data, orient='minor')
+   panel['a']
+   panel['b']
+   panel['b'].dtypes
 
 .. note::
 
@@ -751,7 +764,10 @@ For example, using the earlier example data, we could do:
 Conversion to DataFrame
 ~~~~~~~~~~~~~~~~~~~~~~~
 
-A Panel can be represented in 2D form as a hierarchically indexed DataFrame. See the section :ref:`hierarchical indexing <indexing.hierarchical>` for more on this. To convert a Panel to a DataFrame, use the ``to_frame`` method:
+A Panel can be represented in 2D form as a hierarchically indexed
+DataFrame. See the section :ref:`hierarchical indexing <indexing.hierarchical>`
+for more on this. To convert a Panel to a DataFrame, use the ``to_frame``
+method:
 
 .. ipython:: python
 
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 819fbeca7..c8507260d 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -128,7 +128,8 @@ def _read(cls, filepath_or_buffer, kwds):
             else:
                 errors = 'replace'
                 encoding = 'utf-8'
-            filepath_or_buffer = StringIO(filepath_or_buffer.read().decode(encoding, errors))
+            bytes = filepath_or_buffer.read()
+            filepath_or_buffer = StringIO(bytes.decode(encoding, errors))
 
     if hasattr(filepath_or_buffer, 'read'):
         f = filepath_or_buffer
