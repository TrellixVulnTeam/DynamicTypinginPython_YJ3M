commit 7bcba9c3e19f145bf54f54935982ff21d719be9f
Author: Erik Nilsson <eriknil@live.com>
Date:   Tue Oct 23 03:07:41 2018 +0000

    CLN: Removed all occurances of `goal_time` and enabled linting for benchmarks (#23265)

diff --git a/asv_bench/benchmarks/algorithms.py b/asv_bench/benchmarks/algorithms.py
index baac17935..1ab88dc9f 100644
--- a/asv_bench/benchmarks/algorithms.py
+++ b/asv_bench/benchmarks/algorithms.py
@@ -15,8 +15,6 @@ for imp in ['pandas.util', 'pandas.tools.hashing']:
 
 class Factorize(object):
 
-    goal_time = 0.2
-
     params = [True, False]
     param_names = ['sort']
 
@@ -38,8 +36,6 @@ class Factorize(object):
 
 class Duplicated(object):
 
-    goal_time = 0.2
-
     params = ['first', 'last', False]
     param_names = ['keep']
 
@@ -61,8 +57,6 @@ class Duplicated(object):
 
 class DuplicatedUniqueIndex(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 10**5
         self.idx_int_dup = pd.Int64Index(np.arange(N * 5))
@@ -75,8 +69,6 @@ class DuplicatedUniqueIndex(object):
 
 class Match(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.uniques = tm.makeStringIndex(1000).values
         self.all = self.uniques.repeat(10)
@@ -88,8 +80,6 @@ class Match(object):
 
 class Hashing(object):
 
-    goal_time = 0.2
-
     def setup_cache(self):
         N = 10**5
 
diff --git a/asv_bench/benchmarks/attrs_caching.py b/asv_bench/benchmarks/attrs_caching.py
index 7fb9fd26a..d06175520 100644
--- a/asv_bench/benchmarks/attrs_caching.py
+++ b/asv_bench/benchmarks/attrs_caching.py
@@ -8,8 +8,6 @@ except ImportError:
 
 class DataFrameAttributes(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.df = DataFrame(np.random.randn(10, 6))
         self.cur_index = self.df.index
@@ -23,8 +21,6 @@ class DataFrameAttributes(object):
 
 class CacheReadonly(object):
 
-    goal_time = 0.2
-
     def setup(self):
 
         class Foo:
diff --git a/asv_bench/benchmarks/binary_ops.py b/asv_bench/benchmarks/binary_ops.py
index 35787920d..dfdebec86 100644
--- a/asv_bench/benchmarks/binary_ops.py
+++ b/asv_bench/benchmarks/binary_ops.py
@@ -9,8 +9,6 @@ except ImportError:
 
 class Ops(object):
 
-    goal_time = 0.2
-
     params = [[True, False], ['default', 1]]
     param_names = ['use_numexpr', 'threads']
 
@@ -42,8 +40,6 @@ class Ops(object):
 
 class Ops2(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 10**3
         self.df = DataFrame(np.random.randn(N, N))
@@ -81,8 +77,6 @@ class Ops2(object):
 
 class Timeseries(object):
 
-    goal_time = 0.2
-
     params = [None, 'US/Eastern']
     param_names = ['tz']
 
@@ -109,8 +103,6 @@ class Timeseries(object):
 
 class AddOverflowScalar(object):
 
-    goal_time = 0.2
-
     params = [1, -1, 0]
     param_names = ['scalar']
 
@@ -124,8 +116,6 @@ class AddOverflowScalar(object):
 
 class AddOverflowArray(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 10**6
         self.arr = np.arange(N)
diff --git a/asv_bench/benchmarks/categoricals.py b/asv_bench/benchmarks/categoricals.py
index 418e60eb6..8a0fbc487 100644
--- a/asv_bench/benchmarks/categoricals.py
+++ b/asv_bench/benchmarks/categoricals.py
@@ -14,8 +14,6 @@ except ImportError:
 
 class Concat(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 10**5
         self.s = pd.Series(list('aabbcd') * N).astype('category')
@@ -32,8 +30,6 @@ class Concat(object):
 
 class Constructor(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 10**5
         self.categories = list('abcde')
@@ -75,8 +71,6 @@ class Constructor(object):
 
 class ValueCounts(object):
 
-    goal_time = 0.2
-
     params = [True, False]
     param_names = ['dropna']
 
@@ -91,8 +85,6 @@ class ValueCounts(object):
 
 class Repr(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.sel = pd.Series(['s1234']).astype('category')
 
@@ -102,8 +94,6 @@ class Repr(object):
 
 class SetCategories(object):
 
-    goal_time = 0.2
-
     def setup(self):
         n = 5 * 10**5
         arr = ['s%04d' % i for i in np.random.randint(0, n // 10, size=n)]
@@ -115,8 +105,6 @@ class SetCategories(object):
 
 class Rank(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 10**5
         ncats = 100
@@ -154,8 +142,6 @@ class Rank(object):
 
 class Isin(object):
 
-    goal_time = 0.2
-
     params = ['object', 'int64']
     param_names = ['dtype']
 
@@ -195,8 +181,6 @@ class IsMonotonic(object):
 
 class Contains(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 10**5
         self.ci = tm.makeCategoricalIndex(N)
@@ -212,7 +196,6 @@ class Contains(object):
 
 class CategoricalSlicing(object):
 
-    goal_time = 0.2
     params = ['monotonic_incr', 'monotonic_decr', 'non_monotonic']
     param_names = ['index']
 
diff --git a/asv_bench/benchmarks/ctors.py b/asv_bench/benchmarks/ctors.py
index 94dbd0591..198ed1c90 100644
--- a/asv_bench/benchmarks/ctors.py
+++ b/asv_bench/benchmarks/ctors.py
@@ -5,8 +5,6 @@ from pandas import Series, Index, DatetimeIndex, Timestamp, MultiIndex
 
 class SeriesConstructors(object):
 
-    goal_time = 0.2
-
     param_names = ["data_fmt", "with_index"]
     params = [[lambda x: x,
                list,
@@ -30,8 +28,6 @@ class SeriesConstructors(object):
 
 class SeriesDtypesConstructors(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 10**4
         self.arr = np.random.randn(N, N)
@@ -54,8 +50,6 @@ class SeriesDtypesConstructors(object):
 
 class MultiIndexConstructor(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 10**4
         self.iterables = [tm.makeStringIndex(N), range(20)]
diff --git a/asv_bench/benchmarks/eval.py b/asv_bench/benchmarks/eval.py
index da2d7dc7c..837478efb 100644
--- a/asv_bench/benchmarks/eval.py
+++ b/asv_bench/benchmarks/eval.py
@@ -8,8 +8,6 @@ except ImportError:
 
 class Eval(object):
 
-    goal_time = 0.2
-
     params = [['numexpr', 'python'], [1, 'all']]
     param_names = ['engine', 'threads']
 
@@ -41,8 +39,6 @@ class Eval(object):
 
 class Query(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 10**6
         halfway = (N // 2) - 1
diff --git a/asv_bench/benchmarks/frame_ctor.py b/asv_bench/benchmarks/frame_ctor.py
index d3f1a416a..60f6a66e0 100644
--- a/asv_bench/benchmarks/frame_ctor.py
+++ b/asv_bench/benchmarks/frame_ctor.py
@@ -10,8 +10,6 @@ except ImportError:
 
 class FromDicts(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N, K = 5000, 50
         self.index = tm.makeStringIndex(N)
@@ -45,8 +43,6 @@ class FromDicts(object):
 
 class FromSeries(object):
 
-    goal_time = 0.2
-
     def setup(self):
         mi = MultiIndex.from_product([range(100), range(100)])
         self.s = Series(np.random.randn(10000), index=mi)
@@ -57,7 +53,6 @@ class FromSeries(object):
 
 class FromDictwithTimestamp(object):
 
-    goal_time = 0.2
     params = [Nano(1), Hour(1)]
     param_names = ['offset']
 
@@ -74,7 +69,6 @@ class FromDictwithTimestamp(object):
 
 class FromRecords(object):
 
-    goal_time = 0.2
     params = [None, 1000]
     param_names = ['nrows']
 
@@ -89,8 +83,6 @@ class FromRecords(object):
 
 class FromNDArray(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 100000
         self.data = np.random.randn(N)
diff --git a/asv_bench/benchmarks/frame_methods.py b/asv_bench/benchmarks/frame_methods.py
index 89fd87974..b60b45cc2 100644
--- a/asv_bench/benchmarks/frame_methods.py
+++ b/asv_bench/benchmarks/frame_methods.py
@@ -9,8 +9,6 @@ from pandas import (DataFrame, Series, MultiIndex, date_range, period_range,
 
 class GetNumericData(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.df = DataFrame(np.random.randn(10000, 25))
         self.df['foo'] = 'bar'
@@ -24,8 +22,6 @@ class GetNumericData(object):
 
 class Lookup(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.df = DataFrame(np.random.randn(10000, 8),
                             columns=list('abcdefgh'))
@@ -46,8 +42,6 @@ class Lookup(object):
 
 class Reindex(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 10**3
         self.df = DataFrame(np.random.randn(N * 10, N))
@@ -77,8 +71,6 @@ class Reindex(object):
 
 class Iteration(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 1000
         self.df = DataFrame(np.random.randn(N * 10, N))
@@ -112,8 +104,6 @@ class Iteration(object):
 
 class ToString(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.df = DataFrame(np.random.randn(100, 10))
 
@@ -123,8 +113,6 @@ class ToString(object):
 
 class ToHTML(object):
 
-    goal_time = 0.2
-
     def setup(self):
         nrows = 500
         self.df2 = DataFrame(np.random.randn(nrows, 10))
@@ -137,8 +125,6 @@ class ToHTML(object):
 
 class Repr(object):
 
-    goal_time = 0.2
-
     def setup(self):
         nrows = 10000
         data = np.random.randn(nrows, 10)
@@ -164,8 +150,6 @@ class Repr(object):
 
 class MaskBool(object):
 
-    goal_time = 0.2
-
     def setup(self):
         data = np.random.randn(1000, 500)
         df = DataFrame(data)
@@ -182,8 +166,6 @@ class MaskBool(object):
 
 class Isnull(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 10**3
         self.df_no_null = DataFrame(np.random.randn(N, N))
@@ -216,7 +198,6 @@ class Isnull(object):
 
 class Fillna(object):
 
-    goal_time = 0.2
     params = ([True, False], ['pad', 'bfill'])
     param_names = ['inplace', 'method']
 
@@ -231,7 +212,6 @@ class Fillna(object):
 
 class Dropna(object):
 
-    goal_time = 0.2
     params = (['all', 'any'], [0, 1])
     param_names = ['how', 'axis']
 
@@ -252,8 +232,6 @@ class Dropna(object):
 
 class Count(object):
 
-    goal_time = 0.2
-
     params = [0, 1]
     param_names = ['axis']
 
@@ -282,8 +260,6 @@ class Count(object):
 
 class Apply(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.df = DataFrame(np.random.randn(1000, 100))
 
@@ -312,8 +288,6 @@ class Apply(object):
 
 class Dtypes(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.df = DataFrame(np.random.randn(1000, 1000))
 
@@ -323,8 +297,6 @@ class Dtypes(object):
 
 class Equals(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 10**3
         self.float_df = DataFrame(np.random.randn(N, N))
@@ -361,7 +333,6 @@ class Equals(object):
 
 class Interpolate(object):
 
-    goal_time = 0.2
     params = [None, 'infer']
     param_names = ['downcast']
 
@@ -387,7 +358,6 @@ class Interpolate(object):
 
 class Shift(object):
     # frame shift speedup issue-5609
-    goal_time = 0.2
     params = [0, 1]
     param_names = ['axis']
 
@@ -409,8 +379,6 @@ class Nunique(object):
 
 class Duplicated(object):
 
-    goal_time = 0.2
-
     def setup(self):
         n = (1 << 20)
         t = date_range('2015-01-01', freq='S', periods=(n // 64))
@@ -429,7 +397,6 @@ class Duplicated(object):
 
 class XS(object):
 
-    goal_time = 0.2
     params = [0, 1]
     param_names = ['axis']
 
@@ -443,7 +410,6 @@ class XS(object):
 
 class SortValues(object):
 
-    goal_time = 0.2
     params = [True, False]
     param_names = ['ascending']
 
@@ -456,8 +422,6 @@ class SortValues(object):
 
 class SortIndexByColumns(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 10000
         K = 10
@@ -471,7 +435,6 @@ class SortIndexByColumns(object):
 
 class Quantile(object):
 
-    goal_time = 0.2
     params = [0, 1]
     param_names = ['axis']
 
@@ -484,8 +447,6 @@ class Quantile(object):
 
 class GetDtypeCounts(object):
     # 2807
-    goal_time = 0.2
-
     def setup(self):
         self.df = DataFrame(np.random.randn(10, 10000))
 
@@ -498,7 +459,6 @@ class GetDtypeCounts(object):
 
 class NSort(object):
 
-    goal_time = 0.2
     params = ['first', 'last', 'all']
     param_names = ['keep']
 
@@ -521,8 +481,6 @@ class NSort(object):
 
 class Describe(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.df = DataFrame({
             'a': np.random.randint(0, 100, int(1e6)),
diff --git a/asv_bench/benchmarks/gil.py b/asv_bench/benchmarks/gil.py
index 32cb60be3..6819a296c 100644
--- a/asv_bench/benchmarks/gil.py
+++ b/asv_bench/benchmarks/gil.py
@@ -28,7 +28,6 @@ from .pandas_vb_common import BaseIO
 
 class ParallelGroupbyMethods(object):
 
-    goal_time = 0.2
     params = ([2, 4, 8], ['count', 'last', 'max', 'mean', 'min', 'prod',
                           'sum', 'var'])
     param_names = ['threads', 'method']
@@ -60,7 +59,6 @@ class ParallelGroupbyMethods(object):
 
 class ParallelGroups(object):
 
-    goal_time = 0.2
     params = [2, 4, 8]
     param_names = ['threads']
 
@@ -82,7 +80,6 @@ class ParallelGroups(object):
 
 class ParallelTake1D(object):
 
-    goal_time = 0.2
     params = ['int64', 'float64']
     param_names = ['dtype']
 
@@ -126,8 +123,6 @@ class ParallelKth(object):
 
 class ParallelDatetimeFields(object):
 
-    goal_time = 0.2
-
     def setup(self):
         if not have_real_test_parallel:
             raise NotImplementedError
@@ -174,7 +169,6 @@ class ParallelDatetimeFields(object):
 
 class ParallelRolling(object):
 
-    goal_time = 0.2
     params = ['median', 'mean', 'min', 'max', 'var', 'skew', 'kurt', 'std']
     param_names = ['method']
 
diff --git a/asv_bench/benchmarks/groupby.py b/asv_bench/benchmarks/groupby.py
index be09bba97..dbd79185e 100644
--- a/asv_bench/benchmarks/groupby.py
+++ b/asv_bench/benchmarks/groupby.py
@@ -20,8 +20,6 @@ method_blacklist = {
 
 
 class ApplyDictReturn(object):
-    goal_time = 0.2
-
     def setup(self):
         self.labels = np.arange(1000).repeat(10)
         self.data = Series(np.random.randn(len(self.labels)))
@@ -33,8 +31,6 @@ class ApplyDictReturn(object):
 
 class Apply(object):
 
-    goal_time = 0.2
-
     def setup_cache(self):
         N = 10**4
         labels = np.random.randint(0, 2000, size=N)
@@ -67,8 +63,6 @@ class Apply(object):
 
 class Groups(object):
 
-    goal_time = 0.2
-
     param_names = ['key']
     params = ['int64_small', 'int64_large', 'object_small', 'object_large']
 
@@ -93,7 +87,6 @@ class Groups(object):
 
 class GroupManyLabels(object):
 
-    goal_time = 0.2
     params = [1, 1000]
     param_names = ['ncols']
 
@@ -109,8 +102,6 @@ class GroupManyLabels(object):
 
 class Nth(object):
 
-    goal_time = 0.2
-
     param_names = ['dtype']
     params = ['float32', 'float64', 'datetime', 'object']
 
@@ -149,8 +140,6 @@ class Nth(object):
 
 class DateAttributes(object):
 
-    goal_time = 0.2
-
     def setup(self):
         rng = date_range('1/1/2000', '12/31/2005', freq='H')
         self.year, self.month, self.day = rng.year, rng.month, rng.day
@@ -162,8 +151,6 @@ class DateAttributes(object):
 
 class Int64(object):
 
-    goal_time = 0.2
-
     def setup(self):
         arr = np.random.randint(-1 << 12, 1 << 12, (1 << 17, 5))
         i = np.random.choice(len(arr), len(arr) * 5)
@@ -180,8 +167,6 @@ class Int64(object):
 
 class CountMultiDtype(object):
 
-    goal_time = 0.2
-
     def setup_cache(self):
         n = 10000
         offsets = np.random.randint(n, size=n).astype('timedelta64[ns]')
@@ -208,8 +193,6 @@ class CountMultiDtype(object):
 
 class CountMultiInt(object):
 
-    goal_time = 0.2
-
     def setup_cache(self):
         n = 10000
         df = DataFrame({'key1': np.random.randint(0, 500, size=n),
@@ -227,8 +210,6 @@ class CountMultiInt(object):
 
 class AggFunctions(object):
 
-    goal_time = 0.2
-
     def setup_cache():
         N = 10**5
         fac1 = np.array(['A', 'B', 'C'], dtype='O')
@@ -259,8 +240,6 @@ class AggFunctions(object):
 
 class GroupStrings(object):
 
-    goal_time = 0.2
-
     def setup(self):
         n = 2 * 10**5
         alpha = list(map(''.join, product(ascii_letters, repeat=4)))
@@ -276,8 +255,6 @@ class GroupStrings(object):
 
 class MultiColumn(object):
 
-    goal_time = 0.2
-
     def setup_cache(self):
         N = 10**5
         key1 = np.tile(np.arange(100, dtype=object), 1000)
@@ -305,8 +282,6 @@ class MultiColumn(object):
 
 class Size(object):
 
-    goal_time = 0.2
-
     def setup(self):
         n = 10**5
         offsets = np.random.randint(n, size=n).astype('timedelta64[ns]')
@@ -334,8 +309,6 @@ class Size(object):
 
 class GroupByMethods(object):
 
-    goal_time = 0.2
-
     param_names = ['dtype', 'method', 'application']
     params = [['int', 'float', 'object', 'datetime'],
               ['all', 'any', 'bfill', 'count', 'cumcount', 'cummax', 'cummin',
@@ -385,7 +358,6 @@ class GroupByMethods(object):
 
 class RankWithTies(object):
     # GH 21237
-    goal_time = 0.2
     param_names = ['dtype', 'tie_method']
     params = [['float64', 'float32', 'int64', 'datetime64'],
               ['first', 'average', 'dense', 'min', 'max']]
@@ -404,8 +376,6 @@ class RankWithTies(object):
 
 class Float32(object):
     # GH 13335
-    goal_time = 0.2
-
     def setup(self):
         tmp1 = (np.random.random(10000) * 0.1).astype(np.float32)
         tmp2 = (np.random.random(10000) * 10.0).astype(np.float32)
@@ -419,8 +389,6 @@ class Float32(object):
 
 class Categories(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 10**5
         arr = np.random.random(N)
@@ -457,7 +425,6 @@ class Categories(object):
 
 class Datelike(object):
     # GH 14338
-    goal_time = 0.2
     params = ['period_range', 'date_range', 'date_range_tz']
     param_names = ['grouper']
 
@@ -475,8 +442,6 @@ class Datelike(object):
 
 class SumBools(object):
     # GH 2692
-    goal_time = 0.2
-
     def setup(self):
         N = 500
         self.df = DataFrame({'ii': range(N),
@@ -488,7 +453,6 @@ class SumBools(object):
 
 class SumMultiLevel(object):
     # GH 9049
-    goal_time = 0.2
     timeout = 120.0
 
     def setup(self):
@@ -503,8 +467,6 @@ class SumMultiLevel(object):
 
 class Transform(object):
 
-    goal_time = 0.2
-
     def setup(self):
         n1 = 400
         n2 = 250
@@ -551,8 +513,6 @@ class Transform(object):
 
 class TransformBools(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 120000
         transition_points = np.sort(np.random.choice(np.arange(N), 1400))
@@ -567,8 +527,6 @@ class TransformBools(object):
 
 class TransformNaN(object):
     # GH 12737
-    goal_time = 0.2
-
     def setup(self):
         self.df_nans = DataFrame({'key': np.repeat(np.arange(1000), 10),
                                   'B': np.nan,
diff --git a/asv_bench/benchmarks/index_object.py b/asv_bench/benchmarks/index_object.py
index c1bc53823..f76040921 100644
--- a/asv_bench/benchmarks/index_object.py
+++ b/asv_bench/benchmarks/index_object.py
@@ -6,7 +6,6 @@ from pandas import (Series, date_range, DatetimeIndex, Index, RangeIndex,
 
 class SetOperations(object):
 
-    goal_time = 0.2
     params = (['datetime', 'date_string', 'int', 'strings'],
               ['intersection', 'union', 'symmetric_difference'])
     param_names = ['dtype', 'method']
@@ -32,8 +31,6 @@ class SetOperations(object):
 
 class SetDisjoint(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 10**5
         B = N + 20000
@@ -46,8 +43,6 @@ class SetDisjoint(object):
 
 class Datetime(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.dr = date_range('20000101', freq='D', periods=10000)
 
@@ -84,8 +79,6 @@ class Ops(object):
 
 class Range(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.idx_inc = RangeIndex(start=0, stop=10**7, step=3)
         self.idx_dec = RangeIndex(start=10**7, stop=-1, step=-3)
@@ -105,8 +98,6 @@ class Range(object):
 
 class IndexAppend(object):
 
-    goal_time = 0.2
-
     def setup(self):
 
         N = 10000
@@ -136,7 +127,6 @@ class IndexAppend(object):
 
 class Indexing(object):
 
-    goal_time = 0.2
     params = ['String', 'Float', 'Int']
     param_names = ['dtype']
 
@@ -181,8 +171,6 @@ class Indexing(object):
 
 class Float64IndexMethod(object):
     # GH 13166
-    goal_time = 0.2
-
     def setup(self):
         N = 100000
         a = np.arange(N)
diff --git a/asv_bench/benchmarks/indexing.py b/asv_bench/benchmarks/indexing.py
index 49d6311a7..57ba9cd80 100644
--- a/asv_bench/benchmarks/indexing.py
+++ b/asv_bench/benchmarks/indexing.py
@@ -10,7 +10,6 @@ from pandas import (Series, DataFrame, Panel, MultiIndex,
 
 class NumericSeriesIndexing(object):
 
-    goal_time = 0.2
     params = [
         (Int64Index, UInt64Index, Float64Index),
         ('unique_monotonic_inc', 'nonunique_monotonic_inc'),
@@ -82,7 +81,6 @@ class NumericSeriesIndexing(object):
 
 class NonNumericSeriesIndexing(object):
 
-    goal_time = 0.2
     params = [
         ('string', 'datetime'),
         ('unique_monotonic_inc', 'nonunique_monotonic_inc'),
@@ -118,8 +116,6 @@ class NonNumericSeriesIndexing(object):
 
 class DataFrameStringIndexing(object):
 
-    goal_time = 0.2
-
     def setup(self):
         index = tm.makeStringIndex(1000)
         columns = tm.makeStringIndex(30)
@@ -152,8 +148,6 @@ class DataFrameStringIndexing(object):
 
 class DataFrameNumericIndexing(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.idx_dupe = np.array(range(30)) * 99
         self.df = DataFrame(np.random.randn(10000, 5))
@@ -178,7 +172,6 @@ class DataFrameNumericIndexing(object):
 
 class Take(object):
 
-    goal_time = 0.2
     params = ['int', 'datetime']
     param_names = ['index']
 
@@ -196,8 +189,6 @@ class Take(object):
 
 class MultiIndexing(object):
 
-    goal_time = 0.2
-
     def setup(self):
         mi = MultiIndex.from_product([range(1000), range(1000)])
         self.s = Series(np.random.randn(1000000), index=mi)
@@ -226,8 +217,6 @@ class MultiIndexing(object):
 
 class IntervalIndexing(object):
 
-    goal_time = 0.2
-
     def setup_cache(self):
         idx = IntervalIndex.from_breaks(np.arange(1000001))
         monotonic = Series(np.arange(1000000), index=idx)
@@ -248,7 +237,6 @@ class IntervalIndexing(object):
 
 class CategoricalIndexIndexing(object):
 
-    goal_time = 0.2
     params = ['monotonic_incr', 'monotonic_decr', 'non_monotonic']
     param_names = ['index']
 
@@ -291,8 +279,6 @@ class CategoricalIndexIndexing(object):
 
 class PanelIndexing(object):
 
-    goal_time = 0.2
-
     def setup(self):
         with warnings.catch_warnings(record=True):
             self.p = Panel(np.random.randn(100, 100, 100))
@@ -305,8 +291,6 @@ class PanelIndexing(object):
 
 class MethodLookup(object):
 
-    goal_time = 0.2
-
     def setup_cache(self):
         s = Series()
         return s
@@ -323,8 +307,6 @@ class MethodLookup(object):
 
 class GetItemSingleColumn(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.df_string_col = DataFrame(np.random.randn(3000, 1), columns=['A'])
         self.df_int_col = DataFrame(np.random.randn(3000, 1))
@@ -338,8 +320,6 @@ class GetItemSingleColumn(object):
 
 class AssignTimeseriesIndex(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 100000
         idx = date_range('1/1/2000', periods=N, freq='H')
@@ -351,8 +331,6 @@ class AssignTimeseriesIndex(object):
 
 class InsertColumns(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.N = 10**3
         self.df = DataFrame(index=range(self.N))
diff --git a/asv_bench/benchmarks/indexing_engines.py b/asv_bench/benchmarks/indexing_engines.py
index 243f2ada7..1e9283c7f 100644
--- a/asv_bench/benchmarks/indexing_engines.py
+++ b/asv_bench/benchmarks/indexing_engines.py
@@ -6,7 +6,6 @@ from pandas._libs.index import (Int64Engine, UInt64Engine, Float64Engine,
 
 class NumericEngineIndexing(object):
 
-    goal_time = 0.2
     params = [[Int64Engine, UInt64Engine, Float64Engine],
               [np.int64, np.uint64, np.float64],
               ['monotonic_incr', 'monotonic_decr', 'non_monotonic'],
@@ -33,7 +32,6 @@ class NumericEngineIndexing(object):
 
 class ObjectEngineIndexing(object):
 
-    goal_time = 0.2
     params = [('monotonic_incr', 'monotonic_decr', 'non_monotonic')]
     param_names = ['index_type']
 
diff --git a/asv_bench/benchmarks/inference.py b/asv_bench/benchmarks/inference.py
index 7fb57991c..423bd02b9 100644
--- a/asv_bench/benchmarks/inference.py
+++ b/asv_bench/benchmarks/inference.py
@@ -7,7 +7,6 @@ from .pandas_vb_common import numeric_dtypes, lib
 
 class NumericInferOps(object):
     # from GH 7332
-    goal_time = 0.2
     params = numeric_dtypes
     param_names = ['dtype']
 
@@ -34,8 +33,6 @@ class NumericInferOps(object):
 
 class DateInferOps(object):
     # from GH 7332
-    goal_time = 0.2
-
     def setup_cache(self):
         N = 5 * 10**5
         df = DataFrame({'datetime64': np.arange(N).astype('datetime64[ms]')})
@@ -54,7 +51,6 @@ class DateInferOps(object):
 
 class ToNumeric(object):
 
-    goal_time = 0.2
     params = ['ignore', 'coerce']
     param_names = ['errors']
 
diff --git a/asv_bench/benchmarks/io/csv.py b/asv_bench/benchmarks/io/csv.py
index ac2370fe8..771f27953 100644
--- a/asv_bench/benchmarks/io/csv.py
+++ b/asv_bench/benchmarks/io/csv.py
@@ -11,7 +11,6 @@ from ..pandas_vb_common import BaseIO
 
 class ToCSV(BaseIO):
 
-    goal_time = 0.2
     fname = '__test__.csv'
     params = ['wide', 'long', 'mixed']
     param_names = ['kind']
@@ -41,7 +40,6 @@ class ToCSV(BaseIO):
 
 class ToCSVDatetime(BaseIO):
 
-    goal_time = 0.2
     fname = '__test__.csv'
 
     def setup(self):
@@ -61,7 +59,6 @@ class StringIORewind(object):
 
 class ReadCSVDInferDatetimeFormat(StringIORewind):
 
-    goal_time = 0.2
     params = ([True, False], ['custom', 'iso8601', 'ymd'])
     param_names = ['infer_datetime_format', 'format']
 
@@ -82,7 +79,6 @@ class ReadCSVDInferDatetimeFormat(StringIORewind):
 
 class ReadCSVSkipRows(BaseIO):
 
-    goal_time = 0.2
     fname = '__test__.csv'
     params = [None, 10000]
     param_names = ['skiprows']
@@ -104,8 +100,6 @@ class ReadCSVSkipRows(BaseIO):
 
 class ReadUint64Integers(StringIORewind):
 
-    goal_time = 0.2
-
     def setup(self):
         self.na_values = [2**63 + 500]
         arr = np.arange(10000).astype('uint64') + 2**63
@@ -127,7 +121,6 @@ class ReadUint64Integers(StringIORewind):
 
 class ReadCSVThousands(BaseIO):
 
-    goal_time = 0.2
     fname = '__test__.csv'
     params = ([',', '|'], [None, ','])
     param_names = ['sep', 'thousands']
@@ -149,8 +142,6 @@ class ReadCSVThousands(BaseIO):
 
 class ReadCSVComment(StringIORewind):
 
-    goal_time = 0.2
-
     def setup(self):
         data = ['A,B,C'] + (['1,2,3 # comment'] * 100000)
         self.StringIO_input = StringIO('\n'.join(data))
@@ -162,7 +153,6 @@ class ReadCSVComment(StringIORewind):
 
 class ReadCSVFloatPrecision(StringIORewind):
 
-    goal_time = 0.2
     params = ([',', ';'], ['.', '_'], [None, 'high', 'round_trip'])
     param_names = ['sep', 'decimal', 'float_precision']
 
@@ -185,7 +175,6 @@ class ReadCSVFloatPrecision(StringIORewind):
 
 class ReadCSVCategorical(BaseIO):
 
-    goal_time = 0.2
     fname = '__test__.csv'
 
     def setup(self):
@@ -203,8 +192,6 @@ class ReadCSVCategorical(BaseIO):
 
 class ReadCSVParseDates(StringIORewind):
 
-    goal_time = 0.2
-
     def setup(self):
         data = """{},19:00:00,18:56:00,0.8100,2.8100,7.2000,0.0000,280.0000\n
                   {},20:00:00,19:56:00,0.0100,2.2100,7.2000,0.0000,260.0000\n
diff --git a/asv_bench/benchmarks/io/excel.py b/asv_bench/benchmarks/io/excel.py
index b873dc104..1bee864fb 100644
--- a/asv_bench/benchmarks/io/excel.py
+++ b/asv_bench/benchmarks/io/excel.py
@@ -3,12 +3,9 @@ from pandas import DataFrame, date_range, ExcelWriter, read_excel
 from pandas.compat import BytesIO
 import pandas.util.testing as tm
 
-from ..pandas_vb_common import BaseIO
-
 
 class Excel(object):
 
-    goal_time = 0.2
     params = ['openpyxl', 'xlsxwriter', 'xlwt']
     param_names = ['engine']
 
diff --git a/asv_bench/benchmarks/io/hdf.py b/asv_bench/benchmarks/io/hdf.py
index c150d8245..f08904ba7 100644
--- a/asv_bench/benchmarks/io/hdf.py
+++ b/asv_bench/benchmarks/io/hdf.py
@@ -9,8 +9,6 @@ from ..pandas_vb_common import BaseIO
 
 class HDFStoreDataFrame(BaseIO):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 25000
         index = tm.makeStringIndex(N)
@@ -103,8 +101,6 @@ class HDFStoreDataFrame(BaseIO):
 
 class HDFStorePanel(BaseIO):
 
-    goal_time = 0.2
-
     def setup(self):
         self.fname = '__test__.h5'
         with warnings.catch_warnings(record=True):
@@ -130,7 +126,6 @@ class HDFStorePanel(BaseIO):
 
 class HDF(BaseIO):
 
-    goal_time = 0.2
     params = ['table', 'fixed']
     param_names = ['format']
 
diff --git a/asv_bench/benchmarks/io/json.py b/asv_bench/benchmarks/io/json.py
index df5bf7341..ec2ddc11b 100644
--- a/asv_bench/benchmarks/io/json.py
+++ b/asv_bench/benchmarks/io/json.py
@@ -7,7 +7,6 @@ from ..pandas_vb_common import BaseIO
 
 class ReadJSON(BaseIO):
 
-    goal_time = 0.2
     fname = "__test__.json"
     params = (['split', 'index', 'records'], ['int', 'datetime'])
     param_names = ['orient', 'index']
@@ -27,7 +26,6 @@ class ReadJSON(BaseIO):
 
 class ReadJSONLines(BaseIO):
 
-    goal_time = 0.2
     fname = "__test_lines__.json"
     params = ['int', 'datetime']
     param_names = ['index']
@@ -58,7 +56,6 @@ class ReadJSONLines(BaseIO):
 
 class ToJSON(BaseIO):
 
-    goal_time = 0.2
     fname = "__test__.json"
     params = ['split', 'columns', 'index']
     param_names = ['orient']
diff --git a/asv_bench/benchmarks/io/msgpack.py b/asv_bench/benchmarks/io/msgpack.py
index 7033aa9ce..dc2642d92 100644
--- a/asv_bench/benchmarks/io/msgpack.py
+++ b/asv_bench/benchmarks/io/msgpack.py
@@ -7,8 +7,6 @@ from ..pandas_vb_common import BaseIO
 
 class MSGPack(BaseIO):
 
-    goal_time = 0.2
-
     def setup(self):
         self.fname = '__test__.msg'
         N = 100000
diff --git a/asv_bench/benchmarks/io/pickle.py b/asv_bench/benchmarks/io/pickle.py
index 0960d7212..74a58bbb9 100644
--- a/asv_bench/benchmarks/io/pickle.py
+++ b/asv_bench/benchmarks/io/pickle.py
@@ -7,8 +7,6 @@ from ..pandas_vb_common import BaseIO
 
 class Pickle(BaseIO):
 
-    goal_time = 0.2
-
     def setup(self):
         self.fname = '__test__.pkl'
         N = 100000
diff --git a/asv_bench/benchmarks/io/sas.py b/asv_bench/benchmarks/io/sas.py
index 526c524de..2783f42ca 100644
--- a/asv_bench/benchmarks/io/sas.py
+++ b/asv_bench/benchmarks/io/sas.py
@@ -5,7 +5,6 @@ from pandas import read_sas
 
 class SAS(object):
 
-    goal_time = 0.2
     params = ['sas7bdat', 'xport']
     param_names = ['format']
 
diff --git a/asv_bench/benchmarks/io/sql.py b/asv_bench/benchmarks/io/sql.py
index 6a8529cad..075d3bdda 100644
--- a/asv_bench/benchmarks/io/sql.py
+++ b/asv_bench/benchmarks/io/sql.py
@@ -8,7 +8,6 @@ from sqlalchemy import create_engine
 
 class SQL(object):
 
-    goal_time = 0.2
     params = ['sqlalchemy', 'sqlite']
     param_names = ['connection']
 
@@ -41,7 +40,6 @@ class SQL(object):
 
 class WriteSQLDtypes(object):
 
-    goal_time = 0.2
     params = (['sqlalchemy', 'sqlite'],
               ['float', 'float_with_nan', 'string', 'bool', 'int', 'datetime'])
     param_names = ['connection', 'dtype']
@@ -75,8 +73,6 @@ class WriteSQLDtypes(object):
 
 class ReadSQLTable(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 10000
         self.table_name = 'test'
@@ -104,8 +100,6 @@ class ReadSQLTable(object):
 
 class ReadSQLTableDtypes(object):
 
-    goal_time = 0.2
-
     params = ['float', 'float_with_nan', 'string', 'bool', 'int', 'datetime']
     param_names = ['dtype']
 
diff --git a/asv_bench/benchmarks/io/stata.py b/asv_bench/benchmarks/io/stata.py
index d74a53187..a7f854a85 100644
--- a/asv_bench/benchmarks/io/stata.py
+++ b/asv_bench/benchmarks/io/stata.py
@@ -7,7 +7,6 @@ from ..pandas_vb_common import BaseIO
 
 class Stata(BaseIO):
 
-    goal_time = 0.2
     params = ['tc', 'td', 'tm', 'tw', 'th', 'tq', 'ty']
     param_names = ['convert_dates']
 
diff --git a/asv_bench/benchmarks/join_merge.py b/asv_bench/benchmarks/join_merge.py
index 3524a5adb..5b28d8a4e 100644
--- a/asv_bench/benchmarks/join_merge.py
+++ b/asv_bench/benchmarks/join_merge.py
@@ -14,8 +14,6 @@ except ImportError:
 
 class Append(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.df1 = DataFrame(np.random.randn(10000, 4),
                              columns=['A', 'B', 'C', 'D'])
@@ -42,7 +40,6 @@ class Append(object):
 
 class Concat(object):
 
-    goal_time = 0.2
     params = [0, 1]
     param_names = ['axis']
 
@@ -71,7 +68,6 @@ class Concat(object):
 
 class ConcatPanels(object):
 
-    goal_time = 0.2
     params = ([0, 1, 2], [True, False])
     param_names = ['axis', 'ignore_index']
 
@@ -97,7 +93,6 @@ class ConcatPanels(object):
 
 class ConcatDataFrames(object):
 
-    goal_time = 0.2
     params = ([0, 1], [True, False])
     param_names = ['axis', 'ignore_index']
 
@@ -118,7 +113,6 @@ class ConcatDataFrames(object):
 
 class Join(object):
 
-    goal_time = 0.2
     params = [True, False]
     param_names = ['sort']
 
@@ -166,8 +160,6 @@ class Join(object):
 
 class JoinIndex(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 50000
         self.left = DataFrame(np.random.randint(1, N / 500, (N, 2)),
@@ -182,8 +174,6 @@ class JoinIndex(object):
 class JoinNonUnique(object):
     # outer join of non-unique
     # GH 6329
-    goal_time = 0.2
-
     def setup(self):
         date_index = date_range('01-Jan-2013', '23-Jan-2013', freq='T')
         daily_dates = date_index.to_period('D').to_timestamp('S', 'S')
@@ -200,7 +190,6 @@ class JoinNonUnique(object):
 
 class Merge(object):
 
-    goal_time = 0.2
     params = [True, False]
     param_names = ['sort']
 
@@ -235,7 +224,6 @@ class Merge(object):
 
 class I8Merge(object):
 
-    goal_time = 0.2
     params = ['inner', 'outer', 'left', 'right']
     param_names = ['how']
 
@@ -254,8 +242,6 @@ class I8Merge(object):
 
 class MergeCategoricals(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.left_object = DataFrame(
             {'X': np.random.choice(range(0, 10), size=(10000,)),
@@ -343,8 +329,6 @@ class MergeAsof(object):
 
 class Align(object):
 
-    goal_time = 0.2
-
     def setup(self):
         size = 5 * 10**5
         rng = np.arange(0, 10**13, 10**7)
diff --git a/asv_bench/benchmarks/multiindex_object.py b/asv_bench/benchmarks/multiindex_object.py
index eaf2bbbe5..ff202322d 100644
--- a/asv_bench/benchmarks/multiindex_object.py
+++ b/asv_bench/benchmarks/multiindex_object.py
@@ -7,8 +7,6 @@ from pandas import date_range, MultiIndex
 
 class GetLoc(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.mi_large = MultiIndex.from_product(
             [np.arange(1000), np.arange(20), list(string.ascii_letters)],
@@ -44,8 +42,6 @@ class GetLoc(object):
 
 class Duplicates(object):
 
-    goal_time = 0.2
-
     def setup(self):
         size = 65536
         arrays = [np.random.randint(0, 8192, size),
@@ -60,8 +56,6 @@ class Duplicates(object):
 
 class Integer(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.mi_int = MultiIndex.from_product([np.arange(1000),
                                                np.arange(1000)],
@@ -80,8 +74,6 @@ class Integer(object):
 
 class Duplicated(object):
 
-    goal_time = 0.2
-
     def setup(self):
         n, k = 200, 5000
         levels = [np.arange(n),
@@ -96,8 +88,6 @@ class Duplicated(object):
 
 class Sortlevel(object):
 
-    goal_time = 0.2
-
     def setup(self):
         n = 1182720
         low, high = -4096, 4096
@@ -122,8 +112,6 @@ class Sortlevel(object):
 
 class Values(object):
 
-    goal_time = 0.2
-
     def setup_cache(self):
 
         level1 = range(1000)
diff --git a/asv_bench/benchmarks/offset.py b/asv_bench/benchmarks/offset.py
index e161b887e..4570e73cc 100644
--- a/asv_bench/benchmarks/offset.py
+++ b/asv_bench/benchmarks/offset.py
@@ -34,8 +34,6 @@ offsets = non_apply + other_offsets
 
 class ApplyIndex(object):
 
-    goal_time = 0.2
-
     params = other_offsets
     param_names = ['offset']
 
@@ -49,8 +47,6 @@ class ApplyIndex(object):
 
 class OnOffset(object):
 
-    goal_time = 0.2
-
     params = offsets
     param_names = ['offset']
 
@@ -67,7 +63,6 @@ class OnOffset(object):
 
 class OffsetSeriesArithmetic(object):
 
-    goal_time = 0.2
     params = offsets
     param_names = ['offset']
 
@@ -83,7 +78,6 @@ class OffsetSeriesArithmetic(object):
 
 class OffsetDatetimeIndexArithmetic(object):
 
-    goal_time = 0.2
     params = offsets
     param_names = ['offset']
 
@@ -98,7 +92,6 @@ class OffsetDatetimeIndexArithmetic(object):
 
 class OffestDatetimeArithmetic(object):
 
-    goal_time = 0.2
     params = offsets
     param_names = ['offset']
 
diff --git a/asv_bench/benchmarks/panel_ctor.py b/asv_bench/benchmarks/panel_ctor.py
index c2e5bfa17..47b3ad612 100644
--- a/asv_bench/benchmarks/panel_ctor.py
+++ b/asv_bench/benchmarks/panel_ctor.py
@@ -5,8 +5,6 @@ from pandas import DataFrame, Panel, DatetimeIndex, date_range
 
 
 class DifferentIndexes(object):
-    goal_time = 0.2
-
     def setup(self):
         self.data_frames = {}
         start = datetime(1990, 1, 1)
@@ -24,8 +22,6 @@ class DifferentIndexes(object):
 
 class SameIndexes(object):
 
-    goal_time = 0.2
-
     def setup(self):
         idx = DatetimeIndex(start=datetime(1990, 1, 1),
                             end=datetime(2012, 1, 1),
@@ -40,8 +36,6 @@ class SameIndexes(object):
 
 class TwoIndexes(object):
 
-    goal_time = 0.2
-
     def setup(self):
         start = datetime(1990, 1, 1)
         end = datetime(2012, 1, 1)
diff --git a/asv_bench/benchmarks/panel_methods.py b/asv_bench/benchmarks/panel_methods.py
index 542af44a7..a4c12c082 100644
--- a/asv_bench/benchmarks/panel_methods.py
+++ b/asv_bench/benchmarks/panel_methods.py
@@ -6,7 +6,6 @@ from pandas import Panel
 
 class PanelMethods(object):
 
-    goal_time = 0.2
     params = ['items', 'major', 'minor']
     param_names = ['axis']
 
diff --git a/asv_bench/benchmarks/period.py b/asv_bench/benchmarks/period.py
index 29b8c7efd..fc34a47fe 100644
--- a/asv_bench/benchmarks/period.py
+++ b/asv_bench/benchmarks/period.py
@@ -37,8 +37,6 @@ class PeriodUnaryMethods(object):
 
 class PeriodIndexConstructor(object):
 
-    goal_time = 0.2
-
     params = ['D']
     param_names = ['freq']
 
@@ -55,8 +53,6 @@ class PeriodIndexConstructor(object):
 
 class DataFramePeriodColumn(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.rng = period_range(start='1/1/1990', freq='S', periods=20000)
         self.df = DataFrame(index=range(len(self.rng)))
@@ -72,8 +68,6 @@ class DataFramePeriodColumn(object):
 
 class Algorithms(object):
 
-    goal_time = 0.2
-
     params = ['index', 'series']
     param_names = ['typ']
 
@@ -95,8 +89,6 @@ class Algorithms(object):
 
 class Indexing(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.index = PeriodIndex(start='1985', periods=1000, freq='D')
         self.series = Series(range(1000), index=self.index)
diff --git a/asv_bench/benchmarks/plotting.py b/asv_bench/benchmarks/plotting.py
index 68dc39b64..1373d5f0b 100644
--- a/asv_bench/benchmarks/plotting.py
+++ b/asv_bench/benchmarks/plotting.py
@@ -10,8 +10,6 @@ matplotlib.use('Agg')
 
 class Plotting(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.s = Series(np.random.randn(1000000))
         self.df = DataFrame({'col': self.s})
@@ -25,8 +23,6 @@ class Plotting(object):
 
 class TimeseriesPlotting(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 2000
         M = 5
@@ -50,8 +46,6 @@ class TimeseriesPlotting(object):
 
 class Misc(object):
 
-    goal_time = 0.6
-
     def setup(self):
         N = 500
         M = 10
diff --git a/asv_bench/benchmarks/reindex.py b/asv_bench/benchmarks/reindex.py
index 13f2877e6..82c61a98e 100644
--- a/asv_bench/benchmarks/reindex.py
+++ b/asv_bench/benchmarks/reindex.py
@@ -7,8 +7,6 @@ from .pandas_vb_common import lib
 
 class Reindex(object):
 
-    goal_time = 0.2
-
     def setup(self):
         rng = DatetimeIndex(start='1/1/1970', periods=10000, freq='1min')
         self.df = DataFrame(np.random.rand(10000, 10), index=rng,
@@ -37,7 +35,6 @@ class Reindex(object):
 
 class ReindexMethod(object):
 
-    goal_time = 0.2
     params = ['pad', 'backfill']
     param_names = ['method']
 
@@ -52,7 +49,6 @@ class ReindexMethod(object):
 
 class Fillna(object):
 
-    goal_time = 0.2
     params = ['pad', 'backfill']
     param_names = ['method']
 
@@ -72,8 +68,6 @@ class Fillna(object):
 
 class LevelAlign(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.index = MultiIndex(
             levels=[np.arange(10), np.arange(100), np.arange(100)],
@@ -94,7 +88,6 @@ class LevelAlign(object):
 
 class DropDuplicates(object):
 
-    goal_time = 0.2
     params = [True, False]
     param_names = ['inplace']
 
@@ -139,8 +132,6 @@ class DropDuplicates(object):
 
 class Align(object):
     # blog "pandas escaped the zoo"
-    goal_time = 0.2
-
     def setup(self):
         n = 50000
         indices = tm.makeStringIndex(n)
@@ -156,8 +147,6 @@ class Align(object):
 
 class LibFastZip(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 10000
         K = 10
diff --git a/asv_bench/benchmarks/replace.py b/asv_bench/benchmarks/replace.py
index 3236b09ac..d8efaf99e 100644
--- a/asv_bench/benchmarks/replace.py
+++ b/asv_bench/benchmarks/replace.py
@@ -4,7 +4,6 @@ import pandas as pd
 
 class FillNa(object):
 
-    goal_time = 0.2
     params = [True, False]
     param_names = ['inplace']
 
@@ -24,7 +23,6 @@ class FillNa(object):
 
 class ReplaceDict(object):
 
-    goal_time = 0.2
     params = [True, False]
     param_names = ['inplace']
 
@@ -40,7 +38,6 @@ class ReplaceDict(object):
 
 class Convert(object):
 
-    goal_time = 0.5
     params = (['DataFrame', 'Series'], ['Timestamp', 'Timedelta'])
     param_names = ['constructor', 'replace_data']
 
diff --git a/asv_bench/benchmarks/reshape.py b/asv_bench/benchmarks/reshape.py
index 3140f6fc8..bda486dba 100644
--- a/asv_bench/benchmarks/reshape.py
+++ b/asv_bench/benchmarks/reshape.py
@@ -8,8 +8,6 @@ import pandas as pd
 
 class Melt(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.df = DataFrame(np.random.randn(10000, 3), columns=['A', 'B', 'C'])
         self.df['id1'] = np.random.randint(0, 10, 10000)
@@ -21,8 +19,6 @@ class Melt(object):
 
 class Pivot(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 10000
         index = date_range('1/1/2000', periods=N, freq='h')
@@ -37,8 +33,6 @@ class Pivot(object):
 
 class SimpleReshape(object):
 
-    goal_time = 0.2
-
     def setup(self):
         arrays = [np.arange(100).repeat(100),
                   np.roll(np.tile(np.arange(100), 100), 25)]
@@ -55,8 +49,6 @@ class SimpleReshape(object):
 
 class Unstack(object):
 
-    goal_time = 0.2
-
     def setup(self):
         m = 100
         n = 1000
@@ -77,8 +69,6 @@ class Unstack(object):
 
 class SparseIndex(object):
 
-    goal_time = 0.2
-
     def setup(self):
         NUM_ROWS = 1000
         self.df = DataFrame({'A': np.random.randint(50, size=NUM_ROWS),
@@ -95,8 +85,6 @@ class SparseIndex(object):
 
 class WideToLong(object):
 
-    goal_time = 0.2
-
     def setup(self):
         nyrs = 20
         nidvars = 20
@@ -115,8 +103,6 @@ class WideToLong(object):
 
 class PivotTable(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 100000
         fac1 = np.array(['A', 'B', 'C'], dtype='O')
@@ -135,8 +121,6 @@ class PivotTable(object):
 
 
 class GetDummies(object):
-    goal_time = 0.2
-
     def setup(self):
         categories = list(string.ascii_letters[:12])
         s = pd.Series(np.random.choice(categories, size=1000000),
diff --git a/asv_bench/benchmarks/series_methods.py b/asv_bench/benchmarks/series_methods.py
index 2388acbc2..46fb5011c 100644
--- a/asv_bench/benchmarks/series_methods.py
+++ b/asv_bench/benchmarks/series_methods.py
@@ -7,7 +7,6 @@ from pandas import Series, date_range, NaT
 
 class SeriesConstructor(object):
 
-    goal_time = 0.2
     params = [None, 'dict']
     param_names = ['data']
 
@@ -24,7 +23,6 @@ class SeriesConstructor(object):
 
 class IsIn(object):
 
-    goal_time = 0.2
     params = ['int64', 'object']
     param_names = ['dtype']
 
@@ -96,7 +94,6 @@ class IsInForObjects(object):
 
 class NSort(object):
 
-    goal_time = 0.2
     params = ['first', 'last', 'all']
     param_names = ['keep']
 
@@ -112,7 +109,6 @@ class NSort(object):
 
 class Dropna(object):
 
-    goal_time = 0.2
     params = ['int', 'datetime']
     param_names = ['dtype']
 
@@ -130,7 +126,6 @@ class Dropna(object):
 
 class Map(object):
 
-    goal_time = 0.2
     params = ['dict', 'Series']
     param_names = 'mapper'
 
@@ -146,8 +141,6 @@ class Map(object):
 
 class Clip(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.s = Series(np.random.randn(50))
 
@@ -157,7 +150,6 @@ class Clip(object):
 
 class ValueCounts(object):
 
-    goal_time = 0.2
     params = ['int', 'float', 'object']
     param_names = ['dtype']
 
@@ -170,8 +162,6 @@ class ValueCounts(object):
 
 class Dir(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.s = Series(index=tm.makeStringIndex(10000))
 
@@ -181,8 +171,6 @@ class Dir(object):
 
 class SeriesGetattr(object):
     # https://github.com/pandas-dev/pandas/issues/19764
-    goal_time = 0.2
-
     def setup(self):
         self.s = Series(1,
                         index=date_range("2012-01-01", freq='s',
diff --git a/asv_bench/benchmarks/sparse.py b/asv_bench/benchmarks/sparse.py
index bbc076790..64f87c167 100644
--- a/asv_bench/benchmarks/sparse.py
+++ b/asv_bench/benchmarks/sparse.py
@@ -16,8 +16,6 @@ def make_array(size, dense_proportion, fill_value, dtype):
 
 class SparseSeriesToFrame(object):
 
-    goal_time = 0.2
-
     def setup(self):
         K = 50
         N = 50001
@@ -35,7 +33,6 @@ class SparseSeriesToFrame(object):
 
 class SparseArrayConstructor(object):
 
-    goal_time = 0.2
     params = ([0.1, 0.01], [0, np.nan],
               [np.int64, np.float64, np.object])
     param_names = ['dense_proportion', 'fill_value', 'dtype']
@@ -50,8 +47,6 @@ class SparseArrayConstructor(object):
 
 class SparseDataFrameConstructor(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 1000
         self.arr = np.arange(N)
@@ -70,8 +65,6 @@ class SparseDataFrameConstructor(object):
 
 class FromCoo(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.matrix = scipy.sparse.coo_matrix(([3.0, 1.0, 2.0],
                                                ([1, 0, 0], [0, 2, 3])),
@@ -83,8 +76,6 @@ class FromCoo(object):
 
 class ToCoo(object):
 
-    goal_time = 0.2
-
     def setup(self):
         s = Series([np.nan] * 10000)
         s[0] = 3.0
@@ -101,7 +92,6 @@ class ToCoo(object):
 
 class Arithmetic(object):
 
-    goal_time = 0.2
     params = ([0.1, 0.01], [0, np.nan])
     param_names = ['dense_proportion', 'fill_value']
 
@@ -127,7 +117,6 @@ class Arithmetic(object):
 
 class ArithmeticBlock(object):
 
-    goal_time = 0.2
     params = [np.nan, 0]
     param_names = ['fill_value']
 
diff --git a/asv_bench/benchmarks/stat_ops.py b/asv_bench/benchmarks/stat_ops.py
index 3a6223d28..5c777c002 100644
--- a/asv_bench/benchmarks/stat_ops.py
+++ b/asv_bench/benchmarks/stat_ops.py
@@ -8,7 +8,6 @@ ops = ['mean', 'sum', 'median', 'std', 'skew', 'kurt', 'mad', 'prod', 'sem',
 
 class FrameOps(object):
 
-    goal_time = 0.2
     params = [ops, ['float', 'int'], [0, 1], [True, False]]
     param_names = ['op', 'dtype', 'axis', 'use_bottleneck']
 
@@ -27,7 +26,6 @@ class FrameOps(object):
 
 class FrameMultiIndexOps(object):
 
-    goal_time = 0.2
     params = ([0, 1, [0, 1]], ops)
     param_names = ['level', 'op']
 
@@ -46,7 +44,6 @@ class FrameMultiIndexOps(object):
 
 class SeriesOps(object):
 
-    goal_time = 0.2
     params = [ops, ['float', 'int'], [True, False]]
     param_names = ['op', 'dtype', 'use_bottleneck']
 
@@ -65,7 +62,6 @@ class SeriesOps(object):
 
 class SeriesMultiIndexOps(object):
 
-    goal_time = 0.2
     params = ([0, 1, [0, 1]], ops)
     param_names = ['level', 'op']
 
@@ -84,7 +80,6 @@ class SeriesMultiIndexOps(object):
 
 class Rank(object):
 
-    goal_time = 0.2
     params = [['DataFrame', 'Series'], [True, False]]
     param_names = ['constructor', 'pct']
 
@@ -101,7 +96,6 @@ class Rank(object):
 
 class Correlation(object):
 
-    goal_time = 0.2
     params = ['spearman', 'kendall', 'pearson']
     param_names = ['method']
 
diff --git a/asv_bench/benchmarks/strings.py b/asv_bench/benchmarks/strings.py
index ccfac2f73..d880fb258 100644
--- a/asv_bench/benchmarks/strings.py
+++ b/asv_bench/benchmarks/strings.py
@@ -7,8 +7,6 @@ import pandas.util.testing as tm
 
 class Methods(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.s = Series(tm.makeStringIndex(10**5))
 
@@ -70,7 +68,6 @@ class Methods(object):
 
 class Repeat(object):
 
-    goal_time = 0.2
     params = ['int', 'array']
     param_names = ['repeats']
 
@@ -86,7 +83,6 @@ class Repeat(object):
 
 class Cat(object):
 
-    goal_time = 0.2
     params = ([0, 3], [None, ','], [None, '-'], [0.0, 0.001, 0.15])
     param_names = ['other_cols', 'sep', 'na_rep', 'na_frac']
 
@@ -112,7 +108,6 @@ class Cat(object):
 
 class Contains(object):
 
-    goal_time = 0.2
     params = [True, False]
     param_names = ['regex']
 
@@ -125,7 +120,6 @@ class Contains(object):
 
 class Split(object):
 
-    goal_time = 0.2
     params = [True, False]
     param_names = ['expand']
 
@@ -138,8 +132,6 @@ class Split(object):
 
 class Dummies(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.s = Series(tm.makeStringIndex(10**5)).str.join('|')
 
@@ -149,8 +141,6 @@ class Dummies(object):
 
 class Encode(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.ser = Series(tm.makeUnicodeIndex())
 
@@ -160,8 +150,6 @@ class Encode(object):
 
 class Slice(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.s = Series(['abcdefg', np.nan] * 500000)
 
diff --git a/asv_bench/benchmarks/timedelta.py b/asv_bench/benchmarks/timedelta.py
index 3fe75b3c3..01d53fb9c 100644
--- a/asv_bench/benchmarks/timedelta.py
+++ b/asv_bench/benchmarks/timedelta.py
@@ -6,8 +6,6 @@ from pandas import Series, timedelta_range, to_timedelta, Timestamp, Timedelta
 
 class TimedeltaConstructor(object):
 
-    goal_time = 0.2
-
     def time_from_int(self):
         Timedelta(123456789)
 
@@ -36,8 +34,6 @@ class TimedeltaConstructor(object):
 
 class ToTimedelta(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.ints = np.random.randint(0, 60, size=10000)
         self.str_days = []
@@ -58,7 +54,6 @@ class ToTimedelta(object):
 
 class ToTimedeltaErrors(object):
 
-    goal_time = 0.2
     params = ['coerce', 'ignore']
     param_names = ['errors']
 
@@ -73,8 +68,6 @@ class ToTimedeltaErrors(object):
 
 class TimedeltaOps(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.td = to_timedelta(np.arange(1000000))
         self.ts = Timestamp('2000')
@@ -85,8 +78,6 @@ class TimedeltaOps(object):
 
 class TimedeltaProperties(object):
 
-    goal_time = 0.2
-
     def setup_cache(self):
         td = Timedelta(days=365, minutes=35, seconds=25, milliseconds=35)
         return td
@@ -106,8 +97,6 @@ class TimedeltaProperties(object):
 
 class DatetimeAccessor(object):
 
-    goal_time = 0.2
-
     def setup_cache(self):
         N = 100000
         series = Series(timedelta_range('1 days', periods=N, freq='h'))
diff --git a/asv_bench/benchmarks/timeseries.py b/asv_bench/benchmarks/timeseries.py
index 11a789453..84bdcc5fa 100644
--- a/asv_bench/benchmarks/timeseries.py
+++ b/asv_bench/benchmarks/timeseries.py
@@ -11,7 +11,6 @@ except ImportError:
 
 class DatetimeIndex(object):
 
-    goal_time = 0.2
     params = ['dst', 'repeated', 'tz_aware', 'tz_naive']
     param_names = ['index_type']
 
@@ -58,8 +57,6 @@ class DatetimeIndex(object):
 
 class TzLocalize(object):
 
-    goal_time = 0.2
-
     def setup(self):
         dst_rng = date_range(start='10/29/2000 1:00:00',
                              end='10/29/2000 1:59:59', freq='S')
@@ -77,7 +74,6 @@ class TzLocalize(object):
 
 class ResetIndex(object):
 
-    goal_time = 0.2
     params = [None, 'US/Eastern']
     param_names = 'tz'
 
@@ -91,7 +87,6 @@ class ResetIndex(object):
 
 class Factorize(object):
 
-    goal_time = 0.2
     params = [None, 'Asia/Tokyo']
     param_names = 'tz'
 
@@ -106,7 +101,6 @@ class Factorize(object):
 
 class InferFreq(object):
 
-    goal_time = 0.2
     params = [None, 'D', 'B']
     param_names = ['freq']
 
@@ -123,8 +117,6 @@ class InferFreq(object):
 
 class TimeDatetimeConverter(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 100000
         self.rng = date_range(start='1/1/2000', periods=N, freq='T')
@@ -135,7 +127,6 @@ class TimeDatetimeConverter(object):
 
 class Iteration(object):
 
-    goal_time = 0.2
     params = [date_range, period_range]
     param_names = ['time_index']
 
@@ -156,7 +147,6 @@ class Iteration(object):
 
 class ResampleDataFrame(object):
 
-    goal_time = 0.2
     params = ['max', 'mean', 'min']
     param_names = ['method']
 
@@ -171,7 +161,6 @@ class ResampleDataFrame(object):
 
 class ResampleSeries(object):
 
-    goal_time = 0.2
     params = (['period', 'datetime'], ['5min', '1D'], ['mean', 'ohlc'])
     param_names = ['index', 'freq', 'method']
 
@@ -192,8 +181,6 @@ class ResampleSeries(object):
 
 class ResampleDatetetime64(object):
     # GH 7754
-    goal_time = 0.2
-
     def setup(self):
         rng3 = date_range(start='2000-01-01 00:00:00',
                           end='2000-01-01 10:00:00', freq='555000U')
@@ -205,7 +192,6 @@ class ResampleDatetetime64(object):
 
 class AsOf(object):
 
-    goal_time = 0.2
     params = ['DataFrame', 'Series']
     param_names = ['constructor']
 
@@ -253,7 +239,6 @@ class AsOf(object):
 
 class SortIndex(object):
 
-    goal_time = 0.2
     params = [True, False]
     param_names = ['monotonic']
 
@@ -273,8 +258,6 @@ class SortIndex(object):
 
 class IrregularOps(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 10**5
         idx = date_range(start='1/1/2000', periods=N, freq='s')
@@ -288,8 +271,6 @@ class IrregularOps(object):
 
 class Lookup(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 1500000
         rng = date_range(start='1/1/2000', periods=N, freq='S')
@@ -303,8 +284,6 @@ class Lookup(object):
 
 class ToDatetimeYYYYMMDD(object):
 
-    goal_time = 0.2
-
     def setup(self):
         rng = date_range(start='1/1/2000', periods=10000, freq='D')
         self.stringsD = Series(rng.strftime('%Y%m%d'))
@@ -315,8 +294,6 @@ class ToDatetimeYYYYMMDD(object):
 
 class ToDatetimeISO8601(object):
 
-    goal_time = 0.2
-
     def setup(self):
         rng = date_range(start='1/1/2000', periods=20000, freq='H')
         self.strings = rng.strftime('%Y-%m-%d %H:%M:%S').tolist()
@@ -342,8 +319,6 @@ class ToDatetimeISO8601(object):
 
 class ToDatetimeNONISO8601(object):
 
-    goal_time = 0.2
-
     def setup(self):
         N = 10000
         half = int(N / 2)
@@ -361,8 +336,6 @@ class ToDatetimeNONISO8601(object):
 
 class ToDatetimeFormat(object):
 
-    goal_time = 0.2
-
     def setup(self):
         self.s = Series(['19MAY11', '19MAY11:00:00:00'] * 100000)
         self.s2 = self.s.str.replace(':\\S+$', '')
@@ -376,7 +349,6 @@ class ToDatetimeFormat(object):
 
 class ToDatetimeCache(object):
 
-    goal_time = 0.2
     params = [True, False]
     param_names = ['cache']
 
diff --git a/asv_bench/benchmarks/timestamp.py b/asv_bench/benchmarks/timestamp.py
index c142a9b59..8eaf815ea 100644
--- a/asv_bench/benchmarks/timestamp.py
+++ b/asv_bench/benchmarks/timestamp.py
@@ -29,8 +29,6 @@ class TimestampConstruction(object):
 
 
 class TimestampProperties(object):
-    goal_time = 0.2
-
     _tzs = [None, pytz.timezone('Europe/Amsterdam')]
     _freqs = [None, 'B']
     params = [_tzs, _freqs]
@@ -89,8 +87,6 @@ class TimestampProperties(object):
 
 
 class TimestampOps(object):
-    goal_time = 0.2
-
     params = [None, 'US/Eastern']
     param_names = ['tz']
 
@@ -108,8 +104,6 @@ class TimestampOps(object):
 
 
 class TimestampAcrossDst(object):
-    goal_time = 0.2
-
     def setup(self):
         dt = datetime.datetime(2016, 3, 27, 1)
         self.tzinfo = pytz.timezone('CET').localize(dt, is_dst=False).tzinfo
diff --git a/setup.cfg b/setup.cfg
index 84f19e56a..ee3984499 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -23,7 +23,6 @@ ignore =
     C408,  # Unnecessary dict call - rewrite as a literal.
     C409   # Unnecessary list passed to tuple() - rewrite as a tuple literal.
 exclude =
-    asv_bench/*.py,  # TODO we should fix linting in those files instead of excluding
     doc/sphinxext/*.py,
     doc/build/*.py,
     doc/temp/*.py,
