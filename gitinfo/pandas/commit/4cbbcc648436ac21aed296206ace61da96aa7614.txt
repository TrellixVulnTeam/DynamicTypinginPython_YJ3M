commit 4cbbcc648436ac21aed296206ace61da96aa7614
Author: William Ayd <william.ayd@icloud.com>
Date:   Wed May 30 14:04:47 2018 -0700

    BUG: Support for OO Optimization (#21093)

diff --git a/doc/source/whatsnew/v0.23.1.txt b/doc/source/whatsnew/v0.23.1.txt
index 35484e34e..654b27624 100644
--- a/doc/source/whatsnew/v0.23.1.txt
+++ b/doc/source/whatsnew/v0.23.1.txt
@@ -46,8 +46,6 @@ Documentation Changes
 Bug Fixes
 ~~~~~~~~~
 
-- tab completion on :class:`Index` in IPython no longer outputs deprecation warnings (:issue:`21125`)
-
 Groupby/Resample/Rolling
 ^^^^^^^^^^^^^^^^^^^^^^^^
 
@@ -101,3 +99,9 @@ Reshaping
 
 - Bug in :func:`concat` where error was raised in concatenating :class:`Series` with numpy scalar and tuple names (:issue:`21015`)
 -
+
+Other
+^^^^^
+
+- Tab completion on :class:`Index` in IPython no longer outputs deprecation warnings (:issue:`21125`)
+- Bug preventing pandas from being importable with -OO optimization (:issue:`21071`)
diff --git a/pandas/tests/test_downstream.py b/pandas/tests/test_downstream.py
index c28e2052b..c2d09c6d4 100644
--- a/pandas/tests/test_downstream.py
+++ b/pandas/tests/test_downstream.py
@@ -2,6 +2,8 @@
 """
 Testing that we work in the downstream packages
 """
+import subprocess
+
 import pytest
 import numpy as np  # noqa
 from pandas import DataFrame
@@ -53,6 +55,11 @@ def test_xarray(df):
     assert df.to_xarray() is not None
 
 
+def test_oo_optimizable():
+    # GH 21071
+    subprocess.check_call(["python", "-OO", "-c", "import pandas"])
+
+
 @tm.network
 def test_statsmodels():
 
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index 749165f89..c294110d8 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -1090,12 +1090,17 @@ class _CustomBusinessMonth(_CustomMixin, BusinessMixin, MonthOffset):
 
 
 class CustomBusinessMonthEnd(_CustomBusinessMonth):
-    __doc__ = _CustomBusinessMonth.__doc__.replace('[BEGIN/END]', 'end')
+    # TODO(py27): Replace condition with Subsitution after dropping Py27
+    if _CustomBusinessMonth.__doc__:
+        __doc__ = _CustomBusinessMonth.__doc__.replace('[BEGIN/END]', 'end')
     _prefix = 'CBM'
 
 
 class CustomBusinessMonthBegin(_CustomBusinessMonth):
-    __doc__ = _CustomBusinessMonth.__doc__.replace('[BEGIN/END]', 'beginning')
+    # TODO(py27): Replace condition with Subsitution after dropping Py27
+    if _CustomBusinessMonth.__doc__:
+        __doc__ = _CustomBusinessMonth.__doc__.replace('[BEGIN/END]',
+                                                       'beginning')
     _prefix = 'CBMS'
 
 
diff --git a/pandas/util/_decorators.py b/pandas/util/_decorators.py
index 624fbbbd4..6b55554cd 100644
--- a/pandas/util/_decorators.py
+++ b/pandas/util/_decorators.py
@@ -4,7 +4,7 @@ import inspect
 import types
 import warnings
 from textwrap import dedent, wrap
-from functools import wraps, update_wrapper
+from functools import wraps, update_wrapper, WRAPPER_ASSIGNMENTS
 
 
 def deprecate(name, alternative, version, alt_name=None,
@@ -20,18 +20,18 @@ def deprecate(name, alternative, version, alt_name=None,
     Parameters
     ----------
     name : str
-        Name of function to deprecate
-    alternative : str
-        Name of function to use instead
+        Name of function to deprecate.
+    alternative : func
+        Function to use instead.
     version : str
-        Version of pandas in which the method has been deprecated
+        Version of pandas in which the method has been deprecated.
     alt_name : str, optional
-        Name to use in preference of alternative.__name__
+        Name to use in preference of alternative.__name__.
     klass : Warning, default FutureWarning
     stacklevel : int, default 2
     msg : str
-          The message to display in the warning.
-          Default is '{name} is deprecated. Use {alt_name} instead.'
+        The message to display in the warning.
+        Default is '{name} is deprecated. Use {alt_name} instead.'
     """
 
     alt_name = alt_name or alternative.__name__
@@ -39,25 +39,26 @@ def deprecate(name, alternative, version, alt_name=None,
     warning_msg = msg or '{} is deprecated, use {} instead'.format(name,
                                                                    alt_name)
 
-    @wraps(alternative)
+    # adding deprecated directive to the docstring
+    msg = msg or 'Use `{alt_name}` instead.'.format(alt_name=alt_name)
+    msg = '\n    '.join(wrap(msg, 70))
+
+    @Substitution(version=version, msg=msg)
+    @Appender(alternative.__doc__)
     def wrapper(*args, **kwargs):
+        """
+        .. deprecated:: %(version)s
+
+           %(msg)s
+
+        """
         warnings.warn(warning_msg, klass, stacklevel=stacklevel)
         return alternative(*args, **kwargs)
 
-    # adding deprecated directive to the docstring
-    msg = msg or 'Use `{alt_name}` instead.'.format(alt_name=alt_name)
-    tpl = dedent("""
-    .. deprecated:: {version}
-
-       {msg}
-
-    {rest}
-    """)
-    rest = getattr(wrapper, '__doc__', '')
-    docstring = tpl.format(version=version,
-                           msg='\n    '.join(wrap(msg, 70)),
-                           rest=dedent(rest))
-    wrapper.__doc__ = docstring
+    # Since we are using Substitution to create the required docstring,
+    # remove that from the attributes that should be assigned to the wrapper
+    assignments = tuple(x for x in WRAPPER_ASSIGNMENTS if x != '__doc__')
+    update_wrapper(wrapper, alternative, assigned=assignments)
 
     return wrapper
 
