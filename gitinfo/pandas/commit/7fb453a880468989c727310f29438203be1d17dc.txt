commit 7fb453a880468989c727310f29438203be1d17dc
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jun 19 16:46:04 2012 -0400

    BUG: fix MS/BMS range generation / onOffset bugs causing #1483

diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index 92076ca0c..c381e210c 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -341,8 +341,7 @@ class MonthBegin(DateOffset, CacheableOffset):
 
     @classmethod
     def onOffset(cls, dt):
-        firstDay, _ = lib.monthrange(dt.year, dt.month)
-        return dt.day == (firstDay + 1)
+        return dt.day == 1
 
     @property
     def rule_code(self):
@@ -397,6 +396,16 @@ class BusinessMonthBegin(DateOffset, CacheableOffset):
         result = datetime(other.year, other.month, first)
         return result
 
+    @classmethod
+    def onOffset(cls, dt):
+        first_weekday, _ = lib.monthrange(dt.year, dt.month)
+        if first_weekday == 5:
+            return dt.day == 3
+        elif first_weekday == 6:
+            return dt.day == 2
+        else:
+            return dt.day == 1
+
     @property
     def rule_code(self):
         return 'BMS'
diff --git a/pandas/tseries/resample.py b/pandas/tseries/resample.py
index dfe08ecb2..0d9ad3157 100644
--- a/pandas/tseries/resample.py
+++ b/pandas/tseries/resample.py
@@ -105,20 +105,7 @@ class TimeGrouper(CustomGrouper):
             trimmed = True
 
         ax_values = axis.asi8
-        bin_edges = binner.asi8
-
-        # Some hacks for > daily data, see #1471, #1458
-        if self.freq != 'D' and is_superperiod(self.freq, 'D'):
-            day_nanos = _delta_to_nanoseconds(timedelta(1))
-            if self.closed == 'right':
-                bin_edges = bin_edges + day_nanos - 1
-            else:
-                bin_edges = bin_edges + day_nanos
-
-            # intraday values on last day
-            if bin_edges[-2] > ax_values[-1]:
-                bin_edges = bin_edges[:-1]
-                binner = binner[:-1]
+        binner, bin_edges = self._adjust_bin_edges(binner, ax_values)
 
         # general version, knowing nothing about relative frequencies
         bins = lib.generate_bins_dt64(ax_values, bin_edges, self.closed)
@@ -137,6 +124,25 @@ class TimeGrouper(CustomGrouper):
 
         return binner, bins, labels
 
+    def _adjust_bin_edges(self, binner, ax_values):
+        # Some hacks for > daily data, see #1471, #1458, #1483
+
+        bin_edges = binner.asi8
+
+        if self.freq != 'D' and is_superperiod(self.freq, 'D'):
+            day_nanos = _delta_to_nanoseconds(timedelta(1))
+            if self.closed == 'right':
+                bin_edges = bin_edges + day_nanos - 1
+            else:
+                bin_edges = bin_edges + day_nanos
+
+            # intraday values on last day
+            if bin_edges[-2] > ax_values[-1]:
+                bin_edges = bin_edges[:-1]
+                binner = binner[:-1]
+
+        return binner, bin_edges
+
     def _get_time_period_bins(self, axis):
         assert(isinstance(axis, DatetimeIndex))
 
diff --git a/pandas/tseries/tests/test_offsets.py b/pandas/tseries/tests/test_offsets.py
index 2460a7643..eb39fb786 100644
--- a/pandas/tseries/tests/test_offsets.py
+++ b/pandas/tseries/tests/test_offsets.py
@@ -422,6 +422,7 @@ class TestBMonthBegin(unittest.TestCase):
 
         tests = [(BMonthBegin(), datetime(2007, 12, 31), False),
                  (BMonthBegin(), datetime(2008, 1, 1), True),
+                 (BMonthBegin(), datetime(2001, 4, 2), True),
                  (BMonthBegin(), datetime(2008, 3, 3), True)]
 
         for offset, date, expected in tests:
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index c2a331796..ad5b68fee 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -440,7 +440,7 @@ class TestResample(unittest.TestCase):
     def test_resample_anchored_intraday(self):
         # #1471, #1458
 
-        rng = pd.date_range('1/1/2012', '4/1/2012', freq='10min')
+        rng = date_range('1/1/2012', '4/1/2012', freq='10min')
         df = DataFrame(rng.month, index=rng)
 
         result = df.resample('M')
@@ -451,7 +451,7 @@ class TestResample(unittest.TestCase):
         expected = df.resample('M', kind='period', closed='left').to_timestamp()
         tm.assert_frame_equal(result, expected)
 
-        rng = pd.date_range('1/1/2012', '4/1/2013', freq='10min')
+        rng = date_range('1/1/2012', '4/1/2013', freq='10min')
         df = DataFrame(rng.month, index=rng)
 
         result = df.resample('Q')
@@ -462,9 +462,14 @@ class TestResample(unittest.TestCase):
         expected = df.resample('Q', kind='period', closed='left').to_timestamp()
         tm.assert_frame_equal(result, expected)
 
+    def test_resample_anchored_monthstart(self):
+        ts = _simple_ts('1/1/2000', '12/31/2002')
+
+        freqs = ['MS', 'BMS', 'QS-MAR', 'AS-DEC', 'AS-JUN']
+
+        for freq in freqs:
+            result = ts.resample(freq, how='mean')
 
-rng = pd.date_range('1/1/2012', '4/1/2015', freq='10min')
-df = DataFrame(rng.month, index=rng)
 
 def _simple_ts(start, end, freq='D'):
     rng = date_range(start, end, freq=freq)
