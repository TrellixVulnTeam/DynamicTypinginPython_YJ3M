commit 4274b118bf314d21eda846c9aea22b6d8014ba27
Author: Jihwan Song <jihwans@users.noreply.github.com>
Date:   Thu Jul 9 19:35:58 2020 -0400

    PERF: to speed up rendering of styler (#34863)

diff --git a/asv_bench/asv.conf.json b/asv_bench/asv.conf.json
index 7c10a2d17..4583fac85 100644
--- a/asv_bench/asv.conf.json
+++ b/asv_bench/asv.conf.json
@@ -53,6 +53,7 @@
         "xlwt": [],
         "odfpy": [],
         "pytest": [],
+        "jinja2": [],
         // If using Windows with python 2.7 and want to build using the
         // mingw toolchain (rather than MSVC), uncomment the following line.
         // "libpython": [],
diff --git a/asv_bench/benchmarks/io/style.py b/asv_bench/benchmarks/io/style.py
new file mode 100644
index 000000000..4fc07bbab
--- /dev/null
+++ b/asv_bench/benchmarks/io/style.py
@@ -0,0 +1,34 @@
+import numpy as np
+
+from pandas import DataFrame
+
+
+class RenderApply:
+
+    params = [[12, 24, 36], [12, 120]]
+    param_names = ["cols", "rows"]
+
+    def setup(self, cols, rows):
+        self.df = DataFrame(
+            np.random.randn(rows, cols),
+            columns=[f"float_{i+1}" for i in range(cols)],
+            index=[f"row_{i+1}" for i in range(rows)],
+        )
+        self._style_apply()
+
+    def time_render(self, cols, rows):
+        self.st.render()
+
+    def peakmem_apply(self, cols, rows):
+        self._style_apply()
+
+    def peakmem_render(self, cols, rows):
+        self.st.render()
+
+    def _style_apply(self):
+        def _apply_func(s):
+            return [
+                "background-color: lightcyan" if s.name == "row_1" else "" for v in s
+            ]
+
+        self.st = self.df.style.apply(_apply_func, axis=1)
diff --git a/doc/source/whatsnew/v1.1.0.rst b/doc/source/whatsnew/v1.1.0.rst
index dc1ef1289..5473b7c15 100644
--- a/doc/source/whatsnew/v1.1.0.rst
+++ b/doc/source/whatsnew/v1.1.0.rst
@@ -854,6 +854,7 @@ Performance improvements
 - Performance improvement in :class:`pandas.core.groupby.RollingGroupby` (:issue:`34052`)
 - Performance improvement in arithmetic operations (sub, add, mul, div) for MultiIndex (:issue:`34297`)
 - Performance improvement in `DataFrame[bool_indexer]` when `bool_indexer` is a list (:issue:`33924`)
+- Significant performance improvement of :meth:`io.formats.style.Styler.render` with styles added with various ways such as :meth:`io.formats.style.Styler.apply`, :meth:`io.formats.style.Styler.applymap` or :meth:`io.formats.style.Styler.bar` (:issue:`19917`)
 
 .. ---------------------------------------------------------------------------
 
diff --git a/pandas/io/formats/style.py b/pandas/io/formats/style.py
index 6250e9925..d11144938 100644
--- a/pandas/io/formats/style.py
+++ b/pandas/io/formats/style.py
@@ -561,11 +561,19 @@ class Styler:
             Whitespace shouldn't matter and the final trailing ';' shouldn't
             matter.
         """
-        for row_label, v in attrs.iterrows():
-            for col_label, col in v.items():
-                i = self.index.get_indexer([row_label])[0]
-                j = self.columns.get_indexer([col_label])[0]
-                for pair in col.rstrip(";").split(";"):
+        coli = {k: i for i, k in enumerate(self.columns)}
+        rowi = {k: i for i, k in enumerate(self.index)}
+        for jj in range(len(attrs.columns)):
+            cn = attrs.columns[jj]
+            j = coli[cn]
+            for rn, c in attrs[[cn]].itertuples():
+                if not c:
+                    continue
+                c = c.rstrip(";")
+                if not c:
+                    continue
+                i = rowi[rn]
+                for pair in c.split(";"):
                     self.ctx[(i, j)].append(pair)
 
     def _copy(self, deepcopy: bool = False) -> "Styler":
diff --git a/pandas/tests/io/formats/test_style.py b/pandas/tests/io/formats/test_style.py
index ec4614538..9c6910637 100644
--- a/pandas/tests/io/formats/test_style.py
+++ b/pandas/tests/io/formats/test_style.py
@@ -405,9 +405,10 @@ class TestStyler:
 
         result = self.df.style.where(f, style1)._compute().ctx
         expected = {
-            (r, c): [style1 if f(self.df.loc[row, col]) else ""]
+            (r, c): [style1]
             for r, row in enumerate(self.df.index)
             for c, col in enumerate(self.df.columns)
+            if f(self.df.loc[row, col])
         }
         assert result == expected
 
@@ -966,7 +967,6 @@ class TestStyler:
                 "transparent 25.0%, #d65f5f 25.0%, "
                 "#d65f5f 50.0%, transparent 50.0%)",
             ],
-            (1, 0): [""],
             (0, 1): [
                 "width: 10em",
                 " height: 80%",
@@ -994,7 +994,6 @@ class TestStyler:
                 "transparent 50.0%, #d65f5f 50.0%, "
                 "#d65f5f 75.0%, transparent 75.0%)",
             ],
-            (1, 0): [""],
             (0, 1): [
                 "width: 10em",
                 " height: 80%",
@@ -1091,7 +1090,7 @@ class TestStyler:
     def test_highlight_null(self, null_color="red"):
         df = pd.DataFrame({"A": [0, np.nan]})
         result = df.style.highlight_null()._compute().ctx
-        expected = {(0, 0): [""], (1, 0): ["background-color: red"]}
+        expected = {(1, 0): ["background-color: red"]}
         assert result == expected
 
     def test_highlight_null_subset(self):
@@ -1104,9 +1103,7 @@ class TestStyler:
             .ctx
         )
         expected = {
-            (0, 0): [""],
             (1, 0): ["background-color: red"],
-            (0, 1): [""],
             (1, 1): ["background-color: green"],
         }
         assert result == expected
@@ -1219,8 +1216,6 @@ class TestStyler:
             expected = {
                 (1, 0): ["background-color: yellow"],
                 (1, 1): ["background-color: yellow"],
-                (0, 1): [""],
-                (0, 0): [""],
             }
             assert result == expected
 
@@ -1228,8 +1223,6 @@ class TestStyler:
             expected = {
                 (0, 1): ["background-color: yellow"],
                 (1, 1): ["background-color: yellow"],
-                (0, 0): [""],
-                (1, 0): [""],
             }
             assert result == expected
 
