commit c460710f32193c65e33d366921f9eaf919bc8da4
Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
Date:   Thu Jun 7 23:25:37 2018 +0200

    Revert "enable multivalues insert (#19664)" (#21355)
    
    This reverts commit 7c7bd569ce8e0f117c618d068e3d2798134dbc73.

diff --git a/doc/source/io.rst b/doc/source/io.rst
index 7bd56d52b..32129147e 100644
--- a/doc/source/io.rst
+++ b/doc/source/io.rst
@@ -4719,12 +4719,6 @@ writes ``data`` to the database in batches of 1000 rows at a time:
 
     data.to_sql('data_chunked', engine, chunksize=1000)
 
-.. note::
-
-    The function :func:`~pandas.DataFrame.to_sql` will perform a multi-value
-    insert if the engine dialect ``supports_multivalues_insert``. This will
-    greatly speed up the insert in some cases.
-
 SQL data types
 ++++++++++++++
 
diff --git a/doc/source/whatsnew/v0.23.1.txt b/doc/source/whatsnew/v0.23.1.txt
index ead4fac14..2b64ef32c 100644
--- a/doc/source/whatsnew/v0.23.1.txt
+++ b/doc/source/whatsnew/v0.23.1.txt
@@ -16,6 +16,10 @@ and bug fixes. We recommend that all users upgrade to this version.
 Fixed Regressions
 ~~~~~~~~~~~~~~~~~
 
+
+- Reverted the ability of :func:`~DataFrame.to_sql` to perform multivalue
+  inserts as this caused regression in certain cases (:issue:`21103`).
+  In the future this will be made configurable.
 - Fixed regression in the :attr:`DatetimeIndex.date` and :attr:`DatetimeIndex.time`
   attributes in case of timezone-aware data: :attr:`DatetimeIndex.time` returned
   a tz-aware time instead of tz-naive (:issue:`21267`) and :attr:`DatetimeIndex.date`
diff --git a/pandas/io/sql.py b/pandas/io/sql.py
index ccb8d2d99..a582d3274 100644
--- a/pandas/io/sql.py
+++ b/pandas/io/sql.py
@@ -572,29 +572,8 @@ class SQLTable(PandasObject):
         else:
             self._execute_create()
 
-    def insert_statement(self, data, conn):
-        """
-        Generate tuple of SQLAlchemy insert statement and any arguments
-        to be executed by connection (via `_execute_insert`).
-
-        Parameters
-        ----------
-        conn : SQLAlchemy connectable(engine/connection)
-            Connection to recieve the data
-        data : list of dict
-            The data to be inserted
-
-        Returns
-        -------
-        SQLAlchemy statement
-            insert statement
-        *, optional
-            Additional parameters to be passed when executing insert statement
-        """
-        dialect = getattr(conn, 'dialect', None)
-        if dialect and getattr(dialect, 'supports_multivalues_insert', False):
-            return self.table.insert(data),
-        return self.table.insert(), data
+    def insert_statement(self):
+        return self.table.insert()
 
     def insert_data(self):
         if self.index is not None:
@@ -633,9 +612,8 @@ class SQLTable(PandasObject):
         return column_names, data_list
 
     def _execute_insert(self, conn, keys, data_iter):
-        """Insert data into this table with database connection"""
         data = [{k: v for k, v in zip(keys, row)} for row in data_iter]
-        conn.execute(*self.insert_statement(data, conn))
+        conn.execute(self.insert_statement(), data)
 
     def insert(self, chunksize=None):
         keys, data_list = self.insert_data()
diff --git a/pandas/tests/io/test_sql.py b/pandas/tests/io/test_sql.py
index 4530cc9d2..f3ab74d37 100644
--- a/pandas/tests/io/test_sql.py
+++ b/pandas/tests/io/test_sql.py
@@ -1665,29 +1665,6 @@ class _TestSQLAlchemy(SQLAlchemyMixIn, PandasSQLTest):
 
         tm.assert_frame_equal(df, expected)
 
-    def test_insert_multivalues(self):
-        # issues addressed
-        # https://github.com/pandas-dev/pandas/issues/14315
-        # https://github.com/pandas-dev/pandas/issues/8953
-
-        db = sql.SQLDatabase(self.conn)
-        df = DataFrame({'A': [1, 0, 0], 'B': [1.1, 0.2, 4.3]})
-        table = sql.SQLTable("test_table", db, frame=df)
-        data = [
-            {'A': 1, 'B': 0.46},
-            {'A': 0, 'B': -2.06}
-        ]
-        statement = table.insert_statement(data, conn=self.conn)[0]
-
-        if self.supports_multivalues_insert:
-            assert statement.parameters == data, (
-                'insert statement should be multivalues'
-            )
-        else:
-            assert statement.parameters is None, (
-                'insert statement should not be multivalues'
-            )
-
 
 class _TestSQLAlchemyConn(_EngineToConnMixin, _TestSQLAlchemy):
 
@@ -1702,7 +1679,6 @@ class _TestSQLiteAlchemy(object):
 
     """
     flavor = 'sqlite'
-    supports_multivalues_insert = True
 
     @classmethod
     def connect(cls):
@@ -1751,7 +1727,6 @@ class _TestMySQLAlchemy(object):
 
     """
     flavor = 'mysql'
-    supports_multivalues_insert = True
 
     @classmethod
     def connect(cls):
@@ -1821,7 +1796,6 @@ class _TestPostgreSQLAlchemy(object):
 
     """
     flavor = 'postgresql'
-    supports_multivalues_insert = True
 
     @classmethod
     def connect(cls):
