commit 3f4eb17eba350b8ed7693bece51309fe46e27690
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Jun 12 23:57:48 2011 -0400

    as_matrix will return right type in exceptional cases. more tests. calling it a day

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 748f4c458..91d4f2e73 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -98,7 +98,7 @@ class DataFrame(PandasGeneric):
     dtype : dtype, default None (infer)
         Data type to force
     copy : boolean, default True
-        Copy data from input arrays
+        Copy data from inputs
 
     Examples
     --------
@@ -124,7 +124,7 @@ class DataFrame(PandasGeneric):
             mgr = data
             if copy and dtype is None:
                 mgr = mgr.copy()
-            elif dtype is not None:
+            if dtype is not None:
                 # no choice but to copy
                 mgr = mgr.cast(dtype)
         elif isinstance(data, DataFrame):
@@ -203,6 +203,10 @@ class DataFrame(PandasGeneric):
         block = make_block(values, columns, columns)
         return BlockManager([block], index, columns)
 
+    def astype(self, dtype):
+        new_data = self._data.cast(dtype)
+        return DataFrame(new_data, copy=False)
+
     @property
     def _constructor(self):
         return DataFrame
@@ -253,7 +257,7 @@ class DataFrame(PandasGeneric):
         """
         Make a copy of this DataFrame
         """
-        return DataFrame(self._data.copy())
+        return DataFrame(self._data.copy(), copy=False)
 
     #----------------------------------------------------------------------
     # Arithmetic methods
@@ -704,7 +708,7 @@ class DataFrame(PandasGeneric):
         cons_data = self._data.consolidate()
         if cons_data is self._data:
             cons_data = cons_data.copy()
-        return DataFrame(cons_data)
+        return DataFrame(cons_data, copy=False)
 
     #----------------------------------------------------------------------
     # Array interface
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 5027f131e..4051b6281 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -81,10 +81,12 @@ class Block(object):
                           self.ref_columns)
 
     def merge(self, other):
-        union_ref = self.ref_columns
-        if not union_ref.equals(other.ref_columns):
-            union_ref = self.ref_columns + other.ref_columns
-        return _merge_blocks([self, other], union_ref)
+        assert(self.ref_columns.equals(other.ref_columns))
+
+        # Not sure whether to allow this or not
+        # if not union_ref.equals(other.ref_columns):
+        #     union_ref = self.ref_columns + other.ref_columns
+        return _merge_blocks([self, other], self.ref_columns)
 
     def reindex_index(self, indexer, notmask, needs_masking):
         """
@@ -603,8 +605,8 @@ def _slice_blocks(blocks, slice_obj):
 def _blocks_to_series_dict(blocks, index=None):
     series_dict = {}
 
-    if index is None:
-        index = Index(np.arange(len(blocks[0])))
+    # if index is None:
+    #     index = Index(np.arange(len(blocks[0])))
 
     for block in blocks:
         for col, vec in zip(block.columns, block.values.T):
@@ -619,7 +621,7 @@ def _interleave(blocks, columns):
     columns = _ensure_index(columns)
 
     result = np.empty((len(blocks[0]), len(columns)), dtype=dtype)
-    result.fill(nan)
+    colmask = np.zeros(len(columns), dtype=bool)
 
     for block in blocks:
         indexer, mask = columns.get_indexer(block.columns)
@@ -627,15 +629,45 @@ def _interleave(blocks, columns):
         if mask.all():
             result[:, indexer] = block.values
         else:
-            result[:, indexer[mask]] = block.values[:, mask]
+            indexer = indexer[mask]
+            result[:, indexer] = block.values[:, mask]
 
+        colmask[indexer] = 1
+
+    # By construction, all of the column should be covered by one of the blocks
+    assert(colmask.all())
     return result
 
 def _interleaved_dtype(blocks):
+    have_int = False
+    have_bool = False
+    have_object = False
+    have_float = False
+
     for block in blocks:
-        if not issubclass(block.dtype.type, np.floating):
-            return object
-    return np.float64
+        if isinstance(block, FloatBlock):
+            have_float = True
+        elif isinstance(block, IntBlock):
+            have_int = True
+        elif isinstance(block, BoolBlock):
+            have_bool = True
+        elif isinstance(block, ObjectBlock):
+            have_object = True
+        else: # pragma: no cover
+            raise Exception('Unrecognized block type')
+
+    have_numeric = have_float or have_int
+
+    if have_object:
+        return np.object_
+    elif have_bool and have_numeric:
+        return np.object_
+    elif have_bool:
+        return np.bool_
+    elif have_int and not have_float:
+        return np.int_
+    else:
+        return np.float64
 
 def _consolidate(blocks, columns):
     """
@@ -660,15 +692,6 @@ def _merge_blocks(blocks, columns):
     new_block = make_block(new_values, new_cols, columns)
     return new_block.reindex_columns_from(columns)
 
-def _xs(blocks, i, copy=True):
-    if copy:
-        return np.concatenate([b[i] for b in blocks])
-    else:
-        if len(blocks) == 1:
-            return blocks[0].values[i]
-        else:
-            raise Exception('cannot get view with mixed-type data')
-
 def _union_block_columns(blocks):
     seen = Index([])
 
diff --git a/pandas/core/tests/test_internals.py b/pandas/core/tests/test_internals.py
index 6ec4599f5..4ede8614a 100644
--- a/pandas/core/tests/test_internals.py
+++ b/pandas/core/tests/test_internals.py
@@ -16,22 +16,26 @@ def assert_block_equal(left, right):
 def get_float_mat(n, k):
     return np.repeat(np.atleast_2d(np.arange(k, dtype=float)), n, axis=0)
 
-TEST_COLS = ['a', 'b', 'c', 'd', 'e', 'f']
+TEST_COLS = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
 N = 10
 
-def get_float_ex():
+def get_float_ex(cols=['a', 'c', 'e']):
     floats = get_float_mat(N, 3)
-    return make_block(floats, ['a', 'c', 'e'], TEST_COLS)
+    return make_block(floats, cols, TEST_COLS)
 
-def get_obj_ex():
+def get_obj_ex(cols=['b', 'd']):
     mat = np.empty((N, 2), dtype=object)
     mat[:, 0] = 'foo'
     mat[:, 1] = 'bar'
-    return make_block(mat, ['b', 'd'], TEST_COLS)
+    return make_block(mat, cols, TEST_COLS)
 
-def get_bool_ex():
+def get_bool_ex(cols=['f']):
     mat = np.ones((N, 1), dtype=bool)
-    return make_block(mat, ['f'], TEST_COLS)
+    return make_block(mat, cols, TEST_COLS)
+
+def get_int_ex(cols=['g']):
+    mat = randn(N, 1).astype(int)
+    return make_block(mat, cols, TEST_COLS)
 
 class TestBlock(unittest.TestCase):
 
@@ -39,6 +43,7 @@ class TestBlock(unittest.TestCase):
         self.fblock = get_float_ex()
         self.oblock = get_obj_ex()
         self.bool_block = get_bool_ex()
+        self.int_block = get_int_ex()
 
     def test_constructor(self):
         pass
@@ -147,7 +152,8 @@ class TestBlockManager(unittest.TestCase):
     def setUp(self):
         self.blocks = [get_float_ex(),
                        get_obj_ex(),
-                       get_bool_ex()]
+                       get_bool_ex(),
+                       get_int_ex()]
         self.mgr = BlockManager.from_blocks(self.blocks, np.arange(N))
 
     def test_attrs(self):
@@ -156,7 +162,7 @@ class TestBlockManager(unittest.TestCase):
 
     def test_contains(self):
         self.assert_('a' in self.mgr)
-        self.assert_('g' not in self.mgr)
+        self.assert_('baz' not in self.mgr)
 
     def test_pickle(self):
         import pickle
@@ -177,14 +183,20 @@ class TestBlockManager(unittest.TestCase):
         pass
 
     def test_set_change_dtype(self):
-        self.mgr.set('g', np.zeros(N, dtype=bool))
+        self.mgr.set('baz', np.zeros(N, dtype=bool))
 
-        self.mgr.set('g', np.repeat('foo', N))
-        self.assert_(self.mgr.get('g').dtype == np.object_)
+        self.mgr.set('baz', np.repeat('foo', N))
+        self.assert_(self.mgr.get('baz').dtype == np.object_)
 
         mgr2 = self.mgr.consolidate()
-        mgr2.set('g', np.repeat('foo', N))
-        self.assert_(mgr2.get('g').dtype == np.object_)
+        mgr2.set('baz', np.repeat('foo', N))
+        self.assert_(mgr2.get('baz').dtype == np.object_)
+
+        mgr2.set('quux', randn(N).astype(int))
+        self.assert_(mgr2.get('quux').dtype == np.int_)
+
+        mgr2.set('quux', randn(N))
+        self.assert_(mgr2.get('quux').dtype == np.float_)
 
     def test_copy(self):
         pass
@@ -192,6 +204,15 @@ class TestBlockManager(unittest.TestCase):
     def test_as_matrix(self):
         pass
 
+    def test_as_matrix_int_bool(self):
+        blocks = [get_bool_ex(['a']), get_bool_ex(['b'])]
+        mgr = BlockManager.from_blocks(blocks, np.arange(len(blocks[0])))
+        self.assert_(mgr.as_matrix().dtype == np.bool_)
+
+        blocks = [get_int_ex(['a']), get_int_ex(['b'])]
+        mgr = BlockManager.from_blocks(blocks, np.arange(len(blocks[0])))
+        self.assert_(mgr.as_matrix().dtype == np.int_)
+
     def test_xs(self):
         pass
 
@@ -208,6 +229,7 @@ class TestBlockManager(unittest.TestCase):
         self.mgr.set('f', randn(N))
         self.mgr.set('d', randn(N))
         self.mgr.set('b', randn(N))
+        self.mgr.set('g', randn(N))
 
         cons = self.mgr.consolidate()
         self.assertEquals(cons.nblocks, 1)
