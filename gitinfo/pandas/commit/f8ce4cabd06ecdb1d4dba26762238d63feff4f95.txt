commit f8ce4cabd06ecdb1d4dba26762238d63feff4f95
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Sun May 31 15:20:09 2020 -0700

    CLN: de-duplicate bits lib timestamps (#34491)

diff --git a/pandas/_libs/tslibs/timestamps.pyx b/pandas/_libs/tslibs/timestamps.pyx
index 48c4afe7d..4e377656f 100644
--- a/pandas/_libs/tslibs/timestamps.pyx
+++ b/pandas/_libs/tslibs/timestamps.pyx
@@ -25,7 +25,7 @@ from pandas._libs.tslibs.util cimport (
     is_timedelta64_object, is_array,
 )
 
-from pandas._libs.tslibs.base cimport ABCTimedelta, ABCTimestamp
+from pandas._libs.tslibs.base cimport ABCTimestamp
 
 from pandas._libs.tslibs cimport ccalendar
 
@@ -41,6 +41,7 @@ from pandas._libs.tslibs.np_datetime cimport (
 )
 from pandas._libs.tslibs.np_datetime import OutOfBoundsDatetime
 from pandas._libs.tslibs.offsets cimport to_offset, is_tick_object, is_offset_object
+from pandas._libs.tslibs.timedeltas cimport is_any_td_scalar, delta_to_nanoseconds
 from pandas._libs.tslibs.timedeltas import Timedelta
 from pandas._libs.tslibs.timezones cimport (
     is_utc, maybe_get_tz, treat_tz_as_pytz, utc_pytz as UTC,
@@ -344,37 +345,15 @@ cdef class _Timestamp(ABCTimestamp):
 
     def __add__(self, other):
         cdef:
-            int64_t other_int, nanos = 0
-
-        if is_timedelta64_object(other):
-            other_int = other.astype('timedelta64[ns]').view('i8')
-            return type(self)(self.value + other_int, tz=self.tzinfo, freq=self.freq)
-
-        elif is_integer_object(other):
-            raise integer_op_not_supported(self)
-
-        elif PyDelta_Check(other):
-            # logic copied from delta_to_nanoseconds to prevent circular import
-            if isinstance(other, ABCTimedelta):
-                # pd.Timedelta
-                nanos = other.value
-            else:
-                nanos = (other.days * 24 * 60 * 60 * 1000000 +
-                         other.seconds * 1000000 +
-                         other.microseconds) * 1000
+            int64_t nanos = 0
 
+        if is_any_td_scalar(other):
+            nanos = delta_to_nanoseconds(other)
             result = type(self)(self.value + nanos, tz=self.tzinfo, freq=self.freq)
             return result
 
-        elif is_tick_object(other):
-            try:
-                nanos = other.nanos
-            except OverflowError as err:
-                raise OverflowError(
-                    f"the add operation between {other} and {self} will overflow"
-                ) from err
-            result = type(self)(self.value + nanos, tz=self.tzinfo, freq=self.freq)
-            return result
+        elif is_integer_object(other):
+            raise integer_op_not_supported(self)
 
         elif is_array(other):
             if other.dtype.kind in ['i', 'u']:
@@ -395,8 +374,7 @@ cdef class _Timestamp(ABCTimestamp):
 
     def __sub__(self, other):
 
-        if (is_timedelta64_object(other) or is_integer_object(other) or
-                PyDelta_Check(other) or is_tick_object(other)):
+        if is_any_td_scalar(other) or is_integer_object(other):
             neg_other = -other
             return self + neg_other
 
@@ -434,7 +412,6 @@ cdef class _Timestamp(ABCTimestamp):
 
             # scalar Timestamp/datetime - Timestamp/datetime -> yields a
             # Timedelta
-            from pandas._libs.tslibs.timedeltas import Timedelta
             try:
                 return Timedelta(self.value - other.value)
             except (OverflowError, OutOfBoundsDatetime) as err:
diff --git a/pandas/tests/scalar/timestamp/test_arithmetic.py b/pandas/tests/scalar/timestamp/test_arithmetic.py
index ed0045bca..eb9932f9a 100644
--- a/pandas/tests/scalar/timestamp/test_arithmetic.py
+++ b/pandas/tests/scalar/timestamp/test_arithmetic.py
@@ -38,14 +38,17 @@ class TestTimestampArithmetic:
             r"\<-?\d+ \* Days\> and \d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} "
             "will overflow"
         )
+        lmsg = "|".join(
+            ["Python int too large to convert to C long", "int too big to convert"]
+        )
 
-        with pytest.raises(OverflowError, match=msg):
+        with pytest.raises(OverflowError, match=lmsg):
             stamp + offset_overflow
 
         with pytest.raises(OverflowError, match=msg):
             offset_overflow + stamp
 
-        with pytest.raises(OverflowError, match=msg):
+        with pytest.raises(OverflowError, match=lmsg):
             stamp - offset_overflow
 
         # xref https://github.com/pandas-dev/pandas/issues/14080
@@ -54,13 +57,13 @@ class TestTimestampArithmetic:
         stamp = Timestamp("2000/1/1")
         offset_overflow = to_offset("D") * 100 ** 5
 
-        with pytest.raises(OverflowError, match=msg):
+        with pytest.raises(OverflowError, match=lmsg):
             stamp + offset_overflow
 
         with pytest.raises(OverflowError, match=msg):
             offset_overflow + stamp
 
-        with pytest.raises(OverflowError, match=msg):
+        with pytest.raises(OverflowError, match=lmsg):
             stamp - offset_overflow
 
     def test_overflow_timestamp_raises(self):
