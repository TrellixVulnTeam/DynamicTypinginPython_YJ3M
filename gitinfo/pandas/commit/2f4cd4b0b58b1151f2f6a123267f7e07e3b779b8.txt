commit 2f4cd4b0b58b1151f2f6a123267f7e07e3b779b8
Author: Phillip Cloud <cpcloud@gmail.com>
Date:   Fri May 10 20:05:18 2013 -0400

    ENH: plot only numeric data
    
    does not raise anymore if there exists some valid data
    
    forgot a test

diff --git a/RELEASE.rst b/RELEASE.rst
index b4f3fa199..5321b7a6b 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -67,6 +67,10 @@ pandas 0.11.1
     to specify custom column names of the returned DataFrame (GH3649_),
     thanks @hoechenberger
   - ``read_html`` no longer performs hard date conversion
+  - Plotting functions now raise a ``TypeError`` before trying to plot anything
+    if the associated objects have have a dtype of ``object`` (GH1818_). This
+    happens before any drawing takes place which elimnates any spurious plots
+    from showing up.
 
 **API Changes**
 
@@ -227,6 +231,7 @@ pandas 0.11.1
 .. _GH3659: https://github.com/pydata/pandas/issues/3659
 .. _GH3649: https://github.com/pydata/pandas/issues/3649
 .. _Gh3616: https://github.com/pydata/pandas/issues/3616
+.. _GH1818: https://github.com/pydata/pandas/issues/1818
 
 pandas 0.11.0
 =============
diff --git a/doc/source/v0.11.1.txt b/doc/source/v0.11.1.txt
index 6ff3afeb6..e450214e4 100644
--- a/doc/source/v0.11.1.txt
+++ b/doc/source/v0.11.1.txt
@@ -62,6 +62,7 @@ API changes
     ``df.iloc[mask]`` will raise a ``ValueError``
 
 
+
 Enhancements
 ~~~~~~~~~~~~
 
@@ -158,6 +159,11 @@ Enhancements
   - ``pd.melt()`` now accepts the optional parameters ``var_name`` and ``value_name``
     to specify custom column names of the returned DataFrame.
 
+  - Plotting functions now raise a ``TypeError`` before trying to plot anything
+    if the associated objects have have a ``dtype`` of ``object`` (GH1818_).
+    This happens before any drawing takes place which elimnates any spurious
+    plots from showing up.
+
 Bug Fixes
 ~~~~~~~~~
 
@@ -227,3 +233,4 @@ on GitHub for a complete list.
 .. _GH3605: https://github.com/pydata/pandas/issues/3605
 .. _GH3606: https://github.com/pydata/pandas/issues/3606
 .. _GH3656: https://github.com/pydata/pandas/issues/3656
+.. _GH1818: https://github.com/pydata/pandas/issues/1818
diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index 197b26014..5a1411ccf 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -187,6 +187,27 @@ class TestSeriesPlots(unittest.TestCase):
         from pandas.tools.plotting import bootstrap_plot
         _check_plot_works(bootstrap_plot, self.ts, size=10)
 
+    @slow
+    def test_all_invalid_plot_data(self):
+        s = Series(list('abcd'))
+        kinds = 'line', 'bar', 'barh', 'kde', 'density'
+
+        for kind in kinds:
+            self.assertRaises(TypeError, s.plot, kind=kind)
+
+    @slow
+    def test_partially_invalid_plot_data(self):
+        s = Series(['a', 'b', 1.0, 2])
+        kinds = 'line', 'bar', 'barh', 'kde', 'density'
+
+        for kind in kinds:
+            self.assertRaises(TypeError, s.plot, kind=kind)
+
+    @slow
+    def test_invalid_kind(self):
+        s = Series([1, 2])
+        self.assertRaises(ValueError, s.plot, kind='aasdf')
+
 
 class TestDataFramePlots(unittest.TestCase):
 
@@ -249,11 +270,9 @@ class TestDataFramePlots(unittest.TestCase):
         plt.close('all')
 
         df = DataFrame({'A': ["x", "y", "z"], 'B': [1,2,3]})
-        ax = df.plot(raise_on_error=False) # it works
+        ax = df.plot()
         self.assert_(len(ax.get_lines()) == 1) #B was plotted
 
-        self.assertRaises(Exception, df.plot)
-
     @slow
     def test_label(self):
         import matplotlib.pyplot as plt
@@ -688,6 +707,26 @@ class TestDataFramePlots(unittest.TestCase):
         ydata = ax.lines[0].get_ydata()
         self.assert_(np.all(ydata == np.array([1.0, 2.0, 3.0])))
 
+    @slow
+    def test_all_invalid_plot_data(self):
+        kinds = 'line', 'bar', 'barh', 'kde', 'density'
+        df = DataFrame(list('abcd'))
+        for kind in kinds:
+            self.assertRaises(TypeError, df.plot, kind=kind)
+
+    @slow
+    def test_partially_invalid_plot_data(self):
+        kinds = 'line', 'bar', 'barh', 'kde', 'density'
+        df = DataFrame(np.random.randn(10, 2), dtype=object)
+        df[np.random.rand(df.shape[0]) > 0.5] = 'a'
+        for kind in kinds:
+            self.assertRaises(TypeError, df.plot, kind=kind)
+
+    @slow
+    def test_invalid_kind(self):
+        df = DataFrame(np.random.randn(10, 2))
+        self.assertRaises(ValueError, df.plot, kind='aasdf')
+
 class TestDataFrameGroupByPlots(unittest.TestCase):
 
     @classmethod
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 751f5fcdb..24b0c9165 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -1,6 +1,5 @@
 # being a bit too dynamic
 # pylint: disable=E1101
-from itertools import izip
 import datetime
 import warnings
 import re
@@ -875,7 +874,27 @@ class MPLPlot(object):
         return (len(self.data.columns), 1)
 
     def _compute_plot_data(self):
-        pass
+        try:
+            # might be a frame
+            numeric_data = self.data._get_numeric_data()
+        except AttributeError:
+            # a series, but no object dtypes allowed!
+            if self.data.dtype == np.object_:
+                raise TypeError('invalid dtype for plotting, please cast to a '
+                                'numeric dtype explicitly if you want to plot')
+
+            numeric_data = self.data
+
+        try:
+            is_empty = numeric_data.empty
+        except AttributeError:
+            is_empty = not len(numeric_data)
+
+        # no empty frames or series allowed
+        if is_empty:
+            raise TypeError('No numeric data to plot')
+
+        self.data = numeric_data
 
     def _make_plot(self):
         raise NotImplementedError
@@ -1204,7 +1223,7 @@ class LinePlot(MPLPlot):
                     else:
                         msg = msg + ('\nConsider setting raise_on_error=False'
                                      'to suppress')
-                        raise Exception(msg)
+                        raise TypeError(msg)
 
             self._make_legend(lines, labels)
 
@@ -1238,7 +1257,7 @@ class LinePlot(MPLPlot):
                 else:
                     msg = msg + ('\nConsider setting raise_on_error=False'
                                  'to suppress')
-                    raise Exception(msg)
+                    raise TypeError(msg)
 
         if isinstance(data, Series):
             ax = self._get_ax(0)  # self.axes[0]
@@ -1610,8 +1629,8 @@ def plot_series(series, label=None, kind='line', use_index=True, rot=None,
         If not passed, uses gca()
     style : string, default matplotlib default
         matplotlib line style to use
-    grid : matplot grid
-    legend: matplot legende
+    grid : matplotlib grid
+    legend: matplotlib legend
     logx : boolean, default False
         For line plots, use log scaling on x axis
     logy : boolean, default False
@@ -1633,6 +1652,8 @@ def plot_series(series, label=None, kind='line', use_index=True, rot=None,
         klass = BarPlot
     elif kind == 'kde':
         klass = KdePlot
+    else:
+        raise ValueError('Invalid chart type given %s' % kind)
 
     """
     If no axis is specified, we check whether there are existing figures.
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index 5d7dc880b..8a8a97a95 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -87,18 +87,14 @@ class TestTSPlot(unittest.TestCase):
 
         idx = date_range('1/1/1987', freq='A', periods=3)
         df = DataFrame({'A': ["x", "y", "z"], 'B': [1,2,3]}, idx)
-        self.assertRaises(Exception, df.plot)
 
         plt.close('all')
         ax = df.plot(raise_on_error=False) # it works
         self.assert_(len(ax.get_lines()) == 1) #B was plotted
 
         plt.close('all')
-        self.assertRaises(Exception, df.A.plot)
 
-        plt.close('all')
-        ax = df['A'].plot(raise_on_error=False) # it works
-        self.assert_(len(ax.get_lines()) == 0)
+        self.assertRaises(TypeError, df['A'].plot)
 
     @slow
     def test_tsplot(self):
