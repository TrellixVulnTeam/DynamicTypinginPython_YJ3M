commit 015e4d9b532d2ff08f941647b1d15c03c7879353
Author: jreback <jeff@reback.net>
Date:   Fri Sep 19 13:03:55 2014 -0400

    BUG: Bug in casting when setting a column in a same-dtype block (GH7704)

diff --git a/doc/source/v0.15.0.txt b/doc/source/v0.15.0.txt
index 627d8f7bd..a4403699c 100644
--- a/doc/source/v0.15.0.txt
+++ b/doc/source/v0.15.0.txt
@@ -912,7 +912,7 @@ Bug Fixes
   a custom line terminator or ``delim_whitespace=True`` (:issue:`8122`).
 
 - Bug in ``read_html`` where empty tables caused a ``StopIteration`` (:issue:`7575`)
-
+- Bug in casting when setting a column in a same-dtype block (:issue:`7704`)
 - Bug in accessing groups from a ``GroupBy`` when the original grouper
   was a tuple (:issue:`8121`).
 - Bug in ``.at`` that would accept integer indexers on a non-integer index and do fallback (:issue:`7814`)
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 2877c2b10..053b92b2a 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -556,9 +556,15 @@ class Block(PandasObject):
             else:
                 dtype = 'infer'
             values = self._try_coerce_and_cast_result(values, dtype)
-            return [make_block(transf(values),
+            block = make_block(transf(values),
                                ndim=self.ndim, placement=self.mgr_locs,
-                               fastpath=True)]
+                               fastpath=True)
+
+            # may have to soft convert_objects here
+            if block.is_object and not self.is_object:
+                block = block.convert(convert_numeric=False)
+
+            return block
         except (ValueError, TypeError) as detail:
             raise
         except Exception as detail:
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index dd6cf773d..b4b8e4263 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -534,6 +534,15 @@ class CheckIndexing(object):
         self.frame['something'] = 2.5
         self.assertEqual(self.frame['something'].dtype, np.float64)
 
+        # GH 7704
+        # dtype conversion on setting
+        df = DataFrame(np.random.rand(30, 3), columns=tuple('ABC'))
+        df['event'] = np.nan
+        df.loc[10,'event'] = 'foo'
+        result = df.get_dtype_counts().order()
+        expected = Series({'float64' : 3, 'object' : 1 }).order()
+        assert_series_equal(result, expected)
+
     def test_setitem_boolean_column(self):
         expected = self.frame.copy()
         mask = self.frame['A'] > 0
