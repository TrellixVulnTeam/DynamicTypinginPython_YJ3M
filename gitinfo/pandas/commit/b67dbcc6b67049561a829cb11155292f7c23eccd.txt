commit b67dbcc6b67049561a829cb11155292f7c23eccd
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Aug 31 17:01:05 2011 -0400

    ENH: sort_index impl and consistency across classes

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index de3353704..acad6cc6a 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -100,6 +100,7 @@ def comp_method(func, name):
 
 class DataFrame(NDFrame):
     _auto_consolidate = True
+    _verbose_info = True
 
     _AXIS_NUMBERS = {
         'index' : 0,
@@ -266,7 +267,7 @@ class DataFrame(NDFrame):
         if len(self.index) < 500 and len(self.columns) <= 10:
             self.to_string(buf=buf)
         else:
-            self.info(buf=buf)
+            self.info(buf=buf, verbose=self._verbose_info)
 
         return buf.getvalue()
 
@@ -1167,16 +1168,40 @@ class DataFrame(NDFrame):
         -------
         sorted : DataFrame
         """
+        by = None
         if column:
             assert(axis == 0)
-            series = self[column].order(na_last=False)
-            sort_index = series.index
+            by = self[column].values
+        return self.sort_index(by=by, axis=axis, ascending=ascending)
+
+    def sort_index(self, axis=0, by=None, ascending=True):
+        """
+        Sort DataFrame either by labels (along either axis) or by the values in
+        a column
+
+        Parameters
+        ----------
+        axis : {0, 1}
+            Sort index/rows versus columns
+        by : object
+            Column name in frame
+        ascending : boolean, default True
+            Sort ascending vs. descending
+
+        Returns
+        -------
+        sorted : DataFrame
+        """
+        labels = self._get_axis(axis)
+
+        if by is not None:
+            if isinstance(by, basestring):
+                assert(axis == 0)
+                by = self[by].values
+
+            assert(len(by) == len(labels))
+            sort_index = Series(by, index=labels).order().index
         else:
-            assert(axis in (0, 1))
-            if axis == 0:
-                labels = self.index
-            else:
-                labels = self.columns
             sort_index = labels.take(labels.argsort())
 
         if not ascending:
@@ -1187,8 +1212,6 @@ class DataFrame(NDFrame):
         else:
             return self.reindex(columns=sort_index)
 
-    order = sort
-
     def sortlevel(self, level=0, axis=0, ascending=True):
         """
         Sort multilevel index by chosen axis and primary level. Data will be
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index a0b6957a5..c993de75c 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -177,7 +177,7 @@ class PandasObject(Picklable):
         new_axis = axis.drop(labels)
         return self.reindex(**{axis_name : new_axis})
 
-    def sort(self, axis=0, ascending=True):
+    def sort_index(self, axis=0, ascending=True):
         """
         Sort object by labels (along an axis)
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 937922841..0b389af17 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -933,6 +933,26 @@ copy : boolean, default False
         self[:] = sortedSeries
         self.index = sortedSeries.index
 
+    def sort_labels(self, ascending=True):
+        """
+        Sort object by labels (along an axis)
+
+        Parameters
+        ----------
+        ascending : boolean, default True
+            Sort ascending vs. descending
+
+        Returns
+        -------
+        sorted_obj : Series
+        """
+        labels = self.index
+        sort_index = labels.argsort()
+        if not ascending:
+            sort_index = sort_index[::-1]
+        new_labels = labels.take(sort_index)
+        return self.reindex(new_labels)
+
     def argsort(self, axis=0, kind='quicksort', order=None):
         """
         Overrides ndarray.argsort. Argsorts the value, omitting NA/null values,
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index 557c077d0..681924b22 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -621,6 +621,7 @@ class SparseDataFrame(DataFrame):
         Default fill_value for converting Series to SparseSeries. Will not
         override SparseSeries passed in
     """
+    _verbose_info = False
     _columns = None
     _series = None
 
@@ -761,20 +762,6 @@ class SparseDataFrame(DataFrame):
         self.default_fill_value = fv
         self.default_kind = kind
 
-    def __repr__(self):
-        """
-        Return a string representation for a particular DataFrame
-        """
-        from cStringIO import StringIO
-
-        buf = StringIO()
-        if len(self.index) < 500 and len(self.columns) < 10:
-            self.toString(buf=buf)
-        else:
-            self.info(buf=buf, verbose=False)
-
-        return buf.getvalue()
-
     def to_dense(self):
         """
         Convert to dense DataFrame
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index cee7594a5..0404f329f 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2025,35 +2025,44 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
 
         # axis=0
         unordered = frame.ix[[3, 2, 4, 1]]
-        sorted_df = unordered.sort()
+        sorted_df = unordered.sort_index()
         expected = frame
         assert_frame_equal(sorted_df, expected)
 
-        sorted_df = unordered.sort(ascending=False)
+        sorted_df = unordered.sort_index(ascending=False)
         expected = frame[::-1]
         assert_frame_equal(sorted_df, expected)
 
         # axis=1
         unordered = frame.ix[:, ['D', 'B', 'C', 'A']]
-        sorted_df = unordered.sort(axis=1)
+        sorted_df = unordered.sort_index(axis=1)
         expected = frame
         assert_frame_equal(sorted_df, expected)
 
-        sorted_df = unordered.sort(axis=1, ascending=False)
+        sorted_df = unordered.sort_index(axis=1, ascending=False)
         expected = frame.ix[:, ::-1]
         assert_frame_equal(sorted_df, expected)
 
         # by column
-        sorted_df = frame.sort(column='A')
+        sorted_df = frame.sort_index(by='A')
         indexer = frame['A'].argsort().values
         expected = frame.ix[frame.index[indexer]]
         assert_frame_equal(sorted_df, expected)
 
-        sorted_df = frame.sort(column='A', ascending=False)
+        sorted_df = frame.sort_index(by='A', ascending=False)
         indexer = indexer[::-1]
         expected = frame.ix[frame.index[indexer]]
         assert_frame_equal(sorted_df, expected)
 
+        # check for now
+        sorted_df = frame.sort(column='A')
+        expected = frame.sort_index(by='A')
+        assert_frame_equal(sorted_df, expected)
+
+        sorted_df = frame.sort(column='A', ascending=False)
+        expected = frame.sort_index(by='A', ascending=False)
+        assert_frame_equal(sorted_df, expected)
+
     def test_combine_first(self):
         # disjoint
         head, tail = self.frame[:5], self.frame[5:]
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index b7a382c1a..5f2901f71 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -57,10 +57,10 @@ class TestMultiLevel(unittest.TestCase):
         repr(self.ymd.T)
 
         buf = StringIO()
-        self.frame.toString(buf=buf)
-        self.ymd.toString(buf=buf)
-        self.frame.T.toString(buf=buf)
-        self.ymd.T.toString(buf=buf)
+        self.frame.to_string(buf=buf)
+        self.ymd.to_string(buf=buf)
+        self.frame.T.to_string(buf=buf)
+        self.ymd.T.to_string(buf=buf)
 
     def test_getitem_simple(self):
         df = self.frame.T
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index e8f3b8259..de49b4d71 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -533,7 +533,7 @@ class TestWidePanel(unittest.TestCase, PanelTests,
         smaller_like = self.panel.reindex_like(smaller)
         assert_panel_equal(smaller, smaller_like)
 
-    def test_sort(self):
+    def test_sort_index(self):
         import random
 
         ritems = list(self.panel.items)
@@ -544,15 +544,21 @@ class TestWidePanel(unittest.TestCase, PanelTests,
         random.shuffle(rminor)
 
         random_order = self.panel.reindex(items=ritems)
-        sorted_panel = random_order.sort(axis=0)
+        sorted_panel = random_order.sort_index(axis=0)
         assert_panel_equal(sorted_panel, self.panel)
 
+        # descending
+        random_order = self.panel.reindex(items=ritems)
+        sorted_panel = random_order.sort_index(axis=0, ascending=False)
+        assert_panel_equal(sorted_panel,
+                           self.panel.reindex(items=self.panel.items[::-1]))
+
         random_order = self.panel.reindex(major=rmajor)
-        sorted_panel = random_order.sort(axis=1)
+        sorted_panel = random_order.sort_index(axis=1)
         assert_panel_equal(sorted_panel, self.panel)
 
         random_order = self.panel.reindex(minor=rminor)
-        sorted_panel = random_order.sort(axis=2)
+        sorted_panel = random_order.sort_index(axis=2)
         assert_panel_equal(sorted_panel, self.panel)
 
     def test_fillna(self):
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 5705cd738..b00f127b3 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -656,6 +656,22 @@ class TestSeries(unittest.TestCase):
         self.assert_(np.array_equal(ts, self.ts.order()))
         self.assert_(np.array_equal(ts.index, self.ts.order().index))
 
+    def test_sort_index(self):
+        import random
+
+        rindex = list(self.ts.index)
+        random.shuffle(rindex)
+
+        random_order = self.ts.reindex(rindex)
+        sorted_series = random_order.sort_index()
+        assert_series_equal(sorted_series, self.ts)
+
+
+        # descending
+        sorted_series = random_order.sort_index(ascending=False)
+        assert_series_equal(sorted_series,
+                            self.ts.reindex(self.ts.index[::-1]))
+
     def test_order(self):
         ts = self.ts.copy()
         ts[:5] = np.NaN
