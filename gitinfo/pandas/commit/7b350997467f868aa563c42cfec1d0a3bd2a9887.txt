commit 7b350997467f868aa563c42cfec1d0a3bd2a9887
Author: Tom Augspurger <TomAugspurger@users.noreply.github.com>
Date:   Thu Jan 2 20:16:39 2020 -0600

    API: Raise when setting name via level (#30574)

diff --git a/doc/source/user_guide/advanced.rst b/doc/source/user_guide/advanced.rst
index 8223b831e..d6f5c0c75 100644
--- a/doc/source/user_guide/advanced.rst
+++ b/doc/source/user_guide/advanced.rst
@@ -565,19 +565,15 @@ When working with an ``Index`` object directly, rather than via a ``DataFrame``,
    mi2 = mi.rename("new name", level=0)
    mi2
 
-.. warning::
 
-   Prior to pandas 1.0.0, you could also set the names of a ``MultiIndex``
-   by updating the name of a level.
+You cannot set the names of the MultiIndex via a level.
 
-   .. code-block:: none
+.. ipython:: python
+   :okexcept:
 
-      >>> mi.levels[0].name = 'name via level'
-      >>> mi.names[0]  # only works for older pandas
-      'name via level'
+   mi.levels[0].name = "name via level"
 
-   As of pandas 1.0, this will *silently* fail to update the names
-   of the MultiIndex. Use :meth:`Index.set_names` instead.
+Use :meth:`Index.set_names` instead.
 
 Sorting a ``MultiIndex``
 ------------------------
diff --git a/doc/source/whatsnew/v1.0.0.rst b/doc/source/whatsnew/v1.0.0.rst
index 0dcb3987f..42fc1f6a0 100755
--- a/doc/source/whatsnew/v1.0.0.rst
+++ b/doc/source/whatsnew/v1.0.0.rst
@@ -260,10 +260,10 @@ For backwards compatibility, you can still *access* the names via the levels.
    mi.levels[0].name
 
 However, it is no longer possible to *update* the names of the ``MultiIndex``
-via the name of the level. The following will **silently** fail to update the
-name of the ``MultiIndex``
+via the level.
 
 .. ipython:: python
+   :okexcept:
 
    mi.levels[0].name = "new name"
    mi.names
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index 28e144a95..c349b64e4 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -240,6 +240,10 @@ class Index(IndexOpsMixin, PandasObject):
     _data: Union[ExtensionArray, np.ndarray]
     _id = None
     _name: Optional[Hashable] = None
+    # MultiIndex.levels previously allowed setting the index name. We
+    # don't allow this anymore, and raise if it happens rather than
+    # failing silently.
+    _no_setting_name: bool = False
     _comparables = ["name"]
     _attributes = ["name"]
     _is_numeric_dtype = False
@@ -1150,6 +1154,12 @@ class Index(IndexOpsMixin, PandasObject):
 
     @name.setter
     def name(self, value):
+        if self._no_setting_name:
+            # Used in MultiIndex.levels to avoid silently ignoring name updates.
+            raise RuntimeError(
+                "Cannot set name on a level of a MultiIndex. Use "
+                "'MultiIndex.set_names' instead."
+            )
         maybe_extract_name(value, None, type(self))
         self._name = value
 
diff --git a/pandas/core/indexes/category.py b/pandas/core/indexes/category.py
index 55f12d9bf..96bfff9a0 100644
--- a/pandas/core/indexes/category.py
+++ b/pandas/core/indexes/category.py
@@ -278,6 +278,7 @@ class CategoricalIndex(Index, accessor.PandasDelegate):
             setattr(result, k, v)
 
         result._reset_identity()
+        result._no_setting_name = False
         return result
 
     # --------------------------------------------------------------------
diff --git a/pandas/core/indexes/datetimes.py b/pandas/core/indexes/datetimes.py
index 523eca855..bc6b8ff84 100644
--- a/pandas/core/indexes/datetimes.py
+++ b/pandas/core/indexes/datetimes.py
@@ -295,6 +295,7 @@ class DatetimeIndex(DatetimeTimedeltaMixin, DatetimeDelegateMixin):
         result = object.__new__(cls)
         result._data = dtarr
         result.name = name
+        result._no_setting_name = False
         # For groupby perf. See note in indexes/base about _index_data
         result._index_data = dtarr._data
         result._reset_identity()
diff --git a/pandas/core/indexes/interval.py b/pandas/core/indexes/interval.py
index c69ea8a5f..b2919b45f 100644
--- a/pandas/core/indexes/interval.py
+++ b/pandas/core/indexes/interval.py
@@ -261,6 +261,7 @@ class IntervalIndex(IntervalMixin, Index, accessor.PandasDelegate):
         result = IntervalMixin.__new__(cls)
         result._data = array
         result.name = name
+        result._no_setting_name = False
         result._reset_identity()
         return result
 
diff --git a/pandas/core/indexes/multi.py b/pandas/core/indexes/multi.py
index f94d012b3..f01c35089 100644
--- a/pandas/core/indexes/multi.py
+++ b/pandas/core/indexes/multi.py
@@ -627,6 +627,9 @@ class MultiIndex(Index):
         result = [
             x._shallow_copy(name=name) for x, name in zip(self._levels, self._names)
         ]
+        for level in result:
+            # disallow midx.levels[0].name = "foo"
+            level._no_setting_name = True
         return FrozenList(result)
 
     @property
diff --git a/pandas/tests/indexes/multi/test_names.py b/pandas/tests/indexes/multi/test_names.py
index 5c3a48c9d..47f2ec4c8 100644
--- a/pandas/tests/indexes/multi/test_names.py
+++ b/pandas/tests/indexes/multi/test_names.py
@@ -124,3 +124,20 @@ def test_get_names_from_levels():
 
     assert idx.levels[0].name == "a"
     assert idx.levels[1].name == "b"
+
+
+def test_setting_names_from_levels_raises():
+    idx = pd.MultiIndex.from_product([["a"], [1, 2]], names=["a", "b"])
+    with pytest.raises(RuntimeError, match="set_names"):
+        idx.levels[0].name = "foo"
+
+    with pytest.raises(RuntimeError, match="set_names"):
+        idx.levels[1].name = "foo"
+
+    new = pd.Series(1, index=idx.levels[0])
+    with pytest.raises(RuntimeError, match="set_names"):
+        new.index.name = "bar"
+
+    assert pd.Index._no_setting_name is False
+    assert pd.Int64Index._no_setting_name is False
+    assert pd.RangeIndex._no_setting_name is False
