commit 6876c170021a4ff2398cfcabace5a718416c4c24
Author: Chang She <changshe@gmail.com>
Date:   Sat Nov 24 00:18:54 2012 -0500

    ENH: tweaks to Series.where #2337

diff --git a/RELEASE.rst b/RELEASE.rst
index 15d444269..7bb80c461 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -30,6 +30,7 @@ pandas 0.10.0
 **New features**
 
   - Add error handling to Series.str.encode/decode (#2276)
+  - Add ``where`` and ``mask`` to Series (#2337)
 
 **API Changes**
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 348132ac7..739a287fe 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -575,15 +575,27 @@ copy : boolean, default False
         -------
         wh: Series
         """
+        if isinstance(cond, Series):
+            cond = cond.reindex(self.index, fill_value=True)
         if not hasattr(cond, 'shape'):
             raise ValueError('where requires an ndarray like object for its '
                              'condition')
+        if len(cond) != len(self):
+            raise ValueError('condition must have same length as series')
 
-        if inplace:
+        ser = self if inplace else self.copy()
+        if not isinstance(other, (list, tuple, np.ndarray)):
             self._set_with(~cond, other)
             return self
 
-        return self._get_values(cond).reindex_like(self).fillna(other)
+        if isinstance(other, Series):
+            other = other.reindex(ser.index)
+        if len(other) != len(ser):
+            raise ValueError('Length of replacements must equal series length')
+
+        np.putmask(ser, ~cond, other)
+
+        return ser
 
     def mask(self, cond):
         """
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 74f329829..0416dab96 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -953,15 +953,26 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         rs  = s.where(cond)
         assert(s.shape == rs.shape)
 
+        rs = s.where(cond[:3], -s)
+        assert_series_equal(rs, s.abs()[:3].append(s[3:]))
+
         self.assertRaises(ValueError, s.where, 1)
+        self.assertRaises(ValueError, s.where, cond[:3].values, -s)
+        self.assertRaises(ValueError, s.where, cond, s[:3].values)
 
     def test_where_inplace(self):
         s = Series(np.random.randn(5))
         cond = s > 0
 
         rs = s.copy()
-        rs.where(cond,inplace=True)
+        rs.where(cond, inplace=True)
         assert_series_equal(rs.dropna(), s[cond])
+        assert_series_equal(rs, s.where(cond))
+
+        rs = s.copy()
+        rs.where(cond, -s, inplace=True)
+        assert_series_equal(rs, s.where(cond, -s))
+
 
     def test_mask(self):
         s = Series(np.random.randn(5))
