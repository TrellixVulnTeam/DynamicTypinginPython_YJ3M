commit d78f4f6a6bb03b0f2ac658cac630456c6971a755
Author: jreback <jeff@reback.net>
Date:   Fri Mar 15 23:15:40 2013 -0400

    PERF: more speedups

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 1c69efe48..5a97b2542 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1314,7 +1314,7 @@ class DataFrame(NDFrame):
                     if float_format:
                         values[imask] = np.array([ float_format % val for val in v[imask] ])
 
-            series[k] = values
+            series[k] = values.tolist()
 
         has_aliases = isinstance(header, (tuple, list, np.ndarray))
         if has_aliases or header:
diff --git a/pandas/lib.pyx b/pandas/lib.pyx
index 5eaa7375d..2bc4eccdb 100644
--- a/pandas/lib.pyx
+++ b/pandas/lib.pyx
@@ -789,47 +789,41 @@ def array_replace_from_nan_rep(ndarray[object, ndim=1] arr, object nan_rep, obje
 
 def write_csv_rows(dict series, list data_index, int nlevels, list cols, object writer):
 
-    cdef int N, j, i
-    cdef list rows, all_cols
+    cdef int N, j, i, ncols
+    cdef list rows
     cdef object val
 
     # In crude testing, N>100 yields little marginal improvement
     N=100
 
     # pre-allocate  rows
-    rows = [[None]*(nlevels+len(cols)) for x in range(N)]
-
-    all_cols = []
-    if len(cols) < 10000: # 10000 as in "usually"
-        all_cols = list(enumerate(cols))
+    ncols = len(cols)
+    rows = [[None]*(nlevels+ncols) for x in range(N)]
 
     j = -1
     if nlevels == 1:
-        for j, idx in enumerate(data_index):
+        for j in range(len(data_index)):
             row = rows[j % N]
-            row[0] = idx
-            for i, col in (all_cols or enumerate(cols)):
-                val = series[col][j]
-                row[nlevels+i] = np.asscalar(val) if isinstance(val,np.number) else val
+            row[0] = data_index[j]
+            for i in range(ncols):
+                row[nlevels+i] = series[cols[i]][j]
 
             if j >= N-1 and j % N == N-1:
                 writer.writerows(rows)
     elif nlevels > 1:
-        for j, idx in enumerate(data_index):
+        for j in range(len(data_index)):
             row = rows[j % N]
-            row[:nlevels] = list(idx)
-            for i, col in (all_cols or enumerate(cols)):
-                val = series[col][j]
-                row[nlevels+i] = np.asscalar(val) if isinstance(val,np.number) else val
+            row[:nlevels] = list(data_index[j])
+            for i in range(ncols):
+                row[nlevels+i] = series[cols[i]][j]
 
             if j >= N-1 and j % N == N-1:
                 writer.writerows(rows)
     else:
-        for j, idx in enumerate(data_index):
+        for j in range(len(data_index)):
             row = rows[j % N]
-            for i, col in (all_cols or enumerate(cols)):
-                val = series[col][j]
-                row[nlevels+i] = np.asscalar(val) if isinstance(val,np.number) else val
+            for i in range(ncols):
+                row[nlevels+i] = series[cols[i]][j]
 
             if j >= N-1 and j % N == N-1:
                 writer.writerows(rows)
