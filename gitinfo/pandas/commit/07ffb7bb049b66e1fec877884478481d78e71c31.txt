commit 07ffb7bb049b66e1fec877884478481d78e71c31
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Dec 2 16:17:11 2011 -0500

    ENH: can pass Series to DataFrame.append, GH #430

diff --git a/RELEASE.rst b/RELEASE.rst
index e3fcced92..03c007e5b 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -27,6 +27,11 @@ pandas 0.6.1
 
 **Release date:** Not yet released
 
+**New features / modules**
+
+  - Can pass Series to DataFrame.append with ignore_index=True for appending a
+    single row (GH #430)
+
 **Improvements to existing features**
   - Improve memory usage of `DataFrame.describe` (do not copy data
     unnecessarily) (PR #425)
@@ -41,6 +46,7 @@ pandas 0.6.1
   - Fix upstream bug causing failure in Series.align with empty Series (GH #434)
   - Function passed to DataFrame.apply can return a list, as long as it's the
     right length. Regression from 0.4 (GH #432)
+  - Don't "accidentally" upcast scalar values when indexing using .ix (GH #
 
 Thanks
 ------
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 1cc70411c..b2cf08f74 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2412,6 +2412,13 @@ class DataFrame(NDFrame):
         -------
         appended : DataFrame
         """
+        if isinstance(other, Series):
+            other = other.reindex(self.columns, copy=False)
+            other = DataFrame(other.values.reshape((1, len(other))),
+                              columns=self.columns)
+            if not ignore_index:
+                raise Exception('Can only append a Series if ignore_index=True')
+
         if not other:
             return self.copy()
         if not self:
@@ -2429,7 +2436,13 @@ class DataFrame(NDFrame):
             return self._append_different_columns(other, new_index)
 
     def _append_different_columns(self, other, new_index):
-        new_columns = self.columns + other.columns
+        indexer = self.columns.get_indexer(other.columns)
+
+        if not (indexer == -1).any():
+            new_columns = self.columns
+        else:
+            new_columns = self.columns.union(other.columns)
+
         new_data = self._append_column_by_column(other)
         return self._constructor(data=new_data, index=new_index,
                                  columns=new_columns)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 5c5ad0359..bf8e2cf7b 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1971,6 +1971,23 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = DataFrame(np.concatenate((arr1, arr2)))
         assert_frame_equal(result, expected)
 
+    def test_append_series(self):
+        df = DataFrame(np.random.randn(5, 4),
+                       columns=['foo', 'bar', 'baz', 'qux'])
+
+        series = df.ix[4]
+        self.assertRaises(Exception, df.append, series)
+
+        result = df.append(series[::-1], ignore_index=True)
+        expected = df.append(DataFrame({0 : series[::-1]}).T,
+                             ignore_index=True)
+        assert_frame_equal(result, expected)
+
+        result = df.append(series[::-1][:3], ignore_index=True)
+        expected = df.append(DataFrame({0 : series[::-1][:3]}).T,
+                             ignore_index=True)
+        assert_frame_equal(result, expected)
+
     def test_append_different_columns(self):
         df = DataFrame({'bools' : np.random.randn(10) > 0,
                         'ints' : np.random.randint(0, 10, 10),
