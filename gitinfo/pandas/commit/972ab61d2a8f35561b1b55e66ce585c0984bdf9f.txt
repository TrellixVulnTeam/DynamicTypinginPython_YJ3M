commit 972ab61d2a8f35561b1b55e66ce585c0984bdf9f
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Tue Feb 25 18:02:41 2020 -0800

    Collect Series.append tests (#32254)

diff --git a/pandas/tests/series/methods/test_append.py b/pandas/tests/series/methods/test_append.py
index 4d64b5b39..4742d6ae3 100644
--- a/pandas/tests/series/methods/test_append.py
+++ b/pandas/tests/series/methods/test_append.py
@@ -2,7 +2,7 @@ import numpy as np
 import pytest
 
 import pandas as pd
-from pandas import DataFrame, DatetimeIndex, Series, date_range
+from pandas import DataFrame, DatetimeIndex, Index, Series, Timestamp, date_range
 import pandas._testing as tm
 
 
@@ -166,3 +166,87 @@ class TestSeriesAppendWithDatetimeIndex:
 
         appended = rng.append(rng2)
         tm.assert_index_equal(appended, rng3)
+
+    def test_series_append_aware(self):
+        rng1 = date_range("1/1/2011 01:00", periods=1, freq="H", tz="US/Eastern")
+        rng2 = date_range("1/1/2011 02:00", periods=1, freq="H", tz="US/Eastern")
+        ser1 = Series([1], index=rng1)
+        ser2 = Series([2], index=rng2)
+        ts_result = ser1.append(ser2)
+
+        exp_index = DatetimeIndex(
+            ["2011-01-01 01:00", "2011-01-01 02:00"], tz="US/Eastern"
+        )
+        exp = Series([1, 2], index=exp_index)
+        tm.assert_series_equal(ts_result, exp)
+        assert ts_result.index.tz == rng1.tz
+
+        rng1 = date_range("1/1/2011 01:00", periods=1, freq="H", tz="UTC")
+        rng2 = date_range("1/1/2011 02:00", periods=1, freq="H", tz="UTC")
+        ser1 = Series([1], index=rng1)
+        ser2 = Series([2], index=rng2)
+        ts_result = ser1.append(ser2)
+
+        exp_index = DatetimeIndex(["2011-01-01 01:00", "2011-01-01 02:00"], tz="UTC")
+        exp = Series([1, 2], index=exp_index)
+        tm.assert_series_equal(ts_result, exp)
+        utc = rng1.tz
+        assert utc == ts_result.index.tz
+
+        # GH#7795
+        # different tz coerces to object dtype, not UTC
+        rng1 = date_range("1/1/2011 01:00", periods=1, freq="H", tz="US/Eastern")
+        rng2 = date_range("1/1/2011 02:00", periods=1, freq="H", tz="US/Central")
+        ser1 = Series([1], index=rng1)
+        ser2 = Series([2], index=rng2)
+        ts_result = ser1.append(ser2)
+        exp_index = Index(
+            [
+                Timestamp("1/1/2011 01:00", tz="US/Eastern"),
+                Timestamp("1/1/2011 02:00", tz="US/Central"),
+            ]
+        )
+        exp = Series([1, 2], index=exp_index)
+        tm.assert_series_equal(ts_result, exp)
+
+    def test_series_append_aware_naive(self):
+        rng1 = date_range("1/1/2011 01:00", periods=1, freq="H")
+        rng2 = date_range("1/1/2011 02:00", periods=1, freq="H", tz="US/Eastern")
+        ser1 = Series(np.random.randn(len(rng1)), index=rng1)
+        ser2 = Series(np.random.randn(len(rng2)), index=rng2)
+        ts_result = ser1.append(ser2)
+
+        expected = ser1.index.astype(object).append(ser2.index.astype(object))
+        assert ts_result.index.equals(expected)
+
+        # mixed
+        rng1 = date_range("1/1/2011 01:00", periods=1, freq="H")
+        rng2 = range(100)
+        ser1 = Series(np.random.randn(len(rng1)), index=rng1)
+        ser2 = Series(np.random.randn(len(rng2)), index=rng2)
+        ts_result = ser1.append(ser2)
+
+        expected = ser1.index.astype(object).append(ser2.index)
+        assert ts_result.index.equals(expected)
+
+    def test_series_append_dst(self):
+        rng1 = date_range("1/1/2016 01:00", periods=3, freq="H", tz="US/Eastern")
+        rng2 = date_range("8/1/2016 01:00", periods=3, freq="H", tz="US/Eastern")
+        ser1 = Series([1, 2, 3], index=rng1)
+        ser2 = Series([10, 11, 12], index=rng2)
+        ts_result = ser1.append(ser2)
+
+        exp_index = DatetimeIndex(
+            [
+                "2016-01-01 01:00",
+                "2016-01-01 02:00",
+                "2016-01-01 03:00",
+                "2016-08-01 01:00",
+                "2016-08-01 02:00",
+                "2016-08-01 03:00",
+            ],
+            tz="US/Eastern",
+        )
+        exp = Series([1, 2, 3, 10, 11, 12], index=exp_index)
+        tm.assert_series_equal(ts_result, exp)
+        assert ts_result.index.tz == rng1.tz
diff --git a/pandas/tests/series/test_timezones.py b/pandas/tests/series/test_timezones.py
index 74363f4c7..e729ff912 100644
--- a/pandas/tests/series/test_timezones.py
+++ b/pandas/tests/series/test_timezones.py
@@ -10,101 +10,12 @@ import pytz
 
 from pandas._libs.tslibs import conversion, timezones
 
-from pandas import DatetimeIndex, Index, Series, Timestamp
+from pandas import Series, Timestamp
 import pandas._testing as tm
 from pandas.core.indexes.datetimes import date_range
 
 
 class TestSeriesTimezones:
-    # -----------------------------------------------------------------
-    # Series.append
-
-    def test_series_append_aware(self):
-        rng1 = date_range("1/1/2011 01:00", periods=1, freq="H", tz="US/Eastern")
-        rng2 = date_range("1/1/2011 02:00", periods=1, freq="H", tz="US/Eastern")
-        ser1 = Series([1], index=rng1)
-        ser2 = Series([2], index=rng2)
-        ts_result = ser1.append(ser2)
-
-        exp_index = DatetimeIndex(
-            ["2011-01-01 01:00", "2011-01-01 02:00"], tz="US/Eastern"
-        )
-        exp = Series([1, 2], index=exp_index)
-        tm.assert_series_equal(ts_result, exp)
-        assert ts_result.index.tz == rng1.tz
-
-        rng1 = date_range("1/1/2011 01:00", periods=1, freq="H", tz="UTC")
-        rng2 = date_range("1/1/2011 02:00", periods=1, freq="H", tz="UTC")
-        ser1 = Series([1], index=rng1)
-        ser2 = Series([2], index=rng2)
-        ts_result = ser1.append(ser2)
-
-        exp_index = DatetimeIndex(["2011-01-01 01:00", "2011-01-01 02:00"], tz="UTC")
-        exp = Series([1, 2], index=exp_index)
-        tm.assert_series_equal(ts_result, exp)
-        utc = rng1.tz
-        assert utc == ts_result.index.tz
-
-        # GH#7795
-        # different tz coerces to object dtype, not UTC
-        rng1 = date_range("1/1/2011 01:00", periods=1, freq="H", tz="US/Eastern")
-        rng2 = date_range("1/1/2011 02:00", periods=1, freq="H", tz="US/Central")
-        ser1 = Series([1], index=rng1)
-        ser2 = Series([2], index=rng2)
-        ts_result = ser1.append(ser2)
-        exp_index = Index(
-            [
-                Timestamp("1/1/2011 01:00", tz="US/Eastern"),
-                Timestamp("1/1/2011 02:00", tz="US/Central"),
-            ]
-        )
-        exp = Series([1, 2], index=exp_index)
-        tm.assert_series_equal(ts_result, exp)
-
-    def test_series_append_aware_naive(self):
-        rng1 = date_range("1/1/2011 01:00", periods=1, freq="H")
-        rng2 = date_range("1/1/2011 02:00", periods=1, freq="H", tz="US/Eastern")
-        ser1 = Series(np.random.randn(len(rng1)), index=rng1)
-        ser2 = Series(np.random.randn(len(rng2)), index=rng2)
-        ts_result = ser1.append(ser2)
-
-        expected = ser1.index.astype(object).append(ser2.index.astype(object))
-        assert ts_result.index.equals(expected)
-
-        # mixed
-        rng1 = date_range("1/1/2011 01:00", periods=1, freq="H")
-        rng2 = range(100)
-        ser1 = Series(np.random.randn(len(rng1)), index=rng1)
-        ser2 = Series(np.random.randn(len(rng2)), index=rng2)
-        ts_result = ser1.append(ser2)
-
-        expected = ser1.index.astype(object).append(ser2.index)
-        assert ts_result.index.equals(expected)
-
-    def test_series_append_dst(self):
-        rng1 = date_range("1/1/2016 01:00", periods=3, freq="H", tz="US/Eastern")
-        rng2 = date_range("8/1/2016 01:00", periods=3, freq="H", tz="US/Eastern")
-        ser1 = Series([1, 2, 3], index=rng1)
-        ser2 = Series([10, 11, 12], index=rng2)
-        ts_result = ser1.append(ser2)
-
-        exp_index = DatetimeIndex(
-            [
-                "2016-01-01 01:00",
-                "2016-01-01 02:00",
-                "2016-01-01 03:00",
-                "2016-08-01 01:00",
-                "2016-08-01 02:00",
-                "2016-08-01 03:00",
-            ],
-            tz="US/Eastern",
-        )
-        exp = Series([1, 2, 3, 10, 11, 12], index=exp_index)
-        tm.assert_series_equal(ts_result, exp)
-        assert ts_result.index.tz == rng1.tz
-
-    # -----------------------------------------------------------------
-
     def test_dateutil_tzoffset_support(self):
         values = [188.5, 328.25]
         tzinfo = tzoffset(None, 7200)
