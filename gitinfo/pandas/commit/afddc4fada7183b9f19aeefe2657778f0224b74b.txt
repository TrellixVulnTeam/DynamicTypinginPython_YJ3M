commit afddc4fada7183b9f19aeefe2657778f0224b74b
Author: Bastiaan <Bastiaan.Bergman@WDC.com>
Date:   Tue Apr 26 09:24:33 2016 -0400

    ENH: GH11128 add weekday_name to DatetimeIndex and .dt
    
    closes #11128   replaces #11813     - [x] tests added / passed   - [x]
    passes ``git diff upstream/master | flake8 --diff``   - [x] whatsnew
    entry    Completed merge of Bahrunnur's PR 'weekday-name'
    Moved 'enhancements' to v0.18.1.txt          Added tests to
    pandas/tests/series/test_datetime_values.py          Added
    weekday_name property producing 'NaT' to NaTType class
    
    Author: Bastiaan <Bastiaan.Bergman@WDC.com>
    Author: Bahrunnur <bahrunnur20@gmail.com>
    
    Closes #12803 from BastiaanBergman/ENH11128 and squashes the following commits:
    
    c579d71 [Bastiaan] Tiny fixes as requested by jreback, GH12803.
    6f246d5 [Bastiaan] Small fixes as requested by jreback, GH12803.
    7b14d5c [Bahrunnur] ENH: GH11128 add weekday_name to DatetimeIndex and .dt

diff --git a/doc/source/api.rst b/doc/source/api.rst
index 2e8aeac66..b33d218be 100644
--- a/doc/source/api.rst
+++ b/doc/source/api.rst
@@ -457,6 +457,7 @@ These can be accessed like ``Series.dt.<property>``.
    Series.dt.weekofyear
    Series.dt.dayofweek
    Series.dt.weekday
+   Series.dt.weekday_name
    Series.dt.dayofyear
    Series.dt.quarter
    Series.dt.is_month_start
@@ -1476,6 +1477,7 @@ Time/Date Components
    DatetimeIndex.week
    DatetimeIndex.dayofweek
    DatetimeIndex.weekday
+   DatetimeIndex.weekday_name
    DatetimeIndex.quarter
    DatetimeIndex.tz
    DatetimeIndex.freq
diff --git a/doc/source/timeseries.rst b/doc/source/timeseries.rst
index 4035d016a..e95e0e4a9 100644
--- a/doc/source/timeseries.rst
+++ b/doc/source/timeseries.rst
@@ -523,6 +523,7 @@ There are several time/date properties that one can access from ``Timestamp`` or
     is_quarter_end,"Logical indicating if last day of quarter (defined by frequency)"
     is_year_start,"Logical indicating if first day of year (defined by frequency)"
     is_year_end,"Logical indicating if last day of year (defined by frequency)"
+    weekday_name,"The name of day in a week (ex: Friday)"
 
 Furthermore, if you have a ``Series`` with datetimelike values, then you can access these properties via the ``.dt`` accessor, see the :ref:`docs <basics.dt_accessors>`
 
diff --git a/doc/source/whatsnew/v0.18.1.txt b/doc/source/whatsnew/v0.18.1.txt
index 5ef508693..f98b151b7 100644
--- a/doc/source/whatsnew/v0.18.1.txt
+++ b/doc/source/whatsnew/v0.18.1.txt
@@ -81,6 +81,7 @@ Other Enhancements
 - ``pd.read_msgpack()`` now supports serializing and de-serializing categoricals with msgpack (:issue:`12573`)
 - ``interpolate()`` now supports ``method='akima'`` (:issue:`7588`).
 - ``Index.take`` now handles ``allow_fill`` and ``fill_value`` consistently (:issue:`12631`)
+- Added ``weekday_name`` as a component to ``DatetimeIndex`` and ``.dt`` accessor. (:issue:`11128`)
 
    .. ipython:: python
 
diff --git a/pandas/tests/series/test_datetime_values.py b/pandas/tests/series/test_datetime_values.py
index 6e9df1661..90ee834aa 100644
--- a/pandas/tests/series/test_datetime_values.py
+++ b/pandas/tests/series/test_datetime_values.py
@@ -25,7 +25,7 @@ class TestSeriesDatetimeValues(TestData, tm.TestCase):
 
     def test_dt_namespace_accessor(self):
 
-        # GH 7207
+        # GH 7207, 11128
         # test .dt namespace accessor
 
         ok_for_base = ['year', 'month', 'day', 'hour', 'minute', 'second',
@@ -37,10 +37,11 @@ class TestSeriesDatetimeValues(TestData, tm.TestCase):
         ok_for_dt = ok_for_base + ['date', 'time', 'microsecond', 'nanosecond',
                                    'is_month_start', 'is_month_end',
                                    'is_quarter_start', 'is_quarter_end',
-                                   'is_year_start', 'is_year_end', 'tz']
+                                   'is_year_start', 'is_year_end', 'tz',
+                                   'weekday_name']
         ok_for_dt_methods = ['to_period', 'to_pydatetime', 'tz_localize',
                              'tz_convert', 'normalize', 'strftime', 'round',
-                             'floor', 'ceil']
+                             'floor', 'ceil', 'weekday_name']
         ok_for_td = ['days', 'seconds', 'microseconds', 'nanoseconds']
         ok_for_td_methods = ['components', 'to_pytimedelta', 'total_seconds',
                              'round', 'floor', 'ceil']
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 94344c5a0..48dfb5eb0 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -62,6 +62,9 @@ def _field_accessor(name, field, docstring=None):
 
             result = tslib.get_start_end_field(
                 values, field, self.freqstr, month_kw)
+        elif field in ['weekday_name']:
+            result = tslib.get_date_name_field(values, field)
+            return self._maybe_mask_results(result)
         else:
             result = tslib.get_date_field(values, field)
 
@@ -209,7 +212,7 @@ class DatetimeIndex(DatelikeOps, TimelikeOps, DatetimeIndexOpsMixin,
                          'daysinmonth', 'date', 'time', 'microsecond',
                          'nanosecond', 'is_month_start', 'is_month_end',
                          'is_quarter_start', 'is_quarter_end', 'is_year_start',
-                         'is_year_end', 'tz', 'freq']
+                         'is_year_end', 'tz', 'freq', 'weekday_name']
     _is_numeric_dtype = False
     _infer_as_myclass = True
 
@@ -1565,6 +1568,12 @@ class DatetimeIndex(DatelikeOps, TimelikeOps, DatetimeIndexOpsMixin,
         'dow',
         "The day of the week with Monday=0, Sunday=6")
     weekday = dayofweek
+
+    weekday_name = _field_accessor(
+        'weekday_name',
+        'weekday_name',
+        "The name of day in a week (ex: Friday)\n\n.. versionadded:: 0.18.1")
+
     dayofyear = _field_accessor(
         'dayofyear',
         'doy',
diff --git a/pandas/tseries/tests/test_base.py b/pandas/tseries/tests/test_base.py
index 3c35fc829..1820e39fd 100644
--- a/pandas/tseries/tests/test_base.py
+++ b/pandas/tseries/tests/test_base.py
@@ -32,7 +32,7 @@ class TestDatetimeIndexOps(Ops):
                                    'is_month_start', 'is_month_end',
                                    'is_quarter_start',
                                    'is_quarter_end', 'is_year_start',
-                                   'is_year_end'],
+                                   'is_year_end', 'weekday_name'],
                                   lambda x: isinstance(x, DatetimeIndex))
 
     def test_ops_properties_basic(self):
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index eea8cf934..b7d925286 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -959,7 +959,7 @@ class TestTimeSeries(tm.TestCase):
     def test_nat_scalar_field_access(self):
         fields = ['year', 'quarter', 'month', 'day', 'hour', 'minute',
                   'second', 'microsecond', 'nanosecond', 'week', 'dayofyear',
-                  'days_in_month', 'daysinmonth', 'dayofweek']
+                  'days_in_month', 'daysinmonth', 'dayofweek', 'weekday_name']
         for field in fields:
             result = getattr(NaT, field)
             self.assertTrue(np.isnan(result))
@@ -1852,7 +1852,7 @@ class TestTimeSeries(tm.TestCase):
         fields = ['dayofweek', 'dayofyear', 'week', 'weekofyear', 'quarter',
                   'days_in_month', 'is_month_start', 'is_month_end',
                   'is_quarter_start', 'is_quarter_end', 'is_year_start',
-                  'is_year_end']
+                  'is_year_end', 'weekday_name']
         for f in fields:
             expected = getattr(idx, f)[-1]
             result = getattr(Timestamp(idx[-1]), f)
@@ -3544,6 +3544,23 @@ class TestDatetime64(tm.TestCase):
         self.assertEqual(dti.is_year_end[0], False)
         self.assertEqual(dti.is_year_end[364], True)
 
+        # GH 11128
+        self.assertEqual(dti.weekday_name[4], u'Monday')
+        self.assertEqual(dti.weekday_name[5], u'Tuesday')
+        self.assertEqual(dti.weekday_name[6], u'Wednesday')
+        self.assertEqual(dti.weekday_name[7], u'Thursday')
+        self.assertEqual(dti.weekday_name[8], u'Friday')
+        self.assertEqual(dti.weekday_name[9], u'Saturday')
+        self.assertEqual(dti.weekday_name[10], u'Sunday')
+
+        self.assertEqual(Timestamp('2016-04-04').weekday_name, u'Monday')
+        self.assertEqual(Timestamp('2016-04-05').weekday_name, u'Tuesday')
+        self.assertEqual(Timestamp('2016-04-06').weekday_name, u'Wednesday')
+        self.assertEqual(Timestamp('2016-04-07').weekday_name, u'Thursday')
+        self.assertEqual(Timestamp('2016-04-08').weekday_name, u'Friday')
+        self.assertEqual(Timestamp('2016-04-09').weekday_name, u'Saturday')
+        self.assertEqual(Timestamp('2016-04-10').weekday_name, u'Sunday')
+
         self.assertEqual(len(dti.year), 365)
         self.assertEqual(len(dti.month), 365)
         self.assertEqual(len(dti.day), 365)
@@ -3561,6 +3578,7 @@ class TestDatetime64(tm.TestCase):
         self.assertEqual(len(dti.is_quarter_end), 365)
         self.assertEqual(len(dti.is_year_start), 365)
         self.assertEqual(len(dti.is_year_end), 365)
+        self.assertEqual(len(dti.weekday_name), 365)
 
         dti = DatetimeIndex(freq='BQ-FEB', start=datetime(1998, 1, 1),
                             periods=4)
diff --git a/pandas/tslib.pyx b/pandas/tslib.pyx
index 98e6f1d1c..262d83d6a 100644
--- a/pandas/tslib.pyx
+++ b/pandas/tslib.pyx
@@ -398,6 +398,11 @@ class Timestamp(_Timestamp):
     def dayofweek(self):
         return self.weekday()
 
+    @property
+    def weekday_name(self):
+        out = get_date_name_field(np.array([self.value], dtype=np.int64), 'weekday_name')
+        return out[0]
+
     @property
     def dayofyear(self):
         return self._get_field('doy')
@@ -667,7 +672,7 @@ class NaTType(_NaT):
 
 fields = ['year', 'quarter', 'month', 'day', 'hour',
           'minute', 'second', 'millisecond', 'microsecond', 'nanosecond',
-          'week', 'dayofyear', 'days_in_month', 'daysinmonth', 'dayofweek']
+          'week', 'dayofyear', 'days_in_month', 'daysinmonth', 'dayofweek', 'weekday_name']
 for field in fields:
     prop = property(fget=lambda self: np.nan)
     setattr(NaTType, field, prop)
@@ -4390,6 +4395,38 @@ def get_start_end_field(ndarray[int64_t] dtindex, object field, object freqstr=N
 
     raise ValueError("Field %s not supported" % field)
 
+@cython.wraparound(False)
+@cython.boundscheck(False)
+def get_date_name_field(ndarray[int64_t] dtindex, object field):
+    '''
+    Given a int64-based datetime index, return array of strings of date
+    name based on requested field (e.g. weekday_name)
+    '''
+    cdef:
+        _TSObject ts
+        Py_ssize_t i, count = 0
+        ndarray[object] out
+        pandas_datetimestruct dts
+        int dow
+
+    _dayname = np.array(
+        ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
+         dtype=np.object_ )
+
+    count = len(dtindex)
+    out = np.empty(count, dtype=object)
+
+    if field == 'weekday_name':
+        for i in range(count):
+            if dtindex[i] == NPY_NAT: out[i] = np.nan; continue
+
+            pandas_datetime_to_datetimestruct(dtindex[i], PANDAS_FR_ns, &dts)
+            dow = dayofweek(dts.year, dts.month, dts.day)
+            out[i] = _dayname[dow]
+        return out
+
+    raise ValueError("Field %s not supported" % field)
+
 
 cdef inline int m8_weekday(int64_t val):
     ts = convert_to_tsobject(val, None, None)
