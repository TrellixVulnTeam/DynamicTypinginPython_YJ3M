commit 19f4380d69a3b6c417de5143664cbeb01f89b06d
Author: Chang She <chang@lambdafoundry.com>
Date:   Thu May 24 16:27:57 2012 -0400

    TST: adding to test coverage for core modules and minor fixes

diff --git a/pandas/core/common.py b/pandas/core/common.py
index d75b0ee91..17615a791 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -140,21 +140,6 @@ def _unpickle_array(bytes):
     arr = read_array(BytesIO(bytes))
     return arr
 
-def _take_1d_datetime(arr, indexer, out, fill_value=np.nan):
-    view = arr.view(np.int64)
-    outview = out.view(np.int64)
-    _algos.take_1d_bool(view, indexer, outview, fill_value=fill_value)
-
-def _take_2d_axis0_datetime(arr, indexer, out, fill_value=np.nan):
-    view = arr.view(np.int64)
-    outview = out.view(np.int64)
-    _algos.take_1d_bool(view, indexer, outview, fill_value=fill_value)
-
-def _take_2d_axis1_datetime(arr, indexer, out, fill_value=np.nan):
-    view = arr.view(np.uint8)
-    outview = out.view(np.uint8)
-    _algos.take_1d_bool(view, indexer, outview, fill_value=fill_value)
-
 def _view_wrapper(f, wrap_dtype, na_override=None):
     def wrapper(arr, indexer, out, fill_value=np.nan):
         if na_override is not None and np.isnan(fill_value):
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index c109cf185..01b46afe4 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -239,7 +239,7 @@ def _flex_comp_method(op, name, default_axis='columns'):
                 result[mask] = op(xrav[mask], y)
 
             if op == operator.ne:
-                np.putmask(result, -mask, False)
+                np.putmask(result, -mask, True)
             else:
                 np.putmask(result, -mask, False)
             result = result.reshape(x.shape)
@@ -1451,7 +1451,7 @@ class DataFrame(NDFrame):
                 return self
             return self._constructor(data=self.values.T, index=self.columns,
                                      columns=self.index, copy=False)
-        else:  # pragma: no cover
+        else:
             raise ValueError('Axis numbers must be in (0, 1)')
 
     #----------------------------------------------------------------------
@@ -2633,6 +2633,9 @@ class DataFrame(NDFrame):
         """
         from pandas.core.groupby import _lexsort_indexer
 
+        if axis not in [0, 1]:
+            raise ValueError('Axis must be 0 or 1, got %s' % str(axis))
+
         labels = self._get_axis(axis)
 
         if by is not None:
@@ -2654,8 +2657,7 @@ class DataFrame(NDFrame):
                                                       copy=False)
             elif axis == 0:
                 self._data = self._data.take(indexer)
-            else:
-                raise ValueError('Axis must be 0 or 1, got %s' % str(axis))
+
             self._clear_item_cache()
             return self
         else:
@@ -2906,7 +2908,8 @@ class DataFrame(NDFrame):
                 else:
                     return self._constructor(new_data)
 
-            raise ValueError('Invalid to_replace type: %s' % type(to_replace))
+            raise ValueError('Invalid to_replace type: %s' %
+                             type(to_replace)) # pragma: no cover
 
     def _interpolate(self, to_replace, method, axis, inplace, limit):
         if self._is_mixed_type and axis == 1:
@@ -3608,7 +3611,7 @@ class DataFrame(NDFrame):
                 try:
                     if hasattr(e, 'args'):
                         e.args = e.args + ('occurred at index %s' % str(k),)
-                except NameError:
+                except NameError: # pragma: no cover
                     # no k defined yet
                     pass
                 raise
diff --git a/pandas/core/series.py b/pandas/core/series.py
index bb74dddbb..b530039bf 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -137,8 +137,9 @@ def _bool_method(op, name):
                 y = lib.list_to_object_array(y)
 
             if isinstance(y, np.ndarray):
-                if x.dtype == np.bool_ and y.dtype == np.bool_:
-                    result = op(x, y)
+                if (x.dtype == np.bool_ and
+                    y.dtype == np.bool_): # pragma: no cover
+                    result = op(x, y) # when would this be hit?
                 else:
                     x = com._ensure_object(x)
                     y = com._ensure_object(y)
@@ -2642,7 +2643,7 @@ def _sanitize_array(data, index, dtype=None, copy=False,
             try:
                 subarr = _try_cast(data)
             except Exception:
-                if raise_cast_failure:
+                if raise_cast_failure: # pragma: no cover
                     raise
                 subarr = np.array(data, dtype=object, copy=copy)
                 subarr = lib.maybe_convert_objects(subarr)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 405814098..136b58799 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2472,6 +2472,9 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = self.frame2 * 2
         assert_frame_equal(added, expected)
 
+        df = DataFrame({'a' : ['a', None, 'b']})
+        assert_frame_equal(df + df, DataFrame({'a' : ['aa', np.nan, 'bb']}))
+
     def test_operators_none_as_na(self):
         df = DataFrame({"col1": [2,5.0,123,None],
                         "col2": [1,2,3,4]})
@@ -2645,6 +2648,9 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
             assert_frame_equal(col_eq, -col_ne)
             assert_frame_equal(idx_eq, -idx_ne)
             assert_frame_equal(idx_eq, df.T.eq(idx_ser).T)
+            assert_frame_equal(col_eq, df.eq(list(col_ser)))
+            assert_frame_equal(idx_eq, df.eq(Series(idx_ser), axis=0))
+            assert_frame_equal(idx_eq, df.eq(list(idx_ser), axis=0))
 
             idx_gt = df.gt(idx_ser, axis=0)
             col_gt = df.gt(col_ser)
@@ -2712,6 +2718,18 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         assert_frame_equal(df.ge(np.nan), df >= np.nan)
         assert_frame_equal(df.le(np.nan), df <= np.nan)
 
+        # complex
+        arr = np.array([np.nan, 1j, 6, None])
+        arr2 = np.array([2j, np.nan, 7, None])
+        df = DataFrame({'a' : arr})
+        df2 = DataFrame({'a' : arr2})
+        rs = df.gt(df2)
+        self.assert_(not rs.values.any())
+        rs = df.ne(df2)
+        self.assert_(rs.values.all())
+
+
+
     def test_arith_flex_series(self):
         df = self.simple
 
@@ -3760,6 +3778,10 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = self.mixed_frame.fillna(value=0)
         assert_frame_equal(result, expected)
 
+        tsframe = self.tsframe.copy()
+        tsframe.replace([nan], [0], inplace=True)
+        assert_frame_equal(tsframe, self.tsframe.fillna(0))
+
     def test_replace(self):
         self.tsframe['A'][:5] = nan
         self.tsframe['A'][-5:] = nan
@@ -3781,7 +3803,12 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         assert_frame_equal(result, expected)
         assert_frame_equal(result.replace(-1e8, nan), self.mixed_frame)
 
+        # empty
+        df = DataFrame(index=['a', 'b'])
+        assert_frame_equal(df, df.replace(5, 7))
+
     def test_replace_input_formats(self):
+        # both dicts
         to_rep = {'A' : np.nan, 'B' : 0, 'C' : ''}
         values = {'A' : 0, 'B' : -1, 'C' : 'missing'}
         df = DataFrame({'A' : [np.nan, 0, np.inf], 'B' : [0, 2, 5],
@@ -3792,6 +3819,16 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
             expected[k] = v.replace(to_rep[k], values[k])
         assert_frame_equal(filled, DataFrame(expected))
 
+        # dict to scalar
+        filled = df.replace(to_rep, 0)
+        expected = {}
+        for k, v in df.iteritems():
+            expected[k] = v.replace(to_rep[k], 0)
+        assert_frame_equal(filled, DataFrame(expected))
+
+        self.assertRaises(ValueError, df.replace, to_rep, [np.nan, 0, ''])
+
+        # scalar to dict
         values = {'A' : 0, 'B' : -1, 'C' : 'missing'}
         df = DataFrame({'A' : [np.nan, 0, np.nan], 'B' : [0, 2, 5],
                         'C' : ['', 'asdf', 'fd']})
@@ -3801,6 +3838,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
             expected[k] = v.replace(np.nan, values[k])
         assert_frame_equal(filled, DataFrame(expected))
 
+        # list to list
         to_rep = [np.nan, 0, '']
         values = [-2, -1, 'missing']
         result = df.replace(to_rep, values)
@@ -3809,6 +3847,9 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
             expected.replace(to_rep[i], values[i], inplace=True)
         assert_frame_equal(result, expected)
 
+        self.assertRaises(ValueError, df.replace, to_rep, values[1:])
+
+        # list to scalar
         to_rep = [np.nan, 0, '']
         result = df.replace(to_rep, -1)
         expected = df.copy()
@@ -4680,6 +4721,12 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
             self.assertEqual(len(e.args), 2)
             self.assertEqual(e.args[1], 'occurred at index 4')
 
+    def test_swapaxes(self):
+        df = DataFrame(np.random.randn(10, 5))
+        assert_frame_equal(df.T, df.swapaxes(0, 1))
+        assert_frame_equal(df.T, df.swapaxes(1, 0))
+        assert_frame_equal(df, df.swapaxes(0, 0))
+        self.assertRaises(ValueError, df.swapaxes, 2, 5)
 
     def test_apply_convert_objects(self):
         data = DataFrame({'A' : ['foo', 'foo', 'foo', 'foo',
@@ -4827,6 +4874,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = frame.sort_index(by=['A', 'B'], ascending=False)
         assert_frame_equal(sorted_df, expected)
 
+        self.assertRaises(ValueError, frame.sort_index, axis=2, inplace=True)
+
     def test_sort_index_multicolumn(self):
         import random
         A = np.arange(5).repeat(20)
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 66553f74c..48750b3f3 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -7,6 +7,7 @@ import unittest
 import nose
 
 import numpy as np
+from numpy.testing import assert_array_equal
 
 from pandas.core.factor import Factor
 from pandas.core.index import Index, Int64Index, MultiIndex
@@ -64,6 +65,13 @@ class TestIndex(unittest.TestCase):
         tm.assert_contains_all(arr, index)
         self.assert_(np.array_equal(self.strIndex, index))
 
+        # copy
+        arr = np.array(self.strIndex)
+        index = Index(arr, copy=True, name='name')
+        self.assert_(isinstance(index, Index))
+        self.assert_(index.name == 'name')
+        assert_array_equal(arr, index)
+
         # what to do here?
         # arr = np.array(5.)
         # self.assertRaises(Exception, arr.view, Index)
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 581613bc7..7ef73b9e8 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1256,10 +1256,6 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         check_comparators(self.ts, 5)
         check_comparators(self.ts, self.ts + 1)
 
-        #bool_ser = self.ts > 0
-        #check_comparators(bool_ser, list(bool_ser[::2]))
-
-
     def test_operators_empty_int_corner(self):
         s1 = Series([], [], dtype=np.int32)
         s2 = Series({'x' : 0.})
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index 794618d52..3b01438cb 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -1049,6 +1049,9 @@ class TestPeriodIndex(TestCase):
         exp_index = _get_with_delta(delta)
         self.assert_(result.columns.equals(exp_index))
 
+        # invalid axis
+        self.assertRaises(ValueError, df.to_timestamp, axis=2)
+
     def test_index_duplicate_periods(self):
         # monotonic
         idx = PeriodIndex([2000, 2007, 2007, 2009, 2009], freq='A-JUN')
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index c7637bc98..2acff3740 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -712,7 +712,6 @@ class TestTimeSeries(unittest.TestCase):
         pts = df.to_period('M')
         self.assert_(pts.index.equals(exp.index.asfreq('M')))
 
-        """ Put me back in after fixing DataFrame bug
         df = df.T
         pts = df.to_period(axis=1)
         exp = df.copy()
@@ -721,7 +720,6 @@ class TestTimeSeries(unittest.TestCase):
 
         pts = df.to_period('M', axis=1)
         self.assert_(pts.columns.equals(exp.columns.asfreq('M')))
-        """
 
     def test_timestamp_fields(self):
         # extra fields from DatetimeIndex like quarter and week
