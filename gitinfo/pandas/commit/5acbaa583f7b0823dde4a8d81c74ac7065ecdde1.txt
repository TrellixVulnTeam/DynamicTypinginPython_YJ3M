commit 5acbaa583f7b0823dde4a8d81c74ac7065ecdde1
Author: Adam Klein <adamklein@gmail.com>
Date:   Tue Feb 28 20:23:58 2012 -0500

    ENH: added numkeys to grouper object per Wes comments

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 460c239fd..1d3171ba4 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -426,6 +426,12 @@ class Grouper(object):
     def __iter__(self):
         return iter(self.indices)
 
+    def numkeys(self):
+        try:
+            return len(self.groupings)
+        except:
+            return 1
+
     def get_iterator(self, data, axis=0):
         """
         Groupby iterator
@@ -718,12 +724,12 @@ def _generate_time_binner(dtindex, offset,
         return np.arange(first.value, last.value+1, offset.us_stride(),
                          dtype=np.int64)
 
-    return DatetimeIndex(offset=offset, 
+    return DatetimeIndex(offset=offset,
                          start=first, end=last, periods=nperiods)
 
 class Tinterval(Grouper, CustomGrouper):
     """
-    Custom groupby class for time-interval grouping 
+    Custom groupby class for time-interval grouping
 
     Parameters
     ----------
@@ -785,10 +791,6 @@ class Tinterval(Grouper, CustomGrouper):
         self.bins = bins
         self.binlabels = labels.view('M8[us]')
 
-    @cache_readonly
-    def groupings(self):
-        return [Grouping(self.obj.index, self, name="Binner")]
-
     @cache_readonly
     def ngroups(self):
         return len(self.binlabels)
@@ -1067,7 +1069,7 @@ class SeriesGroupBy(GroupBy):
         if hasattr(func_or_funcs,'__iter__'):
             ret = self._aggregate_multiple_funcs(func_or_funcs)
         else:
-            if len(self.grouper.groupings) > 1:
+            if self.grouper.numkeys() > 1:
                 return self._python_agg_general(func_or_funcs, *args, **kwargs)
 
             try:
@@ -1107,7 +1109,7 @@ class SeriesGroupBy(GroupBy):
         key_names = self.grouper.names
 
         def _get_index():
-            if len(self.grouper.groupings) > 1:
+            if self.grouper.numkeys() > 1:
                 index = MultiIndex.from_tuples(keys, names=key_names)
             else:
                 ping = self.grouper.groupings[0]
@@ -1323,7 +1325,7 @@ class DataFrameGroupBy(GroupBy):
         elif isinstance(arg, list):
             return self._aggregate_multiple_funcs(arg)
         else:
-            if len(self.grouper.groupings) > 1:
+            if self.grouper.numkeys() > 1:
                 return self._python_agg_general(arg, *args, **kwargs)
             else:
                 result = self._aggregate_generic(arg, *args, **kwargs)
@@ -1367,7 +1369,7 @@ class DataFrameGroupBy(GroupBy):
         return result
 
     def _aggregate_generic(self, func, *args, **kwargs):
-        assert(len(self.grouper.groupings) == 1)
+        assert(self.grouper.numkeys() == 1)
 
         axis = self.axis
         obj = self._obj_with_exclusions
diff --git a/pandas/tests/test_datetime64.py b/pandas/tests/test_datetime64.py
index 6f29747a8..bb68257b0 100644
--- a/pandas/tests/test_datetime64.py
+++ b/pandas/tests/test_datetime64.py
@@ -295,7 +295,7 @@ class TestDatetime64(unittest.TestCase):
         self.assert_((s[48:54] == -3).all())
 
     def test_custom_grouper(self):
-        from pandas.core.datetools import Minute 
+        from pandas.core.datetools import Minute
         from pandas.core.groupby import Tinterval
         from pandas.core.frame import DataFrame
 
@@ -303,7 +303,7 @@ class TestDatetime64(unittest.TestCase):
                             end=datetime(2005,1,10))
 
         data = np.array([1]*len(dti))
-        s = Series(data, index=dti) 
+        s = Series(data, index=dti)
 
         b = Tinterval(Minute(5))
         g = s.groupby(b)
@@ -318,10 +318,9 @@ class TestDatetime64(unittest.TestCase):
         expect = Series(arr, index=idx)
 
         result = g.agg(np.sum)
-        
         assert_series_equal(result, expect)
 
-        data = np.random.rand(len(dti), 10) 
+        data = np.random.rand(len(dti), 10)
         df = DataFrame(data, index=dti)
         r = df.groupby(b).agg(np.sum)
 
