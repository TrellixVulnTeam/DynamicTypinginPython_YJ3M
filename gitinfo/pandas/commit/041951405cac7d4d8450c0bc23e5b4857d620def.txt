commit 041951405cac7d4d8450c0bc23e5b4857d620def
Author: jreback <jeff@reback.net>
Date:   Thu Dec 13 10:25:42 2012 -0500

    BUG: fixed versioning of the data, not reporting correct warnings

diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 1bcb311dc..9361ad4df 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -1149,7 +1149,7 @@ class Table(object):
     def __init__(self, parent, group, **kwargs):
         self.parent      = parent
         self.group       = group
-        self.version     = getattr(group._v_attrs,'version',None)
+        self.version     = getattr(group._v_attrs,'pandas_version',None)
         self.index_axes     = []
         self.non_index_axes = []
         self.values_axes    = []
@@ -1257,6 +1257,12 @@ class Table(object):
         self.attrs.values_cols = self.values_cols()
         self.attrs.non_index_axes = self.non_index_axes
 
+    def validate_version(self, where = None):
+        """ are we trying to operate on an old version? """
+        if where is not None:
+            if self.version is None or float(self.version) < 0.1:
+                warnings.warn("where criteria is being ignored as we this version is too old (or not-defined) [%s]" % self.version, IncompatibilityWarning)
+
     def validate(self):
         """ raise if we have an incompitable table type with the current """
         et = getattr(self.attrs,'table_type',None)
@@ -1325,6 +1331,9 @@ class Table(object):
     def read_axes(self, where):
         """ create and return the axes sniffed from the table: return boolean for success """
 
+        # validate the version
+        self.validate_version(where)
+
         # infer the data kind
         if not self.infer_axes(): return False
 
@@ -1523,11 +1532,6 @@ class LegacyTable(Table):
         _dm = create_debug_memory(self.parent)
         _dm('start')
 
-        # are we trying to operate on an old version?
-        if where is not None:
-            if self.version is None or self.version < 0.1:
-                warnings.warn("where criteria is being ignored as we this version is too old (or not-defined) [%s]" % self.version, IncompatibilityWarning)
-
         if not self.read_axes(where): return None
 
         _dm('read_axes')
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index d9030b15d..9cbc7d33d 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -97,6 +97,13 @@ class TestHDFStore(unittest.TestCase):
         self.assert_(self.store.root.b._v_attrs.pandas_version == '0.10')
         self.assert_(self.store.root.df1._v_attrs.pandas_version == '0.10')
 
+        # write a file and wipe its versioning
+        self.store.remove('df2')
+        self.store.append('df2', df)
+        self.store.get_node('df2')._v_attrs.pandas_version = None
+        self.store.select('df2')
+        self.store.select('df2', [ Term('index','>',df.index[2]) ])
+
     def test_meta(self):
         raise nose.SkipTest('no meta')
 
