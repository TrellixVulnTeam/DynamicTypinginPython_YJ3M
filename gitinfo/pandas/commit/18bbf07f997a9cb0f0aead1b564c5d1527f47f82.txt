commit 18bbf07f997a9cb0f0aead1b564c5d1527f47f82
Author: Chang She <changshe@gmail.com>
Date:   Sat Jul 14 18:15:41 2012 -0400

    TST: mixed types for string methods

diff --git a/pandas/tests/test_strings.py b/pandas/tests/test_strings.py
index 4a5b4c3e6..45b830b90 100644
--- a/pandas/tests/test_strings.py
+++ b/pandas/tests/test_strings.py
@@ -61,6 +61,16 @@ class TestStringMethods(unittest.TestCase):
         self.assert_(isinstance(result, Series))
         tm.assert_almost_equal(result, exp)
 
+        #mixed
+        mixed = ['a', NA, 'b', True, datetime.today(), 'foo', None, 1, 2.]
+        rs = strings.str_count(mixed, 'a')
+        xp = [1, NA, 0, NA, NA, 0, NA, NA, NA]
+        tm.assert_almost_equal(rs, xp)
+
+        rs = Series(mixed).str.count('a')
+        self.assert_(isinstance(rs, Series))
+        tm.assert_almost_equal(rs, xp)
+
     def test_contains(self):
         values = ['foo', NA, 'fooommm__foo', 'mmm_']
         pat = 'mmm[_]+'
@@ -75,6 +85,16 @@ class TestStringMethods(unittest.TestCase):
         self.assert_(result.dtype == np.bool_)
         tm.assert_almost_equal(result, expected)
 
+        #mixed
+        mixed = ['a', NA, 'b', True, datetime.today(), 'foo', None, 1, 2.]
+        rs = strings.str_contains(mixed, 'o')
+        xp = [False, NA, False, NA, NA, True, NA, NA, NA]
+        tm.assert_almost_equal(rs, xp)
+
+        rs = Series(mixed).str.contains('o')
+        self.assert_(isinstance(rs, Series))
+        tm.assert_almost_equal(rs, xp)
+
     def test_startswith(self):
         values = Series(['om', NA, 'foo_nom', 'nom', 'bar_foo', NA, 'foo'])
 
@@ -82,6 +102,16 @@ class TestStringMethods(unittest.TestCase):
         exp = Series([False, NA, True, False, False, NA, True])
         tm.assert_series_equal(result, exp)
 
+        #mixed
+        mixed = ['a', NA, 'b', True, datetime.today(), 'foo', None, 1, 2.]
+        rs = strings.str_startswith(mixed, 'f')
+        xp = [False, NA, False, NA, NA, True, NA, NA, NA]
+        tm.assert_almost_equal(rs, xp)
+
+        rs = Series(mixed).str.startswith('f')
+        self.assert_(isinstance(rs, Series))
+        tm.assert_almost_equal(rs, xp)
+
     def test_endswith(self):
         values = Series(['om', NA, 'foo_nom', 'nom', 'bar_foo', NA, 'foo'])
 
@@ -89,6 +119,16 @@ class TestStringMethods(unittest.TestCase):
         exp = Series([False, NA, False, False, True, NA, True])
         tm.assert_series_equal(result, exp)
 
+        #mixed
+        mixed = ['a', NA, 'b', True, datetime.today(), 'foo', None, 1, 2.]
+        rs = strings.str_endswith(mixed, 'f')
+        xp = [False, NA, False, NA, NA, False, NA, NA, NA]
+        tm.assert_almost_equal(rs, xp)
+
+        rs = Series(mixed).str.endswith('f')
+        self.assert_(isinstance(rs, Series))
+        tm.assert_almost_equal(rs, xp)
+
     def test_lower_upper(self):
         values = Series(['om', NA, 'nom', 'nom'])
 
@@ -99,6 +139,15 @@ class TestStringMethods(unittest.TestCase):
         result = result.str.lower()
         tm.assert_series_equal(result, values)
 
+        #mixed
+        mixed = Series(['a', NA, 'b', True, datetime.today(), 'foo', None,
+                        1, 2.])
+        mixed = mixed.str.upper()
+        rs = Series(mixed).str.lower()
+        xp = ['a', NA, 'b', NA, NA, 'foo', NA, NA, NA]
+        self.assert_(isinstance(rs, Series))
+        tm.assert_almost_equal(rs, xp)
+
     def test_replace(self):
         values = Series(['fooBAD__barBAD', NA])
 
@@ -110,6 +159,15 @@ class TestStringMethods(unittest.TestCase):
         exp = Series(['foobarBAD', NA])
         tm.assert_series_equal(result, exp)
 
+        #mixed
+        mixed = Series(['aBAD', NA, 'bBAD', True, datetime.today(), 'fooBAD',
+                        None, 1, 2.])
+
+        rs = Series(mixed).str.replace('BAD[_]*', '')
+        xp = ['a', NA, 'b', NA, NA, 'foo', NA, NA, NA]
+        self.assert_(isinstance(rs, Series))
+        tm.assert_almost_equal(rs, xp)
+
     def test_repeat(self):
         values = Series(['a', 'b', NA, 'c', NA, 'd'])
 
@@ -121,6 +179,17 @@ class TestStringMethods(unittest.TestCase):
         exp = Series(['a', 'bb', NA, 'cccc', NA, 'dddddd'])
         tm.assert_series_equal(result, exp)
 
+        """
+        #mixed
+        mixed = Series(['a', NA, 'b', True, datetime.today(), 'foo',
+                        None, 1, 2.])
+
+        rs = Series(mixed).str.repeat(3)
+        xp = ['aaa', NA, 'bbb', NA, NA, 'foofoofoo', NA, NA, NA]
+        self.assert_(isinstance(rs, Series))
+        tm.assert_almost_equal(rs, xp)
+        """
+
     def test_match(self):
         values = Series(['fooBAD__barBAD', NA, 'foo'])
 
@@ -128,11 +197,30 @@ class TestStringMethods(unittest.TestCase):
         exp = Series([('BAD__', 'BAD'), NA, []])
         tm.assert_series_equal(result, exp)
 
+        #mixed
+        mixed = Series(['aBAD_BAD', NA, 'BAD_b_BAD', True, datetime.today(),
+                        'foo', None, 1, 2.])
+
+        rs = Series(mixed).str.match('.*(BAD[_]+).*(BAD)')
+        xp = [('BAD_', 'BAD'), NA, ('BAD_', 'BAD'), NA, NA, [], NA, NA, NA]
+        self.assert_(isinstance(rs, Series))
+        tm.assert_almost_equal(rs, xp)
+
     def test_join(self):
         values = Series(['a_b_c', 'c_d_e', np.nan, 'f_g_h'])
         result = values.str.split('_').str.join('_')
         tm.assert_series_equal(values, result)
 
+        #mixed
+        mixed = Series(['a_b', NA, 'asdf_cas_asdf', True, datetime.today(),
+                        'foo', None, 1, 2.])
+
+        rs = Series(mixed).str.split('_').str.join('_')
+        xp = Series(['a_b', NA, 'asdf_cas_asdf', NA, NA, 'foo', NA, NA, NA])
+
+        self.assert_(isinstance(rs, Series))
+        tm.assert_almost_equal(rs, xp)
+
     def test_len(self):
         values = Series(['foo', 'fooo', 'fooooo', np.nan, 'fooooooo'])
 
@@ -140,6 +228,16 @@ class TestStringMethods(unittest.TestCase):
         exp = values.map(lambda x: len(x) if com.notnull(x) else NA)
         tm.assert_series_equal(result, exp)
 
+        #mixed
+        mixed = Series(['a_b', NA, 'asdf_cas_asdf', True, datetime.today(),
+                        'foo', None, 1, 2.])
+
+        rs = Series(mixed).str.len()
+        xp = Series([3, NA, 13, NA, NA, 3, NA, NA, NA])
+
+        self.assert_(isinstance(rs, Series))
+        tm.assert_almost_equal(rs, xp)
+
     def test_findall(self):
         values = Series(['fooBAD__barBAD', NA, 'foo', 'BAD'])
 
@@ -147,6 +245,16 @@ class TestStringMethods(unittest.TestCase):
         exp = Series([['BAD__', 'BAD'], NA, [], ['BAD']])
         tm.assert_almost_equal(result, exp)
 
+        #mixed
+        mixed = Series(['fooBAD__barBAD', NA, 'foo', True, datetime.today(),
+                        'BAD', None, 1, 2.])
+
+        rs = Series(mixed).str.findall('BAD[_]*')
+        xp = Series([['BAD__', 'BAD'], NA, [], NA, NA, ['BAD'], NA, NA, NA])
+
+        self.assert_(isinstance(rs, Series))
+        tm.assert_almost_equal(rs, xp)
+
     def test_pad(self):
         values = Series(['a', 'b', NA, 'c', NA, 'eeeeee'])
 
@@ -162,6 +270,34 @@ class TestStringMethods(unittest.TestCase):
         exp = Series(['  a  ', '  b  ', NA, '  c  ', NA, 'eeeeee'])
         tm.assert_almost_equal(result, exp)
 
+        #mixed
+        mixed = Series(['a', NA, 'b', True, datetime.today(),
+                        'ee', None, 1, 2.])
+
+        rs = Series(mixed).str.pad(5, side='left')
+        xp = Series(['    a', NA, '    b', NA, NA, '   ee', NA, NA, NA])
+
+        self.assert_(isinstance(rs, Series))
+        tm.assert_almost_equal(rs, xp)
+
+        mixed = Series(['a', NA, 'b', True, datetime.today(),
+                        'ee', None, 1, 2.])
+
+        rs = Series(mixed).str.pad(5, side='right')
+        xp = Series(['a    ', NA, 'b    ', NA, NA, 'ee   ', NA, NA, NA])
+
+        self.assert_(isinstance(rs, Series))
+        tm.assert_almost_equal(rs, xp)
+
+        mixed = Series(['a', NA, 'b', True, datetime.today(),
+                        'ee', None, 1, 2.])
+
+        rs = Series(mixed).str.pad(5, side='both')
+        xp = Series(['  a  ', NA, '  b  ', NA, NA, '  ee ', NA, NA, NA])
+
+        self.assert_(isinstance(rs, Series))
+        tm.assert_almost_equal(rs, xp)
+
     def test_center(self):
         values = Series(['a', 'b', NA, 'c', NA, 'eeeeee'])
 
@@ -169,6 +305,17 @@ class TestStringMethods(unittest.TestCase):
         exp = Series(['  a  ', '  b  ', NA, '  c  ', NA, 'eeeeee'])
         tm.assert_almost_equal(result, exp)
 
+        #mixed
+        mixed = Series(['a', NA, 'b', True, datetime.today(),
+                        'c', 'eee', None, 1, 2.])
+
+        rs = Series(mixed).str.center(5)
+        xp = Series(['  a  ', NA, '  b  ', NA, NA, '  c  ', ' eee ', NA, NA,
+                     NA])
+
+        self.assert_(isinstance(rs, Series))
+        tm.assert_almost_equal(rs, xp)
+
     def test_split(self):
         values = Series(['a_b_c', 'c_d_e', NA, 'f_g_h'])
 
@@ -176,6 +323,17 @@ class TestStringMethods(unittest.TestCase):
         exp = Series([['a', 'b', 'c'], ['c', 'd', 'e'], NA, ['f', 'g', 'h']])
         tm.assert_series_equal(result, exp)
 
+        #mixed
+        mixed = Series(['a_b_c', NA, 'd_e_f', True, datetime.today(),
+                        None, 1, 2.])
+
+        rs = Series(mixed).str.split('_')
+        xp = Series([['a', 'b', 'c'], NA, ['d', 'e', 'f'], NA, NA,
+                     NA, NA, NA])
+
+        self.assert_(isinstance(rs, Series))
+        tm.assert_almost_equal(rs, xp)
+
     def test_slice(self):
         values = Series(['aafootwo','aabartwo', NA, 'aabazqux'])
 
@@ -183,6 +341,17 @@ class TestStringMethods(unittest.TestCase):
         exp = Series(['foo', 'bar', NA, 'baz'])
         tm.assert_series_equal(result, exp)
 
+        #mixed
+        mixed = Series(['aafootwo', NA, 'aabartwo', True, datetime.today(),
+                        None, 1, 2.])
+
+        rs = Series(mixed).str.slice(2, 5)
+        xp = Series(['foo', NA, 'bar', NA, NA,
+                     NA, NA, NA])
+
+        self.assert_(isinstance(rs, Series))
+        tm.assert_almost_equal(rs, xp)
+
     def test_slice_replace(self):
         pass
 
@@ -201,6 +370,31 @@ class TestStringMethods(unittest.TestCase):
         exp = Series(['  aa', ' bb', NA, 'cc'])
         tm.assert_series_equal(result, exp)
 
+        #mixed
+        mixed = Series(['  aa  ', NA, ' bb \t\n', True, datetime.today(),
+                        None, 1, 2.])
+
+        rs = Series(mixed).str.strip()
+        xp = Series(['aa', NA, 'bb', NA, NA,
+                     NA, NA, NA])
+
+        self.assert_(isinstance(rs, Series))
+        tm.assert_almost_equal(rs, xp)
+
+        rs = Series(mixed).str.lstrip()
+        xp = Series(['aa  ', NA, 'bb \t\n', NA, NA,
+                     NA, NA, NA])
+
+        self.assert_(isinstance(rs, Series))
+        tm.assert_almost_equal(rs, xp)
+
+        rs = Series(mixed).str.rstrip()
+        xp = Series(['  aa', NA, ' bb', NA, NA,
+                     NA, NA, NA])
+
+        self.assert_(isinstance(rs, Series))
+        tm.assert_almost_equal(rs, xp)
+
     def test_wrap(self):
         pass
 
@@ -211,6 +405,16 @@ class TestStringMethods(unittest.TestCase):
         expected = Series(['b', 'd', np.nan, 'g'])
         tm.assert_series_equal(result, expected)
 
+        #mixed
+        mixed = Series(['a_b_c', NA, 'c_d_e', True, datetime.today(),
+                        None, 1, 2.])
+
+        rs = Series(mixed).str.split('_').str.get(1)
+        xp = Series(['b', NA, 'd', NA, NA,
+                     NA, NA, NA])
+
+        self.assert_(isinstance(rs, Series))
+        tm.assert_almost_equal(rs, xp)
 
 if __name__ == '__main__':
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
