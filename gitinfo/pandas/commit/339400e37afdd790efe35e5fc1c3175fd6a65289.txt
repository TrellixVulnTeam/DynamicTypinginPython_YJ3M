commit 339400e37afdd790efe35e5fc1c3175fd6a65289
Author: Jeff Reback <jeff@reback.net>
Date:   Wed Oct 29 06:37:24 2014 -0400

    CLN: more generic index creation in algorithms.py
    
    CLN: move coerce_indexer_dtype to common

diff --git a/pandas/core/algorithms.py b/pandas/core/algorithms.py
index 8c4f45fde..364a3fa13 100644
--- a/pandas/core/algorithms.py
+++ b/pandas/core/algorithms.py
@@ -166,8 +166,7 @@ def factorize(values, sort=False, order=None, na_sentinel=-1):
     elif is_timedelta:
         uniques = uniques.astype('m8[ns]')
     if isinstance(values, Index):
-        uniques = values._simple_new(uniques, None, freq=getattr(values, 'freq', None),
-                                     tz=getattr(values, 'tz', None))
+        uniques = values._shallow_copy(uniques, name=None)
     elif isinstance(values, Series):
         uniques = Index(uniques)
     return labels, uniques
diff --git a/pandas/core/categorical.py b/pandas/core/categorical.py
index c7cc065a9..00128bd97 100644
--- a/pandas/core/categorical.py
+++ b/pandas/core/categorical.py
@@ -196,7 +196,7 @@ class Categorical(PandasObject):
 
         if fastpath:
             # fast path
-            self._codes = _coerce_codes_dtype(values, categories)
+            self._codes = com._coerce_indexer_dtype(values, categories)
             self.name = name
             self.categories = categories
             self.ordered = ordered
@@ -289,7 +289,7 @@ class Categorical(PandasObject):
         self.ordered = False if ordered is None else ordered
         self.categories = categories
         self.name = name
-        self._codes = _coerce_codes_dtype(codes, categories)
+        self._codes = com._coerce_indexer_dtype(codes, categories)
 
     def copy(self):
         """ Copy constructor. """
@@ -609,7 +609,7 @@ class Categorical(PandasObject):
         new_categories = self._validate_categories(new_categories)
         cat = self if inplace else self.copy()
         cat._categories = new_categories
-        cat._codes = _coerce_codes_dtype(cat._codes, new_categories)
+        cat._codes = com._coerce_indexer_dtype(cat._codes, new_categories)
         if not inplace:
             return cat
 
@@ -1422,22 +1422,6 @@ CategoricalAccessor._add_delegate_accessors(delegate=Categorical,
 
 ##### utility routines #####
 
-_int8_max = np.iinfo(np.int8).max
-_int16_max = np.iinfo(np.int16).max
-_int32_max = np.iinfo(np.int32).max
-
-def _coerce_codes_dtype(codes, categories):
-    """ coerce the code input array to an appropriate dtype """
-    codes = np.array(codes,copy=False)
-    l = len(categories)
-    if l < _int8_max:
-        return codes.astype('int8')
-    elif l < _int16_max:
-        return codes.astype('int16')
-    elif l < _int32_max:
-        return codes.astype('int32')
-    return codes.astype('int64')
-
 def _get_codes_for_values(values, categories):
     """"
     utility routine to turn values into codes given the specified categories
@@ -1450,7 +1434,7 @@ def _get_codes_for_values(values, categories):
     (hash_klass, vec_klass), vals = _get_data_algo(values, _hashtables)
     t = hash_klass(len(categories))
     t.map_locations(com._values_from_object(categories))
-    return _coerce_codes_dtype(t.lookup(values), categories)
+    return com._coerce_indexer_dtype(t.lookup(values), categories)
 
 def _convert_to_list_like(list_like):
     if hasattr(list_like, "dtype"):
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 2839b54b7..e8632fbf7 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -49,7 +49,9 @@ _TD_DTYPE = np.dtype('m8[ns]')
 _INT64_DTYPE = np.dtype(np.int64)
 _DATELIKE_DTYPES = set([np.dtype(t) for t in ['M8[ns]', '<M8[ns]', '>M8[ns]',
                                               'm8[ns]', '<m8[ns]', '>m8[ns]']])
-
+_int8_max = np.iinfo(np.int8).max
+_int16_max = np.iinfo(np.int16).max
+_int32_max = np.iinfo(np.int32).max
 
 # define abstract base classes to enable isinstance type checking on our
 # objects
@@ -961,6 +963,17 @@ def diff(arr, n, axis=0):
 
     return out_arr
 
+def _coerce_indexer_dtype(indexer, categories):
+    """ coerce the indexer input array to the smallest dtype possible """
+    indexer = np.array(indexer,copy=False)
+    l = len(categories)
+    if l < _int8_max:
+        return indexer.astype('int8')
+    elif l < _int16_max:
+        return indexer.astype('int16')
+    elif l < _int32_max:
+        return indexer.astype('int32')
+    return indexer.astype('int64')
 
 def _coerce_to_dtypes(result, dtypes):
     """ given a dtypes and a result set, coerce the result elements to the
