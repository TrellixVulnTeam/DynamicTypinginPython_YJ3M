commit 1134c9f6c40398d8eba37c312c88ce294e31c6c5
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Dec 27 20:59:22 2011 -0500

    ENH: DataFrame.{iterrows, to_panel}, MultiIndex.{copy, has_duplicates}. More
    testing for the LongPanel removal. Still lots of failing tests

diff --git a/TODO.rst b/TODO.rst
index da4c480fb..84a2ecd71 100644
--- a/TODO.rst
+++ b/TODO.rst
@@ -1,9 +1,9 @@
 LongPanel removal
 =================
 
-- level to flex methods
-- level to reindex
-- fast take for items
+- DONE level to flex methods
+- DONE level to reindex
+- ?? fast take for items
 
 
 DONE
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index a1f122092..5bca2817f 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -375,6 +375,18 @@ class DataFrame(NDFrame):
         """Iterator over (column, series) pairs"""
         return ((k, self[k]) for k in self.columns)
 
+    def iterrows(self):
+        """
+        Iterate over rows of DataFrame as (index, Series) pairs
+        """
+        from itertools import izip
+        columns = self.columns
+        for k, v in izip(self.index, self.values):
+            s = v.view(Series)
+            s.index = columns
+            s.name = k
+            yield k, s
+
     iterkv = iteritems
     if py3compat.PY3:  # pragma: no cover
         items = iteritems
@@ -687,6 +699,70 @@ class DataFrame(NDFrame):
                                default_kind=kind,
                                default_fill_value=fill_value)
 
+    def to_panel(self):
+        """
+        Transform long (stacked) format (DataFrame) into wide (3D, Panel)
+        format.
+
+        Currently the index of the DataFrame must be a 2-level MultiIndex. This
+        may be generalized later
+
+        Returns
+        -------
+        panel : Panel
+        """
+        from pandas.core.panel import Panel
+
+        wide_shape = (len(self.columns), len(self.index.levels[0]),
+                      len(self.index.levels[1]))
+
+        # only support this kind for now
+        assert(isinstance(self.index, MultiIndex) and
+               len(self.index.levels) == 2)
+
+        major_axis, minor_axis = self.index.levels
+
+        def make_mask(index):
+            """
+            Create observation selection vector using major and minor
+            labels, for converting to wide format.
+            """
+            N, K = index.levshape
+            selector = index.labels[1] + K * index.labels[0]
+            mask = np.zeros(N * K, dtype=bool)
+            mask.put(selector, True)
+            return mask
+
+        def _to_wide_homogeneous():
+            values = np.empty(wide_shape, dtype=self.values.dtype)
+            if not issubclass(values.dtype.type, np.integer):
+                values.fill(np.nan)
+
+            frame_values = self.values
+            for i in xrange(len(self.columns)):
+                values[i].flat[mask] = frame_values[:, i]
+            return Panel(values, self.columns, major_axis, minor_axis)
+
+        def _to_wide_mixed():
+            _, N, K = wide_shape
+            # TODO: make much more efficient
+            data = {}
+            for item in self.columns:
+                item_vals = self[item].values
+                values = np.empty((N, K), dtype=item_vals.dtype)
+                values.flat[mask] = item_vals
+                data[item] = DataFrame(values, index=major_axis,
+                                       columns=minor_axis)
+            return Panel(data, self.columns, major_axis, minor_axis)
+
+        mask = make_mask(self.index)
+        if self._is_mixed_type:
+            return _to_wide_mixed()
+        else:
+            return _to_wide_homogeneous()
+
+    to_wide = deprecate('to_wide', to_panel)
+
     def to_csv(self, path, sep=",", na_rep='', cols=None, header=True,
               index=True, index_label=None, mode='w', nanRep=None):
         """
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 5fbb73a69..c0afb0c73 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -3,7 +3,7 @@
 import numpy as np
 
 from pandas.core.common import save, load
-from pandas.core.index import _ensure_index
+from pandas.core.index import MultiIndex
 import pandas.core.datetools as datetools
 
 #-------------------------------------------------------------------------------
@@ -118,6 +118,8 @@ class PandasObject(Picklable):
         from pandas.core.groupby import groupby
         return groupby(self, by, axis=axis, level=level, as_index=as_index)
 
+    index = None
+
     def truncate(self, before=None, after=None):
         """Function truncate a sorted DataFrame / Series before and/or after
         some particular dates.
@@ -135,8 +137,27 @@ class PandasObject(Picklable):
         """
         before = datetools.to_datetime(before)
         after = datetools.to_datetime(after)
+
+        if before is not None and after is not None:
+            assert(before <= after)
+
         # returns view, want to copy
-        return self.ix[before:after].copy()
+        truncated = self.ix[before:after].copy()
+
+        # slice off chunks of level, adjust labels, a bit of an ugly hack to
+        # get the unit tests to pass
+        index = truncated.index
+        if isinstance(index, MultiIndex):
+            if index is self.index:
+                index = self.index.copy()
+            level = index.levels[0]
+            start, end = level.slice_locs(before, after)
+            index.levels[0] = level[start:end]
+            index.labels[0] = index.labels[0] - start
+
+            truncated.index = index
+
+        return truncated
 
     def select(self, crit, axis=0):
         """
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 10a92287b..6f0160cea 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -981,6 +981,22 @@ class MultiIndex(Index):
 
         return subarr
 
+    def copy(self, order='C'):
+        """
+        Overridden ndarray.copy to copy over attributes
+
+        Returns
+        -------
+        cp : Index
+            Returns view on same base ndarray
+        """
+        cp = self.view(np.ndarray).view(type(self))
+        cp.levels = list(self.levels)
+        cp.labels = list(self.labels)
+        cp.names = list(self.names)
+        cp.sortorder = self.sortorder
+        return cp
+
     @property
     def dtype(self):
         return np.dtype('O')
@@ -1017,6 +1033,23 @@ class MultiIndex(Index):
         # to disable groupby tricks
         return True
 
+    @property
+    def has_duplicates(self):
+        """
+        Return True if there are no unique groups
+        """
+        # has duplicates
+        shape = [len(lev) for lev in self.levels]
+        group_index = np.zeros(len(self), dtype='i8')
+        for i in xrange(len(shape)):
+            stride = np.prod([x for x in shape[i+1:]], dtype='i8')
+            group_index += self.labels[i] * stride
+
+        if len(np.unique(group_index)) < len(group_index):
+            return True
+
+        return False
+
     def get_level_values(self, level):
         """
         Return vector of label values for requested level, equal to the length
@@ -1179,7 +1212,7 @@ class MultiIndex(Index):
 
             # an optimization
             result = new_tuples.view(MultiIndex)
-            result.levels = self.levels
+            result.levels = list(self.levels)
             result.labels = new_labels
             result.sortorder = sortorder
             result.names = self.names
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index c6d392a27..aa708673f 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -90,7 +90,7 @@ def _arith_method(func, name):
                             'done with scalar values')
 
         return self._combine(other, func)
-
+    f.__name__ = name
     return f
 
 def _panel_arith_method(op, name):
@@ -1160,63 +1160,6 @@ class Panel(NDFrame):
 WidePanel = Panel
 LongPanel = DataFrame
 
-def panel_is_consistent(panel):
-    offset = max(len(panel.major_axis), len(panel.minor_axis))
-    major_labels = panel.major_labels.astype('i8')
-    minor_labels = panel.minor_labels.astype('i8')
-    keys = major_labels * offset + minor_labels
-    unique_keys = np.unique(keys)
-
-    if len(unique_keys) < len(keys):
-        return False
-
-    return True
-
-def long_to_wide(lp):
-    """
-    Transform long (stacked) format into wide format
-
-    Returns
-    -------
-    Panel
-    """
-    assert(lp.consistent)
-    mask = make_mask(lp.index)
-    if lp._data.is_mixed_dtype():
-        return _to_wide_mixed(lp, mask)
-    else:
-        return _to_wide_homogeneous(lp, mask)
-
-def _to_wide_homogeneous(lp, mask):
-    shape = _wide_shape(lp)
-    values = np.empty(shape, dtype=lp.values.dtype)
-
-    if not issubclass(lp.values.dtype.type, np.integer):
-        values.fill(np.nan)
-
-    for i in xrange(len(lp.items)):
-        values[i].flat[mask] = lp.values[:, i]
-
-    return Panel(values, lp.items, lp.major_axis, lp.minor_axis)
-
-def _to_wide_mixed(lp, mask):
-    _, N, K = _wide_shape(lp)
-
-    # TODO: make much more efficient
-
-    data = {}
-    for i, item in enumerate(lp.items):
-        item_vals = lp[item].values
-
-        values = np.empty((N, K), dtype=item_vals.dtype)
-        values.ravel()[mask] = item_vals
-        data[item] = DataFrame(values, index=lp.major_axis,
-                               columns=lp.minor_axis)
-    return Panel.from_dict(data)
-
-def _wide_shape(lp):
-    return (len(lp.columns), len(lp.index.levels[0]), len(lp.index.levels[1]))
-
 def long_swapaxes(frame):
     """
     Swap major and minor axes and reorder values to be grouped by
@@ -1224,14 +1167,14 @@ def long_swapaxes(frame):
 
     Returns
     -------
-    LongPanel (new object)
+    DataFrame (new object)
     """
     return frame.swaplevel(0, 1, axis=0)
 
 
 def long_truncate(lp, before=None, after=None):
     """
-    Slice panel between two major axis values, return complete LongPanel
+    Slice panel between two major axis values, return complete DataFrame
 
     Parameters
     ----------
@@ -1242,7 +1185,7 @@ def long_truncate(lp, before=None, after=None):
 
     Returns
     -------
-    LongPanel
+    DataFrame
     """
     left, right = lp.index.slice_locs(before, after)
     new_index = lp.index.truncate(before, after)
@@ -1260,13 +1203,11 @@ def long_apply(lp, f, axis='major', broadcast=False):
     f : function
         NumPy function to apply to each group
     axis : {'major', 'minor'}
-
     broadcast : boolean
 
     Returns
     -------
-    broadcast=True  -> LongPanel
-    broadcast=False -> DataFrame
+    applied : DataFrame
     """
     try:
         return lp._apply_level(f, axis=axis, broadcast=broadcast)
@@ -1278,8 +1219,8 @@ def long_apply(lp, f, axis='major', broadcast=False):
 
 def make_dummies(frame, item):
     """
-    Use unique values in column of panel to construct LongPanel
-    containing dummy
+    Use unique values in column of panel to construct DataFrame containing
+    dummy variables in the columns (constructed from the unique values)
 
     Parameters
     ----------
@@ -1288,7 +1229,7 @@ def make_dummies(frame, item):
 
     Returns
     -------
-    LongPanel
+    dummies : DataFrame
     """
     from pandas import Factor
     factor = Factor(frame[item].values)
@@ -1296,7 +1237,7 @@ def make_dummies(frame, item):
     dummy_mat = values.take(factor.labels, axis=0)
     return DataFrame(dummy_mat, columns=factor.levels, index=frame.index)
 
-def make_axis_dummies(frame, axis='minor'):
+def make_axis_dummies(frame, axis='minor', transform=None):
     """
     Construct 1-0 dummy variables corresponding to designated axis
     labels
@@ -1308,19 +1249,27 @@ def make_axis_dummies(frame, axis='minor'):
         Function to apply to axis labels first. For example, to
         get "day of week" dummies in a time series regression you might
         call:
-            panel.get_axis_dummies(axis='major',
-                                   transform=lambda d: d.weekday())
+            make_axis_dummies(panel, axis='major',
+                              transform=lambda d: d.weekday())
     Returns
     -------
-    LongPanel, item names taken from chosen axis
+    dummies : DataFrame
+        Column names taken from chosen axis
     """
     numbers = {
         'major' : 0,
         'minor' : 1
     }
     num = numbers.get(axis, axis)
+
     items = frame.index.levels[num]
     labels = frame.index.labels[num]
+    if transform is not None:
+        mapped_items = items.map(transform)
+        factor = Factor(mapped_items.take(labels))
+        labels = factor.labels
+        items = factor.levels
+
     values = np.eye(len(items), dtype=float)
     values = values.take(labels, axis=0)
 
@@ -1407,16 +1356,5 @@ def _get_distinct_indexes(indexes):
     indexes = sorted(indexes, key=id)
     return [gp.next() for _, gp in groupby(indexes, id)]
 
-def make_mask(index):
-    """
-    Create observation selection vector using major and minor
-    labels, for converting to wide format.
-    """
-    N, K = index.levshape
-    selector = index.labels[1] + K * index.labels[0]
-    mask = np.zeros(N * K, dtype=bool)
-    mask.put(selector, True)
-    return mask
-
 def _monotonic(arr):
     return not (arr[1:] < arr[:-1]).any()
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 173abb422..59e2a4aee 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -651,12 +651,12 @@ class HDFStore(object):
                                table._v_attrs.index_kind)
         # reconstruct
         long_index = MultiIndex.from_arrays([index, columns])
-        lp = LongPanel(sel.values['values'], index=long_index,
+        lp = DataFrame(sel.values['values'], index=long_index,
                        columns=fields)
 
-        if lp.consistent:
+        if not long_index.has_duplicates:
             lp = lp.sortlevel(level=0)
-            wp = lp.to_wide()
+            wp = lp.to_panel()
         else:
             if not self._quiet:  # pragma: no cover
                 print ('Duplicate entries in table, taking most recently '
@@ -674,8 +674,8 @@ class HDFStore(object):
             new_index = long_index.take(indexer)
             new_values = lp.values.take(indexer, axis=0)
 
-            lp = LongPanel(new_values, index=new_index, columns=lp.columns)
-            wp = lp.to_wide()
+            lp = DataFrame(new_values, index=new_index, columns=lp.columns)
+            wp = lp.to_panel()
 
         if sel.column_filter:
             new_minor = sorted(set(wp.minor_axis) & sel.column_filter)
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index 9980c9943..fa2d6ec21 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -5,8 +5,7 @@ import sys
 
 import numpy as np
 
-from pandas import (Series, DataFrame, Panel, LongPanel, DateRange,
-                    MultiIndex)
+from pandas import Series, DataFrame, Panel, DateRange, MultiIndex
 from pandas.io.pytables import HDFStore
 import pandas.util.testing as tm
 
diff --git a/pandas/sparse/panel.py b/pandas/sparse/panel.py
index 95890fda5..f00b072e0 100644
--- a/pandas/sparse/panel.py
+++ b/pandas/sparse/panel.py
@@ -10,7 +10,7 @@ import numpy as np
 from pandas.core.common import _pickle_array, _unpickle_array, _mut_exclusive
 from pandas.core.index import Index, MultiIndex, _ensure_index
 from pandas.core.frame import DataFrame
-from pandas.core.panel import Panel, LongPanel
+from pandas.core.panel import Panel
 
 from pandas.sparse.frame import SparseDataFrame
 
@@ -221,7 +221,7 @@ class SparsePanel(Panel):
 
     def to_long(self, filter_observations=True):
         """
-        Convert SparsePanel to (dense) LongPanel
+        Convert SparsePanel to (dense) DataFrame
 
         Returns
         -------
@@ -266,8 +266,8 @@ class SparsePanel(Panel):
         index = MultiIndex(levels=[self.major_axis, self.minor_axis],
                            labels=[major_labels, minor_labels])
 
-        lp = LongPanel(values, index=index, columns=self.items)
-        return lp.sortlevel(level=0)
+        df = DataFrame(values, index=index, columns=self.items)
+        return df.sortlevel(level=0)
 
     def reindex(self, major=None, items=None, minor=None, major_axis=None,
                 minor_axis=None, copy=False):
@@ -361,8 +361,6 @@ class SparsePanel(Panel):
                            default_kind=self.default_kind)
 
     def _combinePanel(self, other, func):
-        # if isinstance(other, LongPanel):
-        #     other = other.to_wide()
         items = self.items + other.items
         major = self.major_axis + other.major_axis
         minor = self.minor_axis + other.minor_axis
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index 94e21a496..4583acd48 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -114,7 +114,7 @@ class PanelOLS(OLS):
         cat_mapping = {}
 
         if isinstance(data, LongPanel):
-            data = data.to_wide()
+            data = data.to_panel()
         else:
             if isinstance(data, Panel):
                 data = data.copy()
@@ -403,7 +403,7 @@ class PanelOLS(OLS):
         panel = LongPanel(vec.reshape((len(vec), 1)), index=index,
                           columns=['dummy'])
 
-        return panel.to_wide()['dummy']
+        return panel.to_panel()['dummy']
 
     def _unstack_y(self, vec):
         unstacked = self._unstack_vector(vec)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 46a0d9a7e..1532c7ed1 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1728,6 +1728,15 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
     def test_iter(self):
         self.assert_(tm.equalContents(list(self.frame), self.frame.columns))
 
+    def test_iterrows(self):
+        for i, (k, v) in enumerate(self.frame.iterrows()):
+            exp = self.frame.xs(self.frame.index[i])
+            assert_series_equal(v, exp)
+
+        for i, (k, v) in enumerate(self.mixed_frame.iterrows()):
+            exp = self.mixed_frame.xs(self.mixed_frame.index[i])
+            assert_series_equal(v, exp)
+
     def test_len(self):
         self.assertEqual(len(self.frame), len(self.frame.index))
 
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 374a82ad3..5123596ff 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -923,16 +923,6 @@ class TestMultiIndex(unittest.TestCase):
     def test_bounds(self):
         self.index._bounds
 
-    def test_makeMask(self):
-        from pandas.core.panel import make_mask
-
-        mask =  make_mask(self.index)
-        expected = np.array([True, True,
-                             True, False,
-                             False, True,
-                             True, True], dtype=bool)
-        self.assert_(np.array_equal(mask, expected))
-
     def test_equals(self):
         self.assert_(self.index.equals(self.index))
         self.assert_(self.index.equal_levels(self.index))
@@ -1193,6 +1183,15 @@ class TestMultiIndex(unittest.TestCase):
         _check_how('left')
         _check_how('right')
 
+    def test_has_duplicates(self):
+        self.assert_(not self.index.has_duplicates)
+        self.assert_(self.index.append(self.index).has_duplicates)
+
+        index = MultiIndex(levels=[[0, 1], [0, 1, 2]],
+                           labels=[[0, 0, 0, 0, 1, 1, 1],
+                                   [0, 1, 2, 0, 0, 1, 2]])
+        self.assert_(index.has_duplicates)
+
 class TestFactor(unittest.TestCase):
 
     def setUp(self):
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index d68d0b420..8693062bd 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -355,11 +355,7 @@ class CheckIndexing(object):
         assert_frame_equal(panelc[0], panel[0])
 
     def test_setitem(self):
-
         # LongPanel with one item
-        lp = self.panel.filter(['ItemA']).to_long()
-        self.panel['ItemE'] = lp
-
         lp = self.panel.filter(['ItemA', 'ItemB']).to_long()
         self.assertRaises(Exception, self.panel.__setitem__,
                           'ItemE', lp)
@@ -825,11 +821,6 @@ class TestPanel(unittest.TestCase, PanelTests, CheckIndexing,
         filled = empty.fillna(0)
         assert_panel_equal(filled, empty)
 
-    def test_combinePanel_with_long(self):
-        lng = self.panel.to_long(filter_observations=False)
-        result = self.panel.add(lng)
-        self.assert_panel_equal(result, self.panel * 2)
-
     def test_swapaxes(self):
         result = self.panel.swapaxes('items', 'minor')
         self.assert_(result.items is self.panel.minor_axis)
@@ -854,7 +845,7 @@ class TestPanel(unittest.TestCase, PanelTests, CheckIndexing,
         # unfiltered
         unfiltered = self.panel.to_long(filter_observations=False)
 
-        assert_panel_equal(unfiltered.to_wide(), self.panel)
+        assert_panel_equal(unfiltered.to_panel(), self.panel)
 
     def test_to_long_mixed(self):
         panel = self.panel.fillna(0)
@@ -862,7 +853,7 @@ class TestPanel(unittest.TestCase, PanelTests, CheckIndexing,
         panel['bool'] = panel['ItemA'] > 0
 
         lp = panel.to_long()
-        wp = lp.to_wide()
+        wp = lp.to_panel()
         self.assertEqual(wp['bool'].values.dtype, np.bool_)
         assert_frame_equal(wp['bool'], panel['bool'])
 
@@ -988,27 +979,9 @@ class TestLongPanel(unittest.TestCase):
         self.assert_(np.array_equal(thecopy.values, self.panel.values))
         self.assert_(thecopy.values is not self.panel.values)
 
-    def test_getitem(self):
-        col = self.panel['ItemA']
-
-    def test_setitem(self):
-        self.panel['ItemE'] = self.panel['ItemA']
-        self.panel['ItemF'] = 1.
-
-        wp = self.panel.to_wide()
-        assert_frame_equal(wp['ItemA'], wp['ItemE'])
-
-        itemf = wp['ItemF'].values.ravel()
-        self.assert_((itemf[np.isfinite(itemf)] == 1).all())
-
-        # check exceptions raised
-        lp = self.panel.filter(['ItemA', 'ItemB'])
-        lp2 = self.panel.filter(['ItemC', 'ItemE'])
-        self.assertRaises(Exception, lp.__setitem__, 'foo', lp2)
-
     def test_ops_differently_indexed(self):
         # trying to set non-identically indexed panel
-        wp = self.panel.to_wide()
+        wp = self.panel.to_panel()
         wp2 = wp.reindex(major=wp.major_axis[:-1])
         lp2 = wp2.to_long()
 
@@ -1026,14 +999,14 @@ class TestLongPanel(unittest.TestCase):
         assert_frame_equal(result, expected)
 
     def test_combineFrame(self):
-        wp = self.panel.to_wide()
-        result = self.panel.add(wp['ItemA'])
-        assert_frame_equal(result.to_wide()['ItemA'], wp['ItemA'] * 2)
+        wp = self.panel.to_panel()
+        result = self.panel.add(wp['ItemA'].stack(), axis=0)
+        assert_frame_equal(result.to_panel()['ItemA'], wp['ItemA'] * 2)
 
     def test_combinePanel(self):
-        wp = self.panel.to_wide()
+        wp = self.panel.to_panel()
         result = self.panel.add(self.panel)
-        wide_result = result.to_wide()
+        wide_result = result.to_panel()
         assert_frame_equal(wp['ItemA'] * 2, wide_result['ItemA'])
 
         # one item
@@ -1056,8 +1029,8 @@ class TestLongPanel(unittest.TestCase):
         assert_frame_equal(result, expected)
 
     def test_operators(self):
-        wp = self.panel.to_wide()
-        result = (self.panel + 1).to_wide()
+        wp = self.panel.to_panel()
+        result = (self.panel + 1).to_panel()
         assert_frame_equal(wp['ItemA'] + 1, result['ItemA'])
 
     def test_sort(self):
@@ -1065,10 +1038,10 @@ class TestLongPanel(unittest.TestCase):
             return (arr[1:] > arr[:-1]).any()
 
         sorted_minor = self.panel.sortlevel(level=1)
-        self.assert_(is_sorted(sorted_minor.minor_labels))
+        self.assert_(is_sorted(sorted_minor.index.labels[1]))
 
         sorted_major = sorted_minor.sortlevel(level=0)
-        self.assert_(is_sorted(sorted_major.major_labels))
+        self.assert_(is_sorted(sorted_major.index.labels[0]))
 
     def test_to_string(self):
         from cStringIO import StringIO
@@ -1077,26 +1050,26 @@ class TestLongPanel(unittest.TestCase):
         self.panel.to_string(buf)
 
     def test_truncate(self):
-        dates = self.panel.major_axis
+        dates = self.panel.index.levels[0]
         start, end = dates[1], dates[5]
 
-        trunced = self.panel.truncate(start, end).to_wide()
-        expected = self.panel.to_wide()['ItemA'].truncate(start, end)
+        trunced = self.panel.truncate(start, end).to_panel()
+        expected = self.panel.to_panel()['ItemA'].truncate(start, end)
 
         assert_frame_equal(trunced['ItemA'], expected)
 
-        trunced = self.panel.truncate(before=start).to_wide()
-        expected = self.panel.to_wide()['ItemA'].truncate(before=start)
+        trunced = self.panel.truncate(before=start).to_panel()
+        expected = self.panel.to_panel()['ItemA'].truncate(before=start)
 
         assert_frame_equal(trunced['ItemA'], expected)
 
-        trunced = self.panel.truncate(after=end).to_wide()
-        expected = self.panel.to_wide()['ItemA'].truncate(after=end)
+        trunced = self.panel.truncate(after=end).to_panel()
+        expected = self.panel.to_panel()['ItemA'].truncate(after=end)
 
         assert_frame_equal(trunced['ItemA'], expected)
 
         # truncate on dates that aren't in there
-        wp = self.panel.to_wide()
+        wp = self.panel.to_panel()
         new_index = wp.major_axis[::5]
 
         wp2 = wp.reindex(major=new_index)
@@ -1106,39 +1079,37 @@ class TestLongPanel(unittest.TestCase):
 
         wp_trunc = wp2.truncate(wp.major_axis[2], wp.major_axis[-2])
 
-        assert_panel_equal(wp_trunc, lp_trunc.to_wide())
+        assert_panel_equal(wp_trunc, lp_trunc.to_panel())
 
         # throw proper exception
         self.assertRaises(Exception, lp2.truncate, wp.major_axis[-2],
                           wp.major_axis[2])
 
     def test_axis_dummies(self):
-        minor_dummies = self.panel.get_axis_dummies('minor')
-        self.assertEqual(len(minor_dummies.items),
-                         len(self.panel.minor_axis))
+        minor_dummies = panelmod.make_axis_dummies(self.panel, 'minor')
+        self.assertEqual(len(minor_dummies.columns),
+                         len(self.panel.index.levels[1]))
 
-        major_dummies = self.panel.get_axis_dummies('major')
-        self.assertEqual(len(major_dummies.items),
-                         len(self.panel.major_axis))
+        major_dummies = panelmod.make_axis_dummies(self.panel, 'major')
+        self.assertEqual(len(major_dummies.columns),
+                         len(self.panel.index.levels[0]))
 
         mapping = {'A' : 'one',
                    'B' : 'one',
                    'C' : 'two',
                    'D' : 'two'}
 
-        transformed = self.panel.get_axis_dummies('minor',
+        transformed = panelmod.make_axis_dummies(self.panel, 'minor',
                                                   transform=mapping.get)
-        self.assertEqual(len(transformed.items), 2)
-        self.assert_(np.array_equal(transformed.items, ['one', 'two']))
+        self.assertEqual(len(transformed.columns), 2)
+        self.assert_(np.array_equal(transformed.columns, ['one', 'two']))
 
         # TODO: test correctness
 
     def test_get_dummies(self):
-        self.panel['Label'] = self.panel.minor_labels
-
-        minor_dummies = self.panel.get_axis_dummies('minor')
-        dummies = self.panel.get_dummies('Label')
-
+        self.panel['Label'] = self.panel.index.labels[1]
+        minor_dummies = panelmod.make_axis_dummies(self.panel, 'minor')
+        dummies = panelmod.make_dummies(self.panel, 'Label')
         self.assert_(np.array_equal(dummies.values, minor_dummies.values))
 
     def test_apply(self):
@@ -1148,22 +1119,17 @@ class TestLongPanel(unittest.TestCase):
                                          np.sqrt(self.panel.values)))
 
     def test_mean(self):
-        means = self.panel.mean('major')
+        means = self.panel.mean(level='minor')
 
         # test versus Panel version
-        wide_means = self.panel.to_wide().mean('major')
+        wide_means = self.panel.to_panel().mean('major')
         assert_frame_equal(means, wide_means)
 
-        means_broadcast = self.panel.mean('major', broadcast=True)
-        self.assert_(isinstance(means_broadcast, LongPanel))
-
-        # how to check correctness?
-
     def test_sum(self):
-        sums = self.panel.sum('major')
+        sums = self.panel.sum(level='minor')
 
         # test versus Panel version
-        wide_sums = self.panel.to_wide().sum('major')
+        wide_sums = self.panel.to_panel().sum('major')
         assert_frame_equal(sums, wide_sums)
 
     def test_count(self):
@@ -1185,18 +1151,11 @@ class TestLongPanel(unittest.TestCase):
 
         joined = lp1.join(lp2)
 
-        self.assertEqual(len(joined.items), 3)
+        self.assertEqual(len(joined.columns), 3)
 
         self.assertRaises(Exception, lp1.join,
                           self.panel.filter(['ItemB', 'ItemC']))
 
-    def test_merge(self):
-        pass
-
-    def test_add_prefix(self):
-        lp = self.panel.add_prefix('foo#')
-        self.assertEqual(lp.items[0], 'foo#ItemA')
-
     def test_pivot(self):
         from pandas.core.reshape import _slow_pivot
 
