commit 803c5abd2a42bd600c9263c3e39e1f128c7294de
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Aug 25 17:30:24 2011 -0400

    DOC: starting work on overhauling the sphinx docs. switched to agogo theme

diff --git a/doc/source/conf.py b/doc/source/conf.py
index b0e70960e..e79a34ad3 100644
--- a/doc/source/conf.py
+++ b/doc/source/conf.py
@@ -59,7 +59,7 @@ master_doc = 'index'
 
 # General information about the project.
 project = u'pandas'
-copyright = u'2008-2011, AQR Capital Management, LLC, pandas developers'
+copyright = u'2008-2011, AQR, Wes McKinney'
 
 # The version info for the project you're documenting, acts as replacement for
 # |version| and |release|, also used in various other places throughout the
diff --git a/doc/source/hierarchical.rst b/doc/source/hierarchical.rst
new file mode 100644
index 000000000..be15965be
--- /dev/null
+++ b/doc/source/hierarchical.rst
@@ -0,0 +1,8 @@
+.. _hierarchical:
+
+.. currentmodule:: pandas
+
+*********************
+Hierarchical indexing
+*********************
+
diff --git a/doc/source/index.rst b/doc/source/index.rst
index 86bb9eff3..22feb773f 100755
--- a/doc/source/index.rst
+++ b/doc/source/index.rst
@@ -1,41 +1,75 @@
 .. Pandas documentation master file, created by
 
 
-pandas: a python data analysis library
-======================================
-
-:mod:`pandas` is a python package providing convenient data structures
-for time series, cross-sectional, or any other form of "labeled" data,
-with tools for building statistical and econometric models.
-
-This library was created with the following design principles:
-
-  - Working with time series and cross-sectional data should be easy
-  - The user should not have to worry (much) about handling missing data
-  - Data alignment should be automatic and transparent
-  - Speed matters
-  - Perhaps most importantly: *things should work just like you want them to*
-
-Many of these principles are here to address the shortcomings
-frequently experienced using other languages / scientific research
-environments. In MATLAB, for example, you spend a lot of time coercing
-data into matrices, cleaning and aligning it, and keeping everything
-homogeneous. You have to use lots of functions like **nanmean, nanstd,
-repmat** (for broadcasting), and other functions which help you to
-maintain reliable data. Using `NumPy <http://www.numpy.org>`__ and a
-Pythonic approach, pandas helps hide the dirty details of working with
-unclean data, allowing you to focus on the problem you're trying to
-solve rather than the implementation.
-
-pandas is implemented primarily using NumPy and is intended to be able
-to integrate very easily with other NumPy-based scientific libraries,
-such as :mod:`scikits.statsmodels`.
+pandas: powerful Python data analysis library
+=============================================
+
+:mod:`pandas` is a `Python <http://www.python.org>`__ package providing fast,
+flexible, and expressive data structures designed to make working with
+"relational" or "labeled" data both easy and intuitive. It aims to be the
+fundamental high-level building block for doing practical data analysis in
+Python. Additionally, it has the broader goal of becoming **the most powerful
+and flexible data analysis and manipulation tool available in any
+language**. It is already well on its way toward this goal.
+
+pandas is well suited for many different kinds of data:
+
+  - Tabular data with heterogeneously-typed columns, as in an SQL table or
+    Excel spreadsheet
+  - Ordered and unordered (not necessarily fixed-frequency) time series data.
+  - Arbitrary matrix data (homogeneously typed or heterogeneous) with row and
+    column labels
+  - Any other form of observational / statistical data sets. The data actually
+    need not be labeled at all to be placed into a pandas data structure
+
+The two primary data structures of pandas, :class:`Series` (1-dimensional)
+and :class:`DataFrame` (2-dimensional), handle the vast majority of typical use
+cases in finance, statistics, social science, and many areas of
+engineering. For R users, :class:`DataFrame` provides everything that R's
+``data.frame`` provides and much more. pandas is build on top of `NumPy
+<http://www.numpy.org>`__ and is intended to integrate well within a scientific
+computing environment with many other 3rd party libraries.
+
+Here are just a few of the primary features of interest in pandas:
+
+  - Easy handling of missing data (represented as NaN) in floating point as
+    well as non-floating point data
+  - Size mutability: columns can be inserted and deleted from DataFrame and
+    higher dimensional objects
+  - Automatic and explicit data alignment: objects can be explicitly aligned to
+    a set of labels, or the user can simply ignore the labels and let `Series`,
+    `DataFrame`, etc. automatically align the data for you in computations
+  - Powerful, flexible "group by" functionality to perform split-apply-combine
+    operations on data sets, for both aggregating and transforming data sets
+  - Make it easy to collect ragged, differently-indexed data in other Python
+    and NumPy data structures into DataFrame objects
+  - Intelligent label-based slicing, (fancy) indexing, and subsetting of large
+    data sets
+  - Intuitive merging and joining of data sets
+  - Flexible reshaping and pivoting of data sets
+  - Hierarchical labeling of axes (possible to have multiple labels per tick)
+  - Robust IO tools for loading data from flat files (CSV and delimited), Excel
+    files, databases, and saving / loading data from the ultrafast HDF5 format
+
+Many of these principles are here to address the shortcomings frequently
+experienced using other languages / scientific research environments. For data
+scientists, working with data is typically divided into multiple stages:
+munging and cleaning data, analyzing / modeling it, then organizing the results
+of the analysis into a form suitable for plotting or tabular display. pandas
+is the ideal tool for all of these tasks.
+
+Some other notes
+
+ - pandas will soon become a dependency of `statsmodels`, making it a
+   important part of the statistical computing tools available in Python.
+
+ - pandas has been used extensively in production in financial applications.
 
 .. note::
 
-   This documentation assumes general familiarity with NumPy. If you
-   haven't used NumPy much or at all, please check out the `NumPy
-   documentation <http://docs.scipy.org>`__ first.
+   This documentation assumes general familiarity with NumPy. If you haven't
+   used NumPy much or at all, do invest some time in `learning about NumPy
+   <http://docs.scipy.org>`__ first.
 
 See the package overview for more detail about what's in the library.
 
@@ -52,7 +86,9 @@ User manual
 
 **License:** BSD
 
-**Requirements:** python 2.4 to 2.7, NumPy, and dateutil
+**Requirements:** python 2.5 to 2.7, NumPy, and python-dateutil
+
+**Suggested:** scikits.statsmodels
 
 **Code Repository:** http://github.com/wesm/pandas
 
@@ -62,6 +98,7 @@ Library documentation
 .. toctree::
     :maxdepth: 2
 
+    install
     overview
     core
     groupby
@@ -88,6 +125,13 @@ Indices and tables
 * :ref:`modindex`
 * :ref:`search`
 
+History
+-------
+
+pandas development began at `AQR Capital Management <http://www.aqr.com>` in
+April 2008. It was open-sourced at the end of 2009 and continues to be actively
+used and maintained.
+
 Contact
 -------
 
diff --git a/doc/source/install.rst b/doc/source/install.rst
new file mode 100644
index 000000000..08657e1fd
--- /dev/null
+++ b/doc/source/install.rst
@@ -0,0 +1,114 @@
+.. _install:
+
+.. currentmodule:: pandas
+
+************
+Installation
+************
+
+You have the option to install an official release or to build the development
+version from the source repository. If you choose to install from source and
+are on Windows, you will have to ensure that you have a compatible C compiler
+(MinGW or Visual Studio) installed. `How-to install MinGW on Windows
+<http://docs.cython.org/src/tutorial/appendix.html>`__
+
+Python version support
+~~~~~~~~~~~~~~~~~~~~~~
+
+Officially Python 2.5 to 2.7. I will aim for Python 3.x support in a future
+release. Python 2.4 support is being phased out since the userbase has shrunk
+significantly.
+
+
+Binary installers
+~~~~~~~~~~~~~~~~~
+
+Available on `PyPI <http://pypi.python.org/pypi/pandas>`__
+
+Dependencies
+~~~~~~~~~~~~
+
+  * `NumPy <http://www.numpy.org>`__: 1.4.0 or higher. Recommend 1.5.1 or
+    higher
+  * `python-dateutil <http://labix.org/python-dateutil>`__ 1.5
+
+Optional dependencies
+~~~~~~~~~~~~~~~~~~~~~
+
+  * `SciPy <http://www.scipy.org>`__: miscellaneous statistical functions
+  * `PyTables <http://www.pytables.org>`__: necessary for HDF5-based storage
+  * `matplotlib <http://matplotlib.sourceforge.net/>`__: for plotting
+  * `scikits.statsmodels <http://statsmodels.sourceforge.net/>`__
+     * Needed for parts of :mod:`pandas.stats`
+
+.. note::
+
+   Without the optional dependencies, many useful features will not
+   work. Hence, it is highly recommended that you install these. A packaged
+   distribution like the `Enthought Python Distribution
+   <http://enthought.com/products/epd.php>`__ may be worth considering.
+
+Installing from source
+~~~~~~~~~~~~~~~~~~~~~~
+.. note::
+
+   Installing from the git repository requires a recent installation of `Cython
+   <http://cython.org>`__ as the cythonized C sources are no longer checked
+   into source control. Released source distributions will contain the built C
+   files. I recommend installing the latest Cython via ``easy_install -U
+   Cython``
+
+The source code is hosted at http://github.com/wesm/pandas, it can be checked
+out using git and compiled / installed like so:
+
+::
+
+  git clone git://github.com/wesm/pandas.git
+  cd pandas
+  python setup.py install
+
+On Windows, I suggest installing the MinGW compiler suite following the
+directions linked to above. Once configured property, run the following on the
+command line:
+
+::
+
+  python setup.py build --compiler=mingw32
+  python setup.py install
+
+Note that you will not be able to import pandas if you open an interpreter in
+the source directory unless you build the C extensions in place:
+
+::
+
+  python setup.py build_ext --inplace
+
+
+Running the test suite
+~~~~~~~~~~~~~~~~~~~~~~
+
+pandas is equipped with an exhaustive set of unit tests covering about 97% of
+the codebase as of this writing. To run it on your machine to verify that
+everything is working (and you have all of the dependencies, soft and hard,
+installed), make sure you have `nose
+<http://readthedocs.org/docs/nose/en/latest/>`__ and run:
+
+::
+
+    $ nosetests pandas
+    ..........................................................................
+    .......................S..................................................
+    ..........................................................................
+    ..........................................................................
+    ..........................................................................
+    ..........................................................................
+    ..........................................................................
+    ..........................................................................
+    ..........................................................................
+    ..........................................................................
+    .................S........................................................
+    ....
+    ----------------------------------------------------------------------
+    Ran 818 tests in 21.631s
+
+    OK (SKIP=2)
diff --git a/doc/source/overview.rst b/doc/source/overview.rst
index b1f0647fa..54ca8a4cf 100644
--- a/doc/source/overview.rst
+++ b/doc/source/overview.rst
@@ -22,13 +22,6 @@ econometrics. pandas has multiple target audiences:
  * System developers who wish to have a robust and well-tested library
    for building production applications involving such data sets.
 
-History
--------
-
-pandas development began at AQR Capital Management (a quantitative
-hedge fund) in April 2008. It was open-sourced at the end of 2009 and
-continues to be actively used and maintained.
-
 Data structures at a glance
 ---------------------------
 
@@ -96,60 +89,3 @@ though, we like to "favor immutability" where sensible.
 
 What else is in the package?
 ----------------------------
-
-Installation
-------------
-
-You have the option to install an official release or to build from
-source. If you choose to install from source and are on Windows, you
-will have to ensure that you have a compatible C compiler (gcc)
-installed (see below).
-
-Binary installers
-~~~~~~~~~~~~~~~~~
-
-Available from the Google Code website and PyPI.
-
-Dependencies
-~~~~~~~~~~~~
-
-  * `NumPy <http://www.numpy.org>`__: 1.3.0 or higher
-  * `dateutil <http://labix.org/python-dateutil>`__
-
-Optional dependencies
-~~~~~~~~~~~~~~~~~~~~~
-
-  * `SciPy <http://www.scipy.org>`__: miscellaneous statistical functions
-  * `PyTables <http://www.pytables.org>`__: necessary for HDF5-based storage
-  * `matplotlib <http://matplotlib.sourceforge.net/>`__: for plotting
-  * `scikits.statsmodels <http://statsmodels.sourceforge.net/>`__
-     * Needed for parts of :mod:`pandas.stats`
-
-.. note::
-
-   Without the optional dependencies, many useful features will not
-   work. Hence, it is highly recommended that you install these.
-
-Installing from source
-~~~~~~~~~~~~~~~~~~~~~~
-
-The source code is hosted at http://github.com/wesm/pandas, it can be checked
-out using git and compiled / installed like so:
-
-::
-
-  git clone git://github.com/wesm/pandas.git
-
-  cd pandas
-
-  python setup.py install
-
-On Windows, you will need to download and install `gcc / MinGW
-<http://www.mingw.org/wiki/HOWTO_Install_the_MinGW_GCC_Compiler_Suite>`__.
-After adding it to your system path, you can install pandas by typing
-instead:
-
-::
-
-  python setup.py build --compiler=mingw32
-  python setup.py install
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 1800178c0..2aeea3371 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -11,7 +11,7 @@ import time
 import numpy as np
 from pandas import Series, TimeSeries, DataFrame, WidePanel, LongPanel
 from pandas.core.common import adjoin
-import pandas.core.internals as internals
+import pandas._tseries as _tseries
 
 # reading and writing the full object in one go
 _TYPE_MAP = {
