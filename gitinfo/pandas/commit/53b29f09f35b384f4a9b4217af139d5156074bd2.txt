commit 53b29f09f35b384f4a9b4217af139d5156074bd2
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Aug 30 17:23:07 2011 -0400

    DOC: more on basics

diff --git a/doc/source/basics.rst b/doc/source/basics.rst
index 0ec4fd77f..5f0925246 100644
--- a/doc/source/basics.rst
+++ b/doc/source/basics.rst
@@ -14,11 +14,13 @@ objects. To get started, import numpy and load pandas into your namespace:
    :suppress:
 
    import numpy as np
+   randn = np.random.randn
    np.set_printoptions(precision=4, suppress=True)
 
 .. ipython:: python
 
-   import numpy as np
+   import numpy as np;
+   randn = np.random.randn # will use this a lot for examples
    from pandas import *
 
 Here is a basic tenet to keep in mind: **data alignment is intrinsic**. Link
@@ -57,11 +59,11 @@ index is passed, one will be created having values ``[0, ..., len(data) - 1]``.
 
 .. ipython:: python
 
-   s = Series(np.random.randn(5), index=['a', 'b', 'c', 'd', 'e'])
+   s = Series(randn(5), index=['a', 'b', 'c', 'd', 'e'])
    s
    s.index
 
-   Series(np.random.randn(5))
+   Series(randn(5))
 
 .. note::
 
@@ -345,8 +347,8 @@ union of the column and row labels.
 
 .. ipython:: python
 
-    df = DataFrame(np.random.randn(10, 4), columns=['A', 'B', 'C', 'D'])
-    df2 = DataFrame(np.random.randn(7, 3), columns=['A', 'B', 'C'])
+    df = DataFrame(randn(10, 4), columns=['A', 'B', 'C', 'D'])
+    df2 = DataFrame(randn(7, 3), columns=['A', 'B', 'C'])
     df + df2
 
 When doing an operation between DataFrame and Series, the default behavior is
@@ -366,7 +368,7 @@ column-wise:
 .. ipython:: python
 
    index = DateRange('1/1/2000', periods=8)
-   df = DataFrame(np.random.randn(8, 3), index=index,
+   df = DataFrame(randn(8, 3), index=index,
                   columns=['A', 'B', 'C'])
    df
    type(df['A'])
@@ -391,15 +393,30 @@ Operations with scalars are just as you would expect:
    1 / df
    df ** 4
 
+Transposing
+~~~~~~~~~~~
+
+To transpose, access the **T** attribute (also the *transpose* function),
+similar to an ndarray:
+
+.. ipython::
+
+   # only show the first 5 rows
+   In [0]: df[:5].T
+
 DataFrame interop with NumPy functions
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-Elementwise NumPy ufuncs (log, exp, sqrt, ...) can be used with no issues on
-DataFrame, assuming the data within are numeric:
+Elementwise NumPy ufuncs (log, exp, sqrt, ...) and various other NumPy functions
+can be used with no issues on DataFrame, assuming the data within are numeric:
 
 .. ipython:: python
 
    np.exp(df)
+   np.asarray(df)
+
+DataFrame is not intended to be a drop-in replacement for ndarray as its
+indexing semantics are quite different in places from a matrix.
 
 Console display
 ~~~~~~~~~~~~~~~
@@ -414,7 +431,7 @@ R package):
    baseball
 
 However, using **to_string** will display any DataFrame in tabular form, though
-it won't always fit the he console width:
+it won't always fit the console width:
 
 .. ipython:: python
 
@@ -452,7 +469,7 @@ Construction of WidePanels works about like you would expect:
 
 .. ipython:: python
 
-   wp = WidePanel(np.random.randn(2, 5, 4), items=['Item1', 'Item2'],
+   wp = WidePanel(randn(2, 5, 4), items=['Item1', 'Item2'],
                   major_axis=DateRange('1/1/2000', periods=5),
                   minor_axis=['A', 'B', 'C', 'D'])
    wp
@@ -462,8 +479,8 @@ Construction of WidePanels works about like you would expect:
 
 .. ipython:: python
 
-   data = {'Item1' : DataFrame(np.random.randn(4, 3)),
-           'Item2' : DataFrame(np.random.randn(4, 2))}
+   data = {'Item1' : DataFrame(randn(4, 3)),
+           'Item2' : DataFrame(randn(4, 2))}
    WidePanel(data)
 
 Note that the values in the dict need only be **convertible to
@@ -565,6 +582,38 @@ unlike the axis labels, cannot be assigned to.
 Descriptive statistics
 ----------------------
 
+A large number of methods for computing descriptive statistics and other related
+operations on :ref:`Series <api.series.stats>`, :ref:`DataFrame
+<api.dataframe.stats>`, and :ref:`WidePanel <api.panel.stats>`. Most of these
+are aggregations (hence producing a lower-dimensional result) like **sum**,
+**mean**, and **quantile**, but some of them, like **cumsum** and **cumprod**,
+produce an object of the same size. Generally speaking, these methods take an
+**axis** argument, just like *ndarray.{sum, std, ...}*, but the axis can be
+specified by name or integer:
+
+  - **Series**: no axis argument needed
+  - **DataFrame**: "index" (axis=0), "columns" (axis=1)
+  - **WidePanel**: "items" (axis=0), "major" (axis=1), "minor" (axis=2)
+
+Summarizing data: describe
+~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+For floating point data, there is a convenient ``describe`` function which
+computes a variety of summary statistics about a Series or the columns of a
+DataFrame (excluding NAs of course):
+
+.. ipython:: python
+
+    series = Series(randn(1000))
+	series[::2] = np.nan
+    series.describe()
+    frame = DataFrame(randn(1000, 5))
+	frame.ix[::2] = np.nan
+    frame.describe()
+
+Correlations between objects
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
 .. _basics.apply:
 
 Function application
@@ -596,9 +645,9 @@ either match on the *index* or *columns* via the **axis** keyword:
 .. ipython:: python
    :suppress:
 
-   d = {'one' : Series(np.random.randn(3), index=['a', 'b', 'c']),
-        'two' : Series(np.random.randn(4), index=['a', 'b', 'c', 'd']),
-        'three' : Series(np.random.randn(3), index=['b', 'c', 'd'])}
+   d = {'one' : Series(randn(3), index=['a', 'b', 'c']),
+        'two' : Series(randn(4), index=['a', 'b', 'c', 'd']),
+        'three' : Series(randn(3), index=['b', 'c', 'd'])}
    df = DataFrame(d)
 
 .. ipython:: python
@@ -637,9 +686,18 @@ two DataFrame objects, you may wish to treat NaN as 0 unless both DataFrames
 are missing that value, in which case the result will be NaN (you can later
 replace NaN with some other value using **fillna** if you wish).
 
+.. ipython:: python
+   :suppress:
+
+   df2 = df.copy()
+   df2['three']['a'] = 1.
+
 .. ipython:: python
 
    df
+   df2
+   df + df2
+   df.add(df2, fill_value=0)
 
 .. _basics.reindexing:
 
@@ -743,18 +801,18 @@ can accept either a dict or a function:
 ::
 
     >>> s
-	a    -0.544970223484
-	b    -0.946388873158
-	c    0.0360854957476
-	d    -0.795018577574
-	e    0.195977583894
-
-	>>> s.rename(str.upper)
-	A    -0.544970223484
-	B    -0.946388873158
-	C    0.0360854957476
-	D    -0.795018577574
-	E    0.195977583894
+    a    -0.544970223484
+    b    -0.946388873158
+    c    0.0360854957476
+    d    -0.795018577574
+    e    0.195977583894
+
+    >>> s.rename(str.upper)
+    A    -0.544970223484
+    B    -0.946388873158
+    C    0.0360854957476
+    D    -0.795018577574
+    E    0.195977583894
 
 
 Iteration
diff --git a/doc/source/dataframe.rst b/doc/source/dataframe.rst
index 6c12fb93d..fb0cc21b4 100644
--- a/doc/source/dataframe.rst
+++ b/doc/source/dataframe.rst
@@ -6,15 +6,6 @@
 DataFrame
 *********
 
-Transposing
-~~~~~~~~~~~
-
-To transpose, access the **T** attribute, similar to an ndarray
-
-.. ipython:: python
-
-    df.T
-    df.T[date]
 
 Slicing ranges
 ~~~~~~~~~~~~~~
@@ -42,63 +33,6 @@ As we will see later on, the same operation could be accomplished by
 reindexing. However, the syntax would be more verbose; hence, the
 inclusion of this indexing method.
 
-Arithmetic
-----------
-
-.. seealso:: :ref:`Series arithmetic <series.arithmetic>`
-
-Binary operations with DataFrame have similar index-matching behavior
-as with Series objects. The addition is the matching of column names
-between DataFrame objects or Series. We will detail how the
-interactions work in each case.
-
-Binary operation between DataFrame and DataFrame
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-When combining two DataFrames, both index and column values must match
-for two values to be combined. If there is no match for a particular
-(index, column) pair, the result for that location will be NaN. To
-illustrate, let's return to a similar example from the beginning of
-the tutorial:
-
-.. ipython:: python
-
-    df = DataFrame(data, index=index)
-    df
-    df + df[:7]
-
-In this first example, we can see that the indices have been combined
-together, and the portion where dates are missing in one of the frames
-has resulted in all NaN values. The resulting columns will also be the
-union of the frames' columns:
-
-.. ipython:: python
-
-    df2 = df.copy()
-    df2['D'] = 5
-    del df2['A']
-    df + df2[::2]
-
-Here, neither **A** nor **D** was in both frames: they appear in the
-result but are all NaN. An argument could be made to exclude these
-columns, but it is very frequently meaningful to know that there was
-no overlap in a particular portion of the data set.
-
-Binary operation between DataFrame and Series
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-Binary operation with scalar value
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-Scalar operations work just as expected:
-
-.. ipython:: python
-
-    df = df[:5]
-    df * 5 + 2
-    1 / df
-    df ** 4
-
 Basic statistical functions
 ---------------------------
 
@@ -168,22 +102,6 @@ computing the cross-sectional or time series z-score:
     2009-02-27 00:00:00    -1.16502       1.7612         -1.15894       -0.437405
     ...
 
-.. autosummary::
-   :toctree: generated/
-
-   DataFrame.count
-   DataFrame.sum
-   DataFrame.cumsum
-   DataFrame.product
-   DataFrame.mean
-   DataFrame.median
-   DataFrame.min
-   DataFrame.max
-   DataFrame.mad
-   DataFrame.var
-   DataFrame.std
-   DataFrame.skew
-
 Correlation
 ~~~~~~~~~~~
 
