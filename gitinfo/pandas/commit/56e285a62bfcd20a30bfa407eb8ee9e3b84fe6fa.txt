commit 56e285a62bfcd20a30bfa407eb8ee9e3b84fe6fa
Author: dgram0 <davidg@twosigma.com>
Date:   Fri Feb 26 14:41:37 2016 -0500

    CLN/BUILD: Fix warnings on build
    
    closes #12471

diff --git a/doc/source/whatsnew/v0.18.0.txt b/doc/source/whatsnew/v0.18.0.txt
index eb472c337..7f3e9ac83 100644
--- a/doc/source/whatsnew/v0.18.0.txt
+++ b/doc/source/whatsnew/v0.18.0.txt
@@ -1049,6 +1049,7 @@ Bug Fixes
 - Bug in ``pd.read_stata`` with version <= 108 files (:issue:`12232`)
 - Bug in ``Series.resample`` using a frequency of ``Nano`` when the index is a ``DatetimeIndex`` and contains non-zero nanosecond parts (:issue:`12037`)
 - Bug in resampling with ``.nunique`` and a sparse index (:issue:`12352`)
+- Removed some compiler warnings (:issue:`12471`)
 
 - Bug in ``NaT`` subtraction from ``Timestamp`` or ``DatetimeIndex`` with timezones (:issue:`11718`)
 - Bug in subtraction of ``Series`` of a single tz-aware ``Timestamp`` (:issue:`12290`)
diff --git a/doc/source/whatsnew/v0.18.1.txt b/doc/source/whatsnew/v0.18.1.txt
index 70a1ad4a3..8c66cd0c1 100644
--- a/doc/source/whatsnew/v0.18.1.txt
+++ b/doc/source/whatsnew/v0.18.1.txt
@@ -43,3 +43,4 @@ Performance Improvements
 
 Bug Fixes
 ~~~~~~~~~
+
diff --git a/pandas/src/datetime/np_datetime_strings.c b/pandas/src/datetime/np_datetime_strings.c
index 1e59b31da..33ddc6c6e 100644
--- a/pandas/src/datetime/np_datetime_strings.c
+++ b/pandas/src/datetime/np_datetime_strings.c
@@ -400,7 +400,7 @@ parse_iso_8601_datetime(char *str, int len,
      * an error code will be retuned because the date is ambigous
     */
     int has_sep = 0;
-    char sep;
+    char sep = '\0';
     char valid_sep[] = {'-', '.', '/', '\\', ' '};
     int valid_sep_len = 5;
 
diff --git a/pandas/src/klib/khash.h b/pandas/src/klib/khash.h
index 10c437c22..0f1a17c63 100644
--- a/pandas/src/klib/khash.h
+++ b/pandas/src/klib/khash.h
@@ -152,7 +152,7 @@ typedef khint_t khiter_t;
 #define __ac_set_isempty_false(flag, i) (flag[i>>5]&=~(1ul<<(i&0x1fU)))
 #define __ac_set_isempty_true(flag, i) (flag[i>>5]|=(1ul<<(i&0x1fU)))
 #define __ac_set_isboth_false(flag, i) __ac_set_isempty_false(flag, i)
-#define __ac_set_isdel_true(flag, i) (0)
+#define __ac_set_isdel_true(flag, i) ((void)0)
 
 #ifdef KHASH_LINEAR
 #define __ac_inc(k, m) 1
diff --git a/pandas/src/msgpack/unpack.h b/pandas/src/msgpack/unpack.h
index 3f9d0f1b6..591fad1ae 100644
--- a/pandas/src/msgpack/unpack.h
+++ b/pandas/src/msgpack/unpack.h
@@ -265,9 +265,9 @@ static inline int unpack_callback_ext(unpack_user* u, const char* base, const ch
     }
     // length also includes the typecode, so the actual data is length-1
 #if PY_MAJOR_VERSION == 2
-    py = PyObject_CallFunction(u->ext_hook, "(is#)", typecode, pos, (Py_ssize_t)length-1);
+    py = PyObject_CallFunction(u->ext_hook, (char*)"(is#)", typecode, pos, (Py_ssize_t)length-1);
 #else
-    py = PyObject_CallFunction(u->ext_hook, "(iy#)", typecode, pos, (Py_ssize_t)length-1);
+    py = PyObject_CallFunction(u->ext_hook, (char*)"(iy#)", typecode, pos, (Py_ssize_t)length-1);
 #endif
     if (!py)
         return -1;
diff --git a/pandas/src/msgpack/unpack_template.h b/pandas/src/msgpack/unpack_template.h
index d34eceda6..95af67355 100644
--- a/pandas/src/msgpack/unpack_template.h
+++ b/pandas/src/msgpack/unpack_template.h
@@ -89,7 +89,7 @@ static inline int unpack_execute(unpack_context* ctx, const char* data, size_t l
     */
     unpack_user* user = &ctx->user;
 
-    PyObject* obj;
+    PyObject* obj = NULL;
     unpack_stack* c = NULL;
 
     int ret;
diff --git a/pandas/src/parser/io.h b/pandas/src/parser/io.h
index f5831ad99..2ae72ff8a 100644
--- a/pandas/src/parser/io.h
+++ b/pandas/src/parser/io.h
@@ -29,7 +29,7 @@ typedef struct _file_source {
 
 #define FS(source) ((file_source *)source)
 
-#if !defined(_WIN32)
+#if !defined(_WIN32) && !defined(HAVE_MMAP)
 #define HAVE_MMAP
 #endif
 
diff --git a/pandas/src/parser/tokenizer.c b/pandas/src/parser/tokenizer.c
index 8fd367404..a19930a5c 100644
--- a/pandas/src/parser/tokenizer.c
+++ b/pandas/src/parser/tokenizer.c
@@ -2185,7 +2185,7 @@ double xstrtod(const char *str, char **endptr, char decimal,
     p++;
     num_digits++;
 
-    p += (tsep != '\0' & *p == tsep);
+    p += (tsep != '\0' && *p == tsep);
   }
 
   // Process decimal part
@@ -2358,7 +2358,7 @@ double precise_xstrtod(const char *str, char **endptr, char decimal,
             ++exponent;
 
         p++;
-        p += (tsep != '\0' & *p == tsep);
+        p += (tsep != '\0' && *p == tsep);
     }
 
     // Process decimal part
diff --git a/pandas/src/parser/tokenizer.h b/pandas/src/parser/tokenizer.h
index 6aac34ecc..a2d7925df 100644
--- a/pandas/src/parser/tokenizer.h
+++ b/pandas/src/parser/tokenizer.h
@@ -267,7 +267,7 @@ double xstrtod(const char *p, char **q, char decimal, char sci, char tsep, int s
 double precise_xstrtod(const char *p, char **q, char decimal, char sci, char tsep, int skip_trailing);
 double round_trip(const char *p, char **q, char decimal, char sci, char tsep, int skip_trailing);
 //int P_INLINE to_complex(char *item, double *p_real, double *p_imag, char sci, char decimal);
-int P_INLINE to_longlong(char *item, long long *p_value);
+//int P_INLINE to_longlong(char *item, long long *p_value);
 //int P_INLINE to_longlong_thousands(char *item, long long *p_value, char tsep);
 int to_boolean(const char *item, uint8_t *val);
 
diff --git a/pandas/src/period_helper.c b/pandas/src/period_helper.c
index 86672e1a7..6078be6fc 100644
--- a/pandas/src/period_helper.c
+++ b/pandas/src/period_helper.c
@@ -30,8 +30,6 @@ static int floordiv(int x, int divisor) {
     }
 }
 
-static asfreq_info NULL_AF_INFO;
-
 /* Table with day offsets for each month (0-based, without and with leap) */
 static int month_offset[2][13] = {
     { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365 },
@@ -299,7 +297,7 @@ PANDAS_INLINE int get_freq_group_index(int freq) {
     return freq/1000;
 }
 
-static int calc_conversion_factors_matrix_size() {
+static int calc_conversion_factors_matrix_size(void) {
     int matrix_size = 0;
     int index;
     for (index=0;; index++) {
@@ -348,7 +346,7 @@ static npy_int64 calculate_conversion_factor(int start_value, int end_value) {
     return conversion_factor;
 }
 
-static void populate_conversion_factors_matrix() {
+static void populate_conversion_factors_matrix(void) {
     int row_index_index;
 	int row_value, row_index;
     int column_index_index;
diff --git a/pandas/src/ujson/lib/ultrajsondec.c b/pandas/src/ujson/lib/ultrajsondec.c
index 3e316eb26..9a4d5972b 100644
--- a/pandas/src/ujson/lib/ultrajsondec.c
+++ b/pandas/src/ujson/lib/ultrajsondec.c
@@ -76,12 +76,6 @@ static JSOBJ SetError( struct DecoderState *ds, int offset, const char *message)
   return NULL;
 }
 
-static void ClearError( struct DecoderState *ds)
-{
-  ds->dec->errorOffset = 0;
-  ds->dec->errorStr = NULL;
-}
-
 double createDouble(double intNeg, double intValue, double frcValue, int frcDecimalCount)
 {
   static const double g_pow10[] = {1.0, 0.1, 0.01, 0.001, 0.0001, 0.00001, 0.000001,0.0000001, 0.00000001, 0.000000001, 0.0000000001, 0.00000000001, 0.000000000001, 0.0000000000001, 0.00000000000001, 0.000000000000001};
