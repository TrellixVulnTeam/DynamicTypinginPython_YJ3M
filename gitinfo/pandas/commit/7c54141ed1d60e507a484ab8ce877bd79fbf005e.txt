commit 7c54141ed1d60e507a484ab8ce877bd79fbf005e
Author: Chang She <changshe@gmail.com>
Date:   Tue Jul 24 09:09:19 2012 -0400

    BUG: plot styling bugs #1666 #1665 #1658

diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index d0053b478..af564c4da 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -69,10 +69,10 @@ class TestSeriesPlots(unittest.TestCase):
         rects = ax.patches
 
         conv = colors.colorConverter
-        for i, rect in enumerate(rects[:5]):
+        for i, rect in enumerate(rects[::5]):
             xp = conv.to_rgba(default_colors[i])
             rs = rect.get_facecolor()
-            self.assert_(xp, rs)
+            self.assert_(xp == rs)
 
         plt.close('all')
 
@@ -81,11 +81,37 @@ class TestSeriesPlots(unittest.TestCase):
         rects = ax.patches
 
         conv = colors.colorConverter
-        for i, rect in enumerate(rects[:5]):
+        for i, rect in enumerate(rects[::5]):
             xp = conv.to_rgba(custom_colors[i])
             rs = rect.get_facecolor()
-            self.assert_(xp, rs)
+            self.assert_(xp == rs)
 
+    @slow
+    def test_bar_linewidth(self):
+        df = DataFrame(np.random.randn(5, 5))
+
+        # regular
+        ax = df.plot(kind='bar', linewidth=2)
+        for r in ax.patches:
+            self.assert_(r.get_linewidth() == 2)
+
+        # stacked
+        ax = df.plot(kind='bar', stacked=True, linewidth=2)
+        for r in ax.patches:
+            self.assert_(r.get_linewidth() == 2)
+
+        # subplots
+        axes = df.plot(kind='bar', linewidth=2, subplots=True)
+        for ax in axes:
+            for r in ax.patches:
+                self.assert_(r.get_linewidth() == 2)
+
+    @slow
+    def test_1rotation(self):
+        df = DataFrame(np.random.randn(5, 5))
+        ax = df.plot(rot=30)
+        for l in ax.get_xticklabels():
+            self.assert_(l.get_rotation() == 30)
 
     @slow
     def test_irregular_datetime(self):
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index f7a850c62..8c5f718ec 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -996,16 +996,23 @@ class LinePlot(MPLPlot):
     def _post_plot_logic(self):
         df = self.data
 
-        condition = (not self._use_dynamic_x
+        condition = (not self._use_dynamic_x()
                      and df.index.is_all_dates
                      and not self.subplots
                      or (self.subplots and self.sharex))
 
         index_name = self._get_index_name()
 
+        rot = 30
+        if self.rot is not None:
+            rot = self.rot
+
         for ax in self.axes:
             if condition:
-                format_date_labels(ax)
+                format_date_labels(ax, rot=rot)
+            elif self.rot is not None:
+                for l in ax.get_xticklabels():
+                    l.set_rotation(self.rot)
 
             if index_name is not None:
                 ax.set_xlabel(index_name)
@@ -1016,6 +1023,7 @@ class LinePlot(MPLPlot):
 
 
 class BarPlot(MPLPlot):
+
     _default_rot = {'bar' : 90, 'barh' : 0}
 
     def __init__(self, data, **kwargs):
@@ -1027,12 +1035,6 @@ class BarPlot(MPLPlot):
         if self.rot is None:
             self.rot = self._default_rot[self.kind]
 
-        if self.fontsize is None:
-            if len(self.data) < 10:
-                self.fontsize = 12
-            else:
-                self.fontsize = 10
-
     @property
     def bar_f(self):
         if self.kind == 'bar':
@@ -1066,15 +1068,13 @@ class BarPlot(MPLPlot):
 
             if self.subplots:
                 ax = self._get_ax(i) #self.axes[i]
-                rect = bar_f(ax, self.ax_pos, y, 0.5, start=pos_prior,
-                             linewidth=1, **kwds)
+                rect = bar_f(ax, self.ax_pos, y, 0.5, start=pos_prior, **kwds)
                 ax.set_title(label)
             elif self.stacked:
                 mask = y > 0
                 start = np.where(mask, pos_prior, neg_prior)
-
                 rect = bar_f(ax, self.ax_pos, y, 0.5, start=start,
-                             label=label, linewidth=1, **kwds)
+                             label=label, **kwds)
                 pos_prior = pos_prior + np.where(mask, y, 0)
                 neg_prior = neg_prior + np.where(mask, 0, y)
             else:
@@ -1385,12 +1385,12 @@ def _stringify(x):
         return str(x)
 
 
-def format_date_labels(ax):
+def format_date_labels(ax, rot):
     # mini version of autofmt_xdate
     try:
         for label in ax.get_xticklabels():
             label.set_ha('right')
-            label.set_rotation(30)
+            label.set_rotation(rot)
         fig = ax.get_figure()
         fig.subplots_adjust(bottom=0.2)
     except Exception: # pragma: no cover
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index 429573bf4..9db99c8f2 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -800,6 +800,17 @@ class TestTSPlot(unittest.TestCase):
             colors.add(line.get_color())
         self.assert_(len(colors) == 4)
 
+    @slow
+    def test_format_date_axis(self):
+        rng = date_range('1/1/2012', periods=12, freq='M')
+        df = DataFrame(np.random.randn(len(rng), 3), rng)
+        ax = df.plot()
+        xaxis = ax.get_xaxis()
+        for l in xaxis.get_ticklabels():
+            if len(l.get_text()) > 0:
+                self.assert_(l.get_rotation() == 30)
+
+
 PNG_PATH = 'tmp.png'
 def _check_plot_works(f, freq=None, series=None, *args, **kwargs):
     import matplotlib.pyplot as plt
