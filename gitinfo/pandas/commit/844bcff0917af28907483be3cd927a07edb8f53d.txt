commit 844bcff0917af28907483be3cd927a07edb8f53d
Author: David Rasch <rasch@raschnet.com>
Date:   Wed Oct 9 20:56:46 2013 -0400

    ENH: add to_dataframe method to Series

diff --git a/doc/source/api.rst b/doc/source/api.rst
index 8772b858d..dfb562bcc 100644
--- a/doc/source/api.rst
+++ b/doc/source/api.rst
@@ -438,6 +438,7 @@ Serialization / IO / Conversion
    Series.to_pickle
    Series.to_csv
    Series.to_dict
+   Series.to_frame
    Series.to_sparse
    Series.to_string
    Series.to_clipboard
diff --git a/doc/source/v0.13.0.txt b/doc/source/v0.13.0.txt
index c6a4c280c..946a45b7d 100644
--- a/doc/source/v0.13.0.txt
+++ b/doc/source/v0.13.0.txt
@@ -492,6 +492,8 @@ Enhancements
   - DatetimeIndex is now in the API documentation, see :ref:`here<api.datetimeindex>`
   - :meth:`~pandas.io.json.json_normalize` is a new method to allow you to create a flat table
     from semi-structured JSON data. :ref:`See the docs<io.json_normalize>` (:issue:`1067`)
+  - ``Series`` now supports ``to_frame`` method to convert it to a single-column DataFrame
+    (:issue:`5164`)
 
 .. _whatsnew_0130.experimental:
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index d185939d6..34b363499 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -827,12 +827,7 @@ class Series(generic.NDFrame):
             raise TypeError('Cannot reset_index inplace on a Series '
                             'to create a DataFrame')
         else:
-            from pandas.core.frame import DataFrame
-            if name is None:
-                df = DataFrame(self)
-            else:
-                df = DataFrame({name: self})
-
+            df = self.to_frame(name)
             return df.reset_index(level=level, drop=drop)
 
     def __unicode__(self):
@@ -1028,6 +1023,27 @@ class Series(generic.NDFrame):
         """
         return dict(compat.iteritems(self))
 
+    def to_frame(self, name=None):
+        """
+        Convert Series to DataFrame
+
+        Parameters
+        ----------
+        name : object, default None
+            The passed name should substitute for the series name (if it has one).
+
+        Returns
+        -------
+        data_frame : DataFrame
+        """
+        from pandas.core.frame import DataFrame
+        if name is None:
+            df = DataFrame(self)
+        else:
+            df = DataFrame({name: self})
+
+        return df
+
     def to_sparse(self, kind='block', fill_value=None):
         """
         Convert Series to SparseSeries
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 8abc068fd..22d8d79ec 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -30,6 +30,7 @@ from pandas.compat import StringIO, lrange, range, zip, u, OrderedDict, long
 from pandas import compat
 from pandas.util.testing import (assert_series_equal,
                                  assert_almost_equal,
+                                 assert_frame_equal,
                                  ensure_clean)
 import pandas.util.testing as tm
 
@@ -3606,6 +3607,21 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         rs = s.tolist()
         self.assertEqual(self.ts.index[0], rs[0])
 
+    def test_to_frame(self):
+        self.ts.name = None
+        rs = self.ts.to_frame()
+        xp = pd.DataFrame(self.ts.values, index=self.ts.index)
+        assert_frame_equal(rs, xp)
+
+        self.ts.name = 'testname'
+        rs = self.ts.to_frame()
+        xp = pd.DataFrame(dict(testname=self.ts.values), index=self.ts.index)
+        assert_frame_equal(rs, xp)
+
+        rs = self.ts.to_frame(name='testdifferent')
+        xp = pd.DataFrame(dict(testdifferent=self.ts.values), index=self.ts.index)
+        assert_frame_equal(rs, xp)
+
     def test_to_dict(self):
         self.assert_(np.array_equal(Series(self.ts.to_dict()), self.ts))
 
