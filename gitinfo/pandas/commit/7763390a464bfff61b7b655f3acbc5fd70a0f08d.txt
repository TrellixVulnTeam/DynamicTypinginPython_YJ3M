commit 7763390a464bfff61b7b655f3acbc5fd70a0f08d
Author: RaisaDZ <34237447+RaisaDZ@users.noreply.github.com>
Date:   Thu Mar 19 18:56:22 2020 +0000

    CLN: Update docstring decorator from Appender to doc (#32828)

diff --git a/pandas/core/arrays/numpy_.py b/pandas/core/arrays/numpy_.py
index e8333606e..3058e1d60 100644
--- a/pandas/core/arrays/numpy_.py
+++ b/pandas/core/arrays/numpy_.py
@@ -6,7 +6,7 @@ from numpy.lib.mixins import NDArrayOperatorsMixin
 
 from pandas._libs import lib
 from pandas.compat.numpy import function as nv
-from pandas.util._decorators import Appender
+from pandas.util._decorators import doc
 from pandas.util._validators import validate_fillna_kwargs
 
 from pandas.core.dtypes.dtypes import ExtensionDtype
@@ -449,7 +449,7 @@ class PandasArray(ExtensionArray, ExtensionOpsMixin, NDArrayOperatorsMixin):
 
         return result
 
-    @Appender(ExtensionArray.searchsorted.__doc__)
+    @doc(ExtensionArray.searchsorted)
     def searchsorted(self, value, side="left", sorter=None):
         return searchsorted(self.to_numpy(), value, side=side, sorter=sorter)
 
diff --git a/pandas/core/indexes/extension.py b/pandas/core/indexes/extension.py
index 6851aeec0..f38a4fb83 100644
--- a/pandas/core/indexes/extension.py
+++ b/pandas/core/indexes/extension.py
@@ -7,7 +7,7 @@ import numpy as np
 
 from pandas.compat.numpy import function as nv
 from pandas.errors import AbstractMethodError
-from pandas.util._decorators import Appender, cache_readonly
+from pandas.util._decorators import cache_readonly, doc
 
 from pandas.core.dtypes.common import (
     ensure_platform_int,
@@ -231,7 +231,7 @@ class ExtensionIndex(Index):
     def _get_engine_target(self) -> np.ndarray:
         return self._data._values_for_argsort()
 
-    @Appender(Index.dropna.__doc__)
+    @doc(Index.dropna)
     def dropna(self, how="any"):
         if how not in ("any", "all"):
             raise ValueError(f"invalid how option: {how}")
@@ -253,7 +253,7 @@ class ExtensionIndex(Index):
         arr = type(self._data)._concat_same_type(to_concat)
         return type(self)._simple_new(arr, name=name)
 
-    @Appender(Index.take.__doc__)
+    @doc(Index.take)
     def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):
         nv.validate_take(tuple(), kwargs)
         indices = ensure_platform_int(indices)
@@ -283,7 +283,7 @@ class ExtensionIndex(Index):
             result = result[~result.isna()]
         return self._shallow_copy(result)
 
-    @Appender(Index.map.__doc__)
+    @doc(Index.map)
     def map(self, mapper, na_action=None):
         # Try to run function on index first, and then on elements of index
         # Especially important for group-by functionality
@@ -300,7 +300,7 @@ class ExtensionIndex(Index):
         except Exception:
             return self.astype(object).map(mapper)
 
-    @Appender(Index.astype.__doc__)
+    @doc(Index.astype)
     def astype(self, dtype, copy=True):
         if is_dtype_equal(self.dtype, dtype) and copy is False:
             # Ensure that self.astype(self.dtype) is self
