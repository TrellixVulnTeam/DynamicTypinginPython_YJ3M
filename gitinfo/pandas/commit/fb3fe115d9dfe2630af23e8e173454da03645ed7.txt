commit fb3fe115d9dfe2630af23e8e173454da03645ed7
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Thu Nov 7 13:01:51 2019 -0800

    CLN: annotate __str__ and __repr__ methods (#29467)

diff --git a/pandas/_libs/internals.pyx b/pandas/_libs/internals.pyx
index ff143fea8..db9f16d46 100644
--- a/pandas/_libs/internals.pyx
+++ b/pandas/_libs/internals.pyx
@@ -53,7 +53,7 @@ cdef class BlockPlacement:
             self._as_array = arr
             self._has_array = True
 
-    def __str__(self):
+    def __str__(self) -> str:
         cdef:
             slice s = self._ensure_has_slice()
         if s is not None:
@@ -63,7 +63,7 @@ cdef class BlockPlacement:
 
         return '%s(%r)' % (self.__class__.__name__, v)
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         return str(self)
 
     def __len__(self):
diff --git a/pandas/_libs/interval.pyx b/pandas/_libs/interval.pyx
index b13ce7c29..2bd385248 100644
--- a/pandas/_libs/interval.pyx
+++ b/pandas/_libs/interval.pyx
@@ -377,7 +377,7 @@ cdef class Interval(IntervalMixin):
 
         return left, right
 
-    def __repr__(self):
+    def __repr__(self) -> str:
 
         left, right = self._repr_base()
         name = type(self).__name__
@@ -385,7 +385,7 @@ cdef class Interval(IntervalMixin):
             name=name, left=left, right=right, closed=self.closed)
         return repr_str
 
-    def __str__(self):
+    def __str__(self) -> str:
 
         left, right = self._repr_base()
         start_symbol = '[' if self.closed_left else '('
diff --git a/pandas/_libs/intervaltree.pxi.in b/pandas/_libs/intervaltree.pxi.in
index 6e3be19f2..8cb51be36 100644
--- a/pandas/_libs/intervaltree.pxi.in
+++ b/pandas/_libs/intervaltree.pxi.in
@@ -195,7 +195,7 @@ cdef class IntervalTree(IntervalMixin):
         return (result.to_array().astype('intp'),
                 missing.to_array().astype('intp'))
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         return ('<IntervalTree[{dtype},{closed}]: '
                 '{n_elements} elements>'.format(
                     dtype=self.dtype, closed=self.closed,
@@ -394,7 +394,7 @@ cdef class {{dtype_title}}Closed{{closed_title}}IntervalNode:
             else:
                 result.extend(self.center_left_indices)
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         if self.is_leaf_node:
             return ('<{{dtype_title}}Closed{{closed_title}}IntervalNode: '
                     '%s elements (terminal)>' % self.n_elements)
diff --git a/pandas/_libs/sparse.pyx b/pandas/_libs/sparse.pyx
index 6abaaca01..1944f9592 100644
--- a/pandas/_libs/sparse.pyx
+++ b/pandas/_libs/sparse.pyx
@@ -51,7 +51,7 @@ cdef class IntIndex(SparseIndex):
         args = (self.length, self.indices)
         return IntIndex, args
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         output = 'IntIndex\n'
         output += 'Indices: %s\n' % repr(self.indices)
         return output
@@ -341,7 +341,7 @@ cdef class BlockIndex(SparseIndex):
         args = (self.length, self.blocs, self.blengths)
         return BlockIndex, args
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         output = 'BlockIndex\n'
         output += 'Block locations: %s\n' % repr(self.blocs)
         output += 'Block lengths: %s' % repr(self.blengths)
diff --git a/pandas/_libs/tslibs/c_timestamp.pyx b/pandas/_libs/tslibs/c_timestamp.pyx
index 032363d86..8e4143a05 100644
--- a/pandas/_libs/tslibs/c_timestamp.pyx
+++ b/pandas/_libs/tslibs/c_timestamp.pyx
@@ -124,7 +124,7 @@ cdef class _Timestamp(datetime):
         # now __reduce_ex__ is defined and higher priority than __reduce__
         return self.__reduce__()
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         stamp = self._repr_base
         zone = None
 
diff --git a/pandas/_libs/tslibs/nattype.pyx b/pandas/_libs/tslibs/nattype.pyx
index 241aff0e1..e491d6111 100644
--- a/pandas/_libs/tslibs/nattype.pyx
+++ b/pandas/_libs/tslibs/nattype.pyx
@@ -259,10 +259,10 @@ cdef class _NaT(datetime):
         """
         return self.to_datetime64()
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         return 'NaT'
 
-    def __str__(self):
+    def __str__(self) -> str:
         return 'NaT'
 
     def isoformat(self, sep='T'):
diff --git a/pandas/_libs/tslibs/offsets.pyx b/pandas/_libs/tslibs/offsets.pyx
index aaefab6ee..434252677 100644
--- a/pandas/_libs/tslibs/offsets.pyx
+++ b/pandas/_libs/tslibs/offsets.pyx
@@ -422,7 +422,7 @@ class _BaseOffset:
         # that allows us to use methods that can go in a `cdef class`
         return self * 1
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         className = getattr(self, '_outputName', type(self).__name__)
 
         if abs(self.n) != 1:
diff --git a/pandas/_libs/tslibs/period.pyx b/pandas/_libs/tslibs/period.pyx
index e297d11c5..2512fdb89 100644
--- a/pandas/_libs/tslibs/period.pyx
+++ b/pandas/_libs/tslibs/period.pyx
@@ -2215,12 +2215,12 @@ cdef class _Period:
     def freqstr(self):
         return self.freq.freqstr
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         base, mult = get_freq_code(self.freq)
         formatted = period_format(self.ordinal, base)
         return "Period('%s', '%s')" % (formatted, self.freqstr)
 
-    def __str__(self):
+    def __str__(self) -> str:
         """
         Return a string representation for a particular DataFrame
         """
diff --git a/pandas/_libs/tslibs/timedeltas.pyx b/pandas/_libs/tslibs/timedeltas.pyx
index 8435f1cd7..9d8ed6238 100644
--- a/pandas/_libs/tslibs/timedeltas.pyx
+++ b/pandas/_libs/tslibs/timedeltas.pyx
@@ -1142,10 +1142,10 @@ cdef class _Timedelta(timedelta):
 
         return fmt.format(**comp_dict)
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         return "Timedelta('{val}')".format(val=self._repr_base(format='long'))
 
-    def __str__(self):
+    def __str__(self) -> str:
         return self._repr_base(format='long')
 
     def __bool__(self):
diff --git a/pandas/core/arrays/base.py b/pandas/core/arrays/base.py
index 733325483..2980f0d4c 100644
--- a/pandas/core/arrays/base.py
+++ b/pandas/core/arrays/base.py
@@ -913,7 +913,7 @@ class ExtensionArray:
     # Printing
     # ------------------------------------------------------------------------
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         from pandas.io.formats.printing import format_object_summary
 
         template = "{class_name}{data}\nLength: {length}, dtype: {dtype}"
diff --git a/pandas/core/arrays/categorical.py b/pandas/core/arrays/categorical.py
index ce174baa6..d3e9c6a41 100644
--- a/pandas/core/arrays/categorical.py
+++ b/pandas/core/arrays/categorical.py
@@ -2048,7 +2048,7 @@ class Categorical(ExtensionArray, PandasObject):
         result = formatter.to_string()
         return str(result)
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         """
         String representation.
         """
diff --git a/pandas/core/arrays/integer.py b/pandas/core/arrays/integer.py
index 630c3e50f..08b53e54b 100644
--- a/pandas/core/arrays/integer.py
+++ b/pandas/core/arrays/integer.py
@@ -45,7 +45,7 @@ class _IntegerDtype(ExtensionDtype):
     type = None  # type: Type
     na_value = np.nan
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         sign = "U" if self.is_unsigned_integer else ""
         return "{sign}Int{size}Dtype()".format(sign=sign, size=8 * self.itemsize)
 
diff --git a/pandas/core/arrays/interval.py b/pandas/core/arrays/interval.py
index 869019cd3..cc41797e7 100644
--- a/pandas/core/arrays/interval.py
+++ b/pandas/core/arrays/interval.py
@@ -860,7 +860,7 @@ class IntervalArray(IntervalMixin, ExtensionArray):
 
         return summary
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         template = (
             "{class_name}"
             "{data}\n"
diff --git a/pandas/core/arrays/numpy_.py b/pandas/core/arrays/numpy_.py
index bf7404e89..6f2bb095a 100644
--- a/pandas/core/arrays/numpy_.py
+++ b/pandas/core/arrays/numpy_.py
@@ -44,7 +44,7 @@ class PandasDtype(ExtensionDtype):
         self._name = dtype.name
         self._type = dtype.type
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         return "PandasDtype({!r})".format(self.name)
 
     @property
diff --git a/pandas/core/arrays/sparse/array.py b/pandas/core/arrays/sparse/array.py
index e1691de23..075cdf09d 100644
--- a/pandas/core/arrays/sparse/array.py
+++ b/pandas/core/arrays/sparse/array.py
@@ -1515,7 +1515,7 @@ class SparseArray(PandasObject, ExtensionArray, ExtensionOpsMixin):
     # ----------
     # Formatting
     # -----------
-    def __repr__(self):
+    def __repr__(self) -> str:
         return "{self}\nFill: {fill}\n{index}".format(
             self=printing.pprint_thing(self),
             fill=printing.pprint_thing(self.fill_value),
diff --git a/pandas/core/arrays/sparse/dtype.py b/pandas/core/arrays/sparse/dtype.py
index 6fd73ae14..4de958cc3 100644
--- a/pandas/core/arrays/sparse/dtype.py
+++ b/pandas/core/arrays/sparse/dtype.py
@@ -165,7 +165,7 @@ class SparseDtype(ExtensionDtype):
     def name(self):
         return "Sparse[{}, {}]".format(self.subtype.name, self.fill_value)
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         return self.name
 
     @classmethod
diff --git a/pandas/core/base.py b/pandas/core/base.py
index 61dc5f35c..bab358aa5 100644
--- a/pandas/core/base.py
+++ b/pandas/core/base.py
@@ -55,7 +55,7 @@ class PandasObject(DirNamesMixin):
         """class constructor (for this class it's just `__class__`"""
         return self.__class__
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         """
         Return a string representation for a particular object.
         """
diff --git a/pandas/core/computation/expr.py b/pandas/core/computation/expr.py
index 72367c8fb..39653c3d6 100644
--- a/pandas/core/computation/expr.py
+++ b/pandas/core/computation/expr.py
@@ -834,7 +834,7 @@ class Expr:
     def __call__(self):
         return self.terms(self.env)
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         return printing.pprint_thing(self.terms)
 
     def __len__(self):
diff --git a/pandas/core/computation/ops.py b/pandas/core/computation/ops.py
index dc0f38141..fe74b6994 100644
--- a/pandas/core/computation/ops.py
+++ b/pandas/core/computation/ops.py
@@ -82,7 +82,7 @@ class Term:
     def local_name(self):
         return self.name.replace(_LOCAL_TAG, "")
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         return pprint_thing(self.name)
 
     def __call__(self, *args, **kwargs):
@@ -182,7 +182,7 @@ class Constant(Term):
     def name(self):
         return self.value
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         # in python 2 str() of float
         # can truncate shorter than repr()
         return repr(self.name)
@@ -204,7 +204,7 @@ class Op:
     def __iter__(self):
         return iter(self.operands)
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         """
         Print a generic n-ary operator and its operands using infix notation.
         """
@@ -557,7 +557,7 @@ class UnaryOp(Op):
         operand = self.operand(env)
         return self.func(operand)
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         return pprint_thing("{0}({1})".format(self.op, self.operand))
 
     @property
@@ -582,7 +582,7 @@ class MathCall(Op):
         with np.errstate(all="ignore"):
             return self.func.func(*operands)
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         operands = map(str, self.operands)
         return pprint_thing("{0}({1})".format(self.op, ",".join(operands)))
 
diff --git a/pandas/core/computation/pytables.py b/pandas/core/computation/pytables.py
index 81658ab23..3a2ea30cb 100644
--- a/pandas/core/computation/pytables.py
+++ b/pandas/core/computation/pytables.py
@@ -229,7 +229,7 @@ class BinOp(ops.BinOp):
 
 
 class FilterBinOp(BinOp):
-    def __repr__(self):
+    def __repr__(self) -> str:
         return pprint_thing(
             "[Filter : [{lhs}] -> [{op}]".format(lhs=self.filter[0], op=self.filter[1])
         )
@@ -295,7 +295,7 @@ class JointFilterBinOp(FilterBinOp):
 
 
 class ConditionBinOp(BinOp):
-    def __repr__(self):
+    def __repr__(self) -> str:
         return pprint_thing("[Condition : [{cond}]]".format(cond=self.condition))
 
     def invert(self):
@@ -545,7 +545,7 @@ class Expr(expr.Expr):
             )
             self.terms = self.parse()
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         if self.terms is not None:
             return pprint_thing(self.terms)
         return pprint_thing(self.expr)
diff --git a/pandas/core/computation/scope.py b/pandas/core/computation/scope.py
index b11411eb2..81c7b04bf 100644
--- a/pandas/core/computation/scope.py
+++ b/pandas/core/computation/scope.py
@@ -139,7 +139,7 @@ class Scope:
         self.resolvers = DeepChainMap(*resolvers)
         self.temps = {}
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         scope_keys = _get_pretty_string(list(self.scope.keys()))
         res_keys = _get_pretty_string(list(self.resolvers.keys()))
         unicode_str = "{name}(scope={scope_keys}, resolvers={res_keys})"
diff --git a/pandas/core/dtypes/base.py b/pandas/core/dtypes/base.py
index 59ef17e3d..7d98a42e0 100644
--- a/pandas/core/dtypes/base.py
+++ b/pandas/core/dtypes/base.py
@@ -71,7 +71,7 @@ class ExtensionDtype:
 
     _metadata = ()  # type: Tuple[str, ...]
 
-    def __str__(self):
+    def __str__(self) -> str:
         return self.name
 
     def __eq__(self, other):
diff --git a/pandas/core/dtypes/dtypes.py b/pandas/core/dtypes/dtypes.py
index 7dca588e3..4a4ad076f 100644
--- a/pandas/core/dtypes/dtypes.py
+++ b/pandas/core/dtypes/dtypes.py
@@ -415,7 +415,7 @@ class CategoricalDtype(PandasExtensionDtype, ExtensionDtype):
                 return True
             return hash(self) == hash(other)
 
-    def __repr__(self):
+    def __repr__(self) -> str_type:
         tpl = "CategoricalDtype(categories={}ordered={})"
         if self.categories is None:
             data = "None, "
@@ -752,7 +752,7 @@ class DatetimeTZDtype(PandasExtensionDtype):
 
         raise TypeError("Could not construct DatetimeTZDtype")
 
-    def __str__(self):
+    def __str__(self) -> str_type:
         return "datetime64[{unit}, {tz}]".format(unit=self.unit, tz=self.tz)
 
     @property
@@ -889,7 +889,7 @@ class PeriodDtype(PandasExtensionDtype):
                 pass
         raise TypeError("could not construct PeriodDtype")
 
-    def __str__(self):
+    def __str__(self) -> str_type:
         return self.name
 
     @property
@@ -1068,7 +1068,7 @@ class IntervalDtype(PandasExtensionDtype):
     def type(self):
         return Interval
 
-    def __str__(self):
+    def __str__(self) -> str_type:
         if self.subtype is None:
             return "interval"
         return "interval[{subtype}]".format(subtype=self.subtype)
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index bafc37d47..2c778b701 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -2107,7 +2107,7 @@ class NDFrame(PandasObject, SelectionMixin):
     # ----------------------------------------------------------------------
     # Rendering Methods
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         # string representation based upon iterating over self
         # (since, by definition, `PandasContainers` are iterable)
         prepr = "[%s]" % ",".join(map(pprint_thing, self))
diff --git a/pandas/core/groupby/groupby.py b/pandas/core/groupby/groupby.py
index 81ba594c9..31d6e2206 100644
--- a/pandas/core/groupby/groupby.py
+++ b/pandas/core/groupby/groupby.py
@@ -402,7 +402,7 @@ class _GroupBy(PandasObject, SelectionMixin):
     def __len__(self):
         return len(self.groups)
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         # TODO: Better repr for GroupBy object
         return object.__repr__(self)
 
diff --git a/pandas/core/groupby/grouper.py b/pandas/core/groupby/grouper.py
index dc6336b17..ff3b4b109 100644
--- a/pandas/core/groupby/grouper.py
+++ b/pandas/core/groupby/grouper.py
@@ -210,7 +210,7 @@ class Grouper:
     def groups(self):
         return self.grouper.groups
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         attrs_list = (
             "{}={!r}".format(attr_name, getattr(self, attr_name))
             for attr_name in self._attributes
@@ -372,7 +372,7 @@ class Grouping:
 
                 self.grouper = self.grouper.astype("timedelta64[ns]")
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         return "Grouping({0})".format(self.name)
 
     def __iter__(self):
diff --git a/pandas/core/indexes/frozen.py b/pandas/core/indexes/frozen.py
index 4791ea2b7..08c86b81b 100644
--- a/pandas/core/indexes/frozen.py
+++ b/pandas/core/indexes/frozen.py
@@ -105,10 +105,10 @@ class FrozenList(PandasObject, list):
             )
         )
 
-    def __str__(self):
+    def __str__(self) -> str:
         return pprint_thing(self, quote_strings=True, escape_chars=("\t", "\r", "\n"))
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         return "%s(%s)" % (self.__class__.__name__, str(self))
 
     __setitem__ = __setslice__ = __delitem__ = __delslice__ = _disabled
@@ -148,7 +148,7 @@ class FrozenNDArray(PandasObject, np.ndarray):
         arr = self.view(np.ndarray).copy()
         return arr
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         """
         Return a string representation for this object.
         """
diff --git a/pandas/core/internals/blocks.py b/pandas/core/internals/blocks.py
index 448d2faf8..fd5d3f224 100644
--- a/pandas/core/internals/blocks.py
+++ b/pandas/core/internals/blocks.py
@@ -268,7 +268,7 @@ class Block(PandasObject):
             values, placement=placement, ndim=ndim, klass=self.__class__, dtype=dtype
         )
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         # don't want to print out all of the items here
         name = pprint_thing(self.__class__.__name__)
         if self._is_single_block:
diff --git a/pandas/core/internals/concat.py b/pandas/core/internals/concat.py
index 4ba485c85..f981c00fd 100644
--- a/pandas/core/internals/concat.py
+++ b/pandas/core/internals/concat.py
@@ -120,7 +120,7 @@ class JoinUnit:
         self.indexers = indexers
         self.shape = shape
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         return "{name}({block!r}, {indexers})".format(
             name=self.__class__.__name__, block=self.block, indexers=self.indexers
         )
diff --git a/pandas/core/internals/managers.py b/pandas/core/internals/managers.py
index 21ae820cf..74cebd8b5 100644
--- a/pandas/core/internals/managers.py
+++ b/pandas/core/internals/managers.py
@@ -325,7 +325,7 @@ class BlockManager(PandasObject):
     def __len__(self):
         return len(self.items)
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         output = pprint_thing(self.__class__.__name__)
         for i, ax in enumerate(self.axes):
             if i == 0:
diff --git a/pandas/core/resample.py b/pandas/core/resample.py
index e41846188..6d877bf66 100644
--- a/pandas/core/resample.py
+++ b/pandas/core/resample.py
@@ -86,7 +86,7 @@ class Resampler(_GroupBy, ShallowMixin):
         if self.groupby is not None:
             self.groupby._set_grouper(self._convert_obj(obj), sort=True)
 
-    def __str__(self):
+    def __str__(self) -> str:
         """
         Provide a nice str repr of our rolling object.
         """
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 73a05b4cd..bdc319c6d 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1555,7 +1555,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
     # ----------------------------------------------------------------------
     # Rendering Methods
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         """
         Return a string representation for a particular Series.
         """
diff --git a/pandas/errors/__init__.py b/pandas/errors/__init__.py
index 883af5c2e..73cc40ae0 100644
--- a/pandas/errors/__init__.py
+++ b/pandas/errors/__init__.py
@@ -174,7 +174,7 @@ class AbstractMethodError(NotImplementedError):
         self.methodtype = methodtype
         self.class_instance = class_instance
 
-    def __str__(self):
+    def __str__(self) -> str:
         if self.methodtype == "classmethod":
             name = self.class_instance.__name__
         else:
diff --git a/pandas/io/msgpack/exceptions.py b/pandas/io/msgpack/exceptions.py
index 40f5a8af8..2966f6992 100644
--- a/pandas/io/msgpack/exceptions.py
+++ b/pandas/io/msgpack/exceptions.py
@@ -19,7 +19,7 @@ class ExtraData(ValueError):
         self.unpacked = unpacked
         self.extra = extra
 
-    def __str__(self):
+    def __str__(self) -> str:
         return "unpack(b) received extra data."
 
 
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 35e6d5312..8580e0069 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -543,7 +543,7 @@ class HDFStore:
     def __len__(self):
         return len(self.groups())
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         return "{type}\nFile path: {path}\n".format(
             type=type(self), path=pprint_thing(self._path)
         )
@@ -1725,7 +1725,7 @@ class IndexCol:
         self.table = table
         return self
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         temp = tuple(
             map(pprint_thing, (self.name, self.cname, self.axis, self.pos, self.kind))
         )
@@ -2052,7 +2052,7 @@ class DataCol(IndexCol):
         self.set_data(data)
         self.set_metadata(metadata)
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         temp = tuple(
             map(
                 pprint_thing, (self.name, self.cname, self.dtype, self.kind, self.shape)
@@ -2518,7 +2518,7 @@ class Fixed:
     def format_type(self):
         return "fixed"
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         """ return a pretty representation of myself """
         self.infer_axes()
         s = self.shape
@@ -3213,7 +3213,7 @@ class Table(Fixed):
     def format_type(self):
         return "table"
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         """ return a pretty representation of myself """
         self.infer_axes()
         dc = ",dc->[{columns}]".format(
diff --git a/pandas/io/stata.py b/pandas/io/stata.py
index 07475f224..d62c3f7d2 100644
--- a/pandas/io/stata.py
+++ b/pandas/io/stata.py
@@ -862,10 +862,10 @@ class StataMissingValue:
         lambda self: self._value, doc="The binary representation of the missing value."
     )
 
-    def __str__(self):
+    def __str__(self) -> str:
         return self.string
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         # not perfect :-/
         return "{cls}({obj})".format(cls=self.__class__, obj=self)
 
diff --git a/pandas/tests/extension/decimal/array.py b/pandas/tests/extension/decimal/array.py
index a1988744d..93816e3a8 100644
--- a/pandas/tests/extension/decimal/array.py
+++ b/pandas/tests/extension/decimal/array.py
@@ -22,7 +22,7 @@ class DecimalDtype(ExtensionDtype):
     def __init__(self, context=None):
         self.context = context or decimal.getcontext()
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         return "DecimalDtype(context={})".format(self.context)
 
     @classmethod
diff --git a/pandas/tests/frame/test_alter_axes.py b/pandas/tests/frame/test_alter_axes.py
index 11d73fc37..9b76be18b 100644
--- a/pandas/tests/frame/test_alter_axes.py
+++ b/pandas/tests/frame/test_alter_axes.py
@@ -341,7 +341,7 @@ class TestDataFrameAlterAxes:
                 self.name = name
                 self.color = color
 
-            def __str__(self):
+            def __str__(self) -> str:
                 return "<Thing {self.name!r}>".format(self=self)
 
             # necessary for pretty KeyError
@@ -380,7 +380,7 @@ class TestDataFrameAlterAxes:
 
         class Thing(frozenset):
             # need to stabilize repr for KeyError (due to random order in sets)
-            def __repr__(self):
+            def __repr__(self) -> str:
                 tmp = sorted(list(self))
                 # double curly brace prints one brace in format string
                 return "frozenset({{{}}})".format(", ".join(map(repr, tmp)))
@@ -418,7 +418,7 @@ class TestDataFrameAlterAxes:
                 self.name = name
                 self.color = color
 
-            def __str__(self):
+            def __str__(self) -> str:
                 return "<Thing {self.name!r}>".format(self=self)
 
         thing1 = Thing("One", "red")
diff --git a/pandas/tests/indexing/test_indexing.py b/pandas/tests/indexing/test_indexing.py
index d611dc549..d6d376398 100644
--- a/pandas/tests/indexing/test_indexing.py
+++ b/pandas/tests/indexing/test_indexing.py
@@ -591,7 +591,7 @@ class TestFancy(Base):
             def __init__(self, value):
                 self.value = value
 
-            def __str__(self):
+            def __str__(self) -> str:
                 return "[{0}]".format(self.value)
 
             __repr__ = __str__
diff --git a/pandas/tests/internals/test_internals.py b/pandas/tests/internals/test_internals.py
index 16f14f35f..ee7fca6ec 100644
--- a/pandas/tests/internals/test_internals.py
+++ b/pandas/tests/internals/test_internals.py
@@ -1185,10 +1185,10 @@ class DummyElement:
     def __array__(self):
         return np.array(self.value, dtype=self.dtype)
 
-    def __str__(self):
+    def __str__(self) -> str:
         return "DummyElement({}, {})".format(self.value, self.dtype)
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         return str(self)
 
     def astype(self, dtype, copy=False):
diff --git a/pandas/tests/io/json/test_pandas.py b/pandas/tests/io/json/test_pandas.py
index eaa46c4e9..aa065b6e1 100644
--- a/pandas/tests/io/json/test_pandas.py
+++ b/pandas/tests/io/json/test_pandas.py
@@ -594,7 +594,7 @@ class TestPandasContainer:
                 self.hexed = hexed
                 self.binary = bytes.fromhex(hexed)
 
-            def __str__(self):
+            def __str__(self) -> str:
                 return self.hexed
 
         hexed = "574b4454ba8c5eb4f98a8f45"
diff --git a/pandas/tests/io/json/test_ujson.py b/pandas/tests/io/json/test_ujson.py
index 20e269008..8dcc77fc2 100644
--- a/pandas/tests/io/json/test_ujson.py
+++ b/pandas/tests/io/json/test_ujson.py
@@ -621,7 +621,7 @@ class TestUltraJSONTests:
             def recursive_attr(self):
                 return _TestObject("recursive_attr")
 
-            def __str__(self):
+            def __str__(self) -> str:
                 return str(self.val)
 
         msg = "Maximum recursion level reached"
diff --git a/pandas/tests/series/test_repr.py b/pandas/tests/series/test_repr.py
index 9f881f5a5..f1661ad03 100644
--- a/pandas/tests/series/test_repr.py
+++ b/pandas/tests/series/test_repr.py
@@ -227,7 +227,7 @@ class TestCategoricalRepr:
             name = "San Sebastián"
             state = "PR"
 
-            def __repr__(self):
+            def __repr__(self) -> str:
                 return self.name + ", " + self.state
 
         cat = pd.Categorical([County() for _ in range(61)])
diff --git a/pandas/tests/series/test_ufunc.py b/pandas/tests/series/test_ufunc.py
index 8144a3931..c8a127f89 100644
--- a/pandas/tests/series/test_ufunc.py
+++ b/pandas/tests/series/test_ufunc.py
@@ -285,7 +285,7 @@ def test_object_dtype_ok():
         def __eq__(self, other):
             return type(other) is Thing and self.value == other.value
 
-        def __repr__(self):
+        def __repr__(self) -> str:
             return "Thing({})".format(self.value)
 
     s = pd.Series([Thing(1), Thing(2)])
diff --git a/pandas/tseries/holiday.py b/pandas/tseries/holiday.py
index eb8600031..d4f02286f 100644
--- a/pandas/tseries/holiday.py
+++ b/pandas/tseries/holiday.py
@@ -183,7 +183,7 @@ class Holiday:
         assert days_of_week is None or type(days_of_week) == tuple
         self.days_of_week = days_of_week
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         info = ""
         if self.year is not None:
             info += "year={year}, ".format(year=self.year)
diff --git a/pandas/util/_depr_module.py b/pandas/util/_depr_module.py
index 54f090ede..45e7db928 100644
--- a/pandas/util/_depr_module.py
+++ b/pandas/util/_depr_module.py
@@ -38,7 +38,7 @@ class _DeprecatedModule:
         deprmodule = self._import_deprmod()
         return dir(deprmodule)
 
-    def __repr__(self):
+    def __repr__(self) -> str:
         deprmodule = self._import_deprmod()
         return repr(deprmodule)
 
