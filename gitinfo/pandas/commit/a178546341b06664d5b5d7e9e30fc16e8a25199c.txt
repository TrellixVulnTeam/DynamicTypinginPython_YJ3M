commit a178546341b06664d5b5d7e9e30fc16e8a25199c
Author: Phillip Cloud <cpcloud@gmail.com>
Date:   Fri Sep 27 12:53:35 2013 -0400

    CLN: move resolvers getter to generic.py

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 0ddbaa770..01e0d74ef 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1894,36 +1894,6 @@ class DataFrame(NDFrame):
             raise ValueError('Must pass DataFrame with boolean values only')
         return self.where(key)
 
-    def _get_index_resolvers(self, axis):
-        # index or columns
-        axis_index = getattr(self, axis)
-        d = dict()
-        prefix = axis[0]
-
-        for i, name in enumerate(axis_index.names):
-            if name is not None:
-                key = level = name
-            else:
-                # prefix with 'i' or 'c' depending on the input axis
-                # e.g., you must do ilevel_0 for the 0th level of an unnamed
-                # multiiindex
-                key = '{prefix}level_{i}'.format(prefix=prefix, i=i)
-                level = i
-
-            level_values = axis_index.get_level_values(level)
-            s = level_values.to_series()
-            s.index = axis_index
-            d[key] = s
-
-        # put the index/columns itself in the dict
-        if isinstance(axis_index, MultiIndex):
-            dindex = axis_index
-        else:
-            dindex = axis_index.to_series()
-
-        d[axis] = dindex
-        return d
-
     def query(self, expr, **kwargs):
         """Query the columns of a frame with a boolean expression.
 
@@ -2044,8 +2014,7 @@ class DataFrame(NDFrame):
         """
         resolvers = kwargs.pop('resolvers', None)
         if resolvers is None:
-            index_resolvers = self._get_index_resolvers('index')
-            index_resolvers.update(self._get_index_resolvers('columns'))
+            index_resolvers = self._get_resolvers()
             resolvers = [self, index_resolvers]
         kwargs['local_dict'] = _ensure_scope(resolvers=resolvers, **kwargs)
         return _eval(expr, **kwargs)
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 4553e4804..705679136 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -272,6 +272,42 @@ class NDFrame(PandasObject):
             return m - axis
         return axis
 
+    def _get_axis_resolvers(self, axis):
+        # index or columns
+        axis_index = getattr(self, axis)
+        d = dict()
+        prefix = axis[0]
+
+        for i, name in enumerate(axis_index.names):
+            if name is not None:
+                key = level = name
+            else:
+                # prefix with 'i' or 'c' depending on the input axis
+                # e.g., you must do ilevel_0 for the 0th level of an unnamed
+                # multiiindex
+                key = '{prefix}level_{i}'.format(prefix=prefix, i=i)
+                level = i
+
+            level_values = axis_index.get_level_values(level)
+            s = level_values.to_series()
+            s.index = axis_index
+            d[key] = s
+
+        # put the index/columns itself in the dict
+        if isinstance(axis_index, MultiIndex):
+            dindex = axis_index
+        else:
+            dindex = axis_index.to_series()
+
+        d[axis] = dindex
+        return d
+
+    def _get_resolvers(self):
+        d = {}
+        for axis_name in self._AXIS_ORDERS:
+            d.update(self._get_axis_resolvers(axis_name))
+        return d
+
     @property
     def _info_axis(self):
         return getattr(self, self._info_axis_name)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index ec35e7216..e5d2bb17e 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -11429,8 +11429,7 @@ class TestDataFrameQueryWithMultiIndex(object):
 
     def check_query_multiindex_get_index_resolvers(self, parser, engine):
         df = mkdf(10, 3, r_idx_nlevels=2, r_idx_names=['spam', 'eggs'])
-        resolvers = df._get_index_resolvers('index')
-        resolvers.update(df._get_index_resolvers('columns'))
+        resolvers = df._get_resolvers()
 
         def to_series(mi, level):
             level_values = mi.get_level_values(level)
@@ -11453,6 +11452,28 @@ class TestDataFrameQueryWithMultiIndex(object):
             else:
                 raise AssertionError("object must be a Series or Index")
 
+    def test_raise_on_panel_with_multiindex(self):
+        for parser, engine in product(PARSERS, ENGINES):
+            yield self.check_raise_on_panel_with_multiindex, parser, engine
+
+    def check_raise_on_panel_with_multiindex(self, parser, engine):
+        skip_if_no_ne()
+        p = tm.makePanel(7)
+        p.items = tm.makeCustomIndex(len(p.items), nlevels=2)
+        with tm.assertRaises(NotImplementedError):
+            pd.eval('p + 1', parser=parser, engine=engine)
+
+    def test_raise_on_panel4d_with_multiindex(self):
+        for parser, engine in product(PARSERS, ENGINES):
+            yield self.check_raise_on_panel4d_with_multiindex, parser, engine
+
+    def check_raise_on_panel4d_with_multiindex(self, parser, engine):
+        skip_if_no_ne()
+        p4d = tm.makePanel4D(7)
+        p4d.items = tm.makeCustomIndex(len(p4d.items), nlevels=2)
+        with tm.assertRaises(NotImplementedError):
+            pd.eval('p4d + 1', parser=parser, engine=engine)
+
 
 class TestDataFrameQueryNumExprPandas(unittest.TestCase):
     @classmethod
diff --git a/vb_suite/binary_ops.py b/vb_suite/binary_ops.py
index 8293f6504..af967f2e2 100644
--- a/vb_suite/binary_ops.py
+++ b/vb_suite/binary_ops.py
@@ -106,7 +106,7 @@ frame_multi_and_no_ne = \
 setup = common_setup + """
 N = 1000000
 halfway = N // 2 - 1
-s  = Series(date_range('20010101', periods=N, freq='D'))
+s = Series(date_range('20010101', periods=N, freq='D'))
 ts = s[halfway]
 """
 
