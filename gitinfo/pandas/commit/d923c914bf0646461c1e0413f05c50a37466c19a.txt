commit d923c914bf0646461c1e0413f05c50a37466c19a
Author: y-p <yoval@gmx.com>
Date:   Thu Dec 13 09:55:53 2012 +0200

    CLN: create mode.use_inf_as_null, mode.sim_interactive options

diff --git a/pandas/core/common.py b/pandas/core/common.py
index d77d413d3..386343dc3 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -94,8 +94,8 @@ def isnull_old(obj):
     else:
         return obj is None
 
-def use_inf_as_null(flag):
-    '''
+def _use_inf_as_null(key):
+    '''Option change callback for null/inf behaviour
     Choose which replacement for numpy.isnan / -numpy.isfinite is used.
 
     Parameters
@@ -113,6 +113,7 @@ def use_inf_as_null(flag):
     * http://stackoverflow.com/questions/4859217/
       programmatically-creating-variables-in-python/4859312#4859312
     '''
+    flag = get_option(key)
     if flag == True:
         globals()['isnull'] = isnull_old
     else:
@@ -1179,7 +1180,7 @@ def in_interactive_session():
     returns True if running under python/ipython interactive shell
     """
     import __main__ as main
-    return not hasattr(main, '__file__') or get_option('test.interactive')
+    return not hasattr(main, '__file__') or get_option('mode.sim_interactive')
 
 def in_qtconsole():
     """
diff --git a/pandas/core/config_init.py b/pandas/core/config_init.py
index a854c0122..b2443e5b0 100644
--- a/pandas/core/config_init.py
+++ b/pandas/core/config_init.py
@@ -139,10 +139,27 @@ with cf.config_prefix('print'):
     cf.register_option('expand_frame_repr', True, pc_expand_repr_doc)
     cf.register_option('line_width', 80, pc_line_width_doc)
 
-tc_interactive_doc="""
+tc_sim_interactive_doc="""
 : boolean
     Default False
     Whether to simulate interactive mode for purposes of testing
 """
-with cf.config_prefix('test'):
-    cf.register_option('interactive', False, tc_interactive_doc)
+with cf.config_prefix('mode'):
+    cf.register_option('sim_interactive', False, tc_sim_interactive_doc)
+
+use_inf_as_null_doc="""
+: boolean
+    True means treat None, NaN, INF, -INF as null (old way),
+    False means None and NaN are null, but INF, -INF are not null
+    (new way).
+"""
+
+# we don't want to start importing evrything at the global context level
+# or we'll hit circular deps.
+def use_inf_as_null_cb(key):
+    from pandas.core.common import _use_inf_as_null
+    _use_inf_as_null(key)
+
+with cf.config_prefix('mode'):
+    cf.register_option('use_inf_as_null', False, use_inf_as_null_doc,
+                       cb=use_inf_as_null_cb)
diff --git a/pandas/tests/test_common.py b/pandas/tests/test_common.py
index e8be2a5cc..1646d7116 100644
--- a/pandas/tests/test_common.py
+++ b/pandas/tests/test_common.py
@@ -5,9 +5,10 @@ import nose
 import unittest
 
 from pandas import Series, DataFrame, date_range, DatetimeIndex
-from pandas.core.common import notnull, isnull, use_inf_as_null
+from pandas.core.common import notnull, isnull
 import pandas.core.common as com
 import pandas.util.testing as tm
+import pandas.core.config as cf
 
 import numpy as np
 
@@ -29,15 +30,15 @@ def test_notnull():
     assert not notnull(None)
     assert not notnull(np.NaN)
 
-    use_inf_as_null(False)
+    cf.set_option("mode.use_inf_as_null",False)
     assert notnull(np.inf)
     assert notnull(-np.inf)
 
-    use_inf_as_null(True)
+    cf.set_option("mode.use_inf_as_null",True)
     assert not notnull(np.inf)
     assert not notnull(-np.inf)
 
-    use_inf_as_null(False)
+    cf.set_option("mode.use_inf_as_null",False)
 
     float_series = Series(np.random.randn(5))
     obj_series = Series(np.random.randn(5), dtype=object)
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 8b4866a64..7c93ece23 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -112,11 +112,11 @@ class TestDataFrameFormatting(unittest.TestCase):
         self.assertTrue(type(df.__repr__() == str)) # both py2 / 3
 
     def test_repr_no_backslash(self):
-        pd.set_option('test.interactive', True)
+        pd.set_option('mode.sim_interactive', True)
         df = DataFrame(np.random.randn(10, 4))
 
         self.assertTrue('\\' not in repr(df))
-        pd.reset_option('test.interactive')
+        pd.reset_option('mode.sim_interactive')
 
     def test_to_string_repr_unicode(self):
         buf = StringIO()
@@ -409,7 +409,7 @@ class TestDataFrameFormatting(unittest.TestCase):
         fmt.set_printoptions(max_rows=200)
 
     def test_wide_repr(self):
-        set_option('test.interactive', True)
+        set_option('mode.sim_interactive', True)
         col = lambda l, k: [tm.rands(k) for _ in xrange(l)]
         df = DataFrame([col(20, 25) for _ in range(10)])
         set_option('print.expand_frame_repr', False)
@@ -423,19 +423,19 @@ class TestDataFrameFormatting(unittest.TestCase):
         self.assert_(len(wider_repr) < len(wide_repr))
 
         reset_option('print.expand_frame_repr')
-        set_option('test.interactive', False)
+        set_option('mode.sim_interactive', False)
         set_option('print.line_width', 80)
 
     def test_wide_repr_wide_columns(self):
-        set_option('test.interactive', True)
+        set_option('mode.sim_interactive', True)
         df = DataFrame(randn(5, 3), columns=['a' * 90, 'b' * 90, 'c' * 90])
         rep_str = repr(df)
 
         self.assert_(len(rep_str.splitlines()) == 20)
-        reset_option('test.interactive')
+        reset_option('mode.sim_interactive')
 
     def test_wide_repr_named(self):
-        set_option('test.interactive', True)
+        set_option('mode.sim_interactive', True)
         col = lambda l, k: [tm.rands(k) for _ in xrange(l)]
         df = DataFrame([col(20, 25) for _ in range(10)])
         df.index.name = 'DataFrame Index'
@@ -454,11 +454,11 @@ class TestDataFrameFormatting(unittest.TestCase):
             self.assert_('DataFrame Index' in line)
 
         reset_option('print.expand_frame_repr')
-        set_option('test.interactive', False)
+        set_option('mode.sim_interactive', False)
         set_option('print.line_width', 80)
 
     def test_wide_repr_multiindex(self):
-        set_option('test.interactive', True)
+        set_option('mode.sim_interactive', True)
         col = lambda l, k: [tm.rands(k) for _ in xrange(l)]
         midx = pandas.MultiIndex.from_arrays([np.array(col(10, 5)),
                                               np.array(col(10, 5))])
@@ -479,11 +479,11 @@ class TestDataFrameFormatting(unittest.TestCase):
             self.assert_('Level 0 Level 1' in line)
 
         reset_option('print.expand_frame_repr')
-        set_option('test.interactive', False)
+        set_option('mode.sim_interactive', False)
         set_option('print.line_width', 80)
 
     def test_wide_repr_multiindex_cols(self):
-        set_option('test.interactive', True)
+        set_option('mode.sim_interactive', True)
         col = lambda l, k: [tm.rands(k) for _ in xrange(l)]
         midx = pandas.MultiIndex.from_arrays([np.array(col(10, 5)),
                                               np.array(col(10, 5))])
@@ -505,11 +505,11 @@ class TestDataFrameFormatting(unittest.TestCase):
         self.assert_(len(wide_repr.splitlines()) == 14 * 10 - 1)
 
         reset_option('print.expand_frame_repr')
-        set_option('test.interactive', False)
+        set_option('mode.sim_interactive', False)
         set_option('print.line_width', 80)
 
     def test_wide_repr_unicode(self):
-        set_option('test.interactive', True)
+        set_option('mode.sim_interactive', True)
         col = lambda l, k: [tm.randu(k) for _ in xrange(l)]
         df = DataFrame([col(20, 25) for _ in range(10)])
         set_option('print.expand_frame_repr', False)
@@ -523,18 +523,18 @@ class TestDataFrameFormatting(unittest.TestCase):
         self.assert_(len(wider_repr) < len(wide_repr))
 
         reset_option('print.expand_frame_repr')
-        set_option('test.interactive', False)
+        set_option('mode.sim_interactive', False)
         set_option('print.line_width', 80)
 
     def test_wide_repr_wide_long_columns(self):
-        set_option('test.interactive', True)
+        set_option('mode.sim_interactive', True)
 
         df = DataFrame({'a': ['a'*30, 'b'*30], 'b': ['c'*70, 'd'*80]})
 
         result = repr(df)
         self.assertTrue('ccccc' in result)
         self.assertTrue('ddddd' in result)
-        set_option('test.interactive', False)
+        set_option('mode.sim_interactive', False)
 
     def test_to_string(self):
         from pandas import read_table
