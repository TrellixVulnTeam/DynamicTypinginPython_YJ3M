commit af914f6ddd6eed77b835723e304101aa53805241
Author: Chang She <chang@lambdafoundry.com>
Date:   Tue Apr 3 16:58:36 2012 -0400

    ENH: regularized frequency string, removes references to dt. in format, removes multiple if 1

diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index 342fd0080..d92e3d512 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -65,7 +65,6 @@ def _str_to_dt_array(arr):
     data = p_ufunc(arr)
     return np.array(data, dtype='M8[us]')
 
-
 def to_datetime(arg):
     """Attempts to convert arg to datetime"""
     if arg is None:
@@ -695,6 +694,9 @@ def _interval_group(freqstr):
     return base // 1000 * 1000
 
 def _get_freq_code(freqstr):
+    if isinstance(freqstr, DateOffset):
+        freqstr = (getOffsetName(freqstr), freqstr.n)
+
     if isinstance(freqstr, tuple):
         if (isinstance(freqstr[0], (int, long)) and
             isinstance(freqstr[1], (int, long))):
@@ -737,12 +739,35 @@ def _get_freq_str(base, mult):
     code = _reverse_interval_code_map.get(base)
     if code is None:
         return _unknown_freq
+    if mult == 1:
+        return code
     return str(mult) + code
 
 _gfs = _get_freq_str
 
 _unknown_freq = 'Unknown'
 
+def get_standard_freq(freq):
+    """
+    Return the standardized frequency string
+    """
+    if freq is None:
+        return None
+
+    if isinstance(freq, basestring):
+        try:
+            freq = to_offset(freq)
+        except:
+            pass
+
+    if isinstance(freq, DateOffset):
+        if freq.n == 1:
+            return getOffsetName(freq)
+        return str(freq.n) + getOffsetName(freq)
+
+    code, stride = _get_freq_code(freq)
+    return _get_freq_str(code, stride)
+
 
 #-------------------------------------------------------------------------------
 # Miscellaneous date functions
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 473a267ac..dee6e878f 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -320,9 +320,9 @@ class Index(np.ndarray):
             zero_time = time(0, 0)
             result = []
             for dt in self:
-                if dt.time() != zero_time or dt.tzinfo is not None:
+                if dt.time() != zero_time or datetools.tzinfo is not None:
                     return header + ['%s' % x for x in self]
-                result.append(dt.strftime("%Y-%m-%d"))
+                result.append(datetools.strftime("%Y-%m-%d"))
             return header + result
 
         values = self.values
@@ -1201,6 +1201,9 @@ class DatetimeIndex(Int64Index):
             freq = kwds['offset']
             warn = True
 
+        if not isinstance(freq, datetools.DateOffset):
+            freq = datetools.get_standard_freq(freq)
+
         if warn:
             import warnings
             warnings.warn("parameter 'offset' is deprecated, "
@@ -1967,10 +1970,7 @@ class IntervalIndex(Int64Index):
                 freq=None, start=None, end=None, periods=None,
                 copy=False, name=None):
 
-        if isinstance(freq, basestring):
-            freq = freq.upper()
-        elif isinstance(freq, (int, long)):
-            freq = datetools._reverse_interval_code_map[freq]
+        freq = datetools.get_standard_freq(freq)
 
         if data is None:
             if start is None and end is None:
@@ -2054,9 +2054,6 @@ class IntervalIndex(Int64Index):
                 if freq is None:
                     raise ValueError('freq cannot be none')
 
-                if isinstance(freq, datetools.DateOffset):
-                    freq = datetools.getOffsetName(freq)
-
                 if data.dtype == np.datetime64:
                     data = datetools.dt64arr_to_sktsarr(data, freq)
                 elif data.dtype == np.int64:
diff --git a/pandas/tests/test_datetime64.py b/pandas/tests/test_datetime64.py
index eafb8bede..742e97dbb 100644
--- a/pandas/tests/test_datetime64.py
+++ b/pandas/tests/test_datetime64.py
@@ -552,15 +552,21 @@ class TestDatetime64(unittest.TestCase):
 
         sdate = datetime(1999, 12, 25)
         edate = datetime(2000, 1, 1)
-        idx = DatetimeIndex(start=sdate, freq='B', periods=20)
+        idx = DatetimeIndex(start=sdate, freq='1B', periods=20)
         self.assertEquals(len(idx), 20)
         self.assertEquals(idx[0], sdate + 0 * dt.bday)
+        self.assertEquals(idx.freq, 'B')
 
-        idx = DatetimeIndex(end=edate, freq='D', periods=20)
+        idx = DatetimeIndex(end=edate, freq=('D', 5), periods=20)
         self.assertEquals(len(idx), 20)
         self.assertEquals(idx[-1], edate)
+        self.assertEquals(idx.freq, '5D')
 
         idx1 = DatetimeIndex(start=sdate, end=edate, freq='W')
+        idx2 = DatetimeIndex(start=sdate, end=edate,
+                             freq=dt.Week(weekday=6))
+        self.assertEquals(len(idx1), len(idx2))
+        self.assertEquals(idx1.offset, idx2.offset)
 
 
     def test_dti_slicing(self):
diff --git a/pandas/tests/test_datetools.py b/pandas/tests/test_datetools.py
index c3796f3b3..c2d5e88fa 100644
--- a/pandas/tests/test_datetools.py
+++ b/pandas/tests/test_datetools.py
@@ -8,7 +8,7 @@ from pandas.core.datetools import (
     DateOffset, Week, YearBegin, YearEnd, Hour, Minute, Second,
     WeekOfMonth, format, ole2datetime, QuarterEnd, to_datetime, normalize_date,
     getOffset, getOffsetName, inferTimeRule, hasOffsetName,
-    _dt_box, _dt_unbox, parse_time_string)
+    _dt_box, _dt_unbox, parse_time_string, get_standard_freq)
 
 from nose.tools import assert_raises
 
@@ -1298,6 +1298,18 @@ def test_parse_time_string():
     assert parsed == parsed_lower
     assert reso == reso_lower
 
+def test_get_standard_freq():
+    fstr = get_standard_freq('W')
+    assert fstr == get_standard_freq('w')
+    assert fstr == get_standard_freq('1w')
+    assert fstr == get_standard_freq(('W', 1))
+    assert fstr == get_standard_freq('WeEk')
+
+    fstr = get_standard_freq('5Q')
+    assert fstr == get_standard_freq('5q')
+    assert fstr == get_standard_freq('5QuarTer')
+    assert fstr == get_standard_freq(('q', 5))
+
 if __name__ == '__main__':
     import nose
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
diff --git a/pandas/tests/test_interval.py b/pandas/tests/test_interval.py
index ea1d5d3eb..3bc800a7d 100644
--- a/pandas/tests/test_interval.py
+++ b/pandas/tests/test_interval.py
@@ -840,7 +840,7 @@ class TestIntervalIndex(TestCase):
         assert_equal(i1.freq, end_intv.freq)
         assert_equal(i1[-1], end_intv)
 
-        end_intv = Interval('2006-12-31', 'w')
+        end_intv = Interval('2006-12-31', '1w')
         i2 = IntervalIndex(end=end_intv, periods=10)
         assert_equal(len(i1), len(i2))
         self.assert_((i1 == i2).all())
