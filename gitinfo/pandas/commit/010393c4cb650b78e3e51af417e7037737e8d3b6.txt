commit 010393c4cb650b78e3e51af417e7037737e8d3b6
Author: Jeff Reback <jeff@reback.net>
Date:   Sun Feb 12 21:43:50 2017 -0500

    ENH: expose Int64VectorData in hashtable.pxd

diff --git a/pandas/hashtable.pxd b/pandas/hashtable.pxd
index cd06b9383..cabfa43a7 100644
--- a/pandas/hashtable.pxd
+++ b/pandas/hashtable.pxd
@@ -1,5 +1,6 @@
 from khash cimport (kh_int64_t, kh_uint64_t, kh_float64_t, kh_pymap_t,
                     kh_str_t, uint64_t, int64_t, float64_t)
+from numpy cimport ndarray
 
 # prototypes for sharing
 
@@ -35,3 +36,16 @@ cdef class StringHashTable(HashTable):
 
     cpdef get_item(self, object val)
     cpdef set_item(self, object key, Py_ssize_t val)
+
+cdef struct Int64VectorData:
+    int64_t *data
+    size_t n, m
+
+cdef class Int64Vector:
+    cdef Int64VectorData *data
+    cdef ndarray ao
+
+    cdef resize(self)
+    cpdef to_array(self)
+    cdef inline void append(self, int64_t x)
+    cdef extend(self, int64_t[:] x)
diff --git a/pandas/src/hashtable_class_helper.pxi.in b/pandas/src/hashtable_class_helper.pxi.in
index 74c38dfdb..ef385ba7d 100644
--- a/pandas/src/hashtable_class_helper.pxi.in
+++ b/pandas/src/hashtable_class_helper.pxi.in
@@ -24,10 +24,14 @@ dtypes = [('Float64', 'float64', 'float64_t'),
 {{for name, dtype, arg in dtypes}}
 
 
+{{if dtype != 'int64'}}
+
 ctypedef struct {{name}}VectorData:
     {{arg}} *data
     size_t n, m
 
+{{endif}}
+
 
 @cython.wraparound(False)
 @cython.boundscheck(False)
@@ -65,9 +69,11 @@ dtypes = [('Float64', 'float64', 'float64_t', 'np.float64'),
 
 cdef class {{name}}Vector:
 
+    {{if dtype != 'int64'}}
     cdef:
         {{name}}VectorData *data
         ndarray ao
+    {{endif}}
 
     def __cinit__(self):
         self.data = <{{name}}VectorData *>PyMem_Malloc(
@@ -92,7 +98,7 @@ cdef class {{name}}Vector:
     def __len__(self):
         return self.data.n
 
-    def to_array(self):
+    cpdef to_array(self):
         self.ao.resize(self.data.n)
         self.data.m = self.data.n
         return self.ao
@@ -104,6 +110,10 @@ cdef class {{name}}Vector:
 
         append_data_{{dtype}}(self.data, x)
 
+    cdef extend(self, {{arg}}[:] x):
+        for i in range(len(x)):
+            self.append(x[i])
+
 {{endfor}}
 
 cdef class StringVector:
