commit 05995f2e5099611be51913d904c63c1f13a7d437
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Aug 15 12:54:01 2011 -0400

    ENH: some integration of multi-level indexing with .ix fancy indexing

diff --git a/pandas/core/index.py b/pandas/core/index.py
index a03f184c7..11c138703 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -625,7 +625,10 @@ class MultiIndex(Index):
             if len(key) == self.nlevels:
                 return self._get_tuple_loc(key)
             else:
-                return slice(*self.slice_locs(key, key))
+                result = slice(*self.slice_locs(key, key))
+                if result.start == result.stop:
+                    raise KeyError(key)
+                return result
         else:
             # assert(self.sortorder == 0)
             # slice level 0
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index c2ddca3bf..26c301160 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -1,3 +1,5 @@
+from pandas.core.index import MultiIndex
+
 import numpy as np
 
 class _SeriesIndexer(object):
@@ -100,6 +102,14 @@ class _DataFrameIndexer(object):
             return self._fancy_getitem_axis(key, axis=0)
 
     def _getitem_tuple(self, key):
+        if isinstance(self.frame.index, MultiIndex):
+            try:
+                return self.frame.xs(key)
+            except KeyError:
+                # could do something more intelligent here? like raising the
+                # exception if each tuple value are in the levels?
+                pass
+
         if len(key) != 2:
             raise Exception('only length 2 tuple supported')
         return self._fancy_getitem_tuple(*key)
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index c594f6c3f..1d7449632 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -352,6 +352,17 @@ class TestMultiIndex(unittest.TestCase):
         self.assert_(self.index.get_loc(('foo', 'two')) == 1)
         self.assert_(self.index.get_loc(('baz', 'two')) == 3)
         self.assertRaises(KeyError, self.index.get_loc, ('bar', 'two'))
+        self.assertRaises(KeyError, self.index.get_loc, 'quux')
+
+        # 3 levels
+        index = MultiIndex(levels=[Index(range(4)),
+                                   Index(range(4)),
+                                   Index(range(4))],
+                           labels=[np.array([0, 0, 1, 2, 2, 2, 3, 3]),
+                                   np.array([0, 1, 0, 0, 0, 1, 0, 1]),
+                                   np.array([1, 0, 1, 1, 0, 0, 1, 0])])
+        self.assertRaises(KeyError, index.get_loc, (1, 1))
+        self.assert_(index.get_loc((2, 0)) == slice(3, 5))
 
     def test_slice_locs(self):
         df = tm.makeTimeDataFrame()
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index e44298ea6..9b4b5c420 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -45,6 +45,7 @@ class TestDataFrameMultiLevel(unittest.TestCase):
         col = df['foo', 'one']
         assert_almost_equal(col.values, df.values[:, 0])
         self.assertRaises(KeyError, df.__getitem__, ('foo', 'four'))
+        self.assertRaises(KeyError, df.__getitem__, 'foobar')
 
     def test_xs(self):
         xs = self.frame.xs(('bar', 'two'))
@@ -60,6 +61,16 @@ class TestDataFrameMultiLevel(unittest.TestCase):
         assert_frame_equal(result, expected)
         assert_frame_equal(result, result2)
 
+    def test_fancy_2d(self):
+        result = self.frame.ix['foo', 'B']
+        expected = self.frame.xs('foo')['B']
+        assert_series_equal(result, expected)
+
+        ft = self.frame.T
+        result = ft.ix['B', 'foo']
+        expected = ft.xs('B')['foo']
+        assert_series_equal(result, expected)
+
     def test_getitem_toplevel(self):
         df = self.frame.T
 
