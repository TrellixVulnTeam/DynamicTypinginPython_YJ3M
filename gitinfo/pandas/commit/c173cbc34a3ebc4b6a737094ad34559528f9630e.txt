commit c173cbc34a3ebc4b6a737094ad34559528f9630e
Author: jreback <jeff@reback.net>
Date:   Tue Apr 2 15:06:56 2013 -0400

    ENH: support top-level read/write API for HDFStore using read_hdf/to_hdf (GH3222)

diff --git a/RELEASE.rst b/RELEASE.rst
index f870932aa..a4ccf6422 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -77,6 +77,7 @@ pandas 0.11.0
     - New keywords ``iterator=boolean``, and ``chunksize=number_in_a_chunk``
       are provided to support iteration on ``select`` and
       ``select_as_multiple`` (GH3076_)
+    - support ``read_hdf/to_hdf`` API similar to ``read_csv/to_csv`` (GH3222_)
 
   - Add ``squeeze`` method to possibly remove length 1 dimensions from an
     object.
@@ -355,6 +356,7 @@ pandas 0.11.0
 .. _GH2747: https://github.com/pydata/pandas/issues/2747
 .. _GH2816: https://github.com/pydata/pandas/issues/2816
 .. _GH3216: https://github.com/pydata/pandas/issues/3216
+.. _GH3222: https://github.com/pydata/pandas/issues/3222
 .. _GH2641: https://github.com/pydata/pandas/issues/2641
 
 pandas 0.10.1
diff --git a/doc/source/io.rst b/doc/source/io.rst
index 1bcaf0475..28572ae14 100644
--- a/doc/source/io.rst
+++ b/doc/source/io.rst
@@ -1043,10 +1043,10 @@ Deletion of the object specified by the key
    del store['wp']
 
    store
-Closing a Store
 
-.. ipython:: python
+Closing a Store, Context Manager
 
+.. ipython:: python
 
    # closing a store
    store.close()
@@ -1068,6 +1068,24 @@ These stores are **not** appendable once written (though you can simply
 remove them and rewrite). Nor are they **queryable**; they must be
 retrieved in their entirety.
 
+Read/Write API
+~~~~~~~~~~~~~~
+
+``HDFStore`` supports an top-level API using  ``read_hdf`` for reading and ``to_hdf`` for writing,
+similar to how ``read_csv`` and ``to_csv`` work. (new in 0.11.0)
+
+.. ipython:: python
+
+   df_tl = DataFrame(dict(A=range(5), B=range(5)))
+   df_tl.to_hdf('store_tl.h5','table',append=True)
+   read_hdf('store_tl.h5', 'table', where = ['index>2'])
+
+.. ipython:: python
+   :suppress:
+   :okexcept:
+
+   os.remove('store_tl.h5')
+
 .. _io.hdf5-table:
 
 Storing in Table format
diff --git a/doc/source/v0.11.0.txt b/doc/source/v0.11.0.txt
index e299ba43a..4c460849c 100644
--- a/doc/source/v0.11.0.txt
+++ b/doc/source/v0.11.0.txt
@@ -237,6 +237,20 @@ Enhancements
   - Bottleneck is now a :ref:`Recommended Dependencies <install.recommended_dependencies>`, to accelerate certain
     types of ``nan`` operations
 
+  - For ``HDFStore``, support ``read_hdf/to_hdf`` API similar to ``read_csv/to_csv``
+
+    .. ipython:: python
+
+       df = DataFrame(dict(A=range(5), B=range(5)))
+       df.to_hdf('store.h5','table',append=True)
+       read_hdf('store.h5', 'table', where = ['index>2'])
+
+    .. ipython:: python
+       :suppress:
+       :okexcept:
+
+       os.remove('store.h5')
+
   - In ``HDFStore``, provide dotted attribute access to ``get`` from stores
     (e.g. ``store.df == store['df']``)
 
diff --git a/pandas/__init__.py b/pandas/__init__.py
index 5780ddfbe..3c06db57a 100644
--- a/pandas/__init__.py
+++ b/pandas/__init__.py
@@ -32,7 +32,7 @@ from pandas.tseries.api import *
 from pandas.io.parsers import (read_csv, read_table, read_clipboard,
                                read_fwf, to_clipboard, ExcelFile,
                                ExcelWriter)
-from pandas.io.pytables import HDFStore, Term, get_store
+from pandas.io.pytables import HDFStore, Term, get_store, read_hdf
 from pandas.util.testing import debug
 
 from pandas.tools.describe import value_range
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 580148e11..fdb12a79e 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -482,6 +482,11 @@ class PandasObject(object):
             np.putmask(rs.values, mask, np.nan)
         return rs
 
+    def to_hdf(self, path_or_buf, key, **kwargs):
+        """ activate the HDFStore """
+        from pandas.io import pytables
+        return pytables.to_hdf(path_or_buf, key, self, **kwargs)
+
 # install the indexerse
 for _name, _indexer in indexing.get_indexers_list():
     PandasObject._create_indexer(_name,_indexer)
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index b68a34c2a..1c223f584 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -147,6 +147,27 @@ def get_store(path, mode='a', complevel=None, complib=None,
             store.close()
 
 
+### interface to/from ###
+
+def to_hdf(path_or_buf, key, value, mode=None, complevel=None, complib=None, **kwargs):
+    """ store this object, close it if we opened it """
+    f = lambda store: store.put(key, value, **kwargs)
+
+    if isinstance(path_or_buf, basestring):
+        with get_store(path_or_buf, mode=mode, complevel=complevel, complib=complib) as store:
+            f(store)
+    else:
+        f(path_or_buf)
+
+def read_hdf(path_or_buf, key, **kwargs):
+    """ read from the store, closeit if we opened it """
+    f = lambda store: store.select(key, **kwargs)
+
+    if isinstance(path_or_buf, basestring):
+        with get_store(path_or_buf) as store:
+            return f(store)
+    f(path_or_buf)
+    
 class HDFStore(object):
     """
     dict-like IO interface for storing pandas objects in PyTables
@@ -190,7 +211,7 @@ class HDFStore(object):
     """
     _quiet = False
 
-    def __init__(self, path, mode='a', complevel=None, complib=None,
+    def __init__(self, path, mode=None, complevel=None, complib=None,
                  fletcher32=False):
         try:
             import tables as _
@@ -198,6 +219,8 @@ class HDFStore(object):
             raise Exception('HDFStore requires PyTables')
 
         self._path = path
+        if mode is None:
+            mode = 'a'
         self._mode = mode
         self._handle = None
         self._complevel = complevel
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index 2cc80e7b3..071bcfbb8 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -94,6 +94,37 @@ class TestHDFStore(unittest.TestCase):
         finally:
             safe_remove(self.path)
 
+    def test_conv_read_write(self):
+
+        try:
+
+            from pandas import read_hdf
+        
+            def roundtrip(key, obj,**kwargs):
+                obj.to_hdf(self.path, key,**kwargs)
+                return read_hdf(self.path, key)
+            
+            o = tm.makeTimeSeries()
+            assert_series_equal(o, roundtrip('series',o))
+            
+            o = tm.makeStringSeries()
+            assert_series_equal(o, roundtrip('string_series',o))
+            
+            o = tm.makeDataFrame()
+            assert_frame_equal(o, roundtrip('frame',o))
+
+            o = tm.makePanel()
+            tm.assert_panel_equal(o, roundtrip('panel',o))
+
+            # table
+            df = DataFrame(dict(A=range(5), B=range(5)))
+            df.to_hdf(self.path,'table',append=True)
+            result = read_hdf(self.path, 'table', where = ['index>2'])
+            assert_frame_equal(df[df.index>2],result)
+
+        finally:
+            safe_remove(self.path)
+
     def test_keys(self):
 
         with ensure_clean(self.path) as store:
