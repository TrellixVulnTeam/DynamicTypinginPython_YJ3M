commit 60b7d047b2bea0fdb91484703b294561d83bf247
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri May 25 12:03:55 2012 -0400

    BUG: fix infinite loop on win32/64

diff --git a/pandas/src/generate_code.py b/pandas/src/generate_code.py
index 0d9357e25..73ecc01be 100644
--- a/pandas/src/generate_code.py
+++ b/pandas/src/generate_code.py
@@ -680,7 +680,7 @@ def left_join_indexer_%(name)s(ndarray[%(c_type)s] left,
     j = 0
     count = 0
     if nleft > 0:
-        while True:
+        while i < nleft:
             if j == nright:
                 count += nleft - i
                 break
@@ -703,11 +703,9 @@ def left_join_indexer_%(name)s(ndarray[%(c_type)s] left,
                     break
             elif lval < rval:
                 count += 1
-                if i < nleft:
-                    i += 1
+                i += 1
             else:
-                if j < nright:
-                    j += 1
+                j += 1
 
     # do it again now that result size is known
 
@@ -752,11 +750,9 @@ def left_join_indexer_%(name)s(ndarray[%(c_type)s] left,
                 rindexer[count] = -1
                 result[count] = left[i]
                 count += 1
-                if i < nleft:
-                    i += 1
+                i += 1
             else:
-                if j < nright:
-                    j += 1
+                j += 1
 
     return result, lindexer, rindexer
 
diff --git a/pandas/src/generated.pyx b/pandas/src/generated.pyx
index b9f7a643d..05397983a 100644
--- a/pandas/src/generated.pyx
+++ b/pandas/src/generated.pyx
@@ -2741,7 +2741,7 @@ def left_join_indexer_float64(ndarray[float64_t] left,
     j = 0
     count = 0
     if nleft > 0:
-        while True:
+        while i < nleft:
             if j == nright:
                 count += nleft - i
                 break
@@ -2764,11 +2764,9 @@ def left_join_indexer_float64(ndarray[float64_t] left,
                     break
             elif lval < rval:
                 count += 1
-                if i < nleft:
-                    i += 1
+                i += 1
             else:
-                if j < nright:
-                    j += 1
+                j += 1
 
     # do it again now that result size is known
 
@@ -2813,11 +2811,9 @@ def left_join_indexer_float64(ndarray[float64_t] left,
                 rindexer[count] = -1
                 result[count] = left[i]
                 count += 1
-                if i < nleft:
-                    i += 1
+                i += 1
             else:
-                if j < nright:
-                    j += 1
+                j += 1
 
     return result, lindexer, rindexer
 
@@ -2841,7 +2837,7 @@ def left_join_indexer_object(ndarray[object] left,
     j = 0
     count = 0
     if nleft > 0:
-        while True:
+        while i < nleft:
             if j == nright:
                 count += nleft - i
                 break
@@ -2864,11 +2860,9 @@ def left_join_indexer_object(ndarray[object] left,
                     break
             elif lval < rval:
                 count += 1
-                if i < nleft:
-                    i += 1
+                i += 1
             else:
-                if j < nright:
-                    j += 1
+                j += 1
 
     # do it again now that result size is known
 
@@ -2913,11 +2907,9 @@ def left_join_indexer_object(ndarray[object] left,
                 rindexer[count] = -1
                 result[count] = left[i]
                 count += 1
-                if i < nleft:
-                    i += 1
+                i += 1
             else:
-                if j < nright:
-                    j += 1
+                j += 1
 
     return result, lindexer, rindexer
 
@@ -2941,7 +2933,7 @@ def left_join_indexer_int32(ndarray[int32_t] left,
     j = 0
     count = 0
     if nleft > 0:
-        while True:
+        while i < nleft:
             if j == nright:
                 count += nleft - i
                 break
@@ -2964,11 +2956,9 @@ def left_join_indexer_int32(ndarray[int32_t] left,
                     break
             elif lval < rval:
                 count += 1
-                if i < nleft:
-                    i += 1
+                i += 1
             else:
-                if j < nright:
-                    j += 1
+                j += 1
 
     # do it again now that result size is known
 
@@ -3013,11 +3003,9 @@ def left_join_indexer_int32(ndarray[int32_t] left,
                 rindexer[count] = -1
                 result[count] = left[i]
                 count += 1
-                if i < nleft:
-                    i += 1
+                i += 1
             else:
-                if j < nright:
-                    j += 1
+                j += 1
 
     return result, lindexer, rindexer
 
@@ -3041,7 +3029,7 @@ def left_join_indexer_int64(ndarray[int64_t] left,
     j = 0
     count = 0
     if nleft > 0:
-        while True:
+        while i < nleft:
             if j == nright:
                 count += nleft - i
                 break
@@ -3064,11 +3052,9 @@ def left_join_indexer_int64(ndarray[int64_t] left,
                     break
             elif lval < rval:
                 count += 1
-                if i < nleft:
-                    i += 1
+                i += 1
             else:
-                if j < nright:
-                    j += 1
+                j += 1
 
     # do it again now that result size is known
 
@@ -3113,11 +3099,9 @@ def left_join_indexer_int64(ndarray[int64_t] left,
                 rindexer[count] = -1
                 result[count] = left[i]
                 count += 1
-                if i < nleft:
-                    i += 1
+                i += 1
             else:
-                if j < nright:
-                    j += 1
+                j += 1
 
     return result, lindexer, rindexer
 
diff --git a/pandas/tests/test_tseries.py b/pandas/tests/test_tseries.py
index cc43edd6d..03aae97d4 100644
--- a/pandas/tests/test_tseries.py
+++ b/pandas/tests/test_tseries.py
@@ -124,6 +124,14 @@ def test_outer_join_indexer():
     assert_almost_equal(ares, aexp)
     assert_almost_equal(bres, bexp)
 
+    a = np.array([5], dtype=np.int64)
+    b = np.array([5], dtype=np.int64)
+
+    index, ares, bres = algos.outer_join_indexer_int64(a, b)
+    assert_almost_equal(index, [5])
+    assert_almost_equal(ares, [0])
+    assert_almost_equal(bres, [0])
+
 def test_left_join_indexer():
     a = np.array([1, 2, 3, 4, 5], dtype=np.int64)
     b = np.array([0, 3, 5, 7, 9], dtype=np.int64)
@@ -137,6 +145,14 @@ def test_left_join_indexer():
     assert_almost_equal(ares, aexp)
     assert_almost_equal(bres, bexp)
 
+    a = np.array([5], dtype=np.int64)
+    b = np.array([5], dtype=np.int64)
+
+    index, ares, bres = algos.left_join_indexer_int64(a, b)
+    assert_almost_equal(index, [5])
+    assert_almost_equal(ares, [0])
+    assert_almost_equal(bres, [0])
+
 
 def test_is_lexsorted():
     failure = [
