commit c567de4373f2a15cf785b6f425ee8b991c0447d8
Author: unutbu <unutbu@gmail.com>
Date:   Tue Mar 11 08:09:48 2014 -0400

    FIX: Bug whereby array_equivalent was not correctly comparing Float64Indexes with NaNs.

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 60a533db0..46ca37128 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -311,11 +311,14 @@ def array_equivalent(left, right):
     >>> array_equivalent(np.array([1, nan, 2]), np.array([1, 2, nan]))
     False
     """
+    left, right = np.asarray(left), np.asarray(right)
     if left.shape != right.shape: return False
     # NaNs occur only in object arrays, float or complex arrays.
+    if issubclass(left.dtype.type, np.object_):
+        return ((left == right) | (pd.isnull(left) & pd.isnull(right))).all()
     if not issubclass(left.dtype.type, (np.floating, np.complexfloating)):
         return np.array_equal(left, right)
-    return  ((left == right) | (np.isnan(left) & np.isnan(right))).all()
+    return ((left == right) | (np.isnan(left) & np.isnan(right))).all()
 
 def _iterable_not_string(x):
     return (isinstance(x, collections.Iterable) and
diff --git a/pandas/tests/test_common.py b/pandas/tests/test_common.py
index 3b3b2becc..59bfce8d9 100644
--- a/pandas/tests/test_common.py
+++ b/pandas/tests/test_common.py
@@ -5,7 +5,7 @@ import nose
 from nose.tools import assert_equal
 import numpy as np
 from pandas.tslib import iNaT, NaT
-from pandas import Series, DataFrame, date_range, DatetimeIndex, Timestamp
+from pandas import Series, DataFrame, date_range, DatetimeIndex, Timestamp, Float64Index
 from pandas import compat
 from pandas.compat import range, long, lrange, lmap, u
 from pandas.core.common import notnull, isnull, array_equivalent
@@ -181,7 +181,11 @@ def test_array_equivalent():
     assert not array_equivalent(np.array([np.nan, 1, np.nan]),
                                 np.array([np.nan, 2, np.nan]))
     assert not array_equivalent(np.array(['a', 'b', 'c', 'd']), np.array(['e', 'e']))
-
+    assert array_equivalent(Float64Index([0, np.nan]), Float64Index([0, np.nan]))
+    assert not array_equivalent(Float64Index([0, np.nan]), Float64Index([1, np.nan]))    
+    assert array_equivalent(DatetimeIndex([0, np.nan]), DatetimeIndex([0, np.nan]))    
+    assert not array_equivalent(DatetimeIndex([0, np.nan]), DatetimeIndex([1, np.nan]))
+    
 def test_datetimeindex_from_empty_datetime64_array():
     for unit in [ 'ms', 'us', 'ns' ]:
         idx = DatetimeIndex(np.array([], dtype='datetime64[%s]' % unit))
