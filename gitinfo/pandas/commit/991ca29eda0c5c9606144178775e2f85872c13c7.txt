commit 991ca29eda0c5c9606144178775e2f85872c13c7
Author: Mike Kelly <mtk@numeric.com>
Date:   Sat Jul 13 19:43:20 2013 -0400

    BUG: Boolean indexing on an empty series loses index names

diff --git a/pandas/src/inference.pyx b/pandas/src/inference.pyx
index ecf094945..39334e95e 100644
--- a/pandas/src/inference.pyx
+++ b/pandas/src/inference.pyx
@@ -41,10 +41,6 @@ def infer_dtype(object _values):
             _values = list(_values)
         values = list_to_object_array(_values)
 
-    n = len(values)
-    if n == 0:
-        return 'empty'
-
     val_kind = values.dtype.type
     if val_kind in _TYPE_MAP:
         return _TYPE_MAP[val_kind]
@@ -52,6 +48,10 @@ def infer_dtype(object _values):
     if values.dtype != np.object_:
         values = values.astype('O')
 
+    n = len(values)
+    if n == 0:
+        return 'empty'
+
     val = util.get_value_1d(values, 0)
 
     if util.is_datetime64_object(val):
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 410018575..579c635da 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -740,6 +740,13 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         assert_series_equal(result, expected)
         self.assert_(np.array_equal(result.index, s.index[mask]))
 
+    def test_getitem_boolean_empty(self):
+        s = Series([], dtype=np.int64)
+        s.index.name = 'index_name'
+        s = s[s.isnull()]
+        self.assertEqual(s.index.name, 'index_name')
+        self.assertEqual(s.dtype, np.int64)
+
     def test_getitem_generator(self):
         gen = (x > 0 for x in self.series)
         result = self.series[gen]
diff --git a/pandas/tests/test_tseries.py b/pandas/tests/test_tseries.py
index 6175b358a..c1eda3541 100644
--- a/pandas/tests/test_tseries.py
+++ b/pandas/tests/test_tseries.py
@@ -565,9 +565,9 @@ class TestTypeInference(unittest.TestCase):
 
     def test_length_zero(self):
         result = lib.infer_dtype(np.array([], dtype='i4'))
-        self.assertEqual(result, 'empty')
+        self.assertEqual(result, 'integer')
 
-        result = lib.infer_dtype(np.array([], dtype='O'))
+        result = lib.infer_dtype([])
         self.assertEqual(result, 'empty')
 
     def test_integers(self):
