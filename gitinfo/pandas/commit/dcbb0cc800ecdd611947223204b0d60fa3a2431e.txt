commit dcbb0cc800ecdd611947223204b0d60fa3a2431e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Dec 17 23:43:49 2011 -0500

    ENH: int64 hash table testing

diff --git a/pandas/src/khash.h b/pandas/src/khash.h
index 4b92170cd..a8637e5e0 100644
--- a/pandas/src/khash.h
+++ b/pandas/src/khash.h
@@ -313,12 +313,18 @@ static CYTHON_INLINE khint_t __ac_X31_hash_string(const char *s)
 #define KHASH_MAP_INIT_INT(name, khval_t)								\
 	KHASH_INIT(name, uint32_t, khval_t, 1, kh_int_hash_func, kh_int_hash_equal)
 
-#define KHASH_SET_INIT_INT64(name)										\
+#define KHASH_SET_INIT_UINT64(name)										\
 	KHASH_INIT(name, uint64_t, char, 0, kh_int64_hash_func, kh_int64_hash_equal)
 
-#define KHASH_MAP_INIT_INT64(name, khval_t)								\
+#define KHASH_MAP_INIT_UINT64(name, khval_t)								\
 	KHASH_INIT(name, uint64_t, khval_t, 1, kh_int64_hash_func, kh_int64_hash_equal)
 
+#define KHASH_SET_INIT_INT64(name)										\
+	KHASH_INIT(name, int64_t, char, 0, kh_int64_hash_func, kh_int64_hash_equal)
+
+#define KHASH_MAP_INIT_INT64(name, khval_t)								\
+	KHASH_INIT(name, int64_t, khval_t, 1, kh_int64_hash_func, kh_int64_hash_equal)
+
 typedef const char *kh_cstr_t;
 #define KHASH_SET_INIT_STR(name)										\
 	KHASH_INIT(name, kh_cstr_t, char, 0, kh_str_hash_func, kh_str_hash_equal)
@@ -349,7 +355,10 @@ KHASH_SET_INIT_PYOBJECT(pyset)
 #define kh_exist_pymap(h, k) (kh_exist(h, k))
 #define kh_exist_pyset(h, k) (kh_exist(h, k))
 #define kh_exist_str(h, k) (kh_exist(h, k))
+#define kh_exist_int64(h, k) (kh_exist(h, k))
 
 KHASH_MAP_INIT_STR(str, Py_ssize_t)
 
+KHASH_MAP_INIT_INT64(int64, Py_ssize_t)
+
 #endif /* __AC_KHASH_H */
diff --git a/pandas/src/khash.pxd b/pandas/src/khash.pxd
index 3f8c94436..3b3ddaab4 100644
--- a/pandas/src/khash.pxd
+++ b/pandas/src/khash.pxd
@@ -1,6 +1,6 @@
 from cpython cimport PyObject
 
-from libc.stdint cimport uint32_t
+from libc.stdint cimport uint32_t, int64_t
 
 cdef extern from "khash.h":
     ctypedef uint32_t khint_t
@@ -56,3 +56,19 @@ cdef extern from "khash.h":
 
     bint kh_exist_str(kh_str_t*, khiter_t)
 
+    ctypedef struct kh_int64_t:
+        khint_t n_buckets, size, n_occupied, upper_bound
+        uint32_t *flags
+        kh_cstr_t *keys
+        Py_ssize_t *vals
+
+    inline kh_int64_t* kh_init_int64()
+    inline void kh_destroy_int64(kh_int64_t*)
+    inline void kh_clear_int64(kh_int64_t*)
+    inline khint_t kh_get_int64(kh_int64_t*, int64_t)
+    inline void kh_resize_int64(kh_int64_t*, khint_t)
+    inline khint_t kh_put_int64(kh_int64_t*, int64_t, int*)
+    inline void kh_del_int64(kh_int64_t*, khint_t)
+
+    bint kh_exist_int64(kh_int64_t*, khiter_t)
+
diff --git a/pandas/src/sandbox.pyx b/pandas/src/sandbox.pyx
index d4c2cdebc..183629d77 100644
--- a/pandas/src/sandbox.pyx
+++ b/pandas/src/sandbox.pyx
@@ -198,9 +198,36 @@ def obj_unique(ndarray[object] arr):
     kh_destroy_pyset(table)
 
     return None
-    # try:
-    #     uniques.sort()
-    # except Exception:
-    #     pass
 
-    # return uniques
+def int64_unique(ndarray[int64_t] arr):
+    cdef:
+        kh_int64_t *table
+        # PyObject *obj
+        int64_t obj
+        PyObject **data
+        int ret
+        khiter_t k
+        Py_ssize_t i, j, n
+        ndarray[int64_t] uniques
+
+    n = len(arr)
+    uniques = np.empty(n, dtype='i8')
+
+    table = kh_init_int64()
+    kh_resize_int64(table, n)
+
+    j = 0
+
+    for i in range(n):
+        obj = arr[i]
+
+        k = kh_get_int64(table, obj)
+        if not kh_exist_int64(table, k):
+            k = kh_put_int64(table, obj, &ret)
+            uniques[j] = obj
+            j += 1
+            # Py_INCREF(<object> obj)
+
+    kh_destroy_int64(table)
+
+    return np.sort(uniques[:j])
