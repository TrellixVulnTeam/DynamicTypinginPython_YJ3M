commit 3bbcacf95b142776150a235dabb234806d87dff9
Author: Simon Hawkins <simonjayhawkins@gmail.com>
Date:   Mon Mar 4 18:56:49 2019 +0000

    STY: use pytest.raises context manager (frame) (#25516)

diff --git a/pandas/tests/frame/test_alter_axes.py b/pandas/tests/frame/test_alter_axes.py
index a25e893e0..f4a2a5f80 100644
--- a/pandas/tests/frame/test_alter_axes.py
+++ b/pandas/tests/frame/test_alter_axes.py
@@ -633,7 +633,8 @@ class TestDataFrameAlterAxes():
         tm.assert_index_equal(renamed.index, Index(['BAR', 'FOO']))
 
         # have to pass something
-        pytest.raises(TypeError, float_frame.rename)
+        with pytest.raises(TypeError, match="must pass an index to rename"):
+            float_frame.rename()
 
         # partial columns
         renamed = float_frame.rename(columns={'C': 'foo', 'D': 'bar'})
diff --git a/pandas/tests/frame/test_analytics.py b/pandas/tests/frame/test_analytics.py
index 994187a62..3363a4514 100644
--- a/pandas/tests/frame/test_analytics.py
+++ b/pandas/tests/frame/test_analytics.py
@@ -898,6 +898,7 @@ class TestDataFrameAnalytics(object):
             result = nanops.nanvar(arr, axis=0)
             assert not (result < 0).any()
 
+    @pytest.mark.skipif(PY2, reason="pytest.raises match regex fails")
     @pytest.mark.parametrize(
         "meth", ['sem', 'var', 'std'])
     def test_numeric_only_flag(self, meth):
@@ -919,10 +920,12 @@ class TestDataFrameAnalytics(object):
         tm.assert_series_equal(expected, result)
 
         # df1 has all numbers, df2 has a letter inside
-        pytest.raises(TypeError, lambda: getattr(df1, meth)(
-            axis=1, numeric_only=False))
-        pytest.raises(TypeError, lambda: getattr(df2, meth)(
-            axis=1, numeric_only=False))
+        msg = r"unsupported operand type\(s\) for -: 'float' and 'str'"
+        with pytest.raises(TypeError, match=msg):
+            getattr(df1, meth)(axis=1, numeric_only=False)
+        msg = "could not convert string to float: 'a'"
+        with pytest.raises(TypeError, match=msg):
+            getattr(df2, meth)(axis=1, numeric_only=False)
 
     def test_sem(self, datetime_frame):
         result = datetime_frame.sem(ddof=4)
@@ -1369,6 +1372,7 @@ class TestDataFrameAnalytics(object):
     # ----------------------------------------------------------------------
     # Index of max / min
 
+    @pytest.mark.skipif(PY2, reason="pytest.raises match regex fails")
     def test_idxmin(self, float_frame, int_frame):
         frame = float_frame
         frame.loc[5:10] = np.nan
@@ -1381,8 +1385,11 @@ class TestDataFrameAnalytics(object):
                                         skipna=skipna)
                     tm.assert_series_equal(result, expected)
 
-        pytest.raises(ValueError, frame.idxmin, axis=2)
+        msg = "No axis named 2 for object type <class 'type'>"
+        with pytest.raises(ValueError, match=msg):
+            frame.idxmin(axis=2)
 
+    @pytest.mark.skipif(PY2, reason="pytest.raises match regex fails")
     def test_idxmax(self, float_frame, int_frame):
         frame = float_frame
         frame.loc[5:10] = np.nan
@@ -1395,7 +1402,9 @@ class TestDataFrameAnalytics(object):
                                         skipna=skipna)
                     tm.assert_series_equal(result, expected)
 
-        pytest.raises(ValueError, frame.idxmax, axis=2)
+        msg = "No axis named 2 for object type <class 'type'>"
+        with pytest.raises(ValueError, match=msg):
+            frame.idxmax(axis=2)
 
     # ----------------------------------------------------------------------
     # Logical reductions
@@ -1881,7 +1890,9 @@ class TestDataFrameAnalytics(object):
         tm.assert_index_equal(rounded.index, dfs.index)
 
         decimals = pd.Series([1, 0, 2], index=['A', 'B', 'A'])
-        pytest.raises(ValueError, df.round, decimals)
+        msg = "Index of decimals must be unique"
+        with pytest.raises(ValueError, match=msg):
+            df.round(decimals)
 
     def test_built_in_round(self):
         if not compat.PY3:
diff --git a/pandas/tests/frame/test_api.py b/pandas/tests/frame/test_api.py
index e561b327e..118341276 100644
--- a/pandas/tests/frame/test_api.py
+++ b/pandas/tests/frame/test_api.py
@@ -9,7 +9,7 @@ import pydoc
 import numpy as np
 import pytest
 
-from pandas.compat import long, lrange, range
+from pandas.compat import PY2, long, lrange, range
 
 import pandas as pd
 from pandas import (
@@ -146,8 +146,12 @@ class SharedWithSparse(object):
         empty_frame = DataFrame()
 
         df = self.klass([1])
-        pytest.raises(TypeError, hash, df)
-        pytest.raises(TypeError, hash, empty_frame)
+        msg = ("'(Sparse)?DataFrame' objects are mutable, thus they cannot be"
+               " hashed")
+        with pytest.raises(TypeError, match=msg):
+            hash(df)
+        with pytest.raises(TypeError, match=msg):
+            hash(empty_frame)
 
     def test_new_empty_index(self):
         df1 = self.klass(np.random.randn(0, 3))
@@ -171,7 +175,9 @@ class SharedWithSparse(object):
         idx = float_frame._get_agg_axis(1)
         assert idx is float_frame.index
 
-        pytest.raises(ValueError, float_frame._get_agg_axis, 2)
+        msg = r"Axis must be 0 or 1 \(got 2\)"
+        with pytest.raises(ValueError, match=msg):
+            float_frame._get_agg_axis(2)
 
     def test_nonzero(self, float_frame, float_string_frame):
         empty_frame = DataFrame()
@@ -354,12 +360,15 @@ class SharedWithSparse(object):
         for col, s in compat.iteritems(mixed_T):
             assert s.dtype == np.object_
 
+    @pytest.mark.skipif(PY2, reason="pytest.raises match regex fails")
     def test_swapaxes(self):
         df = self.klass(np.random.randn(10, 5))
         self._assert_frame_equal(df.T, df.swapaxes(0, 1))
         self._assert_frame_equal(df.T, df.swapaxes(1, 0))
         self._assert_frame_equal(df, df.swapaxes(0, 0))
-        pytest.raises(ValueError, df.swapaxes, 2, 5)
+        msg = "No axis named 2 for object type <class 'type'>"
+        with pytest.raises(ValueError, match=msg):
+            df.swapaxes(2, 5)
 
     def test_axis_aliases(self, float_frame):
         f = float_frame
diff --git a/pandas/tests/frame/test_axis_select_reindex.py b/pandas/tests/frame/test_axis_select_reindex.py
index dea925dcd..fb00776b3 100644
--- a/pandas/tests/frame/test_axis_select_reindex.py
+++ b/pandas/tests/frame/test_axis_select_reindex.py
@@ -7,7 +7,7 @@ from datetime import datetime
 import numpy as np
 import pytest
 
-from pandas.compat import lrange, lzip, u
+from pandas.compat import PY2, lrange, lzip, u
 from pandas.errors import PerformanceWarning
 
 import pandas as pd
@@ -38,8 +38,11 @@ class TestDataFrameSelectReindex(TestData):
             assert obj.columns.name == 'second'
         assert list(df.columns) == ['d', 'e', 'f']
 
-        pytest.raises(KeyError, df.drop, ['g'])
-        pytest.raises(KeyError, df.drop, ['g'], 1)
+        msg = r"\['g'\] not found in axis"
+        with pytest.raises(KeyError, match=msg):
+            df.drop(['g'])
+        with pytest.raises(KeyError, match=msg):
+            df.drop(['g'], 1)
 
         # errors = 'ignore'
         dropped = df.drop(['g'], errors='ignore')
@@ -84,10 +87,14 @@ class TestDataFrameSelectReindex(TestData):
         assert_frame_equal(simple.drop(
             [0, 3], axis='index'), simple.loc[[1, 2], :])
 
-        pytest.raises(KeyError, simple.drop, 5)
-        pytest.raises(KeyError, simple.drop, 'C', 1)
-        pytest.raises(KeyError, simple.drop, [1, 5])
-        pytest.raises(KeyError, simple.drop, ['A', 'C'], 1)
+        with pytest.raises(KeyError, match=r"\[5\] not found in axis"):
+            simple.drop(5)
+        with pytest.raises(KeyError, match=r"\['C'\] not found in axis"):
+            simple.drop('C', 1)
+        with pytest.raises(KeyError, match=r"\[5\] not found in axis"):
+            simple.drop([1, 5])
+        with pytest.raises(KeyError, match=r"\['C'\] not found in axis"):
+            simple.drop(['A', 'C'], 1)
 
         # errors = 'ignore'
         assert_frame_equal(simple.drop(5, errors='ignore'), simple)
@@ -444,7 +451,9 @@ class TestDataFrameSelectReindex(TestData):
         assert_frame_equal(result, expected)
 
         # reindex fails
-        pytest.raises(ValueError, df.reindex, index=list(range(len(df))))
+        msg = "cannot reindex from a duplicate axis"
+        with pytest.raises(ValueError, match=msg):
+            df.reindex(index=list(range(len(df))))
 
     def test_reindex_axis_style(self):
         # https://github.com/pandas-dev/pandas/issues/12392
@@ -963,10 +972,15 @@ class TestDataFrameSelectReindex(TestData):
             assert_frame_equal(result, expected, check_names=False)
 
         # illegal indices
-        pytest.raises(IndexError, df.take, [3, 1, 2, 30], axis=0)
-        pytest.raises(IndexError, df.take, [3, 1, 2, -31], axis=0)
-        pytest.raises(IndexError, df.take, [3, 1, 2, 5], axis=1)
-        pytest.raises(IndexError, df.take, [3, 1, 2, -5], axis=1)
+        msg = "indices are out-of-bounds"
+        with pytest.raises(IndexError, match=msg):
+            df.take([3, 1, 2, 30], axis=0)
+        with pytest.raises(IndexError, match=msg):
+            df.take([3, 1, 2, -31], axis=0)
+        with pytest.raises(IndexError, match=msg):
+            df.take([3, 1, 2, 5], axis=1)
+        with pytest.raises(IndexError, match=msg):
+            df.take([3, 1, 2, -5], axis=1)
 
         # mixed-dtype
         order = [4, 1, 2, 0, 3]
@@ -1037,6 +1051,7 @@ class TestDataFrameSelectReindex(TestData):
         smaller = self.intframe.reindex(columns=['A', 'B', 'E'])
         assert smaller['E'].dtype == np.float64
 
+    @pytest.mark.skipif(PY2, reason="pytest.raises match regex fails")
     def test_reindex_axis(self):
         cols = ['A', 'B', 'E']
         with tm.assert_produces_warning(FutureWarning) as m:
@@ -1052,7 +1067,9 @@ class TestDataFrameSelectReindex(TestData):
         reindexed2 = self.intframe.reindex(index=rows)
         assert_frame_equal(reindexed1, reindexed2)
 
-        pytest.raises(ValueError, self.intframe.reindex_axis, rows, axis=2)
+        msg = "No axis named 2 for object type <class 'type'>"
+        with pytest.raises(ValueError, match=msg):
+            self.intframe.reindex_axis(rows, axis=2)
 
         # no-op case
         cols = self.frame.columns.copy()
diff --git a/pandas/tests/frame/test_block_internals.py b/pandas/tests/frame/test_block_internals.py
index 39d84f2e6..4b06d2e35 100644
--- a/pandas/tests/frame/test_block_internals.py
+++ b/pandas/tests/frame/test_block_internals.py
@@ -274,10 +274,12 @@ class TestDataFrameBlockInternals():
                              columns=["A", "B", "C"],
                              dtype=dtype)
 
-        pytest.raises(NotImplementedError, f,
-                      [("A", "datetime64[h]"),
-                       ("B", "str"),
-                       ("C", "int32")])
+        msg = ("compound dtypes are not implemented in the DataFrame"
+               " constructor")
+        with pytest.raises(NotImplementedError, match=msg):
+            f([("A", "datetime64[h]"),
+               ("B", "str"),
+               ("C", "int32")])
 
         # these work (though results may be unexpected)
         f('int64')
diff --git a/pandas/tests/frame/test_constructors.py b/pandas/tests/frame/test_constructors.py
index b32255da3..fc642d211 100644
--- a/pandas/tests/frame/test_constructors.py
+++ b/pandas/tests/frame/test_constructors.py
@@ -12,7 +12,8 @@ import numpy.ma as ma
 import pytest
 
 from pandas.compat import (
-    PY3, PY36, is_platform_little_endian, lmap, long, lrange, lzip, range, zip)
+    PY2, PY3, PY36, is_platform_little_endian, lmap, long, lrange, lzip, range,
+    zip)
 
 from pandas.core.dtypes.cast import construct_1d_object_array_from_listlike
 from pandas.core.dtypes.common import is_integer_dtype
@@ -58,8 +59,9 @@ class TestDataFrameConstructors(TestData):
         df['foo'] = np.ones((4, 2)).tolist()
 
         # this is not ok
-        pytest.raises(ValueError, df.__setitem__, tuple(['test']),
-                      np.ones((4, 2)))
+        msg = "Wrong number of items passed 2, placement implies 1"
+        with pytest.raises(ValueError, match=msg):
+            df['test'] = np.ones((4, 2))
 
         # this is ok
         df['foo2'] = np.ones((4, 2)).tolist()
@@ -1259,7 +1261,9 @@ class TestDataFrameConstructors(TestData):
         expected = DataFrame({0: s})
         tm.assert_frame_equal(df, expected)
 
-        pytest.raises(ValueError, DataFrame, s, columns=[1, 2])
+        msg = r"Shape of passed values is \(10, 1\), indices imply \(10, 2\)"
+        with pytest.raises(ValueError, match=msg):
+            DataFrame(s, columns=[1, 2])
 
         # #2234
         a = Series([], name='x')
@@ -1433,8 +1437,10 @@ class TestDataFrameConstructors(TestData):
 
         tm.assert_frame_equal(idf, edf)
 
-        pytest.raises(ValueError, DataFrame.from_dict,
-                      OrderedDict([('b', 8), ('a', 5), ('a', 6)]))
+        msg = "If using all scalar values, you must pass an index"
+        with pytest.raises(ValueError, match=msg):
+            DataFrame.from_dict(
+                OrderedDict([('b', 8), ('a', 5), ('a', 6)]))
 
     def test_constructor_empty_with_string_dtype(self):
         # GH 9428
@@ -1465,8 +1471,11 @@ class TestDataFrameConstructors(TestData):
                                                      dtype=object),
                                             index=[1, 2], columns=['a', 'c']))
 
-        pytest.raises(ValueError, DataFrame, 'a', [1, 2])
-        pytest.raises(ValueError, DataFrame, 'a', columns=['a', 'c'])
+        msg = "DataFrame constructor not properly called!"
+        with pytest.raises(ValueError, match=msg):
+            DataFrame('a', [1, 2])
+        with pytest.raises(ValueError, match=msg):
+            DataFrame('a', columns=['a', 'c'])
 
         msg = 'incompatible data and dtype'
         with pytest.raises(TypeError, match=msg):
@@ -1692,6 +1701,7 @@ class TestDataFrameConstructors(TestData):
 
         assert not (series['A'] == 5).all()
 
+    @pytest.mark.skipif(PY2, reason="pytest.raises match regex fails")
     def test_constructor_with_nas(self):
         # GH 5016
         # na's in indices
@@ -1704,9 +1714,11 @@ class TestDataFrameConstructors(TestData):
 
             # No NaN found -> error
             if len(indexer) == 0:
-                def f():
+                msg = ("cannot do label indexing on"
+                       r" <class 'pandas\.core\.indexes\.range\.RangeIndex'>"
+                       r" with these indexers \[nan\] of <class 'float'>")
+                with pytest.raises(TypeError, match=msg):
                     df.loc[:, np.nan]
-                pytest.raises(TypeError, f)
             # single nan should result in Series
             elif len(indexer) == 1:
                 tm.assert_series_equal(df.iloc[:, indexer[0]],
@@ -1782,13 +1794,15 @@ class TestDataFrameConstructors(TestData):
         tm.assert_frame_equal(df, expected)
 
         # invalid (shape)
-        pytest.raises(ValueError,
-                      lambda: DataFrame([Categorical(list('abc')),
-                                         Categorical(list('abdefg'))]))
+        msg = r"Shape of passed values is \(6, 2\), indices imply \(3, 2\)"
+        with pytest.raises(ValueError, match=msg):
+            DataFrame([Categorical(list('abc')),
+                       Categorical(list('abdefg'))])
 
         # ndim > 1
-        pytest.raises(NotImplementedError,
-                      lambda: Categorical(np.array([list('abcd')])))
+        msg = "> 1 ndim Categorical are not supported at this time"
+        with pytest.raises(NotImplementedError, match=msg):
+            Categorical(np.array([list('abcd')]))
 
     def test_constructor_categorical_series(self):
 
@@ -2164,8 +2178,11 @@ class TestDataFrameConstructors(TestData):
         tm.assert_index_equal(df1.index, Index(df.C))
 
         # should fail
-        pytest.raises(ValueError, DataFrame.from_records, df, index=[2])
-        pytest.raises(KeyError, DataFrame.from_records, df, index=2)
+        msg = r"Shape of passed values is \(10, 3\), indices imply \(1, 3\)"
+        with pytest.raises(ValueError, match=msg):
+            DataFrame.from_records(df, index=[2])
+        with pytest.raises(KeyError, match=r"^2$"):
+            DataFrame.from_records(df, index=2)
 
     def test_from_records_non_tuple(self):
         class Record(object):
diff --git a/pandas/tests/frame/test_convert_to.py b/pandas/tests/frame/test_convert_to.py
index 601a4c6b7..db60fbf0f 100644
--- a/pandas/tests/frame/test_convert_to.py
+++ b/pandas/tests/frame/test_convert_to.py
@@ -75,11 +75,15 @@ class TestDataFrameConvertTo(TestData):
         # GH22801
         # Data loss when indexes are not unique. Raise ValueError.
         df = DataFrame({'a': [1, 2], 'b': [0.5, 0.75]}, index=['A', 'A'])
-        pytest.raises(ValueError, df.to_dict, orient='index')
+        msg = "DataFrame index must be unique for orient='index'"
+        with pytest.raises(ValueError, match=msg):
+            df.to_dict(orient='index')
 
     def test_to_dict_invalid_orient(self):
         df = DataFrame({'A': [0, 1]})
-        pytest.raises(ValueError, df.to_dict, orient='xinvalid')
+        msg = "orient 'xinvalid' not understood"
+        with pytest.raises(ValueError, match=msg):
+            df.to_dict(orient='xinvalid')
 
     def test_to_records_dt64(self):
         df = DataFrame([["one", "two", "three"],
diff --git a/pandas/tests/frame/test_dtypes.py b/pandas/tests/frame/test_dtypes.py
index a8776c84b..b37bf02a6 100644
--- a/pandas/tests/frame/test_dtypes.py
+++ b/pandas/tests/frame/test_dtypes.py
@@ -154,8 +154,8 @@ class TestDataFrameDataTypes(TestData):
         ei = df[['h', 'i']]
         assert_frame_equal(ri, ei)
 
-        pytest.raises(NotImplementedError,
-                      lambda: df.select_dtypes(include=['period']))
+        with pytest.raises(NotImplementedError, match=r"^$"):
+            df.select_dtypes(include=['period'])
 
     def test_select_dtypes_exclude_using_list_like(self):
         df = DataFrame({'a': list('abc'),
@@ -218,8 +218,8 @@ class TestDataFrameDataTypes(TestData):
         ei = df[['f']]
         assert_frame_equal(ri, ei)
 
-        pytest.raises(NotImplementedError,
-                      lambda: df.select_dtypes(include='period'))
+        with pytest.raises(NotImplementedError, match=r"^$"):
+            df.select_dtypes(include='period')
 
     def test_select_dtypes_exclude_using_scalars(self):
         df = DataFrame({'a': list('abc'),
@@ -245,8 +245,8 @@ class TestDataFrameDataTypes(TestData):
         ei = df[['a', 'b', 'c', 'd', 'e', 'g', 'h', 'i', 'j', 'k']]
         assert_frame_equal(ri, ei)
 
-        pytest.raises(NotImplementedError,
-                      lambda: df.select_dtypes(exclude='period'))
+        with pytest.raises(NotImplementedError, match=r"^$"):
+            df.select_dtypes(exclude='period')
 
     def test_select_dtypes_include_exclude_using_scalars(self):
         df = DataFrame({'a': list('abc'),
@@ -601,8 +601,12 @@ class TestDataFrameDataTypes(TestData):
         # in the keys of the dtype dict
         dt4 = dtype_class({'b': str, 2: str})
         dt5 = dtype_class({'e': str})
-        pytest.raises(KeyError, df.astype, dt4)
-        pytest.raises(KeyError, df.astype, dt5)
+        msg = ("Only a column name can be used for the key in a dtype mappings"
+               " argument")
+        with pytest.raises(KeyError, match=msg):
+            df.astype(dt4)
+        with pytest.raises(KeyError, match=msg):
+            df.astype(dt5)
         assert_frame_equal(df, original)
 
         # if the dtypes provided are the same as the original dtypes, the
diff --git a/pandas/tests/frame/test_indexing.py b/pandas/tests/frame/test_indexing.py
index 19b8ae4eb..ffe54f7a9 100644
--- a/pandas/tests/frame/test_indexing.py
+++ b/pandas/tests/frame/test_indexing.py
@@ -9,7 +9,7 @@ import numpy as np
 import pytest
 
 from pandas._libs.tslib import iNaT
-from pandas.compat import long, lrange, lzip, map, range, zip
+from pandas.compat import PY2, long, lrange, lzip, map, range, zip
 
 from pandas.core.dtypes.common import is_float_dtype, is_integer, is_scalar
 from pandas.core.dtypes.dtypes import CategoricalDtype
@@ -431,8 +431,9 @@ class TestDataFrameIndexing(TestData):
 
     def test_getattr(self):
         assert_series_equal(self.frame.A, self.frame['A'])
-        pytest.raises(AttributeError, getattr, self.frame,
-                      'NONEXISTENT_NAME')
+        msg = "'DataFrame' object has no attribute 'NONEXISTENT_NAME'"
+        with pytest.raises(AttributeError, match=msg):
+            self.frame.NONEXISTENT_NAME
 
     def test_setattr_column(self):
         df = DataFrame({'foobar': 1}, index=lrange(10))
@@ -793,7 +794,8 @@ class TestDataFrameIndexing(TestData):
         f = self.frame.copy()
         del f['D']
         assert len(f.columns) == 3
-        pytest.raises(KeyError, f.__delitem__, 'D')
+        with pytest.raises(KeyError, match=r"^'D'$"):
+            del f['D']
         del f['B']
         assert len(f.columns) == 2
 
@@ -842,7 +844,9 @@ class TestDataFrameIndexing(TestData):
 
         with catch_warnings(record=True):
             simplefilter("ignore", DeprecationWarning)
-            pytest.raises(ValueError, f.ix.__getitem__, f > 0.5)
+            msg = "Cannot index with multidimensional key"
+            with pytest.raises(ValueError, match=msg):
+                f.ix[f > 0.5]
 
     def test_slice_floats(self):
         index = [52195.504153, 52196.303147, 52198.369883]
@@ -865,6 +869,7 @@ class TestDataFrameIndexing(TestData):
         df.iloc[:8:2] = np.nan
         assert isna(df.iloc[:8:2]).values.all()
 
+    @pytest.mark.skipif(PY2, reason="pytest.raises match regex fails")
     def test_getitem_setitem_integer_slice_keyerrors(self):
         df = DataFrame(np.random.randn(10, 5), index=lrange(0, 20, 2))
 
@@ -887,8 +892,10 @@ class TestDataFrameIndexing(TestData):
 
         # non-monotonic, raise KeyError
         df2 = df.iloc[lrange(5) + lrange(5, 10)[::-1]]
-        pytest.raises(KeyError, df2.loc.__getitem__, slice(3, 11))
-        pytest.raises(KeyError, df2.loc.__setitem__, slice(3, 11), 0)
+        with pytest.raises(KeyError, match=r"^3$"):
+            df2.loc[3:11]
+        with pytest.raises(KeyError, match=r"^3$"):
+            df2.loc[3:11] = 0
 
     def test_setitem_fancy_2d(self):
 
@@ -1077,6 +1084,7 @@ class TestDataFrameIndexing(TestData):
             expected = df[3]
         assert_series_equal(result, expected)
 
+    @pytest.mark.skipif(PY2, reason="pytest.raises match regex fails")
     def test_fancy_index_int_labels_exceptions(self):
         df = DataFrame(np.random.randn(10, 5), index=np.arange(0, 20, 2))
 
@@ -1084,14 +1092,18 @@ class TestDataFrameIndexing(TestData):
             simplefilter("ignore", DeprecationWarning)
 
             # labels that aren't contained
-            pytest.raises(KeyError, df.ix.__setitem__,
-                          ([0, 1, 2], [2, 3, 4]), 5)
+            with pytest.raises(KeyError, match=r"\[1\] not in index"):
+                df.ix[[0, 1, 2], [2, 3, 4]] = 5
 
             # try to set indices not contained in frame
-            pytest.raises(KeyError, self.frame.ix.__setitem__,
-                          ['foo', 'bar', 'baz'], 1)
-            pytest.raises(KeyError, self.frame.ix.__setitem__,
-                          (slice(None, None), ['E']), 1)
+            msg = (r"None of \[Index\(\['foo', 'bar', 'baz'\],"
+                   r" dtype='object'\)\] are in the \[index\]")
+            with pytest.raises(KeyError, match=msg):
+                self.frame.ix[['foo', 'bar', 'baz']] = 1
+            msg = (r"None of \[Index\(\['E'\], dtype='object'\)\] are in the"
+                   r" \[columns\]")
+            with pytest.raises(KeyError, match=msg):
+                self.frame.ix[:, ['E']] = 1
 
             # partial setting now allows this GH2578
             # pytest.raises(KeyError, self.frame.ix.__setitem__,
@@ -1504,6 +1516,7 @@ class TestDataFrameIndexing(TestData):
         expected.loc[[0, 2], [1]] = 5
         assert_frame_equal(df, expected)
 
+    @pytest.mark.skipif(PY2, reason="pytest.raises match regex fails")
     def test_getitem_setitem_float_labels(self):
         index = Index([1.5, 2, 3, 4, 5])
         df = DataFrame(np.random.randn(5, 5), index=index)
@@ -1537,7 +1550,11 @@ class TestDataFrameIndexing(TestData):
         df = DataFrame(np.random.randn(5, 5), index=index)
 
         # positional slicing only via iloc!
-        pytest.raises(TypeError, lambda: df.iloc[1.0:5])
+        msg = ("cannot do slice indexing on"
+               r" <class 'pandas\.core\.indexes\.numeric\.Float64Index'> with"
+               r" these indexers \[1.0\] of <class 'float'>")
+        with pytest.raises(TypeError, match=msg):
+            df.iloc[1.0:5]
 
         result = df.iloc[4:5]
         expected = df.reindex([5.0])
@@ -1744,11 +1761,16 @@ class TestDataFrameIndexing(TestData):
         # #2199
         df = DataFrame({'a': [1, 2, 3]})
 
-        pytest.raises(KeyError, df.loc.__getitem__, False)
-        pytest.raises(KeyError, df.loc.__getitem__, True)
+        with pytest.raises(KeyError, match=r"^False$"):
+            df.loc[False]
+        with pytest.raises(KeyError, match=r"^True$"):
+            df.loc[True]
 
-        pytest.raises(KeyError, df.loc.__setitem__, False, 0)
-        pytest.raises(KeyError, df.loc.__setitem__, True, 0)
+        msg = "cannot use a single bool to index into setitem"
+        with pytest.raises(KeyError, match=msg):
+            df.loc[False] = 0
+        with pytest.raises(KeyError, match=msg):
+            df.loc[True] = 0
 
     def test_getitem_list_duplicates(self):
         # #1943
@@ -1813,6 +1835,7 @@ class TestDataFrameIndexing(TestData):
                     self.frame.set_value(idx, col, 1)
                 assert self.frame[col][idx] == 1
 
+    @pytest.mark.skipif(PY2, reason="pytest.raises match regex fails")
     def test_set_value_resize(self):
 
         with tm.assert_produces_warning(FutureWarning,
@@ -1849,7 +1872,9 @@ class TestDataFrameIndexing(TestData):
         assert isna(res3['baz'].drop(['foobar'])).all()
         with tm.assert_produces_warning(FutureWarning,
                                         check_stacklevel=False):
-            pytest.raises(ValueError, res3.set_value, 'foobar', 'baz', 'sam')
+            msg = "could not convert string to float: 'sam'"
+            with pytest.raises(ValueError, match=msg):
+                res3.set_value('foobar', 'baz', 'sam')
 
     def test_set_value_with_index_dtype_change(self):
         df_orig = DataFrame(np.random.randn(3, 3),
@@ -1888,7 +1913,8 @@ class TestDataFrameIndexing(TestData):
         df = DataFrame(index=index, columns=lrange(4))
         with tm.assert_produces_warning(FutureWarning,
                                         check_stacklevel=False):
-            pytest.raises(KeyError, df.get_value, 0, 1)
+            with pytest.raises(KeyError, match=r"^0$"):
+                df.get_value(0, 1)
 
     def test_single_element_ix_dont_upcast(self):
         self.frame['E'] = 1
@@ -2158,10 +2184,15 @@ class TestDataFrameIndexing(TestData):
         df_rev = pd.DataFrame(data, index=dr[[3, 4, 5] + [0, 1, 2]],
                               columns=list('A'))
         # index is not monotonic increasing or decreasing
-        pytest.raises(ValueError, df_rev.reindex, df.index, method='pad')
-        pytest.raises(ValueError, df_rev.reindex, df.index, method='ffill')
-        pytest.raises(ValueError, df_rev.reindex, df.index, method='bfill')
-        pytest.raises(ValueError, df_rev.reindex, df.index, method='nearest')
+        msg = "index must be monotonic increasing or decreasing"
+        with pytest.raises(ValueError, match=msg):
+            df_rev.reindex(df.index, method='pad')
+        with pytest.raises(ValueError, match=msg):
+            df_rev.reindex(df.index, method='ffill')
+        with pytest.raises(ValueError, match=msg):
+            df_rev.reindex(df.index, method='bfill')
+        with pytest.raises(ValueError, match=msg):
+            df_rev.reindex(df.index, method='nearest')
 
     def test_reindex_level(self):
         from itertools import permutations
@@ -2669,14 +2700,20 @@ class TestDataFrameIndexing(TestData):
         # invalid conditions
         df = default_frame
         err1 = (df + 1).values[0:2, :]
-        pytest.raises(ValueError, df.where, cond, err1)
+        msg = "other must be the same shape as self when an ndarray"
+        with pytest.raises(ValueError, match=msg):
+            df.where(cond, err1)
 
         err2 = cond.iloc[:2, :].values
         other1 = _safe_add(df)
-        pytest.raises(ValueError, df.where, err2, other1)
+        msg = "Array conditional must be same shape as self"
+        with pytest.raises(ValueError, match=msg):
+            df.where(err2, other1)
 
-        pytest.raises(ValueError, df.mask, True)
-        pytest.raises(ValueError, df.mask, 0)
+        with pytest.raises(ValueError, match=msg):
+            df.mask(True)
+        with pytest.raises(ValueError, match=msg):
+            df.mask(0)
 
         # where inplace
         def _check_set(df, cond, check_dtypes=True):
diff --git a/pandas/tests/frame/test_missing.py b/pandas/tests/frame/test_missing.py
index 77a3d4785..2f3b0a9f7 100644
--- a/pandas/tests/frame/test_missing.py
+++ b/pandas/tests/frame/test_missing.py
@@ -9,7 +9,7 @@ import dateutil
 import numpy as np
 import pytest
 
-from pandas.compat import lrange
+from pandas.compat import PY2, lrange
 import pandas.util._test_decorators as td
 
 import pandas as pd
@@ -83,6 +83,7 @@ class TestDataFrameMissingData(TestData):
         tm.assert_index_equal(samesize_frame.index, self.frame.index)
         tm.assert_index_equal(inp_frame2.index, self.frame.index)
 
+    @pytest.mark.skipif(PY2, reason="pytest.raises match regex fails")
     def test_dropna(self):
         df = DataFrame(np.random.randn(6, 4))
         df[2][:2] = np.nan
@@ -139,7 +140,9 @@ class TestDataFrameMissingData(TestData):
         assert_frame_equal(dropped, expected)
 
         # bad input
-        pytest.raises(ValueError, df.dropna, axis=3)
+        msg = "No axis named 3 for object type <class 'type'>"
+        with pytest.raises(ValueError, match=msg):
+            df.dropna(axis=3)
 
     def test_drop_and_dropna_caching(self):
         # tst that cacher updates
@@ -158,10 +161,15 @@ class TestDataFrameMissingData(TestData):
 
     def test_dropna_corner(self):
         # bad input
-        pytest.raises(ValueError, self.frame.dropna, how='foo')
-        pytest.raises(TypeError, self.frame.dropna, how=None)
+        msg = "invalid how option: foo"
+        with pytest.raises(ValueError, match=msg):
+            self.frame.dropna(how='foo')
+        msg = "must specify how or thresh"
+        with pytest.raises(TypeError, match=msg):
+            self.frame.dropna(how=None)
         # non-existent column - 8303
-        pytest.raises(KeyError, self.frame.dropna, subset=['A', 'X'])
+        with pytest.raises(KeyError, match=r"^\['X'\]$"):
+            self.frame.dropna(subset=['A', 'X'])
 
     def test_dropna_multiple_axes(self):
         df = DataFrame([[1, np.nan, 2, 3],
@@ -226,8 +234,12 @@ class TestDataFrameMissingData(TestData):
         result = self.mixed_frame.fillna(value=0)
         result = self.mixed_frame.fillna(method='pad')
 
-        pytest.raises(ValueError, self.tsframe.fillna)
-        pytest.raises(ValueError, self.tsframe.fillna, 5, method='ffill')
+        msg = "Must specify a fill 'value' or 'method'"
+        with pytest.raises(ValueError, match=msg):
+            self.tsframe.fillna()
+        msg = "Cannot specify both 'value' and 'method'"
+        with pytest.raises(ValueError, match=msg):
+            self.tsframe.fillna(5, method='ffill')
 
         # mixed numeric (but no float16)
         mf = self.mixed_float.reindex(columns=['A', 'B', 'D'])
@@ -595,11 +607,18 @@ class TestDataFrameMissingData(TestData):
 
     def test_fillna_invalid_value(self):
         # list
-        pytest.raises(TypeError, self.frame.fillna, [1, 2])
+        msg = ("\"value\" parameter must be a scalar or dict, but you passed"
+               " a \"{}\"")
+        with pytest.raises(TypeError, match=msg.format('list')):
+            self.frame.fillna([1, 2])
         # tuple
-        pytest.raises(TypeError, self.frame.fillna, (1, 2))
+        with pytest.raises(TypeError, match=msg.format('tuple')):
+            self.frame.fillna((1, 2))
         # frame with series
-        pytest.raises(TypeError, self.frame.iloc[:, 0].fillna, self.frame)
+        msg = ("\"value\" parameter must be a scalar, dict or Series, but you"
+               " passed a \"DataFrame\"")
+        with pytest.raises(TypeError, match=msg):
+            self.frame.iloc[:, 0].fillna(self.frame)
 
     def test_fillna_col_reordering(self):
         cols = ["COL." + str(i) for i in range(5, 0, -1)]
diff --git a/pandas/tests/frame/test_mutate_columns.py b/pandas/tests/frame/test_mutate_columns.py
index 1f4da1bbb..6bef7e3f6 100644
--- a/pandas/tests/frame/test_mutate_columns.py
+++ b/pandas/tests/frame/test_mutate_columns.py
@@ -177,7 +177,9 @@ class TestDataFrameMutateColumns(TestData):
 
         with pytest.raises(ValueError, match='already exists'):
             df.insert(1, 'a', df['b'])
-        pytest.raises(ValueError, df.insert, 1, 'c', df['b'])
+        msg = "cannot insert c, already exists"
+        with pytest.raises(ValueError, match=msg):
+            df.insert(1, 'c', df['b'])
 
         df.columns.name = 'some_name'
         # preserve columns name field
diff --git a/pandas/tests/frame/test_nonunique_indexes.py b/pandas/tests/frame/test_nonunique_indexes.py
index a5bed14cf..799d54810 100644
--- a/pandas/tests/frame/test_nonunique_indexes.py
+++ b/pandas/tests/frame/test_nonunique_indexes.py
@@ -187,8 +187,11 @@ class TestDataFrameNonuniqueIndexes(TestData):
         # reindex is invalid!
         df = DataFrame([[1, 5, 7.], [1, 5, 7.], [1, 5, 7.]],
                        columns=['bar', 'a', 'a'])
-        pytest.raises(ValueError, df.reindex, columns=['bar'])
-        pytest.raises(ValueError, df.reindex, columns=['bar', 'foo'])
+        msg = "cannot reindex from a duplicate axis"
+        with pytest.raises(ValueError, match=msg):
+            df.reindex(columns=['bar'])
+        with pytest.raises(ValueError, match=msg):
+            df.reindex(columns=['bar', 'foo'])
 
         # drop
         df = DataFrame([[1, 5, 7.], [1, 5, 7.], [1, 5, 7.]],
@@ -306,7 +309,9 @@ class TestDataFrameNonuniqueIndexes(TestData):
         # boolean with the duplicate raises
         df = DataFrame(np.arange(12).reshape(3, 4),
                        columns=dups, dtype='float64')
-        pytest.raises(ValueError, lambda: df[df.A > 6])
+        msg = "cannot reindex from a duplicate axis"
+        with pytest.raises(ValueError, match=msg):
+            df[df.A > 6]
 
         # dup aligining operations should work
         # GH 5185
@@ -323,7 +328,9 @@ class TestDataFrameNonuniqueIndexes(TestData):
                         columns=['A', 'A'])
 
         # not-comparing like-labelled
-        pytest.raises(ValueError, lambda: df1 == df2)
+        msg = "Can only compare identically-labeled DataFrame objects"
+        with pytest.raises(ValueError, match=msg):
+            df1 == df2
 
         df1r = df1.reindex_like(df2)
         result = df1r == df2
diff --git a/pandas/tests/frame/test_quantile.py b/pandas/tests/frame/test_quantile.py
index d1f1299a5..19b663697 100644
--- a/pandas/tests/frame/test_quantile.py
+++ b/pandas/tests/frame/test_quantile.py
@@ -5,6 +5,8 @@ from __future__ import print_function
 import numpy as np
 import pytest
 
+from pandas.compat import PY2
+
 import pandas as pd
 from pandas import DataFrame, Series, Timestamp
 from pandas.tests.frame.common import TestData
@@ -71,6 +73,7 @@ class TestDataFrameQuantile(TestData):
         with pytest.raises(TypeError):
             df.quantile(.5, axis=1, numeric_only=False)
 
+    @pytest.mark.skipif(PY2, reason="pytest.raises match regex fails")
     def test_quantile_axis_parameter(self):
         # GH 9543/9544
 
@@ -92,8 +95,12 @@ class TestDataFrameQuantile(TestData):
         result = df.quantile(.5, axis="columns")
         assert_series_equal(result, expected)
 
-        pytest.raises(ValueError, df.quantile, 0.1, axis=-1)
-        pytest.raises(ValueError, df.quantile, 0.1, axis="column")
+        msg = "No axis named -1 for object type <class 'type'>"
+        with pytest.raises(ValueError, match=msg):
+            df.quantile(0.1, axis=-1)
+        msg = "No axis named column for object type <class 'type'>"
+        with pytest.raises(ValueError, match=msg):
+            df.quantile(0.1, axis="column")
 
     def test_quantile_interpolation(self):
         # see gh-10174
diff --git a/pandas/tests/frame/test_query_eval.py b/pandas/tests/frame/test_query_eval.py
index 0d06d0006..ba02cb54b 100644
--- a/pandas/tests/frame/test_query_eval.py
+++ b/pandas/tests/frame/test_query_eval.py
@@ -78,10 +78,10 @@ class TestCompat(object):
             result = df.eval('A+1', engine='numexpr')
             assert_series_equal(result, self.expected2, check_names=False)
         else:
-            pytest.raises(ImportError,
-                          lambda: df.query('A>0', engine='numexpr'))
-            pytest.raises(ImportError,
-                          lambda: df.eval('A+1', engine='numexpr'))
+            with pytest.raises(ImportError):
+                df.query('A>0', engine='numexpr')
+            with pytest.raises(ImportError):
+                df.eval('A+1', engine='numexpr')
 
 
 class TestDataFrameEval(TestData):
@@ -852,9 +852,10 @@ class TestDataFrameQueryStrings(object):
 
             for lhs, op, rhs in zip(lhs, ops, rhs):
                 ex = '{lhs} {op} {rhs}'.format(lhs=lhs, op=op, rhs=rhs)
-                pytest.raises(NotImplementedError, df.query, ex,
-                              engine=engine, parser=parser,
-                              local_dict={'strings': df.strings})
+                msg = r"'(Not)?In' nodes are not implemented"
+                with pytest.raises(NotImplementedError, match=msg):
+                    df.query(ex, engine=engine, parser=parser,
+                             local_dict={'strings': df.strings})
         else:
             res = df.query('"a" == strings', engine=engine, parser=parser)
             assert_frame_equal(res, expect)
diff --git a/pandas/tests/frame/test_replace.py b/pandas/tests/frame/test_replace.py
index 127a64da3..50c66d3f8 100644
--- a/pandas/tests/frame/test_replace.py
+++ b/pandas/tests/frame/test_replace.py
@@ -837,7 +837,9 @@ class TestDataFrameReplace(TestData):
             expected.replace(to_rep[i], values[i], inplace=True)
         assert_frame_equal(result, expected)
 
-        pytest.raises(ValueError, df.replace, to_rep, values[1:])
+        msg = r"Replacement lists must match in length\. Expecting 3 got 2"
+        with pytest.raises(ValueError, match=msg):
+            df.replace(to_rep, values[1:])
 
     def test_replace_input_formats_scalar(self):
         df = DataFrame({'A': [np.nan, 0, np.inf], 'B': [0, 2, 5],
@@ -850,7 +852,9 @@ class TestDataFrameReplace(TestData):
                     for k, v in compat.iteritems(df)}
         assert_frame_equal(filled, DataFrame(expected))
 
-        pytest.raises(TypeError, df.replace, to_rep, [np.nan, 0, ''])
+        msg = "value argument must be scalar, dict, or Series"
+        with pytest.raises(TypeError, match=msg):
+            df.replace(to_rep, [np.nan, 0, ''])
 
         # list to scalar
         to_rep = [np.nan, 0, '']
diff --git a/pandas/tests/frame/test_reshape.py b/pandas/tests/frame/test_reshape.py
index 4fe5172fe..8abf3a670 100644
--- a/pandas/tests/frame/test_reshape.py
+++ b/pandas/tests/frame/test_reshape.py
@@ -394,7 +394,10 @@ class TestDataFrameReshape(TestData):
 
         # When mixed types are passed and the ints are not level
         # names, raise
-        pytest.raises(ValueError, df2.stack, level=['animal', 0])
+        msg = ("level should contain all level names or all level numbers, not"
+               " a mixture of the two")
+        with pytest.raises(ValueError, match=msg):
+            df2.stack(level=['animal', 0])
 
         # GH #8584: Having 0 in the level names could raise a
         # strange error about lexsort depth
diff --git a/pandas/tests/frame/test_sorting.py b/pandas/tests/frame/test_sorting.py
index 85e6373b3..8b29394bc 100644
--- a/pandas/tests/frame/test_sorting.py
+++ b/pandas/tests/frame/test_sorting.py
@@ -7,7 +7,7 @@ import random
 import numpy as np
 import pytest
 
-from pandas.compat import lrange
+from pandas.compat import PY2, lrange
 
 import pandas as pd
 from pandas import (
@@ -21,6 +21,7 @@ from pandas.util.testing import assert_frame_equal, assert_series_equal
 
 class TestDataFrameSorting(TestData):
 
+    @pytest.mark.skipif(PY2, reason="pytest.raises match regex fails")
     def test_sort_values(self):
         frame = DataFrame([[1, 1, 2], [3, 1, 0], [4, 5, 6]],
                           index=[1, 2, 3], columns=list('ABC'))
@@ -54,8 +55,9 @@ class TestDataFrameSorting(TestData):
         sorted_df = frame.sort_values(by=['B', 'A'], ascending=[True, False])
         assert_frame_equal(sorted_df, expected)
 
-        pytest.raises(ValueError, lambda: frame.sort_values(
-            by=['A', 'B'], axis=2, inplace=True))
+        msg = "No axis named 2 for object type <class 'type'>"
+        with pytest.raises(ValueError, match=msg):
+            frame.sort_values(by=['A', 'B'], axis=2, inplace=True)
 
         # by row (axis=1): GH 10806
         sorted_df = frame.sort_values(by=3, axis=1)
diff --git a/pandas/tests/frame/test_timeseries.py b/pandas/tests/frame/test_timeseries.py
index 31e81a9ca..716a9e30e 100644
--- a/pandas/tests/frame/test_timeseries.py
+++ b/pandas/tests/frame/test_timeseries.py
@@ -8,7 +8,7 @@ import numpy as np
 import pytest
 import pytz
 
-from pandas.compat import product
+from pandas.compat import PY2, product
 
 import pandas as pd
 from pandas import (
@@ -395,7 +395,9 @@ class TestDataFrameTimeSeriesMethods(TestData):
         assert_frame_equal(unshifted, inferred_ts)
 
         no_freq = self.tsframe.iloc[[0, 5, 7], :]
-        pytest.raises(ValueError, no_freq.tshift)
+        msg = "Freq was not given and was not set in the index"
+        with pytest.raises(ValueError, match=msg):
+            no_freq.tshift()
 
     def test_truncate(self):
         ts = self.tsframe[::3]
@@ -436,9 +438,10 @@ class TestDataFrameTimeSeriesMethods(TestData):
         truncated = ts.truncate(after=end_missing)
         assert_frame_equal(truncated, expected)
 
-        pytest.raises(ValueError, ts.truncate,
-                      before=ts.index[-1] - ts.index.freq,
-                      after=ts.index[0] + ts.index.freq)
+        msg = "Truncate: 2000-01-06 00:00:00 must be after 2000-02-04 00:00:00"
+        with pytest.raises(ValueError, match=msg):
+            ts.truncate(before=ts.index[-1] - ts.index.freq,
+                        after=ts.index[0] + ts.index.freq)
 
     def test_truncate_copy(self):
         index = self.tsframe.index
@@ -781,14 +784,18 @@ class TestDataFrameTimeSeriesMethods(TestData):
         ts = DataFrame(rand_data, index=rng, columns=rng)
         stime, etime = ('08:00:00', '09:00:00')
 
+        msg = "Index must be DatetimeIndex"
         if axis in ['columns', 1]:
             ts.index = mask
-            pytest.raises(TypeError, ts.between_time, stime, etime)
-            pytest.raises(TypeError, ts.between_time, stime, etime, axis=0)
+            with pytest.raises(TypeError, match=msg):
+                ts.between_time(stime, etime)
+            with pytest.raises(TypeError, match=msg):
+                ts.between_time(stime, etime, axis=0)
 
         if axis in ['index', 0]:
             ts.columns = mask
-            pytest.raises(TypeError, ts.between_time, stime, etime, axis=1)
+            with pytest.raises(TypeError, match=msg):
+                ts.between_time(stime, etime, axis=1)
 
     def test_operation_on_NaT(self):
         # Both NaT and Timestamp are in DataFrame.
@@ -829,6 +836,7 @@ class TestDataFrameTimeSeriesMethods(TestData):
                                  'new': [1e9, None]}, dtype='datetime64[ns]')
         tm.assert_frame_equal(result, expected)
 
+    @pytest.mark.skipif(PY2, reason="pytest.raises match regex fails")
     def test_frame_to_period(self):
         K = 5
 
@@ -854,7 +862,9 @@ class TestDataFrameTimeSeriesMethods(TestData):
         pts = df.to_period('M', axis=1)
         tm.assert_index_equal(pts.columns, exp.columns.asfreq('M'))
 
-        pytest.raises(ValueError, df.to_period, axis=2)
+        msg = "No axis named 2 for object type <class 'type'>"
+        with pytest.raises(ValueError, match=msg):
+            df.to_period(axis=2)
 
     @pytest.mark.parametrize("fn", ['tz_localize', 'tz_convert'])
     def test_tz_convert_and_localize(self, fn):
diff --git a/pandas/tests/frame/test_to_csv.py b/pandas/tests/frame/test_to_csv.py
index 61eefcced..54a8712a9 100644
--- a/pandas/tests/frame/test_to_csv.py
+++ b/pandas/tests/frame/test_to_csv.py
@@ -109,8 +109,9 @@ class TestDataFrameToCSV(TestData):
             xp.columns = col_aliases
             assert_frame_equal(xp, rs)
 
-            pytest.raises(ValueError, self.frame2.to_csv, path,
-                          header=['AA', 'X'])
+            msg = "Writing 4 cols but got 2 aliases"
+            with pytest.raises(ValueError, match=msg):
+                self.frame2.to_csv(path, header=['AA', 'X'])
 
     def test_to_csv_from_csv3(self):
 
