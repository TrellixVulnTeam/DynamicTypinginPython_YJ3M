commit f5ab5a80a9193bdee50c661ce5a3abaabc312fd2
Author: Terji Petersen <contribute@tensortable.com>
Date:   Mon May 25 20:47:12 2020 +0100

    Use repr of fill_value in SparseDtype repr (#34352)
    
    * use repr of fill_value in sparse dtype repr
    
    * add gh-number
    
    * move tests to arrays/sparse/test_dtype.py
    
    * whatsnew entry

diff --git a/doc/source/whatsnew/v1.1.0.rst b/doc/source/whatsnew/v1.1.0.rst
index a793fa7f3..20e2cce1a 100644
--- a/doc/source/whatsnew/v1.1.0.rst
+++ b/doc/source/whatsnew/v1.1.0.rst
@@ -865,6 +865,7 @@ Sparse
 - Creating a :class:`SparseArray` from timezone-aware dtype will issue a warning before dropping timezone information, instead of doing so silently (:issue:`32501`)
 - Bug in :meth:`arrays.SparseArray.from_spmatrix` wrongly read scipy sparse matrix (:issue:`31991`)
 - Bug in :meth:`Series.sum` with ``SparseArray`` raises ``TypeError`` (:issue:`25777`)
+- The repr of :class:`SparseDtype` now includes the repr of its ``fill_value`` attribute. Previously it used ``fill_value``'s  string representation (:issue:`34352`)
 
 ExtensionArray
 ^^^^^^^^^^^^^^
diff --git a/pandas/core/arrays/sparse/dtype.py b/pandas/core/arrays/sparse/dtype.py
index 156a90f6c..a9090570e 100644
--- a/pandas/core/arrays/sparse/dtype.py
+++ b/pandas/core/arrays/sparse/dtype.py
@@ -166,7 +166,7 @@ class SparseDtype(ExtensionDtype):
 
     @property
     def name(self):
-        return f"Sparse[{self.subtype.name}, {self.fill_value}]"
+        return f"Sparse[{self.subtype.name}, {repr(self.fill_value)}]"
 
     def __repr__(self) -> str:
         return self.name
diff --git a/pandas/tests/arrays/sparse/test_dtype.py b/pandas/tests/arrays/sparse/test_dtype.py
index 5e9e2d854..16b4dd5c9 100644
--- a/pandas/tests/arrays/sparse/test_dtype.py
+++ b/pandas/tests/arrays/sparse/test_dtype.py
@@ -196,3 +196,14 @@ def test_update_dtype(original, dtype, expected):
 def test_update_dtype_raises(original, dtype, expected_error_msg):
     with pytest.raises(ValueError, match=expected_error_msg):
         original.update_dtype(dtype)
+
+
+def test_repr():
+    # GH-34352
+    result = str(pd.SparseDtype("int64", fill_value=0))
+    expected = "Sparse[int64, 0]"
+    assert result == expected
+
+    result = str(pd.SparseDtype(object, fill_value="0"))
+    expected = "Sparse[object, '0']"
+    assert result == expected
