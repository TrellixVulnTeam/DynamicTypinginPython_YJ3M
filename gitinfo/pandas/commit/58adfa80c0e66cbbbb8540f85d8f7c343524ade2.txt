commit 58adfa80c0e66cbbbb8540f85d8f7c343524ade2
Author: Adam Klein <adamklein@gmail.com>
Date:   Thu Feb 16 22:15:13 2012 -0500

    removed tests that snuck back in from merge

diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index b32be6bcf..816b74188 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -796,75 +796,6 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
                         name=('foo', 'bar', 'baz'))
         repr(biggie)
 
-    def test_to_string(self):
-        from cStringIO import StringIO
-        buf = StringIO()
-
-        s = self.ts.to_string()
-
-        retval = self.ts.to_string(buf=buf)
-        self.assert_(retval is None)
-        self.assertEqual(buf.getvalue().strip(), s)
-
-        # pass float_format
-        format = '%.4f'.__mod__
-        result = self.ts.to_string(float_format=format)
-        result = [x.split()[1] for x in result.split('\n')]
-        expected = [format(x) for x in self.ts]
-        self.assertEqual(result, expected)
-
-        # empty string
-        result = self.ts[:0].to_string()
-        self.assertEqual(result, '')
-
-        result = self.ts[:0].to_string(length=0)
-        self.assertEqual(result, '')
-
-        # name and length
-        cp = self.ts.copy()
-        cp.name = 'foo'
-        result = cp.to_string(length=True, name=True)
-        last_line = result.split('\n')[-1].strip()
-        self.assertEqual(last_line, "Name: foo, Length: %d" % len(cp))
-
-    def test_to_string_mixed(self):
-        s = Series(['foo', np.nan, -1.23, 4.56])
-        result = s.to_string()
-        expected = ('0    foo\n'
-                    '1    NaN\n'
-                    '2   -1.23\n'
-                    '3    4.56')
-        self.assertEqual(result, expected)
-
-        # but don't count NAs as floats
-        s = Series(['foo', np.nan, 'bar', 'baz'])
-        result = s.to_string()
-        expected = ('0    foo\n'
-                    '1    NaN\n'
-                    '2    bar\n'
-                    '3    baz')
-        self.assertEqual(result, expected)
-
-        s = Series(['foo', 5, 'bar', 'baz'])
-        result = s.to_string()
-        expected = ('0    foo\n'
-                    '1    5\n'
-                    '2    bar\n'
-                    '3    baz')
-        self.assertEqual(result, expected)
-
-    def test_to_string_float_na_spacing(self):
-        s = Series([0., 1.5678, 2., -3., 4.])
-        s[::2] = np.nan
-
-        result = s.to_string()
-        expected = ('0    NaN\n'
-                    '1    1.568\n'
-                    '2    NaN\n'
-                    '3   -3.000\n'
-                    '4    NaN')
-        self.assertEqual(result, expected)
-
     def test_iter(self):
         for i, val in enumerate(self.series):
             self.assertEqual(val, self.series[i])
