commit f7ba46de24c5daff64dc771973ddf71358377632
Author: Jeff Reback <jeff@reback.net>
Date:   Sat Apr 9 11:20:47 2016 -0400

    DOC: edits in whatsnew

diff --git a/doc/source/whatsnew/v0.18.1.txt b/doc/source/whatsnew/v0.18.1.txt
index 8781c7611..1a0d656ee 100644
--- a/doc/source/whatsnew/v0.18.1.txt
+++ b/doc/source/whatsnew/v0.18.1.txt
@@ -74,6 +74,14 @@ Sparse changes
 
 These changes conform sparse handling to return the correct types and work to make a smoother experience with indexing.
 
+``SparseArray.take`` now returns scalar for scalar input, ``SparseArray`` for others. Also now it handles negative indexer as the same rule as ``Index`` (:issue:`10560`, :issue:`12796`)
+
+.. ipython:: python
+
+   s = pd.SparseArray([np.nan, np.nan, 1, 2, 3, np.nan, 4, 5, np.nan, 6])
+   s.take(0)
+   s.take([1, 2, 3])
+
 - Bug in ``SparseSeries.loc[]`` with list-like input raises ``TypeError`` (:issue:`10560`)
 - Bug in ``SparseSeries.iloc[]`` with scalar input may raise ``IndexError`` (:issue:`10560`)
 - Bug in ``SparseSeries.loc[]``, ``.iloc[]`` with ``slice`` returns ``SparseArray``, rather than ``SparseSeries`` (:issue:`10560`)
@@ -83,13 +91,6 @@ These changes conform sparse handling to return the correct types and work to ma
 - Bug in ``SparseSeries.reindex`` incorrectly handle ``fill_value`` (:issue:`12797`)
 - Bug in ``SparseArray.to_dense()`` does not preserve ``dtype`` (:issue:`10648`)
 - Bug in ``SparseArray.to_dense()`` incorrectly handle ``fill_value`` (:issue:`12797`)
-- ``SparseArray.take`` now returns scalar for scalar input, ``SparseArray`` for others. Also now it handles negative indexer as the same rule as ``Index`` (:issue:`10560`, :issue:`12796`)
-
-  .. ipython:: python
-
-     s = pd.SparseArray([np.nan, np.nan, 1, 2, 3, np.nan, 4, 5, np.nan, 6])
-     s.take(0)
-     s.take([1, 2, 3])
 
 .. _whatsnew_0181.api:
 
@@ -112,7 +113,7 @@ API changes
 Using ``.apply`` on groupby resampling
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-Using ``apply`` on resampling groupby operations (using a ``pd.TimeGrouper``) now has the same output types as similar ``apply``s on other groupby operations. (:issue:`11742`).
+Using ``apply`` on resampling groupby operations (using a ``pd.TimeGrouper``) now has the same output types as a similar ``apply`` on other groupby operations. (:issue:`11742`).
 
 .. ipython:: python
 
@@ -173,7 +174,6 @@ Performance Improvements
 
 
 
-- Bug in ``__name__`` of ``.cum*`` functions (:issue:`12021`)
 
 
 
@@ -191,6 +191,7 @@ Bug Fixes
 - Bugs in concatenation with a coercable dtype was too aggressive. (:issue:`12411`, :issue:`12045`, :issue:`11594`, :issue:`10571`)
 - Bug in ``float_format`` option with option not being validated as a callable. (:issue:`12706`)
 - Bug in ``GroupBy.filter`` when ``dropna=False`` and no groups fulfilled the criteria (:issue:`12768`)
+- Bug in ``__name__`` of ``.cum*`` functions (:issue:`12021`)
 
 
 - Bug in ``.drop()`` with a non-unique ``MultiIndex``. (:issue:`12701`)
