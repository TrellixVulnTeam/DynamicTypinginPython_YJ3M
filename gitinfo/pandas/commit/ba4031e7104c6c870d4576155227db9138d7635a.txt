commit ba4031e7104c6c870d4576155227db9138d7635a
Author: y-p <yoval@gmx.com>
Date:   Sat Dec 8 13:06:58 2012 +0200

    BUG: DataFrame ctor should respect col order when given OrderedDict #2455

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 19a3e87e8..f09f9cb6f 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -467,6 +467,7 @@ class DataFrame(NDFrame):
         Segregate Series based on type and coerce into matrices.
         Needs to handle a lot of exceptional cases.
         """
+        from pandas.util.compat import OrderedDict
         if dtype is not None:
             dtype = np.dtype(dtype)
 
@@ -503,7 +504,10 @@ class DataFrame(NDFrame):
                 data_names.append(k)
                 arrays.append(v)
         else:
-            columns = data_names = Index(_try_sort(data.keys()))
+            keys = data.keys()
+            if not isinstance(data, OrderedDict):
+                keys = _try_sort(data.keys())
+            columns = data_names = Index(keys)
             arrays = [data[k] for k in columns]
 
         return _arrays_to_mgr(arrays, data_names, index, columns,
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 3a3d833e2..0c06cd305 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -317,6 +317,7 @@ class TestGroupBy(unittest.TestCase):
             self.assert_((self.df.ix[v]['B'] == k[1]).all())
 
     def test_aggregate_str_func(self):
+        from pandas.util.compat import OrderedDict
         def _check_results(grouped):
             # single series
             result = grouped['A'].agg('std')
@@ -329,10 +330,10 @@ class TestGroupBy(unittest.TestCase):
             assert_frame_equal(result, expected)
 
             # group frame by function dict
-            result = grouped.agg({'A' : 'var', 'B' : 'std', 'C' : 'mean'})
-            expected = DataFrame({'A' : grouped['A'].var(),
-                                  'B' : grouped['B'].std(),
-                                  'C' : grouped['C'].mean()})
+            result = grouped.agg(OrderedDict([['A' , 'var'], ['B' , 'std'], ['C' , 'mean']]))
+            expected = DataFrame(OrderedDict([['A', grouped['A'].var()],
+                                  ['B', grouped['B'].std()],
+                                  ['C', grouped['C'].mean()]]))
             assert_frame_equal(result, expected)
 
         by_weekday = self.tsframe.groupby(lambda x: x.weekday())
