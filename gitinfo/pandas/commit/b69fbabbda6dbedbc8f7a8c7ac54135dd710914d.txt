commit b69fbabbda6dbedbc8f7a8c7ac54135dd710914d
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu May 3 15:52:13 2012 -0400

    BUG: pass right plot function to tsplot when logy=True, close #1193

diff --git a/pandas/src/sandbox.pyx b/pandas/src/sandbox.pyx
index 8dad296bb..c161ca6ad 100644
--- a/pandas/src/sandbox.pyx
+++ b/pandas/src/sandbox.pyx
@@ -572,3 +572,12 @@ import pytz
 #         result += a[i] + b[i] + c[i]
 
 #     return result
+
+@cython.boundscheck(False)
+@cython.wraparound(False)
+def inner(ndarray[float64_t] x, ndarray[float64_t] y):
+    cdef Py_ssize_t i, n = len(x)
+    cdef float64_t result = 0
+    for i in range(n):
+        result += x[i] * y[i]
+    return result
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 067f77799..8168e1367 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -397,7 +397,9 @@ class LinePlot(MPLPlot):
         return data
 
     def _make_ts_plot(self, data, **kwargs):
-        import pandas.tseries.plotting as plot
+        from pandas.tseries.plotting import tsplot
+
+        plotf = self._get_plot_function()
 
         if isinstance(data, Series):
             if self.subplots: # shouldn't even allow users to specify
@@ -406,7 +408,7 @@ class LinePlot(MPLPlot):
                 ax = self.ax
 
             label = com._stringify(self.label)
-            plot.tsplot(ax, data, label=label, **kwargs)
+            tsplot(data, plotf, ax=ax, label=label, **kwargs)
             ax.grid(self.grid)
         else:
             for i, col in enumerate(data.columns):
@@ -415,7 +417,7 @@ class LinePlot(MPLPlot):
                 else:
                     ax = self.ax
                 label = com._stringify(col)
-                plot.tsplot(ax, data[col], label=label, **kwargs)
+                tsplot(data[col], plotf, ax=ax, label=label, **kwargs)
                 ax.grid(self.grid)
 
         self.fig.subplots_adjust(wspace=0, hspace=0)
diff --git a/pandas/tseries/plotting.py b/pandas/tseries/plotting.py
index 8dd1bab1a..08b461b5c 100644
--- a/pandas/tseries/plotting.py
+++ b/pandas/tseries/plotting.py
@@ -21,7 +21,8 @@ from pandas.core.series import Series
 
 import warnings
 
-# Generic documentation ......................................................
+#----------------------------------------------------------------------
+# Generic documentation
 
 _doc_parameters = dict(
 figsize="""figsize : {None, tuple}
@@ -49,10 +50,10 @@ mandatoryplotargs="""args : var
         are all lower than 10.""" )
 
 
-#####---------------------------------------------------------------------------
-#---- Plotting functions and monkey patches
-#####---------------------------------------------------------------------------
-def tsplot(axes, series, *args, **kwargs):
+#----------------------------------------------------------------------
+# Plotting functions and monkey patches
+
+def tsplot(series, plotf, *args, **kwargs):
     """
     Plots a Series on the given Matplotlib axes object
 
@@ -82,28 +83,33 @@ def tsplot(axes, series, *args, **kwargs):
         raise TypeError('series argument to tsplot must have DatetimeIndex or '
                         'PeriodIndex')
 
+    if 'ax' in kwargs:
+        ax = kwargs.pop('ax')
+    else:
+        ax = plt.gca()
+
     # Specialized ts plotting attributes for Axes
-    axes.freq = freq
-    axes.legendlabels = [kwargs.get('label', None)]
-    axes.view_interval = None
-    axes.date_axis_info = None
+    ax.freq = freq
+    ax.legendlabels = [kwargs.get('label', None)]
+    ax.view_interval = None
+    ax.date_axis_info = None
 
     # format args and lot
     args = _check_plot_params(series, series.index, freq, *args)
-    plotted = axes.plot(*args,  **kwargs)
+    plotted = plotf(ax, *args,  **kwargs)
 
-    format_dateaxis(axes, axes.freq)
+    format_dateaxis(ax, ax.freq)
 
     # when adding a right axis (using add_yaxis), for some reason the
     # x axis limits don't get properly set. This gets around the problem
-    xlim = axes.get_xlim()
+    xlim = ax.get_xlim()
     if xlim[0] == 0.0 and xlim[1] == 1.0:
         # if xlim still at default values, autoscale the axis
-        axes.autoscale_view()
+        ax.autoscale_view()
 
     left = get_datevalue(series.index[0], freq)
     right = get_datevalue(series.index[-1], freq)
-    axes.set_xlim(left, right)
+    ax.set_xlim(left, right)
 
     return plotted
 
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index 840839166..92f9493d2 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -50,13 +50,15 @@ class TestTSPlot(unittest.TestCase):
     @slow
     def test_tsplot(self):
         from pandas.tseries.plotting import tsplot
-        import matplotlib.pyplot as pyplot
-        ax = pyplot.gca()
+        import matplotlib.pyplot as plt
+        ax = plt.gca()
+
+        f = lambda *args, **kwds: tsplot(s, plt.Axes.plot, *args, **kwds)
+
         for s in self.period_ser:
-            _check_plot_works(tsplot, s.index.freq, axes=ax, series=s)
+            _check_plot_works(f, s.index.freq, ax=ax, series=s)
         for s in self.datetime_ser:
-            _check_plot_works(tsplot, s.index.freq.rule_code,
-                              axes=ax, series=s)
+            _check_plot_works(f, s.index.freq.rule_code, ax=ax, series=s)
 
     @slow
     def test_line_plot_period_series(self):
@@ -90,7 +92,7 @@ class TestTSPlot(unittest.TestCase):
 
 
 PNG_PATH = 'tmp.png'
-def _check_plot_works(f, freq=None, *args, **kwargs):
+def _check_plot_works(f, freq=None, series=None, *args, **kwargs):
     import matplotlib.pyplot as plt
 
     fig = plt.gcf()
@@ -99,8 +101,7 @@ def _check_plot_works(f, freq=None, *args, **kwargs):
     ret = f(*args, **kwargs)
     assert(ret is not None)  # do something more intelligent
 
-    orig_ax = kwargs.pop('axes', plt.gca())
-    series = kwargs.pop('series', None)
+    orig_ax = kwargs.pop('ax', plt.gca())
     if series is not None:
         assert(orig_ax.freq == series.index.freq)
 
