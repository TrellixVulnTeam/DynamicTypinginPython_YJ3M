commit fab291b306ebf8b89d094379c99bd1b2a2b601b9
Author: Jeff Reback <jeff@reback.net>
Date:   Fri Jan 15 09:11:54 2016 -0500

    make floordiv return int64index always

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 7fae09c83..7f955002a 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -2199,6 +2199,11 @@ def is_integer_dtype(arr_or_dtype):
             not issubclass(tipo, (np.datetime64, np.timedelta64)))
 
 
+def is_int64_dtype(arr_or_dtype):
+    tipo = _get_dtype_type(arr_or_dtype)
+    return issubclass(tipo, np.int64)
+
+
 def is_int_or_datetime_dtype(arr_or_dtype):
     tipo = _get_dtype_type(arr_or_dtype)
     return (issubclass(tipo, np.integer) or
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 9e323cc16..63b748ada 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -3995,8 +3995,8 @@ class RangeIndex(Int64Index):
             stop = data.stop
             start = data.start
         else:
-        # seems we only have indexing ops to infer
-        # rather than direct accessors
+            # seems we only have indexing ops to infer
+            # rather than direct accessors
             if len(data) > 1:
                 step = data[1] - data[0]
                 stop = data[-1] + step
@@ -4395,7 +4395,7 @@ class RangeIndex(Int64Index):
 
                         # we don't have a representable op
                         # so return a base index
-                        if not is_integer(rstep):
+                        if not is_integer(rstep) or not rstep:
                             raise ValueError
 
                     else:
@@ -4440,15 +4440,6 @@ class RangeIndex(Int64Index):
             operator.mul,
             '__mul__',
             step=operator.mul)
-        cls.__floordiv__ = _make_evaluate_binop(
-            operator.floordiv,
-            '__floordiv__',
-            step=operator.floordiv)
-        cls.__rfloordiv__ = _make_evaluate_binop(
-            operator.floordiv,
-            '__floordiv__',
-            reversed=True,
-            step=operator.floordiv)
         cls.__truediv__ = _make_evaluate_binop(
             operator.truediv,
             '__truediv__',
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 1b4578668..4dcc39078 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -5,6 +5,7 @@ from datetime import datetime, timedelta, time
 from pandas import compat
 from pandas.compat import (long, is_platform_windows, range,
                            lrange, lzip, u, zip, PY3)
+from itertools import combinations
 import operator
 import re
 import nose
@@ -3465,9 +3466,8 @@ class TestRangeIndex(Numeric, tm.TestCase):
         return RangeIndex(5)
 
     def test_binops(self):
-        import operator as op
-        from itertools import combinations
-        ops = [op.add, op.sub, op.mul, op.floordiv, op.truediv, pow]
+        ops = [operator.add, operator.sub, operator.mul,
+               operator.floordiv, operator.truediv, pow]
         scalars = [-1, 1, 2]
         idxs = [RangeIndex(0, 10, 1),
                 RangeIndex(0, 20, 2),
@@ -3611,7 +3611,8 @@ class TestRangeIndex(Numeric, tm.TestCase):
         self.assertTrue(result.equals(expected))
 
         result = idx // 1
-        tm.assert_index_equal(result, idx, exact=True)
+        expected = idx._int64index // 1
+        tm.assert_index_equal(result, expected, exact=True)
 
         # __mul__
         result = idx * idx
@@ -3627,7 +3628,7 @@ class TestRangeIndex(Numeric, tm.TestCase):
         # __floordiv__
         idx = RangeIndex(0, 1000, 2)
         result = idx // 2
-        expected = RangeIndex(0, 500, 1)
+        expected = idx._int64index // 2
         tm.assert_index_equal(result, expected, exact=True)
 
         idx = RangeIndex(0, 1000, 1)
