commit a6d76981efc94ae4dcb0ea917aff624d9b497e37
Author: adneu <aneumann31@gmail.com>
Date:   Mon Apr 18 13:05:07 2016 -0400

    BUG: GH12902 fixed coercion of complex values to float when using groâ€¦
    
    closes #12902
    
    Author: adneu <aneumann31@gmail.com>
    
    Closes #12917 from adneu/master and squashes the following commits:
    
    cd978ad [adneu] BUG: GH12902 added additional test for completeness
    2b37396 [adneu] BUG: GH12902 fixed coercion of complex values to float when using groupby

diff --git a/doc/source/whatsnew/v0.18.1.txt b/doc/source/whatsnew/v0.18.1.txt
index c6642c521..8700bf1be 100644
--- a/doc/source/whatsnew/v0.18.1.txt
+++ b/doc/source/whatsnew/v0.18.1.txt
@@ -325,3 +325,4 @@ Bug Fixes
 - ``pd.read_excel()`` now accepts column names associated with keyword argument ``names``(:issue `12870`)
 
 - Bug in ``fill_value`` is ignored if the argument to a binary operator is a constant (:issue `12723`)
+- Bug in ``groupby`` where complex types are coerced to float (:issue:`12902`)
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 6996254f5..e2a448240 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -1747,7 +1747,7 @@ class BaseGrouper(object):
             values = _algos.ensure_float64(values)
         elif com.is_integer_dtype(values):
             values = values.astype('int64', copy=False)
-        elif is_numeric:
+        elif is_numeric and not com.is_complex_dtype(values):
             values = _algos.ensure_float64(values)
         else:
             values = values.astype(object)
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 6cf779bad..b964665eb 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -2475,6 +2475,17 @@ class TestGroupBy(tm.TestCase):
         result = a.groupby(level=0).sum()
         self.assertEqual(result.index.name, a.index.name)
 
+    def test_groupby_complex(self):
+        # GH 12902
+        a = Series(data=np.arange(4) * (1 + 2j), index=[0, 0, 1, 1])
+        expected = Series((1 + 2j, 5 + 10j))
+
+        result = a.groupby(level=0).sum()
+        assert_series_equal(result, expected)
+
+        result = a.sum(level=0)
+        assert_series_equal(result, expected)
+
     def test_level_preserve_order(self):
         grouped = self.mframe.groupby(level=0)
         exp_labels = np.array([0, 0, 0, 1, 1, 2, 2, 3, 3, 3])
@@ -3254,7 +3265,7 @@ class TestGroupBy(tm.TestCase):
     def test_groupby_keys_same_size_as_index(self):
         # GH 11185
         freq = 's'
-        index = pd.date_range(start=np.datetime64('2015-09-29T11:34:44-0700'),
+        index = pd.date_range(start=pd.Timestamp('2015-09-29T11:34:44-0700'),
                               periods=2, freq=freq)
         df = pd.DataFrame([['A', 10], ['B', 15]], columns=[
             'metric', 'values'
