commit 0d2e1a7dcc4ea5eeb669afedf96750860fc15b79
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Nov 24 00:22:26 2011 -0500

    TST: remove special regression window/cluster constants, misc testing

diff --git a/RELEASE.rst b/RELEASE.rst
index c4a7ebdc8..81365eb7e 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -75,6 +75,7 @@ pandas 0.6.0
   - Add `DataFrame.to_html` for formatting DataFrame to HTML (PR #387)
   - MaskedArray can be passed to DataFrame constructor and masked values will be
     converted to NaN (PR #396)
+  - Add `DataFrame.boxplot` function (GH #368, others)
 
 **Improvements to existing features**
 
diff --git a/pandas/stats/common.py b/pandas/stats/common.py
index f88789cce..492a7a767 100644
--- a/pandas/stats/common.py
+++ b/pandas/stats/common.py
@@ -1,46 +1,41 @@
-TIME = 0
-ENTITY = 1
-
 def _get_cluster_type(cluster_type):
-    if cluster_type in (TIME, ENTITY, None):
+    cluster_type = _WINDOW_TYPES.get(cluster_type, cluster_type)
+    if cluster_type is None:
         return cluster_type
 
-    elif isinstance(cluster_type, basestring):
-        cluster_type_up = cluster_type.upper()
-
-        if cluster_type_up == 'ENTITY':
-            return ENTITY
-        elif cluster_type_up == 'TIME':
-            return TIME
+    cluster_type_up = cluster_type.upper()
 
-    raise Exception('Unrecognized clustering type: %s' % cluster_type)
+    if cluster_type_up == 'ENTITY':
+        return 'entity'
+    elif cluster_type_up == 'TIME':
+        return 'time'
+    else:  # pragma: no cover
+        raise Exception('Unrecognized cluster type: %s' % cluster_type)
 
-FULL_SAMPLE = 0
-ROLLING = 1
-EXPANDING = 2
-
-def _get_window_type(window_type):
-    if window_type in (FULL_SAMPLE, ROLLING, EXPANDING):
-        return window_type
-    elif isinstance(window_type, basestring):
-        window_type_up = window_type.upper()
+_CLUSTER_TYPES = {
+    0 : 'time',
+    1 : 'entity'
+}
 
-        if window_type_up in ('FULL SAMPLE', 'FULL_SAMPLE'):
-            return FULL_SAMPLE
-        elif window_type_up == 'ROLLING':
-            return ROLLING
-        elif window_type_up == 'EXPANDING':
-            return EXPANDING
+_WINDOW_TYPES = {
+    0 : 'full_sample',
+    1 : 'rolling',
+    2 : 'expanding'
+}
 
-    raise Exception('Unrecognized window type: %s' % window_type)
 
-def _get_window_type_name(window_type):
-    names = {
-        0 : 'full sample',
-        1 : 'rolling',
-        2 : 'expanding'
-    }
-    return names[window_type]
+def _get_window_type(window_type):
+    window_type = _WINDOW_TYPES.get(window_type, window_type)
+    window_type_up = window_type.upper()
+
+    if window_type_up in ('FULL SAMPLE', 'FULL_SAMPLE'):
+        return 'full_sample'
+    elif window_type_up == 'ROLLING':
+        return 'rolling'
+    elif window_type_up == 'EXPANDING':
+        return 'expanding'
+    else:  # pragma: no cover
+        raise Exception('Unrecognized window type: %s' % window_type)
 
 def banner(text, width=80):
     """
@@ -52,14 +47,3 @@ def banner(text, width=80):
     right = toFill - left
 
     return '%s%s%s' % ('-' * left, text, '-' * right)
-
-def f_stat_to_dict(result):
-    f_stat, shape, p_value = result
-
-    result = {}
-    result['f-stat'] = f_stat
-    result['DF X'] = shape[0]
-    result['DF Resid'] = shape[1]
-    result['p-value'] = p_value
-
-    return result
diff --git a/pandas/stats/fama_macbeth.py b/pandas/stats/fama_macbeth.py
index 8c35f2241..8640ded23 100644
--- a/pandas/stats/fama_macbeth.py
+++ b/pandas/stats/fama_macbeth.py
@@ -155,7 +155,7 @@ class MovingFamaMacBeth(FamaMacBeth):
 
     @property
     def _is_rolling(self):
-        return self._window_type == common.ROLLING
+        return self._window_type == 'rolling'
 
     def _calc_stats(self):
         mean_betas = []
diff --git a/pandas/stats/interface.py b/pandas/stats/interface.py
index cf3a2c82b..c0fed442e 100644
--- a/pandas/stats/interface.py
+++ b/pandas/stats/interface.py
@@ -94,14 +94,14 @@ def ols(**kwargs):
 
     if window_type is None:
         if window is None:
-            window_type = common.FULL_SAMPLE
+            window_type = 'full_sample'
         else:
-            window_type = common.ROLLING
+            window_type = 'rolling'
     else:
         window_type = common._get_window_type(window_type)
 
-    if window_type != common.FULL_SAMPLE:
-        kwargs['window_type'] = common._get_window_type_name(window_type)
+    if window_type != 'full_sample':
+        kwargs['window_type'] = common._get_window_type(window_type)
 
     y = kwargs.get('y')
     x = kwargs.get('x')
@@ -113,7 +113,7 @@ def ols(**kwargs):
     if isinstance(x, (Panel, LongPanel)):
         panel = True
 
-    if window_type == common.FULL_SAMPLE:
+    if window_type == 'full_sample':
         for rolling_field in ('window_type', 'window', 'min_periods'):
             if rolling_field in kwargs:
                 del kwargs[rolling_field]
diff --git a/pandas/stats/math.py b/pandas/stats/math.py
index 05c6be0cc..c04843549 100644
--- a/pandas/stats/math.py
+++ b/pandas/stats/math.py
@@ -121,12 +121,3 @@ def calc_F(R, r, beta, var_beta, nobs, df):
 
     return F, (q, nobs - df), p_value
 
-def chain_dot(*matrices):
-    """
-    Returns the dot product of the given matrices.
-
-    Parameters
-    ----------
-    matrices: argument list of ndarray
-    """
-    return reduce(lambda x, y: np.dot(y, x), matrices[::-1])
diff --git a/pandas/stats/ols.py b/pandas/stats/ols.py
index aee3c34bc..3fea01661 100644
--- a/pandas/stats/ols.py
+++ b/pandas/stats/ols.py
@@ -184,7 +184,7 @@ class OLS(object):
     @cache_readonly
     def f_stat(self):
         """Returns the f-stat value."""
-        return common.f_stat_to_dict(self._f_stat_raw)
+        return f_stat_to_dict(self._f_stat_raw)
 
     def f_test(self, hypothesis):
         """Runs the F test, given a joint hypothesis.  The hypothesis is
@@ -239,7 +239,7 @@ class OLS(object):
         result = math.calc_F(R, r, self._beta_raw, self._var_beta_raw,
                              self._nobs, self.df)
 
-        return common.f_stat_to_dict(result)
+        return f_stat_to_dict(result)
 
     @cache_readonly
     def _p_value_raw(self):
@@ -584,7 +584,7 @@ class MovingOLS(OLS):
     @cache_readonly
     def f_stat(self):
         """Returns the f-stat value."""
-        f_stat_dicts = dict((date, common.f_stat_to_dict(f_stat))
+        f_stat_dicts = dict((date, f_stat_to_dict(f_stat))
                             for date, f_stat in zip(self.beta.index,
                                                     self._f_stat_raw))
 
@@ -672,7 +672,7 @@ class MovingOLS(OLS):
 
     @property
     def _is_rolling(self):
-        return self._window_type == common.ROLLING
+        return self._window_type == 'rolling'
 
     @cache_readonly
     def _beta_raw(self):
@@ -1226,3 +1226,16 @@ def _y_converter(y):
         return np.array([y])
     else:
         return y
+
+
+def f_stat_to_dict(result):
+    f_stat, shape, p_value = result
+
+    result = {}
+    result['f-stat'] = f_stat
+    result['DF X'] = shape[0]
+    result['DF Resid'] = shape[1]
+    result['p-value'] = p_value
+
+    return result
+
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index 98c0a4211..4d7e77e4c 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -362,9 +362,9 @@ class PanelOLS(OLS):
     @cache_readonly
     def _var_beta_raw(self):
         cluster_axis = None
-        if self._cluster == common.TIME:
+        if self._cluster == 'time':
             cluster_axis = 0
-        elif self._cluster == common.ENTITY:
+        elif self._cluster == 'entity':
             cluster_axis = 1
 
         x = self._x
@@ -547,9 +547,9 @@ class MovingPanelOLS(MovingOLS, PanelOLS):
         dates = x.major_axis
 
         cluster_axis = None
-        if self._cluster == common.TIME:
+        if self._cluster == 'time':
             cluster_axis = 0
-        elif self._cluster == common.ENTITY:
+        elif self._cluster == 'entity':
             cluster_axis = 1
 
         nobs = self._nobs
@@ -663,8 +663,8 @@ class NonPooledPanelOLS(object):
         True if you want an intercept.
     nw_lags : None or int
         Number of Newey-West lags.
-    window_type : int
-        FULL_SAMPLE, ROLLING, EXPANDING.  FULL_SAMPLE by default.
+    window_type : {'full_sample', 'rolling', 'expanding'}
+        'full_sample' by default
     window : int
         size of window (for rolling/expanding OLS)
     """
@@ -690,7 +690,7 @@ class NonPooledPanelOLS(object):
         'y_predict'
     ]
 
-    def __init__(self, y, x, window_type=common.FULL_SAMPLE, window=None,
+    def __init__(self, y, x, window_type='full_sample', window=None,
                  min_periods=None, intercept=True, nw_lags=None,
                  nw_overlap=False):
 
diff --git a/pandas/stats/var.py b/pandas/stats/var.py
index cc3b70862..e0d5e47e7 100644
--- a/pandas/stats/var.py
+++ b/pandas/stats/var.py
@@ -7,7 +7,7 @@ from pandas.core.frame import DataFrame
 from pandas.core.panel import Panel
 from pandas.core.series import Series
 import pandas.stats.common as common
-from pandas.stats.math import chain_dot, inv
+from pandas.stats.math import inv
 from pandas.stats.ols import _combine_rhs
 
 class VAR(object):
@@ -571,3 +571,13 @@ def _drop_incomplete_rows(array):
 
 def _make_param_name(lag, name):
     return 'L%d.%s' % (lag, name)
+
+def chain_dot(*matrices):
+    """
+    Returns the dot product of the given matrices.
+
+    Parameters
+    ----------
+    matrices: argument list of ndarray
+    """
+    return reduce(lambda x, y: np.dot(y, x), matrices[::-1])
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 800237e21..6d94de237 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -679,6 +679,10 @@ class TestMultiLevel(unittest.TestCase):
         exp.ix[2000].values[:] = 5
         assert_frame_equal(df, exp)
 
+        # this works...for now
+        df['A'].ix[14] = 5
+        self.assertEquals(df['A'][14], 5)
+
     def test_unstack_preserve_types(self):
         # GH #403
         self.ymd['E'] = 'foo'
