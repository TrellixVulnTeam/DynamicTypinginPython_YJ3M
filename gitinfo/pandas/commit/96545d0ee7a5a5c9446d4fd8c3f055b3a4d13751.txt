commit 96545d0ee7a5a5c9446d4fd8c3f055b3a4d13751
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Nov 27 22:07:44 2012 -0500

    BUG: enable joins to work between multiindex and non-multi. close #2024

diff --git a/pandas/core/index.py b/pandas/core/index.py
index d0704bb1d..02580d2e1 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1762,12 +1762,17 @@ class MultiIndex(Index):
         -------
         appended : Index
         """
-        if isinstance(other, (list, tuple)):
-            to_concat = (self.values,) + tuple(k.values for k in other)
-        else:
-            to_concat = self.values, other.values
+        if not isinstance(other, (list, tuple)):
+            other = [other]
+
+        to_concat = (self.values,) + tuple(k.values for k in other)
         new_tuples = np.concatenate(to_concat)
-        return MultiIndex.from_tuples(new_tuples, names=self.names)
+
+        # if all(isinstance(x, MultiIndex) for x in other):
+        try:
+            return MultiIndex.from_tuples(new_tuples, names=self.names)
+        except:
+            return Index(new_tuples)
 
     def argsort(self, *args, **kwargs):
         return self.values.argsort()
@@ -2408,14 +2413,7 @@ class MultiIndex(Index):
                                           names=result_names)
 
     def _assert_can_do_setop(self, other):
-        if not isinstance(other, MultiIndex):
-            if len(other) == 0:
-                return True
-            raise TypeError('can only call with other hierarchical '
-                            'index objects')
-
-        if self.nlevels != other.nlevels:
-            raise AssertionError('Must have same number of levels')
+        pass
 
     def insert(self, loc, item):
         """
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 071ee11a0..8e65b9362 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -1471,7 +1471,8 @@ class TestMultiIndex(unittest.TestCase):
         self.assert_(len(result) == 0)
 
         # raise Exception called with non-MultiIndex
-        self.assertRaises(Exception, first.diff, first._tuple_index)
+        result = first.diff(first._tuple_index)
+        self.assertTrue(result.equals(first[:0]))
 
     def test_from_tuples(self):
         self.assertRaises(Exception, MultiIndex.from_tuples, [])
diff --git a/pandas/tools/tests/test_merge.py b/pandas/tools/tests/test_merge.py
index 10a5a1a8e..336db6e3f 100644
--- a/pandas/tools/tests/test_merge.py
+++ b/pandas/tools/tests/test_merge.py
@@ -407,6 +407,16 @@ class TestMerge(unittest.TestCase):
 
         # _assert_same_contents(expected, expected2.ix[:, expected.columns])
 
+    def test_join_hierarchical_mixed(self):
+        df = DataFrame([(1,2,3), (4,5,6)], columns = ['a','b','c'])
+        new_df = df.groupby(['a']).agg({'b': [np.mean, np.sum]})
+        other_df = DataFrame([(1,2,3), (7,10,6)], columns = ['a','b','d'])
+        other_df.set_index('a', inplace=True)
+
+        result = merge(new_df, other_df, left_index=True, right_index=True)
+        self.assertTrue(('b', 'mean') in result)
+        self.assertTrue('b' in result)
+
     def test_join_float64_float32(self):
         a = DataFrame(randn(10,2), columns=['a','b'])
         b = DataFrame(randn(10,1), columns=['c']).astype(np.float32)
