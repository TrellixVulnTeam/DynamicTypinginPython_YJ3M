commit dd368eb574f7f62f8e8e8d667d68b5d06ae241de
Author: Jeff Reback <jeff@reback.net>
Date:   Tue Feb 28 09:17:08 2017 -0500

    DEPR: remove pd.TimeSeries & Series.is_time_series
    
    xref #10890
    
    Author: Jeff Reback <jeff@reback.net>
    
    Closes #15098 from jreback/time_series and squashes the following commits:
    
    d9101bc [Jeff Reback] fix back-compat for < 0.13
    ed57bd5 [Jeff Reback] DEPR: remove legacy pd.TimeSeries class in favor of pd.Series

diff --git a/doc/source/whatsnew/v0.20.0.txt b/doc/source/whatsnew/v0.20.0.txt
index f91ffcdb8..671df5760 100644
--- a/doc/source/whatsnew/v0.20.0.txt
+++ b/doc/source/whatsnew/v0.20.0.txt
@@ -246,6 +246,46 @@ Using ``.iloc``. Here we will get the location of the 'A' column, then use *posi
   df.iloc[[0, 2], df.columns.get_loc('A')]
 
 
+.. _whatsnew.api_breaking.io_compat
+
+Possible incompat for HDF5 formats for pandas < 0.13.0
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+``pd.TimeSeries`` was deprecated officially in 0.17.0, though has only been an alias since 0.13.0. It has
+been dropped in favor of ``pd.Series``. (:issue:``15098).
+
+This *may* cause HDF5 files that were created in prior versions to become unreadable if ``pd.TimeSeries``
+was used. This is most likely to be for pandas < 0.13.0. If you find yourself in this situation.
+You can use a recent prior version of pandas to read in your HDF5 files,
+then write them out again after applying the procedure below.
+
+.. code-block:: ipython
+
+   In [2]: s = pd.TimeSeries([1,2,3], index=pd.date_range('20130101', periods=3))
+
+   In [3]: s
+   Out[3]:
+   2013-01-01    1
+   2013-01-02    2
+   2013-01-03    3
+   Freq: D, dtype: int64
+
+   In [4]: type(s)
+   Out[4]: pandas.core.series.TimeSeries
+
+   In [5]: s = pd.Series(s)
+
+   In [6]: s
+   Out[6]:
+   2013-01-01    1
+   2013-01-02    2
+   2013-01-03    3
+   Freq: D, dtype: int64
+
+   In [7]: type(s)
+   Out[7]: pandas.core.series.Series
+
+
 .. _whatsnew_0200.api_breaking.index_map:
 
 Map on Index types now return other Index types
@@ -507,7 +547,7 @@ Removal of prior version deprecations/changes
   Similar functionality can be found in the `Google2Pandas <https://github.com/panalysis/Google2Pandas>`__ package.
 - ``pd.to_datetime`` and ``pd.to_timedelta`` have dropped the ``coerce`` parameter in favor of ``errors`` (:issue:`13602`)
 - ``pandas.stats.fama_macbeth``, ``pandas.stats.ols``, ``pandas.stats.plm`` and ``pandas.stats.var``, as well as the top-level ``pandas.fama_macbeth`` and ``pandas.ols`` routines are removed. Similar functionaility can be found in the `statsmodels <shttp://www.statsmodels.org/dev/>`__ package. (:issue:`11898`)
-
+- ``Series.is_time_series`` is dropped in favor of ``Series.index.is_all_dates`` (:issue:``)
 
 
 .. _whatsnew_0200.performance:
diff --git a/pandas/compat/pickle_compat.py b/pandas/compat/pickle_compat.py
index 240baa848..b8ccd13c1 100644
--- a/pandas/compat/pickle_compat.py
+++ b/pandas/compat/pickle_compat.py
@@ -58,7 +58,10 @@ _class_locations_map = {
 
     # 15477
     ('pandas.core.base', 'FrozenNDArray'): ('pandas.indexes.frozen', 'FrozenNDArray'),
-    ('pandas.core.base', 'FrozenList'): ('pandas.indexes.frozen', 'FrozenList')
+    ('pandas.core.base', 'FrozenList'): ('pandas.indexes.frozen', 'FrozenList'),
+
+    # 10890
+    ('pandas.core.series', 'TimeSeries'): ('pandas.core.series', 'Series')
     }
 
 
diff --git a/pandas/core/api.py b/pandas/core/api.py
index 177e7b31c..eaebf45a0 100644
--- a/pandas/core/api.py
+++ b/pandas/core/api.py
@@ -13,7 +13,7 @@ from pandas.core.index import (Index, CategoricalIndex, Int64Index,
                                UInt64Index, RangeIndex, Float64Index,
                                MultiIndex)
 
-from pandas.core.series import Series, TimeSeries
+from pandas.core.series import Series
 from pandas.core.frame import DataFrame
 from pandas.core.panel import Panel, WidePanel
 from pandas.core.panel4d import Panel4D
diff --git a/pandas/core/series.py b/pandas/core/series.py
index da47ab5df..ffe1be26f 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -277,13 +277,6 @@ class Series(base.IndexOpsMixin, strings.StringAccessorMixin,
     def _can_hold_na(self):
         return self._data._can_hold_na
 
-    @property
-    def is_time_series(self):
-        warnings.warn("is_time_series is deprecated. Please use "
-                      "Series.index.is_all_dates", FutureWarning, stacklevel=2)
-        # return self._subtyp in ['time_series', 'sparse_time_series']
-        return self.index.is_all_dates
-
     _index = None
 
     def _set_axis(self, axis, labels, fastpath=False):
@@ -2985,16 +2978,6 @@ def _sanitize_array(data, index, dtype=None, copy=False,
     return subarr
 
 
-# backwards compatiblity
-class TimeSeries(Series):
-
-    def __init__(self, *args, **kwargs):
-        # deprecation TimeSeries, #10890
-        warnings.warn("TimeSeries is deprecated. Please use Series",
-                      FutureWarning, stacklevel=2)
-
-        super(TimeSeries, self).__init__(*args, **kwargs)
-
 # ----------------------------------------------------------------------
 # Add plotting methods to Series
 
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 06154a86f..9ad53db30 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -23,8 +23,6 @@ from pandas.types.common import (is_list_like,
 from pandas.types.missing import array_equivalent
 
 import numpy as np
-
-import pandas as pd
 from pandas import (Series, DataFrame, Panel, Panel4D, Index,
                     MultiIndex, Int64Index, isnull, concat,
                     SparseSeries, SparseDataFrame, PeriodIndex,
@@ -166,7 +164,6 @@ _TYPE_MAP = {
 
     Series: u('series'),
     SparseSeries: u('sparse_series'),
-    pd.TimeSeries: u('series'),
     DataFrame: u('frame'),
     SparseDataFrame: u('sparse_frame'),
     Panel: u('wide'),
@@ -175,7 +172,6 @@ _TYPE_MAP = {
 
 # storer class map
 _STORER_MAP = {
-    u('TimeSeries'): 'LegacySeriesFixed',
     u('Series'): 'LegacySeriesFixed',
     u('DataFrame'): 'LegacyFrameFixed',
     u('DataMatrix'): 'LegacyFrameFixed',
diff --git a/pandas/tests/api/test_api.py b/pandas/tests/api/test_api.py
index 90a0c1d5c..8ca369f8d 100644
--- a/pandas/tests/api/test_api.py
+++ b/pandas/tests/api/test_api.py
@@ -57,7 +57,7 @@ class TestPDApi(Base, tm.TestCase):
                'TimedeltaIndex', 'Timestamp']
 
     # these are already deprecated; awaiting removal
-    deprecated_classes = ['TimeSeries', 'WidePanel',
+    deprecated_classes = ['WidePanel',
                           'SparseTimeSeries', 'Panel4D',
                           'SparseList']
 
diff --git a/pandas/tests/indexes/data/s1-0.12.0.pickle b/pandas/tests/indexes/data/s1-0.12.0.pickle
deleted file mode 100644
index 0ce9cfdf3..000000000
Binary files a/pandas/tests/indexes/data/s1-0.12.0.pickle and /dev/null differ
diff --git a/pandas/tests/indexes/data/s2-0.12.0.pickle b/pandas/tests/indexes/data/s2-0.12.0.pickle
deleted file mode 100644
index 2318be2d9..000000000
Binary files a/pandas/tests/indexes/data/s2-0.12.0.pickle and /dev/null differ
diff --git a/pandas/tests/indexes/test_base.py b/pandas/tests/indexes/test_base.py
index 2f5b98d14..79d10cbda 100644
--- a/pandas/tests/indexes/test_base.py
+++ b/pandas/tests/indexes/test_base.py
@@ -9,8 +9,6 @@ from pandas.tests.indexes.common import Base
 from pandas.compat import (range, lrange, lzip, u,
                            text_type, zip, PY3, PY36)
 import operator
-import os
-
 import numpy as np
 
 from pandas import (period_range, date_range, Series,
@@ -381,15 +379,6 @@ class TestIndex(Base, tm.TestCase):
             # with arguments
             ind.view('i8')
 
-    def test_legacy_pickle_identity(self):
-
-        # GH 8431
-        pth = tm.get_data_path()
-        s1 = pd.read_pickle(os.path.join(pth, 's1-0.12.0.pickle'))
-        s2 = pd.read_pickle(os.path.join(pth, 's2-0.12.0.pickle'))
-        self.assertFalse(s1.index.identical(s2.index))
-        self.assertFalse(s1.index.equals(s2.index))
-
     def test_astype(self):
         casted = self.intIndex.astype('i8')
 
diff --git a/pandas/tests/io/data/legacy_hdf/legacy.h5 b/pandas/tests/io/data/legacy_hdf/legacy.h5
deleted file mode 100644
index 38b822dd1..000000000
Binary files a/pandas/tests/io/data/legacy_hdf/legacy.h5 and /dev/null differ
diff --git a/pandas/tests/io/test_pytables.py b/pandas/tests/io/test_pytables.py
index d5a8b380d..821d9956a 100644
--- a/pandas/tests/io/test_pytables.py
+++ b/pandas/tests/io/test_pytables.py
@@ -4454,15 +4454,6 @@ class TestHDFStore(Base, tm.TestCase):
             d1 = store['detector']
             self.assertIsInstance(d1, DataFrame)
 
-    def test_legacy_read(self):
-        with ensure_clean_store(
-                tm.get_data_path('legacy_hdf/legacy.h5'),
-                mode='r') as store:
-            store['a']
-            store['b']
-            store['c']
-            store['d']
-
     def test_legacy_table_read(self):
         # legacy table types
         with ensure_clean_store(
diff --git a/pandas/tests/series/test_alter_axes.py b/pandas/tests/series/test_alter_axes.py
index 6473dbeea..5997b9109 100644
--- a/pandas/tests/series/test_alter_axes.py
+++ b/pandas/tests/series/test_alter_axes.py
@@ -107,9 +107,6 @@ class TestSeriesAlterAxes(TestData, tm.TestCase):
 
         s = Series(lrange(10))
         s.index = idx
-
-        with tm.assert_produces_warning(FutureWarning):
-            self.assertTrue(s.is_time_series)
         self.assertTrue(s.index.is_all_dates)
 
     def test_reset_index(self):
diff --git a/pandas/tests/series/test_constructors.py b/pandas/tests/series/test_constructors.py
index aef4c9269..c15171f33 100644
--- a/pandas/tests/series/test_constructors.py
+++ b/pandas/tests/series/test_constructors.py
@@ -37,22 +37,11 @@ class TestSeriesConstructors(TestData, tm.TestCase):
         self.assertEqual(int(Series([1.])), 1)
         self.assertEqual(long(Series([1.])), 1)
 
-    def test_TimeSeries_deprecation(self):
-
-        # deprecation TimeSeries, #10890
-        with tm.assert_produces_warning(FutureWarning):
-            pd.TimeSeries(1, index=date_range('20130101', periods=3))
-
     def test_constructor(self):
-        # Recognize TimeSeries
-        with tm.assert_produces_warning(FutureWarning):
-            self.assertTrue(self.ts.is_time_series)
         self.assertTrue(self.ts.index.is_all_dates)
 
         # Pass in Series
         derived = Series(self.ts)
-        with tm.assert_produces_warning(FutureWarning):
-            self.assertTrue(derived.is_time_series)
         self.assertTrue(derived.index.is_all_dates)
 
         self.assertTrue(tm.equalContents(derived.index, self.ts.index))
@@ -64,11 +53,7 @@ class TestSeriesConstructors(TestData, tm.TestCase):
         self.assertEqual(mixed.dtype, np.object_)
         self.assertIs(mixed[1], np.NaN)
 
-        with tm.assert_produces_warning(FutureWarning):
-            self.assertFalse(self.empty.is_time_series)
         self.assertFalse(self.empty.index.is_all_dates)
-        with tm.assert_produces_warning(FutureWarning):
-            self.assertFalse(Series({}).is_time_series)
         self.assertFalse(Series({}).index.is_all_dates)
         self.assertRaises(Exception, Series, np.random.randn(3, 3),
                           index=np.arange(3))
diff --git a/pandas/tests/series/test_timeseries.py b/pandas/tests/series/test_timeseries.py
index e0db813e6..8c22b3f04 100644
--- a/pandas/tests/series/test_timeseries.py
+++ b/pandas/tests/series/test_timeseries.py
@@ -383,8 +383,6 @@ class TestTimeSeries(TestData, tm.TestCase):
     def test_timeseries_coercion(self):
         idx = tm.makeDateIndex(10000)
         ser = Series(np.random.randn(len(idx)), idx.astype(object))
-        with tm.assert_produces_warning(FutureWarning):
-            self.assertTrue(ser.is_time_series)
         self.assertTrue(ser.index.is_all_dates)
         self.assertIsInstance(ser.index, DatetimeIndex)
 
