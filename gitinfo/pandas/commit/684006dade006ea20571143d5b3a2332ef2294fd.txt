commit 684006dade006ea20571143d5b3a2332ef2294fd
Author: Martin Blais <blais@furius.ca>
Date:   Sat Aug 4 20:01:15 2012 -0400

    Formatting: Added classes argument to DataFrame.to_html().

diff --git a/pandas/core/format.py b/pandas/core/format.py
index 5a4b7a4d5..8b2fc8362 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -255,7 +255,7 @@ class DataFrameFormatter(object):
                             na_rep=self.na_rep,
                             space=self.col_space)
 
-    def to_html(self):
+    def to_html(self, classes=None):
         """
         Render a DataFrame to a html table.
         """
@@ -291,7 +291,13 @@ class DataFrameFormatter(object):
         indent_delta = 2
         frame = self.frame
 
-        write('<table border="1">', indent)
+        _classes = ['dataframe'] # Default class.
+        if classes is not None:
+            if isinstance(classes, str):
+                classes = classes.split()
+            assert isinstance(classes, (list, tuple))
+            _classes.extend(classes)
+        write('<table border="1" class="%s">' % ' '.join(_classes), indent)
 
         def _column_header():
             row = [''] * (frame.index.nlevels - 1)
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index dc5c6c0f6..1a09ba6a8 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1240,7 +1240,7 @@ class DataFrame(NDFrame):
     def to_html(self, buf=None, columns=None, col_space=None, colSpace=None,
                 header=True, index=True, na_rep='NaN', formatters=None,
                 float_format=None, sparsify=None, index_names=True,
-                bold_rows=True):
+                bold_rows=True, classes=None):
         """
         to_html-specific options
         bold_rows : boolean, default True
@@ -1263,7 +1263,7 @@ class DataFrame(NDFrame):
                                            bold_rows=bold_rows,
                                            sparsify=sparsify,
                                            index_names=index_names)
-        formatter.to_html()
+        formatter.to_html(classes=classes)
 
         if buf is None:
             return formatter.buf.getvalue()
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 1484a41b9..fd1685329 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -6,6 +6,7 @@ except:
 import os
 import sys
 import unittest
+from textwrap import dedent
 
 from numpy import nan
 from numpy.random import randn
@@ -413,7 +414,7 @@ class TestDataFrameFormatting(unittest.TestCase):
                                                 names=['CL0', 'CL1'])
         df = pandas.DataFrame([list('abcd'), list('efgh')], columns=columns)
         result = df.to_html()
-        expected = ('<table border="1">\n'
+        expected = ('<table border="1" class="dataframe">\n'
                     '  <thead>\n'
                     '    <tr>\n'
                     '      <th><table><tbody><tr><td>CL0</td></tr><tr>'
@@ -451,7 +452,7 @@ class TestDataFrameFormatting(unittest.TestCase):
                                                     np.mod(range(4), 2)))
         df = pandas.DataFrame([list('abcd'), list('efgh')], columns=columns)
         result = df.to_html()
-        expected = ('<table border="1">\n'
+        expected = ('<table border="1" class="dataframe">\n'
                     '  <thead>\n'
                     '    <tr>\n'
                     '      <th></th>\n'
@@ -495,6 +496,27 @@ class TestDataFrameFormatting(unittest.TestCase):
 
         fmt.reset_printoptions()
 
+    def test_to_html_with_classes(self):
+        df = pandas.DataFrame()
+        result = df.to_html(classes="sortable draggable")
+        expected = dedent("""
+
+            <table border="1" class="dataframe sortable draggable">
+              <tbody>
+                <tr>
+                  <td>Index([], dtype=object)</td>
+                  <td>Empty DataFrame</td>
+                </tr>
+              </tbody>
+            </table>
+
+        """).strip()
+        self.assertEqual(result, expected)
+
+        result = df.to_html(classes=["sortable", "draggable"])
+        self.assertEqual(result, expected)
+
+
 class TestSeriesFormatting(unittest.TestCase):
 
     def setUp(self):
