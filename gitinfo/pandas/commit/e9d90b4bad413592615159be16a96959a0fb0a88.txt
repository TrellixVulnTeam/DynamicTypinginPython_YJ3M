commit e9d90b4bad413592615159be16a96959a0fb0a88
Author: Irv Lustig <irv@princeton.com>
Date:   Wed Jul 8 08:43:18 2020 -0400

    Fix regression on datetime in MultiIndex (#35140)

diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 708b68743..04d1dbceb 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -1165,6 +1165,10 @@ class _LocIndexer(_LocationIndexer):
                     if len(key) == labels.nlevels:
                         return {"key": key}
                     raise
+            except InvalidIndexError:
+                # GH35015, using datetime as column indices raises exception
+                if not isinstance(labels, ABCMultiIndex):
+                    raise
             except TypeError:
                 pass
             except ValueError:
diff --git a/pandas/tests/indexing/multiindex/test_datetime.py b/pandas/tests/indexing/multiindex/test_datetime.py
index 907d20cd5..a49cb0bc2 100644
--- a/pandas/tests/indexing/multiindex/test_datetime.py
+++ b/pandas/tests/indexing/multiindex/test_datetime.py
@@ -2,7 +2,16 @@ from datetime import datetime
 
 import numpy as np
 
-from pandas import Index, Period, Series, period_range
+from pandas import (
+    DataFrame,
+    Index,
+    MultiIndex,
+    Period,
+    Series,
+    period_range,
+    to_datetime,
+)
+import pandas._testing as tm
 
 
 def test_multiindex_period_datetime():
@@ -20,3 +29,22 @@ def test_multiindex_period_datetime():
     # try datetime as index
     result = s.loc["a", datetime(2012, 1, 1)]
     assert result == expected
+
+
+def test_multiindex_datetime_columns():
+    # GH35015, using datetime as column indices raises exception
+
+    mi = MultiIndex.from_tuples(
+        [(to_datetime("02/29/2020"), to_datetime("03/01/2020"))], names=["a", "b"]
+    )
+
+    df = DataFrame([], columns=mi)
+
+    expected_df = DataFrame(
+        [],
+        columns=MultiIndex.from_arrays(
+            [[to_datetime("02/29/2020")], [to_datetime("03/01/2020")]], names=["a", "b"]
+        ),
+    )
+
+    tm.assert_frame_equal(df, expected_df)
