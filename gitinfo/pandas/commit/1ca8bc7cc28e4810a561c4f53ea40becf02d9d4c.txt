commit 1ca8bc7cc28e4810a561c4f53ea40becf02d9d4c
Author: Skipper Seabold <jsseabold@gmail.com>
Date:   Mon Feb 20 19:11:32 2012 -0500

    TST: Add tests for BMonthBeing and BQuarterBegin

diff --git a/pandas/tests/test_datetools.py b/pandas/tests/test_datetools.py
index 8f19643ad..f056a22b3 100644
--- a/pandas/tests/test_datetools.py
+++ b/pandas/tests/test_datetools.py
@@ -4,7 +4,7 @@ import numpy as np
 
 from pandas.core.datetools import (
     bday, BDay, BQuarterEnd, BMonthEnd, BYearEnd, MonthEnd, MonthBegin,
-    BYearBegin, QuarterBegin,
+    BYearBegin, QuarterBegin, BQuarterBegin, BMonthBegin,
     DateOffset, Week, YearBegin, YearEnd, Hour, Minute, Second,
     WeekOfMonth, format, ole2datetime, QuarterEnd, to_datetime, normalize_date,
     getOffset, getOffsetName, inferTimeRule, hasOffsetName,
@@ -398,6 +398,65 @@ class TestWeekOfMonth(unittest.TestCase):
             offset = WeekOfMonth(week=week, weekday=weekday)
             self.assert_(offset.onOffset(date) == expected)
 
+class TestBMonthBegin(unittest.TestCase):
+    def test_offset(self):
+        tests = []
+
+        tests.append((BMonthBegin(),
+                     {datetime(2008, 1, 1): datetime(2008, 2, 1),
+                      datetime(2008, 1, 31): datetime(2008, 2, 1),
+                      datetime(2006, 12, 29): datetime(2007, 1, 1),
+                      datetime(2006, 12, 31): datetime(2007, 1, 1),
+                      datetime(2006, 9, 1): datetime(2006, 10, 2),
+                      datetime(2007, 1, 1): datetime(2007, 2, 1),
+                      datetime(2006, 12, 1): datetime(2007, 1, 1)}))
+
+        tests.append((BMonthBegin(0),
+                      {datetime(2008, 1, 1): datetime(2008, 1, 1),
+                       datetime(2006, 10, 2): datetime(2006, 10, 2),
+                       datetime(2008, 1, 31): datetime(2008, 2, 1),
+                       datetime(2006, 12, 29): datetime(2007, 1, 1),
+                       datetime(2006, 12, 31): datetime(2007, 1, 1),
+                       datetime(2006, 9, 15): datetime(2006, 10, 2)}))
+
+        tests.append((BMonthBegin(2),
+                     {datetime(2008, 1, 1): datetime(2008, 3, 3),
+                      datetime(2008, 1, 15): datetime(2008, 3, 3),
+                      datetime(2006, 12, 29): datetime(2007, 2, 1),
+                      datetime(2006, 12, 31): datetime(2007, 2, 1),
+                      datetime(2007, 1, 1): datetime(2007, 3, 1),
+                      datetime(2006, 11, 1): datetime(2007, 1, 1)}))
+
+        tests.append((BMonthBegin(-1),
+                     {datetime(2007, 1, 1): datetime(2006, 12, 1),
+                      datetime(2008, 6, 30): datetime(2008, 6, 2),
+                      datetime(2008, 6, 1): datetime(2008, 5, 1),
+                      datetime(2008, 3, 10): datetime(2008, 3, 3),
+                      datetime(2008, 12, 31): datetime(2008, 12, 1),
+                      datetime(2006, 12, 29): datetime(2006, 12, 1),
+                      datetime(2006, 12, 30): datetime(2006, 12, 1),
+                      datetime(2007, 1, 1): datetime(2006, 12, 1)}))
+
+        for dateOffset, cases in tests:
+            for baseDate, expected in cases.iteritems():
+                assertEq(dateOffset, baseDate, expected)
+
+    def test_onOffset(self):
+
+        tests = [(BMonthBegin(), datetime(2007, 12, 31), False),
+                 (BMonthBegin(), datetime(2008, 1, 1), True),
+                 (BMonthBegin(), datetime(2008, 3, 3), True)]
+
+        for offset, date, expected in tests:
+            assertOnOffset(offset, date, expected)
+
+    def test_offsets_compare_equal(self):
+        # root cause of #456
+        offset1 = BMonthBegin()
+        offset2 = BMonthBegin()
+        self.assertFalse(offset1 != offset2)
+
+
 class TestBMonthEnd(unittest.TestCase):
 
     def test_offset(self):
@@ -539,6 +598,90 @@ class TestMonthEnd(unittest.TestCase):
         for offset, date, expected in tests:
             assertOnOffset(offset, date, expected)
 
+class TestBQuarterBegin(unittest.TestCase):
+
+    def test_isAnchored(self):
+        self.assert_(BQuarterBegin(startingMonth=1).isAnchored())
+        self.assert_(BQuarterBegin().isAnchored())
+        self.assert_(not BQuarterBegin(2, startingMonth=1).isAnchored())
+
+    def test_offset(self):
+        tests = []
+
+        tests.append((BQuarterBegin(startingMonth=1),
+                      {datetime(2008, 1, 1): datetime(2008, 4, 1),
+                       datetime(2008, 1, 31): datetime(2008, 4, 1),
+                       datetime(2008, 2, 15): datetime(2008, 4, 1),
+                       datetime(2008, 2, 29): datetime(2008, 4, 1),
+                       datetime(2008, 3, 15): datetime(2008, 4, 1),
+                       datetime(2008, 3, 31): datetime(2008, 4, 1),
+                       datetime(2008, 4, 15): datetime(2008, 7, 1),
+                       datetime(2007, 3, 15): datetime(2007, 4, 2),
+                       datetime(2007, 2, 28): datetime(2007, 4, 2),
+                       datetime(2007, 1, 1): datetime(2007, 4, 2),
+                       datetime(2007, 4, 15): datetime(2007, 7, 2),
+                       datetime(2007, 7, 1): datetime(2007, 7, 2),
+                       datetime(2007, 4, 1): datetime(2007, 4, 2),
+                       datetime(2007, 4, 2): datetime(2007, 7, 2),
+                       datetime(2008, 4, 30): datetime(2008, 7, 1),}))
+
+        tests.append((BQuarterBegin(startingMonth=2),
+                      {datetime(2008, 1, 1): datetime(2008, 2, 1),
+                       datetime(2008, 1, 31): datetime(2008, 2, 1),
+                       datetime(2008, 1, 15): datetime(2008, 2, 1),
+                       datetime(2008, 2, 29): datetime(2008, 5, 1),
+                       datetime(2008, 3, 15): datetime(2008, 5, 1),
+                       datetime(2008, 3, 31): datetime(2008, 5, 1),
+                       datetime(2008, 4, 15): datetime(2008, 5, 1),
+                       datetime(2008, 8, 15): datetime(2008, 11, 3),
+                       datetime(2008, 9, 15): datetime(2008, 11, 3),
+                       datetime(2008, 11, 1): datetime(2008, 11, 3),
+                       datetime(2008, 4, 30): datetime(2008, 5, 1),}))
+
+        tests.append((BQuarterBegin(startingMonth=1, n=0),
+                      {datetime(2008, 1, 1): datetime(2008, 1, 1),
+                       datetime(2007, 12, 31): datetime(2008, 1, 1),
+                       datetime(2008, 2, 15): datetime(2008, 4, 1),
+                       datetime(2008, 2, 29): datetime(2008, 4, 1),
+                       datetime(2008, 1, 15): datetime(2008, 4, 1),
+                       datetime(2008, 2, 27): datetime(2008, 4, 1),
+                       datetime(2008, 3, 15): datetime(2008, 4, 1),
+                       datetime(2007, 4, 1): datetime(2007, 4, 2),
+                       datetime(2007, 4, 2): datetime(2007, 4, 2),
+                       datetime(2007, 7, 1): datetime(2007, 7, 2),
+                       datetime(2007, 4, 15): datetime(2007, 7, 2),
+                       datetime(2007, 7, 2): datetime(2007, 7, 2),}))
+
+        tests.append((BQuarterBegin(startingMonth=1, n=-1),
+                      {datetime(2008, 1, 1): datetime(2007, 10, 1),
+                       datetime(2008, 1, 31): datetime(2008, 1, 1),
+                       datetime(2008, 2, 15): datetime(2008, 1, 1),
+                       datetime(2008, 2, 29): datetime(2008, 1, 1),
+                       datetime(2008, 3, 15): datetime(2008, 1, 1),
+                       datetime(2008, 3, 31): datetime(2008, 1, 1),
+                       datetime(2008, 4, 15): datetime(2008, 4, 1),
+                       datetime(2007, 7, 3): datetime(2007, 7, 2),
+                       datetime(2007, 4, 3): datetime(2007, 4, 2),
+                       datetime(2007, 7, 2): datetime(2007, 4, 2),
+                       datetime(2008, 4, 1): datetime(2008, 1, 1),}))
+
+        tests.append((BQuarterBegin(startingMonth=1, n=2),
+                      {datetime(2008, 1, 1): datetime(2008, 7, 1),
+                       datetime(2008, 1, 15): datetime(2008, 7, 1),
+                       datetime(2008, 2, 29): datetime(2008, 7, 1),
+                       datetime(2008, 3, 15): datetime(2008, 7, 1),
+                       datetime(2007, 3, 31): datetime(2007, 7, 2),
+                       datetime(2007, 4, 15): datetime(2007, 10, 1),
+                       datetime(2008, 4, 30): datetime(2008, 10, 1),}))
+
+        for dateOffset, cases in tests:
+            for baseDate, expected in cases.iteritems():
+                assertEq(dateOffset, baseDate, expected)
+
+        # corner
+        offset = BQuarterBegin(n=-1, startingMonth=1)
+        self.assertEqual(datetime(2007, 4, 3) + offset, datetime(2007, 4, 2))
+
 class TestBQuarterEnd(unittest.TestCase):
 
     def test_isAnchored(self):
