commit 5ab110ad25eed4af1e3289dbe054b43562dc1b71
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jun 13 15:30:57 2011 -0400

    line coverage for frame.py complete

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index b333959b2..5616eb805 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -164,7 +164,8 @@ class DataFrame(PandasGeneric):
             index = extract_index(data)
 
         # don't force copy because getting jammed in an ndarray anyway
-        homogenized = _homogenize_series(data, index, dtype, force_copy=False)
+        homogenized = _homogenize_series(data, index, dtype)
+
         # segregates dtypes and forms blocks matching to columns
         blocks, columns = form_blocks(homogenized, index, columns)
 
@@ -203,6 +204,17 @@ class DataFrame(PandasGeneric):
         return BlockManager([block], index, columns)
 
     def astype(self, dtype):
+        """
+        Cast DataFrame to input numpy.dtype
+
+        Parameters
+        ----------
+        dtype : numpy.dtype or Python type
+
+        Returns
+        -------
+        casted : DataFrame
+        """
         return DataFrame(self._data, dtype=dtype)
 
     @property
@@ -614,7 +626,7 @@ class DataFrame(PandasGeneric):
 
     def __setstate__(self, state):
         # old DataFrame pickle
-        if len(state) == 3:
+        if len(state) == 3: # pragma: no cover
             self._unpickle_frame_compat(state)
         # old DataFrame pickle
         elif len(state) == 2: # pragma: no cover
@@ -2354,12 +2366,12 @@ class DataFrame(PandasGeneric):
     #----------------------------------------------------------------------
     # Deprecated stuff
 
-    def toDataMatrix(self):
+    def toDataMatrix(self): # pragma: no cover
         warnings.warn("toDataMatrix will disappear in next release "
                       "as there is no longer a DataMatrix class", FutureWarning)
         return self.copy()
 
-    def rows(self):
+    def rows(self): # pragma: no cover
         """Alias for the frame's index"""
         warnings.warn("Replace usage of .rows() with .index, will be removed "
                       "in next release", FutureWarning)
@@ -2376,12 +2388,12 @@ class DataFrame(PandasGeneric):
                       FutureWarning)
         return self.xs(key)
 
-    def merge(self, *args, **kwargs):
+    def merge(self, *args, **kwargs): # pragma: no cover
         warnings.warn("merge is deprecated. Use 'join' instead",
                       FutureWarning)
         return self.join(*args, **kwargs)
 
-    def asMatrix(self, *args, **kwargs):
+    def asMatrix(self, *args, **kwargs): # pragma: no cover
         warnings.warn("asMatrix is deprecated. Use 'as_matrix' or .values "
                       "instead", FutureWarning)
         return self.as_matrix(*args, **kwargs)
@@ -2546,7 +2558,7 @@ def _prep_ndarray(values, copy=True):
             values = values.copy()
     return values
 
-def _homogenize_series(data, index, dtype=None, force_copy=True):
+def _homogenize_series(data, index, dtype=None):
     homogenized = {}
 
     for k, v in data.iteritems():
@@ -2557,9 +2569,6 @@ def _homogenize_series(data, index, dtype=None, force_copy=True):
                 # Forces alignment. No need to copy data since we
                 # are putting it into an ndarray later
                 v = v.reindex(index)
-            elif force_copy:
-                # same index, but want to copy
-                v = v.copy()
         else:
             if isinstance(v, dict):
                 v = [v.get(i, nan) for i in index]
@@ -2570,9 +2579,6 @@ def _homogenize_series(data, index, dtype=None, force_copy=True):
             except Exception:
                 v = Series(v, index=index)
 
-            if force_copy:
-                v = v.copy()
-
         # # OK, I will relent for now.
         # if not issubclass(v.dtype.type, (float, int)):
         # #     v = v.astype(np.float64)
@@ -2592,10 +2598,6 @@ def _default_index(n):
 def _put_str(s, space):
     return ('%s' % s)[:space].ljust(space)
 
-def _reorder_columns(mat, current, desired):
-    indexer, mask = common.get_indexer(current, desired, None)
-    return mat.take(indexer[mask], axis=1)
-
 if __name__ == '__main__':
     import nose
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index a11a9a1e9..176896cbc 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -442,6 +442,20 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         df_casted = self.klass(self.frame, dtype=int)
         self.assert_(df_casted.values.dtype == np.int_)
 
+    def test_astype(self):
+        casted = self.frame.astype(int)
+        expected = DataFrame(self.frame.values.astype(int),
+                             index=self.frame.index,
+                             columns=self.frame.columns)
+        assert_frame_equal(casted, expected)
+
+        self.frame['foo'] = '5'
+        casted = self.frame.astype(int)
+        expected = DataFrame(self.frame.values.astype(int),
+                             index=self.frame.index,
+                             columns=self.frame.columns)
+        assert_frame_equal(casted, expected)
+
     def test_array_interface(self):
         result = np.sqrt(self.frame)
         self.assert_(type(result) is type(self.frame))
@@ -1823,6 +1837,30 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
     #----------------------------------------------------------------------
     # Tests to cope with refactored internals
 
+    def test_constructor_frame_copy(self):
+        cop = DataFrame(self.frame, copy=True)
+        cop['A'] = 5
+        self.assert_((cop['A'] == 5).all())
+        self.assert_(not (self.frame['A'] == 5).all())
+
+    def test_constructor_ndarray_copy(self):
+        df = DataFrame(self.frame.values)
+
+        self.frame.values[5] = 5
+        self.assert_((df.values[5] == 5).all())
+
+        df = DataFrame(self.frame.values, copy=True)
+        self.frame.values[6] = 6
+        self.assert_(not (df.values[6] == 6).all())
+
+    def test_constructor_series_copy(self):
+        series = self.frame._series
+
+        df = DataFrame({'A' : series['A']})
+        df['A'][:] = 5
+
+        self.assert_(not (series['A'] == 5).all())
+
     def test_assign_columns(self):
         self.frame['hi'] = 'there'
 
@@ -1832,13 +1870,20 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         assert_series_equal(self.frame['hi'], frame['foo2'])
 
     def test_cast_internals(self):
-        pass
+        casted = DataFrame(self.frame._data, dtype=int)
+        expected = DataFrame(self.frame._series, dtype=int)
+        assert_frame_equal(casted, expected)
 
     def test_consolidate(self):
         self.frame['E'] = 7.
         consolidated = self.frame.consolidate()
         self.assert_(len(consolidated._data.blocks) == 1)
 
+        # Ensure copy, do I want this?
+        recons = consolidated.consolidate()
+        self.assert_(recons is not consolidated)
+        assert_frame_equal(recons, consolidated)
+
     def test_modify_values(self):
         self.frame.values[5] = 5
         self.assert_((self.frame.values[5] == 5).all())
