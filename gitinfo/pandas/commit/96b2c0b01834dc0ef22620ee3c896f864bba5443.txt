commit 96b2c0b01834dc0ef22620ee3c896f864bba5443
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Apr 4 10:47:29 2012 -0400

    TST: more test coverage progress

diff --git a/pandas/core/common.py b/pandas/core/common.py
index b60b57fe9..dde82a19c 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -218,6 +218,8 @@ def take_2d(arr, indexer, out=None, mask=None, needs_masking=None, axis=0,
         # Cython methods expects 32-bit integers
         indexer = np.array(indexer, dtype=np.int32)
 
+    indexer = _ensure_int32(indexer)
+
     if dtype_str in ('int32', 'int64', 'bool'):
         if mask is None:
             mask = indexer == -1
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index ad4092e0e..194c3e78a 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -3103,9 +3103,12 @@ class DataFrame(NDFrame):
                 for k, v in series_gen:
                     results[k] = func(v)
             except Exception, e:
-                raise # XXXXX
-                if hasattr(e, 'args'):
-                    e.args = e.args + ('occurred at index %s' % str(k),)
+                try:
+                    if hasattr(e, 'args'):
+                        e.args = e.args + ('occurred at index %s' % str(k),)
+                except NameError:
+                    # no k defined yet
+                    pass
                 raise
 
         if len(results) > 0 and _is_sequence(results.values()[0]):
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 5f8bb5246..f8dff94e1 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1789,10 +1789,8 @@ copy : boolean, default False
             if isinstance(arg, dict):
                 arg = Series(arg)
 
-            indexer = lib.merge_indexer_object(self.values.astype(object),
-                                               arg.index.indexMap)
-
-            new_values = com.take_1d(np.asarray(arg), indexer)
+            indexer = arg.index.get_indexer(self.values)
+            new_values = com.take_1d(arg.values, indexer)
             return Series(new_values, index=self.index, name=self.name)
         else:
             mapped = lib.map_infer(self.values, arg)
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 138debf89..fad036133 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -11,6 +11,7 @@ import time
 import numpy as np
 from pandas import Series, TimeSeries, DataFrame, Panel, Index, MultiIndex
 from pandas.core.common import adjoin
+from pandas.core.algorithms import match
 import pandas._tseries as lib
 
 import pandas.core.common as com
@@ -693,7 +694,7 @@ class HDFStore(object):
             unique_tuples = lib.fast_unique(tuple_index)
             unique_tuples = _asarray_tuplesafe(unique_tuples)
 
-            indexer = lib.merge_indexer_object(unique_tuples, index_map)
+            indexer = match(unique_tuples, tuple_index)
 
             new_index = long_index.take(indexer)
             new_values = lp.values.take(indexer, axis=0)
@@ -752,7 +753,7 @@ def _convert_index(index):
         return np.asarray(values, dtype=np.float64), 'float', atom
     else: # pragma: no cover
         atom = _tables().ObjectAtom()
-        return np.asarray(values, dtype='O'), 'object', atom 
+        return np.asarray(values, dtype='O'), 'object', atom
 
 def _read_array(group, key):
     import tables
diff --git a/pandas/src/engines.pyx b/pandas/src/engines.pyx
index 34316e62d..bda919a10 100644
--- a/pandas/src/engines.pyx
+++ b/pandas/src/engines.pyx
@@ -132,7 +132,10 @@ cdef class IndexEngine:
         if not self.unique:
             raise Exception('Index values are not unique')
 
-        return self.mapping.get_item(val)
+        try:
+            return self.mapping.get_item(val)
+        except TypeError:
+            raise KeyError(val)
 
     cdef inline _ensure_mapping_populated(self):
         if not self.initialized:
@@ -261,7 +264,10 @@ cdef class DatetimeEngine(IndexEngine):
             val = np.datetime64(val)
             val = val.view('i8')
 
-        return self.mapping.get_item(val)
+        try:
+            return self.mapping.get_item(val)
+        except TypeError:
+            raise KeyError(val)
 
     def get_indexer(self, values):
         self._ensure_mapping_populated()
diff --git a/pandas/src/generate_code.py b/pandas/src/generate_code.py
index e3c9d9a6f..d22dfdbf6 100644
--- a/pandas/src/generate_code.py
+++ b/pandas/src/generate_code.py
@@ -2,7 +2,8 @@ from cStringIO import StringIO
 
 take_1d_template = """@cython.wraparound(False)
 @cython.boundscheck(False)
-def take_1d_%(name)s(ndarray[%(c_type)s] values, ndarray[int32_t] indexer,
+def take_1d_%(name)s(ndarray[%(c_type)s] values,
+                     ndarray[int32_t] indexer,
                      out=None, fill_value=np.nan):
     cdef:
         Py_ssize_t i, n, idx
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 8f08a94d7..e6b16f5e6 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -598,7 +598,7 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
     def test_setslice(self):
         sl = self.ts[5:20]
         self.assertEqual(len(sl), len(sl.index))
-        self.assertEqual(len(sl.index.indexMap), len(sl.index))
+        self.assert_(sl.index.is_unique)
 
     def test_basic_getitem_setitem_corner(self):
         # invalid tuples, e.g. self.ts[:, None] vs. self.ts[:, 2]
diff --git a/pandas/tools/tests/test_pivot.py b/pandas/tools/tests/test_pivot.py
index b766c951d..fdd748225 100644
--- a/pandas/tools/tests/test_pivot.py
+++ b/pandas/tools/tests/test_pivot.py
@@ -258,7 +258,7 @@ class TestCrosstab(unittest.TestCase):
 
 if __name__ == '__main__':
     import nose
-    nose.runmodule(argv=[__file__,'-vvs','-x','--ipdb', '--ipdb-failure'],
+    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
                    exit=False)
 
 
