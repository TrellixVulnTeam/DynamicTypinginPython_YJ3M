commit 818adb0104f14659bcdcc17bdcb60a7bdbb349de
Author: Phillip Cloud <cpcloud@gmail.com>
Date:   Wed Feb 12 22:39:32 2014 -0500

    CLN: replace in bool block rather than special-casing in common

diff --git a/pandas/core/common.py b/pandas/core/common.py
index b61b996f9..e895c8ed0 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -347,13 +347,7 @@ def mask_missing(arr, values_to_mask):
         values_to_mask = [values_to_mask]
 
     try:
-        values = np.array(values_to_mask)
-        cant_cast = not np.can_cast(values.dtype, arr.dtype, casting='safe')
-
-        if cant_cast and arr.dtype == np.bool_:
-            values_to_mask = values
-        else:
-            values_to_mask = np.array(values_to_mask, dtype=arr.dtype)
+        values_to_mask = np.array(values_to_mask, dtype=arr.dtype)
     except Exception:
         values_to_mask = np.array(values_to_mask, dtype=object)
 
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index a7e1548b4..faf858746 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -1216,6 +1216,7 @@ class FloatBlock(FloatOrComplexBlock):
         return (issubclass(value.dtype.type, np.floating) and
                 value.dtype == self.dtype)
 
+
 class ComplexBlock(FloatOrComplexBlock):
     is_complex = True
 
@@ -1355,6 +1356,14 @@ class BoolBlock(NumericBlock):
     def should_store(self, value):
         return issubclass(value.dtype.type, np.bool_)
 
+    def replace(self, to_replace, value, inplace=False, filter=None,
+                regex=False):
+        to_replace_values = np.atleast_1d(to_replace)
+        if not np.can_cast(to_replace_values, bool):
+            to_replace = to_replace_values
+        return super(BoolBlock, self).replace(to_replace, value,
+                                              inplace=inplace, filter=filter,
+                                              regex=regex)
 
 class ObjectBlock(Block):
     is_object = True
