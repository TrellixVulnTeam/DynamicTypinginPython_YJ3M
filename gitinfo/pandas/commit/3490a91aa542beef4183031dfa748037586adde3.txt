commit 3490a91aa542beef4183031dfa748037586adde3
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed May 11 23:06:07 2011 -0400

    little refactoring

diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index f983f0e0b..21b4133fd 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -1914,9 +1914,6 @@ def _homogenize(frames, intersect=True):
     """
     result = {}
 
-    index = None
-    columns = None
-
     adj_frames = {}
     for k, v in frames.iteritems():
         if isinstance(v, dict):
@@ -1926,39 +1923,47 @@ def _homogenize(frames, intersect=True):
         else:
             adj_frames[k] = v
 
+    index = _get_combined_index(adj_frames, intersect=intersect)
+    columns = _get_combined_columns(adj_frames, intersect=intersect)
+
+    for key, frame in adj_frames.iteritems():
+        result[key] = frame.reindex(index=index, columns=columns)
+
+    return result, index, columns
+
+def _get_combined_columns(frames, intersect=False):
+    columns = None
+
     if intersect:
-        for key, frame in adj_frames.iteritems():
-            if index is None:
-                index = frame.index
-            elif index is not frame.index:
-                index = index.intersection(frame.index)
-
-            if columns is None:
-                columns = set(frame.cols())
-            else:
-                columns &= set(frame.cols())
+        combine = set.intersection
     else:
-        for key, frame in adj_frames.iteritems():
-            if index is None:
-                index = frame.index
-            elif index is not frame.index:
-                index = index.union(frame.index)
-
-            if columns is None:
-                columns = set(frame.cols())
-            else:
-                columns |= set(frame.cols())
+        combine = set.union
+
+    for _, frame in frames.iteritems():
+        this_cols = set(frame.cols())
+
+        if columns is None:
+            columns = this_cols
+        else:
+            columns = combine(columns, this_cols)
 
-    columns = sorted(columns)
+    return Index(sorted(columns))
+
+def _get_combined_index(frames, intersect=False):
+    index = None
 
     if intersect:
-        for key, frame in adj_frames.iteritems():
-            result[key] = frame.filter(columns).reindex(index)
+        combine = Index.intersection
     else:
-        for key, frame in adj_frames.iteritems():
-            result[key] = frame.reindex(index=index, columns=columns)
+        combine = Index.union
 
-    return result, index, columns
+    for _, frame in frames.iteritems():
+        if index is None:
+            index = frame.index
+        elif index is not frame.index:
+            index = combine(index, frame.index)
+
+    return index
 
 def pivot(index, columns, values):
     """
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index e55fb54f2..f72a2dab3 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -9,13 +9,14 @@ import numpy as np
 import operator
 
 from pandas.core.index import Index, NULL_INDEX
-from pandas.core.series import Series, TimeSeries, remove_na
+from pandas.core.panel import _get_combined_index, _get_combined_columns
+from pandas.core.series import Series, TimeSeries
 from pandas.core.frame import DataFrame, extract_index, try_sort
+from pandas.core.matrix import DataMatrix
 import pandas.core.common as common
 
 from pandas.lib.sparse import BlockIndex, IntIndex
 import pandas.lib.sparse as splib
-import pandas.lib.tseries as tseries
 
 def make_sparse(arr, kind='block', fill_value=nan):
     """
diff --git a/pandas/core/tests/test_sparse.py b/pandas/core/tests/test_sparse.py
index d8c6cfec6..053a97153 100644
--- a/pandas/core/tests/test_sparse.py
+++ b/pandas/core/tests/test_sparse.py
@@ -717,8 +717,8 @@ class TestSparseDataFrame(TestCase):
         _check(self.iframe)
 
         # for now
-        self.assertRaises(Exception, self.zframe)
-        self.assertRaises(Exception, self.fill_frame)
+        self.assertRaises(Exception, _check, self.zframe)
+        self.assertRaises(Exception, _check, self.fill_frame)
 
     def _check_all(self, check_func):
         check_func(self.frame)
diff --git a/pandas/lib/bench_sparse.py b/pandas/lib/bench_sparse.py
index 238682e05..e5a78424c 100644
--- a/pandas/lib/bench_sparse.py
+++ b/pandas/lib/bench_sparse.py
@@ -34,6 +34,11 @@ data = {}
 for col, ser in dm.iteritems():
     data[col] = SparseSeries(ser)
 
+dwp = WidePanel.fromDict({'foo' : dm})
+
 sdf = SparseDataFrame(data)
 
 lp = stack_sparse_frame(sdf)
+
+swp = SparseWidePanel({'A' : sdf,
+                       'B' : sdf})
