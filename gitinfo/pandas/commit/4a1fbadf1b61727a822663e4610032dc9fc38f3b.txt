commit 4a1fbadf1b61727a822663e4610032dc9fc38f3b
Author: Simon Hawkins <simonjayhawkins@gmail.com>
Date:   Tue Feb 11 21:27:48 2020 +0000

    CLN: D300 Use """triple double quotes""" (#31888)

diff --git a/pandas/core/strings.py b/pandas/core/strings.py
index 18c7504f2..a46481864 100644
--- a/pandas/core/strings.py
+++ b/pandas/core/strings.py
@@ -2013,7 +2013,7 @@ def _pat_wrapper(
 
 
 def copy(source):
-    "Copy a docstring from another source function (if present)"
+    """Copy a docstring from another source function (if present)"""
 
     def do_copy(target):
         if source.__doc__:
diff --git a/pandas/io/clipboard/__init__.py b/pandas/io/clipboard/__init__.py
index f808b7e70..6d76d7de4 100644
--- a/pandas/io/clipboard/__init__.py
+++ b/pandas/io/clipboard/__init__.py
@@ -126,7 +126,7 @@ def init_osx_pyobjc_clipboard():
         board.setData_forType_(newData, AppKit.NSStringPboardType)
 
     def paste_osx_pyobjc():
-        "Returns contents of clipboard"
+        """Returns contents of clipboard"""
         board = AppKit.NSPasteboard.generalPasteboard()
         content = board.stringForType_(AppKit.NSStringPboardType)
         return content
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 4e26ceef0..425fbda21 100755
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -2488,7 +2488,7 @@ class PythonParser(ParserBase):
     def _convert_data(self, data):
         # apply converters
         def _clean_mapping(mapping):
-            "converts col numbers to names"
+            """converts col numbers to names"""
             clean = {}
             for col, v in mapping.items():
                 if isinstance(col, int) and col not in self.orig_names:
diff --git a/pandas/plotting/_matplotlib/converter.py b/pandas/plotting/_matplotlib/converter.py
index a1035fd08..770f89324 100644
--- a/pandas/plotting/_matplotlib/converter.py
+++ b/pandas/plotting/_matplotlib/converter.py
@@ -981,7 +981,7 @@ class TimeSeries_DateLocator(Locator):
         self.finder = get_finder(freq)
 
     def _get_default_locs(self, vmin, vmax):
-        "Returns the default locations of ticks."
+        """Returns the default locations of ticks."""
 
         if self.plot_obj.date_axis_info is None:
             self.plot_obj.date_axis_info = self.finder(vmin, vmax, self.freq)
@@ -993,7 +993,7 @@ class TimeSeries_DateLocator(Locator):
         return np.compress(locator["maj"], locator["val"])
 
     def __call__(self):
-        "Return the locations of the ticks."
+        """Return the locations of the ticks."""
         # axis calls Locator.set_axis inside set_m<xxxx>_formatter
 
         vi = tuple(self.axis.get_view_interval())
@@ -1062,7 +1062,7 @@ class TimeSeries_DateFormatter(Formatter):
         self.finder = get_finder(freq)
 
     def _set_default_format(self, vmin, vmax):
-        "Returns the default ticks spacing."
+        """Returns the default ticks spacing."""
 
         if self.plot_obj.date_axis_info is None:
             self.plot_obj.date_axis_info = self.finder(vmin, vmax, self.freq)
@@ -1076,7 +1076,7 @@ class TimeSeries_DateFormatter(Formatter):
         return self.formatdict
 
     def set_locs(self, locs):
-        "Sets the locations of the ticks"
+        """Sets the locations of the ticks"""
         # don't actually use the locs. This is just needed to work with
         # matplotlib. Force to use vmin, vmax
 
diff --git a/pandas/tests/scalar/period/test_period.py b/pandas/tests/scalar/period/test_period.py
index b396a88e6..3846274da 100644
--- a/pandas/tests/scalar/period/test_period.py
+++ b/pandas/tests/scalar/period/test_period.py
@@ -650,7 +650,7 @@ class TestPeriodMethods:
 
 
 class TestPeriodProperties:
-    "Test properties such as year, month, weekday, etc...."
+    """Test properties such as year, month, weekday, etc...."""
 
     @pytest.mark.parametrize("freq", ["A", "M", "D", "H"])
     def test_is_leap_year(self, freq):
