commit 0e7c20e23fbe38c162e5d068e1474bca487c3173
Author: jreback <jeff@reback.net>
Date:   Wed Feb 13 18:36:01 2013 -0500

    CLN: in common.py merged _dtype_from_scalar and _infer_dtype
         yield _infer_dtype_from_scalar

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 0f71735af..fb17eb8d9 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -644,11 +644,15 @@ def take_fast(arr, indexer, mask, needs_masking, axis=0, out=None,
     take_f(arr, indexer, out=out, fill_value=fill_value)
     return out
 
-def _dtype_from_scalar(val):
-    """ interpret the dtype from a scalar, upcast floats and ints """
+def _infer_dtype_from_scalar(val):
+    """ interpret the dtype from a scalar, upcast floats and ints
+        return the new value and the dtype """
 
     # a 1-element ndarray
     if isinstance(val, pa.Array):
+        if val.ndim != 0:
+            raise ValueError("invalid ndarray passed to _dtype_from_scalar")
+
         return val.item(), val.dtype
 
     elif isinstance(val, basestring):
@@ -665,14 +669,19 @@ def _dtype_from_scalar(val):
         val = lib.Timestamp(val).value
         return val, np.dtype('M8[ns]')
 
+    elif is_bool(val):
+        return val, np.bool_
+
     # provide implicity upcast on scalars
     elif is_integer(val):
-        if not is_bool(val):
             return val, np.int64
     elif is_float(val):
         return val, np.float64
 
-    return val, type(val)
+    elif is_complex(val):
+        return val, np.complex_
+
+    return val, np.object_
 
 def _maybe_promote(dtype, fill_value=np.nan):
     if issubclass(dtype.type, np.datetime64):
@@ -918,20 +927,6 @@ def _possibly_cast_to_datetime(value, dtype, coerce = False):
     return value
 
 
-def _infer_dtype(value):
-    # provide upcasting here for floats/ints
-    if isinstance(value, (float, np.floating)):
-        return np.float64
-    elif isinstance(value, (bool, np.bool_)):
-        return np.bool_
-    elif isinstance(value, (int, long, np.integer)):
-        return np.int64
-    elif isinstance(value, (complex, np.complexfloating)):
-        return np.complex_
-    else:
-        return np.object_
-
-
 def _possibly_cast_item(obj, item, dtype):
     chunk = obj[item]
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index d60ae4477..efb3520b1 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -23,7 +23,7 @@ import numpy as np
 import numpy.ma as ma
 
 from pandas.core.common import (isnull, notnull, PandasError, _try_sort,
-                                _default_index, _is_sequence, _dtype_from_scalar)
+                                _default_index, _is_sequence, _infer_dtype_from_scalar)
 from pandas.core.generic import NDFrame
 from pandas.core.index import Index, MultiIndex, _ensure_index
 from pandas.core.indexing import (_NDFrameIndexer, _maybe_droplevels,
@@ -437,7 +437,7 @@ class DataFrame(NDFrame):
                 if isinstance(data, basestring) and dtype is None:
                     dtype = np.object_
                 if dtype is None:
-                    data, dtype = _dtype_from_scalar(data)
+                    data, dtype = _infer_dtype_from_scalar(data)
 
                 values = np.empty((len(index), len(columns)), dtype=dtype)
                 values.fill(data)
@@ -1878,7 +1878,7 @@ class DataFrame(NDFrame):
             new_index, new_columns = self._expand_axes((index, col))
             result = self.reindex(index=new_index, columns=new_columns,
                                   copy=False)
-            likely_dtype = com._infer_dtype(value)
+            value, likely_dtype = _infer_dtype_from_scalar(value)
 
             made_bigger = not np.array_equal(new_columns, self.columns)
 
@@ -2208,7 +2208,7 @@ class DataFrame(NDFrame):
                 existing_piece = self[key]
 
                 # upcast the scalar
-                value, dtype = _dtype_from_scalar(value)
+                value, dtype = _infer_dtype_from_scalar(value)
 
                 # transpose hack
                 if isinstance(existing_piece, DataFrame):
@@ -2226,7 +2226,7 @@ class DataFrame(NDFrame):
 
             else:
                 # upcast the scalar
-                value, dtype = _dtype_from_scalar(value)
+                value, dtype = _infer_dtype_from_scalar(value)
                 value = np.array(np.repeat(value, len(self.index)), dtype=dtype)
 
             value = com._possibly_cast_to_datetime(value, dtype)
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index ee024ce68..ddcf271dc 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -1412,7 +1412,7 @@ class BlockManager(object):
         block_shape = list(self.shape)
         block_shape[0] = len(items)
 
-        dtype = com._infer_dtype(fill_value)
+        fill_value, dtype = com._infer_dtype_from_scalar(fill_value)
         block_values = np.empty(block_shape, dtype=dtype)
         block_values.fill(fill_value)
         na_block = make_block(block_values, items, ref_items)
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 6b867f9a6..6fea1cc85 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -7,7 +7,7 @@ import operator
 import sys
 import numpy as np
 from pandas.core.common import (PandasError, _mut_exclusive,
-                                _try_sort, _default_index, _infer_dtype,
+                                _try_sort, _default_index, _infer_dtype_from_scalar,
                                 notnull)
 from pandas.core.categorical import Factor
 from pandas.core.index import (Index, MultiIndex, _ensure_index,
@@ -657,8 +657,8 @@ class Panel(NDFrame):
             axes = self._expand_axes(args)
             d = self._construct_axes_dict_from(self, axes, copy=False)
             result = self.reindex(**d)
-
-            likely_dtype = com._infer_dtype(args[-1])
+            args  = list(args)
+            args[-1], likely_dtype = _infer_dtype_from_scalar(args[-1])
             made_bigger = not np.array_equal(
                 axes[0], getattr(self, self._info_axis))
             # how to make this logic simpler?
@@ -693,7 +693,7 @@ class Panel(NDFrame):
             assert(value.shape == shape[1:])
             mat = np.asarray(value)
         elif np.isscalar(value):
-            dtype = _infer_dtype(value)
+            value, dtype = _infer_dtype_from_scalar(value)
             mat = np.empty(shape[1:], dtype=dtype)
             mat.fill(value)
         else:
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 5405637ff..bb7dd934c 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -16,7 +16,8 @@ import numpy.ma as ma
 
 from pandas.core.common import (isnull, notnull, _is_bool_indexer,
                                 _default_index, _maybe_upcast,
-                                _asarray_tuplesafe, is_integer_dtype)
+                                _asarray_tuplesafe, is_integer_dtype,
+                                _infer_dtype_from_scalar)
 from pandas.core.index import (Index, MultiIndex, InvalidIndexError,
                                _ensure_index, _handle_legacy_indexes)
 from pandas.core.indexing import _SeriesIndexer, _check_bool_indexer
@@ -3129,7 +3130,7 @@ def _sanitize_array(data, index, dtype=None, copy=False,
 
             # figure out the dtype from the value (upcast if necessary)
             if dtype is None:
-                value, dtype = com._dtype_from_scalar(value)
+                value, dtype = _infer_dtype_from_scalar(value)
             else:
                 # need to possibly convert the value here
                 value = com._possibly_cast_to_datetime(value, dtype)
