commit 0033f0a0a5819ffe3c487621350e1fac64cf57b3
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Feb 10 17:06:04 2013 -0500

    TST: tweak #2733 test and raise exception when usecols + python engine

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 7b74964cc..d3839e878 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -245,6 +245,8 @@ _parser_defaults = {
     'dayfirst': False,
     'date_parser': None,
 
+    'usecols': None,
+
     # 'nrows': None,
     # 'iterator': False,
     'chunksize': None,
@@ -268,7 +270,6 @@ _c_parser_defaults = {
     'warn_bad_lines': True,
     'factorize': True,
     'dtype': None,
-    'usecols': None,
     'decimal': b'.'
 }
 
@@ -1120,6 +1121,10 @@ class PythonParser(ParserBase):
         self.buf = []
         self.pos = 0
 
+        if kwds['usecols'] is not None:
+            raise Exception("usecols not supported with engine='python'"
+                            " or multicharacter separators (yet).")
+
         self.header = kwds['header']
         self.encoding = kwds['encoding']
         self.compression = kwds['compression']
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index 6e380bdd6..3b0c9459e 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -1869,7 +1869,6 @@ a,b,c
         tm.assert_frame_equal(result, expected)
 
     def test_usecols_with_whitespace(self):
-        # #2733
         data = 'a  b  c\n4  apple  bat  5.7\n8  orange  cow  10'
 
         result = self.read_csv(StringIO(data), delim_whitespace=True,
@@ -1879,6 +1878,17 @@ a,b,c
 
         tm.assert_frame_equal(result, expected)
 
+    def test_usecols_regex_sep(self):
+        # #2733
+        data = 'a  b  c\n4  apple  bat  5.7\n8  orange  cow  10'
+
+        self.assertRaises(Exception, self.read_csv, StringIO(data),
+                          sep='\s+', usecols=('a', 'b'))
+
+        # expected = DataFrame({'a': ['apple', 'orange'],
+        #                       'b': ['bat', 'cow']}, index=[4, 8])
+        # tm.assert_frame_equal(result, expected)
+
     def test_pure_python_failover(self):
         data = "a,b,c\n1,2,3#ignore this!\n4,5,6#ignorethistoo"
 
