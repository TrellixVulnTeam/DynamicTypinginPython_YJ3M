commit a928f8d0e029224af9926bc93939e20aa00c243d
Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
Date:   Sat Jul 25 20:45:31 2015 +0200

    DEPR: add stacklevel to FutureWarnings (GH9584)

diff --git a/pandas/core/algorithms.py b/pandas/core/algorithms.py
index 36d31d493..8f1dab4f8 100644
--- a/pandas/core/algorithms.py
+++ b/pandas/core/algorithms.py
@@ -125,8 +125,8 @@ def factorize(values, sort=False, order=None, na_sentinel=-1, size_hint=None):
     note: an array of Periods will ignore sort as it returns an always sorted PeriodIndex
     """
     if order is not None:
-        warn("order is deprecated."
-             "See https://github.com/pydata/pandas/issues/6926", FutureWarning)
+        msg = "order is deprecated. See https://github.com/pydata/pandas/issues/6926"
+        warn(msg, FutureWarning, stacklevel=2)
 
     from pandas.core.index import Index
     from pandas.core.series import Series
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 1cf2de69b..3394d814d 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1468,7 +1468,7 @@ class DataFrame(NDFrame):
 
         if colSpace is not None:  # pragma: no cover
             warnings.warn("colSpace is deprecated, use col_space",
-                          FutureWarning)
+                          FutureWarning, stacklevel=2)
             col_space = colSpace
 
         formatter = fmt.DataFrameFormatter(self, buf=buf, columns=columns,
@@ -1517,7 +1517,7 @@ class DataFrame(NDFrame):
 
         if colSpace is not None:  # pragma: no cover
             warnings.warn("colSpace is deprecated, use col_space",
-                          FutureWarning)
+                          FutureWarning, stacklevel=2)
             col_space = colSpace
 
         formatter = fmt.DataFrameFormatter(self, buf=buf, columns=columns,
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 9c1702860..966ea94b3 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -3376,11 +3376,11 @@ class NDFrame(PandasObject):
             For frequencies that evenly subdivide 1 day, the "origin" of the
             aggregated intervals. For example, for '5min' frequency, base could
             range from 0 through 4. Defaults to 0
-        
+
 
         Examples
         --------
-        
+
         Start by creating a series with 9 one minute timestamps.
 
         >>> index = pd.date_range('1/1/2000', periods=9, freq='T')
@@ -3409,11 +3409,11 @@ class NDFrame(PandasObject):
         Downsample the series into 3 minute bins as above, but label each
         bin using the right edge instead of the left. Please note that the
         value in the bucket used as the label is not included in the bucket,
-        which it labels. For example, in the original series the 
+        which it labels. For example, in the original series the
         bucket ``2000-01-01 00:03:00`` contains the value 3, but the summed
-        value in the resampled bucket with the label``2000-01-01 00:03:00`` 
+        value in the resampled bucket with the label``2000-01-01 00:03:00``
         does not include 3 (if it did, the summed value would be 6, not 3).
-        To include this value close the right side of the bin interval as 
+        To include this value close the right side of the bin interval as
         illustrated in the example below this one.
 
         >>> series.resample('3T', how='sum', label='right')
@@ -3424,7 +3424,7 @@ class NDFrame(PandasObject):
 
         Downsample the series into 3 minute bins as above, but close the right
         side of the bin interval.
-        
+
         >>> series.resample('3T', how='sum', label='right', closed='right')
         2000-01-01 00:00:00     0
         2000-01-01 00:03:00     6
@@ -3453,7 +3453,7 @@ class NDFrame(PandasObject):
         2000-01-01 00:02:00    2
         Freq: 30S, dtype: int64
 
-        Upsample the series into 30 second bins and fill the 
+        Upsample the series into 30 second bins and fill the
         ``NaN`` values using the ``bfill`` method.
 
         >>> series.resample('30S', fill_method='bfill')[0:5]
@@ -3468,7 +3468,7 @@ class NDFrame(PandasObject):
 
         >>> def custom_resampler(array_like):
         ...     return np.sum(array_like)+5
-        
+
         >>> series.resample('3T', how=custom_resampler)
         2000-01-01 00:00:00     8
         2000-01-01 00:03:00    17
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 4d0b395a4..a7674771e 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -842,14 +842,14 @@ class Index(IndexOpsMixin, PandasObject):
             elif is_float(key):
                 key = to_int()
                 warnings.warn("scalar indexers for index type {0} should be integers and not floating point".format(
-                    type(self).__name__),FutureWarning, stacklevel=8)
+                    type(self).__name__),FutureWarning, stacklevel=2)
                 return key
             return self._invalid_indexer('label', key)
 
         if is_float(key):
             if not self.is_floating():
                 warnings.warn("scalar indexers for index type {0} should be integers and not floating point".format(
-                    type(self).__name__),FutureWarning, stacklevel=8)
+                    type(self).__name__),FutureWarning, stacklevel=2)
             return to_int()
 
         return key
@@ -887,7 +887,7 @@ class Index(IndexOpsMixin, PandasObject):
                 # warn if it's a convertible float
                 if v == int(v):
                     warnings.warn("slice indexers when using iloc should be integers "
-                                  "and not floating point",FutureWarning)
+                                  "and not floating point",FutureWarning, stacklevel=2)
                     return int(v)
 
                 self._invalid_indexer('slice {0} value'.format(c), v)
@@ -1415,7 +1415,7 @@ class Index(IndexOpsMixin, PandasObject):
     def __add__(self, other):
         if com.is_list_like(other):
             warnings.warn("using '+' to provide set union with Indexes is deprecated, "
-                          "use '|' or .union()", FutureWarning)
+                          "use '|' or .union()", FutureWarning, stacklevel=2)
         if isinstance(other, Index):
             return self.union(other)
         return Index(np.array(self) + other)
@@ -1423,14 +1423,14 @@ class Index(IndexOpsMixin, PandasObject):
     def __radd__(self, other):
         if com.is_list_like(other):
             warnings.warn("using '+' to provide set union with Indexes is deprecated, "
-                          "use '|' or .union()", FutureWarning)
+                          "use '|' or .union()", FutureWarning, stacklevel=2)
         return Index(other + np.array(self))
 
     __iadd__ = __add__
 
     def __sub__(self, other):
         warnings.warn("using '-' to provide set differences with Indexes is deprecated, "
-                      "use .difference()",FutureWarning)
+                      "use .difference()",FutureWarning, stacklevel=2)
         return self.difference(other)
 
     def __and__(self, other):
diff --git a/pandas/io/data.py b/pandas/io/data.py
index 829ff4f28..1a4c45628 100644
--- a/pandas/io/data.py
+++ b/pandas/io/data.py
@@ -608,7 +608,7 @@ class Options(object):
         self.symbol = symbol.upper()
         if data_source is None:
             warnings.warn("Options(symbol) is deprecated, use Options(symbol,"
-                          " data_source) instead", FutureWarning)
+                          " data_source) instead", FutureWarning, stacklevel=2)
             data_source = "yahoo"
         if data_source != "yahoo":
             raise NotImplementedError("currently only yahoo supported")
@@ -1072,7 +1072,8 @@ class Options(object):
                 Note: Format of returned data frame is dependent on Yahoo and may change.
 
         """
-        warnings.warn("get_forward_data() is deprecated", FutureWarning)
+        warnings.warn("get_forward_data() is deprecated", FutureWarning,
+                      stacklevel=2)
         end_date = dt.date.today() + MonthEnd(months)
         dates = (date for date in self.expiry_dates if date <= end_date.date())
         data = self._get_data_in_date_range(dates, call=call, put=put)
diff --git a/pandas/io/sql.py b/pandas/io/sql.py
index b587ec128..7cc5ea142 100644
--- a/pandas/io/sql.py
+++ b/pandas/io/sql.py
@@ -200,7 +200,7 @@ def tquery(sql, con=None, cur=None, retry=True):
     warnings.warn(
         "tquery is deprecated, and will be removed in future versions. "
         "You can use ``execute(...).fetchall()`` instead.",
-        FutureWarning)
+        FutureWarning, stacklevel=2)
 
     cur = execute(sql, con, cur=cur)
     result = _safe_fetch(cur)
@@ -255,7 +255,7 @@ def uquery(sql, con=None, cur=None, retry=True, params=None):
     warnings.warn(
         "uquery is deprecated, and will be removed in future versions. "
         "You can use ``execute(...).rowcount`` instead.",
-        FutureWarning)
+        FutureWarning, stacklevel=2)
 
     cur = execute(sql, con, cur=cur, params=params)
 
@@ -618,7 +618,7 @@ def pandasSQL_builder(con, flavor=None, schema=None, meta=None,
         return SQLDatabase(con, schema=schema, meta=meta)
     else:
         if flavor == 'mysql':
-            warnings.warn(_MYSQL_WARNING, FutureWarning)
+            warnings.warn(_MYSQL_WARNING, FutureWarning, stacklevel=2)
         return SQLiteDatabase(con, flavor, is_cursor=is_cursor)
 
 
@@ -1672,7 +1672,8 @@ def get_schema(frame, name, flavor='sqlite', keys=None, con=None, dtype=None):
 def read_frame(*args, **kwargs):
     """DEPRECATED - use read_sql
     """
-    warnings.warn("read_frame is deprecated, use read_sql", FutureWarning)
+    warnings.warn("read_frame is deprecated, use read_sql", FutureWarning,
+                  stacklevel=2)
     return read_sql(*args, **kwargs)
 
 
@@ -1680,7 +1681,8 @@ def read_frame(*args, **kwargs):
 def frame_query(*args, **kwargs):
     """DEPRECATED - use read_sql
     """
-    warnings.warn("frame_query is deprecated, use read_sql", FutureWarning)
+    warnings.warn("frame_query is deprecated, use read_sql", FutureWarning,
+                  stacklevel=2)
     return read_sql(*args, **kwargs)
 
 
@@ -1718,7 +1720,8 @@ def write_frame(frame, name, con, flavor='sqlite', if_exists='fail', **kwargs):
     pandas.DataFrame.to_sql
 
     """
-    warnings.warn("write_frame is deprecated, use to_sql", FutureWarning)
+    warnings.warn("write_frame is deprecated, use to_sql", FutureWarning,
+                  stacklevel=2)
 
     # for backwards compatibility, set index=False when not specified
     index = kwargs.pop('index', False)
diff --git a/pandas/rpy/__init__.py b/pandas/rpy/__init__.py
index bad7ebc58..8c92ce584 100644
--- a/pandas/rpy/__init__.py
+++ b/pandas/rpy/__init__.py
@@ -8,7 +8,7 @@ warnings.warn("The pandas.rpy module is deprecated and will be "
               "like rpy2. "
               "\nSee here for a guide on how to port your code to rpy2: "
               "http://pandas.pydata.org/pandas-docs/stable/r_interface.html",
-              FutureWarning)
+              FutureWarning, stacklevel=2)
 
 try:
     from .common import importr, r, load_data
diff --git a/pandas/stats/moments.py b/pandas/stats/moments.py
index 586d507b2..2e13082ee 100644
--- a/pandas/stats/moments.py
+++ b/pandas/stats/moments.py
@@ -122,7 +122,7 @@ average of [x, None, y] are (1-alpha)**2 and 1 (if adjust is True), and
 
 When ignore_na is True (reproducing pre-0.15.0 behavior), weights are based on
 relative positions. For example, the weights of x and y used in calculating
-the final weighted average of [x, None, y] are 1-alpha and 1 (if adjust is 
+the final weighted average of [x, None, y] are 1-alpha and 1 (if adjust is
 True), and 1-alpha and alpha (if adjust is False).
 """
 
@@ -344,7 +344,8 @@ def _flex_binary_moment(arg1, arg2, f, pairwise=False):
 def rolling_corr_pairwise(df1, df2=None, window=None, min_periods=None,
                           freq=None, center=False):
     import warnings
-    warnings.warn("rolling_corr_pairwise is deprecated, use rolling_corr(..., pairwise=True)", FutureWarning)
+    msg = "rolling_corr_pairwise is deprecated, use rolling_corr(..., pairwise=True)"
+    warnings.warn(msg, FutureWarning, stacklevel=2)
     return rolling_corr(df1, df2, window=window, min_periods=min_periods,
                         freq=freq, center=center,
                         pairwise=True)
@@ -399,7 +400,7 @@ def _rolling_moment(arg, window, func, minp, axis=0, freq=None, center=False,
 
     if center:
         result = _center_window(result, window, axis)
-    
+
     return return_hook(result)
 
 
@@ -998,7 +999,8 @@ def expanding_corr(arg1, arg2=None, min_periods=1, freq=None, pairwise=None):
 @Appender(_doc_template)
 def expanding_corr_pairwise(df1, df2=None, min_periods=1, freq=None):
     import warnings
-    warnings.warn("expanding_corr_pairwise is deprecated, use expanding_corr(..., pairwise=True)", FutureWarning)
+    msg = "expanding_corr_pairwise is deprecated, use expanding_corr(..., pairwise=True)"
+    warnings.warn(msg, FutureWarning, stacklevel=2)
     return expanding_corr(df1, df2, min_periods=min_periods,
                           freq=freq, pairwise=True)
 
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 041c74728..3c3c20e2c 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -2624,7 +2624,7 @@ def boxplot(data, column=None, by=None, ax=None, fontsize=None,
                    "now, set return_type='axes'.\n To keep the previous "
                    "behavior and silence this warning, set "
                    "return_type='dict'.")
-            warnings.warn(msg, FutureWarning)
+            warnings.warn(msg, FutureWarning, stacklevel=2)
             return_type = 'dict'
         if ax is None:
             ax = _gca()
@@ -2972,7 +2972,7 @@ def _grouped_plot(plotf, data, column=None, by=None, numeric_only=True,
     if figsize == 'default':
         # allowed to specify mpl default with 'default'
         warnings.warn("figsize='default' is deprecated. Specify figure"
-                      "size by tuple instead", FutureWarning)
+                      "size by tuple instead", FutureWarning, stacklevel=2)
         figsize = None
 
     grouped = data.groupby(by)
diff --git a/pandas/tools/rplot.py b/pandas/tools/rplot.py
index 5996fceff..bc834689f 100644
--- a/pandas/tools/rplot.py
+++ b/pandas/tools/rplot.py
@@ -17,7 +17,7 @@ warnings.warn("\n"
               "like seaborn for similar but more refined functionality. \n\n"
               "See our docs http://pandas.pydata.org/pandas-docs/stable/visualization.html#rplot "
               "for some example how to convert your existing code to these "
-              "packages.", FutureWarning)
+              "packages.", FutureWarning, stacklevel=2)
 
 
 class Scale:
diff --git a/pandas/tseries/base.py b/pandas/tseries/base.py
index 912a0c3f8..a6b289b76 100644
--- a/pandas/tseries/base.py
+++ b/pandas/tseries/base.py
@@ -398,7 +398,7 @@ class DatetimeIndexOpsMixin(object):
                 raise TypeError("cannot add TimedeltaIndex and {typ}".format(typ=type(other)))
             elif isinstance(other, Index):
                 warnings.warn("using '+' to provide set union with datetimelike Indexes is deprecated, "
-                              "use .union()",FutureWarning)
+                              "use .union()",FutureWarning, stacklevel=2)
                 return self.union(other)
             elif isinstance(other, (DateOffset, timedelta, np.timedelta64, tslib.Timedelta)):
                 return self._add_delta(other)
@@ -423,7 +423,7 @@ class DatetimeIndexOpsMixin(object):
                 return self._add_delta(-other)
             elif isinstance(other, Index):
                 warnings.warn("using '-' to provide set differences with datetimelike Indexes is deprecated, "
-                              "use .difference()",FutureWarning)
+                              "use .difference()",FutureWarning, stacklevel=2)
                 return self.difference(other)
             elif isinstance(other, (DateOffset, timedelta, np.timedelta64, tslib.Timedelta)):
                 return self._add_delta(-other)
diff --git a/pandas/util/decorators.py b/pandas/util/decorators.py
index 4544c3cdb..ab4785c75 100644
--- a/pandas/util/decorators.py
+++ b/pandas/util/decorators.py
@@ -10,7 +10,7 @@ def deprecate(name, alternative, alt_name=None):
 
     def wrapper(*args, **kwargs):
         warnings.warn("%s is deprecated. Use %s instead" % (name, alt_name),
-                      FutureWarning)
+                      FutureWarning, stacklevel=2)
         return alternative(*args, **kwargs)
     return wrapper
 
@@ -79,7 +79,7 @@ def deprecate_kwarg(old_arg_name, new_arg_name, mapping=None):
                     msg = "the '%s' keyword is deprecated, " \
                           "use '%s' instead" % (old_arg_name, new_arg_name)
 
-                warnings.warn(msg, FutureWarning)
+                warnings.warn(msg, FutureWarning, stacklevel=2)
                 if kwargs.get(new_arg_name, None) is not None:
                     msg = "Can only specify '%s' or '%s', not both" % \
                       (old_arg_name, new_arg_name)
