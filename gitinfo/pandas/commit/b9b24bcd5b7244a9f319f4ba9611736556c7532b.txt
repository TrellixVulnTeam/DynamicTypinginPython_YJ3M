commit b9b24bcd5b7244a9f319f4ba9611736556c7532b
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Oct 8 13:20:12 2011 -0400

    ENH: for Series.name integration and tests

diff --git a/TODO.rst b/TODO.rst
index e69de29bb..20c758e1b 100644
--- a/TODO.rst
+++ b/TODO.rst
@@ -0,0 +1,2 @@
+- SparseSeries name integration + tests
+- Refactor Series.repr
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 76d576f71..c02ba3b97 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -849,7 +849,7 @@ class DataFrame(NDFrame):
             return res
 
         values = self._data.get(key)
-        res = Series(values, index=self.index)
+        res = Series(values, index=self.index, name=key)
         self._series_cache[key] = res
         return res
 
@@ -995,7 +995,7 @@ class DataFrame(NDFrame):
         self._consolidate_inplace()
         new_data = self._data.xs(key, axis=1, copy=copy)
         if new_data.ndim == 1:
-            return Series(new_data.as_matrix(), index=self.columns)
+            return Series(new_data.as_matrix(), index=self.columns, name=key)
         else:
             result = DataFrame(new_data)
             result.index = _maybe_droplevels(result.index, key)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index a2507e29f..0a7e35dbb 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -48,6 +48,16 @@ class CheckIndexing(object):
         self.assert_('random' not in self.frame)
         self.assertRaises(Exception, self.frame.__getitem__, 'random')
 
+    def test_getitem_pop_assign_name(self):
+        s = self.frame['A']
+        self.assertEqual(s.name, 'A')
+
+        s = self.frame.pop('A')
+        self.assertEqual(s.name, 'A')
+
+        s = self.frame.ix[:, 'B']
+        self.assertEqual(s.name, 'B')
+
     def test_getitem_iterator(self):
         idx = iter(['A', 'B', 'C'])
         result = self.frame.ix[:, idx]
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 1d2fdaeb3..b6cfac1a7 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -1,20 +1,16 @@
 # pylint: disable-msg=W0612,E1101
 from cStringIO import StringIO
-import operator
 import unittest
 
-from numpy import random, nan
 from numpy.random import randn
 import numpy as np
 
-import pandas.core.datetools as datetools
-from pandas.core.index import MultiIndex, NULL_INDEX
-from pandas import Panel, DataFrame, Index, Series, notnull, isnull
+from pandas.core.index import MultiIndex
+from pandas import Panel, DataFrame, Series, notnull, isnull
 
 from pandas.util.testing import (assert_almost_equal,
                                  assert_series_equal,
-                                 assert_frame_equal,
-                                 randn)
+                                 assert_frame_equal)
 
 import pandas.util.testing as tm
 
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 7eec453bd..616f5608d 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -29,6 +29,10 @@ class CheckNameIntegration(object):
         result = self.ts.copy()
         self.assertEquals(result.name, self.ts.name)
 
+    def test_append_preserve_name(self):
+        result = self.ts[:5].append(self.ts[5:])
+        self.assertEquals(result.name, self.ts.name)
+
     def test_binop_maybe_preserve_name(self):
         # names match, preserve
         result = self.ts * self.ts
@@ -43,6 +47,10 @@ class CheckNameIntegration(object):
         result = self.ts + cp
         self.assert_(result.name is None)
 
+    def test_combine_first_name(self):
+        result = self.ts.combine_first(self.ts[:5])
+        self.assertEquals(result.name, self.ts.name)
+
     def test_getitem_preserve_name(self):
         result = self.ts[self.ts > 0]
         self.assertEquals(result.name, self.ts.name)
@@ -50,11 +58,35 @@ class CheckNameIntegration(object):
         result = self.ts[[0, 2, 4]]
         self.assertEquals(result.name, self.ts.name)
 
+        result = self.ts[5:10]
+        self.assertEquals(result.name, self.ts.name)
+
+    def test_multilevel_preserve_name(self):
+        index = MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'],
+                                   ['one', 'two', 'three']],
+                           labels=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3],
+                                   [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]],
+                           names=['first', 'second'])
+        s = Series(np.random.randn(len(index)), index=index, name='sth')
+
+        result = s['foo']
+        result2 = s.ix['foo']
+        self.assertEquals(result.name, s.name)
+        self.assertEquals(result2.name, s.name)
+
     def test_pickle_preserve_name(self):
         s = Series(1, index=np.arange(10), name='foo')
         unpickled = self._pickle_roundtrip(s)
         self.assertEquals(s.name, unpickled.name)
 
+    def test_argsort_preserve_name(self):
+        result = self.ts.argsort()
+        self.assertEquals(result.name, self.ts.name)
+
+    def test_sort_index_name(self):
+        result = self.ts.sort_index(ascending=False)
+        self.assertEquals(result.name, self.ts.name)
+
 class TestSeries(unittest.TestCase, CheckNameIntegration):
 
     def setUp(self):
