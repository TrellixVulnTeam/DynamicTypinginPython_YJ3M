commit 6d3b8878531049f04d5b11bdba6edf6d7e305d7a
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Sep 24 20:48:32 2012 -0400

    TST: refactor parser tests to be able to swap out engine globally

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 373d80204..a1602a2c4 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -247,6 +247,7 @@ def read_csv(filepath_or_buffer,
 @Appender(_read_table_doc)
 def read_table(filepath_or_buffer,
                sep='\t',
+               engine='python',
                dialect=None,
                header=0,
                index_col=None,
@@ -538,9 +539,7 @@ class TextFileReader(object):
         if kind == 'c':
             params.update(warn_bad_lines=self.warn_bad_lines,
                           error_bad_lines=self.error_bad_lines)
-
-            from pandas._parser import TextReader
-            self._engine = TextReader(self.f, **params)
+            self._engine = CParserWrapper(self.f, **params)
         else:
             params.update(index_col=self.index_col,
                           encoding=self.encoding,
@@ -587,9 +586,15 @@ class TextFileReader(object):
 
 class CParserWrapper(object):
 
+
     def __init__(self, src, **kwds):
-        pass
+        from pandas._parser import TextReader
 
+        self.kwds = kwds
+        self._reader = TextReader(src, **kwds)
+
+    def read(self, nrows=None):
+        return self._reader.read(nrows)
 
 
 def TextParser(*args, **kwds):
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index 1e85eb101..b542d9784 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -40,7 +40,10 @@ def _skip_if_no_openpyxl():
         raise nose.SkipTest('openpyxl not installed, skipping')
 
 
-class TestParsers(unittest.TestCase):
+class ParserTests(object):
+    """
+    Want to be able to test either C+Cython or Python+Cython parsers
+    """
     data1 = """index,A,B,C,D
 foo,2,3,4,5
 bar,7,8,9,10
@@ -59,6 +62,12 @@ KORD,19990127, 22:00:00, 21:56:00, -0.5900, 1.7100, 5.1000, 0.0000, 290.0000
 KORD,19990127, 23:00:00, 22:56:00, -0.5900, 1.7100, 4.6000, 0.0000, 280.0000
 """
 
+    def read_csv(self, *args, **kwargs):
+        raise NotImplementedError
+
+    def read_table(self, *args, **kwargs):
+        raise NotImplementedError
+
     def setUp(self):
         self.dirpath = curpath()
         self.csv1 = os.path.join(self.dirpath, 'test1.csv')
@@ -76,14 +85,14 @@ e,5,five
 nan,6,
 g,7,seven
 """
-        df = read_csv(StringIO(data))
+        df = self.read_csv(StringIO(data))
         xp = DataFrame({'One' : ['a', 'b', np.nan, 'd', 'e', np.nan, 'g'],
                         'Two' : [1,2,3,4,5,6,7],
                         'Three' : ['one', 'two', 'three', np.nan, 'five',
                                    np.nan, 'seven']})
         assert_frame_equal(xp.reindex(columns=df.columns), df)
 
-        df = read_csv(StringIO(data), na_values={'One': [], 'Three': []},
+        df = self.read_csv(StringIO(data), na_values={'One': [], 'Three': []},
                       keep_default_na=False)
         xp = DataFrame({'One' : ['a', 'b', '', 'd', 'e', 'nan', 'g'],
                         'Two' : [1,2,3,4,5,6,7],
@@ -91,14 +100,14 @@ g,7,seven
                                    '', 'seven']})
         assert_frame_equal(xp.reindex(columns=df.columns), df)
 
-        df = read_csv(StringIO(data), na_values=['a'], keep_default_na=False)
+        df = self.read_csv(StringIO(data), na_values=['a'], keep_default_na=False)
         xp = DataFrame({'One' : [np.nan, 'b', '', 'd', 'e', 'nan', 'g'],
                         'Two' : [1, 2, 3, 4, 5, 6, 7],
                         'Three' : ['one', 'two', 'three', 'nan', 'five', '',
                                    'seven']})
         assert_frame_equal(xp.reindex(columns=df.columns), df)
 
-        df = read_csv(StringIO(data), na_values={'One': [], 'Three': []})
+        df = self.read_csv(StringIO(data), na_values={'One': [], 'Three': []})
         xp = DataFrame({'One' : ['a', 'b', np.nan, 'd', 'e', np.nan, 'g'],
                         'Two' : [1,2,3,4,5,6,7],
                         'Three' : ['one', 'two', 'three', np.nan, 'five',
@@ -106,9 +115,6 @@ g,7,seven
         assert_frame_equal(xp.reindex(columns=df.columns), df)
 
 
-    def test_read_csv(self):
-        pass
-
     def test_dialect(self):
         data = """\
 label1,label2,label3
@@ -118,14 +124,14 @@ index2,b,d,f
 
         dia = csv.excel()
         dia.quoting = csv.QUOTE_NONE
-        df = read_csv(StringIO(data), dialect=dia)
+        df = self.read_csv(StringIO(data), dialect=dia)
 
         data = '''\
 label1,label2,label3
 index1,a,c,e
 index2,b,d,f
 '''
-        exp = read_csv(StringIO(data))
+        exp = self.read_csv(StringIO(data))
         exp.replace('a', '"a', inplace=True)
         assert_frame_equal(df, exp)
 
@@ -137,10 +143,10 @@ index2,b,d,f
         expected = [[1, 2334., 5],
                     [10, 13, 10]]
 
-        df = read_csv(StringIO(data), sep='|', thousands=',')
+        df = self.read_csv(StringIO(data), sep='|', thousands=',')
         assert_almost_equal(df.values, expected)
 
-        df = read_table(StringIO(data), sep='|', thousands=',')
+        df = self.read_table(StringIO(data), sep='|', thousands=',')
         assert_almost_equal(df.values, expected)
 
     def test_1000_fwf(self):
@@ -161,10 +167,10 @@ index2,b,d,f
 """
         expected = [[1., 2., 4.],
                     [5., np.nan, 10.]]
-        df = read_csv(StringIO(data), comment='#')
+        df = self.read_csv(StringIO(data), comment='#')
         assert_almost_equal(df.values, expected)
 
-        df = read_table(StringIO(data), sep=',', comment='#', na_values=['NaN'])
+        df = self.read_table(StringIO(data), sep=',', comment='#', na_values=['NaN'])
         assert_almost_equal(df.values, expected)
 
     def test_comment_fwf(self):
@@ -185,7 +191,7 @@ b,2
 c,3
 """
         expected = Series([1,2,3], ['a', 'b', 'c'])
-        result = read_table(StringIO(data), sep=',', index_col=0,
+        result = self.read_table(StringIO(data), sep=',', index_col=0,
                             header=None, squeeze=True)
         self.assert_(isinstance(result, Series))
         assert_series_equal(result, expected)
@@ -203,7 +209,7 @@ KORD,19990127, 23:00:00, 22:56:00, -0.5900, 1.7100, 4.6000, 0.0000, 280.0000
         def func(*date_cols):
             return lib.try_parse_dates(parsers._concat_date_cols(date_cols))
 
-        df = read_csv(StringIO(data), header=None,
+        df = self.read_csv(StringIO(data), header=None,
                       date_parser=func,
                       parse_dates={'nominal' : [1, 2],
                                    'actual' : [1,3]})
@@ -216,7 +222,7 @@ KORD,19990127, 23:00:00, 22:56:00, -0.5900, 1.7100, 4.6000, 0.0000, 280.0000
         d = datetime(1999, 1, 27, 19, 0)
         self.assert_(df.ix[0, 'nominal'] == d)
 
-        df = read_csv(StringIO(data), header=None,
+        df = self.read_csv(StringIO(data), header=None,
                       date_parser=func,
                       parse_dates={'nominal' : [1, 2],
                                      'actual' : [1,3]},
@@ -235,7 +241,7 @@ KORD,19990127, 21:00:00, 21:18:00, -0.9900, 2.0100, 3.6000, 0.0000, 270.0000
 KORD,19990127, 22:00:00, 21:56:00, -0.5900, 1.7100, 5.1000, 0.0000, 290.0000
 KORD,19990127, 23:00:00, 22:56:00, -0.5900, 1.7100, 4.6000, 0.0000, 280.0000
 """
-        df = read_csv(StringIO(data), header=None,
+        df = self.read_csv(StringIO(data), header=None,
                       parse_dates=[[1, 2], [1,3]])
         self.assert_('X.2_X.3' in df)
         self.assert_('X.2_X.4' in df)
@@ -246,7 +252,7 @@ KORD,19990127, 23:00:00, 22:56:00, -0.5900, 1.7100, 4.6000, 0.0000, 280.0000
         d = datetime(1999, 1, 27, 19, 0)
         self.assert_(df.ix[0, 'X.2_X.3'] == d)
 
-        df = read_csv(StringIO(data), header=None,
+        df = self.read_csv(StringIO(data), header=None,
                       parse_dates=[[1, 2], [1,3]], keep_date_col=True)
         self.assert_('X.2_X.3' in df)
         self.assert_('X.2_X.4' in df)
@@ -261,7 +267,7 @@ KORD,19990127 21:00:00, 20:56:00, -0.5900, 2.2100, 5.7000, 0.0000, 280.0000
 KORD,19990127 21:00:00, 21:18:00, -0.9900, 2.0100, 3.6000, 0.0000, 270.0000
 KORD,19990127 22:00:00, 21:56:00, -0.5900, 1.7100, 5.1000, 0.0000, 290.0000
 '''
-        df = read_csv(StringIO(data), sep=',', header=None,
+        df = self.read_csv(StringIO(data), sep=',', header=None,
                       parse_dates=[1], index_col=1)
         from datetime import datetime
         d = datetime(1999, 1, 27, 19, 0)
@@ -278,13 +284,13 @@ KORD,19990127 22:00:00, 21:56:00, -0.5900, 1.7100, 5.1000, 0.0000, 290.0000
         import pandas.io.date_converters as conv
 
         # it works!
-        df = read_csv(StringIO(data), header=None, parse_dates=date_spec,
+        df = self.read_csv(StringIO(data), header=None, parse_dates=date_spec,
                       date_parser=conv.parse_date_time)
         self.assert_('nominal' in df)
 
     def test_single_line(self):
         # sniff separator
-        df = read_csv(StringIO('1,2'), names=['a', 'b'], sep=None)
+        df = self.read_csv(StringIO('1,2'), names=['a', 'b'], sep=None)
         assert_frame_equal(DataFrame({'a': [1], 'b': [2]}), df)
 
     def test_multiple_date_cols_with_header(self):
@@ -297,7 +303,7 @@ KORD,19990127, 21:00:00, 21:18:00, -0.9900, 2.0100, 3.6000, 0.0000, 270.0000
 KORD,19990127, 22:00:00, 21:56:00, -0.5900, 1.7100, 5.1000, 0.0000, 290.0000
 KORD,19990127, 23:00:00, 22:56:00, -0.5900, 1.7100, 4.6000, 0.0000, 280.0000"""
 
-        df = read_csv(StringIO(data), parse_dates={'nominal': [1, 2]})
+        df = self.read_csv(StringIO(data), parse_dates={'nominal': [1, 2]})
         self.assert_(not isinstance(df.nominal[0], basestring))
 
     def test_multiple_date_cols_index(self):
@@ -310,21 +316,21 @@ KORD4,19990127, 21:00:00, 21:18:00, -0.9900, 2.0100, 3.6000, 0.0000, 270.0000
 KORD5,19990127, 22:00:00, 21:56:00, -0.5900, 1.7100, 5.1000, 0.0000, 290.0000
 KORD6,19990127, 23:00:00, 22:56:00, -0.5900, 1.7100, 4.6000, 0.0000, 280.0000"""
 
-        xp = read_csv(StringIO(data), parse_dates={'nominal': [1, 2]})
-        df = read_csv(StringIO(data), parse_dates={'nominal': [1, 2]},
+        xp = self.read_csv(StringIO(data), parse_dates={'nominal': [1, 2]})
+        df = self.read_csv(StringIO(data), parse_dates={'nominal': [1, 2]},
                       index_col='nominal')
         assert_frame_equal(xp.set_index('nominal'), df)
-        df2 = read_csv(StringIO(data), parse_dates={'nominal': [1, 2]},
+        df2 = self.read_csv(StringIO(data), parse_dates={'nominal': [1, 2]},
                       index_col=0)
         assert_frame_equal(df2, df)
 
-        df3 = read_csv(StringIO(data), parse_dates=[[1, 2]], index_col=0)
+        df3 = self.read_csv(StringIO(data), parse_dates=[[1, 2]], index_col=0)
         assert_frame_equal(df3, df)
 
     def test_multiple_date_cols_chunked(self):
-        df = read_csv(StringIO(self.ts_data), parse_dates={'nominal': [1,2]},
+        df = self.read_csv(StringIO(self.ts_data), parse_dates={'nominal': [1,2]},
                       index_col='nominal')
-        reader = read_csv(StringIO(self.ts_data), parse_dates={'nominal': [1,2]},
+        reader = self.read_csv(StringIO(self.ts_data), parse_dates={'nominal': [1,2]},
                           index_col='nominal', chunksize=2)
 
         chunks = list(reader)
@@ -334,13 +340,13 @@ KORD6,19990127, 23:00:00, 22:56:00, -0.5900, 1.7100, 4.6000, 0.0000, 280.0000"""
         assert_frame_equal(chunks[2], df[4:])
 
     def test_multiple_date_col_multiple_index(self):
-        df = read_csv(StringIO(self.ts_data), parse_dates={'nominal' : [1, 2]},
+        df = self.read_csv(StringIO(self.ts_data), parse_dates={'nominal' : [1, 2]},
                       index_col=['nominal', 'ID'])
-        xp = read_csv(StringIO(self.ts_data), parse_dates={'nominal' : [1, 2]})
+        xp = self.read_csv(StringIO(self.ts_data), parse_dates={'nominal' : [1, 2]})
         assert_frame_equal(xp.set_index(['nominal', 'ID']), df)
 
     def test_multiple_date_col_name_collision(self):
-        self.assertRaises(ValueError, read_csv, StringIO(self.ts_data),
+        self.assertRaises(ValueError, self.read_csv, StringIO(self.ts_data),
                           parse_dates={'ID' : [1, 2]})
 
         data = """\
@@ -352,14 +358,14 @@ KORD4,19990127, 21:00:00, 21:18:00, -0.9900, 2.0100, 3.6000, 0.0000, 270.0000
 KORD5,19990127, 22:00:00, 21:56:00, -0.5900, 1.7100, 5.1000, 0.0000, 290.0000
 KORD6,19990127, 23:00:00, 22:56:00, -0.5900, 1.7100, 4.6000, 0.0000, 280.0000"""
 
-        self.assertRaises(ValueError, read_csv, StringIO(data),
+        self.assertRaises(ValueError, self.read_csv, StringIO(data),
                           parse_dates=[[1, 2]])
 
     def test_multiple_date_col_named_components(self):
-        xp = read_csv(StringIO(self.ts_data), parse_dates={'nominal': [1,2]},
+        xp = self.read_csv(StringIO(self.ts_data), parse_dates={'nominal': [1,2]},
                       index_col='nominal')
         colspec = {'nominal' : ['date', 'nominalTime']}
-        df = read_csv(StringIO(self.ts_data), parse_dates=colspec,
+        df = self.read_csv(StringIO(self.ts_data), parse_dates=colspec,
                       index_col='nominal')
         assert_frame_equal(df, xp)
 
@@ -375,11 +381,11 @@ KORD6,19990127, 23:00:00, 22:56:00, -0.5900, 1.7100, 4.6000, 0.0000, 280.0000"""
         h = "ID,date,NominalTime,ActualTime,TDew,TAir,Windspeed,Precip,WindDir\n"
         data = h + no_header
         #import pdb; pdb.set_trace()
-        rs = read_csv(StringIO(data), index_col='ID')
-        xp = read_csv(StringIO(data), header=0).set_index('ID')
+        rs = self.read_csv(StringIO(data), index_col='ID')
+        xp = self.read_csv(StringIO(data), header=0).set_index('ID')
         assert_frame_equal(rs, xp)
 
-        self.assertRaises(ValueError, read_csv, StringIO(no_header),
+        self.assertRaises(ValueError, self.read_csv, StringIO(no_header),
                           index_col='ID')
 
         data = """\
@@ -391,18 +397,18 @@ KORD6,19990127, 23:00:00, 22:56:00, -0.5900, 1.7100, 4.6000, 0.0000, 280.0000"""
         xp = DataFrame({'a' : [1, 5, 9], 'b' : [2, 6, 10], 'c' : [3, 7, 11],
                         'd' : [4, 8, 12]},
                        index=Index(['hello', 'world', 'foo'], name='message'))
-        rs = read_csv(StringIO(data), names=names, index_col=['message'])
+        rs = self.read_csv(StringIO(data), names=names, index_col=['message'])
         assert_frame_equal(xp, rs)
         self.assert_(xp.index.name == rs.index.name)
 
-        rs = read_csv(StringIO(data), names=names, index_col='message')
+        rs = self.read_csv(StringIO(data), names=names, index_col='message')
         assert_frame_equal(xp, rs)
         self.assert_(xp.index.name == rs.index.name)
 
     def test_converter_index_col_bug(self):
         #1835
         data = "A;B\n1;2\n3;4"
-        rs = read_csv(StringIO(data), sep=';', index_col='A',
+        rs = self.read_csv(StringIO(data), sep=';', index_col='A',
                       converters={'A' : lambda x: x})
         xp = DataFrame({'B' : [2, 4]}, index=Index([1, 3], name='A'))
         assert_frame_equal(rs, xp)
@@ -422,7 +428,7 @@ A,B,C
 """
 
         try:
-            df = read_table(StringIO(data), sep=',', header=1, comment='#')
+            df = self.read_table(StringIO(data), sep=',', header=1, comment='#')
             self.assert_(False)
         except ValueError, inst:
             self.assert_('Expecting 3 columns, got 5 in row 3' in str(inst))
@@ -437,7 +443,7 @@ footer
 """
 
         try:
-            df = read_table(StringIO(data), sep=',', header=1, comment='#',
+            df = self.read_table(StringIO(data), sep=',', header=1, comment='#',
                             skip_footer=-1)
             self.assert_(False)
         except ValueError, inst:
@@ -453,7 +459,7 @@ skip
 2,3,4
 """
         try:
-            it = read_table(StringIO(data), sep=',',
+            it = self.read_table(StringIO(data), sep=',',
                             header=1, comment='#', iterator=True, chunksize=1,
                             skiprows=[2])
             df = it.get_chunk(5)
@@ -472,7 +478,7 @@ skip
 2,3,4
 """
         try:
-            it = read_table(StringIO(data), sep=',',
+            it = self.read_table(StringIO(data), sep=',',
                             header=1, comment='#', iterator=True, chunksize=1,
                             skiprows=[2])
             df = it.get_chunk(1)
@@ -492,7 +498,7 @@ skip
 2,3,4
 """
         try:
-            it = read_table(StringIO(data), sep=',',
+            it = self.read_table(StringIO(data), sep=',',
                             header=1, comment='#', iterator=True, chunksize=1,
                             skiprows=[2])
             df = it.get_chunk(1)
@@ -508,11 +514,11 @@ Klosterdruckerei\tKlosterdruckerei <Salem> (1611-1804)\tMuller, Jakob
 Klosterdruckerei\tKlosterdruckerei <Kempten> (1609-1805)\t"Furststiftische Hofdruckerei,  <Kempten""
 Klosterdruckerei\tKlosterdruckerei <Kempten> (1609-1805)\tGaller, Alois
 Klosterdruckerei\tKlosterdruckerei <Kempten> (1609-1805)\tHochfurstliche Buchhandlung <Kempten>"""
-        self.assertRaises(Exception, read_table, StringIO(bad_line_small),
+        self.assertRaises(Exception, self.read_table, StringIO(bad_line_small),
                           sep='\t')
 
         good_line_small = bad_line_small + '"'
-        df = read_table(StringIO(good_line_small), sep='\t')
+        df = self.read_table(StringIO(good_line_small), sep='\t')
         self.assert_(len(df) == 3)
 
     def test_custom_na_values(self):
@@ -526,14 +532,14 @@ ignore,this,row
                     [nan, 5, nan],
                     [7, 8, nan]]
 
-        df = read_csv(StringIO(data), na_values=['baz'], skiprows=[1])
+        df = self.read_csv(StringIO(data), na_values=['baz'], skiprows=[1])
         assert_almost_equal(df.values, expected)
 
-        df2 = read_table(StringIO(data), sep=',', na_values=['baz'],
+        df2 = self.read_table(StringIO(data), sep=',', na_values=['baz'],
                          skiprows=[1])
         assert_almost_equal(df2.values, expected)
 
-        df3 = read_table(StringIO(data), sep=',', na_values='baz',
+        df3 = self.read_table(StringIO(data), sep=',', na_values='baz',
                          skiprows=[1])
         assert_almost_equal(df3.values, expected)
 
@@ -549,10 +555,10 @@ ignore,this,row
 1/2/2000,4,5,6
 1/3/2000,7,8,9
 """
-        data = read_csv(StringIO(text), skiprows=range(6), header=None,
+        data = self.read_csv(StringIO(text), skiprows=range(6), header=None,
                         index_col=0, parse_dates=True)
 
-        data2 = read_csv(StringIO(text), skiprows=6, header=None,
+        data2 = self.read_csv(StringIO(text), skiprows=6, header=None,
                          index_col=0, parse_dates=True)
 
         expected = DataFrame(np.arange(1., 10.).reshape((3,3)),
@@ -573,7 +579,7 @@ NaN,nan
                     [nan, 'baz'],
                     [nan, nan]]
 
-        df = read_csv(StringIO(data))
+        df = self.read_csv(StringIO(data))
         assert_almost_equal(df.values, expected)
 
     def test_unnamed_columns(self):
@@ -585,7 +591,7 @@ NaN,nan
         expected = [[1,2,3,4,5.],
                     [6,7,8,9,10],
                     [11,12,13,14,15]]
-        df = read_table(StringIO(data), sep=',')
+        df = self.read_table(StringIO(data), sep=',')
         assert_almost_equal(df.values, expected)
         self.assert_(np.array_equal(df.columns,
                                     ['A', 'B', 'C', 'Unnamed: 3',
@@ -597,7 +603,7 @@ a,b,c
 d,,f
 ,g,h
 """
-        result = read_csv(StringIO(data))
+        result = self.read_csv(StringIO(data))
         expected = DataFrame([['a', 'b', 'c'],
                               ['d', np.nan, 'f'],
                               [np.nan, 'g', 'h']],
@@ -611,7 +617,7 @@ d,,f
 6,7,8,9,10
 11,12,13,14,15
 """
-        df = read_table(StringIO(data), sep=',')
+        df = self.read_table(StringIO(data), sep=',')
         self.assert_(np.array_equal(df.columns,
                                     ['A', 'A.1', 'B', 'B.1', 'B.2']))
 
@@ -621,7 +627,7 @@ a,1,2
 b,3,4
 c,4,5
 """
-        df = read_csv(StringIO(data))
+        df = self.read_csv(StringIO(data))
         # TODO
 
     def test_csv_custom_parser(self):
@@ -630,9 +636,9 @@ c,4,5
 20090102,b,3,4
 20090103,c,4,5
 """
-        df = read_csv(StringIO(data),
+        df = self.read_csv(StringIO(data),
                       date_parser=lambda x: datetime.strptime(x, '%Y%m%d'))
-        expected = read_csv(StringIO(data), parse_dates=True)
+        expected = self.read_csv(StringIO(data), parse_dates=True)
         assert_frame_equal(df, expected)
 
     def test_parse_dates_implicit_first_col(self):
@@ -641,8 +647,8 @@ c,4,5
 20090102,b,3,4
 20090103,c,4,5
 """
-        df = read_csv(StringIO(data), parse_dates=True)
-        expected = read_csv(StringIO(data), index_col=0, parse_dates=True)
+        df = self.read_csv(StringIO(data), parse_dates=True)
+        expected = self.read_csv(StringIO(data), index_col=0, parse_dates=True)
         self.assert_(isinstance(df.index[0], (datetime, np.datetime64, Timestamp)))
         assert_frame_equal(df, expected)
 
@@ -652,7 +658,7 @@ c,4,5
 20090102,b,3,4
 20090103,c,4,5
 """
-        rs = read_csv(StringIO(data), index_col='date', parse_dates='date')
+        rs = self.read_csv(StringIO(data), index_col='date', parse_dates='date')
         idx = date_range('1/1/2009', periods=3).asobject
         idx.name = 'date'
         xp = DataFrame({'A': ['a', 'b', 'c'],
@@ -670,7 +676,7 @@ c,4,5
 15/01/2010;P;P;50;1;14/1/2011
 01/05/2010;P;P;50;1;15/1/2011'''
 
-        expected = read_csv(StringIO(data), sep=";", index_col=range(4))
+        expected = self.read_csv(StringIO(data), sep=";", index_col=range(4))
 
         lev = expected.index.levels[0]
         expected.index.levels[0] = lev.to_datetime(dayfirst=True)
@@ -679,11 +685,11 @@ c,4,5
         expected['aux_date'] = map(Timestamp, expected['aux_date'])
         self.assert_(isinstance(expected['aux_date'][0], datetime))
 
-        df = read_csv(StringIO(data), sep=";", index_col = range(4),
+        df = self.read_csv(StringIO(data), sep=";", index_col = range(4),
                       parse_dates=[0, 5], dayfirst=True)
         assert_frame_equal(df, expected)
 
-        df = read_csv(StringIO(data), sep=";", index_col = range(4),
+        df = self.read_csv(StringIO(data), sep=";", index_col = range(4),
                       parse_dates=['date', 'aux_date'], dayfirst=True)
         assert_frame_equal(df, expected)
 
@@ -692,9 +698,9 @@ c,4,5
 6,7,8,9,10
 11,12,13,14,15
 """
-        df = read_table(StringIO(data), sep=',', header=None)
+        df = self.read_table(StringIO(data), sep=',', header=None)
         names = ['foo', 'bar', 'baz', 'quux', 'panda']
-        df2 = read_table(StringIO(data), sep=',', header=None, names=names)
+        df2 = self.read_table(StringIO(data), sep=',', header=None, names=names)
         expected = [[1,2,3,4,5.],
                     [6,7,8,9,10],
                     [11,12,13,14,15]]
@@ -710,7 +716,7 @@ bar,4,5,6
 baz,7,8,9
 """
         names = ['A', 'B', 'C']
-        df = read_csv(StringIO(data), names=names)
+        df = self.read_csv(StringIO(data), names=names)
 
         self.assertEqual(names, ['A', 'B', 'C'])
 
@@ -720,8 +726,8 @@ baz,7,8,9
         assert_frame_equal(df, expected)
 
     def test_read_csv_dataframe(self):
-        df = read_csv(self.csv1, index_col=0, parse_dates=True)
-        df2 = read_table(self.csv1, sep=',', index_col=0, parse_dates=True)
+        df = self.read_csv(self.csv1, index_col=0, parse_dates=True)
+        df2 = self.read_table(self.csv1, sep=',', index_col=0, parse_dates=True)
         self.assert_(np.array_equal(df.columns, ['A', 'B', 'C', 'D']))
         self.assert_(df.index.name == 'index')
         self.assert_(isinstance(df.index[0], (datetime, np.datetime64, Timestamp)))
@@ -729,8 +735,8 @@ baz,7,8,9
         assert_frame_equal(df, df2)
 
     def test_read_csv_no_index_name(self):
-        df = read_csv(self.csv2, index_col=0, parse_dates=True)
-        df2 = read_table(self.csv2, sep=',', index_col=0, parse_dates=True)
+        df = self.read_csv(self.csv2, index_col=0, parse_dates=True)
+        df2 = self.read_table(self.csv2, sep=',', index_col=0, parse_dates=True)
         self.assert_(np.array_equal(df.columns, ['A', 'B', 'C', 'D', 'E']))
         self.assert_(isinstance(df.index[0], (datetime, np.datetime64, Timestamp)))
         self.assert_(df.ix[:, ['A', 'B', 'C', 'D']].values.dtype == np.float64)
@@ -758,7 +764,7 @@ baz,7,8,9
         pth = os.path.join(self.dirpath, 'test.xls')
         xls = ExcelFile(pth)
         df = xls.parse('Sheet1', index_col=0, parse_dates=True)
-        df2 = read_csv(self.csv1, index_col=0, parse_dates=True)
+        df2 = self.read_csv(self.csv1, index_col=0, parse_dates=True)
         df3 = xls.parse('Sheet2', skiprows=[1], index_col=0, parse_dates=True)
         assert_frame_equal(df, df2)
         assert_frame_equal(df3, df2)
@@ -784,7 +790,7 @@ baz,7,8,9
         pth = os.path.join(self.dirpath, 'test.xlsx')
         xlsx = ExcelFile(pth)
         df = xlsx.parse('Sheet1', index_col=0, parse_dates=True)
-        df2 = read_csv(self.csv1, index_col=0, parse_dates=True)
+        df2 = self.read_csv(self.csv1, index_col=0, parse_dates=True)
         df3 = xlsx.parse('Sheet2', skiprows=[1], index_col=0, parse_dates=True)
         assert_frame_equal(df, df2)
         assert_frame_equal(df3, df2)
@@ -800,7 +806,7 @@ baz,7,8,9
             xls = ExcelFile(pth)
             df = xls.parse('Sheet1', index_col=0, parse_dates=True,
                             parse_cols=3)
-            df2 = read_csv(self.csv1, index_col=0, parse_dates=True)
+            df2 = self.read_csv(self.csv1, index_col=0, parse_dates=True)
             df2 = df2.reindex(columns=['A', 'B', 'C'])
             df3 = xls.parse('Sheet2', skiprows=[1], index_col=0,
                             parse_dates=True, parse_cols=3)
@@ -818,7 +824,7 @@ baz,7,8,9
             xlsx = ExcelFile(pth)
             df = xlsx.parse('Sheet1', index_col=0, parse_dates=True,
                             parse_cols=[0, 2, 3])
-            df2 = read_csv(self.csv1, index_col=0, parse_dates=True)
+            df2 = self.read_csv(self.csv1, index_col=0, parse_dates=True)
             df2 = df2.reindex(columns=['B', 'C'])
             df3 = xlsx.parse('Sheet2', skiprows=[1], index_col=0,
                              parse_dates=True,
@@ -832,7 +838,7 @@ baz,7,8,9
 6,7,8,9,10
 11,12,13,14,15
 """
-        self.assertRaises(Exception, read_csv, StringIO(data))
+        self.assertRaises(Exception, self.read_csv, StringIO(data))
 
     def test_read_table_duplicate_index(self):
         data = """index,A,B,C,D
@@ -844,8 +850,8 @@ foo,12,13,14,15
 bar,12,13,14,15
 """
 
-        result = read_csv(StringIO(data), index_col=0)
-        expected = read_csv(StringIO(data)).set_index('index',
+        result = self.read_csv(StringIO(data), index_col=0)
+        expected = self.read_csv(StringIO(data)).set_index('index',
                                                       verify_integrity=False)
         assert_frame_equal(result, expected)
 
@@ -860,7 +866,7 @@ bar,12,13,14,15
 """
 
         # it works!
-        result = read_csv(StringIO(data))
+        result = self.read_csv(StringIO(data))
 
     def test_parse_bools(self):
         data = """A,B
@@ -868,7 +874,7 @@ True,1
 False,2
 True,3
 """
-        data = read_csv(StringIO(data))
+        data = self.read_csv(StringIO(data))
         self.assert_(data['A'].dtype == np.bool_)
 
         data = """A,B
@@ -878,7 +884,7 @@ yes,3
 No,3
 Yes,3
 """
-        data = read_csv(StringIO(data))
+        data = self.read_csv(StringIO(data))
         self.assert_(data['A'].dtype == np.bool_)
 
         data = """A,B
@@ -886,7 +892,7 @@ TRUE,1
 FALSE,2
 TRUE,3
 """
-        data = read_csv(StringIO(data))
+        data = self.read_csv(StringIO(data))
         self.assert_(data['A'].dtype == np.bool_)
 
     def test_int_conversion(self):
@@ -895,7 +901,7 @@ TRUE,3
 2.0,2
 3.0,3
 """
-        data = read_csv(StringIO(data))
+        data = self.read_csv(StringIO(data))
         self.assert_(data['A'].dtype == np.float64)
         self.assert_(data['B'].dtype == np.int64)
 
@@ -905,7 +911,7 @@ foo,1,2,3
 bar,4,5,6
 baz,7,8,9
 """
-        data = read_csv(StringIO(data))
+        data = self.read_csv(StringIO(data))
         self.assert_(data.index.equals(Index(['foo', 'bar', 'baz'])))
 
     def test_sniff_delimiter(self):
@@ -914,10 +920,10 @@ foo|1|2|3
 bar|4|5|6
 baz|7|8|9
 """
-        data = read_csv(StringIO(text), index_col=0, sep=None)
+        data = self.read_csv(StringIO(text), index_col=0, sep=None)
         self.assert_(data.index.equals(Index(['foo', 'bar', 'baz'])))
 
-        data2 = read_csv(StringIO(text), index_col=0, delimiter='|')
+        data2 = self.read_csv(StringIO(text), index_col=0, delimiter='|')
         assert_frame_equal(data, data2)
 
         text = """ignore this
@@ -927,7 +933,7 @@ foo|1|2|3
 bar|4|5|6
 baz|7|8|9
 """
-        data3 = read_csv(StringIO(text), index_col=0, sep=None, skiprows=2)
+        data3 = self.read_csv(StringIO(text), index_col=0, sep=None, skiprows=2)
         assert_frame_equal(data, data3)
 
         # can't get this to work on Python 3
@@ -939,18 +945,18 @@ foo|1|2|3
 bar|4|5|6
 baz|7|8|9
 """.encode('utf-8')
-            data4 = read_csv(BytesIO(text), index_col=0, sep=None, skiprows=2,
+            data4 = self.read_csv(BytesIO(text), index_col=0, sep=None, skiprows=2,
                              encoding='utf-8')
             assert_frame_equal(data, data4)
 
     def test_read_nrows(self):
-        df = read_csv(StringIO(self.data1), nrows=3)
-        expected = read_csv(StringIO(self.data1))[:3]
+        df = self.read_csv(StringIO(self.data1), nrows=3)
+        expected = self.read_csv(StringIO(self.data1))[:3]
         assert_frame_equal(df, expected)
 
     def test_read_chunksize(self):
-        reader = read_csv(StringIO(self.data1), index_col=0, chunksize=2)
-        df = read_csv(StringIO(self.data1), index_col=0)
+        reader = self.read_csv(StringIO(self.data1), index_col=0, chunksize=2)
+        df = self.read_csv(StringIO(self.data1), index_col=0)
 
         chunks = list(reader)
 
@@ -959,8 +965,8 @@ baz|7|8|9
         assert_frame_equal(chunks[2], df[4:])
 
     def test_read_chunksize_named(self):
-        reader = read_csv(StringIO(self.data1), index_col='index', chunksize=2)
-        df = read_csv(StringIO(self.data1), index_col='index')
+        reader = self.read_csv(StringIO(self.data1), index_col='index', chunksize=2)
+        df = self.read_csv(StringIO(self.data1), index_col='index')
 
         chunks = list(reader)
 
@@ -971,7 +977,7 @@ baz|7|8|9
     def test_read_text_list(self):
         data = """A,B,C\nfoo,1,2,3\nbar,4,5,6"""
         as_list = [['A','B','C'],['foo','1','2','3'],['bar','4','5','6']]
-        df = read_csv(StringIO(data), index_col=0)
+        df = self.read_csv(StringIO(data), index_col=0)
 
         parser = TextParser(as_list, index_col=0, chunksize=2)
         chunk  = parser.get_chunk(None)
@@ -979,8 +985,8 @@ baz|7|8|9
         assert_frame_equal(chunk, df)
 
     def test_iterator(self):
-        reader = read_csv(StringIO(self.data1), index_col=0, iterator=True)
-        df = read_csv(StringIO(self.data1), index_col=0)
+        reader = self.read_csv(StringIO(self.data1), index_col=0, iterator=True)
+        df = self.read_csv(StringIO(self.data1), index_col=0)
 
         chunk = reader.get_chunk(3)
         assert_frame_equal(chunk, df[:3])
@@ -992,7 +998,7 @@ baz|7|8|9
         lines = list(csv.reader(StringIO(self.data1)))
         parser = TextParser(lines, index_col=0, chunksize=2)
 
-        df = read_csv(StringIO(self.data1), index_col=0)
+        df = self.read_csv(StringIO(self.data1), index_col=0)
 
         chunks = list(parser)
         assert_frame_equal(chunks[0], df[:2])
@@ -1005,11 +1011,11 @@ baz|7|8|9
         assert_frame_equal(chunks[0], df[1:3])
 
         # test bad parameter (skip_footer)
-        reader = read_csv(StringIO(self.data1), index_col=0, iterator=True,
+        reader = self.read_csv(StringIO(self.data1), index_col=0, iterator=True,
                           skip_footer=True)
         self.assertRaises(ValueError, reader.get_chunk, 3)
 
-        treader = read_table(StringIO(self.data1), sep=',', index_col=0,
+        treader = self.read_table(StringIO(self.data1), sep=',', index_col=0,
                              iterator=True)
         self.assert_(isinstance(treader, TextFileReader))
 
@@ -1027,8 +1033,8 @@ bar,7,8,9,10
 baz,12,13,14,15
 """
 
-        df = read_csv(StringIO(data), header=2, index_col=0)
-        expected = read_csv(StringIO(data2), header=0, index_col=0)
+        df = self.read_csv(StringIO(data), header=2, index_col=0)
+        expected = self.read_csv(StringIO(data2), header=0, index_col=0)
         assert_frame_equal(df, expected)
 
     def test_pass_names_with_index(self):
@@ -1037,8 +1043,8 @@ baz,12,13,14,15
 
         # regular index
         names = ['index', 'A', 'B', 'C', 'D']
-        df = read_csv(StringIO(no_header), index_col=0, names=names)
-        expected = read_csv(StringIO(self.data1), index_col=0)
+        df = self.read_csv(StringIO(no_header), index_col=0, names=names)
+        expected = self.read_csv(StringIO(self.data1), index_col=0)
         assert_frame_equal(df, expected)
 
         # multi index
@@ -1052,11 +1058,11 @@ bar,two,12,13,14,15
         lines = data.split('\n')
         no_header = '\n'.join(lines[1:])
         names = ['index1', 'index2', 'A', 'B', 'C', 'D']
-        df = read_csv(StringIO(no_header), index_col=[0, 1], names=names)
-        expected = read_csv(StringIO(data), index_col=[0, 1])
+        df = self.read_csv(StringIO(no_header), index_col=[0, 1], names=names)
+        expected = self.read_csv(StringIO(data), index_col=[0, 1])
         assert_frame_equal(df, expected)
 
-        df = read_csv(StringIO(data), index_col=['index1', 'index2'])
+        df = self.read_csv(StringIO(data), index_col=['index1', 'index2'])
         assert_frame_equal(df, expected)
 
     def test_multi_index_no_level_names(self):
@@ -1079,12 +1085,12 @@ bar,two,12,13,14,15
         lines = data.split('\n')
         no_header = '\n'.join(lines[1:])
         names = ['A', 'B', 'C', 'D']
-        df = read_csv(StringIO(no_header), index_col=[0, 1], names=names)
-        expected = read_csv(StringIO(data), index_col=[0, 1])
+        df = self.read_csv(StringIO(no_header), index_col=[0, 1], names=names)
+        expected = self.read_csv(StringIO(data), index_col=[0, 1])
         assert_frame_equal(df, expected)
 
         # 2 implicit first cols
-        df2 = read_csv(StringIO(data2))
+        df2 = self.read_csv(StringIO(data2))
         assert_frame_equal(df2, df)
 
     def test_multi_index_parse_dates(self):
@@ -1099,12 +1105,12 @@ bar,two,12,13,14,15
 20090103,two,b,3,4
 20090103,three,c,4,5
 """
-        df = read_csv(StringIO(data), index_col=[0, 1], parse_dates=True)
+        df = self.read_csv(StringIO(data), index_col=[0, 1], parse_dates=True)
         self.assert_(isinstance(df.index.levels[0][0],
                      (datetime, np.datetime64, Timestamp)))
 
         # specify columns out of order!
-        df2 = read_csv(StringIO(data), index_col=[1, 0], parse_dates=True)
+        df2 = self.read_csv(StringIO(data), index_col=[1, 0], parse_dates=True)
         self.assert_(isinstance(df2.index.levels[1][0],
                      (datetime, np.datetime64, Timestamp)))
 
@@ -1117,13 +1123,13 @@ want to skip this
 also also skip this
 and this
 """
-        result = read_csv(StringIO(data), skip_footer=-3)
+        result = self.read_csv(StringIO(data), skip_footer=-3)
         no_footer = '\n'.join(data.split('\n')[:-4])
-        expected = read_csv(StringIO(no_footer))
+        expected = self.read_csv(StringIO(no_footer))
 
         assert_frame_equal(result, expected)
 
-        result = read_csv(StringIO(data), skip_footer=3)
+        result = self.read_csv(StringIO(data), skip_footer=3)
         assert_frame_equal(result, expected)
 
     def test_no_unnamed_index(self):
@@ -1132,7 +1138,7 @@ and this
 1 2 0 c d
 2 2 2 e f
 """
-        df = read_table(StringIO(data), sep=' ')
+        df = self.read_table(StringIO(data), sep=' ')
         self.assert_(df.index.name is None)
 
     def test_converters(self):
@@ -1143,10 +1149,10 @@ c,4,5,01/03/2009
 """
         from dateutil import parser
 
-        result = read_csv(StringIO(data), converters={'D' : parser.parse})
-        result2 = read_csv(StringIO(data), converters={3 : parser.parse})
+        result = self.read_csv(StringIO(data), converters={'D' : parser.parse})
+        result2 = self.read_csv(StringIO(data), converters={3 : parser.parse})
 
-        expected = read_csv(StringIO(data))
+        expected = self.read_csv(StringIO(data))
         expected['D'] = expected['D'].map(parser.parse)
 
         self.assert_(isinstance(result['D'][0], (datetime, Timestamp)))
@@ -1155,8 +1161,8 @@ c,4,5,01/03/2009
 
         # produce integer
         converter = lambda x: int(x.split('/')[2])
-        result = read_csv(StringIO(data), converters={'D' : converter})
-        expected = read_csv(StringIO(data))
+        result = self.read_csv(StringIO(data), converters={'D' : converter})
+        expected = self.read_csv(StringIO(data))
         expected['D'] = expected['D'].map(converter)
         assert_frame_equal(result, expected)
 
@@ -1167,7 +1173,7 @@ c,4,5,01/03/2009
 3;878,158;108013,434;GHI;rez;2,735694704"""
         f = lambda x : float(x.replace(",", "."))
         converter = {'Number1':f,'Number2':f, 'Number3':f}
-        df2 = read_csv(StringIO(data), sep=';',converters=converter)
+        df2 = self.read_csv(StringIO(data), sep=';',converters=converter)
         self.assert_(df2['Number1'].dtype == float)
         self.assert_(df2['Number2'].dtype == float)
         self.assert_(df2['Number3'].dtype == float)
@@ -1180,7 +1186,7 @@ c,4,5,01/03/2009
 3;878,158;108013,434;GHI;rez;2,735694704"""
         f = lambda x : x.replace(",", ".")
         converter = {'Number1':f,'Number2':f, 'Number3':f}
-        df2 = read_csv(StringIO(data), sep=';',converters=converter)
+        df2 = self.read_csv(StringIO(data), sep=';',converters=converter)
         self.assert_(df2['Number1'].dtype == float)
 
     def test_regex_separator(self):
@@ -1189,8 +1195,8 @@ a   1   2   3   4
 b   1   2   3   4
 c   1   2   3   4
 """
-        df = read_table(StringIO(data), sep='\s+')
-        expected = read_csv(StringIO(re.sub('[ ]+', ',', data)),
+        df = self.read_table(StringIO(data), sep='\s+')
+        expected = self.read_csv(StringIO(re.sub('[ ]+', ',', data)),
                             index_col=0)
         self.assert_(expected.index.name is None)
         assert_frame_equal(df, expected)
@@ -1211,7 +1217,7 @@ two,1,2,3"""
 
         try:
             # it works!
-            df = read_csv(StringIO(text), verbose=True)
+            df = self.read_csv(StringIO(text), verbose=True)
             self.assert_(buf.getvalue() == 'Filled 3 NA values in column a\n')
         finally:
             sys.stdout = sys.__stdout__
@@ -1231,7 +1237,7 @@ eight,1,2,3"""
 
         try:
             # it works!
-            df = read_csv(StringIO(text), verbose=True, index_col=0)
+            df = self.read_csv(StringIO(text), verbose=True, index_col=0)
             self.assert_(buf.getvalue() == 'Filled 1 NA values in column a\n')
         finally:
             sys.stdout = sys.__stdout__
@@ -1244,7 +1250,7 @@ a   q   20      4     0.4473  1.4152  0.2834  1.00661  0.1744
 x   q   30      3    -0.6662 -0.5243 -0.3580  0.89145  2.5838"""
 
         # it works!
-        df = read_table(StringIO(text), sep='\s+')
+        df = self.read_table(StringIO(text), sep='\s+')
         self.assertEquals(df.index.names, ['one', 'two', 'three', 'four'])
 
     def test_read_csv_parse_simple_list(self):
@@ -1253,7 +1259,7 @@ bar baz
 qux foo
 foo
 bar"""
-        df = read_csv(StringIO(text), header=None)
+        df = self.read_csv(StringIO(text), header=None)
         expected = DataFrame({'X.1' : ['foo', 'bar baz', 'qux foo',
                                        'foo', 'bar']})
         assert_frame_equal(df, expected)
@@ -1266,7 +1272,7 @@ bar"""
 02/02/2010,1,2
 """
         parser = lambda d: parse(d, dayfirst=True)
-        df = read_csv(StringIO(text), skiprows=[0],
+        df = self.read_csv(StringIO(text), skiprows=[0],
                       names=['time', 'Q', 'NTU'], index_col=0,
                       parse_dates=True, date_parser=parser,
                       na_values=['NA'])
@@ -1278,7 +1284,7 @@ bar"""
         assert_frame_equal(df, expected)
 
         parser = lambda d: parse(d, day_first=True)
-        self.assertRaises(Exception, read_csv,
+        self.assertRaises(Exception, self.read_csv,
                           StringIO(text), skiprows=[0],
                           names=['time', 'Q', 'NTU'], index_col=0,
                           parse_dates=True, date_parser=parser,
@@ -1328,13 +1334,13 @@ bar"""
            return val
 
         fh = StringIO.StringIO(csv)
-        result = pandas.read_csv(fh, converters={'score':convert_score,
+        result = self.read_csv(fh, converters={'score':convert_score,
                                                  'days':convert_days},
                                  na_values=[-1,'',None])
         self.assert_(isnull(result['days'][1]))
 
         fh = StringIO.StringIO(csv)
-        result2 = pandas.read_csv(fh, converters={'score':convert_score,
+        result2 = self.read_csv(fh, converters={'score':convert_score,
                                                   'days':convert_days_sentinel},
                                   na_values=[-1,'',None])
         assert_frame_equal(result, result2)
@@ -1347,7 +1353,7 @@ bar"""
 2011,61,413.836124,184.375703,11916.8
 2011,62,502.953953,173.237159,12468.3
 """
-        expected = read_csv(StringIO(data_expected), header=None)
+        expected = self.read_csv(StringIO(data_expected), header=None)
 
         data1 = """\
 201158    360.242940   149.910199   11950.7
@@ -1392,7 +1398,7 @@ bar,foo,foo
 foo,bar,NA
 bar,foo,foo"""
 
-        df = read_csv(StringIO(data),
+        df = self.read_csv(StringIO(data),
                       na_values={'A': ['foo'], 'B': ['bar']})
         expected = DataFrame({'A': [np.nan, 'bar', np.nan, 'bar'],
                               'B': [np.nan, 'foo', np.nan, 'foo'],
@@ -1405,17 +1411,17 @@ a,b,c,d
 """
         xp = DataFrame({'b': [np.nan], 'c': [1], 'd': [5]}, index=[0])
         xp.index.name = 'a'
-        df = read_csv(StringIO(data), na_values={}, index_col=0)
+        df = self.read_csv(StringIO(data), na_values={}, index_col=0)
         assert_frame_equal(df, xp)
 
         xp = DataFrame({'b': [np.nan], 'd': [5]},
                        MultiIndex.from_tuples([(0, 1)]))
-        df = read_csv(StringIO(data), na_values={}, index_col=[0, 2])
+        df = self.read_csv(StringIO(data), na_values={}, index_col=[0, 2])
         assert_frame_equal(df, xp)
 
         xp = DataFrame({'b': [np.nan], 'd': [5]},
                        MultiIndex.from_tuples([(0, 1)]))
-        df = read_csv(StringIO(data), na_values={}, index_col=['a', 'c'])
+        df = self.read_csv(StringIO(data), na_values={}, index_col=['a', 'c'])
         assert_frame_equal(df, xp)
 
     @slow
@@ -1426,10 +1432,10 @@ a,b,c,d
             # HTTP(S)
             url = ('https://raw.github.com/pydata/pandas/master/'
                    'pandas/io/tests/salary.table')
-            url_table = read_table(url)
+            url_table = self.read_table(url)
             dirpath = curpath()
             localtable = os.path.join(dirpath, 'salary.table')
-            local_table = read_table(localtable)
+            local_table = self.read_table(localtable)
             assert_frame_equal(url_table, local_table)
             #TODO: ftp testing
 
@@ -1450,10 +1456,10 @@ a,b,c,d
             raise nose.SkipTest("file:// not supported with Python < 2.6")
         dirpath = curpath()
         localtable = os.path.join(dirpath, 'salary.table')
-        local_table = read_table(localtable)
+        local_table = self.read_table(localtable)
 
         try:
-            url_table = read_table('file://localhost/'+localtable)
+            url_table = self.read_table('file://localhost/'+localtable)
         except urllib2.URLError:
             # fails on some systems
             raise nose.SkipTest
@@ -1466,11 +1472,25 @@ a,b,c,d
         data = StringIO("Date,x\n2012-06-13T01:39:00Z,0.5")
 
         # it works
-        result = read_csv(data, index_col=0, parse_dates=True)
+        result = self.read_csv(data, index_col=0, parse_dates=True)
         stamp = result.index[0]
         self.assert_(stamp.minute == 39)
         self.assert_(result.index.tz is pytz.utc)
 
+
+class TestPythonParser(ParserTests, unittest.TestCase):
+
+    def read_csv(self, *args, **kwds):
+        kwds = kwds.copy()
+        kwds['engine'] = 'python'
+        return read_csv(*args, **kwds)
+
+    def read_table(self, *args, **kwds):
+        kwds = kwds.copy()
+        kwds['engine'] = 'python'
+        return read_table(*args, **kwds)
+
+
 class TestParseSQL(unittest.TestCase):
 
     def test_convert_sql_column_floats(self):
