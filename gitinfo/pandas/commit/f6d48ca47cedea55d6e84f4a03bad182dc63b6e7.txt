commit f6d48ca47cedea55d6e84f4a03bad182dc63b6e7
Author: y-p <yoval@gmx.com>
Date:   Tue Nov 27 01:59:38 2012 +0200

    BUG: hash random. in 3.3 exposed reliance on dict traversal order. #2331

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 04c3f80df..91e0bf8a7 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -10,6 +10,7 @@ from pandas.core.internals import BlockManager, make_block
 from pandas.core.series import Series
 from pandas.core.panel import Panel
 from pandas.util.decorators import cache_readonly, Appender
+from pandas.util.compat import OrderedDict
 import pandas.core.algorithms as algos
 import pandas.core.common as com
 import pandas.lib as lib
@@ -1525,7 +1526,7 @@ class NDFrameGroupBy(GroupBy):
         if isinstance(arg, basestring):
             return getattr(self, arg)(*args, **kwargs)
 
-        result = {}
+        result = OrderedDict()
         if isinstance(arg, dict):
             if self.axis != 0:  # pragma: no cover
                 raise ValueError('Can only pass dict with axis=0')
@@ -1533,7 +1534,7 @@ class NDFrameGroupBy(GroupBy):
             obj = self._obj_with_exclusions
 
             if any(isinstance(x, (list, tuple, dict)) for x in arg.values()):
-                new_arg = {}
+                new_arg = OrderedDict()
                 for k, v in arg.iteritems():
                     if not isinstance(v, (tuple, list, dict)):
                         new_arg[k] = [v]
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 542e5ee96..eade7d357 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -793,7 +793,8 @@ class TestDataFrameFormatting(unittest.TestCase):
         df = DataFrame({'A': [{'a':1, 'b':2}]})
 
         val = df.to_string()
-        self.assertTrue("{'a': 1, 'b': 2}" in val)
+        self.assertTrue("'a': 1" in val)
+        self.assertTrue("'b': 2" in val)
 
     def test_to_latex(self):
         # it works!
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 8361bae1f..c948fc28c 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -1859,6 +1859,7 @@ class TestGroupBy(unittest.TestCase):
 
     def test_more_flexible_frame_multi_function(self):
         from pandas import concat
+        from pandas.util.compat import OrderedDict
 
         grouped = self.df.groupby('A')
 
@@ -1868,8 +1869,8 @@ class TestGroupBy(unittest.TestCase):
         expected = concat([exmean, exstd], keys=['mean', 'std'], axis=1)
         expected = expected.swaplevel(0, 1, axis=1).sortlevel(0, axis=1)
 
-        result = grouped.aggregate({'C' : [np.mean, np.std],
-                                    'D' : [np.mean, np.std]})
+        d=OrderedDict([['C',[np.mean, np.std]],['D',[np.mean, np.std]]])
+        result = grouped.aggregate(d)
 
         assert_frame_equal(result, expected)
 
@@ -1884,10 +1885,12 @@ class TestGroupBy(unittest.TestCase):
         def foo(x): return np.mean(x)
         def bar(x): return np.std(x, ddof=1)
         result = grouped.aggregate({'C' : np.mean,
-                                    'D' : {'foo': np.mean,
-                                           'bar': np.std}})
+                                    'D' : OrderedDict([['foo', np.mean],
+                                           ['bar', np.std]])})
+
         expected = grouped.aggregate({'C' : [np.mean],
                                       'D' : [foo, bar]})
+
         assert_frame_equal(result, expected)
 
     def test_multi_function_flexible_mix(self):
@@ -1896,7 +1899,7 @@ class TestGroupBy(unittest.TestCase):
         grouped = self.df.groupby('A')
 
         result = grouped.aggregate({'C' : {'foo' : 'mean',
-                                           'bar' : 'std'},
+                                          'bar' : 'std'},
                                     'D' : 'sum'})
         result2 = grouped.aggregate({'C' : {'foo' : 'mean',
                                            'bar' : 'std'},
diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index 82b3a0fa7..bc1770d58 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -339,7 +339,10 @@ for _i, _weekday in enumerate(['MON', 'TUE', 'WED', 'THU', 'FRI']):
         _offset_map[_name] = offsets.WeekOfMonth(week=_iweek, weekday=_i)
         _rule_aliases[_name.replace('-', '@')] = _name
 
-_legacy_reverse_map = dict((v, k) for k, v in _rule_aliases.iteritems())
+# Note that _rule_aliases is not 1:1 (d[BA]==d[A@DEC]), and so traversal
+# order matters when constructing an inverse. we pick one. #2331
+_legacy_reverse_map = dict((v, k) for k, v in
+                           reversed(sorted(_rule_aliases.iteritems())))
 
 # for helping out with pretty-printing and name-lookups
 
