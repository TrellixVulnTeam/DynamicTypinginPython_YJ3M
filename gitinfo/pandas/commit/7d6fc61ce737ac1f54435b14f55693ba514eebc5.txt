commit 7d6fc61ce737ac1f54435b14f55693ba514eebc5
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Apr 25 16:20:58 2012 -0400

    ENH: parse mixed time strings like '1h30min15s', close #1120

diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index f2c4b426b..8c7dee130 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -306,15 +306,27 @@ def to_offset(freqstr):
         if isinstance(stride, basestring):
             name, stride = stride, name
         name, _ = _base_and_stride(name)
+        delta = get_offset(name) * stride
     else:
-        name, stride = _base_and_stride(freqstr)
-
-    offset = get_offset(name)
+        delta = None
+        try:
+            for stride, name, _ in opattern.findall(freqstr):
+                offset = get_offset(name)
+                if not stride:
+                    stride = 1
+                offset = offset * int(stride)
+                if delta is None:
+                    delta = offset
+                else:
+                    delta = delta + offset
+        except ValueError:
+            raise ValueError("Could not evaluate %s" % freqstr)
 
-    return offset * stride
+    return delta
 
 
-opattern = re.compile(r'(\d*)\s*(\S+)')
+# hack to handle WOM-1MON
+opattern = re.compile(r'(\d*)\s*([A-Za-z]+([\-@]\d*[A-Za-z]+)?)')
 
 def _base_and_stride(freqstr):
     """
@@ -326,7 +338,7 @@ def _base_and_stride(freqstr):
     """
     groups = opattern.match(freqstr)
 
-    if groups.lastindex != 2:
+    if not groups:
         raise ValueError("Could not evaluate %s" % freqstr)
 
     stride = groups.group(1)
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index c64a2d9a2..260e95b5e 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -887,6 +887,14 @@ class Tick(DateOffset):
     _delta = None
     _inc = timedelta(microseconds=1000)
 
+    def __add__(self, other):
+        if isinstance(other, Tick):
+            if type(self) == type(other):
+                return type(self)(self.n + other.n)
+            else:
+                return _delta_to_tick(self.delta + other.delta)
+        return self.apply(other)
+
     def __eq__(self, other):
         if isinstance(other, basestring):
             from pandas.tseries.frequencies import to_offset
@@ -928,6 +936,25 @@ class Tick(DateOffset):
     def rule_code(self):
         return self._rule_base
 
+def _delta_to_tick(delta):
+    if delta.microseconds == 0:
+        if delta.seconds == 0:
+            return Day(delta.days)
+        else:
+            seconds = delta.days * 86400 + delta.seconds
+            if seconds % 3600 == 0:
+                return Hour(seconds / 3600)
+            elif seconds % 60 == 0:
+                return Minute(seconds / 60)
+            else:
+                return Second(seconds)
+    else:
+        mus = _delta_to_microseconds(delta)
+        if mus % 1000 == 0:
+            return Milli(mus // 1000)
+        else:
+            return Micro(mus)
+
 def _delta_to_microseconds(delta):
     return (delta.days * 24 * 60 * 60 * 1000000
             + delta.seconds * 1000000
