commit ccc93ebaf5ae9c92e967cfb6bd0366346263ef99
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Sep 11 17:02:41 2009 +0000

    some Series constructor cleanup, made DataFrame.toDataMatrix better
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@24 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 69b0cec4a..af96a7986 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -491,8 +491,7 @@ class DataFrame(Picklable, Groupable):
     def toDataMatrix(self):
         from pandas.core.matrix import DataMatrix
 
-        return DataMatrix(self.asMatrix(), index=self.index,
-                          columns=self.cols())
+        return DataMatrix(self._series, index=self.index)
 
     def toString(self, to_stdout=True, verbose=False, colSpace=15, nanRep=None):
         """Output a tab-separated version of this DataFrame"""
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 8b438eb5d..813656fae 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -101,41 +101,39 @@ class Series(np.ndarray, Picklable, Groupable):
         >>> s[d]    # Valid
     """
     def __new__(cls, data, index=None, dtype=None, copy=False):
-        indexTypes = np.ndarray, Index, list, tuple, type(None)
+        if index is None and isinstance(data, Series):
+            index = data.index
+
+        if index is None:
+            raise Exception('Index cannot be None!')
+
+        indexTypes = ndarray, Index, list, tuple
         if not isinstance(index, indexTypes):
             raise TypeError("Expected index to be in %s; was %s."
                             % (indexTypes, type(index)))
 
+        if not isinstance(index, Index):
+            index = Index(index)
+
+        if len(data) != len(index):
+            raise AssertionError('Lengths of index and values did not match!')
+
         # Make a copy of the data, infer type
-        subarr = np.array(data, dtype=dtype, copy=copy)
+        subarr = array(data, dtype=dtype, copy=copy)
 
-        if not subarr.shape:
-            return np.float64(subarr)
+        if subarr.ndim == 0:
+            return subarr.item()
 
         """
         This is to prevent mixed-type Series getting all casted
         to NumPy string type, e.g. NaN --> '-1#IND'.
         """
         if issubclass(subarr.dtype.type, basestring):
-            subarr = np.array(data, dtype=object, copy=copy)
+            subarr = array(data, dtype=object, copy=copy)
 
         # Change the class of the array to be the subclass type.
         subarr = subarr.view(cls)
-
-        # Deal with the index
-        if index is not None:
-            try:
-                assert(len(data) == len(index))
-            except AssertionError:
-                raise Exception('Lengths of index and values did not match!')
-            if isinstance(index, Index):
-                subarr.index = index
-            else:
-                subarr.index = Index(index)
-        elif hasattr(data, 'index'):
-            subarr.index = data.index
-        else:
-            raise Exception('Index cannot be None!')
+        subarr.index = index
 
         if subarr.index._allDates:
             subarr = subarr.view(TimeSeries)
