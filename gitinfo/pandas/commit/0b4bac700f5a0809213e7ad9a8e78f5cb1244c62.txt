commit 0b4bac700f5a0809213e7ad9a8e78f5cb1244c62
Author: MomIsBestFriend <50263213+MomIsBestFriend@users.noreply.github.com>
Date:   Sat Jan 11 01:48:03 2020 +0200

    TYP: typing annotations (#30901)

diff --git a/pandas/_config/display.py b/pandas/_config/display.py
index 067b7c503..ef319f444 100644
--- a/pandas/_config/display.py
+++ b/pandas/_config/display.py
@@ -1,6 +1,7 @@
 """
 Unopinionated display configuration.
 """
+
 import locale
 import sys
 
@@ -11,7 +12,7 @@ from pandas._config import config as cf
 _initial_defencoding = None
 
 
-def detect_console_encoding():
+def detect_console_encoding() -> str:
     """
     Try to find the most capable encoding supported by the console.
     slightly modified from the way IPython handles the same issue.
diff --git a/pandas/_config/localization.py b/pandas/_config/localization.py
index dd1d4948a..0d68e7837 100644
--- a/pandas/_config/localization.py
+++ b/pandas/_config/localization.py
@@ -12,7 +12,7 @@ from pandas._config.config import options
 
 
 @contextmanager
-def set_locale(new_locale, lc_var=locale.LC_ALL):
+def set_locale(new_locale, lc_var: int = locale.LC_ALL):
     """
     Context manager for temporarily setting a locale.
 
@@ -44,7 +44,7 @@ def set_locale(new_locale, lc_var=locale.LC_ALL):
         locale.setlocale(lc_var, current_locale)
 
 
-def can_set_locale(lc, lc_var=locale.LC_ALL):
+def can_set_locale(lc: str, lc_var: int = locale.LC_ALL) -> bool:
     """
     Check to see if we can set a locale, and subsequently get the locale,
     without raising an Exception.
@@ -58,7 +58,7 @@ def can_set_locale(lc, lc_var=locale.LC_ALL):
 
     Returns
     -------
-    is_valid : bool
+    bool
         Whether the passed locale can be set
     """
 
diff --git a/pandas/compat/numpy/function.py b/pandas/compat/numpy/function.py
index 7158f251a..50f234cbf 100644
--- a/pandas/compat/numpy/function.py
+++ b/pandas/compat/numpy/function.py
@@ -33,13 +33,26 @@ from pandas.util._validators import (
 
 
 class CompatValidator:
-    def __init__(self, defaults, fname=None, method=None, max_fname_arg_count=None):
+    def __init__(
+        self,
+        defaults,
+        fname=None,
+        method: Optional[str] = None,
+        max_fname_arg_count=None,
+    ):
         self.fname = fname
         self.method = method
         self.defaults = defaults
         self.max_fname_arg_count = max_fname_arg_count
 
-    def __call__(self, args, kwargs, fname=None, max_fname_arg_count=None, method=None):
+    def __call__(
+        self,
+        args,
+        kwargs,
+        fname=None,
+        max_fname_arg_count=None,
+        method: Optional[str] = None,
+    ) -> None:
         if args or kwargs:
             fname = self.fname if fname is None else fname
             max_fname_arg_count = (
@@ -300,7 +313,7 @@ validate_transpose = CompatValidator(
 )
 
 
-def validate_window_func(name, args, kwargs):
+def validate_window_func(name, args, kwargs) -> None:
     numpy_args = ("axis", "dtype", "out")
     msg = (
         f"numpy operations are not valid with window objects. "
@@ -315,7 +328,7 @@ def validate_window_func(name, args, kwargs):
             raise UnsupportedFunctionCall(msg)
 
 
-def validate_rolling_func(name, args, kwargs):
+def validate_rolling_func(name, args, kwargs) -> None:
     numpy_args = ("axis", "dtype", "out")
     msg = (
         f"numpy operations are not valid with window objects. "
@@ -330,7 +343,7 @@ def validate_rolling_func(name, args, kwargs):
             raise UnsupportedFunctionCall(msg)
 
 
-def validate_expanding_func(name, args, kwargs):
+def validate_expanding_func(name, args, kwargs) -> None:
     numpy_args = ("axis", "dtype", "out")
     msg = (
         f"numpy operations are not valid with window objects. "
@@ -345,7 +358,7 @@ def validate_expanding_func(name, args, kwargs):
             raise UnsupportedFunctionCall(msg)
 
 
-def validate_groupby_func(name, args, kwargs, allowed=None):
+def validate_groupby_func(name, args, kwargs, allowed=None) -> None:
     """
     'args' and 'kwargs' should be empty, except for allowed
     kwargs because all of
@@ -359,16 +372,15 @@ def validate_groupby_func(name, args, kwargs, allowed=None):
 
     if len(args) + len(kwargs) > 0:
         raise UnsupportedFunctionCall(
-            f"numpy operations are not valid with "
-            f"groupby. Use .groupby(...).{name}() "
-            f"instead"
+            "numpy operations are not valid with groupby. "
+            f"Use .groupby(...).{name}() instead"
         )
 
 
 RESAMPLER_NUMPY_OPS = ("min", "max", "sum", "prod", "mean", "std", "var")
 
 
-def validate_resampler_func(method, args, kwargs):
+def validate_resampler_func(method: str, args, kwargs) -> None:
     """
     'args' and 'kwargs' should be empty because all of
     their necessary parameters are explicitly listed in
@@ -385,7 +397,7 @@ def validate_resampler_func(method, args, kwargs):
             raise TypeError("too many arguments passed in")
 
 
-def validate_minmax_axis(axis):
+def validate_minmax_axis(axis: Optional[int]) -> None:
     """
     Ensure that the axis argument passed to min, max, argmin, or argmax is
     zero or None, as otherwise it will be incorrectly ignored.
