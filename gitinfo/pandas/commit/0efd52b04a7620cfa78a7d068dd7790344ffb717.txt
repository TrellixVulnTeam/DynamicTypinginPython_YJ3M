commit 0efd52b04a7620cfa78a7d068dd7790344ffb717
Author: Jeff Reback <jeff@reback.net>
Date:   Fri Jul 17 18:47:32 2015 -0400

    TST: skip buggy parsing test on win-64

diff --git a/pandas/io/tests/test_cparser.py b/pandas/io/tests/test_cparser.py
index 93d55c654..ceb845073 100644
--- a/pandas/io/tests/test_cparser.py
+++ b/pandas/io/tests/test_cparser.py
@@ -186,6 +186,30 @@ class TestCParser(tm.TestCase):
                 '1,2,3\n'
                 '4,5,6')
 
+        reader = TextReader(StringIO(data), delimiter=',', header=2)
+        header = reader.header
+        expected = [['a', 'b', 'c']]
+        self.assertEqual(header, expected)
+
+        recs = reader.read()
+        expected = {0 : [1, 4], 1 : [2, 5], 2 : [3, 6]}
+        assert_array_dicts_equal(expected, recs)
+
+        # not enough rows
+        self.assertRaises(parser.CParserError, TextReader, StringIO(data),
+                          delimiter=',', header=5, as_recarray=True)
+
+    def test_header_not_enough_lines_as_recarray(self):
+
+        if compat.is_platform_windows():
+            raise nose.SkipTest("segfaults on win-64, only when all tests are run")
+
+        data = ('skip this\n'
+                'skip this\n'
+                'a,b,c\n'
+                '1,2,3\n'
+                '4,5,6')
+
         reader = TextReader(StringIO(data), delimiter=',', header=2,
                             as_recarray=True)
         header = reader.header
@@ -246,6 +270,21 @@ aaaaa,5"""
         self.assertTrue((result[0] == ex_values).all())
         self.assertEqual(result[1].dtype, 'S4')
 
+    def test_numpy_string_dtype_as_recarray(self):
+        data = """\
+a,1
+aa,2
+aaa,3
+aaaa,4
+aaaaa,5"""
+
+        if compat.is_platform_windows():
+            raise nose.SkipTest("segfaults on win-64, only when all tests are run")
+
+        def _make_reader(**kwds):
+            return TextReader(StringIO(data), delimiter=',', header=None,
+                              **kwds)
+
         reader = _make_reader(dtype='S4', as_recarray=True)
         result = reader.read()
         self.assertEqual(result['0'].dtype, 'S4')
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index 62dbb0090..724dcf1de 100755
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -3204,6 +3204,9 @@ class TestCParserHighMemory(ParserTests, tm.TestCase):
         return read_table(*args, **kwds)
 
     def test_compact_ints(self):
+        if compat.is_platform_windows():
+            raise nose.SkipTest("segfaults on win-64, only when all tests are run")
+
         data = ('0,1,0,0\n'
                 '1,1,0,0\n'
                 '0,1,0,1')
@@ -3515,6 +3518,25 @@ class TestCParserLowMemory(ParserTests, tm.TestCase):
                 '1,1,0,0\n'
                 '0,1,0,1')
 
+        result = read_csv(StringIO(data), delimiter=',', header=None,
+                          compact_ints=True)
+        ex_dtype = np.dtype([(str(i), 'i1') for i in range(4)])
+        self.assertEqual(result.to_records(index=False).dtype, ex_dtype)
+
+        result = read_csv(StringIO(data), delimiter=',', header=None,
+			  compact_ints=True,
+                          use_unsigned=True)
+        ex_dtype = np.dtype([(str(i), 'u1') for i in range(4)])
+        self.assertEqual(result.to_records(index=False).dtype, ex_dtype)
+
+    def test_compact_ints_as_recarray(self):
+        if compat.is_platform_windows():
+            raise nose.SkipTest("segfaults on win-64, only when all tests are run")
+
+        data = ('0,1,0,0\n'
+                '1,1,0,0\n'
+                '0,1,0,1')
+        
         result = read_csv(StringIO(data), delimiter=',', header=None,
                           compact_ints=True, as_recarray=True)
         ex_dtype = np.dtype([(str(i), 'i1') for i in range(4)])
@@ -3554,6 +3576,21 @@ one,two
 3,4.5
 4,5.5"""
 
+        result = self.read_csv(StringIO(data), dtype={'one': 'u1', 1: 'S1'})
+        self.assertEqual(result['one'].dtype, 'u1')
+        self.assertEqual(result['two'].dtype, 'object')
+
+    def test_pass_dtype_as_recarray(self):
+        data = """\
+one,two
+1,2.5
+2,3.5
+3,4.5
+4,5.5"""
+
+        if compat.is_platform_windows():
+            raise nose.SkipTest("segfaults on win-64, only when all tests are run")
+
         result = self.read_csv(StringIO(data), dtype={'one': 'u1', 1: 'S1'},
                                as_recarray=True)
         self.assertEqual(result['one'].dtype, 'u1')
@@ -3623,6 +3660,7 @@ one,two
 4,5,6
 7,8,9
 10,11,12"""
+
         result = self.read_csv(StringIO(data), usecols=(0, 1, 2),
                                names=('a', 'b', 'c'),
                                header=None,
diff --git a/pandas/sparse/tests/test_libsparse.py b/pandas/sparse/tests/test_libsparse.py
index 440f4ffb4..7f9e61571 100644
--- a/pandas/sparse/tests/test_libsparse.py
+++ b/pandas/sparse/tests/test_libsparse.py
@@ -8,7 +8,7 @@ from numpy.testing import assert_almost_equal, assert_equal
 import pandas.util.testing as tm
 
 from pandas.core.sparse import SparseSeries
-from pandas import DataFrame
+from pandas import DataFrame, compat
 
 from pandas._sparse import IntIndex, BlockIndex
 import pandas._sparse as splib
@@ -230,6 +230,8 @@ def test_intersect():
         _check_length_exc(xindex.to_int_index(),
                           longer_index.to_int_index())
 
+    if compat.is_platform_windows():
+        raise nose.SkipTest("segfaults on win-64 when all tests are run")
     check_cases(_check_case)
 
 
