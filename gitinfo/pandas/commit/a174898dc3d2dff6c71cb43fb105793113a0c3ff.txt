commit a174898dc3d2dff6c71cb43fb105793113a0c3ff
Author: gfyoung <gfyoung17@gmail.com>
Date:   Sun Mar 6 10:26:42 2016 -0500

    BUG: Allow assignment by indexing with duplicate column names
    
    closes #12344
    
    Author: gfyoung <gfyoung17@gmail.com>
    
    Closes #12498 from gfyoung/dup_name_corrupt and squashes the following commits:
    
    7265d29 [gfyoung] BUG: Allow assignment by indexing with duplicate column names

diff --git a/doc/source/whatsnew/v0.18.0.txt b/doc/source/whatsnew/v0.18.0.txt
index c0a6a8c59..2e492ead5 100644
--- a/doc/source/whatsnew/v0.18.0.txt
+++ b/doc/source/whatsnew/v0.18.0.txt
@@ -1202,3 +1202,4 @@ Bug Fixes
 - Bug when initializing categorical series with a scalar value. (:issue:`12336`)
 - Bug when specifying a UTC ``DatetimeIndex`` by setting ``utc=True`` in ``.to_datetime`` (:issue:`11934`)
 - Bug when increasing the buffer size of CSV reader in ``read_csv`` (:issue:`12494`)
+- Bug when setting columns of a ``DataFrame`` with duplicate column names (:issue:`12344`)
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index f0f5507bc..03fa072db 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -541,7 +541,7 @@ class _NDFrameIndexer(object):
                 if (len(indexer) > info_axis and
                         is_integer(indexer[info_axis]) and
                         all(is_null_slice(idx) for i, idx in enumerate(indexer)
-                            if i != info_axis)):
+                            if i != info_axis) and item_labels.is_unique):
                     self.obj[item_labels[indexer[info_axis]]] = value
                     return
 
diff --git a/pandas/tests/frame/test_nonunique_indexes.py b/pandas/tests/frame/test_nonunique_indexes.py
index 1b24e8290..779747187 100644
--- a/pandas/tests/frame/test_nonunique_indexes.py
+++ b/pandas/tests/frame/test_nonunique_indexes.py
@@ -452,3 +452,19 @@ class TestDataFrameNonuniqueIndexes(tm.TestCase, TestData):
                             dtype=object)
 
         self.assertTrue(np.array_equal(result, expected))
+
+    def test_set_value_by_index(self):
+        # See gh-12344
+        df = DataFrame(np.arange(9).reshape(3, 3).T)
+        df.columns = list('AAA')
+        expected = df.iloc[:, 2]
+
+        df.iloc[:, 0] = 3
+        assert_series_equal(df.iloc[:, 2], expected)
+
+        df = DataFrame(np.arange(9).reshape(3, 3).T)
+        df.columns = [2, float(2), str(2)]
+        expected = df.iloc[:, 1]
+
+        df.iloc[:, 0] = 3
+        assert_series_equal(df.iloc[:, 1], expected)
