commit 839c6f4abd2ddc607bb7a171b45a956a7ee15dc2
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Mar 13 21:56:25 2012 -0400

    BUG: more encoding / unicode hacks related to #795

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index cd6fba022..d8f279807 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1116,36 +1116,45 @@ class DataFrame(NDFrame):
         if buf is None:  # pragma: no cover
             buf = sys.stdout
 
-        print >> buf, str(type(self))
-        print >> buf, self.index.summary()
+        def _put_lines(buf, lines):
+            if any(isinstance(x, unicode) for x in lines):
+                lines = [unicode(x) for x in lines]
+            print >> buf, '\n'.join(lines)
+
+        lines = []
+
+        lines.append(str(type(self)))
+        lines.append(self.index.summary())
 
         if len(self.columns) == 0:
-            print >> buf, 'Empty %s' % type(self).__name__
+            lines.append('Empty %s' % type(self).__name__)
+            _put_lines(buf, lines)
             return
 
         cols = self.columns
 
         if verbose:
-            print >> buf, 'Data columns:'
+            lines.append('Data columns:')
             space = max([len(_stringify(k)) for k in self.columns]) + 4
-            col_counts = []
             counts = self.count()
             assert(len(cols) == len(counts))
             for col, count in counts.iteritems():
-                colstr = _stringify(col)
-                col_counts.append('%s%d  non-null values' %
-                                  (_put_str(colstr, space), count))
-            print >> buf, '\n'.join(col_counts)
+                if not isinstance(col, (unicode, str)):
+                    col = str(col)
+                # colstr = _stringify(col)
+                lines.append(_put_str(col, space) +
+                             '%d  non-null values' % count)
         else:
             if len(cols) <= 2:
-                print >> buf, 'Columns: %s' % repr(cols)
+                lines.append('Columns: %s' % repr(cols))
             else:
-                print >> buf, ('Columns: %s to %s' % (_stringify(cols[0]),
-                                                      _stringify(cols[-1])))
+                lines.append('Columns: %s to %s' % (_stringify(cols[0]),
+                                                    _stringify(cols[-1])))
 
         counts = self.get_dtype_counts()
         dtypes = ['%s(%d)' % k for k in sorted(counts.iteritems())]
-        buf.write('dtypes: %s' % ', '.join(dtypes))
+        lines.append('dtypes: %s' % ', '.join(dtypes))
+        _put_lines(buf, lines)
 
     @property
     def dtypes(self):
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 37a60c848..c1db4d20f 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -144,6 +144,15 @@ class TestDataFrameFormatting(unittest.TestCase):
         df = DataFrame({'foo' : np.inf * np.empty(10)})
         foo = repr(df)
 
+    def test_frame_info_encoding(self):
+        index = ['\'Til There Was You (1997)',
+                 '\xc1 k\xf6ldum klaka (Cold Fever) (1994)']
+        fmt.set_printoptions(max_rows=1)
+        df = DataFrame(columns=['a', 'b', 'c'], index=index)
+        repr(df)
+        repr(df.T)
+        fmt.set_printoptions(max_rows=200)
+
     def test_to_string(self):
         from pandas import read_table
         import re
