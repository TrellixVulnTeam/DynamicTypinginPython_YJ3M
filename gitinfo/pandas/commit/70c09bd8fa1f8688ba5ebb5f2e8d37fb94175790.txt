commit 70c09bd8fa1f8688ba5ebb5f2e8d37fb94175790
Author: Adam Klein <adamklein@gmail.com>
Date:   Fri Feb 17 19:17:00 2012 -0500

    BUG: fixed possible bad freq access, added asobject method

diff --git a/pandas/core/api.py b/pandas/core/api.py
index efff23035..a2d81831a 100644
--- a/pandas/core/api.py
+++ b/pandas/core/api.py
@@ -7,7 +7,8 @@ import pandas.core.datetools as datetools
 
 from pandas.core.common import isnull, notnull, save, load
 from pandas.core.format import set_printoptions
-from pandas.core.index import Index, Int64Index, Factor, MultiIndex
+from pandas.core.index import (Index, Int64Index, Factor, MultiIndex, 
+                               DatetimeIndex)
 from pandas.core.daterange import DateRange
 from pandas.core.series import Series, TimeSeries
 from pandas.core.frame import DataFrame
diff --git a/pandas/core/index.py b/pandas/core/index.py
index a43b8bc19..62e131728 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1052,6 +1052,18 @@ def _dt_index_op(opname):
     return wrapper
 
 class DatetimeIndex(Int64Index):
+    """
+    Immutable ndarray of datetime64 data, represented internally as int64, and
+    which can be boxed to Timestamp objects that are subclasses of datetime and
+    carry metadata such as frequency information.
+
+    Parameters
+    ----------
+    data  : array-like (1-dimensional)
+    dtype : NumPy dtype (default: M8[us])
+    copy  : bool
+        Make a copy of input ndarray
+    """
 
     _is_monotonic  = _wrap_i8_function(lib.is_monotonic_int64)
     _inner_indexer = _join_i8_wrapper(lib.inner_join_indexer_int64)
@@ -1190,6 +1202,12 @@ class DatetimeIndex(Int64Index):
         # to do: cache me?
         return self.values.view('i8')
 
+    def asobject(self):
+        """
+        Unbox to an index of type object
+        """
+        return Index(_dt_box_array(self.asi8), dtype='object')
+
     def asfreq(self, freq):
         if freq is not None:
             failure, regular = lib.conformity_check(self.asi8, freq)
@@ -1220,7 +1238,7 @@ class DatetimeIndex(Int64Index):
             if type(key) == datetime:
                 key = _dt_unbox(key)
             val = arr_idx[key]
-            if self.freq:
+            if hasattr(self, 'freq') and self.freq:
                 # suffer another cache lookup? how to avoid?
                 return _dt_box(val, self.freq,
                                self.first + self._engine.get_loc(val))
diff --git a/pandas/src/reduce.pyx b/pandas/src/reduce.pyx
index a0f18dbab..b80a2aace 100644
--- a/pandas/src/reduce.pyx
+++ b/pandas/src/reduce.pyx
@@ -88,8 +88,6 @@ cdef class Reducer:
             raise ValueError('function does not reduce')
         return result
 
-# TODO: Series grouper that takes bin edges instead of labels
-
 cdef class SeriesBinGrouper:
     '''
     Performs grouping operation according to bin edges, rather than labels
