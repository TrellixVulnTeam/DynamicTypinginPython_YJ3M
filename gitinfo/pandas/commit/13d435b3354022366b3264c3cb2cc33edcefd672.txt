commit 13d435b3354022366b3264c3cb2cc33edcefd672
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Apr 23 15:43:53 2012 -0400

    ENH: add to_timestamp method for PeriodIndex->DatetimeIndex, fix skts bug, don't normalize time away in annual offsets

diff --git a/pandas/core/index.py b/pandas/core/index.py
index cbce35dbf..f9f4f4607 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -338,7 +338,7 @@ class Index(np.ndarray):
             for dt in self:
                 if dt.time() != zero_time or dt.tzinfo is not None:
                     return header + ['%s' % x for x in self]
-                result.append('%d-%d-%d' % (dt.year, dt.month, dt.day))
+                result.append('%d-%.2d-%.2d' % (dt.year, dt.month, dt.day))
             return header + result
 
         values = self.values
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 89b751d52..3b0c5598a 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -20,6 +20,7 @@ from pandas.core.index import (Index, MultiIndex, InvalidIndexError,
                                _ensure_index, _handle_legacy_indexes)
 from pandas.core.indexing import _SeriesIndexer
 from pandas.tseries.index import DatetimeIndex
+from pandas.tseries.period import PeriodIndex
 from pandas.util import py3compat
 from pandas.util.terminal import get_terminal_size
 import pandas.core.common as com
@@ -2527,4 +2528,24 @@ Series.hist = _gfx.hist_series
 # Put here, otherwise monkey-patching in methods fails
 
 class TimeSeries(Series):
-    pass
+
+    def to_timestamp(self, freq='D', how='start', copy=True):
+        """
+        Cast to datetimeindex of timestamps, at *beginning* of period
+
+        Parameters
+        ----------
+        how : {'s', 'e', 'start', 'end'}
+
+        Returns
+        -------
+        DatetimeIndex
+        """
+        new_values = self.values
+        if copy:
+            new_values = new_values.copy()
+
+        new_index = self.index.to_timestamp(freq=freq, how=how)
+        return Series(new_values, index=new_index, name=self.name)
+
+
diff --git a/pandas/src/datetime.pxd b/pandas/src/datetime.pxd
index 291269336..c036ffadd 100644
--- a/pandas/src/datetime.pxd
+++ b/pandas/src/datetime.pxd
@@ -124,6 +124,7 @@ cdef extern from "period.h":
     char *period_to_string2(long value, int freq, char *fmt)
 
     int get_date_info(long ordinal, int freq, date_info *dinfo) except -1
+    double getAbsTime(int, long, long)
 
     int pyear(long ordinal, int freq) except -1
     int pqyear(long ordinal, int freq) except -1
diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index e972d8026..eb872e49f 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -1243,3 +1243,5 @@ def get_period_weekday_arr(ndarray[int64_t] arr, int base, long mult):
 def get_period_doy_arr(ndarray[int64_t] arr, int base, long mult):
     return apply_accessor_arr(pday_of_year, arr, base, mult)
 
+def get_abs_time(freq, dailyDate, originalDate):
+    return getAbsTime(freq, dailyDate, originalDate)
diff --git a/pandas/src/period.c b/pandas/src/period.c
index c28e96d4d..ca31a1074 100644
--- a/pandas/src/period.c
+++ b/pandas/src/period.c
@@ -875,7 +875,7 @@ static freq_conv_func get_asfreq_func(int fromFreq, int toFreq, int forConvert)
     }
 }
 
-static double getAbsTime(int freq, long dailyDate, long originalDate) {
+double getAbsTime(int freq, long dailyDate, long originalDate) {
 
     long startOfDay, periodsPerDay;
 
@@ -891,7 +891,7 @@ static double getAbsTime(int freq, long dailyDate, long originalDate) {
             periodsPerDay = 24*60*60;
             break;
         default:
-            return 24*60*60 - 1;
+		  return 0; // 24*60*60 - 1;
     }
 
     startOfDay = asfreq_DtoHIGHFREQ(dailyDate, 'S', periodsPerDay);
diff --git a/pandas/src/period.h b/pandas/src/period.h
index c0d51a70a..abb73744d 100644
--- a/pandas/src/period.h
+++ b/pandas/src/period.h
@@ -146,5 +146,6 @@ int pweek(long ordinal, int freq);
 int phour(long ordinal, int freq);
 int pminute(long ordinal, int freq);
 int psecond(long ordinal, int freq);
+double getAbsTime(int freq, long dailyDate, long originalDate);
 
 #endif
diff --git a/pandas/src/sandbox.pyx b/pandas/src/sandbox.pyx
index 5aed9e12b..af77a2a2d 100644
--- a/pandas/src/sandbox.pyx
+++ b/pandas/src/sandbox.pyx
@@ -529,3 +529,10 @@ def group_add(ndarray[float64_t, ndim=2] out,
             else:
                 out[i, j] = sumx[i, j]
 
+
+from datetime cimport getAbsTime
+
+
+def get_abs_time(freq, dailyDate, originalDate):
+    return getAbsTime(freq, dailyDate, originalDate)
+
diff --git a/pandas/tseries/api.py b/pandas/tseries/api.py
index 34b6ac688..428e13d63 100644
--- a/pandas/tseries/api.py
+++ b/pandas/tseries/api.py
@@ -4,5 +4,5 @@
 
 
 from pandas.tseries.index import DatetimeIndex, date_range, bdate_range
-from pandas.tseries.period import PeriodIndex, period_range
+from pandas.tseries.period import PeriodIndex, period_range, pnow
 from pandas.tseries.resample import TimeGrouper
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 05ddefa09..4e9d4c0c7 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -847,6 +847,7 @@ class DatetimeIndex(Int64Index):
     @property
     def dayofweek(self):
         return lib.fast_field_accessor(self.asi8, 'dow')
+    weekday = dayofweek
 
     @property
     def dayofyear(self):
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index bdf3d48d9..8078cbe19 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -731,7 +731,9 @@ class BYearEnd(DateOffset, CacheableOffset):
         other = other + relativedelta(years=years)
 
         _, days_in_month = lib.monthrange(other.year, self.month)
-        result = datetime(other.year, self.month, days_in_month)
+        result = datetime(other.year, self.month, days_in_month,
+                          other.hour, other.minute, other.second,
+                          other.microsecond)
 
         if result.weekday() > 4:
             result = result - BDay()
@@ -800,7 +802,9 @@ class YearEnd(DateOffset, CacheableOffset):
         n = self.n
         wkday, days_in_month = lib.monthrange(other.year, self.month)
         if other.month != self.month or other.day != days_in_month:
-            other = datetime(other.year - 1, self.month, days_in_month)
+            other = datetime(other.year - 1, self.month, days_in_month,
+                             other.hour, other.minute, other.second,
+                             other.microsecond)
             if n <= 0:
                 n = n + 1
         other = other + relativedelta(years=n)
@@ -829,7 +833,9 @@ class YearBegin(DateOffset, CacheableOffset):
     def apply(self, other):
         n = self.n
         if other.month != 1 or other.day != 1:
-            other = datetime(other.year, 1, 1)
+            other = datetime(other.year, 1, 1,
+                             other.hour, other.minute, other.second,
+                             other.microsecond)
             if n <= 0:
                 n = n + 1
         other = other + relativedelta(years = n, day=1)
diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index 39ae790f3..516024c2b 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -602,6 +602,10 @@ class PeriodIndex(Int64Index):
 
         return subarr
 
+    @property
+    def is_all_dates(self):
+        return True
+
     def asfreq(self, freq=None, how='E'):
         how = _validate_end_alias(how)
 
@@ -691,14 +695,24 @@ class PeriodIndex(Int64Index):
         # how to represent ourselves to matplotlib
         return datetools._period_box_array(self, self.freq)
 
-    def to_timestamp(self):
+    def to_timestamp(self, freq='D', how='start'):
         """
         Cast to datetimeindex of timestamps, at *beginning* of period
+
+        Parameters
+        ----------
+        how : {'s', 'e', 'start', 'end'}
+
+        Returns
+        -------
+        DatetimeIndex
         """
-        base, mult = _gfc('S')
-        new_data = self.asfreq('S', 'S')
+        base, mult = _gfc(freq)
+        new_data = self.asfreq(freq, how)
         new_data = lib.periodarr_to_dt64arr(new_data.values, base, mult)
-        return DatetimeIndex(new_data, freq=self.freq)
+
+        ts_freq = _period_rule_to_timestamp_rule(self.freq, how=how)
+        return DatetimeIndex(new_data, freq=ts_freq)
 
     def shift(self, n):
         """
@@ -854,6 +868,9 @@ def _validate_end_alias(how):
         raise ValueError('How must be one of S or E')
     return how
 
+def pnow(freq=None):
+    return Period(datetime.now(), freq=freq)
+
 def period_range(start=None, end=None, periods=None, freq='D'):
     """
     Return a fixed frequency datetime index, with day (calendar) as the default
@@ -873,3 +890,13 @@ def period_range(start=None, end=None, periods=None, freq='D'):
     """
     return PeriodIndex(start=start, end=end, periods=periods,
                        freq=freq)
+
+def _period_rule_to_timestamp_rule(freq, how='end'):
+    how = how.lower()
+    if how in ('end', 'e'):
+        return freq
+    else:
+        if freq.startswith('A-') or freq.startswith('BA-'):
+            base, color = freq.split('-')
+            return '%sS-%s' % (base, color)
+        return freq
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index 7b7919a90..49f7e1734 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -7,17 +7,18 @@ Parts derived from scikits.timeseries code, original authors:
 """
 
 from unittest import TestCase
-from datetime import datetime
+from datetime import datetime, timedelta
 
 from numpy.ma.testutils import assert_equal
 
 from pandas.tseries.period import Period, PeriodIndex
-from pandas.tseries.index import DatetimeIndex
+from pandas.tseries.index import DatetimeIndex, date_range
+from pandas.tseries.tools import to_datetime
 
 import pandas.core.datetools as datetools
 import numpy as np
 
-from pandas import Series
+from pandas import Series, TimeSeries
 from pandas.util.testing import assert_series_equal
 
 class TestPeriodProperties(TestCase):
@@ -300,8 +301,8 @@ class TestFreqConversion(TestCase):
         ival_ANOV_to_D_start = Period(freq='D', year=2006, month=12, day=1)
 
         assert_equal(ival_A.asfreq('Q', 'S'), ival_A_to_Q_start)
-        assert_equal(ival_A.asfreq('Q', 'E'), ival_A_to_Q_end)
-        assert_equal(ival_A.asfreq('M', 'S'), ival_A_to_M_start)
+        assert_equal(ival_A.asfreq('Q', 'e'), ival_A_to_Q_end)
+        assert_equal(ival_A.asfreq('M', 's'), ival_A_to_M_start)
         assert_equal(ival_A.asfreq('M', 'E'), ival_A_to_M_end)
         assert_equal(ival_A.asfreq('WK', 'S'), ival_A_to_W_start)
         assert_equal(ival_A.asfreq('WK', 'E'), ival_A_to_W_end)
@@ -311,8 +312,10 @@ class TestFreqConversion(TestCase):
         assert_equal(ival_A.asfreq('D', 'E'), ival_A_to_D_end)
         assert_equal(ival_A.asfreq('H', 'S'), ival_A_to_H_start)
         assert_equal(ival_A.asfreq('H', 'E'), ival_A_to_H_end)
-        assert_equal(ival_A.asfreq('Min', 'S'), ival_A_to_T_start)
-        assert_equal(ival_A.asfreq('Min', 'E'), ival_A_to_T_end)
+        assert_equal(ival_A.asfreq('min', 'S'), ival_A_to_T_start)
+        assert_equal(ival_A.asfreq('min', 'E'), ival_A_to_T_end)
+        assert_equal(ival_A.asfreq('T', 'S'), ival_A_to_T_start)
+        assert_equal(ival_A.asfreq('T', 'E'), ival_A_to_T_end)
         assert_equal(ival_A.asfreq('S', 'S'), ival_A_to_S_start)
         assert_equal(ival_A.asfreq('S', 'E'), ival_A_to_S_end)
 
@@ -836,6 +839,44 @@ class TestPeriodIndex(TestCase):
     def __init__(self, *args, **kwds):
         TestCase.__init__(self, *args, **kwds)
 
+    def test_make_time_series(self):
+        index = PeriodIndex(freq='A', start='1/1/2001', end='12/1/2009')
+        series = Series(1, index=index)
+        self.assert_(isinstance(series, TimeSeries))
+
+    def test_to_timestamp(self):
+        index = PeriodIndex(freq='A', start='1/1/2001', end='12/1/2009')
+        series = Series(1, index=index, name='foo')
+
+        exp_index = date_range('1/1/2001', end='12/31/2009', freq='A-DEC')
+        result = series.to_timestamp('D', 'end')
+        self.assert_(result.index.equals(exp_index))
+        self.assertEquals(result.name, 'foo')
+
+        exp_index = date_range('1/1/2001', end='1/1/2009', freq='AS-DEC')
+        result = series.to_timestamp('D', 'start')
+        self.assert_(result.index.equals(exp_index))
+
+
+        def _get_with_delta(delta, freq='A-DEC'):
+            return date_range(to_datetime('1/1/2001') + delta,
+                              to_datetime('12/31/2009') + delta, freq=freq)
+
+        delta = timedelta(hours=23)
+        result = series.to_timestamp('H', 'end')
+        exp_index = _get_with_delta(delta)
+        self.assert_(result.index.equals(exp_index))
+
+        delta = timedelta(hours=23, minutes=59)
+        result = series.to_timestamp('T', 'end')
+        exp_index = _get_with_delta(delta)
+        self.assert_(result.index.equals(exp_index))
+
+        result = series.to_timestamp('S', 'end')
+        delta = timedelta(hours=23, minutes=59, seconds=59)
+        exp_index = _get_with_delta(delta)
+        self.assert_(result.index.equals(exp_index))
+
     def test_constructor(self):
         ii = PeriodIndex(freq='A', start='1/1/2001', end='12/1/2009')
         assert_equal(len(ii), 9)
diff --git a/setup.py b/setup.py
index e764857d8..3d9e53487 100755
--- a/setup.py
+++ b/setup.py
@@ -374,7 +374,9 @@ engines_ext = Extension('pandas._engines',
                         include_dirs=[np.get_include()])
 
 sandbox_ext = Extension('pandas._sandbox',
-                        sources=[srcpath('sandbox', suffix=suffix)],
+                        sources=[srcpath('sandbox', suffix=suffix),
+                                 'pandas/src/period.c',
+                                 ],
                         include_dirs=[np.get_include()])
 
 cppsandbox_ext = Extension('pandas._cppsandbox',
