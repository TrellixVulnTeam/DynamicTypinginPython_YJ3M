commit e02bd54ea429c0d625f855c3ca9d49723467391c
Author: jreback <jeff@reback.net>
Date:   Sun Dec 7 16:48:19 2014 -0500

    COMPAT: windows dtype compat w.r.t. GH9019

diff --git a/pandas/core/index.py b/pandas/core/index.py
index be17c36e6..0f6828934 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1861,7 +1861,7 @@ class Index(IndexOpsMixin, PandasObject):
 
             starts = np.hstack(([True], tic, [True])).nonzero()[0]
             lab = com._ensure_int64(labels[-1])
-            return lib.get_level_sorter(lab, starts)
+            return lib.get_level_sorter(lab, com._ensure_int64(starts))
 
         if isinstance(self, MultiIndex) and isinstance(other, MultiIndex):
             raise TypeError('Join on level between two MultiIndex objects '
diff --git a/pandas/io/tests/test_json/test_pandas.py b/pandas/io/tests/test_json/test_pandas.py
index 75a6f2248..897760f98 100644
--- a/pandas/io/tests/test_json/test_pandas.py
+++ b/pandas/io/tests/test_json/test_pandas.py
@@ -612,9 +612,10 @@ class TestPandasContainer(tm.TestCase):
         assert_frame_equal(
             frame, pd.read_json(frame.to_json()).apply(converter))
 
-        frame = DataFrame({'a': [timedelta(23), timedelta(seconds=5)],
+        frame = DataFrame({'a': [timedelta(days=23), timedelta(seconds=5)],
                            'b': [1, 2],
                            'c': pd.date_range(start='20130101', periods=2)})
+
         result = pd.read_json(frame.to_json(date_unit='ns'))
         result['a'] = pd.to_timedelta(result.a, unit='ns')
         result['c'] = pd.to_datetime(result.c)
@@ -623,11 +624,12 @@ class TestPandasContainer(tm.TestCase):
     def test_mixed_timedelta_datetime(self):
         frame = DataFrame({'a': [timedelta(23), pd.Timestamp('20130101')]},
                           dtype=object)
-        expected = pd.read_json(frame.to_json(date_unit='ns'),
-                                dtype={'a': 'int64'})
-        assert_frame_equal(DataFrame({'a': [pd.Timedelta(frame.a[0]).value,
-                                            pd.Timestamp(frame.a[1]).value]}),
-                           expected)
+
+        expected = DataFrame({'a': [pd.Timedelta(frame.a[0]).value,
+                                    pd.Timestamp(frame.a[1]).value]})
+        result = pd.read_json(frame.to_json(date_unit='ns'),
+                              dtype={'a': 'int64'})
+        assert_frame_equal(result, expected)
 
     def test_default_handler(self):
         value = object()
