commit 94a4bbe287b501a7d2bf021c0c9fe836d12d3273
Author: Chang She <changshe@gmail.com>
Date:   Sat Nov 3 16:45:26 2012 -0400

    BUG: start_time end_time to_timestamp bugs #2124 #2125 #1764

diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index d7557e38c..773ad4f34 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -4,7 +4,8 @@ import operator
 from datetime import datetime, date
 import numpy as np
 
-from pandas.tseries.frequencies import (get_freq_code as _gfc, to_offset,
+import pandas.tseries.offsets as offsets
+from pandas.tseries.frequencies import (get_freq_code as _gfc,
                                         _month_numbers, FreqGroup)
 from pandas.tseries.index import DatetimeIndex, Int64Index, Index
 from pandas.tseries.tools import parse_time_string
@@ -180,19 +181,20 @@ class Period(object):
 
     @property
     def start_time(self):
-        return self.to_timestamp(how='S')
+        return self.to_timestamp('s', how='S')
 
     @property
     def end_time(self):
-        return self.to_timestamp(how='E')
+        return self.to_timestamp('s', how='E')
 
-    def to_timestamp(self, freq=None, how='S'):
+    def to_timestamp(self, freq='s', how='start'):
         """
-        Return the Timestamp at the start/end of the period
+        Return the Timestamp representation of the Period at the target
+        frequency
 
         Parameters
         ----------
-        freq : string or DateOffset, default frequency of PeriodIndex
+        freq : string or DateOffset, default is second
             Target frequency
         how: str, default 'S' (start)
             'S', 'E'. Can be aliased as case insensitive
@@ -202,20 +204,16 @@ class Period(object):
         -------
         Timestamp
         """
+        how = _validate_end_alias(how)
+
         if freq is None:
             base, mult = _gfc(self.freq)
-            how = _validate_end_alias(how)
-            if how == 'S':
-                base = _freq_mod.get_to_timestamp_base(base)
-                freq = _freq_mod._get_freq_str(base)
-                new_val = self.asfreq(freq, how)
-            else:
-                new_val = self
+            val = self
         else:
             base, mult = _gfc(freq)
-            new_val = self.asfreq(freq, how)
+            val = self.asfreq(freq, how)
 
-        dt64 = plib.period_ordinal_to_dt64(new_val.ordinal, base)
+        dt64 = plib.period_ordinal_to_dt64(val.ordinal, base)
         return Timestamp(dt64)
 
     year = _period_field_accessor('year', 0)
@@ -759,13 +757,13 @@ class PeriodIndex(Int64Index):
         # how to represent ourselves to matplotlib
         return self._get_object_array()
 
-    def to_timestamp(self, freq=None, how='start'):
+    def to_timestamp(self, freq='s', how='start'):
         """
         Cast to DatetimeIndex
 
         Parameters
         ----------
-        freq : string or DateOffset, default 'D'
+        freq : string or DateOffset, default 's'
             Target frequency
         how : {'s', 'e', 'start', 'end'}
 
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index 41dd94962..456017d62 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -272,28 +272,30 @@ class TestPeriodProperties(TestCase):
 
     def test_end_time(self):
         p = Period('2012', freq='A')
-        xp = datetime(2012, 12, 31)
+        xp = datetime(2012, 12, 31, 23, 59, 59)
         self.assertEquals(xp, p.end_time)
 
         p = Period('2012', freq='Q')
-        xp = datetime(2012, 3, 31)
+        xp = datetime(2012, 3, 31, 23, 59, 59)
         self.assertEquals(xp, p.end_time)
 
         p = Period('2012', freq='M')
-        xp = datetime(2012, 1, 31)
+        xp = datetime(2012, 1, 31, 23, 59, 59)
         self.assertEquals(xp, p.end_time)
 
-        xp = datetime(2012, 1, 1)
-        freq_lst = ['D', 'H', 'T', 'S']
-        for f in freq_lst:
-            p = Period('2012', freq=f)
-            self.assertEquals(p.end_time, xp)
+        xp = datetime(2012, 1, 1, 23, 59, 59)
+        p = Period('2012', freq='D')
+        self.assertEquals(p.end_time, xp)
+
+        xp = datetime(2012, 1, 1, 0, 59, 59)
+        p = Period('2012', freq='H')
+        self.assertEquals(p.end_time, xp)
 
         self.assertEquals(Period('2012', freq='B').end_time,
-                          datetime(2011, 12, 30))
+                          datetime(2011, 12, 30, 23, 59, 59))
 
         self.assertEquals(Period('2012', freq='W').end_time,
-                          datetime(2012, 1, 1))
+                          datetime(2012, 1, 1, 23, 59, 59))
 
 
     def test_properties_annually(self):
