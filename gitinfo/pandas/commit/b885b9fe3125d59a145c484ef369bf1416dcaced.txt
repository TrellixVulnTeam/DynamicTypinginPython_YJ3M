commit b885b9fe3125d59a145c484ef369bf1416dcaced
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Nov 4 16:18:03 2011 -0400

    ENH: raise better exception when can't parse date in DateRange, GH #298

diff --git a/pandas/core/daterange.py b/pandas/core/daterange.py
index e7f502228..7abceb47c 100644
--- a/pandas/core/daterange.py
+++ b/pandas/core/daterange.py
@@ -65,6 +65,12 @@ class DateRange(Index):
         start = datetools.to_datetime(start)
         end = datetools.to_datetime(end)
 
+        if start is not None and not isinstance(start, datetime):
+            raise ValueError('Failed to convert %s to datetime' % start)
+
+        if end is not None and not isinstance(end, datetime):
+            raise ValueError('Failed to convert %s to datetime' % end)
+
         # inside cache range. Handle UTC case
         useCache = _will_use_cache(offset)
 
diff --git a/pandas/tests/test_daterange.py b/pandas/tests/test_daterange.py
index f301411a8..073f0d7ff 100644
--- a/pandas/tests/test_daterange.py
+++ b/pandas/tests/test_daterange.py
@@ -294,6 +294,15 @@ class TestDateRange(unittest.TestCase):
         self.assertRaises(Exception, daterange._infer_tzinfo, start, end)
         self.assertRaises(Exception, daterange._infer_tzinfo, end, start)
 
+    def test_date_parse_failure(self):
+        badly_formed_date = '2007/100/1'
+        self.assertRaises(ValueError, DateRange, start=badly_formed_date,
+                          periods=10)
+        self.assertRaises(ValueError, DateRange, end=badly_formed_date,
+                          periods=10)
+        self.assertRaises(ValueError, DateRange, badly_formed_date,
+                          badly_formed_date)
+
 def _skip_if_no_pytz():
     try:
         import pytz
