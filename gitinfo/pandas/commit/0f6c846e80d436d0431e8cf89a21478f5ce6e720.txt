commit 0f6c846e80d436d0431e8cf89a21478f5ce6e720
Author: Jeff Reback <jeff@reback.net>
Date:   Wed Dec 6 19:58:37 2017 -0500

    DOC: whatsnew 0.22.0 edits

diff --git a/doc/source/whatsnew/v0.22.0.txt b/doc/source/whatsnew/v0.22.0.txt
index d34c1f353..64b78a84d 100644
--- a/doc/source/whatsnew/v0.22.0.txt
+++ b/doc/source/whatsnew/v0.22.0.txt
@@ -72,16 +72,7 @@ In previous version, ``inf`` elements were assigned ``NaN`` as their ranks. Now
 
 .. ipython:: python
 
-    In [9]: s = pd.Series([-np.inf, 0, 1, np.nan, np.inf])
-
-    In [10]: s
-    Out[10]:
-    0        -inf
-    1    0.000000
-    2    1.000000
-    3         NaN
-    4         inf
-    dtype: float64
+    s = pd.Series([-np.inf, 0, 1, np.nan, np.inf])
 
 Previous Behavior:
 
@@ -100,28 +91,13 @@ Current Behavior
 
 .. ipython:: python
 
-    In [4]: s.rank()
-    Out[4]:
-    0    1.0
-    1    2.0
-    2    3.0
-    3    NaN
-    4    4.0
-    dtype: float64
+    s.rank()
 
 Furthermore, previously if you rank ``inf`` or ``-inf`` values together with ``NaN`` values, the calculation won't distinguish ``NaN`` from infinity when using 'top' or 'bottom' argument.
 
 .. ipython:: python
 
-    In [14]: s = pd.Series([np.nan, np.nan, -np.inf, -np.inf])
-
-    In [15]: s
-    Out[15]:
-    0    NaN
-    1    NaN
-    2   -inf
-    3   -inf
-    dtype: float64
+    s = pd.Series([np.nan, np.nan, -np.inf, -np.inf])
 
 Previous Behavior:
 
@@ -139,14 +115,7 @@ Current Behavior
 
 .. ipython:: python
 
-    In [4]: s.rank(na_option='top')
-    Out[4]:
-    0    1.5
-    1    1.5
-    2    3.5
-    3    3.5
-    dtype: float64
-
+    s.rank(na_option='top')
 
 .. _whatsnew_0220.enhancements.other:
 
@@ -222,7 +191,7 @@ Deprecations
 
 - ``Series.from_array`` and ``SparseSeries.from_array`` are deprecated. Use the normal constructor ``Series(..)`` and ``SparseSeries(..)`` instead (:issue:`18213`).
 - ``DataFrame.as_matrix`` is deprecated. Use ``DataFrame.values`` instead (:issue:`18458`).
-- ``Series.asobject``, ``DatetimeIndex.asobject``, ``PeriodIndex.asobject`` and ``TimeDeltaIndex.asobject`` have been deprecated. Use '.astype(object)' instead (:issue:`18572`)
+- ``Series.asobject``, ``DatetimeIndex.asobject``, ``PeriodIndex.asobject`` and ``TimeDeltaIndex.asobject`` have been deprecated. Use ``.astype(object)`` instead (:issue:`18572`)
 
 .. _whatsnew_0220.prior_deprecations:
 
@@ -254,7 +223,7 @@ Performance Improvements
 - The overriden ``Timedelta`` properties of days, seconds and microseconds have been removed, leveraging their built-in Python versions instead (:issue:`18242`)
 - ``Series`` construction will reduce the number of copies made of the input data in certain cases (:issue:`17449`)
 - Improved performance of :func:`Series.dt.date` and :func:`DatetimeIndex.date` (:issue:`18058`)
-- Improved performance of ``IntervalIndex.symmetric_difference()`` (:issue:`18475`)
+- Improved performance of :func:`IntervalIndex.symmetric_difference()` (:issue:`18475`)
 - Improved performance of ``DatetimeIndex`` and ``Series`` arithmetic operations with Business-Month and Business-Quarter frequencies (:issue:`18489`)
 
 .. _whatsnew_0220.docs:
@@ -275,7 +244,7 @@ Bug Fixes
 Conversion
 ^^^^^^^^^^
 
-- Bug in :class:`Index` constructor with `dtype='uint64'` where int-like floats were not coerced to :class:`UInt64Index` (:issue:`18400`)
+- Bug in :class:`Index` constructor with ``dtype='uint64'`` where int-like floats were not coerced to :class:`UInt64Index` (:issue:`18400`)
 - Bug in the :class:`DataFrame` constructor in which data containing very large positive or very large negative numbers was causing ``OverflowError`` (:issue:`18584`)
 - Fixed a bug where creating a Series from an array that contains both tz-naive and tz-aware values will result in a Series whose dtype is tz-aware instead of object (:issue:`16406`)
 - Adding a ``Period`` object to a ``datetime`` or ``Timestamp`` object will now correctly raise a ``TypeError`` (:issue:`17983`)
@@ -287,11 +256,11 @@ Indexing
 
 - Bug in :func:`Series.truncate` which raises ``TypeError`` with a monotonic ``PeriodIndex`` (:issue:`17717`)
 - Bug in :func:`DataFrame.groupby` where tuples were interpreted as lists of keys rather than as keys (:issue:`17979`, :issue:`18249`)
-- Bug in :func:`MultiIndex.remove_unused_levels`` which would fill nan values (:issue:`18417`)
+- Bug in :func:`MultiIndex.remove_unused_levels` which would fill nan values (:issue:`18417`)
 - Bug in :func:`MultiIndex.from_tuples`` which would fail to take zipped tuples in python3 (:issue:`18434`)
-- Bug in :class:`Index`` construction from list of mixed type tuples (:issue:`18505`)
+- Bug in :class:`Index` construction from list of mixed type tuples (:issue:`18505`)
 - Bug in :class:`IntervalIndex` where empty and purely NA data was constructed inconsistently depending on the construction method (:issue:`18421`)
-- Bug in ``IntervalIndex.symmetric_difference()`` where the symmetric difference with a non-``IntervalIndex`` did not raise (:issue:`18475`)
+- Bug in :func:`IntervalIndex.symmetric_difference` where the symmetric difference with a non-``IntervalIndex`` did not raise (:issue:`18475`)
 - Bug in indexing a datetimelike ``Index`` that raised ``ValueError`` instead of ``IndexError`` (:issue:`18386`).
 
 
@@ -351,5 +320,5 @@ Categorical
 Other
 ^^^^^
 
-- Improved error message when attempting to use a Python keyword as an identifier in a numexpr query (:issue:`18221`)
+- Improved error message when attempting to use a Python keyword as an identifier in a ``numexpr`` backed query (:issue:`18221`)
 -
