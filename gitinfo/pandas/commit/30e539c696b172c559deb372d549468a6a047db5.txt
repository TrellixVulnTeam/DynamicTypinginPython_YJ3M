commit 30e539c696b172c559deb372d549468a6a047db5
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Nov 11 13:35:04 2011 -0500

    BUG: set index name attribute in single-key groupby, GH #358

diff --git a/RELEASE.rst b/RELEASE.rst
index 3ac6044d2..e589df2e9 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -97,6 +97,7 @@ pandas 0.5.1
   - Added missing bang at top of setup.py (GH #352)
   - Change `is_monotonic` on MultiIndex so it properly compares the tuples
   - Fix MultiIndex outer join logic (GH #351)
+  - Set index name attribute with single-key groupby (GH #358)
 
 Thanks
 ------
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index d84be9071..65fcaa611 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -716,7 +716,8 @@ class SeriesGroupBy(GroupBy):
             except Exception:
                 result = self._aggregate_named(func_or_funcs, *args, **kwargs)
 
-            ret = Series(result)
+            index = Index(sorted(result), name=self.groupings[0].name)
+            ret = Series(result, index=index)
 
         if not self.as_index:  # pragma: no cover
             print 'Warning, ignoring as_index=True'
@@ -728,12 +729,8 @@ class SeriesGroupBy(GroupBy):
             # sort of a kludge
             output = output[self.name]
 
-        if len(self.groupings) > 1:
-            index = self._get_multi_index(mask)
-            return Series(output, index=index)
-        else:
-            name_list = self._get_names()
-            return Series(output, index=name_list[0][1])
+        index = self._get_multi_index(mask)
+        return Series(output, index=index)
 
     def _wrap_applied_output(self, keys, values, not_indexed_same=False):
         if len(keys) == 0:
@@ -972,11 +969,17 @@ class DataFrameGroupBy(GroupBy):
                     wrapper = lambda x: func(x, *args, **kwargs)
                     result[name] = data.apply(wrapper, axis=axis)
 
+        index_name = (self.groupings[0].name
+                      if len(self.groupings) == 1 else None)
+        result_index = Index(sorted(result), name=index_name)
+
         if result:
             if axis == 0:
-                result = DataFrame(result, index=obj.columns).T
+                result = DataFrame(result, index=obj.columns,
+                                   columns=result_index).T
             else:
-                result = DataFrame(result, index=obj.index)
+                result = DataFrame(result, index=obj.index,
+                                   columns=result_index)
         else:
             result = DataFrame(result)
 
@@ -1022,24 +1025,15 @@ class DataFrameGroupBy(GroupBy):
         else:
             output_keys = agg_labels
 
-        if len(self.groupings) > 1:
-            if not self.as_index:
-                result = DataFrame(output, columns=output_keys)
-                group_levels = self._get_group_levels(mask)
-                for i, (name, labels) in enumerate(group_levels):
-                    result.insert(i, name, labels)
-                result = result.consolidate()
-            else:
-                index = self._get_multi_index(mask)
-                result = DataFrame(output, index=index, columns=output_keys)
+        if not self.as_index:
+            result = DataFrame(output, columns=output_keys)
+            group_levels = self._get_group_levels(mask)
+            for i, (name, labels) in enumerate(group_levels):
+                result.insert(i, name, labels)
+            result = result.consolidate()
         else:
-            name_list = self._get_names()
-            name, labels = name_list[0]
-            if not self.as_index:
-                result = DataFrame(output, columns=output_keys)
-                result.insert(0, name, labels)
-            else:
-                result = DataFrame(output, index=labels, columns=output_keys)
+            index = self._get_multi_index(mask)
+            result = DataFrame(output, index=index, columns=output_keys)
 
         if self.axis == 1:
             result = result.T
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 3a816bfd9..d5ff7712c 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -390,17 +390,30 @@ class TestGroupBy(unittest.TestCase):
         for k, v in grouped:
             self.assertEqual(len(v.columns), 2)
 
-        # # tgroupby
-        # grouping = {
-        #     'A' : 0,
-        #     'B' : 1,
-        #     'C' : 0,
-        #     'D' : 1
-        # }
-
-        # grouped = self.frame.tgroupby(grouping.get, np.mean)
-        # self.assertEqual(len(grouped), len(self.frame.index))
-        # self.assertEqual(len(grouped.columns), 2)
+    def test_frame_set_name_single(self):
+        grouped = self.df.groupby('A')
+
+        result = grouped.mean()
+        self.assert_(result.index.name == 'A')
+
+        result = self.df.groupby('A', as_index=False).mean()
+        self.assert_(result.index.name != 'A')
+
+        result = grouped.agg(np.mean)
+        self.assert_(result.index.name == 'A')
+
+        result = grouped.agg({'C' : np.mean, 'D' : np.std})
+        self.assert_(result.index.name == 'A')
+
+        result = grouped['C'].mean()
+        self.assert_(result.index.name == 'A')
+        result = grouped['C'].agg(np.mean)
+        self.assert_(result.index.name == 'A')
+        result = grouped['C'].agg([np.mean, np.std])
+        self.assert_(result.index.name == 'A')
+
+        result = grouped['C'].agg({'foo' : np.mean, 'bar' : np.std})
+        self.assert_(result.index.name == 'A')
 
     def test_multi_iter(self):
         s = Series(np.arange(6))
