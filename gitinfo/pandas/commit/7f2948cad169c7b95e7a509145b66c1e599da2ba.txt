commit 7f2948cad169c7b95e7a509145b66c1e599da2ba
Author: HH-MWB <50187675+HH-MWB@users.noreply.github.com>
Date:   Sat Jan 11 18:11:34 2020 -0500

    replace syntax with f-string (#30919)

diff --git a/pandas/core/arrays/period.py b/pandas/core/arrays/period.py
index 8b49c2186..697d75920 100644
--- a/pandas/core/arrays/period.py
+++ b/pandas/core/arrays/period.py
@@ -298,11 +298,11 @@ class PeriodArray(dtl.DatetimeLikeArrayMixin, dtl.DatelikeOps):
                 if self.freqstr != type.freq:
                     raise TypeError(
                         "Not supported to convert PeriodArray to array with different"
-                        " 'freq' ({0} vs {1})".format(self.freqstr, type.freq)
+                        f" 'freq' ({self.freqstr} vs {type.freq})"
                     )
             else:
                 raise TypeError(
-                    "Not supported to convert PeriodArray to '{0}' type".format(type)
+                    f"Not supported to convert PeriodArray to '{type}' type"
                 )
 
         period_type = ArrowPeriodType(self.freqstr)
diff --git a/pandas/core/dtypes/common.py b/pandas/core/dtypes/common.py
index 5a007f28d..f62f03be9 100644
--- a/pandas/core/dtypes/common.py
+++ b/pandas/core/dtypes/common.py
@@ -194,12 +194,11 @@ def ensure_python_int(value: Union[int, np.integer]) -> int:
     """
     if not is_scalar(value):
         raise TypeError(f"Value needs to be a scalar value, was type {type(value)}")
-    msg = "Wrong type {} for value {}"
     try:
         new_value = int(value)
         assert new_value == value
     except (TypeError, ValueError, AssertionError):
-        raise TypeError(msg.format(type(value), value))
+        raise TypeError(f"Wrong type {type(value)} for value {value}")
     return new_value
 
 
diff --git a/pandas/core/dtypes/dtypes.py b/pandas/core/dtypes/dtypes.py
index 466ed815e..93522abc3 100644
--- a/pandas/core/dtypes/dtypes.py
+++ b/pandas/core/dtypes/dtypes.py
@@ -435,12 +435,11 @@ class CategoricalDtype(PandasExtensionDtype, ExtensionDtype):
             return hash(self) == hash(other)
 
     def __repr__(self) -> str_type:
-        tpl = "CategoricalDtype(categories={data}ordered={ordered})"
         if self.categories is None:
             data = "None, "
         else:
             data = self.categories._format_data(name=type(self).__name__)
-        return tpl.format(data=data, ordered=self.ordered)
+        return f"CategoricalDtype(categories={data}ordered={self.ordered})"
 
     @staticmethod
     def _hash_categories(categories, ordered: Ordered = True) -> int:
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 5ad133f9e..676b78573 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2431,7 +2431,7 @@ class DataFrame(NDFrame):
                 dtype = self.dtypes.iloc[i]
                 col = pprint_thing(col)
 
-                line_no = _put_str(" {num}".format(num=i), space_num)
+                line_no = _put_str(f" {i}", space_num)
                 count = ""
                 if show_counts:
                     count = counts.iloc[i]
