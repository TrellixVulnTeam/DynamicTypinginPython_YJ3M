commit b8e7a359570d2bb59edf9aae7787f5b57b2c16c3
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Sep 18 17:29:45 2012 -0400

    BUG: handle lists too in DataFrame.xs when partially selecting data from DataFrame. close #1796

diff --git a/RELEASE.rst b/RELEASE.rst
index 2cbdfee26..cc72cb169 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -197,6 +197,8 @@ pandas 0.9.0
   - Set index names in DataFrame.from_records (#1744)
   - Fix time series indexing error with duplicates, under and over hash table
     size cutoff (#1821)
+  - Handle list keys in addition to tuples in DataFrame.xs when
+    partial-indexing a hierarchically-indexed DataFrame (#1796)
 
 pandas 0.8.1
 ============
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 74faa567d..e62ae7469 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -2081,7 +2081,12 @@ class MultiIndex(Index):
 
         level = self._get_level_number(level)
 
+        # kludge for #1796
+        if isinstance(key, list):
+            key = tuple(key)
+
         if isinstance(key, tuple) and level == 0:
+
             try:
                 if key in self.levels[0]:
                     indexer = self._get_level_indexer(key, level=level)
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index ba08b3101..580f43e10 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -312,6 +312,22 @@ class TestMultiLevel(unittest.TestCase):
         assert_frame_equal(result, expected)
         assert_frame_equal(result, result2)
 
+        result = self.ymd.xs((2000, 4))
+        expected = self.ymd.ix[2000, 4]
+        assert_frame_equal(result, expected)
+
+        # ex from #1796
+        index = MultiIndex(levels=[['foo', 'bar'], ['one', 'two'], [-1, 1]],
+                           labels=[[0, 0, 0, 0, 1, 1, 1, 1],
+                                   [0, 0, 1, 1, 0, 0, 1, 1],
+                                   [0, 1, 0, 1, 0, 1, 0, 1]])
+        df = DataFrame(np.random.randn(8, 4), index=index,
+                       columns=list('abcd'))
+
+        result = df.xs(['foo', 'one'])
+        expected = df.ix['foo', 'one']
+        assert_frame_equal(result, expected)
+
     def test_xs_level(self):
         result = self.frame.xs('two', level='second')
         expected = self.frame[self.frame.index.get_level_values(1) == 'two']
