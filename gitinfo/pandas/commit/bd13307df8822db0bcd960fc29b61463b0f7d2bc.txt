commit bd13307df8822db0bcd960fc29b61463b0f7d2bc
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Aug 12 14:48:01 2012 -0400

    BUG: fix line plot color assignment issues from 0.8.0 close #1711

diff --git a/RELEASE.rst b/RELEASE.rst
index c7b0a6603..df95d1b05 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -45,6 +45,8 @@ pandas 0.8.2
 
 **Bug fixes**
 
+  - Fix matplotlib auto-color assignment when no custom spectrum passed. Also
+    respect passed color keyword argument (#1711)
   - Fix critical DatetimeIndex.union bugs (#1730, #1719, #1745, #1702)
   - Fix critical DatetimeIndex.intersection bug with unanchored offsets (#1708)
   - Fix MM-YYYY time series indexing case (#1672)
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index eff484628..f495ca042 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -793,7 +793,7 @@ class MPLPlot(object):
             else:
                 style = self.style
 
-        return style
+        return style or None
 
 class KdePlot(MPLPlot):
     def __init__(self, data, **kwargs):
@@ -813,12 +813,19 @@ class KdePlot(MPLPlot):
             ind = np.linspace(min(y) - 0.5 * sample_range,
                 max(y) + 0.5 * sample_range, 1000)
             ax.set_ylabel("Density")
-            plotf(ax, ind, gkde.evaluate(ind), style, label=label, **self.kwds)
+
+            y = gkde.evaluate(ind)
+            kwds = self.kwds.copy()
+            kwds['label'] = label
+            if style is None:
+                args = (ax, ind, y)
+            else:
+                args = (ax, ind, y, style)
+
+            plotf(*args, **kwds)
             ax.grid(self.grid)
 
     def _post_plot_logic(self):
-        df = self.data
-
         if self.subplots and self.legend:
             for ax in self.axes:
                 ax.legend(loc='best')
@@ -871,19 +878,25 @@ class LinePlot(MPLPlot):
             import matplotlib.pyplot as plt
             cycle = ''.join(plt.rcParams.get('axes.color_cycle',
                                              list('bgrcmyk')))
+            has_colors = 'colors' in self.kwds
             colors = self.kwds.pop('colors', cycle)
             lines = []
             labels = []
             x = self._get_xticks(convert_period=True)
 
+            def _maybe_add_color(kwargs, style, i):
+                if (has_colors and
+                    (style is None or re.match('[a-z]+', style) is None)):
+                    kwargs['color'] = colors[i % len(colors)]
+
             plotf = self._get_plot_function()
 
             for i, (label, y) in enumerate(self._iter_data()):
                 ax = self._get_ax(i)
                 style = self._get_style(i, label)
                 kwds = self.kwds.copy()
-                if re.match('[a-z]+', style) is None:
-                    kwds['color'] = colors[i % len(colors)]
+
+                _maybe_add_color(kwds, style, i)
 
                 label = _stringify(label)
 
@@ -892,7 +905,13 @@ class LinePlot(MPLPlot):
                     y = np.ma.array(y)
                     y = np.ma.masked_where(mask, y)
 
-                newline = plotf(ax, x, y, style, label=label, **kwds)[0]
+                kwds['label'] = label
+                if style is None:
+                    args = (ax, x, y)
+                else:
+                    args = (ax, x, y, style)
+
+                newline = plotf(*args, **kwds)[0]
                 lines.append(newline)
                 leg_label = label
                 if self.mark_right and self.on_right(i):
@@ -907,12 +926,19 @@ class LinePlot(MPLPlot):
         import matplotlib.pyplot as plt
         kwargs = kwargs.copy()
         cycle = ''.join(plt.rcParams.get('axes.color_cycle', list('bgrcmyk')))
+
+        has_colors = 'colors' in kwargs
         colors = kwargs.pop('colors', ''.join(cycle))
 
         plotf = self._get_plot_function()
         lines = []
         labels = []
 
+        def _maybe_add_color(kwargs, style, i):
+            if (has_colors and
+                (style is None or re.match('[a-z]+', style) is None)):
+                kwargs['color'] = colors[i % len(colors)]
+
         def to_leg_label(label, i):
             if self.mark_right and self.on_right(i):
                 return label + ' (right)'
@@ -922,8 +948,8 @@ class LinePlot(MPLPlot):
             ax = self._get_ax(0) #self.axes[0]
             style = self.style or ''
             label = com._stringify(self.label)
-            if re.match('[a-z]+', style) is None:
-                kwargs['color'] = colors[0]
+
+            _maybe_add_color(kwargs, style, 0)
 
             newlines = tsplot(data, plotf, ax=ax, label=label, style=self.style,
                              **kwargs)
@@ -937,8 +963,8 @@ class LinePlot(MPLPlot):
                 ax = self._get_ax(i)
                 style = self._get_style(i, col)
                 kwds = kwargs.copy()
-                if re.match('[a-z]+', style) is None:
-                    kwds['color'] = colors[i % len(colors)]
+
+                _maybe_add_color(kwargs, style, i)
 
                 newlines = tsplot(data[col], plotf, ax=ax, label=label,
                                   style=style, **kwds)
