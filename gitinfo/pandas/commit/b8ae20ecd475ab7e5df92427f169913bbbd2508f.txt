commit b8ae20ecd475ab7e5df92427f169913bbbd2508f
Author: Gregory Livschitz <greg15001@gmail.com>
Date:   Sat Apr 9 00:27:27 2016 -0400

    BUG:fixed inconsistent behavior of last_valid_index
    
    closes #12800
    closes #12834

diff --git a/doc/source/whatsnew/v0.18.1.txt b/doc/source/whatsnew/v0.18.1.txt
index 2c2f11493..e2338a25c 100644
--- a/doc/source/whatsnew/v0.18.1.txt
+++ b/doc/source/whatsnew/v0.18.1.txt
@@ -256,7 +256,7 @@ Bug Fixes
 
 
 - Bug in ``.str`` accessor methods may raise ``ValueError`` if input has ``name`` and the result is ``DataFrame`` or ``MultiIndex`` (:issue:`12617`)
-
+- Bug in ``DataFrame.last_valid_index()`` and ``DataFrame.first_valid_index()`` on empty frames (:issue:`12800`)
 
 
 - Bug in ``CategoricalIndex.get_loc`` returns different result from regular ``Index`` (:issue:`12531`)
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 99fa722ae..96a2b87a1 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -3766,12 +3766,18 @@ class DataFrame(NDFrame):
         """
         Return label for first non-NA/null value
         """
+        if len(self) == 0:
+            return None
+
         return self.index[self.count(1) > 0][0]
 
     def last_valid_index(self):
         """
         Return label for last non-NA/null value
         """
+        if len(self) == 0:
+            return None
+
         return self.index[self.count(1) > 0][-1]
 
     # ----------------------------------------------------------------------
diff --git a/pandas/tests/frame/test_timeseries.py b/pandas/tests/frame/test_timeseries.py
index 115e942dc..820076e2c 100644
--- a/pandas/tests/frame/test_timeseries.py
+++ b/pandas/tests/frame/test_timeseries.py
@@ -336,3 +336,8 @@ class TestDataFrameTimeSeriesMethods(tm.TestCase, TestData):
 
         index = frame.last_valid_index()
         self.assertEqual(index, frame.index[-6])
+
+        # GH12800
+        empty = DataFrame()
+        self.assertIsNone(empty.last_valid_index())
+        self.assertIsNone(empty.first_valid_index())
diff --git a/pandas/tests/series/test_timeseries.py b/pandas/tests/series/test_timeseries.py
index 00b5f0148..ee06bc2c3 100644
--- a/pandas/tests/series/test_timeseries.py
+++ b/pandas/tests/series/test_timeseries.py
@@ -19,7 +19,6 @@ from .common import TestData
 
 
 class TestSeriesTimeSeries(TestData, tm.TestCase):
-
     _multiprocess_can_split_ = True
 
     def test_shift(self):
@@ -222,6 +221,7 @@ class TestSeriesTimeSeries(TestData, tm.TestCase):
 
     def test_getitem_setitem_datetimeindex(self):
         from pandas import date_range
+
         N = 50
         # testing with timezone, GH #2785
         rng = date_range('1/1/1990', periods=N, freq='H', tz='US/Eastern')
@@ -304,6 +304,7 @@ class TestSeriesTimeSeries(TestData, tm.TestCase):
         from pytz import timezone as tz
 
         from pandas import date_range
+
         N = 50
         # testing with timezone, GH #2785
         rng = date_range('1/1/1990', periods=N, freq='H', tz='US/Eastern')
@@ -343,6 +344,7 @@ class TestSeriesTimeSeries(TestData, tm.TestCase):
             x)  # handle special case for utc in dateutil
 
         from pandas import date_range
+
         N = 50
         # testing with timezone, GH #2785
         rng = date_range('1/1/1990', periods=N, freq='H', tz='US/Eastern')
@@ -372,6 +374,7 @@ class TestSeriesTimeSeries(TestData, tm.TestCase):
 
     def test_getitem_setitem_periodindex(self):
         from pandas import period_range
+
         N = 50
         rng = period_range('1/1/1990', periods=N, freq='H')
         ts = Series(np.random.randn(N), index=rng)
@@ -460,6 +463,7 @@ class TestSeriesTimeSeries(TestData, tm.TestCase):
 
     def test_asof_more(self):
         from pandas import date_range
+
         s = Series([nan, nan, 1, 2, nan, nan, 3, 4, 5],
                    index=date_range('1/1/2000', periods=9))
 
@@ -605,6 +609,11 @@ class TestSeriesTimeSeries(TestData, tm.TestCase):
         self.assertIsNone(ser.last_valid_index())
         self.assertIsNone(ser.first_valid_index())
 
+        # GH12800
+        empty = Series()
+        self.assertIsNone(empty.last_valid_index())
+        self.assertIsNone(empty.first_valid_index())
+
     def test_mpl_compat_hack(self):
         result = self.ts[:, np.newaxis]
         expected = self.ts.values[:, np.newaxis]
