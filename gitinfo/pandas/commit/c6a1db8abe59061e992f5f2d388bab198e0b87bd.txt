commit c6a1db8abe59061e992f5f2d388bab198e0b87bd
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jul 28 22:35:41 2011 -0400

    ENH: renamed MultiLevelIndex to MultiIndex. implemented slicing, cleanup

diff --git a/pandas/core/index.py b/pandas/core/index.py
index dfedc8043..2521d3220 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -132,7 +132,7 @@ class Index(np.ndarray):
             except Exception, e1:
                 try:
                     return Index(arr_idx[np.asarray(key)])
-                except Exception, e2: # pragma: no cover
+                except Exception: # pragma: no cover
                     raise e1
 
     def format(self):
@@ -383,7 +383,7 @@ C       1
 
 """
 
-class MultiLevelIndex(Index):
+class MultiIndex(Index):
     """
     Implements multi-level, a.k.a. hierarchical, index object for pandas objects
 
@@ -399,16 +399,15 @@ class MultiLevelIndex(Index):
         arr = np.empty(len(labels[0]), dtype=object)
         arr[:] = zip(*labels)
         arr = arr.view(cls)
+        arr.levels = [_ensure_index(lev) for lev in levels]
+        arr.labels = [np.asarray(labs, dtype=np.int32) for labs in labels]
+        arr._verify_integrity()
         return arr
 
-    def __init__(self, levels=None, labels=None):
-        self.levels = [_ensure_index(lev) for lev in levels]
-        self.labels = [np.asarray(labs, dtype=np.int32) for labs in labels]
-        self._verify_integrity()
-
     def __array_finalize__(self, obj):
-        self.labels = getattr(obj, 'labels', None)
-        self.levels = getattr(obj, 'levels', None)
+        pass
+        # self.labels = getattr(obj, 'labels', None)
+        # self.levels = getattr(obj, 'levels', None)
 
     @property
     def nlevels(self):
@@ -434,6 +433,36 @@ class MultiLevelIndex(Index):
         self.levels = [Index(x) for x in levels]
         self.labels = labels
 
+    def __getitem__(self, key):
+        arr_idx = self.view(np.ndarray)
+        if np.isscalar(key):
+            return tuple(self.levels[i][k]
+                         for i, k in enumerate(arr_idx[key]))
+        else:
+            if _is_bool_indexer(key):
+                key = np.asarray(key)
+
+            # easier to ask forgiveness than permission
+            try:
+                new_tuples = arr_idx[key]
+                new_labels = [lab[key] for lab in self.labels]
+            except Exception, e1:
+                try:
+                    key = np.asarray(key)
+                    new_tuples = arr_idx[key]
+                    new_labels = [lab[key] for lab in self.labels]
+                except Exception: # pragma: no cover
+                    raise e1
+
+            # an optimization
+            result = new_tuples.view(MultiIndex)
+            result.levels = self.levels
+            result.labels = new_labels
+            return result
+
+    def __getslice__(self, i, j):
+        return self.__getitem__(slice(i, j))
+
     def format(self, space=2):
         from pandas.core.common import _format, adjoin
 
@@ -449,7 +478,7 @@ class MultiLevelIndex(Index):
 
         return adjoin(2, *padded_levels)
 
-    def sort(self, bylevel=0):
+    def sort(self, level=0):
         pass
 
     @classmethod
@@ -458,9 +487,41 @@ class MultiLevelIndex(Index):
         labels = []
         return cls(levels, labels)
 
+    def equals(self, other):
+        """
+        Determines if two Index objects contain the same elements.
+        """
+        if self is other:
+            return True
+
+        if not isinstance(other, Index):
+            return False
+
+        return np.array_equal(self, other)
+
     def get_loc(self, key):
+        if isinstance(key, tuple):
+            return self._get_tuple_loc(key)
+        else:
+            # slice level 0
+            level = self.levels[0]
+            labels = self.labels[0]
+
+            loc = level.get_loc(key)
+            i = labels.searchsorted(loc, side='left')
+            j = labels.searchsorted(loc, side='right')
+            return slice(i, j)
+
         return self.indexMap[key]
 
+    def _get_tuple_loc(self, tup):
+        zipped = zip(self.levels, tup)
+        indexer = tuple(lev.get_loc(v) for lev, v in zipped)
+        try:
+            return self.indexMap[indexer]
+        except KeyError:
+            raise KeyError(str(tup))
+
     def get_indexer(self, target, method=None):
         """
 
@@ -517,8 +578,7 @@ class MultiLevelIndex(Index):
 
     def truncate(self, before=None, after=None):
         """
-        Slice index between two major axis values, return new
-        MultiLevelIndex
+        Slice index between two major axis values, return new MultiIndex
 
         Parameters
         ----------
@@ -530,7 +590,7 @@ class MultiLevelIndex(Index):
 
         Returns
         -------
-        MultiLevelIndex
+        MultiIndex
         """
         i, j = self._get_axis_bounds(before, after)
         left, right = self._get_label_bounds(i, j)
@@ -541,7 +601,7 @@ class MultiLevelIndex(Index):
         new_labels = [lab[left:right] for lab in self.labels]
         new_labels[0] = new_labels[0] - i
 
-        return MultiLevelIndex(levels=new_levels, labels=new_labels)
+        return MultiIndex(levels=new_levels, labels=new_labels)
 
     def get_major_bounds(self, begin=None, end=None):
         """
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 77e062aa4..a829311f9 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -12,7 +12,7 @@ import numpy as np
 
 from pandas.core.common import (PandasError, _mut_exclusive, _ensure_index,
                                 _pfixed, _default_index, _infer_dtype)
-from pandas.core.index import Index, Factor, MultiLevelIndex
+from pandas.core.index import Index, Factor, MultiIndex
 from pandas.core.internals import BlockManager, make_block
 from pandas.core.frame import DataFrame
 from pandas.core.generic import AxisProperty, NDFrame, Picklable
@@ -670,7 +670,7 @@ class WidePanel(Panel, NDFrame):
         else:
             mask = None
 
-        index = MultiLevelIndex(levels=[self.major_axis,
+        index = MultiIndex(levels=[self.major_axis,
                                         self.minor_axis],
                                 labels=[major_labels,
                                         minor_labels])
@@ -962,13 +962,13 @@ class LongPanel(Panel, DataFrame):
     ----------
     values : ndarray (N x K)
     items : sequence
-    index : MultiLevelIndex
+    index : MultiIndex
 
     Note
     ----
     Constructor should probably not be called directly since it
     requires creating the major and minor axis label vectors for for
-    the MultiLevelIndex
+    the MultiIndex
     """
 
     @property
@@ -1053,7 +1053,7 @@ class LongPanel(Panel, DataFrame):
         items = sorted(data)
         values = np.array([data[k] for k in items]).T
 
-        index = MultiLevelIndex(levels=[major_axis, minor_axis],
+        index = MultiIndex(levels=[major_axis, minor_axis],
                                 labels=[major_labels, minor_labels])
 
         return LongPanel(values, index=index, columns=items)
@@ -1229,7 +1229,7 @@ class LongPanel(Panel, DataFrame):
         new_minor = self.minor_labels.take(indexer)
         new_values = self.values.take(indexer, axis=0)
 
-        new_index = MultiLevelIndex([self.major_axis, self.minor_axis],
+        new_index = MultiIndex([self.major_axis, self.minor_axis],
                                     [new_major, new_minor])
 
         return LongPanel(new_values, columns=self.items,
@@ -1321,7 +1321,7 @@ class LongPanel(Panel, DataFrame):
 
         new_values = self.values.take(indexer, axis=0)
 
-        new_index = MultiLevelIndex([self.minor_axis,
+        new_index = MultiIndex([self.minor_axis,
                                      self.major_axis],
                                     [new_major,
                                      new_minor])
@@ -1772,7 +1772,7 @@ def _make_long_index(major_values, minor_values):
     major_labels, _ = _tseries.getMergeVec(major_values, major_axis.indexMap)
     minor_labels, _ = _tseries.getMergeVec(minor_values, minor_axis.indexMap)
 
-    long_index = MultiLevelIndex(levels=[major_axis, minor_axis],
+    long_index = MultiIndex(levels=[major_axis, minor_axis],
                                  labels=[major_labels, minor_labels])
     return long_index
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index e1f232a6b..de27d2ce2 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -17,7 +17,7 @@ from pandas.core.common import (isnull, notnull, _ensure_index,
                                 _is_bool_indexer, _default_index)
 from pandas.core.daterange import DateRange
 from pandas.core.generic import PandasObject
-from pandas.core.index import Index
+from pandas.core.index import Index, MultiIndex
 import pandas.core.datetools as datetools
 import pandas._tseries as _tseries
 
@@ -274,17 +274,12 @@ class Series(np.ndarray, PandasObject):
               of a sequence, a 'slice' of the series (with corresponding dates)
               will be returned, otherwise a single value.
         """
-        values = self.values
-
         try:
-            # Check that we can even look for this in the index
-            return values[self.index.indexMap[key]]
-        except KeyError:
-            if isinstance(key, (int, np.integer)):
-                return values[key]
-            raise Exception('Requested index not in this series!')
+            if isinstance(self.index, MultiIndex):
+                return self._multilevel_index(key)
+            else:
+                return self._regular_index(key)
         except TypeError:
-            # Could not hash item
             pass
 
         # boolean indexing, need to check that the data are aligned, otherwise
@@ -295,7 +290,8 @@ class Series(np.ndarray, PandasObject):
                                 'Series or raw ndarrays')
 
         def _index_with(indexer):
-            return Series(values[indexer], index=self.index[indexer])
+            return Series(self.values[indexer],
+                          index=self.index[indexer])
 
         # special handling of boolean data with NAs stored in object
         # arrays. Sort of an elaborate hack since we can't represent boolean
@@ -304,7 +300,6 @@ class Series(np.ndarray, PandasObject):
             key = np.asarray(key, dtype=bool)
             return _index_with(key)
 
-
         # TODO: [slice(0, 5, None)] will break if you convert to ndarray,
         # e.g. as requested by np.median
 
@@ -314,6 +309,29 @@ class Series(np.ndarray, PandasObject):
             key = np.asarray(key)
             return _index_with(key)
 
+    def _regular_index(self, key):
+        values = self.values
+
+        try:
+            return values[self.index.get_loc(key)]
+        except KeyError:
+            if isinstance(key, (int, np.integer)):
+                return values[key]
+            raise Exception('Requested index not in this series!')
+
+    def _multilevel_index(self, key):
+        values = self.values
+        try:
+            loc = self.index.get_loc(key)
+            if isinstance(loc, slice):
+                return Series(values[loc], index=self.index[loc])
+            else:
+                return values[loc]
+        except KeyError:
+            if isinstance(key, (int, np.integer)):
+                return values[key]
+            raise Exception('Requested index not in this series!')
+
     def get(self, key, default=None):
         """
         Returns value occupying requested index, default to specified
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index a51928e0b..b9729db1d 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -12,7 +12,7 @@ import operator
 
 from pandas.core.common import (isnull, notnull, _pickle_array, _unpickle_array,
                                 _mut_exclusive, _ensure_index, _try_sort)
-from pandas.core.index import Index, MultiLevelIndex, NULL_INDEX
+from pandas.core.index import Index, MultiIndex, NULL_INDEX
 from pandas.core.series import Series, TimeSeries
 from pandas.core.frame import (DataFrame, extract_index, _prep_ndarray,
                                _default_index, _union_indices)
@@ -1173,8 +1173,8 @@ def stack_sparse_frame(frame):
 
     major_labels = np.concatenate(inds_to_concat)
     stacked_values = np.concatenate(vals_to_concat)
-    index = MultiLevelIndex(levels=[frame.index, frame.columns],
-                            labels=[major_labels, minor_labels])
+    index = MultiIndex(levels=[frame.index, frame.columns],
+                       labels=[major_labels, minor_labels])
 
     lp = LongPanel(stacked_values.reshape((nobs, 1)), index=index,
                    columns=['foo'])
@@ -1423,8 +1423,8 @@ class SparseWidePanel(WidePanel):
         major_labels = inds % N
         minor_labels = inds // N
 
-        index = MultiLevelIndex(levels=[self.major_axis, self.minor_axis],
-                                labels=[major_labels, minor_labels])
+        index = MultiIndex(levels=[self.major_axis, self.minor_axis],
+                           labels=[major_labels, minor_labels])
 
         lp = LongPanel(values, index=index, columns=self.items)
         return lp.sort('major')
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 306d50ac5..99c387e55 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -409,7 +409,7 @@ class HDFStore(object):
         self._write_array(group, 'values', panel.values)
 
     def _read_long(self, group, where=None):
-        from pandas.core.index import MultiLevelIndex
+        from pandas.core.index import MultiIndex
 
         items = _read_index(group, 'items')
         major_axis = _read_index(group, 'major_axis')
@@ -418,8 +418,8 @@ class HDFStore(object):
         minor_labels = _read_array(group, 'minor_labels')
         values = _read_array(group, 'values')
 
-        index = MultiLevelIndex(levels=[major_axis, minor_axis],
-                                labels=[major_labels, minor_labels])
+        index = MultiIndex(levels=[major_axis, minor_axis],
+                           labels=[major_labels, minor_labels])
         return LongPanel(values, index=index, columns=items)
 
     def _write_index(self, group, key, value):
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 5363e96d3..e46d9f3d6 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -5,7 +5,7 @@ import unittest
 
 import numpy as np
 
-from pandas.core.index import Index, Factor, MultiLevelIndex
+from pandas.core.index import Index, Factor, MultiIndex
 import pandas.util.testing as common
 import pandas._tseries as tseries
 
@@ -211,7 +211,7 @@ class TestIndex(unittest.TestCase):
         testit(self.dateIndex)
 
 
-class TestMultiLevelIndex(unittest.TestCase):
+class TestMultiIndex(unittest.TestCase):
 
     def setUp(self):
         major_axis = Index([1, 2, 3, 4])
@@ -220,8 +220,8 @@ class TestMultiLevelIndex(unittest.TestCase):
         major_labels = np.array([0, 0, 1, 2, 3, 3])
         minor_labels = np.array([0, 1, 0, 1, 0, 1])
 
-        self.index = MultiLevelIndex(levels=[major_axis, minor_axis],
-                                     labels=[major_labels, minor_labels])
+        self.index = MultiIndex(levels=[major_axis, minor_axis],
+                                labels=[major_labels, minor_labels])
 
     def test_consistency(self):
         # need to construct an overflow
@@ -232,14 +232,14 @@ class TestMultiLevelIndex(unittest.TestCase):
         minor_labels = np.repeat(range(10), 7000)
 
         # the fact that is works means it's consistent
-        index = MultiLevelIndex(levels=[major_axis, minor_axis],
-                                labels=[major_labels, minor_labels])
+        index = MultiIndex(levels=[major_axis, minor_axis],
+                           labels=[major_labels, minor_labels])
 
         # inconsistent
         major_labels = np.array([0, 0, 1, 1, 1, 2, 2, 3, 3])
         minor_labels = np.array([0, 1, 0, 1, 1, 0, 1, 0, 1])
 
-        self.assertRaises(Exception, MultiLevelIndex,
+        self.assertRaises(Exception, MultiIndex,
                           levels=[major_axis, minor_axis],
                           labels=[major_labels, minor_labels])
 
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 0d74f9357..6ae98ac5c 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -10,7 +10,6 @@ import numpy as np
 
 from pandas.core.api import DataFrame, Index, notnull
 from pandas.core.datetools import bday
-from pandas.core.index import MultiLevelIndex
 from pandas.core.panel import (WidePanel, LongPanel, group_agg, pivot)
 import pandas.core.panel as panelmod
 
