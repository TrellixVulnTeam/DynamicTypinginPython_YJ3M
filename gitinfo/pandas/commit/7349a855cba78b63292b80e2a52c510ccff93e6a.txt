commit 7349a855cba78b63292b80e2a52c510ccff93e6a
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jan 3 14:23:17 2012 -0500

    ENH: avoid data copying in reindex_items where possible

diff --git a/RELEASE.rst b/RELEASE.rst
index 6cb8bccf9..b069457cb 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -88,6 +88,8 @@ pandas 0.7.0
     ``level`` parameter passed (GH #545)
   - Ported skiplist data structure to C to speed up ``rolling_median`` by about
     5-10x in most typical use cases (GH #374)
+  - Some performance enhancements in constructing a Panel from a dict of
+    DataFrame objects
 
 **Bug fixes**
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 4270c0b59..cbb33cf3e 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1605,7 +1605,7 @@ class DataFrame(NDFrame):
             # TODO: speed up on homogeneous DataFrame objects
             new_data = new_data.reindex_indexer(columns, col_indexer, axis=0)
         elif columns is not None and columns is not new_data.axes[0]:
-            new_data = new_data.reindex_items(columns)
+            new_data = new_data.reindex_items(columns, copy=copy)
 
         if copy and new_data is self._data:
             new_data = new_data.copy()
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 342c7fba6..442ffcb6a 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -115,7 +115,7 @@ class Block(object):
             new_values.fill(np.nan)
         return make_block(new_values, self.items, self.ref_items)
 
-    def reindex_items_from(self, new_ref_items):
+    def reindex_items_from(self, new_ref_items, copy=True):
         """
         Reindex to only those items contained in the input set of items
 
@@ -129,7 +129,7 @@ class Block(object):
         new_ref_items, indexer = self.items.reindex(new_ref_items)
         if indexer is None:
             new_items = new_ref_items
-            new_values = self.values.copy()
+            new_values = self.values.copy() if copy else self.values
         else:
             mask = indexer != -1
             masked_idx = indexer[mask]
@@ -719,7 +719,7 @@ class BlockManager(object):
 
         return BlockManager(new_blocks, [new_items] + self.axes[1:])
 
-    def reindex_items(self, new_items):
+    def reindex_items(self, new_items, copy=True):
         """
 
         """
@@ -732,13 +732,20 @@ class BlockManager(object):
         # TODO: this part could be faster (!)
         new_items, indexer = self.items.reindex(new_items)
 
+        # could have some pathological (MultiIndex) issues here
         new_blocks = []
-        for block in self.blocks:
-            newb = block.reindex_items_from(new_items)
-            if len(newb.items) > 0:
-                new_blocks.append(newb)
+        if indexer is None:
+            for blk in self.blocks:
+                if copy:
+                    new_blocks.append(blk.reindex_items_from(new_items))
+                else:
+                    new_blocks.append(blk)
+        else:
+            for block in self.blocks:
+                newb = block.reindex_items_from(new_items, copy=copy)
+                if len(newb.items) > 0:
+                    new_blocks.append(newb)
 
-        if indexer is not None:
             mask = indexer == -1
             if mask.any():
                 extra_items = new_items[mask]
