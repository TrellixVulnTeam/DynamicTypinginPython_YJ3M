commit 3e1f13c794bc363a1b946aba2101f29965cba314
Author: jreback <jeff@reback.net>
Date:   Sun Sep 14 13:09:21 2014 -0400

    TST: addtl tests for TimedeltaIndex/DatetimeIndex sub ops
    DOC: revised timedeltas.rst a bit

diff --git a/doc/source/timedeltas.rst b/doc/source/timedeltas.rst
index 0d829460a..210c4bc8e 100644
--- a/doc/source/timedeltas.rst
+++ b/doc/source/timedeltas.rst
@@ -56,6 +56,10 @@ You can construct a ``Timedelta`` scalar thru various arguments:
    Timedelta(timedelta(days=1,seconds=1))
    Timedelta(np.timedelta64(1,'ms'))
 
+   # negative Timedeltas have this string repr
+   # to be more consistent with datetime.timedelta conventions
+   Timedelta('-1us')
+
    # a NaT
    Timedelta('nan')
    Timedelta('nat')
@@ -160,7 +164,7 @@ Operands can also appear in a reversed order (a singular object operated with a
    df.idxmin()
    df.idxmax()
 
-``min, max, idxmin, idxmax`` operations are supported on Series / DataFrames. A single result will be a ``Timedelta``.
+``min, max, idxmin, idxmax`` operations are supported on Series as well. A scalar result will be a ``Timedelta``.
 
 .. ipython:: python
 
@@ -184,6 +188,7 @@ You can also negate, multiply and use ``abs`` on  ``Timedeltas``
 .. ipython:: python
 
    td1 = Timedelta('-1 days 2 hours 3 seconds')
+   tdi
    -1 * td1
    - td1
    abs(td1)
@@ -193,14 +198,17 @@ You can also negate, multiply and use ``abs`` on  ``Timedeltas``
 Reductions
 ----------
 
-Numeric reduction operation for ``timedelta64[ns]`` will return ``Timedelta`` objects.
+Numeric reduction operation for ``timedelta64[ns]`` will return ``Timedelta`` objects. As usual
+``NaT`` are skipped during evaluation.
 
 .. ipython:: python
 
-   y2 = y.fillna(timedelta(days=-1,seconds=5))
+   y2 = Series(to_timedelta(['-1 days +00:00:05','nat','-1 days +00:00:05','1 days']))
    y2
    y2.mean()
+   y2.median()
    y2.quantile(.1)
+   y2.sum()
 
 .. _timedeltas.timedeltas_convert:
 
@@ -336,6 +344,9 @@ Furthermore you can use partial string selection and the range will be inferred:
 
    s['1 day':'1 day 5 hours']
 
+Operations
+~~~~~~~~~~
+
 Finally, the combination of ``TimedeltaIndex`` with ``DatetimeIndex`` allow certain combination operations that are NaT preserving:
 
 .. ipython:: python
@@ -347,6 +358,9 @@ Finally, the combination of ``TimedeltaIndex`` with ``DatetimeIndex`` allow cert
    (dti + tdi).tolist()
    (dti - tdi).tolist()
 
+Conversions
+~~~~~~~~~~~
+
 Similarly to frequency conversion on a ``Series`` above, you can convert these indices to yield another Index.
 
 .. ipython:: python
@@ -354,11 +368,22 @@ Similarly to frequency conversion on a ``Series`` above, you can convert these i
    tdi / np.timedelta64(1,'s')
    tdi.astype('timedelta64[s]')
 
-Scalars type ops work as well
+Scalars type ops work as well. These can potentially return a *different* type of index.
 
 .. ipython:: python
 
+   # adding or timedelta and date -> datelike
    tdi + Timestamp('20130101')
-   tdi + Timedelta('10 days')
+
+   # subtraction of a date and a timedelta -> datelike
+   # note that trying to subtract a date from a Timedelta will raise an exception
    (Timestamp('20130101') - tdi).tolist()
+
+   # timedelta + timedelta -> timedelta
+   tdi + Timedelta('10 days')
+
+   # division can result in a Timedelta if the divisor is an integer
+   tdi / 2
+
+   # or a Float64Index if the divisor is a Timedelta
    tdi / tdi[0]
diff --git a/doc/source/v0.15.0.txt b/doc/source/v0.15.0.txt
index fcec26f7f..bd7a95a2a 100644
--- a/doc/source/v0.15.0.txt
+++ b/doc/source/v0.15.0.txt
@@ -18,7 +18,7 @@ users upgrade to this version.
   - The ``Categorical`` type was integrated as a first-class pandas type, see :ref:`here <whatsnew_0150.cat>`
   - New scalar type ``Timedelta``, and a new index type ``TimedeltaIndex``, see :ref:`here <whatsnew_0150.timedeltaindex>`
   - New datetimelike properties accessor ``.dt`` for Series, see :ref:`Datetimelike Properties <whatsnew_0150.dt>`
-  - Split indexing documentation into :ref:`Indexing and Selecing Data <indexing>` and :ref:`MultiIndex / Advanced Indexing <advanced>`
+  - Split indexing documentation into :ref:`Indexing and Selecting Data <indexing>` and :ref:`MultiIndex / Advanced Indexing <advanced>`
   - API change in using Indexes in set operations, see :ref:`here <whatsnew_0150.index_set_ops>`
   - Internal refactoring of the ``Index`` class to no longer sub-class ``ndarray``, see :ref:`Internal Refactoring <whatsnew_0150.refactoring>`
   - dropping support for ``PyTables`` less than version 3.0.0, and ``numexpr`` less than version 2.1 (:issue:`7990`)
@@ -511,6 +511,10 @@ Consruct a scalar
    Timedelta('15.5us')
    Timedelta('1 hour 15.5us')
 
+   # negative Timedeltas have this string repr
+   # to be more consistent with datetime.timedelta conventions
+   Timedelta('-1us')
+
    # a NaT
    Timedelta('nan')
 
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 9140ef250..231a1a10d 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -2063,9 +2063,9 @@ class Index(IndexOpsMixin, PandasObject):
 
         def _make_invalid_op(opstr):
 
-            def _invalid_op(self, other):
+            def _invalid_op(self, other=None):
                 raise TypeError("cannot perform {opstr} with this index type: {typ}".format(opstr=opstr,
-                                                                                         typ=type(self)))
+                                                                                            typ=type(self)))
             return _invalid_op
 
         cls.__mul__ = cls.__rmul__ = _make_invalid_op('__mul__')
diff --git a/pandas/tseries/base.py b/pandas/tseries/base.py
index 1d9a062c6..78ed19a70 100644
--- a/pandas/tseries/base.py
+++ b/pandas/tseries/base.py
@@ -312,10 +312,10 @@ class DatetimeIndexOpsMixin(object):
         return get_reso_string(self._resolution)
 
     def _add_datelike(self, other):
-        return NotImplemented
+        raise NotImplementedError
 
     def _sub_datelike(self, other):
-        return NotImplemented
+        raise NotImplementedError
 
     def __add__(self, other):
         from pandas.core.index import Index
@@ -326,7 +326,7 @@ class DatetimeIndexOpsMixin(object):
         elif isinstance(self, TimedeltaIndex) and isinstance(other, Index):
             if hasattr(other,'_add_delta'):
                 return other._add_delta(self)
-            raise TypeError("cannot perform a numeric operation with a TimedeltaIndex and {typ}".format(typ=type(other)))
+            raise TypeError("cannot add TimedeltaIndex and {typ}".format(typ=type(other)))
         elif isinstance(other, Index):
             return self.union(other)
         elif isinstance(other, (DateOffset, timedelta, np.timedelta64, tslib.Timedelta)):
@@ -344,8 +344,12 @@ class DatetimeIndexOpsMixin(object):
         from pandas.tseries.offsets import DateOffset
         if isinstance(other, TimedeltaIndex):
             return self._add_delta(-other)
+        elif isinstance(self, TimedeltaIndex) and isinstance(other, Index):
+            if not isinstance(other, TimedeltaIndex):
+                raise TypeError("cannot subtract TimedeltaIndex and {typ}".format(typ=type(other)))
+            return self._add_delta(-other)
         elif isinstance(other, Index):
-            return self.diff(other)
+            return self.difference(other)
         elif isinstance(other, (DateOffset, timedelta, np.timedelta64, tslib.Timedelta)):
             return self._add_delta(-other)
         elif com.is_integer(other):
diff --git a/pandas/tseries/tdi.py b/pandas/tseries/tdi.py
index 01a89a196..4822be828 100644
--- a/pandas/tseries/tdi.py
+++ b/pandas/tseries/tdi.py
@@ -327,6 +327,9 @@ class TimedeltaIndex(DatetimeIndexOpsMixin, Int64Index):
             result[mask] = tslib.iNaT
         return DatetimeIndex(result,name=self.name,copy=False)
 
+    def _sub_datelike(self, other):
+        raise TypeError("cannot subtract a datelike from a TimedeltaIndex")
+
     def _format_native_types(self, na_rep=u('NaT'),
                              date_format=None, **kwargs):
         from pandas.core.format import Timedelta64Formatter
diff --git a/pandas/tseries/tests/test_base.py b/pandas/tseries/tests/test_base.py
index 58b126a7e..bf64b1bd7 100644
--- a/pandas/tseries/tests/test_base.py
+++ b/pandas/tseries/tests/test_base.py
@@ -445,6 +445,8 @@ Length: 3, Freq: None"""
 
         self.assertRaises(TypeError, lambda : tdi - dt)
         self.assertRaises(TypeError, lambda : tdi - dti)
+        self.assertRaises(TypeError, lambda : td - dt)
+        self.assertRaises(TypeError, lambda : td - dti)
 
         result = dt-dti
         expected = TimedeltaIndex(['0 days','-1 days','-2 days'])
