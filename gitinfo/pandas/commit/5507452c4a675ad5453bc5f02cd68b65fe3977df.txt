commit 5507452c4a675ad5453bc5f02cd68b65fe3977df
Author: Andrew Wieteska <48889395+arw2019@users.noreply.github.com>
Date:   Wed Jul 1 14:28:31 2020 -0400

    Test for pd.to_sql column error if data contains -np.inf (#34493)
    
    * TST: pd.to_sql for dataframes with -np.inf (#34431)
    
    * DOC: updated what's new (#34431)
    
    * DOC: improved entry (#34431)
    
    * TST: moved to _TestSQLAlchemy + added round trips
    
    * TST: rename + add comment with GH issue #
    
    * TST: rewrote using pytest.mark.parametrize for arg to DataFrame
    
    * TST: removed underscore from _input
    
    * DOC: added double backtick to np.inf & removed extraneous space
    
    * TST: pd.to_sql for dataframes with -np.inf (#34431)
    
    * DOC: updated what's new (#34431)
    
    * DOC: improved entry (#34431)
    
    * TST: moved to _TestSQLAlchemy + added round trips
    
    * TST: rename + add comment with GH issue #
    
    * TST: rewrote using pytest.mark.parametrize for arg to DataFrame
    
    * TST: removed underscore from _input
    
    * DOC: added double backtick to np.inf & removed extraneous space
    
    * BUG: add catch for MySQL error with np.inf
    
    * use regex for string match + add runtime import
    
    * clean up regex
    
    * TST: update to catch error for -np.inf with MySQL
    
    * DOC: resolved conflict in whatsnew
    
    * TST: update test_to_sql_with_neg_npinf
    
    * fixed error handler syntax in SQLDatabase.to_sql
    
    * fixed error handler syntax in SQLDatabase.to_sql
    
    * TST: added an xfail test for npinf entries with mysql
    
    * fixed imports
    
    * added reference to GH issue
    
    * fixed test_to_sql_with_npinf error catch
    
    * fixed spelling error in message (can not -> cannot)
    
    * DOC: added info re MySQL ValueError to whatsnew
    
    * fixed variable name in to_sql
    
    * replaced sqlalchemy's dialect.name with flavor
    
    * fixed typo in test_to_sql-with-npinf

diff --git a/doc/source/whatsnew/v1.1.0.rst b/doc/source/whatsnew/v1.1.0.rst
index 2fac8d1a8..8c6add92e 100644
--- a/doc/source/whatsnew/v1.1.0.rst
+++ b/doc/source/whatsnew/v1.1.0.rst
@@ -1044,6 +1044,7 @@ I/O
 - Bug in :meth:`HDFStore.append_to_multiple` was raising a ``ValueError`` when the min_itemsize parameter is set (:issue:`11238`)
 - Bug in :meth:`~HDFStore.create_table` now raises an error when `column` argument was not specified in `data_columns` on input (:issue:`28156`)
 - :meth:`read_json` now could read line-delimited json file from a file url while `lines` and `chunksize` are set.
+- Bug in :meth:`DataFrame.to_sql` when reading DataFrames with ``-np.inf`` entries with MySQL now has a more explicit ``ValueError`` (:issue:`34431`)
 
 Plotting
 ^^^^^^^^
diff --git a/pandas/io/sql.py b/pandas/io/sql.py
index b13760847..9177696ca 100644
--- a/pandas/io/sql.py
+++ b/pandas/io/sql.py
@@ -1391,7 +1391,20 @@ class SQLDatabase(PandasSQL):
             dtype=dtype,
         )
         table.create()
-        table.insert(chunksize, method=method)
+
+        from sqlalchemy import exc
+
+        try:
+            table.insert(chunksize, method=method)
+        except exc.SQLAlchemyError as err:
+            # GH34431
+            msg = "(1054, \"Unknown column 'inf' in 'field list'\")"
+            err_text = str(err.orig)
+            if re.search(msg, err_text):
+                raise ValueError("inf cannot be used with MySQL") from err
+            else:
+                raise err
+
         if not name.isdigit() and not name.islower():
             # check for potentially case sensitivity issues (GH7815)
             # Only check when name is not a number and name is not lower case
diff --git a/pandas/tests/io/test_sql.py b/pandas/tests/io/test_sql.py
index a07e7a74b..0991fae39 100644
--- a/pandas/tests/io/test_sql.py
+++ b/pandas/tests/io/test_sql.py
@@ -1813,6 +1813,24 @@ class _TestSQLAlchemy(SQLAlchemyMixIn, PandasSQLTest):
         DataFrame({"test_foo_data": [0, 1, 2]}).to_sql("test_foo_data", self.conn)
         main(self.conn)
 
+    @pytest.mark.parametrize(
+        "input",
+        [{"foo": [np.inf]}, {"foo": [-np.inf]}, {"foo": [-np.inf], "infe0": ["bar"]}],
+    )
+    def test_to_sql_with_negative_npinf(self, input):
+        # GH 34431
+
+        df = pd.DataFrame(input)
+
+        if self.flavor == "mysql":
+            msg = "inf cannot be used with MySQL"
+            with pytest.raises(ValueError, match=msg):
+                df.to_sql("foobar", self.conn, index=False)
+        else:
+            df.to_sql("foobar", self.conn, index=False)
+            res = sql.read_sql_table("foobar", self.conn)
+            tm.assert_equal(df, res)
+
     def test_temporary_table(self):
         test_data = "Hello, World!"
         expected = DataFrame({"spam": [test_data]})
