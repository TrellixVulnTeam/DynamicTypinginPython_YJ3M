commit 24ed9ed8c9502ebae552d691d815e1c58a2c0fd8
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Oct 21 00:29:42 2011 -0400

    BUG: implement MultiIndex.diff, add & and | for intersection/union, GH #260

diff --git a/RELEASE.rst b/RELEASE.rst
index 840f7cd61..b32616965 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -114,6 +114,7 @@ feedback on the library.
   - Add inner join option to `DataFrame.join` when joining on key(s) (GH #248)
   - Can select set of DataFrame columns by passing a list to `__getitem__` (GH
     #253)
+  - Can use & and | to intersection / union Index objects, respectively
 
 **Improvements to existing features**
 
@@ -158,6 +159,7 @@ feedback on the library.
   - `DataFrame.iteritems` and `DataFrame._series` not assigning name attribute
   - Panel.__repr__ raised exception on length-0 major/minor axes
   - `DataFrame.join` on key with empty DataFrame produced incorrect columns
+  - Implemented `MultiIndex.diff` (GH #260)
   - `Int64Index.take` and `MultiIndex.take` lost name field, fix downstream
     issue GH #262
   - `read_csv` / `read_table` fixes
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 4a59722a1..a692da421 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -259,6 +259,15 @@ class Index(np.ndarray):
     __le__ = _indexOp('__le__')
     __ge__ = _indexOp('__ge__')
 
+    def __sub__(self, other):
+        return self.diff(other)
+
+    def __and__(self, other):
+        return self.intersection(other)
+
+    def __or__(self, other):
+        return self.union(other)
+
     def union(self, other):
         """
         Form the union of two Index objects and sorts if possible
@@ -363,8 +372,6 @@ class Index(np.ndarray):
         theDiff = sorted(set(self) - set(otherArr))
         return Index(theDiff)
 
-    __sub__ = diff
-
     def get_loc(self, key):
         """
         Get integer location for requested label
@@ -1514,6 +1521,23 @@ class MultiIndex(Index):
         uniq_tuples = sorted(set(self_tuples) & set(other_tuples))
         return MultiIndex.from_arrays(zip(*uniq_tuples), sortorder=0)
 
+    def diff(self, other):
+        """
+        Compute sorted set difference of two MultiIndex objects
+
+        Returns
+        -------
+        diff : MultiIndex
+        """
+        self._assert_can_do_setop(other)
+
+        if self.equals(other):
+            return self[:0]
+
+        difference = sorted(set(self.values) - set(other.values))
+        return MultiIndex.from_tuples(difference, sortorder=0,
+                                      names=self.names)
+
     def _assert_can_do_setop(self, other):
         if not isinstance(other, MultiIndex):
             raise TypeError('can only call with other hierarchical '
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 43c1b44c1..9bb2a048f 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -863,7 +863,7 @@ class TestMultiIndex(unittest.TestCase):
         piece1 = self.index[:5][::-1]
         piece2 = self.index[3:]
 
-        the_union = piece1.union(piece2)
+        the_union = piece1 | piece2
 
         tups = sorted(self.index.get_tuple_index())
         expected = MultiIndex.from_tuples(tups)
@@ -884,7 +884,7 @@ class TestMultiIndex(unittest.TestCase):
         piece1 = self.index[:5][::-1]
         piece2 = self.index[3:]
 
-        the_int = piece1.intersection(piece2)
+        the_int = piece1 & piece2
         tups = sorted(self.index[3:5].get_tuple_index())
         expected = MultiIndex.from_tuples(tups)
         self.assert_(the_int.equals(expected))
@@ -896,6 +896,21 @@ class TestMultiIndex(unittest.TestCase):
         self.assertRaises(TypeError, self.index.intersection,
                           self.index.get_tuple_index())
 
+    def test_diff(self):
+        first = self.index
+        result = first - self.index[-3:]
+        expected = MultiIndex.from_tuples(sorted(self.index[:-3].values),
+                                          sortorder=0,
+                                          names=self.index.names)
+
+        self.assert_(isinstance(result, MultiIndex))
+        self.assert_(result.equals(expected))
+        self.assertEqual(result.names, self.index.names)
+
+        result = first - first
+        expected = first[:0]
+        self.assert_(result.equals(expected))
+
     def test_argsort(self):
         result = self.index.argsort()
         expected = self.index.get_tuple_index().argsort()
