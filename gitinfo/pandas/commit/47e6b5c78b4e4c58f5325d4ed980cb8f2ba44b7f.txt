commit 47e6b5c78b4e4c58f5325d4ed980cb8f2ba44b7f
Author: Martin Blais <blais@furius.ca>
Date:   Thu Mar 22 11:05:33 2012 -0400

    Added basic support for fixed-width fields, as per R's read_fwf.

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index a3da3cb91..79f8810c5 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -74,24 +74,31 @@ Read CSV (comma-separated) file into DataFrame
 %s
 """ % (_parser_params % _csv_sep)
 
-_read_csv_doc = """
-Read CSV (comma-separated) file into DataFrame
-
-%s
-""" % (_parser_params % _csv_sep)
-
 _read_table_doc = """
 Read general delimited file into DataFrame
 
 %s
 """ % (_parser_params % _table_sep)
 
-@Appender(_read_csv_doc)
-def read_csv(filepath_or_buffer, sep=',', header=0, index_col=None, names=None,
-             skiprows=None, na_values=None, parse_dates=False,
-             date_parser=None, nrows=None, iterator=False, chunksize=None,
-             skip_footer=0, converters=None, verbose=False, delimiter=None,
-             encoding=None):
+
+_fwf_widths = """widths : list of tuples/lists, giving the widths of
+    the fixed-width fields of each line, as [from, to] (inclusively)
+"""
+
+_read_fwf_doc = """
+Read a table of fixed-width formatted lines into DataFrame
+(Note: this reader ignores the header field.)
+
+%s
+""" % (_parser_params % _fwf_widths)
+
+
+def _read(cls, filepath_or_buffer, sep=',', header=0, index_col=None, names=None,
+          skiprows=None, na_values=None, parse_dates=False,
+          date_parser=None, nrows=None, iterator=False, chunksize=None,
+          skip_footer=0, converters=None, verbose=False, delimiter=None,
+          encoding=None):
+    "Generic reader of line files."
     if hasattr(filepath_or_buffer, 'read'):
         f = filepath_or_buffer
     else:
@@ -107,17 +114,17 @@ def read_csv(filepath_or_buffer, sep=',', header=0, index_col=None, names=None,
     if date_parser is not None:
         parse_dates = True
 
-    parser = TextParser(f, header=header, index_col=index_col,
-                        names=names, na_values=na_values,
-                        parse_dates=parse_dates,
-                        date_parser=date_parser,
-                        skiprows=skiprows,
-                        delimiter=sep,
-                        chunksize=chunksize,
-                        skip_footer=skip_footer,
-                        converters=converters,
-                        verbose=verbose,
-                        encoding=encoding)
+    parser = cls(f, header=header, index_col=index_col,
+                 names=names, na_values=na_values,
+                 parse_dates=parse_dates,
+                 date_parser=date_parser,
+                 skiprows=skiprows,
+                 delimiter=sep,
+                 chunksize=chunksize,
+                 skip_footer=skip_footer,
+                 converters=converters,
+                 verbose=verbose,
+                 encoding=encoding)
 
     if nrows is not None:
         return parser.get_chunk(nrows)
@@ -126,19 +133,55 @@ def read_csv(filepath_or_buffer, sep=',', header=0, index_col=None, names=None,
 
     return parser.get_chunk()
 
+@Appender(_read_csv_doc)
+def read_csv(filepath_or_buffer, sep=',', header=0, index_col=None, names=None,
+             skiprows=None, na_values=None, parse_dates=False,
+             date_parser=None, nrows=None, iterator=False, chunksize=None,
+             skip_footer=0, converters=None, verbose=False, delimiter=None,
+             encoding=None):
+
+    return _read(TextParser,
+                 filepath_or_buffer, sep=sep, header=header,
+                 skiprows=skiprows, index_col=index_col,
+                 na_values=na_values, date_parser=date_parser,
+                 names=names, parse_dates=parse_dates,
+                 nrows=nrows, iterator=iterator, chunksize=chunksize,
+                 skip_footer=skip_footer, converters=converters,
+                 verbose=verbose, delimiter=delimiter)
+
 @Appender(_read_table_doc)
 def read_table(filepath_or_buffer, sep='\t', header=0, index_col=None,
                names=None, skiprows=None, na_values=None, parse_dates=False,
                date_parser=None, nrows=None, iterator=False, chunksize=None,
                skip_footer=0, converters=None, verbose=False, delimiter=None,
                encoding=None):
-    return read_csv(filepath_or_buffer, sep=sep, header=header,
-                    skiprows=skiprows, index_col=index_col,
-                    na_values=na_values, date_parser=date_parser,
-                    names=names, parse_dates=parse_dates,
-                    nrows=nrows, iterator=iterator, chunksize=chunksize,
-                    skip_footer=skip_footer, converters=converters,
-                    verbose=verbose, delimiter=delimiter, encoding=None)
+
+    return _read(TextParser,
+                 filepath_or_buffer, sep=sep, header=header,
+                 skiprows=skiprows, index_col=index_col,
+                 na_values=na_values, date_parser=date_parser,
+                 names=names, parse_dates=parse_dates,
+                 nrows=nrows, iterator=iterator, chunksize=chunksize,
+                 skip_footer=skip_footer, converters=converters,
+                 verbose=verbose, delimiter=delimiter, encoding=None)
+
+@Appender(_read_fwf_doc)
+def read_fwf(filepath_or_buffer, widths, index_col=None,
+             names=None, skiprows=None, na_values=None, parse_dates=False,
+             date_parser=None, nrows=None, iterator=False, chunksize=None,
+             skip_footer=0, converters=None, verbose=False,
+             encoding=None):
+
+    return _read(FixedWidthFieldParser,
+                 filepath_or_buffer, sep=None, header=None,
+                 skiprows=skiprows, index_col=index_col,
+                 na_values=na_values, date_parser=date_parser,
+                 names=names, parse_dates=parse_dates,
+                 nrows=nrows, iterator=iterator, chunksize=chunksize,
+                 skip_footer=skip_footer, converters=converters,
+                 verbose=verbose, delimiter=widths, encoding=None)
+
+
 
 def read_clipboard(**kwargs):  # pragma: no cover
     """
@@ -188,6 +231,7 @@ class TextParser(object):
     Parameters
     ----------
     data : file-like object or list
+    delimiter : separator character to use
     names : sequence, default
     header : int, default 0
         Row to use to parse column labels. Defaults to the first row. Prior
@@ -573,6 +617,39 @@ def _convert_types(values, na_values):
 
     return result, na_count
 
+
+class FixedWidthReader(object):
+    """
+    A reader of fixed-width lines.
+    """
+    def __init__(self, f, colspecs):
+        self.f = f
+        self.colspecs = colspecs
+
+        assert isinstance(colspecs, (tuple, list))
+        for colspec in colspecs:
+            assert isinstance(colspec, (tuple, list))
+            assert len(colspec) == 2
+            assert isinstance(colspec[0], int)
+            assert isinstance(colspec[1], int)
+
+    def next(self):
+        line = self.f.next()
+        return [line[fromm:to+1] for (fromm, to) in self.colspecs]
+      
+
+class FixedWidthFieldParser(TextParser):
+    """
+    Specialization that Converts fixed-width fields into DataFrames.
+    See TextParser for details.
+
+    Note: this class is hijacking the 'delimiter' attribute to store the list of
+    column specs.
+    """
+    def _make_reader(self, f):
+        self.data = FixedWidthReader(f, self.delimiter)
+
+
 #-------------------------------------------------------------------------------
 # ExcelFile class
 
@@ -793,7 +870,7 @@ class ExcelWriter(object):
             sheet = self.book.create_sheet()
             sheet.title = sheet_name
             row_idx = 0
-        
+
         conv_row = []
         for val in row:
             if isinstance(val, np.int64):
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index 21173757d..081b114c1 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -18,7 +18,7 @@ from numpy import nan
 import numpy as np
 
 from pandas import DataFrame, Index, isnull
-from pandas.io.parsers import read_csv, read_table, ExcelFile, TextParser
+from pandas.io.parsers import read_csv, read_table, read_fwf, ExcelFile, TextParser
 from pandas.util.testing import assert_almost_equal, assert_frame_equal
 import pandas._tseries as lib
 from pandas.util import py3compat
@@ -719,6 +719,27 @@ bar"""
                                   na_values=[-1,'',None])
         assert_frame_equal(result, result2)
 
+    def test_fwf(self):
+        data = """\
+2011 58   360.242940   149.910199   11950.7
+2011 59   444.953632   166.985655   11788.4
+2011 60   364.136849   183.628767   11806.2
+2011 61   413.836124   184.375703   11916.8
+2011 62   502.953953   173.237159   12468.3
+"""
+        data2 = """\
+2011,58,360.242940,149.910199,11950.7
+2011,59,444.953632,166.985655,11788.4
+2011,60,364.136849,183.628767,11806.2
+2011,61,413.836124,184.375703,11916.8
+2011,62,502.953953,173.237159,12468.3
+"""
+        widths = [(0, 3), (5, 6), (8, 19), (21, 32), (34, 42)]
+        df = read_fwf(StringIO(data), widths)
+        expected = read_csv(StringIO(data2), header=None)
+        assert_frame_equal(df, expected)
+
+
 class TestParseSQL(unittest.TestCase):
 
     def test_convert_sql_column_floats(self):
