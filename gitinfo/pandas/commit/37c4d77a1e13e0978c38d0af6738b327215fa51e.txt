commit 37c4d77a1e13e0978c38d0af6738b327215fa51e
Author: Kieran O'Mahony <kieranom@gmail.com>
Date:   Thu Jun 7 11:30:34 2012 +0100

    ujson check for malloc success

diff --git a/pandas/src/ujson/lib/ultrajsondec.c b/pandas/src/ujson/lib/ultrajsondec.c
index 95e6c886d..eda30f3fe 100644
--- a/pandas/src/ujson/lib/ultrajsondec.c
+++ b/pandas/src/ujson/lib/ultrajsondec.c
@@ -420,12 +420,20 @@ FASTCALL_ATTR JSOBJ FASTCALL_MSVC decode_string ( struct DecoderState *ds)
         if (ds->escHeap)
         {
             ds->escStart = (wchar_t *) ds->dec->realloc (ds->escStart, newSize * sizeof(wchar_t));
+            if (!ds->escStart)
+            {
+                return SetError(ds, -1, "Could not reserve memory block");
+            }
         }
         else
         {
             wchar_t *oldStart = ds->escStart;
             ds->escHeap = 1;
             ds->escStart = (wchar_t *) ds->dec->malloc (newSize * sizeof(wchar_t));
+            if (!ds->escStart)
+            {
+                return SetError(ds, -1, "Could not reserve memory block");
+            }
             memcpy (ds->escStart, oldStart, escLen * sizeof(wchar_t));
         }
 
diff --git a/pandas/src/ujson/lib/ultrajsonenc.c b/pandas/src/ujson/lib/ultrajsonenc.c
index d2af89e23..aa1a6497d 100644
--- a/pandas/src/ujson/lib/ultrajsonenc.c
+++ b/pandas/src/ujson/lib/ultrajsonenc.c
@@ -105,12 +105,22 @@ void Buffer_Realloc (JSONObjectEncoder *enc, size_t cbNeeded)
     if (enc->heap)
     {
         enc->start = (char *) enc->realloc (enc->start, newSize);
+        if (!enc->start)
+        {
+            SetError (NULL, enc, "Could not reserve memory block");
+            return;
+        }
     }
     else
     {
         char *oldStart = enc->start;
         enc->heap = 1;
         enc->start = (char *) enc->malloc (newSize);
+        if (!enc->start)
+        {
+            SetError (NULL, enc, "Could not reserve memory block");
+            return;
+        }
         memcpy (enc->start, oldStart, offset);
     }
     enc->offset = enc->start + offset;
@@ -630,6 +640,10 @@ void encode(JSOBJ obj, JSONObjectEncoder *enc, const char *name, size_t cbName)
     */
 
     Buffer_Reserve(enc, 256 + (((cbName / 4) + 1) * 12));
+    if (enc->errorMsg)
+    {
+        return;
+    }
 
     if (name)
     {
@@ -781,6 +795,10 @@ void encode(JSOBJ obj, JSONObjectEncoder *enc, const char *name, size_t cbName)
         {
             value = enc->getStringValue(obj, &tc, &szlen);
             Buffer_Reserve(enc, ((szlen / 4) + 1) * 12);
+            if (enc->errorMsg)
+            {
+                return;
+            }
             Buffer_AppendCharUnchecked (enc, '\"');
 
 
@@ -837,6 +855,11 @@ char *JSON_EncodeObject(JSOBJ obj, JSONObjectEncoder *enc, char *_buffer, size_t
     {
         _cbBuffer = 32768;
         enc->start = (char *) enc->malloc (_cbBuffer);
+        if (!enc->start)
+        {
+            SetError(obj, enc, "Could not reserve memory block");
+            return NULL;
+        }
         enc->heap = 1;
     }
     else
@@ -852,6 +875,10 @@ char *JSON_EncodeObject(JSOBJ obj, JSONObjectEncoder *enc, char *_buffer, size_t
     encode (obj, enc, NULL, 0);
     
     Buffer_Reserve(enc, 1);
+    if (enc->errorMsg)
+    {
+        return NULL;
+    }
     Buffer_AppendCharUnchecked(enc, '\0');
 
     return enc->start;
