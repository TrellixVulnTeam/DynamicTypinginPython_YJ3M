commit 5fa8a3158226178655d2bd46ad65af61b88971ab
Author: Matthew Roeschke <emailformattr@gmail.com>
Date:   Sun Apr 21 09:37:04 2019 -0700

    BUG: DataFrame/Series constructor with tz aware data and datetime64[ns] dtype converts to naive (#26167)

diff --git a/doc/source/whatsnew/v0.25.0.rst b/doc/source/whatsnew/v0.25.0.rst
index ec9b0e92f..d0da555af 100644
--- a/doc/source/whatsnew/v0.25.0.rst
+++ b/doc/source/whatsnew/v0.25.0.rst
@@ -272,7 +272,7 @@ Datetimelike
 
 - Bug in :func:`to_datetime` which would raise an (incorrect) ``ValueError`` when called with a date far into the future and the ``format`` argument specified instead of raising ``OutOfBoundsDatetime`` (:issue:`23830`)
 - Bug in :func:`to_datetime` which would raise ``InvalidIndexError: Reindexing only valid with uniquely valued Index objects`` when called with ``cache=True``, with ``arg`` including at least two different elements from the set {None, numpy.nan, pandas.NaT} (:issue:`22305`)
--
+- Bug in :class:`DataFrame` and :class:`Series` where timezone aware data with ``dtype='datetime64[ns]`` was not cast to naive (:issue:`25843`)
 -
 
 Timedelta
diff --git a/pandas/core/dtypes/cast.py b/pandas/core/dtypes/cast.py
index adaddf844..bbe01ff9d 100644
--- a/pandas/core/dtypes/cast.py
+++ b/pandas/core/dtypes/cast.py
@@ -1017,7 +1017,12 @@ def maybe_cast_to_datetime(value, dtype, errors='raise'):
                                                                 dtype):
                     try:
                         if is_datetime64:
-                            value = to_datetime(value, errors=errors)._values
+                            value = to_datetime(value, errors=errors)
+                            # GH 25843: Remove tz information since the dtype
+                            # didn't specify one
+                            if value.tz is not None:
+                                value = value.tz_localize(None)
+                            value = value._values
                         elif is_datetime64tz:
                             # The string check can be removed once issue #13712
                             # is solved. String data that is passed with a
diff --git a/pandas/tests/frame/test_timezones.py b/pandas/tests/frame/test_timezones.py
index c5077f0c4..4262162a7 100644
--- a/pandas/tests/frame/test_timezones.py
+++ b/pandas/tests/frame/test_timezones.py
@@ -196,3 +196,11 @@ class TestDataFrameTimezones:
                              index=date_range('20131027', periods=5,
                                               freq='1H', tz=tz))
         tm.assert_frame_equal(result, expected)
+
+    def test_constructor_data_aware_dtype_naive(self, tz_aware_fixture):
+        # GH 25843
+        tz = tz_aware_fixture
+        result = DataFrame({'d': [pd.Timestamp('2019', tz=tz)]},
+                           dtype='datetime64[ns]')
+        expected = DataFrame({'d': [pd.Timestamp('2019')]})
+        tm.assert_frame_equal(result, expected)
diff --git a/pandas/tests/series/test_timezones.py b/pandas/tests/series/test_timezones.py
index f47bbe51f..238edb7c6 100644
--- a/pandas/tests/series/test_timezones.py
+++ b/pandas/tests/series/test_timezones.py
@@ -364,3 +364,11 @@ class TestSeriesTimezones:
                           index=date_range('20131027', periods=5, freq='1H',
                                            tz=tz))
         tm.assert_series_equal(result, expected)
+
+    def test_constructor_data_aware_dtype_naive(self, tz_aware_fixture):
+        # GH 25843
+        tz = tz_aware_fixture
+        result = Series([Timestamp('2019', tz=tz)],
+                        dtype='datetime64[ns]')
+        expected = Series([Timestamp('2019')])
+        tm.assert_series_equal(result, expected)
