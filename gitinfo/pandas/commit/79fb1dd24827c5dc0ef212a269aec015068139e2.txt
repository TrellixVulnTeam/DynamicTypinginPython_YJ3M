commit 79fb1dd24827c5dc0ef212a269aec015068139e2
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Sun Jun 7 19:27:07 2020 -0700

    CLN: update tslibs/tseries test locations/imports (#34614)

diff --git a/pandas/tests/tseries/frequencies/test_freq_code.py b/pandas/tests/tseries/frequencies/test_freq_code.py
index d4eb31168..4df221913 100644
--- a/pandas/tests/tseries/frequencies/test_freq_code.py
+++ b/pandas/tests/tseries/frequencies/test_freq_code.py
@@ -1,6 +1,6 @@
 import pytest
 
-from pandas._libs.tslibs import to_offset
+from pandas._libs.tslibs import Resolution, offsets, to_offset
 from pandas._libs.tslibs.frequencies import (
     FreqGroup,
     _attrname_to_abbrevs,
@@ -9,9 +9,6 @@ from pandas._libs.tslibs.frequencies import (
     get_freq_group,
     get_to_timestamp_base,
 )
-from pandas._libs.tslibs.resolution import Resolution as _reso
-
-import pandas.tseries.offsets as offsets
 
 
 @pytest.fixture(params=list(_period_code_map.items()))
@@ -103,19 +100,19 @@ def test_get_to_timestamp_base(freqstr, exp_freqstr):
     ],
 )
 def test_get_attrname_from_abbrev(freqstr, expected):
-    assert _reso.get_reso_from_freq(freqstr).attrname == expected
+    assert Resolution.get_reso_from_freq(freqstr).attrname == expected
 
 
 @pytest.mark.parametrize("freq", ["A", "Q", "M"])
 def test_get_freq_unsupported_(freq):
     # Lowest-frequency resolution is for Day
     with pytest.raises(KeyError, match=freq.lower()):
-        _reso.get_reso_from_freq(freq)
+        Resolution.get_reso_from_freq(freq)
 
 
 @pytest.mark.parametrize("freq", ["D", "H", "T", "S", "L", "U", "N"])
 def test_get_freq_roundtrip2(freq):
-    obj = _reso.get_reso_from_freq(freq)
+    obj = Resolution.get_reso_from_freq(freq)
     result = _attrname_to_abbrevs[obj.attrname]
     assert freq == result
 
diff --git a/pandas/tests/tseries/frequencies/test_frequencies.py b/pandas/tests/tseries/frequencies/test_frequencies.py
new file mode 100644
index 000000000..0479de8e8
--- /dev/null
+++ b/pandas/tests/tseries/frequencies/test_frequencies.py
@@ -0,0 +1,26 @@
+import pytest
+
+from pandas._libs.tslibs import offsets
+
+from pandas.tseries.frequencies import is_subperiod, is_superperiod
+
+
+@pytest.mark.parametrize(
+    "p1,p2,expected",
+    [
+        # Input validation.
+        (offsets.MonthEnd(), None, False),
+        (offsets.YearEnd(), None, False),
+        (None, offsets.YearEnd(), False),
+        (None, offsets.MonthEnd(), False),
+        (None, None, False),
+        (offsets.YearEnd(), offsets.MonthEnd(), True),
+        (offsets.Hour(), offsets.Minute(), True),
+        (offsets.Second(), offsets.Milli(), True),
+        (offsets.Milli(), offsets.Micro(), True),
+        (offsets.Micro(), offsets.Nano(), True),
+    ],
+)
+def test_super_sub_symmetry(p1, p2, expected):
+    assert is_superperiod(p1, p2) is expected
+    assert is_subperiod(p2, p1) is expected
diff --git a/pandas/tests/tslibs/test_libfrequencies.py b/pandas/tests/tslibs/test_libfrequencies.py
index 65d3b15bb..feaaaf6ad 100644
--- a/pandas/tests/tslibs/test_libfrequencies.py
+++ b/pandas/tests/tslibs/test_libfrequencies.py
@@ -4,7 +4,6 @@ from pandas._libs.tslibs.frequencies import INVALID_FREQ_ERR_MSG, _period_str_to
 from pandas._libs.tslibs.parsing import get_rule_month
 
 from pandas.tseries import offsets
-from pandas.tseries.frequencies import is_subperiod, is_superperiod  # TODO: move tests
 
 
 @pytest.mark.parametrize(
@@ -56,27 +55,6 @@ def test_period_str_to_code(obj, expected):
     assert _period_str_to_code(obj) == expected
 
 
-@pytest.mark.parametrize(
-    "p1,p2,expected",
-    [
-        # Input validation.
-        (offsets.MonthEnd(), None, False),
-        (offsets.YearEnd(), None, False),
-        (None, offsets.YearEnd(), False),
-        (None, offsets.MonthEnd(), False),
-        (None, None, False),
-        (offsets.YearEnd(), offsets.MonthEnd(), True),
-        (offsets.Hour(), offsets.Minute(), True),
-        (offsets.Second(), offsets.Milli(), True),
-        (offsets.Milli(), offsets.Micro(), True),
-        (offsets.Micro(), offsets.Nano(), True),
-    ],
-)
-def test_super_sub_symmetry(p1, p2, expected):
-    assert is_superperiod(p1, p2) is expected
-    assert is_subperiod(p2, p1) is expected
-
-
 @pytest.mark.parametrize(
     "freq,expected,aliases",
     [
diff --git a/pandas/tests/tseries/frequencies/test_to_offset.py b/pandas/tests/tslibs/test_to_offset.py
similarity index 100%
rename from pandas/tests/tseries/frequencies/test_to_offset.py
rename to pandas/tests/tslibs/test_to_offset.py
