commit 592cd6285b63a1af47e98d2311fcedeae2eefbc7
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Sep 25 20:57:10 2011 -0400

    TST: test coverage, minor refactoring

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 65ab180f1..85a90947e 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -64,13 +64,7 @@ def _arith_method(func, name, default_axis='columns'):
         if isinstance(other, DataFrame):    # Another DataFrame
             return self._combine_frame(other, func, fill_value)
         elif isinstance(other, Series):
-            if axis is not None:
-                axis = self._get_axis_name(axis)
-                if axis == 'index':
-                    return self._combine_match_index(other, func, fill_value)
-                else:
-                    return self._combine_match_columns(other, func, fill_value)
-            return self._combine_series_infer(other, func, fill_value)
+            return self._combine_series(other, func, fill_value, axis)
         else:
             return self._combine_const(other, func)
 
@@ -1477,6 +1471,15 @@ class DataFrame(NDFrame):
         same_columns = self.columns.equals(other.columns)
         return same_index and same_columns
 
+    def _combine_series(self, other, func, fill_value=None, axis=None):
+        if axis is not None:
+            axis = self._get_axis_name(axis)
+            if axis == 'index':
+                return self._combine_match_index(other, func, fill_value)
+            else:
+                return self._combine_match_columns(other, func, fill_value)
+        return self._combine_series_infer(other, func, fill_value)
+
     def _combine_series_infer(self, other, func, fill_value=None):
         if len(other) == 0:
             return self * nan
diff --git a/pandas/core/index.py b/pandas/core/index.py
index b68c2d225..9111528d9 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -539,6 +539,13 @@ class MultiIndex(Index):
                   for lev, lab in zip(self.levels, self.labels)]
         return izip(*values)
 
+    def _get_level_number(self, level):
+        if not isinstance(level, int):
+            level = self.names.index(level)
+        elif level < 0:
+            level += self.nlevels
+        return level
+
     @property
     def values(self):
         result = np.empty(len(self), dtype=object)
@@ -807,15 +814,9 @@ class MultiIndex(Index):
         sorted_index : MultiIndex
         """
         labels = list(self.labels)
-        if not isinstance(level, int):
-            try:
-                level = self.names.index(level)
-            except:
-                raise ValueError("level %s not in index names" % level)
-
+        level = self._get_level_number(level)
         primary = labels.pop(level)
 
-
         # Lexsort starts from END
         indexer = np.lexsort(tuple(labels[::-1]) + (primary,))
 
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 84dff7b7a..93898e0cc 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -65,7 +65,7 @@ class _NDFrameIndexer(object):
 
             if not np.isscalar(value):
                 raise IndexingError('setting on mixed-type frames only '
-                                    'allowedwith scalar values')
+                                    'allowed with scalar values')
 
             plane_indexer = indexer[:het_axis] + indexer[het_axis+1:]
             item_labels = self.obj._get_axis(het_axis)
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index c33123324..b4f258927 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -1102,13 +1102,15 @@ class LongPanel(DataFrame):
     def consistent(self):
         offset = max(len(self.major_axis), len(self.minor_axis))
 
+        major_labels = self.major_labels
+        minor_labels = self.minor_labels
+
         # overflow risk
-        if (offset + 1) ** 2 > 2**32:
-            keys = (self.major_labels.astype(np.int64) * offset +
-                    self.minor_labels.astype(np.int64))
-        else:
-            keys = self.major_labels * offset + self.minor_labels
+        if (offset + 1) ** 2 > 2**32:  # pragma: no cover
+            major_labels = major_labels.astype(np.int64)
+            minor_labels = minor_labels.astype(np.int64)
 
+        keys = major_labels * offset + minor_labels
         unique_keys = np.unique(keys)
 
         if len(unique_keys) < len(keys):
@@ -1188,6 +1190,8 @@ class LongPanel(DataFrame):
             return self._combine_frame(other, func)
         elif isinstance(other, DataFrame):
             return self._combine_panel_frame(other, func, axis=axis)
+        elif isinstance(other, Series):
+            return self._combine_series(other, func, axis=axis)
         elif np.isscalar(other):
             return LongPanel(func(self.values, other), columns=self.items,
                              index=self.index)
@@ -1213,9 +1217,9 @@ class LongPanel(DataFrame):
         return result.to_long()
 
     add = _panel_arith_method(operator.add, 'add')
-    subtract = _panel_arith_method(operator.sub, 'subtract')
-    divide = _panel_arith_method(operator.div, 'divide')
-    multiply = _panel_arith_method(operator.mul, 'multiply')
+    subtract = sub = _panel_arith_method(operator.sub, 'subtract')
+    divide = div = _panel_arith_method(operator.div, 'divide')
+    multiply = mul = _panel_arith_method(operator.mul, 'multiply')
 
     def to_wide(self):
         """
diff --git a/pandas/core/reshape.py b/pandas/core/reshape.py
index 5e17ecbb7..8c545307a 100644
--- a/pandas/core/reshape.py
+++ b/pandas/core/reshape.py
@@ -56,16 +56,7 @@ class _Unstacker(object):
             raise ValueError('must pass column labels for multi-column data')
 
         self.index = index
-
-        if not isinstance(level, int):
-            try:
-                level = index.names.index(level)
-            except:
-                raise ValueError("level %s not in index names" % s)
-
-        if level < 0:
-            level += index.nlevels
-        self.level = level
+        self.level = self.index._get_level_number(level)
 
         self.new_index_levels = list(index.levels)
         self.removed_level = self.new_index_levels.pop(level)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index f7fcc5d60..9c285bc6c 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -100,8 +100,6 @@ class Series(np.ndarray, PandasObject):
             if dtype:
                 raise
 
-            subarr = np.array(data, dtype=object)
-
         if subarr.ndim == 0:
             if isinstance(data, list):  # pragma: no cover
                 subarr = np.array(data, dtype=object)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 06a9975a1..1b0625d41 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -417,6 +417,9 @@ class CheckIndexing(object):
         self.mixed_frame.ix[5] = np.nan
         self.assert_(isnull(self.mixed_frame.ix[5]).all())
 
+        self.assertRaises(Exception, self.mixed_frame.ix.__setitem__,
+                          5, self.mixed_frame.ix[6])
+
     def test_getitem_fancy_1d(self):
         f = self.frame
         ix = f.ix
@@ -699,7 +702,8 @@ class SafeForSparse(object):
         self.assert_(np.array_equal(with_suffix.columns, expected))
 
 
-class TestDataFrame(unittest.TestCase, CheckIndexing):
+class TestDataFrame(unittest.TestCase, CheckIndexing,
+                    SafeForSparse):
     klass = DataFrame
 
     def setUp(self):
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 6aff1791d..b4cafb42b 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -8,7 +8,7 @@ import unittest
 
 import numpy as np
 
-from pandas.core.api import DataFrame, Index, isnull, notnull, pivot
+from pandas import DataFrame, Index, isnull, notnull, pivot, MultiIndex
 from pandas.core.datetools import bday
 from pandas.core.frame import group_agg
 from pandas.core.panel import Panel, LongPanel
@@ -925,6 +925,11 @@ class TestLongPanel(unittest.TestCase):
         assert_series_equal(self.panel['foo'].reindex(lp2.index),
                             lp2['ItemA'])
 
+    def test_ops_scalar(self):
+        result = self.panel.mul(2)
+        expected = DataFrame.__mul__(self.panel, 2)
+        assert_frame_equal(result, expected)
+
     def test_combineFrame(self):
         wp = self.panel.to_wide()
         result = self.panel.add(wp['ItemA'])
@@ -1107,23 +1112,22 @@ class TestLongPanel(unittest.TestCase):
     def test_pivot(self):
         from pandas.core.reshape import _slow_pivot
 
-        df = pivot(np.array([1, 2, 3, 4, 5]),
-                   np.array(['a', 'b', 'c', 'd', 'e']),
-                   np.array([1, 2, 3, 5, 4.]))
+        one, two, three = (np.array([1, 2, 3, 4, 5]),
+                           np.array(['a', 'b', 'c', 'd', 'e']),
+                           np.array([1, 2, 3, 5, 4.]))
+        df = pivot(one, two, three)
         self.assertEqual(df['a'][1], 1)
         self.assertEqual(df['b'][2], 2)
         self.assertEqual(df['c'][3], 3)
         self.assertEqual(df['d'][4], 5)
         self.assertEqual(df['e'][5], 4)
+        assert_frame_equal(df, _slow_pivot(one, two, three))
 
         # weird overlap, TODO: test?
         a, b, c = (np.array([1, 2, 3, 4, 4]),
                    np.array(['a', 'a', 'a', 'a', 'a']),
                    np.array([1., 2., 3., 4., 5.]))
         self.assertRaises(Exception, pivot, a, b, c)
-        # df = pivot(a, b, c)
-        # expected = _slow_pivot(a, b, c)
-        # assert_frame_equal(df, expected)
 
         # corner case, empty
         df = pivot(np.array([]), np.array([]), np.array([]))
@@ -1151,6 +1155,12 @@ def test_monotonic():
 
     assert not panelm._monotonic(neg2)
 
+def test_panel_index():
+    index = panelm.panel_index([1,2,3,4], [1,2,3])
+    expected = MultiIndex.from_arrays([np.tile([1,2,3,4], 3),
+                                       np.repeat([1,2,3], 4)])
+    assert(index.equals(expected))
+
 if __name__ == '__main__':
     import nose
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
