commit a150d29497711468c918d5c9d1d48909d158aeb2
Author: Adam Klein <adamklein@gmail.com>
Date:   Thu Jan 26 15:13:13 2012 -0500

    BUG: closes #691, assignment with ix and mixed dtypes

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index c8876f2ba..5856ab9ac 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1276,7 +1276,7 @@ class DataFrame(NDFrame):
         col = self.columns[j]
         return self.get_value(row, col)
 
-    def __getitem__(self, key):
+    def __getitem__(self, key, copy=True):
         # slice rows
         if isinstance(key, slice):
             new_data = self._data.get_slice(key, axis=1)
@@ -1289,13 +1289,13 @@ class DataFrame(NDFrame):
             # also raises Exception if object array with NA values
             if com._is_bool_indexer(key):
                 key = np.asarray(key, dtype=bool)
-            return self._getitem_array(key)
+            return self._getitem_array(key, copy=copy)
         elif isinstance(self.columns, MultiIndex):
             return self._getitem_multilevel(key)
         else:
             return self._get_item_cache(key)
 
-    def _getitem_array(self, key):
+    def _getitem_array(self, key, copy=True):
         if key.dtype == np.bool_:
             if len(key) != len(self.index):
                 raise ValueError('Item wrong length %d instead of %d!' %
@@ -1308,7 +1308,7 @@ class DataFrame(NDFrame):
             mask = indexer == -1
             if mask.any():
                 raise KeyError("No column(s) named: %s" % str(key[mask]))
-            result = self.reindex(columns=key)
+            result = self.reindex(columns=key, copy=copy)
             if result.columns.name is None:
                 result.columns.name = self.columns.name
             return result
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 9f862923c..289a02b86 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -66,7 +66,7 @@ class _NDFrameIndexer(object):
         for i, k in enumerate(key):
             idx = self._convert_to_indexer(k, axis=i)
             keyidx.append(idx)
-        return _maybe_convert_ix(*keyidx)
+        return tuple(keyidx)
 
     def _setitem_with_indexer(self, indexer, value):
         # also has the side effect of consolidating in-place
@@ -90,7 +90,9 @@ class _NDFrameIndexer(object):
                 data = self.obj[item]
                 data.values[plane_indexer] = value
         else:
-            self.obj.values[indexer] = value
+           if isinstance(indexer, tuple):
+               indexer = _maybe_convert_ix(*indexer)
+           self.obj.values[indexer] = value
 
     def _getitem_tuple(self, tup):
         try:
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 64f988fcc..2579d0fd4 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -295,6 +295,19 @@ class CheckIndexing(object):
         dm['coercable'] = ['1', '2', '3']
         self.assertEqual(dm['coercable'].dtype, np.object_)
 
+    def test_setitem_corner2(self):
+        data = {"title" : ['foobar','bar','foobar'] + ['foobar'] * 17 ,
+                "cruft" : np.random.random(20)}
+
+        df = DataFrame(data)
+        ix = df[df['title'] == 'bar'].index
+
+        df.ix[ix, ['title']] = 'foobar'
+        df.ix[ix, ['cruft']] = 0
+
+        assert( df.ix[1, 'title'] == 'foobar' )
+        assert( df.ix[1, 'cruft'] == 0 )
+
     def test_setitem_ambig(self):
         # difficulties with mixed-type data
         from decimal import Decimal
