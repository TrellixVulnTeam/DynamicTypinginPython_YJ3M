commit f838ff9734e21d16a967860f4fda5c6af3cc57f9
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Oct 23 13:56:45 2011 -0400

    BUG: can pass level name to DataFrame.stack

diff --git a/RELEASE.rst b/RELEASE.rst
index e3db0d171..be988e821 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -188,6 +188,7 @@ feedback on the library.
   - `Int64Index.take` and `MultiIndex.take` lost name field, fix downstream
     issue GH #262
   - Can pass list of tuples to `Series` (GH #270)
+  - Can pass level name to `DataFrame.stack`
 
 Thanks
 ------
diff --git a/TODO.rst b/TODO.rst
index 90a59e374..4b0d05632 100644
--- a/TODO.rst
+++ b/TODO.rst
@@ -30,19 +30,19 @@ TODO docs
 - DONE combine_first
 - DONE groupby with level name
 - DONE MultiIndex get_level_values
+- DONE & and | for intersection / union
+- DONE Update to reflect Python 3 support in intro
+- DONE Index / MultiIndex names
 
-- Index / MultiIndex names
 - Unstack / stack by level name
 - name attribute on Series
 
 - Inner join on key
 - Multi-key joining
 
-- Update to reflect Python 3 support in intro
 - align functions
 - df[col_list]
 - Panel.rename_axis
-- & and | for intersection / union
 
 Performance blog
 ----------------
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 183ba6d89..5532d2a91 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1739,6 +1739,11 @@ class DataFrame(NDFrame):
         Convert DataFrame to Series with multi-level Index. Columns become the
         second level of the resulting hierarchical index
 
+        Parameters
+        ----------
+        level : int or string, default last level
+            Level to stack, can pass level name
+
         Returns
         -------
         stacked : Series
@@ -1752,8 +1757,8 @@ class DataFrame(NDFrame):
 
         Parameters
         ----------
-        level : int, default last level
-            Level to unstack
+        level : int or string, default last level
+            Level to unstack, can pass level name
 
         Examples
         --------
diff --git a/pandas/core/index.py b/pandas/core/index.py
index a4b28ecf2..ba46d4ddd 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -97,6 +97,12 @@ class Index(np.ndarray):
             raise Exception('Index cannot contain duplicate values!')
         return self._indexMap
 
+    def _get_level_number(self, level):
+        if not isinstance(level, int):
+            assert(level == self.name)
+            level = 0
+        return level
+
     def _verify_integrity(self):
         if self._indexMap is None:
             try:
diff --git a/pandas/core/reshape.py b/pandas/core/reshape.py
index ebaa82d06..a746f1286 100644
--- a/pandas/core/reshape.py
+++ b/pandas/core/reshape.py
@@ -287,6 +287,8 @@ def stack(frame, level=-1, dropna=True):
     stacked : Series
     """
     N, K = frame.shape
+    level = frame.columns._get_level_number(level)
+
     if isinstance(frame.columns, MultiIndex):
         return _stack_multi_columns(frame, level=level, dropna=True)
     elif isinstance(frame.index, MultiIndex):
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index ed15d49e0..53f1d286e 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -5,7 +5,7 @@ import unittest
 from numpy.random import randn
 import numpy as np
 
-from pandas.core.index import MultiIndex
+from pandas.core.index import Index, MultiIndex
 from pandas import Panel, DataFrame, Series, notnull, isnull
 
 from pandas.util.testing import (assert_almost_equal,
@@ -23,7 +23,7 @@ class TestMultiLevel(unittest.TestCase):
                                    [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]],
                            names=['first', 'second'])
         self.frame = DataFrame(np.random.randn(10, 3), index=index,
-                               columns=['A', 'B', 'C'])
+                               columns=Index(['A', 'B', 'C'], name='exp'))
 
         self.single_level = MultiIndex(levels=[['foo', 'bar', 'baz', 'qux']],
                                        labels=[[0, 1, 2, 3]],
@@ -376,7 +376,7 @@ class TestMultiLevel(unittest.TestCase):
     def test_stack_unstack_preserve_names(self):
         unstacked = self.frame.unstack()
         self.assertEquals(unstacked.index.name, 'first')
-        self.assertEquals(unstacked.columns.names, [None, 'second'])
+        self.assertEquals(unstacked.columns.names, ['exp', 'second'])
 
         restacked = unstacked.stack()
         self.assertEquals(restacked.index.names, self.frame.index.names)
@@ -386,6 +386,12 @@ class TestMultiLevel(unittest.TestCase):
         expected = self.frame.unstack(level=1)
         assert_frame_equal(result, expected)
 
+    def test_stack_level_name(self):
+        unstacked = self.frame.unstack('second')
+        result = unstacked.stack('exp')
+        expected = self.frame.unstack().stack(0)
+        assert_frame_equal(result, expected)
+
     def test_groupby_transform(self):
         s = self.frame['A']
         grouper = s.index.get_level_values(0)
