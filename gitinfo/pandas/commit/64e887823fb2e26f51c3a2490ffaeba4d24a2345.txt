commit 64e887823fb2e26f51c3a2490ffaeba4d24a2345
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Sep 26 20:40:03 2012 -0400

    BUG: repr fix for all-NA index level. close #1971

diff --git a/RELEASE.rst b/RELEASE.rst
index 735e67fdb..fc160ea0f 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -234,6 +234,7 @@ pandas 0.9.0
   - Fix bug in DataFrame.duplicated to enable iterables other than list-types
     as input argument (#1773)
   - Fix resample bug when passed list of lambdas as `how` argument (#1808)
+  - Repr fix for MultiIndex level with all NAs (#1971)
 
 
 pandas 0.8.1
diff --git a/pandas/core/index.py b/pandas/core/index.py
index e62ae7469..7447fdd59 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1471,7 +1471,8 @@ class MultiIndex(Index):
         labels = self.labels[num]
         return unique_vals.take(labels)
 
-    def format(self, space=2, sparsify=None, adjoin=True, names=False):
+    def format(self, space=2, sparsify=None, adjoin=True, names=False,
+               na_rep='NaN'):
         from pandas.core.common import _stringify
         from pandas.core.format import print_config
         def _strify(x):
@@ -1480,8 +1481,15 @@ class MultiIndex(Index):
         if len(self) == 0:
             return []
 
-        stringified_levels = [lev.take(lab).format() for lev, lab in
-                zip(self.levels, self.labels)]
+
+        stringified_levels = []
+        for lev, lab in zip(self.levels, self.labels):
+            if len(lev) > 0:
+                formatted = lev.take(lab).format()
+            else:
+                # weird all NA case
+                formatted = [str(x) for x in com.take_1d(lev.values, lab)]
+            stringified_levels.append(formatted)
 
         result_levels = []
         for lev, name in zip(stringified_levels, self.names):
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 022e3a85e..236549cf6 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1591,6 +1591,19 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         xp.index.names = [df.columns[0]]
         assert_frame_equal(rs, xp)
 
+    def test_set_index_empty_column(self):
+        # #1971
+        df = DataFrame([
+                dict(a=1, p=0),
+                dict(a=2, m=10),
+                dict(a=3, m=11, p=20),
+                dict(a=4, m=12, p=21)
+                ], columns=('a', 'm', 'p', 'x'))
+
+        # it works!
+        result = df.set_index(['a', 'x'])
+        repr(result)
+
     def test_set_columns(self):
         cols = Index(np.arange(len(self.mixed_frame.columns)))
         self.mixed_frame.columns = cols
