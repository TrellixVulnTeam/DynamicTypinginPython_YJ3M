commit 8154f0d3da46c54a63fe00a771b9c908c22de631
Author: Vikram Bhandoh <vikram@newmanonline.org.uk>
Date:   Mon Dec 1 11:54:03 2014 +0000

    Fixes #8933 simple renaming

diff --git a/pandas/core/categorical.py b/pandas/core/categorical.py
index 7dfdc88dd..5b3e9e8a2 100644
--- a/pandas/core/categorical.py
+++ b/pandas/core/categorical.py
@@ -18,7 +18,7 @@ from pandas.util.decorators import cache_readonly
 from pandas.core.common import (CategoricalDtype, ABCSeries, isnull, notnull,
                                 is_categorical_dtype, is_integer_dtype, is_object_dtype,
                                 _possibly_infer_to_datetimelike, get_dtype_kinds,
-                                is_list_like, _is_sequence,
+                                is_list_like, is_sequence,
                                 _ensure_platform_int, _ensure_object, _ensure_int64,
                                 _coerce_indexer_dtype, _values_from_object, take_1d)
 from pandas.util.terminal import get_terminal_size
@@ -1477,7 +1477,7 @@ def _convert_to_list_like(list_like):
         return list_like
     if isinstance(list_like, list):
         return list_like
-    if (_is_sequence(list_like) or isinstance(list_like, tuple)
+    if (is_sequence(list_like) or isinstance(list_like, tuple)
         or isinstance(list_like, types.GeneratorType)):
         return list(list_like)
     elif np.isscalar(list_like):
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 6aff67412..f7f944bb4 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -2504,7 +2504,7 @@ def is_list_like(arg):
             not isinstance(arg, compat.string_and_binary_types))
 
 
-def _is_sequence(x):
+def is_sequence(x):
     try:
         iter(x)
         len(x)  # it has a length
@@ -2512,6 +2512,7 @@ def _is_sequence(x):
     except (TypeError, AttributeError):
         return False
 
+
 def _get_callable_name(obj):
     # typical case has name
     if hasattr(obj, '__name__'):
@@ -3093,7 +3094,7 @@ def pprint_thing(thing, _nest_lvl=0, escape_chars=None, default_escapes=False,
     elif (isinstance(thing, dict) and
           _nest_lvl < get_option("display.pprint_nest_depth")):
         result = _pprint_dict(thing, _nest_lvl, quote_strings=True)
-    elif _is_sequence(thing) and _nest_lvl < \
+    elif is_sequence(thing) and _nest_lvl < \
             get_option("display.pprint_nest_depth"):
         result = _pprint_seq(thing, _nest_lvl, escape_chars=escape_chars,
                              quote_strings=quote_strings)
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index a464b6872..7c7872cf7 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -24,7 +24,7 @@ import numpy as np
 import numpy.ma as ma
 
 from pandas.core.common import (isnull, notnull, PandasError, _try_sort,
-                                _default_index, _maybe_upcast, _is_sequence,
+                                _default_index, _maybe_upcast, is_sequence,
                                 _infer_dtype_from_scalar, _values_from_object,
                                 is_list_like, _get_dtype, _maybe_box_datetimelike,
                                 is_categorical_dtype)
@@ -2255,7 +2255,7 @@ class DataFrame(NDFrame):
         elif isinstance(value, Categorical):
             value = value.copy()
 
-        elif (isinstance(value, Index) or _is_sequence(value)):
+        elif (isinstance(value, Index) or is_sequence(value)):
             from pandas.core.series import _sanitize_index
             value = _sanitize_index(value, self.index, copy=False)
             if not isinstance(value, (np.ndarray, Index)):
@@ -2844,7 +2844,7 @@ class DataFrame(NDFrame):
                                  '(rows)')
             if not isinstance(by, list):
                 by = [by]
-            if com._is_sequence(ascending) and len(by) != len(ascending):
+            if com.is_sequence(ascending) and len(by) != len(ascending):
                 raise ValueError('Length of ascending (%d) != length of by'
                                  ' (%d)' % (len(ascending), len(by)))
             if len(by) > 1:
@@ -3694,7 +3694,7 @@ class DataFrame(NDFrame):
                                            com.pprint_thing(k),)
                 raise
 
-        if len(results) > 0 and _is_sequence(results[0]):
+        if len(results) > 0 and is_sequence(results[0]):
             if not isinstance(results[0], Series):
                 index = res_columns
             else:
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 048e4af20..c9322a937 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -541,7 +541,7 @@ class _NDFrameIndexer(object):
             # we have a frame, with multiple indexers on both axes; and a
             # series, so need to broadcast (see GH5206)
             if (sum_aligners == self.ndim and
-                    all([com._is_sequence(_) for _ in indexer])):
+                    all([com.is_sequence(_) for _ in indexer])):
                 ser = ser.reindex(obj.axes[0][indexer[0]], copy=True).values
 
                 # single indexer
@@ -555,7 +555,7 @@ class _NDFrameIndexer(object):
                 ax = obj.axes[i]
 
                 # multiple aligners (or null slices)
-                if com._is_sequence(idx) or isinstance(idx, slice):
+                if com.is_sequence(idx) or isinstance(idx, slice):
                     if single_aligner and _is_null_slice(idx):
                         continue
                     new_ix = ax[idx]
@@ -625,7 +625,7 @@ class _NDFrameIndexer(object):
             sindexers = []
             for i, ix in enumerate(indexer):
                 ax = self.obj.axes[i]
-                if com._is_sequence(ix) or isinstance(ix, slice):
+                if com.is_sequence(ix) or isinstance(ix, slice):
                     if idx is None:
                         idx = ax[ix].ravel()
                     elif cols is None:
diff --git a/pandas/tests/test_common.py b/pandas/tests/test_common.py
index 0d13b6513..946524705 100644
--- a/pandas/tests/test_common.py
+++ b/pandas/tests/test_common.py
@@ -25,7 +25,7 @@ def test_mut_exclusive():
 
 
 def test_is_sequence():
-    is_seq = com._is_sequence
+    is_seq = com.is_sequence
     assert(is_seq((1, 2)))
     assert(is_seq([1, 2]))
     assert(not is_seq("abcd"))
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 4acf4d63d..6a71160a0 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -24,7 +24,7 @@ import numpy as np
 from numpy.testing import assert_array_equal
 
 import pandas as pd
-from pandas.core.common import _is_sequence, array_equivalent, is_list_like
+from pandas.core.common import is_sequence, array_equivalent, is_list_like
 import pandas.core.index as index
 import pandas.core.series as series
 import pandas.core.frame as frame
@@ -945,7 +945,7 @@ def makeCustomIndex(nentries, nlevels, prefix='#', names=False, ndupe_l=None,
 
     if ndupe_l is None:
         ndupe_l = [1] * nlevels
-    assert (_is_sequence(ndupe_l) and len(ndupe_l) <= nlevels)
+    assert (is_sequence(ndupe_l) and len(ndupe_l) <= nlevels)
     assert (names is None or names is False
             or names is True or len(names) is nlevels)
     assert idx_type is None or \
