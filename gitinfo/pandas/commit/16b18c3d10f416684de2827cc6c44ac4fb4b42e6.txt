commit 16b18c3d10f416684de2827cc6c44ac4fb4b42e6
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon May 21 14:41:29 2012 -0400

    BUG: can pass list of functions to SeriesGroupBy.aggregate, fixes #1268

diff --git a/RELEASE.rst b/RELEASE.rst
index 509e7e3d3..fba5a46b4 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -54,6 +54,7 @@ pandas 0.8.0
   - Add flexible replace method for replacing potentially values to Series and
     DataFrame (#929, #1241)
   - Add 'kde' plot kind for Series/DataFrame.plot (#1059)
+  - More flexible multiple function aggregation with GroupBy
 
 **Improvements to existing features**
 
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 25fabd76f..9a31363a0 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -1214,8 +1214,13 @@ class SeriesGroupBy(GroupBy):
             # indicated column order
             columns = list(zip(*arg))[0]
         else:
-            # list of functions
-            columns = [func.__name__ for func in arg]
+            # list of functions / function names
+            columns = []
+            for f in arg:
+                if isinstance(f, basestring):
+                    columns.append(f)
+                else:
+                    columns.append(f.__name__)
             arg = zip(columns, arg)
 
         results = {}
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index a3f705cf9..1891e80ea 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -1773,6 +1773,25 @@ class TestGroupBy(unittest.TestCase):
                                       'D' : [foo, bar]})
         assert_frame_equal(result, expected)
 
+    def test_multi_function_flexible_mix(self):
+        # GH #1268
+
+        grouped = self.df.groupby('A')
+
+        result = grouped.aggregate({'C' : {'foo' : 'mean',
+                                           'bar' : 'std'},
+                                    'D' : 'sum'})
+        result2 = grouped.aggregate({'C' : {'foo' : 'mean',
+                                           'bar' : 'std'},
+                                    'D' : ['sum']})
+
+        expected = grouped.aggregate({'C' : {'foo' : 'mean',
+                                             'bar' : 'std'},
+                                      'D' : {'sum' : 'sum'}})
+
+        assert_frame_equal(result, expected)
+        assert_frame_equal(result2, expected)
+
     def test_set_group_name(self):
         def f(group):
             assert group.name is not None
