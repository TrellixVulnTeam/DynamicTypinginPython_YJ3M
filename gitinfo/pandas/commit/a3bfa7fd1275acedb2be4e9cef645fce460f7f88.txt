commit a3bfa7fd1275acedb2be4e9cef645fce460f7f88
Author: Stephen Lin <stephenwlin@gmail.com>
Date:   Mon Feb 11 16:47:15 2013 -0500

    TST: Corner case tests for maybe_convert_objects (GH #2845)

diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index c628bf3f0..77bf23ea9 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -8099,6 +8099,69 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         values = self.mixed_int.as_matrix(['C'])
         self.assert_(values.dtype == np.uint8)
 
+    def test_constructor_with_convert(self):
+        # this is actually mostly a test of lib.maybe_convert_objects
+        # #2845
+        df = DataFrame({'A' : [2**63-1] })
+        result = df['A']
+        expected = Series(np.asarray([2**63-1], np.int64))
+        assert_series_equal(result, expected)
+
+        df = DataFrame({'A' : [2**63] })
+        result = df['A']
+        expected = Series(np.asarray([2**63], np.object_))
+        assert_series_equal(result, expected)
+
+        df = DataFrame({'A' : [datetime(2005, 1, 1), True] })
+        result = df['A']
+        expected = Series(np.asarray([datetime(2005, 1, 1), True], np.object_))
+        assert_series_equal(result, expected)
+
+        df = DataFrame({'A' : [None, 1] })
+        result = df['A']
+        expected = Series(np.asarray([np.nan, 1], np.float_))
+        assert_series_equal(result, expected)
+
+        df = DataFrame({'A' : [1.0, 2] })
+        result = df['A']
+        expected = Series(np.asarray([1.0, 2], np.float_))
+        assert_series_equal(result, expected)
+
+        df = DataFrame({'A' : [1.0+2.0j, 3] })
+        result = df['A']
+        expected = Series(np.asarray([1.0+2.0j, 3], np.complex_))
+        assert_series_equal(result, expected)
+
+        df = DataFrame({'A' : [1.0+2.0j, 3.0] })
+        result = df['A']
+        expected = Series(np.asarray([1.0+2.0j, 3.0], np.complex_))
+        assert_series_equal(result, expected)
+
+        df = DataFrame({'A' : [1.0+2.0j, True] })
+        result = df['A']
+        expected = Series(np.asarray([1.0+2.0j, True], np.object_))
+        assert_series_equal(result, expected)
+
+        df = DataFrame({'A' : [1.0, None] })
+        result = df['A']
+        expected = Series(np.asarray([1.0, np.nan], np.float_))
+        assert_series_equal(result, expected)
+
+        df = DataFrame({'A' : [1.0+2.0j, None] })
+        result = df['A']
+        expected = Series(np.asarray([1.0+2.0j, np.nan], np.complex_))
+        assert_series_equal(result, expected)
+
+        df = DataFrame({'A' : [2.0, 1, True, None] })
+        result = df['A']
+        expected = Series(np.asarray([2.0, 1, True, None], np.object_))
+        assert_series_equal(result, expected)
+
+        df = DataFrame({'A' : [2.0, 1, datetime(2006, 1, 1), None] })
+        result = df['A']
+        expected = Series(np.asarray([2.0, 1, datetime(2006, 1, 1),
+                                      None], np.object_))
+        assert_series_equal(result, expected)
 
     def test_constructor_with_datetimes(self):
         intname = np.dtype(np.int_).name
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 95d85d44f..a5732f252 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -348,6 +348,17 @@ class TestIndex(unittest.TestCase):
         expected = [str(index[0])]
         self.assertEquals(formatted, expected)
 
+        # 2845
+        index = Index([1, 2.0+3.0j, np.nan])
+        formatted = index.format()
+        expected = [str(index[0]), str(index[1]), str(index[2])]
+        self.assertEquals(formatted, expected)
+
+        index = Index([1, 2.0+3.0j, None])
+        formatted = index.format()
+        expected = [str(index[0]), str(index[1]), '']
+        self.assertEquals(formatted, expected)
+
         self.strIndex[:0].format()
 
     def test_format_with_name_time_info(self):
