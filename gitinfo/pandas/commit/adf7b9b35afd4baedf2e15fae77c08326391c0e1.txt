commit adf7b9b35afd4baedf2e15fae77c08326391c0e1
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jul 12 17:12:56 2011 -0400

    ENH: console formatting enhancements

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 73e3f44e3..be325fd69 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -173,3 +173,25 @@ def _pfixed(s, space, nanRep=None, float_format=None):
     else:
         return (' %s' % s)[:space].ljust(space)
 
+def _format(s, nanRep=None, float_format=None):
+    if isinstance(s, float):
+        if nanRep is not None and isnull(s):
+            if np.isnan(s):
+                s = nanRep
+            return (' %s' % s)
+
+        if float_format:
+            formatted = float_format(s)
+        else:
+            is_neg = s < 0
+            formatted = _float_format(np.abs(s))
+
+            if is_neg:
+                formatted = '-' + formatted
+            else:
+                formatted = ' ' + formatted
+
+        return formatted
+    else:
+        return ' %s' % s
+
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 47768e71d..e4cdd6969 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -480,48 +480,33 @@ class DataFrame(PandasGeneric):
 
     def toString(self, buf=sys.stdout, columns=None, colSpace=None,
                  nanRep='NaN', formatters=None, float_format=None):
-        """Output a tab-separated version of this DataFrame"""
-        series = self._series
-        if columns is None:
-            columns = self.columns
-        else:
-            columns = [c for c in columns if c in self]
-
-        formatters = formatters or {}
-        ident = lambda x: x
+        from pandas.core.pytools import adjoin
+        from pandas.core.common import _format
 
         if colSpace is None:
-            colSpace = {}
+            def _myformat(v):
+                return _format(v, nanRep=nanRep,
+                               float_format=float_format)
+        else:
+            def _myformat(v):
+                return _pfixed(v, colSpace, nanRep=nanRep,
+                               float_format=float_format)
 
-            for c in columns:
-                if np.issctype(series[c].dtype):
-                    colSpace[c] = max(len(str(c)) + 4, common._column_space)
-                else:
-                    # HACK
-                    colSpace[c] = common._column_space
+        def _stringify(series):
+            return map(_myformat, series)
+
+        if columns is None:
+            columns = self.columns
         else:
-            colSpace = dict((k, colSpace) for k in columns)
+            columns = [c for c in columns if c in self]
 
         if len(columns) == 0 or len(self.index) == 0:
             print >> buf, 'Empty %s' % type(self).__name__
             print >> buf, repr(self.index)
         else:
-            idxSpace = max([len(str(idx)) for idx in self.index]) + 4
-            head = ' ' * idxSpace
-
-            for h in columns:
-                head += _put_str(h, colSpace[h])
-
-            print >> buf, head
-
-            for idx in self.index:
-                ot = _put_str(idx, idxSpace - 1)
-                for k in columns:
-                    formatter = formatters.get(k, ident)
-                    ot += _pfixed(formatter(series[k][idx]),
-                                  colSpace[k], nanRep=nanRep,
-                                  float_format=float_format)
-                print >> buf, ot
+            str_index = [''] + [str(x) for x in self.index]
+            stringified = [[' %s' % c] + _stringify(self[c]) for c in columns]
+            print >> buf, adjoin(2, str_index, *stringified)
 
     def info(self, verbose=True, buf=sys.stdout):
         """
@@ -1757,24 +1742,36 @@ class DataFrame(PandasGeneric):
     #----------------------------------------------------------------------
     # groupby
 
-    def groupby(self, mapper, axis=0):
+    def groupby(self, by, axis=0, column=None):
         """
-        Goup series using mapper (dict or key function, apply given
-        function to group, return result as series).
+        Goup series using mapper (dict or key function, apply given function to
+        group, return result as series) or by a series of columns
 
         Parameters
         ----------
-        mapper : function, dict or Series
+        by : mapping function, dict, Series, or tuple / list of column names
             Called on each element of the object index to determine
             the groups.  If a dict or Series is passed, the Series or
             dict VALUES will be used to determine the groups
+        axis : int, default 0
+
+        Examples
+        --------
+        # DataFrame result
+        >>> data.groupby(func, axis=0).mean()
+
+        # DataFrame result
+        >>> data.groupby(['col1', 'col2'])['col3'].mean()
+
+        # WidePanel result
+        >>> data.groupby(['col1', 'col2']).mean()
 
         Returns
         -------
         GroupBy object
         """
         from pandas.core.groupby import groupby
-        return groupby(self, mapper, axis=axis)
+        return groupby(self, by, axis=axis)
 
     def tgroupby(self, keyfunc, applyfunc):
         """
