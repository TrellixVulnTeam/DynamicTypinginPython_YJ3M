commit b482f1b62198ac10879b5a1029b4e0e1ceb1bfaa
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Sep 23 13:05:43 2012 -0400

    BUG: try fixing tzlocal bug

diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index 53bb8df81..363b233b3 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -527,11 +527,11 @@ cdef class _TSObject:
         def __get__(self):
             return self.value
 
-cpdef _get_utcoffset(tzinfo):
+cpdef _get_utcoffset(tzinfo, obj):
     try:
         return tzinfo._utcoffset
     except AttributeError:
-        return tzinfo.utcoffset(None)
+        return tzinfo.utcoffset(obj)
 
 # helper to extract datetime and int64 from several different possibilities
 cpdef convert_to_tsobject(object ts, object tz=None):
@@ -570,20 +570,22 @@ cpdef convert_to_tsobject(object ts, object tz=None):
                 ts = tz.normalize(ts)
                 obj.value = _pydatetime_to_dts(ts, &obj.dts)
                 obj.tzinfo = ts.tzinfo
-            elif tz is not pytz.utc:
+            elif not _is_utc(tz):
                 ts = tz.localize(ts)
                 obj.value = _pydatetime_to_dts(ts, &obj.dts)
-                obj.value -= _delta_to_nanoseconds(_get_utcoffset(ts.tzinfo))
+                offset = _get_utcoffset(ts.tzinfo, ts)
+                obj.value -= _delta_to_nanoseconds(offset)
                 obj.tzinfo = ts.tzinfo
             else:
                 # UTC
                 obj.value = _pydatetime_to_dts(ts, &obj.dts)
-                obj.tzinfo = tz
+                obj.tzinfo = pytz.utc
         else:
             obj.value = _pydatetime_to_dts(ts, &obj.dts)
             obj.tzinfo = ts.tzinfo
             if obj.tzinfo is not None and not _is_utc(obj.tzinfo):
-                obj.value -= _delta_to_nanoseconds(_get_utcoffset(obj.tzinfo))
+                offset = _get_utcoffset(obj.tzinfo, obj)
+                obj.value -= _delta_to_nanoseconds()
         _check_dts_bounds(obj.value, &obj.dts)
         return obj
     elif PyDate_Check(ts):
@@ -1028,7 +1030,7 @@ def _get_deltas(tz):
         # tzoffset not hashable in Python 3
         hash(tz)
     except TypeError:
-        num = int(total_seconds(_get_utcoffset(tz))) * 1000000000
+        num = int(total_seconds(_get_utcoffset(tz, None))) * 1000000000
         return np.array([num], dtype=np.int64)
 
     if tz not in utc_offset_cache:
@@ -1036,7 +1038,7 @@ def _get_deltas(tz):
             utc_offset_cache[tz] = _unbox_utcoffsets(tz._transition_info)
         else:
             # static tzinfo
-            num = int(total_seconds(_get_utcoffset(tz))) * 1000000000
+            num = int(total_seconds(_get_utcoffset(tz, None))) * 1000000000
             utc_offset_cache[tz] = np.array([num], dtype=np.int64)
     return utc_offset_cache[tz]
 
diff --git a/pandas/tseries/tests/test_timezones.py b/pandas/tseries/tests/test_timezones.py
index fc42a4fa0..646176954 100644
--- a/pandas/tseries/tests/test_timezones.py
+++ b/pandas/tseries/tests/test_timezones.py
@@ -414,6 +414,17 @@ class TestTimeZoneSupport(unittest.TestCase):
         result = to_datetime(arr, utc=True)
         self.assert_(result.tz is pytz.utc)
 
+    def test_to_datetime_tzlocal(self):
+        from dateutil.parser import parse
+        from dateutil.tz import tzlocal
+        dt = parse('2012-06-13T01:39:00Z')
+        dt = dt.replace(tzinfo = tzlocal())
+
+        arr = np.array([dt], dtype=object)
+
+        result = to_datetime(arr, utc=True)
+        self.assert_(result.tz is pytz.utc)
+
     def test_frame_no_datetime64_dtype(self):
         dr = date_range('2011/1/1', '2012/1/1', freq='W-FRI')
         dr_tz = dr.tz_localize('US/Eastern')
