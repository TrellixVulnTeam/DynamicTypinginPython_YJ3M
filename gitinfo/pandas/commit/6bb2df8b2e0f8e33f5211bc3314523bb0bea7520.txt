commit 6bb2df8b2e0f8e33f5211bc3314523bb0bea7520
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Aug 21 21:35:26 2011 -0400

    ENH: proper item slicing in internals and tests

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 86ed20745..d6c06d2ff 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -770,6 +770,15 @@ class DataFrame(NDFrame):
         else:
             return self._getitem_single(key)
 
+    def _slice(self, slobj, axis=0):
+        if axis == 0:
+            mgr_axis = 1
+        else:
+            mgr_axis = 0
+
+        new_data = self._data.get_slice(slobj, axis=mgr_axis)
+        return self._constructor(new_data)
+
     def _getitem_multilevel(self, key):
         loc = self.columns.get_loc(key)
         if isinstance(loc, slice):
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index c2186768c..543d517e5 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -248,16 +248,8 @@ class _DataFrameIndexer(object):
 
         if not _need_slice(slice_obj):
             return frame
-        if axis == 0:
-            new_index = frame.index[slicer]
-            new_columns = frame.columns
-            new_values = frame.values[slicer]
-        else:
-            new_index = frame.index
-            new_columns = frame.columns[slicer]
-            new_values = frame.values[:, slicer]
-        return frame._constructor(new_values, index=new_index,
-                                  columns=new_columns)
+
+        return frame._slice(slicer, axis=axis)
 
 def _maybe_convert_ix(*args):
     """
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 8a0cdb136..7ecdfe52d 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -337,21 +337,29 @@ class BlockManager(object):
         dtypes = [blk.dtype for blk in self.blocks]
         return len(dtypes) == len(set(dtypes))
 
-    def get_slice(self, slice_obj, axis=0):
+    def get_slice(self, slobj, axis=0):
+        new_axes = list(self.axes)
+        new_axes[axis] = new_axes[axis][slobj]
+
         if axis == 0:
-            new_items = self.items[slice_obj]
-            return self.reindex_items(new_items)
+            new_items = new_axes[0]
+            if len(self.blocks) == 1:
+                blk = self.blocks[0]
+                newb = make_block(blk.values[slobj], new_items,
+                                  new_items)
+                new_blocks = [newb]
+            else:
+                return self.reindex_items(new_items)
+        else:
+            new_blocks = self._slice_blocks(slobj, axis)
 
-        new_blocks = self._slice_blocks(slice_obj, axis)
-        new_axes = list(self.axes)
-        new_axes[axis] = new_axes[axis][slice_obj]
         return BlockManager(new_blocks, new_axes)
 
-    def _slice_blocks(self, slice_obj, axis):
+    def _slice_blocks(self, slobj, axis):
         new_blocks = []
 
         slicer = [slice(None, None) for _ in range(self.ndim)]
-        slicer[axis] = slice_obj
+        slicer[axis] = slobj
         slicer = tuple(slicer)
 
         for block in self.blocks:
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index ff2717f3b..e90d0415a 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -862,6 +862,16 @@ class SparseDataFrame(DataFrame):
             else: # pragma: no cover
                 raise
 
+    def _slice(self, slobj, axis=0):
+        if axis == 0:
+            new_index = self.index[slobj]
+            new_columns = self.columns
+        else:
+            new_index = self.index
+            new_columns = self.columns[slobj]
+
+        return self.reindex(index=new_index, columns=new_columns)
+
     def as_matrix(self, columns=None):
         """
         Convert the frame to its Numpy-array matrix representation
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index c0f3c374d..d9dc3f939 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -333,6 +333,15 @@ class CheckIndexing(object):
         frame.ix[:, 'B':'C'] = 4.
         assert_frame_equal(frame, expected)
 
+    def test_fancy_getitem_slice_mixed(self):
+        sliced = self.mixed_frame.ix[:, -3:]
+        self.assert_(sliced['D'].dtype == np.float_)
+
+        # get view with single block
+        sliced = self.frame.ix[:, -3:]
+        sliced['C'] = 4
+        self.assert_((self.frame['C'] == 4).all())
+
     def test_fancy_setitem_int_labels(self):
         # integer index defers to label-based indexing
 
@@ -1106,8 +1115,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         self.assert_(np.array_equal(df.columns, ['foo', 'c', 'bar', 'b', 'a']))
         assert_almost_equal(df['c'], df['bar'])
 
-        self.assertRaises(Exception, df.insert, 1, 'a')
-        self.assertRaises(Exception, df.insert, 1, 'c')
+        self.assertRaises(Exception, df.insert, 1, 'a', df['b'])
+        self.assertRaises(Exception, df.insert, 1, 'c', df['b'])
 
     def test_delitem(self):
         del self.frame['A']
@@ -2429,7 +2438,6 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         cumsum_xs = self.tsframe.cumsum(axis=1)
         self.assertEqual(np.shape(cumsum_xs), np.shape(self.tsframe))
 
-
     def test_cumprod(self):
         self.tsframe.ix[5:10, 0] = nan
         self.tsframe.ix[10:15, 1] = nan
