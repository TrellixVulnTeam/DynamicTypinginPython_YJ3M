commit 137af526a6288d3bd39135af359b6e942c32af6a
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Dec 27 21:17:27 2011 -0500

    TST: core and sparse unit tests pass

diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index f99d08781..f7ee6431d 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -392,7 +392,7 @@ class BlockManager(object):
                                   new_items)
                 new_blocks = [newb]
             else:
-                return self._reindex_items(new_items)
+                return self.reindex_items(new_items)
         else:
             new_blocks = self._slice_blocks(slobj, axis)
 
@@ -455,12 +455,12 @@ class BlockManager(object):
                 # if not, then just call interleave per below
                 mat = blk.values
             else:
-                mat = self._reindex_items(items).as_matrix()
+                mat = self.reindex_items(items).as_matrix()
         else:
             if items is None:
                 mat = self._interleave(self.items)
             else:
-                mat = self._reindex_items(items).as_matrix()
+                mat = self.reindex_items(items).as_matrix()
 
         return mat
 
@@ -658,7 +658,7 @@ class BlockManager(object):
 
         if axis == 0:
             assert(method is None)
-            return self._reindex_items(new_axis)
+            return self.reindex_items(new_axis)
 
         new_axis, indexer = cur_axis.reindex(new_axis, method)
         return self.reindex_indexer(new_axis, indexer, axis=axis)
@@ -714,7 +714,7 @@ class BlockManager(object):
 
         return BlockManager(new_blocks, [new_items] + self.axes[1:])
 
-    def _reindex_items(self, new_items):
+    def reindex_items(self, new_items):
         """
 
         """
@@ -722,7 +722,7 @@ class BlockManager(object):
         data = self
         if not data.is_consolidated():
             data = data.consolidate()
-            return data._reindex_items(new_items)
+            return data.reindex_items(new_items)
 
         # TODO: this part could be faster (!)
         new_items, indexer = self.items.reindex(new_items)
diff --git a/pandas/sparse/frame.py b/pandas/sparse/frame.py
index 0873fe2eb..c4544eb14 100644
--- a/pandas/sparse/frame.py
+++ b/pandas/sparse/frame.py
@@ -376,11 +376,11 @@ class SparseDataFrame(DataFrame):
     #----------------------------------------------------------------------
     # Arithmetic-related methods
 
-    def _combine_frame(self, other, func, fill_value=None):
+    def _combine_frame(self, other, func, fill_value=None, level=None):
         new_index = self.index.union(other.index)
         new_columns = self.columns.union(other.columns)
 
-        if fill_value is not None:
+        if fill_value is not None or level is not None:
             raise NotImplementedError
 
         this = self
@@ -456,7 +456,10 @@ class SparseDataFrame(DataFrame):
         return self._constructor(data=new_data, index=self.index,
                                  columns=self.columns)
 
-    def _reindex_index(self, index, method, copy):
+    def _reindex_index(self, index, method, copy, level):
+        if level is not None:
+            raise Exception('Reindex by level not supported for sparse')
+
         if self.index.equals(index):
             if copy:
                 return self.copy()
@@ -483,7 +486,10 @@ class SparseDataFrame(DataFrame):
         return SparseDataFrame(new_series, index=index, columns=self.columns,
                                default_fill_value=self.default_fill_value)
 
-    def _reindex_columns(self, columns, copy):
+    def _reindex_columns(self, columns, copy, level):
+        if level is not None:
+            raise Exception('Reindex by level not supported for sparse')
+
         # TODO: fill value handling
         sdict = dict((k, v) for k, v in self.iteritems() if k in columns)
         return SparseDataFrame(sdict, index=self.index, columns=columns,
diff --git a/pandas/sparse/tests/test_sparse.py b/pandas/sparse/tests/test_sparse.py
index 09f30c87f..ef1b0a3d2 100644
--- a/pandas/sparse/tests/test_sparse.py
+++ b/pandas/sparse/tests/test_sparse.py
@@ -1279,10 +1279,7 @@ class TestSparsePanel(TestCase,
             dlp = panel.to_dense().to_long()
 
             self.assert_(np.array_equal(slp.values, dlp.values))
-            self.assert_(np.array_equal(slp.major_labels,
-                                        dlp.major_labels))
-            self.assert_(np.array_equal(slp.minor_labels,
-                                        dlp.minor_labels))
+            self.assert_(slp.index.equals(dlp.index))
 
         _compare_with_dense(self.panel)
         _compare_with_dense(self.panel.reindex(items=['ItemA']))
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 9b1228880..d841dda48 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1266,9 +1266,9 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         truncated = ts.truncate(before=self.ts.index[-1] + offset)
         assert(len(truncated) == 0)
 
-        truncated = ts.truncate(before=self.ts.index[-1] + offset,
-                                after=self.ts.index[0] - offset)
-        assert(len(truncated) == 0)
+        self.assertRaises(Exception, ts.truncate,
+                          before=self.ts.index[-1] + offset,
+                          after=self.ts.index[0] - offset)
 
     def test_asof(self):
         self.ts[5:10] = np.NaN
