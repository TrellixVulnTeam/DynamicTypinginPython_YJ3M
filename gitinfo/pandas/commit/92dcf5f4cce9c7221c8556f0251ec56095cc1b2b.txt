commit 92dcf5f4cce9c7221c8556f0251ec56095cc1b2b
Author: Daniel Saxton <daniel.saxton@gmail.com>
Date:   Sat Aug 18 14:48:00 2018 -0500

    ERR: Error message for invalid method in DataFrame.corr (#22298)

diff --git a/doc/source/whatsnew/v0.24.0.txt b/doc/source/whatsnew/v0.24.0.txt
index cf12759c0..8c528e9b2 100644
--- a/doc/source/whatsnew/v0.24.0.txt
+++ b/doc/source/whatsnew/v0.24.0.txt
@@ -496,6 +496,7 @@ Other API Changes
 - :meth:`PeriodIndex.tz_convert` and :meth:`PeriodIndex.tz_localize` have been removed (:issue:`21781`)
 - :class:`Index` subtraction will attempt to operate element-wise instead of raising ``TypeError`` (:issue:`19369`)
 - :class:`pandas.io.formats.style.Styler` supports a ``number-format`` property when using :meth:`~pandas.io.formats.style.Styler.to_excel` (:issue:`22015`)
+- :meth:`DataFrame.corr` and :meth:`Series.corr` now raise a ``ValueError`` along with a helpful error message instead of a ``KeyError`` when supplied with an invalid method (:issue:`22298`)
 
 .. _whatsnew_0240.deprecations:
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 411e3d970..7a10fb102 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -6664,7 +6664,7 @@ class DataFrame(NDFrame):
         elif method == 'spearman':
             correl = libalgos.nancorr_spearman(ensure_float64(mat),
                                                minp=min_periods)
-        else:
+        elif method == 'kendall':
             if min_periods is None:
                 min_periods = 1
             mat = ensure_float64(mat).T
@@ -6688,6 +6688,10 @@ class DataFrame(NDFrame):
                         c = corrf(ac, bc)
                     correl[i, j] = c
                     correl[j, i] = c
+        else:
+            raise ValueError("method must be either 'pearson', "
+                             "'spearman', or 'kendall', '{method}' "
+                             "was supplied".format(method=method))
 
         return self._constructor(correl, index=idx, columns=cols)
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 4b92c6a02..df0fa1c6c 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1932,8 +1932,14 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         this, other = self.align(other, join='inner', copy=False)
         if len(this) == 0:
             return np.nan
-        return nanops.nancorr(this.values, other.values, method=method,
-                              min_periods=min_periods)
+
+        if method in ['pearson', 'spearman', 'kendall']:
+            return nanops.nancorr(this.values, other.values, method=method,
+                                  min_periods=min_periods)
+
+        raise ValueError("method must be either 'pearson', "
+                         "'spearman', or 'kendall', '{method}' "
+                         "was supplied".format(method=method))
 
     def cov(self, other, min_periods=None):
         """
diff --git a/pandas/tests/frame/test_analytics.py b/pandas/tests/frame/test_analytics.py
index f72cf8cda..f06c83363 100644
--- a/pandas/tests/frame/test_analytics.py
+++ b/pandas/tests/frame/test_analytics.py
@@ -130,6 +130,14 @@ class TestDataFrameAnalytics(TestData):
             assert result.index is not result.columns
             assert result.index.equals(result.columns)
 
+    def test_corr_invalid_method(self):
+        # GH PR #22298
+        df = pd.DataFrame(np.random.normal(size=(10, 2)))
+        msg = ("method must be either 'pearson', 'spearman', "
+               "or 'kendall'")
+        with tm.assert_raises_regex(ValueError, msg):
+            df.corr(method="____")
+
     def test_cov(self):
         # min_periods no NAs (corner case)
         expected = self.frame.cov()
diff --git a/pandas/tests/series/test_analytics.py b/pandas/tests/series/test_analytics.py
index 6710b90ef..0b6470fcd 100644
--- a/pandas/tests/series/test_analytics.py
+++ b/pandas/tests/series/test_analytics.py
@@ -780,6 +780,15 @@ class TestSeriesAnalytics(TestData):
         tm.assert_almost_equal(A.corr(B, method='kendall'), kexp)
         tm.assert_almost_equal(A.corr(B, method='spearman'), sexp)
 
+    def test_corr_invalid_method(self):
+        # GH PR #22298
+        s1 = pd.Series(np.random.randn(10))
+        s2 = pd.Series(np.random.randn(10))
+        msg = ("method must be either 'pearson', 'spearman', "
+               "or 'kendall'")
+        with tm.assert_raises_regex(ValueError, msg):
+            s1.corr(s2, method="____")
+
     def test_cov(self):
         # full overlap
         tm.assert_almost_equal(self.ts.cov(self.ts), self.ts.std() ** 2)
