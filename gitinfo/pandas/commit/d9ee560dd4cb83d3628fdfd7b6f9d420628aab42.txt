commit d9ee560dd4cb83d3628fdfd7b6f9d420628aab42
Author: jreback <jeff@reback.net>
Date:   Tue Oct 7 08:53:34 2014 -0400

    CI: add appveyor support

diff --git a/appveyor.yml b/appveyor.yml
new file mode 100644
index 000000000..2a5597b38
--- /dev/null
+++ b/appveyor.yml
@@ -0,0 +1,35 @@
+environment:
+  global:
+    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
+    # /E:ON and /V:ON options are not enabled in the batch script intepreter
+    # See: http://stackoverflow.com/a/13751649/163740
+    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\ci\\run_with_env.cmd"
+
+  matrix:
+    - PYTHON: "C:\\Python27_32"
+      PYTHON_VERSION: "2.7"
+      PYTHON_ARCH: "32"
+
+    - PYTHON: "C:\\Python27_64"
+      PYTHON_VERSION: "2.7"
+      PYTHON_ARCH: "64"
+
+    - PYTHON: "C:\\Python34_32"
+      PYTHON_VERSION: "3.4"
+      PYTHON_ARCH: "32"
+
+    - PYTHON: "C:\\Python34_64"
+      PYTHON_VERSION: "3.4"
+      PYTHON_ARCH: "64"
+
+install:
+  # this installs the appropriate Miniconda (Py2/Py3, 32/64 bit),
+  # as well as pip, conda-build, and the binstar CLI
+  - powershell .\\ci\\install_appveyor.ps1
+  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
+
+build: false
+
+test_script:
+  - "%CMD_IN_ENV% %PYTHON%/python.exe setup.py build_ext --inplace"
+  - "%PYTHON%/Scripts/nosetests -A \"not slow and not network and not disabled\" pandas"
diff --git a/ci/install_appveyor.ps1 b/ci/install_appveyor.ps1
new file mode 100644
index 000000000..756e39f6b
--- /dev/null
+++ b/ci/install_appveyor.ps1
@@ -0,0 +1,133 @@
+# Sample script to install Miniconda under Windows
+# Authors: Olivier Grisel, Jonathan Helmus and Kyle Kastner, Robert McGibbon
+# License: CC0 1.0 Universal: http://creativecommons.org/publicdomain/zero/1.0/
+
+$MINICONDA_URL = "http://repo.continuum.io/miniconda/"
+
+
+function DownloadMiniconda ($python_version, $platform_suffix) {
+    $webclient = New-Object System.Net.WebClient
+    if ($python_version -match "3.4") {
+        $filename = "Miniconda3-3.5.5-Windows-" + $platform_suffix + ".exe"
+    } else {
+        $filename = "Miniconda-3.5.5-Windows-" + $platform_suffix + ".exe"
+    }
+    $url = $MINICONDA_URL + $filename
+
+    $basedir = $pwd.Path + "\"
+    $filepath = $basedir + $filename
+    if (Test-Path $filename) {
+        Write-Host "Reusing" $filepath
+        return $filepath
+    }
+
+    # Download and retry up to 3 times in case of network transient errors.
+    Write-Host "Downloading" $filename "from" $url
+    $retry_attempts = 2
+    for($i=0; $i -lt $retry_attempts; $i++){
+        try {
+            $webclient.DownloadFile($url, $filepath)
+            break
+        }
+        Catch [Exception]{
+            Start-Sleep 1
+        }
+   }
+   if (Test-Path $filepath) {
+       Write-Host "File saved at" $filepath
+   } else {
+       # Retry once to get the error message if any at the last try
+       $webclient.DownloadFile($url, $filepath)
+   }
+   return $filepath
+}
+
+function Start-Executable {
+   param(
+     [String] $FilePath,
+     [String[]] $ArgumentList
+   )
+   $OFS = " "
+   $process = New-Object System.Diagnostics.Process
+   $process.StartInfo.FileName = $FilePath
+   $process.StartInfo.Arguments = $ArgumentList
+   $process.StartInfo.UseShellExecute = $false
+   $process.StartInfo.RedirectStandardOutput = $true
+   if ( $process.Start() ) {
+     $output = $process.StandardOutput.ReadToEnd() `
+       -replace "\r\n$",""
+     if ( $output ) {
+       if ( $output.Contains("`r`n") ) {
+         $output -split "`r`n"
+       }
+       elseif ( $output.Contains("`n") ) {
+         $output -split "`n"
+       }
+       else {
+         $output
+       }
+     }
+     $process.WaitForExit()
+     & "$Env:SystemRoot\system32\cmd.exe" `
+       /c exit $process.ExitCode
+   }
+ }
+
+function InstallMiniconda ($python_version, $architecture, $python_home) {
+    Write-Host "Installing Python" $python_version "for" $architecture "bit architecture to" $python_home
+    if (Test-Path $python_home) {
+        Write-Host $python_home "already exists, skipping."
+        return $false
+    }
+    if ($architecture -match "32") {
+        $platform_suffix = "x86"
+    } else {
+        $platform_suffix = "x86_64"
+    }
+
+    $filepath = DownloadMiniconda $python_version $platform_suffix
+    Write-Host "Installing" $filepath "to" $python_home
+    $install_log = $python_home + ".log"
+    $args = "/S /D=$python_home"
+    Write-Host $filepath $args
+    Start-Process -FilePath $filepath -ArgumentList $args -Wait
+    if (Test-Path $python_home) {
+        Write-Host "Python $python_version ($architecture) installation complete"
+    } else {
+        Write-Host "Failed to install Python in $python_home"
+        Get-Content -Path $install_log
+        Exit 1
+    }
+}
+
+
+function InstallCondaPackages ($python_home, $spec) {
+    $conda_path = $python_home + "\Scripts\conda.exe"
+    $args = "install --yes --quiet " + $spec
+    Write-Host ("conda " + $args)
+    Start-Executable -FilePath "$conda_path" -ArgumentList $args
+}
+function InstallCondaPackagesFromFile ($python_home, $ver, $arch) {
+    $conda_path = $python_home + "\Scripts\conda.exe"
+    $args = "install --yes --quiet --file C:\projects\pandas\ci\requirements-" + $ver + "_" + $arch + ".txt"
+    Write-Host ("conda " + $args)
+    Start-Executable -FilePath "$conda_path" -ArgumentList $args
+}
+
+function UpdateConda ($python_home) {
+    $conda_path = $python_home + "\Scripts\conda.exe"
+    Write-Host "Updating conda..."
+    $args = "update --yes conda"
+    Write-Host $conda_path $args
+    Start-Process -FilePath "$conda_path" -ArgumentList $args -Wait
+}
+
+
+function main () {
+    InstallMiniconda $env:PYTHON_VERSION $env:PYTHON_ARCH $env:PYTHON
+    UpdateConda $env:PYTHON
+    InstallCondaPackages $env:PYTHON "pip setuptools nose"
+    InstallCondaPackagesFromFile $env:PYTHON $env:PYTHON_VERSION $env:PYTHON_ARCH
+}
+
+main
\ No newline at end of file
diff --git a/ci/requirements-2.7_32.txt b/ci/requirements-2.7_32.txt
new file mode 100644
index 000000000..01b305bb6
--- /dev/null
+++ b/ci/requirements-2.7_32.txt
@@ -0,0 +1,11 @@
+dateutil
+pytz
+xlwt
+numpy
+cython
+numexpr
+pytables
+matplotlib
+openpyxl
+xlrd
+scipy
diff --git a/ci/requirements-2.7_64.txt b/ci/requirements-2.7_64.txt
new file mode 100644
index 000000000..01b305bb6
--- /dev/null
+++ b/ci/requirements-2.7_64.txt
@@ -0,0 +1,11 @@
+dateutil
+pytz
+xlwt
+numpy
+cython
+numexpr
+pytables
+matplotlib
+openpyxl
+xlrd
+scipy
diff --git a/ci/requirements-3.4_32.txt b/ci/requirements-3.4_32.txt
new file mode 100644
index 000000000..e9dfe9f0e
--- /dev/null
+++ b/ci/requirements-3.4_32.txt
@@ -0,0 +1,10 @@
+dateutil
+pytz
+openpyxl
+xlrd
+numpy
+cython
+scipy
+numexpr
+pytables
+matplotlib
diff --git a/ci/requirements-3.4_64.txt b/ci/requirements-3.4_64.txt
new file mode 100644
index 000000000..e9dfe9f0e
--- /dev/null
+++ b/ci/requirements-3.4_64.txt
@@ -0,0 +1,10 @@
+dateutil
+pytz
+openpyxl
+xlrd
+numpy
+cython
+scipy
+numexpr
+pytables
+matplotlib
diff --git a/ci/run_with_env.cmd b/ci/run_with_env.cmd
new file mode 100644
index 000000000..3a472bc83
--- /dev/null
+++ b/ci/run_with_env.cmd
@@ -0,0 +1,47 @@
+:: To build extensions for 64 bit Python 3, we need to configure environment
+:: variables to use the MSVC 2010 C++ compilers from GRMSDKX_EN_DVD.iso of:
+:: MS Windows SDK for Windows 7 and .NET Framework 4 (SDK v7.1)
+::
+:: To build extensions for 64 bit Python 2, we need to configure environment
+:: variables to use the MSVC 2008 C++ compilers from GRMSDKX_EN_DVD.iso of:
+:: MS Windows SDK for Windows 7 and .NET Framework 3.5 (SDK v7.0)
+::
+:: 32 bit builds do not require specific environment configurations.
+::
+:: Note: this script needs to be run with the /E:ON and /V:ON flags for the
+:: cmd interpreter, at least for (SDK v7.0)
+::
+:: More details at:
+:: https://github.com/cython/cython/wiki/64BitCythonExtensionsOnWindows
+:: http://stackoverflow.com/a/13751649/163740
+::
+:: Author: Olivier Grisel
+:: License: CC0 1.0 Universal: http://creativecommons.org/publicdomain/zero/1.0/
+@ECHO OFF
+
+SET COMMAND_TO_RUN=%*
+SET WIN_SDK_ROOT=C:\Program Files\Microsoft SDKs\Windows
+
+SET MAJOR_PYTHON_VERSION="%PYTHON_VERSION:~0,1%"
+IF %MAJOR_PYTHON_VERSION% == "2" (
+    SET WINDOWS_SDK_VERSION="v7.0"
+) ELSE IF %MAJOR_PYTHON_VERSION% == "3" (
+    SET WINDOWS_SDK_VERSION="v7.1"
+) ELSE (
+    ECHO Unsupported Python version: "%MAJOR_PYTHON_VERSION%"
+    EXIT 1
+)
+
+IF "%PYTHON_ARCH%"=="64" (
+    ECHO Configuring Windows SDK %WINDOWS_SDK_VERSION% for Python %MAJOR_PYTHON_VERSION% on a 64 bit architecture
+    SET DISTUTILS_USE_SDK=1
+    SET MSSdk=1
+    "%WIN_SDK_ROOT%\%WINDOWS_SDK_VERSION%\Setup\WindowsSdkVer.exe" -q -version:%WINDOWS_SDK_VERSION%
+    "%WIN_SDK_ROOT%\%WINDOWS_SDK_VERSION%\Bin\SetEnv.cmd" /x64 /release
+    ECHO Executing: %COMMAND_TO_RUN%
+    call %COMMAND_TO_RUN% || EXIT 1
+) ELSE (
+    ECHO Using default MSVC build environment for 32 bit architecture
+    ECHO Executing: %COMMAND_TO_RUN%
+    call %COMMAND_TO_RUN% || EXIT 1
+)
