commit aa620c8dfd4199fba4ea8315458956d3fc8eef3c
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat May 5 16:32:59 2012 -0400

    TST: test resample functions as fill_missing values, #1114

diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index 78babb597..abad140d2 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -901,6 +901,9 @@ def is_superperiod(source, target):
     target = target.upper()
     source = source.upper()
     if _is_annual(source):
+        if _is_annual(target):
+            return _get_rule_month(source) == _get_rule_month(target)
+
         if _is_quarterly(target):
             smonth = _get_rule_month(source)
             tmonth = _get_rule_month(target)
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 8fcfb4f07..1915e6d73 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -6,7 +6,7 @@ from pandas import Series, TimeSeries, DataFrame, isnull, notnull
 
 from pandas.tseries.index import date_range
 from pandas.tseries.offsets import Minute, bday
-from pandas.tseries.period import period_range
+from pandas.tseries.period import period_range, PeriodIndex
 from pandas.tseries.resample import DatetimeIndex, TimeGrouper
 import pandas.tseries.offsets as offsets
 
@@ -434,6 +434,25 @@ class TestResamplePeriodIndex(unittest.TestCase):
             expected = expected.resample('Q-MAR', fill_method='ffill')
             assert_series_equal(result, expected.to_period('Q-MAR'))
 
+    def test_resample_fill_missing(self):
+        rng = PeriodIndex([2000, 2005, 2007, 2009], freq='A')
+
+        s = TimeSeries(np.random.randn(4), index=rng)
+
+        stamps = s.to_timestamp()
+
+        filled = s.resample('A')
+        expected = stamps.resample('A').to_period('A')
+        assert_series_equal(filled, expected)
+
+        filled = s.resample('A', fill_method='ffill')
+        expected = stamps.resample('A', fill_method='ffill').to_period('A')
+        assert_series_equal(filled, expected)
+
+    def test_cant_fill_missing_dups(self):
+        rng = PeriodIndex([2000, 2005, 2005, 2007, 2007], freq='A')
+        s = TimeSeries(np.random.randn(5), index=rng)
+        self.assertRaises(Exception, s.resample, 'A')
 
 class TestTimeGrouper(unittest.TestCase):
 
