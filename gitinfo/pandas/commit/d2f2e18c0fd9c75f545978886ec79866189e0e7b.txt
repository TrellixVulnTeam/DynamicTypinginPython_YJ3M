commit d2f2e18c0fd9c75f545978886ec79866189e0e7b
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Nov 7 21:29:14 2011 -0500

    ENH: add wls to moving OLS, re GH #303

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 59a9777ae..0e4d54da6 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -424,17 +424,6 @@ class TextParser(object):
 
         return lines
 
-def _maybe_convert_int_mindex(index, parse_dates, date_parser):
-    for i in range(len(index)):
-        try:
-            int(index[i][0])
-            index[i] = map(int, index[i])
-        except ValueError:
-            if parse_dates:
-                index[i] = lib.try_parse_dates(index[i], date_parser)
-
-    return index
-
 def _convert_to_ndarrays(dct, na_values):
     result = {}
     for c, values in dct.iteritems():
diff --git a/pandas/stats/ols.py b/pandas/stats/ols.py
index 41e3279f3..aee3c34bc 100644
--- a/pandas/stats/ols.py
+++ b/pandas/stats/ols.py
@@ -57,8 +57,6 @@ class OLS(object):
             self.sm_ols = sm.OLS(self._y.values,
                                  self._x.values).fit()
 
-        self._y_raw = self._y_trans.values
-
     def _prepare_data(self):
         """
         Cleans the input for single OLS.
@@ -91,7 +89,7 @@ class OLS(object):
 
     @property
     def _nobs(self):
-        return len(self._y_raw)
+        return len(self._y)
 
     @property
     def nw_lags(self):
@@ -326,7 +324,7 @@ class OLS(object):
         Returns the raw covariance of beta.
         """
         x = self._x.values
-        y = self._y_raw
+        y = self._y.values
 
         xx = np.dot(x.T, x)
 
@@ -523,19 +521,19 @@ class MovingOLS(OLS):
         True if you want an intercept.
     nw_lags: None or int
         Number of Newey-West lags.
-    window_type: int
-        FULL_SAMPLE, ROLLING, EXPANDING.  FULL_SAMPLE by default.
+    window_type: {'full sample', 'rolling', 'expanding'}
+        Default expanding
     window: int
         size of window (for rolling/expanding OLS)
     """
-    def __init__(self, y, x, window_type='expanding',
+    def __init__(self, y, x, weights=None, window_type='expanding',
                  window=None, min_periods=None, intercept=True,
                  nw_lags=None, nw_overlap=False):
 
         self._args = dict(intercept=intercept, nw_lags=nw_lags,
                           nw_overlap=nw_overlap)
 
-        OLS.__init__(self, y=y, x=x, **self._args)
+        OLS.__init__(self, y=y, x=x, weights=weights, **self._args)
 
         self._set_window(window_type, window, min_periods)
 
@@ -762,6 +760,7 @@ class MovingOLS(OLS):
                 return df.values[i:i+1, :]
 
         last = np.zeros((K, K))
+
         for i, date in enumerate(dates):
             if not valid[i]:
                 cum_xx.append(last)
@@ -950,7 +949,7 @@ class MovingOLS(OLS):
     @cache_readonly
     def _resid_raw(self):
         """Returns the raw residuals."""
-        return (self._y_raw - self._y_fitted_raw)
+        return (self._y.values - self._y_fitted_raw)
 
     @cache_readonly
     def _std_err_raw(self):
@@ -1109,10 +1108,13 @@ class MovingOLS(OLS):
     def _beta_matrix(self, lag=0):
         assert(lag >= 0)
 
+        betas = self._beta_raw
+
         labels = np.arange(len(self._y)) - lag
         indexer = self._valid_obs_labels.searchsorted(labels, side='left')
+        indexer[indexer == len(betas)] = len(betas) - 1
 
-        beta_matrix = self._beta_raw[indexer]
+        beta_matrix = betas[indexer]
         beta_matrix[labels < self._valid_obs_labels[0]] = np.NaN
 
         return beta_matrix
@@ -1202,7 +1204,7 @@ def _filter_data(lhs, rhs, weights=None):
         combined['__weights__'] = weights
 
     valid = (combined.count(1) == len(combined.columns)).values
-
+    index = combined.index
     combined = combined[valid]
 
     if weights is not None:
@@ -1214,7 +1216,7 @@ def _filter_data(lhs, rhs, weights=None):
     filt_rhs = combined
 
     return (filt_lhs, filt_rhs, filt_weights,
-            pre_filt_rhs, combined.index, valid)
+            pre_filt_rhs, index, valid)
 
 # A little kludge so we can use this method for both
 # MovingOLS and MovingPanelOLS
diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index 937b7cb33..c6426bf39 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -10,9 +10,10 @@ from datetime import datetime
 import unittest
 import numpy as np
 
-from pandas.core.panel import LongPanel, Panel
-from pandas.core.api import DataFrame, Index, Series, notnull
+from pandas.core.panel import Panel
+from pandas import DataFrame, Index, DateRange, Series, notnull, datetools
 from pandas.stats.api import ols
+from pandas.stats.ols import _filter_data
 from pandas.stats.plm import NonPooledPanelOLS, PanelOLS
 from pandas.util.testing import (assert_almost_equal, assert_series_equal,
                                  assert_frame_equal)
@@ -78,7 +79,7 @@ class TestOLS(BaseTest):
 
     def testWLS(self):
         X = DataFrame(np.random.randn(30, 4), columns=['A', 'B', 'C', 'D'])
-        Y = np.random.randn(30)
+        Y = Series(np.random.randn(30))
         weights = X.std(1)
 
         self._check_wls(X, Y, weights)
@@ -104,6 +105,9 @@ class TestOLS(BaseTest):
         assert_almost_equal(sm_result.params, result._beta_raw)
         assert_almost_equal(sm_result.resid, result._resid_raw)
 
+        self.checkMovingOLS('rolling', x, y, weights=weights)
+        self.checkMovingOLS('expanding', x, y, weights=weights)
+
     def checkDataSet(self, dataset, start=None, end=None, skip_moving=False):
         exog = dataset.exog[start : end]
         endog = dataset.endog[start : end]
@@ -144,15 +148,16 @@ class TestOLS(BaseTest):
 
         _check_non_raw_results(result)
 
-    def checkMovingOLS(self, window_type, x, y, **kwds):
+    def checkMovingOLS(self, window_type, x, y, weights=None, **kwds):
         from scikits.statsmodels.tools.tools import rank
         window = rank(x.values) * 2
 
-        moving = ols(y=y, x=x, window_type=window_type,
+        moving = ols(y=y, x=x, weights=weights, window_type=window_type,
                      window=window, **kwds)
 
         # check that sparse version is the same
         sparse_moving = ols(y=y.to_sparse(), x=x.to_sparse(),
+                            weights=weights,
                             window_type=window_type,
                             window=window, **kwds)
         _compare_ols_results(moving, sparse_moving)
@@ -172,7 +177,7 @@ class TestOLS(BaseTest):
                 x_iter[k] = v.truncate(before=prior_date, after=date)
             y_iter = y.truncate(before=prior_date, after=date)
 
-            static = ols(y=y_iter, x=x_iter, **kwds)
+            static = ols(y=y_iter, x=x_iter, weights=weights, **kwds)
 
             self.compare(static, moving, event_index=i,
                          result_index=n)
@@ -186,15 +191,20 @@ class TestOLS(BaseTest):
     def compare(self, static, moving, event_index=None,
                 result_index=None):
 
+        index = moving._index
+
         # Check resid if we have a time index specified
         if event_index is not None:
             ref = static._resid_raw[-1]
-            res = moving._resid_raw[event_index]
+
+            label = index[event_index]
+
+            res = moving.resid[label]
 
             assert_almost_equal(ref, res)
 
             ref = static._y_fitted_raw[-1]
-            res = moving._y_fitted_raw[event_index]
+            res = moving.y_fitted[label]
 
             assert_almost_equal(ref, res)
 
@@ -658,6 +668,83 @@ def _period_slice(panelModel, i):
 
     return slice(L, R)
 
+class TestOLSFilter(unittest.TestCase):
+
+    def setUp(self):
+        date_index = DateRange(datetime(2009, 12, 11), periods=3,
+                               offset=datetools.bday)
+        ts = Series([3, 1, 4], index=date_index)
+        self.TS1 = ts
+
+        date_index = DateRange(datetime(2009, 12, 11), periods=5,
+                               offset=datetools.bday)
+        ts = Series([1, 5, 9, 2, 6], index=date_index)
+        self.TS2 = ts
+
+        date_index = DateRange(datetime(2009, 12, 11), periods=3,
+                               offset=datetools.bday)
+        ts = Series([5, np.nan, 3], index=date_index)
+        self.TS3 = ts
+
+        date_index = DateRange(datetime(2009, 12, 11), periods=5,
+                               offset=datetools.bday)
+        ts = Series([np.nan, 5, 8, 9, 7], index=date_index)
+        self.TS4 = ts
+
+        data = {'x1' : self.TS2, 'x2' : self.TS4}
+        self.DF1 = DataFrame(data=data)
+
+        data = {'x1' : self.TS2, 'x2' : self.TS4}
+        self.DICT1 = data
+
+    def testFilterWithSeriesRHS(self):
+        (lhs, rhs, weights, rhs_pre,
+        index, valid) = _filter_data(self.TS1, {'x1' : self.TS2}, None)
+        self.tsAssertEqual(self.TS1, lhs)
+        self.tsAssertEqual(self.TS2[:3], rhs['x1'])
+        self.tsAssertEqual(self.TS2, rhs_pre['x1'])
+
+    def testFilterWithSeriesRHS2(self):
+        (lhs, rhs, weights, rhs_pre,
+        index, valid) = _filter_data(self.TS2, {'x1' : self.TS1}, None)
+        self.tsAssertEqual(self.TS2[:3], lhs)
+        self.tsAssertEqual(self.TS1, rhs['x1'])
+        self.tsAssertEqual(self.TS1, rhs_pre['x1'])
+
+    def testFilterWithSeriesRHS3(self):
+        (lhs, rhs, weights, rhs_pre,
+        index, valid) = _filter_data(self.TS3, {'x1' : self.TS4}, None)
+        exp_lhs = self.TS3[2:3]
+        exp_rhs = self.TS4[2:3]
+        exp_rhs_pre = self.TS4[1:]
+        self.tsAssertEqual(exp_lhs, lhs)
+        self.tsAssertEqual(exp_rhs, rhs['x1'])
+        self.tsAssertEqual(exp_rhs_pre, rhs_pre['x1'])
+
+    def testFilterWithDataFrameRHS(self):
+        (lhs, rhs, weights, rhs_pre,
+        index, valid) = _filter_data(self.TS1, self.DF1, None)
+        exp_lhs = self.TS1[1:]
+        exp_rhs1 = self.TS2[1:3]
+        exp_rhs2 = self.TS4[1:3]
+        self.tsAssertEqual(exp_lhs, lhs)
+        self.tsAssertEqual(exp_rhs1, rhs['x1'])
+        self.tsAssertEqual(exp_rhs2, rhs['x2'])
+
+    def testFilterWithDictRHS(self):
+        (lhs, rhs, weights, rhs_pre,
+        index, valid) = _filter_data(self.TS1, self.DICT1, None)
+        exp_lhs = self.TS1[1:]
+        exp_rhs1 = self.TS2[1:3]
+        exp_rhs2 = self.TS4[1:3]
+        self.tsAssertEqual(exp_lhs, lhs)
+        self.tsAssertEqual(exp_rhs1, rhs['x1'])
+        self.tsAssertEqual(exp_rhs2, rhs['x2'])
+
+    def tsAssertEqual(self, ts1, ts2):
+        self.assert_(np.array_equal(ts1, ts2))
+
+
 if __name__ == '__main__':
     import nose
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
