commit 8ffdf7a8d6500f3e68e6aea4344a4bbe60277568
Author: William Ayd <william.ayd@gmail.com>
Date:   Wed Jul 17 04:52:35 2019 -0700

    Reallow usecols to reference OOB indices - reverts 25623 (#27426)

diff --git a/doc/source/whatsnew/v0.25.0.rst b/doc/source/whatsnew/v0.25.0.rst
index 58b5ca87b..59cd6615b 100644
--- a/doc/source/whatsnew/v0.25.0.rst
+++ b/doc/source/whatsnew/v0.25.0.rst
@@ -1130,7 +1130,6 @@ I/O
 - Bug in :meth:`DataFrame.to_html` where header numbers would ignore display options when rounding (:issue:`17280`)
 - Bug in :func:`read_hdf` where reading a table from an HDF5 file written directly with PyTables fails with a ``ValueError`` when using a sub-selection via the ``start`` or ``stop`` arguments (:issue:`11188`)
 - Bug in :func:`read_hdf` not properly closing store after a ``KeyError`` is raised (:issue:`25766`)
-- Bug in ``read_csv`` which would not raise ``ValueError`` if a column index in ``usecols`` was out of bounds (:issue:`25623`)
 - Improved the explanation for the failure when value labels are repeated in Stata dta files and suggested work-arounds (:issue:`25772`)
 - Improved :meth:`pandas.read_stata` and :class:`pandas.io.stata.StataReader` to read incorrectly formatted 118 format files saved by Stata (:issue:`25960`)
 - Improved the ``col_space`` parameter in :meth:`DataFrame.to_html` to accept a string so CSS length values can be set correctly (:issue:`25941`)
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 6cc47b984..300f17bd2 100755
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -1947,12 +1947,6 @@ class CParserWrapper(ParserBase):
             ):
                 _validate_usecols_names(usecols, self.orig_names)
 
-            # GH 25623
-            # validate that column indices in usecols are not out of bounds
-            elif self.usecols_dtype == "integer":
-                indices = range(self._reader.table_width)
-                _validate_usecols_names(usecols, indices)
-
             if len(self.names) > len(usecols):
                 self.names = [
                     n
@@ -2258,7 +2252,7 @@ class PythonParser(ParserBase):
         self.skipinitialspace = kwds["skipinitialspace"]
         self.lineterminator = kwds["lineterminator"]
         self.quoting = kwds["quoting"]
-        self.usecols, self.usecols_dtype = _validate_usecols_arg(kwds["usecols"])
+        self.usecols, _ = _validate_usecols_arg(kwds["usecols"])
         self.skip_blank_lines = kwds["skip_blank_lines"]
 
         self.warn_bad_lines = kwds["warn_bad_lines"]
@@ -2665,13 +2659,6 @@ class PythonParser(ParserBase):
             if clear_buffer:
                 self._clear_buffer()
 
-            # GH 25623
-            # validate that column indices in usecols are not out of bounds
-            if self.usecols_dtype == "integer":
-                for col in columns:
-                    indices = range(len(col))
-                    _validate_usecols_names(self.usecols, indices)
-
             if names is not None:
                 if (self.usecols is not None and len(names) != len(self.usecols)) or (
                     self.usecols is None and len(names) != len(columns[0])
@@ -2706,11 +2693,6 @@ class PythonParser(ParserBase):
             ncols = len(line)
             num_original_columns = ncols
 
-            # GH 25623
-            # validate that column indices in usecols are not out of bounds
-            if self.usecols_dtype == "integer":
-                _validate_usecols_names(self.usecols, range(ncols))
-
             if not names:
                 if self.prefix:
                     columns = [
diff --git a/pandas/tests/io/parser/test_usecols.py b/pandas/tests/io/parser/test_usecols.py
index 47c4f93fb..afe19608e 100644
--- a/pandas/tests/io/parser/test_usecols.py
+++ b/pandas/tests/io/parser/test_usecols.py
@@ -22,25 +22,6 @@ _msg_validate_usecols_names = (
 )
 
 
-@pytest.mark.parametrize(
-    "names,usecols,missing",
-    [
-        (None, [0, 3], r"\[3\]"),
-        (["a", "b", "c"], [0, -1, 2], r"\[-1\]"),
-        (None, [3], r"\[3\]"),
-        (["a"], [3], r"\[3\]"),
-    ],
-)
-def test_usecols_out_of_bounds(all_parsers, names, usecols, missing):
-    # See gh-25623
-    data = "a,b,c\n1,2,3\n4,5,6"
-    parser = all_parsers
-
-    mssg = _msg_validate_usecols_names.format(missing)
-    with pytest.raises(ValueError, match=mssg):
-        parser.read_csv(StringIO(data), usecols=usecols, names=names)
-
-
 def test_raise_on_mixed_dtype_usecols(all_parsers):
     # See gh-12678
     data = """a,b,c
