commit 3b76e9f1e5968da29a64dd99983b86474e1a9651
Author: Chang She <chang@lambdafoundry.com>
Date:   Sun Apr 29 17:43:37 2012 -0400

    BUG: Frequency strings don't work with loffset parameter in resampling GH #1163

diff --git a/pandas/tseries/resample.py b/pandas/tseries/resample.py
index 85fdb8901..ca653822a 100644
--- a/pandas/tseries/resample.py
+++ b/pandas/tseries/resample.py
@@ -109,11 +109,15 @@ class TimeGrouper(CustomGrouper):
             # this is sort of a hack
             result = obj.reindex(binner[1:], method=self.fill_method)
 
-        if isinstance(self.loffset, (DateOffset, timedelta)):
+        loffset = self.loffset
+        if isinstance(loffset, basestring):
+            loffset = to_offset(self.loffset)
+
+        if isinstance(loffset, (DateOffset, timedelta)):
             if (isinstance(result.index, DatetimeIndex)
                 and len(result.index) > 0):
 
-                result.index = result.index + self.loffset
+                result.index = result.index + loffset
 
         return result
 
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 80ccc3ad4..864d7971d 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -2,7 +2,7 @@ from datetime import datetime, timedelta
 
 import numpy as np
 
-from pandas import Series, DataFrame, isnull, notnull
+from pandas import Series, DataFrame, isnull, notnull, datetools
 
 from pandas.tseries.index import date_range
 from pandas.tseries.offsets import Minute, bday
@@ -163,6 +163,7 @@ class TestResample(unittest.TestCase):
     def test_resample_loffset(self):
         rng = date_range('1/1/2000 00:00:00', '1/1/2000 00:13:00', freq='min')
         s = Series(np.random.randn(14), index=rng)
+
         result = s.resample('5min', how='mean', closed='right', label='right',
                             loffset=timedelta(minutes=1))
         idx = date_range('1/1/2000', periods=4, freq='5min')
@@ -170,6 +171,14 @@ class TestResample(unittest.TestCase):
                           index=idx + timedelta(minutes=1))
         assert_series_equal(result, expected)
 
+        expected = s.resample('5min', how='mean', closed='right', label='right',
+                              loffset='1min')
+        assert_series_equal(result, expected)
+
+        expected = s.resample('5min', how='mean', closed='right', label='right',
+                              loffset=datetools.Minute(1))
+        assert_series_equal(result, expected)
+
         self.assert_(result.index.freq == Minute(5))
 
                 # from daily
