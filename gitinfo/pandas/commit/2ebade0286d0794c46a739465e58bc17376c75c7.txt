commit 2ebade0286d0794c46a739465e58bc17376c75c7
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Dec 15 14:34:04 2009 +0000

    few more unit tests
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@85 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/examples/regressions.py b/examples/regressions.py
index a01df5774..f4383d9a5 100644
--- a/examples/regressions.py
+++ b/examples/regressions.py
@@ -44,4 +44,6 @@ Y = makeDataMatrix()
 
 panelModel = ols(y=Y, x=data, window=50)
 
+model = ols(y=Y, x=data)
+
 print panelModel
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index a76dea3c2..27b8467ed 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -82,7 +82,7 @@ class DataFrame(Picklable, Groupable):
         elif index is not None:
             self.index = index
         else:
-            raise Exception('DataFrame constructor not properly called!')
+            self.index = NULL_INDEX
 
     def _set_index(self, index):
         if isinstance(index, Index):
@@ -141,7 +141,6 @@ class DataFrame(Picklable, Groupable):
             index = inputDict.values()[0].keys()
             if not isinstance(index, Index):
                 index = Index(sorted(index))
-
         else:
             # GET set of indices
             indices = set([])
@@ -175,12 +174,7 @@ class DataFrame(Picklable, Groupable):
         ------
         nested dict mapping: {column -> index -> value}
         """
-        tree = {}
-        for col, series in self.iteritems():
-            tree[col] = branch = {}
-            for i in self.index:
-                branch[i] = series[i]
-        return tree
+        return dict((k, v.toDict()) for k, v in self.iteritems())
 
     @classmethod
     def fromRecords(cls, data, indexField=None):
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index 5ddeabdb7..815356e6a 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -10,7 +10,7 @@ import numpy as np
 from pandas.core.api import DateRange, DataFrame, Index, Series
 from pandas.core.datetools import bday
 
-from pandas.core.tests.common import assert_almost_equal
+from pandas.core.tests.common import assert_almost_equal, randn
 import pandas.core.tests.common as common
 
 #-------------------------------------------------------------------------------
@@ -42,8 +42,8 @@ class TestDataFrame(unittest.TestCase):
         }
 
     def test_constructor(self):
-
-        self.assertRaises(Exception, DataFrame)
+        df = DataFrame()
+        self.assert_(len(df.index) == 0)
 
     def test_constructor_mixed(self):
         index, data = common.getMixedTypeDict()
@@ -75,7 +75,7 @@ class TestDataFrame(unittest.TestCase):
         # can't cast to float
         test_data = {
                 'A' : dict(zip(range(20), common.makeDateIndex(20))),
-                'B' : dict(zip(range(15), common.randn(15)))
+                'B' : dict(zip(range(15), randn(15)))
         }
         frame = self.klass.fromDict(test_data)
         self.assertEqual(len(frame), 20)
@@ -87,9 +87,21 @@ class TestDataFrame(unittest.TestCase):
         self.assertEqual(len(self.klass.fromDict()), 0)
         self.assertRaises(Exception, self.klass.fromDict, [self.ts1, self.ts2])
 
+        # Length-one dict micro-optimization
+        frame = self.klass.fromDict({'A' : {'1' : 1, '2' : 2}})
+        self.assert_(np.array_equal(frame.index, ['1', '2']))
+
     def test_toDict(self):
-        pass
+        test_data = {
+                'A' : {'1' : 1, '2' : 2},
+                'B' : {'1' : '1', '2' : '2', '3' : '3'},
+        }
+        recons_data = self.klass.fromDict(test_data, castFloat=False).toDict()
 
+        for k, v in test_data.iteritems():
+            for k2, v2 in v.iteritems():
+                self.assertEqual(v2, recons_data[k][k2])
+        
     def test_fromRecords(self):
         # from numpy documentation
         arr = np.zeros((2,),dtype=('i4,f4,a10'))
@@ -118,8 +130,12 @@ class TestDataFrame(unittest.TestCase):
                           mat, ['A', 'B'], [1, 2])
 
     def test_nonzero(self):
-        pass
+        empty = DataFrame({})
+
+        self.assertFalse(empty)
 
+        self.assert_(self.frame)
+        
     def test_repr(self):
         # small one
         foo = repr(self.frame)
@@ -133,7 +149,7 @@ class TestDataFrame(unittest.TestCase):
         foo = repr(self.mixed_frame)
 
         # big mixed
-        biggie = self.klass({'A' : common.randn(1000),
+        biggie = self.klass({'A' : randn(1000),
                              'B' : common.makeStringIndex(1000)},
                             index=range(1000))
         foo = repr(biggie)
@@ -187,7 +203,12 @@ class TestDataFrame(unittest.TestCase):
         assert((self.frame['col8'] == 'foo').all())
 
         self.assertRaises(Exception, self.frame.__setitem__,
-                          common.randn(len(self.frame) + 1))
+                          randn(len(self.frame) + 1))
+
+        # set ndarray
+        arr = randn(len(self.frame))
+        self.frame['col9'] = arr
+        self.assert_((self.frame['col9'] == arr).all())
 
     def test_delitem(self):
         del self.frame['A']
@@ -349,6 +370,7 @@ class TestDataFrame(unittest.TestCase):
 
     def test_reindex(self):
         newFrame = self.frame.reindex(self.ts1.index)
+
         for col in newFrame.cols():
             for idx, val in newFrame[col].iteritems():
                 if idx in self.frame.index:
@@ -358,12 +380,15 @@ class TestDataFrame(unittest.TestCase):
                         self.assertEqual(val, self.frame[col][idx])
                 else:
                     self.assert_(np.isnan(val))
+
         for col, series in newFrame.iteritems():
             self.assert_(common.equalContents(series.index, newFrame.index))
         emptyFrame = self.frame.reindex(Index([]))
         self.assert_(len(emptyFrame.index) == 0)
 
+        # Cython code should be unit-tested directly
         nonContigFrame = self.frame.reindex(self.ts1.index[::2])
+
         for col in nonContigFrame.cols():
             for idx, val in nonContigFrame[col].iteritems():
                 if idx in self.frame.index:
@@ -373,9 +398,23 @@ class TestDataFrame(unittest.TestCase):
                         self.assertEqual(val, self.frame[col][idx])
                 else:
                     self.assert_(np.isnan(val))
+
         for col, series in nonContigFrame.iteritems():
             self.assert_(common.equalContents(series.index, nonContigFrame.index))
 
+        # corner cases
+
+        # Same index, copies values
+        newFrame = self.frame.reindex(self.frame.index)
+        self.assert_(newFrame.index is self.frame.index)
+
+        # length zero
+        newFrame = self.frame.reindex([])
+        self.assert_(not newFrame)
+
+    def test_reindex_mixed(self):
+        pass
+        
     def test_transpose(self):
         frame = self.frame
         dft = frame.T
diff --git a/pandas/lib/tests/test_tseries.py b/pandas/lib/tests/test_tseries.py
new file mode 100644
index 000000000..9af73ed45
--- /dev/null
+++ b/pandas/lib/tests/test_tseries.py
@@ -0,0 +1,29 @@
+import unittest
+
+import numpy as np
+
+class TestTseriesUtil(unittest.TestCase):
+
+    def test_combineFunc(self):
+        pass
+
+    def test_reindex(self):
+        pass
+
+    def test_isnull(self):
+        pass
+
+    def test_groupby(self):
+        pass
+
+    def test_groupby_withnull(self):
+        pass
+
+    def test_getMergeVec(self):
+        pass
+
+    def test_getFillVec(self):
+        pass
+
+class TestMoments(unittest.TestCase):
+    pass
diff --git a/setup.py b/setup.py
index 2a5394a7b..5d2f72b96 100644
--- a/setup.py
+++ b/setup.py
@@ -20,7 +20,7 @@ MAINTAINER_EMAIL = "wesmckinn@gmail.com"
 URL = "pandas.googlecode.com"
 DOWNLOAD_URL = ''
 CLASSIFIERS = [
-    'Development Status :: 3 - Alpha',
+    'Development Status :: 4 - Beta',
     'Environment :: Console',
     'Operating System :: OS Independent',
     'Intended Audience :: Science/Research',
@@ -83,7 +83,7 @@ if __name__ == '__main__':
     setup(configuration=configuration,
           packages=setuptools.find_packages(),
           classifiers=CLASSIFIERS,
-          requires=['numpy', 'scikits.statsmodels', 'dateutil'],
+          requires=['numpy', 'scipy', 'scikits.statsmodels', 'dateutil'],
           platforms='any',
           test_suite='nose.collector',
           zip_safe=False)
