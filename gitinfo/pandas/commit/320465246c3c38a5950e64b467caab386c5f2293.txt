commit 320465246c3c38a5950e64b467caab386c5f2293
Author: jreback <jeff@reback.net>
Date:   Thu Jan 2 06:42:04 2014 -0500

    COMPAT: allow string concats to datetimeindex only (int/float are invalid)

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 0b25d0f6a..95f7f7e71 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -73,6 +73,7 @@ Bug Fixes
 ~~~~~~~~~
   - Bug in Series replace with timestamp dict (:issue:`5797`)
   - read_csv/read_table now respects the `prefix` kwarg (:issue:`5732`).
+  - Bug with insert of strings into DatetimeIndex (:issue:`5818`, :issue:`5819`)
 
 pandas 0.13.0
 -------------
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index bfddd2e78..9a9e3caa9 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -1455,7 +1455,6 @@ def _safe_append_to_index(index, key):
 
         # raise here as this is basically an unsafe operation and we want
         # it to be obvious that you are doing something wrong
-
         raise ValueError("unsafe appending to index of type {0} with a key "
                          "{1}".format(index.__class__.__name__, key))
 
diff --git a/pandas/sparse/tests/test_sparse.py b/pandas/sparse/tests/test_sparse.py
index bd05a7093..70f1e50f4 100644
--- a/pandas/sparse/tests/test_sparse.py
+++ b/pandas/sparse/tests/test_sparse.py
@@ -1084,8 +1084,10 @@ class TestSparseDataFrame(tm.TestCase, test_frame.SafeForSparse):
 
     def test_set_value(self):
 
-        # this is invalid because it is not a valid type for this index
-        self.assertRaises(ValueError, self.frame.set_value, 'foobar', 'B', 1.5)
+        # ok as the index gets conver to object
+        frame = self.frame.copy()
+        res = frame.set_value('foobar', 'B', 1.5)
+        self.assert_(res.index.dtype == 'object')
 
         res = self.frame
         res.index = res.index.astype(object)
diff --git a/pandas/tests/test_indexing.py b/pandas/tests/test_indexing.py
index fe3aac0e9..ee57902bd 100644
--- a/pandas/tests/test_indexing.py
+++ b/pandas/tests/test_indexing.py
@@ -1665,15 +1665,13 @@ class TestIndexing(tm.TestCase):
 
         df = tm.makeTimeDataFrame()
 
+        # don't allow not string inserts
         def f():
             df.loc[100.0, :] = df.ix[0]
         self.assertRaises(ValueError, f)
         def f():
             df.loc[100,:] = df.ix[0]
         self.assertRaises(ValueError, f)
-        def f():
-            df.loc['a',:] = df.ix[0]
-        self.assertRaises(ValueError, f)
 
         def f():
             df.ix[100.0, :] = df.ix[0]
@@ -1682,6 +1680,9 @@ class TestIndexing(tm.TestCase):
             df.ix[100,:] = df.ix[0]
         self.assertRaises(ValueError, f)
 
+        # allow object conversion here
+        df.loc['a',:] = df.ix[0]
+
     def test_partial_set_empty(self):
 
         # GH5226
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 39aeeda0b..8cf11dd92 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -1548,9 +1548,11 @@ class DatetimeIndex(Int64Index):
                                     self[loc:].asi8))
             return DatetimeIndex(new_index, freq='infer')
         except (AttributeError, TypeError):
-            # fall back to object index
-            return self.asobject.insert(loc, item)
 
+            # fall back to object index
+            if isinstance(item,compat.string_types):
+                return self.asobject.insert(loc, item)
+            raise TypeError("cannot insert DatetimeIndex with incompatible label")
 
     def delete(self, loc):
         """
@@ -1591,7 +1593,7 @@ class DatetimeIndex(Int64Index):
     def tz_localize(self, tz, infer_dst=False):
         """
         Localize tz-naive DatetimeIndex to given time zone (using pytz)
-       
+
         Parameters
         ----------
         tz : string or pytz.timezone
