commit e39cd30f98ee0ec3fd662059c39e77f5e16f41fa
Author: Ram Rachum <ram@rachum.com>
Date:   Wed Feb 26 14:44:50 2020 +0200

    Fix exception causes in 14 modules (#32235)

diff --git a/pandas/io/sql.py b/pandas/io/sql.py
index e97872d88..9a53e7cd2 100644
--- a/pandas/io/sql.py
+++ b/pandas/io/sql.py
@@ -238,8 +238,8 @@ def read_sql_table(
     meta = MetaData(con, schema=schema)
     try:
         meta.reflect(only=[table_name], views=True)
-    except sqlalchemy.exc.InvalidRequestError:
-        raise ValueError(f"Table {table_name} not found")
+    except sqlalchemy.exc.InvalidRequestError as err:
+        raise ValueError(f"Table {table_name} not found") from err
 
     pandas_sql = SQLDatabase(con, meta=meta)
     table = pandas_sql.read_table(
@@ -685,7 +685,7 @@ class SQLTable(PandasObject):
             try:
                 temp.reset_index(inplace=True)
             except ValueError as err:
-                raise ValueError(f"duplicate name in index/columns: {err}")
+                raise ValueError(f"duplicate name in index/columns: {err}") from err
         else:
             temp = self.frame
 
@@ -1387,8 +1387,8 @@ _SQL_TYPES = {
 def _get_unicode_name(name):
     try:
         uname = str(name).encode("utf-8", "strict").decode("utf-8")
-    except UnicodeError:
-        raise ValueError(f"Cannot convert identifier to UTF-8: '{name}'")
+    except UnicodeError as err:
+        raise ValueError(f"Cannot convert identifier to UTF-8: '{name}'") from err
     return uname
 
 
diff --git a/pandas/io/stata.py b/pandas/io/stata.py
index 593228e99..0397dfa92 100644
--- a/pandas/io/stata.py
+++ b/pandas/io/stata.py
@@ -1161,8 +1161,8 @@ class StataReader(StataParser, abc.Iterator):
                 return typ
             try:
                 return self.TYPE_MAP_XML[typ]
-            except KeyError:
-                raise ValueError(f"cannot convert stata types [{typ}]")
+            except KeyError as err:
+                raise ValueError(f"cannot convert stata types [{typ}]") from err
 
         typlist = [f(x) for x in raw_typlist]
 
@@ -1171,8 +1171,8 @@ class StataReader(StataParser, abc.Iterator):
                 return str(typ)
             try:
                 return self.DTYPE_MAP_XML[typ]
-            except KeyError:
-                raise ValueError(f"cannot convert stata dtype [{typ}]")
+            except KeyError as err:
+                raise ValueError(f"cannot convert stata dtype [{typ}]") from err
 
         dtyplist = [g(x) for x in raw_typlist]
 
@@ -1296,14 +1296,14 @@ class StataReader(StataParser, abc.Iterator):
 
         try:
             self.typlist = [self.TYPE_MAP[typ] for typ in typlist]
-        except ValueError:
+        except ValueError as err:
             invalid_types = ",".join(str(x) for x in typlist)
-            raise ValueError(f"cannot convert stata types [{invalid_types}]")
+            raise ValueError(f"cannot convert stata types [{invalid_types}]") from err
         try:
             self.dtyplist = [self.DTYPE_MAP[typ] for typ in typlist]
-        except ValueError:
+        except ValueError as err:
             invalid_dtypes = ",".join(str(x) for x in typlist)
-            raise ValueError(f"cannot convert stata dtypes [{invalid_dtypes}]")
+            raise ValueError(f"cannot convert stata dtypes [{invalid_dtypes}]") from err
 
         if self.format_version > 108:
             self.varlist = [
@@ -1761,7 +1761,7 @@ the string values returned are correct."""
                         categories.append(category)  # Partially labeled
                 try:
                     cat_data.categories = categories
-                except ValueError:
+                except ValueError as err:
                     vc = Series(categories).value_counts()
                     repeated_cats = list(vc.index[vc > 1])
                     repeats = "-" * 80 + "\n" + "\n".join(repeated_cats)
@@ -1777,7 +1777,7 @@ value_labels.
 The repeated labels are:
 {repeats}
 """
-                    raise ValueError(msg)
+                    raise ValueError(msg) from err
                 # TODO: is the next line needed above in the data(...) method?
                 cat_series = Series(cat_data, index=data.index)
                 cat_converted_data.append((col, cat_series))
@@ -3143,11 +3143,11 @@ class StataWriter117(StataWriter):
                     raise ValueError("Variable labels must be 80 characters or fewer")
                 try:
                     encoded = label.encode(self._encoding)
-                except UnicodeEncodeError:
+                except UnicodeEncodeError as err:
                     raise ValueError(
                         "Variable labels must contain only characters that "
                         f"can be encoded in {self._encoding}"
-                    )
+                    ) from err
 
                 bio.write(_pad_bytes_new(encoded, vl_len + 1))
             else:
diff --git a/pandas/tests/extension/arrow/arrays.py b/pandas/tests/extension/arrow/arrays.py
index cd4b43c83..ffebc9f8b 100644
--- a/pandas/tests/extension/arrow/arrays.py
+++ b/pandas/tests/extension/arrow/arrays.py
@@ -148,8 +148,8 @@ class ArrowExtensionArray(ExtensionArray):
 
         try:
             op = getattr(arr, method)
-        except AttributeError:
-            raise TypeError
+        except AttributeError as err:
+            raise TypeError from err
         return op(**kwargs)
 
     def any(self, axis=0, out=None):
diff --git a/pandas/tests/extension/decimal/array.py b/pandas/tests/extension/decimal/array.py
index 2614d8c72..9384ed519 100644
--- a/pandas/tests/extension/decimal/array.py
+++ b/pandas/tests/extension/decimal/array.py
@@ -183,8 +183,10 @@ class DecimalArray(ExtensionArray, ExtensionScalarOpsMixin):
 
         try:
             op = getattr(self.data, name)
-        except AttributeError:
-            raise NotImplementedError(f"decimal does not support the {name} operation")
+        except AttributeError as err:
+            raise NotImplementedError(
+                f"decimal does not support the {name} operation"
+            ) from err
         return op(axis=0)
 
 
diff --git a/pandas/tests/extension/json/array.py b/pandas/tests/extension/json/array.py
index a229a824d..1f026e405 100644
--- a/pandas/tests/extension/json/array.py
+++ b/pandas/tests/extension/json/array.py
@@ -137,13 +137,13 @@ class JSONArray(ExtensionArray):
                 output = [
                     self.data[loc] if loc != -1 else fill_value for loc in indexer
                 ]
-            except IndexError:
-                raise IndexError(msg)
+            except IndexError as err:
+                raise IndexError(msg) from err
         else:
             try:
                 output = [self.data[loc] for loc in indexer]
-            except IndexError:
-                raise IndexError(msg)
+            except IndexError as err:
+                raise IndexError(msg) from err
 
         return self._from_sequence(output)
 
diff --git a/pandas/tests/extension/list/array.py b/pandas/tests/extension/list/array.py
index 7c1da5e81..d86f90e58 100644
--- a/pandas/tests/extension/list/array.py
+++ b/pandas/tests/extension/list/array.py
@@ -86,13 +86,13 @@ class ListArray(ExtensionArray):
                 output = [
                     self.data[loc] if loc != -1 else fill_value for loc in indexer
                 ]
-            except IndexError:
-                raise IndexError(msg)
+            except IndexError as err:
+                raise IndexError(msg) from err
         else:
             try:
                 output = [self.data[loc] for loc in indexer]
-            except IndexError:
-                raise IndexError(msg)
+            except IndexError as err:
+                raise IndexError(msg) from err
 
         return self._from_sequence(output)
 
diff --git a/pandas/tests/indexes/datetimes/test_tools.py b/pandas/tests/indexes/datetimes/test_tools.py
index e1f04d3d4..0a774e9c0 100644
--- a/pandas/tests/indexes/datetimes/test_tools.py
+++ b/pandas/tests/indexes/datetimes/test_tools.py
@@ -1110,8 +1110,8 @@ class TestToDatetimeUnit:
         for val in ["foo", Timestamp("20130101")]:
             try:
                 to_datetime(val, errors="raise", unit="s", cache=cache)
-            except tslib.OutOfBoundsDatetime:
-                raise AssertionError("incorrect exception raised")
+            except tslib.OutOfBoundsDatetime as err:
+                raise AssertionError("incorrect exception raised") from err
             except ValueError:
                 pass
 
diff --git a/pandas/tests/io/test_sql.py b/pandas/tests/io/test_sql.py
index 0ad9f2c1e..fc3876eee 100644
--- a/pandas/tests/io/test_sql.py
+++ b/pandas/tests/io/test_sql.py
@@ -2575,19 +2575,19 @@ class TestXMySQL(MySQLMixIn):
         pymysql.connect(host="localhost", user="root", passwd="", db="pandas_nosetest")
         try:
             pymysql.connect(read_default_group="pandas")
-        except pymysql.ProgrammingError:
+        except pymysql.ProgrammingError as err:
             raise RuntimeError(
                 "Create a group of connection parameters under the heading "
                 "[pandas] in your system's mysql default file, "
                 "typically located at ~/.my.cnf or /etc/.my.cnf."
-            )
-        except pymysql.Error:
+            ) from err
+        except pymysql.Error as err:
             raise RuntimeError(
                 "Cannot connect to database. "
                 "Create a group of connection parameters under the heading "
                 "[pandas] in your system's mysql default file, "
                 "typically located at ~/.my.cnf or /etc/.my.cnf."
-            )
+            ) from err
 
     @pytest.fixture(autouse=True)
     def setup_method(self, request, datapath):
@@ -2595,19 +2595,19 @@ class TestXMySQL(MySQLMixIn):
         pymysql.connect(host="localhost", user="root", passwd="", db="pandas_nosetest")
         try:
             pymysql.connect(read_default_group="pandas")
-        except pymysql.ProgrammingError:
+        except pymysql.ProgrammingError as err:
             raise RuntimeError(
                 "Create a group of connection parameters under the heading "
                 "[pandas] in your system's mysql default file, "
                 "typically located at ~/.my.cnf or /etc/.my.cnf."
-            )
-        except pymysql.Error:
+            ) from err
+        except pymysql.Error as err:
             raise RuntimeError(
                 "Cannot connect to database. "
                 "Create a group of connection parameters under the heading "
                 "[pandas] in your system's mysql default file, "
                 "typically located at ~/.my.cnf or /etc/.my.cnf."
-            )
+            ) from err
 
         self.method = request.function
 
diff --git a/pandas/tests/reshape/merge/test_join.py b/pandas/tests/reshape/merge/test_join.py
index 685995ee2..725157b7c 100644
--- a/pandas/tests/reshape/merge/test_join.py
+++ b/pandas/tests/reshape/merge/test_join.py
@@ -810,11 +810,11 @@ def _check_join(left, right, result, join_col, how="left", lsuffix="_x", rsuffix
 
         try:
             lgroup = left_grouped.get_group(group_key)
-        except KeyError:
+        except KeyError as err:
             if how in ("left", "inner"):
                 raise AssertionError(
                     f"key {group_key} should not have been in the join"
-                )
+                ) from err
 
             _assert_all_na(l_joined, left.columns, join_col)
         else:
@@ -822,11 +822,11 @@ def _check_join(left, right, result, join_col, how="left", lsuffix="_x", rsuffix
 
         try:
             rgroup = right_grouped.get_group(group_key)
-        except KeyError:
+        except KeyError as err:
             if how in ("right", "inner"):
                 raise AssertionError(
                     f"key {group_key} should not have been in the join"
-                )
+                ) from err
 
             _assert_all_na(r_joined, right.columns, join_col)
         else:
diff --git a/pandas/tests/reshape/test_concat.py b/pandas/tests/reshape/test_concat.py
index 5811f3bc1..afd8f4178 100644
--- a/pandas/tests/reshape/test_concat.py
+++ b/pandas/tests/reshape/test_concat.py
@@ -1849,8 +1849,8 @@ class TestConcatenate:
             def __getitem__(self, index):
                 try:
                     return {0: df1, 1: df2}[index]
-                except KeyError:
-                    raise IndexError
+                except KeyError as err:
+                    raise IndexError from err
 
         tm.assert_frame_equal(pd.concat(CustomIterator1(), ignore_index=True), expected)
 
diff --git a/pandas/tests/tseries/offsets/common.py b/pandas/tests/tseries/offsets/common.py
index 71953fd09..25837c0b6 100644
--- a/pandas/tests/tseries/offsets/common.py
+++ b/pandas/tests/tseries/offsets/common.py
@@ -11,11 +11,11 @@ def assert_offset_equal(offset, base, expected):
         assert actual == expected
         assert actual_swapped == expected
         assert actual_apply == expected
-    except AssertionError:
+    except AssertionError as err:
         raise AssertionError(
             f"\nExpected: {expected}\nActual: {actual}\nFor Offset: {offset})"
             f"\nAt Date: {base}"
-        )
+        ) from err
 
 
 def assert_is_on_offset(offset, date, expected):
diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index af34180fb..1a1b7e8e1 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -141,8 +141,8 @@ def to_offset(freq) -> Optional[DateOffset]:
                         delta = offset
                     else:
                         delta = delta + offset
-        except ValueError:
-            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq))
+        except ValueError as err:
+            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq)) from err
 
     else:
         delta = None
@@ -173,8 +173,8 @@ def to_offset(freq) -> Optional[DateOffset]:
                     delta = offset
                 else:
                     delta = delta + offset
-        except (ValueError, TypeError):
-            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq))
+        except (ValueError, TypeError) as err:
+            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq)) from err
 
     if delta is None:
         raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq))
@@ -223,9 +223,9 @@ def _get_offset(name: str) -> DateOffset:
             # handles case where there's no suffix (and will TypeError if too
             # many '-')
             offset = klass._from_name(*split[1:])
-        except (ValueError, TypeError, KeyError):
+        except (ValueError, TypeError, KeyError) as err:
             # bad prefix or suffix
-            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(name))
+            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(name)) from err
         # cache
         _offset_map[name] = offset
 
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index 959dd19a5..b6bbe0088 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -2530,12 +2530,12 @@ def _tick_comp(op):
     def f(self, other):
         try:
             return op(self.delta, other.delta)
-        except AttributeError:
+        except AttributeError as err:
             # comparing with a non-Tick object
             raise TypeError(
                 f"Invalid comparison between {type(self).__name__} "
                 f"and {type(other).__name__}"
-            )
+            ) from err
 
     f.__name__ = f"__{op.__name__}__"
     return f
@@ -2570,10 +2570,10 @@ class Tick(liboffsets._Tick, SingleConstructorOffset):
             return self.apply(other)
         except ApplyTypeError:
             return NotImplemented
-        except OverflowError:
+        except OverflowError as err:
             raise OverflowError(
                 f"the add operation between {self} and {other} will overflow"
-            )
+            ) from err
 
     def __eq__(self, other: Any) -> bool:
         if isinstance(other, str):
diff --git a/pandas/util/_tester.py b/pandas/util/_tester.py
index b299f3790..1bdf0d848 100644
--- a/pandas/util/_tester.py
+++ b/pandas/util/_tester.py
@@ -10,12 +10,12 @@ PKG = os.path.dirname(os.path.dirname(__file__))
 def test(extra_args=None):
     try:
         import pytest
-    except ImportError:
-        raise ImportError("Need pytest>=5.0.1 to run tests")
+    except ImportError as err:
+        raise ImportError("Need pytest>=5.0.1 to run tests") from err
     try:
         import hypothesis  # noqa
-    except ImportError:
-        raise ImportError("Need hypothesis>=3.58 to run tests")
+    except ImportError as err:
+        raise ImportError("Need hypothesis>=3.58 to run tests") from err
     cmd = ["--skip-slow", "--skip-network", "--skip-db"]
     if extra_args:
         if not isinstance(extra_args, list):
