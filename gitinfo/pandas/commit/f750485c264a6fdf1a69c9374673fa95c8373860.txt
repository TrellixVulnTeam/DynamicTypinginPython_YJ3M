commit f750485c264a6fdf1a69c9374673fa95c8373860
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Apr 25 15:17:16 2012 -0400

    ENH: add frequency to Series repr and DataFrame.info, close #1102

diff --git a/pandas/core/format.py b/pandas/core/format.py
index 1f130110c..b92edfab9 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -65,7 +65,13 @@ class SeriesFormatter(object):
 
     def _get_footer(self):
         footer = ''
+
         if self.name:
+            if getattr(self.series.index, 'freq', None):
+                footer += 'Freq: %s' % self.series.index.freqstr
+
+            if footer:
+                footer += ', '
             footer += ("Name: %s" % str(self.series.name)
                        if self.series.name else '')
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 3b0c5598a..ee1a2382f 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -717,9 +717,11 @@ copy : boolean, default False
                                                   length=False,
                                                   name=False)
         result = head + '\n...\n' + tail
+        return '%s\n%s' % (result, self._repr_footer())
+
+    def _repr_footer(self):
         namestr = "Name: %s, " % str(self.name) if self.name else ""
-        result = '%s\n%sLength: %d' % (result, namestr, len(self))
-        return result
+        return '%sLength: %d' % (namestr, len(self))
 
     def to_string(self, buf=None, na_rep='NaN', float_format=None,
                   nanRep=None, length=False, name=False):
@@ -2529,6 +2531,15 @@ Series.hist = _gfx.hist_series
 
 class TimeSeries(Series):
 
+    def _repr_footer(self):
+        if self.index.freq is not None:
+            freqstr = 'Freq: %s, ' % self.index.freqstr
+        else:
+            freqstr = ''
+
+        namestr = "Name: %s, " % str(self.name) if self.name else ""
+        return '%s%sLength: %d' % (freqstr, namestr, len(self))
+
     def to_timestamp(self, freq='D', how='start', copy=True):
         """
         Cast to datetimeindex of timestamps, at *beginning* of period
diff --git a/pandas/tests/test_datetools.py b/pandas/tests/test_datetools.py
index 5c1f35c52..58730ba6a 100644
--- a/pandas/tests/test_datetools.py
+++ b/pandas/tests/test_datetools.py
@@ -1320,15 +1320,15 @@ def test_get_standard_freq():
 def test_rule_code():
     lst = ['M', 'MS', 'BM', 'BMS', 'D', 'B', 'H', 'T', 'S', 'L', 'U']
     for k in lst:
-        assert k == _offset_map[k].rule_code()
-        assert k == (_offset_map[k] * 3).rule_code()
+        assert k == _offset_map[k].rule_code
+        assert k == (_offset_map[k] * 3).rule_code
 
     suffix_lst = ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN']
     base = 'W'
     for v in suffix_lst:
         alias = '-'.join([base, v])
-        assert alias == _offset_map[alias].rule_code()
-        assert alias == (_offset_map[alias] * 5).rule_code()
+        assert alias == _offset_map[alias].rule_code
+        assert alias == (_offset_map[alias] * 5).rule_code
 
     suffix_lst = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG',
                   'SEP', 'OCT', 'NOV', 'DEC']
@@ -1336,8 +1336,8 @@ def test_rule_code():
     for base in base_lst:
         for v in suffix_lst:
             alias = '-'.join([base, v])
-            assert alias == _offset_map[alias].rule_code()
-            assert alias == (_offset_map[alias] * 5).rule_code()
+            assert alias == _offset_map[alias].rule_code
+            assert alias == (_offset_map[alias] * 5).rule_code
 
 
 
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 634785211..2e0da13f9 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -359,7 +359,8 @@ class DatetimeIndex(Int64Index):
     def __repr__(self):
         if self.offset is not None:
             output = str(self.__class__) + '\n'
-            output += 'freq: %s, timezone: %s\n' % (self.offset, self.tz)
+            output += 'freq: %s, timezone: %s\n' % (self.offset.freqstr,
+                                                    self.tz)
             if len(self) > 0:
                 output += '[%s, ..., %s]\n' % (self[0], self[-1])
             output += 'length: %d' % len(self)
@@ -414,6 +415,20 @@ class DatetimeIndex(Int64Index):
         else:
             return Index(self.view(np.ndarray) + other)
 
+    def summary(self, name=None):
+        if len(self) > 0:
+            index_summary = ', %s to %s' % (str(self[0]), str(self[-1]))
+        else:
+            index_summary = ''
+
+        if name is None:
+            name = type(self).__name__
+        result = '%s: %s entries%s' % (name, len(self), index_summary)
+        if self.freq:
+            result += '\nFreq: %s' % self.freqstr
+
+        return result
+
     @property
     def asi8(self):
         # do not cache or you'll create a memory leak
@@ -809,6 +824,10 @@ class DatetimeIndex(Int64Index):
     def freq(self):
         return self.offset
 
+    @property
+    def freqstr(self):
+        return self.offset.freqstr
+
     # Fast field accessors for periods of datetime index
     # --------------------------------------------------------------
 
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index 8078cbe19..c64a2d9a2 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -11,7 +11,7 @@ from dateutil.relativedelta import relativedelta
 from pandas._tseries import Timestamp
 import pandas._tseries as lib
 
-#-------------------------------------------------------------------------------
+#----------------------------------------------------------------------
 # DateOffset
 
 
@@ -203,6 +203,21 @@ class DateOffset(object):
         b = ((dt + self) - self)
         return a == b
 
+    @property
+    def rule_code(self):
+        raise NotImplementedError
+
+    @property
+    def freqstr(self):
+        try:
+            code = self.rule_code
+        except NotImplementedError:
+            return repr(self)
+
+        if self.n != 1:
+            return '%d%s' % (self.n, code)
+        else:
+            return code
 
 
 class BusinessDay(DateOffset, CacheableOffset):
@@ -215,6 +230,7 @@ class BusinessDay(DateOffset, CacheableOffset):
         self.offset = kwds.get('offset', timedelta(0))
         self.normalize = kwds.get('normalize', False)
 
+    @property
     def rule_code(self):
         return 'B'
 
@@ -296,6 +312,7 @@ class MonthEnd(DateOffset, CacheableOffset):
         __junk, days_in_month = lib.monthrange(dt.year, dt.month)
         return dt.day == days_in_month
 
+    @property
     def rule_code(self):
         return 'M'
 
@@ -317,6 +334,7 @@ class MonthBegin(DateOffset, CacheableOffset):
         firstDay, _ = lib.monthrange(dt.year, dt.month)
         return dt.day == (firstDay + 1)
 
+    @property
     def rule_code(self):
         return 'MS'
 
@@ -343,6 +361,7 @@ class BusinessMonthEnd(DateOffset, CacheableOffset):
             other = other - BDay()
         return other
 
+    @property
     def rule_code(self):
         return 'BM'
 
@@ -366,6 +385,7 @@ class BusinessMonthBegin(DateOffset, CacheableOffset):
         result = datetime(other.year, other.month, first)
         return result
 
+    @property
     def rule_code(self):
         return 'BMS'
 
@@ -418,6 +438,7 @@ class Week(DateOffset, CacheableOffset):
     def onOffset(self, dt):
         return dt.weekday() == self.weekday
 
+    @property
     def rule_code(self):
         suffix = ''
         if self.weekday is not None:
@@ -501,6 +522,7 @@ class WeekOfMonth(DateOffset, CacheableOffset):
     def onOffset(self, dt):
         return dt == self.getOffsetOfMonth(dt)
 
+    @property
     def rule_code(self):
         suffix = '-%d%s' % (self.week + 1, _weekday_dict.get(self.weekday, ''))
         return 'WOM' + suffix
@@ -550,6 +572,7 @@ class BQuarterEnd(DateOffset, CacheableOffset):
         modMonth = (dt.month - self.startingMonth) % 3
         return BMonthEnd().onOffset(dt) and modMonth == 0
 
+    @property
     def rule_code(self):
         suffix = '-%s' % _month_dict[self.startingMonth]
         return 'BQ' + suffix
@@ -612,6 +635,7 @@ class BQuarterBegin(DateOffset, CacheableOffset):
         result = datetime(other.year, other.month, first)
         return result
 
+    @property
     def rule_code(self):
         suffix = '-%s' % _month_dict[self.startingMonth]
         return 'BQS' + suffix
@@ -655,6 +679,7 @@ class QuarterEnd(DateOffset, CacheableOffset):
         modMonth = (dt.month - self.startingMonth) % 3
         return MonthEnd().onOffset(dt) and modMonth == 0
 
+    @property
     def rule_code(self):
         suffix = '-%s' % _month_dict[self.startingMonth]
         return 'Q' + suffix
@@ -694,6 +719,7 @@ class QuarterBegin(DateOffset, CacheableOffset):
         other = other + relativedelta(months=3*n - monthsSince, day=1)
         return other
 
+    @property
     def rule_code(self):
         suffix = '-%s' % _month_dict[self.startingMonth]
         return 'QS' + suffix
@@ -740,6 +766,7 @@ class BYearEnd(DateOffset, CacheableOffset):
 
         return result
 
+    @property
     def rule_code(self):
         suffix = '-%s' % _month_dict[self.month]
         return 'BA' + suffix
@@ -782,6 +809,7 @@ class BYearBegin(DateOffset, CacheableOffset):
         first = _get_firstbday(wkday)
         return datetime(other.year, self.month, first)
 
+    @property
     def rule_code(self):
         suffix = '-%s' % _month_dict[self.month]
         return 'BAS' + suffix
@@ -814,6 +842,7 @@ class YearEnd(DateOffset, CacheableOffset):
         wkday, days_in_month = lib.monthrange(dt.year, self.month)
         return self.month == dt.month and dt.day == days_in_month
 
+    @property
     def rule_code(self):
         suffix = '-%s' % _month_dict[self.month]
         return 'A' + suffix
@@ -845,12 +874,13 @@ class YearBegin(DateOffset, CacheableOffset):
     def onOffset(cls, dt):
         return dt.month == 1 and dt.day == 1
 
+    @property
     def rule_code(self):
         suffix = '-%s' % _month_dict[self.month]
         return 'AS' + suffix
 
 
-#-------------------------------------------------------------------------------
+#----------------------------------------------------------------------
 # Ticks
 
 class Tick(DateOffset):
@@ -893,8 +923,10 @@ class Tick(DateOffset):
         elif isinstance(other, type(self)):
             return type(self)(self.n + other.n)
 
+    _rule_base = 'undefined'
+    @property
     def rule_code(self):
-        return 'T'
+        return self._rule_base
 
 def _delta_to_microseconds(delta):
     return (delta.days * 24 * 60 * 60 * 1000000
@@ -903,38 +935,26 @@ def _delta_to_microseconds(delta):
 
 class Day(Tick, CacheableOffset):
     _inc = timedelta(1)
-
-    def rule_code(self):
-        return 'D'
+    _rule_base = 'D'
 
 class Hour(Tick):
     _inc = timedelta(0, 3600)
-
-    def rule_code(self):
-        return 'H'
+    _rule_base = 'H'
 
 class Minute(Tick):
     _inc = timedelta(0, 60)
-
-    def rule_code(self):
-        return 'T'
+    _rule_base = 'T'
 
 class Second(Tick):
     _inc = timedelta(0, 1)
-
-    def rule_code(self):
-        return 'S'
+    _rule_base = 'S'
 
 class Milli(Tick):
-
-    def rule_code(self):
-        return 'L'
+    _rule_base = 'L'
 
 class Micro(Tick):
     _inc = timedelta(microseconds=1)
-
-    def rule_code(self):
-        return 'U'
+    _rule_base = 'U'
 
 BDay = BusinessDay
 BMonthEnd = BusinessMonthEnd
