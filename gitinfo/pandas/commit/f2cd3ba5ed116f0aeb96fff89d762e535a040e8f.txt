commit f2cd3ba5ed116f0aeb96fff89d762e535a040e8f
Author: Stephen Lin <stephenwlin@gmail.com>
Date:   Thu Feb 14 18:43:13 2013 -0500

    CLN: add fill_value return value to common._maybe_promote

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 98a92072f..b7cea4e30 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -705,6 +705,8 @@ def _maybe_promote(dtype, fill_value=np.nan):
                 # object (but numpy 1.6.1 doesn't do this properly)
                 fill_value = tslib.iNaT 
     elif is_float(fill_value):
+        if fill_value is None:
+            fill_value = np.nan
         if issubclass(dtype.type, np.bool_):
             dtype = np.object_
         elif issubclass(dtype.type, np.integer):
@@ -729,10 +731,10 @@ def _maybe_promote(dtype, fill_value=np.nan):
         dtype = np.object_
     return dtype, fill_value
 
+
 def _maybe_upcast(values, fill_value=np.nan, copy=False):
     """ provide explicty type promotion and coercion
         if copy == True, then a copy is created even if no upcast is required """
-
     new_dtype, fill_value = _maybe_promote(values.dtype, fill_value)
     if new_dtype != values.dtype:
         values = values.astype(new_dtype)
@@ -740,6 +742,7 @@ def _maybe_upcast(values, fill_value=np.nan, copy=False):
         values = values.copy()
     return values, fill_value
 
+
 def _possibly_cast_item(obj, item, dtype):
     chunk = obj[item]
 
@@ -950,6 +953,22 @@ def _possibly_cast_to_datetime(value, dtype, coerce = False):
     return value
 
 
+<<<<<<< HEAD
+=======
+def _infer_dtype(value):
+    if isinstance(value, (float, np.floating)):
+        return np.float64
+    elif isinstance(value, (bool, np.bool_)):
+        return np.bool_
+    elif isinstance(value, (int, long, np.integer)):
+        return np.int64
+    elif isinstance(value, (complex, np.complexfloating)):
+        return np.complex128
+    else:
+        return np.object_
+
+
+>>>>>>> e2b4ccd... CLN: add fill_value return value to common._maybe_promote
 def _is_bool_indexer(key):
     if isinstance(key, np.ndarray) and key.dtype == np.object_:
         key = np.asarray(key)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 09843667e..f2870f120 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -8311,73 +8311,6 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
                                       None], np.object_))
         assert_series_equal(result, expected)
 
-    def test_constructor_with_datetimes(self):
-        intname = np.dtype(np.int_).name
-        floatname = np.dtype(np.float_).name
-        datetime64name = np.dtype('M8[ns]').name
-        objectname = np.dtype(np.object_).name
-
-        # single item
-        df = DataFrame({'A' : 1, 'B' : 'foo', 'C' : 'bar', 'D' : Timestamp("20010101"), 'E' : datetime(2001,1,2,0,0) },
-                       index=np.arange(10))
-        result = df.get_dtype_counts()
-        expected = Series({intname: 1, datetime64name: 2, objectname : 2})
-        result.sort()
-        expected.sort()
-        assert_series_equal(result, expected)
-
-        # check with ndarray construction ndim==0 (e.g. we are passing a ndim 0 ndarray with a dtype specified)
-        df = DataFrame({'a': 1., 'b': 2, 'c': 'foo', floatname : np.array(1.,dtype=floatname),
-                        intname : np.array(1,dtype=intname)}, index=np.arange(10))
-        result = df.get_dtype_counts()
-        expected = Series({intname: 2, floatname : 2, objectname : 1})
-        result.sort()
-        expected.sort()
-        assert_series_equal(result, expected)
-
-        # check with ndarray construction ndim>0
-        df = DataFrame({'a': 1., 'b': 2, 'c': 'foo', floatname : np.array([1.]*10,dtype=floatname),
-                        intname : np.array([1]*10,dtype=intname)}, index=np.arange(10))
-        result = df.get_dtype_counts()
-        expected = Series({intname: 2, floatname : 2, objectname : 1})
-        result.sort()
-        expected.sort()
-        assert_series_equal(result, expected)
-
-        # GH #2751 (construction with no index specified)
-        df = DataFrame({'a':[1,2,4,7], 'b':[1.2, 2.3, 5.1, 6.3], 'c':list('abcd'), 'd':[datetime(2000,1,1) for i in range(4)] })
-        result = df.get_dtype_counts()
-        # TODO: fix this on 32-bit (or decide it's ok behavior?)
-        # expected = Series({intname: 1, floatname : 1, datetime64name: 1, objectname : 1})
-        expected = Series({'int64': 1, floatname : 1, datetime64name: 1, objectname : 1})
-        result.sort()
-        expected.sort()
-        assert_series_equal(result, expected)
-
-        # GH 2809
-        from pandas import date_range
-        ind = date_range(start="2000-01-01", freq="D", periods=10)
-        datetimes = [ts.to_pydatetime() for ts in ind]
-        datetime_s = Series(datetimes)
-        self.assert_(datetime_s.dtype == 'M8[ns]')
-        df = DataFrame({'datetime_s':datetime_s})
-        result = df.get_dtype_counts()
-        expected = Series({ datetime64name : 1 })
-        result.sort()
-        expected.sort()
-        assert_series_equal(result, expected)
-
-        # GH 2810
-        ind = date_range(start="2000-01-01", freq="D", periods=10)
-        datetimes = [ts.to_pydatetime() for ts in ind]
-        dates = [ts.date() for ts in ind]
-        df = DataFrame({'datetimes': datetimes, 'dates':dates})
-        result = df.get_dtype_counts()
-        expected = Series({ datetime64name : 1, objectname : 1 })
-        result.sort()
-        expected.sort()
-        assert_series_equal(result, expected)
-
     def test_constructor_frame_copy(self):
         cop = DataFrame(self.frame, copy=True)
         cop['A'] = 5
