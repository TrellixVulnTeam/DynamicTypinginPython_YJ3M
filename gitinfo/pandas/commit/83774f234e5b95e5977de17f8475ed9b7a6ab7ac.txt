commit 83774f234e5b95e5977de17f8475ed9b7a6ab7ac
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Feb 1 15:56:18 2012 -0500

    ENH: add isin method to Index, GH #657

diff --git a/RELEASE.rst b/RELEASE.rst
index 8819c731f..8b08ceeb4 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -85,6 +85,8 @@ pandas 0.7.0
   - Add new ``value_range`` function to return min/max of a dataframe (GH #288)
   - Add ``drop`` parameter to ``reset_index`` method of ``DataFrame`` and added
     method to ``Series`` as well (GH #699)
+  - Add ``isin`` method to Index objects, works just like ``Series.isin`` (GH
+    #657)
 
 **API Changes**
 
diff --git a/pandas/core/index.py b/pandas/core/index.py
index caa62337c..4fb7fddd9 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -581,6 +581,22 @@ class Index(np.ndarray):
     def map(self, mapper):
         return self._arrmap(self.values, mapper)
 
+    def isin(self, values):
+        """
+        Compute boolean array of whether each index value is found in the passed
+        set of values
+
+        Parameters
+        ----------
+        values : set or sequence of values
+
+        Returns
+        -------
+        is_contained : ndarray (boolean dtype)
+        """
+        value_set = set(values)
+        return lib.ismember(self, value_set)
+
     def _get_method(self, method):
         if method:
             method = method.lower()
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 20e865f27..0a86f150e 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1878,7 +1878,6 @@ copy : boolean, default False
         """
         value_set = set(values)
         result = lib.ismember(self, value_set)
-        # return self.map(value_set.__contains__)
         return Series(result, self.index, name=self.name)
 
 #-------------------------------------------------------------------------------
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 12e96a1a1..2b8705be7 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -388,6 +388,20 @@ class TestIndex(unittest.TestCase):
         self.dateIndex.set_value(values, date, 10)
         self.assertEquals(values[67], 10)
 
+    def test_isin(self):
+        values = ['foo', 'bar']
+
+        idx = Index(['qux', 'baz', 'foo', 'bar'])
+        result = idx.isin(values)
+        expected = np.array([False, False, True, True])
+        self.assert_(np.array_equal(result, expected))
+
+        # empty, return dtype bool
+        idx = Index([])
+        result = idx.isin(values)
+        self.assert_(len(result) == 0)
+        self.assert_(result.dtype == np.bool_)
+
 class TestInt64Index(unittest.TestCase):
 
     def setUp(self):
