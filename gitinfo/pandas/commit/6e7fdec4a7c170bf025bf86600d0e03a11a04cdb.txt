commit 6e7fdec4a7c170bf025bf86600d0e03a11a04cdb
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Tue Sep 17 09:10:42 2019 -0700

    REF: raise scalar_data_error to make mypy happy (#28484)

diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index 2dbd592fc..f3ee6450c 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -452,7 +452,7 @@ class Index(IndexOpsMixin, PandasObject):
         elif hasattr(data, "__array__"):
             return Index(np.asarray(data), dtype=dtype, copy=copy, name=name, **kwargs)
         elif data is None or is_scalar(data):
-            cls._scalar_data_error(data)
+            raise cls._scalar_data_error(data)
         else:
             if tupleize_cols and is_list_like(data):
                 # GH21470: convert iterable to list before determining if empty
@@ -4020,7 +4020,9 @@ class Index(IndexOpsMixin, PandasObject):
 
     @classmethod
     def _scalar_data_error(cls, data):
-        raise TypeError(
+        # We return the TypeError so that we can raise it from the constructor
+        #  in order to keep mypy happy
+        return TypeError(
             "{0}(...) must be called with a collection of some "
             "kind, {1} was passed".format(cls.__name__, repr(data))
         )
@@ -4048,7 +4050,7 @@ class Index(IndexOpsMixin, PandasObject):
 
         if not isinstance(data, (np.ndarray, Index)):
             if data is None or is_scalar(data):
-                cls._scalar_data_error(data)
+                raise cls._scalar_data_error(data)
 
             # other iterable of some kind
             if not isinstance(data, (ABCSeries, list, tuple)):
diff --git a/pandas/core/indexes/category.py b/pandas/core/indexes/category.py
index 82806c735..c4321c993 100644
--- a/pandas/core/indexes/category.py
+++ b/pandas/core/indexes/category.py
@@ -194,7 +194,7 @@ class CategoricalIndex(Index, accessor.PandasDelegate):
             # if data is None, then categories must be provided
             if is_scalar(data):
                 if data is not None or categories is None:
-                    cls._scalar_data_error(data)
+                    raise cls._scalar_data_error(data)
                 data = []
 
         data = cls._create_categorical(data, dtype=dtype)
