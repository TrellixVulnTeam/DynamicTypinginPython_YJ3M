commit 83b25d067b9d1bbb84a640978592b6954743b656
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Feb 1 13:12:09 2011 -0500

    misc enhancements to rpy, DataFrame.toRecords

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 794010a5e..870aefec9 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -396,7 +396,7 @@ class DataFrame(Picklable, Groupable):
 
         return df
 
-    def toRecords(self):
+    def toRecords(self, index=True):
         """
         Convert DataFrame to record array. Index will be put in the
         'index' field of the record array.
@@ -405,8 +405,12 @@ class DataFrame(Picklable, Groupable):
         -------
         y : recarray
         """
-        arrays = [self.index] + [self[c] for c in self.cols()]
-        names = ['index'] + list(self.cols())
+        if index:
+            arrays = [self.index] + [self[c] for c in self.cols()]
+            names = ['index'] + list(self.cols())
+        else:
+            arrays = [self[c] for c in self.cols()]
+            names = list(self.cols())
 
         return np.rec.fromarrays(arrays, names=names)
 
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index 0389b721a..5a2db5346 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -277,6 +277,11 @@ class TestDataFrame(unittest.TestCase):
         records = indexed_frame.toRecords()
         self.assertEqual(len(records.dtype.names), 3)
 
+        records = indexed_frame.toRecords(index=False)
+        self.assertEqual(len(records.dtype.names), 2)
+        self.assert_('index' not in records.dtype.names)
+
+
     def test_get_agg_axis(self):
         cols = self.frame._get_agg_axis(0)
         self.assert_(cols is self.frame.columns)
diff --git a/pandas/rpy/common.py b/pandas/rpy/common.py
index 6d8ee6de8..9ae7efe61 100644
--- a/pandas/rpy/common.py
+++ b/pandas/rpy/common.py
@@ -43,6 +43,22 @@ def _convert_list(obj):
     values = [convert_robj(x) for x in obj]
     return dict(zip(obj.names, values))
 
+def _convert_array(obj):
+    """
+    Convert Array to ndarray
+    """
+    # this royally sucks. "Matrices" (arrays) with dimension > 3 in R aren't
+    # really matrices-- things come out Fortran order in the first two
+    # dimensions. Maybe I'm wrong?
+
+    dim = list(obj.dim)
+    values = np.array(list(obj))
+
+    if len(dim) == 3:
+        arr = values.reshape(dim[-1:] + dim[:-1]).swapaxes(1, 2)
+
+    return arr
+
 def _convert_vector(obj):
     return list(obj)
 
@@ -77,15 +93,25 @@ def _check_int(vec):
 
     return vec
 
-_converters = [
+_pandas_converters = [
     (robj.DataFrame , _convert_DataFrame),
     (robj.Matrix , _convert_Matrix),
     (robj.StrVector, _convert_vector),
     (robj.FloatVector, _convert_vector),
+    (robj.Array, _convert_array),
     (robj.Vector, _convert_list),
 ]
 
-def convert_robj(obj):
+_converters = [
+    (robj.DataFrame , lambda x: _convert_DataFrame(x).toRecords(index=False)),
+    (robj.Matrix , lambda x: _convert_Matrix(x).toRecords(index=False)),
+    (robj.StrVector, _convert_vector),
+    (robj.FloatVector, _convert_vector),
+    (robj.Array, _convert_array),
+    (robj.Vector, _convert_list),
+]
+
+def convert_robj(obj, use_pandas=False):
     """
     Convert rpy2 object to a pandas-friendly form
 
@@ -100,7 +126,9 @@ def convert_robj(obj):
     if not isinstance(obj, robj.RObjectMixin):
         return obj
 
-    for rpy_type, converter in _converters:
+    converters = _pandas_converters if use_pandas else _converters
+
+    for rpy_type, converter in converters:
         if isinstance(obj, rpy_type):
             return converter(obj)
 
diff --git a/pandas/stats/ols.py b/pandas/stats/ols.py
index f1d773881..51278f6ea 100644
--- a/pandas/stats/ols.py
+++ b/pandas/stats/ols.py
@@ -32,7 +32,10 @@ class OLS(object):
         Number of Newey-West lags.
     """
     def __init__(self, y, x, intercept=True, nw_lags=None, nw_overlap=False):
-        import scikits.statsmodels as sm
+        try:
+            import scikits.statsmodels.api as sm
+        except ImportError:
+            import scikits.statsmodels as sm
 
         self._x_orig = x
         self._y_orig = y
diff --git a/setupegg.py b/setupegg.py
index 592a255b3..53c1b3dab 100644
--- a/setupegg.py
+++ b/setupegg.py
@@ -3,17 +3,5 @@
 A setup.py script to use setuptools.
 """
 
-from setup import *
-# execfile('setup.py')
-setup(name=DISTNAME,
-      maintainer=MAINTAINER,
-      maintainer_email=MAINTAINER_EMAIL,
-      description=DESCRIPTION,
-      license=LICENSE,
-      url=URL,
-      download_url=DOWNLOAD_URL,
-      long_description=LONG_DESCRIPTION,
-      classifiers=CLASSIFIERS,
-      zip_safe=False,
-      platforms='any',
-      configuration=configuration)
+from setuptools import setup
+execfile('setup.py')
