commit d56d0e691de8e3123575ebe80c2ad4d63328b7cb
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Nov 13 16:53:58 2012 -0500

    BUG: fix internal error in constructing DataFrame.values with duplicate column names. close #2236

diff --git a/RELEASE.rst b/RELEASE.rst
index a64cfdc44..7db939a06 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -99,6 +99,7 @@ pandas 0.9.1
   - Many unicode formatting fixes (#2201)
   - Fix improper MultiIndex conversion issue when assigning
     e.g. DataFrame.index (#2200)
+  - Fix conversion of mixed-type DataFrame to ndarray with dup columns (#2236)
 
 pandas 0.9.0
 ============
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index ddbf4b85f..7275a54a4 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -732,12 +732,22 @@ class BlockManager(object):
 
         # By construction, all of the item should be covered by one of the
         # blocks
-        for block in self.blocks:
-            indexer = items.get_indexer(block.items)
-            assert((indexer != -1).all())
-            result[indexer] = block.get_values(dtype)
-            itemmask[indexer] = 1
+        if items.is_unique:
+            for block in self.blocks:
+                indexer = items.get_indexer(block.items)
+                assert((indexer != -1).all())
+                result[indexer] = block.get_values(dtype)
+                itemmask[indexer] = 1
+        else:
+            for block in self.blocks:
+                mask = items.isin(block.items)
+                indexer = mask.nonzero()[0]
+                assert(len(indexer) == len(block.items))
+                result[indexer] = block.get_values(dtype)
+                itemmask[indexer] = 1
+
         assert(itemmask.all())
+
         return result
 
     def xs(self, key, axis=1, copy=True):
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 8ef2df02d..b3007e886 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -4078,6 +4078,17 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = self.frame.reindex(columns=['A', 'B']).values
         assert_almost_equal(mat, expected)
 
+    def test_as_matrix_duplicates(self):
+        df = DataFrame([[1, 2, 'a', 'b'],
+                        [1, 2, 'a', 'b']],
+                       columns=['one', 'one', 'two', 'two'])
+
+        result = df.values
+        expected = np.array([[1, 2, 'a', 'b'], [1, 2, 'a', 'b']],
+                            dtype=object)
+
+        self.assertTrue(np.array_equal(result, expected))
+
     def test_values(self):
         self.frame.values[:, 0] = 5.
         self.assert_((self.frame.values[:, 0] == 5).all())
