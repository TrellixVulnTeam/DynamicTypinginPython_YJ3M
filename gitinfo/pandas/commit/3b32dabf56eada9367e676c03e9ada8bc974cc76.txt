commit 3b32dabf56eada9367e676c03e9ada8bc974cc76
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jun 11 18:14:16 2012 -0400

    BUG: fix MultiIndex bugs described in #1401

diff --git a/RELEASE.rst b/RELEASE.rst
index d30ef38c7..24f18893c 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -184,6 +184,7 @@ pandas 0.8.0
   - Enable assignment of rows in mixed-type DataFrame via .ix (#1432)
   - Reset index mapping when grouping Series in Cython (#1423)
   - Fix outer/inner DataFrame.join with non-unique indexes (#1421)
+  - Fix MultiIndex groupby bugs with empty lower levels (#1401)
 
 pandas 0.7.3
 ============
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 7845ee0e7..f00610441 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -501,9 +501,15 @@ class NDFrame(PandasObject):
         Delete item
         """
         deleted = False
-        if (hasattr(self,'columns') and
-                isinstance(self.columns, MultiIndex)
-                and key not in self.columns):
+
+        maybe_shortcut = False
+        if hasattr(self,'columns') and isinstance(self.columns, MultiIndex):
+            try:
+                maybe_shortcut = key not in self.columns._engine
+            except TypeError:
+                pass
+
+        if maybe_shortcut:
             # Allow shorthand to delete all columns whose first len(key)
             # elements match key:
             if not isinstance(key,tuple):
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index fdd499269..5e104fcbf 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -1101,7 +1101,13 @@ def _get_grouper(obj, key=None, axis=0, level=None, sort=True):
     exclusions = []
     for i, (gpr, level) in enumerate(zip(keys, levels)):
         name = None
-        if _is_label_like(gpr):
+        try:
+            obj._data.items.get_loc(gpr)
+            in_axis = True
+        except Exception:
+            in_axis = False
+
+        if _is_label_like(gpr) or in_axis:
             exclusions.append(gpr)
             name = gpr
             gpr = obj[gpr]
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 027c322c3..4dbc3546e 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1511,6 +1511,15 @@ class MultiIndex(Index):
     def levshape(self):
         return tuple(len(x) for x in self.levels)
 
+    def __contains__(self, key):
+        hash(key)
+        # work around some kind of odd cython bug
+        try:
+            self.get_loc(key)
+            return True
+        except KeyError:
+            return False
+
     def __reduce__(self):
         """Necessary for making this object picklable"""
         object_state = list(np.ndarray.__reduce__(self))
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 587c48997..25b8acb26 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -1963,6 +1963,31 @@ class TestGroupBy(unittest.TestCase):
 
         assert_frame_equal(closure_bad, closure_good)
 
+    def test_multiindex_columns_empty_level(self):
+        l = [['count', 'values'], ['to filter', '']]
+        midx = MultiIndex.from_tuples(l)
+
+        df = DataFrame([[1L, 'A']], columns=midx)
+
+        grouped = df.groupby('to filter').groups
+        self.assert_(np.array_equal(grouped['A'], [0]))
+
+        grouped = df.groupby([('to filter', '')]).groups
+        self.assert_(np.array_equal(grouped['A'], [0]))
+
+        df = DataFrame([[1L, 'A'], [2L, 'B']], columns=midx)
+
+        expected = df.groupby('to filter').groups
+        result = df.groupby([('to filter', '')]).groups
+        self.assertEquals(result, expected)
+
+        df = DataFrame([[1L, 'A'], [2L, 'A']], columns=midx)
+
+        expected = df.groupby('to filter').groups
+        result = df.groupby([('to filter', '')]).groups
+        self.assertEquals(result, expected)
+
+
 def _check_groupby(df, result, keys, field, f=lambda x: x.sum()):
     tups = map(tuple, df[keys].values)
     tups = com._asarray_tuplesafe(tups)
