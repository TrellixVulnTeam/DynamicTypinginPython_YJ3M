commit 53b323665ba5e168a409d3c420c2458d94e9172e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue May 8 21:54:20 2012 -0400

    BLD: 32-bit take failures

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 7f6834655..cad17087a 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -207,7 +207,7 @@ def take_1d(arr, indexer, out=None, fill_value=np.nan):
                 if not out_passed:
                     out = np.empty(n, dtype=arr.dtype)
             else:
-                out = _ndtake(arr, indexer, out=out)
+                out = ndtake(arr, indexer, out=out)
             if mask.any():
                 if out_passed:
                     raise Exception('out with dtype %s does not support NA' %
@@ -219,7 +219,7 @@ def take_1d(arr, indexer, out=None, fill_value=np.nan):
             out = np.empty(n, dtype=arr.dtype)
         take_f(arr, _ensure_int64(indexer), out=out, fill_value=fill_value)
     else:
-        out = _ndtake(arr, indexer, out=out)
+        out = ndtake(arr, indexer, out=out)
         mask = indexer == -1
         if mask.any():
             if out_passed:
@@ -283,7 +283,7 @@ def take_2d(arr, indexer, out=None, mask=None, needs_masking=None, axis=0,
 
         if needs_masking:
             # upcasting may be required
-            result = _ndtake(arr, indexer, axis=axis, out=out)
+            result = ndtake(arr, indexer, axis=axis, out=out)
             result = _maybe_mask(result, mask, needs_masking, axis=axis,
                                  out_passed=out is not None,
                                  fill_value=fill_value)
@@ -309,13 +309,13 @@ def take_2d(arr, indexer, out=None, mask=None, needs_masking=None, axis=0,
         if out is not None and arr.dtype != out.dtype:
             arr = arr.astype(out.dtype)
 
-        result = _ndtake(arr, indexer, axis=axis, out=out)
+        result = ndtake(arr, indexer, axis=axis, out=out)
         result = _maybe_mask(result, mask, needs_masking, axis=axis,
                              out_passed=out is not None,
                              fill_value=fill_value)
         return result
 
-def _ndtake(arr, indexer, axis=0, out=None):
+def ndtake(arr, indexer, axis=0, out=None):
     return arr.take(_ensure_platform_int(indexer), axis=axis, out=out)
 
 def mask_out_axis(arr, mask, axis, fill_value=np.nan):
@@ -331,7 +331,7 @@ def take_fast(arr, indexer, mask, needs_masking, axis=0, out=None,
                        needs_masking=needs_masking,
                        axis=axis, fill_value=fill_value)
     indexer = _ensure_platform_int(indexer)
-    result = _ndtake(arr, indexer, axis=axis, out=out)
+    result = ndtake(arr, indexer, axis=axis, out=out)
     result = _maybe_mask(result, mask, needs_masking, axis=axis,
                          out_passed=out is not None, fill_value=fill_value)
     return result
diff --git a/pandas/core/index.py b/pandas/core/index.py
index c50713eca..227b94b2c 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -7,6 +7,7 @@ import weakref
 
 import numpy as np
 
+from pandas.core.common import ndtake
 from pandas.util.decorators import cache_readonly
 from pandas.util import py3compat
 import pandas.core.common as com
@@ -507,7 +508,7 @@ class Index(np.ndarray):
             indexer = (indexer == -1).nonzero()[0]
 
             if len(indexer) > 0:
-                other_diff = other.values.take(indexer)
+                other_diff = ndtake(other.values, indexer)
                 result = np.concatenate((self.values, other_diff))
                 try:
                     result.sort()
@@ -890,7 +891,7 @@ class Index(np.ndarray):
             rev_indexer = lib.get_reverse_indexer(left_lev_indexer,
                                                   len(old_level))
 
-            new_lev_labels = rev_indexer.take(left.labels[level])
+            new_lev_labels = ndtake(rev_indexer, left.labels[level])
             omit_mask = new_lev_labels != -1
 
             new_labels = list(left.labels)
@@ -910,7 +911,8 @@ class Index(np.ndarray):
             left_indexer = None
 
         if right_lev_indexer is not None:
-            right_indexer = right_lev_indexer.take(join_index.labels[level])
+            right_indexer = ndtake(right_lev_indexer,
+                                   join_index.labels[level])
         else:
             right_indexer = join_index.labels[level]
 
@@ -1168,7 +1170,7 @@ class MultiIndex(Index):
         levels = [_ensure_index(lev) for lev in levels]
         labels = [np.asarray(labs, dtype=np.int64) for labs in labels]
 
-        values = [np.asarray(lev).take(lab)
+        values = [ndtake(np.asarray(lev), lab)
                   for lev, lab in zip(levels, labels)]
         subarr = lib.fast_zip(values).view(cls)
 
@@ -1247,7 +1249,7 @@ class MultiIndex(Index):
     def values(self):
         if self._is_legacy_format:
             # for legacy MultiIndex
-            values = [np.asarray(lev).take(lab)
+            values = [ndtake(np.asarray(lev), lab)
                       for lev, lab in zip(self.levels, self.labels)]
             return lib.fast_zip(values)
         else:
@@ -1345,7 +1347,7 @@ class MultiIndex(Index):
             if names:
                 level.append(str(name) if name is not None else '')
 
-            level.extend(np.array(lev, dtype=object).take(lab))
+            level.extend(ndtake(np.array(lev, dtype=object), lab))
             result_levels.append(level)
 
         if sparsify:
