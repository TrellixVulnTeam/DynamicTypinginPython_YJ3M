commit 4867415a465943ec73f04534dcc10c23ea802420
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Tue Mar 10 19:40:13 2020 -0700

    REF: Remove BlockManager.rename_axis (#32349)

diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index d5f5e3991..f53135174 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -967,7 +967,6 @@ class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):
                 continue
 
             ax = self._get_axis(axis_no)
-            baxis = self._get_block_manager_axis(axis_no)
             f = com.get_rename_function(replacements)
 
             if level is not None:
@@ -984,9 +983,8 @@ class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):
                     ]
                     raise KeyError(f"{missing_labels} not found in axis")
 
-            result._data = result._data.rename_axis(
-                f, axis=baxis, copy=copy, level=level
-            )
+            new_index = ax._transform_index(f, level)
+            result.set_axis(new_index, axis=axis_no, inplace=True)
             result._clear_item_cache()
 
         if inplace:
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index 2d5403eed..a5f133fb1 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -4753,6 +4753,27 @@ class Index(IndexOpsMixin, PandasObject):
 
         return Index(new_values, **attributes)
 
+    # TODO: De-duplicate with map, xref GH#32349
+    def _transform_index(self, func, level=None) -> "Index":
+        """
+        Apply function to all values found in index.
+
+        This includes transforming multiindex entries separately.
+        Only apply function to one level of the MultiIndex if level is specified.
+        """
+        if isinstance(self, ABCMultiIndex):
+            if level is not None:
+                items = [
+                    tuple(func(y) if i == level else y for i, y in enumerate(x))
+                    for x in self
+                ]
+            else:
+                items = [tuple(func(y) for y in x) for x in self]
+            return type(self).from_tuples(items, names=self.names)
+        else:
+            items = [func(x) for x in self]
+            return Index(items, name=self.name, tupleize_cols=False)
+
     def isin(self, values, level=None):
         """
         Return a boolean array where the index values are in `values`.
diff --git a/pandas/core/internals/__init__.py b/pandas/core/internals/__init__.py
index 37a340555..e70652b81 100644
--- a/pandas/core/internals/__init__.py
+++ b/pandas/core/internals/__init__.py
@@ -17,7 +17,6 @@ from pandas.core.internals.blocks import (  # io.pytables, io.packers
 from pandas.core.internals.managers import (
     BlockManager,
     SingleBlockManager,
-    _transform_index,
     concatenate_block_managers,
     create_block_manager_from_arrays,
     create_block_manager_from_blocks,
@@ -40,7 +39,6 @@ __all__ = [
     "_block_shape",
     "BlockManager",
     "SingleBlockManager",
-    "_transform_index",
     "concatenate_block_managers",
     "create_block_manager_from_arrays",
     "create_block_manager_from_blocks",
diff --git a/pandas/core/internals/managers.py b/pandas/core/internals/managers.py
index 5687cb277..0bba8de66 100644
--- a/pandas/core/internals/managers.py
+++ b/pandas/core/internals/managers.py
@@ -34,7 +34,7 @@ import pandas.core.algorithms as algos
 from pandas.core.arrays.sparse import SparseDtype
 from pandas.core.base import PandasObject
 from pandas.core.indexers import maybe_convert_indices
-from pandas.core.indexes.api import Index, MultiIndex, ensure_index
+from pandas.core.indexes.api import Index, ensure_index
 from pandas.core.internals.blocks import (
     Block,
     CategoricalBlock,
@@ -226,23 +226,6 @@ class BlockManager(PandasObject):
 
         self.axes[axis] = new_labels
 
-    def rename_axis(
-        self, mapper, axis: int, copy: bool = True, level=None
-    ) -> "BlockManager":
-        """
-        Rename one of axes.
-
-        Parameters
-        ----------
-        mapper : unary callable
-        axis : int
-        copy : bool, default True
-        level : int or None, default None
-        """
-        obj = self.copy(deep=copy)
-        obj.set_axis(axis, _transform_index(self.axes[axis], mapper, level))
-        return obj
-
     @property
     def _is_single_block(self) -> bool:
         if self.ndim == 1:
@@ -1972,28 +1955,6 @@ def _compare_or_regex_search(a, b, regex=False):
     return result
 
 
-def _transform_index(index, func, level=None):
-    """
-    Apply function to all values found in index.
-
-    This includes transforming multiindex entries separately.
-    Only apply function to one level of the MultiIndex if level is specified.
-
-    """
-    if isinstance(index, MultiIndex):
-        if level is not None:
-            items = [
-                tuple(func(y) if i == level else y for i, y in enumerate(x))
-                for x in index
-            ]
-        else:
-            items = [tuple(func(y) for y in x) for x in index]
-        return MultiIndex.from_tuples(items, names=index.names)
-    else:
-        items = [func(x) for x in index]
-        return Index(items, name=index.name, tupleize_cols=False)
-
-
 def _fast_count_smallints(arr):
     """Faster version of set(arr) for sequences of small numbers."""
     counts = np.bincount(arr.astype(np.int_))
diff --git a/pandas/core/reshape/merge.py b/pandas/core/reshape/merge.py
index 08c04cb49..e75dced21 100644
--- a/pandas/core/reshape/merge.py
+++ b/pandas/core/reshape/merge.py
@@ -46,7 +46,7 @@ import pandas.core.algorithms as algos
 from pandas.core.arrays.categorical import _recode_for_categories
 import pandas.core.common as com
 from pandas.core.frame import _merge_doc
-from pandas.core.internals import _transform_index, concatenate_block_managers
+from pandas.core.internals import concatenate_block_managers
 from pandas.core.sorting import is_int64_overflow_possible
 
 if TYPE_CHECKING:
@@ -1993,4 +1993,4 @@ def _items_overlap_with_suffix(left: Index, lsuffix, right: Index, rsuffix):
     lrenamer = partial(renamer, suffix=lsuffix)
     rrenamer = partial(renamer, suffix=rsuffix)
 
-    return (_transform_index(left, lrenamer), _transform_index(right, rrenamer))
+    return (left._transform_index(lrenamer), right._transform_index(rrenamer))
