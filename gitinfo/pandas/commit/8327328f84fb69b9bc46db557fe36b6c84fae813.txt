commit 8327328f84fb69b9bc46db557fe36b6c84fae813
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jan 4 13:57:39 2011 -0500

    fixed object insertion into float matrix of same column name

diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index ded8f30e8..8cfb271d3 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -601,17 +601,31 @@ class DataMatrix(DataFrame):
     def _insert_float_dtype(self, key, value):
         isObject = value.dtype not in self._dataTypes
 
-        if isObject:
+        # sanity check
+        if len(value) != len(self.index): # pragma: no cover
+            raise Exception('Column is wrong length')
+
+        def _put_object(value):
             if self.objects is None:
                 self.objects = DataMatrix({key : value},
                                           index=self.index)
             else:
                 self.objects[key] = value
-        elif key in self.columns:
-            self.values[:, self.columns.indexMap[key]] = value
+
+        if key in self.columns:
+            loc = self.columns.indexMap[key]
+            try:
+                # attempt coercion
+                self.values[:, loc] = value
+            except ValueError:
+                self._delete_column(loc)
+                self._delete_column_index(loc)
+                _put_object(value)
+        elif isObject:
+            _put_object(value)
         else:
             loc = self._get_insert_loc(key)
-            self._insert_column( value.astype(float), loc)
+            self._insert_column(value.astype(float), loc)
             self._insert_column_index(key, loc)
 
     def _insert_object_dtype(self, key, value):
@@ -623,6 +637,20 @@ class DataMatrix(DataFrame):
             self._insert_column(value, loc)
             self._insert_column_index(key, loc)
 
+    def __delitem__(self, key):
+        """
+        Delete column from DataMatrix
+        """
+        if key in self.columns:
+            loc = self.columns.indexMap[key]
+            self._delete_column(loc)
+            self._delete_column_index(loc)
+        else:
+            if self.objects is not None and key in self.objects:
+                del self.objects[key]
+            else:
+                raise KeyError('%s' % key)
+
     def _insert_column(self, column, loc):
         mat = self.values
 
@@ -638,24 +666,12 @@ class DataMatrix(DataFrame):
 
         self.values = values
 
-    def __delitem__(self, key):
-        """
-        Delete column from DataMatrix
-        """
-        if key in self.columns:
-            loc = self.columns.indexMap[key]
-            if loc == self.values.shape[1] - 1:
-                newValues = self.values[:, :loc]
-            else:
-                newValues = np.c_[self.values[:, :loc], self.values[:, loc+1:]]
-            self.values = newValues
-
-            self._delete_column_index(loc)
+    def _delete_column(self, loc):
+        if loc == self.values.shape[1] - 1:
+            newValues = self.values[:, :loc]
         else:
-            if self.objects is not None and key in self.objects:
-                del self.objects[key]
-            else:
-                raise KeyError('%s' % key)
+            newValues = np.c_[self.values[:, :loc], self.values[:, loc+1:]]
+        self.values = newValues
 
     def __iter__(self):
         """Iterate over columns of the frame."""
@@ -751,7 +767,7 @@ class DataMatrix(DataFrame):
         else:
             print >> buffer, ''
 
-        if len(self.columns) == 0:
+        if len(self.cols()) == 0:
             print >> buffer, 'DataMatrix is empty!'
             print >> buffer, repr(self.index)
             return
diff --git a/pandas/core/tests/test_matrix.py b/pandas/core/tests/test_matrix.py
index 9f5f8afa7..157bfae00 100644
--- a/pandas/core/tests/test_matrix.py
+++ b/pandas/core/tests/test_matrix.py
@@ -168,6 +168,31 @@ class TestDataMatrix(test_frame.TestDataFrame):
         dm['foo'] = 'bar'
         self.assertEqual(len(dm.objects.columns), 1)
 
+    def test_setitem_ambig(self):
+        # difficulties with mixed-type data
+        from decimal import Decimal
+
+        # created as float type
+        dm = DataMatrix(index=range(3), columns=range(3))
+
+        coercable_series = Series([Decimal(1) for _ in range(3)],
+                                  index=range(3))
+        uncoercable_series = Series(['foo', 'bzr', 'baz'], index=range(3))
+
+        dm[0] = np.ones(3)
+        self.assertEqual(len(dm.cols()), 3)
+        self.assert_(dm.objects is None)
+
+        dm[1] = coercable_series
+        self.assertEqual(len(dm.cols()), 3)
+        self.assert_(dm.objects is None)
+
+        dm[2] = uncoercable_series
+        self.assertEqual(len(dm.cols()), 3)
+        self.assert_(dm.objects is not None)
+        self.assert_(2 in dm.objects)
+        self.assert_(2 not in dm.columns)
+
     def test_delitem_corner(self):
         f = self.frame.copy()
         del f['D']
