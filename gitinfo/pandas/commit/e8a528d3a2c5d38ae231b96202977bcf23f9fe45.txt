commit e8a528d3a2c5d38ae231b96202977bcf23f9fe45
Author: jreback <jeff@reback.net>
Date:   Wed Aug 7 13:38:15 2013 -0400

    BUG: (GH4016) fix panel slicing issue that was returning an object that should not
         have be a reduction in ndim

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 9af04a8d7..3d63e74fa 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -129,6 +129,8 @@ pandas 0.13
     (:issue:`4486`)
   - Fixed an issue where cumsum and cumprod didn't work with bool dtypes
     (:issue:`4170`, :issue:`4440`)
+  - Fixed Panel slicing issued in ``xs`` that was returning an incorrect dimmed object
+    (:issue:`4016`)
 
 pandas 0.12
 ===========
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 75990e76c..d89121b13 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -1048,7 +1048,7 @@ class Panel(NDFrame):
         self._consolidate_inplace()
         axis_number = self._get_axis_number(axis)
         new_data = self._data.xs(key, axis=axis_number, copy=copy)
-        return self._constructor_sliced(new_data)
+        return self._construct_return_type(new_data)
 
     _xs = xs
 
@@ -1263,24 +1263,33 @@ class Panel(NDFrame):
         if result.ndim == 2 and axis_name != self._info_axis:
             result = result.T
 
-        return self._constructor_sliced(result,
+        return self._construct_return_type(result, axes)
+
+    def _construct_return_type(self, result, axes=None, **kwargs):
+        """ return the type for the ndim of the result """
+        ndim = result.ndim
+        if self.ndim == ndim:
+            """ return the construction dictionary for these axes """
+            if axes is None:
+                return self._constructor(result)
+            return self._constructor(result, **self._construct_axes_dict())
+
+        elif self.ndim == ndim + 1:
+            if axes is None:
+                return self._constructor_sliced(result)
+            return self._constructor_sliced(result,
                                 **self._extract_axes_for_slice(self, axes))
 
+        raise PandasError("invalid _construct_return_type [self->%s] [result->%s]" %
+                          (self.ndim, result.ndim))
+
     def _wrap_result(self, result, axis):
         axis = self._get_axis_name(axis)
         axes = self._get_plane_axes(axis)
         if result.ndim == 2 and axis != self._info_axis:
             result = result.T
 
-        # do we have reduced dimensionalility?
-        if self.ndim == result.ndim:
-            return self._constructor(result, **self._construct_axes_dict())
-        elif self.ndim == result.ndim + 1:
-            return self._constructor_sliced(result,
-                                **self._extract_axes_for_slice(self, axes))
-
-        raise PandasError("invalid _wrap_result [self->%s] [result->%s]" %
-                          (self.ndim, result.ndim))
+        return self._construct_return_type(result, axes)
 
     def count(self, axis='major'):
         """
diff --git a/pandas/tests/test_indexing.py b/pandas/tests/test_indexing.py
index f6a6bd158..41dc6ba62 100644
--- a/pandas/tests/test_indexing.py
+++ b/pandas/tests/test_indexing.py
@@ -873,6 +873,16 @@ class TestIndexing(unittest.TestCase):
         self.assert_(p.iloc[1, :3, 1].shape == (3,))
         self.assert_(p.iloc[:3, 1, 1].shape == (3,))
 
+    def test_panel_getitem(self):
+        # GH4016, date selection returns a frame when a partial string selection
+        ind = date_range(start="2000", freq="D", periods=1000)
+        df = DataFrame(np.random.randn(len(ind), 5), index=ind, columns=list('ABCDE'))
+        panel = Panel({'frame_'+c:df for c in list('ABC')})
+
+        test2 = panel.ix[:, "2002":"2002-12-31"]
+        test1 = panel.ix[:, "2002"]
+        tm.assert_panel_equal(test1,test2)
+
     def test_multi_assign(self):
 
         # GH 3626, an assignement of a sub-df to a df
