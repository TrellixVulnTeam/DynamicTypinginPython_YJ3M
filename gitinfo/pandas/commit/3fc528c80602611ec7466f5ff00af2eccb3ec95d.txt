commit 3fc528c80602611ec7466f5ff00af2eccb3ec95d
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Sep 28 20:54:22 2011 -0400

    BUG: group_index being computed incorrectly in unstacker, only presents itself if nlevels > 3

diff --git a/pandas/core/reshape.py b/pandas/core/reshape.py
index 8c545307a..ba7fcef01 100644
--- a/pandas/core/reshape.py
+++ b/pandas/core/reshape.py
@@ -82,13 +82,12 @@ class _Unstacker(object):
         new_levels = self.new_index_levels
 
         # make the mask
-        group_index = self.sorted_labels[0]
-        prev_stride = np.prod([len(x) for x in new_levels[1:]],
-                              dtype=int)
+        group_index = np.zeros(len(self.index), dtype=int)
 
-        for lev, lab in zip(new_levels[1:], self.sorted_labels[1:-1]):
-            group_index = group_index * prev_stride + lab
-            prev_stride /= len(lev)
+        for i in xrange(len(new_levels)):
+            stride = np.prod([len(x) for x in new_levels[i+1:]],
+                             dtype=int)
+            group_index += self.sorted_labels[i] * stride
 
         group_mask = np.zeros(self.full_shape[0], dtype=bool)
         group_mask.put(group_index, True)
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index c1ecd405d..303d52c50 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -336,6 +336,20 @@ class TestMultiLevel(unittest.TestCase):
         assert_series_equal(stacked['foo'], df['foo'].stack())
         self.assert_(stacked['bar'].dtype == np.float_)
 
+    def test_unstack_bug(self):
+        df = DataFrame({'state': ['naive','naive','naive',
+                                  'activ','activ','activ'],
+                        'exp':['a','b','b','b','a','a'],
+                        'barcode':[1,2,3,4,1,3],
+                        'v':['hi','hi','bye','bye','bye','peace'],
+                        'extra': np.arange(6.)})
+
+        result = df.groupby(['state','exp','barcode','v']).apply(len)
+        unstacked = result.unstack()
+        restacked = unstacked.stack()
+        assert_series_equal(restacked,
+                            result.reindex(restacked.index).astype(float))
+
     def test_swaplevel(self):
         swapped = self.frame['A'].swaplevel(0, 1)
         self.assert_(not swapped.index.equals(self.frame.index))
