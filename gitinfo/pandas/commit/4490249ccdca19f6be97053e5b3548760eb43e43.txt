commit 4490249ccdca19f6be97053e5b3548760eb43e43
Author: Phillip Cloud <cpcloud@gmail.com>
Date:   Tue Oct 1 16:55:17 2013 -0400

    TST/BUG: Make sure locales are properly tested

diff --git a/.travis.yml b/.travis.yml
index 387dec1ed..1402f1b48 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -6,7 +6,7 @@ python:
 matrix:
   include:
     - python: 2.6
-      env: NOSE_ARGS="not slow" CLIPBOARD=xclip
+      env: NOSE_ARGS="not slow" CLIPBOARD=xclip LOCALE_OVERRIDE="it_IT.UTF-8"
     - python: 2.7
       env: NOSE_ARGS="slow and not network" LOCALE_OVERRIDE="zh_CN.GB18030" FULL_DEPS=true JOB_TAG=_LOCALE
     - python: 2.7
diff --git a/ci/install.sh b/ci/install.sh
index a30aba933..fa3e5a487 100755
--- a/ci/install.sh
+++ b/ci/install.sh
@@ -13,6 +13,18 @@
 #    (no compiling needed), then directly goto script and collect 200$.
 #
 
+function edit_init() {
+    if [ -n "$LOCALE_OVERRIDE" ]; then
+        pandas_dir=pandas
+        echo "Adding locale to the first line of $pandas_dir/__init__.py"
+        rm -f $pandas_dir/__init__.pyc
+        sedc="1iimport locale; locale.setlocale(locale.LC_ALL, '$LOCALE_OVERRIDE')"
+        sed -i "$sedc" $pandas_dir/__init__.py
+        echo "First line of $pandas_dir/__init__.py"
+        head $pandas_dir/__init__.py
+    fi
+}
+
 echo "inside $0"
 
 # Install Dependencies
@@ -67,6 +79,9 @@ if [ x"$FULL_DEPS" == x"true" ]; then
     time sudo apt-get $APT_ARGS install libhdf5-serial-dev
 fi
 
+
+edit_init
+
 # build pandas
 time python setup.py build_ext install
 
diff --git a/ci/script.sh b/ci/script.sh
index 2bafe1368..67dadde2b 100755
--- a/ci/script.sh
+++ b/ci/script.sh
@@ -5,8 +5,8 @@ echo "inside $0"
 if [ -n "$LOCALE_OVERRIDE" ]; then
     export LC_ALL="$LOCALE_OVERRIDE";
     echo "Setting LC_ALL to $LOCALE_OVERRIDE"
-    (cd /; python -c 'import pandas; print("pandas detected console encoding: %s" % pandas.get_option("display.encoding"))')
-
+    pycmd='import pandas; print("pandas detected console encoding: %s" % pandas.get_option("display.encoding"))'
+    python -c "$pycmd"
 fi
 
 echo nosetests --exe -w /tmp -A "$NOSE_ARGS" pandas --show-skipped
diff --git a/pandas/tseries/converter.py b/pandas/tseries/converter.py
index bfbd28f7b..d059d229e 100644
--- a/pandas/tseries/converter.py
+++ b/pandas/tseries/converter.py
@@ -10,7 +10,7 @@ import matplotlib.dates as dates
 from matplotlib.ticker import Formatter, AutoLocator, Locator
 from matplotlib.transforms import nonsingular
 
-from pandas.compat import range, lrange
+from pandas.compat import lrange
 import pandas.compat as compat
 import pandas.lib as lib
 import pandas.core.common as com
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index cfbde75f6..a5e249b77 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -317,7 +317,8 @@ class TestTSPlot(unittest.TestCase):
             result = ax.get_xlim()
             self.assertEqual(int(result[0]), expected[0].ordinal)
             self.assertEqual(int(result[1]), expected[1].ordinal)
-            plt.close(ax.get_figure())
+            fig = ax.get_figure()
+            plt.close(fig)
 
         ser = tm.makeTimeSeries()
         ax = ser.plot()
diff --git a/pandas/tslib.pyx b/pandas/tslib.pyx
index 3dcfa3621..50733064f 100644
--- a/pandas/tslib.pyx
+++ b/pandas/tslib.pyx
@@ -35,6 +35,11 @@ from datetime import timedelta, datetime
 from datetime import time as datetime_time
 from pandas.compat import parse_date
 
+from sys import version_info
+
+# GH3363
+cdef bint PY2 = version_info[0] == 2
+
 # initialize numpy
 import_array()
 #import_ufunc()
@@ -1757,20 +1762,20 @@ def tz_localize_to_utc(ndarray[int64_t] vals, object tz, bint infer_dst=False):
         # timestamp falls to the right side of the DST transition
         if v + deltas[pos] == vals[i]:
             result_b[i] = v
-            
-           
+
+
     if infer_dst:
         dst_hours = np.empty(n, dtype=np.int64)
         dst_hours.fill(NPY_NAT)
-        
+
         # Get the ambiguous hours (given the above, these are the hours
-        # where result_a != result_b and neither of them are NAT) 
+        # where result_a != result_b and neither of them are NAT)
         both_nat = np.logical_and(result_a != NPY_NAT, result_b != NPY_NAT)
         both_eq  = result_a == result_b
         trans_idx = np.squeeze(np.nonzero(np.logical_and(both_nat, ~both_eq)))
         if trans_idx.size == 1:
             stamp = Timestamp(vals[trans_idx])
-            raise pytz.AmbiguousTimeError("Cannot infer dst time from %s as" 
+            raise pytz.AmbiguousTimeError("Cannot infer dst time from %s as"
                                           "there are no repeated times" % stamp)
         # Split the array into contiguous chunks (where the difference between
         # indices is 1).  These are effectively dst transitions in different years
@@ -1779,21 +1784,21 @@ def tz_localize_to_utc(ndarray[int64_t] vals, object tz, bint infer_dst=False):
         if trans_idx.size > 0:
             one_diff = np.where(np.diff(trans_idx)!=1)[0]+1
             trans_grp = np.array_split(trans_idx, one_diff)
-            
+
             # Iterate through each day, if there are no hours where the delta is negative
             # (indicates a repeat of hour) the switch cannot be inferred
             for grp in trans_grp:
-                
+
                 delta = np.diff(result_a[grp])
                 if grp.size == 1 or np.all(delta>0):
                     stamp = Timestamp(vals[grp[0]])
                     raise pytz.AmbiguousTimeError(stamp)
-                
+
                 # Find the index for the switch and pull from a for dst and b for standard
                 switch_idx = (delta<=0).nonzero()[0]
                 if switch_idx.size > 1:
                     raise pytz.AmbiguousTimeError("There are %i dst switches "
-                                                  "when there should only be 1." 
+                                                  "when there should only be 1."
                                                   % switch_idx.size)
                 switch_idx = switch_idx[0]+1 # Pull the only index and adjust
                 a_idx = grp[:switch_idx]
@@ -1812,7 +1817,7 @@ def tz_localize_to_utc(ndarray[int64_t] vals, object tz, bint infer_dst=False):
                 else:
                     stamp = Timestamp(vals[i])
                     raise pytz.AmbiguousTimeError("Cannot infer dst time from %r, "\
-                                                  "try using the 'infer_dst' argument" 
+                                                  "try using the 'infer_dst' argument"
                                                   % stamp)
         elif left != NPY_NAT:
             result[i] = left
@@ -2549,8 +2554,9 @@ cdef list extra_fmts = [(b"%q", b"^`AB`^"),
 
 cdef list str_extra_fmts = ["^`AB`^", "^`CD`^", "^`EF`^", "^`GH`^", "^`IJ`^", "^`KL`^"]
 
-cdef _period_strftime(int64_t value, int freq, object fmt):
+cdef object _period_strftime(int64_t value, int freq, object fmt):
     import sys
+
     cdef:
         Py_ssize_t i
         date_info dinfo
@@ -2596,12 +2602,11 @@ cdef _period_strftime(int64_t value, int freq, object fmt):
             result = result.replace(str_extra_fmts[i], repl)
 
     # Py3?
-    if not PyString_Check(result):
-        result = str(result)
+    #if not PyString_Check(result):
+        #result = str(result)
 
-    # GH3363
-    if sys.version_info[0] == 2:
-       result = result.decode('utf-8','strict')
+    if PY2:
+       result = result.decode('utf-8', 'ignore')
 
     return result
 
