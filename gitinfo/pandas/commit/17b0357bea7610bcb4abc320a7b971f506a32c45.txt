commit 17b0357bea7610bcb4abc320a7b971f506a32c45
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Apr 23 11:54:28 2012 -0400

    BUG: fix out-of-bounds issues / bugs in groupby binners, close #1107

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index b7cb0c9d9..df80899f9 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -824,11 +824,12 @@ class BinGrouper(Grouper):
     #----------------------------------------------------------------------
     # cython aggregation
 
-    import pandas._sandbox as sbx
     _cython_functions = {
-        'add' : sbx.group_add_bin,
+        'add' : lib.group_add_bin,
         'prod' : lib.group_prod_bin,
         'mean' : lib.group_mean_bin,
+        'min' : lib.group_min_bin,
+        'max' : lib.group_max_bin,
         'var' : lib.group_var_bin,
         'std' : lib.group_var_bin,
         'ohlc' : lib.group_ohlc
diff --git a/pandas/src/groupby.pyx b/pandas/src/groupby.pyx
index d75f5dfc9..c5adaa23d 100644
--- a/pandas/src/groupby.pyx
+++ b/pandas/src/groupby.pyx
@@ -562,8 +562,9 @@ def group_var(ndarray[float64_t, ndim=2] out,
 # 1-min data, binner has 5-min data, then  bins are just strides in index. This
 # is a general, O(max(len(values), len(binner))) method.
 
-@cython.boundscheck(False)
-@cython.wraparound(False)
+# @cython.boundscheck(False)
+# @cython.wraparound(False)
+
 def generate_bins_dt64(ndarray[int64_t] values, ndarray[int64_t] binner,
                        object closed='left'):
     """
@@ -620,7 +621,7 @@ def group_add_bin(ndarray[float64_t, ndim=2] out,
     Only aggregates on axis=0
     '''
     cdef:
-        Py_ssize_t i, j, N, K, ngroups, b
+        Py_ssize_t i, j, N, K, ngroups, b, nbins
         float64_t val, count
         ndarray[float64_t, ndim=2] sumx, nobs
 
@@ -659,7 +660,7 @@ def group_add_bin(ndarray[float64_t, ndim=2] out,
 
     for i in range(ngroups):
         for j in range(K):
-            if nobs[i, j] == 0:
+            if nobs[i] == 0:
                 out[i, j] = nan
             else:
                 out[i, j] = sumx[i, j]
@@ -713,7 +714,7 @@ def group_prod_bin(ndarray[float64_t, ndim=2] out,
 
     for i in range(ngroups):
         for j in range(K):
-            if nobs[i, j] == 0:
+            if nobs[i] == 0:
                 out[i, j] = nan
             else:
                 out[i, j] = prodx[i, j]
@@ -772,7 +773,7 @@ def group_min_bin(ndarray[float64_t, ndim=2] out,
 
     for i in range(ngroups):
         for j in range(K):
-            if nobs[i, j] == 0:
+            if nobs[i] == 0:
                 out[i, j] = nan
             else:
                 out[i, j] = minx[i, j]
@@ -829,7 +830,7 @@ def group_max_bin(ndarray[float64_t, ndim=2] out,
 
     for i in range(ngroups):
         for j in range(K):
-            if nobs[i, j] == 0:
+            if nobs[i] == 0:
                 out[i, j] = nan
             else:
                 out[i, j] = maxx[i, j]
@@ -920,18 +921,15 @@ def group_mean_bin(ndarray[float64_t, ndim=2] out,
     nobs = np.zeros_like(out)
     sumx = np.zeros_like(out)
 
-    ngroups = len(bins) + 1
     N, K = (<object> values).shape
+    ngroups = len(bins) + 1
 
     b = 0
     if K > 1:
         for i in range(N):
-            while b < ngroups and i >= bins[b]:
+            while b < ngroups - 1 and i >= bins[b]:
                 b += 1
 
-            if b == ngroups:
-                break
-
             counts[b] += 1
             for j in range(K):
                 val = values[i, j]
@@ -955,8 +953,8 @@ def group_mean_bin(ndarray[float64_t, ndim=2] out,
 
     for i in range(ngroups):
         for j in range(K):
-            count = nobs[i, j]
-            if nobs[i, j] == 0:
+            count = nobs[i]
+            if nobs[i] == 0:
                 out[i, j] = nan
             else:
                 out[i, j] = sumx[i, j] / count
@@ -1012,7 +1010,7 @@ def group_var_bin(ndarray[float64_t, ndim=2] out,
 
     for i in range(ngroups):
         for j in range(K):
-            ct = nobs[i, j]
+            ct = nobs[i]
             if ct < 2:
                 out[i, j] = nan
             else:
diff --git a/pandas/src/sandbox.pyx b/pandas/src/sandbox.pyx
index cd21780b9..5aed9e12b 100644
--- a/pandas/src/sandbox.pyx
+++ b/pandas/src/sandbox.pyx
@@ -442,12 +442,9 @@ def group_add_bin(ndarray[float64_t, ndim=2] out,
     b = 0
     if K > 1:
         for i in range(N):
-            while b < ngroups and i >= bins[b]:
+            while b < ngroups - 1 and i >= bins[b]:
                 b += 1
 
-            if b == ngroups:
-                break
-
             counts[b] += 1
             for j in range(K):
                 val = values[i, j]
@@ -458,12 +455,9 @@ def group_add_bin(ndarray[float64_t, ndim=2] out,
                     sumx[b, j] += val
     else:
         for i in range(N):
-            while b < ngroups and i >= bins[b]:
+            while b < ngroups - 1 and i >= bins[b]:
                 b += 1
 
-            if b == ngroups:
-                break
-
             counts[b] += 1
             val = values[i, 0]
 
@@ -471,10 +465,12 @@ def group_add_bin(ndarray[float64_t, ndim=2] out,
             if val == val:
                 nobs[b, 0] += 1
                 sumx[b, 0] += val
+            print i, b, counts, nobs.squeeze()
 
     for i in range(ngroups):
+        print 'writing %d' % i
         for j in range(K):
-            if nobs[i, j] == 0:
+            if nobs[i] == 0:
                 out[i, j] = nan
             else:
                 out[i, j] = sumx[i, j]
diff --git a/pandas/tests/test_tseries.py b/pandas/tests/test_tseries.py
index b9ace5ff7..bb37d6fab 100644
--- a/pandas/tests/test_tseries.py
+++ b/pandas/tests/test_tseries.py
@@ -317,7 +317,6 @@ class TestBinGroupers(unittest.TestCase):
             'var': lambda x: x.var(ddof=1) if len(x) >=2 else np.nan
         }
 
-        # import pandas._sandbox as lib
         for fname in funcs:
             args = [getattr(lib, 'group_%s' % fname),
                     getattr(lib, 'group_%s_bin' % fname),
diff --git a/pandas/tseries/resample.py b/pandas/tseries/resample.py
index 3980880e7..3ec12cd83 100644
--- a/pandas/tseries/resample.py
+++ b/pandas/tseries/resample.py
@@ -81,9 +81,10 @@ class TimeGrouper(BinGrouper):
             binner = self._generate_time_binner()
 
             # a little hack
-            if (len(binner) > 2 and self.closed == 'right'
-                and binner[-2] == self.axis[-1]):
+            trimmed = False
+            if len(binner) > 2 and binner[-2] == self.axis[-1]:
                 binner = binner[:-1]
+                trimmed = True
 
             # general version, knowing nothing about relative frequencies
             bins = lib.generate_bins_dt64(self.axis.asi8, binner.asi8,
@@ -91,8 +92,10 @@ class TimeGrouper(BinGrouper):
 
             if self.label == 'right':
                 labels = binner[1:]
-            else:
+            elif not trimmed:
                 labels = binner[:-1]
+            else:
+                labels = binner
 
             return binner, bins, labels
         elif self.kind == 'period':
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 7fd1a6530..4e0f4361c 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -33,6 +33,11 @@ class TestResample(unittest.TestCase):
         b = TimeGrouper(Minute(5))
         g = s.groupby(b)
 
+        # check all cython functions work
+        funcs = ['add', 'mean', 'prod', 'ohlc', 'min', 'max', 'var']
+        for f in funcs:
+            g._cython_agg_general(f)
+
         self.assertEquals(g.ngroups, 2593)
         self.assert_(notnull(g.mean()).all())
 
