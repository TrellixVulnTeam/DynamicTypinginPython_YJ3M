commit 130812baabcf3c600bfbd3b351012b5a593463fa
Author: Chang She <chang@lambdafoundry.com>
Date:   Tue Apr 10 03:23:59 2012 -0400

    tests for kurt with multiindex, more groupby tests

diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index c158aa013..9eb7f7a7a 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -4372,6 +4372,13 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         self._check_stat_op('kurt', alt)
 
+        index = MultiIndex(levels=[['bar'], ['one', 'two', 'three'], [0, 1]],
+                           labels=[[0, 0, 0, 0, 0, 0],
+                                   [0, 1, 2, 0, 1, 2],
+                                   [0, 1, 0, 1, 0, 1]])
+        df = DataFrame(np.random.randn(6, 3), index=index)
+        assert_series_equal(df.kurt(), df.kurt(level=0).xs('bar'))
+
     def _check_stat_op(self, name, alternative, frame=None, has_skipna=True,
                        has_numeric_only=False):
         if frame is None:
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 2492eafe2..33ba83188 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -182,6 +182,13 @@ class TestGroupBy(unittest.TestCase):
         self.assertRaises(Exception, grouped.agg, lambda x: x.describe())
         self.assertRaises(Exception, grouped.agg, lambda x: x.index[:2])
 
+    def test_agg_ser_multi_key(self):
+        ser = self.df.C
+        f = lambda x: x.sum()
+        results = self.df.C.groupby([self.df.A, self.df.B]).aggregate(f)
+        expected = self.df.groupby(['A', 'B']).sum()['C']
+        assert_series_equal(results, expected)
+
     def test_get_group(self):
         wp = tm.makePanel()
         grouped = wp.groupby(lambda x: x.month, axis='major')
@@ -298,6 +305,17 @@ class TestGroupBy(unittest.TestCase):
         self.assert_((result.xs('foo') == foo).all())
         self.assert_((result.xs('bar') == bar).all())
 
+        def aggfun(ser):
+            if ser.name == 'C':
+                raise ValueError
+            else:
+                return ser.size
+        result = grouped.agg(aggfun)
+        foo = (self.df.A == 'foo').sum()
+        bar = (self.df.A == 'bar').sum()
+        self.assert_((result.xs('foo') == foo).all())
+        self.assert_((result.xs('bar') == bar).all())
+
     def test_basic_regression(self):
         # regression
         T = [1.0*x for x in range(1,10) *10][:1095]
@@ -994,6 +1012,14 @@ class TestGroupBy(unittest.TestCase):
         agged = df.groupby(keys).agg(np.mean)
         self.assert_(isinstance(agged.columns, MultiIndex))
 
+        def aggfun(ser):
+            if ser.name == ('foo', 'one'):
+                raise TypeError
+            else:
+                return ser.sum()
+        agged2 = df.groupby(keys).aggregate(aggfun)
+        self.assertEqual(len(agged2.columns) + 1, len(df.columns))
+
     def test_grouping_attrs(self):
         deleveled = self.mframe.reset_index()
         grouped = deleveled.groupby(['first', 'second'])
@@ -1623,6 +1649,19 @@ class TestGroupBy(unittest.TestCase):
         result = s.groupby(self.frame['A']).agg(np.sum)
         self.assert_(result.name is None)
 
+    def test_wrap_agg_out(self):
+        grouped = self.three_group.groupby(['A', 'B'])
+        def func(ser):
+            if ser.dtype == np.object:
+                raise TypeError
+            else:
+                return ser.sum()
+        result = grouped.aggregate(func)
+        exp_grouped = self.three_group.ix[:, self.three_group.columns != 'C']
+        expected = exp_grouped.groupby(['A', 'B']).aggregate(func)
+        assert_frame_equal(result, expected)
+
+
 def _check_groupby(df, result, keys, field, f=lambda x: x.sum()):
     tups = map(tuple, df[keys].values)
     tups = com._asarray_tuplesafe(tups)
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index ee5b0c7c2..252a6ddeb 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -922,6 +922,13 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         alt = lambda x: kurtosis(x, bias=False)
         self._check_stat_op('kurt', alt)
 
+        index = MultiIndex(levels=[['bar'], ['one', 'two', 'three'], [0, 1]],
+                           labels=[[0, 0, 0, 0, 0, 0],
+                                   [0, 1, 2, 0, 1, 2],
+                                   [0, 1, 0, 1, 0, 1]])
+        s = Series(np.random.randn(6), index=index)
+        self.assertAlmostEqual(s.kurt(), s.kurt(level=0)['bar'])
+
     def test_argsort(self):
         self._check_accum_op('argsort')
         argsorted = self.ts.argsort()
