commit 1db53cfecd583da4ac4b66c77aa943a5d2926712
Author: Chang She <changshe@gmail.com>
Date:   Sun Nov 18 17:28:28 2012 -0500

    API: fillna method argument should be None by default and raise on both value and method #2027

diff --git a/pandas/core/series.py b/pandas/core/series.py
index ae21014c2..f5bddbbb2 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2381,7 +2381,7 @@ copy : boolean, default False
 
     truncate = generic.truncate
 
-    def fillna(self, value=None, method='pad', inplace=False,
+    def fillna(self, value=None, method=None, inplace=False,
                limit=None):
         """
         Fill NA/NaN values using the specified method
@@ -2413,6 +2413,8 @@ copy : boolean, default False
             return self.copy() if not inplace else self
 
         if value is not None:
+            if method is not None:
+                raise ValueError('Cannot specify both a fill value and method')
             result = self.copy() if not inplace else self
             mask = isnull(self.values)
             np.putmask(result, mask, value)
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index ac690c651..a928c982a 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -2929,8 +2929,8 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
 
     def test_fillna_int(self):
         s = Series(np.random.randint(-100, 100, 50))
-        self.assert_(s.fillna(inplace=True) is s)
-        assert_series_equal(s.fillna(inplace=False), s)
+        self.assert_(s.fillna(method='ffill', inplace=True) is s)
+        assert_series_equal(s.fillna(method='ffill', inplace=False), s)
 
 #-------------------------------------------------------------------------------
 # TimeSeries-specific
@@ -2938,11 +2938,11 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
     def test_fillna(self):
         ts = Series([0., 1., 2., 3., 4.], index=tm.makeDateIndex(5))
 
-        self.assert_(np.array_equal(ts, ts.fillna()))
+        self.assert_(np.array_equal(ts, ts.fillna(method='ffill')))
 
         ts[2] = np.NaN
 
-        self.assert_(np.array_equal(ts.fillna(), [0., 1., 1., 3., 4.]))
+        self.assert_(np.array_equal(ts.fillna(method='ffill'), [0., 1., 1., 3., 4.]))
         self.assert_(np.array_equal(ts.fillna(method='backfill'),
                                     [0., 1., 3., 3., 4.]))
 
@@ -2974,6 +2974,9 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         except ValueError, inst:
             self.assert_('ffil' in str(inst))
 
+    def test_fillna_toomany_params(self):
+        self.assertRaises(ValueError, self.ts.fillna, value=0, method='ffill')
+
     def test_replace(self):
         N = 100
         ser = Series(np.random.randn(N))
