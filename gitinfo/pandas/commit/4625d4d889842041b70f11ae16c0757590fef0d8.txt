commit 4625d4d889842041b70f11ae16c0757590fef0d8
Author: Nicolas Bonnotte <nicolas.bonnotte@gmail.com>
Date:   Wed Jan 13 19:07:05 2016 +0100

    BUG in numeric indexes preventing modulo operation, #9244

diff --git a/doc/source/whatsnew/v0.18.0.txt b/doc/source/whatsnew/v0.18.0.txt
index 9a023ce78..728d52211 100644
--- a/doc/source/whatsnew/v0.18.0.txt
+++ b/doc/source/whatsnew/v0.18.0.txt
@@ -504,6 +504,8 @@ Bug Fixes
 
 - Bug in ``.to_csv`` ignoring formatting parameters ``decimal``, ``na_rep``, ``float_format`` for float indexes (:issue:`11553`)
 
+- Bug in ``Int64Index`` and ``Float64Index`` preventing the use of the modulo operator (:issue:`9244`)
+
 - Bug in ``DataFrame`` when masking an empty ``DataFrame`` (:issue:`11859`)
 
 - Removed ``millisecond`` property of ``DatetimeIndex``. This would always raise
diff --git a/pandas/core/index.py b/pandas/core/index.py
index b82972724..3832d0c69 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -3030,21 +3030,31 @@ class Index(IndexOpsMixin, StringAccessorMixin, PandasObject):
 
             return _evaluate_numeric_unary
 
-        cls.__add__ = cls.__radd__ = _make_evaluate_binop(operator.add,'__add__')
-        cls.__sub__ = _make_evaluate_binop(operator.sub,'__sub__')
-        cls.__rsub__ = _make_evaluate_binop(operator.sub,'__sub__',reversed=True)
-        cls.__mul__ = cls.__rmul__ = _make_evaluate_binop(operator.mul,'__mul__')
-        cls.__floordiv__ = _make_evaluate_binop(operator.floordiv,'__floordiv__')
-        cls.__rfloordiv__ = _make_evaluate_binop(operator.floordiv,'__floordiv__',reversed=True)
-        cls.__truediv__ = _make_evaluate_binop(operator.truediv,'__truediv__')
-        cls.__rtruediv__ = _make_evaluate_binop(operator.truediv,'__truediv__',reversed=True)
+        cls.__add__ = cls.__radd__ = _make_evaluate_binop(
+            operator.add, '__add__')
+        cls.__sub__ = _make_evaluate_binop(operator.sub, '__sub__')
+        cls.__rsub__ = _make_evaluate_binop(
+            operator.sub, '__sub__', reversed=True)
+        cls.__mul__ = cls.__rmul__ = _make_evaluate_binop(
+            operator.mul, '__mul__')
+        cls.__mod__ = _make_evaluate_binop(operator.mod, '__mod__')
+        cls.__floordiv__ = _make_evaluate_binop(
+            operator.floordiv, '__floordiv__')
+        cls.__rfloordiv__ = _make_evaluate_binop(
+            operator.floordiv, '__floordiv__', reversed=True)
+        cls.__truediv__ = _make_evaluate_binop(
+            operator.truediv, '__truediv__')
+        cls.__rtruediv__ = _make_evaluate_binop(
+            operator.truediv, '__truediv__', reversed=True)
         if not compat.PY3:
-            cls.__div__ = _make_evaluate_binop(operator.div,'__div__')
-            cls.__rdiv__ = _make_evaluate_binop(operator.div,'__div__',reversed=True)
-        cls.__neg__ = _make_evaluate_unary(lambda x: -x,'__neg__')
-        cls.__pos__ = _make_evaluate_unary(lambda x: x,'__pos__')
-        cls.__abs__ = _make_evaluate_unary(lambda x: np.abs(x),'__abs__')
-        cls.__inv__ = _make_evaluate_unary(lambda x: -x,'__inv__')
+            cls.__div__ = _make_evaluate_binop(
+                operator.div, '__div__')
+            cls.__rdiv__ = _make_evaluate_binop(
+                operator.div, '__div__', reversed=True)
+        cls.__neg__ = _make_evaluate_unary(lambda x: -x, '__neg__')
+        cls.__pos__ = _make_evaluate_unary(lambda x: x, '__pos__')
+        cls.__abs__ = _make_evaluate_unary(np.abs, '__abs__')
+        cls.__inv__ = _make_evaluate_unary(lambda x: -x, '__inv__')
 
     @classmethod
     def _add_logical_methods(cls):
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 28db57a35..d0c2d2bd1 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -2723,14 +2723,27 @@ class Numeric(Base):
             self.assertEqual(idx.groupby(to_groupby),
                              {1.0: [idx[0], idx[5]], 2.0: [idx[1], idx[4]]})
 
-            to_groupby = Index([datetime(2011, 11, 1), datetime(2011, 12, 1),
-                                pd.NaT, pd.NaT,
-                                datetime(2011, 12, 1), datetime(2011, 11, 1)], tz='UTC').values
-
-            ex_keys = pd.tslib.datetime_to_datetime64(np.array([Timestamp('2011-11-01'), Timestamp('2011-12-01')]))
-            expected = {ex_keys[0][0]: [idx[0], idx[5]], ex_keys[0][1]: [idx[1], idx[4]]}
+            to_groupby = Index([datetime(2011, 11, 1),
+                                datetime(2011, 12, 1),
+                                pd.NaT,
+                                pd.NaT,
+                                datetime(2011, 12, 1),
+                                datetime(2011, 11, 1)],
+                               tz='UTC').values
+
+            ex_keys = pd.tslib.datetime_to_datetime64(
+                np.array([Timestamp('2011-11-01'),
+                          Timestamp('2011-12-01')]))
+            expected = {ex_keys[0][0]: [idx[0], idx[5]],
+                        ex_keys[0][1]: [idx[1], idx[4]]}
             self.assertEqual(idx.groupby(to_groupby), expected)
 
+    def test_modulo(self):
+        # GH 9244
+        index = self.create_index()
+        expected = Index(index.values % 2)
+        self.assert_index_equal(index % 2, expected)
+
 
 class TestFloat64Index(Numeric, tm.TestCase):
     _holder = Float64Index
