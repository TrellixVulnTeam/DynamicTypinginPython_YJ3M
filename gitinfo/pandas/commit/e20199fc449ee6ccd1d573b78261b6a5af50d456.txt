commit e20199fc449ee6ccd1d573b78261b6a5af50d456
Author: y-p <yoval@gmx.com>
Date:   Sun Mar 17 02:18:57 2013 +0200

    BUG: add sanity check to groupby agg function, outside main loop

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 67eb48391..7e20ec95f 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -57,6 +57,8 @@ def _groupby_function(name, alias, npfunc, numeric_only=True,
     def f(self):
         try:
             return self._cython_agg_general(alias, numeric_only=numeric_only)
+        except AssertionError as e:
+            raise SpecificationError(str(e))
         except Exception:
             result = self.aggregate(lambda x: npfunc(x, axis=self.axis))
             if _convert:
@@ -348,7 +350,7 @@ class GroupBy(object):
         """
         try:
             return self._cython_agg_general('mean')
-        except DataError:
+        except GroupByError:
             raise
         except Exception:  # pragma: no cover
             f = lambda x: x.mean(axis=self.axis)
@@ -362,7 +364,7 @@ class GroupBy(object):
         """
         try:
             return self._cython_agg_general('median')
-        except DataError:
+        except GroupByError:
             raise
         except Exception:  # pragma: no cover
             f = lambda x: x.median(axis=self.axis)
@@ -462,7 +464,10 @@ class GroupBy(object):
             if numeric_only and not is_numeric:
                 continue
 
-            result, names = self.grouper.aggregate(obj.values, how)
+            try:
+                result, names = self.grouper.aggregate(obj.values, how)
+            except AssertionError as e:
+                raise GroupByError(str(e))
             output[name] = result
 
         if len(output) == 0:
@@ -1725,9 +1730,10 @@ class NDFrameGroupBy(GroupBy):
                                      grouper=self.grouper)
                 results.append(colg.aggregate(arg))
                 keys.append(col)
-            except (TypeError, DataError):
+            except (TypeError, DataError) :
                 pass
-
+            except SpecificationError:
+                raise
         result = concat(results, keys=keys, axis=1)
 
         return result
diff --git a/pandas/src/generate_code.py b/pandas/src/generate_code.py
index 098a63069..fa9e21e16 100644
--- a/pandas/src/generate_code.py
+++ b/pandas/src/generate_code.py
@@ -628,6 +628,9 @@ def group_last_%(name)s(ndarray[%(dest_type2)s, ndim=2] out,
         ndarray[%(dest_type2)s, ndim=2] resx
         ndarray[int64_t, ndim=2] nobs
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros((<object> out).shape, dtype=np.int64)
     resx = np.empty_like(out)
 
@@ -763,6 +766,9 @@ def group_nth_%(name)s(ndarray[%(dest_type2)s, ndim=2] out,
         ndarray[%(dest_type2)s, ndim=2] resx
         ndarray[int64_t, ndim=2] nobs
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros((<object> out).shape, dtype=np.int64)
     resx = np.empty_like(out)
 
@@ -805,6 +811,9 @@ def group_add_%(name)s(ndarray[%(dest_type2)s, ndim=2] out,
         %(dest_type2)s val, count
         ndarray[%(dest_type2)s, ndim=2] sumx, nobs
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros_like(out)
     sumx = np.zeros_like(out)
 
@@ -918,6 +927,9 @@ def group_prod_%(name)s(ndarray[%(dest_type2)s, ndim=2] out,
         %(dest_type2)s val, count
         ndarray[%(dest_type2)s, ndim=2] prodx, nobs
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros_like(out)
     prodx = np.ones_like(out)
 
@@ -1028,6 +1040,9 @@ def group_var_%(name)s(ndarray[%(dest_type2)s, ndim=2] out,
         %(dest_type2)s val, ct
         ndarray[%(dest_type2)s, ndim=2] nobs, sumx, sumxx
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros_like(out)
     sumx = np.zeros_like(out)
     sumxx = np.zeros_like(out)
@@ -1223,6 +1238,9 @@ def group_max_%(name)s(ndarray[%(dest_type2)s, ndim=2] out,
         %(dest_type2)s val, count
         ndarray[%(dest_type2)s, ndim=2] maxx, nobs
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros_like(out)
 
     maxx = np.empty_like(out)
@@ -1345,6 +1363,9 @@ def group_min_%(name)s(ndarray[%(dest_type2)s, ndim=2] out,
         %(dest_type2)s val, count
         ndarray[%(dest_type2)s, ndim=2] minx, nobs
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros_like(out)
 
     minx = np.empty_like(out)
@@ -1402,6 +1423,9 @@ def group_mean_%(name)s(ndarray[%(dest_type2)s, ndim=2] out,
         %(dest_type2)s val, count
         ndarray[%(dest_type2)s, ndim=2] sumx, nobs
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros_like(out)
     sumx = np.zeros_like(out)
 
diff --git a/pandas/src/generated.pyx b/pandas/src/generated.pyx
index 40e917bc7..11a610375 100644
--- a/pandas/src/generated.pyx
+++ b/pandas/src/generated.pyx
@@ -3352,7 +3352,7 @@ def take_2d_axis1_bool_bool(ndarray[uint8_t, ndim=2] values,
 
     n = len(values)
     k = len(indexer)
-    
+
     fv = fill_value
 
     IF True:
@@ -3392,7 +3392,7 @@ def take_2d_axis1_bool_object(ndarray[uint8_t, ndim=2] values,
 
     n = len(values)
     k = len(indexer)
-    
+
     fv = fill_value
 
     IF False:
@@ -3432,7 +3432,7 @@ def take_2d_axis1_int8_int8(ndarray[int8_t, ndim=2] values,
 
     n = len(values)
     k = len(indexer)
-    
+
     fv = fill_value
 
     IF True:
@@ -3472,7 +3472,7 @@ def take_2d_axis1_int8_int32(ndarray[int8_t, ndim=2] values,
 
     n = len(values)
     k = len(indexer)
-    
+
     fv = fill_value
 
     IF False:
@@ -3512,7 +3512,7 @@ def take_2d_axis1_int8_int64(ndarray[int8_t, ndim=2] values,
 
     n = len(values)
     k = len(indexer)
-    
+
     fv = fill_value
 
     IF False:
@@ -3552,7 +3552,7 @@ def take_2d_axis1_int8_float64(ndarray[int8_t, ndim=2] values,
 
     n = len(values)
     k = len(indexer)
-    
+
     fv = fill_value
 
     IF False:
@@ -3592,7 +3592,7 @@ def take_2d_axis1_int16_int16(ndarray[int16_t, ndim=2] values,
 
     n = len(values)
     k = len(indexer)
-    
+
     fv = fill_value
 
     IF True:
@@ -3632,7 +3632,7 @@ def take_2d_axis1_int16_int32(ndarray[int16_t, ndim=2] values,
 
     n = len(values)
     k = len(indexer)
-    
+
     fv = fill_value
 
     IF False:
@@ -3672,7 +3672,7 @@ def take_2d_axis1_int16_int64(ndarray[int16_t, ndim=2] values,
 
     n = len(values)
     k = len(indexer)
-    
+
     fv = fill_value
 
     IF False:
@@ -3712,7 +3712,7 @@ def take_2d_axis1_int16_float64(ndarray[int16_t, ndim=2] values,
 
     n = len(values)
     k = len(indexer)
-    
+
     fv = fill_value
 
     IF False:
@@ -3752,7 +3752,7 @@ def take_2d_axis1_int32_int32(ndarray[int32_t, ndim=2] values,
 
     n = len(values)
     k = len(indexer)
-    
+
     fv = fill_value
 
     IF True:
@@ -3792,7 +3792,7 @@ def take_2d_axis1_int32_int64(ndarray[int32_t, ndim=2] values,
 
     n = len(values)
     k = len(indexer)
-    
+
     fv = fill_value
 
     IF False:
@@ -3832,7 +3832,7 @@ def take_2d_axis1_int32_float64(ndarray[int32_t, ndim=2] values,
 
     n = len(values)
     k = len(indexer)
-    
+
     fv = fill_value
 
     IF False:
@@ -3872,7 +3872,7 @@ def take_2d_axis1_int64_int64(ndarray[int64_t, ndim=2] values,
 
     n = len(values)
     k = len(indexer)
-    
+
     fv = fill_value
 
     IF True:
@@ -3912,7 +3912,7 @@ def take_2d_axis1_int64_float64(ndarray[int64_t, ndim=2] values,
 
     n = len(values)
     k = len(indexer)
-    
+
     fv = fill_value
 
     IF False:
@@ -3952,7 +3952,7 @@ def take_2d_axis1_float32_float32(ndarray[float32_t, ndim=2] values,
 
     n = len(values)
     k = len(indexer)
-    
+
     fv = fill_value
 
     IF True:
@@ -3992,7 +3992,7 @@ def take_2d_axis1_float32_float64(ndarray[float32_t, ndim=2] values,
 
     n = len(values)
     k = len(indexer)
-    
+
     fv = fill_value
 
     IF False:
@@ -4032,7 +4032,7 @@ def take_2d_axis1_float64_float64(ndarray[float64_t, ndim=2] values,
 
     n = len(values)
     k = len(indexer)
-    
+
     fv = fill_value
 
     IF True:
@@ -4072,7 +4072,7 @@ def take_2d_axis1_object_object(ndarray[object, ndim=2] values,
 
     n = len(values)
     k = len(indexer)
-    
+
     fv = fill_value
 
     IF False:
@@ -4908,6 +4908,9 @@ def group_last_float64(ndarray[float64_t, ndim=2] out,
         ndarray[float64_t, ndim=2] resx
         ndarray[int64_t, ndim=2] nobs
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros((<object> out).shape, dtype=np.int64)
     resx = np.empty_like(out)
 
@@ -4948,6 +4951,9 @@ def group_last_float32(ndarray[float32_t, ndim=2] out,
         ndarray[float32_t, ndim=2] resx
         ndarray[int64_t, ndim=2] nobs
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros((<object> out).shape, dtype=np.int64)
     resx = np.empty_like(out)
 
@@ -5078,6 +5084,9 @@ def group_nth_float64(ndarray[float64_t, ndim=2] out,
         ndarray[float64_t, ndim=2] resx
         ndarray[int64_t, ndim=2] nobs
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros((<object> out).shape, dtype=np.int64)
     resx = np.empty_like(out)
 
@@ -5119,6 +5128,9 @@ def group_nth_float32(ndarray[float32_t, ndim=2] out,
         ndarray[float32_t, ndim=2] resx
         ndarray[int64_t, ndim=2] nobs
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros((<object> out).shape, dtype=np.int64)
     resx = np.empty_like(out)
 
@@ -5251,6 +5263,9 @@ def group_add_float64(ndarray[float64_t, ndim=2] out,
         float64_t val, count
         ndarray[float64_t, ndim=2] sumx, nobs
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros_like(out)
     sumx = np.zeros_like(out)
 
@@ -5304,6 +5319,9 @@ def group_add_float32(ndarray[float32_t, ndim=2] out,
         float32_t val, count
         ndarray[float32_t, ndim=2] sumx, nobs
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros_like(out)
     sumx = np.zeros_like(out)
 
@@ -5471,6 +5489,9 @@ def group_prod_float64(ndarray[float64_t, ndim=2] out,
         float64_t val, count
         ndarray[float64_t, ndim=2] prodx, nobs
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros_like(out)
     prodx = np.ones_like(out)
 
@@ -5524,6 +5545,9 @@ def group_prod_float32(ndarray[float32_t, ndim=2] out,
         float32_t val, count
         ndarray[float32_t, ndim=2] prodx, nobs
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros_like(out)
     prodx = np.ones_like(out)
 
@@ -5688,6 +5712,9 @@ def group_var_float64(ndarray[float64_t, ndim=2] out,
         float64_t val, ct
         ndarray[float64_t, ndim=2] nobs, sumx, sumxx
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros_like(out)
     sumx = np.zeros_like(out)
     sumxx = np.zeros_like(out)
@@ -5746,6 +5773,9 @@ def group_var_float32(ndarray[float32_t, ndim=2] out,
         float32_t val, ct
         ndarray[float32_t, ndim=2] nobs, sumx, sumxx
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros_like(out)
     sumx = np.zeros_like(out)
     sumxx = np.zeros_like(out)
@@ -5928,6 +5958,9 @@ def group_mean_float64(ndarray[float64_t, ndim=2] out,
         float64_t val, count
         ndarray[float64_t, ndim=2] sumx, nobs
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros_like(out)
     sumx = np.zeros_like(out)
 
@@ -5977,6 +6010,9 @@ def group_mean_float32(ndarray[float32_t, ndim=2] out,
         float32_t val, count
         ndarray[float32_t, ndim=2] sumx, nobs
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros_like(out)
     sumx = np.zeros_like(out)
 
@@ -6137,6 +6173,9 @@ def group_min_float64(ndarray[float64_t, ndim=2] out,
         float64_t val, count
         ndarray[float64_t, ndim=2] minx, nobs
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros_like(out)
 
     minx = np.empty_like(out)
@@ -6194,6 +6233,9 @@ def group_min_float32(ndarray[float32_t, ndim=2] out,
         float32_t val, count
         ndarray[float32_t, ndim=2] minx, nobs
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros_like(out)
 
     minx = np.empty_like(out)
@@ -6375,6 +6417,9 @@ def group_max_float64(ndarray[float64_t, ndim=2] out,
         float64_t val, count
         ndarray[float64_t, ndim=2] maxx, nobs
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros_like(out)
 
     maxx = np.empty_like(out)
@@ -6432,6 +6477,9 @@ def group_max_float32(ndarray[float32_t, ndim=2] out,
         float32_t val, count
         ndarray[float32_t, ndim=2] maxx, nobs
 
+    if not len(values) == len(labels):
+       raise AssertionError("len(index) != len(labels)")
+
     nobs = np.zeros_like(out)
 
     maxx = np.empty_like(out)
