commit de27eef23acf377c1eed1c117765ff4bf81a6d2f
Author: jreback <jeff@reback.net>
Date:   Fri May 10 21:39:40 2013 -0400

    ENH: to_csv write multi-index columns similar to how they are displayed in to_string

diff --git a/pandas/core/format.py b/pandas/core/format.py
index bea4b59bf..285d50373 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -959,9 +959,12 @@ class CSVFormatter(object):
         index_label = self.index_label
         cols = self.cols
         header = self.header
+        has_mi_columns = isinstance(obj.columns, MultiIndex)
+        encoded_labels = []
 
         has_aliases = isinstance(header, (tuple, list, np.ndarray))
         if has_aliases or self.header:
+
             if self.index:
                 # should write something for index label
                 if index_label is not False:
@@ -994,12 +997,40 @@ class CSVFormatter(object):
                         write_cols = header
                 else:
                     write_cols = cols
-                encoded_cols = list(write_cols)
 
-                writer.writerow(encoded_labels + encoded_cols)
+                if not has_mi_columns:
+                    encoded_labels += list(write_cols)
+
             else:
-                encoded_cols = list(cols)
-                writer.writerow(encoded_cols)
+
+                if not has_mi_columns:
+                    encoded_labels += list(cols)
+
+        # write out the mi
+        if has_mi_columns:
+            columns = obj.columns
+
+            # write out the names for each level, then ALL of the values for each level
+            for i in range(columns.nlevels):
+
+                # name is the first column
+                col_line = [ columns.names[i] ]
+
+                # skipp len labels-1
+                if self.index and isinstance(index_label,list) and len(index_label)>1:
+                    col_line.extend([ '' ] * (len(index_label)-1))
+
+                for j in range(len(columns)):
+                    col_line.append(columns.levels[i][j])
+
+                writer.writerow(col_line)
+
+            # add blanks for the columns, so that we
+            # have consistent seps
+            encoded_labels.extend([ '' ] * len(columns))
+
+        # write out the index label line
+        writer.writerow(encoded_labels)
 
     def _save(self):
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 8e48ef094..d8eb2748d 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -4962,6 +4962,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         frame.index = new_index
 
         with ensure_clean(pname) as path:
+
              frame.to_csv(path, header=False)
              frame.to_csv(path, cols=['A', 'B'])
 
@@ -4973,7 +4974,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
              self.assertEqual(frame.index.names, df.index.names)
              self.frame.index = old_index  # needed if setUP becomes a classmethod
 
-              # try multiindex with dates
+             # try multiindex with dates
              tsframe = self.tsframe
              old_index = tsframe.index
              new_index = [old_index, np.arange(len(old_index))]
@@ -4994,6 +4995,15 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
              assert_almost_equal(recons.values, self.tsframe.values)
              self.tsframe.index = old_index  # needed if setUP becomes classmethod
 
+        with ensure_clean(pname) as path:
+            # column & index are mi
+            import pdb; pdb.set_trace()
+            df = mkdf(5,3,r_idx_nlevels=2,c_idx_nlevels=4)
+            df.to_csv(path)
+
+            result = pd.read_csv(path,header=[0,1,2,3],index_col=[0,1])
+
+
         with ensure_clean(pname) as path:
             # empty
             tsframe[:0].to_csv(path)
