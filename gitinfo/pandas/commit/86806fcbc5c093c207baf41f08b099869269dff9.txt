commit 86806fcbc5c093c207baf41f08b099869269dff9
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Dec 2 13:20:21 2012 -0500

    ENH: some cython type checking tweaks and a vbench

diff --git a/pandas/src/util.pxd b/pandas/src/util.pxd
index eaccc075f..c9fbb89f2 100644
--- a/pandas/src/util.pxd
+++ b/pandas/src/util.pxd
@@ -64,17 +64,18 @@ cdef inline is_array(object o):
 
 
 cdef inline bint _checknull(object val):
-    import numpy as np
-    cdef double INF = <double> np.inf
-    cdef double NEGINF = -INF
     try:
-        return bool(val is None or (val != val and val != INF and val != NEGINF))
+        return val is None or (cpython.PyFloat_Check(val) and val != val)
     except ValueError:
         return False
 
 cdef inline bint _checknull_old(object val):
+    import numpy as np
+    cdef double INF = <double> np.inf
+    cdef double NEGINF = -INF
     try:
-        return val is None or (cpython.PyFloat_Check(val) and val != val)
+        return bool(val is None or val != val and val != INF
+                    and val != NEGINF)
     except ValueError:
         return False
 
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 89ea121db..33aec25e6 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -2286,10 +2286,10 @@ class TestDatetime64(unittest.TestCase):
 
     @slow
     def test_slice_locs_indexerror(self):
-        times = [datetime(2000, 1, 1) + timedelta(minutes=i) for i in range(1000000)]
-        s = Series(range(1000000), times)
-        s.ix[datetime(1900,1,1)
-:datetime(2100,1,1)]
+        times = [datetime(2000, 1, 1) + timedelta(minutes=i * 10)
+                 for i in range(100000)]
+        s = Series(range(100000), times)
+        s.ix[datetime(1900,1,1):datetime(2100,1,1)]
 
 
 class TestSeriesDatetime64(unittest.TestCase):
diff --git a/pandas/tslib.pyx b/pandas/tslib.pyx
index 10e0e4e5f..332018359 100644
--- a/pandas/tslib.pyx
+++ b/pandas/tslib.pyx
@@ -92,11 +92,11 @@ class Timestamp(_Timestamp):
         cdef _TSObject ts
         cdef _Timestamp ts_base
 
-        if isinstance(ts_input, float):
+        if PyFloat_Check(ts_input):
             # to do, do we want to support this, ie with fractional seconds?
             raise TypeError("Cannot convert a float to datetime")
 
-        if isinstance(ts_input, basestring):
+        if util.is_string_object(ts_input):
             try:
                 ts_input = parse_date(ts_input)
             except Exception:
@@ -303,9 +303,6 @@ NaT = NaTType()
 iNaT = util.get_nat()
 
 
-cdef inline bint is_timestamp(object o):
-    return isinstance(o, Timestamp)
-
 def is_timestamp_array(ndarray[object] values):
     cdef int i, n = len(values)
     if n == 0:
@@ -512,6 +509,13 @@ cdef class _Timestamp(datetime):
         return out[0]
 
 
+cdef PyTypeObject* ts_type = <PyTypeObject*> Timestamp
+
+
+cdef inline bint is_timestamp(object o):
+    return Py_TYPE(o) == ts_type # isinstance(o, Timestamp)
+
+
 cdef class _NaT(_Timestamp):
 
     def __richcmp__(_NaT self, object other, int op):
@@ -768,7 +772,7 @@ def array_to_datetime(ndarray[object] values, raise_=False, dayfirst=False,
                                          'utc=True')
                 else:
                     iresult[i] = _pydatetime_to_dts(val, &dts)
-                    if isinstance(val, _Timestamp):
+                    if is_timestamp(val):
                         iresult[i] += (<_Timestamp>val).nanosecond
                     _check_dts_bounds(iresult[i], &dts)
             elif PyDate_Check(val):
diff --git a/vb_suite/reindex.py b/vb_suite/reindex.py
index 6e76c7bdd..2523462eb 100644
--- a/vb_suite/reindex.py
+++ b/vb_suite/reindex.py
@@ -181,3 +181,26 @@ df = DataFrame(values)
 frame_fillna_many_columns_pad = Benchmark("df.fillna(method='pad')",
                                           setup,
                                           start_date=datetime(2011, 3, 1))
+
+#----------------------------------------------------------------------
+# blog "pandas escaped the zoo"
+
+setup = common_setup + """
+n = 50000
+indices = Index([rands(10) for _ in xrange(n)])
+
+def sample(values, k):
+    from random import shuffle
+    sampler = np.arange(len(values))
+    shuffle(sampler)
+    return values.take(sampler[:k])
+
+subsample_size = 40000
+
+x = Series(np.random.randn(50000), indices)
+y = Series(np.random.randn(subsample_size),
+           index=sample(indices, subsample_size))
+"""
+
+series_align_irregular_string = Benchmark("x + y", setup,
+                                          start_date=datetime(2010, 6, 1))
