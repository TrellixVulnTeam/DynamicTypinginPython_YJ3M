commit 67528335473d4e1f4bb7b0df78d66f69b1a7507e
Author: Tom Augspurger <TomAugspurger@users.noreply.github.com>
Date:   Wed Jan 22 08:46:58 2020 -0600

    CI: numpydev ragged array dtype warning (#31203)

diff --git a/pandas/core/indexes/multi.py b/pandas/core/indexes/multi.py
index b684908c2..a26a01ab7 100644
--- a/pandas/core/indexes/multi.py
+++ b/pandas/core/indexes/multi.py
@@ -2058,7 +2058,7 @@ class MultiIndex(Index):
 
         if not isinstance(codes, (np.ndarray, Index)):
             try:
-                codes = com.index_labels_to_array(codes)
+                codes = com.index_labels_to_array(codes, dtype=object)
             except ValueError:
                 pass
 
diff --git a/pandas/core/strings.py b/pandas/core/strings.py
index 4bcf2943e..18c7504f2 100644
--- a/pandas/core/strings.py
+++ b/pandas/core/strings.py
@@ -79,7 +79,7 @@ def cat_core(list_of_columns: List, sep: str):
         return np.sum(arr_of_cols, axis=0)
     list_with_sep = [sep] * (2 * len(list_of_columns) - 1)
     list_with_sep[::2] = list_of_columns
-    arr_with_sep = np.asarray(list_with_sep)
+    arr_with_sep = np.asarray(list_with_sep, dtype=object)
     return np.sum(arr_with_sep, axis=0)
 
 
diff --git a/pandas/tests/arrays/categorical/test_constructors.py b/pandas/tests/arrays/categorical/test_constructors.py
index 70a23e974..cfba3da35 100644
--- a/pandas/tests/arrays/categorical/test_constructors.py
+++ b/pandas/tests/arrays/categorical/test_constructors.py
@@ -605,6 +605,6 @@ class TestCategoricalConstructors:
     @pytest.mark.skipif(_np_version_under1p16, reason="Skipping for NumPy <1.16")
     def test_constructor_string_and_tuples(self):
         # GH 21416
-        c = pd.Categorical(["c", ("a", "b"), ("b", "a"), "c"])
+        c = pd.Categorical(np.array(["c", ("a", "b"), ("b", "a"), "c"], dtype=object))
         expected_index = pd.Index([("a", "b"), ("b", "a"), "c"])
         assert c.categories.equals(expected_index)
diff --git a/pandas/tests/arrays/categorical/test_missing.py b/pandas/tests/arrays/categorical/test_missing.py
index 211bf091e..8889f45a8 100644
--- a/pandas/tests/arrays/categorical/test_missing.py
+++ b/pandas/tests/arrays/categorical/test_missing.py
@@ -77,7 +77,7 @@ class TestCategoricalMissing:
             Point = collections.namedtuple("Point", "x y")
         else:
             Point = lambda *args: args  # tuple
-        cat = Categorical([Point(0, 0), Point(0, 1), None])
+        cat = Categorical(np.array([Point(0, 0), Point(0, 1), None], dtype=object))
         result = cat.fillna(Point(0, 0))
         expected = Categorical([Point(0, 0), Point(0, 1), Point(0, 0)])
 
diff --git a/pandas/tests/extension/base/getitem.py b/pandas/tests/extension/base/getitem.py
index dc1f62c4c..e0f3a4754 100644
--- a/pandas/tests/extension/base/getitem.py
+++ b/pandas/tests/extension/base/getitem.py
@@ -245,7 +245,9 @@ class BaseGetitemTests(BaseExtensionTests):
         fill_value = data_missing[1]  # valid
         na = data_missing[0]
 
-        array = data_missing._from_sequence([na, fill_value, na])
+        array = data_missing._from_sequence(
+            [na, fill_value, na], dtype=data_missing.dtype
+        )
         result = array.take([-1, 1], fill_value=fill_value, allow_fill=True)
         expected = array.take([1, 1])
         self.assert_extension_array_equal(result, expected)
@@ -293,10 +295,12 @@ class BaseGetitemTests(BaseExtensionTests):
         valid = data_missing[1]
         na = data_missing[0]
 
-        array = data_missing._from_sequence([na, valid])
+        array = data_missing._from_sequence([na, valid], dtype=data_missing.dtype)
         ser = pd.Series(array)
         result = ser.reindex([0, 1, 2], fill_value=valid)
-        expected = pd.Series(data_missing._from_sequence([na, valid, valid]))
+        expected = pd.Series(
+            data_missing._from_sequence([na, valid, valid], dtype=data_missing.dtype)
+        )
 
         self.assert_series_equal(result, expected)
 
diff --git a/pandas/tests/extension/json/array.py b/pandas/tests/extension/json/array.py
index 17bc2773a..a065c3368 100644
--- a/pandas/tests/extension/json/array.py
+++ b/pandas/tests/extension/json/array.py
@@ -113,6 +113,11 @@ class JSONArray(ExtensionArray):
     def __len__(self) -> int:
         return len(self.data)
 
+    def __array__(self, dtype=None):
+        if dtype is None:
+            dtype = object
+        return np.asarray(self.data, dtype=dtype)
+
     @property
     def nbytes(self) -> int:
         return sys.getsizeof(self.data)
diff --git a/pandas/tests/extension/json/test_json.py b/pandas/tests/extension/json/test_json.py
index 4d3145109..dc03a1f1d 100644
--- a/pandas/tests/extension/json/test_json.py
+++ b/pandas/tests/extension/json/test_json.py
@@ -163,10 +163,6 @@ class TestReshaping(BaseJSON, base.BaseReshapingTests):
         # this matches otherwise
         return super().test_unstack(data, index)
 
-    @pytest.mark.xfail(reason="Inconsistent sizes.")
-    def test_transpose(self, data):
-        super().test_transpose(data)
-
 
 class TestGetitem(BaseJSON, base.BaseGetitemTests):
     pass
