commit 59a38d46eaf948ab1f8f16eaa51d06395c63bf16
Author: jreback <jeff@reback.net>
Date:   Thu Apr 24 15:31:05 2014 -0400

    COMPAT: change neg of boolean to inv (deprecation in numpy 1.9)
    COMPAT: remove deprecation warnings on __new__ (in computation/pytables)

diff --git a/ci/script.sh b/ci/script.sh
index 152a2f1eb..e76789b68 100755
--- a/ci/script.sh
+++ b/ci/script.sh
@@ -16,6 +16,13 @@ fi
 "$TRAVIS_BUILD_DIR"/ci/build_docs.sh 2>&1 > /tmp/doc.log &
 # doc build log will be shown after tests
 
+# export the testing mode
+if [ -n "$NUMPY_BUILD" ]; then
+
+    export PANDAS_TESTING_MODE="numpy_deprecate"
+
+fi
+
 echo nosetests --exe -w /tmp -A "$NOSE_ARGS" pandas --with-xunit --xunit-file=/tmp/nosetests.xml
 nosetests --exe -w /tmp -A "$NOSE_ARGS" pandas --with-xunit --xunit-file=/tmp/nosetests.xml
 
diff --git a/doc/source/release.rst b/doc/source/release.rst
index c975143b0..f7b47b06e 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -240,6 +240,9 @@ Prior Version Deprecations/Changes
 - Remove ``time_rule`` from several rolling-moment statistical functions, such
   as :func:`rolling_sum` (:issue:`1042`)
 
+- Removed neg (-) boolean operations on numpy arrays in favor of inv (~), as this is going to
+  be deprecated in numpy 1.9 (:issue:`6960`)
+
 Experimental Features
 ~~~~~~~~~~~~~~~~~~~~~
 
diff --git a/doc/source/v0.14.0.txt b/doc/source/v0.14.0.txt
index 34480668d..dd6a21cce 100644
--- a/doc/source/v0.14.0.txt
+++ b/doc/source/v0.14.0.txt
@@ -368,6 +368,8 @@ There are prior version deprecations that are taking effect as of 0.14.0.
   ( `commit 3136390 <https://github.com/pydata/pandas/commit/3136390>`__ )
 - Remove ``time_rule`` from several rolling-moment statistical functions, such
   as :func:`rolling_sum` (:issue:`1042`)
+- Removed neg (-) boolean operations on numpy arrays in favor of inv (~), as this is going to
+  be deprecated in numpy 1.9 (:issue:`6960`)
 
 .. _whatsnew_0140.deprecations:
 
diff --git a/pandas/algos.pyx b/pandas/algos.pyx
index 4628853df..3b5277405 100644
--- a/pandas/algos.pyx
+++ b/pandas/algos.pyx
@@ -510,7 +510,7 @@ def rank_1d_generic(object in_arr, bint retry=1, ties_method='average',
         if not retry:
             raise
 
-        valid_locs = (-mask).nonzero()[0]
+        valid_locs = (~mask).nonzero()[0]
         ranks.put(valid_locs, rank_1d_generic(values.take(valid_locs), 0,
                                               ties_method=ties_method,
                                               ascending=ascending))
diff --git a/pandas/computation/ops.py b/pandas/computation/ops.py
index 1f57c4591..59d386003 100644
--- a/pandas/computation/ops.py
+++ b/pandas/computation/ops.py
@@ -42,9 +42,7 @@ class Term(StringMixin):
     def __new__(cls, name, env, side=None, encoding=None):
         klass = Constant if not isinstance(name, string_types) else cls
         supr_new = super(Term, klass).__new__
-        if PY3:
-            return supr_new(klass)
-        return supr_new(klass, name, env, side=side, encoding=encoding)
+        return supr_new(klass)
 
     def __init__(self, name, env, side=None, encoding=None):
         self._name = name
diff --git a/pandas/computation/pytables.py b/pandas/computation/pytables.py
index 8fc842d95..9a1e61ad3 100644
--- a/pandas/computation/pytables.py
+++ b/pandas/computation/pytables.py
@@ -33,9 +33,7 @@ class Term(ops.Term):
     def __new__(cls, name, env, side=None, encoding=None):
         klass = Constant if not isinstance(name, string_types) else cls
         supr_new = StringMixin.__new__
-        if PY3:
-            return supr_new(klass)
-        return supr_new(klass, name, env, side=side, encoding=encoding)
+        return supr_new(klass)
 
     def __init__(self, name, env, side=None, encoding=None):
         super(Term, self).__init__(name, env, side=side, encoding=encoding)
diff --git a/pandas/core/algorithms.py b/pandas/core/algorithms.py
index 5efba4a97..f0ecce023 100644
--- a/pandas/core/algorithms.py
+++ b/pandas/core/algorithms.py
@@ -329,7 +329,7 @@ def quantile(x, q, interpolation_method='fraction'):
     x = np.asarray(x)
     mask = com.isnull(x)
 
-    x = x[-mask]
+    x = x[~mask]
 
     values = np.sort(x)
 
@@ -339,7 +339,7 @@ def quantile(x, q, interpolation_method='fraction'):
 
         idx = at * (len(values) - 1)
         if idx % 1 == 0:
-            score = values[idx]
+            score = values[int(idx)]
         else:
             if interpolation_method == 'fraction':
                 score = _interpolate(values[int(idx)], values[int(idx) + 1],
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 18a3dba1a..813d64704 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -248,7 +248,7 @@ def _isnull_ndarraylike_old(obj):
         # this is the NaT pattern
         result = values.view('i8') == tslib.iNaT
     else:
-        result = -np.isfinite(values)
+        result = ~np.isfinite(values)
 
     # box
     if isinstance(obj, ABCSeries):
@@ -280,7 +280,7 @@ def notnull(obj):
     res = isnull(obj)
     if np.isscalar(res):
         return not res
-    return -res
+    return ~res
 
 def _is_null_datelike_scalar(other):
     """ test whether the object is a null datelike, e.g. Nat
@@ -363,7 +363,7 @@ def mask_missing(arr, values_to_mask):
         values_to_mask = np.array(values_to_mask, dtype=object)
 
     na_mask = isnull(values_to_mask)
-    nonna = values_to_mask[-na_mask]
+    nonna = values_to_mask[~na_mask]
 
     mask = None
     for x in nonna:
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index fcd2e65af..10a0c9050 100755
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -3041,7 +3041,7 @@ class DataFrame(NDFrame):
             this = self[col].values
             that = other[col].values
             if filter_func is not None:
-                mask = -filter_func(this) | isnull(that)
+                mask = ~filter_func(this) | isnull(that)
             else:
                 if raise_conflict:
                     mask_this = notnull(that)
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 3f2ecd8af..3aed34c7f 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -606,7 +606,11 @@ class NDFrame(PandasObject):
                     for a in self._AXIS_ORDERS])
 
     def __neg__(self):
-        arr = operator.neg(_values_from_object(self))
+        values = _values_from_object(self)
+        if values.dtype == np.bool_:
+            arr = operator.inv(values)
+        else:
+            arr = operator.neg(values)
         return self._wrap_array(arr, self.axes, copy=False)
 
     def __invert__(self):
@@ -1459,10 +1463,10 @@ class NDFrame(PandasObject):
             if level is not None:
                 if not isinstance(axis, MultiIndex):
                     raise AssertionError('axis must be a MultiIndex')
-                indexer = -lib.ismember(axis.get_level_values(level),
+                indexer = ~lib.ismember(axis.get_level_values(level),
                                         set(labels))
             else:
-                indexer = -axis.isin(labels)
+                indexer = ~axis.isin(labels)
 
             slicer = [slice(None)] * self.ndim
             slicer[self._get_axis_number(axis_name)] = indexer
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index f650b41ff..0a4739f58 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -1698,7 +1698,7 @@ class Grouping(object):
 
                     labels = np.empty(len(inds), dtype=inds.dtype)
                     labels[mask] = ok_labels
-                    labels[-mask] = -1
+                    labels[~mask] = -1
 
                 if len(uniques) < len(level_index):
                     level_index = level_index.take(uniques)
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 8748d0081..0d363ee2b 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -2997,7 +2997,7 @@ class MultiIndex(Index):
         index = self.levels[i]
         values = index.get_indexer(labels)
 
-        mask = -lib.ismember(self.labels[i], set(values))
+        mask = ~lib.ismember(self.labels[i], set(values))
 
         return self[mask]
 
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 17c0bf283..887f75624 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -1049,7 +1049,7 @@ class FloatBlock(FloatOrComplexBlock):
         mask = isnull(values)
         values[mask] = na_rep
         if float_format:
-            imask = (-mask).ravel()
+            imask = (~mask).ravel()
             values.flat[imask] = np.array(
                 [float_format % val for val in values.ravel()[imask]])
         return values.tolist()
@@ -1181,7 +1181,7 @@ class TimeDeltaBlock(IntBlock):
         if na_rep is None:
             na_rep = 'NaT'
         rvalues[mask] = na_rep
-        imask = (-mask).ravel()
+        imask = (~mask).ravel()
         rvalues.flat[imask] = np.array([lib.repr_timedelta64(val)
                                         for val in values.ravel()[imask]],
                                        dtype=object)
@@ -1531,7 +1531,7 @@ class DatetimeBlock(Block):
         if na_rep is None:
             na_rep = 'NaT'
         rvalues[mask] = na_rep
-        imask = (-mask).ravel()
+        imask = (~mask).ravel()
 
         if date_format is None:
             date_formatter = lambda x: Timestamp(x)._repr_base
diff --git a/pandas/core/nanops.py b/pandas/core/nanops.py
index 9c2df9b5d..43ececae1 100644
--- a/pandas/core/nanops.py
+++ b/pandas/core/nanops.py
@@ -190,9 +190,9 @@ def _isfinite(values):
     if issubclass(values.dtype.type, (np.timedelta64, np.datetime64)):
         return isnull(values)
     elif isinstance(values.dtype, object):
-        return -np.isfinite(values.astype('float64'))
+        return ~np.isfinite(values.astype('float64'))
 
-    return -np.isfinite(values)
+    return ~np.isfinite(values)
 
 
 def _na_ok_dtype(dtype):
diff --git a/pandas/core/ops.py b/pandas/core/ops.py
index b8e92fb25..d4e756371 100644
--- a/pandas/core/ops.py
+++ b/pandas/core/ops.py
@@ -452,7 +452,7 @@ def _arith_method_SERIES(op, name, str_rep=None, fill_zeros=None,
                 mask = notnull(x)
                 result[mask] = op(x[mask], y)
 
-            result, changed = com._maybe_upcast_putmask(result, -mask, pa.NA)
+            result, changed = com._maybe_upcast_putmask(result, ~mask, pa.NA)
 
         result = com._fill_zeros(result, x, y, name, fill_zeros)
         return result
@@ -746,7 +746,7 @@ def _arith_method_FRAME(op, name, str_rep=None, default_axis='columns',
                 if np.prod(xrav.shape):
                     result[mask] = op(xrav, y)
 
-            result, changed = com._maybe_upcast_putmask(result, -mask, np.nan)
+            result, changed = com._maybe_upcast_putmask(result, ~mask, np.nan)
             result = result.reshape(x.shape)
 
         result = com._fill_zeros(result, x, y, name, fill_zeros)
@@ -817,9 +817,9 @@ def _flex_comp_method_FRAME(op, name, str_rep=None, default_axis='columns',
                 result[mask] = op(np.array(list(xrav[mask])), y)
 
             if op == operator.ne:  # pragma: no cover
-                np.putmask(result, -mask, True)
+                np.putmask(result, ~mask, True)
             else:
-                np.putmask(result, -mask, False)
+                np.putmask(result, ~mask, False)
             result = result.reshape(x.shape)
 
         return result
@@ -911,7 +911,7 @@ def _arith_method_PANEL(op, name, str_rep=None, fill_zeros=None,
             result = pa.empty(len(x), dtype=x.dtype)
             mask = notnull(x)
             result[mask] = op(x[mask], y)
-            result, changed = com._maybe_upcast_putmask(result, -mask, pa.NA)
+            result, changed = com._maybe_upcast_putmask(result, ~mask, pa.NA)
 
         result = com._fill_zeros(result, x, y, name, fill_zeros)
         return result
@@ -947,9 +947,9 @@ def _comp_method_PANEL(op, name, str_rep=None, masker=False):
                 result[mask] = op(np.array(list(xrav[mask])), y)
 
             if op == operator.ne:  # pragma: no cover
-                np.putmask(result, -mask, True)
+                np.putmask(result, ~mask, True)
             else:
-                np.putmask(result, -mask, False)
+                np.putmask(result, ~mask, False)
             result = result.reshape(x.shape)
 
         return result
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 637b2e8bf..c94d7dc9a 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -961,7 +961,11 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
     # inversion
     def __neg__(self):
-        arr = operator.neg(self.values)
+        values = self.values
+        if values.dtype == np.bool_:
+            arr = operator.inv(values)
+        else:
+            arr = operator.neg(values)
         return self._constructor(arr, self.index).__finalize__(self)
 
     def __invert__(self):
@@ -1646,7 +1650,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         if mask.any():
             result = Series(
                 -1, index=self.index, name=self.name, dtype='int64')
-            notmask = -mask
+            notmask = ~mask
             result[notmask] = np.argsort(values[notmask], kind=kind)
             return self._constructor(result,
                                      index=self.index).__finalize__(self)
@@ -1767,7 +1771,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         bad = isnull(arr)
 
-        good = -bad
+        good = ~bad
         idx = pa.arange(len(self))
 
         argsorted = _try_kind_sort(arr[good])
diff --git a/pandas/core/strings.py b/pandas/core/strings.py
index 7bcc534a3..6d40aa175 100644
--- a/pandas/core/strings.py
+++ b/pandas/core/strings.py
@@ -51,7 +51,7 @@ def str_cat(arr, others=None, sep=None, na_rep=None):
             result = np.empty(n, dtype=object)
             np.putmask(result, na_mask, np.nan)
 
-            notmask = -na_mask
+            notmask = ~na_mask
 
             tuples = zip(*[x[notmask] for x in arrays])
             cats = [sep.join(tup) for tup in tuples]
diff --git a/pandas/sparse/array.py b/pandas/sparse/array.py
index 7b23b306d..38a5688ed 100644
--- a/pandas/sparse/array.py
+++ b/pandas/sparse/array.py
@@ -509,7 +509,7 @@ def make_sparse(arr, kind='block', fill_value=nan):
     length = len(arr)
 
     if np.isnan(fill_value):
-        mask = -np.isnan(arr)
+        mask = ~np.isnan(arr)
     else:
         mask = arr != fill_value
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 2aac364d1..ddf155918 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -4786,7 +4786,8 @@ class TestDataFrame(tm.TestCase, CheckIndexing,
         _check_bin_op(operator.or_)
         _check_bin_op(operator.xor)
 
-        _check_unary_op(operator.neg)
+        # operator.neg is deprecated in numpy >= 1.9
+        _check_unary_op(operator.inv)
 
     def test_logical_typeerror(self):
         if not compat.PY3:
@@ -11110,7 +11111,7 @@ class TestDataFrame(tm.TestCase, CheckIndexing,
         exp = DataFrame({"a":[ 3.5,  1. ,  3.5,  5. ,  6. ,  7. ,  2. ]})
         assert_frame_equal(df.rank(), exp)
 
-        
+
     def test_rank_na_option(self):
         from pandas.compat.scipy import rankdata
 
diff --git a/pandas/tests/test_generic.py b/pandas/tests/test_generic.py
index 91bca01ab..42bb76930 100644
--- a/pandas/tests/test_generic.py
+++ b/pandas/tests/test_generic.py
@@ -526,7 +526,7 @@ class TestSeries(tm.TestCase, Generic):
 
         expected = s.copy()
         bad = isnull(expected.values)
-        good = -bad
+        good = ~bad
         expected = Series(
             np.interp(vals[bad], vals[good], s.values[good]), index=s.index[bad])
 
diff --git a/pandas/tests/test_tseries.py b/pandas/tests/test_tseries.py
index 1915136f1..0bf3f1bec 100644
--- a/pandas/tests/test_tseries.py
+++ b/pandas/tests/test_tseries.py
@@ -338,7 +338,7 @@ def test_rank():
     from pandas.compat.scipy import rankdata
 
     def _check(arr):
-        mask = -np.isfinite(arr)
+        mask = ~np.isfinite(arr)
         arr = arr.copy()
         result = algos.rank_1d_float64(arr)
         arr[mask] = np.inf
diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index 5fca119c1..6d9e32433 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -1065,7 +1065,7 @@ class PeriodIndex(Int64Index):
         mask = isnull(self.values)
         values[mask] = na_rep
 
-        imask = -mask
+        imask = ~mask
         values[imask] = np.array([u('%s') % dt for dt in values[imask]])
         return values.tolist()
 
diff --git a/pandas/tseries/tests/test_util.py b/pandas/tseries/tests/test_util.py
index b10c4351c..df556cdc7 100644
--- a/pandas/tseries/tests/test_util.py
+++ b/pandas/tseries/tests/test_util.py
@@ -24,7 +24,7 @@ class TestPivotAnnual(tm.TestCase):
         annual = pivot_annual(ts, 'D')
 
         doy = ts.index.dayofyear
-        doy[(-isleapyear(ts.index.year)) & (doy >= 60)] += 1
+        doy[(~isleapyear(ts.index.year)) & (doy >= 60)] += 1
 
         for i in range(1, 367):
             subset = ts[doy == i]
@@ -47,7 +47,7 @@ class TestPivotAnnual(tm.TestCase):
         grouped = ts_hourly.groupby(ts_hourly.index.year)
         hoy = grouped.apply(lambda x: x.reset_index(drop=True))
         hoy = hoy.index.droplevel(0).values
-        hoy[-isleapyear(ts_hourly.index.year) & (hoy >= 1416)] += 24
+        hoy[~isleapyear(ts_hourly.index.year) & (hoy >= 1416)] += 24
         hoy += 1
 
         annual = pivot_annual(ts_hourly)
diff --git a/pandas/tseries/tools.py b/pandas/tseries/tools.py
index 6761b5cbb..d01ad5616 100644
--- a/pandas/tseries/tools.py
+++ b/pandas/tseries/tools.py
@@ -334,7 +334,7 @@ def _attempt_YYYYMMDD(arg):
     def calc_with_mask(carg,mask):
         result = np.empty(carg.shape, dtype='M8[ns]')
         iresult = result.view('i8')
-        iresult[-mask] = tslib.iNaT
+        iresult[~mask] = tslib.iNaT
         result[mask] = calc(carg[mask].astype(np.float64).astype(np.int64)).astype('M8[ns]')
         return result
 
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 8abbb3764..95fcc7848 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -54,16 +54,19 @@ N = 30
 K = 4
 _RAISE_NETWORK_ERROR_DEFAULT = False
 
+# set testing_mode
+testing_mode = os.environ.get('PANDAS_TESTING_MODE','None')
+if 'numpy_deprecate' in testing_mode:
+    warnings.simplefilter('always', DeprecationWarning)
+
 class TestCase(unittest.TestCase):
 
     @classmethod
     def setUpClass(cls):
         pd.set_option('chained_assignment','raise')
-        #print("setting up: {0}".format(cls))
 
     @classmethod
     def tearDownClass(cls):
-        #print("tearing down up: {0}".format(cls))
         pass
 
     def assert_numpy_array_equal(self, np_array, assert_equal):
