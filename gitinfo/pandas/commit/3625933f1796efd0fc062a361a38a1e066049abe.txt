commit 3625933f1796efd0fc062a361a38a1e066049abe
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Dec 25 21:31:48 2011 -0500

    ENH: add reorder_levels to Series and add unit testing per #534

diff --git a/RELEASE.rst b/RELEASE.rst
index c63250642..35cc7db39 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -40,6 +40,7 @@ pandas 0.6.2
   - Handle differently-indexed output values in ``DataFrame.apply`` (GH #498)
   - Can pass list of dicts (e.g., a list of shallow JSON objects) to DataFrame
     constructor (GH #526)
+  - Add `reorder_levels` method to Series and DataFrame (PR #534)
 
 **Improvements to existing features**
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index c263499d5..f77c1c6ce 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1809,7 +1809,7 @@ class DataFrame(NDFrame):
         -------
         type of caller (new object)
         """
-        if not isinstance(self._get_axis(axis), MultiIndex):
+        if not isinstance(self._get_axis(axis), MultiIndex):  # pragma: no cover
             raise Exception('Can only reorder levels on a hierarchical axis.')
 
         result = self.copy()
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 71a0d3091..0f0230a7f 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1239,6 +1239,7 @@ class MultiIndex(Index):
         Parameters
         ----------
         """
+        order = [self._get_level_number(i) for i in order]
         try:
             assert(set(order) == set(range(self.nlevels)))
         except AssertionError:
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 9273c6499..830fa1da7 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1338,6 +1338,28 @@ copy : boolean, default False
         new_index = self.index.swaplevel(i, j)
         return Series(self.values, index=new_index, copy=copy, name=self.name)
 
+    def reorder_levels(self, order):
+        """
+        Rearrange index levels using input order. May not drop or duplicate
+        levels
+
+        Parameters
+        ----------
+        order: list of int representing new level order.
+               (reference level by number not by key)
+        axis: where to reorder levels
+
+        Returns
+        -------
+        type of caller (new object)
+        """
+        if not isinstance(self.index, MultiIndex):  # pragma: no cover
+            raise Exception('Can only reorder levels on a hierarchical axis.')
+
+        result = self.copy()
+        result.index = result.index.reorder_levels(order)
+        return result
+
     def unstack(self, level=-1):
         """
         Unstack, a.k.a. pivot, Series with MultiIndex to produce DataFrame
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 10575247e..caad284c1 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -526,6 +526,19 @@ class TestMultiLevel(unittest.TestCase):
         expected.major_axis = expected.major_axis.swaplevel(0, 1)
         tm.assert_panel_equal(result, expected)
 
+    def test_reorder_levels(self):
+        result = self.ymd.reorder_levels(['month', 'day', 'year'])
+        expected = self.ymd.swaplevel(0, 1).swaplevel(1, 2)
+        assert_frame_equal(result, expected)
+
+        result = self.ymd['A'].reorder_levels(['month', 'day', 'year'])
+        expected = self.ymd['A'].swaplevel(0, 1).swaplevel(1, 2)
+        assert_series_equal(result, expected)
+
+        result = self.ymd.T.reorder_levels(['month', 'day', 'year'], axis=1)
+        expected = self.ymd.T.swaplevel(0, 1, axis=1).swaplevel(1, 2, axis=1)
+        assert_frame_equal(result, expected)
+
     def test_insert_index(self):
         df = self.ymd[:5].T
         df[2000, 1, 10] = df[2000, 1, 7]
