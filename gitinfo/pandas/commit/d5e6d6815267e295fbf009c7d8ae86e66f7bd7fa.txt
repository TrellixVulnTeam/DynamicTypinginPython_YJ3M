commit d5e6d6815267e295fbf009c7d8ae86e66f7bd7fa
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Sep 19 18:00:22 2009 +0000

    revamped DataFrame.reindex to better handle mixed-type data, and also be a lot faster
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@26 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index af96a7986..b05af56b6 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -894,28 +894,43 @@ class DataFrame(Picklable, Groupable):
         if len(self.index) == 0:
             return DataFrame(index=newIndex)
 
-        selfM = self.asMatrix()
-
         oldMap = self.index.indexMap
         newMap = newIndex.indexMap
 
-        if not fillMethod:
-            fillMethod = ''
-
-        fillMethod = fillMethod.upper()
-
+        fillMethod = fillMethod.upper() if fillMethod else ''
         if fillMethod not in ['BACKFILL', 'PAD', '']:
             raise Exception("Don't recognize fillMethod: %s" % fillMethod)
 
         fillVec, mask = tseries.getFillVec(self.index, newIndex, oldMap,
                                            newMap, fillMethod)
 
-        tmpMatrix = selfM[fillVec]
-        tmpMatrix[-mask] = NaN
-
-        return DataFrame(data=dict([(col, tmpMatrix[:, j])
-                                        for j, col in enumerate(self.cols())]),
-                                        index=newIndex)
+        # Maybe this is a bit much? Wish I had unit tests...
+        typeHierarchy = [
+            (float, float),
+            (int, float),
+            (bool, np.bool_),
+            (np.bool_, np.bool_),
+            (basestring, object),
+            (object, object)
+        ]
+
+        missingValue = {
+            float  : NaN,
+            object : None,
+            np.bool_ : False
+        }
+
+        newSeries = {}
+        for col, series in self.iteritems():
+            series = series.view(np.ndarray)
+            for type, dest in typeHierarchy:
+                if issubclass(series.dtype.type, type):
+                    new = series[fillVec].astype(dest)
+                    new[-mask] = missingValue[dest]
+                    newSeries[col] = new
+                    break
+
+        return DataFrame(newSeries, index=newIndex)
 
     @property
     def T(self):
