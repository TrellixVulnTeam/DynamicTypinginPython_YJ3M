commit 25c1c38e83439c30b31c16d9032b19fcbe907e25
Author: h-vetinari <33685575+h-vetinari@users.noreply.github.com>
Date:   Fri Jan 4 13:36:19 2019 +0100

    DOC: update str.cat example (#23723)

diff --git a/doc/source/text.rst b/doc/source/text.rst
index 2361be765..e4f60a761 100644
--- a/doc/source/text.rst
+++ b/doc/source/text.rst
@@ -303,23 +303,24 @@ The same alignment can be used when ``others`` is a ``DataFrame``:
 Concatenating a Series and many objects into a Series
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-All one-dimensional list-likes can be combined in a list-like container (including iterators, ``dict``-views, etc.):
+Several array-like items (specifically: ``Series``, ``Index``, and 1-dimensional variants of ``np.ndarray``)
+can be combined in a list-like container (including iterators, ``dict``-views, etc.).
 
 .. ipython:: python
 
     s
     u
-    s.str.cat([u.array,
-               u.index.astype(str).array], na_rep='-')
+    s.str.cat([u, u.to_numpy()], join='left')
 
-All elements must match in length to the calling ``Series`` (or ``Index``), except those having an index if ``join`` is not None:
+All elements without an index (e.g. ``np.ndarray``) within the passed list-like must match in length to the calling ``Series`` (or ``Index``),
+but ``Series`` and ``Index`` may have arbitrary length (as long as alignment is not disabled with ``join=None``):
 
 .. ipython:: python
 
     v
-    s.str.cat([u, v], join='outer', na_rep='-')
+    s.str.cat([v, u, u.to_numpy()], join='outer', na_rep='-')
 
-If using ``join='right'`` on a list of ``others`` that contains different indexes,
+If using ``join='right'`` on a list-like of ``others`` that contains different indexes,
 the union of these indexes will be used as the basis for the final concatenation:
 
 .. ipython:: python
