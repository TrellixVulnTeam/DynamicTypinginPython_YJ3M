commit 0bdd5558edcc86a73463e927c7c839ade4c48e31
Author: Chang She <changshe@gmail.com>
Date:   Wed Jul 4 00:00:15 2012 -0400

    BUG: read_csv na_values and index_col #1567

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 797e5de7a..4ed3c7f30 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -877,7 +877,10 @@ class TextParser(object):
         if np.isscalar(self.index_col):
             if try_parse_dates and self._should_parse_dates(self.index_col):
                 index = self._conv_date(index)
-            index, na_count = _convert_types(index, self.na_values)
+            na_values = self.na_values
+            if isinstance(na_values, dict):
+                na_values = _get_na_values(self.index_name, na_values)
+            index, na_count = _convert_types(index, na_values)
             index = Index(index, name=self.index_name)
             if self.verbose and na_count:
                 print 'Found %d NA values in the index' % na_count
@@ -887,7 +890,13 @@ class TextParser(object):
                 if (try_parse_dates and
                     self._should_parse_dates(self.index_col[i])):
                     arr = self._conv_date(arr)
-                arr, _ = _convert_types(arr, self.na_values)
+                col_na_values = self.na_values
+                if isinstance(self.na_values, dict):
+                    col_name = self.index_name[i]
+                    if col_name is not None:
+                        col_na_values = _get_na_values(col_name,
+                                                       self.na_values)
+                arr, _ = _convert_types(arr, col_na_values)
                 arrays.append(arr)
             index = MultiIndex.from_arrays(arrays, names=self.index_name)
         return index
@@ -1031,19 +1040,19 @@ class TextParser(object):
         lines = self._check_comments(lines)
         return self._check_thousands(lines)
 
-def _convert_to_ndarrays(dct, na_values, verbose=False):
-    def _get_na_values(col):
-        if isinstance(na_values, dict):
-            if col in na_values:
-                return set(list(na_values[col]))
-            else:
-                return _NA_VALUES
+def _get_na_values(col, na_values):
+    if isinstance(na_values, dict):
+        if col in na_values:
+            return set(list(na_values[col]))
         else:
-            return na_values
+            return _NA_VALUES
+    else:
+        return na_values
 
+def _convert_to_ndarrays(dct, na_values, verbose=False):
     result = {}
     for c, values in dct.iteritems():
-        col_na_values = _get_na_values(c)
+        col_na_values = _get_na_values(c, na_values)
         cvals, na_count = _convert_types(values, col_na_values)
         result[c] = cvals
         if verbose and na_count:
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index ba7d3c905..4e369df2e 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -11,7 +11,7 @@ import nose
 from numpy import nan
 import numpy as np
 
-from pandas import DataFrame, Series, Index, isnull
+from pandas import DataFrame, Series, Index, isnull, MultiIndex
 import pandas.io.parsers as parsers
 from pandas.io.parsers import (read_csv, read_table, read_fwf,
                                ExcelFile, TextParser)
@@ -1294,6 +1294,25 @@ bar,foo,foo"""
                               'C': [np.nan, 'foo', np.nan, 'foo']})
         assert_frame_equal(df, expected)
 
+        data = """\
+a,b,c,d
+0,NA,1,5
+"""
+        xp = DataFrame({'b': [np.nan], 'c': [1], 'd': [5]}, index=[0])
+        xp.index.name = 'a'
+        df = read_csv(StringIO(data), na_values={}, index_col=0)
+        assert_frame_equal(df, xp)
+
+        xp = DataFrame({'b': [np.nan], 'd': [5]},
+                       MultiIndex.from_tuples([(0, 1)]))
+        df = read_csv(StringIO(data), na_values={}, index_col=[0, 2])
+        assert_frame_equal(df, xp)
+
+        xp = DataFrame({'b': [np.nan], 'd': [5]},
+                       MultiIndex.from_tuples([(0, 1)]))
+        df = read_csv(StringIO(data), na_values={}, index_col=['a', 'c'])
+        assert_frame_equal(df, xp)
+
     @slow
     @network
     def test_url(self):
