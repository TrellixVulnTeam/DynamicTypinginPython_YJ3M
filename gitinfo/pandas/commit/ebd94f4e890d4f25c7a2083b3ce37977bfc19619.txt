commit ebd94f4e890d4f25c7a2083b3ce37977bfc19619
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed May 2 22:03:41 2012 -0400

    BUG: fix quarterly date to period conversions in Period, PeriodIndex

diff --git a/pandas/src/period.c b/pandas/src/period.c
index 7944e74fb..560fab451 100644
--- a/pandas/src/period.c
+++ b/pandas/src/period.c
@@ -982,12 +982,11 @@ int64_t get_period_ordinal(int year, int month, int day,
                       int hour, int minute, int second,
                       int freq)
 {
-	int64_t absdays, delta;
+	  int64_t absdays, delta;
     int64_t weeks, days;
-	int64_t adj_ordinal, ordinal, day_adj;
-	int freq_group, quarter;
+    int64_t adj_ordinal, ordinal, day_adj;
+    int freq_group, fmonth, mdiff, quarter;
     freq_group = get_freq_group(freq);
-		quarter=((month-1)/3)+1;
 
     if (freq == FR_SEC) {
         absdays = absdate_from_ymd(year, month, day);
@@ -1048,7 +1047,14 @@ int64_t get_period_ordinal(int year, int month, int day,
 
     if (freq_group == FR_QTR)
     {
-        return (year-1)*4 + quarter;
+      fmonth = freq - FR_QTR;
+      if (fmonth == 0) fmonth = 12;
+
+      mdiff = month - fmonth;
+      if (mdiff < 0) mdiff += 12;
+      if (month >= fmonth) mdiff += 12;
+
+      return 1 + (year - 1) * 4 + (mdiff - 1) / 3;
     }
 
     if (freq_group == FR_ANN)
diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index 3bdf86a56..78babb597 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -901,9 +901,11 @@ def is_superperiod(source, target):
     target = target.upper()
     source = source.upper()
     if _is_annual(source):
-        month = _get_rule_month(source)
-        same_month = _get_rule_month(target) == month
-        return same_month or target in ['D', 'B', 'M', 'H', 'T', 'S']
+        if _is_quarterly(target):
+            smonth = _get_rule_month(source)
+            tmonth = _get_rule_month(target)
+            return _quarter_months_conform(smonth, tmonth)
+        return target in ['D', 'B', 'M', 'H', 'T', 'S']
     elif _is_quarterly(source):
         return target in ['D', 'B', 'M', 'H', 'T', 'S']
     elif source == 'M':
@@ -916,6 +918,7 @@ def is_superperiod(source, target):
         return target not in ['D', 'B', 'H', 'T', 'S']
 
 def _get_rule_month(source, default='DEC'):
+    source = source.upper()
     if '-' not in source:
         return default
     else:
@@ -925,6 +928,10 @@ def _is_annual(rule):
     rule = rule.upper()
     return rule == 'A' or rule.startswith('A-')
 
+def _quarter_months_conform(source, target):
+    snum = _month_numbers[source]
+    tnum = _month_numbers[target]
+    return snum % 3 == tnum % 3
 
 def _is_quarterly(rule):
     return rule.upper().startswith('Q-')
@@ -939,6 +946,9 @@ DAYS = ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN']
 MONTHS = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL',
           'AUG', 'SEP', 'OCT', 'NOV', 'DEC']
 
+_month_numbers = dict((k, i) for i, k in enumerate(MONTHS))
+
+
 
 _weekday_rule_aliases = dict((k, v) for k, v in enumerate(DAYS))
 _month_aliases = dict((k + 1, v) for k, v in enumerate(MONTHS))
diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index 4b74cd9c8..3d49fd691 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -3,7 +3,8 @@
 from datetime import datetime
 import numpy as np
 
-from pandas.tseries.frequencies import get_freq_code as _gfc, to_offset
+from pandas.tseries.frequencies import (get_freq_code as _gfc, to_offset,
+                                        _month_numbers)
 from pandas.tseries.index import DatetimeIndex, Int64Index
 from pandas.tseries.tools import parse_time_string
 import pandas.tseries.frequencies as _freq_mod
@@ -49,6 +50,16 @@ def to_period(arg, freq=None):
 
     return Period(arg, freq=freq)
 
+def _to_quarterly(year, month, freq='Q-DEC'):
+    fmonth = _freq_mod._month_numbers[_freq_mod._get_rule_month(freq)] + 1
+    print fmonth
+    mdiff = (month - fmonth) % 12
+    if month >= fmonth:
+        mdiff += 12
+
+    ordin = 1 + (year - 1) * 4 + (mdiff - 1) / 3
+    return Period(ordin, freq=freq)
+
 class Period(object):
 
     def __init__(self, value=None, freq=None, ordinal=None,
@@ -99,11 +110,14 @@ class Period(object):
             if year is None:
                 raise ValueError("If value is None, year cannot be None")
 
-            if quarter is not None:
-                month = (quarter - 1) * 3 + 1
-
             base, mult = _gfc(freq)
 
+            if quarter is not None:
+                mnum = _month_numbers[_freq_mod._get_rule_month(freq)] + 1
+                month = (mnum + (quarter - 1) * 3) % 12 + 1
+                if month > mnum:
+                    year -= 1
+
             self.ordinal = lib.period_ordinal(year, month, day, hour, minute,
                                             second, base, mult)
 
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index 9d3faa7ac..ed3e71035 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -11,6 +11,7 @@ from datetime import datetime, timedelta
 
 from numpy.ma.testutils import assert_equal
 
+from pandas.tseries.frequencies import MONTHS, DAYS
 from pandas.tseries.period import Period, PeriodIndex, period_range
 from pandas.tseries.index import DatetimeIndex, date_range
 from pandas.tseries.tools import to_datetime
@@ -28,7 +29,16 @@ class TestPeriodProperties(TestCase):
     def __init__(self, *args, **kwds):
         TestCase.__init__(self, *args, **kwds)
 
-    def test_interval_constructor(self):
+    def test_period_cons_quarterly(self):
+        # bugs in scikits.timeseries
+        for month in MONTHS:
+            freq = 'Q-%s' % month
+            exp = Period('1989Q3', freq=freq)
+            stamp = exp.to_timestamp('D', how='end')
+            p = Period(stamp, freq=freq)
+            self.assertEquals(p, exp)
+
+    def test_period_constructor(self):
         i1 = Period('1/1/2005', freq='M')
         i2 = Period('Jan 2005')
 
@@ -1152,7 +1162,7 @@ class TestPeriodIndex(TestCase):
         # Todo: fix these accessors!
         self.assert_(s['05Q4'] == s[2])
 
-    def test_interval_dt64_round_trip(self):
+    def test_period_dt64_round_trip(self):
         dti = date_range('1/1/2000', '1/7/2002', freq='B')
         ii = dti.to_period()
         self.assert_(ii.to_timestamp().equals(dti))
@@ -1161,6 +1171,15 @@ class TestPeriodIndex(TestCase):
         ii = dti.to_period(freq='H')
         self.assert_(ii.to_timestamp().equals(dti))
 
+    def test_to_period_quarterly(self):
+        # make sure we can make the round trip
+        for month in MONTHS:
+            freq = 'Q-%s' % month
+            rng = period_range('1989Q3', '1991Q3', freq=freq)
+            stamps = rng.to_timestamp()
+            result = stamps.to_period(freq)
+            self.assert_(rng.equals(result))
+
     def test_iindex_multiples(self):
         ii = PeriodIndex(start='1/1/10', end='12/31/12', freq='2M')
         self.assertEquals(ii[0], Period('1/1/10', '2M'))
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 880ec3795..8fcfb4f07 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -416,7 +416,8 @@ class TestResamplePeriodIndex(unittest.TestCase):
             quar_ts = ts.resample('Q-%s' % month, fill_method='ffill')
 
             stamps = ts.to_timestamp('D', how='end')
-            qdates = period_range('1990Q4', '1992Q4', freq='Q-%s' % month)
+            qdates = period_range(stamps.index[0], stamps.index[-1],
+                                  freq='Q-%s' % month)
 
             expected = stamps.reindex(qdates.to_timestamp('D', 'e'),
                                       method='ffill')
@@ -424,6 +425,16 @@ class TestResamplePeriodIndex(unittest.TestCase):
 
             assert_series_equal(quar_ts, expected)
 
+        # conforms, but different month
+        ts = _simple_pts('1990', '1992', freq='A-JUN')
+
+        for how in ['start', 'end']:
+            result = ts.resample('Q-MAR', convention=how, fill_method='ffill')
+            expected = ts.asfreq('Q-MAR', how=how).to_timestamp('D')
+            expected = expected.resample('Q-MAR', fill_method='ffill')
+            assert_series_equal(result, expected.to_period('Q-MAR'))
+
+
 class TestTimeGrouper(unittest.TestCase):
 
     def setUp(self):
