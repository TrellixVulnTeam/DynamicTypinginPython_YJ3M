commit f813425a1b6153df0d06863fcf84678186fdfa4a
Author: sinhrks <sinhrks@gmail.com>
Date:   Sat Apr 9 14:00:57 2016 -0400

    BUG: SparseSeries.to_frame results in dense
    
    closes #9850
    
    Author: sinhrks <sinhrks@gmail.com>
    
    Closes #12836 from sinhrks/sparse_toframe and squashes the following commits:
    
    74eb9ac [sinhrks] BUG: SparseSeries.to_frame results in dense

diff --git a/doc/source/whatsnew/v0.18.1.txt b/doc/source/whatsnew/v0.18.1.txt
index 1a0d656ee..7d79367ce 100644
--- a/doc/source/whatsnew/v0.18.1.txt
+++ b/doc/source/whatsnew/v0.18.1.txt
@@ -89,6 +89,7 @@ These changes conform sparse handling to return the correct types and work to ma
 - Bug in ``SparseSeries.__repr__`` raises ``TypeError`` when it is longer than ``max_rows`` (:issue:`10560`)
 - Bug in ``SparseSeries.shape`` ignores ``fill_value`` (:issue:`10452`)
 - Bug in ``SparseSeries.reindex`` incorrectly handle ``fill_value`` (:issue:`12797`)
+- Bug in ``SparseArray.to_frame()`` results in ``DataFrame``, rather than ``SparseDataFrame`` (:issue:`9850`)
 - Bug in ``SparseArray.to_dense()`` does not preserve ``dtype`` (:issue:`10648`)
 - Bug in ``SparseArray.to_dense()`` incorrectly handle ``fill_value`` (:issue:`12797`)
 
diff --git a/pandas/sparse/series.py b/pandas/sparse/series.py
index fdacf1cff..c6e4f9297 100644
--- a/pandas/sparse/series.py
+++ b/pandas/sparse/series.py
@@ -262,6 +262,11 @@ class SparseSeries(Series):
     def _constructor(self):
         return SparseSeries
 
+    @property
+    def _constructor_expanddim(self):
+        from pandas.sparse.api import SparseDataFrame
+        return SparseDataFrame
+
     @property
     def kind(self):
         if isinstance(self.sp_index, BlockIndex):
diff --git a/pandas/sparse/tests/test_series.py b/pandas/sparse/tests/test_series.py
index 3d297ba55..fe05108cb 100644
--- a/pandas/sparse/tests/test_series.py
+++ b/pandas/sparse/tests/test_series.py
@@ -333,6 +333,23 @@ class TestSparseSeries(tm.TestCase, SharedWithSparse):
         self.assertEqual(self.bseries.kind, 'block')
         self.assertEqual(self.iseries.kind, 'integer')
 
+    def test_to_frame(self):
+        # GH 9850
+        s = pd.SparseSeries([1, 2, 0, nan, 4, nan, 0], name='x')
+        exp = pd.SparseDataFrame({'x': [1, 2, 0, nan, 4, nan, 0]})
+        tm.assert_sp_frame_equal(s.to_frame(), exp)
+
+        exp = pd.SparseDataFrame({'y': [1, 2, 0, nan, 4, nan, 0]})
+        tm.assert_sp_frame_equal(s.to_frame(name='y'), exp)
+
+        s = pd.SparseSeries([1, 2, 0, nan, 4, nan, 0], name='x', fill_value=0)
+        exp = pd.SparseDataFrame({'x': [1, 2, 0, nan, 4, nan, 0]},
+                                 default_fill_value=0)
+
+        tm.assert_sp_frame_equal(s.to_frame(), exp)
+        exp = pd.DataFrame({'y': [1, 2, 0, nan, 4, nan, 0]})
+        tm.assert_frame_equal(s.to_frame(name='y').to_dense(), exp)
+
     def test_pickle(self):
         def _test_roundtrip(series):
             unpickled = self.round_trip_pickle(series)
