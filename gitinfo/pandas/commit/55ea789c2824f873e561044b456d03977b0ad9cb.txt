commit 55ea789c2824f873e561044b456d03977b0ad9cb
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon May 14 11:39:40 2012 -0400

    ENH: efficiently box datetime64 -> Timestamp inside Series.__getitem__. close #1058

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 62eccefd0..1ce3ac730 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2593,17 +2593,15 @@ class DataFrame(NDFrame):
             # Float type values
             if len(self.columns) == 0:
                 return self
-            if np.isscalar(value):
-                new_data = self._data.fillna(value, inplace=inplace)
-            elif isinstance(value, dict):
+            if isinstance(value, dict):
                 result = self if inplace else self.copy()
                 for k, v in value.iteritems():
                     if k not in result:
                         continue
                     result[k].fillna(v, inplace=True)
                 return result
-            else:  # pragma: no cover
-                raise TypeError('Invalid fill value type: %s' % type(value))
+            else:
+                new_data = self._data.fillna(value, inplace=inplace)
 
         if inplace:
             self._data = new_data
diff --git a/pandas/src/engines.pyx b/pandas/src/engines.pyx
index df92cce1c..809de9e10 100644
--- a/pandas/src/engines.pyx
+++ b/pandas/src/engines.pyx
@@ -79,6 +79,8 @@ cdef class IndexEngine:
         if PySlice_Check(loc) or cnp.PyArray_Check(loc):
             return arr[loc]
         else:
+            if arr.descr.type_num == NPY_DATETIME:
+                return Timestamp(util.get_value_at(arr, loc))
             return util.get_value_at(arr, loc)
 
     cpdef set_value(self, ndarray arr, object key, object value):
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 262838666..c6f5c39cd 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -132,6 +132,12 @@ class TestTimeSeries(unittest.TestCase):
         expected = s[indexer[0]]
         assert_series_equal(result, expected)
 
+    def test_series_box_timestamp(self):
+        rng = date_range('20090415', '20090519', freq='B')
+        s = Series(rng)
+
+        self.assert_(isinstance(s[5], Timestamp))
+
     def test_series_ctor_plus_datetimeindex(self):
         rng = date_range('20090415', '20090519', freq='B')
         data = dict((k, 1) for k in rng)
