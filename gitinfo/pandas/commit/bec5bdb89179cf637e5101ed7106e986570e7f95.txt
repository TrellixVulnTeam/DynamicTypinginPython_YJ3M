commit bec5bdb89179cf637e5101ed7106e986570e7f95
Author: Jeff Reback <jeff@reback.net>
Date:   Fri Nov 18 06:07:34 2016 -0500

    BUG: fix pickling of Custom offsets in 3.6
    
    xref #14679
    
    Author: Jeff Reback <jeff@reback.net>
    
    Closes #14685 from jreback/offsets and squashes the following commits:
    
    8ad212c [Jeff Reback] BUG: fix pickling of Custom offsets in 3.6

diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index 2e3852a7e..efcde100d 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -553,6 +553,32 @@ class BusinessMixin(object):
             out += ': ' + ', '.join(attrs)
         return out
 
+    def __getstate__(self):
+        """Return a pickleable state"""
+        state = self.__dict__.copy()
+
+        # we don't want to actually pickle the calendar object
+        # as its a np.busyday; we recreate on deserilization
+        if 'calendar' in state:
+            del state['calendar']
+        try:
+            state['kwds'].pop('calendar')
+        except KeyError:
+            pass
+
+        return state
+
+    def __setstate__(self, state):
+        """Reconstruct an instance from a pickled state"""
+        self.__dict__ = state
+        if 'weekmask' in state and 'holidays' in state:
+            calendar, holidays = self.get_calendar(weekmask=self.weekmask,
+                                                   holidays=self.holidays,
+                                                   calendar=None)
+            self.kwds['calendar'] = self.calendar = calendar
+            self.kwds['holidays'] = self.holidays = holidays
+            self.kwds['weekmask'] = state['weekmask']
+
 
 class BusinessDay(BusinessMixin, SingleConstructorOffset):
     """
@@ -992,30 +1018,6 @@ class CustomBusinessDay(BusinessDay):
         busdaycalendar = np.busdaycalendar(**kwargs)
         return busdaycalendar, holidays
 
-    def __getstate__(self):
-        """Return a pickleable state"""
-        state = self.__dict__.copy()
-        del state['calendar']
-
-        # we don't want to actually pickle the calendar object
-        # as its a np.busyday; we recreate on deserilization
-        try:
-            state['kwds'].pop('calendar')
-        except:
-            pass
-
-        return state
-
-    def __setstate__(self, state):
-        """Reconstruct an instance from a pickled state"""
-        self.__dict__ = state
-        calendar, holidays = self.get_calendar(weekmask=self.weekmask,
-                                               holidays=self.holidays,
-                                               calendar=None)
-        self.kwds['calendar'] = self.calendar = calendar
-        self.kwds['holidays'] = self.holidays = holidays
-        self.kwds['weekmask'] = state['weekmask']
-
     @apply_wraps
     def apply(self, other):
         if self.n <= 0:
