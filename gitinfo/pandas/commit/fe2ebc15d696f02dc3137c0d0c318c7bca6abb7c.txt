commit fe2ebc15d696f02dc3137c0d0c318c7bca6abb7c
Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
Date:   Mon Oct 24 18:17:20 2016 -0400

    BUG: fix empty intersection of RangeIndex (GH14364)
    
    closes #14364
    
    Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
    
    Closes #14481 from jorisvandenbossche/bug-rangeindex-empty and squashes the following commits:
    
    823e83d [Joris Van den Bossche] BUG: fix empty intersection of RangeIndex (GH14364)

diff --git a/doc/source/whatsnew/v0.19.1.txt b/doc/source/whatsnew/v0.19.1.txt
index 1940c841c..d5fa2af5b 100644
--- a/doc/source/whatsnew/v0.19.1.txt
+++ b/doc/source/whatsnew/v0.19.1.txt
@@ -43,7 +43,7 @@ Bug Fixes
 - Bug in string indexing against data with ``object`` ``Index`` may raise ``AttributeError`` (:issue:`14424`)
 - Corrrecly raise ``ValueError`` on empty input to ``pd.eval()`` and ``df.query()`` (:issue:`13139`)
 
-
+- Bug in ``RangeIndex.intersection`` when result is a empty set (:issue:`14364`).
 
 - ``pd.merge()`` will raise ``ValueError`` with non-boolean parameters in passed boolean type arguments (:issue:`14434`)
 
diff --git a/pandas/indexes/range.py b/pandas/indexes/range.py
index 76166e715..7a7902b50 100644
--- a/pandas/indexes/range.py
+++ b/pandas/indexes/range.py
@@ -315,6 +315,9 @@ class RangeIndex(Int64Index):
         if not isinstance(other, RangeIndex):
             return super(RangeIndex, self).intersection(other)
 
+        if not len(self) or not len(other):
+            return RangeIndex._simple_new(None)
+
         # check whether intervals intersect
         # deals with in- and decreasing ranges
         int_low = max(min(self._start, self._stop + 1),
@@ -322,7 +325,7 @@ class RangeIndex(Int64Index):
         int_high = min(max(self._stop, self._start + 1),
                        max(other._stop, other._start + 1))
         if int_high <= int_low:
-            return RangeIndex()
+            return RangeIndex._simple_new(None)
 
         # Method hint: linear Diophantine equation
         # solve intersection problem
@@ -332,7 +335,7 @@ class RangeIndex(Int64Index):
 
         # check whether element sets intersect
         if (self._start - other._start) % gcd:
-            return RangeIndex()
+            return RangeIndex._simple_new(None)
 
         # calculate parameters for the RangeIndex describing the
         # intersection disregarding the lower bounds
diff --git a/pandas/tests/indexes/test_range.py b/pandas/tests/indexes/test_range.py
index b0b886452..26d50aa55 100644
--- a/pandas/tests/indexes/test_range.py
+++ b/pandas/tests/indexes/test_range.py
@@ -587,6 +587,35 @@ class TestRangeIndex(Numeric, tm.TestCase):
                                                 other.values)))
         self.assert_index_equal(result, expected)
 
+        index = RangeIndex(5)
+
+        # intersect of non-overlapping indices
+        other = RangeIndex(5, 10, 1)
+        result = index.intersection(other)
+        expected = RangeIndex(0, 0, 1)
+        self.assert_index_equal(result, expected)
+
+        other = RangeIndex(-1, -5, -1)
+        result = index.intersection(other)
+        expected = RangeIndex(0, 0, 1)
+        self.assert_index_equal(result, expected)
+
+        # intersection of empty indices
+        other = RangeIndex(0, 0, 1)
+        result = index.intersection(other)
+        expected = RangeIndex(0, 0, 1)
+        self.assert_index_equal(result, expected)
+
+        result = other.intersection(index)
+        self.assert_index_equal(result, expected)
+
+        # intersection of non-overlapping values based on start value and gcd
+        index = RangeIndex(1, 10, 2)
+        other = RangeIndex(0, 10, 4)
+        result = index.intersection(other)
+        expected = RangeIndex(0, 0, 1)
+        self.assert_index_equal(result, expected)
+
     def test_intersect_str_dates(self):
         dt_dates = [datetime(2012, 2, 9), datetime(2012, 2, 22)]
 
