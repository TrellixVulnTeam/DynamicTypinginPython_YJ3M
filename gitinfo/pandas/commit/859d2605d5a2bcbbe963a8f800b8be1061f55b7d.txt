commit 859d2605d5a2bcbbe963a8f800b8be1061f55b7d
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Apr 11 21:44:09 2013 -0700

    BUG: segfault when set_index with MultiIndex. close #3308

diff --git a/RELEASE.rst b/RELEASE.rst
index 9016a9efd..b4d9a0e59 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -294,6 +294,7 @@ pandas 0.11.0
   - Panel() and Panel.from_dict() now respects ordering when give OrderedDict (GH3303_)
   - DataFrame where with a datetimelike incorrectly selecting (GH3311_)
   - Ensure index casts work even in Int64Index
+  - Fix set_index segfault when passing MultiIndex (GH3308_)
 
 .. _GH3294: https://github.com/pydata/pandas/issues/3294
 .. _GH622: https://github.com/pydata/pandas/issues/622
@@ -402,6 +403,7 @@ pandas 0.11.0
 .. _GH3258: https://github.com/pydata/pandas/issues/3258
 .. _GH3283: https://github.com/pydata/pandas/issues/3283
 .. _GH2919: https://github.com/pydata/pandas/issues/2919
+.. _GH3308: https://github.com/pydata/pandas/issues/3308
 .. _GH3311: https://github.com/pydata/pandas/issues/3311
 
 pandas 0.10.1
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 5b10a2321..c30b5dca3 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -109,7 +109,7 @@ class Index(np.ndarray):
             if issubclass(data.dtype.type, np.integer):
                 return Int64Index(data, copy=copy, dtype=dtype, name=name)
 
-            subarr = com._ensure_object(data)
+            subarr = com._asarray_tuplesafe(data, dtype=object)
         elif np.isscalar(data):
             raise ValueError('Index(...) must be called with a collection '
                              'of some kind, %s was passed' % repr(data))
@@ -1169,7 +1169,7 @@ class Index(np.ndarray):
             If None, defaults to the beginning
         end : label, default None
             If None, defaults to the end
-        step : int, default None 
+        step : int, default None
 
         Returns
         -------
@@ -2779,7 +2779,7 @@ def _handle_legacy_indexes(indexes):
 
 def _get_consensus_names(indexes):
 
-    # find the non-none names, need to tupleify to make 
+    # find the non-none names, need to tupleify to make
     # the set hashable, then reverse on return
     consensus_names = set([ tuple(i.names) for i in indexes if all(n is not None for n in i.names) ])
     if len(consensus_names) == 1:
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index b6a903459..882f4f555 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -113,7 +113,7 @@ class _NDFrameIndexer(object):
             het_axis = self.obj._het_axis
             het_idx = indexer[het_axis]
 
-            if isinstance(het_idx, (int, long)):
+            if com.is_integer(het_idx):
                 het_idx = [het_idx]
 
             plane_indexer = indexer[:het_axis] + indexer[het_axis + 1:]
@@ -820,7 +820,7 @@ class _ScalarAccessIndexer(_NDFrameIndexer):
 
     def __getitem__(self, key):
         if not isinstance(key, tuple):
-            
+
             # we could have a convertible item here (e.g. Timestamp)
             if not _is_list_like(key):
                 key = tuple([ key ])
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 240e0c4b1..dba0a464d 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -1822,6 +1822,17 @@ Thur,Lunch,Yes,51.51,17"""
         result = s.groupby(s.index).first()
         self.assertEquals(len(result), 3)
 
+    def test_multiindex_set_index(self):
+        # segfault in #3308
+        d = {'t1': [2, 2.5, 3], 't2': [4, 5, 6]}
+        df = DataFrame(d)
+        tuples = [(0, 1), (0, 2), (1, 2)]
+        df['tuples'] = tuples
+
+        index = MultiIndex.from_tuples(df['tuples'])
+        # it works!
+        df.set_index(index)
+
 if __name__ == '__main__':
 
     # unittest.main()
