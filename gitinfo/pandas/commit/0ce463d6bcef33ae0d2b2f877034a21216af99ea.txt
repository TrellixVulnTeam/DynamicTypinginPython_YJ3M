commit 0ce463d6bcef33ae0d2b2f877034a21216af99ea
Author: dan1261 <42591328+dan1261@users.noreply.github.com>
Date:   Sun Mar 1 03:24:43 2020 +0100

    DOC: Minor typo fixes for code style guide (#32379)

diff --git a/doc/source/development/code_style.rst b/doc/source/development/code_style.rst
index 17f8783f7..1b223cf5f 100644
--- a/doc/source/development/code_style.rst
+++ b/doc/source/development/code_style.rst
@@ -21,7 +21,7 @@ Patterns
 foo.__class__
 -------------
 
-*pandas* uses 'type(foo)' instead 'foo.__class__' as it is making the code more
+*pandas* uses 'type(foo)' instead 'foo.__class__' as it makes the code more
 readable.
 
 For example:
@@ -52,8 +52,8 @@ f-strings
 
 *pandas* uses f-strings formatting instead of '%' and '.format()' string formatters.
 
-The convention of using f-strings on a string that is concatenated over serveral lines,
-is to prefix only the lines containing the value needs to be interpeted.
+The convention of using f-strings on a string that is concatenated over several lines,
+is to prefix only the lines containing values which need to be interpreted.
 
 For example:
 
@@ -86,8 +86,8 @@ For example:
 White spaces
 ~~~~~~~~~~~~
 
-Putting the white space only at the end of the previous line, so
-there is no whitespace at the beggining of the concatenated string.
+Only put white space at the end of the previous line, so
+there is no whitespace at the beginning of the concatenated string.
 
 For example:
 
@@ -116,7 +116,7 @@ Representation function (aka 'repr()')
 
 *pandas* uses 'repr()' instead of '%r' and '!r'.
 
-The use of 'repr()' will only happend when the value is not an obvious string.
+The use of 'repr()' will only happen when the value is not an obvious string.
 
 For example:
 
@@ -138,7 +138,7 @@ For example:
 Imports (aim for absolute)
 ==========================
 
-In Python 3, absolute imports are recommended. In absolute import doing something
+In Python 3, absolute imports are recommended. Using absolute imports, doing something
 like ``import string`` will import the string module rather than ``string.py``
 in the same directory. As much as possible, you should try to write out
 absolute imports that show the whole import chain from top-level pandas.
