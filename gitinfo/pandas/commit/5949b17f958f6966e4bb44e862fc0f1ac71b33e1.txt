commit 5949b17f958f6966e4bb44e862fc0f1ac71b33e1
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Aug 22 22:38:20 2011 -0400

    TST: finished line coverage for ols.py

diff --git a/pandas/stats/interface.py b/pandas/stats/interface.py
index d7b81da7f..7fb1962de 100644
--- a/pandas/stats/interface.py
+++ b/pandas/stats/interface.py
@@ -92,19 +92,22 @@ def ols(**kwargs):
     if window_type != common.FULL_SAMPLE:
         kwargs['window_type'] = common._get_window_type_name(window_type)
 
+    y = kwargs.get('y')
     x = kwargs.get('x')
-    if isinstance(x, dict):
-        if isinstance(x.values()[0], DataFrame):
-            x = WidePanel(x)
-        else:
-            x = DataFrame(x)
+
+    panel = False
+    if isinstance(y, DataFrame) or (isinstance(y, Series) and
+                                    isinstance(y.index, MultiIndex)):
+        panel = True
+    if isinstance(x, (WidePanel, LongPanel)):
+        panel = True
 
     if window_type == common.FULL_SAMPLE:
         for rolling_field in ('window_type', 'window', 'min_periods'):
             if rolling_field in kwargs:
                 del kwargs[rolling_field]
 
-        if isinstance(x, (WidePanel, LongPanel)):
+        if panel:
             if pool == False:
                 klass = NonPooledPanelOLS
             else:
@@ -112,7 +115,7 @@ def ols(**kwargs):
         else:
             klass = OLS
     else:
-        if isinstance(x, (WidePanel, LongPanel)):
+        if panel:
             if pool == False:
                 klass = NonPooledPanelOLS
             else:
diff --git a/pandas/stats/ols.py b/pandas/stats/ols.py
index bfd326f3b..43638da47 100644
--- a/pandas/stats/ols.py
+++ b/pandas/stats/ols.py
@@ -1055,13 +1055,11 @@ class MovingOLS(OLS):
         results = {}
         for result in self.RESULT_FIELDS:
             value = getattr(self, result)
-            if isinstance(value, np.ndarray):
-                value = value[-1]
-            elif isinstance(value, Series):
+            if isinstance(value, Series):
                 value = value[self.beta.index[-1]]
             elif isinstance(value, DataFrame):
                 value = value.xs(self.beta.index[-1])
-            else:
+            else: # pragma: no cover
                 raise Exception('Problem retrieving %s' % result)
             results[result] = value
 
@@ -1145,9 +1143,9 @@ def _combine_rhs(rhs):
                 _safe_update(series, {name : value})
             elif isinstance(value, (dict, DataFrame)):
                 _safe_update(series, value)
-            else:
+            else: # pragma: no cover
                 raise Exception('Invalid RHS data type: %s' % type(value))
-    else:
+    else: # pragma: no cover
         raise Exception('Invalid RHS type: %s' % type(rhs))
 
     if not isinstance(series, DataFrame):
@@ -1206,11 +1204,8 @@ def _filter_data(lhs, rhs):
 # A little kludge so we can use this method for both
 # MovingOLS and MovingPanelOLS
 def _y_converter(y):
-    if isinstance(y, Series):
-        return np.asarray(y)
+    y = y.values.squeeze()
+    if y.ndim == 0: # pragma: no cover
+        return np.array([y])
     else:
-        y = y.values.squeeze()
-        if y.ndim == 0:
-            return np.array([y])
-        else:
-            return y
+        return y
diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index d256cd43d..56a23776b 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -234,6 +234,13 @@ class TestOLSMisc(unittest.TestCase):
         self.assert_(isinstance(model, PanelOLS))
         model.summary
 
+    def test_series_rhs(self):
+        y = tm.makeTimeSeries()
+        x = tm.makeTimeSeries()
+        model = ols(y=y, x=x)
+        expected = ols(y=y, x={'x' : x})
+        assert_series_equal(model.beta, expected.beta)
+
     def test_various_attributes(self):
         # just make sure everything "works". test correctness elsewhere
 
@@ -247,6 +254,17 @@ class TestOLSMisc(unittest.TestCase):
             value = getattr(model, attr)
             self.assert_(isinstance(value, Series))
 
+        # works
+        model._results
+
+    def test_catch_regressor_overlap(self):
+        df1 = tm.makeTimeDataFrame().ix[:, ['A', 'B']]
+        df2 = tm.makeTimeDataFrame().ix[:, ['B', 'C', 'D']]
+        y = tm.makeTimeSeries()
+
+        data = {'foo' : df1, 'bar' : df2}
+        self.assertRaises(Exception, ols, y=y, x=data)
+
 class TestPanelOLS(BaseTest):
 
     FIELDS = ['beta', 'df', 'df_model', 'df_resid', 'f_stat',
