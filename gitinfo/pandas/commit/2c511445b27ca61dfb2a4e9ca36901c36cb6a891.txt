commit 2c511445b27ca61dfb2a4e9ca36901c36cb6a891
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jun 21 19:02:52 2012 -0400

    BUG: don't accidentally upcast values in DataFrame.itertuples, close #1505

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 139f0bfb9..e84d51bbe 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -615,12 +615,16 @@ class DataFrame(NDFrame):
             s.name = k
             yield k, s
 
-    def itertuples(self):
+    def itertuples(self, index=True):
         """
         Iterate over rows of DataFrame as tuples, with index value
         as first element of the tuple
         """
-        return izip(self.index, *self.values.T)
+        arrays = []
+        if index:
+            arrays.append(self.index)
+        arrays.extend(self[k] for k in self.columns)
+        return izip(*arrays)
 
     iterkv = iteritems
     if py3compat.PY3:  # pragma: no cover
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 58b7a8c84..1906c3936 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2544,6 +2544,12 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
             expected = self.frame.ix[i,:].reset_index(drop=True)
             assert_series_equal(s, expected)
 
+        df = DataFrame({'floats': np.random.randn(5),
+                        'ints': range(5)}, columns=['floats', 'ints'])
+
+        for tup in df.itertuples(index=False):
+            self.assert_(isinstance(tup[1], np.integer))
+
     def test_len(self):
         self.assertEqual(len(self.frame), len(self.frame.index))
 
