commit 0a108f0760fca053fab611fd02822554ed909638
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Wed Oct 16 05:21:56 2019 -0700

    CLN: move small bits outside of try/excepts (#28962)

diff --git a/pandas/_libs/algos_take_helper.pxi.in b/pandas/_libs/algos_take_helper.pxi.in
index 3a3adc718..f10061a41 100644
--- a/pandas/_libs/algos_take_helper.pxi.in
+++ b/pandas/_libs/algos_take_helper.pxi.in
@@ -276,7 +276,6 @@ cdef _take_2d(ndarray[take_t, ndim=2] values, object idx):
         Py_ssize_t i, j, N, K
         ndarray[Py_ssize_t, ndim=2, cast=True] indexer = idx
         ndarray[take_t, ndim=2] result
-        object val
 
     N, K = (<object>values).shape
 
diff --git a/pandas/core/base.py b/pandas/core/base.py
index e4e14a950..c461a1509 100644
--- a/pandas/core/base.py
+++ b/pandas/core/base.py
@@ -267,7 +267,7 @@ class SelectionMixin:
 
     agg = aggregate
 
-    def _try_aggregate_string_function(self, arg, *args, **kwargs):
+    def _try_aggregate_string_function(self, arg: str, *args, **kwargs):
         """
         if arg is a string, then try to operate on it:
         - try to find a function (or attribute) on ourselves
@@ -292,12 +292,10 @@ class SelectionMixin:
 
         f = getattr(np, arg, None)
         if f is not None:
-            try:
+            if hasattr(self, "__array__"):
+                # in particular exclude Window
                 return f(self, *args, **kwargs)
 
-            except (AttributeError, TypeError):
-                pass
-
         raise AttributeError(
             "'{arg}' is not a valid function for "
             "'{cls}' object".format(arg=arg, cls=type(self).__name__)
diff --git a/pandas/core/groupby/generic.py b/pandas/core/groupby/generic.py
index 068d5e527..76a3893d3 100644
--- a/pandas/core/groupby/generic.py
+++ b/pandas/core/groupby/generic.py
@@ -952,6 +952,7 @@ class DataFrameGroupBy(GroupBy):
                 if alt is None:
                     # we cannot perform the operation
                     # in an alternate way, exclude the block
+                    assert how == "ohlc"
                     deleted_items.append(locs)
                     continue
 
@@ -1025,17 +1026,20 @@ class DataFrameGroupBy(GroupBy):
         if axis != obj._info_axis_number:
             try:
                 for name, data in self:
-                    result[name] = self._try_cast(func(data, *args, **kwargs), data)
+                    fres = func(data, *args, **kwargs)
+                    result[name] = self._try_cast(fres, data)
             except Exception:
                 return self._aggregate_item_by_item(func, *args, **kwargs)
         else:
             for name in self.indices:
+                data = self.get_group(name, obj=obj)
                 try:
-                    data = self.get_group(name, obj=obj)
-                    result[name] = self._try_cast(func(data, *args, **kwargs), data)
+                    fres = func(data, *args, **kwargs)
                 except Exception:
                     wrapper = lambda x: func(x, *args, **kwargs)
                     result[name] = data.apply(wrapper, axis=axis)
+                else:
+                    result[name] = self._try_cast(fres, data)
 
         return self._wrap_frame_output(result, obj)
 
@@ -1410,9 +1414,10 @@ class DataFrameGroupBy(GroupBy):
         for i, col in enumerate(obj):
             try:
                 output[col] = self[col].transform(wrapper)
-                inds.append(i)
             except Exception:
                 pass
+            else:
+                inds.append(i)
 
         if len(output) == 0:
             raise TypeError("Transform function invalid for data types")
diff --git a/pandas/core/groupby/groupby.py b/pandas/core/groupby/groupby.py
index cc297629a..8461b4381 100644
--- a/pandas/core/groupby/groupby.py
+++ b/pandas/core/groupby/groupby.py
@@ -598,14 +598,7 @@ b  2""",
     plot = property(GroupByPlot)
 
     def _make_wrapper(self, name):
-        if name not in self._apply_whitelist:
-            is_callable = callable(getattr(self._selected_obj, name, None))
-            kind = " callable " if is_callable else " "
-            msg = (
-                "Cannot access{0}attribute {1!r} of {2!r} objects, try "
-                "using the 'apply' method".format(kind, name, type(self).__name__)
-            )
-            raise AttributeError(msg)
+        assert name in self._apply_whitelist
 
         self._set_group_selection()
 
@@ -919,9 +912,10 @@ b  2""",
         for name, obj in self._iterate_slices():
             try:
                 result, counts = self.grouper.agg_series(obj, f)
-                output[name] = self._try_cast(result, obj, numeric_only=True)
             except TypeError:
                 continue
+            else:
+                output[name] = self._try_cast(result, obj, numeric_only=True)
 
         if len(output) == 0:
             return self._python_apply_general(f)
