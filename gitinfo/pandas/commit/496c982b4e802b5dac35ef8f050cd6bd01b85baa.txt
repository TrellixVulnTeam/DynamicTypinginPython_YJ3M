commit 496c982b4e802b5dac35ef8f050cd6bd01b85baa
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Fri Apr 10 09:10:00 2020 -0700

    REF: reshape.concat operate on arrays, not SingleBlockManagers (#33125)
    
    * REF: reshape.concat operate on arrays, not SingleBlockManagers
    
    * xfail more selectively
    
    * Revert PandasArray.astype patch

diff --git a/pandas/core/internals/managers.py b/pandas/core/internals/managers.py
index a4f2daac6..9f26cb8b8 100644
--- a/pandas/core/internals/managers.py
+++ b/pandas/core/internals/managers.py
@@ -1591,33 +1591,6 @@ class SingleBlockManager(BlockManager):
         """
         raise NotImplementedError("Use series._values[loc] instead")
 
-    def concat(
-        self, to_concat: List["SingleBlockManager"], new_axis: Index
-    ) -> "SingleBlockManager":
-        """
-        Concatenate a list of SingleBlockManagers into a single
-        SingleBlockManager.
-
-        Used for pd.concat of Series objects with axis=0.
-
-        Parameters
-        ----------
-        to_concat : list of SingleBlockManagers
-        new_axis : Index of the result
-
-        Returns
-        -------
-        SingleBlockManager
-        """
-
-        blocks = [obj.blocks[0] for obj in to_concat]
-        values = concat_compat([x.values for x in blocks])
-
-        new_block = make_block(values, placement=slice(0, len(values), 1))
-
-        mgr = SingleBlockManager(new_block, new_axis)
-        return mgr
-
 
 # --------------------------------------------------------------------
 # Constructor Helpers
diff --git a/pandas/core/reshape/concat.py b/pandas/core/reshape/concat.py
index bd90592e5..a868e663b 100644
--- a/pandas/core/reshape/concat.py
+++ b/pandas/core/reshape/concat.py
@@ -9,6 +9,7 @@ import numpy as np
 
 from pandas._typing import FrameOrSeriesUnion, Label
 
+from pandas.core.dtypes.concat import concat_compat
 from pandas.core.dtypes.generic import ABCDataFrame, ABCSeries
 
 from pandas import DataFrame, Index, MultiIndex, Series
@@ -457,12 +458,13 @@ class _Concatenator:
             # stack blocks
             if self.bm_axis == 0:
                 name = com.consensus_name_attr(self.objs)
-
-                mgr = self.objs[0]._mgr.concat(
-                    [x._mgr for x in self.objs], self.new_axes[0]
-                )
                 cons = self.objs[0]._constructor
-                return cons(mgr, name=name).__finalize__(self, method="concat")
+
+                arrs = [ser._values for ser in self.objs]
+
+                res = concat_compat(arrs, axis=0)
+                result = cons(res, index=self.new_axes[0], name=name, dtype=res.dtype)
+                return result.__finalize__(self, method="concat")
 
             # combine as columns in a frame
             else:
diff --git a/pandas/tests/extension/test_numpy.py b/pandas/tests/extension/test_numpy.py
index 61c592538..aa5a99282 100644
--- a/pandas/tests/extension/test_numpy.py
+++ b/pandas/tests/extension/test_numpy.py
@@ -170,8 +170,11 @@ class TestGetitem(BaseNumPyTests, base.BaseGetitemTests):
         # ValueError: PandasArray must be 1-dimensional.
         super().test_take_series(data)
 
-    @pytest.mark.xfail(reason="astype doesn't recognize data.dtype")
     def test_loc_iloc_frame_single_dtype(self, data):
+        npdtype = data.dtype.numpy_dtype
+        if npdtype == object or npdtype == np.float64:
+            # GH#33125
+            pytest.xfail(reason="GH#33125 astype doesn't recognize data.dtype")
         super().test_loc_iloc_frame_single_dtype(data)
 
 
@@ -179,6 +182,8 @@ class TestGroupby(BaseNumPyTests, base.BaseGroupbyTests):
     @skip_nested
     def test_groupby_extension_apply(self, data_for_grouping, groupby_apply_op):
         # ValueError: Names should be list-like for a MultiIndex
+        if data_for_grouping.dtype.numpy_dtype == np.float64:
+            pytest.xfail(reason="GH#33125 astype doesn't recognize data.dtype")
         super().test_groupby_extension_apply(data_for_grouping, groupby_apply_op)
 
 
@@ -276,7 +281,11 @@ class TestArithmetics(BaseNumPyTests, base.BaseArithmeticOpsTests):
 
 
 class TestPrinting(BaseNumPyTests, base.BasePrintingTests):
-    pass
+    @pytest.mark.xfail(
+        reason="GH#33125 PandasArray.astype does not recognize PandasDtype"
+    )
+    def test_series_repr(self, data):
+        super().test_series_repr(data)
 
 
 @skip_nested
@@ -321,6 +330,18 @@ class TestReshaping(BaseNumPyTests, base.BaseReshapingTests):
     def test_concat_mixed_dtypes(self, data):
         super().test_concat_mixed_dtypes(data)
 
+    @pytest.mark.xfail(
+        reason="GH#33125 PandasArray.astype does not recognize PandasDtype"
+    )
+    def test_concat(self, data, in_frame):
+        super().test_concat(data, in_frame)
+
+    @pytest.mark.xfail(
+        reason="GH#33125 PandasArray.astype does not recognize PandasDtype"
+    )
+    def test_concat_all_na_block(self, data_missing, in_frame):
+        super().test_concat_all_na_block(data_missing, in_frame)
+
     @skip_nested
     def test_merge(self, data, na_value):
         # Fails creating expected
