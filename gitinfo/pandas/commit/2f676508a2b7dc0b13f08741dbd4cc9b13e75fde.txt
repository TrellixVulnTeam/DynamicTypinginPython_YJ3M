commit 2f676508a2b7dc0b13f08741dbd4cc9b13e75fde
Author: y-p <yoval@gmx.com>
Date:   Sat Dec 1 01:37:39 2012 +0200

    CLN: rename "print_config.X" to "print.X"

diff --git a/doc/source/v0.10.0.txt b/doc/source/v0.10.0.txt
index f010ec19b..a93ff9232 100644
--- a/doc/source/v0.10.0.txt
+++ b/doc/source/v0.10.0.txt
@@ -122,13 +122,13 @@ API changes
     - ``reset_option`` - reset one or more options to their default value. Partial names are accepted.
     - ``describe_option`` - print a description of one or more options. When called  with no arguments. print all registered options.
 
-    Note: ``set_printoptions``/ ``reset_printoptions``  are now deprecated (but functioning), the print options now live under "print_config.XYZ". For example:
+    Note: ``set_printoptions``/ ``reset_printoptions``  are now deprecated (but functioning), the print options now live under "print.XYZ". For example:
 
 
     .. ipython:: python
 
        import pandas as pd
-       pd.get_option("print_config.max_rows")
+       pd.get_option("print.max_rows")
 
 
   - to_string() methods now always return unicode strings  (GH2224_).
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 2654f7488..b93cf05c7 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -1128,7 +1128,7 @@ def in_qtconsole():
 # 2) If you need to send something to the console, use console_encode().
 #
 #    console_encode() should (hopefully) choose the right encoding for you
-#    based on the encoding set in option "print_config.encoding"
+#    based on the encoding set in option "print.encoding"
 #
 # 3) if you need to write something out to file, use
 #    pprint_thing_encoded(encoding).
@@ -1187,10 +1187,10 @@ def pprint_thing(thing, _nest_lvl=0):
          hasattr(thing,'next'):
         return unicode(thing)
     elif (isinstance(thing, dict) and
-          _nest_lvl < get_option("print_config.pprint_nest_depth")):
+          _nest_lvl < get_option("print.pprint_nest_depth")):
         result = _pprint_dict(thing, _nest_lvl)
     elif _is_sequence(thing) and _nest_lvl < \
-		get_option("print_config.pprint_nest_depth"):
+		get_option("print.pprint_nest_depth"):
         result = _pprint_seq(thing, _nest_lvl)
     else:
         # when used internally in the package, everything
@@ -1222,8 +1222,8 @@ def console_encode(object):
     this is the sanctioned way to prepare something for
     sending *to the console*, it delegates to pprint_thing() to get
     a unicode representation of the object relies on the global encoding
-    set in print_config.encoding. Use this everywhere
+    set in print.encoding. Use this everywhere
     where you output to the console.
     """
     return pprint_thing_encoded(object,
-             get_option("print_config.encoding"))
+             get_option("print.encoding"))
diff --git a/pandas/core/config.py b/pandas/core/config.py
index aa7e61d48..ef0c540f9 100644
--- a/pandas/core/config.py
+++ b/pandas/core/config.py
@@ -201,7 +201,7 @@ Note: partial matches are supported for convenience, but unless you use the
 full option name (e.g. x.y.z.option_name), your code may break in future
 versions if new options with similar names are introduced.
 
-value - new value of function.
+value - new value of option.
 
 Returns
 -------
diff --git a/pandas/core/config_init.py b/pandas/core/config_init.py
index b0279a949..a6739a1c4 100644
--- a/pandas/core/config_init.py
+++ b/pandas/core/config_init.py
@@ -1,5 +1,3 @@
-from __future__ import with_statement # support python 2.5
-
 import pandas.core.config as cf
 from pandas.core.config import is_int,is_bool,is_text,is_float
 from pandas.core.format import detect_console_encoding
@@ -18,7 +16,7 @@ module is imported, register them here rather then in the module.
 
 
 ###########################################
-# options from the "print_config" namespace
+# options from the "print" namespace
 
 pc_precision_doc="""
 : int
@@ -79,7 +77,7 @@ pc_encoding_doc="""
     these are generally strings meant to be displayed on the console.
 """
 
-with cf.config_prefix('print_config'):
+with cf.config_prefix('print'):
     cf.register_option('precision', 7, pc_precision_doc, validator=is_int)
     cf.register_option('digits', 7, validator=is_int)
     cf.register_option('float_format', None)
diff --git a/pandas/core/format.py b/pandas/core/format.py
index 10bd50e8e..f62e68a0f 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -73,7 +73,7 @@ class SeriesFormatter(object):
         self.header = header
 
         if float_format is None:
-            float_format = get_option("print_config.float_format")
+            float_format = get_option("print.float_format")
         self.float_format = float_format
 
     def _get_footer(self):
@@ -148,7 +148,7 @@ def _encode_diff_func():
     if py3compat.PY3:  # pragma: no cover
         _encode_diff = lambda x: 0
     else:
-        encoding = get_option("print_config.encoding")
+        encoding = get_option("print.encoding")
         def _encode_diff(x):
             return len(x) - len(x.decode(encoding))
 
@@ -159,7 +159,7 @@ def _strlen_func():
     if py3compat.PY3:  # pragma: no cover
         _strlen = len
     else:
-        encoding = get_option("print_config.encoding")
+        encoding = get_option("print.encoding")
         def _strlen(x):
             try:
                 return len(x.decode(encoding))
@@ -191,7 +191,7 @@ class DataFrameFormatter(object):
         self.show_index_names = index_names
 
         if sparsify is None:
-            sparsify = get_option("print_config.multi_sparse")
+            sparsify = get_option("print.multi_sparse")
 
         self.sparsify = sparsify
 
@@ -203,7 +203,7 @@ class DataFrameFormatter(object):
         self.index = index
 
         if justify is None:
-            self.justify = get_option("print_config.colheader_justify")
+            self.justify = get_option("print.colheader_justify")
         else:
             self.justify = justify
 
@@ -930,13 +930,13 @@ def format_array(values, formatter, float_format=None, na_rep='NaN',
         fmt_klass = GenericArrayFormatter
 
     if space is None:
-        space = get_option("print_config.column_space")
+        space = get_option("print.column_space")
 
     if float_format is None:
-        float_format = get_option("print_config.float_format")
+        float_format = get_option("print.float_format")
 
     if digits is None:
-        digits = get_option("print_config.precision")
+        digits = get_option("print.precision")
 
     fmt_obj = fmt_klass(values, digits, na_rep=na_rep,
                         float_format=float_format,
@@ -964,9 +964,9 @@ class GenericArrayFormatter(object):
 
     def _format_strings(self):
         if self.float_format is None:
-            float_format = get_option("print_config.float_format")
+            float_format = get_option("print.float_format")
             if float_format is None:
-                fmt_str = '%% .%dg' % get_option("print_config.precision")
+                fmt_str = '%% .%dg' % get_option("print.precision")
                 float_format = lambda x: fmt_str % x
         else:
             float_format = self.float_format
@@ -1091,7 +1091,7 @@ def _make_fixed_width(strings, justify='right', minimum=None):
     if minimum is not None:
         max_len = max(minimum, max_len)
 
-    conf_max = get_option("print_config.max_colwidth")
+    conf_max = get_option("print.max_colwidth")
     if conf_max is not None and max_len > conf_max:
         max_len = conf_max
 
@@ -1205,35 +1205,35 @@ def set_printoptions(precision=None, column_space=None, max_rows=None,
     warnings.warn("set_printoptions is deprecated, use set_option instead",
                           FutureWarning)
     if precision is not None:
-        set_option("print_config.precision", precision)
+        set_option("print.precision", precision)
     if column_space is not None:
-        set_option("print_config.column_space", column_space)
+        set_option("print.column_space", column_space)
     if max_rows is not None:
-        set_option("print_config.max_rows", max_rows)
+        set_option("print.max_rows", max_rows)
     if max_colwidth is not None:
-        set_option("print_config.max_colwidth", max_colwidth)
+        set_option("print.max_colwidth", max_colwidth)
     if max_columns is not None:
-        set_option("print_config.max_columns", max_columns)
+        set_option("print.max_columns", max_columns)
     if colheader_justify is not None:
-        set_option("print_config.colheader_justify", colheader_justify)
+        set_option("print.colheader_justify", colheader_justify)
     if notebook_repr_html is not None:
-        set_option("print_config.notebook_repr_html", notebook_repr_html)
+        set_option("print.notebook_repr_html", notebook_repr_html)
     if date_dayfirst is not None:
-        set_option("print_config.date_dayfirst", date_dayfirst)
+        set_option("print.date_dayfirst", date_dayfirst)
     if date_yearfirst is not None:
-        set_option("print_config.date_yearfirst", date_yearfirst)
+        set_option("print.date_yearfirst", date_yearfirst)
     if pprint_nest_depth is not None:
-        set_option("print_config.pprint_nest_depth", pprint_nest_depth)
+        set_option("print.pprint_nest_depth", pprint_nest_depth)
     if multi_sparse is not None:
-        set_option("print_config.multi_sparse", multi_sparse)
+        set_option("print.multi_sparse", multi_sparse)
     if encoding is not None:
-        set_option("print_config.encoding", encoding)
+        set_option("print.encoding", encoding)
 
 def reset_printoptions():
     import warnings
     warnings.warn("reset_printoptions is deprecated, use reset_option instead",
                           FutureWarning)
-    reset_option("^print_config\.")
+    reset_option("^print\.")
 
 def detect_console_encoding():
     """
@@ -1365,8 +1365,8 @@ def set_eng_float_format(precision=None, accuracy=3, use_eng_prefix=False):
                       "being renamed to 'accuracy'", FutureWarning)
         accuracy = precision
 
-    set_option("print_config.float_format", EngFormatter(accuracy, use_eng_prefix))
-    set_option("print_config.column_space", max(12, accuracy + 9))
+    set_option("print.float_format", EngFormatter(accuracy, use_eng_prefix))
+    set_option("print.column_space", max(12, accuracy + 9))
 
 def _put_lines(buf, lines):
     if any(isinstance(x, unicode) for x in lines):
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index d9f280793..ba9431cdb 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -589,9 +589,9 @@ class DataFrame(NDFrame):
             terminal_width, terminal_height = 100, 100
         else:
             terminal_width, terminal_height = get_terminal_size()
-        max_rows = (terminal_height if get_option("print_config.max_rows") == 0
-                    else get_option("print_config.max_rows"))
-        max_columns = get_option("print_config.max_columns")
+        max_rows = (terminal_height if get_option("print.max_rows") == 0
+                    else get_option("print.max_rows"))
+        max_columns = get_option("print.max_columns")
 
         if max_columns > 0:
             if len(self.index) <= max_rows and \
@@ -669,7 +669,7 @@ class DataFrame(NDFrame):
         if com.in_qtconsole():
             raise ValueError('Disable HTML output in QtConsole')
 
-        if get_option("print_config.notebook_repr_html"):
+        if get_option("print.notebook_repr_html"):
             if self._need_info_repr_():
                 return None
             else:
diff --git a/pandas/core/index.py b/pandas/core/index.py
index ba7817046..9f0992908 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1583,7 +1583,7 @@ class MultiIndex(Index):
             result_levels.append(level)
 
         if sparsify is None:
-            sparsify = get_option("print_config.multi_sparse")
+            sparsify = get_option("print.multi_sparse")
 
         if sparsify:
             # little bit of a kludge job for #1217
diff --git a/pandas/core/series.py b/pandas/core/series.py
index ae21014c2..cd257c849 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -948,8 +948,8 @@ copy : boolean, default False
         Invoked by unicode(df) in py2 only. Yields a Unicode String in both py2/py3.
         """
         width, height = get_terminal_size()
-        max_rows = (height if get_option("print_config.max_rows") == 0
-                    else get_option("print_config.max_rows"))
+        max_rows = (height if get_option("print.max_rows") == 0
+                    else get_option("print.max_rows"))
         if len(self.index) > (max_rows or 1000):
             result = self._tidy_repr(min(30, max_rows - 4))
         elif len(self.index) > 0:
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 1379615e9..c4e483fd5 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -65,7 +65,7 @@ class TestDataFrameFormatting(unittest.TestCase):
 
     def test_repr_truncation(self):
         max_len = 20
-        set_option("print_config.max_colwidth", max_len)
+        set_option("print.max_colwidth", max_len)
         df = DataFrame({'A': np.random.randn(10),
                  'B': [tm.rands(np.random.randint(max_len - 1,
                      max_len + 1)) for i in range(10)]})
@@ -80,10 +80,10 @@ class TestDataFrameFormatting(unittest.TestCase):
             else:
                 self.assert_('...' not in line)
 
-        set_option("print_config.max_colwidth", 999999)
+        set_option("print.max_colwidth", 999999)
         self.assert_('...' not in repr(df))
 
-        set_option("print_config.max_colwidth", max_len + 2)
+        set_option("print.max_colwidth", max_len + 2)
         self.assert_('...' not in repr(df))
 
     def test_repr_should_return_str (self):
@@ -453,7 +453,7 @@ class TestDataFrameFormatting(unittest.TestCase):
         assert(df_s == expected)
 
         fmt.reset_printoptions()
-        self.assertEqual(get_option("print_config.precision"), 7)
+        self.assertEqual(get_option("print.precision"), 7)
 
         df = DataFrame({'x': [1e9, 0.2512]})
         df_s = df.to_string()
diff --git a/pandas/tseries/tools.py b/pandas/tseries/tools.py
index f6ce72292..7010c3c6b 100644
--- a/pandas/tseries/tools.py
+++ b/pandas/tseries/tools.py
@@ -222,9 +222,9 @@ def parse_time_string(arg, freq=None, dayfirst=None, yearfirst=None):
         return mresult
 
     if dayfirst is None:
-        dayfirst = get_option("print_config.date_dayfirst")
+        dayfirst = get_option("print.date_dayfirst")
     if yearfirst is None:
-        yearfirst = get_option("print_config.date_yearfirst")
+        yearfirst = get_option("print.date_yearfirst")
 
     try:
         parsed = parse(arg, dayfirst=dayfirst, yearfirst=yearfirst)
