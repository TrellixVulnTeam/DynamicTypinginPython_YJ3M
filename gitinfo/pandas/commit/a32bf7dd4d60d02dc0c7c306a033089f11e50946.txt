commit a32bf7dd4d60d02dc0c7c306a033089f11e50946
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Sep 2 18:41:36 2009 +0000

    moved operator factory methods out of class level
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@11 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 17c5cf22d..69b0cec4a 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -11,6 +11,15 @@ from pandas.core.series import Series, remove_na
 from pandas.lib.tseries import isnull, notnull
 import pandas.lib.tseries as tseries
 
+def arith_method(func, name):
+    def f(self, other):
+        return self._combineFunc(other, func)
+
+    f.__name__ = name
+    f.__doc__ = 'Wrapper for arithmetic method %s' % name
+
+    return f
+
 #-------------------------------------------------------------------------------
 # DataFrame class
 
@@ -277,7 +286,6 @@ class DataFrame(Picklable, Groupable):
         Delete column from DataFrame (only deletes the reference)
         """
         r = self._series.pop(key, None)
-        del r   # need to delete the reference
 
     def __iter__(self):
         """
@@ -297,15 +305,6 @@ class DataFrame(Picklable, Groupable):
         """
         return key in self._series
 
-    def arith_method(func, name):
-        def f(self, other):
-            return self._combineFunc(other, func)
-
-        f.__name__ = name
-        f.__doc__ = 'Wrapper for arithmetic method %s' % name
-
-        return f
-
     __add__ = arith_method(operator.add, '__add__')
     __sub__ = arith_method(operator.sub, '__sub__')
     __mul__ = arith_method(operator.mul, '__mul__')
@@ -318,8 +317,6 @@ class DataFrame(Picklable, Groupable):
     __rdiv__ = arith_method(lambda x, y: y / x, '__rdiv__')
     __rpow__ = arith_method(lambda x, y: y ** x, '__rpow__')
 
-    del arith_method
-
     def __neg__(self):
         mycopy = self.copy()
         myseries = mycopy._series
diff --git a/pandas/core/series.py b/pandas/core/series.py
index c25883069..9b9b96b03 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -13,6 +13,54 @@ from pandas.core.mixins import Picklable, Groupable
 from pandas.lib.tseries import isnull, notnull
 import pandas.lib.tseries as tseries
 
+#-------------------------------------------------------------------------------
+# Wrapper function for Series arithmetic methods
+
+def _seriesOpWrap(opname, comp=False):
+    """
+    Wrapper function for Series arithmetic operations, to avoid
+    code duplication.
+    """
+    MIRROR_OPS = {
+        '__add__' : '__radd__',
+        '__sub__' : '__rsub__',
+        '__div__' : '__rdiv__',
+        '__mul__' : '__rmul__'
+    }
+    def wrapper(self, other):
+        from pandas.core.frame import DataFrame
+
+        func = getattr(self.view(ndarray), opname)
+        cls = self.__class__
+        if isinstance(other, Series):
+            if self.index is other.index:
+                return cls(func(other), index=self.index)
+            if len(self.index) + len(other.index) > 0:
+                newIndex = self.index + other.index
+            else:
+                newIndex = NULL_INDEX
+            try:
+                arr = tseries.combineFunc(opname, newIndex, self, other,
+                                          self.index.indexMap,
+                                          other.index.indexMap)
+            except:
+                arr = Series.combineFunc(self, other,
+                                         getattr(type(self[0]), opname))
+            result = cls(arr, index=newIndex)
+            if comp:
+                result[isnull(result)] = 0
+                return result.astype(np.bool)
+            else:
+                return result
+        elif isinstance(other, DataFrame):
+            reverse_op = MIRROR_OPS.get(opname)
+            if reverse_op is None:
+                raise Exception('Cannot do %s op, sorry!')
+            return getattr(other, reverse_op)(self)
+        else:
+            return cls(func(other), index=self.index)
+    return wrapper
+
 #-------------------------------------------------------------------------------
 # Series class
 
@@ -318,51 +366,6 @@ class Series(np.ndarray, Picklable, Groupable):
 #-------------------------------------------------------------------------------
 #   Arithmetic operators
 
-    def _seriesOpWrap(opname, comp=False):
-        """
-        Wrapper function for Series arithmetic operations, to avoid
-        code duplication.
-        """
-        MIRROR_OPS = {
-            '__add__' : '__radd__',
-            '__sub__' : '__rsub__',
-            '__div__' : '__rdiv__',
-            '__mul__' : '__rmul__'
-        }
-        def wrapper(self, other):
-            from pandas.core.frame import DataFrame
-
-            func = getattr(self.view(ndarray), opname)
-            cls = self.__class__
-            if isinstance(other, Series):
-                if self.index is other.index:
-                    return cls(func(other), index=self.index)
-                if len(self.index) + len(other.index) > 0:
-                    newIndex = self.index + other.index
-                else:
-                    newIndex = NULL_INDEX
-                try:
-                    arr = tseries.combineFunc(opname, newIndex, self, other,
-                                              self.index.indexMap,
-                                              other.index.indexMap)
-                except:
-                    arr = Series.combineFunc(self, other,
-                                             getattr(type(self[0]), opname))
-                result = cls(arr, index=newIndex)
-                if comp:
-                    result[isnull(result)] = 0
-                    return result.astype(np.bool)
-                else:
-                    return result
-            elif isinstance(other, DataFrame):
-                reverse_op = MIRROR_OPS.get(opname)
-                if reverse_op is None:
-                    raise Exception('Cannot do %s op, sorry!')
-                return getattr(other, reverse_op)(self)
-            else:
-                return cls(func(other), index=self.index)
-        return wrapper
-
     __add__ = _seriesOpWrap('__add__')
     __sub__ = _seriesOpWrap('__sub__')
     __mul__ = _seriesOpWrap('__mul__')
@@ -376,8 +379,6 @@ class Series(np.ndarray, Picklable, Groupable):
     __idiv__ = __div__
     __ipow__ = __pow__
 
-    del _seriesOpWrap
-
 #-------------------------------------------------------------------------------
 # Overridden ndarray methods
 
