commit 53ff161ad35bcc5ff8e007d5cbbd037f20e9b45c
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Dec 11 23:36:34 2011 -0500

    REF: rename names -> columns + deprec warning in DataFrame.from_records, GH #422

diff --git a/RELEASE.rst b/RELEASE.rst
index 63c6592da..b94e556dd 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -27,6 +27,11 @@ pandas 0.6.1
 
 **Release date:** Not yet released
 
+**API Changes**
+
+  - Rename `names` argument in DataFrame.from_records to `columns`. Add
+    deprecation warning
+
 **New features / modules**
 
   - Can pass Series to DataFrame.append with ignore_index=True for appending a
@@ -44,6 +49,7 @@ pandas 0.6.1
   - max_columns / max_rows options in set_printoptions (PR #453)
   - Implement Series.rank and DataFrame.rank, fast versions of
     scipy.stats.rankdata (GH #428)
+  - Implement DataFrame.from_items alternate constructor (GH #444)
 
 **Improvements to existing features**
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 4fad90c93..d52ffcaa6 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -497,7 +497,8 @@ class DataFrame(NDFrame):
         return dict((k, v.to_dict()) for k, v in self.iteritems())
 
     @classmethod
-    def from_records(cls, data, index=None, exclude=None, names=None):
+    def from_records(cls, data, index=None, exclude=None, columns=None,
+                     names=None):
         """
         Convert structured or record ndarray to DataFrame
 
@@ -509,13 +510,21 @@ class DataFrame(NDFrame):
             input labels to use
         exclude: sequence, default None
             Columns or fields to exclude
-        names : sequence, default None
+        columns : sequence, default None
             Column names to use, replacing any found in passed data
 
         Returns
         -------
         df : DataFrame
         """
+        import warnings
+
+        if names is not None:  # pragma: no cover
+            columns = names
+            warnings.warn("'names' parameter to DataFrame.from_records is "
+                          "being renamed to 'columns', 'names' will be "
+                          "removed in 0.8.0", FutureWarning)
+
         if isinstance(data, (np.ndarray, DataFrame, dict)):
             columns, sdict = _rec_to_dict(data)
         else:
@@ -525,11 +534,10 @@ class DataFrame(NDFrame):
                 # list of lists
                 content = list(lib.to_object_array(data).T)
 
-            if names is None:
+            if columns is None:
                 columns = range(len(content))
             else:
-                assert(len(names) == len(content))
-                columns = names
+                assert(len(columns) == len(content))
 
             sdict = dict((c, lib.maybe_convert_objects(vals))
                          for c, vals in zip(columns, content))
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index d594c39de..b273b205e 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1302,7 +1302,6 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         recons = DataFrame.from_items(row_items,
                                       columns=self.mixed_frame.columns,
                                       orient='index')
-        foo
         assert_frame_equal(recons, self.mixed_frame)
         self.assert_(isinstance(recons['foo'][0], tuple))
 
@@ -1381,8 +1380,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         tuples = [tuple(x) for x in df.values]
         lists = [list(x) for x in tuples]
 
-        result = DataFrame.from_records(tuples, names=df.columns)
-        result2 = DataFrame.from_records(lists, names=df.columns)
+        result = DataFrame.from_records(tuples, columns=df.columns)
+        result2 = DataFrame.from_records(lists, columns=df.columns)
         assert_frame_equal(result, df)
         assert_frame_equal(result2, df)
 
