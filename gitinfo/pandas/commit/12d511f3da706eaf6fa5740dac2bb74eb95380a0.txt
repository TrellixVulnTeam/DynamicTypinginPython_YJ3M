commit 12d511f3da706eaf6fa5740dac2bb74eb95380a0
Author: Adam Klein <adamklein@gmail.com>
Date:   Thu Mar 15 18:47:21 2012 -0400

    TST: test coverage enhancements

diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index d8d2291da..f8ce27805 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -292,7 +292,7 @@ class NDFrame(PandasObject):
                 res = self._box_item_values(item, values)
                 cache[item] = res
                 return res
-            except Exception:
+            except Exception: # pragma: no cover
                 from pandas.core.frame import DataFrame
                 if isinstance(item, DataFrame):
                     raise ValueError('Cannot index using (boolean) dataframe')
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 56366ea32..15c8efd00 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -332,15 +332,11 @@ class Panel(NDFrame):
         if isinstance(loc, (slice, np.ndarray)):
             new_index = self.items[loc]
             result_index = _maybe_droplevels(new_index, key)
-            if self._is_mixed_type:
-                result = self.reindex(items=new_index)
-                result.index = result_index
-            else:
-                new_values = self.values[loc, :, :]
-                result = Panel(new_values,
-                               items=result_index,
-                               major_axis=self.major_axis,
-                               minor_axis=self.minor_axis)
+            new_values = self.values[loc, :, :]
+            result = Panel(new_values,
+                            items=result_index,
+                            major_axis=self.major_axis,
+                            minor_axis=self.minor_axis)
             return result
         else:
             return self._get_item_cache(key)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 497dbbed2..0ae56ab34 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3426,6 +3426,10 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
                                   method=None, fill_value=None)
         self.assert_(bf.index.equals(Index([])))
 
+        af, bf = self.frame.align(other.ix[:,0], join='inner', axis=1,
+                                  method=None, fill_value=0)
+        self.assert_(bf.index.equals(Index([])))
+
         # try to align dataframe to series along bad axis
         self.assertRaises(ValueError, self.frame.align, af.ix[0,:3],
                           join='inner', axis=2)
diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index 67e8a33e0..426d8d86a 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -40,7 +40,8 @@ class TestSeriesPlots(unittest.TestCase):
         _check_plot_works(self.ts[:10].plot, kind='bar')
         _check_plot_works(self.series[:5].plot, kind='bar')
         _check_plot_works(self.series[:5].plot, kind='line')
-
+        _check_plot_works(self.series[:5].plot, kind='barh')
+        _check_plot_works(self.series[:10].plot, kind='barh')
     @slow
     def test_hist(self):
         _check_plot_works(self.ts.hist)
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 5e2e7428a..5a0cfbe43 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -1203,6 +1203,9 @@ class TestMultiIndex(unittest.TestCase):
     def test_from_tuples(self):
         self.assertRaises(Exception, MultiIndex.from_tuples, [])
 
+        idx = MultiIndex.from_tuples( ((1,2),(3,4)), names=['a', 'b'] )
+        self.assertEquals(len(idx), 2)
+
     def test_argsort(self):
         result = self.index.argsort()
         expected = self.index.get_tuple_index().argsort()
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 54d4ff279..2c85182fb 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -962,6 +962,20 @@ class TestPanel(unittest.TestCase, PanelTests, CheckIndexing,
         self.assert_((f1.items == [1, 2]).all())
         self.assert_((f2.items == [1, 2]).all())
 
+        ind = MultiIndex.from_tuples([('a', 1), ('a', 2), ('b', 1)],
+                                     names=['first', 'second'])
+
+    def test_multiindex_blocks(self):
+        ind = MultiIndex.from_tuples([('a', 1), ('a', 2), ('b', 1)],
+                                     names=['first', 'second'])
+        wp = Panel(self.panel._data)
+        wp.items = ind
+        f1 = wp['a']
+        self.assert_((f1.items == [1, 2]).all())
+
+        f1 = wp[('b',1)]
+        self.assert_((f1.columns == ['A', 'B', 'C', 'D']).all())
+
     def test_repr_empty(self):
         empty = Panel()
         repr(empty)
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 349c91dac..a3997ef32 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -252,6 +252,13 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         s = Series(objs, index=[0, 1])
         self.assert_(isinstance(s, Series))
 
+    def test_constructor_sanitize(self):
+        s = Series(np.array([1., 1., 8.]), dtype='i8')
+        self.assertEquals(s.dtype, np.dtype('i8'))
+
+        s = Series(np.array([1., 1., np.nan]), copy=True, dtype='i8')
+        self.assertEquals(s.dtype, np.dtype('f8'))
+
     def test_constructor_pass_none(self):
         s = Series(None, index=range(5))
         self.assert_(s.dtype == np.float64)
