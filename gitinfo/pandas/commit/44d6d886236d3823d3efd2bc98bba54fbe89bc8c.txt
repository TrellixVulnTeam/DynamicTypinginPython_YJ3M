commit 44d6d886236d3823d3efd2bc98bba54fbe89bc8c
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue May 17 01:03:59 2011 -0400

    most efficient SparseWidePanel.to_long that I can think of

diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index f8a75da3d..147c926ec 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -141,9 +141,18 @@ class Panel(Picklable):
             yield item, self[item]
 
     @property
-    def dims(self):
+    def shape(self):
         return len(self.items), len(self.major_axis), len(self.minor_axis)
 
+    @property
+    def dims(self): # pragma: no cover
+        import warnings
+        warnings.warn("Please change panel.dims to panel.shape, will be removed"
+                      " in future release",
+                      FutureWarning)
+
+        return self.shape
+
 _WIDE_AXIS_NUMBERS = {
     'items' : 0,
     'major' : 1,
@@ -259,9 +268,9 @@ class WidePanel(Panel, Groupable):
         if not values.flags.contiguous:
             values = values.copy()
 
-        if self.dims != values.shape:
+        if self.shape != values.shape:
             raise PanelError('Values shape %s did not match axes / items %s' %
-                             (values.shape, self.dims))
+                             (values.shape, self.shape))
 
         self._values = values
 
@@ -301,7 +310,7 @@ class WidePanel(Panel, Groupable):
         return result
 
     def __setitem__(self, key, value):
-        _, N, K = self.dims
+        _, N, K = self.shape
 
         # XXX
         if isinstance(value, LongPanel):
@@ -633,7 +642,7 @@ class WidePanel(Panel, Groupable):
         -------
         y : LongPanel
         """
-        I, N, K = self.dims
+        I, N, K = self.shape
 
         if filter_observations:
             mask = np.isfinite(self.values).all(axis=0)
@@ -1286,7 +1295,7 @@ class LongPanel(Panel):
             raise PanelError('Panel has duplicate (major, minor) pairs, '
                              'cannot be reliably converted to wide format.')
 
-        I, N, K = self.dims
+        I, N, K = self.shape
 
         values = np.empty((I, N, K), dtype=self.values.dtype)
 
@@ -1776,7 +1785,7 @@ class LongPanelIndex(object):
         Create observation selection vector using major and minor
         labels, for converting to wide format.
         """
-        N, K = self.dims
+        N, K = self.shape
         selector = self.minor_labels + K * self.major_labels
 
         mask = np.zeros(N * K, dtype=bool)
@@ -1785,7 +1794,7 @@ class LongPanelIndex(object):
         return mask
 
     @property
-    def dims(self):
+    def shape(self):
         return len(self.major_axis), len(self.minor_axis)
 
 
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index b23c6512b..6d3e86008 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -769,6 +769,31 @@ def stack_sparse_frame(frame):
     lp = LongPanel(stacked_values.reshape((nobs, 1)), ['foo'], index)
     return lp.sort('major')
 
+def _stack_sparse_info(frame):
+    lengths = [s.sp_index.npoints for _, s in frame.iteritems()]
+    nobs = sum(lengths)
+
+    # this is pretty fast
+    minor_labels = np.repeat(np.arange(len(frame.columns)), lengths)
+
+    inds_to_concat = []
+    vals_to_concat = []
+    for col in frame.columns:
+        series = frame[col]
+
+        if not np.isnan(series.fill_value):
+            raise Exception('This routine assumes NaN fill value')
+
+        int_index = series.sp_index.to_int_index()
+        inds_to_concat.append(int_index.indices)
+        vals_to_concat.append(series.sp_values)
+
+    major_labels = np.concatenate(inds_to_concat)
+    sparse_values = np.concatenate(vals_to_concat)
+
+    return sparse_values, major_labels, minor_labels
+
+
 def homogenize(series_dict):
     """
     Conform a set of SparseSeries (with NaN fill_value) to a common SparseIndex
@@ -943,7 +968,44 @@ class SparseWidePanel(WidePanel):
         -------
         lp : LongPanel
         """
-        pass
+        from pandas.core.panel import LongPanelIndex, LongPanel
+
+        I, N, K = self.shape
+        counts = np.zeros(N * K, dtype=int)
+
+        d_values = {}
+        d_indexer = {}
+
+        for item in self.items:
+            frame = self[item]
+
+            values, major, minor = _stack_sparse_info(frame)
+
+            # values are stacked column-major
+            indexer = minor * N + major
+            counts.put(indexer, counts.take(indexer) + 1) # cuteness
+
+            d_values[item] = values
+            d_indexer[item] = indexer
+
+        mask = counts == I
+        values = np.column_stack([d_values[item][mask.take(d_indexer[item])]
+                                  for item in self.items])
+
+        if I == 1:
+            values = np.atleast_2d(values).T
+
+        inds, = mask.nonzero()
+
+        # still column major
+        major_labels = inds % N
+        minor_labels = inds // N
+
+        index = LongPanelIndex(self.major_axis, self.minor_axis,
+                               major_labels, minor_labels)
+
+        lp = LongPanel(values, self.items, index)
+        return lp.sort('major')
 
     def reindex(self, major=None, items=None, minor=None):
         """
diff --git a/pandas/core/tests/test_sparse.py b/pandas/core/tests/test_sparse.py
index e2c1a2f5d..f6dd57234 100644
--- a/pandas/core/tests/test_sparse.py
+++ b/pandas/core/tests/test_sparse.py
@@ -889,7 +889,14 @@ class TestSparseWidePanel(TestCase):
         assert_panel_equal(dwp, dwp2)
 
     def test_to_long(self):
-        pass
+        slp = self.panel.to_long()
+        dlp = self.panel.to_dense().to_long()
+
+        self.assert_(np.array_equal(slp.values, dlp.values))
+        self.assert_(np.array_equal(slp.index.major_labels,
+                                    dlp.index.major_labels))
+        self.assert_(np.array_equal(slp.index.minor_labels,
+                                    dlp.index.minor_labels))
 
     def test_long_to_wide_sparse(self):
         pass
diff --git a/pandas/lib/bench_sparse.py b/pandas/lib/bench_sparse.py
index 6e762cf99..fe0a186bd 100644
--- a/pandas/lib/bench_sparse.py
+++ b/pandas/lib/bench_sparse.py
@@ -46,5 +46,8 @@ sdf = SparseDataFrame(data)
 
 lp = stack_sparse_frame(sdf)
 
+swp = SparseWidePanel({'A' : sdf})
 swp = SparseWidePanel({'A' : sdf,
-                       'B' : sdf})
+                       'B' : sdf,
+                       'C' : sdf,
+                       'D' : sdf})
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 8235690a9..482aee0bb 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -199,7 +199,7 @@ def makeWidePanel():
     return WidePanel.fromDict(data)
 
 def add_nans(panel):
-    I, J, N = panel.dims
+    I, J, N = panel.shape
     for i, item in enumerate(panel.items):
         dm = panel[item]
         for j, col in enumerate(dm.columns):
