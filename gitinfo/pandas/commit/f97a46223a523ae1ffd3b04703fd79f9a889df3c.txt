commit f97a46223a523ae1ffd3b04703fd79f9a889df3c
Author: Jethro Cao <jyscao@users.noreply.github.com>
Date:   Wed Dec 25 02:56:36 2019 +0700

    CLN: str.format -> f-strings for `io/sas` (#30409)
    
    * CLN: str.format -> f-strings for `io/sas`
    
    * Apply black style
    
    * Fix syntax error
    
    * Remove `str()` call

diff --git a/pandas/io/sas/sas7bdat.py b/pandas/io/sas/sas7bdat.py
index fe96b94e3..47af37562 100644
--- a/pandas/io/sas/sas7bdat.py
+++ b/pandas/io/sas/sas7bdat.py
@@ -170,7 +170,7 @@ class SAS7BDATReader(Iterator):
         if buf in const.encoding_names:
             self.file_encoding = const.encoding_names[buf]
         else:
-            self.file_encoding = "unknown (code={name!s})".format(name=buf)
+            self.file_encoding = f"unknown (code={buf})"
 
         # Get platform information
         buf = self._read_bytes(const.platform_offset, const.platform_length)
@@ -294,8 +294,8 @@ class SAS7BDATReader(Iterator):
             buf = self._path_or_buf.read(length)
             if len(buf) < length:
                 self.close()
-                msg = "Unable to read {:d} bytes from file position {:d}."
-                raise ValueError(msg.format(length, offset))
+                msg = f"Unable to read {length:d} bytes from file position {offset:d}."
+                raise ValueError(msg)
             return buf
         else:
             if offset + length > len(self._cached_page):
@@ -458,12 +458,9 @@ class SAS7BDATReader(Iterator):
         self.column_count = self._read_int(offset, int_len)
         if self.col_count_p1 + self.col_count_p2 != self.column_count:
             print(
-                "Warning: column count mismatch ({p1} + {p2} != "
-                "{column_count})\n".format(
-                    p1=self.col_count_p1,
-                    p2=self.col_count_p2,
-                    column_count=self.column_count,
-                )
+                f"Warning: column count mismatch ({self.col_count_p1} + "
+                f"{self.col_count_p2} != "
+                f"{self.column_count})\n"
             )
 
     # Unknown purpose
@@ -673,8 +670,12 @@ class SAS7BDATReader(Iterator):
             return True
         elif len(self._cached_page) != self._page_length:
             self.close()
-            msg = "failed to read complete page from file (read {:d} of {:d} bytes)"
-            raise ValueError(msg.format(len(self._cached_page), self._page_length))
+            msg = (
+                "failed to read complete page from file (read "
+                f"{len(self._cached_page):d} of "
+                f"{self._page_length:d} bytes)"
+            )
+            raise ValueError(msg)
 
         self._read_page_header()
         page_type = self._current_page_type
@@ -726,8 +727,6 @@ class SAS7BDATReader(Iterator):
                 js += 1
             else:
                 self.close()
-                raise ValueError(
-                    "unknown column type {type}".format(type=self._column_types[j])
-                )
+                raise ValueError(f"unknown column type {self._column_types[j]}")
 
         return rslt
diff --git a/pandas/io/sas/sas_xport.py b/pandas/io/sas/sas_xport.py
index ccaee5638..f30de1327 100644
--- a/pandas/io/sas/sas_xport.py
+++ b/pandas/io/sas/sas_xport.py
@@ -367,8 +367,8 @@ class XportReader(Iterator):
             fl = field["field_length"]
             if field["ntype"] == "numeric" and ((fl < 2) or (fl > 8)):
                 self.close()
-                msg = "Floating field width {0} is not between 2 and 8."
-                raise TypeError(msg.format(fl))
+                msg = f"Floating field width {fl} is not between 2 and 8."
+                raise TypeError(msg)
 
             for k, v in field.items():
                 try:
diff --git a/pandas/tests/io/sas/test_sas7bdat.py b/pandas/tests/io/sas/test_sas7bdat.py
index 49af18d29..d3480b246 100644
--- a/pandas/tests/io/sas/test_sas7bdat.py
+++ b/pandas/tests/io/sas/test_sas7bdat.py
@@ -21,7 +21,7 @@ class TestSAS7BDAT:
         self.data = []
         self.test_ix = [list(range(1, 16)), [16]]
         for j in 1, 2:
-            fname = os.path.join(self.dirpath, "test_sas7bdat_{j}.csv".format(j=j))
+            fname = os.path.join(self.dirpath, f"test_sas7bdat_{j}.csv")
             df = pd.read_csv(fname)
             epoch = pd.datetime(1960, 1, 1)
             t1 = pd.to_timedelta(df["Column4"], unit="d")
@@ -38,7 +38,7 @@ class TestSAS7BDAT:
         for j in 0, 1:
             df0 = self.data[j]
             for k in self.test_ix[j]:
-                fname = os.path.join(self.dirpath, "test{k}.sas7bdat".format(k=k))
+                fname = os.path.join(self.dirpath, f"test{k}.sas7bdat")
                 df = pd.read_sas(fname, encoding="utf-8")
                 tm.assert_frame_equal(df, df0)
 
@@ -46,7 +46,7 @@ class TestSAS7BDAT:
         for j in 0, 1:
             df0 = self.data[j]
             for k in self.test_ix[j]:
-                fname = os.path.join(self.dirpath, "test{k}.sas7bdat".format(k=k))
+                fname = os.path.join(self.dirpath, f"test{k}.sas7bdat")
                 with open(fname, "rb") as f:
                     byts = f.read()
                 buf = io.BytesIO(byts)
@@ -61,7 +61,7 @@ class TestSAS7BDAT:
         for j in 0, 1:
             df0 = self.data[j]
             for k in self.test_ix[j]:
-                fname = os.path.join(self.dirpath, "test{k}.sas7bdat".format(k=k))
+                fname = os.path.join(self.dirpath, f"test{k}.sas7bdat")
                 rdr = pd.read_sas(fname, iterator=True, encoding="utf-8")
                 df = rdr.read(2)
                 tm.assert_frame_equal(df, df0.iloc[0:2, :])
@@ -73,7 +73,7 @@ class TestSAS7BDAT:
         for j in 0, 1:
             df0 = self.data[j]
             for k in self.test_ix[j]:
-                fname = Path(os.path.join(self.dirpath, "test{k}.sas7bdat".format(k=k)))
+                fname = Path(os.path.join(self.dirpath, f"test{k}.sas7bdat"))
                 df = pd.read_sas(fname, encoding="utf-8")
                 tm.assert_frame_equal(df, df0)
 
@@ -84,9 +84,7 @@ class TestSAS7BDAT:
         for j in 0, 1:
             df0 = self.data[j]
             for k in self.test_ix[j]:
-                fname = LocalPath(
-                    os.path.join(self.dirpath, "test{k}.sas7bdat".format(k=k))
-                )
+                fname = LocalPath(os.path.join(self.dirpath, f"test{k}.sas7bdat"))
                 df = pd.read_sas(fname, encoding="utf-8")
                 tm.assert_frame_equal(df, df0)
 
@@ -95,7 +93,7 @@ class TestSAS7BDAT:
         for j in 0, 1:
             for k in self.test_ix[j]:
                 for chunksize in 3, 5, 10, 11:
-                    fname = os.path.join(self.dirpath, "test{k}.sas7bdat".format(k=k))
+                    fname = os.path.join(self.dirpath, f"test{k}.sas7bdat")
                     rdr = pd.read_sas(fname, chunksize=10, encoding="utf-8")
                     y = 0
                     for x in rdr:
@@ -106,7 +104,7 @@ class TestSAS7BDAT:
     def test_iterator_read_too_much(self):
         # github #14734
         k = self.test_ix[0][0]
-        fname = os.path.join(self.dirpath, "test{k}.sas7bdat".format(k=k))
+        fname = os.path.join(self.dirpath, f"test{k}.sas7bdat")
         rdr = pd.read_sas(fname, format="sas7bdat", iterator=True, encoding="utf-8")
         d1 = rdr.read(rdr.row_count + 20)
         rdr.close()
