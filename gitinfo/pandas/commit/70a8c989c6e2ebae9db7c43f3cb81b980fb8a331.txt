commit 70a8c989c6e2ebae9db7c43f3cb81b980fb8a331
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Sep 15 13:17:06 2012 -0400

    BUG: fix metadata copying to derived Index instances with view(...) inside NumPy

diff --git a/RELEASE.rst b/RELEASE.rst
index 7cc917241..09551770d 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -161,6 +161,8 @@ pandas 0.9.0
   - Fix unicode sheet name failure in to_excel (#1828)
   - Override DatetimeIndex.min/max to return Timestamp objects (#1895)
   - Fix column name formatting issue in length-truncated column (#1906)
+  - Fix broken handling of copying Index metadata to new instances created by
+    view(...) calls inside the NumPy infrastructure
 
 pandas 0.8.1
 ============
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 633168a06..2b58f9d74 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -53,6 +53,8 @@ class Index(np.ndarray):
     dtype : NumPy dtype (default: object)
     copy : bool
         Make a copy of input ndarray
+    name : object
+        Name to be stored in the index
 
     Note
     ----
@@ -120,10 +122,14 @@ class Index(np.ndarray):
         return subarr
 
     def __array_finalize__(self, obj):
+        if not isinstance(obj, type(self)):
+            # Only relevant if array being created from an Index instance
+            return
+
         self.name = getattr(obj, 'name', None)
 
     def _shallow_copy(self):
-        return self.view(type(self))
+        return self.view()
 
     def __repr__(self):
         try:
@@ -1141,19 +1147,6 @@ class Index(np.ndarray):
             raise ValueError('labels %s not contained in axis' % labels[mask])
         return self.delete(indexer)
 
-    def copy(self, order='C'):
-        """
-        Overridden ndarray.copy to copy over attributes
-
-        Returns
-        -------
-        cp : Index
-            Returns view on same base ndarray
-        """
-        cp = self.view(np.ndarray).view(type(self))
-        cp.__dict__.update(self.__dict__)
-        return cp
-
 
 class Int64Index(Index):
 
@@ -1246,6 +1239,11 @@ class MultiIndex(Index):
         The unique labels for each level
     labels : list or tuple of arrays
         Integers for each level designating which label at each location
+    sortorder : optional int
+        Level of sortedness (must be lexicographically sorted by that
+        level)
+    names : optional sequence of objects
+        Names for each of the index levels.
     """
     # shadow property
     names = None
@@ -1288,21 +1286,19 @@ class MultiIndex(Index):
 
         return subarr
 
-    def copy(self, order='C'):
+    def __array_finalize__(self, obj):
+        """
+        Update custom MultiIndex attributes when a new array is created by numpy,
+        e.g. when calling ndarray.view()
         """
-        Overridden ndarray.copy to copy over attributes
+        if not isinstance(obj, type(self)):
+            # Only relevant if this array is being created from an Index instance.
+            return
 
-        Returns
-        -------
-        cp : Index
-            Returns view on same base ndarray
-        """
-        cp = self.view(np.ndarray).view(type(self))
-        cp.levels = list(self.levels)
-        cp.labels = list(self.labels)
-        cp.names = list(self.names)
-        cp.sortorder = self.sortorder
-        return cp
+        self.levels = list(getattr(obj, 'levels', []))
+        self.labels = list(getattr(obj, 'labels', []))
+        self.names = list(getattr(obj, 'names', []))
+        self.sortorder = getattr(obj, 'sortorder', None)
 
     def _array_values(self):
         # hack for various methods
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 4ed831764..81eb18c7e 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -80,10 +80,21 @@ class TestIndex(unittest.TestCase):
         # arr = np.array(5.)
         # self.assertRaises(Exception, arr.view, Index)
 
+
     def test_constructor_corner(self):
         # corner case
         self.assertRaises(Exception, Index, 0)
 
+    def test_copy(self):
+        i = Index([], name='Foo')
+        i_copy = i.copy()
+        self.assert_(i_copy.name == 'Foo')
+
+    def test_view(self):
+        i = Index([], name='Foo')
+        i_view = i.view()
+        self.assert_(i_view.name == 'Foo')
+
     def test_astype(self):
         casted = self.intIndex.astype('i8')
 
@@ -520,6 +531,16 @@ class TestInt64Index(unittest.TestCase):
         arr = np.array([1, '2', 3, '4'], dtype=object)
         self.assertRaises(TypeError, Int64Index, arr)
 
+    def test_copy(self):
+        i = Int64Index([], name='Foo')
+        i_copy = i.copy()
+        self.assert_(i_copy.name == 'Foo')
+
+    def test_view(self):
+        i = Int64Index([], name='Foo')
+        i_view = i.view()
+        self.assert_(i_view.name == 'Foo')
+
     def test_coerce_list(self):
         # coerce things
         arr = Index([1, 2, 3, 4])
@@ -849,6 +870,50 @@ class TestMultiIndex(unittest.TestCase):
     def test_constructor_no_levels(self):
         self.assertRaises(Exception, MultiIndex, levels=[], labels=[])
 
+    def test_copy(self):
+        i_copy = self.index.copy()
+
+        # Equal...but not the same object
+        self.assert_(i_copy.levels == self.index.levels)
+        self.assert_(i_copy.levels is not self.index.levels)
+
+        self.assert_(i_copy.labels == self.index.labels)
+        self.assert_(i_copy.labels is not self.index.labels)
+
+        self.assert_(i_copy.names == self.index.names)
+        self.assert_(i_copy.names is not self.index.names)
+
+        self.assert_(i_copy.sortorder == self.index.sortorder)
+
+    def test_shallow_copy(self):
+        i_copy = self.index._shallow_copy()
+
+        # Equal...but not the same object
+        self.assert_(i_copy.levels == self.index.levels)
+        self.assert_(i_copy.levels is not self.index.levels)
+
+        self.assert_(i_copy.labels == self.index.labels)
+        self.assert_(i_copy.labels is not self.index.labels)
+
+        self.assert_(i_copy.names == self.index.names)
+        self.assert_(i_copy.names is not self.index.names)
+
+        self.assert_(i_copy.sortorder == self.index.sortorder)
+
+    def test_view(self):
+        i_view = self.index.view()
+
+        # Equal...but not the same object
+        self.assert_(i_view.levels == self.index.levels)
+        self.assert_(i_view.levels is not self.index.levels)
+
+        self.assert_(i_view.labels == self.index.labels)
+        self.assert_(i_view.labels is not self.index.labels)
+
+        self.assert_(i_view.names == self.index.names)
+        self.assert_(i_view.names is not self.index.names)
+        self.assert_(i_view.sortorder == self.index.sortorder)
+
     def test_duplicate_names(self):
         self.index.names = ['foo', 'foo']
         self.assertRaises(Exception, self.index._get_level_number, 'foo')
diff --git a/setup.py b/setup.py
index 9e10d71dc..40872f88e 100755
--- a/setup.py
+++ b/setup.py
@@ -420,8 +420,8 @@ if suffix == '.pyx' and 'setuptools' in sys.modules:
             ext.sources[0] = root + suffix
 
 
-# if _have_setuptools:
-#     setuptools_kwargs["test_suite"] = "nose.collector"
+if _have_setuptools:
+    setuptools_kwargs["test_suite"] = "nose.collector"
 
 write_version_py()
 setup(name=DISTNAME,
