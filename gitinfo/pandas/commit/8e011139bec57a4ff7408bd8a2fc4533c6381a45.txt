commit 8e011139bec57a4ff7408bd8a2fc4533c6381a45
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Dec 8 05:46:13 2009 +0000

    few more unit tests for Series
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@82 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/series.py b/pandas/core/series.py
index f7434734e..245b3acc0 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -42,10 +42,7 @@ def _seriesOpWrap(opname):
             if self.index.equals(other.index):
                 return cls(func(other.values()), index=self.index)
 
-            if len(self.index) + len(other.index) > 0:
-                newIndex = self.index + other.index
-            else:
-                newIndex = NULL_INDEX
+            newIndex = self.index + other.index
 
             try:
                 arr = tseries.combineFunc(opname, newIndex, self, other,
diff --git a/pandas/core/tests/test_series.py b/pandas/core/tests/test_series.py
index 093a61c10..8e4486476 100644
--- a/pandas/core/tests/test_series.py
+++ b/pandas/core/tests/test_series.py
@@ -182,6 +182,8 @@ class TestSeries(unittest.TestCase):
         str(self.series)
         str(self.objSeries)
 
+        str(Series(common.randn(1000), index=np.arange(1000)))
+        
     def test_iter(self):
         for i, val in enumerate(self.series):
             self.assertEqual(val, self.series[i])
@@ -225,6 +227,10 @@ class TestSeries(unittest.TestCase):
         self.assert_(not np.isnan(np.min(self.series)))
         self.assert_(not np.isnan(np.max(self.series)))
 
+        self.assert_(np.isnan(Series([1.], index=[1]).std()))
+        self.assert_(np.isnan(Series([1.], index=[1]).var()))
+        self.assert_(np.isnan(Series([1.], index=[1]).skew()))
+        
     def test_append(self):
         appendedSeries = self.series.append(self.ts)
         for idx, value in appendedSeries.iteritems():
@@ -497,11 +503,20 @@ class TestSeries(unittest.TestCase):
     def test_asOf(self):
         self.ts[5:10] = np.NaN
         self.ts[15:20] = np.NaN
+
         val1 = self.ts.asOf(self.ts.index[7])
         val2 = self.ts.asOf(self.ts.index[19])
+
         self.assertEqual(val1, self.ts[4])
         self.assertEqual(val2, self.ts[14])
 
+        # accepts strings
+        val1 = self.ts.asOf(str(self.ts.index[7]))
+        self.assertEqual(val1, self.ts[4])
+
+        # in there
+        self.assertEqual(self.ts.asOf(self.ts.index[3]), self.ts[3])
+        
     def test_merge(self):
         index, data = common.getMixedTypeDict()
 
@@ -545,8 +560,17 @@ class TestSeries(unittest.TestCase):
 # TimeSeries-specific
 
     def test_fill(self):
-        pass
+        ts = Series([0., 1., 2., 3., 4.], index=common.makeDateIndex(5))
 
+        self.assert_(np.array_equal(ts, ts.fill()))
+        
+        ts[2] = np.NaN
+
+        self.assert_(np.array_equal(ts.fill(), [0., 1., 1., 3., 4.]))
+        self.assert_(np.array_equal(ts.fill(method='backfill'), [0., 1., 3., 3., 4.]))
+
+        self.assert_(np.array_equal(ts.fill(value=5), [0., 1., 5., 3., 4.]))
+        
     def test_asfreq(self):
         pass
 
@@ -578,8 +602,20 @@ class TestSeries(unittest.TestCase):
         pass
 
     def test_firstValid(self):
-        pass
+        ts = self.ts.copy()
+        ts[:5] = np.NaN
 
+        index = ts._firstTimeWithValue()
+        self.assertEqual(index, ts.index[5])
+        
+        ts[-5:] = np.NaN
+        index = ts._lastTimeWithValue()        
+        self.assertEqual(index, ts.index[-6])
+
+        ser = Series([], index=[])
+        self.assert_(ser._lastTimeWithValue() is None)
+        self.assert_(ser._firstTimeWithValue() is None)
+        
     def test_lastValid(self):
         pass
 
