commit 47abe8cc8d7a66032cfc705e2696adb8cf30161f
Author: Chang She <chang@lambdafoundry.com>
Date:   Fri May 4 13:10:22 2012 -0400

    ENH: Panel.transpose #695

diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 2efad22ce..c7c0eb45f 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -934,6 +934,23 @@ class Panel(NDFrame):
 
         return self._constructor(new_values, *new_axes)
 
+    def transpose(self, items='items', major='major', minor='minor'):
+        """
+        Permute the dimensions of the Panel
+
+        Returns
+        -------
+        y : Panel (new object)
+        """
+        i, j, k = [self._get_axis_number(x) for x in [items, major, minor]]
+
+        if i == j or i == k or j == k:
+            raise ValueError('Must specify 3 unique axes')
+
+        new_axes = [self._get_axis(x) for x in [i, j, k]]
+        new_values = self.values.transpose((i, j, k)).copy()
+        return self._constructor(new_values, *new_axes)
+
     def to_frame(self, filter_observations=True):
         """
         Transform wide format into long (stacked) format as DataFrame
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index c3421b7dd..19649670d 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -895,6 +895,39 @@ class TestPanel(unittest.TestCase, PanelTests, CheckIndexing,
         # this should also work
         self.assertRaises(Exception, self.panel.swapaxes, 'items', 'items')
 
+    def test_transpose(self):
+        result = self.panel.transpose('minor', 'major', 'items')
+        expected = self.panel.swapaxes('items', 'minor')
+        assert_panel_equal(result, expected)
+
+        result = self.panel.transpose(2, 1, 0)
+        assert_panel_equal(result, expected)
+
+        result = self.panel.transpose('minor', 'items', 'major')
+        expected = self.panel.swapaxes('items', 'minor')
+        expected = expected.swapaxes('major', 'minor')
+        assert_panel_equal(result, expected)
+
+        result = self.panel.transpose(2, 0, 1)
+        assert_panel_equal(result, expected)
+
+    def test_transpose_sparse(self):
+        spanel = self.panel.to_sparse()
+        result = spanel.transpose('minor', 'major', 'items')
+        expected = spanel.swapaxes('items', 'minor')
+        assert_panel_equal(result, expected)
+
+        result = spanel.transpose(2, 1, 0)
+        assert_panel_equal(result, expected)
+
+        result = spanel.transpose('minor', 'items', 'major')
+        expected = spanel.swapaxes('items', 'minor')
+        expected = expected.swapaxes('major', 'minor')
+        assert_panel_equal(result, expected)
+
+        result = spanel.transpose(2, 0, 1)
+        assert_panel_equal(result, expected)
+
     def test_to_frame(self):
         # filtered
         filtered = self.panel.to_frame()
