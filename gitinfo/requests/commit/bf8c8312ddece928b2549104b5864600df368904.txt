commit bf8c8312ddece928b2549104b5864600df368904
Author: Kenneth Reitz <me@kennethreitz.org>
Date:   Fri Feb 19 02:12:15 2016 -0500

    cleanup quickstart

diff --git a/docs/user/quickstart.rst b/docs/user/quickstart.rst
index 10037fe6..d31f224e 100644
--- a/docs/user/quickstart.rst
+++ b/docs/user/quickstart.rst
@@ -37,15 +37,15 @@ get all the information we need from this object.
 Requests' simple API means that all forms of HTTP request are as obvious. For
 example, this is how you make an HTTP POST request::
 
-    >>> r = requests.post("http://httpbin.org/post", data = {"key":"value"})
+    >>> r = requests.post('http://httpbin.org/post', data = {'key':'value'})
 
 Nice, right? What about the other HTTP request types: PUT, DELETE, HEAD and
 OPTIONS? These are all just as simple::
 
-    >>> r = requests.put("http://httpbin.org/put", data = {"key":"value"})
-    >>> r = requests.delete("http://httpbin.org/delete")
-    >>> r = requests.head("http://httpbin.org/get")
-    >>> r = requests.options("http://httpbin.org/get")
+    >>> r = requests.put('http://httpbin.org/put', data = {'key':'value'})
+    >>> r = requests.delete('http://httpbin.org/delete')
+    >>> r = requests.head('http://httpbin.org/get')
+    >>> r = requests.options('http://httpbin.org/get')
 
 That's all well and good, but it's also only the start of what Requests can
 do.
@@ -63,7 +63,7 @@ Requests allows you to provide these arguments as a dictionary, using the
 following code::
 
     >>> payload = {'key1': 'value1', 'key2': 'value2'}
-    >>> r = requests.get("http://httpbin.org/get", params=payload)
+    >>> r = requests.get('http://httpbin.org/get', params=payload)
 
 You can see that the URL has been correctly encoded by printing the URL::
 
@@ -76,7 +76,8 @@ URL's query string.
 You can also pass a list of items as a value::
 
     >>> payload = {'key1': 'value1', 'key2': ['value2', 'value3']}
-    >>> r = requests.get("http://httpbin.org/get", params=payload)
+
+    >>> r = requests.get('http://httpbin.org/get', params=payload)
     >>> print(r.url)
     http://httpbin.org/get?key1=value1&key2=value2&key2=value3
 
@@ -87,6 +88,7 @@ We can read the content of the server's response. Consider the GitHub timeline
 again::
 
     >>> import requests
+
     >>> r = requests.get('https://api.github.com/events')
     >>> r.text
     u'[{"repository":{"open_issues":0,"url":"https://github.com/...
@@ -131,6 +133,7 @@ use the following code::
 
     >>> from PIL import Image
     >>> from StringIO import StringIO
+
     >>> i = Image.open(StringIO(r.content))
 
 
@@ -140,6 +143,7 @@ JSON Response Content
 There's also a builtin JSON decoder, in case you're dealing with JSON data::
 
     >>> import requests
+
     >>> r = requests.get('https://api.github.com/events')
     >>> r.json()
     [{u'repository': {u'open_issues': 0, u'url': 'https://github.com/...
@@ -163,8 +167,10 @@ server, you can access ``r.raw``. If you want to do this, make sure you set
 ``stream=True`` in your initial request. Once you do, you can do this::
 
     >>> r = requests.get('https://api.github.com/events', stream=True)
+
     >>> r.raw
     <requests.packages.urllib3.response.HTTPResponse object at 0x101194810>
+
     >>> r.raw.read(10)
     '\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x03'
 
@@ -189,7 +195,6 @@ If you'd like to add HTTP headers to a request, simply pass in a ``dict`` to the
 
 For example, we didn't specify our user-agent in the previous example::
 
-    >>> import json
     >>> url = 'https://api.github.com/some/endpoint'
     >>> headers = {'user-agent': 'my-app/0.0.1'}
 
@@ -215,6 +220,7 @@ To do this, simply pass a dictionary to the ``data`` argument. Your
 dictionary of data will automatically be form-encoded when the request is made::
 
     >>> payload = {'key1': 'value1', 'key2': 'value2'}
+
     >>> r = requests.post("http://httpbin.org/post", data=payload)
     >>> print(r.text)
     {
@@ -232,6 +238,7 @@ you pass in a ``string`` instead of a ``dict``, that data will be posted directl
 For example, the GitHub API v3 accepts JSON-Encoded POST/PATCH data::
 
     >>> import json
+
     >>> url = 'https://api.github.com/some/endpoint'
     >>> payload = {'some': 'data'}
 
@@ -426,10 +433,13 @@ response.
 For example, GitHub redirects all HTTP requests to HTTPS::
 
     >>> r = requests.get('http://github.com')
+
     >>> r.url
     'https://github.com/'
+
     >>> r.status_code
     200
+
     >>> r.history
     [<Response [301]>]
 
@@ -438,16 +448,20 @@ If you're using GET, OPTIONS, POST, PUT, PATCH or DELETE, you can disable
 redirection handling with the ``allow_redirects`` parameter::
 
     >>> r = requests.get('http://github.com', allow_redirects=False)
+
     >>> r.status_code
     301
+
     >>> r.history
     []
 
 If you're using HEAD, you can enable redirection as well::
 
     >>> r = requests.head('http://github.com', allow_redirects=True)
+
     >>> r.url
     'https://github.com/'
+
     >>> r.history
     [<Response [301]>]
 
