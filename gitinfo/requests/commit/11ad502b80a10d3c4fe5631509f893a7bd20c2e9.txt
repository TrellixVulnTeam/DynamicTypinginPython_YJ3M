commit 11ad502b80a10d3c4fe5631509f893a7bd20c2e9
Author: Braulio Valdivielso Mart√≠nez <brlvldvlsmrtnz@gmail.com>
Date:   Thu Nov 26 00:29:53 2015 +0100

    Added basic_response_server classmethod and tested it

diff --git a/test_requests.py b/test_requests.py
index 926abe2e..75253eb3 100755
--- a/test_requests.py
+++ b/test_requests.py
@@ -1756,5 +1756,12 @@ class TestTestServer(unittest.TestCase):
             assert text == answer
             sock.close()
 
+    def test_basic_response(self):
+        with Server.basic_response_server() as (host, port):
+            r = requests.get('http://{}:{}'.format(host, port))
+            assert r.status_code == 200
+            assert r.text == ''
+            assert r.headers['Content-Length'] == '0'
+
 if __name__ == '__main__':
     unittest.main()
diff --git a/testserver/server.py b/testserver/server.py
index 6fa6464e..f19cc3c7 100644
--- a/testserver/server.py
+++ b/testserver/server.py
@@ -13,6 +13,19 @@ class Server(threading.Thread):
         self.ready_event = threading.Event()
         self.stop_event = threading.Event()
 
+    @classmethod
+    def basic_response_server(cls, host='localhost', port=0):
+        def basic_response_handler(server_sock):
+            sock, _ = server_sock.accept()
+            sock.send(
+                b'HTTP/1.1 200 OK\r\n'
+                b'Content-Length: 0\r\n'
+                b'\r\n'
+            )
+
+        server = Server(basic_response_handler, host=host, port=port)
+        return server
+
     def run(self):
         try:
             sock = self._create_socket_and_bind()
