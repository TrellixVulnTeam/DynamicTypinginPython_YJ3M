commit 91766548d10cd5ebf46aba376f9e000263285875
Author: Ori Livneh <ori.livneh@gmail.com>
Date:   Thu Dec 22 17:36:09 2011 -0500

    Revert "Make safe_mode play nice with timeout (fixes #312)"
    
    This reverts commit 805c4db55413c96c5d6e0f95560119c000f660c9.

diff --git a/requests/models.py b/requests/models.py
index f9a9626b..4bef293d 100644
--- a/requests/models.py
+++ b/requests/models.py
@@ -438,10 +438,6 @@ class Request(object):
                     # Attach Cookie header to request.
                     self.headers['Cookie'] = cookie_header
 
-            # If the request fails but exceptions are suppressed,
-            # we'll build a blank response.
-            r = None
-
             try:
                 # Send the request.
                 r = conn.urlopen(
@@ -462,6 +458,8 @@ class Request(object):
             except MaxRetryError, e:
                 if not self.config.get('safe_mode', False):
                     raise ConnectionError(e)
+                else:
+                    r = None
 
             except (_SSLError, _HTTPError), e:
                 if not self.config.get('safe_mode', False):
@@ -599,7 +597,7 @@ class Response(object):
         def generate():
             chunk = []
 
-            while True:
+            while 1:
                 c = self.raw.read(1)
                 if not c:
                     break
diff --git a/test_requests.py b/test_requests.py
index e547aa64..ebcb596d 100755
--- a/test_requests.py
+++ b/test_requests.py
@@ -619,17 +619,6 @@ class RequestsTestSuite(unittest.TestCase):
         lines = '\n'.join(r.iter_lines())
         self.assertEqual(lines, quote)
 
-    def test_timeout(self):
-
-        # When not in safe mode, should raise Timeout exception
-        with self.assertRaises(requests.exceptions.Timeout):
-            r = requests.get(httpbin('stream', '1000'), timeout=0.0001)
-
-        # In safe mode, should return a blank response
-        r = requests.get(httpbin('stream', '1000'), timeout=0.0001,
-                config=dict(safe_mode=True))
-        self.assertIsNone(r.content)
-
 
 if __name__ == '__main__':
     unittest.main()
