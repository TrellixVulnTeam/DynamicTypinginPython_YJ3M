commit 00f066a467901bdbb107396c015c17275fb59cc6
Author: Kenneth Reitz <me@kennethreitz.com>
Date:   Tue Jun 21 18:03:06 2011 -0400

    PATCH support

diff --git a/requests/api.py b/requests/api.py
index f3445e21..8e328d2b 100644
--- a/requests/api.py
+++ b/requests/api.py
@@ -11,15 +11,16 @@ This module impliments the Requests API.
 
 """
 
-import requests
 import config
 from .models import Request, Response, AuthManager, AuthObject, auth_manager
 
 
-__all__ = ('request', 'get', 'head', 'post', 'put', 'delete')
+__all__ = ('request', 'get', 'head', 'post', 'patch', 'put', 'delete')
+
+def request(method, url,
+    params=None, data=None, headers=None, cookies=None, files=None, auth=None,
+    timeout=None, allow_redirects=False, proxies=None):
 
-def request(method, url, params=None, data=None, headers=None, cookies=None, files=None, auth=None,
-            timeout=None, allow_redirects=False, proxies=None):
     """Constructs and sends a :class:`Request <models.Request>`. Returns :class:`Response <models.Response>` object.
 
     :param method: method for the new :class:`Request` object.
@@ -53,7 +54,11 @@ def request(method, url, params=None, data=None, headers=None, cookies=None, fil
 
     return r.response
 
-def get(url, params=None, headers=None, cookies=None, auth=None, timeout=None, proxies=None):
+
+def get(url,
+    params=None, headers=None, cookies=None, auth=None, timeout=None,
+    proxies=None):
+
     """Sends a GET request. Returns :class:`Response` object.
 
     :param url: URL for the new :class:`Request` object.
@@ -65,11 +70,15 @@ def get(url, params=None, headers=None, cookies=None, auth=None, timeout=None, p
     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.
     """
 
-    return request('GET', url, params=params, headers=headers, cookies=cookies, auth=auth, timeout=timeout,
-                   proxies=proxies)
+    return request('GET', url,
+        params=params, headers=headers, cookies=cookies, auth=auth,
+        timeout=timeout, proxies=proxies)
 
 
-def head(url, params=None, headers=None, cookies=None, auth=None, timeout=None, proxies=None):
+def head(url,
+    params=None, headers=None, cookies=None, auth=None, timeout=None,
+    proxies=None):
+
     """Sends a HEAD request. Returns :class:`Response` object.
 
     :param url: URL for the new :class:`Request` object.
@@ -81,12 +90,15 @@ def head(url, params=None, headers=None, cookies=None, auth=None, timeout=None,
     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.
     """
 
-    return request('HEAD', url, params=params, headers=headers, cookies=cookies, auth=auth, timeout=timeout,
-                   proxies=proxies)
+    return request('HEAD', url,
+        params=params, headers=headers, cookies=cookies, auth=auth,
+        timeout=timeout, proxies=proxies)
+
 
+def post(url,
+    data='', headers=None, files=None, cookies=None, auth=None, timeout=None,
+    allow_redirects=False, params=None, proxies=None):
 
-def post(url, data='', headers=None, files=None, cookies=None, auth=None,
-         timeout=None, allow_redirects=False, params=None, proxies=None):
     """Sends a POST request. Returns :class:`Response` object.
 
     :param url: URL for the new :class:`Request` object.
@@ -101,9 +113,10 @@ def post(url, data='', headers=None, files=None, cookies=None, auth=None,
     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.
     """
 
-    return request('POST', url, params=params, data=data, headers=headers,
-                   files=files, cookies=cookies, auth=auth, timeout=timeout,
-                   allow_redirects=allow_redirects, proxies=proxies)
+    return request('POST', url,
+        params=params, data=data, headers=headers, files=files,
+        cookies=cookies, auth=auth, timeout=timeout,
+        allow_redirects=allow_redirects, proxies=proxies)
 
 
 def put(url, data='', headers=None, files=None, cookies=None, auth=None,
@@ -122,13 +135,38 @@ def put(url, data='', headers=None, files=None, cookies=None, auth=None,
     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.
     """
 
-    return request('PUT', url, params=params, data=data, headers=headers,
-                   files=files, cookies=cookies, auth=auth, timeout=timeout,
-                   allow_redirects=allow_redirects, proxies=proxies)
+    return request('PUT', url,
+        params=params, data=data, headers=headers, files=files,
+        cookies=cookies, auth=auth, timeout=timeout,
+        allow_redirects=allow_redirects, proxies=proxies)
+
+
+def patch(url, data='', headers=None, files=None, cookies=None, auth=None,
+        timeout=None, allow_redirects=False, params=None, proxies=None):
+    """Sends a PATCH request. Returns :class:`Response` object.
+
+    :param url: URL for the new :class:`Request` object.
+    :param data: (optional) Dictionary or bytes to send in the body of the :class:`Request`.
+    :param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.
+    :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload.
+    :param cookies: (optional) CookieJar object to send with the :class:`Request`.
+    :param auth: (optional) AuthObject to enable Basic HTTP Auth.
+    :param timeout: (optional) Float describing the timeout of the request.
+    :param allow_redirects: (optional) Boolean. Set to True if redirect following is allowed.
+    :param params: (optional) Dictionary of parameters, or bytes, to be sent in the query string for the :class:`Request`.
+    :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.
+    """
+
+    return request('PATCH', url,
+        params=params, data=data, headers=headers, files=files,
+        cookies=cookies, auth=auth, timeout=timeout,
+        allow_redirects=allow_redirects, proxies=proxies)
+
 
+def delete(url,
+    params=None, headers=None, cookies=None, auth=None, timeout=None,
+    allow_redirects=False, proxies=None):
 
-def delete(url, params=None, headers=None, cookies=None, auth=None, timeout=None, allow_redirects=False,
-           proxies=None):
     """Sends a DELETE request. Returns :class:`Response` object.
 
     :param url: URL for the new :class:`Request` object.
@@ -141,5 +179,6 @@ def delete(url, params=None, headers=None, cookies=None, auth=None, timeout=None
     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.
     """
 
-    return request('DELETE', url, params=params, headers=headers, cookies=cookies, auth=auth,
-                    timeout=timeout, allow_redirects=allow_redirects, proxies=proxies)
+    return request('DELETE', url,
+        params=params, headers=headers, cookies=cookies, auth=auth,
+        timeout=timeout, allow_redirects=allow_redirects, proxies=proxies)
diff --git a/requests/models.py b/requests/models.py
index e34ef3c4..5765af4b 100644
--- a/requests/models.py
+++ b/requests/models.py
@@ -28,12 +28,12 @@ class Request(object):
     Requests. Recommended interface is with the Requests functions.
     """
 
-    _METHODS = ('GET', 'HEAD', 'PUT', 'POST', 'DELETE')
+    _METHODS = ('GET', 'HEAD', 'PUT', 'POST', 'DELETE', 'PATCH')
 
-    def __init__(self, url=None, headers=dict(), files=None, method=None,
-                 data=dict(), params=dict(), auth=None, cookiejar=None,
-                 timeout=None, redirect=False, allow_redirects=False,
-                 proxies=None):
+    def __init__(self,
+        url=None, headers=dict(), files=None, method=None, data=dict(),
+        params=dict(), auth=None, cookiejar=None, timeout=None, redirect=False,
+        allow_redirects=False, proxies=None):
 
         socket.setdefaulttimeout(timeout)
 
diff --git a/test_requests.py b/test_requests.py
index 8a6b0ae0..153c6d91 100755
--- a/test_requests.py
+++ b/test_requests.py
@@ -128,7 +128,21 @@ class RequestsTestSuite(unittest.TestCase):
         self.assertEqual(post2.status_code, 200)
 
         post3 = requests.post(url, data='[{"some": "json"}]')
-        self.assertEqual(post.status_code, 200)
+        self.assertEqual(post3.status_code, 200)
+
+
+    def test_POSTBIN_GET_PATCH_FILES(self):
+        url = httpbin('patch')
+        patch = requests.patch(url).raise_for_status()
+
+        patch = requests.post(url, data={'some': 'data'})
+        self.assertEqual(patch.status_code, 200)
+
+        patch2 = requests.post(url, files={'some': open('test_requests.py')})
+        self.assertEqual(patch2.status_code, 200)
+
+        patch3 = requests.post(url, data='[{"some": "json"}]')
+        self.assertEqual(patch3.status_code, 200)
 
 
     def test_POSTBIN_GET_POST_FILES_WITH_PARAMS(self):
