commit ce7c86cc5816e8412956e251c22cca73101136b7
Author: Radu Voicilas <radu.voicilas@gmail.com>
Date:   Thu Oct 18 22:24:59 2012 +0300

    Replace assert statements with unittest's self.assert*
    
    -- the incetive for this being that with self.assertEqual you get an
    error message if the test fails

diff --git a/tests/test_requests.py b/tests/test_requests.py
index 27da6b92..80709d5a 100755
--- a/tests/test_requests.py
+++ b/tests/test_requests.py
@@ -121,7 +121,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):
 
         r = get(httpbin('user-agent'), headers=heads)
 
-        assert heads['User-agent'] in r.text
+        self.assertTrue(heads['User-agent'] in r.text)
         self.assertEqual(r.status_code, 200)
 
     def test_HTTP_200_OK_GET_WITH_MIXED_PARAMS(self):
@@ -483,7 +483,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):
 
             response = get(url)
 
-            assert isinstance(response.url, str)
+            self.assertTrue(isinstance(response.url, str))
 
     def test_unicode_get(self):
 
@@ -534,7 +534,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):
             # Body wasn't valid url encoded data, so the server returns None as
             # "form" and the raw body as "data".
 
-            assert rbody.get('form') in (None, {})
+            self.assertTrue(rbody.get('form') in (None, {}))
             self.assertEqual(rbody.get('data'), 'fooaowpeuf')
 
     def test_file_post_data(self):
@@ -557,7 +557,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):
             self.assertEqual(r.url, service('post'))
 
             rbody = json.loads(r.text)
-            assert rbody.get('form') in (None, {})
+            self.assertTrue(rbody.get('form') in (None, {}))
             self.assertEqual(rbody.get('data'), filecontent.decode('ascii'))
         os.remove(testfile.name)
 
@@ -603,7 +603,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):
 
             rbody = json.loads(r.text)
 
-            assert rbody.get('form') in (None, {})
+            self.assertTrue(rbody.get('form') in (None, {}))
             self.assertEqual(rbody.get('data'), 'foobar')
 
     def test_urlencoded_get_query_multivalued_param(self):
@@ -694,14 +694,14 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):
 
         # Make 2 requests from Session object, should send header both times
         r1 = get(httpbin('user-agent'), session=s)
-        assert heads['User-agent'] in r1.text
+        self.assertTrue(heads['User-agent'] in r1.text)
 
         r2 = get(httpbin('user-agent'), session=s)
-        assert heads['User-agent'] in r2.text
+        self.assertTrue(heads['User-agent'] in r2.text)
 
         new_heads = {'User-agent': 'blah'}
         r3 = get(httpbin('user-agent'), headers=new_heads, session=s)
-        assert new_heads['User-agent'] in r3.text
+        self.assertTrue(new_heads['User-agent'] in r3.text)
 
         self.assertEqual(r2.status_code, 200)
 
@@ -721,7 +721,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):
             url = service('headers')
             response = get(url=url, hooks={'args': add_foo_header})
 
-            assert 'foo' in response.text
+            self.assertTrue('foo' in response.text)
 
     def test_multiple_hooks(self):
 
@@ -754,8 +754,8 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):
                 }
             )
 
-            assert 'foo' in response.text
-            assert 'bar' in response.text
+            for text in ('foo', 'bar'):
+                self.assertTrue(text in response.text)
 
     def test_allow_list_of_hooks_to_register_hook(self):
         """Issue 785: https://github.com/kennethreitz/requests/issues/785"""
@@ -781,7 +781,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):
 
         def assert_hooks_are_callable(hooks):
             for h in hooks['args']:
-                assert callable(h) is True
+                self.assertTrue(callable(h))
 
         hooks = [add_foo_header, add_bar_header]
         r = requests.models.Request()
@@ -829,13 +829,13 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):
         r = get(httpbin('cookies', 'set', 'k', 'v'), allow_redirects=True, session=s)
         c = json.loads(r.text).get('cookies')
 
-        assert 'k' in c
+        self.assertTrue('k' in c)
 
         # And server-set cookie persistience.
         r = get(httpbin('cookies'), session=s)
         c = json.loads(r.text).get('cookies')
 
-        assert 'k' in c
+        self.assertTrue('k' in c)
 
     def test_session_persistent_params(self):
 
@@ -846,21 +846,22 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):
 
         # Make 2 requests from Session object, should send header both times
         r1 = get(httpbin('get'), session=s)
-        assert params['a'] in r1.text
+        self.assertTrue(params['a'] in r1.text)
 
         params2 = {'b': 'b_test'}
 
         r2 = get(httpbin('get'), params=params2, session=s)
-        assert params['a'] in r2.text
-        assert params2['b'] in r2.text
+        for param in (params['a'], params2['b']):
+            self.assertTrue(param in r2.text)
 
         params3 = {'b': 'b_test', 'a': None, 'c': 'c_test'}
 
         r3 = get(httpbin('get'), params=params3, session=s)
 
-        assert not params['a'] in r3.text
-        assert params3['b'] in r3.text
-        assert params3['c'] in r3.text
+        self.assertFalse(params['a'] in r3.text)
+
+        for param in (params3['b'], params3['c']):
+            self.assertTrue(param in r3.text)
 
     def test_session_cookies_with_return_response_false(self):
         s = requests.session()
@@ -869,8 +870,8 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):
                  allow_redirects=True, session=s)
         rq.send(prefetch=True)
         c = rq.response.json.get('cookies')
-        assert 'k' in c
-        assert 'k' in s.cookies
+        self.assertTrue('k' in c)
+        self.assertTrue('k' in s.cookies)
 
     def test_session_pickling(self):
 
@@ -893,17 +894,17 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):
         s = requests.session()
         r = get(httpbin('cookies', 'set', 'k', 'v'), allow_redirects=True, session=s)
         c = json.loads(r.text).get('cookies')
-        assert 'k' in c
+        self.assertTrue('k' in c)
 
         ds = pickle.loads(pickle.dumps(s))
         r = get(httpbin('cookies'), session=ds)
         c = json.loads(r.text).get('cookies')
-        assert 'k' in c
+        self.assertTrue('k' in c)
 
         ds1 = pickle.loads(pickle.dumps(requests.session()))
         ds2 = pickle.loads(pickle.dumps(requests.session(prefetch=False)))
-        assert ds1.prefetch
-        assert not ds2.prefetch
+        self.assertTrue(ds1.prefetch)
+        self.assertFalse(ds2.prefetch)
 
     def test_connection_error(self):
         try:
@@ -911,12 +912,12 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):
         except requests.ConnectionError:
             pass
         else:
-            assert False
+            self.fail()
 
     def test_connection_error_with_safe_mode(self):
         config = {'safe_mode': True}
         r = get('http://localhost:1/nope', allow_redirects=False, config=config)
-        assert r.content is None
+        self.assertTrue(r.content is None)
 
     # def test_invalid_content(self):
     #     # WARNING: if you're using a terrible DNS provider (comcast),
@@ -936,14 +937,14 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):
     def test_cached_response(self):
 
         r1 = get(httpbin('get'), prefetch=False)
-        assert not r1._content
-        assert r1.content
-        assert r1.text
+        self.assertFalse(r1._content)
+        self.assertTrue(r1.content)
+        self.assertTrue(r1.text)
 
         r2 = get(httpbin('get'), prefetch=True)
-        assert r2._content
-        assert r2.content
-        assert r2.text
+        self.assertTrue(r2._content)
+        self.assertTrue(r2.content)
+        self.assertTrue(r2.text)
 
     def test_iter_lines(self):
 
@@ -978,7 +979,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):
     def test_permissive_iter_content(self):
         """Test that iter_content and iter_lines work even after the body has been fetched."""
         r = get(httpbin('stream', '10'), prefetch=True)
-        assert r._content_consumed
+        self.assertTrue(r._content_consumed)
         # iter_lines should still work without crashing
         self.assertEqual(len(list(r.iter_lines())), 10)
 
diff --git a/tests/test_requests_ext.py b/tests/test_requests_ext.py
index e3cdd04e..ae0a2e18 100644
--- a/tests/test_requests_ext.py
+++ b/tests/test_requests_ext.py
@@ -24,7 +24,7 @@ class RequestsTestSuite(unittest.TestCase):
     _multiprocess_can_split_ = True
 
     def test_addition(self):
-        assert (1 + 1) == 2
+        self.assertEqual(2, 1 + 1)
 
     def test_ssl_hostname_ok(self):
         requests.get('https://github.com', verify=True)
@@ -79,7 +79,7 @@ class RequestsTestSuite(unittest.TestCase):
         '''
         r = requests.get('http://www.marketwire.com/mw/release.' +
                          'do?id=1628202&sourceType=3')
-        assert r.ok
+        self.assertTrue(r.ok)
 
     def test_unicode_url_outright(self):
         '''This url visits in my browser'''
@@ -87,7 +87,7 @@ class RequestsTestSuite(unittest.TestCase):
                          'jp-morgan-behauptet-sich-der-spitze-euro' +
                          'p%C3%A4ischer-anleihe-analysten-laut-umf' +
                          'rageergebnissen-1628202.htm')
-        assert r.ok
+        self.assertTrue(r.ok)
 
     def test_redirect_encoding(self):
         '''This url redirects to
@@ -96,7 +96,7 @@ class RequestsTestSuite(unittest.TestCase):
         r = requests.get('http://feedproxy.google.com/~r/Dealipedia' +
                          'News/~3/BQtUJRJeZlo/deal_view_investment.' +
                          'php')
-        assert r.ok
+        self.assertTrue(r.ok)
 
     def test_cookies_on_redirects(self):
         """Test interaction between cookie handling and redirection."""
@@ -117,7 +117,7 @@ class RequestsTestSuite(unittest.TestCase):
         # this redirects to another domain, httpbin.org
         # cookies of the first domain should NOT be sent to the next one
         r3 = s.get(url='http://tinyurl.com/7zp3jnr')
-        assert r3.url == 'http://httpbin.org/cookies'
+        self.assertEqual(r3.url, 'http://httpbin.org/cookies')
         self.assertTrue('preview' not in json.loads(r3.text)['cookies'])
 
 if __name__ == '__main__':
