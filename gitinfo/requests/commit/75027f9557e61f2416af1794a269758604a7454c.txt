commit 75027f9557e61f2416af1794a269758604a7454c
Author: jbergstroem <bugs@bergstroem.nu>
Date:   Tue Aug 23 11:37:51 2011 +0200

    Typos, nits and some 80w fixes

diff --git a/docs/community/faq.rst b/docs/community/faq.rst
index b0921956..b6efc786 100644
--- a/docs/community/faq.rst
+++ b/docs/community/faq.rst
@@ -11,7 +11,7 @@ Encoded Data?
 Requests automatically decompresses gzip-encoded responses, and does
 it's best to decodes response content to unicode when possible.
 
-You can get direct access to the raw reasponse (and even the socket),
+You can get direct access to the raw response (and even the socket),
 if needed as well.
 
 
@@ -22,7 +22,6 @@ Requests allows you to easily override User-Agent strings, along with
 any other HTTP Header.
 
 
-
 Why not Httplib2?
 -----------------
 
diff --git a/docs/community/updates.rst b/docs/community/updates.rst
index 942ccac1..e6e1559f 100644
--- a/docs/community/updates.rst
+++ b/docs/community/updates.rst
@@ -20,7 +20,6 @@ I often tweet about new features and releases of Requests.
 Follow `@kennethreitz <https://twitter.com/kennethreitz>`_ for updates.
 
 
-
 Mailing List
 ------------
 
diff --git a/docs/user/advanced.rst b/docs/user/advanced.rst
index d145da21..ae7827c9 100644
--- a/docs/user/advanced.rst
+++ b/docs/user/advanced.rst
@@ -66,7 +66,7 @@ Available hooks:
 
 You can assign a hook function on a per-request basis by passing a
 ``{hook_name: callback_function}`` dictionary to the ``hooks`` request
-paramaeter::
+parameter::
 
     hooks=dict(args=print_url)
 
@@ -134,4 +134,4 @@ To do so, just configure Requests with a stream to write to::
     >>> requests.settings.verbose = sys.stderr
     >>> requests.get('http://httpbin.org/headers')
     2011-08-17T03:04:23.380175   GET   http://httpbin.org/headers
-    <Response [200]>
\ No newline at end of file
+    <Response [200]>
diff --git a/docs/user/install.rst b/docs/user/install.rst
index cdc6d86c..dc4aa627 100644
--- a/docs/user/install.rst
+++ b/docs/user/install.rst
@@ -3,7 +3,8 @@
 Installation
 ============
 
-This part of the documentation covers the installation of Requests. The first step to using any software package is getting it properly installed.
+This part of the documentation covers the installation of Requests.
+The first step to using any software package is getting it properly installed.
 
 
 Distribute & Pip
@@ -24,7 +25,8 @@ But, you really `shouldn't do that <http://www.pip-installer.org/en/latest/index
 Cheeseshop Mirror
 -----------------
 
-If the Cheeseshop is down, you can also install Requests from Kenneth Reitz's personal `Cheeseshop mirror <http://pip.kreitz.co/>`_::
+If the Cheeseshop is down, you can also install Requests from Kenneth Reitz's
+personal `Cheeseshop mirror <http://pip.kreitz.co/>`_::
 
     $ pip install -i http://pip.kreitz.co/simple requests
 
@@ -48,6 +50,7 @@ Or, download the `zipball <https://github.com/kennethreitz/requests/zipball/mast
     $ curl -O https://github.com/kennethreitz/requests/zipball/master
 
 
-Once you have a copy of the source, you can embed it in your Python package, or install it into your site-packages easily::
+Once you have a copy of the source, you can embed it in your Python package,
+or install it into your site-packages easily::
 
     $ python setup.py install
diff --git a/docs/user/intro.rst b/docs/user/intro.rst
index 217cb81c..9837fa14 100644
--- a/docs/user/intro.rst
+++ b/docs/user/intro.rst
@@ -21,10 +21,16 @@ All contributions to Requests should keep these important rules in mind.
 ISC License
 -----------
 
+A large number of open source projects you find today are `GPL Licensed`_.
+While the GPL has its time and place, it should most certainly not be your
+go-to license for your next open source project.
 
-A large number of open source projects you find today are `GPL Licensed`_. While the GPL has its time and place, it should most certainly not be your go-to license for your next open source project.
+A project that is released as GPL cannot be used in any commercial product
+without the product itself also being offered as open source.
 
-A project that is released as GPL cannot be used in any commercial product without the product itself also being offered as open source. The MIT, BSD, ISC, and Apache2 licenses are great alternatives to the GPL that allow your open-source software to be used freely in proprietary, closed-source software.
+The MIT, BSD, ISC, and Apache2 licenses are great alternatives to the GPL
+that allow your open-source software to be used freely in proprietary,
+closed-source software.
 
 Requests is released under terms of `The ISC License`_.
 
@@ -61,4 +67,4 @@ At this time, the following Python platforms are officially supported:
 * PyPy-c 1.5
 
 
-Support for Python 3.x is planned.
\ No newline at end of file
+Support for Python 3.x is planned.
diff --git a/docs/user/quickstart.rst b/docs/user/quickstart.rst
index f9370f59..7ec7593d 100644
--- a/docs/user/quickstart.rst
+++ b/docs/user/quickstart.rst
@@ -5,7 +5,9 @@ Quickstart
 
 .. module:: requests.models
 
-Eager to get started? This page gives a good introduction in how to get started with Requests. This assumes you already have Requests installed. If you do not, head over to the :ref:`Installation <install>` section.
+Eager to get started? This page gives a good introduction in how to get started
+with Requests. This assumes you already have Requests installed. If you do not,
+head over to the :ref:`Installation <install>` section.
 
 First, make sure that:
 
@@ -25,7 +27,8 @@ Let's get GitHub's public timeline ::
 
     r = requests.get('https://github.com/timeline.json')
 
-Now, we have a :class:`Response` object called ``r``. We can get all the information we need from this.
+Now, we have a :class:`Response` object called ``r``. We can get all the
+information we need from this.
 
 
 Response Content
@@ -90,7 +93,8 @@ interface::
         'content-type': 'application/json; charset=utf-8'
     }
 
-The dictionary is special, though: it's made just for HTTP headers. According to `RFC 2616 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html>`_, HTTP
+The dictionary is special, though: it's made just for HTTP headers. According to
+`RFC 2616 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html>`_, HTTP
 Headers are case-insensitive.
 
 So, we can access the headers using any capitalization we want::
@@ -118,7 +122,7 @@ If a response contains some Cookies, you can get quick access to them::
     >>> print r.cookies
     {'requests-is': 'awesome'}
 
-The underlying CookieJar is also available for more advanced handing::
+The underlying CookieJar is also available for more advanced handling::
 
     >>> r.request.cookiejar
     <cookielib.CookieJar>
