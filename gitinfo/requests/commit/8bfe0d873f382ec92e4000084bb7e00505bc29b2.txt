commit 8bfe0d873f382ec92e4000084bb7e00505bc29b2
Author: Chase Sterling <chase.sterling@gmail.com>
Date:   Wed Nov 6 21:52:21 2013 -0500

    Store the request cookiejar in PreparedRequest.cookies fix #1728
    
    Conflicts:
            requests/sessions.py

diff --git a/requests/auth.py b/requests/auth.py
index f87087df..ba979b59 100644
--- a/requests/auth.py
+++ b/requests/auth.py
@@ -16,6 +16,7 @@ import logging
 from base64 import b64encode
 
 from .compat import urlparse, str
+from .cookies import extract_cookies_to_jar
 from .utils import parse_dict_header
 
 log = logging.getLogger(__name__)
@@ -169,7 +170,8 @@ class HTTPDigestAuth(AuthBase):
             r.content
             r.raw.release_conn()
             prep = r.request.copy()
-            prep.prepare_cookies(r.cookies)
+            extract_cookies_to_jar(prep.cookies, r.request, r.raw)
+            prep.prepare_cookies(prep.cookies)
 
             prep.headers['Authorization'] = self.build_digest_header(
                 prep.method, prep.url)
diff --git a/requests/models.py b/requests/models.py
index c68f9118..31d120e8 100644
--- a/requests/models.py
+++ b/requests/models.py
@@ -270,6 +270,9 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
         self.url = None
         #: dictionary of HTTP headers.
         self.headers = None
+        #: The `CookieJar` used to create the Cookie header will be stored here
+        #: after prepare_cookies is called
+        self.cookies = None
         #: request body to send to the server.
         self.body = None
         #: dictionary of callback hooks, for internal usage.
@@ -299,6 +302,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
         p.method = self.method
         p.url = self.url
         p.headers = self.headers.copy()
+        p.cookies = self.cookies.copy()
         p.body = self.body
         p.hooks = self.hooks
         return p
@@ -474,14 +478,13 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
         """Prepares the given HTTP cookie data."""
 
         if isinstance(cookies, cookielib.CookieJar):
-            cookies = cookies
+            self.cookies = cookies
         else:
-            cookies = cookiejar_from_dict(cookies)
+            self.cookies = cookiejar_from_dict(cookies)
 
-        if 'cookie' not in self.headers:
-            cookie_header = get_cookie_header(cookies, self)
-            if cookie_header is not None:
-                self.headers['Cookie'] = cookie_header
+        cookie_header = get_cookie_header(self.cookies, self)
+        if cookie_header is not None:
+            self.headers['Cookie'] = cookie_header
 
     def prepare_hooks(self, hooks):
         """Prepares the given hooks."""
diff --git a/requests/sessions.py b/requests/sessions.py
index cdce6484..52adb7a0 100644
--- a/requests/sessions.py
+++ b/requests/sessions.py
@@ -153,7 +153,8 @@ class SessionRedirectMixin(object):
             except KeyError:
                 pass
 
-            prepared_request.prepare_cookies(self.cookies)
+            extract_cookies_to_jar(prepared_request.cookies, prepared_request, resp.raw)
+            prepared_request.prepare_cookies(prepared_request.cookies)
 
             resp = self.send(
                 prepared_request,
@@ -345,9 +346,6 @@ class Session(SessionRedirectMixin):
         )
         prep = self.prepare_request(req)
 
-        # Add param cookies to session cookies
-        self.cookies = merge_cookies(self.cookies, cookies)
-
         proxies = proxies or {}
 
         # Gather clues from the surrounding environment.
