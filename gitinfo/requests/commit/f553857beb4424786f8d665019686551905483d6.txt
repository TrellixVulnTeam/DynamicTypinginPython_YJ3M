commit f553857beb4424786f8d665019686551905483d6
Author: Kenneth Reitz <me@kennethreitz.com>
Date:   Tue Nov 27 12:42:11 2012 -0800

    remove safe mode

diff --git a/requests/defaults.py b/requests/defaults.py
index 7a9a97ff..3662b0d6 100644
--- a/requests/defaults.py
+++ b/requests/defaults.py
@@ -39,9 +39,6 @@ defaults['max_redirects'] = 30
 defaults['pool_connections'] = 10
 defaults['pool_maxsize'] = 10
 defaults['max_retries'] = 0
-defaults['danger_mode'] = False
-defaults['safe_mode'] = False
-defaults['strict_mode'] = False
 defaults['keep_alive'] = True
 defaults['encode_uri'] = True
 defaults['trust_env'] = True
diff --git a/requests/safe_mode.py b/requests/safe_mode.py
deleted file mode 100644
index 18808d74..00000000
--- a/requests/safe_mode.py
+++ /dev/null
@@ -1,40 +0,0 @@
-# -*- coding: utf-8 -*-
-
-"""
-requests.safe_mode
-~~~~~~~~~~~~
-
-This module contains a decorator that implements safe_mode.
-
-:copyright: (c) 2012 by Kenneth Reitz.
-:license: ISC, see LICENSE for more details.
-
-"""
-
-from .models import Response
-from .packages.urllib3.response import HTTPResponse
-from .exceptions import RequestException, ConnectionError, HTTPError
-import socket
-
-
-def catch_exceptions_if_in_safe_mode(function):
-    """New implementation of safe_mode. We catch all exceptions at the Session level
-    and then return a blank Response object with the error field filled. This decorator
-    wraps Session._send_request() in sessions.py.
-    """
-
-    def wrapped(*args, **kwargs):
-        # if save_mode, we catch exceptions and fill error field
-        if (kwargs.get('config') and kwargs.get('config').get('safe_mode')) or (kwargs.get('session')
-                                            and kwargs.get('session').config.get('safe_mode')):
-            try:
-                return function(*args, **kwargs)
-            except (RequestException, ConnectionError, HTTPError,
-                    socket.timeout, socket.gaierror) as e:
-                r = Response()
-                r.error = e
-                r.raw = HTTPResponse()  # otherwise, tests fail
-                r.status_code = 0  # with this status_code, content returns None
-                return r
-        return function(*args, **kwargs)
-    return wrapped
diff --git a/requests/sessions.py b/requests/sessions.py
index 5d67b4d8..cf0f8b9c 100644
--- a/requests/sessions.py
+++ b/requests/sessions.py
@@ -17,7 +17,6 @@ from .models import Request
 from .hooks import dispatch_hook
 from .utils import header_expand, from_key_val_list
 from .packages.urllib3.poolmanager import PoolManager
-from .safe_mode import catch_exceptions_if_in_safe_mode
 
 
 def merge_kwargs(local_kwarg, default_kwarg):
@@ -268,7 +267,6 @@ class Session(object):
         # Send the HTTP Request.
         return self._send_request(r, **args)
 
-    @catch_exceptions_if_in_safe_mode
     def _send_request(self, r, **kwargs):
         # Send the request.
         r.send(prefetch=kwargs.get("prefetch"))
