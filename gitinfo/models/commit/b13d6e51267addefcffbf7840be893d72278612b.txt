commit b13d6e51267addefcffbf7840be893d72278612b
Author: Dan O'Shea <dan@djoshea.com>
Date:   Thu Jul 27 13:48:46 2017 -0700

    LFADS: Fixing alignment bias bug

diff --git a/lfads/lfads.py b/lfads/lfads.py
index d9929c2e..94fe3713 100644
--- a/lfads/lfads.py
+++ b/lfads/lfads.py
@@ -281,7 +281,7 @@ class LFADS(object):
     """Create an LFADS model.
 
        train - a model for training, sampling of posteriors is used
-       posterior_sample_and_average - sample from the posterior, this is used 
+       posterior_sample_and_average - sample from the posterior, this is used
          for evaluating the expected value of the outputs of LFADS, given a
          specific input, by averaging over multiple samples from the approx
          posterior.  Also used for the lower bound on the negative
@@ -409,6 +409,12 @@ class LFADS(object):
           dataset = datasets[name]
           in_mat_cxf = dataset['alignment_matrix_cxf'].astype(np.float32)
 
+        if datasets and 'alignment_bias_c' in datasets[name].keys():
+          dataset = datasets[name]
+          print("Using alignment bias provided for dataset:", name)
+          align_bias_c = dataset['alignment_bias_c'].astype(np.float32)
+          align_bias_1xc = np.expand_dims(align_bias_c, axis=0)
+
         out_mat_fxc = None
         out_bias_1xc = None
         if in_mat_cxf is not None:
@@ -1714,7 +1720,7 @@ class LFADS(object):
       out_dist_params = np.zeros([E_to_process, T, D+D])
     else:
       assert False, "NIY"
-    
+
     costs = np.zeros(E_to_process)
     nll_bound_vaes = np.zeros(E_to_process)
     nll_bound_iwaes = np.zeros(E_to_process)
@@ -1914,7 +1920,7 @@ class LFADS(object):
     for i, (var, var_eval) in enumerate(zip(all_tf_vars, all_tf_vars_eval)):
       if any(s in include_strs for s in var.name):
         if not isinstance(var_eval, np.ndarray): # for H5PY
-          print(var.name, """ is not numpy array, saving as numpy array 
+          print(var.name, """ is not numpy array, saving as numpy array
                 with value: """, var_eval, type(var_eval))
           e = np.array(var_eval)
           print(e, type(e))
diff --git a/lfads/utils.py b/lfads/utils.py
index ce4d1d27..afa2c6c6 100644
--- a/lfads/utils.py
+++ b/lfads/utils.py
@@ -112,7 +112,7 @@ def init_linear(in_size, out_size, do_bias=True, mat_init_value=None,
         'Provided mat_init_value must have shape [%d, %d].'%(in_size, out_size))
   if bias_init_value is not None and bias_init_value.shape != (1,out_size):
     raise ValueError(
-        'Provided bias_init_value must have shape [1,%d].'%(1,out_size))
+        'Provided bias_init_value must have shape [1,%d].'%(out_size,))
 
   if mat_init_value is None:
     stddev = alpha/np.sqrt(float(in_size))
