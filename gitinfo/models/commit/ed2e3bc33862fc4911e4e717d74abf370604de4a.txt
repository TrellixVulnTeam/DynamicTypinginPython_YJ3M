commit ed2e3bc33862fc4911e4e717d74abf370604de4a
Author: Reed Wanderman-Milne <reedwm@google.com>
Date:   Tue Feb 25 13:42:11 2020 -0800

    Convert numpy arrays to floats using float constructor, not .item().
    
    I plan on changing Keras to return Python floats instead of Numpy scalars, and this will break if .item() is called. Also, using the float constructor is cleaner, as it clearly communicates that a Python float is desired.
    
    PiperOrigin-RevId: 297192289

diff --git a/official/nlp/transformer/misc.py b/official/nlp/transformer/misc.py
index 11201811..7692eb66 100644
--- a/official/nlp/transformer/misc.py
+++ b/official/nlp/transformer/misc.py
@@ -269,7 +269,7 @@ def build_stats(history, callbacks):
   if history and history.history:
     train_hist = history.history
     # Gets final loss from training.
-    stats['loss'] = train_hist['loss'][-1].item()
+    stats['loss'] = float(train_hist['loss'][-1])
 
   if not callbacks:
     return stats
diff --git a/official/r1/resnet/estimator_benchmark.py b/official/r1/resnet/estimator_benchmark.py
index ce28b3c2..18056fa5 100644
--- a/official/r1/resnet/estimator_benchmark.py
+++ b/official/r1/resnet/estimator_benchmark.py
@@ -94,12 +94,12 @@ class EstimatorBenchmark(tf.test.Benchmark):
     metrics = []
     if 'accuracy' in eval_results:
       metrics.append({'name': 'accuracy_top_1',
-                      'value': eval_results['accuracy'].item(),
+                      'value': float(eval_results['accuracy']),
                       'min_value': top_1_min,
                       'max_value': top_1_max})
     if 'accuracy_top_5' in eval_results:
       metrics.append({'name': 'accuracy_top_5',
-                      'value': eval_results['accuracy_top_5'].item()})
+                      'value': float(eval_results['accuracy_top_5'])})
 
     if examples_per_sec_hook:
       exp_per_second_list = examples_per_sec_hook.current_examples_per_sec_list
diff --git a/official/vision/image_classification/common.py b/official/vision/image_classification/common.py
index 2a3aa3d7..80866fc0 100644
--- a/official/vision/image_classification/common.py
+++ b/official/vision/image_classification/common.py
@@ -164,18 +164,18 @@ def build_stats(history, eval_output, callbacks):
   """
   stats = {}
   if eval_output:
-    stats['accuracy_top_1'] = eval_output[1].item()
-    stats['eval_loss'] = eval_output[0].item()
+    stats['accuracy_top_1'] = float(eval_output[1])
+    stats['eval_loss'] = float(eval_output[0])
 
   if history and history.history:
     train_hist = history.history
     # Gets final loss from training.
-    stats['loss'] = train_hist['loss'][-1].item()
+    stats['loss'] = float(train_hist['loss'][-1])
     # Gets top_1 training accuracy.
     if 'categorical_accuracy' in train_hist:
-      stats[TRAIN_TOP_1] = train_hist['categorical_accuracy'][-1].item()
+      stats[TRAIN_TOP_1] = float(train_hist['categorical_accuracy'][-1])
     elif 'sparse_categorical_accuracy' in train_hist:
-      stats[TRAIN_TOP_1] = train_hist['sparse_categorical_accuracy'][-1].item()
+      stats[TRAIN_TOP_1] = float(train_hist['sparse_categorical_accuracy'][-1])
 
   if not callbacks:
     return stats
