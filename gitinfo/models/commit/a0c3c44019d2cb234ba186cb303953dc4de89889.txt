commit a0c3c44019d2cb234ba186cb303953dc4de89889
Author: Zhichao Lu <lzc@google.com>
Date:   Wed Apr 4 16:43:42 2018 -0700

    Internal change.
    
    PiperOrigin-RevId: 191668425

diff --git a/research/object_detection/dataset_tools/create_pascal_tf_record.py b/research/object_detection/dataset_tools/create_pascal_tf_record.py
index b6145d45..83d2b128 100644
--- a/research/object_detection/dataset_tools/create_pascal_tf_record.py
+++ b/research/object_detection/dataset_tools/create_pascal_tf_record.py
@@ -104,23 +104,21 @@ def dict_to_tf_example(data,
   truncated = []
   poses = []
   difficult_obj = []
-    
-  if data.has_key('object'):
-    for obj in data['object']:
-      difficult = bool(int(obj['difficult']))
-      if ignore_difficult_instances and difficult:
-        continue
-
-      difficult_obj.append(int(difficult))
-
-      xmin.append(float(obj['bndbox']['xmin']) / width)
-      ymin.append(float(obj['bndbox']['ymin']) / height)
-      xmax.append(float(obj['bndbox']['xmax']) / width)
-      ymax.append(float(obj['bndbox']['ymax']) / height)
-      classes_text.append(obj['name'].encode('utf8'))
-      classes.append(label_map_dict[obj['name']])
-      truncated.append(int(obj['truncated']))
-      poses.append(obj['pose'].encode('utf8'))
+  for obj in data['object']:
+    difficult = bool(int(obj['difficult']))
+    if ignore_difficult_instances and difficult:
+      continue
+
+    difficult_obj.append(int(difficult))
+
+    xmin.append(float(obj['bndbox']['xmin']) / width)
+    ymin.append(float(obj['bndbox']['ymin']) / height)
+    xmax.append(float(obj['bndbox']['xmax']) / width)
+    ymax.append(float(obj['bndbox']['ymax']) / height)
+    classes_text.append(obj['name'].encode('utf8'))
+    classes.append(label_map_dict[obj['name']])
+    truncated.append(int(obj['truncated']))
+    poses.append(obj['pose'].encode('utf8'))
 
   example = tf.train.Example(features=tf.train.Features(feature={
       'image/height': dataset_util.int64_feature(height),
diff --git a/research/object_detection/g3doc/evaluation_protocols.md b/research/object_detection/g3doc/evaluation_protocols.md
index 68fa8447..849592ef 100644
--- a/research/object_detection/g3doc/evaluation_protocols.md
+++ b/research/object_detection/g3doc/evaluation_protocols.md
@@ -31,7 +31,7 @@ while for the Weighted PASCAL VOC metric the final mAP value will be influenced
 Similar to pascal voc 2007 detection metric, but computes the intersection over
 union based on the object masks instead of object boxes.
 
-## Weighted PASCAL VOC instance segmentation metric 
+## Weighted PASCAL VOC detection metric
 
 `EvalConfig.metrics_set='weighted_pascal_voc_instance_segmentation_metrics'`
 
diff --git a/research/object_detection/leakr.dic b/research/object_detection/leakr.dic
deleted file mode 100644
index d79f5fe3..00000000
--- a/research/object_detection/leakr.dic
+++ /dev/null
@@ -1,26 +0,0 @@
-confidential;1;confidentialit,confidentiality
-dogfood;1;
-fishfood;1;
-catfood;1;
-teamfood;1;
-droidfood;1;
-//go/;1;
-//sites/;1;
-a/google.com;1;
-corp.google.com;1;
-.googleplex.com;1;
-sandbox.;1;wallet-web.sandbox.,sandbox.google.com/checkout, sandbox.,paymentssandbox
-stupid;1;astupidi
-caution:;2;
-fixme:;2;
-fixme(;2;
-internal only;2;
-internal_only;2;
-backdoor;2;
-STOPSHIP;2;
-ridiculous;1;
-notasecret;1;
-@google.com;1;noreply@google.com
-$RE:chmod [0-9]?777;3;chmod (0)777
-mactruck;2;
-seastar;2;
