commit 61b18977f0960984c7a053101ae656ebc860a5c3
Author: Andrew M. Dai <adai@google.com>
Date:   Tue Feb 27 18:54:10 2018 -0800

    Fix some minor API issues.

diff --git a/research/maskgan/README.md b/research/maskgan/README.md
index 0b7eb025..315ab651 100644
--- a/research/maskgan/README.md
+++ b/research/maskgan/README.md
@@ -14,10 +14,11 @@ tested. Pretraining may not work correctly.
 
 For training on PTB:
 
-1. (Optional) Pretrain a LM on PTB and store the checkpoint in /tmp/pretrain-lm/.
+1. (Optional) Pretrain a LM on PTB and store the checkpoint in `/tmp/pretrain-lm/`.
 Instructions WIP.
 
-2. (Optional) Run MaskGAN in MLE pretraining mode:
+2. (Optional) Run MaskGAN in MLE pretraining mode. If step 1 was not run, set
+`language_model_ckpt_dir` to empty.
 
 ```bash
 python train_mask_gan.py \
@@ -39,7 +40,7 @@ python train_mask_gan.py \
  --seq2seq_share_embedding
 ```
 
-3. Run MaskGAN in GAN mode:
+3. Run MaskGAN in GAN mode. If step 2 was not run, set `maskgan_ckpt` to empty.
 ```bash
 python train_mask_gan.py \
  --data_dir='/tmp/ptb' \
diff --git a/research/maskgan/train_mask_gan.py b/research/maskgan/train_mask_gan.py
index d6d18c83..0240c53c 100644
--- a/research/maskgan/train_mask_gan.py
+++ b/research/maskgan/train_mask_gan.py
@@ -78,9 +78,9 @@ MODE_TEST = 'TEST'
 tf.app.flags.DEFINE_enum(
     'mode', 'TRAIN', [MODE_TRAIN, MODE_VALIDATION, MODE_TEST, MODE_TRAIN_EVAL],
     'What this binary will do.')
-tf.app.flags.DEFINE_string('master', 'local',
+tf.app.flags.DEFINE_string('master', '',
                            """Name of the TensorFlow master to use.""")
-tf.app.flags.DEFINE_string('eval_master', 'local',
+tf.app.flags.DEFINE_string('eval_master', '',
                            """Name prefix of the Tensorflow eval master,
                     or "local".""")
 tf.app.flags.DEFINE_integer('task', 0,
@@ -517,7 +517,7 @@ def train_model(hparams, data, log_dir, log, id_to_word, data_ngram_counts):
   is_chief = FLAGS.task == 0
 
   with tf.Graph().as_default():
-    with tf.device(tf.ReplicaDeviceSetter(FLAGS.ps_tasks)):
+    with tf.device(tf.train.replica_device_setter(FLAGS.ps_tasks)):
       container_name = ''
       with tf.container(container_name):
         # Construct the model.
@@ -540,7 +540,7 @@ def train_model(hparams, data, log_dir, log, id_to_word, data_ngram_counts):
 
         # Create the supervisor.  It will take care of initialization,
         # summaries, checkpoints, and recovery.
-        sv = tf.Supervisor(
+        sv = tf.train.Supervisor(
             logdir=log_dir,
             is_chief=is_chief,
             saver=model.saver,
