commit 6a6c361642e5fd0864fe87a9dfe77640a7cfcb2f
Author: Hongkun Yu <saberkun@users.noreply.github.com>
Date:   Mon Jul 22 09:13:38 2019 -0700

    Add a new sanity check script that is able to only check incremental changes. (#7265)
    
    * Update pylint.rcfile
    
    * Update pylint.rcfile
    
    * Update pylint.rcfile
    
    * add new sanity check script for lint to replace current lint script.
    
    * Revert "Update pylint.rcfile"
    
    This reverts commit f6036cd7e7c4b9e3eeb47bb56a63927a040a2761.
    
    * Revert "Update pylint.rcfile"
    
    This reverts commit e3af497342e26bbbbecfc8c8f79cb0e24a2ef960.
    
    * Revert "Update pylint.rcfile"
    
    This reverts commit 6136636eee6e90fd191ebbb4ccaa9fb89c0290f4.
    
    * update scripts
    
    * disable trailing-newlines

diff --git a/official/utils/testing/pylint.rcfile b/official/utils/testing/pylint.rcfile
index 009ee7d1..16b9390a 100644
--- a/official/utils/testing/pylint.rcfile
+++ b/official/utils/testing/pylint.rcfile
@@ -1,6 +1,5 @@
 [MESSAGES CONTROL]
-disable=R,W,
-        bad-option-value
+disable=R,W,bad-option-value,trailing-newlines
 
 [REPORTS]
 # Tells whether to display a full report or only the messages
diff --git a/official/utils/testing/scripts/builds_common.sh b/official/utils/testing/scripts/builds_common.sh
new file mode 100644
index 00000000..3cf08bb5
--- /dev/null
+++ b/official/utils/testing/scripts/builds_common.sh
@@ -0,0 +1,64 @@
+#!/usr/bin/env bash
+# Copyright 2019 The TensorFlow Authors. All Rights Reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# ==============================================================================
+#
+# Common Bash functions used by build scripts
+
+COLOR_NC='\033[0m'
+COLOR_BOLD='\033[1m'
+COLOR_LIGHT_GRAY='\033[0;37m'
+COLOR_GREEN='\033[0;32m'
+COLOR_RED='\033[0;31m'
+
+die() {
+    # Print a message and exit with code 1.
+    #
+    # Usage: die <error_message>
+    #   e.g., die "Something bad happened."
+
+    echo $@
+    exit 1
+}
+
+num_cpus() {
+    # Get the number of CPUs
+    N_CPUS=$(grep -c ^processor /proc/cpuinfo)
+    if [[ -z ${N_CPUS} ]]; then
+        die "ERROR: Unable to determine the number of CPUs"
+    fi
+
+    echo ${N_CPUS}
+}
+
+# List files changed (i.e., added, or revised) from
+# the common ancestor of HEAD and the latest master branch.
+# Usage: get_changed_files_from_master_branch
+get_changed_files_from_master_branch() {
+    ANCESTOR=$(git merge-base HEAD master origin/master)
+    git diff ${ANCESTOR} --diff-filter=d --name-only "$@"
+}
+
+# List python files changed that still exist,
+# i.e., not removed.
+# Usage: get_py_files_to_check [--incremental]
+get_py_files_to_check() {
+    if [[ "$1" == "--incremental" ]]; then
+        get_changed_files_from_master_branch -- '*.py'
+    elif [[ -z "$1" ]]; then
+        find official/ -name '*.py'
+    else
+        die "Found unsupported args: $@ for get_py_files_to_check."
+    fi
+}
diff --git a/official/utils/testing/scripts/ci_sanity.sh b/official/utils/testing/scripts/ci_sanity.sh
new file mode 100755
index 00000000..0fede44c
--- /dev/null
+++ b/official/utils/testing/scripts/ci_sanity.sh
@@ -0,0 +1,118 @@
+#!/bin/bash
+# Copyright 2019 The TensorFlow Authors. All Rights Reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# ==============================================================================
+
+# Sanity check script that runs tests and lint under local environment.
+# Make sure that tensorflow and pylint is installed.
+# usage: models >: ./official/utils/testing/scripts/ci_sanity.sh do_pylint --incremental
+set +x
+
+SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
+source "${SCRIPT_DIR}/builds_common.sh"
+cd "$SCRIPT_DIR/../../../.."
+MODEL_ROOT="$(pwd)"
+
+export PYTHONPATH="$PYTHONPATH:${MODEL_ROOT}"
+
+# Run pylint
+do_pylint() {
+    # Usage: do_pylint [--incremental]
+    #
+    # Options:
+    #   --incremental  Performs check on only the python files changed in the
+    #                  last non-merge git commit.
+
+    # Use this list to whitelist pylint errors
+    ERROR_WHITELIST=""
+
+    echo "ERROR_WHITELIST=\"${ERROR_WHITELIST}\""
+
+    PYLINT_BIN="pylint"
+
+    PYTHON_SRC_FILES=$(get_py_files_to_check $1)
+    if [[ -z ${PYTHON_SRC_FILES} ]]; then
+        echo "do_pylint found no Python files to check. Returning."
+        return 0
+    fi
+
+    PYLINTRC_FILE="official/utils/testing/pylint.rcfile"
+
+    if [[ ! -f "${PYLINTRC_FILE}" ]]; then
+        die "ERROR: Cannot find pylint rc file at ${PYLINTRC_FILE}"
+    fi
+
+    NUM_SRC_FILES=$(echo ${PYTHON_SRC_FILES} | wc -w)
+    NUM_CPUS=$(num_cpus)
+
+    echo "Running pylint on ${NUM_SRC_FILES} files with ${NUM_CPUS} "\
+    "parallel jobs..."
+    echo ""
+
+    PYLINT_START_TIME=$(date +'%s')
+    OUTPUT_FILE="$(mktemp)_pylint_output.log"
+    ERRORS_FILE="$(mktemp)_pylint_errors.log"
+    NONWL_ERRORS_FILE="$(mktemp)_pylint_nonwl_errors.log"
+
+    rm -rf ${OUTPUT_FILE}
+    rm -rf ${ERRORS_FILE}
+    rm -rf ${NONWL_ERRORS_FILE}
+    touch ${NONWL_ERRORS_FILE}
+
+    ${PYLINT_BIN} --rcfile="${PYLINTRC_FILE}" --output-format=parseable \
+        --jobs=${NUM_CPUS} ${PYTHON_SRC_FILES} > ${OUTPUT_FILE} 2>&1
+    PYLINT_END_TIME=$(date +'%s')
+
+    echo ""
+    echo "pylint took $((PYLINT_END_TIME - PYLINT_START_TIME)) s"
+    echo ""
+
+    N_ERRORS=0
+    while read -r LINE; do
+        IS_WHITELISTED=0
+        for WL_REGEX in ${ERROR_WHITELIST}; do
+            if echo ${LINE} | grep -q "${WL_REGEX}"; then
+                echo "Found a whitelisted error:"
+                echo "  ${LINE}"
+                IS_WHITELISTED=1
+            fi
+        done
+
+        if [[ ${IS_WHITELISTED} == "0" ]]; then
+            echo "${LINE}" >> ${NONWL_ERRORS_FILE}
+            echo "" >> ${NONWL_ERRORS_FILE}
+            ((N_ERRORS++))
+        fi
+    done <${OUTPUT_FILE}
+
+    echo ""
+    if [[ ${N_ERRORS} != 0 ]]; then
+        echo "FAIL: Found ${N_ERRORS} non-whitelited pylint errors:"
+        cat "${NONWL_ERRORS_FILE}"
+        return 1
+    else
+        echo "PASS: No non-whitelisted pylint errors were found."
+        return 0
+    fi
+}
+
+test_result=0
+
+TESTS="$@"
+
+for t in "${TESTS}"; do
+  ${t} || test_result=$?
+done
+
+exit "${test_result}"
