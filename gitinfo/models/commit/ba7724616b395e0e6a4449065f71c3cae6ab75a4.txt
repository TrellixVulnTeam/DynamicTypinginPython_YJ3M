commit ba7724616b395e0e6a4449065f71c3cae6ab75a4
Author: Hongkun Yu <hongkuny@google.com>
Date:   Mon Apr 20 14:11:32 2020 -0700

    Makes the params override strict.
    
    PiperOrigin-RevId: 307473476

diff --git a/official/vision/image_classification/classifier_trainer.py b/official/vision/image_classification/classifier_trainer.py
index afb81ee3..adafca2f 100644
--- a/official/vision/image_classification/classifier_trainer.py
+++ b/official/vision/image_classification/classifier_trainer.py
@@ -187,8 +187,7 @@ def _get_params_from_flags(flags_obj: flags.FlagValues):
 
   for param in overriding_configs:
     logging.info('Overriding params: %s', param)
-    # Set is_strict to false because we can have dynamic dict parameters.
-    params = params_dict.override_params_dict(params, param, is_strict=False)
+    params = params_dict.override_params_dict(params, param, is_strict=True)
 
   params.validate()
   params.lock()
diff --git a/official/vision/image_classification/configs/base_configs.py b/official/vision/image_classification/configs/base_configs.py
index 8065f030..bd505a95 100644
--- a/official/vision/image_classification/configs/base_configs.py
+++ b/official/vision/image_classification/configs/base_configs.py
@@ -207,7 +207,7 @@ class ModelConfig(base_config.Config):
 
   """
   name: str = None
-  model_params: Mapping[str, Any] = None
+  model_params: base_config.Config = None
   num_classes: int = None
   loss: LossConfig = None
   optimizer: OptimizerConfig = None
diff --git a/official/vision/image_classification/efficientnet/efficientnet_config.py b/official/vision/image_classification/efficientnet/efficientnet_config.py
index e2ec0cbf..a758cc63 100644
--- a/official/vision/image_classification/efficientnet/efficientnet_config.py
+++ b/official/vision/image_classification/efficientnet/efficientnet_config.py
@@ -22,6 +22,7 @@ from typing import Any, Mapping
 
 import dataclasses
 
+from official.modeling.hyperparams import base_config
 from official.vision.image_classification.configs import base_configs
 
 
@@ -43,23 +44,24 @@ class EfficientNetModelConfig(base_configs.ModelConfig):
       configuration.
     learning_rate: The configuration for learning rate. Defaults to an
       exponential configuration.
-
   """
   name: str = 'EfficientNet'
   num_classes: int = 1000
-  model_params: Mapping[str, Any] = dataclasses.field(default_factory=lambda: {
-      'model_name': 'efficientnet-b0',
-      'model_weights_path': '',
-      'weights_format': 'saved_model',
-      'overrides': {
-          'batch_norm': 'default',
-          'rescale_input': True,
-          'num_classes': 1000,
-      }
-  })
+  model_params: base_config.Config = dataclasses.field(
+      default_factory=lambda: {
+          'model_name': 'efficientnet-b0',
+          'model_weights_path': '',
+          'weights_format': 'saved_model',
+          'overrides': {
+              'batch_norm': 'default',
+              'rescale_input': True,
+              'num_classes': 1000,
+              'activation': 'swish',
+              'dtype': 'float32',
+          }
+      })
   loss: base_configs.LossConfig = base_configs.LossConfig(
-      name='categorical_crossentropy',
-      label_smoothing=0.1)
+      name='categorical_crossentropy', label_smoothing=0.1)
   optimizer: base_configs.OptimizerConfig = base_configs.OptimizerConfig(
       name='rmsprop',
       decay=0.9,
diff --git a/official/vision/image_classification/resnet/resnet_config.py b/official/vision/image_classification/resnet/resnet_config.py
index d94e65ac..a746257f 100644
--- a/official/vision/image_classification/resnet/resnet_config.py
+++ b/official/vision/image_classification/resnet/resnet_config.py
@@ -22,6 +22,7 @@ from typing import Any, Mapping
 
 import dataclasses
 
+from official.modeling.hyperparams import base_config
 from official.vision.image_classification.configs import base_configs
 
 
@@ -38,12 +39,13 @@ class ResNetModelConfig(base_configs.ModelConfig):
   """Configuration for the ResNet model."""
   name: str = 'ResNet'
   num_classes: int = 1000
-  model_params: Mapping[str, Any] = dataclasses.field(default_factory=lambda: {
-      'num_classes': 1000,
-      'batch_size': None,
-      'use_l2_regularizer': True,
-      'rescale_inputs': False,
-  })
+  model_params: base_config.Config = dataclasses.field(
+      default_factory=lambda: {
+          'num_classes': 1000,
+          'batch_size': None,
+          'use_l2_regularizer': True,
+          'rescale_inputs': False,
+      })
   loss: base_configs.LossConfig = base_configs.LossConfig(
       name='sparse_categorical_crossentropy')
   optimizer: base_configs.OptimizerConfig = base_configs.OptimizerConfig(
