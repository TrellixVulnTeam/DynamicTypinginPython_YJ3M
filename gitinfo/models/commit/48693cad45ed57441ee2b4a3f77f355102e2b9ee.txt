commit 48693cad45ed57441ee2b4a3f77f355102e2b9ee
Author: Pengchong Jin <pengchong@google.com>
Date:   Thu Nov 21 15:31:42 2019 -0800

    Move get_non_empty_box_indices to box_utils.
    
    PiperOrigin-RevId: 281846940

diff --git a/official/vision/detection/dataloader/maskrcnn_parser.py b/official/vision/detection/dataloader/maskrcnn_parser.py
index 1fe6c40d..b46c49bd 100644
--- a/official/vision/detection/dataloader/maskrcnn_parser.py
+++ b/official/vision/detection/dataloader/maskrcnn_parser.py
@@ -234,7 +234,7 @@ class Parser(object):
         boxes, image_scale, (image_height, image_width), offset)
 
     # Filters out ground truth boxes that are all zeros.
-    indices = input_utils.get_non_empty_box_indices(boxes)
+    indices = box_utils.get_non_empty_box_indices(boxes)
     boxes = tf.gather(boxes, indices)
     classes = tf.gather(classes, indices)
     if self._include_mask:
diff --git a/official/vision/detection/dataloader/retinanet_parser.py b/official/vision/detection/dataloader/retinanet_parser.py
index 047b9c4b..9f46e21e 100644
--- a/official/vision/detection/dataloader/retinanet_parser.py
+++ b/official/vision/detection/dataloader/retinanet_parser.py
@@ -251,7 +251,7 @@ class Parser(object):
     boxes = input_utils.resize_and_crop_boxes(
         boxes, image_scale, (image_height, image_width), offset)
     # Filters out ground truth boxes that are all zeros.
-    indices = input_utils.get_non_empty_box_indices(boxes)
+    indices = box_utils.get_non_empty_box_indices(boxes)
     boxes = tf.gather(boxes, indices)
     classes = tf.gather(classes, indices)
 
@@ -311,7 +311,7 @@ class Parser(object):
     boxes = input_utils.resize_and_crop_boxes(
         boxes, image_scale, (image_height, image_width), offset)
     # Filters out ground truth boxes that are all zeros.
-    indices = input_utils.get_non_empty_box_indices(boxes)
+    indices = box_utils.get_non_empty_box_indices(boxes)
     boxes = tf.gather(boxes, indices)
     classes = tf.gather(classes, indices)
 
@@ -414,7 +414,7 @@ class Parser(object):
       boxes = input_utils.resize_and_crop_boxes(
           boxes, image_scale, (image_height, image_width), offset)
       # Filters out ground truth boxes that are all zeros.
-      indices = input_utils.get_non_empty_box_indices(boxes)
+      indices = box_utils.get_non_empty_box_indices(boxes)
       boxes = tf.gather(boxes, indices)
 
       # Assigns anchors.
diff --git a/official/vision/detection/dataloader/shapemask_parser.py b/official/vision/detection/dataloader/shapemask_parser.py
index 6b662e38..7b5def68 100644
--- a/official/vision/detection/dataloader/shapemask_parser.py
+++ b/official/vision/detection/dataloader/shapemask_parser.py
@@ -268,7 +268,7 @@ class Parser(object):
         boxes, image_scale, self._output_size, offset)
 
     # Filters out ground truth boxes that are all zeros.
-    indices = input_utils.get_non_empty_box_indices(boxes)
+    indices = box_utils.get_non_empty_box_indices(boxes)
     boxes = tf.gather(boxes, indices)
     classes = tf.gather(classes, indices)
     masks = tf.gather(masks, indices)
@@ -427,7 +427,7 @@ class Parser(object):
         tf.expand_dims(masks, axis=-1), image_scale, self._output_size, offset)
 
     # Filters out ground truth boxes that are all zeros.
-    indices = input_utils.get_non_empty_box_indices(boxes)
+    indices = box_utils.get_non_empty_box_indices(boxes)
     boxes = tf.gather(boxes, indices)
     classes = tf.gather(classes, indices)
 
diff --git a/official/vision/detection/utils/box_utils.py b/official/vision/detection/utils/box_utils.py
index a4870c62..6736be16 100644
--- a/official/vision/detection/utils/box_utils.py
+++ b/official/vision/detection/utils/box_utils.py
@@ -523,3 +523,13 @@ def bbox_overlap(boxes, gt_boxes):
     iou = tf.where(padding_mask, -tf.ones_like(iou), iou)
 
     return iou
+
+
+def get_non_empty_box_indices(boxes):
+  """Get indices for non-empty boxes."""
+  # Selects indices if box height or width is 0.
+  height = boxes[:, 2] - boxes[:, 0]
+  width = boxes[:, 3] - boxes[:, 1]
+  indices = tf.where(tf.logical_and(tf.greater(height, 0),
+                                    tf.greater(width, 0)))
+  return indices[:, 0]
diff --git a/official/vision/detection/utils/input_utils.py b/official/vision/detection/utils/input_utils.py
index 2163af78..9598d746 100644
--- a/official/vision/detection/utils/input_utils.py
+++ b/official/vision/detection/utils/input_utils.py
@@ -362,13 +362,3 @@ def resize_and_crop_masks(masks,
 def random_horizontal_flip(image, boxes=None, masks=None):
   """Randomly flips input image and bounding boxes."""
   return preprocessor.random_horizontal_flip(image, boxes, masks)
-
-
-def get_non_empty_box_indices(boxes):
-  """Get indices for non-empty boxes."""
-  # Selects indices if box height or width is 0.
-  height = boxes[:, 2] - boxes[:, 0]
-  width = boxes[:, 3] - boxes[:, 1]
-  indices = tf.where(tf.logical_and(tf.greater(height, 0),
-                                    tf.greater(width, 0)))
-  return indices[:, 0]
