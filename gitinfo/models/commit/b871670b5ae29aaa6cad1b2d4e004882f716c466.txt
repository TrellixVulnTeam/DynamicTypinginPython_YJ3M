commit b871670b5ae29aaa6cad1b2d4e004882f716c466
Author: Neal Wu <neal@nealwu.com>
Date:   Thu Sep 21 11:11:34 2017 -0700

    Latest changes to the official models (#2422)

diff --git a/official/.gitignore b/official/.gitignore
index 8ffec140..2b837bcc 100644
--- a/official/.gitignore
+++ b/official/.gitignore
@@ -1,3 +1,2 @@
-cnn/data
 MNIST-data
 labels.txt
diff --git a/official/mnist/convert_to_records.py b/official/mnist/convert_to_records.py
index cf77063f..6342fa6d 100644
--- a/official/mnist/convert_to_records.py
+++ b/official/mnist/convert_to_records.py
@@ -13,7 +13,12 @@
 # limitations under the License.
 # ==============================================================================
 
-"""Converts MNIST data to TFRecords file format with Example protos."""
+"""Converts MNIST data to TFRecords file format with Example protos.
+
+To read about optimizations that can be applied to the input preprocessing
+stage, see: https://www.tensorflow.org/performance/performance_guide#input_pipeline_optimization.
+"""
+
 from __future__ import absolute_import
 from __future__ import division
 from __future__ import print_function
diff --git a/official/mnist/mnist.py b/official/mnist/mnist.py
index b3b29a38..135e45d5 100644
--- a/official/mnist/mnist.py
+++ b/official/mnist/mnist.py
@@ -92,6 +92,7 @@ def mnist_model(inputs, mode):
   if tf.test.is_built_with_cuda():
     # When running on GPU, transpose the data from channels_last (NHWC) to
     # channels_first (NCHW) to improve performance.
+    # See https://www.tensorflow.org/performance/performance_guide#data_formats
     data_format = 'channels_first'
     inputs = tf.transpose(inputs, [0, 3, 1, 2])
 
diff --git a/official/resnet/cifar10_download_and_extract.py b/official/resnet/cifar10_download_and_extract.py
index 5a4d41bd..9ac42cc1 100644
--- a/official/resnet/cifar10_download_and_extract.py
+++ b/official/resnet/cifar10_download_and_extract.py
@@ -13,7 +13,8 @@
 # limitations under the License.
 # ==============================================================================
 
-"""Converts MNIST data to TFRecords file format with Example protos."""
+"""Downloads and extracts the binary version of the CIFAR-10 dataset."""
+
 from __future__ import absolute_import
 from __future__ import division
 from __future__ import print_function
diff --git a/official/resnet/imagenet.py b/official/resnet/imagenet.py
index 3f4ff062..e8972aa4 100644
--- a/official/resnet/imagenet.py
+++ b/official/resnet/imagenet.py
@@ -27,6 +27,9 @@ For each synset, there are on average 150 images with bounding boxes."
 
 WARNING: Don't use for object detection, in this case all the bounding boxes
 of the image belong to just one class.
+
+To read about optimizations that can be applied to the input preprocessing
+stage, see: https://www.tensorflow.org/performance/performance_guide#input_pipeline_optimization.
 """
 
 from __future__ import absolute_import
diff --git a/official/resnet/resnet_model.py b/official/resnet/resnet_model.py
index 170664d3..0b922e7b 100644
--- a/official/resnet/resnet_model.py
+++ b/official/resnet/resnet_model.py
@@ -41,6 +41,7 @@ _BATCH_NORM_EPSILON = 1e-5
 def batch_norm_relu(inputs, is_training, data_format):
   """Performs a batch normalization followed by a ReLU."""
   # We set fused=True for a significant performance boost.
+  # See https://www.tensorflow.org/performance/performance_guide#common_fused_ops
   inputs = tf.layers.batch_normalization(
       inputs=inputs, axis=1 if data_format == 'channels_first' else 3,
       momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True,
@@ -240,6 +241,7 @@ def cifar10_resnet_v2_generator(resnet_size, num_classes, data_format=None):
     if data_format == 'channels_first':
       # Convert from channels_last (NHWC) to channels_first (NCHW). This
       # provides a large performance boost on GPU.
+      # See https://www.tensorflow.org/performance/performance_guide#data_formats
       inputs = tf.transpose(inputs, [0, 3, 1, 2])
 
     inputs = conv2d_fixed_padding(
@@ -261,14 +263,12 @@ def cifar10_resnet_v2_generator(resnet_size, num_classes, data_format=None):
         data_format=data_format)
 
     inputs = batch_norm_relu(inputs, is_training, data_format)
-
     inputs = tf.layers.average_pooling2d(
         inputs=inputs, pool_size=8, strides=1, padding='VALID',
         data_format=data_format)
     inputs = tf.identity(inputs, 'final_avg_pool')
     inputs = tf.reshape(inputs, [-1, 64])
-    inputs = tf.layers.dense(
-        inputs=inputs, units=num_classes)
+    inputs = tf.layers.dense(inputs=inputs, units=num_classes)
     inputs = tf.identity(inputs, 'final_dense')
     return inputs
 
