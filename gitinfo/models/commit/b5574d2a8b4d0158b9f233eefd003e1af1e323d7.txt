commit b5574d2a8b4d0158b9f233eefd003e1af1e323d7
Author: Christopher Shallue <chris.shallue@gmail.com>
Date:   Thu Mar 15 16:17:37 2018 -0700

    Replace dict.iteritems() with dict.items() for Python3 compatibility

diff --git a/research/astronet/astronet/astro_cnn_model/astro_cnn_model.py b/research/astronet/astronet/astro_cnn_model/astro_cnn_model.py
index 10e19629..12462fff 100644
--- a/research/astronet/astronet/astro_cnn_model/astro_cnn_model.py
+++ b/research/astronet/astronet/astro_cnn_model/astro_cnn_model.py
@@ -130,7 +130,7 @@ class AstroCNNModel(astro_model.AstroModel):
       self.time_series_hidden_layers
     """
     time_series_hidden_layers = {}
-    for name, time_series in self.time_series_features.iteritems():
+    for name, time_series in self.time_series_features.items():
       time_series_hidden_layers[name] = self._build_cnn_layers(
           inputs=time_series,
           hparams=self.hparams.time_series_hidden[name],
diff --git a/research/astronet/astronet/astro_fc_model/astro_fc_model.py b/research/astronet/astronet/astro_fc_model/astro_fc_model.py
index eb2b13dc..d2fa69b6 100644
--- a/research/astronet/astronet/astro_fc_model/astro_fc_model.py
+++ b/research/astronet/astronet/astro_fc_model/astro_fc_model.py
@@ -151,7 +151,7 @@ class AstroFCModel(astro_model.AstroModel):
       self.time_series_hidden_layers
     """
     time_series_hidden_layers = {}
-    for name, time_series in self.time_series_features.iteritems():
+    for name, time_series in self.time_series_features.items():
       time_series_hidden_layers[name] = self._build_local_fc_layers(
           inputs=time_series,
           hparams=self.hparams.time_series_hidden[name],
diff --git a/research/astronet/astronet/data/generate_input_records.py b/research/astronet/astronet/data/generate_input_records.py
index fad2df1f..1c4cfad6 100644
--- a/research/astronet/astronet/data/generate_input_records.py
+++ b/research/astronet/astronet/data/generate_input_records.py
@@ -180,7 +180,7 @@ def _process_tce(tce):
   _set_float_feature(ex, "local_view", local_view)
 
   # Set other columns.
-  for col_name, value in tce.iteritems():
+  for col_name, value in tce.items():
     if np.issubdtype(type(value), np.integer):
       _set_int64_feature(ex, col_name, [value])
     else:
diff --git a/research/astronet/astronet/ops/dataset_ops.py b/research/astronet/astronet/ops/dataset_ops.py
index b80c67f3..b1d663ec 100644
--- a/research/astronet/astronet/ops/dataset_ops.py
+++ b/research/astronet/astronet/ops/dataset_ops.py
@@ -60,7 +60,7 @@ def _recursive_pad_to_batch_size(tensor_or_collection, batch_size):
   if isinstance(tensor_or_collection, dict):
     return {
         name: _recursive_pad_to_batch_size(t, batch_size)
-        for name, t in tensor_or_collection.iteritems()
+        for name, t in tensor_or_collection.items()
     }
 
   if isinstance(tensor_or_collection, collections.Iterable):
@@ -197,7 +197,7 @@ def build_dataset(file_pattern,
     # Set specifications for parsing the features.
     data_fields = {
         feature_name: tf.FixedLenFeature([feature.length], tf.float32)
-        for feature_name, feature in input_config.features.iteritems()
+        for feature_name, feature in input_config.features.items()
     }
     if include_labels:
       data_fields[input_config.label_feature] = tf.FixedLenFeature([],
@@ -217,7 +217,7 @@ def build_dataset(file_pattern,
 
     # Reorganize outputs.
     output = {}
-    for feature_name, value in parsed_features.iteritems():
+    for feature_name, value in parsed_features.items():
       if include_labels and feature_name == input_config.label_feature:
         label_id = label_to_id.lookup(value)
         # Ensure that the label_id is nonnegative to verify a successful hash
diff --git a/research/astronet/astronet/ops/input_ops.py b/research/astronet/astronet/ops/input_ops.py
index 566cc623..03f2c425 100644
--- a/research/astronet/astronet/ops/input_ops.py
+++ b/research/astronet/astronet/ops/input_ops.py
@@ -37,9 +37,9 @@ def prepare_feed_dict(model, features, labels=None, is_training=None):
     feed_dict: A dictionary of input Tensor to numpy array.
   """
   feed_dict = {}
-  for feature, tensor in model.time_series_features.iteritems():
+  for feature, tensor in model.time_series_features.items():
     feed_dict[tensor] = features["time_series_features"][feature]
-  for feature, tensor in model.aux_features.iteritems():
+  for feature, tensor in model.aux_features.items():
     feed_dict[tensor] = features["aux_features"][feature]
 
   if labels is not None:
@@ -65,7 +65,7 @@ def build_feature_placeholders(config):
   """
   batch_size = None  # Batch size will be dynamically specified.
   features = {"time_series_features": {}, "aux_features": {}}
-  for feature_name, feature_spec in config.iteritems():
+  for feature_name, feature_spec in config.items():
     placeholder = tf.placeholder(
         dtype=tf.float32,
         shape=[batch_size, feature_spec.length],
diff --git a/research/astronet/astronet/ops/input_ops_test.py b/research/astronet/astronet/ops/input_ops_test.py
index 60a0ca41..3c8ba777 100644
--- a/research/astronet/astronet/ops/input_ops_test.py
+++ b/research/astronet/astronet/ops/input_ops_test.py
@@ -39,7 +39,7 @@ class InputOpsTest(tf.test.TestCase):
     for feature_type in features:
       actual_shapes[feature_type] = {
           feature: tensor.shape.as_list()
-          for feature, tensor in features[feature_type].iteritems()
+          for feature, tensor in features[feature_type].items()
       }
     self.assertDictEqual(expected_shapes, actual_shapes)
 
diff --git a/research/astronet/astronet/ops/testing.py b/research/astronet/astronet/ops/testing.py
index 1851b2be..682bf5fa 100644
--- a/research/astronet/astronet/ops/testing.py
+++ b/research/astronet/astronet/ops/testing.py
@@ -50,11 +50,11 @@ def fake_features(feature_spec, batch_size):
   features = {}
   features["time_series_features"] = {
       name: np.random.random([batch_size, spec["length"]])
-      for name, spec in feature_spec.iteritems() if spec["is_time_series"]
+      for name, spec in feature_spec.items() if spec["is_time_series"]
   }
   features["aux_features"] = {
       name: np.random.random([batch_size, spec["length"]])
-      for name, spec in feature_spec.iteritems() if not spec["is_time_series"]
+      for name, spec in feature_spec.items() if not spec["is_time_series"]
   }
   return features
 
diff --git a/research/astronet/astronet/util/config_util.py b/research/astronet/astronet/util/config_util.py
index aceecf1c..b77ab497 100644
--- a/research/astronet/astronet/util/config_util.py
+++ b/research/astronet/astronet/util/config_util.py
@@ -110,7 +110,7 @@ def unflatten(flat_config):
     A dictionary nested according to the keys of the input dictionary.
   """
   config = {}
-  for path, value in flat_config.iteritems():
+  for path, value in flat_config.items():
     path = path.split(".")
     final_key = path.pop()
     nested_config = config
diff --git a/research/astronet/astronet/util/configdict.py b/research/astronet/astronet/util/configdict.py
index 1d6d2f5a..eaf609fc 100644
--- a/research/astronet/astronet/util/configdict.py
+++ b/research/astronet/astronet/util/configdict.py
@@ -41,7 +41,7 @@ class ConfigDict(dict):
         parameters.
     """
     if initial_dictionary:
-      for field, value in initial_dictionary.iteritems():
+      for field, value in initial_dictionary.items():
         initial_dictionary[field] = _maybe_convert_dict(value)
     super(ConfigDict, self).__init__(initial_dictionary)
 
