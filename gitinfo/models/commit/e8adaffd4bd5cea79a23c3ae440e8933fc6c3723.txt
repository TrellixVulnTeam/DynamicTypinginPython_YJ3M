commit e8adaffd4bd5cea79a23c3ae440e8933fc6c3723
Author: Nick Johnston <nickj@google.com>
Date:   Mon Jan 23 12:45:00 2017 -0800

    Modify compression tools to be Python3 compatible.

diff --git a/compression/decoder.py b/compression/decoder.py
index b1ee8c0a..143f65f8 100755
--- a/compression/decoder.py
+++ b/compression/decoder.py
@@ -40,26 +40,26 @@ FLAGS = tf.flags.FLAGS
 
 def get_input_tensor_names():
   name_list = ['GruBinarizer/SignBinarizer/Sign:0']
-  for i in xrange(1, 16):
+  for i in range(1, 16):
     name_list.append('GruBinarizer/SignBinarizer/Sign_{}:0'.format(i))
   return name_list
 
 
 def get_output_tensor_names():
-  return ['loop_{0:02d}/add:0'.format(i) for i in xrange(0, 16)]
+  return ['loop_{0:02d}/add:0'.format(i) for i in range(0, 16)]
 
 
 def main(_):
   if (FLAGS.input_codes is None or FLAGS.output_directory is None or
       FLAGS.model is None):
-    print ('\nUsage: python decoder.py --input_codes=output_codes.pkl '
-           '--iteration=15 --output_directory=/tmp/compression_output/ '
-           '--model=residual_gru.pb\n\n')
+    print('\nUsage: python decoder.py --input_codes=output_codes.pkl '
+          '--iteration=15 --output_directory=/tmp/compression_output/ '
+          '--model=residual_gru.pb\n\n')
     return
 
   if FLAGS.iteration < -1 or FLAGS.iteration > 15:
-    print ('\n--iteration must be between 0 and 15 inclusive, or -1 to infer '
-           'from file.\n')
+    print('\n--iteration must be between 0 and 15 inclusive, or -1 to infer '
+          'from file.\n')
     return
   iteration = FLAGS.iteration
 
@@ -67,7 +67,7 @@ def main(_):
     tf.gfile.MkDir(FLAGS.output_directory)
 
   if not tf.gfile.Exists(FLAGS.input_codes):
-    print '\nInput codes not found.\n'
+    print('\nInput codes not found.\n')
     return
 
   contents = ''
diff --git a/compression/encoder.py b/compression/encoder.py
index d902b5c2..1e756298 100755
--- a/compression/encoder.py
+++ b/compression/encoder.py
@@ -42,7 +42,7 @@ FLAGS = tf.flags.FLAGS
 
 def get_output_tensor_names():
   name_list = ['GruBinarizer/SignBinarizer/Sign:0']
-  for i in xrange(1, 16):
+  for i in range(1, 16):
     name_list.append('GruBinarizer/SignBinarizer/Sign_{}:0'.format(i))
   return name_list
 
@@ -50,13 +50,13 @@ def get_output_tensor_names():
 def main(_):
   if (FLAGS.input_image is None or FLAGS.output_codes is None or
       FLAGS.model is None):
-    print ('\nUsage: python encoder.py --input_image=/your/image/here.png '
-           '--output_codes=output_codes.pkl --iteration=15 '
-           '--model=residual_gru.pb\n\n')
+    print('\nUsage: python encoder.py --input_image=/your/image/here.png '
+          '--output_codes=output_codes.pkl --iteration=15 '
+          '--model=residual_gru.pb\n\n')
     return
 
   if FLAGS.iteration < 0 or FLAGS.iteration > 15:
-    print '\n--iteration must be between 0 and 15 inclusive.\n'
+    print('\n--iteration must be between 0 and 15 inclusive.\n')
     return
 
   with tf.gfile.FastGFile(FLAGS.input_image) as input_image:
diff --git a/compression/msssim.py b/compression/msssim.py
index a4ccaa98..da831d5a 100755
--- a/compression/msssim.py
+++ b/compression/msssim.py
@@ -171,7 +171,7 @@ def MultiScaleSSIM(img1, img2, max_val=255, filter_size=11, filter_sigma=1.5,
   im1, im2 = [x.astype(np.float64) for x in [img1, img2]]
   mssim = np.array([])
   mcs = np.array([])
-  for _ in xrange(levels):
+  for _ in range(levels):
     ssim, cs = _SSIMForMultiScale(
         im1, im2, max_val=max_val, filter_size=filter_size,
         filter_sigma=filter_sigma, k1=k1, k2=k2)
@@ -186,16 +186,16 @@ def MultiScaleSSIM(img1, img2, max_val=255, filter_size=11, filter_sigma=1.5,
 
 def main(_):
   if FLAGS.original_image is None or FLAGS.compared_image is None:
-    print ('\nUsage: python msssim.py --original_image=original.png '
-           '--compared_image=distorted.png\n\n')
+    print('\nUsage: python msssim.py --original_image=original.png '
+          '--compared_image=distorted.png\n\n')
     return
 
   if not tf.gfile.Exists(FLAGS.original_image):
-    print '\nCannot find --original_image.\n'
+    print('\nCannot find --original_image.\n')
     return
 
   if not tf.gfile.Exists(FLAGS.compared_image):
-    print '\nCannot find --compared_image.\n'
+    print('\nCannot find --compared_image.\n')
     return
 
   with tf.gfile.FastGFile(FLAGS.original_image) as image_file:
@@ -210,7 +210,7 @@ def main(_):
     img1 = sess.run(decoded_image, feed_dict={input_img: img1_str})
     img2 = sess.run(decoded_image, feed_dict={input_img: img2_str})
 
-  print MultiScaleSSIM(img1, img2, max_val=255)
+  print((MultiScaleSSIM(img1, img2, max_val=255)))
 
 
 if __name__ == '__main__':
