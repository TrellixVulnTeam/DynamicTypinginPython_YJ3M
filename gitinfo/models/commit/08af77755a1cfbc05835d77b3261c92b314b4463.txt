commit 08af77755a1cfbc05835d77b3261c92b314b4463
Author: Qianli Scott Zhu <scottzhu@google.com>
Date:   Fri Mar 23 15:55:13 2018 -0700

    Fix random order problem in benchmark logging. (#3725)

diff --git a/official/utils/logging/logger.py b/official/utils/logging/logger.py
index 1d30c814..87c318e7 100644
--- a/official/utils/logging/logger.py
+++ b/official/utils/logging/logger.py
@@ -52,7 +52,7 @@ class BenchmarkLogger(object):
                          type(eval_results))
       return
     global_step = eval_results[tf.GraphKeys.GLOBAL_STEP]
-    for key in eval_results:
+    for key in sorted(eval_results):
       if key != tf.GraphKeys.GLOBAL_STEP:
         self.log_metric(key, eval_results[key], global_step=global_step)
 
diff --git a/official/utils/logging/logger_test.py b/official/utils/logging/logger_test.py
index 53cc681d..2fb15452 100644
--- a/official/utils/logging/logger_test.py
+++ b/official/utils/logging/logger_test.py
@@ -98,18 +98,18 @@ class BenchmarkLoggerTest(tf.test.TestCase):
     metric_log = os.path.join(log_dir, "metric.log")
     self.assertTrue(tf.gfile.Exists(metric_log))
     with tf.gfile.GFile(metric_log) as f:
-      loss = json.loads(f.readline())
-      self.assertEqual(loss["name"], "loss")
-      self.assertEqual(loss["value"], 0.46237424)
-      self.assertEqual(loss["unit"], None)
-      self.assertEqual(loss["global_step"], 207082)
-
       accuracy = json.loads(f.readline())
       self.assertEqual(accuracy["name"], "accuracy")
       self.assertEqual(accuracy["value"], 0.9285)
       self.assertEqual(accuracy["unit"], None)
       self.assertEqual(accuracy["global_step"], 207082)
 
+      loss = json.loads(f.readline())
+      self.assertEqual(loss["name"], "loss")
+      self.assertEqual(loss["value"], 0.46237424)
+      self.assertEqual(loss["unit"], None)
+      self.assertEqual(loss["global_step"], 207082)
+
   def test_log_evaluation_result_with_invalid_type(self):
     eval_result = "{'loss': 0.46237424, 'global_step': 207082}"
     log_dir = tempfile.mkdtemp(dir=self.get_temp_dir())
