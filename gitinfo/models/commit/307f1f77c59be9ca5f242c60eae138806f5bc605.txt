commit 307f1f77c59be9ca5f242c60eae138806f5bc605
Author: Zhichao Lu <lzc@google.com>
Date:   Mon Mar 5 09:35:20 2018 -0800

    Modify the preprocessor proto and preprocessor_builder to match the arguments of the ssd_random_crop_pad_fixed_aspect_ratio preprocessor method.
    
    PiperOrigin-RevId: 187877915

diff --git a/research/object_detection/builders/preprocessor_builder.py b/research/object_detection/builders/preprocessor_builder.py
index b9ef09c0..10b92532 100644
--- a/research/object_detection/builders/preprocessor_builder.py
+++ b/research/object_detection/builders/preprocessor_builder.py
@@ -256,12 +256,10 @@ def build(preprocessor_step_config):
       area_range = [(op.min_area, op.max_area) for op in config.operations]
       overlap_thresh = [op.overlap_thresh for op in config.operations]
       random_coef = [op.random_coef for op in config.operations]
-      min_padded_size_ratio = [
-          (op.min_padded_size_ratio[0], op.min_padded_size_ratio[1])
-          for op in config.operations]
-      max_padded_size_ratio = [
-          (op.max_padded_size_ratio[0], op.max_padded_size_ratio[1])
-          for op in config.operations]
+      min_padded_size_ratio = [tuple(op.min_padded_size_ratio)
+                               for op in config.operations]
+      max_padded_size_ratio = [tuple(op.max_padded_size_ratio)
+                               for op in config.operations]
       pad_color = [(op.pad_color_r, op.pad_color_g, op.pad_color_b)
                    for op in config.operations]
       return (preprocessor.ssd_random_crop_pad,
@@ -296,30 +294,29 @@ def build(preprocessor_step_config):
 
   if step_type == 'ssd_random_crop_pad_fixed_aspect_ratio':
     config = preprocessor_step_config.ssd_random_crop_pad_fixed_aspect_ratio
+    kwargs = {}
+    aspect_ratio = config.aspect_ratio
+    if aspect_ratio:
+      kwargs['aspect_ratio'] = aspect_ratio
+    min_padded_size_ratio = config.min_padded_size_ratio
+    if min_padded_size_ratio:
+      if len(min_padded_size_ratio) != 2:
+        raise ValueError('min_padded_size_ratio should have 2 elements if set!')
+      kwargs['min_padded_size_ratio'] = tuple(min_padded_size_ratio)
+    max_padded_size_ratio = config.max_padded_size_ratio
+    if max_padded_size_ratio:
+      if len(max_padded_size_ratio) != 2:
+        raise ValueError('max_padded_size_ratio should have 2 elements if set!')
+      kwargs['max_padded_size_ratio'] = tuple(max_padded_size_ratio)
     if config.operations:
-      min_object_covered = [op.min_object_covered for op in config.operations]
-      aspect_ratio_range = [(op.min_aspect_ratio, op.max_aspect_ratio)
-                            for op in config.operations]
-      area_range = [(op.min_area, op.max_area) for op in config.operations]
-      overlap_thresh = [op.overlap_thresh for op in config.operations]
-      random_coef = [op.random_coef for op in config.operations]
-      min_padded_size_ratio = [
-          (op.min_padded_size_ratio[0], op.min_padded_size_ratio[1])
-          for op in config.operations]
-      max_padded_size_ratio = [
-          (op.max_padded_size_ratio[0], op.max_padded_size_ratio[1])
-          for op in config.operations]
-      return (preprocessor.ssd_random_crop_pad_fixed_aspect_ratio,
-              {
-                  'min_object_covered': min_object_covered,
-                  'aspect_ratio': config.aspect_ratio,
-                  'aspect_ratio_range': aspect_ratio_range,
-                  'area_range': area_range,
-                  'overlap_thresh': overlap_thresh,
-                  'random_coef': random_coef,
-                  'min_padded_size_ratio': min_padded_size_ratio,
-                  'max_padded_size_ratio': max_padded_size_ratio,
-              })
-    return (preprocessor.ssd_random_crop_pad_fixed_aspect_ratio, {})
+      kwargs['min_object_covered'] = [op.min_object_covered
+                                      for op in config.operations]
+      kwargs['aspect_ratio_range'] = [(op.min_aspect_ratio, op.max_aspect_ratio)
+                                      for op in config.operations]
+      kwargs['area_range'] = [(op.min_area, op.max_area)
+                              for op in config.operations]
+      kwargs['overlap_thresh'] = [op.overlap_thresh for op in config.operations]
+      kwargs['random_coef'] = [op.random_coef for op in config.operations]
+    return (preprocessor.ssd_random_crop_pad_fixed_aspect_ratio, kwargs)
 
   raise ValueError('Unknown preprocessing step.')
diff --git a/research/object_detection/builders/preprocessor_builder_test.py b/research/object_detection/builders/preprocessor_builder_test.py
index f03e3b28..9e5d8de8 100644
--- a/research/object_detection/builders/preprocessor_builder_test.py
+++ b/research/object_detection/builders/preprocessor_builder_test.py
@@ -532,8 +532,6 @@ class PreprocessorBuilderTest(tf.test.TestCase):
         max_area: 1.0
         overlap_thresh: 0.0
         random_coef: 0.375
-        min_padded_size_ratio: [1.0, 1.0]
-        max_padded_size_ratio: [2.0, 2.0]
       }
       operations {
         min_object_covered: 0.25
@@ -543,10 +541,10 @@ class PreprocessorBuilderTest(tf.test.TestCase):
         max_area: 1.0
         overlap_thresh: 0.25
         random_coef: 0.375
-        min_padded_size_ratio: [1.0, 1.0]
-        max_padded_size_ratio: [2.0, 2.0]
       }
       aspect_ratio: 0.875
+      min_padded_size_ratio: [1.0, 1.0]
+      max_padded_size_ratio: [2.0, 2.0]
     }
     """
     preprocessor_proto = preprocessor_pb2.PreprocessingStep()
@@ -560,8 +558,8 @@ class PreprocessorBuilderTest(tf.test.TestCase):
                             'area_range': [(0.5, 1.0), (0.5, 1.0)],
                             'overlap_thresh': [0.0, 0.25],
                             'random_coef': [0.375, 0.375],
-                            'min_padded_size_ratio': [(1.0, 1.0), (1.0, 1.0)],
-                            'max_padded_size_ratio': [(2.0, 2.0), (2.0, 2.0)]})
+                            'min_padded_size_ratio': (1.0, 1.0),
+                            'max_padded_size_ratio': (2.0, 2.0)})
 
 
 if __name__ == '__main__':
diff --git a/research/object_detection/protos/preprocessor.proto b/research/object_detection/protos/preprocessor.proto
index 606377c9..eb16d982 100644
--- a/research/object_detection/protos/preprocessor.proto
+++ b/research/object_detection/protos/preprocessor.proto
@@ -388,14 +388,6 @@ message SSDRandomCropPadFixedAspectRatioOperation {
 
   // Probability a crop operation is skipped.
   optional float random_coef = 7;
-
-  // Min ratio of padded image height and width to the input image's height and
-  // width. Two entries per operation.
-  repeated float min_padded_size_ratio = 8;
-
-  // Max ratio of padded image height and width to the input image's height and
-  // width. Two entries per operation.
-  repeated float max_padded_size_ratio = 9;
 }
 
 // Randomly crops and pads an image to a fixed aspect ratio according to:
@@ -408,4 +400,12 @@ message SSDRandomCropPadFixedAspectRatio {
 
   // Aspect ratio to pad to. This value is used for all crop and pad operations.
   optional float aspect_ratio = 2 [default=1.0];
+
+  // Min ratio of padded image height and width to the input image's height and
+  // width. Two entries per operation.
+  repeated float min_padded_size_ratio = 3;
+
+  // Max ratio of padded image height and width to the input image's height and
+  // width. Two entries per operation.
+  repeated float max_padded_size_ratio = 4;
 }
