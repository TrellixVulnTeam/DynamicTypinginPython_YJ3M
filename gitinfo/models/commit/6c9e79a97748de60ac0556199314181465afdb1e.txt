commit 6c9e79a97748de60ac0556199314181465afdb1e
Author: Mark Daoust <markdaoust@google.com>
Date:   Mon May 14 11:30:34 2018 -0700

    typos

diff --git a/samples/core/get_started/eager.ipynb b/samples/core/get_started/eager.ipynb
index c51a36d1..2c9633e0 100644
--- a/samples/core/get_started/eager.ipynb
+++ b/samples/core/get_started/eager.ipynb
@@ -220,7 +220,7 @@
         "\n",
         "### Download the dataset\n",
         "\n",
-        "Download the training dataset file using the [tf.keras.utils.get_file](https://www.tensorflow.org/api_docs/python/tf/keras/utils/get_file) function. This returns the file path of the downloaded file."
+        "Download the training dataset file using the [`tf.keras.utils.get_file`](https://www.tensorflow.org/api_docs/python/tf/keras/utils/get_file) function. This returns the file path of the downloaded file."
       ]
     },
     {
@@ -340,7 +340,7 @@
         "TensorFlow's [Dataset API](https://www.tensorflow.org/programmers_guide/datasets) handles many common cases for feeding data into a model. This is a high-level API for reading data and transforming it into a form used for training. See the [Datasets Quick Start guide](https://www.tensorflow.org/get_started/datasets_quickstart) for more information.\n",
         "\n",
         "\n",
-        "Since our dataset is a CSV-formatted text file, we'll use the the [`make_csv_dataset`](https://www.tensorflow.org/api_docs/python/tf/contrib/data/make_csv_dataset) function to easily parse the data into a suitable format. This function is meant to generate fata for training models so the default behavior is to shuffle the data (`shuffle=True, shuffle_buffer_size=10000`), and repeat the dataset forever (`num_epochs=None`). Note the [batch size](https://developers.google.com/machine-learning/glossary/#batch_size) parameter."
+        "Since our dataset is a CSV-formatted text file, we'll use the the [`make_csv_dataset`](https://www.tensorflow.org/api_docs/python/tf/contrib/data/make_csv_dataset) function to easily parse the data into a suitable format. This function is meant to generate data for training models so the default behavior is to shuffle the data (`shuffle=True, shuffle_buffer_size=10000`), and repeat the dataset forever (`num_epochs=None`). Also note the [`batch_size`](https://developers.google.com/machine-learning/glossary/#batch_size) parameter."
       ]
     },
     {
@@ -368,7 +368,7 @@
       },
       "cell_type": "markdown",
       "source": [
-        "This function returns a `tf.data.Dataset` of `(features, label)` pairs, where `features` is a `{'column_name': value}` dictionary.\n",
+        "This function returns a `tf.data.Dataset` of `(features, label)` pairs, where `features` is a `{'feature_name': value}` dictionary.\n",
         "\n",
         "With eager execution enabled, these `Dataset` objects are iterable. Let's look at a batch of features:"
       ]
@@ -397,7 +397,7 @@
       },
       "cell_type": "markdown",
       "source": [
-        "To simplify the model building, let's repackage the features dictionary into an array with whape ``(batch_size,num_features)`.\n",
+        "To simplify the model building, let's repackage the features dictionary into an array with shape ``(batch_size,num_features)`.\n",
         "\n",
         "To do this we'll write a simple function using the [`tf.stack`](https://www.tensorflow.org/api_docs/python/tf/data/dataset/map) method to pack the features into a single array. Then we'll use the [`tf.data.Dataset.map`](https://www.tensorflow.org/api_docs/python/tf/data/dataset/map) method to apply this function to each `(features,label)` pair in the dataset. :\n"
       ]
@@ -427,7 +427,7 @@
       },
       "cell_type": "markdown",
       "source": [
-        "The features of this dataset arrays with shape `(batch_size, num_features)`. Let's look at the first 10 examples:"
+        "The features element of the `Dataset` are now arrays with shape `(batch_size, num_features)`. Let's look at the first few examples:"
       ]
     },
     {
@@ -440,7 +440,7 @@
       "source": [
         "features,labels = next(iter(train_dataset))\n",
         "  \n",
-        "features[:10]"
+        "features[:5]"
       ],
       "execution_count": 0,
       "outputs": []
@@ -486,9 +486,9 @@
       "source": [
         "### Create a model using Keras\n",
         "\n",
-        "The TensorFlow [tf.keras](https://www.tensorflow.org/api_docs/python/tf/keras) API is the preferred way to create models and layers. This makes it easy to build models and experiment while Keras handles the complexity of connecting everything together.\n",
+        "The TensorFlow [`tf.keras`](https://www.tensorflow.org/api_docs/python/tf/keras) API is the preferred way to create models and layers. This makes it easy to build models and experiment while Keras handles the complexity of connecting everything together.\n",
         "\n",
-        "The [tf.keras.Sequential](https://www.tensorflow.org/api_docs/python/tf/keras/Sequential) model is a linear stack of layers. Its constructor takes a list of layer instances, in this case, two [Dense](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dense) layers with 10 nodes each, and an output layer with 3 nodes representing our label predictions. The first layer's `input_shape` parameter corresponds to the number of features from the dataset, and is required."
+        "The [`tf.keras.Sequential`](https://www.tensorflow.org/api_docs/python/tf/keras/Sequential) model is a linear stack of layers. Its constructor takes a list of layer instances, in this case, two [Dense](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dense) layers with 10 nodes each, and an output layer with 3 nodes representing our label predictions. The first layer's `input_shape` parameter corresponds to the number of features from the dataset, and is required."
       ]
     },
     {
@@ -515,7 +515,7 @@
       },
       "cell_type": "markdown",
       "source": [
-        "The *[activation function](https://developers.google.com/machine-learning/crash-course/glossary#activation_function)* determines the output shape of each node. These non-linearities are important as without them the model would be equivalent to a single layer. There are many [available activations](https://www.tensorflow.org/api_docs/python/tf/keras/activations), but [ReLU](https://developers.google.com/machine-learning/crash-course/glossary#ReLU) is common for hidden layers.\n",
+        "The *[activation function](https://developers.google.com/machine-learning/crash-course/glossary#activation_function)* determines the output shape of each node in the layer. These non-linearities are important as without them the model would be equivalent to a single layer. There are many [available activations](https://www.tensorflow.org/api_docs/python/tf/keras/activations), but [ReLU](https://developers.google.com/machine-learning/crash-course/glossary#ReLU) is common for hidden layers.\n",
         "\n",
         "The ideal number of hidden layers and neurons depends on the problem and the dataset. Like many aspects of machine learning, picking the best shape of the neural network requires a mixture of knowledge and experimentation. As a rule of thumb, increasing the number of hidden layers and neurons typically creates a more powerful model, which requires more data to train effectively."
       ]
@@ -780,7 +780,6 @@
         "train_accuracy_results = []\n",
         "\n",
         "num_epochs = 201\n",
-        "global_step=tf.train.get_or_create_global_step()\n",
         "\n",
         "for epoch in range(num_epochs):\n",
         "  epoch_loss_avg = tfe.metrics.Mean()\n",
@@ -1034,4 +1033,4 @@
       ]
     }
   ]
-}
\ No newline at end of file
+}
