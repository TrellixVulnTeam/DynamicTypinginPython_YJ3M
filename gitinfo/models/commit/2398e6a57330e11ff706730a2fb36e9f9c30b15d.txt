commit 2398e6a57330e11ff706730a2fb36e9f9c30b15d
Author: Zhichao Lu <lzc@google.com>
Date:   Mon Mar 26 13:58:29 2018 -0700

    Tfmini requires positive values for the dimensions. Therefore, we need to test for no paddings in both width and height direction.
    
    PiperOrigin-RevId: 190520529

diff --git a/research/object_detection/utils/ops.py b/research/object_detection/utils/ops.py
index f4066757..fb27fe50 100644
--- a/research/object_detection/utils/ops.py
+++ b/research/object_detection/utils/ops.py
@@ -180,26 +180,24 @@ def pad_to_multiple(tensor, multiple):
     padded_tensor_width = int(
         math.ceil(float(tensor_width) / multiple) * multiple)
 
-  if (padded_tensor_height == tensor_height and
-      padded_tensor_width == tensor_width):
-    return tensor
-
   if tensor_depth is None:
     tensor_depth = tf.shape(tensor)[3]
 
   # Use tf.concat instead of tf.pad to preserve static shape
-  height_pad = tf.zeros([
-      batch_size, padded_tensor_height - tensor_height, tensor_width,
-      tensor_depth
-  ])
-  padded_tensor = tf.concat([tensor, height_pad], 1)
-  width_pad = tf.zeros([
-      batch_size, padded_tensor_height, padded_tensor_width - tensor_width,
-      tensor_depth
-  ])
-  padded_tensor = tf.concat([padded_tensor, width_pad], 2)
-
-  return padded_tensor
+  if padded_tensor_height != tensor_height:
+    height_pad = tf.zeros([
+        batch_size, padded_tensor_height - tensor_height, tensor_width,
+        tensor_depth
+    ])
+    tensor = tf.concat([tensor, height_pad], 1)
+  if padded_tensor_width != tensor_width:
+    width_pad = tf.zeros([
+        batch_size, padded_tensor_height, padded_tensor_width - tensor_width,
+        tensor_depth
+    ])
+    tensor = tf.concat([tensor, width_pad], 2)
+
+  return tensor
 
 
 def padded_one_hot_encoding(indices, depth, left_pad):
diff --git a/research/object_detection/utils/ops_test.py b/research/object_detection/utils/ops_test.py
index 00653af0..a236bb40 100644
--- a/research/object_detection/utils/ops_test.py
+++ b/research/object_detection/utils/ops_test.py
@@ -136,6 +136,13 @@ class OpsTestPadToMultiple(tf.test.TestCase):
       padded_tensor_out = sess.run(padded_tensor)
     self.assertEqual((1, 2, 2, 1), padded_tensor_out.shape)
 
+  def test_non_square_padding(self):
+    tensor = tf.constant([[[[0.], [0.]]]])
+    padded_tensor = ops.pad_to_multiple(tensor, 2)
+    with self.test_session() as sess:
+      padded_tensor_out = sess.run(padded_tensor)
+    self.assertEqual((1, 2, 2, 1), padded_tensor_out.shape)
+
   def test_padding(self):
     tensor = tf.constant([[[[0.], [0.]], [[0.], [0.]]]])
     padded_tensor = ops.pad_to_multiple(tensor, 4)
