commit 2e539758047fd52e13454ca0998b9c5416296f16
Author: Zhichao Lu <lzc@google.com>
Date:   Sun Feb 11 14:05:52 2018 -0800

    Minor changes to make object_detection compatible with Python 3.
    
    PiperOrigin-RevId: 185315101

diff --git a/research/object_detection/builders/anchor_generator_builder_test.py b/research/object_detection/builders/anchor_generator_builder_test.py
index 5112c028..90ed0a57 100644
--- a/research/object_detection/builders/anchor_generator_builder_test.py
+++ b/research/object_detection/builders/anchor_generator_builder_test.py
@@ -266,7 +266,6 @@ class AnchorGeneratorBuilderTest(tf.test.TestCase):
     self.assertTrue(isinstance(anchor_generator_object,
                                multiscale_grid_anchor_generator.
                                MultiscaleGridAnchorGenerator))
-    print anchor_generator_object._anchor_grid_info
     for level, anchor_grid_info in zip(
         range(3, 8), anchor_generator_object._anchor_grid_info):
       self.assertEqual(set(anchor_grid_info.keys()), set(['level', 'info']))
diff --git a/research/object_detection/utils/np_box_list_ops.py b/research/object_detection/utils/np_box_list_ops.py
index 0f451671..15048fc4 100644
--- a/research/object_detection/utils/np_box_list_ops.py
+++ b/research/object_detection/utils/np_box_list_ops.py
@@ -214,7 +214,7 @@ def non_max_suppression(boxlist,
   is_index_valid = np.full(num_boxes, 1, dtype=bool)
   selected_indices = []
   num_output = 0
-  for i in xrange(num_boxes):
+  for i in range(num_boxes):
     if num_output < max_output_size:
       if is_index_valid[i]:
         num_output += 1
diff --git a/research/object_detection/utils/np_box_mask_list_ops.py b/research/object_detection/utils/np_box_mask_list_ops.py
index a50a1194..1fa9495c 100644
--- a/research/object_detection/utils/np_box_mask_list_ops.py
+++ b/research/object_detection/utils/np_box_mask_list_ops.py
@@ -217,7 +217,7 @@ def non_max_suppression(box_mask_list,
   is_index_valid = np.full(num_masks, 1, dtype=bool)
   selected_indices = []
   num_output = 0
-  for i in xrange(num_masks):
+  for i in range(num_masks):
     if num_output < max_output_size:
       if is_index_valid[i]:
         num_output += 1
diff --git a/research/object_detection/utils/visualization_utils_test.py b/research/object_detection/utils/visualization_utils_test.py
index dffe1cd6..cab32720 100644
--- a/research/object_detection/utils/visualization_utils_test.py
+++ b/research/object_detection/utils/visualization_utils_test.py
@@ -19,7 +19,7 @@ Testing with visualization in the following colab:
 https://drive.google.com/a/google.com/file/d/0B5HnKS_hMsNARERpU3MtU3I5RFE/view?usp=sharing
 
 """
-
+import logging
 import os
 
 import numpy as np
@@ -145,7 +145,7 @@ class VisualizationUtilsTest(tf.test.TestCase):
         for i in range(images_with_boxes_np.shape[0]):
           img_name = 'image_' + str(i) + '.png'
           output_file = os.path.join(self.get_temp_dir(), img_name)
-          print 'Writing output image %d to %s' % (i, output_file)
+          logging.info('Writing output image %d to %s', i, output_file)
           image_pil = Image.fromarray(images_with_boxes_np[i, ...])
           image_pil.save(output_file)
 
