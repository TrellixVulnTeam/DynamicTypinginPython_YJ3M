commit 9b287eafde047fd4a1a0bffbd4e1ee32f77942fd
Author: Chris Shallue <shallue@google.com>
Date:   Thu Nov 29 16:41:45 2018 -0800

    Rename light_curve_util/ to light_curve/ and light_curve/cc/ to light_curve/fast_ops/.
    
    Also fix a few lint errors in unit tests.
    
    PiperOrigin-RevId: 223434695

diff --git a/research/astronet/light_curve_util/BUILD b/research/astronet/light_curve/BUILD
similarity index 100%
rename from research/astronet/light_curve_util/BUILD
rename to research/astronet/light_curve/BUILD
diff --git a/research/astronet/light_curve_util/__init__.py b/research/astronet/light_curve/__init__.py
similarity index 100%
rename from research/astronet/light_curve_util/__init__.py
rename to research/astronet/light_curve/__init__.py
diff --git a/research/astronet/light_curve_util/cc/BUILD b/research/astronet/light_curve/fast_ops/BUILD
similarity index 100%
rename from research/astronet/light_curve_util/cc/BUILD
rename to research/astronet/light_curve/fast_ops/BUILD
diff --git a/research/astronet/light_curve_util/cc/median.h b/research/astronet/light_curve/fast_ops/median.h
similarity index 93%
rename from research/astronet/light_curve_util/cc/median.h
rename to research/astronet/light_curve/fast_ops/median.h
index 8ab6e4f0..389b4a86 100644
--- a/research/astronet/light_curve_util/cc/median.h
+++ b/research/astronet/light_curve/fast_ops/median.h
@@ -12,8 +12,8 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
 
-#ifndef TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_UTIL_CC_MEDIAN_H_
-#define TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_UTIL_CC_MEDIAN_H_
+#ifndef TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_FAST_OPS_MEDIAN_H_
+#define TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_FAST_OPS_MEDIAN_H_
 
 #include <algorithm>
 #include <iterator>
@@ -70,4 +70,4 @@ typename std::iterator_traits<ForwardIterator>::value_type Median(
 
 }  // namespace astronet
 
-#endif  // TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_UTIL_CC_MEDIAN_H_
+#endif  // TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_FAST_OPS_MEDIAN_H_
diff --git a/research/astronet/light_curve_util/cc/median_filter.cc b/research/astronet/light_curve/fast_ops/median_filter.cc
similarity index 98%
rename from research/astronet/light_curve_util/cc/median_filter.cc
rename to research/astronet/light_curve/fast_ops/median_filter.cc
index 2ceb9e13..dd9869f1 100644
--- a/research/astronet/light_curve_util/cc/median_filter.cc
+++ b/research/astronet/light_curve/fast_ops/median_filter.cc
@@ -12,10 +12,10 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
 
-#include "light_curve_util/cc/median_filter.h"
+#include "light_curve/fast_ops/median_filter.h"
 
 #include "absl/strings/substitute.h"
-#include "light_curve_util/cc/median.h"
+#include "light_curve/fast_ops/median.h"
 
 using absl::Substitute;
 using std::min;
diff --git a/research/astronet/light_curve_util/cc/median_filter.h b/research/astronet/light_curve/fast_ops/median_filter.h
similarity index 91%
rename from research/astronet/light_curve_util/cc/median_filter.h
rename to research/astronet/light_curve/fast_ops/median_filter.h
index 883d66e1..dd086b12 100644
--- a/research/astronet/light_curve_util/cc/median_filter.h
+++ b/research/astronet/light_curve/fast_ops/median_filter.h
@@ -12,8 +12,8 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
 
-#ifndef TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_UTIL_CC_MEDIAN_FILTER_H_
-#define TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_UTIL_CC_MEDIAN_FILTER_H_
+#ifndef TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_FAST_OPS_MEDIAN_FILTER_H_
+#define TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_FAST_OPS_MEDIAN_FILTER_H_
 
 #include <iostream>
 
@@ -56,4 +56,4 @@ bool MedianFilter(const std::vector<double>& x, const std::vector<double>& y,
 
 }  // namespace astronet
 
-#endif  // TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_UTIL_CC_MEDIAN_FILTER_H_
+#endif  // TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_FAST_OPS_MEDIAN_FILTER_H_
diff --git a/research/astronet/light_curve_util/cc/median_filter_test.cc b/research/astronet/light_curve/fast_ops/median_filter_test.cc
similarity index 98%
rename from research/astronet/light_curve_util/cc/median_filter_test.cc
rename to research/astronet/light_curve/fast_ops/median_filter_test.cc
index 026070c8..41d41f9e 100644
--- a/research/astronet/light_curve_util/cc/median_filter_test.cc
+++ b/research/astronet/light_curve/fast_ops/median_filter_test.cc
@@ -12,11 +12,11 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
 
-#include "light_curve_util/cc/median_filter.h"
+#include "light_curve/fast_ops/median_filter.h"
 
 #include "gmock/gmock.h"
 #include "gtest/gtest.h"
-#include "light_curve_util/cc/test_util.h"
+#include "light_curve/fast_ops/test_util.h"
 
 using std::vector;
 using testing::Pointwise;
diff --git a/research/astronet/light_curve_util/cc/median_test.cc b/research/astronet/light_curve/fast_ops/median_test.cc
similarity index 98%
rename from research/astronet/light_curve_util/cc/median_test.cc
rename to research/astronet/light_curve/fast_ops/median_test.cc
index 5492147e..85875f4e 100644
--- a/research/astronet/light_curve_util/cc/median_test.cc
+++ b/research/astronet/light_curve/fast_ops/median_test.cc
@@ -12,7 +12,7 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
 
-#include "light_curve_util/cc/median.h"
+#include "light_curve/fast_ops/median.h"
 
 #include "gmock/gmock.h"
 #include "gtest/gtest.h"
diff --git a/research/astronet/light_curve_util/cc/normalize.cc b/research/astronet/light_curve/fast_ops/normalize.cc
similarity index 95%
rename from research/astronet/light_curve_util/cc/normalize.cc
rename to research/astronet/light_curve/fast_ops/normalize.cc
index 0b43a52f..63b26630 100644
--- a/research/astronet/light_curve_util/cc/normalize.cc
+++ b/research/astronet/light_curve/fast_ops/normalize.cc
@@ -12,12 +12,12 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
 
-#include "light_curve_util/cc/normalize.h"
+#include "light_curve/fast_ops/normalize.h"
 
 #include <algorithm>
 
 #include "absl/strings/substitute.h"
-#include "light_curve_util/cc/median.h"
+#include "light_curve/fast_ops/median.h"
 
 using absl::Substitute;
 using std::vector;
diff --git a/research/astronet/light_curve_util/cc/normalize.h b/research/astronet/light_curve/fast_ops/normalize.h
similarity index 87%
rename from research/astronet/light_curve_util/cc/normalize.h
rename to research/astronet/light_curve/fast_ops/normalize.h
index ee68b2f0..3803584b 100644
--- a/research/astronet/light_curve_util/cc/normalize.h
+++ b/research/astronet/light_curve/fast_ops/normalize.h
@@ -12,8 +12,8 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
 
-#ifndef TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_UTIL_CC_NORMALIZE_H_
-#define TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_UTIL_CC_NORMALIZE_H_
+#ifndef TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_FAST_OPS_NORMALIZE_H_
+#define TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_FAST_OPS_NORMALIZE_H_
 
 #include <iostream>
 
@@ -41,4 +41,4 @@ bool NormalizeMedianAndMinimum(const std::vector<double>& x,
 
 }  // namespace astronet
 
-#endif  // TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_UTIL_CC_NORMALIZE_H_
+#endif  // TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_FAST_OPS_NORMALIZE_H_
diff --git a/research/astronet/light_curve_util/cc/normalize_test.cc b/research/astronet/light_curve/fast_ops/normalize_test.cc
similarity index 97%
rename from research/astronet/light_curve_util/cc/normalize_test.cc
rename to research/astronet/light_curve/fast_ops/normalize_test.cc
index 46175866..ba442485 100644
--- a/research/astronet/light_curve_util/cc/normalize_test.cc
+++ b/research/astronet/light_curve/fast_ops/normalize_test.cc
@@ -12,11 +12,11 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
 
-#include "light_curve_util/cc/normalize.h"
+#include "light_curve/fast_ops/normalize.h"
 
 #include "gmock/gmock.h"
 #include "gtest/gtest.h"
-#include "light_curve_util/cc/test_util.h"
+#include "light_curve/fast_ops/test_util.h"
 
 using std::vector;
 using testing::Pointwise;
diff --git a/research/astronet/light_curve_util/cc/phase_fold.cc b/research/astronet/light_curve/fast_ops/phase_fold.cc
similarity index 98%
rename from research/astronet/light_curve_util/cc/phase_fold.cc
rename to research/astronet/light_curve/fast_ops/phase_fold.cc
index b29ad79c..6cd536ee 100644
--- a/research/astronet/light_curve_util/cc/phase_fold.cc
+++ b/research/astronet/light_curve/fast_ops/phase_fold.cc
@@ -12,7 +12,7 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
 
-#include "light_curve_util/cc/phase_fold.h"
+#include "light_curve/fast_ops/phase_fold.h"
 
 #include <math.h>
 #include <algorithm>
diff --git a/research/astronet/light_curve_util/cc/phase_fold.h b/research/astronet/light_curve/fast_ops/phase_fold.h
similarity index 92%
rename from research/astronet/light_curve_util/cc/phase_fold.h
rename to research/astronet/light_curve/fast_ops/phase_fold.h
index d92c666a..eac5f850 100644
--- a/research/astronet/light_curve_util/cc/phase_fold.h
+++ b/research/astronet/light_curve/fast_ops/phase_fold.h
@@ -12,8 +12,8 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
 
-#ifndef TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_UTIL_CC_PHASE_FOLD_H_
-#define TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_UTIL_CC_PHASE_FOLD_H_
+#ifndef TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_FAST_OPS_PHASE_FOLD_H_
+#define TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_FAST_OPS_PHASE_FOLD_H_
 
 #include <iostream>
 
@@ -65,4 +65,4 @@ bool PhaseFoldAndSortLightCurve(std::vector<double> time,
 
 }  // namespace astronet
 
-#endif  // TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_UTIL_CC_PHASE_FOLD_H_
+#endif  // TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_FAST_OPS_PHASE_FOLD_H_
diff --git a/research/astronet/light_curve_util/cc/phase_fold_test.cc b/research/astronet/light_curve/fast_ops/phase_fold_test.cc
similarity index 98%
rename from research/astronet/light_curve_util/cc/phase_fold_test.cc
rename to research/astronet/light_curve/fast_ops/phase_fold_test.cc
index 0c6df544..5693406e 100644
--- a/research/astronet/light_curve_util/cc/phase_fold_test.cc
+++ b/research/astronet/light_curve/fast_ops/phase_fold_test.cc
@@ -12,11 +12,11 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
 
-#include "light_curve_util/cc/phase_fold.h"
+#include "light_curve/fast_ops/phase_fold.h"
 
 #include "gmock/gmock.h"
 #include "gtest/gtest.h"
-#include "light_curve_util/cc/test_util.h"
+#include "light_curve/fast_ops/test_util.h"
 
 using std::vector;
 using testing::Pointwise;
diff --git a/research/astronet/light_curve_util/cc/python/median_filter.clif b/research/astronet/light_curve/fast_ops/python/median_filter.clif
similarity index 89%
rename from research/astronet/light_curve_util/cc/python/median_filter.clif
rename to research/astronet/light_curve/fast_ops/python/median_filter.clif
index a11089d7..1569b4b4 100644
--- a/research/astronet/light_curve_util/cc/python/median_filter.clif
+++ b/research/astronet/light_curve/fast_ops/python/median_filter.clif
@@ -16,9 +16,9 @@
 #
 # See https://github.com/google/clif
 
-from light_curve_util.cc.python.postproc import ValueErrorOnFalse
+from light_curve.fast_ops.python.postproc import ValueErrorOnFalse
 
-from "third_party/tensorflow_models/astronet/light_curve_util/cc/median_filter.h":
+from "third_party/tensorflow_models/astronet/light_curve/fast_ops/median_filter.h":
   namespace `astronet`:
     def `MedianFilter` as median_filter (x: list<float>,
                                          y: list<float>,
diff --git a/research/astronet/light_curve_util/cc/python/median_filter_test.py b/research/astronet/light_curve/fast_ops/python/median_filter_test.py
similarity index 96%
rename from research/astronet/light_curve_util/cc/python/median_filter_test.py
rename to research/astronet/light_curve/fast_ops/python/median_filter_test.py
index 2ccd5d1d..491af9e6 100644
--- a/research/astronet/light_curve_util/cc/python/median_filter_test.py
+++ b/research/astronet/light_curve/fast_ops/python/median_filter_test.py
@@ -21,7 +21,7 @@ from __future__ import print_function
 from absl.testing import absltest
 import numpy as np
 
-from light_curve_util.cc.python import median_filter
+from light_curve.fast_ops.python import median_filter
 
 
 class MedianFilterTest(absltest.TestCase):
diff --git a/research/astronet/light_curve_util/cc/python/phase_fold.clif b/research/astronet/light_curve/fast_ops/python/phase_fold.clif
similarity index 89%
rename from research/astronet/light_curve_util/cc/python/phase_fold.clif
rename to research/astronet/light_curve/fast_ops/python/phase_fold.clif
index f5660165..af44e1d8 100644
--- a/research/astronet/light_curve_util/cc/python/phase_fold.clif
+++ b/research/astronet/light_curve/fast_ops/python/phase_fold.clif
@@ -16,9 +16,9 @@
 #
 # See https://github.com/google/clif
 
-from light_curve_util.cc.python.postproc import ValueErrorOnFalse
+from light_curve.fast_ops.python.postproc import ValueErrorOnFalse
 
-from "third_party/tensorflow_models/astronet/light_curve_util/cc/phase_fold.h":
+from "third_party/tensorflow_models/astronet/light_curve/fast_ops/phase_fold.h":
   namespace `astronet`:
     def `PhaseFoldTime` as phase_fold_time (time: list<float>,
                                             period: float,
diff --git a/research/astronet/light_curve_util/cc/python/phase_fold_test.py b/research/astronet/light_curve/fast_ops/python/phase_fold_test.py
similarity index 97%
rename from research/astronet/light_curve_util/cc/python/phase_fold_test.py
rename to research/astronet/light_curve/fast_ops/python/phase_fold_test.py
index 73a054da..a0f29d95 100644
--- a/research/astronet/light_curve_util/cc/python/phase_fold_test.py
+++ b/research/astronet/light_curve/fast_ops/python/phase_fold_test.py
@@ -21,7 +21,7 @@ from __future__ import print_function
 from absl.testing import absltest
 import numpy as np
 
-from light_curve_util.cc.python import phase_fold
+from light_curve.fast_ops.python import phase_fold
 
 
 class PhaseFoldTimeTest(absltest.TestCase):
diff --git a/research/astronet/light_curve_util/cc/python/postproc.py b/research/astronet/light_curve/fast_ops/python/postproc.py
similarity index 97%
rename from research/astronet/light_curve_util/cc/python/postproc.py
rename to research/astronet/light_curve/fast_ops/python/postproc.py
index fb2f5313..70afefb3 100644
--- a/research/astronet/light_curve_util/cc/python/postproc.py
+++ b/research/astronet/light_curve/fast_ops/python/postproc.py
@@ -12,7 +12,7 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-"""Postprocessing utility function for CLIF."""
+"""Postprocessing utility functions for CLIF."""
 
 
 # CLIF postprocessor for a C++ function with signature:
diff --git a/research/astronet/light_curve_util/cc/python/view_generator.clif b/research/astronet/light_curve/fast_ops/python/view_generator.clif
similarity index 86%
rename from research/astronet/light_curve_util/cc/python/view_generator.clif
rename to research/astronet/light_curve/fast_ops/python/view_generator.clif
index 0b65f4c3..1f756762 100644
--- a/research/astronet/light_curve_util/cc/python/view_generator.clif
+++ b/research/astronet/light_curve/fast_ops/python/view_generator.clif
@@ -16,10 +16,10 @@
 #
 # See https://github.com/google/clif
 
-from light_curve_util.cc.python.postproc import ValueErrorOnFalse
-from light_curve_util.cc.python.postproc import ValueErrorOnNull
+from light_curve.fast_ops.python.postproc import ValueErrorOnFalse
+from light_curve.fast_ops.python.postproc import ValueErrorOnNull
 
-from "third_party/tensorflow_models/astronet/light_curve_util/cc/view_generator.h":
+from "third_party/tensorflow_models/astronet/light_curve/fast_ops/view_generator.h":
   namespace `astronet`:
     class ViewGenerator:
       def `GenerateView` as generate_view (self,
diff --git a/research/astronet/light_curve_util/cc/python/view_generator_test.py b/research/astronet/light_curve/fast_ops/python/view_generator_test.py
similarity index 97%
rename from research/astronet/light_curve_util/cc/python/view_generator_test.py
rename to research/astronet/light_curve/fast_ops/python/view_generator_test.py
index 5a3717d1..584e4d99 100644
--- a/research/astronet/light_curve_util/cc/python/view_generator_test.py
+++ b/research/astronet/light_curve/fast_ops/python/view_generator_test.py
@@ -21,7 +21,7 @@ from __future__ import print_function
 from absl.testing import absltest
 import numpy as np
 
-from light_curve_util.cc.python import view_generator
+from light_curve.fast_ops.python import view_generator
 
 
 class ViewGeneratorTest(absltest.TestCase):
diff --git a/research/astronet/light_curve_util/cc/test_util.h b/research/astronet/light_curve/fast_ops/test_util.h
similarity index 86%
rename from research/astronet/light_curve_util/cc/test_util.h
rename to research/astronet/light_curve/fast_ops/test_util.h
index 86347def..2bba191b 100644
--- a/research/astronet/light_curve_util/cc/test_util.h
+++ b/research/astronet/light_curve/fast_ops/test_util.h
@@ -12,8 +12,8 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
 
-#ifndef TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_UTIL_CC_TEST_UTIL_H_
-#define TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_UTIL_CC_TEST_UTIL_H_
+#ifndef TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_FAST_OPS_TEST_UTIL_H_
+#define TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_FAST_OPS_TEST_UTIL_H_
 
 #include <vector>
 
@@ -42,4 +42,4 @@ inline std::vector<double> range(double start, double stop, double step) {
 
 }  // namespace astronet
 
-#endif  // TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_UTIL_CC_TEST_UTIL_H_
+#endif  // TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_FAST_OPS_TEST_UTIL_H_
diff --git a/research/astronet/light_curve_util/cc/view_generator.cc b/research/astronet/light_curve/fast_ops/view_generator.cc
similarity index 91%
rename from research/astronet/light_curve_util/cc/view_generator.cc
rename to research/astronet/light_curve/fast_ops/view_generator.cc
index cb8c5d27..d569c8be 100644
--- a/research/astronet/light_curve_util/cc/view_generator.cc
+++ b/research/astronet/light_curve/fast_ops/view_generator.cc
@@ -12,12 +12,12 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
 
-#include "light_curve_util/cc/view_generator.h"
+#include "light_curve/fast_ops/view_generator.h"
 
 #include "absl/memory/memory.h"
-#include "light_curve_util/cc/median_filter.h"
-#include "light_curve_util/cc/normalize.h"
-#include "light_curve_util/cc/phase_fold.h"
+#include "light_curve/fast_ops/median_filter.h"
+#include "light_curve/fast_ops/normalize.h"
+#include "light_curve/fast_ops/phase_fold.h"
 
 using std::vector;
 
diff --git a/research/astronet/light_curve_util/cc/view_generator.h b/research/astronet/light_curve/fast_ops/view_generator.h
similarity index 89%
rename from research/astronet/light_curve_util/cc/view_generator.h
rename to research/astronet/light_curve/fast_ops/view_generator.h
index 4f1d902a..c1806cb3 100644
--- a/research/astronet/light_curve_util/cc/view_generator.h
+++ b/research/astronet/light_curve/fast_ops/view_generator.h
@@ -12,8 +12,8 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
 
-#ifndef TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_UTIL_CC_VIEW_GENERATOR_H_
-#define TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_UTIL_CC_VIEW_GENERATOR_H_
+#ifndef TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_FAST_OPS_VIEW_GENERATOR_H_
+#define TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_FAST_OPS_VIEW_GENERATOR_H_
 
 #include <memory>
 #include <string>
@@ -24,9 +24,10 @@ namespace astronet {
 // Helper class for phase-folding a light curve and then generating "views" of
 // the light curve using a median filter.
 //
-// This class wraps the functions in light_curve_util.h for intended use as a
-// a Python extension. It keeps the phase-folded light curve in the class state
-// to minimize expensive copies between the language barrier.
+// This class wraps functions for phase folding, median filtering, and
+// normalizing for efficient use as a Python extension. It keeps the
+// phase-folded light curve in the class state to minimize expensive copies
+// between the language barrier.
 class ViewGenerator {
  public:
   // Factory function to create a new ViewGenerator.
@@ -96,4 +97,4 @@ class ViewGenerator {
 
 }  // namespace astronet
 
-#endif  // TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_UTIL_CC_VIEW_GENERATOR_H_
+#endif  // TENSORFLOW_MODELS_ASTRONET_LIGHT_CURVE_FAST_OPS_VIEW_GENERATOR_H_
diff --git a/research/astronet/light_curve_util/cc/view_generator_test.cc b/research/astronet/light_curve/fast_ops/view_generator_test.cc
similarity index 95%
rename from research/astronet/light_curve_util/cc/view_generator_test.cc
rename to research/astronet/light_curve/fast_ops/view_generator_test.cc
index bf8c3898..8015e2d1 100644
--- a/research/astronet/light_curve_util/cc/view_generator_test.cc
+++ b/research/astronet/light_curve/fast_ops/view_generator_test.cc
@@ -12,11 +12,11 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
 
-#include "light_curve_util/cc/view_generator.h"
+#include "light_curve/fast_ops/view_generator.h"
 
 #include "gmock/gmock.h"
 #include "gtest/gtest.h"
-#include "light_curve_util/cc/test_util.h"
+#include "light_curve/fast_ops/test_util.h"
 
 using std::vector;
 using testing::Pointwise;
@@ -49,7 +49,7 @@ TEST(ViewGenerator, GenerateViews) {
   vector<double> result;
 
   // Error: t_max <= t_min. We do not test all failure cases here since they
-  // are tested in light_curve_util_test.cc.
+  // are covered by the median filter's tests.
   EXPECT_FALSE(generator->GenerateView(10, 1, -1, -1, false, &result, &error));
   EXPECT_FALSE(error.empty());
   error.clear();
diff --git a/research/astronet/light_curve_util/kepler_io.py b/research/astronet/light_curve/kepler_io.py
similarity index 99%
rename from research/astronet/light_curve_util/kepler_io.py
rename to research/astronet/light_curve/kepler_io.py
index a26c0eb2..6a7911f9 100644
--- a/research/astronet/light_curve_util/kepler_io.py
+++ b/research/astronet/light_curve/kepler_io.py
@@ -23,7 +23,7 @@ import os.path
 from astropy.io import fits
 import numpy as np
 
-from light_curve_util import util
+from light_curve import util
 from tensorflow import gfile
 
 # Quarter index to filename prefix for long cadence Kepler data.
diff --git a/research/astronet/light_curve_util/kepler_io_test.py b/research/astronet/light_curve/kepler_io_test.py
similarity index 95%
rename from research/astronet/light_curve_util/kepler_io_test.py
rename to research/astronet/light_curve/kepler_io_test.py
index e4922d1f..847fd8f9 100644
--- a/research/astronet/light_curve_util/kepler_io_test.py
+++ b/research/astronet/light_curve/kepler_io_test.py
@@ -24,16 +24,17 @@ from absl import flags
 from absl.testing import absltest
 import numpy as np
 
-from light_curve_util import kepler_io
+from light_curve import kepler_io
 
 FLAGS = flags.FLAGS
 
-_DATA_DIR = "light_curve_util/test_data/"
+_DATA_DIR = "light_curve/test_data/"
 
 
 class KeplerIoTest(absltest.TestCase):
 
   def setUp(self):
+    super(KeplerIoTest, self).setUp()
     self.data_dir = os.path.join(FLAGS.test_srcdir, _DATA_DIR)
 
   def testScrambleLightCurve(self):
@@ -49,8 +50,8 @@ class KeplerIoTest(absltest.TestCase):
     gold_flux = [[41, 42], [np.nan, np.nan, 33], [11, 12], [21]]
     gold_time = [[101, 102], [201, 301, 302], [303, 401], [402]]
 
-    self.assertEqual(len(gold_flux), len(scr_flux))
-    self.assertEqual(len(gold_time), len(scr_time))
+    self.assertLen(gold_flux, len(scr_flux))
+    self.assertLen(gold_time, len(scr_time))
 
     for i in range(len(gold_flux)):
       np.testing.assert_array_equal(gold_flux[i], scr_flux[i])
@@ -60,7 +61,7 @@ class KeplerIoTest(absltest.TestCase):
     # All quarters.
     filenames = kepler_io.kepler_filenames(
         "/my/dir/", 1234567, check_existence=False)
-    self.assertItemsEqual([
+    self.assertCountEqual([
         "/my/dir/0012/001234567/kplr001234567-2009131105131_llc.fits",
         "/my/dir/0012/001234567/kplr001234567-2009166043257_llc.fits",
         "/my/dir/0012/001234567/kplr001234567-2009259160929_llc.fits",
@@ -85,7 +86,7 @@ class KeplerIoTest(absltest.TestCase):
     # Subset of quarters.
     filenames = kepler_io.kepler_filenames(
         "/my/dir/", 1234567, quarters=[3, 4], check_existence=False)
-    self.assertItemsEqual([
+    self.assertCountEqual([
         "/my/dir/0012/001234567/kplr001234567-2009350155506_llc.fits",
         "/my/dir/0012/001234567/kplr001234567-2010078095331_llc.fits",
         "/my/dir/0012/001234567/kplr001234567-2010009091648_llc.fits"
@@ -99,7 +100,7 @@ class KeplerIoTest(absltest.TestCase):
         injected_group="inj1",
         check_existence=False)
     # pylint:disable=line-too-long
-    self.assertItemsEqual([
+    self.assertCountEqual([
         "/my/dir/0012/001234567/kplr001234567-2009350155506_INJECTED-inj1_llc.fits",
         "/my/dir/0012/001234567/kplr001234567-2010078095331_INJECTED-inj1_llc.fits",
         "/my/dir/0012/001234567/kplr001234567-2010009091648_INJECTED-inj1_llc.fits"
@@ -113,7 +114,7 @@ class KeplerIoTest(absltest.TestCase):
         long_cadence=False,
         quarters=[0, 1],
         check_existence=False)
-    self.assertItemsEqual([
+    self.assertCountEqual([
         "/my/dir/0012/001234567/kplr001234567-2009131110544_slc.fits",
         "/my/dir/0012/001234567/kplr001234567-2009166044711_slc.fits"
     ], filenames)
@@ -126,7 +127,7 @@ class KeplerIoTest(absltest.TestCase):
                      "0114/011442793/kplr011442793-{}_llc.fits".format(q))
         for q in ["2009350155506", "2010009091648", "2010174085026"]
     ]
-    self.assertItemsEqual(expected_filenames, filenames)
+    self.assertCountEqual(expected_filenames, filenames)
 
   def testReadKeplerLightCurve(self):
     filenames = [
diff --git a/research/astronet/light_curve_util/median_filter.py b/research/astronet/light_curve/median_filter.py
similarity index 100%
rename from research/astronet/light_curve_util/median_filter.py
rename to research/astronet/light_curve/median_filter.py
diff --git a/research/astronet/light_curve_util/median_filter_test.py b/research/astronet/light_curve/median_filter_test.py
similarity index 99%
rename from research/astronet/light_curve_util/median_filter_test.py
rename to research/astronet/light_curve/median_filter_test.py
index 6104be99..e29a348c 100644
--- a/research/astronet/light_curve_util/median_filter_test.py
+++ b/research/astronet/light_curve/median_filter_test.py
@@ -21,7 +21,7 @@ from __future__ import print_function
 from absl.testing import absltest
 import numpy as np
 
-from light_curve_util import median_filter
+from light_curve import median_filter
 
 
 class MedianFilterTest(absltest.TestCase):
diff --git a/research/astronet/light_curve_util/periodic_event.py b/research/astronet/light_curve/periodic_event.py
similarity index 100%
rename from research/astronet/light_curve_util/periodic_event.py
rename to research/astronet/light_curve/periodic_event.py
diff --git a/research/astronet/light_curve_util/periodic_event_test.py b/research/astronet/light_curve/periodic_event_test.py
similarity index 98%
rename from research/astronet/light_curve_util/periodic_event_test.py
rename to research/astronet/light_curve/periodic_event_test.py
index f3a334d6..e8b3643c 100644
--- a/research/astronet/light_curve_util/periodic_event_test.py
+++ b/research/astronet/light_curve/periodic_event_test.py
@@ -20,7 +20,7 @@ from __future__ import print_function
 
 from absl.testing import absltest
 
-from light_curve_util.periodic_event import Event
+from light_curve.periodic_event import Event
 
 
 class EventTest(absltest.TestCase):
diff --git a/research/astronet/light_curve_util/test_data/0114/011442793/kplr011442793-2009350155506_llc.fits b/research/astronet/light_curve/test_data/0114/011442793/kplr011442793-2009350155506_llc.fits
similarity index 100%
rename from research/astronet/light_curve_util/test_data/0114/011442793/kplr011442793-2009350155506_llc.fits
rename to research/astronet/light_curve/test_data/0114/011442793/kplr011442793-2009350155506_llc.fits
diff --git a/research/astronet/light_curve_util/test_data/0114/011442793/kplr011442793-2010009091648_llc.fits b/research/astronet/light_curve/test_data/0114/011442793/kplr011442793-2010009091648_llc.fits
similarity index 100%
rename from research/astronet/light_curve_util/test_data/0114/011442793/kplr011442793-2010009091648_llc.fits
rename to research/astronet/light_curve/test_data/0114/011442793/kplr011442793-2010009091648_llc.fits
diff --git a/research/astronet/light_curve_util/test_data/0114/011442793/kplr011442793-2010174085026_llc.fits b/research/astronet/light_curve/test_data/0114/011442793/kplr011442793-2010174085026_llc.fits
similarity index 100%
rename from research/astronet/light_curve_util/test_data/0114/011442793/kplr011442793-2010174085026_llc.fits
rename to research/astronet/light_curve/test_data/0114/011442793/kplr011442793-2010174085026_llc.fits
diff --git a/research/astronet/light_curve_util/util.py b/research/astronet/light_curve/util.py
similarity index 100%
rename from research/astronet/light_curve_util/util.py
rename to research/astronet/light_curve/util.py
diff --git a/research/astronet/light_curve_util/util_test.py b/research/astronet/light_curve/util_test.py
similarity index 97%
rename from research/astronet/light_curve_util/util_test.py
rename to research/astronet/light_curve/util_test.py
index 756c9245..3ba1ef67 100644
--- a/research/astronet/light_curve_util/util_test.py
+++ b/research/astronet/light_curve/util_test.py
@@ -21,9 +21,9 @@ from __future__ import print_function
 from absl.testing import absltest
 import numpy as np
 
-from light_curve_util import periodic_event
+from light_curve import periodic_event
 
-from light_curve_util import util
+from light_curve import util
 
 
 class LightCurveUtilTest(absltest.TestCase):
@@ -89,13 +89,13 @@ class LightCurveUtilTest(absltest.TestCase):
     ]
     all_flux = [np.ones(25), np.ones(10)]
 
-    self.assertEqual(len(all_time), 2)
-    self.assertEqual(len(all_time[0]), 25)
-    self.assertEqual(len(all_time[1]), 10)
+    self.assertLen(all_time, 2)
+    self.assertLen(all_time[0], 25)
+    self.assertLen(all_time[1], 10)
 
-    self.assertEqual(len(all_flux), 2)
-    self.assertEqual(len(all_flux[0]), 25)
-    self.assertEqual(len(all_flux[1]), 10)
+    self.assertLen(all_flux, 2)
+    self.assertLen(all_flux[0], 25)
+    self.assertLen(all_flux[1], 10)
 
     # Gap width 0.5.
     split_time, split_flux = util.split(all_time, all_flux, gap_width=0.5)
@@ -268,7 +268,7 @@ class LightCurveUtilTest(absltest.TestCase):
         np.array([80, 90]),
     ]
     reshard_xs = util.reshard_arrays(xs, ys)
-    self.assertEqual(5, len(reshard_xs))
+    self.assertLen(reshard_xs, 5)
     np.testing.assert_array_equal([], reshard_xs[0])
     np.testing.assert_array_equal([1, 2], reshard_xs[1])
     np.testing.assert_array_equal([3, 4, 5, 6], reshard_xs[2])
