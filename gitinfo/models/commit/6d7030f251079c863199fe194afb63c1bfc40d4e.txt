commit 6d7030f251079c863199fe194afb63c1bfc40d4e
Author: Hongkun Yu <hongkuny@google.com>
Date:   Mon Mar 30 22:48:07 2020 -0700

    Move NCF estimator to R1.
    
    PiperOrigin-RevId: 303897691

diff --git a/official/r1/README.md b/official/r1/README.md
index f9dda016..c50d7f96 100644
--- a/official/r1/README.md
+++ b/official/r1/README.md
@@ -15,6 +15,7 @@ in the previous releases.
 | ----- | ----------- | --------- |
 | [Gradient Boosted Trees](boosted_trees) | A gradient boosted trees model to classify higgs boson process from HIGGS dataset | [Link](https://en.wikipedia.org/wiki/Gradient_boosting) |
 | [MNIST](mnist) | A basic model to classify digits from the MNIST dataset | [Link](http://yann.lecun.com/exdb/mnist/) |
+| [NCF](ncf) | NCF Estimator implementation | [arXiv:1708.05031](https://arxiv.org/abs/1708.05031) |
 | [ResNet](resnet) | A deep residual network for image recognition | [arXiv:1512.03385](https://arxiv.org/abs/1512.03385) |
 | [Transformer](transformer) | A transformer model to translate the WMT English to German dataset | [arXiv:1706.03762](https://arxiv.org/abs/1706.03762) |
 | [Wide & Deep Learning](wide_deep) | A model that combines a wide linear model and deep neural network for recommender systems | [arXiv:1606.07792](https://arxiv.org/abs/1606.07792) |
diff --git a/official/recommendation/ncf_estimator_main.py b/official/r1/ncf/ncf_estimator_main.py
similarity index 100%
rename from official/recommendation/ncf_estimator_main.py
rename to official/r1/ncf/ncf_estimator_main.py
diff --git a/official/recommendation/ncf_test.py b/official/recommendation/ncf_test.py
index 0a0fc67e..03e0ee14 100644
--- a/official/recommendation/ncf_test.py
+++ b/official/recommendation/ncf_test.py
@@ -23,18 +23,15 @@ import unittest
 
 import numpy as np
 import tensorflow as tf
-
+from tensorflow.python.eager import context  # pylint: disable=ungrouped-imports
 from official.recommendation import constants as rconst
 from official.recommendation import data_pipeline
-from official.recommendation import neumf_model
 from official.recommendation import ncf_common
-from official.recommendation import ncf_estimator_main
 from official.recommendation import ncf_keras_main
+from official.recommendation import neumf_model
 from official.utils.misc import keras_utils
 from official.utils.testing import integration
 
-from tensorflow.python.eager import context # pylint: disable=ungrouped-imports
-
 
 NUM_TRAIN_NEG = 4
 
@@ -190,20 +187,6 @@ class NcfTest(tf.test.TestCase):
 
   _BASE_END_TO_END_FLAGS = ['-batch_size', '1044', '-train_epochs', '1']
 
-  @unittest.skipIf(keras_utils.is_v2_0(), "TODO(b/136018594)")
-  @unittest.mock.patch.object(rconst, "SYNTHETIC_BATCHES_PER_EPOCH", 100)
-  def test_end_to_end_estimator(self):
-    integration.run_synthetic(
-        ncf_estimator_main.main, tmp_root=self.get_temp_dir(),
-        extra_flags=self._BASE_END_TO_END_FLAGS)
-
-  @unittest.skipIf(keras_utils.is_v2_0(), "TODO(b/136018594)")
-  @unittest.mock.patch.object(rconst, "SYNTHETIC_BATCHES_PER_EPOCH", 100)
-  def test_end_to_end_estimator_mlperf(self):
-    integration.run_synthetic(
-        ncf_estimator_main.main, tmp_root=self.get_temp_dir(),
-        extra_flags=self._BASE_END_TO_END_FLAGS + ['-ml_perf', 'True'])
-
   @unittest.mock.patch.object(rconst, "SYNTHETIC_BATCHES_PER_EPOCH", 100)
   def test_end_to_end_keras_no_dist_strat(self):
     integration.run_synthetic(
