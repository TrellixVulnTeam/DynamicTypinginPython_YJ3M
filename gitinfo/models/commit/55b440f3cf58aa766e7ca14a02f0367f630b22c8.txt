commit 55b440f3cf58aa766e7ca14a02f0367f630b22c8
Author: cclauss <cclauss@bluewin.ch>
Date:   Sat Aug 19 21:25:01 2017 +0200

    Swivel: print(), basestring(), exception changes for Python 3 (#2249)
    
    * from six.moves import xrange for Python 3
    
    * from __future__ import print_function for Python 3
    
    Also old style exception --> new style exception
    
    * Define basestring for Python 3
    
    Also remove unused import.
    
    * from six import string_types for Python 3
    
    * from __future__ import print_function
    
    * print() --> print('')

diff --git a/swivel/glove_to_shards.py b/swivel/glove_to_shards.py
index 1a24d48a..9f61dc87 100644
--- a/swivel/glove_to_shards.py
+++ b/swivel/glove_to_shards.py
@@ -45,6 +45,8 @@ import sys
 
 import tensorflow as tf
 
+from six.moves import xrange
+
 flags = tf.app.flags
 
 flags.DEFINE_string('input', 'coocurrences.bin', 'Vocabulary file')
@@ -131,6 +133,7 @@ def make_shard_files(coocs, nshards, vocab_sz):
 
   return (shard_files, row_sums)
 
+
 def main(_):
   with open(FLAGS.vocab, 'r') as lines:
     orig_vocab_sz = sum(1 for _ in lines)
@@ -193,5 +196,6 @@ def main(_):
 
   print('done!')
 
+
 if __name__ == '__main__':
   tf.app.run()
diff --git a/swivel/nearest.py b/swivel/nearest.py
index 2633db25..0fa828b6 100644
--- a/swivel/nearest.py
+++ b/swivel/nearest.py
@@ -16,6 +16,7 @@
 
 """Simple tool for inspecting nearest neighbors and analogies."""
 
+from __future__ import print_function
 import re
 import sys
 from getopt import GetoptError, getopt
@@ -24,8 +25,8 @@ from vecs import Vecs
 
 try:
   opts, args = getopt(sys.argv[1:], 'v:e:', ['vocab=', 'embeddings='])
-except GetoptError, e:
-  print >> sys.stderr, e
+except GetoptError as e:
+  print(e, file=sys.stderr)
   sys.exit(2)
 
 opt_vocab = 'vocab.txt'
@@ -55,21 +56,21 @@ while True:
   elif len(parts) == 3:
     vs = [vecs.lookup(w) for w in parts]
     if any(v is None for v in vs):
-      print 'not in vocabulary: %s' % (
-          ', '.join(tok for tok, v in zip(parts, vs) if v is None))
+      print('not in vocabulary: %s' % (
+            ', '.join(tok for tok, v in zip(parts, vs) if v is None)))
 
       continue
 
     res = vecs.neighbors(vs[2] - vs[0] + vs[1])
 
   else:
-    print 'use a single word to query neighbors, or three words for analogy'
+    print('use a single word to query neighbors, or three words for analogy')
     continue
 
   if not res:
     continue
 
   for word, sim in res[:20]:
-    print '%0.4f: %s' % (sim, word)
+    print('%0.4f: %s' % (sim, word))
 
-  print
+  print()
diff --git a/swivel/vecs.py b/swivel/vecs.py
index bbf54c9b..b0bd3dd7 100644
--- a/swivel/vecs.py
+++ b/swivel/vecs.py
@@ -15,7 +15,9 @@
 import mmap
 import numpy as np
 import os
-import struct
+
+from six import string_types
+
 
 class Vecs(object):
   def __init__(self, vocab_filename, rows_filename, cols_filename=None):
@@ -41,8 +43,8 @@ class Vecs(object):
       rows = np.matrix(
           np.frombuffer(rows_mm, dtype=np.float32).reshape(n, dim))
 
-      # If column vectors were specified, then open them and add them to the row
-      # vectors.
+      # If column vectors were specified, then open them and add them to the
+      # row vectors.
       if cols_filename:
         with open(cols_filename, 'r') as cols_fh:
           cols_mm = mmap.mmap(cols_fh.fileno(), 0, prot=mmap.PROT_READ)
@@ -71,7 +73,7 @@ class Vecs(object):
 
   def neighbors(self, query):
     """Returns the nearest neighbors to the query (a word or vector)."""
-    if isinstance(query, basestring):
+    if isinstance(query, string_types):
       idx = self.word_to_idx.get(query)
       if idx is None:
         return None
diff --git a/swivel/wordsim.py b/swivel/wordsim.py
index 00b8ada9..2d27663f 100644
--- a/swivel/wordsim.py
+++ b/swivel/wordsim.py
@@ -34,6 +34,7 @@ the scored human judgement.
 
 """
 
+from __future__ import print_function
 import scipy.stats
 import sys
 from getopt import GetoptError, getopt
@@ -42,8 +43,8 @@ from vecs import Vecs
 
 try:
   opts, args = getopt(sys.argv[1:], '', ['embeddings=', 'vocab='])
-except GetoptError, e:
-  print >> sys.stderr, e
+except GetoptError as e:
+  print(e, file=sys.stderr)
   sys.exit(2)
 
 opt_embeddings = None
@@ -56,19 +57,20 @@ for o, a in opts:
     opt_vocab = a
 
 if not opt_vocab:
-  print >> sys.stderr, 'please specify a vocabulary file with "--vocab"'
+  print('please specify a vocabulary file with "--vocab"', file=sys.stderr)
   sys.exit(2)
 
 if not opt_embeddings:
-  print >> sys.stderr, 'please specify the embeddings with "--embeddings"'
+  print('please specify the embeddings with "--embeddings"', file=sys.stderr)
   sys.exit(2)
 
 try:
   vecs = Vecs(opt_vocab, opt_embeddings)
-except IOError, e:
-  print >> sys.stderr, e
+except IOError as e:
+  print(e, file=sys.stderr)
   sys.exit(1)
 
+
 def evaluate(lines):
   acts, preds = [], []
 
@@ -85,6 +87,7 @@ def evaluate(lines):
   rho, _ = scipy.stats.spearmanr(acts, preds)
   return rho
 
+
 for filename in args:
   with open(filename, 'r') as lines:
-    print '%0.3f %s' % (evaluate(lines), filename)
+    print('%0.3f %s' % (evaluate(lines), filename))
