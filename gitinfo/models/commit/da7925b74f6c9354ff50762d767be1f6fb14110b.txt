commit da7925b74f6c9354ff50762d767be1f6fb14110b
Author: Chris Shallue <shallue@google.com>
Date:   Mon Jun 18 09:27:24 2018 -0700

    Deal with empty input arrays in kepler_spline.choose_kepler_spline().
    
    PiperOrigin-RevId: 201007094

diff --git a/research/astronet/third_party/kepler_spline/kepler_spline.py b/research/astronet/third_party/kepler_spline/kepler_spline.py
index 4cfc8daf..ade2da70 100644
--- a/research/astronet/third_party/kepler_spline/kepler_spline.py
+++ b/research/astronet/third_party/kepler_spline/kepler_spline.py
@@ -187,7 +187,8 @@ def choose_kepler_spline(all_time,
   # model and sigma is the constant standard deviation for all flux values.
   # Moreover, we assume that s[i] ~= s[i+1]. Therefore,
   # (f[i+1] - f[i]) / sqrt(2) ~ N(0, sigma^2).
-  scaled_diffs = np.concatenate([np.diff(f) / np.sqrt(2) for f in all_flux])
+  scaled_diffs = [np.diff(f) / np.sqrt(2) for f in all_flux]
+  scaled_diffs = np.concatenate(scaled_diffs) if scaled_diffs else np.array([])
   if not scaled_diffs.size:
     best_spline = [np.array([np.nan] * len(f)) for f in all_flux]
     metadata.light_curve_mask = [
diff --git a/research/astronet/third_party/kepler_spline/kepler_spline_test.py b/research/astronet/third_party/kepler_spline/kepler_spline_test.py
index 00a37c59..3ef6e8f8 100644
--- a/research/astronet/third_party/kepler_spline/kepler_spline_test.py
+++ b/research/astronet/third_party/kepler_spline/kepler_spline_test.py
@@ -79,6 +79,19 @@ class KeplerSplineTest(absltest.TestCase):
 
 class ChooseKeplerSplineTest(absltest.TestCase):
 
+  def testEmptyInput(self):
+    # Logarithmically sample candidate break point spacings.
+    bkspaces = np.logspace(np.log10(0.5), np.log10(5), num=20)
+
+    spline, metadata = kepler_spline.choose_kepler_spline(
+        all_time=[],
+        all_flux=[],
+        bkspaces=bkspaces,
+        penalty_coeff=1.0,
+        verbose=False)
+    np.testing.assert_array_equal(spline, [])
+    np.testing.assert_array_equal(metadata.light_curve_mask, [])
+
   def testNoPoints(self):
     all_time = [np.array([])]
     all_flux = [np.array([])]
