commit 38b63487959a0128d9b859a1ff4fbf26f7223a75
Author: Ryan Patrick Kyle <ryan@plot.ly>
Date:   Mon May 20 22:47:58 2019 -0400

    :sparkles: logic to export un-transpiled fns

diff --git a/dash/development/_r_components_generation.py b/dash/development/_r_components_generation.py
index edffe4e5..ec881d82 100644
--- a/dash/development/_r_components_generation.py
+++ b/dash/development/_r_components_generation.py
@@ -6,6 +6,7 @@ import sys
 import shutil
 import glob
 import importlib
+import re
 
 from ._all_keywords import r_keywords
 from ._py_components_generation import reorder_props
@@ -175,15 +176,15 @@ def generate_class_string(name, props, project_shortname, prefix):
 
     # Produce a string with all property names other than WCs
     prop_names = ", ".join(
-        "'{}'".format(p) for p in prop_keys
+        "'{}'".format(p)
+        for p in prop_keys
         if "*" not in p and p not in ["setProps"]
     )
 
     # in R, we set parameters with no defaults to NULL
     # Here we'll do that if no default value exists
-    default_wildcards += ", ".join(
-        "'{}'".format(p) for p in prop_keys if "*" in p
-    )
+    default_wildcards += ", ".join("'{}'".format(p)
+                                   for p in prop_keys if "*" in p)
 
     if default_wildcards == "":
         default_wildcards = "NULL"
@@ -317,9 +318,8 @@ def write_help_file(name, props, description, prefix):
     default_argtext += ", ".join("{}=NULL".format(p) for p in prop_keys)
 
     item_text += "\n\n".join(
-        "\\item{{{}}}{{{}}}".format(
-            p, props[p]["description"]
-            ) for p in prop_keys
+        "\\item{{{}}}{{{}}}".format(p, props[p]["description"])
+        for p in prop_keys
     )
 
     if has_wildcards:
@@ -414,7 +414,7 @@ def generate_rpkg(
         export_string,
         package_depends,
         package_imports,
-        package_suggests
+        package_suggests,
 ):
     """
     Generate documents for R package creation
@@ -577,6 +577,34 @@ def generate_exports(
         ):
             export_string += "export({}{})\n".format(prefix, component)
 
+    # the following lines enable rudimentary support for bundling in
+    # R functions that are not automatically generated by the transpiler
+    # such that functions contained in the R subdirectory are exported,
+    # so long as they are not in utils.R.
+    rfilelist = []
+    omitlist = ["utils.R", "internal.R"] + [
+        "{}{}.R".format(prefix, component) for component in components
+    ]
+    stripped_line = ""
+    fnlist = []
+
+    for script in os.listdir("R"):
+        if script.endswith(".R") and script not in omitlist:
+            rfilelist += [os.path.join("R", script)]
+
+    # in R, either = or <- may be used to create and assign objects
+    definitions = ["<-function", "=function"]
+
+    for rfile in rfilelist:
+        with open(rfile, "r") as script:
+            for line in script:
+                stripped_line = line.replace(" ", "").replace("\n", "")
+                if any(fndef in stripped_line for fndef in definitions):
+                    fnlist += set([re.split("<-|=", stripped_line)[0]])
+
+    export_string += "\n".join("export({})".format(function)
+                               for function in fnlist)
+
     # now, bundle up the package information and create all the requisite
     # elements of an R package, so that the end result is installable either
     # locally or directly from GitHub
