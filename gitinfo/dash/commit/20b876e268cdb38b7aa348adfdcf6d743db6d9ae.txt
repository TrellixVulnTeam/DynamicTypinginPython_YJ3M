commit 20b876e268cdb38b7aa348adfdcf6d743db6d9ae
Author: alexcjohnson <alex@plot.ly>
Date:   Thu Apr 2 18:36:34 2020 -0400

    remove InputGraph

diff --git a/dash-renderer/src/actions/dependencies.js b/dash-renderer/src/actions/dependencies.js
index 00d9fe61..72f580f8 100644
--- a/dash-renderer/src/actions/dependencies.js
+++ b/dash-renderer/src/actions/dependencies.js
@@ -601,7 +601,6 @@ export function validateCallbacksToLayout(state_, dispatchError) {
 }
 
 export function computeGraphs(dependencies, dispatchError) {
-    const inputGraph = new DepGraph();
     // multiGraph is just for finding circular deps
     const multiGraph = new DepGraph();
 
@@ -653,7 +652,6 @@ export function computeGraphs(dependencies, dispatchError) {
     const inputPatterns = {};
 
     const finalGraphs = {
-        InputGraph: inputGraph,
         MultiGraph: multiGraph,
         outputMap,
         inputMap,
@@ -745,7 +743,7 @@ export function computeGraphs(dependencies, dispatchError) {
     }
 
     parsedDependencies.forEach(function registerDependency(dependency) {
-        const {output, outputs, inputs} = dependency;
+        const {outputs, inputs} = dependency;
 
         // multiGraph - just for testing circularity
 
@@ -804,12 +802,6 @@ export function computeGraphs(dependencies, dispatchError) {
                 addPattern(inputPatterns, inId, inProp, finalDependency);
             } else {
                 addMap(inputMap, inId, inProp, finalDependency);
-                // inputGraph - this is the one we'll use for dispatching updates
-                // TODO: get rid of this, use the precalculated mappings
-                const inputId = combineIdAndProp(inputObject);
-                inputGraph.addNode(output);
-                inputGraph.addNode(inputId);
-                inputGraph.addDependency(inputId, output);
             }
         });
     });
diff --git a/dash-renderer/src/actions/index.js b/dash-renderer/src/actions/index.js
index 8fea2479..5554b3ef 100644
--- a/dash-renderer/src/actions/index.js
+++ b/dash-renderer/src/actions/index.js
@@ -4,7 +4,6 @@ import {
     has,
     isEmpty,
     keys,
-    lensPath,
     map,
     mergeDeepRight,
     once,
@@ -15,7 +14,6 @@ import {
     propEq,
     type,
     uniq,
-    view,
     without,
     zip,
 } from 'ramda';
@@ -609,31 +607,3 @@ export function handleAsyncError(err, message, dispatch) {
         dispatch(onError({type: 'backEnd', error}));
     }
 }
-
-export function serialize(state) {
-    // Record minimal input state in the url
-    const {graphs, paths, layout} = state;
-    const {InputGraph} = graphs;
-    const allNodes = InputGraph.nodes;
-    const savedState = {};
-    keys(allNodes).forEach(nodeId => {
-        const [componentId, componentProp] = nodeId.split('.');
-        /*
-         * Filter out the outputs,
-         * and the invisible inputs
-         */
-        if (
-            InputGraph.dependenciesOf(nodeId).length > 0 &&
-            has(componentId, paths)
-        ) {
-            // Get the property
-            const propLens = lensPath(
-                concat(paths[componentId], ['props', componentProp])
-            );
-            const propValue = view(propLens, layout);
-            savedState[nodeId] = propValue;
-        }
-    });
-
-    return savedState;
-}
diff --git a/dash-renderer/src/reducers/reducer.js b/dash-renderer/src/reducers/reducer.js
index 54142237..ffdb8794 100644
--- a/dash-renderer/src/reducers/reducer.js
+++ b/dash-renderer/src/reducers/reducer.js
@@ -1,14 +1,8 @@
-import {
-    concat,
-    equals,
-    filter,
-    forEach,
-    isEmpty,
-    keys,
-    lensPath,
-    view,
-} from 'ramda';
+import {forEach, isEmpty, keys, path} from 'ramda';
 import {combineReducers} from 'redux';
+
+import {getCallbacksByInput} from '../actions/dependencies';
+
 import layout from './layout';
 import graphs from './dependencyGraph';
 import paths from './paths';
@@ -48,22 +42,14 @@ function mainReducer() {
 
 function getInputHistoryState(itempath, props, state) {
     const {graphs, layout, paths} = state;
-    const {InputGraph} = graphs;
-    const keyObj = filter(equals(itempath), paths.strs);
+    const idProps = path(itempath.concat(['props']), layout);
+    const {id} = idProps || {};
     let historyEntry;
-    if (!isEmpty(keyObj)) {
-        const id = keys(keyObj)[0];
+    if (id) {
         historyEntry = {id, props: {}};
         keys(props).forEach(propKey => {
-            const inputKey = `${id}.${propKey}`;
-            if (
-                InputGraph.hasNode(inputKey) &&
-                InputGraph.dependenciesOf(inputKey).length > 0
-            ) {
-                historyEntry.props[propKey] = view(
-                    lensPath(concat(paths.strs[id], ['props', propKey])),
-                    layout
-                );
+            if (getCallbacksByInput(graphs, paths, id, propKey).length) {
+                historyEntry.props[propKey] = idProps[propKey];
             }
         });
     }
