commit 505d56195b0e5d1d260afc5859a63eadd8034f31
Author: alexcjohnson <alex@plot.ly>
Date:   Wed Oct 23 09:44:13 2019 -0400

    remove useless `switch` in dependencyGraph.js

diff --git a/dash-renderer/src/reducers/dependencyGraph.js b/dash-renderer/src/reducers/dependencyGraph.js
index b023275a..77063322 100644
--- a/dash-renderer/src/reducers/dependencyGraph.js
+++ b/dash-renderer/src/reducers/dependencyGraph.js
@@ -5,61 +5,58 @@ import {isMultiOutputProp, parseMultipleOutputs} from '../utils';
 const initialGraph = {};
 
 const graphs = (state = initialGraph, action) => {
-    switch (action.type) {
-        case 'COMPUTE_GRAPHS': {
-            const dependencies = action.payload;
-            const inputGraph = new DepGraph();
-            const multiGraph = new DepGraph();
-
-            dependencies.forEach(function registerDependency(dependency) {
-                const {output, inputs} = dependency;
-
-                // Multi output supported will be a string already
-                // Backward compatibility by detecting object.
-                let outputId;
-                if (type(output) === 'Object') {
-                    outputId = `${output.id}.${output.property}`;
-                } else {
-                    outputId = output;
-                    if (isMultiOutputProp(output)) {
-                        parseMultipleOutputs(output).forEach(out => {
-                            multiGraph.addNode(out);
-                            inputs.forEach(i => {
-                                const inputId = `${i.id}.${i.property}`;
-                                if (!multiGraph.hasNode(inputId)) {
-                                    multiGraph.addNode(inputId);
-                                }
-                                multiGraph.addDependency(inputId, out);
-                            });
-                        });
-                    } else {
-                        multiGraph.addNode(output);
+    if (action.type === 'COMPUTE_GRAPHS') {
+        const dependencies = action.payload;
+        const inputGraph = new DepGraph();
+        const multiGraph = new DepGraph();
+
+        dependencies.forEach(function registerDependency(dependency) {
+            const {output, inputs} = dependency;
+
+            // Multi output supported will be a string already
+            // Backward compatibility by detecting object.
+            let outputId;
+            if (type(output) === 'Object') {
+                outputId = `${output.id}.${output.property}`;
+            } else {
+                outputId = output;
+                if (isMultiOutputProp(output)) {
+                    parseMultipleOutputs(output).forEach(out => {
+                        multiGraph.addNode(out);
                         inputs.forEach(i => {
                             const inputId = `${i.id}.${i.property}`;
                             if (!multiGraph.hasNode(inputId)) {
                                 multiGraph.addNode(inputId);
                             }
-                            multiGraph.addDependency(inputId, output);
+                            multiGraph.addDependency(inputId, out);
                         });
-                    }
+                    });
+                } else {
+                    multiGraph.addNode(output);
+                    inputs.forEach(i => {
+                        const inputId = `${i.id}.${i.property}`;
+                        if (!multiGraph.hasNode(inputId)) {
+                            multiGraph.addNode(inputId);
+                        }
+                        multiGraph.addDependency(inputId, output);
+                    });
                 }
+            }
 
-                inputs.forEach(inputObject => {
-                    const inputId = `${inputObject.id}.${inputObject.property}`;
-                    inputGraph.addNode(outputId);
-                    if (!inputGraph.hasNode(inputId)) {
-                        inputGraph.addNode(inputId);
-                    }
-                    inputGraph.addDependency(inputId, outputId);
-                });
+            inputs.forEach(inputObject => {
+                const inputId = `${inputObject.id}.${inputObject.property}`;
+                inputGraph.addNode(outputId);
+                if (!inputGraph.hasNode(inputId)) {
+                    inputGraph.addNode(inputId);
+                }
+                inputGraph.addDependency(inputId, outputId);
             });
+        });
 
-            return {InputGraph: inputGraph, MultiGraph: multiGraph};
-        }
-
-        default:
-            return state;
+        return {InputGraph: inputGraph, MultiGraph: multiGraph};
     }
+
+    return state;
 };
 
 export default graphs;
