commit 25c6f120c43cf4004495eddeb0603d80b8c6e165
Author: Pravendra Singh <hackpravj@gmail.com>
Date:   Thu Apr 20 20:46:48 2017 +0530

    Change test file as suggested by 2to3

diff --git a/tests/development/test_base_component.py b/tests/development/test_base_component.py
index 43800ccf..38f96ed6 100644
--- a/tests/development/test_base_component.py
+++ b/tests/development/test_base_component.py
@@ -90,7 +90,7 @@ class TestComponent(unittest.TestCase):
     def test_get_item_with_nested_content_with_mixed_strings_and_without_lists(self):
         c, c1, c2, c3, c4, c5 = nested_tree()
         self.assertEqual(
-            c.keys(),
+            list(c.keys()),
             [
                 '0.0',
                 '0.1',
@@ -139,7 +139,7 @@ class TestComponent(unittest.TestCase):
 
     def test_del_item_with_nested_content_with_mixed_strings_and_without_lists(self):
         c = nested_tree()[0]
-        for key in reversed(c.keys()):
+        for key in reversed(list(c.keys())):
             c[key]
             del c[key]
             with self.assertRaises(KeyError):
@@ -155,7 +155,7 @@ class TestComponent(unittest.TestCase):
 
     def test_iter_with_nested_content_with_mixed_strings_and_without_lists(self):
         c = nested_tree()[0]
-        keys = c.keys()
+        keys = list(c.keys())
         # get a list of ids that __iter__ provides
         iter_keys = [i for i in c]
         self.assertEqual(keys, iter_keys)
@@ -444,12 +444,12 @@ class TestComponent(unittest.TestCase):
             ]
         )
         # test keys()
-        keys = [k for k in c.keys()]
+        keys = [k for k in list(c.keys())]
         self.assertEqual(keys, ['2', '3', '4', '5', '6', '7', '8'])
         self.assertEqual([i for i in c], keys)
 
         # test values()
-        components = [i for i in c.values()]
+        components = [i for i in list(c.values())]
         self.assertEqual(components, [c[k] for k in keys])
 
         # test __iter__()
@@ -458,8 +458,8 @@ class TestComponent(unittest.TestCase):
             self.assertTrue(k in c)
 
         # test __items__
-        items = [i for i in c.items()]
-        self.assertEqual(zip(keys, components), items)
+        items = [i for i in list(c.items())]
+        self.assertEqual(list(zip(keys, components)), items)
 
     def test_pop(self):
         c2 = Component(id='2')
@@ -541,7 +541,7 @@ class TestGenerateClass(unittest.TestCase):
             'optionalArray': [[1, 2, 3]]
         }
         component_instance = self.ComponentClass(**kwargs)
-        for k, v in kwargs.iteritems():
+        for k, v in list(kwargs.items()):
             self.assertEqual(getattr(component_instance, k), v)
 
     def test_repr_single_default_argument(self):
@@ -690,7 +690,7 @@ class TestMetaDataConversions(unittest.TestCase):
 
         props = self.data['props']
 
-        for prop_name, prop in props.iteritems():
+        for prop_name, prop in list(props.items()):
             self.assertEqual(
                 js_to_py_type(prop['type']),
                 self.expected_arg_strings[prop_name]
