commit b668f26d5e341e7b2fcfd0483ff6c53769f8624e
Author: Chris P <chris@plot.ly>
Date:   Fri Apr 5 20:49:32 2019 -0400

    :palm_tree:

diff --git a/src/actions/index.js b/src/actions/index.js
index 236883ab..9f0a10d3 100644
--- a/src/actions/index.js
+++ b/src/actions/index.js
@@ -31,7 +31,7 @@ import {crawlLayout, hasId} from '../reducers/utils';
 import {getAppState} from '../reducers/constants';
 import {getAction} from './constants';
 import cookie from 'cookie';
-import {uid, urlBase} from '../utils';
+import {uid, urlBase, isMultiOutputProp, parseMultipleOutputs} from '../utils';
 import {STATUS} from '../constants/constants';
 
 export const updateProps = createAction(getAction('ON_PROP_CHANGE'));
@@ -242,11 +242,10 @@ export function notifyObservers(payload) {
         const queuedObservers = [];
         outputObservers.forEach(function filterObservers(outputIdAndProp) {
             let outputIds;
-            if (outputIdAndProp.startsWith('..')) {
-                outputIds = outputIdAndProp
-                    .slice(2, outputIdAndProp.length - 2)
-                    .split('...')
-                    .map(e => e.split('.')[0]);
+            if (isMultiOutputProp(outputIdAndProp)) {
+                outputIds = parseMultipleOutputs(outputIdAndProp).map(
+                    e => e.split('.')[0]
+                );
             } else {
                 outputIds = [outputIdAndProp.split('.')[0]];
             }
@@ -579,19 +578,16 @@ function updateOutput(
             );
         }
 
-        if (payload.output.startsWith('..')) {
+        if (isMultiOutputProp(payload.output)) {
             /*
              * If this update is for multiple outputs, then it has
              * starting & trailing `..` and each propId pair is separated
              * by `...`, e.g.
              * "..output-1.value...output-2.value...output-3.value...output-4.value.."
              */
-            const outputPropIds = payload.output
-                .split('...')
-                .map(o => o.replace('..', ''));
-            for (let i = 0; i < outputPropIds.length; i++) {
-                updateClientsideOutput(outputPropIds[i], returnValue[i]);
-            }
+            parseMultiOutputs(payload.output).forEach((outputPropId, i) => {
+                updateClientsideOutput(outputPropId, returnValue[i]);
+            });
         } else {
             updateClientsideOutput(payload.output, returnValue);
         }
diff --git a/src/reducers/dependencyGraph.js b/src/reducers/dependencyGraph.js
index dfd085a3..b023275a 100644
--- a/src/reducers/dependencyGraph.js
+++ b/src/reducers/dependencyGraph.js
@@ -1,5 +1,6 @@
 import {type} from 'ramda';
 import {DepGraph} from 'dependency-graph';
+import {isMultiOutputProp, parseMultipleOutputs} from '../utils';
 
 const initialGraph = {};
 
@@ -20,20 +21,17 @@ const graphs = (state = initialGraph, action) => {
                     outputId = `${output.id}.${output.property}`;
                 } else {
                     outputId = output;
-                    if (output.startsWith('.')) {
-                        output
-                            .slice(2, output.length - 2)
-                            .split('...')
-                            .forEach(out => {
-                                multiGraph.addNode(out);
-                                inputs.forEach(i => {
-                                    const inputId = `${i.id}.${i.property}`;
-                                    if (!multiGraph.hasNode(inputId)) {
-                                        multiGraph.addNode(inputId);
-                                    }
-                                    multiGraph.addDependency(inputId, out);
-                                });
+                    if (isMultiOutputProp(output)) {
+                        parseMultipleOutputs(output).forEach(out => {
+                            multiGraph.addNode(out);
+                            inputs.forEach(i => {
+                                const inputId = `${i.id}.${i.property}`;
+                                if (!multiGraph.hasNode(inputId)) {
+                                    multiGraph.addNode(inputId);
+                                }
+                                multiGraph.addDependency(inputId, out);
                             });
+                        });
                     } else {
                         multiGraph.addNode(output);
                         inputs.forEach(i => {
diff --git a/src/utils.js b/src/utils.js
index 0da09ca6..3661a95c 100644
--- a/src/utils.js
+++ b/src/utils.js
@@ -56,3 +56,26 @@ export function uid() {
         s4()
     );
 }
+
+function isMultiOutputProp(outputIdAndProp) {
+    /*
+     * If this update is for multiple outputs, then it has
+     * starting & trailing `..` and each propId pair is separated
+     * by `...`, e.g.
+     * "..output-1.value...output-2.value...output-3.value...output-4.value.."
+     */
+
+    return payload.output.startsWith('..');
+}
+
+function parseMultipleOutputs(outputIdAndProp) {
+    /*
+     * If this update is for multiple outputs, then it has
+     * starting & trailing `..` and each propId pair is separated
+     * by `...`, e.g.
+     * "..output-1.value...output-2.value...output-3.value...output-4.value.."
+     */
+    return payload.output
+        .split('...')
+        .map(o => o.replace('..', ''));
+}
