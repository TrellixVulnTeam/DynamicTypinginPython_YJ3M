commit b5565128ed219bdb4fe5f9d7217ee7b78a88f42a
Author: Marc-AndreÃÅ Rivet <marcandre.rivet@sociablelabs.com>
Date:   Tue May 5 11:50:46 2020 -0400

    - bump dash version
    - bump dash-renderer version
    - loosen version requirements
    - fix formatting for Husky (?!)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index 580dfda3..fe67863c 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -2,7 +2,7 @@
 All notable changes to `dash` will be documented in this file.
 This project adheres to [Semantic Versioning](http://semver.org/).
 
-## [UNRELEASED]
+## [1.12.0] - 2020-05-05
 ### Added
 - [#1228](https://github.com/plotly/dash/pull/1228) Adds control over firing callbacks on page (or layout chunk) load. Individual callbacks can have their initial calls disabled in their definition `@app.callback(..., prevent_initial_call=True)` and similar for `app.clientside_callback`. The app-wide default can also be changed with `app=Dash(prevent_initial_callbacks=True)`, then individual callbacks may disable this behavior.
 - [#1201](https://github.com/plotly/dash/pull/1201) New attribute `app.validation_layout` allows you to create a multi-page app without `suppress_callback_exceptions=True` or layout function tricks. Set this to a component layout containing the superset of all IDs on all pages in your app.
diff --git a/dash-renderer/package-lock.json b/dash-renderer/package-lock.json
index e66d3860..1c452c4a 100644
--- a/dash-renderer/package-lock.json
+++ b/dash-renderer/package-lock.json
@@ -1,6 +1,6 @@
 {
   "name": "dash-renderer",
-  "version": "1.4.0",
+  "version": "1.4.1",
   "lockfileVersion": 1,
   "requires": true,
   "dependencies": {
@@ -3042,8 +3042,7 @@
     "@plotly/dash-component-plugins": {
       "version": "1.2.0",
       "resolved": "https://registry.npmjs.org/@plotly/dash-component-plugins/-/dash-component-plugins-1.2.0.tgz",
-      "integrity": "sha512-HnDyE5b1oh5l6vkZ/cd1Z/b7E4GeANLTMEeDom4WIeBYcJ/fH2PBAytZzgHXNsDYDJrMRPgfyiC7Y7jBIW4edA==",
-      "dev": true
+      "integrity": "sha512-HnDyE5b1oh5l6vkZ/cd1Z/b7E4GeANLTMEeDom4WIeBYcJ/fH2PBAytZzgHXNsDYDJrMRPgfyiC7Y7jBIW4edA=="
     },
     "@sinonjs/commons": {
       "version": "1.7.1",
diff --git a/dash-renderer/package.json b/dash-renderer/package.json
index ebeca163..3b383ef7 100644
--- a/dash-renderer/package.json
+++ b/dash-renderer/package.json
@@ -1,6 +1,6 @@
 {
   "name": "dash-renderer",
-  "version": "1.4.0",
+  "version": "1.4.1",
   "description": "render dash components in react",
   "main": "dash_renderer/dash_renderer.min.js",
   "scripts": {
diff --git a/dash/development/_r_components_generation.py b/dash/development/_r_components_generation.py
index 891d5595..4735db7c 100644
--- a/dash/development/_r_components_generation.py
+++ b/dash/development/_r_components_generation.py
@@ -573,8 +573,9 @@ def generate_rpkg(
                 "pkg_help_description", pkg_data.get("description", "")
             )
         if rpkg_data.get("pkg_copyright"):
-            package_copyright = "\nCopyright: {}".format(rpkg_data.get(
-                "pkg_copyright", ""))
+            package_copyright = "\nCopyright: {}".format(
+                rpkg_data.get("pkg_copyright", "")
+            )
     else:
         # fall back to using description in package.json, if present
         package_title = pkg_data.get("description", "")
@@ -636,13 +637,12 @@ def generate_rpkg(
 
     if rpkg_data is not None:
         if rpkg_data.get("pkg_authors"):
-            package_rauthors = '\nAuthors@R: {}'.format(rpkg_data.get(
-                "pkg_authors", ""))
+            package_rauthors = "\nAuthors@R: {}".format(
+                rpkg_data.get("pkg_authors", "")
+            )
         else:
             package_rauthors = '\nAuthors@R: person("{}", "{}", role = c("aut", "cre"), email = "{}")'.format(
-                package_author_fn,
-                package_author_ln,
-                package_author_email
+                package_author_fn, package_author_ln, package_author_email
             )
 
     if not (os.path.isfile("LICENSE") or os.path.isfile("LICENSE.txt")):
diff --git a/dash/version.py b/dash/version.py
index f84c53b0..b518f6ee 100644
--- a/dash/version.py
+++ b/dash/version.py
@@ -1 +1 @@
-__version__ = "1.11.0"
+__version__ = "1.12.0"
diff --git a/requires-install.txt b/requires-install.txt
index 16f252b2..0deaf3ba 100644
--- a/requires-install.txt
+++ b/requires-install.txt
@@ -1,8 +1,8 @@
 Flask>=1.0.2
 flask-compress
 plotly
-dash_renderer==1.4.0
-dash-core-components==1.9.1
+dash_renderer>=1.4.0
+dash-core-components>=1.9.1
 dash-html-components==1.0.3
-dash-table==4.6.2
+dash-table>=4.6.2
 future
\ No newline at end of file
diff --git a/tests/integration/callbacks/test_missing_outputs.py b/tests/integration/callbacks/test_missing_outputs.py
index ce74ed81..17d9f28b 100644
--- a/tests/integration/callbacks/test_missing_outputs.py
+++ b/tests/integration/callbacks/test_missing_outputs.py
@@ -1,6 +1,7 @@
 import pytest
 
 import dash_html_components as html
+
 # import dash_core_components as dcc
 import dash
 from dash.dependencies import Input, Output, ALL, MATCH
@@ -14,12 +15,14 @@ debugging = dict(
 def test_cbmo001_all_output(with_simple, dash_duo):
     app = dash.Dash(__name__)
 
-    app.layout = html.Div(children=[
-        html.Button("items", id="items"),
-        html.Button("values", id="values"),
-        html.Div(id="content"),
-        html.Div("Output init", id="output"),
-    ])
+    app.layout = html.Div(
+        children=[
+            html.Button("items", id="items"),
+            html.Button("values", id="values"),
+            html.Div(id="content"),
+            html.Div("Output init", id="output"),
+        ]
+    )
 
     @app.callback(Output("content", "children"), [Input("items", "n_clicks")])
     def content(n1):
@@ -28,9 +31,10 @@ def test_cbmo001_all_output(with_simple, dash_duo):
     # these two variants have identical results, but the internal behavior
     # is different when you combine the callbacks.
     if with_simple:
+
         @app.callback(
             [Output({"i": ALL}, "children"), Output("output", "children")],
-            [Input("values", "n_clicks"), Input({"i": ALL}, "id")]
+            [Input("values", "n_clicks"), Input({"i": ALL}, "id")],
         )
         def content_and_output(n2, content_ids):
             # this variant *does* get called with empty ALL, because of the
@@ -42,6 +46,7 @@ def test_cbmo001_all_output(with_simple, dash_duo):
             return content, sum(content)
 
     else:
+
         @app.callback(Output({"i": ALL}, "children"), [Input("values", "n_clicks")])
         def content_inner(n2):
             # this variant does NOT get called with empty ALL
@@ -71,7 +76,7 @@ def test_cbmo001_all_output(with_simple, dash_duo):
         ["#values", "4\n4\n4", "12"],
         ["#items", "", "0"],
         ["#values", "", "0"],
-        ["#items", "5", "5"]
+        ["#items", "5", "5"],
     ]
     for selector, content, output in actions:
         dash_duo.find_element(selector).click()
@@ -85,32 +90,43 @@ def test_cbmo001_all_output(with_simple, dash_duo):
 def test_cbmo002_all_and_match_output(with_simple, dash_duo):
     app = dash.Dash(__name__)
 
-    app.layout = html.Div(children=[
-        html.Button("items", id="items"),
-        html.Button("values", id="values"),
-        html.Div(id="content"),
-    ])
+    app.layout = html.Div(
+        children=[
+            html.Button("items", id="items"),
+            html.Button("values", id="values"),
+            html.Div(id="content"),
+        ]
+    )
 
     @app.callback(Output("content", "children"), [Input("items", "n_clicks")])
     def content(n1):
         return [
-            html.Div([
-                html.Div(
-                    [html.Div(id={"i": i, "j": j}) for i in range(((n1 or 0) + j) % 4)],
-                    className="content{}".format(j)
-                ),
-                html.Div(id={"j": j}, className="output{}".format(j)),
-                html.Hr(),
-            ])
+            html.Div(
+                [
+                    html.Div(
+                        [
+                            html.Div(id={"i": i, "j": j})
+                            for i in range(((n1 or 0) + j) % 4)
+                        ],
+                        className="content{}".format(j),
+                    ),
+                    html.Div(id={"j": j}, className="output{}".format(j)),
+                    html.Hr(),
+                ]
+            )
             for j in range(4)
         ]
 
     # these two variants have identical results, but the internal behavior
     # is different when you combine the callbacks.
     if with_simple:
+
         @app.callback(
-            [Output({"i": ALL, "j": MATCH}, "children"), Output({"j": MATCH}, "children")],
-            [Input("values", "n_clicks"), Input({"i": ALL, "j": MATCH}, "id")]
+            [
+                Output({"i": ALL, "j": MATCH}, "children"),
+                Output({"j": MATCH}, "children"),
+            ],
+            [Input("values", "n_clicks"), Input({"i": ALL, "j": MATCH}, "id")],
         )
         def content_and_output(n2, content_ids):
             # this variant *does* get called with empty ALL, because of the
@@ -122,9 +138,9 @@ def test_cbmo002_all_and_match_output(with_simple, dash_duo):
             return content, sum(content)
 
     else:
+
         @app.callback(
-            Output({"i": ALL, "j": MATCH}, "children"),
-            [Input("values", "n_clicks")]
+            Output({"i": ALL, "j": MATCH}, "children"), [Input("values", "n_clicks")]
         )
         def content_inner(n2):
             # this variant does NOT get called with empty ALL
@@ -137,7 +153,7 @@ def test_cbmo002_all_and_match_output(with_simple, dash_duo):
 
         @app.callback(
             Output({"j": MATCH}, "children"),
-            [Input({"i": ALL, "j": MATCH}, "children")]
+            [Input({"i": ALL, "j": MATCH}, "children")],
         )
         def out2(contents):
             return sum(contents)
@@ -157,7 +173,7 @@ def test_cbmo002_all_and_match_output(with_simple, dash_duo):
         ["#values", [["4\n4\n4", "12"], ["", "0"], ["4", "4"], ["4\n4", "8"]]],
         ["#items", [["", "0"], ["4", "4"], ["4\n4", "8"], ["4\n4\n4", "12"]]],
         ["#values", [["", "0"], ["5", "5"], ["5\n5", "10"], ["5\n5\n5", "15"]]],
-        ["#items", [["5", "5"], ["5\n5", "10"], ["5\n5\n5", "15"], ["", "0"]]]
+        ["#items", [["5", "5"], ["5\n5", "10"], ["5\n5\n5", "15"], ["", "0"]]],
     ]
     for selector, output_spec in actions:
         dash_duo.find_element(selector).click()
@@ -171,19 +187,21 @@ def test_cbmo002_all_and_match_output(with_simple, dash_duo):
 def test_cbmo003_multi_all(dash_duo):
     app = dash.Dash(__name__)
 
-    app.layout = html.Div(children=[
-        html.Button("items", id="items"),
-        html.Button("values", id="values"),
-        html.Div(id="content1"),
-        html.Hr(),
-        html.Div(id="content2"),
-        html.Hr(),
-        html.Div("Output init", id="output"),
-    ])
+    app.layout = html.Div(
+        children=[
+            html.Button("items", id="items"),
+            html.Button("values", id="values"),
+            html.Div(id="content1"),
+            html.Hr(),
+            html.Div(id="content2"),
+            html.Hr(),
+            html.Div("Output init", id="output"),
+        ]
+    )
 
     @app.callback(
         [Output("content1", "children"), Output("content2", "children")],
-        [Input("items", "n_clicks")]
+        [Input("items", "n_clicks")],
     )
     def content(n1):
         c1 = [html.Div(id={"i": i}) for i in range(((n1 or 0) + 2) % 4)]
@@ -192,7 +210,7 @@ def test_cbmo003_multi_all(dash_duo):
 
     @app.callback(
         [Output({"i": ALL}, "children"), Output({"j": ALL}, "children")],
-        [Input("values", "n_clicks")]
+        [Input("values", "n_clicks")],
     )
     def content_inner(n2):
         # this variant does NOT get called with empty ALL
@@ -206,7 +224,7 @@ def test_cbmo003_multi_all(dash_duo):
 
     @app.callback(
         Output("output", "children"),
-        [Input({"i": ALL}, "children"), Input({"j": ALL}, "children")]
+        [Input({"i": ALL}, "children"), Input({"j": ALL}, "children")],
     )
     def out2(ci, cj):
         return sum(ci) + sum(cj)
@@ -232,7 +250,7 @@ def test_cbmo003_multi_all(dash_duo):
         # all empty! we'll see an error logged if the callback was fired
         ["#items", "", "", "0"],
         ["#values", "", "", "0"],
-        ["#items", "7", "9", "16"]
+        ["#items", "7", "9", "16"],
     ]
     for selector, content1, content2, output in actions:
         dash_duo.find_element(selector).click()
diff --git a/tests/integration/callbacks/test_multiple_callbacks.py b/tests/integration/callbacks/test_multiple_callbacks.py
index ef807236..d9b13503 100644
--- a/tests/integration/callbacks/test_multiple_callbacks.py
+++ b/tests/integration/callbacks/test_multiple_callbacks.py
@@ -270,29 +270,32 @@ def test_cbmt007_early_preventupdate_inputs_above_below(dash_duo):
 
     @app.callback(Output("content", "children"), [Input("content", "style")])
     def content(_):
-        return html.Div([
-            html.Div(42, id="above-in"),
-            html.Div(id="above-dummy"),
-            html.Hr(),
-            html.Div(0, id='above-out'),
-            html.Div(0, id='below-out'),
-            html.Hr(),
-            html.Div(id="below-dummy"),
-            html.Div(44, id="below-in"),
-        ])
+        return html.Div(
+            [
+                html.Div(42, id="above-in"),
+                html.Div(id="above-dummy"),
+                html.Hr(),
+                html.Div(0, id="above-out"),
+                html.Div(0, id="below-out"),
+                html.Hr(),
+                html.Div(id="below-dummy"),
+                html.Div(44, id="below-in"),
+            ]
+        )
 
     # Create 4 callbacks - 2 above, 2 below.
-    for pos in ('above', 'below'):
+    for pos in ("above", "below"):
+
         @app.callback(
             Output("{}-dummy".format(pos), "children"),
-            [Input("{}-dummy".format(pos), "style")]
+            [Input("{}-dummy".format(pos), "style")],
         )
         def dummy(_):
             raise PreventUpdate
 
         @app.callback(
-            Output('{}-out'.format(pos), 'children'),
-            [Input('{}-in'.format(pos), 'children')]
+            Output("{}-out".format(pos), "children"),
+            [Input("{}-in".format(pos), "children")],
         )
         def out(v):
             return v
