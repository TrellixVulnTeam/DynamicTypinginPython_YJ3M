commit a27a5b7443561475ed1de6111c8b30e03d5880fd
Author: Ryan Marren <rymarr@tuta.io>
Date:   Fri Jun 8 22:30:56 2018 -0400

    generate_class_string and generate_class_file functions with tests.

diff --git a/dash/development/base_component.py b/dash/development/base_component.py
index d647df24..51238d80 100644
--- a/dash/development/base_component.py
+++ b/dash/development/base_component.py
@@ -1,5 +1,7 @@
 import collections
 import copy
+import os
+import errno
 
 
 def is_number(s):
@@ -200,9 +202,9 @@ class Component(collections.MutableMapping):
 
 
 # pylint: disable=unused-argument
-def generate_class(typename, props, description, namespace):
+def generate_class_string(typename, props, description, namespace):
     """
-    Dynamically generate classes to have nicely formatted docstrings,
+    Dynamically generate class strings to have nicely formatted docstrings,
     keyword arguments, and repr
 
     Inspired by http://jameso.be/2013/08/06/namedtuple.html
@@ -216,6 +218,7 @@ def generate_class(typename, props, description, namespace):
 
     Returns
     -------
+    string
 
     """
     # TODO _prop_names, _type, _namespace, available_events,
@@ -276,13 +279,13 @@ def generate_class(typename, props, description, namespace):
             return (
                 '{typename}(' +
                 repr(getattr(self, self._prop_names[0], None)) + ')')
-    '''
+'''
 
     filtered_props = reorder_props(filter_props(props))
     # pylint: disable=unused-variable
     list_of_valid_wildcard_attr_prefixes = repr(parse_wildcards(props))
     # pylint: disable=unused-variable
-    list_of_valid_keys = repr(list(filtered_props.keys()))
+    list_of_valid_keys = repr(list(map(str, filtered_props.keys())))
     # pylint: disable=unused-variable
     docstring = create_docstring(
         component_name=typename,
@@ -302,9 +305,61 @@ def generate_class(typename, props, description, namespace):
 
     required_args = required_props(props)
 
+    return c.format(**locals())
+
+
+# pylint: disable=unused-argument
+def generate_class_file(typename, props, description, namespace):
+    """
+    Generate a python class file (.py) given a class string
+
+    Parameters
+    ----------
+    typename
+    props
+    description
+    namespace
+
+    Returns
+    -------
+
+    """
+    string = generate_class_string(typename, props, description, namespace)
+    file_name = "{:s}.py".format(typename)
+
+    # Convoluted way since os.makedirs(..., exist_ok=True) only >=3.2
+    try:
+        os.makedirs(namespace)
+    except OSError as exc:  # Python >2.5
+        if exc.errno == errno.EEXIST and os.path.isdir(namespace):
+            pass
+        else:
+            raise
+    file_path = os.path.join(namespace, file_name)
+    with open(file_path, 'w') as f:
+        f.write(string)
+
+
+# pylint: disable=unused-argument
+def generate_class(typename, props, description, namespace):
+    """
+    Generate a python class object given a class string
+
+    Parameters
+    ----------
+    typename
+    props
+    description
+    namespace
+
+    Returns
+    -------
+
+    """
+    string = generate_class_string(typename, props, description, namespace)
     scope = {'Component': Component}
     # pylint: disable=exec-used
-    exec(c.format(**locals()), scope)
+    exec(string, scope)
     result = scope[typename]
     return result
 
diff --git a/tests/development/metadata_test.py b/tests/development/metadata_test.py
new file mode 100644
index 00000000..68a8edeb
--- /dev/null
+++ b/tests/development/metadata_test.py
@@ -0,0 +1,72 @@
+class Table(Component):
+    """A Table component.
+This is a description of the component.
+It's multiple lines long.
+
+Keyword arguments:
+- children (a list of or a singular dash component, string or number; optional)
+- optionalArray (list; optional): Description of optionalArray
+- optionalBool (boolean; optional)
+- optionalNumber (number; optional)
+- optionalObject (dict; optional)
+- optionalString (string; optional)
+- optionalNode (a list of or a singular dash component, string or number; optional)
+- optionalElement (dash component; optional)
+- optionalEnum (a value equal to: 'News', 'Photos'; optional)
+- optionalUnion (string | number; optional)
+- optionalArrayOf (list; optional)
+- optionalObjectOf (dict with strings as keys and values of type number; optional)
+- optionalObjectWithShapeAndNestedDescription (optional): . optionalObjectWithShapeAndNestedDescription has the following type: dict containing keys 'color', 'fontSize', 'figure'.
+Those keys have the following types: 
+  - color (string; optional)
+  - fontSize (number; optional)
+  - figure (optional): Figure is a plotly graph object. figure has the following type: dict containing keys 'data', 'layout'.
+Those keys have the following types: 
+  - data (list; optional): data is a collection of traces
+  - layout (dict; optional): layout describes the rest of the figure
+- optionalAny (boolean | number | string | dict | list; optional)
+- customProp (optional)
+- customArrayProp (list; optional)
+- data-* (string; optional)
+- aria-* (string; optional)
+- id (string; optional)
+
+Available events: 'restyle', 'relayout', 'click'"""
+    def __init__(self, children=None, **kwargs):
+        self._prop_names = ['children', 'optionalArray', 'optionalBool', 'optionalNumber', 'optionalObject', 'optionalString', 'optionalNode', 'optionalElement', 'optionalEnum', 'optionalUnion', 'optionalArrayOf', 'optionalObjectOf', 'optionalObjectWithShapeAndNestedDescription', 'optionalAny', 'customProp', 'customArrayProp', 'data-*', 'aria-*', 'id']
+        self._type = 'Table'
+        self._namespace = 'TableComponents'
+        self._valid_wildcard_attributes =            ['data-', 'aria-']
+        self.available_events = ['restyle', 'relayout', 'click']
+        self.available_properties = ['children', 'optionalArray', 'optionalBool', 'optionalNumber', 'optionalObject', 'optionalString', 'optionalNode', 'optionalElement', 'optionalEnum', 'optionalUnion', 'optionalArrayOf', 'optionalObjectOf', 'optionalObjectWithShapeAndNestedDescription', 'optionalAny', 'customProp', 'customArrayProp', 'data-*', 'aria-*', 'id']
+        self.available_wildcard_properties =            ['data-', 'aria-']
+
+        for k in []:
+            if k not in kwargs:
+                raise TypeError(
+                    'Required argument `' + k + '` was not specified.')
+
+        super(Table, self).__init__(children=children, **kwargs)
+
+    def __repr__(self):
+        if(any(getattr(self, c, None) is not None
+               for c in self._prop_names
+               if c is not self._prop_names[0])
+           or any(getattr(self, c, None) is not None
+                  for c in self.__dict__.keys()
+                  if any(c.startswith(wc_attr)
+                  for wc_attr in self._valid_wildcard_attributes))):
+            props_string = ', '.join([c+'='+repr(getattr(self, c, None))
+                                      for c in self._prop_names
+                                      if getattr(self, c, None) is not None])
+            wilds_string = ', '.join([c+'='+repr(getattr(self, c, None))
+                                      for c in self.__dict__.keys()
+                                      if any([c.startswith(wc_attr)
+                                      for wc_attr in
+                                      self._valid_wildcard_attributes])])
+            return ('Table(' + props_string +
+                   (', ' + wilds_string if wilds_string != '' else '') + ')')
+        else:
+            return (
+                'Table(' +
+                repr(getattr(self, self._prop_names[0], None)) + ')')
diff --git a/tests/development/test_base_component.py b/tests/development/test_base_component.py
index 9b4b3b60..9137fa37 100644
--- a/tests/development/test_base_component.py
+++ b/tests/development/test_base_component.py
@@ -8,6 +8,8 @@ import plotly
 
 from dash.development.base_component import (
     generate_class,
+    generate_class_string,
+    generate_class_file,
     Component,
     js_to_py_type,
     create_docstring,
@@ -488,6 +490,58 @@ class TestComponent(unittest.TestCase):
         self.assertTrue(c2_popped is c2)
 
 
+class TestGenerateClassFile(unittest.TestCase):
+    def setUp(self):
+        json_path = os.path.join('tests', 'development', 'metadata_test.json')
+        with open(json_path) as data_file:
+            json_string = data_file.read()
+            data = json\
+                .JSONDecoder(object_pairs_hook=collections.OrderedDict)\
+                .decode(json_string)
+            self.data = data
+
+        # Class string generated from generate_class_string
+        self.component_class_string = generate_class_string(
+            typename='Table',
+            props=data['props'],
+            description=data['description'],
+            namespace='TableComponents'
+        )
+
+        # Class string written to file
+        generate_class_file(
+            typename='Table',
+            props=data['props'],
+            description=data['description'],
+            namespace='TableComponents'
+        )
+        written_file_path = os.path.join(
+            'TableComponents', "Table.py"
+        )
+        with open(written_file_path, 'r') as f:
+            self.written_class_string = f.read()
+        
+        # The expected result for both class string and class file generation
+        expected_string_path = os.path.join(
+            'tests', 'development', 'metadata_test.py'
+        )
+        with open(expected_string_path, 'r') as f:
+            self.expected_class_string = f.read()
+
+
+    def test_class_string(self):
+        self.assertEqual(
+            self.expected_class_string,
+            self.component_class_string
+        )
+
+    def test_class_file(self):
+        self.assertEqual(
+            self.expected_class_string,
+            self.written_class_string
+        )
+
+
 class TestGenerateClass(unittest.TestCase):
     def setUp(self):
         path = os.path.join('tests', 'development', 'metadata_test.json')
