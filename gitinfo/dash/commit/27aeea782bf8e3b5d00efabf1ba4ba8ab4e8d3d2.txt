commit 27aeea782bf8e3b5d00efabf1ba4ba8ab4e8d3d2
Author: Ryan Patrick Kyle <ryan@plot.ly>
Date:   Fri Dec 7 23:29:03 2018 -0500

    edits to resolve pylint and flake8 unhappiness

diff --git a/dash/development/_all_keywords.py b/dash/development/_all_keywords.py
index 550c1d9f..a7498141 100644
--- a/dash/development/_all_keywords.py
+++ b/dash/development/_all_keywords.py
@@ -3,70 +3,23 @@
 # >>> import keyword
 # >>> keyword.kwlist
 
-python_keywords = set([
-    'and',
-    'elif',
-    'is',
-    'global',
-    'as',
-    'in',
-    'if',
-    'from',
-    'raise',
-    'for',
-    'except',
-    'nonlocal',
-    'pass',
-    'finally',
-    'print',
-    'import',
-    'True',
-    'None',
-    'return',
-    'exec',
-    'await',
-    'else',
-    'break',
-    'not',
-    'with',
-    'class',
-    'assert',
-    'False',
-    'yield',
-    'try',
-    'while',
-    'continue',
-    'del',
-    'async',
-    'or',
-    'def',
-    'lambda'
-])
+python_keywords = {
+    'and', 'elif', 'is', 'global', 'as', 'in', 'if', 'from', 'raise', 'for',
+    'except', 'nonlocal', 'pass', 'finally', 'print', 'import', 'True', 'None',
+    'return', 'exec', 'await', 'else', 'break', 'not', 'with', 'class',
+    'assert', 'False', 'yield', 'try', 'while', 'continue', 'del', 'async',
+    'or', 'def', 'lambda'
+}
 
-# This is a set of R reserved words that cannot be used as function argument names.
+# This is a set of R reserved words that cannot be used as function
+# argument names.
 #
-# Reserved words can be obtained from R's help pages by executing the statement below:
+# Reserved words can be obtained from R's help pages by executing the
+# statement below:
 # > ?reserved
 
-r_keywords = set([
-    'if',
-    'else',
-    'repeat',
-    'while',
-    'function',
-    'for',
-    'in',
-    'next',
-    'break',
-    'TRUE',
-    'FALSE',
-    'NULL',
-    'Inf',
-    'NaN',
-    'NA',
-    'NA_integer_',
-    'NA_real_',
-    'NA_complex_',
-    'NA_character_',
-    '...'
-])
+r_keywords = {
+    'if', 'else', 'repeat', 'while', 'function', 'for', 'in', 'next', 'break',
+    'TRUE', 'FALSE', 'NULL', 'Inf', 'NaN', 'NA', 'NA_integer_', 'NA_real_',
+    'NA_complex_', 'NA_character_', '...'
+}
diff --git a/dash/development/_r_components_generation.py b/dash/development/_r_components_generation.py
index f2070c03..edaa16bc 100644
--- a/dash/development/_r_components_generation.py
+++ b/dash/development/_r_components_generation.py
@@ -61,7 +61,7 @@ def generate_class_string_r(name, props, project_shortname, prefix):
     component <- append_wildcard_props(component, wildcards = {default_wildcards}, ...)
 
     structure(component, class = c('dash_component', 'list'))
-}}'''
+}}'''  # noqa:E501
 
     # Here we convert from snake case to camel case
     package_name = make_package_name_r(project_shortname)
@@ -84,8 +84,8 @@ def generate_class_string_r(name, props, project_shortname, prefix):
     # Here we'll do that if no default value exists
     default_wildcards += ", ".join(
         ('\'{:s}\''.format(p))
-         for p in prop_keys
-         if '*' in p
+        for p in prop_keys
+        if '*' in p
     )
 
     if default_wildcards == '':
@@ -95,12 +95,12 @@ def generate_class_string_r(name, props, project_shortname, prefix):
 
     default_argtext += ", ".join(
         ('{:s}={}'.format(p, json_to_r_type(props[p]))
-          if 'defaultValue' in props[p] else
-          '{:s}=NULL'.format(p))
-         for p in prop_keys
-         if not p.endswith("-*") and
-         p not in r_keywords and
-         p not in ['setProps', 'dashEvents', 'fireEvent']
+         if 'defaultValue' in props[p] else
+         '{:s}=NULL'.format(p))
+        for p in prop_keys
+        if not p.endswith("-*") and
+        p not in r_keywords and
+        p not in ['setProps', 'dashEvents', 'fireEvent']
     )
 
     if 'children' in props:
@@ -109,12 +109,13 @@ def generate_class_string_r(name, props, project_shortname, prefix):
     # pylint: disable=C0301
     default_paramtext += ", ".join(
         ('{:s}={:s}'.format(p, p)
-          if p != "children" else
-          '{:s}=c(children, assert_valid_children(..., wildcards = {:s}))'.format(p, default_wildcards))
-         for p in props.keys()
-         if not p.endswith("-*") and
-         p not in r_keywords and
-         p not in ['setProps', 'dashEvents', 'fireEvent']
+         if p != "children" else
+         '{:s}=c(children, assert_valid_children(..., wildcards = {:s}))'
+         .format(p, default_wildcards))
+        for p in props.keys()
+        if not p.endswith("-*") and
+        p not in r_keywords and
+        p not in ['setProps', 'dashEvents', 'fireEvent']
     )
     return c.format(prefix=prefix,
                     name=name,
@@ -173,6 +174,7 @@ script = "{dep_rpp}",
 stylesheet = NULL, head = NULL, attachment = NULL, package = "{rpkgname}",
 all_files = FALSE), class = "html_dependency")'''
 
+    # pylint: disable=consider-using-enumerate
     if len(jsdist) > 1:
         for dep in range(len(jsdist)):
             if jsdist[dep]['relative_package_path'].__contains__('dash_'):
@@ -180,32 +182,37 @@ all_files = FALSE), class = "html_dependency")'''
             else:
                 dep_name = '{:s}_{:s}'.format(project_shortname, str(dep))
                 project_ver = str(dep)
-            function_frame += [function_frame_element.format(dep_name=dep_name,
-                                                             project_ver=project_ver,
-                                                             rpkgname=rpkgname,
-                                                             project_shortname=project_shortname,
-                                                             dep_rpp=jsdist[dep]['relative_package_path'])
-                               ]
+            function_frame += [function_frame_element.format(
+                dep_name=dep_name,
+                project_ver=project_ver,
+                rpkgname=rpkgname,
+                project_shortname=project_shortname,
+                dep_rpp=jsdist[dep]['relative_package_path']
+            )
+                              ]
             function_frame_body = ',\n'.join(function_frame)
     elif len(jsdist) == 1:
+        # pylint: disable=line-too-long
         function_frame_body = '''`{project_shortname}` = structure(list(name = "{project_shortname}",
 version = "{project_ver}", src = list(href = NULL,
 file = "lib/"), meta = NULL,
 script = "{dep_rpp}",
 stylesheet = NULL, head = NULL, attachment = NULL, package = "{rpkgname}",
-all_files = FALSE), class = "html_dependency")'''.format(project_shortname=project_shortname,
-                                                         project_ver=project_ver,
-                                                         rpkgname=rpkgname,
-                                                         dep_rpp=jsdist[0]['relative_package_path'])
+all_files = FALSE), class = "html_dependency")'''.\
+            format(project_shortname=project_shortname,
+                   project_ver=project_ver,
+                   rpkgname=rpkgname,
+                   dep_rpp=jsdist[0]['relative_package_path']
+                  )
 
     function_frame_close = ''')
-    return(deps_metadata)
+return(deps_metadata)
 }'''
 
     function_string = ''.join([function_frame_open,
-                              function_frame_body,
-                              function_frame_close]
-                              )
+                               function_frame_body,
+                               function_frame_close]
+                             )
 
     return function_string
 
@@ -236,13 +243,13 @@ def write_help_file_r(name, props, description, prefix):
     props = reorder_props(props=props)
 
     default_argtext += ", ".join(
-        ('{:s}={}'.format(p, json_to_r_type(props[p]))
-          if 'defaultValue' in props[p] else
-          '{:s}=NULL'.format(p))
-         for p in prop_keys
-         if not p.endswith("-*") and
-         p not in r_keywords and
-         p not in ['setProps', 'dashEvents', 'fireEvent']
+        '{:s}={}'.format(p, json_to_r_type(props[p]))
+        if 'defaultValue' in props[p] else
+        '{:s}=NULL'.format(p)
+        for p in prop_keys
+        if not p.endswith("-*") and
+        p not in r_keywords and
+        p not in ['setProps', 'dashEvents', 'fireEvent']
     )
 
     item_text += "\n\n".join(
@@ -281,7 +288,11 @@ def write_help_file_r(name, props, description, prefix):
         ))
 
 
-def write_class_file_r(name, props, description, project_shortname, prefix=None):
+def write_class_file_r(name,
+                       props,
+                       description,
+                       project_shortname,
+                       prefix=None):
     """
     Generate a R class file (.R) given a class string
 
@@ -330,6 +341,7 @@ def write_class_file_r(name, props, description, project_shortname, prefix=None)
     # we may eventually be able to generate similar documentation using
     # doxygen and an R plugin, but for now we'll just do it on our own
     # from within Python
+    # noqa E344
     write_help_file_r(
         name,
         props,
@@ -340,7 +352,7 @@ def write_class_file_r(name, props, description, project_shortname, prefix=None)
     print('Generated {}'.format(file_name))
 
 
-# pylint: disable=unused-variable
+# pylint: disable=inconsistent-return-statements
 def generate_export_string_r(name, prefix):
     if not name.endswith('-*') and \
             str(name) not in r_keywords and \
@@ -432,8 +444,7 @@ def generate_rpkg(pkg_data,
     import_string =\
         '# AUTO GENERATED FILE - DO NOT EDIT\n\n'
 
-    description_string = \
-    '''Package: {package_name}
+    description_string = '''Package: {package_name}
 Title: {package_description}
 Version: {package_version}
 Authors @R: as.person(c({package_author}))
@@ -448,14 +459,16 @@ Author: {package_author_no_email}
 Maintainer: {package_author}
 '''
 
-    description_string = description_string.format(package_name=package_name,
-                                                   package_description=package_description,
-                                                   package_version=package_version,
-                                                   package_author=package_author,
-                                                   package_license=package_license,
-                                                   package_url=package_url,
-                                                   package_issues=package_issues,
-                                                   package_author_no_email=package_author_no_email)
+    description_string = description_string.format(
+        package_name=package_name,
+        package_description=package_description,
+        package_version=package_version,
+        package_author=package_author,
+        package_license=package_license,
+        package_url=package_url,
+        package_issues=package_issues,
+        package_author_no_email=package_author_no_email
+    )
 
     rbuild_ignore_string = r'''# ignore JS config files/folders
 node_modules/
@@ -524,8 +537,14 @@ def get_shortname_prefix(project_shortname):
 
     return prefix
 
-# pylint: disable=unused-variable
-def generate_exports_r(project_shortname, components, metadata, pkg_data, prefix, **kwargs):
+
+# pylint: disable=unused-argument
+def generate_exports_r(project_shortname,
+                       components,
+                       metadata,
+                       pkg_data,
+                       prefix,
+                       **kwargs):
     export_string = ''
     for component in components:
         if not component.endswith('-*') and \
@@ -540,4 +559,4 @@ def generate_exports_r(project_shortname, components, metadata, pkg_data, prefix
         pkg_data,
         project_shortname,
         export_string
-    )
\ No newline at end of file
+    )
diff --git a/dash/development/component_generator.py b/dash/development/component_generator.py
index 2ce999f8..a044a3e4 100644
--- a/dash/development/component_generator.py
+++ b/dash/development/component_generator.py
@@ -10,7 +10,6 @@ import shutil
 import functools
 
 import pkg_resources
-from .component_loader import _get_metadata
 
 from ._r_components_generation import write_class_file_r
 from ._r_components_generation import generate_exports_r
@@ -19,6 +18,7 @@ from ._py_components_generation import generate_class_file
 from ._py_components_generation import generate_imports
 from ._py_components_generation import generate_classes_files
 
+
 class _CombinedFormatter(argparse.ArgumentDefaultsHelpFormatter,
                          argparse.RawDescriptionHelpFormatter):
     pass
@@ -67,12 +67,10 @@ def generate_components(components_source, project_shortname,
 
     metadata = json.loads(out.decode())
     generator_methods = [generate_class_file]
-    # pkg_generator_methods = [generate_imports]
 
     if generate_r_components:
         generator_methods.append(
             functools.partial(write_class_file_r, prefix=prefix))
-        #generator_methods.append(generate_rpkg)
 
     components = generate_classes_files(
         project_shortname,
@@ -94,34 +92,9 @@ def generate_components(components_source, project_shortname,
         with open('package.json', 'r') as f:
             pkg_data = json.load(f)
 
-        generate_exports_r(project_shortname, components, metadata, pkg_data, prefix)
-
-
-def generate_components_r(namespace,
-                          metadata_path='lib/metadata.json',
-                          pkgjson_path='package.json'):
-    """Load React component metadata into a format Dash can parse,
-    then create R files for component loading.
-
-    Usage: generate_classes_r()
-
-    Keyword arguments:
-    namespace -- name of the generated python package (also output dir)
-
-    metadata_path -- a path to a JSON file created by
-    [`react-docgen`](https://github.com/reactjs/react-docgen).
-
-    pkgjson_path -- a path to a JSON file created by
-    [`cookiecutter`](https://github.com/audreyr/cookiecutter).
-
-    Returns:
-    """
-
-    data = _get_metadata(metadata_path)
-    pkg_data = _get_metadata(pkgjson_path)
-    export_string = ''
-
-
+        generate_exports_r(
+            project_shortname, components, metadata, pkg_data, prefix
+        )
 
 
 def cli():
