commit 2412b388ed75d84d789d0fa41f50c434535c057c
Author: Carl Dawson <carl@carlsdawson.com>
Date:   Mon May 11 10:21:48 2020 -0700

    Minor refactor, no need for Object.defineProperty

diff --git a/dash-renderer/src/actions/index.js b/dash-renderer/src/actions/index.js
index c2c8b9c4..7ce35952 100644
--- a/dash-renderer/src/actions/index.js
+++ b/dash-renderer/src/actions/index.js
@@ -558,32 +558,31 @@ function handleClientside(clientside_function, payload) {
 
     const {inputs, outputs, state} = payload;
 
-    if (!dc.callback_context) {
-        Object.defineProperty(dc, 'callback_context', {
-            value: {'triggered': [{'prop_id': '.', 'value': null}],
-                    'inputs_list': inputsToDict(payload.inputs),
-                    'inputs': payload.inputs,
-                    'outputs_list': payload.outputs}
-                    // TODO: add the rest: states, states_list, response(??)
-        })
-    }
-    else{
+    let returnValue;
+
+    try {
+        // setup callback context
         let input_dict = inputsToDict(inputs);
-        dc.callback_context.triggered = payload.changedPropIds.map(
-            prop_id => ({'prop_id': prop_id, 'value': input_dict[prop_id]}));
+        dc.callback_context = {};
+        if (payload.changedPropIds.length === 0) {
+            dc.callback_context.triggered = [{'prop_id': '.', 'value': null}];
+        }
+        else {
+            dc.callback_context.triggered = payload.changedPropIds.map(
+                prop_id => ({'prop_id': prop_id, 'value': input_dict[prop_id]}));
+        }
         dc.callback_context.inputs_list = input_dict;
         dc.callback_context.inputs = inputs;
-    }
+        // TODO: add the rest: states, states_list, response(??)
 
-    let returnValue;
-
-    try {
         const {namespace, function_name} = clientside_function;
         let args = inputs.map(getVals);
         if (state) {
             args = concat(args, state.map(getVals));
         }
         returnValue = dc[namespace][function_name](...args);
+        
+        delete dc.callback_context;
     } catch (e) {
         if (e === dc.PreventUpdate) {
             return {};
