commit 0fa999c357a0b1ef37002be909dc5eb0973087ff
Author: chriddyp <chris@plot.ly>
Date:   Mon Apr 25 16:45:13 2016 -0400

    :stars: add an action that can update the props of a component
    
    components that have the `editable` prop are wrapped by the
    <EditableContent> container.
    <EditableContent> is a “connected” component and merges an
    `updateProps` dispatching function to its child.
    The child can call updateProps with an object that can update its own
    props. `updateProps` updates the global state (“`layout`”) with these
    new properties and triggers a re-render through redux.

diff --git a/renderer/src/actions/index.js b/renderer/src/actions/index.js
index f6de6b26..85e368a9 100644
--- a/renderer/src/actions/index.js
+++ b/renderer/src/actions/index.js
@@ -1,3 +1,11 @@
 import { createAction } from 'redux-actions';
 
-export const editChildrenString = createAction('EDIT_CHILDREN_STRING');
+export const ACTIONS = (action) => {
+    const actionList = {
+        ON_PROP_CHANGE: 'ON_PROP_CHANGE'
+    };
+    if (actionList[action]) return actionList[action];
+    else throw new Exception(`${action} is not defined.`)
+};
+
+export const updateProps = createAction(ACTIONS('ON_PROP_CHANGE'));
diff --git a/renderer/src/components/core/EditableContent.react.js b/renderer/src/components/core/EditableContent.react.js
index d6cba505..9d80ff85 100644
--- a/renderer/src/components/core/EditableContent.react.js
+++ b/renderer/src/components/core/EditableContent.react.js
@@ -1,7 +1,7 @@
 import React, { PropTypes } from 'react';
 
 import { connect } from 'react-redux'
-import { editChildrenString } from '../../actions'
+import { updateProps } from '../../actions'
 
 /*
  * EditableContent passes a connected onChange handler down to its child
@@ -14,15 +14,19 @@ const mapStateToProps = (state, ownProps) => {
 
 const mapDispatchToProps = (dispatch, ownProps) => {
   return {
-    onChange: (e) => {
-      dispatch(editChildrenString(e.target.value, ownProps.path))
+    updateProps: (newProps) => {
+        console.warn('newProps: ', newProps);
+        dispatch(updateProps({
+            props: newProps,
+            itempath: React.Children.only(ownProps.children).props.path
+        }));
     }
   }
 }
 
-const EditableContent = ({ onChange, children }) => {
+const EditableContent = ({ updateProps, children }) => {
     // pass onChange as props to the child element e.g. an <input>
-    return React.cloneElement(children, { onChange });
+    return React.cloneElement(children, {updateProps});
 };
 
 EditableContent.propTypes = {
diff --git a/renderer/src/reducers/layout.js b/renderer/src/reducers/layout.js
index 5a7e5071..89b55308 100644
--- a/renderer/src/reducers/layout.js
+++ b/renderer/src/reducers/layout.js
@@ -1,6 +1,8 @@
 import R from 'ramda';
+import Immutable from 'immutable';
 
 import spec from '../spec.js';
+import {ACTIONS} from '../actions';
 
 const pad = R.curry((array, paddingValue) => array.reduce((r, v) => {
     r.push(paddingValue);
@@ -13,7 +15,14 @@ const layout = (state, action) => {
         case 'EDIT_CHILDREN_STRING':
             // TODO: Update the children component of the state with this action
             console.warn('EDIT_CHILDREN_STRING: ', action);
+
+        // Update the props of the component
+        case ACTIONS('ON_PROP_CHANGE'): {
+            const path = createTreePath(action.payload.itempath);
+            path.push('props');
+            state = state.mergeIn(path, action.payload.props);
             return state;
+        }
         case 'REORDER_CHILDREN': {
             // TODO: wire this in to our drop targets
             const itemTreePath = createTreePath(action.itempath);  // [3, 1, 4, 5]
@@ -29,7 +38,8 @@ const layout = (state, action) => {
             return state;
         }
         default:
-            return spec;
+            return state;
+
     }
 }
 
diff --git a/renderer/src/renderTree.js b/renderer/src/renderTree.js
index a40c41f0..6abcb270 100644
--- a/renderer/src/renderTree.js
+++ b/renderer/src/renderTree.js
@@ -50,7 +50,7 @@ export default function render(component, path=[]) {
     }
 
     // editable?
-    if (component.onChange) {
+    if (component.props.editable) {
         content = (
             <EditableContent>
                 {content}
