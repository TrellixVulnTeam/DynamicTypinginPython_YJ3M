commit c271d940763b4ea80ddc4d2a3d46bc169c3682b8
Author: chriddyp <chris@plot.ly>
Date:   Wed Sep 27 23:01:03 2017 -0400

    check for out-of-order requests after the async `res.json()` call
    
    also add some debugging metadata to the request queue

diff --git a/src/actions/index.js b/src/actions/index.js
index d8594944..53250fc6 100644
--- a/src/actions/index.js
+++ b/src/actions/index.js
@@ -1,5 +1,6 @@
 /* global fetch:true, Promise:true, document:true */
 import {
+    __,
     adjust,
     any,
     concat,
@@ -11,10 +12,9 @@ import {
     isEmpty,
     keys,
     lensPath,
-    lensProp,
+    merge,
     pluck,
     propEq,
-    set,
     slice,
     sort,
     type,
@@ -298,7 +298,12 @@ export function notifyObservers(payload) {
          * action
          */
         const newRequestQueue = queuedObservers.map(
-            i => ({controllerId: i, status: 'loading', uid: uid()})
+            i => ({
+                controllerId: i,
+                status: 'loading',
+                uid: uid(),
+                requestTime: Date.now()
+            })
         )
         dispatch(setRequestQueue(
             concat(
@@ -379,35 +384,58 @@ export function notifyObservers(payload) {
                 body: JSON.stringify(payload)
             }).then(function handleResponse(res) {
 
-                // update the status of this request
-                const postRequestQueue = getState().requestQueue;
-                const requestUid = newRequestQueue[i].uid;
-                const thisRequestIndex = findIndex(
-                    propEq('uid', requestUid),
-                    postRequestQueue
-                );
-                const updatedQueue = adjust(
-                    set(lensProp('status'), res.status),
-                    thisRequestIndex,
-                    postRequestQueue
-                );
-                dispatch(setRequestQueue(updatedQueue));
-
-                /*
-                 * Check to see if another request has already come back
-                 * _after_ this one.
-                 * If so, ignore this request.
-                 */
-                const latestRequestIndex = findLastIndex(
-                    propEq('controllerId', newRequestQueue[i].controllerId),
-                    updatedQueue
-                );
-                if (latestRequestIndex > thisRequestIndex &&
-                    updatedQueue[latestRequestIndex].status === 200) {
+                const getThisRequestIndex = () => {
+                    const postRequestQueue = getState().requestQueue;
+                    const requestUid = newRequestQueue[i].uid;
+                    const thisRequestIndex = findIndex(
+                        propEq('uid', requestUid),
+                        postRequestQueue
+                    );
+                    return thisRequestIndex;
+                }
+
+                const updateRequestQueue = rejected => {
+                    const postRequestQueue = getState().requestQueue
+                    const thisRequestIndex = getThisRequestIndex();
+                    const updatedQueue = adjust(
+                        merge(__, {
+                            status: res.status,
+                            responseTime: Date.now(),
+                            rejected
+                        }),
+                        thisRequestIndex,
+                        postRequestQueue
+                    );
+
+                    dispatch(setRequestQueue(updatedQueue));
+                }
+
+                if (res.status !== 200) {
+                    // update the status of this request
+                    updateRequestQueue(true);
                     return;
                 }
 
                 return res.json().then(function handleJson(data) {
+                    /*
+                     * Check to see if another request has already come back
+                     * _after_ this one.
+                     * If so, ignore this request.
+                     */
+                    const latestRequestIndex = findLastIndex(
+                        propEq('controllerId', newRequestQueue[i].controllerId),
+                        getState().requestQueue
+                    );
+                    let rejected = latestRequestIndex > getThisRequestIndex();
+
+                    updateRequestQueue(rejected);
+
+                    if (rejected) {
+                        /* eslint-disable */
+                        console.warn('--> update rejected');
+                        /* eslint-enable */
+                        return;
+                    }
 
                     /*
                      * it's possible that this output item is no longer visible.
@@ -510,7 +538,8 @@ export function notifyObservers(payload) {
 
                     }
 
-            })}));
+                });
+            }));
 
         }
 
