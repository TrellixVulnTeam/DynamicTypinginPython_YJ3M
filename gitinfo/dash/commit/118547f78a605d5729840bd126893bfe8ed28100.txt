commit 118547f78a605d5729840bd126893bfe8ed28100
Author: alexcjohnson <alex@plot.ly>
Date:   Sun Sep 15 21:55:10 2019 -0400

    fix unit tests and error handler for multi-ID persistence

diff --git a/dash-renderer/src/persistence.js b/dash-renderer/src/persistence.js
index 13f957ba..0e276188 100644
--- a/dash-renderer/src/persistence.js
+++ b/dash-renderer/src/persistence.js
@@ -336,7 +336,7 @@ export function recordUiEdit(layout, newProps, dispatch) {
                     originalVal === undefined
                         ? [newVal]
                         : [newVal, originalVal];
-                storage.setItem(valsKey, vals);
+                storage.setItem(valsKey, vals, dispatch);
             }
         }
     }, persisted_props);
diff --git a/dash-renderer/tests/persistence.test.js b/dash-renderer/tests/persistence.test.js
index ac5c3df8..3357af6f 100644
--- a/dash-renderer/tests/persistence.test.js
+++ b/dash-renderer/tests/persistence.test.js
@@ -112,8 +112,7 @@ describe('storage fallbacks and equivalence', () => {
             recordUiEdit(layout, {p1: propVal}, _dispatch);
             expect(dispatchCalls).toEqual([]);
             expect(consoleCalls).toEqual([]);
-            expect(store.getItem(`${storePrefix}a.p1`)).toEqual(propStr);
-            expect(store.getItem(`${storePrefix}a.p1.orig`)).toEqual('U');
+            expect(store.getItem(`${storePrefix}a.p1.true`)).toBe(`[${propStr}]`);
         });
 
         test(`${storeName} full from persistence works with warnings`, () => {
@@ -125,7 +124,7 @@ describe('storage fallbacks and equivalence', () => {
                 `${storeName} init set/get succeeded after clearing!`
             ]);
             expect(consoleCalls).toEqual(dispatchCalls);
-            expect(store.getItem(`${storePrefix}a.p1`)).toBe(propStr);
+            expect(store.getItem(`${storePrefix}a.p1.true`)).toBe(`[${propStr}]`);
             // Boolean so we don't see the very long value if test fails
             const x = Boolean(store.getItem(`${storePrefix}x.x`));
             expect(x).toBe(false);
@@ -140,7 +139,7 @@ describe('storage fallbacks and equivalence', () => {
                 `${storeName} init still failed, falling back to memory`
             ]);
             expect(consoleCalls).toEqual(dispatchCalls);
-            expect(stores.memory.getItem('a.p1')).toBe(propVal);
+            expect(stores.memory.getItem('a.p1.true')).toEqual([propVal]);
             const x = Boolean(store.getItem('not_ours'));
             expect(x).toBe(true);
         });
@@ -156,7 +155,7 @@ describe('storage fallbacks and equivalence', () => {
             // now flood it.
             recordUiEdit(layout, {p1: longString(26)}, _dispatch);
             expect(dispatchCalls).toEqual([
-                `a.p1 failed to save in ${storeName}. Persisted props may be lost.`
+                `a.p1.true failed to save in ${storeName}. Persisted props may be lost.`
             ]);
             expect(consoleCalls).toEqual(dispatchCalls);
         });
