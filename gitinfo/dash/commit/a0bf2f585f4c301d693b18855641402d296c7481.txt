commit a0bf2f585f4c301d693b18855641402d296c7481
Author: Chris P <chris@plot.ly>
Date:   Sat Mar 30 18:23:39 2019 -0400

    :pencil: rename `client` to `clientside` everywhere
    
    so that the community can unambiguously refer to this feature as
    “clientside” rather than “client”
    
    also use new `dash` `clientside_callback`

diff --git a/src/actions/index.js b/src/actions/index.js
index c973bed9..cf619c3e 100644
--- a/src/actions/index.js
+++ b/src/actions/index.js
@@ -426,7 +426,11 @@ function updateOutput(
         changedPropIds,
     };
 
-    const {inputs, state, client_function} = dependenciesRequest.content.find(
+    const {
+        inputs,
+        state,
+        clientside_function,
+    } = dependenciesRequest.content.find(
         dependency => dependency.output === outputIdAndProp
     );
     const validKeys = keys(getState().paths);
@@ -498,11 +502,11 @@ function updateOutput(
     }
 
     // Clientside hook
-    if (!isNil(client_function) && !isEmpty(client_function)) {
+    if (!isNil(clientside_function) && !isEmpty(clientside_function)) {
         let returnValue;
         try {
-            returnValue = window[client_function.namespace][
-                client_function.function_name
+            returnValue = window[clientside_function.namespace][
+                clientside_function.function_name
             ](
                 ...(has('inputs', payload)
                     ? pluck('value', payload.inputs)
@@ -513,8 +517,8 @@ function updateOutput(
             /* eslint-disable no-console */
             console.error(
                 `The following error occurred while executing ${
-                    client_function.namespace
-                }.${client_function.function_name} ` +
+                    clientside_function.namespace
+                }.${clientside_function.function_name} ` +
                     `in order to update component "${payload.output}" ⋁⋁⋁`
             );
             console.error(e);
diff --git a/tests/test_render.py b/tests/test_render.py
index aec16d44..9f4b2b69 100644
--- a/tests/test_render.py
+++ b/tests/test_render.py
@@ -3,7 +3,7 @@ import textwrap
 
 import dash
 from dash import Dash
-from dash.dependencies import Input, Output, State, ClientFunction
+from dash.dependencies import Input, Output, State, ClientsideFunction
 from dash.exceptions import PreventUpdate
 from dash.development.base_component import Component
 import dash_html_components as html
@@ -2313,13 +2313,13 @@ class Tests(IntegrationTests):
             return 'Server says "{}"'.format(value)
 
 
-        app.callback(
-            Output('output-clientside', 'children'),
-            [Input('input', 'value')],
-            client_function=ClientFunction(
+        app.clientside_callback(
+            ClientsideFunction(
                 namespace='clientside',
                 function_name='display'
-            )
+            ),
+            Output('output-clientside', 'children'),
+            [Input('input', 'value')]
         )
 
         self.startServer(app)
@@ -2387,11 +2387,12 @@ class Tests(IntegrationTests):
 
         ])
 
-        app.callback(
+        app.clientside_callback(
+            ClientsideFunction('R', 'add'),
             Output('x+y', 'value'),
             [Input('x', 'value'),
              Input('y', 'value')],
-            client_function=ClientFunction('R', 'add'))
+        )
 
         call_counts = {
             'divide': Value('i', 0),
@@ -2413,11 +2414,12 @@ class Tests(IntegrationTests):
             call_counts['display'].value += 1
             return '\n'.join([str(a) for a in args])
 
-        app.callback(
+        app.clientside_callback(
+            ClientsideFunction('clientside', 'mean'),
             Output('mean-of-all-values', 'value'),
             [Input('x', 'value'), Input('y', 'value'),
              Input('x+y', 'value'), Input('x+y / 2', 'value')],
-            client_function=ClientFunction('clientside', 'mean'))
+        )
 
         self.startServer(app)
 
@@ -2458,15 +2460,17 @@ class Tests(IntegrationTests):
             dcc.Input(id='third'),
         ])
 
-        app.callback(
+        app.clientside_callback(
+            ClientsideFunction('clientside', 'add1_break_at_11'),
             Output('second', 'value'),
             [Input('first', 'value')],
-            client_function=ClientFunction('clientside', 'add1_break_at_11'))
+        )
 
-        app.callback(
+        app.clientside_callback(
+            ClientsideFunction('clientside', 'add1_break_at_11'),
             Output('third', 'value'),
             [Input('second', 'value')],
-            client_function=ClientFunction('clientside', 'add1_break_at_11'))
+        )
 
         self.startServer(app)
 
@@ -2509,12 +2513,13 @@ class Tests(IntegrationTests):
             dcc.Input(id='output-4'),
         ])
 
-        app.callback([Output('output-1', 'value'),
-                      Output('output-2', 'value'),
-                      Output('output-3', 'value'),
-                      Output('output-4', 'value')],
-                     [Input('input', 'value')],
-                     client_function=ClientFunction('clientside', 'add_to_four_outputs'))
+        app.clientside_callback(
+            ClientsideFunction('clientside', 'add_to_four_outputs'),
+            [Output('output-1', 'value'),
+             Output('output-2', 'value'),
+             Output('output-3', 'value'),
+             Output('output-4', 'value')],
+            [Input('input', 'value')])
 
         self.startServer(app)
 
