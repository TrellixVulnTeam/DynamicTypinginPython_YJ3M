commit 1fc8879855b26ebe7e799e2acf4b876b9d67d885
Author: Ryan Marren <rymarr@tuta.io>
Date:   Wed Oct 10 15:20:42 2018 -0400

    Work in disabled overlay.

diff --git a/src/components/error/ComponentErrorBoundary.react.js b/src/components/error/ComponentErrorBoundary.react.js
index 262365a1..952afca3 100644
--- a/src/components/error/ComponentErrorBoundary.react.js
+++ b/src/components/error/ComponentErrorBoundary.react.js
@@ -1,12 +1,12 @@
 import {connect} from 'react-redux';
 import React, { Component } from 'react';
 import PropTypes from 'prop-types';
-import { revert } from '../../actions/index';
 import Radium from 'radium';
-import { contains, pluck, find, propEq } from 'ramda';
+import * as R from 'ramda';
 import uniqid from 'uniqid';
+import { onError, resolveError, revert } from '../../actions';
 import ComponentErrorOverlay from './ComponentErrorOverlay.react';
-import { onError, resolveError } from '../../actions';
+import ComponentDisabledOverlay from './ComponentDisabledOverlay.react';
 
 class UnconnectedComponentErrorBoundary extends Component {
   constructor(props) {
@@ -30,6 +30,36 @@ class UnconnectedComponentErrorBoundary extends Component {
     dispatch(revert());
   }
 
+  getDisabledComponents(disabledIds, incomingMap) {
+    const possibleKeys = R.keys(incomingMap);
+    const enumeratedPossibleIds = R.zip(
+      R.range(0, R.length(possibleKeys)),
+      R.map((k) => k.split('.')[0], possibleKeys)
+    )
+    const affectedIndices = R.filter(
+      (idx) => !R.isNil(idx),
+      R.map(
+        (tuple) => R.contains(tuple[1], disabledIds) ? tuple[0] : null,
+        enumeratedPossibleIds
+      )
+    );
+    const affectedKeys = R.ap(
+      R.map(
+        R.nth,
+        affectedIndices
+      ),
+      R.of(possibleKeys)
+    );
+    const disabledKeys = R.flatten(R.map((key) => incomingMap[key],
+                                   affectedKeys));
+    const newDisabledIds = R.union(
+      disabledIds,
+      R.map((k) => k.split('.')[0], disabledKeys)
+    );
+    if (R.equals(disabledIds, newDisabledIds)) {
+      return disabledIds;
+    } else {
+      return this.getDisabledComponents(newDisabledIds, incomingMap);
     }
   }
 
@@ -38,9 +68,20 @@ class UnconnectedComponentErrorBoundary extends Component {
   }
 
   render() {
-    const { componentType, componentId, dispatch, error } = this.props;
+    const {
+      componentType,
+      componentId,
+      dispatch,
+      error,
+      graphs
+    } = this.props;
     const { myID, myUID } = this.state;
     const hasError = R.contains(myUID, R.pluck('myUID')(error.frontEnd));
+    const disabledComponents = this.getDisabledComponents(
+      R.pluck('myID')(error.frontEnd),
+      graphs.InputGraph.incomingEdges
+    )
+    const disabled = R.contains(componentId, disabledComponents);
     if ( hasError ) {
       const errorToDisplay = R.find(
         R.propEq('myUID', myUID)
@@ -53,6 +94,12 @@ class UnconnectedComponentErrorBoundary extends Component {
            resolve={() => this.resolveError(dispatch, myUID)}
         />
       )
+    } else if ( disabled ) {
+      return (
+        <ComponentDisabledOverlay>
+          {this.props.children}
+        </ComponentDisabledOverlay>
+      )
     }
     return this.props.children;
   }
@@ -67,7 +114,8 @@ UnconnectedComponentErrorBoundary.propTypes = {
 
 const ComponentErrorBoundary = connect(
     state => ({
-      error: state.error
+      error: state.error,
+      graphs: state.graphs
     }),
     dispatch => ({dispatch})
 )(Radium(UnconnectedComponentErrorBoundary));
