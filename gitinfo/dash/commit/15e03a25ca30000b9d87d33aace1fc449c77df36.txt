commit 15e03a25ca30000b9d87d33aace1fc449c77df36
Author: Ryan Marren <rymarr@tuta.io>
Date:   Thu Aug 9 14:07:41 2018 -0400

    Revert changes when resolved.

diff --git a/src/APIController.react.js b/src/APIController.react.js
index 199b969b..4d7dafc7 100644
--- a/src/APIController.react.js
+++ b/src/APIController.react.js
@@ -3,7 +3,7 @@ import {contains, isEmpty, isNil} from 'ramda'
 import React, {Component} from 'react';
 import PropTypes from 'prop-types';
 import TreeContainer from './TreeContainer';
-import ErrorHandler from './ErrorHandler.react';
+import GlobalErrorBoundary from './components/error/GlobalErrorBoundary.react';
 import {
     computeGraphs,
     computePaths,
@@ -100,9 +100,9 @@ class UnconnectedContainer extends Component {
         else if (appLifecycle === APP_STATES('HYDRATED')) {
             return (
                 <div id="_dash-app-content">
-                    <ErrorHandler error={error}>
+                    <GlobalErrorBoundary>
                       <TreeContainer layout={layout}/>
-                    </ErrorHandler>
+                    </GlobalErrorBoundary>
                 </div>
             );
         }
diff --git a/src/ComponentErrorBoundary.react.js b/src/ComponentErrorBoundary.react.js
deleted file mode 100644
index ef0630ff..00000000
--- a/src/ComponentErrorBoundary.react.js
+++ /dev/null
@@ -1,114 +0,0 @@
-import {connect} from 'react-redux';
-import React, { Component } from 'react';
-import PropTypes from 'prop-types';
-import { undo } from './actions/index';
-import Radium from 'radium';
-
-const defaultError = {
-  hadError: false,
-  error: {},
-  info: {}
-}
-
-class ErrorComponentOverlay extends Component {
-  constructor(props) {
-    super(props);
-    this.state = {
-      popoverOpen: false
-    }
-    this.togglePopOver = this.togglePopOver.bind(this);
-  }
-
-  togglePopOver() {
-    this.setState({
-      popoverOpen: !this.state.popoverOpen
-    });
-  }
-
-  render() {
-    const { oldChildren, error, componentId, componentType, resolve } = this.props;
-    return (
-      <div style={{position: 'relative'}}>
-        <div
-          onClick={this.togglePopOver}
-          style={{
-            position: 'relative',
-            padding: '2px',
-            backgroundColor: 'rgb(255, 0, 0, .5)',
-            border: '1px solid black',
-            borderRadius: '2px',
-            display: 'inline-block'
-          }}>
-          <div style={{position: 'relative', zIndex: -1}}>{oldChildren}</div>
-          <div
-            style={this.state.popoverOpen ? {'display': 'inline'} : {'display': 'none'}}
-            toggle={this.togglePopOver}
-          >
-            <strong>{"Error in " + componentType + '(id=' + componentId + ')'}</strong>
-            <p>{error.name + " -- " + error.message}</p>
-            <button onClick={resolve}>Resolve Error</button>
-          </div>
-        </div>
-      </div>
-    )
-  }
-}
-
-class UnconnectedComponentErrorBoundary extends Component {
-  constructor(props) {
-    super(props);
-    this.state = {oldChildren: props.children, ...defaultError};
-  }
-
-  componentDidCatch(error, info) {
-    this.setState({
-      hadError: true,
-      error,
-      info
-    });
-  }
-
-  componentDidUpdate(prevProps, prevState) {
-    if (!this.state.hadError &&
-        prevState.oldChildren !== prevProps.children &&
-        prevProps.children !== this.props.children) {
-      this.setState({
-        oldChildren: prevProps.children
-      });
-    }
-  }
-
-  resolveError(dispatch) {
-    dispatch(undo());
-    this.setState(defaultError);
-  }
-
-  render() {
-    const { type, id, dispatch } = this.props;
-    if (this.state.hadError) {
-      return (
-        <ErrorComponentOverlay
-           oldChildren={this.state.oldChildren}
-           error={{id, type, ...this.state.error}}
-           componentId={id}
-           componentType={type}
-           resolve={() => this.resolveError(dispatch)}
-        />
-      )
-    }
-    return this.props.children;
-  }
-}
-
-UnconnectedComponentErrorBoundary.propTypes = {
-    children: PropTypes.object,
-    id: PropTypes.string,
-    type: PropTypes.string
-}
-
-const ComponentErrorBoundary = connect(
-    state => ({}),
-    dispatch => ({dispatch})
-)(Radium(UnconnectedComponentErrorBoundary));
-
-export default ComponentErrorBoundary;
diff --git a/src/ErrorHandler.react.js b/src/ErrorHandler.react.js
deleted file mode 100644
index 1a68a7d8..00000000
--- a/src/ErrorHandler.react.js
+++ /dev/null
@@ -1,67 +0,0 @@
-import React, { Component } from 'react';
-import PropTypes from 'prop-types';
-
-const FrontEndErrorDisplay = ({ errorOrigin, errorType, errorMessage, errorTraceback }) => (
-  <div>
-    <h1> Dash had an error in the {errorOrigin}.</h1>
-    <h3>{errorType}</h3>
-    <h5>{errorMessage}</h5>
-    <code>
-      {errorTraceback.split("\n").map(line => (<div>{line}</div>))}
-    </code>
-  </div>
-)
-
-FrontEndErrorDisplay.propTypes = {
-    errorOrigin: PropTypes.string,
-    errorType: PropTypes.string,
-    errorMessage: PropTypes.string,
-    errorTraceback: PropTypes.string,
-}
-
-export default class ErrorHandler extends Component {
-  constructor(props) {
-    super(props);
-    this.state = {
-      frontEndError: false,
-      error: {}
-    };
-  }
-
-  componentDidCatch(error, info) {
-    this.setState({
-      frontEndError: true,
-      error: {
-        errorOrigin: 'front-end',
-        errorType: error.name,
-        errorMessage: error.message,
-        errorTraceback: info.componentStack
-      }
-    });
-  }
-
-  render() {
-    const { error } = this.props;
-    if (error.error) {
-      return (
-        <img
-          style={{"display": "none"}}
-          src="http://placehold.it/1x1"
-          onLoad={(
-            function() {
-              document.open();
-              document.write(error.errorPage);
-              document.close();
-            })()} />
-        )
-    } else if (this.state.frontEndError) {
-      return <FrontEndErrorDisplay {...this.state.error} />
-    }
-    return this.props.children;
-  }
-}
-
-ErrorHandler.propTypes = {
-    children: PropTypes.object,
-    error: PropTypes.object
-}
diff --git a/src/TreeContainer.js b/src/TreeContainer.js
index 099ed12a..593407e9 100644
--- a/src/TreeContainer.js
+++ b/src/TreeContainer.js
@@ -5,7 +5,7 @@ import React, {Component} from 'react';
 import PropTypes from 'prop-types';
 import Registry from './registry';
 import NotifyObservers from './components/core/NotifyObservers.react';
-import ComponentErrorBoundary from './ComponentErrorBoundary.react';
+import ComponentErrorBoundary from './components/error/ComponentErrorBoundary.react';
 
 export default class TreeContainer extends Component {
     shouldComponentUpdate(nextProps) {
@@ -77,7 +77,7 @@ function render(component) {
     );
 
     return (
-        <ComponentErrorBoundary type={component.type} id={componentProps.id}>
+        <ComponentErrorBoundary componentType={component.type} componentId={componentProps.id}>
           <NotifyObservers id={componentProps.id}>
               {parent}
           </NotifyObservers>
diff --git a/src/actions/constants.js b/src/actions/constants.js
index d1675854..fe20bbc5 100644
--- a/src/actions/constants.js
+++ b/src/actions/constants.js
@@ -7,7 +7,8 @@ export const ACTIONS = (action) => {
         SET_LAYOUT: 'SET_LAYOUT',
         SET_APP_LIFECYCLE: 'SET_APP_LIFECYCLE',
         READ_CONFIG: 'READ_CONFIG',
-        ON_ERROR: 'ON_ERROR'
+        ON_ERROR: 'ON_ERROR',
+        RESOLVE_ERROR: 'RESOLVE_ERROR'
     };
     if (actionList[action]) return actionList[action];
     else throw new Error(`${action} is not defined.`)
diff --git a/src/actions/index.js b/src/actions/index.js
index 0be69b9e..eb09aa96 100644
--- a/src/actions/index.js
+++ b/src/actions/index.js
@@ -40,6 +40,7 @@ export const setLayout = createAction(ACTIONS('SET_LAYOUT'));
 export const setAppLifecycle = createAction(ACTIONS('SET_APP_LIFECYCLE'));
 export const readConfig = createAction(ACTIONS('READ_CONFIG'));
 export const onError = createAction(ACTIONS('ON_ERROR'));
+export const resolveError = createAction(ACTIONS('RESOLVE_ERROR'));
 
 
 export function hydrateInitialOutputs() {
@@ -134,6 +135,26 @@ export function undo() {
 }
 
 
+export function revert() {
+    return function (dispatch, getState) {
+        const history = getState().history;
+        dispatch(createAction('REVERT')());
+        const previous = history.past[history.past.length - 1];
+
+        // Update props
+        dispatch(createAction('UNDO_PROP_CHANGE')({
+            itempath: getState().paths[previous.id],
+            props: previous.props
+        }));
+
+        // Notify observers
+        dispatch(notifyObservers({
+            id: previous.id,
+            props: previous.props
+        }));
+    }
+}
+
 
 function reduceInputIds(nodeIds, InputGraph) {
     /*
diff --git a/src/components/error/ComponentErrorBoundary.react.js b/src/components/error/ComponentErrorBoundary.react.js
new file mode 100644
index 00000000..b0346b22
--- /dev/null
+++ b/src/components/error/ComponentErrorBoundary.react.js
@@ -0,0 +1,71 @@
+import {connect} from 'react-redux';
+import React, { Component } from 'react';
+import PropTypes from 'prop-types';
+import { revert } from '../../actions/index';
+import Radium from 'radium';
+import ComponentErrorOverlay from './ComponentErrorOverlay.react';
+
+const defaultError = {
+  hadError: false,
+  error: {},
+  info: {}
+}
+
+class UnconnectedComponentErrorBoundary extends Component {
+  constructor(props) {
+    super(props);
+    this.state = {oldChildren: props.children, ...defaultError};
+  }
+
+  componentDidCatch(error, info) {
+    this.setState({
+      hadError: true,
+      error,
+      info
+    });
+  }
+
+  componentDidUpdate(prevProps, prevState) {
+    if (!this.state.hadError &&
+        prevState.oldChildren !== prevProps.children &&
+        prevProps.children !== this.props.children) {
+      this.setState({
+        oldChildren: prevProps.children
+      });
+    }
+  }
+
+  resolveError(dispatch) {
+    dispatch(revert());
+    this.setState(defaultError);
+  }
+
+  render() {
+    const { componentType, componentId, dispatch } = this.props;
+    if (this.state.hadError) {
+      return (
+        <ComponentErrorOverlay
+           oldChildren={this.state.oldChildren}
+           error={this.state.error}
+           componentId={componentId}
+           componentType={componentType}
+           resolve={() => this.resolveError(dispatch)}
+        />
+      )
+    }
+    return this.props.children;
+  }
+}
+
+UnconnectedComponentErrorBoundary.propTypes = {
+    children: PropTypes.object,
+    id: PropTypes.string,
+    type: PropTypes.string
+}
+
+const ComponentErrorBoundary = connect(
+    state => ({}),
+    dispatch => ({dispatch})
+)(Radium(UnconnectedComponentErrorBoundary));
+
+export default ComponentErrorBoundary;
diff --git a/src/components/error/ComponentErrorOverlay.react.js b/src/components/error/ComponentErrorOverlay.react.js
new file mode 100644
index 00000000..4b094fbc
--- /dev/null
+++ b/src/components/error/ComponentErrorOverlay.react.js
@@ -0,0 +1,71 @@
+import React, { Component } from 'react';
+import PropTypes from 'prop-types';
+
+
+const styles = {
+  root: {
+    position: 'relative'
+  },
+  overlay: {
+    position: 'relative',
+    padding: '2px',
+    backgroundColor: 'rgb(255, 0, 0, .5)',
+    border: '1px solid black',
+    borderRadius: '2px',
+    display: 'inline-block'
+  },
+  childWrapper: {
+    position: 'relative',
+    zIndex: -1
+  },
+  popOverOpen: {'display': 'inline'},
+  popOverClosed: {'display': 'none'}
+}
+
+export default class ComponentErrorOverlay extends Component {
+  constructor(props) {
+    super(props);
+    this.state = {
+      popoverOpen: false
+    }
+    this.togglePopOver = this.togglePopOver.bind(this);
+  }
+
+  togglePopOver() {
+    this.setState({
+      popoverOpen: !this.state.popoverOpen
+    });
+  }
+
+  render() {
+    const { oldChildren, error, componentId, componentType, resolve } = this.props;
+    const errorLocationString = "Error in " + componentType + '(id=' + componentId + ')';
+    const errorString = error.name + " -- " + error.message;
+    return (
+      <div style={styles.root}>
+        <div
+          onClick={this.togglePopOver}
+          style={styles.overlay}>
+          <div style={styles.childWrapper}>{oldChildren}</div>
+          <div
+            style={this.state.popoverOpen ? styles.popOverOpen : styles.popOverClosed}
+            toggle={this.togglePopOver}
+          >
+            <strong>{errorLocationString}</strong>
+            <p>{errorString}</p>
+            <button onClick={resolve}>Resolve Error</button>
+          </div>
+        </div>
+      </div>
+    )
+  }
+}
+
+ComponentErrorOverlay.propTypes = {
+    children: PropTypes.object,
+    oldChildren: PropTypes.object,
+    error: PropTypes.object,
+    componentId: PropTypes.string,
+    componentType: PropTypes.string,
+    resolve: PropTypes.func
+}
diff --git a/src/components/error/GlobalErrorBoundary.react.js b/src/components/error/GlobalErrorBoundary.react.js
new file mode 100644
index 00000000..e9705b97
--- /dev/null
+++ b/src/components/error/GlobalErrorBoundary.react.js
@@ -0,0 +1,54 @@
+import {connect} from 'react-redux';
+import React, { Component } from 'react';
+import PropTypes from 'prop-types';
+import { revert, resolveError } from '../../actions/index';
+import Radium from 'radium';
+
+import GlobalErrorOverlay from './GlobalErrorOverlay.react';
+
+class UnconnectedGlobalErrorBoundary extends Component {
+  constructor(props) {
+    super(props);
+  }
+
+  resolveError(dispatch) {
+    dispatch(revert());
+    dispatch(resolveError());
+  }
+
+  render() {
+    const { error, dispatch } = this.props;
+    if (error.error) {
+      return (
+        <div>
+          <img
+            style={{"display": "none"}}
+            src="http://placehold.it/1x1"
+            onLoad={(
+              function() {
+                var newWin = open('url','windowName','height=600,width=400');
+                newWin.document.write(error.errorPage);
+                newWin.document.close();
+              })()} />
+            <GlobalErrorOverlay resolve={() => this.resolveError(dispatch)}>
+              {this.props.children}
+            </GlobalErrorOverlay>
+          </div>
+        )
+    }
+    return this.props.children;
+  }
+}
+
+UnconnectedGlobalErrorBoundary.propTypes = {
+    children: PropTypes.object,
+}
+
+const GlobalErrorBoundary = connect(
+    state => ({
+      error: state.error
+    }),
+    dispatch => ({dispatch})
+)(Radium(UnconnectedGlobalErrorBoundary));
+
+export default GlobalErrorBoundary;
diff --git a/src/components/error/GlobalErrorOverlay.react.js b/src/components/error/GlobalErrorOverlay.react.js
new file mode 100644
index 00000000..656f6991
--- /dev/null
+++ b/src/components/error/GlobalErrorOverlay.react.js
@@ -0,0 +1,46 @@
+import React, { Component } from 'react';
+import PropTypes from 'prop-types';
+
+
+const styles = {
+  root: {
+    position: 'relative',
+  },
+  overlay: {
+    position: 'relative',
+    backgroundColor: 'rgb(255, 0, 0, .2)',
+    display: 'inline-block',
+    height: '100vh',
+    width: '100vw',
+    padding: 0,
+    margin: -8
+  },
+  childWrapper: {
+    position: 'relative',
+    zIndex: -1
+  }
+}
+
+export default class GlobalErrorOverlay extends Component {
+  constructor(props) {
+    super(props);
+  }
+
+  render() {
+    const { resolve } = this.props;
+    return (
+      <div style={styles.root}>
+        <div
+          style={styles.overlay}>
+          <div style={styles.childWrapper}>{this.props.children}</div>
+          <button onClick={resolve}>Resolve Error</button>
+        </div>
+      </div>
+    )
+  }
+}
+
+GlobalErrorOverlay.propTypes = {
+    children: PropTypes.object,
+    resolve: PropTypes.func
+}
diff --git a/src/reducers/error.js b/src/reducers/error.js
index 9ed2a5f2..c0393d1b 100644
--- a/src/reducers/error.js
+++ b/src/reducers/error.js
@@ -13,6 +13,10 @@ function error (state = initialError, action) {
             };
         }
 
+        case 'RESOLVE_ERROR': {
+          return initialError;
+        }
+
         default: {
             return state;
         }
diff --git a/src/reducers/history.js b/src/reducers/history.js
index 27bd96b9..383a0ac1 100644
--- a/src/reducers/history.js
+++ b/src/reducers/history.js
@@ -29,6 +29,17 @@ function history (state = initialHistory, action) {
             };
         }
 
+        case 'REVERT': {
+            const {past, present, future} = state;
+            const previous = past[past.length - 1];
+            const newPast = past.slice(0, past.length - 1);
+            return {
+                past: newPast,
+                present: previous,
+                future: [ ...future ]
+            };
+        }
+
         default: {
             return state;
         }
diff --git a/test.py b/test.py
new file mode 100644
index 00000000..eb9e5978
--- /dev/null
+++ b/test.py
@@ -0,0 +1,40 @@
+import dash
+import dash_html_components as html
+import dash_core_components as dcc
+from dash.dependencies import Input, Output
+
+app = dash.Dash()
+app.scripts.config.serve_locally = True
+
+app.layout = html.Div([
+    html.Button(id='click', children='click'),
+    html.Div(id='output', children=''),
+    dcc.RadioItems(
+        id='radio',
+        options=[{
+            'label': 'good',
+            'value': 'good'
+            },
+            {
+            'label': 'bad',
+            'value': 'bad'
+            }],
+        value='good')
+])
+
+
+class MyCustomException(Exception):
+    pass
+
+
+@app.callback(Output('output', 'children'),
+              [Input('click', 'n_clicks'),
+               Input('radio', 'value')])
+def crash_it(clicks, radio):
+    print(clicks, radio)
+    if radio == 'bad':
+        raise MyCustomException("Something bad happened in the back-end")
+    return clicks
+
+
+app.run_server(debug=True, port=8000)
