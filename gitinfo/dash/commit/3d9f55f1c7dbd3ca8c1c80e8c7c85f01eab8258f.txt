commit 3d9f55f1c7dbd3ca8c1c80e8c7c85f01eab8258f
Author: Per Nilsson <per.nilsson@formidablelabs.com>
Date:   Tue Jun 28 11:25:16 2016 -0700

    Pass single `valueChanged` handler to interactive components

diff --git a/renderer/src/components/core/EditableContent.react.js b/renderer/src/components/core/EditableContent.react.js
index 4897c082..d249f10d 100644
--- a/renderer/src/components/core/EditableContent.react.js
+++ b/renderer/src/components/core/EditableContent.react.js
@@ -10,29 +10,29 @@ import { updateProps } from '../../actions'
 
 /* eslint-disable no-unused-vars */
 const mapStateToProps = (state, ownProps) => {
-  return {}
+    return {}
 }
 /* eslint-enable no-unused-vars */
 
 const mapDispatchToProps = (dispatch, ownProps) => {
-  return {
-    updateProps: (newProps) => {
-        console.warn('newProps: ', newProps); // eslint-disable-line
-        dispatch(updateProps({
-            props: newProps,
-            itempath: React.Children.only(ownProps.children).props.path
-        }));
+    return {
+        valueChanged: (newProps) => {
+            console.warn('newProps: ', newProps); // eslint-disable-line
+            dispatch(updateProps({
+                props: newProps,
+                itempath: React.Children.only(ownProps.children).props.path
+            }));
+        }
     }
-  }
 }
 
-const EditableContent = ({ updateProps, children }) => {
-    // pass updateProps as props to the child element e.g. an <input>
-    return React.cloneElement(children, {updateProps});
+const EditableContent = ({valueChanged, children}) => {
+    // pass `valueChanged` handler as prop to the child element e.g. an <input>
+    return React.cloneElement(children, {valueChanged});
 };
 
 EditableContent.propTypes = {
-    updateProps: PropTypes.func.isRequired
+    valueChanged: PropTypes.func.isRequired
 };
 
 export default connect(
diff --git a/renderer/src/components/core/NotifyObservers.react.js b/renderer/src/components/core/NotifyObservers.react.js
index 474f514a..044e99ee 100644
--- a/renderer/src/components/core/NotifyObservers.react.js
+++ b/renderer/src/components/core/NotifyObservers.react.js
@@ -4,7 +4,7 @@ import { connect } from 'react-redux';
 import { notifyObservers, updateProps } from '../../actions';
 
 /*
- * NotifyObservers passes a connected notifyObservers handler down to
+ * NotifyObservers passes a connected `valueChanged` handler down to
  * its child as a prop
  */
 
@@ -12,12 +12,12 @@ const mapStateToProps = () => ({});
 
 const mapDispatchToProps = (dispatch, ownProps) => {
     return {
-        notifyObservers: (updatedProps) => {
+        valueChanged: (newProps) => {
             const payload = {
-                updatedProps, // pass in the entire prop object or just updates?
-
                 // we *need* the ID, should we just pass / merge everything in?
                 id: React.Children.only(ownProps.children).props.id,
+                // TODO pass in the entire prop object or just updates?
+                props: newProps,
                 itempath: React.Children.only(ownProps.children).props.path
             };
 
@@ -31,13 +31,13 @@ const mapDispatchToProps = (dispatch, ownProps) => {
     }
 };
 
-const NotifyObservers = ({ notifyObservers, children }) => {
-    // pass notifyObservers as props to the child element e.g. an <input>
-    return React.cloneElement(children, {notifyObservers});
+const NotifyObservers = ({ valueChanged, children }) => {
+    // pass `valueChanged` handler as prop to the child element e.g. an <input>
+    return React.cloneElement(children, {valueChanged});
 }
 
 NotifyObservers.propTypes = {
-    notifyObservers: PropTypes.func.isRequired
+    valueChanged: PropTypes.func.isRequired
 };
 
 export default connect(
