commit 44eaa2db787ea0859af4ad9b50bfd0b4621d86f1
Author: byron <byron@plot.ly>
Date:   Fri Sep 6 16:29:02 2019 -0400

    :tada: change the webpack using multiple outputs

diff --git a/dash-renderer/init.template b/dash-renderer/init.template
index abdf6bdb..c92708ec 100644
--- a/dash-renderer/init.template
+++ b/dash-renderer/init.template
@@ -42,4 +42,10 @@ _js_dist = [
         "/dash_renderer/dash_renderer.min.js",
         "namespace": "dash_renderer",
     },
+    {
+        "relative_package_path": "{}.min.js.map".format(__name__),
+        "dev_package_path": "{}.dev.js.map".format(__name__),
+        "namespace": "dash_renderer",
+        "dynamic": True,
+    },
 ]
diff --git a/dash-renderer/package.json b/dash-renderer/package.json
index 549f5961..cb2838e5 100644
--- a/dash-renderer/package.json
+++ b/dash-renderer/package.json
@@ -6,8 +6,8 @@
   "scripts": {
     "lint": "./node_modules/.bin/eslint --quiet --fix .",
     "lint:test": "./node_modules/.bin/eslint .",
-    "build:js": "webpack --mode development && webpack --mode production",
-    "build:dev": "webpack --mode development --watch",
+    "build:js": "webpack --build release",
+    "build:dev": "webpack --build local",
     "build": "renderer build",
     "start": "webpack-serve ./webpack.serve.config.js",
     "format": "prettier --config .prettierrc --write \"src/**/*.js\"",
diff --git a/dash-renderer/webpack.config.js b/dash-renderer/webpack.config.js
index 92124790..e60880ee 100644
--- a/dash-renderer/webpack.config.js
+++ b/dash-renderer/webpack.config.js
@@ -1,87 +1,87 @@
 const webpack = require('webpack');
+const R = require('ramda');
 const path = require('path');
 const packagejson = require('./package.json');
-
 const dashLibraryName = packagejson.name.replace(/-/g, '_');
 
-module.exports = (env, argv) => {
-    let mode;
-
-    // if user specified mode flag take that value
-    if (argv && argv.mode) {
-        mode = argv.mode;
-    }
-
-    // else if configuration object is already set (module.exports) use that value
-    else if (module.exports && module.exports.mode) {
-        mode = module.exports = mode;
-    }
-
-    // else take webpack default
-    else {
-        mode = 'production';
-    }
-    return {
-        entry: {main: ['@babel/polyfill', 'whatwg-fetch', './src/index.js']},
-        output: {
-            path: path.resolve(__dirname, dashLibraryName),
-            filename:
-                mode === 'development'
-                    ? `${dashLibraryName}.dev.js`
-                    : `${dashLibraryName}.min.js`,
-            library: dashLibraryName,
-            libraryTarget: 'window',
-        },
-        // devtool: mode === 'development' ? 'source-map' : 'none',
-        devtool: 'none',
-        externals: {
-            react: 'React',
-            'react-dom': 'ReactDOM',
-            'plotly.js': 'Plotly',
-            'prop-types': 'PropTypes',
-        },
-        module: {
-            rules: [
-                {
-                    test: /\.js$/,
-                    exclude: /node_modules/,
-                    use: {
-                        loader: 'babel-loader',
-                    },
-                },
-                {
-                    test: /\.css$/,
-                    use: [
-                        {
-                            loader: 'style-loader',
-                        },
-                        {
-                            loader: 'css-loader',
-                        },
-                    ],
-                },
-                {
-                    test: /\.svg$/,
-                    use: ['@svgr/webpack'],
+const defaultOptions = {
+    mode: 'development',
+    devtool: 'none',
+    entry: {
+        main: ['@babel/polyfill', 'whatwg-fetch', './src/index.js'],
+    },
+    output: {
+        path: path.resolve(__dirname, dashLibraryName),
+        filename: `${dashLibraryName}.dev.js`,
+        library: dashLibraryName,
+        libraryTarget: 'window',
+    },
+    externals: {
+        react: 'React',
+        'react-dom': 'ReactDOM',
+        'plotly.js': 'Plotly',
+        'prop-types': 'PropTypes',
+    },
+    plugins: [],
+    module: {
+        rules: [
+            {
+                test: /\.js$/,
+                exclude: /node_modules/,
+                use: {
+                    loader: 'babel-loader',
                 },
-                {
-                    test: /\.txt$/i,
-                    use: 'raw-loader',
-                },
-            ],
-        },
-        plugins: [
-            new webpack.NormalModuleReplacementPlugin(
-                /(.*)GlobalErrorContainer.react(\.*)/,
-                function(resource) {
-                    if (mode === 'production') {
-                        resource.request = resource.request.replace(
-                            /GlobalErrorContainer.react/,
-                            'GlobalErrorContainerPassthrough.react'
-                        );
-                    }
-                }
-            ),
+            },
+            {
+                test: /\.css$/,
+                use: [
+                    {
+                        loader: 'style-loader',
+                    },
+                    {
+                        loader: 'css-loader',
+                    },
+                ],
+            },
+            {
+                test: /\.svg$/,
+                use: ['@svgr/webpack'],
+            },
+            {
+                test: /\.txt$/i,
+                use: 'raw-loader',
+            },
         ],
-    };
+    },
+};
+
+module.exports = (_, argv) => {
+    const build = argv.build || 'release';
+    return [
+        R.mergeDeepLeft(
+            {devtool: build === 'release' ? 'none' : 'source-map'},
+            defaultOptions
+        ),
+        R.mergeDeepLeft(
+            {
+                mode: 'production',
+                devtool: build === 'release' ? 'none' : 'source-map',
+                output: {
+                    filename: `${dashLibraryName}.min.js`,
+                },
+                plugins: [
+                    new webpack.NormalModuleReplacementPlugin(
+                        /(.*)GlobalErrorContainer.react(\.*)/,
+                        function(resource) {
+                            resource.request = resource.request.replace(
+                                /GlobalErrorContainer.react/,
+                                'GlobalErrorContainerPassthrough.react'
+                            );
+                        }
+                    ),
+                ],
+            },
+            defaultOptions
+        ),
+    ];
 };
