commit 126f53a5cd0f71d656d03a6a4cac43a07d41adc4
Author: alexcjohnson <alex@plot.ly>
Date:   Thu Jan 30 23:40:08 2020 -0500

    update tests

diff --git a/tests/integration/test_integration.py b/tests/integration/test_integration.py
index 35fe3ad9..4902d3da 100644
--- a/tests/integration/test_integration.py
+++ b/tests/integration/test_integration.py
@@ -486,8 +486,8 @@ def test_inin011_multi_output(dash_duo):
             "no part of an existing multi-output can be used in another"
         )
     assert (
-        "{'output1.children'}" in err.value.args[0]
-        or "set(['output1.children'])" in err.value.args[0]
+        "Already used:" in err.value.args[0] and
+        "output1.children" in err.value.args[0]
     )
 
     dash_duo.start_server(app)
@@ -824,7 +824,7 @@ def test_inin018_output_input_invalid_callback():
         def failure(children):
             pass
 
-    msg = "Same output and input: input-output.children"
+    msg = "Same `Output` and `Input`: input-output.children"
     assert err.value.args[0] == msg
 
     # Multi output version.
@@ -837,7 +837,7 @@ def test_inin018_output_input_invalid_callback():
         def failure2(children):
             pass
 
-    msg = "Same output and input: input-output.children"
+    msg = "Same `Output` and `Input`: input-output.children"
     assert err.value.args[0] == msg
 
 
@@ -907,6 +907,10 @@ def test_inin020_callback_return_validation():
         return set([1])
 
     with pytest.raises(InvalidCallbackReturnValue):
+        # _outputs_list (normally callback_context.outputs_list) is provided
+        # by the dispatcher from the request. Here we're calling locally so
+        # we need to mock it.
+        app._outputs_list = {"id": "b", "property": "children"}
         single("aaa")
         pytest.fail("not serializable")
 
@@ -918,6 +922,10 @@ def test_inin020_callback_return_validation():
         return [1, set([2])]
 
     with pytest.raises(InvalidCallbackReturnValue):
+        app._outputs_list = [
+            {"id": "c", "property": "children"},
+            {"id": "d", "property": "children"}
+        ]
         multi("aaa")
         pytest.fail("nested non-serializable")
 
@@ -929,6 +937,10 @@ def test_inin020_callback_return_validation():
         return ["abc"]
 
     with pytest.raises(InvalidCallbackReturnValue):
+        app._outputs_list = [
+            {"id": "e", "property": "children"},
+            {"id": "f", "property": "children"}
+        ]
         multi2("aaa")
         pytest.fail("wrong-length list")
 
diff --git a/tests/integration/test_render.py b/tests/integration/test_render.py
index a230edf9..36f93835 100644
--- a/tests/integration/test_render.py
+++ b/tests/integration/test_render.py
@@ -47,29 +47,6 @@ class Tests(IntegrationTests):
             )
         )
 
-    def request_queue_assertions(
-            self, check_rejected=True, expected_length=None):
-        request_queue = self.driver.execute_script(
-            'return window.store.getState().requestQueue'
-        )
-        self.assertTrue(
-            all([
-                (r['status'] == 200)
-                for r in request_queue
-            ])
-        )
-
-        if check_rejected:
-            self.assertTrue(
-                all([
-                    (r['rejected'] is False)
-                    for r in request_queue
-                ])
-            )
-
-        if expected_length is not None:
-            self.assertEqual(len(request_queue), expected_length)
-
     def click_undo(self):
         undo_selector = '._dash-undo-redo span:first-child div:last-child'
         undo = self.wait_for_element_by_css_selector(undo_selector)
@@ -511,11 +488,10 @@ class Tests(IntegrationTests):
         self.assertEqual(call_count.value, 3)
         self.wait_for_text_to_equal('#output1', '2')
         self.wait_for_text_to_equal('#output2', '3')
-        request_queue = self.driver.execute_script(
-            'return window.store.getState().requestQueue'
+        pending_count = self.driver.execute_script(
+            'return window.store.getState().pendingCallbacks.length'
         )
-        self.assertFalse(request_queue[0]['rejected'])
-        self.assertEqual(len(request_queue), 1)
+        self.assertEqual(pending_count, 0)
 
     def test_callbacks_with_shared_grandparent(self):
         app = dash.Dash()
@@ -892,10 +868,25 @@ class Tests(IntegrationTests):
 
         self.wait_for_text_to_equal('#output-1', 'fire request hooks')
         self.wait_for_text_to_equal('#output-pre', 'request_pre changed this text!')
-        self.wait_for_text_to_equal('#output-pre-payload', '{"output":"output-1.children","changedPropIds":["input.value"],"inputs":[{"id":"input","property":"value","value":"fire request hooks"}]}')
         self.wait_for_text_to_equal('#output-post', 'request_post changed this text!')
-        self.wait_for_text_to_equal('#output-post-payload', '{"output":"output-1.children","changedPropIds":["input.value"],"inputs":[{"id":"input","property":"value","value":"fire request hooks"}]}')
-        self.wait_for_text_to_equal('#output-post-response', '{"props":{"children":"fire request hooks"}}')
+        pre_payload = self.wait_for_element_by_css_selector('#output-pre-payload').text
+        post_payload = self.wait_for_element_by_css_selector('#output-post-payload').text
+        post_response = self.wait_for_element_by_css_selector('#output-post-response').text
+        self.assertEqual(json.loads(pre_payload), {
+            "output": "output-1.children",
+            "outputs": {"id": "output-1", "property": "children"},
+            "changedPropIds": ["input.value"],
+            "inputs": [{"id": "input", "property": "value", "value": "fire request hooks"}]
+        })
+        self.assertEqual(json.loads(post_payload), {
+            "output": "output-1.children",
+            "outputs": {"id": "output-1", "property": "children"},
+            "changedPropIds": ["input.value"],
+            "inputs": [{"id": "input", "property": "value", "value": "fire request hooks"}]
+        })
+        self.assertEqual(json.loads(post_response), {
+            "output-1": {"children": "fire request hooks"}
+        })
         self.percy_snapshot(name='request-hooks render')
 
     def test_graphs_in_tabs_do_not_share_state(self):
