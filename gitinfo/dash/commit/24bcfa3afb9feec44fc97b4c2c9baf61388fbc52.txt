commit 24bcfa3afb9feec44fc97b4c2c9baf61388fbc52
Author: byron <byron@plot.ly>
Date:   Tue Nov 19 20:48:00 2019 -0500

    :bug: fix the stop api in process app runner

diff --git a/CHANGELOG.md b/CHANGELOG.md
index 29d739b3..b1bd86b2 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -7,6 +7,9 @@ This project adheres to [Semantic Versioning](http://semver.org/).
 - [#967](https://github.com/plotly/dash/pull/967) Adds support for defining
 clientside JavaScript callbacks via inline strings.
 
+### Fixed
+- [#1018](https://github.com/plotly/dash/pull/1006) Fix the `dash.testing` **stop** API with process application runner in Python2. Use `kill()` instead of `communicate()` to avoid hanging.
+
 ## [1.6.1] - 2019-11-14
 ### Fixed
 - [#1006](https://github.com/plotly/dash/pull/1006) Fix IE11 / ES5 compatibility and validation issues
diff --git a/dash/testing/application_runners.py b/dash/testing/application_runners.py
index 3c173f42..c1b93537 100644
--- a/dash/testing/application_runners.py
+++ b/dash/testing/application_runners.py
@@ -232,9 +232,8 @@ class ProcessRunner(BaseDashRunner):
     def stop(self):
         if self.proc:
             try:
-                logger.info("before proc.terminate pid %s", self.proc.pid)
+                logger.info("proc.terminate with pid %s", self.proc.pid)
                 self.proc.terminate()
-                logger.info("after proc.terminate")
                 if utils.PY3:
                     # pylint:disable=no-member
                     _except = subprocess.TimeoutExpired
@@ -242,7 +241,7 @@ class ProcessRunner(BaseDashRunner):
                     self.proc.communicate(timeout=self.stop_timeout)
                 else:
                     _except = Exception
-                    logger.info('kill the proc')
+                    logger.info('ruthless kill the process to avoid zombie')
                     self.proc.kill()
             except _except:
                 logger.exception(
@@ -251,7 +250,7 @@ class ProcessRunner(BaseDashRunner):
                 )
                 self.proc.kill()
                 self.proc.communicate()
-        logger.info('stop complete')
+        logger.info('process stop completes!')
 
 
 class RRunner(ProcessRunner):
