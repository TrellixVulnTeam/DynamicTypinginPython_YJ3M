commit bd739a0e90cbf2b13baf9ed81e1fe9f3bf5a7a00
Author: Per Nilsson <per.nilsson@formidablelabs.com>
Date:   Thu May 26 12:47:34 2016 -0700

    Add webpack configuration for development

diff --git a/renderer/config/partials/babel.js b/renderer/config/partials/babel.js
new file mode 100644
index 00000000..a91354e8
--- /dev/null
+++ b/renderer/config/partials/babel.js
@@ -0,0 +1,26 @@
+'use strict';
+
+var path = require('path');
+var partial = require('webpack-partial').default;
+
+var ROOT = process.cwd();
+var SRC = path.join(ROOT, 'src');
+
+module.exports = function (config) {
+    return partial(config, {
+        module: {
+            loaders: [
+                {
+                    test: /\.js/,
+                    include: [SRC],
+                    /*
+                     * Use require.resolve to get a deterministic path
+                     * and avoid webpack's magick loader resolution
+                     */
+                    loader: require.resolve('babel-loader')
+                }
+            ]
+        }
+    });
+};
+
diff --git a/renderer/config/partials/babelHot.js b/renderer/config/partials/babelHot.js
new file mode 100644
index 00000000..5ec3876d
--- /dev/null
+++ b/renderer/config/partials/babelHot.js
@@ -0,0 +1,29 @@
+'use strict';
+
+var path = require('path');
+var partial = require('webpack-partial').default;
+
+var ROOT = process.cwd();
+var SRC = path.join(ROOT, 'src');
+
+module.exports = function (config) {
+    return partial(config, {
+        module: {
+            loaders: [
+                {
+                    test: /\.js/,
+                    include: [SRC],
+                    /*
+                     * Use require.resolve to get a deterministic path
+                     * and avoid webpack's magick loader resolution
+                     */
+                    loaders: [
+                        require.resolve('react-hot-loader'),
+                        require.resolve('babel-loader')
+                    ]
+                }
+            ]
+        }
+    });
+};
+
diff --git a/renderer/config/partials/entryDev.js b/renderer/config/partials/entryDev.js
new file mode 100644
index 00000000..784dd964
--- /dev/null
+++ b/renderer/config/partials/entryDev.js
@@ -0,0 +1,11 @@
+'use strict';
+
+var partial = require('webpack-partial').default;
+
+module.exports = function (config) {
+    return partial(config, {
+        entry: {
+            bundle: './index.js'
+        }
+    });
+};
\ No newline at end of file
diff --git a/renderer/config/partials/entryHot.js b/renderer/config/partials/entryHot.js
new file mode 100644
index 00000000..86a24750
--- /dev/null
+++ b/renderer/config/partials/entryHot.js
@@ -0,0 +1,16 @@
+'use strict';
+
+var partial = require('webpack-partial').default;
+
+module.exports = function (config) {
+    return partial(config, {
+        entry: {
+            bundle: [
+                'webpack-dev-server/client?http://localhost:8080',
+                './index.js',
+                'webpack/hot/only-dev-server'
+
+            ]
+        }
+    });
+};
diff --git a/renderer/config/partials/outputDev.js b/renderer/config/partials/outputDev.js
new file mode 100644
index 00000000..73f8ca72
--- /dev/null
+++ b/renderer/config/partials/outputDev.js
@@ -0,0 +1,17 @@
+'use strict';
+
+var path = require('path');
+var partial = require('webpack-partial').default;
+
+var ROOT = process.cwd();
+var BUILD = path.join(ROOT, 'build');
+
+module.exports = function (config) {
+    return partial(config, {
+        output: {
+            path: BUILD,
+            publicPath: '/build/',
+            filename: '[name].js'
+        }
+    });
+};
\ No newline at end of file
diff --git a/renderer/config/partials/sourceMapDev.js b/renderer/config/partials/sourceMapDev.js
new file mode 100644
index 00000000..edc3dfda
--- /dev/null
+++ b/renderer/config/partials/sourceMapDev.js
@@ -0,0 +1,16 @@
+'use strict';
+
+var partial = require('webpack-partial').default;
+var SourceMapDevToolPlugin = require('webpack').SourceMapDevToolPlugin;
+
+module.exports = function (config) {
+    return partial(config, {
+        plugins: [
+            new SourceMapDevToolPlugin({
+                append: '\n//# sourceMappingURL=http://127.0.0.1:8080/build/[url]',
+                filename: '[file].map',
+                test: /\.(css|js)($|\?)/
+            })
+        ]
+    });
+};
diff --git a/renderer/config/webpack.config.dev.js b/renderer/config/webpack.config.dev.js
new file mode 100644
index 00000000..57472816
--- /dev/null
+++ b/renderer/config/webpack.config.dev.js
@@ -0,0 +1,16 @@
+'use strict';
+
+var compose = require('ramda').compose;
+
+var baseConfig = require('./webpack.config');
+var babel = require('./partials/babel');
+var entryDev = require('./partials/entryDev')
+var outputDev = require('./partials/outputDev');
+var sourceMapDev = require('./partials/sourceMapDev');
+
+module.exports = compose(
+    babel,
+    entryDev,
+    outputDev,
+    sourceMapDev
+)(baseConfig);
diff --git a/renderer/config/webpack.config.hot.js b/renderer/config/webpack.config.hot.js
new file mode 100644
index 00000000..c2bb7c9c
--- /dev/null
+++ b/renderer/config/webpack.config.hot.js
@@ -0,0 +1,16 @@
+'use strict';
+
+var compose = require('ramda').compose;
+
+var baseConfig = require('./webpack.config');
+var babelHot = require('./partials/babelHot');
+var entryHot = require('./partials/entryHot');
+var outputDev = require('./partials/outputDev');
+var sourceMapDev = require('./partials/sourceMapDev');
+
+module.exports = compose(
+    babelHot,
+    entryHot,
+    outputDev,
+    sourceMapDev
+)(baseConfig);
diff --git a/renderer/config/webpack.config.js b/renderer/config/webpack.config.js
index 86fa06a1..cfc051de 100644
--- a/renderer/config/webpack.config.js
+++ b/renderer/config/webpack.config.js
@@ -1,38 +1,16 @@
+'use strict';
+
 var path = require('path');
 
 var ROOT = process.cwd();
 var SRC = path.join(ROOT, 'src');
-var BUILD = path.join(ROOT, 'build');
 
 module.exports = {
     cache: false,
     // Resolution path for `entry`.
     context: SRC,
-    entry: {
-        bundle: './index.js'
-    },
-    output: {
-        path: BUILD,
-        filename: '[name].js'
-    },
     resolve: {
         // Need `''` so referencing modules by `name.js` works.
         extensions: ['', '.js', '.jsx']
-    },
-    module: {
-        loaders: [
-            {
-                test: /\.js/,
-                include: [SRC],
-                /*
-                 * Use require.resolve to get a deterministic path
-                 * and avoid webpack's magick loader resolution
-                 */
-                loader: require.resolve('babel-loader'),
-                query: {
-                    presets: ['es2015', 'react']
-                }
-            }
-        ]
     }
 };
diff --git a/renderer/package.json b/renderer/package.json
index de602830..449b61e0 100644
--- a/renderer/package.json
+++ b/renderer/package.json
@@ -4,10 +4,10 @@
   "description": "render dash components in react",
   "main": "index.js",
   "scripts": {
-    "build": "webpack --config=config/webpack.config.js",
+    "dev": "webpack-dev-server --config=config/webpack.config.dev.js",
+    "hot": "webpack-dev-server --hot --config=config/webpack.config.hot.js",
     "lint": "eslint --quiet --fix --ignore-path ../.gitignore ./*.js ./**/*.js",
-    "server": "serv .",
-    "start": "npm run build && npm run server",
+    "start": "npm run hot",
     "test": "npm run lint"
   },
   "author": "chriddyp",
@@ -35,7 +35,9 @@
   },
   "devDependencies": {
     "babel-plugin-react-transform": "^2.0.2",
+    "babel-plugin-transform-es2015-modules-commonjs-simple": "^6.7.4",
     "babel-preset-es2015": "^6.6.0",
+    "babel-preset-es2015-webpack": "^6.4.1",
     "babel-preset-react": "^6.5.0",
     "browserify": "^13.0.0",
     "eslint": "^2.8.0",
diff --git a/renderer/src/.babelrc b/renderer/src/.babelrc
index 6dacbf11..5cb1fedf 100644
--- a/renderer/src/.babelrc
+++ b/renderer/src/.babelrc
@@ -1,8 +1,13 @@
 {
-  "presets": ["es2015", "react"],
-  "env": {
-    "development": {
-
+    "presets": ["es2015", "react"],
+    "env": {
+        "development": {
+            "presets": ["es2015-webpack", "react"],
+            "plugins": [
+                ["transform-es2015-modules-commonjs-simple", {
+                    "noMangle": true
+                }]
+            ]
+        }
     }
-  }
 }
diff --git a/renderer/src/store.js b/renderer/src/store.js
index b886fab2..2deddc60 100644
--- a/renderer/src/store.js
+++ b/renderer/src/store.js
@@ -4,12 +4,17 @@ import {createStore} from 'redux'
 
 import reducer from './reducers/reducer';
 
+let store;
 export const initializeStore = () => {
-    const store = createStore(reducer);
+    if (store) {
+        return store;
+    }
+
+    store = createStore(reducer);
 
     if (module.hot) {
         // Enable hot module replacement for reducers
-        module.hot.accept('./reducers', () => {
+        module.hot.accept('./reducers/reducer', () => {
           const nextRootReducer = require('./reducers/reducer');
           store.replaceReducer(nextRootReducer);
         });
