commit df7215a8eb64eb533ea522d3e4f48596ab6fbc80
Author: chriddyp <chris@plot.ly>
Date:   Mon Apr 18 11:51:36 2016 -0400

    :stars: first pass at front-end renderer

diff --git a/.gitignore b/.gitignore
index 2a7f0041..3f499594 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,2 +1,3 @@
 node_modules
 .npm
+**/build/**
diff --git a/renderer/.eslintrc.json b/renderer/.eslintrc.json
new file mode 100644
index 00000000..b71b8726
--- /dev/null
+++ b/renderer/.eslintrc.json
@@ -0,0 +1,11 @@
+{
+    "parserOptions": {
+        "ecmaVersion": 6,
+        "sourceType": "module",
+        "ecmaFeatures": {
+            "jsx": true
+        }
+    },
+    "extends": "eslint:recommended",
+    "rules": {}
+}
diff --git a/renderer/index.html b/renderer/index.html
new file mode 100644
index 00000000..5da1975e
--- /dev/null
+++ b/renderer/index.html
@@ -0,0 +1,15 @@
+<!DOCTYPE html>
+<html>
+    <head>
+        <meta charset="UTF-8" />
+    </head>
+    <body>
+        <div id="react-entry-point"></div>
+    </body>
+
+    <script type="text/javascript">
+
+    </script>
+
+    <script type="text/javascript" src="build/bundle.js"></script>
+</html>
diff --git a/renderer/src/.babelrc b/renderer/src/.babelrc
new file mode 100644
index 00000000..85d9aba6
--- /dev/null
+++ b/renderer/src/.babelrc
@@ -0,0 +1,15 @@
+{
+  "presets": ["es2015", "react"],
+  "env": {
+    "development": {
+      "plugins": [
+        ["react-transform", {
+          "transforms": [{
+            "transform": "livereactload/babel-transform",
+            "imports": ["react"]
+          }]
+        }]
+      ]
+    }
+  }
+}
diff --git a/renderer/src/actions/index.js b/renderer/src/actions/index.js
new file mode 100644
index 00000000..e69de29b
diff --git a/renderer/src/components/Header.react.js b/renderer/src/components/Header.react.js
new file mode 100644
index 00000000..038c0626
--- /dev/null
+++ b/renderer/src/components/Header.react.js
@@ -0,0 +1,11 @@
+'use strict';
+
+import React from 'react';
+
+class Header extends React.Component {
+    render() {
+        return <div>hlo {this.props.name} </div>;
+    }
+}
+
+export default Header;
diff --git a/renderer/src/components/PlotlyGraph.react.js b/renderer/src/components/PlotlyGraph.react.js
new file mode 100644
index 00000000..e69de29b
diff --git a/renderer/src/components/core/Draggable.react.js b/renderer/src/components/core/Draggable.react.js
new file mode 100644
index 00000000..f6c7d550
--- /dev/null
+++ b/renderer/src/components/core/Draggable.react.js
@@ -0,0 +1,43 @@
+'use strict';
+
+import React, { Component, PropTypes } from 'react';
+import { DragSource } from 'react-dnd';
+
+const style = {
+    border: '1px dashed blue'
+};
+
+const beginDrag = (props) => ({name: props.name});
+
+const endDrag = (props, monitor)  => {
+    if (!monitor.didDrop()) return;
+
+    const thisItem = monitor.getItem();
+    const dropResult = monitor.getDropResult();
+
+    if (dropResult) {
+        console.log( // eslint-disable-line no-console
+            `you dropped ${thisItem.name} into ${dropResult.name}`
+        );
+    }
+}
+
+const collectProps = (connect, monitor) => ({
+    connectDragSource: connect.dragSource(),
+    isDragging: monitor.isDragging()
+});
+
+class Draggable extends Component {
+    render() {
+        console.warn('Draggable: ', this.props);
+        const { isDragging, connectDragSource } = this.props;
+        return connectDragSource(
+            isDragging ?
+                <div style={style}>{this.props.children}</div>
+                :
+                <div>{this.props.children}</div>
+        );
+    }
+}
+
+export default DragSource('Draggable', {beginDrag, endDrag}, collectProps)(Draggable);
diff --git a/renderer/src/components/core/Droppable.react.js b/renderer/src/components/core/Droppable.react.js
new file mode 100644
index 00000000..6a7eb6b0
--- /dev/null
+++ b/renderer/src/components/core/Droppable.react.js
@@ -0,0 +1,42 @@
+'use strict';
+
+import React, { PropTypes, Component } from 'react';
+import { DropTarget } from 'react-dnd';
+
+const spec = {
+    drop(props, monitor, component) {return {}},
+    hover(props, monitor, component) {return {}},
+    canDrop(props, monitor) {return true;}
+};
+
+function collectProps(connect, monitor) {
+    return {
+        connectDropTarget: connect.dropTarget(),
+        isOver: monitor.isOver(),
+        isOverCurrent: monitor.isOver({ shallow: true }),
+        canDrop: monitor.canDrop(),
+        itemType: monitor.getItemType()
+    };
+}
+
+class Droppable extends Component {
+    render() {
+        console.warn('Droppable: ', this.props);
+        const { canDrop, isOver, connectDropTarget } = this.props;
+        const isActive = canDrop && isOver;
+
+        const style = {
+            borderWidth: '1px',
+            borderStyle: isActive ? 'solid' : (canDrop ? 'dashed' : 'none'),
+            borderColor: 'blue'
+        };
+
+        return connectDropTarget(
+            <div style={style}>
+                {this.props.children}
+            </div>
+        );
+    }
+}
+
+export default DropTarget('Draggable', spec, collectProps)(Droppable);
diff --git a/renderer/src/container.react.js b/renderer/src/container.react.js
new file mode 100644
index 00000000..9842aff0
--- /dev/null
+++ b/renderer/src/container.react.js
@@ -0,0 +1,25 @@
+/*eslint-env browser */
+
+'use strict';
+
+import React, { Component } from 'react';
+import HTML5Backend from 'react-dnd-html5-backend';
+import { DragDropContext } from 'react-dnd';
+
+import renderTree from './renderTree.js';
+import spec from './spec.js';
+
+// const store = createStore(reducer);
+
+class Container extends Component {
+  render () {
+      return renderTree(spec);
+    //   return (
+    //       <Provider store={store}>
+    //         {renderTree(spec)}
+    //     </Provider>
+    // );
+  }
+}
+
+export default DragDropContext(HTML5Backend)(Container);
diff --git a/renderer/src/index.js b/renderer/src/index.js
new file mode 100644
index 00000000..d8869597
--- /dev/null
+++ b/renderer/src/index.js
@@ -0,0 +1,12 @@
+/*eslint-env browser */
+
+'use strict';
+
+import React from 'react';
+import ReactDOM from 'react-dom';
+import Container from './container.react.js';
+
+ReactDOM.render(
+    <Container/>,
+    document.getElementById('react-entry-point')
+);
diff --git a/renderer/src/package.json b/renderer/src/package.json
new file mode 100644
index 00000000..025d73b7
--- /dev/null
+++ b/renderer/src/package.json
@@ -0,0 +1,37 @@
+{
+  "name": "dash-renderer",
+  "version": "0.0.1",
+  "description": "render dash components in react",
+  "main": "index.js",
+  "scripts": {
+    "test": "echo \"Error: no test specified\" && exit 1",
+    "watch": "node_modules/.bin/watchify index.js -t babelify -p livereactload -o ../build/bundle.js -v"
+  },
+  "author": "chriddyp",
+  "license": "MIT",
+  "browserify": {
+    "transform": [
+      "babelify"
+    ]
+  },
+  "dependencies": {
+    "ramda": "^0.21.0",
+    "react": "^15.0.1",
+    "react-dnd": "^2.1.4",
+    "react-dnd-html5-backend": "^2.1.2",
+    "react-dom": "^15.0.1",
+    "react-redux": "^4.4.5",
+    "redux": "^3.4.0"
+  },
+  "devDependencies": {
+    "babel-plugin-react-transform": "^2.0.2",
+    "babel-preset-es2015": "^6.6.0",
+    "babel-preset-react": "^6.5.0",
+    "babelify": "^7.2.0",
+    "browserify": "^13.0.0",
+    "eslint": "^2.8.0",
+    "livereactload": "^2.2.2",
+    "react-proxy": "^1.1.8",
+    "watchify": "^3.7.0"
+  }
+}
diff --git a/renderer/src/registery.js b/renderer/src/registery.js
new file mode 100644
index 00000000..943064a3
--- /dev/null
+++ b/renderer/src/registery.js
@@ -0,0 +1,7 @@
+'use strict';
+
+import Header from './components/Header.react';
+
+export default {
+    Header
+};
diff --git a/renderer/src/renderTree.js b/renderer/src/renderTree.js
new file mode 100644
index 00000000..b3b60996
--- /dev/null
+++ b/renderer/src/renderTree.js
@@ -0,0 +1,53 @@
+'use strict'
+
+import R from 'ramda';
+import React from 'react';
+import Registry from './registery.js';
+import Draggable from './components/core/Draggable.react.js';
+import Droppable from './components/core/Droppable.react.js';
+
+export default function render(component, path=[]) {
+
+
+    let content;
+    if (!R.has('children', component)) {
+        content = [];
+    }
+    else if (Array.isArray(component.children)) {
+        content = component.children.map((v, i) => {
+            return render(v, R.append(i, path));
+        });
+    }
+    else if (typeof component.children === 'string') {
+        content = [component.children];
+    }
+
+    content = React.createElement(
+        R.has(component.type, Registry) ? Registry[component.type] : component.type,
+        Object.assign({}, component.props, {path}),
+        ...content
+    );
+
+    // draggable?
+    if (component.draggable) {
+        content = (
+            <Draggable>
+                <div> {/* "Only native element nodes can now be passed to React DnD connectors. You can either wrap Header into a <div>, or turn it into a drag source or a drop target itself." */}
+                    {content}
+                </div>
+            </Draggable>
+        );
+    }
+
+    // droppable?
+    if (component.droppable) {
+        content = (
+            <Droppable>
+                {content}
+            </Droppable>
+        );
+    }
+
+    return content;
+
+}
diff --git a/renderer/src/spec.js b/renderer/src/spec.js
new file mode 100644
index 00000000..590a70a2
--- /dev/null
+++ b/renderer/src/spec.js
@@ -0,0 +1,55 @@
+export default {
+    props: {
+        id: 'test',
+        style: {},
+        className: 'parent'
+    },
+    type: 'div',
+    children: [
+        {
+
+            type: 'p',
+            props: {
+                id: 'child',
+                style: {color: 'blue', fontSize: 20}
+            },
+            children: 'paragram',
+            droppable: true
+        },
+        {
+            type: 'Header',
+            props: {name: 'rolo yoloz'},
+            draggable: true
+        },
+        {
+            type: 'div',
+            props: {id: 'd_2'},
+            children: [
+                {
+                    type: 'div',
+                    props: {id: 'd_2_0'},
+                    children: [
+                        {
+                            type: 'div',
+                            props: {id: 'd_2_0_0'}
+                        },
+                        {
+                            type: 'div',
+                            props: {id: 'd_2_0_1'}
+                        }
+                    ]
+                },
+                {
+                    type: 'div',
+                    props: {id: 'd_2_1'},
+                    children: [
+                        {
+                            type: 'div',
+                            props: {id: 'd_2_1_0'}
+                        }
+                    ]
+                }
+            ]
+        }
+    ]
+};
