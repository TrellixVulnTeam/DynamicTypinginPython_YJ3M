commit 5d8c77d16d00eb05f9e13f06de55a815b537ba29
Author: chriddyp <chris@plot.ly>
Date:   Wed Jun 29 16:43:32 2016 -0700

    :wrench: "development" module for creating component classes

diff --git a/dash/dash/__init__.py b/dash/dash/__init__.py
index 3c9575b9..84fe1e3b 100644
--- a/dash/dash/__init__.py
+++ b/dash/dash/__init__.py
@@ -1 +1,2 @@
 from react import Dash
+import development
diff --git a/dash/dash/component_loader/__init__.py b/dash/dash/component_loader/__init__.py
deleted file mode 100644
index b0dcc6db..00000000
--- a/dash/dash/component_loader/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-from loader import load_components
diff --git a/dash/dash/development/__init__.py b/dash/dash/development/__init__.py
new file mode 100644
index 00000000..0b65047d
--- /dev/null
+++ b/dash/dash/development/__init__.py
@@ -0,0 +1,2 @@
+import base_component
+import component_loader
diff --git a/dash/dash/components.py b/dash/dash/development/base_component.py
similarity index 80%
rename from dash/dash/components.py
rename to dash/dash/development/base_component.py
index c81f49e5..8c766f15 100644
--- a/dash/dash/components.py
+++ b/dash/dash/development/base_component.py
@@ -1,13 +1,4 @@
 import collections
-from component_loader import load_components
-
-component_suites_paths = [
-    '../renderer/node_modules/dash-core-components/lib/metadata.json',
-    '../renderer/node_modules/dash-html-components/lib/metadata.json'
-];
-
-# Other valid react attributes include:
-# https://facebook.github.io/react/docs/tags-and-attributes.html#html-attributes
 
 # TODO: Resolve conflict with attributes defined in `dash-html-components`
 supported_react_attributes = [
@@ -30,8 +21,6 @@ supported_react_attributes = [
     'selected', 'shape', 'size', 'sizes', 'span', 'spellCheck',
     'srcDoc', 'srcSet', 'start', 'step', 'tabIndex', 'target',
     'title', 'type', 'useMap', 'value', 'wmode']
-# TODO: add `label` back - it conflicts with the actual html element type I think
-
 
 class Component(collections.MutableSequence):
     def __init__(self, **kwargs):
@@ -157,42 +146,5 @@ def generate_class(typename, args, setup):
     namespace = {'Component': Component, 'setup': setup}
     exec d in namespace
     result = namespace[typename]
-    result.__module__ = sys._getframe(1).f_globals.get('__name__', '__main__')
+    # result.__module__ = sys._getframe(1).f_globals.get('__name__', '__main__')
     return result
-
-
-def empty(self):
-    pass
-
-
-def init_dropdown(self):
-    if self.selected is None:
-        self.selected = self.options[0]['val']
-
-
-_valid_kwargs = ['content', 'id', 'className', 'style', 'dependencies']
-
-# Load in external component suites and generate classes for them
-_component_suites = [load_components(path, _valid_kwargs) for path in component_suites_paths]
-
-for suite in _component_suites:
-    for _c in suite:
-        globals()[_c['type']] = generate_class(_c['type'],
-                                           _c['valid_kwargs'],
-                                           _c['setup'])
-
-
-def gen_table(rows, header=[]):
-    tbl = table([
-        thead([
-            tr([
-                th(h) for h in header
-            ])
-        ]),
-        tbody([
-            tr([
-                td(cell) for cell in row
-            ]) for row in rows
-        ])
-    ])
-    return tbl
diff --git a/dash/dash/component_loader/loader.py b/dash/dash/development/component_loader.py
similarity index 74%
rename from dash/dash/component_loader/loader.py
rename to dash/dash/development/component_loader.py
index a20d3729..c0c71e8b 100644
--- a/dash/dash/component_loader/loader.py
+++ b/dash/dash/development/component_loader.py
@@ -1,9 +1,15 @@
 import json
+from base_component import generate_class
+
 
 def empty(self):
     pass
 
-def load_components(metadata_path, default_props):
+
+def load_components(metadata_path,
+                    default_props=['content', 'id', 'key', 'className', 'style', 'dependencies'],
+                    namespace={},
+                    module_name='__main__'):
     """Load React component metadata into a format Dash can parse.
 
     Usage: load_components('../../component-suites/lib/metadata.json', ['content', 'id', 'key', 'className', 'style', 'dependencies'])
@@ -41,14 +47,20 @@ def load_components(metadata_path, default_props):
             for prop in componentProps:
                 props.append(prop)
 
-        # Define the component, add it to the list
-        components.append({
+        component_spec = {
             'type': name,
             # Convert list to set and back again to get unique values only.
             # This avoids the dreaded `SyntaxError: keyword argument repeated`
             # in dynamic generate_class() function.
             'valid_kwargs': list(set(default_props + props)),
             'setup': empty
-        })
+        }
+
+        component = generate_class(
+            component_spec['type'],
+            component_spec['valid_kwargs'],
+            component_spec['setup']
+        )
 
-    return components
+        component.__module__ = module_name
+        namespace[component_spec['type']] = component
