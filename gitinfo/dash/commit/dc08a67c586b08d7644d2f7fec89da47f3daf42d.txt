commit dc08a67c586b08d7644d2f7fec89da47f3daf42d
Author: alexcjohnson <alex@plot.ly>
Date:   Tue Oct 1 16:38:16 2019 -0400

    cwd for running dashr tests - auto and override

diff --git a/dash/testing/application_runners.py b/dash/testing/application_runners.py
index 131e1b5b..56d38212 100644
--- a/dash/testing/application_runners.py
+++ b/dash/testing/application_runners.py
@@ -7,6 +7,7 @@ import shlex
 import threading
 import subprocess
 import logging
+import inspect
 
 import runpy
 import future.utils as utils
@@ -32,7 +33,7 @@ def import_app(app_file, application_name="app"):
 
     :Example:
 
-        >>> app = import_app('my_app.app')
+        >>> app = import_app("my_app.app")
 
     Will import the application in module `app` of the package `my_app`.
 
@@ -250,11 +251,15 @@ class RRunner(ProcessRunner):
         self.proc = None
 
     # pylint: disable=arguments-differ
-    def start(self, app, start_timeout=2):
-        """Start the server with waitress-serve in process flavor """
+    def start(self, app, start_timeout=2, cwd=None):
+        """Start the server with subprocess and Rscript"""
 
         # app is a R string chunk
-        if not (os.path.isfile(app) and os.path.exists(app)):
+        if (os.path.isfile(app) and os.path.exists(app)):
+            # app is already a file in a dir - use that as cwd
+            if not cwd:
+                cwd = os.path.dirname(app)
+        else:
             path = (
                 "/tmp/app_{}.R".format(uuid.uuid4().hex)
                 if not self.is_windows
@@ -262,9 +267,9 @@ class RRunner(ProcessRunner):
                     (os.getenv("TEMP"), "app_{}.R".format(uuid.uuid4().hex))
                 )
             )
-            logger.info("RRuner start => app is R code chunk")
-            logger.info("make a temporay R file for execution=> %s", path)
-            logger.debug("the content of dashR app")
+            logger.info("RRunner start => app is R code chunk")
+            logger.info("make a temporary R file for execution => %s", path)
+            logger.debug("content of the dashR app")
             logger.debug("%s", app)
 
             with open(path, "w") as fp:
@@ -272,6 +277,13 @@ class RRunner(ProcessRunner):
 
             app = path
 
+            # try to find the path to the calling script to use as cwd
+            if not cwd:
+                for entry in inspect.stack():
+                    if "/dash/testing/" not in entry[1].replace("\\", "/"):
+                        cwd = os.path.dirname(os.path.realpath(entry[1]))
+                        break
+
         logger.info("Run dashR app with Rscript => %s", app)
         args = shlex.split(
             "Rscript {}".format(os.path.realpath(app)),
@@ -281,7 +293,7 @@ class RRunner(ProcessRunner):
 
         try:
             self.proc = subprocess.Popen(
-                args, stdout=subprocess.PIPE, stderr=subprocess.PIPE
+                args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd
             )
             # wait until server is able to answer http request
             wait.until(lambda: self.accessible(self.url), timeout=start_timeout)
diff --git a/dash/testing/composite.py b/dash/testing/composite.py
index d88b41e0..cb8fa54f 100644
--- a/dash/testing/composite.py
+++ b/dash/testing/composite.py
@@ -21,10 +21,11 @@ class DashRComposite(Browser):
         super(DashRComposite, self).__init__(**kwargs)
         self.server = server
 
-    def start_server(self, app):
+    def start_server(self, app, cwd=None):
 
-        # start server with dashR app, the dash arguments are hardcoded
-        self.server(app)
+        # start server with dashR app. The app sets its own run_server args
+        # on the R side, but we support overriding the automatic cwd
+        self.server(app, cwd=cwd)
 
         # set the default server_url, it implicitly call wait_for_page
         self.server_url = self.server.url
