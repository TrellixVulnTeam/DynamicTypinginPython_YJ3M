commit a3fe1b41556dc6d9f9111597d817ce00962651ca
Author: alexcjohnson <alex@plot.ly>
Date:   Thu Mar 26 16:06:53 2020 -0400

    lint/format

diff --git a/dash-renderer/src/APIController.react.js b/dash-renderer/src/APIController.react.js
index 1034647e..d19748f7 100644
--- a/dash-renderer/src/APIController.react.js
+++ b/dash-renderer/src/APIController.react.js
@@ -54,7 +54,9 @@ const UnconnectedContainer = props => {
                     dispatch
                 );
                 dispatch(
-                    setPaths(computePaths(finalLayout, [], null, events.current))
+                    setPaths(
+                        computePaths(finalLayout, [], null, events.current)
+                    )
                 );
                 dispatch(setLayout(finalLayout));
             }
diff --git a/dash-renderer/src/actions/dependencies.js b/dash-renderer/src/actions/dependencies.js
index 0f6ee467..7df7156a 100644
--- a/dash-renderer/src/actions/dependencies.js
+++ b/dash-renderer/src/actions/dependencies.js
@@ -211,7 +211,11 @@ function validateDependencies(parsedDependencies, dispatchError) {
             ]);
         }
 
-        const spec = [[outputs, 'Output'], [inputs, 'Input'], [state, 'State']];
+        const spec = [
+            [outputs, 'Output'],
+            [inputs, 'Input'],
+            [state, 'State'],
+        ];
         spec.forEach(([args, cls]) => {
             if (cls === 'Output' && !hasOutputs) {
                 // just a quirk of how we pass & parse outputs - if you don't
@@ -401,7 +405,10 @@ function findMismatchedWildcards(outputs, inputs, state, head, dispatchError) {
             ]);
         }
     });
-    [[inputs, 'Input'], [state, 'State']].forEach(([args, cls]) => {
+    [
+        [inputs, 'Input'],
+        [state, 'State'],
+    ].forEach(([args, cls]) => {
         args.forEach((arg, i) => {
             const {anyKeys, allsmallerKeys} = findWildcardKeys(arg.id);
             const allWildcardKeys = anyKeys.concat(allsmallerKeys);
@@ -465,7 +472,7 @@ export function validateCallbacksToLayout(state_, dispatchError) {
             'generated by other callbacks (and therefore not in the',
             'initial layout), you can suppress this exception by setting',
             '`suppress_callback_exceptions=True`.',
-            tail(callbacks)
+            tail(callbacks),
         ]);
     }
 
@@ -522,8 +529,7 @@ export function validateCallbacksToLayout(state_, dispatchError) {
                     if (validateIds) {
                         missingId(id, cls, [callback]);
                     }
-                }
-                else {
+                } else {
                     validateProp(id, idPath, property, cls, [callback]);
                 }
             }
@@ -541,10 +547,9 @@ export function validateCallbacksToLayout(state_, dispatchError) {
             const idPath = getPath(paths, id);
             if (!idPath) {
                 if (validateIds) {
-                    missingId(id, cls, flatten(values(idProps)))
+                    missingId(id, cls, flatten(values(idProps)));
                 }
-            }
-            else {
+            } else {
                 for (const property in idProps) {
                     const callbacks = idProps[property];
                     validateProp(id, idPath, property, cls, callbacks);
@@ -867,10 +872,7 @@ function getAnyVals(patternVals, vals) {
 }
 
 function resolveDeps(refKeys, refVals, refPatternVals) {
-    return paths => ({
-        id: idPattern,
-        property,
-    }) => {
+    return paths => ({id: idPattern, property}) => {
         if (typeof idPattern === 'string') {
             const path = getPath(paths, idPattern);
             return path ? [{id: idPattern, property, path}] : [];
@@ -885,7 +887,14 @@ function resolveDeps(refKeys, refVals, refPatternVals) {
         const result = [];
         keyPaths.forEach(({values: vals, path}) => {
             if (
-                idMatch(keys, vals, patternVals, refKeys, refVals, refPatternVals)
+                idMatch(
+                    keys,
+                    vals,
+                    patternVals,
+                    refKeys,
+                    refVals,
+                    refPatternVals
+                )
             ) {
                 result.push({id: zipObj(keys, vals), property, path});
             }
diff --git a/dash/_utils.py b/dash/_utils.py
index 4019bc11..51c476c9 100644
--- a/dash/_utils.py
+++ b/dash/_utils.py
@@ -17,7 +17,7 @@ logger = logging.getLogger()
 
 # py2/3 json.dumps-compatible strings - these are equivalent in py3, not in py2
 # note because we import unicode_literals u"" and "" are both unicode
-_strings = (type(u""), type(utils.bytes_to_native_str(b"")))
+_strings = (type(""), type(utils.bytes_to_native_str(b"")))
 
 
 def interpolate_str(template, **data):
@@ -165,15 +165,14 @@ def create_callback_id(output):
                     # but in case of multiple dots together escape each dot
                     # with `\` so we don't mistake it for multi-outputs
                     x.component_id_str().replace(".", "\\."),
-                    x.component_property
+                    x.component_property,
                 )
                 for x in output
             )
         )
 
     return "{}.{}".format(
-        output.component_id_str().replace(".", "\\."),
-        output.component_property
+        output.component_id_str().replace(".", "\\."), output.component_property
     )
 
 
diff --git a/dash/_validate.py b/dash/_validate.py
index 430bac57..68f0ec77 100644
--- a/dash/_validate.py
+++ b/dash/_validate.py
@@ -7,17 +7,16 @@ from . import exceptions
 from ._utils import patch_collections_abc, _strings, stringify_id
 
 
-def validate_callback(app, layout, output, inputs, state):
+def validate_callback(output, inputs, state):
     is_multi = isinstance(output, (list, tuple))
-    validate_ids = not app.config.suppress_callback_exceptions
 
     outputs = output if is_multi else [output]
 
     for args, cls in [(outputs, Output), (inputs, Input), (state, State)]:
-        validate_callback_args(args, cls, layout, validate_ids)
+        validate_callback_args(args, cls)
 
 
-def validate_callback_args(args, cls, layout, validate_ids):
+def validate_callback_args(args, cls):
     name = cls.__name__
     if not isinstance(args, (list, tuple)):
         raise exceptions.IncorrectTypeException(
@@ -57,10 +56,10 @@ def validate_callback_args(args, cls, layout, validate_ids):
             )
 
         if isinstance(arg.component_id, dict):
-            validate_id_dict(arg, layout, validate_ids, cls.allowed_wildcards)
+            validate_id_dict(arg)
 
         elif isinstance(arg.component_id, _strings):
-            validate_id_string(arg, layout, validate_ids)
+            validate_id_string(arg)
 
         else:
             raise exceptions.IncorrectTypeException(
@@ -72,14 +71,14 @@ def validate_callback_args(args, cls, layout, validate_ids):
             )
 
 
-def validate_id_dict(arg, layout, validate_ids, wildcards):
+def validate_id_dict(arg):
     arg_id = arg.component_id
 
-    for k, v in arg_id.items():
+    for k in arg_id:
         # Need to keep key type validation on the Python side, since
         # non-string keys will be converted to strings in json.dumps and may
         # cause unwanted collisions
-        if not (isinstance(k, _strings)):
+        if not isinstance(k, _strings):
             raise exceptions.IncorrectTypeException(
                 """
                 Wildcard ID keys must be non-empty strings,
@@ -90,7 +89,7 @@ def validate_id_dict(arg, layout, validate_ids, wildcards):
             )
 
 
-def validate_id_string(arg, layout, validate_ids):
+def validate_id_string(arg):
     arg_id = arg.component_id
 
     invalid_chars = ".{"
diff --git a/dash/_watch.py b/dash/_watch.py
index 34c52347..65c87e28 100644
--- a/dash/_watch.py
+++ b/dash/_watch.py
@@ -11,7 +11,7 @@ def watch(folders, on_change, pattern=None, sleep_time=0.1):
     def walk():
         walked = []
         for folder in folders:
-            for current, _, files, in os.walk(folder):
+            for current, _, files in os.walk(folder):
                 for f in files:
                     if pattern and not pattern.search(f):
                         continue
diff --git a/dash/dash.py b/dash/dash.py
index 5b17f88a..752eb7ee 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -40,7 +40,7 @@ from ._utils import (
     patch_collections_abc,
     split_callback_id,
     stringify_id,
-    strip_relative_path
+    strip_relative_path,
 )
 from . import _validate
 from . import _watch
@@ -282,7 +282,7 @@ class Dash(object):
             external_scripts=external_scripts or [],
             external_stylesheets=external_stylesheets or [],
             suppress_callback_exceptions=get_combined_config(
-                "suppress_callback_exceptions", suppress_callback_exceptions, False,
+                "suppress_callback_exceptions", suppress_callback_exceptions, False
             ),
             show_undo_redo=show_undo_redo,
         )
@@ -388,9 +388,7 @@ class Dash(object):
         self.server.before_first_request(self._setup_server)
 
         # add a handler for components suites errors to return 404
-        self.server.errorhandler(InvalidResourceError)(
-            self._invalid_resources_handler
-        )
+        self.server.errorhandler(InvalidResourceError)(self._invalid_resources_handler)
 
         self._add_url(
             "_dash-component-suites/<string:package_name>/<path:fingerprinted_path>",
@@ -497,7 +495,7 @@ class Dash(object):
         def _relative_url_path(relative_package_path="", namespace=""):
 
             module_path = os.path.join(
-                os.path.dirname(sys.modules[namespace].__file__), relative_package_path,
+                os.path.dirname(sys.modules[namespace].__file__), relative_package_path
             )
 
             modified = int(os.stat(module_path).st_mtime)
@@ -602,9 +600,9 @@ class Dash(object):
         )
 
     def _generate_config_html(self):
-        return (
-            '<script id="_dash-config" type="application/json">{}</script>'
-        ).format(json.dumps(self._config()))
+        return ('<script id="_dash-config" type="application/json">{}</script>').format(
+            json.dumps(self._config())
+        )
 
     def _generate_renderer(self):
         return (
@@ -654,7 +652,7 @@ class Dash(object):
         )
 
         response = flask.Response(
-            pkgutil.get_data(package_name, path_in_pkg), mimetype=mimetype,
+            pkgutil.get_data(package_name, path_in_pkg), mimetype=mimetype
         )
 
         if has_fingerprint:
@@ -792,8 +790,7 @@ class Dash(object):
         )
 
     def _insert_callback(self, output, inputs, state):
-        layout = self._cached_layout or self._layout_value()
-        _validate.validate_callback(self, layout, output, inputs, state)
+        _validate.validate_callback(output, inputs, state)
         callback_id = create_callback_id(output)
 
         self.callback_map[callback_id] = {
@@ -882,7 +879,7 @@ class Dash(object):
                 _inline_clientside_template.format(
                     namespace=namespace.replace('"', '\\"'),
                     function_name=function_name.replace('"', '\\"'),
-                    clientside_function=clientside_function
+                    clientside_function=clientside_function,
                 )
             )
 
@@ -916,9 +913,7 @@ class Dash(object):
                 if not multi:
                     output_value, output_spec = [output_value], [output_spec]
 
-                _validate.validate_multi_return(
-                    output_spec, output_value, callback_id
-                )
+                _validate.validate_multi_return(output_spec, output_value, callback_id)
 
                 component_ids = collections.defaultdict(dict)
                 has_update = False
@@ -926,9 +921,7 @@ class Dash(object):
                     if isinstance(val, _NoUpdate):
                         continue
                     for vali, speci in (
-                        zip(val, spec)
-                        if isinstance(spec, list)
-                        else [[val, spec]]
+                        zip(val, spec) if isinstance(spec, list) else [[val, spec]]
                     ):
                         if not isinstance(vali, _NoUpdate):
                             has_update = True
@@ -1047,7 +1040,7 @@ class Dash(object):
     @staticmethod
     def _serve_default_favicon():
         return flask.Response(
-            pkgutil.get_data("dash", "favicon.ico"), content_type="image/x-icon",
+            pkgutil.get_data("dash", "favicon.ico"), content_type="image/x-icon"
         )
 
     def get_asset_url(self, path):
diff --git a/dash/dependencies.py b/dash/dependencies.py
index 5a3fb9b3..fa79b842 100644
--- a/dash/dependencies.py
+++ b/dash/dependencies.py
@@ -49,10 +49,7 @@ class DashDependency:  # pylint: disable=too-few-public-methods
         return i
 
     def to_dict(self):
-        return {
-            "id": self.component_id_str(),
-            "property": self.component_property
-        }
+        return {"id": self.component_id_str(), "property": self.component_property}
 
     def __eq__(self, other):
         """
diff --git a/dash/development/base_component.py b/dash/development/base_component.py
index 3ee18dd6..b68b3599 100644
--- a/dash/development/base_component.py
+++ b/dash/development/base_component.py
@@ -284,9 +284,7 @@ class Component(with_metaclass(ComponentMeta, object)):
         elif isinstance(children, (tuple, MutableSequence)):
             for idx, i in enumerate(children):
                 list_path = "[{:d}] {:s}{}".format(
-                    idx,
-                    type(i).__name__,
-                    self._id_str(i),
+                    idx, type(i).__name__, self._id_str(i)
                 )
                 yield list_path, i
 
diff --git a/dash/development/build_process.py b/dash/development/build_process.py
index 283c3ad4..f621d1e6 100644
--- a/dash/development/build_process.py
+++ b/dash/development/build_process.py
@@ -13,7 +13,7 @@ from .._utils import run_command_with_process, compute_md5, job
 
 logger = logging.getLogger(__name__)
 coloredlogs.install(
-    fmt="%(asctime)s,%(msecs)03d %(levelname)s - %(message)s", datefmt="%H:%M:%S",
+    fmt="%(asctime)s,%(msecs)03d %(levelname)s - %(message)s", datefmt="%H:%M:%S"
 )
 
 
@@ -150,7 +150,7 @@ class Renderer(BuildProcess):
         """dash-renderer's path is binding with the dash folder hierarchy."""
         super(Renderer, self).__init__(
             self._concat(
-                os.path.dirname(__file__), os.pardir, os.pardir, "dash-renderer",
+                os.path.dirname(__file__), os.pardir, os.pardir, "dash-renderer"
             ),
             (
                 ("@babel", "polyfill", "dist", "polyfill.min.js", None),
diff --git a/dash/development/component_generator.py b/dash/development/component_generator.py
index 9702b72d..fd1c1d62 100644
--- a/dash/development/component_generator.py
+++ b/dash/development/component_generator.py
@@ -31,7 +31,7 @@ reserved_words = [
 
 
 class _CombinedFormatter(
-    argparse.ArgumentDefaultsHelpFormatter, argparse.RawDescriptionHelpFormatter,
+    argparse.ArgumentDefaultsHelpFormatter, argparse.RawDescriptionHelpFormatter
 ):
     pass
 
@@ -144,7 +144,7 @@ def cli():
     )
     parser.add_argument("components_source", help="React components source directory.")
     parser.add_argument(
-        "project_shortname", help="Name of the project to export the classes files.",
+        "project_shortname", help="Name of the project to export the classes files."
     )
     parser.add_argument(
         "-p",
diff --git a/dash/development/component_loader.py b/dash/development/component_loader.py
index 648c171c..d7b06e7f 100644
--- a/dash/development/component_loader.py
+++ b/dash/development/component_loader.py
@@ -52,7 +52,7 @@ def load_components(metadata_path, namespace="default_namespace"):
         # the name of the component atm.
         name = componentPath.split("/").pop().split(".")[0]
         component = generate_class(
-            name, componentData["props"], componentData["description"], namespace,
+            name, componentData["props"], componentData["description"], namespace
         )
 
         components.append(component)
diff --git a/dash/testing/application_runners.py b/dash/testing/application_runners.py
index 0b52a9a0..a14f421a 100644
--- a/dash/testing/application_runners.py
+++ b/dash/testing/application_runners.py
@@ -15,11 +15,7 @@ import future.utils as utils
 import flask
 import requests
 
-from dash.testing.errors import (
-    NoAppFoundError,
-    TestingTimeoutError,
-    ServerCloseError,
-)
+from dash.testing.errors import NoAppFoundError, TestingTimeoutError, ServerCloseError
 import dash.testing.wait as wait
 
 
@@ -262,7 +258,7 @@ class RRunner(ProcessRunner):
             # app is a string chunk, we make a temporary folder to store app.R
             # and its relevants assets
             self._tmp_app_path = os.path.join(
-                "/tmp" if not self.is_windows else os.getenv("TEMP"), uuid.uuid4().hex,
+                "/tmp" if not self.is_windows else os.getenv("TEMP"), uuid.uuid4().hex
             )
             try:
                 os.mkdir(self.tmp_app_path)
diff --git a/dash/testing/browser.py b/dash/testing/browser.py
index 80333329..c9b1aa98 100644
--- a/dash/testing/browser.py
+++ b/dash/testing/browser.py
@@ -20,18 +20,9 @@ from selenium.common.exceptions import (
     MoveTargetOutOfBoundsException,
 )
 
-from dash.testing.wait import (
-    text_to_equal,
-    style_to_equal,
-    contains_text,
-    until,
-)
+from dash.testing.wait import text_to_equal, style_to_equal, contains_text, until
 from dash.testing.dash_page import DashPageMixin
-from dash.testing.errors import (
-    DashAppLoadingError,
-    BrowserError,
-    TestingTimeoutError,
-)
+from dash.testing.errors import DashAppLoadingError, BrowserError, TestingTimeoutError
 from dash.testing.consts import SELENIUM_GRID_DEFAULT
 
 
@@ -234,8 +225,9 @@ class Browser(DashPageMixin):
             # so this one calls out directly to execute_script
             lambda: self.driver.execute_script(
                 "return document.querySelectorAll('{}').length".format(selector)
-            ) == 0,
-            timeout if timeout else self._wait_timeout
+            )
+            == 0,
+            timeout if timeout else self._wait_timeout,
         )
 
     def wait_for_element_by_id(self, element_id, timeout=None):
@@ -339,7 +331,7 @@ class Browser(DashPageMixin):
                     return
 
         logger.error(
-            "cannot find matching option using value=%s or index=%s", value, index,
+            "cannot find matching option using value=%s or index=%s", value, index
         )
 
     def toggle_window(self):
@@ -482,7 +474,7 @@ class Browser(DashPageMixin):
         ).perform()
 
     def zoom_in_graph_by_ratio(
-        self, elem_or_selector, start_fraction=0.5, zoom_box_fraction=0.2, compare=True,
+        self, elem_or_selector, start_fraction=0.5, zoom_box_fraction=0.2, compare=True
     ):
         """Zoom out a graph with a zoom box fraction of component dimension
         default start at middle with a rectangle of 1/5 of the dimension use
diff --git a/dash/testing/dash_page.py b/dash/testing/dash_page.py
index ce102918..63b30d40 100644
--- a/dash/testing/dash_page.py
+++ b/dash/testing/dash_page.py
@@ -4,7 +4,7 @@ from bs4 import BeautifulSoup
 class DashPageMixin(object):
     def _get_dash_dom_by_attribute(self, attr):
         return BeautifulSoup(
-            self.find_element(self.dash_entry_locator).get_attribute(attr), "lxml",
+            self.find_element(self.dash_entry_locator).get_attribute(attr), "lxml"
         )
 
     @property
diff --git a/dash/testing/plugin.py b/dash/testing/plugin.py
index 5d107510..0881e143 100644
--- a/dash/testing/plugin.py
+++ b/dash/testing/plugin.py
@@ -4,11 +4,7 @@ from .consts import SELENIUM_GRID_DEFAULT
 
 
 try:
-    from dash.testing.application_runners import (
-        ThreadedRunner,
-        ProcessRunner,
-        RRunner,
-    )
+    from dash.testing.application_runners import ThreadedRunner, ProcessRunner, RRunner
     from dash.testing.browser import Browser
     from dash.testing.composite import DashComposite, DashRComposite
 except ImportError:
@@ -26,7 +22,7 @@ def pytest_addoption(parser):
     )
 
     dash.addoption(
-        "--remote", action="store_true", help="instruct pytest to use selenium grid",
+        "--remote", action="store_true", help="instruct pytest to use selenium grid"
     )
 
     dash.addoption(
@@ -37,7 +33,7 @@ def pytest_addoption(parser):
     )
 
     dash.addoption(
-        "--headless", action="store_true", help="set this flag to run in headless mode",
+        "--headless", action="store_true", help="set this flag to run in headless mode"
     )
 
     dash.addoption(
diff --git a/dash/testing/wait.py b/dash/testing/wait.py
index 1f87fef7..1cf1b0dd 100644
--- a/dash/testing/wait.py
+++ b/dash/testing/wait.py
@@ -10,7 +10,7 @@ logger = logging.getLogger(__name__)
 
 
 def until(
-    wait_cond, timeout, poll=0.1, msg="expected condition not met within timeout",
+    wait_cond, timeout, poll=0.1, msg="expected condition not met within timeout"
 ):  # noqa: C0330
     res = wait_cond()
     logger.debug(
@@ -31,7 +31,7 @@ def until(
 
 
 def until_not(
-    wait_cond, timeout, poll=0.1, msg="expected condition met within timeout",
+    wait_cond, timeout, poll=0.1, msg="expected condition met within timeout"
 ):  # noqa: C0330
     res = wait_cond()
     logger.debug(
diff --git a/tests/integration/callbacks/test_basic_callback.py b/tests/integration/callbacks/test_basic_callback.py
index 0d5aa105..3d84d7a0 100644
--- a/tests/integration/callbacks/test_basic_callback.py
+++ b/tests/integration/callbacks/test_basic_callback.py
@@ -174,51 +174,55 @@ def test_cbsc003_callback_with_unloaded_async_component(dash_duo):
 
 def test_cbsc004_callback_using_unloaded_async_component(dash_duo):
     app = dash.Dash()
-    app.layout = html.Div([
-        dcc.Tabs([
-            dcc.Tab("boo!"),
-            dcc.Tab(
-                dash_table.DataTable(
-                    id="table",
-                    columns=[{"id": "a", "name": "A"}],
-                    data=[{"a": "b"}]
-                )
+    app.layout = html.Div(
+        [
+            dcc.Tabs(
+                [
+                    dcc.Tab("boo!"),
+                    dcc.Tab(
+                        dash_table.DataTable(
+                            id="table",
+                            columns=[{"id": "a", "name": "A"}],
+                            data=[{"a": "b"}],
+                        )
+                    ),
+                ]
             ),
-        ]),
-        html.Button("Update Input", id="btn"),
-        html.Div("Hello", id="output"),
-        html.Div(id="output2")
-    ])
+            html.Button("Update Input", id="btn"),
+            html.Div("Hello", id="output"),
+            html.Div(id="output2"),
+        ]
+    )
 
     @app.callback(
         Output("output", "children"),
         [Input("btn", "n_clicks")],
-        [State("table", "data")]
+        [State("table", "data")],
     )
     def update_out(n_clicks, data):
-        return json.dumps(data) + ' - ' + str(n_clicks)
+        return json.dumps(data) + " - " + str(n_clicks)
 
     @app.callback(
         Output("output2", "children"),
         [Input("btn", "n_clicks")],
-        [State("table", "derived_viewport_data")]
+        [State("table", "derived_viewport_data")],
     )
     def update_out2(n_clicks, data):
-        return json.dumps(data) + ' - ' + str(n_clicks)
+        return json.dumps(data) + " - " + str(n_clicks)
 
     dash_duo.start_server(app)
 
     dash_duo.wait_for_text_to_equal("#output", '[{"a": "b"}] - None')
-    dash_duo.wait_for_text_to_equal("#output2", 'null - None')
+    dash_duo.wait_for_text_to_equal("#output2", "null - None")
 
     dash_duo.find_element("#btn").click()
     dash_duo.wait_for_text_to_equal("#output", '[{"a": "b"}] - 1')
-    dash_duo.wait_for_text_to_equal("#output2", 'null - 1')
+    dash_duo.wait_for_text_to_equal("#output2", "null - 1")
 
     dash_duo.find_element(".tab:not(.tab--selected)").click()
     dash_duo.wait_for_text_to_equal("#table th", "A")
     # table props are in state so no change yet
-    dash_duo.wait_for_text_to_equal("#output2", 'null - 1')
+    dash_duo.wait_for_text_to_equal("#output2", "null - 1")
 
     # repeat a few times, since one of the failure modes I saw during dev was
     # intermittent - but predictably so?
@@ -234,10 +238,7 @@ def test_cbsc004_callback_using_unloaded_async_component(dash_duo):
 
 def test_cbsc005_children_types(dash_duo):
     app = dash.Dash()
-    app.layout = html.Div([
-        html.Button(id="btn"),
-        html.Div("init", id="out")
-    ])
+    app.layout = html.Div([html.Button(id="btn"), html.Div("init", id="out")])
 
     outputs = [
         [None, ""],
@@ -247,7 +248,7 @@ def test_cbsc005_children_types(dash_duo):
         [[6, 7, 8], "678"],
         [["a", "list", "of", "strings"], "alistofstrings"],
         [["strings", 2, "numbers"], "strings2numbers"],
-        [["a string", html.Div("and a div")], "a string\nand a div"]
+        [["a string", html.Div("and a div")], "a string\nand a div"],
     ]
 
     @app.callback(Output("out", "children"), [Input("btn", "n_clicks")])
@@ -266,18 +267,13 @@ def test_cbsc005_children_types(dash_duo):
 
 def test_cbsc006_array_of_objects(dash_duo):
     app = dash.Dash()
-    app.layout = html.Div([
-        html.Button(id="btn"),
-        dcc.Dropdown(id="dd"),
-        html.Div(id="out")
-    ])
+    app.layout = html.Div(
+        [html.Button(id="btn"), dcc.Dropdown(id="dd"), html.Div(id="out")]
+    )
 
     @app.callback(Output("dd", "options"), [Input("btn", "n_clicks")])
     def set_options(n):
-        return [
-            {"label": "opt{}".format(i), "value": i}
-            for i in range(n or 0)
-        ]
+        return [{"label": "opt{}".format(i), "value": i} for i in range(n or 0)]
 
     @app.callback(Output("out", "children"), [Input("dd", "options")])
     def set_out(opts):
@@ -310,34 +306,35 @@ def test_cbsc007_parallel_updates(refresh, dash_duo):
 
     app = dash.Dash()
 
-    app.layout = html.Div([
-        dcc.Location(id='loc', refresh=refresh),
-        html.Button('Update path', id='btn'),
-        dash_table.DataTable(id='t', columns=[{'name': 'a', 'id': 'a'}]),
-        html.Div(id='out')
-    ])
+    app.layout = html.Div(
+        [
+            dcc.Location(id="loc", refresh=refresh),
+            html.Button("Update path", id="btn"),
+            dash_table.DataTable(id="t", columns=[{"name": "a", "id": "a"}]),
+            html.Div(id="out"),
+        ]
+    )
 
-    @app.callback(Output('t', 'data'), [Input('loc', 'pathname')])
+    @app.callback(Output("t", "data"), [Input("loc", "pathname")])
     def set_data(path):
-        return [{'a': (path or repr(path)) + ':a'}]
+        return [{"a": (path or repr(path)) + ":a"}]
 
     @app.callback(
-        Output('out', 'children'),
-        [Input('loc', 'pathname'), Input('t', 'data')]
+        Output("out", "children"), [Input("loc", "pathname"), Input("t", "data")]
     )
     def set_out(path, data):
-        return json.dumps(data) + ' - ' + (path or repr(path))
+        return json.dumps(data) + " - " + (path or repr(path))
 
-    @app.callback(Output('loc', 'pathname'), [Input('btn', 'n_clicks')])
+    @app.callback(Output("loc", "pathname"), [Input("btn", "n_clicks")])
     def set_path(n):
         if not n:
             raise PreventUpdate
 
-        return '/{0}'.format(n)
+        return "/{0}".format(n)
 
     dash_duo.start_server(app)
 
-    dash_duo.wait_for_text_to_equal('#out', '[{"a": "/:a"}] - /')
+    dash_duo.wait_for_text_to_equal("#out", '[{"a": "/:a"}] - /')
     dash_duo.find_element("#btn").click()
     # the refresh=True case here is testing that we really do get the right
     # pathname, not the prevented default value from the layout.
diff --git a/tests/integration/callbacks/test_callback_context.py b/tests/integration/callbacks/test_callback_context.py
index fa909948..bddca9c6 100644
--- a/tests/integration/callbacks/test_callback_context.py
+++ b/tests/integration/callbacks/test_callback_context.py
@@ -13,15 +13,11 @@ from dash.exceptions import PreventUpdate, MissingCallbackContextException
 
 def test_cbcx001_modified_response(dash_duo):
     app = Dash(__name__)
-    app.layout = html.Div(
-        [dcc.Input(id="input", value="ab"), html.Div(id="output")]
-    )
+    app.layout = html.Div([dcc.Input(id="input", value="ab"), html.Div(id="output")])
 
     @app.callback(Output("output", "children"), [Input("input", "value")])
     def update_output(value):
-        callback_context.response.set_cookie(
-            "dash cookie", value + " - cookie"
-        )
+        callback_context.response.set_cookie("dash cookie", value + " - cookie")
         return value + " - output"
 
     dash_duo.start_server(app)
@@ -44,15 +40,10 @@ def test_cbcx002_triggered(dash_duo):
     btns = ["btn-{}".format(x) for x in range(1, 6)]
 
     app.layout = html.Div(
-        [
-            html.Div([html.Button(btn, id=btn) for btn in btns]),
-            html.Div(id="output"),
-        ]
+        [html.Div([html.Button(btn, id=btn) for btn in btns]), html.Div(id="output")]
     )
 
-    @app.callback(
-        Output("output", "children"), [Input(x, "n_clicks") for x in btns]
-    )
+    @app.callback(Output("output", "children"), [Input(x, "n_clicks") for x in btns])
     def on_click(*args):
         if not callback_context.triggered:
             raise PreventUpdate
@@ -79,10 +70,7 @@ def test_cbcx003_no_callback_context():
 
 def test_cbcx004_triggered_backward_compat(dash_duo):
     app = Dash(__name__)
-    app.layout = html.Div([
-        html.Button("click!", id="btn"),
-        html.Div(id="out")
-    ])
+    app.layout = html.Div([html.Button("click!", id="btn"), html.Div(id="out")])
 
     @app.callback(Output("out", "children"), [Input("btn", "n_clicks")])
     def report_triggered(n):
@@ -99,12 +87,12 @@ def test_cbcx004_triggered_backward_compat(dash_duo):
     dash_duo.wait_for_text_to_equal(
         "#out",
         'triggered is falsy, has prop/id ["", ""], and full value '
-        '[{"prop_id": ".", "value": null}]'
+        '[{"prop_id": ".", "value": null}]',
     )
 
     dash_duo.find_element("#btn").click()
     dash_duo.wait_for_text_to_equal(
         "#out",
         'triggered is truthy, has prop/id ["btn", "n_clicks"], and full value '
-        '[{"prop_id": "btn.n_clicks", "value": 1}]'
+        '[{"prop_id": "btn.n_clicks", "value": 1}]',
     )
diff --git a/tests/integration/callbacks/test_layout_paths_with_callbacks.py b/tests/integration/callbacks/test_layout_paths_with_callbacks.py
index ed3b94a0..80656d5b 100644
--- a/tests/integration/callbacks/test_layout_paths_with_callbacks.py
+++ b/tests/integration/callbacks/test_layout_paths_with_callbacks.py
@@ -119,7 +119,7 @@ def test_cblp001_radio_buttons_callbacks_generating_children(dash_duo):
                     "title": value,
                     "width": 500,
                     "height": 400,
-                    "margin": {"autoexpand": False}
+                    "margin": {"autoexpand": False},
                 },
             }
 
@@ -165,8 +165,8 @@ def test_cblp001_radio_buttons_callbacks_generating_children(dash_duo):
         wait.until(
             lambda: (
                 dash_duo.driver.execute_script(
-                    'return document.querySelector("' +
-                    "#{}-graph:not(.dash-graph--pending) .js-plotly-plot".format(
+                    'return document.querySelector("'
+                    + "#{}-graph:not(.dash-graph--pending) .js-plotly-plot".format(
                         chapter
                     )
                     + '").layout.title.text'
@@ -234,7 +234,7 @@ def test_cblp001_radio_buttons_callbacks_generating_children(dash_duo):
     dash_duo.find_elements('input[type="radio"]')[0].click()
 
     wait.until(
-        lambda: dash_duo.redux_state_paths == EXPECTED_PATHS["chapter1"], TIMEOUT,
+        lambda: dash_duo.redux_state_paths == EXPECTED_PATHS["chapter1"], TIMEOUT
     )
     check_chapter("chapter1")
     dash_duo.percy_snapshot(name="chapter-1-again")
diff --git a/tests/integration/callbacks/test_multiple_callbacks.py b/tests/integration/callbacks/test_multiple_callbacks.py
index ecf1bf57..a86a3117 100644
--- a/tests/integration/callbacks/test_multiple_callbacks.py
+++ b/tests/integration/callbacks/test_multiple_callbacks.py
@@ -42,16 +42,18 @@ def test_cbmt001_called_multiple_times_and_out_of_order(dash_duo):
 def test_cbmt002_canceled_intermediate_callback(dash_duo):
     # see https://github.com/plotly/dash/issues/1053
     app = dash.Dash(__name__)
-    app.layout = html.Div([
-        dcc.Input(id="a", value="x"),
-        html.Div("b", id="b"),
-        html.Div("c", id="c"),
-        html.Div(id="out")
-    ])
+    app.layout = html.Div(
+        [
+            dcc.Input(id="a", value="x"),
+            html.Div("b", id="b"),
+            html.Div("c", id="c"),
+            html.Div(id="out"),
+        ]
+    )
 
     @app.callback(
         Output("out", "children"),
-        [Input("a", "value"), Input("b", "children"), Input("c", "children")]
+        [Input("a", "value"), Input("b", "children"), Input("c", "children")],
     )
     def set_out(a, b, c):
         return "{}/{}/{}".format(a, b, c)
@@ -76,14 +78,16 @@ def test_cbmt002_canceled_intermediate_callback(dash_duo):
 def test_cbmt003_chain_with_table(dash_duo):
     # see https://github.com/plotly/dash/issues/1071
     app = dash.Dash(__name__)
-    app.layout = html.Div([
-        html.Div(id="a1"),
-        html.Div(id="a2"),
-        html.Div(id="b1"),
-        html.H1(id="b2"),
-        html.Button("Update", id="button"),
-        dash_table.DataTable(id="table"),
-    ])
+    app.layout = html.Div(
+        [
+            html.Div(id="a1"),
+            html.Div(id="a2"),
+            html.Div(id="b1"),
+            html.H1(id="b2"),
+            html.Button("Update", id="button"),
+            dash_table.DataTable(id="table"),
+        ]
+    )
 
     @app.callback(
         # Changing the order of outputs here fixes the issue
@@ -127,29 +131,37 @@ def test_cbmt003_chain_with_table(dash_duo):
 @pytest.mark.parametrize("MULTI", [False, True])
 def test_cbmt004_chain_with_sliders(MULTI, dash_duo):
     app = dash.Dash(__name__)
-    app.layout = html.Div([
-        html.Button("Button", id="button"),
-        html.Div([
-            html.Label(id="label1"),
-            dcc.Slider(id="slider1", min=0, max=10, value=0),
-
-        ]),
-        html.Div([
-            html.Label(id="label2"),
-            dcc.Slider(id="slider2", min=0, max=10, value=0),
-        ])
-    ])
+    app.layout = html.Div(
+        [
+            html.Button("Button", id="button"),
+            html.Div(
+                [
+                    html.Label(id="label1"),
+                    dcc.Slider(id="slider1", min=0, max=10, value=0),
+                ]
+            ),
+            html.Div(
+                [
+                    html.Label(id="label2"),
+                    dcc.Slider(id="slider2", min=0, max=10, value=0),
+                ]
+            ),
+        ]
+    )
 
     if MULTI:
+
         @app.callback(
             [Output("slider1", "value"), Output("slider2", "value")],
-            [Input("button", "n_clicks")]
+            [Input("button", "n_clicks")],
         )
         def update_slider_vals(n):
             if not n:
                 raise PreventUpdate
             return n, n
+
     else:
+
         @app.callback(Output("slider1", "value"), [Input("button", "n_clicks")])
         def update_slider1_val(n):
             if not n:
@@ -186,17 +198,19 @@ def test_cbmt004_chain_with_sliders(MULTI, dash_duo):
 
 def test_cbmt005_multi_converging_chain(dash_duo):
     app = dash.Dash(__name__)
-    app.layout = html.Div([
-        html.Button("Button 1", id="b1"),
-        html.Button("Button 2", id="b2"),
-        dcc.Slider(id="slider1", min=-5, max=5),
-        dcc.Slider(id="slider2", min=-5, max=5),
-        html.Div(id="out")
-    ])
+    app.layout = html.Div(
+        [
+            html.Button("Button 1", id="b1"),
+            html.Button("Button 2", id="b2"),
+            dcc.Slider(id="slider1", min=-5, max=5),
+            dcc.Slider(id="slider2", min=-5, max=5),
+            html.Div(id="out"),
+        ]
+    )
 
     @app.callback(
         [Output("slider1", "value"), Output("slider2", "value")],
-        [Input("b1", "n_clicks"), Input("b2", "n_clicks")]
+        [Input("b1", "n_clicks"), Input("b2", "n_clicks")],
     )
     def update_sliders(button1, button2):
         if not dash.callback_context.triggered:
@@ -209,7 +223,7 @@ def test_cbmt005_multi_converging_chain(dash_duo):
 
     @app.callback(
         Output("out", "children"),
-        [Input("slider1", "value"), Input("slider2", "value")]
+        [Input("slider1", "value"), Input("slider2", "value")],
     )
     def update_graph(s1, s2):
         return "x={}, y={}".format(s1, s2)
diff --git a/tests/integration/callbacks/test_wildcards.py b/tests/integration/callbacks/test_wildcards.py
index 97d9f4bf..e718457b 100644
--- a/tests/integration/callbacks/test_wildcards.py
+++ b/tests/integration/callbacks/test_wildcards.py
@@ -8,7 +8,7 @@ from dash.dependencies import Input, Output, State, ALL, ALLSMALLER, MATCH
 
 
 def css_escape(s):
-    sel = re.sub('[\\{\\}\\"\\\'.:,]', lambda m: '\\' + m.group(0), s)
+    sel = re.sub("[\\{\\}\\\"\\'.:,]", lambda m: "\\" + m.group(0), s)
     print(sel)
     return sel
 
@@ -16,40 +16,39 @@ def css_escape(s):
 def todo_app():
     app = dash.Dash(__name__)
 
-    app.layout = html.Div([
-        html.Div('Dash To-Do list'),
-        dcc.Input(id="new-item"),
-        html.Button("Add", id="add"),
-        html.Button("Clear Done", id="clear-done"),
-        html.Div(id="list-container"),
-        html.Hr(),
-        html.Div(id="totals")
-    ])
+    app.layout = html.Div(
+        [
+            html.Div("Dash To-Do list"),
+            dcc.Input(id="new-item"),
+            html.Button("Add", id="add"),
+            html.Button("Clear Done", id="clear-done"),
+            html.Div(id="list-container"),
+            html.Hr(),
+            html.Div(id="totals"),
+        ]
+    )
 
     style_todo = {"display": "inline", "margin": "10px"}
     style_done = {"textDecoration": "line-through", "color": "#888"}
     style_done.update(style_todo)
 
-    app.list_calls = Value('i', 0)
-    app.style_calls = Value('i', 0)
-    app.preceding_calls = Value('i', 0)
-    app.total_calls = Value('i', 0)
+    app.list_calls = Value("i", 0)
+    app.style_calls = Value("i", 0)
+    app.preceding_calls = Value("i", 0)
+    app.total_calls = Value("i", 0)
 
     @app.callback(
-        [
-            Output("list-container", "children"),
-            Output("new-item", "value")
-        ],
+        [Output("list-container", "children"), Output("new-item", "value")],
         [
             Input("add", "n_clicks"),
             Input("new-item", "n_submit"),
-            Input("clear-done", "n_clicks")
+            Input("clear-done", "n_clicks"),
         ],
         [
             State("new-item", "value"),
             State({"item": ALL}, "children"),
-            State({"item": ALL, "action": "done"}, "value")
-        ]
+            State({"item": ALL, "action": "done"}, "value"),
+        ],
     )
     def edit_list(add, add2, clear, new_item, items, items_done):
         app.list_calls.value += 1
@@ -59,33 +58,35 @@ def todo_app():
         )
         clearing = len([1 for i in triggered if i == "clear-done.n_clicks"])
         new_spec = [
-            (text, done) for text, done in zip(items, items_done)
+            (text, done)
+            for text, done in zip(items, items_done)
             if not (clearing and done)
         ]
         if adding:
             new_spec.append((new_item, []))
         new_list = [
-            html.Div([
-                dcc.Checklist(
-                    id={"item": i, "action": "done"},
-                    options=[{"label": "", "value": "done"}],
-                    value=done,
-                    style={"display": "inline"}
-                ),
-                html.Div(
-                    text,
-                    id={"item": i},
-                    style=style_done if done else style_todo
-                ),
-                html.Div(id={"item": i, "preceding": True}, style=style_todo)
-            ], style={"clear": "both"})
+            html.Div(
+                [
+                    dcc.Checklist(
+                        id={"item": i, "action": "done"},
+                        options=[{"label": "", "value": "done"}],
+                        value=done,
+                        style={"display": "inline"},
+                    ),
+                    html.Div(
+                        text, id={"item": i}, style=style_done if done else style_todo
+                    ),
+                    html.Div(id={"item": i, "preceding": True}, style=style_todo),
+                ],
+                style={"clear": "both"},
+            )
             for i, (text, done) in enumerate(new_spec)
         ]
         return [new_list, "" if adding else new_item]
 
     @app.callback(
         Output({"item": MATCH}, "style"),
-        [Input({"item": MATCH, "action": "done"}, "value")]
+        [Input({"item": MATCH, "action": "done"}, "value")],
     )
     def mark_done(done):
         app.style_calls.value += 1
@@ -95,8 +96,8 @@ def todo_app():
         Output({"item": MATCH, "preceding": True}, "children"),
         [
             Input({"item": ALLSMALLER, "action": "done"}, "value"),
-            Input({"item": MATCH, "action": "done"}, "value")
-        ]
+            Input({"item": MATCH, "action": "done"}, "value"),
+        ],
     )
     def show_preceding(done_before, this_done):
         app.preceding_calls.value += 1
@@ -110,8 +111,7 @@ def todo_app():
         return out
 
     @app.callback(
-        Output("totals", "children"),
-        [Input({"item": ALL, "action": "done"}, "value")]
+        Output("totals", "children"), [Input({"item": ALL, "action": "done"}, "value")]
     )
     def show_totals(done):
         app.total_calls.value += 1
@@ -147,16 +147,14 @@ def test_cbwc001_todo_app(dash_duo):
         return dash_duo.find_element(selector)
 
     def assert_item(item, text, done, prefix="", suffix=""):
-        dash_duo.wait_for_text_to_equal(
-            css_escape('#{"item":%d}' % item), text
-        )
+        dash_duo.wait_for_text_to_equal(css_escape('#{"item":%d}' % item), text)
 
         expected_note = "" if done else (prefix + " preceding items are done" + suffix)
         dash_duo.wait_for_text_to_equal(
             css_escape('#{"item":%d,"preceding":true}' % item), expected_note
         )
 
-        assert bool(get_done_item(item).get_attribute('checked')) == done
+        assert bool(get_done_item(item).get_attribute("checked")) == done
 
     new_item.send_keys("apples")
     add_item.click()
diff --git a/tests/integration/devtools/test_callback_validation.py b/tests/integration/devtools/test_callback_validation.py
index 882ce4c4..74e4c424 100644
--- a/tests/integration/devtools/test_callback_validation.py
+++ b/tests/integration/devtools/test_callback_validation.py
@@ -2,13 +2,9 @@ import dash_core_components as dcc
 import dash_html_components as html
 import dash
 from dash.dependencies import Input, Output, State, MATCH, ALL, ALLSMALLER
-from dash.testing.wait import until_not
 
 debugging = dict(
-    debug=True,
-    use_reloader=False,
-    use_debugger=True,
-    dev_tools_hot_reload=False,
+    debug=True, use_reloader=False, use_debugger=True, dev_tools_hot_reload=False
 )
 
 
@@ -46,12 +42,15 @@ def test_dvcv001_blank(dash_duo):
 
     dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "2")
 
-    check_error(dash_duo, 0, "A callback is missing Inputs", [
-        "there are no `Input` elements."
-    ])
-    check_error(dash_duo, 1, "A callback is missing Outputs", [
-        "Please provide an output for this callback:"
-    ])
+    check_error(
+        dash_duo, 0, "A callback is missing Inputs", ["there are no `Input` elements."]
+    )
+    check_error(
+        dash_duo,
+        1,
+        "A callback is missing Outputs",
+        ["Please provide an output for this callback:"],
+    )
 
 
 def test_dvcv002_blank_id_prop(dash_duo):
@@ -71,22 +70,30 @@ def test_dvcv002_blank_id_prop(dash_duo):
     check_error(dash_duo, 0, "Circular Dependencies", [])
     check_error(dash_duo, 1, "Same `Input` and `Output`", [])
 
-    check_error(dash_duo, 2, "Callback item missing ID", [
-        'Input[0].id = ""',
-        "Every item linked to a callback needs an ID",
-    ])
-    check_error(dash_duo, 3, "Callback property error", [
-        'Input[0].property = ""',
-        "expected `property` to be a non-empty string.",
-    ])
-    check_error(dash_duo, 4, "Callback item missing ID", [
-        'Output[1].id = ""',
-        "Every item linked to a callback needs an ID",
-    ])
-    check_error(dash_duo, 5, "Callback property error", [
-        'Output[1].property = ""',
-        "expected `property` to be a non-empty string.",
-    ])
+    check_error(
+        dash_duo,
+        2,
+        "Callback item missing ID",
+        ['Input[0].id = ""', "Every item linked to a callback needs an ID"],
+    )
+    check_error(
+        dash_duo,
+        3,
+        "Callback property error",
+        ['Input[0].property = ""', "expected `property` to be a non-empty string."],
+    )
+    check_error(
+        dash_duo,
+        4,
+        "Callback item missing ID",
+        ['Output[1].id = ""', "Every item linked to a callback needs an ID"],
+    )
+    check_error(
+        dash_duo,
+        5,
+        "Callback property error",
+        ['Output[1].property = ""', "expected `property` to be a non-empty string."],
+    )
 
 
 def test_dvcv003_duplicate_outputs_same_callback(dash_duo):
@@ -94,15 +101,14 @@ def test_dvcv003_duplicate_outputs_same_callback(dash_duo):
     app.layout = html.Div([html.Div(id="a"), html.Div(id="b")])
 
     @app.callback(
-        [Output("a", "children"), Output("a", "children")],
-        [Input("b", "children")]
+        [Output("a", "children"), Output("a", "children")], [Input("b", "children")]
     )
     def x(b):
         return b, b
 
     @app.callback(
         [Output({"a": 1}, "children"), Output({"a": ALL}, "children")],
-        [Input("b", "children")]
+        [Input("b", "children")],
     )
     def y(b):
         return b, b
@@ -111,14 +117,22 @@ def test_dvcv003_duplicate_outputs_same_callback(dash_duo):
 
     dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "2")
 
-    check_error(dash_duo, 0, "Overlapping wildcard callback outputs", [
-        'Output 1 ({"a":ALL}.children)',
-        'overlaps another output ({"a":1}.children)',
-        "used in this callback",
-    ])
-    check_error(dash_duo, 1, "Duplicate callback Outputs", [
-        "Output 1 (a.children) is already used by this callback."
-    ])
+    check_error(
+        dash_duo,
+        0,
+        "Overlapping wildcard callback outputs",
+        [
+            'Output 1 ({"a":ALL}.children)',
+            'overlaps another output ({"a":1}.children)',
+            "used in this callback",
+        ],
+    )
+    check_error(
+        dash_duo,
+        1,
+        "Duplicate callback Outputs",
+        ["Output 1 (a.children) is already used by this callback."],
+    )
 
 
 def test_dvcv004_duplicate_outputs_across_callbacks(dash_duo):
@@ -126,8 +140,7 @@ def test_dvcv004_duplicate_outputs_across_callbacks(dash_duo):
     app.layout = html.Div([html.Div(id="a"), html.Div(id="b"), html.Div(id="c")])
 
     @app.callback(
-        [Output("a", "children"), Output("a", "style")],
-        [Input("b", "children")]
+        [Output("a", "children"), Output("a", "style")], [Input("b", "children")]
     )
     def x(b):
         return b, b
@@ -141,29 +154,27 @@ def test_dvcv004_duplicate_outputs_across_callbacks(dash_duo):
         return b
 
     @app.callback(
-        [Output("b", "children"), Output("b", "style")],
-        [Input("c", "children")]
+        [Output("b", "children"), Output("b", "style")], [Input("c", "children")]
     )
     def y2(c):
         return c
 
     @app.callback(
         [Output({"a": 1}, "children"), Output({"b": ALL, "c": 1}, "children")],
-        [Input("b", "children")]
+        [Input("b", "children")],
     )
     def z(b):
         return b, b
 
     @app.callback(
         [Output({"a": ALL}, "children"), Output({"b": 1, "c": ALL}, "children")],
-        [Input("b", "children")]
+        [Input("b", "children")],
     )
     def z2(b):
         return b, b
 
     @app.callback(
-        Output({"a": MATCH}, "children"),
-        [Input({"a": MATCH, "b": 1}, "children")]
+        Output({"a": MATCH}, "children"), [Input({"a": MATCH, "b": 1}, "children")]
     )
     def z3(ab):
         return ab
@@ -172,31 +183,52 @@ def test_dvcv004_duplicate_outputs_across_callbacks(dash_duo):
 
     dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "5")
 
-    check_error(dash_duo, 0, "Overlapping wildcard callback outputs", [
-        'Output 0 ({"a":MATCH}.children)',
-        'overlaps another output ({"a":1}.children)',
-        "used in a different callback.",
-    ])
+    check_error(
+        dash_duo,
+        0,
+        "Overlapping wildcard callback outputs",
+        [
+            'Output 0 ({"a":MATCH}.children)',
+            'overlaps another output ({"a":1}.children)',
+            "used in a different callback.",
+        ],
+    )
 
-    check_error(dash_duo, 1, "Overlapping wildcard callback outputs", [
-        'Output 1 ({"b":1,"c":ALL}.children)',
-        'overlaps another output ({"b":ALL,"c":1}.children)',
-        "used in a different callback.",
-    ])
+    check_error(
+        dash_duo,
+        1,
+        "Overlapping wildcard callback outputs",
+        [
+            'Output 1 ({"b":1,"c":ALL}.children)',
+            'overlaps another output ({"b":ALL,"c":1}.children)',
+            "used in a different callback.",
+        ],
+    )
 
-    check_error(dash_duo, 2, "Overlapping wildcard callback outputs", [
-        'Output 0 ({"a":ALL}.children)',
-        'overlaps another output ({"a":1}.children)',
-        "used in a different callback.",
-    ])
+    check_error(
+        dash_duo,
+        2,
+        "Overlapping wildcard callback outputs",
+        [
+            'Output 0 ({"a":ALL}.children)',
+            'overlaps another output ({"a":1}.children)',
+            "used in a different callback.",
+        ],
+    )
 
-    check_error(dash_duo, 3, "Duplicate callback outputs", [
-        "Output 0 (b.children) is already in use."
-    ])
+    check_error(
+        dash_duo,
+        3,
+        "Duplicate callback outputs",
+        ["Output 0 (b.children) is already in use."],
+    )
 
-    check_error(dash_duo, 4, "Duplicate callback outputs", [
-        "Output 0 (a.children) is already in use."
-    ])
+    check_error(
+        dash_duo,
+        4,
+        "Duplicate callback outputs",
+        ["Output 0 (a.children) is already in use."],
+    )
 
 
 def test_dvcv005_input_output_overlap(dash_duo):
@@ -208,8 +240,7 @@ def test_dvcv005_input_output_overlap(dash_duo):
         return a
 
     @app.callback(
-        [Output("b", "children"), Output("c", "children")],
-        [Input("c", "children")]
+        [Output("b", "children"), Output("c", "children")], [Input("c", "children")]
     )
     def y(c):
         return c, c
@@ -220,7 +251,7 @@ def test_dvcv005_input_output_overlap(dash_duo):
 
     @app.callback(
         [Output({"b": MATCH}, "children"), Output({"b": MATCH, "c": 1}, "children")],
-        [Input({"b": MATCH, "c": 1}, "children")]
+        [Input({"b": MATCH, "c": 1}, "children")],
     )
     def y2(c):
         return c, c
@@ -232,27 +263,41 @@ def test_dvcv005_input_output_overlap(dash_duo):
     check_error(dash_duo, 0, "Dependency Cycle Found: a.children -> a.children", [])
     check_error(dash_duo, 1, "Circular Dependencies", [])
 
-    check_error(dash_duo, 2, "Same `Input` and `Output`", [
-        'Input 0 ({"b":MATCH,"c":1}.children)',
-        "can match the same component(s) as",
-        'Output 1 ({"b":MATCH,"c":1}.children)',
-    ])
+    check_error(
+        dash_duo,
+        2,
+        "Same `Input` and `Output`",
+        [
+            'Input 0 ({"b":MATCH,"c":1}.children)',
+            "can match the same component(s) as",
+            'Output 1 ({"b":MATCH,"c":1}.children)',
+        ],
+    )
 
-    check_error(dash_duo, 3, "Same `Input` and `Output`", [
-        'Input 0 ({"a":1}.children)',
-        "can match the same component(s) as",
-        'Output 0 ({"a":ALL}.children)',
-    ])
+    check_error(
+        dash_duo,
+        3,
+        "Same `Input` and `Output`",
+        [
+            'Input 0 ({"a":1}.children)',
+            "can match the same component(s) as",
+            'Output 0 ({"a":ALL}.children)',
+        ],
+    )
 
-    check_error(dash_duo, 4, "Same `Input` and `Output`", [
-        "Input 0 (c.children)",
-        "matches Output 1 (c.children)",
-    ])
+    check_error(
+        dash_duo,
+        4,
+        "Same `Input` and `Output`",
+        ["Input 0 (c.children)", "matches Output 1 (c.children)"],
+    )
 
-    check_error(dash_duo, 5, "Same `Input` and `Output`", [
-        "Input 0 (a.children)",
-        "matches Output 0 (a.children)",
-    ])
+    check_error(
+        dash_duo,
+        5,
+        "Same `Input` and `Output`",
+        ["Input 0 (a.children)", "matches Output 0 (a.children)"],
+    )
 
 
 def test_dvcv006_inconsistent_wildcards(dash_duo):
@@ -261,7 +306,7 @@ def test_dvcv006_inconsistent_wildcards(dash_duo):
 
     @app.callback(
         [Output({"b": MATCH}, "children"), Output({"b": ALL, "c": 1}, "children")],
-        [Input({"b": MATCH, "c": 2}, "children")]
+        [Input({"b": MATCH, "c": 2}, "children")],
     )
     def x(c):
         return c, [c]
@@ -269,7 +314,7 @@ def test_dvcv006_inconsistent_wildcards(dash_duo):
     @app.callback(
         [Output({"a": MATCH}, "children")],
         [Input({"b": MATCH}, "children"), Input({"c": ALLSMALLER}, "children")],
-        [State({"d": MATCH, "dd": MATCH}, "children"), State({"e": ALL}, "children")]
+        [State({"d": MATCH, "dd": MATCH}, "children"), State({"e": ALL}, "children")],
     )
     def y(b, c, d, e):
         return b + c + d + e
@@ -278,29 +323,49 @@ def test_dvcv006_inconsistent_wildcards(dash_duo):
 
     dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "4")
 
-    check_error(dash_duo, 0, "`Input` / `State` wildcards not in `Output`s", [
-        'State 0 ({"d":MATCH,"dd":MATCH}.children)',
-        "has MATCH or ALLSMALLER on key(s) d, dd",
-        'where Output 0 ({"a":MATCH}.children)',
-    ])
+    check_error(
+        dash_duo,
+        0,
+        "`Input` / `State` wildcards not in `Output`s",
+        [
+            'State 0 ({"d":MATCH,"dd":MATCH}.children)',
+            "has MATCH or ALLSMALLER on key(s) d, dd",
+            'where Output 0 ({"a":MATCH}.children)',
+        ],
+    )
 
-    check_error(dash_duo, 1, "`Input` / `State` wildcards not in `Output`s", [
-        'Input 1 ({"c":ALLSMALLER}.children)',
-        "has MATCH or ALLSMALLER on key(s) c",
-        'where Output 0 ({"a":MATCH}.children)',
-    ])
+    check_error(
+        dash_duo,
+        1,
+        "`Input` / `State` wildcards not in `Output`s",
+        [
+            'Input 1 ({"c":ALLSMALLER}.children)',
+            "has MATCH or ALLSMALLER on key(s) c",
+            'where Output 0 ({"a":MATCH}.children)',
+        ],
+    )
 
-    check_error(dash_duo, 2, "`Input` / `State` wildcards not in `Output`s", [
-        'Input 0 ({"b":MATCH}.children)',
-        "has MATCH or ALLSMALLER on key(s) b",
-        'where Output 0 ({"a":MATCH}.children)',
-    ])
+    check_error(
+        dash_duo,
+        2,
+        "`Input` / `State` wildcards not in `Output`s",
+        [
+            'Input 0 ({"b":MATCH}.children)',
+            "has MATCH or ALLSMALLER on key(s) b",
+            'where Output 0 ({"a":MATCH}.children)',
+        ],
+    )
 
-    check_error(dash_duo, 3, "Mismatched `MATCH` wildcards across `Output`s", [
-        'Output 1 ({"b":ALL,"c":1}.children)',
-        "does not have MATCH wildcards on the same keys as",
-        'Output 0 ({"b":MATCH}.children).',
-    ])
+    check_error(
+        dash_duo,
+        3,
+        "Mismatched `MATCH` wildcards across `Output`s",
+        [
+            'Output 1 ({"b":ALL,"c":1}.children)',
+            "does not have MATCH wildcards on the same keys as",
+            'Output 0 ({"b":MATCH}.children).',
+        ],
+    )
 
 
 def test_dvcv007_disallowed_ids(dash_duo):
@@ -309,7 +374,7 @@ def test_dvcv007_disallowed_ids(dash_duo):
 
     @app.callback(
         Output({"": 1, "a": [4], "c": ALLSMALLER}, "children"),
-        [Input({"b": {"c": 1}}, "children")]
+        [Input({"b": {"c": 1}}, "children")],
     )
     def y(b):
         return b
@@ -318,30 +383,47 @@ def test_dvcv007_disallowed_ids(dash_duo):
 
     dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "4")
 
-    check_error(dash_duo, 0, "Callback wildcard ID error", [
-        'Input[0].id["b"] = {"c":1}',
-        "Wildcard callback ID values must be either wildcards",
-        "or constants of one of these types:",
-        "string, number, boolean",
-    ])
+    check_error(
+        dash_duo,
+        0,
+        "Callback wildcard ID error",
+        [
+            'Input[0].id["b"] = {"c":1}',
+            "Wildcard callback ID values must be either wildcards",
+            "or constants of one of these types:",
+            "string, number, boolean",
+        ],
+    )
 
-    check_error(dash_duo, 1, "Callback wildcard ID error", [
-        'Output[0].id["c"] = ALLSMALLER',
-        "Allowed wildcards for Outputs are:",
-        "ALL, MATCH",
-    ])
+    check_error(
+        dash_duo,
+        1,
+        "Callback wildcard ID error",
+        [
+            'Output[0].id["c"] = ALLSMALLER',
+            "Allowed wildcards for Outputs are:",
+            "ALL, MATCH",
+        ],
+    )
 
-    check_error(dash_duo, 2, "Callback wildcard ID error", [
-        'Output[0].id["a"] = [4]',
-        "Wildcard callback ID values must be either wildcards",
-        "or constants of one of these types:",
-        "string, number, boolean",
-    ])
+    check_error(
+        dash_duo,
+        2,
+        "Callback wildcard ID error",
+        [
+            'Output[0].id["a"] = [4]',
+            "Wildcard callback ID values must be either wildcards",
+            "or constants of one of these types:",
+            "string, number, boolean",
+        ],
+    )
 
-    check_error(dash_duo, 3, "Callback wildcard ID error", [
-        'Output[0].id has key ""',
-        "Keys must be non-empty strings."
-    ])
+    check_error(
+        dash_duo,
+        3,
+        "Callback wildcard ID error",
+        ['Output[0].id has key ""', "Keys must be non-empty strings."],
+    )
 
 
 def bad_id_app(**kwargs):
@@ -367,7 +449,7 @@ def bad_id_app(**kwargs):
     @app.callback(
         [Output("inner-div", "children"), Output("nope", "children")],
         [Input("inner-input", "value")],
-        [State("what", "children")]
+        [State("what", "children")],
     )
     def g2(a):
         return [a, a]
@@ -385,48 +467,68 @@ def test_dvcv008_wrong_callback_id(dash_duo):
 
     dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "4")
 
-    check_error(dash_duo, 0, "ID not found in layout", [
-        "Attempting to connect a callback Input item to component:",
-        '"yeah-no"',
-        "but no components with that id exist in the layout.",
-        "If you are assigning callbacks to components that are",
-        "generated by other callbacks (and therefore not in the",
-        "initial layout), you can suppress this exception by setting",
-        "`suppress_callback_exceptions=True`.",
-        "This ID was used in the callback(s) for Output(s):",
-        "outer-input.value"
-    ])
-
-    check_error(dash_duo, 1, "ID not found in layout", [
-        "Attempting to connect a callback Output item to component:",
-        '"nope"',
-        "but no components with that id exist in the layout.",
-        "This ID was used in the callback(s) for Output(s):",
-        "inner-div.children, nope.children"
-    ])
-
-    check_error(dash_duo, 2, "ID not found in layout", [
-        "Attempting to connect a callback State item to component:",
-        '"what"',
-        "but no components with that id exist in the layout.",
-        "This ID was used in the callback(s) for Output(s):",
-        "inner-div.children, nope.children"
-    ])
-
-    check_error(dash_duo, 3, "ID not found in layout", [
-        "Attempting to connect a callback Output item to component:",
-        '"nuh-uh"',
-        "but no components with that id exist in the layout.",
-        "This ID was used in the callback(s) for Output(s):",
-        "nuh-uh.children"
-    ])
+    check_error(
+        dash_duo,
+        0,
+        "ID not found in layout",
+        [
+            "Attempting to connect a callback Input item to component:",
+            '"yeah-no"',
+            "but no components with that id exist in the layout.",
+            "If you are assigning callbacks to components that are",
+            "generated by other callbacks (and therefore not in the",
+            "initial layout), you can suppress this exception by setting",
+            "`suppress_callback_exceptions=True`.",
+            "This ID was used in the callback(s) for Output(s):",
+            "outer-input.value",
+        ],
+    )
+
+    check_error(
+        dash_duo,
+        1,
+        "ID not found in layout",
+        [
+            "Attempting to connect a callback Output item to component:",
+            '"nope"',
+            "but no components with that id exist in the layout.",
+            "This ID was used in the callback(s) for Output(s):",
+            "inner-div.children, nope.children",
+        ],
+    )
+
+    check_error(
+        dash_duo,
+        2,
+        "ID not found in layout",
+        [
+            "Attempting to connect a callback State item to component:",
+            '"what"',
+            "but no components with that id exist in the layout.",
+            "This ID was used in the callback(s) for Output(s):",
+            "inner-div.children, nope.children",
+        ],
+    )
+
+    check_error(
+        dash_duo,
+        3,
+        "ID not found in layout",
+        [
+            "Attempting to connect a callback Output item to component:",
+            '"nuh-uh"',
+            "but no components with that id exist in the layout.",
+            "This ID was used in the callback(s) for Output(s):",
+            "nuh-uh.children",
+        ],
+    )
 
 
 def test_dvcv009_suppress_callback_exceptions(dash_duo):
     dash_duo.start_server(bad_id_app(suppress_callback_exceptions=True), **debugging)
 
-    dash_duo.find_element('.dash-debug-menu')
-    dash_duo.wait_for_no_elements('.test-devtools-error-count')
+    dash_duo.find_element(".dash-debug-menu")
+    dash_duo.wait_for_no_elements(".test-devtools-error-count")
 
 
 def test_dvcv010_bad_props(dash_duo):
@@ -445,7 +547,7 @@ def test_dvcv010_bad_props(dash_duo):
         Output("inner-div", "xyz"),
         # "data-xyz" is OK, does not give an error
         [Input("inner-input", "pdq"), Input("inner-div", "data-xyz")],
-        [State("inner-div", "value")]
+        [State("inner-div", "value")],
     )
     def xyz(a, b, c):
         a if b else c
@@ -454,7 +556,7 @@ def test_dvcv010_bad_props(dash_duo):
         Output({"a": MATCH}, "no"),
         [Input({"a": MATCH}, "never")],
         # "boo" will not error because we don't check State MATCH/ALLSMALLER
-        [State({"a": MATCH}, "boo"), State({"a": ALL}, "nope")]
+        [State({"a": MATCH}, "boo"), State({"a": ALL}, "nope")],
     )
     def f(a, b, c):
         return a if b else c
@@ -463,52 +565,82 @@ def test_dvcv010_bad_props(dash_duo):
 
     dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "6")
 
-    check_error(dash_duo, 0, "Invalid prop for this component", [
-        'Property "never" was used with component ID:',
-        '{"a":1}',
-        "in one of the Input items of a callback.",
-        "This ID is assigned to a dash_core_components.Input component",
-        "in the layout, which does not support this property.",
-        "This ID was used in the callback(s) for Output(s):",
-        '{"a":MATCH}.no'
-    ])
-
-    check_error(dash_duo, 1, "Invalid prop for this component", [
-        'Property "nope" was used with component ID:',
-        '{"a":1}',
-        "in one of the State items of a callback.",
-        "This ID is assigned to a dash_core_components.Input component",
-        '{"a":MATCH}.no'
-    ])
-
-    check_error(dash_duo, 2, "Invalid prop for this component", [
-        'Property "no" was used with component ID:',
-        '{"a":1}',
-        "in one of the Output items of a callback.",
-        "This ID is assigned to a dash_core_components.Input component",
-        '{"a":MATCH}.no'
-    ])
-
-    check_error(dash_duo, 3, "Invalid prop for this component", [
-        'Property "pdq" was used with component ID:',
-        '"inner-input"',
-        "in one of the Input items of a callback.",
-        "This ID is assigned to a dash_core_components.Input component",
-        "inner-div.xyz"
-    ])
-
-    check_error(dash_duo, 4, "Invalid prop for this component", [
-        'Property "value" was used with component ID:',
-        '"inner-div"',
-        "in one of the State items of a callback.",
-        "This ID is assigned to a dash_html_components.Div component",
-        "inner-div.xyz"
-    ])
-
-    check_error(dash_duo, 5, "Invalid prop for this component", [
-        'Property "xyz" was used with component ID:',
-        '"inner-div"',
-        "in one of the Output items of a callback.",
-        "This ID is assigned to a dash_html_components.Div component",
-        "inner-div.xyz"
-    ])
+    check_error(
+        dash_duo,
+        0,
+        "Invalid prop for this component",
+        [
+            'Property "never" was used with component ID:',
+            '{"a":1}',
+            "in one of the Input items of a callback.",
+            "This ID is assigned to a dash_core_components.Input component",
+            "in the layout, which does not support this property.",
+            "This ID was used in the callback(s) for Output(s):",
+            '{"a":MATCH}.no',
+        ],
+    )
+
+    check_error(
+        dash_duo,
+        1,
+        "Invalid prop for this component",
+        [
+            'Property "nope" was used with component ID:',
+            '{"a":1}',
+            "in one of the State items of a callback.",
+            "This ID is assigned to a dash_core_components.Input component",
+            '{"a":MATCH}.no',
+        ],
+    )
+
+    check_error(
+        dash_duo,
+        2,
+        "Invalid prop for this component",
+        [
+            'Property "no" was used with component ID:',
+            '{"a":1}',
+            "in one of the Output items of a callback.",
+            "This ID is assigned to a dash_core_components.Input component",
+            '{"a":MATCH}.no',
+        ],
+    )
+
+    check_error(
+        dash_duo,
+        3,
+        "Invalid prop for this component",
+        [
+            'Property "pdq" was used with component ID:',
+            '"inner-input"',
+            "in one of the Input items of a callback.",
+            "This ID is assigned to a dash_core_components.Input component",
+            "inner-div.xyz",
+        ],
+    )
+
+    check_error(
+        dash_duo,
+        4,
+        "Invalid prop for this component",
+        [
+            'Property "value" was used with component ID:',
+            '"inner-div"',
+            "in one of the State items of a callback.",
+            "This ID is assigned to a dash_html_components.Div component",
+            "inner-div.xyz",
+        ],
+    )
+
+    check_error(
+        dash_duo,
+        5,
+        "Invalid prop for this component",
+        [
+            'Property "xyz" was used with component ID:',
+            '"inner-div"',
+            "in one of the Output items of a callback.",
+            "This ID is assigned to a dash_html_components.Div component",
+            "inner-div.xyz",
+        ],
+    )
diff --git a/tests/integration/devtools/test_devtools_error_handling.py b/tests/integration/devtools/test_devtools_error_handling.py
index a9773c27..87be679e 100644
--- a/tests/integration/devtools/test_devtools_error_handling.py
+++ b/tests/integration/devtools/test_devtools_error_handling.py
@@ -233,7 +233,7 @@ def test_dveh005_multiple_outputs(dash_duo):
     app.layout = html.Div(
         [
             html.Button(
-                id="multi-output", children="trigger multi output update", n_clicks=0,
+                id="multi-output", children="trigger multi output update", n_clicks=0
             ),
             html.Div(id="multi-1"),
             html.Div(id="multi-2"),
diff --git a/tests/integration/devtools/test_props_check.py b/tests/integration/devtools/test_props_check.py
index 2b33ed40..022d6873 100644
--- a/tests/integration/devtools/test_props_check.py
+++ b/tests/integration/devtools/test_props_check.py
@@ -186,7 +186,7 @@ def test_dvpc001_prop_check_errors_with_path(dash_duo):
             return "Initial state"
         test_case = test_cases[pathname.strip("/")]
         return html.Div(
-            id="new-component", children=test_case["component"](**test_case["props"]),
+            id="new-component", children=test_case["component"](**test_case["props"])
         )
 
     dash_duo.start_server(
diff --git a/tests/integration/renderer/test_persistence.py b/tests/integration/renderer/test_persistence.py
index 7d10f4d8..2fc5672b 100644
--- a/tests/integration/renderer/test_persistence.py
+++ b/tests/integration/renderer/test_persistence.py
@@ -386,7 +386,9 @@ def test_rdps010_toggle_persistence(dash_duo):
 
     dash_duo.find_element("#persistence-val").send_keys("2")
     dash_duo.wait_for_text_to_equal("#out", "a")
-    dash_duo.find_element("#persisted").send_keys(Keys.BACK_SPACE)  # persist falsy value
+    dash_duo.find_element("#persisted").send_keys(
+        Keys.BACK_SPACE
+    )  # persist falsy value
     dash_duo.wait_for_text_to_equal("#out", "")
 
     # alpaca not saved with falsy persistence
@@ -397,7 +399,7 @@ def test_rdps010_toggle_persistence(dash_duo):
     dash_duo.find_element("#persistence-val").send_keys("s")
     dash_duo.wait_for_text_to_equal("#out", "anchovies")
     dash_duo.find_element("#persistence-val").send_keys("2")
-    dash_duo.wait_for_text_to_equal('#out', "")
+    dash_duo.wait_for_text_to_equal("#out", "")
 
 
 def test_rdps011_toggle_persistence2(dash_duo):
diff --git a/tests/integration/renderer/test_state_and_input.py b/tests/integration/renderer/test_state_and_input.py
index 3192ce95..a57aeb7f 100644
--- a/tests/integration/renderer/test_state_and_input.py
+++ b/tests/integration/renderer/test_state_and_input.py
@@ -30,8 +30,11 @@ def test_rdsi001_state_and_inputs(dash_duo):
 
     dash_duo.start_server(app)
 
-    def input_(): return dash_duo.find_element("#input")
-    def output_(): return dash_duo.find_element("#output")
+    def input_():
+        return dash_duo.find_element("#input")
+
+    def output_():
+        return dash_duo.find_element("#output")
 
     assert (
         output_().text == 'input="Initial Input", state="Initial State"'
@@ -81,8 +84,11 @@ def test_rdsi002_event_properties_state_and_inputs(dash_duo):
 
     dash_duo.start_server(app)
 
-    def btn(): return dash_duo.find_element("#button")
-    def output(): return dash_duo.find_element("#output")
+    def btn():
+        return dash_duo.find_element("#button")
+
+    def output():
+        return dash_duo.find_element("#output")
 
     assert (
         output().text == 'input="Initial Input", state="Initial State"'
diff --git a/tests/integration/test_integration.py b/tests/integration/test_integration.py
index 24ce6355..b1960178 100644
--- a/tests/integration/test_integration.py
+++ b/tests/integration/test_integration.py
@@ -234,7 +234,7 @@ def test_inin006_flow_component(dash_duo):
     )
 
     @app.callback(
-        Output("output", "children"), [Input("react", "value"), Input("flow", "value")],
+        Output("output", "children"), [Input("react", "value"), Input("flow", "value")]
     )
     def display_output(react_value, flow_value):
         return html.Div(
@@ -711,7 +711,7 @@ def test_inin020_callback_return_validation():
         pytest.fail("not serializable")
 
     @app.callback(
-        [Output("c", "children"), Output("d", "children")], [Input("a", "children")],
+        [Output("c", "children"), Output("d", "children")], [Input("a", "children")]
     )
     def multi(a):
         return [1, set([2])]
@@ -719,13 +719,13 @@ def test_inin020_callback_return_validation():
     with pytest.raises(InvalidCallbackReturnValue):
         outputs_list = [
             {"id": "c", "property": "children"},
-            {"id": "d", "property": "children"}
+            {"id": "d", "property": "children"},
         ]
         multi("aaa", outputs_list=outputs_list)
         pytest.fail("nested non-serializable")
 
     @app.callback(
-        [Output("e", "children"), Output("f", "children")], [Input("a", "children")],
+        [Output("e", "children"), Output("f", "children")], [Input("a", "children")]
     )
     def multi2(a):
         return ["abc"]
@@ -733,7 +733,7 @@ def test_inin020_callback_return_validation():
     with pytest.raises(InvalidCallbackReturnValue):
         outputs_list = [
             {"id": "e", "property": "children"},
-            {"id": "f", "property": "children"}
+            {"id": "f", "property": "children"},
         ]
         multi2("aaa", outputs_list=outputs_list)
         pytest.fail("wrong-length list")
diff --git a/tests/integration/test_render.py b/tests/integration/test_render.py
index ec6fc902..ed3bc7a1 100644
--- a/tests/integration/test_render.py
+++ b/tests/integration/test_render.py
@@ -863,23 +863,37 @@ class Tests(IntegrationTests):
         self.wait_for_text_to_equal("#output-pre", "request_pre changed this text!")
         self.wait_for_text_to_equal("#output-post", "request_post changed this text!")
         pre_payload = self.wait_for_element_by_css_selector("#output-pre-payload").text
-        post_payload = self.wait_for_element_by_css_selector("#output-post-payload").text
-        post_response = self.wait_for_element_by_css_selector("#output-post-response").text
-        self.assertEqual(json.loads(pre_payload), {
-            "output": "output-1.children",
-            "outputs": {"id": "output-1", "property": "children"},
-            "changedPropIds": ["input.value"],
-            "inputs": [{"id": "input", "property": "value", "value": "fire request hooks"}]
-        })
-        self.assertEqual(json.loads(post_payload), {
-            "output": "output-1.children",
-            "outputs": {"id": "output-1", "property": "children"},
-            "changedPropIds": ["input.value"],
-            "inputs": [{"id": "input", "property": "value", "value": "fire request hooks"}]
-        })
-        self.assertEqual(json.loads(post_response), {
-            "output-1": {"children": "fire request hooks"}
-        })
+        post_payload = self.wait_for_element_by_css_selector(
+            "#output-post-payload"
+        ).text
+        post_response = self.wait_for_element_by_css_selector(
+            "#output-post-response"
+        ).text
+        self.assertEqual(
+            json.loads(pre_payload),
+            {
+                "output": "output-1.children",
+                "outputs": {"id": "output-1", "property": "children"},
+                "changedPropIds": ["input.value"],
+                "inputs": [
+                    {"id": "input", "property": "value", "value": "fire request hooks"}
+                ],
+            },
+        )
+        self.assertEqual(
+            json.loads(post_payload),
+            {
+                "output": "output-1.children",
+                "outputs": {"id": "output-1", "property": "children"},
+                "changedPropIds": ["input.value"],
+                "inputs": [
+                    {"id": "input", "property": "value", "value": "fire request hooks"}
+                ],
+            },
+        )
+        self.assertEqual(
+            json.loads(post_response), {"output-1": {"children": "fire request hooks"}}
+        )
         self.percy_snapshot(name="request-hooks render")
 
     def test_graphs_in_tabs_do_not_share_state(self):
diff --git a/tests/unit/test_configs.py b/tests/unit/test_configs.py
index 2eff1a56..7fccbc17 100644
--- a/tests/unit/test_configs.py
+++ b/tests/unit/test_configs.py
@@ -12,11 +12,7 @@ from dash._configs import (
     get_combined_config,
     load_dash_env_vars,
 )
-from dash._utils import (
-    get_asset_path,
-    get_relative_path,
-    strip_relative_path,
-)
+from dash._utils import get_asset_path, get_relative_path, strip_relative_path
 
 
 @pytest.fixture
