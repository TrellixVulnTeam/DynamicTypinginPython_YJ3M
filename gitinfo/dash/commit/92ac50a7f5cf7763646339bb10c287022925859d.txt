commit 92ac50a7f5cf7763646339bb10c287022925859d
Author: chriddyp <chris@plot.ly>
Date:   Tue Apr 26 17:37:15 2016 -0400

    :palm_tree: store the dependency graph in the store

diff --git a/renderer/package.json b/renderer/package.json
index c205293c..4465b1dc 100644
--- a/renderer/package.json
+++ b/renderer/package.json
@@ -26,6 +26,7 @@
     "babel-preset-es2015": "^6.6.0",
     "babel-preset-react": "^6.5.0",
     "clean-webpack-plugin": "^0.1.9",
+    "dependency-graph": "^0.4.1",
     "immutable": "^3.8.1",
     "radium": "^0.17.1",
     "ramda": "^0.21.0",
diff --git a/renderer/src/reducers/dependencyGraph.js b/renderer/src/reducers/dependencyGraph.js
new file mode 100644
index 00000000..c9ede34a
--- /dev/null
+++ b/renderer/src/reducers/dependencyGraph.js
@@ -0,0 +1,32 @@
+import {DepGraph} from 'dependency-graph';
+
+import {ACTIONS} from '../actions';
+import utils from './utils.js';
+import spec from '../spec.js'; // TODO: this'll eventually load from the API
+
+const initialGraph = new DepGraph();
+
+// add ID's to all the components
+utils.crawlLayout(spec, child => {
+    if (child.props && child.props.id) {
+        initialGraph.addNode(child.props.id);
+    }
+});
+
+// add dependencies to the graph
+utils.crawlLayout(spec, child => {
+    if (child.dependencies) {
+        for (let i = 0; i < child.dependencies.length; i++) {
+            initialGraph.addDependency(child.props.id, child.dependencies[i]);
+        }
+    }
+});
+
+const dependencyGraph = (state = initialGraph, action) => {
+    switch (action.type) {
+        default:
+            return state;
+    }
+}
+
+export default dependencyGraph;
diff --git a/renderer/src/reducers/reducer.js b/renderer/src/reducers/reducer.js
index 9211708e..b147e881 100644
--- a/renderer/src/reducers/reducer.js
+++ b/renderer/src/reducers/reducer.js
@@ -2,7 +2,8 @@
 
 import { combineReducers } from 'redux';
 import layout from './layout';
+import dependencyGraph from './dependencyGraph';
 
-const reducer = combineReducers({layout});
+const reducer = combineReducers({layout, dependencyGraph, paths, requestQueue});
 
 export default reducer;
diff --git a/renderer/src/reducers/utils.js b/renderer/src/reducers/utils.js
new file mode 100644
index 00000000..bb57a472
--- /dev/null
+++ b/renderer/src/reducers/utils.js
@@ -0,0 +1,22 @@
+import R from 'ramda';
+
+const pad = R.curry((array, paddingValue) => array.reduce((r, v) => {
+    r.push(paddingValue);
+    r.push(v);
+    return r;
+}, []));
+
+// crawl a layout object, apply a function on every object
+function crawlLayout(object, func, path=[]) {
+    func(object, path);
+    if (Array.isArray(object.children)) {
+        object.children.forEach((child, i) => {
+            crawlLayout(child, func, R.append(i, path));
+        });
+    }
+}
+
+export default {
+    createTreePath: (array) => pad(array, 'children'),
+    crawlLayout
+};
