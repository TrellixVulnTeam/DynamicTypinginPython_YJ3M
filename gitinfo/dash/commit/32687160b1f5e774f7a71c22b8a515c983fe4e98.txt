commit 32687160b1f5e774f7a71c22b8a515c983fe4e98
Author: chriddyp <chris@plot.ly>
Date:   Mon Apr 25 16:50:21 2016 -0400

    :star2: example of a component with an `editable` prop
    
    The `EditableDiv` component is an example of an editable component that
    might live in one our generic component suites.
    
    If rendered with `editable=true`, you can click on this component to
    edit its text. On text input, the store is updated with the new props

diff --git a/renderer/src/components/EditableDiv.react.js b/renderer/src/components/EditableDiv.react.js
new file mode 100644
index 00000000..79a0d5e7
--- /dev/null
+++ b/renderer/src/components/EditableDiv.react.js
@@ -0,0 +1,82 @@
+/*
+ * Example of a pretty generic editable component.
+ * These types of components would live in their own set of modules ("component suites").
+ * This component illustrates how the `onPropUpdate` prop can be used
+ */
+
+
+import R from 'ramda';
+import Radium from 'radium';
+import React, { PropTypes, Component } from 'react';
+import ReactDOM from 'react-dom';
+
+// each suite might have its own set of Styles
+import Styles from './Styles';
+
+const baseStyles = {
+    color: Styles.colors.base,
+    ':hover': {
+        color: Styles.colors.baseHover
+    }
+}
+
+class EditableDiv extends React.Component {
+
+    constructor(props) {
+        super(props);
+        this.state = {inEditMode: false};
+    }
+
+    componentDidUpdate() {
+        if (this.state.inEditMode) ReactDOM.findDOMNode(this.refs.input).focus();
+    }
+
+    render() {
+        if (this.state.inEditMode) {
+            return (
+                <div>
+                    <input
+                        ref="input"
+                        autofocus={true}
+                        style={R.mergeAll([
+                            {border: 'none', padding: 0, margin: 0},
+                            baseStyles,
+                            this.props.style
+                        ])}
+                        value={this.props.text}
+                        onChange={(e) => this.props.updateProps({text: e.target.value})}
+                        onBlur={() => this.setState({inEditMode: false})}
+                    />
+                </div>
+            );
+        }
+        else {
+            return (
+                <div style={R.merge(baseStyles, this.props.style)}
+                     onClick={() => {
+                        if (this.props.editable) this.setState({inEditMode: true});
+                    }}
+                >
+                    {this.props.text}
+                </div>
+            );
+        }
+    }
+
+}
+
+EditableDiv.propTypes = {
+    // unique to this component
+    text: PropTypes.string.isRequired, // the displayed text of this component
+    style: PropTypes.object,           // the style of the text
+
+    // Passed in from the renderer
+    editable: PropTypes.bool,     // whether or not this component should be rendered as editable
+    updateProps: PropTypes.func   // function that updates the state tree
+};
+
+EditableDiv.defaultProps = {
+    text: ''
+};
+
+export default Radium(EditableDiv);
diff --git a/renderer/src/components/Styles.js b/renderer/src/components/Styles.js
new file mode 100644
index 00000000..8add81be
--- /dev/null
+++ b/renderer/src/components/Styles.js
@@ -0,0 +1,12 @@
+const palette = {
+    feature: 'rgb(35, 189, 228)',
+    contrast: 'rgb(255, 40, 29)',
+    base: 'rgb(45, 58, 60)',
+    baseHover: 'rgba(45, 58, 60, 0.8)',
+    baselight: 'rgb(245, 246, 249)',
+    background: 'rgb(255, 255, 255)'
+};
+
+export default {
+    colors: palette
+}
diff --git a/renderer/src/package.json b/renderer/src/package.json
index 2493bcbc..8ebadff9 100644
--- a/renderer/src/package.json
+++ b/renderer/src/package.json
@@ -15,6 +15,7 @@
     ]
   },
   "dependencies": {
+    "radium": "^0.17.1",
     "ramda": "^0.21.0",
     "react": "^15.0.1",
     "react-dnd": "^2.1.4",
diff --git a/renderer/src/registery.js b/renderer/src/registery.js
index d4857650..beb3326a 100644
--- a/renderer/src/registery.js
+++ b/renderer/src/registery.js
@@ -3,7 +3,10 @@
 import Header from './components/Header.react';
 import EditableContent from './components/core/EditableContent.react';
 
+import EditableDiv from './components/EditableDiv.react';
+
 export default {
     Header,
-    EditableContent
+    EditableContent,
+    EditableDiv
 };
diff --git a/renderer/src/spec.js b/renderer/src/spec.js
index 3de04069..4b1e94f6 100644
--- a/renderer/src/spec.js
+++ b/renderer/src/spec.js
@@ -52,8 +52,15 @@ export default {
                             props: {id: 'd_2_1_0'}
                         }
                     ]
+            type: 'EditableDiv',
+            props: {
+                editable: true,
+                text: 'basic editable div',
+                style: {
+                    fontSize: 40
                 }
             ]
+            }
         }
     ]
 };
