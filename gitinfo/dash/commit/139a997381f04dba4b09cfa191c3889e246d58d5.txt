commit 139a997381f04dba4b09cfa191c3889e246d58d5
Author: Per Nilsson <per.nilsson@formidablelabs.com>
Date:   Sat Jul 16 09:09:29 2016 -0700

    Compute dependency graph on layout load

diff --git a/renderer/src/actions/index.js b/renderer/src/actions/index.js
index 2e497e6a..25949e65 100644
--- a/renderer/src/actions/index.js
+++ b/renderer/src/actions/index.js
@@ -9,7 +9,8 @@ export const ACTIONS = (action) => {
         ON_PROP_CHANGE: 'ON_PROP_CHANGE',
         SET_REQUEST_QUEUE: 'SET_REQUEST_QUEUE',
         SET_LAYOUT: 'SET_LAYOUT',
-        COMPUTE_GRAPH: 'COMPUTE_GRAPH'
+        COMPUTE_GRAPH: 'COMPUTE_GRAPH',
+        COMPUTE_PATHS: 'COMPUTE_PATHS'
     };
     if (actionList[action]) return actionList[action];
     else throw new Error(`${action} is not defined.`)
@@ -19,6 +20,7 @@ export const updateProps = createAction(ACTIONS('ON_PROP_CHANGE'));
 export const setRequestQueue = createAction(ACTIONS('SET_REQUEST_QUEUE'));
 const setLayout = createAction(ACTIONS('SET_LAYOUT'));
 const computeGraph = createAction(ACTIONS('COMPUTE_GRAPH'));
+const computePaths = createAction(ACTIONS('COMPUTE_PATHS'));
 
 export const initialize = function() {
     return function (dispatch) {
@@ -33,6 +35,7 @@ export const initialize = function() {
             const immutableLayout = Immutable.fromJS(layout);
             dispatch(setLayout(immutableLayout));
             dispatch(computeGraph(layout)); // TODO - immutable everywhere?
+            dispatch(computePaths(layout))
         });
     }
 }
diff --git a/renderer/src/reducers/paths.js b/renderer/src/reducers/paths.js
index 5f9cd4e5..e0ba5ff7 100644
--- a/renderer/src/reducers/paths.js
+++ b/renderer/src/reducers/paths.js
@@ -1,19 +1,25 @@
-import spec from '../spec'; // TODO: this'll eventually load from the API
 import {crawlLayout, createTreePath} from './utils'
 
 const initialPaths = {};
 
-// TODO: Don't initialize path map as side-effect of importing reducer.
-crawlLayout(spec, (child, itempath) => {
-    if(child.props && child.props.id) {
-        initialPaths[child.props.id] = createTreePath(itempath);
-    }
-});
-
 const paths = (state = initialPaths, action) => {
     switch (action.type) {
-        default:
+        case 'COMPUTE_PATHS': {
+            const layout = action.payload;
+            const newState = Object.assign({}, state);
+
+            crawlLayout(layout, (child, itempath) => {
+                if(child.props && child.props.id) {
+                    newState[child.props.id] = createTreePath(itempath);
+                }
+            });
+
+            return newState;
+        }
+
+        default: {
             return state;
+        }
     }
 }
 
diff --git a/renderer/src/spec.js b/renderer/src/spec.js
deleted file mode 100644
index d7a48655..00000000
--- a/renderer/src/spec.js
+++ /dev/null
@@ -1,105 +0,0 @@
-export default {
-    props: {
-        id: 'test',
-        style: {},
-        className: 'parent'
-    },
-    type: 'div',
-    children: [
-        {
-
-            type: 'p',
-            props: {
-                id: 'child',
-                style: {fontSize: 20}
-            },
-            children: 'basic <p> component'
-        },
-
-        // dependency tree
-        {
-            type: 'div',
-            props: {style: {fontSize: 14}},
-            children: [
-                {type: 'div', children: 'B, C, D depend on A.'},
-                {type: 'div', children: 'E depends on B and C.'},
-                {type: 'div', children: 'F depends on A and D.'}
-            ]
-        },
-        {
-            type: 'InputControl',
-            props: {
-                id: 'A',
-                placeholder: 'A'
-            },
-            dependencies: []
-        },
-        {
-            type: 'InputControl',
-            props: {
-                id: 'B',
-                placeholder: 'B'
-            },
-            dependencies: ['A']
-        },
-        {
-            type: 'InputControl',
-            props: {
-                id: 'C',
-                placeholder: 'C'
-            },
-            dependencies: ['A']
-        },
-        {
-            type: 'InputControl',
-            props: {
-                id: 'D',
-                placeholder: 'D'
-            },
-            dependencies: ['A']
-        },
-        {
-            type: 'InputControl',
-            props: {
-                id: 'E',
-                placeholder: 'E'
-            },
-            dependencies: ['B', 'C']
-        },
-        {
-            type: 'InputControl',
-            props: {
-                id: 'F',
-                placeholder: 'F'
-            },
-            dependencies: ['A', 'D']
-        },
-
-
-        {
-            type: 'EditableDiv',
-            props: {
-                id: 'editable-div-1',
-                editable: true,
-                text: 'basic editable div',
-                style: {
-                    fontSize: 25
-                }
-            }
-        },
-
-        {
-            type: 'EditableDiv',
-            props: {
-                id: 'editable-div-2',
-                editable: true,
-                text: 'another editable div',
-                style: {
-                    fontSize: 25
-                }
-            }
-        }
-
-
-    ]
-};
