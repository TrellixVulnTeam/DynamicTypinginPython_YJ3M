commit 3c1d837807ab9ee23621f1093ccb807a13ecc80f
Author: alexcjohnson <alex@plot.ly>
Date:   Mon Jul 8 18:30:49 2019 -0400

    convert deprecated ramda.merge to mergeRight (or similar)

diff --git a/dash-renderer/src/AccessDenied.react.js b/dash-renderer/src/AccessDenied.react.js
index 170f9db5..6dd7ab28 100644
--- a/dash-renderer/src/AccessDenied.react.js
+++ b/dash-renderer/src/AccessDenied.react.js
@@ -1,6 +1,6 @@
 /* global window:true, document:true */
 import React from 'react';
-import {merge} from 'ramda';
+import {mergeRight} from 'ramda';
 import PropTypes from 'prop-types';
 import * as styles from './styles/styles.js';
 import * as constants from './constants/constants.js';
@@ -10,7 +10,7 @@ function AccessDenied(props) {
     const fid = config.fid;
     const owner_username = fid.split(':')[0];
     return (
-        <div style={merge(styles.base.html, styles.base.container)}>
+        <div style={mergeRight(styles.base.html, styles.base.container)}>
             <div style={styles.base.h2}>Access Denied</div>
 
             <div style={styles.base.h4}>
diff --git a/dash-renderer/src/TreeContainer.js b/dash-renderer/src/TreeContainer.js
index 7f6e44aa..e16a2e0d 100644
--- a/dash-renderer/src/TreeContainer.js
+++ b/dash-renderer/src/TreeContainer.js
@@ -15,7 +15,7 @@ import {
     isNil,
     keysIn,
     map,
-    mergeAll,
+    mergeRight,
     omit,
     pick,
     propOr,
@@ -76,7 +76,7 @@ function CheckedComponent(p) {
 
     return React.createElement(
         element,
-        mergeAll([props, extraProps]),
+        mergeRight(props, extraProps),
         ...(Array.isArray(children) ? children : [children])
     );
 }
@@ -140,7 +140,7 @@ class TreeContainer extends Component {
             >
                 {React.createElement(
                     element,
-                    mergeAll([props, { loading_state, setProps }]),
+                    mergeRight(props, { loading_state, setProps }),
                     ...(Array.isArray(children) ? children : [children])
                 )}
             </ComponentErrorBoundary>
diff --git a/dash-renderer/src/actions/api.js b/dash-renderer/src/actions/api.js
index 93b5be09..8a0c8166 100644
--- a/dash-renderer/src/actions/api.js
+++ b/dash-renderer/src/actions/api.js
@@ -1,6 +1,6 @@
 /* global fetch: true, document: true */
 import cookie from 'cookie';
-import {merge} from 'ramda';
+import {mergeRight} from 'ramda';
 import {onError} from '../actions';
 import {urlBase} from '../utils';
 
@@ -20,7 +20,7 @@ function POST(path, body = {}, headers = {}) {
     return fetch(path, {
         method: 'POST',
         credentials: 'same-origin',
-        headers: merge(
+        headers: mergeRight(
             {
                 Accept: 'application/json',
                 'Content-Type': 'application/json',
diff --git a/dash-renderer/src/actions/index.js b/dash-renderer/src/actions/index.js
index c01a81cb..9f2f45d4 100644
--- a/dash-renderer/src/actions/index.js
+++ b/dash-renderer/src/actions/index.js
@@ -1,6 +1,5 @@
 /* global fetch:true, Promise:true, document:true */
 import {
-    __,
     adjust,
     any,
     append,
@@ -15,14 +14,13 @@ import {
     isEmpty,
     keys,
     lensPath,
-    merge,
+    mergeLeft,
     pluck,
     propEq,
     reject,
     slice,
     sort,
     type,
-    //    values,
     view,
 } from 'ramda';
 import {createAction} from 'redux-actions';
@@ -414,7 +412,7 @@ function updateOutput(
         }
         const updatedQueue = adjust(
             thisRequestIndex,
-            merge(__, {
+            mergeLeft({
                 status: status,
                 responseTime: Date.now(),
                 rejected,
diff --git a/dash-renderer/src/components/core/Toolbar.react.js b/dash-renderer/src/components/core/Toolbar.react.js
index f58a12c3..38d947ae 100644
--- a/dash-renderer/src/components/core/Toolbar.react.js
+++ b/dash-renderer/src/components/core/Toolbar.react.js
@@ -1,7 +1,7 @@
 import {connect} from 'react-redux';
 import React from 'react';
 import PropTypes from 'prop-types';
-import {merge} from 'ramda';
+import {mergeRight} from 'ramda';
 import {redo, undo} from '../../actions/index.js';
 import Radium from 'radium';
 
@@ -26,7 +26,7 @@ function UnconnectedToolbar(props) {
     const undoLink = (
         <span
             key="undoLink"
-            style={merge(
+            style={mergeRight(
                 {
                     color: history.past.length ? '#0074D9' : 'grey',
                     cursor: history.past.length ? 'pointer' : 'default',
@@ -35,7 +35,12 @@ function UnconnectedToolbar(props) {
             )}
             onClick={() => dispatch(undo())}
         >
-            <div style={merge({transform: 'rotate(270deg)'}, styles.iconStyle)}>
+            <div
+                style={mergeRight(
+                    {transform: 'rotate(270deg)'},
+                    styles.iconStyle
+                )}
+            >
                 ↺
             </div>
             <div style={styles.labelStyle}>undo</div>
@@ -45,7 +50,7 @@ function UnconnectedToolbar(props) {
     const redoLink = (
         <span
             key="redoLink"
-            style={merge(
+            style={mergeRight(
                 {
                     color: history.future.length ? '#0074D9' : 'grey',
                     cursor: history.future.length ? 'pointer' : 'default',
@@ -55,7 +60,12 @@ function UnconnectedToolbar(props) {
             )}
             onClick={() => dispatch(redo())}
         >
-            <div style={merge({transform: 'rotate(90deg)'}, styles.iconStyle)}>
+            <div
+                style={mergeRight(
+                    {transform: 'rotate(90deg)'},
+                    styles.iconStyle
+                )}
+            >
                 ↻
             </div>
             <div style={styles.labelStyle}>redo</div>
diff --git a/dash-renderer/src/reducers/api.js b/dash-renderer/src/reducers/api.js
index 64ec8a31..1b759d6c 100644
--- a/dash-renderer/src/reducers/api.js
+++ b/dash-renderer/src/reducers/api.js
@@ -1,4 +1,4 @@
-import {assoc, assocPath, merge} from 'ramda';
+import {assoc, assocPath, mergeRight} from 'ramda';
 
 function createApiReducer(store) {
     return function ApiReducer(state = {}, action) {
@@ -24,7 +24,7 @@ function createApiReducer(store) {
                     state
                 );
             } else {
-                newState = merge(state, {
+                newState = mergeRight(state, {
                     status: payload.status,
                     content: payload.content,
                 });
diff --git a/dash-renderer/src/reducers/error.js b/dash-renderer/src/reducers/error.js
index 6279875e..9e62b59e 100644
--- a/dash-renderer/src/reducers/error.js
+++ b/dash-renderer/src/reducers/error.js
@@ -1,4 +1,4 @@
-import {findIndex, merge, propEq, remove} from 'ramda';
+import {findIndex, mergeRight, propEq, remove} from 'ramda';
 
 const initialError = {
     frontEnd: [],
@@ -11,7 +11,7 @@ function error(state = initialError, action) {
             if (action.payload.type === 'frontEnd') {
                 return {
                     frontEnd: [
-                        merge(action.payload, {timestamp: new Date()}),
+                        mergeRight(action.payload, {timestamp: new Date()}),
                         ...state.frontEnd,
                     ],
                     backEnd: state.backEnd,
@@ -20,7 +20,7 @@ function error(state = initialError, action) {
                 return {
                     frontEnd: state.frontEnd,
                     backEnd: [
-                        merge(action.payload, {timestamp: new Date()}),
+                        mergeRight(action.payload, {timestamp: new Date()}),
                         ...state.backEnd,
                     ],
                 };
diff --git a/dash-renderer/src/reducers/layout.js b/dash-renderer/src/reducers/layout.js
index cce98739..53b0d835 100644
--- a/dash-renderer/src/reducers/layout.js
+++ b/dash-renderer/src/reducers/layout.js
@@ -1,4 +1,4 @@
-import {append, assocPath, contains, lensPath, merge, view} from 'ramda';
+import {append, assocPath, contains, lensPath, mergeRight, view} from 'ramda';
 
 import {getAction} from '../actions/constants';
 
@@ -14,7 +14,7 @@ const layout = (state = {}, action) => {
     ) {
         const propPath = append('props', action.payload.itempath);
         const existingProps = view(lensPath(propPath), state);
-        const mergedProps = merge(existingProps, action.payload.props);
+        const mergedProps = mergeRight(existingProps, action.payload.props);
         return assocPath(propPath, mergedProps, state);
     }
 
diff --git a/dash-renderer/src/reducers/paths.js b/dash-renderer/src/reducers/paths.js
index 7c0ef8a0..cf11c993 100644
--- a/dash-renderer/src/reducers/paths.js
+++ b/dash-renderer/src/reducers/paths.js
@@ -6,7 +6,7 @@ import {
     isEmpty,
     isNil,
     keys,
-    merge,
+    mergeRight,
     omit,
     slice,
 } from 'ramda';
@@ -36,7 +36,7 @@ const paths = (state = initialPaths, action) => {
                 );
                 newState = omit(removeKeys, oldState);
             } else {
-                newState = merge({}, oldState);
+                newState = mergeRight({}, oldState);
             }
 
             crawlLayout(subTree, function assignPath(child, itempath) {
