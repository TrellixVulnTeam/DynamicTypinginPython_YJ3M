commit 1a4a35d1df992498bdb90ba2b7a3e42ee6d47fd7
Author: chriddyp <chris@plot.ly>
Date:   Wed Jan 25 18:38:05 2017 -0500

    cp renderer from dash2 into this repo

diff --git a/.babelrc b/.babelrc
new file mode 100644
index 00000000..6430a779
--- /dev/null
+++ b/.babelrc
@@ -0,0 +1,13 @@
+{
+    "presets": ["es2015", "react"],
+    "env": {
+        "development": {
+            "presets": ["es2015", "react"],
+            "plugins": [
+                ["transform-es2015-modules-commonjs-simple", {
+                    "noMangle": true
+                }]
+            ]
+        }
+    }
+}
diff --git a/.eslintrc.json b/.eslintrc.json
new file mode 100644
index 00000000..4bfbccb4
--- /dev/null
+++ b/.eslintrc.json
@@ -0,0 +1,3 @@
+{
+    "extends": "./eslint/eslintrc-node.json"
+}
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 00000000..1634faa2
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,14 @@
+build/
+dist/
+lib/
+node_modules/
+.npm
+vv/
+venv/
+*.pyc
+*.egg-info
+*.log
+.DS_Store
+dist
+*egg-info*
+npm-debug*
diff --git a/config/.eslintrc.json b/config/.eslintrc.json
new file mode 100644
index 00000000..57305a48
--- /dev/null
+++ b/config/.eslintrc.json
@@ -0,0 +1,3 @@
+{
+    "extends": "../../config/eslint/eslintrc-node.json"
+}
diff --git a/config/webpack.config.dev.js b/config/webpack.config.dev.js
new file mode 100644
index 00000000..acf718b3
--- /dev/null
+++ b/config/webpack.config.dev.js
@@ -0,0 +1,18 @@
+'use strict';
+
+var compose = require('ramda').compose;
+
+var babel = require('../../config/partials/babel');
+var defineEnv = require('../../config/partials/defineEnv');
+var entryDev = require('../../config/partials/entryDev')
+var outputDev = require('../../config/partials/outputDev');
+var sourceMapDev = require('../../config/partials/sourceMapDev');
+var baseConfig = require('./webpack.config');
+
+module.exports = compose(
+    babel,
+    defineEnv,
+    entryDev,
+    outputDev,
+    sourceMapDev
+)(baseConfig);
diff --git a/config/webpack.config.hot.js b/config/webpack.config.hot.js
new file mode 100644
index 00000000..e59ee1ef
--- /dev/null
+++ b/config/webpack.config.hot.js
@@ -0,0 +1,18 @@
+'use strict';
+
+var compose = require('ramda').compose;
+
+var babelHot = require('../../config/partials/babelHot');
+var defineEnv = require('../../config/partials/defineEnv');
+var entryHot = require('../../config/partials/entryHot');
+var outputDev = require('../../config/partials/outputDev');
+var sourceMapDev = require('../../config/partials/sourceMapDev');
+var baseConfig = require('./webpack.config');
+
+module.exports = compose(
+    babelHot,
+    defineEnv,
+    entryHot,
+    outputDev,
+    sourceMapDev
+)(baseConfig);
diff --git a/config/webpack.config.js b/config/webpack.config.js
new file mode 100644
index 00000000..cbd1072c
--- /dev/null
+++ b/config/webpack.config.js
@@ -0,0 +1,25 @@
+'use strict';
+
+var path = require('path');
+
+var ROOT = process.cwd();
+var SRC = path.join(ROOT, 'src');
+
+module.exports = {
+    cache: false,
+    // Resolution path for `entry`.
+    context: SRC,
+    resolve: {
+        // Need `''` so referencing modules by `name.js` works.
+        extensions: ['', '.js', '.jsx', '.json'],
+        // Make default module directory explicit
+        modulesDirectories: ['node_modules']
+    },
+    // Support `request` node library
+    node: {
+        console: true,
+        fs: 'empty',
+        net: 'empty',
+        tls: 'empty'
+    }
+};
diff --git a/config/webpack.config.prod.js b/config/webpack.config.prod.js
new file mode 100644
index 00000000..ab61e000
--- /dev/null
+++ b/config/webpack.config.prod.js
@@ -0,0 +1,21 @@
+'use strict';
+
+var compose = require('ramda').compose;
+
+var babel = require('../../config/partials/babel');
+var cleanBuild = require('../../config/partials/cleanBuild')
+var defineEnv = require('../../config/partials/defineEnv');
+var entryProd = require('../../config/partials/entryProd');
+var optimizeProd = require('../../config/partials/optimizeProd');
+var outputProd = require('../../config/partials/outputProd');
+var baseConfig = require('./webpack.config');
+
+// TODO: support locally served source maps in production (#11)
+module.exports = compose(
+    babel,
+    cleanBuild,
+    defineEnv,
+    entryProd,
+    outputProd,
+    optimizeProd
+)(baseConfig);
diff --git a/eslint/eslintrc-node.json b/eslint/eslintrc-node.json
new file mode 100644
index 00000000..7df4d7f5
--- /dev/null
+++ b/eslint/eslintrc-node.json
@@ -0,0 +1,13 @@
+{
+    "env": {
+        "node": true
+    },
+    "extends": "eslint:recommended",
+    "plugins": [
+        "import"
+    ],
+    "rules": {
+        "import/no-commonjs": 0,
+        "import/no-nodejs-modules": 0
+    }
+}
diff --git a/index.html b/index.html
new file mode 100644
index 00000000..5da1975e
--- /dev/null
+++ b/index.html
@@ -0,0 +1,15 @@
+<!DOCTYPE html>
+<html>
+    <head>
+        <meta charset="UTF-8" />
+    </head>
+    <body>
+        <div id="react-entry-point"></div>
+    </body>
+
+    <script type="text/javascript">
+
+    </script>
+
+    <script type="text/javascript" src="build/bundle.js"></script>
+</html>
diff --git a/package.json b/package.json
new file mode 100644
index 00000000..3fc89e23
--- /dev/null
+++ b/package.json
@@ -0,0 +1,38 @@
+{
+  "name": "dash-renderer",
+  "version": "0.0.1",
+  "description": "render dash components in react",
+  "main": "src/index.js",
+  "scripts": {
+    "build-dev": "../node_modules/.bin/webpack --config=config/webpack.config.dev.js",
+    "build-prod": "NODE_ENV=production ../node_modules/.bin/webpack --config=config/webpack.config.prod.js",
+    "dev": "../node_modules/.bin/webpack-dev-server --config=config/webpack.config.dev.js",
+    "hot": "../node_modules/.bin/webpack-dev-server --hot --config=config/webpack.config.hot.js",
+    "lint": "../node_modules/.bin/eslint --quiet --fix --ignore-path ../.gitignore .",
+    "server": "serv -p 8080 .",
+    "start": "npm run hot",
+    "test": "npm run lint"
+  },
+  "author": "chriddyp",
+  "license": "MIT",
+  "dependencies": {
+    "dependency-graph": "^0.4.1",
+    "immutable": "^3.8.1",
+    "json-loader": "^0.5.4",
+    "ramda": "^0.21.0",
+    "react": "^15.0.1",
+    "react-dnd": "^2.1.4",
+    "react-dnd-html5-backend": "^2.1.2",
+    "react-dom": "^15.0.1",
+    "react-redux": "^4.4.5",
+    "redux": "^3.4.0",
+    "redux-actions": "^0.9.1",
+    "redux-thunk": "^2.0.1",
+    "request": "^2.72.0",
+    "webpack": "^1.13.1",
+    "webpack-partial": "^1.2.0"
+  },
+  "devDependencies": {
+    "serv": "^0.2.4"
+  }
+}
diff --git a/partials/babel.js b/partials/babel.js
new file mode 100644
index 00000000..8ad71ade
--- /dev/null
+++ b/partials/babel.js
@@ -0,0 +1,27 @@
+'use strict';
+
+var path = require('path');
+var partial = require('webpack-partial').default;
+
+var ROOT = process.cwd();
+var SRC = path.join(ROOT, 'src');
+
+module.exports = function (config) {
+    return partial(config, {
+        module: {
+            noParse: /node_modules\/json-schema\/lib\/validate\.js/, // used to get `request` to work: https://github.com/request/request/issues/1920#issuecomment-171246043
+            loaders: [
+                { test: /\.json$/, loader: 'json-loader' },
+                {
+                    test: /\.js/,
+                    include: [SRC],
+                    /*
+                     * Use require.resolve to get a deterministic path
+                     * and avoid webpack's magick loader resolution
+                     */
+                    loader: require.resolve('babel-loader')
+                }
+            ]
+        }
+    });
+};
diff --git a/partials/babelHot.js b/partials/babelHot.js
new file mode 100644
index 00000000..e1f3027c
--- /dev/null
+++ b/partials/babelHot.js
@@ -0,0 +1,30 @@
+'use strict';
+
+var path = require('path');
+var partial = require('webpack-partial').default;
+
+var ROOT = process.cwd();
+var SRC = path.join(ROOT, 'src');
+
+module.exports = function (config) {
+    return partial(config, {
+        module: {
+            noParse: /node_modules\/json-schema\/lib\/validate\.js/, // used to get `request` to work: https://github.com/request/request/issues/1920#issuecomment-171246043
+            loaders: [
+                { test: /\.json$/, loader: 'json-loader' },
+                {
+                    test: /\.js/,
+                    include: [SRC],
+                    /*
+                     * Use require.resolve to get a deterministic path
+                     * and avoid webpack's magick loader resolution
+                     */
+                    loaders: [
+                        require.resolve('react-hot-loader'),
+                        require.resolve('babel-loader')
+                    ]
+                }
+            ]
+        }
+    });
+};
diff --git a/partials/cleanBuild.js b/partials/cleanBuild.js
new file mode 100644
index 00000000..c21c4f35
--- /dev/null
+++ b/partials/cleanBuild.js
@@ -0,0 +1,18 @@
+'use strict';
+
+var partial = require('webpack-partial').default;
+var CleanWebpackPlugin = require('clean-webpack-plugin');
+
+var ROOT = process.cwd();
+
+module.exports = function(config) {
+    return partial(config, {
+        plugins: [
+            new CleanWebpackPlugin(['build'], {
+                root: ROOT,
+                verbose: true,
+                dry: false
+            })
+        ]
+    });
+};
diff --git a/partials/defineEnv.js b/partials/defineEnv.js
new file mode 100644
index 00000000..89fe2643
--- /dev/null
+++ b/partials/defineEnv.js
@@ -0,0 +1,23 @@
+'use strict';
+
+var partial = require('webpack-partial').default;
+var DefinePlugin = require('webpack').DefinePlugin;
+
+var NODE_ENV = process.env.NODE_ENV || 'development';
+var environment = JSON.stringify(NODE_ENV);
+
+/* eslint-disable no-console */
+console.log('Current environment: ' + environment);
+/* eslint-enable no-console */
+
+module.exports = function (config) {
+    return partial(config, {
+        plugins: [
+            new DefinePlugin({
+                'process.env': {
+                    NODE_ENV: environment
+                }
+            })
+        ]
+    });
+};
diff --git a/partials/entryDev.js b/partials/entryDev.js
new file mode 100644
index 00000000..459e7bfc
--- /dev/null
+++ b/partials/entryDev.js
@@ -0,0 +1,11 @@
+'use strict';
+
+var partial = require('webpack-partial').default;
+
+module.exports = function (config) {
+    return partial(config, {
+        entry: {
+            bundle: './index.js'
+        }
+    });
+};
diff --git a/partials/entryHot.js b/partials/entryHot.js
new file mode 100644
index 00000000..a405568d
--- /dev/null
+++ b/partials/entryHot.js
@@ -0,0 +1,16 @@
+'use strict';
+
+var partial = require('webpack-partial').default;
+
+module.exports = function (config) {
+    return partial(config, {
+        entry: {
+            bundle: [
+                'webpack-dev-server/client?http://localhost:8080',
+                'webpack/hot/only-dev-server',
+                './index.js'
+
+            ]
+        }
+    });
+};
diff --git a/partials/entryProd.js b/partials/entryProd.js
new file mode 100644
index 00000000..459e7bfc
--- /dev/null
+++ b/partials/entryProd.js
@@ -0,0 +1,11 @@
+'use strict';
+
+var partial = require('webpack-partial').default;
+
+module.exports = function (config) {
+    return partial(config, {
+        entry: {
+            bundle: './index.js'
+        }
+    });
+};
diff --git a/partials/optimizeProd.js b/partials/optimizeProd.js
new file mode 100644
index 00000000..861135b6
--- /dev/null
+++ b/partials/optimizeProd.js
@@ -0,0 +1,20 @@
+'use strict';
+
+var partial = require('webpack-partial').default;
+var UglifyJsPlugin = require('webpack').optimize.UglifyJsPlugin;
+var DedupePlugin = require('webpack').optimize.DedupePlugin;
+var OccurrenceOrderPlugin = require('webpack').optimize.OccurrenceOrderPlugin;
+
+module.exports = function (config) {
+    return partial(config, {
+        plugins: [
+            new DedupePlugin(),
+            new OccurrenceOrderPlugin(true),
+            new UglifyJsPlugin({
+                compress: {
+                    warnings: false
+                }
+            })
+        ]
+    });
+};
diff --git a/partials/outputDev.js b/partials/outputDev.js
new file mode 100644
index 00000000..e439f587
--- /dev/null
+++ b/partials/outputDev.js
@@ -0,0 +1,17 @@
+'use strict';
+
+var path = require('path');
+var partial = require('webpack-partial').default;
+
+var ROOT = process.cwd();
+var BUILD = path.join(ROOT, 'build');
+
+module.exports = function (config) {
+    return partial(config, {
+        output: {
+            path: BUILD,
+            publicPath: '/build/',
+            filename: '[name].js'
+        }
+    });
+};
diff --git a/partials/outputProd.js b/partials/outputProd.js
new file mode 100644
index 00000000..4271c88b
--- /dev/null
+++ b/partials/outputProd.js
@@ -0,0 +1,18 @@
+'use strict';
+
+var path = require('path');
+var partial = require('webpack-partial').default;
+
+var ROOT = process.cwd();
+var BUILD = path.join(ROOT, 'build');
+
+module.exports = function (config) {
+    return partial(config, {
+        output: {
+            path: BUILD,
+            publicPath: '/build/',
+            // TODO: Bundle filename should be hashed (#10)
+            filename: '[name].js'
+        }
+    });
+};
diff --git a/partials/sourceMapDev.js b/partials/sourceMapDev.js
new file mode 100644
index 00000000..edc3dfda
--- /dev/null
+++ b/partials/sourceMapDev.js
@@ -0,0 +1,16 @@
+'use strict';
+
+var partial = require('webpack-partial').default;
+var SourceMapDevToolPlugin = require('webpack').SourceMapDevToolPlugin;
+
+module.exports = function (config) {
+    return partial(config, {
+        plugins: [
+            new SourceMapDevToolPlugin({
+                append: '\n//# sourceMappingURL=http://127.0.0.1:8080/build/[url]',
+                filename: '[file].map',
+                test: /\.(css|js)($|\?)/
+            })
+        ]
+    });
+};
diff --git a/src/AppContainer.react.js b/src/AppContainer.react.js
new file mode 100644
index 00000000..dc7d9610
--- /dev/null
+++ b/src/AppContainer.react.js
@@ -0,0 +1,16 @@
+import React from 'react';
+import {Provider} from 'react-redux'
+
+import initializeStore from './store';
+import TreeContainer from './TreeContainer.react';
+import { initialize } from './actions';
+
+const store = initializeStore();
+// Initialization
+store.dispatch(initialize());
+
+export default () => (
+    <Provider store={store}>
+        <TreeContainer/>
+    </Provider>
+);
diff --git a/src/TreeContainer.react.js b/src/TreeContainer.react.js
new file mode 100644
index 00000000..ac20a012
--- /dev/null
+++ b/src/TreeContainer.react.js
@@ -0,0 +1,27 @@
+import React from 'react';
+import HTML5Backend from 'react-dnd-html5-backend';
+import { DragDropContext } from 'react-dnd';
+import { connect } from 'react-redux'
+
+import renderTree from './renderTree';
+
+const UnconnectedContainer = props => {
+    // TODO: Request status? Loading, error, ...
+    if (props.layout.isEmpty()) {
+        return (<div>loading...</div>);
+    }
+    return renderTree(
+        props.layout.toJS(),
+        props.dependencyGraph
+    );
+}
+
+const Container = connect(
+    state => ({      // map state to props
+        layout: state.layout,
+        dependencyGraph: state.dependencyGraph,
+        paths: state.paths
+    })
+)(UnconnectedContainer);
+
+export default DragDropContext(HTML5Backend)(Container);
diff --git a/src/actions/index.js b/src/actions/index.js
new file mode 100644
index 00000000..25949e65
--- /dev/null
+++ b/src/actions/index.js
@@ -0,0 +1,146 @@
+/* eslint-disable no-console */
+import R from 'ramda';
+import { createAction } from 'redux-actions';
+import request from 'request';
+import Immutable from 'immutable';
+
+export const ACTIONS = (action) => {
+    const actionList = {
+        ON_PROP_CHANGE: 'ON_PROP_CHANGE',
+        SET_REQUEST_QUEUE: 'SET_REQUEST_QUEUE',
+        SET_LAYOUT: 'SET_LAYOUT',
+        COMPUTE_GRAPH: 'COMPUTE_GRAPH',
+        COMPUTE_PATHS: 'COMPUTE_PATHS'
+    };
+    if (actionList[action]) return actionList[action];
+    else throw new Error(`${action} is not defined.`)
+};
+
+export const updateProps = createAction(ACTIONS('ON_PROP_CHANGE'));
+export const setRequestQueue = createAction(ACTIONS('SET_REQUEST_QUEUE'));
+const setLayout = createAction(ACTIONS('SET_LAYOUT'));
+const computeGraph = createAction(ACTIONS('COMPUTE_GRAPH'));
+const computePaths = createAction(ACTIONS('COMPUTE_PATHS'));
+
+export const initialize = function() {
+    return function (dispatch) {
+        console.warn('initializing GET');
+        request({
+            method: 'GET',
+            withCredentials: false, // https://github.com/request/request/issues/986#issuecomment-53377999
+            url: 'http://localhost:8050/initialize'
+        }, function(err, res, body) {
+            // TODO: error handling
+            const layout = JSON.parse(body);
+            const immutableLayout = Immutable.fromJS(layout);
+            dispatch(setLayout(immutableLayout));
+            dispatch(computeGraph(layout)); // TODO - immutable everywhere?
+            dispatch(computePaths(layout))
+        });
+    }
+}
+
+// TODO: make the actual POST
+// TODO: Consider moving side effects to reducers via https://github.com/gregwebs/redux-side-effect
+export const notifyObservers = function(payload) {
+    return function (dispatch, getState) {
+        const {
+            layout,
+            dependencyGraph,
+            paths,
+            requestQueue
+        } = getState();
+
+        // Grab the ids of any components that depend on this component
+        let observerIds = dependencyGraph.dependantsOf(payload.id);
+
+        // order the observer ids
+        const depOrder = dependencyGraph.overallOrder();
+        observerIds = R.sort(
+            (a, b) => depOrder.indexOf(a) - depOrder.indexOf(b),
+            observerIds
+        );
+
+        // record the set of requests in the queue
+        dispatch(setRequestQueue(R.union(observerIds, requestQueue)));
+
+        // update each observer
+        for (let i = 0; i < observerIds.length; i++) {
+            const observerId = observerIds[i];
+            const observerComponent = layout.getIn(paths[observerId]);
+
+            /*
+             * before we make the POST, check that none of its dependencies
+             * are already in the queue. if they are in the queue, then don't update.
+             * when each dependency updates, it'll dispatch its own `notifyObservers`
+             * action which will allow this component to update.
+             */
+            const dependenciesInQueue = R.intersection(
+                // TODO Can just use `requestQueue`?
+                getState().requestQueue,
+                dependencyGraph.dependenciesOf(observerId)
+            );
+            if (dependenciesInQueue.length !== 0) {
+
+                console.warn(`SKIP updating ${observerId}, waiting for ${dependenciesInQueue} to update.`);
+
+            } else {
+
+                /*
+                 * Construct a payload of the props of all of the dependencies
+                 * (controller components of this observer component).
+                 */
+                const controllers = observerComponent.get('dependencies').reduce(
+                    (r, id) => {
+                        r[id] = layout.getIn(paths[id]).toJS();
+                        return r;
+                    }, {}
+                );
+                const body = {
+                    target: layout.getIn(paths[observerId]),
+                    parents: controllers
+                }
+
+                /* eslint-disable no-console */
+
+                // make the /POST
+                // xhr.POST(/update-component) ...
+                console.warn(`POST: ${observerId}`);
+
+                // mimic async POST request behaviour with setTimeout
+                request({
+                    method: 'POST',
+                    body: JSON.stringify(body),
+                    withCredentials: false,
+                    url: 'http://localhost:8050/interceptor'// location.href + 'interceptor'
+                }, function(err, res, body) {
+                    const response = JSON.parse(body).response;
+
+                    // clear this item from the request queue
+                    console.warn(`RESPONSE: ${observerId}`);
+                    dispatch(setRequestQueue(
+                        R.reject(
+                            id => id === observerId,
+                            // in an async loop so grab the state again
+                            getState().requestQueue)
+                        )
+                    );
+
+                    // and update the props of the component
+                    const observerUpdatePayload = {
+                        itempath: paths[observerId],
+                        // new props from the server
+                        props: response.props
+                    };
+                    dispatch(updateProps(observerUpdatePayload));
+
+                    // and now update *this* component's dependencies
+                    observerUpdatePayload.id = observerId;
+                    dispatch(notifyObservers(observerUpdatePayload));
+
+                });
+
+            }
+        }
+    }
+}
diff --git a/src/components/PlotlyGraph.react.js b/src/components/PlotlyGraph.react.js
new file mode 100644
index 00000000..e69de29b
diff --git a/src/components/core/Draggable.react.js b/src/components/core/Draggable.react.js
new file mode 100644
index 00000000..226f2e74
--- /dev/null
+++ b/src/components/core/Draggable.react.js
@@ -0,0 +1,43 @@
+'use strict';
+
+import React, { Component } from 'react';
+import { DragSource } from 'react-dnd';
+
+const style = {
+    border: '1px dashed blue'
+};
+
+const beginDrag = (props) => ({name: props.name});
+
+const endDrag = (props, monitor)  => {
+    if (!monitor.didDrop()) return;
+
+    const thisItem = monitor.getItem();
+    const dropResult = monitor.getDropResult();
+
+    if (dropResult) {
+        console.log( // eslint-disable-line no-console
+            `you dropped ${thisItem.name} into ${dropResult.name}`
+        );
+    }
+}
+
+const collectProps = (connect, monitor) => ({
+    connectDragSource: connect.dragSource(),
+    isDragging: monitor.isDragging()
+});
+
+class Draggable extends Component {
+    render() {
+        console.warn('Draggable: ', this.props); // eslint-disable-line
+        const { isDragging, connectDragSource } = this.props;
+        return connectDragSource(
+            isDragging ?
+                <div style={style}>{this.props.children}</div>
+                :
+                <div>{this.props.children}</div>
+        );
+    }
+}
+
+export default DragSource('Draggable', {beginDrag, endDrag}, collectProps)(Draggable);
diff --git a/src/components/core/Droppable.react.js b/src/components/core/Droppable.react.js
new file mode 100644
index 00000000..21b39e7d
--- /dev/null
+++ b/src/components/core/Droppable.react.js
@@ -0,0 +1,44 @@
+'use strict';
+
+import React, { Component } from 'react';
+import { DropTarget } from 'react-dnd';
+
+/* eslint-disable no-unused-vars */
+const spec = {
+    drop(props, monitor, component) {return {}},
+    hover(props, monitor, component) {return {}},
+    canDrop(props, monitor) {return true;}
+};
+/* eslint-enable no-unused-vars */
+
+function collectProps(connect, monitor) {
+    return {
+        connectDropTarget: connect.dropTarget(),
+        isOver: monitor.isOver(),
+        isOverCurrent: monitor.isOver({ shallow: true }),
+        canDrop: monitor.canDrop(),
+        itemType: monitor.getItemType()
+    };
+}
+
+class Droppable extends Component {
+    render() {
+        console.warn('Droppable: ', this.props); // eslint-disable-line
+        const { canDrop, isOver, connectDropTarget } = this.props;
+        const isActive = canDrop && isOver;
+
+        const style = {
+            borderWidth: '1px',
+            borderStyle: isActive ? 'solid' : (canDrop ? 'dashed' : 'none'),
+            borderColor: 'blue'
+        };
+
+        return connectDropTarget(
+            <div style={style}>
+                {this.props.children}
+            </div>
+        );
+    }
+}
+
+export default DropTarget('Draggable', spec, collectProps)(Droppable);
diff --git a/src/components/core/EditableContent.react.js b/src/components/core/EditableContent.react.js
new file mode 100644
index 00000000..d249f10d
--- /dev/null
+++ b/src/components/core/EditableContent.react.js
@@ -0,0 +1,41 @@
+import React, {PropTypes} from 'react';
+
+import { connect } from 'react-redux'
+import { updateProps } from '../../actions'
+
+/*
+ * EditableContent passes a connected updateProps handler down to its child
+ * as a prop
+ */
+
+/* eslint-disable no-unused-vars */
+const mapStateToProps = (state, ownProps) => {
+    return {}
+}
+/* eslint-enable no-unused-vars */
+
+const mapDispatchToProps = (dispatch, ownProps) => {
+    return {
+        valueChanged: (newProps) => {
+            console.warn('newProps: ', newProps); // eslint-disable-line
+            dispatch(updateProps({
+                props: newProps,
+                itempath: React.Children.only(ownProps.children).props.path
+            }));
+        }
+    }
+}
+
+const EditableContent = ({valueChanged, children}) => {
+    // pass `valueChanged` handler as prop to the child element e.g. an <input>
+    return React.cloneElement(children, {valueChanged});
+};
+
+EditableContent.propTypes = {
+    valueChanged: PropTypes.func.isRequired
+};
+
+export default connect(
+  mapStateToProps,
+  mapDispatchToProps
+)(EditableContent);
diff --git a/src/components/core/NotifyObservers.react.js b/src/components/core/NotifyObservers.react.js
new file mode 100644
index 00000000..044e99ee
--- /dev/null
+++ b/src/components/core/NotifyObservers.react.js
@@ -0,0 +1,46 @@
+import React, {PropTypes} from 'react';
+import { connect } from 'react-redux';
+
+import { notifyObservers, updateProps } from '../../actions';
+
+/*
+ * NotifyObservers passes a connected `valueChanged` handler down to
+ * its child as a prop
+ */
+
+const mapStateToProps = () => ({});
+
+const mapDispatchToProps = (dispatch, ownProps) => {
+    return {
+        valueChanged: (newProps) => {
+            const payload = {
+                // we *need* the ID, should we just pass / merge everything in?
+                id: React.Children.only(ownProps.children).props.id,
+                // TODO pass in the entire prop object or just updates?
+                props: newProps,
+                itempath: React.Children.only(ownProps.children).props.path
+            };
+
+            // Update this component's props
+            dispatch(updateProps(payload));
+
+            // Update this component's observers with the updated props
+            dispatch(notifyObservers(payload));
+
+        }
+    }
+};
+
+const NotifyObservers = ({ valueChanged, children }) => {
+    // pass `valueChanged` handler as prop to the child element e.g. an <input>
+    return React.cloneElement(children, {valueChanged});
+}
+
+NotifyObservers.propTypes = {
+    valueChanged: PropTypes.func.isRequired
+};
+
+export default connect(
+    mapStateToProps,
+    mapDispatchToProps
+)(NotifyObservers);
diff --git a/src/index.js b/src/index.js
new file mode 100644
index 00000000..75d40fb7
--- /dev/null
+++ b/src/index.js
@@ -0,0 +1,13 @@
+/*eslint-env browser */
+
+'use strict';
+
+import React from 'react';
+import ReactDOM from 'react-dom';
+
+import AppContainer from './AppContainer.react';
+
+ReactDOM.render(
+    <AppContainer/>,
+    document.getElementById('react-entry-point')
+);
diff --git a/src/reducers/dependencyGraph.js b/src/reducers/dependencyGraph.js
new file mode 100644
index 00000000..6d0f124c
--- /dev/null
+++ b/src/reducers/dependencyGraph.js
@@ -0,0 +1,39 @@
+import {DepGraph} from 'dependency-graph';
+
+import {crawlLayout} from './utils';
+
+const initialGraph = new DepGraph();
+
+const dependencyGraph = (state = initialGraph, action) => {
+    switch (action.type) {
+        case 'COMPUTE_GRAPH': {
+            const layout = action.payload;
+            const graph = new DepGraph();
+
+            // add ID's to all the components
+            crawlLayout(layout, child => {
+                if (child.props && child.props.id) {
+                    graph.addNode(child.props.id);
+                }
+            });
+
+            // add dependencies to the graph
+            crawlLayout(layout, child => {
+                if (child.dependencies) {
+                    for (let i = 0; i < child.dependencies.length; i++) {
+                        graph.addDependency(
+                            child.props.id,
+                            child.dependencies[i]
+                        );
+                    }
+                }
+            });
+            return graph;
+        }
+
+        default:
+            return state;
+    }
+}
+
+export default dependencyGraph;
diff --git a/src/reducers/layout.js b/src/reducers/layout.js
new file mode 100644
index 00000000..81801a33
--- /dev/null
+++ b/src/reducers/layout.js
@@ -0,0 +1,42 @@
+import R from 'ramda';
+import Immutable from 'immutable';
+
+// TODO: this should be a prop of the high-level component
+import {ACTIONS} from '../actions';
+import {createTreePath} from './utils';
+
+const layout = (state = Immutable.fromJS({}), action) => {
+    switch (action.type) {
+
+        case ACTIONS('SET_LAYOUT'):
+            return action.payload;
+
+        // Update the props of the component
+        case ACTIONS('ON_PROP_CHANGE'): {
+            let propPath = R.append('props', action.payload.itempath);
+            state = state.mergeIn(propPath, action.payload.props);
+            return state;
+        }
+
+        // TODO: this doesn't actually do anything yet
+        case 'REORDER_CHILDREN': {
+            // TODO: wire this in to our drop targets
+            const itemTreePath = createTreePath(action.itempath);  // [3, 1, 4, 5]
+
+            const targetTreePath = R.append(
+                'children',
+                createTreePath(action.targetpath)
+            );
+
+            const item = state.getIn(itemTreePath);
+            state = state.deleteIn(itemTreePath);
+            state = state.setIn(targetTreePath, item);
+            return state;
+        }
+        default:
+            return state;
+
+    }
+}
+
+export default layout;
diff --git a/src/reducers/paths.js b/src/reducers/paths.js
new file mode 100644
index 00000000..e0ba5ff7
--- /dev/null
+++ b/src/reducers/paths.js
@@ -0,0 +1,26 @@
+import {crawlLayout, createTreePath} from './utils'
+
+const initialPaths = {};
+
+const paths = (state = initialPaths, action) => {
+    switch (action.type) {
+        case 'COMPUTE_PATHS': {
+            const layout = action.payload;
+            const newState = Object.assign({}, state);
+
+            crawlLayout(layout, (child, itempath) => {
+                if(child.props && child.props.id) {
+                    newState[child.props.id] = createTreePath(itempath);
+                }
+            });
+
+            return newState;
+        }
+
+        default: {
+            return state;
+        }
+    }
+}
+
+export default paths;
diff --git a/src/reducers/reducer.js b/src/reducers/reducer.js
new file mode 100644
index 00000000..fe58301f
--- /dev/null
+++ b/src/reducers/reducer.js
@@ -0,0 +1,11 @@
+'use strict'
+
+import { combineReducers } from 'redux';
+import layout from './layout';
+import dependencyGraph from './dependencyGraph';
+import paths from './paths';
+import requestQueue from './requestQueue';
+
+const reducer = combineReducers({layout, dependencyGraph, paths, requestQueue});
+
+export default reducer;
diff --git a/src/reducers/requestQueue.js b/src/reducers/requestQueue.js
new file mode 100644
index 00000000..c178a5d9
--- /dev/null
+++ b/src/reducers/requestQueue.js
@@ -0,0 +1,17 @@
+// TODO `state` should be an ImmutableJS data structure
+const requestQueue = (state = [], action) => {
+    switch (action.type) {
+        case 'SET_REQUEST_QUEUE':
+            console.warn(`REQUEST QUEUE ${action.payload}`); // eslint-disable-line
+            if (Array.isArray(action.payload)) {
+                state = Object.assign({}, action.payload);
+            }
+
+            return state;
+
+        default:
+            return state;
+    }
+}
+
+export default requestQueue;
diff --git a/src/reducers/utils.js b/src/reducers/utils.js
new file mode 100644
index 00000000..14948b52
--- /dev/null
+++ b/src/reducers/utils.js
@@ -0,0 +1,19 @@
+import R from 'ramda';
+
+const pad = R.curry((array, paddingValue) => array.reduce((r, v) => {
+    r.push(paddingValue);
+    r.push(v);
+    return r;
+}, []));
+
+// crawl a layout object, apply a function on every object
+export const crawlLayout = (object, func, path=[]) => {
+    func(object, path);
+    if (Array.isArray(object.children)) {
+        object.children.forEach((child, i) => {
+            crawlLayout(child, func, R.append(i, path));
+        });
+    }
+}
+
+export const createTreePath = (array) => pad(array, 'children');
diff --git a/src/registry.js b/src/registry.js
new file mode 100644
index 00000000..b602a80f
--- /dev/null
+++ b/src/registry.js
@@ -0,0 +1,20 @@
+'use strict';
+
+export default {
+    resolve: (componentName, namespace) => {
+        const ns = window[namespace];
+
+        if (ns) {
+            if (ns[componentName]) {
+                return ns[componentName];
+            }
+
+            throw new Error(`Component ${componentName} not found in
+                ${namespace}`);
+        }
+
+        throw new Error(`${namespace} was not found, make sure to
+            \`pip install ${namespace}\` and pass it as string in the
+            \`component_suites\` kwarg to \`dash.run_server\`.`);
+    }
+};
diff --git a/src/renderTree.js b/src/renderTree.js
new file mode 100644
index 00000000..3f5e9e27
--- /dev/null
+++ b/src/renderTree.js
@@ -0,0 +1,97 @@
+'use strict'
+
+import R from 'ramda';
+import React from 'react';
+import Registry from './registry';
+import Draggable from './components/core/Draggable.react';
+import Droppable from './components/core/Droppable.react';
+import EditableContent from './components/core/EditableContent.react';
+import NotifyObservers from './components/core/NotifyObservers.react';
+import {createTreePath} from './reducers/utils';
+
+export default function render(component, dependencyGraph, path=[]) {
+
+    // Create list of child elements
+    let children;
+
+    // No children
+    if (!R.has('children', component) || !component.children) {
+        children = [];
+    }
+    // Text node child
+    else if (typeof component.children === 'string') {
+        children = [component.children];
+    }
+    // One or multiple children
+    else {
+        const renderChild = (child, i) =>
+            render(child, dependencyGraph, R.append(i, path))
+
+        children = (Array.isArray(component.children) ?
+                component.children :
+                [component.children])
+            .map(renderChild);
+    }
+
+    // Create wrapping parent element
+    // TODO Remove all static component references from Registry
+    const element = R.has(component.type, Registry)
+        ? Registry[component.type]
+        : Registry.resolve(component.type, component.namespace);
+
+    const parent = React.createElement(
+        element,
+        Object.assign({}, component.props, {path: createTreePath(path)}),
+        ...children
+    );
+
+    // draggable?
+    if (component.draggable) {
+        return (
+            <Draggable>
+                <div> {/* "Only native element nodes can now be passed to React DnD connectors. You can either wrap Header into a <div>, or turn it into a drag source or a drop target itself." */}
+                    {parent}
+                </div>
+            </Draggable>
+        );
+    }
+
+    // droppable?
+    if (component.droppable) {
+        return (
+            <Droppable>
+                {parent}
+            </Droppable>
+        );
+    }
+
+    // editable?
+    if (component.props && component.props.editable) {
+        return (
+            <EditableContent>
+                {parent}
+            </EditableContent>
+        );
+    }
+
+    // has observers?
+    if (
+        component.props &&
+        component.props.id &&
+        /*
+         * in case it isn't initalized yet -
+         * TODO: we should be able to remove this check
+         * with like a initialization status store or something
+         */
+        dependencyGraph.hasNode(component.props.id) &&
+        dependencyGraph.dependantsOf(component.props.id).length
+    ) {
+        return (
+            <NotifyObservers>
+                {parent}
+            </NotifyObservers>
+        );
+    }
+
+    return parent;
+}
diff --git a/src/store.js b/src/store.js
new file mode 100644
index 00000000..43a59e90
--- /dev/null
+++ b/src/store.js
@@ -0,0 +1,31 @@
+/* global module, require */
+
+import {createStore, applyMiddleware} from 'redux';
+import thunk from 'redux-thunk';
+
+import reducer from './reducers/reducer';
+
+let store;
+const initializeStore = () => {
+    if (store) {
+        return store;
+    }
+
+    store = createStore(
+        reducer,
+        applyMiddleware(thunk)
+    );
+
+    if (module.hot) {
+        // Enable hot module replacement for reducers
+        module.hot.accept('./reducers/reducer', () => {
+            const nextRootReducer = require('./reducers/reducer');
+
+            store.replaceReducer(nextRootReducer);
+        });
+    }
+
+    return store;
+};
+
+export default initializeStore;
