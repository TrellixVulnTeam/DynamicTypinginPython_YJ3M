commit 69371f4b31605148dd4c5d85fc8a1aa41db74b38
Author: byron <byron@plot.ly>
Date:   Sun Jun 9 22:31:29 2019 -0400

    :boom: shorten the api name from start_app_server to start_server

diff --git a/dash/testing/composite.py b/dash/testing/composite.py
index 1e3f781d..485faacf 100644
--- a/dash/testing/composite.py
+++ b/dash/testing/composite.py
@@ -7,7 +7,7 @@ class DashComposite(Browser):
         super(DashComposite, self).__init__(browser, remote, wait_timeout)
         self.server = server
 
-    def start_app_server(self, app, **kwargs):
+    def start_server(self, app, **kwargs):
         '''start the local server with app'''
 
         # start server with app and pass Dash arguments
diff --git a/tests/integration/callbacks/test_basic_callback.py b/tests/integration/callbacks/test_basic_callback.py
index 91c9635e..f12c589b 100644
--- a/tests/integration/callbacks/test_basic_callback.py
+++ b/tests/integration/callbacks/test_basic_callback.py
@@ -23,7 +23,7 @@ def test_cbsc001_simple_callback(dash_duo):
         call_count.value = call_count.value + 1
         return value
 
-    dash_duo.start_app_server(app)
+    dash_duo.start_server(app)
 
     assert dash_duo.find_element("#output-1").text == "initial value"
     dash_duo.percy_snapshot(name="simple-callback-initial")
@@ -75,7 +75,7 @@ def test_cbsc002_callbacks_generating_children(dash_duo):
         call_count.value = call_count.value + 1
         return value
 
-    dash_duo.start_app_server(app)
+    dash_duo.start_server(app)
 
     assert call_count.value == 1, "called once at initial stage"
 
diff --git a/tests/integration/callbacks/test_multiple_callbacks.py b/tests/integration/callbacks/test_multiple_callbacks.py
index 1c04a0f6..7be877dd 100644
--- a/tests/integration/callbacks/test_multiple_callbacks.py
+++ b/tests/integration/callbacks/test_multiple_callbacks.py
@@ -21,7 +21,7 @@ def test_cbmt001_called_multiple_times_and_out_of_order(dash_duo):
             time.sleep(1)
         return n_clicks
 
-    dash_duo.start_app_server(app)
+    dash_duo.start_server(app)
     dash_duo.multiple_click("#input", clicks=3)
 
     time.sleep(3)
diff --git a/tests/integration/dash_assets/test_dash_assets.py b/tests/integration/dash_assets/test_dash_assets.py
index 53857e8c..578d726f 100644
--- a/tests/integration/dash_assets/test_dash_assets.py
+++ b/tests/integration/dash_assets/test_dash_assets.py
@@ -34,7 +34,7 @@ def test_dada001_assets(dash_duo):
         [html.Div("Content", id="content"), dcc.Input(id="test")], id="layout"
     )
 
-    dash_duo.start_app_server(app)
+    dash_duo.start_server(app)
 
     assert (
         dash_duo.find_element("body").value_of_css_property("margin") == "0px"
@@ -116,7 +116,7 @@ def test_dada002_external_files_init(dash_duo):
 
     app.layout = html.Div()
 
-    dash_duo.start_app_server(app)
+    dash_duo.start_server(app)
 
     js_urls = [x["src"] if isinstance(x, dict) else x for x in js_files]
     css_urls = [x["href"] if isinstance(x, dict) else x for x in css_files]
diff --git a/tests/integration/devtools/test_devtools_error_handling.py b/tests/integration/devtools/test_devtools_error_handling.py
index 7dc22d38..398578cc 100644
--- a/tests/integration/devtools/test_devtools_error_handling.py
+++ b/tests/integration/devtools/test_devtools_error_handling.py
@@ -23,7 +23,7 @@ def test_dveh001_python_errors(dash_duo):
         elif n_clicks == 2:
             raise Exception("Special 2 clicks exception")
 
-    dash_duo.start_app_server(
+    dash_duo.start_server(
         app,
         debug=True,
         use_reloader=False,
@@ -70,7 +70,7 @@ def test_dveh002_prevent_update_not_in_error_msg(dash_duo):
 
         return "button clicks: {}".format(n_clicks)
 
-    dash_duo.start_app_server(
+    dash_duo.start_server(
         app,
         debug=True,
         use_reloader=False,
@@ -109,7 +109,7 @@ def test_dveh003_validation_errors_in_place(dash_duo):
         if n_clicks == 1:
             return n_clicks
 
-    dash_duo.start_app_server(
+    dash_duo.start_server(
         app,
         debug=True,
         use_reloader=False,
@@ -143,7 +143,7 @@ def test_dveh004_validation_errors_creation(dash_duo):
                 id="output", animate=0, figure={"data": [{"y": [3, 1, 2]}]}
             )
 
-    dash_duo.start_app_server(
+    dash_duo.start_server(
         app,
         debug=True,
         use_reloader=False,
@@ -186,7 +186,7 @@ def test_dveh005_multiple_outputs(dash_duo):
         else:
             n_clicks / 0
 
-    dash_duo.start_app_server(
+    dash_duo.start_server(
         app,
         debug=True,
         use_reloader=False,
diff --git a/tests/integration/devtools/test_devtools_ui.py b/tests/integration/devtools/test_devtools_ui.py
index d9589b71..d0f95848 100644
--- a/tests/integration/devtools/test_devtools_ui.py
+++ b/tests/integration/devtools/test_devtools_ui.py
@@ -13,7 +13,7 @@ def test_dvui001_disable_props_check_config(dash_duo):
         ]
     )
 
-    dash_duo.start_app_server(
+    dash_duo.start_server(
         app,
         debug=True,
         use_reloader=False,
@@ -45,7 +45,7 @@ def test_dvui002_disable_ui_config(dash_duo):
         ]
     )
 
-    dash_duo.start_app_server(
+    dash_duo.start_server(
         app,
         debug=True,
         use_reloader=False,
diff --git a/tests/integration/devtools/test_hot_reload.py b/tests/integration/devtools/test_hot_reload.py
index c1119e60..5c5845ef 100644
--- a/tests/integration/devtools/test_hot_reload.py
+++ b/tests/integration/devtools/test_hot_reload.py
@@ -8,7 +8,7 @@ def test_dvhr001_hot_reload(dash_duo):
     app = dash.Dash(__name__, assets_folder="hr_assets")
     app.layout = html.Div([html.H3("Hot reload")], id="hot-reload-content")
 
-    dash_duo.start_app_server(
+    dash_duo.start_server(
         app,
         dev_tools_hot_reload=True,
         dev_tools_hot_reload_interval=100,
diff --git a/tests/integration/devtools/test_props_check.py b/tests/integration/devtools/test_props_check.py
index f5b5e175..0f2fe200 100644
--- a/tests/integration/devtools/test_props_check.py
+++ b/tests/integration/devtools/test_props_check.py
@@ -199,7 +199,7 @@ def test_dvpc001_prop_check_errors_with_path(dash_duo):
             children=test_case["component"](**test_case["props"]),
         )
 
-    dash_duo.start_app_server(
+    dash_duo.start_server(
         app,
         debug=True,
         use_reloader=False,
diff --git a/tests/integration/renderer/test_dependencies.py b/tests/integration/renderer/test_dependencies.py
index 15771026..d1160d9c 100644
--- a/tests/integration/renderer/test_dependencies.py
+++ b/tests/integration/renderer/test_dependencies.py
@@ -29,7 +29,7 @@ def test_rddp001_dependencies_on_components_that_dont_exist(dash_duo):
         output_2_call_count.value += 1
         return value
 
-    dash_duo.start_app_server(app)
+    dash_duo.start_server(app)
 
     assert dash_duo.find_element("#output-1").text == "initial value"
     assert output_1_call_count.value == 1 and output_2_call_count.value == 0
diff --git a/tests/integration/renderer/test_due_diligence.py b/tests/integration/renderer/test_due_diligence.py
index 02a7c69d..88ef5fbf 100644
--- a/tests/integration/renderer/test_due_diligence.py
+++ b/tests/integration/renderer/test_due_diligence.py
@@ -53,7 +53,7 @@ def test_rddd001_initial_state(dash_duo):
     ])
     # fmt:on
 
-    dash_duo.start_app_server(app)
+    dash_duo.start_server(app)
 
     # Note: this .html file shows there's no undo/redo button by default
     with open(
diff --git a/tests/integration/renderer/test_state_and_input.py b/tests/integration/renderer/test_state_and_input.py
index e422602a..7ffe1ddb 100644
--- a/tests/integration/renderer/test_state_and_input.py
+++ b/tests/integration/renderer/test_state_and_input.py
@@ -28,7 +28,7 @@ def test_rdsi001_state_and_inputs(dash_duo):
         call_count.value += 1
         return 'input="{}", state="{}"'.format(input, state)
 
-    dash_duo.start_app_server(app)
+    dash_duo.start_server(app)
 
     input_ = lambda: dash_duo.find_element("#input")
     output_ = lambda: dash_duo.find_element("#output")
@@ -79,7 +79,7 @@ def test_rdsi002_event_properties_state_and_inputs(dash_duo):
         call_count.value += 1
         return 'input="{}", state="{}"'.format(input, state)
 
-    dash_duo.start_app_server(app)
+    dash_duo.start_server(app)
 
     btn = lambda: dash_duo.find_element("#button")
     output = lambda: dash_duo.find_element("#output")
