commit 1e28825aec04258c832f17e06c99e68ab6dd8521
Author: Per Nilsson <per.nilsson@formidablelabs.com>
Date:   Mon May 30 08:53:56 2016 -0700

    :book: Rename `updateDependants` to `notifyObservers`

diff --git a/renderer/src/actions/index.js b/renderer/src/actions/index.js
index 71d54208..3cf6e165 100644
--- a/renderer/src/actions/index.js
+++ b/renderer/src/actions/index.js
@@ -14,7 +14,7 @@ export const updateProps = createAction(ACTIONS('ON_PROP_CHANGE'));
 export const setRequestQueue = createAction(ACTIONS('SET_REQUEST_QUEUE'));
 
 // TODO: make the actual POST
-export const updateDependants = function(payload) {
+export const notifyObservers = function(payload) {
     return function (dispatch, getState) {
         const {
             layout,
@@ -24,40 +24,44 @@ export const updateDependants = function(payload) {
         } = getState();
 
         // Grab the ids of any components that depend on this component
-        let dependantIds = dependencyGraph.dependantsOf(payload.id);
+        let observerIds = dependencyGraph.dependantsOf(payload.id);
 
-        // order the dependant ids
+        // order the observer ids
         const depOrder = dependencyGraph.overallOrder();
-        dependantIds = R.sort(
+        observerIds = R.sort(
             (a, b) => depOrder.indexOf(a) - depOrder.indexOf(b),
-            dependantIds
+            observerIds
         );
 
         // record the set of requests in the queue
-        dispatch(setRequestQueue(R.union(dependantIds, requestQueue)));
+        dispatch(setRequestQueue(R.union(observerIds, requestQueue)));
 
-        // update each dependant component
-        for (let i = 0; i < dependantIds.length; i++) {
-            const dependantId = dependantIds[i];
-            const dependantComponent = layout.getIn(paths[dependantId]);
+        // update each observer
+        for (let i = 0; i < observerIds.length; i++) {
+            const observerId = observerIds[i];
+            const observerComponent = layout.getIn(paths[observerId]);
 
             /*
              * before we make the POST, check that none of it's dependencies
              * are already in the queue. if they are in the queue, then don't update.
-             * when each dependency updates, it'll dispatch it's own `updateDependants`
+             * when each dependency updates, it'll dispatch it's own `notifyObservers`
              * action which will allow this component to update.
              */
             if (R.intersection(
+                    // TODO Can just use `requestQueue`.
                     getState().requestQueue,
-                    dependencyGraph.dependenciesOf(dependantId)
+                    dependencyGraph.dependenciesOf(observerId)
                 ).length === 0) {
 
-                // construct a payload of the props of all of the dependencies
-                const payload = dependantComponent.get('dependencies').reduce(
+                /*
+                 * Construct a payload of the props of all of the dependencies
+                 * (controller components of this observer component).
+                 */
+                const payload = observerComponent.get('dependencies').reduce(
                     (r, id) => {
                         r[id] = layout.getIn(R.append('props', paths[id])).toJS();
                         return r;
-                    }, {target: dependantId}
+                    }, {target: observerId}
                 );
 
                 /* eslint-disable no-console */
@@ -69,32 +73,31 @@ export const updateDependants = function(payload) {
                 // mimic async POST request behaviour with setTimeout
                 setTimeout(() => {
                     // clear this item from the request queue
-                    console.warn(`RESPONSE ${dependantId}`);
+                    console.warn(`RESPONSE ${observerId}`);
                     dispatch(setRequestQueue(
                         R.reject(
-                            id => id === dependantId,
+                            id => id === observerId,
                             // in an async loop so grab the state again
                             getState().requestQueue)
                         )
                     );
 
                     // and update the props of the component
-                    const dependantUpdatePayload = {
-                        itempath: paths[dependantId],
+                    const observerUpdatePayload = {
+                        itempath: paths[observerId],
                         // new props from the server, just hard coded here
                         props: {value: 1000*Math.random()}
                     };
-                    dispatch(updateProps(dependantUpdatePayload));
+                    dispatch(updateProps(observerUpdatePayload));
 
                     // and now update *this* component's dependencies
-                    dependantUpdatePayload.id = dependantId;
-                    dispatch(updateDependants(dependantUpdatePayload));
+                    observerUpdatePayload.id = observerId;
+                    dispatch(notifyObservers(observerUpdatePayload));
                 }, 10000*Math.random());
 
                 /* eslint-enable no-console */
 
             }
-
         }
     }
 }
diff --git a/renderer/src/components/InputControl.react.js b/renderer/src/components/InputControl.react.js
index 717dce5e..c3c7de0c 100644
--- a/renderer/src/components/InputControl.react.js
+++ b/renderer/src/components/InputControl.react.js
@@ -1,12 +1,12 @@
 import React from 'react';
 
 /*
- * Example of a control that handles the updateDependants prop
+ * Example of a control that handles the notifyObservers prop
  */
 
 export default props => (
     <input
-        onChange={e => props.updateDependants({value: e.target.value})}
+        onChange={e => props.notifyObservers({value: e.target.value})}
         {...props}
     />
 );
diff --git a/renderer/src/components/core/UpdateDependants.react.js b/renderer/src/components/core/NotifyObservers.react.js
similarity index 55%
rename from renderer/src/components/core/UpdateDependants.react.js
rename to renderer/src/components/core/NotifyObservers.react.js
index 4ced8dca..1f78fb31 100644
--- a/renderer/src/components/core/UpdateDependants.react.js
+++ b/renderer/src/components/core/NotifyObservers.react.js
@@ -1,10 +1,10 @@
 import React, { PropTypes } from 'react';
 import { connect } from 'react-redux';
 
-import { updateDependants, updateProps } from '../../actions';
+import { notifyObservers, updateProps } from '../../actions';
 
 /*
- * UpdateDependants passes a connected updateDependants handler down to
+ * NotifyObservers passes a connected notifyObservers handler down to
  * its child as a prop
  */
 
@@ -12,7 +12,7 @@ const mapStateToProps = () => ({});
 
 const mapDispatchToProps = (dispatch, ownProps) => {
     return {
-        updateDependants: (updatedProps) => {
+        notifyObservers: (updatedProps) => {
             const payload = {
                 updatedProps, // pass in the entire prop object or just updates?
 
@@ -24,23 +24,23 @@ const mapDispatchToProps = (dispatch, ownProps) => {
             // Update this component's props
             dispatch(updateProps(payload));
 
-            // Update this component's dependants depending in these new props
-            dispatch(updateDependants(payload));
+            // Update this component's observers with the updated props
+            dispatch(notifyObservers(payload));
 
         }
     }
 };
 
-const UpdateDependants = ({ updateDependants, children }) => {
-    // pass updateDependants as props to the child element e.g. an <input>
-    return React.cloneElement(children, {updateDependants});
+const NotifyObservers = ({ notifyObservers, children }) => {
+    // pass notifyObservers as props to the child element e.g. an <input>
+    return React.cloneElement(children, {notifyObservers});
 }
 
-UpdateDependants.propTypes = {
-    updateDependants: PropTypes.func.isRequired
+NotifyObservers.propTypes = {
+    notifyObservers: PropTypes.func.isRequired
 };
 
 export default connect(
     mapStateToProps,
     mapDispatchToProps
-)(UpdateDependants);
+)(NotifyObservers);
diff --git a/renderer/src/renderTree.js b/renderer/src/renderTree.js
index 59b5622c..baf7a8c7 100644
--- a/renderer/src/renderTree.js
+++ b/renderer/src/renderTree.js
@@ -6,7 +6,7 @@ import Registry from './registry';
 import Draggable from './components/core/Draggable.react';
 import Droppable from './components/core/Droppable.react';
 import EditableContent from './components/core/EditableContent.react';
-import UpdateDependants from './components/core/UpdateDependants.react';
+import NotifyObservers from './components/core/NotifyObservers.react';
 import {createTreePath} from './reducers/utils';
 
 export default function render(component, dependencyGraph, path=[]) {
@@ -65,16 +65,16 @@ export default function render(component, dependencyGraph, path=[]) {
         );
     }
 
-    // has dependants?
+    // has observers?
     if (
         component.props &&
         component.props.id &&
         dependencyGraph.dependantsOf(component.props.id)
     ) {
         return (
-            <UpdateDependants>
+            <NotifyObservers>
                 {parent}
-            </UpdateDependants>
+            </NotifyObservers>
         );
     }
 
