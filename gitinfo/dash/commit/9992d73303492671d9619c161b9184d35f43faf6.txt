commit 9992d73303492671d9619c161b9184d35f43faf6
Author: Chris Parmer <chris@plot.ly>
Date:   Thu Oct 19 19:16:53 2017 -0400

    WIP Bound request queue (#28)
    
    Bound request queue

diff --git a/CHANGELOG.md b/CHANGELOG.md
index 257b66ae..ebdf41c9 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -2,6 +2,10 @@
 All notable changes to this project will be documented in this file.
 This project adheres to [Semantic Versioning](http://semver.org/).
 
+## [0.11.1] - 2017-10-19
+### Fixed
+- :snail: :racehorse: Fixed a performance issue. In 0.11.0 we introduced an  internal request queue to fix some bugs. This request queue was boundless and in certain cases it could become really large and slow down the app. Now, we remove old requests from this queue when they are no longer needed, keeping its size under control. Originally reported in https://github.com/plotly/dash-renderer/issues/27
+
 ## [0.11.0] - 2017-09-28
 ### Fixed
 - 🐞 Previously, old requests could override new requests if their response was longer than the new one.
diff --git a/dash_renderer/__init__.py b/dash_renderer/__init__.py
index d9005d08..084d6348 100644
--- a/dash_renderer/__init__.py
+++ b/dash_renderer/__init__.py
@@ -7,7 +7,8 @@
 # command in the dash_html_components package which printed out:
 # `dash_html_components.__init__: module references __file__`
 # TODO - Understand this better
-from .version import __version__
+# from .version import __version__
+__version__ = '0.11.1'
 __file__
 
 # Dash renderer's dependencies get loaded in a special order by the server:
diff --git a/dash_renderer/version.py b/dash_renderer/version.py
index f323a57b..ae4865cf 100644
--- a/dash_renderer/version.py
+++ b/dash_renderer/version.py
@@ -1 +1 @@
-__version__ = '0.11.0'
+__version__ = '0.11.1'
diff --git a/package.json b/package.json
index 437f8163..2c46bcd7 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "dash-renderer",
-  "version": "0.11.0",
+  "version": "0.11.1",
   "description": "render dash components in react",
   "main": "src/index.js",
   "scripts": {
diff --git a/src/actions/index.js b/src/actions/index.js
index 510124e5..5f384c81 100644
--- a/src/actions/index.js
+++ b/src/actions/index.js
@@ -397,6 +397,10 @@ export function notifyObservers(payload) {
                 const updateRequestQueue = rejected => {
                     const postRequestQueue = getState().requestQueue
                     const thisRequestIndex = getThisRequestIndex();
+                    if (thisRequestIndex === -1) {
+                        // It was already pruned away
+                        return;
+                    }
                     const updatedQueue = adjust(
                         merge(__, {
                             status: res.status,
@@ -406,8 +410,19 @@ export function notifyObservers(payload) {
                         thisRequestIndex,
                         postRequestQueue
                     );
+                    // We don't need to store any requests before this one
+                    const thisControllerId = postRequestQueue[
+                        thisRequestIndex].controllerId;
+                    const prunedQueue = updatedQueue.filter(
+                        (queueItem, index) => {
+                            return (
+                                queueItem.controllerId !== thisControllerId ||
+                                index >= thisRequestIndex
+                            );
+                        }
+                    );
 
-                    dispatch(setRequestQueue(updatedQueue));
+                    dispatch(setRequestQueue(prunedQueue));
                 }
 
                 const isRejected = () => {
@@ -415,6 +430,12 @@ export function notifyObservers(payload) {
                         propEq('controllerId', newRequestQueue[i].controllerId),
                         getState().requestQueue
                     );
+                    /*
+                     * Note that if the latest request is still `loading`
+                     * or even if the latest request failed,
+                     * we still reject this response in favor of waiting
+                     * for the latest request to finish.
+                     */
                     const rejected = latestRequestIndex > getThisRequestIndex();
                     return rejected;
                 }
diff --git a/tests/test_render.py b/tests/test_render.py
index 9303c36e..fc6fb7d9 100644
--- a/tests/test_render.py
+++ b/tests/test_render.py
@@ -462,7 +462,8 @@ class Tests(IntegrationTests):
         )
 
         self.request_queue_assertions(
-            expected_length=call_count.value, check_rejected=False)
+            expected_length=1,
+            check_rejected=False)
 
         assert_clean_console(self)
 
@@ -1535,5 +1536,4 @@ class Tests(IntegrationTests):
             'return window.store.getState().requestQueue'
         )
         self.assertFalse(request_queue[0]['rejected'])
-        self.assertTrue(request_queue[1]['rejected'])
-        self.assertFalse(request_queue[2]['rejected'])
+        self.assertEqual(len(request_queue), 1)
