commit 99488f7806c57d99c50d01e1e988f652b25ca92e
Author: byron <byron@plot.ly>
Date:   Tue Jun 18 16:49:24 2019 -0400

    :mushroon: add contains_text

diff --git a/dash/testing/browser.py b/dash/testing/browser.py
index 257ef0f9..6d59b50f 100644
--- a/dash/testing/browser.py
+++ b/dash/testing/browser.py
@@ -16,7 +16,7 @@ from selenium.webdriver.common.action_chains import ActionChains
 
 from selenium.common.exceptions import WebDriverException, TimeoutException
 
-from dash.testing.wait import text_to_equal, style_to_equal
+from dash.testing.wait import text_to_equal, style_to_equal, contains_text
 from dash.testing.dash_page import DashPageMixin
 from dash.testing.errors import DashAppLoadingError, BrowserError
 
@@ -168,6 +168,20 @@ class Browser(DashPageMixin):
             ),
         )
 
+    def wait_for_contains_text(self, selector, text, timeout=None):
+        """explicit wait until the element's text contains the expected `text`.
+        timeout if not set, equals to the fixture's `wait_timeout`
+        shortcut to `WebDriverWait` with customized `contains_text` condition
+        """
+        return self._wait_for(
+            method=contains_text,
+            args=(selector, text),
+            timeout=timeout,
+            msg="text -> {} not found inside element within {}s".format(
+                text, timeout if timeout else self._wait_timeout
+            ),
+        )
+
     def wait_for_page(self, url=None, timeout=10):
         """wait_for_page navigates to the url in webdriver
         wait until the renderer is loaded in browser. use the `server_url`
diff --git a/dash/testing/wait.py b/dash/testing/wait.py
index 0fd33ec3..06cef1bd 100644
--- a/dash/testing/wait.py
+++ b/dash/testing/wait.py
@@ -54,6 +54,25 @@ def until_not(
     return res
 
 
+class contains_text(object):
+    def __init__(self, selector, text):
+        self.selector = selector
+        self.text = text
+
+    def __call__(self, driver):
+        try:
+            elem = driver.find_element_by_css_selector(self.selector)
+            logger.debug(
+                "contains text {%s} => expected %s", elem.text, self.text
+            )
+            return self.text in str(elem.text) or self.text in str(
+                elem.get_attribute("value")
+            )
+        except WebDriverException:
+            logger.exception("contains_text encountered an exception")
+            return False
+
+
 class text_to_equal(object):
     def __init__(self, selector, text):
         self.selector = selector
