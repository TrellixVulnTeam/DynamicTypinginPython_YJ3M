commit b1381699da694d2974385e37b95158e658143d94
Author: Philippe Duval <philippe@plot.ly>
Date:   Wed Sep 5 12:28:24 2018 -0400

    Add soft reload capability.

diff --git a/src/components/core/Reloader.react.js b/src/components/core/Reloader.react.js
index c5c48f20..6eda3a5e 100644
--- a/src/components/core/Reloader.react.js
+++ b/src/components/core/Reloader.react.js
@@ -7,27 +7,39 @@ class Reloader extends React.Component {
     constructor(props) {
         super(props);
         if (props.config.hot_reload) {
-            const { hash, interval } = props.config.hot_reload;
+            const { interval } = props.config.hot_reload;
             this.state = {
-                hash: hash,
-                interval
+                hash: null,
+                interval,
+                reloading: false,
+                disabled: false
             }
         } else {
             this.state = {
                 disabled: true
             }
         }
+        this._intervalId = null;
     }
 
     componentDidUpdate() {
-        const { reloadHash } = this.props;
+        const {reloadHash, dispatch} = this.props;
         if (reloadHash.status === 200) {
-            if (reloadHash.content.reloadHash !== this.state.hash) {
-                // TODO add soft & hard reload option
-                // soft -> rebuild the app layout (python reloaded)
-                // hard -> reload the window (css/js reloaded)
+            if (this.state.hash === null) {
+                this.setState({hash: reloadHash.content.reloadHash});
+                return;
+            }
+            if (reloadHash.content.reloadHash !== this.state.hash && !this.state.reloading ) {
                 // eslint-disable-next-line no-undef
-                window.top.location.reload();
+                window.clearInterval(this._intervalId);
+                if (reloadHash.content.hard) {
+                    // Assets file have changed, need to reload them.
+                    // eslint-disable-next-line no-undef
+                    window.top.location.reload();
+                } else if (!this.state.reloading) {
+                    // Py file has changed, just rebuild the reducers.
+                    dispatch({'type': 'RELOAD'});
+                }
             }
         }
     }
@@ -35,13 +47,22 @@ class Reloader extends React.Component {
     componentDidMount() {
         const { dispatch } = this.props;
         const { disabled, interval } = this.state;
-        if (!disabled) {
-            setInterval(() => {
-                dispatch(getReloadHash())
+        if (!disabled && !this._intervalId) {
+            this._intervalId = setInterval(() => {
+                if (!this.state.reloading) {
+                    dispatch(getReloadHash());
+                }
             }, interval);
         }
     }
 
+    componentWillUnmount() {
+        if (!this.state.disabled) {
+            // eslint-disable-next-line no-undef
+            window.clearInterval(this._intervalId);
+        }
+    }
+
     render() {
         return null;
     }
@@ -53,7 +74,8 @@ Reloader.propTypes = {
     id: PropTypes.string,
     config: PropTypes.object,
     reloadHash: PropTypes.object,
-    dispatch: PropTypes.func
+    dispatch: PropTypes.func,
+    interval: PropTypes.number
 };
 
 export default connect(
diff --git a/src/reducers/reducer.js b/src/reducers/reducer.js
index fb19d4cd..5179e5e1 100644
--- a/src/reducers/reducer.js
+++ b/src/reducers/reducer.js
@@ -94,4 +94,14 @@ function recordHistory(reducer) {
     };
 }
 
-export default recordHistory(reducer);
+function rootReducer(reducer) {
+    return function(state, action) {
+        if (action.type === 'RELOAD') {
+            const {history} = state;
+            state = {history};
+        }
+        return reducer(state, action);
+    }
+}
+
+export default rootReducer(recordHistory(reducer));
