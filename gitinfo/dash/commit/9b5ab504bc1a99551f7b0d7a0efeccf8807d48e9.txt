commit 9b5ab504bc1a99551f7b0d7a0efeccf8807d48e9
Author: Philippe Duval <philippe@plot.ly>
Date:   Thu Dec 13 16:16:01 2018 -0500

    Add ignore option to component generation.

diff --git a/dash/development/component_generator.py b/dash/development/component_generator.py
index 8e04e0ea..7c5195e6 100644
--- a/dash/development/component_generator.py
+++ b/dash/development/component_generator.py
@@ -22,14 +22,17 @@ class _CombinedFormatter(argparse.ArgumentDefaultsHelpFormatter,
 
 # pylint: disable=too-many-locals
 def generate_components(components_source, project_shortname,
-                        package_info_filename='package.json'):
+                        package_info_filename='package.json',
+                        ignore='^_'):
     is_windows = sys.platform == 'win32'
 
     extract_path = pkg_resources.resource_filename('dash', 'extract-meta.js')
 
     os.environ['NODE_PATH'] = 'node_modules'
-    cmd = shlex.split('node {} {}'.format(extract_path, components_source),
-                      posix=not is_windows)
+    cmd = shlex.split(
+        'node {} {} {}'.format(extract_path, ignore, components_source),
+        posix=not is_windows
+    )
 
     shutil.copyfile('package.json',
                     os.path.join(project_shortname, package_info_filename))
@@ -83,10 +86,18 @@ def cli():
         default='package.json',
         help='The filename of the copied `package.json` to `project_shortname`'
     )
+    parser.add_argument(
+        '-i', '--ignore',
+        default='^_',
+        help='Files/directories matching the pattern will be ignored'
+    )
 
     args = parser.parse_args()
-    generate_components(args.components_source, args.project_shortname,
-                        package_info_filename=args.package_info_filename)
+    generate_components(
+        args.components_source, args.project_shortname,
+        package_info_filename=args.package_info_filename,
+        ignore=args.ignore
+    )
 
 
 if __name__ == '__main__':
diff --git a/dash/extract-meta.js b/dash/extract-meta.js
index f61b7411..743d5359 100644
--- a/dash/extract-meta.js
+++ b/dash/extract-meta.js
@@ -4,7 +4,13 @@ const fs = require('fs');
 const path = require('path');
 const reactDocs = require('react-docgen');
 
-const componentPaths = process.argv.slice(2);
+const componentPaths = process.argv.slice(3);
+const ignorePattern = new RegExp(process.argv[2]);
+
+const excludedDocProps = [
+    'setProps', 'id', 'className', 'style', 'dashEvents', 'fireEvent'
+];
+
 if (!componentPaths.length) {
     help();
     process.exit(1);
@@ -36,8 +42,7 @@ function writeError(msg, filePath) {
 }
 
 function checkWarn(name, value) {
-    const excluded = ['setProps', 'id', 'className', 'style', 'dashEvents', 'fireEvent'];
-    if (value.length < 1 && !excluded.includes(name)) {
+    if (value.length < 1 && !excludedDocProps.includes(name.split('.').pop())) {
         process.stderr.write(`\nDescription for ${name} is missing!\n`)
     }
 }
@@ -69,6 +74,9 @@ function parseFile(filepath) {
 }
 
 function collectMetadataRecursively(componentPath) {
+    if (ignorePattern.test(componentPath)) {
+        return;
+    }
     if (fs.lstatSync(componentPath).isDirectory()) {
         let dirs;
         try {
@@ -80,11 +88,11 @@ function collectMetadataRecursively(componentPath) {
             const filepath = path.join(componentPath, filename);
             if (fs.lstatSync(filepath).isDirectory()) {
                 collectMetadataRecursively(filepath);
-            } else {
+            } else if (!ignorePattern.test(filename)) {
                 parseFile(filepath);
             }
         });
-    } else {
+    } else if (!ignorePattern.test(componentPath)) {
         parseFile(componentPath);
     }
 }
