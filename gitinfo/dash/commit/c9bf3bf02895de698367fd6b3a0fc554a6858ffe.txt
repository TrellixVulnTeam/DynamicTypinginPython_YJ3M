commit c9bf3bf02895de698367fd6b3a0fc554a6858ffe
Author: alexcjohnson <alex@plot.ly>
Date:   Wed Jul 31 22:25:53 2019 -0400

    DRY API error handling

diff --git a/dash-renderer/src/actions/api.js b/dash-renderer/src/actions/api.js
index 6be33ced..089d917c 100644
--- a/dash-renderer/src/actions/api.js
+++ b/dash-renderer/src/actions/api.js
@@ -1,6 +1,6 @@
 /* global fetch: true */
 import {mergeDeepRight} from 'ramda';
-import {onError, getCSRFHeader} from '../actions';
+import {handleAsyncError, getCSRFHeader} from '../actions';
 import {urlBase} from '../utils';
 
 function GET(path, fetchConfig) {
@@ -63,19 +63,8 @@ export default function apiThunk(endpoint, method, store, id, body) {
                 });
             })
             .catch(err => {
-                const errText =
-                    typeof err.text === 'function'
-                        ? err.text()
-                        : Promise.resolve(err);
-
-                errText.then(text => {
-                    dispatch(
-                        onError({
-                            type: 'backEnd',
-                            errorPage: text,
-                        })
-                    );
-                });
+                const message = 'Error from API call: ' + endpoint;
+                handleAsyncError(err, message, dispatch);
             });
     };
 }
diff --git a/dash-renderer/src/actions/index.js b/dash-renderer/src/actions/index.js
index 42eca31b..abe6e283 100644
--- a/dash-renderer/src/actions/index.js
+++ b/dash-renderer/src/actions/index.js
@@ -905,32 +905,35 @@ function updateOutput(
             });
         })
         .catch(err => {
-            // Handle html error responses
-            const errText =
-                typeof err.text === 'function'
-                    ? err.text()
-                    : Promise.resolve(err);
-
-            errText.then(text => {
-                dispatch(
-                    onError({
-                        type: 'backEnd',
-                        error: {
-                            message: `Callback error updating ${
-                                isMultiOutputProp(payload.output)
-                                    ? parseMultipleOutputs(payload.output).join(
-                                          ', '
-                                      )
-                                    : payload.output
-                            }`,
-                            html: text,
-                        },
-                    })
-                );
-            });
+            const message = `Callback error updating ${
+                isMultiOutputProp(payload.output)
+                    ? parseMultipleOutputs(payload.output).join(', ')
+                    : payload.output
+            }`;
+            handleAsyncError(err, message, dispatch);
         });
 }
 
+export function handleAsyncError(err, message, dispatch) {
+    // Handle html error responses
+    const errText =
+        err && typeof err.text === 'function'
+            ? err.text()
+            : Promise.resolve(err);
+
+    errText.then(text => {
+        dispatch(
+            onError({
+                type: 'backEnd',
+                error: {
+                    message,
+                    html: text,
+                },
+            })
+        );
+    });
+}
+
 export function serialize(state) {
     // Record minimal input state in the url
     const {graphs, paths, layout} = state;
