commit 3d749f10bb2acdde386b72e61a9e7ffcec5866b6
Author: alexcjohnson <alex@plot.ly>
Date:   Thu Jun 6 07:31:03 2019 -0400

    fix some callback deps validation edge cases

diff --git a/dash/dash.py b/dash/dash.py
index 7e203b95..1244fb3c 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -766,33 +766,6 @@ class Dash(object):
         layout = self._cached_layout or self._layout_value()
         is_multi = isinstance(output, (list, tuple))
 
-        for i in inputs:
-            bad = None
-            if is_multi:
-                for o in output:
-                    if o == i:
-                        bad = o
-            else:
-                if output == i:
-                    bad = output
-            if bad:
-                raise exceptions.SameInputOutputException(
-                    'Same output and input: {}'.format(bad)
-                )
-
-        if is_multi:
-            if len(set(output)) != len(output):
-                raise exceptions.DuplicateCallbackOutput(
-                    'Same output was used in a'
-                    ' multi output callback!\n Duplicates:\n {}'.format(
-                        ',\n'.join(
-                            k for k, v in
-                            ((str(x), output.count(x)) for x in output)
-                            if v > 1
-                        )
-                    )
-                )
-
         if (layout is None and not self.config.suppress_callback_exceptions):
             # Without a layout, we can't do validation on the IDs and
             # properties of the elements in the callback.
@@ -804,17 +777,15 @@ class Dash(object):
                 `app.config['suppress_callback_exceptions']=True`
             '''.replace('    ', ''))
 
-        for args, obj, name in [(output if isinstance(output, (list, tuple))
-                                 else [output],
-                                 (Output, list, tuple),
-                                 'Output'),
+        outputs = output if is_multi else [output]
+        for args, obj, name in [(outputs, Output, 'Output'),
                                 (inputs, Input, 'Input'),
                                 (state, State, 'State')]:
 
-            if not isinstance(args, list):
+            if not isinstance(args, (list, tuple)):
                 raise exceptions.IncorrectTypeException(
-                    'The {} argument `{}` is '
-                    'not a list of `dash.dependencies.{}`s.'.format(
+                    'The {} argument `{}` must be '
+                    'a list or tuple of `dash.dependencies.{}`s.'.format(
                         name.lower(), str(args), name
                     ))
 
@@ -902,6 +873,33 @@ class Dash(object):
                 'elements' if len(state) > 1 else 'element'
             ).replace('    ', ''))
 
+        for i in inputs:
+            bad = None
+            if is_multi:
+                for o in output:
+                    if o == i:
+                        bad = o
+            else:
+                if output == i:
+                    bad = output
+            if bad:
+                raise exceptions.SameInputOutputException(
+                    'Same output and input: {}'.format(bad)
+                )
+
+        if is_multi:
+            if len(set(output)) != len(output):
+                raise exceptions.DuplicateCallbackOutput(
+                    'Same output was used more than once in a '
+                    'multi output callback!\n Duplicates:\n {}'.format(
+                        ',\n'.join(
+                            k for k, v in
+                            ((str(x), output.count(x)) for x in output)
+                            if v > 1
+                        )
+                    )
+                )
+
         callback_id = _create_callback_id(output)
 
         callbacks = set(itertools.chain(*(
diff --git a/tests/integration/test_integration.py b/tests/integration/test_integration.py
index bfcc1e5b..70a79bdf 100644
--- a/tests/integration/test_integration.py
+++ b/tests/integration/test_integration.py
@@ -18,7 +18,8 @@ from dash import Dash, callback_context, no_update
 from dash.dependencies import Input, Output, State
 from dash.exceptions import (
     PreventUpdate, DuplicateCallbackOutput, CallbackException,
-    MissingCallbackContextException, InvalidCallbackReturnValue
+    MissingCallbackContextException, InvalidCallbackReturnValue,
+    IncorrectTypeException
 )
 from .IntegrationTests import IntegrationTests
 from .utils import invincible, wait_for
@@ -871,6 +872,40 @@ class Tests(IntegrationTests):
             context.exception.args[0]
         )
 
+    def test_callback_dep_types(self):
+        app = Dash(__name__)
+        app.layout = html.Div([
+            html.Div('child', id='in'),
+            html.Div('state', id='state'),
+            html.Div(id='out')
+        ])
+
+        with self.assertRaises(IncorrectTypeException):
+            @app.callback([[Output('out', 'children')]],  # extra nesting
+                          [Input('in', 'children')])
+            def f(i):
+                return i
+
+        with self.assertRaises(IncorrectTypeException):
+            @app.callback(Output('out', 'children'),
+                          Input('in', 'children'))  # no nesting
+            def f2(i):
+                return i
+
+        with self.assertRaises(IncorrectTypeException):
+            @app.callback(Output('out', 'children'),
+                          [Input('in', 'children')],
+                          State('state', 'children'))  # no nesting
+            def f3(i):
+                return i
+
+        # all OK with tuples
+        @app.callback((Output('out', 'children'),),
+                      (Input('in', 'children'),),
+                      (State('state', 'children'),))
+        def f4(i):
+            return i
+
     def test_callback_return_validation(self):
         app = Dash(__name__)
         app.layout = html.Div([
