commit f3be78c3ae9f12adbb6bd4edb78ec76fb8a9608d
Author: chriddyp <chris@plot.ly>
Date:   Fri Mar 24 20:24:16 2017 -0400

    rm examples

diff --git a/click_example.py b/click_example.py
deleted file mode 100644
index a72b6f19..00000000
--- a/click_example.py
+++ /dev/null
@@ -1,170 +0,0 @@
-from copy import deepcopy
-from dash import Dash
-from dash_core_components import Dropdown, PlotlyGraph
-from dash_html_components import B, Div, Pre, H1, P
-import json
-import plotly.plotly as py
-
-# Download the contour plot from https://plot.ly
-py.sign_in("PlotBot", "da05144j7i")
-fig = py.get_figure("https://plot.ly/~chris/5496")
-margin = {'l': 20, 'r': 20, 'b': 20, 't': 20}
-fig['layout'].update({'margin': margin})
-
-figmain = deepcopy(fig)
-figmain['layout'].update({'width': 500, 'height': 500})
-figmain['data'][0]['showscale'] = False
-
-figx = {'data': [], 'layout': {'width': 200, 'height': 500, 'margin': margin}}
-figy = {'data': [], 'layout': {'width': 500, 'height': 200, 'margin': margin}}
-
-
-dash = Dash(__name__)
-dash.layout = Div([
-    H1('click events'),
-    P('click on a heatmap cell to view an x, y slice through your cursor'),
-    Div([
-        PlotlyGraph(
-            id='yslice',
-            width=figy['layout']['width'],
-            height=figy['layout']['height'],
-            data=figy['data'],
-            layout=figy['layout']
-        ),
-
-        PlotlyGraph(
-            id='heatmap',
-            bindClick=True,
-            width=figmain['layout']['width'],
-            height=figmain['layout']['height'],
-            data=figmain['data'],
-            layout=figmain['layout'],
-            style={"display": "inline-block"}
-        ),
-
-        PlotlyGraph(
-            id='xslice',
-            width=figx['layout']['width'],
-            height=figx['layout']['height'],
-            layout=figx['layout'],
-            data=figx['data'],
-            style={"display": "inline-block"}
-        ),
-
-    ], className="row"),
-
-    Div([
-        B('click callback'),
-        Pre(
-            id="event-info",
-            style={"overflowY": "scroll"}
-        )
-    ])
-])
-
-
-def display_graph_event_info(heatmap):
-    """Display the click object in the <pre id="event-info">.
-    This function gets called when the user hovers over or clicks on
-    points in the heatmap. To assign click events to graphs, set
-    bindClick=True in the PlotlyGraph component.
-    """
-    clickData = ''
-    props = heatmap['props']
-
-    if ('clickData' in props):
-        clickData = json.dumps(props['clickData'], indent=4)
-
-    # TODO FIXME: The client ON_PROP_CHANGE action
-    #             does not receive the `content` prop.
-    #             https://github.com/plotly/dash2/issues/47
-    result = {
-        'content': clickData
-    }
-
-    return result
-
-dash.react('event-info', ['heatmap'])(display_graph_event_info)
-
-def plot_yslice(heatmap_graph):
-    """ Update the "xslice" graph with the slice of data that the user has
-    clicked on.
-    This function gets called on click events fired from the
-    "heatmap" graph.
-    """
-    props = heatmap_graph['props']
-
-    # Initialize data and layout props for return
-    data = []
-
-    # Clone existing props, if possible
-    if ('data' in props):
-        data = props['data']
-
-    # See if we have click data from the event
-    if ('clickData' in props):
-        event_data = props['clickData']
-        point = event_data['points'][0]['pointNumber']
-        rowNumber = point[1]
-        trace = props['data'][0]
-        row = trace['z'][rowNumber]
-        x = trace.get('y', range(len(trace['z'][0])))
-
-        data = [{
-            'x': x,
-            'y': row
-        }]
-
-    # Return the resulting props
-    return {
-        'data': data
-     }
-
-dash.react('yslice', ['heatmap'])(plot_yslice)
-
-def plot_xslice(heatmap_graph):
-    """ Update the "xslice" graph with the slice of data that the user has
-    clicked on.
-    This function gets called on click events fired from the
-    "heatmap" graph.
-    """
-    props = heatmap_graph['props']
-
-    # Initialize data and layout props for return
-    data = []
-
-    # Clone existing props, if possible
-    if ('data' in props):
-        data = props['data']
-
-    # See if we have click data from the event
-    if ('clickData' in props):
-        event_data = props['clickData']
-        point = event_data['points'][0]['pointNumber']
-        colNumber = point[0]
-        trace = props['data'][0]
-        column = [zi[colNumber] for zi in trace['z']]
-        y = trace.get('y', range(len(trace['z'])))
-
-        data = [{
-            'x': column,
-            'y': y
-        }]
-
-    # Return the resulting props
-    return {
-        'data': data
-     }
-
-dash.react('xslice', ['heatmap'])(plot_xslice)
-
-
-if __name__ == "__main__":
-    dash.run_server(
-        port=8050,
-        debug=True,
-        component_suites=[
-            'dash_core_components',
-            'dash_html_components'
-        ]
-    )
diff --git a/dropdown.py b/dropdown.py
deleted file mode 100644
index 7971ea65..00000000
--- a/dropdown.py
+++ /dev/null
@@ -1,42 +0,0 @@
-import datetime
-import time
-import random
-
-from dash.react import Dash
-from dash_html_components import Div, Label
-from dash_core_components import Dropdown
-
-dash = Dash(__name__)
-
-dash.layout = Div(id='wrapper', content=[
-    Dropdown(id='source', options=[
-        {'value': 'a', 'label': 'Option a'},
-        {'value': 'b', 'label': 'Option b'}
-    ], value='a'),
-    Label(id='target')
-])
-
-
-def update_target(dropdown_data):
-    return {
-        'content': dropdown_data['value']
-    }
-
-
-dash.react('target', ['source'])(update_target)
-
-dash.css.append_css({
-    'external_url': (
-        'https://rawgit.com/chriddyp/0247653a7c52feb4c48437e1c1837f75'
-        '/raw/d4f178bc09f253251135aeb2141aa077300d1b3f/dash.css'
-    )
-})
-
-# dash.scripts.config.serve_locally = True
-# dash.css.config.serve_locally = True
-
-if __name__ == "__main__":
-    dash.run_server(
-        port=8050,
-        debug=True
-    )
diff --git a/static b/static
deleted file mode 120000
index f0d627b3..00000000
--- a/static
+++ /dev/null
@@ -1 +0,0 @@
-../renderer/build/
\ No newline at end of file
diff --git a/stock_ticker.py b/stock_ticker.py
deleted file mode 100644
index c7565499..00000000
--- a/stock_ticker.py
+++ /dev/null
@@ -1,60 +0,0 @@
-from pandas_datareader import data as web
-from datetime import datetime as dt
-
-from dash.react import Dash
-from dash_html_components import Div, H2, P, Span, Strong
-from dash_core_components import Dropdown, PlotlyGraph, Label
-
-# Create a AAPL stock data reader
-df = web.DataReader(
-    'aapl', 'yahoo',
-    dt(2007, 10, 1), dt(2009, 4, 1))
-
-dash = Dash(__name__)
-
-dash.layout = Div(id='wrapper', content=[
-    H2('Apple historical stock value'),
-
-    P(
-        Strong('Select Y data:')
-    ),
-
-    Dropdown(
-        id='ydata',
-        options=[
-            {'value': c, 'label': c}
-            for c in df.columns
-        ]
-    ),
-
-    PlotlyGraph(id='graph')
-])
-
-
-def update_graph(ydata_dropdown):
-
-    selected = ydata_dropdown['props']['value']
-
-    return {
-        'data': [{
-            'x': df.index,
-            'y': df[selected],
-            'mode': 'markers'
-        }],
-        'layout': {
-            'yaxis': {'title': selected},
-            'margin': {'t': 0}
-        }
-    }
-
-dash.react('graph', ['ydata'])(update_graph)
-
-if __name__ == "__main__":
-    dash.run_server(
-        port=8050,
-        debug=True,
-        component_suites=[
-            'dash_core_components',
-            'dash_html_components'
-        ]
-    )
