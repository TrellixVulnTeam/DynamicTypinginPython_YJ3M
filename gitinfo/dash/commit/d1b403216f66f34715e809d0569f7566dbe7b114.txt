commit d1b403216f66f34715e809d0569f7566dbe7b114
Author: t4rk1n <t4rk@outlook.com>
Date:   Wed Feb 13 22:15:17 2019 -0500

    :sparkles: Add callback context.

diff --git a/dash/__init__.py b/dash/__init__.py
index 20be13db..7ebb5a0f 100644
--- a/dash/__init__.py
+++ b/dash/__init__.py
@@ -4,3 +4,6 @@ from . import development  # noqa: F401
 from . import exceptions  # noqa: F401
 from . import resources  # noqa: F401
 from .version import __version__  # noqa: F401
+from ._callback_context import CallbackContext as _CallbackContext
+
+callback = _CallbackContext()
diff --git a/dash/_callback_context.py b/dash/_callback_context.py
new file mode 100644
index 00000000..7d5cc4e9
--- /dev/null
+++ b/dash/_callback_context.py
@@ -0,0 +1,34 @@
+import functools
+import flask
+
+from . import exceptions
+
+
+def has_context(func):
+    @functools.wraps(func)
+    def assert_context(*args, **kwargs):
+        if not flask.has_request_context():
+            raise exceptions.MissingCallbackContextException(
+                'dash.callback.{} is only available from a callback!'.format(
+                    getattr(func, '__name__')
+                )
+            )
+        return func(*args, **kwargs)
+    return assert_context
+
+
+class CallbackContext:
+    @property
+    @has_context
+    def inputs(self):
+        return getattr(flask.g, 'input_values', {})
+
+    @property
+    @has_context
+    def states(self):
+        return getattr(flask.g, 'state_values', {})
+
+    @property
+    @has_context
+    def triggered(self):
+        return getattr(flask.g, 'triggered_inputs', [])
diff --git a/dash/dash.py b/dash/dash.py
index ecb7bbf1..3d03953a 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -949,6 +949,17 @@ class Dash(object):
 
         target_id = '{}.{}'.format(output['id'], output['property'])
         args = []
+
+        flask.g.input_values = {
+            '{}.{}'.format(x['id'], x['property']): x.get('value')
+            for x in inputs
+        }
+        flask.g.state_values = {
+            '{}.{}'.format(x['id'], x['property']): x.get('value')
+            for x in state
+        }
+        flask.g.triggered_inputs = body.get('changedProps')
+
         for component_registration in self.callback_map[target_id]['inputs']:
             args.append([
                 c.get('value', None) for c in inputs if
diff --git a/dash/exceptions.py b/dash/exceptions.py
index 2b98bbbc..7ed97663 100644
--- a/dash/exceptions.py
+++ b/dash/exceptions.py
@@ -80,3 +80,7 @@ class ResourceException(DashException):
 
 class SameInputOutputException(CallbackException):
     pass
+
+
+class MissingCallbackContextException(CallbackException):
+    pass
