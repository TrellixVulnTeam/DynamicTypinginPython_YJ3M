commit a960fad8d12653aea75599366cb094344d45e3ec
Author: John Bampton <jbampton@users.noreply.github.com>
Date:   Wed Oct 2 12:31:18 2019 +1000

    Correct case of words.
    
    Remove whitespace.
    
    Remove unneeded quotes from YAML keys.

diff --git a/.circleci/config.yml b/.circleci/config.yml
index 4ad2f056..e69a67d2 100644
--- a/.circleci/config.yml
+++ b/.circleci/config.yml
@@ -1,12 +1,12 @@
 version: 2
 jobs:
-  "percy-finalize":
+  percy-finalize:
     docker:
       - image: percyio/agent
     steps:
       - run: percy finalize --all
 
-  "artifacts":
+  artifacts:
     docker:
       - image: circleci/python:3.7-stretch-node-browsers
         environment:
@@ -22,7 +22,7 @@ jobs:
           path: ~/dash/packages
           destination: /tmp/packages
 
-  "lint-unit-37": &lint-unit
+  lint-unit-37: &lint-unit
     working_directory: ~/dash
     docker:
       - image: circleci/python:3.7-stretch-node-browsers
@@ -66,7 +66,7 @@ jobs:
           command: |
             cd dash-renderer && npm run test:js
 
-  "lint-unit-36":
+  lint-unit-36:
       <<: *lint-unit
       docker:
         - image: circleci/python:3.6-stretch-node-browsers
@@ -74,7 +74,7 @@ jobs:
             PYLINTRC: .pylintrc
             PYVERSION: python36
 
-  "lint-unit-27":
+  lint-unit-27:
       <<: *lint-unit
       docker:
         - image: circleci/python:2.7-stretch-node-browsers
@@ -82,7 +82,7 @@ jobs:
             PYLINTRC: .pylintrc
             PYVERSION: python27
 
-  "build-core-37": &build-core
+  build-core-37: &build-core
     working_directory: ~/dash
     docker:
       - image: circleci/python:3.7-stretch-node-browsers
@@ -119,21 +119,21 @@ jobs:
           paths:
             - packages/*.tar.gz
 
-  "build-core-36":
+  build-core-36:
       <<: *build-core
       docker:
         - image: circleci/python:3.6-stretch-node-browsers
           environment:
             PYVERSION: python36
 
-  "build-core-27":
+  build-core-27:
       <<: *build-core
       docker:
         - image: circleci/python:2.7-stretch-node-browsers
           environment:
             PYVERSION: python27
 
-  "build-misc-37": &build-misc
+  build-misc-37: &build-misc
     working_directory: ~/dash
     docker:
       - image: circleci/python:3.7-stretch-node-browsers
@@ -169,21 +169,21 @@ jobs:
           paths:
             - packages/*.tar.gz
 
-  "build-misc-36":
+  build-misc-36:
       <<: *build-misc
       docker:
         - image: circleci/python:3.6-stretch-node-browsers
           environment:
             PYVERSION: python36
 
-  "build-misc-27":
+  build-misc-27:
       <<: *build-misc
       docker:
         - image: circleci/python:2.7-stretch-node-browsers
           environment:
             PYVERSION: python27
 
-  "test-37": &test
+  test-37: &test
     working_directory: ~/dash
     docker:
       - image: circleci/python:3.7-stretch-node-browsers
@@ -219,7 +219,7 @@ jobs:
       - store_artifacts:
           path: /tmp/dash_artifacts
 
-  "test-36":
+  test-36:
       <<: *test
       docker:
         - image: circleci/python:3.6-stretch-node-browsers
@@ -227,7 +227,7 @@ jobs:
             PERCY_ENABLE: '0'
             PYVERSION: python36
 
-  "test-27":
+  test-27:
       <<: *test
       docker:
         - image: circleci/python:2.7-stretch-node-browsers
@@ -242,14 +242,14 @@ workflows:
       - lint-unit-37
       - build-core-37
       - build-misc-37
-      - "test-37":
+      - test-37:
           requires:
             - build-core-37
             - build-misc-37
-      - "percy-finalize":
+      - percy-finalize:
           requires:
             - test-37
-      - "artifacts":
+      - artifacts:
           requires:
             - percy-finalize
           filters:
@@ -265,7 +265,7 @@ workflows:
       - lint-unit-36
       - build-core-36
       - build-misc-36
-      - "test-36":
+      - test-36:
           requires:
             - build-core-36
             - build-misc-36
@@ -274,7 +274,7 @@ workflows:
       - lint-unit-27
       - build-core-27
       - build-misc-27
-      - "test-27":
+      - test-27:
           requires:
             - build-core-27
             - build-misc-27
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 68729217..a5f7e5ea 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -34,11 +34,11 @@ For contributors with a primarily **Python** or **R** background, this section m
 As of Dash 1.2, the renderer bundle and its peer dependencies can be packed and generated from the source code. The `dash-renderer\package.json` file is the one version of the truth for dash renderer version and npm dependencies. A build tool `renderer`, which is a tiny Python script installed by Dash as a command-line tool, has a few commands:
 
 1. `renderer clean` deletes all the previously generated assets by this same tool.
-2.  `renderer npm`  installs all the npm modules using this  `package.json`  files. Note that the  `package-lock.json`  file is the computed reference product for the versions defined with tilde(~) or caret(^) syntax in npm.
-3.  `renderer bundles` parses the locked version JSON, copies all the peer dependencies into dash_renderer folder, bundles the renderer assets, and generates an `__init__.py` to map all the resources. There are also a list of helpful `scripts` property defined in `package.json` you might need to do some handy tasks like linting, syntax format with prettier, etc.
-4.  `renderer digest` computes the content hash of each asset in `dash_renderer` folder, prints out the result in logs, and dumps into a JSON file `digest.json`. Use this when you have a doubt about the current assets in `dash_renderer`, and compare it with previous result in one shot by this command.
-5.  `renderer build` runs 1, 2, 3, 4 in sequence as a complete build process from scratch.
-6.  `renderer build local` runs the same order as in 5 and also generates source maps for debugging purposes. You also need to install dash-renderer with editable mode: `pip install -e .`.
+2. `renderer npm` installs all the npm modules using this `package.json` files. Note that the `package-lock.json` file is the computed reference product for the versions defined with tilde(~) or caret(^) syntax in npm.
+3. `renderer bundles` parses the locked version JSON, copies all the peer dependencies into dash_renderer folder, bundles the renderer assets, and generates an `__init__.py` to map all the resources. There are also a list of helpful `scripts` property defined in `package.json` you might need to do some handy tasks like linting, syntax format with prettier, etc.
+4. `renderer digest` computes the content hash of each asset in `dash_renderer` folder, prints out the result in logs, and dumps into a JSON file `digest.json`. Use this when you have a doubt about the current assets in `dash_renderer`, and compare it with previous result in one shot by this command.
+5. `renderer build` runs 1, 2, 3, 4 in sequence as a complete build process from scratch.
+6. `renderer build local` runs the same order as in 5 and also generates source maps for debugging purposes. You also need to install dash-renderer with editable mode: `pip install -e .`.
 
 When a change in renderer code doesn't reflect in your browser as expected, this could be: confused bundle generation, caching issue in a browser, python package not in `editable` mode, etc. The new tool reduces the risk of bundle assets by adding the digest to help compare asset changes.
 
@@ -46,7 +46,7 @@ When a change in renderer code doesn't reflect in your browser as expected, this
 
 Writing Python 2/3 compatible code might be a challenging task for contributors used to working on one particular version, especially new learners who start directly with Python 3.
 
-From the #892, we started to adopt  `python-future`  instead of  `six`  as our tool to better achieve the goal where we can mainly write Python 3 code and make it back-compatible in Python 2.7 (last Python 2 version Dash supports before it gets deprecated).
+From the #892, we started to adopt `python-future` instead of `six` as our tool to better achieve the goal where we can mainly write Python 3 code and make it back-compatible in Python 2.7 (last Python 2 version Dash supports before it gets deprecated).
 
 Please refer to [this list of idioms](https://python-future.org/compatible_idioms.html "https://python-future.org/compatible_idioms.html") for more details on working with `python-future`.
 
@@ -80,7 +80,7 @@ Emojis make the commit messages :cherry_blossom:. If you have no idea about what
 
 **Code Review Comments**
 
-- :dancer: `:dancer:` - used to indicate you can merge!  Equivalent to GitHub's :squirrel:
+- :dancer: `:dancer:` - used to indicate you can merge! Equivalent to GitHub's :squirrel:
 - :cow2: `:cow2:` cow tip - minor coding style or code flow point
 - :tiger2: `:tiger2:` testing tiger - something needs more tests, or tests need to be improved
 - :snake: `:snake:` security snake - known or suspected security flaw
diff --git a/README.md b/README.md
index 1b6c0590..d1a61581 100644
--- a/README.md
+++ b/README.md
@@ -11,7 +11,7 @@
 
 #### *Dash is a Python framework for building analytical web applications. No JavaScript required*.
 
-Built on top of Plotly.js, React and Flask, Dash ties modern UI elements like dropdowns, sliders, and graphs directly to your analytical python code. Read our tutorial proudly crafted ❤️ by dash itself.
+Built on top of Plotly.js, React and Flask, Dash ties modern UI elements like dropdowns, sliders, and graphs directly to your analytical Python code. Read our tutorial proudly crafted ❤️ by Dash itself.
 
 - [User Guide](https://dash.plot.ly/getting-started)
 
@@ -25,9 +25,9 @@ Built on top of Plotly.js, React and Flask, Dash ties modern UI elements like dr
 | App | Description |
 |--- | :---: |
 | ![Sample Dash App](https://user-images.githubusercontent.com/1280389/30086128-9bb4a28e-9267-11e7-8fe4-bbac7d53f2b0.gif) | Here’s a simple example of a Dash App that ties a Dropdown to a D3.js Plotly Graph. As the user selects a value in the Dropdown, the application code dynamically exports data from Google Finance into a Pandas DataFrame. This app was written in just **43** lines of code ([view the source](https://gist.github.com/chriddyp/3d2454905d8f01886d651f207e2419f0)). |
-|![crossfiltering dash app](https://user-images.githubusercontent.com/1280389/30086123-97c58bde-9267-11e7-98a0-7f626de5199a.gif)|Dash app code is declarative and reactive, which makes it easy to build complex apps that contain many interactive elements. Here’s an example with 5 inputs, 3 outputs, and cross filtering. This app was composed in just 160 lines of code, all of which were Python.|
-|  ![Dash app with Mapbox map showing walmart store openings](https://user-images.githubusercontent.com/1280389/30086299-768509d0-9268-11e7-8e6b-626ac9ca512c.gif)| Dash uses [Plotly.js](https://github.com/plotly/plotly.js) for charting. Over 35 chart types are supported, including maps. |
-|![Financial report](https://github.com/plotly/dash-docs/blob/516f80c417051406210b94ea23a6d3b6cd84d146/assets/images/gallery/dash-financial-report.gif)| Dash isn't just for dashboards. You have full control over the look and feel of your applications. Here's a Dash app that's styled to look like a PDF report. |
+|![Crossfiltering Dash App](https://user-images.githubusercontent.com/1280389/30086123-97c58bde-9267-11e7-98a0-7f626de5199a.gif)|Dash app code is declarative and reactive, which makes it easy to build complex apps that contain many interactive elements. Here’s an example with 5 inputs, 3 outputs, and cross filtering. This app was composed in just 160 lines of code, all of which were Python.|
+|  ![Dash App with Mapbox map showing walmart store openings](https://user-images.githubusercontent.com/1280389/30086299-768509d0-9268-11e7-8e6b-626ac9ca512c.gif)| Dash uses [Plotly.js](https://github.com/plotly/plotly.js) for charting. Over 35 chart types are supported, including maps. |
+|![Financial report](https://github.com/plotly/dash-docs/blob/516f80c417051406210b94ea23a6d3b6cd84d146/assets/images/gallery/dash-financial-report.gif)| Dash isn't just for dashboards. You have full control over the look and feel of your applications. Here's a Dash App that's styled to look like a PDF report. |
 
 To learn more about Dash, read the [extensive announcement letter](https://medium.com/@plotlygraphs/introducing-dash-5ecf7191b503) or [jump in with the user guide](https://plot.ly/dash).
 
@@ -35,7 +35,7 @@ To learn more about Dash, read the [extensive announcement letter](https://mediu
 
 For companies with software budgets, Plotly offers
 
-- [**Dash Deployment Server**](https://plot.ly/products/dash/)  speeds your time-to-delivery while providing the right resources, security, and scalability you need to deliver production-quality apps
+- [**Dash Deployment Server**](https://plot.ly/products/dash/) speeds your time-to-delivery while providing the right resources, security, and scalability you need to deliver production-quality apps
 - [**Dash Design Kit**](https://plot.ly/products/dash/) makes your internal dashboard awesome without expertise in JavaScript & CSS.
 - [**Snapshot Engine**](https://plot.ly/products/dash/) seamlessly links your analytics and reporting workflows together, giving you a fast way to generate interactive reports of just the data you need
 
diff --git a/tests/integration/callbacks/test_basic_callback.py b/tests/integration/callbacks/test_basic_callback.py
index fffe0701..9a1e1ab1 100644
--- a/tests/integration/callbacks/test_basic_callback.py
+++ b/tests/integration/callbacks/test_basic_callback.py
@@ -47,7 +47,7 @@ def test_cbsc001_simple_callback(dash_duo):
 
 
 def test_cbsc002_callbacks_generating_children(dash_duo):
-    """ Modify the DOM tree by adding new components in the callbacks"""
+    """Modify the DOM tree by adding new components in the callbacks"""
 
     # some components don't exist in the initial render
     app = dash.Dash(__name__, suppress_callback_exceptions=True)
