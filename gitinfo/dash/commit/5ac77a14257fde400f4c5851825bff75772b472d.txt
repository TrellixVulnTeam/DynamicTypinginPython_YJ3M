commit 5ac77a14257fde400f4c5851825bff75772b472d
Author: Per Nilsson <per.nilsson@formidablelabs.com>
Date:   Wed Jul 20 09:37:01 2016 -0700

    WIP: Add click example
    
    - Update to core components v0.1.3
    - Add non-working click example with heatmap

diff --git a/dash/click_example.py b/dash/click_example.py
new file mode 100644
index 00000000..8393e1fa
--- /dev/null
+++ b/dash/click_example.py
@@ -0,0 +1,154 @@
+from copy import deepcopy
+from dash import Dash
+from dash_core_components import Dropdown, PlotlyGraph
+from dash_html_components import B, Div, Pre, H1, P
+import json
+import plotly.plotly as py
+
+# Download the contour plot from https://plot.ly
+py.sign_in("PlotBot", "da05144j7i")
+fig = py.get_figure("https://plot.ly/~chris/5496")
+margin = {'l': 20, 'r': 20, 'b': 20, 't': 20}
+fig['layout'].update({'margin': margin})
+
+figmain = deepcopy(fig)
+figmain['layout'].update({'width': 500, 'height': 500})
+figmain['data'][0]['showscale'] = False
+
+figx = {'data': [], 'layout': {'width': 200, 'height': 500}}
+figy = {'data': [], 'layout': {'width': 500, 'height': 200}}
+
+
+dash = Dash(__name__)
+dash.layout = Div([
+    H1('click events'),
+    P('click on a heatmap cell to view an x, y slice through your cursor'),
+    Div([
+        PlotlyGraph(
+            id='yslice',
+            width=figy['layout']['width'],
+            height=figy['layout']['height'],
+            data=figy['data'],
+            layout=figy['layout']),
+        Div([
+            PlotlyGraph(
+                id='heatmap',
+                bindClick=True,
+                width=figmain['layout']['width'],
+                height=figmain['layout']['height'],
+                data=figmain['data'],
+                layout=figmain['layout']),
+        ]), # style={"display": "inline-block"}
+        Div([
+            PlotlyGraph(
+                id='xslice',
+                width=figx['layout']['width'],
+                height=figx['layout']['height'],
+                layout=figx['layout'],
+                data=figx['data']),
+        ]) # style={"display": "inline-block"}
+    ], className="row"),
+
+    Div([
+        B('click callback'),
+        Pre(id="event-info") # style={"overflowY": "scroll"}
+    ])
+])
+
+
+def display_graph_event_info(heatmap):
+    """Display the click object in the <pre id="event-info">.
+    This function gets called when the user hovers over or clicks on
+    points in the heatmap. To assign click events to graphs, set
+    bindClick=True in the PlotlyGraph component.
+    """
+    clickData = ''
+    props = heatmap['props']
+    if hasattr(props, 'clickData'):
+        print('has clickData')
+        clickData = json.dumps(heatmap.clickData, indent=4)
+    else:
+        print('no clickData')
+
+    return {
+        'content': repr(heatmap)+'\nclickData: '+clickData
+    }
+
+dash.react('event-info', ['heatmap'])(display_graph_event_info)
+
+# def plot_yslice(heatmap_graph):
+#     """ Update the "yslice" graph with the slice of data that the user has
+#     clicked on.
+#     This function gets called on click events fired from the
+#     "heatmap" graph.
+#     """
+#     props = heatmap_graph['props']
+
+#     if (hasattr(props, 'clickData')):
+#         event_data = getattr(props, 'clickData')
+#         point = event_data['points'][0]['pointNumber']
+#         rowNumber = point[1]
+#         trace = heatmap_graph.figure['data'][0]
+#         row = trace['z'][rowNumber]
+#         x = trace.get('y', range(len(trace['z'][0])))
+
+#         return {
+#             'data': [{
+#                 'x': x,
+#                 'y': row
+#             }],
+#             'layout': {
+#                 'margin': margin
+#             }
+#         }
+
+# dash.react('yslice', ['heatmap'])(plot_yslice)
+
+def plot_xslice(heatmap_graph):
+    """ Update the "xslice" graph with the slice of data that the user has
+    clicked on.
+    This function gets called on click events fired from the
+    "heatmap" graph.
+    """
+    props = heatmap_graph['props']
+
+    # Initialize data and layout props for return
+    data = []
+    layout = {}
+
+    # Clone existing props, if possible
+    if (hasattr(props, 'data')):
+        data = getattr(props, 'data')
+
+    if(hasattr(props, 'layout')):
+        layout = getattr(props, 'layout')
+
+    # See if we have click data from the event
+    if (hasattr(props, 'clickData')):
+        event_data = getattr(props, 'clickData')
+        point = event_data['points'][0]['pointNumber']
+        colNumber = point[0]
+        trace = heatmap_graph.figure['data'][0]
+        column = [zi[colNumber] for zi in trace['z']]
+        y = trace.get('y', range(len(trace['z'])))
+
+        data = [{
+            'x': column,
+            'y': y
+        }]
+
+        layout = {
+            'margin': margin
+        }
+
+    # Return the resulting props
+    return {
+        'data': data,
+        'layout': layout
+     }
+
+dash.react('xslice', ['heatmap'])(plot_xslice)
+
+
+if __name__ == "__main__":
+    dash.server.run(port=8050, debug=True)
diff --git a/dash/requirements.txt b/dash/requirements.txt
index cc39910d..0f45e369 100644
--- a/dash/requirements.txt
+++ b/dash/requirements.txt
@@ -1,6 +1,6 @@
 click==6.6
 dash-html-components==0.2.2
-dash-core-components==0.1.2
+dash-core-components==0.1.3
 Flask==0.11
 Flask-Cors==2.1.2
 itsdangerous==0.24
diff --git a/renderer/src/registry.js b/renderer/src/registry.js
index a4cf5410..0cad30d4 100644
--- a/renderer/src/registry.js
+++ b/renderer/src/registry.js
@@ -1,7 +1,9 @@
 'use strict';
 
 import {
+    B,
     Div,
+    H1,
     H2,
     P,
     Span,
@@ -18,7 +20,9 @@ import {
 } from 'dash-core-components/lib';
 
 export default {
+    B,
     Div,
+    H1,
     H2,
     P,
     Span,
