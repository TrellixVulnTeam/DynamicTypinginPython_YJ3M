commit 9010044fe6ae0ac9cea3f1fa3e6c96e0829d644f
Author: Chris P <chris@plot.ly>
Date:   Sat Apr 13 14:46:14 2019 -0400

    simplify error overlay
    
    In the previous version, we:
    1. wrapped the output component with an overlay. This could cause flow
    issues by introducing new markup on the page (e.g. wrapping a div with
    a button).
    2. Disabled the input components
    
    This commit simplifies the logic and just displays the previous state
    of the component, removes the overlay, and removes the disabled
    elements.
    
    Now, the markup on the page wonâ€™t change when a front-end error happens
    which makes it more similar to how the app changes when backend errors
    occur.

diff --git a/src/components/error/ComponentDisabledOverlay.react.js b/src/components/error/ComponentDisabledOverlay.react.js
deleted file mode 100644
index 93d3bb67..00000000
--- a/src/components/error/ComponentDisabledOverlay.react.js
+++ /dev/null
@@ -1,33 +0,0 @@
-import React from 'react';
-import PropTypes from 'prop-types';
-
-const styles = {
-    root: {
-        position: 'relative',
-    },
-    overlay: {
-        position: 'relative',
-        padding: '2px',
-        display: 'inline-block',
-    },
-    childWrapper: {
-        position: 'relative',
-        zIndex: -1,
-    },
-};
-
-function ComponentDisabledOverlay({children}) {
-    return (
-        <div style={styles.root}>
-            <div style={styles.overlay}>
-                <div style={styles.childWrapper}>{children}</div>
-            </div>
-        </div>
-    );
-}
-
-ComponentDisabledOverlay.propTypes = {
-    children: PropTypes.object,
-};
-
-export default ComponentDisabledOverlay;
diff --git a/src/components/error/ComponentErrorBoundary.react.js b/src/components/error/ComponentErrorBoundary.react.js
index 8bdb9876..ed7644db 100644
--- a/src/components/error/ComponentErrorBoundary.react.js
+++ b/src/components/error/ComponentErrorBoundary.react.js
@@ -1,12 +1,10 @@
 import {connect} from 'react-redux';
-import React, {Component} from 'react';
+import {Component} from 'react';
 import PropTypes from 'prop-types';
 import Radium from 'radium';
-import * as R from 'ramda';
+import {contains, pluck} from 'ramda';
 import uniqid from 'uniqid';
-import {onError, resolveError, revert} from '../../actions';
-import ComponentErrorOverlay from './ComponentErrorOverlay.react';
-import ComponentDisabledOverlay from './ComponentDisabledOverlay.react';
+import {onError, revert} from '../../actions';
 
 class UnconnectedComponentErrorBoundary extends Component {
     constructor(props) {
@@ -14,7 +12,7 @@ class UnconnectedComponentErrorBoundary extends Component {
         this.state = {
             myID: props.componentId,
             myUID: uniqid(),
-            oldChildren: <div>No Initial State</div>,
+            oldChildren: null,
         };
     }
 
@@ -36,7 +34,7 @@ class UnconnectedComponentErrorBoundary extends Component {
     componentDidUpdate(prevProps, prevState) {
         const {error} = this.props;
         const {myUID} = this.state;
-        const hasError = R.contains(myUID, R.pluck('myUID')(error.frontEnd));
+        const hasError = contains(myUID, pluck('myUID')(error.frontEnd));
         if (
             !hasError &&
             prevState.oldChildren !== prevProps.children &&
@@ -49,75 +47,13 @@ class UnconnectedComponentErrorBoundary extends Component {
     }
     /* eslint-enable react/no-did-update-set-state */
 
-    getDisabledComponents(disabledIds, incomingMap) {
-        const possibleKeys = R.keys(incomingMap);
-        const enumeratedPossibleIds = R.zip(
-            R.range(0, R.length(possibleKeys)),
-            R.map(k => k.split('.')[0], possibleKeys)
-        );
-        const affectedIndices = R.filter(
-            idx => !R.isNil(idx),
-            R.map(
-                tuple => (R.contains(tuple[1], disabledIds) ? tuple[0] : null),
-                enumeratedPossibleIds
-            )
-        );
-        const affectedKeys = R.ap(
-            R.map(R.nth, affectedIndices),
-            R.of(possibleKeys)
-        );
-        const disabledKeys = R.flatten(
-            R.map(key => incomingMap[key], affectedKeys)
-        );
-        const newDisabledIds = R.union(
-            disabledIds,
-            R.map(k => k.split('.')[0], disabledKeys)
-        );
-        if (R.equals(disabledIds, newDisabledIds)) {
-            return disabledIds;
-        }
-        return this.getDisabledComponents(newDisabledIds, incomingMap);
-    }
-
-    resolveError(dispatch, myUID) {
-        dispatch(resolveError({type: 'frontEnd', myUID}));
-    }
-
     render() {
-        const {
-            componentType,
-            componentId,
-            dispatch,
-            error,
-            graphs,
-        } = this.props;
+        const {error} = this.props;
         const {myUID} = this.state;
-        const hasError = R.contains(myUID, R.pluck('myUID')(error.frontEnd));
-        const disabledComponents = this.getDisabledComponents(
-            R.pluck('myID')(error.frontEnd),
-            graphs.InputGraph.incomingEdges
-        );
-        const disabled = R.contains(componentId, disabledComponents);
+        const hasError = contains(myUID, pluck('myUID')(error.frontEnd));
+
         if (hasError) {
-            const errorToDisplay = R.find(R.propEq('myUID', myUID))(
-                error.frontEnd
-            ).error;
-            return (
-                <ComponentErrorOverlay
-                    error={errorToDisplay}
-                    componentId={componentId}
-                    componentType={componentType}
-                    resolve={() => this.resolveError(dispatch, myUID)}
-                >
-                    {this.state.oldChildren}
-                </ComponentErrorOverlay>
-            );
-        } else if (disabled) {
-            return (
-                <ComponentDisabledOverlay>
-                    {this.props.children}
-                </ComponentDisabledOverlay>
-            );
+            return this.state.oldChildren;
         }
         return this.props.children;
     }
@@ -126,16 +62,13 @@ class UnconnectedComponentErrorBoundary extends Component {
 UnconnectedComponentErrorBoundary.propTypes = {
     children: PropTypes.object,
     componentId: PropTypes.string,
-    componentType: PropTypes.string,
-    dispatch: PropTypes.func,
     error: PropTypes.object,
-    graphs: PropTypes.object,
+    dispatch: PropTypes.function,
 };
 
 const ComponentErrorBoundary = connect(
     state => ({
         error: state.error,
-        graphs: state.graphs,
     }),
     dispatch => {
         return {dispatch};
diff --git a/src/components/error/ComponentErrorOverlay.css b/src/components/error/ComponentErrorOverlay.css
deleted file mode 100644
index 41df4eac..00000000
--- a/src/components/error/ComponentErrorOverlay.css
+++ /dev/null
@@ -1,28 +0,0 @@
-.dash-error-overlay {
-    padding: 1rem;
-    background-color: #ff4500;
-    color: white;
-    display: inline-block;
-    animation: dash-error-overlay-animation 0.5s;
-    margin: 1rem;
-    box-shadow: inset 0px -1px 2px 2px rgba(80, 103, 132, 0.165);
-    font-family: Fira Code;
-    font-size: 14px;
-}
-
-@keyframes dash-error-overlay-animation {
-    from {
-        opacity: 0;
-        -webkit-transform: scale(1.2);
-        -moz-transform: scale(1.2);
-        -ms-transform: scale(1.2);
-        transform: scale(1.2);
-    }
-    to {
-        opacity: 1;
-        -webkit-transform: scale(1);
-        -moz-transform: scale(1);
-        -ms-transform: scale(1);
-        transform: scale(1);
-    }
-}
diff --git a/src/components/error/ComponentErrorOverlay.react.js b/src/components/error/ComponentErrorOverlay.react.js
deleted file mode 100644
index d061a05d..00000000
--- a/src/components/error/ComponentErrorOverlay.react.js
+++ /dev/null
@@ -1,23 +0,0 @@
-import React, {Component} from 'react';
-import PropTypes from 'prop-types';
-import './ComponentErrorOverlay.css';
-
-export default class ComponentErrorOverlay extends Component {
-    render() {
-        const {componentId, componentType} = this.props;
-        const errorLocationString = `Error in <${componentType} id="${componentId}">`;
-
-        return (
-            <div className={'dash-error-overlay'}>{errorLocationString}</div>
-        );
-    }
-}
-
-ComponentErrorOverlay.propTypes = {
-    children: PropTypes.object,
-    oldChildren: PropTypes.object,
-    error: PropTypes.object,
-    componentId: PropTypes.string,
-    componentType: PropTypes.string,
-    resolve: PropTypes.func,
-};
