commit a64ade2ab7ed1ae34a5725667bcd8e70b4ee1be5
Author: chriddyp <chris@plot.ly>
Date:   Mon Mar 20 23:39:48 2017 -0400

    rename react to dash

diff --git a/dash/__init__.py b/dash/__init__.py
index 84fe1e3b..e82491d8 100644
--- a/dash/__init__.py
+++ b/dash/__init__.py
@@ -1,2 +1,2 @@
-from react import Dash
+from dash import Dash
 import development
diff --git a/dash/react.py b/dash/dash.py
similarity index 64%
rename from dash/react.py
rename to dash/dash.py
index 14dfca52..42808f17 100644
--- a/dash/react.py
+++ b/dash/dash.py
@@ -9,6 +9,8 @@ from resources import Scripts, Css
 from development.base_component import Component
 import pkgutil
 import dash_renderer
+from dependencies import Event, Input, Output, State
+import exceptions
 
 
 class Dash(object):
@@ -65,6 +67,11 @@ class Dash(object):
             '/<path:path_in_package_dist>'.format(url_namespace),
             view_func=self.serve_component_suites)
 
+        self._layout = None
+
+    class config:
+        supress_callback_exceptions = False
+
     @property
     def layout(self):
         return self._layout
@@ -252,8 +259,117 @@ class Dash(object):
 
         return self.react_map[target_id]['callback'](*args)
 
-    # TODO - Rename "react" to avoid ambiguity with the JS library?
-    # Perhaps "update", "respond", "callback", ...
+    def react(self, *args, **kwargs):
+        raise DashException(
+            'Yo! `react` is no longer used. \n'
+            'Use `callback` instead. `callback` has a new syntax too, '
+            'so make sure to call `help(app.callback)` to learn more.')
+
+    def _validate_callback(self, output, inputs, state, events):
+        if self.layout is None:
+            # Without a layout, we can't do validation on the IDs and
+            # properties of the elements in the callback.
+            raise exceptions.LayoutIsNotDefined('''
+                Attempting to assign a callback to the application but
+                the `layout` property has not been assigned.
+                Assign the `layout` property before assigning callbacks.
+            '''.replace('    ', ''))
+
+        for args, object, name in [([output], Output, 'Output'),
+                                   (inputs, Input, 'Input'),
+                                   (state, State, 'State'),
+                                   (events, Event, 'Event')]:
+
+            if not isinstance(args, list):
+                raise exceptions.IncorrectTypeException(
+                    'The {} argument `{}` is '
+                    'not a list of `dash.{}`s.'.format(
+                        name.lower(), str(arg), name
+                    ))
+
+            for arg in args:
+                if not isinstance(arg, object):
+                    raise exceptions.IncorrectTypeException(
+                        'The {} argument `{}` is '
+                        'not of type `dash.{}`.'.format(
+                            name.lower(), str(arg), name
+                        ))
+
+                if (arg.component_id not in self.layout and
+                        arg.component_id != getattr(self.layout, 'id', None)
+                        and not self.config.supress_callback_exceptions):
+                    raise exceptions.NonExistantIdException('''
+                        Attempting to assign a callback to the
+                        component with the id "{}" but no
+                        components with id "{}" exist in the
+                        app\'s layout.\n\n
+                        Here is a list of IDs in layout:\n{}\n\n
+                        If you are assigning callbacks to components
+                        that are generated by other callbacks
+                        (and therefore not in the initial layout), then
+                        you can suppress this exception by setting
+                        `app.config.supress_callback_exceptions=False`.
+                    '''.format(
+                        arg.component_id,
+                        arg.component_id,
+                        self.layout.keys() + (
+                            [] if not hasattr(self.layout, 'id') else
+                            [self.layout.id]
+                        )
+                    ).replace('    ', ''))
+
+                if not self.config.supress_callback_exceptions:
+                    if getattr(self.layout, 'id', None) == arg.component_id:
+                        component = self.layout
+                    else:
+                        component = self.layout[arg.component_id]
+                    if (hasattr(arg, 'component_property') and
+                            arg.component_property not in
+                            component._prop_names):
+                        raise exceptions.NonExistantPropException('''
+                            Attempting to assign a callback with
+                            the property "{}" but the component
+                            "{}" doesn't have "{}" as a property.\n
+                            Here is a list of the available properties in "{}":
+                            {}
+                        '''.format(arg.component_property,
+                                   arg.component_id,
+                                   arg.component_property,
+                                   arg.component_id,
+                                   component._prop_names).replace('    ', ''))
+                    if (hasattr(arg, 'component_event') and
+                            arg.component_event not in
+                            # TODO - Rename `_prop_names` to `available_props`
+                            # and add `available_events` to components
+                            getattr(component, 'available_events', ['click', 'blur'])):
+                        raise exceptions.NonExistantPropException('''
+                            Attempting to assign a callback with
+                            the property "{}" but the component
+                            "{}" doesn't have "{}" as a property.\n
+                            Here is a list of the available properties in "{}":
+                            {}
+                        '''.format(arg.component_property,
+                                   arg.component_id,
+                                   arg.component_property,
+                                   arg.component_id,
+                                   component._prop_names).replace('    ', ''))
+
+        if len(state) > 0 and len(events) == 0 and len(inputs) == 0:
+            raise exceptions.MissingEventsException('''
+                This callback has {} `State` {}
+                but no `Input` elements or `Event` elements.\n
+                Without `Input` or `Event` elements, this callback
+                will never get called.\n
+                (Subscribing to input components will cause the
+                callback to be called whenver their values
+                change and subscribing to an event will cause the
+                callback to be called whenever the event is fired.)
+            '''.format(
+                len(state),
+                'elements' if len(state) > 1 else 'element'
+            ).replace('    ', ''))
+
+
     # TODO - Update nomenclature.
     # "Parents" and "Children" should refer to the DOM tree
     # and not the dependency tree.
@@ -265,7 +381,11 @@ class Dash(object):
     # the dropdown.
     # TODO - Check this map for recursive or other ill-defined non-tree
     # relationships
-    def react(self, component_id, parents=[], state=[], events=[]):
+    def callback(self, output, inputs=[], state=[], events=[]):
+        self._validate_callback(output, inputs, state, events)
+
+        return
+
         self.react_map[component_id] = {
             'state': [{'id': p, 'prop': '*'} for p in parents] + state,
             'events': [
