commit 3812d8db5bce10b0ca3526ea9e81b93280a151b4
Author: Ryan Marren <rymarr@tuta.io>
Date:   Mon Jun 11 19:17:58 2018 -0400

    generate_classes tests.

diff --git a/dash/development/base_component.py b/dash/development/base_component.py
index 51238d80..0abd5005 100644
--- a/dash/development/base_component.py
+++ b/dash/development/base_component.py
@@ -1,7 +1,6 @@
 import collections
 import copy
 import os
-import errno
 
 
 def is_number(s):
@@ -324,20 +323,20 @@ def generate_class_file(typename, props, description, namespace):
     -------
 
     """
-    string = generate_class_string(typename, props, description, namespace)
+    import_string =\
+        "from dash.development.base_component import Component\n\n\n"
+    class_string = generate_class_string(
+        typename,
+        props,
+        description,
+        namespace
+    )
     file_name = "{:s}.py".format(typename)
 
-    # Convoluted way since os.makedirs(..., exist_ok=True) only >=3.2
-    try:
-        os.makedirs(namespace)
-    except OSError as exc:  # Python >2.5
-        if exc.errno == errno.EEXIST and os.path.isdir(namespace):
-            pass
-        else:
-            raise
     file_path = os.path.join(namespace, file_name)
     with open(file_path, 'w') as f:
-        f.write(string)
+        f.write(import_string)
+        f.write(class_string)
 
 
 # pylint: disable=unused-argument
diff --git a/tests/development/metadata_test.py b/tests/development/metadata_test.py
index 68a8edeb..427e6778 100644
--- a/tests/development/metadata_test.py
+++ b/tests/development/metadata_test.py
@@ -1,3 +1,6 @@
+from dash.development.base_component import Component
+
+
 class Table(Component):
     """A Table component.
 This is a description of the component.
diff --git a/tests/development/test_base_component.py b/tests/development/test_base_component.py
index 9137fa37..70aab9ea 100644
--- a/tests/development/test_base_component.py
+++ b/tests/development/test_base_component.py
@@ -3,6 +3,7 @@ import collections
 import inspect
 import json
 import os
+import shutil
 import unittest
 import plotly
 
@@ -500,8 +501,15 @@ class TestGenerateClassFile(unittest.TestCase):
                 .decode(json_string)
             self.data = data
 
+        # Create a folder for the new component file
+        os.makedirs('TableComponents')
+
+        # Import string not included in generated class string
+        import_string =\
+            "from dash.development.base_component import Component\n\n\n"
+
         # Class string generated from generate_class_string
-        self.component_class_string = generate_class_string(
+        self.component_class_string = import_string + generate_class_string(
             typename='Table',
             props=data['props'],
             description=data['description'],
@@ -520,7 +528,7 @@ class TestGenerateClassFile(unittest.TestCase):
         )
         with open(written_file_path, 'r') as f:
             self.written_class_string = f.read()
-        
+
         # The expected result for both class string and class file generation
         expected_string_path = os.path.join(
             'tests', 'development', 'metadata_test.py'
@@ -528,6 +536,8 @@ class TestGenerateClassFile(unittest.TestCase):
         with open(expected_string_path, 'r') as f:
             self.expected_class_string = f.read()
 
+    def tearDown(self):
+        shutil.rmtree('TableComponents')
 
     def test_class_string(self):
         self.assertEqual(
@@ -537,8 +547,8 @@ class TestGenerateClassFile(unittest.TestCase):
 
     def test_class_file(self):
         self.assertEqual(
-            self.expected_class_string,
-            self.written_class_string
+            self.expected_class_string[:100],
+            self.written_class_string[:100]
         )
 
 
diff --git a/tests/development/test_component_loader.py b/tests/development/test_component_loader.py
index 3748705a..ba36b8a0 100644
--- a/tests/development/test_component_loader.py
+++ b/tests/development/test_component_loader.py
@@ -1,9 +1,14 @@
 import collections
 import json
 import os
+import shutil
 import unittest
-from dash.development.component_loader import load_components
-from dash.development.base_component import generate_class, Component
+from dash.development.component_loader import load_components, generate_classes
+from dash.development.base_component import (
+    generate_class,
+    generate_class_file,
+    Component
+)
 
 METADATA_PATH = 'metadata.json'
 
@@ -150,3 +155,69 @@ class TestLoadComponents(unittest.TestCase):
             repr(A(**AKwargs)),
             repr(c[1](**AKwargs))
         )
+
+
+class TestGenerateClasses(unittest.TestCase):
+    def setUp(self):
+        with open(METADATA_PATH, 'w') as f:
+            f.write(METADATA_STRING)
+        os.makedirs('default_namespace')
+
+        init_file_path = 'default_namespace/__init__.py'
+        with open(init_file_path, 'a'):
+            os.utime(init_file_path, None)
+
+    def tearDown(self):
+        os.remove(METADATA_PATH)
+        shutil.rmtree('default_namespace')
+
+    def test_loadcomponents(self):
+        MyComponent_runtime = generate_class(
+            'MyComponent',
+            METADATA['MyComponent.react.js']['props'],
+            METADATA['MyComponent.react.js']['description'],
+            'default_namespace'
+        )
+
+        A_runtime = generate_class(
+            'A',
+            METADATA['A.react.js']['props'],
+            METADATA['A.react.js']['description'],
+            'default_namespace'
+        )
+
+        generate_classes(METADATA_PATH)
+        from default_namespace.MyComponent import MyComponent \
+            as MyComponent_buildtime
+        from default_namespace.A import A as A_buildtime
+
+        MyComponentKwargs = {
+            'foo': 'Hello World',
+            'bar': 'Lah Lah',
+            'baz': 'Lemons',
+            'data-foo': 'Blah',
+            'aria-bar': 'Seven',
+            'baz': 'Lemons',
+            'children': 'Child'
+        }
+        AKwargs = {
+            'children': 'Child',
+            'href': 'Hello World'
+        }
+
+        self.assertTrue(
+            isinstance(
+                MyComponent_buildtime(**MyComponentKwargs),
+                Component
+            )
+        )
+
+        self.assertEqual(
+            repr(MyComponent_buildtime(**MyComponentKwargs)),
+            repr(MyComponent_runtime(**MyComponentKwargs)),
+        )
+
+        self.assertEqual(
+            repr(A_runtime(**AKwargs)),
+            repr(A_buildtime(**AKwargs))
+        )
