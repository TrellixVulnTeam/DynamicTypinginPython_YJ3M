commit 07f59045caa7c998738f4965b82067de31fae7ed
Author: Per Nilsson <per.nilsson@formidablelabs.com>
Date:   Thu May 26 15:29:50 2016 -0700

    Add webpack configuration for production
    
    No source maps yet - line numbers don't match up when I try it in prod

diff --git a/renderer/build/.gitignore b/renderer/build/.gitignore
deleted file mode 100644
index 8d8811be..00000000
--- a/renderer/build/.gitignore
+++ /dev/null
@@ -1,5 +0,0 @@
-# Ignore everything
-*
-
-# execpt this file
-!.gitignore
diff --git a/renderer/config/.eslintrc.json b/renderer/config/.eslintrc.json
index 34153e2b..45708d61 100644
--- a/renderer/config/.eslintrc.json
+++ b/renderer/config/.eslintrc.json
@@ -3,4 +3,4 @@
         "node": true
     },
     "extends": "eslint:recommended"
-}
\ No newline at end of file
+}
diff --git a/renderer/config/partials/cleanBuild.js b/renderer/config/partials/cleanBuild.js
new file mode 100644
index 00000000..c21c4f35
--- /dev/null
+++ b/renderer/config/partials/cleanBuild.js
@@ -0,0 +1,18 @@
+'use strict';
+
+var partial = require('webpack-partial').default;
+var CleanWebpackPlugin = require('clean-webpack-plugin');
+
+var ROOT = process.cwd();
+
+module.exports = function(config) {
+    return partial(config, {
+        plugins: [
+            new CleanWebpackPlugin(['build'], {
+                root: ROOT,
+                verbose: true,
+                dry: false
+            })
+        ]
+    });
+};
diff --git a/renderer/config/partials/defineEnv.js b/renderer/config/partials/defineEnv.js
new file mode 100644
index 00000000..89fe2643
--- /dev/null
+++ b/renderer/config/partials/defineEnv.js
@@ -0,0 +1,23 @@
+'use strict';
+
+var partial = require('webpack-partial').default;
+var DefinePlugin = require('webpack').DefinePlugin;
+
+var NODE_ENV = process.env.NODE_ENV || 'development';
+var environment = JSON.stringify(NODE_ENV);
+
+/* eslint-disable no-console */
+console.log('Current environment: ' + environment);
+/* eslint-enable no-console */
+
+module.exports = function (config) {
+    return partial(config, {
+        plugins: [
+            new DefinePlugin({
+                'process.env': {
+                    NODE_ENV: environment
+                }
+            })
+        ]
+    });
+};
diff --git a/renderer/config/partials/entryDev.js b/renderer/config/partials/entryDev.js
index 784dd964..459e7bfc 100644
--- a/renderer/config/partials/entryDev.js
+++ b/renderer/config/partials/entryDev.js
@@ -8,4 +8,4 @@ module.exports = function (config) {
             bundle: './index.js'
         }
     });
-};
\ No newline at end of file
+};
diff --git a/renderer/config/partials/entryHot.js b/renderer/config/partials/entryHot.js
index 86a24750..a405568d 100644
--- a/renderer/config/partials/entryHot.js
+++ b/renderer/config/partials/entryHot.js
@@ -7,8 +7,8 @@ module.exports = function (config) {
         entry: {
             bundle: [
                 'webpack-dev-server/client?http://localhost:8080',
-                './index.js',
-                'webpack/hot/only-dev-server'
+                'webpack/hot/only-dev-server',
+                './index.js'
 
             ]
         }
diff --git a/renderer/config/partials/entryProd.js b/renderer/config/partials/entryProd.js
new file mode 100644
index 00000000..459e7bfc
--- /dev/null
+++ b/renderer/config/partials/entryProd.js
@@ -0,0 +1,11 @@
+'use strict';
+
+var partial = require('webpack-partial').default;
+
+module.exports = function (config) {
+    return partial(config, {
+        entry: {
+            bundle: './index.js'
+        }
+    });
+};
diff --git a/renderer/config/partials/optimizeProd.js b/renderer/config/partials/optimizeProd.js
new file mode 100644
index 00000000..861135b6
--- /dev/null
+++ b/renderer/config/partials/optimizeProd.js
@@ -0,0 +1,20 @@
+'use strict';
+
+var partial = require('webpack-partial').default;
+var UglifyJsPlugin = require('webpack').optimize.UglifyJsPlugin;
+var DedupePlugin = require('webpack').optimize.DedupePlugin;
+var OccurrenceOrderPlugin = require('webpack').optimize.OccurrenceOrderPlugin;
+
+module.exports = function (config) {
+    return partial(config, {
+        plugins: [
+            new DedupePlugin(),
+            new OccurrenceOrderPlugin(true),
+            new UglifyJsPlugin({
+                compress: {
+                    warnings: false
+                }
+            })
+        ]
+    });
+};
diff --git a/renderer/config/partials/outputDev.js b/renderer/config/partials/outputDev.js
index 73f8ca72..e439f587 100644
--- a/renderer/config/partials/outputDev.js
+++ b/renderer/config/partials/outputDev.js
@@ -14,4 +14,4 @@ module.exports = function (config) {
             filename: '[name].js'
         }
     });
-};
\ No newline at end of file
+};
diff --git a/renderer/config/partials/outputProd.js b/renderer/config/partials/outputProd.js
new file mode 100644
index 00000000..4271c88b
--- /dev/null
+++ b/renderer/config/partials/outputProd.js
@@ -0,0 +1,18 @@
+'use strict';
+
+var path = require('path');
+var partial = require('webpack-partial').default;
+
+var ROOT = process.cwd();
+var BUILD = path.join(ROOT, 'build');
+
+module.exports = function (config) {
+    return partial(config, {
+        output: {
+            path: BUILD,
+            publicPath: '/build/',
+            // TODO: Bundle filename should be hashed (#10)
+            filename: '[name].js'
+        }
+    });
+};
diff --git a/renderer/config/webpack.config.dev.js b/renderer/config/webpack.config.dev.js
index 57472816..42df3355 100644
--- a/renderer/config/webpack.config.dev.js
+++ b/renderer/config/webpack.config.dev.js
@@ -4,12 +4,14 @@ var compose = require('ramda').compose;
 
 var baseConfig = require('./webpack.config');
 var babel = require('./partials/babel');
+var defineEnv = require('./partials/defineEnv');
 var entryDev = require('./partials/entryDev')
 var outputDev = require('./partials/outputDev');
 var sourceMapDev = require('./partials/sourceMapDev');
 
 module.exports = compose(
     babel,
+    defineEnv,
     entryDev,
     outputDev,
     sourceMapDev
diff --git a/renderer/config/webpack.config.hot.js b/renderer/config/webpack.config.hot.js
index c2bb7c9c..e065c341 100644
--- a/renderer/config/webpack.config.hot.js
+++ b/renderer/config/webpack.config.hot.js
@@ -4,12 +4,14 @@ var compose = require('ramda').compose;
 
 var baseConfig = require('./webpack.config');
 var babelHot = require('./partials/babelHot');
+var defineEnv = require('./partials/defineEnv');
 var entryHot = require('./partials/entryHot');
 var outputDev = require('./partials/outputDev');
 var sourceMapDev = require('./partials/sourceMapDev');
 
 module.exports = compose(
     babelHot,
+    defineEnv,
     entryHot,
     outputDev,
     sourceMapDev
diff --git a/renderer/config/webpack.config.prod.js b/renderer/config/webpack.config.prod.js
new file mode 100644
index 00000000..dc2e597e
--- /dev/null
+++ b/renderer/config/webpack.config.prod.js
@@ -0,0 +1,21 @@
+'use strict';
+
+var compose = require('ramda').compose;
+
+var baseConfig = require('./webpack.config');
+var babel = require('./partials/babel');
+var cleanBuild = require('./partials/cleanBuild')
+var defineEnv = require('./partials/defineEnv');
+var entryProd = require('./partials/entryProd');
+var optimizeProd = require('./partials/optimizeProd');
+var outputProd = require('./partials/outputProd');
+
+// TODO: support locally served source maps in production (#11)
+module.exports = compose(
+    babel,
+    cleanBuild,
+    defineEnv,
+    entryProd,
+    outputProd,
+    optimizeProd
+)(baseConfig);
diff --git a/renderer/package.json b/renderer/package.json
index 449b61e0..b8eae26b 100644
--- a/renderer/package.json
+++ b/renderer/package.json
@@ -4,9 +4,12 @@
   "description": "render dash components in react",
   "main": "index.js",
   "scripts": {
+    "build-dev": "webpack --config=config/webpack.config.dev.js",
+    "build-prod": "NODE_ENV=production webpack --config=config/webpack.config.prod.js",
     "dev": "webpack-dev-server --config=config/webpack.config.dev.js",
     "hot": "webpack-dev-server --hot --config=config/webpack.config.hot.js",
     "lint": "eslint --quiet --fix --ignore-path ../.gitignore ./*.js ./**/*.js",
+    "server": "serv -p 8080 .",
     "start": "npm run hot",
     "test": "npm run lint"
   },
@@ -20,6 +23,7 @@
   "dependencies": {
     "babel-core": "^6.9.0",
     "babel-loader": "^6.2.4",
+    "clean-webpack-plugin": "^0.1.9",
     "immutable": "^3.8.1",
     "radium": "^0.17.1",
     "ramda": "^0.21.0",
