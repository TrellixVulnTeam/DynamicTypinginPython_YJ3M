commit 6c644fc74004e3ed8ddad91d93b66ceb2f54ddf9
Author: Ryan Marren <rymarr@tuta.io>
Date:   Wed Oct 10 15:20:23 2018 -0400

    Add Global error menu.

diff --git a/src/components/error/GlobalErrorBoundary.react.js b/src/components/error/GlobalErrorBoundary.react.js
index 33b64969..40b17e4b 100644
--- a/src/components/error/GlobalErrorBoundary.react.js
+++ b/src/components/error/GlobalErrorBoundary.react.js
@@ -1,8 +1,9 @@
 import {connect} from 'react-redux';
 import React, { Component } from 'react';
 import PropTypes from 'prop-types';
-import { revert, resolveError } from '../../actions/index';
 import Radium from 'radium';
+import { isEmpty } from 'ramda';
+import { revert, resolveError } from '../../actions';
 import GlobalErrorOverlay from './GlobalErrorOverlay.react';
 import serverErrorCSS from './werkzueg.css';
 
@@ -11,38 +12,45 @@ class UnconnectedGlobalErrorBoundary extends Component {
     super(props);
   }
 
-  resolveError(dispatch) {
-    dispatch(revert());
-    dispatch(resolveError());
+  resolveError(dispatch, type, myId) {
+    if (type === 'backEnd'){
+      dispatch(resolveError({ type }));
+      dispatch(revert());
+    } else {
+      dispatch(resolveError({ myId, type }));
+    }
+  }
+
+  serverError(error) {
+    var newWin = open('error.html','werkzueg','height=1024,width=1280');
+    newWin.document.write(error.backEnd.errorPage);
+    var debugger_css = newWin.document.getElementsByTagName('link')[0];
+    debugger_css.parentNode.removeChild(debugger_css);
+    var style = newWin.document.createElement('style');
+    style.type = 'text/css';
+    style.innerHTML = serverErrorCSS;
+    newWin.document.getElementsByTagName('head')[0].appendChild(style);
+    newWin.document.close();
   }
 
   render() {
     const { error, dispatch } = this.props;
-    if (error.backEnd.errorPage) {
-      return (
-        <div>
-          <img
-            style={{"display": "none"}}
-            src="http://placehold.it/1x1"
-            onLoad={(
-              function() {
-                var newWin = open('error.html','werkzueg','height=1024,width=1280');
-                newWin.document.write(error.backEnd.errorPage);
-                var debugger_css = newWin.document.getElementsByTagName('link')[0];
-                debugger_css.parentNode.removeChild(debugger_css);
-                var style = newWin.document.createElement('style');
-                style.type = 'text/css';
-                style.innerHTML = serverErrorCSS;
-                newWin.document.getElementsByTagName('head')[0].appendChild(style);
-                newWin.document.close();
-              })()} />
-            <GlobalErrorOverlay resolve={() => this.resolveError(dispatch)}>
-              {this.props.children}
-            </GlobalErrorOverlay>
-          </div>
-        )
-    }
-    return this.props.children;
+    return (
+      <div>
+        <img
+          style={{"display": "none"}}
+          src="http://placehold.it/1x1"
+          onLoad={isEmpty(error.backEnd) ? (() => {return;})() :
+                                           (() => this.serverError(error))()} />
+          <GlobalErrorOverlay
+            resolve={(type, myId) => this.resolveError(dispatch, type, myId)}
+            error={error}
+            visible={!(isEmpty(error.backEnd) &&
+                       isEmpty(error.frontEnd))}>
+            {this.props.children}
+          </GlobalErrorOverlay>
+        </div>
+      )
   }
 }
 
diff --git a/src/components/error/GlobalErrorOverlay.react.js b/src/components/error/GlobalErrorOverlay.react.js
index 656f6991..20d248d1 100644
--- a/src/components/error/GlobalErrorOverlay.react.js
+++ b/src/components/error/GlobalErrorOverlay.react.js
@@ -1,39 +1,42 @@
 import React, { Component } from 'react';
 import PropTypes from 'prop-types';
+import { isEmpty } from 'ramda';
 
 
-const styles = {
-  root: {
-    position: 'relative',
-  },
-  overlay: {
-    position: 'relative',
-    backgroundColor: 'rgb(255, 0, 0, .2)',
-    display: 'inline-block',
-    height: '100vh',
-    width: '100vw',
-    padding: 0,
-    margin: -8
-  },
-  childWrapper: {
-    position: 'relative',
-    zIndex: -1
-  }
-}
-
 export default class GlobalErrorOverlay extends Component {
   constructor(props) {
     super(props);
   }
 
   render() {
-    const { resolve } = this.props;
+    const { resolve, visible, error } = this.props;
     return (
-      <div style={styles.root}>
-        <div
-          style={styles.overlay}>
-          <div style={styles.childWrapper}>{this.props.children}</div>
-          <button onClick={resolve}>Resolve Error</button>
+      <div>
+        <div>{this.props.children}</div>
+        <div style={{
+          position: 'absolute',
+          bottom: '10px',
+          right: '10px',
+          height: '300px',
+          width: '400px',
+          overflowY: 'auto',
+          display: visible
+        }}>
+          {isEmpty(error.backEnd) ? null : (
+            <button onClick={() => resolve('backEnd')}>
+              Resolve BackEnd Error
+            </button>
+          )}
+          <ul>
+            {error.frontEnd.map((e) => (<li>
+              <h3>{e.error.name}</h3>
+              <p>{e.error.message}</p>
+              <button onClick={() => resolve('frontEnd', e.myUID)}>
+                Resolve Error
+              </button>
+              {e.error.stack.split('\n').map((line) => (<p>{line}</p>))}
+            </li>))}
+          </ul>
         </div>
       </div>
     )
@@ -42,5 +45,7 @@ export default class GlobalErrorOverlay extends Component {
 
 GlobalErrorOverlay.propTypes = {
     children: PropTypes.object,
-    resolve: PropTypes.func
+    resolve: PropTypes.func,
+    visible: PropTypes.bool,
+    error: PropTypes.object
 }
