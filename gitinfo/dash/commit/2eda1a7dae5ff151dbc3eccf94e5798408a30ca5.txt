commit 2eda1a7dae5ff151dbc3eccf94e5798408a30ca5
Author: chriddyp <chris@plot.ly>
Date:   Tue Jul 18 19:48:01 2017 -0400

    remove support for `/routes`
    
    this was never officially supported and is an antipattern in dash. urls
    and routes can be specified using `dash_core_components.Link` and
    `dash_core_components.Location`

diff --git a/src/APIController.react.js b/src/APIController.react.js
index ae91d7f7..ce8ca342 100644
--- a/src/APIController.react.js
+++ b/src/APIController.react.js
@@ -1,4 +1,3 @@
-/* global window: true */
 import {connect} from 'react-redux'
 import {any, contains, equals, isEmpty, isNil} from 'ramda'
 import React, {Component, PropTypes} from 'react';
@@ -7,10 +6,9 @@ import {
     computeGraphs,
     computePaths,
     hydrateInitialOutputs,
-    loadStateFromRoute,
     setLayout
 } from './actions/index';
-import {getDependencies, getLayout, getRoutes} from './actions/api';
+import {getDependencies, getLayout} from './actions/api';
 import {APP_STATES} from './reducers/constants';
 import AccessDenied from './AccessDenied.react';
 
@@ -21,7 +19,6 @@ class UnconnectedContainer extends Component {
     constructor(props) {
         super(props);
         this.initialization = this.initialization.bind(this);
-        this.handleHistory = this.handleHistory.bind(this);
     }
     componentDidMount() {
         this.initialization(this.props);
@@ -39,8 +36,7 @@ class UnconnectedContainer extends Component {
             graphs,
             layout,
             layoutRequest,
-            paths,
-            routesRequest
+            paths
         } = props;
 
         if (isEmpty(layoutRequest)) {
@@ -59,15 +55,10 @@ class UnconnectedContainer extends Component {
             dispatch(computeGraphs(dependenciesRequest.content));
         }
 
-        if (isEmpty(routesRequest)) {
-            dispatch(getRoutes());
-        }
-
         if (
             // dependenciesRequest and its computed stores
             dependenciesRequest.status === 200 &&
             !isEmpty(graphs) &&
-            routesRequest.status === 200 &&
 
             // LayoutRequest and its computed stores
             layoutRequest.status === 200 &&
@@ -78,15 +69,6 @@ class UnconnectedContainer extends Component {
             appLifecycle === APP_STATES('STARTED')
         ) {
             dispatch(hydrateInitialOutputs());
-            this.handleHistory();
-        }
-    }
-
-    handleHistory() {
-        window.onpopstate = () => {
-            if (this.props.routesRequest.status === 200) {
-                this.props.dispatch(loadStateFromRoute());
-            }
         }
     }
 
@@ -97,14 +79,13 @@ class UnconnectedContainer extends Component {
             dependenciesRequest,
             lastUpdateComponentRequest,
             layoutRequest,
-            layout,
-            routesRequest
+            layout
         } = this.props;
 
         // Auth protected routes
         if (any(equals(true),
                 [dependenciesRequest, lastUpdateComponentRequest,
-                 layoutRequest, routesRequest].map(
+                 layoutRequest].map(
             request => (request.status && request.status === 403))
         )) {
             return (<AccessDenied config={config}/>);
@@ -147,7 +128,6 @@ UnconnectedContainer.propTypes = {
     dispatch: PropTypes.function,
     config: PropTypes.object,
     dependenciesRequest: PropTypes.object,
-    routesRequest: PropTypes.object,
     lastUpdateComponentRequest: PropTypes.objec,
     layoutRequest: PropTypes.object,
     layout: PropTypes.object,
@@ -163,7 +143,6 @@ const Container = connect(
         dependenciesRequest: state.dependenciesRequest,
         lastUpdateComponentRequest: state.lastUpdateComponentRequest,
         layoutRequest: state.layoutRequest,
-        routesRequest: state.routesRequest,
         layout: state.layout,
         graphs: state.graphs,
         paths: state.paths,
diff --git a/src/actions/api.js b/src/actions/api.js
index 38866944..96cfd11e 100644
--- a/src/actions/api.js
+++ b/src/actions/api.js
@@ -100,15 +100,6 @@ export function getDependencies() {
     );
 }
 
-export function getRoutes() {
-    return apiThunk(
-        '_dash-routes',
-        'GET',
-        'routesRequest'
-    );
-}
-
-
 export function login(oauth_token) {
     return apiThunk(
         '_dash-login',
diff --git a/src/actions/index.js b/src/actions/index.js
index 94f3db22..c0ff3f0d 100644
--- a/src/actions/index.js
+++ b/src/actions/index.js
@@ -1,4 +1,4 @@
-/* global fetch:true, window:true, Promise:true, document:true */
+/* global fetch:true, Promise:true, document:true */
 import {
     concat,
     contains,
@@ -7,7 +7,6 @@ import {
     isEmpty,
     keys,
     lensPath,
-    pluck,
     reject,
     sort,
     type,
@@ -30,156 +29,11 @@ export const readConfig = createAction(ACTIONS('READ_CONFIG'));
 
 export function hydrateInitialOutputs() {
     return function (dispatch, getState) {
-        const {config, routesRequest} = getState();
-        const {url_base_pathname} = config;
-        const relativePathname = window.location.pathname.slice(url_base_pathname.length);
-        if (!isEmpty(routesRequest.content) &&
-            contains(
-                relativePathname,
-                pluck('pathname', routesRequest.content)
-            )
-        ) {
-            loadStateFromRoute()(dispatch, getState);
-        } else {
-            triggerDefaultState(dispatch, getState);
-        }
+        triggerDefaultState(dispatch, getState);
         dispatch(setAppLifecycle(APP_STATES('HYDRATED')));
     }
 }
 
-export function loadStateFromRoute() {
-    return (dispatch, getState) => {
-        const {config, routesRequest} = getState();
-        const routes = routesRequest.content;
-        const {url_base_pathname} = config;
-        const relativePathname = window.location.pathname.slice(url_base_pathname.length);
-        const route = routes.find(route => (
-            route.pathname === relativePathname
-        ));
-        const initialState = route.state;
-        loadSavedState(initialState)(dispatch, getState)
-    }
-}
-
-function loadSavedState(initialControls) {
-    return (dispatch, getState) => {
-        function recursivelyTriggerInputs(skipTheseInputs) {
-            const {
-                promises,
-                visibleInputsThatWereTriggered
-            } = loadSavedStateAndTriggerVisibleInputs(
-                dispatch, getState, skipTheseInputs, initialControls
-            );
-            if (promises.length === 0) {
-                return;
-            } else {
-                Promise.all(promises).then(function() {
-                    recursivelyTriggerInputs(union(
-                        skipTheseInputs,
-                        visibleInputsThatWereTriggered
-                    ));
-                });
-            }
-        }
-
-        recursivelyTriggerInputs([]);
-    }
-}
-
-function loadSavedStateAndTriggerVisibleInputs(dispatch, getState, skipTheseInputs, initialControls) {
-    const updatedInputs = [];
-    const {paths} = getState();
-
-    keys(initialControls).forEach((nodeId) => {
-        const [componentId, componentProp] = nodeId.split('.');
-
-        /*
-         * Don't update invisible inputs - they'll become visible
-         * as a result of a separate input on a later cycle
-         */
-        if (!(has(componentId, paths))) {
-            return;
-        }
-
-        // Some input nodes have already been updated in a previous cycle
-        if (contains(nodeId, skipTheseInputs)) {
-            return;
-        }
-
-        const payload = {
-            itempath: paths[componentId],
-            props: {[componentProp]: initialControls[nodeId]}
-        }
-        dispatch(updateProps(payload));
-        updatedInputs.push(nodeId);
-    });
-
-    const {graphs} = getState();
-    const InputGraph = graphs.InputGraph
-    const triggeredInputs = [];
-    const promises = [];
-
-    // Trigger an update for each of the output nodes
-    keys(InputGraph.nodes).forEach(nodeId => {
-        if (InputGraph.dependenciesOf(nodeId).length === 0) {
-            /*
-             * If the output has more than one input, then just
-             * trigger an update on one of the updates.
-             * All of the inputs are already updated, so we don't
-             * need to trigger it more than once.
-             */
-            const anInputNode = InputGraph.dependantsOf(nodeId)[0];
-
-            /*
-             * It's possible that this output has already been updated
-             * by a different output that shared the same input
-             */
-            if (contains(anInputNode, triggeredInputs)) {
-                return;
-            }
-
-            const [anInputId, anInputProp] = anInputNode.split('.');
-
-            /*
-             * Don't update invisible inputs - they'll become visible
-             * as a result of a separate input on a later cycle
-             */
-            if (!(has(anInputId, getState().paths))) {
-                return;
-            }
-
-            // Some input nodes have already been updated in a previous cycle
-            if (contains(anInputNode, skipTheseInputs)) {
-                return;
-            }
-
-            const propLens = lensPath(
-                concat(getState().paths[anInputId],
-                ['props', anInputProp]
-            ));
-            const propValue = view(
-                propLens,
-                getState().layout
-            );
-
-            promises.push(dispatch(notifyObservers({
-                id: anInputId,
-                props: {
-                    [anInputProp]: propValue
-                }
-            })));
-            triggeredInputs.push(anInputNode);
-        }
-    });
-
-    return {
-        promises,
-
-        // TODO - Do I really need to take the union?
-        // Isn't triggeredInputs just a subset of updatedInputs?
-        visibleInputsThatWereTriggered: union(triggeredInputs, updatedInputs)
-    };
-}
 
 function triggerDefaultState(dispatch, getState) {
     const {graphs} = getState();
diff --git a/src/reducers/api.js b/src/reducers/api.js
index fa8546d7..f929c305 100644
--- a/src/reducers/api.js
+++ b/src/reducers/api.js
@@ -31,5 +31,4 @@ export const lastUpdateComponentRequest = createApiReducer(
     'lastUpdateComponentRequest'
 );
 export const layoutRequest = createApiReducer('layoutRequest');
-export const routesRequest = createApiReducer('routesRequest');
 export const loginRequest = createApiReducer('loginRequest');
diff --git a/src/reducers/reducer.js b/src/reducers/reducer.js
index 199e3aa5..1d0d5d22 100644
--- a/src/reducers/reducer.js
+++ b/src/reducers/reducer.js
@@ -1,4 +1,3 @@
-/* global window:true, document:true */
 'use strict'
 import R, {concat, lensPath, view} from 'ramda';
 import {combineReducers} from 'redux';
@@ -10,8 +9,6 @@ import appLifecycle from './appLifecycle';
 import history from './history';
 import * as API from './api';
 import config from './config';
-import {serialize} from '../actions/index';
-import {APP_STATES} from './constants';
 
 const reducer = combineReducers({
     appLifecycle,
@@ -22,7 +19,6 @@ const reducer = combineReducers({
     config,
     dependenciesRequest: API.dependenciesRequest,
     layoutRequest: API.layoutRequest,
-    routesRequest: API.routesRequest,
     lastUpdateComponentRequest: API.lastUpdateComponentRequest,
     loginRequest: API.loginRequest,
     history
@@ -94,55 +90,4 @@ function recordHistory(reducer) {
     }
 }
 
-function updateUrlPath(reducer) {
-    return function(state, action) {
-        const nextState = reducer(state, action);
-        if (nextState.routesRequest.status === 200 &&
-            nextState.appLifecycle == APP_STATES('HYDRATED')
-        ) {
-
-            const serialized = serialize(nextState);
-            const matchingRoute = R.filter(route => R.equals(
-                route.state,
-                R.pick(R.keys(route.state), serialized)
-            ), nextState.routesRequest.content);
-            const {url_base_pathname} = state.config;
-            const relativePathname = window.location.pathname.slice(
-                url_base_pathname.length
-            );
-
-            if (matchingRoute.length === 1 &&
-                relativePathname !== matchingRoute[0].pathname
-            ) {
-                window.history.pushState(
-                    {},
-                    document.title,
-                    `${url_base_pathname}${matchingRoute[0].pathname}`
-                );
-            } else if (matchingRoute.length > 1) {
-                const nMostMatchedKeys = R.reduce(
-                    (n, route) => R.max(n, R.keys(route.state).length),
-                    0, matchingRoute
-                );
-                const bestMatchedRoute = matchingRoute.filter(route =>
-                    R.keys(route.state).length === nMostMatchedKeys
-                );
-                if (bestMatchedRoute.length > 1) {
-                    /* eslint-disable no-console */
-                    console.error('Multiple URLs matched?', matchingRoute);
-                    /* eslint-enable no-console */
-                } else {
-                    window.history.pushState(
-                        {},
-                        document.title,
-                        `${url_base_pathname}${bestMatchedRoute[0].pathname}`
-                    );
-                }
-            }
-
-        }
-        return nextState;
-    }
-}
-
-export default updateUrlPath(recordHistory(reducer));
+export default recordHistory(reducer);
