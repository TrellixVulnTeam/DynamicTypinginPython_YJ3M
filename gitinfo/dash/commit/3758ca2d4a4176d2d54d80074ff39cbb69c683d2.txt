commit 3758ca2d4a4176d2d54d80074ff39cbb69c683d2
Author: Ryan Marren <rymarr@tuta.io>
Date:   Wed Aug 1 23:03:03 2018 -0400

    Error boundary around each component.

diff --git a/src/ComponentErrorBoundary.react.js b/src/ComponentErrorBoundary.react.js
new file mode 100644
index 00000000..b294c6a5
--- /dev/null
+++ b/src/ComponentErrorBoundary.react.js
@@ -0,0 +1,29 @@
+import React, { Component } from 'react';
+import PropTypes from 'prop-types';
+
+export default class ComponentErrorBoundary extends Component {
+  constructor(props) {
+    super(props);
+    this.state = { error: false };
+  }
+
+  componentDidCatch(error, info) {
+    this.setState({ error: true });
+  }
+
+  render() {
+    const { type, id } = this.props;
+    if (this.state.error) {
+      return (<span
+        style={{
+          padding: '10px',
+          backgroundColor: 'red'
+        }}>{"ERROR! In component with id=" + id + " of type " + type}</span>)
+    }
+    return this.props.children;
+  }
+}
+
+ComponentErrorBoundary.propTypes = {
+    children: PropTypes.object
+}
diff --git a/src/TreeContainer.js b/src/TreeContainer.js
index 5250d6c8..099ed12a 100644
--- a/src/TreeContainer.js
+++ b/src/TreeContainer.js
@@ -5,6 +5,7 @@ import React, {Component} from 'react';
 import PropTypes from 'prop-types';
 import Registry from './registry';
 import NotifyObservers from './components/core/NotifyObservers.react';
+import ComponentErrorBoundary from './ComponentErrorBoundary.react';
 
 export default class TreeContainer extends Component {
     shouldComponentUpdate(nextProps) {
@@ -76,9 +77,11 @@ function render(component) {
     );
 
     return (
-        <NotifyObservers id={componentProps.id}>
-            {parent}
-        </NotifyObservers>
+        <ComponentErrorBoundary type={component.type} id={componentProps.id}>
+          <NotifyObservers id={componentProps.id}>
+              {parent}
+          </NotifyObservers>
+        </ComponentErrorBoundary>
     );
 }
 
diff --git a/src/reducers/error.js b/src/reducers/error.js
new file mode 100644
index 00000000..9ed2a5f2
--- /dev/null
+++ b/src/reducers/error.js
@@ -0,0 +1,23 @@
+const initialError = {
+  error: false,
+  errorPage: ""
+};
+
+function error (state = initialError, action) {
+    switch (action.type) {
+
+        case 'ON_ERROR': {
+            return {
+                error: true,
+                errorPage: action.payload
+            };
+        }
+
+        default: {
+            return state;
+        }
+
+    }
+}
+
+export default error;
\ No newline at end of file
