commit ff1cff3e80337e6afcd0d50abba6c947ff98d4bf
Author: Philippe Duval <philippe@plot.ly>
Date:   Tue Jul 10 16:31:27 2018 -0400

    Add test for index customization.

diff --git a/dash/_utils.py b/dash/_utils.py
index 11d1cfd6..55ea16f7 100644
--- a/dash/_utils.py
+++ b/dash/_utils.py
@@ -1,7 +1,7 @@
 def interpolate_str(template, **data):
     s = template
     for k, v in data.items():
-        key = '%({})'.format(k)
+        key = '{' + k + '}'
         s = s.replace(key, v)
     return s
 
diff --git a/dash/dash.py b/dash/dash.py
index 401e1567..89d2cc69 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -22,22 +22,22 @@ from .resources import Scripts, Css
 from .development.base_component import Component
 from . import exceptions
 from ._utils import AttributeDict as _AttributeDict
-from ._utils import interpolate_str
+from ._utils import interpolate_str as _interpolate
 
 _default_index = '''
 <!DOCTYPE html>
 <html>
     <head>
-        %(metas)
-        <title>%(title)</title>
-        %(favicon)
-        %(css)
+        {metas}
+        <title>{title}</title>
+        {favicon}
+        {css}
     </head>
     <body>
-        %(app_entry)
+        {app_entry}
         <footer>
-            %(config)
-            %(scripts)
+            {config}
+            {scripts}
         </footer>
     </body>
 </html>
@@ -59,6 +59,7 @@ class Dash(object):
             self,
             name='__main__',
             server=None,
+            static_folder='static',
             assets_folder=None,
             assets_url_path='/assets',
             include_assets_files=True,
@@ -84,7 +85,7 @@ class Dash(object):
         )
 
         # allow users to supply their own flask server
-        self.server = server or Flask(name)
+        self.server = server or Flask(name, static_folder=static_folder)
 
         self.url_base_pathname = url_base_pathname
         self.config = _AttributeDict({
@@ -309,7 +310,7 @@ class Dash(object):
         ).format(json.dumps(self._config()))
 
     def _generate_meta_html(self):
-        has_charset = any(filter(lambda x: 'charset' in x, self._meta_tags))
+        has_charset = any('charset' in x for x in self._meta_tags)
 
         tags = []
         if not has_charset:
@@ -358,23 +359,25 @@ class Dash(object):
         config = self._generate_config_html()
         metas = self._generate_meta_html()
         title = getattr(self, 'title', 'Dash')
-        favicon = '<link rel="icon" type="image/png" href="{}">'.format(
-            flask.url_for('assets.static', filename=self._favicon))\
-            if self._favicon else ''
+        if self._favicon:
+            favicon = '<link rel="icon" type="image/x-icon" href="{}">'.format(
+                flask.url_for('assets.static', filename=self._favicon))
+        else:
+            favicon = ''
         return self.interpolate_index(
             metas, title, css, config, scripts, _app_entry, favicon)
 
     def interpolate_index(self,
                           metas, title, css, config,
                           scripts, app_entry, favicon):
-        return interpolate_str(self.index_string,
-                               metas=metas,
-                               title=title,
-                               css=css,
-                               config=config,
-                               scripts=scripts,
-                               favicon=favicon,
-                               app_entry=app_entry)
+        return _interpolate(self.index_string,
+                            metas=metas,
+                            title=title,
+                            css=css,
+                            config=config,
+                            scripts=scripts,
+                            favicon=favicon,
+                            app_entry=app_entry)
 
     def dependencies(self):
         return flask.jsonify([
diff --git a/tests/test_integration.py b/tests/test_integration.py
index 0dbb131e..0641e53c 100644
--- a/tests/test_integration.py
+++ b/tests/test_integration.py
@@ -6,6 +6,7 @@ import dash_html_components as html
 import dash_core_components as dcc
 import dash_flow_example
 import dash
+import time
 
 from dash.dependencies import Input, Output
 from dash.exceptions import PreventUpdate
@@ -14,6 +15,13 @@ from .utils import assert_clean_console, invincible, wait_for
 
 
 class Tests(IntegrationTests):
+    def setUp(self):
+        def wait_for_element_by_id(id):
+            wait_for(lambda: None is not invincible(
+                lambda: self.driver.find_element_by_id(id)
+            ))
+            return self.driver.find_element_by_id(id)
+        self.wait_for_element_by_id = wait_for_element_by_id
 
     def test_simple_callback(self):
         app = dash.Dash(__name__)
@@ -285,3 +293,54 @@ class Tests(IntegrationTests):
             content = meta_tag.get_attribute('content')
             self.assertEqual(name, meta_info['name'])
             self.assertEqual(content, meta_info['content'])
+
+    def test_index_customization(self):
+        app = dash.Dash()
+
+        app.index_string = '''
+        <!DOCTYPE html>
+        <html>
+            <head>
+                {metas}
+                <title>{title}</title>
+                {favicon}
+                {css}
+            </head>
+            <body>
+                <div id="custom-header">My custom header</div>
+                <div id="add"></div>
+                {app_entry}
+                <footer>
+                    {config}
+                    {scripts}
+                </footer>
+                <div id="custom-footer">My custom footer</div>
+                <script>
+                // Test the formatting doesn't mess up script tags.
+                var elem = document.getElementById('add');
+                if (!elem) {
+                    throw Error('could not find container to add');
+                }
+                elem.innerHTML = 'Got added';
+                </script>
+            </body>
+        </html>
+        '''
+
+        app.layout = html.Div('Dash app', id='app')
+
+        self.startServer(app)
+
+        time.sleep(0.5)
+
+        header = self.wait_for_element_by_id('custom-header')
+        footer = self.wait_for_element_by_id('custom-footer')
+
+        self.assertEqual('My custom header', header.text)
+        self.assertEqual('My custom footer', footer.text)
+
+        add = self.wait_for_element_by_id('add')
+
+        self.assertEqual('Got added', add.text)
+
+        self.percy_snapshot('custom-index')
