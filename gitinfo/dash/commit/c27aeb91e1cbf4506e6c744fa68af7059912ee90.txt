commit c27aeb91e1cbf4506e6c744fa68af7059912ee90
Author: byron <byron@plot.ly>
Date:   Mon Apr 15 10:42:18 2019 -0400

    :twisted_rightwards_arrows: fix merge conflict

diff --git a/package.json b/package.json
index c62e918f..e73a043d 100644
--- a/package.json
+++ b/package.json
@@ -45,6 +45,7 @@
     "redux-actions": "^0.9.1",
     "redux-thunk": "^2.0.1",
     "uniqid": "^5.0.3",
+    "viz.js": "1.8.0",
     "webpack": "^4.20.2",
     "webpack-cli": "^3.1.2",
     "webpack-partial": "^1.2.0",
diff --git a/src/TreeContainer.js b/src/TreeContainer.js
index d975a461..a24e9194 100644
--- a/src/TreeContainer.js
+++ b/src/TreeContainer.js
@@ -7,6 +7,7 @@ import {
     contains,
     filter,
     forEach,
+    has,
     isEmpty,
     isNil,
     keysIn,
@@ -25,6 +26,29 @@ import { assertPropTypes } from 'check-prop-types';
 const SIMPLE_COMPONENT_TYPES = ['String', 'Number', 'Null', 'Boolean'];
 const isSimpleComponent = component => contains(type(component), SIMPLE_COMPONENT_TYPES)
 
+function validateComponent(componentDefinition) {
+    if (type(componentDefinition) === 'Array') {
+        throw new Error(
+            'The children property of a component is a list of lists, instead '+
+            'of just a list. ' +
+            'Check the component that has the following contents, ' +
+            'and remove of the levels of nesting: \n' +
+            JSON.stringify(componentDefinition, null, 2)
+        );
+    }
+    if (type(componentDefinition) === 'Object' &&
+            !(has('namespace', componentDefinition) &&
+              has('type', componentDefinition) &&
+              has('props', componentDefinition))) {
+        throw new Error(
+            'An object was provided as `children` instead of a component, ' +
+            'string, or number (or list of those). ' +
+            'Check the children property that looks something like:\n' +
+            JSON.stringify(componentDefinition, null, 2)
+        );
+    }
+}
+
 const createContainer = component => isSimpleComponent(component) ?
     component :
     (<AugmentedTreeContainer
@@ -72,21 +96,9 @@ class TreeContainer extends Component {
         if (isSimpleComponent(_dashprivate_layout)) {
             return _dashprivate_layout;
         }
+        validateComponent(_dashprivate_layout);
 
-        if (!_dashprivate_layout.type) {
-            /* eslint-disable no-console */
-            console.error(type(_dashprivate_layout), _dashprivate_layout);
-            /* eslint-enable no-console */
-            throw new Error('component.type is undefined');
-        }
-        if (!_dashprivate_layout.namespace) {
-            /* eslint-disable no-console */
-            console.error(type(_dashprivate_layout), _dashprivate_layout);
-            /* eslint-enable no-console */
-            throw new Error('component.namespace is undefined');
-        }
-
-        const element = Registry.resolve(_dashprivate_layout.type, _dashprivate_layout.namespace);
+        const element = Registry.resolve(_dashprivate_layout);
 
         const layout = omit(['children'], _dashprivate_layout.props);
 
@@ -178,7 +190,8 @@ TreeContainer.propTypes = {
 };
 
 function isLoadingComponent(layout) {
-    return Registry.resolve(layout.type, layout.namespace)._dashprivate_isLoadingComponent;
+    validateComponent(layout);
+    return Registry.resolve(layout)._dashprivate_isLoadingComponent;
 }
 
 function getNestedIds(layout) {
diff --git a/src/actions/index.js b/src/actions/index.js
index 60162d4f..c59acc26 100644
--- a/src/actions/index.js
+++ b/src/actions/index.js
@@ -911,9 +911,13 @@ function updateOutput(
                     onError({
                         type: 'backEnd',
                         error: {
+<<<<<<< HEAD
                             message: `Callback Error - updating: [${
                                 payload.output
                             }]`,
+=======
+                            message: `Callback error updating ${payload.output}`,
+>>>>>>> 119cfc612c6db4fb16697bacad48e2c57d4d8d1c
                             html: text,
                         },
                     })
diff --git a/src/components/error/CallbackGraph/CallbackGraphContainer.css b/src/components/error/CallbackGraph/CallbackGraphContainer.css
new file mode 100644
index 00000000..cb616f83
--- /dev/null
+++ b/src/components/error/CallbackGraph/CallbackGraphContainer.css
@@ -0,0 +1,8 @@
+.dash-callback-dag--container {
+    position: absolute;
+    bottom: 110px;
+    right: 110px;
+    max-width: 80vw;
+    max-height: 80vh;
+    overflow: scroll;
+}
diff --git a/src/components/error/CallbackGraph/CallbackGraphContainer.react.js b/src/components/error/CallbackGraph/CallbackGraphContainer.react.js
new file mode 100644
index 00000000..f2a0dacd
--- /dev/null
+++ b/src/components/error/CallbackGraph/CallbackGraphContainer.react.js
@@ -0,0 +1,73 @@
+import React, {Component} from 'react';
+import './CallbackGraphContainer.css';
+
+import viz from 'viz.js';
+
+import PropTypes from 'prop-types';
+
+class CallbackGraphContainer extends Component {
+    constructor(props) {
+        super(props);
+    }
+    render() {
+        const {dependenciesRequest} = this.props;
+        const elements = {};
+        const callbacks = [];
+        const links = dependenciesRequest.content.map(({inputs, output}, i) => {
+            callbacks.push(`cb${i};`);
+            function recordAndReturn([id, property]) {
+                elements[id] = elements[id] || {};
+                elements[id][property] = true;
+                return `"${id}.${property}"`;
+            }
+            const out_nodes = output
+                .replace(/^\.\./, '')
+                .replace(/\.\.$/, '')
+                .split('...')
+                .map(o => recordAndReturn(o.split('.')))
+                .join(', ');
+            const in_nodes = inputs
+                .map(({id, property}) => recordAndReturn([id, property]))
+                .join(', ');
+            return `{${in_nodes}} -> cb${i} -> {${out_nodes}};`;
+        });
+
+        const dot = `digraph G {
+            overlap = false; fontname="Arial"; fontcolor="#333333";
+            edge [color="#888888"];
+            node [shape=box, fontname="Arial", style=filled, color="#109DFF", fontcolor=white];
+            graph [penwidth=0];
+            subgraph callbacks {
+                node [shape=circle, width=0.3, label="", color="#00CC96"];
+                ${callbacks.join('\n')} }
+
+            ${Object.entries(elements)
+                .map(
+                    ([id, props], i) => `
+                subgraph cluster_${i} {
+                    bgcolor="#B9C2CE";
+                    ${Object.keys(props)
+                        .map(p => `"${id}.${p}" [label="${p}"];`)
+                        .join('\n')}
+                    label = "${id}"; }`
+                )
+                .join('\n')}
+
+            ${links.join('\n')} }`;
+
+        return (
+            <div
+                className="dash-callback-dag--container"
+                dangerouslySetInnerHTML={{
+                    __html: viz(dot, {format: 'svg'}),
+                }}
+            />
+        );
+    }
+}
+
+CallbackGraphContainer.propTypes = {
+    dependenciesRequest: PropTypes.object,
+};
+
+export {CallbackGraphContainer};
diff --git a/src/components/error/FrontEnd/FrontEndError.css b/src/components/error/FrontEnd/FrontEndError.css
index e79a8398..699514be 100644
--- a/src/components/error/FrontEnd/FrontEndError.css
+++ b/src/components/error/FrontEnd/FrontEndError.css
@@ -84,9 +84,9 @@
 
     background-color: white;
     border: 2px solid #dfe8f3;
-    border-radius: 0px 0px 4px 4px;
     color: #506784;
     overflow: scroll;
+    white-space: pre-wrap;
 }
 
 .dash-fe-error__curved {
diff --git a/src/components/error/GlobalErrorContainer.react.js b/src/components/error/GlobalErrorContainer.react.js
index f7d38eee..da8415e7 100644
--- a/src/components/error/GlobalErrorContainer.react.js
+++ b/src/components/error/GlobalErrorContainer.react.js
@@ -20,11 +20,12 @@ class UnconnectedGlobalErrorContainer extends Component {
     }
 
     render() {
-        const {error, dispatch} = this.props;
+        const {error, dispatch, dependenciesRequest} = this.props;
         return (
             <div id="_dash-global-error-container">
                 <DebugMenu
                     error={error}
+                    dependenciesRequest={dependenciesRequest}
                     dispatch={dispatch}
                     resolveError={this.resolveError}
                 >
@@ -38,12 +39,14 @@ class UnconnectedGlobalErrorContainer extends Component {
 UnconnectedGlobalErrorContainer.propTypes = {
     children: PropTypes.object,
     error: PropTypes.object,
+    dependenciesRequest: PropTypes.object,
     dispatch: PropTypes.func,
 };
 
 const GlobalErrorContainer = connect(
     state => ({
         error: state.error,
+        dependenciesRequest: state.dependenciesRequest,
     }),
     dispatch => ({dispatch})
 )(Radium(UnconnectedGlobalErrorContainer));
diff --git a/src/components/error/GlobalErrorOverlay.react.js b/src/components/error/GlobalErrorOverlay.react.js
index b339a5b2..a56e47e0 100644
--- a/src/components/error/GlobalErrorOverlay.react.js
+++ b/src/components/error/GlobalErrorOverlay.react.js
@@ -1,5 +1,6 @@
 import React, {Component} from 'react';
 import PropTypes from 'prop-types';
+import {concat} from 'ramda';
 
 import './GlobalErrorOverlay.css';
 import {FrontEndErrorContainer} from './FrontEnd/FrontEndErrorContainer.react';
@@ -14,14 +15,10 @@ export default class GlobalErrorOverlay extends Component {
 
         let frontEndErrors;
         if (toastsEnabled) {
-            let errors = [];
-            if (error.frontEnd.length) {
-                errors = error.frontEnd;
-            }
-
-            error.backEnd.forEach(backEndError => {
-                errors.push(backEndError);
-            });
+            const errors = concat(
+                error.frontEnd,
+                error.backEnd
+            );
 
             frontEndErrors = (
                 <FrontEndErrorContainer errors={errors} resolve={resolve} />
diff --git a/src/components/error/menu/DebugMenu.react.js b/src/components/error/menu/DebugMenu.react.js
index eda8c131..7cd92429 100644
--- a/src/components/error/menu/DebugMenu.react.js
+++ b/src/components/error/menu/DebugMenu.react.js
@@ -10,6 +10,7 @@ import GraphIcon from '../icons/GraphIcon.svg';
 import PropTypes from 'prop-types';
 import {DebugAlertContainer} from './DebugAlertContainer.react';
 import GlobalErrorOverlay from '../GlobalErrorOverlay.react';
+import {CallbackGraphContainer} from '../CallbackGraph/CallbackGraphContainer.react';
 
 class DebugMenu extends Component {
     constructor(props) {
@@ -18,12 +19,18 @@ class DebugMenu extends Component {
         this.state = {
             opened: false,
             alertsOpened: false,
+            callbackGraphOpened: false,
             toastsEnabled: true,
         };
     }
     render() {
-        const {opened, alertsOpened, toastsEnabled} = this.state;
-        const {error, resolveError, dispatch} = this.props;
+        const {
+            opened,
+            alertsOpened,
+            toastsEnabled,
+            callbackGraphOpened,
+        } = this.state;
+        const {error, resolveError, dispatch, dependenciesRequest} = this.props;
 
         const menuClasses = opened
             ? 'dash-debug-menu dash-debug-menu--opened'
@@ -31,6 +38,11 @@ class DebugMenu extends Component {
 
         const menuContent = opened ? (
             <div className="dash-debug-menu__content">
+                {callbackGraphOpened ? (
+                    <CallbackGraphContainer
+                        dependenciesRequest={dependenciesRequest}
+                    />
+                ) : null}
                 {error.frontEnd.length > 0 || error.backEnd.length > 0 ? (
                     <div className="dash-debug-menu__button-container">
                         <DebugAlertContainer
@@ -43,7 +55,14 @@ class DebugMenu extends Component {
                     </div>
                 ) : null}
                 <div className="dash-debug-menu__button-container">
-                    <div className="dash-debug-menu__button">
+                    <div
+                        className="dash-debug-menu__button"
+                        onClick={() =>
+                            this.setState({
+                                callbackGraphOpened: !callbackGraphOpened,
+                            })
+                        }
+                    >
                         <GraphIcon className="dash-debug-menu__icon dash-debug-menu__icon--graph" />
                     </div>
                     <label className="dash-debug-menu__button-label">
@@ -125,6 +144,7 @@ class DebugMenu extends Component {
 DebugMenu.propTypes = {
     children: PropTypes.object,
     error: PropTypes.object,
+    dependenciesRequest: PropTypes.object,
     resolveError: PropTypes.function,
     dispatch: PropTypes.function,
 };
diff --git a/src/registry.js b/src/registry.js
index d3b96b6b..435e3921 100644
--- a/src/registry.js
+++ b/src/registry.js
@@ -1,16 +1,17 @@
 'use strict';
 
 export default {
-    resolve: (componentName, namespace) => {
+    resolve: (component) => {
+        const {type, namespace} = component;
+
         const ns = window[namespace]; /* global window: true */
 
         if (ns) {
-            if (ns[componentName]) {
-                return ns[componentName];
+            if (ns[type]) {
+                return ns[type];
             }
 
-            throw new Error(`Component ${componentName} not found in
-                ${namespace}`);
+            throw new Error(`Component ${type} not found in ${namespace}`);
         }
 
         throw new Error(`${namespace} was not found.`);
