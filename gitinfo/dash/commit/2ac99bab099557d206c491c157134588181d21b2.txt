commit 2ac99bab099557d206c491c157134588181d21b2
Author: Chris P <chris@plot.ly>
Date:   Tue Apr 16 22:29:07 2019 -0400

    support `exact` just like `shape`

diff --git a/dash/development/_py_components_generation.py b/dash/development/_py_components_generation.py
index 61a183e7..6a1c6630 100644
--- a/dash/development/_py_components_generation.py
+++ b/dash/development/_py_components_generation.py
@@ -445,6 +445,22 @@ def create_prop_docstring(prop_name, type_object, required, description,
 
 def map_js_to_py_types_prop_types(type_object):
     """Mapping from the PropTypes js type object to the Python type"""
+
+    shape_or_exact = lambda: 'dict containing keys {}.\n{}'.format(
+        ', '.join(
+            "'{}'".format(t)
+            for t in list(type_object['value'].keys())),
+        'Those keys have the following types:\n{}'.format(
+            '\n'.join(
+                create_prop_docstring(
+                    prop_name=prop_name,
+                    type_object=prop,
+                    required=prop['required'],
+                    description=prop.get('description', ''),
+                    indent_num=1
+                ) for prop_name, prop in
+                list(type_object['value'].items()))))
+
     return dict(
         array=lambda: 'list',
         bool=lambda: 'boolean',
@@ -483,25 +499,15 @@ def map_js_to_py_types_prop_types(type_object):
                 js_to_py_type(type_object['value'])),
 
         # React's PropTypes.shape
-        shape=lambda: 'dict containing keys {}.\n{}'.format(
-            ', '.join(
-                "'{}'".format(t)
-                for t in list(type_object['value'].keys())),
-            'Those keys have the following types:\n{}'.format(
-                '\n'.join(
-                    create_prop_docstring(
-                        prop_name=prop_name,
-                        type_object=prop,
-                        required=prop['required'],
-                        description=prop.get('description', ''),
-                        indent_num=1
-                    ) for prop_name, prop in
-                    list(type_object['value'].items())))),
+        shape=shape_or_exact,
+        # React's PropTypes.exact
+        exact=shape_or_exact,
     )
 
 
 def map_js_to_py_types_flow_types(type_object):
     """Mapping from the Flow js types to the Python type"""
+
     return dict(
         array=lambda: 'list',
         boolean=lambda: 'boolean',
diff --git a/tests/development/metadata_test.json b/tests/development/metadata_test.json
index faa4bc73..80a381f0 100644
--- a/tests/development/metadata_test.json
+++ b/tests/development/metadata_test.json
@@ -174,6 +174,43 @@
       "required": false,
       "description": ""
     },
+    "optionalObjectWithExactAndNestedDescription": {
+      "type": {
+        "name": "shape",
+        "value": {
+          "color": {
+            "name": "string",
+            "required": false
+          },
+          "fontSize": {
+            "name": "number",
+            "required": false
+          },
+          "figure": {
+            "name": "shape",
+            "value": {
+              "data": {
+                "name": "arrayOf",
+                "value": {
+                  "name": "object"
+                },
+                "description": "data is a collection of traces",
+                "required": false
+              },
+              "layout": {
+                "name": "object",
+                "description": "layout describes the rest of the figure",
+                "required": false
+              }
+            },
+            "description": "Figure is a plotly graph object",
+            "required": false
+          }
+        }
+      },
+      "required": false,
+      "description": ""
+    },
     "optionalAny": {
       "type": {
         "name": "any"
diff --git a/tests/development/metadata_test.py b/tests/development/metadata_test.py
index c1a580fa..23574859 100644
--- a/tests/development/metadata_test.py
+++ b/tests/development/metadata_test.py
@@ -22,6 +22,14 @@ Keyword arguments:
 - optionalArrayOf (list; optional)
 - optionalObjectOf (dict with strings as keys and values of type number; optional)
 - optionalObjectWithShapeAndNestedDescription (optional): . optionalObjectWithShapeAndNestedDescription has the following type: dict containing keys 'color', 'fontSize', 'figure'.
+Those keys have the following types:
+  - color (string; optional)
+  - fontSize (number; optional)
+  - figure (optional): Figure is a plotly graph object. figure has the following type: dict containing keys 'data', 'layout'.
+Those keys have the following types:
+  - data (list; optional): data is a collection of traces
+  - layout (dict; optional): layout describes the rest of the figure
+- optionalObjectWithExactAndNestedDescription (optional): . optionalObjectWithShapeAndNestedDescription has the following type: dict containing keys 'color', 'fontSize', 'figure'.
 Those keys have the following types:
   - color (string; optional)
   - fontSize (number; optional)
diff --git a/tests/development/test_base_component.py b/tests/development/test_base_component.py
index a19768a3..0456bfd4 100644
--- a/tests/development/test_base_component.py
+++ b/tests/development/test_base_component.py
@@ -807,6 +807,19 @@ class TestMetaDataConversions(unittest.TestCase):
 
             ])],
 
+            ['optionalObjectWithExactAndNestedDescription', '\n'.join([
+
+                "dict containing keys 'color', 'fontSize', 'figure'.",
+                "Those keys have the following types:",
+                "  - color (string; optional)",
+                "  - fontSize (number; optional)",
+                "  - figure (optional): Figure is a plotly graph object. figure has the following type: dict containing keys 'data', 'layout'.",  # noqa: E501
+                "Those keys have the following types:",
+                "  - data (list; optional): data is a collection of traces",
+                "  - layout (dict; optional): layout describes the rest of the figure"  # noqa: E501
+
+            ])],
+
             ['optionalAny', 'boolean | number | string | dict | list'],
 
             ['customProp', ''],
