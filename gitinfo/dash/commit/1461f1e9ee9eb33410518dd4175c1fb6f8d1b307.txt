commit 1461f1e9ee9eb33410518dd4175c1fb6f8d1b307
Author: alexcjohnson <alex@plot.ly>
Date:   Tue Jul 9 13:04:25 2019 -0400

    simplify apiThunk usage

diff --git a/dash-renderer/src/APIController.react.js b/dash-renderer/src/APIController.react.js
index 43fba786..d95b1301 100644
--- a/dash-renderer/src/APIController.react.js
+++ b/dash-renderer/src/APIController.react.js
@@ -10,7 +10,7 @@ import {
     hydrateInitialOutputs,
     setLayout,
 } from './actions/index';
-import {getDependencies, getLayout} from './actions/api';
+import apiThunk from './actions/api';
 import {getAppState} from './reducers/constants';
 import {STATUS} from './constants/constants';
 
@@ -45,7 +45,7 @@ class UnconnectedContainer extends Component {
         } = props;
 
         if (isEmpty(layoutRequest)) {
-            dispatch(getLayout());
+            dispatch(apiThunk('_dash-layout', 'GET', 'layoutRequest'));
         } else if (layoutRequest.status === STATUS.OK) {
             if (isEmpty(layout)) {
                 dispatch(setLayout(layoutRequest.content));
@@ -55,7 +55,9 @@ class UnconnectedContainer extends Component {
         }
 
         if (isEmpty(dependenciesRequest)) {
-            dispatch(getDependencies());
+            dispatch(
+                apiThunk('_dash-dependencies', 'GET', 'dependenciesRequest')
+            );
         } else if (
             dependenciesRequest.status === STATUS.OK &&
             isEmpty(graphs)
diff --git a/dash-renderer/src/actions/api.js b/dash-renderer/src/actions/api.js
index 8a0c8166..06133b12 100644
--- a/dash-renderer/src/actions/api.js
+++ b/dash-renderer/src/actions/api.js
@@ -34,7 +34,14 @@ function POST(path, body = {}, headers = {}) {
 
 const request = {GET, POST};
 
-function apiThunk(endpoint, method, store, id, body, headers = {}) {
+export default function apiThunk(
+    endpoint,
+    method,
+    store,
+    id,
+    body,
+    headers = {}
+) {
     return (dispatch, getState) => {
         const config = getState().config;
 
@@ -81,15 +88,3 @@ function apiThunk(endpoint, method, store, id, body, headers = {}) {
             });
     };
 }
-
-export function getLayout() {
-    return apiThunk('_dash-layout', 'GET', 'layoutRequest');
-}
-
-export function getDependencies() {
-    return apiThunk('_dash-dependencies', 'GET', 'dependenciesRequest');
-}
-
-export function getReloadHash() {
-    return apiThunk('_reload-hash', 'GET', 'reloadRequest');
-}
diff --git a/dash-renderer/src/components/core/Reloader.react.js b/dash-renderer/src/components/core/Reloader.react.js
index d6fdfdb9..82c32019 100644
--- a/dash-renderer/src/components/core/Reloader.react.js
+++ b/dash-renderer/src/components/core/Reloader.react.js
@@ -13,7 +13,7 @@ import {
 import React from 'react';
 import PropTypes from 'prop-types';
 import {connect} from 'react-redux';
-import {getReloadHash} from '../../actions/api';
+import apiThunk from '../../actions/api';
 
 class Reloader extends React.Component {
     constructor(props) {
@@ -178,7 +178,7 @@ class Reloader extends React.Component {
                 // Prevent requests from piling up - reloading can take
                 // many seconds (10-30) and the interval is 3s by default
                 if (this.props.reloadRequest.status !== 'loading') {
-                    dispatch(getReloadHash());
+                    dispatch(apiThunk('_reload-hash', 'GET', 'reloadRequest'));
                 }
             }, interval);
             this.setState({intervalId});
