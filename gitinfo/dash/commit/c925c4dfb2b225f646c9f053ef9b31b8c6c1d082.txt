commit c925c4dfb2b225f646c9f053ef9b31b8c6c1d082
Author: chriddyp <chris@plot.ly>
Date:   Mon Jun 19 11:05:48 2017 -0400

    Use templated `config` instead of API request
    
    this allows us to prepend a relative URL in front of API requests

diff --git a/src/APIController.react.js b/src/APIController.react.js
index cae6af43..ae91d7f7 100644
--- a/src/APIController.react.js
+++ b/src/APIController.react.js
@@ -93,7 +93,7 @@ class UnconnectedContainer extends Component {
     render () {
         const {
             appLifecycle,
-            configRequest,
+            config,
             dependenciesRequest,
             lastUpdateComponentRequest,
             layoutRequest,
@@ -107,7 +107,7 @@ class UnconnectedContainer extends Component {
                  layoutRequest, routesRequest].map(
             request => (request.status && request.status === 403))
         )) {
-            return (<AccessDenied configRequest={configRequest}/>);
+            return (<AccessDenied config={config}/>);
         }
 
 
@@ -135,7 +135,7 @@ class UnconnectedContainer extends Component {
         }
 
         else {
-            return (<div>{'Loading...'}</div>);
+            return (<div className="_dash-loading">{'Loading...'}</div>);
         }
     }
 }
@@ -145,7 +145,7 @@ UnconnectedContainer.propTypes = {
         APP_STATES('HYDRATED')
     ]),
     dispatch: PropTypes.function,
-    configRequest: PropTypes.object,
+    config: PropTypes.object,
     dependenciesRequest: PropTypes.object,
     routesRequest: PropTypes.object,
     lastUpdateComponentRequest: PropTypes.objec,
@@ -159,7 +159,7 @@ const Container = connect(
     // map state to props
     state => ({
         appLifecycle: state.appLifecycle,
-        configRequest: state.configRequest,
+        config: state.config,
         dependenciesRequest: state.dependenciesRequest,
         lastUpdateComponentRequest: state.lastUpdateComponentRequest,
         layoutRequest: state.layoutRequest,
diff --git a/src/AccessDenied.react.js b/src/AccessDenied.react.js
index 7f100149..83345305 100644
--- a/src/AccessDenied.react.js
+++ b/src/AccessDenied.react.js
@@ -5,8 +5,8 @@ import * as styles from './styles/styles.js';
 import * as constants from './constants/constants.js';
 
 function AccessDenied(props) {
-    const {configRequest} = props;
-    const fid = configRequest.content.fid;
+    const {config} = props;
+    const fid = config.fid;
     const owner_username = fid.split(':')[0];
     return (
         <div style={merge(styles.base.html, styles.base.container)}>
@@ -40,6 +40,6 @@ function AccessDenied(props) {
     )
 }
 AccessDenied.propTypes = {
-    configRequest: PropTypes.object
+    config: PropTypes.object
 }
 export default AccessDenied;
diff --git a/src/Authentication.react.js b/src/Authentication.react.js
index 4ebfdbc8..d00759b2 100644
--- a/src/Authentication.react.js
+++ b/src/Authentication.react.js
@@ -2,8 +2,9 @@
 import React, {Component, PropTypes} from 'react';
 import {connect} from 'react-redux'
 import queryString from 'query-string';
-import {getConfig, login} from './actions/api';
-import {contains, isEmpty, merge} from 'ramda'
+import {login} from './actions/api';
+import {readConfig} from './actions/index';
+import {contains, isEmpty, merge, type} from 'ramda'
 import * as styles from './styles/styles.js';
 import {REDIRECT_URI_PATHNAME} from './constants/constants';
 
@@ -45,7 +46,7 @@ class UnconnectedLogin extends Component {
 
     buildOauthUrl() {
         const {oauth_client_id, plotly_domain} = (
-            this.props.configRequest.content
+            this.props.config
         );
         return (
             `${plotly_domain}/o/authorize/?response_type=token&` +
@@ -71,7 +72,7 @@ class UnconnectedLogin extends Component {
     }
 
     render() {
-        const {plotly_domain} = this.props.configRequest.content;
+        const {plotly_domain} = this.props.config;
         return (
             <div style={merge(styles.base.html, styles.base.container)}>
                 <div style={styles.base.h2}>Dash</div>
@@ -104,10 +105,10 @@ class UnconnectedLogin extends Component {
 }
 UnconnectedLogin.propTypes = {
     onClosed: PropTypes.func,
-    configRequest: PropTypes.func
+    config: PropTypes.object
 }
 const Login = connect(
-    state => ({configRequest: state.configRequest})
+    state => ({config: state.config})
 )(UnconnectedLogin);
 
 /**
@@ -205,16 +206,15 @@ class Authentication extends Component {
     }
 
     initialization(props) {
-        const {configRequest, dispatch} = props
-        if (isEmpty(configRequest)) {
-            // TODO - Could do request in parallel
-            dispatch(getConfig());
+        const {config, dispatch} = props;
+        if (type(config) === "Null") {
+            dispatch(readConfig());
         }
     }
 
     render() {
 
-        const {children, configRequest} = this.props;
+        const {children, config} = this.props;
 
         // OAuth redirect
         if (window.location.pathname === REDIRECT_URI_PATHNAME) {
@@ -223,19 +223,13 @@ class Authentication extends Component {
             );
         }
 
-        if (isEmpty(configRequest) || configRequest.status === 'loading') {
+        if (type(config) === "Null") {
 
             return <div>Loading...</div>;
 
         }
 
-        else if (configRequest.status !== 200) {
-
-            return <div>Error loading configuration.</div>
-
-        }
-
-        else if (configRequest.content.fid) {
+        else if (config.fid) {
 
             if (contains('plotly_oauth_token=', document.cookie)) {
 
@@ -268,12 +262,12 @@ class Authentication extends Component {
 
 Authentication.propTypes = {
     children: PropTypes.object,
-    configRequest: PropTypes.object
+    config: PropTypes.object
 }
 
 export default connect(
     state => ({
-        configRequest: state.configRequest,
+        config: state.config,
     }),
     dispatch => ({dispatch})
 )(Authentication);
diff --git a/src/actions/api.js b/src/actions/api.js
index 61fd9d31..ed9869d1 100644
--- a/src/actions/api.js
+++ b/src/actions/api.js
@@ -102,14 +102,6 @@ export function getRoutes() {
 }
 
 
-export function getConfig() {
-    return apiThunk(
-        '/_config',
-        'GET',
-        'configRequest'
-    );
-}
-
 export function login(oauth_token) {
     return apiThunk(
         '/_login',
diff --git a/src/reducers/api.js b/src/reducers/api.js
index 8aee29b1..fa8546d7 100644
--- a/src/reducers/api.js
+++ b/src/reducers/api.js
@@ -26,7 +26,6 @@ function createApiReducer(store) {
     };
 }
 
-export const configRequest = createApiReducer('configRequest');
 export const dependenciesRequest = createApiReducer('dependenciesRequest');
 export const lastUpdateComponentRequest = createApiReducer(
     'lastUpdateComponentRequest'
diff --git a/src/reducers/config.js b/src/reducers/config.js
new file mode 100644
index 00000000..ade426ef
--- /dev/null
+++ b/src/reducers/config.js
@@ -0,0 +1,9 @@
+import {ACTIONS} from '../actions/constants';
+
+export default function config (state = null, action) {
+    if (action.type === ACTIONS('READ_CONFIG')) {
+        return JSON.parse(document.getElementById('_dash-config').textContent);
+    } else {
+        return state;
+    }
+}
diff --git a/src/reducers/reducer.js b/src/reducers/reducer.js
index d15cecdf..ddcea12a 100644
--- a/src/reducers/reducer.js
+++ b/src/reducers/reducer.js
@@ -9,6 +9,7 @@ import requestQueue from './requestQueue';
 import appLifecycle from './appLifecycle';
 import history from './history';
 import * as API from './api';
+import config from './config';
 import {serialize} from '../actions/index';
 import {APP_STATES} from './constants';
 
@@ -18,7 +19,7 @@ const reducer = combineReducers({
     graphs,
     paths,
     requestQueue,
-    configRequest: API.configRequest,
+    config,
     dependenciesRequest: API.dependenciesRequest,
     layoutRequest: API.layoutRequest,
     routesRequest: API.routesRequest,
