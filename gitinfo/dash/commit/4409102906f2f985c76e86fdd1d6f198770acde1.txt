commit 4409102906f2f985c76e86fdd1d6f198770acde1
Author: Ryan Marren <rymarr@tuta.io>
Date:   Tue Aug 7 22:11:19 2018 -0400

    Error component overlay and resolve.

diff --git a/src/ComponentErrorBoundary.react.js b/src/ComponentErrorBoundary.react.js
index 4a1b5cc0..ef0630ff 100644
--- a/src/ComponentErrorBoundary.react.js
+++ b/src/ComponentErrorBoundary.react.js
@@ -1,22 +1,24 @@
+import {connect} from 'react-redux';
 import React, { Component } from 'react';
 import PropTypes from 'prop-types';
+import { undo } from './actions/index';
+import Radium from 'radium';
 
-export default class ComponentErrorBoundary extends Component {
+const defaultError = {
+  hadError: false,
+  error: {},
+  info: {}
+}
+
+class ErrorComponentOverlay extends Component {
   constructor(props) {
     super(props);
-    this.state = { hadError: false, error: {}, info: {} };
+    this.state = {
+      popoverOpen: false
+    }
     this.togglePopOver = this.togglePopOver.bind(this);
   }
 
-  componentDidCatch(error, info) {
-    this.setState({
-      hadError: true,
-      popoverOpen: false,
-      error,
-      info
-    });
-  }
-
   togglePopOver() {
     this.setState({
       popoverOpen: !this.state.popoverOpen
@@ -24,35 +26,89 @@ export default class ComponentErrorBoundary extends Component {
   }
 
   render() {
-    const { type, id } = this.props;
-    if (this.state.hadError) {
-      return (
+    const { oldChildren, error, componentId, componentType, resolve } = this.props;
+    return (
+      <div style={{position: 'relative'}}>
         <div
           onClick={this.togglePopOver}
           style={{
-            padding: '5px',
-            backgroundColor: 'rgb(255, 0, 0, .7)',
+            position: 'relative',
+            padding: '2px',
+            backgroundColor: 'rgb(255, 0, 0, .5)',
             border: '1px solid black',
             borderRadius: '2px',
             display: 'inline-block'
           }}>
-          <p>{"ERROR!"}</p>
+          <div style={{position: 'relative', zIndex: -1}}>{oldChildren}</div>
           <div
             style={this.state.popoverOpen ? {'display': 'inline'} : {'display': 'none'}}
             toggle={this.togglePopOver}
           >
-            <strong>{"Error in " + type + '(id=' + id + ')'}</strong>
-            <p>{this.state.error.name + " -- " + this.state.error.message}</p>
+            <strong>{"Error in " + componentType + '(id=' + componentId + ')'}</strong>
+            <p>{error.name + " -- " + error.message}</p>
+            <button onClick={resolve}>Resolve Error</button>
           </div>
         </div>
+      </div>
+    )
+  }
+}
+
+class UnconnectedComponentErrorBoundary extends Component {
+  constructor(props) {
+    super(props);
+    this.state = {oldChildren: props.children, ...defaultError};
+  }
+
+  componentDidCatch(error, info) {
+    this.setState({
+      hadError: true,
+      error,
+      info
+    });
+  }
+
+  componentDidUpdate(prevProps, prevState) {
+    if (!this.state.hadError &&
+        prevState.oldChildren !== prevProps.children &&
+        prevProps.children !== this.props.children) {
+      this.setState({
+        oldChildren: prevProps.children
+      });
+    }
+  }
+
+  resolveError(dispatch) {
+    dispatch(undo());
+    this.setState(defaultError);
+  }
+
+  render() {
+    const { type, id, dispatch } = this.props;
+    if (this.state.hadError) {
+      return (
+        <ErrorComponentOverlay
+           oldChildren={this.state.oldChildren}
+           error={{id, type, ...this.state.error}}
+           componentId={id}
+           componentType={type}
+           resolve={() => this.resolveError(dispatch)}
+        />
       )
     }
     return this.props.children;
   }
 }
 
-ComponentErrorBoundary.propTypes = {
+UnconnectedComponentErrorBoundary.propTypes = {
     children: PropTypes.object,
     id: PropTypes.string,
     type: PropTypes.string
 }
+
+const ComponentErrorBoundary = connect(
+    state => ({}),
+    dispatch => ({dispatch})
+)(Radium(UnconnectedComponentErrorBoundary));
+
+export default ComponentErrorBoundary;
