commit 36d0c71f30a4aae8028adc87f8a4eaf79bf4d4fd
Author: alexcjohnson <alex@plot.ly>
Date:   Mon Dec 2 15:44:18 2019 -0500

    pull in checkPropTypes

diff --git a/dash-renderer/package-lock.json b/dash-renderer/package-lock.json
index bd22da13..5f8198fe 100644
--- a/dash-renderer/package-lock.json
+++ b/dash-renderer/package-lock.json
@@ -2889,11 +2889,6 @@
       "integrity": "sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA==",
       "dev": true
     },
-    "check-prop-types": {
-      "version": "1.1.2",
-      "resolved": "https://registry.npmjs.org/check-prop-types/-/check-prop-types-1.1.2.tgz",
-      "integrity": "sha512-hGDrZ1yhRgKuP1yzZ5sUX/PPmlKBLOF1GyF0Z008Sienko3BFZmlCXnmq+npRTIL/WlFCUzThyd+F5PQnnT1ug=="
-    },
     "chokidar": {
       "version": "2.1.8",
       "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-2.1.8.tgz",
@@ -11795,16 +11790,6 @@
         }
       }
     },
-    "raw-loader": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/raw-loader/-/raw-loader-3.1.0.tgz",
-      "integrity": "sha512-lzUVMuJ06HF4rYveaz9Tv0WRlUMxJ0Y1hgSkkgg+50iEdaI0TthyEDe08KIHb0XsF6rn8WYTqPCaGTZg3sX+qA==",
-      "dev": true,
-      "requires": {
-        "loader-utils": "^1.1.0",
-        "schema-utils": "^2.0.1"
-      }
-    },
     "rc": {
       "version": "1.2.8",
       "resolved": "https://registry.npmjs.org/rc/-/rc-1.2.8.tgz",
@@ -14606,11 +14591,6 @@
       "integrity": "sha1-sxxa6CVIRKOoKBVBzisEuGWnNP8=",
       "dev": true
     },
-    "uniqid": {
-      "version": "5.1.0",
-      "resolved": "https://registry.npmjs.org/uniqid/-/uniqid-5.1.0.tgz",
-      "integrity": "sha512-iBt38h8uFnbDFrRK4E7vdzjtynBii5aSwGZ27gle7xnbYSIZzJ5x5BqughgUvMNCZ1cMhtnpcF+w7XGbqm6d9Q=="
-    },
     "unique-filename": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/unique-filename/-/unique-filename-1.1.1.tgz",
diff --git a/dash-renderer/package.json b/dash-renderer/package.json
index faf11441..60b65df5 100644
--- a/dash-renderer/package.json
+++ b/dash-renderer/package.json
@@ -23,7 +23,6 @@
     "react": "16.8.6",
     "react-dom": "16.8.6",
     "prop-types": "15.7.2",
-    "check-prop-types": "1.1.2",
     "cookie": "^0.3.1",
     "dependency-graph": "^0.5.0",
     "radium": "^0.22.1",
diff --git a/dash-renderer/src/TreeContainer.js b/dash-renderer/src/TreeContainer.js
index 37e12ed1..8713dc5d 100644
--- a/dash-renderer/src/TreeContainer.js
+++ b/dash-renderer/src/TreeContainer.js
@@ -25,7 +25,7 @@ import {notifyObservers, updateProps} from './actions';
 import isSimpleComponent from './isSimpleComponent';
 import {recordUiEdit} from './persistence';
 import ComponentErrorBoundary from './components/error/ComponentErrorBoundary.react';
-import checkPropTypes from 'check-prop-types';
+import checkPropTypes from './checkPropTypes';
 
 function validateComponent(componentDefinition) {
     if (type(componentDefinition) === 'Array') {
diff --git a/dash-renderer/src/checkPropTypes.js b/dash-renderer/src/checkPropTypes.js
new file mode 100644
index 00000000..df5948c5
--- /dev/null
+++ b/dash-renderer/src/checkPropTypes.js
@@ -0,0 +1,89 @@
+/*
+ * Copied out of prop-types and modified - similar to check-prop-types, but
+ * simplified and tweaked to our needs, also so we don't need a special
+ * transpiling inclusion for this in node_modules - check-prop-types hasn't
+ * been modified in years and yet includes
+ */
+import ReactPropTypesSecret from 'prop-types/lib/ReactPropTypesSecret';
+
+/**
+ * Assert that the values match with the type specs.
+ * Error messages are memorized and will only be shown once.
+ *
+ * @param {object} typeSpecs Map of name to a ReactPropType
+ * @param {object} values Runtime values that need to be type-checked
+ * @param {string} location e.g. "prop", "context", "child context"
+ * @param {string} componentName Name of the component for error messages.
+ * @param {?Function} getStack Returns the component stack.
+ * @return {string} Any error messsage resulting from checking the types
+ */
+export default function checkPropTypes(
+    typeSpecs,
+    values,
+    location,
+    componentName,
+    getStack
+) {
+    const errors = [];
+    for (const typeSpecName in typeSpecs) {
+        if (typeSpecs.hasOwnProperty(typeSpecName)) {
+            let error;
+            // Prop type validation may throw. In case they do, we don't want to
+            // fail the render phase where it didn't fail before. So we log it.
+            // After these have been cleaned up, we'll let them throw.
+            try {
+                // This is intentionally an invariant that gets caught. It's the same
+                // behavior as without this statement except with a better message.
+                if (typeof typeSpecs[typeSpecName] !== 'function') {
+                    error = Error(
+                        (componentName || 'React class') +
+                            ': ' +
+                            location +
+                            ' type `' +
+                            typeSpecName +
+                            '` is invalid; ' +
+                            'it must be a function, usually from the `prop-types` package, but received `' +
+                            typeof typeSpecs[typeSpecName] +
+                            '`.'
+                    );
+                    error.name = 'Invariant Violation';
+                } else {
+                    error = typeSpecs[typeSpecName](
+                        values,
+                        typeSpecName,
+                        componentName,
+                        location,
+                        null,
+                        ReactPropTypesSecret
+                    );
+                }
+            } catch (ex) {
+                error = ex;
+            }
+            if (error && !(error instanceof Error)) {
+                errors.push(
+                    (componentName || 'React class') +
+                        ': type specification of ' +
+                        location +
+                        ' `' +
+                        typeSpecName +
+                        '` is invalid; the type checker ' +
+                        'function must return `null` or an `Error` but returned a ' +
+                        typeof error +
+                        '. ' +
+                        'You may have forgotten to pass an argument to the type checker ' +
+                        'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
+                        'shape all require an argument).'
+                );
+            }
+            if (error instanceof Error) {
+                var stack = (getStack && getStack()) || '';
+
+                errors.push(
+                    'Failed ' + location + ' type: ' + error.message + stack
+                );
+            }
+        }
+    }
+    return errors.join('\n\n');
+}
diff --git a/dash-renderer/webpack.config.js b/dash-renderer/webpack.config.js
index b0e6583e..7df554cd 100644
--- a/dash-renderer/webpack.config.js
+++ b/dash-renderer/webpack.config.js
@@ -10,21 +10,14 @@ const defaults = {
         rules: [
             {
                 test: /\.js$/,
-                exclude: /node_modules\/(?!check-prop-types\/)/,
+                exclude: /node_modules/,
                 use: {
                     loader: 'babel-loader',
                 },
             },
             {
                 test: /\.css$/,
-                use: [
-                    {
-                        loader: 'style-loader',
-                    },
-                    {
-                        loader: 'css-loader',
-                    },
-                ],
+                use: ['style-loader', 'css-loader'],
             },
             {
                 test: /\.svg$/,
