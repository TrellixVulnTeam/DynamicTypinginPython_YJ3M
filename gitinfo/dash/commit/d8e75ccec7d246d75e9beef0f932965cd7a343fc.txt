commit d8e75ccec7d246d75e9beef0f932965cd7a343fc
Author: Philippe Duval <philippe@plot.ly>
Date:   Thu Aug 9 17:08:53 2018 -0400

    Add reloader.

diff --git a/src/AppContainer.react.js b/src/AppContainer.react.js
index 12f04483..786a6fad 100644
--- a/src/AppContainer.react.js
+++ b/src/AppContainer.react.js
@@ -5,6 +5,8 @@ import APIController from './APIController.react';
 import DocumentTitle from './components/core/DocumentTitle.react';
 import Loading from './components/core/Loading.react';
 import Toolbar from './components/core/Toolbar.react';
+import Reloader from './components/core/Reloader.react';
+
 
 function UnconnectedAppContainer() {
     return (
@@ -14,6 +16,7 @@ function UnconnectedAppContainer() {
                 <APIController />
                 <DocumentTitle />
                 <Loading />
+                <Reloader />
             </div>
         </Authentication>
     );
diff --git a/src/actions/api.js b/src/actions/api.js
index e7eb00c1..57b6619a 100644
--- a/src/actions/api.js
+++ b/src/actions/api.js
@@ -96,3 +96,11 @@ export function login(oauth_token) {
         Authorization: `Bearer ${oauth_token}`,
     });
 }
+
+export function getReloadHash() {
+    return apiThunk(
+        '_reload-hash',
+        'GET',
+        'reloadHash'
+    )
+}
\ No newline at end of file
diff --git a/src/components/core/Reloader.react.js b/src/components/core/Reloader.react.js
new file mode 100644
index 00000000..0011cb7e
--- /dev/null
+++ b/src/components/core/Reloader.react.js
@@ -0,0 +1,56 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import {connect} from 'react-redux'
+import {getReloadHash} from "../../actions/api";
+
+class Reloader extends React.Component {
+    constructor(props) {
+        super(props);
+        this.state = {
+            hash: props.config.reload_hash
+        }
+    }
+
+    componentDidUpdate() {
+        const { reloadHash } = this.props;
+        if (reloadHash.status === 200) {
+            if (reloadHash.content.reloadHash !== this.state.hash) {
+                // TODO add soft & hard reload option
+                // soft -> rebuild the app layout (python reloaded)
+                // hard -> reload the window (css/js reloaded)
+                // eslint-disable-next-line no-undef
+                window.top.location.reload();
+            }
+        }
+    }
+
+    componentDidMount() {
+        const { dispatch } = this.props;
+        // TODO add interval config
+        setInterval(() => {
+            dispatch(getReloadHash())
+        }, 1000);
+    }
+
+    render() {
+        return null;
+    }
+}
+
+Reloader.defaultProps = {};
+
+Reloader.propTypes = {
+    id: PropTypes.string,
+    config: PropTypes.object,
+    reloadHash: PropTypes.object,
+    dispatch: PropTypes.func
+};
+
+export default connect(
+    state => ({
+        config: state.config,
+        reloadHash: state.reloadHash
+    }),
+    dispatch => ({dispatch})
+)(Reloader);
+ 
\ No newline at end of file
diff --git a/src/reducers/api.js b/src/reducers/api.js
index d4bb54bb..0f7efc55 100644
--- a/src/reducers/api.js
+++ b/src/reducers/api.js
@@ -37,3 +37,4 @@ function createApiReducer(store) {
 export const dependenciesRequest = createApiReducer('dependenciesRequest');
 export const layoutRequest = createApiReducer('layoutRequest');
 export const loginRequest = createApiReducer('loginRequest');
+export const reloadHash = createApiReducer('reloadHash');
diff --git a/src/reducers/reducer.js b/src/reducers/reducer.js
index a77538af..cace7e2d 100644
--- a/src/reducers/reducer.js
+++ b/src/reducers/reducer.js
@@ -20,6 +20,7 @@ const reducer = combineReducers({
     dependenciesRequest: API.dependenciesRequest,
     layoutRequest: API.layoutRequest,
     loginRequest: API.loginRequest,
+    reloadHash: API.reloadHash,
     history,
 });
 
