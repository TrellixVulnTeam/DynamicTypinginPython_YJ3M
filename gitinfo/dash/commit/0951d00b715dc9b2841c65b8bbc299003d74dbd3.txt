commit 0951d00b715dc9b2841c65b8bbc299003d74dbd3
Author: Ryan Marren <rymarr@tuta.io>
Date:   Thu Oct 18 15:05:26 2018 -0400

    Allow also `collections.MutableMapping` for backward compatability.

diff --git a/dash/dash.py b/dash/dash.py
index ead8ef35..96f1c45b 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -775,9 +775,9 @@ class Dash(object):
                         )
 
                     # Children that are not of type Component or
-                    # (list, tuple) not returned by traverse
+                    # (list, tuple, collections.MutableSequence) not returned by traverse
                     child = getattr(j, 'children', None)
-                    if not isinstance(child, (list, tuple)):
+                    if not isinstance(child, (list, tuple, collections.MutableSequence)):
                         if child and not _value_is_valid(child):
                             _raise_invalid(
                                 bad_val=child,
@@ -789,7 +789,7 @@ class Dash(object):
 
                 # Also check the child of val, as it will not be returned
                 child = getattr(val, 'children', None)
-                if not isinstance(child, (list, tuple)):
+                if not isinstance(child, (list, tuple, collections.MutableSequence)):
                     if child and not _value_is_valid(child):
                         _raise_invalid(
                             bad_val=child,
diff --git a/dash/development/base_component.py b/dash/development/base_component.py
index ac768c14..24cfc675 100644
--- a/dash/development/base_component.py
+++ b/dash/development/base_component.py
@@ -16,7 +16,7 @@ def is_number(s):
 def _check_if_has_indexable_children(item):
     if (not hasattr(item, 'children') or
             (not isinstance(item.children, Component) and
-             not isinstance(item.children, (list, tuple)))):
+             not isinstance(item.children, (list, tuple, collections.MutableSequence)))):
 
         raise KeyError
 
@@ -145,7 +145,7 @@ class Component(collections.MutableMapping):
                 pass
 
         # if children is like a list
-        if isinstance(self.children, (list, tuple)):
+        if isinstance(self.children, (list, tuple, collections.MutableSequence)):
             for i, item in enumerate(self.children):
                 # If the item itself is the one we're looking for
                 if getattr(item, 'id', None) == id:
@@ -221,7 +221,7 @@ class Component(collections.MutableMapping):
                 yield "\n".join(["[*] " + children_string, p]), t
 
         # children is a list of components
-        elif isinstance(children, (list, tuple)):
+        elif isinstance(children, (list, tuple, collections.MutableSequence)):
             for idx, i in enumerate(children):
                 list_path = "[{:d}] {:s} {}".format(
                     idx,
@@ -254,7 +254,7 @@ class Component(collections.MutableMapping):
         elif isinstance(self.children, Component):
             length = 1
             length += len(self.children)
-        elif isinstance(self.children, (list, tuple)):
+        elif isinstance(self.children, (list, tuple, collections.MutableSequence)):
             for c in self.children:
                 length += 1
                 if isinstance(c, Component):
