commit f67154ad0ae6ce1a5c9afe01acfd3bd142f6b48b
Author: Per Nilsson <per.nilsson@formidablelabs.com>
Date:   Wed May 25 14:46:16 2016 -0700

    :bug: fix lint

diff --git a/renderer/src/actions/index.js b/renderer/src/actions/index.js
index a46c08d5..71d54208 100644
--- a/renderer/src/actions/index.js
+++ b/renderer/src/actions/index.js
@@ -1,6 +1,5 @@
 import R from 'ramda';
 import { createAction } from 'redux-actions';
-import utils from '../reducers/utils';
 
 export const ACTIONS = (action) => {
     const actionList = {
@@ -61,6 +60,8 @@ export const updateDependants = function(payload) {
                     }, {target: dependantId}
                 );
 
+                /* eslint-disable no-console */
+
                 // make the /POST
                 // xhr.POST(/update-component) ...
                 console.warn('POST /update-component', JSON.stringify(payload, null, 2));
@@ -90,6 +91,8 @@ export const updateDependants = function(payload) {
                     dispatch(updateDependants(dependantUpdatePayload));
                 }, 10000*Math.random());
 
+                /* eslint-enable no-console */
+
             }
 
         }
diff --git a/renderer/src/reducers/dependencyGraph.js b/renderer/src/reducers/dependencyGraph.js
index c9ede34a..c42e83ce 100644
--- a/renderer/src/reducers/dependencyGraph.js
+++ b/renderer/src/reducers/dependencyGraph.js
@@ -1,20 +1,19 @@
 import {DepGraph} from 'dependency-graph';
 
-import {ACTIONS} from '../actions';
-import utils from './utils.js';
-import spec from '../spec.js'; // TODO: this'll eventually load from the API
+import {crawlLayout} from './utils';
+import spec from '../spec'; // TODO: this'll eventually load from the API
 
 const initialGraph = new DepGraph();
 
 // add ID's to all the components
-utils.crawlLayout(spec, child => {
+crawlLayout(spec, child => {
     if (child.props && child.props.id) {
         initialGraph.addNode(child.props.id);
     }
 });
 
 // add dependencies to the graph
-utils.crawlLayout(spec, child => {
+crawlLayout(spec, child => {
     if (child.dependencies) {
         for (let i = 0; i < child.dependencies.length; i++) {
             initialGraph.addDependency(child.props.id, child.dependencies[i]);
diff --git a/renderer/src/reducers/layout.js b/renderer/src/reducers/layout.js
index 55b35ed6..e1969079 100644
--- a/renderer/src/reducers/layout.js
+++ b/renderer/src/reducers/layout.js
@@ -4,7 +4,7 @@ import Immutable from 'immutable';
 // TODO: this should be a prop of the high-level component
 import spec from '../spec.js'; // do we need this now?
 import {ACTIONS} from '../actions';
-import utils from './utils.js';
+import {createTreePath} from './utils.js';
 
 const layout = (state = Immutable.fromJS(spec), action) => {
     switch (action.type) {
diff --git a/renderer/src/reducers/paths.js b/renderer/src/reducers/paths.js
index 0f678f42..f30e040e 100644
--- a/renderer/src/reducers/paths.js
+++ b/renderer/src/reducers/paths.js
@@ -1,12 +1,12 @@
-import utils from './utils.js'
+import {crawlLayout, createTreePath} from './utils'
 
 import spec from '../spec.js'; // TODO: this'll eventually load from the API
 
 const initialPaths = {};
 
-utils.crawlLayout(spec, (child, itempath) => {
+crawlLayout(spec, (child, itempath) => {
     if(child.props && child.props.id) {
-        initialPaths[child.props.id] = utils.createTreePath(itempath);
+        initialPaths[child.props.id] = createTreePath(itempath);
     }
 });
 
diff --git a/renderer/src/reducers/utils.js b/renderer/src/reducers/utils.js
index bb57a472..14948b52 100644
--- a/renderer/src/reducers/utils.js
+++ b/renderer/src/reducers/utils.js
@@ -7,7 +7,7 @@ const pad = R.curry((array, paddingValue) => array.reduce((r, v) => {
 }, []));
 
 // crawl a layout object, apply a function on every object
-function crawlLayout(object, func, path=[]) {
+export const crawlLayout = (object, func, path=[]) => {
     func(object, path);
     if (Array.isArray(object.children)) {
         object.children.forEach((child, i) => {
@@ -16,7 +16,4 @@ function crawlLayout(object, func, path=[]) {
     }
 }
 
-export default {
-    createTreePath: (array) => pad(array, 'children'),
-    crawlLayout
-};
+export const createTreePath = (array) => pad(array, 'children');
diff --git a/renderer/src/renderTree.js b/renderer/src/renderTree.js
index 1b921f38..d1b2c08e 100644
--- a/renderer/src/renderTree.js
+++ b/renderer/src/renderTree.js
@@ -7,7 +7,7 @@ import Draggable from './components/core/Draggable.react.js';
 import Droppable from './components/core/Droppable.react.js';
 import EditableContent from './components/core/EditableContent.react.js';
 import UpdateDependants from './components/core/UpdateDependants.react.js';
-import utils from './reducers/utils.js';
+import {createTreePath} from './reducers/utils.js';
 
 export default function render(component, dependencyGraph, path=[]) {
 
@@ -26,7 +26,7 @@ export default function render(component, dependencyGraph, path=[]) {
 
     content = React.createElement(
         R.has(component.type, Registry) ? Registry[component.type] : component.type,
-        Object.assign({}, component.props, {path: utils.createTreePath(path)}),
+        Object.assign({}, component.props, {path: createTreePath(path)}),
         ...content
     );
 
diff --git a/renderer/src/spec.js b/renderer/src/spec.js
index bc15f921..d7a48655 100644
--- a/renderer/src/spec.js
+++ b/renderer/src/spec.js
@@ -13,7 +13,7 @@ export default {
                 id: 'child',
                 style: {fontSize: 20}
             },
-            children: 'basic <p> component',
+            children: 'basic <p> component'
         },
 
         // dependency tree
