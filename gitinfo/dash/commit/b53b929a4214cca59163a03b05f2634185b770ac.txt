commit b53b929a4214cca59163a03b05f2634185b770ac
Author: chriddyp <chris@plot.ly>
Date:   Mon Jun 19 11:14:14 2017 -0400

    prepend urls

diff --git a/src/actions/api.js b/src/actions/api.js
index ed9869d1..a39595c6 100644
--- a/src/actions/api.js
+++ b/src/actions/api.js
@@ -1,9 +1,9 @@
 /* global fetch: true, document: true */
 import cookie from 'cookie';
-import {merge} from 'ramda';
+import {has, merge, type} from 'ramda';
 
 function GET(path) {
-    return fetch(`${path}`, {
+    return fetch(path, {
         method: 'GET',
         credentials: 'same-origin',
         headers: {
@@ -15,7 +15,7 @@ function GET(path) {
 }
 
 function POST(path, body = {}, headers={}) {
-    return fetch(`${path}`, {
+    return fetch(path, {
         method: 'POST',
         credentials: 'same-origin',
         headers: merge({
@@ -31,12 +31,19 @@ const request = {GET, POST};
 
 
 function apiThunk(endpoint, method, store, id, body, headers={}) {
-    return dispatch => {
+    return (dispatch, getState) => {
+        const config = getState().config;
+        if (type(config) === "Null" ||
+            (type(config) === "Object") && !has('url_base_pathname', config)) {
+            throw new Error(`
+                Trying to make an API request to ${endpoint} but "url_base_pathname"
+                is not in \`config\`. \`config\` is: `, config);
+        }
         dispatch({
             type: store,
             payload: {id, status: 'loading'}
         });
-        return request[method](endpoint, body, headers)
+        return request[method](`${config.url_base_pathname}${endpoint}`, body, headers)
         .then(res => {
             const contentType = res.headers.get("content-type");
             if(contentType && contentType.indexOf("application/json") !== -1) {
diff --git a/src/actions/index.js b/src/actions/index.js
index 85aa7d8b..48db541c 100644
--- a/src/actions/index.js
+++ b/src/actions/index.js
@@ -30,10 +30,12 @@ export const readConfig = createAction(ACTIONS('READ_CONFIG'));
 
 export const hydrateInitialOutputs = function() {
     return function (dispatch, getState) {
-        const {routesRequest} = getState();
+        const {config, routesRequest} = getState();
+        const {url_base_pathname} = config;
+        const relativePathname = window.location.pathname.slice(url_base_pathname.length);
         if (!isEmpty(routesRequest.content) &&
             contains(
-                window.location.pathname,
+                relativePathname,
                 pluck('pathname', routesRequest.content)
             )
         ) {
@@ -47,10 +49,12 @@ export const hydrateInitialOutputs = function() {
 
 export function loadStateFromRoute() {
     return (dispatch, getState) => {
-        const {routesRequest} = getState();
+        const {config, routesRequest} = getState();
         const routes = routesRequest.content;
+        const {url_base_pathname} = config;
+        const relativePathname = window.location.pathname.slice(url_base_pathname.length);
         const route = routes.find(route => (
-            route.pathname === window.location.pathname
+            route.pathname === relativePathname
         ));
         const initialState = route.state;
         loadSavedState(initialState)(dispatch, getState)
@@ -267,6 +271,7 @@ export const notifyObservers = function(payload) {
         } = payload
 
         const {
+            config,
             layout,
             graphs,
             paths,
@@ -426,9 +431,7 @@ export const notifyObservers = function(payload) {
                 });
             }
 
-
-
-            promises.push(fetch('/update-component', {
+            promises.push(fetch(`${config.url_base_pathname}_dash-update-component`, {
                 method: 'POST',
                 headers: {
                     'Content-Type': 'application/json',
diff --git a/src/reducers/reducer.js b/src/reducers/reducer.js
index ddcea12a..2d8be8d7 100644
--- a/src/reducers/reducer.js
+++ b/src/reducers/reducer.js
@@ -105,12 +105,18 @@ function updateUrlPath(reducer) {
                 route.state,
                 R.pick(R.keys(route.state), serialized)
             ), nextState.routesRequest.content);
+            const {url_base_pathname} = state.config;
+            const relativePathname = window.location.pathname.slice(
+                url_base_pathname.length
+            );
+
             if (matchingRoute.length === 1 &&
-                window.location.pathname !== matchingRoute[0].pathname
+                relativePathname !== matchingRoute[0].pathname
             ) {
                 window.history.pushState(
                     {},
-                    document.title,matchingRoute[0].pathname
+                    document.title,
+                    `${url_base_pathname}${matchingRoute[0].pathname}`
                 );
             } else if (matchingRoute.length > 1) {
                 const nMostMatchedKeys = R.reduce(
@@ -128,7 +134,7 @@ function updateUrlPath(reducer) {
                     window.history.pushState(
                         {},
                         document.title,
-                        bestMatchedRoute[0].pathname
+                        `${url_base_pathname}${bestMatchedRoute[0].pathname}`
                     );
                 }
             }
