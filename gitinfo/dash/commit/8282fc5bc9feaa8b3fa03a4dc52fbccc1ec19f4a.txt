commit 8282fc5bc9feaa8b3fa03a4dc52fbccc1ec19f4a
Author: byron <byron@plot.ly>
Date:   Wed May 29 12:14:54 2019 -0400

    :alembic: improvement

diff --git a/dash/testing/application_runners.py b/dash/testing/application_runners.py
index 041554d7..e34be900 100644
--- a/dash/testing/application_runners.py
+++ b/dash/testing/application_runners.py
@@ -98,7 +98,7 @@ class ThreadedRunner(BaseDashRunner):
     this is the default flavor to use in dash integration tests
     """
 
-    def __init__(self, keep_open=False, stop_timeout=1):
+    def __init__(self, keep_open=False, stop_timeout=3):
         super(ThreadedRunner, self).__init__(
             keep_open=keep_open, stop_timeout=stop_timeout
         )
@@ -155,7 +155,7 @@ class ProcessRunner(BaseDashRunner):
     this flavor is closer to production environment but slower
     """
 
-    def __init__(self, keep_open=False, stop_timeout=1):
+    def __init__(self, keep_open=False, stop_timeout=3):
         super(ProcessRunner, self).__init__(
             keep_open=keep_open, stop_timeout=stop_timeout
         )
diff --git a/tests/assets/__init__.py b/tests/assets/__init__.py
new file mode 100644
index 00000000..e69de29b
diff --git a/tests/integration/test_render.py b/tests/integration/test_render.py
index d087ed12..21e188d1 100644
--- a/tests/integration/test_render.py
+++ b/tests/integration/test_render.py
@@ -2,9 +2,10 @@
 import os
 import textwrap
 
+import pytest
 import dash
 from dash import Dash
-from dash.dependencies import Input, Output, State, ClientsideFunction
+from dash.dependencies import Input, Output, State
 from dash.exceptions import PreventUpdate
 from dash.development.base_component import Component
 import dash_html_components as html
@@ -22,8 +23,6 @@ from .IntegrationTests import IntegrationTests
 from .utils import wait_for
 from multiprocessing import Value
 import time
-import re
-import itertools
 import json
 import string
 import plotly
@@ -933,6 +932,7 @@ class Tests(IntegrationTests):
             output().text,
             'input="Initial Inputx", state="Initial Statex"')
 
+    @pytest.mark.flakey
     def test_state_and_inputs(self):
         app = Dash(__name__)
         app.layout = html.Div([
@@ -956,6 +956,7 @@ class Tests(IntegrationTests):
         state = lambda: self.driver.find_element_by_id('state')
 
         # callback gets called with initial input
+        time.sleep(0.5)
         self.assertEqual(
             output().text,
             'input="Initial Input", state="Initial State"'
