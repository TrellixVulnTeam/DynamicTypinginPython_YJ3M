commit 52ec81fec41d2411658a8671acdd98bf892b4f75
Author: Chris P <chris@plot.ly>
Date:   Fri Apr 5 20:23:32 2019 -0400

    :pencil: :clock1: rename and handle & test promises

diff --git a/src/actions/index.js b/src/actions/index.js
index cf619c3e..2f29d9c8 100644
--- a/src/actions/index.js
+++ b/src/actions/index.js
@@ -535,7 +535,18 @@ function updateOutput(
             return;
         }
 
-        function updateOutput(outputIdAndProp, outputValue) {
+        // Returning promises isn't support atm
+        if (type(returnValue.then) === 'Promise') {
+            throw new Error(
+                'The clientside function ' +
+                `${clientside_function.namespace}.${clientside_function.function_name} ` +
+                'returned a Promise instead of a value. Promises are not ' +
+                'supported in Dash clientside right now, but may be in the ' +
+                'future.'
+            );
+        }
+
+        function updateClientsideOutput(outputIdAndProp, outputValue) {
             const [outputId, outputProp] = outputIdAndProp.split('.');
             const updatedProps = {
                 [outputProp]: outputValue,
@@ -579,10 +590,10 @@ function updateOutput(
                 .split('...')
                 .map(o => o.replace('..', ''));
             for (let i = 0; i < outputPropIds.length; i++) {
-                updateOutput(outputPropIds[i], returnValue[i]);
+                updateClientsideOutput(outputPropIds[i], returnValue[i]);
             }
         } else {
-            updateOutput(payload.output, returnValue);
+            updateClientsideOutput(payload.output, returnValue);
         }
 
         /*
diff --git a/tests/test_clientside/clientside.js b/tests/test_clientside/clientside.js
index ae5799e7..9002d531 100644
--- a/tests/test_clientside/clientside.js
+++ b/tests/test_clientside/clientside.js
@@ -22,6 +22,19 @@ window.clientside = {
             parseInt(value) + 3,
             parseInt(value) + 4
         ]
+    },
+
+    side_effect_and_return_a_promise: function(value) {
+        return new Promise(function(resolve, reject) {
+            setTimeout(function() {
+                setTimeout(function() {
+                    document.getElementById('#side-effect').innerText = (
+                        'side effect'
+                    );
+                }, 100);
+                resolve('foo');
+            }, 1);
+        });
     }
 
 }
diff --git a/tests/test_render.py b/tests/test_render.py
index 5c08cfde..1d190293 100644
--- a/tests/test_render.py
+++ b/tests/test_render.py
@@ -2543,3 +2543,23 @@ class Tests(IntegrationTests):
             'output-3': '14',
             'output-4': '15'
         })
+
+    def test_clientside_fails_when_returning_a_promise(self):
+        app = dash.Dash(__name__, assets_folder='test_clientside')
+
+        app.layout = html.Div([
+            html.Div(id='input', children='hello'),
+            html.Div(id='side-effect'),
+            html.Div(id='output', children='output')
+        ])
+
+        app.clientside_callback(
+            ClientsideFunction('clientside', 'side_effect_and_return_a_promise'),
+            Output('output', 'children'),
+            [Input('input', 'children')])
+
+        self.startServer(app)
+
+        self.wait_for_text_to_equal('#input', 'hello')
+        self.wait_for_text_to_equal('#side-effect', 'side effect')
+        self.wait_for_text_to_equal('#output', 'output')
