commit df9848bb34b2eafb080948879a7cb6c363c8efba
Author: alexcjohnson <alex@plot.ly>
Date:   Sat May 9 02:46:20 2020 -0400

    API connection status notifications

diff --git a/dash-renderer/src/actions/api.js b/dash-renderer/src/actions/api.js
index 788da55b..8a78708d 100644
--- a/dash-renderer/src/actions/api.js
+++ b/dash-renderer/src/actions/api.js
@@ -30,43 +30,61 @@ const request = {GET, POST};
 
 export default function apiThunk(endpoint, method, store, id, body) {
     return (dispatch, getState) => {
-        const config = getState().config;
+        const {config} = getState();
         const url = `${urlBase(config)}${endpoint}`;
 
+        function setConnectionStatus(connected) {
+            if (getState().error.backEndConnected !== connected) {
+                dispatch({
+                    type: 'SET_CONNECTION_STATUS',
+                    payload: connected,
+                });
+            }
+        }
+
         dispatch({
             type: store,
             payload: {id, status: 'loading'},
         });
         return request[method](url, config.fetch, body)
-            .then(res => {
-                const contentType = res.headers.get('content-type');
-                if (
-                    contentType &&
-                    contentType.indexOf('application/json') !== -1
-                ) {
-                    return res.json().then(json => {
-                        dispatch({
-                            type: store,
-                            payload: {
-                                status: res.status,
-                                content: json,
-                                id,
-                            },
+            .then(
+                res => {
+                    setConnectionStatus(true);
+                    const contentType = res.headers.get('content-type');
+                    if (
+                        contentType &&
+                        contentType.indexOf('application/json') !== -1
+                    ) {
+                        return res.json().then(json => {
+                            dispatch({
+                                type: store,
+                                payload: {
+                                    status: res.status,
+                                    content: json,
+                                    id,
+                                },
+                            });
+                            return json;
                         });
-                        return json;
+                    }
+                    logWarningOnce(
+                        'Response is missing header: content-type: application/json'
+                    );
+                    return dispatch({
+                        type: store,
+                        payload: {
+                            id,
+                            status: res.status,
+                        },
                     });
+                },
+                () => {
+                    // fetch rejection - this means the request didn't return,
+                    // we don't get here from 400/500 errors, only network
+                    // errors or unresponsive servers.
+                    setConnectionStatus(false);
                 }
-                logWarningOnce(
-                    'Response is missing header: content-type: application/json'
-                );
-                return dispatch({
-                    type: store,
-                    payload: {
-                        id,
-                        status: res.status,
-                    },
-                });
-            })
+            )
             .catch(err => {
                 const message = 'Error from API call: ' + endpoint;
                 handleAsyncError(err, message, dispatch);
diff --git a/dash-renderer/src/components/error/FrontEnd/FrontEndErrorContainer.react.js b/dash-renderer/src/components/error/FrontEnd/FrontEndErrorContainer.react.js
index ddb18ac8..b3701410 100644
--- a/dash-renderer/src/components/error/FrontEnd/FrontEndErrorContainer.react.js
+++ b/dash-renderer/src/components/error/FrontEnd/FrontEndErrorContainer.react.js
@@ -9,7 +9,8 @@ class FrontEndErrorContainer extends Component {
     }
 
     render() {
-        const errorsLength = this.props.errors.length;
+        const {errors, connected} = this.props;
+        const errorsLength = errors.length;
         if (errorsLength === 0) {
             return null;
         }
@@ -17,7 +18,7 @@ class FrontEndErrorContainer extends Component {
         const inAlertsTray = this.props.inAlertsTray;
         let cardClasses = 'dash-error-card dash-error-card--container';
 
-        const errorElements = this.props.errors.map((error, i) => {
+        const errorElements = errors.map((error, i) => {
             return <FrontEndError e={error} isListItem={true} key={i} />;
         });
         if (inAlertsTray) {
@@ -31,7 +32,7 @@ class FrontEndErrorContainer extends Component {
                         <strong className="test-devtools-error-count">
                             {errorsLength}
                         </strong>
-                        )
+                        ){connected ? null : '\u00a0 ðŸš« Back End Disconnected'}
                     </div>
                 </div>
                 <div className="dash-error-card__list">{errorElements}</div>
@@ -42,6 +43,7 @@ class FrontEndErrorContainer extends Component {
 
 FrontEndErrorContainer.propTypes = {
     errors: PropTypes.array,
+    connected: PropTypes.bool,
     inAlertsTray: PropTypes.any,
 };
 
diff --git a/dash-renderer/src/components/error/GlobalErrorOverlay.react.js b/dash-renderer/src/components/error/GlobalErrorOverlay.react.js
index 8ef46559..bdbc46b3 100644
--- a/dash-renderer/src/components/error/GlobalErrorOverlay.react.js
+++ b/dash-renderer/src/components/error/GlobalErrorOverlay.react.js
@@ -11,13 +11,18 @@ export default class GlobalErrorOverlay extends Component {
     }
 
     render() {
-        const {visible, error, toastsEnabled} = this.props;
+        const {visible, error, errorsOpened} = this.props;
 
         let frontEndErrors;
-        if (toastsEnabled) {
+        if (errorsOpened) {
             const errors = concat(error.frontEnd, error.backEnd);
 
-            frontEndErrors = <FrontEndErrorContainer errors={errors} />;
+            frontEndErrors = (
+                <FrontEndErrorContainer
+                    errors={errors}
+                    connected={error.backEndConnected}
+                />
+            );
         }
         return (
             <div>
@@ -36,5 +41,5 @@ GlobalErrorOverlay.propTypes = {
     children: PropTypes.object,
     visible: PropTypes.bool,
     error: PropTypes.object,
-    toastsEnabled: PropTypes.any,
+    errorsOpened: PropTypes.any,
 };
diff --git a/dash-renderer/src/components/error/menu/DebugMenu.css b/dash-renderer/src/components/error/menu/DebugMenu.css
index 8a7aad54..51c81861 100644
--- a/dash-renderer/src/components/error/menu/DebugMenu.css
+++ b/dash-renderer/src/components/error/menu/DebugMenu.css
@@ -65,6 +65,7 @@
     color: #A2B1C6;
     font-size: 10px;
     margin-top: 4px;
+    text-align: center;
 }
 
 .dash-debug-menu__button {
@@ -100,3 +101,40 @@
 .dash-debug-menu__button--enabled:hover {
     background-color: #03bb8a;
 }
+
+.dash-debug-menu__connection {
+    display: flex;
+    justify-content: center;
+    align-items: center;
+    font-size: 50px;
+    line-height: 1;
+}
+
+.dash-debug-alert {
+    display: flex;
+    align-items: center;
+    font-size: 10px;
+}
+
+.dash-debug-alert-label {
+    display: flex;
+    position: fixed;
+    bottom: 81px;
+    right: 29px;
+    z-index: 10001;
+    cursor: pointer;
+    box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.25),
+        0px 1px 3px rgba(162, 177, 198, 0.32);
+    border-radius: 32px;
+    background-color: white;
+    padding: 4px;
+}
+
+.dash-debug-error-count {
+    display: block;
+}
+
+.dash-debug-disconnected {
+    font-size: 14px;
+    margin-left: 3px;
+}
diff --git a/dash-renderer/src/components/error/menu/DebugMenu.react.js b/dash-renderer/src/components/error/menu/DebugMenu.react.js
index e25c8cc2..315d7fed 100644
--- a/dash-renderer/src/components/error/menu/DebugMenu.react.js
+++ b/dash-renderer/src/components/error/menu/DebugMenu.react.js
@@ -1,5 +1,4 @@
 import React, {Component} from 'react';
-import {concat, isEmpty} from 'ramda';
 import './DebugMenu.css';
 
 import DebugIcon from '../icons/DebugIcon.svg';
@@ -9,7 +8,6 @@ import BellIconGrey from '../icons/BellIconGrey.svg';
 import GraphIcon from '../icons/GraphIcon.svg';
 import GraphIconGrey from '../icons/GraphIconGrey.svg';
 import PropTypes from 'prop-types';
-import {DebugAlertContainer} from './DebugAlertContainer.react';
 import GlobalErrorOverlay from '../GlobalErrorOverlay.react';
 import {CallbackGraphContainer} from '../CallbackGraph/CallbackGraphContainer.react';
 
@@ -19,40 +17,33 @@ class DebugMenu extends Component {
 
         this.state = {
             opened: false,
-            alertsOpened: false,
             callbackGraphOpened: false,
-            toastsEnabled: true,
+            errorsOpened: true,
         };
     }
     render() {
-        const {
-            opened,
-            alertsOpened,
-            toastsEnabled,
-            callbackGraphOpened,
-        } = this.state;
+        const {opened, errorsOpened, callbackGraphOpened} = this.state;
         const {error, graphs} = this.props;
 
         const menuClasses = opened
             ? 'dash-debug-menu dash-debug-menu--opened'
             : 'dash-debug-menu dash-debug-menu--closed';
 
+        const errCount = error.frontEnd.length + error.backEnd.length;
+        const connected = error.backEndConnected;
+
+        const toggleErrorsOpened = () => {
+            this.setState({errorsOpened: !errorsOpened});
+        };
+
+        const _GraphIcon = callbackGraphOpened ? GraphIcon : GraphIconGrey;
+        const _BellIcon = errorsOpened ? BellIcon : BellIconGrey;
+
         const menuContent = opened ? (
             <div className="dash-debug-menu__content">
                 {callbackGraphOpened ? (
                     <CallbackGraphContainer graphs={graphs} />
                 ) : null}
-                {error.frontEnd.length > 0 || error.backEnd.length > 0 ? (
-                    <div className="dash-debug-menu__button-container">
-                        <DebugAlertContainer
-                            errors={concat(error.frontEnd, error.backEnd)}
-                            alertsOpened={alertsOpened}
-                            onClick={() =>
-                                this.setState({alertsOpened: !alertsOpened})
-                            }
-                        />
-                    </div>
-                ) : null}
                 <div className="dash-debug-menu__button-container">
                     <div
                         className={`dash-debug-menu__button ${
@@ -66,11 +57,7 @@ class DebugMenu extends Component {
                             })
                         }
                     >
-                        {callbackGraphOpened ? (
-                            <GraphIcon className="dash-debug-menu__icon dash-debug-menu__icon--graph" />
-                        ) : (
-                            <GraphIconGrey className="dash-debug-menu__icon dash-debug-menu__icon--bell" />
-                        )}
+                        <_GraphIcon className="dash-debug-menu__icon dash-debug-menu__icon--graph" />
                     </div>
                     <label className="dash-debug-menu__button-label">
                         Callback Graph
@@ -79,24 +66,25 @@ class DebugMenu extends Component {
                 <div className="dash-debug-menu__button-container">
                     <div
                         className={`dash-debug-menu__button ${
-                            toastsEnabled
+                            errorsOpened
                                 ? 'dash-debug-menu__button--enabled'
                                 : ''
                         }`}
-                        onClick={() =>
-                            this.setState({
-                                toastsEnabled: !toastsEnabled,
-                            })
-                        }
+                        onClick={toggleErrorsOpened}
                     >
-                        {toastsEnabled ? (
-                            <BellIcon className="dash-debug-menu__icon dash-debug-menu__icon--bell" />
-                        ) : (
-                            <BellIconGrey className="dash-debug-menu__icon dash-debug-menu__icon--bell" />
-                        )}
+                        <_BellIcon className="dash-debug-menu__icon dash-debug-menu__icon--bell" />
+                    </div>
+                    <label className="dash-debug-menu__button-label">
+                        ðŸ›‘ &nbsp;
+                        {errCount + ' Error' + (errCount === 1 ? '' : 's')}
+                    </label>
+                </div>
+                <div className="dash-debug-menu__button-container">
+                    <div className="dash-debug-menu__connection">
+                        {connected ? 'âœ…' : 'ðŸš«'}
                     </div>
                     <label className="dash-debug-menu__button-label">
-                        Errors
+                        Back End {connected ? 'Connected' : 'Disconnected'}
                     </label>
                 </div>
                 <div className="dash-debug-menu__button-container">
@@ -116,10 +104,20 @@ class DebugMenu extends Component {
         );
 
         const alertsLabel =
-            error.frontEnd.length + error.backEnd.length > 0 && !opened ? (
+            (errCount || !connected) && !opened ? (
                 <div className="dash-debug-alert-label">
-                    <div className="dash-debug-alert">
-                        ðŸ›‘ &nbsp;{error.frontEnd.length + error.backEnd.length}
+                    <div
+                        className="dash-debug-alert"
+                        onClick={toggleErrorsOpened}
+                    >
+                        {errCount ? (
+                            <div className="dash-debug-error-count">
+                                {'ðŸ›‘ ' + errCount}
+                            </div>
+                        ) : null}
+                        {connected ? null : (
+                            <div className="dash-debug-disconnected">ðŸš«</div>
+                        )}
                     </div>
                 </div>
             ) : null;
@@ -135,10 +133,8 @@ class DebugMenu extends Component {
                 </div>
                 <GlobalErrorOverlay
                     error={error}
-                    visible={
-                        !(isEmpty(error.backEnd) && isEmpty(error.frontEnd))
-                    }
-                    toastsEnabled={toastsEnabled}
+                    visible={errCount > 0}
+                    errorsOpened={errorsOpened}
                 >
                     {this.props.children}
                 </GlobalErrorOverlay>
diff --git a/dash-renderer/src/reducers/error.js b/dash-renderer/src/reducers/error.js
index b796024e..41887030 100644
--- a/dash-renderer/src/reducers/error.js
+++ b/dash-renderer/src/reducers/error.js
@@ -3,11 +3,13 @@ import {mergeRight} from 'ramda';
 const initialError = {
     frontEnd: [],
     backEnd: [],
+    backEndConnected: true,
 };
 
 export default function error(state = initialError, action) {
     switch (action.type) {
         case 'ON_ERROR': {
+            const {frontEnd, backEnd, backEndConnected} = state;
             // log errors to the console for stack tracing and so they're
             // available even with debugging off
             /* eslint-disable-next-line no-console */
@@ -17,21 +19,26 @@ export default function error(state = initialError, action) {
                 return {
                     frontEnd: [
                         mergeRight(action.payload, {timestamp: new Date()}),
-                        ...state.frontEnd,
+                        ...frontEnd,
                     ],
-                    backEnd: state.backEnd,
+                    backEnd,
+                    backEndConnected,
                 };
             } else if (action.payload.type === 'backEnd') {
                 return {
-                    frontEnd: state.frontEnd,
+                    frontEnd,
                     backEnd: [
                         mergeRight(action.payload, {timestamp: new Date()}),
-                        ...state.backEnd,
+                        ...backEnd,
                     ],
+                    backEndConnected,
                 };
             }
             return state;
         }
+        case 'SET_CONNECTION_STATUS': {
+            return mergeRight(state, {backEndConnected: action.payload});
+        }
 
         default: {
             return state;
