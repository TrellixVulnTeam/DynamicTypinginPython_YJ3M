commit e751cf924a5fe126e69acc5b0efcbd69f2eec19e
Author: chriddyp <chris@plot.ly>
Date:   Wed Sep 27 18:25:15 2017 -0400

    remove `lastUpdateComponentRequest`
    
    it was only used for auth and auth is now a separate package

diff --git a/src/APIController.react.js b/src/APIController.react.js
index ce8ca342..1335d656 100644
--- a/src/APIController.react.js
+++ b/src/APIController.react.js
@@ -1,5 +1,5 @@
 import {connect} from 'react-redux'
-import {any, contains, equals, isEmpty, isNil} from 'ramda'
+import {contains, isEmpty, isNil} from 'ramda'
 import React, {Component, PropTypes} from 'react';
 import renderTree from './renderTree';
 import {
@@ -10,7 +10,6 @@ import {
 } from './actions/index';
 import {getDependencies, getLayout} from './actions/api';
 import {APP_STATES} from './reducers/constants';
-import AccessDenied from './AccessDenied.react';
 
 /**
  * Fire off API calls for initialization
@@ -75,24 +74,12 @@ class UnconnectedContainer extends Component {
     render () {
         const {
             appLifecycle,
-            config,
             dependenciesRequest,
-            lastUpdateComponentRequest,
             layoutRequest,
             layout
         } = this.props;
 
-        // Auth protected routes
-        if (any(equals(true),
-                [dependenciesRequest, lastUpdateComponentRequest,
-                 layoutRequest].map(
-            request => (request.status && request.status === 403))
-        )) {
-            return (<AccessDenied config={config}/>);
-        }
-
-
-        else if (layoutRequest.status &&
+        if (layoutRequest.status &&
             !contains(layoutRequest.status, [200, 'loading'])
         ) {
             return (<div>{'Error loading layout'}</div>);
@@ -126,9 +113,7 @@ UnconnectedContainer.propTypes = {
         APP_STATES('HYDRATED')
     ]),
     dispatch: PropTypes.function,
-    config: PropTypes.object,
     dependenciesRequest: PropTypes.object,
-    lastUpdateComponentRequest: PropTypes.objec,
     layoutRequest: PropTypes.object,
     layout: PropTypes.object,
     paths: PropTypes.object,
@@ -139,9 +124,7 @@ const Container = connect(
     // map state to props
     state => ({
         appLifecycle: state.appLifecycle,
-        config: state.config,
         dependenciesRequest: state.dependenciesRequest,
-        lastUpdateComponentRequest: state.lastUpdateComponentRequest,
         layoutRequest: state.layoutRequest,
         layout: state.layout,
         graphs: state.graphs,
diff --git a/src/actions/index.js b/src/actions/index.js
index 1e346515..5780d407 100644
--- a/src/actions/index.js
+++ b/src/actions/index.js
@@ -365,10 +365,6 @@ export function notifyObservers(payload) {
                 credentials: 'same-origin',
                 body: JSON.stringify(payload)
             }).then(function handleResponse(res) {
-                dispatch({
-                    type: 'lastUpdateComponentRequest',
-                    payload: {status: res.status}
-                });
 
                 // update the status of this request
                 const postRequestQueue = getState().requestQueue;
diff --git a/src/reducers/api.js b/src/reducers/api.js
index f929c305..a7e8d951 100644
--- a/src/reducers/api.js
+++ b/src/reducers/api.js
@@ -27,8 +27,5 @@ function createApiReducer(store) {
 }
 
 export const dependenciesRequest = createApiReducer('dependenciesRequest');
-export const lastUpdateComponentRequest = createApiReducer(
-    'lastUpdateComponentRequest'
-);
 export const layoutRequest = createApiReducer('layoutRequest');
 export const loginRequest = createApiReducer('loginRequest');
diff --git a/src/reducers/reducer.js b/src/reducers/reducer.js
index 1d0d5d22..33ca050c 100644
--- a/src/reducers/reducer.js
+++ b/src/reducers/reducer.js
@@ -19,7 +19,6 @@ const reducer = combineReducers({
     config,
     dependenciesRequest: API.dependenciesRequest,
     layoutRequest: API.layoutRequest,
-    lastUpdateComponentRequest: API.lastUpdateComponentRequest,
     loginRequest: API.loginRequest,
     history
 });
