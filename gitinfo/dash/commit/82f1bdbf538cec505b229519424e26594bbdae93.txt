commit 82f1bdbf538cec505b229519424e26594bbdae93
Author: chriddyp <chris@plot.ly>
Date:   Tue Sep 5 18:07:09 2017 -0400

    flake8 tests and fixes

diff --git a/dash/__init__.py b/dash/__init__.py
index b83224bb..fe3b40fd 100644
--- a/dash/__init__.py
+++ b/dash/__init__.py
@@ -1,3 +1,3 @@
-from .dash import Dash
-from . import development
-from .version import __version__
+from .dash import Dash  # noqa: F401
+from . import development  # noqa: F401
+from .version import __version__  # noqa: F401
diff --git a/dash/dash.py b/dash/dash.py
index e060fa7f..3abee056 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -1,15 +1,12 @@
 import flask
 import json
 import plotly
-from flask import Flask, url_for, send_from_directory, Response
+from flask import Flask, Response
 from flask_compress import Compress
 from flask_seasurf import SeaSurf
 import os
 import importlib
-import requests
 import pkgutil
-from functools import wraps
-import datetime
 import collections
 
 import dash_renderer
@@ -17,8 +14,6 @@ import dash_renderer
 from .dependencies import Event, Input, Output, State
 from .resources import Scripts, Css
 from .development.base_component import Component
-from .dependencies import Event, Input, Output, State
-from . import plotly_api
 from . import exceptions
 
 
@@ -82,14 +77,18 @@ class Dash(object):
             view_func=self.dependencies)
 
         self.server.add_url_rule(
-            '{}_dash-update-component'.format(self.config.routes_pathname_prefix),
+            '{}_dash-update-component'.format(
+                self.config.routes_pathname_prefix
+            ),
             view_func=self.dispatch,
             methods=['POST'])
 
         self.server.add_url_rule((
             '{}_dash-component-suites'
             '/<string:package_name>'
-            '/<path:path_in_package_dist>').format(self.config.routes_pathname_prefix),
+            '/<path:path_in_package_dist>').format(
+                self.config.routes_pathname_prefix
+            ),
             view_func=self.serve_component_suites)
 
         self.server.add_url_rule(
@@ -97,7 +96,8 @@ class Dash(object):
             view_func=self.serve_routes
         )
 
-        self.server.add_url_rule(self.config.routes_pathname_prefix, view_func=self.index)
+        self.server.add_url_rule(
+            self.config.routes_pathname_prefix, view_func=self.index)
 
         # catch-all for front-end routes
         self.server.add_url_rule(
@@ -125,7 +125,8 @@ class Dash(object):
 
     @layout.setter
     def layout(self, value):
-        if not isinstance(value, Component) and not isinstance(value, collections.Callable):
+        if (not isinstance(value, Component) and
+                not isinstance(value, collections.Callable)):
             raise Exception(
                 ''
                 'Layout must be a dash component '
@@ -275,7 +276,6 @@ class Dash(object):
             mimetype=mimetype
         )
 
-
     def index(self, *args, **kwargs):
         scripts = self._generate_scripts_html()
         css = self._generate_css_dist_html()
@@ -318,7 +318,7 @@ class Dash(object):
         ])
 
     def react(self, *args, **kwargs):
-        raise DashException(
+        raise exceptions.DashException(
             'Yo! `react` is no longer used. \n'
             'Use `callback` instead. `callback` has a new syntax too, '
             'so make sure to call `help(app.callback)` to learn more.')
@@ -346,7 +346,7 @@ class Dash(object):
                 raise exceptions.IncorrectTypeException(
                     'The {} argument `{}` is '
                     'not a list of `dash.dependencies.{}`s.'.format(
-                        name.lower(), str(arg), name
+                        name.lower(), str(args), name
                     ))
 
             for arg in args:
@@ -441,7 +441,8 @@ class Dash(object):
                 output.component_id
             ))
 
-        callback_id = '{}.{}'.format(output.component_id, output.component_property)
+        callback_id = '{}.{}'.format(
+            output.component_id, output.component_property)
         if (callback_id in self.callback_map):
             raise exceptions.CantHaveMultipleOutputs('''
                 You have already assigned a callback to the output
@@ -452,7 +453,6 @@ class Dash(object):
                 output.component_id,
                 output.component_property).replace('    ', ''))
 
-
     # TODO - Update nomenclature.
     # "Parents" and "Children" should refer to the DOM tree
     # and not the dependency tree.
diff --git a/dash/development/__init__.py b/dash/development/__init__.py
index 07389f51..a8c6749c 100644
--- a/dash/development/__init__.py
+++ b/dash/development/__init__.py
@@ -1,2 +1,2 @@
-from . import base_component
-from . import component_loader
+from . import base_component  # noqa:F401
+from . import component_loader  # noqa:F401
diff --git a/dash/development/base_component.py b/dash/development/base_component.py
index f52ea580..72aa0275 100644
--- a/dash/development/base_component.py
+++ b/dash/development/base_component.py
@@ -1,7 +1,5 @@
 import collections
 import copy
-import sys
-import types
 
 
 def is_number(s):
@@ -131,7 +129,6 @@ class Component(collections.MutableMapping):
         '''
         return self._get_set_or_delete(id, 'delete')
 
-
     def traverse(self):
         '''Yield each item in the tree'''
         children = getattr(self, 'children', None)
@@ -156,11 +153,10 @@ class Component(collections.MutableMapping):
         '''
         for t in self.traverse():
             if (isinstance(t, Component) and
-                getattr(t, 'id', None) is not None):
+                    getattr(t, 'id', None) is not None):
 
                 yield t.id
 
-
     def __len__(self):
         '''Return the number of items in the tree
         '''
@@ -225,12 +221,16 @@ def generate_class(typename, props, description, namespace):
             if(any(getattr(self, c, None) is not None for c in self._prop_names
                    if c is not self._prop_names[0])):
 
-                return '{typename}('+', '.join([c+'='+repr(getattr(self, c, None))
-                                                for c in self._prop_names
-                                                if getattr(self, c, None) is not None])+')'
+                return (
+                    '{typename}(' +
+                    ', '.join([c+'='+repr(getattr(self, c, None))
+                               for c in self._prop_names
+                               if getattr(self, c, None) is not None])+')')
 
             else:
-                return '{typename}(' + repr(getattr(self, self._prop_names[0], None)) + ')'
+                return (
+                    '{typename}(' +
+                    repr(getattr(self, self._prop_names[0], None)) + ')')
     '''
 
     filtered_props = reorder_props(filter_props(props))
@@ -369,7 +369,8 @@ def js_to_py_type(type_object):
         'shape': lambda: (
             'dict containing keys {}.\n{}'.format(
                 ', '.join(
-                    ["'{}'".format(t) for t in list(type_object['value'].keys())]
+                    ["'{}'".format(t) for t in
+                     list(type_object['value'].keys())]
                 ),
                 'Those keys have the following types: \n{}'.format(
                     '\n'.join([
@@ -395,7 +396,6 @@ def js_to_py_type(type_object):
 
 
 def argument_doc(arg_name, type_object, required, description):
-    js_type_name = type_object['name']
     py_type_name = js_to_py_type(type_object)
     if '\n' in py_type_name:
         return (
diff --git a/dash/development/component_loader.py b/dash/development/component_loader.py
index edacc00b..d55c7147 100644
--- a/dash/development/component_loader.py
+++ b/dash/development/component_loader.py
@@ -10,10 +10,12 @@ def load_components(metadata_path,
     Usage: load_components('../../component-suites/lib/metadata.json')
 
     Keyword arguments:
-    metadata_path -- a path to a JSON file created by [`react-docgen`](https://github.com/reactjs/react-docgen).
+    metadata_path -- a path to a JSON file created by
+    [`react-docgen`](https://github.com/reactjs/react-docgen).
 
     Returns:
-    components -- a list of component objects with keys `type`, `valid_kwargs`, and `setup`.
+    components -- a list of component objects with keys
+    `type`, `valid_kwargs`, and `setup`.
     """
 
     components = []
diff --git a/dash/exceptions.py b/dash/exceptions.py
index 32b7b4a7..e90d926c 100644
--- a/dash/exceptions.py
+++ b/dash/exceptions.py
@@ -37,5 +37,6 @@ class LayoutIsNotDefined(CallbackException):
 class IDsCantContainPeriods(CallbackException):
     pass
 
+
 class CantHaveMultipleOutputs(CallbackException):
     pass
diff --git a/dash/plotly_api.py b/dash/plotly_api.py
deleted file mode 100644
index 3976cf88..00000000
--- a/dash/plotly_api.py
+++ /dev/null
@@ -1,41 +0,0 @@
-import plotly
-from six import iteritems
-
-
-def create_or_overwrite_dash_app(filename, sharing, app_url):
-    required_args = {
-        'filename': filename,
-        'sharing': sharing,
-        'app_url': app_url
-    }
-    for arg_name, arg_value in iteritems(required_args):
-        if arg_value is None:
-            raise Exception('{} is required'.format(arg_name))
-    if sharing not in ['private', 'secret', 'public']:
-        raise Exception(
-            "The privacy argument must be equal "
-            "to 'private', 'public', or 'secret'.\n"
-            "You supplied '{}'".format(sharing)
-        )
-    payload = {
-        'filename': filename,
-        'share_key_enabled': True if sharing == 'secret' else False,
-        'world_readable': True if sharing == 'public' else False,
-        'app_url': app_url
-    }
-
-    try:
-        # TODO - Handle folders
-        res = plotly.api.v2.files.lookup(filename)
-    except Exception as e:
-        print(e)
-        # TODO - How to check if it is a
-        # plotly.exceptions.PlotlyRequestException?
-        res_create = plotly.api.v2.dash_apps.create(payload)
-        fid = res_create.json()['file']['fid']
-    else:
-        fid = res.json()['fid']
-        # TODO - Does plotly.api call `raise_for_status`?
-        res = plotly.api.v2.dash_apps.update(fid, payload)
-        res.raise_for_status()
-    return fid
diff --git a/dash/resources.py b/dash/resources.py
index d79b7f05..1756b9f6 100644
--- a/dash/resources.py
+++ b/dash/resources.py
@@ -1,4 +1,5 @@
 from copy import copy
+import json
 import warnings
 import collections
 
diff --git a/dev-requirements.txt b/dev-requirements.txt
index 37f2c005..07354dd9 100644
--- a/dev-requirements.txt
+++ b/dev-requirements.txt
@@ -10,3 +10,4 @@ mock
 six
 plotly>=2.0.8
 requests[security]
+flake8
diff --git a/setup.py b/setup.py
index 013ad1a8..c68f97b2 100644
--- a/setup.py
+++ b/setup.py
@@ -5,12 +5,13 @@ exec (open('dash/version.py').read())
 
 setup(
     name='dash',
-    version=__version__,
+    version=__version__,  # noqa: F821
     author='chris p',
     author_email='chris@plot.ly',
     packages=find_packages(exclude=['tests*']),
     license='MIT',
-    description='A Python framework for building reactive web-apps. Developed by Plotly.',
+    description=('A Python framework for building reactive web-apps.'
+                 'Developed by Plotly.'),
     long_description=io.open('README.md', encoding='utf-8').read(),
     install_requires=[
         'Flask>=0.12',
diff --git a/tests/development/test_base_component.py b/tests/development/test_base_component.py
index 304424a1..1fc2b6b0 100644
--- a/tests/development/test_base_component.py
+++ b/tests/development/test_base_component.py
@@ -1,20 +1,18 @@
 from collections import OrderedDict
-from dash.development.base_component import (
-    generate_class,
-    Component,
-    js_to_py_type,
-    create_docstring,
-    parse_events
-)
-import dash
 import inspect
 import json
 import plotly
 import unittest
 import collections
-import json
 import os
 
+from dash.development.base_component import (
+    generate_class,
+    Component,
+    js_to_py_type,
+    create_docstring,
+    parse_events
+)
 
 Component._prop_names = ('id', 'a', 'children', 'style', )
 Component._type = 'TestComponent'
@@ -54,7 +52,7 @@ def nested_tree():
 
 class TestComponent(unittest.TestCase):
     def test_init(self):
-        c = Component(a=3)
+        Component(a=3)
 
     def test_get_item_with_children(self):
         c1 = Component(id='1')
@@ -87,7 +85,7 @@ class TestComponent(unittest.TestCase):
         self.assertEqual(c5['1'], c1)
         self.assertEqual(c5['3'], c3)
 
-    def test_get_item_with_nested_children_with_mixed_strings_and_without_lists(self):
+    def test_get_item_with_nested_children_with_mixed_strings_and_without_lists(self):  # noqa: E501
         c, c1, c2, c3, c4, c5 = nested_tree()
         self.assertEqual(
             list(c.keys()),
@@ -108,16 +106,16 @@ class TestComponent(unittest.TestCase):
         with self.assertRaises(KeyError):
             c['x']
 
-    def test_len_with_nested_children_with_mixed_strings_and_without_lists(self):
+    def test_len_with_nested_children_with_mixed_strings_and_without_lists(self):  # noqa: E501
         c = nested_tree()[0]
         self.assertEqual(
             len(c),
-            5 + # 5 components
-            5 + # c2 has 2 strings, 2 numbers, and a None
-            1# c1 has 1 string
+            5 +  # 5 components
+            5 +  # c2 has 2 strings, 2 numbers, and a None
+            1    # c1 has 1 string
         )
 
-    def test_set_item_with_nested_children_with_mixed_strings_and_without_lists(self):
+    def test_set_item_with_nested_children_with_mixed_strings_and_without_lists(self):  # noqa: E501
         keys = [
             '0.0',
             '0.1',
@@ -137,7 +135,7 @@ class TestComponent(unittest.TestCase):
             c[key] = new_component
             self.assertEqual(c[new_id], new_component)
 
-    def test_del_item_with_nested_children_with_mixed_strings_and_without_lists(self):
+    def test_del_item_with_nested_children_with_mixed_strings_and_without_lists(self):  # noqa: E501
         c = nested_tree()[0]
         for key in reversed(list(c.keys())):
             c[key]
@@ -145,7 +143,7 @@ class TestComponent(unittest.TestCase):
             with self.assertRaises(KeyError):
                 c[key]
 
-    def test_traverse_with_nested_children_with_mixed_strings_and_without_lists(self):
+    def test_traverse_with_nested_children_with_mixed_strings_and_without_lists(self):  # noqa: E501
         c, c1, c2, c3, c4, c5 = nested_tree()
         elements = [i for i in c.traverse()]
         self.assertEqual(
@@ -153,17 +151,17 @@ class TestComponent(unittest.TestCase):
             c.children + [c3] + [c2] + c2.children
         )
 
-    def test_iter_with_nested_children_with_mixed_strings_and_without_lists(self):
+    def test_iter_with_nested_children_with_mixed_strings_and_without_lists(self):  # noqa: E501
         c = nested_tree()[0]
         keys = list(c.keys())
         # get a list of ids that __iter__ provides
         iter_keys = [i for i in c]
         self.assertEqual(keys, iter_keys)
 
-    def test_to_plotly_json_with_nested_children_with_mixed_strings_and_without_lists(self):
+    def test_to_plotly_json_with_nested_children_with_mixed_strings_and_without_lists(self):  # noqa: E501
         c = nested_tree()[0]
-        n = Component._namespace
-        t = Component._type
+        Component._namespace
+        Component._type
 
         self.assertEqual(json.loads(json.dumps(
                 c.to_plotly_json(),
@@ -198,7 +196,7 @@ class TestComponent(unittest.TestCase):
                                                 'wrap string',
                                                 {
                                                     'type': 'TestComponent',
-                                                    'namespace': 'test_namespace',
+                                                    'namespace': 'test_namespace',  # noqa: E501
                                                     'props': {
                                                         'children': 'string',
                                                         'id': '0.1.x.x.0'
@@ -417,7 +415,8 @@ class TestComponent(unittest.TestCase):
         self.assertEqual(len(Component()), 0)
         self.assertEqual(len(Component(children='Hello World')), 1)
         self.assertEqual(len(Component(children=Component())), 1)
-        self.assertEqual(len(Component(children=[Component(), Component()])), 2)
+        self.assertEqual(len(Component(children=[Component(), Component()])),
+                         2)
         self.assertEqual(len(Component(children=[
             Component(children=Component()),
             Component()
@@ -602,7 +601,6 @@ class TestGenerateClass(unittest.TestCase):
             (None, )
         )
 
-
     def test_required_props(self):
         with self.assertRaises(Exception):
             self.ComponentClassRequired()
@@ -612,6 +610,7 @@ class TestGenerateClass(unittest.TestCase):
         with self.assertRaises(Exception):
             self.ComponentClassRequired(children='test')
 
+
 class TestMetaDataConversions(unittest.TestCase):
     def setUp(self):
         path = os.path.join('tests', 'development', 'metadata_test.json')
@@ -623,7 +622,8 @@ class TestMetaDataConversions(unittest.TestCase):
             self.data = data
 
         self.expected_arg_strings = OrderedDict([
-            ['children', 'a list of or a singular dash component, string or number'],
+            ['children',
+             'a list of or a singular dash component, string or number'],
 
             ['optionalArray', 'list'],
 
@@ -641,7 +641,8 @@ class TestMetaDataConversions(unittest.TestCase):
 
             ['optionalElement', 'dash component'],
 
-            ['optionalNode', 'a list of or a singular dash component, string or number'],
+            ['optionalNode',
+             'a list of or a singular dash component, string or number'],
 
             ['optionalMessage', ''],
 
@@ -651,7 +652,8 @@ class TestMetaDataConversions(unittest.TestCase):
 
             ['optionalArrayOf', 'list'],
 
-            ['optionalObjectOf', 'dict with strings as keys and values of type number'],
+            ['optionalObjectOf',
+             'dict with strings as keys and values of type number'],
 
             ['optionalObjectWithShapeAndNestedDescription', '\n'.join([
 
@@ -659,10 +661,10 @@ class TestMetaDataConversions(unittest.TestCase):
                 "Those keys have the following types: ",
                 "  - color (string; optional)",
                 "  - fontSize (number; optional)",
-                "  - figure (optional): Figure is a plotly graph object. figure has the following type: dict containing keys 'data', 'layout'.",
+                "  - figure (optional): Figure is a plotly graph object. figure has the following type: dict containing keys 'data', 'layout'.",  # noqa: E501
                 "Those keys have the following types: ",
                 "  - data (list; optional): data is a collection of traces",
-                "  - layout (dict; optional): layout describes the rest of the figure"
+                "  - layout (dict; optional): layout describes the rest of the figure"  # noqa: E501
 
             ])],
 
@@ -699,15 +701,13 @@ class TestMetaDataConversions(unittest.TestCase):
 
 def assert_docstring(assertEqual, docstring):
     for i, line in enumerate(docstring.split('\n')):
-        assertEqual(
-            line,
-            ([
+        assertEqual(line, ([
             "A Table component.",
             "This is a description of the component.",
             "It's multiple lines long.",
             '',
             "Keyword arguments:",
-            "- children (a list of or a singular dash component, string or number; optional)",
+            "- children (a list of or a singular dash component, string or number; optional)",  # noqa: E501
             "- optionalArray (list; optional): Description of optionalArray",
             "- optionalBool (boolean; optional)",
             "- optionalNumber (number; optional)",
diff --git a/tests/test_react.py b/tests/test_react.py
index 89386dca..992343cf 100644
--- a/tests/test_react.py
+++ b/tests/test_react.py
@@ -1,5 +1,4 @@
 import unittest
-from dash.development.base_component import generate_class
 import dash
 import json
 import plotly
@@ -7,7 +6,6 @@ import dash_core_components as dcc
 from dash_html_components import Div
 import dash_renderer
 import pkgutil
-import warnings
 
 from dash.dependencies import Event, Input, Output, State
 from dash import exceptions
@@ -81,9 +79,10 @@ class IntegrationTest(unittest.TestCase):
             }
         )
 
-        self.app.callback('header',
-                       state=[{'id': 'id1'}],
-                       events=[{'id': 'id1'}])
+        self.app.callback(
+            'header',
+            state=[{'id': 'id1'}],
+            events=[{'id': 'id1'}])
         response = self.client.get('/dependencies')
         self.assertEqual(response.status_code, 200)
         self.assertEqual(
@@ -180,7 +179,6 @@ class IntegrationTest(unittest.TestCase):
         @self.app.callback('header', ['id1'])
         def update_header(input1):
             self.assertEqual({'value': 'New Value'}, input1)
-            new_value = input1['value']
             return {
                 'children': Div('New Component')
             }
diff --git a/tests/test_resources.py b/tests/test_resources.py
index 57de57de..469caf16 100644
--- a/tests/test_resources.py
+++ b/tests/test_resources.py
@@ -7,7 +7,9 @@ import warnings
 def generate_components():
     Div = generate_class('Div', ('children', 'id',), 'dash_html_components')
     Span = generate_class('Span', ('children', 'id',), 'dash_html_components')
-    Input = generate_class('Input', ('children', 'id',), 'dash_core_components')
+    Input = generate_class(
+        'Input', ('children', 'id',),
+        'dash_core_components')
     return Div, Span, Input
 
 
@@ -154,9 +156,9 @@ class TestResources(unittest.TestCase):
                 ) in str(w[-1].message)
 
     def test_js_resources(self):
-        #self.resource_test('js')
+        # self.resource_test('js')
         pass
 
     def test_css_resources(self):
-        #self.resource_test('css')
+        # self.resource_test('css')
         pass
diff --git a/tox.ini b/tox.ini
index 8d575514..f442d424 100644
--- a/tox.ini
+++ b/tox.ini
@@ -12,9 +12,11 @@ basepython={env:TOX_PYTHON_27}
 commands =
     python --version
     python -m unittest discover -s tests/
+    flake8 dash setup.py
 
 [testenv:py36]
 basepython={env:TOX_PYTHON_36}
 commands =
     python --version
     python -m unittest discover -s tests/
+    flake8 dash setup.py
