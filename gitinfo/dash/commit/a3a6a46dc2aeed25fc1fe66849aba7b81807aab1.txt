commit a3a6a46dc2aeed25fc1fe66849aba7b81807aab1
Author: Ryan Marren <rymarr@tuta.io>
Date:   Tue Jun 26 22:20:25 2018 -0400

    Real arguments instead of **kwargs

diff --git a/dash/development/base_component.py b/dash/development/base_component.py
index bda33b78..299febe8 100644
--- a/dash/development/base_component.py
+++ b/dash/development/base_component.py
@@ -19,6 +19,29 @@ def _check_if_has_indexable_children(item):
         raise KeyError
 
 
+def _explicitize_args(func):
+    # Python 2
+    if hasattr(func, 'func_code'):
+        varnames = func.func_code.co_varnames
+    # Python 3
+    else:
+        varnames = func.__code__.co_varnames
+
+    def wrapper(*args, **kwargs):
+        if '_explicit_params' in kwargs.keys():
+            raise Exception('Variable _explicit_params should not be set.')
+        kwargs['_explicit_params'] = \
+            list(
+                set(
+                    list(varnames[:len(args)]) + [k for k, _ in kwargs.items()]
+                )
+            )
+        if 'self' in kwargs['_explicit_params']:
+            kwargs['_explicit_params'].remove('self')
+        return func(*args, **kwargs)
+    return wrapper
+
+
 class Component(collections.MutableMapping):
     def __init__(self, **kwargs):
         # pylint: disable=super-init-not-called
@@ -238,7 +261,8 @@ def generate_class_string(typename, props, description, namespace):
     # not all component authors will supply those.
     c = '''class {typename}(Component):
     """{docstring}"""
-    def __init__(self, {default_argtext}):
+    @_explicitize_args
+    def __init__(self, {default_argtext}, **kwargs):
         self._prop_names = {list_of_valid_keys}
         self._type = '{typename}'
         self._namespace = '{namespace}'
@@ -249,11 +273,15 @@ def generate_class_string(typename, props, description, namespace):
         self.available_wildcard_properties =\
             {list_of_valid_wildcard_attr_prefixes}
 
+        _explicit_params = kwargs.pop('_explicit_params')
+        _locals = locals()
+        _locals.update(kwargs)  # For wildcard attrs
+        args = {{k: _locals[k] for k in _explicit_params if k != 'children'}}
+
         for k in {required_args}:
-            if k not in kwargs:
+            if k not in args:
                 raise TypeError(
                     'Required argument `' + k + '` was not specified.')
-
         super({typename}, self).__init__({argtext})
 
     def __repr__(self):
@@ -294,16 +322,20 @@ def generate_class_string(typename, props, description, namespace):
 
     # pylint: disable=unused-variable
     events = '[' + ', '.join(parse_events(props)) + ']'
+    prop_keys = list(props.keys())
     if 'children' in props:
-        default_argtext = 'children=None, **kwargs'
+        prop_keys.remove('children')
+        default_argtext = "children=None, "
         # pylint: disable=unused-variable
-        argtext = 'children=children, **kwargs'
+        argtext = 'children=children, **args'
     else:
-        default_argtext = '**kwargs'
-        argtext = '**kwargs'
+        default_argtext = ""
+        argtext = '**args'
+    default_argtext += ", ".join(
+        ['{:s}=None'.format(p) for p in prop_keys if not p.endswith("-*")]
+    )
 
     required_args = required_props(props)
-
     return c.format(**locals())
 
 
@@ -325,7 +357,8 @@ def generate_class_file(typename, props, description, namespace):
     """
     import_string =\
         "# AUTO GENERATED FILE - DO NOT EDIT\n\n" + \
-        "from dash.development.base_component import Component\n\n\n"
+        "from dash.development.base_component import " + \
+        "Component, _explicitize_args\n\n\n"
     class_string = generate_class_string(
         typename,
         props,
@@ -357,7 +390,7 @@ def generate_class(typename, props, description, namespace):
 
     """
     string = generate_class_string(typename, props, description, namespace)
-    scope = {'Component': Component}
+    scope = {'Component': Component, '_explicitize_args': _explicitize_args}
     # pylint: disable=exec-used
     exec(string, scope)
     result = scope[typename]
diff --git a/tests/development/metadata_test.py b/tests/development/metadata_test.py
index b25364e5..970f7099 100644
--- a/tests/development/metadata_test.py
+++ b/tests/development/metadata_test.py
@@ -1,6 +1,6 @@
 # AUTO GENERATED FILE - DO NOT EDIT
 
-from dash.development.base_component import Component
+from dash.development.base_component import Component, _explicitize_args
 
 
 class Table(Component):
@@ -37,7 +37,8 @@ Those keys have the following types:
 - id (string; optional)
 
 Available events: 'restyle', 'relayout', 'click'"""
-    def __init__(self, children=None, **kwargs):
+    @_explicitize_args
+    def __init__(self, children=None, optionalArray=None, optionalBool=None, optionalFunc=None, optionalNumber=None, optionalObject=None, optionalString=None, optionalSymbol=None, optionalNode=None, optionalElement=None, optionalMessage=None, optionalEnum=None, optionalUnion=None, optionalArrayOf=None, optionalObjectOf=None, optionalObjectWithShapeAndNestedDescription=None, optionalAny=None, customProp=None, customArrayProp=None, id=None, dashEvents=None, **kwargs):
         self._prop_names = ['children', 'optionalArray', 'optionalBool', 'optionalNumber', 'optionalObject', 'optionalString', 'optionalNode', 'optionalElement', 'optionalEnum', 'optionalUnion', 'optionalArrayOf', 'optionalObjectOf', 'optionalObjectWithShapeAndNestedDescription', 'optionalAny', 'customProp', 'customArrayProp', 'data-*', 'aria-*', 'id']
         self._type = 'Table'
         self._namespace = 'TableComponents'
@@ -46,12 +47,16 @@ Available events: 'restyle', 'relayout', 'click'"""
         self.available_properties = ['children', 'optionalArray', 'optionalBool', 'optionalNumber', 'optionalObject', 'optionalString', 'optionalNode', 'optionalElement', 'optionalEnum', 'optionalUnion', 'optionalArrayOf', 'optionalObjectOf', 'optionalObjectWithShapeAndNestedDescription', 'optionalAny', 'customProp', 'customArrayProp', 'data-*', 'aria-*', 'id']
         self.available_wildcard_properties =            ['data-', 'aria-']
 
+        _explicit_params = kwargs.pop('_explicit_params')
+        _locals = locals()
+        _locals.update(kwargs)  # For wildcard attrs
+        args = {k: _locals[k] for k in _explicit_params if k != 'children'}
+
         for k in []:
-            if k not in kwargs:
+            if k not in args:
                 raise TypeError(
                     'Required argument `' + k + '` was not specified.')
-
-        super(Table, self).__init__(children=children, **kwargs)
+        super(Table, self).__init__(children=children, **args)
 
     def __repr__(self):
         if(any(getattr(self, c, None) is not None
diff --git a/tests/development/test_base_component.py b/tests/development/test_base_component.py
index cab2b0a3..15b8d789 100644
--- a/tests/development/test_base_component.py
+++ b/tests/development/test_base_component.py
@@ -12,6 +12,7 @@ from dash.development.base_component import (
     generate_class_string,
     generate_class_file,
     Component,
+    _explicitize_args,
     js_to_py_type,
     create_docstring,
     parse_events
@@ -507,7 +508,8 @@ class TestGenerateClassFile(unittest.TestCase):
         # Import string not included in generated class string
         import_string =\
             "# AUTO GENERATED FILE - DO NOT EDIT\n\n" + \
-            "from dash.development.base_component import Component\n\n\n"
+            "from dash.development.base_component import" + \
+            " Component, _explicitize_args\n\n\n"
 
         # Class string generated from generate_class_string
         self.component_class_string = import_string + generate_class_string(
@@ -684,16 +686,22 @@ class TestGenerateClass(unittest.TestCase):
             ['restyle', 'relayout', 'click']
         )
 
+    # This one is kind of pointless now
     def test_call_signature(self):
+        __init__func = self.ComponentClass.__init__
         # TODO: Will break in Python 3
         # http://stackoverflow.com/questions/2677185/
         self.assertEqual(
-            inspect.getargspec(self.ComponentClass.__init__).args,
-            ['self', 'children']
+            inspect.getargspec(__init__func).args,
+            []
         )
         self.assertEqual(
-            inspect.getargspec(self.ComponentClass.__init__).defaults,
-            (None, )
+            inspect.getargspec(__init__func).varargs,
+            'args'
+        )
+        self.assertEqual(
+            inspect.getargspec(__init__func).keywords,
+            'kwargs'
         )
 
     def test_required_props(self):
