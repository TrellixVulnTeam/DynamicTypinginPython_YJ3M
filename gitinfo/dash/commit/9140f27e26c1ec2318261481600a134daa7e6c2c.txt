commit 9140f27e26c1ec2318261481600a134daa7e6c2c
Author: Ryan Marren <rymarr@tuta.io>
Date:   Thu Jun 28 08:39:23 2018 -0400

    In Python 3, spoof the __init__ function signature.

diff --git a/dash/development/base_component.py b/dash/development/base_component.py
index 299febe8..f0f48de7 100644
--- a/dash/development/base_component.py
+++ b/dash/development/base_component.py
@@ -1,6 +1,7 @@
 import collections
 import copy
 import os
+import inspect
 
 
 def is_number(s):
@@ -28,17 +29,25 @@ def _explicitize_args(func):
         varnames = func.__code__.co_varnames
 
     def wrapper(*args, **kwargs):
-        if '_explicit_params' in kwargs.keys():
-            raise Exception('Variable _explicit_params should not be set.')
-        kwargs['_explicit_params'] = \
+        if '_explicit_args' in kwargs.keys():
+            raise Exception('Variable _explicit_args should not be set.')
+        kwargs['_explicit_args'] = \
             list(
                 set(
                     list(varnames[:len(args)]) + [k for k, _ in kwargs.items()]
                 )
             )
-        if 'self' in kwargs['_explicit_params']:
-            kwargs['_explicit_params'].remove('self')
+        if 'self' in kwargs['_explicit_args']:
+            kwargs['_explicit_args'].remove('self')
         return func(*args, **kwargs)
+
+    # If Python 3, we can set the function signature to be correct
+    if hasattr(inspect, 'signature'):
+        # pylint: disable=no-member
+        new_sig = inspect.signature(wrapper).replace(
+            parameters=inspect.signature(func).parameters.values()
+        )
+        wrapper.__signature__ = new_sig
     return wrapper
 
 
@@ -273,10 +282,10 @@ def generate_class_string(typename, props, description, namespace):
         self.available_wildcard_properties =\
             {list_of_valid_wildcard_attr_prefixes}
 
-        _explicit_params = kwargs.pop('_explicit_params')
+        _explicit_args = kwargs.pop('_explicit_args')
         _locals = locals()
         _locals.update(kwargs)  # For wildcard attrs
-        args = {{k: _locals[k] for k in _explicit_params if k != 'children'}}
+        args = {{k: _locals[k] for k in _explicit_args if k != 'children'}}
 
         for k in {required_args}:
             if k not in args:
diff --git a/dash/version.py b/dash/version.py
index 8c306aa6..81edede8 100644
--- a/dash/version.py
+++ b/dash/version.py
@@ -1 +1 @@
-__version__ = '0.21.1'
+__version__ = '0.22.0'
diff --git a/tests/development/metadata_test.py b/tests/development/metadata_test.py
index 970f7099..40f38c0d 100644
--- a/tests/development/metadata_test.py
+++ b/tests/development/metadata_test.py
@@ -47,10 +47,10 @@ Available events: 'restyle', 'relayout', 'click'"""
         self.available_properties = ['children', 'optionalArray', 'optionalBool', 'optionalNumber', 'optionalObject', 'optionalString', 'optionalNode', 'optionalElement', 'optionalEnum', 'optionalUnion', 'optionalArrayOf', 'optionalObjectOf', 'optionalObjectWithShapeAndNestedDescription', 'optionalAny', 'customProp', 'customArrayProp', 'data-*', 'aria-*', 'id']
         self.available_wildcard_properties =            ['data-', 'aria-']
 
-        _explicit_params = kwargs.pop('_explicit_params')
+        _explicit_args = kwargs.pop('_explicit_args')
         _locals = locals()
         _locals.update(kwargs)  # For wildcard attrs
-        args = {k: _locals[k] for k in _explicit_params if k != 'children'}
+        args = {k: _locals[k] for k in _explicit_args if k != 'children'}
 
         for k in []:
             if k not in args:
diff --git a/tests/development/test_base_component.py b/tests/development/test_base_component.py
index 15b8d789..71bf32e0 100644
--- a/tests/development/test_base_component.py
+++ b/tests/development/test_base_component.py
@@ -693,16 +693,47 @@ class TestGenerateClass(unittest.TestCase):
         # http://stackoverflow.com/questions/2677185/
         self.assertEqual(
             inspect.getargspec(__init__func).args,
-            []
+            ['self',
+             'children',
+             'optionalArray',
+             'optionalBool',
+             'optionalFunc',
+             'optionalNumber',
+             'optionalObject',
+             'optionalString',
+             'optionalSymbol',
+             'optionalNode',
+             'optionalElement',
+             'optionalMessage',
+             'optionalEnum',
+             'optionalUnion',
+             'optionalArrayOf',
+             'optionalObjectOf',
+             'optionalObjectWithShapeAndNestedDescription',
+             'optionalAny',
+             'customProp',
+             'customArrayProp',
+             'id',
+             'dashEvents'] if hasattr(inspect, 'signature') else []
+
+
         )
         self.assertEqual(
             inspect.getargspec(__init__func).varargs,
-            'args'
+            None if hasattr(inspect, 'signature') else 'args'
         )
         self.assertEqual(
             inspect.getargspec(__init__func).keywords,
             'kwargs'
         )
+        self.assertEqual(
+            inspect.getargspec(__init__func).defaults,
+            (None, None, None, None, None,
+             None, None, None, None, None,
+             None, None, None, None, None,
+             None, None, None,
+             None, None, None) if hasattr(inspect, 'signature') else None
+        )
 
     def test_required_props(self):
         with self.assertRaises(Exception):
