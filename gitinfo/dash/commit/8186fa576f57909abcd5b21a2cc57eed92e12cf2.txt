commit 8186fa576f57909abcd5b21a2cc57eed92e12cf2
Author: alexcjohnson <alex@plot.ly>
Date:   Thu Feb 6 12:44:36 2020 -0500

    backward compatibility fix for callback_context.triggered

diff --git a/dash/_callback_context.py b/dash/_callback_context.py
index 7a31afd7..ee024359 100644
--- a/dash/_callback_context.py
+++ b/dash/_callback_context.py
@@ -18,6 +18,14 @@ def has_context(func):
     return assert_context
 
 
+class FalsyList(list):
+    def __bool__(self):
+        return False
+
+
+falsy_triggered = FalsyList([{"prop_id": ".", "value": None}])
+
+
 # pylint: disable=no-init
 class CallbackContext:
     @property
@@ -33,7 +41,11 @@ class CallbackContext:
     @property
     @has_context
     def triggered(self):
-        return getattr(flask.g, "triggered_inputs", [])
+        # For backward compatibility: previously `triggered` always had a
+        # value - to avoid breaking existing apps, add a dummy item but
+        # make the list still look falsy. So `if ctx.triggered` will make it
+        # look empty, but you can still do `triggered[0]["prop_id"].split(".")`
+        return getattr(flask.g, "triggered_inputs", []) or falsy_triggered
 
     @property
     @has_context
diff --git a/tests/integration/callbacks/test_callback_context.py b/tests/integration/callbacks/test_callback_context.py
index e7fcab18..5fd435eb 100644
--- a/tests/integration/callbacks/test_callback_context.py
+++ b/tests/integration/callbacks/test_callback_context.py
@@ -73,3 +73,36 @@ def test_cbcx003_no_callback_context():
     for attr in ["inputs", "states", "triggered", "response"]:
         with pytest.raises(MissingCallbackContextException):
             getattr(callback_context, attr)
+
+
+def test_cbcx004_triggered_backward_compat(dash_duo):
+    app = Dash(__name__)
+    app.layout = html.Div([
+        html.Button("click!", id="btn"),
+        html.Div(id="out")
+    ])
+
+    @app.callback(Output("out", "children"), [Input("btn", "n_clicks")])
+    def report_triggered(n):
+        triggered = callback_context.triggered
+        bool_val = "truthy" if triggered else "falsy"
+        split_propid = repr(triggered[0]["prop_id"].split("."))
+        full_val = repr(triggered)
+        return "triggered is {}, has prop/id {}, and full value {}".format(
+            bool_val, split_propid, full_val
+        )
+
+    dash_duo.start_server(app)
+
+    dash_duo.wait_for_text_to_equal(
+        "#out",
+        "triggered is falsy, has prop/id ['', ''], and full value "
+        "[{'prop_id': '.', 'value': None}]"
+    )
+
+    dash_duo.find_element("#btn").click()
+    dash_duo.wait_for_text_to_equal(
+        "#out",
+        "triggered is truthy, has prop/id ['btn', 'n_clicks'], and full value "
+        "[{'prop_id': 'btn.n_clicks', 'value': 1}]"
+    )
