commit 57391f42be07f5b0bfd42a677edda8945a89d550
Author: alexcjohnson <johnson.alex.c@gmail.com>
Date:   Mon Mar 30 21:55:23 2020 -0400

    Apply suggestions from code review
    
    Co-Authored-By: Marc-Andr√© Rivet <Marc-Andre-Rivet@users.noreply.github.com>

diff --git a/CHANGELOG.md b/CHANGELOG.md
index edc2b4c8..1e8a48db 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -4,7 +4,7 @@ This project adheres to [Semantic Versioning](http://semver.org/).
 
 ## [Unreleased]
 ### Added
-- [#1103](https://github.com/plotly/dash/pull/1103) Wildcard IDs and callbacks. Component IDs can be dictionaries, and callbacks can reference patterns of components, using three different wildcards: `All`, `MATCH`, and `ALLSMALLER`, available from `dash.dependencies`. This lets you create components on demand, and have callbacks respond to any and all of them. To help with this, `dash.callback_context` gets three new entries: `outputs_list`, `inputs_list`, and `states_list`, which contain all the ids, properties, and except for the outputs, the property values from all matched components.
+- [#1103](https://github.com/plotly/dash/pull/1103) Wildcard IDs and callbacks. Component IDs can be dictionaries, and callbacks can reference patterns of components, using three different wildcards: `ALL`, `MATCH`, and `ALLSMALLER`, available from `dash.dependencies`. This lets you create components on demand, and have callbacks respond to any and all of them. To help with this, `dash.callback_context` gets three new entries: `outputs_list`, `inputs_list`, and `states_list`, which contain all the ids, properties, and except for the outputs, the property values from all matched components.
 
 - [#1134](https://github.com/plotly/dash/pull/1134) Allow `dash.run_server()` host and port parameters to be set with environment variables HOST & PORT, respectively
 
diff --git a/dash-renderer/src/reducers/reducer.js b/dash-renderer/src/reducers/reducer.js
index 36004db6..54142237 100644
--- a/dash-renderer/src/reducers/reducer.js
+++ b/dash-renderer/src/reducers/reducer.js
@@ -49,7 +49,6 @@ function mainReducer() {
 function getInputHistoryState(itempath, props, state) {
     const {graphs, layout, paths} = state;
     const {InputGraph} = graphs;
-    // TODO: wildcards?
     const keyObj = filter(equals(itempath), paths.strs);
     let historyEntry;
     if (!isEmpty(keyObj)) {
@@ -58,7 +57,6 @@ function getInputHistoryState(itempath, props, state) {
         keys(props).forEach(propKey => {
             const inputKey = `${id}.${propKey}`;
             if (
-                // TODO: wildcards?
                 InputGraph.hasNode(inputKey) &&
                 InputGraph.dependenciesOf(inputKey).length > 0
             ) {
