commit caceaaaebc91e2acd7fa7d663eb02fc0d1c7eb47
Author: alexcjohnson <alex@plot.ly>
Date:   Wed Apr 1 05:02:37 2020 -0400

    fix and test wildcards with same keys for different element classes

diff --git a/dash-renderer/src/actions/dependencies.js b/dash-renderer/src/actions/dependencies.js
index fd5ebf44..00d9fe61 100644
--- a/dash-renderer/src/actions/dependencies.js
+++ b/dash-renderer/src/actions/dependencies.js
@@ -1247,11 +1247,13 @@ export function getCallbacksInLayout(graphs, paths, layoutChunk, opts) {
         if (outIdCallbacks) {
             for (const property in outIdCallbacks) {
                 const cb = getCallbackByOutput(graphs, paths, id, property);
-                // callbacks found in the layout by output should always run,
-                // ie this is the initial call of this callback even if it's
-                // not the page initialization but just a new layout chunk
-                cb.initialCall = true;
-                addCallback(cb);
+                if (cb) {
+                    // callbacks found in the layout by output should always run
+                    // ie this is the initial call of this callback even if it's
+                    // not the page initialization but just a new layout chunk
+                    cb.initialCall = true;
+                    addCallback(cb);
+                }
             }
         }
         if (!outputsOnly && inIdCallbacks) {
diff --git a/tests/integration/callbacks/test_wildcards.py b/tests/integration/callbacks/test_wildcards.py
index d59d66f3..e712130a 100644
--- a/tests/integration/callbacks/test_wildcards.py
+++ b/tests/integration/callbacks/test_wildcards.py
@@ -312,3 +312,61 @@ def test_cbwc002_fibonacci_app(clientside, dash_duo):
     dash_duo.wait_for_text_to_equal("#sum", "1 elements, sum: 0")
     dash_duo.find_element("#n").send_keys(Keys.DOWN)
     dash_duo.wait_for_text_to_equal("#sum", "0 elements, sum: 0")
+
+
+def test_cbwc003_same_keys(dash_duo):
+    app = dash.Dash(__name__, suppress_callback_exceptions=True)
+
+    app.layout = html.Div(
+        [
+            html.Button("Add Filter", id="add-filter", n_clicks=0),
+            html.Div(id="container", children=[]),
+        ]
+    )
+
+    @app.callback(
+        Output("container", "children"),
+        [Input("add-filter", "n_clicks")],
+        [State("container", "children")],
+    )
+    def display_dropdowns(n_clicks, children):
+        new_element = html.Div(
+            [
+                dcc.Dropdown(
+                    id={"type": "dropdown", "index": n_clicks},
+                    options=[
+                        {"label": i, "value": i} for i in ["NYC", "MTL", "LA", "TOKYO"]
+                    ],
+                ),
+                html.Div(id={"type": "output", "index": n_clicks}),
+            ]
+        )
+        return children + [new_element]
+
+    @app.callback(
+        Output({"type": "output", "index": MATCH}, "children"),
+        [Input({"type": "dropdown", "index": MATCH}, "value")],
+        [State({"type": "dropdown", "index": MATCH}, "id")],
+    )
+    def display_output(value, id):
+        return html.Div("Dropdown {} = {}".format(id["index"], value))
+
+    dash_duo.start_server(app)
+    dash_duo.wait_for_text_to_equal("#add-filter", "Add Filter")
+    dash_duo.select_dcc_dropdown(
+        '#\\{\\"index\\"\\:0\\,\\"type\\"\\:\\"dropdown\\"\\}', "LA"
+    )
+    dash_duo.wait_for_text_to_equal(
+        '#\\{\\"index\\"\\:0\\,\\"type\\"\\:\\"output\\"\\}', "Dropdown 0 = LA"
+    )
+    dash_duo.find_element("#add-filter").click()
+    dash_duo.select_dcc_dropdown(
+        '#\\{\\"index\\"\\:1\\,\\"type\\"\\:\\"dropdown\\"\\}', "MTL"
+    )
+    dash_duo.wait_for_text_to_equal(
+        '#\\{\\"index\\"\\:1\\,\\"type\\"\\:\\"output\\"\\}', "Dropdown 1 = MTL"
+    )
+    dash_duo.wait_for_text_to_equal(
+        '#\\{\\"index\\"\\:0\\,\\"type\\"\\:\\"output\\"\\}', "Dropdown 0 = LA"
+    )
+    dash_duo.wait_for_no_elements(dash_duo.devtools_error_count_locator)
