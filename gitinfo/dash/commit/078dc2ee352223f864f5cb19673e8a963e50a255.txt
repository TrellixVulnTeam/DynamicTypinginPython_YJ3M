commit 078dc2ee352223f864f5cb19673e8a963e50a255
Author: chriddyp <chris@plot.ly>
Date:   Wed Sep 27 23:01:22 2017 -0400

    simple componentShouldMount in tree

diff --git a/src/APIController.react.js b/src/APIController.react.js
index 1335d656..36a57548 100644
--- a/src/APIController.react.js
+++ b/src/APIController.react.js
@@ -1,7 +1,7 @@
 import {connect} from 'react-redux'
 import {contains, isEmpty, isNil} from 'ramda'
 import React, {Component, PropTypes} from 'react';
-import renderTree from './renderTree';
+import TreeContainer from './TreeContainer';
 import {
     computeGraphs,
     computePaths,
@@ -97,7 +97,7 @@ class UnconnectedContainer extends Component {
         else if (appLifecycle === APP_STATES('HYDRATED')) {
             return (
                 <div id="_dash-app-content">
-                    {renderTree(layout, dependenciesRequest.content)}
+                    <TreeContainer layout={layout}/>
                 </div>
             );
         }
diff --git a/src/renderTree.js b/src/TreeContainer.js
similarity index 69%
rename from src/renderTree.js
rename to src/TreeContainer.js
index e3e18ee2..40a7295e 100644
--- a/src/renderTree.js
+++ b/src/TreeContainer.js
@@ -1,11 +1,25 @@
 'use strict'
 
 import R from 'ramda';
-import React, {PropTypes} from 'react';
+import React, {Component, PropTypes} from 'react';
 import Registry from './registry';
 import NotifyObservers from './components/core/NotifyObservers.react';
 
-export default function render(component) {
+export default class TreeContainer extends Component {
+    shouldComponentUpdate(nextProps) {
+        return nextProps.layout !== this.props.layout;
+    }
+
+    render() {
+        return render(this.props.layout);
+    }
+}
+
+TreeContainer.propTypes = {
+    layout: PropTypes.object,
+}
+
+function render(component) {
     if (R.contains(R.type(component), ['String', 'Number', 'Null'])) {
         return component;
     }
@@ -13,7 +27,7 @@ export default function render(component) {
     // Create list of child elements
     let children;
 
-    const props = R.propOr({}, 'props', component);
+    const componentProps = R.propOr({}, 'props', component);
 
     if (!R.has('props', component) ||
         !R.has('children', component.props) ||
@@ -34,8 +48,9 @@ export default function render(component) {
         // One or multiple objects
         // Recursively render the tree
         // TODO - I think we should pass in `key` here.
-        children = (Array.isArray(props.children) ? props.children : [props.children])
-                   .map(render);
+        children = (Array.isArray(componentProps.children) ?
+                    componentProps.children : [componentProps.children])
+                    .map(render);
 
     }
 
@@ -60,13 +75,12 @@ export default function render(component) {
     );
 
     return (
-        <NotifyObservers id={props.id}>
+        <NotifyObservers id={componentProps.id}>
             {parent}
         </NotifyObservers>
     );
 }
 
 render.propTypes = {
-    children: PropTypes.object,
-    id: PropTypes.string
+    children: PropTypes.object
 }
