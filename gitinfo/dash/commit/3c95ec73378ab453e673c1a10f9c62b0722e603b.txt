commit 3c95ec73378ab453e673c1a10f9c62b0722e603b
Author: alexcjohnson <alex@plot.ly>
Date:   Mon Sep 16 23:08:31 2019 -0400

    switch ramda contains to includes
    contains is deprecated

diff --git a/dash-renderer/src/APIController.react.js b/dash-renderer/src/APIController.react.js
index 63866327..ae9f84aa 100644
--- a/dash-renderer/src/APIController.react.js
+++ b/dash-renderer/src/APIController.react.js
@@ -1,5 +1,5 @@
 import {connect} from 'react-redux';
-import {contains, isEmpty, isNil} from 'ramda';
+import {includes, isEmpty, isNil} from 'ramda';
 import React, {Component} from 'react';
 import PropTypes from 'prop-types';
 import TreeContainer from './TreeContainer';
@@ -107,13 +107,13 @@ class UnconnectedContainer extends Component {
 
         if (
             layoutRequest.status &&
-            !contains(layoutRequest.status, [STATUS.OK, 'loading'])
+            !includes(layoutRequest.status, [STATUS.OK, 'loading'])
         ) {
             return <div className="_dash-error">Error loading layout</div>;
         } else if (
             errorLoading ||
             (dependenciesRequest.status &&
-                !contains(dependenciesRequest.status, [STATUS.OK, 'loading']))
+                !includes(dependenciesRequest.status, [STATUS.OK, 'loading']))
         ) {
             return (
                 <div className="_dash-error">Error loading dependencies</div>
diff --git a/dash-renderer/src/TreeContainer.js b/dash-renderer/src/TreeContainer.js
index d6d99fe9..12c78df0 100644
--- a/dash-renderer/src/TreeContainer.js
+++ b/dash-renderer/src/TreeContainer.js
@@ -7,10 +7,10 @@ import {
     addIndex,
     any,
     concat,
-    contains,
     filter,
     forEach,
     has,
+    includes,
     isEmpty,
     isNil,
     keysIn,
@@ -28,7 +28,7 @@ import checkPropTypes from 'check-prop-types';
 
 const SIMPLE_COMPONENT_TYPES = ['String', 'Number', 'Null', 'Boolean'];
 const isSimpleComponent = component =>
-    contains(type(component), SIMPLE_COMPONENT_TYPES);
+    includes(type(component), SIMPLE_COMPONENT_TYPES);
 
 function validateComponent(componentDefinition) {
     if (type(componentDefinition) === 'Array') {
@@ -313,7 +313,7 @@ function getLoadingState(layout, requestQueue) {
             const controllerId = isNil(r.controllerId) ? '' : r.controllerId;
             if (
                 r.status === 'loading' &&
-                any(id => contains(id, controllerId), ids)
+                any(id => includes(id, controllerId), ids)
             ) {
                 isLoading = true;
                 [loadingComponent, loadingProp] = r.controllerId.split('.');
diff --git a/dash-renderer/src/actions/index.js b/dash-renderer/src/actions/index.js
index 3fb46cbc..0c9974c9 100644
--- a/dash-renderer/src/actions/index.js
+++ b/dash-renderer/src/actions/index.js
@@ -4,12 +4,12 @@ import {
     any,
     append,
     concat,
-    contains,
     findIndex,
     findLastIndex,
     flatten,
     flip,
     has,
+    includes,
     intersection,
     isEmpty,
     keys,
@@ -206,7 +206,7 @@ function reduceInputIds(nodeIds, InputGraph) {
             pluck('outputs', slice(0, i, sortedInputOutputPairs))
         );
         pair.outputs.forEach(output => {
-            if (contains(output, outputsThatWillBeUpdated)) {
+            if (includes(output, outputsThatWillBeUpdated)) {
                 pair.excludedOutputs.push(output);
             }
         });
@@ -244,7 +244,7 @@ export function notifyObservers(payload) {
                  * We only need to update the output once for this
                  * update, so keep outputObservers unique.
                  */
-                if (!contains(outputId, outputObservers)) {
+                if (!includes(outputId, outputObservers)) {
                     outputObservers.push(outputId);
                 }
             });
@@ -252,7 +252,7 @@ export function notifyObservers(payload) {
 
         if (excludedOutputs) {
             outputObservers = reject(
-                flip(contains)(excludedOutputs),
+                flip(includes)(excludedOutputs),
                 outputObservers
             );
         }
@@ -323,7 +323,7 @@ export function notifyObservers(payload) {
              */
             const controllerIsInExistingQueue = any(
                 r =>
-                    contains(r.controllerId, controllers) &&
+                    includes(r.controllerId, controllers) &&
                     r.status === 'loading',
                 requestQueue
             );
@@ -468,7 +468,7 @@ function updateOutput(
 
     payload.inputs = inputs.map(inputObject => {
         // Make sure the component id exists in the layout
-        if (!contains(inputObject.id, validKeys)) {
+        if (!includes(inputObject.id, validKeys)) {
             throw new ReferenceError(
                 'An invalid input object was used in an ' +
                     '`Input` of a Dash callback. ' +
@@ -498,13 +498,13 @@ function updateOutput(
     const inputsPropIds = inputs.map(p => `${p.id}.${p.property}`);
 
     payload.changedPropIds = changedPropIds.filter(p =>
-        contains(p, inputsPropIds)
+        includes(p, inputsPropIds)
     );
 
     if (state.length > 0) {
         payload.state = state.map(stateObject => {
             // Make sure the component id exists in the layout
-            if (!contains(stateObject.id, validKeys)) {
+            if (!includes(stateObject.id, validKeys)) {
                 throw new ReferenceError(
                     'An invalid input object was used in a ' +
                         '`State` object of a Dash callback. ' +
@@ -782,7 +782,7 @@ function updateOutput(
                          * new children components
                          */
                         if (
-                            contains(type(newChildren), ['Array', 'Object']) &&
+                            includes(type(newChildren), ['Array', 'Object']) &&
                             !isEmpty(newChildren)
                         ) {
                             /*
diff --git a/dash-renderer/src/components/error/ComponentErrorBoundary.react.js b/dash-renderer/src/components/error/ComponentErrorBoundary.react.js
index 3f802691..5b1e40b8 100644
--- a/dash-renderer/src/components/error/ComponentErrorBoundary.react.js
+++ b/dash-renderer/src/components/error/ComponentErrorBoundary.react.js
@@ -2,7 +2,7 @@ import {connect} from 'react-redux';
 import {Component} from 'react';
 import PropTypes from 'prop-types';
 import Radium from 'radium';
-import {contains, pluck} from 'ramda';
+import {includes, pluck} from 'ramda';
 import uniqid from 'uniqid';
 import {onError, revert} from '../../actions';
 
@@ -34,7 +34,7 @@ class UnconnectedComponentErrorBoundary extends Component {
     componentDidUpdate(prevProps, prevState) {
         const {error} = this.props;
         const {myUID} = this.state;
-        const hasError = contains(myUID, pluck('myUID')(error.frontEnd));
+        const hasError = includes(myUID, pluck('myUID')(error.frontEnd));
         if (
             !hasError &&
             prevState.oldChildren !== prevProps.children &&
@@ -50,7 +50,7 @@ class UnconnectedComponentErrorBoundary extends Component {
     render() {
         const {error} = this.props;
         const {myUID} = this.state;
-        const hasError = contains(myUID, pluck('myUID')(error.frontEnd));
+        const hasError = includes(myUID, pluck('myUID')(error.frontEnd));
 
         if (hasError) {
             return this.state.oldChildren;
diff --git a/dash-renderer/src/exceptions.js b/dash-renderer/src/exceptions.js
index 68c9c498..654442a5 100644
--- a/dash-renderer/src/exceptions.js
+++ b/dash-renderer/src/exceptions.js
@@ -1,4 +1,4 @@
-import {contains, has} from 'ramda';
+import {has, includes} from 'ramda';
 
 export function propTypeErrorHandler(message, props, type) {
     /*
@@ -37,14 +37,14 @@ export function propTypeErrorHandler(message, props, type) {
 
     const messageParts = message.split('`');
     let errorMessage;
-    if (contains('is marked as required', message)) {
+    if (includes('is marked as required', message)) {
         const invalidPropPath = messageParts[1];
         errorMessage = `${invalidPropPath} in ${type}`;
         if (props.id) {
             errorMessage += ` with ID "${props.id}"`;
         }
         errorMessage += ` is required but it was not provided.`;
-    } else if (contains('Bad object', message)) {
+    } else if (includes('Bad object', message)) {
         /*
          * Handle .exact errors
          * https://github.com/facebook/prop-types/blob/v15.7.2/factoryWithTypeCheckers.js#L438-L442
@@ -55,8 +55,8 @@ export function propTypeErrorHandler(message, props, type) {
             '.\nBad' +
             message.split('.\nBad')[1];
     } else if (
-        contains('Invalid ', message) &&
-        contains(' supplied to ', message)
+        includes('Invalid ', message) &&
+        includes(' supplied to ', message)
     ) {
         const invalidPropPath = messageParts[1];
 
@@ -71,7 +71,7 @@ export function propTypeErrorHandler(message, props, type) {
          * In particular, oneOfType.
          * https://github.com/facebook/prop-types/blob/v15.7.2/factoryWithTypeCheckers.js#L388
          */
-        if (contains(', expected ', message)) {
+        if (includes(', expected ', message)) {
             const expectedPropType = message.split(', expected ')[1];
             errorMessage += `\nExpected ${expectedPropType}`;
         }
@@ -81,7 +81,7 @@ export function propTypeErrorHandler(message, props, type) {
          * In particular, oneOfType.
          * https://github.com/facebook/prop-types/blob/v15.7.2/factoryWithTypeCheckers.js#L388
          */
-        if (contains(' of type `', message)) {
+        if (includes(' of type `', message)) {
             const invalidPropTypeProvided = message
                 .split(' of type `')[1]
                 .split('`')[0];
@@ -100,7 +100,7 @@ export function propTypeErrorHandler(message, props, type) {
                 2
             );
             if (jsonSuppliedValue) {
-                if (contains('\n', jsonSuppliedValue)) {
+                if (includes('\n', jsonSuppliedValue)) {
                     errorMessage += `\nValue provided: \n${jsonSuppliedValue}`;
                 } else {
                     errorMessage += `\nValue provided: ${jsonSuppliedValue}`;
diff --git a/dash-renderer/src/reducers/layout.js b/dash-renderer/src/reducers/layout.js
index 53b0d835..d9a6b640 100644
--- a/dash-renderer/src/reducers/layout.js
+++ b/dash-renderer/src/reducers/layout.js
@@ -1,4 +1,4 @@
-import {append, assocPath, contains, lensPath, mergeRight, view} from 'ramda';
+import {append, assocPath, includes, lensPath, mergeRight, view} from 'ramda';
 
 import {getAction} from '../actions/constants';
 
@@ -6,7 +6,7 @@ const layout = (state = {}, action) => {
     if (action.type === getAction('SET_LAYOUT')) {
         return action.payload;
     } else if (
-        contains(action.type, [
+        includes(action.type, [
             'UNDO_PROP_CHANGE',
             'REDO_PROP_CHANGE',
             getAction('ON_PROP_CHANGE'),
