commit 4d3eead4b329c56ec2822033f52464ba89cf22e0
Author: alexcjohnson <alex@plot.ly>
Date:   Tue Jul 9 16:29:34 2019 -0400

    generalize createApiReducer

diff --git a/dash-renderer/src/reducers/api.js b/dash-renderer/src/reducers/api.js
index 1b759d6c..89a75d75 100644
--- a/dash-renderer/src/reducers/api.js
+++ b/dash-renderer/src/reducers/api.js
@@ -1,6 +1,6 @@
 import {assoc, assocPath, mergeRight} from 'ramda';
 
-function createApiReducer(store) {
+export default function createApiReducer(store) {
     return function ApiReducer(state = {}, action) {
         let newState = state;
         if (action.type === store) {
@@ -33,8 +33,3 @@ function createApiReducer(store) {
         return newState;
     };
 }
-
-export const dependenciesRequest = createApiReducer('dependenciesRequest');
-export const layoutRequest = createApiReducer('layoutRequest');
-export const reloadRequest = createApiReducer('reloadRequest');
-export const loginRequest = createApiReducer('loginRequest');
diff --git a/dash-renderer/src/reducers/reducer.js b/dash-renderer/src/reducers/reducer.js
index 242c3f2b..11231346 100644
--- a/dash-renderer/src/reducers/reducer.js
+++ b/dash-renderer/src/reducers/reducer.js
@@ -1,5 +1,14 @@
 'use strict';
-import {concat, equals, filter, isEmpty, keys, lensPath, view} from 'ramda';
+import {
+    concat,
+    equals,
+    filter,
+    forEach,
+    isEmpty,
+    keys,
+    lensPath,
+    view,
+} from 'ramda';
 import {combineReducers} from 'redux';
 import layout from './layout';
 import graphs from './dependencyGraph';
@@ -9,24 +18,34 @@ import appLifecycle from './appLifecycle';
 import history from './history';
 import error from './error';
 import hooks from './hooks';
-import * as API from './api';
+import createApiReducer from './api';
 import config from './config';
 
-const reducer = combineReducers({
-    appLifecycle,
-    layout,
-    graphs,
-    paths,
-    requestQueue,
-    config,
-    history,
-    error,
-    hooks,
-    dependenciesRequest: API.dependenciesRequest,
-    layoutRequest: API.layoutRequest,
-    reloadRequest: API.reloadRequest,
-    loginRequest: API.loginRequest,
-});
+export const apiRequests = [
+    'dependenciesRequest',
+    'layoutRequest',
+    'reloadRequest',
+    'loginRequest',
+];
+
+function mainReducer() {
+    const parts = {
+        appLifecycle,
+        layout,
+        graphs,
+        paths,
+        requestQueue,
+        config,
+        history,
+        error,
+        hooks,
+    };
+    forEach(r => {
+        parts[r] = createApiReducer(r);
+    }, apiRequests);
+
+    return combineReducers(parts);
+}
 
 function getInputHistoryState(itempath, props, state) {
     const {graphs, layout, paths} = state;
@@ -94,13 +113,20 @@ function recordHistory(reducer) {
 
 function reloaderReducer(reducer) {
     return function(state, action) {
+        const {history, config, hooks} = state || {};
+        let newState = state;
         if (action.type === 'RELOAD') {
-            const {history, config} = state;
-            // eslint-disable-next-line no-param-reassign
-            state = {history, config};
+            newState = {history, config, hooks};
+        } else if (action.type === 'SET_CONFIG') {
+            // new config also reloads, and even clears history,
+            // in case there's a new user or even a totally different app!
+            // hooks are set at an even higher level than config though.
+            newState = {hooks};
         }
-        return reducer(state, action);
+        return reducer(newState, action);
     };
 }
 
-export default reloaderReducer(recordHistory(reducer));
+export function createReducer() {
+    return reloaderReducer(recordHistory(mainReducer()));
+}
diff --git a/dash-renderer/src/store.js b/dash-renderer/src/store.js
index b098f556..10d28813 100644
--- a/dash-renderer/src/store.js
+++ b/dash-renderer/src/store.js
@@ -2,21 +2,25 @@
 
 import {createStore, applyMiddleware} from 'redux';
 import thunk from 'redux-thunk';
-import reducer from './reducers/reducer';
+import {createReducer} from './reducers/reducer';
 
 let store;
 
 /**
  * Initialize a Redux store with thunk, plus logging (only in development mode) middleware
  *
+ * @param {bool} reset: discard any previous store
+ *
  * @returns {Store<GenericStoreEnhancer>}
  *  An initialized redux store with middleware and possible hot reloading of reducers
  */
-const initializeStore = () => {
-    if (store) {
+const initializeStore = (reset) => {
+    if (store && !reset) {
         return store;
     }
 
+    const reducer = createReducer();
+
     // only attach logger to middleware in non-production mode
     store =
         process.env.NODE_ENV === 'production' // eslint-disable-line no-process-env
@@ -28,13 +32,15 @@ const initializeStore = () => {
                   applyMiddleware(thunk)
               );
 
-    // TODO - Protect this under a debug mode?
-    window.store = store; /* global window:true */
+    if (!reset) {
+        // TODO - Protect this under a debug mode?
+        window.store = store; /* global window:true */
+    }
 
     if (module.hot) {
         // Enable hot module replacement for reducers
         module.hot.accept('./reducers/reducer', () => {
-            const nextRootReducer = require('./reducers/reducer');
+            const nextRootReducer = require('./reducers/reducer').createReducer();
 
             store.replaceReducer(nextRootReducer);
         });
