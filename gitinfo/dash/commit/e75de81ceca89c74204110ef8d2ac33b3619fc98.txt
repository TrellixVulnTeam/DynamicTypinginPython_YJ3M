commit e75de81ceca89c74204110ef8d2ac33b3619fc98
Author: alexcjohnson <alex@plot.ly>
Date:   Thu Jun 6 20:16:38 2019 -0400

    prevent changing some config keys or adding any new ones

diff --git a/dash/_utils.py b/dash/_utils.py
index 740f946d..dcd83b1c 100644
--- a/dash/_utils.py
+++ b/dash/_utils.py
@@ -75,8 +75,28 @@ class AttributeDict(dict):
         try:
             return self[key]
         except KeyError:
-            # to conform with __getattr__ spec
-            raise AttributeError(key)
+            pass
+        # to conform with __getattr__ spec
+        # but get out of the except block so it doesn't look like a nested err
+        raise AttributeError(key)
+
+    def set_read_only(self, names, msg='Attribute is read-only'):
+        object.__setattr__(self, '_read_only', names)
+        object.__setattr__(self, '_read_only_msg', msg)
+
+    def finalize(self, msg='Object is final: No new keys may be added.'):
+        """Prevent any new keys being set"""
+        object.__setattr__(self, '_final', msg)
+
+    def __setitem__(self, key, val):
+        if key in self.__dict__.get('_read_only', []):
+            raise AttributeError(self._read_only_msg, key)
+
+        final_msg = self.__dict__.get('_final')
+        if final_msg and key not in self:
+            raise AttributeError(final_msg, key)
+
+        return super(AttributeDict, self).__setitem__(key, val)
 
     # pylint: disable=inconsistent-return-statements
     def first(self, *names):
diff --git a/dash/dash.py b/dash/dash.py
index 3b561ea5..48291c17 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -274,6 +274,20 @@ class Dash(object):
                 False),
             show_undo_redo=show_undo_redo
         )
+        self.config.set_read_only([
+            'name',
+            'assets_folder',
+            'assets_url_path',
+            'url_base_pathname',
+            'routes_pathname_prefix',
+            'requests_pathname_prefix',
+            'serve_locally',
+            'compress',
+        ], 'Read-only: can only be set in the Dash constructor')
+        self.config.finalize(
+            'Invalid config key. Some settings are only available '
+            'via the Dash constructor'
+        )
 
         # list of dependencies
         self.callback_map = {}
diff --git a/tests/unit/dash/test_utils.py b/tests/unit/dash/test_utils.py
new file mode 100644
index 00000000..409cf7a8
--- /dev/null
+++ b/tests/unit/dash/test_utils.py
@@ -0,0 +1,62 @@
+import dash._utils as utils
+import pytest
+
+
+def test_attribute_dict():
+    a = utils.AttributeDict()
+
+    assert str(a) == '{}'
+    with pytest.raises(AttributeError):
+        a.k
+    with pytest.raises(KeyError):
+        a['k']
+    assert a.first('no', 'k', 'nope') is None
+
+    a.k = 1
+
+    assert a.k == 1
+    assert a['k'] == 1
+    assert a.first('no', 'k', 'nope') == 1
+
+    a['k'] = 2
+
+    assert a.k == 2
+    assert a['k'] == 2
+
+    a.set_read_only(['k', 'q'], 'boo')
+
+    with pytest.raises(AttributeError) as err:
+        a.k = 3
+    assert err.value.args == ('boo', 'k')
+    assert a.k == 2
+
+    with pytest.raises(AttributeError) as err:
+        a['k'] = 3
+    assert err.value.args == ('boo', 'k')
+    assert a.k == 2
+
+    a.set_read_only(['q'])
+
+    a.k = 3
+    assert a.k == 3
+
+    with pytest.raises(AttributeError) as err:
+        a.q = 3
+    assert err.value.args == ('Attribute is read-only', 'q')
+    assert 'q' not in a
+
+    a.finalize('nope')
+
+    with pytest.raises(AttributeError) as err:
+        a.x = 4
+    assert err.value.args == ('nope', 'x')
+    assert 'x' not in a
+
+    a.finalize()
+
+    with pytest.raises(AttributeError) as err:
+        a.x = 4
+    assert err.value.args == (
+        'Object is final: No new keys may be added.', 'x'
+    )
+    assert 'x' not in a
