commit c0d005d529a1e5ee24de4e8175bf38531d267177
Author: chriddyp <chris@plot.ly>
Date:   Thu Mar 2 14:55:25 2017 -0500

    fix issues with rendering a single component as a child

diff --git a/src/reducers/paths.js b/src/reducers/paths.js
index e0ba5ff7..0ed4b051 100644
--- a/src/reducers/paths.js
+++ b/src/reducers/paths.js
@@ -1,4 +1,5 @@
-import {crawlLayout, createTreePath} from './utils'
+import {crawlLayout} from './utils'
+import R from 'ramda'
 
 const initialPaths = {};
 
@@ -8,9 +9,14 @@ const paths = (state = initialPaths, action) => {
             const layout = action.payload;
             const newState = Object.assign({}, state);
 
-            crawlLayout(layout, (child, itempath) => {
-                if(child.props && child.props.id) {
-                    newState[child.props.id] = createTreePath(itempath);
+            crawlLayout(layout, function assignPath(child, itempath) {
+                if(R.type(child) === 'Object' &&
+                   R.has('props', child) &&
+                   R.has('id', child.props)
+                ) {
+
+                    newState[child.props.id] = itempath;
+
                 }
             });
 
diff --git a/src/reducers/utils.js b/src/reducers/utils.js
index 1457cb07..fdc8e65c 100644
--- a/src/reducers/utils.js
+++ b/src/reducers/utils.js
@@ -1,19 +1,34 @@
 import R from 'ramda';
 
-const pad = R.curry((array, paddingValues) => array.reduce((r, v) => {
-    paddingValues.forEach(paddingValue => r.push(paddingValue));
-    r.push(v);
-    return r;
-}, []));
+const extend = R.reduce(R.flip(R.append))
 
 // crawl a layout object, apply a function on every object
 export const crawlLayout = (object, func, path=[]) => {
     func(object, path);
-    if (Array.isArray(object.props.content)) {
-        object.props.content.forEach((child, i) => {
-            crawlLayout(child, func, R.append(i, path));
-        });
+
+    /*
+     * object may be a string, a number, or null
+     * R.has will return false for both of those types
+     */
+    if (R.type(object) === 'Object' &&
+        R.has('props', object) &&
+        R.has('content', object.props)
+    ) {
+        const newPath = extend(path, ['props', 'content']);
+        if (Array.isArray(object.props.content)) {
+            object.props.content.forEach((child, i) => {
+                crawlLayout(
+                    child,
+                    func,
+                    R.append(i, newPath));
+            });
+        } else {
+            crawlLayout(
+                object.props.content,
+                func,
+                newPath
+            );
+        }
+
     }
 }
-
-export const createTreePath = (array) => pad(array, ['props', 'content']);
diff --git a/src/renderTree.js b/src/renderTree.js
index 3df5225d..ddfbf93d 100644
--- a/src/renderTree.js
+++ b/src/renderTree.js
@@ -4,27 +4,30 @@ import R from 'ramda';
 import React, {PropTypes} from 'react';
 import Registry from './registry';
 import NotifyObservers from './components/core/NotifyObservers.react';
-import {createTreePath} from './reducers/utils';
+
 
 export default function render(component, path=[]) {
+    if (R.contains(R.type(component), ['String', 'Number', 'Null'])) {
+        return component;
+    }
+
     // Create list of child elements
     let children;
 
     // TODO - Rename component.content to component.children
     const props = R.propOr({}, 'props', component);
     const content = props.content;
-    if (!content) {
+    if (!R.has('props', component) || !R.has('content', component.props)) {
 
         // No children
         children = [];
 
-    } else if (typeof content === 'string') {
+    } else if (R.contains(R.type(component.props.content), ['String', 'Number', 'Null'])) {
 
-        // Text node child
         children = [component.props.content];
 
     } else {
-        // One or multiple children
+        // One or multiple objects
 
         // Recursively render the tree
         const renderChild = (child, i) =>
@@ -39,7 +42,7 @@ export default function render(component, path=[]) {
 
     const parent = React.createElement(
         element,
-        Object.assign({}, component.props, {path: createTreePath(path)}),
+        R.omit(['content'], component.props),
         ...children
     );
 
diff --git a/tests/IntegrationTests.py b/tests/IntegrationTests.py
new file mode 100644
index 00000000..6c487d7d
--- /dev/null
+++ b/tests/IntegrationTests.py
@@ -0,0 +1,86 @@
+from dash.react import Dash
+from dash.react import Dash
+from selenium import webdriver
+from selenium.webdriver.common.keys import Keys
+import dash
+import dash_core_components
+import dash_core_components as dcc
+import dash_html_components as html
+import importlib
+import multiprocessing
+import percy
+import time
+import unittest
+
+
+class IntegrationTests(unittest.TestCase):
+
+    @classmethod
+    def setUpClass(cls):
+        super(IntegrationTests, cls).setUpClass()
+        cls.driver = webdriver.Chrome()
+
+        loader = percy.ResourceLoader(
+          webdriver=cls.driver
+        )
+        cls.percy_runner = percy.Runner(loader=loader)
+
+        cls.percy_runner.initialize_build()
+
+    @classmethod
+    def tearDownClass(cls):
+        super(IntegrationTests, cls).tearDownClass()
+        cls.driver.quit()
+        cls.percy_runner.finalize_build()
+
+    def setUp(s):
+        pass
+
+    def tearDown(s):
+        s.server_process.terminate()
+
+    def startServer(s, dash):
+        def run():
+            dash.run_server(
+                port=8050,
+                debug=False,
+                component_suites=[
+                    'dash_core_components',
+                    'dash_html_components'
+                ],
+                threaded=True
+            )
+
+        # Run on a separate process so that it doesn't block
+        s.server_process = multiprocessing.Process(target=run)
+        s.server_process.start()
+        time.sleep(0.5)
+
+        # Visit the dash page
+        s.driver.get('http://localhost:8050')
+
+        # Inject an error and warning logger
+        logger = '''
+        window.tests = {};
+        window.tests.console = {error: [], warn: [], log: []};
+
+        var _log = console.log;
+        var _warn = console.warn;
+        var _error = console.error;
+
+        console.log = function() {
+            window.tests.console.log.push({method: 'log', arguments: arguments});
+            return _log.apply(console, arguments);
+        };
+
+        console.warn = function() {
+            window.tests.warn.push({method: 'warn', arguments: arguments});
+            return _warn.apply(console, arguments);
+        };
+
+        console.error = function() {
+            window.tests.error.push({method: 'error', arguments: arguments});
+            return _error.apply(console, arguments);
+        };
+        '''
+        s.driver.execute_script(logger)
diff --git a/tests/__init__.py b/tests/__init__.py
new file mode 100644
index 00000000..e69de29b
diff --git a/tests/test_render.py b/tests/test_render.py
new file mode 100644
index 00000000..d3e0676b
--- /dev/null
+++ b/tests/test_render.py
@@ -0,0 +1,461 @@
+from dash.react import Dash
+import dash
+import dash_html_components as html
+import dash_core_components
+from IntegrationTests import IntegrationTests
+import mock
+from utils import wait_for
+from multiprocessing import Value
+
+
+class Tests(IntegrationTests):
+
+    def test_initial_state(s):
+        dash = Dash(__name__)
+        dash.layout = html.Div([
+            'Basic string',
+            3.14,
+            None,
+            html.Div('Child div with basic string',
+                     id='p.c.3',
+                     className="my-class",
+                     title='tooltip',
+                     style={'color': 'red', 'fontSize': 30, 'font-size': 10}
+                     ),
+            html.Div(id='p.c.4'),
+            html.Div([
+                html.Div('Grandchild div', id='p.c.5.p.c.0'),
+                html.Div([
+                    html.Div('Great grandchild', id='p.c.5.p.c.1.p.c.0'),
+                    3.14159,
+                    'another basic string'
+                ], id='p.c.5.p.c.1'),
+                html.Div([
+                    html.Div(
+                        html.Div([
+                            html.Div([
+                                html.Div(id='p.c.5.p.c.2.p.c.0.p.c.p.c.0.p.c.0'),
+                                '',
+                                html.Div(id='p.c.5.p.c.2.p.c.0.p.c.p.c.0.p.c.2')
+                            ], id='p.c.5.p.c.2.p.c.0.p.c.p.c.0')
+                        ], id='p.c.5.p.c.2.p.c.0.p.c'),
+                        id='p.c.5.p.c.2.p.c.0'
+                    )
+                ], id='p.c.5.p.c.2')
+            ], id='p.c.5')
+        ])
+
+        s.startServer(dash)
+
+        el = s.driver.find_element_by_id('react-entry-point')
+
+        rendered_dom = '''
+        <div data-reactroot="">
+            <!-- react-text: 3 -->
+            Basic string
+            <!-- /react-text -->
+
+            <!-- react-text: 4 -->
+            3.14
+            <!-- /react-text -->
+
+            <div class="my-class" id="p.c.3" title="tooltip" style="color: red; font-size: 30px;">
+                Child div with basic string
+            </div>
+            <div id="p.c.4"></div>
+            <div id="p.c.5">
+                <div id="p.c.5.p.c.0">
+                    Grandchild div
+                </div>
+                <div id="p.c.5.p.c.1">
+                    <div id="p.c.5.p.c.1.p.c.0">
+                        Great grandchild
+                    </div>
+
+                    <!-- react-text: 11 -->
+                        3.14159
+                    <!-- /react-text -->
+
+                    <!-- react-text: 12 -->
+                        another basic string
+                    <!-- /react-text -->
+                </div>
+                <div id="p.c.5.p.c.2">
+                    <div id="p.c.5.p.c.2.p.c.0">
+                        <div id="p.c.5.p.c.2.p.c.0.p.c">
+                            <div id="p.c.5.p.c.2.p.c.0.p.c.p.c.0">
+                                <div id="p.c.5.p.c.2.p.c.0.p.c.p.c.0.p.c.0">
+                                </div>
+                                <!-- react-text: 18 -->
+                                <!-- /react-text -->
+                                <div id="p.c.5.p.c.2.p.c.0.p.c.p.c.0.p.c.2">
+                                </div>
+                            </div>
+                        </div>
+                    </div>
+                </div>
+            </div>
+        </div>
+        '''
+        s.assertEqual(
+            el.get_attribute('innerHTML'),
+            rendered_dom.replace('\n', '').replace('    ', '')
+        )
+
+        # Check that no errors or warnings were displayed
+        s.assertEqual(
+            s.driver.execute_script(
+                'return window.tests.console.error.length'
+            ),
+            0
+        )
+        s.assertEqual(
+            s.driver.execute_script(
+                'return window.tests.console.warn.length'
+            ),
+            0
+        )
+
+        # Check the initial stores
+
+        # layout should just be the JSON-ified app.layout
+        s.assertEqual(
+            s.driver.execute_script(
+                'return JSON.parse(JSON.stringify('
+                'window.store.getState().layout'
+                '))'
+            ),
+            {
+                "namespace": "dash_html_components",
+                "props": {
+                  "content": [
+                    "Basic string",
+                    3.14,
+                    None,
+                    {
+                      "namespace": "dash_html_components",
+                      "props": {
+                        "content": "Child div with basic string",
+                        "id": "p.c.3",
+                         'className': "my-class",
+                         'title': 'tooltip',
+                         'style': {
+                            'color': 'red', 'fontSize': 30, 'font-size': 10
+                         }
+                      },
+                      "type": "Div"
+                    },
+                    {
+                      "namespace": "dash_html_components",
+                      "props": {
+                        "content": None,
+                        "id": "p.c.4"
+                      },
+                      "type": "Div"
+                    },
+                    {
+                      "namespace": "dash_html_components",
+                      "props": {
+                        "content": [
+                          {
+                            "namespace": "dash_html_components",
+                            "props": {
+                              "content": "Grandchild div",
+                              "id": "p.c.5.p.c.0"
+                            },
+                            "type": "Div"
+                          },
+                          {
+                            "namespace": "dash_html_components",
+                            "props": {
+                              "content": [
+                                {
+                                  "namespace": "dash_html_components",
+                                  "props": {
+                                    "content": "Great grandchild",
+                                    "id": "p.c.5.p.c.1.p.c.0"
+                                  },
+                                  "type": "Div"
+                                },
+                                3.14159,
+                                "another basic string"
+                              ],
+                              "id": "p.c.5.p.c.1"
+                            },
+                            "type": "Div"
+                          },
+                          {
+                            "namespace": "dash_html_components",
+                            "props": {
+                              "content": [
+                                {
+                                  "namespace": "dash_html_components",
+                                  "props": {
+                                    "content": {
+                                      "namespace": "dash_html_components",
+                                      "props": {
+                                        "content": [
+                                          {
+                                            "namespace": "dash_html_components",
+                                            "props": {
+                                              "content": [
+                                                {
+                                                  "namespace": "dash_html_components",
+                                                  "props": {
+                                                    "content": None,
+                                                    "id": "p.c.5.p.c.2.p.c.0.p.c.p.c.0.p.c.0"
+                                                  },
+                                                  "type": "Div"
+                                                },
+                                                "",
+                                                {
+                                                  "namespace": "dash_html_components",
+                                                  "props": {
+                                                    "content": None,
+                                                    "id": "p.c.5.p.c.2.p.c.0.p.c.p.c.0.p.c.2"
+                                                  },
+                                                  "type": "Div"
+                                                }
+                                              ],
+                                              "id": "p.c.5.p.c.2.p.c.0.p.c.p.c.0"
+                                            },
+                                            "type": "Div"
+                                          }
+                                        ],
+                                        "id": "p.c.5.p.c.2.p.c.0.p.c"
+                                      },
+                                      "type": "Div"
+                                    },
+                                    "id": "p.c.5.p.c.2.p.c.0"
+                                  },
+                                  "type": "Div"
+                                }
+                              ],
+                              "id": "p.c.5.p.c.2"
+                            },
+                            "type": "Div"
+                          }
+                        ],
+                        "id": "p.c.5"
+                      },
+                      "type": "Div"
+                    }
+                  ]
+                },
+                "type": "Div"
+            }
+        )
+
+        # graphs should just be empty since there are no dependencies
+        s.assertEqual(
+            s.driver.execute_script(
+                'return JSON.parse(JSON.stringify('
+                'window.store.getState().graphs'
+                '))'
+            ),
+            {
+              "StateGraph": {
+                "nodes": {},
+                "outgoingEdges": {},
+                "incomingEdges": {}
+              },
+              "EventGraph": {
+                "nodes": {},
+                "outgoingEdges": {},
+                "incomingEdges": {}
+              }
+            }
+        )
+
+        # paths is just a lookup table of the components's IDs and their
+        # placement in the tree.
+        # in this case the IDs are just abbreviations of the path to make
+        # things easy to verify.
+        s.assertEqual(
+            s.driver.execute_script(
+                'return JSON.parse(JSON.stringify('
+                'window.store.getState().paths'
+                '))'
+            ),
+            {
+                "p.c.3": [
+                    "props",  "content",  3
+                ],
+                "p.c.4": [
+                    "props",  "content",  4
+                ],
+                "p.c.5": [
+                    "props",  "content",  5
+                ],
+                "p.c.5.p.c.0": [
+                    "props",  "content",  5,
+                    "props",  "content",  0
+                ],
+                "p.c.5.p.c.1": [
+                    "props",  "content",  5,
+                    "props",  "content",  1
+                ],
+                "p.c.5.p.c.1.p.c.0": [
+                    "props",  "content",  5,
+                    "props",  "content",  1,
+                    "props",  "content",  0
+                ],
+                "p.c.5.p.c.2": [
+                    "props",  "content",  5,
+                    "props",  "content",  2
+                ],
+                "p.c.5.p.c.2.p.c.0": [
+                    "props",  "content",  5,
+                    "props",  "content",  2,
+                    "props",  "content",  0
+                ],
+                "p.c.5.p.c.2.p.c.0.p.c": [
+                    "props",  "content",  5,
+                    "props",  "content",  2,
+                    "props",  "content",  0,
+                    "props",  "content"
+                ],
+                "p.c.5.p.c.2.p.c.0.p.c.p.c.0": [
+                    "props",  "content",  5,
+                    "props",  "content",  2,
+                    "props",  "content",  0,
+                    "props",  "content",
+                    "props",  "content",  0
+                ],
+                "p.c.5.p.c.2.p.c.0.p.c.p.c.0.p.c.0": [
+                    "props",  "content",  5,
+                    "props",  "content",  2,
+                    "props",  "content",  0,
+                    "props",  "content",
+                    "props",  "content",  0,
+                    "props",  "content",  0
+                ],
+                "p.c.5.p.c.2.p.c.0.p.c.p.c.0.p.c.2": [
+                    "props",  "content",  5,
+                    "props",  "content",  2,
+                    "props",  "content",  0,
+                    "props",  "content",
+                    "props",  "content",  0,
+                    "props",  "content",  2
+                ]
+            }
+        )
+
+        # Take a screenshot with percy
+        # s.percy_runner.snapshot(name='dash_core_components')
+
+    def test_simple_callback(s):
+        dash = Dash(__name__)
+        dash.layout = html.Div([
+            dash_core_components.Input(
+                id='input',
+                value='initial value'
+            ),
+            html.Div(
+                html.Div([
+                    1.5,
+                    None,
+                    'string',
+                    html.Div(id='output-1')
+                ])
+            )
+        ])
+
+        call_count = Value('i', 0)
+
+        @dash.react('output-1', ['input'])
+        def update_output(input):
+            call_count.value = call_count.value + 1
+            return {'content': input['value']}
+
+        s.startServer(dash)
+
+        wait_for(lambda: s.driver.find_element_by_id(
+            'output-1'
+        ).text == 'initial value')
+
+        input1 = s.driver.find_element_by_id('input')
+        input1.clear()
+
+        input1.send_keys('hello world')
+
+        wait_for(lambda: s.driver.find_element_by_id(
+            'output-1'
+        ).text == 'hello world')
+
+        s.assertEqual(
+            call_count.value,
+            # an initial call to retrieve the first value
+            1 +
+            # one for each hello world character
+            len('hello world')
+        )
+
+    def test_callbacks_generating_content(s):
+        """ Modify the DOM tree by adding new
+        components in the callbacks
+        """
+
+        dash = Dash(__name__)
+        dash.layout = html.Div([
+            dash_core_components.Input(
+                id='input',
+                value='initial value'
+            ),
+            html.Div(id='output')
+        ])
+
+        @dash.react('output', ['input'])
+        def pad_output(input):
+            return {
+                'content': html.Div([
+                    dash_core_components.Input(
+                        id='sub-input-1',
+                        value='sub input initial value'
+                    ),
+                    html.Div(id='sub-output-1')
+                ])
+            }
+
+        call_count = Value('i', 0)
+
+        # these components don't exist in the initial render
+        @dash.react('sub-output-1', ['sub-input-1'])
+        def update_input(input):
+            call_count.value = call_count.value + 1
+            return {
+                'content': input['value']
+            }
+
+        s.startServer(dash)
+
+        output = s.driver.find_element_by_id('output')
+        output_html = output.get_attribute('innerHTML')
+
+        wait_for(lambda: call_count.value == 1)
+
+        # Adding new content to the layout should
+        # call the callbacks immediately to set
+        # the correct initial state
+        wait_for(
+            lambda *args: (
+                s.driver.find_element_by_id('output')
+                 .get_attribute('innerHTML')) ==
+            '''
+            <div>
+                <input type="text/javascript" id="sub-input-1" value="sub input initial value">
+                <div id="sub-output-1">sub input inital value</div>
+            </div>'''.replace('\n', '').replace('    ', '')
+        )
+
+        # editing the input should modify the sub output
+        sub_input = s.driver.find_element_by_id('sub-input-1')
+        sub_input.send_keys('a')
+        wait_for(
+            lambda *args: (
+                s.driver.find_element_by_id
+                 .get_attribute('innerHTML')
+            ) == 'a'
+        )
+
+        s.assertEqual(call_count.value, 1)
diff --git a/tests/utils.py b/tests/utils.py
new file mode 100644
index 00000000..0ab813ec
--- /dev/null
+++ b/tests/utils.py
@@ -0,0 +1,53 @@
+import json
+import time
+
+
+TIMEOUT = 3  # Seconds
+
+
+class WaitForTimeout(Exception):
+    """This should only be raised inside the `wait_for` function."""
+    pass
+
+
+def wait_for(condition_function, *args, **kwargs):
+    """
+    Waits for condition_function to return True or raises WaitForTimeout.
+    :param (function) condition_function: Should return True on success.
+    :param args: Optional args to pass to condition_function.
+    :param kwargs: Optional kwargs to pass to condition_function.
+        if `timeout` is in kwargs, it will be used to override TIMEOUT
+    :raises: WaitForTimeout If condition_function doesn't return True in time.
+    Usage:
+        def get_element(selector):
+            # some code to get some element or return a `False`-y value.
+        selector = '.js-plotly-plot'
+        try:
+            wait_for(get_element, selector)
+        except WaitForTimeout:
+            self.fail('element never appeared...')
+        plot = get_element(selector)  # we know it exists.
+    """
+    def wrapped_condition_function():
+        """We wrap this to alter the call base on the closure."""
+        if args and kwargs:
+            return condition_function(*args, **kwargs)
+        if args:
+            return condition_function(*args)
+        if kwargs:
+            return condition_function(**kwargs)
+        return condition_function()
+
+    if 'timeout' in kwargs:
+        timeout = kwargs['timeout']
+        del kwargs['timeout']
+    else:
+        timeout = TIMEOUT
+
+    start_time = time.time()
+    while time.time() < start_time + timeout:
+        if wrapped_condition_function():
+            return True
+        time.sleep(0.5)
+
+    raise WaitForTimeout
