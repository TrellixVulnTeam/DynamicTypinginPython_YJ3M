commit 5b27dd7fa03fa680073950a4aa1052f83060034c
Author: alexcjohnson <alex@plot.ly>
Date:   Wed Mar 25 22:35:21 2020 -0400

    move layout-linked callback validation to the front end

diff --git a/dash-renderer/src/APIController.react.js b/dash-renderer/src/APIController.react.js
index 0d71f111..0ef112dd 100644
--- a/dash-renderer/src/APIController.react.js
+++ b/dash-renderer/src/APIController.react.js
@@ -5,11 +5,12 @@ import PropTypes from 'prop-types';
 import TreeContainer from './TreeContainer';
 import GlobalErrorContainer from './components/error/GlobalErrorContainer.react';
 import {
+    dispatchError,
     hydrateInitialOutputs,
+    onError,
     setGraphs,
     setPaths,
     setLayout,
-    onError,
 } from './actions';
 import {computePaths} from './actions/paths';
 import {computeGraphs} from './actions/dependencies';
@@ -83,16 +84,12 @@ class UnconnectedContainer extends Component {
             dependenciesRequest.status === STATUS.OK &&
             isEmpty(graphs)
         ) {
-            const dispatchError = (message, lines) =>
-                dispatch(
-                    onError({
-                        type: 'backEnd',
-                        error: {message, html: lines.join('\n')},
-                    })
-                );
             dispatch(
                 setGraphs(
-                    computeGraphs(dependenciesRequest.content, dispatchError)
+                    computeGraphs(
+                        dependenciesRequest.content,
+                        dispatchError(dispatch)
+                    )
                 )
             );
         }
@@ -109,7 +106,7 @@ class UnconnectedContainer extends Component {
         ) {
             let errorLoading = false;
             try {
-                dispatch(hydrateInitialOutputs());
+                dispatch(hydrateInitialOutputs(dispatchError(dispatch)));
             } catch (err) {
                 // Display this error in devtools, unless we have errors
                 // already, in which case we assume this new one is moot
diff --git a/dash-renderer/src/actions/dependencies.js b/dash-renderer/src/actions/dependencies.js
index b58e2c3e..0f6ee467 100644
--- a/dash-renderer/src/actions/dependencies.js
+++ b/dash-renderer/src/actions/dependencies.js
@@ -13,6 +13,7 @@ import {
     flatten,
     forEachObjIndexed,
     includes,
+    intersection,
     isEmpty,
     keys,
     map,
@@ -34,6 +35,8 @@ import {getPath} from './paths';
 
 import {crawlLayout} from './utils';
 
+import Registry from '../registry';
+
 /*
  * If this update is for multiple outputs, then it has
  * starting & trailing `..` and each propId pair is separated
@@ -438,6 +441,145 @@ function wildcardOverlap({id, property}, objs) {
     return false;
 }
 
+export function validateCallbacksToLayout(state_, dispatchError) {
+    const {config, graphs, layout, paths} = state_;
+    const {outputMap, inputMap, outputPatterns, inputPatterns} = graphs;
+    const validateIds = !config.suppress_callback_exceptions;
+
+    function tail(callbacks) {
+        return (
+            'This ID was used in the callback(s) for Output(s):\n  ' +
+            callbacks
+                .map(({outputs}) => outputs.map(combineIdAndProp).join(', '))
+                .join('\n  ')
+        );
+    }
+
+    function missingId(id, cls, callbacks) {
+        dispatchError('ID not found in layout', [
+            `Attempting to connect a callback ${cls} item to component:`,
+            `  "${stringifyId(id)}"`,
+            'but no components with that id exist in the layout.',
+            '',
+            'If you are assigning callbacks to components that are',
+            'generated by other callbacks (and therefore not in the',
+            'initial layout), you can suppress this exception by setting',
+            '`suppress_callback_exceptions=True`.',
+            tail(callbacks)
+        ]);
+    }
+
+    function validateProp(id, idPath, prop, cls, callbacks) {
+        const component = path(idPath, layout);
+        const element = Registry.resolve(component);
+        if (element && !element.propTypes[prop]) {
+            // look for wildcard props (ie data-* etc)
+            for (const propName in element.propTypes) {
+                const last = propName.length - 1;
+                if (
+                    propName.charAt(last) === '*' &&
+                    prop.substr(0, last) === propName.substr(0, last)
+                ) {
+                    return;
+                }
+            }
+            const {type, namespace} = component;
+            dispatchError('Invalid prop for this component', [
+                `Property "${prop}" was used with component ID:`,
+                `  ${JSON.stringify(id)}`,
+                `in one of the ${cls} items of a callback.`,
+                `This ID is assigned to a ${namespace}.${type} component`,
+                'in the layout, which does not support this property.',
+                tail(callbacks),
+            ]);
+        }
+    }
+
+    function validateIdPatternProp(id, property, cls, callbacks) {
+        resolveDeps()(paths)({id, property}).forEach(dep => {
+            const {id: idResolved, path: idPath} = dep;
+            validateProp(idResolved, idPath, property, cls, callbacks);
+        });
+    }
+
+    const callbackIdsCheckedForState = {};
+
+    function validateState(callback) {
+        const {state, output} = callback;
+
+        // ensure we don't check the same callback for state multiple times
+        if (callbackIdsCheckedForState[output]) {
+            return;
+        }
+        callbackIdsCheckedForState[output] = 1;
+
+        const cls = 'State';
+
+        state.forEach(({id, property}) => {
+            if (typeof id === 'string') {
+                const idPath = getPath(paths, id);
+                if (!idPath) {
+                    if (validateIds) {
+                        missingId(id, cls, [callback]);
+                    }
+                }
+                else {
+                    validateProp(id, idPath, property, cls, [callback]);
+                }
+            }
+            // Only validate props for State object ids that we don't need to
+            // resolve them to specific inputs or outputs
+            else if (!intersection([MATCH, ALLSMALLER], values(id)).length) {
+                validateIdPatternProp(id, property, cls, [callback]);
+            }
+        });
+    }
+
+    function validateMap(map, cls, doState) {
+        for (const id in map) {
+            const idProps = map[id];
+            const idPath = getPath(paths, id);
+            if (!idPath) {
+                if (validateIds) {
+                    missingId(id, cls, flatten(values(idProps)))
+                }
+            }
+            else {
+                for (const property in idProps) {
+                    const callbacks = idProps[property];
+                    validateProp(id, idPath, property, cls, callbacks);
+                    if (doState) {
+                        // It would be redundant to check state on both inputs
+                        // and outputs - so only set doState for outputs.
+                        callbacks.forEach(validateState);
+                    }
+                }
+            }
+        }
+    }
+
+    validateMap(outputMap, 'Output', true);
+    validateMap(inputMap, 'Input');
+
+    function validatePatterns(patterns, cls, doState) {
+        for (const keyStr in patterns) {
+            const keyPatterns = patterns[keyStr];
+            for (const property in keyPatterns) {
+                keyPatterns[property].forEach(({keys, values, callbacks}) => {
+                    const id = zipObj(keys, values);
+                    validateIdPatternProp(id, property, cls, callbacks);
+                    if (doState) {
+                        callbacks.forEach(validateState);
+                    }
+                });
+            }
+        }
+    }
+
+    validatePatterns(outputPatterns, 'Output', true);
+    validatePatterns(inputPatterns, 'Input');
+}
+
 export function computeGraphs(dependencies, dispatchError) {
     const inputGraph = new DepGraph();
     // multiGraph is just for finding circular deps
@@ -724,31 +866,33 @@ function getAnyVals(patternVals, vals) {
     return matches.length ? JSON.stringify(matches) : '';
 }
 
-const resolveDeps = (refKeys, refVals, refPatternVals) => paths => ({
-    id: idPattern,
-    property,
-}) => {
-    if (typeof idPattern === 'string') {
-        const path = getPath(paths, idPattern);
-        return path ? [{id: idPattern, property, path}] : [];
-    }
-    const keys = Object.keys(idPattern).sort();
-    const patternVals = props(keys, idPattern);
-    const keyStr = keys.join(',');
-    const keyPaths = paths.objs[keyStr];
-    if (!keyPaths) {
-        return [];
-    }
-    const result = [];
-    keyPaths.forEach(({values: vals, path}) => {
-        if (
-            idMatch(keys, vals, patternVals, refKeys, refVals, refPatternVals)
-        ) {
-            result.push({id: zipObj(keys, vals), property, path});
+function resolveDeps(refKeys, refVals, refPatternVals) {
+    return paths => ({
+        id: idPattern,
+        property,
+    }) => {
+        if (typeof idPattern === 'string') {
+            const path = getPath(paths, idPattern);
+            return path ? [{id: idPattern, property, path}] : [];
         }
-    });
-    return result;
-};
+        const keys = Object.keys(idPattern).sort();
+        const patternVals = props(keys, idPattern);
+        const keyStr = keys.join(',');
+        const keyPaths = paths.objs[keyStr];
+        if (!keyPaths) {
+            return [];
+        }
+        const result = [];
+        keyPaths.forEach(({values: vals, path}) => {
+            if (
+                idMatch(keys, vals, patternVals, refKeys, refVals, refPatternVals)
+            ) {
+                result.push({id: zipObj(keys, vals), property, path});
+            }
+        });
+        return result;
+    };
+}
 
 /*
  * Create a pending callback object. Includes the original callback definition,
diff --git a/dash-renderer/src/actions/index.js b/dash-renderer/src/actions/index.js
index 2efd7af3..84a51372 100644
--- a/dash-renderer/src/actions/index.js
+++ b/dash-renderer/src/actions/index.js
@@ -39,6 +39,7 @@ import {
     pruneRemovedCallbacks,
     setNewRequestId,
     stringifyId,
+    validateCallbacksToLayout,
 } from './dependencies';
 import {computePaths, getPath} from './paths';
 import {STATUS} from '../constants/constants';
@@ -57,8 +58,17 @@ export const setHooks = createAction(getAction('SET_HOOKS'));
 export const setLayout = createAction(getAction('SET_LAYOUT'));
 export const onError = createAction(getAction('ON_ERROR'));
 
+export const dispatchError = dispatch => (message, lines) =>
+    dispatch(
+        onError({
+            type: 'backEnd',
+            error: {message, html: lines.join('\n')},
+        })
+    );
+
 export function hydrateInitialOutputs() {
     return function(dispatch, getState) {
+        validateCallbacksToLayout(getState(), dispatchError(dispatch));
         triggerDefaultState(dispatch, getState);
         dispatch(setAppLifecycle(getAppState('HYDRATED')));
     };
diff --git a/dash/_validate.py b/dash/_validate.py
index e208901d..430bac57 100644
--- a/dash/_validate.py
+++ b/dash/_validate.py
@@ -11,19 +11,6 @@ def validate_callback(app, layout, output, inputs, state):
     is_multi = isinstance(output, (list, tuple))
     validate_ids = not app.config.suppress_callback_exceptions
 
-    if layout is None and validate_ids:
-        # Without a layout, we can't do validation on the IDs and
-        # properties of the elements in the callback.
-        raise exceptions.LayoutIsNotDefined(
-            """
-            Attempting to assign a callback to the application but
-            the `layout` property has not been assigned.
-            Assign the `layout` property before assigning callbacks.
-            Alternatively, suppress this warning by setting
-            `suppress_callback_exceptions=True`
-            """
-        )
-
     outputs = output if is_multi else [output]
 
     for args, cls in [(outputs, Output), (inputs, Input), (state, State)]:
@@ -88,29 +75,6 @@ def validate_callback_args(args, cls, layout, validate_ids):
 def validate_id_dict(arg, layout, validate_ids, wildcards):
     arg_id = arg.component_id
 
-    def id_match(c):
-        c_id = getattr(c, "id", None)
-        return isinstance(c_id, dict) and all(
-            k in c and v in wildcards or v == c_id.get(k)
-            for k, v in arg_id.items()
-        )
-
-    if validate_ids:
-        component = None
-        if id_match(layout):
-            component = layout
-        else:
-            for c in layout._traverse():  # pylint: disable=protected-access
-                if id_match(c):
-                    component = c
-                    break
-        if component:
-            # for wildcards it's not unusual to have no matching components
-            # initially; this isn't a problem and we shouldn't force users to
-            # set suppress_callback_exceptions in this case; but if we DO have
-            # a matching component, we can check that the prop is valid
-            validate_prop_for_component(arg, component)
-
     for k, v in arg_id.items():
         # Need to keep key type validation on the Python side, since
         # non-string keys will be converted to strings in json.dumps and may
@@ -141,47 +105,6 @@ def validate_id_string(arg, layout, validate_ids):
             )
         )
 
-    if validate_ids:
-        top_id = getattr(layout, "id", None)
-        if arg_id not in layout and arg_id != top_id:
-            raise exceptions.NonExistentIdException(
-                """
-                Attempting to assign a callback to the component with
-                id "{}" but no components with that id exist in the layout.
-
-                Here is a list of IDs in layout:
-                {}
-
-                If you are assigning callbacks to components that are
-                generated by other callbacks (and therefore not in the
-                initial layout), you can suppress this exception by setting
-                `suppress_callback_exceptions=True`.
-                """.format(
-                    arg_id, [k for k in layout] + ([top_id] if top_id else [])
-                )
-            )
-
-        component = layout if top_id == arg_id else layout[arg_id]
-        validate_prop_for_component(arg, component)
-
-
-def validate_prop_for_component(arg, component):
-    arg_prop = arg.component_property
-    if arg_prop not in component.available_properties and not any(
-        arg_prop.startswith(w) for w in component.available_wildcard_properties
-    ):
-        raise exceptions.NonExistentPropException(
-            """
-            Attempting to assign a callback with the property "{0}"
-            but component "{1}" doesn't have "{0}" as a property.
-
-            Here are the available properties in "{1}":
-            {2}
-            """.format(
-                arg_prop, arg.component_id, component.available_properties
-            )
-        )
-
 
 def validate_multi_return(outputs_list, output_value, callback_id):
     if not isinstance(output_value, (list, tuple)):
diff --git a/dash/dash.py b/dash/dash.py
index 5a6da4f1..9931923b 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -465,6 +465,7 @@ class Dash(object):
             "ui": self._dev_tools.ui,
             "props_check": self._dev_tools.props_check,
             "show_undo_redo": self.config.show_undo_redo,
+            "suppress_callback_exceptions": self.config.suppress_callback_exceptions,
         }
         if self._dev_tools.hot_reload:
             config["hot_reload"] = {
diff --git a/dash/exceptions.py b/dash/exceptions.py
index f1af1996..54439735 100644
--- a/dash/exceptions.py
+++ b/dash/exceptions.py
@@ -18,14 +18,6 @@ class CallbackException(DashException):
     pass
 
 
-class NonExistentIdException(CallbackException):
-    pass
-
-
-class NonExistentPropException(CallbackException):
-    pass
-
-
 class NonExistentEventException(CallbackException):
     pass
 
@@ -34,10 +26,6 @@ class IncorrectTypeException(CallbackException):
     pass
 
 
-class LayoutIsNotDefined(CallbackException):
-    pass
-
-
 class IDsCantContainPeriods(CallbackException):
     pass
 
diff --git a/tests/integration/devtools/test_callback_validation.py b/tests/integration/devtools/test_callback_validation.py
index b5f189f3..882ce4c4 100644
--- a/tests/integration/devtools/test_callback_validation.py
+++ b/tests/integration/devtools/test_callback_validation.py
@@ -342,3 +342,173 @@ def test_dvcv007_disallowed_ids(dash_duo):
         'Output[0].id has key ""',
         "Keys must be non-empty strings."
     ])
+
+
+def bad_id_app(**kwargs):
+    app = dash.Dash(__name__, **kwargs)
+    app.layout = html.Div(
+        [
+            html.Div(
+                [html.Div(id="inner-div"), dcc.Input(id="inner-input")], id="outer-div"
+            ),
+            dcc.Input(id="outer-input"),
+        ],
+        id="main",
+    )
+
+    @app.callback(Output("nuh-uh", "children"), [Input("inner-input", "value")])
+    def f(a):
+        return a
+
+    @app.callback(Output("outer-input", "value"), [Input("yeah-no", "value")])
+    def g(a):
+        return a
+
+    @app.callback(
+        [Output("inner-div", "children"), Output("nope", "children")],
+        [Input("inner-input", "value")],
+        [State("what", "children")]
+    )
+    def g2(a):
+        return [a, a]
+
+    # the right way
+    @app.callback(Output("inner-div", "style"), [Input("inner-input", "value")])
+    def h(a):
+        return a
+
+    return app
+
+
+def test_dvcv008_wrong_callback_id(dash_duo):
+    dash_duo.start_server(bad_id_app(), **debugging)
+
+    dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "4")
+
+    check_error(dash_duo, 0, "ID not found in layout", [
+        "Attempting to connect a callback Input item to component:",
+        '"yeah-no"',
+        "but no components with that id exist in the layout.",
+        "If you are assigning callbacks to components that are",
+        "generated by other callbacks (and therefore not in the",
+        "initial layout), you can suppress this exception by setting",
+        "`suppress_callback_exceptions=True`.",
+        "This ID was used in the callback(s) for Output(s):",
+        "outer-input.value"
+    ])
+
+    check_error(dash_duo, 1, "ID not found in layout", [
+        "Attempting to connect a callback Output item to component:",
+        '"nope"',
+        "but no components with that id exist in the layout.",
+        "This ID was used in the callback(s) for Output(s):",
+        "inner-div.children, nope.children"
+    ])
+
+    check_error(dash_duo, 2, "ID not found in layout", [
+        "Attempting to connect a callback State item to component:",
+        '"what"',
+        "but no components with that id exist in the layout.",
+        "This ID was used in the callback(s) for Output(s):",
+        "inner-div.children, nope.children"
+    ])
+
+    check_error(dash_duo, 3, "ID not found in layout", [
+        "Attempting to connect a callback Output item to component:",
+        '"nuh-uh"',
+        "but no components with that id exist in the layout.",
+        "This ID was used in the callback(s) for Output(s):",
+        "nuh-uh.children"
+    ])
+
+
+def test_dvcv009_suppress_callback_exceptions(dash_duo):
+    dash_duo.start_server(bad_id_app(suppress_callback_exceptions=True), **debugging)
+
+    dash_duo.find_element('.dash-debug-menu')
+    dash_duo.wait_for_no_elements('.test-devtools-error-count')
+
+
+def test_dvcv010_bad_props(dash_duo):
+    app = dash.Dash(__name__)
+    app.layout = html.Div(
+        [
+            html.Div(
+                [html.Div(id="inner-div"), dcc.Input(id="inner-input")], id="outer-div"
+            ),
+            dcc.Input(id={"a": 1}),
+        ],
+        id="main",
+    )
+
+    @app.callback(
+        Output("inner-div", "xyz"),
+        # "data-xyz" is OK, does not give an error
+        [Input("inner-input", "pdq"), Input("inner-div", "data-xyz")],
+        [State("inner-div", "value")]
+    )
+    def xyz(a, b, c):
+        a if b else c
+
+    @app.callback(
+        Output({"a": MATCH}, "no"),
+        [Input({"a": MATCH}, "never")],
+        # "boo" will not error because we don't check State MATCH/ALLSMALLER
+        [State({"a": MATCH}, "boo"), State({"a": ALL}, "nope")]
+    )
+    def f(a, b, c):
+        return a if b else c
+
+    dash_duo.start_server(app, **debugging)
+
+    dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "6")
+
+    check_error(dash_duo, 0, "Invalid prop for this component", [
+        'Property "never" was used with component ID:',
+        '{"a":1}',
+        "in one of the Input items of a callback.",
+        "This ID is assigned to a dash_core_components.Input component",
+        "in the layout, which does not support this property.",
+        "This ID was used in the callback(s) for Output(s):",
+        '{"a":MATCH}.no'
+    ])
+
+    check_error(dash_duo, 1, "Invalid prop for this component", [
+        'Property "nope" was used with component ID:',
+        '{"a":1}',
+        "in one of the State items of a callback.",
+        "This ID is assigned to a dash_core_components.Input component",
+        '{"a":MATCH}.no'
+    ])
+
+    check_error(dash_duo, 2, "Invalid prop for this component", [
+        'Property "no" was used with component ID:',
+        '{"a":1}',
+        "in one of the Output items of a callback.",
+        "This ID is assigned to a dash_core_components.Input component",
+        '{"a":MATCH}.no'
+    ])
+
+    check_error(dash_duo, 3, "Invalid prop for this component", [
+        'Property "pdq" was used with component ID:',
+        '"inner-input"',
+        "in one of the Input items of a callback.",
+        "This ID is assigned to a dash_core_components.Input component",
+        "inner-div.xyz"
+    ])
+
+    check_error(dash_duo, 4, "Invalid prop for this component", [
+        'Property "value" was used with component ID:',
+        '"inner-div"',
+        "in one of the State items of a callback.",
+        "This ID is assigned to a dash_html_components.Div component",
+        "inner-div.xyz"
+    ])
+
+    check_error(dash_duo, 5, "Invalid prop for this component", [
+        'Property "xyz" was used with component ID:',
+        '"inner-div"',
+        "in one of the Output items of a callback.",
+        "This ID is assigned to a dash_html_components.Div component",
+        "inner-div.xyz"
+    ])
diff --git a/tests/integration/test_integration.py b/tests/integration/test_integration.py
index 89ab27b4..99e4e5f5 100644
--- a/tests/integration/test_integration.py
+++ b/tests/integration/test_integration.py
@@ -19,7 +19,6 @@ from dash.exceptions import (
     PreventUpdate,
     InvalidCallbackReturnValue,
     IncorrectTypeException,
-    NonExistentIdException,
 )
 from dash.testing.wait import until
 
@@ -759,52 +758,3 @@ def test_inin020_callback_return_validation():
         ]
         multi2("aaa", outputs_list=outputs_list)
         pytest.fail("wrong-length list")
-
-
-def test_inin023_wrong_callback_id():
-    app = Dash(__name__)
-    app.layout = html.Div(
-        [
-            html.Div(
-                [html.Div(id="inner-div"), dcc.Input(id="inner-input")], id="outer-div"
-            ),
-            dcc.Input(id="outer-input"),
-        ],
-        id="main",
-    )
-
-    ids = ["main", "inner-div", "inner-input", "outer-div", "outer-input"]
-
-    with pytest.raises(NonExistentIdException) as err:
-
-        @app.callback(Output("nuh-uh", "children"), [Input("inner-input", "value")])
-        def f(a):
-            return a
-
-    assert '"nuh-uh"' in err.value.args[0]
-    for component_id in ids:
-        assert component_id in err.value.args[0]
-
-    with pytest.raises(NonExistentIdException) as err:
-
-        @app.callback(Output("inner-div", "children"), [Input("yeah-no", "value")])
-        def g(a):
-            return a
-
-    assert '"yeah-no"' in err.value.args[0]
-    for component_id in ids:
-        assert component_id in err.value.args[0]
-
-    with pytest.raises(NonExistentIdException) as err:
-
-        @app.callback(
-            [Output("inner-div", "children"), Output("nope", "children")],
-            [Input("inner-input", "value")],
-        )
-        def g2(a):
-            return [a, a]
-
-    # the right way
-    @app.callback(Output("inner-div", "children"), [Input("inner-input", "value")])
-    def h(a):
-        return a
