commit 86ea309c3afac7e111d1d6aa4b7285e94074d5e6
Author: Philippe Duval <philippe@plot.ly>
Date:   Wed Aug 1 14:31:34 2018 -0400

    Add support for arbitrary (link/scripts) tags with attributes.

diff --git a/dash/_utils.py b/dash/_utils.py
index 1c6e5ca5..bc71fde9 100644
--- a/dash/_utils.py
+++ b/dash/_utils.py
@@ -6,6 +6,20 @@ def interpolate_str(template, **data):
     return s
 
 
+def format_tag(tag_name, attributes, inner='', closed=False, opened=False):
+    tag = '<{tag} {attributes}'
+    if closed:
+        tag += '/>'
+    elif opened:
+        tag += '>'
+    else:
+        tag += '>' + inner + '</{tag}>'
+    return tag.format(
+        tag=tag_name,
+        attributes=' '.join([
+            '{}="{}"'.format(k, v) for k, v in attributes.items()]))
+
+
 class AttributeDict(dict):
     """
     Dictionary subclass enabling attribute lookup/assignment of keys/values.
diff --git a/dash/dash.py b/dash/dash.py
index 1205a8b2..34ffe27c 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -23,6 +23,7 @@ from .development.base_component import Component
 from . import exceptions
 from ._utils import AttributeDict as _AttributeDict
 from ._utils import interpolate_str as _interpolate
+from ._utils import format_tag as _format_tag
 
 _default_index = '''
 <!DOCTYPE html>
@@ -75,8 +76,8 @@ class Dash(object):
             compress=True,
             meta_tags=None,
             index_string=_default_index,
-            external_script_urls=None,
-            external_css_urls=None,
+            external_scripts=None,
+            external_stylesheets=None,
             **kwargs):
 
         # pylint-disable: too-many-instance-attributes
@@ -131,8 +132,8 @@ class Dash(object):
         self.css = Css()
         self.scripts = Scripts()
 
-        self._external_scripts_urls = external_script_urls or []
-        self._external_css_urls = external_css_urls or []
+        self._external_scripts = external_scripts or []
+        self._external_stylesheets = external_stylesheets or []
 
         self.registered_paths = {}
 
@@ -308,10 +309,12 @@ class Dash(object):
     def _generate_css_dist_html(self):
         links = self._collect_and_register_resources(
             self.css.get_all_css()
-        ) + self._external_css_urls
+        ) + self._external_stylesheets
 
         return '\n'.join([
-            '<link rel="stylesheet" href="{}">'.format(link)
+            _format_tag('link', link, opened=True)
+            if isinstance(link, dict)
+            else '<link rel="stylesheet" href="{}">'.format(link)
             for link in links
         ])
 
@@ -332,10 +335,12 @@ class Dash(object):
                 dash_renderer._js_dist
             )
         )
-        srcs = srcs[:-1] + self._external_scripts_urls + [srcs[-1]]
+        srcs = srcs[:-1] + self._external_scripts + [srcs[-1]]
 
         return '\n'.join([
-            '<script src="{}"></script>'.format(src)
+            _format_tag('script', src)
+            if isinstance(src, dict)
+            else '<script src="{}"></script>'.format(src)
             for src in srcs
         ])
 
@@ -352,11 +357,10 @@ class Dash(object):
         tags = []
         if not has_charset:
             tags.append('<meta charset="UTF-8"/>')
-        for meta in self._meta_tags:
-            attributes = []
-            for k, v in meta.items():
-                attributes.append('{}="{}"'.format(k, v))
-            tags.append('<meta {} />'.format(' '.join(attributes)))
+
+        tags = tags + [
+            _format_tag('meta', x, opened=True) for x in self._meta_tags
+        ]
 
         return '\n      '.join(tags)
 
diff --git a/tests/test_integration.py b/tests/test_integration.py
index aef8f05f..3cb378c8 100644
--- a/tests/test_integration.py
+++ b/tests/test_integration.py
@@ -438,22 +438,35 @@ class Tests(IntegrationTests):
     def test_external_files_init(self):
         js_files = [
             'https://www.google-analytics.com/analytics.js',
-            'https://cdn.polyfill.io/v2/polyfill.min.js'
+            {'src': 'https://cdn.polyfill.io/v2/polyfill.min.js'},
+            {
+                'src': 'https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.10/lodash.core.js',
+                'integrity': 'sha256-Qqd/EfdABZUcAxjOkMi8eGEivtdTkh3b65xCZL4qAQA=',
+                'crossorigin': 'anonymous'
+            }
         ]
         css_files = [
-            'https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css',
-            'https://codepen.io/chriddyp/pen/bWLwgP.css'
+            'https://codepen.io/chriddyp/pen/bWLwgP.css',
+            {
+                'href': 'https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css',
+                'rel': 'stylesheet',
+                'integrity': 'sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO',
+                'crossorigin': 'anonymous'
+            }
         ]
 
         app = dash.Dash(
-            external_script_urls=js_files, external_css_urls=css_files)
+            external_scripts=js_files, external_stylesheets=css_files)
 
         app.layout = html.Div()
 
         self.startServer(app)
         time.sleep(0.5)
 
+        js_urls = [x['src'] if isinstance(x, dict) else x for x in js_files]
+        css_urls = [x['href'] if isinstance(x, dict) else x for x in css_files]
+
         for fmt, url in itertools.chain(
-                (("//script[@src='{}']", x) for x in js_files),
-                (("//link[@href='{}']", x) for x in css_files)):
+                (("//script[@src='{}']", x) for x in js_urls),
+                (("//link[@href='{}']", x) for x in css_urls)):
             self.driver.find_element_by_xpath(fmt.format(url))
