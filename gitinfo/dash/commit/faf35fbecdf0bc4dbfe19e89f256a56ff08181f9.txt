commit faf35fbecdf0bc4dbfe19e89f256a56ff08181f9
Author: Valentijn Nieman <valentijnnieman@gmail.com>
Date:   Tue Oct 9 16:30:23 2018 -0400

    Run formatting on src/* too

diff --git a/src/APIController.react.js b/src/APIController.react.js
index 65410349..e1cbfb86 100644
--- a/src/APIController.react.js
+++ b/src/APIController.react.js
@@ -1,5 +1,5 @@
-import {connect} from 'react-redux'
-import {contains, isEmpty, isNil} from 'ramda'
+import {connect} from 'react-redux';
+import {contains, isEmpty, isNil} from 'ramda';
 import React, {Component} from 'react';
 import PropTypes from 'prop-types';
 import TreeContainer from './TreeContainer';
@@ -7,7 +7,7 @@ import {
     computeGraphs,
     computePaths,
     hydrateInitialOutputs,
-    setLayout
+    setLayout,
 } from './actions/index';
 import {getDependencies, getLayout} from './actions/api';
 import {getAppState} from './reducers/constants';
@@ -37,7 +37,7 @@ class UnconnectedContainer extends Component {
             graphs,
             layout,
             layoutRequest,
-            paths
+            paths,
         } = props;
 
         if (isEmpty(layoutRequest)) {
@@ -52,20 +52,21 @@ class UnconnectedContainer extends Component {
 
         if (isEmpty(dependenciesRequest)) {
             dispatch(getDependencies());
-        } else if (dependenciesRequest.status === STATUS.OK&& isEmpty(graphs)) {
+        } else if (
+            dependenciesRequest.status === STATUS.OK &&
+            isEmpty(graphs)
+        ) {
             dispatch(computeGraphs(dependenciesRequest.content));
         }
 
         if (
             // dependenciesRequest and its computed stores
-            dependenciesRequest.status === STATUS.OK&&
+            dependenciesRequest.status === STATUS.OK &&
             !isEmpty(graphs) &&
-
             // LayoutRequest and its computed stores
-            layoutRequest.status === STATUS.OK&&
+            layoutRequest.status === STATUS.OK &&
             !isEmpty(layout) &&
             !isNil(paths) &&
-
             // Hasn't already hydrated
             appLifecycle === getAppState('STARTED')
         ) {
@@ -73,54 +74,51 @@ class UnconnectedContainer extends Component {
         }
     }
 
-    render () {
+    render() {
         const {
             appLifecycle,
             dependenciesRequest,
             layoutRequest,
-            layout
+            layout,
         } = this.props;
 
-        if (layoutRequest.status &&
+        if (
+            layoutRequest.status &&
             !contains(layoutRequest.status, [STATUS.OK, 'loading'])
         ) {
-            return (<div className="_dash-error">{'Error loading layout'}</div>);
-        }
-
-
-        else if (
+            return <div className="_dash-error">{'Error loading layout'}</div>;
+        } else if (
             dependenciesRequest.status &&
             !contains(dependenciesRequest.status, [STATUS.OK, 'loading'])
         ) {
-            return (<div className="_dash-error">{'Error loading dependencies'}</div>);
-        }
-
-
-        else if (appLifecycle === getAppState('HYDRATED')) {
+            return (
+                <div className="_dash-error">
+                    {'Error loading dependencies'}
+                </div>
+            );
+        } else if (appLifecycle === getAppState('HYDRATED')) {
             return (
                 <div id="_dash-app-content">
-                    <TreeContainer layout={layout}/>
+                    <TreeContainer layout={layout} />
                 </div>
             );
         }
 
-        
-            return (<div className="_dash-loading">{'Loading...'}</div>);
-        
+        return <div className="_dash-loading">{'Loading...'}</div>;
     }
 }
 UnconnectedContainer.propTypes = {
     appLifecycle: PropTypes.oneOf([
         getAppState('STARTED'),
-        getAppState('HYDRATED')
+        getAppState('HYDRATED'),
     ]),
     dispatch: PropTypes.func,
     dependenciesRequest: PropTypes.object,
     layoutRequest: PropTypes.object,
     layout: PropTypes.object,
     paths: PropTypes.object,
-    history: PropTypes.array
-}
+    history: PropTypes.array,
+};
 
 const Container = connect(
     // map state to props
@@ -131,7 +129,7 @@ const Container = connect(
         layout: state.layout,
         graphs: state.graphs,
         paths: state.paths,
-        history: state.history
+        history: state.history,
     }),
     dispatch => ({dispatch})
 )(UnconnectedContainer);
diff --git a/src/AccessDenied.react.js b/src/AccessDenied.react.js
index 59bbf0ef..80135d34 100644
--- a/src/AccessDenied.react.js
+++ b/src/AccessDenied.react.js
@@ -11,10 +11,7 @@ function AccessDenied(props) {
     const owner_username = fid.split(':')[0];
     return (
         <div style={merge(styles.base.html, styles.base.container)}>
-
-            <div style={styles.base.h2}>
-                {"Access Denied"}
-            </div>
+            <div style={styles.base.h2}>{'Access Denied'}</div>
 
             <div style={styles.base.h4}>
                 {"Uh oh! You don't have access to this Dash app."}
@@ -26,21 +23,23 @@ function AccessDenied(props) {
                   to this app and then try refreshing the app.`}
             </div>
 
-            <br/>
+            <br />
 
-            <a style={styles.base.a} onClick={() => {
-                document.cookie = (
-                    `${constants.OAUTH_COOKIE_NAME}=; `+
-                    'expires=Thu, 01 Jan 1970 00:00:01 GMT;'
-                );
-                window.location.reload(true);
-            }}>
+            <a
+                style={styles.base.a}
+                onClick={() => {
+                    document.cookie =
+                        `${constants.OAUTH_COOKIE_NAME}=; ` +
+                        'expires=Thu, 01 Jan 1970 00:00:01 GMT;';
+                    window.location.reload(true);
+                }}
+            >
                 {'Log out of session'}
             </a>
         </div>
-    )
+    );
 }
 AccessDenied.propTypes = {
-    config: PropTypes.object
-}
+    config: PropTypes.object,
+};
 export default AccessDenied;
diff --git a/src/AppContainer.react.js b/src/AppContainer.react.js
index 65ea7faf..12f04483 100644
--- a/src/AppContainer.react.js
+++ b/src/AppContainer.react.js
@@ -10,10 +10,10 @@ function UnconnectedAppContainer() {
     return (
         <Authentication>
             <div>
-                <Toolbar/>
-                <APIController/>
-                <DocumentTitle/>
-                <Loading/>
+                <Toolbar />
+                <APIController />
+                <DocumentTitle />
+                <Loading />
             </div>
         </Authentication>
     );
@@ -21,7 +21,7 @@ function UnconnectedAppContainer() {
 
 const AppContainer = connect(
     state => ({
-        history: state.history
+        history: state.history,
     }),
     dispatch => ({dispatch})
 )(UnconnectedAppContainer);
diff --git a/src/AppProvider.react.js b/src/AppProvider.react.js
index 024af25e..62b52d5b 100644
--- a/src/AppProvider.react.js
+++ b/src/AppProvider.react.js
@@ -1,5 +1,5 @@
 import React from 'react';
-import {Provider} from 'react-redux'
+import {Provider} from 'react-redux';
 
 import initializeStore from './store';
 import AppContainer from './AppContainer.react';
@@ -8,7 +8,7 @@ const store = initializeStore();
 
 const AppProvider = () => (
     <Provider store={store}>
-        <AppContainer/>
+        <AppContainer />
     </Provider>
 );
 
diff --git a/src/Authentication.react.js b/src/Authentication.react.js
index 1f74546e..be31ed44 100644
--- a/src/Authentication.react.js
+++ b/src/Authentication.react.js
@@ -1,11 +1,11 @@
 /* global window:true, document:true */
 import React, {Component} from 'react';
 import PropTypes from 'prop-types';
-import {connect} from 'react-redux'
+import {connect} from 'react-redux';
 import queryString from 'query-string';
 import {login} from './actions/api';
 import {readConfig} from './actions/index';
-import {contains, isEmpty, merge, type} from 'ramda'
+import {contains, isEmpty, merge, type} from 'ramda';
 import * as styles from './styles/styles.js';
 import {REDIRECT_URI_PATHNAME, STATUS} from './constants/constants';
 
@@ -18,13 +18,19 @@ const popupCenter = (url, title, w, h) => {
     const width = window.innerWidth;
     const height = window.innerHeight;
 
-    const left = ((width / 2) - (w / 2)) + screenLeft;
-    const top = ((height / 2) - (h / 2)) + screenTop;
+    const left = width / 2 - w / 2 + screenLeft;
+    const top = height / 2 - h / 2 + screenTop;
     const popupWindow = window.open(
-        url, title,
-        ('scrollbars=yes,width=' + w +
-         ', height=' + h + ', top=' + top +
-         ', left=' + left)
+        url,
+        title,
+        'scrollbars=yes,width=' +
+            w +
+            ', height=' +
+            h +
+            ', top=' +
+            top +
+            ', left=' +
+            left
     );
     return popupWindow;
 };
@@ -46,9 +52,7 @@ class UnconnectedLogin extends Component {
     }
 
     buildOauthUrl() {
-        const {oauth_client_id, plotly_domain} = (
-            this.props.config
-        );
+        const {oauth_client_id, plotly_domain} = this.props.config;
         return (
             `${plotly_domain}/o/authorize/?response_type=token&` +
             `client_id=${oauth_client_id}&` +
@@ -58,14 +62,17 @@ class UnconnectedLogin extends Component {
 
     oauthPopUp() {
         const popupWindow = popupCenter(
-            this.buildOauthUrl(), 'Authorization', '500', '500'
+            this.buildOauthUrl(),
+            'Authorization',
+            '500',
+            '500'
         );
         if (window.focus) {
             popupWindow.focus();
         }
         window.popupWindow = popupWindow;
         const interval = setInterval(() => {
-            if(popupWindow.closed) {
+            if (popupWindow.closed) {
                 this.props.onClosed();
                 clearInterval(interval);
             }
@@ -91,12 +98,14 @@ class UnconnectedLogin extends Component {
                         {`This dash app requires a plotly login to view.
                           Don't have an account yet?`}
                     </span>
-                    <a style={styles.base.a}
-                       href={`${plotly_domain}/accounts/login/?action=signup`}>
+                    <a
+                        style={styles.base.a}
+                        href={`${plotly_domain}/accounts/login/?action=signup`}
+                    >
                         {' Create an account '}
                     </a>
                     <span>
-                    {` (it's free)
+                        {` (it's free)
                       and then request access from the owner of this app.`}
                     </span>
                 </div>
@@ -106,11 +115,9 @@ class UnconnectedLogin extends Component {
 }
 UnconnectedLogin.propTypes = {
     onClosed: PropTypes.func,
-    config: PropTypes.object
-}
-const Login = connect(
-    state => ({config: state.config})
-)(UnconnectedLogin);
+    config: PropTypes.object,
+};
+const Login = connect(state => ({config: state.config}))(UnconnectedLogin);
 
 /**
  * OAuth redirect component
@@ -138,39 +145,27 @@ class UnconnectedOauthRedirect extends Component {
         const {loginRequest} = this.props;
         let content;
         if (isEmpty(loginRequest) || loginRequest.status === 'loading') {
-
             content = <div className="_dash-loading">Loading...</div>;
-
         } else if (loginRequest.status === STATUS.OK) {
-
             window.close();
-
         } else {
-
             content = (
                 <div>
                     <h3>{'Yikes! An error occurred trying to log in.'}</h3>
-                    {
-                        loginRequest.content ?
-                        <pre>{JSON.stringify(loginRequest.content)}</pre> :
-                        null
-                    }
+                    {loginRequest.content ? (
+                        <pre>{JSON.stringify(loginRequest.content)}</pre>
+                    ) : null}
                 </div>
             );
-
         }
-        return (
-            <div>
-                {content}
-            </div>
-        );
+        return <div>{content}</div>;
     }
 }
 UnconnectedOauthRedirect.propTypes = {
     loginRequest: PropTypes.object,
     login: PropTypes.func,
-    dispatch: PropTypes.func
-}
+    dispatch: PropTypes.func,
+};
 const OauthRedirect = connect(
     state => ({loginRequest: state.loginRequest}),
     dispatch => ({dispatch})
@@ -194,8 +189,8 @@ class Authentication extends Component {
     constructor(props) {
         super(props);
         this.state = {
-            oauth_flow_counter: 0
-        }
+            oauth_flow_counter: 0,
+        };
     }
 
     componentDidMount() {
@@ -208,63 +203,47 @@ class Authentication extends Component {
 
     initialization(props) {
         const {config, dispatch} = props;
-        if (type(config) === "Null") {
+        if (type(config) === 'Null') {
             dispatch(readConfig());
         }
     }
 
     render() {
-
         const {children, config} = this.props;
 
         // OAuth redirect
         if (window.location.pathname === REDIRECT_URI_PATHNAME) {
-            return (
-                <OauthRedirect/>
-            );
+            return <OauthRedirect />;
         }
 
-        if (type(config) === "Null") {
-
+        if (type(config) === 'Null') {
             return <div className="_dash-loading">Loading...</div>;
-
-        }
-
-        else if (config.fid) {
-
+        } else if (config.fid) {
             if (contains('plotly_oauth_token=', document.cookie)) {
-
                 return children;
-
             }
 
-            
-
-                // Set oauth token cookie through an oauth flow
-                return (
-                    <Login onClosed={
-                        () => this.setState({
+            // Set oauth token cookie through an oauth flow
+            return (
+                <Login
+                    onClosed={() =>
+                        this.setState({
                             oauth_flow_counter:
-                            this.state.oauth_flow_counter + 1
+                                this.state.oauth_flow_counter + 1,
                         })
-                    }/>
-                );
-
-            
+                    }
+                />
+            );
         }
 
-        
-
-            return children;
-
-        
+        return children;
     }
 }
 
 Authentication.propTypes = {
     children: PropTypes.object,
-    config: PropTypes.object
-}
+    config: PropTypes.object,
+};
 
 export default connect(
     state => ({
diff --git a/src/TreeContainer.js b/src/TreeContainer.js
index 5250d6c8..b3b44f24 100644
--- a/src/TreeContainer.js
+++ b/src/TreeContainer.js
@@ -1,4 +1,4 @@
-'use strict'
+'use strict';
 
 import R from 'ramda';
 import React, {Component} from 'react';
@@ -18,10 +18,12 @@ export default class TreeContainer extends Component {
 
 TreeContainer.propTypes = {
     layout: PropTypes.object,
-}
+};
 
 function render(component) {
-    if (R.contains(R.type(component), ['String', 'Number', 'Null', 'Boolean'])) {
+    if (
+        R.contains(R.type(component), ['String', 'Number', 'Null', 'Boolean'])
+    ) {
         return component;
     }
 
@@ -30,29 +32,30 @@ function render(component) {
 
     const componentProps = R.propOr({}, 'props', component);
 
-    if (!R.has('props', component) ||
+    if (
+        !R.has('props', component) ||
         !R.has('children', component.props) ||
-        typeof component.props.children === 'undefined') {
-
+        typeof component.props.children === 'undefined'
+    ) {
         // No children
         children = [];
-
-    } else if (R.contains(
-        R.type(component.props.children),
-        ['String', 'Number', 'Null', 'Boolean'])
+    } else if (
+        R.contains(R.type(component.props.children), [
+            'String',
+            'Number',
+            'Null',
+            'Boolean',
+        ])
     ) {
-
         children = [component.props.children];
-
     } else {
-
         // One or multiple objects
         // Recursively render the tree
         // TODO - I think we should pass in `key` here.
-        children = (Array.isArray(componentProps.children) ?
-                    componentProps.children : [componentProps.children])
-                    .map(render);
-
+        children = (Array.isArray(componentProps.children)
+            ? componentProps.children
+            : [componentProps.children]
+        ).map(render);
     }
 
     if (!component.type) {
@@ -75,13 +78,9 @@ function render(component) {
         ...children
     );
 
-    return (
-        <NotifyObservers id={componentProps.id}>
-            {parent}
-        </NotifyObservers>
-    );
+    return <NotifyObservers id={componentProps.id}>{parent}</NotifyObservers>;
 }
 
 render.propTypes = {
-    children: PropTypes.object
-}
+    children: PropTypes.object,
+};
diff --git a/src/index.js b/src/index.js
index f9637800..3e286089 100644
--- a/src/index.js
+++ b/src/index.js
@@ -6,8 +6,4 @@ import React from 'react';
 import ReactDOM from 'react-dom';
 import AppProvider from './AppProvider.react';
 
-
-ReactDOM.render(
-    <AppProvider/>,
-    document.getElementById('react-entry-point')
-);
+ReactDOM.render(<AppProvider />, document.getElementById('react-entry-point'));
diff --git a/src/registry.js b/src/registry.js
index 3a664ce0..d3b96b6b 100644
--- a/src/registry.js
+++ b/src/registry.js
@@ -14,5 +14,5 @@ export default {
         }
 
         throw new Error(`${namespace} was not found.`);
-    }
+    },
 };
diff --git a/src/store.js b/src/store.js
index a0c56a38..39cb0b34 100644
--- a/src/store.js
+++ b/src/store.js
@@ -5,11 +5,11 @@ import thunk from 'redux-thunk';
 import reducer from './reducers/reducer';
 import createLogger from 'redux-logger';
 
-
 let logger;
 // only set up logger in non-production mode
-if (process.env.NODE_ENV !== 'production')
-    {logger = createLogger();}
+if (process.env.NODE_ENV !== 'production') {
+    logger = createLogger();
+}
 let store;
 
 /**
@@ -24,10 +24,10 @@ const initializeStore = () => {
     }
 
     // only attach logger to middleware in non-production mode
-    store = process.env.NODE_ENV === 'production'
-        ? createStore(reducer, applyMiddleware(thunk))
-        : createStore(reducer, applyMiddleware(thunk, logger));
-
+    store =
+        process.env.NODE_ENV === 'production'
+            ? createStore(reducer, applyMiddleware(thunk))
+            : createStore(reducer, applyMiddleware(thunk, logger));
 
     // TODO - Protect this under a debug mode?
     window.store = store; /* global window:true */
diff --git a/src/utils.js b/src/utils.js
index ba6e4b6c..0da09ca6 100644
--- a/src/utils.js
+++ b/src/utils.js
@@ -1,38 +1,58 @@
 import {has, type} from 'ramda';
 
-
 /*
  * requests_pathname_prefix is the new config parameter introduced in
  * dash==0.18.0. The previous versions just had url_base_pathname
  */
 export function urlBase(config) {
-    if (type(config) === "Null" ||
-        (type(config) === "Object") &&
-        !has('url_base_pathname', config) &&
-        !has('requests_pathname_prefix', config)) {
-        throw new Error(`
+    if (
+        type(config) === 'Null' ||
+        (type(config) === 'Object' &&
+            !has('url_base_pathname', config) &&
+            !has('requests_pathname_prefix', config))
+    ) {
+        throw new Error(
+            `
             Trying to make an API request but "url_base_pathname" and
             "requests_pathname_prefix"
-            is not in \`config\`. \`config\` is: `, config);
-    } else if (has('url_base_pathname', config) &&
-        !has('requests_pathname_prefix', config)) {
+            is not in \`config\`. \`config\` is: `,
+            config
+        );
+    } else if (
+        has('url_base_pathname', config) &&
+        !has('requests_pathname_prefix', config)
+    ) {
         return config.url_base_pathname;
     } else if (has('requests_pathname_prefix', config)) {
         return config.requests_pathname_prefix;
     } else {
         throw new Error(
             `Unhandled case trying to get url_base_pathname or
-             requests_pathname_prefix from config`, config);
+             requests_pathname_prefix from config`,
+            config
+        );
     }
 }
 
 export function uid() {
-  function s4() {
-    const h = 0x10000;
-    return Math.floor((1 + Math.random()) * h)
-      .toString(16)
-      .substring(1);
-  }
-  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
-    s4() + '-' + s4() + s4() + s4();
+    function s4() {
+        const h = 0x10000;
+        return Math.floor((1 + Math.random()) * h)
+            .toString(16)
+            .substring(1);
+    }
+    return (
+        s4() +
+        s4() +
+        '-' +
+        s4() +
+        '-' +
+        s4() +
+        '-' +
+        s4() +
+        '-' +
+        s4() +
+        s4() +
+        s4()
+    );
 }
