commit 1b0226ee608d33e81ea592d9729fd64c6541bbd2
Author: t4rk1n <t4rk@outlook.com>
Date:   Wed Feb 13 22:14:38 2019 -0500

    :white_check_mark: Add callback context test.

diff --git a/tests/test_integration.py b/tests/test_integration.py
index 36247959..10826f10 100644
--- a/tests/test_integration.py
+++ b/tests/test_integration.py
@@ -12,7 +12,9 @@ import dash_flow_example
 import dash
 
 from dash.dependencies import Input, Output
-from dash.exceptions import PreventUpdate, CallbackException
+from dash.exceptions import (
+    PreventUpdate, CallbackException, MissingCallbackContextException
+)
 from .IntegrationTests import IntegrationTests
 from .utils import assert_clean_console, invincible, wait_for
 
@@ -571,3 +573,48 @@ class Tests(IntegrationTests):
             'Same output and input: input-output.children',
             context.exception.args[0]
         )
+
+    def test_callback_context(self):
+        app = dash.Dash(__name__)
+
+        btns = ['btn-{}'.format(x) for x in range(1, 6)]
+
+        app.layout = html.Div([
+            html.Div([
+                html.Button(x, id=x) for x in btns
+            ]),
+            html.Div(id='output'),
+        ])
+
+        @app.callback(Output('output', 'children'),
+                      [Input(x, 'n_clicks') for x in btns])
+        def on_click(*args):
+            print('wtf')
+            if not dash.callback.triggered:
+                raise PreventUpdate
+            trigger = dash.callback.triggered[0]
+            input_value = dash.callback.inputs.get(trigger)
+            return 'Just clicked {} for the {} time!'.format(
+                trigger.split('.')[0], input_value
+            )
+
+        self.startServer(app)
+
+        btn_elements = [
+            self.wait_for_element_by_id(x) for x in btns
+        ]
+
+        for i in range(1, 10):
+            for j, btn in enumerate(btns):
+                btn_elements[j].click()
+                self.wait_for_text_to_equal(
+                    '#output',
+                    'Just clicked {} for the {} time!'.format(
+                        btn, i
+                    )
+                )
+
+    def test_no_callback_context(self):
+        with self.assertRaises(MissingCallbackContextException):
+            no_context = dash.callback.inputs
+
