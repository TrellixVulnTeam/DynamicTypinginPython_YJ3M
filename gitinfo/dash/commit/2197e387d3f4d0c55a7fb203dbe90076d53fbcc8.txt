commit 2197e387d3f4d0c55a7fb203dbe90076d53fbcc8
Author: Philippe Duval <philippe@plot.ly>
Date:   Wed Jul 11 18:15:58 2018 -0400

    Add checks for index, change the format syntax to {%key%}, more tests.

diff --git a/dash/_utils.py b/dash/_utils.py
index 55ea16f7..1c6e5ca5 100644
--- a/dash/_utils.py
+++ b/dash/_utils.py
@@ -1,7 +1,7 @@
 def interpolate_str(template, **data):
     s = template
     for k, v in data.items():
-        key = '{' + k + '}'
+        key = '{%' + k + '%}'
         s = s.replace(key, v)
     return s
 
diff --git a/dash/dash.py b/dash/dash.py
index 89d2cc69..80c4e930 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -28,16 +28,16 @@ _default_index = '''
 <!DOCTYPE html>
 <html>
     <head>
-        {metas}
-        <title>{title}</title>
-        {favicon}
-        {css}
+        {%metas%}
+        <title>{%title%}</title>
+        {%favicon%}
+        {%css%}
     </head>
     <body>
-        {app_entry}
+        {%app_entry%}
         <footer>
-            {config}
-            {scripts}
+            {%config%}
+            {%scripts%}
         </footer>
     </body>
 </html>
@@ -51,9 +51,17 @@ _app_entry = '''
 </div>
 '''
 
+_re_index_entry = re.compile(r'{%app_entry%}')
+_re_index_config = re.compile(r'{%config%}')
+_re_index_scripts = re.compile(r'{%scripts%}')
+
+_re_index_entry_id = re.compile(r'(id="react-entry-point")')
+_re_index_config_id = re.compile(r'(id="_dash-config")')
+_re_index_scripts_id = re.compile(r'(src=".*dash[-_]renderer.*")')
+
 
 # pylint: disable=too-many-instance-attributes
-# pylint: disable=too-many-arguments, too-many-locals
+# pylint: disable=too-many-arguments
 class Dash(object):
     def __init__(
             self,
@@ -102,6 +110,7 @@ class Dash(object):
         # list of dependencies
         self.callback_map = {}
 
+        self._index_string = ''
         self.index_string = index_string
         self._meta_tags = meta_tags or []
         self._favicon = None
@@ -200,6 +209,26 @@ class Dash(object):
         self.css._update_layout(layout_value)
         self.scripts._update_layout(layout_value)
 
+    @property
+    def index_string(self):
+        return self._index_string
+
+    @index_string.setter
+    def index_string(self, value):
+        checks = (
+            (_re_index_entry.search(value), 'app_entry'),
+            (_re_index_config.search(value), 'config',),
+            (_re_index_scripts.search(value), 'scripts'),
+        )
+        missing = [missing for check, missing in checks if not check]
+        if missing:
+            raise Exception(
+                'Did you forget to include {} in your index string ?'.format(
+                    ', '.join('{%' + x + '%}' for x in missing)
+                )
+            )
+        self._index_string = value
+
     def serve_layout(self):
         layout = self._layout_value()
 
@@ -364,9 +393,28 @@ class Dash(object):
                 flask.url_for('assets.static', filename=self._favicon))
         else:
             favicon = ''
-        return self.interpolate_index(
+
+        index = self.interpolate_index(
             metas, title, css, config, scripts, _app_entry, favicon)
 
+        checks = (
+            (_re_index_entry_id.search(index), '#react-entry-point'),
+            (_re_index_config_id.search(index), '#_dash-configs'),
+            (_re_index_scripts_id.search(index), 'dash-renderer'),
+        )
+        missing = [missing for check, missing in checks if not check]
+
+        if missing:
+            plural = 's' if len(missing) > 1 else ''
+            raise Exception(
+                'Missing element{pl} {ids} in index.'.format(
+                    ids=', '.join(missing),
+                    pl=plural
+                )
+            )
+
+        return index
+
     def interpolate_index(self,
                           metas, title, css, config,
                           scripts, app_entry, favicon):
diff --git a/tests/test_integration.py b/tests/test_integration.py
index 66744979..d333a9e4 100644
--- a/tests/test_integration.py
+++ b/tests/test_integration.py
@@ -6,6 +6,7 @@ import re
 import dash_html_components as html
 import dash_core_components as dcc
 import dash_flow_example
+
 import dash
 import time
 
@@ -302,18 +303,18 @@ class Tests(IntegrationTests):
         <!DOCTYPE html>
         <html>
             <head>
-                {metas}
-                <title>{title}</title>
-                {favicon}
-                {css}
+                {%metas%}
+                <title>{%title%}</title>
+                {%favicon%}
+                {%css%}
             </head>
             <body>
                 <div id="custom-header">My custom header</div>
                 <div id="add"></div>
-                {app_entry}
+                {%app_entry%}
                 <footer>
-                    {config}
-                    {scripts}
+                    {%config%}
+                    {%scripts%}
                 </footer>
                 <div id="custom-footer">My custom footer</div>
                 <script>
@@ -323,6 +324,9 @@ class Tests(IntegrationTests):
                     throw Error('could not find container to add');
                 }
                 elem.innerHTML = 'Got added';
+                var config = {};
+                fetch('/nonexist').then(r => r.json())
+                    .then(r => config = r).catch(err => ({config}));
                 </script>
             </body>
         </html>
@@ -352,16 +356,16 @@ class Tests(IntegrationTests):
         <!DOCTYPE html>
         <html>
             <head>
-                {metas}
-                <title>{title}</title>
-                {css}
+                {%metas%}
+                <title>{%title%}</title>
+                {%css%}
             </head>
             <body>
                 <div id="tested"></div>
-                {app_entry}
+                {%app_entry%}
                 <footer>
-                    {config}
-                    {scripts}
+                    {%config%}
+                    {%scripts%}
                 </footer>
             </body>
         </html>
@@ -393,3 +397,38 @@ class Tests(IntegrationTests):
             self.assertEqual(order[i], tested[i])
 
         self.percy_snapshot('test assets includes')
+
+    def test_invalid_index_string(self):
+        app = dash.Dash()
+
+        def will_raise():
+            app.index_string = '''
+                    <!DOCTYPE html>
+                    <html>
+                        <head>
+                            {%metas%}
+                            <title>{%title%}</title>
+                            {%favicon%}
+                            {%css%}
+                        </head>
+                        <body>
+                            <div id="custom-header">My custom header</div>
+                            <div id="add"></div>
+                            <footer>
+                            </footer>
+                        </body>
+                    </html>
+                    '''
+
+        with self.assertRaises(Exception) as context:
+            will_raise()
+
+        app.layout = html.Div()
+        self.startServer(app)
+
+        exc_msg = str(context.exception)
+        self.assertTrue('{%app_entry%}' in exc_msg)
+        self.assertTrue('{%config%}' in exc_msg)
+        self.assertTrue('{%scripts%}' in exc_msg)
+        time.sleep(0.5)
+        print('invalid index string')
