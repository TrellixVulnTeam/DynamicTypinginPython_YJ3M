commit 5e65b843476369f164ef3fa20bd02e5e3082b87f
Author: byron <byron@plot.ly>
Date:   Thu Jun 6 22:46:25 2019 -0400

    :white_check_mark: callbacks and other minor changes

diff --git a/tests/integration/callbacks/test_basic_callback.py b/tests/integration/callbacks/test_basic_callback.py
new file mode 100644
index 00000000..9c064b53
--- /dev/null
+++ b/tests/integration/callbacks/test_basic_callback.py
@@ -0,0 +1,151 @@
+from multiprocessing import Value
+
+from bs4 import BeautifulSoup
+
+import dash_core_components as dcc
+import dash_html_components as html
+import dash
+from dash.dependencies import Input, Output
+
+
+def test_cbsc001_simple_callback(dash_duo):
+    app = dash.Dash(__name__)
+    app.layout = html.Div(
+        [
+            dcc.Input(id="input", value="initial value"),
+            html.Div(html.Div([1.5, None, "string", html.Div(id="output-1")])),
+        ]
+    )
+    call_count = Value("i", 0)
+
+    @app.callback(Output("output-1", "children"), [Input("input", "value")])
+    def update_output(value):
+        call_count.value = call_count.value + 1
+        return value
+
+    dash_duo.start_app_server(app)
+
+    assert dash_duo.find_element("#output-1").text == "initial value"
+    dash_duo.percy_snapshot(name="simple-callback-initial")
+
+    input_ = dash_duo.find_element("#input")
+    dash_duo.clear_input(input_)
+
+    input_.send_keys("hello world")
+
+    assert dash_duo.find_element("#output-1").text == "hello world"
+    dash_duo.percy_snapshot(name="simple-callback-hello-world")
+
+    assert call_count.value == 2 + len(
+        "hello world"
+    ), "initial count + each key stroke"
+
+    rqs = dash_duo.redux_state_rqs
+    assert len(rqs) == 1
+
+    assert dash_duo.get_logs() == []
+
+
+def test_cbsc002_callbacks_generating_children(dash_duo):
+    """ Modify the DOM tree by adding new components in the callbacks"""
+
+    app = dash.Dash(__name__)
+    app.layout = html.Div(
+        [dcc.Input(id="input", value="initial value"), html.Div(id="output")]
+    )
+
+    @app.callback(Output("output", "children"), [Input("input", "value")])
+    def pad_output(input):
+        return html.Div(
+            [
+                dcc.Input(id="sub-input-1", value="sub input initial value"),
+                html.Div(id="sub-output-1"),
+            ]
+        )
+
+    call_count = Value("i", 0)
+
+    # these components don't exist in the initial render
+    app.config.supress_callback_exceptions = True
+
+    @app.callback(
+        Output("sub-output-1", "children"), [Input("sub-input-1", "value")]
+    )
+    def update_input(value):
+        call_count.value = call_count.value + 1
+        return value
+
+    dash_duo.start_app_server(app)
+
+    assert call_count.value == 1, "called once at initial stage"
+
+    pad_input, pad_div = (
+        BeautifulSoup(
+            dash_duo.driver.find_element_by_css_selector(
+                "#react-entry-point"
+            ).get_attribute("innerHTML"),
+            "lxml",
+        )
+        .select_one("#output > div")
+        .contents
+    )
+
+    dash_duo.assertEqual(pad_input.attrs["value"], "sub input initial value")
+    dash_duo.assertEqual(pad_input.attrs["id"], "sub-input-1")
+    dash_duo.assertEqual(pad_input.name, "input")
+
+    dash_duo.assertTrue(
+        pad_div.text == pad_input.attrs["value"]
+        and pad_div.get("id") == "sub-output-1",
+        "the sub-output-1 content reflects to sub-input-1 value",
+    )
+
+    dash_duo.percy_snapshot(name="callback-generating-function-1")
+
+    # the paths should include these new output IDs
+    dash_duo.assertEqual(
+        dash_duo.driver.execute_script("return window.store.getState().paths"),
+        {
+            "input": ["props", "children", 0],
+            "output": ["props", "children", 1],
+            "sub-input-1": [
+                "props",
+                "children",
+                1,
+                "props",
+                "children",
+                "props",
+                "children",
+                0,
+            ],
+            "sub-output-1": [
+                "props",
+                "children",
+                1,
+                "props",
+                "children",
+                "props",
+                "children",
+                1,
+            ],
+        },
+    )
+
+    # editing the input should modify the sub output
+    sub_input = dash_duo.driver.find_element_by_id("sub-input-1")
+
+    sub_input.send_keys("deadbeef")
+    dash_duo.wait_for_text_to_equal(
+        "#sub-output-1", pad_input.attrs["value"] + "deadbeef"
+    )
+
+    dash_duo.assertEqual(
+        call_count.value,
+        len("deadbeef") + 1,
+        "the total updates is initial one + the text input changes",
+    )
+
+    dash_duo.request_queue_assertions(call_count.value + 1)
+    dash_duo.percy_snapshot(name="callback-generating-function-2")
+
+    dash_duo.assertTrue(dash_duo.is_console_clean())
diff --git a/tests/integration/callbacks/test_multiple_callbacks.py b/tests/integration/callbacks/test_multiple_callbacks.py
new file mode 100644
index 00000000..1c04a0f6
--- /dev/null
+++ b/tests/integration/callbacks/test_multiple_callbacks.py
@@ -0,0 +1,39 @@
+import time
+from multiprocessing import Value
+
+import dash_html_components as html
+import dash
+from dash.dependencies import Input, Output
+
+
+def test_cbmt001_called_multiple_times_and_out_of_order(dash_duo):
+    app = dash.Dash(__name__)
+    app.layout = html.Div(
+        [html.Button(id="input", n_clicks=0), html.Div(id="output")]
+    )
+
+    call_count = Value("i", 0)
+
+    @app.callback(Output("output", "children"), [Input("input", "n_clicks")])
+    def update_output(n_clicks):
+        call_count.value = call_count.value + 1
+        if n_clicks == 1:
+            time.sleep(1)
+        return n_clicks
+
+    dash_duo.start_app_server(app)
+    dash_duo.multiple_click("#input", clicks=3)
+
+    time.sleep(3)
+
+    assert call_count.value == 4, "get called 4 times"
+    assert (
+        dash_duo.find_element("#output").text == "3"
+    ), "clicked button 3 times"
+
+    rqs = dash_duo.redux_state_rqs
+    assert len(rqs) == 1 and not rqs[0]["rejected"]
+
+    dash_duo.percy_snapshot(
+        name="test_callbacks_called_multiple_times_and_out_of_order"
+    )
diff --git a/tests/integration/devtools/test_props_check.py b/tests/integration/devtools/test_props_check.py
index a47054df..f5b5e175 100644
--- a/tests/integration/devtools/test_props_check.py
+++ b/tests/integration/devtools/test_props_check.py
@@ -4,191 +4,186 @@ import dash
 from dash.dependencies import Input, Output
 
 
-def test_dvpc001_prop_check_errors_with_path(dash_duo):
-    app = dash.Dash(__name__)
-
-    test_cases = {
-        "not-boolean": {
-            "fail": True,
-            "name": 'simple "not a boolean" check',
-            "component": dcc.Graph,
-            "props": {"animate": 0},
-        },
-        "missing-required-nested-prop": {
-            "fail": True,
-            "name": 'missing required "value" inside options',
-            "component": dcc.Checklist,
-            "props": {"options": [{"label": "hello"}], "values": ["test"]},
-        },
-        "invalid-nested-prop": {
-            "fail": True,
-            "name": "invalid nested prop",
-            "component": dcc.Checklist,
-            "props": {
-                "options": [{"label": "hello", "value": True}],
-                "values": ["test"],
-            },
-        },
-        "invalid-arrayOf": {
-            "fail": True,
-            "name": "invalid arrayOf",
-            "component": dcc.Checklist,
-            "props": {"options": "test", "values": []},
-        },
-        "invalid-oneOf": {
-            "fail": True,
-            "name": "invalid oneOf",
-            "component": dcc.Input,
-            "props": {"type": "test"},
-        },
-        "invalid-oneOfType": {
-            "fail": True,
-            "name": "invalid oneOfType",
-            "component": dcc.Input,
-            "props": {"max": True},
-        },
-        "invalid-shape-1": {
-            "fail": True,
-            "name": "invalid key within nested object",
-            "component": dcc.Graph,
-            "props": {"config": {"asdf": "that"}},
-        },
-        "invalid-shape-2": {
-            "fail": True,
-            "name": "nested object with bad value",
-            "component": dcc.Graph,
-            "props": {"config": {"edits": {"legendPosition": "asdf"}}},
-        },
-        "invalid-shape-3": {
-            "fail": True,
-            "name": "invalid oneOf within nested object",
-            "component": dcc.Graph,
-            "props": {"config": {"toImageButtonOptions": {"format": "asdf"}}},
-        },
-        "invalid-shape-4": {
-            "fail": True,
-            "name": "invalid key within deeply nested object",
-            "component": dcc.Graph,
-            "props": {"config": {"toImageButtonOptions": {"asdf": "test"}}},
-        },
-        "invalid-shape-5": {
-            "fail": True,
-            "name": "invalid not required key",
-            "component": dcc.Dropdown,
-            "props": {
-                "options": [
-                    {"label": "new york", "value": "ny", "typo": "asdf"}
-                ]
-            },
-        },
-        "string-not-list": {
-            "fail": True,
-            "name": "string-not-a-list",
-            "component": dcc.Checklist,
-            "props": {
-                "options": [{"label": "hello", "value": "test"}],
-                "values": "test",
-            },
-        },
-        "no-properties": {
-            "fail": False,
-            "name": "no properties",
-            "component": dcc.Graph,
-            "props": {},
-        },
-        "nested-children": {
-            "fail": True,
-            "name": "nested children",
-            "component": html.Div,
-            "props": {"children": [[1]]},
-        },
-        "deeply-nested-children": {
-            "fail": True,
-            "name": "deeply nested children",
-            "component": html.Div,
-            "props": {"children": html.Div([html.Div([3, html.Div([[10]])])])},
-        },
-        "dict": {
-            "fail": True,
-            "name": "returning a dictionary",
-            "component": html.Div,
-            "props": {"children": {"hello": "world"}},
-        },
-        "nested-prop-failure": {
-            "fail": True,
-            "name": "nested string instead of number/null",
-            "component": dcc.Graph,
-            "props": {
-                "figure": {"data": [{}]},
-                "config": {
-                    "toImageButtonOptions": {"width": None, "height": "test"}
-                },
-            },
-        },
-        "allow-null": {
-            "fail": False,
-            "name": "nested null",
-            "component": dcc.Graph,
-            "props": {
-                "figure": {"data": [{}]},
-                "config": {
-                    "toImageButtonOptions": {"width": None, "height": None}
-                },
+test_cases = {
+    "not-boolean": {
+        "fail": True,
+        "name": 'simple "not a boolean" check',
+        "component": dcc.Graph,
+        "props": {"animate": 0},
+    },
+    "missing-required-nested-prop": {
+        "fail": True,
+        "name": 'missing required "value" inside options',
+        "component": dcc.Checklist,
+        "props": {"options": [{"label": "hello"}], "values": ["test"]},
+    },
+    "invalid-nested-prop": {
+        "fail": True,
+        "name": "invalid nested prop",
+        "component": dcc.Checklist,
+        "props": {
+            "options": [{"label": "hello", "value": True}],
+            "values": ["test"],
+        },
+    },
+    "invalid-arrayOf": {
+        "fail": True,
+        "name": "invalid arrayOf",
+        "component": dcc.Checklist,
+        "props": {"options": "test", "values": []},
+    },
+    "invalid-oneOf": {
+        "fail": True,
+        "name": "invalid oneOf",
+        "component": dcc.Input,
+        "props": {"type": "test"},
+    },
+    "invalid-oneOfType": {
+        "fail": True,
+        "name": "invalid oneOfType",
+        "component": dcc.Input,
+        "props": {"max": True},
+    },
+    "invalid-shape-1": {
+        "fail": True,
+        "name": "invalid key within nested object",
+        "component": dcc.Graph,
+        "props": {"config": {"asdf": "that"}},
+    },
+    "invalid-shape-2": {
+        "fail": True,
+        "name": "nested object with bad value",
+        "component": dcc.Graph,
+        "props": {"config": {"edits": {"legendPosition": "asdf"}}},
+    },
+    "invalid-shape-3": {
+        "fail": True,
+        "name": "invalid oneOf within nested object",
+        "component": dcc.Graph,
+        "props": {"config": {"toImageButtonOptions": {"format": "asdf"}}},
+    },
+    "invalid-shape-4": {
+        "fail": True,
+        "name": "invalid key within deeply nested object",
+        "component": dcc.Graph,
+        "props": {"config": {"toImageButtonOptions": {"asdf": "test"}}},
+    },
+    "invalid-shape-5": {
+        "fail": True,
+        "name": "invalid not required key",
+        "component": dcc.Dropdown,
+        "props": {
+            "options": [{"label": "new york", "value": "ny", "typo": "asdf"}]
+        },
+    },
+    "string-not-list": {
+        "fail": True,
+        "name": "string-not-a-list",
+        "component": dcc.Checklist,
+        "props": {
+            "options": [{"label": "hello", "value": "test"}],
+            "values": "test",
+        },
+    },
+    "no-properties": {
+        "fail": False,
+        "name": "no properties",
+        "component": dcc.Graph,
+        "props": {},
+    },
+    "nested-children": {
+        "fail": True,
+        "name": "nested children",
+        "component": html.Div,
+        "props": {"children": [[1]]},
+    },
+    "deeply-nested-children": {
+        "fail": True,
+        "name": "deeply nested children",
+        "component": html.Div,
+        "props": {"children": html.Div([html.Div([3, html.Div([[10]])])])},
+    },
+    "dict": {
+        "fail": True,
+        "name": "returning a dictionary",
+        "component": html.Div,
+        "props": {"children": {"hello": "world"}},
+    },
+    "nested-prop-failure": {
+        "fail": True,
+        "name": "nested string instead of number/null",
+        "component": dcc.Graph,
+        "props": {
+            "figure": {"data": [{}]},
+            "config": {
+                "toImageButtonOptions": {"width": None, "height": "test"}
             },
         },
-        "allow-null-2": {
-            "fail": False,
-            "name": "allow null as value",
-            "component": dcc.Dropdown,
-            "props": {"value": None},
-        },
-        "allow-null-3": {
-            "fail": False,
-            "name": "allow null in properties",
-            "component": dcc.Input,
-            "props": {"value": None},
-        },
-        "allow-null-4": {
-            "fail": False,
-            "name": "allow null in oneOfType",
-            "component": dcc.Store,
-            "props": {"id": "store", "data": None},
-        },
-        "long-property-string": {
-            "fail": True,
-            "name": "long property string with id",
-            "component": html.Div,
-            "props": {"id": "pink div", "style": "color: hotpink; " * 1000},
-        },
-        "multiple-wrong-values": {
-            "fail": True,
-            "name": "multiple wrong props",
-            "component": dcc.Dropdown,
-            "props": {"id": "dropdown", "value": 10, "options": "asdf"},
-        },
-        "boolean-html-properties": {
-            "fail": True,
-            "name": "dont allow booleans for dom props",
-            "component": html.Div,
-            "props": {"contentEditable": True},
-        },
-        "allow-exact-with-optional-and-required-1": {
-            "fail": False,
-            "name": "allow exact with optional and required keys",
-            "component": dcc.Dropdown,
-            "props": {
-                "options": [
-                    {"label": "new york", "value": "ny", "disabled": False}
-                ]
-            },
-        },
-        "allow-exact-with-optional-and-required-2": {
-            "fail": False,
-            "name": "allow exact with optional and required keys 2",
-            "component": dcc.Dropdown,
-            "props": {"options": [{"label": "new york", "value": "ny"}]},
-        },
-    }
+    },
+    "allow-null": {
+        "fail": False,
+        "name": "nested null",
+        "component": dcc.Graph,
+        "props": {
+            "figure": {"data": [{}]},
+            "config": {"toImageButtonOptions": {"width": None, "height": None}},
+        },
+    },
+    "allow-null-2": {
+        "fail": False,
+        "name": "allow null as value",
+        "component": dcc.Dropdown,
+        "props": {"value": None},
+    },
+    "allow-null-3": {
+        "fail": False,
+        "name": "allow null in properties",
+        "component": dcc.Input,
+        "props": {"value": None},
+    },
+    "allow-null-4": {
+        "fail": False,
+        "name": "allow null in oneOfType",
+        "component": dcc.Store,
+        "props": {"id": "store", "data": None},
+    },
+    "long-property-string": {
+        "fail": True,
+        "name": "long property string with id",
+        "component": html.Div,
+        "props": {"id": "pink div", "style": "color: hotpink; " * 1000},
+    },
+    "multiple-wrong-values": {
+        "fail": True,
+        "name": "multiple wrong props",
+        "component": dcc.Dropdown,
+        "props": {"id": "dropdown", "value": 10, "options": "asdf"},
+    },
+    "boolean-html-properties": {
+        "fail": True,
+        "name": "dont allow booleans for dom props",
+        "component": html.Div,
+        "props": {"contentEditable": True},
+    },
+    "allow-exact-with-optional-and-required-1": {
+        "fail": False,
+        "name": "allow exact with optional and required keys",
+        "component": dcc.Dropdown,
+        "props": {
+            "options": [{"label": "new york", "value": "ny", "disabled": False}]
+        },
+    },
+    "allow-exact-with-optional-and-required-2": {
+        "fail": False,
+        "name": "allow exact with optional and required keys 2",
+        "component": dcc.Dropdown,
+        "props": {"options": [{"label": "new york", "value": "ny"}]},
+    },
+}
+
+
+def test_dvpc001_prop_check_errors_with_path(dash_duo):
+    app = dash.Dash(__name__)
 
     app.layout = html.Div([html.Div(id="content"), dcc.Location(id="location")])
 
@@ -212,19 +207,21 @@ def test_dvpc001_prop_check_errors_with_path(dash_duo):
         dev_tools_hot_reload=False,
     )
 
-    for tcid in test_cases:
-        dash_duo.driver.get("{}/{}".format(dash_duo.server_url, tcid))
-        if test_cases[tcid]["fail"]:
+    for tc in test_cases:
+        route_url = "{}/{}".format(dash_duo.server_url, tc)
+        dash_duo.wait_for_page(url=route_url)
+
+        if test_cases[tc]["fail"]:
             dash_duo.wait_for_element(".test-devtools-error-toggle").click()
             dash_duo.percy_snapshot(
                 "devtools validation exception: {}".format(
-                    test_cases[tcid]["name"]
+                    test_cases[tc]["name"]
                 )
             )
         else:
             dash_duo.wait_for_element("#new-component")
             dash_duo.percy_snapshot(
                 "devtools validation no exception: {}".format(
-                    test_cases[tcid]["name"]
+                    test_cases[tc]["name"]
                 )
             )
diff --git a/tests/integration/renderer/test_due_diligence.py b/tests/integration/renderer/test_due_diligence.py
index ec830ed6..02a7c69d 100644
--- a/tests/integration/renderer/test_due_diligence.py
+++ b/tests/integration/renderer/test_due_diligence.py
@@ -63,12 +63,7 @@ def test_rddd001_initial_state(dash_duo):
     ) as fp:
         expected_dom = BeautifulSoup(fp.read().strip(), "lxml")
 
-    fetched_dom = BeautifulSoup(
-        dash_duo.find_element(dash_duo.dash_entry_locator).get_attribute(
-            "outerHTML"
-        ),
-        "lxml",
-    )
+    fetched_dom = dash_duo.dash_outerhtml_dom
 
     assert (
         fetched_dom.decode() == expected_dom.decode()
