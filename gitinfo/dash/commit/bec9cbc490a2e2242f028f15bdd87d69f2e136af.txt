commit bec9cbc490a2e2242f028f15bdd87d69f2e136af
Author: Alexandre Batisse <batisse.alexandre@gmail.com>
Date:   Mon Jun 24 10:49:19 2019 +0200

    replace utils docstring function w/ difflib

diff --git a/tests/unit/development/__init__.py b/tests/unit/development/__init__.py
index aa7655be..b8d2f0b3 100644
--- a/tests/unit/development/__init__.py
+++ b/tests/unit/development/__init__.py
@@ -3,134 +3,61 @@ import os
 _dir = os.path.dirname(os.path.abspath(__file__))
 
 
-def assert_no_trailing_spaces(s):
-    for line in s.split("\n"):
-        assert line == line.rstrip()
-
-
-def match_lines(val, expected):
-    for val1, exp1 in zip(val.splitlines(), expected.splitlines()):
-        assert val1 == exp1
-
-
-def assert_docstring(docstring):
-    for i, line in enumerate(docstring.split("\n")):
-        assert (
-            line
-            == (
-                [
-                    "A Table component.",
-                    "This is a description of the component.",
-                    "It's multiple lines long.",
-                    "",
-                    "Keyword arguments:",
-                    "- children (a list of or a singular dash component, string or number; optional)",  # noqa: E501
-                    "- optionalArray (list; optional): Description of optionalArray",
-                    "- optionalBool (boolean; optional)",
-                    "- optionalNumber (number; default 42)",
-                    "- optionalObject (dict; optional)",
-                    "- optionalString (string; default 'hello world')",
-                    "- optionalNode (a list of or a singular dash component, "
-                    "string or number; optional)",
-                    "- optionalElement (dash component; optional)",
-                    "- optionalEnum (a value equal to: 'News', 'Photos'; optional)",
-                    "- optionalUnion (string | number; optional)",
-                    "- optionalArrayOf (list of numbers; optional)",
-                    "- optionalObjectOf (dict with strings as keys and values "
-                    "of type number; optional)",
-                    "- optionalObjectWithExactAndNestedDescription (dict; optional): "
-                    "optionalObjectWithExactAndNestedDescription has the "
-                    "following type: dict containing keys "
-                    "'color', 'fontSize', 'figure'.",
-                    "Those keys have the following types:",
-                    "  - color (string; optional)",
-                    "  - fontSize (number; optional)",
-                    "  - figure (dict; optional): Figure is a plotly graph object. "
-                    "figure has the following type: dict containing "
-                    "keys 'data', 'layout'.",
-                    "Those keys have the following types:",
-                    "  - data (list of dicts; optional): data is a collection of traces",
-                    "  - layout (dict; optional): layout describes "
-                    "the rest of the figure",
-                    "- optionalObjectWithShapeAndNestedDescription (dict; optional): "
-                    "optionalObjectWithShapeAndNestedDescription has the "
-                    "following type: dict containing keys "
-                    "'color', 'fontSize', 'figure'.",
-                    "Those keys have the following types:",
-                    "  - color (string; optional)",
-                    "  - fontSize (number; optional)",
-                    "  - figure (dict; optional): Figure is a plotly graph object. "
-                    "figure has the following type: dict containing "
-                    "keys 'data', 'layout'.",
-                    "Those keys have the following types:",
-                    "  - data (list of dicts; optional): data is a collection of traces",
-                    "  - layout (dict; optional): layout describes "
-                    "the rest of the figure",
-                    "- optionalAny (boolean | number | string | dict | "
-                    "list; optional)",
-                    "- customProp (optional)",
-                    "- customArrayProp (list; optional)",
-                    "- data-* (string; optional)",
-                    "- aria-* (string; optional)",
-                    "- in (string; optional)",
-                    "- id (string; optional)",
-                    "        ",
-                ]
-            )[i]
-        )
-
-
-def assert_flow_docstring(docstring):
-    for i, line in enumerate(docstring.split("\n")):
-        assert (
-            line
-            == (
-                [
-                    "A Flow_component component.",
-                    "This is a test description of the component.",
-                    "It's multiple lines long.",
-                    "",
-                    "Keyword arguments:",
-                    "- requiredString (string; required): A required string",
-                    "- optionalString (string; default ''): A string that isn't required.",
-                    "- optionalBoolean (boolean; default false): A boolean test",
-                    "- optionalNode (a list of or a singular dash component, string or number; optional): "
-                    "A node test",
-                    "- optionalArray (list; optional): An array test with a particularly ",
-                    "long description that covers several lines. It includes the newline character ",
-                    "and should span 3 lines in total.",
-                    "- requiredUnion (string | number; required)",
-                    "- optionalSignature(shape) (dict; optional): This is a test of an object's shape. "
-                    "optionalSignature(shape) has the following type: dict containing keys 'checked', "
-                    "'children', 'customData', 'disabled', 'label', 'primaryText', 'secondaryText', "
-                    "'style', 'value'.",
-                    "  Those keys have the following types:",
-                    "  - checked (boolean; optional)",
-                    "  - children (a list of or a singular dash component, string or number; optional)",
-                    "  - customData (bool | number | str | dict | list; required): A test description",
-                    "  - disabled (boolean; optional)",
-                    "  - label (string; optional)",
-                    "  - primaryText (string; required): Another test description",
-                    "  - secondaryText (string; optional)",
-                    "  - style (dict; optional)",
-                    "  - value (bool | number | str | dict | list; required)",
-                    "- requiredNested (dict; required): requiredNested has the following type: dict containing "
-                    "keys 'customData', 'value'.",
-                    "  Those keys have the following types:",
-                    "  - customData (dict; required): customData has the following type: dict containing "
-                    "keys 'checked', 'children', 'customData', 'disabled', 'label', 'primaryText', "
-                    "'secondaryText', 'style', 'value'.",
-                    "    Those keys have the following types:",
-                    "    - checked (boolean; optional)",
-                    "    - children (a list of or a singular dash component, string or number; optional)",
-                    "    - customData (bool | number | str | dict | list; required)",
-                    "    - disabled (boolean; optional)",
-                    "    - label (string; optional)",
-                    "    - primaryText (string; required)",
-                    "    - secondaryText (string; optional)",
-                    "    - style (dict; optional)",
-                    "    - value (bool | number | str | dict | list; required)",
-                    "  - value (bool | number | str | dict | list; required)",
-                ]
-            )[i]
-        )
+def has_trailing_space(s):
+    return any(line != line.rstrip() for line in s.splitlines())
+
+
+expected_table_component_doc = [
+    "A Table component.",
+    "This is a description of the component.",
+    "It's multiple lines long.",
+    "",
+    "Keyword arguments:",
+    "- children (a list of or a singular dash component, string or number; optional)",
+    "- optionalArray (list; optional): Description of optionalArray",
+    "- optionalBool (boolean; optional)",
+    "- optionalNumber (number; default 42)",
+    "- optionalObject (dict; optional)",
+    "- optionalString (string; default 'hello world')",
+    "- optionalNode (a list of or a singular dash component, "
+    "string or number; optional)",
+    "- optionalElement (dash component; optional)",
+    "- optionalEnum (a value equal to: 'News', 'Photos'; optional)",
+    "- optionalUnion (string | number; optional)",
+    "- optionalArrayOf (list of numbers; optional)",
+    "- optionalObjectOf (dict with strings as keys and values "
+    "of type number; optional)",
+    "- optionalObjectWithExactAndNestedDescription (dict; optional): "
+    "optionalObjectWithExactAndNestedDescription has the "
+    "following type: dict containing keys "
+    "'color', 'fontSize', 'figure'.",
+    "Those keys have the following types:",
+    "  - color (string; optional)",
+    "  - fontSize (number; optional)",
+    "  - figure (dict; optional): Figure is a plotly graph object. "
+    "figure has the following type: dict containing "
+    "keys 'data', 'layout'.",
+    "Those keys have the following types:",
+    "  - data (list of dicts; optional): data is a collection of traces",
+    "  - layout (dict; optional): layout describes " "the rest of the figure",
+    "- optionalObjectWithShapeAndNestedDescription (dict; optional): "
+    "optionalObjectWithShapeAndNestedDescription has the "
+    "following type: dict containing keys "
+    "'color', 'fontSize', 'figure'.",
+    "Those keys have the following types:",
+    "  - color (string; optional)",
+    "  - fontSize (number; optional)",
+    "  - figure (dict; optional): Figure is a plotly graph object. "
+    "figure has the following type: dict containing "
+    "keys 'data', 'layout'.",
+    "Those keys have the following types:",
+    "  - data (list of dicts; optional): data is a collection of traces",
+    "  - layout (dict; optional): layout describes " "the rest of the figure",
+    "- optionalAny (boolean | number | string | dict | " "list; optional)",
+    "- customProp (optional)",
+    "- customArrayProp (list; optional)",
+    "- data-* (string; optional)",
+    "- aria-* (string; optional)",
+    "- in (string; optional)",
+    "- id (string; optional)",
+]
diff --git a/tests/unit/development/test_flow_metadata_conversions.py b/tests/unit/development/test_flow_metadata_conversions.py
index 0689f874..468b76f3 100644
--- a/tests/unit/development/test_flow_metadata_conversions.py
+++ b/tests/unit/development/test_flow_metadata_conversions.py
@@ -1,6 +1,7 @@
 import json
 import os
 from collections import OrderedDict
+from difflib import unified_diff
 
 import pytest
 
@@ -9,7 +10,6 @@ from dash.development._py_components_generation import (
     prohibit_events,
     js_to_py_type,
 )
-from . import assert_flow_docstring
 
 _dir = os.path.dirname(os.path.abspath(__file__))
 
@@ -65,6 +65,54 @@ expected_arg_strings = OrderedDict(
     ]
 )
 
+expected_doc = [
+    "A Flow_component component.",
+    "This is a test description of the component.",
+    "It's multiple lines long.",
+    "",
+    "Keyword arguments:",
+    "- requiredString (string; required): A required string",
+    "- optionalString (string; default ''): A string that isn't required.",
+    "- optionalBoolean (boolean; default false): A boolean test",
+    "- optionalNode (a list of or a singular dash component, string or number; optional): "
+    "A node test",
+    "- optionalArray (list; optional): An array test with a particularly ",
+    "long description that covers several lines. It includes the newline character ",
+    "and should span 3 lines in total.",
+    "- requiredUnion (string | number; required)",
+    "- optionalSignature(shape) (dict; optional): This is a test of an object's shape. "
+    "optionalSignature(shape) has the following type: dict containing keys 'checked', "
+    "'children', 'customData', 'disabled', 'label', 'primaryText', 'secondaryText', "
+    "'style', 'value'.",
+    "  Those keys have the following types:",
+    "  - checked (boolean; optional)",
+    "  - children (a list of or a singular dash component, string or number; optional)",
+    "  - customData (bool | number | str | dict | list; required): A test description",
+    "  - disabled (boolean; optional)",
+    "  - label (string; optional)",
+    "  - primaryText (string; required): Another test description",
+    "  - secondaryText (string; optional)",
+    "  - style (dict; optional)",
+    "  - value (bool | number | str | dict | list; required)",
+    "- requiredNested (dict; required): requiredNested has the following type: dict containing "
+    "keys 'customData', 'value'.",
+    "  Those keys have the following types:",
+    "  - customData (dict; required): customData has the following type: dict containing "
+    "keys 'checked', 'children', 'customData', 'disabled', 'label', 'primaryText', "
+    "'secondaryText', 'style', 'value'.",
+    "    Those keys have the following types:",
+    "    - checked (boolean; optional)",
+    "    - children (a list of or a singular dash component, string or number; optional)",
+    "    - customData (bool | number | str | dict | list; required)",
+    "    - disabled (boolean; optional)",
+    "    - label (string; optional)",
+    "    - primaryText (string; required)",
+    "    - secondaryText (string; optional)",
+    "    - style (dict; optional)",
+    "    - value (bool | number | str | dict | list; required)",
+    "  - value (bool | number | str | dict | list; required)",
+]
+
 
 @pytest.fixture
 def load_test_flow_metadata_json():
@@ -82,7 +130,7 @@ def test_docstring(load_test_flow_metadata_json):
         load_test_flow_metadata_json["description"],
     )
     prohibit_events(load_test_flow_metadata_json["props"]),
-    assert_flow_docstring(docstring)
+    assert not list(unified_diff(expected_doc, docstring.splitlines()))
 
 
 def test_docgen_to_python_args(load_test_flow_metadata_json):
diff --git a/tests/unit/development/test_generate_class.py b/tests/unit/development/test_generate_class.py
index 86f6e574..e50e0885 100644
--- a/tests/unit/development/test_generate_class.py
+++ b/tests/unit/development/test_generate_class.py
@@ -1,3 +1,4 @@
+import difflib
 import json
 import os
 from collections import OrderedDict
@@ -6,7 +7,8 @@ import pytest
 
 from dash.development._py_components_generation import generate_class
 from dash.development.component_generator import reserved_words
-from . import assert_docstring, _dir
+from . import _dir
+from . import expected_table_component_doc
 
 
 @pytest.fixture
@@ -102,7 +104,11 @@ def test_repr_with_wildcards(component_class):
 
 
 def test_docstring(component_class):
-    assert_docstring(component_class.__doc__)
+    assert not list(
+        difflib.unified_diff(
+            expected_table_component_doc, component_class.__doc__.splitlines()
+        )
+    )
 
 
 def test_no_events(component_class):
diff --git a/tests/unit/development/test_generate_class_file.py b/tests/unit/development/test_generate_class_file.py
index 9b2c8f0c..4c6c78c1 100644
--- a/tests/unit/development/test_generate_class_file.py
+++ b/tests/unit/development/test_generate_class_file.py
@@ -1,5 +1,6 @@
 import os
 import shutil
+from difflib import unified_diff
 
 import pytest
 
@@ -8,7 +9,7 @@ from dash.development._py_components_generation import (
     generate_class_string,
     generate_class_file,
 )
-from . import assert_no_trailing_spaces, match_lines, _dir
+from . import _dir, has_trailing_space
 
 # Import string not included in generated class string
 import_string = (
@@ -61,10 +62,22 @@ def written_class_string(make_component_dir):
 
 
 def test_class_string(expected_class_string, component_class_string):
-    match_lines(expected_class_string, component_class_string)
-    assert_no_trailing_spaces(component_class_string)
+    assert not len(
+        list(
+            unified_diff(
+                expected_class_string.splitlines(), component_class_string.splitlines()
+            )
+        )
+    )
+    assert not has_trailing_space(component_class_string)
 
 
 def test_class_file(expected_class_string, written_class_string):
-    match_lines(expected_class_string, written_class_string)
-    assert_no_trailing_spaces(written_class_string)
+    assert not len(
+        list(
+            unified_diff(
+                expected_class_string.splitlines(), written_class_string.splitlines()
+            )
+        )
+    )
+    assert not has_trailing_space(written_class_string)
diff --git a/tests/unit/development/test_metadata_conversions.py b/tests/unit/development/test_metadata_conversions.py
index ce8cef89..008efebe 100644
--- a/tests/unit/development/test_metadata_conversions.py
+++ b/tests/unit/development/test_metadata_conversions.py
@@ -1,11 +1,12 @@
 from collections import OrderedDict
+from difflib import unified_diff
 
 from dash.development._py_components_generation import (
     create_docstring,
     prohibit_events,
     js_to_py_type,
 )
-from . import assert_docstring
+from . import expected_table_component_doc
 
 expected_arg_strings = OrderedDict(
     [
@@ -74,7 +75,7 @@ def test_docstring(load_test_metadata_json):
         load_test_metadata_json["description"],
     )
     prohibit_events(load_test_metadata_json["props"]),
-    assert_docstring(docstring)
+    assert not list(unified_diff(expected_table_component_doc, docstring.splitlines()))
 
 
 def test_docgen_to_python_args(load_test_metadata_json):
