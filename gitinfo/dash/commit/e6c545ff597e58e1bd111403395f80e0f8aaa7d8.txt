commit e6c545ff597e58e1bd111403395f80e0f8aaa7d8
Author: byron <byron@plot.ly>
Date:   Mon Jun 3 15:01:16 2019 -0400

    :sparkles: improve apis

diff --git a/dash/testing/application_runners.py b/dash/testing/application_runners.py
index bd7a022e..9085c8ec 100644
--- a/dash/testing/application_runners.py
+++ b/dash/testing/application_runners.py
@@ -131,11 +131,12 @@ class ThreadedRunner(BaseDashRunner):
             app.css.config.serve_locally = True
             if "port" not in kwargs:
                 kwargs["port"] = self.port
+            else:
+                self.port = kwargs["port"]
             app.run_server(threaded=True, **kwargs)
 
         self.thread = threading.Thread(target=run)
         self.thread.daemon = True
-
         try:
             self.thread.start()
         except RuntimeError:  # multiple call on same thread
@@ -144,6 +145,16 @@ class ThreadedRunner(BaseDashRunner):
 
         self.started = self.thread.is_alive()
 
+        def accessible():
+            try:
+                requests.get(self.url)
+            except requests.exceptions.RequestException:
+                return False
+            return True
+
+        # wait until server is able to answer http request
+        wait.until(accessible, timeout=1)
+
     def stop(self):
         requests.get("{}{}".format(self.url, self.stop_route))
         wait.until_not(self.thread.is_alive, self.stop_timeout)
diff --git a/dash/testing/browser.py b/dash/testing/browser.py
index d24225f2..b31d059c 100644
--- a/dash/testing/browser.py
+++ b/dash/testing/browser.py
@@ -19,7 +19,7 @@ from dash.testing.errors import DashAppLoadingError
 logger = logging.getLogger(__name__)
 
 
-class Browser:
+class Browser(object):
     def __init__(self, browser, remote=None, wait_timeout=10):
         self._browser = browser.lower()
         self._wait_timeout = wait_timeout
@@ -70,8 +70,16 @@ class Browser:
         )
         return _wait.until(method(*args), msg)
 
+    def find_element(self, css_selector):
+        """wrapper for find_element_by_css_selector from driver"""
+        return self.driver.find_element_by_css_selector(css_selector)
+
+    def find_elements(self, css_selector):
+        """wrapper for find_elements_by_css_selector from driver"""
+        return self.driver.find_elements_by_css_selector(css_selector)
+
     def wait_for_element(self, css_selector, timeout=None):
-        self.wait_for_element_by_css_selector(css_selector, timeout)
+        return self.wait_for_element_by_css_selector(css_selector, timeout)
 
     # keep these two wait_for API for easy migration
     def wait_for_element_by_css_selector(self, selector, timeout=None):
@@ -101,13 +109,14 @@ class Browser:
             logger.exception(
                 "dash server is not loaded within %s seconds", timeout
             )
+            logger.debug(self.get_logs())
             raise DashAppLoadingError(
                 "the expected Dash react entry point cannot be loaded"
                 " in browser\n HTML => {}\n Console Logs => {}\n".format(
                     self.driver.find_element_by_tag_name("body").get_property(
                         "innerHTML"
                     ),
-                    "\n".join(self.get_logs()),
+                    "\n".join([]),
                 )
             )
 
@@ -161,23 +170,20 @@ class Browser:
 
     def get_logs(self):
         """get_logs works only with chrome webdriver"""
-        if self.driver.name == 'Chrome':
-            return (
-                [
-                    entry
-                    for entry in self.driver.get_log("browser")
-                    if entry["timestamp"] > self._last_ts
-                ]
-            )
+        if self.driver.name.lower() == "chrome":
+            return [
+                entry
+                for entry in self.driver.get_log("browser")
+                if entry["timestamp"] > self._last_ts
+            ]
         warnings.warn(
-            "get_logs always return None with your webdriver {}".format(
-                self.driver.name
-            ))
+            "get_logs always return None with webdrivers other than Chrome"
+        )
         return None
 
     def reset_log_timestamp(self):
         """reset_log_timestamp only work with chrome webdrier"""
-        if self.driver.name == "chrome":
+        if self.driver.name.lower() == "chrome":
             entries = self.driver.get_log("browser")
             if entries:
                 self._last_ts = entries[-1]["timestamp"]
diff --git a/dash/testing/composite.py b/dash/testing/composite.py
new file mode 100644
index 00000000..1e3f781d
--- /dev/null
+++ b/dash/testing/composite.py
@@ -0,0 +1,17 @@
+from dash.testing.browser import Browser
+
+
+class DashComposite(Browser):
+
+    def __init__(self, server, browser, remote=None, wait_timeout=10):
+        super(DashComposite, self).__init__(browser, remote, wait_timeout)
+        self.server = server
+
+    def start_app_server(self, app, **kwargs):
+        '''start the local server with app'''
+
+        # start server with app and pass Dash arguments
+        self.server(app, **kwargs)
+
+        # set the default server_url, it implicitly call wait_for_page
+        self.server_url = self.server.url
