commit abd88b3795ef3c3681102eefbfcddd1eca765777
Author: chriddyp <chris@plot.ly>
Date:   Wed Jan 25 18:37:16 2017 -0500

    Move renderer to its own repo

diff --git a/.babelrc b/.babelrc
deleted file mode 100644
index 5cb1fedf..00000000
--- a/.babelrc
+++ /dev/null
@@ -1,13 +0,0 @@
-{
-    "presets": ["es2015", "react"],
-    "env": {
-        "development": {
-            "presets": ["es2015-webpack", "react"],
-            "plugins": [
-                ["transform-es2015-modules-commonjs-simple", {
-                    "noMangle": true
-                }]
-            ]
-        }
-    }
-}
diff --git a/.eslintrc.json b/.eslintrc.json
deleted file mode 100644
index 40e8faec..00000000
--- a/.eslintrc.json
+++ /dev/null
@@ -1,50 +0,0 @@
-{
-    "env": {
-        "node": false,
-        "browser": true,
-        "es6": true
-    },
-    "extends": "eslint:recommended",
-    "parserOptions": {
-        "ecmaVersion": 6,
-        "sourceType": "module",
-        "ecmaFeatures": {
-            "jsx": true
-        }
-    },
-    "plugins": [
-        "import",
-        "react"
-    ],
-    "rules": {
-        "react/jsx-uses-vars": 2,
-        "react/jsx-uses-react": 2,
-        "react/react-in-jsx-scope": 2,
-        "import/imports-first": 2,
-        "import/no-unresolved": 2,
-        "import/named": 2,
-        "import/default": 2,
-        "import/namespace": 2,
-        "import/export": 2,
-        "import/no-named-as-default": 2,
-        "import/no-named-as-default-member": 2,
-        "import/no-deprecated": 2,
-        "import/no-extraneous-dependencies": 2,
-        "import/no-mutable-exports": 2,
-        "import/no-commonjs": 2,
-        "import/no-amd": 2,
-        "import/no-nodejs-modules": 2,
-        "import/imports-first": 2,
-        "import/no-duplicates": 2,
-        "import/no-namespace": 2,
-        "import/extensions": 2,
-        "import/order": 2,
-        "import/newline-after-import": 2,
-        "import/prefer-default-export": 2
-    },
-    "settings": {
-        "react": {
-            "version": "15.0"
-        }
-    }
-}
diff --git a/dash/MANIFEST.in b/MANIFEST.in
similarity index 100%
rename from dash/MANIFEST.in
rename to MANIFEST.in
diff --git a/README.md b/README.md
index d6ac29ae..fc798780 100644
--- a/README.md
+++ b/README.md
@@ -1,481 +1,87 @@
-# Dash
 
-## Overview
+## Dash python backend
 
-dash is a framework for making static and dynamic user interfaces that can connect to technical computing backends.
+The backend doesn't serve files (yet), it only responds to HTTP calls from the web cloent. See [main README.md](../README.md) for instructions on running a local development web server.
 
-See the [dash 2.0 announcement](https://github.com/plotly/dash) for more context.
+### running a python example
 
-#### Prototype
-
-Kick dem tires! See what its all about!
-
-http://plotly-dash.herokuapp.com
-
-#### Running the app locally
-
-1. Install dependencies
-
-        # Install all dependencies by issuing from the project root:
-        $ npm install
-
-2. Run the development server
-
-        $ cd renderer
-        $ npm start
-
-3. Start the python backend
-
-        $ cd dash
-        $ python click_example.py
-
-    - See [dash/README.md](./dash/README.md) for more details.
-
-4. Open `http://localhost:8080` in your favorite browser for development.
-
-
-#### Development
-
-1. A messy prototype has been written in [@chriddyp/messin](https://github.com/chriddyp/messin) with docs and examples deployed on heroku at http://plotly-dash.herokuapp.com. Also, [dashboards.ly](https://dashboards.ly) (code at [@plotly/dashboards.ly](https://github.com/plotly/dashboards.ly)) contains some drag-and-droppable and editable interaction that dash's edit mode should mimic.
-
-2. **(current phase)** - rewrite an alpha prototype in this repository (1 month)
-
-3. Rewrite the alpha prototype as a public beta. I imagine that each of the components of dash (the front end, the python back end, suites of react components) will be published as separate repositories under [@plotly](https://github.com/plotly) or a new organization `dash`.
-
-#### Community
-Join the chat room at [https://dash-talk.slack.com/signup](https://dash-talk.slack.com/signup). Feel free to send the distribute the invite.
-
-
-#### How external component suites are resolved
-
-This is how dynamic component JavaScript bundle loading works:
-
-1. Component suite defines a namespace, passes it to component loader, which
-   adds namespace to component JSON definition
-2. When starting Dash, user passes a `component_suites` kwarg list they want to
-   register to `dash.run_server`
-3. Dash flask server configures `site-packages` as static file directory and
-   generates a list of component suite bundles
-4. Dash flask `index.html` template spits out component suite script bundle URLs
-   in `<HEAD/>`
-5. Renderer Registry uses `namespace` to look for the component definitions on
-   `window`.
-
-
-## Architecture
-
-dash is composed of several parts:
-
-[A - JSON API](#a---json-api-for-describing-components-layout) that describes the layout and composition of the web applications
-
-[B - HTTP API](#b---http-api-for-updating-components) that specifies how components depend on each other and how components should update when the front-end state changes
-
-[C - Front-end implementation](#c---front-end-implementation-the-renderer) of these APIs written with React and redux ([`./renderer`](https://github.com/plotly/dash2/tree/master/renderer)) that can render components that are supplied to it and thread actions and event handlers into the components.
-
-[D - Suites of components](#d---suites-of-components) e.g. components for creating dashboards, components for creating reports, components for creating slides.
-
-[E - React editing interface](#e---react-editing-interface) for adding new items to interface and maybe ability to edit items in the tree
-
-[F - Back-end implementation](#f---backend-implementation) of the HTTP API written with Python and Flask
-
-[G - Deployment](#g---deployment) of these apps on plotly and other services
-
-
-This repo contains prototypes of these pieces.
-
-
-### A - JSON API for describing components (`layout`)
-
-The layout and composition of the applications is described and serialized as JSON.
-
-This object is herein defined as the "`layout`".
-
-Each component in the interface has a specific `type`, a set of properties `props`, its own content or set of children.
-
-All native HTML components, e.g. `<div>`, `<h1>`, `<img>`, `<iframe>` are supported. All of their HTML attributes, like `class`, `id`, `style` are supported as `props`.
-
-```javascript
-{
-    type: "div",
-    props: {
-        id: "parent-div",
-        style: {
-            backgroundColor: 'lightgrey' // distinction with HTML: style properties are camelCased
-        }
-    },
-    children: [
-        {
-            type: "img",
-            props: {
-                src: "https://plot.ly/~chris/1638.png"
-            }
-        }
-    ]
-}
-```
-
-describes the HTML
-```javascript
-<div id="parent-div" style="background-color: lightgrey">
-    <img src="https://plot.ly/~chris/1638.png"/>
-</div>
-```
-
-Higher-level components can also be specified in this specification. The front-end is responsible for understanding the component types and knowing how to render them.
-
-For example, a plotly graph might be described as:
-
-```javascript
-{
-    type: "PlotlyGraph",
-    props: {
-        figure: {
-            data: [
-                {x: [1, 2, 3], y: [4, 1, 6], type: 'scatter'},
-                {x: [1, 2, 3], y: [2, 3, 9], type: 'bar'}
-            ]
-        }
-    }
-}
 ```
+(dash2) $ cd dash
+(dash2/dash) $ pip install -r requirements.txt
+Collecting click==6.6 (from -r requirements.txt (line 1))
+Collecting Flask==0.11 (from -r requirements.txt (line 2))
+...
+Successfully installed Flask-0.11 Flask-Cors-2.1.2 Jinja2-2.8 MarkupSafe-0.23 Werkzeug-0.11.10 click-6.6 itsdangerous-0.24 numpy-1.11.0 pandas-0.18.1 plotly-1.11.0 python-dateutil-2.5.3 pytz-2016.4 requests-2.10.0 six-1.10.0
 
-which, if available in the front-end component registry, would rendered using the `plotly.js` library.
+(dash2/dash) $ python helloworld.py
 
-In `dash`'s "edit-mode", users should be able to rearrange, resize, and delete components. Components opt-in to this behavior. These behaviors are seralized as optional `props`:
-- `resizable`: whether or not the component can be resized
-- `droppable`: whether or not components can be dragged and dropped into this component (i.e. whether or not is a "drop zone")
-- `draggable`: whether or not this component can be dragged and dropped onto other components
-- `deletable`: whether or not this component can be removed
-
-The actual resizing, dragging and dropping, and deleting behavior is determined by the actual front-end implementation. The actual UI that displays and triggers these events is the responsibility of the components themselves.
-
-Additionally, certain components depend on each other. For example, a graph might depend on a slider; a table might depend on a search box; zooming into a graph might update a secondary graph. These relationships are described through a property `"dependencies"` which is a list of IDs that the component depends on. For example:
-
-```javascript
-{
-    type: "div",
-    children: [
-        {
-            type: "dropdown",
-            props: {
-                id: "dropdown-1"
-            }
-        },
-        {
-            type: "dropdown",
-            props: {
-                id: "dropdown-2",
-                dependencies: ["dropdown-1"]
-            }
-        },
-        {
-            type: "PlotlyGraph",
-            props: {
-                dependencies: ["dropdown-1", "dropdown-2"]
-            }
-        }
-    ]
-}
-```
-
-In this case, the plotly graph depends on "dropdown-1" and "dropdown-2" and "dropdown-2" depends on "dropdown-1". This spec does not describe *how* a component depends on another, it merely states the relationship.
-A dependency means that whenever a component changes state (i.e. when a user enters text into a text box or a dropdown item gets selected), it will make an HTTP call to the server with its new state and the server will respond with the updated state of the dependent components. Each component will be handed this server-calling action, and will be responsible for firing it when its state changes.
-
-##### Uncertainties
-- `children` type.
-
-Array of objects is definitely supported:
-```js
-{
-    type: "div",
-    children: [
-        {
-            type: "div"
-        },
-        {
-            type: "div"
-        }
-    ]
-}
-```
-
-And a `string` for simple text content inside a component should also be allowed, right?
-```js
-{
-    type: "div",
-    children: "text inside a div"
-}
+ * Running on http://127.0.0.1:8050/ (Press CTRL+C to quit)
+ * Debugger is active!
+ * Debugger pin code: 254-379-279
 ```
 
-Should we allow single objects?
-```js
-{
-    type: "div",
-    children: {
-        type: "div"
-    }
-}
-```
-
-- The mechanics of `resizable`, `draggable`, `droppable`, `deletable` are still a little fuzzy to me. We may need more information to serialize these behaviors.
-
-- Is this spec missing anything?
 
-### B - HTTP API for updating components
+### Python Developer guide
 
-Two types of requests are made.
+#### Use `virtualenv`
 
-**Initialization**
-`GET /initialization`
-Retrieve the "`layout`" JSON that describes the application
+Running everything in the same virtual environment ensures that you don't have
+conflicts with other globally installed python packages, and in general makes
+for a much more consistent development environment. You could also create
+multiple virtualenvs for different versions of Dash, for instance.
 
-**Component Updating**
-`POST /component-update`
-When a component changes state and has dependent components, make a request to the server with the new state of that component and retrieve a response containing the desired state of the dependent components.
+##### Install the goods
 
-**Example 1 - One component that has two dependents**
-
-JSON layout:
-```js
-{
-    type: "div",
-    children: [
-        {
-            type: "dropdown",
-            props: {
-                id: "dropdown-1",
-                value: "oranges",
-                options: [
-                    {label: "Apples", value: "apples"},
-                    {label: "Oranges", value: "oranges"}
-                ]
-            }
-        },
-
-        {
-            type: "PlotlyGraph",
-            props: {
-                id: "my-graph",
-                figure: {...}
-            },
-            dependencies: ["dropdown-1"]
-        },
-
-        {
-            type: "p",
-            id: "caption",
-            children: "selected value of the dropdown is 'oranges'",
-            dependencies: ["dropdown-1"]
-        }
-    ]
-}
+```sh
+$ pip install virtualenv
+$ pip install virtualenvwrapper
 ```
 
-When "dropdown-1" changes, this request is made:
-```
-{
-    id: "dropdown-1",
-    oldProps: {
-        value: "apples",
-        options: [
-            {label: "Apples", value: "apples"},
-            {label: "Oranges", value: "oranges"}
-        ]
-    },
-    newProps: {
-        value: "oranges",
-        options: [
-            {label: "Apples", value: "apples"},
-            {label: "Oranges", value: "oranges"}
-        ]
-    }
-}
-```
+##### Add to your shell's configuration
 
-And this is an example of the response:
-```
-[
-    {
-        id: "my-graph",
-        props: {
-            figure: {
-                layout: {...},
-                data: [...]
-            }
-        }
-    },
-    {
-        id: "caption",
-        children: "new value of the dropdown is 'apples'"
-    }
-]
-```
-
-**Example 2 - One component depends on two components**
-When a component changes, the request must contain the state of *all* of the components that the dependent components depend on, not just the component that changed.
-
-For example, if a graph depends on the values of two dropdowns, the state of both of the dropdowns must be sent in the request to the server.
+```sh
+# The actual file to edit will vary depending
+# on your OS, shell, and setup.
+$ vi ~/.bash_profile
 
-Example "`layout`":
-```
-[
-    type: "div",
-    children: [
-        {
-            type: "Dropdown",
-            props: {id: "dropdown-1"}
-        },
-        {
-            type: "Dropdown",
-            props: {id: "dropdown-2"}
-        },
-        {
-            type: "PlotlyGraph",
-            props: {id: "graph-1"}
-            dependencies: ["dropdown-1", "dropdown-2"]
-        }
-    ]
-]
+# Add these lines
+export WORKON_HOME=$HOME/.py_virtualenvs
+source /usr/local/bin/virtualenvwrapper.sh
 ```
 
-When `"dropdown-1"` or `"dropdown-2"` change, a request is made to the server containing both of their state. For example, if `"dropdown-1"` changed this request would be made:
+##### Create a virtual environment
 
-```
-[
-    {
-        id: "dropdown-1",
-        newProps: {...},
-        oldProps: {...}
-    },
-    {
-        id: "dropdown-2",
-        props: {...} // just "props" not "newProps"/"oldProps" because nothing changed
-    }
-]
-```
+`my-dash-env` is a name of your choosing.
 
-with a response like:
-```
-[
-    {
-        id: "graph-1",
-        props: {
-            figure: {...}
-        }
-    }
-]
+```sh
+$ mkvirtualenv my-dash-env
 ```
 
-##### Uncertainties
-- What should the URL names be? should we prefix them with e.g. `dash-` so that they don't interfere with other servers that might be running? should they be configurable?
-- Do we need to send *all* of the props? What happens when the props are huge, like figure objects or tables? Should the define spec determine which props are necessary?
-- How do actions that aren't state changes fit into this? For example, clicking on a button.
-- Sometimes the backend needs to update the front end, e.g. when data gets pushed to a database, when an experiment finishes, or on some timed event. Maybe we should we define an additional persistent websocket connection to handle these cases?
-
-### C - Front-End Implementation (the `"renderer"`)
+##### Now you can switch to this virtual environment:
 
+```sh
+$ workon my-dash-env
 ```
-import Renderer from 'dash-renderer'
-import xhr from 'xhr'
 
-const layout = xhr.GET('/initialization')
+More reading
+- http://docs.python-guide.org/en/latest/dev/virtualenvs/
 
-<Renderer layout={layout}/>
-```
 
-The front-end implementation is responsible for:
-- rendering the components specified from the `layout`
-- providing HTTP request trigger actions into components's `onChange` handlers (for the components that have dependents)
-- providing `resize`, `rearrange`, `delete`, and `edit` actions to components that will appropriately update the app's component tree and state
-- providing HTTP response handling
-- providing loading and error states to the appropriate components
+#### Debugging
 
-The front-end doesn't actually contain any presentational components. The developer is responsible for "registering" the set of components that they need (as specified through the "type" property of the objects in `layout`):
+Install `ipdb`:
 
+```sh
+$ pip install ipdb
 ```
-// registry.js
 
-import {
-    PlotlyGraph,
-    Dropdown,
-    Slider
-} from 'dash-basic-component-suite'
+Insert a breakpoint in your Python code:
 
-module.exports = {PlotlyGraph, Dropdown, Slider};
+```py
+import ipdb; ipdb.set_trace()
 ```
 
-It passes actions and props into the components through element cloning and container elements.
-
-For example, if a component in the spec is "editable", then an `onEdit` or an `onChange` action that updates the appropriate prop of that component in the app's `layout` state. See `renderTree.js` and `EditableContent.react.js` for an example and the [Redux chapter on container components](http://redux.js.org/docs/basics/UsageWithReact.html).
-
-Similarly, components that are `"draggable"` or `"droppable"` will be wrapped in store-connected action-bound drag-and-drop containers.
-
-Our goal is to make it as easy as possible to plug-in presentational components. The presentational components should be totally unaware of the actual actions that need to be fired when they get re-arranged, deleted, or edited.
-
-So, our `renderer.js` must also define a set of `props` that it may inject into the presentational components. The presentational components should be aware of `renderer.js`'s intentions of these props and actions and render or fire the functions appropriately. This list of props include:
-- `onPropUpdate` - if e.g. a text field is editable, then `onPropUpdate` should get called when the value of the text field changes. In this case, the value of the text field is assumed to be a `prop` of that component. If that component has any dependents, then this action will also make an HTTP call to `/component-update` with the new values.
-- `onDrop`, `onDrag` - actions that appropriately update the `layout` state when items get dragged and dropped
-- `isHovering` - prop that informs the appropriate components when they are actively being dragged (or when a drag event is happening?)
-- `onResize` - if the component is resizable, then this action should be called when it gets resized so that `renderer.js` can appropriately resize the other components by threading around new sets of `width` and `height`
-- `width` and `height`
-- `deleteItem` - action that the component tie to its deleting interface (e.g. clicking on an `x` in the corner of an item)
-- `isLoading` - if the `/update-component` request is pending for this component then it is in a loading state and should display that state to the user in some way (local loading states)
-- `error` - if the `/update-component` request has failed for this component then it is an error state and it should display that state to the user in some way (local error states)
-
-For a React component to be a fully functional member of `dash`, it just needs to be able to accept these properties as `props` and render and bind accordingly.
-
-##### Uncertainties
-- How will the `registry` work? How can get users to define components in the registry without having to write any JS (e.g. from pure python)?
-- The requirements to get resizing and dragging and dropping to work is pretty hazy... not sure what needs to get passed around to the components to make this work
-
-### D - Suites of Components
-
-`renderer.js` won't contain any actual presentational components. It will be able to render all of the built-in HTML elements and any components that are defined by the developer in the `Registry`.
-
-Users will import (or develop their own) suites of components different types of apps. These suites include:
-- A web-layout basics suite: [some type of grid abstraction](http://arnaudleray.github.io/pocketgrid/docs/#creating-rows-and-columns-the-cool-way)
-- A suite of high level controls: sliders, dropdowns, text inputs, radio items
-- A plotly graph component
-- A dashboarding suite: dashboard header; dashboard graph containers; editable text, titles, and labels; big bold indicators; light tables
-- A reporting suite: A nice title element, nice editable `h1`-`h6`, `pre`, `div`, and `p` tags
-- A suite for creating slides and presentations
-- Maybe a suite for creating infographics?
-
-
-##### Uncertainties
-- Do suites include CSS stylesheets? Or just pure inline CSS?
-- How will the registry work?
-
-### E - React editing interface
-
-### F - Backend implementation
-
-The backend will be responsible for:
-- Responding to the HTTP requests
-- Describing the `layout` in a pythonic way
-- Providing an intuitive interface for registering and defining the dependency callbacks
-- Exposing the underlying `flask` server so that users can benefit from that ecosystem for things like HTTP Auth, etc.
-
-I think the interface presented in [@chriddyp/messin prototype](https://github.com/chriddyp/messin) (example: [http://plotly-dash.herokuapp.com](http://plotly-dash.herokuapp.com)) is really nice.
-
-##### Uncertainties
-- What do other folks think about the pythonic interface in example: [http://plotly-dash.herokuapp.com](http://plotly-dash.herokuapp.com)
-- How will the registry of front-end components work?
-- Can we export `PropTypes` so that we can do back-end prop validation?
-- How can we distribute this via pip?
-- Where does the `index.html` and the `dash-bundle.js` go? How is it distributed? How do folks import (or bundle) their own JS? Do we create something like `yoeman` and template generators?
-- How can we make this work really nicely in jupyter (iframe)? How can that work with flask's `debug=True` auto-reloading magic?
-- How should we support multi-page apps? [http://plotly-dash.herokuapp.com](http://plotly-dash.herokuapp.com) is actually a dash app itself, but I *think* supporting multiple pages became sort of messy
-
-### G - Deployment
-- We can save and serve the `layout.json` through Plotly's API
-- Serving "static" `layouts` (`layouts` without dependencies) should be super simple:
-```
-// $ npm install dash-renderer
-import DashRenderer from 'dash-renderer'
-<DashRenderer layout={layout}/>
-```
-- Deployment to something like Heroku should be super easy
-- How should plotly provide hosting for apps that have custom python backends?
-    - Maybe we can run [Deis](http://deis.io/overview/) for a heroku-like experience?
-    - Can we tie in plotly's authentication and sharing permissions to these apps?
+More reading
+- Intro: https://www.safaribooksonline.com/blog/2014/11/18/intro-python-debugger/
+- Cheat sheet: http://georgejhunt.com/olpc/pydebug/pydebug/ipdb.html
+- API: https://pypi.python.org/pypi/ipdb
diff --git a/dash/click_example.py b/click_example.py
similarity index 100%
rename from dash/click_example.py
rename to click_example.py
diff --git a/config/.eslintrc.json b/config/.eslintrc.json
deleted file mode 100644
index 4bfbccb4..00000000
--- a/config/.eslintrc.json
+++ /dev/null
@@ -1,3 +0,0 @@
-{
-    "extends": "./eslint/eslintrc-node.json"
-}
diff --git a/config/eslint/eslintrc-node.json b/config/eslint/eslintrc-node.json
deleted file mode 100644
index 7df4d7f5..00000000
--- a/config/eslint/eslintrc-node.json
+++ /dev/null
@@ -1,13 +0,0 @@
-{
-    "env": {
-        "node": true
-    },
-    "extends": "eslint:recommended",
-    "plugins": [
-        "import"
-    ],
-    "rules": {
-        "import/no-commonjs": 0,
-        "import/no-nodejs-modules": 0
-    }
-}
diff --git a/config/partials/babel.js b/config/partials/babel.js
deleted file mode 100644
index 8ad71ade..00000000
--- a/config/partials/babel.js
+++ /dev/null
@@ -1,27 +0,0 @@
-'use strict';
-
-var path = require('path');
-var partial = require('webpack-partial').default;
-
-var ROOT = process.cwd();
-var SRC = path.join(ROOT, 'src');
-
-module.exports = function (config) {
-    return partial(config, {
-        module: {
-            noParse: /node_modules\/json-schema\/lib\/validate\.js/, // used to get `request` to work: https://github.com/request/request/issues/1920#issuecomment-171246043
-            loaders: [
-                { test: /\.json$/, loader: 'json-loader' },
-                {
-                    test: /\.js/,
-                    include: [SRC],
-                    /*
-                     * Use require.resolve to get a deterministic path
-                     * and avoid webpack's magick loader resolution
-                     */
-                    loader: require.resolve('babel-loader')
-                }
-            ]
-        }
-    });
-};
diff --git a/config/partials/babelHot.js b/config/partials/babelHot.js
deleted file mode 100644
index e1f3027c..00000000
--- a/config/partials/babelHot.js
+++ /dev/null
@@ -1,30 +0,0 @@
-'use strict';
-
-var path = require('path');
-var partial = require('webpack-partial').default;
-
-var ROOT = process.cwd();
-var SRC = path.join(ROOT, 'src');
-
-module.exports = function (config) {
-    return partial(config, {
-        module: {
-            noParse: /node_modules\/json-schema\/lib\/validate\.js/, // used to get `request` to work: https://github.com/request/request/issues/1920#issuecomment-171246043
-            loaders: [
-                { test: /\.json$/, loader: 'json-loader' },
-                {
-                    test: /\.js/,
-                    include: [SRC],
-                    /*
-                     * Use require.resolve to get a deterministic path
-                     * and avoid webpack's magick loader resolution
-                     */
-                    loaders: [
-                        require.resolve('react-hot-loader'),
-                        require.resolve('babel-loader')
-                    ]
-                }
-            ]
-        }
-    });
-};
diff --git a/config/partials/cleanBuild.js b/config/partials/cleanBuild.js
deleted file mode 100644
index c21c4f35..00000000
--- a/config/partials/cleanBuild.js
+++ /dev/null
@@ -1,18 +0,0 @@
-'use strict';
-
-var partial = require('webpack-partial').default;
-var CleanWebpackPlugin = require('clean-webpack-plugin');
-
-var ROOT = process.cwd();
-
-module.exports = function(config) {
-    return partial(config, {
-        plugins: [
-            new CleanWebpackPlugin(['build'], {
-                root: ROOT,
-                verbose: true,
-                dry: false
-            })
-        ]
-    });
-};
diff --git a/config/partials/defineEnv.js b/config/partials/defineEnv.js
deleted file mode 100644
index 89fe2643..00000000
--- a/config/partials/defineEnv.js
+++ /dev/null
@@ -1,23 +0,0 @@
-'use strict';
-
-var partial = require('webpack-partial').default;
-var DefinePlugin = require('webpack').DefinePlugin;
-
-var NODE_ENV = process.env.NODE_ENV || 'development';
-var environment = JSON.stringify(NODE_ENV);
-
-/* eslint-disable no-console */
-console.log('Current environment: ' + environment);
-/* eslint-enable no-console */
-
-module.exports = function (config) {
-    return partial(config, {
-        plugins: [
-            new DefinePlugin({
-                'process.env': {
-                    NODE_ENV: environment
-                }
-            })
-        ]
-    });
-};
diff --git a/config/partials/entryDev.js b/config/partials/entryDev.js
deleted file mode 100644
index 459e7bfc..00000000
--- a/config/partials/entryDev.js
+++ /dev/null
@@ -1,11 +0,0 @@
-'use strict';
-
-var partial = require('webpack-partial').default;
-
-module.exports = function (config) {
-    return partial(config, {
-        entry: {
-            bundle: './index.js'
-        }
-    });
-};
diff --git a/config/partials/entryHot.js b/config/partials/entryHot.js
deleted file mode 100644
index a405568d..00000000
--- a/config/partials/entryHot.js
+++ /dev/null
@@ -1,16 +0,0 @@
-'use strict';
-
-var partial = require('webpack-partial').default;
-
-module.exports = function (config) {
-    return partial(config, {
-        entry: {
-            bundle: [
-                'webpack-dev-server/client?http://localhost:8080',
-                'webpack/hot/only-dev-server',
-                './index.js'
-
-            ]
-        }
-    });
-};
diff --git a/config/partials/entryProd.js b/config/partials/entryProd.js
deleted file mode 100644
index 459e7bfc..00000000
--- a/config/partials/entryProd.js
+++ /dev/null
@@ -1,11 +0,0 @@
-'use strict';
-
-var partial = require('webpack-partial').default;
-
-module.exports = function (config) {
-    return partial(config, {
-        entry: {
-            bundle: './index.js'
-        }
-    });
-};
diff --git a/config/partials/optimizeProd.js b/config/partials/optimizeProd.js
deleted file mode 100644
index 861135b6..00000000
--- a/config/partials/optimizeProd.js
+++ /dev/null
@@ -1,20 +0,0 @@
-'use strict';
-
-var partial = require('webpack-partial').default;
-var UglifyJsPlugin = require('webpack').optimize.UglifyJsPlugin;
-var DedupePlugin = require('webpack').optimize.DedupePlugin;
-var OccurrenceOrderPlugin = require('webpack').optimize.OccurrenceOrderPlugin;
-
-module.exports = function (config) {
-    return partial(config, {
-        plugins: [
-            new DedupePlugin(),
-            new OccurrenceOrderPlugin(true),
-            new UglifyJsPlugin({
-                compress: {
-                    warnings: false
-                }
-            })
-        ]
-    });
-};
diff --git a/config/partials/outputDev.js b/config/partials/outputDev.js
deleted file mode 100644
index e439f587..00000000
--- a/config/partials/outputDev.js
+++ /dev/null
@@ -1,17 +0,0 @@
-'use strict';
-
-var path = require('path');
-var partial = require('webpack-partial').default;
-
-var ROOT = process.cwd();
-var BUILD = path.join(ROOT, 'build');
-
-module.exports = function (config) {
-    return partial(config, {
-        output: {
-            path: BUILD,
-            publicPath: '/build/',
-            filename: '[name].js'
-        }
-    });
-};
diff --git a/config/partials/outputProd.js b/config/partials/outputProd.js
deleted file mode 100644
index 4271c88b..00000000
--- a/config/partials/outputProd.js
+++ /dev/null
@@ -1,18 +0,0 @@
-'use strict';
-
-var path = require('path');
-var partial = require('webpack-partial').default;
-
-var ROOT = process.cwd();
-var BUILD = path.join(ROOT, 'build');
-
-module.exports = function (config) {
-    return partial(config, {
-        output: {
-            path: BUILD,
-            publicPath: '/build/',
-            // TODO: Bundle filename should be hashed (#10)
-            filename: '[name].js'
-        }
-    });
-};
diff --git a/config/partials/sourceMapDev.js b/config/partials/sourceMapDev.js
deleted file mode 100644
index edc3dfda..00000000
--- a/config/partials/sourceMapDev.js
+++ /dev/null
@@ -1,16 +0,0 @@
-'use strict';
-
-var partial = require('webpack-partial').default;
-var SourceMapDevToolPlugin = require('webpack').SourceMapDevToolPlugin;
-
-module.exports = function (config) {
-    return partial(config, {
-        plugins: [
-            new SourceMapDevToolPlugin({
-                append: '\n//# sourceMappingURL=http://127.0.0.1:8080/build/[url]',
-                filename: '[file].map',
-                test: /\.(css|js)($|\?)/
-            })
-        ]
-    });
-};
diff --git a/dash/README.md b/dash/README.md
deleted file mode 100644
index fc798780..00000000
--- a/dash/README.md
+++ /dev/null
@@ -1,87 +0,0 @@
-
-## Dash python backend
-
-The backend doesn't serve files (yet), it only responds to HTTP calls from the web cloent. See [main README.md](../README.md) for instructions on running a local development web server.
-
-### running a python example
-
-```
-(dash2) $ cd dash
-(dash2/dash) $ pip install -r requirements.txt
-Collecting click==6.6 (from -r requirements.txt (line 1))
-Collecting Flask==0.11 (from -r requirements.txt (line 2))
-...
-Successfully installed Flask-0.11 Flask-Cors-2.1.2 Jinja2-2.8 MarkupSafe-0.23 Werkzeug-0.11.10 click-6.6 itsdangerous-0.24 numpy-1.11.0 pandas-0.18.1 plotly-1.11.0 python-dateutil-2.5.3 pytz-2016.4 requests-2.10.0 six-1.10.0
-
-(dash2/dash) $ python helloworld.py
-
- * Running on http://127.0.0.1:8050/ (Press CTRL+C to quit)
- * Debugger is active!
- * Debugger pin code: 254-379-279
-```
-
-
-### Python Developer guide
-
-#### Use `virtualenv`
-
-Running everything in the same virtual environment ensures that you don't have
-conflicts with other globally installed python packages, and in general makes
-for a much more consistent development environment. You could also create
-multiple virtualenvs for different versions of Dash, for instance.
-
-##### Install the goods
-
-```sh
-$ pip install virtualenv
-$ pip install virtualenvwrapper
-```
-
-##### Add to your shell's configuration
-
-```sh
-# The actual file to edit will vary depending
-# on your OS, shell, and setup.
-$ vi ~/.bash_profile
-
-# Add these lines
-export WORKON_HOME=$HOME/.py_virtualenvs
-source /usr/local/bin/virtualenvwrapper.sh
-```
-
-##### Create a virtual environment
-
-`my-dash-env` is a name of your choosing.
-
-```sh
-$ mkvirtualenv my-dash-env
-```
-
-##### Now you can switch to this virtual environment:
-
-```sh
-$ workon my-dash-env
-```
-
-More reading
-- http://docs.python-guide.org/en/latest/dev/virtualenvs/
-
-
-#### Debugging
-
-Install `ipdb`:
-
-```sh
-$ pip install ipdb
-```
-
-Insert a breakpoint in your Python code:
-
-```py
-import ipdb; ipdb.set_trace()
-```
-
-More reading
-- Intro: https://www.safaribooksonline.com/blog/2014/11/18/intro-python-debugger/
-- Cheat sheet: http://georgejhunt.com/olpc/pydebug/pydebug/ipdb.html
-- API: https://pypi.python.org/pypi/ipdb
diff --git a/dash/dash/__init__.py b/dash/__init__.py
similarity index 100%
rename from dash/dash/__init__.py
rename to dash/__init__.py
diff --git a/dash/dash/dependency_resolver.py b/dash/dependency_resolver.py
similarity index 100%
rename from dash/dash/dependency_resolver.py
rename to dash/dependency_resolver.py
diff --git a/dash/dash/development/__init__.py b/dash/development/__init__.py
similarity index 100%
rename from dash/dash/development/__init__.py
rename to dash/development/__init__.py
diff --git a/dash/dash/development/base_component.py b/dash/development/base_component.py
similarity index 100%
rename from dash/dash/development/base_component.py
rename to dash/development/base_component.py
diff --git a/dash/dash/development/component_loader.py b/dash/development/component_loader.py
similarity index 100%
rename from dash/dash/development/component_loader.py
rename to dash/development/component_loader.py
diff --git a/dash/dash/react.py b/dash/react.py
similarity index 100%
rename from dash/dash/react.py
rename to dash/react.py
diff --git a/dash/templates/index.html b/dash/templates/index.html
deleted file mode 100644
index 9c6c3d49..00000000
--- a/dash/templates/index.html
+++ /dev/null
@@ -1,14 +0,0 @@
-<!DOCTYPE html>
-<html>
-    <head>
-        <meta charset="UTF-8" />
-        {% for suite in component_suites %}
-            <script src="/js/component-suites/{{suite}}/bundle.js"></script>
-        {% endfor %}
-    </head>
-    <body>
-        <div id="react-entry-point"></div>
-    </body>
-
-    <script type="text/javascript" src="static/bundle.js"></script>
-</html>
diff --git a/dash/dropdown.py b/dropdown.py
similarity index 100%
rename from dash/dropdown.py
rename to dropdown.py
diff --git a/dash/helloworld.py b/helloworld.py
similarity index 100%
rename from dash/helloworld.py
rename to helloworld.py
diff --git a/package.json b/package.json
deleted file mode 100644
index 12e2acc6..00000000
--- a/package.json
+++ /dev/null
@@ -1,38 +0,0 @@
-{
-  "name": "dash",
-  "version": "0.0.1",
-  "description": "Create React data visualization UIs with python",
-  "repository": {
-    "type": "git",
-    "url": "git://github.com/plotly/dash2.git"
-  },
-  "scripts": {
-    "install-dash": "cd dash && pip install -r requirements.txt && cd -",
-    "install-renderer": "cd renderer && npm i && cd -",
-    "postinstall": "npm run install-dash & npm run install-renderer",
-    "publish-pypi": "cd dash && python setup.py sdist upload && cd -",
-    "test-renderer": "cd renderer && npm test && cd -",
-    "test": "npm run test-renderer"
-  },
-  "author": "chriddyp",
-  "license": "MIT",
-  "dependencies": {
-    "babel-cli": "^6.10.1",
-    "babel-core": "^6.9.0",
-    "babel-loader": "^6.2.4",
-    "babel-preset-es2015": "^6.6.0",
-    "babel-preset-react": "^6.5.0",
-    "clean-webpack-plugin": "^0.1.9",
-    "webpack": "^1.13.1",
-    "webpack-partial": "^1.2.0"
-  },
-  "devDependencies": {
-    "babel-plugin-transform-es2015-modules-commonjs-simple": "^6.7.4",
-    "babel-preset-es2015-webpack": "^6.4.1",
-    "eslint": "^2.8.0",
-    "eslint-plugin-import": "^1.8.1",
-    "eslint-plugin-react": "^5.1.1",
-    "react-hot-loader": "^1.3.0",
-    "webpack-dev-server": "^1.14.1"
-  }
-}
diff --git a/renderer/config/.eslintrc.json b/renderer/config/.eslintrc.json
deleted file mode 100644
index 57305a48..00000000
--- a/renderer/config/.eslintrc.json
+++ /dev/null
@@ -1,3 +0,0 @@
-{
-    "extends": "../../config/eslint/eslintrc-node.json"
-}
diff --git a/renderer/config/webpack.config.dev.js b/renderer/config/webpack.config.dev.js
deleted file mode 100644
index acf718b3..00000000
--- a/renderer/config/webpack.config.dev.js
+++ /dev/null
@@ -1,18 +0,0 @@
-'use strict';
-
-var compose = require('ramda').compose;
-
-var babel = require('../../config/partials/babel');
-var defineEnv = require('../../config/partials/defineEnv');
-var entryDev = require('../../config/partials/entryDev')
-var outputDev = require('../../config/partials/outputDev');
-var sourceMapDev = require('../../config/partials/sourceMapDev');
-var baseConfig = require('./webpack.config');
-
-module.exports = compose(
-    babel,
-    defineEnv,
-    entryDev,
-    outputDev,
-    sourceMapDev
-)(baseConfig);
diff --git a/renderer/config/webpack.config.hot.js b/renderer/config/webpack.config.hot.js
deleted file mode 100644
index e59ee1ef..00000000
--- a/renderer/config/webpack.config.hot.js
+++ /dev/null
@@ -1,18 +0,0 @@
-'use strict';
-
-var compose = require('ramda').compose;
-
-var babelHot = require('../../config/partials/babelHot');
-var defineEnv = require('../../config/partials/defineEnv');
-var entryHot = require('../../config/partials/entryHot');
-var outputDev = require('../../config/partials/outputDev');
-var sourceMapDev = require('../../config/partials/sourceMapDev');
-var baseConfig = require('./webpack.config');
-
-module.exports = compose(
-    babelHot,
-    defineEnv,
-    entryHot,
-    outputDev,
-    sourceMapDev
-)(baseConfig);
diff --git a/renderer/config/webpack.config.js b/renderer/config/webpack.config.js
deleted file mode 100644
index cbd1072c..00000000
--- a/renderer/config/webpack.config.js
+++ /dev/null
@@ -1,25 +0,0 @@
-'use strict';
-
-var path = require('path');
-
-var ROOT = process.cwd();
-var SRC = path.join(ROOT, 'src');
-
-module.exports = {
-    cache: false,
-    // Resolution path for `entry`.
-    context: SRC,
-    resolve: {
-        // Need `''` so referencing modules by `name.js` works.
-        extensions: ['', '.js', '.jsx', '.json'],
-        // Make default module directory explicit
-        modulesDirectories: ['node_modules']
-    },
-    // Support `request` node library
-    node: {
-        console: true,
-        fs: 'empty',
-        net: 'empty',
-        tls: 'empty'
-    }
-};
diff --git a/renderer/config/webpack.config.prod.js b/renderer/config/webpack.config.prod.js
deleted file mode 100644
index ab61e000..00000000
--- a/renderer/config/webpack.config.prod.js
+++ /dev/null
@@ -1,21 +0,0 @@
-'use strict';
-
-var compose = require('ramda').compose;
-
-var babel = require('../../config/partials/babel');
-var cleanBuild = require('../../config/partials/cleanBuild')
-var defineEnv = require('../../config/partials/defineEnv');
-var entryProd = require('../../config/partials/entryProd');
-var optimizeProd = require('../../config/partials/optimizeProd');
-var outputProd = require('../../config/partials/outputProd');
-var baseConfig = require('./webpack.config');
-
-// TODO: support locally served source maps in production (#11)
-module.exports = compose(
-    babel,
-    cleanBuild,
-    defineEnv,
-    entryProd,
-    outputProd,
-    optimizeProd
-)(baseConfig);
diff --git a/renderer/index.html b/renderer/index.html
deleted file mode 100644
index 5da1975e..00000000
--- a/renderer/index.html
+++ /dev/null
@@ -1,15 +0,0 @@
-<!DOCTYPE html>
-<html>
-    <head>
-        <meta charset="UTF-8" />
-    </head>
-    <body>
-        <div id="react-entry-point"></div>
-    </body>
-
-    <script type="text/javascript">
-
-    </script>
-
-    <script type="text/javascript" src="build/bundle.js"></script>
-</html>
diff --git a/renderer/package.json b/renderer/package.json
deleted file mode 100644
index 3fc89e23..00000000
--- a/renderer/package.json
+++ /dev/null
@@ -1,38 +0,0 @@
-{
-  "name": "dash-renderer",
-  "version": "0.0.1",
-  "description": "render dash components in react",
-  "main": "src/index.js",
-  "scripts": {
-    "build-dev": "../node_modules/.bin/webpack --config=config/webpack.config.dev.js",
-    "build-prod": "NODE_ENV=production ../node_modules/.bin/webpack --config=config/webpack.config.prod.js",
-    "dev": "../node_modules/.bin/webpack-dev-server --config=config/webpack.config.dev.js",
-    "hot": "../node_modules/.bin/webpack-dev-server --hot --config=config/webpack.config.hot.js",
-    "lint": "../node_modules/.bin/eslint --quiet --fix --ignore-path ../.gitignore .",
-    "server": "serv -p 8080 .",
-    "start": "npm run hot",
-    "test": "npm run lint"
-  },
-  "author": "chriddyp",
-  "license": "MIT",
-  "dependencies": {
-    "dependency-graph": "^0.4.1",
-    "immutable": "^3.8.1",
-    "json-loader": "^0.5.4",
-    "ramda": "^0.21.0",
-    "react": "^15.0.1",
-    "react-dnd": "^2.1.4",
-    "react-dnd-html5-backend": "^2.1.2",
-    "react-dom": "^15.0.1",
-    "react-redux": "^4.4.5",
-    "redux": "^3.4.0",
-    "redux-actions": "^0.9.1",
-    "redux-thunk": "^2.0.1",
-    "request": "^2.72.0",
-    "webpack": "^1.13.1",
-    "webpack-partial": "^1.2.0"
-  },
-  "devDependencies": {
-    "serv": "^0.2.4"
-  }
-}
diff --git a/renderer/src/AppContainer.react.js b/renderer/src/AppContainer.react.js
deleted file mode 100644
index dc7d9610..00000000
--- a/renderer/src/AppContainer.react.js
+++ /dev/null
@@ -1,16 +0,0 @@
-import React from 'react';
-import {Provider} from 'react-redux'
-
-import initializeStore from './store';
-import TreeContainer from './TreeContainer.react';
-import { initialize } from './actions';
-
-const store = initializeStore();
-// Initialization
-store.dispatch(initialize());
-
-export default () => (
-    <Provider store={store}>
-        <TreeContainer/>
-    </Provider>
-);
diff --git a/renderer/src/TreeContainer.react.js b/renderer/src/TreeContainer.react.js
deleted file mode 100644
index ac20a012..00000000
--- a/renderer/src/TreeContainer.react.js
+++ /dev/null
@@ -1,27 +0,0 @@
-import React from 'react';
-import HTML5Backend from 'react-dnd-html5-backend';
-import { DragDropContext } from 'react-dnd';
-import { connect } from 'react-redux'
-
-import renderTree from './renderTree';
-
-const UnconnectedContainer = props => {
-    // TODO: Request status? Loading, error, ...
-    if (props.layout.isEmpty()) {
-        return (<div>loading...</div>);
-    }
-    return renderTree(
-        props.layout.toJS(),
-        props.dependencyGraph
-    );
-}
-
-const Container = connect(
-    state => ({      // map state to props
-        layout: state.layout,
-        dependencyGraph: state.dependencyGraph,
-        paths: state.paths
-    })
-)(UnconnectedContainer);
-
-export default DragDropContext(HTML5Backend)(Container);
diff --git a/renderer/src/actions/index.js b/renderer/src/actions/index.js
deleted file mode 100644
index 25949e65..00000000
--- a/renderer/src/actions/index.js
+++ /dev/null
@@ -1,146 +0,0 @@
-/* eslint-disable no-console */
-import R from 'ramda';
-import { createAction } from 'redux-actions';
-import request from 'request';
-import Immutable from 'immutable';
-
-export const ACTIONS = (action) => {
-    const actionList = {
-        ON_PROP_CHANGE: 'ON_PROP_CHANGE',
-        SET_REQUEST_QUEUE: 'SET_REQUEST_QUEUE',
-        SET_LAYOUT: 'SET_LAYOUT',
-        COMPUTE_GRAPH: 'COMPUTE_GRAPH',
-        COMPUTE_PATHS: 'COMPUTE_PATHS'
-    };
-    if (actionList[action]) return actionList[action];
-    else throw new Error(`${action} is not defined.`)
-};
-
-export const updateProps = createAction(ACTIONS('ON_PROP_CHANGE'));
-export const setRequestQueue = createAction(ACTIONS('SET_REQUEST_QUEUE'));
-const setLayout = createAction(ACTIONS('SET_LAYOUT'));
-const computeGraph = createAction(ACTIONS('COMPUTE_GRAPH'));
-const computePaths = createAction(ACTIONS('COMPUTE_PATHS'));
-
-export const initialize = function() {
-    return function (dispatch) {
-        console.warn('initializing GET');
-        request({
-            method: 'GET',
-            withCredentials: false, // https://github.com/request/request/issues/986#issuecomment-53377999
-            url: 'http://localhost:8050/initialize'
-        }, function(err, res, body) {
-            // TODO: error handling
-            const layout = JSON.parse(body);
-            const immutableLayout = Immutable.fromJS(layout);
-            dispatch(setLayout(immutableLayout));
-            dispatch(computeGraph(layout)); // TODO - immutable everywhere?
-            dispatch(computePaths(layout))
-        });
-    }
-}
-
-// TODO: make the actual POST
-// TODO: Consider moving side effects to reducers via https://github.com/gregwebs/redux-side-effect
-export const notifyObservers = function(payload) {
-    return function (dispatch, getState) {
-        const {
-            layout,
-            dependencyGraph,
-            paths,
-            requestQueue
-        } = getState();
-
-        // Grab the ids of any components that depend on this component
-        let observerIds = dependencyGraph.dependantsOf(payload.id);
-
-        // order the observer ids
-        const depOrder = dependencyGraph.overallOrder();
-        observerIds = R.sort(
-            (a, b) => depOrder.indexOf(a) - depOrder.indexOf(b),
-            observerIds
-        );
-
-        // record the set of requests in the queue
-        dispatch(setRequestQueue(R.union(observerIds, requestQueue)));
-
-        // update each observer
-        for (let i = 0; i < observerIds.length; i++) {
-            const observerId = observerIds[i];
-            const observerComponent = layout.getIn(paths[observerId]);
-
-            /*
-             * before we make the POST, check that none of its dependencies
-             * are already in the queue. if they are in the queue, then don't update.
-             * when each dependency updates, it'll dispatch its own `notifyObservers`
-             * action which will allow this component to update.
-             */
-            const dependenciesInQueue = R.intersection(
-                // TODO Can just use `requestQueue`?
-                getState().requestQueue,
-                dependencyGraph.dependenciesOf(observerId)
-            );
-            if (dependenciesInQueue.length !== 0) {
-
-                console.warn(`SKIP updating ${observerId}, waiting for ${dependenciesInQueue} to update.`);
-
-            } else {
-
-                /*
-                 * Construct a payload of the props of all of the dependencies
-                 * (controller components of this observer component).
-                 */
-                const controllers = observerComponent.get('dependencies').reduce(
-                    (r, id) => {
-                        r[id] = layout.getIn(paths[id]).toJS();
-                        return r;
-                    }, {}
-                );
-                const body = {
-                    target: layout.getIn(paths[observerId]),
-                    parents: controllers
-                }
-
-                /* eslint-disable no-console */
-
-                // make the /POST
-                // xhr.POST(/update-component) ...
-                console.warn(`POST: ${observerId}`);
-
-                // mimic async POST request behaviour with setTimeout
-                request({
-                    method: 'POST',
-                    body: JSON.stringify(body),
-                    withCredentials: false,
-                    url: 'http://localhost:8050/interceptor'// location.href + 'interceptor'
-                }, function(err, res, body) {
-                    const response = JSON.parse(body).response;
-
-                    // clear this item from the request queue
-                    console.warn(`RESPONSE: ${observerId}`);
-                    dispatch(setRequestQueue(
-                        R.reject(
-                            id => id === observerId,
-                            // in an async loop so grab the state again
-                            getState().requestQueue)
-                        )
-                    );
-
-                    // and update the props of the component
-                    const observerUpdatePayload = {
-                        itempath: paths[observerId],
-                        // new props from the server
-                        props: response.props
-                    };
-                    dispatch(updateProps(observerUpdatePayload));
-
-                    // and now update *this* component's dependencies
-                    observerUpdatePayload.id = observerId;
-                    dispatch(notifyObservers(observerUpdatePayload));
-
-                });
-
-            }
-        }
-    }
-}
diff --git a/renderer/src/components/PlotlyGraph.react.js b/renderer/src/components/PlotlyGraph.react.js
deleted file mode 100644
index e69de29b..00000000
diff --git a/renderer/src/components/core/Draggable.react.js b/renderer/src/components/core/Draggable.react.js
deleted file mode 100644
index 226f2e74..00000000
--- a/renderer/src/components/core/Draggable.react.js
+++ /dev/null
@@ -1,43 +0,0 @@
-'use strict';
-
-import React, { Component } from 'react';
-import { DragSource } from 'react-dnd';
-
-const style = {
-    border: '1px dashed blue'
-};
-
-const beginDrag = (props) => ({name: props.name});
-
-const endDrag = (props, monitor)  => {
-    if (!monitor.didDrop()) return;
-
-    const thisItem = monitor.getItem();
-    const dropResult = monitor.getDropResult();
-
-    if (dropResult) {
-        console.log( // eslint-disable-line no-console
-            `you dropped ${thisItem.name} into ${dropResult.name}`
-        );
-    }
-}
-
-const collectProps = (connect, monitor) => ({
-    connectDragSource: connect.dragSource(),
-    isDragging: monitor.isDragging()
-});
-
-class Draggable extends Component {
-    render() {
-        console.warn('Draggable: ', this.props); // eslint-disable-line
-        const { isDragging, connectDragSource } = this.props;
-        return connectDragSource(
-            isDragging ?
-                <div style={style}>{this.props.children}</div>
-                :
-                <div>{this.props.children}</div>
-        );
-    }
-}
-
-export default DragSource('Draggable', {beginDrag, endDrag}, collectProps)(Draggable);
diff --git a/renderer/src/components/core/Droppable.react.js b/renderer/src/components/core/Droppable.react.js
deleted file mode 100644
index 21b39e7d..00000000
--- a/renderer/src/components/core/Droppable.react.js
+++ /dev/null
@@ -1,44 +0,0 @@
-'use strict';
-
-import React, { Component } from 'react';
-import { DropTarget } from 'react-dnd';
-
-/* eslint-disable no-unused-vars */
-const spec = {
-    drop(props, monitor, component) {return {}},
-    hover(props, monitor, component) {return {}},
-    canDrop(props, monitor) {return true;}
-};
-/* eslint-enable no-unused-vars */
-
-function collectProps(connect, monitor) {
-    return {
-        connectDropTarget: connect.dropTarget(),
-        isOver: monitor.isOver(),
-        isOverCurrent: monitor.isOver({ shallow: true }),
-        canDrop: monitor.canDrop(),
-        itemType: monitor.getItemType()
-    };
-}
-
-class Droppable extends Component {
-    render() {
-        console.warn('Droppable: ', this.props); // eslint-disable-line
-        const { canDrop, isOver, connectDropTarget } = this.props;
-        const isActive = canDrop && isOver;
-
-        const style = {
-            borderWidth: '1px',
-            borderStyle: isActive ? 'solid' : (canDrop ? 'dashed' : 'none'),
-            borderColor: 'blue'
-        };
-
-        return connectDropTarget(
-            <div style={style}>
-                {this.props.children}
-            </div>
-        );
-    }
-}
-
-export default DropTarget('Draggable', spec, collectProps)(Droppable);
diff --git a/renderer/src/components/core/EditableContent.react.js b/renderer/src/components/core/EditableContent.react.js
deleted file mode 100644
index d249f10d..00000000
--- a/renderer/src/components/core/EditableContent.react.js
+++ /dev/null
@@ -1,41 +0,0 @@
-import React, {PropTypes} from 'react';
-
-import { connect } from 'react-redux'
-import { updateProps } from '../../actions'
-
-/*
- * EditableContent passes a connected updateProps handler down to its child
- * as a prop
- */
-
-/* eslint-disable no-unused-vars */
-const mapStateToProps = (state, ownProps) => {
-    return {}
-}
-/* eslint-enable no-unused-vars */
-
-const mapDispatchToProps = (dispatch, ownProps) => {
-    return {
-        valueChanged: (newProps) => {
-            console.warn('newProps: ', newProps); // eslint-disable-line
-            dispatch(updateProps({
-                props: newProps,
-                itempath: React.Children.only(ownProps.children).props.path
-            }));
-        }
-    }
-}
-
-const EditableContent = ({valueChanged, children}) => {
-    // pass `valueChanged` handler as prop to the child element e.g. an <input>
-    return React.cloneElement(children, {valueChanged});
-};
-
-EditableContent.propTypes = {
-    valueChanged: PropTypes.func.isRequired
-};
-
-export default connect(
-  mapStateToProps,
-  mapDispatchToProps
-)(EditableContent);
diff --git a/renderer/src/components/core/NotifyObservers.react.js b/renderer/src/components/core/NotifyObservers.react.js
deleted file mode 100644
index 044e99ee..00000000
--- a/renderer/src/components/core/NotifyObservers.react.js
+++ /dev/null
@@ -1,46 +0,0 @@
-import React, {PropTypes} from 'react';
-import { connect } from 'react-redux';
-
-import { notifyObservers, updateProps } from '../../actions';
-
-/*
- * NotifyObservers passes a connected `valueChanged` handler down to
- * its child as a prop
- */
-
-const mapStateToProps = () => ({});
-
-const mapDispatchToProps = (dispatch, ownProps) => {
-    return {
-        valueChanged: (newProps) => {
-            const payload = {
-                // we *need* the ID, should we just pass / merge everything in?
-                id: React.Children.only(ownProps.children).props.id,
-                // TODO pass in the entire prop object or just updates?
-                props: newProps,
-                itempath: React.Children.only(ownProps.children).props.path
-            };
-
-            // Update this component's props
-            dispatch(updateProps(payload));
-
-            // Update this component's observers with the updated props
-            dispatch(notifyObservers(payload));
-
-        }
-    }
-};
-
-const NotifyObservers = ({ valueChanged, children }) => {
-    // pass `valueChanged` handler as prop to the child element e.g. an <input>
-    return React.cloneElement(children, {valueChanged});
-}
-
-NotifyObservers.propTypes = {
-    valueChanged: PropTypes.func.isRequired
-};
-
-export default connect(
-    mapStateToProps,
-    mapDispatchToProps
-)(NotifyObservers);
diff --git a/renderer/src/index.js b/renderer/src/index.js
deleted file mode 100644
index 75d40fb7..00000000
--- a/renderer/src/index.js
+++ /dev/null
@@ -1,13 +0,0 @@
-/*eslint-env browser */
-
-'use strict';
-
-import React from 'react';
-import ReactDOM from 'react-dom';
-
-import AppContainer from './AppContainer.react';
-
-ReactDOM.render(
-    <AppContainer/>,
-    document.getElementById('react-entry-point')
-);
diff --git a/renderer/src/reducers/dependencyGraph.js b/renderer/src/reducers/dependencyGraph.js
deleted file mode 100644
index 6d0f124c..00000000
--- a/renderer/src/reducers/dependencyGraph.js
+++ /dev/null
@@ -1,39 +0,0 @@
-import {DepGraph} from 'dependency-graph';
-
-import {crawlLayout} from './utils';
-
-const initialGraph = new DepGraph();
-
-const dependencyGraph = (state = initialGraph, action) => {
-    switch (action.type) {
-        case 'COMPUTE_GRAPH': {
-            const layout = action.payload;
-            const graph = new DepGraph();
-
-            // add ID's to all the components
-            crawlLayout(layout, child => {
-                if (child.props && child.props.id) {
-                    graph.addNode(child.props.id);
-                }
-            });
-
-            // add dependencies to the graph
-            crawlLayout(layout, child => {
-                if (child.dependencies) {
-                    for (let i = 0; i < child.dependencies.length; i++) {
-                        graph.addDependency(
-                            child.props.id,
-                            child.dependencies[i]
-                        );
-                    }
-                }
-            });
-            return graph;
-        }
-
-        default:
-            return state;
-    }
-}
-
-export default dependencyGraph;
diff --git a/renderer/src/reducers/layout.js b/renderer/src/reducers/layout.js
deleted file mode 100644
index 81801a33..00000000
--- a/renderer/src/reducers/layout.js
+++ /dev/null
@@ -1,42 +0,0 @@
-import R from 'ramda';
-import Immutable from 'immutable';
-
-// TODO: this should be a prop of the high-level component
-import {ACTIONS} from '../actions';
-import {createTreePath} from './utils';
-
-const layout = (state = Immutable.fromJS({}), action) => {
-    switch (action.type) {
-
-        case ACTIONS('SET_LAYOUT'):
-            return action.payload;
-
-        // Update the props of the component
-        case ACTIONS('ON_PROP_CHANGE'): {
-            let propPath = R.append('props', action.payload.itempath);
-            state = state.mergeIn(propPath, action.payload.props);
-            return state;
-        }
-
-        // TODO: this doesn't actually do anything yet
-        case 'REORDER_CHILDREN': {
-            // TODO: wire this in to our drop targets
-            const itemTreePath = createTreePath(action.itempath);  // [3, 1, 4, 5]
-
-            const targetTreePath = R.append(
-                'children',
-                createTreePath(action.targetpath)
-            );
-
-            const item = state.getIn(itemTreePath);
-            state = state.deleteIn(itemTreePath);
-            state = state.setIn(targetTreePath, item);
-            return state;
-        }
-        default:
-            return state;
-
-    }
-}
-
-export default layout;
diff --git a/renderer/src/reducers/paths.js b/renderer/src/reducers/paths.js
deleted file mode 100644
index e0ba5ff7..00000000
--- a/renderer/src/reducers/paths.js
+++ /dev/null
@@ -1,26 +0,0 @@
-import {crawlLayout, createTreePath} from './utils'
-
-const initialPaths = {};
-
-const paths = (state = initialPaths, action) => {
-    switch (action.type) {
-        case 'COMPUTE_PATHS': {
-            const layout = action.payload;
-            const newState = Object.assign({}, state);
-
-            crawlLayout(layout, (child, itempath) => {
-                if(child.props && child.props.id) {
-                    newState[child.props.id] = createTreePath(itempath);
-                }
-            });
-
-            return newState;
-        }
-
-        default: {
-            return state;
-        }
-    }
-}
-
-export default paths;
diff --git a/renderer/src/reducers/reducer.js b/renderer/src/reducers/reducer.js
deleted file mode 100644
index fe58301f..00000000
--- a/renderer/src/reducers/reducer.js
+++ /dev/null
@@ -1,11 +0,0 @@
-'use strict'
-
-import { combineReducers } from 'redux';
-import layout from './layout';
-import dependencyGraph from './dependencyGraph';
-import paths from './paths';
-import requestQueue from './requestQueue';
-
-const reducer = combineReducers({layout, dependencyGraph, paths, requestQueue});
-
-export default reducer;
diff --git a/renderer/src/reducers/requestQueue.js b/renderer/src/reducers/requestQueue.js
deleted file mode 100644
index c178a5d9..00000000
--- a/renderer/src/reducers/requestQueue.js
+++ /dev/null
@@ -1,17 +0,0 @@
-// TODO `state` should be an ImmutableJS data structure
-const requestQueue = (state = [], action) => {
-    switch (action.type) {
-        case 'SET_REQUEST_QUEUE':
-            console.warn(`REQUEST QUEUE ${action.payload}`); // eslint-disable-line
-            if (Array.isArray(action.payload)) {
-                state = Object.assign({}, action.payload);
-            }
-
-            return state;
-
-        default:
-            return state;
-    }
-}
-
-export default requestQueue;
diff --git a/renderer/src/reducers/utils.js b/renderer/src/reducers/utils.js
deleted file mode 100644
index 14948b52..00000000
--- a/renderer/src/reducers/utils.js
+++ /dev/null
@@ -1,19 +0,0 @@
-import R from 'ramda';
-
-const pad = R.curry((array, paddingValue) => array.reduce((r, v) => {
-    r.push(paddingValue);
-    r.push(v);
-    return r;
-}, []));
-
-// crawl a layout object, apply a function on every object
-export const crawlLayout = (object, func, path=[]) => {
-    func(object, path);
-    if (Array.isArray(object.children)) {
-        object.children.forEach((child, i) => {
-            crawlLayout(child, func, R.append(i, path));
-        });
-    }
-}
-
-export const createTreePath = (array) => pad(array, 'children');
diff --git a/renderer/src/registry.js b/renderer/src/registry.js
deleted file mode 100644
index b602a80f..00000000
--- a/renderer/src/registry.js
+++ /dev/null
@@ -1,20 +0,0 @@
-'use strict';
-
-export default {
-    resolve: (componentName, namespace) => {
-        const ns = window[namespace];
-
-        if (ns) {
-            if (ns[componentName]) {
-                return ns[componentName];
-            }
-
-            throw new Error(`Component ${componentName} not found in
-                ${namespace}`);
-        }
-
-        throw new Error(`${namespace} was not found, make sure to
-            \`pip install ${namespace}\` and pass it as string in the
-            \`component_suites\` kwarg to \`dash.run_server\`.`);
-    }
-};
diff --git a/renderer/src/renderTree.js b/renderer/src/renderTree.js
deleted file mode 100644
index 3f5e9e27..00000000
--- a/renderer/src/renderTree.js
+++ /dev/null
@@ -1,97 +0,0 @@
-'use strict'
-
-import R from 'ramda';
-import React from 'react';
-import Registry from './registry';
-import Draggable from './components/core/Draggable.react';
-import Droppable from './components/core/Droppable.react';
-import EditableContent from './components/core/EditableContent.react';
-import NotifyObservers from './components/core/NotifyObservers.react';
-import {createTreePath} from './reducers/utils';
-
-export default function render(component, dependencyGraph, path=[]) {
-
-    // Create list of child elements
-    let children;
-
-    // No children
-    if (!R.has('children', component) || !component.children) {
-        children = [];
-    }
-    // Text node child
-    else if (typeof component.children === 'string') {
-        children = [component.children];
-    }
-    // One or multiple children
-    else {
-        const renderChild = (child, i) =>
-            render(child, dependencyGraph, R.append(i, path))
-
-        children = (Array.isArray(component.children) ?
-                component.children :
-                [component.children])
-            .map(renderChild);
-    }
-
-    // Create wrapping parent element
-    // TODO Remove all static component references from Registry
-    const element = R.has(component.type, Registry)
-        ? Registry[component.type]
-        : Registry.resolve(component.type, component.namespace);
-
-    const parent = React.createElement(
-        element,
-        Object.assign({}, component.props, {path: createTreePath(path)}),
-        ...children
-    );
-
-    // draggable?
-    if (component.draggable) {
-        return (
-            <Draggable>
-                <div> {/* "Only native element nodes can now be passed to React DnD connectors. You can either wrap Header into a <div>, or turn it into a drag source or a drop target itself." */}
-                    {parent}
-                </div>
-            </Draggable>
-        );
-    }
-
-    // droppable?
-    if (component.droppable) {
-        return (
-            <Droppable>
-                {parent}
-            </Droppable>
-        );
-    }
-
-    // editable?
-    if (component.props && component.props.editable) {
-        return (
-            <EditableContent>
-                {parent}
-            </EditableContent>
-        );
-    }
-
-    // has observers?
-    if (
-        component.props &&
-        component.props.id &&
-        /*
-         * in case it isn't initalized yet -
-         * TODO: we should be able to remove this check
-         * with like a initialization status store or something
-         */
-        dependencyGraph.hasNode(component.props.id) &&
-        dependencyGraph.dependantsOf(component.props.id).length
-    ) {
-        return (
-            <NotifyObservers>
-                {parent}
-            </NotifyObservers>
-        );
-    }
-
-    return parent;
-}
diff --git a/renderer/src/store.js b/renderer/src/store.js
deleted file mode 100644
index 43a59e90..00000000
--- a/renderer/src/store.js
+++ /dev/null
@@ -1,31 +0,0 @@
-/* global module, require */
-
-import {createStore, applyMiddleware} from 'redux';
-import thunk from 'redux-thunk';
-
-import reducer from './reducers/reducer';
-
-let store;
-const initializeStore = () => {
-    if (store) {
-        return store;
-    }
-
-    store = createStore(
-        reducer,
-        applyMiddleware(thunk)
-    );
-
-    if (module.hot) {
-        // Enable hot module replacement for reducers
-        module.hot.accept('./reducers/reducer', () => {
-            const nextRootReducer = require('./reducers/reducer');
-
-            store.replaceReducer(nextRootReducer);
-        });
-    }
-
-    return store;
-};
-
-export default initializeStore;
diff --git a/dash/requirements.txt b/requirements.txt
similarity index 100%
rename from dash/requirements.txt
rename to requirements.txt
diff --git a/dash/setup.py b/setup.py
similarity index 100%
rename from dash/setup.py
rename to setup.py
diff --git a/dash/static b/static
similarity index 100%
rename from dash/static
rename to static
diff --git a/dash/stock_ticker.py b/stock_ticker.py
similarity index 100%
rename from dash/stock_ticker.py
rename to stock_ticker.py
