commit c0c01651c39eb5dba338d8f262aeecad4ced2d31
Author: Carl Dawson <carl@carlsdawson.com>
Date:   Sat May 9 18:30:02 2020 -0700

    Issue-1213 clientside callback_context Initial Commit

diff --git a/dash-renderer/src/actions/index.js b/dash-renderer/src/actions/index.js
index 83972f4b..c2c8b9c4 100644
--- a/dash-renderer/src/actions/index.js
+++ b/dash-renderer/src/actions/index.js
@@ -525,6 +525,23 @@ const getVals = input =>
 
 const zipIfArray = (a, b) => (Array.isArray(a) ? zip(a, b) : [[a, b]]);
 
+function inputsToDict(inputs_list) {
+    // Ported directly from _utils.py, inputs_to_dict
+    // takes an array of inputs (some inputs may be an array)
+    // returns an Object (map):
+    //  keys of the form `id.property` or `{"id": 0}.property`
+    //  values contain the property value
+    let inputs = {};
+    for (let i = 0; i < inputs_list.length; i++) {
+        let inputsi = Array.isArray(inputs_list[i]) ? inputs_list[i] : [inputs_list[i]];
+        for (let ii = 0; ii < inputsi.length; ii++) {
+            let id_str = `${JSON.stringify(inputsi[ii].id)}.${inputsi[ii].property}`;
+            inputs[id_str] = inputsi[ii].value;
+        }
+    }
+    return inputs;
+}
+
 function handleClientside(clientside_function, payload) {
     const dc = (window.dash_clientside = window.dash_clientside || {});
     if (!dc.no_update) {
@@ -541,6 +558,23 @@ function handleClientside(clientside_function, payload) {
 
     const {inputs, outputs, state} = payload;
 
+    if (!dc.callback_context) {
+        Object.defineProperty(dc, 'callback_context', {
+            value: {'triggered': [{'prop_id': '.', 'value': null}],
+                    'inputs_list': inputsToDict(payload.inputs),
+                    'inputs': payload.inputs,
+                    'outputs_list': payload.outputs}
+                    // TODO: add the rest: states, states_list, response(??)
+        })
+    }
+    else{
+        let input_dict = inputsToDict(inputs);
+        dc.callback_context.triggered = payload.changedPropIds.map(
+            prop_id => ({'prop_id': prop_id, 'value': input_dict[prop_id]}));
+        dc.callback_context.inputs_list = input_dict;
+        dc.callback_context.inputs = inputs;
+    }
+
     let returnValue;
 
     try {
diff --git a/tests/integration/clientside/test_clientside.py b/tests/integration/clientside/test_clientside.py
index 1b51fc4f..68fea7df 100644
--- a/tests/integration/clientside/test_clientside.py
+++ b/tests/integration/clientside/test_clientside.py
@@ -4,7 +4,8 @@ from multiprocessing import Value
 import dash_html_components as html
 import dash_core_components as dcc
 from dash import Dash
-from dash.dependencies import Input, Output, State, ClientsideFunction
+from dash.dependencies import Input, Output, State, ClientsideFunction, ALL
+import dash
 
 
 def test_clsd001_simple_clientside_serverside_callback(dash_duo):
@@ -365,3 +366,60 @@ def test_clsd008_clientside_inline_source(dash_duo):
     dash_duo.find_element("#input").send_keys("hello world")
     dash_duo.wait_for_text_to_equal("#output-serverside", 'Server says "hello world"')
     dash_duo.wait_for_text_to_equal("#output-clientside", 'Client says "hello world"')
+
+
+def test_clsd009_clientside_callback_context(dash_duo):
+    app = Dash(__name__, assets_folder="assets")
+
+    app.layout = html.Div(
+        [
+            html.Button("0", id={"btn": 0}),
+            html.Button("1", id={"btn": 1}),
+            html.Button("2", id={"btn": 2}),
+            html.Div(id="output-clientside"),
+            html.Div(id="output-serverside"),
+        ]
+    )
+
+    @app.callback(
+        Output("output-serverside", "children"), [Input({"btn": ALL}, "n_clicks")]
+    )
+    def update_output(n_clicks):
+        return f"triggered: {dash.callback_context.triggered}"
+
+    app.clientside_callback(
+        """
+        function (n_clicks) {
+            console.log(dash_clientside.callback_context)
+            return `triggered: ${JSON.stringify(dash_clientside.callback_context.triggered)}`
+        }
+        """,
+        Output("output-clientside", "children"),
+        [Input({"btn": ALL}, "n_clicks")],
+    )
+
+    dash_duo.start_server(app)
+
+    dash_duo.wait_for_text_to_equal(
+        "#output-serverside", "triggered: [{'prop_id': '.', 'value': None}]"
+    )
+    dash_duo.wait_for_text_to_equal(
+        "#output-clientside", r'triggered: [{"prop_id":".","value":null}]'
+    )
+
+    dash_duo.find_element("button[id*='0']").click()
+
+    dash_duo.wait_for_text_to_equal(
+        "#output-clientside",
+        r'triggered: [{"prop_id":"{\"btn\":0}.n_clicks","value":1}]',
+    )
+
+    dash_duo.find_element("button[id*='2']").click()
+
+    dash_duo.wait_for_text_to_equal(
+        "#output-clientside",
+        r'triggered: [{"prop_id":"{\"btn\":2}.n_clicks","value":1}]',
+    )
+
+    # TODO: flush out these tests and make them look prettier.
+    #  Maybe one test for each of the callback_context properties?
