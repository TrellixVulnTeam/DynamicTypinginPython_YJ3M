commit 1839f94ded8f7c35fd5cfe773bd0a195ad721cbe
Author: byron <byron@plot.ly>
Date:   Fri May 10 15:32:23 2019 -0400

    :bug: shift external test and fix two more failures

diff --git a/tests/integration/dash_assets/test_assets.py b/tests/integration/dash_assets/test_assets.py
index 40d97e09..894c7d13 100644
--- a/tests/integration/dash_assets/test_assets.py
+++ b/tests/integration/dash_assets/test_assets.py
@@ -1,4 +1,6 @@
 import json
+import time
+import itertools
 
 import dash_html_components as html
 import dash_core_components as dcc
@@ -61,9 +63,10 @@ class TestAssets(IntegrationTests):
         tested = self.wait_for_element_by_id('tested')
         tested = json.loads(tested.text)
 
-        order = ('load_first', 'load_after', 'load_after1',
-                 'load_after10', 'load_after11', 'load_after2',
-                 'load_after3', 'load_after4', )
+        order = (
+            'load_first', 'load_after', 'load_after1', 'load_after10',
+            'load_after11', 'load_after2', 'load_after3', 'load_after4',
+        )
 
         self.assertEqual(len(order), len(tested))
 
@@ -71,3 +74,77 @@ class TestAssets(IntegrationTests):
             self.assertEqual(order[idx], tested[idx])
 
         self.percy_snapshot('test assets includes')
+
+    def test_external_files_init(self):
+        js_files = [
+            'https://www.google-analytics.com/analytics.js',
+            {'src': 'https://cdn.polyfill.io/v2/polyfill.min.js'},
+            {
+                'src': 'https://cdnjs.cloudflare.com/ajax/libs/ramda/0.26.1/ramda.min.js',
+                'integrity': 'sha256-43x9r7YRdZpZqTjDT5E0Vfrxn1ajIZLyYWtfAXsargA=',
+                'crossorigin': 'anonymous'
+            },
+            {
+                'src': 'https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.11/lodash.min.js',
+                'integrity': 'sha256-7/yoZS3548fXSRXqc/xYzjsmuW3sFKzuvOCHd06Pmps=',
+                'crossorigin': 'anonymous'
+            }
+        ]
+
+        css_files = [
+            'https://codepen.io/chriddyp/pen/bWLwgP.css',
+            {
+                'href': 'https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css',
+                'rel': 'stylesheet',
+                'integrity': 'sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO',
+                'crossorigin': 'anonymous'
+            }
+        ]
+
+        app = Dash(
+            __name__, external_scripts=js_files, external_stylesheets=css_files)
+
+        app.index_string = '''
+        <!DOCTYPE html>
+        <html>
+            <head>
+                {%metas%}
+                <title>{%title%}</title>
+                {%css%}
+            </head>
+            <body>
+                <div id="tested"></div>
+                <div id="ramda-test"></div>
+                <button type="button" id="btn">Btn</button>
+                {%app_entry%}
+                <footer>
+                    {%config%}
+                    {%scripts%}
+                    {%renderer%}
+                </footer>
+            </body>
+        </html>
+        '''
+
+        app.layout = html.Div()
+
+        self.startServer(app)
+        time.sleep(0.5)
+
+        js_urls = [x['src'] if isinstance(x, dict) else x for x in js_files]
+        css_urls = [x['href'] if isinstance(x, dict) else x for x in css_files]
+
+        for fmt, url in itertools.chain(
+                (("//script[@src='{}']", x) for x in js_urls),
+                (("//link[@href='{}']", x) for x in css_urls)):
+            self.driver.find_element_by_xpath(fmt.format(url))
+
+        # Ensure the button style was overloaded by reset (set to 38px in codepen)
+        btn = self.driver.find_element_by_id('btn')
+        btn_height = btn.value_of_css_property('height')
+
+        self.assertEqual('18px', btn_height)
+
+        # ensure ramda was loaded before the assets so they can use it.
+        lo_test = self.driver.find_element_by_id('ramda-test')
+        self.assertEqual('Hello World', lo_test.text)
diff --git a/tests/integration/test_integration.py b/tests/integration/test_integration.py
index b0002285..fd1cb329 100644
--- a/tests/integration/test_integration.py
+++ b/tests/integration/test_integration.py
@@ -423,80 +423,6 @@ class Tests(IntegrationTests):
         self.assertTrue('{%scripts%}' in exc_msg)
         time.sleep(0.5)
 
-    def test_external_files_init(self):
-        js_files = [
-            'https://www.google-analytics.com/analytics.js',
-            {'src': 'https://cdn.polyfill.io/v2/polyfill.min.js'},
-            {
-                'src': 'https://cdnjs.cloudflare.com/ajax/libs/ramda/0.26.1/ramda.min.js',
-                'integrity': 'sha256-43x9r7YRdZpZqTjDT5E0Vfrxn1ajIZLyYWtfAXsargA=',
-                'crossorigin': 'anonymous'
-            },
-            {
-                'src': 'https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.11/lodash.min.js',
-                'integrity': 'sha256-7/yoZS3548fXSRXqc/xYzjsmuW3sFKzuvOCHd06Pmps=',
-                'crossorigin': 'anonymous'
-            }
-        ]
-
-        css_files = [
-            'https://codepen.io/chriddyp/pen/bWLwgP.css',
-            {
-                'href': 'https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css',
-                'rel': 'stylesheet',
-                'integrity': 'sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO',
-                'crossorigin': 'anonymous'
-            }
-        ]
-
-        app = Dash(
-            __name__, external_scripts=js_files, external_stylesheets=css_files)
-
-        app.index_string = '''
-        <!DOCTYPE html>
-        <html>
-            <head>
-                {%metas%}
-                <title>{%title%}</title>
-                {%css%}
-            </head>
-            <body>
-                <div id="tested"></div>
-                <div id="ramda-test"></div>
-                <button type="button" id="btn">Btn</button>
-                {%app_entry%}
-                <footer>
-                    {%config%}
-                    {%scripts%}
-                    {%renderer%}
-                </footer>
-            </body>
-        </html>
-        '''
-
-        app.layout = html.Div()
-
-        self.startServer(app)
-        time.sleep(0.5)
-
-        js_urls = [x['src'] if isinstance(x, dict) else x for x in js_files]
-        css_urls = [x['href'] if isinstance(x, dict) else x for x in css_files]
-
-        for fmt, url in itertools.chain(
-                (("//script[@src='{}']", x) for x in js_urls),
-                (("//link[@href='{}']", x) for x in css_urls)):
-            self.driver.find_element_by_xpath(fmt.format(url))
-
-        # Ensure the button style was overloaded by reset (set to 38px in codepen)
-        btn = self.driver.find_element_by_id('btn')
-        btn_height = btn.value_of_css_property('height')
-
-        self.assertEqual('18px', btn_height)
-
-        # ensure ramda was loaded before the assets so they can use it.
-        lo_test = self.driver.find_element_by_id('ramda-test')
-        self.assertEqual('Hello World', lo_test.text)
-
     def test_func_layout_accepted(self):
 
         app = Dash()
diff --git a/tests/integration/test_render.py b/tests/integration/test_render.py
index 355e188a..228b0063 100644
--- a/tests/integration/test_render.py
+++ b/tests/integration/test_render.py
@@ -329,7 +329,8 @@ class Tests(IntegrationTests):
 
         self.assertTrue(
             pad_input.attrs == {
-                'id': 'sub-input-1', 'value': 'sub input initial value'}
+                'type': 'text', 'id': 'sub-input-1',
+                'value': 'sub input initial value'}
             and pad_input.name == 'input',
             "pad input is correctly rendered")
 
@@ -1160,7 +1161,7 @@ class Tests(IntegrationTests):
         chapter2_assertions()
         self.assertEqual(call_counts['button-output'].value, 0)
         time.sleep(5)
-        wait_for(lambda: call_counts['button-output'].value, expected_value=1)
+        wait_for(lambda: call_counts['button-output'].value)
         time.sleep(2)  # liberally wait for the front-end to process request
         chapter2_assertions()
         self.assertTrue(self.is_console_clean())
