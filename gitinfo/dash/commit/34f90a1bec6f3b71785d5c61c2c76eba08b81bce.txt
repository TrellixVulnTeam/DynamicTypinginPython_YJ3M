commit 34f90a1bec6f3b71785d5c61c2c76eba08b81bce
Author: Per Nilsson <per.nilsson@formidablelabs.com>
Date:   Wed Jun 15 10:22:44 2016 -0700

    Add dynamic component loader

diff --git a/dash/dash/component_loader/__init__.py b/dash/dash/component_loader/__init__.py
new file mode 100644
index 00000000..b0dcc6db
--- /dev/null
+++ b/dash/dash/component_loader/__init__.py
@@ -0,0 +1 @@
+from loader import load_components
diff --git a/dash/dash/component_loader/loader.py b/dash/dash/component_loader/loader.py
new file mode 100644
index 00000000..a20d3729
--- /dev/null
+++ b/dash/dash/component_loader/loader.py
@@ -0,0 +1,54 @@
+import json
+
+def empty(self):
+    pass
+
+def load_components(metadata_path, default_props):
+    """Load React component metadata into a format Dash can parse.
+
+    Usage: load_components('../../component-suites/lib/metadata.json', ['content', 'id', 'key', 'className', 'style', 'dependencies'])
+
+    Keyword arguments:
+    metadata_path -- a path to a JSON file created by [`react-docgen`](https://github.com/reactjs/react-docgen).
+    default_props -- props not in component propTypes that should be considered valid.
+
+    Returns:
+    components -- a list of component objects with keys `type`, `valid_kwargs`, and `setup`.
+    """
+
+    # This will be returned
+    components = []
+
+    # Start processing
+    with open(metadata_path) as data_file:
+        data = json.load(data_file)
+
+    # Iterate over each property name (which is a path to the component)
+    for path in data:
+        componentData = data[path]
+
+        # Extract component name from path
+        # e.g. src/components/MyControl.react.js
+        # TODO Make more robust
+        name = path.split('/').pop().split('.')[0]
+
+        # Extract props
+        props = []
+
+        if 'props' in componentData:
+            componentProps = componentData['props']
+
+            for prop in componentProps:
+                props.append(prop)
+
+        # Define the component, add it to the list
+        components.append({
+            'type': name,
+            # Convert list to set and back again to get unique values only.
+            # This avoids the dreaded `SyntaxError: keyword argument repeated`
+            # in dynamic generate_class() function.
+            'valid_kwargs': list(set(default_props + props)),
+            'setup': empty
+        })
+
+    return components
