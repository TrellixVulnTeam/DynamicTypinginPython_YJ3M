commit 320cae10487e670f002edf3b99143c06fd7cd4d6
Author: John Bampton <jbampton@users.noreply.github.com>
Date:   Mon Jul 6 23:43:23 2020 +1000

    Fix spelling

diff --git a/dash-renderer/src/actions/dependencies_ts.ts b/dash-renderer/src/actions/dependencies_ts.ts
index 840f03d8..7fcf8cba 100644
--- a/dash-renderer/src/actions/dependencies_ts.ts
+++ b/dash-renderer/src/actions/dependencies_ts.ts
@@ -182,7 +182,7 @@ export const getLayoutCallbacks = (
         - an input is missing
         - an input in the initial callback chain depends only on excluded inputs
 
-        Further execlusion might happen after callbacks return with:
+        Further exclusion might happen after callbacks return with:
         - PreventUpdate
         - no_update
     */
diff --git a/dash-renderer/src/checkPropTypes.js b/dash-renderer/src/checkPropTypes.js
index 18dc8b56..a10da154 100644
--- a/dash-renderer/src/checkPropTypes.js
+++ b/dash-renderer/src/checkPropTypes.js
@@ -14,7 +14,7 @@ import ReactPropTypesSecret from 'prop-types/lib/ReactPropTypesSecret';
  * @param {string} location e.g. "prop", "context", "child context"
  * @param {string} componentName Name of the component for error messages.
  * @param {?Function} getStack Returns the component stack.
- * @return {string} Any error messsage resulting from checking the types
+ * @return {string} Any error message resulting from checking the types
  */
 export default function checkPropTypes(
     typeSpecs,
diff --git a/dash-renderer/src/observers/requestedCallbacks.ts b/dash-renderer/src/observers/requestedCallbacks.ts
index 1ca30a3b..2d787a43 100644
--- a/dash-renderer/src/observers/requestedCallbacks.ts
+++ b/dash-renderer/src/observers/requestedCallbacks.ts
@@ -148,7 +148,7 @@ const observer: IStoreObserverDefinition<IStoreState> = {
         )) as IExecutingCallback[];
 
         /*
-            3. Modify or remove callbacks that are outputing to non-existing layout `id`.
+            3. Modify or remove callbacks that are outputting to non-existing layout `id`.
         */
 
         const { added: rAdded, removed: rRemoved } = pruneCallbacks(requested, paths);
@@ -259,7 +259,7 @@ const observer: IStoreObserverDefinition<IStoreState> = {
                 return false;
             }
 
-            // Get all intputs for `cb`
+            // Get all inputs for `cb`
             const inputs = map(combineIdAndProp, flatten(cb.getInputs(paths)));
 
             // Get all the potentially updated props for the group so far
diff --git a/dash/_validate.py b/dash/_validate.py
index 98ef6de5..e5bd3e7b 100644
--- a/dash/_validate.py
+++ b/dash/_validate.py
@@ -133,7 +133,7 @@ def validate_multi_return(outputs_list, output_value, callback_id):
             if not isinstance(vi, (list, tuple)):
                 raise exceptions.InvalidCallbackReturnValue(
                     """
-                    The callback {} ouput {} is a wildcard multi-output.
+                    The callback {} output {} is a wildcard multi-output.
                     Expected the output type to be a list or tuple but got:
                     {}.
                     output spec: {}
