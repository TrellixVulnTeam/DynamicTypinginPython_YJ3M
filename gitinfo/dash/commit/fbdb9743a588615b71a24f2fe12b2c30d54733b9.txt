commit fbdb9743a588615b71a24f2fe12b2c30d54733b9
Author: byron <byron@plot.ly>
Date:   Mon Nov 18 20:23:10 2019 -0500

    :ok_hand: skip the plugin if not in the context of testing as extras

diff --git a/dash/testing/plugin.py b/dash/testing/plugin.py
index b2206006..4eee911c 100644
--- a/dash/testing/plugin.py
+++ b/dash/testing/plugin.py
@@ -1,157 +1,157 @@
 # pylint: disable=missing-docstring,redefined-outer-name
+import pkgutil
 import pytest
 from .consts import SELENIUM_GRID_DEFAULT
 
-try:
-    from dash.testing.application_runners import (
-        ThreadedRunner,
-        ProcessRunner,
-        RRunner,
-    )
-    from dash.testing.browser import Browser
-    from dash.testing.composite import DashComposite, DashRComposite
-except ImportError:
-    pass
-
-
-def pytest_addoption(parser):
-    dash = parser.getgroup("Dash", "Dash Integration Tests")
-
-    dash.addoption(
-        "--webdriver",
-        choices=("Chrome", "Firefox"),
-        default="Chrome",
-        help="Name of the selenium driver to use",
-    )
-
-    dash.addoption(
-        "--remote",
-        action="store_true",
-        help="instruct pytest to use selenium grid",
-    )
-
-    dash.addoption(
-        "--remote-url",
-        action="store",
-        default=SELENIUM_GRID_DEFAULT,
-        help="set a different selenium grid remote url if other than default",
-    )
-
-    dash.addoption(
-        "--headless",
-        action="store_true",
-        help="set this flag to run in headless mode",
-    )
-
-    dash.addoption(
-        "--percy-assets",
-        action="store",
-        default="tests/assets",
-        help="configure how Percy will discover your app's assets",
-    )
-
-    dash.addoption(
-        "--nopercyfinalize",
-        action="store_false",
-        help="set this flag to control percy finalize at CI level",
-    )
-
-
-@pytest.mark.tryfirst
-def pytest_addhooks(pluginmanager):
-    # https://github.com/pytest-dev/pytest-xdist/blob/974bd566c599dc6a9ea291838c6f226197208b46/xdist/plugin.py#L67
-    # avoid warnings with pytest-2.8
-    from dash.testing import newhooks
-
-    method = getattr(pluginmanager, "add_hookspecs", None)
-    if method is None:
-        method = pluginmanager.addhooks  # pragma: no cover
-    method(newhooks)
-
-
-@pytest.hookimpl(tryfirst=True, hookwrapper=True)
-def pytest_runtest_makereport(item, call):  # pylint: disable=unused-argument
-    # execute all other hooks to obtain the report object
-    outcome = yield
-    rep = outcome.get_result()
-
-    # we only look at actual failing test calls, not setup/teardown
-    if rep.when == "call" and rep.failed:
-        for name, fixture in item.funcargs.items():
-            try:
-                if name in {"dash_duo", "dash_br", "dashr"}:
-                    fixture.take_snapshot(item.name)
-            except Exception as e:  # pylint: disable=broad-except
-                print(e)
-
-
-###############################################################################
-# Fixtures
-###############################################################################
-
-
-@pytest.fixture
-def dash_thread_server():
-    """Start a local dash server in a new thread."""
-    with ThreadedRunner() as starter:
-        yield starter
-
-
-@pytest.fixture
-def dash_process_server():
-    """Start a Dash server with subprocess.Popen and waitress-serve."""
-    with ProcessRunner() as starter:
-        yield starter
-
-
-@pytest.fixture
-def dashr_server():
-    with RRunner() as starter:
-        yield starter
-
-
-@pytest.fixture
-def dash_br(request, tmpdir):
-    with Browser(
-        browser=request.config.getoption("webdriver"),
-        remote=request.config.getoption("remote"),
-        remote_url=request.config.getoption("remote_url"),
-        headless=request.config.getoption("headless"),
-        options=request.config.hook.pytest_setup_options(),
-        download_path=tmpdir.mkdir("download").strpath,
-        percy_assets_root=request.config.getoption("percy_assets"),
-        percy_finalize=request.config.getoption("nopercyfinalize"),
-    ) as browser:
-        yield browser
-
-
-@pytest.fixture
-def dash_duo(request, dash_thread_server, tmpdir):
-    with DashComposite(
-        dash_thread_server,
-        browser=request.config.getoption("webdriver"),
-        remote=request.config.getoption("remote"),
-        remote_url=request.config.getoption("remote_url"),
-        headless=request.config.getoption("headless"),
-        options=request.config.hook.pytest_setup_options(),
-        download_path=tmpdir.mkdir("download").strpath,
-        percy_assets_root=request.config.getoption("percy_assets"),
-        percy_finalize=request.config.getoption("nopercyfinalize"),
-    ) as dc:
-        yield dc
-
-
-@pytest.fixture
-def dashr(request, dashr_server, tmpdir):
-    with DashRComposite(
-        dashr_server,
-        browser=request.config.getoption("webdriver"),
-        remote=request.config.getoption("remote"),
-        remote_url=request.config.getoption("remote_url"),
-        headless=request.config.getoption("headless"),
-        options=request.config.hook.pytest_setup_options(),
-        download_path=tmpdir.mkdir("download").strpath,
-        percy_assets_root=request.config.getoption("percy_assets"),
-        percy_finalize=request.config.getoption("nopercyfinalize"),
-    ) as dc:
-        yield dc
+# this is not a complete guess, but picking few typical dash dependencies in
+# require-testing.txt
+if (
+    pkgutil.find_loader("waitress")
+    and pkgutil.find_loader("percy")
+    and pkgutil.find_loader("beautifulsoup4")
+):
+    try:
+        from dash.testing.application_runners import (
+            ThreadedRunner,
+            ProcessRunner,
+            RRunner,
+        )
+        from dash.testing.browser import Browser
+        from dash.testing.composite import DashComposite, DashRComposite
+    except ImportError:
+        pass
+
+    def pytest_addoption(parser):
+        dash = parser.getgroup("Dash", "Dash Integration Tests")
+
+        dash.addoption(
+            "--webdriver",
+            choices=("Chrome", "Firefox"),
+            default="Chrome",
+            help="Name of the selenium driver to use",
+        )
+
+        dash.addoption(
+            "--remote",
+            action="store_true",
+            help="instruct pytest to use selenium grid",
+        )
+
+        dash.addoption(
+            "--remote-url",
+            action="store",
+            default=SELENIUM_GRID_DEFAULT,
+            help="set a different selenium grid remote url if other than default",
+        )
+
+        dash.addoption(
+            "--headless",
+            action="store_true",
+            help="set this flag to run in headless mode",
+        )
+
+        dash.addoption(
+            "--percy-assets",
+            action="store",
+            default="tests/assets",
+            help="configure how Percy will discover your app's assets",
+        )
+
+        dash.addoption(
+            "--nopercyfinalize",
+            action="store_false",
+            help="set this flag to control percy finalize at CI level",
+        )
+
+    @pytest.mark.tryfirst
+    def pytest_addhooks(pluginmanager):
+        # https://github.com/pytest-dev/pytest-xdist/blob/974bd566c599dc6a9ea291838c6f226197208b46/xdist/plugin.py#L67
+        # avoid warnings with pytest-2.8
+        from dash.testing import newhooks
+
+        method = getattr(pluginmanager, "add_hookspecs", None)
+        if method is None:
+            method = pluginmanager.addhooks  # pragma: no cover
+        method(newhooks)
+
+    @pytest.hookimpl(tryfirst=True, hookwrapper=True)
+    def pytest_runtest_makereport(
+        item, call
+    ):  # pylint: disable=unused-argument
+        # execute all other hooks to obtain the report object
+        outcome = yield
+        rep = outcome.get_result()
+
+        # we only look at actual failing test calls, not setup/teardown
+        if rep.when == "call" and rep.failed:
+            for name, fixture in item.funcargs.items():
+                try:
+                    if name in {"dash_duo", "dash_br", "dashr"}:
+                        fixture.take_snapshot(item.name)
+                except Exception as e:  # pylint: disable=broad-except
+                    print(e)
+
+    ###############################################################################
+    # Fixtures
+    ###############################################################################
+
+    @pytest.fixture
+    def dash_thread_server():
+        """Start a local dash server in a new thread."""
+        with ThreadedRunner() as starter:
+            yield starter
+
+    @pytest.fixture
+    def dash_process_server():
+        """Start a Dash server with subprocess.Popen and waitress-serve."""
+        with ProcessRunner() as starter:
+            yield starter
+
+    @pytest.fixture
+    def dashr_server():
+        with RRunner() as starter:
+            yield starter
+
+    @pytest.fixture
+    def dash_br(request, tmpdir):
+        with Browser(
+            browser=request.config.getoption("webdriver"),
+            remote=request.config.getoption("remote"),
+            remote_url=request.config.getoption("remote_url"),
+            headless=request.config.getoption("headless"),
+            options=request.config.hook.pytest_setup_options(),
+            download_path=tmpdir.mkdir("download").strpath,
+            percy_assets_root=request.config.getoption("percy_assets"),
+            percy_finalize=request.config.getoption("nopercyfinalize"),
+        ) as browser:
+            yield browser
+
+    @pytest.fixture
+    def dash_duo(request, dash_thread_server, tmpdir):
+        with DashComposite(
+            dash_thread_server,
+            browser=request.config.getoption("webdriver"),
+            remote=request.config.getoption("remote"),
+            remote_url=request.config.getoption("remote_url"),
+            headless=request.config.getoption("headless"),
+            options=request.config.hook.pytest_setup_options(),
+            download_path=tmpdir.mkdir("download").strpath,
+            percy_assets_root=request.config.getoption("percy_assets"),
+            percy_finalize=request.config.getoption("nopercyfinalize"),
+        ) as dc:
+            yield dc
+
+    @pytest.fixture
+    def dashr(request, dashr_server, tmpdir):
+        with DashRComposite(
+            dashr_server,
+            browser=request.config.getoption("webdriver"),
+            remote=request.config.getoption("remote"),
+            remote_url=request.config.getoption("remote_url"),
+            headless=request.config.getoption("headless"),
+            options=request.config.hook.pytest_setup_options(),
+            download_path=tmpdir.mkdir("download").strpath,
+            percy_assets_root=request.config.getoption("percy_assets"),
+            percy_finalize=request.config.getoption("nopercyfinalize"),
+        ) as dc:
+            yield dc
diff --git a/setup.py b/setup.py
index 03b5d5f4..c352eae6 100644
--- a/setup.py
+++ b/setup.py
@@ -1,20 +1,6 @@
 import io
-import pkgutil
 from setuptools import setup, find_packages
 
-ENTRY_POINTS = {
-    "console_scripts": [
-        "dash-generate-components = "
-        "dash.development.component_generator:cli",
-        "renderer = dash.development.build_process:renderer",
-    ]
-}
-
-# this is not a complete guess, but picking two typical dash dependencies in
-# require-testing.txt
-if pkgutil.find_loader("waitress") and pkgutil.find_loader("percy"):
-    ENTRY_POINTS["pytest11"] = ["dash = dash.testing.plugin"]
-
 main_ns = {}
 exec(open("dash/version.py").read(), main_ns)  # pylint: disable=exec-used
 
@@ -45,7 +31,14 @@ setup(
         "dev": read_req_file("dev"),
         "testing": read_req_file("testing"),
     },
-    entry_points=ENTRY_POINTS,
+    entry_points={
+        "console_scripts": [
+            "dash-generate-components = "
+            "dash.development.component_generator:cli",
+            "renderer = dash.development.build_process:renderer",
+        ],
+        "pytest11": ["dash = dash.testing.plugin"],
+    },
     url="https://plot.ly/dash",
     classifiers=[
         "Development Status :: 5 - Production/Stable",
