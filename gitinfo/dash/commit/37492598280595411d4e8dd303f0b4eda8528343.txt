commit 37492598280595411d4e8dd303f0b4eda8528343
Author: byron <byron@plot.ly>
Date:   Sat Apr 13 00:50:36 2019 -0400

    :hocho:  refactoring the _configs

diff --git a/dash/_configs.py b/dash/_configs.py
index 89b726c5..3e9354f7 100644
--- a/dash/_configs.py
+++ b/dash/_configs.py
@@ -4,51 +4,50 @@ import os
 from . import exceptions
 from ._utils import AttributeDict
 
-DASH_ENV_VARS = (
-    'DASH_APP_NAME',
-    'DASH_URL_BASE_PATHNAME',
-    'DASH_ROUTES_PATHNAME_PREFIX',
-    'DASH_REQUESTS_PATHNAME_PREFIX',
-    'DASH_SUPPRESS_CALLBACK_EXCEPTIONS',
-    'DASH_ASSETS_EXTERNAL_PATH',
-    'DASH_INCLUDE_ASSETS_FILES',
-    'DASH_COMPONENTS_CACHE_MAX_AGE',
-    'DASH_INCLUDE_ASSETS_FILES',
-    'DASH_SERVE_DEV_BUNDLES',
-    'DASH_DEBUG',
-    'DASH_HOT_RELOAD',
-    'DASH_HOT_RELOAD_INTERVAL',
-    'DASH_HOT_RELOAD_WATCH_INTERVAL',
-    'DASH_HOT_RELOAD_MAX_RETRY',
-    'DASH_SILENCE_ROUTES_LOGGING',
+load_dash_env_vars = lambda: AttributeDict(
+    {
+        var: os.getenv(var, os.getenv(var.lower()))
+        for var in (
+            'DASH_APP_NAME',
+            'DASH_URL_BASE_PATHNAME',
+            'DASH_ROUTES_PATHNAME_PREFIX',
+            'DASH_REQUESTS_PATHNAME_PREFIX',
+            'DASH_SUPPRESS_CALLBACK_EXCEPTIONS',
+            'DASH_ASSETS_EXTERNAL_PATH',
+            'DASH_INCLUDE_ASSETS_FILES',
+            'DASH_COMPONENTS_CACHE_MAX_AGE',
+            'DASH_INCLUDE_ASSETS_FILES',
+            'DASH_SERVE_DEV_BUNDLES',
+            'DASH_DEBUG',
+            'DASH_HOT_RELOAD',
+            'DASH_HOT_RELOAD_INTERVAL',
+            'DASH_HOT_RELOAD_WATCH_INTERVAL',
+            'DASH_HOT_RELOAD_MAX_RETRY',
+            'DASH_SILENCE_ROUTES_LOGGING',
+        )
+    }
 )
 
-def env_configs():
-    """
-    Configs from the environ.
-
-    :return: A dict with the dash environ vars
-    """
-    return AttributeDict({
-        x: os.getenv(x, os.getenv(x.lower()))
-        for x in DASH_ENV_VARS
-    })
-
+DASH_ENV_VARS = load_dash_env_vars()
 
-def get_config(config_name, init, env, default=None, is_bool=False):
-    if init is not None:
-        return init
+def get_combined_config(name, val, default=None):
+    '''consolidate the config with priority from high to low
+    provided init value > OS environ > default
+    '''
+    if val is not None:
+        return val
 
-    env_value = env.get('DASH_{}'.format(config_name.upper()))
-    if env_value is None:
+    env = load_dash_env_vars().get('DASH_{}'.format(name.upper()))
+    if env is None:
         return default
-    return env_value if not is_bool else env_value.lower() == 'true'
 
+    return env.lower() == 'true' if env.lower() in {'true', 'false'} \
+        else env
 
-def pathname_configs(url_base_pathname=None,
-                     routes_pathname_prefix=None,
-                     requests_pathname_prefix=None,
-                     environ_configs=None):
+def pathname_configs(
+        url_base_pathname=None,
+        routes_pathname_prefix=None,
+        requests_pathname_prefix=None):
     _pathname_config_error_message = '''
     {} This is ambiguous.
     To fix this, set `routes_pathname_prefix` instead of `url_base_pathname`.
@@ -62,19 +61,14 @@ def pathname_configs(url_base_pathname=None,
     `requests_pathname_prefix` and `routes_pathname_prefix`,
     not `url_base_pathname`.
     '''
-    environ_configs = environ_configs or env_configs()
-
-    url_base_pathname = get_config('url_base_pathname',
-                                   url_base_pathname,
-                                   environ_configs)
+    url_base_pathname = get_combined_config(
+        'url_base_pathname', url_base_pathname)
 
-    routes_pathname_prefix = get_config('routes_pathname_prefix',
-                                        routes_pathname_prefix,
-                                        environ_configs)
+    routes_pathname_prefix = get_combined_config(
+        'routes_pathname_prefix', routes_pathname_prefix)
 
-    requests_pathname_prefix = get_config('requests_pathname_prefix',
-                                          requests_pathname_prefix,
-                                          environ_configs)
+    requests_pathname_prefix = get_combined_config(
+        'requests_pathname_prefix', requests_pathname_prefix)
 
     if url_base_pathname is not None and requests_pathname_prefix is not None:
         raise exceptions.InvalidConfig(
@@ -103,7 +97,7 @@ def pathname_configs(url_base_pathname=None,
         raise exceptions.InvalidConfig(
             '`routes_pathname_prefix` needs to end with `/`')
 
-    app_name = environ_configs.DASH_APP_NAME
+    app_name = load_dash_env_vars().DASH_APP_NAME
 
     if not requests_pathname_prefix and app_name:
         requests_pathname_prefix = '/' + app_name + routes_pathname_prefix
diff --git a/dash/dash.py b/dash/dash.py
index 49326e8e..44ef9598 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -35,7 +35,7 @@ from ._utils import patch_collections_abc as _patch_collections_abc
 from . import _watch
 from ._utils import get_asset_path as _get_asset_path
 from ._utils import create_callback_id as _create_callback_id
-from . import _configs
+from ._configs import (get_combined_config, pathname_configs)
 
 _default_index = '''<!DOCTYPE html>
 <html>
@@ -126,33 +126,29 @@ class Dash(object):
         # allow users to supply their own flask server
         self.server = server or Flask(name, static_folder=static_folder)
 
-        env_configs = _configs.env_configs()
-
         url_base_pathname, routes_pathname_prefix, requests_pathname_prefix = \
-            _configs.pathname_configs(
+            pathname_configs(
                 url_base_pathname,
                 routes_pathname_prefix,
-                requests_pathname_prefix,
-                environ_configs=env_configs)
+                requests_pathname_prefix
+            )
 
         self.url_base_pathname = url_base_pathname
         self.config = _AttributeDict({
-            'suppress_callback_exceptions': _configs.get_config(
+            'suppress_callback_exceptions': get_combined_config(
                 'suppress_callback_exceptions',
-                suppress_callback_exceptions, env_configs, False
-            ),
+                suppress_callback_exceptions,
+                False),
             'routes_pathname_prefix': routes_pathname_prefix,
             'requests_pathname_prefix': requests_pathname_prefix,
-            'include_assets_files': _configs.get_config(
-                'include_assets_files',
-                include_assets_files,
-                env_configs,
-                True),
-            'assets_external_path': _configs.get_config(
-                'assets_external_path', assets_external_path, env_configs, ''),
-            'components_cache_max_age': int(_configs.get_config(
-                'components_cache_max_age', components_cache_max_age,
-                env_configs, 2678400))
+            'include_assets_files': get_combined_config(
+                'include_assets_files', include_assets_files, True),
+            'assets_external_path': get_combined_config(
+                'assets_external_path', assets_external_path, ''),
+            'components_cache_max_age': int(get_combined_config(
+                'components_cache_max_age',
+                components_cache_max_age,
+                2678400))
         })
 
         assets_blueprint_name = '{}{}'.format(
@@ -1250,6 +1246,7 @@ class Dash(object):
 
     def enable_dev_tools(self,
                          debug=False,
+                         dev_tools_props_check=True,
                          dev_tools_serve_dev_bundles=None,
                          dev_tools_hot_reload=None,
                          dev_tools_hot_reload_interval=None,
@@ -1267,6 +1264,7 @@ class Dash(object):
         Available dev_tools environment variables:
 
             - DASH_DEBUG
+            - DASH_DEV_TOOLS_PROPS_CHECK
             - DASH_SERVE_DEV_BUNDLES
             - DASH_HOT_RELOAD
             - DASH_HOT_RELOAD_INTERVAL
@@ -1278,6 +1276,8 @@ class Dash(object):
             disabled by the arguments or by environ variables. Available as
             `DASH_DEBUG` environment variable.
         :type debug: bool
+        :param dev_tools_props_check: switch the component props check
+        :type dev_tools_props_check: bool
         :param dev_tools_serve_dev_bundles: Serve the dev bundles. Available
             as `DASH_SERVE_DEV_BUNDLES` environment variable.
         :type dev_tools_serve_dev_bundles: bool
@@ -1302,46 +1302,36 @@ class Dash(object):
         :type dev_tools_silence_routes_logging: bool
         :return: debug
         """
-        env = _configs.env_configs()
-        debug = debug or \
-            _configs.get_config('debug', None, env, debug, is_bool=True)
+        debug = debug or get_combined_config('debug', None, debug)
 
         self._dev_tools.dev_tools_ui = debug
 
-        self._dev_tools['serve_dev_bundles'] = _configs.get_config(
-            'serve_dev_bundles', dev_tools_serve_dev_bundles, env,
-            default=debug,
-            is_bool=True
-        )
-        self._dev_tools['hot_reload'] = _configs.get_config(
-            'hot_reload', dev_tools_hot_reload, env,
-            default=debug,
-            is_bool=True
-        )
-        self._dev_tools['hot_reload_interval'] = int(_configs.get_config(
-            'hot_reload_interval', dev_tools_hot_reload_interval, env,
-            default=3000
+        self._dev_tools['serve_dev_bundles'] = get_combined_config(
+            'serve_dev_bundles', dev_tools_serve_dev_bundles, default=debug)
+
+        self._dev_tools['hot_reload'] = get_combined_config(
+            'hot_reload', dev_tools_hot_reload, default=debug)
+        self._dev_tools['hot_reload_interval'] = int(get_combined_config(
+            'hot_reload_interval', dev_tools_hot_reload_interval, default=3000
         ))
         self._dev_tools['hot_reload_watch_interval'] = float(
-            _configs.get_config(
+            get_combined_config(
                 'hot_reload_watch_interval',
                 dev_tools_hot_reload_watch_interval,
-                env,
                 default=0.5
             )
         )
         self._dev_tools['hot_reload_max_retry'] = int(
-            _configs.get_config(
+            get_combined_config(
                 'hot_reload_max_retry',
                 dev_tools_hot_reload_max_retry,
-                env,
                 default=8
             )
         )
-        self._dev_tools['silence_routes_logging'] = _configs.get_config(
-            'silence_routes_logging', dev_tools_silence_routes_logging, env,
+        self._dev_tools['silence_routes_logging'] = get_combined_config(
+            'silence_routes_logging',
+            dev_tools_silence_routes_logging,
             default=debug,
-            is_bool=True,
         )
 
         if self._dev_tools.silence_routes_logging:
diff --git a/tests/test_configs.py b/tests/test_configs.py
index ef630e6c..0478d595 100644
--- a/tests/test_configs.py
+++ b/tests/test_configs.py
@@ -1,7 +1,7 @@
 import os
 import unittest
 # noinspection PyProtectedMember
-from dash import _configs
+from dash._configs import (pathname_configs, DASH_ENV_VARS)
 from dash import exceptions as _exc
 from dash._utils import get_asset_path
 
@@ -9,31 +9,29 @@ from dash._utils import get_asset_path
 class MyTestCase(unittest.TestCase):
 
     def setUp(self):
-        environ = _configs.env_configs()
-
-        for k in environ.keys():
+        for k in DASH_ENV_VARS.keys():
             if k in os.environ:
                 os.environ.pop(k)
 
     def test_valid_pathname_prefix_init(self):
-        _, routes, req = _configs.pathname_configs()
+        _, routes, req = pathname_configs()
 
         self.assertEqual('/', routes)
         self.assertEqual('/', req)
 
-        _, routes, req = _configs.pathname_configs(
+        _, routes, req = pathname_configs(
             routes_pathname_prefix='/dash/')
 
         self.assertEqual('/dash/', req)
 
-        _, routes, req = _configs.pathname_configs(
+        _, routes, req = pathname_configs(
             requests_pathname_prefix='/my-dash-app/',
         )
 
         self.assertEqual(routes, '/')
         self.assertEqual(req, '/my-dash-app/')
 
-        _, routes, req = _configs.pathname_configs(
+        _, routes, req = pathname_configs(
             routes_pathname_prefix='/dash/',
             requests_pathname_prefix='/my-dash-app/dash/'
         )
@@ -43,12 +41,12 @@ class MyTestCase(unittest.TestCase):
 
     def test_invalid_pathname_prefix(self):
         with self.assertRaises(_exc.InvalidConfig) as context:
-            _, _, _ = _configs.pathname_configs('/my-path', '/another-path')
+            _, _, _ = pathname_configs('/my-path', '/another-path')
 
             self.assertTrue('url_base_pathname' in str(context.exception))
 
         with self.assertRaises(_exc.InvalidConfig) as context:
-            _, _, _ = _configs.pathname_configs(
+            _, _, _ = pathname_configs(
                 url_base_pathname='/invalid',
                 routes_pathname_prefix='/invalid')
 
@@ -56,7 +54,7 @@ class MyTestCase(unittest.TestCase):
                             .endswith('`routes_pathname_prefix`'))
 
         with self.assertRaises(_exc.InvalidConfig) as context:
-            _, _, _ = _configs.pathname_configs(
+            _, _, _ = pathname_configs(
                 url_base_pathname='/my-path',
                 requests_pathname_prefix='/another-path')
 
@@ -64,29 +62,29 @@ class MyTestCase(unittest.TestCase):
                             .endswith('`requests_pathname_prefix`'))
 
         with self.assertRaises(_exc.InvalidConfig) as context:
-            _, _, _ = _configs.pathname_configs('my-path')
+            _, _, _ = pathname_configs('my-path')
 
             self.assertTrue('start with `/`' in str(context.exception))
 
         with self.assertRaises(_exc.InvalidConfig) as context:
-            _, _, _ = _configs.pathname_configs('/my-path')
+            _, _, _ = pathname_configs('/my-path')
 
             self.assertTrue('end with `/`' in str(context.exception))
 
     def test_pathname_prefix_from_environ_app_name(self):
         os.environ['DASH_APP_NAME'] = 'my-dash-app'
-        _, routes, req = _configs.pathname_configs()
+        _, routes, req = pathname_configs()
         self.assertEqual('/my-dash-app/', req)
         self.assertEqual('/', routes)
 
     def test_pathname_prefix_environ_routes(self):
         os.environ['DASH_ROUTES_PATHNAME_PREFIX'] = '/routes/'
-        _, routes, req = _configs.pathname_configs()
+        _, routes, _ = pathname_configs()
         self.assertEqual('/routes/', routes)
 
     def test_pathname_prefix_environ_requests(self):
         os.environ['DASH_REQUESTS_PATHNAME_PREFIX'] = '/requests/'
-        _, routes, req = _configs.pathname_configs()
+        _, _, req = pathname_configs()
         self.assertEqual('/requests/', req)
 
     def test_pathname_prefix_assets(self):
