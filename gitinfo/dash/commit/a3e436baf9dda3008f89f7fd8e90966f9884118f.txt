commit a3e436baf9dda3008f89f7fd8e90966f9884118f
Author: alexcjohnson <alex@plot.ly>
Date:   Tue Jul 9 17:19:32 2019 -0400

    fix prettier so it lints the base of src

diff --git a/dash-renderer/package.json b/dash-renderer/package.json
index feca6869..d29fb9f8 100644
--- a/dash-renderer/package.json
+++ b/dash-renderer/package.json
@@ -13,8 +13,8 @@
     "build:dev.watch": "webpack --mode development --watch",
     "build": "webpack --mode production",
     "start": "webpack-serve ./webpack.serve.config.js",
-    "format": "prettier --config .prettierrc --write src/**/*.js src/**/*.react.js",
-    "format:test": "prettier --config .prettierrc src/**/*.js src/**/*.react.js --list-different",
+    "format": "prettier --config .prettierrc --write \"src/**/*.js\"",
+    "format:test": "prettier --config .prettierrc \"src/**/*.js\" --list-different",
     "test": "npm run lint",
     "test:py": "python -m unittest -v tests.test_render tests.test_race_conditions"
   },
diff --git a/dash-renderer/src/TreeContainer.js b/dash-renderer/src/TreeContainer.js
index e16a2e0d..a2158ffd 100644
--- a/dash-renderer/src/TreeContainer.js
+++ b/dash-renderer/src/TreeContainer.js
@@ -19,57 +19,63 @@ import {
     omit,
     pick,
     propOr,
-    type
+    type,
 } from 'ramda';
-import { notifyObservers, updateProps } from './actions';
+import {notifyObservers, updateProps} from './actions';
 import ComponentErrorBoundary from './components/error/ComponentErrorBoundary.react';
 import checkPropTypes from 'check-prop-types';
 
-
 const SIMPLE_COMPONENT_TYPES = ['String', 'Number', 'Null', 'Boolean'];
-const isSimpleComponent = component => contains(type(component), SIMPLE_COMPONENT_TYPES)
+const isSimpleComponent = component =>
+    contains(type(component), SIMPLE_COMPONENT_TYPES);
 
 function validateComponent(componentDefinition) {
     if (type(componentDefinition) === 'Array') {
         throw new Error(
-            'The children property of a component is a list of lists, instead '+
-            'of just a list. ' +
-            'Check the component that has the following contents, ' +
-            'and remove of the levels of nesting: \n' +
-            JSON.stringify(componentDefinition, null, 2)
+            'The children property of a component is a list of lists, instead ' +
+                'of just a list. ' +
+                'Check the component that has the following contents, ' +
+                'and remove of the levels of nesting: \n' +
+                JSON.stringify(componentDefinition, null, 2)
         );
     }
-    if (type(componentDefinition) === 'Object' &&
-            !(has('namespace', componentDefinition) &&
-              has('type', componentDefinition) &&
-              has('props', componentDefinition))) {
+    if (
+        type(componentDefinition) === 'Object' &&
+        !(
+            has('namespace', componentDefinition) &&
+            has('type', componentDefinition) &&
+            has('props', componentDefinition)
+        )
+    ) {
         throw new Error(
             'An object was provided as `children` instead of a component, ' +
-            'string, or number (or list of those). ' +
-            'Check the children property that looks something like:\n' +
-            JSON.stringify(componentDefinition, null, 2)
+                'string, or number (or list of those). ' +
+                'Check the children property that looks something like:\n' +
+                JSON.stringify(componentDefinition, null, 2)
         );
     }
 }
 
-const createContainer = (component, path) => isSimpleComponent(component) ?
-    component :
-    (<AugmentedTreeContainer
-        key={component && component.props && component.props.id}
-        _dashprivate_layout={component}
-        _dashprivate_path={path}
-    />);
+const createContainer = (component, path) =>
+    isSimpleComponent(component) ? (
+        component
+    ) : (
+        <AugmentedTreeContainer
+            key={component && component.props && component.props.id}
+            _dashprivate_layout={component}
+            _dashprivate_path={path}
+        />
+    );
 
 function CheckedComponent(p) {
-    const {
-        element,
-        extraProps,
-        props,
-        children,
-        type
-    } = p;
+    const {element, extraProps, props, children, type} = p;
 
-    const errorMessage = checkPropTypes(element.propTypes, props, 'component prop', element);
+    const errorMessage = checkPropTypes(
+        element.propTypes,
+        props,
+        'component prop',
+        element
+    );
     if (errorMessage) {
         propTypeErrorHandler(errorMessage, props, type);
     }
@@ -95,15 +101,20 @@ class TreeContainer extends Component {
             return null;
         }
 
-        return Array.isArray(components) ?
-            addIndex(map)(
-                (component, i) => createContainer(component, concat(path, ['props', 'children', i])),
-                components
-            ) : createContainer(components, concat(path, ['props', 'children']));
+        return Array.isArray(components)
+            ? addIndex(map)(
+                  (component, i) =>
+                      createContainer(
+                          component,
+                          concat(path, ['props', 'children', i])
+                      ),
+                  components
+              )
+            : createContainer(components, concat(path, ['props', 'children']));
     }
 
     getComponent(_dashprivate_layout, children, loading_state, setProps) {
-        const { _dashprivate_config } = this.props;
+        const {_dashprivate_config} = this.props;
 
         if (isEmpty(_dashprivate_layout)) {
             return null;
@@ -128,7 +139,7 @@ class TreeContainer extends Component {
                     children={children}
                     element={element}
                     props={props}
-                    extraProps={{ loading_state, setProps }}
+                    extraProps={{loading_state, setProps}}
                     type={_dashprivate_layout.type}
                 />
             </ComponentErrorBoundary>
@@ -140,12 +151,11 @@ class TreeContainer extends Component {
             >
                 {React.createElement(
                     element,
-                    mergeRight(props, { loading_state, setProps }),
+                    mergeRight(props, {loading_state, setProps}),
                     ...(Array.isArray(children) ? children : [children])
                 )}
             </ComponentErrorBoundary>
         );
-
     }
 
     getSetProps() {
@@ -153,41 +163,55 @@ class TreeContainer extends Component {
             const {
                 _dashprivate_dependencies,
                 _dashprivate_dispatch,
-                _dashprivate_path
+                _dashprivate_path,
             } = this.props;
 
             const id = this.getLayoutProps().id;
 
             // Identify the modified props that are required for callbacks
-            const watchedKeys = filter(key =>
-                _dashprivate_dependencies &&
-                _dashprivate_dependencies.find(dependency =>
-                    dependency.inputs.find(input => input.id === id && input.property === key) ||
-                    dependency.state.find(state => state.id === id && state.property === key)
-                )
+            const watchedKeys = filter(
+                key =>
+                    _dashprivate_dependencies &&
+                    _dashprivate_dependencies.find(
+                        dependency =>
+                            dependency.inputs.find(
+                                input =>
+                                    input.id === id && input.property === key
+                            ) ||
+                            dependency.state.find(
+                                state =>
+                                    state.id === id && state.property === key
+                            )
+                    )
             )(keysIn(newProps));
 
             // Always update this component's props
-            _dashprivate_dispatch(updateProps({
-                props: newProps,
-                itempath: _dashprivate_path
-            }));
+            _dashprivate_dispatch(
+                updateProps({
+                    props: newProps,
+                    itempath: _dashprivate_path,
+                })
+            );
 
             // Only dispatch changes to Dash if a watched prop changed
             if (watchedKeys.length) {
-                _dashprivate_dispatch(notifyObservers({
-                    id: id,
-                    props: pick(watchedKeys)(newProps)
-                }));
+                _dashprivate_dispatch(
+                    notifyObservers({
+                        id: id,
+                        props: pick(watchedKeys)(newProps),
+                    })
+                );
             }
-
         };
     }
 
     shouldComponentUpdate(nextProps) {
-        const { _dashprivate_layout, _dashprivate_loadingState } = nextProps;
-        return _dashprivate_layout !== this.props._dashprivate_layout ||
-            _dashprivate_loadingState.is_loading !== this.props._dashprivate_loadingState.is_loading;
+        const {_dashprivate_layout, _dashprivate_loadingState} = nextProps;
+        return (
+            _dashprivate_layout !== this.props._dashprivate_layout ||
+            _dashprivate_loadingState.is_loading !==
+                this.props._dashprivate_loadingState.is_loading
+        );
     }
 
     getLayoutProps() {
@@ -199,15 +223,23 @@ class TreeContainer extends Component {
             _dashprivate_dispatch,
             _dashprivate_layout,
             _dashprivate_loadingState,
-            _dashprivate_path
+            _dashprivate_path,
         } = this.props;
 
         const layoutProps = this.getLayoutProps();
 
-        const children = this.getChildren(layoutProps.children, _dashprivate_path);
+        const children = this.getChildren(
+            layoutProps.children,
+            _dashprivate_path
+        );
         const setProps = this.getSetProps(_dashprivate_dispatch);
 
-        return this.getComponent(_dashprivate_layout, children, _dashprivate_loadingState, setProps);
+        return this.getComponent(
+            _dashprivate_layout,
+            children,
+            _dashprivate_loadingState,
+            setProps
+        );
     }
 }
 
@@ -233,14 +265,13 @@ function getNestedIds(layout) {
     while (queue.length) {
         const elementLayout = queue.shift();
 
-        const props = elementLayout &&
-            elementLayout.props;
+        const props = elementLayout && elementLayout.props;
 
         if (!props) {
             continue;
         }
 
-        const { children, id } = props;
+        const {children, id} = props;
 
         if (id) {
             ids.push(id);
@@ -248,7 +279,8 @@ function getNestedIds(layout) {
 
         if (children) {
             const filteredChildren = filter(
-                child => !isSimpleComponent(child) && !isLoadingComponent(child),
+                child =>
+                    !isSimpleComponent(child) && !isLoadingComponent(child),
                 Array.isArray(children) ? children : [children]
             );
 
@@ -260,11 +292,11 @@ function getNestedIds(layout) {
 }
 
 function getLoadingState(layout, requestQueue) {
-    const ids = isLoadingComponent(layout) ?
-        getNestedIds(layout) :
-        (layout && layout.props.id ?
-            [layout.props.id] :
-            []);
+    const ids = isLoadingComponent(layout)
+        ? getNestedIds(layout)
+        : layout && layout.props.id
+        ? [layout.props.id]
+        : [];
 
     let isLoading = false;
     let loadingProp;
@@ -273,7 +305,10 @@ function getLoadingState(layout, requestQueue) {
     if (requestQueue) {
         forEach(r => {
             const controllerId = isNil(r.controllerId) ? '' : r.controllerId;
-            if (r.status === 'loading' && any(id => contains(id, controllerId), ids)) {
+            if (
+                r.status === 'loading' &&
+                any(id => contains(id, controllerId), ids)
+            ) {
                 isLoading = true;
                 [loadingComponent, loadingProp] = r.controllerId.split('.');
             }
@@ -292,7 +327,7 @@ export const AugmentedTreeContainer = connect(
     state => ({
         dependencies: state.dependenciesRequest.content,
         requestQueue: state.requestQueue,
-        config: state.config
+        config: state.config,
     }),
     dispatch => ({dispatch}),
     (stateProps, dispatchProps, ownProps) => ({
@@ -300,7 +335,10 @@ export const AugmentedTreeContainer = connect(
         _dashprivate_dispatch: dispatchProps.dispatch,
         _dashprivate_layout: ownProps._dashprivate_layout,
         _dashprivate_path: ownProps._dashprivate_path,
-        _dashprivate_loadingState: getLoadingState(ownProps._dashprivate_layout, stateProps.requestQueue),
+        _dashprivate_loadingState: getLoadingState(
+            ownProps._dashprivate_layout,
+            stateProps.requestQueue
+        ),
         _dashprivate_requestQueue: stateProps.requestQueue,
         _dashprivate_config: stateProps.config,
     })
diff --git a/dash-renderer/src/exceptions.js b/dash-renderer/src/exceptions.js
index 5478719a..68c9c498 100644
--- a/dash-renderer/src/exceptions.js
+++ b/dash-renderer/src/exceptions.js
@@ -38,28 +38,26 @@ export function propTypeErrorHandler(message, props, type) {
     const messageParts = message.split('`');
     let errorMessage;
     if (contains('is marked as required', message)) {
-
         const invalidPropPath = messageParts[1];
         errorMessage = `${invalidPropPath} in ${type}`;
         if (props.id) {
             errorMessage += ` with ID "${props.id}"`;
         }
         errorMessage += ` is required but it was not provided.`;
-
-    } else if(contains('Bad object', message)) {
+    } else if (contains('Bad object', message)) {
         /*
          * Handle .exact errors
          * https://github.com/facebook/prop-types/blob/v15.7.2/factoryWithTypeCheckers.js#L438-L442
          */
-        errorMessage = (
+        errorMessage =
             message.split('supplied to ')[0] +
             `supplied to ${type}` +
             '.\nBad' +
-            message.split('.\nBad')[1]
-        );
-
-    } else if(contains('Invalid ', message) && contains(' supplied to ', message)) {
-
+            message.split('.\nBad')[1];
+    } else if (
+        contains('Invalid ', message) &&
+        contains(' supplied to ', message)
+    ) {
         const invalidPropPath = messageParts[1];
 
         errorMessage = `Invalid argument \`${invalidPropPath}\` passed into ${type}`;
@@ -84,10 +82,10 @@ export function propTypeErrorHandler(message, props, type) {
          * https://github.com/facebook/prop-types/blob/v15.7.2/factoryWithTypeCheckers.js#L388
          */
         if (contains(' of type `', message)) {
-            const invalidPropTypeProvided = message.split(' of type `')[1].split('`')[0];
-            errorMessage += (
-                `\nWas supplied type \`${invalidPropTypeProvided}\`.`
-            );
+            const invalidPropTypeProvided = message
+                .split(' of type `')[1]
+                .split('`')[0];
+            errorMessage += `\nWas supplied type \`${invalidPropTypeProvided}\`.`;
         }
 
         if (has(invalidPropPath, props)) {
@@ -96,7 +94,11 @@ export function propTypeErrorHandler(message, props, type) {
              * For now, we won't try to unpack these nested options
              * but we could in the future.
              */
-            const jsonSuppliedValue = JSON.stringify(props[invalidPropPath], null, 2);
+            const jsonSuppliedValue = JSON.stringify(
+                props[invalidPropPath],
+                null,
+                2
+            );
             if (jsonSuppliedValue) {
                 if (contains('\n', jsonSuppliedValue)) {
                     errorMessage += `\nValue provided: \n${jsonSuppliedValue}`;
@@ -105,7 +107,6 @@ export function propTypeErrorHandler(message, props, type) {
                 }
             }
         }
-
     } else {
         /*
          * Not aware of other prop type warning messages.
diff --git a/dash-renderer/src/index.js b/dash-renderer/src/index.js
index 4535d216..763944cf 100644
--- a/dash-renderer/src/index.js
+++ b/dash-renderer/src/index.js
@@ -1,7 +1,7 @@
 /* eslint-env browser */
 
 'use strict';
-import { DashRenderer } from './DashRenderer'
+import {DashRenderer} from './DashRenderer';
 
 // make DashRenderer globally available
 window.DashRenderer = DashRenderer;
diff --git a/dash-renderer/src/registry.js b/dash-renderer/src/registry.js
index 435e3921..2517581a 100644
--- a/dash-renderer/src/registry.js
+++ b/dash-renderer/src/registry.js
@@ -1,7 +1,7 @@
 'use strict';
 
 export default {
-    resolve: (component) => {
+    resolve: component => {
         const {type, namespace} = component;
 
         const ns = window[namespace]; /* global window: true */
diff --git a/dash-renderer/src/store.js b/dash-renderer/src/store.js
index 10d28813..f907c70f 100644
--- a/dash-renderer/src/store.js
+++ b/dash-renderer/src/store.js
@@ -14,7 +14,7 @@ let store;
  * @returns {Store<GenericStoreEnhancer>}
  *  An initialized redux store with middleware and possible hot reloading of reducers
  */
-const initializeStore = (reset) => {
+const initializeStore = reset => {
     if (store && !reset) {
         return store;
     }
diff --git a/dash-renderer/src/utils.js b/dash-renderer/src/utils.js
index 453fceb4..623cfcb3 100644
--- a/dash-renderer/src/utils.js
+++ b/dash-renderer/src/utils.js
@@ -17,11 +17,11 @@ export function urlBase(config) {
         );
     }
 
-    const base = hasReqPrefix ?
-        config.requests_pathname_prefix :
-        config.url_base_pathname;
+    const base = hasReqPrefix
+        ? config.requests_pathname_prefix
+        : config.url_base_pathname;
 
-    return (base.charAt(base.length - 1) === '/') ? base : (base + '/');
+    return base.charAt(base.length - 1) === '/' ? base : base + '/';
 }
 
 export function uid() {
@@ -65,7 +65,5 @@ export function parseMultipleOutputs(outputIdAndProp) {
      * by `...`, e.g.
      * "..output-1.value...output-2.value...output-3.value...output-4.value.."
      */
-    return outputIdAndProp
-        .split('...')
-        .map(o => o.replace('..', ''));
+    return outputIdAndProp.split('...').map(o => o.replace('..', ''));
 }
