commit 4849ace42425be1af2081c8202b1d818920ec4f4
Author: byron <byron@plot.ly>
Date:   Thu Jun 6 01:39:32 2019 -0400

    :art: :recycle: adapt / translate tests

diff --git a/.circleci/config.yml b/.circleci/config.yml
index 5e0efef9..da1d9882 100644
--- a/.circleci/config.yml
+++ b/.circleci/config.yml
@@ -49,7 +49,7 @@ jobs:
             flake8 dash setup.py
             flake8 --ignore=E123,E126,E501,E722,E731,F401,F841,W503,W504 --exclude=metadata_test.py tests
             pylint dash setup.py --rcfile=$PYLINTRC
-            pylint tests/unit tests/integration/devtools -d all -e C0410,C0411,C0412,C0413,W0109
+            pylint tests/unit tests/integration/devtools tests/integration/renderer tests/integration/dash_assets -d all -e C0410,C0411,C0412,C0413,W0109
             cd dash-renderer && npm install --ignore-scripts && npm run lint:test && npm run format:test
 
       - run:
diff --git a/tests/integration/dash_assets/test_assets.py b/tests/integration/dash_assets/test_assets.py
deleted file mode 100644
index dcb4aaa3..00000000
--- a/tests/integration/dash_assets/test_assets.py
+++ /dev/null
@@ -1,152 +0,0 @@
-import json
-import time
-import itertools
-
-import dash_html_components as html
-import dash_core_components as dcc
-
-from dash import Dash
-# from IntegrationTests import IntegrationTests
-# from integration.utils import wait_for, invincible
-import pytest
-
-
-@pytest.mark.skip("rewrite with fixture can solve the import issue")
-class TestAssets():
-
-    # def setUp(self):
-    #     def wait_for_element_by_id(id_):
-    #         wait_for(lambda: None is not invincible(
-    #             lambda: self.driver.find_element_by_id(id_)
-    #         ))
-    #         return self.driver.find_element_by_id(id_)
-    #     self.wait_for_element_by_id = wait_for_element_by_id
-
-    def test_assets(self):
-        app = Dash(__name__, assets_ignore='.*ignored.*')
-        app.index_string = '''
-        <!DOCTYPE html>
-        <html>
-            <head>
-                {%metas%}
-                <title>{%title%}</title>
-                {%css%}
-            </head>
-            <body>
-                <div id="tested"></div>
-                {%app_entry%}
-                <footer>
-                    {%config%}
-                    {%scripts%}
-                    {%renderer%}
-                </footer>
-            </body>
-        </html>
-        '''
-
-        app.layout = html.Div([
-            html.Div('Content', id='content'),
-            dcc.Input(id='test')
-        ], id='layout')
-
-        self.startServer(app)
-
-        # time.sleep(3600)
-
-        body = self.driver.find_element_by_tag_name('body')
-
-        body_margin = body.value_of_css_property('margin')
-        self.assertEqual('0px', body_margin)
-
-        content = self.wait_for_element_by_id('content')
-        content_padding = content.value_of_css_property('padding')
-        self.assertEqual('8px', content_padding)
-
-        tested = self.wait_for_element_by_id('tested')
-        tested = json.loads(tested.text)
-
-        order = (
-            'load_first', 'load_after', 'load_after1', 'load_after10',
-            'load_after11', 'load_after2', 'load_after3', 'load_after4',
-        )
-
-        self.assertEqual(len(order), len(tested))
-
-        for idx, _ in enumerate(tested):
-            self.assertEqual(order[idx], tested[idx])
-
-        self.percy_snapshot('test assets includes')
-
-    def test_external_files_init(self):
-        js_files = [
-            'https://www.google-analytics.com/analytics.js',
-            {'src': 'https://cdn.polyfill.io/v2/polyfill.min.js'},
-            {
-                'src': 'https://cdnjs.cloudflare.com/ajax/libs/ramda/0.26.1/ramda.min.js',
-                'integrity': 'sha256-43x9r7YRdZpZqTjDT5E0Vfrxn1ajIZLyYWtfAXsargA=',
-                'crossorigin': 'anonymous'
-            },
-            {
-                'src': 'https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.11/lodash.min.js',
-                'integrity': 'sha256-7/yoZS3548fXSRXqc/xYzjsmuW3sFKzuvOCHd06Pmps=',
-                'crossorigin': 'anonymous'
-            }
-        ]
-
-        css_files = [
-            'https://codepen.io/chriddyp/pen/bWLwgP.css',
-            {
-                'href': 'https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css',
-                'rel': 'stylesheet',
-                'integrity': 'sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO',
-                'crossorigin': 'anonymous'
-            }
-        ]
-
-        app = Dash(
-            __name__, external_scripts=js_files, external_stylesheets=css_files)
-
-        app.index_string = '''
-        <!DOCTYPE html>
-        <html>
-            <head>
-                {%metas%}
-                <title>{%title%}</title>
-                {%css%}
-            </head>
-            <body>
-                <div id="tested"></div>
-                <div id="ramda-test"></div>
-                <button type="button" id="btn">Btn</button>
-                {%app_entry%}
-                <footer>
-                    {%config%}
-                    {%scripts%}
-                    {%renderer%}
-                </footer>
-            </body>
-        </html>
-        '''
-
-        app.layout = html.Div()
-
-        self.startServer(app)
-        time.sleep(0.5)
-
-        js_urls = [x['src'] if isinstance(x, dict) else x for x in js_files]
-        css_urls = [x['href'] if isinstance(x, dict) else x for x in css_files]
-
-        for fmt, url in itertools.chain(
-                (("//script[@src='{}']", x) for x in js_urls),
-                (("//link[@href='{}']", x) for x in css_urls)):
-            self.driver.find_element_by_xpath(fmt.format(url))
-
-        # Ensure the button style was overloaded by reset (set to 38px in codepen)
-        btn = self.driver.find_element_by_id('btn')
-        btn_height = btn.value_of_css_property('height')
-
-        self.assertEqual('18px', btn_height)
-
-        # ensure ramda was loaded before the assets so they can use it.
-        lo_test = self.driver.find_element_by_id('ramda-test')
-        self.assertEqual('Hello World', lo_test.text)
diff --git a/tests/integration/dash_assets/test_dash_assets.py b/tests/integration/dash_assets/test_dash_assets.py
new file mode 100644
index 00000000..53857e8c
--- /dev/null
+++ b/tests/integration/dash_assets/test_dash_assets.py
@@ -0,0 +1,135 @@
+import json
+import time
+import itertools
+
+import dash_html_components as html
+import dash_core_components as dcc
+
+from dash import Dash
+
+
+def test_dada001_assets(dash_duo):
+    app = Dash(__name__, assets_ignore=".*ignored.*")
+    app.index_string = """
+    <!DOCTYPE html>
+    <html>
+        <head>
+            {%metas%}
+            <title>{%title%}</title>
+            {%css%}
+        </head>
+        <body>
+            <div id="tested"></div>
+            {%app_entry%}
+            <footer>
+                {%config%}
+                {%scripts%}
+                {%renderer%}
+            </footer>
+        </body>
+    </html>
+    """
+
+    app.layout = html.Div(
+        [html.Div("Content", id="content"), dcc.Input(id="test")], id="layout"
+    )
+
+    dash_duo.start_app_server(app)
+
+    assert (
+        dash_duo.find_element("body").value_of_css_property("margin") == "0px"
+    ), "margin is overloaded by assets css resource"
+
+    assert (
+        dash_duo.find_element("#content").value_of_css_property("padding")
+        == "8px"
+    ), "padding is overloaded by assets"
+
+    tested = json.loads(dash_duo.wait_for_element("#tested").text)
+
+    order = [
+        u"load_first",
+        u"load_after",
+        u"load_after1",
+        u"load_after10",
+        u"load_after11",
+        u"load_after2",
+        u"load_after3",
+        u"load_after4",
+    ]
+
+    assert order == tested, "the content and order is expected"
+    dash_duo.percy_snapshot("test assets includes")
+
+
+def test_dada002_external_files_init(dash_duo):
+    js_files = [
+        "https://www.google-analytics.com/analytics.js",
+        {"src": "https://cdn.polyfill.io/v2/polyfill.min.js"},
+        {
+            "src": "https://cdnjs.cloudflare.com/ajax/libs/ramda/0.26.1/ramda.min.js",
+            "integrity": "sha256-43x9r7YRdZpZqTjDT5E0Vfrxn1ajIZLyYWtfAXsargA=",
+            "crossorigin": "anonymous",
+        },
+        {
+            "src": "https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.11/lodash.min.js",
+            "integrity": "sha256-7/yoZS3548fXSRXqc/xYzjsmuW3sFKzuvOCHd06Pmps=",
+            "crossorigin": "anonymous",
+        },
+    ]
+
+    css_files = [
+        "https://codepen.io/chriddyp/pen/bWLwgP.css",
+        {
+            "href": "https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css",
+            "rel": "stylesheet",
+            "integrity": "sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO",
+            "crossorigin": "anonymous",
+        },
+    ]
+
+    app = Dash(
+        __name__, external_scripts=js_files, external_stylesheets=css_files
+    )
+
+    app.index_string = """
+    <!DOCTYPE html>
+    <html>
+        <head>
+            {%metas%}
+            <title>{%title%}</title>
+            {%css%}
+        </head>
+        <body>
+            <div id="tested"></div>
+            <div id="ramda-test"></div>
+            <button type="button" id="btn">Btn</button>
+            {%app_entry%}
+            <footer>
+                {%config%}
+                {%scripts%}
+                {%renderer%}
+            </footer>
+        </body>
+    </html>
+    """
+
+    app.layout = html.Div()
+
+    dash_duo.start_app_server(app)
+
+    js_urls = [x["src"] if isinstance(x, dict) else x for x in js_files]
+    css_urls = [x["href"] if isinstance(x, dict) else x for x in css_files]
+
+    for fmt, url in itertools.chain(
+        (("//script[@src='{}']", x) for x in js_urls),
+        (("//link[@href='{}']", x) for x in css_urls),
+    ):
+        dash_duo.driver.find_element_by_xpath(fmt.format(url))
+
+    assert (
+        dash_duo.find_element("#btn").value_of_css_property("height") == "18px"
+    ), "Ensure the button style was overloaded by reset (set to 38px in codepen)"
+
+    # ensure ramda was loaded before the assets so they can use it.
+    assert dash_duo.find_element("#ramda-test").text == "Hello World"
diff --git a/tests/integration/test_assets/hot_reload.css b/tests/integration/devtools/hr_assets/hot_reload.css
similarity index 100%
rename from tests/integration/test_assets/hot_reload.css
rename to tests/integration/devtools/hr_assets/hot_reload.css
diff --git a/tests/integration/devtools/test_devtools_error_handling.py b/tests/integration/devtools/test_devtools_error_handling.py
index 18d92282..7dc22d38 100644
--- a/tests/integration/devtools/test_devtools_error_handling.py
+++ b/tests/integration/devtools/test_devtools_error_handling.py
@@ -6,7 +6,7 @@ from dash.dependencies import Input, Output
 from dash.exceptions import PreventUpdate
 
 
-def test_dev001_python_errors(dash_duo):
+def test_dveh001_python_errors(dash_duo):
     app = dash.Dash(__name__)
 
     app.layout = html.Div(
@@ -34,7 +34,7 @@ def test_dev001_python_errors(dash_duo):
     dash_duo.percy_snapshot("devtools - python exception - start")
 
     dash_duo.find_element("#python").click()
-    dash_duo.wait_for_text_to_equal(".test-devtools-error-count", "1")
+    dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "1")
     dash_duo.percy_snapshot("devtools - python exception - closed")
 
     dash_duo.find_element(".test-devtools-error-toggle").click()
@@ -42,14 +42,15 @@ def test_dev001_python_errors(dash_duo):
 
     dash_duo.find_element(".test-devtools-error-toggle").click()
     dash_duo.find_element("#python").click()
-    dash_duo.wait_for_text_to_equal(".test-devtools-error-count", "2")
+
+    dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "2")
     dash_duo.percy_snapshot("devtools - python exception - 2 errors")
 
     dash_duo.find_element(".test-devtools-error-toggle").click()
     dash_duo.percy_snapshot("devtools - python exception - 2 errors open")
 
 
-def test_dev002_prevent_update_not_in_error_msg(dash_duo):
+def test_dveh002_prevent_update_not_in_error_msg(dash_duo):
     # raising PreventUpdate shouldn't display the error message
     app = dash.Dash(__name__)
 
@@ -86,13 +87,13 @@ def test_dev002_prevent_update_not_in_error_msg(dash_duo):
 
     # two exceptions fired, but only a single exception appeared in the UI:
     # the prevent default was not displayed
-    dash_duo.wait_for_text_to_equal(".test-devtools-error-count", "1")
+    dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "1")
     dash_duo.percy_snapshot(
         "devtools - prevent update - only a single exception"
     )
 
 
-def test_dev003_validation_errors_in_place(dash_duo):
+def test_dveh003_validation_errors_in_place(dash_duo):
     app = dash.Dash(__name__)
 
     app.layout = html.Div(
@@ -117,14 +118,14 @@ def test_dev003_validation_errors_in_place(dash_duo):
     )
 
     dash_duo.find_element("#button").click()
-    dash_duo.wait_for_text_to_equal(".test-devtools-error-count", "1")
+    dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "1")
     dash_duo.percy_snapshot("devtools - validation exception - closed")
 
     dash_duo.find_element(".test-devtools-error-toggle").click()
     dash_duo.percy_snapshot("devtools - validation exception - open")
 
 
-def test_dev004_validation_errors_creation(dash_duo):
+def test_dveh004_validation_errors_creation(dash_duo):
     app = dash.Dash(__name__)
 
     app.layout = html.Div(
@@ -151,14 +152,14 @@ def test_dev004_validation_errors_creation(dash_duo):
     )
 
     dash_duo.wait_for_element("#button").click()
-    dash_duo.wait_for_text_to_equal(".test-devtools-error-count", "1")
+    dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "1")
     dash_duo.percy_snapshot("devtools - validation creation exception - closed")
 
     dash_duo.find_element(".test-devtools-error-toggle").click()
     dash_duo.percy_snapshot("devtools - validation creation exception - open")
 
 
-def test_dev005_multiple_outputs(dash_duo):
+def test_dveh005_multiple_outputs(dash_duo):
     app = dash.Dash(__name__)
     app.layout = html.Div(
         [
@@ -194,7 +195,7 @@ def test_dev005_multiple_outputs(dash_duo):
     )
 
     dash_duo.find_element("#multi-output").click()
-    dash_duo.wait_for_text_to_equal(".test-devtools-error-count", "1")
+    dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "1")
     dash_duo.percy_snapshot("devtools - multi output python exception - closed")
 
     dash_duo.find_element(".test-devtools-error-toggle").click()
diff --git a/tests/integration/devtools/test_devtools_ui.py b/tests/integration/devtools/test_devtools_ui.py
index b65ca3ec..d9589b71 100644
--- a/tests/integration/devtools/test_devtools_ui.py
+++ b/tests/integration/devtools/test_devtools_ui.py
@@ -1,11 +1,10 @@
 import dash_core_components as dcc
 import dash_html_components as html
 import dash
-
 import dash.testing.wait as wait
 
 
-def test_dev020_disable_props_check_config(dash_duo):
+def test_dvui001_disable_props_check_config(dash_duo):
     app = dash.Dash(__name__)
     app.layout = html.Div(
         [
@@ -37,7 +36,7 @@ def test_dev020_disable_props_check_config(dash_duo):
     )
 
 
-def test_dev021_disable_ui_config(dash_duo):
+def test_dvui002_disable_ui_config(dash_duo):
     app = dash.Dash(__name__)
     app.layout = html.Div(
         [
diff --git a/tests/integration/devtools/test_hot_reload.py b/tests/integration/devtools/test_hot_reload.py
new file mode 100644
index 00000000..c1119e60
--- /dev/null
+++ b/tests/integration/devtools/test_hot_reload.py
@@ -0,0 +1,47 @@
+import os
+import textwrap
+import dash_html_components as html
+import dash
+
+
+def test_dvhr001_hot_reload(dash_duo):
+    app = dash.Dash(__name__, assets_folder="hr_assets")
+    app.layout = html.Div([html.H3("Hot reload")], id="hot-reload-content")
+
+    dash_duo.start_app_server(
+        app,
+        dev_tools_hot_reload=True,
+        dev_tools_hot_reload_interval=100,
+        dev_tools_hot_reload_max_retry=30,
+    )
+
+    # default overload color is blue
+    dash_duo.wait_for_style_to_equal(
+        "#hot-reload-content", "background-color", "rgba(0, 0, 255, 1)"
+    )
+
+    hot_reload_file = os.path.join(
+        os.path.dirname(__file__), "hr_assets", "hot_reload.css"
+    )
+    with open(hot_reload_file, "r+") as fp:
+        old_content = fp.read()
+        fp.truncate(0)
+        fp.seek(0)
+        fp.write(
+            textwrap.dedent(
+                """
+        #hot-reload-content {
+            background-color: red;
+        }
+        """
+            )
+        )
+
+    try:
+        # red is live changed during the test execution
+        dash_duo.wait_for_style_to_equal(
+            "#hot-reload-content", "background-color", "rgba(255, 0, 0, 1)"
+        )
+    finally:
+        with open(hot_reload_file, "w") as f:
+            f.write(old_content)
diff --git a/tests/integration/devtools/test_props_check.py b/tests/integration/devtools/test_props_check.py
index 57e075e2..a47054df 100644
--- a/tests/integration/devtools/test_props_check.py
+++ b/tests/integration/devtools/test_props_check.py
@@ -3,10 +3,8 @@ import dash_html_components as html
 import dash
 from dash.dependencies import Input, Output
 
-from selenium.common.exceptions import TimeoutException
 
-
-def test_dev100_prop_check_errors_with_path(dash_duo):
+def test_dvpc001_prop_check_errors_with_path(dash_duo):
     app = dash.Dash(__name__)
 
     test_cases = {
diff --git a/tests/integration/test_assets/initial_state_dash_app_content.html b/tests/integration/renderer/initial_state_dash_app_content.html
similarity index 100%
rename from tests/integration/test_assets/initial_state_dash_app_content.html
rename to tests/integration/renderer/initial_state_dash_app_content.html
diff --git a/tests/integration/renderer/test_dependencies.py b/tests/integration/renderer/test_dependencies.py
new file mode 100644
index 00000000..5b4a8e12
--- /dev/null
+++ b/tests/integration/renderer/test_dependencies.py
@@ -0,0 +1,47 @@
+from multiprocessing import Value
+
+import dash_core_components as dcc
+import dash_html_components as html
+import dash
+from dash.dependencies import Input, Output
+
+
+def test_rdd001_dependencies_on_components_that_dont_exist(dash_duo):
+    app = dash.Dash(__name__)
+    app.layout = html.Div(
+        [dcc.Input(id="input", value="initial value"), html.Div(id="output-1")]
+    )
+
+    output_1_call_count = Value("i", 0)
+
+    @app.callback(Output("output-1", "children"), [Input("input", "value")])
+    def update_output(value):
+        output_1_call_count.value += 1
+        return value
+
+    # callback for component that doesn't yet exist in the dom
+    # in practice, it might get added by some other callback
+    app.config.supress_callback_exceptions = True
+    output_2_call_count = Value("i", 0)
+
+    @app.callback(Output("output-2", "children"), [Input("input", "value")])
+    def update_output_2(value):
+        output_2_call_count.value += 1
+        return value
+
+    dash_duo.start_app_server(app)
+
+    assert dash_duo.find_element("#output-1").text == "initial value"
+    assert output_1_call_count.value == 1 and output_2_call_count.value == 0
+    dash_duo.percy_snapshot(name="dependencies")
+
+    dash_duo.find_element("#input").send_keys("a")
+    assert dash_duo.find_element("#output-1").text == "initial valuea"
+
+    assert output_1_call_count.value == 2 and output_2_call_count.value == 0
+
+    rqs = dash_duo.redux_state_rqs
+    assert len(rqs) == 1
+    assert rqs[0]["controllerId"] == "output-1.children" and not rqs[0]['rejected']
+
+    assert dash_duo.get_logs() == []
diff --git a/tests/integration/renderer/test_due_diligence.py b/tests/integration/renderer/test_due_diligence.py
new file mode 100644
index 00000000..ec830ed6
--- /dev/null
+++ b/tests/integration/renderer/test_due_diligence.py
@@ -0,0 +1,114 @@
+import json
+import os
+import string
+
+from bs4 import BeautifulSoup
+import requests
+
+import plotly
+import dash_html_components as html
+import dash
+
+
+def test_rddd001_initial_state(dash_duo):
+    app = dash.Dash(__name__)
+    my_class_attrs = {
+        "id": "p.c.4",
+        "className": "my-class",
+        "title": "tooltip",
+        "style": {"color": "red", "fontSize": 30},
+    }
+    # fmt:off
+    app.layout = html.Div([
+        'Basic string',
+        3.14,
+        True,
+        None,
+        html.Div('Child div with basic string', **my_class_attrs),
+        html.Div(id='p.c.5'),
+        html.Div([
+            html.Div('Grandchild div', id='p.c.6.p.c.0'),
+            html.Div([
+                html.Div('Great grandchild', id='p.c.6.p.c.1.p.c.0'),
+                3.14159,
+                'another basic string'
+            ], id='p.c.6.p.c.1'),
+            html.Div([
+                html.Div(
+                    html.Div([
+                        html.Div([
+                            html.Div(
+                                id='p.c.6.p.c.2.p.c.0.p.c.p.c.0.p.c.0'
+                            ),
+                            '',
+                            html.Div(
+                                id='p.c.6.p.c.2.p.c.0.p.c.p.c.0.p.c.2'
+                            )
+                        ], id='p.c.6.p.c.2.p.c.0.p.c.p.c.0')
+                    ], id='p.c.6.p.c.2.p.c.0.p.c'),
+                    id='p.c.6.p.c.2.p.c.0'
+                )
+            ], id='p.c.6.p.c.2')
+        ], id='p.c.6')
+    ])
+    # fmt:on
+
+    dash_duo.start_app_server(app)
+
+    # Note: this .html file shows there's no undo/redo button by default
+    with open(
+        os.path.join(
+            os.path.dirname(__file__), "initial_state_dash_app_content.html"
+        )
+    ) as fp:
+        expected_dom = BeautifulSoup(fp.read().strip(), "lxml")
+
+    fetched_dom = BeautifulSoup(
+        dash_duo.find_element(dash_duo.dash_entry_locator).get_attribute(
+            "outerHTML"
+        ),
+        "lxml",
+    )
+
+    assert (
+        fetched_dom.decode() == expected_dom.decode()
+    ), "the fetching rendered dom is expected"
+
+    assert (
+        dash_duo.get_logs() == []
+    ), "Check that no errors or warnings were displayed"
+
+    assert dash_duo.driver.execute_script(
+        "return JSON.parse(JSON.stringify("
+        "window.store.getState().layout"
+        "))"
+    ) == json.loads(
+        json.dumps(app.layout, cls=plotly.utils.PlotlyJSONEncoder)
+    ), "the state layout is identical to app.layout"
+
+    r = requests.get("{}/_dash-dependencies".format(dash_duo.server_url))
+    assert r.status_code == 200
+    assert (
+        r.json() == []
+    ), "no dependencies present in app as no callbacks are defined"
+
+    assert dash_duo.redux_state_paths == {
+        abbr: [
+            int(token)
+            if token in string.digits
+            else token.replace("p", "props").replace("c", "children")
+            for token in abbr.split(".")
+        ]
+        for abbr in (
+            child.get("id")
+            for child in fetched_dom.find(id="react-entry-point").findChildren(
+                id=True
+            )
+        )
+    }, "paths should reflect to the component hierarchy"
+
+    rqs = dash_duo.redux_state_rqs
+    assert not rqs, "no callback => no requestQueue"
+
+    dash_duo.percy_snapshot(name="layout")
+    assert dash_duo.get_logs() == [], "console has no errors"
diff --git a/tests/integration/renderer/test_state_and_input.py b/tests/integration/renderer/test_state_and_input.py
new file mode 100644
index 00000000..e422602a
--- /dev/null
+++ b/tests/integration/renderer/test_state_and_input.py
@@ -0,0 +1,113 @@
+from multiprocessing import Value
+import time
+import dash_html_components as html
+import dash_core_components as dcc
+import dash
+from dash.dependencies import Input, Output, State
+import dash.testing.wait as wait
+
+
+def test_rdsi001_state_and_inputs(dash_duo):
+    app = dash.Dash(__name__)
+    app.layout = html.Div(
+        [
+            dcc.Input(value="Initial Input", id="input"),
+            dcc.Input(value="Initial State", id="state"),
+            html.Div(id="output"),
+        ]
+    )
+
+    call_count = Value("i", 0)
+
+    @app.callback(
+        Output("output", "children"),
+        [Input("input", "value")],
+        [State("state", "value")],
+    )
+    def update_output(input, state):
+        call_count.value += 1
+        return 'input="{}", state="{}"'.format(input, state)
+
+    dash_duo.start_app_server(app)
+
+    input_ = lambda: dash_duo.find_element("#input")
+    output_ = lambda: dash_duo.find_element("#output")
+
+    assert (
+        output_().text == 'input="Initial Input", state="Initial State"'
+    ), "callback gets called with initial input"
+
+    input_().send_keys("x")
+    wait.until(lambda: call_count.value == 2, timeout=1)
+    assert (
+        output_().text == 'input="Initial Inputx", state="Initial State"'
+    ), "output get updated with key `x`"
+
+    dash_duo.find_element("#state").send_keys("z")
+    time.sleep(0.5)
+    assert call_count.value == 2, "state not trigger callback with 0.5 wait"
+    assert (
+        output_().text == 'input="Initial Inputx", state="Initial State"'
+    ), "output remains the same as last step"
+
+    input_().send_keys("y")
+    wait.until(lambda: call_count.value == 3, timeout=1)
+    assert (
+        output_().text == 'input="Initial Inputxy", state="Initial Statez"'
+    ), "both input and state value get updated by input callback"
+
+
+def test_rdsi002_event_properties_state_and_inputs(dash_duo):
+    app = dash.Dash(__name__)
+    app.layout = html.Div(
+        [
+            html.Button("Click Me", id="button"),
+            dcc.Input(value="Initial Input", id="input"),
+            dcc.Input(value="Initial State", id="state"),
+            html.Div(id="output"),
+        ]
+    )
+
+    call_count = Value("i", 0)
+
+    @app.callback(
+        Output("output", "children"),
+        [Input("input", "value"), Input("button", "n_clicks")],
+        [State("state", "value")],
+    )
+    def update_output(input, n_clicks, state):
+        call_count.value += 1
+        return 'input="{}", state="{}"'.format(input, state)
+
+    dash_duo.start_app_server(app)
+
+    btn = lambda: dash_duo.find_element("#button")
+    output = lambda: dash_duo.find_element("#output")
+
+    assert (
+        output().text == 'input="Initial Input", state="Initial State"'
+    ), "callback gets called with initial input"
+
+    btn().click()
+    wait.until(lambda: call_count.value == 2, timeout=1)
+    assert (
+        output().text == 'input="Initial Input", state="Initial State"'
+    ), "button click doesn't count on output"
+
+    dash_duo.find_element("#input").send_keys("x")
+    wait.until(lambda: call_count.value == 3, timeout=1)
+
+    assert (
+        output().text == 'input="Initial Inputx", state="Initial State"'
+    ), "output get updated with key `x`"
+
+    dash_duo.find_element("#state").send_keys("z")
+    time.sleep(0.5)
+    assert call_count.value == 3, "state not trigger callback with 0.5 wait"
+    assert (
+        output().text == 'input="Initial Inputx", state="Initial State"'
+    ), "output remains the same as last step"
+
+    btn().click()
+    wait.until(lambda: call_count.value == 4, timeout=1)
+    assert output().text == 'input="Initial Inputx", state="Initial Statez"'
diff --git a/tests/integration/test_render.py b/tests/integration/test_render.py
index 21e188d1..618ef97c 100644
--- a/tests/integration/test_render.py
+++ b/tests/integration/test_render.py
@@ -1,11 +1,7 @@
 # -*- coding: UTF-8 -*-
-import os
-import textwrap
-
-import pytest
 import dash
 from dash import Dash
-from dash.dependencies import Input, Output, State
+from dash.dependencies import Input, Output
 from dash.exceptions import PreventUpdate
 from dash.development.base_component import Component
 import dash_html_components as html
@@ -36,23 +32,6 @@ class Tests(IntegrationTests):
     def setUp(self):
         pass
 
-    def wait_for_style_to_equal(self, selector, style, assertion_style, timeout=TIMEOUT):
-        start = time.time()
-        exception = Exception('Time ran out, {} on {} not found'.format(
-            assertion_style, selector))
-        while time.time() < start + timeout:
-            element = self.wait_for_element_by_css_selector(selector)
-            try:
-                self.assertEqual(
-                    assertion_style, element.value_of_css_property(style))
-            except Exception as e:
-                exception = e
-            else:
-                return
-            time.sleep(0.1)
-
-        raise exception
-
     def wait_for_element_by_css_selector(self, selector, timeout=TIMEOUT):
         return WebDriverWait(self.driver, timeout).until(
             EC.presence_of_element_located((By.CSS_SELECTOR, selector)),
@@ -108,109 +87,6 @@ class Tests(IntegrationTests):
         if expected_length is not None:
             self.assertEqual(len(request_queue), expected_length)
 
-    def test_initial_state(self):
-        app = Dash(__name__)
-        my_class_attrs = {
-            'id': 'p.c.4',
-            'className': 'my-class',
-            'title': 'tooltip',
-            'style': {'color': 'red', 'fontSize': 30},
-        }
-        app.layout = html.Div([
-            'Basic string',
-            3.14,
-            True,
-            None,
-            html.Div('Child div with basic string', **my_class_attrs),
-            html.Div(id='p.c.5'),
-            html.Div([
-                html.Div('Grandchild div', id='p.c.6.p.c.0'),
-                html.Div([
-                    html.Div('Great grandchild', id='p.c.6.p.c.1.p.c.0'),
-                    3.14159,
-                    'another basic string'
-                ], id='p.c.6.p.c.1'),
-                html.Div([
-                    html.Div(
-                        html.Div([
-                            html.Div([
-                                html.Div(
-                                    id='p.c.6.p.c.2.p.c.0.p.c.p.c.0.p.c.0'
-                                ),
-                                '',
-                                html.Div(
-                                    id='p.c.6.p.c.2.p.c.0.p.c.p.c.0.p.c.2'
-                                )
-                            ], id='p.c.6.p.c.2.p.c.0.p.c.p.c.0')
-                        ], id='p.c.6.p.c.2.p.c.0.p.c'),
-                        id='p.c.6.p.c.2.p.c.0'
-                    )
-                ], id='p.c.6.p.c.2')
-            ], id='p.c.6')
-        ])
-
-        self.startServer(app)
-        el = self.wait_for_element_by_css_selector('#react-entry-point')
-
-        # Note: this .html file shows there's no undo/redo button by default
-        _dash_app_content_html = os.path.join(
-            os.path.dirname(__file__),
-            'test_assets', 'initial_state_dash_app_content.html')
-        with open(_dash_app_content_html) as fp:
-            rendered_dom = BeautifulSoup(fp.read().strip(), 'lxml')
-        fetched_dom = BeautifulSoup(el.get_attribute('outerHTML'), 'lxml')
-
-        self.assertEqual(
-            fetched_dom.decode(), rendered_dom.decode(),
-            "the fetching rendered dom is expected ")
-
-        # Check that no errors or warnings were displayed
-        self.assertTrue(self.is_console_clean())
-
-        self.assertEqual(
-            self.driver.execute_script(
-                'return JSON.parse(JSON.stringify('
-                'window.store.getState().layout'
-                '))'
-            ),
-            json.loads(
-                json.dumps(app.layout, cls=plotly.utils.PlotlyJSONEncoder)),
-            "the state layout is identical to app.layout"
-        )
-
-        r = requests.get('http://localhost:8050/_dash-dependencies')
-        self.assertEqual(r.status_code, 200)
-        self.assertEqual(
-            r.json(), [],
-            "no dependencies present in app as no callbacks are defined"
-
-        )
-
-        self.assertEqual(
-            self.driver.execute_script(
-                'return window.store.getState().paths'
-            ),
-            {
-                abbr: [
-                    int(token) if token in string.digits
-                    else token.replace('p', 'props').replace('c', 'children')
-                    for token in abbr.split('.')
-                ]
-                for abbr in (
-                    child.get('id')
-                    for child in fetched_dom.find(
-                        id='react-entry-point').findChildren(id=True)
-                )
-            },
-            "paths should refect to the component hierarchy"
-        )
-
-        self.request_queue_assertions(0)
-
-        self.percy_snapshot(name='layout')
-
-        self.assertTrue(self.is_console_clean())
-
     def click_undo(self):
         undo_selector = '._dash-undo-redo span:first-child div:last-child'
         undo = self.wait_for_element_by_css_selector(undo_selector)
@@ -761,54 +637,6 @@ class Tests(IntegrationTests):
         chapter1_assertions()
         self.percy_snapshot(name='chapter-1-again')
 
-    def test_dependencies_on_components_that_dont_exist(self):
-        app = Dash(__name__)
-        app.layout = html.Div([
-            dcc.Input(id='input', value='initial value'),
-            html.Div(id='output-1')
-        ])
-
-        # standard callback
-        output_1_call_count = Value('i', 0)
-
-        @app.callback(Output('output-1', 'children'), [Input('input', 'value')])
-        def update_output(value):
-            output_1_call_count.value += 1
-            return value
-
-        # callback for component that doesn't yet exist in the dom
-        # in practice, it might get added by some other callback
-        app.config.supress_callback_exceptions = True
-        output_2_call_count = Value('i', 0)
-
-        @app.callback(
-            Output('output-2', 'children'),
-            [Input('input', 'value')]
-        )
-        def update_output_2(value):
-            output_2_call_count.value += 1
-            return value
-
-        self.startServer(app)
-
-        self.wait_for_text_to_equal('#output-1', 'initial value')
-        self.percy_snapshot(name='dependencies')
-        time.sleep(1.0)
-        self.assertEqual(output_1_call_count.value, 1)
-        self.assertEqual(output_2_call_count.value, 0)
-
-        input = self.driver.find_element_by_id('input')
-
-        input.send_keys('a')
-        self.wait_for_text_to_equal('#output-1', 'initial valuea')
-        time.sleep(1.0)
-        self.assertEqual(output_1_call_count.value, 2)
-        self.assertEqual(output_2_call_count.value, 0)
-
-        self.request_queue_assertions(2)
-
-        self.assertTrue(self.is_console_clean())
-
     def test_event_properties(self):
         app = Dash(__name__)
         app.layout = html.Div([
@@ -836,205 +664,6 @@ class Tests(IntegrationTests):
         wait_for(lambda: output().text == 'Click')
         self.assertEqual(call_count.value, 1)
 
-    def test_event_properties_and_state(self):
-        app = Dash(__name__)
-        app.layout = html.Div([
-            html.Button('Click Me', id='button'),
-            dcc.Input(value='Initial State', id='state'),
-            html.Div(id='output')
-        ])
-
-        call_count = Value('i', 0)
-
-        @app.callback(Output('output', 'children'),
-                      [Input('button', 'n_clicks')],
-                      [State('state', 'value')])
-        def update_output(n_clicks, value):
-            if(not n_clicks):
-                raise PreventUpdate
-            call_count.value += 1
-            return value
-
-        self.startServer(app)
-        btn = self.driver.find_element_by_id('button')
-        output = lambda: self.driver.find_element_by_id('output')
-
-        self.assertEqual(call_count.value, 0)
-        self.assertEqual(output().text, '')
-
-        btn.click()
-        wait_for(lambda: output().text == 'Initial State')
-        self.assertEqual(call_count.value, 1)
-
-        # Changing state shouldn't fire the callback
-        state = self.driver.find_element_by_id('state')
-        state.send_keys('x')
-        time.sleep(0.75)
-        self.assertEqual(output().text, 'Initial State')
-        self.assertEqual(call_count.value, 1)
-
-        btn.click()
-        wait_for(lambda: output().text == 'Initial Statex')
-        self.assertEqual(call_count.value, 2)
-
-    def test_event_properties_state_and_inputs(self):
-        app = Dash(__name__)
-        app.layout = html.Div([
-            html.Button('Click Me', id='button'),
-            dcc.Input(value='Initial Input', id='input'),
-            dcc.Input(value='Initial State', id='state'),
-            html.Div(id='output')
-        ])
-
-        call_count = Value('i', 0)
-
-        @app.callback(Output('output', 'children'),
-                      [Input('input', 'value'), Input('button', 'n_clicks')],
-                      [State('state', 'value')])
-        def update_output(input, n_clicks, state):
-            call_count.value += 1
-            return 'input="{}", state="{}"'.format(input, state)
-
-        self.startServer(app)
-        btn = lambda: self.driver.find_element_by_id('button')
-        output = lambda: self.driver.find_element_by_id('output')
-        input = lambda: self.driver.find_element_by_id('input')
-        state = lambda: self.driver.find_element_by_id('state')
-
-        # callback gets called with initial input
-        self.assertEqual(
-            output().text,
-            'input="Initial Input", state="Initial State"'
-        )
-
-        btn().click()
-        wait_for(lambda: call_count.value == 2)
-        self.assertEqual(
-            output().text,
-            'input="Initial Input", state="Initial State"')
-
-        input().send_keys('x')
-        wait_for(lambda: call_count.value == 3)
-        self.assertEqual(
-            output().text,
-            'input="Initial Inputx", state="Initial State"')
-
-        state().send_keys('x')
-        time.sleep(0.75)
-        self.assertEqual(call_count.value, 3)
-        self.assertEqual(
-            output().text,
-            'input="Initial Inputx", state="Initial State"')
-
-        btn().click()
-        wait_for(lambda: call_count.value == 4)
-        self.assertEqual(
-            output().text,
-            'input="Initial Inputx", state="Initial Statex"')
-
-    @pytest.mark.flakey
-    def test_state_and_inputs(self):
-        app = Dash(__name__)
-        app.layout = html.Div([
-            dcc.Input(value='Initial Input', id='input'),
-            dcc.Input(value='Initial State', id='state'),
-            html.Div(id='output')
-        ])
-
-        call_count = Value('i', 0)
-
-        @app.callback(
-            Output('output', 'children'), [Input('input', 'value')],
-            [State('state', 'value')])
-        def update_output(input, state):
-            call_count.value += 1
-            return 'input="{}", state="{}"'.format(input, state)
-
-        self.startServer(app)
-        output = lambda: self.driver.find_element_by_id('output')
-        input = lambda: self.driver.find_element_by_id('input')
-        state = lambda: self.driver.find_element_by_id('state')
-
-        # callback gets called with initial input
-        time.sleep(0.5)
-        self.assertEqual(
-            output().text,
-            'input="Initial Input", state="Initial State"'
-        )
-
-        input().send_keys('x')
-        wait_for(lambda: call_count.value == 2)
-        self.assertEqual(
-            output().text,
-            'input="Initial Inputx", state="Initial State"')
-
-        state().send_keys('x')
-        time.sleep(0.75)
-        self.assertEqual(call_count.value, 2)
-        self.assertEqual(
-            output().text,
-            'input="Initial Inputx", state="Initial State"')
-
-        input().send_keys('y')
-        wait_for(lambda: call_count.value == 3)
-        self.assertEqual(
-            output().text,
-            'input="Initial Inputxy", state="Initial Statex"')
-
-    def test_event_properties_creating_inputs(self):
-        app = Dash(__name__)
-
-        ids = {
-            k: k for k in ['button', 'button-output', 'input', 'input-output']
-        }
-        app.layout = html.Div([
-            html.Button(id=ids['button']),
-            html.Div(id=ids['button-output'])
-        ])
-        for script in dcc._js_dist:
-            script['namespace'] = 'dash_core_components'
-            app.scripts.append_script(script)
-
-        app.config.supress_callback_exceptions = True
-        call_counts = {
-            ids['input-output']: Value('i', 0),
-            ids['button-output']: Value('i', 0)
-        }
-
-        @app.callback(
-            Output(ids['button-output'], 'children'),
-            [Input(ids['button'], 'n_clicks')])
-        def display(n_clicks):
-            if(not n_clicks):
-                raise PreventUpdate
-            call_counts['button-output'].value += 1
-            return html.Div([
-                dcc.Input(id=ids['input'], value='initial state'),
-                html.Div(id=ids['input-output'])
-            ])
-
-        @app.callback(
-            Output(ids['input-output'], 'children'),
-            [Input(ids['input'], 'value')])
-        def update_input(value):
-            call_counts['input-output'].value += 1
-            return 'Input is equal to "{}"'.format(value)
-
-        self.startServer(app)
-        time.sleep(1)
-        self.assertEqual(call_counts[ids['button-output']].value, 0)
-        self.assertEqual(call_counts[ids['input-output']].value, 0)
-
-        btn = lambda: self.driver.find_element_by_id(ids['button'])
-        output = lambda: self.driver.find_element_by_id(ids['input-output'])
-        with self.assertRaises(Exception):
-            output()
-
-        btn().click()
-        wait_for(lambda: call_counts[ids['input-output']].value == 1)
-        self.assertEqual(call_counts[ids['button-output']].value, 1)
-        self.assertEqual(output().text, 'Input is equal to "initial state"')
-
     def test_chained_dependencies_direct_lineage(self):
         app = Dash(__name__)
         app.layout = html.Div([
@@ -1914,45 +1543,6 @@ class Tests(IntegrationTests):
 
         self.wait_for_text_to_equal('#graph2_info', json.dumps(graph_2_expected_clickdata))
 
-    def test_hot_reload(self):
-        app = dash.Dash(__name__, assets_folder='test_assets')
-
-        app.layout = html.Div([
-            html.H3('Hot reload')
-        ], id='hot-reload-content')
-
-        self.startServer(
-            app,
-            dev_tools_hot_reload=True,
-            dev_tools_hot_reload_interval=100,
-            dev_tools_hot_reload_max_retry=30,
-        )
-
-        hot_reload_file = os.path.join(
-            os.path.dirname(__file__), 'test_assets', 'hot_reload.css')
-
-        self.wait_for_style_to_equal(
-            '#hot-reload-content', 'background-color', 'rgba(0, 0, 255, 1)'
-        )
-
-        with open(hot_reload_file, 'r+') as f:
-            old_content = f.read()
-            f.truncate(0)
-            f.seek(0)
-            f.write(textwrap.dedent('''
-            #hot-reload-content {
-                background-color: red;
-            }
-            '''))
-
-        try:
-            self.wait_for_style_to_equal(
-                '#hot-reload-content', 'background-color', 'rgba(255, 0, 0, 1)'
-            )
-        finally:
-            with open(hot_reload_file, 'w') as f:
-                f.write(old_content)
-
     def test_single_input_multi_outputs_on_multiple_components(self):
         call_count = Value('i')
 
