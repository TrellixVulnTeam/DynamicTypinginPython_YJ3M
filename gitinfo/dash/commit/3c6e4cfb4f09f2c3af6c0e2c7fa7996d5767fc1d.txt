commit 3c6e4cfb4f09f2c3af6c0e2c7fa7996d5767fc1d
Author: Ryan Marren <rymarr@tuta.io>
Date:   Sat Jul 14 21:07:53 2018 -0400

    More semantic default arugments objects

diff --git a/dash/development/base_component.py b/dash/development/base_component.py
index f0f48de7..457be6b8 100644
--- a/dash/development/base_component.py
+++ b/dash/development/base_component.py
@@ -52,6 +52,24 @@ def _explicitize_args(func):
 
 
 class Component(collections.MutableMapping):
+    class _UNDEFINED(object):
+        def __repr__(self):
+            return 'undefined'
+
+        def __str__(self):
+            return 'undefined'
+
+    UNDEFINED = _UNDEFINED()
+
+    class _REQUIRED(object):
+        def __repr__(self):
+            return 'required'
+
+        def __str__(self):
+            return 'required'
+
+    REQUIRED = _REQUIRED()
+
     def __init__(self, **kwargs):
         # pylint: disable=super-init-not-called
         for k, v in list(kwargs.items()):
@@ -341,7 +359,12 @@ def generate_class_string(typename, props, description, namespace):
         default_argtext = ""
         argtext = '**args'
     default_argtext += ", ".join(
-        ['{:s}=None'.format(p) for p in prop_keys if not p.endswith("-*")]
+        [('{:s}=Component.REQUIRED'.format(p)
+          if props[p]['required'] else
+          '{:s}=Component.UNDEFINED'.format(p))
+         for p in prop_keys
+         if not p.endswith("-*") and
+         p not in ['dashEvents', 'fireEvent', 'setProps']]
     )
 
     required_args = required_props(props)
diff --git a/tests/development/metadata_test.py b/tests/development/metadata_test.py
index 40f38c0d..de56679f 100644
--- a/tests/development/metadata_test.py
+++ b/tests/development/metadata_test.py
@@ -38,7 +38,7 @@ Those keys have the following types:
 
 Available events: 'restyle', 'relayout', 'click'"""
     @_explicitize_args
-    def __init__(self, children=None, optionalArray=None, optionalBool=None, optionalFunc=None, optionalNumber=None, optionalObject=None, optionalString=None, optionalSymbol=None, optionalNode=None, optionalElement=None, optionalMessage=None, optionalEnum=None, optionalUnion=None, optionalArrayOf=None, optionalObjectOf=None, optionalObjectWithShapeAndNestedDescription=None, optionalAny=None, customProp=None, customArrayProp=None, id=None, dashEvents=None, **kwargs):
+    def __init__(self, children=None, optionalArray=Component.UNDEFINED, optionalBool=Component.UNDEFINED, optionalFunc=Component.UNDEFINED, optionalNumber=Component.UNDEFINED, optionalObject=Component.UNDEFINED, optionalString=Component.UNDEFINED, optionalSymbol=Component.UNDEFINED, optionalNode=Component.UNDEFINED, optionalElement=Component.UNDEFINED, optionalMessage=Component.UNDEFINED, optionalEnum=Component.UNDEFINED, optionalUnion=Component.UNDEFINED, optionalArrayOf=Component.UNDEFINED, optionalObjectOf=Component.UNDEFINED, optionalObjectWithShapeAndNestedDescription=Component.UNDEFINED, optionalAny=Component.UNDEFINED, customProp=Component.UNDEFINED, customArrayProp=Component.UNDEFINED, id=Component.UNDEFINED, **kwargs):
         self._prop_names = ['children', 'optionalArray', 'optionalBool', 'optionalNumber', 'optionalObject', 'optionalString', 'optionalNode', 'optionalElement', 'optionalEnum', 'optionalUnion', 'optionalArrayOf', 'optionalObjectOf', 'optionalObjectWithShapeAndNestedDescription', 'optionalAny', 'customProp', 'customArrayProp', 'data-*', 'aria-*', 'id']
         self._type = 'Table'
         self._namespace = 'TableComponents'
diff --git a/tests/development/test_base_component.py b/tests/development/test_base_component.py
index 71bf32e0..625e5329 100644
--- a/tests/development/test_base_component.py
+++ b/tests/development/test_base_component.py
@@ -713,8 +713,7 @@ class TestGenerateClass(unittest.TestCase):
              'optionalAny',
              'customProp',
              'customArrayProp',
-             'id',
-             'dashEvents'] if hasattr(inspect, 'signature') else []
+             'id'] if hasattr(inspect, 'signature') else []
 
 
         )
@@ -726,14 +725,11 @@ class TestGenerateClass(unittest.TestCase):
             inspect.getargspec(__init__func).keywords,
             'kwargs'
         )
-        self.assertEqual(
-            inspect.getargspec(__init__func).defaults,
-            (None, None, None, None, None,
-             None, None, None, None, None,
-             None, None, None, None, None,
-             None, None, None,
-             None, None, None) if hasattr(inspect, 'signature') else None
-        )
+        if hasattr(inspect, 'signature'):
+            self.assertEqual(
+                [str(x) for x in inspect.getargspec(__init__func).defaults],
+                ['None'] + ['undefined'] * 19
+            )
 
     def test_required_props(self):
         with self.assertRaises(Exception):
