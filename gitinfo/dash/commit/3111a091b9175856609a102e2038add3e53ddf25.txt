commit 3111a091b9175856609a102e2038add3e53ddf25
Author: Ryan Patrick Kyle <ryan@plot.ly>
Date:   Wed Jun 19 19:58:46 2019 -0400

    :sparkles: add component helpers to internal.R

diff --git a/dash/development/_r_components_generation.py b/dash/development/_r_components_generation.py
index 6281f3b8..0047dcae 100644
--- a/dash/development/_r_components_generation.py
+++ b/dash/development/_r_components_generation.py
@@ -163,7 +163,7 @@ def generate_class_string(name, props, project_shortname, prefix):
     if any("-*" in key for key in prop_keys):
         wildcards = ", ..."
         wildcard_declaration = (
-            "\n    wildcard_names = names(dash_assert_valid_wildcards(...))\n"
+            "\n    wildcard_names = names(dash::dash_assert_valid_wildcards(...))\n"
         )
         wildcard_names = ", wildcard_names"
 
@@ -416,6 +416,33 @@ def write_js_metadata(pkg_data, project_shortname):
     )
     file_name = "internal.R"
 
+    # import dash_filter_null and dash_assert_valid_wildcards
+    component_helpers = """
+dash_filter_null <- function (x) 
+{
+    if (length(x) == 0 || !is.list(x)) 
+        return(x)
+    x[!vapply(x, is.null, logical(1))]
+}
+
+dash_assert_valid_wildcards <- function (attrib = list("data", "aria"), ...) 
+{
+    args <- list(...)
+    validation_results <- lapply(names(args), function(x) {
+        grepl(paste0("^", attrib, "-[a-zA-Z0-9]{1,}$", collapse = "|"), 
+            x)
+    })
+    if (FALSE %in% validation_results) {
+        stop(sprintf("The following wildcards are not currently valid in Dash: '%s'", 
+            paste(names(args)[grepl(FALSE, unlist(validation_results))], 
+                collapse = ", ")), call. = FALSE)
+    }
+    else {
+        return(args)
+    }
+}
+"""    # noqa:E501
+
     # the R source directory for the package won't exist on first call
     # create the R directory if it is missing
     if not os.path.exists("R"):
@@ -424,6 +451,7 @@ def write_js_metadata(pkg_data, project_shortname):
     file_path = os.path.join("R", file_name)
     with open(file_path, "w") as f:
         f.write(function_string)
+        f.write(component_helpers)
 
     # now copy over all JS dependencies from the (Python) components dir
     # the inst/lib directory for the package won't exist on first call
