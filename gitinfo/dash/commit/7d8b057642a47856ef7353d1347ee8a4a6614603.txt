commit 7d8b057642a47856ef7353d1347ee8a4a6614603
Author: byron <byron@plot.ly>
Date:   Fri Sep 6 16:56:04 2019 -0400

    :wrench: :pencil: document the process

diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 851d7ace..adf2706d 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -38,7 +38,7 @@ As of Dash 1.2, the renderer bundle and its peer dependencies can be packed and
 3.  `renderer bundles` parses the locked version JSON, copies all the peer dependencies into dash_renderer folder, bundles the renderer assets, and generates an `__init__.py` to map all the resources. There are also a list of helpful `scripts` property defined in `package.json` you might need to do some handy tasks like linting, syntax format with prettier, etc.
 4.  `renderer digest` computes the content hash of each asset in `dash_renderer` folder, prints out the result in logs, and dumps into a JSON file `digest.json`. Use this when you have a doubt about the current assets in `dash_renderer`, and compare it with previous result in one shot by this command.
 5.  `renderer build` runs 1, 2, 3, 4 in sequence as a complete build process from scratch.
-6.  `renderer watch` runs the webpack in watch mode, so any source code change triggers a rebuild. Use this if you are actively updating renderer code and you want to test your changes immediately.
+6.  `renderer build local` runs the same oreder as in 5 except the source maps are generated for debugging purpose, you also need to install dash-renderer with editable mode: `pip install -e .`.
 
 When a change in renderer code doesn't reflect in your browser as expected, this could be: confused bundle generation, caching issue in a browser, python package not in `editable` mode, etc. The new tool reduces the risk of bundle assets by adding the digest to help compare asset changes.
 
diff --git a/dash-renderer/CHANGELOG.md b/dash-renderer/CHANGELOG.md
index 1830839c..1bbf2212 100644
--- a/dash-renderer/CHANGELOG.md
+++ b/dash-renderer/CHANGELOG.md
@@ -2,6 +2,11 @@
 All notable changes to this project will be documented in this file.
 This project adheres to [Semantic Versioning](http://semver.org/).
 
+## Unreleased
+
+### Fixed
+- Reduced about 55% of the dash-renderer packages size on **PyPI** by removing the source maps. To do more advanced debugging, the source maps needs to be generated from source code with `npm run build:local` and pip install in editable mode, i.e. `pip install -e .` [#910](https://github.com/plotly/dash/pull/910)
+
 ## [1.0.1] - 2019-08-27
 - Clean all the binary assets in dash-renderer repo, add tool to build all the required bundles from fresh source code to avoid confusion of the assets and improve the release process. [#874](https://github.com/plotly/dash/pull/874)
 
diff --git a/dash-renderer/package.json b/dash-renderer/package.json
index cb2838e5..6cf410bd 100644
--- a/dash-renderer/package.json
+++ b/dash-renderer/package.json
@@ -8,6 +8,7 @@
     "lint:test": "./node_modules/.bin/eslint .",
     "build:js": "webpack --build release",
     "build:dev": "webpack --build local",
+    "build:local": "renderer build local",
     "build": "renderer build",
     "start": "webpack-serve ./webpack.serve.config.js",
     "format": "prettier --config .prettierrc --write \"src/**/*.js\"",
diff --git a/dash/development/build_process.py b/dash/development/build_process.py
index e1e7565a..9745dbf8 100644
--- a/dash/development/build_process.py
+++ b/dash/development/build_process.py
@@ -77,10 +77,10 @@ class BuildProcess(object):
         os.system("npm run build:dev")
 
     @job("run the whole building process in sequence")
-    def build(self):
+    def build(self, build=None):
         self.clean()
         self.npm()
-        self.bundles()
+        self.bundles(build)
         self.digest()
 
     @job("compute the hash digest for assets")
@@ -108,7 +108,7 @@ class BuildProcess(object):
         )
 
     @job("copy and generate the bundles")
-    def bundles(self):
+    def bundles(self, build=None):
         if not os.path.exists(self.build_folder):
             try:
                 os.makedirs(self.build_folder)
@@ -142,9 +142,10 @@ class BuildProcess(object):
                 self._concat(self.build_folder, target),
             )
 
-        logger.info("run `npm run build:js`")
+        _script = 'build:dev' if build == 'local' else 'build:js'
+        logger.info("run `npm run %s`", _script)
         os.chdir(self.main)
-        run_command_with_process("npm run build:js")
+        run_command_with_process("npm run {}".format(_script))
 
         logger.info("generate the `__init__.py` from template and verisons")
         with open(self._concat(self.main, "init.template")) as fp:
