commit 791f03d581119c32db9b353a075fa2f937f14d83
Author: byron <byron@plot.ly>
Date:   Tue May 28 22:32:22 2019 -0400

    :fire: :construction: add pythonpath

diff --git a/.circleci/config.yml b/.circleci/config.yml
index 37007264..e92e89e0 100644
--- a/.circleci/config.yml
+++ b/.circleci/config.yml
@@ -39,24 +39,24 @@ jobs:
           paths:
               - "venv"
 
-      # - run:
-      #     name: ðŸŒ¸ linting
-      #     command: |
-      #       . venv/bin/activate
-      #       pip install -e . --quiet
-      #       pip list | grep dash
-      #       flake8 dash setup.py
-      #       flake8 --ignore=E123,E126,E501,E722,E731,F401,F841,W503,W504 --exclude=metadata_test.py tests
-      #       pylint dash setup.py --rcfile=$PYLINTRC
-      #       pylint tests/unit -d all -e C0410,C0411,C0412,C0413,W0109
-      #       cd dash-renderer && npm install --ignore-scripts && npm run lint:test && npm run format:test
+      - run:
+          name: ðŸŒ¸ linting
+          command: |
+            . venv/bin/activate
+            pip install -e . --quiet
+            pip list | grep dash
+            flake8 dash setup.py
+            flake8 --ignore=E123,E126,E501,E722,E731,F401,F841,W503,W504 --exclude=metadata_test.py tests
+            pylint dash setup.py --rcfile=$PYLINTRC
+            pylint tests/unit -d all -e C0410,C0411,C0412,C0413,W0109
+            cd dash-renderer && npm install --ignore-scripts && npm run lint:test && npm run format:test
 
       - run:
           name: â›‘ Run unit tests
           command: |
             . venv/bin/activate
             mkdir test-reports
-            PYTHONPATH=~/dash pytest --junitxml=test-reports/junit.xml tests/unit
+            PYTHONPATH=~/dash/tests/assets pytest --junitxml=test-reports/junit.xml tests/unit
       - store_test_results:
           path: test-reports
       - store_artifacts:
diff --git a/tests/__init__.py b/tests/__init__.py
deleted file mode 100644
index e69de29b..00000000
diff --git a/tests/dash_apps/simple_app.py b/tests/assets/simple_app.py
similarity index 100%
rename from tests/dash_apps/simple_app.py
rename to tests/assets/simple_app.py
diff --git a/tests/dash_apps/__init__.py b/tests/dash_apps/__init__.py
deleted file mode 100644
index e69de29b..00000000
diff --git a/tests/package.json b/tests/package.json
deleted file mode 100644
index 48a500de..00000000
--- a/tests/package.json
+++ /dev/null
@@ -1,11 +0,0 @@
-{
-  "name": "dash_tests",
-  "version": "1.0.0",
-  "description": "Utilities to help with dash tests",
-  "main": "na",
-  "scripts": {
-    "test": "echo \"Error: no test specified\" && exit 1"
-  },
-  "author": "chris@plot.ly",
-  "license": "ISC"
-}
diff --git a/tests/simple_app.py b/tests/simple_app.py
deleted file mode 100644
index 3e485c08..00000000
--- a/tests/simple_app.py
+++ /dev/null
@@ -1,38 +0,0 @@
-# pylint: disable=missing-docstring
-import dash_core_components as dcc
-import dash_html_components as html
-import dash
-from dash.dependencies import Output, Input
-from dash.exceptions import PreventUpdate
-
-
-app = dash.Dash(__name__)
-
-app.layout = html.Div(
-    [
-        dcc.Input(id="value", placeholder="my-value"),
-        html.Div(["You entered: ", html.Span(id="out")]),
-        html.Button("style-btn", id="style-btn"),
-        html.Div("style-container", id="style-output"),
-    ]
-)
-
-
-@app.callback(Output("out", "children"), [Input("value", "value")])
-def on_value(value):
-    if value is None:
-        raise PreventUpdate
-
-    return value
-
-
-@app.callback(Output("style-output", "style"), [Input("style-btn", "n_clicks")])
-def on_style(value):
-    if value is None:
-        raise PreventUpdate
-
-    return {"padding": "10px"}
-
-
-if __name__ == "__main__":
-    app.run_server(debug=True, port=10850)
diff --git a/tests/unit/development/test_base_component.py b/tests/unit/development/test_base_component.py
index 9d0242df..14059478 100644
--- a/tests/unit/development/test_base_component.py
+++ b/tests/unit/development/test_base_component.py
@@ -48,7 +48,6 @@ def nested_tree():
     return c, c1, c2, c3, c4, c5
 
 
-@pytest.mark.skip(reason='')
 class TestComponent(unittest.TestCase):
     def test_init(self):
         Component(a=3)
@@ -499,7 +498,7 @@ class TestComponent(unittest.TestCase):
 class TestGenerateClassFile(unittest.TestCase):
     def setUp(self):
         json_path = os.path.join(
-            'tests', 'unit', 'dash', 'development', 'metadata_test.json')
+            'tests', 'unit', 'development', 'metadata_test.json')
         with open(json_path) as data_file:
             json_string = data_file.read()
             data = json\
@@ -539,7 +538,7 @@ class TestGenerateClassFile(unittest.TestCase):
 
         # The expected result for both class string and class file generation
         expected_string_path = os.path.join(
-            'tests', 'unit', 'dash', 'development', 'metadata_test.py'
+            'tests', 'unit', 'development', 'metadata_test.py'
         )
         with open(expected_string_path, 'r') as f:
             self.expected_class_string = f.read()
@@ -569,7 +568,7 @@ class TestGenerateClassFile(unittest.TestCase):
 class TestGenerateClass(unittest.TestCase):
     def setUp(self):
         path = os.path.join(
-            'tests', 'unit', 'dash', 'development', 'metadata_test.json')
+            'tests', 'unit', 'development', 'metadata_test.json')
         with open(path) as data_file:
             json_string = data_file.read()
             data = json\
@@ -585,7 +584,7 @@ class TestGenerateClass(unittest.TestCase):
         )
 
         path = os.path.join(
-            'tests', 'unit', 'dash', 'development',
+            'tests', 'unit', 'development',
             'metadata_required_test.json'
         )
         with open(path) as data_file:
@@ -758,7 +757,7 @@ class TestGenerateClass(unittest.TestCase):
 class TestMetaDataConversions(unittest.TestCase):
     def setUp(self):
         path = os.path.join(
-            'tests', 'unit', 'dash', 'development', 'metadata_test.json')
+            'tests', 'unit', 'development', 'metadata_test.json')
         with open(path) as data_file:
             json_string = data_file.read()
             data = json\
@@ -942,7 +941,7 @@ def assert_docstring(assertEqual, docstring):
 class TestFlowMetaDataConversions(unittest.TestCase):
     def setUp(self):
         path = os.path.join(
-            'tests', 'unit', 'dash', 'development', 'flow_metadata_test.json')
+            'tests', 'unit', 'development', 'flow_metadata_test.json')
         with open(path) as data_file:
             json_string = data_file.read()
             data = json\
diff --git a/tests/unit/simple_app.py b/tests/unit/simple_app.py
deleted file mode 100644
index 3e485c08..00000000
--- a/tests/unit/simple_app.py
+++ /dev/null
@@ -1,38 +0,0 @@
-# pylint: disable=missing-docstring
-import dash_core_components as dcc
-import dash_html_components as html
-import dash
-from dash.dependencies import Output, Input
-from dash.exceptions import PreventUpdate
-
-
-app = dash.Dash(__name__)
-
-app.layout = html.Div(
-    [
-        dcc.Input(id="value", placeholder="my-value"),
-        html.Div(["You entered: ", html.Span(id="out")]),
-        html.Button("style-btn", id="style-btn"),
-        html.Div("style-container", id="style-output"),
-    ]
-)
-
-
-@app.callback(Output("out", "children"), [Input("value", "value")])
-def on_value(value):
-    if value is None:
-        raise PreventUpdate
-
-    return value
-
-
-@app.callback(Output("style-output", "style"), [Input("style-btn", "n_clicks")])
-def on_style(value):
-    if value is None:
-        raise PreventUpdate
-
-    return {"padding": "10px"}
-
-
-if __name__ == "__main__":
-    app.run_server(debug=True, port=10850)
diff --git a/tests/unit/test_app_runners.py b/tests/unit/test_app_runners.py
index 8fa71e8d..54e7bdf5 100644
--- a/tests/unit/test_app_runners.py
+++ b/tests/unit/test_app_runners.py
@@ -22,7 +22,7 @@ def test_threaded_server_smoke(thread_server):
 
 
 def test_process_server_smoke(process_server):
-    process_server('tests.simple_app')
+    process_server('simple_app')
     time.sleep(2.5)
     r = requests.get(process_server.url)
     assert r.status_code == 200, "the server is reachable"
diff --git a/tests/utils.py b/tests/utils.py
deleted file mode 100644
index da355834..00000000
--- a/tests/utils.py
+++ /dev/null
@@ -1,72 +0,0 @@
-import time
-
-
-TIMEOUT = 5  # Seconds
-
-
-def invincible(func):
-    def wrap():
-        try:
-            return func()
-        except:
-            pass
-    return wrap
-
-
-class WaitForTimeout(Exception):
-    """This should only be raised inside the `wait_for` function."""
-    pass
-
-
-def wait_for(condition_function, get_message=None, expected_value=None,
-             timeout=TIMEOUT, *args, **kwargs):
-    """
-    Waits for condition_function to return truthy or raises WaitForTimeout.
-    :param (function) condition_function: Should return truthy or
-        expected_value on success.
-    :param (function) get_message: Optional failure message function
-    :param expected_value: Optional return value to wait for. If omitted,
-        success is any truthy value.
-    :param (float) timeout: max seconds to wait. Defaults to 5
-    :param args: Optional args to pass to condition_function.
-    :param kwargs: Optional kwargs to pass to condition_function.
-        if `timeout` is in kwargs, it will be used to override TIMEOUT
-    :raises: WaitForTimeout If condition_function doesn't return True in time.
-    Usage:
-        def get_element(selector):
-            # some code to get some element or return a `False`-y value.
-        selector = '.js-plotly-plot'
-        try:
-            wait_for(get_element, selector)
-        except WaitForTimeout:
-            self.fail('element never appeared...')
-        plot = get_element(selector)  # we know it exists.
-    """
-    def wrapped_condition_function():
-        """We wrap this to alter the call base on the closure."""
-        if args and kwargs:
-            return condition_function(*args, **kwargs)
-        if args:
-            return condition_function(*args)
-        if kwargs:
-            return condition_function(**kwargs)
-        return condition_function()
-
-    start_time = time.time()
-    while time.time() < start_time + timeout:
-        condition_val = wrapped_condition_function()
-        if expected_value is None:
-            if condition_val:
-                return True
-        elif condition_val == expected_value:
-            return True
-        time.sleep(0.5)
-
-    if get_message:
-        message = get_message()
-    elif expected_value:
-        message = 'Final value: {}'.format(condition_val)
-    else:
-        message = ''
-
-    raise WaitForTimeout(message)
