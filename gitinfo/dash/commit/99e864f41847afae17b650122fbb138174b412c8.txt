commit 99e864f41847afae17b650122fbb138174b412c8
Author: chriddyp <chris@plot.ly>
Date:   Thu Mar 23 21:27:38 2017 -0400

    refactor callback api to handle returning a singular property from outputs

diff --git a/dash/dash.py b/dash/dash.py
index d162bc6b..37c19704 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -232,31 +232,17 @@ class Dash(object):
         '''.format(css, scripts))
 
     def dependencies(self):
-        return flask.jsonify({
-            k: {
-                i: j for i, j in v.iteritems() if i != 'callback'
+        return flask.jsonify([
+            {
+                'output': {
+                    'id': k.split('.')[0],
+                    'property': k.split('.')[1]
+                },
+                'inputs': v['inputs'],
+                'state': v['state'],
+                'events': v['events']
             } for k, v in self.react_map.iteritems()
-        })
-
-    def interceptor(self):
-        body = json.loads(flask.request.get_data())
-        # TODO - This should include which event triggered this function
-        target_id = body['id']
-        # TODO - Rename 'parents' to 'state'
-        # TODO - Include 'events' object
-        state = body['state']
-
-        args = []
-        for component_registration in self.react_map[target_id]['state']:
-            component_id = component_registration['id']
-            component_state = state[component_id]
-            registered_prop = component_registration['prop']
-            if registered_prop == '*':
-                args.append(state[component_id])
-            else:
-                args.append(state[component_id][registered_prop])
-
-        return self.react_map[target_id]['callback'](*args)
+        ])
 
     def react(self, *args, **kwargs):
         raise DashException(
@@ -371,6 +357,13 @@ class Dash(object):
                 'elements' if len(state) > 1 else 'element'
             ).replace('    ', ''))
 
+        if '.' in output.component_id:
+            raise exceptions.IDsCantContainPeriods('''The Output element
+            `{}` contains a period in its ID.
+            Periods are not allowed in IDs right now.'''.format(
+                output.component_id
+            ))
+
 
     # TODO - Update nomenclature.
     # "Parents" and "Children" should refer to the DOM tree
@@ -386,40 +379,76 @@ class Dash(object):
     def callback(self, output, inputs=[], state=[], events=[]):
         self._validate_callback(output, inputs, state, events)
 
-        return
-
-        self.react_map[component_id] = {
-            'state': [{'id': p, 'prop': '*'} for p in parents] + state,
+        callback_id = '{}.{}'.format(
+            output.component_id, output.component_property
+        )
+        self.react_map[callback_id] = {
+            'inputs': [
+                {'id': c.component_id, 'property': c.component_property}
+                for c in inputs
+            ],
+            'state': [
+                {'id': c.component_id, 'property': c.component_property}
+                for c in state
+            ],
             'events': [
-                {'id': p, 'event': 'propChange'}
-                for p in parents
-            ] + events
+                {'id': c.component_id, 'event': c.component_event}
+                for c in events
+            ]
         }
 
         def wrap_func(func):
             def add_context(*args, **kwargs):
 
-                new_component_props = func(*args, **kwargs)
-                new_component_props['id'] = component_id
-                component_json = {}
-                if 'content' in new_component_props:
-                    component_json['children'] = \
-                        new_component_props.pop('content')
-                component_json['props'] = new_component_props
+                output_value = func(*args, **kwargs)
+                response = {
+                    'response': {
+                        'props': {
+                            output.component_property: output_value
+                        }
+                    }
+                }
 
-                response = {'response': component_json}
                 return flask.Response(
                     json.dumps(response,
                                cls=plotly.utils.PlotlyJSONEncoder),
                     mimetype='application/json'
                 )
 
-            self.react_map[component_id]['callback'] = add_context
+            self.react_map[callback_id]['callback'] = add_context
 
             return add_context
 
         return wrap_func
 
+    def interceptor(self):
+        body = json.loads(flask.request.get_data())
+        inputs = body.get('inputs', [])
+        state = body.get('state', [])
+        output = body['output']
+        event = body.get('event', {})
+
+        target_id = '{}.{}'.format(output['id'], output['property'])
+        args = []
+        for component_registration in self.react_map[target_id]['inputs']:
+            component_id = component_registration['id']
+            args.append([
+                c['value'] for c in inputs if
+                c['property'] == component_registration['property'] and
+                c['id'] == component_registration['id']
+            ][0])
+
+        for component_registration in self.react_map[target_id]['state']:
+            component_id = component_registration['id']
+            args.append([
+                c['value'] for c in state if
+                c['property'] == component_registration['property'] and
+                c['id'] == component_registration['id']
+            ][0])
+
+        return self.react_map[target_id]['callback'](*args)
+
+
     def _setup_server(self):
         self._generate_scripts_html()
         self._generate_css_dist_html()
