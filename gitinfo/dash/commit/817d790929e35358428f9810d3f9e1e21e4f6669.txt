commit 817d790929e35358428f9810d3f9e1e21e4f6669
Author: alexcjohnson <alex@plot.ly>
Date:   Tue Feb 4 22:39:41 2020 -0500

    extra tests & debugging to help with reported errors

diff --git a/dash/_validate.py b/dash/_validate.py
index a5f9a2aa..b23328fa 100644
--- a/dash/_validate.py
+++ b/dash/_validate.py
@@ -350,18 +350,21 @@ def validate_multi_return(outputs_list, output_value, callback_id):
                     The callback {} ouput {} is a wildcard multi-output.
                     Expected the output type to be a list or tuple but got:
                     {}.
+                    output spec: {}
                     """.format(
-                        callback_id, i, repr(vi)
+                        callback_id, i, repr(vi), repr(outi)
                     )
                 )
 
             if len(vi) != len(outi):
                 raise exceptions.InvalidCallbackReturnValue(
                     """
-                    Invalid number of output values for {}.
+                    Invalid number of output values for {} item {}.
                     Expected {}, got {}
+                    output spec: {}
+                    output value: {}
                     """.format(
-                        callback_id, len(vi), len(outi)
+                        callback_id, i, len(vi), len(outi), repr(outi), repr(vi)
                     )
                 )
 
diff --git a/dash/dash.py b/dash/dash.py
index 21d30560..2eebb574 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -949,6 +949,15 @@ class Dash(object):
                         if isinstance(spec, list)
                         else [[val, spec]]
                     ):
+                        if not spec:
+                            raise ValueError(
+                                (
+                                    "missing output spec\n"
+                                    "callback_id: {!r}\n"
+                                    "output spec: {!r}\n"
+                                    "return value: {!r}"
+                                ).format(callback_id, output_spec, output_value)
+                            )
                         if not isinstance(vali, _NoUpdate):
                             has_update = True
                             id_str = stringify_id(speci["id"])
diff --git a/tests/integration/callbacks/test_basic_callback.py b/tests/integration/callbacks/test_basic_callback.py
index f13be38b..bc29e9b6 100644
--- a/tests/integration/callbacks/test_basic_callback.py
+++ b/tests/integration/callbacks/test_basic_callback.py
@@ -168,6 +168,67 @@ def test_cbsc003_callback_with_unloaded_async_component(dash_duo):
 
     dash_duo.start_server(app)
 
-    dash_duo.find_element('#btn').click()
-    assert dash_duo.find_element('#output').text == "Bye"
+    dash_duo.find_element("#btn").click()
+    assert dash_duo.find_element("#output").text == "Bye"
     assert dash_duo.get_logs() == []
+
+
+def test_cbsc004_children_types(dash_duo):
+    app = dash.Dash()
+    app.layout = html.Div([
+        html.Button(id="btn"),
+        html.Div("init", id="out")
+    ])
+
+    outputs = [
+        [None, ""],
+        ["a string", "a string"],
+        [123, "123"],
+        [123.45, "123.45"],
+        [[6, 7, 8], "678"],
+        [["a", "list", "of", "strings"], "alistofstrings"],
+        [["strings", 2, "numbers"], "strings2numbers"],
+        [["a string", html.Div("and a div")], "a string\nand a div"]
+    ]
+
+    @app.callback(Output("out", "children"), [Input("btn", "n_clicks")])
+    def set_children(n):
+        if n is None or n > len(outputs):
+            return dash.no_update
+        return outputs[n - 1][0]
+
+    dash_duo.start_server(app)
+    dash_duo.wait_for_text_to_equal("#out", "init")
+
+    for children, text in outputs:
+        dash_duo.find_element("#btn").click()
+        dash_duo.wait_for_text_to_equal("#out", text)
+
+
+def test_cbsc005_array_of_objects(dash_duo):
+    app = dash.Dash()
+    app.layout = html.Div([
+        html.Button(id="btn"),
+        dcc.Dropdown(id="dd"),
+        html.Div(id="out")
+    ])
+
+    @app.callback(Output("dd", "options"), [Input("btn", "n_clicks")])
+    def set_options(n):
+        return [
+            {"label": "opt{}".format(i), "value": i}
+            for i in range(n or 0)
+        ]
+
+    @app.callback(Output("out", "children"), [Input("dd", "options")])
+    def set_out(opts):
+        print(repr(opts))
+        return len(opts)
+
+    dash_duo.start_server(app)
+
+    dash_duo.wait_for_text_to_equal("#out", "0")
+    for i in range(5):
+        dash_duo.find_element("#btn").click()
+        dash_duo.wait_for_text_to_equal("#out", str(i + 1))
+        dash_duo.select_dcc_dropdown("#dd", "opt{}".format(i))
