commit aa20bd439f68a4fe1ac743bd12cb1349957e6e40
Author: Marc-Andr√© Rivet <Marc-Andre-Rivet@users.noreply.github.com>
Date:   Fri Mar 13 16:07:08 2020 -0400

    Git hooks, linting, and other toolchain fixes (#1151)

diff --git a/.circleci/config.yml b/.circleci/config.yml
index 2fa41ef7..2d7b4304 100644
--- a/.circleci/config.yml
+++ b/.circleci/config.yml
@@ -29,7 +29,6 @@ jobs:
     docker:
       - image: circleci/python:3.7-stretch-node-browsers
         environment:
-          PYLINTRC: .pylintrc37
           PYVERSION: python37
 
     steps:
@@ -53,20 +52,13 @@ jobs:
             . venv/bin/activate
             set -eo pipefail
             pip install -e . --progress-bar off && pip list | grep dash
-            flake8 dash setup.py && flake8 --ignore=E123,E126,E501,E722,E731,F401,F841,W503,W504 --exclude=metadata_test.py tests
-            pylint dash setup.py --rcfile=$PYLINTRC
-            pylint tests/unit tests/integration/devtools tests/integration/renderer tests/integration/dash_assets -d all -e C0410,C0411,C0412,C0413,W0109
-            cd dash-renderer && npm ci
-            npm run lint:test && npm run format:test
+            npm install --production && npm run initialize
+            npm run lint
       - run:
-          name: üêç Python Unit Tests
+          name: üêç Python Unit Tests & ‚òï JS Unit Tests
           command: |
             . venv/bin/activate
-            PYTHONPATH=~/dash/tests/assets pytest tests/unit
-      - run:
-          name: ‚òï JS Unit Tests
-          command: |
-            cd dash-renderer && npm run test:js
+            npm run test.unit
 
   lint-unit-36:
       <<: *lint-unit
@@ -89,6 +81,7 @@ jobs:
     docker:
       - image: circleci/python:3.7-stretch-node-browsers
         environment:
+          PYLINTRC: .pylintrc37
           PYVERSION: python37
     steps:
       - checkout
@@ -243,7 +236,9 @@ jobs:
       - run:
           name: Ô∏èÔ∏èüèóÔ∏è  Install packages
           command: |
-            . venv/bin/activate && cd packages && ls -la
+            . venv/bin/activate
+            npm install --production
+            cd packages && ls -la
             find . -name "*.gz" | xargs pip install --no-cache-dir --ignore-installed && cd ..
             sed -i '/dash/d' requires-install.txt
             pip install --no-cache-dir --ignore-installed .
@@ -252,8 +247,7 @@ jobs:
           name: üß™ Run Integration Tests
           command: |
             . venv/bin/activate
-            TESTFILES=$(circleci tests glob "tests/integration/**/test_*.py" | circleci tests split --split-by=timings)
-            pytest --headless --nopercyfinalize --junitxml=test-reports/junit_intg.xml ${TESTFILES}
+            npm run test.integration
       - store_artifacts:
           path: test-reports
       - store_test_results:
diff --git a/.flake8 b/.flake8
new file mode 100644
index 00000000..ee4b8b92
--- /dev/null
+++ b/.flake8
@@ -0,0 +1,5 @@
+[flake8]
+ignore = C901, E203, E266, E501, E731, W503
+select = B,C,E,F,W,T4
+per-file-ignores =
+    tests/*: E722, F811
\ No newline at end of file
diff --git a/.huskyrc b/.huskyrc
new file mode 100644
index 00000000..c80a9733
--- /dev/null
+++ b/.huskyrc
@@ -0,0 +1,5 @@
+{
+  "hooks": {
+    "pre-commit": "npm run lint"
+  }
+}
\ No newline at end of file
diff --git a/.pylintrc b/.pylintrc
index fc4bba06..f81e2535 100644
--- a/.pylintrc
+++ b/.pylintrc
@@ -61,6 +61,7 @@ disable=fixme,
         old-style-class,
         superfluous-parens,
         bad-continuation,
+        line-too-long
 
 
 # Enable the message, report, category or checker with the given id(s). You can
@@ -223,9 +224,6 @@ indent-after-paren=4
 # tab).
 indent-string='    '
 
-# Maximum number of characters on a single line.
-max-line-length=100
-
 # Maximum number of lines in a module
 max-module-lines=1000
 
@@ -468,4 +466,4 @@ known-third-party=enchant
 
 # Exceptions that will emit a warning when being caught. Defaults to
 # "Exception"
-overgeneral-exceptions=Exception
+overgeneral-exceptions=Exception
\ No newline at end of file
diff --git a/.pylintrc37 b/.pylintrc37
index 359f3df1..0e477b99 100644
--- a/.pylintrc37
+++ b/.pylintrc37
@@ -148,7 +148,8 @@ disable=invalid-name,
         possibly-unused-variable,
         too-many-lines,
         too-many-statements,
-        bad-continuation
+        bad-continuation,
+        line-too-long
 
 # Enable the message, report, category or checker with the given id(s). You can
 # either give multiple identifier separated by comma (,) or put this option
@@ -318,9 +319,6 @@ indent-after-paren=4
 # tab).
 indent-string='    '
 
-# Maximum number of characters on a single line.
-max-line-length=100
-
 # Maximum number of lines in a module.
 max-module-lines=1000
 
@@ -567,4 +565,4 @@ known-third-party=enchant
 
 # Exceptions that will emit a warning when being caught. Defaults to
 # "Exception".
-overgeneral-exceptions=Exception
+overgeneral-exceptions=Exception
\ No newline at end of file
diff --git a/dash-renderer/package-lock.json b/dash-renderer/package-lock.json
index 6163f06d..78d51a48 100644
--- a/dash-renderer/package-lock.json
+++ b/dash-renderer/package-lock.json
@@ -12129,6 +12129,12 @@
         "readable-stream": "^2.0.1"
       }
     },
+    "memorystream": {
+      "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/memorystream/-/memorystream-0.3.1.tgz",
+      "integrity": "sha1-htcJCzDORV1j+64S3aUaR93K+bI=",
+      "dev": true
+    },
     "meow": {
       "version": "3.7.0",
       "resolved": "https://registry.npmjs.org/meow/-/meow-3.7.0.tgz",
@@ -12754,6 +12760,63 @@
       "integrity": "sha1-0LFF62kRicY6eNIB3E/bEpPvDAM=",
       "dev": true
     },
+    "npm-run-all": {
+      "version": "4.1.5",
+      "resolved": "https://registry.npmjs.org/npm-run-all/-/npm-run-all-4.1.5.tgz",
+      "integrity": "sha512-Oo82gJDAVcaMdi3nuoKFavkIHBRVqQ1qvMb+9LHk/cF4P6B2m8aP04hGf7oL6wZ9BuGwX1onlLhpuoofSyoQDQ==",
+      "dev": true,
+      "requires": {
+        "ansi-styles": "^3.2.1",
+        "chalk": "^2.4.1",
+        "cross-spawn": "^6.0.5",
+        "memorystream": "^0.3.1",
+        "minimatch": "^3.0.4",
+        "pidtree": "^0.3.0",
+        "read-pkg": "^3.0.0",
+        "shell-quote": "^1.6.1",
+        "string.prototype.padend": "^3.0.0"
+      },
+      "dependencies": {
+        "load-json-file": {
+          "version": "4.0.0",
+          "resolved": "https://registry.npmjs.org/load-json-file/-/load-json-file-4.0.0.tgz",
+          "integrity": "sha1-L19Fq5HjMhYjT9U62rZo607AmTs=",
+          "dev": true,
+          "requires": {
+            "graceful-fs": "^4.1.2",
+            "parse-json": "^4.0.0",
+            "pify": "^3.0.0",
+            "strip-bom": "^3.0.0"
+          }
+        },
+        "path-type": {
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/path-type/-/path-type-3.0.0.tgz",
+          "integrity": "sha512-T2ZUsdZFHgA3u4e5PfPbjd7HDDpxPnQb5jN0SrDsjNSuVXHJqtwTnWqG0B1jZrgmJ/7lj1EmVIByWt1gxGkWvg==",
+          "dev": true,
+          "requires": {
+            "pify": "^3.0.0"
+          }
+        },
+        "pify": {
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/pify/-/pify-3.0.0.tgz",
+          "integrity": "sha1-5aSs0sEB/fPZpNB/DbxNtJ3SgXY=",
+          "dev": true
+        },
+        "read-pkg": {
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/read-pkg/-/read-pkg-3.0.0.tgz",
+          "integrity": "sha1-nLxoaXj+5l0WwA4rGcI3/Pbjg4k=",
+          "dev": true,
+          "requires": {
+            "load-json-file": "^4.0.0",
+            "normalize-package-data": "^2.3.2",
+            "path-type": "^3.0.0"
+          }
+        }
+      }
+    },
     "npm-run-path": {
       "version": "2.0.2",
       "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-2.0.2.tgz",
@@ -13538,6 +13601,12 @@
       "integrity": "sha512-OYMyqkKzK7blWO/+XZYP6w8hH0LDvkBvdvKukti+7kqYFCiEAk+gI3DWnryapc0Dau05ugGTy0foQ6mqn4AHYA==",
       "dev": true
     },
+    "pidtree": {
+      "version": "0.3.0",
+      "resolved": "https://registry.npmjs.org/pidtree/-/pidtree-0.3.0.tgz",
+      "integrity": "sha512-9CT4NFlDcosssyg8KVFltgokyKZIFjoBxw8CTGy+5F38Y1eQWrt8tRayiUOXE+zVKQnYu5BR8JjCtvK3BcnBhg==",
+      "dev": true
+    },
     "pify": {
       "version": "4.0.1",
       "resolved": "https://registry.npmjs.org/pify/-/pify-4.0.1.tgz",
@@ -16134,6 +16203,12 @@
       "integrity": "sha1-2kL0l0DAtC2yypcoVxyxkMmO/qM=",
       "dev": true
     },
+    "shell-quote": {
+      "version": "1.7.2",
+      "resolved": "https://registry.npmjs.org/shell-quote/-/shell-quote-1.7.2.tgz",
+      "integrity": "sha512-mRz/m/JVscCrkMyPqHc/bczi3OQHkLTqXHEFu0zDhK/qfv3UcOA4SVmRCLmos4bhjr9ekVQubj/R7waKapmiQg==",
+      "dev": true
+    },
     "shellwords": {
       "version": "0.1.1",
       "resolved": "https://registry.npmjs.org/shellwords/-/shellwords-0.1.1.tgz",
@@ -16824,6 +16899,95 @@
         }
       }
     },
+    "string.prototype.padend": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/string.prototype.padend/-/string.prototype.padend-3.1.0.tgz",
+      "integrity": "sha512-3aIv8Ffdp8EZj8iLwREGpQaUZiPyrWrpzMBHvkiSW/bK/EGve9np07Vwy7IJ5waydpGXzQZu/F8Oze2/IWkBaA==",
+      "dev": true,
+      "requires": {
+        "define-properties": "^1.1.3",
+        "es-abstract": "^1.17.0-next.1"
+      },
+      "dependencies": {
+        "es-abstract": {
+          "version": "1.17.4",
+          "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.17.4.tgz",
+          "integrity": "sha512-Ae3um/gb8F0mui/jPL+QiqmglkUsaQf7FwBEHYIFkztkneosu9imhqHpBzQ3h1vit8t5iQ74t6PEVvphBZiuiQ==",
+          "dev": true,
+          "requires": {
+            "es-to-primitive": "^1.2.1",
+            "function-bind": "^1.1.1",
+            "has": "^1.0.3",
+            "has-symbols": "^1.0.1",
+            "is-callable": "^1.1.5",
+            "is-regex": "^1.0.5",
+            "object-inspect": "^1.7.0",
+            "object-keys": "^1.1.1",
+            "object.assign": "^4.1.0",
+            "string.prototype.trimleft": "^2.1.1",
+            "string.prototype.trimright": "^2.1.1"
+          }
+        },
+        "es-to-primitive": {
+          "version": "1.2.1",
+          "resolved": "https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.2.1.tgz",
+          "integrity": "sha512-QCOllgZJtaUo9miYBcLChTUaHNjJF3PYs1VidD7AwiEj1kYxKeQTctLAezAOH5ZKRH0g2IgPn6KwB4IT8iRpvA==",
+          "dev": true,
+          "requires": {
+            "is-callable": "^1.1.4",
+            "is-date-object": "^1.0.1",
+            "is-symbol": "^1.0.2"
+          }
+        },
+        "has-symbols": {
+          "version": "1.0.1",
+          "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.1.tgz",
+          "integrity": "sha512-PLcsoqu++dmEIZB+6totNFKq/7Do+Z0u4oT0zKOJNl3lYK6vGwwu2hjHs+68OEZbTjiUE9bgOABXbP/GvrS0Kg==",
+          "dev": true
+        },
+        "is-callable": {
+          "version": "1.1.5",
+          "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.1.5.tgz",
+          "integrity": "sha512-ESKv5sMCJB2jnHTWZ3O5itG+O128Hsus4K4Qh1h2/cgn2vbgnLSVqfV46AeJA9D5EeeLa9w81KUXMtn34zhX+Q==",
+          "dev": true
+        },
+        "is-regex": {
+          "version": "1.0.5",
+          "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.0.5.tgz",
+          "integrity": "sha512-vlKW17SNq44owv5AQR3Cq0bQPEb8+kF3UKZ2fiZNOWtztYE5i0CzCZxFDwO58qAOWtxdBRVO/V5Qin1wjCqFYQ==",
+          "dev": true,
+          "requires": {
+            "has": "^1.0.3"
+          }
+        },
+        "object-inspect": {
+          "version": "1.7.0",
+          "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.7.0.tgz",
+          "integrity": "sha512-a7pEHdh1xKIAgTySUGgLMx/xwDZskN1Ud6egYYN3EdRW4ZMPNEDUTF+hwy2LUC+Bl+SyLXANnwz/jyh/qutKUw==",
+          "dev": true
+        },
+        "string.prototype.trimleft": {
+          "version": "2.1.1",
+          "resolved": "https://registry.npmjs.org/string.prototype.trimleft/-/string.prototype.trimleft-2.1.1.tgz",
+          "integrity": "sha512-iu2AGd3PuP5Rp7x2kEZCrB2Nf41ehzh+goo8TV7z8/XDBbsvc6HQIlUl9RjkZ4oyrW1XM5UwlGl1oVEaDjg6Ag==",
+          "dev": true,
+          "requires": {
+            "define-properties": "^1.1.3",
+            "function-bind": "^1.1.1"
+          }
+        },
+        "string.prototype.trimright": {
+          "version": "2.1.1",
+          "resolved": "https://registry.npmjs.org/string.prototype.trimright/-/string.prototype.trimright-2.1.1.tgz",
+          "integrity": "sha512-qFvWL3/+QIgZXVmJBfpHmxLB7xsUXz6HsUmP8+5dRaC3Q7oKUv9Vo6aMCRZC1smrtyECFsIT30PqBJ1gTjAs+g==",
+          "dev": true,
+          "requires": {
+            "define-properties": "^1.1.3",
+            "function-bind": "^1.1.1"
+          }
+        }
+      }
+    },
     "string.prototype.trimleft": {
       "version": "2.1.0",
       "resolved": "https://registry.npmjs.org/string.prototype.trimleft/-/string.prototype.trimleft-2.1.0.tgz",
diff --git a/dash-renderer/package.json b/dash-renderer/package.json
index fee5a99d..a8b2b590 100644
--- a/dash-renderer/package.json
+++ b/dash-renderer/package.json
@@ -4,18 +4,19 @@
   "description": "render dash components in react",
   "main": "dash_renderer/dash_renderer.min.js",
   "scripts": {
-    "lint": "./node_modules/.bin/eslint --quiet --fix .",
-    "lint:test": "./node_modules/.bin/eslint .",
+    "private::format.js-eslint": "eslint --quiet --fix .",
+    "private::format.js-prettier": "prettier --config .prettierrc --write \"src/**/*.js\"",
+    "private::lint.js-eslint": "eslint .",
+    "private::lint.js-prettier": "prettier --config .prettierrc \"src/**/*.js\" --list-different",
     "build:js": "webpack --build release",
     "build:dev": "webpack --build local",
     "build:local": "renderer build local",
     "build": "renderer build",
     "postbuild": "es-check es5 dash_renderer/*.js",
     "start": "webpack-serve ./webpack.serve.config.js",
-    "format": "prettier --config .prettierrc --write \"src/**/*.js\"",
-    "format:test": "prettier --config .prettierrc \"src/**/*.js\" --list-different",
-    "test": "npm run lint",
-    "test:js": "jest"
+    "test": "jest",
+    "format": "run-s private::format.*",
+    "lint": "run-s private::lint.*"
   },
   "author": "chriddyp",
   "license": "MIT",
diff --git a/dash/_callback_context.py b/dash/_callback_context.py
index 04284cc6..dbd55c24 100644
--- a/dash/_callback_context.py
+++ b/dash/_callback_context.py
@@ -9,12 +9,12 @@ def has_context(func):
     def assert_context(*args, **kwargs):
         if not flask.has_request_context():
             raise exceptions.MissingCallbackContextException(
-                (
-                    'dash.callback_context.{} '
-                    'is only available from a callback!'
-                ).format(getattr(func, '__name__'))
+                ("dash.callback_context.{} is only available from a callback!").format(
+                    getattr(func, "__name__")
+                )
             )
         return func(*args, **kwargs)
+
     return assert_context
 
 
@@ -23,19 +23,19 @@ class CallbackContext:
     @property
     @has_context
     def inputs(self):
-        return getattr(flask.g, 'input_values', {})
+        return getattr(flask.g, "input_values", {})
 
     @property
     @has_context
     def states(self):
-        return getattr(flask.g, 'state_values', {})
+        return getattr(flask.g, "state_values", {})
 
     @property
     @has_context
     def triggered(self):
-        return getattr(flask.g, 'triggered_inputs', [])
+        return getattr(flask.g, "triggered_inputs", [])
 
     @property
     @has_context
     def response(self):
-        return getattr(flask.g, 'dash_response')
+        return getattr(flask.g, "dash_response")
diff --git a/dash/_configs.py b/dash/_configs.py
index 0c4fae55..f7e8c59b 100644
--- a/dash/_configs.py
+++ b/dash/_configs.py
@@ -10,26 +10,26 @@ def load_dash_env_vars():
         {
             var: os.getenv(var, os.getenv(var.lower()))
             for var in (
-                'DASH_APP_NAME',
-                'DASH_URL_BASE_PATHNAME',
-                'DASH_ROUTES_PATHNAME_PREFIX',
-                'DASH_REQUESTS_PATHNAME_PREFIX',
-                'DASH_SUPPRESS_CALLBACK_EXCEPTIONS',
-                'DASH_ASSETS_EXTERNAL_PATH',
-                'DASH_INCLUDE_ASSETS_FILES',
-                'DASH_COMPONENTS_CACHE_MAX_AGE',
-                'DASH_INCLUDE_ASSETS_FILES',
-                'DASH_SERVE_DEV_BUNDLES',
-                'DASH_DEBUG',
-                'DASH_UI',
-                'DASH_PROPS_CHECK',
-                'DASH_HOT_RELOAD',
-                'DASH_HOT_RELOAD_INTERVAL',
-                'DASH_HOT_RELOAD_WATCH_INTERVAL',
-                'DASH_HOT_RELOAD_MAX_RETRY',
-                'DASH_SILENCE_ROUTES_LOGGING',
-                'DASH_PRUNE_ERRORS',
-                'DASH_COMPRESS'
+                "DASH_APP_NAME",
+                "DASH_URL_BASE_PATHNAME",
+                "DASH_ROUTES_PATHNAME_PREFIX",
+                "DASH_REQUESTS_PATHNAME_PREFIX",
+                "DASH_SUPPRESS_CALLBACK_EXCEPTIONS",
+                "DASH_ASSETS_EXTERNAL_PATH",
+                "DASH_INCLUDE_ASSETS_FILES",
+                "DASH_COMPONENTS_CACHE_MAX_AGE",
+                "DASH_INCLUDE_ASSETS_FILES",
+                "DASH_SERVE_DEV_BUNDLES",
+                "DASH_DEBUG",
+                "DASH_UI",
+                "DASH_PROPS_CHECK",
+                "DASH_HOT_RELOAD",
+                "DASH_HOT_RELOAD_INTERVAL",
+                "DASH_HOT_RELOAD_WATCH_INTERVAL",
+                "DASH_HOT_RELOAD_MAX_RETRY",
+                "DASH_SILENCE_ROUTES_LOGGING",
+                "DASH_PRUNE_ERRORS",
+                "DASH_COMPRESS",
             )
         }
     )
@@ -45,19 +45,17 @@ def get_combined_config(name, val, default=None):
     if val is not None:
         return val
 
-    env = load_dash_env_vars().get('DASH_{}'.format(name.upper()))
+    env = load_dash_env_vars().get("DASH_{}".format(name.upper()))
     if env is None:
         return default
 
-    return env.lower() == 'true' if env.lower() in {'true', 'false'} \
-        else env
+    return env.lower() == "true" if env.lower() in {"true", "false"} else env
 
 
 def pathname_configs(
-        url_base_pathname=None,
-        routes_pathname_prefix=None,
-        requests_pathname_prefix=None):
-    _pathname_config_error_message = '''
+    url_base_pathname=None, routes_pathname_prefix=None, requests_pathname_prefix=None
+):
+    _pathname_config_error_message = """
     {} This is ambiguous.
     To fix this, set `routes_pathname_prefix` instead of `url_base_pathname`.
 
@@ -69,57 +67,57 @@ def pathname_configs(
     If you need these to be different values then you should set
     `requests_pathname_prefix` and `routes_pathname_prefix`,
     not `url_base_pathname`.
-    '''
-    url_base_pathname = get_combined_config(
-        'url_base_pathname', url_base_pathname)
+    """
+    url_base_pathname = get_combined_config("url_base_pathname", url_base_pathname)
 
     routes_pathname_prefix = get_combined_config(
-        'routes_pathname_prefix', routes_pathname_prefix)
+        "routes_pathname_prefix", routes_pathname_prefix
+    )
 
     requests_pathname_prefix = get_combined_config(
-        'requests_pathname_prefix', requests_pathname_prefix)
+        "requests_pathname_prefix", requests_pathname_prefix
+    )
 
     if url_base_pathname is not None and requests_pathname_prefix is not None:
         raise exceptions.InvalidConfig(
             _pathname_config_error_message.format(
-                'You supplied `url_base_pathname` and '
-                '`requests_pathname_prefix`.'
+                "You supplied `url_base_pathname` and `requests_pathname_prefix`."
             )
         )
 
     if url_base_pathname is not None and routes_pathname_prefix is not None:
         raise exceptions.InvalidConfig(
             _pathname_config_error_message.format(
-                'You supplied `url_base_pathname` and '
-                '`routes_pathname_prefix`.')
+                "You supplied `url_base_pathname` and `routes_pathname_prefix`."
+            )
         )
 
     if url_base_pathname is not None and routes_pathname_prefix is None:
         routes_pathname_prefix = url_base_pathname
     elif routes_pathname_prefix is None:
-        routes_pathname_prefix = '/'
+        routes_pathname_prefix = "/"
 
-    if not routes_pathname_prefix.startswith('/'):
+    if not routes_pathname_prefix.startswith("/"):
         raise exceptions.InvalidConfig(
-            '`routes_pathname_prefix` needs to start with `/`')
-    if not routes_pathname_prefix.endswith('/'):
-        raise exceptions.InvalidConfig(
-            '`routes_pathname_prefix` needs to end with `/`')
+            "`routes_pathname_prefix` needs to start with `/`"
+        )
+    if not routes_pathname_prefix.endswith("/"):
+        raise exceptions.InvalidConfig("`routes_pathname_prefix` needs to end with `/`")
 
     app_name = load_dash_env_vars().DASH_APP_NAME
 
     if not requests_pathname_prefix and app_name:
-        requests_pathname_prefix = '/' + app_name + routes_pathname_prefix
+        requests_pathname_prefix = "/" + app_name + routes_pathname_prefix
     elif requests_pathname_prefix is None:
         requests_pathname_prefix = routes_pathname_prefix
 
-    if not requests_pathname_prefix.startswith('/'):
+    if not requests_pathname_prefix.startswith("/"):
         raise exceptions.InvalidConfig(
-            '`requests_pathname_prefix` needs to start with `/`')
+            "`requests_pathname_prefix` needs to start with `/`"
+        )
     if not requests_pathname_prefix.endswith(routes_pathname_prefix):
         raise exceptions.InvalidConfig(
-            '`requests_pathname_prefix` needs to ends with '
-            '`routes_pathname_prefix`.'
+            "`requests_pathname_prefix` needs to ends with `routes_pathname_prefix`."
         )
 
     return url_base_pathname, routes_pathname_prefix, requests_pathname_prefix
diff --git a/dash/_utils.py b/dash/_utils.py
index 6b0b36a6..dd95636b 100644
--- a/dash/_utils.py
+++ b/dash/_utils.py
@@ -33,9 +33,7 @@ def format_tag(tag_name, attributes, inner="", closed=False, opened=False):
         tag += ">" + inner + "</{tag}>"
     return tag.format(
         tag=tag_name,
-        attributes=" ".join(
-            ['{}="{}"'.format(k, v) for k, v in attributes.items()]
-        ),
+        attributes=" ".join(['{}="{}"'.format(k, v) for k, v in attributes.items()]),
     )
 
 
@@ -56,46 +54,40 @@ def get_asset_path(requests_pathname, asset_path, asset_url_path):
 
 
 def get_relative_path(requests_pathname, path):
-    if requests_pathname == '/' and path == '':
-        return '/'
-    elif requests_pathname != '/' and path == '':
+    if requests_pathname == "/" and path == "":
+        return "/"
+    elif requests_pathname != "/" and path == "":
         return requests_pathname
-    elif not path.startswith('/'):
+    elif not path.startswith("/"):
         raise exceptions.UnsupportedRelativePath(
-            "Paths that aren't prefixed with a leading / are not supported.\n" +
-            "You supplied: {}".format(path)
+            "Paths that aren't prefixed with a leading / are not supported.\n"
+            + "You supplied: {}".format(path)
         )
-    return "/".join(
-        [
-            requests_pathname.rstrip("/"),
-            path.lstrip("/")
-        ]
-    )
+    return "/".join([requests_pathname.rstrip("/"), path.lstrip("/")])
+
 
 def strip_relative_path(requests_pathname, path):
     if path is None:
         return None
-    elif ((requests_pathname != '/' and
-            not path.startswith(requests_pathname.rstrip('/')))
-            or (requests_pathname == '/' and not path.startswith('/'))):
+    elif (
+        requests_pathname != "/" and not path.startswith(requests_pathname.rstrip("/"))
+    ) or (requests_pathname == "/" and not path.startswith("/")):
         raise exceptions.UnsupportedRelativePath(
-            "Paths that aren't prefixed with a leading " +
-            "requests_pathname_prefix are not supported.\n" +
-            "You supplied: {} and requests_pathname_prefix was {}".format(
-                path,
-                requests_pathname
+            "Paths that aren't prefixed with a leading "
+            + "requests_pathname_prefix are not supported.\n"
+            + "You supplied: {} and requests_pathname_prefix was {}".format(
+                path, requests_pathname
             )
         )
-    if (requests_pathname != '/' and
-            path.startswith(requests_pathname.rstrip('/'))):
+    if requests_pathname != "/" and path.startswith(requests_pathname.rstrip("/")):
         path = path.replace(
             # handle the case where the path might be `/my-dash-app`
             # but the requests_pathname_prefix is `/my-dash-app/`
-            requests_pathname.rstrip('/'),
-            '',
-            1
+            requests_pathname.rstrip("/"),
+            "",
+            1,
         )
-    return path.strip('/')
+    return path.strip("/")
 
 
 # pylint: disable=no-member
@@ -163,8 +155,7 @@ def create_callback_id(output):
     if isinstance(output, (list, tuple)):
         return "..{}..".format(
             "...".join(
-                "{}.{}".format(x.component_id, x.component_property)
-                for x in output
+                "{}.{}".format(x.component_id, x.component_property) for x in output
             )
         )
 
diff --git a/dash/dash.py b/dash/dash.py
index 4a702aab..b1ae3a1a 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -238,9 +238,7 @@ class Dash(object):
                     "since v1.0. See https://dash.plot.ly for details."
                 )
             # any other kwarg mimic the built-in exception
-            raise TypeError(
-                "Dash() got an unexpected keyword argument '" + key + "'"
-            )
+            raise TypeError("Dash() got an unexpected keyword argument '" + key + "'")
 
         # We have 3 cases: server is either True (we create the server), False
         # (defer server creation) or a Flask app instance (we use their server)
@@ -276,16 +274,12 @@ class Dash(object):
             routes_pathname_prefix=routes_prefix,
             requests_pathname_prefix=requests_prefix,
             serve_locally=serve_locally,
-            compress=get_combined_config(
-                "compress", compress, True
-            ),
+            compress=get_combined_config("compress", compress, True),
             meta_tags=meta_tags or [],
             external_scripts=external_scripts or [],
             external_stylesheets=external_stylesheets or [],
             suppress_callback_exceptions=get_combined_config(
-                "suppress_callback_exceptions",
-                suppress_callback_exceptions,
-                False,
+                "suppress_callback_exceptions", suppress_callback_exceptions, False,
             ),
             show_undo_redo=show_undo_redo,
         )
@@ -422,9 +416,7 @@ class Dash(object):
         # catch-all for front-end routes, used by dcc.Location
         self._add_url("{}<path:path>".format(prefix), self.index)
 
-        self._add_url(
-            "{}_favicon.ico".format(prefix), self._serve_default_favicon
-        )
+        self._add_url("{}_favicon.ico".format(prefix), self._serve_default_favicon)
 
     def _add_url(self, name, view_func, methods=("GET",)):
         self.server.add_url_rule(
@@ -538,8 +530,7 @@ class Dash(object):
         def _relative_url_path(relative_package_path="", namespace=""):
 
             module_path = os.path.join(
-                os.path.dirname(sys.modules[namespace].__file__),
-                relative_package_path,
+                os.path.dirname(sys.modules[namespace].__file__), relative_package_path,
             )
 
             modified = int(os.stat(module_path).st_mtime)
@@ -579,9 +570,7 @@ class Dash(object):
                     else:
                         srcs += resource["external_url"]
             elif "absolute_path" in resource:
-                raise Exception(
-                    "Serving files from absolute_path isn't supported yet"
-                )
+                raise Exception("Serving files from absolute_path isn't supported yet")
             elif "asset_path" in resource:
                 static_url = self.get_asset_url(resource["asset_path"])
                 # Add a cache-busting query param
@@ -624,9 +613,7 @@ class Dash(object):
         dev = self._dev_tools.serve_dev_bundles
         srcs = (
             self._collect_and_register_resources(
-                self.scripts._resources._filter_resources(
-                    deps, dev_bundles=dev
-                )
+                self.scripts._resources._filter_resources(deps, dev_bundles=dev)
             )
             + self.config.external_scripts
             + self._collect_and_register_resources(
@@ -643,18 +630,13 @@ class Dash(object):
                 if isinstance(src, dict)
                 else '<script src="{}"></script>'.format(src)
                 for src in srcs
-            ] +
-            [
-                '<script>{}</script>'.format(src)
-                for src in self._inline_scripts
             ]
+            + ["<script>{}</script>".format(src) for src in self._inline_scripts]
         )
 
     def _generate_config_html(self):
         return (
-            '<script id="_dash-config" type="application/json">'
-            "{}"
-            "</script>"
+            '<script id="_dash-config" type="application/json">{}</script>'
         ).format(json.dumps(self._config()))
 
     def _generate_renderer(self):
@@ -673,9 +655,7 @@ class Dash(object):
 
         tags = []
         if not has_ie_compat:
-            tags.append(
-                '<meta http-equiv="X-UA-Compatible" content="IE=edge">'
-            )
+            tags.append('<meta http-equiv="X-UA-Compatible" content="IE=edge">')
         if not has_charset:
             tags.append('<meta charset="UTF-8">')
 
@@ -685,9 +665,7 @@ class Dash(object):
 
     # Serve the JS bundles for each package
     def serve_component_suites(self, package_name, path_in_package_dist):
-        path_in_package_dist, has_fingerprint = check_fingerprint(
-            path_in_package_dist
-        )
+        path_in_package_dist, has_fingerprint = check_fingerprint(path_in_package_dist)
 
         if package_name not in self.registered_paths:
             raise exceptions.DependencyException(
@@ -725,8 +703,7 @@ class Dash(object):
         )
 
         response = flask.Response(
-            pkgutil.get_data(package_name, path_in_package_dist),
-            mimetype=mimetype,
+            pkgutil.get_data(package_name, path_in_package_dist), mimetype=mimetype,
         )
 
         if has_fingerprint:
@@ -739,7 +716,7 @@ class Dash(object):
             response.add_etag()
             tag = response.get_etag()[0]
 
-            request_etag = flask.request.headers.get('If-None-Match')
+            request_etag = flask.request.headers.get("If-None-Match")
 
             if '"{}"'.format(tag) == request_etag:
                 response = flask.Response(None, status=304)
@@ -911,9 +888,7 @@ class Dash(object):
                 if not isinstance(arg, obj):
                     raise exceptions.IncorrectTypeException(
                         "The {} argument `{}` must be "
-                        "of type `dash.{}`.".format(
-                            name.lower(), str(arg), name
-                        )
+                        "of type `dash.{}`.".format(name.lower(), str(arg), name)
                     )
 
                 invalid_characters = ["."]
@@ -950,9 +925,7 @@ class Dash(object):
                             ).format(arg_id, all_ids)
                         )
 
-                    component = (
-                        layout if layout_id == arg_id else layout[arg_id]
-                    )
+                    component = layout if layout_id == arg_id else layout[arg_id]
 
                     if (
                         arg_prop
@@ -972,9 +945,7 @@ class Dash(object):
                             {2}
                         """
                             ).format(
-                                arg_prop,
-                                arg_id,
-                                component.available_properties,
+                                arg_prop, arg_id, component.available_properties,
                             )
                         )
 
@@ -999,9 +970,7 @@ class Dash(object):
                 (Subscribing to input components will cause the
                 callback to be called whenever their values change.)
             """
-                ).format(
-                    len(state), "elements" if len(state) > 1 else "element"
-                )
+                ).format(len(state), "elements" if len(state) > 1 else "element")
             )
 
         for i in inputs:
@@ -1025,9 +994,7 @@ class Dash(object):
                     "multi output callback!\n Duplicates:\n {}".format(
                         ",\n".join(
                             k
-                            for k, v in (
-                                (str(x), output.count(x)) for x in output
-                            )
+                            for k, v in ((str(x), output.count(x)) for x in output)
                             if v > 1
                         )
                     )
@@ -1047,9 +1014,7 @@ class Dash(object):
         if is_multi:
 
             def duplicate_check():
-                ns["duplicates"] = callbacks.intersection(
-                    str(y) for y in output
-                )
+                ns["duplicates"] = callbacks.intersection(str(y) for y in output)
                 return ns["duplicates"]
 
         else:
@@ -1082,9 +1047,7 @@ class Dash(object):
     def _validate_callback_output(output_value, output):
         valid = [str, dict, int, float, type(None), Component]
 
-        def _raise_invalid(
-            bad_val, outer_val, path, index=None, toplevel=False
-        ):
+        def _raise_invalid(bad_val, outer_val, path, index=None, toplevel=False):
             bad_type = type(bad_val).__name__
             outer_id = (
                 "(id={:s})".format(outer_val.id)
@@ -1121,9 +1084,7 @@ class Dash(object):
                     location=(
                         "\n"
                         + (
-                            "[{:d}] {:s} {:s}".format(
-                                index, outer_type, outer_id
-                            )
+                            "[{:d}] {:s} {:s}".format(index, outer_type, outer_id)
                             if index is not None
                             else ("[*] " + outer_type + " " + outer_id)
                         )
@@ -1151,16 +1112,12 @@ class Dash(object):
                 for p, j in val._traverse_with_paths():
                     # check each component value in the tree
                     if not _value_is_valid(j):
-                        _raise_invalid(
-                            bad_val=j, outer_val=val, path=p, index=index
-                        )
+                        _raise_invalid(bad_val=j, outer_val=val, path=p, index=index)
 
                     # Children that are not of type Component or
                     # list/tuple not returned by traverse
                     child = getattr(j, "children", None)
-                    if not isinstance(
-                        child, (tuple, collections.MutableSequence)
-                    ):
+                    if not isinstance(child, (tuple, collections.MutableSequence)):
                         if child and not _value_is_valid(child):
                             _raise_invalid(
                                 bad_val=child,
@@ -1198,9 +1155,7 @@ class Dash(object):
             _validate_value(output_value)
 
     # pylint: disable=dangerous-default-value
-    def clientside_callback(
-        self, clientside_function, output, inputs=[], state=[]
-    ):
+    def clientside_callback(self, clientside_function, output, inputs=[], state=[]):
         """Create a callback that updates the output by calling a clientside
         (JavaScript) function instead of a Python function.
 
@@ -1272,17 +1227,19 @@ class Dash(object):
             if isinstance(output, (list, tuple)):
                 out0 = output[0]
 
-            namespace = '_dashprivate_{}'.format(out0.component_id)
-            function_name = '{}'.format(out0.component_property)
+            namespace = "_dashprivate_{}".format(out0.component_id)
+            function_name = "{}".format(out0.component_property)
 
             self._inline_scripts.append(
                 """
                 var clientside = window.dash_clientside = window.dash_clientside || {{}};
                 var ns = clientside["{0}"] = clientside["{0}"] || {{}};
                 ns["{1}"] = {2};
-                """.format(namespace.replace('"', '\\"'),
-                           function_name.replace('"', '\\"'),
-                           clientside_function)
+                """.format(
+                    namespace.replace('"', '\\"'),
+                    function_name.replace('"', '\\"'),
+                    clientside_function,
+                )
             )
 
         # Callback is stored in an external asset.
@@ -1292,12 +1249,10 @@ class Dash(object):
 
         self.callback_map[callback_id] = {
             "inputs": [
-                {"id": c.component_id, "property": c.component_property}
-                for c in inputs
+                {"id": c.component_id, "property": c.component_property} for c in inputs
             ],
             "state": [
-                {"id": c.component_id, "property": c.component_property}
-                for c in state
+                {"id": c.component_id, "property": c.component_property} for c in state
             ],
             "clientside_function": {
                 "namespace": namespace,
@@ -1325,12 +1280,10 @@ class Dash(object):
 
         self.callback_map[callback_id] = {
             "inputs": [
-                {"id": c.component_id, "property": c.component_property}
-                for c in inputs
+                {"id": c.component_id, "property": c.component_property} for c in inputs
             ],
             "state": [
-                {"id": c.component_id, "property": c.component_property}
-                for c in state
+                {"id": c.component_id, "property": c.component_property} for c in state
             ],
         }
 
@@ -1375,9 +1328,7 @@ class Dash(object):
                         raise exceptions.PreventUpdate
 
                     response = {
-                        "response": {
-                            "props": {output.component_property: output_value}
-                        }
+                        "response": {"props": {output.component_property: output_value}}
                     }
 
                 try:
@@ -1398,8 +1349,7 @@ class Dash(object):
                     or lists of those.
                     """
                         ).format(
-                            property=output.component_property,
-                            id=output.component_id,
+                            property=output.component_property, id=output.component_id,
                         )
                     )
 
@@ -1420,12 +1370,10 @@ class Dash(object):
         args = []
 
         flask.g.input_values = input_values = {
-            "{}.{}".format(x["id"], x["property"]): x.get("value")
-            for x in inputs
+            "{}.{}".format(x["id"], x["property"]): x.get("value") for x in inputs
         }
         flask.g.state_values = {
-            "{}.{}".format(x["id"], x["property"]): x.get("value")
-            for x in state
+            "{}.{}".format(x["id"], x["property"]): x.get("value") for x in state
         }
         changed_props = body.get("changedPropIds")
         flask.g.triggered_inputs = (
@@ -1434,9 +1382,7 @@ class Dash(object):
             else []
         )
 
-        response = flask.g.dash_response = flask.Response(
-            mimetype="application/json"
-        )
+        response = flask.g.dash_response = flask.Response(mimetype="application/json")
 
         for component_registration in self.callback_map[output]["inputs"]:
             args.append(
@@ -1490,7 +1436,7 @@ class Dash(object):
         eager_loading = self.config.eager_loading
         for module_name in ComponentRegistry.registry:
             module = sys.modules[module_name]
-            eager = getattr(module, '_force_eager_loading', False)
+            eager = getattr(module, "_force_eager_loading", False)
             eager_loading = eager_loading or eager
 
         # Update eager_loading settings
@@ -1541,9 +1487,7 @@ class Dash(object):
                 full = os.path.join(current, f)
 
                 if f.endswith("js"):
-                    self.scripts.append_script(
-                        self._add_assets_resource(path, full)
-                    )
+                    self.scripts.append_script(self._add_assets_resource(path, full))
                 elif f.endswith("css"):
                     self.css.append_css(self._add_assets_resource(path, full))
                 elif f == "favicon.ico":
@@ -1556,8 +1500,7 @@ class Dash(object):
     @staticmethod
     def _serve_default_favicon():
         return flask.Response(
-            pkgutil.get_data("dash", "favicon.ico"),
-            content_type="image/x-icon",
+            pkgutil.get_data("dash", "favicon.ico"), content_type="image/x-icon",
         )
 
     def get_asset_url(self, path):
@@ -1606,10 +1549,7 @@ class Dash(object):
                 return chapters.page_2
         ```
         """
-        asset = _get_relative_path(
-            self.config.requests_pathname_prefix,
-            path,
-        )
+        asset = _get_relative_path(self.config.requests_pathname_prefix, path,)
 
         return asset
 
@@ -1660,10 +1600,7 @@ class Dash(object):
         `page-1/sub-page-1`
         ```
         """
-        return _strip_relative_path(
-            self.config.requests_pathname_prefix,
-            path,
-        )
+        return _strip_relative_path(self.config.requests_pathname_prefix, path,)
 
     def _setup_dev_tools(self, **kwargs):
         debug = kwargs.get("debug", False)
@@ -1687,9 +1624,7 @@ class Dash(object):
             ("hot_reload_max_retry", int, 8),
         ):
             dev_tools[attr] = _type(
-                get_combined_config(
-                    attr, kwargs.get(attr, None), default=default
-                )
+                get_combined_config(attr, kwargs.get(attr, None), default=default)
             )
 
         return dev_tools
@@ -1808,8 +1743,7 @@ class Dash(object):
                 else package.filename
                 for package in (
                     pkgutil.find_loader(x)
-                    for x in list(ComponentRegistry.registry)
-                    + ["dash_renderer"]
+                    for x in list(ComponentRegistry.registry) + ["dash_renderer"]
                 )
             ]
 
@@ -1864,9 +1798,7 @@ class Dash(object):
                 asset_path = (
                     os.path.relpath(
                         filename,
-                        os.path.commonprefix(
-                            [self.config.assets_folder, filename]
-                        ),
+                        os.path.commonprefix([self.config.assets_folder, filename]),
                     )
                     .replace("\\", "/")
                     .lstrip("/")
diff --git a/dash/dependencies.py b/dash/dependencies.py
index 3d9b583c..01277802 100644
--- a/dash/dependencies.py
+++ b/dash/dependencies.py
@@ -5,13 +5,10 @@ class DashDependency:
         self.component_property = component_property
 
     def __str__(self):
-        return '{}.{}'.format(
-            self.component_id,
-            self.component_property
-        )
+        return "{}.{}".format(self.component_id, self.component_property)
 
     def __repr__(self):
-        return '<{} `{}`>'.format(self.__class__.__name__, self)
+        return "<{} `{}`>".format(self.__class__.__name__, self)
 
     def __eq__(self, other):
         return isinstance(other, DashDependency) and str(self) == str(other)
@@ -36,18 +33,16 @@ class ClientsideFunction:
     # pylint: disable=too-few-public-methods
     def __init__(self, namespace=None, function_name=None):
 
-        if namespace.startswith('_dashprivate_'):
+        if namespace.startswith("_dashprivate_"):
             raise ValueError("Namespaces cannot start with '_dashprivate_'.")
 
-        if namespace in ['PreventUpdate', 'no_update']:
-            raise ValueError('"{}" is a forbidden namespace in'
-                             ' dash_clientside.'.format(namespace))
+        if namespace in ["PreventUpdate", "no_update"]:
+            raise ValueError(
+                '"{}" is a forbidden namespace in' " dash_clientside.".format(namespace)
+            )
 
         self.namespace = namespace
         self.function_name = function_name
 
     def __repr__(self):
-        return 'ClientsideFunction({}, {})'.format(
-            self.namespace,
-            self.function_name
-        )
+        return "ClientsideFunction({}, {})".format(self.namespace, self.function_name)
diff --git a/dash/development/_py_components_generation.py b/dash/development/_py_components_generation.py
index ac5179ad..37e94b75 100644
--- a/dash/development/_py_components_generation.py
+++ b/dash/development/_py_components_generation.py
@@ -70,29 +70,31 @@ def generate_class_string(typename, props, description, namespace):
     wildcard_prefixes = repr(parse_wildcards(props))
     list_of_valid_keys = repr(list(map(str, filtered_props.keys())))
     docstring = create_docstring(
-        component_name=typename,
-        props=filtered_props,
-        description=description).replace('\r\n', '\n')
+        component_name=typename, props=filtered_props, description=description
+    ).replace("\r\n", "\n")
 
     prohibit_events(props)
 
     # pylint: disable=unused-variable
     prop_keys = list(props.keys())
-    if 'children' in props:
-        prop_keys.remove('children')
+    if "children" in props:
+        prop_keys.remove("children")
         default_argtext = "children=None, "
-        argtext = 'children=children, **args'
+        argtext = "children=children, **args"
     else:
         default_argtext = ""
-        argtext = '**args'
+        argtext = "**args"
     default_argtext += ", ".join(
-        [('{:s}=Component.REQUIRED'.format(p)
-          if props[p]['required'] else
-          '{:s}=Component.UNDEFINED'.format(p))
-         for p in prop_keys
-         if not p.endswith("-*") and
-         p not in python_keywords and
-         p != 'setProps'] + ["**kwargs"]
+        [
+            (
+                "{:s}=Component.REQUIRED".format(p)
+                if props[p]["required"]
+                else "{:s}=Component.UNDEFINED".format(p)
+            )
+            for p in prop_keys
+            if not p.endswith("-*") and p not in python_keywords and p != "setProps"
+        ]
+        + ["**kwargs"]
     )
     required_args = required_props(props)
     return c.format(
@@ -104,7 +106,7 @@ def generate_class_string(typename, props, description, namespace):
         docstring=docstring,
         default_argtext=default_argtext,
         argtext=argtext,
-        required_props=required_args
+        required_props=required_args,
     )
 
 
@@ -121,33 +123,29 @@ def generate_class_file(typename, props, description, namespace):
     Returns
     -------
     """
-    import_string =\
-        "# AUTO GENERATED FILE - DO NOT EDIT\n\n" + \
-        "from dash.development.base_component import " + \
-        "Component, _explicitize_args\n\n\n"
-    class_string = generate_class_string(
-        typename,
-        props,
-        description,
-        namespace
+    import_string = (
+        "# AUTO GENERATED FILE - DO NOT EDIT\n\n"
+        + "from dash.development.base_component import "
+        + "Component, _explicitize_args\n\n\n"
     )
+    class_string = generate_class_string(typename, props, description, namespace)
     file_name = "{:s}.py".format(typename)
 
     file_path = os.path.join(namespace, file_name)
-    with open(file_path, 'w') as f:
+    with open(file_path, "w") as f:
         f.write(import_string)
         f.write(class_string)
 
-    print('Generated {}'.format(file_name))
+    print("Generated {}".format(file_name))
 
 
 def generate_imports(project_shortname, components):
-    with open(os.path.join(project_shortname, '_imports_.py'), 'w') as f:
-        imports_string = '{}\n\n{}'.format(
-            '\n'.join(
-                'from .{0} import {0}'.format(x) for x in components),
-            '__all__ = [\n{}\n]'.format(
-                ',\n'.join('    "{}"'.format(x) for x in components))
+    with open(os.path.join(project_shortname, "_imports_.py"), "w") as f:
+        imports_string = "{}\n\n{}".format(
+            "\n".join("from .{0} import {0}".format(x) for x in components),
+            "__all__ = [\n{}\n]".format(
+                ",\n".join('    "{}"'.format(x) for x in components)
+            ),
         )
 
         f.write(imports_string)
@@ -156,15 +154,15 @@ def generate_imports(project_shortname, components):
 def generate_classes_files(project_shortname, metadata, *component_generators):
     components = []
     for component_path, component_data in metadata.items():
-        component_name = component_path.split('/')[-1].split('.')[0]
+        component_name = component_path.split("/")[-1].split(".")[0]
         components.append(component_name)
 
         for generator in component_generators:
             generator(
                 component_name,
-                component_data['props'],
-                component_data['description'],
-                project_shortname
+                component_data["props"],
+                component_data["description"],
+                project_shortname,
             )
 
     return components
@@ -184,7 +182,7 @@ def generate_class(typename, props, description, namespace):
     -------
     """
     string = generate_class_string(typename, props, description, namespace)
-    scope = {'Component': Component, '_explicitize_args': _explicitize_args}
+    scope = {"Component": Component, "_explicitize_args": _explicitize_args}
     # pylint: disable=exec-used
     exec(string, scope)
     result = scope[typename]
@@ -203,8 +201,7 @@ def required_props(props):
     list
         List of prop names (str) that are required for the Component
     """
-    return [prop_name for prop_name, prop in list(props.items())
-            if prop['required']]
+    return [prop_name for prop_name, prop in list(props.items()) if prop["required"]]
 
 
 def create_docstring(component_name, props, description):
@@ -232,21 +229,22 @@ def create_docstring(component_name, props, description):
 
 Keyword arguments:\n{args}"""
     ).format(
-        n='n' if component_name[0].lower() in ['a', 'e', 'i', 'o', 'u']
-        else '',
+        n="n" if component_name[0].lower() in ["a", "e", "i", "o", "u"] else "",
         name=component_name,
         description=description,
-        args='\n'.join(
+        args="\n".join(
             create_prop_docstring(
                 prop_name=p,
-                type_object=prop['type'] if 'type' in prop
-                else prop['flowType'],
-                required=prop['required'],
-                description=prop['description'],
-                default=prop.get('defaultValue'),
+                type_object=prop["type"] if "type" in prop else prop["flowType"],
+                required=prop["required"],
+                description=prop["description"],
+                default=prop.get("defaultValue"),
                 indent_num=0,
-                is_flow_type='flowType' in prop and 'type' not in prop)
-            for p, prop in list(filter_props(props).items())))
+                is_flow_type="flowType" in prop and "type" not in prop,
+            )
+            for p, prop in list(filter_props(props).items())
+        ),
+    )
 
 
 def prohibit_events(props):
@@ -262,10 +260,11 @@ def prohibit_events(props):
     -------
     ?
     """
-    if 'dashEvents' in props or 'fireEvents' in props:
+    if "dashEvents" in props or "fireEvents" in props:
         raise NonExistentEventException(
-            'Events are no longer supported by dash. Use properties instead, '
-            'eg `n_clicks` instead of a `click` event.')
+            "Events are no longer supported by dash. Use properties instead, "
+            "eg `n_clicks` instead of a `click` event."
+        )
 
 
 def parse_wildcards(props):
@@ -302,11 +301,11 @@ def reorder_props(props):
     dict
         Dictionary with {propName: propMetadata} structure
     """
-    if 'children' in props:
+    if "children" in props:
         # Constructing an OrderedDict with duplicate keys, you get the order
         # from the first one but the value from the last.
         # Doing this to avoid mutating props, which can cause confusion.
-        props = OrderedDict([('children', '')] + list(props.items()))
+        props = OrderedDict([("children", "")] + list(props.items()))
 
     return props
 
@@ -360,23 +359,22 @@ def filter_props(props):
     filtered_props = copy.deepcopy(props)
 
     for arg_name, arg in list(filtered_props.items()):
-        if 'type' not in arg and 'flowType' not in arg:
+        if "type" not in arg and "flowType" not in arg:
             filtered_props.pop(arg_name)
             continue
 
         # Filter out functions and instances --
         # these cannot be passed from Python
-        if 'type' in arg:  # These come from PropTypes
-            arg_type = arg['type']['name']
-            if arg_type in {'func', 'symbol', 'instanceOf'}:
+        if "type" in arg:  # These come from PropTypes
+            arg_type = arg["type"]["name"]
+            if arg_type in {"func", "symbol", "instanceOf"}:
                 filtered_props.pop(arg_name)
-        elif 'flowType' in arg:  # These come from Flow & handled differently
-            arg_type_name = arg['flowType']['name']
-            if arg_type_name == 'signature':
+        elif "flowType" in arg:  # These come from Flow & handled differently
+            arg_type_name = arg["flowType"]["name"]
+            if arg_type_name == "signature":
                 # This does the same as the PropTypes filter above, but "func"
                 # is under "type" if "name" is "signature" vs just in "name"
-                if 'type' not in arg['flowType'] \
-                        or arg['flowType']['type'] != 'object':
+                if "type" not in arg["flowType"] or arg["flowType"]["type"] != "object":
                     filtered_props.pop(arg_name)
         else:
             raise ValueError
@@ -385,8 +383,15 @@ def filter_props(props):
 
 
 # pylint: disable=too-many-arguments
-def create_prop_docstring(prop_name, type_object, required, description,
-                          default, indent_num, is_flow_type=False):
+def create_prop_docstring(
+    prop_name,
+    type_object,
+    required,
+    description,
+    default,
+    indent_num,
+    is_flow_type=False,
+):
     """Create the Dash component prop docstring.
 
     Parameters
@@ -415,116 +420,109 @@ def create_prop_docstring(prop_name, type_object, required, description,
         Dash component prop docstring
     """
     py_type_name = js_to_py_type(
-        type_object=type_object,
-        is_flow_type=is_flow_type,
-        indent_num=indent_num + 1)
-    indent_spacing = '  ' * indent_num
+        type_object=type_object, is_flow_type=is_flow_type, indent_num=indent_num + 1
+    )
+    indent_spacing = "  " * indent_num
 
     if default is None:
-        default = ''
+        default = ""
     else:
-        default = default['value']
+        default = default["value"]
 
-    if default in ['true', 'false']:
+    if default in ["true", "false"]:
         default = default.title()
 
-    is_required = 'optional'
+    is_required = "optional"
     if required:
-        is_required = 'required'
-    elif default and default not in ['null', '{}', '[]']:
-        is_required = 'default {}'.format(
-            default.replace('\n', '\n' + indent_spacing)
-        )
-
-    if '\n' in py_type_name:
-        return '{indent_spacing}- {name} (dict; {is_required}): ' \
-            '{description}{period}' \
-            '{name} has the following type: {type}'.format(
+        is_required = "required"
+    elif default and default not in ["null", "{}", "[]"]:
+        is_required = "default {}".format(default.replace("\n", "\n" + indent_spacing))
+
+    if "\n" in py_type_name:
+        return (
+            "{indent_spacing}- {name} (dict; {is_required}): "
+            "{description}{period}"
+            "{name} has the following type: {type}".format(
                 indent_spacing=indent_spacing,
                 name=prop_name,
                 type=py_type_name,
-                description=description.strip().strip('.'),
-                period='. ' if description else '',
-                is_required=is_required)
-    return '{indent_spacing}- {name} ({type}' \
-        '{is_required}){description}'.format(
-            indent_spacing=indent_spacing,
-            name=prop_name,
-            type='{}; '.format(py_type_name) if py_type_name else '',
-            description=(
-                ': {}'.format(description) if description != '' else ''
-            ),
-            is_required=is_required)
+                description=description.strip().strip("."),
+                period=". " if description else "",
+                is_required=is_required,
+            )
+        )
+    return "{indent_spacing}- {name} ({type}{is_required}){description}".format(
+        indent_spacing=indent_spacing,
+        name=prop_name,
+        type="{}; ".format(py_type_name) if py_type_name else "",
+        description=(": {}".format(description) if description != "" else ""),
+        is_required=is_required,
+    )
 
 
 def map_js_to_py_types_prop_types(type_object):
     """Mapping from the PropTypes js type object to the Python type."""
 
     def shape_or_exact():
-        return 'dict containing keys {}.\n{}'.format(
-            ', '.join(
-                "'{}'".format(t) for t in list(type_object['value'].keys())
-            ),
-            'Those keys have the following types:\n{}'.format(
-                '\n'.join(
+        return "dict containing keys {}.\n{}".format(
+            ", ".join("'{}'".format(t) for t in list(type_object["value"].keys())),
+            "Those keys have the following types:\n{}".format(
+                "\n".join(
                     create_prop_docstring(
                         prop_name=prop_name,
                         type_object=prop,
-                        required=prop['required'],
-                        description=prop.get('description', ''),
-                        default=prop.get('defaultValue'),
-                        indent_num=1
-                    ) for prop_name, prop in
-                    list(type_object['value'].items())))
-            )
+                        required=prop["required"],
+                        description=prop.get("description", ""),
+                        default=prop.get("defaultValue"),
+                        indent_num=1,
+                    )
+                    for prop_name, prop in list(type_object["value"].items())
+                )
+            ),
+        )
 
     return dict(
-        array=lambda: 'list',
-        bool=lambda: 'boolean',
-        number=lambda: 'number',
-        string=lambda: 'string',
-        object=lambda: 'dict',
-        any=lambda: 'boolean | number | string | dict | list',
-        element=lambda: 'dash component',
-        node=lambda: 'a list of or a singular dash '
-                     'component, string or number',
-
+        array=lambda: "list",
+        bool=lambda: "boolean",
+        number=lambda: "number",
+        string=lambda: "string",
+        object=lambda: "dict",
+        any=lambda: "boolean | number | string | dict | list",
+        element=lambda: "dash component",
+        node=lambda: "a list of or a singular dash component, string or number",
         # React's PropTypes.oneOf
-        enum=lambda: 'a value equal to: {}'.format(
-            ', '.join(
-                '{}'.format(str(t['value']))
-                for t in type_object['value'])),
-
+        enum=lambda: "a value equal to: {}".format(
+            ", ".join("{}".format(str(t["value"])) for t in type_object["value"])
+        ),
         # React's PropTypes.oneOfType
-        union=lambda: '{}'.format(
-            ' | '.join(
-                '{}'.format(js_to_py_type(subType))
-                for subType in type_object['value']
-                if js_to_py_type(subType) != '')),
-
+        union=lambda: "{}".format(
+            " | ".join(
+                "{}".format(js_to_py_type(subType))
+                for subType in type_object["value"]
+                if js_to_py_type(subType) != ""
+            )
+        ),
         # React's PropTypes.arrayOf
         arrayOf=lambda: (
-            "list" + (" of {}".format(
-                js_to_py_type(type_object["value"]) + 's'
-                if js_to_py_type(type_object["value"]).split(' ')[0] != 'dict'
-                else js_to_py_type(type_object["value"]).replace(
-                        'dict', 'dicts', 1
+            "list"
+            + (
+                " of {}".format(
+                    js_to_py_type(type_object["value"]) + "s"
+                    if js_to_py_type(type_object["value"]).split(" ")[0] != "dict"
+                    else js_to_py_type(type_object["value"]).replace("dict", "dicts", 1)
                 )
+                if js_to_py_type(type_object["value"]) != ""
+                else ""
             )
-                      if js_to_py_type(type_object["value"]) != ""
-                      else "")
         ),
-
         # React's PropTypes.objectOf
-        objectOf=lambda: (
-            'dict with strings as keys and values of type {}'
-            ).format(
-                js_to_py_type(type_object['value'])),
-
+        objectOf=lambda: ("dict with strings as keys and values of type {}").format(
+            js_to_py_type(type_object["value"])
+        ),
         # React's PropTypes.shape
         shape=shape_or_exact,
         # React's PropTypes.exact
-        exact=shape_or_exact
+        exact=shape_or_exact,
     )
 
 
@@ -532,46 +530,49 @@ def map_js_to_py_types_flow_types(type_object):
     """Mapping from the Flow js types to the Python type."""
 
     return dict(
-        array=lambda: 'list',
-        boolean=lambda: 'boolean',
-        number=lambda: 'number',
-        string=lambda: 'string',
-        Object=lambda: 'dict',
-        any=lambda: 'bool | number | str | dict | list',
-        Element=lambda: 'dash component',
-        Node=lambda: 'a list of or a singular dash '
-                     'component, string or number',
-
+        array=lambda: "list",
+        boolean=lambda: "boolean",
+        number=lambda: "number",
+        string=lambda: "string",
+        Object=lambda: "dict",
+        any=lambda: "bool | number | str | dict | list",
+        Element=lambda: "dash component",
+        Node=lambda: "a list of or a singular dash component, string or number",
         # React's PropTypes.oneOfType
-        union=lambda: '{}'.format(
-            ' | '.join(
-                '{}'.format(js_to_py_type(subType))
-                for subType in type_object['elements']
-                if js_to_py_type(subType) != '')),
-
+        union=lambda: "{}".format(
+            " | ".join(
+                "{}".format(js_to_py_type(subType))
+                for subType in type_object["elements"]
+                if js_to_py_type(subType) != ""
+            )
+        ),
         # Flow's Array type
-        Array=lambda: 'list{}'.format(
-            ' of {}s'.format(
-                js_to_py_type(type_object['elements'][0]))
-            if js_to_py_type(type_object['elements'][0]) != ''
-            else ''),
-
+        Array=lambda: "list{}".format(
+            " of {}s".format(js_to_py_type(type_object["elements"][0]))
+            if js_to_py_type(type_object["elements"][0]) != ""
+            else ""
+        ),
         # React's PropTypes.shape
-        signature=lambda indent_num: 'dict containing keys {}.\n{}'.format(
-            ', '.join("'{}'".format(d['key'])
-                      for d in type_object['signature']['properties']),
-            '{}Those keys have the following types:\n{}'.format(
-                '  ' * indent_num,
-                '\n'.join(
+        signature=lambda indent_num: "dict containing keys {}.\n{}".format(
+            ", ".join(
+                "'{}'".format(d["key"]) for d in type_object["signature"]["properties"]
+            ),
+            "{}Those keys have the following types:\n{}".format(
+                "  " * indent_num,
+                "\n".join(
                     create_prop_docstring(
-                        prop_name=prop['key'],
-                        type_object=prop['value'],
-                        required=prop['value']['required'],
-                        description=prop['value'].get('description', ''),
-                        default=prop.get('defaultValue'),
+                        prop_name=prop["key"],
+                        type_object=prop["value"],
+                        required=prop["value"]["required"],
+                        description=prop["value"].get("description", ""),
+                        default=prop.get("defaultValue"),
                         indent_num=indent_num,
-                        is_flow_type=True)
-                    for prop in type_object['signature']['properties']))),
+                        is_flow_type=True,
+                    )
+                    for prop in type_object["signature"]["properties"]
+                ),
+            ),
+        ),
     )
 
 
@@ -592,17 +593,22 @@ def js_to_py_type(type_object, is_flow_type=False, indent_num=0):
     str
         Python type string
     """
-    js_type_name = type_object['name']
-    js_to_py_types = map_js_to_py_types_flow_types(type_object=type_object) \
-        if is_flow_type \
+    js_type_name = type_object["name"]
+    js_to_py_types = (
+        map_js_to_py_types_flow_types(type_object=type_object)
+        if is_flow_type
         else map_js_to_py_types_prop_types(type_object=type_object)
+    )
 
-    if 'computed' in type_object and type_object['computed'] \
-            or type_object.get('type', '') == 'function':
-        return ''
+    if (
+        "computed" in type_object
+        and type_object["computed"]
+        or type_object.get("type", "") == "function"
+    ):
+        return ""
     if js_type_name in js_to_py_types:
-        if js_type_name == 'signature':  # This is a Flow object w/ signature
+        if js_type_name == "signature":  # This is a Flow object w/ signature
             return js_to_py_types[js_type_name](indent_num)
         # All other types
         return js_to_py_types[js_type_name]()
-    return ''
+    return ""
diff --git a/dash/development/_r_components_generation.py b/dash/development/_r_components_generation.py
index 95bc3efc..f3906526 100644
--- a/dash/development/_r_components_generation.py
+++ b/dash/development/_r_components_generation.py
@@ -46,7 +46,7 @@ version = "{project_ver}", src = list(href = NULL,
 file = "deps"), meta = NULL,
 script = {script_name},
 stylesheet = {css_name}, head = NULL, attachment = NULL, package = "{rpkgname}",
-all_files = FALSE{async_or_dynamic}), class = "html_dependency")"""   # noqa:E501
+all_files = FALSE{async_or_dynamic}), class = "html_dependency")"""  # noqa:E501
 
 frame_body_template = """`{project_shortname}` = structure(list(name = "{project_shortname}",
 version = "{project_ver}", src = list(href = NULL,
@@ -203,9 +203,7 @@ def generate_class_string(name, props, project_shortname, prefix):
 
     # Produce a string with all property names other than WCs
     prop_names = ", ".join(
-        "'{}'".format(p)
-        for p in prop_keys
-        if "*" not in p and p not in ["setProps"]
+        "'{}'".format(p) for p in prop_keys if "*" not in p and p not in ["setProps"]
     )
 
     # Filter props to remove those we don't want to expose
@@ -214,10 +212,12 @@ def generate_class_string(name, props, project_shortname, prefix):
             prop_keys.remove(item)
         elif item in r_keywords:
             prop_keys.remove(item)
-            warnings.warn((
-                'WARNING: prop "{}" in component "{}" is an R keyword'
-                ' - REMOVED FROM THE R COMPONENT'
-            ).format(item, name))
+            warnings.warn(
+                (
+                    'WARNING: prop "{}" in component "{}" is an R keyword'
+                    " - REMOVED FROM THE R COMPONENT"
+                ).format(item, name)
+            )
 
     default_argtext += ", ".join("{}=NULL".format(p) for p in prop_keys)
 
@@ -227,16 +227,18 @@ def generate_class_string(name, props, project_shortname, prefix):
         for p in prop_keys
     )
 
-    return r_component_string.format(funcname=format_fn_name(prefix, name),
-                                     name=name,
-                                     default_argtext=default_argtext,
-                                     wildcards=wildcards,
-                                     wildcard_declaration=wildcard_declaration,
-                                     default_paramtext=default_paramtext,
-                                     project_shortname=project_shortname,
-                                     prop_names=prop_names,
-                                     wildcard_names=wildcard_names,
-                                     package_name=package_name)
+    return r_component_string.format(
+        funcname=format_fn_name(prefix, name),
+        name=name,
+        default_argtext=default_argtext,
+        wildcards=wildcards,
+        wildcard_declaration=wildcard_declaration,
+        default_paramtext=default_paramtext,
+        project_shortname=project_shortname,
+        prop_names=prop_names,
+        wildcard_names=wildcard_names,
+        package_name=package_name,
+    )
 
 
 # pylint: disable=R0914
@@ -288,10 +290,10 @@ def generate_js_metadata(pkg_data, project_shortname):
 
             if "css" in rpp:
                 css_name = "'{}'".format(rpp)
-                script_name = 'NULL'
+                script_name = "NULL"
             else:
                 script_name = "'{}'".format(rpp)
-                css_name = 'NULL'
+                css_name = "NULL"
 
             function_frame += [
                 frame_element_template.format(
@@ -341,14 +343,13 @@ def generate_js_metadata(pkg_data, project_shortname):
 def get_async_type(dep):
     async_or_dynamic = ""
     for key in dep.keys():
-        if key in ['async', 'dynamic']:
+        if key in ["async", "dynamic"]:
             keyval = dep[key]
             if not isinstance(keyval, bool):
                 keyval = "'{}'".format(keyval.lower())
             else:
                 keyval = str(keyval).upper()
-            async_or_dynamic = \
-                ", {} = {}".format(key, keyval)
+            async_or_dynamic = ", {} = {}".format(key, keyval)
     return async_or_dynamic
 
 
@@ -357,7 +358,7 @@ def get_async_type(dep):
 def wrap(tag, code):
     if tag == "":
         return code
-    return '\\{}{{\n{}}}'.format(tag, code)
+    return "\\{}{{\n{}}}".format(tag, code)
 
 
 def write_help_file(name, props, description, prefix, rpkg_data):
@@ -392,9 +393,7 @@ def write_help_file(name, props, description, prefix, rpkg_data):
 
     item_text += "\n\n".join(
         "\\item{{{}}}{{{}{}}}".format(
-            p,
-            print_r_type(props[p]["type"]),
-            props[p]["description"]
+            p, print_r_type(props[p]["type"]), props[p]["description"]
         )
         for p in prop_keys
     )
@@ -409,43 +408,43 @@ def write_help_file(name, props, description, prefix, rpkg_data):
         description = description.split("**Example Usage**")[0].rstrip()
 
     if any(key.endswith("-*") for key in prop_keys):
-        default_argtext += ', ...'
+        default_argtext += ", ..."
         item_text += wildcard_help_template.format(get_wildcards_r(prop_keys))
 
     # in R, the online help viewer does not properly wrap lines for
     # the usage string -- we will hard wrap at 80 characters using
     # textwrap.fill, starting from the beginning of the usage string
 
-    file_path = os.path.join('man', file_name)
-    with open(file_path, 'w') as f:
-        f.write(help_string.format(
-            funcname=funcname,
-            name=name,
-            default_argtext=textwrap.fill(default_argtext,
-                                          width=80,
-                                          break_long_words=False),
-            item_text=item_text,
-            description=description.replace('\n', ' ')
-        ))
-    if rpkg_data is not None and 'r_examples' in rpkg_data:
-        ex = rpkg_data.get('r_examples')
+    file_path = os.path.join("man", file_name)
+    with open(file_path, "w") as f:
+        f.write(
+            help_string.format(
+                funcname=funcname,
+                name=name,
+                default_argtext=textwrap.fill(
+                    default_argtext, width=80, break_long_words=False
+                ),
+                item_text=item_text,
+                description=description.replace("\n", " "),
+            )
+        )
+    if rpkg_data is not None and "r_examples" in rpkg_data:
+        ex = rpkg_data.get("r_examples")
         the_ex = ([e for e in ex if e.get("name") == funcname] or [None])[0]
         result = ""
         if the_ex and "code" in the_ex.keys():
-            result += wrap("examples",
-                           wrap("dontrun" if the_ex.get("dontrun") else "",
-                                the_ex["code"]))
-            with open(file_path, 'a+') as fa:
-                fa.write(result + '\n')
+            result += wrap(
+                "examples",
+                wrap("dontrun" if the_ex.get("dontrun") else "", the_ex["code"]),
+            )
+            with open(file_path, "a+") as fa:
+                fa.write(result + "\n")
 
 
 # pylint: disable=too-many-arguments
-def write_class_file(name,
-                     props,
-                     description,
-                     project_shortname,
-                     prefix=None,
-                     rpkg_data=None):
+def write_class_file(
+    name, props, description, project_shortname, prefix=None, rpkg_data=None
+):
     props = reorder_props(props=props)
 
     # generate the R help pages for each of the Dash components that we
@@ -455,11 +454,8 @@ def write_class_file(name,
     # from within Python
     write_help_file(name, props, description, prefix, rpkg_data)
 
-    import_string =\
-        "# AUTO GENERATED FILE - DO NOT EDIT\n\n"
-    class_string = generate_class_string(
-        name, props, project_shortname, prefix
-    )
+    import_string = "# AUTO GENERATED FILE - DO NOT EDIT\n\n"
+    class_string = generate_class_string(name, props, project_shortname, prefix)
 
     file_name = format_fn_name(prefix, name) + ".R"
 
@@ -518,14 +514,14 @@ def write_js_metadata(pkg_data, project_shortname, has_wildcards):
 
 # pylint: disable=R0914, R0913, R0912, R0915
 def generate_rpkg(
-        pkg_data,
-        rpkg_data,
-        project_shortname,
-        export_string,
-        package_depends,
-        package_imports,
-        package_suggests,
-        has_wildcards,
+    pkg_data,
+    rpkg_data,
+    project_shortname,
+    export_string,
+    package_depends,
+    package_imports,
+    package_suggests,
+    has_wildcards,
 ):
     """Generate documents for R package creation.
 
@@ -552,13 +548,13 @@ def generate_rpkg(
 
     if rpkg_data is not None:
         if rpkg_data.get("pkg_help_title"):
-            package_title = rpkg_data.get("pkg_help_title",
-                                          pkg_data.get("description",
-                                                       ""))
+            package_title = rpkg_data.get(
+                "pkg_help_title", pkg_data.get("description", "")
+            )
         if rpkg_data.get("pkg_help_description"):
-            package_description = rpkg_data.get("pkg_help_description",
-                                                pkg_data.get("description",
-                                                             ""))
+            package_description = rpkg_data.get(
+                "pkg_help_description", pkg_data.get("description", "")
+            )
     else:
         # fall back to using description in package.json, if present
         package_title = pkg_data.get("description", "")
@@ -620,9 +616,9 @@ def generate_rpkg(
             os.symlink("LICENSE.txt", "LICENSE")
 
     import_string = "# AUTO GENERATED FILE - DO NOT EDIT\n\n"
-    packages_string = ''
+    packages_string = ""
 
-    rpackage_list = package_depends.split(', ') + package_imports.split(', ')
+    rpackage_list = package_depends.split(", ") + package_imports.split(", ")
     rpackage_list = filter(bool, rpackage_list)
 
     if rpackage_list:
@@ -631,8 +627,7 @@ def generate_rpkg(
 
     if os.path.exists("vignettes"):
         vignette_builder = "\nVignetteBuilder: knitr"
-        if "knitr" not in package_suggests and \
-           "rmarkdown" not in package_suggests:
+        if "knitr" not in package_suggests and "rmarkdown" not in package_suggests:
             package_suggests += ", knitr, rmarkdown".lstrip(", ")
     else:
         vignette_builder = ""
@@ -705,23 +700,23 @@ def format_fn_name(prefix, name):
 
 # pylint: disable=unused-argument
 def generate_exports(
-        project_shortname,
-        components,
-        metadata,
-        pkg_data,
-        rpkg_data,
-        prefix,
-        package_depends,
-        package_imports,
-        package_suggests,
-        **kwargs
+    project_shortname,
+    components,
+    metadata,
+    pkg_data,
+    rpkg_data,
+    prefix,
+    package_depends,
+    package_imports,
+    package_suggests,
+    **kwargs
 ):
     export_string = make_namespace_exports(components, prefix)
 
     # Look for wildcards in the metadata
     has_wildcards = False
     for component_data in metadata.values():
-        if any(key.endswith('-*') for key in component_data['props']):
+        if any(key.endswith("-*") for key in component_data["props"]):
             has_wildcards = True
             break
 
@@ -744,9 +739,9 @@ def make_namespace_exports(components, prefix):
     export_string = ""
     for component in components:
         if (
-                not component.endswith("-*")
-                and str(component) not in r_keywords
-                and str(component) not in ["setProps", "children"]
+            not component.endswith("-*")
+            and str(component) not in r_keywords
+            and str(component) not in ["setProps", "children"]
         ):
             export_string += "export({}{})\n".format(prefix, component)
 
@@ -769,7 +764,7 @@ def make_namespace_exports(components, prefix):
             s = script.read()
 
             # remove comments
-            s = re.sub('#.*$', '', s, flags=re.M)
+            s = re.sub("#.*$", "", s, flags=re.M)
 
             # put the whole file on one line
             s = s.replace("\n", " ").replace("\r", " ")
@@ -790,7 +785,8 @@ def make_namespace_exports(components, prefix):
             # now, in whatever is left, look for functions
             matches = re.findall(
                 # in R, either = or <- may be used to create and assign objects
-                r"([^A-Za-z0-9._]|^)([A-Za-z0-9._]+)\s*(=|<-)\s*function", s
+                r"([^A-Za-z0-9._]|^)([A-Za-z0-9._]+)\s*(=|<-)\s*function",
+                s,
             )
             for match in matches:
                 fn = match[1]
@@ -798,8 +794,7 @@ def make_namespace_exports(components, prefix):
                 if fn[0] != "." and fn not in fnlist:
                     fnlist.append(fn)
 
-    export_string += "\n".join("export({})".format(function)
-                               for function in fnlist)
+    export_string += "\n".join("export({})".format(function) for function in fnlist)
     return export_string
 
 
@@ -807,21 +802,21 @@ def get_r_prop_types(type_object):
     """Mapping from the PropTypes js type object to the R type."""
 
     def shape_or_exact():
-        return 'lists containing elements {}.\n{}'.format(
-            ', '.join(
-                "'{}'".format(t) for t in list(type_object['value'].keys())
-            ),
-            'Those elements have the following types:\n{}'.format(
-                '\n'.join(
+        return "lists containing elements {}.\n{}".format(
+            ", ".join("'{}'".format(t) for t in list(type_object["value"].keys())),
+            "Those elements have the following types:\n{}".format(
+                "\n".join(
                     create_prop_docstring_r(
                         prop_name=prop_name,
                         type_object=prop,
-                        required=prop['required'],
-                        description=prop.get('description', ''),
-                        indent_num=1
-                    ) for prop_name, prop in
-                    list(type_object['value'].items())))
-            )
+                        required=prop["required"],
+                        description=prop.get("description", ""),
+                        indent_num=1,
+                    )
+                    for prop_name, prop in list(type_object["value"].items())
+                )
+            ),
+        )
 
     return dict(
         array=lambda: "unnamed list",
@@ -829,15 +824,12 @@ def get_r_prop_types(type_object):
         number=lambda: "numeric",
         string=lambda: "character",
         object=lambda: "named list",
-        any=lambda: "logical | numeric | character | "
-                    "named list | unnamed list",
+        any=lambda: "logical | numeric | character | named list | unnamed list",
         element=lambda: "dash component",
-        node=lambda: "a list of or a singular dash "
-                     "component, string or number",
+        node=lambda: "a list of or a singular dash component, string or number",
         # React's PropTypes.oneOf
         enum=lambda: "a value equal to: {}".format(
-            ", ".join("{}".format(str(t["value"]))
-                      for t in type_object["value"])
+            ", ".join("{}".format(str(t["value"])) for t in type_object["value"])
         ),
         # React's PropTypes.oneOfType
         union=lambda: "{}".format(
@@ -849,22 +841,21 @@ def get_r_prop_types(type_object):
         ),
         # React's PropTypes.arrayOf
         arrayOf=lambda: (
-            "list" + (" of {}s".format(
-                get_r_type(type_object["value"]))
-                      if get_r_type(type_object["value"]) != ""
-                      else "")
+            "list"
+            + (
+                " of {}s".format(get_r_type(type_object["value"]))
+                if get_r_type(type_object["value"]) != ""
+                else ""
+            )
         ),
         # React's PropTypes.objectOf
-        objectOf=lambda: (
-            "list with named elements and values of type {}"
-            ).format(
-                get_r_type(type_object["value"])
-            ),
-
+        objectOf=lambda: ("list with named elements and values of type {}").format(
+            get_r_type(type_object["value"])
+        ),
         # React's PropTypes.shape
         shape=shape_or_exact,
         # React's PropTypes.exact
-        exact=shape_or_exact
+        exact=shape_or_exact,
     )
 
 
@@ -886,9 +877,9 @@ def get_r_type(type_object, is_flow_type=False, indent_num=0):
     js_type_name = type_object["name"]
     js_to_r_types = get_r_prop_types(type_object=type_object)
     if (
-            "computed" in type_object
-            and type_object["computed"]
-            or type_object.get("type", "") == "function"
+        "computed" in type_object
+        and type_object["computed"]
+        or type_object.get("type", "") == "function"
     ):
         return ""
     elif js_type_name in js_to_r_types:
@@ -905,8 +896,9 @@ def print_r_type(typedata):
 
 
 # pylint: disable=too-many-arguments
-def create_prop_docstring_r(prop_name, type_object, required, description,
-                            indent_num, is_flow_type=False):
+def create_prop_docstring_r(
+    prop_name, type_object, required, description, indent_num, is_flow_type=False
+):
     """
     Create the Dash component prop docstring
     Parameters
@@ -930,34 +922,33 @@ def create_prop_docstring_r(prop_name, type_object, required, description,
         Dash component prop docstring
     """
     r_type_name = get_r_type(
-        type_object=type_object,
-        is_flow_type=is_flow_type,
-        indent_num=indent_num + 1)
-
-    indent_spacing = '  ' * indent_num
-    if '\n' in r_type_name:
-        return '{indent_spacing}- {name} ({is_required}): {description}. ' \
-               '{name} has the following type: {type}'.format(
-                   indent_spacing=indent_spacing,
-                   name=prop_name,
-                   type=r_type_name,
-                   description=description,
-                   is_required='required' if required else 'optional')
-    return '{indent_spacing}- {name} ({type}' \
-           '{is_required}){description}'.format(
-               indent_spacing=indent_spacing,
-               name=prop_name,
-               type='{}; '.format(r_type_name) if r_type_name else '',
-               description=(
-                   ': {}'.format(description) if description != '' else ''
-               ),
-               is_required='required' if required else 'optional')
+        type_object=type_object, is_flow_type=is_flow_type, indent_num=indent_num + 1
+    )
+
+    indent_spacing = "  " * indent_num
+    if "\n" in r_type_name:
+        return (
+            "{indent_spacing}- {name} ({is_required}): {description}. "
+            "{name} has the following type: {type}".format(
+                indent_spacing=indent_spacing,
+                name=prop_name,
+                type=r_type_name,
+                description=description,
+                is_required="required" if required else "optional",
+            )
+        )
+    return "{indent_spacing}- {name} ({type}{is_required}){description}".format(
+        indent_spacing=indent_spacing,
+        name=prop_name,
+        type="{}; ".format(r_type_name) if r_type_name else "",
+        description=(": {}".format(description) if description != "" else ""),
+        is_required="required" if required else "optional",
+    )
 
 
 def get_wildcards_r(prop_keys):
     wildcards = ""
-    wildcards += ", ".join("'{}'".format(p)
-                           for p in prop_keys if p.endswith("-*"))
+    wildcards += ", ".join("'{}'".format(p) for p in prop_keys if p.endswith("-*"))
 
     if wildcards == "":
         wildcards = "NULL"
diff --git a/dash/development/base_component.py b/dash/development/base_component.py
index 6f0b2ee2..9a89e9da 100644
--- a/dash/development/base_component.py
+++ b/dash/development/base_component.py
@@ -89,37 +89,36 @@ class Component(with_metaclass(ComponentMeta, object)):
             # e.g. "The dash_core_components.Dropdown component (version 1.6.0)
             # with the ID "my-dropdown"
             try:
-                error_string_prefix = 'The `{}.{}` component (version {}){}'.format(
+                error_string_prefix = "The `{}.{}` component (version {}){}".format(
                     self._namespace,
                     self._type,
-                    getattr(__import__(self._namespace), '__version__', 'unknown'),
-                    ' with the ID "{}"'.format(kwargs['id'])
-                    if 'id' in kwargs else ''
+                    getattr(__import__(self._namespace), "__version__", "unknown"),
+                    ' with the ID "{}"'.format(kwargs["id"]) if "id" in kwargs else "",
                 )
             except ImportError:
                 # Our tests create mock components with libraries that
                 # aren't importable
-                error_string_prefix = 'The `{}` component{}'.format(
+                error_string_prefix = "The `{}` component{}".format(
                     self._type,
-                    ' with the ID "{}"'.format(kwargs['id'])
-                    if 'id' in kwargs else ''
+                    ' with the ID "{}"'.format(kwargs["id"]) if "id" in kwargs else "",
                 )
 
             if not k_in_propnames and not k_in_wildcards:
                 raise TypeError(
                     "{} received an unexpected keyword argument: `{}`".format(
                         error_string_prefix, k
-                    ) + "\nAllowed arguments: {}".format(                        # pylint: disable=no-member
+                    )
+                    + "\nAllowed arguments: {}".format(  # pylint: disable=no-member
                         ", ".join(sorted(self._prop_names))
                     )
                 )
 
             if k != "children" and isinstance(v, Component):
                 raise TypeError(
-                    error_string_prefix +
-                    " detected a Component for a prop other than `children`\n" +
-                    "Did you forget to wrap multiple `children` in an array?\n" +
-                    "Prop {} has value {}\n".format(k, repr(v))
+                    error_string_prefix
+                    + " detected a Component for a prop other than `children`\n"
+                    + "Did you forget to wrap multiple `children` in an array?\n"
+                    + "Prop {} has value {}\n".format(k, repr(v))
                 )
 
             setattr(self, k, v)
@@ -250,9 +249,7 @@ class Component(with_metaclass(ComponentMeta, object)):
         children = getattr(self, "children", None)
         children_type = type(children).__name__
         children_id = (
-            "(id={:s})".format(children.id)
-            if getattr(children, "id", False)
-            else ""
+            "(id={:s})".format(children.id) if getattr(children, "id", False) else ""
         )
         children_string = children_type + " " + children_id
 
@@ -269,9 +266,7 @@ class Component(with_metaclass(ComponentMeta, object)):
                 list_path = "[{:d}] {:s} {}".format(
                     idx,
                     type(i).__name__,
-                    "(id={:s})".format(i.id)
-                    if getattr(i, "id", False)
-                    else "",
+                    "(id={:s})".format(i.id) if getattr(i, "id", False) else "",
                 )
                 yield list_path, i
 
@@ -316,10 +311,7 @@ class Component(with_metaclass(ComponentMeta, object)):
         ] + [
             c
             for c in self.__dict__
-            if any(
-                c.startswith(wc_attr)
-                for wc_attr in self._valid_wildcard_attributes
-            )
+            if any(c.startswith(wc_attr) for wc_attr in self._valid_wildcard_attributes)
         ]
         if any(p != "children" for p in props_with_values):
             props_string = ", ".join(
diff --git a/dash/development/build_process.py b/dash/development/build_process.py
index 95312006..283c3ad4 100644
--- a/dash/development/build_process.py
+++ b/dash/development/build_process.py
@@ -13,8 +13,7 @@ from .._utils import run_command_with_process, compute_md5, job
 
 logger = logging.getLogger(__name__)
 coloredlogs.install(
-    fmt="%(asctime)s,%(msecs)03d %(levelname)s - %(message)s",
-    datefmt="%H:%M:%S",
+    fmt="%(asctime)s,%(msecs)03d %(levelname)s - %(message)s", datefmt="%H:%M:%S",
 )
 
 
@@ -34,16 +33,12 @@ class BuildProcess(object):
             package = json.load(fp)
             self.version = package["version"]
             self.name = package["name"]
-            self.build_folder = self._concat(
-                self.main, self.name.replace("-", "_")
-            )
+            self.build_folder = self._concat(self.main, self.name.replace("-", "_"))
             self.deps = package["dependencies"]
 
     @staticmethod
     def _concat(*paths):
-        return os.path.realpath(
-            os.path.sep.join((path for path in paths if path))
-        )
+        return os.path.realpath(os.path.sep.join((path for path in paths if path)))
 
     @staticmethod
     def _clean_path(path):
@@ -98,9 +93,7 @@ class BuildProcess(object):
             )
 
         with open(self._concat(self.main, "digest.json"), "w") as fp:
-            json.dump(
-                payload, fp, sort_keys=True, indent=4, separators=(",", ":")
-            )
+            json.dump(payload, fp, sort_keys=True, indent=4, separators=(",", ":"))
         logger.info(
             "bundle digest in digest.json:\n%s",
             json.dumps(payload, sort_keys=True, indent=4),
@@ -112,9 +105,7 @@ class BuildProcess(object):
             try:
                 os.makedirs(self.build_folder)
             except OSError:
-                logger.exception(
-                    "üö® having issues manipulating %s", self.build_folder
-                )
+                logger.exception("üö® having issues manipulating %s", self.build_folder)
                 sys.exit(1)
 
         self._parse_package(self.package_lock)
@@ -141,7 +132,7 @@ class BuildProcess(object):
                 self._concat(self.build_folder, target),
             )
 
-        _script = 'build:dev' if build == 'local' else 'build:js'
+        _script = "build:dev" if build == "local" else "build:js"
         logger.info("run `npm run %s`", _script)
         os.chdir(self.main)
         run_command_with_process("npm run {}".format(_script))
@@ -159,10 +150,7 @@ class Renderer(BuildProcess):
         """dash-renderer's path is binding with the dash folder hierarchy."""
         super(Renderer, self).__init__(
             self._concat(
-                os.path.dirname(__file__),
-                os.pardir,
-                os.pardir,
-                "dash-renderer",
+                os.path.dirname(__file__), os.pardir, os.pardir, "dash-renderer",
             ),
             (
                 ("@babel", "polyfill", "dist", "polyfill.min.js", None),
diff --git a/dash/development/component_generator.py b/dash/development/component_generator.py
index 1cf0f4a4..9702b72d 100644
--- a/dash/development/component_generator.py
+++ b/dash/development/component_generator.py
@@ -31,8 +31,7 @@ reserved_words = [
 
 
 class _CombinedFormatter(
-    argparse.ArgumentDefaultsHelpFormatter,
-    argparse.RawDescriptionHelpFormatter,
+    argparse.ArgumentDefaultsHelpFormatter, argparse.RawDescriptionHelpFormatter,
 ):
     pass
 
@@ -105,14 +104,10 @@ def generate_components(
         with open("package.json", "r") as f:
             pkg_data = safe_json_loads(f.read())
         generator_methods.append(
-            functools.partial(
-                write_class_file, prefix=rprefix, rpkg_data=rpkg_data
-            )
+            functools.partial(write_class_file, prefix=rprefix, rpkg_data=rpkg_data)
         )
 
-    components = generate_classes_files(
-        project_shortname, metadata, *generator_methods
-    )
+    components = generate_classes_files(project_shortname, metadata, *generator_methods)
 
     with open(os.path.join(project_shortname, "metadata.json"), "w") as f:
         json.dump(metadata, f, indent=2)
@@ -147,19 +142,15 @@ def cli():
         description="Generate dash components by extracting the metadata "
         "using react-docgen. Then map the metadata to python classes.",
     )
+    parser.add_argument("components_source", help="React components source directory.")
     parser.add_argument(
-        "components_source", help="React components source directory."
-    )
-    parser.add_argument(
-        "project_shortname",
-        help="Name of the project to export the classes files.",
+        "project_shortname", help="Name of the project to export the classes files.",
     )
     parser.add_argument(
         "-p",
         "--package-info-filename",
         default="package.json",
-        help="The filename of the copied `package.json` "
-        "to `project_shortname`",
+        help="The filename of the copied `package.json` to `project_shortname`",
     )
     parser.add_argument(
         "-i",
@@ -208,10 +199,7 @@ def cli():
 def byteify(input_object):
     if isinstance(input_object, dict):
         return OrderedDict(
-            [
-                (byteify(key), byteify(value))
-                for key, value in input_object.iteritems()
-            ]
+            [(byteify(key), byteify(value)) for key, value in input_object.iteritems()]
         )
     elif isinstance(input_object, list):
         return [byteify(element) for element in input_object]
diff --git a/dash/development/component_loader.py b/dash/development/component_loader.py
index 95d142b0..648c171c 100644
--- a/dash/development/component_loader.py
+++ b/dash/development/component_loader.py
@@ -15,9 +15,9 @@ def _get_metadata(metadata_path):
     # Start processing
     with open(metadata_path) as data_file:
         json_string = data_file.read()
-        data = json.JSONDecoder(
-            object_pairs_hook=collections.OrderedDict
-        ).decode(json_string)
+        data = json.JSONDecoder(object_pairs_hook=collections.OrderedDict).decode(
+            json_string
+        )
     return data
 
 
@@ -52,10 +52,7 @@ def load_components(metadata_path, namespace="default_namespace"):
         # the name of the component atm.
         name = componentPath.split("/").pop().split(".")[0]
         component = generate_class(
-            name,
-            componentData["props"],
-            componentData["description"],
-            namespace,
+            name, componentData["props"], componentData["description"], namespace,
         )
 
         components.append(component)
diff --git a/dash/fingerprint.py b/dash/fingerprint.py
index 78df1d49..f41efff2 100644
--- a/dash/fingerprint.py
+++ b/dash/fingerprint.py
@@ -3,6 +3,7 @@ import re
 cache_regex = re.compile(r"^v[\w-]+m[0-9a-fA-F]+$")
 version_clean = re.compile(r"[^\w-]")
 
+
 def build_fingerprint(path, version, hash_value):
     path_parts = path.split("/")
     filename, extension = path_parts[-1].split(".", 1)
diff --git a/dash/resources.py b/dash/resources.py
index 7923edfc..e8e5c43b 100644
--- a/dash/resources.py
+++ b/dash/resources.py
@@ -19,10 +19,10 @@ class Resources:
         filtered_resources = []
         for s in all_resources:
             filtered_resource = {}
-            if 'dynamic' in s:
-                filtered_resource['dynamic'] = s['dynamic']
-            if 'async' in s:
-                if 'dynamic' in s:
+            if "dynamic" in s:
+                filtered_resource["dynamic"] = s["dynamic"]
+            if "async" in s:
+                if "dynamic" in s:
                     raise exceptions.ResourceException(
                         "Can't have both 'dynamic' and 'async'. "
                         "{}".format(json.dumps(filtered_resource))
@@ -35,51 +35,44 @@ class Resources:
                 # 'lazy' -> always dynamic
                 # 'eager' -> dynamic if server is not eager
                 # (to prevent ever loading it)
-                filtered_resource['dynamic'] = (
+                filtered_resource["dynamic"] = (
                     not self.config.eager_loading
-                    if s['async'] is True
-                    else (
-                        s['async'] == 'eager'
-                        and not self.config.eager_loading
-                    )
-                    or s['async'] == 'lazy'
+                    if s["async"] is True
+                    else (s["async"] == "eager" and not self.config.eager_loading)
+                    or s["async"] == "lazy"
                 )
-            if 'namespace' in s:
-                filtered_resource['namespace'] = s['namespace']
-            if 'external_url' in s and not self.config.serve_locally:
-                filtered_resource['external_url'] = s['external_url']
-            elif 'dev_package_path' in s and dev_bundles:
-                filtered_resource['relative_package_path'] = s[
-                    'dev_package_path'
-                ]
-            elif 'relative_package_path' in s:
-                filtered_resource['relative_package_path'] = s[
-                    'relative_package_path'
-                ]
-            elif 'absolute_path' in s:
-                filtered_resource['absolute_path'] = s['absolute_path']
-            elif 'asset_path' in s:
-                info = os.stat(s['filepath'])
-                filtered_resource['asset_path'] = s['asset_path']
-                filtered_resource['ts'] = info.st_mtime
+            if "namespace" in s:
+                filtered_resource["namespace"] = s["namespace"]
+            if "external_url" in s and not self.config.serve_locally:
+                filtered_resource["external_url"] = s["external_url"]
+            elif "dev_package_path" in s and dev_bundles:
+                filtered_resource["relative_package_path"] = s["dev_package_path"]
+            elif "relative_package_path" in s:
+                filtered_resource["relative_package_path"] = s["relative_package_path"]
+            elif "absolute_path" in s:
+                filtered_resource["absolute_path"] = s["absolute_path"]
+            elif "asset_path" in s:
+                info = os.stat(s["filepath"])
+                filtered_resource["asset_path"] = s["asset_path"]
+                filtered_resource["ts"] = info.st_mtime
             elif self.config.serve_locally:
                 warnings.warn(
                     (
-                        'You have set your config to `serve_locally=True` but '
-                        'A local version of {} is not available.\n'
-                        'If you added this file with '
-                        '`app.scripts.append_script` '
-                        'or `app.css.append_css`, use `external_scripts` '
-                        'or `external_stylesheets` instead.\n'
-                        'See https://dash.plot.ly/external-resources'
-                    ).format(s['external_url'])
+                        "You have set your config to `serve_locally=True` but "
+                        "A local version of {} is not available.\n"
+                        "If you added this file with "
+                        "`app.scripts.append_script` "
+                        "or `app.css.append_css`, use `external_scripts` "
+                        "or `external_stylesheets` instead.\n"
+                        "See https://dash.plot.ly/external-resources"
+                    ).format(s["external_url"])
                 )
                 continue
             else:
                 raise exceptions.ResourceException(
-                    '{} does not have a '
-                    'relative_package_path, absolute_path, or an '
-                    'external_url.'.format(json.dumps(filtered_resource))
+                    "{} does not have a "
+                    "relative_package_path, absolute_path, or an "
+                    "external_url.".format(json.dumps(filtered_resource))
                 )
 
             filtered_resources.append(filtered_resource)
@@ -102,7 +95,7 @@ class _Config:
 
 class Css:
     def __init__(self, serve_locally):
-        self._resources = Resources('_css_dist')
+        self._resources = Resources("_css_dist")
         self._resources.config = self.config = _Config(serve_locally, True)
 
     def append_css(self, stylesheet):
@@ -114,7 +107,7 @@ class Css:
 
 class Scripts:
     def __init__(self, serve_locally, eager):
-        self._resources = Resources('_js_dist')
+        self._resources = Resources("_js_dist")
         self._resources.config = self.config = _Config(serve_locally, eager)
 
     def append_script(self, script):
diff --git a/dash/testing/application_runners.py b/dash/testing/application_runners.py
index c1b93537..0b52a9a0 100644
--- a/dash/testing/application_runners.py
+++ b/dash/testing/application_runners.py
@@ -48,9 +48,7 @@ def import_app(app_file, application_name="app"):
         app = app_module[application_name]
     except KeyError:
         logger.exception("the app name cannot be found")
-        raise NoAppFoundError(
-            "No dash `app` instance was found in {}".format(app_file)
-        )
+        raise NoAppFoundError("No dash `app` instance was found in {}".format(app_file))
     return app
 
 
@@ -91,9 +89,7 @@ class BaseDashRunner(object):
                 self.stop()
             except TestingTimeoutError:
                 raise ServerCloseError(
-                    "Cannot stop server within {}s timeout".format(
-                        self.stop_timeout
-                    )
+                    "Cannot stop server within {}s timeout".format(self.stop_timeout)
                 )
         logger.info("__exit__ complete")
 
@@ -136,9 +132,7 @@ class ThreadedRunner(BaseDashRunner):
     # pylint: disable=arguments-differ,C0330
     def start(self, app, **kwargs):
         """Start the app server in threading flavor."""
-        app.server.add_url_rule(
-            self.stop_route, self.stop_route, self._stop_server
-        )
+        app.server.add_url_rule(self.stop_route, self.stop_route, self._stop_server)
 
         def _handle_error():
             self._stop_server()
@@ -196,8 +190,7 @@ class ProcessRunner(BaseDashRunner):
         """Start the server with waitress-serve in process flavor."""
         if not (app_module or raw_command):  # need to set a least one
             logging.error(
-                "the process runner needs to start with"
-                " at least one valid command"
+                "the process runner needs to start with at least one valid command"
             )
             return
         self.port = port
@@ -217,9 +210,7 @@ class ProcessRunner(BaseDashRunner):
                 args, stdout=subprocess.PIPE, stderr=subprocess.PIPE
             )
             # wait until server is able to answer http request
-            wait.until(
-                lambda: self.accessible(self.url), timeout=start_timeout
-            )
+            wait.until(lambda: self.accessible(self.url), timeout=start_timeout)
 
         except (OSError, ValueError):
             logger.exception("process server has encountered an error")
@@ -241,7 +232,7 @@ class ProcessRunner(BaseDashRunner):
                     self.proc.communicate(timeout=self.stop_timeout)
                 else:
                     _except = Exception
-                    logger.info('ruthless kill the process to avoid zombie')
+                    logger.info("ruthless kill the process to avoid zombie")
                     self.proc.kill()
             except _except:
                 logger.exception(
@@ -250,14 +241,12 @@ class ProcessRunner(BaseDashRunner):
                 )
                 self.proc.kill()
                 self.proc.communicate()
-        logger.info('process stop completes!')
+        logger.info("process stop completes!")
 
 
 class RRunner(ProcessRunner):
     def __init__(self, keep_open=False, stop_timeout=3):
-        super(RRunner, self).__init__(
-            keep_open=keep_open, stop_timeout=stop_timeout
-        )
+        super(RRunner, self).__init__(keep_open=keep_open, stop_timeout=stop_timeout)
         self.proc = None
 
     # pylint: disable=arguments-differ
@@ -273,15 +262,12 @@ class RRunner(ProcessRunner):
             # app is a string chunk, we make a temporary folder to store app.R
             # and its relevants assets
             self._tmp_app_path = os.path.join(
-                "/tmp" if not self.is_windows else os.getenv("TEMP"),
-                uuid.uuid4().hex,
+                "/tmp" if not self.is_windows else os.getenv("TEMP"), uuid.uuid4().hex,
             )
             try:
                 os.mkdir(self.tmp_app_path)
             except OSError:
-                logger.exception(
-                    "cannot make temporary folder %s", self.tmp_app_path
-                )
+                logger.exception("cannot make temporary folder %s", self.tmp_app_path)
             path = os.path.join(self.tmp_app_path, "app.R")
 
             logger.info("RRunner start => app is R code chunk")
@@ -302,9 +288,7 @@ class RRunner(ProcessRunner):
                         logger.warning("get cwd from inspect => %s", cwd)
                         break
             if cwd:
-                logger.info(
-                    "RRunner inferred cwd from the Python call stack: %s", cwd
-                )
+                logger.info("RRunner inferred cwd from the Python call stack: %s", cwd)
             else:
                 logger.warning(
                     "RRunner found no cwd in the Python call stack. "
@@ -318,14 +302,11 @@ class RRunner(ProcessRunner):
             assets = [
                 os.path.join(cwd, _)
                 for _ in os.listdir(cwd)
-                if not _.startswith("__")
-                and os.path.isdir(os.path.join(cwd, _))
+                if not _.startswith("__") and os.path.isdir(os.path.join(cwd, _))
             ]
 
             for asset in assets:
-                target = os.path.join(
-                    self.tmp_app_path, os.path.basename(asset)
-                )
+                target = os.path.join(self.tmp_app_path, os.path.basename(asset))
                 if os.path.exists(target):
                     logger.debug("delete existing target %s", target)
                     shutil.rmtree(target)
@@ -349,9 +330,7 @@ class RRunner(ProcessRunner):
                 cwd=self.tmp_app_path if self.tmp_app_path else cwd,
             )
             # wait until server is able to answer http request
-            wait.until(
-                lambda: self.accessible(self.url), timeout=start_timeout
-            )
+            wait.until(lambda: self.accessible(self.url), timeout=start_timeout)
 
         except (OSError, ValueError):
             logger.exception("process server has encountered an error")
diff --git a/dash/testing/browser.py b/dash/testing/browser.py
index ef0b3cc1..6a98aae8 100644
--- a/dash/testing/browser.py
+++ b/dash/testing/browser.py
@@ -55,9 +55,7 @@ class Browser(DashPageMixin):
         self._browser = browser.lower()
         self._remote_url = remote_url
         self._remote = (
-            True
-            if remote_url and remote_url != SELENIUM_GRID_DEFAULT
-            else remote
+            True if remote_url and remote_url != SELENIUM_GRID_DEFAULT else remote
         )
         self._headless = headless
         self._options = options
@@ -88,9 +86,7 @@ class Browser(DashPageMixin):
         logger.info("initialize browser with arguments")
         logger.info("  headless => %s", self._headless)
         logger.info("  download_path => %s", self._download_path)
-        logger.info(
-            "  percy asset root => %s", os.path.abspath(percy_assets_root)
-        )
+        logger.info("  percy asset root => %s", os.path.abspath(percy_assets_root))
 
     def __enter__(self):
         return self
@@ -155,11 +151,7 @@ class Browser(DashPageMixin):
             # as diff reference for the build run.
             logger.error(
                 "wait_for_callbacks failed => status of invalid rqs %s",
-                list(
-                    _
-                    for _ in self.redux_state_rqs
-                    if not _.get("responseTime")
-                ),
+                list(_ for _ in self.redux_state_rqs if not _.get("responseTime")),
             )
             logger.debug("full content of the rqs => %s", self.redux_state_rqs)
 
@@ -174,11 +166,7 @@ class Browser(DashPageMixin):
         with a filename combining test case name and the
         running selenium session id
         """
-        target = (
-            "/tmp/dash_artifacts"
-            if not self._is_windows()
-            else os.getenv("TEMP")
-        )
+        target = "/tmp/dash_artifacts" if not self._is_windows() else os.getenv("TEMP")
         if not os.path.exists(target):
             try:
                 os.mkdir(target)
@@ -210,9 +198,7 @@ class Browser(DashPageMixin):
     def _wait_for(self, method, args, timeout, msg):
         """Abstract generic pattern for explicit WebDriverWait."""
         _wait = (
-            self._wd_wait
-            if timeout is None
-            else WebDriverWait(self.driver, timeout)
+            self._wd_wait if timeout is None else WebDriverWait(self.driver, timeout)
         )
         logger.debug(
             "method, timeout, poll => %s %s %s",
@@ -311,9 +297,7 @@ class Browser(DashPageMixin):
                 self.dash_entry_locator, timeout=timeout
             )
         except TimeoutException:
-            logger.exception(
-                "dash server is not loaded within %s seconds", timeout
-            )
+            logger.exception("dash server is not loaded within %s seconds", timeout)
             logger.debug(self.get_logs())
             raise DashAppLoadingError(
                 "the expected Dash react entry point cannot be loaded"
@@ -330,13 +314,9 @@ class Browser(DashPageMixin):
         dropdown.click()
 
         menu = dropdown.find_element_by_css_selector("div.Select-menu-outer")
-        logger.debug(
-            "the available options are %s", "|".join(menu.text.split("\n"))
-        )
+        logger.debug("the available options are %s", "|".join(menu.text.split("\n")))
 
-        options = menu.find_elements_by_css_selector(
-            "div.VirtualizedSelectOption"
-        )
+        options = menu.find_elements_by_css_selector("div.VirtualizedSelectOption")
         if options:
             if isinstance(index, int):
                 options[index].click()
@@ -348,9 +328,7 @@ class Browser(DashPageMixin):
                     return
 
         logger.error(
-            "cannot find matching option using value=%s or index=%s",
-            value,
-            index,
+            "cannot find matching option using value=%s or index=%s", value, index,
         )
 
     def toggle_window(self):
@@ -420,9 +398,7 @@ class Browser(DashPageMixin):
                 desired_capabilities=capabilities,
             )
             if self._remote
-            else webdriver.Chrome(
-                options=options, desired_capabilities=capabilities
-            )
+            else webdriver.Chrome(options=options, desired_capabilities=capabilities)
         )
 
         # https://bugs.chromium.org/p/chromium/issues/detail?id=696481
@@ -434,10 +410,7 @@ class Browser(DashPageMixin):
             )
             params = {
                 "cmd": "Page.setDownloadBehavior",
-                "params": {
-                    "behavior": "allow",
-                    "downloadPath": self.download_path,
-                },
+                "params": {"behavior": "allow", "downloadPath": self.download_path},
             }
             res = chrome.execute("send_command", params)
             logger.debug("enabled headless download returns %s", res)
@@ -498,11 +471,7 @@ class Browser(DashPageMixin):
         ).perform()
 
     def zoom_in_graph_by_ratio(
-        self,
-        elem_or_selector,
-        start_fraction=0.5,
-        zoom_box_fraction=0.2,
-        compare=True,
+        self, elem_or_selector, start_fraction=0.5, zoom_box_fraction=0.2, compare=True,
     ):
         """Zoom out a graph with a zoom box fraction of component dimension
         default start at middle with a rectangle of 1/5 of the dimension use
@@ -543,9 +512,7 @@ class Browser(DashPageMixin):
                 for entry in self.driver.get_log("browser")
                 if entry["timestamp"] > self._last_ts
             ]
-        warnings.warn(
-            "get_logs always return None with webdrivers other than Chrome"
-        )
+        warnings.warn("get_logs always return None with webdrivers other than Chrome")
         return None
 
     def reset_log_timestamp(self):
diff --git a/dash/testing/dash_page.py b/dash/testing/dash_page.py
index 5c0445e5..1ff32b53 100644
--- a/dash/testing/dash_page.py
+++ b/dash/testing/dash_page.py
@@ -4,8 +4,7 @@ from bs4 import BeautifulSoup
 class DashPageMixin(object):
     def _get_dash_dom_by_attribute(self, attr):
         return BeautifulSoup(
-            self.find_element(self.dash_entry_locator).get_attribute(attr),
-            "lxml",
+            self.find_element(self.dash_entry_locator).get_attribute(attr), "lxml",
         )
 
     @property
@@ -26,15 +25,11 @@ class DashPageMixin(object):
 
     @property
     def redux_state_paths(self):
-        return self.driver.execute_script(
-            "return window.store.getState().paths"
-        )
+        return self.driver.execute_script("return window.store.getState().paths")
 
     @property
     def redux_state_rqs(self):
-        return self.driver.execute_script(
-            "return window.store.getState().requestQueue"
-        )
+        return self.driver.execute_script("return window.store.getState().requestQueue")
 
     @property
     def window_store(self):
@@ -57,16 +52,12 @@ class DashPageMixin(object):
 
     def get_local_storage(self, store_id="local"):
         return self.driver.execute_script(
-            "return JSON.parse(window.localStorage.getItem('{}'));".format(
-                store_id
-            )
+            "return JSON.parse(window.localStorage.getItem('{}'));".format(store_id)
         )
 
     def get_session_storage(self, session_id="session"):
         return self.driver.execute_script(
-            "return JSON.parse(window.sessionStorage.getItem('{}'));".format(
-                session_id
-            )
+            "return JSON.parse(window.sessionStorage.getItem('{}'));".format(session_id)
         )
 
     def clear_local_storage(self):
diff --git a/dash/testing/plugin.py b/dash/testing/plugin.py
index c42c36e9..5d107510 100644
--- a/dash/testing/plugin.py
+++ b/dash/testing/plugin.py
@@ -26,9 +26,7 @@ def pytest_addoption(parser):
     )
 
     dash.addoption(
-        "--remote",
-        action="store_true",
-        help="instruct pytest to use selenium grid",
+        "--remote", action="store_true", help="instruct pytest to use selenium grid",
     )
 
     dash.addoption(
@@ -39,9 +37,7 @@ def pytest_addoption(parser):
     )
 
     dash.addoption(
-        "--headless",
-        action="store_true",
-        help="set this flag to run in headless mode",
+        "--headless", action="store_true", help="set this flag to run in headless mode",
     )
 
     dash.addoption(
diff --git a/dash/testing/wait.py b/dash/testing/wait.py
index 707def00..1f87fef7 100644
--- a/dash/testing/wait.py
+++ b/dash/testing/wait.py
@@ -10,10 +10,7 @@ logger = logging.getLogger(__name__)
 
 
 def until(
-    wait_cond,
-    timeout,
-    poll=0.1,
-    msg="expected condition not met within timeout",
+    wait_cond, timeout, poll=0.1, msg="expected condition not met within timeout",
 ):  # noqa: C0330
     res = wait_cond()
     logger.debug(
@@ -34,10 +31,7 @@ def until(
 
 
 def until_not(
-    wait_cond,
-    timeout,
-    poll=0.1,
-    msg="expected condition met within timeout",
+    wait_cond, timeout, poll=0.1, msg="expected condition met within timeout",
 ):  # noqa: C0330
     res = wait_cond()
     logger.debug(
@@ -65,9 +59,7 @@ class contains_text(object):
     def __call__(self, driver):
         try:
             elem = driver.find_element_by_css_selector(self.selector)
-            logger.debug(
-                "contains text {%s} => expected %s", elem.text, self.text
-            )
+            logger.debug("contains text {%s} => expected %s", elem.text, self.text)
             return self.text in str(elem.text) or self.text in str(
                 elem.get_attribute("value")
             )
@@ -84,9 +76,7 @@ class text_to_equal(object):
     def __call__(self, driver):
         try:
             elem = driver.find_element_by_css_selector(self.selector)
-            logger.debug(
-                "text to equal {%s} => expected %s", elem.text, self.text
-            )
+            logger.debug("text to equal {%s} => expected %s", elem.text, self.text)
             return (
                 str(elem.text) == self.text
                 or str(elem.get_attribute("value")) == self.text
diff --git a/dash/version.py b/dash/version.py
index 35424e87..38cf6dbe 100644
--- a/dash/version.py
+++ b/dash/version.py
@@ -1 +1 @@
-__version__ = '1.9.1'
+__version__ = "1.9.1"
diff --git a/package-lock.json b/package-lock.json
new file mode 100644
index 00000000..ee3bb997
--- /dev/null
+++ b/package-lock.json
@@ -0,0 +1,757 @@
+{
+  "requires": true,
+  "lockfileVersion": 1,
+  "dependencies": {
+    "@babel/code-frame": {
+      "version": "7.8.3",
+      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.8.3.tgz",
+      "integrity": "sha512-a9gxpmdXtZEInkCSHUJDLHZVBgb1QS0jhss4cPP93EW7s+uC5bikET2twEF3KV+7rDblJcmNvTR7VJejqd2C2g==",
+      "dev": true,
+      "requires": {
+        "@babel/highlight": "^7.8.3"
+      }
+    },
+    "@babel/highlight": {
+      "version": "7.8.3",
+      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.8.3.tgz",
+      "integrity": "sha512-PX4y5xQUvy0fnEVHrYOarRPXVWafSjTW9T0Hab8gVIawpl2Sj0ORyrygANq+KjcNlSSTw0YCLSNA8OyZ1I4yEg==",
+      "dev": true,
+      "requires": {
+        "chalk": "^2.0.0",
+        "esutils": "^2.0.2",
+        "js-tokens": "^4.0.0"
+      }
+    },
+    "@babel/runtime": {
+      "version": "7.8.7",
+      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.8.7.tgz",
+      "integrity": "sha512-+AATMUFppJDw6aiR5NVPHqIQBlV/Pj8wY/EZH+lmvRdUo9xBaz/rF3alAwFJQavvKfeOlPE7oaaDHVbcySbCsg==",
+      "dev": true,
+      "requires": {
+        "regenerator-runtime": "^0.13.4"
+      }
+    },
+    "@types/color-name": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/@types/color-name/-/color-name-1.1.1.tgz",
+      "integrity": "sha512-rr+OQyAjxze7GgWrSaJwydHStIhHq2lvY3BOC2Mj7KnzI7XK0Uw1TOOdI9lDoajEbSWLiYgoo4f1R51erQfhPQ==",
+      "dev": true
+    },
+    "@types/parse-json": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/@types/parse-json/-/parse-json-4.0.0.tgz",
+      "integrity": "sha512-//oorEZjL6sbPcKUaCdIGlIUeH26mgzimjBB77G6XRgnDl/L5wOnpyBGRe/Mmf5CVW3PwEBE1NjiMZ/ssFh4wA==",
+      "dev": true
+    },
+    "ansi-styles": {
+      "version": "3.2.1",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
+      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
+      "requires": {
+        "color-convert": "^1.9.0"
+      }
+    },
+    "balanced-match": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.0.tgz",
+      "integrity": "sha1-ibTRmasr7kneFk6gK4nORi1xt2c="
+    },
+    "brace-expansion": {
+      "version": "1.1.11",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
+      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "requires": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "callsites": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
+      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
+      "dev": true
+    },
+    "chalk": {
+      "version": "2.4.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
+      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
+      "requires": {
+        "ansi-styles": "^3.2.1",
+        "escape-string-regexp": "^1.0.5",
+        "supports-color": "^5.3.0"
+      }
+    },
+    "ci-info": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-2.0.0.tgz",
+      "integrity": "sha512-5tK7EtrZ0N+OLFMthtqOj4fI2Jeb88C4CAZPu25LDVUgXJ0A3Js4PMGqrn0JU1W0Mh1/Z8wZzYPxqUrXeBboCQ==",
+      "dev": true
+    },
+    "color-convert": {
+      "version": "1.9.3",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
+      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
+      "requires": {
+        "color-name": "1.1.3"
+      }
+    },
+    "color-name": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
+      "integrity": "sha1-p9BVi9icQveV3UIyj3QIMcpTvCU="
+    },
+    "compare-versions": {
+      "version": "3.6.0",
+      "resolved": "https://registry.npmjs.org/compare-versions/-/compare-versions-3.6.0.tgz",
+      "integrity": "sha512-W6Af2Iw1z4CB7q4uU4hv646dW9GQuBM+YpC0UvUCWSD8w90SJjp+ujJuXaEMtAXBtSqGfMPuFOVn4/+FlaqfBA==",
+      "dev": true
+    },
+    "concat-map": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
+      "integrity": "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s="
+    },
+    "cosmiconfig": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-6.0.0.tgz",
+      "integrity": "sha512-xb3ZL6+L8b9JLLCx3ZdoZy4+2ECphCMo2PwqgP1tlfVq6M6YReyzBJtvWWtbDSpNr9hn96pkCiZqUcFEc+54Qg==",
+      "dev": true,
+      "requires": {
+        "@types/parse-json": "^4.0.0",
+        "import-fresh": "^3.1.0",
+        "parse-json": "^5.0.0",
+        "path-type": "^4.0.0",
+        "yaml": "^1.7.2"
+      },
+      "dependencies": {
+        "parse-json": {
+          "version": "5.0.0",
+          "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.0.0.tgz",
+          "integrity": "sha512-OOY5b7PAEFV0E2Fir1KOkxchnZNCdowAJgQ5NuxjpBKTRP3pQhwkrkxqQjeoKJ+fO7bCpmIZaogI4eZGDMEGOw==",
+          "dev": true,
+          "requires": {
+            "@babel/code-frame": "^7.0.0",
+            "error-ex": "^1.3.1",
+            "json-parse-better-errors": "^1.0.1",
+            "lines-and-columns": "^1.1.6"
+          }
+        },
+        "path-type": {
+          "version": "4.0.0",
+          "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
+          "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
+          "dev": true
+        }
+      }
+    },
+    "cross-spawn": {
+      "version": "6.0.5",
+      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-6.0.5.tgz",
+      "integrity": "sha512-eTVLrBSt7fjbDygz805pMnstIs2VTBNkRm0qxZd+M7A5XDdxVRWO5MxGBXZhjY4cqLYLdtrGqRf8mBPmzwSpWQ==",
+      "requires": {
+        "nice-try": "^1.0.4",
+        "path-key": "^2.0.1",
+        "semver": "^5.5.0",
+        "shebang-command": "^1.2.0",
+        "which": "^1.2.9"
+      }
+    },
+    "define-properties": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.1.3.tgz",
+      "integrity": "sha512-3MqfYKj2lLzdMSf8ZIZE/V+Zuy+BgD6f164e8K2w7dgnpKArBDerGYpM46IYYcjnkdPNMjPk9A6VFB8+3SKlXQ==",
+      "requires": {
+        "object-keys": "^1.0.12"
+      }
+    },
+    "error-ex": {
+      "version": "1.3.2",
+      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
+      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
+      "requires": {
+        "is-arrayish": "^0.2.1"
+      }
+    },
+    "es-abstract": {
+      "version": "1.17.4",
+      "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.17.4.tgz",
+      "integrity": "sha512-Ae3um/gb8F0mui/jPL+QiqmglkUsaQf7FwBEHYIFkztkneosu9imhqHpBzQ3h1vit8t5iQ74t6PEVvphBZiuiQ==",
+      "requires": {
+        "es-to-primitive": "^1.2.1",
+        "function-bind": "^1.1.1",
+        "has": "^1.0.3",
+        "has-symbols": "^1.0.1",
+        "is-callable": "^1.1.5",
+        "is-regex": "^1.0.5",
+        "object-inspect": "^1.7.0",
+        "object-keys": "^1.1.1",
+        "object.assign": "^4.1.0",
+        "string.prototype.trimleft": "^2.1.1",
+        "string.prototype.trimright": "^2.1.1"
+      }
+    },
+    "es-to-primitive": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.2.1.tgz",
+      "integrity": "sha512-QCOllgZJtaUo9miYBcLChTUaHNjJF3PYs1VidD7AwiEj1kYxKeQTctLAezAOH5ZKRH0g2IgPn6KwB4IT8iRpvA==",
+      "requires": {
+        "is-callable": "^1.1.4",
+        "is-date-object": "^1.0.1",
+        "is-symbol": "^1.0.2"
+      }
+    },
+    "escape-string-regexp": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
+      "integrity": "sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ="
+    },
+    "esutils": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
+      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
+      "dev": true
+    },
+    "find-up": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
+      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
+      "dev": true,
+      "requires": {
+        "locate-path": "^5.0.0",
+        "path-exists": "^4.0.0"
+      }
+    },
+    "find-versions": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/find-versions/-/find-versions-3.2.0.tgz",
+      "integrity": "sha512-P8WRou2S+oe222TOCHitLy8zj+SIsVJh52VP4lvXkaFVnOFFdoWv1H1Jjvel1aI6NCFOAaeAVm8qrI0odiLcww==",
+      "dev": true,
+      "requires": {
+        "semver-regex": "^2.0.0"
+      }
+    },
+    "function-bind": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
+      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
+    },
+    "graceful-fs": {
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.3.tgz",
+      "integrity": "sha512-a30VEBm4PEdx1dRB7MFK7BejejvCvBronbLjht+sHuGYj8PHs7M/5Z+rt5lw551vZ7yfTCj4Vuyy3mSJytDWRQ=="
+    },
+    "has": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
+      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
+      "requires": {
+        "function-bind": "^1.1.1"
+      }
+    },
+    "has-flag": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
+      "integrity": "sha1-tdRU3CGZriJWmfNGfloH87lVuv0="
+    },
+    "has-symbols": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.1.tgz",
+      "integrity": "sha512-PLcsoqu++dmEIZB+6totNFKq/7Do+Z0u4oT0zKOJNl3lYK6vGwwu2hjHs+68OEZbTjiUE9bgOABXbP/GvrS0Kg=="
+    },
+    "hosted-git-info": {
+      "version": "2.8.8",
+      "resolved": "https://registry.npmjs.org/hosted-git-info/-/hosted-git-info-2.8.8.tgz",
+      "integrity": "sha512-f/wzC2QaWBs7t9IYqB4T3sR1xviIViXJRJTWBlx2Gf3g0Xi5vI7Yy4koXQ1c9OYDGHN9sBy1DQ2AB8fqZBWhUg=="
+    },
+    "husky": {
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/husky/-/husky-4.2.3.tgz",
+      "integrity": "sha512-VxTsSTRwYveKXN4SaH1/FefRJYCtx+wx04sSVcOpD7N2zjoHxa+cEJ07Qg5NmV3HAK+IRKOyNVpi2YBIVccIfQ==",
+      "dev": true,
+      "requires": {
+        "chalk": "^3.0.0",
+        "ci-info": "^2.0.0",
+        "compare-versions": "^3.5.1",
+        "cosmiconfig": "^6.0.0",
+        "find-versions": "^3.2.0",
+        "opencollective-postinstall": "^2.0.2",
+        "pkg-dir": "^4.2.0",
+        "please-upgrade-node": "^3.2.0",
+        "slash": "^3.0.0",
+        "which-pm-runs": "^1.0.0"
+      },
+      "dependencies": {
+        "ansi-styles": {
+          "version": "4.2.1",
+          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.2.1.tgz",
+          "integrity": "sha512-9VGjrMsG1vePxcSweQsN20KY/c4zN0h9fLjqAbwbPfahM3t+NL+M9HC8xeXG2I8pX5NoamTGNuomEUFI7fcUjA==",
+          "dev": true,
+          "requires": {
+            "@types/color-name": "^1.1.1",
+            "color-convert": "^2.0.1"
+          }
+        },
+        "chalk": {
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/chalk/-/chalk-3.0.0.tgz",
+          "integrity": "sha512-4D3B6Wf41KOYRFdszmDqMCGq5VV/uMAB273JILmO+3jAlh8X4qDtdtgCR3fxtbLEMzSx22QdhnDcJvu2u1fVwg==",
+          "dev": true,
+          "requires": {
+            "ansi-styles": "^4.1.0",
+            "supports-color": "^7.1.0"
+          }
+        },
+        "color-convert": {
+          "version": "2.0.1",
+          "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+          "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
+          "dev": true,
+          "requires": {
+            "color-name": "~1.1.4"
+          }
+        },
+        "color-name": {
+          "version": "1.1.4",
+          "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+          "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+          "dev": true
+        },
+        "has-flag": {
+          "version": "4.0.0",
+          "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
+          "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
+          "dev": true
+        },
+        "supports-color": {
+          "version": "7.1.0",
+          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.1.0.tgz",
+          "integrity": "sha512-oRSIpR8pxT1Wr2FquTNnGet79b3BWljqOuoW/h4oBhxJ/HUbX5nX6JSruTkvXDCFMwDPvsaTTbvMLKZWSy0R5g==",
+          "dev": true,
+          "requires": {
+            "has-flag": "^4.0.0"
+          }
+        }
+      }
+    },
+    "import-fresh": {
+      "version": "3.2.1",
+      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.2.1.tgz",
+      "integrity": "sha512-6e1q1cnWP2RXD9/keSkxHScg508CdXqXWgWBaETNhyuBFz+kUZlKboh+ISK+bU++DmbHimVBrOz/zzPe0sZ3sQ==",
+      "dev": true,
+      "requires": {
+        "parent-module": "^1.0.0",
+        "resolve-from": "^4.0.0"
+      }
+    },
+    "is-arrayish": {
+      "version": "0.2.1",
+      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
+      "integrity": "sha1-d8mYQFJ6qOyxqLppe4BkWnqSap0="
+    },
+    "is-callable": {
+      "version": "1.1.5",
+      "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.1.5.tgz",
+      "integrity": "sha512-ESKv5sMCJB2jnHTWZ3O5itG+O128Hsus4K4Qh1h2/cgn2vbgnLSVqfV46AeJA9D5EeeLa9w81KUXMtn34zhX+Q=="
+    },
+    "is-date-object": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.0.2.tgz",
+      "integrity": "sha512-USlDT524woQ08aoZFzh3/Z6ch9Y/EWXEHQ/AaRN0SkKq4t2Jw2R2339tSXmwuVoY7LLlBCbOIlx2myP/L5zk0g=="
+    },
+    "is-regex": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.0.5.tgz",
+      "integrity": "sha512-vlKW17SNq44owv5AQR3Cq0bQPEb8+kF3UKZ2fiZNOWtztYE5i0CzCZxFDwO58qAOWtxdBRVO/V5Qin1wjCqFYQ==",
+      "requires": {
+        "has": "^1.0.3"
+      }
+    },
+    "is-symbol": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.0.3.tgz",
+      "integrity": "sha512-OwijhaRSgqvhm/0ZdAcXNZt9lYdKFpcRDT5ULUuYXPoT794UNOdU+gpT6Rzo7b4V2HUl/op6GqY894AZwv9faQ==",
+      "requires": {
+        "has-symbols": "^1.0.1"
+      }
+    },
+    "isexe": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
+      "integrity": "sha1-6PvzdNxVb/iUehDcsFctYz8s+hA="
+    },
+    "js-tokens": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
+      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
+      "dev": true
+    },
+    "json-parse-better-errors": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/json-parse-better-errors/-/json-parse-better-errors-1.0.2.tgz",
+      "integrity": "sha512-mrqyZKfX5EhL7hvqcV6WG1yYjnjeuYDzDhhcAAUrq8Po85NBQBJP+ZDUT75qZQ98IkUoBqdkExkukOU7Ts2wrw=="
+    },
+    "lines-and-columns": {
+      "version": "1.1.6",
+      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.1.6.tgz",
+      "integrity": "sha1-HADHQ7QzzQpOgHWPe2SldEDZ/wA=",
+      "dev": true
+    },
+    "load-json-file": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/load-json-file/-/load-json-file-4.0.0.tgz",
+      "integrity": "sha1-L19Fq5HjMhYjT9U62rZo607AmTs=",
+      "requires": {
+        "graceful-fs": "^4.1.2",
+        "parse-json": "^4.0.0",
+        "pify": "^3.0.0",
+        "strip-bom": "^3.0.0"
+      }
+    },
+    "locate-path": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
+      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
+      "dev": true,
+      "requires": {
+        "p-locate": "^4.1.0"
+      }
+    },
+    "memorystream": {
+      "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/memorystream/-/memorystream-0.3.1.tgz",
+      "integrity": "sha1-htcJCzDORV1j+64S3aUaR93K+bI="
+    },
+    "minimatch": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz",
+      "integrity": "sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==",
+      "requires": {
+        "brace-expansion": "^1.1.7"
+      }
+    },
+    "nice-try": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/nice-try/-/nice-try-1.0.5.tgz",
+      "integrity": "sha512-1nh45deeb5olNY7eX82BkPO7SSxR5SSYJiPTrTdFUVYwAl8CKMA5N9PjTYkHiRjisVcxcQ1HXdLhx2qxxJzLNQ=="
+    },
+    "normalize-package-data": {
+      "version": "2.5.0",
+      "resolved": "https://registry.npmjs.org/normalize-package-data/-/normalize-package-data-2.5.0.tgz",
+      "integrity": "sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA==",
+      "requires": {
+        "hosted-git-info": "^2.1.4",
+        "resolve": "^1.10.0",
+        "semver": "2 || 3 || 4 || 5",
+        "validate-npm-package-license": "^3.0.1"
+      }
+    },
+    "npm-run-all": {
+      "version": "4.1.5",
+      "resolved": "https://registry.npmjs.org/npm-run-all/-/npm-run-all-4.1.5.tgz",
+      "integrity": "sha512-Oo82gJDAVcaMdi3nuoKFavkIHBRVqQ1qvMb+9LHk/cF4P6B2m8aP04hGf7oL6wZ9BuGwX1onlLhpuoofSyoQDQ==",
+      "requires": {
+        "ansi-styles": "^3.2.1",
+        "chalk": "^2.4.1",
+        "cross-spawn": "^6.0.5",
+        "memorystream": "^0.3.1",
+        "minimatch": "^3.0.4",
+        "pidtree": "^0.3.0",
+        "read-pkg": "^3.0.0",
+        "shell-quote": "^1.6.1",
+        "string.prototype.padend": "^3.0.0"
+      }
+    },
+    "object-inspect": {
+      "version": "1.7.0",
+      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.7.0.tgz",
+      "integrity": "sha512-a7pEHdh1xKIAgTySUGgLMx/xwDZskN1Ud6egYYN3EdRW4ZMPNEDUTF+hwy2LUC+Bl+SyLXANnwz/jyh/qutKUw=="
+    },
+    "object-keys": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
+      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA=="
+    },
+    "object.assign": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.0.tgz",
+      "integrity": "sha512-exHJeq6kBKj58mqGyTQ9DFvrZC/eR6OwxzoM9YRoGBqrXYonaFyGiFMuc9VZrXf7DarreEwMpurG3dd+CNyW5w==",
+      "requires": {
+        "define-properties": "^1.1.2",
+        "function-bind": "^1.1.1",
+        "has-symbols": "^1.0.0",
+        "object-keys": "^1.0.11"
+      }
+    },
+    "opencollective-postinstall": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/opencollective-postinstall/-/opencollective-postinstall-2.0.2.tgz",
+      "integrity": "sha512-pVOEP16TrAO2/fjej1IdOyupJY8KDUM1CvsaScRbw6oddvpQoOfGk4ywha0HKKVAD6RkW4x6Q+tNBwhf3Bgpuw==",
+      "dev": true
+    },
+    "p-limit": {
+      "version": "2.2.2",
+      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.2.2.tgz",
+      "integrity": "sha512-WGR+xHecKTr7EbUEhyLSh5Dube9JtdiG78ufaeLxTgpudf/20KqyMioIUZJAezlTIi6evxuoUs9YXc11cU+yzQ==",
+      "dev": true,
+      "requires": {
+        "p-try": "^2.0.0"
+      }
+    },
+    "p-locate": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
+      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
+      "dev": true,
+      "requires": {
+        "p-limit": "^2.2.0"
+      }
+    },
+    "p-try": {
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
+      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
+      "dev": true
+    },
+    "parent-module": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
+      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
+      "dev": true,
+      "requires": {
+        "callsites": "^3.0.0"
+      }
+    },
+    "parse-json": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-4.0.0.tgz",
+      "integrity": "sha1-vjX1Qlvh9/bHRxhPmKeIy5lHfuA=",
+      "requires": {
+        "error-ex": "^1.3.1",
+        "json-parse-better-errors": "^1.0.1"
+      }
+    },
+    "path-exists": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
+      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
+      "dev": true
+    },
+    "path-key": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/path-key/-/path-key-2.0.1.tgz",
+      "integrity": "sha1-QRyttXTFoUDTpLGRDUDYDMn0C0A="
+    },
+    "path-parse": {
+      "version": "1.0.6",
+      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.6.tgz",
+      "integrity": "sha512-GSmOT2EbHrINBf9SR7CDELwlJ8AENk3Qn7OikK4nFYAu3Ote2+JYNVvkpAEQm3/TLNEJFD/xZJjzyxg3KBWOzw=="
+    },
+    "path-type": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/path-type/-/path-type-3.0.0.tgz",
+      "integrity": "sha512-T2ZUsdZFHgA3u4e5PfPbjd7HDDpxPnQb5jN0SrDsjNSuVXHJqtwTnWqG0B1jZrgmJ/7lj1EmVIByWt1gxGkWvg==",
+      "requires": {
+        "pify": "^3.0.0"
+      }
+    },
+    "pidtree": {
+      "version": "0.3.0",
+      "resolved": "https://registry.npmjs.org/pidtree/-/pidtree-0.3.0.tgz",
+      "integrity": "sha512-9CT4NFlDcosssyg8KVFltgokyKZIFjoBxw8CTGy+5F38Y1eQWrt8tRayiUOXE+zVKQnYu5BR8JjCtvK3BcnBhg=="
+    },
+    "pify": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/pify/-/pify-3.0.0.tgz",
+      "integrity": "sha1-5aSs0sEB/fPZpNB/DbxNtJ3SgXY="
+    },
+    "pkg-dir": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
+      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
+      "dev": true,
+      "requires": {
+        "find-up": "^4.0.0"
+      }
+    },
+    "please-upgrade-node": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/please-upgrade-node/-/please-upgrade-node-3.2.0.tgz",
+      "integrity": "sha512-gQR3WpIgNIKwBMVLkpMUeR3e1/E1y42bqDQZfql+kDeXd8COYfM8PQA4X6y7a8u9Ua9FHmsrrmirW2vHs45hWg==",
+      "dev": true,
+      "requires": {
+        "semver-compare": "^1.0.0"
+      }
+    },
+    "read-pkg": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/read-pkg/-/read-pkg-3.0.0.tgz",
+      "integrity": "sha1-nLxoaXj+5l0WwA4rGcI3/Pbjg4k=",
+      "requires": {
+        "load-json-file": "^4.0.0",
+        "normalize-package-data": "^2.3.2",
+        "path-type": "^3.0.0"
+      }
+    },
+    "regenerator-runtime": {
+      "version": "0.13.4",
+      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.13.4.tgz",
+      "integrity": "sha512-plpwicqEzfEyTQohIKktWigcLzmNStMGwbOUbykx51/29Z3JOGYldaaNGK7ngNXV+UcoqvIMmloZ48Sr74sd+g==",
+      "dev": true
+    },
+    "resolve": {
+      "version": "1.15.1",
+      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.15.1.tgz",
+      "integrity": "sha512-84oo6ZTtoTUpjgNEr5SJyzQhzL72gaRodsSfyxC/AXRvwu0Yse9H8eF9IpGo7b8YetZhlI6v7ZQ6bKBFV/6S7w==",
+      "requires": {
+        "path-parse": "^1.0.6"
+      }
+    },
+    "resolve-from": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
+      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
+      "dev": true
+    },
+    "semver": {
+      "version": "5.7.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
+      "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ=="
+    },
+    "semver-compare": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/semver-compare/-/semver-compare-1.0.0.tgz",
+      "integrity": "sha1-De4hahyUGrN+nvsXiPavxf9VN/w=",
+      "dev": true
+    },
+    "semver-regex": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/semver-regex/-/semver-regex-2.0.0.tgz",
+      "integrity": "sha512-mUdIBBvdn0PLOeP3TEkMH7HHeUP3GjsXCwKarjv/kGmUFOYg1VqEemKhoQpWMu6X2I8kHeuVdGibLGkVK+/5Qw==",
+      "dev": true
+    },
+    "shebang-command": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-1.2.0.tgz",
+      "integrity": "sha1-RKrGW2lbAzmJaMOfNj/uXer98eo=",
+      "requires": {
+        "shebang-regex": "^1.0.0"
+      }
+    },
+    "shebang-regex": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-1.0.0.tgz",
+      "integrity": "sha1-2kL0l0DAtC2yypcoVxyxkMmO/qM="
+    },
+    "shell-quote": {
+      "version": "1.7.2",
+      "resolved": "https://registry.npmjs.org/shell-quote/-/shell-quote-1.7.2.tgz",
+      "integrity": "sha512-mRz/m/JVscCrkMyPqHc/bczi3OQHkLTqXHEFu0zDhK/qfv3UcOA4SVmRCLmos4bhjr9ekVQubj/R7waKapmiQg=="
+    },
+    "slash": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
+      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
+      "dev": true
+    },
+    "spdx-correct": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/spdx-correct/-/spdx-correct-3.1.0.tgz",
+      "integrity": "sha512-lr2EZCctC2BNR7j7WzJ2FpDznxky1sjfxvvYEyzxNyb6lZXHODmEoJeFu4JupYlkfha1KZpJyoqiJ7pgA1qq8Q==",
+      "requires": {
+        "spdx-expression-parse": "^3.0.0",
+        "spdx-license-ids": "^3.0.0"
+      }
+    },
+    "spdx-exceptions": {
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/spdx-exceptions/-/spdx-exceptions-2.2.0.tgz",
+      "integrity": "sha512-2XQACfElKi9SlVb1CYadKDXvoajPgBVPn/gOQLrTvHdElaVhr7ZEbqJaRnJLVNeaI4cMEAgVCeBMKF6MWRDCRA=="
+    },
+    "spdx-expression-parse": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/spdx-expression-parse/-/spdx-expression-parse-3.0.0.tgz",
+      "integrity": "sha512-Yg6D3XpRD4kkOmTpdgbUiEJFKghJH03fiC1OPll5h/0sO6neh2jqRDVHOQ4o/LMea0tgCkbMgea5ip/e+MkWyg==",
+      "requires": {
+        "spdx-exceptions": "^2.1.0",
+        "spdx-license-ids": "^3.0.0"
+      }
+    },
+    "spdx-license-ids": {
+      "version": "3.0.5",
+      "resolved": "https://registry.npmjs.org/spdx-license-ids/-/spdx-license-ids-3.0.5.tgz",
+      "integrity": "sha512-J+FWzZoynJEXGphVIS+XEh3kFSjZX/1i9gFBaWQcB+/tmpe2qUsSBABpcxqxnAxFdiUFEgAX1bjYGQvIZmoz9Q=="
+    },
+    "string.prototype.padend": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/string.prototype.padend/-/string.prototype.padend-3.1.0.tgz",
+      "integrity": "sha512-3aIv8Ffdp8EZj8iLwREGpQaUZiPyrWrpzMBHvkiSW/bK/EGve9np07Vwy7IJ5waydpGXzQZu/F8Oze2/IWkBaA==",
+      "requires": {
+        "define-properties": "^1.1.3",
+        "es-abstract": "^1.17.0-next.1"
+      }
+    },
+    "string.prototype.trimleft": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/string.prototype.trimleft/-/string.prototype.trimleft-2.1.1.tgz",
+      "integrity": "sha512-iu2AGd3PuP5Rp7x2kEZCrB2Nf41ehzh+goo8TV7z8/XDBbsvc6HQIlUl9RjkZ4oyrW1XM5UwlGl1oVEaDjg6Ag==",
+      "requires": {
+        "define-properties": "^1.1.3",
+        "function-bind": "^1.1.1"
+      }
+    },
+    "string.prototype.trimright": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/string.prototype.trimright/-/string.prototype.trimright-2.1.1.tgz",
+      "integrity": "sha512-qFvWL3/+QIgZXVmJBfpHmxLB7xsUXz6HsUmP8+5dRaC3Q7oKUv9Vo6aMCRZC1smrtyECFsIT30PqBJ1gTjAs+g==",
+      "requires": {
+        "define-properties": "^1.1.3",
+        "function-bind": "^1.1.1"
+      }
+    },
+    "strip-bom": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
+      "integrity": "sha1-IzTBjpx1n3vdVv3vfprj1YjmjtM="
+    },
+    "supports-color": {
+      "version": "5.5.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
+      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
+      "requires": {
+        "has-flag": "^3.0.0"
+      }
+    },
+    "validate-npm-package-license": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/validate-npm-package-license/-/validate-npm-package-license-3.0.4.tgz",
+      "integrity": "sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==",
+      "requires": {
+        "spdx-correct": "^3.0.0",
+        "spdx-expression-parse": "^3.0.0"
+      }
+    },
+    "which": {
+      "version": "1.3.1",
+      "resolved": "https://registry.npmjs.org/which/-/which-1.3.1.tgz",
+      "integrity": "sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
+      "requires": {
+        "isexe": "^2.0.0"
+      }
+    },
+    "which-pm-runs": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/which-pm-runs/-/which-pm-runs-1.0.0.tgz",
+      "integrity": "sha1-Zws6+8VS4LVd9rd4DKdGFfI60cs=",
+      "dev": true
+    },
+    "yaml": {
+      "version": "1.8.2",
+      "resolved": "https://registry.npmjs.org/yaml/-/yaml-1.8.2.tgz",
+      "integrity": "sha512-omakb0d7FjMo3R1D2EbTKVIk6dAVLRxFXdLZMEUToeAvuqgG/YuHMuQOZ5fgk+vQ8cx+cnGKwyg+8g8PNT0xQg==",
+      "dev": true,
+      "requires": {
+        "@babel/runtime": "^7.8.7"
+      }
+    }
+  }
+}
diff --git a/package.json b/package.json
new file mode 100644
index 00000000..252698c7
--- /dev/null
+++ b/package.json
@@ -0,0 +1,28 @@
+{
+  "private": true,
+  "license": "UNLICENSED",
+  "scripts": {
+    "private::format.black": "black dash tests --exclude metadata_test.py",
+    "private::format.renderer": "cd dash-renderer && npm run format",
+    "private::initialize.renderer": "cd dash-renderer && npm ci",
+    "private::lint.black": "if [[ $PYLINTRC != '.pylintrc' ]]; then black dash tests --exclude metadata_test.py --check; fi",
+    "private::lint.flake8": "flake8 --exclude=metadata_test.py dash tests",
+    "private::lint.pylint-dash": "PYLINTRC=${PYLINTRC:=.pylintrc37} && pylint dash setup.py --rcfile=$PYLINTRC",
+    "private::lint.pylint-tests": "pylint tests/unit tests/integration -d all -e C0410,C0411,C0412,C0413,W0109",
+    "private::lint.renderer": "cd dash-renderer && npm run lint",
+    "private::test.unit-dash": "PYTHONPATH=~/dash/tests/assets pytest tests/unit",
+    "private::test.unit-renderer": "cd dash-renderer && npm run test",
+    "private::test.integration-dash": "TESTFILES=$(circleci tests glob \"tests/integration/**/test_*.py\" | circleci tests split --split-by=timings) && pytest --headless --nopercyfinalize --junitxml=test-reports/junit_intg.xml ${TESTFILES}",
+    "format": "run-s private::format.*",
+    "initialize": "run-s private::initialize.*",
+    "lint": "run-s private::lint.*",
+    "test.integration": "run-s private::test.integration-*",
+    "test.unit": "run-s private::test.unit-**"
+  },
+  "devDependencies": {
+    "husky": "4.2.3"
+  },
+  "dependencies": {
+    "npm-run-all": "4.1.5"
+  }
+}
diff --git a/requires-dev.txt b/requires-dev.txt
index b7a15816..e2740285 100644
--- a/requires-dev.txt
+++ b/requires-dev.txt
@@ -1,11 +1,13 @@
 dash_flow_example==0.0.5
 dash-dangerously-set-inner-html
-mock
-flake8
-PyYAML>=5.1.1
+mock==4.0.1;python_version>="3.0"
+mock==3.0.5;python_version=="2.7"
+flake8==3.7.9
+PyYAML==5.3
 pylint==1.9.4;python_version<"3.7"
 pylint==2.3.1;python_version=="3.7"
 astroid==2.2.5;python_version=="3.7"
-virtualenv;python_version=="2.7"
-fire
-coloredlogs
\ No newline at end of file
+black==19.10b0;python_version>="3.0"
+virtualenv==20.0.10;python_version=="2.7"
+fire==0.2.1
+coloredlogs==14.0
\ No newline at end of file
diff --git a/requires-testing.txt b/requires-testing.txt
index e9ee3e59..d8007040 100644
--- a/requires-testing.txt
+++ b/requires-testing.txt
@@ -1,9 +1,10 @@
-pytest
-pytest-sugar
-pytest-mock
-lxml
-selenium>=3.141.0
-percy
-requests[security]
-beautifulsoup4
-waitress
\ No newline at end of file
+pytest==5.3.5;python_version>="3.0"
+pytest==4.6.9;python_version=="2.7"
+pytest-sugar==0.9.2
+pytest-mock==2.0.0
+lxml==4.5.0
+selenium==3.141.0
+percy==2.0.2
+requests[security]==2.21.0
+beautifulsoup4==4.8.2
+waitress==1.4.3
\ No newline at end of file
diff --git a/tests/integration/IntegrationTests.py b/tests/integration/IntegrationTests.py
index a450cb30..597acba9 100644
--- a/tests/integration/IntegrationTests.py
+++ b/tests/integration/IntegrationTests.py
@@ -28,23 +28,25 @@ class IntegrationTests(unittest.TestCase):
         super(IntegrationTests, cls).setUpClass()
 
         options = Options()
-        options.add_argument('--no-sandbox')
+        options.add_argument("--no-sandbox")
 
         capabilities = DesiredCapabilities.CHROME
-        capabilities['loggingPrefs'] = {'browser': 'SEVERE'}
+        capabilities["loggingPrefs"] = {"browser": "SEVERE"}
 
-        if 'DASH_TEST_CHROMEPATH' in os.environ:
-            options.binary_location = os.environ['DASH_TEST_CHROMEPATH']
+        if "DASH_TEST_CHROMEPATH" in os.environ:
+            options.binary_location = os.environ["DASH_TEST_CHROMEPATH"]
 
         cls.driver = webdriver.Chrome(
-            options=options, desired_capabilities=capabilities,
-            service_args=["--verbose", "--log-path=chrome.log"]
-            )
+            options=options,
+            desired_capabilities=capabilities,
+            service_args=["--verbose", "--log-path=chrome.log"],
+        )
 
         cls.percy_runner = percy.Runner(
             loader=percy.ResourceLoader(
-                webdriver=cls.driver,
-                base_url='/assets', root_dir='tests/assets'))
+                webdriver=cls.driver, base_url="/assets", root_dir="tests/assets"
+            )
+        )
 
         cls.percy_runner.initialize_build()
 
@@ -72,12 +74,7 @@ class IntegrationTests(unittest.TestCase):
         def run():
             dash.scripts.config.serve_locally = True
             dash.css.config.serve_locally = True
-            kws = dict(
-                port=8050,
-                debug=False,
-                processes=4,
-                threaded=False
-            )
+            kws = dict(port=8050, debug=False, processes=4, threaded=False)
             kws.update(kwargs)
             dash.run_server(**kws)
 
@@ -88,33 +85,31 @@ class IntegrationTests(unittest.TestCase):
 
         # Visit the dash page
         self.driver.implicitly_wait(2)
-        self.driver.get('http://localhost:8050')
+        self.driver.get("http://localhost:8050")
 
-    def percy_snapshot(self, name=''):
-        snapshot_name = '{} - py{}.{}'.format(
-            name, sys.version_info.major, sys.version_info.minor)
-        print(snapshot_name)
-        self.percy_runner.snapshot(
-            name=snapshot_name
+    def percy_snapshot(self, name=""):
+        snapshot_name = "{} - py{}.{}".format(
+            name, sys.version_info.major, sys.version_info.minor
         )
+        print(snapshot_name)
+        self.percy_runner.snapshot(name=snapshot_name)
 
     def wait_for_element_by_css_selector(self, selector, timeout=TIMEOUT):
         return WebDriverWait(self.driver, timeout).until(
             EC.presence_of_element_located((By.CSS_SELECTOR, selector)),
-            'Could not find element with selector "{}"'.format(selector)
+            'Could not find element with selector "{}"'.format(selector),
         )
 
     def wait_for_text_to_equal(self, selector, assertion_text, timeout=TIMEOUT):
         el = self.wait_for_element_by_css_selector(selector)
         WebDriverWait(self.driver, timeout).until(
             lambda *args: (
-                (str(el.text) == assertion_text) or
-                (str(el.get_attribute('value')) == assertion_text)
+                (str(el.text) == assertion_text)
+                or (str(el.get_attribute("value")) == assertion_text)
             ),
             "Element '{}' text was supposed to equal '{}' but it didn't".format(
-                selector,
-                assertion_text
-            )
+                selector, assertion_text
+            ),
         )
 
     def clear_log(self):
@@ -124,11 +119,7 @@ class IntegrationTests(unittest.TestCase):
 
     def get_log(self):
         entries = self.driver.get_log("browser")
-        return [
-            entry
-            for entry in entries
-            if entry["timestamp"] > self.last_timestamp
-        ]
+        return [entry for entry in entries if entry["timestamp"] > self.last_timestamp]
 
     def wait_until_get_log(self, timeout=10):
 
@@ -139,8 +130,7 @@ class IntegrationTests(unittest.TestCase):
             time.sleep(poll)
             cnt += 1
             if cnt * poll >= timeout * 1000:
-                raise SeleniumDriverTimeout(
-                    'cannot get log in {}'.format(timeout))
+                raise SeleniumDriverTimeout("cannot get log in {}".format(timeout))
 
         return logs
 
diff --git a/tests/integration/callbacks/test_basic_callback.py b/tests/integration/callbacks/test_basic_callback.py
index 48fd53a7..4b900f66 100644
--- a/tests/integration/callbacks/test_basic_callback.py
+++ b/tests/integration/callbacks/test_basic_callback.py
@@ -1,12 +1,10 @@
 from multiprocessing import Value
 
-from bs4 import BeautifulSoup
-
 import dash_core_components as dcc
 import dash_html_components as html
 import dash_table
 import dash
-from dash.dependencies import Input, Output, State
+from dash.dependencies import Input, Output
 from dash.exceptions import PreventUpdate
 
 
@@ -38,9 +36,7 @@ def test_cbsc001_simple_callback(dash_duo):
     assert dash_duo.find_element("#output-1").text == "hello world"
     dash_duo.percy_snapshot(name="simple-callback-hello-world")
 
-    assert call_count.value == 2 + len(
-        "hello world"
-    ), "initial count + each key stroke"
+    assert call_count.value == 2 + len("hello world"), "initial count + each key stroke"
 
     rqs = dash_duo.redux_state_rqs
     assert len(rqs) == 1
@@ -68,9 +64,7 @@ def test_cbsc002_callbacks_generating_children(dash_duo):
 
     call_count = Value("i", 0)
 
-    @app.callback(
-        Output("sub-output-1", "children"), [Input("sub-input-1", "value")]
-    )
+    @app.callback(Output("sub-output-1", "children"), [Input("sub-input-1", "value")])
     def update_input(value):
         call_count.value = call_count.value + 1
         return value
@@ -92,8 +86,7 @@ def test_cbsc002_callbacks_generating_children(dash_duo):
     assert pad_input.name == "input"
 
     assert (
-        pad_div.text == pad_input.attrs["value"]
-        and pad_div.get("id") == "sub-output-1"
+        pad_div.text == pad_input.attrs["value"] and pad_div.get("id") == "sub-output-1"
     ), "the sub-output-1 content reflects to sub-input-1 value"
 
     dash_duo.percy_snapshot(name="callback-generating-function-1")
@@ -171,6 +164,6 @@ def test_cbsc003_callback_with_unloaded_async_component(dash_duo):
 
     dash_duo.start_server(app)
 
-    dash_duo.find_element('#btn').click()
-    assert dash_duo.find_element('#output').text == "Bye"
+    dash_duo.find_element("#btn").click()
+    assert dash_duo.find_element("#output").text == "Bye"
     assert dash_duo.get_logs() == []
diff --git a/tests/integration/callbacks/test_layout_paths_with_callbacks.py b/tests/integration/callbacks/test_layout_paths_with_callbacks.py
index 3f4f5219..22b405f3 100644
--- a/tests/integration/callbacks/test_layout_paths_with_callbacks.py
+++ b/tests/integration/callbacks/test_layout_paths_with_callbacks.py
@@ -10,9 +10,7 @@ import dash.testing.wait as wait
 
 def test_cblp001_radio_buttons_callbacks_generating_children(dash_duo):
     TIMEOUT = 2
-    with open(
-        os.path.join(os.path.dirname(__file__), "state_path.json")
-    ) as fp:
+    with open(os.path.join(os.path.dirname(__file__), "state_path.json")) as fp:
         EXPECTED_PATHS = json.load(fp)
 
     app = Dash(__name__)
@@ -40,9 +38,7 @@ def test_cblp001_radio_buttons_callbacks_generating_children(dash_duo):
             [
                 html.H1("Chapter 1", id="chapter1-header"),
                 dcc.Dropdown(
-                    options=[
-                        {"label": i, "value": i} for i in ["NYC", "MTL", "SF"]
-                    ],
+                    options=[{"label": i, "value": i} for i in ["NYC", "MTL", "SF"]],
                     value="NYC",
                     id="chapter1-controls",
                 ),
@@ -59,9 +55,7 @@ def test_cblp001_radio_buttons_callbacks_generating_children(dash_duo):
             [
                 html.H1("Chapter 2", id="chapter2-header"),
                 dcc.RadioItems(
-                    options=[
-                        {"label": i, "value": i} for i in ["USA", "Canada"]
-                    ],
+                    options=[{"label": i, "value": i} for i in ["USA", "Canada"]],
                     value="USA",
                     id="chapter2-controls",
                 ),
@@ -80,8 +74,7 @@ def test_cblp001_radio_buttons_callbacks_generating_children(dash_duo):
                         dcc.Graph(id="chapter3-graph"),
                         dcc.RadioItems(
                             options=[
-                                {"label": i, "value": i}
-                                for i in ["Summer", "Winter"]
+                                {"label": i, "value": i} for i in ["Summer", "Winter"]
                             ],
                             value="Winter",
                             id="chapter3-controls",
@@ -148,9 +141,7 @@ def test_cblp001_radio_buttons_callbacks_generating_children(dash_duo):
     dash_duo.start_server(app)
 
     def check_chapter(chapter):
-        dash_duo.wait_for_element(
-            '#{}-graph:not(.dash-graph--pending)'.format(chapter)
-        )
+        dash_duo.wait_for_element("#{}-graph:not(.dash-graph--pending)".format(chapter))
 
         for key in dash_duo.redux_state_paths:
             assert dash_duo.find_elements(
@@ -237,8 +228,7 @@ def test_cblp001_radio_buttons_callbacks_generating_children(dash_duo):
     dash_duo.find_elements('input[type="radio"]')[0].click()
 
     wait.until(
-        lambda: dash_duo.redux_state_paths == EXPECTED_PATHS["chapter1"],
-        TIMEOUT,
+        lambda: dash_duo.redux_state_paths == EXPECTED_PATHS["chapter1"], TIMEOUT,
     )
     check_chapter("chapter1")
     dash_duo.percy_snapshot(name="chapter-1-again")
diff --git a/tests/integration/callbacks/test_multiple_callbacks.py b/tests/integration/callbacks/test_multiple_callbacks.py
index 7be877dd..0f41923e 100644
--- a/tests/integration/callbacks/test_multiple_callbacks.py
+++ b/tests/integration/callbacks/test_multiple_callbacks.py
@@ -8,9 +8,7 @@ from dash.dependencies import Input, Output
 
 def test_cbmt001_called_multiple_times_and_out_of_order(dash_duo):
     app = dash.Dash(__name__)
-    app.layout = html.Div(
-        [html.Button(id="input", n_clicks=0), html.Div(id="output")]
-    )
+    app.layout = html.Div([html.Button(id="input", n_clicks=0), html.Div(id="output")])
 
     call_count = Value("i", 0)
 
@@ -27,9 +25,7 @@ def test_cbmt001_called_multiple_times_and_out_of_order(dash_duo):
     time.sleep(3)
 
     assert call_count.value == 4, "get called 4 times"
-    assert (
-        dash_duo.find_element("#output").text == "3"
-    ), "clicked button 3 times"
+    assert dash_duo.find_element("#output").text == "3", "clicked button 3 times"
 
     rqs = dash_duo.redux_state_rqs
     assert len(rqs) == 1 and not rqs[0]["rejected"]
diff --git a/tests/integration/clientside/test_clientside.py b/tests/integration/clientside/test_clientside.py
index d610d18b..1b51fc4f 100644
--- a/tests/integration/clientside/test_clientside.py
+++ b/tests/integration/clientside/test_clientside.py
@@ -18,9 +18,7 @@ def test_clsd001_simple_clientside_serverside_callback(dash_duo):
         ]
     )
 
-    @app.callback(
-        Output("output-serverside", "children"), [Input("input", "value")]
-    )
+    @app.callback(Output("output-serverside", "children"), [Input("input", "value")])
     def update_output(value):
         return 'Server says "{}"'.format(value)
 
@@ -33,17 +31,11 @@ def test_clsd001_simple_clientside_serverside_callback(dash_duo):
     dash_duo.start_server(app)
 
     dash_duo.wait_for_text_to_equal("#output-serverside", 'Server says "None"')
-    dash_duo.wait_for_text_to_equal(
-        "#output-clientside", 'Client says "undefined"'
-    )
+    dash_duo.wait_for_text_to_equal("#output-clientside", 'Client says "undefined"')
 
     dash_duo.find_element("#input").send_keys("hello world")
-    dash_duo.wait_for_text_to_equal(
-        "#output-serverside", 'Server says "hello world"'
-    )
-    dash_duo.wait_for_text_to_equal(
-        "#output-clientside", 'Client says "hello world"'
-    )
+    dash_duo.wait_for_text_to_equal("#output-serverside", 'Server says "hello world"')
+    dash_duo.wait_for_text_to_equal("#output-clientside", 'Client says "hello world"')
 
 
 def test_clsd002_chained_serverside_clientside_callbacks(dash_duo):
@@ -82,9 +74,7 @@ def test_clsd002_chained_serverside_clientside_callbacks(dash_duo):
 
     call_counts = {"divide": Value("i", 0), "display": Value("i", 0)}
 
-    @app.callback(
-        Output("x-plus-y-div-2", "value"), [Input("x-plus-y", "value")]
-    )
+    @app.callback(Output("x-plus-y-div-2", "value"), [Input("x-plus-y", "value")])
     def divide_by_two(value):
         call_counts["divide"].value += 1
         return float(value) / 2.0
@@ -151,11 +141,7 @@ def test_clsd003_clientside_exceptions_halt_subsequent_updates(dash_duo):
     app = Dash(__name__, assets_folder="assets")
 
     app.layout = html.Div(
-        [
-            dcc.Input(id="first", value=1),
-            dcc.Input(id="second"),
-            dcc.Input(id="third"),
-        ]
+        [dcc.Input(id="first", value=1), dcc.Input(id="second"), dcc.Input(id="third")]
     )
 
     app.clientside_callback(
@@ -262,6 +248,7 @@ def test_clsd005_clientside_fails_when_returning_a_promise(dash_duo):
     dash_duo.wait_for_text_to_equal("#side-effect", "side effect")
     dash_duo.wait_for_text_to_equal("#output", "output")
 
+
 def test_clsd006_PreventUpdate(dash_duo):
     app = Dash(__name__, assets_folder="assets")
 
@@ -269,7 +256,7 @@ def test_clsd006_PreventUpdate(dash_duo):
         [
             dcc.Input(id="first", value=1),
             dcc.Input(id="second", value=1),
-            dcc.Input(id="third", value=1)
+            dcc.Input(id="third", value=1),
         ]
     )
 
@@ -277,33 +264,33 @@ def test_clsd006_PreventUpdate(dash_duo):
         ClientsideFunction(namespace="clientside", function_name="add1_prevent_at_11"),
         Output("second", "value"),
         [Input("first", "value")],
-        [State("second", "value")]
+        [State("second", "value")],
     )
 
     app.clientside_callback(
         ClientsideFunction(namespace="clientside", function_name="add1_prevent_at_11"),
         Output("third", "value"),
         [Input("second", "value")],
-        [State("third", "value")]
+        [State("third", "value")],
     )
 
     dash_duo.start_server(app)
 
-    dash_duo.wait_for_text_to_equal("#first", '1')
-    dash_duo.wait_for_text_to_equal("#second", '2')
-    dash_duo.wait_for_text_to_equal("#third", '2')
+    dash_duo.wait_for_text_to_equal("#first", "1")
+    dash_duo.wait_for_text_to_equal("#second", "2")
+    dash_duo.wait_for_text_to_equal("#third", "2")
 
     dash_duo.find_element("#first").send_keys("1")
 
-    dash_duo.wait_for_text_to_equal("#first", '11')
-    dash_duo.wait_for_text_to_equal("#second", '2')
-    dash_duo.wait_for_text_to_equal("#third", '2')
+    dash_duo.wait_for_text_to_equal("#first", "11")
+    dash_duo.wait_for_text_to_equal("#second", "2")
+    dash_duo.wait_for_text_to_equal("#third", "2")
 
     dash_duo.find_element("#first").send_keys("1")
 
-    dash_duo.wait_for_text_to_equal("#first", '111')
-    dash_duo.wait_for_text_to_equal("#second", '3')
-    dash_duo.wait_for_text_to_equal("#third", '3')
+    dash_duo.wait_for_text_to_equal("#first", "111")
+    dash_duo.wait_for_text_to_equal("#second", "3")
+    dash_duo.wait_for_text_to_equal("#third", "3")
 
 
 def test_clsd007_no_update(dash_duo):
@@ -313,36 +300,37 @@ def test_clsd007_no_update(dash_duo):
         [
             dcc.Input(id="first", value=1),
             dcc.Input(id="second", value=1),
-            dcc.Input(id="third", value=1)
+            dcc.Input(id="third", value=1),
         ]
     )
 
     app.clientside_callback(
-        ClientsideFunction(namespace="clientside", function_name="add1_no_update_at_11"),
-        [Output("second", "value"),
-         Output("third", "value")],
+        ClientsideFunction(
+            namespace="clientside", function_name="add1_no_update_at_11"
+        ),
+        [Output("second", "value"), Output("third", "value")],
         [Input("first", "value")],
-        [State("second", "value"),
-         State("third", "value")]
+        [State("second", "value"), State("third", "value")],
     )
 
     dash_duo.start_server(app)
 
-    dash_duo.wait_for_text_to_equal("#first", '1')
-    dash_duo.wait_for_text_to_equal("#second", '2')
-    dash_duo.wait_for_text_to_equal("#third", '2')
+    dash_duo.wait_for_text_to_equal("#first", "1")
+    dash_duo.wait_for_text_to_equal("#second", "2")
+    dash_duo.wait_for_text_to_equal("#third", "2")
 
     dash_duo.find_element("#first").send_keys("1")
 
-    dash_duo.wait_for_text_to_equal("#first", '11')
-    dash_duo.wait_for_text_to_equal("#second", '2')
-    dash_duo.wait_for_text_to_equal("#third", '3')
+    dash_duo.wait_for_text_to_equal("#first", "11")
+    dash_duo.wait_for_text_to_equal("#second", "2")
+    dash_duo.wait_for_text_to_equal("#third", "3")
 
     dash_duo.find_element("#first").send_keys("1")
 
-    dash_duo.wait_for_text_to_equal("#first", '111')
-    dash_duo.wait_for_text_to_equal("#second", '3')
-    dash_duo.wait_for_text_to_equal("#third", '4')
+    dash_duo.wait_for_text_to_equal("#first", "111")
+    dash_duo.wait_for_text_to_equal("#second", "3")
+    dash_duo.wait_for_text_to_equal("#third", "4")
+
 
 def test_clsd008_clientside_inline_source(dash_duo):
     app = Dash(__name__, assets_folder="assets")
@@ -355,9 +343,7 @@ def test_clsd008_clientside_inline_source(dash_duo):
         ]
     )
 
-    @app.callback(
-        Output("output-serverside", "children"), [Input("input", "value")]
-    )
+    @app.callback(Output("output-serverside", "children"), [Input("input", "value")])
     def update_output(value):
         return 'Server says "{}"'.format(value)
 
@@ -374,14 +360,8 @@ def test_clsd008_clientside_inline_source(dash_duo):
     dash_duo.start_server(app)
 
     dash_duo.wait_for_text_to_equal("#output-serverside", 'Server says "None"')
-    dash_duo.wait_for_text_to_equal(
-        "#output-clientside", 'Client says "undefined"'
-    )
+    dash_duo.wait_for_text_to_equal("#output-clientside", 'Client says "undefined"')
 
     dash_duo.find_element("#input").send_keys("hello world")
-    dash_duo.wait_for_text_to_equal(
-        "#output-serverside", 'Server says "hello world"'
-    )
-    dash_duo.wait_for_text_to_equal(
-        "#output-clientside", 'Client says "hello world"'
-    )
+    dash_duo.wait_for_text_to_equal("#output-serverside", 'Server says "hello world"')
+    dash_duo.wait_for_text_to_equal("#output-clientside", 'Client says "hello world"')
diff --git a/tests/integration/dash_assets/test_dash_assets.py b/tests/integration/dash_assets/test_dash_assets.py
index ba301d46..e3006268 100644
--- a/tests/integration/dash_assets/test_dash_assets.py
+++ b/tests/integration/dash_assets/test_dash_assets.py
@@ -1,5 +1,4 @@
 import json
-import time
 import itertools
 
 import dash_html_components as html
@@ -39,8 +38,7 @@ def test_dada001_assets(dash_duo):
     ), "margin is overloaded by assets css resource"
 
     assert (
-        dash_duo.find_element("#content").value_of_css_property("padding")
-        == "8px"
+        dash_duo.find_element("#content").value_of_css_property("padding") == "8px"
     ), "padding is overloaded by assets"
 
     tested = json.loads(dash_duo.wait_for_element("#tested").text)
@@ -86,9 +84,7 @@ def test_dada002_external_files_init(dash_duo):
         },
     ]
 
-    app = Dash(
-        __name__, external_scripts=js_files, external_stylesheets=css_files
-    )
+    app = Dash(__name__, external_scripts=js_files, external_stylesheets=css_files)
 
     app.index_string = """<!DOCTYPE html>
     <html>
diff --git a/tests/integration/devtools/test_devtools_error_handling.py b/tests/integration/devtools/test_devtools_error_handling.py
index 167ae4ee..a9773c27 100644
--- a/tests/integration/devtools/test_devtools_error_handling.py
+++ b/tests/integration/devtools/test_devtools_error_handling.py
@@ -68,19 +68,19 @@ def test_dveh001_python_errors(dash_duo):
     # the top (first) error is the most recent one - ie from the second click
     error0 = get_error_html(dash_duo, 0)
     # user part of the traceback shown by default
-    assert 'in update_output' in error0
-    assert 'Special 2 clicks exception' in error0
-    assert 'in bad_sub' not in error0
+    assert "in update_output" in error0
+    assert "Special 2 clicks exception" in error0
+    assert "in bad_sub" not in error0
     # dash and flask part of the traceback not included
-    assert '%% callback invoked %%' not in error0
-    assert 'self.wsgi_app' not in error0
+    assert "%% callback invoked %%" not in error0
+    assert "self.wsgi_app" not in error0
 
     error1 = get_error_html(dash_duo, 1)
-    assert 'in update_output' in error1
-    assert 'in bad_sub' in error1
-    assert 'ZeroDivisionError' in error1
-    assert '%% callback invoked %%' not in error1
-    assert 'self.wsgi_app' not in error1
+    assert "in update_output" in error1
+    assert "in bad_sub" in error1
+    assert "ZeroDivisionError" in error1
+    assert "%% callback invoked %%" not in error1
+    assert "self.wsgi_app" not in error1
 
 
 def test_dveh006_long_python_errors(dash_duo):
@@ -103,20 +103,20 @@ def test_dveh006_long_python_errors(dash_duo):
     dash_duo.find_element(".test-devtools-error-toggle").click()
 
     error0 = get_error_html(dash_duo, 0)
-    assert 'in update_output' in error0
-    assert 'Special 2 clicks exception' in error0
-    assert 'in bad_sub' not in error0
+    assert "in update_output" in error0
+    assert "Special 2 clicks exception" in error0
+    assert "in bad_sub" not in error0
     # dash and flask part of the traceback ARE included
     # since we set dev_tools_prune_errors=False
-    assert '%% callback invoked %%' in error0
-    assert 'self.wsgi_app' in error0
+    assert "%% callback invoked %%" in error0
+    assert "self.wsgi_app" in error0
 
     error1 = get_error_html(dash_duo, 1)
-    assert 'in update_output' in error1
-    assert 'in bad_sub' in error1
-    assert 'ZeroDivisionError' in error1
-    assert '%% callback invoked %%' in error1
-    assert 'self.wsgi_app' in error1
+    assert "in update_output" in error1
+    assert "in bad_sub" in error1
+    assert "ZeroDivisionError" in error1
+    assert "%% callback invoked %%" in error1
+    assert "self.wsgi_app" in error1
 
 
 def test_dveh002_prevent_update_not_in_error_msg(dash_duo):
@@ -157,9 +157,7 @@ def test_dveh002_prevent_update_not_in_error_msg(dash_duo):
     # two exceptions fired, but only a single exception appeared in the UI:
     # the prevent default was not displayed
     dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "1")
-    dash_duo.percy_snapshot(
-        "devtools - prevent update - only a single exception"
-    )
+    dash_duo.percy_snapshot("devtools - prevent update - only a single exception")
 
 
 def test_dveh003_validation_errors_in_place(dash_duo):
@@ -186,7 +184,7 @@ def test_dveh003_validation_errors_in_place(dash_duo):
         dev_tools_hot_reload=False,
     )
 
-    dash_duo.wait_for_element('.js-plotly-plot .main-svg')
+    dash_duo.wait_for_element(".js-plotly-plot .main-svg")
 
     dash_duo.find_element("#button").click()
     dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "1")
@@ -235,9 +233,7 @@ def test_dveh005_multiple_outputs(dash_duo):
     app.layout = html.Div(
         [
             html.Button(
-                id="multi-output",
-                children="trigger multi output update",
-                n_clicks=0,
+                id="multi-output", children="trigger multi output update", n_clicks=0,
             ),
             html.Div(id="multi-1"),
             html.Div(id="multi-2"),
diff --git a/tests/integration/devtools/test_devtools_ui.py b/tests/integration/devtools/test_devtools_ui.py
index d0f95848..7d6ce5ab 100644
--- a/tests/integration/devtools/test_devtools_ui.py
+++ b/tests/integration/devtools/test_devtools_ui.py
@@ -23,17 +23,13 @@ def test_dvui001_disable_props_check_config(dash_duo):
     )
 
     dash_duo.wait_for_text_to_equal("#tcid", "Hello Props Check")
-    assert dash_duo.find_elements(
-        "#broken svg.main-svg"
-    ), "graph should be rendered"
+    assert dash_duo.find_elements("#broken svg.main-svg"), "graph should be rendered"
 
     assert dash_duo.find_elements(
         ".dash-debug-menu"
     ), "the debug menu icon should show up"
 
-    dash_duo.percy_snapshot(
-        "devtools - disable props check - Graph should render"
-    )
+    dash_duo.percy_snapshot("devtools - disable props check - Graph should render")
 
 
 def test_dvui002_disable_ui_config(dash_duo):
diff --git a/tests/integration/devtools/test_props_check.py b/tests/integration/devtools/test_props_check.py
index b9d71556..2b33ed40 100644
--- a/tests/integration/devtools/test_props_check.py
+++ b/tests/integration/devtools/test_props_check.py
@@ -22,10 +22,7 @@ test_cases = {
         "fail": True,
         "name": "invalid nested prop",
         "component": dcc.Checklist,
-        "props": {
-            "options": [{"label": "hello", "value": True}],
-            "value": ["test"],
-        },
+        "props": {"options": [{"label": "hello", "value": True}], "value": ["test"]},
     },
     "invalid-arrayOf": {
         "fail": True,
@@ -56,13 +53,7 @@ test_cases = {
         "name": "nested object with bad value",
         "component": DataTable,
         "props": {
-            "columns": [{
-                "id": "id",
-                "name": "name",
-                "format": {
-                    "locale": "asdf"
-                }
-            }]
+            "columns": [{"id": "id", "name": "name", "format": {"locale": "asdf"}}]
         },
     },
     "invalid-shape-3": {
@@ -70,13 +61,7 @@ test_cases = {
         "name": "invalid oneOf within nested object",
         "component": DataTable,
         "props": {
-            "columns": [{
-                "id": "id",
-                "name": "name",
-                "on_change": {
-                    "action": "asdf"
-                }
-            }]
+            "columns": [{"id": "id", "name": "name", "on_change": {"action": "asdf"}}]
         },
     },
     "invalid-shape-4": {
@@ -84,31 +69,20 @@ test_cases = {
         "name": "invalid key within deeply nested object",
         "component": DataTable,
         "props": {
-            "columns": [{
-                "id": "id",
-                "name": "name",
-                "on_change": {
-                    "asdf": "asdf"
-                }
-            }]
+            "columns": [{"id": "id", "name": "name", "on_change": {"asdf": "asdf"}}]
         },
     },
     "invalid-shape-5": {
         "fail": True,
         "name": "invalid not required key",
         "component": dcc.Dropdown,
-        "props": {
-            "options": [{"label": "new york", "value": "ny", "typo": "asdf"}]
-        },
+        "props": {"options": [{"label": "new york", "value": "ny", "typo": "asdf"}]},
     },
     "string-not-list": {
         "fail": True,
         "name": "string-not-a-list",
         "component": dcc.Checklist,
-        "props": {
-            "options": [{"label": "hello", "value": "test"}],
-            "value": "test",
-        },
+        "props": {"options": [{"label": "hello", "value": "test"}], "value": "test"},
     },
     "no-properties": {
         "fail": False,
@@ -139,13 +113,7 @@ test_cases = {
         "name": "nested string instead of number/null",
         "component": DataTable,
         "props": {
-            "columns": [{
-                "id": "id",
-                "name": "name",
-                "format": {
-                    "prefix": "asdf"
-                }
-            }]
+            "columns": [{"id": "id", "name": "name", "format": {"prefix": "asdf"}}]
         },
     },
     "allow-null": {
@@ -153,13 +121,7 @@ test_cases = {
         "name": "nested null",
         "component": DataTable,
         "props": {
-            "columns": [{
-                "id": "id",
-                "name": "name",
-                "format": {
-                    "prefix": None
-                }
-            }]
+            "columns": [{"id": "id", "name": "name", "format": {"prefix": None}}]
         },
     },
     "allow-null-2": {
@@ -202,9 +164,7 @@ test_cases = {
         "fail": False,
         "name": "allow exact with optional and required keys",
         "component": dcc.Dropdown,
-        "props": {
-            "options": [{"label": "new york", "value": "ny", "disabled": False}]
-        },
+        "props": {"options": [{"label": "new york", "value": "ny", "disabled": False}]},
     },
     "allow-exact-with-optional-and-required-2": {
         "fail": False,
@@ -220,16 +180,13 @@ def test_dvpc001_prop_check_errors_with_path(dash_duo):
 
     app.layout = html.Div([html.Div(id="content"), dcc.Location(id="location")])
 
-    @app.callback(
-        Output("content", "children"), [Input("location", "pathname")]
-    )
+    @app.callback(Output("content", "children"), [Input("location", "pathname")])
     def display_content(pathname):
         if pathname is None or pathname == "/":
             return "Initial state"
         test_case = test_cases[pathname.strip("/")]
         return html.Div(
-            id="new-component",
-            children=test_case["component"](**test_case["props"]),
+            id="new-component", children=test_case["component"](**test_case["props"]),
         )
 
     dash_duo.start_server(
@@ -247,14 +204,10 @@ def test_dvpc001_prop_check_errors_with_path(dash_duo):
         if test_cases[tc]["fail"]:
             dash_duo.wait_for_element(".test-devtools-error-toggle").click()
             dash_duo.percy_snapshot(
-                "devtools validation exception: {}".format(
-                    test_cases[tc]["name"]
-                )
+                "devtools validation exception: {}".format(test_cases[tc]["name"])
             )
         else:
             dash_duo.wait_for_element("#new-component")
             dash_duo.percy_snapshot(
-                "devtools validation no exception: {}".format(
-                    test_cases[tc]["name"]
-                )
+                "devtools validation no exception: {}".format(test_cases[tc]["name"])
             )
diff --git a/tests/integration/renderer/test_dependencies.py b/tests/integration/renderer/test_dependencies.py
index ef62c440..d9d3c735 100644
--- a/tests/integration/renderer/test_dependencies.py
+++ b/tests/integration/renderer/test_dependencies.py
@@ -42,6 +42,6 @@ def test_rddp001_dependencies_on_components_that_dont_exist(dash_duo):
 
     rqs = dash_duo.redux_state_rqs
     assert len(rqs) == 1
-    assert rqs[0]["controllerId"] == "output-1.children" and not rqs[0]['rejected']
+    assert rqs[0]["controllerId"] == "output-1.children" and not rqs[0]["rejected"]
 
     assert dash_duo.get_logs() == []
diff --git a/tests/integration/renderer/test_due_diligence.py b/tests/integration/renderer/test_due_diligence.py
index 88ef5fbf..4b6a457f 100644
--- a/tests/integration/renderer/test_due_diligence.py
+++ b/tests/integration/renderer/test_due_diligence.py
@@ -57,9 +57,7 @@ def test_rddd001_initial_state(dash_duo):
 
     # Note: this .html file shows there's no undo/redo button by default
     with open(
-        os.path.join(
-            os.path.dirname(__file__), "initial_state_dash_app_content.html"
-        )
+        os.path.join(os.path.dirname(__file__), "initial_state_dash_app_content.html")
     ) as fp:
         expected_dom = BeautifulSoup(fp.read().strip(), "lxml")
 
@@ -69,23 +67,17 @@ def test_rddd001_initial_state(dash_duo):
         fetched_dom.decode() == expected_dom.decode()
     ), "the fetching rendered dom is expected"
 
-    assert (
-        dash_duo.get_logs() == []
-    ), "Check that no errors or warnings were displayed"
+    assert dash_duo.get_logs() == [], "Check that no errors or warnings were displayed"
 
     assert dash_duo.driver.execute_script(
-        "return JSON.parse(JSON.stringify("
-        "window.store.getState().layout"
-        "))"
+        "return JSON.parse(JSON.stringify(window.store.getState().layout))"
     ) == json.loads(
         json.dumps(app.layout, cls=plotly.utils.PlotlyJSONEncoder)
     ), "the state layout is identical to app.layout"
 
     r = requests.get("{}/_dash-dependencies".format(dash_duo.server_url))
     assert r.status_code == 200
-    assert (
-        r.json() == []
-    ), "no dependencies present in app as no callbacks are defined"
+    assert r.json() == [], "no dependencies present in app as no callbacks are defined"
 
     assert dash_duo.redux_state_paths == {
         abbr: [
@@ -96,9 +88,7 @@ def test_rddd001_initial_state(dash_duo):
         ]
         for abbr in (
             child.get("id")
-            for child in fetched_dom.find(id="react-entry-point").findChildren(
-                id=True
-            )
+            for child in fetched_dom.find(id="react-entry-point").findChildren(id=True)
         )
     }, "paths should reflect to the component hierarchy"
 
diff --git a/tests/integration/renderer/test_iframe.py b/tests/integration/renderer/test_iframe.py
index 6a4a93f5..9cabc9a1 100644
--- a/tests/integration/renderer/test_iframe.py
+++ b/tests/integration/renderer/test_iframe.py
@@ -13,13 +13,14 @@ def test_rdif001_sandbox_allow_scripts(dash_duo):
 
     N_OUTPUTS = 50
 
-    app.layout = html.Div([
-        html.Button("click me", id="btn"),
-    ] + [html.Div(id="output-{}".format(i)) for i in range(N_OUTPUTS)])
+    app.layout = html.Div(
+        [html.Button("click me", id="btn")]
+        + [html.Div(id="output-{}".format(i)) for i in range(N_OUTPUTS)]
+    )
 
     @app.callback(
         [Output("output-{}".format(i), "children") for i in range(N_OUTPUTS)],
-        [Input("btn", "n_clicks")]
+        [Input("btn", "n_clicks")],
     )
     def update_output(n_clicks):
         if n_clicks is None:
@@ -31,7 +32,9 @@ def test_rdif001_sandbox_allow_scripts(dash_duo):
     @app.server.after_request
     def apply_cors(response):
         response.headers["Access-Control-Allow-Origin"] = "*"
-        response.headers["Access-Control-Allow-Headers"] = "Origin, X-Requested-With, Content-Type, Accept, Authorization"
+        response.headers[
+            "Access-Control-Allow-Headers"
+        ] = "Origin, X-Requested-With, Content-Type, Accept, Authorization"
         return response
 
     dash_duo.start_server(app)
@@ -50,8 +53,8 @@ def test_rdif001_sandbox_allow_scripts(dash_duo):
 
     dash_duo.driver.switch_to.frame(0)
 
-    dash_duo.wait_for_element('#output-0')
-    dash_duo.wait_for_element_by_id('btn').click()
-    dash_duo.wait_for_element('#output-0').text == '0=1'
+    dash_duo.wait_for_element("#output-0")
+    dash_duo.wait_for_element_by_id("btn").click()
+    dash_duo.wait_for_element("#output-0").text == "0=1"
 
     assert len(dash_duo.get_logs()) != 0
diff --git a/tests/integration/renderer/test_multi_output.py b/tests/integration/renderer/test_multi_output.py
index 6a97ccd0..a9fcf512 100644
--- a/tests/integration/renderer/test_multi_output.py
+++ b/tests/integration/renderer/test_multi_output.py
@@ -16,13 +16,14 @@ def test_rdmo001_single_input_multi_outputs_on_multiple_components(dash_duo):
 
     N_OUTPUTS = 50
 
-    app.layout = html.Div([
-        html.Button("click me", id="btn"),
-    ] + [html.Div(id="output-{}".format(i)) for i in range(N_OUTPUTS)])
+    app.layout = html.Div(
+        [html.Button("click me", id="btn")]
+        + [html.Div(id="output-{}".format(i)) for i in range(N_OUTPUTS)]
+    )
 
     @app.callback(
         [Output("output-{}".format(i), "children") for i in range(N_OUTPUTS)],
-        [Input("btn", "n_clicks")]
+        [Input("btn", "n_clicks")],
     )
     def update_output(n_clicks):
         if n_clicks is None:
@@ -40,8 +41,7 @@ def test_rdmo001_single_input_multi_outputs_on_multiple_components(dash_duo):
 
         for i in range(N_OUTPUTS):
             dash_duo.wait_for_text_to_equal(
-                "#output-{}".format(i),
-                "{}={}".format(i, i + click)
+                "#output-{}".format(i), "{}={}".format(i, i + click)
             )
 
         assert call_count.value == click
@@ -51,24 +51,24 @@ def test_rdmo002_multi_outputs_on_single_component(dash_duo):
     call_count = Value("i")
     app = dash.Dash(__name__)
 
-    app.layout = html.Div([
-        dcc.Input(id="input", value="dash"),
-        html.Div(html.Div(id="output"), id="output-container"),
-    ])
+    app.layout = html.Div(
+        [
+            dcc.Input(id="input", value="dash"),
+            html.Div(html.Div(id="output"), id="output-container"),
+        ]
+    )
 
     @app.callback(
-        [Output("output", "children"),
-         Output("output", "style"),
-         Output("output", "className")],
-        [Input("input", "value")]
+        [
+            Output("output", "children"),
+            Output("output", "style"),
+            Output("output", "className"),
+        ],
+        [Input("input", "value")],
     )
     def update_output(value):
         call_count.value += 1
-        return [
-            value,
-            {"fontFamily": value},
-            value
-        ]
+        return [value, {"fontFamily": value}, value]
 
     dash_duo.start_server(app)
 
@@ -95,14 +95,14 @@ def test_rdmo002_multi_outputs_on_single_component(dash_duo):
 def test_rdmo003_single_output_as_multi(dash_duo):
     app = dash.Dash(__name__)
 
-    app.layout = html.Div([
-        dcc.Input(id="input", value=""),
-        html.Div(html.Div(id="output"), id="output-container"),
-    ])
+    app.layout = html.Div(
+        [
+            dcc.Input(id="input", value=""),
+            html.Div(html.Div(id="output"), id="output-container"),
+        ]
+    )
 
-    @app.callback(
-        [Output("output", "children")],
-        [Input("input", "value")])
+    @app.callback([Output("output", "children")], [Input("input", "value")])
     def update_output(value):
         return ["out" + value]
 
@@ -114,19 +114,15 @@ def test_rdmo003_single_output_as_multi(dash_duo):
 
 def test_rdmo004_multi_output_circular_dependencies(dash_duo):
     app = dash.Dash(__name__)
-    app.layout = html.Div([
-        dcc.Input(id="a"),
-        dcc.Input(id="b"),
-        html.P(id="c")
-    ])
+    app.layout = html.Div([dcc.Input(id="a"), dcc.Input(id="b"), html.P(id="c")])
 
     @app.callback(Output("a", "value"), [Input("b", "value")])
     def set_a(b):
         return ((b or "") + "X")[:100]
 
     @app.callback(
-        [Output("b", "value"), Output("c", "children")],
-        [Input("a", "value")])
+        [Output("b", "value"), Output("c", "children")], [Input("a", "value")]
+    )
     def set_bc(a):
         return [a, a]
 
@@ -135,7 +131,7 @@ def test_rdmo004_multi_output_circular_dependencies(dash_duo):
         debug=True,
         use_debugger=True,
         use_reloader=False,
-        dev_tools_hot_reload=False
+        dev_tools_hot_reload=False,
     )
 
     # the UI still renders the output triggered by callback
@@ -147,18 +143,15 @@ def test_rdmo004_multi_output_circular_dependencies(dash_duo):
 
 def test_rdmo005_set_props_behavior(dash_duo):
     app = dash.Dash(__name__)
-    app.layout = html.Div([
-        dash_renderer_test_components.UncontrolledInput(
-            id="id",
-            value=""
-        ),
-        html.Div(
-            id="container",
-            children=dash_renderer_test_components.UncontrolledInput(
-                value=""
+    app.layout = html.Div(
+        [
+            dash_renderer_test_components.UncontrolledInput(id="id", value=""),
+            html.Div(
+                id="container",
+                children=dash_renderer_test_components.UncontrolledInput(value=""),
             ),
-        )
-    ])
+        ]
+    )
 
     dash_duo.start_server(
         app,
diff --git a/tests/integration/renderer/test_persistence.py b/tests/integration/renderer/test_persistence.py
index 70c62d49..bc796f68 100644
--- a/tests/integration/renderer/test_persistence.py
+++ b/tests/integration/renderer/test_persistence.py
@@ -17,21 +17,18 @@ def clear_storage(dash_duo):
 
 
 def table_columns(names, **extra_props):
-    return [dict(
-        id='c{}'.format(i),
-        name=n,
-        renamable=True,
-        hideable=True,
-        **extra_props
-    ) for i, n in enumerate(names)]
+    return [
+        dict(id="c{}".format(i), name=n, renamable=True, hideable=True, **extra_props)
+        for i, n in enumerate(names)
+    ]
 
 
-def simple_table(names=('a', 'b'), **props_override):
+def simple_table(names=("a", "b"), **props_override):
     props = dict(
-        id='table',
+        id="table",
         columns=table_columns(names),
-        data=[{'c0': 0, 'c1': 1}, {'c0': 2, 'c1': 3}],
-        persistence=True
+        data=[{"c0": 0, "c1": 1}, {"c0": 2, "c1": 3}],
+        persistence=True,
     )
     props.update(props_override)
     return dt.DataTable(**props)
@@ -39,54 +36,55 @@ def simple_table(names=('a', 'b'), **props_override):
 
 def reloadable_app(**props_override):
     app = dash.Dash(__name__)
-    app.persistence = Value('i', 1)
+    app.persistence = Value("i", 1)
 
     def layout():
-        return html.Div([
-            html.Div(id='out'),
-            simple_table(persistence=app.persistence.value, **props_override)
-        ])
+        return html.Div(
+            [
+                html.Div(id="out"),
+                simple_table(persistence=app.persistence.value, **props_override),
+            ]
+        )
+
     app.layout = layout
 
     @app.callback(
-        Output('out', 'children'),
-        [Input('table', 'columns'), Input('table', 'hidden_columns')]
+        Output("out", "children"),
+        [Input("table", "columns"), Input("table", "hidden_columns")],
     )
     def report_props(columns, hidden_columns):
-        return 'names: [{}]; hidden: [{}]'.format(
-            ', '.join([col['name'] for col in columns]),
-            ', '.join(hidden_columns or [])
+        return "names: [{}]; hidden: [{}]".format(
+            ", ".join([col["name"] for col in columns]), ", ".join(hidden_columns or [])
         )
 
     return app
 
 
-NEW_NAME = 'mango'
+NEW_NAME = "mango"
 
 
 def rename_and_hide(dash_duo, rename=0, new_name=NEW_NAME, hide=1):
     dash_duo.find_element(
-        '.dash-header.column-{} .column-header--edit'.format(rename)
+        ".dash-header.column-{} .column-header--edit".format(rename)
     ).click()
     prompt = dash_duo.driver.switch_to.alert
     prompt.send_keys(new_name)
     prompt.accept()
     dash_duo.find_element(
-        '.dash-header.column-{} .column-header--hide'.format(hide)
+        ".dash-header.column-{} .column-header--hide".format(hide)
     ).click()
 
 
-def check_table_names(dash_duo, names, table_id='table'):
+def check_table_names(dash_duo, names, table_id="table"):
     dash_duo.wait_for_text_to_equal(
-        '#{} .column-0 .column-header-name'.format(table_id),
-        names[0]
+        "#{} .column-0 .column-header-name".format(table_id), names[0]
     )
-    headers = dash_duo.find_elements('#{} .column-header-name'.format(table_id))
+    headers = dash_duo.find_elements("#{} .column-header-name".format(table_id))
     assert len(headers) == len(names)
 
     for i, n in enumerate(names):
         name_el = dash_duo.find_element(
-            '#{} .column-{} .column-header-name'.format(table_id, i)
+            "#{} .column-{} .column-header-name".format(table_id, i)
         )
         assert name_el.text == n
 
@@ -94,372 +92,358 @@ def check_table_names(dash_duo, names, table_id='table'):
 def test_rdps001_local_reload(dash_duo):
     app = reloadable_app()
     dash_duo.start_server(app)
-    dash_duo.wait_for_text_to_equal('#out', 'names: [a, b]; hidden: []')
-    check_table_names(dash_duo, ['a', 'b'])
+    dash_duo.wait_for_text_to_equal("#out", "names: [a, b]; hidden: []")
+    check_table_names(dash_duo, ["a", "b"])
 
     rename_and_hide(dash_duo)
     # callback output
-    dash_duo.wait_for_text_to_equal('#out', 'names: [{}, b]; hidden: [c1]'.format(NEW_NAME))
+    dash_duo.wait_for_text_to_equal(
+        "#out", "names: [{}, b]; hidden: [c1]".format(NEW_NAME)
+    )
     check_table_names(dash_duo, [NEW_NAME])
 
     dash_duo.wait_for_page()
     # callback gets persisted values, not the values provided with the layout
-    dash_duo.wait_for_text_to_equal('#out', 'names: [{}, b]; hidden: [c1]'.format(NEW_NAME))
+    dash_duo.wait_for_text_to_equal(
+        "#out", "names: [{}, b]; hidden: [c1]".format(NEW_NAME)
+    )
     check_table_names(dash_duo, [NEW_NAME])
 
     # new persistence reverts
     app.persistence.value = 2
     dash_duo.wait_for_page()
-    check_table_names(dash_duo, ['a', 'b'])
-    rename_and_hide(dash_duo, 1, 'two', 0)
-    dash_duo.wait_for_text_to_equal('#out', 'names: [a, two]; hidden: [c0]')
-    check_table_names(dash_duo, ['two'])
+    check_table_names(dash_duo, ["a", "b"])
+    rename_and_hide(dash_duo, 1, "two", 0)
+    dash_duo.wait_for_text_to_equal("#out", "names: [a, two]; hidden: [c0]")
+    check_table_names(dash_duo, ["two"])
 
     # put back the old persistence, get the old values
     app.persistence.value = 1
     dash_duo.wait_for_page()
-    dash_duo.wait_for_text_to_equal('#out', 'names: [{}, b]; hidden: [c1]'.format(NEW_NAME))
+    dash_duo.wait_for_text_to_equal(
+        "#out", "names: [{}, b]; hidden: [c1]".format(NEW_NAME)
+    )
     check_table_names(dash_duo, [NEW_NAME])
 
     # falsy persistence disables it
     app.persistence.value = 0
     dash_duo.wait_for_page()
-    check_table_names(dash_duo, ['a', 'b'])
+    check_table_names(dash_duo, ["a", "b"])
     rename_and_hide(dash_duo)
     check_table_names(dash_duo, [NEW_NAME])
     dash_duo.wait_for_page()
-    check_table_names(dash_duo, ['a', 'b'])
+    check_table_names(dash_duo, ["a", "b"])
 
     # falsy to previous truthy also brings the values
     app.persistence.value = 2
     dash_duo.wait_for_page()
-    dash_duo.wait_for_text_to_equal('#out', 'names: [a, two]; hidden: [c0]')
-    check_table_names(dash_duo, ['two'])
+    dash_duo.wait_for_text_to_equal("#out", "names: [a, two]; hidden: [c0]")
+    check_table_names(dash_duo, ["two"])
 
 
 def test_rdps002_session_reload(dash_duo):
-    app = reloadable_app(persistence_type='session')
+    app = reloadable_app(persistence_type="session")
     dash_duo.start_server(app)
-    check_table_names(dash_duo, ['a', 'b'])
+    check_table_names(dash_duo, ["a", "b"])
     rename_and_hide(dash_duo)
     check_table_names(dash_duo, [NEW_NAME])
 
     dash_duo.wait_for_page()
     # callback gets persisted values, not the values provided with the layout
-    dash_duo.wait_for_text_to_equal('#out', 'names: [{}, b]; hidden: [c1]'.format(NEW_NAME))
+    dash_duo.wait_for_text_to_equal(
+        "#out", "names: [{}, b]; hidden: [c1]".format(NEW_NAME)
+    )
     check_table_names(dash_duo, [NEW_NAME])
 
 
 def test_rdps003_memory_reload(dash_duo):
-    app = reloadable_app(persistence_type='memory')
+    app = reloadable_app(persistence_type="memory")
     dash_duo.start_server(app)
-    check_table_names(dash_duo, ['a', 'b'])
+    check_table_names(dash_duo, ["a", "b"])
     rename_and_hide(dash_duo)
     check_table_names(dash_duo, [NEW_NAME])
 
     dash_duo.wait_for_page()
     # no persistence after reload with persistence_type=memory
-    check_table_names(dash_duo, ['a', 'b'])
+    check_table_names(dash_duo, ["a", "b"])
 
 
 def test_rdps004_show_hide(dash_duo):
     app = dash.Dash(__name__)
-    app.layout = html.Div([
-        html.Button('Show/Hide', id='toggle-table'),
-        html.Div(id='container')
-    ])
-
-    @app.callback(
-        Output('container', 'children'),
-        [Input('toggle-table', 'n_clicks')]
+    app.layout = html.Div(
+        [html.Button("Show/Hide", id="toggle-table"), html.Div(id="container")]
     )
+
+    @app.callback(Output("container", "children"), [Input("toggle-table", "n_clicks")])
     def toggle_table(n):
         if (n or 0) % 2:
-            return 'nope'
+            return "nope"
         return simple_table(
-            persistence_type='memory',
-            persistence=1 if (n or 0) < 3 else 2
+            persistence_type="memory", persistence=1 if (n or 0) < 3 else 2
         )
 
     dash_duo.start_server(app)
-    check_table_names(dash_duo, ['a', 'b'])
+    check_table_names(dash_duo, ["a", "b"])
 
     rename_and_hide(dash_duo)
     check_table_names(dash_duo, [NEW_NAME])
 
-    dash_duo.find_element('#toggle-table').click()
+    dash_duo.find_element("#toggle-table").click()
     # table is gone
-    dash_duo.wait_for_text_to_equal('#container', 'nope')
+    dash_duo.wait_for_text_to_equal("#container", "nope")
 
-    dash_duo.find_element('#toggle-table').click()
+    dash_duo.find_element("#toggle-table").click()
     # table is back, with persisted props
     check_table_names(dash_duo, [NEW_NAME])
 
-    dash_duo.find_element('#toggle-table').click()
+    dash_duo.find_element("#toggle-table").click()
     # gone again
-    dash_duo.wait_for_text_to_equal('#container', 'nope')
+    dash_duo.wait_for_text_to_equal("#container", "nope")
 
-    dash_duo.find_element('#toggle-table').click()
+    dash_duo.find_element("#toggle-table").click()
     # table is back, new persistence val so props not persisted
-    check_table_names(dash_duo, ['a', 'b'])
+    check_table_names(dash_duo, ["a", "b"])
 
 
 def test_rdps005_persisted_props(dash_duo):
     app = dash.Dash(__name__)
-    app.layout = html.Div([
-        html.Button('toggle persisted_props', id='toggle-table'),
-        html.Div(id='container')
-    ])
-
-    @app.callback(
-        Output('container', 'children'),
-        [Input('toggle-table', 'n_clicks')]
+    app.layout = html.Div(
+        [
+            html.Button("toggle persisted_props", id="toggle-table"),
+            html.Div(id="container"),
+        ]
     )
+
+    @app.callback(Output("container", "children"), [Input("toggle-table", "n_clicks")])
     def toggle_table(n):
         if (n or 0) % 2:
-            return simple_table(persisted_props=['data', 'columns.name'])
+            return simple_table(persisted_props=["data", "columns.name"])
         return simple_table()
 
     dash_duo.start_server(app)
-    check_table_names(dash_duo, ['a', 'b'])
+    check_table_names(dash_duo, ["a", "b"])
 
     rename_and_hide(dash_duo)
     check_table_names(dash_duo, [NEW_NAME])
 
-    dash_duo.find_element('#toggle-table').click()
+    dash_duo.find_element("#toggle-table").click()
     # hidden_columns not persisted
-    check_table_names(dash_duo, [NEW_NAME, 'b'])
+    check_table_names(dash_duo, [NEW_NAME, "b"])
 
-    dash_duo.find_element('#toggle-table').click()
+    dash_duo.find_element("#toggle-table").click()
     # back to original persisted_props hidden_columns returns
     check_table_names(dash_duo, [NEW_NAME])
 
 
 def test_rdps006_move_on_page(dash_duo):
     app = dash.Dash(__name__)
-    app.layout = html.Div([
-        html.Button('move table', id='move-table'),
-        html.Div(id='container')
-    ])
-
-    @app.callback(
-        Output('container', 'children'),
-        [Input('move-table', 'n_clicks')]
+    app.layout = html.Div(
+        [html.Button("move table", id="move-table"), html.Div(id="container")]
     )
+
+    @app.callback(Output("container", "children"), [Input("move-table", "n_clicks")])
     def move_table(n):
-        children = [html.Div('div 0', id='div0'), simple_table()]
+        children = [html.Div("div 0", id="div0"), simple_table()]
         for i in range(1, (n or 0) + 1):
             children = [
-                html.Div('div {}'.format(i), id='div{}'.format(i)),
-                html.Div(children)
+                html.Div("div {}".format(i), id="div{}".format(i)),
+                html.Div(children),
             ]
         return children
 
     def find_last_div(n):
-        dash_duo.wait_for_text_to_equal('#div{}'.format(n), 'div {}'.format(n))
-        assert len(dash_duo.find_elements('#div{}'.format(n + 1))) == 0
+        dash_duo.wait_for_text_to_equal("#div{}".format(n), "div {}".format(n))
+        assert len(dash_duo.find_elements("#div{}".format(n + 1))) == 0
 
     dash_duo.start_server(app)
     find_last_div(0)
-    check_table_names(dash_duo, ['a', 'b'])
+    check_table_names(dash_duo, ["a", "b"])
 
     rename_and_hide(dash_duo)
     check_table_names(dash_duo, [NEW_NAME])
 
     for i in range(1, 5):
-        dash_duo.find_element('#move-table').click()
+        dash_duo.find_element("#move-table").click()
         find_last_div(i)
         check_table_names(dash_duo, [NEW_NAME])
 
 
 def test_rdps007_one_prop_changed(dash_duo):
     app = dash.Dash(__name__)
-    app.layout = html.Div([
-        html.Button('hide/show cols', id='hide-cols'),
-        html.Div(id='container')
-    ])
-
-    @app.callback(
-        Output('container', 'children'),
-        [Input('hide-cols', 'n_clicks')]
+    app.layout = html.Div(
+        [html.Button("hide/show cols", id="hide-cols"), html.Div(id="container")]
     )
+
+    @app.callback(Output("container", "children"), [Input("hide-cols", "n_clicks")])
     def hide_cols(n):
-        return simple_table(hidden_columns=['c0'] if (n or 0) % 2 else [])
+        return simple_table(hidden_columns=["c0"] if (n or 0) % 2 else [])
 
     dash_duo.start_server(app)
-    check_table_names(dash_duo, ['a', 'b'])
+    check_table_names(dash_duo, ["a", "b"])
 
     rename_and_hide(dash_duo)
     check_table_names(dash_duo, [NEW_NAME])
 
-    dash_duo.find_element('#hide-cols').click()
+    dash_duo.find_element("#hide-cols").click()
     # hidden_columns gets the new value
-    check_table_names(dash_duo, ['b'])
+    check_table_names(dash_duo, ["b"])
 
-    dash_duo.find_element('#hide-cols').click()
+    dash_duo.find_element("#hide-cols").click()
     # back to original hidden_columns, but saved value won't come back
-    check_table_names(dash_duo, [NEW_NAME, 'b'])
+    check_table_names(dash_duo, [NEW_NAME, "b"])
 
 
 def test_rdps008_unsaved_part_changed(dash_duo):
     app = dash.Dash(__name__)
-    app.layout = html.Div([
-        html.Button('toggle deletable', id='deletable'),
-        html.Div(id='container')
-    ])
-
-    @app.callback(
-        Output('container', 'children'),
-        [Input('deletable', 'n_clicks')]
+    app.layout = html.Div(
+        [html.Button("toggle deletable", id="deletable"), html.Div(id="container")]
     )
+
+    @app.callback(Output("container", "children"), [Input("deletable", "n_clicks")])
     def toggle_deletable(n):
         if (n or 0) % 2:
-            return simple_table(
-                columns=table_columns(('a', 'b'), deletable=True)
-            )
+            return simple_table(columns=table_columns(("a", "b"), deletable=True))
         return simple_table()
 
     dash_duo.start_server(app)
-    check_table_names(dash_duo, ['a', 'b'])
+    check_table_names(dash_duo, ["a", "b"])
 
     rename_and_hide(dash_duo)
     check_table_names(dash_duo, [NEW_NAME])
-    assert len(dash_duo.find_elements('.column-header--delete')) == 0
+    assert len(dash_duo.find_elements(".column-header--delete")) == 0
 
-    dash_duo.find_element('#deletable').click()
+    dash_duo.find_element("#deletable").click()
     # column names still persisted when columns.deletable changed
     # because extracted name list didn't change
     check_table_names(dash_duo, [NEW_NAME])
-    assert len(dash_duo.find_elements('.column-header--delete')) == 1
+    assert len(dash_duo.find_elements(".column-header--delete")) == 1
 
-    dash_duo.find_element('#deletable').click()
+    dash_duo.find_element("#deletable").click()
     check_table_names(dash_duo, [NEW_NAME])
-    assert len(dash_duo.find_elements('.column-header--delete')) == 0
+    assert len(dash_duo.find_elements(".column-header--delete")) == 0
 
 
 def test_rdps009_clear_prop_callback(dash_duo):
     app = dash.Dash(__name__)
-    app.layout = html.Div([
-        html.Button('reset name edits', id='reset-names'),
-        simple_table()
-    ])
-
-    @app.callback(
-        Output('table', 'columns'),
-        [Input('reset-names', 'n_clicks')]
+    app.layout = html.Div(
+        [html.Button("reset name edits", id="reset-names"), simple_table()]
     )
+
+    @app.callback(Output("table", "columns"), [Input("reset-names", "n_clicks")])
     def reset_names(n):
         # callbacks that return the actual persisted prop, as opposed to
         # the whole component containing them, always clear persistence, even
         # if the value is identical to the original. no_update can prevent this.
         # if we had multiple inputs, would need to check triggered
-        return table_columns(('a', 'b')) if n else dash.no_update
+        return table_columns(("a", "b")) if n else dash.no_update
 
     dash_duo.start_server(app)
-    check_table_names(dash_duo, ['a', 'b'])
+    check_table_names(dash_duo, ["a", "b"])
 
     rename_and_hide(dash_duo)
     check_table_names(dash_duo, [NEW_NAME])
 
-    dash_duo.find_element('#reset-names').click()
+    dash_duo.find_element("#reset-names").click()
     # names are reset, but not hidden_columns
-    check_table_names(dash_duo, ['a'])
+    check_table_names(dash_duo, ["a"])
 
 
 def test_rdps010_toggle_persistence(dash_duo):
     def make_input(persistence):
-        return dcc.Input(id='persisted', value='a', persistence=persistence)
+        return dcc.Input(id="persisted", value="a", persistence=persistence)
 
     app = dash.Dash(__name__)
-    app.layout = html.Div([
-        dcc.Input(id='persistence-val', value=''),
-        html.Div(make_input(''), id='persisted-container'),
-        html.Div(id='out')
-    ])
+    app.layout = html.Div(
+        [
+            dcc.Input(id="persistence-val", value=""),
+            html.Div(make_input(""), id="persisted-container"),
+            html.Div(id="out"),
+        ]
+    )
 
     @app.callback(
-        Output('persisted-container', 'children'),
-        [Input('persistence-val', 'value')]
+        Output("persisted-container", "children"), [Input("persistence-val", "value")]
     )
     def set_persistence(val):
         return make_input(val)
 
-    @app.callback(Output('out', 'children'), [Input('persisted', 'value')])
+    @app.callback(Output("out", "children"), [Input("persisted", "value")])
     def set_out(val):
         return val
 
     dash_duo.start_server(app)
 
-    dash_duo.wait_for_text_to_equal('#out', 'a')
-    dash_duo.find_element('#persisted').send_keys('lpaca')
-    dash_duo.wait_for_text_to_equal('#out', 'alpaca')
+    dash_duo.wait_for_text_to_equal("#out", "a")
+    dash_duo.find_element("#persisted").send_keys("lpaca")
+    dash_duo.wait_for_text_to_equal("#out", "alpaca")
 
-    dash_duo.find_element('#persistence-val').send_keys('s')
-    dash_duo.wait_for_text_to_equal('#out', 'a')
-    dash_duo.find_element('#persisted').send_keys('nchovies')
-    dash_duo.wait_for_text_to_equal('#out', 'anchovies')
+    dash_duo.find_element("#persistence-val").send_keys("s")
+    dash_duo.wait_for_text_to_equal("#out", "a")
+    dash_duo.find_element("#persisted").send_keys("nchovies")
+    dash_duo.wait_for_text_to_equal("#out", "anchovies")
 
-    dash_duo.find_element('#persistence-val').send_keys('2')
-    dash_duo.wait_for_text_to_equal('#out', 'a')
-    dash_duo.find_element('#persisted').send_keys('ardvark')
-    dash_duo.wait_for_text_to_equal('#out', 'aardvark')
+    dash_duo.find_element("#persistence-val").send_keys("2")
+    dash_duo.wait_for_text_to_equal("#out", "a")
+    dash_duo.find_element("#persisted").send_keys("ardvark")
+    dash_duo.wait_for_text_to_equal("#out", "aardvark")
 
     # alpaca not saved with falsy persistence
-    dash_duo.clear_input('#persistence-val')
-    dash_duo.wait_for_text_to_equal('#out', 'a')
+    dash_duo.clear_input("#persistence-val")
+    dash_duo.wait_for_text_to_equal("#out", "a")
 
     # anchovies and aardvark saved
-    dash_duo.find_element('#persistence-val').send_keys('s')
-    dash_duo.wait_for_text_to_equal('#out', 'anchovies')
-    dash_duo.find_element('#persistence-val').send_keys('2')
-    dash_duo.wait_for_text_to_equal('#out', 'aardvark')
+    dash_duo.find_element("#persistence-val").send_keys("s")
+    dash_duo.wait_for_text_to_equal("#out", "anchovies")
+    dash_duo.find_element("#persistence-val").send_keys("2")
+    dash_duo.wait_for_text_to_equal("#out", "aardvark")
 
 
 def test_rdps011_toggle_persistence2(dash_duo):
     app = dash.Dash(__name__)
-    app.layout = html.Div([
-        dcc.Input(id='persistence-val', value=''),
-        dcc.Input(id='persisted2', value='a', persistence=''),
-        html.Div(id='out')
-    ])
+    app.layout = html.Div(
+        [
+            dcc.Input(id="persistence-val", value=""),
+            dcc.Input(id="persisted2", value="a", persistence=""),
+            html.Div(id="out"),
+        ]
+    )
 
     # this is not a good way to set persistence, as it doesn't allow you to
     # get the right initial value. Much better is to update the whole component
     # as we do in the previous test case... but it shouldn't break this way.
     @app.callback(
-        Output('persisted2', 'persistence'),
-        [Input('persistence-val', 'value')]
+        Output("persisted2", "persistence"), [Input("persistence-val", "value")]
     )
     def set_persistence(val):
         return val
 
-    @app.callback(Output('out', 'children'), [Input('persisted2', 'value')])
+    @app.callback(Output("out", "children"), [Input("persisted2", "value")])
     def set_out(val):
         return val
 
     dash_duo.start_server(app)
 
-    dash_duo.wait_for_text_to_equal('#out', 'a')
+    dash_duo.wait_for_text_to_equal("#out", "a")
 
-    dash_duo.find_element('#persistence-val').send_keys('s')
+    dash_duo.find_element("#persistence-val").send_keys("s")
     time.sleep(0.2)
     assert not dash_duo.get_logs()
-    dash_duo.wait_for_text_to_equal('#out', 'a')
-    dash_duo.find_element('#persisted2').send_keys('pricot')
-    dash_duo.wait_for_text_to_equal('#out', 'apricot')
+    dash_duo.wait_for_text_to_equal("#out", "a")
+    dash_duo.find_element("#persisted2").send_keys("pricot")
+    dash_duo.wait_for_text_to_equal("#out", "apricot")
 
-    dash_duo.find_element('#persistence-val').send_keys('2')
-    dash_duo.wait_for_text_to_equal('#out', 'a')
-    dash_duo.find_element('#persisted2').send_keys('rtichoke')
-    dash_duo.wait_for_text_to_equal('#out', 'artichoke')
+    dash_duo.find_element("#persistence-val").send_keys("2")
+    dash_duo.wait_for_text_to_equal("#out", "a")
+    dash_duo.find_element("#persisted2").send_keys("rtichoke")
+    dash_duo.wait_for_text_to_equal("#out", "artichoke")
 
     # no persistence, still goes back to original value
-    dash_duo.clear_input('#persistence-val')
-    dash_duo.wait_for_text_to_equal('#out', 'a')
+    dash_duo.clear_input("#persistence-val")
+    dash_duo.wait_for_text_to_equal("#out", "a")
 
     # apricot and artichoke saved
-    dash_duo.find_element('#persistence-val').send_keys('s')
-    dash_duo.wait_for_text_to_equal('#out', 'apricot')
-    dash_duo.find_element('#persistence-val').send_keys('2')
+    dash_duo.find_element("#persistence-val").send_keys("s")
+    dash_duo.wait_for_text_to_equal("#out", "apricot")
+    dash_duo.find_element("#persistence-val").send_keys("2")
     assert not dash_duo.get_logs()
-    dash_duo.wait_for_text_to_equal('#out', 'artichoke')
+    dash_duo.wait_for_text_to_equal("#out", "artichoke")
diff --git a/tests/integration/test_integration.py b/tests/integration/test_integration.py
index 35fe3ad9..a81c9bbb 100644
--- a/tests/integration/test_integration.py
+++ b/tests/integration/test_integration.py
@@ -1,11 +1,13 @@
-from multiprocessing import Value
 import datetime
 import time
-import pytest
+
 from copy import copy
+from multiprocessing import Value
+from selenium.webdriver.common.keys import Keys
+
+import pytest
 
 from bs4 import BeautifulSoup
-from selenium.webdriver.common.keys import Keys
 
 import dash_dangerously_set_inner_html
 import dash_flow_example
@@ -76,10 +78,7 @@ def test_inin002_wildcard_callback(dash_duo):
                         "string",
                         html.Div(
                             id="output-1",
-                            **{
-                                "data-cb": "initial value",
-                                "aria-cb": "initial value",
-                            }
+                            **{"data-cb": "initial value", "aria-cb": "initial value"}
                         ),
                     ]
                 )
@@ -94,9 +93,7 @@ def test_inin002_wildcard_callback(dash_duo):
         input_call_count.value += 1
         return value
 
-    @app.callback(
-        Output("output-1", "children"), [Input("output-1", "data-cb")]
-    )
+    @app.callback(Output("output-1", "children"), [Input("output-1", "data-cb")])
     def update_text(data):
         return data
 
@@ -145,9 +142,7 @@ def test_inin003_aborted_callback(dash_duo):
         raise PreventUpdate("testing callback does not update")
         return value
 
-    @app.callback(
-        Output("output2", "children"), [Input("output1", "children")]
-    )
+    @app.callback(Output("output2", "children"), [Input("output1", "children")])
     def callback2(value):
         callback2_count.value += 1
         return value
@@ -199,9 +194,7 @@ def test_inin004_wildcard_data_attributes(dash_duo):
     actual = BeautifulSoup(div.get_attribute("innerHTML"), "lxml").decode()
     expected = BeautifulSoup(
         "<div "
-        + " ".join(
-            '{}="{!s}"'.format(k, v) for k, v in attrs.items() if v is not None
-        )
+        + " ".join('{}="{!s}"'.format(k, v) for k, v in attrs.items() if v is not None)
         + "></div>",
         "lxml",
     ).decode()
@@ -246,8 +239,7 @@ def test_inin006_flow_component(dash_duo):
     )
 
     @app.callback(
-        Output("output", "children"),
-        [Input("react", "value"), Input("flow", "value")],
+        Output("output", "children"), [Input("react", "value"), Input("flow", "value")],
     )
     def display_output(react_value, flow_value):
         return html.Div(
@@ -392,15 +384,9 @@ def test_inin011_multi_output(dash_duo):
             html.Button("OUTPUT", id="output-btn"),
             html.Table(
                 [
-                    html.Thead(
-                        [html.Tr([html.Th("Output 1"), html.Th("Output 2")])]
-                    ),
+                    html.Thead([html.Tr([html.Th("Output 1"), html.Th("Output 2")])]),
                     html.Tbody(
-                        [
-                            html.Tr(
-                                [html.Td(id="output1"), html.Td(id="output2")]
-                            )
-                        ]
+                        [html.Tr([html.Td(id="output1"), html.Td(id="output2")])]
                     ),
                 ]
             ),
@@ -422,9 +408,7 @@ def test_inin011_multi_output(dash_duo):
         return n_clicks, n_clicks_timestamp
 
     # Dummy callback for DuplicateCallbackOutput test.
-    @app.callback(
-        Output("output3", "children"), [Input("output-btn", "n_clicks")]
-    )
+    @app.callback(Output("output3", "children"), [Input("output-btn", "n_clicks")])
     def dummy_callback(n_clicks):
         if n_clicks is None:
             raise PreventUpdate
@@ -433,9 +417,7 @@ def test_inin011_multi_output(dash_duo):
 
     with pytest.raises(DuplicateCallbackOutput) as err:
 
-        @app.callback(
-            Output("output1", "children"), [Input("output-btn", "n_clicks")]
-        )
+        @app.callback(Output("output1", "children"), [Input("output-btn", "n_clicks")])
         def on_click_duplicate(n_clicks):
             if n_clicks is None:
                 raise PreventUpdate
@@ -482,9 +464,7 @@ def test_inin011_multi_output(dash_duo):
         def overlapping_multi_output(n_clicks):
             return n_clicks
 
-        pytest.fail(
-            "no part of an existing multi-output can be used in another"
-        )
+        pytest.fail("no part of an existing multi-output can be used in another")
     assert (
         "{'output1.children'}" in err.value.args[0]
         or "set(['output1.children'])" in err.value.args[0]
@@ -516,11 +496,7 @@ def test_inin012_multi_output_no_update(dash_duo):
     )
 
     @app.callback(
-        [
-            Output("n1", "children"),
-            Output("n2", "children"),
-            Output("n3", "children"),
-        ],
+        [Output("n1", "children"), Output("n2", "children"), Output("n3", "children")],
         [Input("btn", "n_clicks")],
     )
     def show_clicks(n):
@@ -715,10 +691,12 @@ def test_inin015_with_custom_renderer_interpolated(dash_duo):
                     {renderer}
                     <div id="custom-footer">My custom footer</div>
                 </body>
-            </html>""".format(app_entry=kwargs["app_entry"],
-                              config=kwargs["config"],
-                              scripts=kwargs["scripts"],
-                              renderer=renderer)
+            </html>""".format(
+                app_entry=kwargs["app_entry"],
+                config=kwargs["config"],
+                scripts=kwargs["scripts"],
+                renderer=renderer,
+            )
 
     app = CustomDash()
 
@@ -757,15 +735,11 @@ def test_inin015_with_custom_renderer_interpolated(dash_duo):
 
 def test_inin016_modified_response(dash_duo):
     app = Dash(__name__)
-    app.layout = html.Div(
-        [dcc.Input(id="input", value="ab"), html.Div(id="output")]
-    )
+    app.layout = html.Div([dcc.Input(id="input", value="ab"), html.Div(id="output")])
 
     @app.callback(Output("output", "children"), [Input("input", "value")])
     def update_output(value):
-        callback_context.response.set_cookie(
-            "dash cookie", value + " - cookie"
-        )
+        callback_context.response.set_cookie("dash cookie", value + " - cookie")
         return value + " - output"
 
     dash_duo.start_server(app)
@@ -786,15 +760,10 @@ def test_inin017_late_component_register(dash_duo):
     app = Dash()
 
     app.layout = html.Div(
-        [
-            html.Button("Click me to put a dcc ", id="btn-insert"),
-            html.Div(id="output"),
-        ]
+        [html.Button("Click me to put a dcc ", id="btn-insert"), html.Div(id="output")]
     )
 
-    @app.callback(
-        Output("output", "children"), [Input("btn-insert", "n_clicks")]
-    )
+    @app.callback(Output("output", "children"), [Input("btn-insert", "n_clicks")])
     def update_output(value):
         if value is None:
             raise PreventUpdate
@@ -811,15 +780,12 @@ def test_inin017_late_component_register(dash_duo):
 
 def test_inin018_output_input_invalid_callback():
     app = Dash(__name__)
-    app.layout = html.Div(
-        [html.Div("child", id="input-output"), html.Div(id="out")]
-    )
+    app.layout = html.Div([html.Div("child", id="input-output"), html.Div(id="out")])
 
     with pytest.raises(CallbackException) as err:
 
         @app.callback(
-            Output("input-output", "children"),
-            [Input("input-output", "children")],
+            Output("input-output", "children"), [Input("input-output", "children")],
         )
         def failure(children):
             pass
@@ -844,11 +810,7 @@ def test_inin018_output_input_invalid_callback():
 def test_inin019_callback_dep_types():
     app = Dash(__name__)
     app.layout = html.Div(
-        [
-            html.Div("child", id="in"),
-            html.Div("state", id="state"),
-            html.Div(id="out"),
-        ]
+        [html.Div("child", id="in"), html.Div("state", id="state"), html.Div(id="out")]
     )
 
     with pytest.raises(IncorrectTypeException):
@@ -911,8 +873,7 @@ def test_inin020_callback_return_validation():
         pytest.fail("not serializable")
 
     @app.callback(
-        [Output("c", "children"), Output("d", "children")],
-        [Input("a", "children")],
+        [Output("c", "children"), Output("d", "children")], [Input("a", "children")],
     )
     def multi(a):
         return [1, set([2])]
@@ -922,8 +883,7 @@ def test_inin020_callback_return_validation():
         pytest.fail("nested non-serializable")
 
     @app.callback(
-        [Output("e", "children"), Output("f", "children")],
-        [Input("a", "children")],
+        [Output("e", "children"), Output("f", "children")], [Input("a", "children")],
     )
     def multi2(a):
         return ["abc"]
@@ -939,15 +899,10 @@ def test_inin021_callback_context(dash_duo):
     btns = ["btn-{}".format(x) for x in range(1, 6)]
 
     app.layout = html.Div(
-        [
-            html.Div([html.Button(btn, id=btn) for btn in btns]),
-            html.Div(id="output"),
-        ]
+        [html.Div([html.Button(btn, id=btn) for btn in btns]), html.Div(id="output")]
     )
 
-    @app.callback(
-        Output("output", "children"), [Input(x, "n_clicks") for x in btns]
-    )
+    @app.callback(Output("output", "children"), [Input(x, "n_clicks") for x in btns])
     def on_click(*args):
         if not callback_context.triggered:
             raise PreventUpdate
diff --git a/tests/integration/test_race_conditions.py b/tests/integration/test_race_conditions.py
index b597068e..e7e17404 100644
--- a/tests/integration/test_race_conditions.py
+++ b/tests/integration/test_race_conditions.py
@@ -22,15 +22,15 @@ DELAY_TIME = 0.2
 def create_race_conditions_test(endpoints):
     def test(self):
         app = Dash()
-        app.layout = html.Div([
-            html.Div('Hello world', id='output'),
-            dcc.Input(id='input', value='initial value')
-        ])
+        app.layout = html.Div(
+            [
+                html.Div("Hello world", id="output"),
+                dcc.Input(id="input", value="initial value"),
+            ]
+        )
         app.scripts.config.serve_locally = True
 
-        @app.callback(
-            Output('output', 'children'),
-            [Input('input', 'value')])
+        @app.callback(Output("output", "children"), [Input("input", "value")])
         def update(value):
             return value
 
@@ -43,7 +43,7 @@ def create_race_conditions_test(endpoints):
             try:
                 return self.driver.find_element_by_id(id).text
             except:
-                return ''
+                return ""
 
         app.server.before_request(delay)
         self.startServer(app)
@@ -54,11 +54,10 @@ def create_race_conditions_test(endpoints):
         time.sleep(total_delay + DELAY_TIME)
 
         wait_for(
-            lambda: element_text('output') == 'initial value',
+            lambda: element_text("output") == "initial value",
             lambda: '"{}" != "initial value"\nbody text: {}'.format(
-                element_text('output'),
-                element_text('react-entry-point')
-            )
+                element_text("output"), element_text("react-entry-point")
+            ),
         )
 
         self.assertTrue(self.is_console_clean())
@@ -67,10 +66,10 @@ def create_race_conditions_test(endpoints):
 
 
 routes = [
-    'layout',
-    'dependencies',
-    'update-component',
-    '_config'
+    "layout",
+    "dependencies",
+    "update-component",
+    "_config"
     # routes and component-suites
     # are other endpoints but are excluded to speed up tests
 ]
@@ -78,9 +77,6 @@ routes = [
 for route_list in itertools.permutations(routes, len(routes)):
     setattr(
         Tests,
-        'test_delayed_{}'.format(
-            '_'.join([
-                r.replace('-', '_') for r in route_list
-            ])),
-        create_race_conditions_test(route_list)
+        "test_delayed_{}".format("_".join([r.replace("-", "_") for r in route_list])),
+        create_race_conditions_test(route_list),
     )
diff --git a/tests/integration/test_render.py b/tests/integration/test_render.py
index a230edf9..fd4d698f 100644
--- a/tests/integration/test_render.py
+++ b/tests/integration/test_render.py
@@ -1,22 +1,21 @@
 # -*- coding: UTF-8 -*-
-import dash
-from dash import Dash
-from dash.dependencies import Input, Output
-from dash.exceptions import PreventUpdate
-import dash_html_components as html
-import dash_core_components as dcc
-
+import time
+import json
+from multiprocessing import Value
 from selenium.webdriver.common.action_chains import ActionChains
 from selenium.webdriver.common.keys import Keys
 from selenium.webdriver.common.by import By
 from selenium.webdriver.support.ui import WebDriverWait
 from selenium.webdriver.support import expected_conditions as EC
 
+import dash_html_components as html
+import dash_core_components as dcc
+from dash import Dash
+from dash.dependencies import Input, Output
+from dash.exceptions import PreventUpdate
+
 from .IntegrationTests import IntegrationTests
 from .utils import wait_for
-from multiprocessing import Value
-import time
-import json
 
 
 TIMEOUT = 20
@@ -29,63 +28,59 @@ class Tests(IntegrationTests):
     def wait_for_element_by_css_selector(self, selector, timeout=TIMEOUT):
         return WebDriverWait(self.driver, timeout).until(
             EC.presence_of_element_located((By.CSS_SELECTOR, selector)),
-            'Could not find element with selector "{}"'.format(selector)
+            'Could not find element with selector "{}"'.format(selector),
         )
 
     def wait_for_text_to_equal(self, selector, assertion_text, timeout=TIMEOUT):
         self.wait_for_element_by_css_selector(selector)
         WebDriverWait(self.driver, timeout).until(
             lambda *args: (
-                (str(self.wait_for_element_by_css_selector(selector).text)
-                 == assertion_text) or
-                (str(self.wait_for_element_by_css_selector(
-                    selector).get_attribute('value')) == assertion_text)
+                (
+                    str(self.wait_for_element_by_css_selector(selector).text)
+                    == assertion_text
+                )
+                or (
+                    str(
+                        self.wait_for_element_by_css_selector(selector).get_attribute(
+                            "value"
+                        )
+                    )
+                    == assertion_text
+                )
             ),
             "Element '{}' text expects to equal '{}' but it didn't".format(
-                selector,
-                assertion_text
-            )
+                selector, assertion_text
+            ),
         )
 
-    def request_queue_assertions(
-            self, check_rejected=True, expected_length=None):
+    def request_queue_assertions(self, check_rejected=True, expected_length=None):
         request_queue = self.driver.execute_script(
-            'return window.store.getState().requestQueue'
-        )
-        self.assertTrue(
-            all([
-                (r['status'] == 200)
-                for r in request_queue
-            ])
+            "return window.store.getState().requestQueue"
         )
+        self.assertTrue(all([(r["status"] == 200) for r in request_queue]))
 
         if check_rejected:
-            self.assertTrue(
-                all([
-                    (r['rejected'] is False)
-                    for r in request_queue
-                ])
-            )
+            self.assertTrue(all([(r["rejected"] is False) for r in request_queue]))
 
         if expected_length is not None:
             self.assertEqual(len(request_queue), expected_length)
 
     def click_undo(self):
-        undo_selector = '._dash-undo-redo span:first-child div:last-child'
+        undo_selector = "._dash-undo-redo span:first-child div:last-child"
         undo = self.wait_for_element_by_css_selector(undo_selector)
-        self.wait_for_text_to_equal(undo_selector, 'undo')
+        self.wait_for_text_to_equal(undo_selector, "undo")
         undo.click()
 
     def click_redo(self):
-        redo_selector = '._dash-undo-redo span:last-child div:last-child'
-        self.wait_for_text_to_equal(redo_selector, 'redo')
+        redo_selector = "._dash-undo-redo span:last-child div:last-child"
+        self.wait_for_text_to_equal(redo_selector, "redo")
         redo = self.wait_for_element_by_css_selector(redo_selector)
         redo.click()
 
     def check_undo_redo_exist(self, has_undo, has_redo):
-        selector = '._dash-undo-redo span div:last-child'
+        selector = "._dash-undo-redo span div:last-child"
         els = self.driver.find_elements_by_css_selector(selector)
-        texts = (['undo'] if has_undo else []) + (['redo'] if has_redo else [])
+        texts = (["undo"] if has_undo else []) + (["redo"] if has_redo else [])
 
         self.assertEqual(len(els), len(texts))
         for el, text in zip(els, texts):
@@ -93,326 +88,320 @@ class Tests(IntegrationTests):
 
     def test_undo_redo(self):
         app = Dash(__name__, show_undo_redo=True)
-        app.layout = html.Div([dcc.Input(id='a'), html.Div(id='b')])
+        app.layout = html.Div([dcc.Input(id="a"), html.Div(id="b")])
 
-        @app.callback(Output('b', 'children'), [Input('a', 'value')])
+        @app.callback(Output("b", "children"), [Input("a", "value")])
         def set_b(a):
             return a
 
         self.startServer(app)
 
-        a = self.wait_for_element_by_css_selector('#a')
-        a.send_keys('xyz')
+        a = self.wait_for_element_by_css_selector("#a")
+        a.send_keys("xyz")
 
-        self.wait_for_text_to_equal('#b', 'xyz')
+        self.wait_for_text_to_equal("#b", "xyz")
         self.check_undo_redo_exist(True, False)
 
         self.click_undo()
-        self.wait_for_text_to_equal('#b', 'xy')
+        self.wait_for_text_to_equal("#b", "xy")
         self.check_undo_redo_exist(True, True)
 
         self.click_undo()
-        self.wait_for_text_to_equal('#b', 'x')
+        self.wait_for_text_to_equal("#b", "x")
         self.check_undo_redo_exist(True, True)
 
         self.click_redo()
-        self.wait_for_text_to_equal('#b', 'xy')
+        self.wait_for_text_to_equal("#b", "xy")
         self.check_undo_redo_exist(True, True)
 
-        self.percy_snapshot(name='undo-redo')
+        self.percy_snapshot(name="undo-redo")
 
         self.click_undo()
         self.click_undo()
-        self.wait_for_text_to_equal('#b', '')
+        self.wait_for_text_to_equal("#b", "")
         self.check_undo_redo_exist(False, True)
 
     def test_no_undo_redo(self):
         app = Dash(__name__)
-        app.layout = html.Div([dcc.Input(id='a'), html.Div(id='b')])
+        app.layout = html.Div([dcc.Input(id="a"), html.Div(id="b")])
 
-        @app.callback(Output('b', 'children'), [Input('a', 'value')])
+        @app.callback(Output("b", "children"), [Input("a", "value")])
         def set_b(a):
             return a
 
         self.startServer(app)
 
-        a = self.wait_for_element_by_css_selector('#a')
-        a.send_keys('xyz')
+        a = self.wait_for_element_by_css_selector("#a")
+        a.send_keys("xyz")
 
-        self.wait_for_text_to_equal('#b', 'xyz')
-        toolbar = self.driver.find_elements_by_css_selector('._dash-undo-redo')
+        self.wait_for_text_to_equal("#b", "xyz")
+        toolbar = self.driver.find_elements_by_css_selector("._dash-undo-redo")
         self.assertEqual(len(toolbar), 0)
 
     def test_array_of_falsy_child(self):
         app = Dash(__name__)
-        app.layout = html.Div(id='nully-wrapper', children=[0])
+        app.layout = html.Div(id="nully-wrapper", children=[0])
 
         self.startServer(app)
 
-        self.wait_for_text_to_equal('#nully-wrapper', '0')
+        self.wait_for_text_to_equal("#nully-wrapper", "0")
 
         self.assertTrue(self.is_console_clean())
 
     def test_of_falsy_child(self):
         app = Dash(__name__)
-        app.layout = html.Div(id='nully-wrapper', children=0)
+        app.layout = html.Div(id="nully-wrapper", children=0)
 
         self.startServer(app)
 
-        self.wait_for_text_to_equal('#nully-wrapper', '0')
+        self.wait_for_text_to_equal("#nully-wrapper", "0")
 
         self.assertTrue(self.is_console_clean())
 
     def test_event_properties(self):
         app = Dash(__name__)
-        app.layout = html.Div([
-            html.Button('Click Me', id='button'),
-            html.Div(id='output')
-        ])
+        app.layout = html.Div(
+            [html.Button("Click Me", id="button"), html.Div(id="output")]
+        )
 
-        call_count = Value('i', 0)
+        call_count = Value("i", 0)
 
-        @app.callback(Output('output', 'children'),
-                      [Input('button', 'n_clicks')])
+        @app.callback(Output("output", "children"), [Input("button", "n_clicks")])
         def update_output(n_clicks):
             if not n_clicks:
                 raise PreventUpdate
             call_count.value += 1
-            return 'Click'
+            return "Click"
 
         self.startServer(app)
-        btn = self.driver.find_element_by_id('button')
-        output = lambda: self.driver.find_element_by_id('output')
+        btn = self.driver.find_element_by_id("button")
+        output = lambda: self.driver.find_element_by_id("output")
         self.assertEqual(call_count.value, 0)
-        self.assertEqual(output().text, '')
+        self.assertEqual(output().text, "")
 
         btn.click()
-        wait_for(lambda: output().text == 'Click')
+        wait_for(lambda: output().text == "Click")
         self.assertEqual(call_count.value, 1)
 
     def test_chained_dependencies_direct_lineage(self):
         app = Dash(__name__)
-        app.layout = html.Div([
-            dcc.Input(id='input-1', value='input 1'),
-            dcc.Input(id='input-2'),
-            html.Div('test', id='output')
-        ])
-        input1 = lambda: self.driver.find_element_by_id('input-1')
-        input2 = lambda: self.driver.find_element_by_id('input-2')
-        output = lambda: self.driver.find_element_by_id('output')
+        app.layout = html.Div(
+            [
+                dcc.Input(id="input-1", value="input 1"),
+                dcc.Input(id="input-2"),
+                html.Div("test", id="output"),
+            ]
+        )
+        input1 = lambda: self.driver.find_element_by_id("input-1")
+        input2 = lambda: self.driver.find_element_by_id("input-2")
+        output = lambda: self.driver.find_element_by_id("output")
 
-        call_counts = {
-            'output': Value('i', 0),
-            'input-2': Value('i', 0)
-        }
+        call_counts = {"output": Value("i", 0), "input-2": Value("i", 0)}
 
-        @app.callback(Output('input-2', 'value'), [Input('input-1', 'value')])
+        @app.callback(Output("input-2", "value"), [Input("input-1", "value")])
         def update_input(input1):
-            call_counts['input-2'].value += 1
-            return '<<{}>>'.format(input1)
+            call_counts["input-2"].value += 1
+            return "<<{}>>".format(input1)
 
-        @app.callback(Output('output', 'children'), [
-            Input('input-1', 'value'),
-            Input('input-2', 'value')
-        ])
+        @app.callback(
+            Output("output", "children"),
+            [Input("input-1", "value"), Input("input-2", "value")],
+        )
         def update_output(input1, input2):
-            call_counts['output'].value += 1
-            return '{} + {}'.format(input1, input2)
+            call_counts["output"].value += 1
+            return "{} + {}".format(input1, input2)
 
         self.startServer(app)
 
-        wait_for(lambda: call_counts['output'].value == 1)
-        wait_for(lambda: call_counts['input-2'].value == 1)
-        self.assertEqual(input1().get_attribute('value'), 'input 1')
-        self.assertEqual(input2().get_attribute('value'), '<<input 1>>')
-        self.assertEqual(output().text, 'input 1 + <<input 1>>')
-
-        input1().send_keys('x')
-        wait_for(lambda: call_counts['output'].value == 2)
-        wait_for(lambda: call_counts['input-2'].value == 2)
-        self.assertEqual(input1().get_attribute('value'), 'input 1x')
-        self.assertEqual(input2().get_attribute('value'), '<<input 1x>>')
-        self.assertEqual(output().text, 'input 1x + <<input 1x>>')
-
-        input2().send_keys('y')
-        wait_for(lambda: call_counts['output'].value == 3)
-        wait_for(lambda: call_counts['input-2'].value == 2)
-        self.assertEqual(input1().get_attribute('value'), 'input 1x')
-        self.assertEqual(input2().get_attribute('value'), '<<input 1x>>y')
-        self.assertEqual(output().text, 'input 1x + <<input 1x>>y')
+        wait_for(lambda: call_counts["output"].value == 1)
+        wait_for(lambda: call_counts["input-2"].value == 1)
+        self.assertEqual(input1().get_attribute("value"), "input 1")
+        self.assertEqual(input2().get_attribute("value"), "<<input 1>>")
+        self.assertEqual(output().text, "input 1 + <<input 1>>")
+
+        input1().send_keys("x")
+        wait_for(lambda: call_counts["output"].value == 2)
+        wait_for(lambda: call_counts["input-2"].value == 2)
+        self.assertEqual(input1().get_attribute("value"), "input 1x")
+        self.assertEqual(input2().get_attribute("value"), "<<input 1x>>")
+        self.assertEqual(output().text, "input 1x + <<input 1x>>")
+
+        input2().send_keys("y")
+        wait_for(lambda: call_counts["output"].value == 3)
+        wait_for(lambda: call_counts["input-2"].value == 2)
+        self.assertEqual(input1().get_attribute("value"), "input 1x")
+        self.assertEqual(input2().get_attribute("value"), "<<input 1x>>y")
+        self.assertEqual(output().text, "input 1x + <<input 1x>>y")
 
     def test_chained_dependencies_branched_lineage(self):
         app = Dash(__name__)
-        app.layout = html.Div([
-            dcc.Input(id='grandparent', value='input 1'),
-            dcc.Input(id='parent-a'),
-            dcc.Input(id='parent-b'),
-            html.Div(id='child-a'),
-            html.Div(id='child-b')
-        ])
-        parenta = lambda: self.driver.find_element_by_id('parent-a')
-        parentb = lambda: self.driver.find_element_by_id('parent-b')
-        childa = lambda: self.driver.find_element_by_id('child-a')
-        childb = lambda: self.driver.find_element_by_id('child-b')
+        app.layout = html.Div(
+            [
+                dcc.Input(id="grandparent", value="input 1"),
+                dcc.Input(id="parent-a"),
+                dcc.Input(id="parent-b"),
+                html.Div(id="child-a"),
+                html.Div(id="child-b"),
+            ]
+        )
+        parenta = lambda: self.driver.find_element_by_id("parent-a")
+        parentb = lambda: self.driver.find_element_by_id("parent-b")
+        childa = lambda: self.driver.find_element_by_id("child-a")
+        childb = lambda: self.driver.find_element_by_id("child-b")
 
         call_counts = {
-            'parent-a': Value('i', 0),
-            'parent-b': Value('i', 0),
-            'child-a': Value('i', 0),
-            'child-b': Value('i', 0)
+            "parent-a": Value("i", 0),
+            "parent-b": Value("i", 0),
+            "child-a": Value("i", 0),
+            "child-b": Value("i", 0),
         }
 
-        @app.callback(Output('parent-a', 'value'),
-                      [Input('grandparent', 'value')])
+        @app.callback(Output("parent-a", "value"), [Input("grandparent", "value")])
         def update_parenta(value):
-            call_counts['parent-a'].value += 1
-            return 'a: {}'.format(value)
+            call_counts["parent-a"].value += 1
+            return "a: {}".format(value)
 
-        @app.callback(Output('parent-b', 'value'),
-                      [Input('grandparent', 'value')])
+        @app.callback(Output("parent-b", "value"), [Input("grandparent", "value")])
         def update_parentb(value):
             time.sleep(0.5)
-            call_counts['parent-b'].value += 1
-            return 'b: {}'.format(value)
+            call_counts["parent-b"].value += 1
+            return "b: {}".format(value)
 
-        @app.callback(Output('child-a', 'children'),
-                      [Input('parent-a', 'value'),
-                       Input('parent-b', 'value')])
+        @app.callback(
+            Output("child-a", "children"),
+            [Input("parent-a", "value"), Input("parent-b", "value")],
+        )
         def update_childa(parenta_value, parentb_value):
             time.sleep(1)
-            call_counts['child-a'].value += 1
-            return '{} + {}'.format(parenta_value, parentb_value)
+            call_counts["child-a"].value += 1
+            return "{} + {}".format(parenta_value, parentb_value)
 
-        @app.callback(Output('child-b', 'children'),
-                      [Input('parent-a', 'value'),
-                       Input('parent-b', 'value'),
-                       Input('grandparent', 'value')])
+        @app.callback(
+            Output("child-b", "children"),
+            [
+                Input("parent-a", "value"),
+                Input("parent-b", "value"),
+                Input("grandparent", "value"),
+            ],
+        )
         def update_childb(parenta_value, parentb_value, grandparent_value):
-            call_counts['child-b'].value += 1
-            return '{} + {} + {}'.format(
-                parenta_value,
-                parentb_value,
-                grandparent_value
+            call_counts["child-b"].value += 1
+            return "{} + {} + {}".format(
+                parenta_value, parentb_value, grandparent_value
             )
 
         self.startServer(app)
 
-        wait_for(lambda: childa().text == 'a: input 1 + b: input 1')
-        wait_for(lambda: childb().text == 'a: input 1 + b: input 1 + input 1')
+        wait_for(lambda: childa().text == "a: input 1 + b: input 1")
+        wait_for(lambda: childb().text == "a: input 1 + b: input 1 + input 1")
         time.sleep(1)  # wait for potential requests of app to settle down
-        self.assertEqual(parenta().get_attribute('value'), 'a: input 1')
-        self.assertEqual(parentb().get_attribute('value'), 'b: input 1')
-        self.assertEqual(call_counts['parent-a'].value, 1)
-        self.assertEqual(call_counts['parent-b'].value, 1)
-        self.assertEqual(call_counts['child-a'].value, 1)
-        self.assertEqual(call_counts['child-b'].value, 1)
+        self.assertEqual(parenta().get_attribute("value"), "a: input 1")
+        self.assertEqual(parentb().get_attribute("value"), "b: input 1")
+        self.assertEqual(call_counts["parent-a"].value, 1)
+        self.assertEqual(call_counts["parent-b"].value, 1)
+        self.assertEqual(call_counts["child-a"].value, 1)
+        self.assertEqual(call_counts["child-b"].value, 1)
 
     def test_removing_component_while_its_getting_updated(self):
         app = Dash(__name__)
-        app.layout = html.Div([
-            dcc.RadioItems(
-                id='toc',
-                options=[
-                    {'label': i, 'value': i} for i in ['1', '2']
-                ],
-                value='1'
-            ),
-            html.Div(id='body')
-        ])
+        app.layout = html.Div(
+            [
+                dcc.RadioItems(
+                    id="toc",
+                    options=[{"label": i, "value": i} for i in ["1", "2"]],
+                    value="1",
+                ),
+                html.Div(id="body"),
+            ]
+        )
         app.config.suppress_callback_exceptions = True
 
-        call_counts = {
-            'body': Value('i', 0),
-            'button-output': Value('i', 0)
-        }
+        call_counts = {"body": Value("i", 0), "button-output": Value("i", 0)}
 
-        @app.callback(Output('body', 'children'), [Input('toc', 'value')])
+        @app.callback(Output("body", "children"), [Input("toc", "value")])
         def update_body(chapter):
-            call_counts['body'].value += 1
-            if chapter == '1':
+            call_counts["body"].value += 1
+            if chapter == "1":
                 return [
-                    html.Div('Chapter 1'),
-                    html.Button(
-                        'clicking this button takes forever',
-                        id='button'
-                    ),
-                    html.Div(id='button-output')
+                    html.Div("Chapter 1"),
+                    html.Button("clicking this button takes forever", id="button"),
+                    html.Div(id="button-output"),
                 ]
-            elif chapter == '2':
-                return 'Chapter 2'
+            elif chapter == "2":
+                return "Chapter 2"
             else:
-                raise Exception('chapter is {}'.format(chapter))
+                raise Exception("chapter is {}".format(chapter))
 
         @app.callback(
-            Output('button-output', 'children'),
-            [Input('button', 'n_clicks')])
+            Output("button-output", "children"), [Input("button", "n_clicks")]
+        )
         def this_callback_takes_forever(n_clicks):
             if not n_clicks:
                 # initial value is quick, only new value is slow
                 # also don't let the initial value increment call_counts
-                return 'Initial Value'
+                return "Initial Value"
             time.sleep(5)
-            call_counts['button-output'].value += 1
-            return 'New value!'
+            call_counts["button-output"].value += 1
+            return "New value!"
 
-        body = lambda: self.driver.find_element_by_id('body')
+        body = lambda: self.driver.find_element_by_id("body")
         self.startServer(app)
 
-        wait_for(lambda: call_counts['body'].value == 1)
+        wait_for(lambda: call_counts["body"].value == 1)
         time.sleep(0.5)
-        self.driver.find_element_by_id('button').click()
+        self.driver.find_element_by_id("button").click()
 
         # while that callback is resolving, switch the chapter,
         # hiding the `button-output` tag
         def chapter2_assertions():
-            wait_for(lambda: body().text == 'Chapter 2')
+            wait_for(lambda: body().text == "Chapter 2")
 
             layout = self.driver.execute_script(
-                'return JSON.parse(JSON.stringify('
-                'window.store.getState().layout'
-                '))'
+                "return JSON.parse(JSON.stringify("
+                "window.store.getState().layout"
+                "))"
             )
 
-            dcc_radio = layout['props']['children'][0]
-            html_body = layout['props']['children'][1]
+            dcc_radio = layout["props"]["children"][0]
+            html_body = layout["props"]["children"][1]
 
-            self.assertEqual(dcc_radio['props']['id'], 'toc')
-            self.assertEqual(dcc_radio['props']['value'], '2')
+            self.assertEqual(dcc_radio["props"]["id"], "toc")
+            self.assertEqual(dcc_radio["props"]["value"], "2")
 
-            self.assertEqual(html_body['props']['id'], 'body')
-            self.assertEqual(html_body['props']['children'], 'Chapter 2')
+            self.assertEqual(html_body["props"]["id"], "body")
+            self.assertEqual(html_body["props"]["children"], "Chapter 2")
 
-        (self.driver.find_elements_by_css_selector(
-            'input[type="radio"]'
-        )[1]).click()
+        (self.driver.find_elements_by_css_selector('input[type="radio"]')[1]).click()
         chapter2_assertions()
-        self.assertEqual(call_counts['button-output'].value, 0)
+        self.assertEqual(call_counts["button-output"].value, 0)
         time.sleep(5)
-        wait_for(lambda: call_counts['button-output'].value == 1)
+        wait_for(lambda: call_counts["button-output"].value == 1)
         time.sleep(2)  # liberally wait for the front-end to process request
         chapter2_assertions()
         self.assertTrue(self.is_console_clean())
 
     def test_rendering_layout_calls_callback_once_per_output(self):
         app = Dash(__name__)
-        call_count = Value('i', 0)
-
-        app.config['suppress_callback_exceptions'] = True
-        app.layout = html.Div([
-            html.Div([
-                dcc.Input(
-                    value='Input {}'.format(i),
-                    id='input-{}'.format(i)
-                )
-                for i in range(10)
-            ]),
-            html.Div(id='container'),
-            dcc.RadioItems()
-        ])
+        call_count = Value("i", 0)
+
+        app.config["suppress_callback_exceptions"] = True
+        app.layout = html.Div(
+            [
+                html.Div(
+                    [
+                        dcc.Input(value="Input {}".format(i), id="input-{}".format(i))
+                        for i in range(10)
+                    ]
+                ),
+                html.Div(id="container"),
+                dcc.RadioItems(),
+            ]
+        )
 
         @app.callback(
-            Output('container', 'children'),
-            [Input('input-{}'.format(i), 'value') for i in range(10)])
+            Output("container", "children"),
+            [Input("input-{}".format(i), "value") for i in range(10)],
+        )
         def dynamic_output(*args):
             call_count.value += 1
             return json.dumps(args, indent=2)
@@ -421,77 +410,80 @@ class Tests(IntegrationTests):
 
         time.sleep(5)
 
-        self.percy_snapshot(
-            name='test_rendering_layout_calls_callback_once_per_output'
-        )
+        self.percy_snapshot(name="test_rendering_layout_calls_callback_once_per_output")
 
         self.assertEqual(call_count.value, 1)
 
     def test_rendering_new_content_calls_callback_once_per_output(self):
         app = Dash(__name__)
-        call_count = Value('i', 0)
-
-        app.config['suppress_callback_exceptions'] = True
-        app.layout = html.Div([
-            html.Button(
-                id='display-content',
-                children='Display Content',
-                n_clicks=0
-            ),
-            html.Div(id='container'),
-            dcc.RadioItems()
-        ])
+        call_count = Value("i", 0)
+
+        app.config["suppress_callback_exceptions"] = True
+        app.layout = html.Div(
+            [
+                html.Button(
+                    id="display-content", children="Display Content", n_clicks=0
+                ),
+                html.Div(id="container"),
+                dcc.RadioItems(),
+            ]
+        )
 
         @app.callback(
-            Output('container', 'children'),
-            [Input('display-content', 'n_clicks')])
+            Output("container", "children"), [Input("display-content", "n_clicks")]
+        )
         def display_output(n_clicks):
             if n_clicks == 0:
-                return ''
-            return html.Div([
-                html.Div([
-                    dcc.Input(
-                        value='Input {}'.format(i),
-                        id='input-{}'.format(i)
-                    )
-                    for i in range(10)
-                ]),
-                html.Div(id='dynamic-output')
-            ])
+                return ""
+            return html.Div(
+                [
+                    html.Div(
+                        [
+                            dcc.Input(
+                                value="Input {}".format(i), id="input-{}".format(i)
+                            )
+                            for i in range(10)
+                        ]
+                    ),
+                    html.Div(id="dynamic-output"),
+                ]
+            )
 
         @app.callback(
-            Output('dynamic-output', 'children'),
-            [Input('input-{}'.format(i), 'value') for i in range(10)])
+            Output("dynamic-output", "children"),
+            [Input("input-{}".format(i), "value") for i in range(10)],
+        )
         def dynamic_output(*args):
             call_count.value += 1
             return json.dumps(args, indent=2)
 
         self.startServer(app)
 
-        self.wait_for_element_by_css_selector('#display-content').click()
+        self.wait_for_element_by_css_selector("#display-content").click()
 
         time.sleep(5)
 
         self.percy_snapshot(
-            name='test_rendering_new_content_calls_callback_once_per_output'
+            name="test_rendering_new_content_calls_callback_once_per_output"
         )
 
         self.assertEqual(call_count.value, 1)
 
     def test_callbacks_called_multiple_times_and_out_of_order_multi_output(self):
         app = Dash(__name__)
-        app.layout = html.Div([
-            html.Button(id='input', n_clicks=0),
-            html.Div(id='output1'),
-            html.Div(id='output2')
-        ])
+        app.layout = html.Div(
+            [
+                html.Button(id="input", n_clicks=0),
+                html.Div(id="output1"),
+                html.Div(id="output2"),
+            ]
+        )
 
-        call_count = Value('i', 0)
+        call_count = Value("i", 0)
 
         @app.callback(
-            [Output('output1', 'children'),
-             Output('output2', 'children')],
-            [Input('input', 'n_clicks')]
+            [Output("output1", "children"), Output("output2", "children")],
+            [Input("input", "n_clicks")],
         )
         def update_output(n_clicks):
             call_count.value = call_count.value + 1
@@ -500,318 +492,307 @@ class Tests(IntegrationTests):
             return n_clicks, n_clicks + 1
 
         self.startServer(app)
-        button = self.wait_for_element_by_css_selector('#input')
+        button = self.wait_for_element_by_css_selector("#input")
         button.click()
         button.click()
         time.sleep(8)
         self.percy_snapshot(
-            name='test_callbacks_called_multiple_times'
-                 '_and_out_of_order_multi_output'
+            name="test_callbacks_called_multiple_times" "_and_out_of_order_multi_output"
         )
         self.assertEqual(call_count.value, 3)
-        self.wait_for_text_to_equal('#output1', '2')
-        self.wait_for_text_to_equal('#output2', '3')
+        self.wait_for_text_to_equal("#output1", "2")
+        self.wait_for_text_to_equal("#output2", "3")
         request_queue = self.driver.execute_script(
-            'return window.store.getState().requestQueue'
+            "return window.store.getState().requestQueue"
         )
-        self.assertFalse(request_queue[0]['rejected'])
+        self.assertFalse(request_queue[0]["rejected"])
         self.assertEqual(len(request_queue), 1)
 
     def test_callbacks_with_shared_grandparent(self):
-        app = dash.Dash()
-
-        app.layout = html.Div([
-            html.Div(id='session-id', children='id'),
-            dcc.Dropdown(id='dropdown-1'),
-            dcc.Dropdown(id='dropdown-2'),
-        ])
+        app = Dash()
+
+        app.layout = html.Div(
+            [
+                html.Div(id="session-id", children="id"),
+                dcc.Dropdown(id="dropdown-1"),
+                dcc.Dropdown(id="dropdown-2"),
+            ]
+        )
 
-        options = [{'value': 'a', 'label': 'a'}]
+        options = [{"value": "a", "label": "a"}]
 
-        call_counts = {
-            'dropdown_1': Value('i', 0),
-            'dropdown_2': Value('i', 0)
-        }
+        call_counts = {"dropdown_1": Value("i", 0), "dropdown_2": Value("i", 0)}
 
         @app.callback(
-            Output('dropdown-1', 'options'),
-            [Input('dropdown-1', 'value'),
-             Input('session-id', 'children')])
+            Output("dropdown-1", "options"),
+            [Input("dropdown-1", "value"), Input("session-id", "children")],
+        )
         def dropdown_1(value, session_id):
-            call_counts['dropdown_1'].value += 1
+            call_counts["dropdown_1"].value += 1
             return options
 
         @app.callback(
-            Output('dropdown-2', 'options'),
-            [Input('dropdown-2', 'value'),
-             Input('session-id', 'children')])
+            Output("dropdown-2", "options"),
+            [Input("dropdown-2", "value"), Input("session-id", "children")],
+        )
         def dropdown_2(value, session_id):
-            call_counts['dropdown_2'].value += 1
+            call_counts["dropdown_2"].value += 1
             return options
 
         self.startServer(app)
 
-        self.wait_for_element_by_css_selector('#session-id')
+        self.wait_for_element_by_css_selector("#session-id")
         time.sleep(2)
-        self.assertEqual(call_counts['dropdown_1'].value, 1)
-        self.assertEqual(call_counts['dropdown_2'].value, 1)
+        self.assertEqual(call_counts["dropdown_1"].value, 1)
+        self.assertEqual(call_counts["dropdown_2"].value, 1)
 
         self.assertTrue(self.is_console_clean())
 
     def test_callbacks_triggered_on_generated_output(self):
-        app = dash.Dash()
-        app.config['suppress_callback_exceptions'] = True
-
-        call_counts = {
-            'tab1': Value('i', 0),
-            'tab2': Value('i', 0)
-        }
-
-        app.layout = html.Div([
-            dcc.Dropdown(
-                id='outer-controls',
-                options=[{'label': i, 'value': i} for i in ['a', 'b']],
-                value='a'
-            ),
-            dcc.RadioItems(
-                options=[
-                    {'label': 'Tab 1', 'value': 1},
-                    {'label': 'Tab 2', 'value': 2}
-                ],
-                value=1,
-                id='tabs',
-            ),
-            html.Div(id='tab-output')
-        ])
+        app = Dash()
+        app.config["suppress_callback_exceptions"] = True
+
+        call_counts = {"tab1": Value("i", 0), "tab2": Value("i", 0)}
+
+        app.layout = html.Div(
+            [
+                dcc.Dropdown(
+                    id="outer-controls",
+                    options=[{"label": i, "value": i} for i in ["a", "b"]],
+                    value="a",
+                ),
+                dcc.RadioItems(
+                    options=[
+                        {"label": "Tab 1", "value": 1},
+                        {"label": "Tab 2", "value": 2},
+                    ],
+                    value=1,
+                    id="tabs",
+                ),
+                html.Div(id="tab-output"),
+            ]
+        )
 
-        @app.callback(Output('tab-output', 'children'),
-                      [Input('tabs', 'value')])
+        @app.callback(Output("tab-output", "children"), [Input("tabs", "value")])
         def display_content(value):
-            return html.Div([
-                html.Div(id='tab-{}-output'.format(value))
-            ])
+            return html.Div([html.Div(id="tab-{}-output".format(value))])
 
-        @app.callback(Output('tab-1-output', 'children'),
-                      [Input('outer-controls', 'value')])
+        @app.callback(
+            Output("tab-1-output", "children"), [Input("outer-controls", "value")]
+        )
         def display_tab1_output(value):
-            call_counts['tab1'].value += 1
+            call_counts["tab1"].value += 1
             return 'Selected "{}" in tab 1'.format(value)
 
-        @app.callback(Output('tab-2-output', 'children'),
-                      [Input('outer-controls', 'value')])
+        @app.callback(
+            Output("tab-2-output", "children"), [Input("outer-controls", "value")]
+        )
         def display_tab2_output(value):
-            call_counts['tab2'].value += 1
+            call_counts["tab2"].value += 1
             return 'Selected "{}" in tab 2'.format(value)
 
         self.startServer(app)
-        self.wait_for_element_by_css_selector('#tab-output')
+        self.wait_for_element_by_css_selector("#tab-output")
         time.sleep(2)
 
-        self.assertEqual(call_counts['tab1'].value, 1)
-        self.assertEqual(call_counts['tab2'].value, 0)
-        self.wait_for_text_to_equal('#tab-output', 'Selected "a" in tab 1')
-        self.wait_for_text_to_equal('#tab-1-output', 'Selected "a" in tab 1')
+        self.assertEqual(call_counts["tab1"].value, 1)
+        self.assertEqual(call_counts["tab2"].value, 0)
+        self.wait_for_text_to_equal("#tab-output", 'Selected "a" in tab 1')
+        self.wait_for_text_to_equal("#tab-1-output", 'Selected "a" in tab 1')
 
-        (self.driver.find_elements_by_css_selector(
-            'input[type="radio"]'
-        )[1]).click()
+        (self.driver.find_elements_by_css_selector('input[type="radio"]')[1]).click()
         time.sleep(2)
 
-        self.wait_for_text_to_equal('#tab-output', 'Selected "a" in tab 2')
-        self.wait_for_text_to_equal('#tab-2-output', 'Selected "a" in tab 2')
-        self.assertEqual(call_counts['tab1'].value, 1)
-        self.assertEqual(call_counts['tab2'].value, 1)
+        self.wait_for_text_to_equal("#tab-output", 'Selected "a" in tab 2')
+        self.wait_for_text_to_equal("#tab-2-output", 'Selected "a" in tab 2')
+        self.assertEqual(call_counts["tab1"].value, 1)
+        self.assertEqual(call_counts["tab2"].value, 1)
 
         self.assertTrue(self.is_console_clean())
 
     def test_initialization_with_overlapping_outputs(self):
-        app = dash.Dash()
-        app.layout = html.Div([
-
-            html.Div(id='input-1', children='input-1'),
-            html.Div(id='input-2', children='input-2'),
-            html.Div(id='input-3', children='input-3'),
-            html.Div(id='input-4', children='input-4'),
-            html.Div(id='input-5', children='input-5'),
-
-            html.Div(id='output-1'),
-            html.Div(id='output-2'),
-            html.Div(id='output-3'),
-            html.Div(id='output-4'),
-
-        ])
+        app = Dash()
+        app.layout = html.Div(
+            [
+                html.Div(id="input-1", children="input-1"),
+                html.Div(id="input-2", children="input-2"),
+                html.Div(id="input-3", children="input-3"),
+                html.Div(id="input-4", children="input-4"),
+                html.Div(id="input-5", children="input-5"),
+                html.Div(id="output-1"),
+                html.Div(id="output-2"),
+                html.Div(id="output-3"),
+                html.Div(id="output-4"),
+            ]
+        )
         call_counts = {
-            'output-1': Value('i', 0),
-            'output-2': Value('i', 0),
-            'output-3': Value('i', 0),
-            'output-4': Value('i', 0),
+            "output-1": Value("i", 0),
+            "output-2": Value("i", 0),
+            "output-3": Value("i", 0),
+            "output-4": Value("i", 0),
         }
 
         def generate_callback(outputid):
             def callback(*args):
                 call_counts[outputid].value += 1
-                return '{}, {}'.format(*args)
+                return "{}, {}".format(*args)
+
             return callback
 
         for i in range(1, 5):
-            outputid = 'output-{}'.format(i)
+            outputid = "output-{}".format(i)
             app.callback(
-                Output(outputid, 'children'),
+                Output(outputid, "children"),
                 [
-                    Input('input-{}'.format(i), 'children'),
-                    Input('input-{}'.format(i + 1), 'children')
-                ]
+                    Input("input-{}".format(i), "children"),
+                    Input("input-{}".format(i + 1), "children"),
+                ],
             )(generate_callback(outputid))
 
         self.startServer(app)
 
-        self.wait_for_element_by_css_selector('#output-1')
+        self.wait_for_element_by_css_selector("#output-1")
         time.sleep(5)
 
         for i in range(1, 5):
-            outputid = 'output-{}'.format(i)
+            outputid = "output-{}".format(i)
             self.assertEqual(call_counts[outputid].value, 1)
             self.wait_for_text_to_equal(
-                '#{}'.format(outputid),
-                "input-{}, input-{}".format(i, i + 1)
+                "#{}".format(outputid), "input-{}, input-{}".format(i, i + 1)
             )
 
     def test_generate_overlapping_outputs(self):
-        app = dash.Dash()
-        app.config['suppress_callback_exceptions'] = True
-        block = html.Div([
-
-            html.Div(id='input-1', children='input-1'),
-            html.Div(id='input-2', children='input-2'),
-            html.Div(id='input-3', children='input-3'),
-            html.Div(id='input-4', children='input-4'),
-            html.Div(id='input-5', children='input-5'),
-
-            html.Div(id='output-1'),
-            html.Div(id='output-2'),
-            html.Div(id='output-3'),
-            html.Div(id='output-4'),
-
-        ])
-        app.layout = html.Div([
-            html.Div(id='input'),
-            html.Div(id='container')
-        ])
+        app = Dash()
+        app.config["suppress_callback_exceptions"] = True
+        block = html.Div(
+            [
+                html.Div(id="input-1", children="input-1"),
+                html.Div(id="input-2", children="input-2"),
+                html.Div(id="input-3", children="input-3"),
+                html.Div(id="input-4", children="input-4"),
+                html.Div(id="input-5", children="input-5"),
+                html.Div(id="output-1"),
+                html.Div(id="output-2"),
+                html.Div(id="output-3"),
+                html.Div(id="output-4"),
+            ]
+        )
+        app.layout = html.Div([html.Div(id="input"), html.Div(id="container")])
 
         call_counts = {
-            'container': Value('i', 0),
-            'output-1': Value('i', 0),
-            'output-2': Value('i', 0),
-            'output-3': Value('i', 0),
-            'output-4': Value('i', 0),
+            "container": Value("i", 0),
+            "output-1": Value("i", 0),
+            "output-2": Value("i", 0),
+            "output-3": Value("i", 0),
+            "output-4": Value("i", 0),
         }
 
-        @app.callback(Output('container', 'children'),
-                      [Input('input', 'children')])
+        @app.callback(Output("container", "children"), [Input("input", "children")])
         def display_output(*args):
-            call_counts['container'].value += 1
+            call_counts["container"].value += 1
             return block
 
         def generate_callback(outputid):
             def callback(*args):
                 call_counts[outputid].value += 1
-                return '{}, {}'.format(*args)
+                return "{}, {}".format(*args)
+
             return callback
 
         for i in range(1, 5):
-            outputid = 'output-{}'.format(i)
+            outputid = "output-{}".format(i)
             app.callback(
-                Output(outputid, 'children'),
-                [Input('input-{}'.format(i), 'children'),
-                 Input('input-{}'.format(i + 1), 'children')]
+                Output(outputid, "children"),
+                [
+                    Input("input-{}".format(i), "children"),
+                    Input("input-{}".format(i + 1), "children"),
+                ],
             )(generate_callback(outputid))
 
         self.startServer(app)
 
-        wait_for(lambda: call_counts['container'].value == 1)
-        self.wait_for_element_by_css_selector('#output-1')
+        wait_for(lambda: call_counts["container"].value == 1)
+        self.wait_for_element_by_css_selector("#output-1")
         time.sleep(5)
 
         for i in range(1, 5):
-            outputid = 'output-{}'.format(i)
+            outputid = "output-{}".format(i)
             self.assertEqual(call_counts[outputid].value, 1)
             self.wait_for_text_to_equal(
-                '#{}'.format(outputid),
-                "input-{}, input-{}".format(i, i + 1)
+                "#{}".format(outputid), "input-{}, input-{}".format(i, i + 1)
             )
-        self.assertEqual(call_counts['container'].value, 1)
+        self.assertEqual(call_counts["container"].value, 1)
 
     def test_multiple_properties_update_at_same_time_on_same_component(self):
-        call_count = Value('i', 0)
-        timestamp_1 = Value('d', -5)
-        timestamp_2 = Value('d', -5)
-
-        app = dash.Dash()
-        app.layout = html.Div([
-            html.Div(id='container'),
-            html.Button('Click', id='button-1', n_clicks=0, n_clicks_timestamp=-1),
-            html.Button('Click', id='button-2', n_clicks=0, n_clicks_timestamp=-1)
-        ])
+        call_count = Value("i", 0)
+        timestamp_1 = Value("d", -5)
+        timestamp_2 = Value("d", -5)
+
+        app = Dash()
+        app.layout = html.Div(
+            [
+                html.Div(id="container"),
+                html.Button("Click", id="button-1", n_clicks=0, n_clicks_timestamp=-1),
+                html.Button("Click", id="button-2", n_clicks=0, n_clicks_timestamp=-1),
+            ]
+        )
 
         @app.callback(
-            Output('container', 'children'),
-            [Input('button-1', 'n_clicks'),
-             Input('button-1', 'n_clicks_timestamp'),
-             Input('button-2', 'n_clicks'),
-             Input('button-2', 'n_clicks_timestamp')])
+            Output("container", "children"),
+            [
+                Input("button-1", "n_clicks"),
+                Input("button-1", "n_clicks_timestamp"),
+                Input("button-2", "n_clicks"),
+                Input("button-2", "n_clicks_timestamp"),
+            ],
+        )
         def update_output(*args):
             call_count.value += 1
             timestamp_1.value = args[1]
             timestamp_2.value = args[3]
-            return '{}, {}'.format(args[0], args[2])
+            return "{}, {}".format(args[0], args[2])
 
         self.startServer(app)
 
-        self.wait_for_element_by_css_selector('#container')
+        self.wait_for_element_by_css_selector("#container")
         time.sleep(2)
-        self.wait_for_text_to_equal('#container', '0, 0')
+        self.wait_for_text_to_equal("#container", "0, 0")
         self.assertEqual(timestamp_1.value, -1)
         self.assertEqual(timestamp_2.value, -1)
         self.assertEqual(call_count.value, 1)
-        self.percy_snapshot('button initialization 1')
+        self.percy_snapshot("button initialization 1")
 
-        self.driver.find_element_by_css_selector('#button-1').click()
+        self.driver.find_element_by_css_selector("#button-1").click()
         time.sleep(2)
-        self.wait_for_text_to_equal('#container', '1, 0')
-        self.assertTrue(
-            timestamp_1.value >
-            ((time.time() - (24 * 60 * 60)) * 1000))
+        self.wait_for_text_to_equal("#container", "1, 0")
+        self.assertTrue(timestamp_1.value > ((time.time() - (24 * 60 * 60)) * 1000))
         self.assertEqual(timestamp_2.value, -1)
         self.assertEqual(call_count.value, 2)
-        self.percy_snapshot('button-1 click')
+        self.percy_snapshot("button-1 click")
         prev_timestamp_1 = timestamp_1.value
 
-        self.driver.find_element_by_css_selector('#button-2').click()
+        self.driver.find_element_by_css_selector("#button-2").click()
         time.sleep(2)
-        self.wait_for_text_to_equal('#container', '1, 1')
+        self.wait_for_text_to_equal("#container", "1, 1")
         self.assertEqual(timestamp_1.value, prev_timestamp_1)
-        self.assertTrue(
-            timestamp_2.value >
-            ((time.time() - 24 * 60 * 60) * 1000))
+        self.assertTrue(timestamp_2.value > ((time.time() - 24 * 60 * 60) * 1000))
         self.assertEqual(call_count.value, 3)
-        self.percy_snapshot('button-2 click')
+        self.percy_snapshot("button-2 click")
         prev_timestamp_2 = timestamp_2.value
 
-        self.driver.find_element_by_css_selector('#button-2').click()
+        self.driver.find_element_by_css_selector("#button-2").click()
         time.sleep(2)
-        self.wait_for_text_to_equal('#container', '1, 2')
+        self.wait_for_text_to_equal("#container", "1, 2")
         self.assertEqual(timestamp_1.value, prev_timestamp_1)
-        self.assertTrue(
-            timestamp_2.value >
-            prev_timestamp_2)
+        self.assertTrue(timestamp_2.value > prev_timestamp_2)
         self.assertTrue(timestamp_2.value > timestamp_1.value)
         self.assertEqual(call_count.value, 4)
-        self.percy_snapshot('button-2 click again')
+        self.percy_snapshot("button-2 click again")
 
     def test_request_hooks(self):
         app = Dash(__name__)
 
-        app.index_string = '''<!DOCTYPE html>
+        app.index_string = """<!DOCTYPE html>
         <html>
             <head>
                 {%metas%}
@@ -856,101 +837,115 @@ class Tests(IntegrationTests):
                 </footer>
                 <div>With request hooks</div>
             </body>
-        </html>'''
-
-        app.layout = html.Div([
-            dcc.Input(
-                id='input',
-                value='initial value'
-            ),
-            html.Div(
-                html.Div([
-                    html.Div(id='output-1'),
-                    html.Div(id='output-pre'),
-                    html.Div(id='output-pre-payload'),
-                    html.Div(id='output-post'),
-                    html.Div(id='output-post-payload'),
-                    html.Div(id='output-post-response')
-                ])
-            )
-        ])
+        </html>"""
+
+        app.layout = html.Div(
+            [
+                dcc.Input(id="input", value="initial value"),
+                html.Div(
+                    html.Div(
+                        [
+                            html.Div(id="output-1"),
+                            html.Div(id="output-pre"),
+                            html.Div(id="output-pre-payload"),
+                            html.Div(id="output-post"),
+                            html.Div(id="output-post-payload"),
+                            html.Div(id="output-post-response"),
+                        ]
+                    )
+                ),
+            ]
+        )
 
-        @app.callback(Output('output-1', 'children'), [Input('input', 'value')])
+        @app.callback(Output("output-1", "children"), [Input("input", "value")])
         def update_output(value):
             return value
 
         self.startServer(app)
 
-        input1 = self.wait_for_element_by_css_selector('#input')
-        initialValue = input1.get_attribute('value')
+        input1 = self.wait_for_element_by_css_selector("#input")
+        initialValue = input1.get_attribute("value")
 
         action = ActionChains(self.driver)
         action.click(input1)
         action = action.send_keys(Keys.BACKSPACE * len(initialValue))
 
-        action.send_keys('fire request hooks').perform()
+        action.send_keys("fire request hooks").perform()
 
-        self.wait_for_text_to_equal('#output-1', 'fire request hooks')
-        self.wait_for_text_to_equal('#output-pre', 'request_pre changed this text!')
-        self.wait_for_text_to_equal('#output-pre-payload', '{"output":"output-1.children","changedPropIds":["input.value"],"inputs":[{"id":"input","property":"value","value":"fire request hooks"}]}')
-        self.wait_for_text_to_equal('#output-post', 'request_post changed this text!')
-        self.wait_for_text_to_equal('#output-post-payload', '{"output":"output-1.children","changedPropIds":["input.value"],"inputs":[{"id":"input","property":"value","value":"fire request hooks"}]}')
-        self.wait_for_text_to_equal('#output-post-response', '{"props":{"children":"fire request hooks"}}')
-        self.percy_snapshot(name='request-hooks render')
+        self.wait_for_text_to_equal("#output-1", "fire request hooks")
+        self.wait_for_text_to_equal("#output-pre", "request_pre changed this text!")
+        self.wait_for_text_to_equal(
+            "#output-pre-payload",
+            '{"output":"output-1.children","changedPropIds":["input.value"],"inputs":[{"id":"input","property":"value","value":"fire request hooks"}]}',
+        )
+        self.wait_for_text_to_equal("#output-post", "request_post changed this text!")
+        self.wait_for_text_to_equal(
+            "#output-post-payload",
+            '{"output":"output-1.children","changedPropIds":["input.value"],"inputs":[{"id":"input","property":"value","value":"fire request hooks"}]}',
+        )
+        self.wait_for_text_to_equal(
+            "#output-post-response", '{"props":{"children":"fire request hooks"}}'
+        )
+        self.percy_snapshot(name="request-hooks render")
 
     def test_graphs_in_tabs_do_not_share_state(self):
-        app = dash.Dash()
+        app = Dash()
 
         app.config.suppress_callback_exceptions = True
 
-        app.layout = html.Div([
-            dcc.Tabs(
-                id="tabs",
-                children=[
-                    dcc.Tab(label="Tab 1", value="tab1", id="tab1"),
-                    dcc.Tab(label="Tab 2", value="tab2", id="tab2"),
-                ],
-                value="tab1",
-            ),
-
-            # Tab content
-            html.Div(id="tab_content"),
-        ])
+        app.layout = html.Div(
+            [
+                dcc.Tabs(
+                    id="tabs",
+                    children=[
+                        dcc.Tab(label="Tab 1", value="tab1", id="tab1"),
+                        dcc.Tab(label="Tab 2", value="tab2", id="tab2"),
+                    ],
+                    value="tab1",
+                ),
+                # Tab content
+                html.Div(id="tab_content"),
+            ]
+        )
         tab1_layout = [
-            html.Div([dcc.Graph(id='graph1',
-                                figure={
-                                    'data': [{
-                                        'x': [1, 2, 3],
-                                        'y': [5, 10, 6],
-                                        'type': 'bar'
-                                        }]
-                                })]),
-
-            html.Pre(id='graph1_info'),
+            html.Div(
+                [
+                    dcc.Graph(
+                        id="graph1",
+                        figure={
+                            "data": [{"x": [1, 2, 3], "y": [5, 10, 6], "type": "bar"}]
+                        },
+                    )
+                ]
+            ),
+            html.Pre(id="graph1_info"),
         ]
 
         tab2_layout = [
-            html.Div([dcc.Graph(id='graph2',
-                                figure={
-                                    'data': [{
-                                        'x': [4, 3, 2],
-                                        'y': [5, 10, 6],
-                                        'type': 'bar'
-                                        }]
-                                })]),
-
-            html.Pre(id='graph2_info'),
+            html.Div(
+                [
+                    dcc.Graph(
+                        id="graph2",
+                        figure={
+                            "data": [{"x": [4, 3, 2], "y": [5, 10, 6], "type": "bar"}]
+                        },
+                    )
+                ]
+            ),
+            html.Pre(id="graph2_info"),
         ]
 
         @app.callback(
-            Output(component_id='graph1_info', component_property='children'),
-            [Input(component_id='graph1', component_property='clickData')])
+            Output(component_id="graph1_info", component_property="children"),
+            [Input(component_id="graph1", component_property="clickData")],
+        )
         def display_hover_data(hover_data):
             return json.dumps(hover_data)
 
         @app.callback(
-            Output(component_id='graph2_info', component_property='children'),
-            [Input(component_id='graph2', component_property='clickData')])
+            Output(component_id="graph2_info", component_property="children"),
+            [Input(component_id="graph2", component_property="clickData")],
+        )
         def display_hover_data_2(hover_data):
             return json.dumps(hover_data)
 
@@ -965,30 +960,52 @@ class Tests(IntegrationTests):
 
         self.startServer(app)
 
-        self.wait_for_element_by_css_selector('#graph1:not(.dash-graph--pending)')
+        self.wait_for_element_by_css_selector("#graph1:not(.dash-graph--pending)")
 
-        self.driver.find_elements_by_css_selector(
-            '#graph1:not(.dash-graph--pending)'
-        )[0].click()
+        self.driver.find_elements_by_css_selector("#graph1:not(.dash-graph--pending)")[
+            0
+        ].click()
 
         graph_1_expected_clickdata = {
-            "points": [{"curveNumber": 0, "pointNumber": 1, "pointIndex": 1, "x": 2, "y": 10, "label": 2, "value": 10}]
+            "points": [
+                {
+                    "curveNumber": 0,
+                    "pointNumber": 1,
+                    "pointIndex": 1,
+                    "x": 2,
+                    "y": 10,
+                    "label": 2,
+                    "value": 10,
+                }
+            ]
         }
 
         graph_2_expected_clickdata = {
-            "points": [{"curveNumber": 0, "pointNumber": 1, "pointIndex": 1, "x": 3, "y": 10, "label": 3, "value": 10}]
+            "points": [
+                {
+                    "curveNumber": 0,
+                    "pointNumber": 1,
+                    "pointIndex": 1,
+                    "x": 3,
+                    "y": 10,
+                    "label": 3,
+                    "value": 10,
+                }
+            ]
         }
 
-        self.wait_for_text_to_equal('#graph1_info', json.dumps(graph_1_expected_clickdata))
+        self.wait_for_text_to_equal(
+            "#graph1_info", json.dumps(graph_1_expected_clickdata)
+        )
 
-        self.driver.find_elements_by_css_selector(
-            '#tab2'
-        )[0].click()
+        self.driver.find_elements_by_css_selector("#tab2")[0].click()
 
-        self.wait_for_element_by_css_selector('#graph2:not(.dash-graph--pending)')
+        self.wait_for_element_by_css_selector("#graph2:not(.dash-graph--pending)")
 
-        self.driver.find_elements_by_css_selector(
-            '#graph2:not(.dash-graph--pending)'
-        )[0].click()
+        self.driver.find_elements_by_css_selector("#graph2:not(.dash-graph--pending)")[
+            0
+        ].click()
 
-        self.wait_for_text_to_equal('#graph2_info', json.dumps(graph_2_expected_clickdata))
+        self.wait_for_text_to_equal(
+            "#graph2_info", json.dumps(graph_2_expected_clickdata)
+        )
diff --git a/tests/integration/test_scripts.py b/tests/integration/test_scripts.py
index 9a9e6f2d..441543e3 100644
--- a/tests/integration/test_scripts.py
+++ b/tests/integration/test_scripts.py
@@ -1,53 +1,33 @@
-from multiprocessing import Value
-import datetime
 import time
 import pytest
 
-from bs4 import BeautifulSoup
-from selenium.webdriver.common.keys import Keys
-
-import dash_dangerously_set_inner_html
-import dash_flow_example
+from selenium.webdriver.common.by import By
 
 import dash_html_components as html
 import dash_core_components as dcc
 
-from dash import Dash, callback_context, no_update
-
-from dash.dependencies import Input, Output, State
-from dash.exceptions import (
-    PreventUpdate,
-    DuplicateCallbackOutput,
-    CallbackException,
-    MissingCallbackContextException,
-    InvalidCallbackReturnValue,
-    IncorrectTypeException,
-    NonExistentIdException,
-)
-from dash.testing.wait import until
-from selenium.webdriver.common.by import By
+from dash import Dash
+
+from dash.dependencies import Input, Output
+from dash.exceptions import PreventUpdate
 
 
 def findSyncPlotlyJs(scripts):
     for script in scripts:
-        if "dash_core_components/plotly" in script.get_attribute('src'):
+        if "dash_core_components/plotly" in script.get_attribute("src"):
             return script
 
 
 def findAsyncPlotlyJs(scripts):
     for script in scripts:
-        if "dash_core_components/async-plotlyjs" in script.get_attribute(
-            'src'
-        ):
+        if "dash_core_components/async-plotlyjs" in script.get_attribute("src"):
             return script
 
 
 @pytest.mark.parametrize("is_eager", [True, False])
 def test_scripts(dash_duo, is_eager):
     app = Dash(__name__, eager_loading=is_eager)
-    app.layout = html.Div(
-        [dcc.Graph(id="output", figure={"data": [{"y": [3, 1, 2]}]})]
-    )
+    app.layout = html.Div([dcc.Graph(id="output", figure={"data": [{"y": [3, 1, 2]}]})])
 
     dash_duo.start_server(
         app,
diff --git a/tests/integration/utils.py b/tests/integration/utils.py
index 09980127..43dc6197 100644
--- a/tests/integration/utils.py
+++ b/tests/integration/utils.py
@@ -10,6 +10,7 @@ def invincible(func):
             return func()
         except:
             pass
+
     return wrap
 
 
@@ -17,7 +18,7 @@ class WaitForTimeout(Exception):
     """This should only be raised inside the `wait_for` function."""
 
 
-def wait_for(condition_function, get_message=lambda: '', *args, **kwargs):
+def wait_for(condition_function, get_message=lambda: "", *args, **kwargs):
     """Waits for condition_function to return True or raises WaitForTimeout.
 
     :param (function) condition_function: Should return True on success.
@@ -36,6 +37,7 @@ def wait_for(condition_function, get_message=lambda: '', *args, **kwargs):
             self.fail('element never appeared...')
         plot = get_element(selector)  # we know it exists.
     """
+
     def wrapped_condition_function():
         """We wrap this to alter the call base on the closure."""
         if args and kwargs:
@@ -46,9 +48,9 @@ def wait_for(condition_function, get_message=lambda: '', *args, **kwargs):
             return condition_function(**kwargs)
         return condition_function()
 
-    if 'timeout' in kwargs:
-        timeout = kwargs['timeout']
-        del kwargs['timeout']
+    if "timeout" in kwargs:
+        timeout = kwargs["timeout"]
+        del kwargs["timeout"]
     else:
         timeout = TIMEOUT
 
diff --git a/tests/unit/dash/test_async_resources.py b/tests/unit/dash/test_async_resources.py
index f42fe136..4781f208 100644
--- a/tests/unit/dash/test_async_resources.py
+++ b/tests/unit/dash/test_async_resources.py
@@ -1,4 +1,4 @@
-from dash.resources import Resources, Scripts
+from dash.resources import Resources
 
 
 class obj(object):
diff --git a/tests/unit/dash/test_utils.py b/tests/unit/dash/test_utils.py
index 70e3c74e..3c75d685 100644
--- a/tests/unit/dash/test_utils.py
+++ b/tests/unit/dash/test_utils.py
@@ -6,58 +6,56 @@ import dash._utils as utils
 def test_ddut001_attribute_dict():
     a = utils.AttributeDict()
 
-    assert str(a) == '{}'
+    assert str(a) == "{}"
     with pytest.raises(AttributeError):
         a.k
     with pytest.raises(KeyError):
-        a['k']
-    assert a.first('no', 'k', 'nope') is None
+        a["k"]
+    assert a.first("no", "k", "nope") is None
 
     a.k = 1
 
     assert a.k == 1
-    assert a['k'] == 1
-    assert a.first('no', 'k', 'nope') == 1
+    assert a["k"] == 1
+    assert a.first("no", "k", "nope") == 1
 
-    a['k'] = 2
+    a["k"] = 2
 
     assert a.k == 2
-    assert a['k'] == 2
+    assert a["k"] == 2
 
-    a.set_read_only(['k', 'q'], 'boo')
+    a.set_read_only(["k", "q"], "boo")
 
     with pytest.raises(AttributeError) as err:
         a.k = 3
-    assert err.value.args == ('boo', 'k')
+    assert err.value.args == ("boo", "k")
     assert a.k == 2
 
     with pytest.raises(AttributeError) as err:
-        a['k'] = 3
-    assert err.value.args == ('boo', 'k')
+        a["k"] = 3
+    assert err.value.args == ("boo", "k")
     assert a.k == 2
 
-    a.set_read_only(['q'])
+    a.set_read_only(["q"])
 
     a.k = 3
     assert a.k == 3
 
     with pytest.raises(AttributeError) as err:
         a.q = 3
-    assert err.value.args == ('Attribute is read-only', 'q')
-    assert 'q' not in a
+    assert err.value.args == ("Attribute is read-only", "q")
+    assert "q" not in a
 
-    a.finalize('nope')
+    a.finalize("nope")
 
     with pytest.raises(AttributeError) as err:
         a.x = 4
-    assert err.value.args == ('nope', 'x')
-    assert 'x' not in a
+    assert err.value.args == ("nope", "x")
+    assert "x" not in a
 
     a.finalize()
 
     with pytest.raises(AttributeError) as err:
         a.x = 4
-    assert err.value.args == (
-        'Object is final: No new keys may be added.', 'x'
-    )
-    assert 'x' not in a
+    assert err.value.args == ("Object is final: No new keys may be added.", "x")
+    assert "x" not in a
diff --git a/tests/unit/development/metadata_test.py b/tests/unit/development/metadata_test.py
index 6505a414..042b4438 100644
--- a/tests/unit/development/metadata_test.py
+++ b/tests/unit/development/metadata_test.py
@@ -62,4 +62,4 @@ Those keys have the following types:
             if k not in args:
                 raise TypeError(
                     'Required argument `' + k + '` was not specified.')
-        super(Table, self).__init__(children=children, **args)
+        super(Table, self).__init__(children=children, **args)
\ No newline at end of file
diff --git a/tests/unit/development/test_base_component.py b/tests/unit/development/test_base_component.py
index f585aa2e..4b6d9f93 100644
--- a/tests/unit/development/test_base_component.py
+++ b/tests/unit/development/test_base_component.py
@@ -3,8 +3,8 @@ import json
 import plotly
 import pytest
 
-from dash.development.base_component import Component
 import dash_html_components as html
+from dash.development.base_component import Component
 
 Component._prop_names = ("id", "a", "children", "style")
 Component._type = "TestComponent"
@@ -422,7 +422,7 @@ def test_debc025_iter():
 
 
 def test_debc026_component_not_children():
-    children = [Component(id='a'), html.Div(id='b'), 'c', 1]
+    children = [Component(id="a"), html.Div(id="b"), "c", 1]
     for i in range(len(children)):
         # cycle through each component in each position
         children = children[1:] + [children[0]]
@@ -430,7 +430,7 @@ def test_debc026_component_not_children():
         # use html.Div because only real components accept positional args
         html.Div(children)
         # the first arg is children, and a single component works there
-        html.Div(children[0], id='x')
+        html.Div(children[0], id="x")
 
         with pytest.raises(TypeError):
             # If you forget the `[]` around children you get this:
@@ -441,40 +441,36 @@ def test_debc027_component_error_message():
     with pytest.raises(TypeError) as e:
         Component(asdf=True)
     assert str(e.value) == (
-        "The `TestComponent` component received an unexpected " +
-        "keyword argument: `asdf`\nAllowed arguments: a, children, " +
-        "id, style"
+        "The `TestComponent` component received an unexpected "
+        + "keyword argument: `asdf`\nAllowed arguments: a, children, "
+        + "id, style"
     )
 
     with pytest.raises(TypeError) as e:
-        Component(asdf=True, id='my-component')
+        Component(asdf=True, id="my-component")
     assert str(e.value) == (
-        "The `TestComponent` component " +
-        "with the ID \"my-component\" received an unexpected " +
-        "keyword argument: `asdf`\nAllowed arguments: a, children, " +
-        "id, style"
+        "The `TestComponent` component "
+        + 'with the ID "my-component" received an unexpected '
+        + "keyword argument: `asdf`\nAllowed arguments: a, children, "
+        + "id, style"
     )
 
     with pytest.raises(TypeError) as e:
         html.Div(asdf=True)
     assert str(e.value) == (
-        "The `dash_html_components.Div` component " +
-        "(version {}) ".format(html.__version__) +
-        "received an unexpected " +
-        "keyword argument: `asdf`\n" +
-        "Allowed arguments: {}".format(
-            ', '.join(sorted(html.Div()._prop_names))
-        )
+        "The `dash_html_components.Div` component "
+        + "(version {}) ".format(html.__version__)
+        + "received an unexpected "
+        + "keyword argument: `asdf`\n"
+        + "Allowed arguments: {}".format(", ".join(sorted(html.Div()._prop_names)))
     )
 
     with pytest.raises(TypeError) as e:
-        html.Div(asdf=True, id='my-component')
+        html.Div(asdf=True, id="my-component")
     assert str(e.value) == (
-        "The `dash_html_components.Div` component " +
-        "(version {}) ".format(html.__version__) +
-        "with the ID \"my-component\" received an unexpected " +
-        "keyword argument: `asdf`\n" +
-        "Allowed arguments: {}".format(
-            ', '.join(sorted(html.Div()._prop_names))
-        )
+        "The `dash_html_components.Div` component "
+        + "(version {}) ".format(html.__version__)
+        + 'with the ID "my-component" received an unexpected '
+        + "keyword argument: `asdf`\n"
+        + "Allowed arguments: {}".format(", ".join(sorted(html.Div()._prop_names)))
     )
diff --git a/tests/unit/development/test_r_component_gen.py b/tests/unit/development/test_r_component_gen.py
index b72ecbf5..ae16fb68 100644
--- a/tests/unit/development/test_r_component_gen.py
+++ b/tests/unit/development/test_r_component_gen.py
@@ -5,9 +5,7 @@ from textwrap import dedent
 
 import pytest
 
-from dash.development._r_components_generation import (
-    make_namespace_exports
-)
+from dash.development._r_components_generation import make_namespace_exports
 
 
 @pytest.fixture
@@ -20,7 +18,8 @@ def make_r_dir():
 
 
 def test_r_exports(make_r_dir):
-    extra_file = dedent("""
+    extra_file = dedent(
+        """
         # normal function syntax
         my_func <- function(a, b) {
             c <- a + b
@@ -55,22 +54,25 @@ def test_r_exports(make_r_dir):
 
         # . in the middle is OK though
         not.secret <- function() { 42 }
-    """)
+    """
+    )
 
     components = ["Component1", "Component2"]
-    prefix = 'pre'
+    prefix = "pre"
 
     expected_exports = [prefix + c for c in components] + [
         "my_func",
         "my_func2",
         "df_to_list",
         "util",
-        "not.secret"
+        "not.secret",
     ]
 
-    mock_component_file = dedent("""
+    mock_component_file = dedent(
+        """
         nope <- function() { stop("we don't look in component files") }
-    """)
+    """
+    )
 
     with open(os.path.join("R", "preComponent1.R"), "w") as f:
         f.write(mock_component_file)
@@ -80,6 +82,6 @@ def test_r_exports(make_r_dir):
 
     exports = make_namespace_exports(components, prefix)
     print(exports)
-    matches = re.findall(r"export\(([^()]+)\)", exports.replace('\n', ' '))
+    matches = re.findall(r"export\(([^()]+)\)", exports.replace("\n", " "))
 
     assert matches == expected_exports
diff --git a/tests/unit/test_app_runners.py b/tests/unit/test_app_runners.py
index 784a8ff3..22bca740 100644
--- a/tests/unit/test_app_runners.py
+++ b/tests/unit/test_app_runners.py
@@ -25,7 +25,7 @@ def test_threaded_server_smoke(dash_thread_server):
     sys.version_info < (3,), reason="requires python3 for process testing"
 )
 def test_process_server_smoke(dash_process_server):
-    dash_process_server('simple_app')
+    dash_process_server("simple_app")
     r = requests.get(dash_process_server.url)
     assert r.status_code == 200, "the server is reachable"
     assert 'id="react-entry-point"' in r.text, "the entrypoint is present"
diff --git a/tests/unit/test_configs.py b/tests/unit/test_configs.py
index 270c1327..54ca653a 100644
--- a/tests/unit/test_configs.py
+++ b/tests/unit/test_configs.py
@@ -167,60 +167,53 @@ def test_app_name_server(empty_environ, name, server, expected):
     [
         ("/", "", "/"),
         ("/my-dash-app/", "", "/my-dash-app/"),
-
         ("/", "/", "/"),
         ("/my-dash-app/", "/", "/my-dash-app/"),
-
         ("/", "/page-1", "/page-1"),
         ("/my-dash-app/", "/page-1", "/my-dash-app/page-1"),
-
         ("/", "/page-1/", "/page-1/"),
         ("/my-dash-app/", "/page-1/", "/my-dash-app/page-1/"),
-
         ("/", "/page-1/sub-page-1", "/page-1/sub-page-1"),
         ("/my-dash-app/", "/page-1/sub-page-1", "/my-dash-app/page-1/sub-page-1"),
-    ]
+    ],
 )
 def test_pathname_prefix_relative_url(prefix, partial_path, expected):
     path = get_relative_path(prefix, partial_path)
     assert path == expected
 
+
 @pytest.mark.parametrize(
     "prefix, partial_path",
-    [
-        ("/", "relative-page-1"),
-        ("/my-dash-app/", "relative-page-1"),
-    ]
+    [("/", "relative-page-1"), ("/my-dash-app/", "relative-page-1")],
 )
 def test_invalid_get_relative_path(prefix, partial_path):
     with pytest.raises(_exc.UnsupportedRelativePath):
         get_relative_path(prefix, partial_path)
 
+
 @pytest.mark.parametrize(
     "prefix, partial_path, expected",
     [
         ("/", None, None),
         ("/my-dash-app/", None, None),
-
         ("/", "/", ""),
         ("/my-dash-app/", "/my-dash-app", ""),
         ("/my-dash-app/", "/my-dash-app/", ""),
-
         ("/", "/page-1", "page-1"),
         ("/my-dash-app/", "/my-dash-app/page-1", "page-1"),
-
         ("/", "/page-1/", "page-1"),
         ("/my-dash-app/", "/my-dash-app/page-1/", "page-1"),
-
         ("/", "/page-1/sub-page-1", "page-1/sub-page-1"),
         ("/my-dash-app/", "/my-dash-app/page-1/sub-page-1", "page-1/sub-page-1"),
-
         ("/", "/page-1/sub-page-1/", "page-1/sub-page-1"),
         ("/my-dash-app/", "/my-dash-app/page-1/sub-page-1/", "page-1/sub-page-1"),
-
         ("/my-dash-app/", "/my-dash-app/my-dash-app/", "my-dash-app"),
-        ("/my-dash-app/", "/my-dash-app/something-else/my-dash-app/", "something-else/my-dash-app"),
-    ]
+        (
+            "/my-dash-app/",
+            "/my-dash-app/something-else/my-dash-app/",
+            "something-else/my-dash-app",
+        ),
+    ],
 )
 def test_strip_relative_path(prefix, partial_path, expected):
     path = strip_relative_path(prefix, partial_path)
@@ -232,8 +225,8 @@ def test_strip_relative_path(prefix, partial_path, expected):
     [
         ("/", "relative-page-1"),
         ("/my-dash-app", "relative-page-1"),
-        ("/my-dash-app", "/some-other-path")
-    ]
+        ("/my-dash-app", "/some-other-path"),
+    ],
 )
 def test_invalid_strip_relative_path(prefix, partial_path):
     with pytest.raises(_exc.UnsupportedRelativePath):
diff --git a/tests/unit/test_fingerprint.py b/tests/unit/test_fingerprint.py
index 97037e7b..e084710e 100644
--- a/tests/unit/test_fingerprint.py
+++ b/tests/unit/test_fingerprint.py
@@ -33,12 +33,12 @@ valid_resources = [
         # kind of pathological, but we have what looks like a version string
         # in a different place - still works
         "path": "nested.v2m2/folder/file.js",
-        "fingerprint": "nested.v2m2/folder/file.v1m1.js"
+        "fingerprint": "nested.v2m2/folder/file.v1m1.js",
     },
     {
         # even works if it gets doubled up in the right place
         "path": "nested/folder/file.v2m2.js",
-        "fingerprint": "nested/folder/file.v1m1.v2m2.js"
+        "fingerprint": "nested/folder/file.v1m1.v2m2.js",
     },
     {
         "path": "nested.dotted/folder.structure/file.name.css",
diff --git a/tests/unit/test_resources.py b/tests/unit/test_resources.py
index 3d3727b4..748804af 100644
--- a/tests/unit/test_resources.py
+++ b/tests/unit/test_resources.py
@@ -45,9 +45,7 @@ def test_external(mocker):
     app.layout = dcc.Markdown()
     app.scripts.config.serve_locally = False
 
-    resource = app._collect_and_register_resources(
-        app.scripts.get_all_scripts()
-    )
+    resource = app._collect_and_register_resources(app.scripts.get_all_scripts())
 
     assert resource == [
         "https://external_javascript.js",
@@ -84,9 +82,8 @@ def test_internal(mocker):
     assert resource == [
         "/_dash-component-suites/"
         "dash_core_components/external_javascript.v1_0_0m1.js",
-        "/_dash-component-suites/"
-        "dash_core_components/external_css.v1_0_0m1.css",
-        "/_dash-component-suites/" "dash_core_components/fake_dcc.v1_0_0m1.js",
+        "/_dash-component-suites/dash_core_components/external_css.v1_0_0m1.css",
+        "/_dash-component-suites/dash_core_components/fake_dcc.v1_0_0m1.js",
     ]
 
     assert (
