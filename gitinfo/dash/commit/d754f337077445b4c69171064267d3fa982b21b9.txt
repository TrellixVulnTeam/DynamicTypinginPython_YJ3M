commit d754f337077445b4c69171064267d3fa982b21b9
Author: alexcjohnson <alex@plot.ly>
Date:   Mon Jul 8 18:09:24 2019 -0400

    update ramda 0.23.0 -> 0.26.1

diff --git a/dash-renderer/package-lock.json b/dash-renderer/package-lock.json
index 25a7e821..5dcedd5b 100644
--- a/dash-renderer/package-lock.json
+++ b/dash-renderer/package-lock.json
@@ -11269,9 +11269,9 @@
       }
     },
     "ramda": {
-      "version": "0.23.0",
-      "resolved": "https://registry.npmjs.org/ramda/-/ramda-0.23.0.tgz",
-      "integrity": "sha1-zNE//3NJepOXTj6GMnv9h71ujis="
+      "version": "0.26.1",
+      "resolved": "https://registry.npmjs.org/ramda/-/ramda-0.26.1.tgz",
+      "integrity": "sha512-hLWjpy7EnsDBb0p+Z3B7rPi3GDeRG5ZtiI33kJhTt+ORCd38AbAIjB/9zRIUoeTbE/AVX5ZkU7m6bznsvrf8eQ=="
     },
     "randomatic": {
       "version": "3.1.0",
diff --git a/dash-renderer/package.json b/dash-renderer/package.json
index 7c8d8ef8..feca6869 100644
--- a/dash-renderer/package.json
+++ b/dash-renderer/package.json
@@ -37,7 +37,7 @@
     "prop-types": "^15.6.2",
     "query-string": "^4.3.2",
     "radium": "^0.22.1",
-    "ramda": "^0.23.0",
+    "ramda": "^0.26.1",
     "react": "^16.2.0",
     "react-dom": "^16.2.0",
     "react-redux": "^4.4.5",
diff --git a/dash-renderer/src/actions/index.js b/dash-renderer/src/actions/index.js
index b70ffa26..c01a81cb 100644
--- a/dash-renderer/src/actions/index.js
+++ b/dash-renderer/src/actions/index.js
@@ -413,12 +413,12 @@ function updateOutput(
             return;
         }
         const updatedQueue = adjust(
+            thisRequestIndex,
             merge(__, {
                 status: status,
                 responseTime: Date.now(),
                 rejected,
             }),
-            thisRequestIndex,
             postRequestQueue
         );
         // We don't need to store any requests before this one
diff --git a/dash-renderer/src/reducers/paths.js b/dash-renderer/src/reducers/paths.js
index 360d24b1..7c0ef8a0 100644
--- a/dash-renderer/src/reducers/paths.js
+++ b/dash-renderer/src/reducers/paths.js
@@ -1,5 +1,15 @@
 import {crawlLayout, hasPropsId} from './utils';
-import R from 'ramda';
+import {
+    concat,
+    equals,
+    filter,
+    isEmpty,
+    isNil,
+    keys,
+    merge,
+    omit,
+    slice,
+} from 'ramda';
 import {getAction} from '../actions/constants';
 
 const initialPaths = null;
@@ -9,29 +19,29 @@ const paths = (state = initialPaths, action) => {
         case getAction('COMPUTE_PATHS'): {
             const {subTree, startingPath} = action.payload;
             let oldState = state;
-            if (R.isNil(state)) {
+            if (isNil(state)) {
                 oldState = {};
             }
             let newState;
 
             // if we're updating a subtree, clear out all of the existing items
-            if (!R.isEmpty(startingPath)) {
-                const removeKeys = R.filter(
+            if (!isEmpty(startingPath)) {
+                const removeKeys = filter(
                     k =>
-                        R.equals(
+                        equals(
                             startingPath,
-                            R.slice(0, startingPath.length, oldState[k])
+                            slice(0, startingPath.length, oldState[k])
                         ),
-                    R.keys(oldState)
+                    keys(oldState)
                 );
-                newState = R.omit(removeKeys, oldState);
+                newState = omit(removeKeys, oldState);
             } else {
-                newState = R.merge({}, oldState);
+                newState = merge({}, oldState);
             }
 
             crawlLayout(subTree, function assignPath(child, itempath) {
                 if (hasPropsId(child)) {
-                    newState[child.props.id] = R.concat(startingPath, itempath);
+                    newState[child.props.id] = concat(startingPath, itempath);
                 }
             });
 
diff --git a/dash-renderer/src/reducers/reducer.js b/dash-renderer/src/reducers/reducer.js
index f82564e8..242c3f2b 100644
--- a/dash-renderer/src/reducers/reducer.js
+++ b/dash-renderer/src/reducers/reducer.js
@@ -1,5 +1,5 @@
 'use strict';
-import R, {concat, lensPath, view} from 'ramda';
+import {concat, equals, filter, isEmpty, keys, lensPath, view} from 'ramda';
 import {combineReducers} from 'redux';
 import layout from './layout';
 import graphs from './dependencyGraph';
@@ -31,12 +31,12 @@ const reducer = combineReducers({
 function getInputHistoryState(itempath, props, state) {
     const {graphs, layout, paths} = state;
     const {InputGraph} = graphs;
-    const keyObj = R.filter(R.equals(itempath), paths);
+    const keyObj = filter(equals(itempath), paths);
     let historyEntry;
-    if (!R.isEmpty(keyObj)) {
-        const id = R.keys(keyObj)[0];
+    if (!isEmpty(keyObj)) {
+        const id = keys(keyObj)[0];
         historyEntry = {id, props: {}};
-        R.keys(props).forEach(propKey => {
+        keys(props).forEach(propKey => {
             const inputKey = `${id}.${propKey}`;
             if (
                 InputGraph.hasNode(inputKey) &&
@@ -58,7 +58,7 @@ function recordHistory(reducer) {
         if (action.type === 'ON_PROP_CHANGE') {
             const {itempath, props} = action.payload;
             const historyEntry = getInputHistoryState(itempath, props, state);
-            if (historyEntry && !R.isEmpty(historyEntry.props)) {
+            if (historyEntry && !isEmpty(historyEntry.props)) {
                 state.history.present = historyEntry;
             }
         }
@@ -79,7 +79,7 @@ function recordHistory(reducer) {
                 props,
                 nextState
             );
-            if (historyEntry && !R.isEmpty(historyEntry.props)) {
+            if (historyEntry && !isEmpty(historyEntry.props)) {
                 nextState.history = {
                     past: [...nextState.history.past, state.history.present],
                     present: historyEntry,
diff --git a/dash-renderer/src/reducers/utils.js b/dash-renderer/src/reducers/utils.js
index 8453d108..2dab3b73 100644
--- a/dash-renderer/src/reducers/utils.js
+++ b/dash-renderer/src/reducers/utils.js
@@ -1,22 +1,32 @@
-import R from 'ramda';
+import {
+    allPass,
+    append,
+    compose,
+    flip,
+    has,
+    is,
+    prop,
+    reduce,
+    type,
+} from 'ramda';
 
-const extend = R.reduce(R.flip(R.append));
+const extend = reduce(flip(append));
 
-const hasProps = R.allPass([R.is(Object), R.has('props')]);
+const hasProps = allPass([is(Object), has('props')]);
 
-export const hasPropsId = R.allPass([
+export const hasPropsId = allPass([
     hasProps,
-    R.compose(
-        R.has('id'),
-        R.prop('props')
+    compose(
+        has('id'),
+        prop('props')
     ),
 ]);
 
-export const hasPropsChildren = R.allPass([
+export const hasPropsChildren = allPass([
     hasProps,
-    R.compose(
-        R.has('children'),
-        R.prop('props')
+    compose(
+        has('children'),
+        prop('props')
     ),
 ]);
 
@@ -32,12 +42,12 @@ export const crawlLayout = (object, func, path = []) => {
         const newPath = extend(path, ['props', 'children']);
         if (Array.isArray(object.props.children)) {
             object.props.children.forEach((child, i) => {
-                crawlLayout(child, func, R.append(i, newPath));
+                crawlLayout(child, func, append(i, newPath));
             });
         } else {
             crawlLayout(object.props.children, func, newPath);
         }
-    } else if (R.is(Array, object)) {
+    } else if (is(Array, object)) {
         /*
          * Sometimes when we're updating a sub-tree
          * (like when we're responding to a callback)
@@ -47,15 +57,15 @@ export const crawlLayout = (object, func, path = []) => {
          */
 
         object.forEach((child, i) => {
-            crawlLayout(child, func, R.append(i, path));
+            crawlLayout(child, func, append(i, path));
         });
     }
 };
 
 export function hasId(child) {
     return (
-        R.type(child) === 'Object' &&
-        R.has('props', child) &&
-        R.has('id', child.props)
+        type(child) === 'Object' &&
+        has('props', child) &&
+        has('id', child.props)
     );
 }
