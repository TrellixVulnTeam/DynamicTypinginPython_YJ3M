commit 2ed3989256251114b23bf37c00ec2c60d2e76ff2
Author: alexcjohnson <alex@plot.ly>
Date:   Mon Jan 7 16:03:23 2019 -0500

    :hocho: Event

diff --git a/dash/dash.py b/dash/dash.py
index 21f5e710..0396910e 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -21,7 +21,7 @@ import flask
 from flask import Flask, Response
 from flask_compress import Compress
 
-from .dependencies import Event, Input, Output, State
+from .dependencies import Input, Output, State
 from .resources import Scripts, Css
 from .development.base_component import Component
 from . import exceptions
@@ -613,7 +613,6 @@ class Dash(object):
                 },
                 'inputs': v['inputs'],
                 'state': v['state'],
-                'events': v['events']
             } for k, v in self.callback_map.items()
         ])
 
@@ -624,7 +623,7 @@ class Dash(object):
             'Use `callback` instead. `callback` has a new syntax too, '
             'so make sure to call `help(app.callback)` to learn more.')
 
-    def _validate_callback(self, output, inputs, state, events):
+    def _validate_callback(self, output, inputs, state):
         # pylint: disable=too-many-branches
         layout = self._cached_layout or self._layout_value()
 
@@ -643,8 +642,7 @@ class Dash(object):
 
         for args, obj, name in [([output], Output, 'Output'),
                                 (inputs, Input, 'Input'),
-                                (state, State, 'State'),
-                                (events, Event, 'Event')]:
+                                (state, State, 'State')]:
 
             if not isinstance(args, list):
                 raise exceptions.IncorrectTypeException(
@@ -712,32 +710,20 @@ class Dash(object):
                             component.available_properties).replace(
                                 '    ', ''))
 
-                    if (hasattr(arg, 'component_event') and
-                            arg.component_event not in
-                            component.available_events):
+                    if (hasattr(arg, 'component_event')):
                         raise exceptions.NonExistentEventException('''
-                            Attempting to assign a callback with
-                            the event "{}" but the component
-                            "{}" doesn't have "{}" as an event.\n
-                            Here is a list of the available events in "{}":
-                            {}
-                        '''.format(
-                            arg.component_event,
-                            arg.component_id,
-                            arg.component_event,
-                            arg.component_id,
-                            component.available_events).replace('    ', ''))
+                            Events have been removed.
+                            Use the associated property instead.
+                        ''')
 
-        if state and not events and not inputs:
-            raise exceptions.MissingEventsException('''
+        if state and not inputs:
+            raise exceptions.MissingInputsException('''
                 This callback has {} `State` {}
-                but no `Input` elements or `Event` elements.\n
-                Without `Input` or `Event` elements, this callback
+                but no `Input` elements.\n
+                Without `Input` elements, this callback
                 will never get called.\n
                 (Subscribing to input components will cause the
-                callback to be called whenever their values
-                change and subscribing to an event will cause the
-                callback to be called whenever the event is fired.)
+                callback to be called whenever their values change.)
             '''.format(
                 len(state),
                 'elements' if len(state) > 1 else 'element'
@@ -879,8 +865,8 @@ class Dash(object):
     # TODO - Check this map for recursive or other ill-defined non-tree
     # relationships
     # pylint: disable=dangerous-default-value
-    def callback(self, output, inputs=[], state=[], events=[]):
-        self._validate_callback(output, inputs, state, events)
+    def callback(self, output, inputs=[], state=[]):
+        self._validate_callback(output, inputs, state)
 
         callback_id = '{}.{}'.format(
             output.component_id, output.component_property
@@ -893,10 +879,6 @@ class Dash(object):
             'state': [
                 {'id': c.component_id, 'property': c.component_property}
                 for c in state
-            ],
-            'events': [
-                {'id': c.component_id, 'event': c.component_event}
-                for c in events
             ]
         }
 
diff --git a/dash/dependencies.py b/dash/dependencies.py
index 0421860c..f81007ad 100644
--- a/dash/dependencies.py
+++ b/dash/dependencies.py
@@ -17,10 +17,3 @@ class State:
     def __init__(self, component_id, component_property):
         self.component_id = component_id
         self.component_property = component_property
-
-
-# pylint: disable=old-style-class, too-few-public-methods
-class Event:
-    def __init__(self, component_id, component_event):
-        self.component_id = component_id
-        self.component_event = component_event
diff --git a/dash/development/_py_components_generation.py b/dash/development/_py_components_generation.py
index ba58a408..58c821ed 100644
--- a/dash/development/_py_components_generation.py
+++ b/dash/development/_py_components_generation.py
@@ -27,8 +27,7 @@ def generate_class_string(typename, props, description, namespace):
     string
 
     """
-    # TODO _prop_names, _type, _namespace, available_events,
-    # and available_properties
+    # TODO _prop_names, _type, _namespace, and available_properties
     # can be modified by a Dash JS developer via setattr
     # TODO - Tab out the repr for the repr of these components to make it
     # look more like a hierarchical tree
@@ -52,7 +51,6 @@ def generate_class_string(typename, props, description, namespace):
         self._namespace = '{namespace}'
         self._valid_wildcard_attributes =\
             {list_of_valid_wildcard_attr_prefixes}
-        self.available_events = {events}
         self.available_properties = {list_of_valid_keys}
         self.available_wildcard_properties =\
             {list_of_valid_wildcard_attr_prefixes}
@@ -101,11 +99,11 @@ def generate_class_string(typename, props, description, namespace):
     docstring = create_docstring(
         component_name=typename,
         props=filtered_props,
-        events=parse_events(props),
         description=description).replace('\r\n', '\n')
 
+    prohibit_events(props)
+
     # pylint: disable=unused-variable
-    events = '[' + ', '.join(parse_events(props)) + ']'
     prop_keys = list(props.keys())
     if 'children' in props:
         prop_keys.remove('children')
@@ -122,7 +120,7 @@ def generate_class_string(typename, props, description, namespace):
          for p in prop_keys
          if not p.endswith("-*") and
          p not in python_keywords and
-         p not in ['dashEvents', 'fireEvent', 'setProps']] + ['**kwargs']
+         p != 'setProps'] + ['**kwargs']
     )
 
     required_args = required_props(props)
@@ -233,7 +231,7 @@ def required_props(props):
             if prop['required']]
 
 
-def create_docstring(component_name, props, events, description):
+def create_docstring(component_name, props, description):
     """
     Create the Dash component docstring
 
@@ -243,8 +241,6 @@ def create_docstring(component_name, props, events, description):
         Component name
     props: dict
         Dictionary with {propName: propMetadata} structure
-    events: list
-        List of Dash events
     description: str
         Component description
 
@@ -259,9 +255,7 @@ def create_docstring(component_name, props, events, description):
     return (
         """A {name} component.\n{description}
 
-Keyword arguments:\n{args}
-
-Available events: {events}"""
+Keyword arguments:\n{args}"""
     ).format(
         name=component_name,
         description=description,
@@ -274,30 +268,24 @@ Available events: {events}"""
                 description=prop['description'],
                 indent_num=0,
                 is_flow_type='flowType' in prop and 'type' not in prop)
-            for p, prop in list(filter_props(props).items())),
-        events=', '.join(events))
+            for p, prop in list(filter_props(props).items())))
 
 
-def parse_events(props):
+def prohibit_events(props):
     """
-    Pull out the dashEvents from the Component props
+    Events have been removed. Raise an error if we see dashEvents or fireEvents
 
     Parameters
     ----------
     props: dict
         Dictionary with {propName: propMetadata} structure
 
-    Returns
+    Raises
     -------
-    list
-        List of Dash event strings
+    ?
     """
-    if 'dashEvents' in props and props['dashEvents']['type']['name'] == 'enum':
-        events = [v['value'] for v in props['dashEvents']['type']['value']]
-    else:
-        events = []
-
-    return events
+    if 'dashEvents' in props or 'fireEvents' in props:
+        raise AttributeError('Events are no longer supported by dash')
 
 
 def parse_wildcards(props):
@@ -349,7 +337,6 @@ def filter_props(props):
     Filter props from the Component arguments to exclude:
         - Those without a "type" or a "flowType" field
         - Those with arg.type.name in {'func', 'symbol', 'instanceOf'}
-        - dashEvents as a name
 
     Parameters
     ----------
@@ -415,10 +402,6 @@ def filter_props(props):
         else:
             raise ValueError
 
-        # dashEvents are a special oneOf property that is used for subscribing
-        # to events but it's never set as a property
-        if arg_name in ['dashEvents']:
-            filtered_props.pop(arg_name)
     return filtered_props
 
 
diff --git a/dash/exceptions.py b/dash/exceptions.py
index 13b4feb0..8ad30d52 100644
--- a/dash/exceptions.py
+++ b/dash/exceptions.py
@@ -30,7 +30,7 @@ class IncorrectTypeException(CallbackException):
     pass
 
 
-class MissingEventsException(CallbackException):
+class MissingInputsException(CallbackException):
     pass
 
 
diff --git a/dash/extract-meta.js b/dash/extract-meta.js
index 743d5359..0040b479 100644
--- a/dash/extract-meta.js
+++ b/dash/extract-meta.js
@@ -8,7 +8,7 @@ const componentPaths = process.argv.slice(3);
 const ignorePattern = new RegExp(process.argv[2]);
 
 const excludedDocProps = [
-    'setProps', 'id', 'className', 'style', 'dashEvents', 'fireEvent'
+    'setProps', 'id', 'className', 'style'
 ];
 
 if (!componentPaths.length) {
diff --git a/tests/development/TestReactComponent.react.js b/tests/development/TestReactComponent.react.js
index 5c45fed8..cc42763a 100644
--- a/tests/development/TestReactComponent.react.js
+++ b/tests/development/TestReactComponent.react.js
@@ -91,19 +91,9 @@ ReactComponent.propTypes = {
         }
     }),
 
-    // special dash events
-
     children: React.PropTypes.node,
 
     id: React.PropTypes.string,
-
-
-    // dashEvents is a special prop that is used to events validation
-    dashEvents: React.PropTypes.oneOf([
-        'restyle',
-        'relayout',
-        'click'
-    ])
 };
 
 ReactComponent.defaultProps = {
diff --git a/tests/development/metadata_test.json b/tests/development/metadata_test.json
index 1da85ba8..faa4bc73 100644
--- a/tests/development/metadata_test.json
+++ b/tests/development/metadata_test.json
@@ -234,27 +234,6 @@
       },
       "required": false,
       "description": ""
-    },
-    "dashEvents": {
-      "type": {
-        "name": "enum",
-        "value": [
-          {
-            "value": "'restyle'",
-            "computed": false
-          },
-          {
-            "value": "'relayout'",
-            "computed": false
-          },
-          {
-            "value": "'click'",
-            "computed": false
-          }
-        ]
-      },
-      "required": false,
-      "description": ""
     }
   }
 }
diff --git a/tests/development/metadata_test.py b/tests/development/metadata_test.py
index 1074ff0e..1deb97ef 100644
--- a/tests/development/metadata_test.py
+++ b/tests/development/metadata_test.py
@@ -22,11 +22,11 @@ Keyword arguments:
 - optionalArrayOf (list; optional)
 - optionalObjectOf (dict with strings as keys and values of type number; optional)
 - optionalObjectWithShapeAndNestedDescription (optional): . optionalObjectWithShapeAndNestedDescription has the following type: dict containing keys 'color', 'fontSize', 'figure'.
-Those keys have the following types: 
+Those keys have the following types:
   - color (string; optional)
   - fontSize (number; optional)
   - figure (optional): Figure is a plotly graph object. figure has the following type: dict containing keys 'data', 'layout'.
-Those keys have the following types: 
+Those keys have the following types:
   - data (list; optional): data is a collection of traces
   - layout (dict; optional): layout describes the rest of the figure
 - optionalAny (boolean | number | string | dict | list; optional)
@@ -35,16 +35,13 @@ Those keys have the following types:
 - data-* (string; optional)
 - aria-* (string; optional)
 - in (string; optional)
-- id (string; optional)
-
-Available events: 'restyle', 'relayout', 'click'"""
+- id (string; optional)"""
     @_explicitize_args
     def __init__(self, children=None, optionalArray=Component.UNDEFINED, optionalBool=Component.UNDEFINED, optionalFunc=Component.UNDEFINED, optionalNumber=Component.UNDEFINED, optionalObject=Component.UNDEFINED, optionalString=Component.UNDEFINED, optionalSymbol=Component.UNDEFINED, optionalNode=Component.UNDEFINED, optionalElement=Component.UNDEFINED, optionalMessage=Component.UNDEFINED, optionalEnum=Component.UNDEFINED, optionalUnion=Component.UNDEFINED, optionalArrayOf=Component.UNDEFINED, optionalObjectOf=Component.UNDEFINED, optionalObjectWithShapeAndNestedDescription=Component.UNDEFINED, optionalAny=Component.UNDEFINED, customProp=Component.UNDEFINED, customArrayProp=Component.UNDEFINED, id=Component.UNDEFINED, **kwargs):
         self._prop_names = ['children', 'optionalArray', 'optionalBool', 'optionalNumber', 'optionalObject', 'optionalString', 'optionalNode', 'optionalElement', 'optionalEnum', 'optionalUnion', 'optionalArrayOf', 'optionalObjectOf', 'optionalObjectWithShapeAndNestedDescription', 'optionalAny', 'customProp', 'customArrayProp', 'data-*', 'aria-*', 'in', 'id']
         self._type = 'Table'
         self._namespace = 'TableComponents'
         self._valid_wildcard_attributes =            ['data-', 'aria-']
-        self.available_events = ['restyle', 'relayout', 'click']
         self.available_properties = ['children', 'optionalArray', 'optionalBool', 'optionalNumber', 'optionalObject', 'optionalString', 'optionalNode', 'optionalElement', 'optionalEnum', 'optionalUnion', 'optionalArrayOf', 'optionalObjectOf', 'optionalObjectWithShapeAndNestedDescription', 'optionalAny', 'customProp', 'customArrayProp', 'data-*', 'aria-*', 'in', 'id']
         self.available_wildcard_properties =            ['data-', 'aria-']
 
diff --git a/tests/development/test_base_component.py b/tests/development/test_base_component.py
index 9e725f59..86e288f8 100644
--- a/tests/development/test_base_component.py
+++ b/tests/development/test_base_component.py
@@ -11,7 +11,7 @@ from dash.development.base_component import (
     Component,
     _explicitize_args)
 from dash.development._py_components_generation import generate_class_string, generate_class_file, generate_class, \
-    create_docstring, parse_events, js_to_py_type
+    create_docstring, prohibit_events, js_to_py_type
 
 Component._prop_names = ('id', 'a', 'children', 'style', )
 Component._type = 'TestComponent'
@@ -687,8 +687,8 @@ class TestGenerateClass(unittest.TestCase):
 
     def test_events(self):
         self.assertEqual(
-            self.ComponentClass().available_events,
-            ['restyle', 'relayout', 'click']
+            hasattr(self.ComponentClass(), 'available_events'),
+            False
         )
 
     # This one is kind of pointless now
@@ -815,18 +815,16 @@ class TestMetaDataConversions(unittest.TestCase):
 
             ['in', 'string'],
 
-            ['id', 'string'],
-
-            ['dashEvents', "a value equal to: 'restyle', 'relayout', 'click'"]
+            ['id', 'string']
         ])
 
     def test_docstring(self):
         docstring = create_docstring(
             'Table',
             self.data['props'],
-            parse_events(self.data['props']),
             self.data['description'],
         )
+        prohibit_events(self.data['props']),
         assert_docstring(self.assertEqual, docstring)
 
     def test_docgen_to_python_args(self):
@@ -894,8 +892,6 @@ def assert_docstring(assertEqual, docstring):
             '- aria-* (string; optional)',
             '- in (string; optional)',
             '- id (string; optional)',
-            '',
-            "Available events: 'restyle', 'relayout', 'click'",
             '        '
             ])[i]
                    )
@@ -968,9 +964,9 @@ class TestFlowMetaDataConversions(unittest.TestCase):
         docstring = create_docstring(
             'Flow_component',
             self.data['props'],
-            parse_events(self.data['props']),
             self.data['description'],
         )
+        prohibit_events(self.data['props']),
         assert_flow_docstring(self.assertEqual, docstring)
 
     def test_docgen_to_python_args(self):
@@ -1041,7 +1037,5 @@ def assert_flow_docstring(assertEqual, docstring):
             "    - style (dict; optional)",
             "    - value (bool | number | str | dict | list; required)",
             "  - value (bool | number | str | dict | list; required)",
-            "",
-            "Available events: "
         ])[i]
                    )
diff --git a/tests/test_react.py b/tests/test_react.py
index 28cc3e9d..c66d8ebb 100644
--- a/tests/test_react.py
+++ b/tests/test_react.py
@@ -7,7 +7,7 @@ import dash_renderer
 import dash_core_components as dcc
 import dash
 
-from dash.dependencies import Event, Input, Output, State
+from dash.dependencies import Input, Output, State
 from dash import exceptions
 
 
@@ -73,23 +73,20 @@ class IntegrationTest(unittest.TestCase):
         self.assertEqual(
             json.loads(response.data), {
                 'header': {
-                    'state': [{'id': 'id1'}],
-                    'events': [{'id': 'id1'}]
+                    'state': [{'id': 'id1'}]
                 }
             }
         )
 
         self.app.callback(
             'header',
-            state=[{'id': 'id1'}],
-            events=[{'id': 'id1'}])
+            state=[{'id': 'id1'}])
         response = self.client.get('/dependencies')
         self.assertEqual(response.status_code, 200)
         self.assertEqual(
             json.loads(response.data), {
                 'header': {
-                    'state': [{'id': 'id1'}],
-                    'events': [{'id': 'id1'}]
+                    'state': [{'id': 'id1'}]
                 }
             }
         )
@@ -103,18 +100,13 @@ class IntegrationTest(unittest.TestCase):
             # Nested state
             {'id': 'id1', 'prop': ['style', 'color']}
         ]
-        events = [
-            {'id': 'id1', 'event': 'click'},
-            {'id': 'id1', 'event': 'submit'}
-        ]
-        self.app.callback('header', state=state, events=events)
+        self.app.callback('header', state=state)
         response = self.client.get('/dependencies')
         self.assertEqual(response.status_code, 200)
         self.assertEqual(
             json.loads(response.data), {
                 'header': {
-                    'state': state,
-                    'events': events
+                    'state': state
                 }
             }
         )
@@ -339,7 +331,6 @@ class TestCallbacks(unittest.TestCase):
     def test_callback_registry(self):
         app = dash.Dash('')
         input = dcc.Input(id='input')
-        input._events = ['blur', 'change']
 
         app.layout = Div([
             input,
@@ -364,8 +355,7 @@ class TestCallbacks(unittest.TestCase):
         app.callback(
             Output('output-3', 'children'),
             [Input('input', 'value')],
-            state=[State('input', 'value')],
-            events=[Event('input', 'blur')],
+            state=[State('input', 'value')]
         )
 
     def test_no_layout_exception(self):
@@ -416,6 +406,7 @@ class TestCallbacks(unittest.TestCase):
         )
 
     def test_exception_event_not_in_component(self):
+        # no events anymore, period!
         app = dash.Dash('')
         app.layout = Div([
             Div(id='button'),
@@ -426,27 +417,12 @@ class TestCallbacks(unittest.TestCase):
 
         for id in ['output', 'body']:
             self.assertRaises(
-                exceptions.NonExistentEventException,
+                TypeError,
                 app.callback,
                 Output(id, 'children'),
-                events=[Event(id, 'style')]
-            )
-            app.callback(
-                Output(id, 'children'),
-                events=[Event(id, 'click')]
+                events=[]
             )
 
-        self.assertRaises(
-            exceptions.NonExistentEventException,
-            app.callback,
-            Output('output', 'children'),
-            events=[Event('graph', 'zoom')]
-        )
-        app.callback(
-            Output('graph-output', 'children'),
-            events=[Event('graph', 'click')]
-        )
-
     def test_exception_component_is_not_right_type(self):
         app = dash.Dash('')
         app.layout = Div([
@@ -458,7 +434,6 @@ class TestCallbacks(unittest.TestCase):
             ['asdf', ['asdf'], [], []],
             [Output('output', 'children'), Input('input', 'value'), [], []],
             [Output('output', 'children'), [], State('input', 'value'), []],
-            [Output('output', 'children'), [], [], Event('input', 'click')],
         ]
         for args in test_args:
             self.assertRaises(
@@ -483,13 +458,13 @@ class TestCallbacks(unittest.TestCase):
         app.callback(Output('id-not-there', 'children'),
                      [Input('input', 'value')])
 
-    def test_missing_input_and_events(self):
+    def test_missing_inputs(self):
         app = dash.Dash('')
         app.layout = Div([
             dcc.Input(id='input')
         ], id='body')
         self.assertRaises(
-            exceptions.MissingEventsException,
+            exceptions.MissingInputsException,
             app.callback,
             Output('body', 'children'),
             [],
