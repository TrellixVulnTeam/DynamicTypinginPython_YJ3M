commit c2267250a9a6a55890639c21b336fdf8c5e66a08
Author: byron <byron@plot.ly>
Date:   Fri Aug 16 23:31:18 2019 -0400

    :lipstick: fix lint and black

diff --git a/dash/_utils.py b/dash/_utils.py
index 684d736f..4ad819bb 100644
--- a/dash/_utils.py
+++ b/dash/_utils.py
@@ -16,40 +16,41 @@ logger = logging.getLogger()
 def interpolate_str(template, **data):
     s = template
     for k, v in data.items():
-        key = '{%' + k + '%}'
+        key = "{%" + k + "%}"
         s = s.replace(key, v)
     return s
 
 
-def format_tag(tag_name, attributes, inner='', closed=False, opened=False):
-    tag = '<{tag} {attributes}'
+def format_tag(tag_name, attributes, inner="", closed=False, opened=False):
+    tag = "<{tag} {attributes}"
     if closed:
-        tag += '/>'
+        tag += "/>"
     elif opened:
-        tag += '>'
+        tag += ">"
     else:
-        tag += '>' + inner + '</{tag}>'
+        tag += ">" + inner + "</{tag}>"
     return tag.format(
         tag=tag_name,
-        attributes=' '.join([
-            '{}="{}"'.format(k, v) for k, v in attributes.items()]))
+        attributes=" ".join(
+            ['{}="{}"'.format(k, v) for k, v in attributes.items()]
+        ),
+    )
 
 
 def generate_hash():
-    return str(uuid.uuid4().hex).strip('-')
+    return str(uuid.uuid4().hex).strip("-")
 
 
-def get_asset_path(
-        requests_pathname,
-        asset_path,
-        asset_url_path):
+def get_asset_path(requests_pathname, asset_path, asset_url_path):
 
-    return '/'.join([
-        # Only take the first part of the pathname
-        requests_pathname.rstrip('/'),
-        asset_url_path,
-        asset_path
-    ])
+    return "/".join(
+        [
+            # Only take the first part of the pathname
+            requests_pathname.rstrip("/"),
+            asset_url_path,
+            asset_path,
+        ]
+    )
 
 
 # pylint: disable=no-member
@@ -90,19 +91,19 @@ class AttributeDict(dict):
         # but get out of the except block so it doesn't look like a nested err
         raise AttributeError(key)
 
-    def set_read_only(self, names, msg='Attribute is read-only'):
-        object.__setattr__(self, '_read_only', names)
-        object.__setattr__(self, '_read_only_msg', msg)
+    def set_read_only(self, names, msg="Attribute is read-only"):
+        object.__setattr__(self, "_read_only", names)
+        object.__setattr__(self, "_read_only_msg", msg)
 
-    def finalize(self, msg='Object is final: No new keys may be added.'):
+    def finalize(self, msg="Object is final: No new keys may be added."):
         """Prevent any new keys being set"""
-        object.__setattr__(self, '_final', msg)
+        object.__setattr__(self, "_final", msg)
 
     def __setitem__(self, key, val):
-        if key in self.__dict__.get('_read_only', []):
+        if key in self.__dict__.get("_read_only", []):
             raise AttributeError(self._read_only_msg, key)
 
-        final_msg = self.__dict__.get('_final')
+        final_msg = self.__dict__.get("_final")
         if final_msg and key not in self:
             raise AttributeError(final_msg, key)
 
@@ -118,21 +119,18 @@ class AttributeDict(dict):
 
 def create_callback_id(output):
     if isinstance(output, (list, tuple)):
-        return '..{}..'.format('...'.join(
-            '{}.{}'.format(x.component_id, x.component_property)
-            for x in output
-        ))
+        return "..{}..".format(
+            "...".join(
+                "{}.{}".format(x.component_id, x.component_property)
+                for x in output
+            )
+        )
 
-    return '{}.{}'.format(
-        output.component_id, output.component_property
-    )
+    return "{}.{}".format(output.component_id, output.component_property)
 
 
-def run_command_with_process(cmd, logger=None):
-    logger = logger if logger else logging.getLogger(__name__)
-    proc = subprocess.Popen(
-        shlex.split(cmd, posix=sys.platform != 'win32')
-    )
+def run_command_with_process(cmd):
+    proc = subprocess.Popen(shlex.split(cmd, posix=sys.platform != "win32"))
     proc.wait()
     if proc.poll() is None:
         logger.warning(u"ðŸš¨ trying to terminate subprocess in safe way")
