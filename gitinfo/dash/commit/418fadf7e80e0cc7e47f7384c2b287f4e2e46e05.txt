commit 418fadf7e80e0cc7e47f7384c2b287f4e2e46e05
Author: byron <byron@plot.ly>
Date:   Fri Nov 1 12:12:51 2019 -0400

    :mag: tune snapshots API

diff --git a/dash/testing/browser.py b/dash/testing/browser.py
index 73772ab1..9664c5ee 100644
--- a/dash/testing/browser.py
+++ b/dash/testing/browser.py
@@ -26,7 +26,11 @@ from dash.testing.wait import (
     until,
 )
 from dash.testing.dash_page import DashPageMixin
-from dash.testing.errors import DashAppLoadingError, BrowserError
+from dash.testing.errors import (
+    DashAppLoadingError,
+    BrowserError,
+    TestingTimeoutError,
+)
 from dash.testing.consts import SELENIUM_GRID_DEFAULT
 
 
@@ -108,8 +112,23 @@ class Browser(DashPageMixin):
             name, sys.version_info.major, sys.version_info.minor
         )
         logger.info("taking snapshot name => %s", snapshot_name)
-        if wait_for_callbacks:
-            until(self._wait_for_callbacks, timeout=10)
+        try:
+            if wait_for_callbacks:
+                until(
+                    self._wait_for_callbacks,
+                    timeout=40,
+                    poll=0.5,
+                    sleep_first=True,
+                )
+        except TestingTimeoutError:
+            logger.error(
+                "wait_for_callbacks failed => status of invalid rqs %s",
+                list(
+                    _ for _ in self.redux_state_rqs if not _.get("responseTime")
+                ),
+            )
+            logger.debug("full content of the rqs => %s", self.redux_state_rqs)
+
         self.percy_runner.snapshot(name=snapshot_name)
 
     def take_snapshot(self, name):
diff --git a/dash/testing/dash_page.py b/dash/testing/dash_page.py
index c7db11b6..a02dd274 100644
--- a/dash/testing/dash_page.py
+++ b/dash/testing/dash_page.py
@@ -1,5 +1,8 @@
+import logging
 from bs4 import BeautifulSoup
 
+logger = logging.getLogger(__name__)
+
 
 class DashPageMixin(object):
     def _get_dash_dom_by_attribute(self, attr):
@@ -41,9 +44,13 @@ class DashPageMixin(object):
         return self.driver.execute_script("return window.store")
 
     def _wait_for_callbacks(self):
-        if self.window_store:
-            return self.redux_state_rqs and all(
-                (_.get("responseTime") for _ in self.redux_state_rqs)
+        if self.window_store and self.redux_state_rqs:
+            return all(
+                (
+                    _.get("responseTime")
+                    for _ in self.redux_state_rqs
+                    if _.get("controllerId")
+                )
             )
         return True
 
diff --git a/dash/testing/wait.py b/dash/testing/wait.py
index 3f269d53..c093d639 100644
--- a/dash/testing/wait.py
+++ b/dash/testing/wait.py
@@ -13,9 +13,11 @@ def until(
     wait_cond,
     timeout,
     poll=0.1,
+    sleep_first=False,
     msg="expected condition not met within timeout",
 ):  # noqa: C0330
-    res = wait_cond()
+
+    res = False if sleep_first else wait_cond()
     logger.debug(
         "start wait.until with method, timeout, poll => %s %s %s",
         wait_cond,
@@ -26,7 +28,8 @@ def until(
     while not res:
         if time.time() > end_time:
             raise TestingTimeoutError(msg)
-        time.sleep(poll)
+        time.sleep(poll * 2 if sleep_first else poll)
+        sleep_first = False
         res = wait_cond()
         logger.debug("poll => %s", time.time())
 
@@ -34,9 +37,13 @@ def until(
 
 
 def until_not(
-    wait_cond, timeout, poll=0.1, msg="expected condition met within timeout"
+    wait_cond,
+    timeout,
+    poll=0.1,
+    sleep_first=False,
+    msg="expected condition met within timeout",
 ):  # noqa: C0330
-    res = wait_cond()
+    res = False if sleep_first else wait_cond()
     logger.debug(
         "start wait.until_not method, timeout, poll => %s %s %s",
         wait_cond,
@@ -47,7 +54,8 @@ def until_not(
     while res:
         if time.time() > end_time:
             raise TestingTimeoutError(msg)
-        time.sleep(poll)
+        time.sleep(poll * 2 if sleep_first else poll)
+        sleep_first = False
         res = wait_cond()
         logger.debug("poll => %s", time.time())
 
