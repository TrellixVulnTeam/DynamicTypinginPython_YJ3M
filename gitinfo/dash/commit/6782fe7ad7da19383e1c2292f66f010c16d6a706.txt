commit 6782fe7ad7da19383e1c2292f66f010c16d6a706
Author: byron <byron@plot.ly>
Date:   Thu Jun 6 22:43:45 2019 -0400

    :hocho: move out

diff --git a/tests/integration/IntegrationTests.py b/tests/integration/IntegrationTests.py
index a92bc927..0db03a6b 100644
--- a/tests/integration/IntegrationTests.py
+++ b/tests/integration/IntegrationTests.py
@@ -37,7 +37,7 @@ class IntegrationTests(unittest.TestCase):
             options.binary_location = os.environ['DASH_TEST_CHROMEPATH']
 
         cls.driver = webdriver.Chrome(
-            chrome_options=options, desired_capabilities=capabilities,
+            options=options, desired_capabilities=capabilities,
             service_args=["--verbose", "--log-path=chrome.log"]
             )
 
diff --git a/tests/integration/test_render.py b/tests/integration/test_render.py
index 618ef97c..88775a9e 100644
--- a/tests/integration/test_render.py
+++ b/tests/integration/test_render.py
@@ -53,17 +53,6 @@ class Tests(IntegrationTests):
             )
         )
 
-    def clear_input(self, input_element):
-        (
-            ActionChains(self.driver)
-            .click(input_element)
-            .send_keys(Keys.HOME)
-            .key_down(Keys.SHIFT)
-            .send_keys(Keys.END)
-            .key_up(Keys.SHIFT)
-            .send_keys(Keys.DELETE)
-        ).perform()
-
     def request_queue_assertions(
             self, check_rejected=True, expected_length=None):
         request_queue = self.driver.execute_script(
@@ -180,153 +169,6 @@ class Tests(IntegrationTests):
 
         self.assertTrue(self.is_console_clean())
 
-    def test_simple_callback(self):
-        app = Dash(__name__)
-        app.layout = html.Div([
-            dcc.Input(
-                id='input',
-                value='initial value'
-            ),
-            html.Div(
-                html.Div([
-                    1.5,
-                    None,
-                    'string',
-                    html.Div(id='output-1')
-                ])
-            )
-        ])
-
-        call_count = Value('i', 0)
-
-        @app.callback(Output('output-1', 'children'), [Input('input', 'value')])
-        def update_output(value):
-            call_count.value = call_count.value + 1
-            return value
-
-        self.startServer(app)
-
-        self.wait_for_text_to_equal('#output-1', 'initial value')
-        self.percy_snapshot(name='simple-callback-1')
-
-        input1 = self.wait_for_element_by_css_selector('#input')
-        self.clear_input(input1)
-
-        input1.send_keys('hello world')
-
-        self.wait_for_text_to_equal('#output-1', 'hello world')
-        self.percy_snapshot(name='simple-callback-2')
-
-        self.assertEqual(
-            call_count.value,
-            # an initial call to retrieve the first value + clear is now one
-            2 +
-            # one for each hello world character
-            len('hello world')
-        )
-
-        self.request_queue_assertions(
-            expected_length=1,
-            check_rejected=False)
-
-        self.assertTrue(self.is_console_clean())
-
-    def test_callbacks_generating_children(self):
-        ''' Modify the DOM tree by adding new
-        components in the callbacks
-        '''
-
-        app = Dash(__name__)
-        app.layout = html.Div([
-            dcc.Input(
-                id='input',
-                value='initial value'
-            ),
-            html.Div(id='output')
-        ])
-
-        @app.callback(Output('output', 'children'), [Input('input', 'value')])
-        def pad_output(input):
-            return html.Div([
-                dcc.Input(
-                    id='sub-input-1',
-                    value='sub input initial value'
-                ),
-                html.Div(id='sub-output-1')
-            ])
-
-        call_count = Value('i', 0)
-
-        # these components don't exist in the initial render
-        app.config.supress_callback_exceptions = True
-
-        @app.callback(
-            Output('sub-output-1', 'children'),
-            [Input('sub-input-1', 'value')]
-        )
-        def update_input(value):
-            call_count.value = call_count.value + 1
-            return value
-
-        self.startServer(app)
-
-        wait_for(lambda: call_count.value == 1)
-
-        pad_input, pad_div = BeautifulSoup(
-            self.driver.find_element_by_css_selector(
-                '#react-entry-point').get_attribute('innerHTML'),
-            'lxml').select_one('#output > div').contents
-
-        self.assertEqual(pad_input.attrs['value'], 'sub input initial value')
-        self.assertEqual(pad_input.attrs['id'], 'sub-input-1')
-        self.assertEqual(pad_input.name, 'input')
-
-        self.assertTrue(
-            pad_div.text == pad_input.attrs['value'] and
-            pad_div.get('id') == 'sub-output-1',
-            "the sub-output-1 content reflects to sub-input-1 value"
-        )
-
-        self.percy_snapshot(name='callback-generating-function-1')
-
-        # the paths should include these new output IDs
-        self.assertEqual(
-            self.driver.execute_script('return window.store.getState().paths'),
-            {
-                'input': [
-                    'props', 'children', 0
-                ],
-                'output': ['props', 'children', 1],
-                'sub-input-1': [
-                    'props', 'children', 1,
-                    'props', 'children',
-                    'props', 'children', 0
-                ],
-                'sub-output-1': [
-                    'props', 'children', 1,
-                    'props', 'children',
-                    'props', 'children', 1
-                ]
-            }
-        )
-
-        # editing the input should modify the sub output
-        sub_input = self.driver.find_element_by_id('sub-input-1')
-
-        sub_input.send_keys('deadbeef')
-        self.wait_for_text_to_equal(
-            '#sub-output-1',
-            pad_input.attrs['value'] + 'deadbeef')
-
-        self.assertEqual(
-            call_count.value, len('deadbeef') + 1,
-            "the total updates is initial one + the text input changes")
-
-        self.request_queue_assertions(call_count.value + 1)
-        self.percy_snapshot(name='callback-generating-function-2')
-
-        self.assertTrue(self.is_console_clean())
-
     def test_radio_buttons_callbacks_generating_children(self):
         self.maxDiff = 100 * 1000
         app = Dash(__name__)
@@ -953,43 +795,6 @@ class Tests(IntegrationTests):
 
         self.assertEqual(call_count.value, 1)
 
-    def test_callbacks_called_multiple_times_and_out_of_order(self):
-        app = Dash(__name__)
-        app.layout = html.Div([
-            html.Button(id='input', n_clicks=0),
-            html.Div(id='output')
-        ])
-
-        call_count = Value('i', 0)
-
-        @app.callback(
-            Output('output', 'children'),
-            [Input('input', 'n_clicks')])
-        def update_output(n_clicks):
-            call_count.value = call_count.value + 1
-            if n_clicks == 1:
-                time.sleep(4)
-            return n_clicks
-
-        self.startServer(app)
-        button = self.wait_for_element_by_css_selector('#input')
-        button.click()
-        button.click()
-        time.sleep(8)
-        self.percy_snapshot(
-            name='test_callbacks_called_multiple_times_and_out_of_order'
-        )
-        self.assertEqual(call_count.value, 3)
-        self.assertEqual(
-            self.driver.find_element_by_id('output').text,
-            '2'
-        )
-        request_queue = self.driver.execute_script(
-            'return window.store.getState().requestQueue'
-        )
-        self.assertFalse(request_queue[0]['rejected'])
-        self.assertEqual(len(request_queue), 1)
-
     def test_callbacks_called_multiple_times_and_out_of_order_multi_output(self):
         app = Dash(__name__)
         app.layout = html.Div([
