commit 4a858026e635c8f087837b4dca75d0d8188d40b0
Author: alexcjohnson <alex@plot.ly>
Date:   Thu Jul 18 12:01:20 2019 -0400

    fix and test export string generation

diff --git a/dash/development/_r_components_generation.py b/dash/development/_r_components_generation.py
index 3a4590d0..76ada057 100644
--- a/dash/development/_r_components_generation.py
+++ b/dash/development/_r_components_generation.py
@@ -672,8 +672,13 @@ def make_namespace_exports(components, prefix):
 
     for rfile in rfilelist:
         with open(rfile, "r") as script:
+            s = script.read()
+
+            # remove comments
+            s = re.sub('#.*$', '', s, flags=re.M)
+
             # put the whole file on one line
-            s = script.read().replace("\n", " ").replace("\r", " ")
+            s = s.replace("\n", " ").replace("\r", " ")
 
             # empty out strings, in case of unmatched block terminators
             s = re.sub(r"'([^'\\]|\\'|\\[^'])*'", "''", s)
@@ -691,7 +696,7 @@ def make_namespace_exports(components, prefix):
             # now, in whatever is left, look for functions
             matches = re.findall(
                 # in R, either = or <- may be used to create and assign objects
-                r"([^A-Za-z._]|^)([A-Za-z._]+)\s*(=|<-)\s*function", s
+                r"([^A-Za-z0-9._]|^)([A-Za-z0-9._]+)\s*(=|<-)\s*function", s
             )
             for match in matches:
                 fn = match[1]
diff --git a/tests/unit/development/test_r_component_gen.py b/tests/unit/development/test_r_component_gen.py
new file mode 100644
index 00000000..b72ecbf5
--- /dev/null
+++ b/tests/unit/development/test_r_component_gen.py
@@ -0,0 +1,85 @@
+import os
+import shutil
+import re
+from textwrap import dedent
+
+import pytest
+
+from dash.development._r_components_generation import (
+    make_namespace_exports
+)
+
+
+@pytest.fixture
+def make_r_dir():
+    os.makedirs("R")
+
+    yield
+
+    shutil.rmtree("R")
+
+
+def test_r_exports(make_r_dir):
+    extra_file = dedent("""
+        # normal function syntax
+        my_func <- function(a, b) {
+            c <- a + b
+            nested_func <- function() { stop("no!") }
+            another_to_exclude = function(d) { d * d }
+            another_to_exclude(c)
+        }
+
+        # indented (no reason but we should allow) and using = instead of <-
+        # also braces in comments enclosing it {
+            my_func2 = function() {
+                s <- "unmatched closing brace }"
+                ignore_please <- function() { 1 }
+            }
+        # }
+
+        # real example from dash-table that should exclude FUN
+        df_to_list <- function(df) {
+          if(!(is.data.frame(df)))
+            stop("!")
+          setNames(lapply(split(df, seq(nrow(df))),
+                          FUN = function (x) {
+                            as.list(x)
+                          }), NULL)
+        }
+
+        # single-line compressed
+        util<-function(x){x+1}
+
+        # prefix with . to tell us to ignore
+        .secret <- function() { stop("You can't see me") }
+
+        # . in the middle is OK though
+        not.secret <- function() { 42 }
+    """)
+
+    components = ["Component1", "Component2"]
+    prefix = 'pre'
+
+    expected_exports = [prefix + c for c in components] + [
+        "my_func",
+        "my_func2",
+        "df_to_list",
+        "util",
+        "not.secret"
+    ]
+
+    mock_component_file = dedent("""
+        nope <- function() { stop("we don't look in component files") }
+    """)
+
+    with open(os.path.join("R", "preComponent1.R"), "w") as f:
+        f.write(mock_component_file)
+
+    with open(os.path.join("R", "extras.R"), "w") as f:
+        f.write(extra_file)
+
+    exports = make_namespace_exports(components, prefix)
+    print(exports)
+    matches = re.findall(r"export\(([^()]+)\)", exports.replace('\n', ' '))
+
+    assert matches == expected_exports
