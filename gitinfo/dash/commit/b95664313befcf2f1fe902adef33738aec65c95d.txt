commit b95664313befcf2f1fe902adef33738aec65c95d
Author: chriddyp <chris@plot.ly>
Date:   Tue Mar 21 17:19:16 2017 -0400

    include events in components

diff --git a/dash/development/base_component.py b/dash/development/base_component.py
index e538c6ac..3afb4767 100644
--- a/dash/development/base_component.py
+++ b/dash/development/base_component.py
@@ -210,6 +210,7 @@ def generate_class(typename, props, description, namespace):
             self._prop_names = {list_of_valid_keys}
             self._type = '{typename}'
             self._namespace = '{namespace}'
+            self._events = {events}
             super({typename}, self).__init__({argtext})
 
         def __repr__(self):
@@ -222,12 +223,17 @@ def generate_class(typename, props, description, namespace):
             else:
                 return '{typename}(' + repr(getattr(self, self._prop_names[0], None)) + ')'
     '''
-    list_of_valid_keys = repr(props.keys())
-    bullet_list_of_valid_keys = ('- ' + '\n- '.join(
-        list_of_valid_keys
-    ))
 
-    if 'content' in component_arguments:
+    filtered_props = reorder_props(filter_props(props))
+    list_of_valid_keys = repr(filtered_props.keys())
+    docstring = create_docstring(
+        typename,
+        filtered_props,
+        parse_events(props),
+        description
+    )
+    events = "[" + ', '.join(parse_events(props)) + "]"
+    if 'content' in props:
         default_argtext = 'content=None, **kwargs'
         argtext = 'content=content, **kwargs'
     else:
@@ -241,7 +247,28 @@ def generate_class(typename, props, description, namespace):
     result = scope[typename]
     return result
 
-def create_docstring(name, props, description):
+
+def reorder_props(props):
+    # If "content" is a prop, then move it to the front to respect
+    # dash convention
+    if 'content' in props:
+        props = collections.OrderedDict(
+            [('content', props.pop('content'), )] +
+            zip(props.keys(), props.values())
+        )
+    return props
+
+
+def parse_events(props):
+    if ('dashEvents' in props and
+            props['dashEvents']['type']['name'] == 'enum'):
+        events = [v['value'] for v in props['dashEvents']['type']['value']]
+    else:
+        events = []
+    return events
+
+
+def create_docstring(name, props, events, description):
     if 'content' in props:
         props = collections.OrderedDict(
             [['content', props.pop('content')]] +
@@ -252,27 +279,40 @@ def create_docstring(name, props, description):
     Keyword arguments:
     {args}
 
-    '''.format(
+    Available events: {events}'''.format(
         name=name,
         description='\n{}'.format(description),
         args='\n'.join(
             ['- {}'.format(argument_doc(
                 p, prop['type'], prop['required'], prop['description']
             )) for p, prop in filter_props(props).iteritems()]
-        )
+        ),
+        events=', '.join(events)
     ).replace('    ', '')
 
+
 def filter_props(args):
     filtered_args = copy.deepcopy(args)
-    for arg_name in filtered_args:
-        arg_type =  args[arg_name]['type']['name']
+    for arg_name, arg in filtered_args.iteritems():
+        if 'type' not in arg:
+            filtered_args.pop(arg_name)
+            continue
+
+        arg_type = arg['type']['name']
         if arg_type in ['func', 'symbol', 'instanceOf']:
             filtered_args.pop(arg_name)
+
+        # dashEvents are a special oneOf property that is used for subscribing
+        # to events but it's never set as a property
+        if arg_name in ['dashEvents']:
+            filtered_args.pop(arg_name)
     return filtered_args
 
+
 def js_to_py_type(type_object):
     js_type_name = type_object['name']
 
+    # wrapping everything in lambda to prevent immediate execution
     js_to_py_types = {
         'array': lambda: 'list',
         'bool': lambda: 'boolean',
@@ -328,8 +368,8 @@ def js_to_py_type(type_object):
                 )
             )
         )
-
     }
+
     if 'computed' in type_object and type_object['computed']:
         return ''
     if js_type_name in js_to_py_types:
@@ -337,6 +377,7 @@ def js_to_py_type(type_object):
     else:
         return ''
 
+
 def argument_doc(arg_name, type_object, required, description):
     js_type_name = type_object['name']
     py_type_name = js_to_py_type(type_object)
@@ -355,6 +396,8 @@ def argument_doc(arg_name, type_object, required, description):
         return '{name} ({type}{is_required}){description}'.format(
             name=arg_name,
             type='{}; '.format(py_type_name) if py_type_name else '',
-            description=': {}'.format(description) if description != '' else '',
+            description=(
+                ': {}'.format(description) if description != '' else ''
+            ),
             is_required='required' if required else 'optional'
         )
diff --git a/dash/development/component_loader.py b/dash/development/component_loader.py
index 116230cf..391994fd 100644
--- a/dash/development/component_loader.py
+++ b/dash/development/component_loader.py
@@ -11,13 +11,11 @@ def load_components(metadata_path,
 
     Keyword arguments:
     metadata_path -- a path to a JSON file created by [`react-docgen`](https://github.com/reactjs/react-docgen).
-    default_props -- props not in component propTypes that should be considered valid.
 
     Returns:
     components -- a list of component objects with keys `type`, `valid_kwargs`, and `setup`.
     """
 
-    # This will be returned
     components = []
 
     # Start processing
@@ -37,25 +35,13 @@ def load_components(metadata_path,
         # will be on windows. Unfortunately react-docgen doesn't include
         # the name of the component atm.
         name = componentPath.split('/').pop().split('.')[0]
-
-        # If "content" is a prop, then move it to the front to respect
-        # dash convention
-        props = componentData['props']
-        if 'content' in props:
-            props = OrderedDict(
-                [('content', props.pop('content'), )] +
-                zip(props.keys(), props.values())
-            )
-
         component = generate_class(
             name,
-            props,
-            description,
+            componentData['props'],
+            componentData['description'],
             namespace
         )
 
-        # TODO - Remove this
-        # scope[component_spec['type']] = component
         components.append(component)
 
     return components
diff --git a/tests/development/TestReactComponent.react.js b/tests/development/TestReactComponent.react.js
index a08d6cb9..7a466a94 100644
--- a/tests/development/TestReactComponent.react.js
+++ b/tests/development/TestReactComponent.react.js
@@ -23,8 +23,6 @@ ReactComponent.propTypes = {
     optionalString: React.PropTypes.string,
     optionalSymbol: React.PropTypes.symbol,
 
-    content: React.PropTypes.node,
-
     // Anything that can be rendered: numbers, strings, elements or an array
     // (or fragment) containing these types.
     optionalNode: React.PropTypes.node,
@@ -97,7 +95,22 @@ ReactComponent.propTypes = {
             ' `' + componentName + '`. Validation failed.'
             );
         }
-    })
+    }),
+
+    // special dash events
+
+    // TODO - Rename to children
+    content: React.PropTypes.node,
+
+    id: React.PropTypes.string,
+
+
+    // dashEvents is a special prop that is used to events validation
+    dashEvents: React.PropTypes.oneOf([
+        'restyle',
+        'relayout',
+        'click'
+    ])
 };
 
 ReactComponent.defaultProps = {
diff --git a/tests/development/metadata_test.json b/tests/development/metadata_test.json
index be249d83..0db9f417 100644
--- a/tests/development/metadata_test.json
+++ b/tests/development/metadata_test.json
@@ -59,13 +59,6 @@
       "required": false,
       "description": ""
     },
-    "content": {
-      "type": {
-        "name": "node"
-      },
-      "required": false,
-      "description": ""
-    },
     "optionalNode": {
       "type": {
         "name": "node"
@@ -220,6 +213,41 @@
       },
       "required": false,
       "description": ""
+    },
+    "content": {
+      "type": {
+        "name": "node"
+      },
+      "required": false,
+      "description": ""
+    },
+    "id": {
+      "type": {
+        "name": "string"
+      },
+      "required": false,
+      "description": ""
+    },
+    "dashEvents": {
+      "type": {
+        "name": "enum",
+        "value": [
+          {
+            "value": "'restyle'",
+            "computed": false
+          },
+          {
+            "value": "'relayout'",
+            "computed": false
+          },
+          {
+            "value": "'click'",
+            "computed": false
+          }
+        ]
+      },
+      "required": false,
+      "description": ""
     }
   }
 }
\ No newline at end of file
diff --git a/tests/development/test_base_component.py b/tests/development/test_base_component.py
index a0a9d8f5..a5ca1c23 100644
--- a/tests/development/test_base_component.py
+++ b/tests/development/test_base_component.py
@@ -3,19 +3,24 @@ from dash.development.base_component import (
     generate_class,
     Component,
     js_to_py_type,
-    create_docstring
+    create_docstring,
+    parse_events
 )
 import dash
 import inspect
 import json
 import plotly
 import unittest
+import collections
+import json
+import os
 
 
 Component._prop_names = ('id', 'a', 'content', 'style', )
 Component._type = 'TestComponent'
 Component._namespace = 'test_namespace'
 
+
 def nested_tree():
     '''This tree has a few unique properties:
     - Content is mixed strings and components (as in c2)
@@ -464,11 +469,18 @@ class TestComponent(unittest.TestCase):
 
 class TestGenerateClass(unittest.TestCase):
     def setUp(self):
+        path = os.path.join('tests', 'development', 'metadata_test.json')
+        with open(path) as data_file:
+            json_string = data_file.read()
+            data = json\
+                .JSONDecoder(object_pairs_hook=collections.OrderedDict)\
+                .decode(json_string)
+            self.data = data
+
         self.ComponentClass = generate_class(
             typename='Table',
-            component_arguments=(
-                'content', 'id', 'rows'
-            ),
+            props=data['props'],
+            description=data['description'],
             namespace='TableComponents'
         )
 
@@ -492,14 +504,14 @@ class TestGenerateClass(unittest.TestCase):
             }
         })
 
-        c = self.ComponentClass(id='my-id', rows=None)
+        c = self.ComponentClass(id='my-id', optionalArray=None)
         self.assertEqual(c.to_plotly_json(), {
             'namespace': 'TableComponents',
             'type': 'Table',
             'props': {
                 'content': None,
                 'id': 'my-id',
-                'rows': None
+                'optionalArray': None
             }
         })
 
@@ -507,7 +519,7 @@ class TestGenerateClass(unittest.TestCase):
         kwargs = {
             'id': 'my-id',
             'content': 'text content',
-            'rows': [[1, 2, 3]]
+            'optionalArray': [[1, 2, 3]]
         }
         component_instance = self.ComponentClass(**kwargs)
         for k, v in kwargs.iteritems():
@@ -533,10 +545,12 @@ class TestGenerateClass(unittest.TestCase):
         )
 
     def test_repr_multiple_arguments(self):
-        c = self.ComponentClass(id='my id', rows=[1, 2, 3])
+        # Note how the order in which keyword arguments are supplied is
+        # not always equal to the order in the repr of the component
+        c = self.ComponentClass(id='my id', optionalArray=[1, 2, 3])
         self.assertEqual(
             repr(c),
-            "Table(id='my id', rows=[1, 2, 3])"
+            "Table(optionalArray=[1, 2, 3], id='my id')"
         )
 
     def test_repr_nested_arguments(self):
@@ -549,16 +563,12 @@ class TestGenerateClass(unittest.TestCase):
         )
 
     def test_docstring(self):
+        assert_docstring(self.assertEqual, self.ComponentClass.__doc__)
+
+    def test_events(self):
         self.assertEqual(
-            self.ComponentClass.__doc__,
-            '\n'.join([
-                'A Table component.',
-                'Valid keys:',
-                '- content',
-                '- id',
-                '- rows',
-                '        '
-            ])
+            self.ComponentClass()._events,
+            ['restyle', 'relayout', 'click']
         )
 
     def test_call_signature(self):
@@ -576,9 +586,6 @@ class TestGenerateClass(unittest.TestCase):
 
 class TestMetaDataConversions(unittest.TestCase):
     def setUp(self):
-        import collections
-        import json
-        import os
         path = os.path.join('tests', 'development', 'metadata_test.json')
         with open(path) as data_file:
             json_string = data_file.read()
@@ -640,72 +647,20 @@ class TestMetaDataConversions(unittest.TestCase):
             ['customProp', ''],
 
             ['customArrayProp', 'list'],
-        ])
 
+            ['id', 'string'],
+
+            ['dashEvents', "a value equal to: 'restyle', 'relayout', 'click'"]
+        ])
 
     def test_docstring(self):
         docstring = create_docstring(
-            'MyComponent',
+            'Table',
             self.data['props'],
+            parse_events(self.data['props']),
             self.data['description'],
         )
-
-        for i, line in enumerate(docstring.split('\n')):
-            self.assertEqual(
-                line,
-                ([
-                "A MyComponent component.",
-                "This is a description of the component.",
-                "It's multiple lines long.",
-                '',
-                "Keyword arguments:",
-                "- content (a list of or a singular dash component, string or number; optional)",
-                "- optionalArray (list; optional): Description of optionalArray",
-                "- optionalBool (boolean; optional)",
-                "- optionalNumber (number; optional)",
-                "- optionalObject (dict; optional)",
-                "- optionalString (string; optional)",
-
-                "- optionalNode (a list of or a singular dash component, "
-                "string or number; optional)",
-
-                "- optionalElement (dash component; optional)",
-                "- optionalEnum (a value equal to: 'News', 'Photos'; optional)",
-                "- optionalUnion (string | number; optional)",
-                "- optionalArrayOf (list; optional)",
-
-                "- optionalObjectOf (dict with strings as keys and values "
-                "of type number; optional)",
-
-                "- optionalObjectWithShapeAndNestedDescription (optional): . "
-                "optionalObjectWithShapeAndNestedDescription has the "
-                "following type: dict containing keys "
-                "'color', 'fontSize', 'figure'.",
-
-                "Those keys have the following types: ",
-                "  - color (string; optional)",
-                "  - fontSize (number; optional)",
-
-                "  - figure (optional): Figure is a plotly graph object. "
-                "figure has the following type: dict containing "
-                "keys 'data', 'layout'.",
-
-                "Those keys have the following types: ",
-                "  - data (list; optional): data is a collection of traces",
-
-                "  - layout (dict; optional): layout describes "
-                "the rest of the figure",
-
-                "- requiredAny (boolean | number | string | dict | "
-                "list; required)",
-
-                "- requiredArray (list; required)",
-                "- customProp (optional)",
-                "- customArrayProp (list; optional)",
-                "",
-                ""
-                ])[i]
-            )
+        assert_docstring(self.assertEqual, docstring)
 
     def test_docgen_to_python_args(self):
 
@@ -716,3 +671,64 @@ class TestMetaDataConversions(unittest.TestCase):
                 js_to_py_type(prop['type']),
                 self.expected_arg_strings[prop_name]
             )
+
+
+def assert_docstring(assertEqual, docstring):
+    for i, line in enumerate(docstring.split('\n')):
+        assertEqual(
+            line,
+            ([
+            "A Table component.",
+            "This is a description of the component.",
+            "It's multiple lines long.",
+            '',
+            "Keyword arguments:",
+            "- content (a list of or a singular dash component, string or number; optional)",
+            "- optionalArray (list; optional): Description of optionalArray",
+            "- optionalBool (boolean; optional)",
+            "- optionalNumber (number; optional)",
+            "- optionalObject (dict; optional)",
+            "- optionalString (string; optional)",
+
+            "- optionalNode (a list of or a singular dash component, "
+            "string or number; optional)",
+
+            "- optionalElement (dash component; optional)",
+            "- optionalEnum (a value equal to: 'News', 'Photos'; optional)",
+            "- optionalUnion (string | number; optional)",
+            "- optionalArrayOf (list; optional)",
+
+            "- optionalObjectOf (dict with strings as keys and values "
+            "of type number; optional)",
+
+            "- optionalObjectWithShapeAndNestedDescription (optional): . "
+            "optionalObjectWithShapeAndNestedDescription has the "
+            "following type: dict containing keys "
+            "'color', 'fontSize', 'figure'.",
+
+            "Those keys have the following types: ",
+            "  - color (string; optional)",
+            "  - fontSize (number; optional)",
+
+            "  - figure (optional): Figure is a plotly graph object. "
+            "figure has the following type: dict containing "
+            "keys 'data', 'layout'.",
+
+            "Those keys have the following types: ",
+            "  - data (list; optional): data is a collection of traces",
+
+            "  - layout (dict; optional): layout describes "
+            "the rest of the figure",
+
+            "- requiredAny (boolean | number | string | dict | "
+            "list; required)",
+
+            "- requiredArray (list; required)",
+            "- customProp (optional)",
+            "- customArrayProp (list; optional)",
+            '- id (string; optional)',
+            '',
+            "Available events: 'restyle', 'relayout', 'click'",
+            '        '
+            ])[i]
+        )
