commit b8dfc38f6f755209c251565f28fdd4c9845aab5f
Author: Michael Milton <ttmigueltt@gmail.com>
Date:   Thu May 23 19:58:44 2019 +1000

    Add separate init_app function for providing the flask app

diff --git a/dash/dash.py b/dash/dash.py
index eab4fd72..36d372d5 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -108,8 +108,13 @@ class Dash(object):
             components_cache_max_age=None,
             show_undo_redo=False,
             plugins=None,
+            defer_app=False,
             **kwargs):
 
+        # Store some flask-related parameters for use in init_app()
+        self.compress = compress
+        self.name = name
+
         # pylint-disable: too-many-instance-attributes
         if 'csrf_protect' in kwargs:
             warnings.warn('''
@@ -154,22 +159,6 @@ class Dash(object):
             'show_undo_redo': show_undo_redo
         })
 
-        assets_blueprint_name = '{}{}'.format(
-            self.config.routes_pathname_prefix.replace('/', '_'),
-            'dash_assets'
-        )
-
-        self.server.register_blueprint(
-            flask.Blueprint(
-                assets_blueprint_name, name,
-                static_folder=self._assets_folder,
-                static_url_path='{}{}'.format(
-                    self.config.routes_pathname_prefix,
-                    assets_url_path.lstrip('/')
-                )
-            )
-        )
-
         # list of dependencies
         self.callback_map = {}
 
@@ -181,15 +170,6 @@ class Dash(object):
         # default renderer string
         self.renderer = 'var renderer = new DashRenderer();'
 
-        if compress:
-            # gzip
-            Compress(self.server)
-
-        @self.server.errorhandler(exceptions.PreventUpdate)
-        def _handle_error(_):
-            """Handle a halted callback and return an empty 204 response"""
-            return '', 204
-
         # static files from the packages
         self.css = Css()
         self.scripts = Scripts()
@@ -204,8 +184,79 @@ class Dash(object):
         # urls
         self.routes = []
 
+        self._layout = None
+        self._cached_layout = None
+        self._dev_tools = _AttributeDict({
+            'serve_dev_bundles': False,
+            'hot_reload': False,
+            'hot_reload_interval': 3000,
+            'hot_reload_watch_interval': 0.5,
+            'hot_reload_max_retry': 8,
+            'ui': False,
+            'props_check': False,
+        })
+
+        self._assets_files = []
+
+        # hot reload
+        self._reload_hash = None
+        self._hard_reload = False
+        self._lock = threading.RLock()
+        self._watch_thread = None
+        self._changed_assets = []
+
+        self.logger = logging.getLogger(name)
+        self.logger.addHandler(logging.StreamHandler(stream=sys.stdout))
+
+        if isinstance(plugins, _patch_collections_abc('Iterable')):
+            for plugin in plugins:
+                plugin.plug(self)
+
+        if not defer_app:
+            self.init_app()
+
+    def init_app(self, app=None):
+        """
+        Initialize the parts of Dash that require a flask app
+        """
+
+        if app is not None:
+            self.server = app
+
+        assets_blueprint_name = '{}{}'.format(
+            self.config.routes_pathname_prefix.replace('/', '_'),
+            'dash_assets'
+        )
+
+        self.server.register_blueprint(
+            flask.Blueprint(
+                assets_blueprint_name,
+                self.name,
+                static_folder=self._assets_folder,
+                static_url_path='{}{}'.format(
+                    self.config.routes_pathname_prefix,
+                    self._assets_url_path.lstrip('/')
+                )
+            )
+        )
+
+        if self.compress:
+            # gzip
+            Compress(self.server)
+
+        @self.server.errorhandler(exceptions.PreventUpdate)
+        def _handle_error(_):
+            """Handle a halted callback and return an empty 204 response"""
+            return '', 204
+
         prefix = self.config['routes_pathname_prefix']
 
+        self.server.before_first_request(self._setup_server)
+
+        # add a handler for components suites errors to return 404
+        self.server.errorhandler(exceptions.InvalidResourceError)(
+            self._invalid_resources_handler)
+
         self._add_url('{}_dash-layout'.format(prefix), self.serve_layout)
 
         self._add_url('{}_dash-dependencies'.format(prefix), self.dependencies)
@@ -236,40 +287,6 @@ class Dash(object):
             '{}_favicon.ico'.format(prefix),
             self._serve_default_favicon)
 
-        self.server.before_first_request(self._setup_server)
-
-        self._layout = None
-        self._cached_layout = None
-        self._dev_tools = _AttributeDict({
-            'serve_dev_bundles': False,
-            'hot_reload': False,
-            'hot_reload_interval': 3000,
-            'hot_reload_watch_interval': 0.5,
-            'hot_reload_max_retry': 8,
-            'ui': False,
-            'props_check': False,
-        })
-
-        # add a handler for components suites errors to return 404
-        self.server.errorhandler(exceptions.InvalidResourceError)(
-            self._invalid_resources_handler)
-
-        self._assets_files = []
-
-        # hot reload
-        self._reload_hash = None
-        self._hard_reload = False
-        self._lock = threading.RLock()
-        self._watch_thread = None
-        self._changed_assets = []
-
-        self.logger = logging.getLogger(name)
-        self.logger.addHandler(logging.StreamHandler(stream=sys.stdout))
-
-        if isinstance(plugins, _patch_collections_abc('Iterable')):
-            for plugin in plugins:
-                plugin.plug(self)
-
     def _add_url(self, name, view_func, methods=('GET',)):
         self.server.add_url_rule(
             name,
