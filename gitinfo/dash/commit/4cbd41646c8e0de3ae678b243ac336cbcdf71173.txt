commit 4cbd41646c8e0de3ae678b243ac336cbcdf71173
Author: Chris P <chris@plot.ly>
Date:   Sat Apr 13 13:24:01 2019 -0400

    handle missing required properties

diff --git a/src/TreeContainer.js b/src/TreeContainer.js
index fa0ae061..6520b751 100644
--- a/src/TreeContainer.js
+++ b/src/TreeContainer.js
@@ -1,6 +1,7 @@
 import React, {Component} from 'react';
 import PropTypes from 'prop-types';
 import Registry from './registry';
+import {propTypeErrorHandler} from './exceptions';
 import {connect} from 'react-redux';
 import {
     any,
@@ -71,40 +72,7 @@ function CheckedComponent(p) {
             props,
             'component prop', element);
     } catch (e) {
-        /*
-         * e.message looks like:
-         *
-         * Error: "Failed component prop type: Invalid component prop `animate` of type `number` supplied to `function GraphWithDefaults(props) {
-         *   var id = props.id ? props.id : generateId();
-         *   return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(PlotlyGraph, _extends({}, props, {
-         *     id: id
-         *   }));
-         * }`, expected `boolean`."
-         */
-        const messageParts = e.message.split('`');
-        const invalidPropName = messageParts[1];
-        const invalidPropTypeProvided = messageParts[3];
-        const expectedPropType = messageParts[7];
-        const jsonSuppliedValue = JSON.stringify(props[invalidPropName], null, 2);
-
-        let errorMessage = `Invalid argument \`${invalidPropName}\` passed into ${type}`;
-        if (props.id) {
-            errorMessage += ` with ID "${props.id}".`;
-        } else {
-            errorMessage += '.';
-        }
-        errorMessage += (
-            `\nExpected type \`${expectedPropType}\`` +
-            `\nWas supplied type \`${invalidPropTypeProvided}\`` +
-            `\nValue provided: `
-        );
-        if (contains('\n', jsonSuppliedValue)) {
-            errorMessage += `\n${jsonSuppliedValue}`;
-        } else {
-            errorMessage += jsonSuppliedValue;
-        }
-
-        throw new Error(errorMessage);
+        propTypeErrorHandler(e, props, type);
     }
 
     return React.createElement(
diff --git a/src/exceptions.js b/src/exceptions.js
new file mode 100644
index 00000000..ace655cf
--- /dev/null
+++ b/src/exceptions.js
@@ -0,0 +1,86 @@
+import {contains, has} from 'ramda';
+
+export function propTypeErrorHandler(e, props, type) {
+    /*
+     * If wrong prop type was passed in, e.message looks like:
+     *
+     * Error: "Failed component prop type: Invalid component prop `animate` of type `number` supplied to `function GraphWithDefaults(props) {
+     *   var id = props.id ? props.id : generateId();
+     *   return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(PlotlyGraph, _extends({}, props, {
+     *     id: id
+     *   }));
+     * }`, expected `boolean`."
+     *
+     *
+     * If a required prop type was omitted, e.message looks like:
+     *
+     * "Failed component prop type: The component prop `options[0].value` is marked as required in `function Checklist(props) {
+     *    var _this;
+     *
+     *    _classCallCheck(this, Checklist);
+     *
+     *     _this = _possibleConstructorReturn(this, _getPrototypeOf(Checklist).call(this, props));
+     *     _this.state = {
+     *       values: props.values
+     *     };
+     *     return _this;
+     *   }`, but its value is `undefined`."
+     *
+     */
+
+    const messageParts = e.message.split('`');
+    let errorMessage;
+    if (contains('is marked as required', e.message)) {
+
+        const invalidPropPath = messageParts[1];
+        const providedValue = messageParts[5];
+        errorMessage = `${invalidPropPath} in ${type}`;
+        if (props.id) {
+            errorMessage += ` with ID "${props.id}"`;
+        }
+        errorMessage += ` is required but it was not provided.`;
+
+    } else if(contains('Invalid component prop', e.message)) {
+
+        const invalidPropPath = messageParts[1];
+        const invalidPropTypeProvided = messageParts[3];
+        const expectedPropType = messageParts[7];
+
+        errorMessage = `Invalid argument \`${invalidPropPath}\` passed into ${type}`;
+        if (props.id) {
+            errorMessage += ` with ID "${props.id}"`;
+        }
+        errorMessage += '.';
+
+        errorMessage += (
+            `\nExpected type \`${expectedPropType}\`` +
+            `\nWas supplied type \`${invalidPropTypeProvided}\``
+        );
+
+        if (has(invalidPropPath, props)) {
+            /*
+             * invalidPropPath may be nested like `options[0].value`.
+             * For now, we won't try to unpack these nested options
+             * but we could in the future.
+             */
+            const jsonSuppliedValue = JSON.stringify(props[invalidPropPath], null, 2);
+            if (jsonSuppliedValue) {
+                if (contains('\n', jsonSuppliedValue)) {
+                    errorMessage += `\nValue provided: \n${jsonSuppliedValue}`;
+                } else {
+                    errorMessage += `\nValue provided: ${jsonSuppliedValue}`;
+                }
+            }
+        }
+
+    } else {
+        /*
+         * Not aware of other prop type warning messages.
+         * But, if they exist, then at least throw the default
+         * react prop types error
+         */
+        throw e;
+    }
+
+    throw new Error(errorMessage);
+}
