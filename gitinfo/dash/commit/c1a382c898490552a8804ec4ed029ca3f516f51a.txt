commit c1a382c898490552a8804ec4ed029ca3f516f51a
Author: Chris P <chris@plot.ly>
Date:   Thu Apr 11 10:30:02 2019 -0700

    prettier & eslint

diff --git a/src/TreeContainer.js b/src/TreeContainer.js
index 051adc5e..4f54ac28 100644
--- a/src/TreeContainer.js
+++ b/src/TreeContainer.js
@@ -143,7 +143,7 @@ class TreeContainer extends Component {
             >
                 {this.getComponent(_dashprivate_layout, children, _dashprivate_loadingState, setProps)}
             </ComponentErrorBoundary>
-        );        
+        );
     }
 }
 
@@ -247,4 +247,4 @@ function isLoadingComponent(layout) {
 
 export const AugmentedTreeContainer = connect(mapStateToProps, mapDispatchToProps, mergeProps)(TreeContainer);
 
-export default AugmentedTreeContainer;
\ No newline at end of file
+export default AugmentedTreeContainer;
diff --git a/src/actions/index.js b/src/actions/index.js
index bbd40d82..90572d14 100644
--- a/src/actions/index.js
+++ b/src/actions/index.js
@@ -805,7 +805,7 @@ function updateOutput(
                         error: {
                             message: `Callack error updating ${payload.output}`,
                             html: text,
-                        }
+                        },
                     })
                 );
             });
diff --git a/src/components/error/FrontEnd/FrontEndError.react.js b/src/components/error/FrontEnd/FrontEndError.react.js
index f979f915..411226dc 100644
--- a/src/components/error/FrontEnd/FrontEndError.react.js
+++ b/src/components/error/FrontEnd/FrontEndError.react.js
@@ -1,10 +1,8 @@
 import './FrontEndError.css';
 import {Component} from 'react';
 import ErrorIcon from '../icons/ErrorIcon.svg';
-import CloseIcon from '../icons/CloseIcon.svg';
 import CollapseIcon from '../icons/CollapseIcon.svg';
 import PropTypes from 'prop-types';
-import {has} from 'ramda';
 
 import werkzeugCss from '../werkzeug.css.txt';
 
@@ -20,15 +18,9 @@ class FrontEndError extends Component {
         const {e, resolve, inAlertsTray} = this.props;
         const {collapsed} = this.state;
 
-        let closeButton, cardClasses;
+        let cardClasses;
         // if resolve is defined, the error should be a standalone card
         if (resolve) {
-            closeButton = (
-                <CloseIcon
-                    className="dash-fe-error__icon-close"
-                    onClick={() => resolve('frontEnd', e.myUID)}
-                />
-            );
             cardClasses = 'dash-error-card';
         } else {
             cardClasses = 'dash-error-card__content';
@@ -38,7 +30,10 @@ class FrontEndError extends Component {
         }
 
         const errorHeader = (
-            <div className="dash-fe-error-top" onClick={() => this.setState({collapsed: !collapsed})}>
+            <div
+                className="dash-fe-error-top"
+                onClick={() => this.setState({collapsed: !collapsed})}
+            >
                 <span className="dash-fe-error-top__group">
                     <ErrorIcon className="dash-fe-error__icon-error" />
 
@@ -53,7 +48,9 @@ class FrontEndError extends Component {
                     </span>
 
                     <CollapseIcon
-                        className={`dash-fe-error__collapse ${collapsed ? 'dash-fe-error__collapse--flipped' : ''}`}
+                        className={`dash-fe-error__collapse ${
+                            collapsed ? 'dash-fe-error__collapse--flipped' : ''
+                        }`}
                         onClick={() => this.setState({collapsed: !collapsed})}
                     />
                 </span>
@@ -61,80 +58,82 @@ class FrontEndError extends Component {
         );
 
         return collapsed ? (
-            <div className="dash-error-card__list-item">
-                {errorHeader}
-            </div>
+            <div className="dash-error-card__list-item">{errorHeader}</div>
         ) : (
             <div className={cardClasses}>
                 {errorHeader}
 
-                <ErrorContent error={e.error}/>
-
+                <ErrorContent error={e.error} />
             </div>
         );
-
     }
 }
 
+/* eslint-disable no-inline-comments */
 function ErrorContent({error}) {
     return (
-        <div className='error-container'>
-        {/* Frontend Error objects */}
-        {!error.stack ? null: (
-            <div className="dash-fe-error__st">
-                {error.stack.split('\n').map(line => <p>{line}</p>)}
-            </div>
-        )}
+        <div className="error-container">
+            {/* Frontend Error objects */}
+            {!error.stack ? null : (
+                <div className="dash-fe-error__st">
+                    {error.stack.split('\n').map(line => (
+                        <p>{line}</p>
+                    ))}
+                </div>
+            )}
 
-        {/* Backend Error */}
-        {!error.html ? null : (
-            <div className="dash-be-error__st">
-                <div className="dash-backend-error">
-                    {/* Embed werkzeug debugger in an iframe to prevent
+            {/* Backend Error */}
+            {!error.html ? null : (
+                <div className="dash-be-error__st">
+                    <div className="dash-backend-error">
+                        {/* Embed werkzeug debugger in an iframe to prevent
                         CSS leaking - werkzeug HTML includes a bunch
                         of CSS on base html elements like `<body/>`
                       */}
 
-                    <iframe
-                        srcDoc={error.html.replace(
-                            '</head>',
-                            `<style type="text/css">${werkzeugCss}</style></head>`
-                        )}
-                        style={{
-                            /*
-                             * 67px of padding and margin between this
-                             * iframe and the parent container.
-                             * 67 was determined manually in the
-                             * browser's dev tools.
-                             */
-                            'width': 'calc(600px - 67px)',
-                            'height': '75vh',
-                            'border': 'none'
-                        }}
-                    />
+                        <iframe
+                            srcDoc={error.html.replace(
+                                '</head>',
+                                `<style type="text/css">${werkzeugCss}</style></head>`
+                            )}
+                            style={{
+                                /*
+                                 * 67px of padding and margin between this
+                                 * iframe and the parent container.
+                                 * 67 was determined manually in the
+                                 * browser's dev tools.
+                                 */
+                                width: 'calc(600px - 67px)',
+                                height: '75vh',
+                                border: 'none',
+                            }}
+                        />
+                    </div>
                 </div>
-            </div>
-        )}
+            )}
         </div>
     );
 }
 
+const errorPropTypes = PropTypes.shape({
+    message: PropTypes.string,
+
+    /* front-end error messages */
+    stack: PropTypes.string,
+
+    /* backend error messages */
+    html: PropTypes.string,
+});
+
+ErrorContent.propTypes = {
+    error: errorPropTypes,
+};
 
 FrontEndError.propTypes = {
     e: PropTypes.shape({
         myUID: PropTypes.string,
         timestamp: PropTypes.object,
-        error: PropTypes.shape({
-            message: PropTypes.string,
-
-            /* front-end error messages */
-            stack: PropTypes.string,
-
-            /* backend error messages */
-            html: PropTypes.string,
-
-
-        })
+        error: errorPropTypes,
     }),
     resolve: PropTypes.func,
     inAlertsTray: PropTypes.bool,
diff --git a/src/components/error/FrontEnd/FrontEndErrorContainer.react.js b/src/components/error/FrontEnd/FrontEndErrorContainer.react.js
index 490dadb4..f1e49de2 100644
--- a/src/components/error/FrontEnd/FrontEndErrorContainer.react.js
+++ b/src/components/error/FrontEnd/FrontEndErrorContainer.react.js
@@ -1,6 +1,5 @@
 import React, {Component} from 'react';
 import './FrontEndError.css';
-import CloseIcon from '../icons/CloseIcon.svg';
 import PropTypes from 'prop-types';
 import {FrontEndError} from './FrontEndError.react';
 
diff --git a/src/components/error/GlobalErrorContainer.react.js b/src/components/error/GlobalErrorContainer.react.js
index 713e96e6..f7d38eee 100644
--- a/src/components/error/GlobalErrorContainer.react.js
+++ b/src/components/error/GlobalErrorContainer.react.js
@@ -2,7 +2,6 @@ import {connect} from 'react-redux';
 import React, {Component} from 'react';
 import PropTypes from 'prop-types';
 import Radium from 'radium';
-import {isEmpty} from 'ramda';
 import {resolveError} from '../../actions';
 import {DebugMenu} from './menu/DebugMenu.react';
 
diff --git a/src/components/error/GlobalErrorOverlay.react.js b/src/components/error/GlobalErrorOverlay.react.js
index 6fb0fb00..c1567548 100644
--- a/src/components/error/GlobalErrorOverlay.react.js
+++ b/src/components/error/GlobalErrorOverlay.react.js
@@ -1,7 +1,5 @@
 import React, {Component} from 'react';
 import PropTypes from 'prop-types';
-import {isEmpty} from 'ramda';
-import {FrontEndError} from './FrontEnd/FrontEndError.react';
 import './GlobalErrorOverlay.css';
 import {FrontEndErrorContainer} from './FrontEnd/FrontEndErrorContainer.react';
 
@@ -24,10 +22,7 @@ export default class GlobalErrorOverlay extends Component {
             });
 
             frontEndErrors = (
-                <FrontEndErrorContainer
-                    errors={errors}
-                    resolve={resolve}
-                />
+                <FrontEndErrorContainer errors={errors} resolve={resolve} />
             );
         }
         return (
diff --git a/src/components/error/menu/DebugAlertContainer.react.js b/src/components/error/menu/DebugAlertContainer.react.js
index 61f0b9c1..1290bb98 100644
--- a/src/components/error/menu/DebugAlertContainer.react.js
+++ b/src/components/error/menu/DebugAlertContainer.react.js
@@ -1,8 +1,6 @@
 import './DebugAlertContainer.css';
 import {Component} from 'react';
 import PropTypes from 'prop-types';
-import WarningIcon from '../icons/WarningIcon.svg';
-import WarningIconWhite from '../icons/WarningIconWhite.svg';
 import ErrorIcon from '../icons/ErrorIcon.svg';
 import ErrorIconWhite from '../icons/ErrorIconWhite.svg';
 
diff --git a/src/components/error/menu/DebugMenu.react.js b/src/components/error/menu/DebugMenu.react.js
index 299d2d08..32fd7591 100644
--- a/src/components/error/menu/DebugMenu.react.js
+++ b/src/components/error/menu/DebugMenu.react.js
@@ -1,22 +1,17 @@
 import React, {Component} from 'react';
-import {concat} from 'ramda';
+import {concat, isEmpty} from 'ramda';
 import './DebugMenu.css';
 
 import DebugIcon from '../icons/DebugIcon.svg';
 import WhiteCloseIcon from '../icons/WhiteCloseIcon.svg';
 import BellIcon from '../icons/BellIcon.svg';
 import BellIconGrey from '../icons/BellIconGrey.svg';
-import ReloadIcon from '../icons/ReloadIcon.svg';
 import GraphIcon from '../icons/GraphIcon.svg';
-import WarningIcon from '../icons/WarningIcon.svg';
 import ErrorIcon from '../icons/ErrorIcon.svg';
 
 import PropTypes from 'prop-types';
 import {DebugAlertContainer} from './DebugAlertContainer.react';
 import GlobalErrorOverlay from '../GlobalErrorOverlay.react';
-import {isEmpty} from 'ramda';
-import {FrontEndError} from '../FrontEnd/FrontEndError.react';
-import {FrontEndErrorContainer} from '../FrontEnd/FrontEndErrorContainer.react';
 
 class DebugMenu extends Component {
     constructor(props) {
@@ -38,7 +33,7 @@ class DebugMenu extends Component {
 
         const menuContent = opened ? (
             <div className="dash-debug-menu__content">
-                {(error.frontEnd.length > 0 || error.backEnd.length > 0) ? (
+                {error.frontEnd.length > 0 || error.backEnd.length > 0 ? (
                     <div className="dash-debug-menu__button-container">
                         <DebugAlertContainer
                             errors={concat(error.frontEnd, error.backEnd)}
@@ -97,7 +92,7 @@ class DebugMenu extends Component {
         );
 
         const alertsLabel =
-            (error.frontEnd.length + error.backEnd.length) > 0 && !opened ? (
+            error.frontEnd.length + error.backEnd.length > 0 && !opened ? (
                 <div className="dash-debug-alert-label">
                     <div className="dash-debug-alert">
                         <ErrorIcon className="dash-debug-alert-container__icon" />
diff --git a/src/reducers/error.js b/src/reducers/error.js
index 94f54259..6279875e 100644
--- a/src/reducers/error.js
+++ b/src/reducers/error.js
@@ -12,17 +12,16 @@ function error(state = initialError, action) {
                 return {
                     frontEnd: [
                         merge(action.payload, {timestamp: new Date()}),
-                        ...state.frontEnd
+                        ...state.frontEnd,
                     ],
                     backEnd: state.backEnd,
                 };
             } else if (action.payload.type === 'backEnd') {
-                debugger;
                 return {
                     frontEnd: state.frontEnd,
                     backEnd: [
                         merge(action.payload, {timestamp: new Date()}),
-                        ...state.backEnd
+                        ...state.backEnd,
                     ],
                 };
             }
