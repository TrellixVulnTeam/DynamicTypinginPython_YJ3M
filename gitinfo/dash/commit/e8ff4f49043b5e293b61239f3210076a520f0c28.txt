commit e8ff4f49043b5e293b61239f3210076a520f0c28
Author: alexcjohnson <alex@plot.ly>
Date:   Wed May 29 17:11:32 2019 -0400

    blacklist the attrs we need in Py from being component props

diff --git a/dash/development/component_generator.py b/dash/development/component_generator.py
index 69dfafb2..1b64dcc2 100644
--- a/dash/development/component_generator.py
+++ b/dash/development/component_generator.py
@@ -19,6 +19,15 @@ from ._py_components_generation import generate_imports
 from ._py_components_generation import generate_classes_files
 
 
+forbidden_props = [
+    'UNDEFINED',
+    'REQUIRED',
+    'to_plotly_json',
+    'available_properties',
+    'available_wildcard_properties'
+]
+
+
 class _CombinedFormatter(
         argparse.ArgumentDefaultsHelpFormatter,
         argparse.RawDescriptionHelpFormatter
@@ -47,9 +56,15 @@ def generate_components(
 
     extract_path = pkg_resources.resource_filename("dash", "extract-meta.js")
 
+    forbid_patterns = '|'.join(
+        '^{}$'.format(p) for p in forbidden_props + ['_.*']
+    )
+
     os.environ["NODE_PATH"] = "node_modules"
     cmd = shlex.split(
-        "node {} {} {}".format(extract_path, ignore, components_source),
+        "node {} {} {} {}".format(
+            extract_path, ignore, forbid_patterns, components_source
+        ),
         posix=not is_windows,
     )
 
@@ -138,8 +153,8 @@ def cli():
         "-p",
         "--package-info-filename",
         default="package.json",
-        help="The filename of the copied `package.json` \
-to `project_shortname`",
+        help="The filename of the copied `package.json` "
+        "to `project_shortname`",
     )
     parser.add_argument(
         "-i",
diff --git a/dash/extract-meta.js b/dash/extract-meta.js
index b667a58a..4a6bdc8a 100644
--- a/dash/extract-meta.js
+++ b/dash/extract-meta.js
@@ -4,8 +4,11 @@ const fs = require('fs');
 const path = require('path');
 const reactDocs = require('react-docgen');
 
-const componentPaths = process.argv.slice(3);
+const componentPaths = process.argv.slice(4);
 const ignorePattern = new RegExp(process.argv[2]);
+const forbiddenProps = process.argv[3].split('|').map(part => new RegExp(part));
+
+let failed = false;
 
 const excludedDocProps = [
     'setProps', 'id', 'className', 'style'
@@ -20,13 +23,18 @@ const metadata = Object.create(null);
 componentPaths.forEach(componentPath =>
     collectMetadataRecursively(componentPath)
 );
-writeOut(metadata);
+if (failed) {
+    console.error('\nextract-meta failed.\n');
+}
+else {
+    writeOut(metadata);
+}
 
 function help() {
     console.error('usage: ');
     console.error(
-        'extract-meta path/to/component(s) ' +
-            ' [path/to/more/component(s), ...] > metadata.json'
+        'extract-meta ^fileIgnorePattern ^forbidden$|^props$|^patterns$' +
+        ' path/to/component(s) [path/to/more/component(s) ...] > metadata.json'
     );
 }
 
@@ -55,6 +63,20 @@ function docstringWarning(doc) {
     );
 }
 
+function propError(doc) {
+    for(const propName in doc.props) {
+        forbiddenProps.forEach(forbiddenPattern => {
+            if (forbiddenPattern.test(propName)) {
+                process.stderr.write(
+                    `\nERROR: "${propName}" matches forbidden prop name ` +
+                    `pattern: ${forbiddenPattern.toString()}\n`
+                );
+                failed = true;
+            }
+        });
+    }
+}
+
 
 function parseFile(filepath) {
     const urlpath = filepath.split(path.sep).join('/');
@@ -68,6 +90,7 @@ function parseFile(filepath) {
         src = fs.readFileSync(filepath);
         const doc = metadata[urlpath] = reactDocs.parse(src);
         docstringWarning(doc);
+        propError(doc);
     } catch (error) {
         writeError(error, filepath);
     }
diff --git a/tests/unit/dash/development/test_base_component.py b/tests/unit/dash/development/test_base_component.py
index 7195e082..f1ab4e26 100644
--- a/tests/unit/dash/development/test_base_component.py
+++ b/tests/unit/dash/development/test_base_component.py
@@ -7,6 +7,7 @@ import unittest
 import plotly
 
 from dash.development.base_component import Component
+from dash.development.component_generator import forbidden_props
 from dash.development._py_components_generation import (
     generate_class_string,
     generate_class_file,
@@ -738,6 +739,23 @@ class TestGenerateClass(unittest.TestCase):
         with self.assertRaises(Exception):
             self.ComponentClassRequired(children='test')
 
+    def test_attrs_match_forbidden_props(self):
+        # props are not added as attrs unless explicitly provided
+        # except for children, which is always set if it's a prop at all.
+        c = self.ComponentClass()
+        base_attrs = dir(c)
+        extra_attrs = [a for a in base_attrs if a[0] != '_']
+        self.assertEqual(set(extra_attrs), set(forbidden_props + ['children']))
+
+        # setting props causes them to show up as attrs
+        c2 = self.ComponentClass('children', id='c2', optionalArray=[1])
+        prop_attrs = dir(c2)
+        self.assertEqual(set(base_attrs) - set(prop_attrs), set([]))
+        self.assertEqual(
+            set(prop_attrs) - set(base_attrs),
+            set(['id', 'optionalArray'])
+        )
+
 
 class TestMetaDataConversions(unittest.TestCase):
     def setUp(self):
