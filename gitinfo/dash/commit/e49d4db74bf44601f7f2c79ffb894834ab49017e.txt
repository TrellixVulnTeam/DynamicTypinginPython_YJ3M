commit e49d4db74bf44601f7f2c79ffb894834ab49017e
Author: byron <byron@plot.ly>
Date:   Wed Jul 3 16:49:05 2019 -0400

    :sparkles: add headless mode, add hooks to further configure wd options

diff --git a/dash/testing/browser.py b/dash/testing/browser.py
index 6d59b50f..d8ea3e89 100644
--- a/dash/testing/browser.py
+++ b/dash/testing/browser.py
@@ -9,7 +9,6 @@ from selenium import webdriver
 from selenium.webdriver.support import expected_conditions as EC
 from selenium.webdriver.common.by import By
 from selenium.webdriver.support.wait import WebDriverWait
-from selenium.webdriver.chrome.options import Options
 from selenium.webdriver.common.keys import Keys
 from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
 from selenium.webdriver.common.action_chains import ActionChains
@@ -25,8 +24,17 @@ logger = logging.getLogger(__name__)
 
 
 class Browser(DashPageMixin):
-    def __init__(self, browser, remote=None, wait_timeout=10):
+    def __init__(
+        self,
+        browser,
+        headless=False,
+        options=None,
+        remote=None,
+        wait_timeout=10,
+    ):
         self._browser = browser.lower()
+        self._headless = headless
+        self._options = options
         self._wait_timeout = wait_timeout
 
         self._driver = self.get_webdriver(remote)
@@ -244,10 +252,20 @@ class Browser(DashPageMixin):
             )
         )
 
-    @staticmethod
-    def _get_chrome():
-        options = Options()
-        options.add_argument("--no-sandbox")
+    def _get_wd_options(self):
+        options = (
+            self._options[0]
+            if self._options and isinstance(self._options, list)
+            else getattr(webdriver, self._browser).options.Options()
+        )
+
+        if self._headless:
+            options.headless = True
+
+        return options
+
+    def _get_chrome(self):
+        options = self._get_wd_options()
 
         capabilities = DesiredCapabilities.CHROME
         capabilities["loggingPrefs"] = {"browser": "SEVERE"}
@@ -261,8 +279,8 @@ class Browser(DashPageMixin):
         chrome.set_window_position(0, 0)
         return chrome
 
-    @staticmethod
-    def _get_firefox():
+    def _get_firefox(self):
+        options = self._get_wd_options()
 
         capabilities = DesiredCapabilities.FIREFOX
         capabilities["loggingPrefs"] = {"browser": "SEVERE"}
@@ -278,7 +296,7 @@ class Browser(DashPageMixin):
         fp.set_preference("browser.download.folderList", 2)
         fp.set_preference("browser.download.manager.showWhenStarting", False)
 
-        return webdriver.Firefox(fp, capabilities=capabilities)
+        return webdriver.Firefox(fp, options=options, capabilities=capabilities)
 
     @staticmethod
     def _is_windows():
diff --git a/dash/testing/composite.py b/dash/testing/composite.py
index 485faacf..dc86a078 100644
--- a/dash/testing/composite.py
+++ b/dash/testing/composite.py
@@ -2,13 +2,22 @@ from dash.testing.browser import Browser
 
 
 class DashComposite(Browser):
-
-    def __init__(self, server, browser, remote=None, wait_timeout=10):
-        super(DashComposite, self).__init__(browser, remote, wait_timeout)
+    def __init__(
+        self,
+        server,
+        browser,
+        headless=False,
+        options=None,
+        remote=None,
+        wait_timeout=10,
+    ):
+        super(DashComposite, self).__init__(
+            browser, headless, options, remote, wait_timeout
+        )
         self.server = server
 
     def start_server(self, app, **kwargs):
-        '''start the local server with app'''
+        """start the local server with app"""
 
         # start server with app and pass Dash arguments
         self.server(app, **kwargs)
diff --git a/dash/testing/newhooks.py b/dash/testing/newhooks.py
new file mode 100644
index 00000000..694aeeaf
--- /dev/null
+++ b/dash/testing/newhooks.py
@@ -0,0 +1,2 @@
+def pytest_setup_options():
+    """called before webdriver is initialized"""
diff --git a/dash/testing/plugin.py b/dash/testing/plugin.py
index 01b2d074..1035e1a0 100644
--- a/dash/testing/plugin.py
+++ b/dash/testing/plugin.py
@@ -22,10 +22,30 @@ def pytest_addoption(parser):
     dash.addoption(
         "--webdriver",
         choices=tuple(WEBDRIVERS.keys()),
+        action="store",
         default="Chrome",
         help="Name of the selenium driver to use",
     )
 
+    dash.addoption(
+        "--headless",
+        action="store",
+        default=False,
+        help="Run tests in headless mode",
+    )
+
+
+@pytest.mark.tryfirst
+def pytest_addhooks(pluginmanager):
+    # https://github.com/pytest-dev/pytest-xdist/blob/974bd566c599dc6a9ea291838c6f226197208b46/xdist/plugin.py#L67
+    # avoid warnings with pytest-2.8
+    from dash.testing import newhooks
+
+    method = getattr(pluginmanager, "add_hookspecs", None)
+    if method is None:
+        method = pluginmanager.addhooks  # pragma: no cover
+    method(newhooks)
+
 
 @pytest.hookimpl(tryfirst=True, hookwrapper=True)
 def pytest_runtest_makereport(item, call):  # pylint: disable=unused-argument
@@ -64,13 +84,20 @@ def dash_process_server():
 
 @pytest.fixture
 def dash_br(request):
-    with Browser(request.config.getoption("webdriver")) as browser:
+    with Browser(
+        browser=request.config.getoption("webdriver"),
+        headless=request.config.getoption("headless"),
+        options=request.config.hook.pytest_setup_options(),
+    ) as browser:
         yield browser
 
 
 @pytest.fixture
 def dash_duo(request, dash_thread_server):
     with DashComposite(
-        dash_thread_server, request.config.getoption("webdriver")
+        dash_thread_server,
+        browser=request.config.getoption("webdriver"),
+        headless=request.config.getoption("headless"),
+        options=request.config.hook.pytest_setup_options(),
     ) as dc:
         yield dc
