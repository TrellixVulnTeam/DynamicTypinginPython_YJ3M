commit 41cfc7dd87f24706afd898a4c852cd489ebd00e5
Author: Chris P <chris@plot.ly>
Date:   Sat Mar 30 13:11:15 2019 -0400

    :pencil: examples

diff --git a/assets/clientside.js b/assets/clientside.js
new file mode 100644
index 00000000..dfe376fb
--- /dev/null
+++ b/assets/clientside.js
@@ -0,0 +1,139 @@
+window.clientside = {
+
+    display: function (value) {
+        return 'Client says "' + value + '"';
+    },
+
+    updateFig: function(search, years, mode, rows) {
+        var filtered_rows = R.filter(
+          R.allPass([
+            R.compose(
+              R.contains(search),
+              R.prop('country')
+            ),
+            R.compose(
+              R.flip(R.contains)(years),
+              R.prop('year')
+          ),
+        ]), rows);
+
+        return {
+            'data': [{
+                'x': R.pluck('gdpPercap', filtered_rows),
+                'y': R.pluck('lifeExp', filtered_rows),
+                'text': R.map(
+                    R.join(' - '),
+                    R.zip(
+                        R.pluck('year', filtered_rows),
+                        R.pluck('country', filtered_rows)
+                    )
+                ),
+                'type': 'scatter',
+                'mode': mode,
+                'marker': {
+                    'opacity': 0.7
+                }
+            }],
+            'layout': {
+                'hovermode': 'closest',
+                'xaxis': {'type': 'log'}
+            }
+        }
+    },
+
+    mean: function(...args) {
+        console.warn('mean.args: ', args);
+        const meanValues = R.mean(args);
+        console.warn('meanValues: ', meanValues);
+        return meanValues;
+    },
+
+    tableColumns: function(
+        addColumnNClicks, newColumnName, existingColumns
+    ) {
+        if (addColumnNClicks === 0) {
+            return [{'id': 'column-1', 'name': 'Column 1'}];
+        }
+            return R.concat(
+                existingColumns,
+                [{
+                    'name': newColumnName,
+                    'id': Math.random().toString(36).substring(7)
+                }]
+            );
+
+    },
+
+    tableData: function(columns, n_clicks, data) {
+        if (n_clicks === 0 && columns.length === 1) {
+            return initial_data;
+        } else if (R.isNil(data)) {
+            return [{'column-1': 9}];
+        } else if (columns.length > R.values(data[0]).length) {
+            return data.map(row => {
+                const newCell = {};
+                newCell[columns[columns.length - 1].id] = 9;
+                return R.merge(row, newCell)
+            });
+        } else if(n_clicks > data.length) {
+            const newRow = {};
+            columns.forEach(col => newRow[col.id] = 9);
+            return R.concat(
+                data,
+                [newRow]
+            );
+        }
+    },
+
+    graphTable(data) {
+        return {
+            'data': [{
+                'z': R.map(R.values, data),
+                'type': 'heatmap'
+            }]
+        }
+    },
+
+    animateFig: function(countries, year, rows) {
+        var filtered_rows = R.filter(
+          R.allPass([
+            R.compose(
+                R.flip(R.contains)(countries),
+                R.prop('country')
+            ),
+            R.propEq('year', year)
+          ]), rows);
+
+        return {
+            'data': [{
+                'x': R.pluck('gdpPercap', filtered_rows),
+                'y': R.pluck('lifeExp', filtered_rows),
+                'text': R.map(
+                    R.join(' - '),
+                    R.zip(
+                        R.pluck('year', filtered_rows),
+                        R.pluck('country', filtered_rows)
+                    )
+                ),
+                'type': 'scatter',
+                'mode': 'markers',
+                'marker': {
+                    'opacity': 0.7,
+                    'size': 12
+                }
+            }],
+            'layout': {
+                'hovermode': 'closest',
+                'xaxis': {
+                    'type': 'log',
+                    'range': [2, 5]
+                },
+                'yaxis': {
+                    'range': [15, 90]
+                }
+            }
+        }
+    },
+
+
+}
diff --git a/clientside_0_simple.py b/clientside_0_simple.py
new file mode 100644
index 00000000..16594141
--- /dev/null
+++ b/clientside_0_simple.py
@@ -0,0 +1,36 @@
+import dash
+print(dash.__version__)
+
+from dash.dependencies import Input, Output, State, ClientFunction
+import dash_core_components as dcc
+import dash_html_components as html
+
+
+
+app = dash.Dash(__name__)
+
+app.layout = html.Div([
+    dcc.Input(id='input', value='hello world'),
+    html.Div(id='output-clientside'),
+    html.Div(id='output-serverside')
+])
+
+
+@app.callback(
+    Output('output-serverside', 'children'),
+    [Input('input', 'value')])
+def update_output(value):
+    return 'Server says "{}"'.format(value)
+
+
+app.callback(
+    Output('output-clientside', 'children'),
+    [Input('input', 'value')],
+    client_function=ClientFunction(
+        namespace='clientside',
+        function_name='display'
+    )
+)
+
+if __name__ == '__main__':
+    app.run_server(debug=True)
diff --git a/clientside_1_data_filtering.py b/clientside_1_data_filtering.py
new file mode 100644
index 00000000..2fa0c6ca
--- /dev/null
+++ b/clientside_1_data_filtering.py
@@ -0,0 +1,64 @@
+import dash
+from dash.dependencies import Input, Output, State, ClientFunction
+import dash_core_components as dcc
+import dash_html_components as html
+
+import pandas as pd
+
+df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminder_unfiltered.csv')
+
+app = dash.Dash(
+    __name__,
+    external_scripts=['https://cdnjs.cloudflare.com/ajax/libs/ramda/0.25.0/ramda.min.js']
+)
+app.css.config.serve_locally = True
+app.scripts.config.serve_locally = True
+
+
+
+app.layout = html.Div([
+    dcc.Store(
+        id='df',
+        data=df.to_dict('records')
+    ),
+
+    dcc.Input(
+        id='country-search',
+        value='Canada'
+    ),
+
+    dcc.Dropdown(
+        id='year',
+        options=[
+            {'value': i, 'label': i}
+            for i in df.year.unique()
+        ],
+        multi=True,
+        value=df.year.unique()
+    ),
+
+    dcc.RadioItems(
+        id='mode',
+        options=[
+            {'label': 'Lines', 'value': 'lines'},
+            {'label': 'Markers', 'value': 'markers'},
+        ],
+        value='lines'
+    ),
+
+    dcc.Graph(id='my-fig'),
+
+])
+
+
+app.callback(
+    Output('my-fig', 'figure'),
+    [Input('country-search', 'value'),
+     Input('year', 'value'),
+     Input('mode', 'value')],
+    [State('df', 'data')],
+    client_function=ClientFunction('clientside', 'updateFig'))
+
+
+if __name__ == '__main__':
+    app.run_server(debug=True, dev_tools_hot_reload=False)
diff --git a/clientside_2_chaining_clientside_and_serverside.py b/clientside_2_chaining_clientside_and_serverside.py
new file mode 100644
index 00000000..12edf287
--- /dev/null
+++ b/clientside_2_chaining_clientside_and_serverside.py
@@ -0,0 +1,82 @@
+import dash
+from dash.dependencies import Input, Output, State, ClientFunction
+import dash_core_components as dcc
+import dash_html_components as html
+
+import pandas as pd
+
+df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminder_unfiltered.csv')
+
+app = dash.Dash(
+    __name__,
+    external_scripts=['https://cdnjs.cloudflare.com/ajax/libs/ramda/0.25.0/ramda.min.js']
+)
+app.css.config.serve_locally = True
+app.scripts.config.serve_locally = True
+
+
+
+app.layout = html.Div([
+
+    html.Label('x'),
+    dcc.Input(id='x', value=3),
+
+    html.Label('y'),
+    dcc.Input(id='y', value=6),
+
+    # clientside
+    html.Label('x + y (clientside)'),
+    dcc.Input(id='x+y'),
+
+    # server-side
+    html.Label('x+y / 2 (serverside - takes 5 seconds)'),
+    dcc.Input(id='x+y / 2'),
+
+    # server-side
+    html.Div([
+        html.Label('Display x, y, x+y/2 (serverside) - takes 5 seconds'),
+        html.Pre(id='display-all-of-the-values'),
+    ]),
+
+    # clientside
+    html.Label('Mean(x, y, x+y, x+y/2) (clientside)'),
+    html.Div(id='mean-of-all-values'),
+
+
+])
+
+
+
+app.callback(
+    Output('x+y', 'value'),
+    [Input('x', 'value'),
+     Input('y', 'value')],
+    client_function=ClientFunction('R', 'add'))
+
+
+@app.callback(Output('x+y / 2', 'value'),
+              [Input('x+y', 'value')])
+def divide_by_two(value):
+    import time; time.sleep(4)
+    return float(value) / 2.0
+
+
+@app.callback(Output('display-all-of-the-values', 'children'),
+              [Input('x', 'value'),
+               Input('y', 'value'),
+               Input('x+y', 'value'),
+               Input('x+y / 2', 'value')])
+def display_all(*args):
+    import time; time.sleep(4)
+    return '\n'.join([str(a) for a in args])
+
+
+app.callback(
+    Output('mean-of-all-values', 'children'),
+    [Input('x', 'value'), Input('y', 'value'),
+     Input('x+y', 'value'), Input('x+y / 2', 'value')],
+    client_function=ClientFunction('clientside', 'mean'))
+
+
+if __name__ == '__main__':
+    app.run_server(debug=True, dev_tools_hot_reload=False)
diff --git a/clientside_3_table_manipulation.py b/clientside_3_table_manipulation.py
new file mode 100644
index 00000000..51bd44c5
--- /dev/null
+++ b/clientside_3_table_manipulation.py
@@ -0,0 +1,71 @@
+import dash
+from dash.dependencies import Input, Output, State, ClientFunction
+import dash_core_components as dcc
+import dash_html_components as html
+import dash_table
+import json
+
+import pandas as pd
+
+app = dash.Dash(
+    __name__,
+    external_scripts=['https://cdnjs.cloudflare.com/ajax/libs/ramda/0.25.0/ramda.min.js']
+)
+app.css.config.serve_locally = True
+app.scripts.config.serve_locally = True
+
+
+app.layout = html.Div([
+    html.Label('New Column'),
+    dcc.Input(id='new-column-name', placeholder='name'),
+    html.Button('Add Column', id='add-column', n_clicks=0),
+    html.Button('Add Row', id='add-row', n_clicks=1),
+    dash_table.DataTable(
+        id='table',
+        editable=True,
+    ),
+
+    html.Div(html.B('Clientside')),
+    dcc.Graph(id='graph'),
+
+    html.B('Server Side'),
+    html.Pre(id='display')
+])
+
+
+app.callback(
+    Output('table', 'columns'),
+    [Input('add-column', 'n_clicks')],
+    [State('new-column-name', 'value'),
+     State('table', 'columns')],
+    client_function=ClientFunction('clientside', 'tableColumns'))
+
+
+app.callback(
+    Output('table', 'data'),
+    [Input('table', 'columns'),
+     Input('add-row', 'n_clicks')],
+    [State('table', 'data')],
+    client_function=ClientFunction('clientside', 'tableData'))
+
+
+app.callback(
+    Output('graph', 'figure'),
+    [Input('table', 'data')],
+    client_function=ClientFunction('clientside', 'graphTable'))
+
+
+@app.callback(Output('display', 'children'),
+              [Input('table', 'columns'),
+               Input('table', 'data')])
+def display_data(columns, data):
+    return html.Div([
+        html.Div(html.B('Columns')),
+        html.Pre(json.dumps(columns, indent=2)),
+        html.Div(html.B('Data')),
+        html.Pre(json.dumps(data, indent=2)),
+    ])
+
+
+if __name__ == '__main__':
+    app.run_server(debug=True, dev_tools_hot_reload=False)
diff --git a/clientside_4_refresh_data.py b/clientside_4_refresh_data.py
new file mode 100644
index 00000000..ac6421f0
--- /dev/null
+++ b/clientside_4_refresh_data.py
@@ -0,0 +1,76 @@
+import dash
+from dash.dependencies import Input, Output, State, ClientFunction
+import dash_core_components as dcc
+import dash_html_components as html
+
+import numpy as np
+import pandas as pd
+
+df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminder_unfiltered.csv')
+
+app = dash.Dash(
+    __name__,
+    external_scripts=['https://cdnjs.cloudflare.com/ajax/libs/ramda/0.25.0/ramda.min.js']
+)
+app.css.config.serve_locally = True
+app.scripts.config.serve_locally = True
+
+df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminder_unfiltered.csv')
+
+app.layout = html.Div([
+    html.Button('Refresh Data', id='refresh', n_clicks=0),
+    dcc.Store(id='df', data=df.to_dict('rows')),
+    html.Pre(id='head'),
+
+    dcc.Dropdown(
+        id='country-search',
+        options=[
+            {'value': i, 'label': i}
+            for i in df.country.unique()
+        ],
+        value='Canada'
+    ),
+
+    dcc.Dropdown(
+        id='year',
+        options=[
+            {'value': i, 'label': i}
+            for i in df.year.unique()
+        ],
+        multi=True,
+        value=df.year.unique()
+    ),
+
+    dcc.RadioItems(
+        id='mode',
+        options=[
+            {'label': 'Lines', 'value': 'lines'},
+            {'label': 'Markers', 'value': 'markers'},
+        ],
+        value='markers'
+    ),
+
+    dcc.Graph(id='my-fig'),
+
+])
+
+
+@app.callback(Output('df', 'data'), [Input('refresh', 'n_clicks')])
+def update_data(n_clicks):
+    df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminder_unfiltered.csv')
+    df['lifeExp'] = np.random.randn(len(df))
+    df['gdpPercap'] = np.random.randn(len(df))
+    return df.to_dict('records')
+
+
+app.callback(
+    Output('my-fig', 'figure'),
+    [Input('country-search', 'value'),
+     Input('year', 'value'),
+     Input('mode', 'value'),
+     Input('df', 'data')],
+    client_function=ClientFunction('clientside', 'updateFig'))
+
+
+if __name__ == '__main__':
+    app.run_server(debug=True, dev_tools_hot_reload=False)
diff --git a/clientside_5_slider.py b/clientside_5_slider.py
new file mode 100644
index 00000000..dafa6585
--- /dev/null
+++ b/clientside_5_slider.py
@@ -0,0 +1,57 @@
+import dash
+from dash.dependencies import Input, Output, State, ClientFunction
+import dash_core_components as dcc
+import dash_html_components as html
+
+import pandas as pd
+
+df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv')
+
+app = dash.Dash(
+    __name__,
+    external_scripts=['https://cdnjs.cloudflare.com/ajax/libs/ramda/0.25.0/ramda.min.js']
+)
+app.css.config.serve_locally = True
+app.scripts.config.serve_locally = True
+
+
+
+app.layout = html.Div([
+    dcc.Store(
+        id='df',
+        data=df.to_dict('records')
+    ),
+
+    html.Div(style={'padding': 50}, children=[
+        dcc.Dropdown(
+            id='country-search',
+            options=[{'label': i, 'value': i} for i in df['country'].unique()],
+            value=df['country'].unique(),
+            multi=True
+        ),
+
+        dcc.Slider(
+            id='year',
+            min=df['year'].min(),
+            max=df['year'].max(),
+            value=df['year'].min(),
+            marks={str(year): str(year) for year in df['year'].unique()},
+            updatemode='drag',
+            step=5
+        ),
+    ]),
+
+    dcc.Graph(id='my-fig'),
+])
+
+
+app.callback(
+    Output('my-fig', 'figure'),
+    [Input('country-search', 'value'),
+     Input('year', 'value')],
+    [State('df', 'data')],
+    client_function=ClientFunction('clientside', 'animateFig'))
+
+
+if __name__ == '__main__':
+    app.run_server(debug=True, dev_tools_hot_reload=False)
