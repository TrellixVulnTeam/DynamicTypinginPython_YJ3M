commit bf26213797c7fc944101fae098c1b0565a57acf7
Author: alexcjohnson <alex@plot.ly>
Date:   Wed May 29 11:52:16 2019 -0400

    underscore traverse(_with_paths) methods of base Component

diff --git a/dash/dash.py b/dash/dash.py
index 1e31a74f..9f5feb05 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -914,7 +914,7 @@ class Dash(object):
         def _validate_value(val, index=None):
             # val is a Component
             if isinstance(val, Component):
-                for p, j in val.traverse_with_paths():
+                for p, j in val._traverse_with_paths():
                     # check each component value in the tree
                     if not _value_is_valid(j):
                         _raise_invalid(
@@ -1194,7 +1194,7 @@ class Dash(object):
         layout_id = getattr(self.layout, 'id', None)
 
         component_ids = {layout_id} if layout_id else set()
-        for component in to_validate.traverse():
+        for component in to_validate._traverse():
             component_id = getattr(component, 'id', None)
             if component_id and component_id in component_ids:
                 raise exceptions.DuplicateIdError(
diff --git a/dash/development/base_component.py b/dash/development/base_component.py
index 6cb9297c..cfd829f6 100644
--- a/dash/development/base_component.py
+++ b/dash/development/base_component.py
@@ -208,12 +208,12 @@ class Component(object):
         """Delete items by ID in the tree of children."""
         return self._get_set_or_delete(id, 'delete')
 
-    def traverse(self):
+    def _traverse(self):
         """Yield each item in the tree."""
-        for t in self.traverse_with_paths():
+        for t in self._traverse_with_paths():
             yield t[1]
 
-    def traverse_with_paths(self):
+    def _traverse_with_paths(self):
         """Yield each item with its path in the tree."""
         children = getattr(self, 'children', None)
         children_type = type(children).__name__
@@ -224,7 +224,7 @@ class Component(object):
         # children is just a component
         if isinstance(children, Component):
             yield "[*] " + children_string, children
-            for p, t in children.traverse_with_paths():
+            for p, t in children._traverse_with_paths():
                 yield "\n".join(["[*] " + children_string, p]), t
 
         # children is a list of components
@@ -238,12 +238,12 @@ class Component(object):
                 yield list_path, i
 
                 if isinstance(i, Component):
-                    for p, t in i.traverse_with_paths():
+                    for p, t in i._traverse_with_paths():
                         yield "\n".join([list_path, p]), t
 
     def __iter__(self):
         """Yield IDs in the tree of children."""
-        for t in self.traverse():
+        for t in self._traverse():
             if (isinstance(t, Component) and
                     getattr(t, 'id', None) is not None):
 
diff --git a/tests/unit/dash/development/test_base_component.py b/tests/unit/dash/development/test_base_component.py
index ab1a3ce2..c91baa6c 100644
--- a/tests/unit/dash/development/test_base_component.py
+++ b/tests/unit/dash/development/test_base_component.py
@@ -150,7 +150,7 @@ class TestComponent(unittest.TestCase):
 
     def test_traverse_with_nested_children_with_mixed_strings_and_without_lists(self):  # noqa: E501
         c, c1, c2, c3, c4, c5 = nested_tree()
-        elements = [i for i in c.traverse()]
+        elements = [i for i in c._traverse()]
         self.assertEqual(
             elements,
             c.children + [c3] + [c2] + c2.children
@@ -160,7 +160,7 @@ class TestComponent(unittest.TestCase):
         c, c1, c2, c3, c4, c5 = nested_tree()
         c2.children = tuple(c2.children)
         c.children = tuple(c.children)
-        elements = [i for i in c.traverse()]
+        elements = [i for i in c._traverse()]
         self.assertEqual(
             elements,
             list(c.children) + [c3] + [c2] + list(c2.children)
