commit f6d8e5ad2d91fdcbb7a5bbb6378a14771b3f8a11
Author: byron <byron@plot.ly>
Date:   Tue Aug 27 13:43:26 2019 -0400

    tmp save

diff --git a/dash/testing/browser.py b/dash/testing/browser.py
index 85f3fd67..18526e41 100644
--- a/dash/testing/browser.py
+++ b/dash/testing/browser.py
@@ -32,21 +32,24 @@ class Browser(DashPageMixin):
     def __init__(
         self,
         browser,
+        remote=False,
+        remote_url=None,
         headless=False,
         options=None,
-        remote=None,
         download_path=None,
         percy_finalize=True,
         wait_timeout=10,
     ):
         self._browser = browser.lower()
+        self._remote_url = remote_url
+        self._remote = remote
         self._headless = headless
         self._options = options
         self._download_path = download_path
         self._wait_timeout = wait_timeout
         self._percy_finalize = percy_finalize
 
-        self._driver = until(lambda: self.get_webdriver(remote), timeout=1)
+        self._driver = until(lambda: self.get_webdriver(), timeout=1)
         self._driver.implicitly_wait(2)
 
         self._wd_wait = WebDriverWait(self.driver, wait_timeout)
@@ -285,16 +288,14 @@ class Browser(DashPageMixin):
             )
         )
 
-    def get_webdriver(self, remote):
+    def get_webdriver(self):
         try:
             return (
                 getattr(self, "_get_{}".format(self._browser))()
-                if remote is None
+                if not self._remote
                 else webdriver.Remote(
-                    command_executor=remote,
-                    desired_capabilities=getattr(
-                        DesiredCapabilities, self._browser.upper()
-                    ),
+                    command_executor=self._remote_url,
+                    desired_capabilities={'browserName': self._browser}
                 )
             )
         except WebDriverException:
diff --git a/dash/testing/plugin.py b/dash/testing/plugin.py
index b6b8d48f..256e31bd 100644
--- a/dash/testing/plugin.py
+++ b/dash/testing/plugin.py
@@ -14,12 +14,10 @@ try:
 except ImportError:
     warnings.warn("run `pip install dash[testing]` if you need dash.testing")
 
-WEBDRIVERS = {"Chrome", "Firefox", "Remote"}
+WEBDRIVERS = {"Chrome", "Firefox"}
 
 
 def pytest_addoption(parser):
-    # Add options to the pytest parser, either on the commandline or ini
-    # TODO add more options for the selenium driver.
     dash = parser.getgroup("Dash", "Dash Integration Tests")
 
     dash.addoption(
@@ -29,6 +27,19 @@ def pytest_addoption(parser):
         help="Name of the selenium driver to use",
     )
 
+    dash.addoption(
+        "--remote",
+        action="store_true",
+        help="instruct pytest to use selenium grid"
+    )
+
+    dash.addoption(
+        "--remote_url",
+        action="store",
+        default="http://localhost:4444/wd/hub",
+        help="set a different selenium grid remote url if other than default"
+    )
+
     dash.addoption(
         "--headless",
         action="store_true",
@@ -99,6 +110,8 @@ def dashr_server():
 def dash_br(request, tmpdir):
     with Browser(
         browser=request.config.getoption("webdriver"),
+        remote=request.config.getoption("remote"),
+        remote_url=request.config.getoption("remote_url"),
         headless=request.config.getoption("headless"),
         options=request.config.hook.pytest_setup_options(),
         download_path=tmpdir.mkdir("download").strpath,
@@ -112,6 +125,8 @@ def dash_duo(request, dash_thread_server, tmpdir):
     with DashComposite(
         dash_thread_server,
         browser=request.config.getoption("webdriver"),
+        remote=request.config.getoption("remote"),
+        remote_url=request.config.getoption("remote_url"),
         headless=request.config.getoption("headless"),
         options=request.config.hook.pytest_setup_options(),
         download_path=tmpdir.mkdir("download").strpath,
@@ -125,6 +140,8 @@ def dashr(request, dashr_server, tmpdir):
     with DashRComposite(
         dashr_server,
         browser=request.config.getoption("webdriver"),
+        remote=request.config.getoption("remote"),
+        remote_url=request.config.getoption("remote_url"),
         headless=request.config.getoption("headless"),
         options=request.config.hook.pytest_setup_options(),
         download_path=tmpdir.mkdir("download").strpath,
