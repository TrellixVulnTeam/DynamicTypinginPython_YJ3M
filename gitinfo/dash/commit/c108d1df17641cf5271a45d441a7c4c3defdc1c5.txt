commit c108d1df17641cf5271a45d441a7c4c3defdc1c5
Author: Philippe Duval <philippe@plot.ly>
Date:   Thu Oct 18 14:23:12 2018 -0400

    format prettier.

diff --git a/package-lock.json b/package-lock.json
index d7d4231e..6bd2f4b6 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -1,6 +1,6 @@
 {
   "name": "dash-renderer",
-  "version": "0.14.1",
+  "version": "0.14.3",
   "lockfileVersion": 1,
   "requires": true,
   "dependencies": {
@@ -129,6 +129,22 @@
       "integrity": "sha512-x5HFsW+E/nQalGMw7hu+fvPqnBeBaIr0lWJ2SG0PPL2j+Pm9lYvCrsZJGIgauPIENx0v10INIyFjmSNUD/gSqQ==",
       "dev": true
     },
+    "@babel/polyfill": {
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/@babel/polyfill/-/polyfill-7.0.0.tgz",
+      "integrity": "sha512-dnrMRkyyr74CRelJwvgnnSUDh2ge2NCTyHVwpOdvRMHtJUyxLtMAfhBN3s64pY41zdw0kgiLPh6S20eb1NcX6Q==",
+      "requires": {
+        "core-js": "^2.5.7",
+        "regenerator-runtime": "^0.11.1"
+      },
+      "dependencies": {
+        "core-js": {
+          "version": "2.5.7",
+          "resolved": "https://registry.npmjs.org/core-js/-/core-js-2.5.7.tgz",
+          "integrity": "sha512-RszJCAxg/PP6uzXVXL6BsxSXx/B05oJAQ2vkJRjyjrEcNVycaqOmNb5OTxZPE3xa5gwZduqza6L9JOCenh/Ecw=="
+        }
+      }
+    },
     "@babel/template": {
       "version": "7.1.2",
       "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.1.2.tgz",
@@ -1175,7 +1191,7 @@
     },
     "babel-plugin-syntax-jsx": {
       "version": "6.18.0",
-      "resolved": "http://registry.npmjs.org/babel-plugin-syntax-jsx/-/babel-plugin-syntax-jsx-6.18.0.tgz",
+      "resolved": "https://registry.npmjs.org/babel-plugin-syntax-jsx/-/babel-plugin-syntax-jsx-6.18.0.tgz",
       "integrity": "sha1-CvMqmm4Tyno/1QaeYtew9Y0NiUY="
     },
     "babel-plugin-syntax-trailing-function-commas": {
diff --git a/src/AppContainer.react.js b/src/AppContainer.react.js
index 786a6fad..f916e587 100644
--- a/src/AppContainer.react.js
+++ b/src/AppContainer.react.js
@@ -7,7 +7,6 @@ import Loading from './components/core/Loading.react';
 import Toolbar from './components/core/Toolbar.react';
 import Reloader from './components/core/Reloader.react';
 
-
 function UnconnectedAppContainer() {
     return (
         <Authentication>
diff --git a/src/actions/api.js b/src/actions/api.js
index 4fd205a3..8706e512 100644
--- a/src/actions/api.js
+++ b/src/actions/api.js
@@ -98,9 +98,5 @@ export function login(oauth_token) {
 }
 
 export function getReloadHash() {
-    return apiThunk(
-        '_reload-hash',
-        'GET',
-        'reloadRequest'
-    )
+    return apiThunk('_reload-hash', 'GET', 'reloadRequest');
 }
diff --git a/src/components/core/DocumentTitle.react.js b/src/components/core/DocumentTitle.react.js
index 72bba807..a719fdae 100644
--- a/src/components/core/DocumentTitle.react.js
+++ b/src/components/core/DocumentTitle.react.js
@@ -1,15 +1,15 @@
 /* global document:true */
 
-import {connect} from 'react-redux'
-import {any} from 'ramda'
-import {Component} from 'react'
+import {connect} from 'react-redux';
+import {any} from 'ramda';
+import {Component} from 'react';
 import PropTypes from 'prop-types';
 
 class DocumentTitle extends Component {
     constructor(props) {
         super(props);
         this.state = {
-            initialTitle: document.title
+            initialTitle: document.title,
         };
     }
 
@@ -31,11 +31,9 @@ class DocumentTitle extends Component {
 }
 
 DocumentTitle.propTypes = {
-    requestQueue: PropTypes.array.isRequired
+    requestQueue: PropTypes.array.isRequired,
 };
 
-export default connect(
-    state => ({
-        requestQueue: state.requestQueue
-    })
-)(DocumentTitle);
+export default connect(state => ({
+    requestQueue: state.requestQueue,
+}))(DocumentTitle);
diff --git a/src/components/core/Loading.react.js b/src/components/core/Loading.react.js
index d7ee0ddb..f0701eb3 100644
--- a/src/components/core/Loading.react.js
+++ b/src/components/core/Loading.react.js
@@ -1,24 +1,19 @@
-import {connect} from 'react-redux'
-import {any} from 'ramda'
-import React from 'react'
+import {connect} from 'react-redux';
+import {any} from 'ramda';
+import React from 'react';
 import PropTypes from 'prop-types';
 
 function Loading(props) {
     if (any(r => r.status === 'loading', props.requestQueue)) {
-        return (
-            <div className="_dash-loading-callback"/>
-        );
-    } 
-        return null;
-    
+        return <div className="_dash-loading-callback" />;
+    }
+    return null;
 }
 
 Loading.propTypes = {
-    requestQueue: PropTypes.array.isRequired
+    requestQueue: PropTypes.array.isRequired,
 };
 
-export default connect(
-    state => ({
-        requestQueue: state.requestQueue
-    })
-)(Loading);
+export default connect(state => ({
+    requestQueue: state.requestQueue,
+}))(Loading);
diff --git a/src/components/core/NotifyObservers.react.js b/src/components/core/NotifyObservers.react.js
index 9f49a3d3..b72dc959 100644
--- a/src/components/core/NotifyObservers.react.js
+++ b/src/components/core/NotifyObservers.react.js
@@ -9,14 +9,14 @@ import PropTypes from 'prop-types';
  * its child as a prop
  */
 
-function mapStateToProps (state) {
+function mapStateToProps(state) {
     return {
         dependencies: state.dependenciesRequest.content,
-        paths: state.paths
+        paths: state.paths,
     };
 }
 
-function mapDispatchToProps (dispatch) {
+function mapDispatchToProps(dispatch) {
     return {dispatch};
 }
 
@@ -37,7 +37,7 @@ function mergeProps(stateProps, dispatchProps, ownProps) {
             const payload = {
                 props: newProps,
                 id: ownProps.id,
-                itempath: stateProps.paths[ownProps.id]
+                itempath: stateProps.paths[ownProps.id],
             };
 
             // Update this component's props
@@ -45,12 +45,11 @@ function mergeProps(stateProps, dispatchProps, ownProps) {
 
             // Update output components that depend on this input
             dispatch(notifyObservers({id: ownProps.id, props: newProps}));
-        }
-    }
-
+        },
+    };
 }
 
-function NotifyObserversComponent ({
+function NotifyObserversComponent({
     children,
     id,
     paths,
@@ -58,19 +57,20 @@ function NotifyObserversComponent ({
     dependencies,
 
     fireEvent,
-    setProps
+    setProps,
 }) {
-    const thisComponentTriggersEvents = (
-        dependencies && dependencies.find(dependency => (
+    const thisComponentTriggersEvents =
+        dependencies &&
+        dependencies.find(dependency =>
             dependency.events.find(event => event.id === id)
-        ))
-    );
-    const thisComponentSharesState = (
-        dependencies && dependencies.find(dependency => (
-            dependency.inputs.find(input => input.id === id) ||
-            dependency.state.find(state => state.id === id)
-        ))
-    );
+        );
+    const thisComponentSharesState =
+        dependencies &&
+        dependencies.find(
+            dependency =>
+                dependency.inputs.find(input => input.id === id) ||
+                dependency.state.find(state => state.id === id)
+        );
     /*
      * Only pass in `setProps` and `fireEvent` if they are actually
      * necessary.
@@ -87,8 +87,8 @@ function NotifyObserversComponent ({
      * or `subscribed_properties` instead of `fireEvent` and `setProps`.
      */
     const extraProps = {};
-    if (thisComponentSharesState &&
-
+    if (
+        thisComponentSharesState &&
         // there is a bug with graphs right now where
         // the restyle listener gets assigned with a
         // setProps function that was created before
@@ -104,15 +104,14 @@ function NotifyObserversComponent ({
 
     if (!isEmpty(extraProps)) {
         return React.cloneElement(children, extraProps);
-    } 
-        return children;
-    
+    }
+    return children;
 }
 
 NotifyObserversComponent.propTypes = {
     id: PropTypes.string.isRequired,
     children: PropTypes.node.isRequired,
-    path: PropTypes.array.isRequired
+    path: PropTypes.array.isRequired,
 };
 
 export default connect(
diff --git a/src/components/core/Reloader.react.js b/src/components/core/Reloader.react.js
index 02d52a2d..4b7b9cde 100644
--- a/src/components/core/Reloader.react.js
+++ b/src/components/core/Reloader.react.js
@@ -2,14 +2,14 @@
 import R from 'ramda';
 import React from 'react';
 import PropTypes from 'prop-types';
-import {connect} from 'react-redux'
-import {getReloadHash} from "../../actions/api";
+import {connect} from 'react-redux';
+import {getReloadHash} from '../../actions/api';
 
 class Reloader extends React.Component {
     constructor(props) {
         super(props);
         if (props.config.hot_reload) {
-            const { interval, max_retry } = props.config.hot_reload;
+            const {interval, max_retry} = props.config.hot_reload;
             this.state = {
                 hash: null,
                 interval,
@@ -17,11 +17,11 @@ class Reloader extends React.Component {
                 intervalId: null,
                 packages: null,
                 max_retry: max_retry,
-            }
+            };
         } else {
             this.state = {
-                disabled: true
-            }
+                disabled: true,
+            };
         }
         this._retry = 0;
         this._head = document.querySelector('head');
@@ -33,15 +33,21 @@ class Reloader extends React.Component {
             if (this.state.hash === null) {
                 this.setState({
                     hash: reloadRequest.content.reloadHash,
-                    packages: reloadRequest.content.packages
+                    packages: reloadRequest.content.packages,
                 });
                 return;
             }
             if (reloadRequest.content.reloadHash !== this.state.hash) {
-                if (reloadRequest.content.hard
-                    || reloadRequest.content.packages.length !== this.state.packages.length
-                    || !R.all(R.map(x => R.contains(x, this.state.packages),
-                        reloadRequest.content.packages))
+                if (
+                    reloadRequest.content.hard ||
+                    reloadRequest.content.packages.length !==
+                        this.state.packages.length ||
+                    !R.all(
+                        R.map(
+                            x => R.contains(x, this.state.packages),
+                            reloadRequest.content.packages
+                        )
+                    )
                 ) {
                     // Look if it was a css file.
                     let was_css = false;
@@ -61,8 +67,9 @@ class Reloader extends React.Component {
                                 nodesToDisable.push(node);
                                 node = it.iterateNext();
                             }
-                            nodesToDisable.forEach(
-                                n => n.setAttribute('disabled', 'disabled'));
+                            nodesToDisable.forEach(n =>
+                                n.setAttribute('disabled', 'disabled')
+                            );
 
                             const link = document.createElement('link');
                             link.href = `${a.url}?m=${a.modified}`;
@@ -83,13 +90,13 @@ class Reloader extends React.Component {
                         // Since it's only a css reload,
                         // we just change the hash.
                         this.setState({
-                            hash: reloadRequest.content.reloadHash
+                            hash: reloadRequest.content.reloadHash,
                         });
                     }
                 } else {
                     // Soft reload
                     window.clearInterval(this.state.intervalId);
-                    dispatch({'type': 'RELOAD'});
+                    dispatch({type: 'RELOAD'});
                 }
             }
         } else if (reloadRequest.status === 500) {
@@ -101,20 +108,20 @@ class Reloader extends React.Component {
                     Reloader failed after ${this._retry} times.
                     Please check your application for errors. 
                     `
-                )
+                );
             }
             this._retry++;
         }
     }
 
     componentDidMount() {
-        const { dispatch } = this.props;
-        const { disabled, interval } = this.state;
+        const {dispatch} = this.props;
+        const {disabled, interval} = this.state;
         if (!disabled && !this.state.intervalId) {
             const intervalId = setInterval(() => {
                 dispatch(getReloadHash());
             }, interval);
-            this.setState({intervalId})
+            this.setState({intervalId});
         }
     }
 
@@ -146,4 +153,3 @@ export default connect(
     }),
     dispatch => ({dispatch})
 )(Reloader);
- 
\ No newline at end of file
diff --git a/src/components/core/Toolbar.react.js b/src/components/core/Toolbar.react.js
index 892491b9..6abce097 100644
--- a/src/components/core/Toolbar.react.js
+++ b/src/components/core/Toolbar.react.js
@@ -5,84 +5,81 @@ import {merge} from 'ramda';
 import {redo, undo} from '../../actions/index.js';
 import Radium from 'radium';
 
-
 function UnconnectedToolbar(props) {
     const {dispatch, history} = props;
-    const styles={
+    const styles = {
         parentSpanStyle: {
             display: 'inline-block',
-            'opacity': '0.2',
+            opacity: '0.2',
             ':hover': {
-                'opacity': 1
-            }
+                opacity: 1,
+            },
         },
         iconStyle: {
-            fontSize: 20
+            fontSize: 20,
         },
         labelStyle: {
-            fontSize: 15
-        }
-    }
+            fontSize: 15,
+        },
+    };
 
     const undoLink = (
         <span
             key="undoLink"
-            style={merge({
-                'color': history.past.length ? '#0074D9' : 'grey',
-                'cursor': history.past.length ? 'pointer' : 'default'
-            }, styles.parentSpanStyle)}
+            style={merge(
+                {
+                    color: history.past.length ? '#0074D9' : 'grey',
+                    cursor: history.past.length ? 'pointer' : 'default',
+                },
+                styles.parentSpanStyle
+            )}
             onClick={() => dispatch(undo())}
         >
-            <div style={merge(
-                {transform: 'rotate(270deg)'},
-                styles.iconStyle
-            )}>
+            <div style={merge({transform: 'rotate(270deg)'}, styles.iconStyle)}>
                 {'↺'}
             </div>
-            <div style={styles.labelStyle}>
-                undo
-            </div>
+            <div style={styles.labelStyle}>undo</div>
         </span>
     );
 
     const redoLink = (
         <span
             key="redoLink"
-            style={merge({
-                'color': history.future.length ? '#0074D9' : 'grey',
-                'cursor': history.future.length ? 'pointer' : 'default',
-                'marginLeft': 10
-            }, styles.parentSpanStyle)}
+            style={merge(
+                {
+                    color: history.future.length ? '#0074D9' : 'grey',
+                    cursor: history.future.length ? 'pointer' : 'default',
+                    marginLeft: 10,
+                },
+                styles.parentSpanStyle
+            )}
             onClick={() => dispatch(redo())}
         >
-            <div style={merge(
-                {transform: 'rotate(90deg)'},
-                styles.iconStyle
-            )}>
+            <div style={merge({transform: 'rotate(90deg)'}, styles.iconStyle)}>
                 {'↻'}
             </div>
-            <div style={styles.labelStyle}>
-                redo
-            </div>
+            <div style={styles.labelStyle}>redo</div>
         </span>
     );
 
     return (
         <div
-            className="_dash-undo-redo" 
+            className="_dash-undo-redo"
             style={{
-                'position': 'fixed',
-                'bottom': '30px',
-                'left': '30px',
-                'fontSize': '20px',
-                'textAlign': 'center',
-                'zIndex': '9999',
-                'backgroundColor': 'rgba(255, 255, 255, 0.9)',
+                position: 'fixed',
+                bottom: '30px',
+                left: '30px',
+                fontSize: '20px',
+                textAlign: 'center',
+                zIndex: '9999',
+                backgroundColor: 'rgba(255, 255, 255, 0.9)',
             }}
         >
-            <div style={{
-                'position': 'relative'
-            }}>
+            <div
+                style={{
+                    position: 'relative',
+                }}
+            >
                 {history.past.length > 0 ? undoLink : null}
                 {history.future.length > 0 ? redoLink : null}
             </div>
@@ -97,7 +94,7 @@ UnconnectedToolbar.propTypes = {
 
 const Toolbar = connect(
     state => ({
-        history: state.history
+        history: state.history,
     }),
     dispatch => ({dispatch})
 )(Radium(UnconnectedToolbar));
diff --git a/src/reducers/reducer.js b/src/reducers/reducer.js
index ac118546..2665cda2 100644
--- a/src/reducers/reducer.js
+++ b/src/reducers/reducer.js
@@ -101,7 +101,7 @@ function rootReducer(reducer) {
             state = {history};
         }
         return reducer(state, action);
-    }
+    };
 }
 
 export default rootReducer(recordHistory(reducer));
