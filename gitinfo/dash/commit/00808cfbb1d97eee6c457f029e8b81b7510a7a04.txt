commit 00808cfbb1d97eee6c457f029e8b81b7510a7a04
Author: byron <byron@plot.ly>
Date:   Fri Aug 16 22:44:18 2019 -0400

    :sparkles: renderer added to drive the process

diff --git a/dash-renderer/VERSION.txt b/dash-renderer/VERSION.txt
new file mode 100644
index 00000000..afaf360d
--- /dev/null
+++ b/dash-renderer/VERSION.txt
@@ -0,0 +1 @@
+1.0.0
\ No newline at end of file
diff --git a/dash-renderer/digest.json b/dash-renderer/digest.json
new file mode 100644
index 00000000..f707d6b9
--- /dev/null
+++ b/dash-renderer/digest.json
@@ -0,0 +1,13 @@
+{
+    "MD5 (dash_renderer.dev.js)":"e6d5a2bb6733ecd334d8aa4369560afe",
+    "MD5 (dash_renderer.dev.js.map)":"2f85eb3e5a9259ec6809513796e5f4aa",
+    "MD5 (dash_renderer.min.js)":"6904f54f3f135ae5e66853ce9e7e7bec",
+    "MD5 (dash_renderer.min.js.map)":"97e13dc663efea82b06083cab8520c1c",
+    "MD5 (prop-types@15.7.2.js)":"85947944e396a28895fad5f553eee36f",
+    "MD5 (prop-types@15.7.2.min.js)":"e3053393609bd2744010498629a43597",
+    "MD5 (react-dom@16.8.6.js)":"d7f8afaf3370a228c8d5c802c9d9a102",
+    "MD5 (react-dom@16.8.6.min.js)":"fad5842bd019c3878795ec52059f47fc",
+    "MD5 (react@16.8.6.js)":"bb95f4cd851114c374c3858e9c51da10",
+    "MD5 (react@16.8.6.min.js)":"f808b8e8ab51b0d9525795db3768cd86",
+    "dash_renderer":"1.0.0"
+}
\ No newline at end of file
diff --git a/dash-renderer/setup.py b/dash-renderer/setup.py
index c7fa9637..b058be3a 100644
--- a/dash-renderer/setup.py
+++ b/dash-renderer/setup.py
@@ -1,16 +1,16 @@
 from setuptools import setup
 
-version = {}
-exec(open('dash_renderer/version.py').read(), version)  # pylint: disable=exec-used
+with open('VERSION.txt', 'r') as fp:
+    version = fp.read().strip()
 
 setup(
-    name='dash_renderer',
-    version=version['__version__'],
-    author='Chris Parmer',
-    author_email='chris@plot.ly',
-    packages=['dash_renderer'],
+    name="dash_renderer",
+    version=version,
+    author="Chris Parmer",
+    author_email="chris@plot.ly",
+    packages=["dash_renderer"],
     include_package_data=True,
-    license='MIT',
-    description='Front-end component renderer for dash',
-    install_requires=[]
+    license="MIT",
+    description="Front-end component renderer for dash",
+    install_requires=[],
 )
diff --git a/dash/development/build_renderer.py b/dash/development/build_renderer.py
new file mode 100644
index 00000000..c575b0cb
--- /dev/null
+++ b/dash/development/build_renderer.py
@@ -0,0 +1,127 @@
+import os
+import sys
+import json
+import string
+import shutil
+import logging
+
+import coloredlogs
+import fire
+
+from .._utils import run_command_with_process, compute_md5, job
+
+logger = logging.getLogger(__name__)
+coloredlogs.install(
+    fmt="%(asctime)s,%(msecs)03d %(levelname)s - %(message)s",
+    datefmt="%H:%M:%S",
+)
+
+renderer_bundles = (
+    {
+        "name": "react",
+        "prod": ("umd", "react.production.min.js"),
+        "dev": ("umd", "react.development.js"),
+    },
+    {
+        "name": "react-dom",
+        "prod": ("umd", "react-dom.production.min.js"),
+        "dev": ("umd", "react-dom.development.js"),
+    },
+    {
+        "name": "prop-types",
+        "prod": ("prop-types.min.js",),
+        "dev": ("prop-types.js",),
+    },
+)
+
+
+def _concat(paths):
+    return os.path.realpath(os.path.sep.join(paths))
+
+
+root = _concat((__file__, *(os.pardir for _ in range(3))))
+renderer = _concat((root, "dash-renderer"))
+assets = _concat((renderer, "dash_renderer"))
+package_lock = _concat((renderer, "package-lock.json"))
+npm_modules = _concat((renderer, "node_modules"))
+versions = {}
+
+with open(_concat((renderer, "VERSION.txt")), "r") as fpv:
+    versions["version"] = fpv.read().strip()
+
+
+@job("run `npm i --ignore-scripts`")
+def npm():
+    try:
+        os.chdir(renderer)
+        logger.info("removing old package-lock.json")
+        os.remove(package_lock)
+    except OSError:
+        sys.exit(1)
+
+    run_command_with_process("npm i --ignore-scripts")
+
+
+@job("parse package-lock.json and produce the bundles")
+def bundles():
+    # make sure we start from fresh folder
+    if os.path.exists(assets):
+        logger.warning("ðŸš¨ %s already exists, remove it!", assets)
+        try:
+            shutil.rmtree(assets)
+            os.makedirs(assets)
+        except OSError:
+            logger.exception("ðŸš¨ having issues manipulate %s", assets)
+            sys.exit(1)
+
+    # parse the package-lock.json and copy bundles
+    with open(package_lock, "r") as fp:
+        deps = json.load(fp)["dependencies"]
+
+    for bundle in renderer_bundles:
+        name = bundle["name"]
+        version = deps[name]["version"]
+        versions[name.replace("-", "")] = version
+
+        logger.info("processing bundle => %s@%s", name, version)
+
+        shutil.copyfile(
+            _concat((npm_modules, name, *bundle["prod"])),
+            _concat((assets, "{}@{}.min.js".format(name, version))),
+        )
+
+        shutil.copyfile(
+            _concat((npm_modules, name, *bundle["dev"])),
+            _concat((assets, "{}@{}.js".format(name, version))),
+        )
+
+    # run build
+    os.chdir(renderer)
+    run_command_with_process("npm run build:renderer")
+
+    copies = os.listdir(assets)
+    logger.info("bundles in dash_renderer %s", copies)
+
+    # compute the fingerprint for all the assets
+    digest = {"dash_renderer": versions["version"]}
+    for copy in copies:
+        digest["MD5 ({})".format(copy)] = compute_md5(_concat((assets, copy)))
+
+    with open(_concat((renderer, "digest.json")), "w") as fp:
+        json.dump(digest, fp, sort_keys=True, indent=4, separators=(",", ":"))
+    logger.info(
+        "bundle digest in digest.json:\n%s", json.dumps(digest, indent=4)
+    )
+
+    # generate the __init__.py from template
+    with open(
+        _concat((os.path.dirname(__file__), "renderer_init.template"))
+    ) as fp:
+        t = string.Template(fp.read())
+
+    with open(_concat((assets, "__init__.py")), "w") as fp:
+        fp.write(t.safe_substitute(versions))
+
+
+def main():
+    fire.Fire()
diff --git a/dash/development/renderer_init.template b/dash/development/renderer_init.template
new file mode 100644
index 00000000..17d90ca5
--- /dev/null
+++ b/dash/development/renderer_init.template
@@ -0,0 +1,53 @@
+import sys
+
+__file__
+__version__ = "$version"
+
+_js_dist_dependencies = [
+    {
+        "external_url": {
+            "prod": [
+                "https://unpkg.com/react@$react/umd/react.production.min.js",
+                "https://unpkg.com/react-dom@$reactdom/umd/react-dom.production.min.js",
+                "https://unpkg.com/prop-types@$proptypes/prop-types.min.js",
+            ],
+            "dev": [
+                "https://unpkg.com/react@$react/umd/react.development.js",
+                "https://unpkg.com/react-dom@$reactdom/umd/react-dom.development.js",
+                "https://unpkg.com/prop-types@$proptypes/prop-types.js",
+            ],
+        },
+        "relative_package_path": {
+            "prod": [
+                "react@$react.min.js",
+                "react-dom@$reactdom.min.js",
+                "prop-types@$proptypes.min.js",
+            ],
+            "dev": [
+                "react@$react.js",
+                "react-dom@$reactdom.js",
+                "prop-types@$proptypes.js",
+            ],
+        },
+        "namespace": "dash_renderer",
+    }
+]
+
+
+_js_dist = [
+    {
+        "relative_package_path": "{}.min.js".format(__name__),
+        "dev_package_path": "{}.dev.js".format(__name__),
+        "external_url": "https://unpkg.com/dash-renderer@$version"
+        "/dash_renderer/dash_renderer.min.js",
+        "namespace": "dash_renderer",
+    },
+    {
+        "relative_package_path": "{}.min.js.map".format(__name__),
+        "dev_package_path": "{}.dev.js.map".format(__name__),
+        "external_url": "https://unpkg.com/dash-renderer@$version"
+        "/dash_renderer/dash_renderer.min.js.map",
+        "namespace": "dash_renderer",
+        "dynamic": True,
+    },
+]
diff --git a/requires-ci.txt b/requires-ci.txt
index fec63ac1..d369ee4f 100644
--- a/requires-ci.txt
+++ b/requires-ci.txt
@@ -8,3 +8,5 @@ pylint==1.9.4;python_version<"3.7"
 pylint==2.3.1;python_version=="3.7"
 astroid==2.2.5;python_version=="3.7"
 virtualenv;python_version=="2.7"
+fire
+coloredlogs
\ No newline at end of file
diff --git a/setup.py b/setup.py
index f54246f9..08952699 100644
--- a/setup.py
+++ b/setup.py
@@ -32,8 +32,9 @@ setup(
     },
     entry_points={
         "console_scripts": [
-            "dash-generate-components ="
-            " dash.development.component_generator:cli"
+            "dash-generate-components = "
+            "dash.development.component_generator:cli",
+            "renderer = dash.development.build_renderer:main",
         ],
         "pytest11": ["dash = dash.testing.plugin"],
     },
