commit 6bba6e9158c1390f16f6450f76d9e1e7bf9af630
Author: Ryan Marren <rymarr@tuta.io>
Date:   Fri Jun 22 08:05:17 2018 -0400

    Edge cases for JSON exception, and better formatting.

diff --git a/dash/dash.py b/dash/dash.py
index 030a043d..b3091d27 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -478,34 +478,41 @@ class Dash(object):
     def _validate_callback_output(self, output_value, output):
         valid = [str, dict, int, float, type(None), Component]
 
-        def _raise_invalid(bad_val, outer_type, bad_type, path, index=None):
+        def _raise_invalid(bad_val, outer_val, bad_type, path, index=None,
+                           toplevel=False):
+            outer_id = "id={:s}".format(outer_val.id) \
+                        if getattr(outer_val, 'id', False) else ''
+            outer_type = type(outer_val).__name__
             raise exceptions.ReturnValueNotJSONSerializable('''
-            The callback for property `{:s}` of component `{:s}`
-            returned a tree with one value having type `{:s}`
+            The callback for property `{property:s}` of component `{id:s}`
+            returned a {object:s} having type `{type:s}`
             which is not JSON serializable.
 
-            The value in question is located at
-
-            `{:s}`
-
+            {location_header:s}{location:s}
             and has string representation
-
-            `{}`.
+            `{bad_val}`
 
             In general, Dash properties can only be
             dash components, strings, dictionaries, numbers, None,
             or lists of those.
             '''.format(
-                output.component_property,
-                output.component_id,
-                bad_type,
-                (
-                    "outer list index {:d} ({:s}) -> "
-                    .format(index, outer_type)
-                    if index is not None
-                    else (outer_type + " -> ")
-                ) + path,
-                bad_val).replace('    ', ''))
+                property=output.component_property,
+                id=output.component_id,
+                object='tree with one value' if not toplevel else 'value',
+                type=bad_type,
+                location_header=(
+                    'The value in question is located at'
+                    if not toplevel else
+                    '''The value in question is either the only value returned,
+                    or is in the top level of the returned list,'''
+                ),
+                location=(
+                    "\n" +
+                    ("[{:d}] {:s} {:s}\n".format(index, outer_type, outer_id)
+                     if index is not None
+                     else (outer_type + ' ' + outer_id + "\n")) + path + "\n"
+                ) if not toplevel else '',
+                bad_val=bad_val).replace('    ', ''))
 
         def _value_is_valid(val):
             return (
@@ -515,15 +522,55 @@ class Dash(object):
             )
 
         def _validate_value(val, index=None):
+            # val is a Component
             if isinstance(val, Component):
                 for p, j in val.traverse_with_paths():
+                    # check each component value in the tree
                     if not _value_is_valid(j):
-                        _raise_invalid(j, type(val).__name__, type(j).__name__,
-                                       p, index)
+                        _raise_invalid(
+                            bad_val=j,
+                            outer_val=val,
+                            bad_type=type(j).__name__,
+                            path=p,
+                            index=index
+                        )
+
+                    # Children that are not of type Component or
+                    # collections.MutableSequence not returned by traverse
+                    child = getattr(j, 'children', None)
+                    if not isinstance(child, collections.MutableSequence):
+                        if child and not _value_is_valid(child):
+                            _raise_invalid(
+                                bad_val=child,
+                                outer_val=val,
+                                bad_type=type(child).__name__,
+                                path=p + type(child).__name__,
+                                index=index
+                            )
+
+                # Also check the child of val, as it will not be returned
+                child = getattr(val, 'children', None)
+                if not isinstance(child, collections.MutableSequence):
+                    if child and not _value_is_valid(child):
+                        _raise_invalid(
+                            bad_val=child,
+                            outer_val=val,
+                            bad_type=type(child).__name__,
+                            path=type(child).__name__,
+                            index=index
+                        )
+
+            # val is not a Component, but is at the top level of tree
             else:
                 if not _value_is_valid(val):
-                    _raise_invalid(val, type(val).__name__, type(val).__name__,
-                                   '', index)
+                    _raise_invalid(
+                        bad_val=val,
+                        outer_val=type(val).__name__,
+                        bad_type=type(val).__name__,
+                        path='',
+                        index=index,
+                        toplevel=True
+                    )
 
         if isinstance(output_value, list):
             for i, val in enumerate(output_value):
diff --git a/dash/development/base_component.py b/dash/development/base_component.py
index e45fdb90..36da23a5 100644
--- a/dash/development/base_component.py
+++ b/dash/development/base_component.py
@@ -158,26 +158,29 @@ class Component(collections.MutableMapping):
         """Yield each item with its path in the tree."""
         children = getattr(self, 'children', None)
         children_type = type(children).__name__
+        children_id = "id={:s}".format(children.id) \
+                      if getattr(children, 'id', False) else ''
+        children_string = children_type + ' ' + children_id
 
         # children is just a component
         if isinstance(children, Component):
-            yield children_type, children
+            yield children_string + "\n", children
             for p, t in children.traverse_with_paths():
-                yield " -> ".join([children_type, p]), t
+                yield "\n".join([children_string, p]) + "\n", t
 
         # children is a list of components
         elif isinstance(children, collections.MutableSequence):
             for idx, i in enumerate(children):
-                list_path = "{:s} index {:d} (type {:s})".format(
-                    children_type,
+                list_path = "[{:d}] {:s} {}".format(
                     idx,
-                    type(i).__name__
+                    type(i).__name__,
+                    "id={:s}".format(i.id) if getattr(i, 'id', False) else ''
                 )
-                yield list_path, i
+                yield list_path + "\n", i
 
                 if isinstance(i, Component):
                     for p, t in i.traverse_with_paths():
-                        yield " -> ".join([list_path, p]), t
+                        yield "\n".join([list_path, p]) + "\n", t
 
     def __iter__(self):
         """Yield IDs in the tree of children."""
