commit 0832a183cc383f27fa5823460695c1fe1cc12401
Author: byron <byron@plot.ly>
Date:   Sat May 25 23:13:16 2019 -0400

    :construction: fixing issues in python2

diff --git a/.pylintrc b/.pylintrc
index c6b7ec6d..bde8d00a 100644
--- a/.pylintrc
+++ b/.pylintrc
@@ -61,6 +61,7 @@ disable=fixme,
         old-style-class,
         superfluous-parens,
         bad-continuation,
+        unexpected-keyword-arg
 
 # Enable the message, report, category or checker with the given id(s). You can
 # either give multiple identifier separated by comma (,) or put this option
diff --git a/.pylintrc37 b/.pylintrc37
index 533bbade..30691595 100644
--- a/.pylintrc37
+++ b/.pylintrc37
@@ -148,7 +148,8 @@ disable=invalid-name,
         possibly-unused-variable,
         too-many-lines,
         too-many-statements,
-        bad-continuation
+        bad-continuation,
+        unexpected-keyword-arg
 
 # Enable the message, report, category or checker with the given id(s). You can
 # either give multiple identifier separated by comma (,) or put this option
diff --git a/dash/exceptions.py b/dash/exceptions.py
index 477eb7d1..9af4a35f 100644
--- a/dash/exceptions.py
+++ b/dash/exceptions.py
@@ -114,3 +114,7 @@ class DashAppLoadingError(DashTestingError):
 
 class ServerCloseError(DashTestingError):
     """The server cannot be closed"""
+
+
+class TestingTimeoutError(DashTestingError):
+    """"all timeout error about dash testing"""
diff --git a/dash/testing/application_runners.py b/dash/testing/application_runners.py
index ec0304c3..1ef060ab 100644
--- a/dash/testing/application_runners.py
+++ b/dash/testing/application_runners.py
@@ -5,20 +5,20 @@ import uuid
 import shlex
 import threading
 import subprocess
+import logging
 
-import six
 import runpy
+import six
 import flask
 import requests
 
 from dash.exceptions import (
     NoAppFoundError,
-    # DashAppLoadingError,
+    TestingTimeoutError,
     ServerCloseError,
 )
 import dash.testing.wait as wait
 
-import logging
 
 logger = logging.getLogger(__name__)
 
@@ -78,7 +78,7 @@ class BaseDashRunner(object):
             try:
                 logger.info("killing the app runner")
                 self.stop()
-            except TimeoutError:
+            except TestingTimeoutError:
                 raise ServerCloseError(
                     "Cannot stop server within {} timeout".format(
                         self.stop_timeout
@@ -195,11 +195,11 @@ class ProcessRunner(BaseDashRunner):
         self.proc.terminate()
         try:
             if six.PY3:
-                _except = subprocess.TimeoutExpired
+                _except = subprocess.TimeoutExpired  # pylint:disable=no-member
                 return self.proc.communicate(timeout=self.stop_timeout)
-            else:
-                _except = OSError
-                return self.proc.communicate()
+
+            _except = OSError
+            return self.proc.communicate()
 
         except _except:
             logger.warning(
diff --git a/dash/testing/plugin.py b/dash/testing/plugin.py
index 269a4c0e..eadbcbb6 100644
--- a/dash/testing/plugin.py
+++ b/dash/testing/plugin.py
@@ -1,3 +1,4 @@
+# pylint: disable=missing-docstring
 import pytest
 
 from selenium import webdriver
diff --git a/dash/testing/wait.py b/dash/testing/wait.py
index aa026173..6306d2a2 100644
--- a/dash/testing/wait.py
+++ b/dash/testing/wait.py
@@ -1,5 +1,6 @@
 """Utils methods for pytest-dash such wait_for wrappers"""
 import time
+from dash.exceptions import TestingTimeoutError
 
 
 def until(
@@ -12,7 +13,7 @@ def until(
     while wait_cond():
         time.sleep(poll)
         if time.time() > end_time:
-            raise TimeoutError(msg)
+            raise TestingTimeoutError(msg)
 
 
 def until_not(
@@ -22,4 +23,4 @@ def until_not(
     while not wait_cond():
         time.sleep(poll)
         if time.time() > end_time:
-            raise TimeoutError(msg)
+            raise TestingTimeoutError(msg)
diff --git a/tests/unit/dash/app_assets/__init__.py b/tests/dash_apps/__init__.py
similarity index 100%
rename from tests/unit/dash/app_assets/__init__.py
rename to tests/dash_apps/__init__.py
diff --git a/tests/dash_apps/simple_app.py b/tests/dash_apps/simple_app.py
new file mode 100644
index 00000000..3e485c08
--- /dev/null
+++ b/tests/dash_apps/simple_app.py
@@ -0,0 +1,38 @@
+# pylint: disable=missing-docstring
+import dash_core_components as dcc
+import dash_html_components as html
+import dash
+from dash.dependencies import Output, Input
+from dash.exceptions import PreventUpdate
+
+
+app = dash.Dash(__name__)
+
+app.layout = html.Div(
+    [
+        dcc.Input(id="value", placeholder="my-value"),
+        html.Div(["You entered: ", html.Span(id="out")]),
+        html.Button("style-btn", id="style-btn"),
+        html.Div("style-container", id="style-output"),
+    ]
+)
+
+
+@app.callback(Output("out", "children"), [Input("value", "value")])
+def on_value(value):
+    if value is None:
+        raise PreventUpdate
+
+    return value
+
+
+@app.callback(Output("style-output", "style"), [Input("style-btn", "n_clicks")])
+def on_style(value):
+    if value is None:
+        raise PreventUpdate
+
+    return {"padding": "10px"}
+
+
+if __name__ == "__main__":
+    app.run_server(debug=True, port=10850)
diff --git a/tests/unit/dash/app_assets/simple_app.py b/tests/unit/dash/app_assets/simple_app.py
deleted file mode 100644
index 2e7d0c34..00000000
--- a/tests/unit/dash/app_assets/simple_app.py
+++ /dev/null
@@ -1,38 +0,0 @@
-# pylint: disable=missing-docstring
-import dash
-from dash.dependencies import Output, Input
-from dash.exceptions import PreventUpdate
-
-import dash_html_components as html
-import dash_core_components as dcc
-
-app = dash.Dash(__name__)
-
-app.layout = html.Div([
-    dcc.Input(id='value', placeholder='my-value'),
-    html.Div(['You entered: ', html.Span(id='out')]),
-    html.Button('style-btn', id='style-btn'),
-    html.Div('style-container', id='style-output'),
-])
-
-
-@app.callback(Output('out', 'children'), [Input('value', 'value')])
-def on_value(value):
-    if value is None:
-        raise PreventUpdate
-
-    return value
-
-
-@app.callback(
-    Output('style-output', 'style'), [Input('style-btn', 'n_clicks')]
-)
-def on_style(value):
-    if value is None:
-        raise PreventUpdate
-
-    return {'padding': '10px'}
-
-
-if __name__ == '__main__':
-    app.run_server(debug=True, port=10850)
\ No newline at end of file
diff --git a/tests/unit/dash/test_app_runners.py b/tests/unit/dash/test_app_runners.py
index 4aa8bdb7..c245cdb2 100644
--- a/tests/unit/dash/test_app_runners.py
+++ b/tests/unit/dash/test_app_runners.py
@@ -1,8 +1,8 @@
 import time
 import requests
 
-import dash
 import dash_html_components as html
+import dash
 
 
 def test_threaded_server_smoke(thread_server):
@@ -22,7 +22,7 @@ def test_threaded_server_smoke(thread_server):
 
 
 def test_process_server_smoke(process_server):
-    process_server("tests.unit.dash.app_assets.simple_app")
+    process_server("tests.dash_apps.simple_app")
     time.sleep(2.5)
     r = requests.get(process_server.url)
     assert r.status_code == 200, "the server is reachable"
diff --git a/tests/unit/dash/test_resources.py b/tests/unit/dash/test_resources.py
index 4a32f548..398682b6 100644
--- a/tests/unit/dash/test_resources.py
+++ b/tests/unit/dash/test_resources.py
@@ -5,28 +5,28 @@ import dash
 
 _monkey_patched_js_dist = [
     {
-        'external_url': 'https://external_javascript.js',
-        'relative_package_path': 'external_javascript.js',
-        'namespace': 'dash_core_components'
+        "external_url": "https://external_javascript.js",
+        "relative_package_path": "external_javascript.js",
+        "namespace": "dash_core_components",
     },
     {
-        'external_url': 'https://external_css.css',
-        'relative_package_path': 'external_css.css',
-        'namespace': 'dash_core_components'
+        "external_url": "https://external_css.css",
+        "relative_package_path": "external_css.css",
+        "namespace": "dash_core_components",
     },
     {
-        'relative_package_path': 'fake_dcc.js',
-        'dev_package_path': 'fake_dcc.dev.js',
-        'external_url': 'https://component_library.bundle.js',
-        'namespace': 'dash_core_components'
+        "relative_package_path": "fake_dcc.js",
+        "dev_package_path": "fake_dcc.dev.js",
+        "external_url": "https://component_library.bundle.js",
+        "namespace": "dash_core_components",
     },
     {
-        'relative_package_path': 'fake_dcc.min.js.map',
-        'dev_package_path': 'fake_dcc.dev.js.map',
-        'external_url': 'https://component_library.bundle.js.map',
-        'namespace': 'dash_core_components',
-        'dynamic': True
-    }
+        "relative_package_path": "fake_dcc.min.js.map",
+        "dev_package_path": "fake_dcc.dev.js.map",
+        "external_url": "https://component_library.bundle.js.map",
+        "namespace": "dash_core_components",
+        "dynamic": True,
+    },
 ]
 
 
@@ -35,61 +35,56 @@ class StatMock(object):
 
 
 def test_external(mocker):
-    mocker.patch('dash_core_components._js_dist')
+    mocker.patch("dash_core_components._js_dist")
     dcc._js_dist = _monkey_patched_js_dist  # noqa: W0212,
     dcc.__version__ = 1
 
     app = dash.Dash(
-        __name__,
-        assets_folder='tests/assets',
-        assets_ignore='load_after.+.js'
+        __name__, assets_folder="tests/assets", assets_ignore="load_after.+.js"
     )
     app.layout = dcc.Markdown()
     app.scripts.config.serve_locally = False
 
-    with mock.patch('dash.dash.os.stat', return_value=StatMock()):
+    with mock.patch("dash.dash.os.stat", return_value=StatMock()):
         resource = app._collect_and_register_resources(
             app.scripts.get_all_scripts()
         )
 
     assert resource == [
-        'https://external_javascript.js',
-        'https://external_css.css',
-        'https://component_library.bundle.js'
+        "https://external_javascript.js",
+        "https://external_css.css",
+        "https://component_library.bundle.js",
     ]
 
 
 def test_internal(mocker):
-    mocker.patch('dash_core_components._js_dist')
+    mocker.patch("dash_core_components._js_dist")
     dcc._js_dist = _monkey_patched_js_dist  # noqa: W0212,
     dcc.__version__ = 1
 
     app = dash.Dash(
-        __name__,
-        assets_folder='tests/assets',
-        assets_ignore='load_after.+.js'
+        __name__, assets_folder="tests/assets", assets_ignore="load_after.+.js"
     )
     app.layout = dcc.Markdown()
 
     assert app.scripts.config.serve_locally and app.css.config.serve_locally
 
-    with mock.patch('dash.dash.os.stat', return_value=StatMock()):
-        with mock.patch('dash.dash.importlib.import_module',
-                        return_value=dcc):
+    with mock.patch("dash.dash.os.stat", return_value=StatMock()):
+        with mock.patch("dash.dash.importlib.import_module", return_value=dcc):
             resource = app._collect_and_register_resources(
                 app.scripts.get_all_scripts()
             )
 
     assert resource == [
-        '/_dash-component-suites/'
-        'dash_core_components/external_javascript.js?v=1&m=1',
-        '/_dash-component-suites/'
-        'dash_core_components/external_css.css?v=1&m=1',
-        '/_dash-component-suites/'
-        'dash_core_components/fake_dcc.js?v=1&m=1',
+        "/_dash-component-suites/"
+        "dash_core_components/external_javascript.js?v=1&m=1",
+        "/_dash-component-suites/"
+        "dash_core_components/external_css.css?v=1&m=1",
+        "/_dash-component-suites/" "dash_core_components/fake_dcc.js?v=1&m=1",
     ]
 
-    assert 'fake_dcc.min.js.map' in app.registered_paths['dash_core_components'], \
-        'Dynamic resource not available in registered path {}'.format(
-            app.registered_paths['dash_core_components']
-        )
+    assert (
+        "fake_dcc.min.js.map" in app.registered_paths["dash_core_components"]
+    ), "Dynamic resource not available in registered path {}".format(
+        app.registered_paths["dash_core_components"]
+    )
