commit 97f9aa03b52eb02ab652c335d434bfd84fd31493
Author: alexcjohnson <alex@plot.ly>
Date:   Thu Jan 30 23:37:56 2020 -0500

    fix persistence edge case for pendingCallbacks world

diff --git a/dash-renderer/src/AccessDenied.react.js b/dash-renderer/src/AccessDenied.react.js
index f7062554..bb0c361c 100644
--- a/dash-renderer/src/AccessDenied.react.js
+++ b/dash-renderer/src/AccessDenied.react.js
@@ -31,7 +31,6 @@ function AccessDenied(props) {
             <a
                 style={styles.base.a}
                 onClick={() => {
-                    /* eslint no-empty: ["error", { "allowEmptyCatch": true }] */
                     try {
                         document.cookie =
                             `${constants.OAUTH_COOKIE_NAME}=; ` +
diff --git a/dash-renderer/src/actions/index.js b/dash-renderer/src/actions/index.js
index 8fdc1aea..c7838594 100644
--- a/dash-renderer/src/actions/index.js
+++ b/dash-renderer/src/actions/index.js
@@ -4,6 +4,7 @@ import {
     concat,
     flatten,
     has,
+    isEmpty,
     keys,
     lensPath,
     map,
@@ -123,7 +124,6 @@ function moveHistory(changeType) {
                 })
             );
 
-            // Notify observers
             dispatch(notifyObservers({id, props}));
         }
     };
@@ -308,6 +308,24 @@ async function fireReadyCallbacks(dispatch, getState, callbacks) {
                             appliedProps.children
                         );
                     }
+
+                    // persistence edge case: if you explicitly update the
+                    // persistence key, other props may change that require us
+                    // to fire additional callbacks
+                    const addedProps = pickBy(
+                        (v, k) => !(k in props),
+                        appliedProps
+                    );
+                    if (!isEmpty(addedProps)) {
+                        const {graphs, paths} = getState();
+                        pendingCallbacks = includeObservers(
+                            id,
+                            addedProps,
+                            graphs,
+                            paths,
+                            pendingCallbacks
+                        );
+                    }
                 }
             });
             updatePending(pendingCallbacks, without(updated, allPropIds));
@@ -553,23 +571,33 @@ function updateChildPaths(dispatch, getState, pendingCallbacks, id, children) {
 export function notifyObservers({id, props}) {
     return async function(dispatch, getState) {
         const {graphs, paths, pendingCallbacks} = getState();
-
-        const changedProps = keys(props);
-        let finalCallbacks = pendingCallbacks;
-
-        changedProps.forEach(propName => {
-            const newCBs = getCallbacksByInput(graphs, paths, id, propName);
-            if (newCBs.length) {
-                finalCallbacks = mergePendingCallbacks(
-                    finalCallbacks,
-                    followForward(graphs, paths, newCBs)
-                );
-            }
-        });
+        const finalCallbacks = includeObservers(
+            id,
+            props,
+            graphs,
+            paths,
+            pendingCallbacks
+        );
         dispatch(startCallbacks(finalCallbacks));
     };
 }
 
+function includeObservers(id, props, graphs, paths, pendingCallbacks) {
+    const changedProps = keys(props);
+    let finalCallbacks = pendingCallbacks;
+
+    changedProps.forEach(propName => {
+        const newCBs = getCallbacksByInput(graphs, paths, id, propName);
+        if (newCBs.length) {
+            finalCallbacks = mergePendingCallbacks(
+                finalCallbacks,
+                followForward(graphs, paths, newCBs)
+            );
+        }
+    });
+    return finalCallbacks;
+}
+
 export function handleAsyncError(err, message, dispatch) {
     // Handle html error responses
     if (err && typeof err.text === 'function') {
