commit 4bfe66882e9861bf3c159a07f566791996d7bae1
Author: Chelsea <chelsea@plot.ly>
Date:   Wed Apr 20 13:08:30 2016 -0400

    Update README.md
    
    small edits

diff --git a/README.md b/README.md
index 6925fb73..e7fe4f45 100644
--- a/README.md
+++ b/README.md
@@ -16,14 +16,14 @@ Writing data visualizations web-applications like this is actually a lot of work
 
 There is a big gap in the technical computing and data science landscape when it comes to creating GUIs.
 
-If you're a python user, you can assemble widgets like sliders and graphs together using the [Jupyter Notebook](http://moderndata.plot.ly/widgets-in-ipython-notebook-and-plotly/) interface or if you're a really savvy you could use [Matplotlib and Qt Designer](http://blog.rcnelson.com/building-a-matplotlib-gui-with-qt-designer-part-1/). These applications are both hard to distribute, inflexible aesthetically, and challenging to scale to advanced interfaces. In MATLAB you can create [GUIs with GUIDE](http://www.mathworks.com/videos/creating-a-gui-with-guide-68979.html) but you'll be faced with the same shortcomings in terms of design and distribution (not to mention license costs!). The Julia community hasn't yet adopted a solution (although [Escher.jl](https://shashi.github.io/Escher.jl/) looks promising and similar to the framework that we're proposing here). The best framework out there is R's Shiny. It's web based and is supported by an incredible community. Unfortunately, it's not supported in other languages. 
+If you're a python user, you can assemble widgets like sliders and graphs together using the [Jupyter Notebook](http://moderndata.plot.ly/widgets-in-ipython-notebook-and-plotly/) interface or if you're really savvy you could use [Matplotlib and Qt Designer](http://blog.rcnelson.com/building-a-matplotlib-gui-with-qt-designer-part-1/). These applications are both hard to distribute, inflexible aesthetically, and challenging to scale to advanced interfaces. In MATLAB you can create [GUIs with GUIDE](http://www.mathworks.com/videos/creating-a-gui-with-guide-68979.html) but you'll be faced with the same shortcomings in terms of design and distribution (not to mention license costs!). The Julia community hasn't yet adopted a solution (although [Escher.jl](https://shashi.github.io/Escher.jl/) looks promising and similar to the framework that we're proposing here). The best framework out there is R's Shiny. It's web based and is supported by an incredible community. Unfortunately, it's not supported in other languages. 
 
 #### Web technologies in 2016 change everything
 
 The development [react.js](https://facebook.github.io/react/) and [plotly.js](https://github.com/plotly/plotly.js) over the last couple of years have made it possible for all of this to change. We can now build a technical computing GUI framework using open web technologies.
 
 - React.js makes it easier than ever to create and distribute the types of modular components that a GUI framework needs (sliders, dropdowns, tables, buttons). There are [over 2000 react components registered on NPM](https://www.npmjs.com/browse/keyword/react-component?offset=2000)!
-- [plotly.js](https://github.com/plotly/plotly.js) provides an interface for creating super sophisticated scientific visualizations that were previously only available in packages like Matplotlib or MATLAB. plotly.js graphs are natively interactive in the web browser and over [20 chart types](https://plot.ly/javascript/) are supported including 3D graphs, high-performance webgl scatter plots, contour plots.
+- [plotly.js](https://github.com/plotly/plotly.js) provides an interface for creating super sophisticated scientific visualizations that were previously only available in packages like Matplotlib or MATLAB. plotly.js graphs are natively interactive in the web browser and over [20 chart types](https://plot.ly/javascript/) are supported including 3D graphs, high-performance webgl scatter plots, and contour plots.
 - CSS stylesheets and [inline CSS in React components](https://github.com/FormidableLabs/radium) provide a relatively portable way to customize these applications aesthetically.
 - HTTP and JSON provide the interface between components to back-ends in different languages like Python, MATLAB, Julia, R.
 - Simple server application frameworks like Flask in Python or Mux in Julia can connect the HTTP interface to the user's actual technical computing code.
