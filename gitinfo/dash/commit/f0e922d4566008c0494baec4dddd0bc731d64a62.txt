commit f0e922d4566008c0494baec4dddd0bc731d64a62
Author: byron <byron@plot.ly>
Date:   Tue Aug 20 15:48:50 2019 -0400

    :pencil: update guide and change renderer tool

diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 7279bf60..d7bc7d70 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -22,6 +22,22 @@ $ pip install -e .
 # you should see both dash and dash-renderer are pointed to local source repos
 $ pip list | grep dash
 ```
+
+### Dash-Renderer Beginner Guide
+
+`Dash Renderer`  was a separate Dash project. It was merged into main  `Dash`  repository as part of 1.0 release. The frontend Dash, at its core, is driven by the renderer to handle React Components layout and backend event handling.
+
+If you want to contribute or simply dig deeper into Dash. We encourage you to play and taste it. This is the most efficient way to learn and understand everything under the hood.
+
+For contributors who have purely  **Python**  or  **R**  background. This section might help you understand more details about developing and debugging in Javascript world.
+
+After Dash 1.2, The renderer bundle and its peer dependencies can be packed and generated from the source code. The only version of the truth is defined in  `dash-renderer\package.json`  file. A build tool  `renderer`, which is a tiny Python script defined as a Dash entry point, does three things:
+1.  `renderer npm`  installs all the npm modules using this  `package.json`  files. Note that the  `package-lock.json`  file is the computed reference product for the versions defined with tilde(~) or caret(^) syntax in  **npm**
+2.  `renderer bundles`  parses the locked version JSON, copies all the peer dependencies into dash_renderer folder, bundles the renderer assets, and generates an `__init__.py`  to map all the resources
+3.  `renderer digest`  computes the content hash of each asset in  `dash_renderer`  folder, prints out the result in logs, and dumps into a JSON file  `digest.json`
+
+When a change in renderer code doesn't reflect in your browser as expected, this could be: confused bundle generation, caching issue in a browser, python package not in `editable` mode, etc. The new tool reduces the risk of bundle assets by adding the digest to help compare asset changes.
+
 ## Git
 
 Use the [GitHub flow][] when proposing contributions to this repository (i.e. create a feature branch and submit a PR against the default branch).
diff --git a/dash/development/build_renderer.py b/dash/development/build_renderer.py
index fac5275d..5550e829 100644
--- a/dash/development/build_renderer.py
+++ b/dash/development/build_renderer.py
@@ -49,7 +49,7 @@ package_lock = _concat((renderer, "package-lock.json"))
 npm_modules = _concat((renderer, "node_modules"))
 versions = {}
 
-with open("package.json") as fpp:
+with open(_concat((renderer, "package.json"))) as fpp:
     versions["version"] = json.load(fpp)["version"]
 
 
@@ -79,7 +79,6 @@ def bundles():
         logger.exception("ðŸš¨ having issues manipulating %s", assets)
         sys.exit(1)
 
-    # parse the package-lock.json and copy bundles
     with open(package_lock, "r") as fp:
         deps = json.load(fp)["dependencies"]
 
@@ -99,33 +98,53 @@ def bundles():
             _concat((assets, "{}@{}.js".format(name, version))),
         )
 
-    # run build
+    logger.info("run `npm run build:renderer`")
     os.chdir(renderer)
     run_command_with_process("npm run build:renderer")
 
-    copies = os.listdir(assets)
+    digest(versions["version"])
+
+    logger.info("generate the `__init__.py` file from template and verisons")
+    with open(
+        _concat((os.path.dirname(__file__), "renderer_init.template"))
+    ) as fp:
+        t = string.Template(fp.read())
+
+    with open(_concat((assets, "__init__.py")), "w") as fp:
+        fp.write(t.safe_substitute(versions))
+
+
+@job("compute the hash digest for assets")
+def digest(version):
+    """compute the hash digest of assets in dash_renderer
+
+    version: str
+        the dash_renderer version
+    """
+    copies = (
+        _
+        for _ in os.listdir(assets)
+        if os.path.splitext(_)[-1] in {".js", ".map"}
+    )
     logger.info("bundles in dash_renderer %s", copies)
 
     # compute the fingerprint for all the assets
-    digest = {"dash_renderer": versions["version"]}
+    payload = {"dash_renderer": version}
     for copy in copies:
-        digest["MD5 ({})".format(copy)] = compute_md5(_concat((assets, copy)))
+        payload["MD5 ({})".format(copy)] = compute_md5(_concat((assets, copy)))
 
     with open(_concat((renderer, "digest.json")), "w") as fp:
-        json.dump(digest, fp, sort_keys=True, indent=4, separators=(",", ":"))
+        json.dump(payload, fp, sort_keys=True, indent=4, separators=(",", ":"))
     logger.info(
         "bundle digest in digest.json:\n%s",
-        json.dumps(digest, sort_keys=True, indent=4),
+        json.dumps(payload, sort_keys=True, indent=4),
     )
 
-    # generate the __init__.py from template
-    with open(
-        _concat((os.path.dirname(__file__), "renderer_init.template"))
-    ) as fp:
-        t = string.Template(fp.read())
 
-    with open(_concat((assets, "__init__.py")), "w") as fp:
-        fp.write(t.safe_substitute(versions))
+@job("build the renderer in dev mode")
+def watch():
+    os.chdir(renderer)
+    os.system("npm run build:dev")
 
 
 def main():
