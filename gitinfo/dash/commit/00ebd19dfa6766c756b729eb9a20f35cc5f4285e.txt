commit 00ebd19dfa6766c756b729eb9a20f35cc5f4285e
Author: alexcjohnson <alex@plot.ly>
Date:   Tue Jul 9 16:40:10 2019 -0400

    simplify reducers/api syntax

diff --git a/dash-renderer/src/components/core/Reloader.react.js b/dash-renderer/src/components/core/Reloader.react.js
index 82c32019..9a64507a 100644
--- a/dash-renderer/src/components/core/Reloader.react.js
+++ b/dash-renderer/src/components/core/Reloader.react.js
@@ -171,13 +171,13 @@ class Reloader extends React.Component {
     }
 
     componentDidMount() {
-        const {dispatch} = this.props;
+        const {dispatch, reloadRequest} = this.props;
         const {disabled, interval} = this.state;
         if (!disabled && !this.state.intervalId) {
             const intervalId = window.setInterval(() => {
                 // Prevent requests from piling up - reloading can take
                 // many seconds (10-30) and the interval is 3s by default
-                if (this.props.reloadRequest.status !== 'loading') {
+                if (reloadRequest.status !== 'loading') {
                     dispatch(apiThunk('_reload-hash', 'GET', 'reloadRequest'));
                 }
             }, interval);
diff --git a/dash-renderer/src/reducers/api.js b/dash-renderer/src/reducers/api.js
index 89a75d75..943f2059 100644
--- a/dash-renderer/src/reducers/api.js
+++ b/dash-renderer/src/reducers/api.js
@@ -4,30 +4,14 @@ export default function createApiReducer(store) {
     return function ApiReducer(state = {}, action) {
         let newState = state;
         if (action.type === store) {
-            const {payload} = action;
+            const {payload, status, content} = action;
+            const newRequest = {status, content};
             if (Array.isArray(payload.id)) {
-                newState = assocPath(
-                    payload.id,
-                    {
-                        status: payload.status,
-                        content: payload.content,
-                    },
-                    state
-                );
+                newState = assocPath(payload.id, newRequest, state);
             } else if (payload.id) {
-                newState = assoc(
-                    payload.id,
-                    {
-                        status: payload.status,
-                        content: payload.content,
-                    },
-                    state
-                );
+                newState = assoc(payload.id, newRequest, state);
             } else {
-                newState = mergeRight(state, {
-                    status: payload.status,
-                    content: payload.content,
-                });
+                newState = mergeRight(state, newRequest);
             }
         }
         return newState;
