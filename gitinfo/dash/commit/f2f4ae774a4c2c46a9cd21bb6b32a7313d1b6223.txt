commit f2f4ae774a4c2c46a9cd21bb6b32a7313d1b6223
Author: chriddyp <chris@plot.ly>
Date:   Wed Mar 8 19:55:40 2017 -0500

    class to manage local and remote css and js deps

diff --git a/dash/resources.py b/dash/resources.py
new file mode 100644
index 00000000..8968c3c9
--- /dev/null
+++ b/dash/resources.py
@@ -0,0 +1,131 @@
+from copy import copy
+from dash.development.base_component import Component
+import warnings
+
+
+class Resources():
+    def __init__(self, resource_name, layout):
+        self._resources = []
+        self.resource_name = resource_name
+        self.layout = layout
+
+    def append_resource(self, resource):
+        self._resources.append(resource)
+
+    def _filter_resources(self, all_resources):
+        filtered_resources = []
+        for s in all_resources:
+            filtered_resource = {}
+            if 'namespace' in s:
+                filtered_resource['namespace'] = s['namespace']
+
+            if 'external_url' in s and not self.config.serve_locally:
+                filtered_resource['external_url'] = s['external_url']
+            elif 'relative_package_path' in s:
+                filtered_resource['relative_package_path'] = (
+                    s['relative_package_path']
+                )
+            elif 'absolute_path' in s:
+                filtered_resource['absolute_path'] = s['absolute_path']
+            elif self.config.serve_locally:
+                warnings.warn(
+                    'A local version of {} is not available'.format(
+                        s['external_url']
+                    )
+                )
+                continue
+            else:
+                raise Exception(
+                    '{} does not have a '
+                    'relative_package_path, absolute_path, or an '
+                    'external_url.'.format(
+                        json.dumps(filtered_resource)
+                    )
+                )
+
+            filtered_resources.append(filtered_resource)
+
+        return filtered_resources
+
+    def get_all_resources(self):
+        all_resources = []
+        if self.config.infer_from_layout:
+            all_resources = (
+                self.get_inferred_resources() + self._resources
+            )
+        else:
+            all_resources = self._resources
+
+        return self._filter_resources(all_resources)
+
+    def get_inferred_resources(self):
+        namespaces = []
+        resources = []
+        if callable(self.layout):
+            layout = self.layout()
+        else:
+            layout = self.layout
+
+        def extract_resource_from_component(component):
+            if (isinstance(component, Component) and
+                    component._namespace not in namespaces):
+
+                namespaces.append(component._namespace)
+
+                if hasattr(component, self.resource_name):
+
+                    component_resources = copy(
+                        getattr(component, self.resource_name)
+                    )
+                    for r in component_resources:
+                        r['namespace'] = component._namespace
+                    resources.extend(component_resources)
+
+        extract_resource_from_component(layout)
+        for t in layout.traverse():
+            extract_resource_from_component(t)
+        return resources
+
+
+class Css():
+    def __init__(self, layout=None):
+        self._resources = Resources('_css_dist', layout)
+        self._resources.config = self.config
+
+    def _update_layout(self, layout):
+        self._resources.layout = layout
+
+    def append_css(self, stylesheet):
+        self._resources.append_resource(stylesheet)
+
+    def get_all_css(self):
+        return self._resources.get_all_resources()
+
+    def get_inferred_css_dist(self):
+        return self._resources.get_inferred_resources()
+
+    class config:
+        infer_from_layout = True
+        serve_locally = False
+
+
+class Scripts():
+    def __init__(self, layout=None):
+        self._resources = Resources('_js_dist', layout)
+        self._resources.config = self.config
+
+    def _update_layout(self, layout):
+        self._resources.layout = layout
+
+    def append_script(self, script):
+        self._resources.append_resource(script)
+
+    def get_all_scripts(self):
+        return self._resources.get_all_resources()
+
+    def get_inferred_scripts(self):
+        return self._resources.get_inferred_resources()
+
+    class config:
+        infer_from_layout = True
+        serve_locally = False
diff --git a/tests/test_resources.py b/tests/test_resources.py
new file mode 100644
index 00000000..cb7caf44
--- /dev/null
+++ b/tests/test_resources.py
@@ -0,0 +1,160 @@
+from dash.resources import Scripts, Css
+from dash.development.base_component import generate_class
+import unittest
+import warnings
+
+
+def generate_components():
+    Div = generate_class('Div', ('content', 'id',), 'dash_html_components')
+    Span = generate_class('Span', ('content', 'id',), 'dash_html_components')
+    Input = generate_class('Input', ('content', 'id',), 'dash_core_components')
+    return Div, Span, Input
+
+
+def external_url(package_name):
+    return (
+        '//unpkg.com/{}@0.2.9'
+        '/{}/bundle.js'.format(
+            package_name.replace('_', '-'),
+            package_name
+        )
+    )
+
+
+def rel_path(package_name):
+    return '{}/bundle.js'.format(package_name)
+
+
+def abs_path(package_name):
+    return '/Users/chriddyp/{}/bundle.js'.format(package_name)
+
+
+class TestResources(unittest.TestCase):
+
+    def resource_test(self, css_or_js):
+        Div, Span, Input = generate_components()
+
+        if css_or_js == 'css':
+            # The CSS URLs and paths will look a little bit differently
+            # than the JS urls but that doesn't matter for the purposes
+            # of the test
+            Div._css_dist = Span._css_dist = [{
+                'external_url': external_url('dash_html_components'),
+                'relative_package_path': rel_path('dash_html_components')
+            }]
+
+            Input._css_dist = [{
+                'external_url': external_url('dash_core_components'),
+                'relative_package_path': rel_path('dash_core_components')
+            }]
+
+        else:
+            Div._js_dist = Span._js_dist = [{
+                'external_url': external_url('dash_html_components'),
+                'relative_package_path': rel_path('dash_html_components')
+            }]
+
+            Input._js_dist = [{
+                'external_url': external_url('dash_core_components'),
+                'relative_package_path': rel_path('dash_core_components')
+            }]
+
+        layout = Div([None, 'string', Span(), Div(Input())])
+
+        if css_or_js == 'css':
+            resources = Css(layout)
+        else:
+            resources = Scripts(layout)
+
+        resources._update_layout(layout)
+
+        expected_filtered_external_resources = [
+            {
+                'external_url': external_url('dash_html_components'),
+                'namespace': 'dash_html_components'
+            },
+            {
+                'external_url': external_url('dash_core_components'),
+                'namespace': 'dash_core_components'
+            }
+        ]
+        expected_filtered_relative_resources = [
+            {
+                'relative_package_path': rel_path('dash_html_components'),
+                'namespace': 'dash_html_components'
+            },
+            {
+                'relative_package_path': rel_path('dash_core_components'),
+                'namespace': 'dash_core_components'
+            }
+        ]
+
+        if css_or_js == 'css':
+            self.assertEqual(
+                resources.get_all_css(),
+                expected_filtered_external_resources
+            )
+        else:
+            self.assertEqual(
+                resources.get_all_scripts(),
+                expected_filtered_external_resources
+            )
+
+        resources.config.serve_locally = True
+        if css_or_js == 'css':
+            self.assertEqual(
+                resources.get_all_css(),
+                expected_filtered_relative_resources
+            )
+        else:
+            self.assertEqual(
+                resources.get_all_scripts(),
+                expected_filtered_relative_resources
+            )
+
+        resources.config.serve_locally = False
+        extra_resource = {'external_url': '//cdn.bootstrap.com/min.css'}
+        expected_resources = expected_filtered_external_resources + [
+            extra_resource
+        ]
+        if css_or_js == 'css':
+            resources.append_css(extra_resource)
+            self.assertEqual(
+                resources.get_all_css(),
+                expected_resources
+            )
+        else:
+            resources.append_script(extra_resource)
+            self.assertEqual(
+                resources.get_all_scripts(),
+                expected_resources
+            )
+
+        resources.config.serve_locally = True
+        with warnings.catch_warnings(record=True) as w:
+            warnings.simplefilter("always")
+            if css_or_js == 'css':
+                self.assertEqual(
+                    resources.get_all_css(),
+                    expected_filtered_relative_resources
+                )
+                assert len(w) == 1
+                assert "A local version of {} is not available".format(
+                    extra_resource['external_url']
+                ) in str(w[-1].message)
+
+            else:
+                self.assertEqual(
+                    resources.get_all_scripts(),
+                    expected_filtered_relative_resources
+                )
+                assert len(w) == 1
+                assert "A local version of {} is not available".format(
+                    extra_resource['external_url']
+                ) in str(w[-1].message)
+
+    def test_js_resources(self):
+        self.resource_test('js')
+
+    def test_css_resources(self):
+        self.resource_test('css')
