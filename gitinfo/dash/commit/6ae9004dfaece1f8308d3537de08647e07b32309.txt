commit 6ae9004dfaece1f8308d3537de08647e07b32309
Author: Shammamah Hossain <shammamah.hossain@gmail.com>
Date:   Thu Jun 20 16:01:33 2019 -0400

    Fix pylint errors.
    
    Remove string comparison to number.

diff --git a/dash/development/_py_components_generation.py b/dash/development/_py_components_generation.py
index 37526e89..3007352a 100644
--- a/dash/development/_py_components_generation.py
+++ b/dash/development/_py_components_generation.py
@@ -240,7 +240,8 @@ def create_docstring(component_name, props, description):
 
 Keyword arguments:\n{args}"""
     ).format(
-        n='n' if component_name[0].lower() in ['a', 'e', 'i', 'o', 'u'] else '',
+        n='n' if component_name[0].lower() in ['a', 'e', 'i', 'o', 'u']
+        else '',
         name=component_name,
         description=description,
         args='\n'.join(
@@ -250,7 +251,8 @@ Keyword arguments:\n{args}"""
                 else prop['flowType'],
                 required=prop['required'],
                 description=prop['description'],
-                default=prop['defaultValue']['value'] if 'defaultValue' in prop.keys() else '',
+                default=prop['defaultValue']['value']
+                if 'defaultValue' in prop.keys() else '',
                 indent_num=0,
                 is_flow_type='flowType' in prop and 'type' not in prop)
             for p, prop in list(filter_props(props).items())))
@@ -429,27 +431,30 @@ def create_prop_docstring(prop_name, type_object, required, description,
     is_required = 'optional'
     if required:
         is_required = 'required'
-    elif len(default) > 0 and 'null' not in str(default) and '[]' not in str(default):
-        is_required = 'default {}'.format(default.replace('\n', '\n' + indent_spacing))
+    elif default and 'null' not in str(default) and '[]' not in str(default):
+        is_required = 'default {}'.format(
+            default.replace('\n', '\n' + indent_spacing)
+        )
 
     if '\n' in py_type_name:
-        return '{indent_spacing}- {name} (dict; {is_required}): {description}{period} ' \
-               '{name} has the following type: {type}'.format(
-                   indent_spacing=indent_spacing,
-                   name=prop_name,
-                   type=py_type_name,
-                   description=description,
-                   period='.' if len(description) > 0 and description[-1] != '.' else '',
-                   is_required=is_required)
+        return '{indent_spacing}- {name} (dict; {is_required}): ' \
+            '{description}{period} ' \
+            '{name} has the following type: {type}'.format(
+                indent_spacing=indent_spacing,
+                name=prop_name,
+                type=py_type_name,
+                description=description,
+                period='.' if description and description[-1] != '.' else '',
+                is_required=is_required)
     return '{indent_spacing}- {name} ({type}' \
-           '{is_required}){description}'.format(
-               indent_spacing=indent_spacing,
-               name=prop_name,
-               type='{}; '.format(py_type_name) if py_type_name else '',
-               description=(
-                   ': {}'.format(description) if description != '' else ''
-               ),
-               is_required=is_required)
+        '{is_required}){description}'.format(
+            indent_spacing=indent_spacing,
+            name=prop_name,
+            type='{}; '.format(py_type_name) if py_type_name else '',
+            description=(
+                ': {}'.format(description) if description != '' else ''
+            ),
+            is_required=is_required)
 
 
 def map_js_to_py_types_prop_types(type_object):
@@ -467,7 +472,8 @@ def map_js_to_py_types_prop_types(type_object):
                         type_object=prop,
                         required=prop['required'],
                         description=prop.get('description', ''),
-                        default=prop['defaultValue']['value'] if 'defaultValue' in prop.keys() else '',
+                        default=prop['defaultValue']['value']
+                        if 'defaultValue' in prop.keys() else '',
                         indent_num=1
                     ) for prop_name, prop in
                     list(type_object['value'].items())))
@@ -558,6 +564,8 @@ def map_js_to_py_types_flow_types(type_object):
                         type_object=prop['value'],
                         required=prop['value']['required'],
                         description=prop['value'].get('description', ''),
+                        default=prop['defaultValue']['value']
+                        if 'defaultValue' in prop.keys() else '',
                         indent_num=indent_num,
                         is_flow_type=True)
                     for prop in type_object['signature']['properties']))),
@@ -590,7 +598,7 @@ def js_to_py_type(type_object, is_flow_type=False, indent_num=0):
     if 'computed' in type_object and type_object['computed'] \
             or type_object.get('type', '') == 'function':
         return ''
-    elif js_type_name in js_to_py_types:
+    if js_type_name in js_to_py_types:
         if js_type_name == 'signature':  # This is a Flow object w/ signature
             return js_to_py_types[js_type_name](indent_num)
         # All other types
