commit 95a133dff03e13c8bbab7c2ca0f99814eaa75bad
Author: John Bampton <jbampton@users.noreply.github.com>
Date:   Fri Dec 1 11:24:54 2017 +1000

    Consistently use single quotes

diff --git a/dash/development/base_component.py b/dash/development/base_component.py
index a81a4feb..6f4aff9a 100644
--- a/dash/development/base_component.py
+++ b/dash/development/base_component.py
@@ -237,7 +237,7 @@ def generate_class(typename, props, description, namespace):
         parse_events(props),
         description
     )
-    events = "[" + ', '.join(parse_events(props)) + "]"
+    events = '[' + ', '.join(parse_events(props)) + ']'
     if 'children' in props:
         default_argtext = 'children=None, **kwargs'
         argtext = 'children=children, **kwargs'
diff --git a/tests/test_react.py b/tests/test_react.py
index c30c0597..dd7377d2 100644
--- a/tests/test_react.py
+++ b/tests/test_react.py
@@ -38,7 +38,7 @@ class IntegrationTest(unittest.TestCase):
 
         self.maxDiff = 100*1000
 
-    @unittest.skip("")
+    @unittest.skip('')
     def test_route_list(self):
         urls = [rule.rule for rule in self.app.server.url_map.iter_rules()]
 
@@ -54,7 +54,7 @@ class IntegrationTest(unittest.TestCase):
             ])
         )
 
-    @unittest.skip("")
+    @unittest.skip('')
     def test_initialize_route(self):
         response = self.client.get('/initialize')
         self.assertEqual(response.status_code, 200)
@@ -65,7 +65,7 @@ class IntegrationTest(unittest.TestCase):
             )
         )
 
-    @unittest.skip("")
+    @unittest.skip('')
     def test_dependencies_route(self):
         self.app.callback('header', ['id1'])
         response = self.client.get('/dependencies')
@@ -119,12 +119,12 @@ class IntegrationTest(unittest.TestCase):
             }
         )
 
-    @unittest.skip("")
+    @unittest.skip('')
     def test_index_html(self):
         response = self.client.get('/')
         self.assertEqual(response.status_code, 200)
 
-    @unittest.skip("")
+    @unittest.skip('')
     def test_single_observer_returning_a_dict(self):
         @self.app.callback('header', ['id1'])
         def update_header(input1):
@@ -174,7 +174,7 @@ class IntegrationTest(unittest.TestCase):
             }
         )
 
-    @unittest.skip("")
+    @unittest.skip('')
     def test_single_observer_returning_a_component(self):
         @self.app.callback('header', ['id1'])
         def update_header(input1):
@@ -222,7 +222,7 @@ class IntegrationTest(unittest.TestCase):
             }
         )
 
-    @unittest.skip("")
+    @unittest.skip('')
     def test_single_observer_updating_component_that_doesnt_exist(self):
         # It's possible to register callbacks for components that don't
         # exist in the initial layout because users could add them as
@@ -271,7 +271,7 @@ class IntegrationTest(unittest.TestCase):
             }
         )
 
-    @unittest.skip("")
+    @unittest.skip('')
     def test_single_observer_with_multiple_controllers(self):
         @self.app.callback('header', ['id1', 'id2'])
         def update_header(input1, input2):
diff --git a/tests/test_resources.py b/tests/test_resources.py
index 002b30ec..a25553ab 100644
--- a/tests/test_resources.py
+++ b/tests/test_resources.py
@@ -134,14 +134,14 @@ class TestResources(unittest.TestCase):
 
         resources.config.serve_locally = True
         with warnings.catch_warnings(record=True) as w:
-            warnings.simplefilter("always")
+            warnings.simplefilter('always')
             if css_or_js == 'css':
                 self.assertEqual(
                     resources.get_all_css(),
                     expected_filtered_relative_resources
                 )
                 assert len(w) == 1
-                assert "A local version of {} is not available".format(
+                assert 'A local version of {} is not available'.format(
                     extra_resource['external_url']
                 ) in str(w[-1].message)
 
@@ -151,7 +151,7 @@ class TestResources(unittest.TestCase):
                     expected_filtered_relative_resources
                 )
                 assert len(w) == 1
-                assert "A local version of {} is not available".format(
+                assert 'A local version of {} is not available'.format(
                     extra_resource['external_url']
                 ) in str(w[-1].message)
 
