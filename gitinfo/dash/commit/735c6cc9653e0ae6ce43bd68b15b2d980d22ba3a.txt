commit 735c6cc9653e0ae6ce43bd68b15b2d980d22ba3a
Author: chriddyp <chris@plot.ly>
Date:   Sat Jun 4 22:54:43 2016 -0400

    working backend

diff --git a/.gitignore b/.gitignore
index f8a29bed..c9a229cd 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,4 +1,6 @@
 build/
 node_modules/
 .npm
-
+vv/
+venv/
+*.pyc
diff --git a/dash/dash/__init__.py b/dash/dash/__init__.py
new file mode 100644
index 00000000..3c9575b9
--- /dev/null
+++ b/dash/dash/__init__.py
@@ -0,0 +1 @@
+from react import Dash
diff --git a/dash/dash/components.py b/dash/dash/components.py
new file mode 100644
index 00000000..059060bc
--- /dev/null
+++ b/dash/dash/components.py
@@ -0,0 +1,267 @@
+import collections
+
+
+# Other valid react attributes include:
+# https://facebook.github.io/react/docs/tags-and-attributes.html#html-attributes
+
+supported_react_attributes = [
+    'src', 'height', 'width', 'accept',
+    'acceptCharset', 'accessKey', 'action', 'allowFullScreen',
+    'allowTransparency', 'alt', 'async', 'autoComplete', 'autoFocus',
+    'autoPlay', 'cellPadding', 'cellSpacing', 'charSet', 'checked',
+    'classID', 'colSpan', 'cols', 'content', 'contentEditable',
+    'contextMenu', 'controls', 'coords', 'crossOrigin', 'data',
+    'dateTime', 'defer', 'dir', 'disabled', 'download', 'draggable',
+    'encType', 'form', 'formAction', 'formEncType', 'formMethod',
+    'formNoValidate', 'formTarget', 'frameBorder', 'headers', 'hidden',
+    'high', 'href', 'hrefLang', 'htmlFor', 'httpEquiv', 'icon',
+    'lang', 'list', 'loop', 'low', 'manifest', 'marginHeight',
+    'marginWidth', 'max', 'maxLength', 'media', 'mediaGroup',
+    'method', 'min', 'multiple', 'muted', 'name', 'noValidate',
+    'open', 'optimum', 'pattern', 'placeholder', 'poster', 'preload',
+    'radioGroup', 'readOnly', 'rel', 'required', 'role', 'rowSpan',
+    'rows', 'sandbox', 'scope', 'scoped', 'scrolling', 'seamless',
+    'selected', 'shape', 'size', 'sizes', 'span', 'spellCheck',
+    'srcDoc', 'srcSet', 'start', 'step', 'tabIndex', 'target',
+    'title', 'type', 'useMap', 'value', 'wmode']
+# TODO: add `label` back - it conflicts with the actual html element type I think
+
+
+class Component(collections.MutableSequence):
+    def __init__(self, **kwargs):
+        for required_key in ['content', 'id']:
+            if required_key not in kwargs:
+                raise Exception("'{}' is a required keyword "
+                                "argument.".format(required_key))
+
+        for k, v in kwargs.iteritems():
+            if k in ['id', 'content', 'className', 'style', 'selected'] or v is not None:  # not sure about this -- sometimes the user will want to send up None, like to clear the output cell
+                setattr(self, k, v)
+        if 'dependencies' in kwargs:
+            self.dependencies = kwargs['dependencies']
+
+    def to_plotly_json(self):
+        as_json = {
+            'props': {p: getattr(self, p)
+                      for p in self._prop_names
+                      if p != 'content' and hasattr(self, p)},
+            'type': self._type,
+            'children': self.content
+        }
+        if hasattr(self, 'dependencies'):
+            as_json['dependencies'] = self.dependencies
+        return as_json
+
+    def __getitem__(self, id):
+        if isinstance(self.content, basestring) or self.content is None:
+            raise KeyError
+
+        for item in self.content:
+            if isinstance(item, basestring) or self.content is None:
+                continue
+            elif getattr(item, 'id', None) == id:
+                return item
+            try:
+                component = item[id]
+            except:
+                pass
+            else:
+                return component
+        raise KeyError
+
+    def __setitem__(self, index, component):
+        if isinstance(self.content, basestring) or self.content is None:
+            raise KeyError
+        self.content.__setitem__(index, component)
+
+    def __delitem__(self, id):
+        if isinstance(self.content, basestring) or self.content is None:
+            raise KeyError
+
+        for i, item in enumerate(self.content):
+            if isinstance(item, basestring) or self.content is None:
+                continue
+            else:
+                if item.id == id:
+                    self.content.__delitem__(i)
+                    return
+            try:
+                item.__delitem__(id)
+            except:
+                pass
+            else:
+                return
+        raise KeyError
+
+    def __len__(self):
+        if isinstance(self.content, basestring) or self.content is None:
+            return 1
+        else:
+            count = 1
+            for item in self.content:
+                if (isinstance(self.content, basestring) or
+                   self.content is None):
+                    count += 1
+                else:
+                    count += item.__len__()
+            return count
+
+    def insert(self, index, component):
+        if isinstance(self.content, basestring) or self.content is None:
+            self.content = [self.content]
+        self.content.insert(index, component)
+
+
+def generate_class(typename, args, setup):
+    # http://jameso.be/2013/08/06/namedtuple.html
+    import sys
+    c = '''class {typename}(Component):
+        """A {typename} component.\nValid keys:\n{bullet_list_of_valid_keys}
+        """
+        def __init__(self, {default_argtext}):
+            self._prop_names = {list_of_valid_keys}
+            self._type = '{typename}'
+            super({typename}, self).__init__({argtext})
+            setup(self)
+
+        def __repr__(self):
+            if(any(getattr(self, c, None) is not None for c in self._prop_names
+                   if c is not "content")):
+                return '{typename}(\\n    '+', \\n    '.join([c+'='+repr(getattr(self, c, None))
+                                                for c in self._prop_names if getattr(self, c, None) is not None])+'\\n)'
+            else:
+                return '{typename}(' + repr(self.content) + ')'
+    '''
+    args.extend([s for s in supported_react_attributes if s not in args])
+    list_of_valid_keys = repr(args)
+    bullet_list_of_valid_keys = ('- ' + ' (dflt: None)\n- '.join(args) +
+                                 ' (dflt: None)')
+
+    default_argtext = ''
+    argtext = ''
+    for arg in args:
+        default_argtext += arg + '=None, '
+        argtext += arg + '=' + arg + ', '
+
+    default_argtext += '**kwargs'
+    argtext = argtext[:-2]
+
+    d = c.format(**locals())
+
+    namespace = {'Component': Component, 'setup': setup}
+    exec d in namespace
+    result = namespace[typename]
+    result.__module__ = sys._getframe(1).f_globals.get('__name__', '__main__')
+    return result
+
+
+def empty(self):
+    pass
+
+
+def init_dropdown(self):
+    if self.selected is None:
+        self.selected = self.options[0]['val']
+
+
+_valid_kwargs = ['content', 'id', 'className', 'style', 'dependencies']
+
+_customelements = [
+    {
+        'type': 'Dropdown',
+        'valid_kwargs': _valid_kwargs + ['options', 'selected'],
+        'setup': init_dropdown
+    },
+    {
+        'type': 'RadioButton',
+        'valid_kwargs': _valid_kwargs + ['options', 'name', 'selected'],
+        'setup': empty
+    },
+    {
+        'type': 'TextInput',
+        'valid_kwargs': _valid_kwargs + [
+            'label', 'value',
+            'placeholder', 'labelstyle'
+        ],
+        'setup': empty
+    },
+
+    {
+        'type': 'Slider',
+        'valid_kwargs': _valid_kwargs + ['min', 'max', 'step',
+                                         'value', 'label'],
+        'setup': empty
+    },
+    {
+        'type': 'PlotlyGraph',
+        'valid_kwargs': _valid_kwargs +
+                ['figure', 'height', 'width',
+                 'bindClick', 'bindHover',
+                 'click', 'hover'],
+        'setup': empty
+    },
+    {
+        'type': 'CheckList',
+        'valid_kwargs': _valid_kwargs + ['options'],
+        'setup': empty
+    },
+
+    {
+        'type': 'Highlight',
+        'valid_kwargs': _valid_kwargs,
+        'setup': empty
+    },
+
+    {
+        'type': 'InputControl',
+        'valid_kwargs': _valid_kwargs,
+        'setup': empty
+    }
+]
+
+_htmlelements = ['a', 'abbr', 'address', 'area', 'article', 'aside',
+                 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote',
+                 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code',
+                 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details',
+                 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset',
+                 'figcaption', 'figure', 'footer', 'form',
+                 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hr',
+                 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen',
+                 'label', 'legend', 'li', 'link', 'main', 'map', 'mark',
+                 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript',
+                 'object', 'ol', 'optgroup', 'option', 'output', 'p',
+                 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt',
+                 'ruby', 's', 'samp', 'script', 'section', 'select',
+                 'small', 'source', 'span', 'strong', 'style', 'sub',
+                 'summary', 'sup', 'table', 'tbody', 'td', 'textarea',
+                 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u',
+                 'ul', 'var', 'video', 'wbr']
+
+_invalid_elements = ['del']
+
+for _i in _invalid_elements:
+    _htmlelements.remove(_i)
+
+for _h in _htmlelements:
+    globals()[_h] = generate_class(_h, _valid_kwargs, empty)
+
+for _s in _customelements:
+    globals()[_s['type']] = generate_class(_s['type'],
+                                           _s['valid_kwargs'],
+                                           _s['setup'])
+
+
+def gen_table(rows, header=[]):
+    tbl = table([
+        thead([
+            tr([
+                th(h) for h in header
+            ])
+        ]),
+        tbody([
+            tr([
+                td(cell) for cell in row
+            ]) for row in rows
+        ])
+    ])
+    return tbl
diff --git a/dash/dash/react.py b/dash/dash/react.py
new file mode 100644
index 00000000..75620ea1
--- /dev/null
+++ b/dash/dash/react.py
@@ -0,0 +1,80 @@
+import flask
+import plotly
+import json
+import components
+from flask import Flask
+from flask.ext.cors import CORS
+
+
+class Dash(object):
+    def __init__(self, name=None, url_namespace='', server=None):
+        self.layout = None
+
+        self.react_map = {}
+
+        if server is not None:
+            self.server = server
+        else:
+            self.server = flask.Flask(name)
+
+        CORS(self.server) # TODO: lock this down to dev node server port
+
+        self.server.add_url_rule(
+            '{}/initialize'.format(url_namespace),
+            view_func=self.initialize,
+            endpoint='{}_{}'.format(url_namespace, 'initialize'))
+        self.server.add_url_rule(
+            '{}/interceptor'.format(url_namespace),
+            view_func=self.interceptor,
+            endpoint='{}_{}'.format(url_namespace, 'interceptor'),
+            methods=['POST'])
+        self.server.add_url_rule(
+            '{}/'.format(url_namespace),
+            endpoint='{}_{}'.format(url_namespace, 'index'),
+            view_func=self.index)
+
+    def index(self):
+        return flask.render_template('index.html')
+
+    def initialize(self):
+        return flask.jsonify(json.loads(json.dumps(self.layout,
+                             cls=plotly.utils.PlotlyJSONEncoder)))
+
+    def interceptor(self):
+        body = json.loads(flask.request.get_data())
+        target = body['target']
+        target_id = target['props']['id']
+        parent_json = body['parents']
+        parents = []
+        for pid in self.react_map[target_id]['parents']:
+            component_json = parent_json[pid]
+            component = getattr(components, component_json['type'])(
+                **component_json['props'])
+            parents.append(component)
+        return self.react_map[target_id]['callback'](*parents)
+
+    def react(self, component_id, parents=[]):
+        def wrap_func(func):
+            def add_context(*args, **kwargs):
+
+                new_component_props = func(*args, **kwargs)
+                new_component_props['id'] = component_id
+                component_json = {}
+                if 'content' in new_component_props:
+                    component_json['children'] = \
+                        new_component_props.pop('content')
+                component_json['props'] = new_component_props
+
+                response = {'response': component_json}
+                return flask.jsonify(json.loads(json.dumps(response,
+                                     cls=plotly.utils.PlotlyJSONEncoder)))
+
+            self.react_map[component_id] = {
+                'callback': add_context,
+                'parents': parents
+            }
+
+            self.layout[component_id].dependencies = parents
+            return add_context
+
+        return wrap_func
diff --git a/dash/helloworld.py b/dash/helloworld.py
new file mode 100644
index 00000000..3932f5b8
--- /dev/null
+++ b/dash/helloworld.py
@@ -0,0 +1,43 @@
+import datetime
+import time
+import random
+
+from dash.react import Dash
+from dash.components import div, p, InputControl
+
+dash = Dash(__name__)
+
+dash.layout = div([
+    p('basic <p> component'),
+    div([
+        div('B, C, D, depend on A'),
+        div('E depends on B and C'),
+        div('F depends on A and D')
+    ], style=dict(fontSize=14)),
+
+    InputControl(placeholder='A', id='A'),
+    InputControl(placeholder='B', id='B'),
+    InputControl(placeholder='C', id='C'),
+    InputControl(placeholder='D', id='D'),
+    InputControl(placeholder='E', id='E'),
+    InputControl(placeholder='F', id='F')
+
+])
+
+
+def update_component(*components):
+    time.sleep(random.random() * 5)
+    return {
+        'value': str(datetime.datetime.now().second)
+    }
+
+
+dash.react('B', ['A'])(update_component)
+dash.react('C', ['A'])(update_component)
+dash.react('D', ['A'])(update_component)
+dash.react('E', ['B', 'C'])(update_component)
+dash.react('F', ['A', 'D'])(update_component)
+
+
+if __name__ == '__main__':
+    dash.server.run(port=8050, debug=True)
diff --git a/dash/setup.py b/dash/setup.py
new file mode 100644
index 00000000..a1e3f8b6
--- /dev/null
+++ b/dash/setup.py
@@ -0,0 +1,12 @@
+from setuptools import setup
+
+setup(
+    name='dash.ly',
+    version='0.10.9',
+    author='chris p',
+    author_email='chris@plot.ly',
+    packages=['dash'],
+    license='See LICENSE.txt',
+    description='',
+    long_description=open('README.txt').read(),
+)
diff --git a/renderer/config/partials/babel.js b/renderer/config/partials/babel.js
index a91354e8..f940db4e 100644
--- a/renderer/config/partials/babel.js
+++ b/renderer/config/partials/babel.js
@@ -10,6 +10,7 @@ module.exports = function (config) {
     return partial(config, {
         module: {
             loaders: [
+                { test: /\.json$/, loader: 'json-loader' },
                 {
                     test: /\.js/,
                     include: [SRC],
@@ -23,4 +24,3 @@ module.exports = function (config) {
         }
     });
 };
-
diff --git a/renderer/config/partials/babelHot.js b/renderer/config/partials/babelHot.js
index 5ec3876d..e1f3027c 100644
--- a/renderer/config/partials/babelHot.js
+++ b/renderer/config/partials/babelHot.js
@@ -9,7 +9,9 @@ var SRC = path.join(ROOT, 'src');
 module.exports = function (config) {
     return partial(config, {
         module: {
+            noParse: /node_modules\/json-schema\/lib\/validate\.js/, // used to get `request` to work: https://github.com/request/request/issues/1920#issuecomment-171246043
             loaders: [
+                { test: /\.json$/, loader: 'json-loader' },
                 {
                     test: /\.js/,
                     include: [SRC],
@@ -26,4 +28,3 @@ module.exports = function (config) {
         }
     });
 };
-
diff --git a/renderer/config/webpack.config.js b/renderer/config/webpack.config.js
index cfc051de..3e396a8d 100644
--- a/renderer/config/webpack.config.js
+++ b/renderer/config/webpack.config.js
@@ -11,6 +11,12 @@ module.exports = {
     context: SRC,
     resolve: {
         // Need `''` so referencing modules by `name.js` works.
-        extensions: ['', '.js', '.jsx']
+        extensions: ['', '.js', '.jsx', '.json']
+    },
+    node: {
+        console: true,
+        fs: 'empty',
+        net: 'empty',
+        tls: 'empty'
     }
 };
diff --git a/renderer/package.json b/renderer/package.json
index ec3340a7..0c3f1e3e 100644
--- a/renderer/package.json
+++ b/renderer/package.json
@@ -33,12 +33,14 @@
     "redux": "^3.4.0",
     "redux-actions": "^0.9.1",
     "redux-thunk": "^2.0.1",
+    "request": "^2.72.0",
     "webpack": "^1.13.1",
     "webpack-partial": "^1.2.0"
   },
   "devDependencies": {
     "babel-plugin-transform-es2015-modules-commonjs-simple": "^6.7.4",
     "babel-preset-es2015-webpack": "^6.4.1",
+    "json-loader": "^0.5.4",
     "react-hot-loader": "^1.3.0",
     "serv": "^0.2.4",
     "webpack-dev-server": "^1.14.1"
diff --git a/renderer/src/AppContainer.react.js b/renderer/src/AppContainer.react.js
index a2c19cbd..dc7d9610 100644
--- a/renderer/src/AppContainer.react.js
+++ b/renderer/src/AppContainer.react.js
@@ -3,12 +3,14 @@ import {Provider} from 'react-redux'
 
 import initializeStore from './store';
 import TreeContainer from './TreeContainer.react';
+import { initialize } from './actions';
 
 const store = initializeStore();
+// Initialization
+store.dispatch(initialize());
 
 export default () => (
     <Provider store={store}>
         <TreeContainer/>
     </Provider>
 );
-
diff --git a/renderer/src/TreeContainer.react.js b/renderer/src/TreeContainer.react.js
index 775be304..96155382 100644
--- a/renderer/src/TreeContainer.react.js
+++ b/renderer/src/TreeContainer.react.js
@@ -1,13 +1,20 @@
-import HTML5Backend from 'react-dnd-html5-backend';
-import { DragDropContext } from 'react-dnd';
+// import HTML5Backend from 'react-dnd-html5-backend';
+// import { DragDropContext } from 'react-dnd';
+import React from 'react';
 import { connect } from 'react-redux'
 
 import renderTree from './renderTree';
 
-const UnconnectedContainer = props => renderTree(
-    props.layout.toJS(),
-    props.dependencyGraph
-);
+const UnconnectedContainer = props => {
+    // TODO: Request status? Loading, error, ...
+    if (props.layout.isEmpty()) {
+        return (<div>loading...</div>);
+    }
+    return renderTree(
+        props.layout.toJS(),
+        props.dependencyGraph
+    );
+}
 
 const Container = connect(
     state => ({      // map state to props
@@ -17,4 +24,5 @@ const Container = connect(
     })
 )(UnconnectedContainer);
 
-export default DragDropContext(HTML5Backend)(Container);
+export default Container;
+// export default DragDropContext(HTML5Backend)(Container);
diff --git a/renderer/src/actions/index.js b/renderer/src/actions/index.js
index 3cf6e165..8f90a9cb 100644
--- a/renderer/src/actions/index.js
+++ b/renderer/src/actions/index.js
@@ -1,10 +1,15 @@
+/* eslint-disable no-console */
 import R from 'ramda';
 import { createAction } from 'redux-actions';
+import request from 'request';
+import Immutable from 'immutable';
 
 export const ACTIONS = (action) => {
     const actionList = {
         ON_PROP_CHANGE: 'ON_PROP_CHANGE',
-        SET_REQUEST_QUEUE: 'SET_REQUEST_QUEUE'
+        SET_REQUEST_QUEUE: 'SET_REQUEST_QUEUE',
+        SET_LAYOUT: 'SET_LAYOUT',
+        COMPUTE_GRAPH: 'COMPUTE_GRAPH'
     };
     if (actionList[action]) return actionList[action];
     else throw new Error(`${action} is not defined.`)
@@ -12,6 +17,25 @@ export const ACTIONS = (action) => {
 
 export const updateProps = createAction(ACTIONS('ON_PROP_CHANGE'));
 export const setRequestQueue = createAction(ACTIONS('SET_REQUEST_QUEUE'));
+const setLayout = createAction(ACTIONS('SET_LAYOUT'));
+const computeGraph = createAction(ACTIONS('COMPUTE_GRAPH'));
+
+export const initialize = function() {
+    return function (dispatch) {
+        console.warn('initializing GET');
+        request({
+            method: 'GET',
+            withCredentials: false, // https://github.com/request/request/issues/986#issuecomment-53377999
+            url: 'http://localhost:8050/initialize'
+        }, function(err, res, body) {
+            // TODO: error handling
+            const layout = JSON.parse(body);
+            const immutableLayout = Immutable.fromJS(layout);
+            dispatch(setLayout(immutableLayout));
+            dispatch(computeGraph(layout)); // TODO - immutable everywhere?
+        });
+    }
+}
 
 // TODO: make the actual POST
 export const notifyObservers = function(payload) {
@@ -42,38 +66,54 @@ export const notifyObservers = function(payload) {
             const observerComponent = layout.getIn(paths[observerId]);
 
             /*
-             * before we make the POST, check that none of it's dependencies
+             * before we make the POST, check that none of its dependencies
              * are already in the queue. if they are in the queue, then don't update.
-             * when each dependency updates, it'll dispatch it's own `notifyObservers`
+             * when each dependency updates, it'll dispatch its own `notifyObservers`
              * action which will allow this component to update.
              */
-            if (R.intersection(
-                    // TODO Can just use `requestQueue`.
-                    getState().requestQueue,
-                    dependencyGraph.dependenciesOf(observerId)
-                ).length === 0) {
+            const dependenciesInQueue = R.intersection(
+                // TODO Can just use `requestQueue`?
+                getState().requestQueue,
+                dependencyGraph.dependenciesOf(observerId)
+            );
+            if (dependenciesInQueue.length !== 0) {
+
+                console.warn(`SKIP updating ${observerId}, waiting for ${dependenciesInQueue} to update.`);
+
+            } else {
 
                 /*
                  * Construct a payload of the props of all of the dependencies
                  * (controller components of this observer component).
                  */
-                const payload = observerComponent.get('dependencies').reduce(
+                const controllers = observerComponent.get('dependencies').reduce(
                     (r, id) => {
-                        r[id] = layout.getIn(R.append('props', paths[id])).toJS();
+                        r[id] = layout.getIn(paths[id]).toJS();
                         return r;
-                    }, {target: observerId}
+                    }, {}
                 );
+                const body = {
+                    target: layout.getIn(paths[observerId]),
+                    parents: controllers
+                }
 
                 /* eslint-disable no-console */
 
                 // make the /POST
                 // xhr.POST(/update-component) ...
-                console.warn('POST /update-component', JSON.stringify(payload, null, 2));
+                console.warn(`POST: ${observerId}`);
 
                 // mimic async POST request behaviour with setTimeout
-                setTimeout(() => {
+                request({
+                    method: 'POST',
+                    body: JSON.stringify(body),
+                    withCredentials: false,
+                    url: 'http://localhost:8050/interceptor'// location.href + 'interceptor'
+                }, function(err, res, body) {
+                    const response = JSON.parse(body).response;
+
                     // clear this item from the request queue
-                    console.warn(`RESPONSE ${observerId}`);
+                    console.warn(`RESPONSE: ${observerId}`);
                     dispatch(setRequestQueue(
                         R.reject(
                             id => id === observerId,
@@ -85,17 +125,16 @@ export const notifyObservers = function(payload) {
                     // and update the props of the component
                     const observerUpdatePayload = {
                         itempath: paths[observerId],
-                        // new props from the server, just hard coded here
-                        props: {value: 1000*Math.random()}
+                        // new props from the server
+                        props: response.props
                     };
                     dispatch(updateProps(observerUpdatePayload));
 
                     // and now update *this* component's dependencies
                     observerUpdatePayload.id = observerId;
                     dispatch(notifyObservers(observerUpdatePayload));
-                }, 10000*Math.random());
 
-                /* eslint-enable no-console */
+                });
 
             }
         }
diff --git a/renderer/src/components/core/Draggable.react.js b/renderer/src/components/core/Draggable.react.js
index 226f2e74..88acc6a5 100644
--- a/renderer/src/components/core/Draggable.react.js
+++ b/renderer/src/components/core/Draggable.react.js
@@ -27,7 +27,7 @@ const collectProps = (connect, monitor) => ({
     isDragging: monitor.isDragging()
 });
 
-class Draggable extends Component {
+export class Draggable extends Component {
     render() {
         console.warn('Draggable: ', this.props); // eslint-disable-line
         const { isDragging, connectDragSource } = this.props;
diff --git a/renderer/src/reducers/dependencyGraph.js b/renderer/src/reducers/dependencyGraph.js
index d8e201d2..6d0f124c 100644
--- a/renderer/src/reducers/dependencyGraph.js
+++ b/renderer/src/reducers/dependencyGraph.js
@@ -1,29 +1,36 @@
 import {DepGraph} from 'dependency-graph';
 
-import spec from '../spec'; // TODO: this'll eventually load from the API
 import {crawlLayout} from './utils';
 
 const initialGraph = new DepGraph();
 
-// TODO: Don't initialize graph as side-effect of importing reducer.
-// add ID's to all the components
-crawlLayout(spec, child => {
-    if (child.props && child.props.id) {
-        initialGraph.addNode(child.props.id);
-    }
-});
+const dependencyGraph = (state = initialGraph, action) => {
+    switch (action.type) {
+        case 'COMPUTE_GRAPH': {
+            const layout = action.payload;
+            const graph = new DepGraph();
+
+            // add ID's to all the components
+            crawlLayout(layout, child => {
+                if (child.props && child.props.id) {
+                    graph.addNode(child.props.id);
+                }
+            });
 
-// add dependencies to the graph
-crawlLayout(spec, child => {
-    if (child.dependencies) {
-        for (let i = 0; i < child.dependencies.length; i++) {
-            initialGraph.addDependency(child.props.id, child.dependencies[i]);
+            // add dependencies to the graph
+            crawlLayout(layout, child => {
+                if (child.dependencies) {
+                    for (let i = 0; i < child.dependencies.length; i++) {
+                        graph.addDependency(
+                            child.props.id,
+                            child.dependencies[i]
+                        );
+                    }
+                }
+            });
+            return graph;
         }
-    }
-});
 
-const dependencyGraph = (state = initialGraph, action) => {
-    switch (action.type) {
         default:
             return state;
     }
diff --git a/renderer/src/reducers/layout.js b/renderer/src/reducers/layout.js
index 8be9a274..81801a33 100644
--- a/renderer/src/reducers/layout.js
+++ b/renderer/src/reducers/layout.js
@@ -2,13 +2,15 @@ import R from 'ramda';
 import Immutable from 'immutable';
 
 // TODO: this should be a prop of the high-level component
-import spec from '../spec'; // do we need this now?
 import {ACTIONS} from '../actions';
 import {createTreePath} from './utils';
 
-const layout = (state = Immutable.fromJS(spec), action) => {
+const layout = (state = Immutable.fromJS({}), action) => {
     switch (action.type) {
 
+        case ACTIONS('SET_LAYOUT'):
+            return action.payload;
+
         // Update the props of the component
         case ACTIONS('ON_PROP_CHANGE'): {
             let propPath = R.append('props', action.payload.itempath);
diff --git a/renderer/src/reducers/requestQueue.js b/renderer/src/reducers/requestQueue.js
index b55aadf3..761730a5 100644
--- a/renderer/src/reducers/requestQueue.js
+++ b/renderer/src/reducers/requestQueue.js
@@ -1,8 +1,9 @@
 const requestQueue = (state = [], action) => {
     switch (action.type) {
         case 'SET_REQUEST_QUEUE':
+            console.warn(`REQUEST QUEUE ${action.payload}`);
             if (Array.isArray(action.payload)) {
-                state = Object.assign({}, action.payload);
+                state = action.payload;
             }
 
             return state;
diff --git a/renderer/src/renderTree.js b/renderer/src/renderTree.js
index baf7a8c7..718721d9 100644
--- a/renderer/src/renderTree.js
+++ b/renderer/src/renderTree.js
@@ -13,7 +13,7 @@ export default function render(component, dependencyGraph, path=[]) {
 
     // Create list of child elements
     let children;
-    if (!R.has('children', component)) {
+    if (!R.has('children', component) || !component.children) {
         children = [];
     }
     else if (Array.isArray(component.children)) {
@@ -28,7 +28,7 @@ export default function render(component, dependencyGraph, path=[]) {
     // Create wrapping parent element
     const element = R.has(component.type, Registry)
         ? Registry[component.type]
-        : component.type;
+        : component.type; // TODO: check against React's registry - this may not be native component either
 
     const parent = React.createElement(
         element,
@@ -69,6 +69,12 @@ export default function render(component, dependencyGraph, path=[]) {
     if (
         component.props &&
         component.props.id &&
+        /*
+         * in case it isn't initalized yet -
+         * TODO: we should be able to remove this check
+         * with like a initialization status store or something
+         */
+        dependencyGraph.hasNode(component.props.id) &&
         dependencyGraph.dependantsOf(component.props.id)
     ) {
         return (
