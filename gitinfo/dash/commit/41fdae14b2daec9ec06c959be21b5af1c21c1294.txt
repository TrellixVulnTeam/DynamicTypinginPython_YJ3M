commit 41fdae14b2daec9ec06c959be21b5af1c21c1294
Author: alexcjohnson <alex@plot.ly>
Date:   Sat Apr 4 21:30:38 2020 -0400

    fix layout changedProps edge case
    callbacks entirely in new layout chunk or not determines whether
    inputs appear changed or not

diff --git a/dash-renderer/src/actions/dependencies.js b/dash-renderer/src/actions/dependencies.js
index 72f580f8..02d046c2 100644
--- a/dash-renderer/src/actions/dependencies.js
+++ b/dash-renderer/src/actions/dependencies.js
@@ -23,8 +23,10 @@ import {
     partition,
     path,
     pickBy,
+    pluck,
     propEq,
     props,
+    startsWith,
     unnest,
     values,
     zip,
@@ -1190,13 +1192,16 @@ export function getWatchedKeys(id, newProps, graphs) {
  *   when the new *absence* of a given component should trigger a callback.
  * opts.newPaths: paths object after the edit - to be used with
  *   removedArrayInputsOnly to determine if the callback still has its outputs
+ * opts.chunkPath: path to the new chunk - used to determine if any outputs are
+ *   outside of this chunk, because this determines whether inputs inside the
+ *   chunk count as having changed
  *
  * Returns an array of objects:
  *   {callback, resolvedId, getOutputs, getInputs, getState, ...etc}
  *   See getCallbackByOutput for details.
  */
 export function getCallbacksInLayout(graphs, paths, layoutChunk, opts) {
-    const {outputsOnly, removedArrayInputsOnly, newPaths} = opts || {};
+    const {outputsOnly, removedArrayInputsOnly, newPaths, chunkPath} = opts;
     const foundCbIds = {};
     const callbacks = [];
 
@@ -1249,7 +1254,23 @@ export function getCallbacksInLayout(graphs, paths, layoutChunk, opts) {
             }
         }
         if (!outputsOnly && inIdCallbacks) {
-            const idStr = removedArrayInputsOnly && stringifyId(id);
+            const maybeAddCallback = removedArrayInputsOnly
+                ? addCallbackIfArray(stringifyId(id))
+                : addCallback;
+            let handleThisCallback = maybeAddCallback;
+            if (chunkPath) {
+                handleThisCallback = cb => {
+                    if (
+                        all(
+                            startsWith(chunkPath),
+                            pluck('path', flatten(cb.getOutputs(paths)))
+                        )
+                    ) {
+                        cb.changedPropIds = {};
+                    }
+                    maybeAddCallback(cb);
+                };
+            }
             for (const property in inIdCallbacks) {
                 getCallbacksByInput(
                     graphs,
@@ -1257,11 +1278,7 @@ export function getCallbacksInLayout(graphs, paths, layoutChunk, opts) {
                     id,
                     property,
                     INDIRECT
-                ).forEach(
-                    removedArrayInputsOnly
-                        ? addCallbackIfArray(idStr)
-                        : addCallback
-                );
+                ).forEach(handleThisCallback);
             }
         }
     }
diff --git a/dash-renderer/src/actions/index.js b/dash-renderer/src/actions/index.js
index fd7c27be..6e59cf45 100644
--- a/dash-renderer/src/actions/index.js
+++ b/dash-renderer/src/actions/index.js
@@ -559,7 +559,9 @@ function updateChildPaths(
 
     const cleanedCallbacks = pruneRemovedCallbacks(pendingCallbacks, paths);
 
-    const newCallbacks = getCallbacksInLayout(graphs, paths, children);
+    const newCallbacks = getCallbacksInLayout(graphs, paths, children, {
+        chunkPath: childrenPath,
+    });
 
     // Wildcard callbacks with array inputs (ALL / ALLSMALLER) need to trigger
     // even due to the deletion of components
@@ -567,7 +569,7 @@ function updateChildPaths(
         graphs,
         oldPaths,
         oldChildren,
-        {removedArrayInputsOnly: true, newPaths: paths}
+        {removedArrayInputsOnly: true, newPaths: paths, chunkPath: childrenPath}
     );
 
     const allNewCallbacks = mergePendingCallbacks(
diff --git a/tests/integration/callbacks/test_multiple_callbacks.py b/tests/integration/callbacks/test_multiple_callbacks.py
index 517fb127..009c8e7d 100644
--- a/tests/integration/callbacks/test_multiple_callbacks.py
+++ b/tests/integration/callbacks/test_multiple_callbacks.py
@@ -241,7 +241,7 @@ def test_cbmt005_multi_converging_chain(dash_duo):
 def test_cbmt006_derived_props(dash_duo):
     app = dash.Dash(__name__)
     app.layout = html.Div(
-        [html.Div(id="output"), html.Button("click", id="btn"), dcc.Store(id="store"),]
+        [html.Div(id="output"), html.Button("click", id="btn"), dcc.Store(id="store")]
     )
 
     @app.callback(
diff --git a/tests/integration/callbacks/test_wildcards.py b/tests/integration/callbacks/test_wildcards.py
index e712130a..2dbfeb36 100644
--- a/tests/integration/callbacks/test_wildcards.py
+++ b/tests/integration/callbacks/test_wildcards.py
@@ -15,10 +15,10 @@ def css_escape(s):
     return sel
 
 
-def todo_app():
+def todo_app(content_callback):
     app = dash.Dash(__name__)
 
-    app.layout = html.Div(
+    content = html.Div(
         [
             html.Div("Dash To-Do list"),
             dcc.Input(id="new-item"),
@@ -30,6 +30,16 @@ def todo_app():
         ]
     )
 
+    if content_callback:
+        app.layout = html.Div([html.Div(id="content"), dcc.Location(id="url")])
+
+        @app.callback(Output("content", "children"), [Input("url", "pathname")])
+        def display_content(_):
+            return content
+
+    else:
+        app.layout = content
+
     style_todo = {"display": "inline", "margin": "10px"}
     style_done = {"textDecoration": "line-through", "color": "#888"}
     style_done.update(style_todo)
@@ -127,8 +137,9 @@ def todo_app():
     return app
 
 
-def test_cbwc001_todo_app(dash_duo):
-    app = todo_app()
+@pytest.mark.parametrize("content_callback", (False, True))
+def test_cbwc001_todo_app(content_callback, dash_duo):
+    app = todo_app(content_callback)
     dash_duo.start_server(app)
 
     dash_duo.wait_for_text_to_equal("#totals", "0 of 0 items completed")
@@ -370,3 +381,76 @@ def test_cbwc003_same_keys(dash_duo):
         '#\\{\\"index\\"\\:0\\,\\"type\\"\\:\\"output\\"\\}', "Dropdown 0 = LA"
     )
     dash_duo.wait_for_no_elements(dash_duo.devtools_error_count_locator)
+
+
+def test_cbwc004_layout_chunk_changed_props(dash_duo):
+    app = dash.Dash(__name__)
+    app.layout = html.Div(
+        [
+            dcc.Input(id={"type": "input", "index": 1}, value="input-1"),
+            html.Div(id="container"),
+            html.Div(id="output-outer"),
+            html.Button("Show content", id="btn"),
+        ]
+    )
+
+    @app.callback(Output("container", "children"), [Input("btn", "n_clicks")])
+    def display_output(n):
+        if n:
+            return html.Div(
+                [
+                    dcc.Input(id={"type": "input", "index": 2}, value="input-2"),
+                    html.Div(id="output-inner"),
+                ]
+            )
+        else:
+            return "No content initially"
+
+    def trigger_info():
+        triggered = dash.callback_context.triggered
+        return "triggered is {} with prop_ids {}".format(
+            "Truthy" if triggered else "Falsy",
+            ", ".join(t["prop_id"] for t in triggered),
+        )
+
+    @app.callback(
+        Output("output-inner", "children"),
+        [Input({"type": "input", "index": ALL}, "value")],
+    )
+    def update_dynamic_output_pattern(wc_inputs):
+        return trigger_info()
+        # When this is triggered because output-2 was rendered,
+        # nothing has changed
+
+    @app.callback(
+        Output("output-outer", "children"),
+        [Input({"type": "input", "index": ALL}, "value")],
+    )
+    def update_output_on_page_pattern(value):
+        return trigger_info()
+        # When this triggered on page load,
+        # nothing has changed
+        # When dcc.Input(id={'type': 'input', 'index': 2})
+        # is rendered (from display_output)
+        # then `{'type': 'input', 'index': 2}` has changed
+
+    dash_duo.start_server(app)
+
+    dash_duo.wait_for_text_to_equal("#container", "No content initially")
+    dash_duo.wait_for_text_to_equal(
+        "#output-outer", "triggered is Falsy with prop_ids ."
+    )
+
+    dash_duo.find_element("#btn").click()
+    dash_duo.wait_for_text_to_equal(
+        "#output-outer",
+        'triggered is Truthy with prop_ids {"index":2,"type":"input"}.value',
+    )
+    dash_duo.wait_for_text_to_equal(
+        "#output-inner", "triggered is Falsy with prop_ids ."
+    )
+
+    dash_duo.find_elements("input")[0].send_keys("X")
+    trigger_text = 'triggered is Truthy with prop_ids {"index":1,"type":"input"}.value'
+    dash_duo.wait_for_text_to_equal("#output-outer", trigger_text)
+    dash_duo.wait_for_text_to_equal("#output-inner", trigger_text)
