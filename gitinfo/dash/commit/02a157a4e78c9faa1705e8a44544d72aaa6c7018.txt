commit 02a157a4e78c9faa1705e8a44544d72aaa6c7018
Author: John Bampton <jbampton@users.noreply.github.com>
Date:   Tue Jul 7 00:54:10 2020 +1000

    Fix case of JavaScript and Python.

diff --git a/CHANGELOG.md b/CHANGELOG.md
index 4a0978fe..f94392cc 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -296,7 +296,7 @@ clientside JavaScript callbacks via inline strings.
 ## [0.39.0] - 2019-03-04
 ### Added
 - [#436](https://github.com/plotly/dash/pull/436) Allow multiple outputs from a single callback.
-- [#367](https://github.com/plotly/dash/pull/367) Support custom javascript hooks to modify callback payloads and responses.
+- [#367](https://github.com/plotly/dash/pull/367) Support custom JavaScript hooks to modify callback payloads and responses.
 - [#623](https://github.com/plotly/dash/pull/623) Modify the flask response with custom cookies or headers, using `dash.callback_context.response`.
 - [renderer#93](https://github.com/plotly/dash-renderer/pull/93) Loading states API
 
@@ -333,7 +333,7 @@ clientside JavaScript callbacks via inline strings.
 - Bump dash-core-components version from 0.43.0 to [0.43.1](https://github.com/plotly/dash-core-components/blob/master/CHANGELOG.md#0431---2019-02-11)
 
 ### Fixed
-- [#563](https://github.com/plotly/dash/pull/563) Fix collections.abc deprecation warning for python 3.8
+- [#563](https://github.com/plotly/dash/pull/563) Fix collections.abc deprecation warning for Python 3.8
 
 ## [0.36.0] - 2019-01-25
 ### Removed
@@ -512,7 +512,7 @@ clientside JavaScript callbacks via inline strings.
 ## 0.24.1 - 2018-08-10
 ### Fixed
 - Fix bug [#321](https://github.com/plotly/dash/issues/321) where importing Dash components with no props would result in an error.
-- Fix a bug in 0.23.1 where importing components with arguments that are python keywords could cause an error. In particular, this fixes `dash-html-components` with Python 3.7.
+- Fix a bug in 0.23.1 where importing components with arguments that are Python keywords could cause an error. In particular, this fixes `dash-html-components` with Python 3.7.
 
 ## 0.24.0 - 2018-08-10
 ### Added
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index a1e9fda5..31dfbec6 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -45,7 +45,7 @@ As of Dash 1.2, the renderer bundle and its peer dependencies can be packed and
 5. `renderer build` runs 1, 2, 3, 4 in sequence as a complete build process from scratch.
 6. `renderer build local` runs the same order as in 5 and also generates source maps for debugging purposes. You also need to install dash-renderer with editable mode: `pip install -e .`.
 
-When a change in renderer code doesn't reflect in your browser as expected, this could be: confused bundle generation, caching issue in a browser, python package not in `editable` mode, etc. The new tool reduces the risk of bundle assets by adding the digest to help compare asset changes.
+When a change in renderer code doesn't reflect in your browser as expected, this could be: confused bundle generation, caching issue in a browser, Python package not in `editable` mode, etc. The new tool reduces the risk of bundle assets by adding the digest to help compare asset changes.
 
 ## Python 2 And 3 Compatibility
 
diff --git a/dash/dash.py b/dash/dash.py
index 0d90d880..2fc3a68a 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -1339,7 +1339,7 @@ class Dash(object):
             _reload.hash = generate_hash()
 
             # find_loader should return None on __main__ but doesn't
-            # on some python versions https://bugs.python.org/issue14710
+            # on some Python versions https://bugs.python.org/issue14710
             packages = [
                 pkgutil.find_loader(x)
                 for x in list(ComponentRegistry.registry) + ["dash_renderer"]
diff --git a/dash/development/_all_keywords.py b/dash/development/_all_keywords.py
index 9279138c..75d2c999 100644
--- a/dash/development/_all_keywords.py
+++ b/dash/development/_all_keywords.py
@@ -1,4 +1,4 @@
-# keyword.kwlist for both python 2 and 3
+# keyword.kwlist for both Python 2 and 3
 python_keywords = {
     "False",
     "None",
diff --git a/dash/development/_py_components_generation.py b/dash/development/_py_components_generation.py
index f8ee6664..c6aa769e 100644
--- a/dash/development/_py_components_generation.py
+++ b/dash/development/_py_components_generation.py
@@ -111,7 +111,7 @@ def generate_class_string(typename, props, description, namespace):
 
 
 def generate_class_file(typename, props, description, namespace):
-    """Generate a python class file (.py) given a class string.
+    """Generate a Python class file (.py) given a class string.
 
     Parameters
     ----------
@@ -169,7 +169,7 @@ def generate_classes_files(project_shortname, metadata, *component_generators):
 
 
 def generate_class(typename, props, description, namespace):
-    """Generate a python class object given a class string.
+    """Generate a Python class object given a class string.
 
     Parameters
     ----------
diff --git a/dash/development/_r_components_generation.py b/dash/development/_r_components_generation.py
index 7b86572a..e1e4344d 100644
--- a/dash/development/_r_components_generation.py
+++ b/dash/development/_r_components_generation.py
@@ -119,7 +119,7 @@ demo/.*\.js
 demo/.*\.html
 demo/.*\.css
 
-# ignore python files/folders
+# ignore Python files/folders
 setup.py
 usage.py
 setup.py
diff --git a/dash/development/component_generator.py b/dash/development/component_generator.py
index fd1c1d62..ac85e9e9 100644
--- a/dash/development/component_generator.py
+++ b/dash/development/component_generator.py
@@ -140,7 +140,7 @@ def cli():
         prog="dash-generate-components",
         formatter_class=_CombinedFormatter,
         description="Generate dash components by extracting the metadata "
-        "using react-docgen. Then map the metadata to python classes.",
+        "using react-docgen. Then map the metadata to Python classes.",
     )
     parser.add_argument("components_source", help="React components source directory.")
     parser.add_argument(
diff --git a/dash/development/component_loader.py b/dash/development/component_loader.py
index d7b06e7f..e66ddc65 100644
--- a/dash/development/component_loader.py
+++ b/dash/development/component_loader.py
@@ -62,12 +62,12 @@ def load_components(metadata_path, namespace="default_namespace"):
 
 def generate_classes(namespace, metadata_path="lib/metadata.json"):
     """Load React component metadata into a format Dash can parse, then create
-    python class files.
+    Python class files.
 
     Usage: generate_classes()
 
     Keyword arguments:
-    namespace -- name of the generated python package (also output dir)
+    namespace -- name of the generated Python package (also output dir)
 
     metadata_path -- a path to a JSON file created by
     [`react-docgen`](https://github.com/reactjs/react-docgen).
diff --git a/dash/testing/browser.py b/dash/testing/browser.py
index 554e3ad5..a6e675ce 100644
--- a/dash/testing/browser.py
+++ b/dash/testing/browser.py
@@ -127,7 +127,7 @@ class Browser(DashPageMixin):
 
     def percy_snapshot(self, name="", wait_for_callbacks=False):
         """percy_snapshot - visual test api shortcut to `percy_runner.snapshot`.
-        It also combines the snapshot `name` with the python version.
+        It also combines the snapshot `name` with the Python version.
         """
         snapshot_name = "{} - py{}.{}".format(
             name, sys.version_info.major, sys.version_info.minor
diff --git a/tests/integration/devtools/test_devtools_error_handling.py b/tests/integration/devtools/test_devtools_error_handling.py
index 87be679e..caa9b573 100644
--- a/tests/integration/devtools/test_devtools_error_handling.py
+++ b/tests/integration/devtools/test_devtools_error_handling.py
@@ -47,23 +47,23 @@ def test_dveh001_python_errors(dash_duo):
         dev_tools_hot_reload=False,
     )
 
-    dash_duo.percy_snapshot("devtools - python exception - start")
+    dash_duo.percy_snapshot("devtools - Python exception - start")
 
     dash_duo.find_element("#python").click()
     dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "1")
-    dash_duo.percy_snapshot("devtools - python exception - closed")
+    dash_duo.percy_snapshot("devtools - Python exception - closed")
 
     dash_duo.find_element(".test-devtools-error-toggle").click()
-    dash_duo.percy_snapshot("devtools - python exception - open")
+    dash_duo.percy_snapshot("devtools - Python exception - open")
 
     dash_duo.find_element(".test-devtools-error-toggle").click()
     dash_duo.find_element("#python").click()
 
     dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "2")
-    dash_duo.percy_snapshot("devtools - python exception - 2 errors")
+    dash_duo.percy_snapshot("devtools - Python exception - 2 errors")
 
     dash_duo.find_element(".test-devtools-error-toggle").click()
-    dash_duo.percy_snapshot("devtools - python exception - 2 errors open")
+    dash_duo.percy_snapshot("devtools - Python exception - 2 errors open")
 
     # the top (first) error is the most recent one - ie from the second click
     error0 = get_error_html(dash_duo, 0)
@@ -135,7 +135,7 @@ def test_dveh002_prevent_update_not_in_error_msg(dash_duo):
         if n_clicks == 1:
             raise PreventUpdate
         if n_clicks == 2:
-            raise Exception("An actual python exception")
+            raise Exception("An actual Python exception")
 
         return "button clicks: {}".format(n_clicks)
 
@@ -263,7 +263,7 @@ def test_dveh005_multiple_outputs(dash_duo):
 
     dash_duo.find_element("#multi-output").click()
     dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "1")
-    dash_duo.percy_snapshot("devtools - multi output python exception - closed")
+    dash_duo.percy_snapshot("devtools - multi output Python exception - closed")
 
     dash_duo.find_element(".test-devtools-error-toggle").click()
-    dash_duo.percy_snapshot("devtools - multi output python exception - open")
+    dash_duo.percy_snapshot("devtools - multi output Python exception - open")
