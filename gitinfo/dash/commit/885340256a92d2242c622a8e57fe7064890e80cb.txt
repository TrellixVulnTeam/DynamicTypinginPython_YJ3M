commit 885340256a92d2242c622a8e57fe7064890e80cb
Author: chriddyp <chris@plot.ly>
Date:   Fri Sep 8 16:06:38 2017 -0400

    move class based config to a dict-based config
    
    The class-based config was causing a few issues:
    - It was being shared across instances of dash! This was a surprise to
    me. Check this out:
    ```
    In [1]: class Dash(object):
       ...:     def __init__(self):
       ...:         pass
       ...:     class config:
       ...:         b = 3
       ...:
    
    In [2]: d1 = Dash()
    
    In [3]: d1.config.b = 10
    
    In [4]: d2 = Dash()
    
    In [4]: d2.config.b = 15
    
    In [5]: d1.config.b
    Out[5]: 15
    
    In [6]: d2.config.b
    Out[6]: 15
    ```
    - A dict-based config is just much better to deal with: you can
    `print(app.config)` to see all of the values and defaults and you can
    call dict methods like `update` on it.
    - For backwards compatibility, `config` is a `AttributeDict` which
    allows assignment through `__setattr__` (i.e. “dot” assignment), which
    is how the previous config worked
    - This also corrects the spelling correction to
    `supress_callback_exceptions` but falls back to the original mispelled
    version if the new version doesn’t exist yet (for backwards
    compatibility)

diff --git a/dash/_utils.py b/dash/_utils.py
new file mode 100644
index 00000000..5a6aa58a
--- /dev/null
+++ b/dash/_utils.py
@@ -0,0 +1,33 @@
+class AttributeDict(dict):
+    """
+    Dictionary subclass enabling attribute lookup/assignment of keys/values.
+    For example::
+        >>> m = AttributeDict({'foo': 'bar'})
+        >>> m.foo
+        'bar'
+        >>> m.foo = 'not bar'
+        >>> m['foo']
+        'not bar'
+    ``AttributeDict`` objects also provide ``.first()`` which acts like
+    ``.get()`` but accepts multiple keys as arguments, and returns the value of
+    the first hit, e.g.::
+        >>> m = AttributeDict({'foo': 'bar', 'biz': 'baz'})
+        >>> m.first('wrong', 'incorrect', 'foo', 'biz')
+        'bar'
+    """
+
+    def __setattr__(self, key, value):
+        self[key] = value
+
+    def __getattr__(self, key):
+        try:
+            return self[key]
+        except KeyError:
+            # to conform with __getattr__ spec
+            raise AttributeError(key)
+
+    def first(self, *names):
+        for name in names:
+            value = self.get(name)
+            if value:
+                return value
diff --git a/dash/dash.py b/dash/dash.py
index 513cb957..43e0c7b6 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -16,6 +16,7 @@ from .dependencies import Event, Input, Output, State
 from .resources import Scripts, Css
 from .development.base_component import Component
 from . import exceptions
+from ._utils import AttributeDict as _AttributeDict
 
 
 class Dash(object):
@@ -49,8 +50,11 @@ class Dash(object):
             self.server.secret_key = secret_key
 
         self.url_base_pathname = url_base_pathname
-        self.config.routes_pathname_prefix = url_base_pathname
-        self.config.requests_pathname_prefix = url_base_pathname
+        self.config = _AttributeDict({
+            'suppress_callback_exceptions': False,
+            'routes_pathname_prefix': url_base_pathname,
+            'requests_pathname_prefix': url_base_pathname
+        })
 
         # list of dependencies
         self.callback_map = {}
@@ -77,16 +81,16 @@ class Dash(object):
             )
 
         add_url(
-            '{}_dash-layout'.format(self.config.routes_pathname_prefix),
+            '{}_dash-layout'.format(self.config['routes_pathname_prefix']),
             self.serve_layout)
 
         add_url(
-            '{}_dash-dependencies'.format(self.config.routes_pathname_prefix),
+            '{}_dash-dependencies'.format(self.config['routes_pathname_prefix']),
             self.dependencies)
 
         add_url(
             '{}_dash-update-component'.format(
-                self.config.routes_pathname_prefix
+                self.config['routes_pathname_prefix']
             ),
             self.dispatch,
             ['POST'])
@@ -95,12 +99,12 @@ class Dash(object):
             '{}_dash-component-suites'
             '/<string:package_name>'
             '/<path:path_in_package_dist>').format(
-                self.config.routes_pathname_prefix
+                self.config['routes_pathname_prefix']
             ),
             self.serve_component_suites)
 
         add_url(
-            '{}_dash-routes'.format(self.config.routes_pathname_prefix),
+            '{}_dash-routes'.format(self.config['routes_pathname_prefix']),
             self.serve_routes)
 
         # catch-all for front-end routes
@@ -113,9 +117,6 @@ class Dash(object):
         self._cached_layout = None
         self.routes = []
 
-    class config:
-        supress_callback_exceptions = False
-
     @property
     def layout(self):
         return self._layout
@@ -162,7 +163,7 @@ class Dash(object):
     def _config(self):
         return {
             'url_base_pathname': self.url_base_pathname,
-            'requests_pathname_prefix': self.config.requests_pathname_prefix
+            'requests_pathname_prefix': self.config['requests_pathname_prefix']
         }
 
     def serve_routes(self):
@@ -185,7 +186,7 @@ class Dash(object):
                 self.registered_paths[namespace] = [relative_package_path]
 
             return '{}_dash-component-suites/{}/{}?v={}'.format(
-                self.config.routes_pathname_prefix,
+                self.config['routes_pathname_prefix'],
                 namespace,
                 relative_package_path,
                 importlib.import_module(namespace).__version__
@@ -333,15 +334,16 @@ class Dash(object):
         layout = self._cached_layout or self._layout_value()
 
         if (layout is None and
-                not self.config.supress_callback_exceptions):
+                not self.config.first('suppress_callback_exceptions',
+                                      'supress_callback_exceptions')):
             # Without a layout, we can't do validation on the IDs and
             # properties of the elements in the callback.
             raise exceptions.LayoutIsNotDefined('''
                 Attempting to assign a callback to the application but
                 the `layout` property has not been assigned.
                 Assign the `layout` property before assigning callbacks.
-                Alternatively, supress this warning by setting
-                `app.config.supress_callback_exceptions=True`
+                Alternatively, suppress this warning by setting
+                `app.config['suppress_callback_exceptions']=True`
             '''.replace('    ', ''))
 
         for args, object, name in [([output], Output, 'Output'),
@@ -364,7 +366,8 @@ class Dash(object):
                             name.lower(), str(arg), name
                         ))
 
-                if (not self.config.supress_callback_exceptions and
+                if (not self.config.first('suppress_callback_exceptions',
+                                          'supress_callback_exceptions') and
                         arg.component_id not in layout and
                         arg.component_id != getattr(layout, 'id', None)):
                     raise exceptions.NonExistantIdException('''
@@ -377,7 +380,7 @@ class Dash(object):
                         that are generated by other callbacks
                         (and therefore not in the initial layout), then
                         you can suppress this exception by setting
-                        `app.config.supress_callback_exceptions=True`.
+                        `app.config['suppress_callback_exceptions']=True`.
                     '''.format(
                         arg.component_id,
                         arg.component_id,
@@ -387,7 +390,8 @@ class Dash(object):
                         )
                     ).replace('    ', ''))
 
-                if not self.config.supress_callback_exceptions:
+                if not self.config.first('suppress_callback_exceptions',
+                                         'supress_callback_exceptions'):
 
                     if getattr(layout, 'id', None) == arg.component_id:
                         component = layout
