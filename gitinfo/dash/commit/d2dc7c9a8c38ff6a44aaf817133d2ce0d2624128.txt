commit d2dc7c9a8c38ff6a44aaf817133d2ce0d2624128
Author: byron <byron@plot.ly>
Date:   Thu Aug 29 22:56:36 2019 -0400

    format base_component with black

diff --git a/dash/development/base_component.py b/dash/development/base_component.py
index 79e7110c..bc6947d9 100644
--- a/dash/development/base_component.py
+++ b/dash/development/base_component.py
@@ -5,7 +5,7 @@ import six
 
 from .._utils import patch_collections_abc
 
-MutableSequence = patch_collections_abc('MutableSequence')
+MutableSequence = patch_collections_abc("MutableSequence")
 
 
 # pylint: disable=no-init,too-few-public-methods
@@ -30,8 +30,8 @@ class ComponentMeta(abc.ABCMeta):
     # pylint: disable=arguments-differ
     def __new__(mcs, name, bases, attributes):
         component = abc.ABCMeta.__new__(mcs, name, bases, attributes)
-        module = attributes['__module__'].split('.')[0]
-        if name == 'Component' or module == 'builtins':
+        module = attributes["__module__"].split(".")[0]
+        if name == "Component" or module == "builtins":
             # Don't do the base component
             # and the components loaded dynamically by load_component
             # as it doesn't have the namespace.
@@ -51,9 +51,10 @@ def is_number(s):
 
 
 def _check_if_has_indexable_children(item):
-    if (not hasattr(item, 'children') or
-            (not isinstance(item.children, Component) and
-             not isinstance(item.children, (tuple, MutableSequence)))):
+    if not hasattr(item, "children") or (
+        not isinstance(item.children, Component)
+        and not isinstance(item.children, (tuple, MutableSequence))
+    ):
 
         raise KeyError
 
@@ -62,19 +63,19 @@ def _check_if_has_indexable_children(item):
 class Component(object):
     class _UNDEFINED(object):
         def __repr__(self):
-            return 'undefined'
+            return "undefined"
 
         def __str__(self):
-            return 'undefined'
+            return "undefined"
 
     UNDEFINED = _UNDEFINED()
 
     class _REQUIRED(object):
         def __repr__(self):
-            return 'required'
+            return "required"
 
         def __str__(self):
-            return 'required'
+            return "required"
 
     REQUIRED = _REQUIRED()
 
@@ -83,15 +84,15 @@ class Component(object):
         for k, v in list(kwargs.items()):
             # pylint: disable=no-member
             k_in_propnames = k in self._prop_names
-            k_in_wildcards = any([k.startswith(w)
-                                  for w in
-                                  self._valid_wildcard_attributes])
+            k_in_wildcards = any(
+                [k.startswith(w) for w in self._valid_wildcard_attributes]
+            )
             if not k_in_propnames and not k_in_wildcards:
                 raise TypeError(
-                    'Unexpected keyword argument `{}`'.format(k) +
-                    '\nAllowed arguments: {}'.format(
+                    "Unexpected keyword argument `{}`".format(k)
+                    + "\nAllowed arguments: {}".format(
                         # pylint: disable=no-member
-                        ', '.join(sorted(self._prop_names))
+                        ", ".join(sorted(self._prop_names))
                     )
                 )
             setattr(self, k, v)
@@ -104,16 +105,19 @@ class Component(object):
             if hasattr(self, p)
         }
         # Add the wildcard properties data-* and aria-*
-        props.update({
-            k: getattr(self, k)
-            for k in self.__dict__
-            if any(k.startswith(w) for w in
-                   self._valid_wildcard_attributes)  # pylint:disable=no-member
-        })
+        props.update(
+            {
+                k: getattr(self, k)
+                for k in self.__dict__
+                if any(
+                    k.startswith(w) for w in self._valid_wildcard_attributes
+                )  # pylint:disable=no-member
+            }
+        )
         as_json = {
-            'props': props,
-            'type': self._type,  # pylint: disable=no-member
-            'namespace': self._namespace  # pylint: disable=no-member
+            "props": props,
+            "type": self._type,  # pylint: disable=no-member
+            "namespace": self._namespace,  # pylint: disable=no-member
         }
 
         return as_json
@@ -126,26 +130,26 @@ class Component(object):
         # pylint: disable=access-member-before-definition,
         # pylint: disable=attribute-defined-outside-init
         if isinstance(self.children, Component):
-            if getattr(self.children, 'id', None) is not None:
+            if getattr(self.children, "id", None) is not None:
                 # Woohoo! It's the item that we're looking for
                 if self.children.id == id:
-                    if operation == 'get':
+                    if operation == "get":
                         return self.children
-                    elif operation == 'set':
+                    elif operation == "set":
                         self.children = new_item
                         return
-                    elif operation == 'delete':
+                    elif operation == "delete":
                         self.children = None
                         return
 
             # Recursively dig into its subtree
             try:
-                if operation == 'get':
+                if operation == "get":
                     return self.children.__getitem__(id)
-                elif operation == 'set':
+                elif operation == "set":
                     self.children.__setitem__(id, new_item)
                     return
-                elif operation == 'delete':
+                elif operation == "delete":
                     self.children.__delitem__(id)
                     return
             except KeyError:
@@ -155,13 +159,13 @@ class Component(object):
         if isinstance(self.children, (tuple, MutableSequence)):
             for i, item in enumerate(self.children):
                 # If the item itself is the one we're looking for
-                if getattr(item, 'id', None) == id:
-                    if operation == 'get':
+                if getattr(item, "id", None) == id:
+                    if operation == "get":
                         return item
-                    elif operation == 'set':
+                    elif operation == "set":
                         self.children[i] = new_item
                         return
-                    elif operation == 'delete':
+                    elif operation == "delete":
                         del self.children[i]
                         return
 
@@ -169,12 +173,12 @@ class Component(object):
                 # Make sure it's not like a string
                 elif isinstance(item, Component):
                     try:
-                        if operation == 'get':
+                        if operation == "get":
                             return item.__getitem__(id)
-                        elif operation == 'set':
+                        elif operation == "set":
                             item.__setitem__(id, new_item)
                             return
-                        elif operation == 'delete':
+                        elif operation == "delete":
                             item.__delitem__(id)
                             return
                     except KeyError:
@@ -198,15 +202,15 @@ class Component(object):
 
         # A component's children can be undefined, a string, another component,
         # or a list of components.
-        return self._get_set_or_delete(id, 'get')
+        return self._get_set_or_delete(id, "get")
 
     def __setitem__(self, id, item):  # pylint: disable=redefined-builtin
         """Set an element by its ID."""
-        return self._get_set_or_delete(id, 'set', item)
+        return self._get_set_or_delete(id, "set", item)
 
     def __delitem__(self, id):  # pylint: disable=redefined-builtin
         """Delete items by ID in the tree of children."""
-        return self._get_set_or_delete(id, 'delete')
+        return self._get_set_or_delete(id, "delete")
 
     def _traverse(self):
         """Yield each item in the tree."""
@@ -215,11 +219,14 @@ class Component(object):
 
     def _traverse_with_paths(self):
         """Yield each item with its path in the tree."""
-        children = getattr(self, 'children', None)
+        children = getattr(self, "children", None)
         children_type = type(children).__name__
-        children_id = "(id={:s})".format(children.id) \
-                      if getattr(children, 'id', False) else ''
-        children_string = children_type + ' ' + children_id
+        children_id = (
+            "(id={:s})".format(children.id)
+            if getattr(children, "id", False)
+            else ""
+        )
+        children_string = children_type + " " + children_id
 
         # children is just a component
         if isinstance(children, Component):
@@ -234,7 +241,9 @@ class Component(object):
                 list_path = "[{:d}] {:s} {}".format(
                     idx,
                     type(i).__name__,
-                    "(id={:s})".format(i.id) if getattr(i, 'id', False) else ''
+                    "(id={:s})".format(i.id)
+                    if getattr(i, "id", False)
+                    else "",
                 )
                 yield list_path, i
 
@@ -246,8 +255,7 @@ class Component(object):
     def __iter__(self):
         """Yield IDs in the tree of children."""
         for t in self._traverse():
-            if (isinstance(t, Component) and
-                    getattr(t, 'id', None) is not None):
+            if isinstance(t, Component) and getattr(t, "id", None) is not None:
 
                 yield t.id
 
@@ -258,7 +266,7 @@ class Component(object):
         # The number of items is more intuitive but returning the number
         # of IDs matches __iter__ better.
         length = 0
-        if getattr(self, 'children', None) is None:
+        if getattr(self, "children", None) is None:
             length = 0
         elif isinstance(self.children, Component):
             length = 1
@@ -276,56 +284,47 @@ class Component(object):
     def __repr__(self):
         # pylint: disable=no-member
         props_with_values = [
-            c for c in self._prop_names
-            if getattr(self, c, None) is not None
+            c for c in self._prop_names if getattr(self, c, None) is not None
         ] + [
-            c for c in self.__dict__
+            c
+            for c in self.__dict__
             if any(
                 c.startswith(wc_attr)
                 for wc_attr in self._valid_wildcard_attributes
             )
         ]
-        if any(
-                p != 'children'
-                for p in props_with_values
-        ):
+        if any(p != "children" for p in props_with_values):
             props_string = ", ".join(
-                '{prop}={value}'.format(
-                    prop=p,
-                    value=repr(getattr(self, p))
-                ) for p in props_with_values
+                "{prop}={value}".format(prop=p, value=repr(getattr(self, p)))
+                for p in props_with_values
             )
         else:
-            props_string = repr(getattr(self, 'children', None))
+            props_string = repr(getattr(self, "children", None))
         return "{type}({props_string})".format(
-            type=self._type,
-            props_string=props_string
+            type=self._type, props_string=props_string
         )
 
 
 def _explicitize_args(func):
     # Python 2
-    if hasattr(func, 'func_code'):
+    if hasattr(func, "func_code"):
         varnames = func.func_code.co_varnames
     # Python 3
     else:
         varnames = func.__code__.co_varnames
 
     def wrapper(*args, **kwargs):
-        if '_explicit_args' in kwargs.keys():
-            raise Exception('Variable _explicit_args should not be set.')
-        kwargs['_explicit_args'] = \
-            list(
-                set(
-                    list(varnames[:len(args)]) + [k for k, _ in kwargs.items()]
-                )
-            )
-        if 'self' in kwargs['_explicit_args']:
-            kwargs['_explicit_args'].remove('self')
+        if "_explicit_args" in kwargs.keys():
+            raise Exception("Variable _explicit_args should not be set.")
+        kwargs["_explicit_args"] = list(
+            set(list(varnames[: len(args)]) + [k for k, _ in kwargs.items()])
+        )
+        if "self" in kwargs["_explicit_args"]:
+            kwargs["_explicit_args"].remove("self")
         return func(*args, **kwargs)
 
     # If Python 3, we can set the function signature to be correct
-    if hasattr(inspect, 'signature'):
+    if hasattr(inspect, "signature"):
         # pylint: disable=no-member
         new_sig = inspect.signature(wrapper).replace(
             parameters=inspect.signature(func).parameters.values()
