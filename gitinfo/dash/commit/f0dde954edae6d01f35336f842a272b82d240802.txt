commit f0dde954edae6d01f35336f842a272b82d240802
Author: chriddyp <chris@plot.ly>
Date:   Mon Aug 14 00:00:59 2017 -0400

    rc2

diff --git a/dash/authentication.py b/dash/authentication.py
index 1b3271e5..e69de29b 100644
--- a/dash/authentication.py
+++ b/dash/authentication.py
@@ -1,92 +0,0 @@
-import flask
-import datetime
-import json
-import plotly
-import requests
-
-
-def login():
-    authorization_header = flask.request.headers.get('Authorization')
-    oauth_token = authorization_header.split('Bearer ')[1]
-    res = requests.get(
-        '{}/v2/users/current'.format(
-            plotly.config.get_config()['plotly_api_domain']
-        ),
-        headers={
-            'Authorization': authorization_header
-        }
-    )
-    res.raise_for_status()
-    response = flask.Response(
-        json.dumps(res.json()),
-        mimetype='application/json',
-        status=res.status_code
-    )
-    # TODO - set path appropriately
-    response.set_cookie(
-        'plotly_oauth_token',
-        value=oauth_token,
-        max_age=None
-    )
-    return response
-
-
-def check_view_access(oauth_token, fid):
-    res = requests.get(
-        '{}/v2/files/{}'.format(
-            plotly.config.get_config()['plotly_api_domain'],
-            fid
-        ),
-        headers={
-            'Authorization': 'Bearer {}'.format(oauth_token)
-        }
-    )
-    if res.status_code == 200:
-        return True
-    elif res.status_code == 404:
-        return False
-    else:
-        # TODO - Dash exception
-        raise Exception('Failed request to plotly')
-
-
-def create_requires_auth(f,
-                         fid,
-                         access_codes,
-                         create_access_codes,
-                         auth_cookie_name,
-                         *args,
-                         **kwargs):
-    if fid is None:
-        return f(*args, **kwargs)
-    else:
-        if 'plotly_oauth_token' not in flask.request.cookies:
-            return flask.Response(status=403)
-        oauth_token = flask.request.cookies['plotly_oauth_token']
-
-        if (datetime.datetime.now() > access_codes['expiration']):
-            access_codes = create_access_codes()
-
-        if auth_cookie_name not in flask.request.cookies:
-            has_access = check_view_access(oauth_token, fid)
-        else:
-            access_cookie = flask.request.cookies[auth_cookie_name]
-
-            # If there access was previously declined,
-            # check access again in case it has changed
-            if access_cookie != access_codes['access_granted']:
-                has_access = check_view_access(oauth_token, fid)
-            else:
-                has_access = True
-
-        if not has_access:
-            return flask.Response(status=403)
-
-        response = f(*args, **kwargs)
-        # TODO - should set secure in this cookie, not exposed in flask
-        response.set_cookie(
-            auth_cookie_name,
-            value=access_codes['access_granted'],
-            max_age=(60 * 60 * 24 * 7),  # 1 week
-        )
-        return response
diff --git a/dash/dash.py b/dash/dash.py
index a5e5e980..c00efd26 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -5,7 +5,6 @@ from flask import Flask, url_for, send_from_directory, Response
 from flask_compress import Compress
 from flask_seasurf import SeaSurf
 import os
-import re
 import importlib
 import requests
 import pkgutil
@@ -20,7 +19,6 @@ from .resources import Scripts, Css
 from .development.base_component import Component
 from .dependencies import Event, Input, Output, State
 from . import plotly_api
-from . import authentication
 from . import exceptions
 
 
@@ -29,9 +27,7 @@ class Dash(object):
         self,
         name=None,
         server=None,
-        filename=None,
-        sharing=None,
-        app_url=None,
+        static_folder=None,
         url_base_pathname='/',
         csrf_protect=True
     ):
@@ -41,14 +37,14 @@ class Dash(object):
         else:
             if name is None:
                 name = 'dash'
-            self.server = Flask(name)
+            self.server = Flask(name, static_folder=static_folder)
 
         if self.server.secret_key is None:
             # If user supplied their own server, they might've supplied a
             # secret_key with it
             secret_key_name = 'dash_{}_secret_key'.format(
-                # replace any invalid characters
-                re.sub('[\W_]+', '_', name)
+                # TODO - check for other illegal characters
+                name.replace('.', '_')
             )
             secret_key = os.environ.get(
                 secret_key_name, SeaSurf()._generate_token()
@@ -56,18 +52,6 @@ class Dash(object):
             os.environ[secret_key_name] = secret_key
             self.server.secret_key = secret_key
 
-        if filename is not None:
-            fid = plotly_api.create_or_overwrite_dash_app(
-                filename, sharing, app_url
-            )
-            self.fid = fid
-            self.app_url = app_url
-            self.sharing = sharing
-            self.access_codes = self.create_access_codes()
-        else:
-            self.fid = None
-            self.access_codes = None
-
         self.url_base_pathname = url_base_pathname
 
         # list of dependencies
@@ -86,55 +70,37 @@ class Dash(object):
         self.registered_paths = {}
 
         # urls
-        self.server.add_url_rule(
-            '{}_dash-login'.format(self.url_base_pathname),
-            view_func=authentication.login,
-            methods=['post']
-        )
 
         self.server.add_url_rule(
             '{}_dash-layout'.format(self.url_base_pathname),
-            view_func=self.serve_layout,
-            endpoint='{}_dash-layout'.format(self.url_base_pathname)
-        )
+            view_func=self.serve_layout)
 
         self.server.add_url_rule(
             '{}_dash-dependencies'.format(self.url_base_pathname),
-            view_func=self.dependencies,
-            endpoint='{}_dash-dependencies'.format(self.url_base_pathname)
-        )
+            view_func=self.dependencies)
 
         self.server.add_url_rule(
             '{}_dash-update-component'.format(self.url_base_pathname),
             view_func=self.dispatch,
-            endpoint='{}_dash-update-component'.format(self.url_base_pathname),
             methods=['POST'])
 
         self.server.add_url_rule((
             '{}_dash-component-suites'
             '/<string:package_name>'
             '/<path:path_in_package_dist>').format(self.url_base_pathname),
-            view_func=self.serve_component_suites,
-            endpoint='{}_dash-component-suites'.format(self.url_base_pathname)
-        )
+            view_func=self.serve_component_suites)
 
         self.server.add_url_rule(
             '{}_dash-routes'.format(self.url_base_pathname),
-            view_func=self.serve_routes,
-            endpoint='{}_dash-routes'.format(self.url_base_pathname)
+            view_func=self.serve_routes
         )
 
-        self.server.add_url_rule(
-            self.url_base_pathname, 
-            view_func=self.index,
-            endpoint=self.url_base_pathname
-        )
+        self.server.add_url_rule(self.url_base_pathname, view_func=self.index)
 
         # catch-all for front-end routes
         self.server.add_url_rule(
             '{}<path:path>'.format(self.url_base_pathname),
-            view_func=self.index,
-            endpoint='{}<path:path>'.format(self.url_base_pathname)
+            view_func=self.index
         )
 
         self.server.before_first_request(self._setup_server)
@@ -142,42 +108,8 @@ class Dash(object):
         self._layout = None
         self.routes = []
 
-    def _requires_auth(f):
-        def class_decorator(*args, **kwargs):
-            self = args[0]
-            self.auth_cookie_name = (
-                'dash_access_{}'.format(self.fid.replace(':', '_'))
-            ) if self.fid else ''
-            return authentication.create_requires_auth(
-                f,
-                # cookies don't allow comma, semicolon, white space
-                # those characters are already excluded from plotly usernames
-                self.fid,
-                self.access_codes,
-                self.create_access_codes,
-                self.auth_cookie_name,
-                *args,
-                **kwargs
-            )
-        class_decorator.__name__ = f.__name__
-        return class_decorator
-
-    def create_access_codes(self):
-        token = SeaSurf()._generate_token()
-        new_access_codes = {
-            'access_granted': token,
-            'expiration': (
-                datetime.datetime.now() + datetime.timedelta(
-                    seconds=self.config.permissions_cache_expiry
-                )
-            )
-        }
-        self.access_codes = new_access_codes
-        return self.access_codes
-
     class config:
         supress_callback_exceptions = False
-        permissions_cache_expiry = 5 * 60
 
     @property
     def layout(self):
@@ -208,7 +140,6 @@ class Dash(object):
             self.css.get_all_css()
         )
 
-    @_requires_auth
     def serve_layout(self):
         layout = self._layout_value()
 
@@ -221,16 +152,9 @@ class Dash(object):
 
     def _config(self):
         return {
-            'fid': self.fid,
-            'plotly_domain': (
-                plotly.config.get_config()['plotly_domain']
-            ),
-            'oauth_client_id': 'RcXzjux4DGfb8bWG9UNGpJUGsTaS0pUVHoEf7Ecl',
-            'redirect_uri': 'http://localhost:9595',
             'url_base_pathname': self.url_base_pathname
         }
 
-    @_requires_auth
     def serve_routes(self):
         return flask.Response(
             json.dumps(self.routes,
@@ -377,7 +301,6 @@ class Dash(object):
         </html>
         '''.format(title, css, config, scripts))
 
-    @_requires_auth
     def dependencies(self):
         return flask.jsonify([
             {
@@ -419,7 +342,7 @@ class Dash(object):
             if not isinstance(args, list):
                 raise exceptions.IncorrectTypeException(
                     'The {} argument `{}` is '
-                    'not a list of `dash.{}`s.'.format(
+                    'not a list of `dash.dependencies.{}`s.'.format(
                         name.lower(), str(arg), name
                     ))
 
@@ -583,18 +506,15 @@ class Dash(object):
 
         return wrap_func
 
-    @_requires_auth
     def dispatch(self):
         body = flask.request.get_json()
         inputs = body.get('inputs', [])
         state = body.get('state', [])
         output = body['output']
-        event = body.get('event', {})
 
         target_id = '{}.{}'.format(output['id'], output['property'])
         args = []
         for component_registration in self.callback_map[target_id]['inputs']:
-            component_id = component_registration['id']
             args.append([
                 c.get('value', None) for c in inputs if
                 c['property'] == component_registration['property'] and
@@ -602,7 +522,6 @@ class Dash(object):
             ][0])
 
         for component_registration in self.callback_map[target_id]['state']:
-            component_id = component_registration['id']
             args.append([
                 c.get('value', None) for c in state if
                 c['property'] == component_registration['property'] and
@@ -617,7 +536,6 @@ class Dash(object):
 
     def run_server(self,
                    port=8050,
-                   debug=False,
-                   threaded=True,
+                   debug=True,
                    **flask_run_options):
         self.server.run(port=port, debug=debug, **flask_run_options)
diff --git a/dash/development/base_component.py b/dash/development/base_component.py
index f52ea580..890fefd9 100644
--- a/dash/development/base_component.py
+++ b/dash/development/base_component.py
@@ -20,7 +20,7 @@ class Component(collections.MutableMapping):
                 raise Exception(
                     'Unexpected keyword argument `{}`'.format(k) +
                     '\nAllowed arguments: {}'.format(
-                        ', '.join(sorted(self._prop_names))
+                        ', '.join(self._prop_names)
                     )
                 )
             setattr(self, k, v)
@@ -226,8 +226,7 @@ def generate_class(typename, props, description, namespace):
                    if c is not self._prop_names[0])):
 
                 return '{typename}('+', '.join([c+'='+repr(getattr(self, c, None))
-                                                for c in self._prop_names
-                                                if getattr(self, c, None) is not None])+')'
+                                                for c in self._prop_names if getattr(self, c, None) is not None])+')'
 
             else:
                 return '{typename}(' + repr(getattr(self, self._prop_names[0], None)) + ')'
diff --git a/dash/resources.py b/dash/resources.py
index 7afbb881..d79b7f05 100644
--- a/dash/resources.py
+++ b/dash/resources.py
@@ -1,7 +1,6 @@
 from copy import copy
 import warnings
 import collections
-import json
 
 from .development.base_component import Component
 
diff --git a/dash/version.py b/dash/version.py
index f7d1e3e9..477b6a0c 100644
--- a/dash/version.py
+++ b/dash/version.py
@@ -1 +1 @@
-__version__ = '0.17.7'
+__version__ = '0.17.8rc2'
