commit 914c0c2366bcb092c0f072e667d84ee2bcb3ac77
Author: chriddyp <chris@plot.ly>
Date:   Tue Apr 18 22:07:04 2017 -0400

    :lipstick: styled elements

diff --git a/src/AccessDenied.react.js b/src/AccessDenied.react.js
index 39774c29..444ae80c 100644
--- a/src/AccessDenied.react.js
+++ b/src/AccessDenied.react.js
@@ -1,21 +1,40 @@
+/* global window:true, document:true */
 import React, {PropTypes} from 'react';
-import {connect} from 'react-redux'
+import {merge} from 'ramda';
+import * as styles from './styles/styles.js';
 
 function AccessDenied(props) {
     const {configRequest} = props;
     const fid = configRequest.content.fid;
     const owner_username = fid.split(':')[0];
     return (
-        <div>
-            <h3>{"Access Denied"}</h3>
-            <h4>
+        <div style={merge(styles.base.html, styles.base.container)}>
+
+            <div style={styles.base.h2}>
+                {"Access Denied"}
+            </div>
+
+            <div style={styles.base.h4}>
                 {"Uh oh! You don't have access to this Dash app."}
-            </h4>
+            </div>
+
             <div>
-                {`This app is owned by '${owner_username}'. `}
-                {'Reach out to that user to grant you access then try '}
-                {'refreshing the page.'}
+                {`This app is owned by ${owner_username}. `}
+                {`Reach out to ${owner_username} to grant you access
+                  to this app and then try refreshing the app.`}
             </div>
+
+            <br/>
+
+            <a style={styles.base.a} onClick={() => {
+                document.cookie = (
+                    'plotly_oauth_token=; '+
+                    'expires=Thu, 01 Jan 1970 00:00:01 GMT;'
+                );
+                window.location.reload(true);
+            }}>
+                {'Log out of session'}
+            </a>
         </div>
     )
 }
diff --git a/src/Authentication.react.js b/src/Authentication.react.js
index 2295c136..42f56d3e 100644
--- a/src/Authentication.react.js
+++ b/src/Authentication.react.js
@@ -3,14 +3,9 @@ import React, {Component, PropTypes} from 'react';
 import {connect} from 'react-redux'
 import queryString from 'query-string';
 import {getConfig, login} from './actions/api';
-import {contains, isEmpty} from 'ramda'
-
-const CLOUD = 'cloud';
-const ONPREM = 'onprem';
-const SERVER_TYPES = {
-    [CLOUD]: 'Plotly Cloud',
-    [ONPREM]: 'Plotly On-Premise'
-};
+import {contains, isEmpty, merge} from 'ramda'
+import * as styles from './styles/styles.js';
+import PageLoading from './PageLoading.react';
 
 // TODO - Somehow figure out a variable redirect_uri
 // and require app creators to set this
@@ -49,23 +44,13 @@ const PopupCenter = (url, title, w, h) => {
 class Login extends Component {
     constructor(props) {
         super(props);
-        this.state = {
-            domain: '',
-            statusMessasge: '',
-            serverType: CLOUD,
-            status: '',
-            username: ''
-        };
-        this.authenticateUser = this.authenticateUser.bind(this);
         this.buildOauthUrl = this.buildOauthUrl.bind(this);
         this.oauthPopUp = this.oauthPopUp.bind(this);
-        this.verifyAuthDone = this.verifyAuthDone.bind(this);
     }
 
     buildOauthUrl() {
         const oauthClientId = 'RcXzjux4DGfb8bWG9UNGpJUGsTaS0pUVHoEf7Ecl';
-        const isOnPrem = this.state.serverType === ONPREM;
-        const plotlyDomain = isOnPrem ? this.state.domain : 'https://plot.ly';
+        const plotlyDomain = 'https://plot.ly';
         return (
             `${plotlyDomain}/o/authorize/?response_type=token&` +
             `client_id=${oauthClientId}&` +
@@ -89,108 +74,32 @@ class Login extends Component {
         }, 100);
     }
 
-    verifyAuthDone() {
-        return false;
-    }
-
-    authenticateUser () {
-        if (!this.state.domain && this.state.serverType === ONPREM) {
-            this.setState({
-                status: 'failure',
-                statusMessasge: 'Enter your Plotly On Premise domain.'
-            });
-            return;
-        }
-        this.setState({statusMessasge: ''});
-        this.oauthPopUp();
-    }
-
     render() {
-        const renderOption = (value) => {
-            const selected = this.state.serverType === value;
-            return (
-                <span>
-                    <button
-                        className={selected ? 'button-primary' : 'button'}
-                        onClick={(e) => this.setState({serverType: e.target.value})}
-                        value={value}
-                        style={{margin: '10px'}}
-                    >{SERVER_TYPES[value]}</button>
-                </span>
-            );
-        };
-
-        const loginButton = (
-            <button
-                className="btn btn-large btn-primary"
-                style={{display: 'block', margin: 'auto'}}
-                onClick={() => this.authenticateUser()}
-            >{'Login'}</button>
-        );
-
-        const serverTypeOptions = (
-            <div className="control-group">
-            <h3 className="block-center-heading">
-                {'I am connecting to...'}
-            </h3>
-                <div className="controls" style={{padding: '20px'}}>
-                    {renderOption(CLOUD)}
-                    {renderOption(ONPREM)}
-                </div>
-                <span style={{borderBottom: '2px solid #E7E8E9', cursor: 'pointer'}}>
-                    <a href='https://plot.ly/products/cloud/'>
-                        Learn more about our products.
-                    </a>
-                </span>
-            </div>
-        );
+        return (
+            <div style={merge(styles.base.html, styles.base.container)}>
+                <div style={styles.base.h2}>Dash</div>
 
-        const loginCloud = (
-            <div className="control-group">
-                <h3 className="block-center-heading">{'Plotly Log In'}</h3>
-                <div className="controls" style={{padding: '20px'}}>
-                    <div className="form-group">
-                        {loginButton}
-                    </div>
+                <div style={styles.base.h4}>
+                    {'Log in to Plotly to continue'}
                 </div>
-            </div>
-        );
 
-        const loginOnPrem = (
-            <div className="control-group">
-                <h3 className="block-center-heading">{'Login Into Your Account'}</h3>
-                <div className="controls" style={{padding: '20px'}}>
-                    <div className="form-group">
-                        <label>Your On-Prem Plotly Domain</label>
-                        <input
-                            type="text"
-                            className="form-control"
-                            placeholder="https://plotly.your-company.com"
-                            onChange={(e) => this.setState({domain: e.target.value})}
-                        ></input>
-                        {loginButton}
-                    </div>
-                </div>
-            </div>
-        );
-
-        const loginOptions = {
-            cloud: loginCloud,
-            onprem: loginOnPrem
-        };
-
-        return (
-            <div className="container">
-                <div className="block-center">
-                    <div style={{textAlign: 'center'}}>
-                        {serverTypeOptions}
-                    </div>
-                    <div style={{textAlign: 'center'}}>
-                        {loginOptions[this.state.serverType]}
-                    </div>
-                    <div style={{textAlign: 'center'}}>
-                        {this.state.statusMessasge}
-                    </div>
+                <button style={styles.base.button} onClick={this.oauthPopUp}>
+                    {'Log in'}
+                </button>
+
+                <div style={styles.base.caption}>
+                    <span>
+                        {`This dash app requires plotly log in to view.
+                          Don't have an account yet?`}
+                    </span>
+                    <a style={styles.base.a}
+                       href="https://plot.ly/accounts/login/?action=signup">
+                        {' Create an account '}
+                    </a>
+                    <span>
+                    {` (it's free)
+                      and then request access from the owner of this app.`}
+                    </span>
                 </div>
             </div>
         );
@@ -227,11 +136,11 @@ class UnconnectedOauthRedirect extends Component {
         let content;
         if (isEmpty(loginRequest) || loginRequest.status === 'loading') {
 
-            content = 'Loading...';
+            content = <div>Loading...</div>;
 
         } else if (loginRequest.status === 200) {
-            // TODO - close this window automatically
-            content = 'Logged in. You may now close this window.';
+
+            window.close();
 
         } else {
 
@@ -315,7 +224,7 @@ class Authentication extends Component {
 
         if (isEmpty(configRequest) || configRequest.status === 'loading') {
 
-            return <div>Loading...</div>
+            return <div>Loading...</div>;
 
         }
 
diff --git a/src/styles/styles.js b/src/styles/styles.js
new file mode 100644
index 00000000..eeda0b36
--- /dev/null
+++ b/src/styles/styles.js
@@ -0,0 +1,71 @@
+/*
+ * dash renderer is purposely style-free
+ * Dash apps should be styled through
+ * CSS style sheets on the app level,
+ * in component-suites, or as inline styles
+ * in the component layouts.
+ *
+ * The styles contained in dash-renderer are
+ * just for a couple of interfaces:
+ * - Loading messages
+ * - Login screens
+ *
+ */
+
+export const base = {
+    html: {
+        fontFamily: "'Open Sans', Helvetica, sans-serif",
+        fontWeight: 400,
+        color: '#2A3F5F'
+    },
+
+    h2: {
+        fontFamily: 'Dosis, Helvetica, sans-serif',
+        fontWeight: '600',
+        fontSize: '28px',
+        marginTop: '14px',
+        marginBottom: '14px',
+    },
+
+    h4: {
+        fontSize: '18px',
+        marginTop: '9px',
+        marginBottom: '18px',
+    },
+
+    button: {
+        border: '1px solid #119DFF',
+        fontSize: '14px',
+        color: '#ffffff',
+        backgroundColor: '#119DFF',
+        padding: '9px 18px',
+        borderRadius: '5px',
+        textAlign: 'center',
+        textTransform: 'capitalize',
+        letterSpacing: '0.5px',
+        lineHeight: '1',
+        cursor: 'pointer',
+        outline: 'none',
+        margin: '0px',
+    },
+
+    a: {
+        color: '#119DFF',
+        textDecoration: 'none',
+        cursor: 'pointer'
+    },
+
+    caption: {
+        fontSize: '13px',
+        marginTop: '20px',
+        color: '#A2B1C6',
+    },
+
+    container: {
+        marginLeft: 'auto',
+        marginRight: 'auto',
+        width: '90%',
+        maxWidth: '300px',
+    }
+
+}
