commit 4a320129688ecba660b1fd6983c64331c1e71cd3
Author: alexcjohnson <alex@plot.ly>
Date:   Mon Feb 3 08:51:45 2020 -0500

    ANY -> MATCH

diff --git a/dash-renderer/src/actions/dependencies.js b/dash-renderer/src/actions/dependencies.js
index 6123886e..07cc6fba 100644
--- a/dash-renderer/src/actions/dependencies.js
+++ b/dash-renderer/src/actions/dependencies.js
@@ -37,9 +37,9 @@ import {crawlLayout} from './utils';
 export const isMultiOutputProp = idAndProp => idAndProp.startsWith('..');
 
 const ALL = {wild: 'ALL', multi: 1};
-const ANY = {wild: 'ANY'};
+const MATCH = {wild: 'MATCH'};
 const ALLSMALLER = {wild: 'ALLSMALLER', multi: 1, expand: 1};
-const wildcards = {ALL, ANY, ALLSMALLER};
+const wildcards = {ALL, MATCH, ALLSMALLER};
 
 /*
  * If this ID is a wildcard, it is a stringified JSON object
@@ -186,7 +186,7 @@ export function computeGraphs(dependencies) {
      *   {[id]: {[prop]: [callback, ...]}}
      * where callbacks are the matching specs from the original
      * dependenciesRequest, but with outputs parsed to look like inputs,
-     * and a list anyKeys added if the outputs have ANY wildcards.
+     * and a list anyKeys added if the outputs have MATCH wildcards.
      * For outputMap there should only ever be one callback per id/prop
      * but for inputMap there may be many.
      *
@@ -259,7 +259,7 @@ export function computeGraphs(dependencies) {
                 }
             }
         } else if (!exact.length) {
-            // only ANY/ALL - still need a value
+            // only MATCH/ALL - still need a value
             vals.push(0);
         }
         keyPlaceholders.vals = vals;
@@ -280,8 +280,8 @@ export function computeGraphs(dependencies) {
                         newVals = [];
                     }
                 } else {
-                    // ANY or ALL
-                    // ANY *is* ALL for outputs, ie we don't already have a
+                    // MATCH or ALL
+                    // MATCH *is* ALL for outputs, ie we don't already have a
                     // value specified in `outIdFinal`
                     newVals =
                         outValIndex === -1 || val === ALL
@@ -326,13 +326,13 @@ export function computeGraphs(dependencies) {
 
         // We'll continue to use dep.output as its id, but add outputs as well
         // for convenience and symmetry with the structure of inputs and state.
-        // Also collect ANY keys in the output (all outputs must share these)
+        // Also collect MATCH keys in the output (all outputs must share these)
         // and ALL keys in the first output (need not be shared but we'll use
         // the first output for calculations) for later convenience.
         const anyKeys = [];
         let hasAll = false;
         forEachObjIndexed((val, key) => {
-            if (val === ANY) {
+            if (val === MATCH) {
                 anyKeys.push(key);
             } else if (val === ALL) {
                 hasAll = true;
@@ -391,7 +391,7 @@ export function computeGraphs(dependencies) {
  * we're only looking at ids with the same keys as the pattern.
  *
  * Optionally, include another reference set of the same - to ensure the
- * correct matching of ANY or ALLSMALLER between input and output items.
+ * correct matching of MATCH or ALLSMALLER between input and output items.
  */
 function idMatch(keys, vals, patternVals, refKeys, refVals, refPatternVals) {
     for (let i = 0; i < keys.length; i++) {
@@ -441,7 +441,7 @@ function idMatch(keys, vals, patternVals, refKeys, refVals, refPatternVals) {
 function getAnyVals(patternVals, vals) {
     const matches = [];
     for (let i = 0; i < patternVals.length; i++) {
-        if (patternVals[i] === ANY) {
+        if (patternVals[i] === MATCH) {
             matches.push(vals[i]);
         }
     }
@@ -476,7 +476,7 @@ const resolveDeps = (refKeys, refVals, refPatternVals) => paths => ({
 
 /*
  * Create a pending callback object. Includes the original callback definition,
- * its resolved ID (including the value of all ANY wildcards),
+ * its resolved ID (including the value of all MATCH wildcards),
  * accessors to find all inputs, outputs, and state involved in this
  * callback (lazy as not all users will want all of these),
  * placeholders for which other callbacks this one is blockedBy or blocking,
@@ -521,8 +521,8 @@ export function isMultiValued({id}) {
  * If one is found, returns:
  * {
  *     callback: the callback spec {outputs, inputs, state etc}
- *     anyVals: stringified list of resolved ANY keys we matched
- *     resolvedId: the "outputs" id string plus ANY values we matched
+ *     anyVals: stringified list of resolved MATCH keys we matched
+ *     resolvedId: the "outputs" id string plus MATCH values we matched
  *     getOutputs: accessor function to give all resolved outputs of this
  *         callback. Takes `paths` as argument to apply when the callback is
  *         dispatched, in case a previous callback has altered the layout.
@@ -583,7 +583,7 @@ function getCallbackByOutput(graphs, paths, id, prop) {
 
 /*
  * If there are ALL keys we need to reduce a set of outputs resolved
- * from an input to one item per combination of ANY values.
+ * from an input to one item per combination of MATCH values.
  * That will give one result per callback invocation.
  */
 function reduceALLOuts(outs, anyKeys, hasAll) {
@@ -591,7 +591,7 @@ function reduceALLOuts(outs, anyKeys, hasAll) {
         return outs;
     }
     if (!anyKeys.length) {
-        // If there's ALL but no ANY, there's only one invocation
+        // If there's ALL but no MATCH, there's only one invocation
         // of the callback, so just base it off the first output.
         return [outs[0]];
     }
@@ -630,7 +630,7 @@ function addResolvedFromOutputs(callback, outPattern, outs, matches) {
  *
  * Note that if the original input contains an ALLSMALLER wildcard,
  * there may be many entries for the same callback, but any given output
- * (with an ANY corresponding to the input's ALLSMALLER) will only appear
+ * (with an MATCH corresponding to the input's ALLSMALLER) will only appear
  * in one entry.
  */
 export function getCallbacksByInput(graphs, paths, id, prop) {
diff --git a/dash-renderer/src/actions/index.js b/dash-renderer/src/actions/index.js
index 5064b1e0..90262764 100644
--- a/dash-renderer/src/actions/index.js
+++ b/dash-renderer/src/actions/index.js
@@ -156,7 +156,7 @@ function unwrapIfNotMulti(paths, idProps, spec, anyVals, depType) {
                     depType +
                     '` of a Dash callback. The id of this object is ' +
                     JSON.stringify(spec.id) +
-                    (anyVals ? ' with ANY values ' + anyVals : '') +
+                    (anyVals ? ' with MATCH values ' + anyVals : '') +
                     ' and the property is `' +
                     spec.property +
                     '`. The wildcard ids currently available are logged above.'
@@ -167,7 +167,7 @@ function unwrapIfNotMulti(paths, idProps, spec, anyVals, depType) {
                 depType +
                 '` of a callback that only takes one value. The id spec is ' +
                 JSON.stringify(spec.id) +
-                (anyVals ? ' with ANY values ' + anyVals : '') +
+                (anyVals ? ' with MATCH values ' + anyVals : '') +
                 ' and the property is `' +
                 spec.property +
                 '`. The objects we found are: ' +
diff --git a/dash/_validate.py b/dash/_validate.py
index 8acd33b0..a5f9a2aa 100644
--- a/dash/_validate.py
+++ b/dash/_validate.py
@@ -2,7 +2,7 @@ import collections
 import re
 
 from .development.base_component import Component
-from .dependencies import Input, Output, State, ANY, ALLSMALLER
+from .dependencies import Input, Output, State, MATCH, ALLSMALLER
 from . import exceptions
 from ._utils import patch_collections_abc, _strings, stringify_id
 
@@ -178,13 +178,13 @@ def prevent_input_output_overlap(inputs, outputs):
 
 
 def prevent_inconsistent_wildcards(outputs, inputs, state):
-    any_keys = get_wildcard_keys(outputs[0], (ANY,))
+    any_keys = get_wildcard_keys(outputs[0], (MATCH,))
     for out in outputs[1:]:
-        if get_wildcard_keys(out, (ANY,)) != any_keys:
+        if get_wildcard_keys(out, (MATCH,)) != any_keys:
             raise exceptions.InconsistentCallbackWildcards(
                 """
-                All `Output` items must have matching wildcard `ANY` values.
-                `ALL` wildcards need not match, only `ANY`.
+                All `Output` items must have matching wildcard `MATCH` values.
+                `ALL` wildcards need not match, only `MATCH`.
 
                 Output {} does not match the first output {}.
                 """.format(
@@ -192,18 +192,18 @@ def prevent_inconsistent_wildcards(outputs, inputs, state):
                 )
             )
 
-    matched_wildcards = (ANY, ALLSMALLER)
+    matched_wildcards = (MATCH, ALLSMALLER)
     for dep in list(inputs) + list(state):
         wildcard_keys = get_wildcard_keys(dep, matched_wildcards)
         if wildcard_keys - any_keys:
             raise exceptions.InconsistentCallbackWildcards(
                 """
                 `Input` and `State` items can only have {}
-                wildcards on keys where the `Output`(s) have `ANY` wildcards.
+                wildcards on keys where the `Output`(s) have `MATCH` wildcards.
                 `ALL` wildcards need not match, and you need not match every
-                `ANY` in the `Output`(s).
+                `MATCH` in the `Output`(s).
 
-                This callback has `ANY` on keys {}.
+                This callback has `MATCH` on keys {}.
                 {} has these wildcards on keys {}.
                 """.format(
                     matched_wildcards, any_keys, dep, wildcard_keys
diff --git a/dash/dependencies.py b/dash/dependencies.py
index e6f0cb62..7b2f7fdb 100644
--- a/dash/dependencies.py
+++ b/dash/dependencies.py
@@ -17,7 +17,7 @@ class _Wildcard:  # pylint: disable=too-few-public-methods
         return '["{}"]'.format(self._name)
 
 
-ANY = _Wildcard("ANY")
+MATCH = _Wildcard("MATCH")
 ALL = _Wildcard("ALL")
 ALLSMALLER = _Wildcard("ALLSMALLER")
 
@@ -89,8 +89,8 @@ class DashDependency:  # pylint: disable=too-few-public-methods
                         continue  # one wild, one not
                     if v is ALL or other_v is ALL:
                         continue  # either ALL
-                    if v is ANY or other_v is ANY:
-                        return False  # one ANY, one ALLSMALLER
+                    if v is MATCH or other_v is MATCH:
+                        return False  # one MATCH, one ALLSMALLER
                 else:
                     return False
             return True
@@ -105,19 +105,19 @@ class DashDependency:  # pylint: disable=too-few-public-methods
 class Output(DashDependency):  # pylint: disable=too-few-public-methods
     """Output of a callback."""
 
-    allowed_wildcards = (ANY, ALL)
+    allowed_wildcards = (MATCH, ALL)
 
 
 class Input(DashDependency):  # pylint: disable=too-few-public-methods
     """Input of callback: trigger an update when it is updated."""
 
-    allowed_wildcards = (ANY, ALL, ALLSMALLER)
+    allowed_wildcards = (MATCH, ALL, ALLSMALLER)
 
 
 class State(DashDependency):  # pylint: disable=too-few-public-methods
     """Use the value of a State in a callback but don't trigger updates."""
 
-    allowed_wildcards = (ANY, ALL, ALLSMALLER)
+    allowed_wildcards = (MATCH, ALL, ALLSMALLER)
 
 
 class ClientsideFunction:  # pylint: disable=too-few-public-methods
