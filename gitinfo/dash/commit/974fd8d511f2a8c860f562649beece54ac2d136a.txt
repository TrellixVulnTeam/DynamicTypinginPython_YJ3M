commit 974fd8d511f2a8c860f562649beece54ac2d136a
Author: byron <byron@plot.ly>
Date:   Tue Sep 10 10:07:34 2019 -0400

    add APIs for dash docs testings

diff --git a/dash/testing/application_runners.py b/dash/testing/application_runners.py
index a0a248fd..272b6a69 100644
--- a/dash/testing/application_runners.py
+++ b/dash/testing/application_runners.py
@@ -179,7 +179,9 @@ class ProcessRunner(BaseDashRunner):
         self.proc = None
 
     # pylint: disable=arguments-differ
-    def start(self, app_module, application_name="app", port=8050):
+    def start(
+        self, app_module, application_name="app", port=8050, start_timeout=3
+    ):
         """Start the server with waitress-serve in process flavor """
         entrypoint = "{}:{}.server".format(app_module, application_name)
         self.port = port
@@ -195,7 +197,7 @@ class ProcessRunner(BaseDashRunner):
                 args, stdout=subprocess.PIPE, stderr=subprocess.PIPE
             )
             # wait until server is able to answer http request
-            wait.until(lambda: self.accessible(self.url), timeout=3)
+            wait.until(lambda: self.accessible(self.url), timeout=start_timeout)
 
         except (OSError, ValueError):
             logger.exception("process server has encountered an error")
@@ -233,7 +235,7 @@ class RRunner(ProcessRunner):
         self.proc = None
 
     # pylint: disable=arguments-differ
-    def start(self, app):
+    def start(self, app, start_timeout=2):
         """Start the server with waitress-serve in process flavor """
 
         # app is a R string chunk
@@ -267,7 +269,7 @@ class RRunner(ProcessRunner):
                 args, stdout=subprocess.PIPE, stderr=subprocess.PIPE
             )
             # wait until server is able to answer http request
-            wait.until(lambda: self.accessible(self.url), timeout=2)
+            wait.until(lambda: self.accessible(self.url), timeout=start_timeout)
 
         except (OSError, ValueError):
             logger.exception("process server has encountered an error")
diff --git a/dash/testing/browser.py b/dash/testing/browser.py
index 02838452..51b75579 100644
--- a/dash/testing/browser.py
+++ b/dash/testing/browser.py
@@ -173,6 +173,20 @@ class Browser(DashPageMixin):
             ),
         )
 
+    def wait_for_element_by_id(self, element_id, timeout=None):
+        """explicit wait until the element is present,
+        timeout if not set, equals to the fixture's `wait_timeout`
+        shortcut to `WebDriverWait` with `EC.presence_of_element_located`
+        """
+        return self._wait_for(
+            EC.presence_of_element_located,
+            ((By.ID, element_id),),
+            timeout,
+            "timeout {}s => waiting for element id {}".format(
+                timeout if timeout else self._wait_timeout, element_id
+            ),
+        )
+
     def wait_for_style_to_equal(self, selector, style, val, timeout=None):
         """explicit wait until the element's style has expected `value`
         timeout if not set, equals to the fixture's `wait_timeout`
@@ -433,6 +447,16 @@ class Browser(DashPageMixin):
             if entries:
                 self._last_ts = entries[-1]["timestamp"]
 
+    def visit_and_snapshot(self, resource_path, hook_id):
+        try:
+            self.driver.get(self.server_url + resource_path)
+            self.wait_for_element_by_id(hook_id)
+            self.percy_snapshot(resource_path)
+            self.driver.back()
+        except WebDriverException as e:
+            logger.exception("snapshot at resource %s error", resource_path)
+            raise e
+
     @property
     def driver(self):
         """expose the selenium webdriver as fixture property"""
