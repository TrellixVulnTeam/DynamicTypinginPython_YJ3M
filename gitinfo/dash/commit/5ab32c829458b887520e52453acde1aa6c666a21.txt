commit 5ab32c829458b887520e52453acde1aa6c666a21
Author: Chris P <chris@plot.ly>
Date:   Fri Apr 5 23:15:00 2019 -0400

    :hocho: remove sample examples

diff --git a/clientside_0_simple.py b/clientside_0_simple.py
deleted file mode 100644
index 16594141..00000000
--- a/clientside_0_simple.py
+++ /dev/null
@@ -1,36 +0,0 @@
-import dash
-print(dash.__version__)
-
-from dash.dependencies import Input, Output, State, ClientFunction
-import dash_core_components as dcc
-import dash_html_components as html
-
-
-
-app = dash.Dash(__name__)
-
-app.layout = html.Div([
-    dcc.Input(id='input', value='hello world'),
-    html.Div(id='output-clientside'),
-    html.Div(id='output-serverside')
-])
-
-
-@app.callback(
-    Output('output-serverside', 'children'),
-    [Input('input', 'value')])
-def update_output(value):
-    return 'Server says "{}"'.format(value)
-
-
-app.callback(
-    Output('output-clientside', 'children'),
-    [Input('input', 'value')],
-    client_function=ClientFunction(
-        namespace='clientside',
-        function_name='display'
-    )
-)
-
-if __name__ == '__main__':
-    app.run_server(debug=True)
diff --git a/clientside_1_data_filtering.py b/clientside_1_data_filtering.py
deleted file mode 100644
index 2fa0c6ca..00000000
--- a/clientside_1_data_filtering.py
+++ /dev/null
@@ -1,64 +0,0 @@
-import dash
-from dash.dependencies import Input, Output, State, ClientFunction
-import dash_core_components as dcc
-import dash_html_components as html
-
-import pandas as pd
-
-df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminder_unfiltered.csv')
-
-app = dash.Dash(
-    __name__,
-    external_scripts=['https://cdnjs.cloudflare.com/ajax/libs/ramda/0.25.0/ramda.min.js']
-)
-app.css.config.serve_locally = True
-app.scripts.config.serve_locally = True
-
-
-
-app.layout = html.Div([
-    dcc.Store(
-        id='df',
-        data=df.to_dict('records')
-    ),
-
-    dcc.Input(
-        id='country-search',
-        value='Canada'
-    ),
-
-    dcc.Dropdown(
-        id='year',
-        options=[
-            {'value': i, 'label': i}
-            for i in df.year.unique()
-        ],
-        multi=True,
-        value=df.year.unique()
-    ),
-
-    dcc.RadioItems(
-        id='mode',
-        options=[
-            {'label': 'Lines', 'value': 'lines'},
-            {'label': 'Markers', 'value': 'markers'},
-        ],
-        value='lines'
-    ),
-
-    dcc.Graph(id='my-fig'),
-
-])
-
-
-app.callback(
-    Output('my-fig', 'figure'),
-    [Input('country-search', 'value'),
-     Input('year', 'value'),
-     Input('mode', 'value')],
-    [State('df', 'data')],
-    client_function=ClientFunction('clientside', 'updateFig'))
-
-
-if __name__ == '__main__':
-    app.run_server(debug=True, dev_tools_hot_reload=False)
diff --git a/clientside_2_chaining_clientside_and_serverside.py b/clientside_2_chaining_clientside_and_serverside.py
deleted file mode 100644
index 12edf287..00000000
--- a/clientside_2_chaining_clientside_and_serverside.py
+++ /dev/null
@@ -1,82 +0,0 @@
-import dash
-from dash.dependencies import Input, Output, State, ClientFunction
-import dash_core_components as dcc
-import dash_html_components as html
-
-import pandas as pd
-
-df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminder_unfiltered.csv')
-
-app = dash.Dash(
-    __name__,
-    external_scripts=['https://cdnjs.cloudflare.com/ajax/libs/ramda/0.25.0/ramda.min.js']
-)
-app.css.config.serve_locally = True
-app.scripts.config.serve_locally = True
-
-
-
-app.layout = html.Div([
-
-    html.Label('x'),
-    dcc.Input(id='x', value=3),
-
-    html.Label('y'),
-    dcc.Input(id='y', value=6),
-
-    # clientside
-    html.Label('x + y (clientside)'),
-    dcc.Input(id='x+y'),
-
-    # server-side
-    html.Label('x+y / 2 (serverside - takes 5 seconds)'),
-    dcc.Input(id='x+y / 2'),
-
-    # server-side
-    html.Div([
-        html.Label('Display x, y, x+y/2 (serverside) - takes 5 seconds'),
-        html.Pre(id='display-all-of-the-values'),
-    ]),
-
-    # clientside
-    html.Label('Mean(x, y, x+y, x+y/2) (clientside)'),
-    html.Div(id='mean-of-all-values'),
-
-
-])
-
-
-
-app.callback(
-    Output('x+y', 'value'),
-    [Input('x', 'value'),
-     Input('y', 'value')],
-    client_function=ClientFunction('R', 'add'))
-
-
-@app.callback(Output('x+y / 2', 'value'),
-              [Input('x+y', 'value')])
-def divide_by_two(value):
-    import time; time.sleep(4)
-    return float(value) / 2.0
-
-
-@app.callback(Output('display-all-of-the-values', 'children'),
-              [Input('x', 'value'),
-               Input('y', 'value'),
-               Input('x+y', 'value'),
-               Input('x+y / 2', 'value')])
-def display_all(*args):
-    import time; time.sleep(4)
-    return '\n'.join([str(a) for a in args])
-
-
-app.callback(
-    Output('mean-of-all-values', 'children'),
-    [Input('x', 'value'), Input('y', 'value'),
-     Input('x+y', 'value'), Input('x+y / 2', 'value')],
-    client_function=ClientFunction('clientside', 'mean'))
-
-
-if __name__ == '__main__':
-    app.run_server(debug=True, dev_tools_hot_reload=False)
diff --git a/clientside_3_table_manipulation.py b/clientside_3_table_manipulation.py
deleted file mode 100644
index 51bd44c5..00000000
--- a/clientside_3_table_manipulation.py
+++ /dev/null
@@ -1,71 +0,0 @@
-import dash
-from dash.dependencies import Input, Output, State, ClientFunction
-import dash_core_components as dcc
-import dash_html_components as html
-import dash_table
-import json
-
-import pandas as pd
-
-app = dash.Dash(
-    __name__,
-    external_scripts=['https://cdnjs.cloudflare.com/ajax/libs/ramda/0.25.0/ramda.min.js']
-)
-app.css.config.serve_locally = True
-app.scripts.config.serve_locally = True
-
-
-app.layout = html.Div([
-    html.Label('New Column'),
-    dcc.Input(id='new-column-name', placeholder='name'),
-    html.Button('Add Column', id='add-column', n_clicks=0),
-    html.Button('Add Row', id='add-row', n_clicks=1),
-    dash_table.DataTable(
-        id='table',
-        editable=True,
-    ),
-
-    html.Div(html.B('Clientside')),
-    dcc.Graph(id='graph'),
-
-    html.B('Server Side'),
-    html.Pre(id='display')
-])
-
-
-app.callback(
-    Output('table', 'columns'),
-    [Input('add-column', 'n_clicks')],
-    [State('new-column-name', 'value'),
-     State('table', 'columns')],
-    client_function=ClientFunction('clientside', 'tableColumns'))
-
-
-app.callback(
-    Output('table', 'data'),
-    [Input('table', 'columns'),
-     Input('add-row', 'n_clicks')],
-    [State('table', 'data')],
-    client_function=ClientFunction('clientside', 'tableData'))
-
-
-app.callback(
-    Output('graph', 'figure'),
-    [Input('table', 'data')],
-    client_function=ClientFunction('clientside', 'graphTable'))
-
-
-@app.callback(Output('display', 'children'),
-              [Input('table', 'columns'),
-               Input('table', 'data')])
-def display_data(columns, data):
-    return html.Div([
-        html.Div(html.B('Columns')),
-        html.Pre(json.dumps(columns, indent=2)),
-        html.Div(html.B('Data')),
-        html.Pre(json.dumps(data, indent=2)),
-    ])
-
-
-if __name__ == '__main__':
-    app.run_server(debug=True, dev_tools_hot_reload=False)
diff --git a/clientside_4_refresh_data.py b/clientside_4_refresh_data.py
deleted file mode 100644
index ac6421f0..00000000
--- a/clientside_4_refresh_data.py
+++ /dev/null
@@ -1,76 +0,0 @@
-import dash
-from dash.dependencies import Input, Output, State, ClientFunction
-import dash_core_components as dcc
-import dash_html_components as html
-
-import numpy as np
-import pandas as pd
-
-df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminder_unfiltered.csv')
-
-app = dash.Dash(
-    __name__,
-    external_scripts=['https://cdnjs.cloudflare.com/ajax/libs/ramda/0.25.0/ramda.min.js']
-)
-app.css.config.serve_locally = True
-app.scripts.config.serve_locally = True
-
-df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminder_unfiltered.csv')
-
-app.layout = html.Div([
-    html.Button('Refresh Data', id='refresh', n_clicks=0),
-    dcc.Store(id='df', data=df.to_dict('rows')),
-    html.Pre(id='head'),
-
-    dcc.Dropdown(
-        id='country-search',
-        options=[
-            {'value': i, 'label': i}
-            for i in df.country.unique()
-        ],
-        value='Canada'
-    ),
-
-    dcc.Dropdown(
-        id='year',
-        options=[
-            {'value': i, 'label': i}
-            for i in df.year.unique()
-        ],
-        multi=True,
-        value=df.year.unique()
-    ),
-
-    dcc.RadioItems(
-        id='mode',
-        options=[
-            {'label': 'Lines', 'value': 'lines'},
-            {'label': 'Markers', 'value': 'markers'},
-        ],
-        value='markers'
-    ),
-
-    dcc.Graph(id='my-fig'),
-
-])
-
-
-@app.callback(Output('df', 'data'), [Input('refresh', 'n_clicks')])
-def update_data(n_clicks):
-    df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminder_unfiltered.csv')
-    df['lifeExp'] = np.random.randn(len(df))
-    df['gdpPercap'] = np.random.randn(len(df))
-    return df.to_dict('records')
-
-
-app.callback(
-    Output('my-fig', 'figure'),
-    [Input('country-search', 'value'),
-     Input('year', 'value'),
-     Input('mode', 'value'),
-     Input('df', 'data')],
-    client_function=ClientFunction('clientside', 'updateFig'))
-
-
-if __name__ == '__main__':
-    app.run_server(debug=True, dev_tools_hot_reload=False)
diff --git a/clientside_5_slider.py b/clientside_5_slider.py
deleted file mode 100644
index dafa6585..00000000
--- a/clientside_5_slider.py
+++ /dev/null
@@ -1,57 +0,0 @@
-import dash
-from dash.dependencies import Input, Output, State, ClientFunction
-import dash_core_components as dcc
-import dash_html_components as html
-
-import pandas as pd
-
-df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv')
-
-app = dash.Dash(
-    __name__,
-    external_scripts=['https://cdnjs.cloudflare.com/ajax/libs/ramda/0.25.0/ramda.min.js']
-)
-app.css.config.serve_locally = True
-app.scripts.config.serve_locally = True
-
-
-
-app.layout = html.Div([
-    dcc.Store(
-        id='df',
-        data=df.to_dict('records')
-    ),
-
-    html.Div(style={'padding': 50}, children=[
-        dcc.Dropdown(
-            id='country-search',
-            options=[{'label': i, 'value': i} for i in df['country'].unique()],
-            value=df['country'].unique(),
-            multi=True
-        ),
-
-        dcc.Slider(
-            id='year',
-            min=df['year'].min(),
-            max=df['year'].max(),
-            value=df['year'].min(),
-            marks={str(year): str(year) for year in df['year'].unique()},
-            updatemode='drag',
-            step=5
-        ),
-    ]),
-
-    dcc.Graph(id='my-fig'),
-])
-
-
-app.callback(
-    Output('my-fig', 'figure'),
-    [Input('country-search', 'value'),
-     Input('year', 'value')],
-    [State('df', 'data')],
-    client_function=ClientFunction('clientside', 'animateFig'))
-
-
-if __name__ == '__main__':
-    app.run_server(debug=True, dev_tools_hot_reload=False)
