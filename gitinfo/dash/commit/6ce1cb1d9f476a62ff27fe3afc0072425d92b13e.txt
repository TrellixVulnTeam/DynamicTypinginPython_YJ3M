commit 6ce1cb1d9f476a62ff27fe3afc0072425d92b13e
Author: byron <byron@plot.ly>
Date:   Mon Apr 15 11:40:11 2019 -0400

    :white_check_mark: add unit tests for _configs

diff --git a/tests/test_configs.py b/tests/test_configs.py
index 0478d595..28abb82b 100644
--- a/tests/test_configs.py
+++ b/tests/test_configs.py
@@ -1,18 +1,24 @@
 import os
 import unittest
 # noinspection PyProtectedMember
-from dash._configs import (pathname_configs, DASH_ENV_VARS)
+from dash._configs import (
+    pathname_configs, DASH_ENV_VARS, get_combined_config, load_dash_env_vars)
 from dash import exceptions as _exc
 from dash._utils import get_asset_path
 
 
-class MyTestCase(unittest.TestCase):
+class TestConfigs(unittest.TestCase):
 
     def setUp(self):
         for k in DASH_ENV_VARS.keys():
             if k in os.environ:
                 os.environ.pop(k)
 
+    def test_dash_env_vars(self):
+        self.assertEqual(
+            {None}, {val for _, val in DASH_ENV_VARS.items()},
+            "initial var values are None without extra OS environ setting")
+
     def test_valid_pathname_prefix_init(self):
         _, routes, req = pathname_configs()
 
@@ -100,6 +106,37 @@ class MyTestCase(unittest.TestCase):
         path = get_asset_path(req, 'reset.css', 'assets')
         self.assertEqual('/requests/routes/assets/reset.css', path)
 
+    def test_get_combined_config_dev_tools_ui(self):
+        val1 = get_combined_config('dev_tools_ui', None, default=False)
+        self.assertEqual(
+            val1, False,
+            "should return the default value if None is provided for init and environment")
+        os.environ['DASH_DEV_TOOLS_UI'] = 'true'
+        val2 = get_combined_config('dev_tools_ui', None, default=False)
+        self.assertEqual(val2, True, "should return the set environment value as True")
+        val3 = get_combined_config('dev_tools_ui', False, default=True)
+        self.assertEqual(val3, False, "init value overrides the environment value")
+
+    def test_get_combined_config_dev_tools_props_check(self):
+        val1 = get_combined_config('dev_tools_props_check', None, default=False)
+        self.assertEqual(
+            val1, False,
+            "should return the default value if None is provided for init and environment")
+        os.environ['DASH_DEV_TOOLS_PROPS_CHECK'] = 'true'
+        val2 = get_combined_config('dev_tools_props_check', None, default=False)
+        self.assertEqual(val2, True, "should return the set environment value as True")
+        val3 = get_combined_config('dev_tools_props_check', False, default=True)
+        self.assertEqual(val3, False, "init value overrides the environment value")
+
+    def test_load_dash_env_vars_refects_to_os_environ(self):
+        for var in DASH_ENV_VARS.keys():
+            os.environ[var] = 'true'
+            vars = load_dash_env_vars()
+            self.assertEqual(vars[var], 'true')
+            os.environ[var] = 'false'
+            vars = load_dash_env_vars()
+            self.assertEqual(vars[var], 'false')
+
 
 if __name__ == '__main__':
     unittest.main()
