commit 4d5e7f00c57971ad3c334a39b295032b87edb5ed
Author: byron <byron@plot.ly>
Date:   Sun Jun 2 23:29:34 2019 -0400

    :ok_hand: based on feedbacks

diff --git a/.pylintrc b/.pylintrc
index bde8d00a..766a5f6d 100644
--- a/.pylintrc
+++ b/.pylintrc
@@ -61,7 +61,7 @@ disable=fixme,
         old-style-class,
         superfluous-parens,
         bad-continuation,
-        unexpected-keyword-arg
+
 
 # Enable the message, report, category or checker with the given id(s). You can
 # either give multiple identifier separated by comma (,) or put this option
diff --git a/.pylintrc37 b/.pylintrc37
index 30691595..533bbade 100644
--- a/.pylintrc37
+++ b/.pylintrc37
@@ -148,8 +148,7 @@ disable=invalid-name,
         possibly-unused-variable,
         too-many-lines,
         too-many-statements,
-        bad-continuation,
-        unexpected-keyword-arg
+        bad-continuation
 
 # Enable the message, report, category or checker with the given id(s). You can
 # either give multiple identifier separated by comma (,) or put this option
diff --git a/dash/exceptions.py b/dash/exceptions.py
index 9af4a35f..0b029662 100644
--- a/dash/exceptions.py
+++ b/dash/exceptions.py
@@ -94,27 +94,3 @@ class SameInputOutputException(CallbackException):
 
 class MissingCallbackContextException(CallbackException):
     pass
-
-
-class DashTestingError(Exception):
-    """Base error for pytest-dash."""
-
-
-class InvalidDriverError(DashTestingError):
-    """An invalid selenium driver was specified."""
-
-
-class NoAppFoundError(DashTestingError):
-    """No `app` was found in the file."""
-
-
-class DashAppLoadingError(DashTestingError):
-    """The dash app failed to load"""
-
-
-class ServerCloseError(DashTestingError):
-    """The server cannot be closed"""
-
-
-class TestingTimeoutError(DashTestingError):
-    """"all timeout error about dash testing"""
diff --git a/dash/testing/application_runners.py b/dash/testing/application_runners.py
index 62547cfc..bd7a022e 100644
--- a/dash/testing/application_runners.py
+++ b/dash/testing/application_runners.py
@@ -12,7 +12,7 @@ import six
 import flask
 import requests
 
-from dash.exceptions import (
+from dash.testing.errors import (
     NoAppFoundError,
     TestingTimeoutError,
     ServerCloseError,
@@ -191,6 +191,7 @@ class ProcessRunner(BaseDashRunner):
                 if six.PY3:
                     # pylint:disable=no-member
                     _except = subprocess.TimeoutExpired
+                    # pylint: disable=unexpected-keyword-arg
                     self.proc.communicate(timeout=self.stop_timeout)
                 else:
                     _except = OSError
diff --git a/dash/testing/browser.py b/dash/testing/browser.py
index 8aac1b0c..08c73feb 100644
--- a/dash/testing/browser.py
+++ b/dash/testing/browser.py
@@ -2,6 +2,7 @@
 import os
 import sys
 import logging
+import warnings
 import percy
 
 from selenium import webdriver
@@ -13,7 +14,7 @@ from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
 from selenium.common.exceptions import WebDriverException, TimeoutException
 
 from dash.testing.wait import text_to_equal
-from dash.exceptions import DashAppLoadingError
+from dash.testing.errors import DashAppLoadingError
 
 logger = logging.getLogger(__name__)
 
@@ -69,6 +70,9 @@ class Browser:
         )
         return _wait.until(method(*args), msg)
 
+    def wait_for_element(self, css_selector, timeout=None):
+        self.wait_for_element_by_css_selector(css_selector, timeout)
+
     # keep these two wait_for API for easy migration
     def wait_for_element_by_css_selector(self, selector, timeout=None):
         return self._wait_for(
@@ -86,7 +90,7 @@ class Browser:
             "cannot wait until element contains expected text {}".format(text),
         )
 
-    def wait_until_server_is_ready(self, timeout=10):
+    def wait_for_page(self, timeout=10):
 
         self.driver.get(self.server_url)
         try:
@@ -157,15 +161,17 @@ class Browser:
 
     def get_logs(self):
         """get_logs works only with chrome webdriver"""
-        return (
-            [
-                entry
-                for entry in self.driver.get_log("browser")
-                if entry["timestamp"] > self._last_ts
-            ]
-            if self.driver.name == "chrome"
-            else []
-        )
+        if self.driver.name == 'Chrome':
+            return (
+                [
+                    entry
+                    for entry in self.driver.get_log("browser")
+                    if entry["timestamp"] > self._last_ts
+                ]
+            )
+        else:
+            warnings.warn("get_logs always return None with your webdriver")
+            return None
 
     def reset_log_timestamp(self):
         """reset_log_timestamp only work with chrome webdrier"""
@@ -194,4 +200,4 @@ class Browser:
         for selenium testing
         """
         self._url = value
-        self.wait_until_server_is_ready()
+        self.wait_for_page()
diff --git a/dash/testing/errors.py b/dash/testing/errors.py
new file mode 100644
index 00000000..9de48e30
--- /dev/null
+++ b/dash/testing/errors.py
@@ -0,0 +1,22 @@
+class DashTestingError(Exception):
+    """Base error for pytest-dash."""
+
+
+class InvalidDriverError(DashTestingError):
+    """An invalid selenium driver was specified."""
+
+
+class NoAppFoundError(DashTestingError):
+    """No `app` was found in the file."""
+
+
+class DashAppLoadingError(DashTestingError):
+    """The dash app failed to load"""
+
+
+class ServerCloseError(DashTestingError):
+    """The server cannot be closed"""
+
+
+class TestingTimeoutError(DashTestingError):
+    """"all timeout error about dash testing"""
diff --git a/dash/testing/wait.py b/dash/testing/wait.py
index 1c6da05b..6aae737c 100644
--- a/dash/testing/wait.py
+++ b/dash/testing/wait.py
@@ -1,6 +1,6 @@
 """Utils methods for pytest-dash such wait_for wrappers"""
 import time
-from dash.exceptions import TestingTimeoutError
+from dash.testing.errors import TestingTimeoutError
 
 
 def until(
@@ -11,9 +11,9 @@ def until(
 ):  # noqa: C0330
     end_time = time.time() + timeout
     while wait_cond():
-        time.sleep(poll)
         if time.time() > end_time:
             raise TestingTimeoutError(msg)
+        time.sleep(poll)
 
 
 def until_not(
@@ -21,9 +21,9 @@ def until_not(
 ):  # noqa: C0330
     end_time = time.time() + timeout
     while not wait_cond():
-        time.sleep(poll)
         if time.time() > end_time:
             raise TestingTimeoutError(msg)
+        time.sleep(poll)
 
 
 class text_to_equal(object):  # pylint: disable=too-few-public-methods
