commit 688385efb8afd023e629740e1c4bc5cad39e5b29
Author: byron <byron@plot.ly>
Date:   Wed Jun 5 12:58:19 2019 -0400

    :construction: improve for dbg experience

diff --git a/.circleci/config.yml b/.circleci/config.yml
index 029fc206..5e0efef9 100644
--- a/.circleci/config.yml
+++ b/.circleci/config.yml
@@ -89,11 +89,12 @@ jobs:
           command: |
             . venv/bin/activate
             pytest --junitxml=test-reports/junit_intg.xml tests/integration/
-
+      - store_artifacts:
+          path: test-reports
       - store_test_results:
           path: test-reports
       - store_artifacts:
-          path: test-reports
+          path: /tmp/dash_artifacts
 
 
   "python-3.6":
diff --git a/dash-renderer/version.py b/dash-renderer/version.py
index 08a9dbff..f8ab8c2e 100644
--- a/dash-renderer/version.py
+++ b/dash-renderer/version.py
@@ -1 +1 @@
-__version__ = '0.23.0'
+__version__ = '0.24.0'
diff --git a/dash/testing/browser.py b/dash/testing/browser.py
index 3ca1396e..7435bae9 100644
--- a/dash/testing/browser.py
+++ b/dash/testing/browser.py
@@ -11,7 +11,13 @@ from selenium.webdriver.common.by import By
 from selenium.webdriver.support.wait import WebDriverWait
 from selenium.webdriver.chrome.options import Options
 from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
-from selenium.common.exceptions import WebDriverException, TimeoutException
+from selenium.webdriver.common.action_chains import ActionChains
+
+from selenium.common.exceptions import (
+    WebDriverException,
+    TimeoutException,
+    NoSuchElementException,
+)
 
 from dash.testing.wait import text_to_equal
 from dash.testing.locators import DashLocatorsMixin
@@ -29,7 +35,7 @@ class Browser(DashLocatorsMixin):
         self._driver = self.get_webdriver(remote)
         self._driver.implicitly_wait(2)
 
-        self._wd_wait = WebDriverWait(self.driver, wait_timeout, 0.2)
+        self._wd_wait = WebDriverWait(self.driver, wait_timeout)
         self._last_ts = 0
         self._url = None
 
@@ -61,6 +67,23 @@ class Browser(DashLocatorsMixin):
         logger.info("taking snapshot name => %s", snapshot_name)
         self.percy_runner.snapshot(name=snapshot_name)
 
+    def take_snapshot(self, name):
+        """method used by hook to take snapshot while selenium test fails"""
+        target = (
+            "/tmp/dash_artifacts"
+            if not self._is_windows()
+            else os.getenv("TEMP")
+        )
+        if not os.path.exists(target):
+            try:
+                os.mkdir(target)
+            except OSError:
+                logger.exception("cannot make artifacts")
+
+        self.driver.save_screenshot(
+            "{}/{}_{}.png".format(target, name, self.session_id)
+        )
+
     def find_element(self, css_selector):
         """wrapper for find_element_by_css_selector from driver"""
         return self.driver.find_element_by_css_selector(css_selector)
@@ -77,10 +100,12 @@ class Browser(DashLocatorsMixin):
             else WebDriverWait(self.driver, timeout)
         )
         logger.debug(
-            "WebdriverWait timeout => %s, poll => %s",
-            _wait._timeout,
-            _wait._poll,
+            "method, timeout, poll => %s %s %s",
+            method,
+            _wait.timeout,  # pylint: disable=protected-access
+            _wait._poll,  # pylint: disable=protected-access
         )
+
         return _wait.until(method(*args), msg)
 
     def wait_for_element(self, css_selector, timeout=None):
@@ -97,10 +122,10 @@ class Browser(DashLocatorsMixin):
 
     def wait_for_text_to_equal(self, selector, text, timeout=None):
         return self._wait_for(
-            text_to_equal,
-            (selector, text),
-            timeout,
-            "cannot wait until element contains expected text {}".format(text),
+            method=text_to_equal,
+            args=(selector, text),
+            timeout=timeout,
+            msg="text -> {} not found within {}s".format(text, timeout),
         )
 
     def wait_for_page(self, timeout=10):
@@ -173,6 +198,21 @@ class Browser(DashLocatorsMixin):
 
         return webdriver.Firefox(fp, capabilities=capabilities)
 
+    @staticmethod
+    def _is_windows():
+        return sys.platform == "win32"
+
+    def js_click(self, elem):
+        """click in native javascript way
+        note: this is NOT the recommended way to click"""
+        self.driver.execute_script("arguments[0].click();", elem)
+
+    def mouse_click(self, elem):
+        try:
+            ActionChains(self.driver).click(elem).perform()
+        except NoSuchElementException:
+            logger.exception("mouse_click on wrong element")
+
     def get_logs(self):
         """get_logs works only with chrome webdriver"""
         if self.driver.name.lower() == "chrome":
@@ -208,8 +248,7 @@ class Browser(DashLocatorsMixin):
     @server_url.setter
     def server_url(self, value):
         """property setter for server_url
-
-        Note: set server_url will implicitly check the server is ready
+        Note: set server_url will implicitly check if the server is ready
         for selenium testing
         """
         self._url = value
diff --git a/dash/testing/locators.py b/dash/testing/locators.py
index 92701e8c..56b9ed5a 100644
--- a/dash/testing/locators.py
+++ b/dash/testing/locators.py
@@ -1,3 +1,4 @@
+# pylint: disable=too-few-public-methods
 class DashLocatorsMixin(object):
     def dev_tools_error_counts(self):
         return int(
diff --git a/dash/testing/plugin.py b/dash/testing/plugin.py
index e3bbc106..01b2d074 100644
--- a/dash/testing/plugin.py
+++ b/dash/testing/plugin.py
@@ -27,6 +27,22 @@ def pytest_addoption(parser):
     )
 
 
+@pytest.hookimpl(tryfirst=True, hookwrapper=True)
+def pytest_runtest_makereport(item, call):  # pylint: disable=unused-argument
+    # execute all other hooks to obtain the report object
+    outcome = yield
+    rep = outcome.get_result()
+
+    # we only look at actual failing test calls, not setup/teardown
+    if rep.when == "call" and rep.failed:
+        for name, fixture in item.funcargs.items():
+            try:
+                if name in {"dash_duo", "dash_br"}:
+                    fixture.take_snapshot(item.name)
+            except Exception as e:  # pylint: disable=broad-except
+                print(e)
+
+
 ###############################################################################
 # Fixtures
 ###############################################################################
diff --git a/dash/testing/wait.py b/dash/testing/wait.py
index 882af22b..808671e6 100644
--- a/dash/testing/wait.py
+++ b/dash/testing/wait.py
@@ -2,7 +2,7 @@
 """Utils methods for pytest-dash such wait_for wrappers"""
 import time
 import logging
-from selenium.common.exceptions import StaleElementReferenceException
+from selenium.common.exceptions import WebDriverException
 from dash.testing.errors import TestingTimeoutError
 
 
@@ -69,6 +69,6 @@ class text_to_equal(object):
                 str(elem.text) == self.text
                 or str(elem.get_attribute("value")) == self.text
             )
-        except StaleElementReferenceException:
-            logger.warning("text_to_equal, element is still stale")
+        except WebDriverException:
+            logger.exception("text_to_equal encountered an exception")
             return False
diff --git a/pytest.ini b/pytest.ini
index 2c27f386..d2dc22fc 100644
--- a/pytest.ini
+++ b/pytest.ini
@@ -1,6 +1,5 @@
 [pytest]
 testpaths = tests/
 addopts = -rsxX
-log_cli=true
 log_format = %(asctime)s | %(levelname)s | %(name)s:%(lineno)d | %(message)s
 log_cli_level = ERROR
diff --git a/tests/integration/devtools/test_devtools_error_handling.py b/tests/integration/devtools/test_devtools_error_handling.py
index 70ded14d..18d92282 100644
--- a/tests/integration/devtools/test_devtools_error_handling.py
+++ b/tests/integration/devtools/test_devtools_error_handling.py
@@ -1,7 +1,6 @@
 # -*- coding: UTF-8 -*-
 import dash_html_components as html
 import dash_core_components as dcc
-
 import dash
 from dash.dependencies import Input, Output
 from dash.exceptions import PreventUpdate
@@ -118,7 +117,6 @@ def test_dev003_validation_errors_in_place(dash_duo):
     )
 
     dash_duo.find_element("#button").click()
-    # assert dash_duo.dev_tools_error_counts == 1,
     dash_duo.wait_for_text_to_equal(".test-devtools-error-count", "1")
     dash_duo.percy_snapshot("devtools - validation exception - closed")
 
