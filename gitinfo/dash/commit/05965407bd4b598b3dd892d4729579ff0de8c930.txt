commit 05965407bd4b598b3dd892d4729579ff0de8c930
Author: alexcjohnson <alex@plot.ly>
Date:   Fri Mar 27 08:33:16 2020 -0400

    halt circularity and cb/layout validation after we find earlier errors

diff --git a/dash-renderer/src/actions/dependencies.js b/dash-renderer/src/actions/dependencies.js
index 7df7156a..4825a422 100644
--- a/dash-renderer/src/actions/dependencies.js
+++ b/dash-renderer/src/actions/dependencies.js
@@ -603,7 +603,12 @@ export function computeGraphs(dependencies, dispatchError) {
         return out;
     }, dependencies);
 
-    validateDependencies(parsedDependencies, dispatchError);
+    let hasError = false;
+    const wrappedDE = (message, lines) => {
+        hasError = true;
+        dispatchError(message, lines);
+    }
+    validateDependencies(parsedDependencies, wrappedDE);
 
     /*
      * For regular ids, outputMap and inputMap are:
@@ -632,6 +637,21 @@ export function computeGraphs(dependencies, dispatchError) {
     const outputPatterns = {};
     const inputPatterns = {};
 
+    const finalGraphs = {
+        InputGraph: inputGraph,
+        MultiGraph: multiGraph,
+        outputMap,
+        inputMap,
+        outputPatterns,
+        inputPatterns,
+    };
+
+    if (hasError) {
+        // leave the graphs empty if we found an error, so we don't try to
+        // execute the broken callbacks.
+        return finalGraphs;
+    }
+
     parsedDependencies.forEach(dependency => {
         const {outputs, inputs} = dependency;
 
@@ -778,14 +798,7 @@ export function computeGraphs(dependencies, dispatchError) {
         });
     });
 
-    return {
-        InputGraph: inputGraph,
-        MultiGraph: multiGraph,
-        outputMap,
-        inputMap,
-        outputPatterns,
-        inputPatterns,
-    };
+    return finalGraphs;
 }
 
 function findWildcardKeys(id) {
diff --git a/tests/integration/devtools/test_callback_validation.py b/tests/integration/devtools/test_callback_validation.py
index da75d5c3..88246a93 100644
--- a/tests/integration/devtools/test_callback_validation.py
+++ b/tests/integration/devtools/test_callback_validation.py
@@ -64,33 +64,32 @@ def test_dvcv002_blank_id_prop(dash_duo):
 
     dash_duo.start_server(app, **debugging)
 
-    dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "6")
+    dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "5")
 
-    # the first 2 are just artifacts... the other 4 we care about
-    check_error(dash_duo, 0, "Circular Dependencies", [])
-    check_error(dash_duo, 1, "Same `Input` and `Output`", [])
+    # the first one is just an artifact... the other 4 we care about
+    check_error(dash_duo, 0, "Same `Input` and `Output`", [])
 
     check_error(
         dash_duo,
-        2,
+        1,
         "Callback item missing ID",
         ['Input[0].id = ""', "Every item linked to a callback needs an ID"],
     )
     check_error(
         dash_duo,
-        3,
+        2,
         "Callback property error",
         ['Input[0].property = ""', "expected `property` to be a non-empty string."],
     )
     check_error(
         dash_duo,
-        4,
+        3,
         "Callback item missing ID",
         ['Output[1].id = ""', "Every item linked to a callback needs an ID"],
     )
     check_error(
         dash_duo,
-        5,
+        4,
         "Callback property error",
         ['Output[1].property = ""', "expected `property` to be a non-empty string."],
     )
@@ -258,14 +257,11 @@ def test_dvcv005_input_output_overlap(dash_duo):
 
     dash_duo.start_server(app, **debugging)
 
-    dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "6")
-
-    check_error(dash_duo, 0, "Dependency Cycle Found: a.children -> a.children", [])
-    check_error(dash_duo, 1, "Circular Dependencies", [])
+    dash_duo.wait_for_text_to_equal(dash_duo.devtools_error_count_locator, "4")
 
     check_error(
         dash_duo,
-        2,
+        0,
         "Same `Input` and `Output`",
         [
             'Input 0 ({"b":MATCH,"c":1}.children)',
@@ -276,7 +272,7 @@ def test_dvcv005_input_output_overlap(dash_duo):
 
     check_error(
         dash_duo,
-        3,
+        1,
         "Same `Input` and `Output`",
         [
             'Input 0 ({"a":1}.children)',
@@ -287,14 +283,14 @@ def test_dvcv005_input_output_overlap(dash_duo):
 
     check_error(
         dash_duo,
-        4,
+        2,
         "Same `Input` and `Output`",
         ["Input 0 (c.children)", "matches Output 1 (c.children)"],
     )
 
     check_error(
         dash_duo,
-        5,
+        3,
         "Same `Input` and `Output`",
         ["Input 0 (a.children)", "matches Output 0 (a.children)"],
     )
