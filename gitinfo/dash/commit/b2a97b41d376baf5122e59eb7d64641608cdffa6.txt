commit b2a97b41d376baf5122e59eb7d64641608cdffa6
Author: alexcjohnson <alex@plot.ly>
Date:   Thu Apr 4 20:31:01 2019 -0400

    add no_update for partial or non-exception update rejection

diff --git a/dash/__init__.py b/dash/__init__.py
index d37fef74..ead91983 100644
--- a/dash/__init__.py
+++ b/dash/__init__.py
@@ -1,4 +1,4 @@
-from .dash import Dash  # noqa: F401
+from .dash import Dash, no_update  # noqa: F401
 from . import dependencies  # noqa: F401
 from . import development  # noqa: F401
 from . import exceptions  # noqa: F401
diff --git a/dash/dash.py b/dash/dash.py
index 10364839..960f2fd6 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -74,6 +74,15 @@ _re_index_scripts_id = re.compile(r'src=".*dash[-_]renderer.*"')
 _re_renderer_scripts_id = re.compile(r'id="_dash-renderer')
 
 
+class _NoUpdate(object):
+    # pylint: disable=too-few-public-methods
+    pass
+
+
+# Singleton signal to not update an output, alternative to PreventUpdate
+no_update = _NoUpdate()
+
+
 # pylint: disable=too-many-instance-attributes
 # pylint: disable=too-many-arguments, too-many-locals
 class Dash(object):
@@ -990,15 +999,25 @@ class Dash(object):
                         )
 
                     component_ids = collections.defaultdict(dict)
+                    has_update = False
                     for i, o in enumerate(output):
-                        component_ids[o.component_id][o.component_property] =\
-                            output_value[i]
+                        val = output_value[i]
+                        if val is not no_update:
+                            has_update = True
+                            o_id, o_prop = o.component_id, o.component_property
+                            component_ids[o_id][o_prop] = val
+
+                    if not has_update:
+                        raise exceptions.PreventUpdate
 
                     response = {
                         'response': component_ids,
                         'multi': True
                     }
                 else:
+                    if output_value is no_update:
+                        raise exceptions.PreventUpdate
+
                     response = {
                         'response': {
                             'props': {
diff --git a/tests/test_integration.py b/tests/test_integration.py
index aa0e8ae1..bc819ca8 100644
--- a/tests/test_integration.py
+++ b/tests/test_integration.py
@@ -13,7 +13,7 @@ import dash_flow_example
 import dash_html_components as html
 import dash_core_components as dcc
 
-from dash import Dash, callback_context
+from dash import Dash, callback_context, no_update
 
 from dash.dependencies import Input, Output, State
 from dash.exceptions import (
@@ -150,7 +150,10 @@ class Tests(IntegrationTests):
         assert_clean_console(self)
 
     def test_aborted_callback(self):
-        """Raising PreventUpdate prevents update and triggering dependencies"""
+        """
+        Raising PreventUpdate OR returning no_update
+        prevents update and triggering dependencies
+        """
 
         initial_input = 'initial input'
         initial_output = 'initial output'
@@ -168,6 +171,8 @@ class Tests(IntegrationTests):
         @app.callback(Output('output1', 'children'), [Input('input', 'value')])
         def callback1(value):
             callback1_count.value += 1
+            if callback1_count.value > 2:
+                return no_update
             raise PreventUpdate("testing callback does not update")
             return value
 
@@ -180,12 +185,12 @@ class Tests(IntegrationTests):
 
         input_ = self.wait_for_element_by_id('input')
         input_.clear()
-        input_.send_keys('x')
+        input_.send_keys('xyz')
         output1 = self.wait_for_element_by_id('output1')
         output2 = self.wait_for_element_by_id('output2')
 
-        # callback1 runs twice (initial page load and through send_keys)
-        self.assertEqual(callback1_count.value, 2)
+        # callback1 runs 4x (initial page load and 3x through send_keys)
+        self.assertEqual(callback1_count.value, 4)
 
         # callback2 is never triggered, even on initial load
         self.assertEqual(callback2_count.value, 0)
@@ -656,6 +661,39 @@ class Tests(IntegrationTests):
 
         self.assertGreater(int(output2.text), t)
 
+    def test_multi_output_no_update(self):
+        app = Dash(__name__)
+        app.scripts.config.serve_locally = True
+
+        app.layout = html.Div([
+            html.Button('B', 'btn'),
+            html.P('initial1', 'n1'),
+            html.P('initial2', 'n2'),
+            html.P('initial3', 'n3')
+        ])
+
+        @app.callback([Output('n1', 'children'),
+                       Output('n2', 'children'),
+                       Output('n3', 'children')],
+                      [Input('btn', 'n_clicks')])
+        def show_clicks(n):
+            # partial or complete cancelation of updates via no_update
+            return [
+                no_update if n > 4 else n,
+                no_update if n > 2 else n,
+                no_update
+            ]
+
+        self.startServer(app)
+
+        btn = self.wait_for_element_by_id('btn')
+        for _ in range(10):
+            btn.click()
+
+        self.wait_for_text_to_equal('#n1', '4')
+        self.wait_for_text_to_equal('#n2', '2')
+        self.wait_for_text_to_equal('#n3', 'initial3')
+
     def test_with_custom_renderer(self):
         app = Dash(__name__)
 
