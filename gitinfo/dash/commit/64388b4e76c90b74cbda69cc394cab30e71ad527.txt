commit 64388b4e76c90b74cbda69cc394cab30e71ad527
Author: alexcjohnson <alex@plot.ly>
Date:   Thu May 30 12:44:30 2019 -0400

    forbidden_props -> reserved_words, and include `_.*`

diff --git a/dash/development/component_generator.py b/dash/development/component_generator.py
index 1b64dcc2..48b88c09 100644
--- a/dash/development/component_generator.py
+++ b/dash/development/component_generator.py
@@ -19,12 +19,13 @@ from ._py_components_generation import generate_imports
 from ._py_components_generation import generate_classes_files
 
 
-forbidden_props = [
+reserved_words = [
     'UNDEFINED',
     'REQUIRED',
     'to_plotly_json',
     'available_properties',
-    'available_wildcard_properties'
+    'available_wildcard_properties',
+    '_.*'
 ]
 
 
@@ -56,14 +57,12 @@ def generate_components(
 
     extract_path = pkg_resources.resource_filename("dash", "extract-meta.js")
 
-    forbid_patterns = '|'.join(
-        '^{}$'.format(p) for p in forbidden_props + ['_.*']
-    )
+    reserved_patterns = '|'.join('^{}$'.format(p) for p in reserved_words)
 
     os.environ["NODE_PATH"] = "node_modules"
     cmd = shlex.split(
         "node {} {} {} {}".format(
-            extract_path, ignore, forbid_patterns, components_source
+            extract_path, ignore, reserved_patterns, components_source
         ),
         posix=not is_windows,
     )
diff --git a/dash/extract-meta.js b/dash/extract-meta.js
index 4a6bdc8a..3567161b 100644
--- a/dash/extract-meta.js
+++ b/dash/extract-meta.js
@@ -6,7 +6,7 @@ const reactDocs = require('react-docgen');
 
 const componentPaths = process.argv.slice(4);
 const ignorePattern = new RegExp(process.argv[2]);
-const forbiddenProps = process.argv[3].split('|').map(part => new RegExp(part));
+const reservedPatterns = process.argv[3].split('|').map(part => new RegExp(part));
 
 let failed = false;
 
@@ -65,11 +65,11 @@ function docstringWarning(doc) {
 
 function propError(doc) {
     for(const propName in doc.props) {
-        forbiddenProps.forEach(forbiddenPattern => {
-            if (forbiddenPattern.test(propName)) {
+        reservedPatterns.forEach(reservedPattern => {
+            if (reservedPattern.test(propName)) {
                 process.stderr.write(
-                    `\nERROR: "${propName}" matches forbidden prop name ` +
-                    `pattern: ${forbiddenPattern.toString()}\n`
+                    `\nERROR: "${propName}" matches reserved word ` +
+                    `pattern: ${reservedPattern.toString()}\n`
                 );
                 failed = true;
             }
diff --git a/tests/unit/dash/development/test_base_component.py b/tests/unit/dash/development/test_base_component.py
index 171ee3f3..739590cc 100644
--- a/tests/unit/dash/development/test_base_component.py
+++ b/tests/unit/dash/development/test_base_component.py
@@ -7,7 +7,7 @@ import unittest
 import plotly
 
 from dash.development.base_component import Component
-from dash.development.component_generator import forbidden_props
+from dash.development.component_generator import reserved_words
 from dash.development._py_components_generation import (
     generate_class_string,
     generate_class_file,
@@ -740,21 +740,25 @@ class TestGenerateClass(unittest.TestCase):
             self.ComponentClassRequired(children='test')
 
     def test_attrs_match_forbidden_props(self):
+        assert '_.*' in reserved_words, 'props cannot have leading underscores'
+
         # props are not added as attrs unless explicitly provided
         # except for children, which is always set if it's a prop at all.
+        expected_attrs = set(reserved_words + ['children']) - set(['_.*'])
         c = self.ComponentClass()
-        base_attrs = dir(c)
-        extra_attrs = [a for a in base_attrs if a[0] != '_']
-        assert set(extra_attrs) == set(forbidden_props + ['children']), \
+        base_attrs = set(dir(c))
+        extra_attrs = set(a for a in base_attrs if a[0] != '_')
+
+        assert extra_attrs == expected_attrs, \
             'component has only underscored and reserved word attrs'
 
         # setting props causes them to show up as attrs
         c2 = self.ComponentClass('children', id='c2', optionalArray=[1])
-        prop_attrs = dir(c2)
-        assert set(base_attrs) - set(prop_attrs) == set([]), \
-            'no attrs were removed'
+        prop_attrs = set(dir(c2))
+
+        assert base_attrs - prop_attrs == set([]), 'no attrs were removed'
         assert (
-            set(prop_attrs) - set(base_attrs) == set(['id', 'optionalArray'])
+            prop_attrs - base_attrs == set(['id', 'optionalArray'])
         ), 'explicit props were added as attrs'
 
 
