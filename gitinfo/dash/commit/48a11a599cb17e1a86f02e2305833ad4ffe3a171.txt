commit 48a11a599cb17e1a86f02e2305833ad4ffe3a171
Author: chriddyp <chris@plot.ly>
Date:   Wed Feb 15 14:21:48 2017 -0500

    updated api

diff --git a/dash/react.py b/dash/react.py
index d88c577d..5cca85dc 100644
--- a/dash/react.py
+++ b/dash/react.py
@@ -9,6 +9,7 @@ from dependency_resolver import Resolver
 class Dash(object):
     def __init__(self, name=None, url_namespace='', server=None):
 
+        self.url_namespace = url_namespace
         self.layout = None
 
         # Resolve site-packages location by using plotly as canonical
@@ -48,6 +49,7 @@ class Dash(object):
         # TODO - A different name for "interceptor".
         # TODO - Should the "interceptor"'s API be keyed by component ID?
         # For example: POST dash.com/components/my-id/update
+        self.server.add_url_rule(
             '{}/interceptor'.format(url_namespace),
             view_func=self.interceptor,
             endpoint='{}_{}'.format(url_namespace, 'interceptor'),
@@ -56,13 +58,11 @@ class Dash(object):
         self.server.add_url_rule(
             '{}/js/component-suites/<path:path>'.format(url_namespace),
             endpoint='{}_{}'.format(url_namespace, 'js'),
-            view_func=self.component_suites)
-
-        # Serve up the main dash bundle with the treeRenderer
-        with self.server.app_context():
-            url_for('static', filename='bundle.js')
+            view_func=self.serve_component_suites)
 
-    def component_suites(self, path):
+    # Serve the JS bundles for each package
+    def serve_component_suites(self, path):
+        # TODO - resolver should be able to figure out the local installation path
         name = self.resolver.resolve_dependency_name(path)
         return send_from_directory(self.resolver.site_packages_path, name)
 
@@ -122,33 +122,43 @@ class Dash(object):
 
     def interceptor(self):
         body = json.loads(flask.request.get_data())
-        target = body['target']
-        target_id = target['props']['id']
-        parent_json = body['parents']
-        parents = []
-        for pid in self.react_map[target_id]['parents']:
-            component_json = parent_json[pid]
-
-            # TODO: Update the component in the layout.
-            #       This fails.
-            #
-            #     self.layout[component_id] = component_json
-            #   File "/Users/per/dev/plotly/dash2/dash/dash/development/base_component.py", line 44, in __setitem__
-            #     self.content.__setitem__(index, component)
-            # TypeError: list indices must be integers, not unicode
-            #
-            #component_id = component_json['props']['id']
-            #self.layout[component_id] = component_json
-
-            parents.append(component_json)
-
-        return self.react_map[target_id]['callback'](*parents)
-
-    def run_server(self, port=8050, debug=True, component_suites=[]):
-        self.component_suites = component_suites
-        self.server.run(port=port, debug=debug)
+        # TODO - This should include which event triggered this function
+        target_id = body['id']
+        # TODO - Rename 'parents' to 'state'
+        # TODO - Include 'events' object
+        state = body['state']
+
+        args = []
+        for component_registration in self.react_map[target_id]['state']:
+            component_id = component_registration['id']
+            component_state = state[component_id]
+            registered_prop = component_registration['prop']
+            if registered_prop == '*':
+                args.append(state[component_id])
+            else:
+                args.append(state[component_id][registered_prop])
+
+        return self.react_map[target_id]['callback'](*args)
+
+    # TODO - Rename "react" to avoid ambiguity with the JS library?
+    # Perhaps "update", "respond", ...
+    # TODO - Update nomenclature.
+    # "Parents" and "Children" should refer to the DOM tree
+    # and not the dependency tree.
+    # The dependency tree should use the nomenclature
+    # "observer" and "controller".
+    # "observers" listen for changes from their "controllers". For example,
+    # if a graph depends on a dropdown, the graph is the "observer" and the
+    # dropdown is a "controller". In this case the graph's "dependency" is
+    # the dropdown.
+    # TODO - Check this map for recursive or other ill-defined non-tree
+    # relationships
+    def react(self, component_id, parents=[], state=[], events=[]):
+        self.react_map[component_id] = {
+            'state': [{'id': p, 'prop': '*'} for p in parents] + state,
+            'events': [{'id': p, 'event': 'propChange'} for p in parents] + events
+        }
 
-    def react(self, component_id, parents=[]):
         def wrap_func(func):
             def add_context(*args, **kwargs):
 
@@ -164,11 +174,14 @@ class Dash(object):
                 return flask.jsonify(json.loads(json.dumps(response,
                                      cls=plotly.utils.PlotlyJSONEncoder)))
 
-            self.react_map[component_id] = {
-                'callback': add_context,
-                'parents': parents
-            }
+            self.react_map[component_id]['callback'] = add_context
 
             return add_context
 
         return wrap_func
+
+    def run_server(self, port=8050,
+                   debug=True, component_suites=[],
+                   **flask_run_options):
+        self.component_suites = component_suites
+        self.server.run(port=port, debug=debug, **flask_run_options)
