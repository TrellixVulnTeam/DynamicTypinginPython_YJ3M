commit 9bd9810ab322d4f67e2a65bd1bd7c40e66013223
Author: chriddyp <chris@plot.ly>
Date:   Tue Apr 18 12:19:43 2017 -0400

    login view for at the end of an oauth flow
    
    save the oauth token as a cookie

diff --git a/dash/authentication.py b/dash/authentication.py
new file mode 100644
index 00000000..6a79f4bf
--- /dev/null
+++ b/dash/authentication.py
@@ -0,0 +1,30 @@
+import flask
+import datetime
+import plotly
+import requests
+
+
+def login():
+    authorization_header = flask.request.headers.get('Authorization')
+    oauth_token = authorization_header.split('Bearer ')[1]
+    res = requests.get(
+        '{}/v2/users/current'.format(
+            plotly.config.get_config()['plotly_api_domain']
+        ),
+        headers={
+            'Authorization': authorization_header
+        }
+    )
+    res.raise_for_status()
+    response = flask.Response(
+        res.json(),
+        status=res.status_code
+    )
+    # TODO - set path appropriately
+    response.set_cookie(
+        'plotly_dash_oauth_token',
+        value=oauth_token,
+        max_age=None
+    )
+    return response
+
diff --git a/dash/dash.py b/dash/dash.py
index 627f55af..3b094c7a 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -11,6 +11,7 @@ from development.base_component import Component
 import pkgutil
 import dash_renderer
 from dependencies import Event, Input, Output, State
+import authentication
 import exceptions
 
 
@@ -47,6 +48,11 @@ class Dash(object):
         self.registered_paths = {}
 
         # urls
+        self.server.add_url_rule(
+            '/_login',
+            view_func=authentication.login,
+            methods=['post']
+        )
 
         self.server.add_url_rule(
             '{}/layout'.format(url_namespace),
diff --git a/tests/test_authentication.py b/tests/test_authentication.py
new file mode 100644
index 00000000..b23db02b
--- /dev/null
+++ b/tests/test_authentication.py
@@ -0,0 +1,29 @@
+import time
+import unittest
+import dash
+import plotly
+import dash_html_components as html
+from dash import authentication, plotly_api
+import Cookie
+import mock
+
+
+
+
+class LoginFlow(unittest.TestCase):
+    def login_success(self):
+        app = dash.Dash()
+        app.layout = html.Div()
+        client = app.server.test_client()
+        csrf_token = get_cookie(client.get('/'), '_csrf_token')
+        client.set_cookie('/', '_csrf_token', csrf_token)
+        oauth_token = users['creator']['oauth_token']
+        res = client.post('_login', headers={
+            'Authorization': 'Bearer {}'.format(oauth_token),
+            'X-CSRFToken': csrf_token
+        })
+        self.assertEqual(res.status_code, 200)
+        self.assertEqual(
+            get_cookie(res, 'plotly_dash_oauth_token'),
+            token
+        )
