commit 3238ef327908253ce545adad4e660b0762275c38
Author: Pravendra Singh <hackpravj@gmail.com>
Date:   Wed Apr 19 21:53:39 2017 +0530

    Initial set of changes using 2to3 conversion

diff --git a/dash/__init__.py b/dash/__init__.py
index 4caca333..b83224bb 100644
--- a/dash/__init__.py
+++ b/dash/__init__.py
@@ -1,3 +1,3 @@
-from dash import Dash
-import development
-from version import __version__
+from .dash import Dash
+from . import development
+from .version import __version__
diff --git a/dash/dash.py b/dash/dash.py
index f8819d7d..fd3e29e2 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -5,12 +5,13 @@ from flask import Flask, url_for, send_from_directory, Response
 from flask_compress import Compress
 import os
 import importlib
-from resources import Scripts, Css
-from development.base_component import Component
+from .resources import Scripts, Css
+from .development.base_component import Component
 import pkgutil
 import dash_renderer
-from dependencies import Event, Input, Output, State
-import exceptions
+from .dependencies import Event, Input, Output, State
+from . import exceptions
+import collections
 
 
 class Dash(object):
@@ -87,14 +88,14 @@ class Dash(object):
         return self._layout
 
     def _layout_value(self):
-        if callable(self._layout):
+        if isinstance(self._layout, collections.Callable):
             return self._layout()
         else:
             return self._layout
 
     @layout.setter
     def layout(self, value):
-        if not isinstance(value, Component) and not callable(value):
+        if not isinstance(value, Component) and not isinstance(value, collections.Callable):
             raise Exception(
                 ''
                 'Layout must be a dash component '
@@ -150,7 +151,7 @@ class Dash(object):
         srcs = []
         for resource in resources:
             if 'relative_package_path' in resource:
-                if isinstance(resource['relative_package_path'], basestring):
+                if isinstance(resource['relative_package_path'], str):
                     srcs.append(_relative_url_path(**resource))
                 else:
                     for rel_path in resource['relative_package_path']:
@@ -159,7 +160,7 @@ class Dash(object):
                             namespace=resource['namespace']
                         ))
             elif 'external_url' in resource:
-                if isinstance(resource['external_url'], basestring):
+                if isinstance(resource['external_url'], str):
                     srcs.append(resource['external_url'])
                 else:
                     for url in resource['external_url']:
@@ -208,7 +209,7 @@ class Dash(object):
                 'Error loading dependency.\n'
                 '"{}" is not a registered library.\n'
                 'Registered libraries are: {}'
-                .format(package_name, self.registered_paths.keys()))
+                .format(package_name, list(self.registered_paths.keys())))
 
         elif (path_in_package_dist not in self.registered_paths[package_name]):
             raise Exception(
@@ -262,7 +263,7 @@ class Dash(object):
                 'inputs': v['inputs'],
                 'state': v['state'],
                 'events': v['events']
-            } for k, v in self.callback_map.iteritems()
+            } for k, v in list(self.callback_map.items())
         ])
 
     def react(self, *args, **kwargs):
@@ -322,7 +323,7 @@ class Dash(object):
                     '''.format(
                         arg.component_id,
                         arg.component_id,
-                        layout.keys() + (
+                        list(layout.keys()) + (
                             [] if not hasattr(layout, 'id') else
                             [layout.id]
                         )
diff --git a/dash/development/__init__.py b/dash/development/__init__.py
index 0b65047d..07389f51 100644
--- a/dash/development/__init__.py
+++ b/dash/development/__init__.py
@@ -1,2 +1,2 @@
-import base_component
-import component_loader
+from . import base_component
+from . import component_loader
diff --git a/dash/development/base_component.py b/dash/development/base_component.py
index b9a0f24e..75b7523e 100644
--- a/dash/development/base_component.py
+++ b/dash/development/base_component.py
@@ -14,7 +14,7 @@ def is_number(s):
 
 class Component(collections.MutableMapping):
     def __init__(self, **kwargs):
-        for k, v in kwargs.iteritems():
+        for k, v in list(kwargs.items()):
             if k not in self._prop_names:
                 # TODO - What's the right exception here?
                 raise Exception(
@@ -233,7 +233,7 @@ def generate_class(typename, props, description, namespace):
     '''
 
     filtered_props = reorder_props(filter_props(props))
-    list_of_valid_keys = repr(filtered_props.keys())
+    list_of_valid_keys = repr(list(filtered_props.keys()))
     docstring = create_docstring(
         typename,
         filtered_props,
@@ -253,13 +253,13 @@ def generate_class(typename, props, description, namespace):
     d = c.format(**locals())
 
     scope = {'Component': Component}
-    exec d in scope
+    exec(d, scope)
     result = scope[typename]
     return result
 
 
 def required_props(props):
-    return [prop_name for prop_name, prop in props.iteritems()
+    return [prop_name for prop_name, prop in list(props.items())
             if prop['required']]
 
 
@@ -269,7 +269,7 @@ def reorder_props(props):
     if 'content' in props:
         props = collections.OrderedDict(
             [('content', props.pop('content'), )] +
-            zip(props.keys(), props.values())
+            list(zip(list(props.keys()), list(props.values())))
         )
     return props
 
@@ -287,7 +287,7 @@ def create_docstring(name, props, events, description):
     if 'content' in props:
         props = collections.OrderedDict(
             [['content', props.pop('content')]] +
-            zip(props.keys(), props.values())
+            list(zip(list(props.keys()), list(props.values())))
         )
     return '''A {name} component.{description}
 
@@ -300,7 +300,7 @@ def create_docstring(name, props, events, description):
         args='\n'.join(
             ['- {}'.format(argument_doc(
                 p, prop['type'], prop['required'], prop['description']
-            )) for p, prop in filter_props(props).iteritems()]
+            )) for p, prop in list(filter_props(props).items())]
         ),
         events=', '.join(events)
     ).replace('    ', '')
@@ -308,7 +308,7 @@ def create_docstring(name, props, events, description):
 
 def filter_props(args):
     filtered_args = copy.deepcopy(args)
-    for arg_name, arg in filtered_args.iteritems():
+    for arg_name, arg in list(filtered_args.items()):
         if 'type' not in arg:
             filtered_args.pop(arg_name)
             continue
@@ -368,7 +368,7 @@ def js_to_py_type(type_object):
         'shape': lambda: (
             'dict containing keys {}.\n{}'.format(
                 ', '.join(
-                    ["'{}'".format(t) for t in type_object['value'].keys()]
+                    ["'{}'".format(t) for t in list(type_object['value'].keys())]
                 ),
                 'Those keys have the following types: \n{}'.format(
                     '\n'.join([
@@ -378,7 +378,7 @@ def js_to_py_type(type_object):
                             prop['required'],
                             prop.get('description', '')
                         ) for
-                        prop_name, prop in type_object['value'].iteritems()
+                        prop_name, prop in list(type_object['value'].items())
                     ])
                 )
             )
diff --git a/dash/development/component_loader.py b/dash/development/component_loader.py
index 391994fd..e8df9fa9 100644
--- a/dash/development/component_loader.py
+++ b/dash/development/component_loader.py
@@ -1,4 +1,4 @@
-from base_component import generate_class
+from .base_component import generate_class
 import collections
 import json
 
diff --git a/dash/resources.py b/dash/resources.py
index 601d47c9..162c2c02 100644
--- a/dash/resources.py
+++ b/dash/resources.py
@@ -1,6 +1,7 @@
 from copy import copy
-from development.base_component import Component
+from .development.base_component import Component
 import warnings
+import collections
 
 
 class Resources():
@@ -61,7 +62,7 @@ class Resources():
     def get_inferred_resources(self):
         namespaces = []
         resources = []
-        if callable(self.layout):
+        if isinstance(self.layout, collections.Callable):
             layout = self.layout()
         else:
             layout = self.layout
