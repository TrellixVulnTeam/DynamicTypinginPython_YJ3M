commit 81f4726feb20b45fbae0d3288938449689002d01
Author: chriddyp <chriddyp@users.noreply.github.com>
Date:   Tue Jun 6 17:39:04 2017 -0400

    Replace `content` with `children` (#58)

diff --git a/dash/development/base_component.py b/dash/development/base_component.py
index 75b7523e..c3ee3dd1 100644
--- a/dash/development/base_component.py
+++ b/dash/development/base_component.py
@@ -36,54 +36,54 @@ class Component(collections.MutableMapping):
 
         return as_json
 
-    def _check_if_has_indexable_content(self, item):
-        if (not hasattr(item, 'content') or
-                (not isinstance(item.content, Component) and
-                 not isinstance(item.content, collections.MutableSequence))):
+    def _check_if_has_indexable_children(self, item):
+        if (not hasattr(item, 'children') or
+                (not isinstance(item.children, Component) and
+                 not isinstance(item.children, collections.MutableSequence))):
 
             raise KeyError
 
     def _get_set_or_delete(self, id, operation, new_item=None):
-        self._check_if_has_indexable_content(self)
+        self._check_if_has_indexable_children(self)
 
-        if isinstance(self.content, Component):
-            if getattr(self.content, 'id', None) is not None:
+        if isinstance(self.children, Component):
+            if getattr(self.children, 'id', None) is not None:
                 # Woohoo! It's the item that we're looking for
-                if self.content.id == id:
+                if self.children.id == id:
                     if operation == 'get':
-                        return self.content
+                        return self.children
                     elif operation == 'set':
-                        self.content = new_item
+                        self.children = new_item
                         return
                     elif operation == 'delete':
-                        self.content = None
+                        self.children = None
                         return
 
             # Recursively dig into its subtree
             try:
                 if operation == 'get':
-                    return self.content.__getitem__(id)
+                    return self.children.__getitem__(id)
                 elif operation == 'set':
-                    self.content.__setitem__(id, new_item)
+                    self.children.__setitem__(id, new_item)
                     return
                 elif operation == 'delete':
-                    self.content.__delitem__(id)
+                    self.children.__delitem__(id)
                     return
             except KeyError:
                 pass
 
-        # if content is like a list
-        if isinstance(self.content, collections.MutableSequence):
-            for (i, item) in enumerate(self.content):
+        # if children is like a list
+        if isinstance(self.children, collections.MutableSequence):
+            for (i, item) in enumerate(self.children):
                 # If the item itself is the one we're looking for
                 if getattr(item, 'id', None) == id:
                     if operation == 'get':
                         return item
                     elif operation == 'set':
-                        self.content[i] = new_item
+                        self.children[i] = new_item
                         return
                     elif operation == 'delete':
-                        del self.content[i]
+                        del self.children[i]
                         return
 
                 # Otherwise, recursively dig into that item's subtree
@@ -114,10 +114,10 @@ class Component(collections.MutableMapping):
 
     def __getitem__(self, id):
         '''Recursively find the element with the given ID through the tree
-        of content.
+        of children.
         '''
-        # TODO - Rename content to children
-        # A component's content can be undefined, a string, another component,
+
+        # A component's children can be undefined, a string, another component,
         # or a list of components.
         return self._get_set_or_delete(id, 'get')
 
@@ -127,24 +127,24 @@ class Component(collections.MutableMapping):
         return self._get_set_or_delete(id, 'set', item)
 
     def __delitem__(self, id):
-        '''Delete items by ID in the tree of content
+        '''Delete items by ID in the tree of children
         '''
         return self._get_set_or_delete(id, 'delete')
 
 
     def traverse(self):
         '''Yield each item in the tree'''
-        content = getattr(self, 'content', None)
+        children = getattr(self, 'children', None)
 
-        # content is just a component
-        if isinstance(content, Component):
-            yield content
-            for t in content.traverse():
+        # children is just a component
+        if isinstance(children, Component):
+            yield children
+            for t in children.traverse():
                 yield t
 
-        # content is a list of components
-        elif isinstance(content, collections.MutableSequence):
-            for i in content:
+        # children is a list of components
+        elif isinstance(children, collections.MutableSequence):
+            for i in children:
                 yield i
 
                 if isinstance(i, Component):
@@ -152,7 +152,7 @@ class Component(collections.MutableMapping):
                         yield t
 
     def __iter__(self):
-        '''Yield IDs in the tree of content
+        '''Yield IDs in the tree of children
         '''
         for t in self.traverse():
             if (isinstance(t, Component) and
@@ -169,13 +169,13 @@ class Component(collections.MutableMapping):
         # The number of items is more intuitive but returning the number
         # of IDs matches __iter__ better.
         length = 0
-        if getattr(self, 'content', None) is None:
+        if getattr(self, 'children', None) is None:
             length = 0
-        elif isinstance(self.content, Component):
+        elif isinstance(self.children, Component):
             length = 1
-            length += len(self.content)
-        elif isinstance(self.content, collections.MutableSequence):
-            for c in self.content:
+            length += len(self.children)
+        elif isinstance(self.children, collections.MutableSequence):
+            for c in self.children:
                 length += 1
                 if isinstance(c, Component):
                     length += len(c)
@@ -241,9 +241,9 @@ def generate_class(typename, props, description, namespace):
         description
     )
     events = "[" + ', '.join(parse_events(props)) + "]"
-    if 'content' in props:
-        default_argtext = 'content=None, **kwargs'
-        argtext = 'content=content, **kwargs'
+    if 'children' in props:
+        default_argtext = 'children=None, **kwargs'
+        argtext = 'children=children, **kwargs'
     else:
         default_argtext = '**kwargs'
         argtext = '**kwargs'
@@ -264,11 +264,11 @@ def required_props(props):
 
 
 def reorder_props(props):
-    # If "content" is a prop, then move it to the front to respect
+    # If "children" is a prop, then move it to the front to respect
     # dash convention
-    if 'content' in props:
+    if 'children' in props:
         props = collections.OrderedDict(
-            [('content', props.pop('content'), )] +
+            [('children', props.pop('children'), )] +
             list(zip(list(props.keys()), list(props.values())))
         )
     return props
@@ -284,9 +284,9 @@ def parse_events(props):
 
 
 def create_docstring(name, props, events, description):
-    if 'content' in props:
+    if 'children' in props:
         props = collections.OrderedDict(
-            [['content', props.pop('content')]] +
+            [['children', props.pop('children')]] +
             list(zip(list(props.keys()), list(props.values())))
         )
     return '''A {name} component.{description}
diff --git a/dash/development/component_loader.py b/dash/development/component_loader.py
index e8df9fa9..edacc00b 100644
--- a/dash/development/component_loader.py
+++ b/dash/development/component_loader.py
@@ -7,7 +7,7 @@ def load_components(metadata_path,
                     namespace='default_namespace'):
     """Load React component metadata into a format Dash can parse.
 
-    Usage: load_components('../../component-suites/lib/metadata.json', ['content', 'id', 'key', 'className', 'style', 'dependencies'])
+    Usage: load_components('../../component-suites/lib/metadata.json')
 
     Keyword arguments:
     metadata_path -- a path to a JSON file created by [`react-docgen`](https://github.com/reactjs/react-docgen).
diff --git a/tests/development/TestReactComponent.react.js b/tests/development/TestReactComponent.react.js
index 49303498..5c45fed8 100644
--- a/tests/development/TestReactComponent.react.js
+++ b/tests/development/TestReactComponent.react.js
@@ -93,8 +93,7 @@ ReactComponent.propTypes = {
 
     // special dash events
 
-    // TODO - Rename to children
-    content: React.PropTypes.node,
+    children: React.PropTypes.node,
 
     id: React.PropTypes.string,
 
diff --git a/tests/development/TestReactComponentRequired.react.js b/tests/development/TestReactComponentRequired.react.js
index 0c24eda7..a08b0f0d 100644
--- a/tests/development/TestReactComponentRequired.react.js
+++ b/tests/development/TestReactComponentRequired.react.js
@@ -12,7 +12,7 @@ class ReactComponent extends Component {
 }
 
 ReactComponent.propTypes = {
-    content: React.PropTypes.node,
+    children: React.PropTypes.node,
     id: React.PropTypes.string.isRequired,
 };
 
diff --git a/tests/development/metadata_required_test.json b/tests/development/metadata_required_test.json
index 6afc8021..9b2caa62 100644
--- a/tests/development/metadata_required_test.json
+++ b/tests/development/metadata_required_test.json
@@ -2,7 +2,7 @@
   "description": "This is a description of the component.\nIt's multiple lines long.",
   "methods": [],
   "props": {
-    "content": {
+    "children": {
       "type": {
         "name": "node"
       },
@@ -17,4 +17,4 @@
       "description": ""
     }
   }
-}
\ No newline at end of file
+}
diff --git a/tests/development/metadata_test.json b/tests/development/metadata_test.json
index 341924ad..d7447995 100644
--- a/tests/development/metadata_test.json
+++ b/tests/development/metadata_test.json
@@ -200,7 +200,7 @@
       "required": false,
       "description": ""
     },
-    "content": {
+    "children": {
       "type": {
         "name": "node"
       },
@@ -236,4 +236,4 @@
       "description": ""
     }
   }
-}
\ No newline at end of file
+}
diff --git a/tests/development/test_base_component.py b/tests/development/test_base_component.py
index 38f96ed6..304424a1 100644
--- a/tests/development/test_base_component.py
+++ b/tests/development/test_base_component.py
@@ -16,39 +16,39 @@ import json
 import os
 
 
-Component._prop_names = ('id', 'a', 'content', 'style', )
+Component._prop_names = ('id', 'a', 'children', 'style', )
 Component._type = 'TestComponent'
 Component._namespace = 'test_namespace'
 
 
 def nested_tree():
     '''This tree has a few unique properties:
-    - Content is mixed strings and components (as in c2)
-    - Content is just components (as in c)
-    - Content is just strings (as in c1)
-    - Content is just a single component (as in c3, c4)
-    - Content contains numbers (as in c2)
-    - Content contains "None" items (as in c2)
+    - children is mixed strings and components (as in c2)
+    - children is just components (as in c)
+    - children is just strings (as in c1)
+    - children is just a single component (as in c3, c4)
+    - children contains numbers (as in c2)
+    - children contains "None" items (as in c2)
     '''
     c1 = Component(
         id='0.1.x.x.0',
-        content='string'
+        children='string'
     )
     c2 = Component(
         id='0.1.x.x',
-        content=[10, None, 'wrap string', c1, 'another string', 4.51]
+        children=[10, None, 'wrap string', c1, 'another string', 4.51]
     )
     c3 = Component(
         id='0.1.x',
-        # content is just a component
-        content=c2
+        # children is just a component
+        children=c2
     )
     c4 = Component(
         id='0.1',
-        content=c3
+        children=c3
     )
     c5 = Component(id='0.0')
-    c = Component(id='0', content=[c5, c4])
+    c = Component(id='0', children=[c5, c4])
     return c, c1, c2, c3, c4, c5
 
 
@@ -56,30 +56,30 @@ class TestComponent(unittest.TestCase):
     def test_init(self):
         c = Component(a=3)
 
-    def test_get_item_with_content(self):
+    def test_get_item_with_children(self):
         c1 = Component(id='1')
-        c2 = Component(content=[c1])
+        c2 = Component(children=[c1])
         self.assertEqual(c2['1'], c1)
 
-    def test_get_item_with_content_as_component_instead_of_list(self):
+    def test_get_item_with_children_as_component_instead_of_list(self):
         c1 = Component(id='1')
-        c2 = Component(id='2', content=c1)
+        c2 = Component(id='2', children=c1)
         self.assertEqual(c2['1'], c1)
 
-    def test_get_item_with_nested_content_one_branch(self):
+    def test_get_item_with_nested_children_one_branch(self):
         c1 = Component(id='1')
-        c2 = Component(id='2', content=[c1])
-        c3 = Component(content=[c2])
+        c2 = Component(id='2', children=[c1])
+        c3 = Component(children=[c2])
         self.assertEqual(c2['1'], c1)
         self.assertEqual(c3['2'], c2)
         self.assertEqual(c3['1'], c1)
 
-    def test_get_item_with_nested_content_two_branches(self):
+    def test_get_item_with_nested_children_two_branches(self):
         c1 = Component(id='1')
-        c2 = Component(id='2', content=[c1])
+        c2 = Component(id='2', children=[c1])
         c3 = Component(id='3')
-        c4 = Component(id='4', content=[c3])
-        c5 = Component(content=[c2, c4])
+        c4 = Component(id='4', children=[c3])
+        c5 = Component(children=[c2, c4])
         self.assertEqual(c2['1'], c1)
         self.assertEqual(c4['3'], c3)
         self.assertEqual(c5['2'], c2)
@@ -87,7 +87,7 @@ class TestComponent(unittest.TestCase):
         self.assertEqual(c5['1'], c1)
         self.assertEqual(c5['3'], c3)
 
-    def test_get_item_with_nested_content_with_mixed_strings_and_without_lists(self):
+    def test_get_item_with_nested_children_with_mixed_strings_and_without_lists(self):
         c, c1, c2, c3, c4, c5 = nested_tree()
         self.assertEqual(
             list(c.keys()),
@@ -108,7 +108,7 @@ class TestComponent(unittest.TestCase):
         with self.assertRaises(KeyError):
             c['x']
 
-    def test_len_with_nested_content_with_mixed_strings_and_without_lists(self):
+    def test_len_with_nested_children_with_mixed_strings_and_without_lists(self):
         c = nested_tree()[0]
         self.assertEqual(
             len(c),
@@ -117,7 +117,7 @@ class TestComponent(unittest.TestCase):
             1# c1 has 1 string
         )
 
-    def test_set_item_with_nested_content_with_mixed_strings_and_without_lists(self):
+    def test_set_item_with_nested_children_with_mixed_strings_and_without_lists(self):
         keys = [
             '0.0',
             '0.1',
@@ -132,12 +132,12 @@ class TestComponent(unittest.TestCase):
             new_id = 'new {}'.format(key)
             new_component = Component(
                 id=new_id,
-                content='new string'
+                children='new string'
             )
             c[key] = new_component
             self.assertEqual(c[new_id], new_component)
 
-    def test_del_item_with_nested_content_with_mixed_strings_and_without_lists(self):
+    def test_del_item_with_nested_children_with_mixed_strings_and_without_lists(self):
         c = nested_tree()[0]
         for key in reversed(list(c.keys())):
             c[key]
@@ -145,22 +145,22 @@ class TestComponent(unittest.TestCase):
             with self.assertRaises(KeyError):
                 c[key]
 
-    def test_traverse_with_nested_content_with_mixed_strings_and_without_lists(self):
+    def test_traverse_with_nested_children_with_mixed_strings_and_without_lists(self):
         c, c1, c2, c3, c4, c5 = nested_tree()
         elements = [i for i in c.traverse()]
         self.assertEqual(
             elements,
-            c.content + [c3] + [c2] + c2.content
+            c.children + [c3] + [c2] + c2.children
         )
 
-    def test_iter_with_nested_content_with_mixed_strings_and_without_lists(self):
+    def test_iter_with_nested_children_with_mixed_strings_and_without_lists(self):
         c = nested_tree()[0]
         keys = list(c.keys())
         # get a list of ids that __iter__ provides
         iter_keys = [i for i in c]
         self.assertEqual(keys, iter_keys)
 
-    def test_to_plotly_json_with_nested_content_with_mixed_strings_and_without_lists(self):
+    def test_to_plotly_json_with_nested_children_with_mixed_strings_and_without_lists(self):
         c = nested_tree()[0]
         n = Component._namespace
         t = Component._type
@@ -172,7 +172,7 @@ class TestComponent(unittest.TestCase):
             'type': 'TestComponent',
             'namespace': 'test_namespace',
             'props': {
-                'content': [
+                'children': [
                     {
                         'type': 'TestComponent',
                         'namespace': 'test_namespace',
@@ -184,15 +184,15 @@ class TestComponent(unittest.TestCase):
                         'type': 'TestComponent',
                         'namespace': 'test_namespace',
                         'props': {
-                            'content': {
+                            'children': {
                                 'type': 'TestComponent',
                                 'namespace': 'test_namespace',
                                 'props': {
-                                    'content': {
+                                    'children': {
                                         'type': 'TestComponent',
                                         'namespace': 'test_namespace',
                                         'props': {
-                                            'content': [
+                                            'children': [
                                                 10,
                                                 None,
                                                 'wrap string',
@@ -200,7 +200,7 @@ class TestComponent(unittest.TestCase):
                                                     'type': 'TestComponent',
                                                     'namespace': 'test_namespace',
                                                     'props': {
-                                                        'content': 'string',
+                                                        'children': 'string',
                                                         'id': '0.1.x.x.0'
                                                     }
                                                 },
@@ -230,11 +230,11 @@ class TestComponent(unittest.TestCase):
         with self.assertRaises(KeyError):
             c1['1']
 
-        c2 = Component(id='2', content=[c1])
+        c2 = Component(id='2', children=[c1])
         with self.assertRaises(KeyError):
             c2['0']
 
-        c3 = Component(content='string with no id')
+        c3 = Component(children='string with no id')
         with self.assertRaises(KeyError):
             c3['0']
 
@@ -245,32 +245,32 @@ class TestComponent(unittest.TestCase):
         self.assertTrue(Component() is not Component())
 
         c1 = Component(id='1')
-        c2 = Component(id='2', content=[Component()])
+        c2 = Component(id='2', children=[Component()])
         self.assertTrue(c1 == c2)
         self.assertTrue(c1 is not c2)
 
     def test_set_item(self):
-        c1a = Component(id='1', content='Hello world')
-        c2 = Component(id='2', content=c1a)
+        c1a = Component(id='1', children='Hello world')
+        c2 = Component(id='2', children=c1a)
         self.assertEqual(c2['1'], c1a)
-        c1b = Component(id='1', content='Brave new world')
+        c1b = Component(id='1', children='Brave new world')
         c2['1'] = c1b
         self.assertEqual(c2['1'], c1b)
 
-    def test_set_item_with_content_as_list(self):
+    def test_set_item_with_children_as_list(self):
         c1 = Component(id='1')
-        c2 = Component(id='2', content=[c1])
+        c2 = Component(id='2', children=[c1])
         self.assertEqual(c2['1'], c1)
         c3 = Component(id='3')
         c2['1'] = c3
         self.assertEqual(c2['3'], c3)
 
-    def test_set_item_with_nested_content(self):
+    def test_set_item_with_nested_children(self):
         c1 = Component(id='1')
-        c2 = Component(id='2', content=[c1])
+        c2 = Component(id='2', children=[c1])
         c3 = Component(id='3')
-        c4 = Component(id='4', content=[c3])
-        c5 = Component(id='5', content=[c2, c4])
+        c4 = Component(id='4', children=[c3])
+        c5 = Component(id='5', children=[c2, c4])
 
         c3b = Component(id='3')
         self.assertEqual(c5['3'], c3)
@@ -291,37 +291,37 @@ class TestComponent(unittest.TestCase):
 
     def test_set_item_raises_key_error(self):
         c1 = Component(id='1')
-        c2 = Component(id='2', content=[c1])
+        c2 = Component(id='2', children=[c1])
         with self.assertRaises(KeyError):
             c2['3'] = Component(id='3')
 
     def test_del_item_from_list(self):
         c1 = Component(id='1')
         c2 = Component(id='2')
-        c3 = Component(id='3', content=[c1, c2])
+        c3 = Component(id='3', children=[c1, c2])
         self.assertEqual(c3['1'], c1)
         self.assertEqual(c3['2'], c2)
         del c3['2']
         with self.assertRaises(KeyError):
             c3['2']
-        self.assertEqual(c3.content, [c1])
+        self.assertEqual(c3.children, [c1])
 
         del c3['1']
         with self.assertRaises(KeyError):
             c3['1']
-        self.assertEqual(c3.content, [])
+        self.assertEqual(c3.children, [])
 
     def test_del_item_from_class(self):
         c1 = Component(id='1')
-        c2 = Component(id='2', content=c1)
+        c2 = Component(id='2', children=c1)
         self.assertEqual(c2['1'], c1)
         del c2['1']
         with self.assertRaises(KeyError):
             c2['1']
 
-        self.assertEqual(c2.content, None)
+        self.assertEqual(c2.children, None)
 
-    def test_to_plotly_json_without_content(self):
+    def test_to_plotly_json_without_children(self):
         c = Component(id='a')
         c._prop_names = ('id',)
         c._type = 'MyComponent'
@@ -353,9 +353,9 @@ class TestComponent(unittest.TestCase):
             }
         )
 
-    def test_to_plotly_json_with_content(self):
-        c = Component(id='a', content='Hello World')
-        c._prop_names = ('id', 'content',)
+    def test_to_plotly_json_with_children(self):
+        c = Component(id='a', children='Hello World')
+        c._prop_names = ('id', 'children',)
         c._type = 'MyComponent'
         c._namespace = 'basic'
         self.assertEqual(
@@ -364,40 +364,40 @@ class TestComponent(unittest.TestCase):
                 'namespace': 'basic',
                 'props': {
                     'id': 'a',
-                    # TODO - Rename 'content' to 'children'
-                    'content': 'Hello World'
+                    # TODO - Rename 'children' to 'children'
+                    'children': 'Hello World'
                 },
                 'type': 'MyComponent'
             }
         )
 
-    def test_to_plotly_json_with_nested_content(self):
-        c1 = Component(id='1', content='Hello World')
-        c1._prop_names = ('id', 'content',)
+    def test_to_plotly_json_with_nested_children(self):
+        c1 = Component(id='1', children='Hello World')
+        c1._prop_names = ('id', 'children',)
         c1._type = 'MyComponent'
         c1._namespace = 'basic'
 
-        c2 = Component(id='2', content=c1)
-        c2._prop_names = ('id', 'content',)
+        c2 = Component(id='2', children=c1)
+        c2._prop_names = ('id', 'children',)
         c2._type = 'MyComponent'
         c2._namespace = 'basic'
 
-        c3 = Component(id='3', content='Hello World')
-        c3._prop_names = ('id', 'content',)
+        c3 = Component(id='3', children='Hello World')
+        c3._prop_names = ('id', 'children',)
         c3._type = 'MyComponent'
         c3._namespace = 'basic'
 
-        c4 = Component(id='4', content=[c2, c3])
-        c4._prop_names = ('id', 'content',)
+        c4 = Component(id='4', children=[c2, c3])
+        c4._prop_names = ('id', 'children',)
         c4._type = 'MyComponent'
         c4._namespace = 'basic'
 
-        def to_dict(id, content):
+        def to_dict(id, children):
             return {
                 'namespace': 'basic',
                 'props': {
                     'id': id,
-                    'content': content
+                    'children': children
                 },
                 'type': 'MyComponent'
             }
@@ -415,11 +415,11 @@ class TestComponent(unittest.TestCase):
 
     def test_len(self):
         self.assertEqual(len(Component()), 0)
-        self.assertEqual(len(Component(content='Hello World')), 1)
-        self.assertEqual(len(Component(content=Component())), 1)
-        self.assertEqual(len(Component(content=[Component(), Component()])), 2)
-        self.assertEqual(len(Component(content=[
-            Component(content=Component()),
+        self.assertEqual(len(Component(children='Hello World')), 1)
+        self.assertEqual(len(Component(children=Component())), 1)
+        self.assertEqual(len(Component(children=[Component(), Component()])), 2)
+        self.assertEqual(len(Component(children=[
+            Component(children=Component()),
             Component()
         ])), 3)
 
@@ -430,17 +430,17 @@ class TestComponent(unittest.TestCase):
 
         c = Component(
             id='1',
-            content=[
-                Component(id='2', content=[
-                    Component(id='3', content=Component(id='4'))
+            children=[
+                Component(id='2', children=[
+                    Component(id='3', children=Component(id='4'))
                 ]),
-                Component(id='5', content=[
-                    Component(id='6', content='Hello World')
+                Component(id='5', children=[
+                    Component(id='6', children='Hello World')
                 ]),
                 Component(),
-                Component(content='Hello World'),
-                Component(content=Component(id='7')),
-                Component(content=[Component(id='8')]),
+                Component(children='Hello World'),
+                Component(children=Component(id='7')),
+                Component(children=[Component(id='8')]),
             ]
         )
         # test keys()
@@ -463,7 +463,7 @@ class TestComponent(unittest.TestCase):
 
     def test_pop(self):
         c2 = Component(id='2')
-        c = Component(id='1', content=c2)
+        c = Component(id='1', children=c2)
         c2_popped = c.pop('2')
         self.assertTrue('2' not in c)
         self.assertTrue(c2_popped is c2)
@@ -509,7 +509,7 @@ class TestGenerateClass(unittest.TestCase):
             'namespace': 'TableComponents',
             'type': 'Table',
             'props': {
-                'content': None
+                'children': None
             }
         })
 
@@ -518,7 +518,7 @@ class TestGenerateClass(unittest.TestCase):
             'namespace': 'TableComponents',
             'type': 'Table',
             'props': {
-                'content': None,
+                'children': None,
                 'id': 'my-id'
             }
         })
@@ -528,7 +528,7 @@ class TestGenerateClass(unittest.TestCase):
             'namespace': 'TableComponents',
             'type': 'Table',
             'props': {
-                'content': None,
+                'children': None,
                 'id': 'my-id',
                 'optionalArray': None
             }
@@ -537,7 +537,7 @@ class TestGenerateClass(unittest.TestCase):
     def test_arguments_become_attributes(self):
         kwargs = {
             'id': 'my-id',
-            'content': 'text content',
+            'children': 'text children',
             'optionalArray': [[1, 2, 3]]
         }
         component_instance = self.ComponentClass(**kwargs)
@@ -545,15 +545,15 @@ class TestGenerateClass(unittest.TestCase):
             self.assertEqual(getattr(component_instance, k), v)
 
     def test_repr_single_default_argument(self):
-        c1 = self.ComponentClass('text content')
-        c2 = self.ComponentClass(content='text content')
+        c1 = self.ComponentClass('text children')
+        c2 = self.ComponentClass(children='text children')
         self.assertEqual(
             repr(c1),
-            "Table('text content')"
+            "Table('text children')"
         )
         self.assertEqual(
             repr(c2),
-            "Table('text content')"
+            "Table('text children')"
         )
 
     def test_repr_single_non_default_argument(self):
@@ -574,11 +574,11 @@ class TestGenerateClass(unittest.TestCase):
 
     def test_repr_nested_arguments(self):
         c1 = self.ComponentClass(id='1')
-        c2 = self.ComponentClass(id='2', content=c1)
-        c3 = self.ComponentClass(content=c2)
+        c2 = self.ComponentClass(id='2', children=c1)
+        c3 = self.ComponentClass(children=c2)
         self.assertEqual(
             repr(c3),
-            "Table(Table(content=Table(id='1'), id='2'))"
+            "Table(Table(children=Table(id='1'), id='2'))"
         )
 
     def test_docstring(self):
@@ -595,7 +595,7 @@ class TestGenerateClass(unittest.TestCase):
         # http://stackoverflow.com/questions/2677185/
         self.assertEqual(
             inspect.getargspec(self.ComponentClass.__init__).args,
-            ['self', 'content']
+            ['self', 'children']
         )
         self.assertEqual(
             inspect.getargspec(self.ComponentClass.__init__).defaults,
@@ -610,7 +610,7 @@ class TestGenerateClass(unittest.TestCase):
         with self.assertRaises(Exception):
             self.ComponentClassRequired(id='test', lahlah='test')
         with self.assertRaises(Exception):
-            self.ComponentClassRequired(content='test')
+            self.ComponentClassRequired(children='test')
 
 class TestMetaDataConversions(unittest.TestCase):
     def setUp(self):
@@ -623,7 +623,7 @@ class TestMetaDataConversions(unittest.TestCase):
             self.data = data
 
         self.expected_arg_strings = OrderedDict([
-            ['content', 'a list of or a singular dash component, string or number'],
+            ['children', 'a list of or a singular dash component, string or number'],
 
             ['optionalArray', 'list'],
 
@@ -707,7 +707,7 @@ def assert_docstring(assertEqual, docstring):
             "It's multiple lines long.",
             '',
             "Keyword arguments:",
-            "- content (a list of or a singular dash component, string or number; optional)",
+            "- children (a list of or a singular dash component, string or number; optional)",
             "- optionalArray (list; optional): Description of optionalArray",
             "- optionalBool (boolean; optional)",
             "- optionalNumber (number; optional)",
diff --git a/tests/development/test_component_loader.py b/tests/development/test_component_loader.py
index 1b62edc8..61184fc8 100644
--- a/tests/development/test_component_loader.py
+++ b/tests/development/test_component_loader.py
@@ -21,11 +21,11 @@ METADATA_STRING = '''{
                     "computed": false
                 }
             },
-            "content": {
+            "children": {
                 "type": {
                     "name": "object"
                 },
-                "description": "Content - children",
+                "description": "Children",
                 "required": false
             },
             "bar": {
@@ -69,11 +69,11 @@ METADATA_STRING = '''{
                 "required": false,
                 "description": "The URL of a linked resource."
             },
-            "content": {
+            "children": {
                 "type": {
                     "name": "object"
                 },
-                "description": "Content - children",
+                "description": "Children",
                 "required": false
             }
         }
@@ -113,10 +113,10 @@ class TestLoadComponents(unittest.TestCase):
             'foo': 'Hello World',
             'bar': 'Lah Lah',
             'baz': 'Lemons',
-            'content': 'Child'
+            'children': 'Child'
         }
         AKwargs = {
-            'content': 'Child',
+            'children': 'Child',
             'href': 'Hello World'
         }
 
diff --git a/tests/test_react.py b/tests/test_react.py
index 6d0d0164..187923f8 100644
--- a/tests/test_react.py
+++ b/tests/test_react.py
@@ -130,7 +130,7 @@ class IntegrationTest(unittest.TestCase):
             self.assertEqual({'value': 'New Value'}, input1)
             new_value = input1['value']
             return {
-                'content': new_value,
+                'children': new_value,
                 'style.color': 'red',
                 'className': 'active',
                 'width': None
@@ -180,7 +180,7 @@ class IntegrationTest(unittest.TestCase):
             self.assertEqual({'value': 'New Value'}, input1)
             new_value = input1['value']
             return {
-                'content': Div('New Component')
+                'children': Div('New Component')
             }
 
         response = self.client.post(
@@ -215,7 +215,7 @@ class IntegrationTest(unittest.TestCase):
                         'type': 'Div',
                         'namespace': 'html_components',
                         'props': {
-                            'content': 'New Component'
+                            'children': 'New Component'
                         }
                     }
                 }
@@ -448,22 +448,22 @@ class TestCallbacks(unittest.TestCase):
         ], id='body')
 
         app.callback(
-            Output('output', 'content'),
+            Output('output', 'children'),
             [Input('input', 'value')]
         )
         app.callback(
-            Output('body', 'content'),
+            Output('body', 'children'),
             [Input('input', 'value')]
         )
         app.callback(
-            Output('body', 'content'),
+            Output('body', 'children'),
             [Input('input', 'value')],
             state=[State('input', 'value')],
         )
 
         # TODO - Add events
         app.callback(
-            Output('body', 'content'),
+            Output('body', 'children'),
             [Input('input', 'value')],
             state=[State('input', 'value')],
             events=[Event('input', 'blur')],
@@ -474,7 +474,7 @@ class TestCallbacks(unittest.TestCase):
         self.assertRaises(
             exceptions.LayoutIsNotDefined,
             app.callback,
-            Output('body', 'content'),
+            Output('body', 'children'),
             [Input('input', 'value')]
         )
 
@@ -484,7 +484,7 @@ class TestCallbacks(unittest.TestCase):
         self.assertRaises(
             exceptions.NonExistantIdException,
             app.callback,
-            Output('output', 'content'),
+            Output('output', 'children'),
             [Input('input', 'value')]
         )
 
@@ -505,14 +505,14 @@ class TestCallbacks(unittest.TestCase):
         self.assertRaises(
             exceptions.NonExistantPropException,
             app.callback,
-            Output('output', 'content'),
+            Output('output', 'children'),
             [Input('input', 'valuez')]
         )
 
         self.assertRaises(
             exceptions.NonExistantPropException,
             app.callback,
-            Output('body', 'contentz'),
+            Output('body', 'childrenz'),
             [Input('input', 'value')]
         )
 
@@ -528,22 +528,22 @@ class TestCallbacks(unittest.TestCase):
             self.assertRaises(
                 exceptions.NonExistantEventException,
                 app.callback,
-                Output('output', 'content'),
+                Output('output', 'children'),
                 events=[Event(id, 'style')]
             )
             app.callback(
-                Output('output', 'content'),
+                Output('output', 'children'),
                 events=[Event(id, 'click')]
             )
 
         self.assertRaises(
             exceptions.NonExistantEventException,
             app.callback,
-            Output('output', 'content'),
+            Output('output', 'children'),
             events=[Event('graph', 'zoom')]
         )
         app.callback(
-            Output('output', 'content'),
+            Output('output', 'children'),
             events=[Event('graph', 'click')]
         )
 
@@ -556,9 +556,9 @@ class TestCallbacks(unittest.TestCase):
 
         test_args = [
             ['asdf', ['asdf'], [], []],
-            [Output('output', 'content'), Input('input', 'value'), [], []],
-            [Output('output', 'content'), [], State('input', 'value'), []],
-            [Output('output', 'content'), [], [], Event('input', 'click')],
+            [Output('output', 'children'), Input('input', 'value'), [], []],
+            [Output('output', 'children'), [], State('input', 'value'), []],
+            [Output('output', 'children'), [], [], Event('input', 'click')],
         ]
         for args in test_args:
             self.assertRaises(
@@ -576,11 +576,11 @@ class TestCallbacks(unittest.TestCase):
         self.assertRaises(
             exceptions.NonExistantIdException,
             app.callback,
-            Output('id-not-there', 'content'),
+            Output('id-not-there', 'children'),
             [Input('input', 'value')]
         )
         app.config.supress_callback_exceptions = True
-        app.callback(Output('id-not-there', 'content'),
+        app.callback(Output('id-not-there', 'children'),
                      [Input('input', 'value')])
 
     def test_missing_input_and_events(self):
@@ -591,7 +591,7 @@ class TestCallbacks(unittest.TestCase):
         self.assertRaises(
             exceptions.MissingEventsException,
             app.callback,
-            Output('body', 'content'),
+            Output('body', 'children'),
             [],
             [State('input', 'value')]
         )
diff --git a/tests/test_resources.py b/tests/test_resources.py
index 5bbec54f..57de57de 100644
--- a/tests/test_resources.py
+++ b/tests/test_resources.py
@@ -5,9 +5,9 @@ import warnings
 
 
 def generate_components():
-    Div = generate_class('Div', ('content', 'id',), 'dash_html_components')
-    Span = generate_class('Span', ('content', 'id',), 'dash_html_components')
-    Input = generate_class('Input', ('content', 'id',), 'dash_core_components')
+    Div = generate_class('Div', ('children', 'id',), 'dash_html_components')
+    Span = generate_class('Span', ('children', 'id',), 'dash_html_components')
+    Input = generate_class('Input', ('children', 'id',), 'dash_core_components')
     return Div, Span, Input
 
 
