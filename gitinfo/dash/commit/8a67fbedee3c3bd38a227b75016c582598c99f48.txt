commit 8a67fbedee3c3bd38a227b75016c582598c99f48
Author: byron <byron@plot.ly>
Date:   Wed Jul 17 18:00:12 2019 -0400

    :construction: demo purpose for ryan

diff --git a/dash/testing/application_runners.py b/dash/testing/application_runners.py
index 5dc2d3fa..16b3626e 100644
--- a/dash/testing/application_runners.py
+++ b/dash/testing/application_runners.py
@@ -214,3 +214,57 @@ class ProcessRunner(BaseDashRunner):
                 )
                 self.proc.kill()
                 self.proc.communicate()
+
+
+class RRunner(BaseDashRunner):
+    """Runs a dashR application in process
+    """
+
+    def __init__(self, keep_open=False, stop_timeout=3):
+        super(RRunner, self).__init__(
+            keep_open=keep_open, stop_timeout=stop_timeout
+        )
+        self.proc = None
+
+    # pylint: disable=arguments-differ
+    def start(self):
+        """Start the server with waitress-serve in process flavor """
+        # entrypoint = "{}:{}.server".format(app_module, application_name)
+        # self.port = port
+
+        args = shlex.split(
+            "Rscript /Users/byron/code/demo.R",
+            posix=sys.platform != "win32",
+        )
+        logger.debug("start dash process with %s", args)
+
+        try:
+            self.proc = subprocess.Popen(
+                args, stdout=subprocess.PIPE, stderr=subprocess.PIPE
+            )
+        except (OSError, ValueError):
+            logger.exception("process server has encountered an error")
+            self.started = False
+            return
+
+        self.started = True
+
+    def stop(self):
+        if self.proc:
+            try:
+                self.proc.terminate()
+                if six.PY3:
+                    # pylint:disable=no-member
+                    _except = subprocess.TimeoutExpired
+                    # pylint: disable=unexpected-keyword-arg
+                    self.proc.communicate(timeout=self.stop_timeout)
+                else:
+                    _except = OSError
+                    self.proc.communicate()
+            except _except:
+                logger.exception(
+                    "subprocess terminate not success, trying to kill "
+                    "the subprocess in a safe manner"
+                )
+                self.proc.kill()
+                self.proc.communicate()
diff --git a/dash/testing/plugin.py b/dash/testing/plugin.py
index 1fba6b8d..e257c227 100644
--- a/dash/testing/plugin.py
+++ b/dash/testing/plugin.py
@@ -4,7 +4,11 @@ import warnings
 try:
     import pytest
 
-    from dash.testing.application_runners import ThreadedRunner, ProcessRunner
+    from dash.testing.application_runners import (
+        ThreadedRunner,
+        ProcessRunner,
+        RRunner,
+    )
     from dash.testing.browser import Browser
     from dash.testing.composite import DashComposite
 except ImportError:
@@ -26,9 +30,7 @@ def pytest_addoption(parser):
     )
 
     dash.addoption(
-        "--headless",
-        action="store_true",
-        help="Run tests in headless mode",
+        "--headless", action="store_true", help="Run tests in headless mode"
     )
 
 
@@ -79,13 +81,19 @@ def dash_process_server():
         yield starter
 
 
+@pytest.fixture
+def dashr_server():
+    with RRunner() as starter:
+        yield starter
+
+
 @pytest.fixture
 def dash_br(request, tmpdir):
     with Browser(
         browser=request.config.getoption("webdriver"),
         headless=request.config.getoption("headless"),
         options=request.config.hook.pytest_setup_options(),
-        download_path=tmpdir.mkdir('download').strpath
+        download_path=tmpdir.mkdir("download").strpath,
     ) as browser:
         yield browser
 
@@ -97,6 +105,6 @@ def dash_duo(request, dash_thread_server, tmpdir):
         browser=request.config.getoption("webdriver"),
         headless=request.config.getoption("headless"),
         options=request.config.hook.pytest_setup_options(),
-        download_path=tmpdir.mkdir('download').strpath
+        download_path=tmpdir.mkdir("download").strpath,
     ) as dc:
         yield dc
diff --git a/tests/integration/test_r.py b/tests/integration/test_r.py
new file mode 100644
index 00000000..efb8028e
--- /dev/null
+++ b/tests/integration/test_r.py
@@ -0,0 +1,8 @@
+
+
+def test_r_sample(dashr_server, dash_br):
+    dashr_server()
+    import time
+    time.sleep(2.5)
+    dash_br.server_url = dashr_server.url
+    time.sleep(600)
