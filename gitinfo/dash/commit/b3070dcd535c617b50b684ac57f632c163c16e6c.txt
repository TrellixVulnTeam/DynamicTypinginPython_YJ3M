commit b3070dcd535c617b50b684ac57f632c163c16e6c
Author: Philippe Duval <philippe@plot.ly>
Date:   Tue Nov 13 13:39:14 2018 -0500

    :camel: generate_imports

diff --git a/dash/development/base_component.py b/dash/development/base_component.py
index bff5864f..10db6e0f 100644
--- a/dash/development/base_component.py
+++ b/dash/development/base_component.py
@@ -465,7 +465,7 @@ def generate_class_file(typename, props, description, namespace):
     with open(file_path, 'w') as f:
         f.write(import_string)
         f.write(class_string)
-        
+
     print('Generated {}'.format(file_name))
 
 
diff --git a/dash/development/component_generator.py b/dash/development/component_generator.py
index 948a826e..941b91ea 100644
--- a/dash/development/component_generator.py
+++ b/dash/development/component_generator.py
@@ -5,8 +5,8 @@ import sys
 import subprocess
 import shlex
 import os
-import textwrap
 
+from dash.development.component_loader import generate_imports
 from .base_component import generate_class_file
 
 
@@ -58,20 +58,7 @@ def generate_components(component_src, project_shortname):
     with open(os.path.join(project_shortname, 'metadata.json'), 'w') as f:
         json.dump(metadata, f)
 
-    with open(os.path.join(project_shortname, '_imports_.py'), 'w') as f:
-        f.write(textwrap.dedent(
-            '''
-            {}
-
-            __all__ = [
-            {}
-            ]
-            '''.format(
-                '\n'.join(
-                    'from .{0} import {0}'.format(x) for x in components),
-                ',\n'.join('    "{}"'.format(x) for x in components)
-            )
-        ).lstrip())
+    generate_imports(project_shortname, components)
 
 
 def cli():
diff --git a/dash/development/component_loader.py b/dash/development/component_loader.py
index 2b5e70b1..6029e195 100644
--- a/dash/development/component_loader.py
+++ b/dash/development/component_loader.py
@@ -1,6 +1,8 @@
 import collections
 import json
 import os
+import textwrap
+
 from .base_component import generate_class
 from .base_component import generate_class_file
 from .base_component import ComponentRegistry
@@ -16,6 +18,23 @@ def _get_metadata(metadata_path):
     return data
 
 
+def generate_imports(project_shortname, components):
+    with open(os.path.join(project_shortname, '_imports_.py'), 'w') as f:
+        f.write(textwrap.dedent(
+            '''
+            {}
+
+            __all__ = [
+            {}
+            ]
+            '''.format(
+                '\n'.join(
+                    'from .{0} import {0}'.format(x) for x in components),
+                ',\n'.join('    "{}"'.format(x) for x in components)
+            )
+        ).lstrip())
+
+
 def load_components(metadata_path,
                     namespace='default_namespace'):
     """Load React component metadata into a format Dash can parse.
@@ -81,6 +100,8 @@ def generate_classes(namespace, metadata_path='lib/metadata.json'):
     if os.path.exists(imports_path):
         os.remove(imports_path)
 
+    components = []
+
     # Iterate over each property name (which is a path to the component)
     for componentPath in data:
         componentData = data[componentPath]
@@ -97,16 +118,7 @@ def generate_classes(namespace, metadata_path='lib/metadata.json'):
             componentData['description'],
             namespace
         )
-
-        # Add an import statement for this component
-        with open(imports_path, 'a') as f:
-            f.write('from .{0:s} import {0:s}\n'.format(name))
+        components.append(name)
 
     # Add the __all__ value so we can import * from _imports_
-    all_imports = [p.split('/').pop().split('.')[0] for p in data]
-    with open(imports_path, 'a') as f:
-        array_string = '[\n'
-        for a in all_imports:
-            array_string += '    "{:s}",\n'.format(a)
-        array_string += ']\n'
-        f.write('\n\n__all__ = {:s}'.format(array_string))
+    generate_imports(namespace, components)
