commit 7d86bfeb3664bc4f34a413314939d5fbf94a9b21
Author: byron <byron@plot.ly>
Date:   Mon Nov 4 16:23:12 2019 -0500

    remove the refresh

diff --git a/dash/testing/browser.py b/dash/testing/browser.py
index 8f8ebc7d..13fb3e37 100644
--- a/dash/testing/browser.py
+++ b/dash/testing/browser.py
@@ -116,26 +116,20 @@ class Browser(DashPageMixin):
             if wait_for_callbacks:
                 until(
                     self._wait_for_callbacks,
-                    timeout=10,
-                    poll=0.5,
+                    timeout=60,
+                    poll=1,
                     sleep_first=True,
                 )
         except TestingTimeoutError:
-            self.driver.refresh()
             logger.debug("rq full content %s", self.redux_state_rqs)
             logger.warning(
-                "status of invalid rqs %s",
+                "wait_for_callbacks failed => status of invalid rqs %s",
                 list(
                     _
                     for _ in self.redux_state_rqs
                     if not _.get("responseTime") or _.get("status") == "loading"
                 ),
             )
-            # for snapshot intensive case, it might happens that
-            # the selenium get stuck, give it one more chance after refresh
-            until(
-                self._wait_for_callbacks, timeout=60, poll=1, sleep_first=True
-            )
 
         self.percy_runner.snapshot(name=snapshot_name)
 
diff --git a/dash/testing/wait.py b/dash/testing/wait.py
index 0d721d13..c093d639 100644
--- a/dash/testing/wait.py
+++ b/dash/testing/wait.py
@@ -28,7 +28,8 @@ def until(
     while not res:
         if time.time() > end_time:
             raise TestingTimeoutError(msg)
-        time.sleep(poll)
+        time.sleep(poll * 2 if sleep_first else poll)
+        sleep_first = False
         res = wait_cond()
         logger.debug("poll => %s", time.time())
 
@@ -53,7 +54,8 @@ def until_not(
     while res:
         if time.time() > end_time:
             raise TestingTimeoutError(msg)
-        time.sleep(poll)
+        time.sleep(poll * 2 if sleep_first else poll)
+        sleep_first = False
         res = wait_cond()
         logger.debug("poll => %s", time.time())
 
