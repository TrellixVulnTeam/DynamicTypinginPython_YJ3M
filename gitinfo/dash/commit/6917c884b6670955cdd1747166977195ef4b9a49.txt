commit 6917c884b6670955cdd1747166977195ef4b9a49
Author: byron <byron@plot.ly>
Date:   Fri Apr 12 22:40:41 2019 -0400

    :lipstick: minor indent improvement

diff --git a/dash/_configs.py b/dash/_configs.py
index e887ee14..89b726c5 100644
--- a/dash/_configs.py
+++ b/dash/_configs.py
@@ -4,6 +4,24 @@ import os
 from . import exceptions
 from ._utils import AttributeDict
 
+DASH_ENV_VARS = (
+    'DASH_APP_NAME',
+    'DASH_URL_BASE_PATHNAME',
+    'DASH_ROUTES_PATHNAME_PREFIX',
+    'DASH_REQUESTS_PATHNAME_PREFIX',
+    'DASH_SUPPRESS_CALLBACK_EXCEPTIONS',
+    'DASH_ASSETS_EXTERNAL_PATH',
+    'DASH_INCLUDE_ASSETS_FILES',
+    'DASH_COMPONENTS_CACHE_MAX_AGE',
+    'DASH_INCLUDE_ASSETS_FILES',
+    'DASH_SERVE_DEV_BUNDLES',
+    'DASH_DEBUG',
+    'DASH_HOT_RELOAD',
+    'DASH_HOT_RELOAD_INTERVAL',
+    'DASH_HOT_RELOAD_WATCH_INTERVAL',
+    'DASH_HOT_RELOAD_MAX_RETRY',
+    'DASH_SILENCE_ROUTES_LOGGING',
+)
 
 def env_configs():
     """
@@ -11,24 +29,10 @@ def env_configs():
 
     :return: A dict with the dash environ vars
     """
-    return AttributeDict({x: os.getenv(x, os.getenv(x.lower())) for x in (
-        'DASH_APP_NAME',
-        'DASH_URL_BASE_PATHNAME',
-        'DASH_ROUTES_PATHNAME_PREFIX',
-        'DASH_REQUESTS_PATHNAME_PREFIX',
-        'DASH_SUPPRESS_CALLBACK_EXCEPTIONS',
-        'DASH_ASSETS_EXTERNAL_PATH',
-        'DASH_INCLUDE_ASSETS_FILES',
-        'DASH_COMPONENTS_CACHE_MAX_AGE',
-        'DASH_INCLUDE_ASSETS_FILES',
-        'DASH_SERVE_DEV_BUNDLES',
-        'DASH_DEBUG',
-        'DASH_HOT_RELOAD',
-        'DASH_HOT_RELOAD_INTERVAL',
-        'DASH_HOT_RELOAD_WATCH_INTERVAL',
-        'DASH_HOT_RELOAD_MAX_RETRY',
-        'DASH_SILENCE_ROUTES_LOGGING'
-    )})
+    return AttributeDict({
+        x: os.getenv(x, os.getenv(x.lower()))
+        for x in DASH_ENV_VARS
+    })
 
 
 def get_config(config_name, init, env, default=None, is_bool=False):
diff --git a/dash/dash.py b/dash/dash.py
index cc74688d..49326e8e 100644
--- a/dash/dash.py
+++ b/dash/dash.py
@@ -330,8 +330,7 @@ class Dash(object):
 
         # TODO - Set browser cache limit - pass hash into frontend
         return flask.Response(
-            json.dumps(layout,
-                       cls=plotly.utils.PlotlyJSONEncoder),
+            json.dumps(layout, cls=plotly.utils.PlotlyJSONEncoder),
             mimetype='application/json'
         )
 
@@ -365,8 +364,7 @@ class Dash(object):
 
     def serve_routes(self):
         return flask.Response(
-            json.dumps(self.routes,
-                       cls=plotly.utils.PlotlyJSONEncoder),
+            json.dumps(self.routes, cls=plotly.utils.PlotlyJSONEncoder),
             mimetype='application/json'
         )
 
@@ -1235,9 +1233,11 @@ class Dash(object):
             'Cache-Control': 'public, max-age={}'.format(
                 self.config.components_cache_max_age)
         }
-        return flask.Response(pkgutil.get_data('dash', 'favicon.ico'),
-                              headers=headers,
-                              content_type='image/x-icon')
+        return flask.Response(
+            pkgutil.get_data('dash', 'favicon.ico'),
+            headers=headers,
+            content_type='image/x-icon',
+        )
 
     def get_asset_url(self, path):
         asset = _get_asset_path(
@@ -1303,8 +1303,8 @@ class Dash(object):
         :return: debug
         """
         env = _configs.env_configs()
-        debug = debug or _configs.get_config('debug', None, env, debug,
-                                             is_bool=True)
+        debug = debug or \
+            _configs.get_config('debug', None, env, debug, is_bool=True)
 
         self._dev_tools.dev_tools_ui = debug
 
@@ -1483,10 +1483,6 @@ class Dash(object):
                     for _ in range(3))
             )
 
-            self.logger.info(
-                'Debugger PIN: %s',
-                debugger_pin
-            )
+            self.logger.info('Debugger PIN: %s', debugger_pin)
 
-        self.server.run(port=port, debug=debug,
-                        **flask_run_options)
+        self.server.run(port=port, debug=debug, **flask_run_options)
