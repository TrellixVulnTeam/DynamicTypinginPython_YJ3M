commit 9747e33530b149386e03952882ab4d1c4211fc7e
Author: byron <byron@plot.ly>
Date:   Thu Aug 15 14:45:12 2019 -0400

    :lipstick: format with black

diff --git a/dash/development/component_generator.py b/dash/development/component_generator.py
index 769fa0cb..ca3d3262 100644
--- a/dash/development/component_generator.py
+++ b/dash/development/component_generator.py
@@ -21,32 +21,32 @@ from ._py_components_generation import generate_classes_files
 
 
 reserved_words = [
-    'UNDEFINED',
-    'REQUIRED',
-    'to_plotly_json',
-    'available_properties',
-    'available_wildcard_properties',
-    '_.*'
+    "UNDEFINED",
+    "REQUIRED",
+    "to_plotly_json",
+    "available_properties",
+    "available_wildcard_properties",
+    "_.*",
 ]
 
 
 class _CombinedFormatter(
-        argparse.ArgumentDefaultsHelpFormatter,
-        argparse.RawDescriptionHelpFormatter
+    argparse.ArgumentDefaultsHelpFormatter,
+    argparse.RawDescriptionHelpFormatter,
 ):
     pass
 
 
 # pylint: disable=too-many-locals, too-many-arguments
 def generate_components(
-        components_source,
-        project_shortname,
-        package_info_filename="package.json",
-        ignore="^_",
-        rprefix=None,
-        rdepends="",
-        rimports="",
-        rsuggests=""
+    components_source,
+    project_shortname,
+    package_info_filename="package.json",
+    ignore="^_",
+    rprefix=None,
+    rdepends="",
+    rimports="",
+    rsuggests="",
 ):
 
     project_shortname = project_shortname.replace("-", "_").rstrip("/\\")
@@ -57,7 +57,7 @@ def generate_components(
 
     extract_path = pkg_resources.resource_filename("dash", "extract-meta.js")
 
-    reserved_patterns = '|'.join('^{}$'.format(p) for p in reserved_words)
+    reserved_patterns = "|".join("^{}$".format(p) for p in reserved_words)
 
     os.environ["NODE_PATH"] = "node_modules"
     cmd = shlex.split(
@@ -94,29 +94,28 @@ def generate_components(
     generator_methods = [generate_class_file]
 
     if rprefix is not None:
-        if not os.path.exists('man'):
-            os.makedirs('man')
-        if not os.path.exists('R'):
-            os.makedirs('R')
+        if not os.path.exists("man"):
+            os.makedirs("man")
+        if not os.path.exists("R"):
+            os.makedirs("R")
         if os.path.isfile("dash-info.yaml"):
             with open("dash-info.yaml") as yamldata:
                 rpkg_data = yaml.safe_load(yamldata)
         else:
             rpkg_data = None
-        with open('package.json', 'r') as f:
+        with open("package.json", "r") as f:
             pkg_data = safe_json_loads(f.read())
         generator_methods.append(
-            functools.partial(write_class_file,
-                              prefix=rprefix,
-                              rpkg_data=rpkg_data))
+            functools.partial(
+                write_class_file, prefix=rprefix, rpkg_data=rpkg_data
+            )
+        )
 
     components = generate_classes_files(
-        project_shortname,
-        metadata,
-        *generator_methods
+        project_shortname, metadata, *generator_methods
     )
 
-    with open(os.path.join(project_shortname, 'metadata.json'), 'w') as f:
+    with open(os.path.join(project_shortname, "metadata.json"), "w") as f:
         json.dump(metadata, f, indent=2)
 
     generate_imports(project_shortname, components)
@@ -149,11 +148,12 @@ def cli():
         description="Generate dash components by extracting the metadata "
         "using react-docgen. Then map the metadata to python classes.",
     )
-    parser.add_argument("components_source",
-                        help="React components source directory.")
+    parser.add_argument(
+        "components_source", help="React components source directory."
+    )
     parser.add_argument(
         "project_shortname",
-        help="Name of the project to export the classes files."
+        help="Name of the project to export the classes files.",
     )
     parser.add_argument(
         "-p",
@@ -209,8 +209,10 @@ def cli():
 def byteify(input_object):
     if isinstance(input_object, dict):
         return OrderedDict(
-            [(byteify(key), byteify(value)) for key,
-             value in input_object.iteritems()]
+            [
+                (byteify(key), byteify(value))
+                for key, value in input_object.iteritems()
+            ]
         )
     elif isinstance(input_object, list):
         return [byteify(element) for element in input_object]
diff --git a/dash/development/component_loader.py b/dash/development/component_loader.py
index 968a3fa1..722e01c6 100644
--- a/dash/development/component_loader.py
+++ b/dash/development/component_loader.py
@@ -6,7 +6,7 @@ from ._py_components_generation import (
     generate_class_file,
     generate_imports,
     generate_classes_files,
-    generate_class
+    generate_class,
 )
 from .base_component import ComponentRegistry
 
@@ -15,14 +15,13 @@ def _get_metadata(metadata_path):
     # Start processing
     with open(metadata_path) as data_file:
         json_string = data_file.read()
-        data = json\
-            .JSONDecoder(object_pairs_hook=collections.OrderedDict)\
-            .decode(json_string)
+        data = json.JSONDecoder(
+            object_pairs_hook=collections.OrderedDict
+        ).decode(json_string)
     return data
 
 
-def load_components(metadata_path,
-                    namespace='default_namespace'):
+def load_components(metadata_path, namespace="default_namespace"):
     """Load React component metadata into a format Dash can parse.
 
     Usage: load_components('../../component-suites/lib/metadata.json')
@@ -51,12 +50,12 @@ def load_components(metadata_path,
         # TODO Make more robust - some folks will write .jsx and others
         # will be on windows. Unfortunately react-docgen doesn't include
         # the name of the component atm.
-        name = componentPath.split('/').pop().split('.')[0]
+        name = componentPath.split("/").pop().split(".")[0]
         component = generate_class(
             name,
-            componentData['props'],
-            componentData['description'],
-            namespace
+            componentData["props"],
+            componentData["description"],
+            namespace,
         )
 
         components.append(component)
@@ -64,7 +63,7 @@ def load_components(metadata_path,
     return components
 
 
-def generate_classes(namespace, metadata_path='lib/metadata.json'):
+def generate_classes(namespace, metadata_path="lib/metadata.json"):
     """Load React component metadata into a format Dash can parse,
     then create python class files.
 
@@ -80,7 +79,7 @@ def generate_classes(namespace, metadata_path='lib/metadata.json'):
     """
 
     data = _get_metadata(metadata_path)
-    imports_path = os.path.join(namespace, '_imports_.py')
+    imports_path = os.path.join(namespace, "_imports_.py")
 
     # Make sure the file doesn't exist, as we use append write
     if os.path.exists(imports_path):
