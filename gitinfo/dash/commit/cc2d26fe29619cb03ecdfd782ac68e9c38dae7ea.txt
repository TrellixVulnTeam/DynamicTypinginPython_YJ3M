commit cc2d26fe29619cb03ecdfd782ac68e9c38dae7ea
Author: chriddyp <chris@plot.ly>
Date:   Thu Sep 7 09:32:49 2017 -0400

    fix conflict

diff --git a/dash_renderer/__init__.py b/dash_renderer/__init__.py
index d9005d08..ab9baadb 100644
--- a/dash_renderer/__init__.py
+++ b/dash_renderer/__init__.py
@@ -30,9 +30,9 @@ _js_dist = [
     {
         'relative_package_path': 'bundle.js',
         "external_url": (
-            'https://unpkg.com/dash-renderer@{}'
+            'https://unpkg.com/dash-renderer@0.8.0-3'
             '/dash_renderer/bundle.js'
-        ).format(__version__),
+        ),
         'namespace': 'dash_renderer'
     }
 ]
diff --git a/dash_renderer/version.py b/dash_renderer/version.py
index c9880e62..ef41bec0 100644
--- a/dash_renderer/version.py
+++ b/dash_renderer/version.py
@@ -1 +1 @@
-__version__ = '0.7.4'
+__version__ = '0.8.0rc3'
diff --git a/package.json b/package.json
index 6274b5c8..09921ae7 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "dash-renderer",
-  "version": "0.7.4",
+  "version": "0.8.0-3",
   "description": "render dash components in react",
   "main": "src/index.js",
   "scripts": {
diff --git a/src/actions/api.js b/src/actions/api.js
index 96cfd11e..de351d9a 100644
--- a/src/actions/api.js
+++ b/src/actions/api.js
@@ -1,6 +1,7 @@
 /* global fetch: true, document: true */
 import cookie from 'cookie';
-import {has, merge, type} from 'ramda';
+import {merge} from 'ramda';
+import {urlBase} from '../utils';
 
 function GET(path) {
     return fetch(path, {
@@ -33,17 +34,12 @@ const request = {GET, POST};
 function apiThunk(endpoint, method, store, id, body, headers={}) {
     return (dispatch, getState) => {
         const config = getState().config;
-        if (type(config) === "Null" ||
-            (type(config) === "Object") && !has('url_base_pathname', config)) {
-            throw new Error(`
-                Trying to make an API request to ${endpoint} but "url_base_pathname"
-                is not in \`config\`. \`config\` is: `, config);
-        }
+
         dispatch({
             type: store,
             payload: {id, status: 'loading'}
         });
-        return request[method](`${config.url_base_pathname}${endpoint}`, body, headers)
+        return request[method](`${urlBase(config)}${endpoint}`, body, headers)
         .then(res => {
             const contentType = res.headers.get("content-type");
             if(contentType && contentType.indexOf("application/json") !== -1) {
diff --git a/src/actions/index.js b/src/actions/index.js
index 5eb41f1a..90806015 100644
--- a/src/actions/index.js
+++ b/src/actions/index.js
@@ -18,6 +18,7 @@ import {crawlLayout, hasId} from '../reducers/utils';
 import {APP_STATES} from '../reducers/constants';
 import {ACTIONS} from './constants';
 import cookie from 'cookie';
+import {urlBase} from '../utils';
 
 export const updateProps = createAction(ACTIONS('ON_PROP_CHANGE'));
 export const setRequestQueue = createAction(ACTIONS('SET_REQUEST_QUEUE'));
@@ -285,7 +286,7 @@ export function notifyObservers(payload) {
                 });
             }
 
-            promises.push(fetch(`${config.url_base_pathname}_dash-update-component`, {
+            promises.push(fetch(`${urlBase(config)}_dash-update-component`, {
                 method: 'POST',
                 headers: {
                     'Content-Type': 'application/json',
@@ -394,12 +395,12 @@ export function notifyObservers(payload) {
                                 depOrder.indexOf(a.id) - depOrder.indexOf(b.id),
                                 newProps
                             );
-                            
+
                             /*
                              * TODO - As in the case of Jack Luo's indicator app,
                              * all of these inputs could update a _single_ output.
-                             * If that is the case, then we can collect all of their 
-                             * values and make a single request instead of making a 
+                             * If that is the case, then we can collect all of their
+                             * values and make a single request instead of making a
                              * different request for each input
                              */
                             sortedNewProps.forEach(function(propUpdate) {
