commit 6bf596feb4079cf573ca843a8ba248ea04507506
Author: byron <byron@plot.ly>
Date:   Tue Aug 20 17:50:24 2019 -0400

    :ok_hand:

diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 21321dbd..8150566b 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -31,17 +31,18 @@ If you want to contribute or simply dig deeper into Dash, we encourage you to pl
 
 For contributors with a primarily  **Python**  or  **R**  background, this section might help you understand more details about developing and debugging in Javascript world.
 
-After Dash 1.2, The renderer bundle and its peer dependencies can be packed and generated from the source code. The only version of the truth is defined in  `dash-renderer\package.json`  file. A build tool  `renderer`, which is a tiny Python script defined as a Dash entry point, has few  commands like:
-1.  `renderer npm`  installs all the npm modules using this  `package.json`  files. Note that the  `package-lock.json`  file is the computed reference product for the versions defined with tilde(~) or caret(^) syntax in  **npm**
-2.  `renderer bundles`  parses the locked version JSON, copies all the peer dependencies into dash_renderer folder, bundles the renderer assets, and generates an `__init__.py`  to map all the resources
-3.  `renderer digest {renderer version}`  computes the content hash of each asset in  `dash_renderer`  folder, prints out the result in logs, and dumps into a JSON file  `digest.json`
-4.  `renderer watch` runs webpack in watch mode, so any source code change triggers a rebuild. Use this if you are actively updating renderer code and you want to test your changes immediately.
+As of Dash 1.2, the renderer bundle and its peer dependencies can be packed and generated from the source code. The `dash-renderer\package.json` file is the one version of the truth for dash renderer version and npm dependencies. A build tool `renderer`, which is a tiny Python script installed by Dash as a command-line tool, has a few commands:
+
+1.  `renderer npm`  installs all the npm modules using this  `package.json`  files. Note that the  `package-lock.json`  file is the computed reference product for the versions defined with tilde(~) or caret(^) syntax in npm.
+2.  `renderer bundles` parses the locked version JSON, copies all the peer dependencies into dash_renderer folder, bundles the renderer assets, and generates an `__init__.py` to map all the resources. There are also a list of helpful `scripts` defined in `package.json` you might need to do some handy tasks like linting, syntax format with prettier, etc.
+3.  `renderer digest` computes the content hash of each asset in `dash_renderer` folder, prints out the result in logs, and dumps into a JSON file `digest.json`. Use this when you have a doubt about the current assets in `dash_renderer`, and compare it with previous result in one shot by this command.
+4.  `renderer watch` runs the webpack in watch mode, so any source code change triggers a rebuild. Use this if you are actively updating renderer code and you want to test your changes immediately.
 
 When a change in renderer code doesn't reflect in your browser as expected, this could be: confused bundle generation, caching issue in a browser, python package not in `editable` mode, etc. The new tool reduces the risk of bundle assets by adding the digest to help compare asset changes.
 
 ## Git
 
-Use the [GitHub flow][] when proposing contributions to this repository (i.e. create a feature branch and submit a PR against the default branch).
+Use the [GitHub flow](https://guides.github.com/introduction/flow/) when proposing contributions to this repository (i.e. create a feature branch and submit a PR against the default branch).
 
 ### Organize your commits
 
diff --git a/dash/development/build_renderer.py b/dash/development/build_renderer.py
index 5550e829..0a5638f6 100644
--- a/dash/development/build_renderer.py
+++ b/dash/development/build_renderer.py
@@ -115,12 +115,7 @@ def bundles():
 
 
 @job("compute the hash digest for assets")
-def digest(version):
-    """compute the hash digest of assets in dash_renderer
-
-    version: str
-        the dash_renderer version
-    """
+def digest(version=None):
     copies = (
         _
         for _ in os.listdir(assets)
@@ -129,7 +124,8 @@ def digest(version):
     logger.info("bundles in dash_renderer %s", copies)
 
     # compute the fingerprint for all the assets
-    payload = {"dash_renderer": version}
+    if version is not None:
+        payload = {"dash_renderer": version}
     for copy in copies:
         payload["MD5 ({})".format(copy)] = compute_md5(_concat((assets, copy)))
 
