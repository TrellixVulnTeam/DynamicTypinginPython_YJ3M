commit b9739102832cac69d4425c886fba095319d47c87
Author: Christoph Seitz <christoph_seitz@gmx.de>
Date:   Wed Aug 1 18:43:39 2012 +0200

    Some optimizations to previous code.

diff --git a/library/apt b/library/apt
index 1cece58433..29188d67a8 100755
--- a/library/apt
+++ b/library/apt
@@ -69,23 +69,20 @@ def package_status(m, pkgname, version, cache):
             return pkg.isInstalled, pkg.isUpgradable
 
 def install(m, pkgspec, cache, upgrade=False, default_release=None, install_recommends=True, force=False):
-    packages = list()
+    packages = ""
     for package in pkgspec:
         name, version = package_split(package)
         installed, upgradable = package_status(m, name, version, cache)
         if not installed or (upgrade and upgradable):
-            packages.append(package)
+            packages += "'%s' " % package
     
-    if len(packages) >0:
+    if len(packages) != 0:
         if force:
             force_yes = '--force-yes'
         else:
             force_yes = ''
 
-        cmd = "%s --option Dpkg::Options::=--force-confold -q -y %s install " % (APT, force_yes)
-        for package in packages:
-            cmd += " '%s'" % package
-            
+        cmd = "%s --option Dpkg::Options::=--force-confold -q -y %s install %s" % (APT, force_yes,packages)
         if default_release:
             cmd += " -t '%s'" % (default_release,)
         if not install_recommends:
@@ -100,20 +97,18 @@ def install(m, pkgspec, cache, upgrade=False, default_release=None, install_reco
         m.exit_json(changed=False)
 
 def remove(m, pkgspec, cache, purge=False):
-    packages = list()
+    packages = ""
     for package in pkgspec:
         name, version = package_split(package)
         installed, upgradable = package_status(m, name, version, cache)
         if installed:
-            packages.append(name)
+            packages += "'%s' " % package
     
     if len(packages) == 0:
         m.exit_json(changed=False)
     else:
         purge = '--purge' if purge else ''
-        cmd = "%s -q -y %s remove" % (APT, purge)
-        for package in packages:
-            cmd += "  '%s'" % package
+        cmd = "%s -q -y %s remove %s" % (APT, purge,packages)
         rc, out, err = run_apt(cmd)
         if rc:
             m.fail_json(msg="'apt-get remove %s' failed: %s" % (packages, err))
@@ -162,19 +157,18 @@ def main():
     force_yes = module.boolean(p['force'])
     
     packages = p['package'].split(',')
+    latest = p['state'] == 'latest' 
     for package in packages:
         if package.count('=') > 1:
-            module.fail_json(msg="invalid package spec: %s" % packages)
+            module.fail_json(msg="invalid package spec: %s" % package)
+        if latest and '=' in package:
+            module.fail_json(msg='version number inconsistent with state=latest: %s' % package)
 
     if p['state'] == 'latest':
-        for package in packages:
-            if '=' in package:
-                module.fail_json(msg='version number inconsistent with state=latest')
         install(module, packages, cache, upgrade=True,
                 default_release=p['default_release'],
                 install_recommends=install_recommends,
                 force=force_yes)
-
     elif p['state'] == 'installed':
         install(module, packages, cache, default_release=p['default_release'],
                   install_recommends=install_recommends,force=force_yes)
