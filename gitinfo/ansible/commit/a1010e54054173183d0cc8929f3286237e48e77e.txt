commit a1010e54054173183d0cc8929f3286237e48e77e
Author: Tim Bielawa <tbielawa@redhat.com>
Date:   Fri Mar 9 14:39:29 2012 -0500

    Spellcheck. Formatting. References.

diff --git a/rst/YAMLScripts.rst b/rst/YAMLScripts.rst
index 08055ff497..f94b4943b0 100644
--- a/rst/YAMLScripts.rst
+++ b/rst/YAMLScripts.rst
@@ -15,7 +15,7 @@ addition, all YAML files (regardless of their association with
 `ansible` or not) should start with ``---``.
 
 In YAML a list can be represented in two ways. In one way all members
-of a list are lines beginning at the same indenta`tion level starting
+of a list are lines beginning at the same indentation level starting
 with a ``-`` character::
 
     ---
diff --git a/rst/examples.rst b/rst/examples.rst
index 4adeeed94d..a3a8fd4cf8 100644
--- a/rst/examples.rst
+++ b/rst/examples.rst
@@ -25,25 +25,37 @@ Let's use ansible's command line tool to reboot all web servers in Atlanta, 10 a
 
 The -f 10 specifies the usage of 10 simultaneous processes.
 
-Note that other than the command module, ansible modules do not work like simple scripts. They make the remote system look like you state, and run the commands neccessary to get it there.  This is commonly refered to
-as 'idempotency'.
+.. note::
+
+   Note that other than the :ref:`command` module, ansible modules do
+   not work like simple scripts. They make the remote system look like
+   you state, and run the commands necessary to get it there.  This
+   is commonly referred to as 'idempotent'.
 
 File Transfer & Templating
 ``````````````````````````
 
-Ansible can SCP lots of files to multiple machines in parallel, and optionally use them as template sources.
+Ansible can SCP lots of files to multiple machines in parallel, and
+optionally use them as template sources.
 
 To just transfer a file directly to many different servers::
 
     ansible atlanta copy -a "/etc/hosts /tmp/hosts"
 
-To use templating, first run the setup module to put the template variables you would like to use on the remote host. Then use the template module to write the files using the templates. Templates are written in Jinja2 format. Playbooks (covered elsewhere in the documentation) will run the setup module for you, making this even simpler.::
+To use templating, first run the setup module to put the template
+variables you would like to use on the remote host. Then use the
+template module to write the files using the templates. Templates are
+written in Jinja2 format. Playbooks (covered elsewhere in the
+documentation) will run the setup module for you, making this even
+simpler.::
 
     ansible webservers -m setup    -a "favcolor=red ntp_server=192.168.1.1"
     ansible webservers -m template -a "src=/srv/motd.j2 dest=/etc/motd"
     ansible webservers -m template -a "src=/srv/ntp.j2 dest=/etc/ntp.conf"
 
-Need something like the fqdn in a template? If facter or ohai are installed, data from these projects will also be made available to the template engine, using 'facter' and 'ohai' prefixes for each.
+Need something like the fqdn in a template? If facter or ohai are
+installed, data from these projects will also be made available to the
+template engine, using 'facter' and 'ohai' prefixes for each.
 
 Deploying From Source Control
 `````````````````````````````
@@ -52,7 +64,10 @@ Deploy your webapp straight from git::
 
     ansible webservers -m git -a "repo=git://foo dest=/srv/myapp version=HEAD"
 
-Since ansible modules can notify change handlers (see 'Playbooks') it is possible to tell ansible to run specific tasks when the code is updated, such as deploying Perl/Python/PHP/Ruby directly from git and then restarting apache.
+Since ansible modules can notify change handlers (see
+:doc:`playbooks`) it is possible to tell ansible to run specific tasks
+when the code is updated, such as deploying Perl/Python/PHP/Ruby
+directly from git and then restarting apache.
 
 Managing Services
 `````````````````
@@ -68,14 +83,19 @@ Alternatively, restart a service on all webservers::
 Time Limited Background Operations
 ``````````````````````````````````
 
-Long running operations can be backgrounded, and their status can be checked on later. The same job ID is given to the same task on all hosts, so you won't lose track. Polling support is pending in the command line.::
+Long running operations can be backgrounded, and their status can be
+checked on later. The same job ID is given to the same task on all
+hosts, so you won't lose track. Polling support is pending in the
+command line.::
 
     ansible all -B 3600 -a "/usr/bin/long_running_operation --do-stuff"
     ansible all -n job_status -a jid=123456789
 
-Any module other than 'copy' or 'template' can be backgrounded.  Typically you'll be backgrounding shell
-commands or software upgrades only.
+Any module other than :ref:`copy` or :ref:`template` can be
+backgrounded.  Typically you'll be backgrounding shell commands or
+software upgrades only.
 
-After the time limit (in seconds) runs out (-B), the process on the remote nodes will be killed.
+After the time limit (in seconds) runs out (``-B``), the process on
+the remote nodes will be killed.
 
 
diff --git a/rst/gettingstarted.rst b/rst/gettingstarted.rst
index 6bbb317724..5616c7d9a1 100644
--- a/rst/gettingstarted.rst
+++ b/rst/gettingstarted.rst
@@ -15,7 +15,8 @@ Requirements
 
 Requirements for Ansible are extremely minimal.
 
-If you are running python 2.6 on the **overlord** machine (the machine that you'll be talking to the other machines from), you will need:
+If you are running python 2.6 on the **overlord** machine (the machine
+that you'll be talking to the other machines from), you will need:
 
 * ``paramiko``
 * ``PyYAML``
@@ -66,8 +67,8 @@ You can also install Ansible using Python Distutils::
 Via RPM
 +++++++
 
-In the near future, pre-built RPMs will be available through your distribution. Until that time you
-can use the ``make rpm`` command::
+In the near future, pre-built RPMs will be available through your
+distribution. Until that time you can use the ``make rpm`` command::
 
     $ git clone git://github.com/ansible/ansible.git
     $ cd ./ansible
@@ -77,8 +78,8 @@ can use the ``make rpm`` command::
 Your first commands
 ```````````````````
 
-Edit /etc/ansible/hosts and put one or more remote systems in it, for which you have your SSH
-key in ``authorized_keys``::
+Edit /etc/ansible/hosts and put one or more remote systems in it, for
+which you have your SSH key in ``authorized_keys``::
 
     192.168.1.50
     aserver.example.org
@@ -97,8 +98,14 @@ Now run a live command on all of your nodes::
   
     ansible all /bin/echo hello
 
-Congratulations.  You've just contacted your nodes with Ansible.  It's now time to read some
-of the more real-world examples, and explore what you can do with different modules, as well
-as the Ansible playbooks language.  Ansible is not just about running commands, but you already
-have a working infrastructure!
+Congratulations.  You've just contacted your nodes with Ansible.  It's
+now time to read some of the more real-world examples, and explore
+what you can do with different modules, as well as the Ansible
+playbooks language.  Ansible is not just about running commands, but
+you already have a working infrastructure!
 
+
+.. seealso::
+
+   :ref:`Inventory <inventoryformat>`
+       Complete documentation on the inventory file format
diff --git a/rst/index.rst b/rst/index.rst
index 0c4288f030..20933fee81 100644
--- a/rst/index.rst
+++ b/rst/index.rst
@@ -5,24 +5,32 @@
 Ansible
 =======
 
-Ansible is a radically simple deployment, configuration, and command execution framework.
-Other tools in this space have been too complicated for too long, require too much bootstrapping, 
-and have too much learning curve.  Ansible is dead simple and painless to extend.  For comparison, Puppet and Chef have about 60k lines of code.  Ansible's core is a little over 1000 lines.  
-
-Ansible isn't just for configuration -- it's also great for Ad-Hoc tasks, 
-quickly firing off commands against nodes.  Where Ansible excels though, is expressing complex multi-node deployment processes, executing complex sequences of commands on different hosts through "playbooks".
-
-Extending ansible does not require programming in any particular language -- you can write modules
-as scripts or programs that return simple JSON.  It's also trivially easy to just execute
-useful shell commands.
-
-Why use Ansible versus something else?  (Puppet, Chef, Fabric, Capistrano,
-mCollective, Func, SaltStack, etc?) Ansible will have far less code, it
-will be (by extension) more correct, and it will be the easiest thing to hack on and
-use you'll ever see -- regardless of your favorite language of choice.
-
-Systems management doesn't have to be complicated.  Ansible's docs will remain 
-short & simple, and the source will be blindingly obvious.
+Ansible is a radically simple deployment, configuration, and command
+execution framework.  Other tools in this space have been too
+complicated for too long, require too much bootstrapping, and have too
+much learning curve.  Ansible is dead simple and painless to extend.
+For comparison, Puppet and Chef have about 60k lines of code.
+Ansible's core is a little over 1000 lines.
+
+Ansible isn't just for configuration -- it's also great for Ad-Hoc
+tasks, quickly firing off commands against nodes.  Where Ansible
+excels though, is expressing complex multi-node deployment processes,
+executing complex sequences of commands on different hosts through
+:doc:`playbooks`.
+
+Extending ansible does not require programming in any particular
+language -- you can write modules as scripts or programs that return
+simple JSON.  It's also trivially easy to just execute useful shell
+commands.
+
+Why use Ansible versus something else?  (Puppet, Chef, Fabric,
+Capistrano, mCollective, Func, SaltStack, etc?) Ansible will have far
+less code, it will be (by extension) more correct, and it will be the
+easiest thing to hack on and use you'll ever see -- regardless of your
+favorite language of choice.
+
+Systems management doesn't have to be complicated.  Ansible's docs
+will remain short & simple, and the source will be blindingly obvious.
 
 
 Design Goals
@@ -40,7 +48,8 @@ Design Goals
 Communicate and Get Involved
 ````````````````````````````
 
-Your ideas and contributions are welcome.  We're also happy to help you with questions about Ansible.
+Your ideas and contributions are welcome.  We're also happy to help
+you with questions about Ansible.
 
 * Join the `ansible-project mailing list <http://groups.google.com/group/ansible-project>`_ on Google Groups
 * Join `#ansible <irc://irc.freenode.net/#ansible>`_ on the `freenode IRC network <http://freenode.net/>`_
@@ -67,11 +76,13 @@ Contents
 About the Author
 ````````````````
 
-Ansible was originally developed by Michael DeHaan, a Raleigh, NC based software developer and architect.  
-He created other popular DevOps programs such as Cobbler, the popular Linux install server.
-Cobbler is used to deploy mission critical systems all over the planet, in industries
-ranging from massively multiplayer gaming, core internet infrastructure, finance,
-chip design, and more.  Michael also helped co-author of Func, a precursor to Ansible, which is used
-to orchestrate systems in lots of diverse places.  He's worked on systems software for
-IBM, Motorola, Red Hat's Emerging Technologies Group, Puppet Labs, and rPath.
-
+Ansible was originally developed by Michael DeHaan, a Raleigh, NC
+based software developer and architect.  He created other popular
+DevOps programs such as Cobbler, the popular Linux install server.
+Cobbler is used to deploy mission critical systems all over the
+planet, in industries ranging from massively multiplayer gaming, core
+internet infrastructure, finance, chip design, and more.  Michael also
+helped co-author of Func, a precursor to Ansible, which is used to
+orchestrate systems in lots of diverse places.  He's worked on systems
+software for IBM, Motorola, Red Hat's Emerging Technologies Group,
+Puppet Labs, and rPath.
diff --git a/rst/modules.rst b/rst/modules.rst
index 9b52334153..a8832ac25e 100644
--- a/rst/modules.rst
+++ b/rst/modules.rst
@@ -1,8 +1,8 @@
 Ansible Modules
 ===============
 
-Ansible ships with a number of modules that can be executed directly on remote hosts or through
-ansible playbooks.
+Ansible ships with a number of modules that can be executed directly
+on remote hosts or through ansible playbooks.
 
 .. seealso::
 
@@ -13,23 +13,29 @@ ansible playbooks.
    :doc:`api`
        Examples of using modules with the Python API
 
-Nearly all modules take key=value parameters.  Some modules take no parameters, and the command
-module just takes arguments for the command you want to run.
+Nearly all modules take ``key=value`` parameters.  Some modules take
+no parameters, and the command module just takes arguments for the
+command you want to run.
 
-All modules return JSON format data, thoug if you are using the command line or playbooks, you
-don't really need to know much about that.
+All modules return JSON format data, though if you are using the
+command line or playbooks, you don't really need to know much about
+that.
 
-Most modules other than command are idempotent, meaning they will seek to avoid changes
-unless a change needs to be made.  When using ansible playbooks, these modules can
-trigger change events.  Unless otherwise noted, all modules support change hooks.
+Most modules other than command are idempotent, meaning they will seek
+to avoid changes unless a change needs to be made.  When using ansible
+playbooks, these modules can trigger change events.  Unless otherwise
+noted, all modules support change hooks.
 
 Stock modules:
 
+.. _command:
+
 command
 ```````
 
-The command module takes the command name followed by a list of arguments, space delimited.
-This is the only module that does not use key=value style parameters.
+The command module takes the command name followed by a list of
+arguments, space delimited.  This is the only module that does not use
+``key=value`` style parameters.
 
 Example usage::
 
@@ -37,27 +43,33 @@ Example usage::
 
 The given shell command will be executed on all selected nodes.
 
-This module does not support change hooks and returns the return code from the program as well as timing information about how long the command was running for.
+This module does not support change hooks and returns the return code
+from the program as well as timing information about how long the
+command was running for.
 
+.. _copy:
 
 copy
 ````
 
 The copy module moves a file on the local box to remote locations.  
 
-*src*::
+*src*:
 
-Local path to a file to copy to the remote server.  This can be an absolute or relative path.
+* Local path to a file to copy to the remote server.  This can be an
+  absolute or relative path.
 
 
-*dest*::
+*dest*:
 
-Remote absolute path where the file should end up.
+* Remote absolute path where the file should end up.
 
 
 This module also returns md5sum information about the resultant file.
 
 
+.. _facter:
+
 facter
 ``````
 
@@ -66,9 +78,10 @@ JSON data that can be useful for inventory purposes.
 
 Requires that 'facter' and 'ruby-json' be installed on the remote end.
 
-This module is informative only - it takes no parameters & does not support change hooks,
-nor does it make any changes on the system.   Playbooks do not actually use
-this module, they use the 'setup' module behind the scenes.
+This module is informative only - it takes no parameters & does not
+support change hooks, nor does it make any changes on the system.
+Playbooks do not actually use this module, they use the :ref:`setup`
+module behind the scenes.
 
 
 git
@@ -76,41 +89,43 @@ git
 
 Deploys software (or files) from git checkouts.
 
-*repo*::
+*repo*:
 
-git or http protocol address of the repo to checkout
+* git or http protocol address of the repo to checkout.
 
-*dest*::
+*dest*:
 
-where to check it out, an absolute directory path
+* Where to check it out, an absolute directory path.
 
-*version*::
+*version*:
 
-what version to check out -- either the git SHA, the literal string 'HEAD', or a tag name
+* What version to check out -- either the git SHA, the literal string
+  ``HEAD``, or a tag name.
 
 
 ohai
 ````
 
-Similar to the facter module, this returns JSON inventory data.  Ohai
-data is a bit more verbose and nested than facter.
+Similar to the :ref:`facter` module, this returns JSON inventory data.
+Ohai data is a bit more verbose and nested than facter.
 
 Requires that 'ohai' be installed on the remote end.
 
 This module is information only - it takes no parameters & does not
 support change hooks, nor does it make any changes on the system.
 
-Playbooks should not call the ohai module, playbooks call the 'setup'
-module behind the scenes instead.
+Playbooks should not call the ohai module, playbooks call the
+:ref:`setup` module behind the scenes instead.
 
 ping
 ````
 
-A trivial test module, this module always returns the integer '1' on
+A trivial test module, this module always returns the integer ``1`` on
 successful contact.
 
-This module does not support change hooks and is informative only - it takes no parameters & does not
-support change hooks, nor does it make any changes on the system.
+This module does not support change hooks and is informative only - it
+takes no parameters & does not support change hooks, nor does it make
+any changes on the system.
 
 
 service
@@ -118,51 +133,56 @@ service
 
 Controls services on remote machines.
 
-*state*
+*state*:
 
-Values are 'started', 'stopped', or 'restarted'.   Started/stopped
-are idempotent actions that will not run commands unless neccessary.
-'restarted' will always bounce the service
+* Values are ``started``, ``stopped``, or ``restarted``.
+  Started/stopped are idempotent actions that will not run commands
+  unless necessary.  ``restarted`` will always bounce the service.
 
 
-*name*
+*name*:
 
-The name of the service
+* The name of the service.
 
 
+.. _setup:
+
 setup
 `````
 
 Writes a JSON file containing key/value data, for use in templating.
-Call this once before using the template modules.  Playbooks will
-execute this module automatically as the first step in each play using
-the variables section, so it is unneccessary to make explicit calls to
-setup within a playbook.
+Call this once before using the :ref:`template` module.  Playbooks
+will execute this module automatically as the first step in each play
+using the variables section, so it is unnecessary to make explicit
+calls to setup within a playbook.
+
+If facter or ohai are installed, variables from these programs will
+also be snapshotted into the JSON file for usage in templating. These
+variables are prefixed with ``facter_`` and ``ohai_`` so it's easy to
+tell their source.  All variables are then bubbled up to the caller.
 
-If facter or ohai are installed, variables from these programs will also
-be snapshotted into the JSON file for usage in templating. These variables
-are prefixed with 'facter_' and 'ohai_" so it's easy to tell their source.
-All variables are then bubbled up to the caller.
+*anything*:
 
-*anything*
+ * Any other parameters can be named basically anything, and set a
+   ``key=value`` pair in the JSON file for use in templating.
 
-any other parameters can be named basically anything, and set a key=value
-pair in the JSON file for use in templating.
 
+.. _template:
 
 template
 ````````
 
-Templates a file out to a remote server.  Call the setup module prior to usage.
+Templates a file out to a remote server.  Call the :ref:`setup` module
+prior to usage.
 
-*src*
+*src*:
 
-path of a Jinja2 formatted template on the local server.  This can be a relative
-or absolute path.
+* Path of a Jinja2 formatted template on the local server.  This can
+  be a relative or absolute path.
 
-*dest*
+*dest*:
 
-location to render the template on the remote server
+* Location to render the template on the remote server.
 
 
 This module also returns md5sum information about the resultant file.
@@ -171,29 +191,30 @@ This module also returns md5sum information about the resultant file.
 Writing your own modules
 ````````````````````````
 
-To write your own modules, simply follow the convention of those already available in
-/usr/share/ansible.  Modules must return JSON but can be written in any language.
-Modules should return hashes, but hashes can be nested.
+To write your own modules, simply follow the convention of those
+already available in /usr/share/ansible.  Modules must return JSON but
+can be written in any language.  Modules should return hashes, but
+hashes can be nested.
 
-To support change hooks, modules should return hashes with a changed: True/False
-element at the top level::
+To support change hooks, modules should return hashes with a changed:
+True/False element at the top level::
 
     {
         'changed'   : True,
         'something' : 42
     }
 
-Modules can also choose to indicate a failure scenario by returning a top level 'failure' 
-element with a True value, and a 'msg' element describing the nature of the failure.  
-Other return values are up to the module.
+Modules can also choose to indicate a failure scenario by returning a
+top level ``failure`` element with a True value, and a ``msg`` element
+describing the nature of the failure.  Other return values are up to
+the module::
 
     {
         'failure'   : True,
         'msg'       : "here is what happened..."
     }
 
-When shipping modules, drop them in /usr/share/ansible, or specify the module path to the
-command line tool or API.  It is easy to test modules by running them directly on
-the command line, passing them arguments just like they would be passed with ansible.
-
-
+When shipping modules, drop them in /usr/share/ansible, or specify the
+module path to the command line tool or API.  It is easy to test
+modules by running them directly on the command line, passing them
+arguments just like they would be passed with ansible.
diff --git a/rst/patterns.rst b/rst/patterns.rst
index 5b76289378..13dc11da85 100644
--- a/rst/patterns.rst
+++ b/rst/patterns.rst
@@ -12,12 +12,16 @@ How to select hosts you wish to manage
    :doc:`playbooks`
        Learning ansible's configuration management language
 
+
+.. _inventoryformat:
+
 Inventory File Format
 +++++++++++++++++++++
 
 Ansible works against multiple systems in your infrastructure at the
-same time.  It does this by selecting portions of systems listed in Ansible's inventory file,
-which defaults to /etc/ansible/hosts, and looks like this::
+same time.  It does this by selecting portions of systems listed in
+Ansible's inventory file, which defaults to /etc/ansible/hosts, and
+looks like this::
 
     mail.example.com
 
@@ -54,13 +58,12 @@ with the bracket headers in the inventory file::
 Individual hosts, but not groups, can also be referenced using
 wildcards::
 
-   *.example.com
-   *.com
+    *.example.com
+    *.com
 
 It's also ok to mix wildcard patterns and groups at the same time::
 
-   one*.com:dbservers
-
-NOTE: It is not possible to target a host not in the inventory file.
-
+    one*.com:dbservers
 
+.. note::
+    It is not possible to target a host not in the inventory file.
diff --git a/rst/playbooks.rst b/rst/playbooks.rst
index db028da59c..218ef2538e 100644
--- a/rst/playbooks.rst
+++ b/rst/playbooks.rst
@@ -55,7 +55,7 @@ Hosts line
 ``````````
 
 The hosts line is a list of one or more groups or host patterns,
-seperated by colons, as described in the :ref:`patterns`
+separated by colons, as described in the :ref:`patterns`
 documentation.  This is just like the first parameter to
 `/usr/bin/ansible`.
 
@@ -88,7 +88,7 @@ Tasks list
 ``````````
 
 Each play contains a list of tasks.  Tasks are executed in order, one
-at a time, against all machines matched by the play's host pattern,
+at a time, against all machines matched by the playbooks host pattern,
 before moving on to the next task.
 
 Hosts with failed tasks are taken out of the rotation for the entire
@@ -177,8 +177,10 @@ do in the main file.  Including a variable in the name of a task is a
 contrived example, you could also pass them to the action command line
 or use them inside a template file.
 
-Note that include statements are only usable from the top level
-playbook file.  At this time, includes can not include other includes.
+.. note::
+    Note that include statements are only usable from the top level
+    playbook file.  At this time, includes can not include other
+    includes.
 
 Using Includes To Assign Classes of Systems
 ```````````````````````````````````````````
