commit ff368ff55d76470b898407a05154f7e625924be5
Author: ftntcorecse <43451990+ftntcorecse@users.noreply.github.com>
Date:   Wed Feb 27 10:41:33 2019 -0500

    FortiManager Plugin Module Conversion: fmgr_secprof_dns (#52771)
    
    * Auto Commit for: fmgr_secprof_dns
    
    * Auto Commit for: fmgr_secprof_dns

diff --git a/lib/ansible/modules/network/fortimanager/fmgr_secprof_dns.py b/lib/ansible/modules/network/fortimanager/fmgr_secprof_dns.py
index fc51ac36e0..b414179e49 100644
--- a/lib/ansible/modules/network/fortimanager/fmgr_secprof_dns.py
+++ b/lib/ansible/modules/network/fortimanager/fmgr_secprof_dns.py
@@ -28,6 +28,8 @@ DOCUMENTATION = '''
 ---
 module: fmgr_secprof_dns
 version_added: "2.8"
+notes:
+    - Full Documentation at U(https://ftnt-ansible-docs.readthedocs.io/en/latest/).
 author:
     - Luke Weighall (@lweighall)
     - Andrew Welsh (@Ghilli3)
@@ -43,21 +45,6 @@ options:
     required: false
     default: root
 
-  host:
-    description:
-      - The FortiManager's address.
-    required: true
-
-  username:
-    description:
-      - The username associated with the account.
-    required: true
-
-  password:
-    description:
-      - The password associated with the username account.
-    required: true
-
   mode:
     description:
       - Sets one of three modes for managing the object.
@@ -199,18 +186,12 @@ options:
 EXAMPLES = '''
   - name: DELETE Profile
     fmgr_secprof_dns:
-      host: "{{inventory_hostname}}"
-      username: "{{ username }}"
-      password: "{{ password }}"
       name: "Ansible_DNS_Profile"
       comment: "Created by Ansible Module TEST"
       mode: "delete"
 
   - name: CREATE Profile
     fmgr_secprof_dns:
-      host: "{{inventory_hostname}}"
-      username: "{{ username }}"
-      password: "{{ password }}"
       name: "Ansible_DNS_Profile"
       comment: "Created by Ansible Module TEST"
       mode: "set"
@@ -227,15 +208,15 @@ api_result:
 """
 
 from ansible.module_utils.basic import AnsibleModule, env_fallback
-from ansible.module_utils.network.fortimanager.fortimanager import AnsibleFortiManager
-
-# check for pyFMG lib
-try:
-    from pyFMG.fortimgr import FortiManager
-
-    HAS_PYFMGR = True
-except ImportError:
-    HAS_PYFMGR = False
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortimanager.fortimanager import FortiManagerHandler
+from ansible.module_utils.network.fortimanager.common import FMGBaseException
+from ansible.module_utils.network.fortimanager.common import FMGRCommon
+from ansible.module_utils.network.fortimanager.common import FMGRMethods
+from ansible.module_utils.network.fortimanager.common import DEFAULT_RESULT_OBJ
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
+from ansible.module_utils.network.fortimanager.common import prepare_dict
+from ansible.module_utils.network.fortimanager.common import scrub_dict
 
 
 ###############
@@ -243,9 +224,14 @@ except ImportError:
 ###############
 
 
-def fmgr_dnsfilter_profile_addsetdelete(fmg, paramgram):
+def fmgr_dnsfilter_profile_modify(fmgr, paramgram):
     """
-    fmgr_dnsfilter_profile -- Your Description here, bruh
+    :param fmgr: The fmgr object instance from fortimanager.py
+    :type fmgr: class object
+    :param paramgram: The formatted dictionary of options to process
+    :type paramgram: dict
+    :return: The response from the FortiManager
+    :rtype: dict
     """
 
     mode = paramgram["mode"]
@@ -253,12 +239,12 @@ def fmgr_dnsfilter_profile_addsetdelete(fmg, paramgram):
     url = ""
     datagram = {}
 
-    response = (-100000, {"msg": "Illegal or malformed paramgram discovered. System Exception"})
+    response = DEFAULT_RESULT_OBJ
 
     # EVAL THE MODE PARAMETER FOR SET OR ADD
     if mode in ['set', 'add', 'update']:
         url = '/pm/config/adom/{adom}/obj/dnsfilter/profile'.format(adom=adom)
-        datagram = fmgr_del_none(fmgr_prepare_dict(paramgram))
+        datagram = scrub_dict(prepare_dict(paramgram))
 
     # EVAL THE MODE PARAMETER FOR DELETE
     elif mode == "delete":
@@ -266,128 +252,11 @@ def fmgr_dnsfilter_profile_addsetdelete(fmg, paramgram):
         url = '/pm/config/adom/{adom}/obj/dnsfilter/profile/{name}'.format(adom=adom, name=paramgram["name"])
         datagram = {}
 
-    # IF MODE = SET -- USE THE 'SET' API CALL MODE
-    if mode == "set":
-        response = fmg.set(url, datagram)
-    # IF MODE = UPDATE -- USER THE 'UPDATE' API CALL MODE
-    elif mode == "update":
-        response = fmg.update(url, datagram)
-    # IF MODE = ADD  -- USE THE 'ADD' API CALL MODE
-    elif mode == "add":
-        response = fmg.add(url, datagram)
-    # IF MODE = DELETE  -- USE THE DELETE URL AND API CALL MODE
-    elif mode == "delete":
-        response = fmg.delete(url, datagram)
+    response = fmgr.process_request(url, datagram, paramgram["mode"])
 
     return response
 
 
-# ADDITIONAL COMMON FUNCTIONS
-# FUNCTION/METHOD FOR LOGGING OUT AND ANALYZING ERROR CODES
-def fmgr_logout(fmg, module, msg="NULL", results=(), good_codes=(0,), logout_on_fail=True, logout_on_success=False):
-    """
-    THIS METHOD CONTROLS THE LOGOUT AND ERROR REPORTING AFTER AN METHOD OR FUNCTION RUNS
-    """
-
-    # VALIDATION ERROR (NO RESULTS, JUST AN EXIT)
-    if msg != "NULL" and len(results) == 0:
-        try:
-            fmg.logout()
-        except BaseException:
-            pass
-        module.fail_json(msg=msg)
-
-    # SUBMISSION ERROR
-    if len(results) > 0:
-        if msg == "NULL":
-            try:
-                msg = results[1]['status']['message']
-            except BaseException:
-                msg = "No status message returned from pyFMG. Possible that this was a GET with a tuple result."
-
-            if results[0] not in good_codes:
-                if logout_on_fail:
-                    fmg.logout()
-                    module.fail_json(msg=msg, **results[1])
-                else:
-                    return msg
-            else:
-                if logout_on_success:
-                    fmg.logout()
-                    module.exit_json(msg=msg, **results[1])
-                else:
-                    return msg
-
-
-# FUNCTION/METHOD FOR CONVERTING CIDR TO A NETMASK
-# DID NOT USE IP ADDRESS MODULE TO KEEP INCLUDES TO A MINIMUM
-def fmgr_cidr_to_netmask(cidr):
-    cidr = int(cidr)
-    mask = (0xffffffff >> (32 - cidr)) << (32 - cidr)
-    return (str((0xff000000 & mask) >> 24) + '.' +
-            str((0x00ff0000 & mask) >> 16) + '.' +
-            str((0x0000ff00 & mask) >> 8) + '.' +
-            str((0x000000ff & mask)))
-
-
-# utility function: removing keys wih value of None, nothing in playbook for that key
-def fmgr_del_none(obj):
-    if isinstance(obj, dict):
-        return type(obj)((fmgr_del_none(k), fmgr_del_none(v))
-                         for k, v in obj.items() if k is not None and (v is not None and not fmgr_is_empty_dict(v)))
-    else:
-        return obj
-
-
-# utility function: remove keys that are need for the logic but the FMG API won't accept them
-def fmgr_prepare_dict(obj):
-    list_of_elems = ["mode", "adom", "host", "username", "password"]
-    if isinstance(obj, dict):
-        obj = dict((key, fmgr_prepare_dict(value)) for (key, value) in obj.items() if key not in list_of_elems)
-    return obj
-
-
-def fmgr_is_empty_dict(obj):
-    return_val = False
-    if isinstance(obj, dict):
-        if len(obj) > 0:
-            for k, v in obj.items():
-                if isinstance(v, dict):
-                    if len(v) == 0:
-                        return_val = True
-                    elif len(v) > 0:
-                        for k1, v1 in v.items():
-                            if v1 is None:
-                                return_val = True
-                            elif v1 is not None:
-                                return_val = False
-                                return return_val
-                elif v is None:
-                    return_val = True
-                elif v is not None:
-                    return_val = False
-                    return return_val
-        elif len(obj) == 0:
-            return_val = True
-
-    return return_val
-
-
-def fmgr_split_comma_strings_into_lists(obj):
-    if isinstance(obj, dict):
-        if len(obj) > 0:
-            for k, v in obj.items():
-                if isinstance(v, str):
-                    new_list = list()
-                    if "," in v:
-                        new_items = v.split(",")
-                        for item in new_items:
-                            new_list.append(item.strip())
-                        obj[k] = new_list
-
-    return obj
-
-
 #############
 # END METHODS
 #############
@@ -396,9 +265,6 @@ def fmgr_split_comma_strings_into_lists(obj):
 def main():
     argument_spec = dict(
         adom=dict(type="str", default="root"),
-        host=dict(required=True, type="str"),
-        password=dict(fallback=(env_fallback, ["ANSIBLE_NET_PASSWORD"]), no_log=True, required=True),
-        username=dict(fallback=(env_fallback, ["ANSIBLE_NET_USERNAME"]), no_log=True, required=True),
         mode=dict(choices=["add", "set", "delete", "update"], type="str", default="add"),
 
         youtube_restrict=dict(required=False, type="str", choices=["strict", "moderate"]),
@@ -423,8 +289,7 @@ def main():
 
     )
 
-    module = AnsibleModule(argument_spec, supports_check_mode=False)
-
+    module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=False, )
     # MODULE PARAMGRAM
     paramgram = {
         "mode": module.params["mode"],
@@ -453,30 +318,26 @@ def main():
         }
     }
 
-    # CHECK IF THE HOST/USERNAME/PW EXISTS, AND IF IT DOES, LOGIN.
-    host = module.params["host"]
-    password = module.params["password"]
-    username = module.params["username"]
-    if host is None or username is None or password is None:
-        module.fail_json(msg="Host and username and password are required")
-
-    # CHECK IF LOGIN FAILED
-    fmg = AnsibleFortiManager(module, module.params["host"], module.params["username"], module.params["password"])
+    module.paramgram = paramgram
+    fmgr = None
+    if module._socket_path:
+        connection = Connection(module._socket_path)
+        fmgr = FortiManagerHandler(connection, module)
+        fmgr.tools = FMGRCommon()
+    else:
+        module.fail_json(**FAIL_SOCKET_MSG)
 
-    response = fmg.login()
-    if response[1]['status']['code'] != 0:
-        module.fail_json(msg="Connection to FortiManager Failed")
+    results = DEFAULT_RESULT_OBJ
 
-    results = fmgr_dnsfilter_profile_addsetdelete(fmg, paramgram)
-    if results[0] != 0:
-        fmgr_logout(fmg, module, results=results, good_codes=[0])
+    try:
+        results = fmgr_dnsfilter_profile_modify(fmgr, paramgram)
+        fmgr.govern_response(module=module, results=results,
+                             ansible_facts=fmgr.construct_ansible_facts(results, module.params, paramgram))
 
-    fmg.logout()
+    except Exception as err:
+        raise FMGBaseException(err)
 
-    if results is not None:
-        return module.exit_json(**results[1])
-    else:
-        return module.exit_json(msg="No results were returned from the API call.")
+    return module.exit_json(**results[1])
 
 
 if __name__ == "__main__":
diff --git a/test/units/modules/network/fortimanager/fixtures/test_fmgr_secprof_dns.json b/test/units/modules/network/fortimanager/fixtures/test_fmgr_secprof_dns.json
index eac142b6e1..3d436380e7 100644
--- a/test/units/modules/network/fortimanager/fixtures/test_fmgr_secprof_dns.json
+++ b/test/units/modules/network/fortimanager/fixtures/test_fmgr_secprof_dns.json
@@ -1,76 +1,45 @@
 {
-   "fmgr_dnsfilter_profile_addsetdelete": [
-      {
-         "paramgram_used": {
-            "comment": "Created by Ansible Module TEST", 
-            "ftgd-dns": {
-               "options": null, 
-               "filters": {
-                  "action": null, 
-                  "category": null, 
-                  "log": null
-               }
-            }, 
-            "name": "Ansible_DNS_Profile", 
-            "adom": "root", 
-            "redirect-portal": null, 
-            "sdns-ftgd-err-log": null, 
-            "youtube-restrict": null, 
-            "sdns-domain-log": null, 
-            "domain-filter": {
-               "domain-filter-table": null
-            }, 
-            "log-all-domain": null, 
-            "mode": "delete", 
-            "block-botnet": null, 
-            "safe-search": null, 
-            "external-ip-blocklist": null, 
-            "block-action": null
-         }, 
-         "raw_response": {
-            "status": {
-               "message": "OK", 
-               "code": 0
-            }, 
-            "url": "/pm/config/adom/root/obj/dnsfilter/profile/Ansible_DNS_Profile"
-         }, 
-         "post_method": "delete"
-      }, 
-      {
-         "raw_response": {
-            "status": {
-               "message": "OK", 
-               "code": 0
-            }, 
-            "url": "/pm/config/adom/root/obj/dnsfilter/profile"
-         }, 
-         "paramgram_used": {
-            "comment": "Created by Ansible Module TEST", 
-            "ftgd-dns": {
-               "options": null, 
-               "filters": {
-                  "action": null, 
-                  "category": null, 
-                  "log": null
-               }
-            }, 
-            "adom": "root", 
-            "youtube-restrict": null, 
-            "sdns-domain-log": null, 
-            "block-botnet": null, 
-            "external-ip-blocklist": null, 
-            "block-action": "block", 
-            "name": "Ansible_DNS_Profile", 
-            "redirect-portal": null, 
-            "sdns-ftgd-err-log": null, 
-            "safe-search": null, 
-            "domain-filter": {
-               "domain-filter-table": null
-            }, 
-            "log-all-domain": null, 
-            "mode": "set"
-         }, 
-         "post_method": "set"
-      }
-   ]
+    "fmgr_dnsfilter_profile_modify": [
+        {
+            "raw_response": {
+                "status": {
+                    "message": "OK",
+                    "code": 0
+                },
+                "url": "/pm/config/adom/root/obj/dnsfilter/profile"
+            },
+            "datagram_sent": {
+                "comment": "Created by Ansible Module TEST",
+                "name": "Ansible_DNS_Profile",
+                "block-action": "block"
+            },
+            "paramgram_used": {
+                "comment": "Created by Ansible Module TEST",
+                "ftgd-dns": {
+                    "options": null,
+                    "filters": {
+                        "action": null,
+                        "category": null,
+                        "log": null
+                    }
+                },
+                "adom": "root",
+                "youtube-restrict": null,
+                "sdns-domain-log": null,
+                "block-botnet": null,
+                "external-ip-blocklist": null,
+                "block-action": "block",
+                "name": "Ansible_DNS_Profile",
+                "redirect-portal": null,
+                "sdns-ftgd-err-log": null,
+                "safe-search": null,
+                "domain-filter": {
+                    "domain-filter-table": null
+                },
+                "log-all-domain": null,
+                "mode": "set"
+            },
+            "post_method": "set"
+        }
+    ]
 }
diff --git a/test/units/modules/network/fortimanager/test_fmgr_secprof_dns.py b/test/units/modules/network/fortimanager/test_fmgr_secprof_dns.py
index f621bbcff4..c4b995b22a 100644
--- a/test/units/modules/network/fortimanager/test_fmgr_secprof_dns.py
+++ b/test/units/modules/network/fortimanager/test_fmgr_secprof_dns.py
@@ -19,7 +19,7 @@ __metaclass__ = type
 
 import os
 import json
-from pyFMG.fortimgr import FortiManager
+from ansible.module_utils.network.fortimanager.fortimanager import FortiManagerHandler
 import pytest
 
 try:
@@ -27,8 +27,6 @@ try:
 except ImportError:
     pytest.skip("Could not load required modules for testing", allow_module_level=True)
 
-fmg_instance = FortiManager("1.1.1.1", "admin", "")
-
 
 def load_fixtures():
     fixture_path = os.path.join(os.path.dirname(__file__), 'fixtures') + "/{filename}.json".format(
@@ -41,33 +39,32 @@ def load_fixtures():
     return [fixture_data]
 
 
+@pytest.fixture(autouse=True)
+def module_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.module_utils.basic.AnsibleModule')
+    return connection_class_mock
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortimanager.fmgr_secprof_dns.Connection')
+    return connection_class_mock
+
+
 @pytest.fixture(scope="function", params=load_fixtures())
 def fixture_data(request):
     func_name = request.function.__name__.replace("test_", "")
     return request.param.get(func_name, None)
 
 
-def test_fmgr_dnsfilter_profile_addsetdelete(fixture_data, mocker):
-    mocker.patch("pyFMG.fortimgr.FortiManager._post_request", side_effect=fixture_data)
+fmg_instance = FortiManagerHandler(connection_mock, module_mock)
+
+
+def test_fmgr_dnsfilter_profile_modify(fixture_data, mocker):
+    mocker.patch("ansible.module_utils.network.fortimanager.fortimanager.FortiManagerHandler.process_request",
+                 side_effect=fixture_data)
     #  Fixture sets used:###########################
 
-    ##################################################
-    # comment: Created by Ansible Module TEST
-    # ftgd-dns: {'options': None, 'filters': {'action': None, 'category': None, 'log': None}}
-    # name: Ansible_DNS_Profile
-    # adom: root
-    # redirect-portal: None
-    # sdns-ftgd-err-log: None
-    # youtube-restrict: None
-    # sdns-domain-log: None
-    # domain-filter: {'domain-filter-table': None}
-    # log-all-domain: None
-    # mode: delete
-    # block-botnet: None
-    # safe-search: None
-    # external-ip-blocklist: None
-    # block-action: None
-    ##################################################
     ##################################################
     # comment: Created by Ansible Module TEST
     # ftgd-dns: {'options': None, 'filters': {'action': None, 'category': None, 'log': None}}
@@ -87,8 +84,5 @@ def test_fmgr_dnsfilter_profile_addsetdelete(fixture_data, mocker):
     ##################################################
 
     # Test using fixture 1 #
-    output = fmgr_secprof_dns.fmgr_dnsfilter_profile_addsetdelete(fmg_instance, fixture_data[0]['paramgram_used'])
-    assert output['raw_response']['status']['code'] == 0
-    # Test using fixture 2 #
-    output = fmgr_secprof_dns.fmgr_dnsfilter_profile_addsetdelete(fmg_instance, fixture_data[1]['paramgram_used'])
+    output = fmgr_secprof_dns.fmgr_dnsfilter_profile_modify(fmg_instance, fixture_data[0]['paramgram_used'])
     assert output['raw_response']['status']['code'] == 0
