commit 9aff204f63db586ca26e1a9aca08a1771138e2bf
Author: Will Thames <will@thames.id.au>
Date:   Wed Apr 8 13:00:50 2015 +1000

    Usage is not a valid database or table privilege
    
    Remove `USAGE` from the `VALID_PRIVS` dict for both database and
    table because it is not a valid privilege for either (and
    breaks the implementation of `has_table_privilege` and
    `has_database_privilege`
    
    See http://www.postgresql.org/docs/9.0/static/sql-grant.html

diff --git a/lib/ansible/modules/database/postgresql/postgresql_user.py b/lib/ansible/modules/database/postgresql/postgresql_user.py
index ef8da10dbb..0ad8c65eb1 100644
--- a/lib/ansible/modules/database/postgresql/postgresql_user.py
+++ b/lib/ansible/modules/database/postgresql/postgresql_user.py
@@ -174,8 +174,8 @@ else:
 _flags = ('SUPERUSER', 'CREATEROLE', 'CREATEUSER', 'CREATEDB', 'INHERIT', 'LOGIN', 'REPLICATION')
 VALID_FLAGS = frozenset(itertools.chain(_flags, ('NO%s' % f for f in _flags)))
 
-VALID_PRIVS = dict(table=frozenset(('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'TRUNCATE', 'REFERENCES', 'TRIGGER', 'ALL', 'USAGE')),
-        database=frozenset(('CREATE', 'CONNECT', 'TEMPORARY', 'TEMP', 'ALL', 'USAGE')),
+VALID_PRIVS = dict(table=frozenset(('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'TRUNCATE', 'REFERENCES', 'TRIGGER', 'ALL')),
+        database=frozenset(('CREATE', 'CONNECT', 'TEMPORARY', 'TEMP', 'ALL')),
         )
 
 # map to cope with idiosyncracies of SUPERUSER and LOGIN
@@ -325,6 +325,8 @@ def user_delete(cursor, user):
     return True
 
 def has_table_privilege(cursor, user, table, priv):
+    if priv == 'ALL':
+        priv = ','.join([ p for p in VALID_PRIVS['table'] if p != 'ALL' ])
     query = 'SELECT has_table_privilege(%s, %s, %s)'
     cursor.execute(query, (user, table, priv))
     return cursor.fetchone()[0]
@@ -378,6 +380,8 @@ def get_database_privileges(cursor, user, db):
     return o
 
 def has_database_privilege(cursor, user, db, priv):
+    if priv == 'ALL':
+        priv = ','.join([ p for p in VALID_PRIVS['database'] if p != 'ALL' ])
     query = 'SELECT has_database_privilege(%s, %s, %s)'
     cursor.execute(query, (user, db, priv))
     return cursor.fetchone()[0]
