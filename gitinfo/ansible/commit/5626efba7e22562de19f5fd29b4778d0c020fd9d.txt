commit 5626efba7e22562de19f5fd29b4778d0c020fd9d
Author: Paul Bonser <pib@paulbonser.com>
Date:   Mon Dec 2 19:51:10 2013 -0600

    Optionally unarchive a file already on the remote machine

diff --git a/lib/ansible/runner/action_plugins/unarchive.py b/lib/ansible/runner/action_plugins/unarchive.py
index f0b9dee945..16f4a8e46f 100644
--- a/lib/ansible/runner/action_plugins/unarchive.py
+++ b/lib/ansible/runner/action_plugins/unarchive.py
@@ -48,25 +48,28 @@ class ActionModule(object):
         options.update(utils.parse_kv(module_args))
         source  = options.get('src', None)
         dest    = options.get('dest', None)
+        copy    = options.get('copy', True)
 
         if source is None or dest is None:
             result=dict(failed=True, msg="src (or content) and dest are required")
             return ReturnData(conn=conn, result=result)
 
         source = template.template(self.runner.basedir, source, inject)
-        if '_original_file' in inject:
-            source = utils.path_dwim_relative(inject['_original_file'], 'files', source, self.runner.basedir)
-        else:
-            source = utils.path_dwim(self.runner.basedir, source)
+        if copy:
+            if '_original_file' in inject:
+                source = utils.path_dwim_relative(inject['_original_file'], 'files', source, self.runner.basedir)
+            else:
+                source = utils.path_dwim(self.runner.basedir, source)
 
         remote_md5 = self.runner._remote_md5(conn, tmp, dest)
         if remote_md5 != '3':
             result = dict(failed=True, msg="dest must be an existing dir")
             return ReturnData(conn=conn, result=result)
 
-        # transfer the file to a remote tmp location
-        tmp_src = tmp + 'source'
-        conn.put_file(source, tmp_src)
+        if copy:
+            # transfer the file to a remote tmp location
+            tmp_src = tmp + 'source'
+            conn.put_file(source, tmp_src)
 
         # handle diff mode client side
         # handle check mode client side
diff --git a/library/files/unarchive b/library/files/unarchive
index d85ae3cc59..02c94cdb41 100644
--- a/library/files/unarchive
+++ b/library/files/unarchive
@@ -37,6 +37,12 @@ options:
       - Remote absolute path where the archive should be unpacked
     required: true
     default: null
+  copy:
+    description:
+      - Should the file be copied from the local to the remote machine?
+    required: false
+    choices: [ "yes", "no" ]
+    default: "yes"
 author: Dylan Martin 
 todo:
     - detect changed/unchanged for .zip files
@@ -153,6 +159,7 @@ def main():
             src               = dict(required=True),
             original_basename = dict(required=False), # used to handle 'dest is a directory' via template, a slight hack
             dest              = dict(required=True),
+            copy              = dict(default=True, type='bool'),
         ),
         add_file_common_args=True,
     )
@@ -162,7 +169,10 @@ def main():
 
     # did tar file arrive?
     if not os.path.exists(src):
-        module.fail_json(msg="Source '%s' failed to transfer" % (src))
+        if copy:
+            module.fail_json(msg="Source '%s' failed to transfer" % (src))
+        else:
+            module.fail_json(msg="Source '%s' does not exist" % (src))
     if not os.access(src, os.R_OK):
         module.fail_json(msg="Source '%s' not readable" % (src))
 
