commit 31c7a61f9d4ccf3ea44c0ddea084a82afa632c59
Author: Matt Clay <matt@mystile.com>
Date:   Mon Aug 5 13:29:50 2019 -0700

    Clean up old ansible-test references and code. (#60103)
    
    * Remove obsolete ansible-test retry.py.
    * Use ansible-test from bin/ intead of test/runner/.

diff --git a/docs/bin/testing_formatter.sh b/docs/bin/testing_formatter.sh
index 4f18d0891b..8db81bf030 100755
--- a/docs/bin/testing_formatter.sh
+++ b/docs/bin/testing_formatter.sh
@@ -16,7 +16,7 @@ For information on how to run these tests, see :ref:\`sanity testing guide <test
 .. toctree::
    :maxdepth: 1
 
-$(for test in $(../../test/runner/ansible-test sanity --list-tests --allow-disabled); do echo "   ${test}"; done)
+$(for test in $(../../bin/ansible-test sanity --list-tests --allow-disabled); do echo "   ${test}"; done)
 
 EOF
 
diff --git a/test/runner/retry.py b/test/runner/retry.py
deleted file mode 100755
index 24af14ec9d..0000000000
--- a/test/runner/retry.py
+++ /dev/null
@@ -1,118 +0,0 @@
-#!/usr/bin/env python
-# PYTHON_ARGCOMPLETE_OK
-"""Automatically retry failed commands."""
-from __future__ import (absolute_import, division, print_function)
-__metaclass__ = type
-
-# noinspection PyCompatibility
-import argparse
-import errno
-import os
-import sys
-import time
-
-from lib.util import (
-    display,
-    raw_command,
-    ApplicationError,
-    ApplicationWarning,
-    SubprocessError,
-)
-
-try:
-    import argcomplete
-except ImportError:
-    argcomplete = None
-
-
-def main():
-    """Main program function."""
-    try:
-        args = parse_args()
-        display.verbosity = args.verbosity
-        display.color = args.color
-
-        command = [args.command] + args.args
-
-        for attempt in range(0, args.tries):
-            if attempt > 0:
-                time.sleep(args.sleep)
-
-            try:
-                raw_command(command, env=os.environ)
-                return
-            except SubprocessError as ex:
-                display.error(ex)
-    except ApplicationWarning as ex:
-        display.warning(str(ex))
-        exit(0)
-    except ApplicationError as ex:
-        display.error(str(ex))
-        exit(1)
-    except KeyboardInterrupt:
-        exit(2)
-    except IOError as ex:
-        if ex.errno == errno.EPIPE:
-            exit(3)
-        raise
-
-
-def parse_args():
-    """Parse command line arguments."""
-    parser = argparse.ArgumentParser()
-
-    parser.add_argument('-v', '--verbose',
-                        dest='verbosity',
-                        action='count',
-                        default=0,
-                        help='display more output')
-
-    parser.add_argument('--color',
-                        metavar='COLOR',
-                        nargs='?',
-                        help='generate color output: %(choices)s',
-                        choices=('yes', 'no', 'auto'),
-                        const='yes',
-                        default='auto')
-
-    # noinspection PyTypeChecker
-    parser.add_argument('--tries',
-                        metavar='TRIES',
-                        type=int,
-                        default=3,
-                        help='number of tries to execute command (default: %(default)s)')
-
-    # noinspection PyTypeChecker
-    parser.add_argument('--sleep',
-                        metavar='SECONDS',
-                        type=int,
-                        default=3,
-                        help='seconds to sleep between tries (default: %(default)s)')
-
-    parser.add_argument('command',
-                        help='command to execute')
-
-    parser.add_argument('args',
-                        metavar='...',
-                        nargs=argparse.REMAINDER,
-                        help='optional arguments for command')
-
-    if argcomplete:
-        argcomplete.autocomplete(parser)
-
-    args = parser.parse_args()
-
-    if args.color == 'yes':
-        args.color = True
-    elif args.color == 'no':
-        args.color = False
-    elif 'SHIPPABLE' in os.environ:
-        args.color = True
-    else:
-        args.color = sys.stdout.isatty()
-
-    return args
-
-
-if __name__ == '__main__':
-    main()
diff --git a/test/utils/dci/dci-coverage.sh b/test/utils/dci/dci-coverage.sh
index 249844eb36..42eba4554b 100755
--- a/test/utils/dci/dci-coverage.sh
+++ b/test/utils/dci/dci-coverage.sh
@@ -9,7 +9,7 @@ if find test/results/coverage/ -mindepth 1 -name '.*' -prune -o -print -quit | g
     stub=""
 
     # shellcheck disable=SC2086
-    test/runner/ansible-test coverage xml -v --requirements --group-by command --group-by version ${stub:+"$stub"}
+    bin/ansible-test coverage xml -v --requirements --group-by command --group-by version ${stub:+"$stub"}
 
     # upload coverage report to codecov.io
     for file in test/results/reports/coverage=*.xml; do
