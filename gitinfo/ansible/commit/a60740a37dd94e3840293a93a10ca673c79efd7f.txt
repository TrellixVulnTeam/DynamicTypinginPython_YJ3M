commit a60740a37dd94e3840293a93a10ca673c79efd7f
Author: Chris Archibald <carchi@netapp.com>
Date:   Thu Feb 21 07:13:45 2019 -0800

    New Module: na_ontap_vscan_on_demand_task  (#51183)
    
    * changes to clusteR
    
    * Revert "changes to clusteR"
    
    This reverts commit 33ee1b71e4bc8435fb315762a871f8c4cb6c5f80.
    
    * Add vscan on demand task
    
    * fix author line

diff --git a/lib/ansible/modules/storage/netapp/na_ontap_vscan_on_demand_task.py b/lib/ansible/modules/storage/netapp/na_ontap_vscan_on_demand_task.py
new file mode 100644
index 0000000000..cca7227070
--- /dev/null
+++ b/lib/ansible/modules/storage/netapp/na_ontap_vscan_on_demand_task.py
@@ -0,0 +1,313 @@
+#!/usr/bin/python
+
+# (c) 2018-2019, NetApp, Inc
+# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
+
+from __future__ import absolute_import, division, print_function
+
+__metaclass__ = type
+
+ANSIBLE_METADATA = {'metadata_version': '1.1',
+                    'status': ['preview'],
+                    'supported_by': 'certified'}
+
+DOCUMENTATION = '''
+module: na_ontap_vscan_on_demand_task
+short_description: NetApp ONTAP Vscan on demand task configuration.
+extends_documentation_fragment:
+    - netapp.na_ontap
+version_added: '2.8'
+author: NetApp Ansible Team (@carchi8py) <ng-ansibleteam@netapp.com>
+description:
+- Configure on demand task for Vscan
+options:
+  state:
+    description:
+    - Whether a Vscan on demand task is present or not
+    choices: ['present', 'absent']
+    default: present
+
+  vserver:
+    description:
+    - the name of the data vserver to use.
+    required: true
+
+  cross_junction:
+    description:
+    - Specifies whether the On-Demand task is allowed to cross volume junctions
+    type: bool
+    default: False
+
+  directory_recursion:
+    description:
+    - Specifies whether the On-Demand task is allowed to recursively scan through sub-directories.
+    type: bool
+    default: False
+
+  file_ext_to_exclude:
+    description:
+    - File-Extensions for which scanning must not be performed.
+    - File whose extension matches with both inclusion and exclusion list is not considered for scanning.
+    type: list
+
+  file_ext_to_include:
+    description:
+    - File extensions for which scanning is considered.
+    - The default value is '*', which means that all files are considered for scanning except those which are excluded from scanning.
+    - File whose extension matches with both inclusion and exclusion list is not considered for scanning.
+    type: list
+
+  max_file_size:
+    description:
+    - Max file-size (in bytes) allowed for scanning. The default value of 10737418240 (10GB) is taken if not provided at the time of creating a task.
+
+  paths_to_exclude:
+    description:
+    - File-paths for which scanning must not be performed.
+    type: list
+
+  report_directory:
+    description:
+    - Path from the vserver root where task report is created. The path must be a directory and provided in unix-format from the root of the Vserver.
+    - Example /vol1/on-demand-reports.
+
+  report_log_level:
+    description:
+    - Log level for the On-Demand report.
+    choices: ['verbose', 'info', 'error']
+    default: error
+
+  request_timeout:
+    description:
+    - Total request-service time-limit in seconds. If the virus-scanner does not respond within the provided time, scan will be timedout.
+
+  scan_files_with_no_ext:
+    description:
+    - Specifies whether files without any extension are considered for scanning or not.
+    type: bool
+    default: True
+
+  scan_paths:
+    description:
+    - List of paths that need to be scanned. The path must be provided in unix-format and from the root of the Vserver.
+    - Example /vol1/large_files.
+    type: list
+
+  scan_priority:
+    description:
+    - Priority of the On-Demand scan requests generated by this task.
+    choices: ['low', 'normal']
+    default: low
+
+  schedule:
+    description:
+    - Schedule of the task. The task will be run as per the schedule.
+    - For running the task immediately, vscan-on-demand-task-run api must be used after creating a task.
+
+  task_name:
+    description:
+    - Name of the task.
+    required: True
+'''
+
+
+EXAMPLES = """
+    - name: Create Vscan On Demand Task
+      na_ontap_vscan_on_demand_task:
+        state: present
+        username: '{{ netapp_username }}'
+        password: '{{ netapp_password }}'
+        hostname: '{{ netapp_hostname }}'
+        vserver: carchi-vsim2
+        task_name: carchiOnDemand
+        scan_paths: /
+        report_directory: /
+        file_ext_to_exclude: ['py', 'yml']
+        max_file_size: 10737418241
+        paths_to_exclude: ['/tmp', '/var']
+        report_log_level: info
+        request_timeout: 60
+
+    - name: Delete Vscan On Demand Task
+      na_ontap_vscan_on_demand_task:
+        state: absent
+        username: '{{ netapp_username }}'
+        password: '{{ netapp_password }}'
+        hostname: '{{ netapp_hostname }}'
+        vserver: carchi-vsim2
+        task_name: carchiOnDemand
+"""
+
+RETURN = """
+
+"""
+
+import traceback
+
+from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils._text import to_native
+import ansible.module_utils.netapp as netapp_utils
+from ansible.module_utils.netapp_module import NetAppModule
+
+HAS_NETAPP_LIB = netapp_utils.has_netapp_lib()
+
+
+class NetAppOntapVscanOnDemandTask(object):
+    def __init__(self):
+        self.argument_spec = netapp_utils.na_ontap_host_argument_spec()
+        self.argument_spec.update(dict(
+            state=dict(choices=['present', 'absent'], default='present'),
+            vserver=dict(required=True, type='str'),
+            cross_junction=dict(required=False, type='bool', default=False),
+            directory_recursion=dict(required=False, type='bool', default=False),
+            file_ext_to_exclude=dict(required=False, type="list"),
+            file_ext_to_include=dict(required=False, type="list"),
+            max_file_size=dict(required=False, type="str"),
+            paths_to_exclude=dict(required=False, type="list"),
+            report_directory=dict(required=False, type='str'),
+            report_log_level=dict(required=False, choices=['verbose', 'info', 'error'], default='error'),
+            request_timeout=dict(required=False, type='str'),
+            scan_files_with_no_ext=dict(required=False, type=bool, default=True),
+            scan_paths=dict(required=False, type="list"),
+            scan_priority=dict(required=False, choices=['low', 'normal'], default='low'),
+            schedule=dict(required=False, type="str"),
+            task_name=dict(required=True, type="str")
+        ))
+        self.module = AnsibleModule(
+            argument_spec=self.argument_spec,
+            supports_check_mode=True,
+            required_if=[
+                ["state", "present", ["report_directory", "scan_paths"]]
+            ]
+        )
+        self.na_helper = NetAppModule()
+        self.parameters = self.na_helper.set_parameters(self.module.params)
+
+        if HAS_NETAPP_LIB is False:
+            self.module.fail_json(msg="the python NetApp-Lib module is required")
+        else:
+            self.server = netapp_utils.setup_na_ontap_zapi(module=self.module, vserver=self.parameters['vserver'])
+
+    def get_demand_task(self):
+        """
+        Get a demand task
+        :return: A vscan-on-demand-task-info or None
+        """
+        demand_task_iter = netapp_utils.zapi.NaElement("vscan-on-demand-task-get-iter")
+        demand_task_info = netapp_utils.zapi.NaElement("vscan-on-demand-task-info")
+        demand_task_info.add_new_child('task-name', self.parameters['task_name'])
+        query = netapp_utils.zapi.NaElement('query')
+        query.add_child_elem(demand_task_info)
+        demand_task_iter.add_child_elem(query)
+        try:
+            result = self.server.invoke_successfully(demand_task_iter, True)
+        except netapp_utils.zapi.NaApiError as error:
+            self.module.fail_json(msg='Error searching for Vscan on demand task %s: %s' %
+                                      (self.parameters['task_name'], to_native(error)),
+                                  exception=traceback.format_exc())
+        if result.get_child_by_name('num-records') and int(result.get_child_content('num-records')) >= 1:
+            return result.get_child_by_name('attributes-list').get_child_by_name('vscan-on-demand-task-info')
+        return None
+
+    def create_demand_task(self):
+        """
+        Create a Demand Task
+        :return: None
+        """
+        demand_task_obj = netapp_utils.zapi.NaElement("vscan-on-demand-task-create")
+        # Required items first
+        demand_task_obj.add_new_child('report-directory', self.parameters['report_directory'])
+        demand_task_obj.add_new_child('task-name', self.parameters['task_name'])
+        scan_paths = netapp_utils.zapi.NaElement("scan-paths")
+        for scan_path in self.parameters['scan_paths']:
+            scan_paths.add_new_child('string', scan_path)
+        demand_task_obj.add_child_elem(scan_paths)
+        # Optional items next
+        if self.parameters.get('cross_junction'):
+            demand_task_obj.add_new_child('cross-junction', str(self.parameters['cross_junction']).lower())
+        if self.parameters.get('directory_recursion'):
+            demand_task_obj.add_new_child('directory-recursion', str(self.parameters['directory_recursion']).lower())
+        if self.parameters.get('file_ext_to_exclude'):
+            ext_to_exclude_obj = netapp_utils.zapi.NaElement('file-ext-to-exclude')
+            for exclude_file in self.parameters['file_ext_to_exclude']:
+                ext_to_exclude_obj.add_new_child('file-extension', exclude_file)
+            demand_task_obj.add_child_elem(ext_to_exclude_obj)
+        if self.parameters.get('file_ext_to_include'):
+            ext_to_include_obj = netapp_utils.zapi.NaElement('file-ext-to-include')
+            for include_file in self.parameters['file_ext_to_exclude']:
+                ext_to_include_obj.add_child_elem('file-extension', include_file)
+            demand_task_obj.add_child_elem(ext_to_include_obj)
+        if self.parameters.get('max_file_size'):
+            demand_task_obj.add_new_child('max-file-size', self.parameters['max_file_size'])
+        if self.parameters.get('paths_to_exclude'):
+            exclude_paths = netapp_utils.zapi.NaElement('paths-to-exclude')
+            for path in self.parameters['paths_to_exclude']:
+                exclude_paths.add_new_child('string', path)
+            demand_task_obj.add_child_elem(exclude_paths)
+        if self.parameters.get('report_log_level'):
+            demand_task_obj.add_new_child('report-log-level', self.parameters['report_log_level'])
+        if self.parameters.get('request_timeout'):
+            demand_task_obj.add_new_child('request-timeout', self.parameters['request_timeout'])
+        if self.parameters.get('scan_files_with_no_ext'):
+            demand_task_obj.add_new_child('scan-files-with-no-ext', str(self.parameters['scan_files_with_no_ext']).lower())
+        if self.parameters.get('scan_priority'):
+            demand_task_obj.add_new_child('scan-priority', self.parameters['scan_priority'].lower())
+        if self.parameters.get('schedule'):
+            demand_task_obj.add_new_child('schedule', self.parameters['schedule'])
+        try:
+            result = self.server.invoke_successfully(demand_task_obj, True)
+        except netapp_utils.zapi.NaApiError as error:
+            self.module.fail_json(msg='Error creating on demand task %s: %s' %
+                                      (self.parameters['task_name'], to_native(error)),
+                                  exception=traceback.format_exc())
+
+    def delete_demand_task(self):
+        """
+        Delete a Demand Task"
+        :return:
+        """
+        demand_task_obj = netapp_utils.zapi.NaElement('vscan-on-demand-task-delete')
+        demand_task_obj.add_new_child('task-name', self.parameters['task_name'])
+        try:
+            self.server.invoke_successfully(demand_task_obj, True)
+        except netapp_utils.zapi.NaApiError as error:
+            self.module.fail_json(msg='Error deleting on demand task, %s: %s' %
+                                      (self.parameters['task_name'], to_native(error)),
+                                  exception=traceback.format_exc())
+
+    def asup_log_for_cserver(self, event_name):
+        """
+        Fetch admin vserver for the given cluster
+        Create and Autosupport log event with the given module name
+        :param event_name: Name of the event log
+        :return: None
+        """
+        results = netapp_utils.get_cserver(self.server)
+        cserver = netapp_utils.setup_na_ontap_zapi(module=self.module, vserver=results)
+        netapp_utils.ems_log_event(event_name, cserver)
+
+    def apply(self):
+        self.asup_log_for_cserver("na_ontap_vscan_on_demand_task")
+        current = self.get_demand_task()
+        cd_action = self.na_helper.get_cd_action(current, self.parameters)
+        if self.na_helper.changed:
+            if self.module.check_mode:
+                pass
+            else:
+                if cd_action == 'create':
+                    self.create_demand_task()
+                elif cd_action == 'delete':
+                    self.delete_demand_task()
+        self.module.exit_json(changed=self.na_helper.changed)
+
+
+def main():
+    """
+    Execute action from playbook
+    """
+    command = NetAppOntapVscanOnDemandTask()
+    command.apply()
+
+
+if __name__ == '__main__':
+    main()
diff --git a/test/units/modules/storage/netapp/test_na_ontap_vscan_on_demand_task.py b/test/units/modules/storage/netapp/test_na_ontap_vscan_on_demand_task.py
new file mode 100644
index 0000000000..544e0f6699
--- /dev/null
+++ b/test/units/modules/storage/netapp/test_na_ontap_vscan_on_demand_task.py
@@ -0,0 +1,167 @@
+''' unit tests for Ansible module: na_ontap_vscan_on_demand_task '''
+
+from __future__ import print_function
+import json
+import pytest
+
+from units.compat import unittest
+from units.compat.mock import patch, Mock
+from ansible.module_utils import basic
+from ansible.module_utils._text import to_bytes
+import ansible.module_utils.netapp as netapp_utils
+
+from ansible.modules.storage.netapp.na_ontap_vscan_on_demand_task \
+    import NetAppOntapVscanOnDemandTask as onDemand_module  # module under test
+
+if not netapp_utils.has_netapp_lib():
+    pytestmark = pytest.mark.skip('skipping as missing required netapp_lib')
+
+
+def set_module_args(args):
+    """prepare arguments so that they will be picked up during module creation"""
+    args = json.dumps({'ANSIBLE_MODULE_ARGS': args})
+    basic._ANSIBLE_ARGS = to_bytes(args)  # pylint: disable=protected-access
+
+
+class AnsibleExitJson(Exception):
+    """Exception class to be raised by module.exit_json and caught by the test case"""
+    pass
+
+
+class AnsibleFailJson(Exception):
+    """Exception class to be raised by module.fail_json and caught by the test case"""
+    pass
+
+
+def exit_json(*args, **kwargs):  # pylint: disable=unused-argument
+    """function to patch over exit_json; package return data into an exception"""
+    if 'changed' not in kwargs:
+        kwargs['changed'] = False
+    raise AnsibleExitJson(kwargs)
+
+
+def fail_json(*args, **kwargs):  # pylint: disable=unused-argument
+    """function to patch over fail_json; package return data into an exception"""
+    kwargs['failed'] = True
+    raise AnsibleFailJson(kwargs)
+
+
+class MockONTAPConnection(object):
+    ''' mock server connection to ONTAP host '''
+
+    def __init__(self, kind=None, data=None):
+        ''' save arguments '''
+        self.kind = kind
+        self.params = data
+        self.xml_in = None
+        self.xml_out = None
+
+    def invoke_successfully(self, xml, enable_tunneling):  # pylint: disable=unused-argument
+        ''' mock invoke_successfully returning xml data '''
+        self.xml_in = xml
+        if self.kind == 'task':
+            xml = self.build_onDemand_pool_info(self.params)
+        self.xml_out = xml
+        return xml
+
+    @staticmethod
+    def build_onDemand_pool_info(onDemand_details):
+        xml = netapp_utils.zapi.NaElement('xml')
+        attributes = {
+            'num-records': 1,
+            'attributes-list': {
+                'vscan-on-demand-task-info': {
+                    'task-name': onDemand_details['task_name'],
+                    'report-directory': onDemand_details['report_directory'],
+                    'scan-paths': {
+                        'string': onDemand_details['scan_paths']
+                    }
+                }
+            }
+        }
+        xml.translate_struct(attributes)
+        return xml
+
+
+class TestMyModule(unittest.TestCase):
+    ''' Unit tests for na_ontap_job_schedule '''
+
+    def setUp(self):
+        self.mock_module_helper = patch.multiple(basic.AnsibleModule,
+                                                 exit_json=exit_json,
+                                                 fail_json=fail_json)
+        self.mock_module_helper.start()
+        self.addCleanup(self.mock_module_helper.stop)
+        self.mock_onDemand = {
+            'state': 'present',
+            'vserver': 'test_vserver',
+            'report_directory': '/',
+            'task_name': '/',
+            'scan_paths': '/'
+        }
+
+    def mock_args(self):
+        return {
+            'state': self.mock_onDemand['state'],
+            'vserver': self.mock_onDemand['vserver'],
+            'report_directory': self.mock_onDemand['report_directory'],
+            'task_name': self.mock_onDemand['task_name'],
+            'scan_paths': self.mock_onDemand['scan_paths'],
+            'hostname': 'test',
+            'username': 'test_user',
+            'password': 'test_pass!'
+        }
+
+    def get_demand_mock_object(self, kind=None):
+        scanner_obj = onDemand_module()
+        scanner_obj.asup_log_for_cserver = Mock(return_value=None)
+        if kind is None:
+            scanner_obj.server = MockONTAPConnection()
+        else:
+            scanner_obj.server = MockONTAPConnection(kind='task', data=self.mock_onDemand)
+        return scanner_obj
+
+    def test_module_fail_when_required_args_missing(self):
+        ''' required arguments are reported as errors '''
+        with pytest.raises(AnsibleFailJson) as exc:
+            set_module_args({})
+            onDemand_module()
+        print('Info: %s' % exc.value.args[0]['msg'])
+
+    def test_get_nonexistent_demand_task(self):
+        set_module_args(self.mock_args())
+        result = self.get_demand_mock_object().get_demand_task()
+        assert not result
+
+    def test_get_existing_demand_task(self):
+        set_module_args(self.mock_args())
+        result = self.get_demand_mock_object('task').get_demand_task()
+        assert result
+
+    def test_successfully_create(self):
+        set_module_args(self.mock_args())
+        with pytest.raises(AnsibleExitJson) as exc:
+            self.get_demand_mock_object().apply()
+        assert exc.value.args[0]['changed']
+
+    def test_create_idempotency(self):
+        set_module_args(self.mock_args())
+        with pytest.raises(AnsibleExitJson) as exc:
+            self.get_demand_mock_object('task').apply()
+        assert not exc.value.args[0]['changed']
+
+    def test_successfully_delete(self):
+        data = self.mock_args()
+        data['state'] = 'absent'
+        set_module_args(data)
+        with pytest.raises(AnsibleExitJson) as exc:
+            self.get_demand_mock_object('task').apply()
+        assert exc.value.args[0]['changed']
+
+    def test_delete_idempotency(self):
+        data = self.mock_args()
+        data['state'] = 'absent'
+        set_module_args(data)
+        with pytest.raises(AnsibleExitJson) as exc:
+            self.get_demand_mock_object().apply()
+        assert not exc.value.args[0]['changed']
