commit 03647d64e9c8dd085f4cd9b67eb197cb72b2e00c
Author: Michael DeHaan <michael.dehaan@gmail.com>
Date:   Thu Feb 23 21:47:31 2012 -0500

    Update docs, added TODO.md

diff --git a/README.md b/README.md
index 1ef14a749e..71fc7f5015 100644
--- a/README.md
+++ b/README.md
@@ -3,24 +3,33 @@ Ansible
 
 Ansible is a extra-simple Python API for doing 'remote things' over SSH.  
 
-While [Func](http://fedorahosted.org/func), which I co-wrote, aspired to avoid using SSH and have it's own daemon infrastructure, Ansible aspires to be quite different and more minimal, but still able to grow more modularly over time.  This is based on talking to a lot of users of various tools and wishing to eliminate problems with connectivity and long running daemons, or not picking tool X because they preferred to code in Y.
-
-Why use Ansible versus something else?  (Fabric, Capistrano, mCollective, Func, SaltStack, etc?) It will have far less code, it will be more correct, and it will be the easiest thing to hack on and use you'll ever see -- regardless of your favorite language of choice.  Want to only code plugins in bash or clojure?  Ansible doesn't care.  The docs will fit on one page and the source will be blindingly obvious.
-
-Principles
-==========
+While [Func](http://fedorahosted.org/func), which I co-wrote, 
+aspired to avoid using SSH and have it's own daemon infrastructure, 
+Ansible aspires to be quite different and more minimal, but still able 
+to grow more modularly over time.  This is based on talking to a lot of 
+users of various tools and wishing to eliminate problems with connectivity 
+and long running daemons, or not picking tool X because they preferred to 
+code in Y.
+
+Why use Ansible versus something else?  (Fabric, Capistrano, mCollective, 
+Func, SaltStack, etc?) It will have far less code, it will be more correct, 
+and it will be the easiest thing to hack on and use you'll ever see -- 
+regardless of your favorite language of choice.  Want to only code plugins 
+in bash or clojure?  Ansible doesn't care.  The docs will fit on one page 
+and the source will be blindingly obvious.
+
+Design Principles
+=================
 
     * Dead simple setup
     * Super fast & parallel by default
     * No server or client daemons, uses existing SSHd
     * No additional software required on client boxes
-    * Everything is self updating on the clients.  "Modules" are remotely transferred to target boxes and exec'd, and do not stay active or consume resources.
-    * Only SSH keys are allowed for authentication
-    * usage of ssh-agent is more or less required (no passwords)
-    * plugins can be written in ANY language
-    * as with Func, API usage is an equal citizen to CLI usage
-    * use Python's multiprocessing capabilities to emulate Func's forkbomb logic
-    * all file paths can be specified as command line options easily allowing non-root usage
+    * Everything is self updating on the clients  
+    * Encourages use of ssh-agent
+    * Plugins can be written in ANY language
+    * API usage is an equal citizen to CLI usage
+    * Can be controlled/installed/used as non-root
 
 Requirements
 ============
@@ -33,11 +42,11 @@ For the server the tool is running from, *only*:
 Inventory file
 ==============
 
-The inventory file is a required list of hostnames that can be potentially managed by
-ansible.  Eventually this file may be editable via the CLI, but for now, is
-edited with your favorite text editor.
+The inventory file is a required list of hostnames that can be 
+potentially managed by ansible.  Eventually this file may be editable 
+via the CLI, but for now, is edited with your favorite text editor.
 
-The default inventory file (-H) is ~/.ansible_hosts and is a list
+The default inventory file (-H) is /etc/ansible/hosts and is a list
 of all hostnames to target with ansible, one per line.  These
 can be hostnames or IPs
 
@@ -71,8 +80,8 @@ The API is simple and returns basic datastructures.
     import ansible
     runner = ansible.Runner(
         pattern='*',
-        module_name='inventory', 
-        host_list=['xyz.example.com', '...']
+        module_name='inventory',
+        module_args='...' 
     )
     data = runner.run()
 
@@ -83,15 +92,15 @@ The API is simple and returns basic datastructures.
     }
 
 Additional options to Runner include the number of forks, hostname
-exclusion pattern, library path, arguments, and so on.  Read the source, it's not
-complicated.
+exclusion pattern, library path, arguments, and so on.  
+Read the source, it's not complicated.
 
 Patterns
 ========
 
 To target only hosts starting with "rtp", for example:
 
-   * ansible "rtp*" -n command -a "yum update apache"
+   * ansible -p "rtp*" -n command -a "yum update apache"
 
 Parallelism
 ===========
@@ -107,19 +116,21 @@ File Transfer
 
 Ansible can SCP lots of files to lots of places in parallel.
 
-   * ansible -f 10 -n copy -a "/etc/hosts /tmp/hosts"
+   * ansible -p "web-*.acme.net" -f 10 -n copy -a "/etc/hosts /tmp/hosts"
 
-Bundled Modules
-===============
+Ansible Library (Bundled Modules)
+=================================
 
 See the example library for modules, they can be written in any language
 and simply return JSON to stdout.  The path to your ansible library is
 specified with the "-L" flag should you wish to use a different location
-than "~/ansible".  There is potential for a sizeable community to build
+than "/usr/share/ansible".  This means anyone can use Ansible, even without
+root permissions.
+
+There is potential for a sizeable community to build 
 up around the library scripts.
 
-Existing library modules
-========================
+Modules include:
 
    * command -- runs commands, giving output, return codes, and run time info
    * ping - just returns if the system is up or not
@@ -129,16 +140,7 @@ Existing library modules
 Future plans
 ============
 
-   * modules for users, groups, and files, using puppet style ensure mechanics
-   * ansible-inventory -- gathering fact/hw info, storing in git, adding RSS
-   * ansible-slurp ------ recursively rsync file trees for each host
-   * very simple option constructing/parsing for modules
-   * Dead-simple declarative configuration management engine using
-     a runbook style recipe file, written in JSON or YAML
-   * maybe it's own fact engine, not required, that also feeds from facter
-   * add/remove/list hosts from the command line
-   * list available modules from command line
-   * filter exclusion (run this only if fact is true/false)
+   * see TODO.md
 
 License
 =======
@@ -148,8 +150,8 @@ License
 Author
 ======
 
-    Michael DeHaan -- michael.dehaan@gmail.com
+Michael DeHaan -- michael.dehaan@gmail.com
 
-    [http://michaeldehaan.net](http://michaeldehaan.net/)
+[http://michaeldehaan.net](http://michaeldehaan.net/)
 
 
diff --git a/TODO.md b/TODO.md
new file mode 100644
index 0000000000..9dcc533c01
--- /dev/null
+++ b/TODO.md
@@ -0,0 +1,15 @@
+TODO list and plans
+===================
+
+   * make remote user settable versus assuming remote login is named root
+   * modules for users, groups, and files, using puppet style ensure mechanics
+   * ansible-inventory -- gathering fact/hw info, storing in git, adding RSS
+   * ansible-slurp ------ recursively rsync file trees for each host
+   * very simple option constructing/parsing for modules
+   * Dead-simple declarative configuration management engine using
+     a runbook style recipe file, written in JSON or YAML
+   * maybe it's own fact engine, not required, that also feeds from facter
+   * add/remove/list hosts from the command line
+   * list available modules from command line
+   * filter exclusion (run this only if fact is true/false)
+
