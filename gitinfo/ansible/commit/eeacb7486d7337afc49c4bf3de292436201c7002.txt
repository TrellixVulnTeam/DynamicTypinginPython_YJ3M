commit eeacb7486d7337afc49c4bf3de292436201c7002
Author: Monty Taylor <mordred@inaugust.com>
Date:   Tue Mar 31 17:05:43 2015 -0400

    Add OpenStack Network module
    
    Also, deprecate the old quantum network module

diff --git a/lib/ansible/modules/cloud/openstack/quantum_network.py b/lib/ansible/modules/cloud/openstack/_quantum_network.py
similarity index 99%
rename from lib/ansible/modules/cloud/openstack/quantum_network.py
rename to lib/ansible/modules/cloud/openstack/_quantum_network.py
index 6b0c66e7a1..3a35b7836e 100644
--- a/lib/ansible/modules/cloud/openstack/quantum_network.py
+++ b/lib/ansible/modules/cloud/openstack/_quantum_network.py
@@ -29,6 +29,7 @@ DOCUMENTATION = '''
 ---
 module: quantum_network
 version_added: "1.4"
+deprecated: Deprecated in 2.0. Use os_network instead
 short_description: Creates/Removes networks from OpenStack
 description:
    - Add or Remove network from OpenStack.
diff --git a/lib/ansible/modules/cloud/openstack/os_network.py b/lib/ansible/modules/cloud/openstack/os_network.py
new file mode 100644
index 0000000000..b77a7e331a
--- /dev/null
+++ b/lib/ansible/modules/cloud/openstack/os_network.py
@@ -0,0 +1,107 @@
+#!/usr/bin/python
+
+# Copyright (c) 2014 Hewlett-Packard Development Company, L.P.
+# Copyright (c) 2013, Benno Joy <benno@ansible.com>
+#
+# This module is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This software is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this software.  If not, see <http://www.gnu.org/licenses/>.
+
+try:
+    import shade
+    HAS_SHADE = True
+except ImportError:
+    HAS_SHADE = False
+
+DOCUMENTATION = '''
+---
+module: os_network
+short_description: Creates/Removes networks from OpenStack
+extends_documentation_fragment: openstack
+version_added: "2.0"
+description:
+   - Add or Remove network from OpenStack.
+options:
+   name:
+     description:
+        - Name to be assigned to the network.
+     required: true
+   shared:
+     description:
+        - Whether this network is shared or not.
+     required: false
+     default: false
+   admin_state_up:
+     description:
+        - Whether the state should be marked as up or down.
+     required: false
+     default: true
+   state:
+     description:
+        - Indicate desired state of the resource.
+     choices: ['present', 'absent']
+     required: false
+     default: present
+requirements: ["shade"]
+'''
+
+EXAMPLES = '''
+- os_network:
+    name=t1network
+    state=present
+'''
+
+
+def main():
+    argument_spec = openstack_full_argument_spec(
+        name=dict(required=True),
+        shared=dict(default=False, type='bool'),
+        admin_state_up=dict(default=True, type='bool'),
+    )
+
+    module_kwargs = openstack_module_kwargs()
+    module = AnsibleModule(argument_spec, **module_kwargs)
+
+    if not HAS_SHADE:
+        module.fail_json(msg='shade is required for this module')
+
+    state = module.params['state']
+    name = module.params['name']
+    shared = module.params['shared']
+    admin_state_up = module.params['admin_state_up']
+
+    try:
+        cloud = shade.openstack_cloud(**module.params)
+        net = cloud.get_network(name)
+
+        if state == 'present':
+            if not net:
+                net = cloud.create_network(name, shared, admin_state_up)
+                module.exit_json(changed=True, result="Created", id=net['id'])
+            else:
+                module.exit_json(changed=False, result="Success", id=net['id'])
+
+        elif state == 'absent':
+            if not net:
+                module.exit_json(changed=False, result="Success")
+            else:
+                cloud.delete_network(name)
+                module.exit_json(changed=True, result="Deleted")
+
+    except shade.OpenStackCloudException as e:
+        module.fail_json(msg=e.message)
+
+
+# this is magic, see lib/ansible/module_common.py
+from ansible.module_utils.basic import *
+from ansible.module_utils.openstack import *
+main()
