commit 37adadcc508f3223009feb725e49175b59043bbf
Author: Michael DeHaan <michael.dehaan@gmail.com>
Date:   Mon Mar 12 23:12:21 2012 -0400

    Updating docs, added extensive info on playbook async + external vars_files for keeping variables outside of
    the playbook file.

diff --git a/faq.html b/faq.html
index 1c891155a2..90e5577400 100644
--- a/faq.html
+++ b/faq.html
@@ -320,7 +320,7 @@ Stop by the mailing list if you have ideas.</p>
 example is for configuration management where you
 are starting from a clean OS with no extra software installed, adopting systems
 that are already deployed.</p>
-<p>Ansible is also great for running ad-hoc tasks across a wide variety of Linux, Unix, and <a href="#id1"><span class="problematic" id="id2">*</span></a>BSDs.
+<p>Ansible is also great for running ad-hoc tasks across a wide variety of Linux, Unix, and BSDs.
 Because it just uses the basic tools available on the system, it is exceptionally cross platform
 without needing to install management packages on each node.</p>
 <p>It also excels for writing distributed
diff --git a/index.html b/index.html
index e52c8c2269..4ac9cbe71c 100644
--- a/index.html
+++ b/index.html
@@ -279,14 +279,19 @@ you with questions about Ansible.</p>
 <li class="toctree-l1"><a class="reference internal" href="playbooks.html">Playbooks</a><ul>
 <li class="toctree-l2"><a class="reference internal" href="playbooks.html#playbook-example">Playbook Example</a></li>
 <li class="toctree-l2"><a class="reference internal" href="playbooks.html#hosts-line">Hosts line</a></li>
+<li class="toctree-l2"><a class="reference internal" href="playbooks.html#user-line">User line</a></li>
 <li class="toctree-l2"><a class="reference internal" href="playbooks.html#vars-section">Vars section</a></li>
 <li class="toctree-l2"><a class="reference internal" href="playbooks.html#tasks-list">Tasks list</a></li>
 <li class="toctree-l2"><a class="reference internal" href="playbooks.html#task-name-and-action">Task name and action</a></li>
 <li class="toctree-l2"><a class="reference internal" href="playbooks.html#notify-statements">Notify statements</a></li>
 <li class="toctree-l2"><a class="reference internal" href="playbooks.html#handlers">Handlers</a></li>
-<li class="toctree-l2"><a class="reference internal" href="playbooks.html#includes">Includes</a></li>
-<li class="toctree-l2"><a class="reference internal" href="playbooks.html#using-includes-to-assign-classes-of-systems">Using Includes To Assign Classes of Systems</a></li>
-<li class="toctree-l2"><a class="reference internal" href="playbooks.html#asynchronous-actions-and-polling">Asynchronous Actions and Polling</a></li>
+<li class="toctree-l2"><a class="reference internal" href="playbooks.html#power-tricks">Power Tricks</a><ul>
+<li class="toctree-l3"><a class="reference internal" href="playbooks.html#external-variables-and-sensitive-data">External Variables And Sensitive Data</a></li>
+<li class="toctree-l3"><a class="reference internal" href="playbooks.html#include-files-and-reuse">Include Files And Reuse</a></li>
+<li class="toctree-l3"><a class="reference internal" href="playbooks.html#using-includes-to-assign-classes-of-systems">Using Includes To Assign Classes of Systems</a></li>
+<li class="toctree-l3"><a class="reference internal" href="playbooks.html#asynchronous-actions-and-polling">Asynchronous Actions and Polling</a></li>
+</ul>
+</li>
 <li class="toctree-l2"><a class="reference internal" href="playbooks.html#executing-a-playbook">Executing A Playbook</a></li>
 </ul>
 </li>
diff --git a/man/ansible-playbook.1.html b/man/ansible-playbook.1.html
index 6c4bec09a6..584c2def72 100644
--- a/man/ansible-playbook.1.html
+++ b/man/ansible-playbook.1.html
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>ansible-playbook</title><link rel="stylesheet" href="./docbook-xsl.css" type="text/css" /><meta name="generator" content="DocBook XSL Stylesheets V1.75.2" /></head><body><div xml:lang="en" class="refentry" title="ansible-playbook" lang="en"><a id="id446525"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>ansible-playbook — run an ansible playbook</p></div><div class="refsynopsisdiv" title="Synopsis"><a id="_synopsis"></a><h2>Synopsis</h2><p>ansible-playbook &lt;filename.yml&gt; … [options]</p></div><div class="refsect1" title="DESCRIPTION"><a id="_description"></a><h2>DESCRIPTION</h2><p><span class="strong"><strong>Ansible playbooks</strong></span> are a configuration and multinode deployment system.  Ansible-playbook is the tool
+<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>ansible-playbook</title><link rel="stylesheet" href="./docbook-xsl.css" type="text/css" /><meta name="generator" content="DocBook XSL Stylesheets V1.75.2" /></head><body><div xml:lang="en" class="refentry" title="ansible-playbook" lang="en"><a id="id320402"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>ansible-playbook — run an ansible playbook</p></div><div class="refsynopsisdiv" title="Synopsis"><a id="_synopsis"></a><h2>Synopsis</h2><p>ansible-playbook &lt;filename.yml&gt; … [options]</p></div><div class="refsect1" title="DESCRIPTION"><a id="_description"></a><h2>DESCRIPTION</h2><p><span class="strong"><strong>Ansible playbooks</strong></span> are a configuration and multinode deployment system.  Ansible-playbook is the tool
 used to run them.   See the project home page (link below) for more information.</p></div><div class="refsect1" title="ARGUMENTS"><a id="_arguments"></a><h2>ARGUMENTS</h2><div class="variablelist"><dl><dt><span class="term">
 <span class="strong"><strong>filename.yml</strong></span>
 </span></dt><dd>
diff --git a/man/ansible.1.html b/man/ansible.1.html
index 3ba6481e6a..0185b72c8a 100644
--- a/man/ansible.1.html
+++ b/man/ansible.1.html
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>ansible</title><link rel="stylesheet" href="./docbook-xsl.css" type="text/css" /><meta name="generator" content="DocBook XSL Stylesheets V1.75.2" /></head><body><div xml:lang="en" class="refentry" title="ansible" lang="en"><a id="id302038"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>ansible — run a command somewhere else</p></div><div class="refsynopsisdiv" title="Synopsis"><a id="_synopsis"></a><h2>Synopsis</h2><p>ansible &lt;host-pattern&gt; [-f forks] [-m module_name] [-a args]</p></div><div class="refsect1" title="DESCRIPTION"><a id="_description"></a><h2>DESCRIPTION</h2><p><span class="strong"><strong>Ansible</strong></span> is an extra-simple tool/framework/API for doing 'remote things' over
+<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>ansible</title><link rel="stylesheet" href="./docbook-xsl.css" type="text/css" /><meta name="generator" content="DocBook XSL Stylesheets V1.75.2" /></head><body><div xml:lang="en" class="refentry" title="ansible" lang="en"><a id="id570190"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>ansible — run a command somewhere else</p></div><div class="refsynopsisdiv" title="Synopsis"><a id="_synopsis"></a><h2>Synopsis</h2><p>ansible &lt;host-pattern&gt; [-f forks] [-m module_name] [-a args]</p></div><div class="refsect1" title="DESCRIPTION"><a id="_description"></a><h2>DESCRIPTION</h2><p><span class="strong"><strong>Ansible</strong></span> is an extra-simple tool/framework/API for doing 'remote things' over
 SSH.</p></div><div class="refsect1" title="ARGUMENTS"><a id="_arguments"></a><h2>ARGUMENTS</h2><div class="variablelist"><dl><dt><span class="term">
 <span class="strong"><strong>host-pattern</strong></span>
 </span></dt><dd>
diff --git a/modules.html b/modules.html
index 47f7f998ef..c9a3c76038 100644
--- a/modules.html
+++ b/modules.html
@@ -333,7 +333,7 @@ be a relative or absolute path.</li>
 </ul>
 <p><em>state</em>:</p>
 <ul class="simple">
-<li>Can be either &#8216;installed&#8217; or &#8216;removed&#8217;</li>
+<li>Can be either &#8216;installed&#8217;, &#8216;latest&#8217;, or &#8216;removed&#8217;</li>
 </ul>
 <p><em>list</em>:</p>
 <ul class="simple">
diff --git a/playbooks.html b/playbooks.html
index fd49dfa399..e3e5a53e1f 100644
--- a/playbooks.html
+++ b/playbooks.html
@@ -130,14 +130,19 @@ s.parentNode.insertBefore(ga, s);
 <li><a class="reference internal" href="#">Playbooks</a><ul>
 <li><a class="reference internal" href="#playbook-example">Playbook Example</a></li>
 <li><a class="reference internal" href="#hosts-line">Hosts line</a></li>
+<li><a class="reference internal" href="#user-line">User line</a></li>
 <li><a class="reference internal" href="#vars-section">Vars section</a></li>
 <li><a class="reference internal" href="#tasks-list">Tasks list</a></li>
 <li><a class="reference internal" href="#task-name-and-action">Task name and action</a></li>
 <li><a class="reference internal" href="#notify-statements">Notify statements</a></li>
 <li><a class="reference internal" href="#handlers">Handlers</a></li>
-<li><a class="reference internal" href="#includes">Includes</a></li>
+<li><a class="reference internal" href="#power-tricks">Power Tricks</a><ul>
+<li><a class="reference internal" href="#external-variables-and-sensitive-data">External Variables And Sensitive Data</a></li>
+<li><a class="reference internal" href="#include-files-and-reuse">Include Files And Reuse</a></li>
 <li><a class="reference internal" href="#using-includes-to-assign-classes-of-systems">Using Includes To Assign Classes of Systems</a></li>
 <li><a class="reference internal" href="#asynchronous-actions-and-polling">Asynchronous Actions and Polling</a></li>
+</ul>
+</li>
 <li><a class="reference internal" href="#executing-a-playbook">Executing A Playbook</a></li>
 </ul>
 </li>
@@ -196,18 +201,22 @@ particularly awesome.</p>
 <p>They are the basis for a really simple configuration management and
 multi-machine deployment system, unlike any that already exist, and
 one that is very well suited to deploying complex applications.</p>
+<p>Playbooks can declare configurations, or they can automate steps of
+a manual ordered process.  They can launch tasks synchronously or asynchronously.</p>
 <p>While you might run the main /usr/bin/ansible program for ad-hoc
 tasks, playbooks are more likely to be kept in source control and used
 to push out your configuration or assure the configurations of your
 remote systems are in spec.</p>
+<p>Let&#8217;s dive in and see how they work.</p>
 <div class="section" id="playbook-example">
 <h2>Playbook Example<a class="headerlink" href="#playbook-example" title="Permalink to this headline">¶</a></h2>
 <p>Playbooks are expressed in YAML format and have a minimum of syntax.
-Each playbook is composed of one or more &#8216;plays&#8217; in a list.  By
-composing a playbook of multiple &#8216;plays&#8217;, it is possible to
+Each playbook is composed of one or more &#8216;plays&#8217; in a list.</p>
+<p>By composing a playbook of multiple &#8216;plays&#8217;, it is possible to
 orchestrate multi-machine deployments, running certain steps on all
 machines in the webservers group, then certain steps on the database
-server group, then more commands back on the webservers group, etc:</p>
+server group, then more commands back on the webservers group, etc.</p>
+<p>For starters, here&#8217;s a playbook that contains just one play.:</p>
 <div class="highlight-python"><pre>---
 - hosts: webservers
   vars:
@@ -216,8 +225,8 @@ server group, then more commands back on the webservers group, etc:</p>
   user: root
   tasks:
   - include: base.yml somevar=3 othervar=4
-  - name: ensure apache is installed
-    action: yum pkg=httpd state=installed
+  - name: ensure apache is at the latest version
+    action: yum pkg=httpd state=latest
   - name: write the apache config file
     action: template src=/srv/httpd.j2 dest=/etc/httpd.conf
     notify:
@@ -227,19 +236,28 @@ server group, then more commands back on the webservers group, etc:</p>
   handlers:
     - include: handlers.yml</pre>
 </div>
+<p>Below, we&#8217;ll break down what the various features of the playbook language are.</p>
 </div>
 <div class="section" id="hosts-line">
 <h2>Hosts line<a class="headerlink" href="#hosts-line" title="Permalink to this headline">¶</a></h2>
-<p>The hosts line is a list of one or more groups or host patterns,
+<p>The <cite>hosts</cite> line is a list of one or more groups or host patterns,
 separated by colons, as described in the <a class="reference internal" href="patterns.html#patterns"><em>The Inventory File, Patterns, and Groups</em></a>
 documentation.  This is just like the first parameter to
 <cite>/usr/bin/ansible</cite>.</p>
+<p>Each play gets to designate it&#8217;s own choice of patterns.</p>
+</div>
+<div class="section" id="user-line">
+<h2>User line<a class="headerlink" href="#user-line" title="Permalink to this headline">¶</a></h2>
+<p>Playbook steps on the remote system can be executed as any user.  The default is root,
+but you can specify others.  Sudo support is pending.:</p>
+<div class="highlight-python"><pre>user: mdehaan</pre>
+</div>
 </div>
 <div class="section" id="vars-section">
 <h2>Vars section<a class="headerlink" href="#vars-section" title="Permalink to this headline">¶</a></h2>
-<p>A list of variables and values that can be used in the plays.  These
-can be used in templates or &#8216;action&#8217; lines and are dereferenced using
-<cite>jinja2</cite> syntax like this:</p>
+<p>The <cite>vars&#8217; section contains a list of variables and values that can be used in the plays.  These
+can be used in templates or tasks and are dereferenced using
+`jinja2</cite> syntax like this:</p>
 <div class="highlight-python"><pre>{{ varname }}</pre>
 </div>
 <p>Further, if there are discovered variables about the system (say, if
@@ -249,7 +267,7 @@ variables.  Facter variables are prefixed with <tt class="docutils literal"><spa
 variables are prefixed with <tt class="docutils literal"><span class="pre">ohai_</span></tt>.  So for instance, if I wanted
 to write the hostname into the /etc/motd file, I could say:</p>
 <div class="highlight-python"><pre>- name: write the motd
-- action: template src=/srv/templates/motd.j2 dest=/etc/motd</pre>
+  action: template src=/srv/templates/motd.j2 dest=/etc/motd</pre>
 </div>
 <p>And in /srv/templates/motd.j2:</p>
 <div class="highlight-python"><pre>You are logged into {{ facter_hostname }}</pre>
@@ -259,41 +277,60 @@ to write the hostname into the /etc/motd file, I could say:</p>
 <div class="section" id="tasks-list">
 <h2>Tasks list<a class="headerlink" href="#tasks-list" title="Permalink to this headline">¶</a></h2>
 <p>Each play contains a list of tasks.  Tasks are executed in order, one
-at a time, against all machines matched by the playbooks host pattern,
+at a time, against all machines matched by the host pattern,
 before moving on to the next task.</p>
 <p>Hosts with failed tasks are taken out of the rotation for the entire
 playbook.  If things fail, simply correct the playbook file and rerun.</p>
-<p>Modules other than command are idempotent, meaning if you run them
+<p>Modules other than <cite>command</cite> are &#8216;idempotent&#8217;, meaning if you run them
 again, they will make the changes they are told to make to bring the
-system to the desired state.</p>
+system to the desired state.  This makes it very safe to rerun
+the same playbook multiple times.  They won&#8217;t change things
+unless they have to change things.  Command will actually rerun the
+same command again, which is totally ok if the command is something
+like &#8216;chmod&#8217; or &#8216;setsebool&#8217;, etc.</p>
 </div>
 <div class="section" id="task-name-and-action">
 <h2>Task name and action<a class="headerlink" href="#task-name-and-action" title="Permalink to this headline">¶</a></h2>
 <p>Every task must have a name, which is included in the output from
 running the playbook.</p>
 <p>The action line is the name of an ansible module followed by
-parameters.  Usually these are expressed in <tt class="docutils literal"><span class="pre">key=value</span></tt> form, except
-for the command module, which looks just like a Linux/Unix command
-line.  See the module documentation for more info.</p>
-<p>Variables, as mentioned above, can be used in action lines.  So if,
-hypothetically, you wanted to make a directory on each system named
-after the hostname ... yeah, that&#8217;s I know silly ... you could do it
-like so:</p>
+parameters in key=value form:</p>
+<div class="highlight-python"><pre>- name: make sure apache is running
+  action: service name=httpd state=running</pre>
+</div>
+<p>The command module is the one module that just takes a list
+of arguments, and doesn&#8217;t use the key=value form.  Simple:</p>
+<div class="highlight-python"><pre>- name: disable selinux
+  action: command /sbin/setenforce 0</pre>
+</div>
+<p>Variables can be used in action lines.   Suppose you defined
+a variable called &#8216;vhost&#8217; in the &#8216;vars&#8217; section, you could do this:</p>
 <div class="highlight-python"><pre>- name: make a directory
-- action: mkdir /tmp/{{ facter_hostname }}</pre>
+  action: template src=somefile.j2 dest=/etc/httpd/conf.d/{{ vhost }}</pre>
 </div>
+<p>Those same variables are usable in templates, which we&#8217;ll get to later.</p>
 </div>
 <div class="section" id="notify-statements">
 <h2>Notify statements<a class="headerlink" href="#notify-statements" title="Permalink to this headline">¶</a></h2>
-<p>Nearly all modules are written to be &#8216;idempotent&#8217; and can signal when
-they have affected a change on the remote system.  If a notify
-statement is used, the named handler will be run against each system
-where a change was effected, but NOT on systems where no change
-occurred.  This happens after all of the tasks are run.  For example,
-if notifying Apache and potentially replacing lots of configuration
-files, you could have Apache restart just once, at the end of a run.
-If you need Apache restarted in the middle of a run, you could just
-make a task for it, no harm done.  Notifiers are optional.</p>
+<p>As we&#8217;ve mentioned, nearly all modules are written to be &#8216;idempotent&#8217; and can signal when
+they have affected a change on the remote system.   Playbooks recognize this and
+have a basic event system that can be used to respond to change.</p>
+<p>These &#8216;notify&#8217; actions are triggered at the end of each &#8216;play&#8217; in a playbook, and
+trigger only once each.  For instance, multiple resources may indicate
+that apache needs to be restarted, but apache will only be bounced once.</p>
+<p>Here&#8217;s an example of restarting two services when the contents of a file
+change, but only if the file changes:</p>
+<div class="highlight-python"><pre>- name: template configuration file
+  action: template src=template.j2 dest=/etc/foo.conf
+  notify:
+     - restart memcached
+     - restart foo</pre>
+</div>
+<p>Next up, we&#8217;ll show what a handler looks like.</p>
+<div class="admonition note">
+<p class="first admonition-title">Note</p>
+<p class="last">Notify handlers are always run in the order written.</p>
+</div>
 </div>
 <div class="section" id="handlers">
 <h2>Handlers<a class="headerlink" href="#handlers" title="Permalink to this headline">¶</a></h2>
@@ -302,51 +339,96 @@ tasks, that are referenced by name.  Handlers are what notifiers
 notify.  If nothing notifies a handler, it will not run.  Regardless
 of how many things notify a handler, it will run only once, after all
 of the tasks complete in a particular play.</p>
+<p>Here&#8217;s an example handlers section:</p>
+<div class="highlight-python"><pre>handlers:
+    - name: restart apache
+      action: service name=apache state=restarted
+    - name: restart memcached
+      action: service name=memcached state=restarted</pre>
+</div>
+<p>Handlers are best used to restart services and trigger reboots.  You probably
+won&#8217;t need them for much else.</p>
 </div>
-<div class="section" id="includes">
-<h2>Includes<a class="headerlink" href="#includes" title="Permalink to this headline">¶</a></h2>
-<p>Not all tasks have to be listed directly in the main file.  An include
-file can contain a list of tasks (in YAML) as well, optionally passing
-extra variables into the file.  Variables passed in can be deferenced
-like this (assume a variable named &#8216;user&#8217;):</p>
+<div class="section" id="power-tricks">
+<h2>Power Tricks<a class="headerlink" href="#power-tricks" title="Permalink to this headline">¶</a></h2>
+<p>Now that you have the basics down, let&#8217;s learn some more advanced
+things you can do with playbooks.</p>
+<div class="section" id="external-variables-and-sensitive-data">
+<h3>External Variables And Sensitive Data<a class="headerlink" href="#external-variables-and-sensitive-data" title="Permalink to this headline">¶</a></h3>
+<p>It&#8217;s a great idea to keep your playbooks under source control, but
+you may wish to make the playbook source public while keeping certain
+important variables private.  You can do this by using an external
+variables file, or files, just like this:</p>
+<div class="highlight-python"><pre>---
+- hosts: all
+  user: root
+  vars:
+    favcolor: blue
+  vars_files:
+    - /path/to/external_vars.yml
+  tasks:
+  - name: this is just a placeholder
+    action: command /bin/echo foo</pre>
+</div>
+<p>This removes the risk of sharing sensitive data with others when
+sharing your playbook source with them.</p>
+<p>The contents of each variables file is a simple YAML dictionary, like this:</p>
+<div class="highlight-python"><pre>---
+somevar: somevalue
+password: magic</pre>
+</div>
+</div>
+<div class="section" id="include-files-and-reuse">
+<h3>Include Files And Reuse<a class="headerlink" href="#include-files-and-reuse" title="Permalink to this headline">¶</a></h3>
+<p>Suppose you want to reuse lists of tasks between plays or playbooks.  You can use
+include files to do this.</p>
+<p>An include file simply contains a list of tasks, like so:</p>
+<div class="highlight-python"><pre>---
+- name: placeholder foo
+  action: command /bin/foo
+- name: placeholder bar
+  action: command /bin/bar</pre>
+</div>
+<p>Variables passed in can be deferenced too.  Assume a variable named &#8216;user&#8217;. Using
+<cite>jinja2</cite> syntax, anywhere in the included file, you can say:</p>
 <div class="highlight-python"><pre>{{ user }}</pre>
 </div>
 <p>For instance, if deploying multiple wordpress instances, I could
-contain all of my tasks in a wordpress.yml file, and use it like so:</p>
+contain all of my wordpress tasks in a single wordpress.yml file, and use it like so:</p>
 <div class="highlight-python"><pre>- tasks:
-   - include: wordpress.yml user=timmy
-   - include: wordpress.yml user=alice
-   - include: wordpress.yml user=bob</pre>
+  - include: wordpress.yml user=timmy
+  - include: wordpress.yml user=alice
+  - include: wordpress.yml user=bob</pre>
 </div>
 <p>In addition to the explicitly passed in parameters, all variables from
-the vars section are also available.</p>
-<p>The format of an included list of tasks or handlers looks just like a
-flat list of tasks.  Here is an example of what base.yml might look
-like:</p>
-<div class="highlight-python"><pre>---
-- name: no selinux
-  action: command /usr/sbin/setenforce 0
-- name: no iptables
-  action: service name=iptables state=stopped
-- name: this is just to show variables work here, favcolor={{ favcolor }}
-  action: command /bin/true</pre>
-</div>
-<p>As you can see above, variables in include files work just like they
-do in the main file.  Including a variable in the name of a task is a
-contrived example, you could also pass them to the action command line
-or use them inside a template file.</p>
+the vars section are also available for use here as well.  Variables that bubble
+up from tools like facter and ohai are not though &#8211; but they ARE available for use
+inside &#8216;action&#8217; lines.</p>
 <div class="admonition note">
 <p class="first admonition-title">Note</p>
-<p class="last">Note that include statements are only usable from the top level
-playbook file.  At this time, includes can not include other
+<p class="last">Include statements are only usable from the top level
+playbook file.  This means includes can not include other
 includes.</p>
 </div>
+<p>Includes can also be used in the &#8216;handlers&#8217; section, for instance, if you
+want to define how to restart apache, you only have to do that once for all
+of your playbooks.  You might make a notifiers.yaml that looked like:</p>
+<div class="highlight-python"><pre>----
+- name: restart apache
+  action: service name=apache state=restarted</pre>
+</div>
+<p>And in your main playbook file, just include it like so, at the bottom
+of a play:</p>
+<div class="highlight-python"><pre>handlers:
+  - include: handlers.yml</pre>
+</div>
+<p>You can mix in includes along with your regular non-included tasks and handlers.</p>
 </div>
 <div class="section" id="using-includes-to-assign-classes-of-systems">
-<h2>Using Includes To Assign Classes of Systems<a class="headerlink" href="#using-includes-to-assign-classes-of-systems" title="Permalink to this headline">¶</a></h2>
-<p>Include files are best used to reuse logic between playbooks.  You
+<h3>Using Includes To Assign Classes of Systems<a class="headerlink" href="#using-includes-to-assign-classes-of-systems" title="Permalink to this headline">¶</a></h3>
+<p>Include files are really powerful when used to reuse logic between playbooks.  You
 could imagine a playbook describing your entire infrastructure like
-this:</p>
+this, in a list of just a few plays:</p>
 <div class="highlight-python"><pre>---
 - hosts: atlanta-webservers
   vars:
@@ -366,22 +448,71 @@ this:</p>
     - include: generic-handlers.yml</pre>
 </div>
 <p>There is one (or more) play defined for each group of systems, and
-each play maps each group includes one or more &#8216;class definitions&#8217;
-telling the systems what they are supposed to do or be.</p>
-<p>Using a common handlers file could allow one task in &#8216;webservers&#8217; to
-define &#8216;restart apache&#8217;, and it could be reused between multiple
-plays.</p>
-<p>Variables like &#8216;database&#8217; above can be used in templates referenced
-from the configuration file to generate machine specific variables.</p>
+each play maps each group to several includes.  These includes represent
+&#8216;class definitions&#8217;, telling the systems what they are supposed to do or be.</p>
+<div class="admonition note">
+<p class="first admonition-title">Note</p>
+<p class="last">Playbooks do not always have to be declarative; you can do something
+similar to model a push process for a multi-tier web application.  This is
+actually one of the things playbooks were invented to do.</p>
+</div>
 </div>
 <div class="section" id="asynchronous-actions-and-polling">
-<h2>Asynchronous Actions and Polling<a class="headerlink" href="#asynchronous-actions-and-polling" title="Permalink to this headline">¶</a></h2>
-<p>(Information on this feature is pending)</p>
+<h3>Asynchronous Actions and Polling<a class="headerlink" href="#asynchronous-actions-and-polling" title="Permalink to this headline">¶</a></h3>
+<p>By default tasks in playbooks block, meaning the connections stay open
+until the task is done on each node.  If executing playbooks with
+a small parallelism value (aka <cite>&#8211;forks</cite>), you may wish that long
+running operations can go faster.  The easiest way to do this is
+to kick them off all at once and then poll until they are done.</p>
+<p>You will also want to use asynchronous mode on very long running
+operations that might be subject to timeout.</p>
+<p>To launch a task asynchronously, specify it&#8217;s maximum runtime
+and how frequently you would like to poll for status.  The default
+poll value is 10 seconds if you do not specify a value for <cite>poll</cite>:</p>
+<div class="highlight-python"><pre>---
+- hosts: all
+  user: root
+  tasks:
+  - name: simulate long running op (15 sec), wait for up to 45, poll every 5
+    action: command /bin/sleep 15
+    async: 45
+    poll: 5</pre>
+</div>
+<div class="admonition note">
+<p class="first admonition-title">Note</p>
+<p class="last">There is no default for the async time limit.  If you leave off the
+&#8216;async&#8217; keyword, the task runs synchronously, which is Ansible&#8217;s
+default.</p>
+</div>
+<p>Alternatively, if you do not need to wait on the task to complete, you may
+&#8220;fire and forget&#8221; by specifying a poll value of 0:</p>
+<div class="highlight-python"><pre>---
+- hosts: all
+  user: root
+  tasks:
+  - name: simulate long running op (15 sec), wait for up to 45, poll every 5
+    action: command /bin/sleep 15
+    async: 45
+    poll: 0</pre>
+</div>
+<div class="admonition note">
+<p class="first admonition-title">Note</p>
+<p class="last">You shouldn&#8217;t &#8220;fire and forget&#8221; with operations that require
+exclusive locks, such as yum transactions, if you expect to run other
+commands later in the playbook against those same resources.</p>
+</div>
+<div class="admonition note">
+<p class="first admonition-title">Note</p>
+<p class="last">Using a higher value for <cite>&#8211;forks</cite> will result in kicking off asynchronous
+tasks even faster.  This also increases the efficiency of polling.</p>
+</div>
+</div>
 </div>
 <div class="section" id="executing-a-playbook">
 <h2>Executing A Playbook<a class="headerlink" href="#executing-a-playbook" title="Permalink to this headline">¶</a></h2>
-<p>To run a playbook:</p>
-<div class="highlight-python"><pre>ansible-playbook playbook.yml</pre>
+<p>Now that you&#8217;ve learned playbook syntax, how do you run a playbook?  It&#8217;s simple.
+Let&#8217;s run a playbook using a parallelism level of 10:</p>
+<div class="highlight-python"><pre>ansible-playbook playbook.yml -f 10</pre>
 </div>
 </div>
 </div>
diff --git a/rst/faq.rst b/rst/faq.rst
index 2956e63496..d6e81eaa6d 100644
--- a/rst/faq.rst
+++ b/rst/faq.rst
@@ -173,7 +173,7 @@ example is for configuration management where you
 are starting from a clean OS with no extra software installed, adopting systems
 that are already deployed. 
 
-Ansible is also great for running ad-hoc tasks across a wide variety of Linux, Unix, and *BSDs.  
+Ansible is also great for running ad-hoc tasks across a wide variety of Linux, Unix, and BSDs.  
 Because it just uses the basic tools available on the system, it is exceptionally cross platform
 without needing to install management packages on each node.
 
diff --git a/rst/playbooks.rst b/rst/playbooks.rst
index f1523ad095..67aa4ea336 100644
--- a/rst/playbooks.rst
+++ b/rst/playbooks.rst
@@ -18,21 +18,29 @@ They are the basis for a really simple configuration management and
 multi-machine deployment system, unlike any that already exist, and
 one that is very well suited to deploying complex applications.
 
+Playbooks can declare configurations, or they can automate steps of
+a manual ordered process.  They can launch tasks synchronously or asynchronously.
+
 While you might run the main /usr/bin/ansible program for ad-hoc
 tasks, playbooks are more likely to be kept in source control and used
 to push out your configuration or assure the configurations of your
 remote systems are in spec.
 
+Let's dive in and see how they work.
+
 
 Playbook Example
 ````````````````
 
 Playbooks are expressed in YAML format and have a minimum of syntax.
-Each playbook is composed of one or more 'plays' in a list.  By
-composing a playbook of multiple 'plays', it is possible to
+Each playbook is composed of one or more 'plays' in a list.  
+
+By composing a playbook of multiple 'plays', it is possible to
 orchestrate multi-machine deployments, running certain steps on all
 machines in the webservers group, then certain steps on the database
-server group, then more commands back on the webservers group, etc::
+server group, then more commands back on the webservers group, etc. 
+
+For starters, here's a playbook that contains just one play.::
 
     ---
     - hosts: webservers
@@ -53,22 +61,36 @@ server group, then more commands back on the webservers group, etc::
       handlers:
         - include: handlers.yml
 
+
+Below, we'll break down what the various features of the playbook language are.
+
+
 Hosts line
-``````````
+```````````
 
-The hosts line is a list of one or more groups or host patterns,
+The `hosts` line is a list of one or more groups or host patterns,
 separated by colons, as described in the :ref:`patterns`
 documentation.  This is just like the first parameter to
-`/usr/bin/ansible`.
+`/usr/bin/ansible`. 
+
+Each play gets to designate it's own choice of patterns.
+
+User line
+`````````
+
+Playbook steps on the remote system can be executed as any user.  The default is root,
+but you can specify others.  Sudo support is pending.::
+
+    user: mdehaan
 
 Vars section
 ````````````
 
-A list of variables and values that can be used in the plays.  These
-can be used in templates or 'action' lines and are dereferenced using
+The `vars' section contains a list of variables and values that can be used in the plays.  These
+can be used in templates or tasks and are dereferenced using
 `jinja2` syntax like this::
 
-   {{ varname }}
+    {{ varname }}
 
 Further, if there are discovered variables about the system (say, if
 facter or ohai were installed) these variables bubble up back into the
@@ -78,7 +100,7 @@ variables are prefixed with ``ohai_``.  So for instance, if I wanted
 to write the hostname into the /etc/motd file, I could say::
 
    - name: write the motd
-   - action: template src=/srv/templates/motd.j2 dest=/etc/motd
+     action: template src=/srv/templates/motd.j2 dest=/etc/motd
 
 And in /srv/templates/motd.j2::
 
@@ -90,15 +112,20 @@ Tasks list
 ``````````
 
 Each play contains a list of tasks.  Tasks are executed in order, one
-at a time, against all machines matched by the playbooks host pattern,
+at a time, against all machines matched by the host pattern,
 before moving on to the next task.
 
 Hosts with failed tasks are taken out of the rotation for the entire
 playbook.  If things fail, simply correct the playbook file and rerun.
 
-Modules other than command are idempotent, meaning if you run them
+Modules other than `command` are 'idempotent', meaning if you run them
 again, they will make the changes they are told to make to bring the
-system to the desired state.
+system to the desired state.  This makes it very safe to rerun
+the same playbook multiple times.  They won't change things
+unless they have to change things.  Command will actually rerun the
+same command again, which is totally ok if the command is something
+like 'chmod' or 'setsebool', etc.
+
 
 Task name and action
 `````````````````````
@@ -107,30 +134,49 @@ Every task must have a name, which is included in the output from
 running the playbook.
 
 The action line is the name of an ansible module followed by
-parameters.  Usually these are expressed in ``key=value`` form, except
-for the command module, which looks just like a Linux/Unix command
-line.  See the module documentation for more info.
+parameters in key=value form::
+
+   - name: make sure apache is running
+     action: service name=httpd state=running
+
+The command module is the one module that just takes a list
+of arguments, and doesn't use the key=value form.  Simple::
 
-Variables, as mentioned above, can be used in action lines.  So if,
-hypothetically, you wanted to make a directory on each system named
-after the hostname ... yeah, that's I know silly ... you could do it
-like so::
+   - name: disable selinux 
+     action: command /sbin/setenforce 0
+
+Variables can be used in action lines.   Suppose you defined
+a variable called 'vhost' in the 'vars' section, you could do this::
 
    - name: make a directory
-   - action: mkdir /tmp/{{ facter_hostname }}
+     action: template src=somefile.j2 dest=/etc/httpd/conf.d/{{ vhost }}
+
+Those same variables are usable in templates, which we'll get to later.
 
 Notify statements
 `````````````````
 
-Nearly all modules are written to be 'idempotent' and can signal when
-they have affected a change on the remote system.  If a notify
-statement is used, the named handler will be run against each system
-where a change was effected, but NOT on systems where no change
-occurred.  This happens after all of the tasks are run.  For example,
-if notifying Apache and potentially replacing lots of configuration
-files, you could have Apache restart just once, at the end of a run.
-If you need Apache restarted in the middle of a run, you could just
-make a task for it, no harm done.  Notifiers are optional.
+As we've mentioned, nearly all modules are written to be 'idempotent' and can signal when
+they have affected a change on the remote system.   Playbooks recognize this and
+have a basic event system that can be used to respond to change.
+
+These 'notify' actions are triggered at the end of each 'play' in a playbook, and
+trigger only once each.  For instance, multiple resources may indicate
+that apache needs to be restarted, but apache will only be bounced once.
+
+Here's an example of restarting two services when the contents of a file
+change, but only if the file changes::
+
+   - name: template configuration file
+     action: template src=template.j2 dest=/etc/foo.conf
+     notify:
+        - restart memcached
+        - restart foo
+
+Next up, we'll show what a handler looks like.
+
+.. note::
+   Notify handlers are always run in the order written.
 
 Handlers
 ````````
@@ -139,57 +185,116 @@ Handlers are lists of tasks, not really any different from regular
 tasks, that are referenced by name.  Handlers are what notifiers
 notify.  If nothing notifies a handler, it will not run.  Regardless
 of how many things notify a handler, it will run only once, after all
-of the tasks complete in a particular play.
+of the tasks complete in a particular play.  
 
-Includes
-````````
+Here's an example handlers section::
+
+    handlers:
+        - name: restart apache
+          action: service name=apache state=restarted
+        - name: restart memcached
+          action: service name=memcached state=restarted
+
+Handlers are best used to restart services and trigger reboots.  You probably
+won't need them for much else.
+
+
+Power Tricks
+````````````
+
+Now that you have the basics down, let's learn some more advanced
+things you can do with playbooks.
+
+
+External Variables And Sensitive Data
++++++++++++++++++++++++++++++++++++++
+
+It's a great idea to keep your playbooks under source control, but
+you may wish to make the playbook source public while keeping certain
+important variables private.  You can do this by using an external
+variables file, or files, just like this::
 
-Not all tasks have to be listed directly in the main file.  An include
-file can contain a list of tasks (in YAML) as well, optionally passing
-extra variables into the file.  Variables passed in can be deferenced
-like this (assume a variable named 'user')::
+    ---
+    - hosts: all
+      user: root
+      vars:
+        favcolor: blue
+      vars_files:
+        - /path/to/external_vars.yml
+      tasks:
+      - name: this is just a placeholder
+        action: command /bin/echo foo
+
+This removes the risk of sharing sensitive data with others when
+sharing your playbook source with them.
+
+The contents of each variables file is a simple YAML dictionary, like this::
+
+    ---
+    somevar: somevalue
+    password: magic
+
+
+Include Files And Reuse
++++++++++++++++++++++++
+
+Suppose you want to reuse lists of tasks between plays or playbooks.  You can use
+include files to do this.
+
+An include file simply contains a list of tasks, like so::
+
+    ---
+    - name: placeholder foo
+      action: command /bin/foo
+    - name: placeholder bar
+      action: command /bin/bar
+
+Variables passed in can be deferenced too.  Assume a variable named 'user'. Using
+`jinja2` syntax, anywhere in the included file, you can say::
 
    {{ user }}
 
 For instance, if deploying multiple wordpress instances, I could
-contain all of my tasks in a wordpress.yml file, and use it like so::
+contain all of my wordpress tasks in a single wordpress.yml file, and use it like so::
 
    - tasks:
-      - include: wordpress.yml user=timmy 
-      - include: wordpress.yml user=alice
-      - include: wordpress.yml user=bob
+     - include: wordpress.yml user=timmy 
+     - include: wordpress.yml user=alice
+     - include: wordpress.yml user=bob
 
 In addition to the explicitly passed in parameters, all variables from
-the vars section are also available.
+the vars section are also available for use here as well.  Variables that bubble
+up from tools like facter and ohai are not though -- but they ARE available for use
+inside 'action' lines.
 
-The format of an included list of tasks or handlers looks just like a
-flat list of tasks.  Here is an example of what base.yml might look
-like::
+.. note::
+   Include statements are only usable from the top level
+   playbook file.  This means includes can not include other
+   includes.
 
-    ---
-    - name: no selinux
-      action: command /usr/sbin/setenforce 0
-    - name: no iptables
-      action: service name=iptables state=stopped
-    - name: this is just to show variables work here, favcolor={{ favcolor }}
-      action: command /bin/true
-
-As you can see above, variables in include files work just like they
-do in the main file.  Including a variable in the name of a task is a
-contrived example, you could also pass them to the action command line
-or use them inside a template file.
+Includes can also be used in the 'handlers' section, for instance, if you
+want to define how to restart apache, you only have to do that once for all
+of your playbooks.  You might make a notifiers.yaml that looked like::
+
+   ----
+   - name: restart apache
+     action: service name=apache state=restarted
+
+And in your main playbook file, just include it like so, at the bottom
+of a play::
+
+   handlers:
+     - include: handlers.yml
+
+You can mix in includes along with your regular non-included tasks and handlers.
 
-.. note::
-    Note that include statements are only usable from the top level
-    playbook file.  At this time, includes can not include other
-    includes.
 
 Using Includes To Assign Classes of Systems
-```````````````````````````````````````````
++++++++++++++++++++++++++++++++++++++++++++
 
-Include files are best used to reuse logic between playbooks.  You
+Include files are really powerful when used to reuse logic between playbooks.  You
 could imagine a playbook describing your entire infrastructure like
-this::
+this, in a list of just a few plays::
 
     ---
     - hosts: atlanta-webservers
@@ -210,26 +315,72 @@ this::
         - include: generic-handlers.yml
 
 There is one (or more) play defined for each group of systems, and
-each play maps each group includes one or more 'class definitions'
-telling the systems what they are supposed to do or be.
+each play maps each group to several includes.  These includes represent
+'class definitions', telling the systems what they are supposed to do or be.
 
-Using a common handlers file could allow one task in 'webservers' to
-define 'restart apache', and it could be reused between multiple
-plays.
+.. note::
+   Playbooks do not always have to be declarative; you can do something
+   similar to model a push process for a multi-tier web application.  This is
+   actually one of the things playbooks were invented to do.
 
-Variables like 'database' above can be used in templates referenced
-from the configuration file to generate machine specific variables.
 
 Asynchronous Actions and Polling
-````````````````````````````````
+++++++++++++++++++++++++++++++++
+
+By default tasks in playbooks block, meaning the connections stay open
+until the task is done on each node.  If executing playbooks with
+a small parallelism value (aka `--forks`), you may wish that long
+running operations can go faster.  The easiest way to do this is
+to kick them off all at once and then poll until they are done.  
+
+You will also want to use asynchronous mode on very long running 
+operations that might be subject to timeout.
+
+To launch a task asynchronously, specify it's maximum runtime
+and how frequently you would like to poll for status.  The default
+poll value is 10 seconds if you do not specify a value for `poll`::
+
+    ---
+    - hosts: all
+      user: root
+      tasks:
+      - name: simulate long running op (15 sec), wait for up to 45, poll every 5
+        action: command /bin/sleep 15
+        async: 45
+        poll: 5
+
+.. note::
+   There is no default for the async time limit.  If you leave off the
+   'async' keyword, the task runs synchronously, which is Ansible's
+   default.
 
-(Information on this feature is pending)
+Alternatively, if you do not need to wait on the task to complete, you may
+"fire and forget" by specifying a poll value of 0::
 
+    ---
+    - hosts: all
+      user: root
+      tasks:
+      - name: simulate long running op (15 sec), wait for up to 45, poll every 5
+        action: command /bin/sleep 15
+        async: 45
+        poll: 0
+
+.. note::
+   You shouldn't "fire and forget" with operations that require 
+   exclusive locks, such as yum transactions, if you expect to run other
+   commands later in the playbook against those same resources.  
+
+.. note::
+   Using a higher value for `--forks` will result in kicking off asynchronous
+   tasks even faster.  This also increases the efficiency of polling.
 
 Executing A Playbook
 ````````````````````
 
-To run a playbook::
+Now that you've learned playbook syntax, how do you run a playbook?  It's simple.
+Let's run a playbook using a parallelism level of 10::
+
+    ansible-playbook playbook.yml -f 10
 
-    ansible-playbook playbook.yml
 
diff --git a/searchindex.js b/searchindex.js
index c768823c0e..4a702d2a8b 100644
--- a/searchindex.js
+++ b/searchindex.js
@@ -1 +1 @@
-Search.setIndex({objects:{},terms:{all:[0,1,2,3,4,5,6,7,8],concept:8,myapp:8,perl:8,selinux:5,consum:3,pluggabl:3,prefix:[4,5,8],code:[2,3,4,8],upgrad:[4,8],abil:3,follow:[3,4,5,6,7,8],scp:8,content:[0,3,2],decid:[3,8],middl:5,depend:3,wish:[7,0,3,1,6],graph:3,elsewher:8,specif:[6,7,5,8],program:[2,3,4,5,1],mcollect:2,exit:7,blindingli:2,spec:5,introduc:2,emploi:1,sourc:[2,3,4,5,7,8],everi:[5,1,8],string:4,fals:[4,1],multi:[2,3,5],failur:[7,3,4],veri:[7,2,3,5,8],affect:5,implicitli:3,magic:3,level:[4,5,1],id_rsa:[0,8],list:[2,1,3,4,5,6,8,9],"try":3,item:[7,1],sane:3,form:[5,1],team:3,dotnet:1,saltstack:2,servic:[2,4,5,8],playbook:[0,1,2,3,4,5,6,7,8,9],pleas:3,alic:5,natur:4,seper:3,direct:3,straighten:3,chef:[2,3],second:8,design:[2,3],pass:[4,5],download:[0,2],further:[5,1],submit:3,port:[3,8],even:[3,8],what:[0,1,2,3,4,5],compar:3,favcolor:[5,8],fine:3,section:[2,4,5],async_statu:8,current:[3,8],abbrevi:1,version:[4,8],suspect:3,"new":3,net:[],varnam:5,ever:2,method:7,told:5,impact:3,hasn:3,hash:[4,1],facter_hostnam:5,eckersberg:[3,1],gener:[3,5],never:3,here:[2,4,5,8],shouldn:3,let:[5,1,8],address:[6,3,4],path:4,sinc:8,valu:[4,5,1,8],box:[2,4],great:[2,3],pretti:[7,3],ahead:5,precursor:2,likin:3,fixm:[],adopt:3,host:[0,2,3,4,5,6,7,8],prior:4,pick:[3,8],action:[2,4,5],extrem:0,implement:7,commonli:[8,1],ourselv:5,employe:1,via:[0,2],regardless:[2,3,5,1],extra:[3,5],apach:[3,5,8],modul:[0,2,3,4,5,7,8],ask:[2,3],unix:[3,5],"boolean":1,instal:[0,2,3,4,5,8],cloud:3,kei:[0,4,5,1],httpd:[5,8],from:[0,2,3,4,5,8],describ:[4,5],would:[4,8],commun:3,"super":2,visit:2,two:[0,6],noarch:0,suit:[3,5],live:0,handler:[2,5,8],call:[4,1],usr:[7,4,5,8],msg:[7,4],somevar:5,kick:[3,8],type:[7,3],tell:[4,5,8],more:[0,2,3,4,5,6],sort:3,flat:5,desir:5,idempot:[3,4,5,8],src:[4,5,8],python:[0,1,2,3,4,7,8],notif:3,sshd:2,notic:3,train:3,agent:[0,8],particular:[2,5],actual:[3,4],compani:3,easiest:2,must:[4,5],none:7,join:2,ibm:2,module_arg:7,alia:6,setup:[2,4,8],work:[0,2,3,5,6,8],knows_oop:1,dev:3,remain:2,minimum:5,can:[0,1,2,3,4,5,6,7,8],erb:3,learn:[0,1,2,3,5,6],about:[0,1,2,3,4,5],purpos:4,root:[2,5],control:[2,4,5,8],want:[1,3,4,5,7,8],tar:0,give:1,process:[2,3,8],chip:2,sudo:0,share:4,templat:[0,2,3,4,5,8],high:8,critic:2,tag:[0,4],surround:[],explor:0,onlin:1,occur:5,contribut:[2,8],alwai:[3,4],cours:3,multipl:[6,3,5,8],newlin:[],lame:1,rather:3,anoth:[3,1],ping:[0,7,4,2],uptim:7,write:[2,1,3,4,5,8],how:[0,1,2,3,4,5,6,7,8],anyon:3,hop:3,instead:[3,4],config:[2,5],stock:4,map:5,express:[2,7,5,1],resourc:[2,3],referenc:[6,5],max:8,clone:0,after:[3,5,8],lab:[2,3],befor:[3,4,5,8],ohai_:[4,5],mai:[7,0,3,1],end:[3,4,5],data:[7,3,4,8,1],parallel:[2,3,8],man:[2,9],"short":[2,3],orchestr:[2,3,5],practic:[3,1],read:[0,7,1],secur:3,favorit:2,element:4,issu:[2,3],inform:[7,4,5],mango:1,combin:1,allow:[3,5],order:[3,5],talk:[0,5],oper:[2,8],help:[2,1],portion:6,xmpp:3,over:[2,3,8],move:[4,5],orang:1,becaus:[3,1],elit:1,rpmbuild:0,comma:[],hierarchi:3,suffer:3,mainli:3,paramet:[4,5],facter_:[4,5],jid:8,overlord:0,group:[2,7,5,6],cli:7,taboot:3,yaml:[2,3,5,1],pend:5,rapidli:7,infrastructur:[6,0,3,5,2],bin:[0,7,4,5,8],mail:[2,3,8,6],job_statu:[],main:5,might:5,easier:[3,1],wouldn:3,them:[1,3,4,5,6,8],good:3,"return":[7,2,3,4],thei:[3,4,5,6,7,8],food:1,dai:3,number:4,framework:[7,2,3],jinja2:[0,3,4,5,8],half:3,now:[0,3,4,6],discuss:3,nor:4,choic:2,multiprocess:[0,3],vidal:3,name:[2,1,4,5,6,8],anyth:[3,4],edit:0,simpl:[2,1,3,5,7,8],didn:3,instruct:[0,3],separ:5,exampl:[0,1,2,3,4,5,6,7,8,9],mode:[3,8],each:[3,4,5,1,8],debug:1,found:7,updat:[4,8],spend:3,mean:[3,4,5,1],harm:5,mental:3,michael:2,laserllama:2,hard:3,idea:[2,3],realli:[3,4,5,1],backport:0,facter:[2,3,4,5,8],our:1,happen:[3,4,5],event:[3,4],out:[2,3,4,5,7,8],variabl:[3,4,5,8],safeti:6,network:2,space:4,reboot:8,bubbl:[4,5],adapt:[],rel:4,internet:2,print:7,got:3,correct:[2,3,5,1],red:[2,3,8],insid:5,advanc:[7,3],ntp:8,differ:[8,0,3,5,2],pub:8,small:[3,1],reason:3,base:[2,3,5],believ:3,dictionari:1,put:[0,8],org:0,bash:[0,3,8],basi:5,pyyaml:0,sytem:3,indent:1,could:[7,3,5],fqdn:8,thing:[2,3,5,1,6],yum:[2,4,5,8],isn:[2,3],adrian:3,retain:3,think:3,frequent:[2,3],first:[0,2,3,4,5,8],origin:2,softwar:[2,3,4,8],rang:2,notifi:[2,3,5,8],render:4,feel:1,onc:[3,4,5],scene:4,yourself:0,hook:4,unlik:[3,5],alreadi:[0,3,4,5],puppet:[2,3],"long":[2,3,4,8],massiv:2,open:3,given:[3,4,8],convent:4,script:[7,2,3,8],associ:1,top:[3,4,5],mkdir:5,system:[0,2,3,4,5,6,8],construct:[7,3],inventori:[2,4,5,6],appl:1,too:[2,3,1],statement:[2,5],gather:3,termin:8,john:[3,1],"final":[],rpath:2,iptabl:5,shell:[2,4,8],option:[7,3,5,9,8],especi:3,tool:[2,3,4,7,8,9],copi:[2,4,8],took:3,specifi:[3,4,8,1],retyp:0,github:[0,2],pars:3,kept:[3,5],than:[0,1,2,3,4,5,8],wide:3,kind:3,silli:5,target:[2,6],keyword:3,provid:1,remov:[4,8],richer:3,structur:[],banana:[],project:[0,3,8,2],reus:5,architect:2,were:[3,5],minut:[3,8],uses_cv:1,provis:3,pre:0,sai:[3,5,8],bootstrap:[2,3],runner:7,seth:3,mind:3,argument:4,spent:3,dash:1,packag:[2,3,4,8],aforement:6,complet:[3,5],have:[0,1,2,3,5,6],interfac:3,need:[0,1,3,4,5,8],seem:3,cfengin:3,seek:4,paramiko:0,sat:3,imagin:5,engin:8,squar:[],contact:[7,0,3,4],note:[6,4,5,8],also:[0,1,2,3,4,5,6,7,8],ideal:[2,3],client:2,build:[7,0,3],indic:4,datacent:5,divers:2,singl:3,begin:[8,1],sure:8,unless:4,distribut:[0,3,2],deploy:[2,3,5,8],track:8,reach:2,deleg:3,discov:5,most:[3,4,1],plai:[4,5],regular:5,plan:3,deploi:[2,3,4,5,8],bsd:3,why:2,strawberri:1,don:[6,3,4,8],doc:2,later:8,cover:[3,8],doe:[2,3,4,6],meanwhil:3,bracket:6,snapshot:4,place:2,clean:3,pattern:[2,7,5,6],built:[0,3,8],latest:8,awesom:[2,5],show:[5,8],cheat:3,text:3,verbos:4,syntax:[2,3,5,1],bring:[3,5],directli:[4,5,8],raleigh:2,particularli:5,pkg:[4,5,8],hack:2,radic:2,identifi:3,trivial:[2,4],find:3,rotat:5,xml:1,absolut:4,onli:[0,3,4,5,8],explicitli:5,locat:4,execut:[7,2,3,4,5],tire:3,configur:[0,1,2,3,4,5,6,8],solut:3,written:[2,4,5,8],should:[3,4,1],suppos:5,congratul:0,local:4,yml:5,custom:3,long_running_oper:8,nearli:[4,5],variou:[3,4],get:[0,1,2,3,5,8],financ:2,stop:[3,4,5,8],autom:3,repo:[4,8],ssl:3,obviou:2,ssh:[0,3,8,2],requir:[0,3,4,2],uvh:0,experi:3,bar:6,patch:3,sha:4,stuff:8,common:[5,1],contain:[3,4,5],usabl:[2,5],through:[0,4,2],where:[2,3,4,5],view:[2,9],set:[0,3,4,5],hierachi:3,arbitari:1,see:[0,1,2,3,4,5,6,8,9],result:[7,4],fail:[7,3,5],charact:1,skill:1,best:[3,5],asynchron:[2,5],statu:8,still:3,extend:[2,3],expert:3,databas:5,someth:[2,3,4,8],discoveri:4,restart:[3,4,5,8],state:[3,4,5,8],won:8,between:[3,5],"import":7,irc:2,across:3,attribut:4,altern:8,solo:3,manpag:0,style:4,extens:[2,3],job:[8,1],entir:[3,5],aserv:0,webapp:[3,8],timmi:5,addit:[2,5],both:3,delimit:4,goal:2,howev:3,equal:3,against:[2,3,5,6],etc:[0,2,3,5,6,8],instanc:5,logic:5,mani:[5,8],com:[0,7,5,6],among:3,assur:5,simpli:[4,5],figur:3,overview:1,format:[2,1,3,4,5,6,8],inspir:[2,3],distil:3,fashion:3,colon:5,shutdown:4,linux:[2,3,5],poll:[2,5,8],mission:2,coupl:3,platform:3,multiplay:2,three:6,been:[2,3],json:[7,2,3,4,1],much:[2,3,4,1],treat:3,basic:[0,1,2,3,4,6],futur:0,quickli:[2,8],capistrano:[2,3],fire:[2,3],rubi:[3,4,8,1],ani:[2,3,4,5,7,8],func:[2,3],minim:0,atlanta:[5,8],those:[3,4],"case":3,authorized_kei:0,exception:3,look:[6,5,8],hoc:[2,3,5,8],straight:8,md5sum:4,permit:[],batch:3,defin:5,"while":[3,5],smart:8,abov:[5,8],error:3,cobbler:[2,3],dehaan:2,layer:3,motd:[5,8],max_client:5,stdout:7,almost:3,technolog:2,site:[3,9],dag:3,conf:[5,8],module_nam:7,sever:[3,1],around:3,http_port:5,develop:[0,3,1,2],welcom:2,author:2,perform:3,make:[0,3,4,5,8],ohai:[2,3,4,5,8],cross:3,same:[6,8,1],member:1,handl:3,complex:[2,3,5],document:[0,1,3,5,7,8],ansibl:[0,1,2,3,4,5,6,7,8,9],difficult:3,http:4,hostnam:[7,5],again:[3,5],nest:4,painless:2,rail:3,effect:5,remot:[0,4,5,8],assign:[2,5],fruit:1,user:[3,5],php:8,distutil:[0,2],typic:[3,8],tune:[],recent:3,lower:3,appropri:3,off:[2,3],scenario:4,mention:5,setenforc:5,compos:5,well:[0,3,4,5],hypothet:5,non:2,without:3,command:[0,2,3,4,5,6,7,8,9],thi:[0,1,3,4,5,6,8],choos:4,programm:[7,3],dereferenc:5,usual:5,protocol:4,just:[0,1,2,3,4,5,8],less:[0,3,2],when:[3,4,5,8],rest:9,detail:[2,7,8],kill:[],human:1,heavili:3,ntp_server:8,simultan:8,languag:[0,1,2,3,4,6],web:[7,3,8,9],versu:2,easi:[2,3,4,6],mix:6,except:5,littl:[2,3],add:[0,3,8],other:[0,1,2,3,4,5,8],notori:3,els:2,hat:[2,3],app:3,match:5,take:[3,4],real:0,applic:[7,3,5],which:[0,6,5,1,2],quirk:1,dest:[4,5,8],dark:7,game:2,know:[3,4,5,1],background:[2,8],world:[0,3],bit:[3,4],password:0,daemon:[2,3],motorola:2,like:[1,3,4,5,6,8],success:4,header:6,signal:[3,5],arbitrari:3,manual:3,integ:4,noth:[5,1],api:[7,2,3,4],necessari:[4,8],either:[3,4],lose:8,popular:2,async:3,manag:[0,1,2,3,4,5,6,8],shed:3,drop:4,often:3,webserv:[6,5,8],suppli:4,some:[0,3,4,2],back:[3,5],dead:2,born:3,heritag:3,server:[2,3,4,5,8],transport:[2,3],tmp:[5,8],scale:[2,3],forcibl:[],lead:3,rpm:[0,2],avoid:[0,3,4],though:[2,3,4],definit:5,thank:3,per:7,tracker:2,larg:3,select:[2,4,5,6],foo:[6,8],complic:[2,3],refer:8,machin:[0,3,4,5,8],core:[2,3],encourag:3,yamllint:1,run:[0,1,3,4,5,7,8],power:[7,2,3],usag:[4,8],asciidoc:0,web2:7,step:[3,4,5],web1:7,promot:3,repositori:0,output:[3,5],meantim:3,appli:3,task:[2,3,5,8],soon:[],simpler:[3,8],comparison:[2,3],sbin:[4,5,8],central:3,othervar:5,acm:8,page:[9,0,3,1,2],srv:[5,8],messag:[7,3],done:[3,5],industri:2,explicit:4,own:[2,3,4,5],effici:3,bounc:4,within:[3,4],contriv:5,sneaker:[],automat:4,due:3,down:7,pair:[4,1],multinod:3,ensur:[3,5,8],chang:[4,5,8],next:5,bserver:0,your:[0,2,3,4,5,6,8],merg:3,behind:[3,4],git:[0,3,4,8,2],fabric:[2,3],wai:[0,3,5,8],aren:3,transfer:[2,8],support:[2,3,4],question:[2,3],fast:2,happi:2,avail:[0,1,3,4,5,7,8,9],start:[0,1,2,3,4,5,8],trigger:[3,4],wordpress:5,includ:[2,4,5],lot:[2,5,8],replac:5,"var":[2,5],datastructur:7,individu:6,fork:[7,3,8],head:[4,8],simplejson:0,enough:[6,3,8],lint:1,yeah:5,taken:[3,5],line:[0,1,2,3,4,5,6,7,8,9],"true":[4,5,1],freenod:2,info:[5,8],pull:3,"throw":3,made:[3,4,8],possibl:[6,5,8],whether:[7,3],checkout:[3,4],caller:4,until:0,planet:2,record:1,limit:[2,8],rerun:5,otherwis:4,problem:[3,1],similar:[2,4],email:2,curv:[2,3],featur:[6,3,5],tasti:1,creat:[2,3],certain:[3,5],doesn:[2,1],repres:1,strongli:3,exist:[2,5],file:[0,1,2,4,5,6,8],bob:5,ship:4,check:[3,4,8],probabl:3,echo:0,denot:6,coder:3,googl:2,dbserver:[6,5],excel:[2,3],unnecessari:4,"default":[2,3,6],likes_emac:1,librari:1,varieti:3,test:[0,3,4],assum:5,you:[0,1,2,3,4,5,6,8],architectur:[2,3],node:[0,3,4,8,2],contend:3,sysadmin:3,wildcard:6,liter:4,sequenc:2,"class":[2,5],devop:2,push:[3,5],releas:[0,3],intent:[],log:5,deferenc:5,gap:3,"60k":[2,3],stai:[],sphinx:0,amp:0,directori:[4,5],reliabl:3,itself:7,emerg:2,potenti:5,time:[0,1,2,3,4,5,6,8],far:[2,1],hello:0},objtypes:{},titles:["Downloads &amp; Getting Started","YAML Syntax","Introducing Ansible","Frequently Asked Questions","Ansible Modules","Playbooks","The Inventory File, Patterns, and Groups","Using the Python API","Command Line Examples","Man Pages"],objnames:{},filenames:["gettingstarted","YAMLSyntax","index","faq","modules","playbooks","patterns","api","examples","man"]})
\ No newline at end of file
+Search.setIndex({objects:{},terms:{all:[0,1,2,3,4,5,6,7,8],concept:8,forget:5,myapp:8,perl:8,selinux:5,consum:3,pluggabl:3,invent:5,prefix:[4,5,8],code:[2,3,4,8],sleep:5,higher:5,abil:3,follow:[3,4,5,6,7,8],scp:8,content:[0,3,5,2],decid:[3,8],middl:[],depend:3,wish:[0,1,3,5,6,7],sensit:[2,5],graph:3,elsewher:8,specif:[6,7,8],program:[2,3,4,5,1],mcollect:2,leav:5,blindingli:2,spec:5,introduc:2,emploi:1,sourc:[2,3,4,5,7,8],everi:[5,1,8],string:4,fals:[4,1],multi:[2,3,5],failur:[7,3,4],veri:[7,2,3,5,8],affect:5,implicitli:3,magic:[3,5],level:[4,5,1],id_rsa:[0,8],list:[2,1,3,4,5,6,8,9],"try":3,item:[7,1],sane:3,form:[5,1],team:3,dotnet:1,saltstack:2,spent:3,servic:[2,4,5,8],playbook:[0,1,2,3,4,5,6,7,8,9],pleas:3,alic:5,natur:4,seper:3,direct:3,straighten:3,chef:[2,3],second:[5,8],design:[2,3,5],pass:[4,5],download:[0,2],further:[5,1],submit:3,port:[3,8],even:[3,5,8],what:[0,1,2,3,4,5],compar:3,favcolor:[5,8],fine:3,section:[2,4,5],async_statu:8,current:[3,8],"public":5,abbrevi:1,version:[4,5,8],suspect:3,"new":3,net:[],varnam:5,ever:2,method:7,told:5,impact:3,hasn:3,hash:[4,1],facter_hostnam:5,eckersberg:[3,1],gener:[3,5],never:3,privat:5,here:[2,4,5,8],shouldn:[3,5],let:[5,1,8],address:[6,3,4],path:[4,5],along:5,sinc:8,valu:[4,5,1,8],wait:5,box:[2,4],great:[2,3,5],pretti:[7,3],ahead:5,precursor:2,likin:3,fixm:[],adopt:3,host:[0,2,3,4,5,6,7,8],prior:4,pick:[3,8],action:[2,4,5],extrem:0,implement:7,commonli:[8,1],ourselv:5,employe:1,via:[0,2],regardless:[2,3,5,1],extra:3,apach:[3,5,8],modul:[0,2,3,4,5,7,8],ask:[2,3],unix:3,"boolean":1,instal:[0,2,3,4,5,8],total:5,cloud:3,kei:[0,4,5,1],httpd:[5,8],from:[0,2,3,4,5,8],describ:[4,5],would:[4,5,8],commun:3,"super":2,visit:2,two:[0,5,6],noarch:0,few:5,live:0,handler:[2,5,8],call:[4,5,1],usr:[7,4,5,8],msg:[7,4],somevar:5,kick:[3,5,8],type:[7,3],tell:[4,5,8],more:[0,2,3,4,5,6],sort:3,flat:[],exit:7,desir:5,idempot:[3,4,5,8],src:[4,5,8],python:[0,1,2,3,4,7,8],notif:3,sshd:2,notic:3,train:3,agent:[0,8],particular:[2,5],actual:[3,4,5],compani:3,easiest:[2,5],starter:5,must:[4,5],placehold:5,none:7,join:2,ibm:2,module_arg:7,alia:6,setup:[2,4,8],work:[0,2,3,5,6,8],knows_oop:1,dev:3,remain:2,minimum:5,can:[0,1,2,3,4,5,6,7,8],erb:3,learn:[0,1,2,3,5,6],under:5,purpos:4,root:[2,5],control:[2,4,5,8],congratul:0,want:[1,3,4,5,7,8],tar:0,give:1,process:[2,3,5,8],lock:5,chip:2,sudo:[0,5],share:[4,5],templat:[0,2,3,4,5,8],high:8,critic:2,tag:[0,4],surround:[],explor:0,onlin:1,occur:[],contribut:[2,8],alwai:[3,4,5],cours:3,multipl:[6,3,5,8],newlin:[],lame:1,rather:3,anoth:[3,1],ping:[0,7,4,2],uptim:7,write:[2,1,3,4,5,8],how:[0,1,2,3,4,5,6,7,8],anyon:3,hop:3,instead:[3,4],somevalu:5,config:[2,5],stock:4,map:5,express:[2,7,5,1],resourc:[2,3,5],referenc:[6,5],max:8,clone:0,after:[3,5,8],lab:[2,3],befor:[3,4,5,8],ohai_:[4,5],tier:5,end:[3,4,5],data:[2,1,3,4,5,7,8],parallel:[2,3,5,8],man:[2,9],"short":[2,3],orchestr:[2,3,5],practic:[3,1],read:[0,7,1],secur:3,explicit:4,element:4,issu:[2,3],inform:[7,4],mango:1,combin:1,allow:3,exclus:5,order:[3,5],talk:[0,5],oper:[2,5,8],help:[2,1],portion:6,xmpp:3,over:[2,3,8],move:[4,5],orang:1,becaus:[3,1],elit:1,rpmbuild:0,comma:[],hierarchi:3,suffer:3,mainli:3,paramet:[4,5],facter_:[4,5],jid:8,overlord:0,group:[2,7,5,6],cli:7,taboot:3,yaml:[2,3,5,1],pend:5,rapidli:7,infrastructur:[6,0,3,5,2],bin:[0,7,4,5,8],mail:[2,3,8,6],job_statu:[],main:5,might:5,easier:[3,1],wouldn:3,them:[1,3,4,5,6,8],good:3,"return":[7,2,3,4],thei:[3,4,5,6,7,8],food:1,safe:5,dai:3,number:4,"break":5,framework:[7,2,3],jinja2:[0,3,4,5,8],half:3,aka:5,now:[0,3,4,5,6],discuss:3,nor:4,choic:[2,5],multiprocess:[0,3],vidal:3,name:[2,1,4,5,6,8],anyth:[3,4],edit:0,simpl:[2,1,3,5,7,8],didn:3,instruct:[0,3],separ:5,exampl:[0,1,2,3,4,5,6,7,8,9],mode:[3,5,8],timeout:5,each:[3,4,5,1,8],debug:1,found:7,updat:[4,8],spend:3,mean:[3,4,5,1],harm:[],mental:3,michael:2,laserllama:2,hard:3,idea:[2,3,5],realli:[3,4,5,1],backport:0,expect:5,our:1,happen:[3,4],event:[3,4,5],out:[2,3,4,5,7,8],variabl:[2,3,4,5,8],safeti:6,network:2,space:4,reboot:[5,8],bubbl:[4,5],adapt:[],rel:4,internet:2,print:7,got:3,merg:3,correct:[2,3,5,1],red:[2,3,8],insid:5,advanc:[7,3,5],ntp:8,differ:[8,0,3,5,2],pub:8,small:[3,5,1],reason:3,base:[2,3,5],believ:3,dictionari:[5,1],put:[0,8],org:0,bash:[0,3,8],basi:5,pyyaml:0,sytem:3,indent:1,recogn:5,launch:5,argument:[4,5],could:[7,3,5],synchron:5,fqdn:8,keep:5,thing:[2,3,5,1,6],place:2,isn:[2,3],adrian:3,retain:3,think:3,frequent:[2,3,5],first:[0,2,3,4,5,8],origin:2,softwar:[2,3,4,8],rang:2,notifi:[2,3,5,8],render:4,feel:1,onc:[3,4,5],scene:4,yourself:0,mai:[7,0,3,5,1],unlik:[3,5],alreadi:[0,3,4,5],puppet:[2,3],"long":[2,3,4,5,8],massiv:2,open:[3,5],given:[3,4,8],bracket:6,convent:4,script:[7,2,3,8],associ:1,top:[3,4,5],mkdir:[],system:[0,2,3,4,5,6,8],construct:[7,3],inventori:[2,4,5,6],appl:1,too:[2,3,5,1],statement:[2,5],gather:3,termin:8,john:[3,1],"final":[],rpath:2,iptabl:[],shell:[2,4,8],option:[7,3,8,9],especi:3,tool:[2,3,4,5,7,8,9],copi:[2,4,8],took:3,specifi:[3,4,5,1,8],retyp:0,github:[0,2],pars:3,kept:[3,5],than:[0,1,2,3,4,5,8],wide:3,kind:3,silli:[],target:[2,6],keyword:[3,5],provid:1,remov:[4,5,8],dive:5,richer:3,structur:[],banana:[],project:[0,3,8,2],reus:[2,5],architect:2,were:[3,5],minut:[3,8],uses_cv:1,provis:3,pre:0,sai:[3,5,8],bootstrap:[2,3],runner:7,favorit:2,mind:3,ani:[2,3,4,5,7,8],seth:3,dash:1,packag:[2,3,4,8],aforement:6,complet:[3,5],have:[0,1,2,3,5,6],interfac:3,need:[0,1,3,4,5,8],seem:3,cfengin:3,seek:4,paramiko:0,sat:3,imagin:5,engin:8,squar:[],contact:[7,0,3,4],note:[6,4,5,8],also:[0,1,2,3,4,5,6,7,8],ideal:[2,3],client:2,build:[7,0,3],indic:[4,5],datacent:5,hook:4,singl:[3,5],blue:5,begin:[8,1],sure:[5,8],unless:[4,5],distribut:[0,3,2],deploy:[2,3,5,8],track:8,reach:2,deleg:3,discov:5,most:[3,4,1],plai:[4,5],regular:5,plan:3,deploi:[2,3,4,5,8],bsd:3,why:2,strawberri:1,don:[6,3,4,8],external_var:5,doc:2,later:[5,8],cover:[3,8],doe:[2,3,4,6],meanwhil:3,declar:5,snapshot:4,yum:[2,4,5,8],clean:3,pattern:[2,7,5,6],built:[0,3,8],latest:[4,5,8],awesom:[2,5],show:[5,8],cheat:3,text:3,verbos:4,syntax:[2,3,5,1],connect:5,bring:[3,5],directli:[4,8],raleigh:2,particularli:5,pkg:[4,5,8],hack:2,radic:2,identifi:3,trivial:[2,4],find:3,rotat:5,xml:1,absolut:4,onli:[0,3,4,5,8],explicitli:5,locat:4,execut:[7,2,3,4,5],tire:3,transact:5,configur:[0,1,2,3,4,5,6,8],solut:3,written:[2,4,5,8],somefil:5,should:[3,4,1],suppos:5,about:[0,1,2,3,4,5],local:4,yml:5,custom:3,long_running_oper:8,nearli:[4,5],variou:[3,4,5],get:[0,1,2,3,5,8],financ:2,stop:[3,4,8],autom:[3,5],repo:[4,8],ssl:3,obviou:2,ssh:[0,3,8,2],increas:5,requir:[0,3,4,5,2],uvh:0,mdehaan:5,bar:[6,5],patch:3,sha:4,stuff:8,common:1,contain:[3,4,5],usabl:[2,5],through:[0,4,2],where:[2,3,4],view:[2,9],respond:5,set:[0,3,4,5],hierachi:3,arbitari:1,see:[0,1,2,3,4,5,6,8,9],sec:5,result:[7,4,5],fail:[7,3,5],charact:1,setsebool:5,best:[3,5],subject:5,asynchron:[2,5],statu:[5,8],still:3,extend:[2,3],expert:3,down:[7,5],databas:5,someth:[2,3,4,5,8],discoveri:4,restart:[3,4,5,8],state:[3,4,5,8],won:[5,8],between:[3,5],"import":[7,5],experi:3,across:3,attribut:4,altern:[5,8],solo:3,manpag:0,style:4,extens:[2,3],job:[8,1],entir:[3,5],aserv:0,webapp:[3,8],timmi:5,addit:[2,5],both:3,delimit:4,goal:2,howev:3,equal:3,against:[2,3,5,6],etc:[0,2,3,5,6,8],instanc:5,logic:5,mani:[5,8],com:[0,7,5,6],among:3,assur:5,simpli:[4,5],figur:3,overview:1,format:[2,1,3,4,5,6,8],inspir:[2,3],chmod:5,distil:3,fashion:3,colon:5,shutdown:4,linux:[2,3],poll:[2,5,8],mission:2,coupl:3,platform:3,multiplay:2,three:6,been:[2,3],json:[7,2,3,4,1],much:[2,3,4,5,1],treat:3,basic:[0,1,2,3,4,5,6],futur:0,quickli:[2,8],capistrano:[2,3],fire:[2,3,5],rubi:[3,4,8,1],anywher:5,upgrad:[4,8],func:[2,3],minim:0,atlanta:[5,8],those:[3,4,5],"case":3,authorized_kei:0,exception:3,look:[6,5,8],hoc:[2,3,5,8],straight:8,md5sum:4,permit:[],batch:3,vars_fil:5,trick:[2,5],defin:5,"while":[3,5],smart:8,abov:8,error:3,cobbler:[2,3],dehaan:2,layer:3,motd:[5,8],max_client:5,stdout:7,almost:3,technolog:2,site:[3,9],memcach:5,dag:3,conf:[5,8],module_nam:7,sever:[3,5,1],around:3,http_port:5,develop:[0,3,1,2],welcom:2,author:2,perform:3,make:[0,3,4,5,8],ohai:[2,3,4,5,8],cross:3,same:[6,5,1,8],member:1,handl:3,complex:[2,3,5],document:[0,1,3,5,7,8],ansibl:[0,1,2,3,4,5,6,7,8,9],difficult:3,http:4,hostnam:[7,5],again:[3,5],nest:4,painless:2,rail:3,effect:[],remot:[0,4,5,8],assign:[2,5],fruit:1,user:[2,3,5],extern:[2,5],php:8,distutil:[0,2],typic:[3,8],tune:[],recent:3,lower:3,appropri:3,off:[2,3,5],scenario:4,mention:5,setenforc:5,compos:5,well:[0,3,4,5],hypothet:[],non:[2,5],without:3,command:[0,2,3,4,5,6,7,8,9],thi:[0,1,3,4,5,6,8],choos:4,programm:[7,3],model:5,dereferenc:5,usual:[],protocol:4,just:[0,1,2,3,4,5,8],less:[0,3,2],when:[3,4,5,8],rest:9,detail:[2,7,8],kill:[],irc:2,human:1,heavili:3,skill:1,simultan:8,languag:[0,1,2,3,4,5,6],web:[7,3,5,9,8],versu:2,easi:[2,3,4,6],mix:[6,5],except:[],littl:[2,3],add:[0,3,8],other:[0,1,2,3,4,5,8],notori:3,els:[2,5],suit:[3,5],hat:[2,3],app:3,match:5,take:[3,4,5],real:0,applic:[7,3,5],which:[0,6,5,1,2],quirk:1,dest:[4,5,8],dark:7,game:2,know:[3,4,1],background:[2,8],world:[0,3],bit:[3,4],password:[0,5],daemon:[2,3],motorola:2,like:[1,3,4,5,6,8],success:4,header:6,signal:[3,5],arbitrari:3,manual:[3,5],integ:4,divers:2,api:[7,2,3,4],necessari:[4,8],either:[3,4],lose:8,popular:2,async:[3,5],architectur:[2,3],page:[9,0,3,1,2],shed:3,drop:4,often:3,webserv:[6,5,8],suppli:4,some:[0,3,4,5,2],back:[3,5],dead:2,born:3,heritag:3,server:[2,3,4,5,8],transport:[2,3],tmp:8,scale:[2,3],forcibl:[],lead:3,bottom:5,rpm:[0,2],avoid:[0,3,4],though:[2,3,4,5],definit:5,thank:3,per:7,tracker:2,larg:3,select:[2,4,5,6],foo:[6,5,8],complic:[2,3],refer:8,machin:[0,3,4,5,8],core:[2,3],encourag:3,yamllint:1,run:[0,1,3,4,5,7,8],power:[7,2,3,5],usag:[4,8],asciidoc:0,web2:7,vhost:5,step:[3,4,5],web1:7,promot:3,repositori:0,output:[3,5],meantim:3,appli:3,task:[2,3,5,8],soon:[],simpler:[3,8],comparison:[2,3],sbin:[4,5,8],central:3,othervar:5,acm:8,simul:5,srv:[5,8],messag:[7,3],done:[3,5],industri:2,disabl:5,block:5,ntp_server:8,own:[2,3,4,5],effici:[3,5],bounc:[4,5],within:[3,4],contriv:[],sneaker:[],automat:4,due:3,noth:[5,1],pair:[4,1],multinod:3,ensur:[3,5,8],chang:[4,5,8],next:5,bserver:0,your:[0,2,3,4,5,6,8],risk:5,manag:[0,1,2,3,4,5,6,8],behind:[3,4],git:[0,3,4,8,2],fabric:[2,3],wai:[0,3,5,8],aren:3,transfer:[2,8],support:[2,3,4,5],question:[2,3],fast:2,happi:2,avail:[0,1,3,4,5,7,8,9],start:[0,1,2,3,4,5,8],trigger:[3,4,5],wordpress:5,includ:[2,4,5],lot:[2,8],replac:[],"var":[2,5],datastructur:7,individu:6,fork:[7,3,5,8],head:[4,8],simplejson:0,enough:[6,3,8],lint:1,yeah:[],taken:[3,5],line:[0,1,2,3,4,5,6,7,8,9],"true":[4,1],freenod:2,info:8,pull:3,"throw":3,made:[3,4,8],possibl:[6,5,8],whether:[7,3],checkout:[3,4],caller:4,maximum:5,until:[0,5],planet:2,record:1,below:5,limit:[2,5,8],rerun:5,otherwis:4,problem:[3,1],similar:[2,4,5],email:2,facter:[2,3,4,5,8],curv:[2,3],featur:[6,3,5],tasti:1,creat:[2,3],certain:[3,5],doesn:[2,5,1],repres:[5,1],strongli:3,exist:[2,5],file:[0,1,2,4,5,6,8],bob:5,ship:4,check:[3,4,8],probabl:[3,5],echo:[0,5],denot:6,coder:3,googl:2,dbserver:[6,5],excel:[2,3],unnecessari:4,"default":[2,3,5,6],likes_emac:1,librari:1,varieti:3,test:[0,3,4],assum:5,you:[0,1,2,3,4,5,6,8],runtim:5,node:[0,2,3,4,5,8],contend:3,sysadmin:3,wildcard:6,liter:4,sequenc:2,"class":[2,5],devop:2,push:[3,5],releas:[0,3],intent:[],log:5,deferenc:5,gap:3,"60k":[2,3],stai:5,sphinx:0,faster:5,amp:0,directori:[4,5],reliabl:3,itself:7,emerg:2,potenti:[],time:[0,1,2,3,4,5,6,8],far:[2,1],hello:0},objtypes:{},titles:["Downloads &amp; Getting Started","YAML Syntax","Introducing Ansible","Frequently Asked Questions","Ansible Modules","Playbooks","The Inventory File, Patterns, and Groups","Using the Python API","Command Line Examples","Man Pages"],objnames:{},filenames:["gettingstarted","YAMLSyntax","index","faq","modules","playbooks","patterns","api","examples","man"]})
\ No newline at end of file
