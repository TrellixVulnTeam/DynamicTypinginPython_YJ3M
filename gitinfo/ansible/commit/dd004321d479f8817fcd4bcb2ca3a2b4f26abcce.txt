commit dd004321d479f8817fcd4bcb2ca3a2b4f26abcce
Author: Anil Kumar Muraleedharan <amuraleedhar@lenovo.com>
Date:   Wed Dec 5 21:33:42 2018 +0530

    Refactoring code of cnos_portchannel as cnos_linkagg in tune with other vendors. (#49467)
    
    * Refactoring code of cnos_portchannel as cnos_linkagg in tune with other vendors.

diff --git a/lib/ansible/modules/network/cnos/cnos_linkagg.py b/lib/ansible/modules/network/cnos/cnos_linkagg.py
new file mode 100644
index 0000000000..7a3222b0f2
--- /dev/null
+++ b/lib/ansible/modules/network/cnos/cnos_linkagg.py
@@ -0,0 +1,393 @@
+#!/usr/bin/python
+# -*- coding: utf-8 -*-
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+#
+# Copyright (C) 2017 Lenovo, Inc.
+# (c) 2017, Ansible by Red Hat, inc
+# This file is part of Ansible
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+#
+# Module to work on Link Aggregation with Lenovo Switches
+# Lenovo Networking
+#
+ANSIBLE_METADATA = {'metadata_version': '1.1',
+                    'status': ['preview'],
+                    'supported_by': 'network'}
+
+DOCUMENTATION = """
+---
+module: cnos_linkagg
+version_added: "2.8"
+author: "Anil Kumar Muraleedharan (@auraleedhar)"
+short_description: Manage link aggregation groups on Lenovo CNOS devices
+description:
+  - This module provides declarative management of link aggregation groups
+    on Lenovo CNOS network devices.
+notes:
+  - Tested against CNOS 10.8.1
+options:
+  group:
+    description:
+      - Channel-group number for the port-channel
+        Link aggregation group. Range 1-255.
+  mode:
+    description:
+      - Mode of the link aggregation group.
+    choices: ['active', 'on', 'passive']
+  members:
+    description:
+      - List of members of the link aggregation group.
+  aggregate:
+    description: List of link aggregation definitions.
+  state:
+    description:
+      - State of the link aggregation group.
+    default: present
+    choices: ['present', 'absent']
+  purge:
+    description:
+      - Purge links not defined in the I(aggregate) parameter.
+    type: bool
+    default: no
+  provider:
+    description:
+      - B(Deprecated)
+      - "Starting with Ansible 2.5 we recommend using C(connection: network_cli)."
+      - For more information please see the L(IOS Platform Options guide, ../network/user_guide/platform_ios.html).
+      - HORIZONTALLINE
+      - A dict object containing connection details.
+    version_added: "2.8"
+    suboptions:
+      host:
+        description:
+          - Specifies the DNS host name or address for connecting to the remote
+            device over the specified transport.  The value of host is used as
+            the destination address for the transport.
+        required: true
+      port:
+        description:
+          - Specifies the port to use when building the connection to the remote device.
+        default: 22
+      username:
+        description:
+          - Configures the username to use to authenticate the connection to
+            the remote device.  This value is used to authenticate
+            the SSH session. If the value is not specified in the task, the
+            value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.
+      password:
+        description:
+          - Specifies the password to use to authenticate the connection to
+            the remote device.   This value is used to authenticate
+            the SSH session. If the value is not specified in the task, the
+            value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.
+      timeout:
+        description:
+          - Specifies the timeout in seconds for communicating with the network device
+            for either connecting or sending commands.  If the timeout is
+            exceeded before the operation is completed, the module will error.
+        default: 10
+      ssh_keyfile:
+        description:
+          - Specifies the SSH key to use to authenticate the connection to
+            the remote device.   This value is the path to the
+            key used to authenticate the SSH session. If the value is not specified
+            in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE)
+            will be used instead.
+      authorize:
+        description:
+          - Instructs the module to enter privileged mode on the remote device
+            before sending any commands.  If not specified, the device will
+            attempt to execute all commands in non-privileged mode. If the value
+            is not specified in the task, the value of environment variable
+            C(ANSIBLE_NET_AUTHORIZE) will be used instead.
+        type: bool
+        default: 'no'
+      auth_pass:
+        description:
+          - Specifies the password to use if required to enter privileged mode
+            on the remote device.  If I(authorize) is false, then this argument
+            does nothing. If the value is not specified in the task, the value of
+            environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.
+"""
+
+EXAMPLES = """
+- name: create link aggregation group
+  cnos_linkagg:
+    group: 10
+    state: present
+
+- name: delete link aggregation group
+  cnos_linkagg:
+    group: 10
+    state: absent
+
+- name: set link aggregation group to members
+  cnos_linkagg:
+    group: 200
+    mode: active
+    members:
+      - Ethernet1/33
+      - Ethernet1/44
+
+- name: remove link aggregation group from GigabitEthernet0/0
+  cnos_linkagg:
+    group: 200
+    mode: active
+    members:
+      - Ethernet1/33
+
+- name: Create aggregate of linkagg definitions
+  cnos_linkagg:
+    aggregate:
+      - { group: 3, mode: on, members: [Ethernet1/33] }
+      - { group: 100, mode: passive, members: [Ethernet1/44] }
+"""
+
+RETURN = """
+commands:
+  description: The list of configuration mode commands to send to the device
+  returned: always, except for the platforms that use Netconf transport to
+    manage the device.
+  type: list
+  sample:
+    - interface port-channel 30
+    - interface Ethernet1/33
+    - channel-group 30 mode on
+    - no interface port-channel 30
+"""
+
+import re
+from copy import deepcopy
+
+from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.network.common.config import CustomNetworkConfig
+from ansible.module_utils.network.common.utils import remove_default_spec
+from ansible.module_utils.network.cnos.cnos import get_config, load_config
+from ansible.module_utils.network.cnos.cnos import cnos_argument_spec
+
+
+def search_obj_in_list(group, lst):
+    for o in lst:
+        if o['group'] == group:
+            return o
+
+
+def map_obj_to_commands(updates, module):
+    commands = list()
+    want, have = updates
+    purge = module.params['purge']
+
+    for w in want:
+        group = w['group']
+        mode = w['mode']
+        members = w.get('members') or []
+        state = w['state']
+        del w['state']
+
+        obj_in_have = search_obj_in_list(group, have)
+
+        if state == 'absent':
+            if obj_in_have:
+                commands.append('no interface port-channel {0}'.format(group))
+
+        elif state == 'present':
+            cmd = ['interface port-channel {0}'.format(group),
+                   'exit']
+            if not obj_in_have:
+                if not group:
+                    module.fail_json(msg='group is a required option')
+                commands.extend(cmd)
+
+                if members:
+                    for m in members:
+                        commands.append('interface {0}'.format(m))
+                        commands.append('channel-group {0} mode {1}'.format(group, mode))
+
+            else:
+                if members:
+                    if 'members' not in obj_in_have.keys():
+                        for m in members:
+                            commands.extend(cmd)
+                            commands.append('interface {0}'.format(m))
+                            commands.append('channel-group {0} mode {1}'.format(group, mode))
+
+                    elif set(members) != set(obj_in_have['members']):
+                        missing_members = list(set(members) - set(obj_in_have['members']))
+                        for m in missing_members:
+                            commands.extend(cmd)
+                            commands.append('interface {0}'.format(m))
+                            commands.append('channel-group {0} mode {1}'.format(group, mode))
+
+                        superfluous_members = list(set(obj_in_have['members']) - set(members))
+                        for m in superfluous_members:
+                            commands.extend(cmd)
+                            commands.append('interface {0}'.format(m))
+                            commands.append('no channel-group')
+
+    if purge:
+        for h in have:
+            obj_in_want = search_obj_in_list(h['group'], want)
+            if not obj_in_want:
+                commands.append('no interface port-channel {0}'.format(h['group']))
+
+    return commands
+
+
+def map_params_to_obj(module):
+    obj = []
+
+    aggregate = module.params.get('aggregate')
+    if aggregate:
+        for item in aggregate:
+            for key in item:
+                if item.get(key) is None:
+                    item[key] = module.params[key]
+
+            d = item.copy()
+            d['group'] = str(d['group'])
+
+            obj.append(d)
+    else:
+        obj.append({
+            'group': str(module.params['group']),
+            'mode': module.params['mode'],
+            'members': module.params['members'],
+            'state': module.params['state']
+        })
+
+    return obj
+
+
+def parse_mode(module, config, group, member):
+    mode = None
+    netcfg = CustomNetworkConfig(indent=1, contents=config)
+    parents = ['interface {0}'.format(member)]
+    body = netcfg.get_section(parents)
+
+    match_int = re.findall(r'interface {0}\n'.format(member), body, re.M)
+    if match_int:
+        match = re.search(r'channel-group {0} mode (\S+)'.format(group),
+                          body, re.M)
+        if match:
+            mode = match.group(1)
+
+    return mode
+
+
+def parse_members(module, config, group):
+    members = []
+
+    for line in config.strip().split('!'):
+        l = line.strip()
+        if l.startswith('interface'):
+            match_group = re.findall(r'channel-group {0} mode'.format(group), l, re.M)
+            if match_group:
+                match = re.search(r'interface (\S+)', l, re.M)
+                if match:
+                    members.append(match.group(1))
+
+    return members
+
+
+def get_channel(module, config, group):
+    match = re.findall(r'^interface (\S+)', config, re.M)
+
+    if not match:
+        return {}
+
+    channel = {}
+    for item in set(match):
+        member = item
+        channel['mode'] = parse_mode(module, config, group, member)
+        channel['members'] = parse_members(module, config, group)
+
+    return channel
+
+
+def map_config_to_obj(module):
+    objs = list()
+    config = get_config(module)
+
+    for line in config.split('\n'):
+        l = line.strip()
+        match = re.search(r'interface port-channel(\S+)', l, re.M)
+        if match:
+            obj = {}
+            group = match.group(1)
+            obj['group'] = group
+            obj.update(get_channel(module, config, group))
+            objs.append(obj)
+
+    return objs
+
+
+def main():
+    """ main entry point for module execution
+    """
+    element_spec = dict(
+        group=dict(type='int'),
+        mode=dict(choices=['active', 'on', 'passive']),
+        members=dict(type='list'),
+        state=dict(default='present',
+                   choices=['present', 'absent'])
+    )
+
+    aggregate_spec = deepcopy(element_spec)
+    aggregate_spec['group'] = dict(required=True)
+
+    required_one_of = [['group', 'aggregate']]
+    required_together = [['members', 'mode']]
+    mutually_exclusive = [['group', 'aggregate']]
+
+    # remove default in aggregate spec, to handle common arguments
+    remove_default_spec(aggregate_spec)
+
+    argument_spec = dict(
+        aggregate=dict(type='list', elements='dict', options=aggregate_spec,
+                       required_together=required_together),
+        purge=dict(default=False, type='bool')
+    )
+
+    argument_spec.update(element_spec)
+    argument_spec.update(cnos_argument_spec)
+
+    module = AnsibleModule(argument_spec=argument_spec,
+                           required_one_of=required_one_of,
+                           required_together=required_together,
+                           mutually_exclusive=mutually_exclusive,
+                           supports_check_mode=True)
+
+    warnings = list()
+    result = {'changed': False}
+    if warnings:
+        result['warnings'] = warnings
+
+    want = map_params_to_obj(module)
+    have = map_config_to_obj(module)
+
+    commands = map_obj_to_commands((want, have), module)
+    result['commands'] = commands
+
+    if commands:
+        if not module.check_mode:
+            load_config(module, commands)
+        result['changed'] = True
+
+    module.exit_json(**result)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/lib/ansible/modules/network/cnos/cnos_portchannel.py b/lib/ansible/modules/network/cnos/cnos_portchannel.py
deleted file mode 100644
index c6554081a7..0000000000
--- a/lib/ansible/modules/network/cnos/cnos_portchannel.py
+++ /dev/null
@@ -1,450 +0,0 @@
-#!/usr/bin/python
-# -*- coding: utf-8 -*-
-from __future__ import (absolute_import, division, print_function)
-__metaclass__ = type
-#
-# Copyright (C) 2017 Lenovo, Inc.
-#
-# This file is part of Ansible
-#
-# Ansible is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-#
-# Ansible is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
-#
-# Module to send Port channel commands to Lenovo Switches
-# Lenovo Networking
-#
-ANSIBLE_METADATA = {'metadata_version': '1.1',
-                    'status': ['preview'],
-                    'supported_by': 'community'}
-
-
-DOCUMENTATION = '''
----
-module: cnos_portchannel
-author: "Anil Kumar Muraleedharan (@amuraleedhar)"
-short_description: Manage portchannel (port channel) configuration on devices
- running Lenovo CNOS
-description:
-    - This module allows you to work with port channel related configurations.
-     The operators used are overloaded to ensure control over switch port
-     channel configurations. Apart from the regular device connection related
-     attributes, there are five LAG arguments which are overloaded variables
-     that will perform further configurations. They are interfaceArg1,
-     interfaceArg2, interfaceArg3, interfaceArg4, and interfaceArg5.
-     For more details on how to use these arguments, see[Overloaded Variables].
-     This module uses SSH to manage network device configuration.
-     The results of the operation will be placed in a directory named 'results'
-     that must be created by the user in their local directory to where the
-     playbook is run.
-version_added: "2.3"
-extends_documentation_fragment: cnos
-options:
-    interfaceRange:
-        description:
-            - This specifies the interface range in which the port channel is
-              envisaged
-        required: Yes
-        default: Null
-    interfaceArg1:
-        description:
-            - This is an overloaded Port Channel first argument. Usage of this
-              argument can be found is the User Guide referenced above.
-        required: Yes
-        default: Null
-        choices: [channel-group, bfd, bridgeport, description, duplex,
-                  flowcontrol, ip, ipv6, lacp, lldp,load-interval, mac,
-                  mac-address, mac-learn, microburst-detection, mtu, service,
-                  service-policy, shutdown, snmp, spanning-tree, speed,
-                  storm-control, vlan, vrrp, port-channel]
-    interfaceArg2:
-        description:
-            - This is an overloaded Port Channel second argument. Usage of this
-              argument can be found is the User Guide referenced above.
-        required: No
-        default: Null
-        choices: [channel-group number, access or mode or trunk, description,
-                  auto or full or half, receive or send, port-priority,
-                  suspend-individual, timeout,
-                  receive or transmit or trap-notification, tlv-select,
-                  Load interval delay in seconds, counter,
-                  Name for the MAC Access List,
-                  mac-address in HHHH.HHHH.HHHH format,
-                  THRESHOLD  Value in unit of buffer cell,
-                  <64-9216>  MTU in bytes-<64-9216> for L2 packet,
-                  <576-9216> for L3 IPv4 packet, <1280-9216> L3 IPv6 packet,
-                  enter the instance id, input or output, copp-system-policy,
-                  type, 1000  or  10000  or   40000 or   auto, broadcast or
-                  multicast or unicast, disable or enable or egress-only,
-                  Virtual router identifier,
-                  destination-ip or destination-mac or destination-port or
-                  source-dest-ip or source-dest-mac or source-dest-port or
-                  source-interface or source-ip or source-mac or source-port]
-    interfaceArg3:
-        description:
-            - This is an overloaded Port Channel third argument. Usage of this
-              argument can be found is the User Guide referenced above.
-        required: No
-        default: Null
-        choices: [active or on or passive, on or off, LACP port priority,
-        long or short, link-aggregation or mac-phy-status or management-address
-        or max-frame-size or port-description or port-protocol-vlan or
-        port-vlan or power-mdi or protocol-identity or system-capabilities or
-        system-description or system-name or vid-management or vlan-name,
-        counter for load interval, policy input name,
-        all or Copp class name to attach, qos, queueing,
-        Enter the allowed traffic level, ipv6]
-    interfaceArg4:
-        description:
-            - This is an overloaded Port Channel fourth argument. Usage of this
-             argument can be found is the User Guide referenced above.
-        required: No
-        default: Null
-        choices: [key-chain, key-id, keyed-md5 or keyed-sha1 or
-                  meticulous-keyed-md5 or meticulous-keyed-sha1 or simple,
-                  Interval value in milliseconds,
-                  Destination IP (Both IPV4 and IPV6),in or out, MAC address,
-                  Time-out value in seconds, class-id, request,
-                  Specify the IPv4 address, OSPF area ID as a decimal value,
-                  OSPF area ID in IP address format, anycast or secondary,
-                  ethernet, vlan,
-                  MAC (hardware) address in HHHH.HHHH.HHHH format,
-                  Load interval delay in seconds, Specify policy input name,
-                  input or output, cost, port-priority,
-                  BFD minimum receive interval,source-interface]
-    interfaceArg5:
-        description:
-            - This is an overloaded Port Channel fifth argument. Usage of this
-              argument can be found is the User Guide referenced above.
-        required: No
-        default: Null
-        choices: [name of key-chain,  key-Id Value, key-chain , key-id,
-                  BFD minimum receive interval, Value of Hello Multiplier,
-                  admin-down or multihop or non-persistent,
-                  Vendor class-identifier name,
-                  bootfile-name or host-name or log-server or ntp-server or
-                  tftp-server-name, Slot/chassis number, Vlan interface,
-                  Specify policy input name, Port path cost or auto,
-                  Port priority increments of 32]
-    interfaceArg6:
-        description:
-            - This is an overloaded Port Channel sixth argument. Usage of this
-               argument can be found is the User Guide referenced above.
-        required: No
-        default: Null
-        choices: [Authentication key string, name of key-chain, key-Id Value,
-                  Value of Hello Multiplier, admin-down or non-persistent]
-    interfaceArg7:
-        description:
-            - This is an overloaded Port Channel seventh argument. Usage of
-              this argument can be found is the User Guide referenced above.
-        required: No
-        default: Null
-        choices: [Authentication key string, admin-down]
-'''
-EXAMPLES = '''
-Tasks : The following are examples of using the module cnos_portchannel. These
- are written in the main.yml file of the tasks directory.
----
-- name: Test Port Channel - channel-group
-  cnos_portchannel:
-    deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-    outputfile: "./results/test_portchannel_{{inventory_hostname}}_output.txt"
-    interfaceRange: 33
-    interfaceArg1: "channel-group"
-    interfaceArg2: 33
-    interfaceArg3: "on"
-
-- name: Test Port Channel - channel-group - Interface Range
-  cnos_portchannel:
-  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
-  interfaceRange: "1/1-2"
-  interfaceArg1: "channel-group"
-  interfaceArg2: 33
-  interfaceArg3: "on"
-
-- name: Test Port Channel - bridge-port
-  cnos_portchannel:
-  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
-  interfaceRange: 33
-  interfaceArg1: "bridge-port"
-  interfaceArg2: "access"
-  interfaceArg3: 33
-
-- name: Test Port Channel - bridgeport mode
-  cnos_portchannel:
-  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
-  interfaceRange: 33
-  interfaceArg1: "bridge-port"
-  interfaceArg2: "mode"
-  interfaceArg3: "access"
-
-- name: Test Port Channel  - Description
-  cnos_portchannel:
-  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
-  interfaceRange: 33
-  interfaceArg1: "description"
-  interfaceArg2: "Hentammoo "
-
-- name: Test Port Channel - Duplex
-  cnos_portchannel:
-  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
-  interfaceRange: 33
-  interfaceArg1: "duplex"
-  interfaceArg2: "auto"
-
-- name: Test Port Channel - flowcontrol
-  cnos_portchannel:
-  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
-  interfaceRange: 33
-  interfaceArg1: "flowcontrol"
-  interfaceArg2: "send"
-  interfaceArg3: "off"
-
-- name: Test Port Channel - lacp
-  cnos_portchannel:
-  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
-  interfaceRange: 33
-  interfaceArg1: "lacp"
-  interfaceArg2: "port-priority"
-  interfaceArg3: 33
-
-- name: Test Port Channel  - lldp
-  cnos_portchannel:
-  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
-  interfaceRange: 33
-  interfaceArg1: "lldp"
-  interfaceArg2: "tlv-select"
-  interfaceArg3: "max-frame-size"
-
-- name: Test Port Channel - load-interval
-  cnos_portchannel:
-  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
-  interfaceRange: 33
-  interfaceArg1: "load-interval"
-  interfaceArg2: "counter"
-  interfaceArg3: 2
-  interfaceArg4: 33
-
-- name: Test Port Channel - microburst-detection
-  cnos_portchannel:
-  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
-  interfaceRange: 33
-  interfaceArg1: "microburst-detection"
-  interfaceArg2: 25
-
-- name: Test Port Channel  - mtu
-  cnos_portchannel:
-  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
-  interfaceRange: 33
-  interfaceArg1: "mtu"
-  interfaceArg2: 66
-
-- name: Test Port Channel - service-policy
-  cnos_portchannel:
-  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
-  interfaceRange: 33
-  interfaceArg1: "service-policy"
-  interfaceArg2: "input"
-  interfaceArg3: "Anil"
-
-- name: Test Port Channel - speed
-  cnos_portchannel:
-  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
-  interfaceRange: 33
-  interfaceArg1: "speed"
-  interfaceArg2: "auto"
-
-- name: Test Port Channel - storm
-  cnos_portchannel:
-  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
-  interfaceRange: 33
-  interfaceArg1: "storm-control"
-  interfaceArg2: "broadcast"
-  interfaceArg3: 12.5
-
-- name: Test Port Channel - vlan
-  cnos_portchannel:
-  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
-  interfaceRange: 33
-  interfaceArg1: "vlan"
-  interfaceArg2: "disable"
-
-- name: Test Port Channel - vrrp
-  cnos_portchannel:
-  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
-  interfaceRange: 33
-  interfaceArg1: "vrrp"
-  interfaceArg2: 33
-
-- name: Test Port Channel - spanning tree1
-  cnos_portchannel:
-  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
-  interfaceRange: 33
-  interfaceArg1: "spanning-tree"
-  interfaceArg2: "bpduguard"
-  interfaceArg3: "enable"
-
-- name: Test Port Channel - spanning tree 2
-  cnos_portchannel:
-  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
-  interfaceRange: 33
-  interfaceArg1: "spanning-tree"
-  interfaceArg2: "mst"
-  interfaceArg3: "33-35"
-  interfaceArg4: "cost"
-  interfaceArg5: 33
-
-- name: Test Port Channel - ip1
-  cnos_portchannel:
-  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
-  interfaceRange: 33
-  interfaceArg1: "ip"
-  interfaceArg2: "access-group"
-  interfaceArg3: "anil"
-  interfaceArg4: "in"
-
-- name: Test Port Channel - ip2
-  cnos_portchannel:
-  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
-  interfaceRange: 33
-  interfaceArg1: "ip"
-  interfaceArg2: "port"
-  interfaceArg3: "anil"
-
-'''
-RETURN = '''
-msg:
-  description: Success or failure message
-  returned: always
-  type: string
-  sample: "Port Channel configurations accomplished"
-'''
-
-import sys
-import time
-import socket
-import array
-import json
-import time
-import re
-import os
-try:
-    from ansible.module_utils.network.cnos import cnos
-    HAS_LIB = True
-except:
-    HAS_LIB = False
-
-from ansible.module_utils.basic import AnsibleModule
-from collections import defaultdict
-
-
-def portChannelConfig(module, prompt, answer):
-    retVal = ''
-    command = ''
-    portChArg1 = module.params['interfaceArg1']
-    portChArg2 = module.params['interfaceArg2']
-    portChArg3 = module.params['interfaceArg3']
-    if(portChArg1 == "port-channel" and prompt == "(config)#"):
-        command = command + portChArg1 + " load-balance ethernet "
-        if(portChArg2 == "destination-ip" or
-           portChArg2 == "destination-mac" or
-           portChArg2 == "destination-port" or
-           portChArg2 == "source-dest-ip" or
-           portChArg2 == "source-dest-mac" or
-           portChArg2 == "source-dest-port" or
-           portChArg2 == "source-interface" or
-           portChArg2 == "source-ip" or
-           portChArg2 == "source-mac" or
-           portChArg2 == "source-port"):
-
-            # debugOutput(portChArg2)
-            command = command + portChArg2 + " "
-            if(portChArg3 is None):
-                command = command + ""
-            elif(portChArg3 == "source-interface"):
-                command = command + portChArg3
-                cmd = [{'command': command, 'prompt': None, 'answer': None}]
-                retVal = retVal + str(cnos.run_cnos_commands(module, cmd))
-            else:
-                retVal = "Error-231"
-                return retVal
-        else:
-            retVal = "Error-232"
-            return retVal
-# EOM
-
-
-def main():
-    module = AnsibleModule(
-        argument_spec=dict(
-            outputfile=dict(required=True),
-            host=dict(required=False),
-            username=dict(required=False),
-            password=dict(required=False, no_log=True),
-            enablePassword=dict(required=False, no_log=True),
-            deviceType=dict(required=True),
-            interfaceRange=dict(required=False),
-            interfaceArg1=dict(required=True),
-            interfaceArg2=dict(required=False),
-            interfaceArg3=dict(required=False),
-            interfaceArg4=dict(required=False),
-            interfaceArg5=dict(required=False),
-            interfaceArg6=dict(required=False),
-            interfaceArg7=dict(required=False),),
-        supports_check_mode=False)
-
-    outputfile = module.params['outputfile']
-    output = ''
-    # Send the CLi command
-    if(module.params['interfaceArg1'] == "port-channel"):
-        output = output + portChannelConfig(module, "(config)#", None)
-    else:
-        output = output + cnos.interfaceConfig(module, "(config)#",
-                                               "port-channel", None)
-
-    # Save it into the file
-    file = open(outputfile, "a")
-    file.write(output)
-    file.close()
-
-    # Logic to check when changes occur or not
-    errorMsg = cnos.checkOutputForError(output)
-    if(errorMsg is None):
-        module.exit_json(changed=True,
-                         msg="Port Channel Configuration is done")
-    else:
-        module.fail_json(msg=errorMsg)
-
-
-if __name__ == '__main__':
-    main()
diff --git a/test/integration/targets/cnos_portchannel/aliases b/test/integration/targets/cnos_linkagg/aliases
similarity index 100%
rename from test/integration/targets/cnos_portchannel/aliases
rename to test/integration/targets/cnos_linkagg/aliases
diff --git a/test/integration/targets/cnos_portchannel/cnos_portchannel_sample_hosts b/test/integration/targets/cnos_linkagg/cnos_linkagg_sample_hosts
similarity index 88%
rename from test/integration/targets/cnos_portchannel/cnos_portchannel_sample_hosts
rename to test/integration/targets/cnos_linkagg/cnos_linkagg_sample_hosts
index 81d1a27bfc..79f6a0525d 100644
--- a/test/integration/targets/cnos_portchannel/cnos_portchannel_sample_hosts
+++ b/test/integration/targets/cnos_linkagg/cnos_linkagg_sample_hosts
@@ -10,5 +10,5 @@
 # Following you should specify IP Adresses details 
 # Please change <username> and <password> with appropriate value for your switch.
 
-[cnos_portchannel_sample]
-10.241.107.39  ansible_network_os=cnos ansible_ssh_user=<username> ansible_ssh_pass=<password> deviceType=g8272_cnos
+[cnos_linkagg_sample]
+10.241.107.39  ansible_network_os=cnos ansible_ssh_user=<username> ansible_ssh_pass=<password> 
diff --git a/test/integration/targets/cnos_linkagg/defaults/main.yaml b/test/integration/targets/cnos_linkagg/defaults/main.yaml
new file mode 100644
index 0000000000..9ef5ba5165
--- /dev/null
+++ b/test/integration/targets/cnos_linkagg/defaults/main.yaml
@@ -0,0 +1,3 @@
+---
+testcase: "*"
+test_items: []
diff --git a/test/integration/targets/cnos_linkagg/tasks/cli.yaml b/test/integration/targets/cnos_linkagg/tasks/cli.yaml
new file mode 100644
index 0000000000..303af40762
--- /dev/null
+++ b/test/integration/targets/cnos_linkagg/tasks/cli.yaml
@@ -0,0 +1,22 @@
+---
+- name: collect all cli test cases
+  find:
+    paths: "{{ role_path }}/tests/cli"
+    patterns: "{{ testcase }}.yaml"
+  register: test_cases
+  delegate_to: localhost
+
+- name: set test_items
+  set_fact: test_items="{{ test_cases.files | map(attribute='path') | list }}"
+
+- name: run test cases (connection=network_cli)
+  include: "{{ test_case_to_run }}"
+  with_items: "{{ test_items }}"
+  loop_control:
+    loop_var: test_case_to_run
+
+- name: run test case (connection=local)
+  include: "{{ test_case_to_run }} ansible_connection=local"
+  with_first_found: "{{ test_items }}"
+  loop_control:
+    loop_var: test_case_to_run
diff --git a/test/integration/targets/cnos_linkagg/tasks/main.yaml b/test/integration/targets/cnos_linkagg/tasks/main.yaml
new file mode 100644
index 0000000000..415c99d8b1
--- /dev/null
+++ b/test/integration/targets/cnos_linkagg/tasks/main.yaml
@@ -0,0 +1,2 @@
+---
+- { include: cli.yaml, tags: ['cli'] }
diff --git a/test/integration/targets/cnos_linkagg/tests/cli/basic.yaml b/test/integration/targets/cnos_linkagg/tests/cli/basic.yaml
new file mode 100644
index 0000000000..e801c7cbc3
--- /dev/null
+++ b/test/integration/targets/cnos_linkagg/tests/cli/basic.yaml
@@ -0,0 +1,169 @@
+---
+- debug: msg="START cli/basic.yaml on connection={{ ansible_connection }}"
+
+
+- block:
+
+  - name: setup - remove config used in test(part1)
+    cnos_config:
+      lines:
+        - no interface port-channel 20
+      provider: "{{ cli }}"
+    ignore_errors: yes
+
+  - name: setup - remove config used in test(part2)
+    cnos_config:
+      lines:
+        - no interface port-channel 5
+      provider: "{{ cli }}"
+    ignore_errors: yes
+
+  - name: setup - remove config used in test(part3)
+    cnos_config:
+      lines:
+        - no channel-group
+      provider: "{{ cli }}"
+      parents: "{{ item }}"
+    loop:
+      - interface Ethernet1/33
+      - interface Ethernet1/44
+
+  - name: create linkagg
+    cnos_linkagg: &create
+      group: 20
+      state: present
+      provider: "{{ cli }}"
+    register: result
+
+  - assert:
+      that:
+        - "result.changed == true"
+        - "'interface port-channel 20' in result.commands"
+
+  - name: create linkagg(Idempotence)
+    cnos_linkagg: *create
+    register: result
+
+  - assert:
+      that:
+        - "result.changed == false"
+
+  - name: set link aggregation group to members
+    cnos_linkagg: &configure_member
+      group: 20
+      mode: active
+      members:
+        - Ethernet1/33
+        - Ethernet1/44
+      provider: "{{ cli }}"
+    register: result
+
+  - assert:
+      that:
+        - "result.changed == true"
+        - "'interface Ethernet1/33' in result.commands"
+        - "'channel-group 20 mode active' in result.commands"
+        - "'interface Ethernet1/44' in result.commands"
+        - "'channel-group 20 mode active' in result.commands"
+
+  - name: set link aggregation group to members(Idempotence)
+    cnos_linkagg: *configure_member
+    register: result
+
+  - assert:
+      that:
+        - "result.changed == false"
+
+  - name: remove link aggregation group from member
+    cnos_linkagg: &remove_member
+      group: 20
+      mode: active
+      members:
+        - Ethernet1/33
+      provider: "{{ cli }}"
+    register: result
+
+  - assert:
+      that:
+        - "result.changed == true"
+        - "'interface Ethernet1/44' in result.commands"
+        - "'no channel-group' in result.commands"
+
+  - name: remove link aggregation group from member(Idempotence)
+    cnos_linkagg: *remove_member
+    register: result
+
+  - assert:
+      that:
+        - "result.changed == false"
+
+  - name: remove linkagg
+    cnos_linkagg: &remove
+      group: 20
+      state: absent
+      provider: "{{ cli }}"
+    register: result
+
+  - assert:
+      that:
+        - "result.changed == true"
+        - "'no interface port-channel 20' in result.commands"
+
+  - name: remove linkagg(Idempotence)
+    cnos_linkagg: *remove
+    register: result
+
+  - assert:
+      that:
+        - "result.changed == false"
+
+  - name: create aggregate of linkagg definitions
+    cnos_linkagg: &create_agg
+      aggregate:
+        - { group: 5 }
+        - { group: 20, mode: active, members: ['Ethernet1/33'] }
+      provider: "{{ cli }}"
+    register: result
+
+  - assert:
+      that:
+        - "result.changed == true"
+        - "'interface port-channel 5' in result.commands"
+        - "'interface port-channel 20' in result.commands"
+        - "'interface Ethernet1/33' in result.commands"
+        - "'channel-group 20 mode active' in result.commands"
+
+  - name: create aggregate of linkagg definitions(Idempotence)
+    cnos_linkagg: *create_agg
+    register: result
+
+  - assert:
+      that:
+        - "result.changed == false"
+
+  - name: teardown(part1)
+    cnos_config:
+      lines:
+        - no interface port-channel 20
+      provider: "{{ cli }}"
+    ignore_errors: yes
+
+  - name: teardown(part2)
+    cnos_config:
+      lines:
+        - no interface port-channel 5
+      provider: "{{ cli }}"
+    ignore_errors: yes
+
+  - name: teardown(part3)
+    cnos_config:
+      lines:
+        - no channel-group
+      provider: "{{ cli }}"
+      parents: "{{ item }}"
+    loop:
+      - interface Ethernet1/33
+      - interface Ethernet1/44
+
+
+- debug: msg="END cli/basic.yaml on connection={{ ansible_connection }}"
diff --git a/test/integration/targets/cnos_linkagg/vars/main.yaml b/test/integration/targets/cnos_linkagg/vars/main.yaml
new file mode 100644
index 0000000000..aa25153ec8
--- /dev/null
+++ b/test/integration/targets/cnos_linkagg/vars/main.yaml
@@ -0,0 +1,9 @@
+---
+cli:
+  host: "{{ inventory_hostname }}"
+  port: 22
+  username: admin
+  password: admin
+  timeout: 30
+  authorize: True
+  auth_pass:
diff --git a/test/integration/targets/cnos_portchannel/README.md b/test/integration/targets/cnos_portchannel/README.md
deleted file mode 100644
index 428f556962..0000000000
--- a/test/integration/targets/cnos_portchannel/README.md
+++ /dev/null
@@ -1,117 +0,0 @@
-# Ansible Role: cnos_portchannel_sample - Switch Link Aggregation Group (LAG) configuration
----
-<add role description below>
-
-This role is an example of using the *cnos_portchannel.py* Lenovo module in the context of CNOS switch configuration. This module allows you to work with port aggregation related configurations. The operators used are overloaded to ensure control over switch port aggregation configurations.
-
-Apart from the regular device connection related attributes, there are five vLAG arguments which are overloaded variables that will perform further configurations. They are portChArg1, portChArg2, portChArg3, portChArg4, and portChArg5.
-
-The results of the operation can be viewed in *results* directory.
-
-For more details, see [Lenovo modules for Ansible: cnos_portchannel](http://systemx.lenovofiles.com/help/index.jsp?topic=%2Fcom.lenovo.switchmgt.ansible.doc%2Fcnos_portchannel.html&cp=0_3_1_0_4_13).
-
-
-## Requirements
----
-<add role requirements information below>
-
-- Ansible version 2.2 or later ([Ansible installation documentation](http://docs.ansible.com/ansible/intro_installation.html))
-- Lenovo switches running CNOS version 10.2.1.0 or later
-- an SSH connection to the Lenovo switch (SSH must be enabled on the network device)
-
-
-## Role Variables
----
-<add role variables information below>
-
-Available variables are listed below, along with description.
-
-The following are mandatory inventory variables:
-
-Variable | Description
---- | ---
-`ansible_connection` | Has to be `network_cli`
-`ansible_network_os` | Has to be `cnos`
-`ansible_ssh_user` | Specifies the username used to log into the switch
-`ansible_ssh_pass` | Specifies the password used to log into the switch
-`enablePassword` | Configures the password used to enter Global Configuration command mode on the switch (this is an optional parameter)
-`hostname` | Searches the hosts file at */etc/ansible/hosts* and identifies the IP address of the switch on which the role is going to be applied
-`deviceType` | Specifies the type of device from where the configuration will be backed up (**g8272_cnos** - G8272, **g8296_cnos** - G8296, **g8332_cnos** - G8332, **NE10032** - NE10032, **NE1072T** - NE1072T, **NE1032** - NE1032, **NE1032T** - NE1032T, **NE2572** - NE2572, **NE0152T** - NE0152T)
-
-The values of the variables used need to be modified to fit the specific scenario in which you are deploying the solution. To change the values of the variables, you need to visits the *vars* directory of each role and edit the *main.yml* file located there. The values stored in this file will be used by Ansible when the template is executed.
-
-The syntax of *main.yml* file for variables is the following:
-
-```
-<template variable>:<value>
-```
-
-You will need to replace the `<value>` field with the value that suits your topology. The `<template variable>` fields are taken from the template and it is recommended that you leave them unchanged.
-
-Variable | Description
---- | ---
-`interfaceRange` | Specifies the interface range that will be part of the LAG
-`portChArg1` | This is an overloaded  variable. Please refer to the [cnos_portchannel module documentation](http://ralfss28.labs.lenovo.com:5555/help/topic/com.lenovo.switchmgt.ansible.doc/cnos_portchannel.html?cp=0_3_1_0_2_14) for detailed information on usage. The values of these variables depend on the configuration context and the choices are the following: **aggregation-group**, **bridge-port**, **description**, **duplex**, **flowcontrol**, **lacp**, **lldp**, **load-interval**, **mac**, **mac-address**, **mac-learn**, **microburst-detection**, **mtu**, **service**, **service-policy**, **shutdown**, **snmp**, **speed**, **storm-control**, **vlan**, **vrrp**, **port-aggregation**.
-`portChArg2` | This is an overloaded PortChannel variable. Please refer to the [cnos_portchannel module documentation](http://ralfss28.labs.lenovo.com:5555/help/topic/com.lenovo.switchmgt.ansible.doc/cnos_portchannel.html?cp=0_3_1_0_2_14) for detailed information on usage. The values of these variables depend on the configuration context and the choices are the following: specify a LAG number, **access**, **mode**, **trunk**, LAG description, **auto**, **full**, **half**, **receive**, **send**, **port-priority**, **suspend-individual**, **timeout**, **transmit**, **trap-notification**, **tlv-select**, load interval delay, **counter**, name for the MAC access group, MAC address in XXXX.XXXX.XXXX format, threshold value, MTU in bytes, instance ID to map to the EVC, **input**, **output**, **copp-system-policy**, **type**, **auto**, 1000, 10000, 40000, **broadcast**, **unicast**, **multicast**, **disable**, **enable**, **egress-only**, virtual router ID, **destination-ip**, **destination-mac**, **destination-port**, **source-dest-ip**, **source-dest-mac**, **source-dest-port**, **source-interface**, **source-ip**, **source-mac**, **source-port**.
-`portChArg3` | This is an overloaded PortChannel variable. Please refer to the [cnos_portchannel module documentation](http://ralfss28.labs.lenovo.com:5555/help/topic/com.lenovo.switchmgt.ansible.doc/cnos_portchannel.html?cp=0_3_1_0_2_14) for detailed information on usage. The values of these variables depend on the configuration context and the choices are the following: **active**, **passive**, **on**, **off**, LACP port priority, **long**, **short**, **link-aggregation**, **mac-phy-status**, **management-address**, **max-frame-size**, **port-description**, **port-protocol-vlan**, **port-vlan**, **power-mdi**, **protocol-identity**, **system-capabilities**, **system-description**, **system-name**, **vid-management**, **vlan-name**, counter for the load interval, the name of the policy to attach, **all**, COPP class name to attach, **qos**, **queuing**, allowed traffic level, **ipv6**, **source-interface**.
-`portChArg4` | This is an overloaded PortChannel variable. Please refer to the [cnos_portchannel module documentation](http://ralfss28.labs.lenovo.com:5555/help/topic/com.lenovo.switchmgt.ansible.doc/cnos_portchannel.html?cp=0_3_1_0_2_14) for detailed information on usage. The values of these variables depend on the configuration context and the choices are the following: load interval delay, name of the QoS policy to attach, **input**, **output**
-`portChArg5` | This is an overloaded PortChannel variable. Please refer to the [cnos_portchannel module documentation](http://ralfss28.labs.lenovo.com:5555/help/topic/com.lenovo.switchmgt.ansible.doc/cnos_portchannel.html?cp=0_3_1_0_2_14) for detailed information on usage. The values of these variables depend on the configuration context and the choices are the following: name of the QoS policy to attach
-
-
-## Dependencies
----
-<add dependencies information below>
-
-- username.iptables - Configures the firewall and blocks all ports except those needed for web server and SSH access.
-- username.common - Performs common server configuration.
-- cnos_portchannel.py - This modules needs to be present in the *library* directory of the role.
-- cnos.py - This module needs to be present in the PYTHONPATH environment variable set in the Ansible system.
-- /etc/ansible/hosts - You must edit the */etc/ansible/hosts* file with the device information of the switches designated as leaf switches. You may refer to *cnos_portchannel_sample_hosts* for a sample configuration.
-
-Ansible keeps track of all network elements that it manages through a hosts file. Before the execution of a playbook, the hosts file must be set up.
-
-Open the */etc/ansible/hosts* file with root privileges. Most of the file is commented out by using **#**. You can also comment out the entries you will be adding by using **#**. You need to copy the content of the hosts file for the role into the */etc/ansible/hosts* file. The sample hosts file for the role is located in the main directory.
-
-```
-[cnos_portchannel_sample]
-10.241.107.39   ansible_network_os=cnos ansible_ssh_user=<username> ansible_ssh_pass=<password> deviceType=g8272_cnos
-10.241.107.40   ansible_network_os=cnos ansible_ssh_user=<username> ansible_ssh_pass=<password> deviceType=g8272_cnos
-```
-
-**Note:** You need to change the IP addresses to fit your specific topology. You also need to change the `<username>` and `<password>` to the appropriate values used to log into the specific Lenovo network devices.
-
-
-## Example Playbook
----
-<add playbook samples below>
-
-To execute an Ansible playbook, use the following command:
-
-```
-ansible-playbook cnos_portchannel_sample.yml -vvv
-```
-
-`-vvv` is an optional verbos command that helps identify what is happening during playbook execution. The playbook for each role is located in the main directory of the solution.
-
-```
- - name: Module to  do Port Channel configurations
-   hosts: cnos_portchannel_sample
-   gather_facts: no
-   connection: local
-   roles:
-    - cnos_portchannel_sample
-```
-
-
-## License
----
-<add license information below>
-Copyright (C) 2017 Lenovo, Inc.
-
-This file is part of Ansible
-
-Ansible is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
-
-Ansible is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
diff --git a/test/integration/targets/cnos_portchannel/tasks/main.yml b/test/integration/targets/cnos_portchannel/tasks/main.yml
deleted file mode 100644
index a7e82cbf49..0000000000
--- a/test/integration/targets/cnos_portchannel/tasks/main.yml
+++ /dev/null
@@ -1,98 +0,0 @@
-# This contain sample template execution tasks
----
-- name: Test Port Channel - aggregation-group
-  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
-  with_items: "{{test_portchannel_data1}}"
- 
-- name: Test Port Channel - aggregation-group - Interface Range
-  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
-  with_items: "{{test_portchannel_data24}}"
-
-- name: Test Port Channel - bridge-port
-  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt  interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
-  with_items: "{{test_portchannel_data2}}"
-
-- name: Test Port Channel - bridgeport mode
-  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
-  with_items: "{{test_portchannel_data3}}"
-
-- name: Test Port Channel  - Description
-  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
-  with_items: "{{test_portchannel_data4}}"
-
-- name: Test Port Channel - Duplex
-  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
-  with_items: "{{test_portchannel_data5}}"
-
-- name: Test Port Channel - flowcontrol
-  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
-  with_items: "{{test_portchannel_data6}}"
-
-- name: Test Port Channel - lacp
-  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
-  with_items: "{{test_portchannel_data7}}"
-
-- name: Test Port Channel  - lldp
-  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
-  with_items: "{{test_portchannel_data8}}"
-
-- name: Test Port Channel - load-interval
-  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}' interfaceArg4='{{item.interfaceArg4}}'
-  with_items: "{{test_portchannel_data9}}"
-
-#- name: Test Port Channel - mac
-#  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
-#  with_items: "{{test_portchannel_data10}}"
-
-- name: Test Port Channel - microburst-detection
-  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
-  with_items: "{{test_portchannel_data11}}"
-
-- name: Test Port Channel  - mtu
-  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
-  with_items: "{{test_portchannel_data12}}"
-
-- name: Test Port Channel - service-policy
-  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
-  with_items: "{{test_portchannel_data13}}"
-
-- name: Test Port Channel - speed
-  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
-  with_items: "{{test_portchannel_data14}}"
-
-- name: Test Port Channel - storm
-  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
-  with_items: "{{test_portchannel_data15}}"
-
-#- name: Test Port Channel - vlan
-#  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
-#  with_items: "{{test_portchannel_data16}}"
-
-- name: Test Port Channel - vrrp
-  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
-  with_items: "{{test_portchannel_data17}}"
-
-- name: Test Port Channel - spanning tree1
-  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
-  with_items: "{{test_portchannel_data18}}"
-
-- name: Test Port Channel - spanning tree 2
-  cnos_portchannel: host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}' interfaceArg4='{{item.interfaceArg4}}' interfaceArg5='{{item.interfaceArg5}}'
-  with_items: "{{test_portchannel_data19}}"
-
-- name: Test Port Channel - ip1
-  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}' interfaceArg4='{{item.interfaceArg4}}'
-  with_items: "{{test_portchannel_data20}}"
-
-- name: Test Port Channel - ip2
-  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
-  with_items: "{{test_portchannel_data21}}"
-
-#- name: Test Port Channel - bfd
-#  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}' interfaceArg4='{{item.interfaceArg4}}' interfaceArg5='{{item.interfaceArg5}}'
-#  with_items: "{{test_portchannel_data22}}"
-
-#- name: Test Port Channel - bfd
-#  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}' interfaceArg4='{{item.interfaceArg4}}' interfaceArg5='{{item.interfaceArg5}}' interfaceArg6='{{item.interfaceArg6}}'
-#  with_items: "{{test_portchannel_data23}}"
-## Completed file
diff --git a/test/integration/targets/cnos_portchannel/vars/main.yml b/test/integration/targets/cnos_portchannel/vars/main.yml
deleted file mode 100644
index bb7a1bf034..0000000000
--- a/test/integration/targets/cnos_portchannel/vars/main.yml
+++ /dev/null
@@ -1,49 +0,0 @@
----
-test_portchannel_data1:
-  - {interfaceRange: 33, interfaceArg1: "channel-group", interfaceArg2: 33, interfaceArg3: "on"}
-test_portchannel_data2:
-  - {interfaceRange: 33, interfaceArg1: "switchport", interfaceArg2: "access", interfaceArg3: 33}
-test_portchannel_data3:
-  - {interfaceRange: 33, interfaceArg1: "switchport", interfaceArg2: "mode", interfaceArg3: "access"}
-test_portchannel_data4:
-  - {interfaceRange: 33, interfaceArg1: "description", interfaceArg2: "Hentammoo "}
-test_portchannel_data5:
-  - {interfaceRange: 2, interfaceArg1: "duplex", interfaceArg2: "auto"}
-test_portchannel_data6:
-  - {interfaceRange: 33, interfaceArg1: "flowcontrol", interfaceArg2: "send", interfaceArg3: "off"}
-test_portchannel_data7:
-  - {interfaceRange: 33, interfaceArg1: "lacp", interfaceArg2: "port-priority", interfaceArg3: 33}
-test_portchannel_data8:
-  - {interfaceRange: 33, interfaceArg1: "lldp", interfaceArg2: "tlv-select", interfaceArg3: "max-frame-size"}
-test_portchannel_data9:
-  - {interfaceRange: 33, interfaceArg1: "load-interval", interfaceArg2: "counter", interfaceArg3: 2, interfaceArg4: 33 }
-test_portchannel_data10:
-  - {interfaceRange: 33, interfaceArg1: "mac", interfaceArg2: "copp-system-acl-vlag-hc"}
-test_portchannel_data11:
-  - {interfaceRange: 33, interfaceArg1: "microburst-detection", interfaceArg2: 25}
-test_portchannel_data12:
-  - {interfaceRange: 33, interfaceArg1: "mtu", interfaceArg2: 66}
-test_portchannel_data13:
-  - {interfaceRange: 33, interfaceArg1: "service-policy", interfaceArg2: "input", interfaceArg3: "Anil"}
-test_portchannel_data14:
-  - {interfaceRange: 13, interfaceArg1: "speed", interfaceArg2: "40000"}
-test_portchannel_data15:
-  - {interfaceRange: 33, interfaceArg1: "storm-control", interfaceArg2: "broadcast", interfaceArg3: 12.5 }
-test_portchannel_data16:
-  - {interfaceRange: 33, interfaceArg1: "vlan", interfaceArg2: "disable"}
-test_portchannel_data17:
-  - {interfaceRange: 33, interfaceArg1: "vrrp", interfaceArg2: 33}
-test_portchannel_data18:
-  - {interfaceRange: 33, interfaceArg1: "spanning-tree", interfaceArg2: "bpduguard", interfaceArg3: "enable"}
-test_portchannel_data19:
-  - {interfaceRange: 33, interfaceArg1: "spanning-tree", interfaceArg2: "mst", interfaceArg3: "33-35", interfaceArg4: "cost", interfaceArg5: 33}
-test_portchannel_data20:
-  - {interfaceRange: 33, interfaceArg1: "ip", interfaceArg2: "access-group", interfaceArg3: "anil", interfaceArg4: "in"}
-test_portchannel_data21:
-  - {interfaceRange: 33, interfaceArg1: "ip", interfaceArg2: "port", interfaceArg3: "anil" }
-test_portchannel_data22:
-  - {interfaceRange: 2, interfaceArg1: "bfd", interfaceArg2: "interval", interfaceArg3: 55, interfaceArg4: 55, interfaceArg5: 33}
-test_portchannel_data23:
-  - {interfaceRange: 2, interfaceArg1: "bfd", interfaceArg2: "ipv4", interfaceArg3: "authentication", interfaceArg4: "meticulous-keyed-md5", interfaceArg5: "key-chain", interfaceArg6: "mychain"}
-test_portchannel_data24:
-- {interfaceRange: "13", interfaceArg1: "channel-group", interfaceArg2: 33, interfaceArg3: "on"}
diff --git a/test/units/modules/network/cnos/fixtures/cnos_linkagg_config.cfg b/test/units/modules/network/cnos/fixtures/cnos_linkagg_config.cfg
new file mode 100644
index 0000000000..3daa8ecb3e
--- /dev/null
+++ b/test/units/modules/network/cnos/fixtures/cnos_linkagg_config.cfg
@@ -0,0 +1,36 @@
+!
+hostname ip10-241-107-39
+!
+interface Ethernet1/33
+ description anil
+ microburst-detection enable threshold 25
+ lldp tlv-select max-frame-size
+ lacp port-priority 33
+!
+interface Ethernet1/44
+!
+interface Ethernet1/10
+ no switchport
+ ip address 10.241.108.10/24
+ vrrp 202
+  address 10.241.108.20
+  shutdown
+!
+interface Ethernet1/11
+ no switchport
+ mtu 1402
+ ip address 1.1.1.2/8
+!
+interface port-channel20
+!
+interface port-channel33
+ description Hentammoo
+ load-interval counter 2 33
+ switchport access vlan 33
+ storm-control broadcast level 12.50
+ mtu 66
+ spanning-tree mst 33-35 cost 33
+ spanning-tree bpduguard enable
+!
+interface Ethernet1/9
+!
diff --git a/test/units/modules/network/cnos/fixtures/cnos_portchannel_config.cfg b/test/units/modules/network/cnos/fixtures/cnos_portchannel_config.cfg
deleted file mode 100644
index 258034ec30..0000000000
--- a/test/units/modules/network/cnos/fixtures/cnos_portchannel_config.cfg
+++ /dev/null
@@ -1,25 +0,0 @@
-Flags:
-D - Down        P - Up in port-channel (members)
-S - Switched    R - Routed
-I - Individual  s - Suspended
-U - Up (port-channel)
-B - standBy (members)
-------+----------------+--------+-----------------------------------------------
-Group  Port-Channel     Protocol Member Ports
-------+----------------+--------+-----------------------------------------------
-1      po1         (SD)  NONE
-2      po2         (SD)  NONE
-11     po11        (SD)  LACP     Ethernet1/23(D)
-12     po12        (SD)  NONE
-13     po13        (SD)  NONE
-14     po14        (SD)  NONE
-15     po15        (SD)  NONE
-17     po17        (SD)  NONE
-20     po20        (SD)  NONE
-33     po33        (SD)  NONE     Ethernet1/1(D)
-100    po100       (SD)  NONE
-1001   po1001      (SD)  LACP     Ethernet1/2(D)
-1002   po1002      (SD)  NONE
-1003   po1003      (SD)  LACP     Ethernet1/3(D)
-1004   po1004      (SD)  LACP     Ethernet1/4(D)
-
diff --git a/test/units/modules/network/cnos/test_cnos_linkagg.py b/test/units/modules/network/cnos/test_cnos_linkagg.py
new file mode 100644
index 0000000000..a951cf6b48
--- /dev/null
+++ b/test/units/modules/network/cnos/test_cnos_linkagg.py
@@ -0,0 +1,147 @@
+#
+# (c) 2018 Red Hat Inc.
+# Copyright (C) 2017 Lenovo.
+#
+# This file is part of Ansible
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+#
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import re
+import json
+
+from units.compat.mock import patch
+from ansible.modules.network.cnos import cnos_linkagg
+from units.modules.utils import set_module_args
+from .cnos_module import TestCnosModule, load_fixture
+
+
+class TestCnosLinkaggModule(TestCnosModule):
+    module = cnos_linkagg
+
+    def setUp(self):
+        super(TestCnosLinkaggModule, self).setUp()
+        self._patch_get_config = patch(
+            'ansible.modules.network.cnos.cnos_linkagg.get_config'
+        )
+        self._patch_load_config = patch(
+            'ansible.modules.network.cnos.cnos_linkagg.load_config'
+        )
+
+        self._get_config = self._patch_get_config.start()
+        self._load_config = self._patch_load_config.start()
+
+    def tearDown(self):
+        super(TestCnosLinkaggModule, self).tearDown()
+        self._patch_get_config.stop()
+        self._patch_load_config.stop()
+
+    def load_fixtures(self, commands=None):
+        config_file = 'cnos_linkagg_config.cfg'
+        self._get_config.return_value = load_fixture(config_file)
+        self._load_config.return_value = None
+
+    def test_cnos_linkagg_group_present(self, *args, **kwargs):
+        set_module_args(dict(
+            group='10',
+            state='present'
+        ))
+        result = self.execute_module(changed=True)
+        self.assertEqual(
+            result,
+            {
+                'commands': [
+                    'interface port-channel 10',
+                    'exit'
+                ],
+                'changed': True
+            }
+        )
+
+    def test_cnos_linkagg_group_members_active(self, *args, **kwargs):
+        set_module_args(dict(
+            group='10',
+            mode='active',
+            members=[
+                'Ethernet 1/33',
+                'Ethernet 1/44'
+            ]
+        ))
+        result = self.execute_module(changed=True)
+        self.assertEqual(
+            result,
+            {
+                'commands': [
+                    'interface port-channel 10',
+                    'exit',
+                    'interface Ethernet 1/33',
+                    'channel-group 10 mode active',
+                    'interface Ethernet 1/44',
+                    'channel-group 10 mode active'
+                ],
+                'changed': True
+            }
+        )
+
+    def test_cnos_linkagg_group_member_removal(self, *args, **kwargs):
+        set_module_args(dict(
+            group='20',
+            mode='active',
+            members=[
+                'Ethernet 1/10',
+            ]
+        ))
+        result = self.execute_module(changed=True)
+        self.assertEqual(
+            result,
+            {
+                'commands': [
+                    'interface port-channel 20',
+                    'exit',
+                    'interface Ethernet 1/10',
+                    'channel-group 20 mode active'
+                ],
+                'changed': True
+            }
+        )
+
+    def test_cnos_linkagg_group_members_absent(self, *args, **kwargs):
+        set_module_args(dict(
+            group='20',
+            state='absent'
+        ))
+        result = self.execute_module(changed=True)
+        self.assertEqual(
+            result,
+            {
+                'commands': [
+                    'no interface port-channel 20'
+                ],
+                'changed': True
+            }
+        )
+        set_module_args(dict(
+            group='10',
+            state='absent'
+        ))
+        result = self.execute_module(changed=False)
+        self.assertEqual(
+            result,
+            {
+                'commands': [],
+                'changed': False
+            }
+        )
diff --git a/test/units/modules/network/cnos/test_cnos_portchannel.py b/test/units/modules/network/cnos/test_cnos_portchannel.py
deleted file mode 100644
index eb506b358b..0000000000
--- a/test/units/modules/network/cnos/test_cnos_portchannel.py
+++ /dev/null
@@ -1,84 +0,0 @@
-from __future__ import (absolute_import, division, print_function)
-__metaclass__ = type
-
-import json
-import os
-from units.compat.mock import patch
-from ansible.modules.network.cnos import cnos_portchannel
-from units.modules.utils import set_module_args
-from .cnos_module import TestCnosModule, load_fixture
-
-
-class TestCnosPortchannelModule(TestCnosModule):
-
-    module = cnos_portchannel
-
-    def setUp(self):
-        super(TestCnosPortchannelModule, self).setUp()
-
-        self.mock_run_cnos_commands = patch('ansible.module_utils.network.cnos.cnos.run_cnos_commands')
-        self.run_cnos_commands = self.mock_run_cnos_commands.start()
-
-    def tearDown(self):
-        super(TestCnosPortchannelModule, self).tearDown()
-        self.mock_run_cnos_commands.stop()
-
-    def load_fixtures(self, commands=None, transport='cli'):
-        self.run_cnos_commands.return_value = [load_fixture('cnos_portchannel_config.cfg')]
-
-    def test_portchannel_channelgroup(self):
-        set_module_args({'username': 'admin', 'password': 'pass',
-                         'host': '10.241.107.39', 'deviceType': 'g8272_cnos',
-                         'outputfile': self.test_log, 'interfaceRange': '33',
-                         'interfaceArg1': 'channel-group', 'interfaceArg2': '33', 'interfaceArg3': 'on'})
-        result = self.execute_module(changed=True)
-        expected_result = 'Port Channel Configuration is done'
-        self.assertEqual(result['msg'], expected_result)
-
-    def test_cnos_portchannel_lacp(self):
-        set_module_args({'username': 'admin', 'password': 'pass',
-                         'host': '10.241.107.39', 'deviceType': 'g8272_cnos',
-                         'outputfile': self.test_log, 'interfaceRange': '33',
-                         'interfaceArg1': 'lacp', 'interfaceArg2': 'port-priority', 'interfaceArg3': '33'})
-        result = self.execute_module(changed=True)
-        expected_result = 'Port Channel Configuration is done'
-        self.assertEqual(result['msg'], expected_result)
-
-    def test_cnos_portchannel_duplex(self):
-        set_module_args({'username': 'admin', 'password': 'pass',
-                         'host': '10.241.107.39', 'deviceType': 'g8272_cnos',
-                         'outputfile': self.test_log, 'interfaceRange': '2',
-                         'interfaceArg1': 'duplex', 'interfaceArg2': 'auto'})
-        result = self.execute_module(changed=True)
-        expected_result = 'Port Channel Configuration is done'
-        self.assertEqual(result['msg'], expected_result)
-
-    def test_cnos_portchannel_mtu(self):
-        set_module_args({'username': 'admin', 'password': 'pass',
-                         'host': '10.241.107.39', 'deviceType': 'g8272_cnos',
-                         'outputfile': self.test_log, 'interfaceRange': '33',
-                         'interfaceArg1': 'mtu', 'interfaceArg2': '1300'})
-        result = self.execute_module(changed=True)
-        expected_result = 'Port Channel Configuration is done'
-        self.assertEqual(result['msg'], expected_result)
-
-    def test_cnos_portchannel_spanningtree(self):
-        set_module_args({'username': 'admin', 'password': 'pass',
-                         'host': '10.241.107.39', 'deviceType': 'g8272_cnos',
-                         'outputfile': self.test_log, 'interfaceRange': '33',
-                         'interfaceArg1': 'spanning-tree', 'interfaceArg2': 'mst',
-                         'interfaceArg3': '33-35', 'interfaceArg4': 'cost',
-                         'interfaceArg5': '33'})
-        result = self.execute_module(changed=True)
-        expected_result = 'Port Channel Configuration is done'
-        self.assertEqual(result['msg'], expected_result)
-
-    def test_cnos_portchannel_ip(self):
-        set_module_args({'username': 'admin', 'password': 'pass',
-                         'host': '10.241.107.39', 'deviceType': 'g8272_cnos',
-                         'outputfile': self.test_log, 'interfaceRange': '33',
-                         'interfaceArg1': 'ip', 'interfaceArg2': 'port',
-                         'interfaceArg3': 'anil'})
-        result = self.execute_module(changed=True)
-        expected_result = 'Port Channel Configuration is done'
-        self.assertEqual(result['msg'], expected_result)
