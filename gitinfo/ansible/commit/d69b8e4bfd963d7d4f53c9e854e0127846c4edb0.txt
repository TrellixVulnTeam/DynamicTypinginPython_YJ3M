commit d69b8e4bfd963d7d4f53c9e854e0127846c4edb0
Author: Tim Rupp <caphrim007@gmail.com>
Date:   Mon Oct 29 15:16:51 2018 -0700

    Import mdule for managing sys daemon logs in BIG-IP (#47783)
    
    This module allows one to manage the daemon log settings in tmm on BIG-IP

diff --git a/lib/ansible/modules/network/f5/bigip_sys_daemon_log_tmm.py b/lib/ansible/modules/network/f5/bigip_sys_daemon_log_tmm.py
new file mode 100644
index 0000000000..e2130c0d0b
--- /dev/null
+++ b/lib/ansible/modules/network/f5/bigip_sys_daemon_log_tmm.py
@@ -0,0 +1,492 @@
+#!/usr/bin/python
+# -*- coding: utf-8 -*-
+#
+# Copyright: (c) 2018, F5 Networks Inc.
+# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
+
+from __future__ import absolute_import, division, print_function
+__metaclass__ = type
+
+
+ANSIBLE_METADATA = {'metadata_version': '1.1',
+                    'status': ['preview'],
+                    'supported_by': 'certified'}
+
+DOCUMENTATION = r'''
+---
+module: bigip_sys_daemon_log_tmm
+short_description: Manage BIG-IP tmm daemon log settings
+description:
+  - Manage BIG-IP tmm log settings.
+version_added: 2.8
+options:
+  arp_log_level:
+    description:
+      - Specifies the lowest level of ARP messages from the tmm daemon
+        to include in the system log.
+    choices:
+      - debug
+      - error
+      - informational
+      - notice
+      - warning
+  http_compression_log_level:
+    description:
+      - Specifies the lowest level of HTTP compression messages from the tmm daemon
+        to include in the system log.
+    choices:
+      - debug
+      - error
+      - informational
+      - notice
+      - warning
+  http_log_level:
+    description:
+      - Specifies the lowest level of HTTP messages from the tmm daemon
+        to include in the system log.
+    choices:
+      - debug
+      - error
+      - informational
+      - notice
+      - warning
+  ip_log_level:
+    description:
+      - Specifies the lowest level of IP address messages from the tmm daemon
+        to include in the system log.
+    choices:
+      - debug
+      - informational
+      - notice
+      - warning
+  irule_log_level:
+    description:
+      - Specifies the lowest level of iRule messages from the tmm daemon
+        to include in the system log.
+    choices:
+      - debug
+      - error
+      - informational
+      - notice
+      - warning
+  layer4_log_level:
+    description:
+      - Specifies the lowest level of Layer 4 messages from the tmm daemon
+        to include in the system log.
+    choices:
+      - debug
+      - informational
+      - notice
+  net_log_level:
+    description:
+      - Specifies the lowest level of network messages from the tmm daemon
+        to include in the system log.
+    choices:
+      - critical
+      - debug
+      - error
+      - informational
+      - notice
+      - warning
+  os_log_level:
+    description:
+      - Specifies the lowest level of operating system messages from the tmm daemon
+        to include in the system log.
+    choices:
+      - alert
+      - critical
+      - debug
+      - emergency
+      - error
+      - informational
+      - notice
+      - warning
+  pva_log_level:
+    description:
+      - Specifies the lowest level of PVA messages from the tmm daemon
+        to include in the system log.
+    choices:
+      - debug
+      - informational
+      - notice
+  ssl_log_level:
+    description:
+      - Specifies the lowest level of SSL messages from the tmm daemon
+        to include in the system log.
+    choices:
+      - alert
+      - critical
+      - debug
+      - emergency
+      - error
+      - informational
+      - notice
+      - warning
+  state:
+    description:
+      - The state of the log level on the system. When C(present), guarantees
+        that an existing log level is set to C(value).
+    default: present
+    choices:
+      - present
+extends_documentation_fragment: f5
+author:
+  - Wojciech Wypior (@wojtek0806)
+'''
+
+EXAMPLES = r'''
+- name: Set SSL log level to debug
+  bigip_sys_daemon_log_tmm:
+    provider:
+      password: secret
+      server: lb.mydomain.com
+      user: admin
+    ssl_log_level: debug
+  delegate_to: localhost
+'''
+
+RETURN = r'''
+arp_log_level:
+  description: Lowest level of ARP messages from the tmm daemon to log.
+  returned: changed
+  type: string
+  sample: error
+http_compression_log_level:
+  description: Lowest level of HTTP compression messages from the tmm daemon to log.
+  returned: changed
+  type: string
+  sample: debug
+http_log_level:
+  description: Lowest level of HTTP messages from the tmm daemon to log.
+  returned: changed
+  type: string
+  sample: notice
+ip_log_level:
+  description: Lowest level of IP address messages from the tmm daemon to log.
+  returned: changed
+  type: string
+  sample: warning
+irule_log_level:
+  description: Lowest level of iRule messages from the tmm daemon to log.
+  returned: changed
+  type: string
+  sample: error
+layer4_log_level:
+  description: Lowest level of Layer 4 messages from the tmm daemon to log.
+  returned: changed
+  type: string
+  sample: notice
+net_log_level:
+  description: Lowest level of network messages from the tmm daemon to log.
+  returned: changed
+  type: string
+  sample: critical
+os_log_level:
+  description: Lowest level of operating system messages from the tmm daemon to log.
+  returned: changed
+  type: string
+  sample: critical
+pva_log_level:
+  description: Lowest level of PVA messages from the tmm daemon to log.
+  returned: changed
+  type: string
+  sample: debug
+ssl_log_level:
+  description: Lowest level of SSL messages from the tmm daemon to log.
+  returned: changed
+  type: string
+  sample: critical
+'''
+
+from ansible.module_utils.basic import AnsibleModule
+
+try:
+    from library.module_utils.network.f5.bigip import F5RestClient
+    from library.module_utils.network.f5.common import F5ModuleError
+    from library.module_utils.network.f5.common import AnsibleF5Parameters
+    from library.module_utils.network.f5.common import cleanup_tokens
+    from library.module_utils.network.f5.common import f5_argument_spec
+    from library.module_utils.network.f5.common import exit_json
+    from library.module_utils.network.f5.common import fail_json
+except ImportError:
+    from ansible.module_utils.network.f5.bigip import F5RestClient
+    from ansible.module_utils.network.f5.common import F5ModuleError
+    from ansible.module_utils.network.f5.common import AnsibleF5Parameters
+    from ansible.module_utils.network.f5.common import cleanup_tokens
+    from ansible.module_utils.network.f5.common import f5_argument_spec
+    from ansible.module_utils.network.f5.common import exit_json
+    from ansible.module_utils.network.f5.common import fail_json
+
+
+class Parameters(AnsibleF5Parameters):
+    api_map = {
+        'arpLogLevel': 'arp_log_level',
+        'httpCompressionLogLevel': 'http_compression_log_level',
+        'httpLogLevel': 'http_log_level',
+        'ipLogLevel': 'ip_log_level',
+        'iruleLogLevel': 'irule_log_level',
+        'layer4LogLevel': 'layer4_log_level',
+        'netLogLevel': 'net_log_level',
+        'osLogLevel': 'os_log_level',
+        'pvaLogLevel': 'pva_log_level',
+        'sslLogLevel': 'ssl_log_level',
+    }
+
+    api_attributes = [
+        'arpLogLevel',
+        'httpCompressionLogLevel',
+        'httpLogLevel',
+        'ipLogLevel',
+        'iruleLogLevel',
+        'layer4LogLevel',
+        'netLogLevel',
+        'osLogLevel',
+        'pvaLogLevel',
+        'sslLogLevel',
+    ]
+
+    returnables = [
+        'arp_log_level',
+        'http_compression_log_level',
+        'http_log_level',
+        'ip_log_level',
+        'irule_log_level',
+        'layer4_log_level',
+        'net_log_level',
+        'os_log_level',
+        'pva_log_level',
+        'ssl_log_level',
+    ]
+
+    updatables = [
+        'arp_log_level',
+        'http_compression_log_level',
+        'http_log_level',
+        'ip_log_level',
+        'irule_log_level',
+        'layer4_log_level',
+        'net_log_level',
+        'os_log_level',
+        'pva_log_level',
+        'ssl_log_level',
+    ]
+
+
+class ApiParameters(Parameters):
+    pass
+
+
+class ModuleParameters(Parameters):
+    pass
+
+
+class Changes(Parameters):
+    def to_return(self):
+        result = {}
+        try:
+            for returnable in self.returnables:
+                result[returnable] = getattr(self, returnable)
+            result = self._filter_params(result)
+        except Exception:
+            pass
+        return result
+
+
+class UsableChanges(Changes):
+    pass
+
+
+class ReportableChanges(Changes):
+    pass
+
+
+class Difference(object):
+    def __init__(self, want, have=None):
+        self.want = want
+        self.have = have
+
+    def compare(self, param):
+        try:
+            result = getattr(self, param)
+            return result
+        except AttributeError:
+            return self.__default(param)
+
+    def __default(self, param):
+        attr1 = getattr(self.want, param)
+        try:
+            attr2 = getattr(self.have, param)
+            if attr1 != attr2:
+                return attr1
+        except AttributeError:
+            return attr1
+
+
+class ModuleManager(object):
+    def __init__(self, *args, **kwargs):
+        self.module = kwargs.get('module', None)
+        self.client = kwargs.get('client', None)
+        self.want = ModuleParameters(params=self.module.params)
+        self.have = ApiParameters()
+        self.changes = UsableChanges()
+
+    def _update_changed_options(self):
+        diff = Difference(self.want, self.have)
+        updatables = Parameters.updatables
+        changed = dict()
+        for k in updatables:
+            change = diff.compare(k)
+            if change is None:
+                continue
+            else:
+                if isinstance(change, dict):
+                    changed.update(change)
+                else:
+                    changed[k] = change
+        if changed:
+            self.changes = UsableChanges(params=changed)
+            return True
+        return False
+
+    def exec_module(self):
+        result = dict()
+
+        changed = self.present()
+
+        reportable = ReportableChanges(params=self.changes.to_return())
+        changes = reportable.to_return()
+        result.update(**changes)
+        result.update(dict(changed=changed))
+        self._announce_deprecations(result)
+        return result
+
+    def _announce_deprecations(self, result):
+        warnings = result.pop('__warnings', [])
+        for warning in warnings:
+            self.client.module.deprecate(
+                msg=warning['msg'],
+                version=warning['version']
+            )
+
+    def present(self):
+        return self.update()
+
+    def update(self):
+        self.have = self.read_current_from_device()
+        if not self.should_update():
+            return False
+        if self.module.check_mode:
+            return True
+        self.update_on_device()
+        return True
+
+    def should_update(self):
+        result = self._update_changed_options()
+        if result:
+            return True
+        return False
+
+    def update_on_device(self):
+        params = self.changes.api_params()
+        uri = "https://{0}:{1}/mgmt/tm/sys/daemon-log-settings/tmm".format(
+            self.client.provider['server'],
+            self.client.provider['server_port'],
+        )
+        resp = self.client.api.patch(uri, json=params)
+        try:
+            response = resp.json()
+        except ValueError as ex:
+            raise F5ModuleError(str(ex))
+
+        if 'code' in response and response['code'] == 400:
+            if 'message' in response:
+                raise F5ModuleError(response['message'])
+            else:
+                raise F5ModuleError(resp.content)
+
+    def read_current_from_device(self):
+        uri = "https://{0}:{1}/mgmt/tm/sys/daemon-log-settings/tmm".format(
+            self.client.provider['server'],
+            self.client.provider['server_port'],
+        )
+        resp = self.client.api.get(uri)
+        try:
+            response = resp.json()
+        except ValueError as ex:
+            raise F5ModuleError(str(ex))
+
+        if 'code' in response and response['code'] == 400:
+            if 'message' in response:
+                raise F5ModuleError(response['message'])
+            else:
+                raise F5ModuleError(resp.content)
+        return ApiParameters(params=response)
+
+
+class ArgumentSpec(object):
+    def __init__(self):
+        self.supports_check_mode = True
+        self.choices_min = ['debug', 'informational', 'notice']
+        self.choices_common = self.choices_min + ['warning', 'error']
+        self.choices_all = self.choices_common + ['alert', 'critical', 'emergency']
+        argument_spec = dict(
+            arp_log_level=dict(
+                choices=self.choices_common
+            ),
+            http_compression_log_level=dict(
+                choices=self.choices_common
+            ),
+            http_log_level=dict(
+                choices=self.choices_common
+            ),
+            ip_log_level=dict(
+                choices=self.choices_min + ['warning']
+            ),
+            irule_log_level=dict(
+                choices=self.choices_common
+            ),
+            layer4_log_level=dict(
+                choices=self.choices_min
+            ),
+            net_log_level=dict(
+                choices=self.choices_common + ['critical']
+            ),
+            os_log_level=dict(
+                choices=self.choices_all
+            ),
+            pva_log_level=dict(
+                choices=self.choices_min
+            ),
+            ssl_log_level=dict(
+                choices=self.choices_all
+            ),
+            state=dict(default='present', choices=['present'])
+        )
+
+        self.argument_spec = {}
+        self.argument_spec.update(f5_argument_spec)
+        self.argument_spec.update(argument_spec)
+
+
+def main():
+    spec = ArgumentSpec()
+
+    module = AnsibleModule(
+        argument_spec=spec.argument_spec,
+        supports_check_mode=spec.supports_check_mode,
+    )
+
+    client = F5RestClient(**module.params)
+
+    try:
+        mm = ModuleManager(module=module, client=client)
+        results = mm.exec_module()
+        cleanup_tokens(client)
+        exit_json(module, results, client)
+    except F5ModuleError as ex:
+        cleanup_tokens(client)
+        fail_json(module, ex, client)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/test/units/modules/network/f5/fixtures/load_tmm_log.json b/test/units/modules/network/f5/fixtures/load_tmm_log.json
new file mode 100644
index 0000000000..5d634183b2
--- /dev/null
+++ b/test/units/modules/network/f5/fixtures/load_tmm_log.json
@@ -0,0 +1,14 @@
+{
+  "kind": "tm:sys:daemon-log-settings:tmm:tmmstate",
+  "selfLink": "https://localhost/mgmt/tm/sys/daemon-log-settings/tmm?ver=12.1.3.6",
+  "arpLogLevel": "warning",
+  "httpCompressionLogLevel": "error",
+  "httpLogLevel": "error",
+  "ipLogLevel": "warning",
+  "iruleLogLevel": "informational",
+  "layer4LogLevel": "notice",
+  "netLogLevel": "warning",
+  "osLogLevel": "notice",
+  "pvaLogLevel": "informational",
+  "sslLogLevel": "warning"
+}
diff --git a/test/units/modules/network/f5/test_bigip_sys_daemon_log_tmm.py b/test/units/modules/network/f5/test_bigip_sys_daemon_log_tmm.py
new file mode 100644
index 0000000000..125f2b4456
--- /dev/null
+++ b/test/units/modules/network/f5/test_bigip_sys_daemon_log_tmm.py
@@ -0,0 +1,142 @@
+# -*- coding: utf-8 -*-
+#
+# Copyright: (c) 2018, F5 Networks Inc.
+# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
+
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+import sys
+
+from nose.plugins.skip import SkipTest
+if sys.version_info < (2, 7):
+    raise SkipTest("F5 Ansible modules require Python >= 2.7")
+
+from ansible.module_utils.basic import AnsibleModule
+
+try:
+    from library.modules.bigip_sys_daemon_log_tmm import ApiParameters
+    from library.modules.bigip_sys_daemon_log_tmm import ModuleParameters
+    from library.modules.bigip_sys_daemon_log_tmm import ModuleManager
+    from library.modules.bigip_sys_daemon_log_tmm import ArgumentSpec
+
+    # In Ansible 2.8, Ansible changed import paths.
+    from test.units.compat import unittest
+    from test.units.compat.mock import Mock
+    from test.units.compat.mock import patch
+
+    from test.units.modules.utils import set_module_args
+except ImportError:
+    try:
+        from ansible.modules.network.f5.bigip_sys_daemon_log_tmm import ApiParameters
+        from ansible.modules.network.f5.bigip_sys_daemon_log_tmm import ModuleParameters
+        from ansible.modules.network.f5.bigip_sys_daemon_log_tmm import ModuleManager
+        from ansible.modules.network.f5.bigip_sys_daemon_log_tmm import ArgumentSpec
+
+        # Ansible 2.8 imports
+        from units.compat import unittest
+        from units.compat.mock import Mock
+        from units.compat.mock import patch
+
+        from units.modules.utils import set_module_args
+    except ImportError:
+        raise SkipTest("F5 Ansible modules require the f5-sdk Python library")
+
+fixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')
+fixture_data = {}
+
+
+def load_fixture(name):
+    path = os.path.join(fixture_path, name)
+
+    if path in fixture_data:
+        return fixture_data[path]
+
+    with open(path) as f:
+        data = f.read()
+
+    try:
+        data = json.loads(data)
+    except Exception:
+        pass
+
+    fixture_data[path] = data
+    return data
+
+
+class TestParameters(unittest.TestCase):
+    def test_module_parameters(self):
+        args = dict(
+            arp_log_level='warning',
+            http_compression_log_level='error',
+            http_log_level='error',
+            ip_log_level='warning',
+            irule_log_level='informational',
+            layer4_log_level='notice',
+            net_log_level='warning',
+            os_log_level='notice',
+            pva_log_level='debug',
+            ssl_log_level='warning',
+        )
+        p = ModuleParameters(params=args)
+        assert p.arp_log_level == 'warning'
+        assert p.http_compression_log_level == 'error'
+        assert p.http_log_level == 'error'
+        assert p.ip_log_level == 'warning'
+        assert p.irule_log_level == 'informational'
+        assert p.layer4_log_level == 'notice'
+        assert p.net_log_level == 'warning'
+        assert p.os_log_level == 'notice'
+        assert p.pva_log_level == 'debug'
+        assert p.ssl_log_level == 'warning'
+
+    def test_api_parameters(self):
+        args = load_fixture('load_tmm_log.json')
+        p = ApiParameters(params=args)
+        assert p.arp_log_level == 'warning'
+        assert p.http_compression_log_level == 'error'
+        assert p.http_log_level == 'error'
+        assert p.ip_log_level == 'warning'
+        assert p.irule_log_level == 'informational'
+        assert p.layer4_log_level == 'notice'
+        assert p.net_log_level == 'warning'
+        assert p.os_log_level == 'notice'
+        assert p.pva_log_level == 'informational'
+        assert p.ssl_log_level == 'warning'
+
+
+class TestManager(unittest.TestCase):
+
+    def setUp(self):
+        self.spec = ArgumentSpec()
+
+    def test_update(self, *args):
+        set_module_args(dict(
+            arp_log_level='debug',
+            layer4_log_level='debug',
+            password='admin',
+            server='localhost',
+            user='admin',
+            state='present'
+        ))
+
+        # Configure the parameters that would be returned by querying the
+        # remote device
+        current = ApiParameters(params=load_fixture('load_tmm_log.json'))
+
+        module = AnsibleModule(
+            argument_spec=self.spec.argument_spec,
+            supports_check_mode=self.spec.supports_check_mode
+        )
+        mm = ModuleManager(module=module)
+
+        # Override methods to force specific logic in the module to happen
+        mm.exists = Mock(return_value=False)
+        mm.read_current_from_device = Mock(return_value=current)
+        mm.update_on_device = Mock(return_value=True)
+
+        results = mm.exec_module()
+        assert results['changed'] is True
