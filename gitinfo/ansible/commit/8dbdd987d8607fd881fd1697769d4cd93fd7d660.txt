commit 8dbdd987d8607fd881fd1697769d4cd93fd7d660
Author: Chris Archibald <carchi@netapp.com>
Date:   Wed Mar 27 09:03:58 2019 -0700

    Fix .encode('hex') call for python3 (#53343)
    
    * Revert "changes to clusteR"
    
    This reverts commit 33ee1b71e4bc8435fb315762a871f8c4cb6c5f80.
    
    * Revert "changes to clusteR"
    
    This reverts commit 33ee1b71e4bc8435fb315762a871f8c4cb6c5f80.
    
    * Revert "Revert "changes to clusteR""
    
    This reverts commit f1104a37b42886aebb4d2b2ab27c91c96d97858a.
    
    * Revert "Revert "changes to clusteR""
    
    This reverts commit f1104a37b42886aebb4d2b2ab27c91c96d97858a.
    
    * documentation changes
    
    * Revert "documentation changes"
    
    This reverts commit 02c369d0414fdff492d90865c903bdade3174261.
    
    * fix encode calls for python3
    
    * fix small issue
    
    * switch to to_text
    
    * Fix string

diff --git a/lib/ansible/modules/storage/netapp/na_ontap_lun_map.py b/lib/ansible/modules/storage/netapp/na_ontap_lun_map.py
index b380ceee5f..320fac656e 100644
--- a/lib/ansible/modules/storage/netapp/na_ontap_lun_map.py
+++ b/lib/ansible/modules/storage/netapp/na_ontap_lun_map.py
@@ -2,7 +2,7 @@
 
 """ this is lun mapping module
 
- (c) 2018, NetApp, Inc
+ (c) 2018-2019, NetApp, Inc
  # GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
 """
 
@@ -118,6 +118,8 @@ import traceback
 from ansible.module_utils.basic import AnsibleModule
 from ansible.module_utils._text import to_native
 import ansible.module_utils.netapp as netapp_utils
+import codecs
+from ansible.module_utils._text import to_text, to_bytes
 
 HAS_NETAPP_LIB = netapp_utils.has_netapp_lib()
 
@@ -209,11 +211,13 @@ class NetAppOntapLUNMap(object):
             lun = result.get_child_by_name('attributes-list').get_child_by_name('lun-info')
 
             # extract and assign lun infomation to return value
+            hexlify = codecs.getencoder('hex')
+            naa_hex = to_text(hexlify(to_bytes(lun.get_child_content('serial-number')))[0])
             return_value = {
                 'lun_node': lun.get_child_content('node'),
                 'lun_ostype': lun.get_child_content('multiprotocol-type'),
                 'lun_serial': lun.get_child_content('serial-number'),
-                'lun_naa_id': '600a0980' + lun.get_child_content('serial-number').encode('hex'),
+                'lun_naa_id': '600a0980' + naa_hex,
                 'lun_state': lun.get_child_content('state'),
                 'lun_size': lun.get_child_content('size'),
             }
diff --git a/test/units/modules/storage/netapp/test_na_ontap_lun_map.py b/test/units/modules/storage/netapp/test_na_ontap_lun_map.py
new file mode 100644
index 0000000000..c8c5d14957
--- /dev/null
+++ b/test/units/modules/storage/netapp/test_na_ontap_lun_map.py
@@ -0,0 +1,191 @@
+''' unit tests ONTAP Ansible module: na_ontap_lun_map '''
+
+from __future__ import print_function
+import json
+import pytest
+
+from units.compat import unittest
+from units.compat.mock import patch
+from ansible.module_utils import basic
+from ansible.module_utils._text import to_bytes
+import ansible.module_utils.netapp as netapp_utils
+
+from ansible.modules.storage.netapp.na_ontap_lun_map \
+    import NetAppOntapLUNMap as my_module
+
+if not netapp_utils.has_netapp_lib():
+    pytestmark = pytest.mark.skip('skipping as missing required netapp_lib')
+
+
+def set_module_args(args):
+    """prepare arguments so that they will be picked up during module creation"""
+    args = json.dumps({'ANSIBLE_MODULE_ARGS': args})
+    basic._ANSIBLE_ARGS = to_bytes(args)  # pylint: disable=protected-access
+
+
+class AnsibleExitJson(Exception):
+    """Exception class to be raised by module.exit_json and caught by the test case"""
+    pass
+
+
+class AnsibleFailJson(Exception):
+    """Exception class to be raised by module.fail_json and caught by the test case"""
+    pass
+
+
+def exit_json(*args, **kwargs):  # pylint: disable=unused-argument
+    """function to patch over exit_json; package return data into an exception"""
+    if 'changed' not in kwargs:
+        kwargs['changed'] = False
+    raise AnsibleExitJson(kwargs)
+
+
+def fail_json(*args, **kwargs):  # pylint: disable=unused-argument
+    """function to patch over fail_json; package return data into an exception"""
+    kwargs['failed'] = True
+    raise AnsibleFailJson(kwargs)
+
+
+class MockONTAPConnection(object):
+    ''' mock server connection to ONTAP host '''
+
+    def __init__(self, kind=None):
+        ''' save arguments '''
+        self.type = kind
+        self.xml_in = None
+        self.xml_out = None
+
+    def invoke_successfully(self, xml, enable_tunneling):  # pylint: disable=unused-argument
+        ''' mock invoke_successfully returning xml data '''
+        self.xml_in = xml
+        if self.type == 'lun_map':
+            xml = self.build_lun_info()
+        elif self.type == 'lun_map_fail':
+            raise netapp_utils.zapi.NaApiError(code='TEST', message="This exception is from the unit test")
+        self.xml_out = xml
+        return xml
+
+    @staticmethod
+    def build_lun_info():
+        ''' build xml data for lun-map-entry '''
+        xml = netapp_utils.zapi.NaElement('xml')
+        data = {'initiator-groups': [{'initiator-group-info': {'initiator-group-name': 'ansible', 'lun-id': 2}}]}
+        xml.translate_struct(data)
+        return xml
+
+
+class TestMyModule(unittest.TestCase):
+    ''' a group of related Unit Tests '''
+
+    def setUp(self):
+        self.mock_module_helper = patch.multiple(basic.AnsibleModule,
+                                                 exit_json=exit_json,
+                                                 fail_json=fail_json)
+        self.mock_module_helper.start()
+        self.addCleanup(self.mock_module_helper.stop)
+        self.server = MockONTAPConnection()
+        self.onbox = False
+
+    def set_default_args(self):
+        if self.onbox:
+            hostname = '10.10.10.10'
+            username = 'admin'
+            password = 'password'
+            initiator_group_name = 'ansible'
+            vserver = 'ansible'
+            path = '/vol/ansible/test'
+            lun_id = 2
+        else:
+            hostname = 'hostname'
+            username = 'username'
+            password = 'password'
+            initiator_group_name = 'ansible'
+            vserver = 'ansible'
+            path = '/vol/ansible/test'
+            lun_id = 2
+        return dict({
+            'hostname': hostname,
+            'username': username,
+            'password': password,
+            'initiator_group_name': initiator_group_name,
+            'vserver': vserver,
+            'path': path,
+            'lun_id': lun_id
+        })
+
+    def test_module_fail_when_required_args_missing(self):
+        ''' required arguments are reported as errors '''
+        with pytest.raises(AnsibleFailJson) as exc:
+            set_module_args({})
+            my_module()
+        print('Info: %s' % exc.value.args[0]['msg'])
+
+    def test_ensure_get_called(self):
+        ''' test get_lun_map for non-existent lun'''
+        set_module_args(self.set_default_args())
+        my_obj = my_module()
+        my_obj.server = self.server
+        assert my_obj.get_lun_map is not None
+
+    def test_ensure_get_called_existing(self):
+        ''' test get_lun_map for existing lun'''
+        set_module_args(self.set_default_args())
+        my_obj = my_module()
+        my_obj.server = MockONTAPConnection(kind='lun_map')
+        assert my_obj.get_lun_map()
+
+    @patch('ansible.modules.storage.netapp.na_ontap_lun_map.NetAppOntapLUNMap.create_lun_map')
+    def test_successful_create(self, create_lun_map):
+        ''' mapping lun and testing idempotency '''
+        data = self.set_default_args()
+        set_module_args(data)
+        my_obj = my_module()
+        if not self.onbox:
+            my_obj.server = self.server
+        with pytest.raises(AnsibleExitJson) as exc:
+            my_obj.apply()
+        assert exc.value.args[0]['changed']
+        create_lun_map.assert_called_with()
+        # to reset na_helper from remembering the previous 'changed' value
+        set_module_args(self.set_default_args())
+        my_obj = my_module()
+        if not self.onbox:
+            my_obj.server = MockONTAPConnection('lun_map')
+        with pytest.raises(AnsibleExitJson) as exc:
+            my_obj.apply()
+        assert not exc.value.args[0]['changed']
+
+    @patch('ansible.modules.storage.netapp.na_ontap_lun_map.NetAppOntapLUNMap.delete_lun_map')
+    def test_successful_delete(self, delete_lun_map):
+        ''' unmapping lun and testing idempotency '''
+        data = self.set_default_args()
+        data['state'] = 'absent'
+        set_module_args(data)
+        my_obj = my_module()
+        if not self.onbox:
+            my_obj.server = MockONTAPConnection('lun_map')
+        with pytest.raises(AnsibleExitJson) as exc:
+            my_obj.apply()
+        assert exc.value.args[0]['changed']
+        delete_lun_map.assert_called_with()
+        # to reset na_helper from remembering the previous 'changed' value
+        my_obj = my_module()
+        if not self.onbox:
+            my_obj.server = self.server
+        with pytest.raises(AnsibleExitJson) as exc:
+            my_obj.apply()
+        assert not exc.value.args[0]['changed']
+
+    def test_if_all_methods_catch_exception(self):
+        module_args = {}
+        module_args.update(self.set_default_args())
+        set_module_args(module_args)
+        my_obj = my_module()
+        if not self.onbox:
+            my_obj.server = MockONTAPConnection('lun_map_fail')
+        with pytest.raises(AnsibleFailJson) as exc:
+            my_obj.create_lun_map()
+        assert 'Error mapping lun' in exc.value.args[0]['msg']
+        with pytest.raises(AnsibleFailJson) as exc:
+            my_obj.delete_lun_map()
+        assert 'Error unmapping lun' in exc.value.args[0]['msg']
