commit ea93a36b1008ae27da4f95c15b4ec0460b1c629d
Author: Bradley Young <young.bradley@gmail.com>
Date:   Thu Jul 11 23:45:03 2013 -0700

    Adding transpose lookup method. This will matrix transpose arrays that are passed in, and then work like items over the resulting list of lists. e.g.:
    
        Transpose a list of arrays:
        [1, 2, 3], [4, 5, 6] -> [1, 4], [2, 5], [3, 6]
        Replace any empty spots in 2nd array with "":
        [1, 2], [3] -> [1, 3], [2, ""]

diff --git a/lib/ansible/runner/lookup_plugins/transpose.py b/lib/ansible/runner/lookup_plugins/transpose.py
new file mode 100644
index 0000000000..c7a7eb4ffe
--- /dev/null
+++ b/lib/ansible/runner/lookup_plugins/transpose.py
@@ -0,0 +1,81 @@
+# (c) 2012, Michael DeHaan <michael.dehaan@gmail.com>
+#
+# This file is part of Ansible
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+
+import ansible.utils as utils
+from ansible.utils import safe_eval
+import ansible.errors as errors
+
+def flatten(terms):
+    ret = []
+    for term in terms:
+        if isinstance(term, list):
+            ret.extend(term)
+        elif isinstance(term, tuple):
+            ret.extend(term)
+        else:
+            ret.append(term)
+    return ret
+
+def transpose(a,b):
+    """
+    Transpose a list of arrays:
+    [1, 2, 3], [4, 5, 6] -> [1, 4], [2, 5], [3, 6]
+    Replace any empty spots in 2nd array with "":
+    [1, 2], [3] -> [1, 3], [2, ""]
+    """
+    results = []
+    for i in xrange(len(a)):
+        results.append([a[i], (b[i:i+1]+[""])[0]])
+    return results
+
+
+class LookupModule(object):
+
+    def __init__(self, basedir=None, **kwargs):
+        self.basedir = basedir
+
+    def __lookup_injects(self, terms, inject):
+        results = []
+        for x in terms:
+            if isinstance(x, basestring) and x in inject:
+                results.append(inject[x])
+            else:
+                results.append(x)
+        return results
+
+    def run(self, terms, inject=None, **kwargs):
+
+        # this code is common with 'items.py' consider moving to utils if we need it again
+
+        terms = utils.listify_lookup_plugin_terms(terms, self.basedir, inject)
+        terms = self.__lookup_injects(terms, inject)
+
+        my_list = terms[:]
+        my_list.reverse()
+        result = []
+        if len(my_list) == 0:
+            raise errors.AnsibleError("with_transpose requires at least one element in each list")
+        result = my_list.pop()
+        while len(my_list) > 0:
+            result2 = transpose(result, my_list.pop())
+            result  = result2
+        new_result = []
+        for x in result:
+            new_result.append(flatten(x))
+        return new_result
+
+
