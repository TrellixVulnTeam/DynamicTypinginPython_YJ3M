commit 11138abc519bbab32f540a88d938073efec30d9a
Author: Matt Clay <matt@mystile.com>
Date:   Fri Mar 31 14:21:54 2017 -0700

    Fix PEP 8 issues.

diff --git a/test/units/modules/cloud/amazon/placebo_fixtures.py b/test/units/modules/cloud/amazon/placebo_fixtures.py
index e6fa72e9c8..fd5cf841da 100644
--- a/test/units/modules/cloud/amazon/placebo_fixtures.py
+++ b/test/units/modules/cloud/amazon/placebo_fixtures.py
@@ -75,7 +75,7 @@ def placeboify(request, monkeypatch):
 
     def boto3_middleman_connection(module, conn_type, resource, region='us-west-2', **kwargs):
         if conn_type != 'client':
-            #TODO support resource-based connections
+            # TODO support resource-based connections
             raise ValueError('Mocker only supports client, not %s' % conn_type)
         return session.client(resource, region_name=region)
 
@@ -108,7 +108,7 @@ def basic_launch_config():
     asg = boto3.client('autoscaling')
     asg.create_launch_configuration(
         LaunchConfigurationName='pytest_basic_lc',
-        ImageId='ami-9be6f38c', # Amazon Linux 2016.09 us-east-1 AMI, can be any valid AMI
+        ImageId='ami-9be6f38c',  # Amazon Linux 2016.09 us-east-1 AMI, can be any valid AMI
         SecurityGroups=[],
         UserData='#!/bin/bash\necho hello world',
         InstanceType='t2.micro',
@@ -125,6 +125,7 @@ def basic_launch_config():
             return
         raise
 
+
 @pytest.fixture(scope='module')
 def scratch_vpc():
     if not os.getenv('PLACEBO_RECORD'):
@@ -187,6 +188,7 @@ def scratch_vpc():
             return
         raise
 
+
 @pytest.fixture(scope='module')
 def maybe_sleep():
     """If placebo is reading saved sessions, make sleep always take 0 seconds.
diff --git a/test/units/modules/cloud/amazon/test_cloudformation.py b/test/units/modules/cloud/amazon/test_cloudformation.py
index e65e1e86e3..ffb0df6911 100644
--- a/test/units/modules/cloud/amazon/test_cloudformation.py
+++ b/test/units/modules/cloud/amazon/test_cloudformation.py
@@ -44,6 +44,7 @@ bad_json_tpl = """{
   }
 }"""
 
+
 class FakeModule(object):
     def __init__(self, **kwargs):
         self.params = kwargs
