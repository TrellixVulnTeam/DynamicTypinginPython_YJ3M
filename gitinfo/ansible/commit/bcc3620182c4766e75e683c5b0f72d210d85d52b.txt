commit bcc3620182c4766e75e683c5b0f72d210d85d52b
Author: Andrey Klychkov <aaklychkov@mail.ru>
Date:   Wed Sep 11 15:19:25 2019 +0300

    Fix typos in database modules and their integration tests (#62125)

diff --git a/lib/ansible/modules/database/aerospike/aerospike_migrations.py b/lib/ansible/modules/database/aerospike/aerospike_migrations.py
index 793b36310b..fc90e14a87 100644
--- a/lib/ansible/modules/database/aerospike/aerospike_migrations.py
+++ b/lib/ansible/modules/database/aerospike/aerospike_migrations.py
@@ -266,7 +266,7 @@ class Migrations:
         return aerospike.client(config)
 
     def _info_cmd_helper(self, cmd, node=None, delimiter=';'):
-        """delimiter is for seperate stats that come back, NOT for kv
+        """delimiter is for separate stats that come back, NOT for kv
         separation which is ="""
         if node is None:  # If no node passed, use the first one (local)
             node = self._nodes[0]
@@ -316,7 +316,7 @@ class Migrations:
     def _update_cluster_namespace_list(self):
         """ make a unique list of namespaces
         TODO: does this work on a rolling namespace add/deletion?
-        thankfully if it doesnt, we dont need this on builds >=4.3"""
+        thankfully if it doesn't, we dont need this on builds >=4.3"""
         self._namespaces = set()
         for node in self._nodes:
             namespaces = self._info_cmd_helper('namespaces', node)
@@ -418,7 +418,7 @@ class Migrations:
 
     def _is_min_cluster_size(self):
         """checks that all nodes in the cluster are returning the
-        mininimum cluster size specified in their statistics output"""
+        minimum cluster size specified in their statistics output"""
         sizes = set()
         for node in self._cluster_statistics:
             sizes.add(int(self._cluster_statistics[node]['cluster_size']))
diff --git a/lib/ansible/modules/database/mongodb/mongodb_user.py b/lib/ansible/modules/database/mongodb/mongodb_user.py
index b93601c438..ce4d150cea 100644
--- a/lib/ansible/modules/database/mongodb/mongodb_user.py
+++ b/lib/ansible/modules/database/mongodb/mongodb_user.py
@@ -150,7 +150,7 @@ EXAMPLES = '''
     state: present
 
 # add a user 'oplog_reader' with read only access to the 'local' database on the replica_set 'belcher'. This is useful for oplog access (MONGO_OPLOG_URL).
-# please notice the credentials must be added to the 'admin' database because the 'local' database is not syncronized and can't receive user credentials
+# please notice the credentials must be added to the 'admin' database because the 'local' database is not synchronized and can't receive user credentials
 # To login with such user, the connection string should be MONGO_OPLOG_URL="mongodb://oplog_reader:oplog_reader_password@server1,server2/local?authSource=admin"
 # This syntax requires mongodb 2.6+ and pymongo 2.5+
 - mongodb_user:
diff --git a/lib/ansible/modules/database/proxysql/proxysql_backend_servers.py b/lib/ansible/modules/database/proxysql/proxysql_backend_servers.py
index 5ea18b14e2..4595813c7d 100644
--- a/lib/ansible/modules/database/proxysql/proxysql_backend_servers.py
+++ b/lib/ansible/modules/database/proxysql/proxysql_backend_servers.py
@@ -59,7 +59,7 @@ options:
         is 1000.
   max_replication_lag:
     description:
-      - If greater than 0, ProxySQL will reguarly monitor replication lag. If
+      - If greater than 0, ProxySQL will regularly monitor replication lag. If
         replication lag goes above I(max_replication_lag), proxysql will
         temporarily shun the server until replication catches up. If omitted
         the proxysql database default for I(max_replication_lag) is 0.
diff --git a/lib/ansible/modules/database/proxysql/proxysql_global_variables.py b/lib/ansible/modules/database/proxysql/proxysql_global_variables.py
index ab0e9a431e..92b02b62e0 100644
--- a/lib/ansible/modules/database/proxysql/proxysql_global_variables.py
+++ b/lib/ansible/modules/database/proxysql/proxysql_global_variables.py
@@ -53,7 +53,7 @@ EXAMPLES = '''
 
 RETURN = '''
 stdout:
-    description: Returns the mysql variable supplied with it's associted value.
+    description: Returns the mysql variable supplied with it's associated value.
     returned: Returns the current variable and value, or the newly set value
               for the variable supplied..
     type: dict
diff --git a/lib/ansible/modules/database/proxysql/proxysql_replication_hostgroups.py b/lib/ansible/modules/database/proxysql/proxysql_replication_hostgroups.py
index 22ef86cfaa..6cde01d929 100644
--- a/lib/ansible/modules/database/proxysql/proxysql_replication_hostgroups.py
+++ b/lib/ansible/modules/database/proxysql/proxysql_replication_hostgroups.py
@@ -30,7 +30,7 @@ options:
     required: True
   comment:
     description:
-      - Text field that can be used for any purposed defined by the user.
+      - Text field that can be used for any purposes defined by the user.
   state:
     description:
       - When C(present) - adds the replication hostgroup, when C(absent) -
diff --git a/test/integration/targets/postgresql/tasks/postgresql_ext.yml b/test/integration/targets/postgresql/tasks/postgresql_ext.yml
index c785d82cd8..5c8492e0aa 100644
--- a/test/integration/targets/postgresql/tasks/postgresql_ext.yml
+++ b/test/integration/targets/postgresql/tasks/postgresql_ext.yml
@@ -157,7 +157,7 @@
 # I couldn't check it for two or more extension in one time
 # because most of the common extensions are available in postgresql-contrib package
 # that tries to change the default python interpreter and fails during tests respectively.
-# Anyway, that's enough to be sure that the proper SQL was exequted.
+# Anyway, that's enough to be sure that the proper SQL was executed.
 #
 
 # Drop extension cascade
diff --git a/test/integration/targets/postgresql/tasks/postgresql_idx.yml b/test/integration/targets/postgresql/tasks/postgresql_idx.yml
index 2e733126ac..28eb70e546 100644
--- a/test/integration/targets/postgresql/tasks/postgresql_idx.yml
+++ b/test/integration/targets/postgresql/tasks/postgresql_idx.yml
@@ -253,7 +253,7 @@
     - result.schema == 'public'
     - result.query == 'CREATE INDEX CONCURRENTLY test1_idx ON public.test_table USING BTREE (id) WHERE id > 1 AND id != 10'
 
-# Drop index from spacific schema with cascade in check_mode
+# Drop index from specific schema with cascade in check_mode
 - name: postgresql_idx - drop index from specific schema cascade in check_mode
   become_user: "{{ pg_user }}"
   become: yes
@@ -295,7 +295,7 @@
     - result.rowcount == 1
   when: tablespace.rc == 0
 
-# Drop index from spacific schema with cascade
+# Drop index from specific schema with cascade
 - name: postgresql_idx - drop index from specific schema cascade
   become_user: "{{ pg_user }}"
   become: yes
diff --git a/test/integration/targets/postgresql/tasks/postgresql_membership.yml b/test/integration/targets/postgresql/tasks/postgresql_membership.yml
index 2a70431086..4a19aec597 100644
--- a/test/integration/targets/postgresql/tasks/postgresql_membership.yml
+++ b/test/integration/targets/postgresql/tasks/postgresql_membership.yml
@@ -93,7 +93,7 @@
     - result.state == "present"
     - result.target_roles == ["user1"]
 
-# Grant group1 to user1 againt to check that nothing changes:
+# Grant group1 to user1 again to check that nothing changes:
 - name: postgresql_membership - grant group1 to user1 again
   become_user: "{{ pg_user }}"
   become: yes
diff --git a/test/integration/targets/postgresql/tasks/postgresql_owner.yml b/test/integration/targets/postgresql/tasks/postgresql_owner.yml
index f425b00387..b8d749835a 100644
--- a/test/integration/targets/postgresql/tasks/postgresql_owner.yml
+++ b/test/integration/targets/postgresql/tasks/postgresql_owner.yml
@@ -776,7 +776,7 @@
     - result.rowcount == 1
 
 # true mode obj_type: view again
-- name: postgresql_owner - set vatview owner again
+- name: postgresql_owner - set view owner again
   become_user: "{{ pg_user }}"
   become: yes
   postgresql_owner:
diff --git a/test/integration/targets/postgresql/tasks/postgresql_privs.yml b/test/integration/targets/postgresql/tasks/postgresql_privs.yml
index d28d13402f..663ea9aaa4 100644
--- a/test/integration/targets/postgresql/tasks/postgresql_privs.yml
+++ b/test/integration/targets/postgresql/tasks/postgresql_privs.yml
@@ -499,7 +499,7 @@
 # Test ALL_IN_SCHEMA for 'partioned tables type #
 #################################################
 
-# Partioning tables is a feature introduced in Postgresql 10.
+# Partitioning tables is a feature introduced in Postgresql 10.
 # (see https://www.postgresql.org/docs/10/ddl-partitioning.html )
 # The test below check for this version
 
diff --git a/test/integration/targets/postgresql/tasks/postgresql_sequence.yml b/test/integration/targets/postgresql/tasks/postgresql_sequence.yml
index 45f68b157d..4d8d8a4e06 100644
--- a/test/integration/targets/postgresql/tasks/postgresql_sequence.yml
+++ b/test/integration/targets/postgresql/tasks/postgresql_sequence.yml
@@ -45,7 +45,7 @@
 
 ####################
 # Test: create sequence in checkmode
-- name: postgresql_sequence - create a new seqeunce with name "foobar" in check_mode
+- name: postgresql_sequence - create a new sequence with name "foobar" in check_mode
   become_user: "{{ pg_user }}"
   become: yes
   check_mode: yes
@@ -64,7 +64,7 @@
       - result.queries == ["CREATE SEQUENCE \"public\".\"foobar\""]
 
 # Real SQL check
-- name: postgresql_sequence - check that the new seqeunce "foobar" not exists
+- name: postgresql_sequence - check that the new sequence "foobar" not exists
   become: yes
   become_user: "{{ pg_user }}"
   postgresql_query:
@@ -81,7 +81,7 @@
 
 ####################
 # Test: create sequence
-- name: postgresql_sequence - create a new seqeunce with name "foobar"
+- name: postgresql_sequence - create a new sequence with name "foobar"
   become_user: "{{ pg_user }}"
   become: yes
   postgresql_sequence:
@@ -99,7 +99,7 @@
       - result.queries == ["CREATE SEQUENCE \"public\".\"foobar\""]
 
 # Real SQL check
-- name: postgresql_sequence - check that the new seqeunce "foobar" exists
+- name: postgresql_sequence - check that the new sequence "foobar" exists
   become_user: "{{ pg_user }}"
   become: yes
   postgresql_query:
@@ -135,7 +135,7 @@
       - result.queries == ["DROP SEQUENCE \"public\".\"foobar\""]
 
 # Real SQL check
-- name: postgresql_sequence - check that the seqeunce "foobar" still exists
+- name: postgresql_sequence - check that the sequence "foobar" still exists
   become_user: "{{ pg_user }}"
   become: yes
   postgresql_query:
@@ -170,7 +170,7 @@
       - result.queries == ["DROP SEQUENCE \"public\".\"foobar\""]
 
 # Real SQL check
-- name: postgresql_sequence - check that the seqeunce "foobar" not exists
+- name: postgresql_sequence - check that the sequence "foobar" not exists
   become_user: "{{ pg_user }}"
   become: yes
   postgresql_query:
@@ -205,7 +205,7 @@
       - result.queries == []
 
 # Real SQL check
-- name: postgresql_sequence - check that the seqeunce "foobar" not exists
+- name: postgresql_sequence - check that the sequence "foobar" not exists
   become_user: "{{ pg_user }}"
   become: yes
   postgresql_query:
@@ -248,7 +248,7 @@
       - result.queries == ["CREATE SEQUENCE \"public\".\"foobar_desc\" INCREMENT BY -1 MINVALUE 1 MAXVALUE 1000 START WITH 101 CYCLE"]
 
 # Real SQL check
-- name: postgresql_sequence - check that the new seqeunce "foobar_desc" exists
+- name: postgresql_sequence - check that the new sequence "foobar_desc" exists
   postgresql_query:
     db: "{{ db_name }}"
     login_user: "{{ pg_user }}"
@@ -283,7 +283,7 @@
       - result.queries == ["ALTER SEQUENCE \"public\".\"foobar_desc\" RENAME TO \"foobar_with_options\""]
 
 # Real SQL check
-- name: postgresql_sequence - check that the seqeunce "foobar_desc" still exists and is not renamed
+- name: postgresql_sequence - check that the sequence "foobar_desc" still exists and is not renamed
   become_user: "{{ pg_user }}"
   become: yes
   postgresql_query:
@@ -319,7 +319,7 @@
       - result.queries == ["ALTER SEQUENCE \"public\".\"foobar_desc\" RENAME TO \"foobar_with_options\""]
 
 # Real SQL check
-- name: postgresql_sequence - check that the renamed seqeunce "foobar_with_options" exists
+- name: postgresql_sequence - check that the renamed sequence "foobar_with_options" exists
   become_user: "{{ pg_user }}"
   become: yes
   postgresql_query:
@@ -357,7 +357,7 @@
       - result.queries == ["ALTER SEQUENCE \"public\".\"foobar_with_options\" SET SCHEMA \"foobar_schema\""]
 
 # Real SQL check
-- name: postgresql_sequence - check that the seqeunce "foobar_with_options" still exists in the old schema
+- name: postgresql_sequence - check that the sequence "foobar_with_options" still exists in the old schema
   become_user: "{{ pg_user }}"
   become: yes
   postgresql_query:
@@ -394,7 +394,7 @@
       - result.queries == ["ALTER SEQUENCE \"public\".\"foobar_with_options\" SET SCHEMA \"foobar_schema\""]
 
 # Real SQL check
-- name: postgresql_sequence - check that the seqeunce "foobar_with_options" exists in new schema
+- name: postgresql_sequence - check that the sequence "foobar_with_options" exists in new schema
   become_user: "{{ pg_user }}"
   become: yes
   postgresql_query:
@@ -432,7 +432,7 @@
       - result.queries == ["ALTER SEQUENCE \"foobar_schema\".\"foobar_with_options\" OWNER TO \"{{ db_user1 }}\""]
 
 # Real SQL check
-- name: postgresql_sequence - check that the seqeunce "foobar_with_options" has still the old owner
+- name: postgresql_sequence - check that the sequence "foobar_with_options" has still the old owner
   become_user: "{{ pg_user }}"
   become: yes
   postgresql_query:
@@ -476,7 +476,7 @@
       - result.queries == ["ALTER SEQUENCE \"foobar_schema\".\"foobar_with_options\" OWNER TO \"{{ db_user1 }}\""]
 
 # Real SQL check
-- name: postgresql_sequence - check that the seqeunce "foobar_with_options" has a new owner
+- name: postgresql_sequence - check that the sequence "foobar_with_options" has a new owner
   become_user: "{{ pg_user }}"
   become: yes
   postgresql_query:
@@ -498,7 +498,7 @@
       - result.rowcount == 1
 
 ####################
-# Test: drop seqeunce with cascade
+# Test: drop sequence with cascade
 
 # CREATE SEQUENCE seq1;
 # CREATE TABLE t1 (f1 INT NOT NULL DEFAULT nextval('seq1'));
@@ -511,7 +511,7 @@
     login_user: "{{ pg_user }}"
     name: seq1
 
-- name: postgresql_sequence - create table which use seqeunce for drop cascade test
+- name: postgresql_sequence - create table which use sequence for drop cascade test
   become_user: "{{ pg_user }}"
   become: yes
   postgresql_table:
@@ -522,7 +522,7 @@
     - f1 INT NOT NULL DEFAULT nextval('seq1')
 
 ####################
-# Test: drop seqeunce with cascade in checkmode
+# Test: drop sequence with cascade in checkmode
 - name: postgresql_sequence - drop with cascade a sequence called seq1
   become_user: "{{ pg_user }}"
   become: yes
@@ -544,7 +544,7 @@
       - result.queries == ["DROP SEQUENCE \"public\".\"seq1\" CASCADE"]
 
 # Real SQL check
-- name: postgresql_sequence - check that the seqeunce "seq1" still exists
+- name: postgresql_sequence - check that the sequence "seq1" still exists
   become_user: "{{ pg_user }}"
   become: yes
   postgresql_query:
@@ -559,7 +559,7 @@
       - result.rowcount == 1
 
 ####################
-# Test: drop seqeunce with cascade
+# Test: drop sequence with cascade
 - name: postgresql_sequence - drop with cascade a sequence called seq1
   become_user: "{{ pg_user }}"
   become: yes
@@ -580,7 +580,7 @@
       - result.queries == ["DROP SEQUENCE \"public\".\"seq1\" CASCADE"]
 
 # Real SQL check
-- name: postgresql_sequence - check that the seqeunce "seq1" not exists
+- name: postgresql_sequence - check that the sequence "seq1" not exists
   become_user: "{{ pg_user }}"
   become: yes
   postgresql_query:
@@ -596,7 +596,7 @@
 
 ####################
 # Test: create sequence with owner in checkmode
-- name: postgresql_sequence - create a new seqeunce with name "foobar2" with owner "{{ db_user2 }}"
+- name: postgresql_sequence - create a new sequence with name "foobar2" with owner "{{ db_user2 }}"
   become_user: "{{ pg_user }}"
   become: yes
   check_mode: yes
@@ -616,7 +616,7 @@
       - result.queries == ["CREATE SEQUENCE \"public\".\"foobar2\"", "ALTER SEQUENCE \"public\".\"foobar2\" OWNER TO \"ansible_db_user2\""]
 
 # Real SQL check
-- name: postgresql_sequence - check that the new seqeunce "foobar2" does not exists
+- name: postgresql_sequence - check that the new sequence "foobar2" does not exists
   become_user: "{{ pg_user }}"
   become: yes
   postgresql_query:
@@ -632,7 +632,7 @@
 
 ####################
 # Test: create sequence with owner
-- name: postgresql_sequence - create a new seqeunce with name "foobar2" with owner "{{ db_user2 }}"
+- name: postgresql_sequence - create a new sequence with name "foobar2" with owner "{{ db_user2 }}"
   become_user: "{{ pg_user }}"
   become: yes
   postgresql_sequence:
@@ -651,7 +651,7 @@
       - result.queries == ["CREATE SEQUENCE \"public\".\"foobar2\"", "ALTER SEQUENCE \"public\".\"foobar2\" OWNER TO \"ansible_db_user2\""]
 
 # Real SQL check
-- name: postgresql_sequence - check that the new seqeunce "foobar2" exists
+- name: postgresql_sequence - check that the new sequence "foobar2" exists
   become_user: "{{ pg_user }}"
   become: yes
   postgresql_query:
@@ -665,7 +665,7 @@
     that:
       - result.rowcount == 1
 
-- name: postgresql_sequence - check that the seqeunce "foobar2" has owner "{{ db_user2 }}"
+- name: postgresql_sequence - check that the sequence "foobar2" has owner "{{ db_user2 }}"
   become_user: "{{ pg_user }}"
   become: yes
   postgresql_query:
diff --git a/test/integration/targets/postgresql/tasks/unsorted.yml b/test/integration/targets/postgresql/tasks/unsorted.yml
index f08d7a2074..963b9db90b 100644
--- a/test/integration/targets/postgresql/tasks/unsorted.yml
+++ b/test/integration/targets/postgresql/tasks/unsorted.yml
@@ -73,7 +73,7 @@
     login_user: "{{ pg_user }}"
   register: result
 
-- name: assert that removing an alreaady removed db makes no change
+- name: assert that removing an already removed db makes no change
   assert:
     that:
        - result is not changed
@@ -132,7 +132,7 @@
       - "'en_US' not in result.stdout_lines[-2]"
       - "'100' in result.stdout_lines[-2]"
 
-- name: Check that running db cration with options a second time does nothing
+- name: Check that running db creation with options a second time does nothing
   become_user: "{{ pg_user }}"
   become: yes
   postgresql_db:
@@ -237,7 +237,7 @@
     loop_var: loop_item
 
 # BYPASSRLS role attribute was introduced in PostgreSQL 9.5, so
-# we want to test atrribute management differently depending
+# we want to test attribute management differently depending
 # on the version.
 - set_fact:
     bypassrls_supported: "{{ postgres_version_resp.stdout is version('9.5.0', '>=') }}"
