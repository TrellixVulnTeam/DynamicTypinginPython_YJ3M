commit c38bccb3c416b590c517c5620014c3549968bdf7
Author: Trishna Guha <trishnaguha17@gmail.com>
Date:   Mon Jul 17 12:45:53 2017 +0530

    Add ios_logging implementation module (#26785)
    
    * Add ios_logging implementation module
    
    Signed-off-by: Trishna Guha <trishnaguha17@gmail.com>
    
    * fix doc
    
    Signed-off-by: Trishna Guha <trishnaguha17@gmail.com>
    
    * integration test net_logging and ios_logging
    
    Signed-off-by: Trishna Guha <trishnaguha17@gmail.com>
    
    * modify the module code
    
    Signed-off-by: Trishna Guha <trishnaguha17@gmail.com>
    
    * modify the module code
    
    Signed-off-by: Trishna Guha <trishnaguha17@gmail.com>
    
    * change collection to aggregate
    
    * fix buffer size logic
    
    * fix pep8 issues

diff --git a/lib/ansible/modules/network/ios/ios_logging.py b/lib/ansible/modules/network/ios/ios_logging.py
new file mode 100644
index 0000000000..2c2f5dadfd
--- /dev/null
+++ b/lib/ansible/modules/network/ios/ios_logging.py
@@ -0,0 +1,355 @@
+#!/usr/bin/python
+# -*- coding: utf-8 -*-
+
+# (c) 2017, Ansible by Red Hat, inc
+#
+# This file is part of Ansible by Red Hat
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+#
+
+ANSIBLE_METADATA = {'metadata_version': '1.0',
+                    'status': ['preview'],
+                    'supported_by': 'core'}
+
+DOCUMENTATION = """
+---
+module: ios_logging
+version_added: "2.4"
+author: "Trishna Guha (@trishnag)"
+short_description: Manage logging on network devices
+description:
+  - This module provides declarative management of logging
+    on Cisco Ios devices.
+options:
+  dest:
+    description:
+      - Destination of the logs.
+    choices: ['on', 'host', console', 'monitor', 'buffered']
+  name:
+    description:
+      - If value of C(dest) is I(file) it indicates file-name,
+        for I(user) it indicates username and for I(host) indicates
+        the host name to be notified.
+  size:
+    description:
+      - Size of buffer. The acceptable value is in range from 4096 to
+        4294967295 bytes.
+  facility:
+    description:
+      - Set logging facility.
+  level:
+    description:
+      - Set logging severity levels.
+  collection:
+    description: List of logging definitions.
+  purge:
+    description:
+      - Purge logging not defined in the collections parameter.
+    default: no
+  state:
+    description:
+      - State of the logging configuration.
+    default: present
+    choices: ['present', 'absent']
+"""
+
+EXAMPLES = """
+- name: configure host logging
+  ios_logging:
+    dest: host
+    name: 172.16.0.1
+    state: present
+- name: remove host logging configuration
+  ios_logging:
+    dest: host
+    name: 172.16.0.1
+    state: absent
+- name: configure console logging level and facility
+  ios_logging:
+    dest: console
+    facility: local7
+    level: debugging
+    state: present
+- name: enable logging to all
+  ios_logging:
+    dest : on
+- name: configure buffer size
+  ios_logging:
+    dest: buffered
+    size: 5000
+"""
+
+RETURN = """
+commands:
+  description: The list of configuration mode commands to send to the device
+  returned: always
+  type: list
+  sample:
+    - logging facility local7
+    - logging host 172.16.0.1
+"""
+
+import re
+
+from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.ios import get_config, load_config
+from ansible.module_utils.ios import ios_argument_spec, check_args
+
+
+def validate_size(value, module):
+    if value:
+        if not int(4096) <= value <= int(4294967295):
+            module.fail_json(msg='size must be between 4096 and 4294967295')
+        else:
+            return value
+
+
+def map_obj_to_commands(updates, module):
+    commands = list()
+    want, have = updates
+
+    for w in want:
+        dest = w['dest']
+        name = w['name']
+        size = w['size']
+        facility = w['facility']
+        level = w['level']
+        state = w['state']
+        del w['state']
+
+        if state == 'absent' and w in have:
+            if dest == 'host':
+                commands.append('no logging host {}'.format(name))
+            elif dest:
+                commands.append('no logging {}'.format(dest))
+            else:
+                module.fail_json(msg='dest must be among console, monitor, buffered, host, on')
+
+            if facility:
+                commands.append('no logging facility {}'.format(facility))
+
+        if state == 'present' and w not in have:
+            if facility:
+                commands.append('logging facility {}'.format(facility))
+
+            if dest == 'host':
+                commands.append('logging host {}'.format(name))
+
+            elif dest == 'on':
+                commands.append('logging on')
+
+            elif dest == 'buffered' and size:
+                commands.append('logging buffered {}'.format(size))
+
+            else:
+                dest_cmd = 'logging {}'.format(dest)
+                if level:
+                    dest_cmd += ' {}'.format(level)
+
+                commands.append(dest_cmd)
+
+    return commands
+
+
+def parse_facility(line):
+    match = re.search(r'logging facility (\S+)', line, re.M)
+    if match:
+        facility = match.group(1)
+    else:
+        facility = 'local7'
+
+    return facility
+
+
+def parse_size(line, dest):
+    size = None
+
+    if dest == 'buffered':
+        match = re.search(r'logging buffered (\S+)', line, re.M)
+        if match:
+            try:
+                int_size = int(match.group(1))
+            except ValueError:
+                int_size = None
+
+            if int_size:
+                if isinstance(int_size, int):
+                    size = str(match.group(1))
+                else:
+                    size = str(4096)
+
+    return size
+
+
+def parse_name(line, dest):
+    if dest == 'host':
+        match = re.search(r'logging host (\S+)', line, re.M)
+        if match:
+            name = match.group(1)
+    else:
+        name = None
+
+    return name
+
+
+def parse_level(line, dest):
+    level_group = ('emergencies', 'alerts', 'critical', 'errors', 'warnings',
+                   'notifications', 'informational', 'debugging')
+
+    if dest == 'host':
+        level = 'debugging'
+
+    else:
+        match = re.search(r'logging {} (\S+)'.format(dest), line, re.M)
+        if match:
+            if match.group(1) in level_group:
+                level = match.group(1)
+            else:
+                level = 'debugging'
+        else:
+            level = 'debugging'
+
+    return level
+
+
+def map_config_to_obj(module):
+    obj = []
+    dest_group = ('console', 'host', 'monitor', 'buffered', 'on')
+
+    data = get_config(module, flags=['| section logging'])
+
+    for line in data.split('\n'):
+        match = re.search(r'logging (\S+)', line, re.M)
+
+        if match.group(1) in dest_group:
+            dest = match.group(1)
+        else:
+            pass
+
+        obj.append({'dest': dest,
+                    'name': parse_name(line, dest),
+                    'size': parse_size(line, dest),
+                    'facility': parse_facility(line),
+                    'level': parse_level(line, dest)})
+
+    return obj
+
+
+def map_params_to_obj(module):
+    obj = []
+
+    if 'aggregate' in module.params and module.params['aggregate']:
+        for c in module.params['aggregate']:
+            d = c.copy()
+            if d['dest'] != 'host':
+                d['name'] = None
+
+            if 'state' not in d:
+                d['state'] = module.params['state']
+            if 'facility' not in d:
+                d['facility'] = module.params['facility']
+            if 'level' not in d:
+                d['level'] = module.params['level']
+
+            if d['dest'] == 'buffered':
+                if 'size' in d:
+                    d['size'] = str(validate_size(d['size'], module))
+                elif 'size' not in d:
+                    d['size'] = str(4096)
+                else:
+                    pass
+
+            if d['dest'] != 'buffered':
+                d['size'] = None
+
+            obj.append(d)
+
+    else:
+        if module.params['dest'] != 'host':
+            module.params['name'] = None
+
+        if module.params['dest'] == 'buffered':
+            if not module.params['size']:
+                module.params['size'] = str(4096)
+        else:
+            module.params['size'] = None
+
+        if module.params['size'] is None:
+            obj.append({
+                'dest': module.params['dest'],
+                'name': module.params['name'],
+                'size': module.params['size'],
+                'facility': module.params['facility'],
+                'level': module.params['level'],
+                'state': module.params['state']
+            })
+
+        else:
+            obj.append({
+                'dest': module.params['dest'],
+                'name': module.params['name'],
+                'size': str(validate_size(module.params['size'], module)),
+                'facility': module.params['facility'],
+                'level': module.params['level'],
+                'state': module.params['state']
+            })
+
+    return obj
+
+
+def main():
+    """ main entry point for module execution
+    """
+    argument_spec = dict(
+        dest=dict(type='str', choices=['on', 'host', 'console', 'monitor', 'buffered']),
+        name=dict(type='str'),
+        size=dict(type='int'),
+        facility=dict(type='str', default='local7'),
+        level=dict(type='str', default='debugging'),
+        state=dict(default='present', choices=['present', 'absent']),
+        aggregate=dict(type='list'),
+        purge=dict(default=False, type='bool')
+    )
+
+    argument_spec.update(ios_argument_spec)
+
+    required_if = [('dest', 'host', ['name'])]
+
+    module = AnsibleModule(argument_spec=argument_spec,
+                           required_if=required_if,
+                           supports_check_mode=True)
+
+    warnings = list()
+    check_args(module, warnings)
+
+    result = {'changed': False}
+    if warnings:
+        result['warnings'] = warnings
+
+    want = map_params_to_obj(module)
+    have = map_config_to_obj(module)
+
+    commands = map_obj_to_commands((want, have), module)
+    result['commands'] = commands
+
+    if commands:
+        if not module.check_mode:
+            load_config(module, commands)
+        result['changed'] = True
+
+    module.exit_json(**result)
+
+if __name__ == '__main__':
+    main()
diff --git a/test/integration/ios.yaml b/test/integration/ios.yaml
index a47b56f82e..1f285afc44 100644
--- a/test/integration/ios.yaml
+++ b/test/integration/ios.yaml
@@ -69,9 +69,16 @@
       rescue:
         - set_fact: test_failed=true
 
+    - block:
+      - include_role:
+          name: ios_logging
+        when: "limit_to in ['*', 'ios_logging']"
+      rescue:
+        - set_fact: test_failed=true
+
 
 ###########
     - name: Has any previous test failed?
       fail:
         msg: "One or more tests failed, check log for details"
-      when: test_failed
\ No newline at end of file
+      when: test_failed
diff --git a/test/integration/targets/ios_logging/defaults/main.yaml b/test/integration/targets/ios_logging/defaults/main.yaml
new file mode 100644
index 0000000000..5f709c5aac
--- /dev/null
+++ b/test/integration/targets/ios_logging/defaults/main.yaml
@@ -0,0 +1,2 @@
+---
+testcase: "*"
diff --git a/test/integration/targets/ios_logging/meta/main.yaml b/test/integration/targets/ios_logging/meta/main.yaml
new file mode 100644
index 0000000000..159cea8d38
--- /dev/null
+++ b/test/integration/targets/ios_logging/meta/main.yaml
@@ -0,0 +1,2 @@
+dependencies:
+  - prepare_ios_tests
diff --git a/test/integration/targets/ios_logging/tasks/cli.yaml b/test/integration/targets/ios_logging/tasks/cli.yaml
new file mode 100644
index 0000000000..d675462dd0
--- /dev/null
+++ b/test/integration/targets/ios_logging/tasks/cli.yaml
@@ -0,0 +1,15 @@
+---
+- name: collect all cli test cases
+  find:
+    paths: "{{ role_path }}/tests/cli"
+    patterns: "{{ testcase }}.yaml"
+  register: test_cases
+
+- name: set test_items
+  set_fact: test_items="{{ test_cases.files | map(attribute='path') | list }}"
+
+- name: run test case
+  include: "{{ test_case_to_run }}"
+  with_items: "{{ test_items }}"
+  loop_control:
+    loop_var: test_case_to_run
diff --git a/test/integration/targets/ios_logging/tasks/main.yaml b/test/integration/targets/ios_logging/tasks/main.yaml
new file mode 100644
index 0000000000..415c99d8b1
--- /dev/null
+++ b/test/integration/targets/ios_logging/tasks/main.yaml
@@ -0,0 +1,2 @@
+---
+- { include: cli.yaml, tags: ['cli'] }
diff --git a/test/integration/targets/ios_logging/tests/cli/basic.yaml b/test/integration/targets/ios_logging/tests/cli/basic.yaml
new file mode 100644
index 0000000000..23d10e3399
--- /dev/null
+++ b/test/integration/targets/ios_logging/tests/cli/basic.yaml
@@ -0,0 +1,97 @@
+---
+- name: Set up host logging
+  ios_logging:
+    dest: host
+    name: 172.16.0.1
+    state: present
+    authorize: yes
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.chaned == true'
+      - '"logging host 172.16.0.1" in result.commands'
+      - '"logging facility local7" in result.commands'
+
+- name: Set up host logging again (idempotent)
+  ios_logging:
+    dest: host
+    name: 172.16.0.1
+    state: present
+    authorize: yes
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == false'
+
+- name: Delete/disable host logging
+  ios_logging:
+    dest: host
+    name: 172.16.0.1
+    state: absent
+    authorize: yes
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      - '"no logging host 172.16.0.1" in result.commands'
+
+- name: Delete/disable host logging (idempotent)
+  ios_logging:
+    dest: host
+    name: 172.16.0.1
+    state: absent
+    authorize: yes
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == false'
+
+- name: Console logging with level warnings
+  ios_logging:
+    dest: console
+    level: warnings
+    state: present
+    authorize: yes
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      - '"logging console warnings" in result.commands'
+
+- name: Configure Buffer size
+  ios_logging:
+    dest: buffered
+    size: 8000
+    authorize: yes
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      - '"logging buffered 8000" in result.commands'
+
+- name: remove logging as collection tearDown
+  ios_logging:
+    aggregate:
+      - { dest: console, level: warnings, state: absent }
+      - { dest: buffered, size: 8000, state: absent }
+    authorize: yes
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      - '"no logging console" in result.commands'
+      - '"no logging buffered" in result.commands'
diff --git a/test/integration/targets/net_logging/tests/cli/basic.yaml b/test/integration/targets/net_logging/tests/cli/basic.yaml
index 86545995af..54b7da7974 100644
--- a/test/integration/targets/net_logging/tests/cli/basic.yaml
+++ b/test/integration/targets/net_logging/tests/cli/basic.yaml
@@ -5,3 +5,6 @@
 
 - include: "{{ role_path }}/tests/vyos/basic.yaml"
   when: hostvars[inventory_hostname]['ansible_network_os'] == 'vyos'
+
+- include: "{{ role_path }}/tests/ios/basic.yaml"
+  when: hostvars[inventory_hostname]['ansible_network_os'] == 'ios'
diff --git a/test/integration/targets/net_logging/tests/ios/basic.yaml b/test/integration/targets/net_logging/tests/ios/basic.yaml
new file mode 100644
index 0000000000..8feabe9427
--- /dev/null
+++ b/test/integration/targets/net_logging/tests/ios/basic.yaml
@@ -0,0 +1,97 @@
+---
+- name: Set up host logging
+  net_logging:
+    dest: host
+    name: 172.16.0.1
+    state: present
+    authorize: yes
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.chaned == true'
+      - '"logging host 172.16.0.1" in result.commands'
+      - '"logging facility local7" in result.commands'
+
+- name: Set up host logging again (idempotent)
+  net_logging:
+    dest: host
+    name: 172.16.0.1
+    state: present
+    authorize: yes
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == false'
+
+- name: Delete/disable host logging
+  net_logging:
+    dest: host
+    name: 172.16.0.1
+    state: absent
+    authorize: yes
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      - '"no logging host 172.16.0.1" in result.commands'
+
+- name: Delete/disable host logging (idempotent)
+  net_logging:
+    dest: host
+    name: 172.16.0.1
+    state: absent
+    authorize: yes
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == false'
+
+- name: Console logging with level warnings
+  net_logging:
+    dest: console
+    level: warnings
+    state: present
+    authorize: yes
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      - '"logging console warnings" in result.commands'
+
+- name: Configure monitor logging
+  net_logging:
+    dest: monitor
+    level: debugging
+    authorize: yes
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      - '"logging monitor debugging" in result.commands'
+
+- name: remove logging as collection tearDown
+  net_logging:
+    aggregate:
+      - { dest: console, level: warnings, state: absent }
+      - { dest: monitor, level: debuggning, state: absent }
+    authorize: yes
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      - '"no logging console" in result.commands'
+      - '"no logging monitor" in result.commands'
