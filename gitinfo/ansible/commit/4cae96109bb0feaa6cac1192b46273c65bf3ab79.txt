commit 4cae96109bb0feaa6cac1192b46273c65bf3ab79
Author: Miguel Angel Muñoz González <magonzalez@fortinet.com>
Date:   Wed Aug 14 16:14:51 2019 +0200

    FortiOS modules for 2.9 - 1 (#60469)
    
    * FortiOS modules for 2.9 - 1
    
    * Fix empty choices and avoid E337,E338 warnings
    
    * Ansible comments on version_added and ignore.txt only on this PR files
    
    * Add version_added also for state attribute
    
    * Avoid null choices on dlp_sensor
    
    * Change required flag according to argspec

diff --git a/lib/ansible/modules/network/fortios/fortios_antivirus_heuristic.py b/lib/ansible/modules/network/fortios/fortios_antivirus_heuristic.py
index 0371d4e253..fd2c6e4218 100644
--- a/lib/ansible/modules/network/fortios/fortios_antivirus_heuristic.py
+++ b/lib/ansible/modules/network/fortios/fortios_antivirus_heuristic.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 from __future__ import (absolute_import, division, print_function)
-# Copyright 2018 Fortinet, Inc.
+# Copyright 2019 Fortinet, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_antivirus_heuristic
 short_description: Configure global heuristic options in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure antivirus feature and heuristic category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify antivirus feature and heuristic category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,37 +41,48 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
+        type: bool
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
         type: bool
-        default: false
+        default: true
+        version_added: 2.9
     antivirus_heuristic:
         description:
             - Configure global heuristic options.
         default: null
+        type: dict
         suboptions:
             mode:
                 description:
                     - Enable/disable heuristics and determine how the system behaves if heuristics detects a problem.
+                type: str
                 choices:
                     - pass
                     - block
@@ -88,6 +96,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure global heuristic options.
     fortios_antivirus_heuristic:
@@ -95,6 +104,7 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
       antivirus_heuristic:
         mode: "pass"
 '''
@@ -159,14 +169,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -174,7 +186,7 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_antivirus_heuristic_data(json):
@@ -188,38 +200,55 @@ def filter_antivirus_heuristic_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def antivirus_heuristic(data, fos):
     vdom = data['vdom']
     antivirus_heuristic_data = data['antivirus_heuristic']
-    filtered_data = filter_antivirus_heuristic_data(antivirus_heuristic_data)
+    filtered_data = underscore_to_hyphen(filter_antivirus_heuristic_data(antivirus_heuristic_data))
+
     return fos.set('antivirus',
                    'heuristic',
                    data=filtered_data,
                    vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_antivirus(data, fos):
-    login(data)
 
-    methodlist = ['antivirus_heuristic']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['antivirus_heuristic']:
+        resp = antivirus_heuristic(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
         "antivirus_heuristic": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
                 "mode": {"required": False, "type": "str",
                          "choices": ["pass", "block", "disable"]}
@@ -230,15 +259,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_antivirus(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_antivirus(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_antivirus(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_antivirus_profile.py b/lib/ansible/modules/network/fortios/fortios_antivirus_profile.py
index 10107c5602..cc118b1825 100644
--- a/lib/ansible/modules/network/fortios/fortios_antivirus_profile.py
+++ b/lib/ansible/modules/network/fortios/fortios_antivirus_profile.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 from __future__ import (absolute_import, division, print_function)
-# Copyright 2018 Fortinet, Inc.
+# Copyright 2019 Fortinet, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_antivirus_profile
 short_description: Configure AntiVirus profiles in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure antivirus feature and profile category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify antivirus feature and profile category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,180 +41,218 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     antivirus_profile:
         description:
             - Configure AntiVirus profiles.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
-            analytics-bl-filetype:
+            analytics_bl_filetype:
                 description:
                     - Only submit files matching this DLP file-pattern to FortiSandbox. Source dlp.filepattern.id.
-            analytics-db:
+                type: int
+            analytics_db:
                 description:
                     - Enable/disable using the FortiSandbox signature database to supplement the AV signature databases.
+                type: str
                 choices:
                     - disable
                     - enable
-            analytics-max-upload:
+            analytics_max_upload:
                 description:
                     - Maximum size of files that can be uploaded to FortiSandbox (1 - 395 MBytes, default = 10).
-            analytics-wl-filetype:
+                type: int
+            analytics_wl_filetype:
                 description:
                     - Do not submit files matching this DLP file-pattern to FortiSandbox. Source dlp.filepattern.id.
-            av-block-log:
+                type: int
+            av_block_log:
                 description:
                     - Enable/disable logging for AntiVirus file blocking.
+                type: str
                 choices:
                     - enable
                     - disable
-            av-virus-log:
+            av_virus_log:
                 description:
                     - Enable/disable AntiVirus logging.
+                type: str
                 choices:
                     - enable
                     - disable
             comment:
                 description:
                     - Comment.
-            content-disarm:
+                type: str
+            content_disarm:
                 description:
                     - AV Content Disarm and Reconstruction settings.
+                type: dict
                 suboptions:
-                    cover-page:
+                    cover_page:
                         description:
                             - Enable/disable inserting a cover page into the disarmed document.
+                        type: str
                         choices:
                             - disable
                             - enable
-                    detect-only:
+                    detect_only:
                         description:
                             - Enable/disable only detect disarmable files, do not alter content.
+                        type: str
                         choices:
                             - disable
                             - enable
-                    office-embed:
+                    office_embed:
                         description:
                             - Enable/disable stripping of embedded objects in Microsoft Office documents.
+                        type: str
                         choices:
                             - disable
                             - enable
-                    office-hylink:
+                    office_hylink:
                         description:
                             - Enable/disable stripping of hyperlinks in Microsoft Office documents.
+                        type: str
                         choices:
                             - disable
                             - enable
-                    office-linked:
+                    office_linked:
                         description:
                             - Enable/disable stripping of linked objects in Microsoft Office documents.
+                        type: str
                         choices:
                             - disable
                             - enable
-                    office-macro:
+                    office_macro:
                         description:
                             - Enable/disable stripping of macros in Microsoft Office documents.
+                        type: str
                         choices:
                             - disable
                             - enable
-                    original-file-destination:
+                    original_file_destination:
                         description:
                             - Destination to send original file if active content is removed.
+                        type: str
                         choices:
                             - fortisandbox
                             - quarantine
                             - discard
-                    pdf-act-form:
+                    pdf_act_form:
                         description:
                             - Enable/disable stripping of actions that submit data to other targets in PDF documents.
+                        type: str
                         choices:
                             - disable
                             - enable
-                    pdf-act-gotor:
+                    pdf_act_gotor:
                         description:
                             - Enable/disable stripping of links to other PDFs in PDF documents.
+                        type: str
                         choices:
                             - disable
                             - enable
-                    pdf-act-java:
+                    pdf_act_java:
                         description:
                             - Enable/disable stripping of actions that execute JavaScript code in PDF documents.
+                        type: str
                         choices:
                             - disable
                             - enable
-                    pdf-act-launch:
+                    pdf_act_launch:
                         description:
                             - Enable/disable stripping of links to external applications in PDF documents.
+                        type: str
                         choices:
                             - disable
                             - enable
-                    pdf-act-movie:
+                    pdf_act_movie:
                         description:
                             - Enable/disable stripping of embedded movies in PDF documents.
+                        type: str
                         choices:
                             - disable
                             - enable
-                    pdf-act-sound:
+                    pdf_act_sound:
                         description:
                             - Enable/disable stripping of embedded sound files in PDF documents.
+                        type: str
                         choices:
                             - disable
                             - enable
-                    pdf-embedfile:
+                    pdf_embedfile:
                         description:
                             - Enable/disable stripping of embedded files in PDF documents.
+                        type: str
                         choices:
                             - disable
                             - enable
-                    pdf-hyperlink:
+                    pdf_hyperlink:
                         description:
                             - Enable/disable stripping of hyperlinks from PDF documents.
+                        type: str
                         choices:
                             - disable
                             - enable
-                    pdf-javacode:
+                    pdf_javacode:
                         description:
                             - Enable/disable stripping of JavaScript code in PDF documents.
+                        type: str
                         choices:
                             - disable
                             - enable
-            extended-log:
+            extended_log:
                 description:
                     - Enable/disable extended logging for antivirus.
+                type: str
                 choices:
                     - enable
                     - disable
-            ftgd-analytics:
+            ftgd_analytics:
                 description:
                     - Settings to control which files are uploaded to FortiSandbox.
+                type: str
                 choices:
                     - disable
                     - suspicious
@@ -225,10 +260,12 @@ options:
             ftp:
                 description:
                     - Configure FTP AntiVirus options.
+                type: dict
                 suboptions:
-                    archive-block:
+                    archive_block:
                         description:
                             - Select the archive types to block.
+                        type: str
                         choices:
                             - encrypted
                             - corrupted
@@ -239,9 +276,10 @@ options:
                             - fileslimit
                             - timeout
                             - unhandled
-                    archive-log:
+                    archive_log:
                         description:
                             - Select the archive types to log.
+                        type: str
                         choices:
                             - encrypted
                             - corrupted
@@ -255,19 +293,22 @@ options:
                     emulator:
                         description:
                             - Enable/disable the virus emulator.
+                        type: str
                         choices:
                             - enable
                             - disable
                     options:
                         description:
                             - Enable/disable FTP AntiVirus scanning, monitoring, and quarantine.
+                        type: str
                         choices:
                             - scan
                             - avmonitor
                             - quarantine
-                    outbreak-prevention:
+                    outbreak_prevention:
                         description:
                             - Enable FortiGuard Virus Outbreak Prevention service.
+                        type: str
                         choices:
                             - disabled
                             - files
@@ -275,10 +316,12 @@ options:
             http:
                 description:
                     - Configure HTTP AntiVirus options.
+                type: dict
                 suboptions:
-                    archive-block:
+                    archive_block:
                         description:
                             - Select the archive types to block.
+                        type: str
                         choices:
                             - encrypted
                             - corrupted
@@ -289,9 +332,10 @@ options:
                             - fileslimit
                             - timeout
                             - unhandled
-                    archive-log:
+                    archive_log:
                         description:
                             - Select the archive types to log.
+                        type: str
                         choices:
                             - encrypted
                             - corrupted
@@ -302,28 +346,32 @@ options:
                             - fileslimit
                             - timeout
                             - unhandled
-                    content-disarm:
+                    content_disarm:
                         description:
                             - Enable Content Disarm and Reconstruction for this protocol.
+                        type: str
                         choices:
                             - disable
                             - enable
                     emulator:
                         description:
                             - Enable/disable the virus emulator.
+                        type: str
                         choices:
                             - enable
                             - disable
                     options:
                         description:
                             - Enable/disable HTTP AntiVirus scanning, monitoring, and quarantine.
+                        type: str
                         choices:
                             - scan
                             - avmonitor
                             - quarantine
-                    outbreak-prevention:
+                    outbreak_prevention:
                         description:
                             - Enable FortiGuard Virus Outbreak Prevention service.
+                        type: str
                         choices:
                             - disabled
                             - files
@@ -331,10 +379,12 @@ options:
             imap:
                 description:
                     - Configure IMAP AntiVirus options.
+                type: dict
                 suboptions:
-                    archive-block:
+                    archive_block:
                         description:
                             - Select the archive types to block.
+                        type: str
                         choices:
                             - encrypted
                             - corrupted
@@ -345,9 +395,10 @@ options:
                             - fileslimit
                             - timeout
                             - unhandled
-                    archive-log:
+                    archive_log:
                         description:
                             - Select the archive types to log.
+                        type: str
                         choices:
                             - encrypted
                             - corrupted
@@ -358,51 +409,59 @@ options:
                             - fileslimit
                             - timeout
                             - unhandled
-                    content-disarm:
+                    content_disarm:
                         description:
                             - Enable Content Disarm and Reconstruction for this protocol.
+                        type: str
                         choices:
                             - disable
                             - enable
                     emulator:
                         description:
                             - Enable/disable the virus emulator.
+                        type: str
                         choices:
                             - enable
                             - disable
                     executables:
                         description:
                             - Treat Windows executable files as viruses for the purpose of blocking or monitoring.
+                        type: str
                         choices:
                             - default
                             - virus
                     options:
                         description:
                             - Enable/disable IMAP AntiVirus scanning, monitoring, and quarantine.
+                        type: str
                         choices:
                             - scan
                             - avmonitor
                             - quarantine
-                    outbreak-prevention:
+                    outbreak_prevention:
                         description:
                             - Enable FortiGuard Virus Outbreak Prevention service.
+                        type: str
                         choices:
                             - disabled
                             - files
                             - full-archive
-            inspection-mode:
+            inspection_mode:
                 description:
                     - Inspection mode.
+                type: str
                 choices:
                     - proxy
                     - flow-based
             mapi:
                 description:
                     - Configure MAPI AntiVirus options.
+                type: dict
                 suboptions:
-                    archive-block:
+                    archive_block:
                         description:
                             - Select the archive types to block.
+                        type: str
                         choices:
                             - encrypted
                             - corrupted
@@ -413,9 +472,10 @@ options:
                             - fileslimit
                             - timeout
                             - unhandled
-                    archive-log:
+                    archive_log:
                         description:
                             - Select the archive types to log.
+                        type: str
                         choices:
                             - encrypted
                             - corrupted
@@ -429,51 +489,60 @@ options:
                     emulator:
                         description:
                             - Enable/disable the virus emulator.
+                        type: str
                         choices:
                             - enable
                             - disable
                     executables:
                         description:
                             - Treat Windows executable files as viruses for the purpose of blocking or monitoring.
+                        type: str
                         choices:
                             - default
                             - virus
                     options:
                         description:
                             - Enable/disable MAPI AntiVirus scanning, monitoring, and quarantine.
+                        type: str
                         choices:
                             - scan
                             - avmonitor
                             - quarantine
-                    outbreak-prevention:
+                    outbreak_prevention:
                         description:
                             - Enable FortiGuard Virus Outbreak Prevention service.
+                        type: str
                         choices:
                             - disabled
                             - files
                             - full-archive
-            mobile-malware-db:
+            mobile_malware_db:
                 description:
                     - Enable/disable using the mobile malware signature database.
+                type: str
                 choices:
                     - disable
                     - enable
-            nac-quar:
+            nac_quar:
                 description:
                     - Configure AntiVirus quarantine settings.
+                type: dict
                 suboptions:
                     expiry:
                         description:
                             - Duration of quarantine.
+                        type: str
                     infected:
                         description:
                             - Enable/Disable quarantining infected hosts to the banned user list.
+                        type: str
                         choices:
                             - none
                             - quar-src-ip
                     log:
                         description:
                             - Enable/disable AntiVirus quarantine logging.
+                        type: str
                         choices:
                             - enable
                             - disable
@@ -481,13 +550,16 @@ options:
                 description:
                     - Profile name.
                 required: true
+                type: str
             nntp:
                 description:
                     - Configure NNTP AntiVirus options.
+                type: dict
                 suboptions:
-                    archive-block:
+                    archive_block:
                         description:
                             - Select the archive types to block.
+                        type: str
                         choices:
                             - encrypted
                             - corrupted
@@ -498,9 +570,10 @@ options:
                             - fileslimit
                             - timeout
                             - unhandled
-                    archive-log:
+                    archive_log:
                         description:
                             - Select the archive types to log.
+                        type: str
                         choices:
                             - encrypted
                             - corrupted
@@ -514,19 +587,22 @@ options:
                     emulator:
                         description:
                             - Enable/disable the virus emulator.
+                        type: str
                         choices:
                             - enable
                             - disable
                     options:
                         description:
                             - Enable/disable NNTP AntiVirus scanning, monitoring, and quarantine.
+                        type: str
                         choices:
                             - scan
                             - avmonitor
                             - quarantine
-                    outbreak-prevention:
+                    outbreak_prevention:
                         description:
                             - Enable FortiGuard Virus Outbreak Prevention service.
+                        type: str
                         choices:
                             - disabled
                             - files
@@ -534,10 +610,12 @@ options:
             pop3:
                 description:
                     - Configure POP3 AntiVirus options.
+                type: dict
                 suboptions:
-                    archive-block:
+                    archive_block:
                         description:
                             - Select the archive types to block.
+                        type: str
                         choices:
                             - encrypted
                             - corrupted
@@ -548,9 +626,10 @@ options:
                             - fileslimit
                             - timeout
                             - unhandled
-                    archive-log:
+                    archive_log:
                         description:
                             - Select the archive types to log.
+                        type: str
                         choices:
                             - encrypted
                             - corrupted
@@ -561,54 +640,63 @@ options:
                             - fileslimit
                             - timeout
                             - unhandled
-                    content-disarm:
+                    content_disarm:
                         description:
                             - Enable Content Disarm and Reconstruction for this protocol.
+                        type: str
                         choices:
                             - disable
                             - enable
                     emulator:
                         description:
                             - Enable/disable the virus emulator.
+                        type: str
                         choices:
                             - enable
                             - disable
                     executables:
                         description:
                             - Treat Windows executable files as viruses for the purpose of blocking or monitoring.
+                        type: str
                         choices:
                             - default
                             - virus
                     options:
                         description:
                             - Enable/disable POP3 AntiVirus scanning, monitoring, and quarantine.
+                        type: str
                         choices:
                             - scan
                             - avmonitor
                             - quarantine
-                    outbreak-prevention:
+                    outbreak_prevention:
                         description:
                             - Enable FortiGuard Virus Outbreak Prevention service.
+                        type: str
                         choices:
                             - disabled
                             - files
                             - full-archive
-            replacemsg-group:
+            replacemsg_group:
                 description:
                     - Replacement message group customized for this profile. Source system.replacemsg-group.name.
-            scan-mode:
+                type: str
+            scan_mode:
                 description:
                     - Choose between full scan mode and quick scan mode.
+                type: str
                 choices:
                     - quick
                     - full
             smb:
                 description:
                     - Configure SMB AntiVirus options.
+                type: dict
                 suboptions:
-                    archive-block:
+                    archive_block:
                         description:
                             - Select the archive types to block.
+                        type: str
                         choices:
                             - encrypted
                             - corrupted
@@ -619,9 +707,10 @@ options:
                             - fileslimit
                             - timeout
                             - unhandled
-                    archive-log:
+                    archive_log:
                         description:
                             - Select the archive types to log.
+                        type: str
                         choices:
                             - encrypted
                             - corrupted
@@ -635,19 +724,22 @@ options:
                     emulator:
                         description:
                             - Enable/disable the virus emulator.
+                        type: str
                         choices:
                             - enable
                             - disable
                     options:
                         description:
                             - Enable/disable SMB AntiVirus scanning, monitoring, and quarantine.
+                        type: str
                         choices:
                             - scan
                             - avmonitor
                             - quarantine
-                    outbreak-prevention:
+                    outbreak_prevention:
                         description:
                             - Enable FortiGuard Virus Outbreak Prevention service.
+                        type: str
                         choices:
                             - disabled
                             - files
@@ -655,10 +747,12 @@ options:
             smtp:
                 description:
                     - Configure SMTP AntiVirus options.
+                type: dict
                 suboptions:
-                    archive-block:
+                    archive_block:
                         description:
                             - Select the archive types to block.
+                        type: str
                         choices:
                             - encrypted
                             - corrupted
@@ -669,9 +763,10 @@ options:
                             - fileslimit
                             - timeout
                             - unhandled
-                    archive-log:
+                    archive_log:
                         description:
                             - Select the archive types to log.
+                        type: str
                         choices:
                             - encrypted
                             - corrupted
@@ -682,34 +777,39 @@ options:
                             - fileslimit
                             - timeout
                             - unhandled
-                    content-disarm:
+                    content_disarm:
                         description:
                             - Enable Content Disarm and Reconstruction for this protocol.
+                        type: str
                         choices:
                             - disable
                             - enable
                     emulator:
                         description:
                             - Enable/disable the virus emulator.
+                        type: str
                         choices:
                             - enable
                             - disable
                     executables:
                         description:
                             - Treat Windows executable files as viruses for the purpose of blocking or monitoring.
+                        type: str
                         choices:
                             - default
                             - virus
                     options:
                         description:
                             - Enable/disable SMTP AntiVirus scanning, monitoring, and quarantine.
+                        type: str
                         choices:
                             - scan
                             - avmonitor
                             - quarantine
-                    outbreak-prevention:
+                    outbreak_prevention:
                         description:
                             - Enable FortiGuard Virus Outbreak Prevention service.
+                        type: str
                         choices:
                             - disabled
                             - files
@@ -723,6 +823,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure AntiVirus profiles.
     fortios_antivirus_profile:
@@ -730,99 +831,100 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       antivirus_profile:
-        state: "present"
-        analytics-bl-filetype: "3 (source dlp.filepattern.id)"
-        analytics-db: "disable"
-        analytics-max-upload: "5"
-        analytics-wl-filetype: "6 (source dlp.filepattern.id)"
-        av-block-log: "enable"
-        av-virus-log: "enable"
+        analytics_bl_filetype: "3 (source dlp.filepattern.id)"
+        analytics_db: "disable"
+        analytics_max_upload: "5"
+        analytics_wl_filetype: "6 (source dlp.filepattern.id)"
+        av_block_log: "enable"
+        av_virus_log: "enable"
         comment: "Comment."
-        content-disarm:
-            cover-page: "disable"
-            detect-only: "disable"
-            office-embed: "disable"
-            office-hylink: "disable"
-            office-linked: "disable"
-            office-macro: "disable"
-            original-file-destination: "fortisandbox"
-            pdf-act-form: "disable"
-            pdf-act-gotor: "disable"
-            pdf-act-java: "disable"
-            pdf-act-launch: "disable"
-            pdf-act-movie: "disable"
-            pdf-act-sound: "disable"
-            pdf-embedfile: "disable"
-            pdf-hyperlink: "disable"
-            pdf-javacode: "disable"
-        extended-log: "enable"
-        ftgd-analytics: "disable"
+        content_disarm:
+            cover_page: "disable"
+            detect_only: "disable"
+            office_embed: "disable"
+            office_hylink: "disable"
+            office_linked: "disable"
+            office_macro: "disable"
+            original_file_destination: "fortisandbox"
+            pdf_act_form: "disable"
+            pdf_act_gotor: "disable"
+            pdf_act_java: "disable"
+            pdf_act_launch: "disable"
+            pdf_act_movie: "disable"
+            pdf_act_sound: "disable"
+            pdf_embedfile: "disable"
+            pdf_hyperlink: "disable"
+            pdf_javacode: "disable"
+        extended_log: "enable"
+        ftgd_analytics: "disable"
         ftp:
-            archive-block: "encrypted"
-            archive-log: "encrypted"
+            archive_block: "encrypted"
+            archive_log: "encrypted"
             emulator: "enable"
             options: "scan"
-            outbreak-prevention: "disabled"
+            outbreak_prevention: "disabled"
         http:
-            archive-block: "encrypted"
-            archive-log: "encrypted"
-            content-disarm: "disable"
+            archive_block: "encrypted"
+            archive_log: "encrypted"
+            content_disarm: "disable"
             emulator: "enable"
             options: "scan"
-            outbreak-prevention: "disabled"
+            outbreak_prevention: "disabled"
         imap:
-            archive-block: "encrypted"
-            archive-log: "encrypted"
-            content-disarm: "disable"
+            archive_block: "encrypted"
+            archive_log: "encrypted"
+            content_disarm: "disable"
             emulator: "enable"
             executables: "default"
             options: "scan"
-            outbreak-prevention: "disabled"
-        inspection-mode: "proxy"
+            outbreak_prevention: "disabled"
+        inspection_mode: "proxy"
         mapi:
-            archive-block: "encrypted"
-            archive-log: "encrypted"
+            archive_block: "encrypted"
+            archive_log: "encrypted"
             emulator: "enable"
             executables: "default"
             options: "scan"
-            outbreak-prevention: "disabled"
-        mobile-malware-db: "disable"
-        nac-quar:
+            outbreak_prevention: "disabled"
+        mobile_malware_db: "disable"
+        nac_quar:
             expiry: "<your_own_value>"
             infected: "none"
             log: "enable"
         name: "default_name_63"
         nntp:
-            archive-block: "encrypted"
-            archive-log: "encrypted"
+            archive_block: "encrypted"
+            archive_log: "encrypted"
             emulator: "enable"
             options: "scan"
-            outbreak-prevention: "disabled"
+            outbreak_prevention: "disabled"
         pop3:
-            archive-block: "encrypted"
-            archive-log: "encrypted"
-            content-disarm: "disable"
+            archive_block: "encrypted"
+            archive_log: "encrypted"
+            content_disarm: "disable"
             emulator: "enable"
             executables: "default"
             options: "scan"
-            outbreak-prevention: "disabled"
-        replacemsg-group: "<your_own_value> (source system.replacemsg-group.name)"
-        scan-mode: "quick"
+            outbreak_prevention: "disabled"
+        replacemsg_group: "<your_own_value> (source system.replacemsg-group.name)"
+        scan_mode: "quick"
         smb:
-            archive-block: "encrypted"
-            archive-log: "encrypted"
+            archive_block: "encrypted"
+            archive_log: "encrypted"
             emulator: "enable"
             options: "scan"
-            outbreak-prevention: "disabled"
+            outbreak_prevention: "disabled"
         smtp:
-            archive-block: "encrypted"
-            archive-log: "encrypted"
-            content-disarm: "disable"
+            archive_block: "encrypted"
+            archive_log: "encrypted"
+            content_disarm: "disable"
             emulator: "enable"
             executables: "default"
             options: "scan"
-            outbreak-prevention: "disabled"
+            outbreak_prevention: "disabled"
 '''
 
 RETURN = '''
@@ -885,14 +987,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -900,18 +1004,18 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_antivirus_profile_data(json):
-    option_list = ['analytics-bl-filetype', 'analytics-db', 'analytics-max-upload',
-                   'analytics-wl-filetype', 'av-block-log', 'av-virus-log',
-                   'comment', 'content-disarm', 'extended-log',
-                   'ftgd-analytics', 'ftp', 'http',
-                   'imap', 'inspection-mode', 'mapi',
-                   'mobile-malware-db', 'nac-quar', 'name',
-                   'nntp', 'pop3', 'replacemsg-group',
-                   'scan-mode', 'smb', 'smtp']
+    option_list = ['analytics_bl_filetype', 'analytics_db', 'analytics_max_upload',
+                   'analytics_wl_filetype', 'av_block_log', 'av_virus_log',
+                   'comment', 'content_disarm', 'extended_log',
+                   'ftgd_analytics', 'ftp', 'http',
+                   'imap', 'inspection_mode', 'mapi',
+                   'mobile_malware_db', 'nac_quar', 'name',
+                   'nntp', 'pop3', 'replacemsg_group',
+                   'scan_mode', 'smb', 'smtp']
     dictionary = {}
 
     for attribute in option_list:
@@ -921,104 +1025,122 @@ def filter_antivirus_profile_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def antivirus_profile(data, fos):
     vdom = data['vdom']
+    state = data['state']
     antivirus_profile_data = data['antivirus_profile']
-    filtered_data = filter_antivirus_profile_data(antivirus_profile_data)
-    if antivirus_profile_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_antivirus_profile_data(antivirus_profile_data))
+
+    if state == "present":
         return fos.set('antivirus',
                        'profile',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif antivirus_profile_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('antivirus',
                           'profile',
                           mkey=filtered_data['name'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_antivirus(data, fos):
-    login(data)
 
-    methodlist = ['antivirus_profile']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['antivirus_profile']:
+        resp = antivirus_profile(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "antivirus_profile": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
-                "analytics-bl-filetype": {"required": False, "type": "int"},
-                "analytics-db": {"required": False, "type": "str",
+                "analytics_bl_filetype": {"required": False, "type": "int"},
+                "analytics_db": {"required": False, "type": "str",
                                  "choices": ["disable", "enable"]},
-                "analytics-max-upload": {"required": False, "type": "int"},
-                "analytics-wl-filetype": {"required": False, "type": "int"},
-                "av-block-log": {"required": False, "type": "str",
+                "analytics_max_upload": {"required": False, "type": "int"},
+                "analytics_wl_filetype": {"required": False, "type": "int"},
+                "av_block_log": {"required": False, "type": "str",
                                  "choices": ["enable", "disable"]},
-                "av-virus-log": {"required": False, "type": "str",
+                "av_virus_log": {"required": False, "type": "str",
                                  "choices": ["enable", "disable"]},
                 "comment": {"required": False, "type": "str"},
-                "content-disarm": {"required": False, "type": "dict",
+                "content_disarm": {"required": False, "type": "dict",
                                    "options": {
-                                       "cover-page": {"required": False, "type": "str",
+                                       "cover_page": {"required": False, "type": "str",
                                                       "choices": ["disable", "enable"]},
-                                       "detect-only": {"required": False, "type": "str",
+                                       "detect_only": {"required": False, "type": "str",
                                                        "choices": ["disable", "enable"]},
-                                       "office-embed": {"required": False, "type": "str",
+                                       "office_embed": {"required": False, "type": "str",
                                                         "choices": ["disable", "enable"]},
-                                       "office-hylink": {"required": False, "type": "str",
+                                       "office_hylink": {"required": False, "type": "str",
                                                          "choices": ["disable", "enable"]},
-                                       "office-linked": {"required": False, "type": "str",
+                                       "office_linked": {"required": False, "type": "str",
                                                          "choices": ["disable", "enable"]},
-                                       "office-macro": {"required": False, "type": "str",
+                                       "office_macro": {"required": False, "type": "str",
                                                         "choices": ["disable", "enable"]},
-                                       "original-file-destination": {"required": False, "type": "str",
+                                       "original_file_destination": {"required": False, "type": "str",
                                                                      "choices": ["fortisandbox", "quarantine", "discard"]},
-                                       "pdf-act-form": {"required": False, "type": "str",
+                                       "pdf_act_form": {"required": False, "type": "str",
                                                         "choices": ["disable", "enable"]},
-                                       "pdf-act-gotor": {"required": False, "type": "str",
+                                       "pdf_act_gotor": {"required": False, "type": "str",
                                                          "choices": ["disable", "enable"]},
-                                       "pdf-act-java": {"required": False, "type": "str",
+                                       "pdf_act_java": {"required": False, "type": "str",
                                                         "choices": ["disable", "enable"]},
-                                       "pdf-act-launch": {"required": False, "type": "str",
+                                       "pdf_act_launch": {"required": False, "type": "str",
                                                           "choices": ["disable", "enable"]},
-                                       "pdf-act-movie": {"required": False, "type": "str",
+                                       "pdf_act_movie": {"required": False, "type": "str",
                                                          "choices": ["disable", "enable"]},
-                                       "pdf-act-sound": {"required": False, "type": "str",
+                                       "pdf_act_sound": {"required": False, "type": "str",
                                                          "choices": ["disable", "enable"]},
-                                       "pdf-embedfile": {"required": False, "type": "str",
+                                       "pdf_embedfile": {"required": False, "type": "str",
                                                          "choices": ["disable", "enable"]},
-                                       "pdf-hyperlink": {"required": False, "type": "str",
+                                       "pdf_hyperlink": {"required": False, "type": "str",
                                                          "choices": ["disable", "enable"]},
-                                       "pdf-javacode": {"required": False, "type": "str",
+                                       "pdf_javacode": {"required": False, "type": "str",
                                                         "choices": ["disable", "enable"]}
                                    }},
-                "extended-log": {"required": False, "type": "str",
+                "extended_log": {"required": False, "type": "str",
                                  "choices": ["enable", "disable"]},
-                "ftgd-analytics": {"required": False, "type": "str",
+                "ftgd_analytics": {"required": False, "type": "str",
                                    "choices": ["disable", "suspicious", "everything"]},
                 "ftp": {"required": False, "type": "dict",
                         "options": {
-                            "archive-block": {"required": False, "type": "str",
+                            "archive_block": {"required": False, "type": "str",
                                               "choices": ["encrypted", "corrupted", "partiallycorrupted",
                                                           "multipart", "nested", "mailbomb",
                                                           "fileslimit", "timeout", "unhandled"]},
-                            "archive-log": {"required": False, "type": "str",
+                            "archive_log": {"required": False, "type": "str",
                                             "choices": ["encrypted", "corrupted", "partiallycorrupted",
                                                         "multipart", "nested", "mailbomb",
                                                         "fileslimit", "timeout", "unhandled"]},
@@ -1026,39 +1148,39 @@ def main():
                                          "choices": ["enable", "disable"]},
                             "options": {"required": False, "type": "str",
                                         "choices": ["scan", "avmonitor", "quarantine"]},
-                            "outbreak-prevention": {"required": False, "type": "str",
+                            "outbreak_prevention": {"required": False, "type": "str",
                                                     "choices": ["disabled", "files", "full-archive"]}
                         }},
                 "http": {"required": False, "type": "dict",
                          "options": {
-                             "archive-block": {"required": False, "type": "str",
+                             "archive_block": {"required": False, "type": "str",
                                                "choices": ["encrypted", "corrupted", "partiallycorrupted",
                                                            "multipart", "nested", "mailbomb",
                                                            "fileslimit", "timeout", "unhandled"]},
-                             "archive-log": {"required": False, "type": "str",
+                             "archive_log": {"required": False, "type": "str",
                                              "choices": ["encrypted", "corrupted", "partiallycorrupted",
                                                          "multipart", "nested", "mailbomb",
                                                          "fileslimit", "timeout", "unhandled"]},
-                             "content-disarm": {"required": False, "type": "str",
+                             "content_disarm": {"required": False, "type": "str",
                                                 "choices": ["disable", "enable"]},
                              "emulator": {"required": False, "type": "str",
                                           "choices": ["enable", "disable"]},
                              "options": {"required": False, "type": "str",
                                          "choices": ["scan", "avmonitor", "quarantine"]},
-                             "outbreak-prevention": {"required": False, "type": "str",
+                             "outbreak_prevention": {"required": False, "type": "str",
                                                      "choices": ["disabled", "files", "full-archive"]}
                          }},
                 "imap": {"required": False, "type": "dict",
                          "options": {
-                             "archive-block": {"required": False, "type": "str",
+                             "archive_block": {"required": False, "type": "str",
                                                "choices": ["encrypted", "corrupted", "partiallycorrupted",
                                                            "multipart", "nested", "mailbomb",
                                                            "fileslimit", "timeout", "unhandled"]},
-                             "archive-log": {"required": False, "type": "str",
+                             "archive_log": {"required": False, "type": "str",
                                              "choices": ["encrypted", "corrupted", "partiallycorrupted",
                                                          "multipart", "nested", "mailbomb",
                                                          "fileslimit", "timeout", "unhandled"]},
-                             "content-disarm": {"required": False, "type": "str",
+                             "content_disarm": {"required": False, "type": "str",
                                                 "choices": ["disable", "enable"]},
                              "emulator": {"required": False, "type": "str",
                                           "choices": ["enable", "disable"]},
@@ -1066,18 +1188,18 @@ def main():
                                              "choices": ["default", "virus"]},
                              "options": {"required": False, "type": "str",
                                          "choices": ["scan", "avmonitor", "quarantine"]},
-                             "outbreak-prevention": {"required": False, "type": "str",
+                             "outbreak_prevention": {"required": False, "type": "str",
                                                      "choices": ["disabled", "files", "full-archive"]}
                          }},
-                "inspection-mode": {"required": False, "type": "str",
+                "inspection_mode": {"required": False, "type": "str",
                                     "choices": ["proxy", "flow-based"]},
                 "mapi": {"required": False, "type": "dict",
                          "options": {
-                             "archive-block": {"required": False, "type": "str",
+                             "archive_block": {"required": False, "type": "str",
                                                "choices": ["encrypted", "corrupted", "partiallycorrupted",
                                                            "multipart", "nested", "mailbomb",
                                                            "fileslimit", "timeout", "unhandled"]},
-                             "archive-log": {"required": False, "type": "str",
+                             "archive_log": {"required": False, "type": "str",
                                              "choices": ["encrypted", "corrupted", "partiallycorrupted",
                                                          "multipart", "nested", "mailbomb",
                                                          "fileslimit", "timeout", "unhandled"]},
@@ -1087,12 +1209,12 @@ def main():
                                              "choices": ["default", "virus"]},
                              "options": {"required": False, "type": "str",
                                          "choices": ["scan", "avmonitor", "quarantine"]},
-                             "outbreak-prevention": {"required": False, "type": "str",
+                             "outbreak_prevention": {"required": False, "type": "str",
                                                      "choices": ["disabled", "files", "full-archive"]}
                          }},
-                "mobile-malware-db": {"required": False, "type": "str",
+                "mobile_malware_db": {"required": False, "type": "str",
                                       "choices": ["disable", "enable"]},
-                "nac-quar": {"required": False, "type": "dict",
+                "nac_quar": {"required": False, "type": "dict",
                              "options": {
                                  "expiry": {"required": False, "type": "str"},
                                  "infected": {"required": False, "type": "str",
@@ -1103,11 +1225,11 @@ def main():
                 "name": {"required": True, "type": "str"},
                 "nntp": {"required": False, "type": "dict",
                          "options": {
-                             "archive-block": {"required": False, "type": "str",
+                             "archive_block": {"required": False, "type": "str",
                                                "choices": ["encrypted", "corrupted", "partiallycorrupted",
                                                            "multipart", "nested", "mailbomb",
                                                            "fileslimit", "timeout", "unhandled"]},
-                             "archive-log": {"required": False, "type": "str",
+                             "archive_log": {"required": False, "type": "str",
                                              "choices": ["encrypted", "corrupted", "partiallycorrupted",
                                                          "multipart", "nested", "mailbomb",
                                                          "fileslimit", "timeout", "unhandled"]},
@@ -1115,20 +1237,20 @@ def main():
                                           "choices": ["enable", "disable"]},
                              "options": {"required": False, "type": "str",
                                          "choices": ["scan", "avmonitor", "quarantine"]},
-                             "outbreak-prevention": {"required": False, "type": "str",
+                             "outbreak_prevention": {"required": False, "type": "str",
                                                      "choices": ["disabled", "files", "full-archive"]}
                          }},
                 "pop3": {"required": False, "type": "dict",
                          "options": {
-                             "archive-block": {"required": False, "type": "str",
+                             "archive_block": {"required": False, "type": "str",
                                                "choices": ["encrypted", "corrupted", "partiallycorrupted",
                                                            "multipart", "nested", "mailbomb",
                                                            "fileslimit", "timeout", "unhandled"]},
-                             "archive-log": {"required": False, "type": "str",
+                             "archive_log": {"required": False, "type": "str",
                                              "choices": ["encrypted", "corrupted", "partiallycorrupted",
                                                          "multipart", "nested", "mailbomb",
                                                          "fileslimit", "timeout", "unhandled"]},
-                             "content-disarm": {"required": False, "type": "str",
+                             "content_disarm": {"required": False, "type": "str",
                                                 "choices": ["disable", "enable"]},
                              "emulator": {"required": False, "type": "str",
                                           "choices": ["enable", "disable"]},
@@ -1136,19 +1258,19 @@ def main():
                                              "choices": ["default", "virus"]},
                              "options": {"required": False, "type": "str",
                                          "choices": ["scan", "avmonitor", "quarantine"]},
-                             "outbreak-prevention": {"required": False, "type": "str",
+                             "outbreak_prevention": {"required": False, "type": "str",
                                                      "choices": ["disabled", "files", "full-archive"]}
                          }},
-                "replacemsg-group": {"required": False, "type": "str"},
-                "scan-mode": {"required": False, "type": "str",
+                "replacemsg_group": {"required": False, "type": "str"},
+                "scan_mode": {"required": False, "type": "str",
                               "choices": ["quick", "full"]},
                 "smb": {"required": False, "type": "dict",
                         "options": {
-                            "archive-block": {"required": False, "type": "str",
+                            "archive_block": {"required": False, "type": "str",
                                               "choices": ["encrypted", "corrupted", "partiallycorrupted",
                                                           "multipart", "nested", "mailbomb",
                                                           "fileslimit", "timeout", "unhandled"]},
-                            "archive-log": {"required": False, "type": "str",
+                            "archive_log": {"required": False, "type": "str",
                                             "choices": ["encrypted", "corrupted", "partiallycorrupted",
                                                         "multipart", "nested", "mailbomb",
                                                         "fileslimit", "timeout", "unhandled"]},
@@ -1156,20 +1278,20 @@ def main():
                                          "choices": ["enable", "disable"]},
                             "options": {"required": False, "type": "str",
                                         "choices": ["scan", "avmonitor", "quarantine"]},
-                            "outbreak-prevention": {"required": False, "type": "str",
+                            "outbreak_prevention": {"required": False, "type": "str",
                                                     "choices": ["disabled", "files", "full-archive"]}
                         }},
                 "smtp": {"required": False, "type": "dict",
                          "options": {
-                             "archive-block": {"required": False, "type": "str",
+                             "archive_block": {"required": False, "type": "str",
                                                "choices": ["encrypted", "corrupted", "partiallycorrupted",
                                                            "multipart", "nested", "mailbomb",
                                                            "fileslimit", "timeout", "unhandled"]},
-                             "archive-log": {"required": False, "type": "str",
+                             "archive_log": {"required": False, "type": "str",
                                              "choices": ["encrypted", "corrupted", "partiallycorrupted",
                                                          "multipart", "nested", "mailbomb",
                                                          "fileslimit", "timeout", "unhandled"]},
-                             "content-disarm": {"required": False, "type": "str",
+                             "content_disarm": {"required": False, "type": "str",
                                                 "choices": ["disable", "enable"]},
                              "emulator": {"required": False, "type": "str",
                                           "choices": ["enable", "disable"]},
@@ -1177,7 +1299,7 @@ def main():
                                              "choices": ["default", "virus"]},
                              "options": {"required": False, "type": "str",
                                          "choices": ["scan", "avmonitor", "quarantine"]},
-                             "outbreak-prevention": {"required": False, "type": "str",
+                             "outbreak_prevention": {"required": False, "type": "str",
                                                      "choices": ["disabled", "files", "full-archive"]}
                          }}
 
@@ -1187,15 +1309,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_antivirus(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_antivirus(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_antivirus(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_antivirus_quarantine.py b/lib/ansible/modules/network/fortios/fortios_antivirus_quarantine.py
index b07042a505..8cf12b3e8c 100644
--- a/lib/ansible/modules/network/fortios/fortios_antivirus_quarantine.py
+++ b/lib/ansible/modules/network/fortios/fortios_antivirus_quarantine.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 from __future__ import (absolute_import, division, print_function)
-# Copyright 2018 Fortinet, Inc.
+# Copyright 2019 Fortinet, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_antivirus_quarantine
 short_description: Configure quarantine options in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure antivirus feature and quarantine category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify antivirus feature and quarantine category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,47 +41,60 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
+        type: bool
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
         type: bool
-        default: false
+        default: true
+        version_added: 2.9
     antivirus_quarantine:
         description:
             - Configure quarantine options.
         default: null
+        type: dict
         suboptions:
             agelimit:
                 description:
                     - Age limit for quarantined files (0 - 479 hours, 0 means forever).
+                type: int
             destination:
                 description:
                     - Choose whether to quarantine files to the FortiGate disk or to FortiAnalyzer or to delete them instead of quarantining them.
+                type: str
                 choices:
                     - NULL
                     - disk
                     - FortiAnalyzer
-            drop-blocked:
+            drop_blocked:
                 description:
                     - Do not quarantine dropped files found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.
+                type: str
                 choices:
                     - imap
                     - smtp
@@ -102,10 +112,11 @@ options:
                     - mm3
                     - mm4
                     - mm7
-            drop-heuristic:
+            drop_heuristic:
                 description:
                     - Do not quarantine files detected by heuristics found in sessions using the selected protocols. Dropped files are deleted instead of
                        being quarantined.
+                type: str
                 choices:
                     - imap
                     - smtp
@@ -124,9 +135,10 @@ options:
                     - mm3
                     - mm4
                     - mm7
-            drop-infected:
+            drop_infected:
                 description:
                     - Do not quarantine infected files found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.
+                type: str
                 choices:
                     - imap
                     - smtp
@@ -148,18 +160,22 @@ options:
             lowspace:
                 description:
                     - Select the method for handling additional files when running low on disk space.
+                type: str
                 choices:
                     - drop-new
                     - ovrw-old
             maxfilesize:
                 description:
                     - Maximum file size to quarantine (0 - 500 Mbytes, 0 means unlimited).
-            quarantine-quota:
+                type: int
+            quarantine_quota:
                 description:
                     - The amount of disk space to reserve for quarantining files (0 - 4294967295 Mbytes, depends on disk space).
-            store-blocked:
+                type: int
+            store_blocked:
                 description:
                     - Quarantine blocked files found in sessions using the selected protocols.
+                type: str
                 choices:
                     - imap
                     - smtp
@@ -177,9 +193,10 @@ options:
                     - mm3
                     - mm4
                     - mm7
-            store-heuristic:
+            store_heuristic:
                 description:
                     - Quarantine files detected by heuristics found in sessions using the selected protocols.
+                type: str
                 choices:
                     - imap
                     - smtp
@@ -198,9 +215,10 @@ options:
                     - mm3
                     - mm4
                     - mm7
-            store-infected:
+            store_infected:
                 description:
                     - Quarantine infected files found in sessions using the selected protocols.
+                type: str
                 choices:
                     - imap
                     - smtp
@@ -228,6 +246,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure quarantine options.
     fortios_antivirus_quarantine:
@@ -235,18 +254,19 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
       antivirus_quarantine:
         agelimit: "3"
         destination: "NULL"
-        drop-blocked: "imap"
-        drop-heuristic: "imap"
-        drop-infected: "imap"
+        drop_blocked: "imap"
+        drop_heuristic: "imap"
+        drop_infected: "imap"
         lowspace: "drop-new"
         maxfilesize: "9"
-        quarantine-quota: "10"
-        store-blocked: "imap"
-        store-heuristic: "imap"
-        store-infected: "imap"
+        quarantine_quota: "10"
+        store_blocked: "imap"
+        store_heuristic: "imap"
+        store_infected: "imap"
 '''
 
 RETURN = '''
@@ -309,14 +329,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -324,14 +346,14 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_antivirus_quarantine_data(json):
-    option_list = ['agelimit', 'destination', 'drop-blocked',
-                   'drop-heuristic', 'drop-infected', 'lowspace',
-                   'maxfilesize', 'quarantine-quota', 'store-blocked',
-                   'store-heuristic', 'store-infected']
+    option_list = ['agelimit', 'destination', 'drop_blocked',
+                   'drop_heuristic', 'drop_infected', 'lowspace',
+                   'maxfilesize', 'quarantine_quota', 'store_blocked',
+                   'store_heuristic', 'store_infected']
     dictionary = {}
 
     for attribute in option_list:
@@ -341,57 +363,74 @@ def filter_antivirus_quarantine_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def antivirus_quarantine(data, fos):
     vdom = data['vdom']
     antivirus_quarantine_data = data['antivirus_quarantine']
-    filtered_data = filter_antivirus_quarantine_data(antivirus_quarantine_data)
+    filtered_data = underscore_to_hyphen(filter_antivirus_quarantine_data(antivirus_quarantine_data))
+
     return fos.set('antivirus',
                    'quarantine',
                    data=filtered_data,
                    vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_antivirus(data, fos):
-    login(data)
 
-    methodlist = ['antivirus_quarantine']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['antivirus_quarantine']:
+        resp = antivirus_quarantine(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
         "antivirus_quarantine": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
                 "agelimit": {"required": False, "type": "int"},
                 "destination": {"required": False, "type": "str",
                                 "choices": ["NULL", "disk", "FortiAnalyzer"]},
-                "drop-blocked": {"required": False, "type": "str",
+                "drop_blocked": {"required": False, "type": "str",
                                  "choices": ["imap", "smtp", "pop3",
                                              "http", "ftp", "nntp",
                                              "imaps", "smtps", "pop3s",
                                              "ftps", "mapi", "cifs",
                                              "mm1", "mm3", "mm4",
                                              "mm7"]},
-                "drop-heuristic": {"required": False, "type": "str",
+                "drop_heuristic": {"required": False, "type": "str",
                                    "choices": ["imap", "smtp", "pop3",
                                                "http", "ftp", "nntp",
                                                "imaps", "smtps", "pop3s",
                                                "https", "ftps", "mapi",
                                                "cifs", "mm1", "mm3",
                                                "mm4", "mm7"]},
-                "drop-infected": {"required": False, "type": "str",
+                "drop_infected": {"required": False, "type": "str",
                                   "choices": ["imap", "smtp", "pop3",
                                               "http", "ftp", "nntp",
                                               "imaps", "smtps", "pop3s",
@@ -401,22 +440,22 @@ def main():
                 "lowspace": {"required": False, "type": "str",
                              "choices": ["drop-new", "ovrw-old"]},
                 "maxfilesize": {"required": False, "type": "int"},
-                "quarantine-quota": {"required": False, "type": "int"},
-                "store-blocked": {"required": False, "type": "str",
+                "quarantine_quota": {"required": False, "type": "int"},
+                "store_blocked": {"required": False, "type": "str",
                                   "choices": ["imap", "smtp", "pop3",
                                               "http", "ftp", "nntp",
                                               "imaps", "smtps", "pop3s",
                                               "ftps", "mapi", "cifs",
                                               "mm1", "mm3", "mm4",
                                               "mm7"]},
-                "store-heuristic": {"required": False, "type": "str",
+                "store_heuristic": {"required": False, "type": "str",
                                     "choices": ["imap", "smtp", "pop3",
                                                 "http", "ftp", "nntp",
                                                 "imaps", "smtps", "pop3s",
                                                 "https", "ftps", "mapi",
                                                 "cifs", "mm1", "mm3",
                                                 "mm4", "mm7"]},
-                "store-infected": {"required": False, "type": "str",
+                "store_infected": {"required": False, "type": "str",
                                    "choices": ["imap", "smtp", "pop3",
                                                "http", "ftp", "nntp",
                                                "imaps", "smtps", "pop3s",
@@ -430,15 +469,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_antivirus(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_antivirus(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_antivirus(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_antivirus_settings.py b/lib/ansible/modules/network/fortios/fortios_antivirus_settings.py
index 0fbba05c82..b2d1ee397e 100644
--- a/lib/ansible/modules/network/fortios/fortios_antivirus_settings.py
+++ b/lib/ansible/modules/network/fortios/fortios_antivirus_settings.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 from __future__ import (absolute_import, division, print_function)
-# Copyright 2018 Fortinet, Inc.
+# Copyright 2019 Fortinet, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_antivirus_settings
 short_description: Configure AntiVirus settings in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure antivirus feature and settings category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify antivirus feature and settings category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,37 +41,48 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
+        type: bool
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
         type: bool
-        default: false
+        default: true
+        version_added: 2.9
     antivirus_settings:
         description:
             - Configure AntiVirus settings.
         default: null
+        type: dict
         suboptions:
-            default-db:
+            default_db:
                 description:
                     - Select the AV database to be used for AV scanning.
+                type: str
                 choices:
                     - normal
                     - extended
@@ -82,13 +90,15 @@ options:
             grayware:
                 description:
                     - Enable/disable grayware detection when an AntiVirus profile is applied to traffic.
+                type: str
                 choices:
                     - enable
                     - disable
-            override-timeout:
+            override_timeout:
                 description:
                     - Override the large file scan timeout value in seconds (30 - 3600). Zero is the default value and is used to disable this command. When
                        disabled, the daemon adjusts the large file scan timeout based on the file size.
+                type: int
 '''
 
 EXAMPLES = '''
@@ -98,6 +108,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure AntiVirus settings.
     fortios_antivirus_settings:
@@ -105,10 +116,11 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
       antivirus_settings:
-        default-db: "normal"
+        default_db: "normal"
         grayware: "enable"
-        override-timeout: "5"
+        override_timeout: "5"
 '''
 
 RETURN = '''
@@ -171,14 +183,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -186,11 +200,11 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_antivirus_settings_data(json):
-    option_list = ['default-db', 'grayware', 'override-timeout']
+    option_list = ['default_db', 'grayware', 'override_timeout']
     dictionary = {}
 
     for attribute in option_list:
@@ -200,44 +214,61 @@ def filter_antivirus_settings_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def antivirus_settings(data, fos):
     vdom = data['vdom']
     antivirus_settings_data = data['antivirus_settings']
-    filtered_data = filter_antivirus_settings_data(antivirus_settings_data)
+    filtered_data = underscore_to_hyphen(filter_antivirus_settings_data(antivirus_settings_data))
+
     return fos.set('antivirus',
                    'settings',
                    data=filtered_data,
                    vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_antivirus(data, fos):
-    login(data)
 
-    methodlist = ['antivirus_settings']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['antivirus_settings']:
+        resp = antivirus_settings(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
         "antivirus_settings": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "default-db": {"required": False, "type": "str",
+                "default_db": {"required": False, "type": "str",
                                "choices": ["normal", "extended", "extreme"]},
                 "grayware": {"required": False, "type": "str",
                              "choices": ["enable", "disable"]},
-                "override-timeout": {"required": False, "type": "int"}
+                "override_timeout": {"required": False, "type": "int"}
 
             }
         }
@@ -245,15 +276,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_antivirus(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_antivirus(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_antivirus(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_application_custom.py b/lib/ansible/modules/network/fortios/fortios_application_custom.py
index f15afa59d5..61ca1d5edd 100644
--- a/lib/ansible/modules/network/fortios/fortios_application_custom.py
+++ b/lib/ansible/modules/network/fortios/fortios_application_custom.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 from __future__ import (absolute_import, division, print_function)
-# Copyright 2018 Fortinet, Inc.
+# Copyright 2019 Fortinet, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_application_custom
 short_description: Configure custom application signatures in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure application feature and custom category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify application feature and custom category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,71 +41,93 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     application_custom:
         description:
             - Configure custom application signatures.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
             behavior:
                 description:
                     - Custom application signature behavior.
+                type: str
             category:
                 description:
                     - Custom application category ID (use ? to view available options).
+                type: int
             comment:
                 description:
                     - Comment.
+                type: str
             id:
                 description:
                     - Custom application category ID (use ? to view available options).
+                type: int
             name:
                 description:
                     - Name of this custom application signature.
+                type: str
             protocol:
                 description:
                     - Custom application signature protocol.
+                type: str
             signature:
                 description:
                     - The text that makes up the actual custom application signature.
+                type: str
             tag:
                 description:
                     - Signature tag.
                 required: true
+                type: str
             technology:
                 description:
                     - Custom application signature technology.
+                type: str
             vendor:
                 description:
                     - Custom application signature vendor.
+                type: str
 '''
 
 EXAMPLES = '''
@@ -118,6 +137,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure custom application signatures.
     fortios_application_custom:
@@ -125,8 +145,9 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       application_custom:
-        state: "present"
         behavior: "<your_own_value>"
         category: "4"
         comment: "Comment."
@@ -199,14 +220,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
-
-fos = None
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
 
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -214,7 +237,7 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_application_custom_data(json):
@@ -231,48 +254,66 @@ def filter_application_custom_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def application_custom(data, fos):
     vdom = data['vdom']
+    state = data['state']
     application_custom_data = data['application_custom']
-    filtered_data = filter_application_custom_data(application_custom_data)
-    if application_custom_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_application_custom_data(application_custom_data))
+
+    if state == "present":
         return fos.set('application',
                        'custom',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif application_custom_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('application',
                           'custom',
                           mkey=filtered_data['tag'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_application(data, fos):
-    login(data)
 
-    methodlist = ['application_custom']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['application_custom']:
+        resp = application_custom(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "application_custom": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
                 "behavior": {"required": False, "type": "str"},
                 "category": {"required": False, "type": "int"},
                 "comment": {"required": False, "type": "str"},
@@ -290,15 +331,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_application(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_application(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_application(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_application_group.py b/lib/ansible/modules/network/fortios/fortios_application_group.py
index f0270ba40f..0bb68e0b42 100644
--- a/lib/ansible/modules/network/fortios/fortios_application_group.py
+++ b/lib/ansible/modules/network/fortios/fortios_application_group.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 from __future__ import (absolute_import, division, print_function)
-# Copyright 2018 Fortinet, Inc.
+# Copyright 2019 Fortinet, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_application_group
 short_description: Configure firewall application groups in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure application feature and group category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify application feature and group category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,66 +41,85 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     application_group:
         description:
             - Configure firewall application groups.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
             application:
                 description:
                     - Application ID list.
+                type: list
                 suboptions:
                     id:
                         description:
                             - Application IDs.
                         required: true
+                        type: int
             category:
                 description:
                     - Application category ID list.
+                type: list
                 suboptions:
                     id:
                         description:
                             - Category IDs.
                         required: true
+                        type: int
             comment:
                 description:
                     - Comment
+                type: str
             name:
                 description:
                     - Application group name.
                 required: true
+                type: str
             type:
                 description:
                     - Application group type.
+                type: str
                 choices:
                     - application
                     - category
@@ -116,6 +132,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure firewall application groups.
     fortios_application_group:
@@ -123,8 +140,9 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       application_group:
-        state: "present"
         application:
          -
             id:  "4"
@@ -196,14 +214,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -211,7 +231,7 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_application_group_data(json):
@@ -226,48 +246,66 @@ def filter_application_group_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def application_group(data, fos):
     vdom = data['vdom']
+    state = data['state']
     application_group_data = data['application_group']
-    filtered_data = filter_application_group_data(application_group_data)
-    if application_group_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_application_group_data(application_group_data))
+
+    if state == "present":
         return fos.set('application',
                        'group',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif application_group_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('application',
                           'group',
                           mkey=filtered_data['name'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_application(data, fos):
-    login(data)
 
-    methodlist = ['application_group']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['application_group']:
+        resp = application_group(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "application_group": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
                 "application": {"required": False, "type": "list",
                                 "options": {
                                     "id": {"required": True, "type": "int"}
@@ -287,15 +325,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_application(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_application(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_application(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_application_list.py b/lib/ansible/modules/network/fortios/fortios_application_list.py
index ee09b7d1e9..26461634d9 100644
--- a/lib/ansible/modules/network/fortios/fortios_application_list.py
+++ b/lib/ansible/modules/network/fortios/fortios_application_list.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 from __future__ import (absolute_import, division, print_function)
-# Copyright 2018 Fortinet, Inc.
+# Copyright 2019 Fortinet, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -27,12 +24,12 @@ ANSIBLE_METADATA = {'status': ['preview'],
 DOCUMENTATION = '''
 ---
 module: fortios_application_list
-short_description: Configure application control lists.
+short_description: Configure application control lists in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure application feature and list category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify application feature and list category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,62 +41,79 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     application_list:
         description:
             - Configure application control lists.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
-            app-replacemsg:
+            app_replacemsg:
                 description:
                     - Enable/disable replacement messages for blocked applications.
+                type: str
                 choices:
                     - disable
                     - enable
             comment:
                 description:
                     - comments
-            deep-app-inspection:
+                type: str
+            deep_app_inspection:
                 description:
                     - Enable/disable deep application inspection.
+                type: str
                 choices:
                     - disable
                     - enable
             entries:
                 description:
                     - Application list entries.
+                type: list
                 suboptions:
                     action:
                         description:
                             - Pass or block traffic, or reset connection for traffic from this application.
+                        type: str
                         choices:
                             - pass
                             - block
@@ -107,55 +121,68 @@ options:
                     application:
                         description:
                             - ID of allowed applications.
+                        type: list
                         suboptions:
                             id:
                                 description:
                                     - Application IDs.
                                 required: true
+                                type: int
                     behavior:
                         description:
                             - Application behavior filter.
+                        type: str
                     category:
                         description:
                             - Category ID list.
+                        type: list
                         suboptions:
                             id:
                                 description:
                                     - Application category ID.
                                 required: true
+                                type: int
                     id:
                         description:
                             - Entry ID.
                         required: true
+                        type: int
                     log:
                         description:
                             - Enable/disable logging for this application list.
+                        type: str
                         choices:
                             - disable
                             - enable
-                    log-packet:
+                    log_packet:
                         description:
                             - Enable/disable packet logging.
+                        type: str
                         choices:
                             - disable
                             - enable
                     parameters:
                         description:
                             - Application parameters.
+                        type: list
                         suboptions:
                             id:
                                 description:
                                     - Parameter ID.
                                 required: true
+                                type: int
                             value:
                                 description:
                                     - Parameter value.
-                    per-ip-shaper:
+                                type: str
+                    per_ip_shaper:
                         description:
                             - Per-IP traffic shaper. Source firewall.shaper.per-ip-shaper.name.
+                        type: str
                     popularity:
                         description:
                             - Application popularity filter (1 - 5, from least to most popular).
+                        type: str
                         choices:
                             - 1
                             - 2
@@ -165,36 +192,44 @@ options:
                     protocols:
                         description:
                             - Application protocol filter.
+                        type: str
                     quarantine:
                         description:
                             - Quarantine method.
+                        type: str
                         choices:
                             - none
                             - attacker
-                    quarantine-expiry:
+                    quarantine_expiry:
                         description:
                             - Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
-                    quarantine-log:
+                        type: str
+                    quarantine_log:
                         description:
                             - Enable/disable quarantine logging.
+                        type: str
                         choices:
                             - disable
                             - enable
-                    rate-count:
+                    rate_count:
                         description:
                             - Count of the rate.
-                    rate-duration:
+                        type: int
+                    rate_duration:
                         description:
                             - Duration (sec) of the rate.
-                    rate-mode:
+                        type: int
+                    rate_mode:
                         description:
                             - Rate limit mode.
+                        type: str
                         choices:
                             - periodical
                             - continuous
-                    rate-track:
+                    rate_track:
                         description:
                             - Track the packet protocol field.
+                        type: str
                         choices:
                             - none
                             - src-ip
@@ -204,37 +239,47 @@ options:
                     risk:
                         description:
                             - Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical).
+                        type: list
                         suboptions:
                             level:
                                 description:
                                     - Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical).
                                 required: true
-                    session-ttl:
+                                type: int
+                    session_ttl:
                         description:
                             - Session TTL (0 = default).
+                        type: int
                     shaper:
                         description:
                             - Traffic shaper. Source firewall.shaper.traffic-shaper.name.
-                    shaper-reverse:
+                        type: str
+                    shaper_reverse:
                         description:
                             - Reverse traffic shaper. Source firewall.shaper.traffic-shaper.name.
-                    sub-category:
+                        type: str
+                    sub_category:
                         description:
                             - Application Sub-category ID list.
+                        type: list
                         suboptions:
                             id:
                                 description:
                                     - Application sub-category ID.
                                 required: true
+                                type: int
                     technology:
                         description:
                             - Application technology filter.
+                        type: str
                     vendor:
                         description:
                             - Application vendor filter.
-            extended-log:
+                        type: str
+            extended_log:
                 description:
                     - Enable/disable extended logging.
+                type: str
                 choices:
                     - enable
                     - disable
@@ -242,46 +287,54 @@ options:
                 description:
                     - List name.
                 required: true
+                type: str
             options:
                 description:
                     - Basic application protocol signatures allowed by default.
+                type: str
                 choices:
                     - allow-dns
                     - allow-icmp
                     - allow-http
                     - allow-ssl
                     - allow-quic
-            other-application-action:
+            other_application_action:
                 description:
                     - Action for other applications.
+                type: str
                 choices:
                     - pass
                     - block
-            other-application-log:
+            other_application_log:
                 description:
                     - Enable/disable logging for other applications.
+                type: str
                 choices:
                     - disable
                     - enable
-            p2p-black-list:
+            p2p_black_list:
                 description:
                     - P2P applications to be black listed.
+                type: str
                 choices:
                     - skype
                     - edonkey
                     - bittorrent
-            replacemsg-group:
+            replacemsg_group:
                 description:
                     - Replacement message group. Source system.replacemsg-group.name.
-            unknown-application-action:
+                type: str
+            unknown_application_action:
                 description:
                     - Pass or block traffic from unknown applications.
+                type: str
                 choices:
                     - pass
                     - block
-            unknown-application-log:
+            unknown_application_log:
                 description:
                     - Enable/disable logging for unknown applications.
+                type: str
                 choices:
                     - disable
                     - enable
@@ -294,18 +347,20 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure application control lists.
     fortios_application_list:
-      host:  "{{  host }}"
+      host:  "{{ host }}"
       username: "{{ username }}"
       password: "{{ password }}"
-      vdom:  "{{  vdom }}"
+      vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       application_list:
-        state: "present"
-        app-replacemsg: "disable"
+        app_replacemsg: "disable"
         comment: "comments"
-        deep-app-inspection: "disable"
+        deep_app_inspection: "disable"
         entries:
          -
             action: "pass"
@@ -318,41 +373,41 @@ EXAMPLES = '''
                 id:  "12"
             id:  "13"
             log: "disable"
-            log-packet: "disable"
+            log_packet: "disable"
             parameters:
              -
                 id:  "17"
                 value: "<your_own_value>"
-            per-ip-shaper: "<your_own_value> (source firewall.shaper.per-ip-shaper.name)"
+            per_ip_shaper: "<your_own_value> (source firewall.shaper.per-ip-shaper.name)"
             popularity: "1"
             protocols: "<your_own_value>"
             quarantine: "none"
-            quarantine-expiry: "<your_own_value>"
-            quarantine-log: "disable"
-            rate-count: "25"
-            rate-duration: "26"
-            rate-mode: "periodical"
-            rate-track: "none"
+            quarantine_expiry: "<your_own_value>"
+            quarantine_log: "disable"
+            rate_count: "25"
+            rate_duration: "26"
+            rate_mode: "periodical"
+            rate_track: "none"
             risk:
              -
                 level: "30"
-            session-ttl: "31"
+            session_ttl: "31"
             shaper: "<your_own_value> (source firewall.shaper.traffic-shaper.name)"
-            shaper-reverse: "<your_own_value> (source firewall.shaper.traffic-shaper.name)"
-            sub-category:
+            shaper_reverse: "<your_own_value> (source firewall.shaper.traffic-shaper.name)"
+            sub_category:
              -
                 id:  "35"
             technology: "<your_own_value>"
             vendor: "<your_own_value>"
-        extended-log: "enable"
+        extended_log: "enable"
         name: "default_name_39"
         options: "allow-dns"
-        other-application-action: "pass"
-        other-application-log: "disable"
-        p2p-black-list: "skype"
-        replacemsg-group: "<your_own_value> (source system.replacemsg-group.name)"
-        unknown-application-action: "pass"
-        unknown-application-log: "disable"
+        other_application_action: "pass"
+        other_application_log: "disable"
+        p2p_black_list: "skype"
+        replacemsg_group: "<your_own_value> (source system.replacemsg-group.name)"
+        unknown_application_action: "pass"
+        unknown_application_log: "disable"
 '''
 
 RETURN = '''
@@ -375,7 +430,7 @@ mkey:
   description: Master key (id) used in the last call to FortiGate
   returned: success
   type: str
-  sample: "key1"
+  sample: "id"
 name:
   description: Name of the table used to fulfill the request
   returned: always
@@ -415,14 +470,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -430,70 +487,88 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_application_list_data(json):
-    option_list = ['app-replacemsg', 'comment', 'deep-app-inspection',
-                   'entries', 'extended-log', 'name',
-                   'options', 'other-application-action', 'other-application-log',
-                   'p2p-black-list', 'replacemsg-group', 'unknown-application-action',
-                   'unknown-application-log']
+    option_list = ['app_replacemsg', 'comment', 'deep_app_inspection',
+                   'entries', 'extended_log', 'name',
+                   'options', 'other_application_action', 'other_application_log',
+                   'p2p_black_list', 'replacemsg_group', 'unknown_application_action',
+                   'unknown_application_log']
     dictionary = {}
 
     for attribute in option_list:
-        if attribute in json:
+        if attribute in json and json[attribute] is not None:
             dictionary[attribute] = json[attribute]
 
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def application_list(data, fos):
     vdom = data['vdom']
+    state = data['state']
     application_list_data = data['application_list']
-    filtered_data = filter_application_list_data(application_list_data)
-    if application_list_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_application_list_data(application_list_data))
+
+    if state == "present":
         return fos.set('application',
                        'list',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif application_list_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('application',
                           'list',
                           mkey=filtered_data['name'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_application(data, fos):
-    login(data)
 
-    methodlist = ['application_list']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['application_list']:
+        resp = application_list(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "application_list": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
-                "app-replacemsg": {"required": False, "type": "str",
+                "app_replacemsg": {"required": False, "type": "str",
                                    "choices": ["disable", "enable"]},
                 "comment": {"required": False, "type": "str"},
-                "deep-app-inspection": {"required": False, "type": "str",
+                "deep_app_inspection": {"required": False, "type": "str",
                                         "choices": ["disable", "enable"]},
                 "entries": {"required": False, "type": "list",
                             "options": {
@@ -511,60 +586,60 @@ def main():
                                 "id": {"required": True, "type": "int"},
                                 "log": {"required": False, "type": "str",
                                         "choices": ["disable", "enable"]},
-                                "log-packet": {"required": False, "type": "str",
+                                "log_packet": {"required": False, "type": "str",
                                                "choices": ["disable", "enable"]},
                                 "parameters": {"required": False, "type": "list",
                                                "options": {
                                                    "id": {"required": True, "type": "int"},
                                                    "value": {"required": False, "type": "str"}
                                                }},
-                                "per-ip-shaper": {"required": False, "type": "str"},
+                                "per_ip_shaper": {"required": False, "type": "str"},
                                 "popularity": {"required": False, "type": "str",
                                                "choices": ["1", "2", "3",
                                                            "4", "5"]},
                                 "protocols": {"required": False, "type": "str"},
                                 "quarantine": {"required": False, "type": "str",
                                                "choices": ["none", "attacker"]},
-                                "quarantine-expiry": {"required": False, "type": "str"},
-                                "quarantine-log": {"required": False, "type": "str",
+                                "quarantine_expiry": {"required": False, "type": "str"},
+                                "quarantine_log": {"required": False, "type": "str",
                                                    "choices": ["disable", "enable"]},
-                                "rate-count": {"required": False, "type": "int"},
-                                "rate-duration": {"required": False, "type": "int"},
-                                "rate-mode": {"required": False, "type": "str",
+                                "rate_count": {"required": False, "type": "int"},
+                                "rate_duration": {"required": False, "type": "int"},
+                                "rate_mode": {"required": False, "type": "str",
                                               "choices": ["periodical", "continuous"]},
-                                "rate-track": {"required": False, "type": "str",
+                                "rate_track": {"required": False, "type": "str",
                                                "choices": ["none", "src-ip", "dest-ip",
                                                            "dhcp-client-mac", "dns-domain"]},
                                 "risk": {"required": False, "type": "list",
                                          "options": {
                                              "level": {"required": True, "type": "int"}
                                          }},
-                                "session-ttl": {"required": False, "type": "int"},
+                                "session_ttl": {"required": False, "type": "int"},
                                 "shaper": {"required": False, "type": "str"},
-                                "shaper-reverse": {"required": False, "type": "str"},
-                                "sub-category": {"required": False, "type": "list",
+                                "shaper_reverse": {"required": False, "type": "str"},
+                                "sub_category": {"required": False, "type": "list",
                                                  "options": {
                                                      "id": {"required": True, "type": "int"}
                                                  }},
                                 "technology": {"required": False, "type": "str"},
                                 "vendor": {"required": False, "type": "str"}
                             }},
-                "extended-log": {"required": False, "type": "str",
+                "extended_log": {"required": False, "type": "str",
                                  "choices": ["enable", "disable"]},
                 "name": {"required": True, "type": "str"},
                 "options": {"required": False, "type": "str",
                             "choices": ["allow-dns", "allow-icmp", "allow-http",
                                         "allow-ssl", "allow-quic"]},
-                "other-application-action": {"required": False, "type": "str",
+                "other_application_action": {"required": False, "type": "str",
                                              "choices": ["pass", "block"]},
-                "other-application-log": {"required": False, "type": "str",
+                "other_application_log": {"required": False, "type": "str",
                                           "choices": ["disable", "enable"]},
-                "p2p-black-list": {"required": False, "type": "str",
+                "p2p_black_list": {"required": False, "type": "str",
                                    "choices": ["skype", "edonkey", "bittorrent"]},
-                "replacemsg-group": {"required": False, "type": "str"},
-                "unknown-application-action": {"required": False, "type": "str",
+                "replacemsg_group": {"required": False, "type": "str"},
+                "unknown_application_action": {"required": False, "type": "str",
                                                "choices": ["pass", "block"]},
-                "unknown-application-log": {"required": False, "type": "str",
+                "unknown_application_log": {"required": False, "type": "str",
                                             "choices": ["disable", "enable"]}
 
             }
@@ -573,15 +648,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_application(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_application(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_application(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_application_name.py b/lib/ansible/modules/network/fortios/fortios_application_name.py
index e8302134f2..42872a3a5e 100644
--- a/lib/ansible/modules/network/fortios/fortios_application_name.py
+++ b/lib/ansible/modules/network/fortios/fortios_application_name.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 from __future__ import (absolute_import, division, print_function)
-# Copyright 2018 Fortinet, Inc.
+# Copyright 2019 Fortinet, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_application_name
 short_description: Configure application signatures in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure application feature and name category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify application feature and name category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,91 +41,119 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     application_name:
         description:
             - Configure application signatures.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
             behavior:
                 description:
                     - Application behavior.
+                type: str
             category:
                 description:
                     - Application category ID.
+                type: int
             id:
                 description:
                     - Application ID.
+                type: int
             metadata:
                 description:
                     - Meta data.
+                type: list
                 suboptions:
                     id:
                         description:
                             - ID.
                         required: true
+                        type: int
                     metaid:
                         description:
                             - Meta ID.
+                        type: int
                     valueid:
                         description:
                             - Value ID.
+                        type: int
             name:
                 description:
                     - Application name.
                 required: true
+                type: str
             parameter:
                 description:
                     - Application parameter name.
+                type: str
             popularity:
                 description:
                     - Application popularity.
+                type: int
             protocol:
                 description:
                     - Application protocol.
+                type: str
             risk:
                 description:
                     - Application risk.
-            sub-category:
+                type: int
+            sub_category:
                 description:
                     - Application sub-category ID.
+                type: int
             technology:
                 description:
                     - Application technology.
+                type: str
             vendor:
                 description:
                     - Application vendor.
+                type: str
             weight:
                 description:
                     - Application weight.
+                type: int
 '''
 
 EXAMPLES = '''
@@ -138,6 +163,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure application signatures.
     fortios_application_name:
@@ -145,8 +171,9 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       application_name:
-        state: "present"
         behavior: "<your_own_value>"
         category: "4"
         id:  "5"
@@ -160,7 +187,7 @@ EXAMPLES = '''
         popularity: "12"
         protocol: "<your_own_value>"
         risk: "14"
-        sub-category: "15"
+        sub_category: "15"
         technology: "<your_own_value>"
         vendor: "<your_own_value>"
         weight: "18"
@@ -226,14 +253,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
-
-fos = None
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
 
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -241,14 +270,14 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_application_name_data(json):
     option_list = ['behavior', 'category', 'id',
                    'metadata', 'name', 'parameter',
                    'popularity', 'protocol', 'risk',
-                   'sub-category', 'technology', 'vendor',
+                   'sub_category', 'technology', 'vendor',
                    'weight']
     dictionary = {}
 
@@ -259,48 +288,66 @@ def filter_application_name_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def application_name(data, fos):
     vdom = data['vdom']
+    state = data['state']
     application_name_data = data['application_name']
-    filtered_data = filter_application_name_data(application_name_data)
-    if application_name_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_application_name_data(application_name_data))
+
+    if state == "present":
         return fos.set('application',
                        'name',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif application_name_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('application',
                           'name',
                           mkey=filtered_data['name'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_application(data, fos):
-    login(data)
 
-    methodlist = ['application_name']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['application_name']:
+        resp = application_name(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "application_name": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
                 "behavior": {"required": False, "type": "str"},
                 "category": {"required": False, "type": "int"},
                 "id": {"required": False, "type": "int"},
@@ -315,7 +362,7 @@ def main():
                 "popularity": {"required": False, "type": "int"},
                 "protocol": {"required": False, "type": "str"},
                 "risk": {"required": False, "type": "int"},
-                "sub-category": {"required": False, "type": "int"},
+                "sub_category": {"required": False, "type": "int"},
                 "technology": {"required": False, "type": "str"},
                 "vendor": {"required": False, "type": "str"},
                 "weight": {"required": False, "type": "int"}
@@ -326,15 +373,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_application(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_application(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_application(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_application_rule_settings.py b/lib/ansible/modules/network/fortios/fortios_application_rule_settings.py
index 6d04ea3be8..da32a81e89 100644
--- a/lib/ansible/modules/network/fortios/fortios_application_rule_settings.py
+++ b/lib/ansible/modules/network/fortios/fortios_application_rule_settings.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 from __future__ import (absolute_import, division, print_function)
-# Copyright 2018 Fortinet, Inc.
+# Copyright 2019 Fortinet, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_application_rule_settings
 short_description: Configure application rule settings in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure application feature and rule_settings category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify application feature and rule_settings category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,44 +41,57 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     application_rule_settings:
         description:
             - Configure application rule settings.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
             id:
                 description:
                     - Rule ID.
                 required: true
+                type: int
 '''
 
 EXAMPLES = '''
@@ -91,6 +101,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure application rule settings.
     fortios_application_rule_settings:
@@ -98,8 +109,9 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       application_rule_settings:
-        state: "present"
         id:  "3"
 '''
 
@@ -163,14 +175,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
-
-fos = None
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
 
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -178,7 +192,7 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_application_rule_settings_data(json):
@@ -192,48 +206,66 @@ def filter_application_rule_settings_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def application_rule_settings(data, fos):
     vdom = data['vdom']
+    state = data['state']
     application_rule_settings_data = data['application_rule_settings']
-    filtered_data = filter_application_rule_settings_data(application_rule_settings_data)
-    if application_rule_settings_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_application_rule_settings_data(application_rule_settings_data))
+
+    if state == "present":
         return fos.set('application',
                        'rule-settings',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif application_rule_settings_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('application',
                           'rule-settings',
                           mkey=filtered_data['id'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_application(data, fos):
-    login(data)
 
-    methodlist = ['application_rule_settings']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['application_rule_settings']:
+        resp = application_rule_settings(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "application_rule_settings": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
                 "id": {"required": True, "type": "int"}
 
             }
@@ -242,15 +274,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_application(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_application(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_application(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_authentication_rule.py b/lib/ansible/modules/network/fortios/fortios_authentication_rule.py
index b7dea5d4b7..077ae18e10 100644
--- a/lib/ansible/modules/network/fortios/fortios_authentication_rule.py
+++ b/lib/ansible/modules/network/fortios/fortios_authentication_rule.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 from __future__ import (absolute_import, division, print_function)
-# Copyright 2018 Fortinet, Inc.
+# Copyright 2019 Fortinet, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_authentication_rule
 short_description: Configure Authentication Rules in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure authentication feature and rule category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify authentication feature and rule category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,49 +41,64 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     authentication_rule:
         description:
             - Configure Authentication Rules.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
-            active-auth-method:
+            active_auth_method:
                 description:
                     - Select an active authentication method. Source authentication.scheme.name.
+                type: str
             comments:
                 description:
                     - Comment.
-            ip-based:
+                type: str
+            ip_based:
                 description:
                     - Enable/disable IP-based authentication. Once a user authenticates all traffic from the IP address the user authenticated from is allowed.
+                type: str
                 choices:
                     - enable
                     - disable
@@ -94,10 +106,12 @@ options:
                 description:
                     - Authentication rule name.
                 required: true
+                type: str
             protocol:
                 description:
                     - Select the protocol to use for authentication (default = http). Users connect to the FortiGate using this protocol and are asked to
                        authenticate.
+                type: str
                 choices:
                     - http
                     - ftp
@@ -106,37 +120,45 @@ options:
             srcaddr:
                 description:
                     - Select an IPv4 source address from available options. Required for web proxy authentication.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Address name. Source firewall.address.name firewall.addrgrp.name firewall.proxy-address.name firewall.proxy-addrgrp.name.
                         required: true
+                        type: str
             srcaddr6:
                 description:
                     - Select an IPv6 source address. Required for web proxy authentication.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Address name. Source firewall.address6.name firewall.addrgrp6.name.
                         required: true
-            sso-auth-method:
+                        type: str
+            sso_auth_method:
                 description:
                     - Select a single-sign on (SSO) authentication method. Source authentication.scheme.name.
+                type: str
             status:
                 description:
                     - Enable/disable this authentication rule.
+                type: str
                 choices:
                     - enable
                     - disable
-            transaction-based:
+            transaction_based:
                 description:
                     - Enable/disable transaction based authentication (default = disable).
+                type: str
                 choices:
                     - enable
                     - disable
-            web-auth-cookie:
+            web_auth_cookie:
                 description:
                     - Enable/disable Web authentication cookies (default = disable).
+                type: str
                 choices:
                     - enable
                     - disable
@@ -149,6 +171,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure Authentication Rules.
     fortios_authentication_rule:
@@ -156,11 +179,12 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       authentication_rule:
-        state: "present"
-        active-auth-method: "<your_own_value> (source authentication.scheme.name)"
+        active_auth_method: "<your_own_value> (source authentication.scheme.name)"
         comments: "<your_own_value>"
-        ip-based: "enable"
+        ip_based: "enable"
         name: "default_name_6"
         protocol: "http"
         srcaddr:
@@ -169,10 +193,10 @@ EXAMPLES = '''
         srcaddr6:
          -
             name: "default_name_11 (source firewall.address6.name firewall.addrgrp6.name)"
-        sso-auth-method: "<your_own_value> (source authentication.scheme.name)"
+        sso_auth_method: "<your_own_value> (source authentication.scheme.name)"
         status: "enable"
-        transaction-based: "enable"
-        web-auth-cookie: "enable"
+        transaction_based: "enable"
+        web_auth_cookie: "enable"
 '''
 
 RETURN = '''
@@ -235,14 +259,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -250,14 +276,14 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_authentication_rule_data(json):
-    option_list = ['active-auth-method', 'comments', 'ip-based',
+    option_list = ['active_auth_method', 'comments', 'ip_based',
                    'name', 'protocol', 'srcaddr',
-                   'srcaddr6', 'sso-auth-method', 'status',
-                   'transaction-based', 'web-auth-cookie']
+                   'srcaddr6', 'sso_auth_method', 'status',
+                   'transaction_based', 'web_auth_cookie']
     dictionary = {}
 
     for attribute in option_list:
@@ -267,51 +293,69 @@ def filter_authentication_rule_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def authentication_rule(data, fos):
     vdom = data['vdom']
+    state = data['state']
     authentication_rule_data = data['authentication_rule']
-    filtered_data = filter_authentication_rule_data(authentication_rule_data)
-    if authentication_rule_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_authentication_rule_data(authentication_rule_data))
+
+    if state == "present":
         return fos.set('authentication',
                        'rule',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif authentication_rule_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('authentication',
                           'rule',
                           mkey=filtered_data['name'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_authentication(data, fos):
-    login(data)
 
-    methodlist = ['authentication_rule']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['authentication_rule']:
+        resp = authentication_rule(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "authentication_rule": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
-                "active-auth-method": {"required": False, "type": "str"},
+                "active_auth_method": {"required": False, "type": "str"},
                 "comments": {"required": False, "type": "str"},
-                "ip-based": {"required": False, "type": "str",
+                "ip_based": {"required": False, "type": "str",
                              "choices": ["enable", "disable"]},
                 "name": {"required": True, "type": "str"},
                 "protocol": {"required": False, "type": "str",
@@ -325,12 +369,12 @@ def main():
                              "options": {
                                  "name": {"required": True, "type": "str"}
                              }},
-                "sso-auth-method": {"required": False, "type": "str"},
+                "sso_auth_method": {"required": False, "type": "str"},
                 "status": {"required": False, "type": "str",
                            "choices": ["enable", "disable"]},
-                "transaction-based": {"required": False, "type": "str",
+                "transaction_based": {"required": False, "type": "str",
                                       "choices": ["enable", "disable"]},
-                "web-auth-cookie": {"required": False, "type": "str",
+                "web_auth_cookie": {"required": False, "type": "str",
                                     "choices": ["enable", "disable"]}
 
             }
@@ -339,15 +383,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_authentication(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_authentication(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_authentication(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_authentication_scheme.py b/lib/ansible/modules/network/fortios/fortios_authentication_scheme.py
index e190d62af9..df771bed37 100644
--- a/lib/ansible/modules/network/fortios/fortios_authentication_scheme.py
+++ b/lib/ansible/modules/network/fortios/fortios_authentication_scheme.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 from __future__ import (absolute_import, division, print_function)
-# Copyright 2018 Fortinet, Inc.
+# Copyright 2019 Fortinet, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_authentication_scheme
 short_description: Configure Authentication Schemes in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure authentication feature and scheme category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify authentication feature and scheme category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,58 +41,75 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     authentication_scheme:
         description:
             - Configure Authentication Schemes.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
-            domain-controller:
+            domain_controller:
                 description:
                     - Domain controller setting. Source user.domain-controller.name.
-            fsso-agent-for-ntlm:
+                type: str
+            fsso_agent_for_ntlm:
                 description:
                     - FSSO agent to use for NTLM authentication. Source user.fsso.name.
-            fsso-guest:
+                type: str
+            fsso_guest:
                 description:
                     - Enable/disable user fsso-guest authentication (default = disable).
+                type: str
                 choices:
                     - enable
                     - disable
-            kerberos-keytab:
+            kerberos_keytab:
                 description:
                     - Kerberos keytab setting. Source user.krb-keytab.name.
+                type: str
             method:
                 description:
                     - Authentication methods (default = basic).
+                type: str
                 choices:
                     - ntlm
                     - basic
@@ -109,29 +123,35 @@ options:
                 description:
                     - Authentication scheme name.
                 required: true
-            negotiate-ntlm:
+                type: str
+            negotiate_ntlm:
                 description:
                     - Enable/disable negotiate authentication for NTLM (default = disable).
+                type: str
                 choices:
                     - enable
                     - disable
-            require-tfa:
+            require_tfa:
                 description:
                     - Enable/disable two-factor authentication (default = disable).
+                type: str
                 choices:
                     - enable
                     - disable
-            ssh-ca:
+            ssh_ca:
                 description:
                     - SSH CA name. Source firewall.ssh.local-ca.name.
-            user-database:
+                type: str
+            user_database:
                 description:
                     - Authentication server to contain user information; "local" (default) or "123" (for LDAP).
+                type: list
                 suboptions:
                     name:
                         description:
                             - Authentication server name. Source system.datasource.name user.radius.name user.tacacs+.name user.ldap.name user.group.name.
                         required: true
+                        type: str
 '''
 
 EXAMPLES = '''
@@ -141,6 +161,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure Authentication Schemes.
     fortios_authentication_scheme:
@@ -148,18 +169,19 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       authentication_scheme:
-        state: "present"
-        domain-controller: "<your_own_value> (source user.domain-controller.name)"
-        fsso-agent-for-ntlm: "<your_own_value> (source user.fsso.name)"
-        fsso-guest: "enable"
-        kerberos-keytab: "<your_own_value> (source user.krb-keytab.name)"
+        domain_controller: "<your_own_value> (source user.domain-controller.name)"
+        fsso_agent_for_ntlm: "<your_own_value> (source user.fsso.name)"
+        fsso_guest: "enable"
+        kerberos_keytab: "<your_own_value> (source user.krb-keytab.name)"
         method: "ntlm"
         name: "default_name_8"
-        negotiate-ntlm: "enable"
-        require-tfa: "enable"
-        ssh-ca: "<your_own_value> (source firewall.ssh.local-ca.name)"
-        user-database:
+        negotiate_ntlm: "enable"
+        require_tfa: "enable"
+        ssh_ca: "<your_own_value> (source firewall.ssh.local-ca.name)"
+        user_database:
          -
             name: "default_name_13 (source system.datasource.name user.radius.name user.tacacs+.name user.ldap.name user.group.name)"
 '''
@@ -224,14 +246,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -239,14 +263,14 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_authentication_scheme_data(json):
-    option_list = ['domain-controller', 'fsso-agent-for-ntlm', 'fsso-guest',
-                   'kerberos-keytab', 'method', 'name',
-                   'negotiate-ntlm', 'require-tfa', 'ssh-ca',
-                   'user-database']
+    option_list = ['domain_controller', 'fsso_agent_for_ntlm', 'fsso_guest',
+                   'kerberos_keytab', 'method', 'name',
+                   'negotiate_ntlm', 'require_tfa', 'ssh_ca',
+                   'user_database']
     dictionary = {}
 
     for attribute in option_list:
@@ -256,64 +280,82 @@ def filter_authentication_scheme_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def authentication_scheme(data, fos):
     vdom = data['vdom']
+    state = data['state']
     authentication_scheme_data = data['authentication_scheme']
-    filtered_data = filter_authentication_scheme_data(authentication_scheme_data)
-    if authentication_scheme_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_authentication_scheme_data(authentication_scheme_data))
+
+    if state == "present":
         return fos.set('authentication',
                        'scheme',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif authentication_scheme_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('authentication',
                           'scheme',
                           mkey=filtered_data['name'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_authentication(data, fos):
-    login(data)
 
-    methodlist = ['authentication_scheme']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['authentication_scheme']:
+        resp = authentication_scheme(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "authentication_scheme": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
-                "domain-controller": {"required": False, "type": "str"},
-                "fsso-agent-for-ntlm": {"required": False, "type": "str"},
-                "fsso-guest": {"required": False, "type": "str",
+                "domain_controller": {"required": False, "type": "str"},
+                "fsso_agent_for_ntlm": {"required": False, "type": "str"},
+                "fsso_guest": {"required": False, "type": "str",
                                "choices": ["enable", "disable"]},
-                "kerberos-keytab": {"required": False, "type": "str"},
+                "kerberos_keytab": {"required": False, "type": "str"},
                 "method": {"required": False, "type": "str",
                            "choices": ["ntlm", "basic", "digest",
                                        "form", "negotiate", "fsso",
                                        "rsso", "ssh-publickey"]},
                 "name": {"required": True, "type": "str"},
-                "negotiate-ntlm": {"required": False, "type": "str",
+                "negotiate_ntlm": {"required": False, "type": "str",
                                    "choices": ["enable", "disable"]},
-                "require-tfa": {"required": False, "type": "str",
+                "require_tfa": {"required": False, "type": "str",
                                 "choices": ["enable", "disable"]},
-                "ssh-ca": {"required": False, "type": "str"},
-                "user-database": {"required": False, "type": "list",
+                "ssh_ca": {"required": False, "type": "str"},
+                "user_database": {"required": False, "type": "list",
                                   "options": {
                                       "name": {"required": True, "type": "str"}
                                   }}
@@ -324,15 +366,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_authentication(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_authentication(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_authentication(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_authentication_setting.py b/lib/ansible/modules/network/fortios/fortios_authentication_setting.py
index 839ffd2b87..b5b97c5f53 100644
--- a/lib/ansible/modules/network/fortios/fortios_authentication_setting.py
+++ b/lib/ansible/modules/network/fortios/fortios_authentication_setting.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 from __future__ import (absolute_import, division, print_function)
-# Copyright 2018 Fortinet, Inc.
+# Copyright 2019 Fortinet, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_authentication_setting
 short_description: Configure authentication setting in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure authentication feature and setting category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify authentication feature and setting category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,61 +41,79 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
+        type: bool
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
         type: bool
-        default: false
+        default: true
+        version_added: 2.9
     authentication_setting:
         description:
             - Configure authentication setting.
         default: null
+        type: dict
         suboptions:
-            active-auth-scheme:
+            active_auth_scheme:
                 description:
                     - Active authentication method (scheme name). Source authentication.scheme.name.
-            captive-portal:
+                type: str
+            captive_portal:
                 description:
                     - Captive portal host name. Source firewall.address.name.
-            captive-portal-ip:
+                type: str
+            captive_portal_ip:
                 description:
                     - Captive portal IP address.
-            captive-portal-ip6:
+                type: str
+            captive_portal_ip6:
                 description:
                     - Captive portal IPv6 address.
-            captive-portal-port:
+                type: str
+            captive_portal_port:
                 description:
                     - Captive portal port number (1 - 65535, default = 0).
-            captive-portal-type:
+                type: int
+            captive_portal_type:
                 description:
                     - Captive portal type.
+                type: str
                 choices:
                     - fqdn
                     - ip
-            captive-portal6:
+            captive_portal6:
                 description:
                     - IPv6 captive portal host name. Source firewall.address6.name.
-            sso-auth-scheme:
+                type: str
+            sso_auth_scheme:
                 description:
                     - Single-Sign-On authentication method (scheme name). Source authentication.scheme.name.
+                type: str
 '''
 
 EXAMPLES = '''
@@ -108,6 +123,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure authentication setting.
     fortios_authentication_setting:
@@ -115,15 +131,16 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
       authentication_setting:
-        active-auth-scheme: "<your_own_value> (source authentication.scheme.name)"
-        captive-portal: "<your_own_value> (source firewall.address.name)"
-        captive-portal-ip: "<your_own_value>"
-        captive-portal-ip6: "<your_own_value>"
-        captive-portal-port: "7"
-        captive-portal-type: "fqdn"
-        captive-portal6: "<your_own_value> (source firewall.address6.name)"
-        sso-auth-scheme: "<your_own_value> (source authentication.scheme.name)"
+        active_auth_scheme: "<your_own_value> (source authentication.scheme.name)"
+        captive_portal: "<your_own_value> (source firewall.address.name)"
+        captive_portal_ip: "<your_own_value>"
+        captive_portal_ip6: "<your_own_value>"
+        captive_portal_port: "7"
+        captive_portal_type: "fqdn"
+        captive_portal6: "<your_own_value> (source firewall.address6.name)"
+        sso_auth_scheme: "<your_own_value> (source authentication.scheme.name)"
 '''
 
 RETURN = '''
@@ -186,14 +203,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -201,13 +220,13 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_authentication_setting_data(json):
-    option_list = ['active-auth-scheme', 'captive-portal', 'captive-portal-ip',
-                   'captive-portal-ip6', 'captive-portal-port', 'captive-portal-type',
-                   'captive-portal6', 'sso-auth-scheme']
+    option_list = ['active_auth_scheme', 'captive_portal', 'captive_portal_ip',
+                   'captive_portal_ip6', 'captive_portal_port', 'captive_portal_type',
+                   'captive_portal6', 'sso_auth_scheme']
     dictionary = {}
 
     for attribute in option_list:
@@ -217,48 +236,65 @@ def filter_authentication_setting_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def authentication_setting(data, fos):
     vdom = data['vdom']
     authentication_setting_data = data['authentication_setting']
-    filtered_data = filter_authentication_setting_data(authentication_setting_data)
+    filtered_data = underscore_to_hyphen(filter_authentication_setting_data(authentication_setting_data))
+
     return fos.set('authentication',
                    'setting',
                    data=filtered_data,
                    vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_authentication(data, fos):
-    login(data)
 
-    methodlist = ['authentication_setting']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['authentication_setting']:
+        resp = authentication_setting(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
         "authentication_setting": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "active-auth-scheme": {"required": False, "type": "str"},
-                "captive-portal": {"required": False, "type": "str"},
-                "captive-portal-ip": {"required": False, "type": "str"},
-                "captive-portal-ip6": {"required": False, "type": "str"},
-                "captive-portal-port": {"required": False, "type": "int"},
-                "captive-portal-type": {"required": False, "type": "str",
+                "active_auth_scheme": {"required": False, "type": "str"},
+                "captive_portal": {"required": False, "type": "str"},
+                "captive_portal_ip": {"required": False, "type": "str"},
+                "captive_portal_ip6": {"required": False, "type": "str"},
+                "captive_portal_port": {"required": False, "type": "int"},
+                "captive_portal_type": {"required": False, "type": "str",
                                         "choices": ["fqdn", "ip"]},
-                "captive-portal6": {"required": False, "type": "str"},
-                "sso-auth-scheme": {"required": False, "type": "str"}
+                "captive_portal6": {"required": False, "type": "str"},
+                "sso_auth_scheme": {"required": False, "type": "str"}
 
             }
         }
@@ -266,15 +302,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_authentication(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_authentication(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_authentication(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_dlp_filepattern.py b/lib/ansible/modules/network/fortios/fortios_dlp_filepattern.py
index 19f9b03ed4..8633e10dcf 100644
--- a/lib/ansible/modules/network/fortios/fortios_dlp_filepattern.py
+++ b/lib/ansible/modules/network/fortios/fortios_dlp_filepattern.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 from __future__ import (absolute_import, division, print_function)
-# Copyright 2018 Fortinet, Inc.
+# Copyright 2019 Fortinet, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_dlp_filepattern
 short_description: Configure file patterns used by DLP blocking in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure dlp feature and filepattern category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify dlp feature and filepattern category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,50 +41,65 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     dlp_filepattern:
         description:
             - Configure file patterns used by DLP blocking.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
             comment:
                 description:
                     - Optional comments.
+                type: str
             entries:
                 description:
                     - Configure file patterns used by DLP blocking.
+                type: list
                 suboptions:
-                    file-type:
+                    file_type:
                         description:
                             - Select a file type.
+                        type: str
                         choices:
                             - 7z
                             - arj
@@ -148,9 +160,10 @@ options:
                             - chm
                             - iso
                             - crx
-                    filter-type:
+                    filter_type:
                         description:
                             - Filter by file name pattern or by file type.
+                        type: str
                         choices:
                             - pattern
                             - type
@@ -158,13 +171,16 @@ options:
                         description:
                             - Add a file name pattern.
                         required: true
+                        type: str
             id:
                 description:
                     - ID.
                 required: true
+                type: int
             name:
                 description:
                     - Name of table containing the file pattern list.
+                type: str
 '''
 
 EXAMPLES = '''
@@ -174,6 +190,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure file patterns used by DLP blocking.
     fortios_dlp_filepattern:
@@ -181,13 +198,14 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       dlp_filepattern:
-        state: "present"
         comment: "Optional comments."
         entries:
          -
-            file-type: "7z"
-            filter-type: "pattern"
+            file_type: "7z"
+            filter_type: "pattern"
             pattern: "<your_own_value>"
         id:  "8"
         name: "default_name_9"
@@ -253,14 +271,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
-
-fos = None
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
 
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -268,7 +288,7 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_dlp_filepattern_data(json):
@@ -283,52 +303,70 @@ def filter_dlp_filepattern_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def dlp_filepattern(data, fos):
     vdom = data['vdom']
+    state = data['state']
     dlp_filepattern_data = data['dlp_filepattern']
-    filtered_data = filter_dlp_filepattern_data(dlp_filepattern_data)
-    if dlp_filepattern_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_dlp_filepattern_data(dlp_filepattern_data))
+
+    if state == "present":
         return fos.set('dlp',
                        'filepattern',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif dlp_filepattern_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('dlp',
                           'filepattern',
                           mkey=filtered_data['id'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_dlp(data, fos):
-    login(data)
 
-    methodlist = ['dlp_filepattern']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['dlp_filepattern']:
+        resp = dlp_filepattern(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "dlp_filepattern": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
                 "comment": {"required": False, "type": "str"},
                 "entries": {"required": False, "type": "list",
                             "options": {
-                                "file-type": {"required": False, "type": "str",
+                                "file_type": {"required": False, "type": "str",
                                               "choices": ["7z", "arj", "cab",
                                                           "lzh", "rar", "tar",
                                                           "zip", "bzip", "gzip",
@@ -349,7 +387,7 @@ def main():
                                                           "msi", "mach-o", "dmg",
                                                           ".net", "xar", "chm",
                                                           "iso", "crx"]},
-                                "filter-type": {"required": False, "type": "str",
+                                "filter_type": {"required": False, "type": "str",
                                                 "choices": ["pattern", "type"]},
                                 "pattern": {"required": True, "type": "str"}
                             }},
@@ -362,15 +400,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_dlp(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_dlp(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_dlp(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_dlp_fp_doc_source.py b/lib/ansible/modules/network/fortios/fortios_dlp_fp_doc_source.py
index 481b9393d9..fea50a676d 100644
--- a/lib/ansible/modules/network/fortios/fortios_dlp_fp_doc_source.py
+++ b/lib/ansible/modules/network/fortios/fortios_dlp_fp_doc_source.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 from __future__ import (absolute_import, division, print_function)
-# Copyright 2018 Fortinet, Inc.
+# Copyright 2019 Fortinet, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -30,10 +27,10 @@ module: fortios_dlp_fp_doc_source
 short_description: Create a DLP fingerprint database by allowing the FortiGate to access a file server containing files from which to create fingerprints in
    Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure dlp feature and fp_doc_source category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify dlp feature and fp_doc_source category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -45,52 +42,68 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     dlp_fp_doc_source:
         description:
             - Create a DLP fingerprint database by allowing the FortiGate to access a file server containing files from which to create fingerprints.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
             date:
                 description:
                     - Day of the month on which to scan the server (1 - 31).
-            file-path:
+                type: int
+            file_path:
                 description:
                     - Path on the server to the fingerprint files (max 119 characters).
-            file-pattern:
+                type: str
+            file_pattern:
                 description:
                     - Files matching this pattern on the server are fingerprinted. Optionally use the * and ? wildcards.
-            keep-modified:
+                type: str
+            keep_modified:
                 description:
                     - Enable so that when a file is changed on the server the FortiGate keeps the old fingerprint and adds a new fingerprint to the database.
+                type: str
                 choices:
                     - enable
                     - disable
@@ -98,32 +111,38 @@ options:
                 description:
                     - Name of the DLP fingerprint database.
                 required: true
+                type: str
             password:
                 description:
                     - Password required to log into the file server.
+                type: str
             period:
                 description:
                     - Frequency for which the FortiGate checks the server for new or changed files.
+                type: str
                 choices:
                     - none
                     - daily
                     - weekly
                     - monthly
-            remove-deleted:
+            remove_deleted:
                 description:
                     - Enable to keep the fingerprint database up to date when a file is deleted from the server.
+                type: str
                 choices:
                     - enable
                     - disable
-            scan-on-creation:
+            scan_on_creation:
                 description:
                     - Enable to keep the fingerprint database up to date when a file is added or changed on the server.
+                type: str
                 choices:
                     - enable
                     - disable
-            scan-subdirectories:
+            scan_subdirectories:
                 description:
                     - Enable/disable scanning subdirectories to find files to create fingerprints from.
+                type: str
                 choices:
                     - enable
                     - disable
@@ -131,32 +150,40 @@ options:
                 description:
                     - Select a sensitivity or threat level for matches with this fingerprint database. Add sensitivities using fp-sensitivity. Source dlp
                       .fp-sensitivity.name.
+                type: str
             server:
                 description:
                     - IPv4 or IPv6 address of the server.
-            server-type:
+                type: str
+            server_type:
                 description:
                     - Protocol used to communicate with the file server. Currently only Samba (SMB) servers are supported.
+                type: str
                 choices:
                     - samba
-            tod-hour:
+            tod_hour:
                 description:
                     - Hour of the day on which to scan the server (0 - 23, default = 1).
-            tod-min:
+                type: int
+            tod_min:
                 description:
                     - Minute of the hour on which to scan the server (0 - 59).
+                type: int
             username:
                 description:
                     - User name required to log into the file server.
+                type: str
             vdom:
                 description:
                     - Select the VDOM that can communicate with the file server.
+                type: str
                 choices:
                     - mgmt
                     - current
             weekday:
                 description:
                     - Day of the week on which to scan the server.
+                type: str
                 choices:
                     - sunday
                     - monday
@@ -174,6 +201,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Create a DLP fingerprint database by allowing the FortiGate to access a file server containing files from which to create fingerprints.
     fortios_dlp_fp_doc_source:
@@ -181,23 +209,24 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       dlp_fp_doc_source:
-        state: "present"
         date: "3"
-        file-path: "<your_own_value>"
-        file-pattern: "<your_own_value>"
-        keep-modified: "enable"
+        file_path: "<your_own_value>"
+        file_pattern: "<your_own_value>"
+        keep_modified: "enable"
         name: "default_name_7"
         password: "<your_own_value>"
         period: "none"
-        remove-deleted: "enable"
-        scan-on-creation: "enable"
-        scan-subdirectories: "enable"
+        remove_deleted: "enable"
+        scan_on_creation: "enable"
+        scan_subdirectories: "enable"
         sensitivity: "<your_own_value> (source dlp.fp-sensitivity.name)"
         server: "192.168.100.40"
-        server-type: "samba"
-        tod-hour: "16"
-        tod-min: "17"
+        server_type: "samba"
+        tod_hour: "16"
+        tod_min: "17"
         username: "<your_own_value>"
         vdom: "mgmt"
         weekday: "sunday"
@@ -263,14 +292,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -278,15 +309,15 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_dlp_fp_doc_source_data(json):
-    option_list = ['date', 'file-path', 'file-pattern',
-                   'keep-modified', 'name', 'password',
-                   'period', 'remove-deleted', 'scan-on-creation',
-                   'scan-subdirectories', 'sensitivity', 'server',
-                   'server-type', 'tod-hour', 'tod-min',
+    option_list = ['date', 'file_path', 'file_pattern',
+                   'keep_modified', 'name', 'password',
+                   'period', 'remove_deleted', 'scan_on_creation',
+                   'scan_subdirectories', 'sensitivity', 'server',
+                   'server_type', 'tod_hour', 'tod_min',
                    'username', 'vdom', 'weekday']
     dictionary = {}
 
@@ -297,70 +328,88 @@ def filter_dlp_fp_doc_source_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def dlp_fp_doc_source(data, fos):
     vdom = data['vdom']
+    state = data['state']
     dlp_fp_doc_source_data = data['dlp_fp_doc_source']
-    filtered_data = filter_dlp_fp_doc_source_data(dlp_fp_doc_source_data)
-    if dlp_fp_doc_source_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_dlp_fp_doc_source_data(dlp_fp_doc_source_data))
+
+    if state == "present":
         return fos.set('dlp',
                        'fp-doc-source',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif dlp_fp_doc_source_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('dlp',
                           'fp-doc-source',
                           mkey=filtered_data['name'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_dlp(data, fos):
-    login(data)
 
-    methodlist = ['dlp_fp_doc_source']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['dlp_fp_doc_source']:
+        resp = dlp_fp_doc_source(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "dlp_fp_doc_source": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
                 "date": {"required": False, "type": "int"},
-                "file-path": {"required": False, "type": "str"},
-                "file-pattern": {"required": False, "type": "str"},
-                "keep-modified": {"required": False, "type": "str",
+                "file_path": {"required": False, "type": "str"},
+                "file_pattern": {"required": False, "type": "str"},
+                "keep_modified": {"required": False, "type": "str",
                                   "choices": ["enable", "disable"]},
                 "name": {"required": True, "type": "str"},
                 "password": {"required": False, "type": "str"},
                 "period": {"required": False, "type": "str",
                            "choices": ["none", "daily", "weekly",
                                        "monthly"]},
-                "remove-deleted": {"required": False, "type": "str",
+                "remove_deleted": {"required": False, "type": "str",
                                    "choices": ["enable", "disable"]},
-                "scan-on-creation": {"required": False, "type": "str",
+                "scan_on_creation": {"required": False, "type": "str",
                                      "choices": ["enable", "disable"]},
-                "scan-subdirectories": {"required": False, "type": "str",
+                "scan_subdirectories": {"required": False, "type": "str",
                                         "choices": ["enable", "disable"]},
                 "sensitivity": {"required": False, "type": "str"},
                 "server": {"required": False, "type": "str"},
-                "server-type": {"required": False, "type": "str",
+                "server_type": {"required": False, "type": "str",
                                 "choices": ["samba"]},
-                "tod-hour": {"required": False, "type": "int"},
-                "tod-min": {"required": False, "type": "int"},
+                "tod_hour": {"required": False, "type": "int"},
+                "tod_min": {"required": False, "type": "int"},
                 "username": {"required": False, "type": "str"},
                 "vdom": {"required": False, "type": "str",
                          "choices": ["mgmt", "current"]},
@@ -375,15 +424,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_dlp(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_dlp(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_dlp(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_dlp_fp_sensitivity.py b/lib/ansible/modules/network/fortios/fortios_dlp_fp_sensitivity.py
index 76cb3239af..6eb430ea0c 100644
--- a/lib/ansible/modules/network/fortios/fortios_dlp_fp_sensitivity.py
+++ b/lib/ansible/modules/network/fortios/fortios_dlp_fp_sensitivity.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 from __future__ import (absolute_import, division, print_function)
-# Copyright 2018 Fortinet, Inc.
+# Copyright 2019 Fortinet, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -30,10 +27,10 @@ module: fortios_dlp_fp_sensitivity
 short_description: Create self-explanatory DLP sensitivity levels to be used when setting sensitivity under config fp-doc-source in Fortinet's FortiOS and
    FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure dlp feature and fp_sensitivity category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify dlp feature and fp_sensitivity category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -45,44 +42,57 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     dlp_fp_sensitivity:
         description:
             - Create self-explanatory DLP sensitivity levels to be used when setting sensitivity under config fp-doc-source.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
             name:
                 description:
                     - DLP Sensitivity Levels.
                 required: true
+                type: str
 '''
 
 EXAMPLES = '''
@@ -92,6 +102,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Create self-explanatory DLP sensitivity levels to be used when setting sensitivity under config fp-doc-source.
     fortios_dlp_fp_sensitivity:
@@ -99,8 +110,9 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       dlp_fp_sensitivity:
-        state: "present"
         name: "default_name_3"
 '''
 
@@ -164,14 +176,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
-
-fos = None
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
 
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -179,7 +193,7 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_dlp_fp_sensitivity_data(json):
@@ -193,48 +207,66 @@ def filter_dlp_fp_sensitivity_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def dlp_fp_sensitivity(data, fos):
     vdom = data['vdom']
+    state = data['state']
     dlp_fp_sensitivity_data = data['dlp_fp_sensitivity']
-    filtered_data = filter_dlp_fp_sensitivity_data(dlp_fp_sensitivity_data)
-    if dlp_fp_sensitivity_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_dlp_fp_sensitivity_data(dlp_fp_sensitivity_data))
+
+    if state == "present":
         return fos.set('dlp',
                        'fp-sensitivity',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif dlp_fp_sensitivity_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('dlp',
                           'fp-sensitivity',
                           mkey=filtered_data['name'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_dlp(data, fos):
-    login(data)
 
-    methodlist = ['dlp_fp_sensitivity']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['dlp_fp_sensitivity']:
+        resp = dlp_fp_sensitivity(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "dlp_fp_sensitivity": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
                 "name": {"required": True, "type": "str"}
 
             }
@@ -243,15 +275,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_dlp(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_dlp(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_dlp(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_dlp_sensor.py b/lib/ansible/modules/network/fortios/fortios_dlp_sensor.py
index c43effb946..49cfa44e47 100644
--- a/lib/ansible/modules/network/fortios/fortios_dlp_sensor.py
+++ b/lib/ansible/modules/network/fortios/fortios_dlp_sensor.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 from __future__ import (absolute_import, division, print_function)
-# Copyright 2018 Fortinet, Inc.
+# Copyright 2019 Fortinet, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_dlp_sensor
 short_description: Configure DLP sensors in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure dlp feature and sensor category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify dlp feature and sensor category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,62 +41,79 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     dlp_sensor:
         description:
             - Configure DLP sensors.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
             comment:
                 description:
                     - Comment.
-            dlp-log:
+                type: str
+            dlp_log:
                 description:
                     - Enable/disable DLP logging.
+                type: str
                 choices:
                     - enable
                     - disable
-            extended-log:
+            extended_log:
                 description:
                     - Enable/disable extended logging for data leak prevention.
+                type: str
                 choices:
                     - enable
                     - disable
             filter:
                 description:
                     - Set up DLP filters for this sensor.
+                type: list
                 suboptions:
                     action:
                         description:
                             - Action to take with content that this DLP sensor matches.
+                        type: str
                         choices:
                             - allow
                             - log-only
@@ -108,24 +122,30 @@ options:
                     archive:
                         description:
                             - Enable/disable DLP archiving.
+                        type: str
                         choices:
                             - disable
                             - enable
-                    company-identifier:
+                    company_identifier:
                         description:
                             - Enter a company identifier watermark to match. Only watermarks that your company has placed on the files are matched.
+                        type: str
                     expiry:
                         description:
                             - Quarantine duration in days, hours, minutes format (dddhhmm).
-                    file-size:
+                        type: str
+                    file_size:
                         description:
                             - Match files this size or larger (0 - 4294967295 kbytes).
-                    file-type:
+                        type: int
+                    file_type:
                         description:
                             - Select the number of a DLP file pattern table to match. Source dlp.filepattern.id.
-                    filter-by:
+                        type: int
+                    filter_by:
                         description:
                             - Select the type of content to match.
+                        type: str
                         choices:
                             - credit-card
                             - ssn
@@ -135,27 +155,33 @@ options:
                             - fingerprint
                             - watermark
                             - encrypted
-                    fp-sensitivity:
+                    fp_sensitivity:
                         description:
                             - Select a DLP file pattern sensitivity to match.
+                        type: list
                         suboptions:
                             name:
                                 description:
                                     - Select a DLP sensitivity. Source dlp.fp-sensitivity.name.
                                 required: true
+                                type: str
                     id:
                         description:
                             - ID.
                         required: true
-                    match-percentage:
+                        type: int
+                    match_percentage:
                         description:
                             - Percentage of fingerprints in the fingerprint databases designated with the selected fp-sensitivity to match.
+                        type: int
                     name:
                         description:
                             - Filter name.
+                        type: str
                     proto:
                         description:
                             - Check messages or files over one or more of these protocols.
+                        type: str
                         choices:
                             - smtp
                             - pop3
@@ -172,9 +198,11 @@ options:
                     regexp:
                         description:
                             - Enter a regular expression to match (max. 255 characters).
+                        type: str
                     severity:
                         description:
                             - Select the severity or threat level that matches this filter.
+                        type: str
                         choices:
                             - info
                             - low
@@ -184,18 +212,21 @@ options:
                     type:
                         description:
                             - Select whether to check the content of messages (an email message) or files (downloaded files or email attachments).
+                        type: str
                         choices:
                             - file
                             - message
-            flow-based:
+            flow_based:
                 description:
                     - Enable/disable flow-based DLP.
+                type: str
                 choices:
                     - enable
                     - disable
-            full-archive-proto:
+            full_archive_proto:
                 description:
                     - Protocols to always content archive.
+                type: str
                 choices:
                     - smtp
                     - pop3
@@ -209,9 +240,10 @@ options:
                     - mm3
                     - mm4
                     - mm7
-            nac-quar-log:
+            nac_quar_log:
                 description:
                     - Enable/disable NAC quarantine logging.
+                type: str
                 choices:
                     - enable
                     - disable
@@ -219,15 +251,19 @@ options:
                 description:
                     - Name of the DLP sensor.
                 required: true
+                type: str
             options:
                 description:
                     - Configure DLP options.
-            replacemsg-group:
+                type: str
+            replacemsg_group:
                 description:
                     - Replacement message group used by this DLP sensor. Source system.replacemsg-group.name.
-            summary-proto:
+                type: str
+            summary_proto:
                 description:
                     - Protocols to always log summary.
+                type: str
                 choices:
                     - smtp
                     - pop3
@@ -250,6 +286,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure DLP sensors.
     fortios_dlp_sensor:
@@ -257,37 +294,38 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       dlp_sensor:
-        state: "present"
         comment: "Comment."
-        dlp-log: "enable"
-        extended-log: "enable"
+        dlp_log: "enable"
+        extended_log: "enable"
         filter:
          -
             action: "allow"
             archive: "disable"
-            company-identifier:  "myId_9"
+            company_identifier:  "myId_9"
             expiry: "<your_own_value>"
-            file-size: "11"
-            file-type: "12 (source dlp.filepattern.id)"
-            filter-by: "credit-card"
-            fp-sensitivity:
+            file_size: "11"
+            file_type: "12 (source dlp.filepattern.id)"
+            filter_by: "credit-card"
+            fp_sensitivity:
              -
                 name: "default_name_15 (source dlp.fp-sensitivity.name)"
             id:  "16"
-            match-percentage: "17"
+            match_percentage: "17"
             name: "default_name_18"
             proto: "smtp"
             regexp: "<your_own_value>"
             severity: "info"
             type: "file"
-        flow-based: "enable"
-        full-archive-proto: "smtp"
-        nac-quar-log: "enable"
+        flow_based: "enable"
+        full_archive_proto: "smtp"
+        nac_quar_log: "enable"
         name: "default_name_26"
         options: "<your_own_value>"
-        replacemsg-group: "<your_own_value> (source system.replacemsg-group.name)"
-        summary-proto: "smtp"
+        replacemsg_group: "<your_own_value> (source system.replacemsg-group.name)"
+        summary_proto: "smtp"
 '''
 
 RETURN = '''
@@ -350,14 +388,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -365,14 +405,14 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_dlp_sensor_data(json):
-    option_list = ['comment', 'dlp-log', 'extended-log',
-                   'filter', 'flow-based', 'full-archive-proto',
-                   'nac-quar-log', 'name', 'options',
-                   'replacemsg-group', 'summary-proto']
+    option_list = ['comment', 'dlp_log', 'extended_log',
+                   'filter', 'flow_based', 'full_archive_proto',
+                   'nac_quar_log', 'name', 'options',
+                   'replacemsg_group', 'summary_proto']
     dictionary = {}
 
     for attribute in option_list:
@@ -382,52 +422,70 @@ def filter_dlp_sensor_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def dlp_sensor(data, fos):
     vdom = data['vdom']
+    state = data['state']
     dlp_sensor_data = data['dlp_sensor']
-    filtered_data = filter_dlp_sensor_data(dlp_sensor_data)
-    if dlp_sensor_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_dlp_sensor_data(dlp_sensor_data))
+
+    if state == "present":
         return fos.set('dlp',
                        'sensor',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif dlp_sensor_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('dlp',
                           'sensor',
                           mkey=filtered_data['name'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_dlp(data, fos):
-    login(data)
 
-    methodlist = ['dlp_sensor']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['dlp_sensor']:
+        resp = dlp_sensor(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "dlp_sensor": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
                 "comment": {"required": False, "type": "str"},
-                "dlp-log": {"required": False, "type": "str",
+                "dlp_log": {"required": False, "type": "str",
                             "choices": ["enable", "disable"]},
-                "extended-log": {"required": False, "type": "str",
+                "extended_log": {"required": False, "type": "str",
                                  "choices": ["enable", "disable"]},
                 "filter": {"required": False, "type": "list",
                            "options": {
@@ -436,20 +494,20 @@ def main():
                                                       "quarantine-ip"]},
                                "archive": {"required": False, "type": "str",
                                            "choices": ["disable", "enable"]},
-                               "company-identifier": {"required": False, "type": "str"},
+                               "company_identifier": {"required": False, "type": "str"},
                                "expiry": {"required": False, "type": "str"},
-                               "file-size": {"required": False, "type": "int"},
-                               "file-type": {"required": False, "type": "int"},
-                               "filter-by": {"required": False, "type": "str",
+                               "file_size": {"required": False, "type": "int"},
+                               "file_type": {"required": False, "type": "int"},
+                               "filter_by": {"required": False, "type": "str",
                                              "choices": ["credit-card", "ssn", "regexp",
                                                          "file-type", "file-size", "fingerprint",
                                                          "watermark", "encrypted"]},
-                               "fp-sensitivity": {"required": False, "type": "list",
+                               "fp_sensitivity": {"required": False, "type": "list",
                                                   "options": {
                                                       "name": {"required": True, "type": "str"}
                                                   }},
                                "id": {"required": True, "type": "int"},
-                               "match-percentage": {"required": False, "type": "int"},
+                               "match_percentage": {"required": False, "type": "int"},
                                "name": {"required": False, "type": "str"},
                                "proto": {"required": False, "type": "str",
                                          "choices": ["smtp", "pop3", "imap",
@@ -463,20 +521,19 @@ def main():
                                "type": {"required": False, "type": "str",
                                         "choices": ["file", "message"]}
                            }},
-                "flow-based": {"required": False, "type": "str",
+                "flow_based": {"required": False, "type": "str",
                                "choices": ["enable", "disable"]},
-                "full-archive-proto": {"required": False, "type": "str",
+                "full_archive_proto": {"required": False, "type": "str",
                                        "choices": ["smtp", "pop3", "imap",
                                                    "http-get", "http-post", "ftp",
                                                    "nntp", "mapi", "mm1",
                                                    "mm3", "mm4", "mm7"]},
-                "nac-quar-log": {"required": False, "type": "str",
+                "nac_quar_log": {"required": False, "type": "str",
                                  "choices": ["enable", "disable"]},
                 "name": {"required": True, "type": "str"},
-                "options": {"required": False, "type": "str",
-                            "choices": []},
-                "replacemsg-group": {"required": False, "type": "str"},
-                "summary-proto": {"required": False, "type": "str",
+                "options": {"required": False, "type": "str"},
+                "replacemsg_group": {"required": False, "type": "str"},
+                "summary_proto": {"required": False, "type": "str",
                                   "choices": ["smtp", "pop3", "imap",
                                               "http-get", "http-post", "ftp",
                                               "nntp", "mapi", "mm1",
@@ -488,15 +545,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_dlp(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_dlp(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_dlp(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_dlp_settings.py b/lib/ansible/modules/network/fortios/fortios_dlp_settings.py
index 5dc22a24ae..3b6fd802d6 100644
--- a/lib/ansible/modules/network/fortios/fortios_dlp_settings.py
+++ b/lib/ansible/modules/network/fortios/fortios_dlp_settings.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 from __future__ import (absolute_import, division, print_function)
-# Copyright 2018 Fortinet, Inc.
+# Copyright 2019 Fortinet, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_dlp_settings
 short_description: Designate logical storage for DLP fingerprint database in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure dlp feature and settings category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify dlp feature and settings category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,43 +41,56 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
+        type: bool
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
         type: bool
-        default: false
+        default: true
+        version_added: 2.9
     dlp_settings:
         description:
             - Designate logical storage for DLP fingerprint database.
         default: null
+        type: dict
         suboptions:
-            cache-mem-percent:
+            cache_mem_percent:
                 description:
                     - Maximum percentage of available memory allocated to caching (1 - 15%).
-            chunk-size:
+                type: int
+            chunk_size:
                 description:
                     - Maximum fingerprint chunk size.  **Changing will flush the entire database**.
-            db-mode:
+                type: int
+            db_mode:
                 description:
                     - Behaviour when the maximum size is reached.
+                type: str
                 choices:
                     - stop-adding
                     - remove-modified-then-oldest
@@ -88,9 +98,11 @@ options:
             size:
                 description:
                     - Maximum total size of files within the storage (MB).
-            storage-device:
+                type: int
+            storage_device:
                 description:
                     - Storage device name. Source system.storage.name.
+                type: str
 '''
 
 EXAMPLES = '''
@@ -100,6 +112,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Designate logical storage for DLP fingerprint database.
     fortios_dlp_settings:
@@ -107,12 +120,13 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
       dlp_settings:
-        cache-mem-percent: "3"
-        chunk-size: "4"
-        db-mode: "stop-adding"
+        cache_mem_percent: "3"
+        chunk_size: "4"
+        db_mode: "stop-adding"
         size: "6"
-        storage-device: "<your_own_value> (source system.storage.name)"
+        storage_device: "<your_own_value> (source system.storage.name)"
 '''
 
 RETURN = '''
@@ -175,14 +189,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -190,12 +206,12 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_dlp_settings_data(json):
-    option_list = ['cache-mem-percent', 'chunk-size', 'db-mode',
-                   'size', 'storage-device']
+    option_list = ['cache_mem_percent', 'chunk_size', 'db_mode',
+                   'size', 'storage_device']
     dictionary = {}
 
     for attribute in option_list:
@@ -205,45 +221,62 @@ def filter_dlp_settings_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def dlp_settings(data, fos):
     vdom = data['vdom']
     dlp_settings_data = data['dlp_settings']
-    filtered_data = filter_dlp_settings_data(dlp_settings_data)
+    filtered_data = underscore_to_hyphen(filter_dlp_settings_data(dlp_settings_data))
+
     return fos.set('dlp',
                    'settings',
                    data=filtered_data,
                    vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_dlp(data, fos):
-    login(data)
 
-    methodlist = ['dlp_settings']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['dlp_settings']:
+        resp = dlp_settings(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
         "dlp_settings": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "cache-mem-percent": {"required": False, "type": "int"},
-                "chunk-size": {"required": False, "type": "int"},
-                "db-mode": {"required": False, "type": "str",
+                "cache_mem_percent": {"required": False, "type": "int"},
+                "chunk_size": {"required": False, "type": "int"},
+                "db_mode": {"required": False, "type": "str",
                             "choices": ["stop-adding", "remove-modified-then-oldest", "remove-oldest"]},
                 "size": {"required": False, "type": "int"},
-                "storage-device": {"required": False, "type": "str"}
+                "storage_device": {"required": False, "type": "str"}
 
             }
         }
@@ -251,15 +284,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_dlp(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_dlp(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_dlp(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_dnsfilter_domain_filter.py b/lib/ansible/modules/network/fortios/fortios_dnsfilter_domain_filter.py
index 60f2f45fab..1d24e7f465 100644
--- a/lib/ansible/modules/network/fortios/fortios_dnsfilter_domain_filter.py
+++ b/lib/ansible/modules/network/fortios/fortios_dnsfilter_domain_filter.py
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_dnsfilter_domain_filter
 short_description: Configure DNS domain filters in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure dnsfilter feature and domain_filter category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify dnsfilter feature and domain_filter category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,50 +41,65 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     dnsfilter_domain_filter:
         description:
             - Configure DNS domain filters.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
             comment:
                 description:
                     - Optional comments.
+                type: str
             entries:
                 description:
                     - DNS domain filter entries.
+                type: list
                 suboptions:
                     action:
                         description:
                             - Action to take for domain filter matches.
+                        type: str
                         choices:
                             - block
                             - allow
@@ -95,19 +107,23 @@ options:
                     domain:
                         description:
                             - Domain entries to be filtered.
+                        type: str
                     id:
                         description:
                             - Id.
                         required: true
+                        type: int
                     status:
                         description:
                             - Enable/disable this domain filter.
+                        type: str
                         choices:
                             - enable
                             - disable
                     type:
                         description:
                             - DNS domain filter type.
+                        type: str
                         choices:
                             - simple
                             - regex
@@ -116,9 +132,11 @@ options:
                 description:
                     - ID.
                 required: true
+                type: int
             name:
                 description:
                     - Name of table.
+                type: str
 '''
 
 EXAMPLES = '''
@@ -128,6 +146,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure DNS domain filters.
     fortios_dnsfilter_domain_filter:
@@ -135,8 +154,9 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       dnsfilter_domain_filter:
-        state: "present"
         comment: "Optional comments."
         entries:
          -
@@ -209,14 +229,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
-
-fos = None
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
 
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -224,7 +246,7 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_dnsfilter_domain_filter_data(json):
@@ -239,48 +261,66 @@ def filter_dnsfilter_domain_filter_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def dnsfilter_domain_filter(data, fos):
     vdom = data['vdom']
+    state = data['state']
     dnsfilter_domain_filter_data = data['dnsfilter_domain_filter']
-    filtered_data = filter_dnsfilter_domain_filter_data(dnsfilter_domain_filter_data)
-    if dnsfilter_domain_filter_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_dnsfilter_domain_filter_data(dnsfilter_domain_filter_data))
+
+    if state == "present":
         return fos.set('dnsfilter',
                        'domain-filter',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif dnsfilter_domain_filter_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('dnsfilter',
                           'domain-filter',
                           mkey=filtered_data['id'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_dnsfilter(data, fos):
-    login(data)
 
-    methodlist = ['dnsfilter_domain_filter']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['dnsfilter_domain_filter']:
+        resp = dnsfilter_domain_filter(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "dnsfilter_domain_filter": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
                 "comment": {"required": False, "type": "str"},
                 "entries": {"required": False, "type": "list",
                             "options": {
@@ -302,15 +342,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_dnsfilter(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_dnsfilter(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_dnsfilter(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_dnsfilter_profile.py b/lib/ansible/modules/network/fortios/fortios_dnsfilter_profile.py
index 7293f07d40..b5d53bc404 100644
--- a/lib/ansible/modules/network/fortios/fortios_dnsfilter_profile.py
+++ b/lib/ansible/modules/network/fortios/fortios_dnsfilter_profile.py
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_dnsfilter_profile
 short_description: Configure DNS domain filter profiles in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure dnsfilter feature and profile category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify dnsfilter feature and profile category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,106 +41,133 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     dnsfilter_profile:
         description:
             - Configure DNS domain filter profiles.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
-            block-action:
+            block_action:
                 description:
                     - Action to take for blocked domains.
+                type: str
                 choices:
                     - block
                     - redirect
-            block-botnet:
+            block_botnet:
                 description:
                     - Enable/disable blocking botnet C&C DNS lookups.
+                type: str
                 choices:
                     - disable
                     - enable
             comment:
                 description:
                     - Comment.
-            domain-filter:
+                type: str
+            domain_filter:
                 description:
                     - Domain filter settings.
+                type: dict
                 suboptions:
-                    domain-filter-table:
+                    domain_filter_table:
                         description:
                             - DNS domain filter table ID. Source dnsfilter.domain-filter.id.
-            external-ip-blocklist:
+                        type: int
+            external_ip_blocklist:
                 description:
                     - One or more external IP block lists.
+                type: list
                 suboptions:
                     name:
                         description:
                             - External domain block list name. Source system.external-resource.name.
                         required: true
-            ftgd-dns:
+                        type: str
+            ftgd_dns:
                 description:
                     - FortiGuard DNS Filter settings.
+                type: dict
                 suboptions:
                     filters:
                         description:
                             - FortiGuard DNS domain filters.
+                        type: list
                         suboptions:
                             action:
                                 description:
                                     - Action to take for DNS requests matching the category.
+                                type: str
                                 choices:
                                     - block
                                     - monitor
                             category:
                                 description:
                                     - Category number.
+                                type: int
                             id:
                                 description:
                                     - ID number.
                                 required: true
+                                type: int
                             log:
                                 description:
                                     - Enable/disable DNS filter logging for this DNS profile.
+                                type: str
                                 choices:
                                     - enable
                                     - disable
                     options:
                         description:
                             - FortiGuard DNS filter options.
+                        type: str
                         choices:
                             - error-allow
                             - ftgd-disable
-            log-all-domain:
+            log_all_domain:
                 description:
                     - Enable/disable logging of all domains visited (detailed DNS logging).
+                type: str
                 choices:
                     - enable
                     - disable
@@ -151,30 +175,36 @@ options:
                 description:
                     - Profile name.
                 required: true
-            redirect-portal:
+                type: str
+            redirect_portal:
                 description:
                     - IP address of the SDNS redirect portal.
-            safe-search:
+                type: str
+            safe_search:
                 description:
                     - Enable/disable Google, Bing, and YouTube safe search.
+                type: str
                 choices:
                     - disable
                     - enable
-            sdns-domain-log:
+            sdns_domain_log:
                 description:
                     - Enable/disable domain filtering and botnet domain logging.
+                type: str
                 choices:
                     - enable
                     - disable
-            sdns-ftgd-err-log:
+            sdns_ftgd_err_log:
                 description:
                     - Enable/disable FortiGuard SDNS rating error logging.
+                type: str
                 choices:
                     - enable
                     - disable
-            youtube-restrict:
+            youtube_restrict:
                 description:
                     - Set safe search for YouTube restriction level.
+                type: str
                 choices:
                     - strict
                     - moderate
@@ -187,6 +217,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure DNS domain filter profiles.
     fortios_dnsfilter_profile:
@@ -194,17 +225,18 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       dnsfilter_profile:
-        state: "present"
-        block-action: "block"
-        block-botnet: "disable"
+        block_action: "block"
+        block_botnet: "disable"
         comment: "Comment."
-        domain-filter:
-            domain-filter-table: "7 (source dnsfilter.domain-filter.id)"
-        external-ip-blocklist:
+        domain_filter:
+            domain_filter_table: "7 (source dnsfilter.domain-filter.id)"
+        external_ip_blocklist:
          -
             name: "default_name_9 (source system.external-resource.name)"
-        ftgd-dns:
+        ftgd_dns:
             filters:
              -
                 action: "block"
@@ -212,13 +244,13 @@ EXAMPLES = '''
                 id:  "14"
                 log: "enable"
             options: "error-allow"
-        log-all-domain: "enable"
+        log_all_domain: "enable"
         name: "default_name_18"
-        redirect-portal: "<your_own_value>"
-        safe-search: "disable"
-        sdns-domain-log: "enable"
-        sdns-ftgd-err-log: "enable"
-        youtube-restrict: "strict"
+        redirect_portal: "<your_own_value>"
+        safe_search: "disable"
+        sdns_domain_log: "enable"
+        sdns_ftgd_err_log: "enable"
+        youtube_restrict: "strict"
 '''
 
 RETURN = '''
@@ -281,14 +313,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -296,15 +330,15 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_dnsfilter_profile_data(json):
-    option_list = ['block-action', 'block-botnet', 'comment',
-                   'domain-filter', 'external-ip-blocklist', 'ftgd-dns',
-                   'log-all-domain', 'name', 'redirect-portal',
-                   'safe-search', 'sdns-domain-log', 'sdns-ftgd-err-log',
-                   'youtube-restrict']
+    option_list = ['block_action', 'block_botnet', 'comment',
+                   'domain_filter', 'external_ip_blocklist', 'ftgd_dns',
+                   'log_all_domain', 'name', 'redirect_portal',
+                   'safe_search', 'sdns_domain_log', 'sdns_ftgd_err_log',
+                   'youtube_restrict']
     dictionary = {}
 
     for attribute in option_list:
@@ -314,62 +348,80 @@ def filter_dnsfilter_profile_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def dnsfilter_profile(data, fos):
     vdom = data['vdom']
+    state = data['state']
     dnsfilter_profile_data = data['dnsfilter_profile']
-    filtered_data = filter_dnsfilter_profile_data(dnsfilter_profile_data)
-    if dnsfilter_profile_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_dnsfilter_profile_data(dnsfilter_profile_data))
+
+    if state == "present":
         return fos.set('dnsfilter',
                        'profile',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif dnsfilter_profile_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('dnsfilter',
                           'profile',
                           mkey=filtered_data['name'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_dnsfilter(data, fos):
-    login(data)
 
-    methodlist = ['dnsfilter_profile']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['dnsfilter_profile']:
+        resp = dnsfilter_profile(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "dnsfilter_profile": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
-                "block-action": {"required": False, "type": "str",
+                "block_action": {"required": False, "type": "str",
                                  "choices": ["block", "redirect"]},
-                "block-botnet": {"required": False, "type": "str",
+                "block_botnet": {"required": False, "type": "str",
                                  "choices": ["disable", "enable"]},
                 "comment": {"required": False, "type": "str"},
-                "domain-filter": {"required": False, "type": "dict",
+                "domain_filter": {"required": False, "type": "dict",
                                   "options": {
-                                      "domain-filter-table": {"required": False, "type": "int"}
+                                      "domain_filter_table": {"required": False, "type": "int"}
                                   }},
-                "external-ip-blocklist": {"required": False, "type": "list",
+                "external_ip_blocklist": {"required": False, "type": "list",
                                           "options": {
                                               "name": {"required": True, "type": "str"}
                                           }},
-                "ftgd-dns": {"required": False, "type": "dict",
+                "ftgd_dns": {"required": False, "type": "dict",
                              "options": {
                                  "filters": {"required": False, "type": "list",
                                              "options": {
@@ -383,17 +435,17 @@ def main():
                                  "options": {"required": False, "type": "str",
                                              "choices": ["error-allow", "ftgd-disable"]}
                              }},
-                "log-all-domain": {"required": False, "type": "str",
+                "log_all_domain": {"required": False, "type": "str",
                                    "choices": ["enable", "disable"]},
                 "name": {"required": True, "type": "str"},
-                "redirect-portal": {"required": False, "type": "str"},
-                "safe-search": {"required": False, "type": "str",
+                "redirect_portal": {"required": False, "type": "str"},
+                "safe_search": {"required": False, "type": "str",
                                 "choices": ["disable", "enable"]},
-                "sdns-domain-log": {"required": False, "type": "str",
+                "sdns_domain_log": {"required": False, "type": "str",
                                     "choices": ["enable", "disable"]},
-                "sdns-ftgd-err-log": {"required": False, "type": "str",
+                "sdns_ftgd_err_log": {"required": False, "type": "str",
                                       "choices": ["enable", "disable"]},
-                "youtube-restrict": {"required": False, "type": "str",
+                "youtube_restrict": {"required": False, "type": "str",
                                      "choices": ["strict", "moderate"]}
 
             }
@@ -402,15 +454,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_dnsfilter(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_dnsfilter(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_dnsfilter(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_endpoint_control_client.py b/lib/ansible/modules/network/fortios/fortios_endpoint_control_client.py
index 46f7b703ba..25c474dd69 100644
--- a/lib/ansible/modules/network/fortios/fortios_endpoint_control_client.py
+++ b/lib/ansible/modules/network/fortios/fortios_endpoint_control_client.py
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_endpoint_control_client
 short_description: Configure endpoint control client lists in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure endpoint_control feature and client category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify endpoint_control feature and client category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,59 +41,77 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     endpoint_control_client:
         description:
             - Configure endpoint control client lists.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
-            ad-groups:
+            ad_groups:
                 description:
                     - Endpoint client AD logon groups.
-            ftcl-uid:
+                type: str
+            ftcl_uid:
                 description:
                     - Endpoint FortiClient UID.
+                type: str
             id:
                 description:
                     - Endpoint client ID.
                 required: true
+                type: int
             info:
                 description:
                     - Endpoint client information.
-            src-ip:
+                type: str
+            src_ip:
                 description:
                     - Endpoint client IP address.
-            src-mac:
+                type: str
+            src_mac:
                 description:
                     - Endpoint client MAC address.
+                type: str
 '''
 
 EXAMPLES = '''
@@ -106,6 +121,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure endpoint control client lists.
     fortios_endpoint_control_client:
@@ -113,14 +129,15 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       endpoint_control_client:
-        state: "present"
-        ad-groups: "<your_own_value>"
-        ftcl-uid: "<your_own_value>"
+        ad_groups: "<your_own_value>"
+        ftcl_uid: "<your_own_value>"
         id:  "5"
         info: "<your_own_value>"
-        src-ip: "<your_own_value>"
-        src-mac: "<your_own_value>"
+        src_ip: "<your_own_value>"
+        src_mac: "<your_own_value>"
 '''
 
 RETURN = '''
@@ -183,14 +200,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
-
-fos = None
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
 
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -198,12 +217,12 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_endpoint_control_client_data(json):
-    option_list = ['ad-groups', 'ftcl-uid', 'id',
-                   'info', 'src-ip', 'src-mac']
+    option_list = ['ad_groups', 'ftcl_uid', 'id',
+                   'info', 'src_ip', 'src_mac']
     dictionary = {}
 
     for attribute in option_list:
@@ -213,54 +232,72 @@ def filter_endpoint_control_client_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def endpoint_control_client(data, fos):
     vdom = data['vdom']
+    state = data['state']
     endpoint_control_client_data = data['endpoint_control_client']
-    filtered_data = filter_endpoint_control_client_data(endpoint_control_client_data)
-    if endpoint_control_client_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_endpoint_control_client_data(endpoint_control_client_data))
+
+    if state == "present":
         return fos.set('endpoint-control',
                        'client',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif endpoint_control_client_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('endpoint-control',
                           'client',
                           mkey=filtered_data['id'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_endpoint_control(data, fos):
-    login(data)
 
-    methodlist = ['endpoint_control_client']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['endpoint_control_client']:
+        resp = endpoint_control_client(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "endpoint_control_client": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
-                "ad-groups": {"required": False, "type": "str"},
-                "ftcl-uid": {"required": False, "type": "str"},
+                "ad_groups": {"required": False, "type": "str"},
+                "ftcl_uid": {"required": False, "type": "str"},
                 "id": {"required": True, "type": "int"},
                 "info": {"required": False, "type": "str"},
-                "src-ip": {"required": False, "type": "str"},
-                "src-mac": {"required": False, "type": "str"}
+                "src_ip": {"required": False, "type": "str"},
+                "src_mac": {"required": False, "type": "str"}
 
             }
         }
@@ -268,15 +305,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_endpoint_control(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_endpoint_control(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_endpoint_control(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/test/sanity/ignore.txt b/test/sanity/ignore.txt
index 9291025c32..cabb65470a 100644
--- a/test/sanity/ignore.txt
+++ b/test/sanity/ignore.txt
@@ -3691,42 +3691,8 @@ lib/ansible/modules/network/fortimanager/fmgr_secprof_wanopt.py validate-modules
 lib/ansible/modules/network/fortimanager/fmgr_secprof_web.py validate-modules:E337
 lib/ansible/modules/network/fortios/fortios_address.py validate-modules:E324
 lib/ansible/modules/network/fortios/fortios_address.py validate-modules:E338
-lib/ansible/modules/network/fortios/fortios_antivirus_heuristic.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_antivirus_profile.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_antivirus_profile.py validate-modules:E337
 lib/ansible/modules/network/fortios/fortios_antivirus_quarantine.py validate-modules:E326
-lib/ansible/modules/network/fortios/fortios_antivirus_quarantine.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_antivirus_quarantine.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_antivirus_settings.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_antivirus_settings.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_application_custom.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_application_group.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_application_list.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_application_list.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_application_name.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_application_name.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_application_rule_settings.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_authentication_rule.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_authentication_rule.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_authentication_scheme.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_authentication_scheme.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_authentication_setting.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_authentication_setting.py validate-modules:E337
 lib/ansible/modules/network/fortios/fortios_config.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_dlp_filepattern.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_dlp_filepattern.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_dlp_fp_doc_source.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_dlp_fp_doc_source.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_dlp_fp_sensitivity.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_dlp_sensor.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_dlp_sensor.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_dlp_settings.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_dlp_settings.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_dnsfilter_domain_filter.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_dnsfilter_profile.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_dnsfilter_profile.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_endpoint_control_client.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_endpoint_control_client.py validate-modules:E337
 lib/ansible/modules/network/fortios/fortios_endpoint_control_forticlient_ems.py validate-modules:E336
 lib/ansible/modules/network/fortios/fortios_endpoint_control_forticlient_ems.py validate-modules:E337
 lib/ansible/modules/network/fortios/fortios_endpoint_control_forticlient_registration_sync.py validate-modules:E336
diff --git a/test/units/modules/network/fortios/test_fortios_antivirus_heuristic.py b/test/units/modules/network/fortios/test_fortios_antivirus_heuristic.py
new file mode 100644
index 0000000000..83073e4864
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_antivirus_heuristic.py
@@ -0,0 +1,151 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_antivirus_heuristic
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_antivirus_heuristic.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_antivirus_heuristic_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'antivirus_heuristic': {
+            'mode': 'pass'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_antivirus_heuristic.fortios_antivirus(input_data, fos_instance)
+
+    expected_data = {
+        'mode': 'pass'
+    }
+
+    set_method_mock.assert_called_with('antivirus', 'heuristic', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_antivirus_heuristic_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'antivirus_heuristic': {
+            'mode': 'pass'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_antivirus_heuristic.fortios_antivirus(input_data, fos_instance)
+
+    expected_data = {
+        'mode': 'pass'
+    }
+
+    set_method_mock.assert_called_with('antivirus', 'heuristic', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_antivirus_heuristic_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'antivirus_heuristic': {
+            'mode': 'pass'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_antivirus_heuristic.fortios_antivirus(input_data, fos_instance)
+
+    expected_data = {
+        'mode': 'pass'
+    }
+
+    set_method_mock.assert_called_with('antivirus', 'heuristic', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_antivirus_heuristic_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'antivirus_heuristic': {
+            'random_attribute_not_valid': 'tag',
+            'mode': 'pass'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_antivirus_heuristic.fortios_antivirus(input_data, fos_instance)
+
+    expected_data = {
+        'mode': 'pass'
+    }
+
+    set_method_mock.assert_called_with('antivirus', 'heuristic', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_antivirus_profile.py b/test/units/modules/network/fortios/test_fortios_antivirus_profile.py
new file mode 100644
index 0000000000..d0a804a4ab
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_antivirus_profile.py
@@ -0,0 +1,339 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_antivirus_profile
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_antivirus_profile.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_antivirus_profile_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'antivirus_profile': {
+            'analytics_bl_filetype': '3',
+            'analytics_db': 'disable',
+            'analytics_max_upload': '5',
+            'analytics_wl_filetype': '6',
+            'av_block_log': 'enable',
+            'av_virus_log': 'enable',
+            'comment': 'Comment.',
+            'extended_log': 'enable',
+            'ftgd_analytics': 'disable',
+            'inspection_mode': 'proxy',
+            'mobile_malware_db': 'disable',
+            'name': 'default_name_14',
+            'replacemsg_group': 'test_value_15',
+            'scan_mode': 'quick',
+
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_antivirus_profile.fortios_antivirus(input_data, fos_instance)
+
+    expected_data = {
+        'analytics-bl-filetype': '3',
+        'analytics-db': 'disable',
+        'analytics-max-upload': '5',
+        'analytics-wl-filetype': '6',
+        'av-block-log': 'enable',
+        'av-virus-log': 'enable',
+        'comment': 'Comment.',
+        'extended-log': 'enable',
+        'ftgd-analytics': 'disable',
+        'inspection-mode': 'proxy',
+        'mobile-malware-db': 'disable',
+        'name': 'default_name_14',
+                'replacemsg-group': 'test_value_15',
+                'scan-mode': 'quick',
+
+    }
+
+    set_method_mock.assert_called_with('antivirus', 'profile', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_antivirus_profile_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'antivirus_profile': {
+            'analytics_bl_filetype': '3',
+            'analytics_db': 'disable',
+            'analytics_max_upload': '5',
+            'analytics_wl_filetype': '6',
+            'av_block_log': 'enable',
+            'av_virus_log': 'enable',
+            'comment': 'Comment.',
+            'extended_log': 'enable',
+            'ftgd_analytics': 'disable',
+            'inspection_mode': 'proxy',
+            'mobile_malware_db': 'disable',
+            'name': 'default_name_14',
+            'replacemsg_group': 'test_value_15',
+            'scan_mode': 'quick',
+
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_antivirus_profile.fortios_antivirus(input_data, fos_instance)
+
+    expected_data = {
+        'analytics-bl-filetype': '3',
+        'analytics-db': 'disable',
+        'analytics-max-upload': '5',
+        'analytics-wl-filetype': '6',
+        'av-block-log': 'enable',
+        'av-virus-log': 'enable',
+        'comment': 'Comment.',
+        'extended-log': 'enable',
+        'ftgd-analytics': 'disable',
+        'inspection-mode': 'proxy',
+        'mobile-malware-db': 'disable',
+        'name': 'default_name_14',
+                'replacemsg-group': 'test_value_15',
+                'scan-mode': 'quick',
+
+    }
+
+    set_method_mock.assert_called_with('antivirus', 'profile', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_antivirus_profile_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'antivirus_profile': {
+            'analytics_bl_filetype': '3',
+            'analytics_db': 'disable',
+            'analytics_max_upload': '5',
+            'analytics_wl_filetype': '6',
+            'av_block_log': 'enable',
+            'av_virus_log': 'enable',
+            'comment': 'Comment.',
+            'extended_log': 'enable',
+            'ftgd_analytics': 'disable',
+            'inspection_mode': 'proxy',
+            'mobile_malware_db': 'disable',
+            'name': 'default_name_14',
+            'replacemsg_group': 'test_value_15',
+            'scan_mode': 'quick',
+
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_antivirus_profile.fortios_antivirus(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('antivirus', 'profile', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_antivirus_profile_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'antivirus_profile': {
+            'analytics_bl_filetype': '3',
+            'analytics_db': 'disable',
+            'analytics_max_upload': '5',
+            'analytics_wl_filetype': '6',
+            'av_block_log': 'enable',
+            'av_virus_log': 'enable',
+            'comment': 'Comment.',
+            'extended_log': 'enable',
+            'ftgd_analytics': 'disable',
+            'inspection_mode': 'proxy',
+            'mobile_malware_db': 'disable',
+            'name': 'default_name_14',
+            'replacemsg_group': 'test_value_15',
+            'scan_mode': 'quick',
+
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_antivirus_profile.fortios_antivirus(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('antivirus', 'profile', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_antivirus_profile_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'antivirus_profile': {
+            'analytics_bl_filetype': '3',
+            'analytics_db': 'disable',
+            'analytics_max_upload': '5',
+            'analytics_wl_filetype': '6',
+            'av_block_log': 'enable',
+            'av_virus_log': 'enable',
+            'comment': 'Comment.',
+            'extended_log': 'enable',
+            'ftgd_analytics': 'disable',
+            'inspection_mode': 'proxy',
+            'mobile_malware_db': 'disable',
+            'name': 'default_name_14',
+            'replacemsg_group': 'test_value_15',
+            'scan_mode': 'quick',
+
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_antivirus_profile.fortios_antivirus(input_data, fos_instance)
+
+    expected_data = {
+        'analytics-bl-filetype': '3',
+        'analytics-db': 'disable',
+        'analytics-max-upload': '5',
+        'analytics-wl-filetype': '6',
+        'av-block-log': 'enable',
+        'av-virus-log': 'enable',
+        'comment': 'Comment.',
+        'extended-log': 'enable',
+        'ftgd-analytics': 'disable',
+        'inspection-mode': 'proxy',
+        'mobile-malware-db': 'disable',
+        'name': 'default_name_14',
+                'replacemsg-group': 'test_value_15',
+                'scan-mode': 'quick',
+
+    }
+
+    set_method_mock.assert_called_with('antivirus', 'profile', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_antivirus_profile_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'antivirus_profile': {
+            'random_attribute_not_valid': 'tag',
+            'analytics_bl_filetype': '3',
+            'analytics_db': 'disable',
+            'analytics_max_upload': '5',
+            'analytics_wl_filetype': '6',
+            'av_block_log': 'enable',
+            'av_virus_log': 'enable',
+            'comment': 'Comment.',
+            'extended_log': 'enable',
+            'ftgd_analytics': 'disable',
+            'inspection_mode': 'proxy',
+            'mobile_malware_db': 'disable',
+            'name': 'default_name_14',
+            'replacemsg_group': 'test_value_15',
+            'scan_mode': 'quick',
+
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_antivirus_profile.fortios_antivirus(input_data, fos_instance)
+
+    expected_data = {
+        'analytics-bl-filetype': '3',
+        'analytics-db': 'disable',
+        'analytics-max-upload': '5',
+        'analytics-wl-filetype': '6',
+        'av-block-log': 'enable',
+        'av-virus-log': 'enable',
+        'comment': 'Comment.',
+        'extended-log': 'enable',
+        'ftgd-analytics': 'disable',
+        'inspection-mode': 'proxy',
+        'mobile-malware-db': 'disable',
+        'name': 'default_name_14',
+                'replacemsg-group': 'test_value_15',
+                'scan-mode': 'quick',
+
+    }
+
+    set_method_mock.assert_called_with('antivirus', 'profile', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_antivirus_quarantine.py b/test/units/modules/network/fortios/test_fortios_antivirus_quarantine.py
new file mode 100644
index 0000000000..8d2cf19e06
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_antivirus_quarantine.py
@@ -0,0 +1,231 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_antivirus_quarantine
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_antivirus_quarantine.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_antivirus_quarantine_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'antivirus_quarantine': {
+            'agelimit': '3',
+            'destination': 'NULL',
+            'drop_blocked': 'imap',
+            'drop_heuristic': 'imap',
+            'drop_infected': 'imap',
+            'lowspace': 'drop-new',
+            'maxfilesize': '9',
+            'quarantine_quota': '10',
+            'store_blocked': 'imap',
+            'store_heuristic': 'imap',
+            'store_infected': 'imap'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_antivirus_quarantine.fortios_antivirus(input_data, fos_instance)
+
+    expected_data = {
+        'agelimit': '3',
+        'destination': 'NULL',
+        'drop-blocked': 'imap',
+        'drop-heuristic': 'imap',
+        'drop-infected': 'imap',
+        'lowspace': 'drop-new',
+        'maxfilesize': '9',
+        'quarantine-quota': '10',
+        'store-blocked': 'imap',
+        'store-heuristic': 'imap',
+        'store-infected': 'imap'
+    }
+
+    set_method_mock.assert_called_with('antivirus', 'quarantine', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_antivirus_quarantine_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'antivirus_quarantine': {
+            'agelimit': '3',
+            'destination': 'NULL',
+            'drop_blocked': 'imap',
+            'drop_heuristic': 'imap',
+            'drop_infected': 'imap',
+            'lowspace': 'drop-new',
+            'maxfilesize': '9',
+            'quarantine_quota': '10',
+            'store_blocked': 'imap',
+            'store_heuristic': 'imap',
+            'store_infected': 'imap'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_antivirus_quarantine.fortios_antivirus(input_data, fos_instance)
+
+    expected_data = {
+        'agelimit': '3',
+        'destination': 'NULL',
+        'drop-blocked': 'imap',
+        'drop-heuristic': 'imap',
+        'drop-infected': 'imap',
+        'lowspace': 'drop-new',
+        'maxfilesize': '9',
+        'quarantine-quota': '10',
+        'store-blocked': 'imap',
+        'store-heuristic': 'imap',
+        'store-infected': 'imap'
+    }
+
+    set_method_mock.assert_called_with('antivirus', 'quarantine', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_antivirus_quarantine_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'antivirus_quarantine': {
+            'agelimit': '3',
+            'destination': 'NULL',
+            'drop_blocked': 'imap',
+            'drop_heuristic': 'imap',
+            'drop_infected': 'imap',
+            'lowspace': 'drop-new',
+            'maxfilesize': '9',
+            'quarantine_quota': '10',
+            'store_blocked': 'imap',
+            'store_heuristic': 'imap',
+            'store_infected': 'imap'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_antivirus_quarantine.fortios_antivirus(input_data, fos_instance)
+
+    expected_data = {
+        'agelimit': '3',
+        'destination': 'NULL',
+        'drop-blocked': 'imap',
+        'drop-heuristic': 'imap',
+        'drop-infected': 'imap',
+        'lowspace': 'drop-new',
+        'maxfilesize': '9',
+        'quarantine-quota': '10',
+        'store-blocked': 'imap',
+        'store-heuristic': 'imap',
+        'store-infected': 'imap'
+    }
+
+    set_method_mock.assert_called_with('antivirus', 'quarantine', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_antivirus_quarantine_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'antivirus_quarantine': {
+            'random_attribute_not_valid': 'tag',
+            'agelimit': '3',
+            'destination': 'NULL',
+            'drop_blocked': 'imap',
+            'drop_heuristic': 'imap',
+            'drop_infected': 'imap',
+            'lowspace': 'drop-new',
+            'maxfilesize': '9',
+            'quarantine_quota': '10',
+            'store_blocked': 'imap',
+            'store_heuristic': 'imap',
+            'store_infected': 'imap'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_antivirus_quarantine.fortios_antivirus(input_data, fos_instance)
+
+    expected_data = {
+        'agelimit': '3',
+        'destination': 'NULL',
+        'drop-blocked': 'imap',
+        'drop-heuristic': 'imap',
+        'drop-infected': 'imap',
+        'lowspace': 'drop-new',
+        'maxfilesize': '9',
+        'quarantine-quota': '10',
+        'store-blocked': 'imap',
+        'store-heuristic': 'imap',
+        'store-infected': 'imap'
+    }
+
+    set_method_mock.assert_called_with('antivirus', 'quarantine', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_antivirus_settings.py b/test/units/modules/network/fortios/test_fortios_antivirus_settings.py
new file mode 100644
index 0000000000..7651eb98e9
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_antivirus_settings.py
@@ -0,0 +1,167 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_antivirus_settings
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_antivirus_settings.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_antivirus_settings_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'antivirus_settings': {
+            'default_db': 'normal',
+            'grayware': 'enable',
+            'override_timeout': '5'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_antivirus_settings.fortios_antivirus(input_data, fos_instance)
+
+    expected_data = {
+        'default-db': 'normal',
+        'grayware': 'enable',
+        'override-timeout': '5'
+    }
+
+    set_method_mock.assert_called_with('antivirus', 'settings', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_antivirus_settings_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'antivirus_settings': {
+            'default_db': 'normal',
+            'grayware': 'enable',
+            'override_timeout': '5'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_antivirus_settings.fortios_antivirus(input_data, fos_instance)
+
+    expected_data = {
+        'default-db': 'normal',
+        'grayware': 'enable',
+        'override-timeout': '5'
+    }
+
+    set_method_mock.assert_called_with('antivirus', 'settings', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_antivirus_settings_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'antivirus_settings': {
+            'default_db': 'normal',
+            'grayware': 'enable',
+            'override_timeout': '5'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_antivirus_settings.fortios_antivirus(input_data, fos_instance)
+
+    expected_data = {
+        'default-db': 'normal',
+        'grayware': 'enable',
+        'override-timeout': '5'
+    }
+
+    set_method_mock.assert_called_with('antivirus', 'settings', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_antivirus_settings_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'antivirus_settings': {
+            'random_attribute_not_valid': 'tag',
+            'default_db': 'normal',
+            'grayware': 'enable',
+            'override_timeout': '5'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_antivirus_settings.fortios_antivirus(input_data, fos_instance)
+
+    expected_data = {
+        'default-db': 'normal',
+        'grayware': 'enable',
+        'override-timeout': '5'
+    }
+
+    set_method_mock.assert_called_with('antivirus', 'settings', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_application_custom.py b/test/units/modules/network/fortios/test_fortios_application_custom.py
new file mode 100644
index 0000000000..d0d332d80a
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_application_custom.py
@@ -0,0 +1,289 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_application_custom
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_application_custom.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_application_custom_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'application_custom': {
+            'behavior': 'test_value_3',
+            'category': '4',
+            'comment': 'Comment.',
+            'id': '6',
+            'name': 'default_name_7',
+            'protocol': 'test_value_8',
+            'signature': 'test_value_9',
+            'tag': 'test_value_10',
+            'technology': 'test_value_11',
+            'vendor': 'test_value_12'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_custom.fortios_application(input_data, fos_instance)
+
+    expected_data = {
+        'behavior': 'test_value_3',
+        'category': '4',
+        'comment': 'Comment.',
+        'id': '6',
+        'name': 'default_name_7',
+                'protocol': 'test_value_8',
+                'signature': 'test_value_9',
+                'tag': 'test_value_10',
+                'technology': 'test_value_11',
+                'vendor': 'test_value_12'
+    }
+
+    set_method_mock.assert_called_with('application', 'custom', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_application_custom_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'application_custom': {
+            'behavior': 'test_value_3',
+            'category': '4',
+            'comment': 'Comment.',
+            'id': '6',
+            'name': 'default_name_7',
+            'protocol': 'test_value_8',
+            'signature': 'test_value_9',
+            'tag': 'test_value_10',
+            'technology': 'test_value_11',
+            'vendor': 'test_value_12'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_custom.fortios_application(input_data, fos_instance)
+
+    expected_data = {
+        'behavior': 'test_value_3',
+        'category': '4',
+        'comment': 'Comment.',
+        'id': '6',
+        'name': 'default_name_7',
+                'protocol': 'test_value_8',
+                'signature': 'test_value_9',
+                'tag': 'test_value_10',
+                'technology': 'test_value_11',
+                'vendor': 'test_value_12'
+    }
+
+    set_method_mock.assert_called_with('application', 'custom', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_application_custom_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'application_custom': {
+            'behavior': 'test_value_3',
+            'category': '4',
+            'comment': 'Comment.',
+            'id': '6',
+            'name': 'default_name_7',
+            'protocol': 'test_value_8',
+            'signature': 'test_value_9',
+            'tag': 'test_value_10',
+            'technology': 'test_value_11',
+            'vendor': 'test_value_12'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_custom.fortios_application(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('application', 'custom', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_application_custom_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'application_custom': {
+            'behavior': 'test_value_3',
+            'category': '4',
+            'comment': 'Comment.',
+            'id': '6',
+            'name': 'default_name_7',
+            'protocol': 'test_value_8',
+            'signature': 'test_value_9',
+            'tag': 'test_value_10',
+            'technology': 'test_value_11',
+            'vendor': 'test_value_12'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_custom.fortios_application(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('application', 'custom', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_application_custom_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'application_custom': {
+            'behavior': 'test_value_3',
+            'category': '4',
+            'comment': 'Comment.',
+            'id': '6',
+            'name': 'default_name_7',
+            'protocol': 'test_value_8',
+            'signature': 'test_value_9',
+            'tag': 'test_value_10',
+            'technology': 'test_value_11',
+            'vendor': 'test_value_12'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_custom.fortios_application(input_data, fos_instance)
+
+    expected_data = {
+        'behavior': 'test_value_3',
+        'category': '4',
+        'comment': 'Comment.',
+        'id': '6',
+        'name': 'default_name_7',
+                'protocol': 'test_value_8',
+                'signature': 'test_value_9',
+                'tag': 'test_value_10',
+                'technology': 'test_value_11',
+                'vendor': 'test_value_12'
+    }
+
+    set_method_mock.assert_called_with('application', 'custom', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_application_custom_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'application_custom': {
+            'random_attribute_not_valid': 'tag',
+            'behavior': 'test_value_3',
+            'category': '4',
+            'comment': 'Comment.',
+            'id': '6',
+            'name': 'default_name_7',
+            'protocol': 'test_value_8',
+            'signature': 'test_value_9',
+            'tag': 'test_value_10',
+            'technology': 'test_value_11',
+            'vendor': 'test_value_12'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_custom.fortios_application(input_data, fos_instance)
+
+    expected_data = {
+        'behavior': 'test_value_3',
+        'category': '4',
+        'comment': 'Comment.',
+        'id': '6',
+        'name': 'default_name_7',
+                'protocol': 'test_value_8',
+                'signature': 'test_value_9',
+                'tag': 'test_value_10',
+                'technology': 'test_value_11',
+                'vendor': 'test_value_12'
+    }
+
+    set_method_mock.assert_called_with('application', 'custom', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_application_group.py b/test/units/modules/network/fortios/test_fortios_application_group.py
new file mode 100644
index 0000000000..881735cc14
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_application_group.py
@@ -0,0 +1,209 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_application_group
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_application_group.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_application_group_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'application_group': {'comment': 'Comment',
+                              'name': 'default_name_4',
+                              'type': 'application'
+                              },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_group.fortios_application(input_data, fos_instance)
+
+    expected_data = {'comment': 'Comment',
+                     'name': 'default_name_4',
+                     'type': 'application'
+                     }
+
+    set_method_mock.assert_called_with('application', 'group', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_application_group_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'application_group': {'comment': 'Comment',
+                              'name': 'default_name_4',
+                              'type': 'application'
+                              },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_group.fortios_application(input_data, fos_instance)
+
+    expected_data = {'comment': 'Comment',
+                     'name': 'default_name_4',
+                     'type': 'application'
+                     }
+
+    set_method_mock.assert_called_with('application', 'group', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_application_group_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'application_group': {'comment': 'Comment',
+                              'name': 'default_name_4',
+                              'type': 'application'
+                              },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_group.fortios_application(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('application', 'group', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_application_group_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'application_group': {'comment': 'Comment',
+                              'name': 'default_name_4',
+                              'type': 'application'
+                              },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_group.fortios_application(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('application', 'group', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_application_group_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'application_group': {'comment': 'Comment',
+                              'name': 'default_name_4',
+                              'type': 'application'
+                              },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_group.fortios_application(input_data, fos_instance)
+
+    expected_data = {'comment': 'Comment',
+                     'name': 'default_name_4',
+                     'type': 'application'
+                     }
+
+    set_method_mock.assert_called_with('application', 'group', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_application_group_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'application_group': {
+            'random_attribute_not_valid': 'tag', 'comment': 'Comment',
+            'name': 'default_name_4',
+            'type': 'application'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_group.fortios_application(input_data, fos_instance)
+
+    expected_data = {'comment': 'Comment',
+                     'name': 'default_name_4',
+                     'type': 'application'
+                     }
+
+    set_method_mock.assert_called_with('application', 'group', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_application_list.py b/test/units/modules/network/fortios/test_fortios_application_list.py
new file mode 100644
index 0000000000..41810cbe21
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_application_list.py
@@ -0,0 +1,309 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_application_list
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_application_list.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_application_list_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'application_list': {
+            'app_replacemsg': 'disable',
+            'comment': 'comments',
+            'deep_app_inspection': 'disable',
+            'extended_log': 'enable',
+            'name': 'default_name_7',
+            'options': 'allow-dns',
+            'other_application_action': 'pass',
+            'other_application_log': 'disable',
+            'p2p_black_list': 'skype',
+            'replacemsg_group': 'test_value_12',
+            'unknown_application_action': 'pass',
+            'unknown_application_log': 'disable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_list.fortios_application(input_data, fos_instance)
+
+    expected_data = {
+        'app-replacemsg': 'disable',
+        'comment': 'comments',
+        'deep-app-inspection': 'disable',
+        'extended-log': 'enable',
+        'name': 'default_name_7',
+                'options': 'allow-dns',
+                'other-application-action': 'pass',
+                'other-application-log': 'disable',
+                'p2p-black-list': 'skype',
+                'replacemsg-group': 'test_value_12',
+                'unknown-application-action': 'pass',
+                'unknown-application-log': 'disable'
+    }
+
+    set_method_mock.assert_called_with('application', 'list', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_application_list_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'application_list': {
+            'app_replacemsg': 'disable',
+            'comment': 'comments',
+            'deep_app_inspection': 'disable',
+            'extended_log': 'enable',
+            'name': 'default_name_7',
+            'options': 'allow-dns',
+            'other_application_action': 'pass',
+            'other_application_log': 'disable',
+            'p2p_black_list': 'skype',
+            'replacemsg_group': 'test_value_12',
+            'unknown_application_action': 'pass',
+            'unknown_application_log': 'disable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_list.fortios_application(input_data, fos_instance)
+
+    expected_data = {
+        'app-replacemsg': 'disable',
+        'comment': 'comments',
+        'deep-app-inspection': 'disable',
+        'extended-log': 'enable',
+        'name': 'default_name_7',
+                'options': 'allow-dns',
+                'other-application-action': 'pass',
+                'other-application-log': 'disable',
+                'p2p-black-list': 'skype',
+                'replacemsg-group': 'test_value_12',
+                'unknown-application-action': 'pass',
+                'unknown-application-log': 'disable'
+    }
+
+    set_method_mock.assert_called_with('application', 'list', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_application_list_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'application_list': {
+            'app_replacemsg': 'disable',
+            'comment': 'comments',
+            'deep_app_inspection': 'disable',
+            'extended_log': 'enable',
+            'name': 'default_name_7',
+            'options': 'allow-dns',
+            'other_application_action': 'pass',
+            'other_application_log': 'disable',
+            'p2p_black_list': 'skype',
+            'replacemsg_group': 'test_value_12',
+            'unknown_application_action': 'pass',
+            'unknown_application_log': 'disable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_list.fortios_application(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('application', 'list', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_application_list_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'application_list': {
+            'app_replacemsg': 'disable',
+            'comment': 'comments',
+            'deep_app_inspection': 'disable',
+            'extended_log': 'enable',
+            'name': 'default_name_7',
+            'options': 'allow-dns',
+            'other_application_action': 'pass',
+            'other_application_log': 'disable',
+            'p2p_black_list': 'skype',
+            'replacemsg_group': 'test_value_12',
+            'unknown_application_action': 'pass',
+            'unknown_application_log': 'disable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_list.fortios_application(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('application', 'list', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_application_list_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'application_list': {
+            'app_replacemsg': 'disable',
+            'comment': 'comments',
+            'deep_app_inspection': 'disable',
+            'extended_log': 'enable',
+            'name': 'default_name_7',
+            'options': 'allow-dns',
+            'other_application_action': 'pass',
+            'other_application_log': 'disable',
+            'p2p_black_list': 'skype',
+            'replacemsg_group': 'test_value_12',
+            'unknown_application_action': 'pass',
+            'unknown_application_log': 'disable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_list.fortios_application(input_data, fos_instance)
+
+    expected_data = {
+        'app-replacemsg': 'disable',
+        'comment': 'comments',
+        'deep-app-inspection': 'disable',
+        'extended-log': 'enable',
+        'name': 'default_name_7',
+                'options': 'allow-dns',
+                'other-application-action': 'pass',
+                'other-application-log': 'disable',
+                'p2p-black-list': 'skype',
+                'replacemsg-group': 'test_value_12',
+                'unknown-application-action': 'pass',
+                'unknown-application-log': 'disable'
+    }
+
+    set_method_mock.assert_called_with('application', 'list', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_application_list_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'application_list': {
+            'random_attribute_not_valid': 'tag',
+            'app_replacemsg': 'disable',
+            'comment': 'comments',
+            'deep_app_inspection': 'disable',
+            'extended_log': 'enable',
+            'name': 'default_name_7',
+            'options': 'allow-dns',
+            'other_application_action': 'pass',
+            'other_application_log': 'disable',
+            'p2p_black_list': 'skype',
+            'replacemsg_group': 'test_value_12',
+            'unknown_application_action': 'pass',
+            'unknown_application_log': 'disable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_list.fortios_application(input_data, fos_instance)
+
+    expected_data = {
+        'app-replacemsg': 'disable',
+        'comment': 'comments',
+        'deep-app-inspection': 'disable',
+        'extended-log': 'enable',
+        'name': 'default_name_7',
+                'options': 'allow-dns',
+                'other-application-action': 'pass',
+                'other-application-log': 'disable',
+                'p2p-black-list': 'skype',
+                'replacemsg-group': 'test_value_12',
+                'unknown-application-action': 'pass',
+                'unknown-application-log': 'disable'
+    }
+
+    set_method_mock.assert_called_with('application', 'list', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_application_name.py b/test/units/modules/network/fortios/test_fortios_application_name.py
new file mode 100644
index 0000000000..23f0e0f071
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_application_name.py
@@ -0,0 +1,309 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_application_name
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_application_name.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_application_name_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'application_name': {
+            'behavior': 'test_value_3',
+            'category': '4',
+            'id': '5',
+            'name': 'default_name_6',
+            'parameter': 'test_value_7',
+            'popularity': '8',
+            'protocol': 'test_value_9',
+            'risk': '10',
+            'sub_category': '11',
+            'technology': 'test_value_12',
+            'vendor': 'test_value_13',
+            'weight': '14'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_name.fortios_application(input_data, fos_instance)
+
+    expected_data = {
+        'behavior': 'test_value_3',
+        'category': '4',
+        'id': '5',
+        'name': 'default_name_6',
+                'parameter': 'test_value_7',
+                'popularity': '8',
+                'protocol': 'test_value_9',
+                'risk': '10',
+                'sub-category': '11',
+                'technology': 'test_value_12',
+                'vendor': 'test_value_13',
+                'weight': '14'
+    }
+
+    set_method_mock.assert_called_with('application', 'name', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_application_name_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'application_name': {
+            'behavior': 'test_value_3',
+            'category': '4',
+            'id': '5',
+            'name': 'default_name_6',
+            'parameter': 'test_value_7',
+            'popularity': '8',
+            'protocol': 'test_value_9',
+            'risk': '10',
+            'sub_category': '11',
+            'technology': 'test_value_12',
+            'vendor': 'test_value_13',
+            'weight': '14'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_name.fortios_application(input_data, fos_instance)
+
+    expected_data = {
+        'behavior': 'test_value_3',
+        'category': '4',
+        'id': '5',
+        'name': 'default_name_6',
+                'parameter': 'test_value_7',
+                'popularity': '8',
+                'protocol': 'test_value_9',
+                'risk': '10',
+                'sub-category': '11',
+                'technology': 'test_value_12',
+                'vendor': 'test_value_13',
+                'weight': '14'
+    }
+
+    set_method_mock.assert_called_with('application', 'name', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_application_name_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'application_name': {
+            'behavior': 'test_value_3',
+            'category': '4',
+            'id': '5',
+            'name': 'default_name_6',
+            'parameter': 'test_value_7',
+            'popularity': '8',
+            'protocol': 'test_value_9',
+            'risk': '10',
+            'sub_category': '11',
+            'technology': 'test_value_12',
+            'vendor': 'test_value_13',
+            'weight': '14'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_name.fortios_application(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('application', 'name', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_application_name_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'application_name': {
+            'behavior': 'test_value_3',
+            'category': '4',
+            'id': '5',
+            'name': 'default_name_6',
+            'parameter': 'test_value_7',
+            'popularity': '8',
+            'protocol': 'test_value_9',
+            'risk': '10',
+            'sub_category': '11',
+            'technology': 'test_value_12',
+            'vendor': 'test_value_13',
+            'weight': '14'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_name.fortios_application(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('application', 'name', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_application_name_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'application_name': {
+            'behavior': 'test_value_3',
+            'category': '4',
+            'id': '5',
+            'name': 'default_name_6',
+            'parameter': 'test_value_7',
+            'popularity': '8',
+            'protocol': 'test_value_9',
+            'risk': '10',
+            'sub_category': '11',
+            'technology': 'test_value_12',
+            'vendor': 'test_value_13',
+            'weight': '14'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_name.fortios_application(input_data, fos_instance)
+
+    expected_data = {
+        'behavior': 'test_value_3',
+        'category': '4',
+        'id': '5',
+        'name': 'default_name_6',
+                'parameter': 'test_value_7',
+                'popularity': '8',
+                'protocol': 'test_value_9',
+                'risk': '10',
+                'sub-category': '11',
+                'technology': 'test_value_12',
+                'vendor': 'test_value_13',
+                'weight': '14'
+    }
+
+    set_method_mock.assert_called_with('application', 'name', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_application_name_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'application_name': {
+            'random_attribute_not_valid': 'tag',
+            'behavior': 'test_value_3',
+            'category': '4',
+            'id': '5',
+            'name': 'default_name_6',
+            'parameter': 'test_value_7',
+            'popularity': '8',
+            'protocol': 'test_value_9',
+            'risk': '10',
+            'sub_category': '11',
+            'technology': 'test_value_12',
+            'vendor': 'test_value_13',
+            'weight': '14'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_name.fortios_application(input_data, fos_instance)
+
+    expected_data = {
+        'behavior': 'test_value_3',
+        'category': '4',
+        'id': '5',
+        'name': 'default_name_6',
+                'parameter': 'test_value_7',
+                'popularity': '8',
+                'protocol': 'test_value_9',
+                'risk': '10',
+                'sub-category': '11',
+                'technology': 'test_value_12',
+                'vendor': 'test_value_13',
+                'weight': '14'
+    }
+
+    set_method_mock.assert_called_with('application', 'name', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_application_rule_settings.py b/test/units/modules/network/fortios/test_fortios_application_rule_settings.py
new file mode 100644
index 0000000000..e880e8126d
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_application_rule_settings.py
@@ -0,0 +1,199 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_application_rule_settings
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_application_rule_settings.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_application_rule_settings_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'application_rule_settings': {
+            'id': '3'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_rule_settings.fortios_application(input_data, fos_instance)
+
+    expected_data = {
+        'id': '3'
+    }
+
+    set_method_mock.assert_called_with('application', 'rule-settings', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_application_rule_settings_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'application_rule_settings': {
+            'id': '3'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_rule_settings.fortios_application(input_data, fos_instance)
+
+    expected_data = {
+        'id': '3'
+    }
+
+    set_method_mock.assert_called_with('application', 'rule-settings', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_application_rule_settings_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'application_rule_settings': {
+            'id': '3'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_rule_settings.fortios_application(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('application', 'rule-settings', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_application_rule_settings_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'application_rule_settings': {
+            'id': '3'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_rule_settings.fortios_application(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('application', 'rule-settings', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_application_rule_settings_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'application_rule_settings': {
+            'id': '3'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_rule_settings.fortios_application(input_data, fos_instance)
+
+    expected_data = {
+        'id': '3'
+    }
+
+    set_method_mock.assert_called_with('application', 'rule-settings', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_application_rule_settings_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'application_rule_settings': {
+            'random_attribute_not_valid': 'tag',
+            'id': '3'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_application_rule_settings.fortios_application(input_data, fos_instance)
+
+    expected_data = {
+        'id': '3'
+    }
+
+    set_method_mock.assert_called_with('application', 'rule-settings', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_authentication_rule.py b/test/units/modules/network/fortios/test_fortios_authentication_rule.py
new file mode 100644
index 0000000000..dbca5e9a88
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_authentication_rule.py
@@ -0,0 +1,279 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_authentication_rule
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_authentication_rule.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_authentication_rule_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'authentication_rule': {
+            'active_auth_method': 'test_value_3',
+            'comments': 'test_value_4',
+            'ip_based': 'enable',
+            'name': 'default_name_6',
+            'protocol': 'http',
+            'sso_auth_method': 'test_value_8',
+            'status': 'enable',
+            'transaction_based': 'enable',
+            'web_auth_cookie': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_authentication_rule.fortios_authentication(input_data, fos_instance)
+
+    expected_data = {
+        'active-auth-method': 'test_value_3',
+        'comments': 'test_value_4',
+        'ip-based': 'enable',
+        'name': 'default_name_6',
+                'protocol': 'http',
+                'sso-auth-method': 'test_value_8',
+                'status': 'enable',
+                'transaction-based': 'enable',
+                'web-auth-cookie': 'enable'
+    }
+
+    set_method_mock.assert_called_with('authentication', 'rule', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_authentication_rule_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'authentication_rule': {
+            'active_auth_method': 'test_value_3',
+            'comments': 'test_value_4',
+            'ip_based': 'enable',
+            'name': 'default_name_6',
+            'protocol': 'http',
+            'sso_auth_method': 'test_value_8',
+            'status': 'enable',
+            'transaction_based': 'enable',
+            'web_auth_cookie': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_authentication_rule.fortios_authentication(input_data, fos_instance)
+
+    expected_data = {
+        'active-auth-method': 'test_value_3',
+        'comments': 'test_value_4',
+        'ip-based': 'enable',
+        'name': 'default_name_6',
+                'protocol': 'http',
+                'sso-auth-method': 'test_value_8',
+                'status': 'enable',
+                'transaction-based': 'enable',
+                'web-auth-cookie': 'enable'
+    }
+
+    set_method_mock.assert_called_with('authentication', 'rule', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_authentication_rule_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'authentication_rule': {
+            'active_auth_method': 'test_value_3',
+            'comments': 'test_value_4',
+            'ip_based': 'enable',
+            'name': 'default_name_6',
+            'protocol': 'http',
+            'sso_auth_method': 'test_value_8',
+            'status': 'enable',
+            'transaction_based': 'enable',
+            'web_auth_cookie': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_authentication_rule.fortios_authentication(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('authentication', 'rule', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_authentication_rule_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'authentication_rule': {
+            'active_auth_method': 'test_value_3',
+            'comments': 'test_value_4',
+            'ip_based': 'enable',
+            'name': 'default_name_6',
+            'protocol': 'http',
+            'sso_auth_method': 'test_value_8',
+            'status': 'enable',
+            'transaction_based': 'enable',
+            'web_auth_cookie': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_authentication_rule.fortios_authentication(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('authentication', 'rule', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_authentication_rule_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'authentication_rule': {
+            'active_auth_method': 'test_value_3',
+            'comments': 'test_value_4',
+            'ip_based': 'enable',
+            'name': 'default_name_6',
+            'protocol': 'http',
+            'sso_auth_method': 'test_value_8',
+            'status': 'enable',
+            'transaction_based': 'enable',
+            'web_auth_cookie': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_authentication_rule.fortios_authentication(input_data, fos_instance)
+
+    expected_data = {
+        'active-auth-method': 'test_value_3',
+        'comments': 'test_value_4',
+        'ip-based': 'enable',
+        'name': 'default_name_6',
+                'protocol': 'http',
+                'sso-auth-method': 'test_value_8',
+                'status': 'enable',
+                'transaction-based': 'enable',
+                'web-auth-cookie': 'enable'
+    }
+
+    set_method_mock.assert_called_with('authentication', 'rule', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_authentication_rule_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'authentication_rule': {
+            'random_attribute_not_valid': 'tag',
+            'active_auth_method': 'test_value_3',
+            'comments': 'test_value_4',
+            'ip_based': 'enable',
+            'name': 'default_name_6',
+            'protocol': 'http',
+            'sso_auth_method': 'test_value_8',
+            'status': 'enable',
+            'transaction_based': 'enable',
+            'web_auth_cookie': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_authentication_rule.fortios_authentication(input_data, fos_instance)
+
+    expected_data = {
+        'active-auth-method': 'test_value_3',
+        'comments': 'test_value_4',
+        'ip-based': 'enable',
+        'name': 'default_name_6',
+                'protocol': 'http',
+                'sso-auth-method': 'test_value_8',
+                'status': 'enable',
+                'transaction-based': 'enable',
+                'web-auth-cookie': 'enable'
+    }
+
+    set_method_mock.assert_called_with('authentication', 'rule', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_authentication_scheme.py b/test/units/modules/network/fortios/test_fortios_authentication_scheme.py
new file mode 100644
index 0000000000..82d2ac1546
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_authentication_scheme.py
@@ -0,0 +1,289 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_authentication_scheme
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_authentication_scheme.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_authentication_scheme_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'authentication_scheme': {
+            'domain_controller': 'test_value_3',
+            'fsso_agent_for_ntlm': 'test_value_4',
+            'fsso_guest': 'enable',
+            'kerberos_keytab': 'test_value_6',
+            'method': 'ntlm',
+            'name': 'default_name_8',
+            'negotiate_ntlm': 'enable',
+            'require_tfa': 'enable',
+            'ssh_ca': 'test_value_11',
+
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_authentication_scheme.fortios_authentication(input_data, fos_instance)
+
+    expected_data = {
+        'domain-controller': 'test_value_3',
+        'fsso-agent-for-ntlm': 'test_value_4',
+        'fsso-guest': 'enable',
+        'kerberos-keytab': 'test_value_6',
+        'method': 'ntlm',
+        'name': 'default_name_8',
+                'negotiate-ntlm': 'enable',
+                'require-tfa': 'enable',
+                'ssh-ca': 'test_value_11',
+
+    }
+
+    set_method_mock.assert_called_with('authentication', 'scheme', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_authentication_scheme_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'authentication_scheme': {
+            'domain_controller': 'test_value_3',
+            'fsso_agent_for_ntlm': 'test_value_4',
+            'fsso_guest': 'enable',
+            'kerberos_keytab': 'test_value_6',
+            'method': 'ntlm',
+            'name': 'default_name_8',
+            'negotiate_ntlm': 'enable',
+            'require_tfa': 'enable',
+            'ssh_ca': 'test_value_11',
+
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_authentication_scheme.fortios_authentication(input_data, fos_instance)
+
+    expected_data = {
+        'domain-controller': 'test_value_3',
+        'fsso-agent-for-ntlm': 'test_value_4',
+        'fsso-guest': 'enable',
+        'kerberos-keytab': 'test_value_6',
+        'method': 'ntlm',
+        'name': 'default_name_8',
+                'negotiate-ntlm': 'enable',
+                'require-tfa': 'enable',
+                'ssh-ca': 'test_value_11',
+
+    }
+
+    set_method_mock.assert_called_with('authentication', 'scheme', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_authentication_scheme_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'authentication_scheme': {
+            'domain_controller': 'test_value_3',
+            'fsso_agent_for_ntlm': 'test_value_4',
+            'fsso_guest': 'enable',
+            'kerberos_keytab': 'test_value_6',
+            'method': 'ntlm',
+            'name': 'default_name_8',
+            'negotiate_ntlm': 'enable',
+            'require_tfa': 'enable',
+            'ssh_ca': 'test_value_11',
+
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_authentication_scheme.fortios_authentication(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('authentication', 'scheme', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_authentication_scheme_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'authentication_scheme': {
+            'domain_controller': 'test_value_3',
+            'fsso_agent_for_ntlm': 'test_value_4',
+            'fsso_guest': 'enable',
+            'kerberos_keytab': 'test_value_6',
+            'method': 'ntlm',
+            'name': 'default_name_8',
+            'negotiate_ntlm': 'enable',
+            'require_tfa': 'enable',
+            'ssh_ca': 'test_value_11',
+
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_authentication_scheme.fortios_authentication(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('authentication', 'scheme', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_authentication_scheme_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'authentication_scheme': {
+            'domain_controller': 'test_value_3',
+            'fsso_agent_for_ntlm': 'test_value_4',
+            'fsso_guest': 'enable',
+            'kerberos_keytab': 'test_value_6',
+            'method': 'ntlm',
+            'name': 'default_name_8',
+            'negotiate_ntlm': 'enable',
+            'require_tfa': 'enable',
+            'ssh_ca': 'test_value_11',
+
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_authentication_scheme.fortios_authentication(input_data, fos_instance)
+
+    expected_data = {
+        'domain-controller': 'test_value_3',
+        'fsso-agent-for-ntlm': 'test_value_4',
+        'fsso-guest': 'enable',
+        'kerberos-keytab': 'test_value_6',
+        'method': 'ntlm',
+        'name': 'default_name_8',
+                'negotiate-ntlm': 'enable',
+                'require-tfa': 'enable',
+                'ssh-ca': 'test_value_11',
+
+    }
+
+    set_method_mock.assert_called_with('authentication', 'scheme', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_authentication_scheme_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'authentication_scheme': {
+            'random_attribute_not_valid': 'tag',
+            'domain_controller': 'test_value_3',
+            'fsso_agent_for_ntlm': 'test_value_4',
+            'fsso_guest': 'enable',
+            'kerberos_keytab': 'test_value_6',
+            'method': 'ntlm',
+            'name': 'default_name_8',
+            'negotiate_ntlm': 'enable',
+            'require_tfa': 'enable',
+            'ssh_ca': 'test_value_11',
+
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_authentication_scheme.fortios_authentication(input_data, fos_instance)
+
+    expected_data = {
+        'domain-controller': 'test_value_3',
+        'fsso-agent-for-ntlm': 'test_value_4',
+        'fsso-guest': 'enable',
+        'kerberos-keytab': 'test_value_6',
+        'method': 'ntlm',
+        'name': 'default_name_8',
+                'negotiate-ntlm': 'enable',
+                'require-tfa': 'enable',
+                'ssh-ca': 'test_value_11',
+
+    }
+
+    set_method_mock.assert_called_with('authentication', 'scheme', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_authentication_setting.py b/test/units/modules/network/fortios/test_fortios_authentication_setting.py
new file mode 100644
index 0000000000..36b6fd98ef
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_authentication_setting.py
@@ -0,0 +1,207 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_authentication_setting
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_authentication_setting.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_authentication_setting_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'authentication_setting': {
+            'active_auth_scheme': 'test_value_3',
+            'captive_portal': 'test_value_4',
+            'captive_portal_ip': 'test_value_5',
+            'captive_portal_ip6': 'test_value_6',
+            'captive_portal_port': '7',
+            'captive_portal_type': 'fqdn',
+            'captive_portal6': 'test_value_9',
+            'sso_auth_scheme': 'test_value_10'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_authentication_setting.fortios_authentication(input_data, fos_instance)
+
+    expected_data = {
+        'active-auth-scheme': 'test_value_3',
+        'captive-portal': 'test_value_4',
+        'captive-portal-ip': 'test_value_5',
+        'captive-portal-ip6': 'test_value_6',
+        'captive-portal-port': '7',
+        'captive-portal-type': 'fqdn',
+        'captive-portal6': 'test_value_9',
+        'sso-auth-scheme': 'test_value_10'
+    }
+
+    set_method_mock.assert_called_with('authentication', 'setting', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_authentication_setting_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'authentication_setting': {
+            'active_auth_scheme': 'test_value_3',
+            'captive_portal': 'test_value_4',
+            'captive_portal_ip': 'test_value_5',
+            'captive_portal_ip6': 'test_value_6',
+            'captive_portal_port': '7',
+            'captive_portal_type': 'fqdn',
+            'captive_portal6': 'test_value_9',
+            'sso_auth_scheme': 'test_value_10'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_authentication_setting.fortios_authentication(input_data, fos_instance)
+
+    expected_data = {
+        'active-auth-scheme': 'test_value_3',
+        'captive-portal': 'test_value_4',
+        'captive-portal-ip': 'test_value_5',
+        'captive-portal-ip6': 'test_value_6',
+        'captive-portal-port': '7',
+        'captive-portal-type': 'fqdn',
+        'captive-portal6': 'test_value_9',
+        'sso-auth-scheme': 'test_value_10'
+    }
+
+    set_method_mock.assert_called_with('authentication', 'setting', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_authentication_setting_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'authentication_setting': {
+            'active_auth_scheme': 'test_value_3',
+            'captive_portal': 'test_value_4',
+            'captive_portal_ip': 'test_value_5',
+            'captive_portal_ip6': 'test_value_6',
+            'captive_portal_port': '7',
+            'captive_portal_type': 'fqdn',
+            'captive_portal6': 'test_value_9',
+            'sso_auth_scheme': 'test_value_10'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_authentication_setting.fortios_authentication(input_data, fos_instance)
+
+    expected_data = {
+        'active-auth-scheme': 'test_value_3',
+        'captive-portal': 'test_value_4',
+        'captive-portal-ip': 'test_value_5',
+        'captive-portal-ip6': 'test_value_6',
+        'captive-portal-port': '7',
+        'captive-portal-type': 'fqdn',
+        'captive-portal6': 'test_value_9',
+        'sso-auth-scheme': 'test_value_10'
+    }
+
+    set_method_mock.assert_called_with('authentication', 'setting', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_authentication_setting_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'authentication_setting': {
+            'random_attribute_not_valid': 'tag',
+            'active_auth_scheme': 'test_value_3',
+            'captive_portal': 'test_value_4',
+            'captive_portal_ip': 'test_value_5',
+            'captive_portal_ip6': 'test_value_6',
+            'captive_portal_port': '7',
+            'captive_portal_type': 'fqdn',
+            'captive_portal6': 'test_value_9',
+            'sso_auth_scheme': 'test_value_10'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_authentication_setting.fortios_authentication(input_data, fos_instance)
+
+    expected_data = {
+        'active-auth-scheme': 'test_value_3',
+        'captive-portal': 'test_value_4',
+        'captive-portal-ip': 'test_value_5',
+        'captive-portal-ip6': 'test_value_6',
+        'captive-portal-port': '7',
+        'captive-portal-type': 'fqdn',
+        'captive-portal6': 'test_value_9',
+        'sso-auth-scheme': 'test_value_10'
+    }
+
+    set_method_mock.assert_called_with('authentication', 'setting', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_dlp_filepattern.py b/test/units/modules/network/fortios/test_fortios_dlp_filepattern.py
new file mode 100644
index 0000000000..44f728eae4
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_dlp_filepattern.py
@@ -0,0 +1,219 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_dlp_filepattern
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_dlp_filepattern.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_dlp_filepattern_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dlp_filepattern': {
+            'comment': 'Optional comments.',
+            'id': '4',
+            'name': 'default_name_5'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_filepattern.fortios_dlp(input_data, fos_instance)
+
+    expected_data = {
+        'comment': 'Optional comments.',
+        'id': '4',
+        'name': 'default_name_5'
+    }
+
+    set_method_mock.assert_called_with('dlp', 'filepattern', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_dlp_filepattern_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dlp_filepattern': {
+            'comment': 'Optional comments.',
+            'id': '4',
+            'name': 'default_name_5'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_filepattern.fortios_dlp(input_data, fos_instance)
+
+    expected_data = {
+        'comment': 'Optional comments.',
+        'id': '4',
+        'name': 'default_name_5'
+    }
+
+    set_method_mock.assert_called_with('dlp', 'filepattern', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_dlp_filepattern_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'dlp_filepattern': {
+            'comment': 'Optional comments.',
+            'id': '4',
+            'name': 'default_name_5'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_filepattern.fortios_dlp(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('dlp', 'filepattern', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_dlp_filepattern_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'dlp_filepattern': {
+            'comment': 'Optional comments.',
+            'id': '4',
+            'name': 'default_name_5'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_filepattern.fortios_dlp(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('dlp', 'filepattern', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_dlp_filepattern_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dlp_filepattern': {
+            'comment': 'Optional comments.',
+            'id': '4',
+            'name': 'default_name_5'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_filepattern.fortios_dlp(input_data, fos_instance)
+
+    expected_data = {
+        'comment': 'Optional comments.',
+        'id': '4',
+        'name': 'default_name_5'
+    }
+
+    set_method_mock.assert_called_with('dlp', 'filepattern', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_dlp_filepattern_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dlp_filepattern': {
+            'random_attribute_not_valid': 'tag',
+            'comment': 'Optional comments.',
+            'id': '4',
+            'name': 'default_name_5'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_filepattern.fortios_dlp(input_data, fos_instance)
+
+    expected_data = {
+        'comment': 'Optional comments.',
+        'id': '4',
+        'name': 'default_name_5'
+    }
+
+    set_method_mock.assert_called_with('dlp', 'filepattern', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_dlp_fp_doc_source.py b/test/units/modules/network/fortios/test_fortios_dlp_fp_doc_source.py
new file mode 100644
index 0000000000..07e79ac364
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_dlp_fp_doc_source.py
@@ -0,0 +1,369 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_dlp_fp_doc_source
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_dlp_fp_doc_source.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_dlp_fp_doc_source_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dlp_fp_doc_source': {
+            'date': '3',
+            'file_path': 'test_value_4',
+            'file_pattern': 'test_value_5',
+            'keep_modified': 'enable',
+            'name': 'default_name_7',
+            'password': 'test_value_8',
+            'period': 'none',
+            'remove_deleted': 'enable',
+            'scan_on_creation': 'enable',
+            'scan_subdirectories': 'enable',
+            'sensitivity': 'test_value_13',
+            'server': '192.168.100.14',
+            'server_type': 'samba',
+            'tod_hour': '16',
+            'tod_min': '17',
+            'username': 'test_value_18',
+            'vdom': 'mgmt',
+            'weekday': 'sunday'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_fp_doc_source.fortios_dlp(input_data, fos_instance)
+
+    expected_data = {
+        'date': '3',
+                'file-path': 'test_value_4',
+                'file-pattern': 'test_value_5',
+                'keep-modified': 'enable',
+                'name': 'default_name_7',
+                'password': 'test_value_8',
+                'period': 'none',
+                'remove-deleted': 'enable',
+                'scan-on-creation': 'enable',
+                'scan-subdirectories': 'enable',
+                'sensitivity': 'test_value_13',
+                'server': '192.168.100.14',
+                'server-type': 'samba',
+                'tod-hour': '16',
+                'tod-min': '17',
+                'username': 'test_value_18',
+                'vdom': 'mgmt',
+                'weekday': 'sunday'
+    }
+
+    set_method_mock.assert_called_with('dlp', 'fp-doc-source', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_dlp_fp_doc_source_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dlp_fp_doc_source': {
+            'date': '3',
+            'file_path': 'test_value_4',
+            'file_pattern': 'test_value_5',
+            'keep_modified': 'enable',
+            'name': 'default_name_7',
+            'password': 'test_value_8',
+            'period': 'none',
+            'remove_deleted': 'enable',
+            'scan_on_creation': 'enable',
+            'scan_subdirectories': 'enable',
+            'sensitivity': 'test_value_13',
+            'server': '192.168.100.14',
+            'server_type': 'samba',
+            'tod_hour': '16',
+            'tod_min': '17',
+            'username': 'test_value_18',
+            'vdom': 'mgmt',
+            'weekday': 'sunday'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_fp_doc_source.fortios_dlp(input_data, fos_instance)
+
+    expected_data = {
+        'date': '3',
+                'file-path': 'test_value_4',
+                'file-pattern': 'test_value_5',
+                'keep-modified': 'enable',
+                'name': 'default_name_7',
+                'password': 'test_value_8',
+                'period': 'none',
+                'remove-deleted': 'enable',
+                'scan-on-creation': 'enable',
+                'scan-subdirectories': 'enable',
+                'sensitivity': 'test_value_13',
+                'server': '192.168.100.14',
+                'server-type': 'samba',
+                'tod-hour': '16',
+                'tod-min': '17',
+                'username': 'test_value_18',
+                'vdom': 'mgmt',
+                'weekday': 'sunday'
+    }
+
+    set_method_mock.assert_called_with('dlp', 'fp-doc-source', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_dlp_fp_doc_source_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'dlp_fp_doc_source': {
+            'date': '3',
+            'file_path': 'test_value_4',
+            'file_pattern': 'test_value_5',
+            'keep_modified': 'enable',
+            'name': 'default_name_7',
+            'password': 'test_value_8',
+            'period': 'none',
+            'remove_deleted': 'enable',
+            'scan_on_creation': 'enable',
+            'scan_subdirectories': 'enable',
+            'sensitivity': 'test_value_13',
+            'server': '192.168.100.14',
+            'server_type': 'samba',
+            'tod_hour': '16',
+            'tod_min': '17',
+            'username': 'test_value_18',
+            'vdom': 'mgmt',
+            'weekday': 'sunday'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_fp_doc_source.fortios_dlp(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('dlp', 'fp-doc-source', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_dlp_fp_doc_source_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'dlp_fp_doc_source': {
+            'date': '3',
+            'file_path': 'test_value_4',
+            'file_pattern': 'test_value_5',
+            'keep_modified': 'enable',
+            'name': 'default_name_7',
+            'password': 'test_value_8',
+            'period': 'none',
+            'remove_deleted': 'enable',
+            'scan_on_creation': 'enable',
+            'scan_subdirectories': 'enable',
+            'sensitivity': 'test_value_13',
+            'server': '192.168.100.14',
+            'server_type': 'samba',
+            'tod_hour': '16',
+            'tod_min': '17',
+            'username': 'test_value_18',
+            'vdom': 'mgmt',
+            'weekday': 'sunday'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_fp_doc_source.fortios_dlp(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('dlp', 'fp-doc-source', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_dlp_fp_doc_source_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dlp_fp_doc_source': {
+            'date': '3',
+            'file_path': 'test_value_4',
+            'file_pattern': 'test_value_5',
+            'keep_modified': 'enable',
+            'name': 'default_name_7',
+            'password': 'test_value_8',
+            'period': 'none',
+            'remove_deleted': 'enable',
+            'scan_on_creation': 'enable',
+            'scan_subdirectories': 'enable',
+            'sensitivity': 'test_value_13',
+            'server': '192.168.100.14',
+            'server_type': 'samba',
+            'tod_hour': '16',
+            'tod_min': '17',
+            'username': 'test_value_18',
+            'vdom': 'mgmt',
+            'weekday': 'sunday'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_fp_doc_source.fortios_dlp(input_data, fos_instance)
+
+    expected_data = {
+        'date': '3',
+                'file-path': 'test_value_4',
+                'file-pattern': 'test_value_5',
+                'keep-modified': 'enable',
+                'name': 'default_name_7',
+                'password': 'test_value_8',
+                'period': 'none',
+                'remove-deleted': 'enable',
+                'scan-on-creation': 'enable',
+                'scan-subdirectories': 'enable',
+                'sensitivity': 'test_value_13',
+                'server': '192.168.100.14',
+                'server-type': 'samba',
+                'tod-hour': '16',
+                'tod-min': '17',
+                'username': 'test_value_18',
+                'vdom': 'mgmt',
+                'weekday': 'sunday'
+    }
+
+    set_method_mock.assert_called_with('dlp', 'fp-doc-source', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_dlp_fp_doc_source_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dlp_fp_doc_source': {
+            'random_attribute_not_valid': 'tag',
+            'date': '3',
+            'file_path': 'test_value_4',
+            'file_pattern': 'test_value_5',
+            'keep_modified': 'enable',
+            'name': 'default_name_7',
+            'password': 'test_value_8',
+            'period': 'none',
+            'remove_deleted': 'enable',
+            'scan_on_creation': 'enable',
+            'scan_subdirectories': 'enable',
+            'sensitivity': 'test_value_13',
+            'server': '192.168.100.14',
+            'server_type': 'samba',
+            'tod_hour': '16',
+            'tod_min': '17',
+            'username': 'test_value_18',
+            'vdom': 'mgmt',
+            'weekday': 'sunday'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_fp_doc_source.fortios_dlp(input_data, fos_instance)
+
+    expected_data = {
+        'date': '3',
+                'file-path': 'test_value_4',
+                'file-pattern': 'test_value_5',
+                'keep-modified': 'enable',
+                'name': 'default_name_7',
+                'password': 'test_value_8',
+                'period': 'none',
+                'remove-deleted': 'enable',
+                'scan-on-creation': 'enable',
+                'scan-subdirectories': 'enable',
+                'sensitivity': 'test_value_13',
+                'server': '192.168.100.14',
+                'server-type': 'samba',
+                'tod-hour': '16',
+                'tod-min': '17',
+                'username': 'test_value_18',
+                'vdom': 'mgmt',
+                'weekday': 'sunday'
+    }
+
+    set_method_mock.assert_called_with('dlp', 'fp-doc-source', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_dlp_fp_sensitivity.py b/test/units/modules/network/fortios/test_fortios_dlp_fp_sensitivity.py
new file mode 100644
index 0000000000..132f51281a
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_dlp_fp_sensitivity.py
@@ -0,0 +1,199 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_dlp_fp_sensitivity
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_dlp_fp_sensitivity.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_dlp_fp_sensitivity_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dlp_fp_sensitivity': {
+            'name': 'default_name_3'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_fp_sensitivity.fortios_dlp(input_data, fos_instance)
+
+    expected_data = {
+        'name': 'default_name_3'
+    }
+
+    set_method_mock.assert_called_with('dlp', 'fp-sensitivity', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_dlp_fp_sensitivity_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dlp_fp_sensitivity': {
+            'name': 'default_name_3'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_fp_sensitivity.fortios_dlp(input_data, fos_instance)
+
+    expected_data = {
+        'name': 'default_name_3'
+    }
+
+    set_method_mock.assert_called_with('dlp', 'fp-sensitivity', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_dlp_fp_sensitivity_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'dlp_fp_sensitivity': {
+            'name': 'default_name_3'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_fp_sensitivity.fortios_dlp(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('dlp', 'fp-sensitivity', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_dlp_fp_sensitivity_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'dlp_fp_sensitivity': {
+            'name': 'default_name_3'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_fp_sensitivity.fortios_dlp(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('dlp', 'fp-sensitivity', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_dlp_fp_sensitivity_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dlp_fp_sensitivity': {
+            'name': 'default_name_3'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_fp_sensitivity.fortios_dlp(input_data, fos_instance)
+
+    expected_data = {
+        'name': 'default_name_3'
+    }
+
+    set_method_mock.assert_called_with('dlp', 'fp-sensitivity', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_dlp_fp_sensitivity_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dlp_fp_sensitivity': {
+            'random_attribute_not_valid': 'tag',
+            'name': 'default_name_3'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_fp_sensitivity.fortios_dlp(input_data, fos_instance)
+
+    expected_data = {
+        'name': 'default_name_3'
+    }
+
+    set_method_mock.assert_called_with('dlp', 'fp-sensitivity', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_dlp_sensor.py b/test/units/modules/network/fortios/test_fortios_dlp_sensor.py
new file mode 100644
index 0000000000..91dc19373d
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_dlp_sensor.py
@@ -0,0 +1,289 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_dlp_sensor
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_dlp_sensor.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_dlp_sensor_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dlp_sensor': {
+            'comment': 'Comment.',
+            'dlp_log': 'enable',
+            'extended_log': 'enable',
+            'flow_based': 'enable',
+            'full_archive_proto': 'smtp',
+            'nac_quar_log': 'enable',
+            'name': 'default_name_9',
+            'options': 'test_value_10,',
+            'replacemsg_group': 'test_value_11',
+            'summary_proto': 'smtp'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_sensor.fortios_dlp(input_data, fos_instance)
+
+    expected_data = {
+        'comment': 'Comment.',
+        'dlp-log': 'enable',
+        'extended-log': 'enable',
+        'flow-based': 'enable',
+        'full-archive-proto': 'smtp',
+        'nac-quar-log': 'enable',
+        'name': 'default_name_9',
+                'options': 'test_value_10,',
+                'replacemsg-group': 'test_value_11',
+                'summary-proto': 'smtp'
+    }
+
+    set_method_mock.assert_called_with('dlp', 'sensor', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_dlp_sensor_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dlp_sensor': {
+            'comment': 'Comment.',
+            'dlp_log': 'enable',
+            'extended_log': 'enable',
+            'flow_based': 'enable',
+            'full_archive_proto': 'smtp',
+            'nac_quar_log': 'enable',
+            'name': 'default_name_9',
+            'options': 'test_value_10,',
+            'replacemsg_group': 'test_value_11',
+            'summary_proto': 'smtp'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_sensor.fortios_dlp(input_data, fos_instance)
+
+    expected_data = {
+        'comment': 'Comment.',
+        'dlp-log': 'enable',
+        'extended-log': 'enable',
+        'flow-based': 'enable',
+        'full-archive-proto': 'smtp',
+        'nac-quar-log': 'enable',
+        'name': 'default_name_9',
+                'options': 'test_value_10,',
+                'replacemsg-group': 'test_value_11',
+                'summary-proto': 'smtp'
+    }
+
+    set_method_mock.assert_called_with('dlp', 'sensor', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_dlp_sensor_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'dlp_sensor': {
+            'comment': 'Comment.',
+            'dlp_log': 'enable',
+            'extended_log': 'enable',
+            'flow_based': 'enable',
+            'full_archive_proto': 'smtp',
+            'nac_quar_log': 'enable',
+            'name': 'default_name_9',
+            'options': 'test_value_10,',
+            'replacemsg_group': 'test_value_11',
+            'summary_proto': 'smtp'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_sensor.fortios_dlp(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('dlp', 'sensor', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_dlp_sensor_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'dlp_sensor': {
+            'comment': 'Comment.',
+            'dlp_log': 'enable',
+            'extended_log': 'enable',
+            'flow_based': 'enable',
+            'full_archive_proto': 'smtp',
+            'nac_quar_log': 'enable',
+            'name': 'default_name_9',
+            'options': 'test_value_10,',
+            'replacemsg_group': 'test_value_11',
+            'summary_proto': 'smtp'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_sensor.fortios_dlp(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('dlp', 'sensor', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_dlp_sensor_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dlp_sensor': {
+            'comment': 'Comment.',
+            'dlp_log': 'enable',
+            'extended_log': 'enable',
+            'flow_based': 'enable',
+            'full_archive_proto': 'smtp',
+            'nac_quar_log': 'enable',
+            'name': 'default_name_9',
+            'options': 'test_value_10,',
+            'replacemsg_group': 'test_value_11',
+            'summary_proto': 'smtp'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_sensor.fortios_dlp(input_data, fos_instance)
+
+    expected_data = {
+        'comment': 'Comment.',
+        'dlp-log': 'enable',
+        'extended-log': 'enable',
+        'flow-based': 'enable',
+        'full-archive-proto': 'smtp',
+        'nac-quar-log': 'enable',
+        'name': 'default_name_9',
+                'options': 'test_value_10,',
+                'replacemsg-group': 'test_value_11',
+                'summary-proto': 'smtp'
+    }
+
+    set_method_mock.assert_called_with('dlp', 'sensor', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_dlp_sensor_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dlp_sensor': {
+            'random_attribute_not_valid': 'tag',
+            'comment': 'Comment.',
+            'dlp_log': 'enable',
+            'extended_log': 'enable',
+            'flow_based': 'enable',
+            'full_archive_proto': 'smtp',
+            'nac_quar_log': 'enable',
+            'name': 'default_name_9',
+            'options': 'test_value_10,',
+            'replacemsg_group': 'test_value_11',
+            'summary_proto': 'smtp'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_sensor.fortios_dlp(input_data, fos_instance)
+
+    expected_data = {
+        'comment': 'Comment.',
+        'dlp-log': 'enable',
+        'extended-log': 'enable',
+        'flow-based': 'enable',
+        'full-archive-proto': 'smtp',
+        'nac-quar-log': 'enable',
+        'name': 'default_name_9',
+                'options': 'test_value_10,',
+                'replacemsg-group': 'test_value_11',
+                'summary-proto': 'smtp'
+    }
+
+    set_method_mock.assert_called_with('dlp', 'sensor', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_dlp_settings.py b/test/units/modules/network/fortios/test_fortios_dlp_settings.py
new file mode 100644
index 0000000000..5e0f79e83b
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_dlp_settings.py
@@ -0,0 +1,183 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_dlp_settings
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_dlp_settings.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_dlp_settings_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dlp_settings': {
+            'cache_mem_percent': '3',
+            'chunk_size': '4',
+            'db_mode': 'stop-adding',
+            'size': '6',
+            'storage_device': 'test_value_7'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_settings.fortios_dlp(input_data, fos_instance)
+
+    expected_data = {
+        'cache-mem-percent': '3',
+        'chunk-size': '4',
+        'db-mode': 'stop-adding',
+        'size': '6',
+                'storage-device': 'test_value_7'
+    }
+
+    set_method_mock.assert_called_with('dlp', 'settings', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_dlp_settings_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dlp_settings': {
+            'cache_mem_percent': '3',
+            'chunk_size': '4',
+            'db_mode': 'stop-adding',
+            'size': '6',
+            'storage_device': 'test_value_7'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_settings.fortios_dlp(input_data, fos_instance)
+
+    expected_data = {
+        'cache-mem-percent': '3',
+        'chunk-size': '4',
+        'db-mode': 'stop-adding',
+        'size': '6',
+                'storage-device': 'test_value_7'
+    }
+
+    set_method_mock.assert_called_with('dlp', 'settings', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_dlp_settings_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dlp_settings': {
+            'cache_mem_percent': '3',
+            'chunk_size': '4',
+            'db_mode': 'stop-adding',
+            'size': '6',
+            'storage_device': 'test_value_7'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_settings.fortios_dlp(input_data, fos_instance)
+
+    expected_data = {
+        'cache-mem-percent': '3',
+        'chunk-size': '4',
+        'db-mode': 'stop-adding',
+        'size': '6',
+                'storage-device': 'test_value_7'
+    }
+
+    set_method_mock.assert_called_with('dlp', 'settings', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_dlp_settings_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dlp_settings': {
+            'random_attribute_not_valid': 'tag',
+            'cache_mem_percent': '3',
+            'chunk_size': '4',
+            'db_mode': 'stop-adding',
+            'size': '6',
+            'storage_device': 'test_value_7'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dlp_settings.fortios_dlp(input_data, fos_instance)
+
+    expected_data = {
+        'cache-mem-percent': '3',
+        'chunk-size': '4',
+        'db-mode': 'stop-adding',
+        'size': '6',
+                'storage-device': 'test_value_7'
+    }
+
+    set_method_mock.assert_called_with('dlp', 'settings', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_dnsfilter_domain_filter.py b/test/units/modules/network/fortios/test_fortios_dnsfilter_domain_filter.py
new file mode 100644
index 0000000000..2424e3b84b
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_dnsfilter_domain_filter.py
@@ -0,0 +1,219 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_dnsfilter_domain_filter
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_dnsfilter_domain_filter.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_dnsfilter_domain_filter_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dnsfilter_domain_filter': {
+            'comment': 'Optional comments.',
+            'id': '4',
+            'name': 'default_name_5'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dnsfilter_domain_filter.fortios_dnsfilter(input_data, fos_instance)
+
+    expected_data = {
+        'comment': 'Optional comments.',
+        'id': '4',
+        'name': 'default_name_5'
+    }
+
+    set_method_mock.assert_called_with('dnsfilter', 'domain-filter', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_dnsfilter_domain_filter_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dnsfilter_domain_filter': {
+            'comment': 'Optional comments.',
+            'id': '4',
+            'name': 'default_name_5'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dnsfilter_domain_filter.fortios_dnsfilter(input_data, fos_instance)
+
+    expected_data = {
+        'comment': 'Optional comments.',
+        'id': '4',
+        'name': 'default_name_5'
+    }
+
+    set_method_mock.assert_called_with('dnsfilter', 'domain-filter', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_dnsfilter_domain_filter_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'dnsfilter_domain_filter': {
+            'comment': 'Optional comments.',
+            'id': '4',
+            'name': 'default_name_5'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dnsfilter_domain_filter.fortios_dnsfilter(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('dnsfilter', 'domain-filter', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_dnsfilter_domain_filter_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'dnsfilter_domain_filter': {
+            'comment': 'Optional comments.',
+            'id': '4',
+            'name': 'default_name_5'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dnsfilter_domain_filter.fortios_dnsfilter(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('dnsfilter', 'domain-filter', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_dnsfilter_domain_filter_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dnsfilter_domain_filter': {
+            'comment': 'Optional comments.',
+            'id': '4',
+            'name': 'default_name_5'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dnsfilter_domain_filter.fortios_dnsfilter(input_data, fos_instance)
+
+    expected_data = {
+        'comment': 'Optional comments.',
+        'id': '4',
+        'name': 'default_name_5'
+    }
+
+    set_method_mock.assert_called_with('dnsfilter', 'domain-filter', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_dnsfilter_domain_filter_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dnsfilter_domain_filter': {
+            'random_attribute_not_valid': 'tag',
+            'comment': 'Optional comments.',
+            'id': '4',
+            'name': 'default_name_5'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dnsfilter_domain_filter.fortios_dnsfilter(input_data, fos_instance)
+
+    expected_data = {
+        'comment': 'Optional comments.',
+        'id': '4',
+        'name': 'default_name_5'
+    }
+
+    set_method_mock.assert_called_with('dnsfilter', 'domain-filter', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_dnsfilter_profile.py b/test/units/modules/network/fortios/test_fortios_dnsfilter_profile.py
new file mode 100644
index 0000000000..ef536a674c
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_dnsfilter_profile.py
@@ -0,0 +1,289 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_dnsfilter_profile
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_dnsfilter_profile.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_dnsfilter_profile_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dnsfilter_profile': {
+            'block_action': 'block',
+            'block_botnet': 'disable',
+            'comment': 'Comment.',
+            'log_all_domain': 'enable',
+            'name': 'default_name_7',
+            'redirect_portal': 'test_value_8',
+            'safe_search': 'disable',
+            'sdns_domain_log': 'enable',
+            'sdns_ftgd_err_log': 'enable',
+            'youtube_restrict': 'strict'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dnsfilter_profile.fortios_dnsfilter(input_data, fos_instance)
+
+    expected_data = {
+        'block-action': 'block',
+        'block-botnet': 'disable',
+        'comment': 'Comment.',
+        'log-all-domain': 'enable',
+        'name': 'default_name_7',
+                'redirect-portal': 'test_value_8',
+                'safe-search': 'disable',
+                'sdns-domain-log': 'enable',
+                'sdns-ftgd-err-log': 'enable',
+                'youtube-restrict': 'strict'
+    }
+
+    set_method_mock.assert_called_with('dnsfilter', 'profile', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_dnsfilter_profile_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dnsfilter_profile': {
+            'block_action': 'block',
+            'block_botnet': 'disable',
+            'comment': 'Comment.',
+            'log_all_domain': 'enable',
+            'name': 'default_name_7',
+            'redirect_portal': 'test_value_8',
+            'safe_search': 'disable',
+            'sdns_domain_log': 'enable',
+            'sdns_ftgd_err_log': 'enable',
+            'youtube_restrict': 'strict'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dnsfilter_profile.fortios_dnsfilter(input_data, fos_instance)
+
+    expected_data = {
+        'block-action': 'block',
+        'block-botnet': 'disable',
+        'comment': 'Comment.',
+        'log-all-domain': 'enable',
+        'name': 'default_name_7',
+                'redirect-portal': 'test_value_8',
+                'safe-search': 'disable',
+                'sdns-domain-log': 'enable',
+                'sdns-ftgd-err-log': 'enable',
+                'youtube-restrict': 'strict'
+    }
+
+    set_method_mock.assert_called_with('dnsfilter', 'profile', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_dnsfilter_profile_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'dnsfilter_profile': {
+            'block_action': 'block',
+            'block_botnet': 'disable',
+            'comment': 'Comment.',
+            'log_all_domain': 'enable',
+            'name': 'default_name_7',
+            'redirect_portal': 'test_value_8',
+            'safe_search': 'disable',
+            'sdns_domain_log': 'enable',
+            'sdns_ftgd_err_log': 'enable',
+            'youtube_restrict': 'strict'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dnsfilter_profile.fortios_dnsfilter(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('dnsfilter', 'profile', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_dnsfilter_profile_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'dnsfilter_profile': {
+            'block_action': 'block',
+            'block_botnet': 'disable',
+            'comment': 'Comment.',
+            'log_all_domain': 'enable',
+            'name': 'default_name_7',
+            'redirect_portal': 'test_value_8',
+            'safe_search': 'disable',
+            'sdns_domain_log': 'enable',
+            'sdns_ftgd_err_log': 'enable',
+            'youtube_restrict': 'strict'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dnsfilter_profile.fortios_dnsfilter(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('dnsfilter', 'profile', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_dnsfilter_profile_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dnsfilter_profile': {
+            'block_action': 'block',
+            'block_botnet': 'disable',
+            'comment': 'Comment.',
+            'log_all_domain': 'enable',
+            'name': 'default_name_7',
+            'redirect_portal': 'test_value_8',
+            'safe_search': 'disable',
+            'sdns_domain_log': 'enable',
+            'sdns_ftgd_err_log': 'enable',
+            'youtube_restrict': 'strict'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dnsfilter_profile.fortios_dnsfilter(input_data, fos_instance)
+
+    expected_data = {
+        'block-action': 'block',
+        'block-botnet': 'disable',
+        'comment': 'Comment.',
+        'log-all-domain': 'enable',
+        'name': 'default_name_7',
+                'redirect-portal': 'test_value_8',
+                'safe-search': 'disable',
+                'sdns-domain-log': 'enable',
+                'sdns-ftgd-err-log': 'enable',
+                'youtube-restrict': 'strict'
+    }
+
+    set_method_mock.assert_called_with('dnsfilter', 'profile', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_dnsfilter_profile_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'dnsfilter_profile': {
+            'random_attribute_not_valid': 'tag',
+            'block_action': 'block',
+            'block_botnet': 'disable',
+            'comment': 'Comment.',
+            'log_all_domain': 'enable',
+            'name': 'default_name_7',
+            'redirect_portal': 'test_value_8',
+            'safe_search': 'disable',
+            'sdns_domain_log': 'enable',
+            'sdns_ftgd_err_log': 'enable',
+            'youtube_restrict': 'strict'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_dnsfilter_profile.fortios_dnsfilter(input_data, fos_instance)
+
+    expected_data = {
+        'block-action': 'block',
+        'block-botnet': 'disable',
+        'comment': 'Comment.',
+        'log-all-domain': 'enable',
+        'name': 'default_name_7',
+                'redirect-portal': 'test_value_8',
+                'safe-search': 'disable',
+                'sdns-domain-log': 'enable',
+                'sdns-ftgd-err-log': 'enable',
+                'youtube-restrict': 'strict'
+    }
+
+    set_method_mock.assert_called_with('dnsfilter', 'profile', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_endpoint_control_client.py b/test/units/modules/network/fortios/test_fortios_endpoint_control_client.py
new file mode 100644
index 0000000000..d67f85c039
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_endpoint_control_client.py
@@ -0,0 +1,249 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_endpoint_control_client
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_endpoint_control_client.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_endpoint_control_client_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'endpoint_control_client': {
+            'ad_groups': 'test_value_3',
+            'ftcl_uid': 'test_value_4',
+            'id': '5',
+            'info': 'test_value_6',
+            'src_ip': 'test_value_7',
+            'src_mac': 'test_value_8'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_endpoint_control_client.fortios_endpoint_control(input_data, fos_instance)
+
+    expected_data = {
+        'ad-groups': 'test_value_3',
+        'ftcl-uid': 'test_value_4',
+        'id': '5',
+        'info': 'test_value_6',
+                'src-ip': 'test_value_7',
+                'src-mac': 'test_value_8'
+    }
+
+    set_method_mock.assert_called_with('endpoint-control', 'client', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_endpoint_control_client_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'endpoint_control_client': {
+            'ad_groups': 'test_value_3',
+            'ftcl_uid': 'test_value_4',
+            'id': '5',
+            'info': 'test_value_6',
+            'src_ip': 'test_value_7',
+            'src_mac': 'test_value_8'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_endpoint_control_client.fortios_endpoint_control(input_data, fos_instance)
+
+    expected_data = {
+        'ad-groups': 'test_value_3',
+        'ftcl-uid': 'test_value_4',
+        'id': '5',
+        'info': 'test_value_6',
+                'src-ip': 'test_value_7',
+                'src-mac': 'test_value_8'
+    }
+
+    set_method_mock.assert_called_with('endpoint-control', 'client', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_endpoint_control_client_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'endpoint_control_client': {
+            'ad_groups': 'test_value_3',
+            'ftcl_uid': 'test_value_4',
+            'id': '5',
+            'info': 'test_value_6',
+            'src_ip': 'test_value_7',
+            'src_mac': 'test_value_8'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_endpoint_control_client.fortios_endpoint_control(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('endpoint-control', 'client', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_endpoint_control_client_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'endpoint_control_client': {
+            'ad_groups': 'test_value_3',
+            'ftcl_uid': 'test_value_4',
+            'id': '5',
+            'info': 'test_value_6',
+            'src_ip': 'test_value_7',
+            'src_mac': 'test_value_8'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_endpoint_control_client.fortios_endpoint_control(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('endpoint-control', 'client', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_endpoint_control_client_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'endpoint_control_client': {
+            'ad_groups': 'test_value_3',
+            'ftcl_uid': 'test_value_4',
+            'id': '5',
+            'info': 'test_value_6',
+            'src_ip': 'test_value_7',
+            'src_mac': 'test_value_8'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_endpoint_control_client.fortios_endpoint_control(input_data, fos_instance)
+
+    expected_data = {
+        'ad-groups': 'test_value_3',
+        'ftcl-uid': 'test_value_4',
+        'id': '5',
+        'info': 'test_value_6',
+                'src-ip': 'test_value_7',
+                'src-mac': 'test_value_8'
+    }
+
+    set_method_mock.assert_called_with('endpoint-control', 'client', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_endpoint_control_client_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'endpoint_control_client': {
+            'random_attribute_not_valid': 'tag',
+            'ad_groups': 'test_value_3',
+            'ftcl_uid': 'test_value_4',
+            'id': '5',
+            'info': 'test_value_6',
+            'src_ip': 'test_value_7',
+            'src_mac': 'test_value_8'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_endpoint_control_client.fortios_endpoint_control(input_data, fos_instance)
+
+    expected_data = {
+        'ad-groups': 'test_value_3',
+        'ftcl-uid': 'test_value_4',
+        'id': '5',
+        'info': 'test_value_6',
+                'src-ip': 'test_value_7',
+                'src-mac': 'test_value_8'
+    }
+
+    set_method_mock.assert_called_with('endpoint-control', 'client', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
