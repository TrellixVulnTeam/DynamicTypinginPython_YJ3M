commit bf307076700760e9c986086c441d9b529c8ffc9d
Author: Richard C Isaacson <richard.c.isaacson@gmail.com>
Date:   Mon Feb 24 16:56:08 2014 -0600

    If you try to resize a lvol to the current size return a changed=False and don't fail.
    
    This addresses GH-5165 and adds the ability to check if a lvol exists.
    
    The tests for this don't fit nicely into the current integration tests so they are below.
    
    ```
    ---
    
    - name: remove any existing lv=one of vg=main
      lvol: lv=one vg=main state=absent
    
    - name: remove any existing lv=two of vg=main
      lvol: lv=two vg=main state=absent
    
    - name: check to see if lv=one of vg=main exists
      lvol: lv=one vg=main state=present
      ignore_errors: true
      register: lvol_result0
    
    - name: Assert that we will get a "No size given."
      assert:
        that:
          - "'No size given.' in lvol_result0.msg"
    
    - name: create lv=one of vg=main sized 30g
      lvol: lv=one size=30g vg=main state=present
      register: lvol_result1
    
    - name: Assert that we made changes."
      assert:
        that:
          - "lvol_result1.changed == True"
    
    - name: check to see if lv=one of vg=main exists
      lvol: lv=one vg=main state=present
      register: lvol_result2
    
    - name: Assert that we did not make changes."
      assert:
        that:
          - "lvol_result2.changed == False"
    
    - name: remove lv=one of vg=main
      lvol: lv=one vg=main state=absent
    
    - name: create lv=two of vg=main sized 30G
      lvol: lv=two size=30G vg=main state=present
      register: lvol_result3
    
    - name: Assert that we made changes."
      assert:
        that:
          - "lvol_result3.changed == True"
    
    - name: reduce lv=two of vg=main to 15G
      lvol: lv=two size=15G vg=main state=present
      register: lvol_result4
    
    - name: Assert that we made changes."
      assert:
        that:
          - "lvol_result4.changed == True"
    
    - name: increase lv=two of vg=main to 30G
      lvol: lv=two size=30G vg=main state=present
      register: lvol_result5
    
    - name: Assert that we made changes."
      assert:
        that:
          - "lvol_result5.changed == True"
    
    - name: create lv=two of vg=main sized 30G when already exists at 30G
      lvol: lv=two size=30g vg=main state=present
      register: lvol_result6
    
    - name: Assert that we did not make changes."
      assert:
        that:
          - "lvol_result6.changed == False"
    
    - name: remove lv=two of vg=main
      lvol: lv=two vg=main state=absent
    ```

diff --git a/library/system/lvol b/library/system/lvol
index 65e6f97985..80528fa590 100644
--- a/library/system/lvol
+++ b/library/system/lvol
@@ -72,8 +72,10 @@ EXAMPLES = '''
 '''
 
 import re
+
 decimal_point = re.compile(r"(\.|,)")
 
+
 def parse_lvs(data):
     lvs = []
     for line in data.splitlines():
@@ -84,9 +86,10 @@ def parse_lvs(data):
         })
     return lvs
 
+
 def main():
     module = AnsibleModule(
-        argument_spec = dict(
+        argument_spec=dict(
             vg=dict(required=True),
             lv=dict(required=True),
             size=dict(),
@@ -102,13 +105,10 @@ def main():
     size_opt = 'L'
     size_unit = 'm'
 
-    if state=='present' and not size:
-        module.fail_json(msg="No size given.")
-
     if size:
         # LVCREATE(8) -l --extents option with percentage
         if '%' in size:
-            size_parts = size.split('%',1)
+            size_parts = size.split('%', 1)
             size_percent = int(size_parts[0])
             if size_percent > 100:
                 module.fail_json(msg="Size percentage cannot be larger than 100%")
@@ -141,13 +141,15 @@ def main():
         unit = 'm'
     else:
         unit = size_unit
-    rc,current_lvs,err = module.run_command("lvs --noheadings -o lv_name,size --units %s --separator ';' %s" % (unit, vg))
+
+    rc, current_lvs, err = module.run_command(
+        "lvs --noheadings -o lv_name,size --units %s --separator ';' %s" % (unit, vg))
 
     if rc != 0:
         if state == 'absent':
-            module.exit_json(changed=False,stdout="Volume group %s does not exist." % vg, stderr=False)
+            module.exit_json(changed=False, stdout="Volume group %s does not exist." % vg, stderr=False)
         else:
-            module.fail_json(msg="Volume group %s does not exist."%vg, rc=rc, err=err)
+            module.fail_json(msg="Volume group %s does not exist." % vg, rc=rc, err=err)
 
     changed = False
 
@@ -160,6 +162,12 @@ def main():
     else:
         this_lv = None
 
+    if state == 'present' and not size:
+        if this_lv is None:
+            module.fail_json(msg="No size given.")
+        else:
+            module.exit_json(changed=False, vg=vg, lv=this_lv['name'], size=this_lv['size'])
+
     msg = ''
     if this_lv is None:
         if state == 'present':
@@ -167,21 +175,21 @@ def main():
             if module.check_mode:
                 changed = True
             else:
-                rc,_,err = module.run_command("lvcreate -n %s -%s %s%s %s"%(lv, size_opt, size, size_unit, vg))
+                rc, _, err = module.run_command("lvcreate -n %s -%s %s%s %s" % (lv, size_opt, size, size_unit, vg))
                 if rc == 0:
                     changed = True
                 else:
-                    module.fail_json(msg="Creating logical volume '%s' failed"%(lv), rc=rc, err=err)
+                    module.fail_json(msg="Creating logical volume '%s' failed" % (lv), rc=rc, err=err)
     else:
         if state == 'absent':
             ### remove LV
             if module.check_mode:
                 module.exit_json(changed=True)
-            rc,_,err = module.run_command("lvremove --force %s/%s"%(vg,this_lv['name']))
+            rc, _, err = module.run_command("lvremove --force %s/%s" % (vg, this_lv['name']))
             if rc == 0:
                 module.exit_json(changed=True)
             else:
-                module.fail_json(msg="Failed to remove logical volume %s"%(lv),rc=rc, err=err)
+                module.fail_json(msg="Failed to remove logical volume %s" % (lv), rc=rc, err=err)
 
         elif size_opt == 'l':
             module.exit_json(changed=False, msg="Resizing extents with percentage not supported.")
@@ -197,14 +205,17 @@ def main():
                 if module.check_mode:
                     changed = True
                 else:
-                    rc,_,err = module.run_command("%s -%s %s%s %s/%s"%(tool, size_opt, size, size_unit, vg, this_lv['name']))
+                    rc, _, err = module.run_command("%s -%s %s%s %s/%s" % (tool, size_opt, size, size_unit, vg, this_lv['name']))
                     if rc == 0:
                         changed = True
+                    elif "matches existing size" in err:
+                        module.exit_json(changed=False, vg=vg, lv=this_lv['name'], size=this_lv['size'])
                     else:
-                        module.fail_json(msg="Unable to resize %s to %s%s"%(lv,size,size_unit),rc=rc,err=err)
+                        module.fail_json(msg="Unable to resize %s to %s%s" % (lv, size, size_unit), rc=rc, err=err)
 
-    module.exit_json(changed=changed,msg=msg)
+    module.exit_json(changed=changed, msg=msg)
 
 # import module snippets
 from ansible.module_utils.basic import *
+
 main()
