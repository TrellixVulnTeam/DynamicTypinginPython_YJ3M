commit c0cfd1db459bfa73a184f73854ad309052af5d10
Author: Thierno IB. BARRY <ibrahima.br@gmail.com>
Date:   Tue Sep 27 00:18:42 2016 +0200

    elasticsearch_plugin: rewrite module to not use unsupported parameters (#2839)
    
    * elasticsearch_plugin: rewrite module to not use unsupported parameters (#1785)
    
    Avoid using parameters when they are not needed (#1785)
    
    * elasticsearch_plugin: add version only during plugin installation and parse plugin name for its removal
    
    * elasticsearch_plugin: join command args before running it

diff --git a/lib/ansible/modules/extras/packaging/elasticsearch_plugin.py b/lib/ansible/modules/extras/packaging/elasticsearch_plugin.py
index f850d46dbd..338d187809 100644
--- a/lib/ansible/modules/extras/packaging/elasticsearch_plugin.py
+++ b/lib/ansible/modules/extras/packaging/elasticsearch_plugin.py
@@ -39,7 +39,7 @@ options:
         description:
             - Desired state of a plugin.
         required: False
-        choices: [present, absent]
+        choices: ["present", "absent"]
         default: present
     url:
         description:
@@ -92,6 +92,10 @@ EXAMPLES = '''
 - elasticsearch_plugin: state=absent name="mobz/elasticsearch-head"
 '''
 
+PACKAGE_STATE_MAP = dict(
+    present="install",
+    absent="remove"
+)
 
 def parse_plugin_repo(string):
     elements = string.split("/")
@@ -111,11 +115,9 @@ def parse_plugin_repo(string):
 
     return repo
 
-
 def is_plugin_present(plugin_dir, working_dir):
     return os.path.isdir(os.path.join(working_dir, plugin_dir))
 
-
 def parse_error(string):
     reason = "reason: "
     try:
@@ -123,18 +125,49 @@ def parse_error(string):
     except ValueError:
         return string
 
+def install_plugin(module, plugin_bin, plugin_name, version, url, proxy_host, proxy_port, timeout):
+    cmd_args = [plugin_bin, PACKAGE_STATE_MAP["present"], plugin_name]
 
-def main():
+    if version:
+        name = name + '/' + version
 
-    package_state_map = dict(
-        present="install",
-        absent="remove"
-    )
+    if proxy_host and proxy_port:
+        cmd_args.append("-DproxyHost=%s -DproxyPort=%s" % (proxy_host, proxy_port))
+
+    if url:
+        cmd_args.append("--url %s" % url)
+
+    if timeout:
+        cmd_args.append("--timeout %s" % timeout)
+
+    cmd = " ".join(cmd_args)
+
+    rc, out, err = module.run_command(cmd)
+
+    if rc != 0:
+        reason = parse_error(out)
+        module.fail_json(msg=reason)
+    
+    return True, cmd, out, err
+
+def remove_plugin(module, plugin_bin, plugin_name):
+    cmd_args = [plugin_bin, PACKAGE_STATE_MAP["absent"], parse_plugin_repo(plugin_name)]
+
+    cmd = " ".join(cmd_args)
 
+    rc, out, err = module.run_command(cmd)
+
+    if rc != 0:
+        reason = parse_error(out)
+        module.fail_json(msg=reason)
+    
+    return True, cmd, out, err
+
+def main():
     module = AnsibleModule(
         argument_spec=dict(
             name=dict(required=True),
-            state=dict(default="present", choices=package_state_map.keys()),
+            state=dict(default="present", choices=PACKAGE_STATE_MAP.keys()),
             url=dict(default=None),
             timeout=dict(default="1m"),
             plugin_bin=dict(default="/usr/share/elasticsearch/bin/plugin", type="path"),
@@ -145,46 +178,31 @@ def main():
         )
     )
 
-    name = module.params["name"]
-    state = module.params["state"]
-    url = module.params["url"]
-    timeout = module.params["timeout"]
-    plugin_bin = module.params["plugin_bin"]
-    plugin_dir = module.params["plugin_dir"]
-    proxy_host = module.params["proxy_host"]
-    proxy_port = module.params["proxy_port"]
-    version = module.params["version"]
+    name        = module.params["name"]
+    state       = module.params["state"]
+    url         = module.params["url"]
+    timeout     = module.params["timeout"]
+    plugin_bin  = module.params["plugin_bin"]
+    plugin_dir  = module.params["plugin_dir"]
+    proxy_host  = module.params["proxy_host"]
+    proxy_port  = module.params["proxy_port"]
+    version     = module.params["version"]
 
     present = is_plugin_present(parse_plugin_repo(name), plugin_dir)
 
     # skip if the state is correct
     if (present and state == "present") or (state == "absent" and not present):
-        module.exit_json(changed=False, name=name)
-        
-    if (version):
-       name = name + '/' + version
-
-    cmd_args = [plugin_bin, package_state_map[state], name]
+        module.exit_json(changed=False, name=name, state=state)
 
-    if proxy_host and proxy_port:
-        cmd_args.append("-DproxyHost=%s -DproxyPort=%s" % (proxy_host, proxy_port))
+    if state == "present":
+        changed, cmd, out, err = install_plugin(module, plugin_bin, name, version, url, proxy_host, proxy_port, timeout)
 
-    if url:
-        cmd_args.append("--url %s" % url)
-
-    if timeout:
-        cmd_args.append("--timeout %s" % timeout)
-
-    cmd = " ".join(cmd_args)
-
-    rc, out, err = module.run_command(cmd)
-
-    if rc != 0:
-        reason = parse_error(out)
-        module.fail_json(msg=reason)
+    elif state == "absent":
+        changed, cmd, out, err = remove_plugin(module, plugin_bin, name)
 
-    module.exit_json(changed=True, cmd=cmd, name=name, state=state, url=url, timeout=timeout, stdout=out, stderr=err)
+    module.exit_json(changed=changed, cmd=cmd, name=name, state=state, url=url, timeout=timeout, stdout=out, stderr=err)
 
 from ansible.module_utils.basic import *
 
-main()
+if __name__ == '__main__':
+    main()
