commit f8c97d6e79a7bc5cf23136e763ac07032e3176fc
Author: Michael DeHaan <michael.dehaan@gmail.com>
Date:   Sat Aug 10 18:58:45 2013 -0400

    Style/docs cleanup, and also improve an error message.

diff --git a/lib/ansible/runner/__init__.py b/lib/ansible/runner/__init__.py
index 7a5290f3c7..7f9e18aa1c 100644
--- a/lib/ansible/runner/__init__.py
+++ b/lib/ansible/runner/__init__.py
@@ -737,7 +737,10 @@ class Runner(object):
 
         # error handling on this seems a little aggressive?
         if result['rc'] != 0:
-            output = 'could not create temporary directory, SSH (%s) exited with result %d' % (cmd, result['rc'])
+            if result['rc'] == 5:
+                output = 'Authentication failure.'
+            else:
+                output = 'Authentication or permission failure.  In some cases, you may have been able to authenticate and did not have permissions on the remote directory. Consider changing the remote temp path in ansible.cfg to a path rooted in "/tmp". Failed command was: %s, exited with result %d' % (cmd, result['rc'])
             if 'stdout' in result and result['stdout'] != '':
                 output = output + ": %s" % result['stdout']
             raise errors.AnsibleError(output)
diff --git a/lib/ansible/runner/action_plugins/synchronize.py b/lib/ansible/runner/action_plugins/synchronize.py
index fc6e70f4ab..87264475da 100644
--- a/lib/ansible/runner/action_plugins/synchronize.py
+++ b/lib/ansible/runner/action_plugins/synchronize.py
@@ -26,12 +26,7 @@ class ActionModule(object):
     def __init__(self, runner):
         self.runner = runner
 
-    def _process_origin(
-        self,
-        host,
-        path,
-        user,
-        ):
+    def _process_origin(self, host, path, user):
 
         if not host in ['127.0.0.1', 'localhost']:
             return '%s@%s:%s' % (user, host, path)
@@ -43,16 +38,9 @@ class ActionModule(object):
         if inject.get('delegate_to') is None:
             inject['delegate_to'] = '127.0.0.1'
 
-    def run(
-        self,
-        conn,
-        tmp,
-        module_name,
-        module_args,
-        inject,
-        complex_args=None,
-        **kwargs
-        ):
+    def run(self, conn, tmp, module_name, module_args, 
+        inject, complex_args=None, **kwargs):
+
         ''' generates params and passes them on to the rsync module '''
 
         # load up options
@@ -77,9 +65,7 @@ class ActionModule(object):
         if not dest_host is src_host:
             user = inject.get('ansible_ssh_user',
                               self.runner.remote_user)
-            private_key = \
-                inject.get('ansible_ssh_private_key_file',
-                           self.runner.private_key_file)
+            private_key = inject.get('ansible_ssh_private_key_file', self.runner.private_key_file)
             if not private_key is None:
                 options['private_key'] = private_key
             src = self._process_origin(src_host, src, user)
@@ -87,10 +73,8 @@ class ActionModule(object):
 
         options['src'] = src
         options['dest'] = dest
-        try:
+        if 'mode' in options:
             del options['mode']
-        except KeyError:
-            pass
 
         # run the synchronize module
 
diff --git a/library/network/synchronize b/library/files/synchronize
similarity index 52%
rename from library/network/synchronize
rename to library/files/synchronize
index 016abd3734..fb28085abb 100644
--- a/library/network/synchronize
+++ b/library/files/synchronize
@@ -22,73 +22,81 @@ DOCUMENTATION = \
     '''
 ---
 module: synchronize
-short_description: An Ansible action plugin using rsync to make synchronizing a file paths in your playbooks quick and easy.
+short_description: Uses rsync to make synchronizing file paths in your playbooks quick and easy.
 description:
-    - An Ansible action plugin using rsync to make synchronizing a file paths in your playbooks quick and easy. Of course you could just use the command action to call rsync yourself, but you also have to add a fair number of boilerplate options and host facts. You still may need to call rsync directly via C(command) or C(shell). The synchronize action is meant to do common things with C(rsync) easily. It does not provide access to the full power of rsync.
+    - This is a wrapper around rsync. Of course you could just use the command action to call rsync yourself, but you also have to add a fair number of boilerplate options and host facts. You still may need to call rsync directly via C(command) or C(shell) depending on your use case. The synchronize action is meant to do common things with C(rsync) easily. It does not provide access to the full power of rsync, but does make most invocations easier to follow.
 options:
   src:
     description:
       - Path on the source machine that will be synchronized to the destination; The path can be absolute or relative.
     required: true
-    default: null
   dest:
     description:
       - Path on the destination machine that will be synchronized from the source; The path can be absolute or relative.
     required: true
-    default: null
   mode:
     description:
-      - Specify the direction of the synchroniztion. In push mode the localhost or delgate is the  source; In pull mode the inventory hostname in context is the source.
+      - Specify the direction of the synchroniztion. In push mode the localhost or delgate is the  source; In pull mode the remote host in context is the source.
     required: false
     choices: [ 'push', 'pull' ]
     default: 'push'
   verbosity:
     description:
-      - An integrater controling the amount of information returned during processing. The greater the value the more information rsync will report back. See the C(-v, --verbose) option of the rsync man page for details. If verbosity is not defined or a value of 0 is assumed, the C(--quiet) option is passed and information is supressed.
+      - An integer controlling the amount of information returned during processing. See the C(-v, --verbose) option of the rsync man page for details. If verbosity is not defined or a value of 0 is assumed, the C(--quiet) option is passed and information is supressed.
     required: false
     default: 0
   delete:
     description:
-      - Delete files that don't exist (after transfer, not before) in C(src) path.
+      - Delete files that don't exist (after transfer, not before) in the C(src) path.
     choices: [ 'yes', 'no' ]
     default: 'no'
     required: false
   rsync_path:
     description:
-      - Specify rsync to run on the remote machine. See C(--rsync-path) on the rsync man page.
+      - Specify the rsync command to run on the remote machine. See C(--rsync-path) on the rsync man page.
     required: false
-    default: null
-examples:
-   - code: 'synchronize: src=some/relative/path dest=/some/absolute/path'
-     description: Synchronization of src on the localhost to dest on the current inventory host
-   - code: 'local_action: synchronize src=some/relative/path dest=/some/absolute/path'
-     description: Synchronization of src path to dest path on the localhost
-   - code: 'synchronize: mode=pull src=some/relative/path dest=/some/absolute/path'
-     description: Synchronization of src on the inventory host to the dest on the localhost.
-   - code: |
-       synchronize: src=some/relative/path dest=/some/absolute/path
-         delegate_to: delegate.host
-     description: Synchronization of src on delegate to dest on the current inventory host
-   - code: 'synchronize: src=some/relative/path dest=/some/absolute/path delete=yes'
-     description: 'Synchronize and delete files in dest on inventory host not found in src of localhost.'
-   - code: 'synchronize: src=some/relative/path dest=/some/absolute/path verbosity=1'
-     description: 'Synchronize and return verbose information from the rsync transfer.'
-   - code: 'synchronize: src=some/relative/path dest=/some/absolute/path rsync_path="sudo rsync"'
-     description: 'Synchronize with using an alternate rsync command.'
 author: Timothy Appnel
 '''
 
+EXAMPLES = '''
+# Synchronization of src on the control machien to dest on the remote hosts
+synchronize: src=some/relative/path dest=/some/absolute/path
+
+# Synchronization of two paths both on the control machine
+local_action: synchronize src=some/relative/path dest=/some/absolute/path
+
+# Synchronization of src on the inventory host to the dest on the localhost in
+pull mode
+synchronize: mode=pull src=some/relative/path dest=/some/absolute/path
+
+# Synchronization of src on delegate host to dest on the current inventory host
+synchronize: >
+    src=some/relative/path dest=/some/absolute/path
+    delegate_to: delegate.host
+
+# Synchronize and delete files in dest on the remote host that are not found in src of localhost.
+synchronize: src=some/relative/path dest=/some/absolute/path delete=yes
+
+# Synchronize and return verbose information from the rsync transfer.
+synchronize: src=some/relative/path dest=/some/absolute/path verbosity=1
+
+# Synchronize using an alternate rsync command
+synchronize: src=some/relative/path dest=/some/absolute/path rsync_path="sudo rsync"
+'''
+
 
 def main():
-    module = AnsibleModule(argument_spec=dict(
-        src=dict(required=True),
-        dest=dict(required=True),
-        verbosity=dict(default=0),
-        tmp_dir=dict(default=None),
-        delete=dict(default='no', choices=['yes', 'no']),
-        private_key=dict(default=None),
-        rsync_path=dict(default=None),
-        ))
+    module = AnsibleModule(
+        argument_spec = dict(
+            src = dict(required=True),
+            dest = dict(required=True),
+            verbosity = dict(default=0),
+            tmp_dir = dict(default=None),
+            delete = dict(default='no', type='bool'),
+            private_key = dict(default=None),
+            rsync_path = dict(default=None),
+        )
+    )
 
     source = module.params['src']
     dest = module.params['dest']
@@ -106,7 +114,7 @@ def main():
         cmd = cmd + ' --quiet'
     if temp:
         cmd = cmd + ' --temp-dir ' + temp
-    if module.boolean(delete):
+    if delete:
         cmd = cmd + ' --delete-after'
     if private_key is None:
         private_key = ''
