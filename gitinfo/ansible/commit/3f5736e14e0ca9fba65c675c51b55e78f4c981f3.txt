commit 3f5736e14e0ca9fba65c675c51b55e78f4c981f3
Author: Ricardo Carrillo Cruz <ricardo.carrillo.cruz@gmail.com>
Date:   Wed Jul 12 08:40:26 2017 +0200

    Add vyos_l3_interface module (#26610)
    
    * Add vyos_l3_interface module
    
    * Add integration tests for vyos_l3_interface
    
    * Add more corner cases in tests and fix multiple IPs logic

diff --git a/lib/ansible/modules/network/vyos/vyos_l3_interface.py b/lib/ansible/modules/network/vyos/vyos_l3_interface.py
new file mode 100644
index 0000000000..01deb4273d
--- /dev/null
+++ b/lib/ansible/modules/network/vyos/vyos_l3_interface.py
@@ -0,0 +1,222 @@
+#!/usr/bin/python
+# -*- coding: utf-8 -*-
+
+# (c) 2017, Ansible by Red Hat, inc
+#
+# This file is part of Ansible by Red Hat
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+#
+
+ANSIBLE_METADATA = {'metadata_version': '1.0',
+                    'status': ['preview'],
+                    'supported_by': 'core'}
+
+
+DOCUMENTATION = """
+---
+module: vyos_l3_interface
+version_added: "2.4"
+author: "Ricardo Carrillo Cruz (@rcarrillocruz)"
+short_description: Manage L3 interfaces on VyOS network devices
+description:
+  - This module provides declarative management of L3 interfaces
+    on VyOS network devices.
+options:
+  name:
+    description:
+      - Name of the L3 interface.
+  ipv4:
+    description:
+      - IPv4 of the L3 interface.
+  ipv6:
+    description:
+      - IPv6 of the L3 interface.
+  aggregate:
+    description: List of L3 interfaces definitions
+  purge:
+    description:
+      - Purge L3 interfaces not defined in the aggregate parameter.
+    default: no
+  state:
+    description:
+      - State of the L3 interface configuration.
+    default: present
+    choices: ['present', 'absent']
+"""
+
+EXAMPLES = """
+- name: Set eth0 IPv4 address
+  vyos_l3_interface:
+    name: eth0
+    ipv4: 192.168.0.1/24
+
+- name: Remove eth0 IPv4 address
+  vyos_l3_interface:
+    name: eth0
+    state: absent
+"""
+
+RETURN = """
+commands:
+  description: The list of configuration mode commands to send to the device
+  returned: always, except for the platforms that use Netconf transport to manage the device.
+  type: list
+  sample:
+    - set interfaces ethernet eth0 address '192.168.0.1/24'
+"""
+from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.vyos import load_config, run_commands
+from ansible.module_utils.vyos import vyos_argument_spec, check_args
+
+
+def search_obj_in_list(name, lst):
+    for o in lst:
+        if o['name'] == name:
+            return o
+
+    return None
+
+
+def map_obj_to_commands(updates, module):
+    commands = list()
+    want, have = updates
+
+    for w in want:
+        name = w['name']
+        ipv4 = w['ipv4']
+        ipv6 = w['ipv6']
+        state = w['state']
+
+        obj_in_have = search_obj_in_list(name, have)
+        if state == 'absent' and obj_in_have:
+            if not ipv4 and not ipv6 and (obj_in_have['ipv4'] or obj_in_have['ipv6']):
+                commands.append('delete interfaces ethernet ' + name + ' address')
+            else:
+                if ipv4 and obj_in_have['ipv4']:
+                    commands.append('delete interfaces ethernet ' + name + ' address ' + ipv4)
+                if ipv6 and obj_in_have['ipv6']:
+                    commands.append('delete interfaces ethernet ' + name + ' address ' + ipv6)
+        elif (state == 'present' and obj_in_have):
+            if ipv4 and ipv4 != obj_in_have['ipv4']:
+                commands.append('set interfaces ethernet ' + name + ' address ' +
+                                ipv4)
+
+            if ipv6 and ipv6 != obj_in_have['ipv6']:
+                commands.append('set interfaces ethernet ' + name + ' address ' +
+                                ipv6)
+
+    return commands
+
+
+def map_config_to_obj(module):
+    obj = []
+    output = run_commands(module, ['show interfaces ethernet'])
+    lines = output[0].splitlines()
+
+    if len(lines) > 3:
+        for line in lines[3:]:
+            splitted_line = line.split()
+
+            if len(splitted_line) > 1:
+                name = splitted_line[0]
+                address = splitted_line[1]
+
+                if address == '-':
+                    address = None
+
+                if address is not None and ':' not in address:
+                    obj.append({'name': name,
+                                'ipv4': address,
+                                'ipv6': None})
+                else:
+                    obj.append({'name': name,
+                                'ipv6': address,
+                                'ipv4': None})
+            else:
+                obj[-1]['ipv6'] = splitted_line[0]
+
+    return obj
+
+
+def map_params_to_obj(module):
+    obj = []
+
+    if 'aggregate' in module.params and module.params['aggregate']:
+        for c in module.params['aggregate']:
+            d = c.copy()
+
+            if 'ipv4' not in d:
+                d['ipv4'] = None
+            if 'ipv6' not in d:
+                d['ipv6'] = None
+            if 'state' not in d:
+                d['state'] = module.params['state']
+
+            obj.append(d)
+    else:
+        obj.append({
+            'name': module.params['name'],
+            'ipv4': module.params['ipv4'],
+            'ipv6': module.params['ipv6'],
+            'state': module.params['state']
+        })
+
+    return obj
+
+
+def main():
+    """ main entry point for module execution
+    """
+    argument_spec = dict(
+        name=dict(),
+        ipv4=dict(),
+        ipv6=dict(),
+        aggregate=dict(type='list'),
+        purge=dict(default=False, type='bool'),
+        state=dict(default='present',
+                   choices=['present', 'absent'])
+    )
+
+    argument_spec.update(vyos_argument_spec)
+
+    required_one_of = [['name', 'aggregate']]
+    mutually_exclusive = [['name', 'aggregate']]
+    module = AnsibleModule(argument_spec=argument_spec,
+                           required_one_of=required_one_of,
+                           supports_check_mode=True)
+
+    warnings = list()
+    check_args(module, warnings)
+
+    result = {'changed': False}
+
+    if warnings:
+        result['warnings'] = warnings
+
+    want = map_params_to_obj(module)
+    have = map_config_to_obj(module)
+
+    commands = map_obj_to_commands((want, have), module)
+    result['commands'] = commands
+
+    if commands:
+        commit = not module.check_mode
+        load_config(module, commands, commit=commit)
+        result['changed'] = True
+
+    module.exit_json(**result)
+
+if __name__ == '__main__':
+    main()
diff --git a/test/integration/targets/vyos_l3_interface/defaults/main.yaml b/test/integration/targets/vyos_l3_interface/defaults/main.yaml
new file mode 100644
index 0000000000..9ef5ba5165
--- /dev/null
+++ b/test/integration/targets/vyos_l3_interface/defaults/main.yaml
@@ -0,0 +1,3 @@
+---
+testcase: "*"
+test_items: []
diff --git a/test/integration/targets/vyos_l3_interface/tasks/cli.yaml b/test/integration/targets/vyos_l3_interface/tasks/cli.yaml
new file mode 100644
index 0000000000..d675462dd0
--- /dev/null
+++ b/test/integration/targets/vyos_l3_interface/tasks/cli.yaml
@@ -0,0 +1,15 @@
+---
+- name: collect all cli test cases
+  find:
+    paths: "{{ role_path }}/tests/cli"
+    patterns: "{{ testcase }}.yaml"
+  register: test_cases
+
+- name: set test_items
+  set_fact: test_items="{{ test_cases.files | map(attribute='path') | list }}"
+
+- name: run test case
+  include: "{{ test_case_to_run }}"
+  with_items: "{{ test_items }}"
+  loop_control:
+    loop_var: test_case_to_run
diff --git a/test/integration/targets/vyos_l3_interface/tasks/main.yaml b/test/integration/targets/vyos_l3_interface/tasks/main.yaml
new file mode 100644
index 0000000000..415c99d8b1
--- /dev/null
+++ b/test/integration/targets/vyos_l3_interface/tasks/main.yaml
@@ -0,0 +1,2 @@
+---
+- { include: cli.yaml, tags: ['cli'] }
diff --git a/test/integration/targets/vyos_l3_interface/tests/cli/basic.yaml b/test/integration/targets/vyos_l3_interface/tests/cli/basic.yaml
new file mode 100644
index 0000000000..7f15b17205
--- /dev/null
+++ b/test/integration/targets/vyos_l3_interface/tests/cli/basic.yaml
@@ -0,0 +1,195 @@
+---
+- name: Remove IP address
+  vyos_l3_interface:
+    name: eth1
+    state: absent
+
+- name: Remove IP address
+  vyos_l3_interface:
+    name: eth2
+    state: absent
+
+- name: Set IPv4 address
+  vyos_l3_interface:
+    name: eth1
+    ipv4: 192.168.2.10/24
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      - '"set interfaces ethernet eth1 address 192.168.2.10/24" in result.commands'
+
+- name: Set IPv4 address (idempotent)
+  vyos_l3_interface:
+    name: eth1
+    ipv4: 192.168.2.10/24
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == false'
+
+- name: Set IPv6 address
+  vyos_l3_interface:
+    name: eth1
+    ipv6: fd5d:12c9:2201:1::1/64
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      - '"set interfaces ethernet eth1 address fd5d:12c9:2201:1::1/64" in result.commands'
+
+- name: Set IPv6 address (idempotent)
+  vyos_l3_interface:
+    name: eth1
+    ipv6: fd5d:12c9:2201:1::1/64
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == false'
+
+- name: Remove all IP addresses
+  vyos_l3_interface:
+    name: eth1
+    state: absent
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      - '"delete interfaces ethernet eth1 address" in result.commands'
+
+- name: Remove all IP addresses again (idempotent)
+  vyos_l3_interface:
+    name: eth1
+    state: absent
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == false'
+
+- name: Set IPv4 and IPv6 address
+  vyos_l3_interface:
+    name: eth1
+    ipv4: 192.168.2.10/24
+    ipv6: fd5d:12c9:2201:1::1/64
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      - '"set interfaces ethernet eth1 address 192.168.2.10/24" in result.commands'
+      - '"set interfaces ethernet eth1 address fd5d:12c9:2201:1::1/64" in result.commands'
+
+- name: Set IPv4 and IPv6 address again (idempotent)
+  vyos_l3_interface:
+    name: eth1
+    ipv4: 192.168.2.10/24
+    ipv6: fd5d:12c9:2201:1::1/64
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == false'
+
+- name: Remove IPv4 address
+  vyos_l3_interface:
+    name: eth1
+    ipv4: 192.168.2.10/24
+    state: absent
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      - '"delete interfaces ethernet eth1 address 192.168.2.10/24" in result.commands'
+
+- name: Remove IPv4 address again (idempotent)
+  vyos_l3_interface:
+    name: eth1
+    ipv4: 192.168.2.10/24
+    state: absent
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == false'
+
+- name: Remove IPv6 address
+  vyos_l3_interface:
+    name: eth1
+    ipv6: fd5d:12c9:2201:1::1/64
+    state: absent
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      - '"delete interfaces ethernet eth1 address fd5d:12c9:2201:1::1/64" in result.commands'
+
+- name: Remove IPv6 address again (idempotent)
+  vyos_l3_interface:
+    name: eth1
+    ipv6: fd5d:12c9:2201:1::1/64
+    state: absent
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == false'
+
+- name: Set IP addresses on aggregate
+  vyos_l3_interface:
+    aggregate:
+      - { name: eth1, ipv4: 192.168.2.10/24 }
+      - { name: eth2, ipv4: 192.168.3.10/24, ipv6: "fd5d:12c9:2201:1::1/64" }
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      - '"set interfaces ethernet eth1 address 192.168.2.10/24" in result.commands'
+      - '"set interfaces ethernet eth2 address 192.168.3.10/24" in result.commands'
+      - '"set interfaces ethernet eth2 address fd5d:12c9:2201:1::1/64" in result.commands'
+
+- name: Set IP addresses on aggregate (idempotent)
+  vyos_l3_interface:
+    aggregate:
+      - { name: eth1, ipv4: 192.168.2.10/24 }
+      - { name: eth2, ipv4: 192.168.3.10/24, ipv6: "fd5d:12c9:2201:1::1/64" }
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == false'
+
+- name: Remove IP addresses on aggregate
+  vyos_l3_interface:
+    aggregate:
+      - { name: eth1, ipv4: 192.168.2.10/24 }
+      - { name: eth2, ipv4: 192.168.3.10/24, ipv6: "fd5d:12c9:2201:1::1/64" }
+    state: absent
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      - '"delete interfaces ethernet eth1 address 192.168.2.10/24" in result.commands'
+      - '"delete interfaces ethernet eth2 address 192.168.3.10/24" in result.commands'
+      - '"delete interfaces ethernet eth2 address fd5d:12c9:2201:1::1/64" in result.commands'
+
+- name: Remove IP addresses on aggregate (idempotent)
+  vyos_l3_interface:
+    aggregate:
+      - { name: eth1, ipv4: 192.168.2.10/24 }
+      - { name: eth2, ipv4: 192.168.3.10/24, ipv6: "fd5d:12c9:2201:1::1/64" }
+    state: absent
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == false'
diff --git a/test/integration/vyos.yaml b/test/integration/vyos.yaml
index 1eda0fec95..73ccd1a6f7 100644
--- a/test/integration/vyos.yaml
+++ b/test/integration/vyos.yaml
@@ -56,6 +56,13 @@
       rescue:
         - set_fact: test_failed=true
 
+    - block:
+      - include_role:
+          name: vyos_l3_interface
+        when: "limit_to in ['*', 'vyos_l3_interface']"
+      rescue:
+        - set_fact: test_failed=true
+
 
 ###########
     - name: Has any previous test failed?
