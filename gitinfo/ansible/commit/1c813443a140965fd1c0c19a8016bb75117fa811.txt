commit 1c813443a140965fd1c0c19a8016bb75117fa811
Author: John R Barker <john@johnrbarker.com>
Date:   Mon Jun 13 16:36:28 2016 +0100

    ROADMAP formatting (#16252)

diff --git a/docsite/rst/roadmap/ROADMAP_2_2.rst b/docsite/rst/roadmap/ROADMAP_2_2.rst
index 487691c29e..83259bc4cc 100644
--- a/docsite/rst/roadmap/ROADMAP_2_2.rst
+++ b/docsite/rst/roadmap/ROADMAP_2_2.rst
@@ -9,13 +9,13 @@ Target: September 2016
   - Docker_network
   - Docker_volume
   - Docker_file
-  - Openshift:  oso_deployment, oso_route, oso_service, oso_login (...and possibly others. These are modules being developed to support [ansible-container](https://github.com/ansible/ansible-container).)
-  - Kubernetes: kube_deployment, kube_service, kube_login (...and possibly others. These too are modules being developed to support [ansible-container](https://github.com/ansible/ansible-container))
+  - Openshift:  oso_deployment, oso_route, oso_service, oso_login (...and possibly others. These are modules being developed to support `ansible-container <https://github.com/ansible/ansible-container>`_.)
+  - Kubernetes: kube_deployment, kube_service, kube_login (...and possibly others. These too are modules being developed to support `ansible-container <https://github.com/ansible/ansible-container>`_)
 
-- *Extras split from Core (Team, Community, lead by Jason M and Jimi-c) (Targeting 2.2, could move into 2.3).*
+- **Extras split from Core** (Team, Community, lead by Jason M and Jimi-c) (Targeting 2.2, could move into 2.3).
     Targeted towards the 2.2 release or shortly after, we are planning on splitting Extras out of the “Ansible Core” project.  That means that modules that are shipped with Ansible by default are **only** the modules in ansibl-modules-core.  Ansible extras will become a separate project, managed by the community standard.  Over the next few months we’re going to have a lot of work to do on getting all of the modules in the right places for this to work.
 
-  - Create proposal (Jason on Jimi)
+  - Create proposal (Jason or Jimi)
   - Review modules for correct location (extras v core)
   - Extras is a completely different package (does not install with ansible)
   - Library dependencies
@@ -26,11 +26,11 @@ Target: September 2016
   - Add the ability to set_fact to deal with updating arrays and hashes (Jimi)
   - Connection handling stuff. (Toshio K. and Brian C.): This is a stretch goal for 2.2.  It may go into 2.3
 
-    - Change connection polling to avoid resource limitations, see [https://github.com/ansible/ansible/issues/14143](https://github.com/ansible/ansible/issues/14143)
-    - [https://docs.python.org/3/library/selectors.html#module-selectors](https://docs.python.org/3/library/selectors.html#module-selectors)
+    - Change connection polling to avoid resource limitations, see `<https://github.com/ansible/ansible/issues/14143>`_
+    - `<https://docs.python.org/3/library/selectors.html#module-selectors>`_
     - Code: https://github.com/kai11/ansible/blob/fix/select_fd_out_of_range_wip/lib/ansible/plugins/connection/ssh.py
 
-- **Cloud Modules (Ryan Brown) **
+- **Cloud Modules** (Ryan Brown)
 
   - AWS
 
@@ -50,7 +50,7 @@ Target: September 2016
     - Support LBaaS load balancers
   - Azure load balancer: Feature parity for AWS ELB (Stretch Goal)
 
-- **VMware (Brian, Jtanner)**
+- **VMware** (Brian, Jtanner)
 
   - module/inventory script: port to pyvmomi (jtanner, bcoca)
   - inventory script: allow filtering ala ec2 (jtanner) (undergoing PR process)
@@ -58,7 +58,7 @@ Target: September 2016
     - https://github.com/ansible/ansible/pull/15967
   - vsphere: feature parity with whereismyjetpack and viasat modules 
 
-- **Windows platform feature parity****(Matt D)**
+- **Windows platform feature parity** (Matt D)
 
   - PS module API (mirror Python module API where appropriate). Note: We don’t necessarily like the current python module API (AnsibleModule is a huge class with many unrelated utility functions.  Maybe we should redesign both at the same time?)
   - Environment keyword support 
@@ -66,14 +66,14 @@ Target: September 2016
   - Async support 
   - (stretch goal) Pipelining 
 
-- **Windows-specific enhancements (Matt D)**
+- **Windows-specific enhancements** (Matt D)
 
   - Multiple Kerberos credential support (done, shepherd fix to pykerberos)
   - Server 2016 testing/fixes 
   - (stretch goal) Nano Server connection + module_utils working
   - (stretch goal) Encrypted kerberos support in pywinrm 
 
-- **Network (Nate C/Peter S)**
+- **Network** (Nate C/Peter S)
 
   - Unify NetworkModules (module_utils/network.py) as much as possible 
   - Add support for config diff and replace on supported platforms (2 weeks)
@@ -86,20 +86,20 @@ Target: September 2016
 
   - **https://github.com/ansible/proposals/blob/master/roles_revamp.md**
 
-- **Vault (Jtanner/Adrian) **
+- **Vault** (Jtanner/Adrian)
 
   - Extend ‘transparent vault file usage’ to other action plugins other than 'copy' 
   - Add ‘per variable’ vault support (!vault YAML directive, existing PR already)
-  - Add vault/unvault filters [https://github.com/ansible/ansible/issues/12087](https://github.com/ansible/ansible/issues/12087)
+  - Add vault/unvault filters https://github.com/ansible/ansible/issues/12087
   - Add vault support to lookups
-  - Allow for multiple vault secrets [https://github.com/ansible/ansible/issues/13243](https://github.com/ansible/ansible/issues/13243)
+  - Allow for multiple vault secrets https://github.com/ansible/ansible/issues/13243
   - Config option to turn ‘unvaulting’ failures into warnings https://github.com/ansible/ansible/issues/13244
 
-- **Python3 (Toshio):**
+- **Python3** (Toshio)
     A note here from Jason M: Getting to complete, tested Python 3 is both a critical task and one that has so much work, and so many moving parts that we don’t expect this to be complete by the 2.2 release.  Toshio will lead this overall effort.
 
   - RHEL8 is coming which has no python2 in default install.  Ubuntu (non-LTS) already ships without python2.  These considerations make this high priority.
-  - Natives are getting restless: [https://groups.google.com/forum/#!topic/ansible-project/DUKzTho3OCI](https://groups.google.com/forum/#!topic/ansible-project/DUKzTho3OCI)
+  - Ansible users are getting restless: https://groups.google.com/forum/#!topic/ansible-project/DUKzTho3OCI
   - This is probably going to take multiple releases to complete.
   - Side work to do: Figure out best ways to run unit-tests on modules.  Start unit-testing modules.  This is going to become important so we don’t regress python3 or python2.4 support in modules  (Going to largely punt on this for 2.2.  Sounds like Matt Clay is working on building us a testing foundation for the first half of 2.2 development so we’ll re-evaluate towards the middle of the dev cycle).
   - Goals for 2.2:  
@@ -131,7 +131,7 @@ Target: September 2016
 
     - Increase number of essential modules that have been ported.  Package managers, url fetching, etc.
 
-- **Infrastructure Buildout and Changes (Matt Clay):**
+- **Infrastructure Buildout and Changes** (Matt Clay)
     Another note from Jason M: A lot of this work is to ease the burden of CI, CI performance, increase our testing coverage and all of that sort of thing.  It’s not necessarily feature work, but it’s \*\*critical\*\* to growing our product and our ability to get community changes in more securely and quickly.
 
   - **CI Performance**
@@ -142,6 +142,6 @@ Target: September 2016
       Expand documentation on setting up a development and test environment, as well as writing tests. The goal is to ease development for new contributors and encourage more testing, particularly with module contributions.
   - **Test Coverage**
       Expand test coverage, particularly for CI. Being testing, this is open ended. Will be impacted by available budget.
-      - Python 3 - Run integration tests using Python 3 on CI with tagging for those which should pass, so we can track progress and detect regressions.
-      - Windows - Create framework for running Windows integration tests, ideally both locally and on CI.
-      - OS X - Include OS X in CI coverage.
+    - Python 3 - Run integration tests using Python 3 on CI with tagging for those which should pass, so we can track progress and detect regressions.
+    - Windows - Create framework for running Windows integration tests, ideally both locally and on CI.
+    - OS X - Include OS X in CI coverage.
