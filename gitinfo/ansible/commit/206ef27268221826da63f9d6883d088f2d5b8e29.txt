commit 206ef27268221826da63f9d6883d088f2d5b8e29
Author: James Cammarata <jimi@sngx.net>
Date:   Wed Jul 22 15:05:51 2015 -0400

    Add flag to template() so data is not converted to a datastructure
    
    Fixes #11641

diff --git a/lib/ansible/plugins/action/template.py b/lib/ansible/plugins/action/template.py
index 47cdc39884..67a8469d11 100644
--- a/lib/ansible/plugins/action/template.py
+++ b/lib/ansible/plugins/action/template.py
@@ -113,7 +113,7 @@ class ActionModule(ActionBase):
 
             old_vars = self._templar._available_variables
             self._templar.set_available_variables(temp_vars)
-            resultant = self._templar.template(template_data, preserve_trailing_newlines=True)
+            resultant = self._templar.template(template_data, preserve_trailing_newlines=True, convert_data=False)
             self._templar.set_available_variables(old_vars)
         except Exception as e:
             return dict(failed=True, msg=type(e).__name__ + ": " + str(e))
diff --git a/lib/ansible/template/__init__.py b/lib/ansible/template/__init__.py
index 3b0bafdbd6..e1644e082c 100644
--- a/lib/ansible/template/__init__.py
+++ b/lib/ansible/template/__init__.py
@@ -143,7 +143,7 @@ class Templar:
         assert isinstance(variables, dict)
         self._available_variables = variables.copy()
 
-    def template(self, variable, convert_bare=False, preserve_trailing_newlines=False, fail_on_undefined=None, overrides=None):
+    def template(self, variable, convert_bare=False, preserve_trailing_newlines=False, fail_on_undefined=None, overrides=None, convert_data=True):
         '''
         Templates (possibly recursively) any given data as input. If convert_bare is
         set to True, the given data will be wrapped as a jinja2 variable ('{{foo}}')
@@ -171,14 +171,16 @@ class Templar:
 
                     result = self._do_template(variable, preserve_trailing_newlines=preserve_trailing_newlines, fail_on_undefined=fail_on_undefined, overrides=overrides)
 
-                    # if this looks like a dictionary or list, convert it to such using the safe_eval method
-                    if (result.startswith("{") and not result.startswith(self.environment.variable_start_string)) or result.startswith("[") or result in ("True", "False"):
-                        eval_results = safe_eval(result, locals=self._available_variables, include_exceptions=True)
-                        if eval_results[1] is None:
-                            result = eval_results[0]
-                        else:
-                            # FIXME: if the safe_eval raised an error, should we do something with it?
-                            pass
+                    if convert_data:
+                        # if this looks like a dictionary or list, convert it to such using the safe_eval method
+                        if (result.startswith("{") and not result.startswith(self.environment.variable_start_string)) or \
+                           result.startswith("[") or result in ("True", "False"):
+                            eval_results = safe_eval(result, locals=self._available_variables, include_exceptions=True)
+                            if eval_results[1] is None:
+                                result = eval_results[0]
+                            else:
+                                # FIXME: if the safe_eval raised an error, should we do something with it?
+                                pass
 
                 return result
 
