commit 5c08afe16fddd49583271ab4d2f7271e8df51920
Author: The Magician <magic-modules@google.com>
Date:   Fri Mar 22 12:37:31 2019 -0700

    Bug fixes for GCP modules (#54255)

diff --git a/lib/ansible/modules/cloud/google/gcp_compute_vpn_tunnel_facts.py b/lib/ansible/modules/cloud/google/gcp_compute_vpn_tunnel_facts.py
index da4b071b17..00d5645d1e 100644
--- a/lib/ansible/modules/cloud/google/gcp_compute_vpn_tunnel_facts.py
+++ b/lib/ansible/modules/cloud/google/gcp_compute_vpn_tunnel_facts.py
@@ -138,17 +138,6 @@ items:
       - Only IPv4 is supported.
       returned: success
       type: list
-    labels:
-      description:
-      - Labels to apply to this VpnTunnel.
-      returned: success
-      type: dict
-    labelFingerprint:
-      description:
-      - The fingerprint used for optimistic locking of this resource. Used internally
-        during updates.
-      returned: success
-      type: str
     region:
       description:
       - The region where the tunnel is located.
diff --git a/lib/ansible/modules/cloud/google/gcp_container_cluster.py b/lib/ansible/modules/cloud/google/gcp_container_cluster.py
index d526d578ae..aca85eb58b 100644
--- a/lib/ansible/modules/cloud/google/gcp_container_cluster.py
+++ b/lib/ansible/modules/cloud/google/gcp_container_cluster.py
@@ -919,26 +919,10 @@ class ClusterMasterauth(object):
             self.request = {}
 
     def to_request(self):
-        return remove_nones_from_dict(
-            {
-                u'username': self.request.get('username'),
-                u'password': self.request.get('password'),
-                u'clusterCaCertificate': self.request.get('cluster_ca_certificate'),
-                u'clientCertificate': self.request.get('client_certificate'),
-                u'clientKey': self.request.get('client_key'),
-            }
-        )
+        return remove_nones_from_dict({u'username': self.request.get('username'), u'password': self.request.get('password')})
 
     def from_response(self):
-        return remove_nones_from_dict(
-            {
-                u'username': self.request.get(u'username'),
-                u'password': self.request.get(u'password'),
-                u'clusterCaCertificate': self.request.get(u'clusterCaCertificate'),
-                u'clientCertificate': self.request.get(u'clientCertificate'),
-                u'clientKey': self.request.get(u'clientKey'),
-            }
-        )
+        return remove_nones_from_dict({u'username': self.request.get(u'username'), u'password': self.request.get(u'password')})
 
 
 class ClusterPrivateclusterconfig(object):
@@ -955,8 +939,6 @@ class ClusterPrivateclusterconfig(object):
                 u'enablePrivateNodes': self.request.get('enable_private_nodes'),
                 u'enablePrivateEndpoint': self.request.get('enable_private_endpoint'),
                 u'masterIpv4CidrBlock': self.request.get('master_ipv4_cidr_block'),
-                u'privateEndpoint': self.request.get('private_endpoint'),
-                u'publicEndpoint': self.request.get('public_endpoint'),
             }
         )
 
@@ -966,8 +948,6 @@ class ClusterPrivateclusterconfig(object):
                 u'enablePrivateNodes': self.request.get(u'enablePrivateNodes'),
                 u'enablePrivateEndpoint': self.request.get(u'enablePrivateEndpoint'),
                 u'masterIpv4CidrBlock': self.request.get(u'masterIpv4CidrBlock'),
-                u'privateEndpoint': self.request.get(u'privateEndpoint'),
-                u'publicEndpoint': self.request.get(u'publicEndpoint'),
             }
         )
 
diff --git a/lib/ansible/modules/cloud/google/gcp_container_node_pool.py b/lib/ansible/modules/cloud/google/gcp_container_node_pool.py
index 341d831180..fc4acf092e 100644
--- a/lib/ansible/modules/cloud/google/gcp_container_node_pool.py
+++ b/lib/ansible/modules/cloud/google/gcp_container_node_pool.py
@@ -747,10 +747,10 @@ class NodePoolUpgradeoptions(object):
             self.request = {}
 
     def to_request(self):
-        return remove_nones_from_dict({u'autoUpgradeStartTime': self.request.get('auto_upgrade_start_time'), u'description': self.request.get('description')})
+        return remove_nones_from_dict({})
 
     def from_response(self):
-        return remove_nones_from_dict({u'autoUpgradeStartTime': self.request.get(u'autoUpgradeStartTime'), u'description': self.request.get(u'description')})
+        return remove_nones_from_dict({})
 
 
 if __name__ == '__main__':
