commit d1c0df9e92c0ab9bb342865b9626bdbd7adc2c96
Author: ftntcorecse <43451990+ftntcorecse@users.noreply.github.com>
Date:   Tue Mar 5 01:25:43 2019 -0800

    FortiManager Plugin Module Conversion: fmgr_secprof_web (#52788)
    
    * Auto Commit for: fmgr_secprof_web
    
    * Auto Commit for: fmgr_secprof_web
    
    * Auto Commit for: fmgr_secprof_web

diff --git a/lib/ansible/modules/network/fortimanager/fmgr_secprof_web.py b/lib/ansible/modules/network/fortimanager/fmgr_secprof_web.py
index 16ce242129..987b9e2ff1 100644
--- a/lib/ansible/modules/network/fortimanager/fmgr_secprof_web.py
+++ b/lib/ansible/modules/network/fortimanager/fmgr_secprof_web.py
@@ -27,6 +27,8 @@ DOCUMENTATION = '''
 ---
 module: fmgr_secprof_web
 version_added: "2.8"
+notes:
+    - Full Documentation at U(https://ftnt-ansible-docs.readthedocs.io/en/latest/).
 author:
     - Luke Weighall (@lweighall)
     - Andrew Welsh (@Ghilli3)
@@ -42,21 +44,6 @@ options:
     required: false
     default: root
 
-  host:
-    description:
-      - The FortiManager's Address.
-    required: true
-
-  username:
-    description:
-      - The username associated with the account.
-    required: true
-
-  password:
-    description:
-      - The password associated with the username account.
-    required: true
-
   mode:
     description:
       - Sets one of three modes for managing the object.
@@ -753,17 +740,11 @@ options:
 EXAMPLES = '''
   - name: DELETE Profile
     fmgr_secprof_web:
-      host: "{{inventory_hostname}}"
-      username: "{{ username }}"
-      password: "{{ password }}"
       name: "Ansible_Web_Filter_Profile"
       mode: "delete"
 
   - name: CREATE Profile
     fmgr_secprof_web:
-      host: "{{inventory_hostname}}"
-      username: "{{ username }}"
-      password: "{{ password }}"
       name: "Ansible_Web_Filter_Profile"
       comment: "Created by Ansible Module TEST"
       mode: "set"
@@ -802,27 +783,30 @@ api_result:
 """
 
 from ansible.module_utils.basic import AnsibleModule, env_fallback
-from ansible.module_utils.network.fortimanager.fortimanager import AnsibleFortiManager
-
-
-###############
-# START METHODS
-###############
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortimanager.fortimanager import FortiManagerHandler
+from ansible.module_utils.network.fortimanager.common import FMGBaseException
+from ansible.module_utils.network.fortimanager.common import FMGRCommon
+from ansible.module_utils.network.fortimanager.common import FMGRMethods
+from ansible.module_utils.network.fortimanager.common import DEFAULT_RESULT_OBJ
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
+from ansible.module_utils.network.fortimanager.common import prepare_dict
+from ansible.module_utils.network.fortimanager.common import scrub_dict
 
 
-def fmgr_webfilter_profile_addsetdelete(fmg, paramgram):
+def fmgr_webfilter_profile_modify(fmgr, paramgram):
 
     mode = paramgram["mode"]
     adom = paramgram["adom"]
 
-    response = (-100000, {"msg": "Illegal or malformed paramgram discovered. System Exception"})
+    response = DEFAULT_RESULT_OBJ
     url = ""
     datagram = {}
 
     # EVAL THE MODE PARAMETER FOR SET OR ADD
     if mode in ['set', 'add', 'update']:
         url = '/pm/config/adom/{adom}/obj/webfilter/profile'.format(adom=adom)
-        datagram = fmgr_del_none(fmgr_prepare_dict(paramgram))
+        datagram = scrub_dict(prepare_dict(paramgram))
 
     # EVAL THE MODE PARAMETER FOR DELETE
     elif mode == "delete":
@@ -830,124 +814,11 @@ def fmgr_webfilter_profile_addsetdelete(fmg, paramgram):
         url = '/pm/config/adom/{adom}/obj/webfilter/profile/{name}'.format(adom=adom, name=paramgram["name"])
         datagram = {}
 
-    # IF MODE = SET -- USE THE 'SET' API CALL MODE
-    if mode == "set":
-        response = fmg.set(url, datagram)
-    # IF MODE = UPDATE -- USER THE 'UPDATE' API CALL MODE
-    elif mode == "update":
-        response = fmg.update(url, datagram)
-    # IF MODE = ADD  -- USE THE 'ADD' API CALL MODE
-    elif mode == "add":
-        response = fmg.add(url, datagram)
-    # IF MODE = DELETE  -- USE THE DELETE URL AND API CALL MODE
-    elif mode == "delete":
-        response = fmg.delete(url, datagram)
+    response = fmgr.process_request(url, datagram, paramgram["mode"])
 
     return response
 
 
-# ADDITIONAL COMMON FUNCTIONS
-def fmgr_logout(fmg, module, msg="NULL", results=(), good_codes=(0,), logout_on_fail=True, logout_on_success=False):
-    """
-    THIS METHOD CONTROLS THE LOGOUT AND ERROR REPORTING AFTER AN METHOD OR FUNCTION RUNS
-    """
-    # VALIDATION ERROR (NO RESULTS, JUST AN EXIT)
-    if msg != "NULL" and len(results) == 0:
-        try:
-            fmg.logout()
-        except Exception:
-            pass
-        module.fail_json(msg=msg)
-
-    # SUBMISSION ERROR
-    if len(results) > 0:
-        if msg == "NULL":
-            try:
-                msg = results[1]['status']['message']
-            except Exception:
-                msg = "No status message returned from pyFMG. Possible that this was a GET with a tuple result."
-
-        if results[0] not in good_codes:
-            if logout_on_fail:
-                fmg.logout()
-                module.fail_json(msg=msg, **results[1])
-        else:
-            if logout_on_success:
-                fmg.logout()
-                module.exit_json(msg="API Called worked, but logout handler has been asked to logout on success",
-                                 **results[1])
-    return msg
-
-
-# FUNCTION/METHOD FOR CONVERTING CIDR TO A NETMASK
-# DID NOT USE IP ADDRESS MODULE TO KEEP INCLUDES TO A MINIMUM
-def fmgr_cidr_to_netmask(cidr):
-    cidr = int(cidr)
-    mask = (0xffffffff >> (32 - cidr)) << (32 - cidr)
-    return(str((0xff000000 & mask) >> 24) + '.' +
-           str((0x00ff0000 & mask) >> 16) + '.' +
-           str((0x0000ff00 & mask) >> 8) + '.' +
-           str((0x000000ff & mask)))
-
-
-# utility function: removing keys wih value of None, nothing in playbook for that key
-def fmgr_del_none(obj):
-    if isinstance(obj, dict):
-        return type(obj)((fmgr_del_none(k), fmgr_del_none(v))
-                         for k, v in obj.items() if k is not None and (v is not None and not fmgr_is_empty_dict(v)))
-    else:
-        return obj
-
-
-# utility function: remove keys that are need for the logic but the FMG API won't accept them
-def fmgr_prepare_dict(obj):
-    list_of_elems = ["mode", "adom", "host", "username", "password"]
-    if isinstance(obj, dict):
-        obj = dict((key, fmgr_prepare_dict(value)) for (key, value) in obj.items() if key not in list_of_elems)
-    return obj
-
-
-def fmgr_is_empty_dict(obj):
-    return_val = False
-    if isinstance(obj, dict):
-        if len(obj) > 0:
-            for k, v in obj.items():
-                if isinstance(v, dict):
-                    if len(v) == 0:
-                        return_val = True
-                    elif len(v) > 0:
-                        for k1, v1 in v.items():
-                            if v1 is None:
-                                return_val = True
-                            elif v1 is not None:
-                                return_val = False
-                                return return_val
-                elif v is None:
-                    return_val = True
-                elif v is not None:
-                    return_val = False
-                    return return_val
-        elif len(obj) == 0:
-            return_val = True
-
-    return return_val
-
-
-def fmgr_split_comma_strings_into_lists(obj):
-    if isinstance(obj, dict):
-        if len(obj) > 0:
-            for k, v in obj.items():
-                if isinstance(v, str):
-                    new_list = list()
-                    if "," in v:
-                        new_items = v.split(",")
-                        for item in new_items:
-                            new_list.append(item.strip())
-                        obj[k] = new_list
-
-    return obj
-
-
 #############
 # END METHODS
 #############
@@ -956,9 +827,6 @@ def fmgr_split_comma_strings_into_lists(obj):
 def main():
     argument_spec = dict(
         adom=dict(type="str", default="root"),
-        host=dict(required=True, type="str"),
-        password=dict(fallback=(env_fallback, ["ANSIBLE_NET_PASSWORD"]), no_log=True, required=True),
-        username=dict(fallback=(env_fallback, ["ANSIBLE_NET_USERNAME"]), no_log=True, required=True),
         mode=dict(choices=["add", "set", "delete", "update"], type="str", default="add"),
 
         youtube_channel_status=dict(required=False, type="str", choices=["disable", "blacklist", "whitelist"]),
@@ -1090,8 +958,7 @@ def main():
 
     )
 
-    module = AnsibleModule(argument_spec, supports_check_mode=False)
-
+    module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=False, )
     # MODULE PARAMGRAM
     paramgram = {
         "mode": module.params["mode"],
@@ -1188,45 +1055,31 @@ def main():
             "comment": module.params["youtube_channel_filter_comment"],
         }
     }
+    module.paramgram = paramgram
+    fmgr = None
+    if module._socket_path:
+        connection = Connection(module._socket_path)
+        fmgr = FortiManagerHandler(connection, module)
+        fmgr.tools = FMGRCommon()
+    else:
+        module.fail_json(**FAIL_SOCKET_MSG)
 
     list_overrides = ['ftgd-wf', 'override', 'url-extraction', 'web', 'youtube-channel-filter']
-    for list_variable in list_overrides:
-        override_data = list()
-        try:
-            override_data = module.params[list_variable]
-        except Exception:
-            pass
-        try:
-            if override_data:
-                del paramgram[list_variable]
-                paramgram[list_variable] = override_data
-        except Exception:
-            pass
-
-    # CHECK IF THE HOST/USERNAME/PW EXISTS, AND IF IT DOES, LOGIN.
-    host = module.params["host"]
-    password = module.params["password"]
-    username = module.params["username"]
-    if host is None or username is None or password is None:
-        module.fail_json(msg="Host and username and password are required")
-
-    # CHECK IF LOGIN FAILED
-    fmg = AnsibleFortiManager(module, module.params["host"], module.params["username"], module.params["password"])
-
-    response = fmg.login()
-    if response[1]['status']['code'] != 0:
-        module.fail_json(msg="Connection to FortiManager Failed")
-
-    results = fmgr_webfilter_profile_addsetdelete(fmg, paramgram)
-    if results[0] != 0:
-        fmgr_logout(fmg, module, results=results, good_codes=[0])
-
-    fmg.logout()
-
-    if results is not None:
-        return module.exit_json(**results[1])
-    else:
-        return module.exit_json(msg="No results were returned from the API call.")
+    paramgram = fmgr.tools.paramgram_child_list_override(list_overrides=list_overrides,
+                                                         paramgram=paramgram, module=module)
+
+    results = DEFAULT_RESULT_OBJ
+
+    try:
+
+        results = fmgr_webfilter_profile_modify(fmgr, paramgram)
+        fmgr.govern_response(module=module, results=results,
+                             ansible_facts=fmgr.construct_ansible_facts(results, module.params, paramgram))
+
+    except Exception as err:
+        raise FMGBaseException(err)
+
+    return module.exit_json(**results[1])
 
 
 if __name__ == "__main__":
diff --git a/test/units/modules/network/fortimanager/fixtures/test_fmgr_secprof_web.json b/test/units/modules/network/fortimanager/fixtures/test_fmgr_secprof_web.json
index cc7b1ee2a7..b7e5e4c740 100644
--- a/test/units/modules/network/fortimanager/fixtures/test_fmgr_secprof_web.json
+++ b/test/units/modules/network/fortimanager/fixtures/test_fmgr_secprof_web.json
@@ -1,214 +1,146 @@
 {
-   "fmgr_webfilter_profile_addsetdelete": [
-      {
-         "paramgram_used": {
-            "comment": null, 
-            "web-extended-all-action-log": null, 
-            "url-extraction": {
-               "status": null, 
-               "redirect-url": null, 
-               "server-fqdn": null, 
-               "redirect-header": null, 
-               "redirect-no-content": null
-            }, 
-            "ftgd-wf": {
-               "filters": {
-                  "category": null, 
-                  "log": null, 
-                  "override-replacemsg": null, 
-                  "warning-duration-type": null, 
-                  "warn-duration": null, 
-                  "auth-usr-grp": null, 
-                  "action": null, 
-                  "warning-prompt": null
-               }, 
-               "ovrd": null, 
-               "rate-image-urls": null, 
-               "quota": {
-                  "category": null, 
-                  "value": null, 
-                  "override-replacemsg": null, 
-                  "duration": null, 
-                  "type": null, 
-                  "unit": null
-               }, 
-               "options": null, 
-               "rate-javascript-urls": null, 
-               "max-quota-timeout": null, 
-               "rate-css-urls": null, 
-               "exempt-quota": null, 
-               "rate-crl-urls": null
-            }, 
-            "log-all-url": null, 
-            "extended-log": null, 
-            "web-filter-cookie-removal-log": null, 
-            "https-replacemsg": null, 
-            "web": {
-               "log-search": null, 
-               "bword-threshold": null, 
-               "bword-table": null, 
-               "whitelist": null, 
-               "youtube-restrict": null, 
-               "safe-search": null, 
-               "blacklist": null, 
-               "keyword-match": null, 
-               "urlfilter-table": null, 
-               "content-header-list": null
-            }, 
-            "wisp": null, 
-            "web-filter-vbs-log": null, 
-            "youtube-channel-filter": {
-               "comment": null, 
-               "channel-id": null
-            }, 
-            "override": {
-               "profile": null, 
-               "ovrd-scope": null, 
-               "ovrd-dur-mode": null, 
-               "profile-attribute": null, 
-               "ovrd-dur": null, 
-               "profile-type": null, 
-               "ovrd-user-group": null, 
-               "ovrd-cookie": null
-            }, 
-            "ovrd-perm": null, 
-            "mode": "delete", 
-            "web-content-log": null, 
-            "web-invalid-domain-log": null, 
-            "adom": "root", 
-            "web-filter-referer-log": null, 
-            "inspection-mode": null, 
-            "post-action": null, 
-            "name": "Ansible_Web_Filter_Profile", 
-            "web-filter-command-block-log": null, 
-            "web-filter-applet-log": null, 
-            "web-ftgd-err-log": null, 
-            "replacemsg-group": null, 
-            "web-filter-jscript-log": null, 
-            "web-filter-activex-log": null, 
-            "web-filter-js-log": null, 
-            "web-ftgd-quota-usage": null, 
-            "web-filter-unknown-log": null, 
-            "web-filter-cookie-log": null, 
-            "youtube-channel-status": null, 
-            "web-url-log": null, 
-            "options": null, 
-            "wisp-servers": null, 
-            "wisp-algorithm": null
-         }, 
-         "raw_response": {
-            "status": {
-               "message": "OK", 
-               "code": 0
-            }, 
-            "url": "/pm/config/adom/root/obj/webfilter/profile/Ansible_Web_Filter_Profile"
-         }, 
-         "post_method": "delete"
-      }, 
-      {
-         "raw_response": {
-            "status": {
-               "message": "OK", 
-               "code": 0
-            }, 
-            "url": "/pm/config/adom/root/obj/webfilter/profile"
-         }, 
-         "paramgram_used": {
-            "comment": "Created by Ansible Module TEST", 
-            "web-filter-command-block-log": "enable", 
-            "web-invalid-domain-log": "enable", 
-            "web-extended-all-action-log": "enable", 
-            "adom": "root", 
-            "ftgd-wf": {
-               "rate-javascript-urls": null, 
-               "quota": {
-                  "category": null, 
-                  "value": null, 
-                  "override-replacemsg": null, 
-                  "duration": null, 
-                  "type": null, 
-                  "unit": null
-               }, 
-               "rate-image-urls": null, 
-               "filters": {
-                  "category": null, 
-                  "auth-usr-grp": null, 
-                  "log": null, 
-                  "warning-prompt": null, 
-                  "override-replacemsg": null, 
-                  "action": null, 
-                  "warn-duration": null, 
-                  "warning-duration-type": null
-               }, 
-               "rate-css-urls": null, 
-               "ovrd": null, 
-               "exempt-quota": null, 
-               "max-quota-timeout": null, 
-               "rate-crl-urls": null, 
-               "options": null
-            }, 
-            "web-content-log": "enable", 
-            "web-filter-referer-log": "enable", 
-            "log-all-url": "enable", 
-            "extended-log": "enable", 
-            "inspection-mode": "proxy", 
-            "web-filter-cookie-removal-log": "enable", 
-            "post-action": "block", 
-            "web-filter-activex-log": "enable", 
-            "web-filter-cookie-log": "enable", 
-            "web": {
-               "blacklist": null, 
-               "log-search": null, 
-               "keyword-match": null, 
-               "urlfilter-table": null, 
-               "bword-table": null, 
-               "safe-search": null, 
-               "whitelist": null, 
-               "content-header-list": null, 
-               "youtube-restrict": null, 
-               "bword-threshold": null
-            }, 
-            "web-filter-applet-log": "enable", 
-            "web-ftgd-err-log": "enable", 
-            "replacemsg-group": null, 
-            "web-filter-jscript-log": "enable", 
-            "web-ftgd-quota-usage": "enable", 
-            "url-extraction": {
-               "status": null, 
-               "server-fqdn": null, 
-               "redirect-url": null, 
-               "redirect-header": null, 
-               "redirect-no-content": null
-            }, 
-            "web-filter-js-log": "enable", 
-            "youtube-channel-filter": {
-               "comment": null, 
-               "channel-id": null
-            }, 
-            "name": "Ansible_Web_Filter_Profile", 
-            "wisp": "enable", 
-            "web-filter-vbs-log": "enable", 
-            "web-filter-unknown-log": "enable", 
-            "mode": "set", 
-            "youtube-channel-status": "blacklist", 
-            "override": {
-               "profile": null, 
-               "ovrd-user-group": null, 
-               "ovrd-scope": null, 
-               "ovrd-cookie": null, 
-               "ovrd-dur-mode": null, 
-               "profile-attribute": null, 
-               "ovrd-dur": null, 
-               "profile-type": null
-            }, 
-            "web-url-log": "enable", 
-            "ovrd-perm": "bannedword-override", 
-            "https-replacemsg": null, 
-            "options": "js", 
-            "wisp-servers": null, 
-            "wisp-algorithm": "auto-learning"
-         }, 
-         "post_method": "set"
-      }
-   ]
+    "fmgr_webfilter_profile_modify": [
+        {
+            "raw_response": {
+                "status": {
+                    "message": "OK",
+                    "code": 0
+                },
+                "url": "/pm/config/adom/root/obj/webfilter/profile"
+            },
+            "datagram_sent": {
+                "comment": "Created by Ansible Module TEST",
+                "web-extended-all-action-log": "enable",
+                "web-filter-cookie-removal-log": "enable",
+                "extended-log": "enable",
+                "log-all-url": "enable",
+                "wisp": "enable",
+                "web-filter-vbs-log": "enable",
+                "ovrd-perm": [
+                    "bannedword-override"
+                ],
+                "web-filter-command-block-log": "enable",
+                "web-invalid-domain-log": "enable",
+                "web-filter-referer-log": "enable",
+                "inspection-mode": "proxy",
+                "post-action": "block",
+                "web-content-log": "enable",
+                "web-filter-applet-log": "enable",
+                "web-ftgd-err-log": "enable",
+                "name": "Ansible_Web_Proxy_Profile",
+                "web-filter-jscript-log": "enable",
+                "web-filter-activex-log": "enable",
+                "web-filter-js-log": "enable",
+                "web-ftgd-quota-usage": "enable",
+                "web-filter-unknown-log": "enable",
+                "web-filter-cookie-log": "enable",
+                "youtube-channel-status": "blacklist",
+                "web-url-log": "enable",
+                "options": [
+                    "js"
+                ],
+                "wisp-algorithm": "auto-learning"
+            },
+            "paramgram_used": {
+                "comment": "Created by Ansible Module TEST",
+                "web-filter-command-block-log": "enable",
+                "web-invalid-domain-log": "enable",
+                "web-extended-all-action-log": "enable",
+                "adom": "root",
+                "ftgd-wf": {
+                    "rate-javascript-urls": null,
+                    "quota": {
+                        "category": null,
+                        "value": null,
+                        "override-replacemsg": null,
+                        "duration": null,
+                        "type": null,
+                        "unit": null
+                    },
+                    "rate-image-urls": null,
+                    "filters": {
+                        "category": null,
+                        "auth-usr-grp": null,
+                        "log": null,
+                        "warning-prompt": null,
+                        "override-replacemsg": null,
+                        "action": null,
+                        "warn-duration": null,
+                        "warning-duration-type": null
+                    },
+                    "rate-css-urls": null,
+                    "ovrd": null,
+                    "exempt-quota": null,
+                    "max-quota-timeout": null,
+                    "rate-crl-urls": null,
+                    "options": null
+                },
+                "web-content-log": "enable",
+                "web-filter-referer-log": "enable",
+                "log-all-url": "enable",
+                "extended-log": "enable",
+                "inspection-mode": "proxy",
+                "web-filter-cookie-removal-log": "enable",
+                "post-action": "block",
+                "web-filter-activex-log": "enable",
+                "web-filter-cookie-log": "enable",
+                "web": {
+                    "blacklist": null,
+                    "log-search": null,
+                    "keyword-match": null,
+                    "urlfilter-table": null,
+                    "bword-table": null,
+                    "safe-search": null,
+                    "whitelist": null,
+                    "content-header-list": null,
+                    "youtube-restrict": null,
+                    "bword-threshold": null
+                },
+                "web-filter-applet-log": "enable",
+                "web-ftgd-err-log": "enable",
+                "replacemsg-group": null,
+                "web-filter-jscript-log": "enable",
+                "web-ftgd-quota-usage": "enable",
+                "url-extraction": {
+                    "status": null,
+                    "server-fqdn": null,
+                    "redirect-url": null,
+                    "redirect-header": null,
+                    "redirect-no-content": null
+                },
+                "web-filter-js-log": "enable",
+                "youtube-channel-filter": {
+                    "comment": null,
+                    "channel-id": null
+                },
+                "name": "Ansible_Web_Proxy_Profile",
+                "wisp": "enable",
+                "web-filter-vbs-log": "enable",
+                "web-filter-unknown-log": "enable",
+                "mode": "set",
+                "youtube-channel-status": "blacklist",
+                "override": {
+                    "profile": null,
+                    "ovrd-user-group": null,
+                    "ovrd-scope": null,
+                    "ovrd-cookie": null,
+                    "ovrd-dur-mode": null,
+                    "profile-attribute": null,
+                    "ovrd-dur": null,
+                    "profile-type": null
+                },
+                "web-url-log": "enable",
+                "ovrd-perm": [
+                    "bannedword-override"
+                ],
+                "https-replacemsg": null,
+                "options": [
+                    "js"
+                ],
+                "wisp-servers": null,
+                "wisp-algorithm": "auto-learning"
+            },
+            "post_method": "set"
+        }
+    ]
 }
diff --git a/test/units/modules/network/fortimanager/test_fmgr_secprof_web.py b/test/units/modules/network/fortimanager/test_fmgr_secprof_web.py
index 63fb85c0a4..189412055f 100644
--- a/test/units/modules/network/fortimanager/test_fmgr_secprof_web.py
+++ b/test/units/modules/network/fortimanager/test_fmgr_secprof_web.py
@@ -19,7 +19,7 @@ __metaclass__ = type
 
 import os
 import json
-from pyFMG.fortimgr import FortiManager
+from ansible.module_utils.network.fortimanager.fortimanager import FortiManagerHandler
 import pytest
 
 try:
@@ -27,15 +27,10 @@ try:
 except ImportError:
     pytest.skip("Could not load required modules for testing", allow_module_level=True)
 
-fmg_instance = FortiManager("1.1.1.1", "admin", "")
-
 
 def load_fixtures():
-    fixture_path = os.path.join(
-        os.path.dirname(__file__),
-        'fixtures') + "/{filename}.json".format(
-        filename=os.path.splitext(
-            os.path.basename(__file__))[0])
+    fixture_path = os.path.join(os.path.dirname(__file__), 'fixtures') + "/{filename}.json".format(
+        filename=os.path.splitext(os.path.basename(__file__))[0])
     try:
         with open(fixture_path, "r") as fixture_file:
             fixture_data = json.load(fixture_file)
@@ -44,114 +39,29 @@ def load_fixtures():
     return [fixture_data]
 
 
+@pytest.fixture(autouse=True)
+def module_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.module_utils.basic.AnsibleModule')
+    return connection_class_mock
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortimanager.fmgr_secprof_web.Connection')
+    return connection_class_mock
+
+
 @pytest.fixture(scope="function", params=load_fixtures())
 def fixture_data(request):
     func_name = request.function.__name__.replace("test_", "")
     return request.param.get(func_name, None)
 
 
-def test_fmgr_webfilter_profile_addsetdelete(fixture_data, mocker):
-    mocker.patch("pyFMG.fortimgr.FortiManager._post_request", side_effect=fixture_data)
-    #  Fixture sets used:###########################
+fmg_instance = FortiManagerHandler(connection_mock, module_mock)
 
-    ##################################################
-    # comment: None
-    # web-extended-all-action-log: None
-    # url-extraction: {'status': None, 'redirect-url': None, 'server-fqdn': None, 'redirect-header': None,
-    #  'redirect-no-content': None}
-    # ftgd-wf: {'filters': {'category': None, 'log': None, 'override-replacemsg': None, 'warning-duration-type': None,
-    #  'warn-duration': None, 'auth-usr-grp': None, 'action': None, 'warning-prompt': None}, 'ovrd': None,
-    #  'rate-image-urls': None, 'quota': {'category': None, 'value': None, 'override-replacemsg': None,
-    #  'duration': None, 'type': None, 'unit': None}, 'options': None, 'rate-javascript-urls': None,
-    #  'max-quota-timeout': None, 'rate-css-urls': None, 'exempt-quota': None, 'rate-crl-urls': None}
-    # log-all-url: None
-    # extended-log: None
-    # web-filter-cookie-removal-log: None
-    # https-replacemsg: None
-    # web: {'log-search': None, 'bword-threshold': None, 'bword-table': None, 'whitelist': None,
-    #  'youtube-restrict': None, 'safe-search': None, 'blacklist': None, 'keyword-match': None,
-    #  'urlfilter-table': None, 'content-header-list': None}
-    # wisp: None
-    # web-filter-vbs-log: None
-    # youtube-channel-filter: {'comment': None, 'channel-id': None}
-    # override: {'profile': None, 'ovrd-scope': None, 'ovrd-dur-mode': None, 'profile-attribute': None,
-    #  'ovrd-dur': None, 'profile-type': None, 'ovrd-user-group': None, 'ovrd-cookie': None}
-    # ovrd-perm: None
-    # mode: delete
-    # web-content-log: None
-    # web-invalid-domain-log: None
-    # adom: root
-    # web-filter-referer-log: None
-    # inspection-mode: None
-    # post-action: None
-    # name: Ansible_Web_Filter_Profile
-    # web-filter-command-block-log: None
-    # web-filter-applet-log: None
-    # web-ftgd-err-log: None
-    # replacemsg-group: None
-    # web-filter-jscript-log: None
-    # web-filter-activex-log: None
-    # web-filter-js-log: None
-    # web-ftgd-quota-usage: None
-    # web-filter-unknown-log: None
-    # web-filter-cookie-log: None
-    # youtube-channel-status: None
-    # web-url-log: None
-    # options: None
-    # wisp-servers: None
-    # wisp-algorithm: None
-    ##################################################
-    ##################################################
-    # comment: Created by Ansible Module TEST
-    # web-filter-command-block-log: enable
-    # web-invalid-domain-log: enable
-    # web-extended-all-action-log: enable
-    # adom: root
-    # ftgd-wf: {'rate-javascript-urls': None, 'quota': {'category': None, 'value': None, 'override-replacemsg': None,
-    #  'duration': None, 'type': None, 'unit': None}, 'rate-image-urls': None, 'filters': {'category': None,
-    #  'auth-usr-grp': None, 'log': None, 'warning-prompt': None, 'override-replacemsg': None, 'action': None,
-    #  'warn-duration': None, 'warning-duration-type': None}, 'rate-css-urls': None, 'ovrd': None,
-    #  'exempt-quota': None, 'max-quota-timeout': None, 'rate-crl-urls': None, 'options': None}
-    # web-content-log: enable
-    # web-filter-referer-log: enable
-    # log-all-url: enable
-    # extended-log: enable
-    # inspection-mode: proxy
-    # web-filter-cookie-removal-log: enable
-    # post-action: block
-    # web-filter-activex-log: enable
-    # web-filter-cookie-log: enable
-    # web: {'blacklist': None, 'log-search': None, 'keyword-match': None, 'urlfilter-table': None, 'bword-table': None,
-    #  'safe-search': None, 'whitelist': None, 'content-header-list': None, 'youtube-restrict': None,
-    #  'bword-threshold': None}
-    # web-filter-applet-log: enable
-    # web-ftgd-err-log: enable
-    # replacemsg-group: None
-    # web-filter-jscript-log: enable
-    # web-ftgd-quota-usage: enable
-    # url-extraction: {'status': None, 'server-fqdn': None, 'redirect-url': None, 'redirect-header': None,
-    #  'redirect-no-content': None}
-    # web-filter-js-log: enable
-    # youtube-channel-filter: {'comment': None, 'channel-id': None}
-    # name: Ansible_Web_Filter_Profile
-    # wisp: enable
-    # web-filter-vbs-log: enable
-    # web-filter-unknown-log: enable
-    # mode: set
-    # youtube-channel-status: blacklist
-    # override: {'profile': None, 'ovrd-user-group': None, 'ovrd-scope': None, 'ovrd-cookie': None,
-    #  'ovrd-dur-mode': None, 'profile-attribute': None, 'ovrd-dur': None, 'profile-type': None}
-    # web-url-log: enable
-    # ovrd-perm: bannedword-override
-    # https-replacemsg: None
-    # options: js
-    # wisp-servers: None
-    # wisp-algorithm: auto-learning
-    ##################################################
 
-    # Test using fixture 1 #
-    output = fmgr_secprof_web.fmgr_webfilter_profile_addsetdelete(fmg_instance, fixture_data[0]['paramgram_used'])
-    assert output['raw_response']['status']['code'] == 0
-    # Test using fixture 2 #
-    output = fmgr_secprof_web.fmgr_webfilter_profile_addsetdelete(fmg_instance, fixture_data[1]['paramgram_used'])
+def test_fmgr_webfilter_profile_modify(fixture_data, mocker):
+    mocker.patch("ansible.module_utils.network.fortimanager.fortimanager.FortiManagerHandler.process_request",
+                 side_effect=fixture_data)
+    output = fmgr_secprof_web.fmgr_webfilter_profile_modify(fmg_instance, fixture_data[0]['paramgram_used'])
     assert output['raw_response']['status']['code'] == 0
