commit c241fb78a892eb0c361a500f3480c0f9c7c24ffa
Author: Henrik Wallström <henrik@wallstroms.nu>
Date:   Fri Apr 24 10:48:02 2015 +0200

    Modules to manage IIS
    
    Wraps the Web Server Administration module for PowerShell into Ansible modules.

diff --git a/lib/ansible/modules/extras/windows/win_iis_virtualdirectory.ps1 b/lib/ansible/modules/extras/windows/win_iis_virtualdirectory.ps1
new file mode 100644
index 0000000000..3f2ab692b4
--- /dev/null
+++ b/lib/ansible/modules/extras/windows/win_iis_virtualdirectory.ps1
@@ -0,0 +1,128 @@
+#!powershell
+# -*- coding: utf-8 -*-
+
+# (c) 2015, Henrik Wallström <henrik@wallstroms.nu>
+#
+# This file is part of Ansible
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+
+# WANT_JSON
+# POWERSHELL_COMMON
+
+$params = Parse-Args $args;
+
+# Name parameter
+$name = Get-Attr $params "name" $FALSE;
+If ($name -eq $FALSE) {
+    Fail-Json (New-Object psobject) "missing required argument: name";
+}
+
+# Site
+$site = Get-Attr $params "site" $FALSE;
+If ($site -eq $FALSE) {
+    Fail-Json (New-Object psobject) "missing required argument: site";
+}
+
+# Application
+$application = Get-Attr $params "application" $FALSE;
+
+# State parameter
+$state = Get-Attr $params "state" "present";
+If (($state -ne 'present') -and ($state -ne 'absent')) {
+  Fail-Json $result "state is '$state'; must be 'present' or 'absent'"
+}
+
+# Path parameter
+$physical_path = Get-Attr $params "physical_path" $FALSE;
+
+# Ensure WebAdministration module is loaded
+if ((Get-Module "WebAdministration" -ErrorAction SilentlyContinue) -eq $null) {
+  Import-Module WebAdministration
+}
+
+# Result
+$result = New-Object psobject @{
+  directory = New-Object psobject
+  changed = $false
+};
+
+# Construct path
+$directory_path = if($application) {
+  "IIS:\Sites\$($site)\$($application)\$($name)"
+} else {
+  "IIS:\Sites\$($site)\$($name)"
+}
+
+# Directory info
+$directory = Get-WebVirtualDirectory -Site $site -Name $name
+
+try {
+  # Add directory
+  If(($state -eq 'present') -and (-not $directory)) {
+    If ($physical_path -eq $FALSE) {
+      Fail-Json (New-Object psobject) "missing required arguments: physical_path"
+    }
+    If (-not (Test-Path $physical_path)) {
+      Fail-Json (New-Object psobject) "specified folder must already exist: physical_path"
+    }
+
+    $directory_parameters = New-Object psobject @{
+      Site = $site
+      Name = $name
+      PhysicalPath = $physical_path
+    };
+
+    If ($application) {
+      $directory_parameters.Application = $application
+    }
+
+    $directory = New-WebVirtualDirectory @directory_parameters -Force
+    $result.changed = $true
+  }
+
+  # Remove directory
+  If ($state -eq 'absent' -and $directory) {
+    Remove-Item $directory_path
+    $result.changed = $true
+  }
+
+  $directory = Get-WebVirtualDirectory -Site $site -Name $name
+  If($directory) {
+
+    # Change Physical Path if needed
+    if($physical_path) {
+      If (-not (Test-Path $physical_path)) {
+        Fail-Json (New-Object psobject) "specified folder must already exist: physical_path"
+      }
+
+      $vdir_folder = Get-Item $directory.PhysicalPath
+      $folder = Get-Item $physical_path
+      If($folder.FullName -ne $vdir_folder.FullName) {
+        Set-ItemProperty $directory_path -name physicalPath -value $physical_path
+        $result.changed = $true
+      }
+    }
+  }
+} catch {
+  Fail-Json $result $_.Exception.Message
+}
+
+# Result
+$directory = Get-WebVirtualDirectory -Site $site -Name $name
+$result.directory = New-Object psobject @{
+  PhysicalPath = $directory.PhysicalPath
+}
+
+Exit-Json $result
diff --git a/lib/ansible/modules/extras/windows/win_iis_virtualdirectory.py b/lib/ansible/modules/extras/windows/win_iis_virtualdirectory.py
new file mode 100644
index 0000000000..bbedfbbb4a
--- /dev/null
+++ b/lib/ansible/modules/extras/windows/win_iis_virtualdirectory.py
@@ -0,0 +1,67 @@
+#!/usr/bin/python
+# -*- coding: utf-8 -*-
+
+# (c) 2015, Henrik Wallström <henrik@wallstroms.nu>
+#
+# This file is part of Ansible
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+
+DOCUMENTATION = '''
+---
+module: win_iis_virtualdirectory
+version_added: "1.9"
+short_description: Configures a IIS virtual directories.
+description:
+     - Creates, Removes and configures a IIS Web site
+options:
+  name:
+    description:
+      - The name of the virtual directory to create.
+    required: true
+    default: null
+    aliases: []
+  state:
+    description:
+      -
+    choices:
+      - absent
+      - present
+    required: false
+    default: null
+    aliases: []
+  site:
+    description:
+      - The site name under which the virtual directory is created or exists.
+    required: false
+    default: null
+    aliases: []
+  application:
+    description:
+      - The application under which the virtual directory is created or exists.
+    required: false
+    default: null
+    aliases: []
+  physical_path:
+    description:
+      - The physical path to the folder in which the new virtual directory is created. The specified folder must already exist.
+    required: false
+    default: null
+    aliases: []
+author: Henrik Wallström
+'''
+
+EXAMPLES = '''
+
+'''
diff --git a/lib/ansible/modules/extras/windows/win_iis_webapplication.ps1 b/lib/ansible/modules/extras/windows/win_iis_webapplication.ps1
new file mode 100644
index 0000000000..e576dd5081
--- /dev/null
+++ b/lib/ansible/modules/extras/windows/win_iis_webapplication.ps1
@@ -0,0 +1,132 @@
+#!powershell
+
+# (c) 2015, Henrik Wallström <henrik@wallstroms.nu>
+#
+# This file is part of Ansible
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+
+# WANT_JSON
+# POWERSHELL_COMMON
+
+$params = Parse-Args $args;
+
+# Name parameter
+$name = Get-Attr $params "name" $FALSE;
+If ($name -eq $FALSE) {
+    Fail-Json (New-Object psobject) "missing required argument: name";
+}
+
+# Site
+$site = Get-Attr $params "site" $FALSE;
+If ($site -eq $FALSE) {
+    Fail-Json (New-Object psobject) "missing required argument: site";
+}
+
+# State parameter
+$state = Get-Attr $params "state" "present";
+$state.ToString().ToLower();
+If (($state -ne 'present') -and ($state -ne 'absent')) {
+  Fail-Json $result "state is '$state'; must be 'present' or 'absent'"
+}
+
+# Path parameter
+$physical_path = Get-Attr $params "physical_path" $FALSE;
+
+# Application Pool Parameter
+$application_pool = Get-Attr $params "application_pool" $FALSE;
+
+
+# Ensure WebAdministration module is loaded
+if ((Get-Module "WebAdministration" -ErrorAction SilentlyContinue) -eq $null) {
+  Import-Module WebAdministration
+}
+
+# Result
+$result = New-Object psobject @{
+  application = New-Object psobject
+  changed = $false
+};
+
+# Application info
+$application = Get-WebApplication -Site $site -Name $name
+
+try {
+  # Add application
+  If(($state -eq 'present') -and (-not $application)) {
+    If ($physical_path -eq $FALSE) {
+      Fail-Json (New-Object psobject) "missing required arguments: physical_path"
+    }
+    If (-not (Test-Path $physical_path)) {
+      Fail-Json (New-Object psobject) "specified folder must already exist: physical_path"
+    }
+
+    $application_parameters = New-Object psobject @{
+      Site = $site
+      Name = $name
+      PhysicalPath = $physical_path
+    };
+
+    If ($application_pool) {
+      $application_parameters.ApplicationPool = $application_pool
+    }
+
+    $application = New-WebApplication @application_parameters -Force
+    $result.changed = $true
+
+  }
+
+  # Remove application
+  if ($state -eq 'absent' -and $application) {
+    $application = Remove-WebApplication -Site $site -Name $name
+    $result.changed = $true
+  }
+
+  $application = Get-WebApplication -Site $site -Name $name
+  If($application) {
+
+    # Change Physical Path if needed
+    if($physical_path) {
+      If (-not (Test-Path $physical_path)) {
+        Fail-Json (New-Object psobject) "specified folder must already exist: physical_path"
+      }
+
+      $app_folder = Get-Item $application.PhysicalPath
+      $folder = Get-Item $physical_path
+      If($folder.FullName -ne $app_folder.FullName) {
+        Set-ItemProperty "IIS:\Sites\$($site)\$($name)" -name physicalPath -value $physical_path
+        $result.changed = $true
+      }
+    }
+
+    # Change Application Pool if needed
+    if($application_pool) {
+      If($application_pool -ne $application.applicationPool) {
+        Set-ItemProperty "IIS:\Sites\$($site)\$($name)" -name applicationPool -value $application_pool
+        $result.changed = $true
+      }
+    }
+  }
+} catch {
+  Fail-Json $result $_.Exception.Message
+}
+
+# Result
+$application = Get-WebApplication -Site $site -Name $name
+$result.application = New-Object psobject @{
+  PhysicalPath = $application.PhysicalPath
+  ApplicationPool = $application.applicationPool
+}
+
+Exit-Json $result
diff --git a/lib/ansible/modules/extras/windows/win_iis_webapplication.py b/lib/ansible/modules/extras/windows/win_iis_webapplication.py
new file mode 100644
index 0000000000..d8a59b6605
--- /dev/null
+++ b/lib/ansible/modules/extras/windows/win_iis_webapplication.py
@@ -0,0 +1,68 @@
+#!/usr/bin/python
+# -*- coding: utf-8 -*-
+
+# (c) 2015, Henrik Wallström <henrik@wallstroms.nu>
+#
+# This file is part of Ansible
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+
+DOCUMENTATION = '''
+---
+module: win_iis_website
+version_added: "1.9"
+short_description: Configures a IIS Web application.
+description:
+     - Creates, Removes and configures a IIS Web applications
+options:
+  name:
+    description:
+      - Name of the Web applicatio
+    required: true
+    default: null
+    aliases: []
+ site:
+   description:
+     - Name of the site on which the application is created.
+   required: true
+   default: null
+   aliases: []
+  state:
+    description:
+      - State of the web application
+    choices:
+      - present
+      - absent
+    required: false
+    default: null
+    aliases: []
+  physical_path:
+    description:
+      - The physical path on the remote host to use for the new applicatiojn. The specified folder must already exist.
+    required: false
+    default: null
+    aliases: []
+  application_pool:
+    description:
+      - The application pool in which the new site executes.
+    required: false
+    default: null
+    aliases: []
+author: Henrik Wallström
+'''
+
+EXAMPLES = '''
+$ ansible -i hosts -m win_iis_webapplication -a "name=api site=acme physical_path=c:\\apps\\acme\\api" host
+
+'''
diff --git a/lib/ansible/modules/extras/windows/win_iis_webapppool.ps1 b/lib/ansible/modules/extras/windows/win_iis_webapppool.ps1
new file mode 100644
index 0000000000..2ed369e4a3
--- /dev/null
+++ b/lib/ansible/modules/extras/windows/win_iis_webapppool.ps1
@@ -0,0 +1,112 @@
+#!powershell
+
+# (c) 2015, Henrik Wallström <henrik@wallstroms.nu>
+#
+# This file is part of Ansible
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+
+
+# WANT_JSON
+# POWERSHELL_COMMON
+
+$params = Parse-Args $args;
+
+# Name parameter
+$name = Get-Attr $params "name" $FALSE;
+If ($name -eq $FALSE) {
+    Fail-Json (New-Object psobject) "missing required argument: name";
+}
+
+# State parameter
+$state = Get-Attr $params "state" $FALSE;
+$valid_states = ('started', 'restarted', 'stopped', 'absent');
+If (($state -Ne $FALSE) -And ($state -NotIn $valid_states)) {
+  Fail-Json $result "state is '$state'; must be $($valid_states)"
+}
+
+# Attributes parameter - Pipe separated list of attributes where
+# keys and values are separated by comma (paramA:valyeA|paramB:valueB)
+$attributes = @{};
+If ($params.attributes) {
+  $params.attributes -split '\|' | foreach {
+    $key, $value = $_ -split "\:";
+    $attributes.Add($key, $value);
+  }
+}
+
+# Ensure WebAdministration module is loaded
+if ((Get-Module "WebAdministration" -ErrorAction SilentlyContinue) -eq $NULL){
+  Import-Module WebAdministration
+}
+
+# Result
+$result = New-Object psobject @{
+  changed = $FALSE
+  attributes = $attributes
+};
+
+# Get pool
+$pool = Get-Item IIS:\AppPools\$name
+
+try {
+  # Add
+  if (-not $pool -and $state -in ('started', 'stopped', 'restarted')) {
+    New-WebAppPool $name
+    $result.changed = $TRUE
+  }
+
+  # Remove
+  if ($pool -and $state -eq 'absent') {
+    Remove-WebAppPool $name
+    $result.changed = $TRUE
+  }
+
+  $pool = Get-Item IIS:\AppPools\$name
+  if($pool) {
+    # Set properties
+    $attributes.GetEnumerator() | foreach {
+      $newParameter = $_;
+      $currentParameter = Get-ItemProperty ("IIS:\AppPools\" + $name) $newParameter.Key
+      if(-not $currentParameter -or ($currentParameter.Value -as [String]) -ne $newParameter.Value) {
+        Set-ItemProperty ("IIS:\AppPools\" + $name) $newParameter.Key $newParameter.Value
+        $result.changed = $TRUE
+      }
+    }
+
+    # Set run state
+    if (($state -eq 'stopped') -and ($pool.State -eq 'Started')) {
+      Stop-WebAppPool -Name $name -ErrorAction Stop
+      $result.changed = $TRUE
+    }
+    if ((($state -eq 'started') -and ($pool.State -eq 'Stopped')) -or ($state -eq 'restarted')) {
+      Start-WebAppPool -Name $name -ErrorAction Stop
+      $result.changed = $TRUE
+    }
+  }
+} catch {
+  Fail-Json $result $_.Exception.Message
+}
+
+# Result
+$pool = Get-Item IIS:\AppPools\$name
+$result.info = @{
+  name = $pool.Name
+  state = $pool.State
+  attributes =  New-Object psobject @{}
+};
+
+$pool.Attributes | ForEach { $result.info.attributes.Add($_.Name, $_.Value)};
+
+Exit-Json $result
diff --git a/lib/ansible/modules/extras/windows/win_iis_webapppool.py b/lib/ansible/modules/extras/windows/win_iis_webapppool.py
new file mode 100644
index 0000000000..320fe07f63
--- /dev/null
+++ b/lib/ansible/modules/extras/windows/win_iis_webapppool.py
@@ -0,0 +1,112 @@
+#!/usr/bin/python
+# -*- coding: utf-8 -*-
+
+# (c) 2015, Henrik Wallström <henrik@wallstroms.nu>
+#
+# This file is part of Ansible
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+
+
+DOCUMENTATION = '''
+---
+module: win_iis_webapppool
+version_added: "1.9"
+short_description: Configures a IIS Web Application Pool.
+description:
+     - Creates, Removes and configures a IIS Web Application Pool
+options:
+  name:
+    description:
+      - Names of application pool
+    required: true
+    default: null
+    aliases: []
+  state:
+    description:
+      - State of the binding
+    choices:
+      - absent
+      - stopped
+      - started
+      - restarted
+    required: false
+    default: null
+    aliases: []
+  attributes:
+    description:
+      - Application Pool attributes from string where attributes are seperated by a pipe and attribute name/values by colon Ex. "foo:1|bar:2"
+    required: false
+    default: null
+    aliases: []
+author: Henrik Wallström
+'''
+
+EXAMPLES = '''
+# This return information about an existing application pool
+$ansible -i inventory -m win_iis_webapppool -a "name='DefaultAppPool'" windows
+host | success >> {
+    "attributes": {},
+    "changed": false,
+    "info": {
+        "attributes": {
+            "CLRConfigFile": "",
+            "applicationPoolSid": "S-1-5-82-3006700770-424185619-1745488364-794895919-4004696415",
+            "autoStart": true,
+            "enable32BitAppOnWin64": false,
+            "enableConfigurationOverride": true,
+            "managedPipelineMode": 0,
+            "managedRuntimeLoader": "webengine4.dll",
+            "managedRuntimeVersion": "v4.0",
+            "name": "DefaultAppPool",
+            "passAnonymousToken": true,
+            "queueLength": 1000,
+            "startMode": 0,
+            "state": 1
+        },
+        "name": "DefaultAppPool",
+        "state": "Started"
+    }
+}
+
+# This creates a new application pool in 'Started' state
+$  ansible -i inventory -m win_iis_webapppool -a "name='AppPool' state=started" windows
+
+# This stoppes an application pool
+$  ansible -i inventory -m win_iis_webapppool -a "name='AppPool' state=stopped" windows
+
+# This restarts an application pool
+$  ansible -i inventory -m win_iis_webapppool -a "name='AppPool' state=restart" windows
+
+# This restarts an application pool
+$  ansible -i inventory -m win_iis_webapppool -a "name='AppPool' state=restart" windows
+
+# This change application pool attributes without touching state
+$  ansible -i inventory -m win_iis_webapppool -a "name='AppPool' attributes='managedRuntimeVersion:v4.0|autoStart:false'" windows
+
+# This creates an application pool and sets attributes
+$  ansible -i inventory -m win_iis_webapppool -a "name='AnotherAppPool' state=started attributes='managedRuntimeVersion:v4.0|autoStart:false'" windows
+
+
+# Playbook example
+---
+
+- name: App Pool with .NET 4.0
+  win_iis_webapppool:
+    name: 'AppPool'
+    state: started
+    attributes: managedRuntimeVersion:v4.0
+  register: webapppool
+
+'''
diff --git a/lib/ansible/modules/extras/windows/win_iis_webbinding.ps1 b/lib/ansible/modules/extras/windows/win_iis_webbinding.ps1
new file mode 100644
index 0000000000..bdff43fc63
--- /dev/null
+++ b/lib/ansible/modules/extras/windows/win_iis_webbinding.ps1
@@ -0,0 +1,138 @@
+#!powershell
+
+# (c) 2015, Henrik Wallström <henrik@wallstroms.nu>
+#
+# This file is part of Ansible
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+
+
+# WANT_JSON
+# POWERSHELL_COMMON
+
+$params = Parse-Args $args;
+
+# Name parameter
+$name = Get-Attr $params "name" $FALSE;
+If ($name -eq $FALSE) {
+    Fail-Json (New-Object psobject) "missing required argument: name";
+}
+
+# State parameter
+$state = Get-Attr $params "state" $FALSE;
+$valid_states = ($FALSE, 'present', 'absent');
+If ($state -NotIn $valid_states) {
+  Fail-Json $result "state is '$state'; must be $($valid_states)"
+}
+
+$binding_parameters = New-Object psobject @{
+  Name = $name
+};
+
+If ($params.host_header) {
+  $binding_parameters.HostHeader = $params.host_header
+}
+
+If ($params.protocol) {
+  $binding_parameters.Protocol = $params.protocol
+}
+
+If ($params.port) {
+  $binding_parameters.Port = $params.port
+}
+
+If ($params.ip) {
+  $binding_parameters.IPAddress = $params.ip
+}
+
+$certificateHash = Get-Attr $params "certificate_hash" $FALSE;
+$certificateStoreName = Get-Attr $params "certificate_store_name" "MY";
+
+# Ensure WebAdministration module is loaded
+if ((Get-Module "WebAdministration" -ErrorAction SilentlyContinue) -eq $null){
+  Import-Module WebAdministration
+}
+
+function Create-Binding-Info {
+  return New-Object psobject @{
+    "bindingInformation" = $args[0].bindingInformation
+    "certificateHash" = $args[0].certificateHash
+    "certificateStoreName" = $args[0].certificateStoreName
+    "isDsMapperEnabled" = $args[0].isDsMapperEnabled
+    "protocol" = $args[0].protocol
+    "sslFlags" = $args[0].sslFlags
+  }
+}
+
+# Result
+$result = New-Object psobject @{
+  changed = $false
+  parameters = $binding_parameters
+  matched = @()
+  removed = @()
+  added = @()
+};
+
+# Get bindings matching parameters
+$curent_bindings = Get-WebBinding @binding_parameters
+$curent_bindings | Foreach {
+  $result.matched += Create-Binding-Info $_
+}
+
+try {
+  # Add
+  if (-not $curent_bindings -and $state -eq 'present') {
+    New-WebBinding @binding_parameters -Force
+
+    # Select certificat
+    if($certificateHash -ne $FALSE) {
+
+      $ip = $binding_parameters.IPAddress
+      if((!$ip) -or ($ip -eq "*")) {
+        $ip = "0.0.0.0"
+      }
+
+      $port = $binding_parameters.Port
+      if(!$port) {
+        $port = 443
+      }
+
+      $result.port = $port
+      $result.ip = $ip
+
+      Push-Location IIS:\SslBindings\
+      Get-Item Cert:\LocalMachine\$certificateStoreName\$certificateHash | New-Item  "$($ip)!$($port)"
+      Pop-Location
+    }
+
+    $result.added += Create-Binding-Info (Get-WebBinding @binding_parameters)
+    $result.changed = $true
+  }
+
+  # Remove
+  if ($curent_bindings -and $state -eq 'absent') {
+    $curent_bindings | foreach {
+      Remove-WebBinding -InputObject $_
+      $result.removed += Create-Binding-Info $_
+    }
+    $result.changed = $true
+  }
+
+
+}
+catch {
+  Fail-Json $result $_.Exception.Message
+}
+
+Exit-Json $result
diff --git a/lib/ansible/modules/extras/windows/win_iis_webbinding.py b/lib/ansible/modules/extras/windows/win_iis_webbinding.py
new file mode 100644
index 0000000000..0cc5da158b
--- /dev/null
+++ b/lib/ansible/modules/extras/windows/win_iis_webbinding.py
@@ -0,0 +1,143 @@
+#!/usr/bin/python
+# -*- coding: utf-8 -*-
+
+# (c) 2015, Henrik Wallström <henrik@wallstroms.nu>
+#
+# This file is part of Ansible
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+
+
+DOCUMENTATION = '''
+---
+module: win_iis_webbinding
+version_added: "1.9"
+short_description: Configures a IIS Web site.
+description:
+     - Creates, Removes and configures a binding to an existing IIS Web site
+options:
+  name:
+    description:
+      - Names of web site
+    required: true
+    default: null
+    aliases: []
+  state:
+    description:
+      - State of the binding
+    choices:
+      - present
+      - absent
+    required: false
+    default: null
+    aliases: []
+  port:
+    description:
+      - The port to bind to / use for the new site.
+    required: false
+    default: null
+    aliases: []
+  ip:
+    description:
+      - The IP address to bind to / use for the new site.
+    required: false
+    default: null
+    aliases: []
+  host_header:
+    description:
+      - The host header to bind to / use for the new site.
+    required: false
+    default: null
+    aliases: []
+  protocol:
+    description:
+      - The protocol to be used for the Web binding (usually HTTP, HTTPS, or FTP).
+    required: false
+    default: null
+    aliases: []
+  protocol:
+    description:
+      - The protocol to be used for the Web binding (usually HTTP, HTTPS, or FTP).
+    required: false
+    default: null
+    aliases: []
+  certificate_hash:
+    description:
+      - Certificate hash for the SSL binding. The certificate hash is the unique identifier for the certificate.
+    required: false
+    default: null
+    aliases: []
+  certificate_store_name:
+    description:
+      -  Name of the certificate store where the certificate for the binding is located.
+    required: false
+    default: "My"
+    aliases: []
+author: Henrik Wallström
+'''
+
+EXAMPLES = '''
+# This will return binding information for an existing host
+$ ansible -i vagrant-inventory -m win_iis_webbinding -a "name='Default Web Site'" windows
+host | success >> {
+    "added": [],
+    "changed": false,
+    "matched": [
+        {
+            "bindingInformation": "*:80:",
+            "certificateHash": "",
+            "certificateStoreName": "",
+            "isDsMapperEnabled": false,
+            "protocol": "http",
+            "sslFlags": 0
+        }
+    ],
+    "parameters": {
+        "Name": "Default Web Site"
+    },
+    "removed": []
+}
+
+# This will return the HTTPS binding information for an existing host
+$ ansible -i vagrant-inventory -m win_iis_webbinding -a "name='Default Web Site' protocol=https" windows
+
+# This will return the HTTPS binding information for an existing host
+$ ansible -i vagrant-inventory -m win_iis_webbinding -a "name='Default Web Site' port:9090 state=present" windows
+
+# This will add a HTTP binding on port 9090
+$ ansible -i vagrant-inventory -m win_iis_webbinding -a "name='Default Web Site' port=9090 state=present" windows
+
+# This will remove the HTTP binding on port 9090
+$ ansible -i vagrant-inventory -m win_iis_webbinding -a "name='Default Web Site' port=9090 state=present" windows
+
+# This will add a HTTPS binding
+$ ansible -i vagrant-inventory -m win_iis_webbinding -a "name='Default Web Site' protocol=https state=present" windows
+
+# This will add a HTTPS binding and select certificate to use
+# ansible -i vagrant-inventory -m win_iis_webbinding -a "name='Default Web Site' protocol=https certificate_hash= B0D0FA8408FC67B230338FCA584D03792DA73F4C" windows
+
+
+# Playbook example
+---
+
+- name: Website http/https bidings
+  win_iis_webbinding:
+    name: "Default Web Site"
+    protocol: https
+    port: 443
+    certificate_hash: "D1A3AF8988FD32D1A3AF8988FD323792DA73F4C"
+    state: present
+  when: monitor_use_https
+
+'''
diff --git a/lib/ansible/modules/extras/windows/win_iis_website.ps1 b/lib/ansible/modules/extras/windows/win_iis_website.ps1
new file mode 100644
index 0000000000..bba1e94114
--- /dev/null
+++ b/lib/ansible/modules/extras/windows/win_iis_website.ps1
@@ -0,0 +1,179 @@
+#!powershell
+
+# (c) 2015, Henrik Wallström <henrik@wallstroms.nu>
+#
+# This file is part of Ansible
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+
+# WANT_JSON
+# POWERSHELL_COMMON
+
+$params = Parse-Args $args;
+
+# Name parameter
+$name = Get-Attr $params "name" $FALSE;
+If ($name -eq $FALSE) {
+    Fail-Json (New-Object psobject) "missing required argument: name";
+}
+
+# State parameter
+$state = Get-Attr $params "state" $FALSE;
+$state.ToString().ToLower();
+If (($state -ne $FALSE) -and ($state -ne 'started') -and ($state -ne 'stopped') -and ($state -ne 'restarted') -and ($state -ne 'absent')) {
+  Fail-Json (New-Object psobject) "state is '$state'; must be 'started', 'restarted', 'stopped' or 'absent'"
+}
+
+# Path parameter
+$physical_path = Get-Attr $params "physical_path" $FALSE;
+
+# Application Pool Parameter
+$application_pool = Get-Attr $params "application_pool" $FALSE;
+
+# Binding Parameters
+$bind_port = Get-Attr $params "port" $FALSE;
+$bind_ip = Get-Attr $params "ip" $FALSE;
+$bind_hostname = Get-Attr $params "hostname" $FALSE;
+$bind_ssl = Get-Attr $params "ssl" $FALSE;
+
+# Custom site Parameters from string where properties
+# are seperated by a pipe and property name/values by colon.
+# Ex. "foo:1|bar:2"
+$parameters = Get-Attr $params "parameters" $null;
+if($parameters -ne $null) {
+  $parameters = @($parameters -split '\|' | ForEach {
+    return ,($_ -split "\:", 2);
+  })
+}
+
+
+# Ensure WebAdministration module is loaded
+if ((Get-Module "WebAdministration" -ErrorAction SilentlyContinue) -eq $null) {
+  Import-Module WebAdministration
+}
+
+# Result
+$result = New-Object psobject @{
+  site = New-Object psobject
+  changed = $false
+};
+
+# Site info
+$site = Get-Website -Name $name
+
+Try {
+  # Add site
+  If(($state -ne 'absent') -and (-not $site)) {
+    If ($physical_path -eq $FALSE) {
+      Fail-Json (New-Object psobject) "missing required arguments: physical_path"
+    }
+    ElseIf (-not (Test-Path $physical_path)) {
+      Fail-Json (New-Object psobject) "specified folder must already exist: physical_path"
+    }
+
+    $site_parameters = New-Object psobject @{
+      Name = $name
+      PhysicalPath = $physical_path
+    };
+
+    If ($application_pool) {
+      $site_parameters.ApplicationPool = $application_pool
+    }
+
+    If ($bind_port) {
+      $site_parameters.Port = $bind_port
+    }
+
+    If ($bind_ip) {
+      $site_parameters.IPAddress = $bind_ip
+    }
+
+    If ($bind_hostname) {
+      $site_parameters.HostHeader = $bind_hostname
+    }
+
+    $site = New-Website @site_parameters -Force
+    $result.changed = $true
+  }
+
+  # Remove site
+  If ($state -eq 'absent' -and $site) {
+    $site = Remove-Website -Name $name
+    $result.changed = $true
+  }
+
+  $site = Get-Website -Name $name
+  If($site) {
+    # Change Physical Path if needed
+    if($physical_path) {
+      If (-not (Test-Path $physical_path)) {
+        Fail-Json (New-Object psobject) "specified folder must already exist: physical_path"
+      }
+
+      $folder = Get-Item $physical_path
+      If($folder.FullName -ne $site.PhysicalPath) {
+        Set-ItemProperty "IIS:\Sites\$($site.Name)" -name physicalPath -value $folder.FullName
+        $result.changed = $true
+      }
+    }
+
+    # Change Application Pool if needed
+    if($application_pool) {
+      If($application_pool -ne $site.applicationPool) {
+        Set-ItemProperty "IIS:\Sites\$($site.Name)" -name applicationPool -value $application_pool
+        $result.changed = $true
+      }
+    }
+
+    # Set properties
+    if($parameters) {
+      $parameters | foreach {
+        $parameter_value = Get-ItemProperty "IIS:\Sites\$($site.Name)" $_[0]
+        if((-not $parameter_value) -or ($parameter_value.Value -as [String]) -ne $_[1]) {
+          Set-ItemProperty "IIS:\Sites\$($site.Name)" $_[0] $_[1]
+          $result.changed = $true
+        }
+      }
+    }
+
+    # Set run state
+    if (($state -eq 'stopped') -and ($site.State -eq 'Started'))
+    {
+      Stop-Website -Name $name -ErrorAction Stop
+      $result.changed = $true
+    }
+    if ((($state -eq 'started') -and ($site.State -eq 'Stopped')) -or ($state -eq 'restarted'))
+    {
+      Start-Website -Name $name -ErrorAction Stop
+      $result.changed = $true
+    }
+  }
+}
+Catch
+{
+  Fail-Json (New-Object psobject) $_.Exception.Message
+}
+
+$site = Get-Website -Name $name
+$result.site = New-Object psobject @{
+  Name = $site.Name
+  ID = $site.ID
+  State = $site.State
+  PhysicalPath = $site.PhysicalPath
+  ApplicationPool = $site.applicationPool
+  Bindings = @($site.Bindings.Collection | ForEach-Object { $_.BindingInformation })
+}
+
+
+Exit-Json $result
diff --git a/lib/ansible/modules/extras/windows/win_iis_website.py b/lib/ansible/modules/extras/windows/win_iis_website.py
new file mode 100644
index 0000000000..0893b11c2b
--- /dev/null
+++ b/lib/ansible/modules/extras/windows/win_iis_website.py
@@ -0,0 +1,133 @@
+#!/usr/bin/python
+# -*- coding: utf-8 -*-
+
+# (c) 2015, Henrik Wallström <henrik@wallstroms.nu>
+#
+# This file is part of Ansible
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+
+DOCUMENTATION = '''
+---
+module: win_iis_website
+version_added: "1.9"
+short_description: Configures a IIS Web site.
+description:
+     - Creates, Removes and configures a IIS Web site
+options:
+  name:
+    description:
+      - Names of web site
+    required: true
+    default: null
+    aliases: []
+  state:
+    description:
+      - State of the web site
+    choices:
+      - started
+      - restarted
+      - stopped
+      - absent
+    required: false
+    default: null
+    aliases: []
+  physical_path:
+    description:
+      - The physical path on the remote host to use for the new site. The specified folder must already exist.
+    required: false
+    default: null
+    aliases: []
+  application_pool:
+    description:
+      - The application pool in which the new site executes.
+    required: false
+    default: null
+    aliases: []
+  port:
+    description:
+      - The port to bind to / use for the new site.
+    required: false
+    default: null
+    aliases: []
+  ip:
+    description:
+      - The IP address to bind to / use for the new site.
+    required: false
+    default: null
+    aliases: []
+  hostname:
+    description:
+      - The host header to bind to / use for the new site.
+    required: false
+    default: null
+    aliases: []
+  ssl:
+    description:
+      - Enables HTTPS binding on the site..
+    required: false
+    default: null
+    aliases: []
+  parameters:
+    description:
+      - Custom site Parameters from string where properties are seperated by a pipe and property name/values by colon Ex. "foo:1|bar:2"
+    required: false
+    default: null
+    aliases: []
+author: Henrik Wallström
+'''
+
+EXAMPLES = '''
+# This return information about an existing host
+$ ansible -i vagrant-inventory -m win_iis_website -a "name='Default Web Site'" window
+host | success >> {
+    "changed": false,
+    "site": {
+        "ApplicationPool": "DefaultAppPool",
+        "Bindings": [
+            "*:80:"
+        ],
+        "ID": 1,
+        "Name": "Default Web Site",
+        "PhysicalPath": "%SystemDrive%\\inetpub\\wwwroot",
+        "State": "Stopped"
+    }
+}
+
+# This stops an existing site.
+$ ansible -i hosts -m win_iis_website -a "name='Default Web Site' state=stopped" host
+
+# This creates a new site.
+$ ansible -i hosts -m win_iis_website -a "name=acme physical_path=c:\\sites\\acme" host
+
+# Change logfile .
+$ ansible -i hosts -m win_iis_website -a "name=acme physical_path=c:\\sites\\acme" host
+
+
+# Playbook example
+---
+
+- name: Acme IIS site
+  win_iis_website:
+    name: "Acme"
+    state: started
+    port: 80
+    ip: 127.0.0.1
+    hostname: acme.local
+    application_pool: "acme"
+    physical_path: 'c:\\sites\\acme'
+    parameters: 'logfile.directory:c:\\sites\\logs'
+  register: website
+
+'''
