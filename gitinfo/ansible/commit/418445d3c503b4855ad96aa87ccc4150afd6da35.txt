commit 418445d3c503b4855ad96aa87ccc4150afd6da35
Author: Christoph Seitz <christoph_seitz@gmx.de>
Date:   Wed Aug 1 18:09:30 2012 +0200

    Enable apt module to handle multiply packages (comma separated)

diff --git a/library/apt b/library/apt
index 319f51abf0..1cece58433 100755
--- a/library/apt
+++ b/library/apt
@@ -69,15 +69,23 @@ def package_status(m, pkgname, version, cache):
             return pkg.isInstalled, pkg.isUpgradable
 
 def install(m, pkgspec, cache, upgrade=False, default_release=None, install_recommends=True, force=False):
-    name, version = package_split(pkgspec)
-    installed, upgradable = package_status(m, name, version, cache)
-    if not installed or (upgrade and upgradable):
+    packages = list()
+    for package in pkgspec:
+        name, version = package_split(package)
+        installed, upgradable = package_status(m, name, version, cache)
+        if not installed or (upgrade and upgradable):
+            packages.append(package)
+    
+    if len(packages) >0:
         if force:
             force_yes = '--force-yes'
         else:
             force_yes = ''
 
-        cmd = "%s --option Dpkg::Options::=--force-confold -q -y %s install '%s'" % (APT, force_yes, pkgspec)
+        cmd = "%s --option Dpkg::Options::=--force-confold -q -y %s install " % (APT, force_yes)
+        for package in packages:
+            cmd += " '%s'" % package
+            
         if default_release:
             cmd += " -t '%s'" % (default_release,)
         if not install_recommends:
@@ -92,16 +100,23 @@ def install(m, pkgspec, cache, upgrade=False, default_release=None, install_reco
         m.exit_json(changed=False)
 
 def remove(m, pkgspec, cache, purge=False):
-    name, version = package_split(pkgspec)
-    installed, upgradable = package_status(m, name, version, cache)
-    if not installed:
+    packages = list()
+    for package in pkgspec:
+        name, version = package_split(package)
+        installed, upgradable = package_status(m, name, version, cache)
+        if installed:
+            packages.append(name)
+    
+    if len(packages) == 0:
         m.exit_json(changed=False)
     else:
         purge = '--purge' if purge else ''
-        cmd = "%s -q -y %s remove '%s'" % (APT, purge, name)
+        cmd = "%s -q -y %s remove" % (APT, purge)
+        for package in packages:
+            cmd += "  '%s'" % package
         rc, out, err = run_apt(cmd)
         if rc:
-            m.fail_json(msg="'apt-get remove %s' failed: %s" % (name, err))
+            m.fail_json(msg="'apt-get remove %s' failed: %s" % (packages, err))
         m.exit_json(changed=True)
 
 
@@ -145,23 +160,26 @@ def main():
             module.exit_json(changed=False)
 
     force_yes = module.boolean(p['force'])
-
-    if p['package'].count('=') > 1:
-        module.fail_json(msg='invalid package spec')
+    
+    packages = p['package'].split(',')
+    for package in packages:
+        if package.count('=') > 1:
+            module.fail_json(msg="invalid package spec: %s" % packages)
 
     if p['state'] == 'latest':
-        if '=' in p['package']:
-            module.fail_json(msg='version number inconsistent with state=latest')
-        install(module, p['package'], cache, upgrade=True,
-                  default_release=p['default_release'],
-                  install_recommends=install_recommends,
-                  force=force_yes)
+        for package in packages:
+            if '=' in package:
+                module.fail_json(msg='version number inconsistent with state=latest')
+        install(module, packages, cache, upgrade=True,
+                default_release=p['default_release'],
+                install_recommends=install_recommends,
+                force=force_yes)
 
     elif p['state'] == 'installed':
-        install(module, p['package'], cache, default_release=p['default_release'],
+        install(module, packages, cache, default_release=p['default_release'],
                   install_recommends=install_recommends,force=force_yes)
     elif p['state'] == 'removed':
-        remove(module, p['package'], cache, purge = module.boolean(p['purge']))
+        remove(module, packages, cache, purge = module.boolean(p['purge']))
 
 # this is magic, see lib/ansible/module_common.py
 #<<INCLUDE_ANSIBLE_MODULE_COMMON>>
