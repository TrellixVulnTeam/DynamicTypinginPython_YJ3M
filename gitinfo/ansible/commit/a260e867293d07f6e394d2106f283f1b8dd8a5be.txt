commit a260e867293d07f6e394d2106f283f1b8dd8a5be
Author: Tim Rupp <caphrim007@gmail.com>
Date:   Sat Nov 10 19:23:44 2018 -0800

    Remove f5-sdk from bigip_iapp_service module (#48511)

diff --git a/lib/ansible/modules/network/f5/bigip_iapp_service.py b/lib/ansible/modules/network/f5/bigip_iapp_service.py
index 45c3ec6527..9ef127d8ae 100644
--- a/lib/ansible/modules/network/f5/bigip_iapp_service.py
+++ b/lib/ansible/modules/network/f5/bigip_iapp_service.py
@@ -1,7 +1,7 @@
 #!/usr/bin/python
 # -*- coding: utf-8 -*-
 #
-# Copyright (c) 2017 F5 Networks Inc.
+# Copyright: (c) 2017, F5 Networks Inc.
 # GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
 
 from __future__ import absolute_import, division, print_function
@@ -110,6 +110,7 @@ options:
 extends_documentation_fragment: f5
 author:
   - Tim Rupp (@caphrim007)
+  - Wojciech Wypior (@wojtek0806)
 '''
 
 EXAMPLES = r'''
@@ -256,31 +257,29 @@ from ansible.module_utils.basic import env_fallback
 from ansible.module_utils.six import iteritems
 
 try:
-    from library.module_utils.network.f5.bigip import HAS_F5SDK
-    from library.module_utils.network.f5.bigip import F5Client
+    from library.module_utils.network.f5.bigip import F5RestClient
     from library.module_utils.network.f5.common import F5ModuleError
     from library.module_utils.network.f5.common import AnsibleF5Parameters
     from library.module_utils.network.f5.common import cleanup_tokens
     from library.module_utils.network.f5.common import fq_name
     from library.module_utils.network.f5.common import f5_argument_spec
+    from library.module_utils.network.f5.common import exit_json
+    from library.module_utils.network.f5.common import fail_json
+    from library.module_utils.network.f5.common import transform_name
     from library.module_utils.network.f5.common import flatten_boolean
-    try:
-        from library.module_utils.network.f5.common import iControlUnexpectedHTTPError
-    except ImportError:
-        HAS_F5SDK = False
+    from library.module_utils.network.f5.urls import build_service_uri
 except ImportError:
-    from ansible.module_utils.network.f5.bigip import HAS_F5SDK
-    from ansible.module_utils.network.f5.bigip import F5Client
+    from ansible.module_utils.network.f5.bigip import F5RestClient
     from ansible.module_utils.network.f5.common import F5ModuleError
     from ansible.module_utils.network.f5.common import AnsibleF5Parameters
     from ansible.module_utils.network.f5.common import cleanup_tokens
     from ansible.module_utils.network.f5.common import fq_name
     from ansible.module_utils.network.f5.common import f5_argument_spec
+    from ansible.module_utils.network.f5.common import exit_json
+    from ansible.module_utils.network.f5.common import fail_json
+    from ansible.module_utils.network.f5.common import transform_name
     from ansible.module_utils.network.f5.common import flatten_boolean
-    try:
-        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError
-    except ImportError:
-        HAS_F5SDK = False
+    from ansible.module_utils.network.f5.urls import build_service_uri
 
 
 class Parameters(AnsibleF5Parameters):
@@ -607,7 +606,7 @@ class ModuleParameters(Parameters):
         if self._values['strict_updates'] is not None:
             result = flatten_boolean(self._values['strict_updates'])
         elif self.param_strict_updates is not None:
-            result = self.param_strict_updates
+            result = flatten_boolean(self.param_strict_updates)
         else:
             return None
         if result == 'yes':
@@ -709,32 +708,27 @@ class ModuleManager(object):
         result = dict()
         state = self.want.state
 
-        try:
-            if state == "present":
-                changed = self.present()
-            elif state == "absent":
-                changed = self.absent()
-        except iControlUnexpectedHTTPError as e:
-            raise F5ModuleError(str(e))
+        if state == "present":
+            changed = self.present()
+        elif state == "absent":
+            changed = self.absent()
 
         changes = self.changes.to_return()
         result.update(**changes)
         result.update(dict(changed=changed))
         return result
 
-    def exists(self):
-        result = self.client.api.tm.sys.application.services.service.exists(
-            name=self.want.name,
-            partition=self.want.partition
-        )
-        return result
-
     def present(self):
         if self.exists():
             return self.update()
         else:
             return self.create()
 
+    def absent(self):
+        if self.exists():
+            return self.remove()
+        return False
+
     def create(self):
         self._set_changed_options()
         if self.want.traffic_group is None:
@@ -748,6 +742,14 @@ class ModuleManager(object):
         self.create_on_device()
         return True
 
+    def remove(self):
+        if self.module.check_mode:
+            return True
+        self.remove_from_device()
+        if self.exists():
+            raise F5ModuleError("Failed to delete the iApp service")
+        return True
+
     def update(self):
         self.have = self.read_current_from_device()
         if not self.should_update() and not self.want.force:
@@ -763,76 +765,171 @@ class ModuleManager(object):
             return True
         return False
 
+    def exists(self):
+        base_uri = "https://{0}:{1}/mgmt/tm/sys/application/service/".format(
+            self.client.provider['server'],
+            self.client.provider['server_port']
+        )
+        uri = build_service_uri(base_uri, self.want.partition, self.want.name)
+        resp = self.client.api.get(uri)
+        try:
+            response = resp.json()
+        except ValueError:
+            return False
+        if resp.status == 404 or 'code' in response and response['code'] == 404:
+            return False
+        return True
+
     def update_on_device(self):
         params = self.changes.api_params()
-        resource = self.client.api.tm.sys.application.services.service.load(
-            name=self.want.name,
-            partition=self.want.partition
-        )
         if params:
             params['execute-action'] = 'definition'
-            resource.update(**params)
+            base_uri = "https://{0}:{1}/mgmt/tm/sys/application/service/".format(
+                self.client.provider['server'],
+                self.client.provider['server_port']
+            )
+            uri = build_service_uri(base_uri, self.want.partition, self.want.name)
+            resp = self.client.api.patch(uri, json=params)
+            try:
+                response = resp.json()
+            except ValueError as ex:
+                raise F5ModuleError(str(ex))
+
+            if 'code' in response and response['code'] == 400:
+                if 'message' in response:
+                    raise F5ModuleError(response['message'])
+                else:
+                    raise F5ModuleError(resp.content)
+
         if self.changes.metadata:
-            params = {'execute-action': 'definition'}
-            resource.update(
-                metadata=self.changes.metadata,
-                **params
+            params = dict(metadata=self.changes.metadata)
+            params.update({'execute-action': 'definition'})
+            base_uri = "https://{0}:{1}/mgmt/tm/sys/application/service/".format(
+                self.client.provider['server'],
+                self.client.provider['server_port']
             )
+            uri = build_service_uri(base_uri, self.want.partition, self.want.name)
+            resp = self.client.api.patch(uri, json=params)
+
+            try:
+                response = resp.json()
+            except ValueError as ex:
+                raise F5ModuleError(str(ex))
+
+            if 'code' in response and response['code'] == 400:
+                if 'message' in response:
+                    raise F5ModuleError(response['message'])
+                else:
+                    raise F5ModuleError(resp.content)
 
     def read_current_from_device(self):
-        result = self.client.api.tm.sys.application.services.service.load(
-            name=self.want.name,
-            partition=self.want.partition
-        ).to_dict()
-        result.pop('_meta_data', None)
-        return ApiParameters(params=result)
+        base_uri = "https://{0}:{1}/mgmt/tm/sys/application/service/".format(
+            self.client.provider['server'],
+            self.client.provider['server_port']
+        )
+        uri = build_service_uri(base_uri, self.want.partition, self.want.name)
+        resp = self.client.api.get(uri)
+
+        try:
+            response = resp.json()
+        except ValueError as ex:
+            raise F5ModuleError(str(ex))
+
+        if 'code' in response and response['code'] == 400:
+            if 'message' in response:
+                raise F5ModuleError(response['message'])
+            else:
+                raise F5ModuleError(resp.content)
+        return ApiParameters(params=response)
 
     def template_exists(self):
         name = fq_name(self.want.partition, self.want.template)
         parts = name.split('/')
-        result = self.client.api.tm.sys.application.templates.template.exists(
-            name=parts[2],
-            partition=parts[1]
+        uri = "https://{0}:{1}/mgmt/tm/sys/application/template/{2}".format(
+            self.client.provider['server'],
+            self.client.provider['server_port'],
+            transform_name(parts[1], parts[2])
         )
-        return result
+        resp = self.client.api.get(uri)
+        try:
+            response = resp.json()
+        except ValueError:
+            return False
+        if resp.status == 404 or 'code' in response and response['code'] == 404:
+            return False
+        return True
 
     def create_on_device(self):
         params = self.changes.api_params()
-        resource = self.client.api.tm.sys.application.services.service.create(
-            name=self.want.name,
-            partition=self.want.partition,
-            **params
+        params['name'] = self.want.name
+        params['partition'] = self.want.partition
+        uri = "https://{0}:{1}/mgmt/tm/sys/application/service/".format(
+            self.client.provider['server'],
+            self.client.provider['server_port']
         )
-        if self.changes.metadata:
-            resource.update(metadata=self.changes.metadata)
+        resp = self.client.api.post(uri, json=params)
 
-    def absent(self):
-        if self.exists():
-            return self.remove()
-        return False
+        try:
+            response = resp.json()
+        except ValueError as ex:
+            raise F5ModuleError(str(ex))
 
-    def remove(self):
-        if self.module.check_mode:
-            return True
-        self.remove_from_device()
-        if self.exists():
-            raise F5ModuleError("Failed to delete the iApp service")
-        return True
+        if 'code' in response and response['code'] in [400, 403]:
+            if 'message' in response:
+                raise F5ModuleError(response['message'])
+            else:
+                raise F5ModuleError(resp.content)
+
+        if self.changes.metadata:
+            payload = dict(metadata=self.changes.metadata)
+            base_uri = "https://{0}:{1}/mgmt/tm/sys/application/service/".format(
+                self.client.provider['server'],
+                self.client.provider['server_port']
+            )
+            uri = build_service_uri(base_uri, self.want.partition, self.want.name)
+            resp = self.client.api.patch(uri, json=payload)
+            try:
+                response = resp.json()
+            except ValueError as ex:
+                raise F5ModuleError(str(ex))
+
+            if 'code' in response and response['code'] == 400:
+                if 'message' in response:
+                    raise F5ModuleError(response['message'])
+                else:
+                    raise F5ModuleError(resp.content)
 
     def remove_from_device(self):
-        resource = self.client.api.tm.sys.application.services.service.load(
-            name=self.want.name,
-            partition=self.want.partition
+        base_uri = "https://{0}:{1}/mgmt/tm/sys/application/service/".format(
+            self.client.provider['server'],
+            self.client.provider['server_port']
         )
-        if resource:
-            # Metadata needs to be zero'd before the service is removed because
-            # otherwise, the API will error out saying that "configuration items"
-            # currently exist.
-            #
-            # In other words, the REST API is not able to delete a service while
-            # there is existing metadata
-            resource.update(metadata=[])
-            resource.delete()
+        uri = build_service_uri(base_uri, self.want.partition, self.want.name)
+
+        # Metadata needs to be zero'd before the service is removed because
+        # otherwise, the API will error out saying that "configuration items"
+        # currently exist.
+        #
+        # In other words, the REST API is not able to delete a service while
+        # there is existing metadata
+        payload = dict(metadata=[])
+        resp = self.client.api.patch(uri, json=payload)
+        try:
+            response = resp.json()
+        except ValueError as ex:
+            raise F5ModuleError(str(ex))
+
+        if 'code' in response and response['code'] == 400:
+            if 'message' in response:
+                raise F5ModuleError(response['message'])
+            else:
+                raise F5ModuleError(resp.content)
+
+        resp = self.client.api.delete(uri)
+
+        if resp.status == 200:
+            return True
+        raise F5ModuleError(resp.content)
 
 
 class ArgumentSpec(object):
@@ -877,18 +974,17 @@ def main():
         argument_spec=spec.argument_spec,
         supports_check_mode=spec.supports_check_mode
     )
-    if not HAS_F5SDK:
-        module.fail_json(msg="The python f5-sdk module is required")
+
+    client = F5RestClient(**module.params)
 
     try:
-        client = F5Client(**module.params)
         mm = ModuleManager(module=module, client=client)
         results = mm.exec_module()
         cleanup_tokens(client)
-        module.exit_json(**results)
-    except F5ModuleError as e:
+        exit_json(module, results, client)
+    except F5ModuleError as ex:
         cleanup_tokens(client)
-        module.fail_json(msg=str(e))
+        fail_json(module, ex, client)
 
 
 if __name__ == '__main__':
diff --git a/test/units/modules/network/f5/test_bigip_iapp_service.py b/test/units/modules/network/f5/test_bigip_iapp_service.py
index 6c7ea639fc..6935e9a79e 100644
--- a/test/units/modules/network/f5/test_bigip_iapp_service.py
+++ b/test/units/modules/network/f5/test_bigip_iapp_service.py
@@ -14,9 +14,6 @@ from nose.plugins.skip import SkipTest
 if sys.version_info < (2, 7):
     raise SkipTest("F5 Ansible modules require Python >= 2.7")
 
-from units.compat import unittest
-from units.compat.mock import Mock
-from units.compat.mock import patch
 from ansible.module_utils.basic import AnsibleModule
 
 try:
@@ -25,9 +22,13 @@ try:
     from library.modules.bigip_iapp_service import ModuleParameters
     from library.modules.bigip_iapp_service import ModuleManager
     from library.modules.bigip_iapp_service import ArgumentSpec
-    from library.module_utils.network.f5.common import F5ModuleError
-    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError
-    from test.unit.modules.utils import set_module_args
+
+    # In Ansible 2.8, Ansible changed import paths.
+    from test.units.compat import unittest
+    from test.units.compat.mock import Mock
+    from test.units.compat.mock import patch
+
+    from test.units.modules.utils import set_module_args
 except ImportError:
     try:
         from ansible.modules.network.f5.bigip_iapp_service import Parameters
@@ -35,8 +36,12 @@ except ImportError:
         from ansible.modules.network.f5.bigip_iapp_service import ModuleParameters
         from ansible.modules.network.f5.bigip_iapp_service import ModuleManager
         from ansible.modules.network.f5.bigip_iapp_service import ArgumentSpec
-        from ansible.module_utils.network.f5.common import F5ModuleError
-        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError
+
+        # Ansible 2.8 imports
+        from units.compat import unittest
+        from units.compat.mock import Mock
+        from units.compat.mock import patch
+
         from units.modules.utils import set_module_args
     except ImportError:
         raise SkipTest("F5 Ansible modules require the f5-sdk Python library")
@@ -80,7 +85,7 @@ class TestParameters(unittest.TestCase):
 
     def test_module_parameters_lists(self):
         args = load_fixture('create_iapp_service_parameters_f5_http.json')
-        p = Parameters(params=args)
+        p = ModuleParameters(params=args)
 
         assert 'lists' in p._values
 
@@ -96,7 +101,7 @@ class TestParameters(unittest.TestCase):
 
     def test_module_parameters_tables(self):
         args = load_fixture('create_iapp_service_parameters_f5_http.json')
-        p = Parameters(params=args)
+        p = ModuleParameters(params=args)
 
         assert 'tables' in p._values
 
@@ -195,13 +200,13 @@ class TestParameters(unittest.TestCase):
         args = dict(
             strictUpdates='enabled'
         )
-        p = Parameters(params=args)
+        p = ApiParameters(params=args)
         assert p.strict_updates == 'enabled'
 
         args = dict(
             strictUpdates='disabled'
         )
-        p = Parameters(params=args)
+        p = ApiParameters(params=args)
         assert p.strict_updates == 'disabled'
 
     def test_api_parameters_variables(self):
@@ -214,7 +219,7 @@ class TestParameters(unittest.TestCase):
                 )
             ]
         )
-        p = Parameters(params=args)
+        p = ApiParameters(params=args)
         assert p.variables[0]['name'] == 'client__http_compression'
 
     def test_api_parameters_tables(self):
@@ -266,21 +271,21 @@ class TestParameters(unittest.TestCase):
         args = dict(
             inheritedTrafficGroup='true'
         )
-        p = Parameters(params=args)
+        p = ApiParameters(params=args)
         assert p.inheritedTrafficGroup == 'true'
 
     def test_api_parameters_inherited_devicegroup(self):
         args = dict(
             inheritedDevicegroup='true'
         )
-        p = Parameters(params=args)
+        p = ApiParameters(params=args)
         assert p.inheritedDevicegroup == 'true'
 
     def test_api_parameters_traffic_group(self):
         args = dict(
             trafficGroup='/Common/traffic-group-local-only'
         )
-        p = Parameters(params=args)
+        p = ApiParameters(params=args)
         assert p.traffic_group == '/Common/traffic-group-local-only'
 
     def test_module_template_same_partition(self):
