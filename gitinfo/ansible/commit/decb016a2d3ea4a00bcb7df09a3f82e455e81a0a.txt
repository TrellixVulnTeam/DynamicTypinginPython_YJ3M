commit decb016a2d3ea4a00bcb7df09a3f82e455e81a0a
Author: Miguel Angel Muñoz González <magonzalez@fortinet.com>
Date:   Mon Aug 19 14:48:11 2019 +0200

    FortiOS modules for 2.9 - 3 (#60678)
    
    * FortiOS modules for 2.9 - 3
    
    * Remove default values in doc, as suggested from review
    
    * Retriggering due to shippable failure
    
    * Update fortios_firewall_ipv6_eh_filter.py
    
    * Update fortios_firewall_ipmacbinding_setting.py
    
    * Update fortios_firewall_ippool.py
    
    * Update fortios_firewall_local_in_policy6.py
    
    * Update fortios_firewall_local_in_policy.py

diff --git a/lib/ansible/modules/network/fortios/fortios_firewall_internet_service_group.py b/lib/ansible/modules/network/fortios/fortios_firewall_internet_service_group.py
index 21828ae308..d5d5b82048 100644
--- a/lib/ansible/modules/network/fortios/fortios_firewall_internet_service_group.py
+++ b/lib/ansible/modules/network/fortios/fortios_firewall_internet_service_group.py
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_firewall_internet_service_group
 short_description: Configure group of Internet Service in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure firewall feature and internet_service_group category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify firewall feature and internet_service_group category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,55 +41,71 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     firewall_internet_service_group:
         description:
             - Configure group of Internet Service.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
             comment:
                 description:
                     - Comment.
+                type: str
             member:
                 description:
                     - Internet Service group member.
+                type: list
                 suboptions:
                     id:
                         description:
                             - Internet Service ID. Source firewall.internet-service.id.
                         required: true
+                        type: int
             name:
                 description:
                     - Internet Service group name.
                 required: true
+                type: str
 '''
 
 EXAMPLES = '''
@@ -102,6 +115,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure group of Internet Service.
     fortios_firewall_internet_service_group:
@@ -109,8 +123,9 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       firewall_internet_service_group:
-        state: "present"
         comment: "Comment."
         member:
          -
@@ -178,14 +193,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
-
-fos = None
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
 
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -193,7 +210,7 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_firewall_internet_service_group_data(json):
@@ -207,48 +224,66 @@ def filter_firewall_internet_service_group_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def firewall_internet_service_group(data, fos):
     vdom = data['vdom']
+    state = data['state']
     firewall_internet_service_group_data = data['firewall_internet_service_group']
-    filtered_data = filter_firewall_internet_service_group_data(firewall_internet_service_group_data)
-    if firewall_internet_service_group_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_firewall_internet_service_group_data(firewall_internet_service_group_data))
+
+    if state == "present":
         return fos.set('firewall',
                        'internet-service-group',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif firewall_internet_service_group_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('firewall',
                           'internet-service-group',
                           mkey=filtered_data['name'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_firewall(data, fos):
-    login(data)
 
-    methodlist = ['firewall_internet_service_group']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['firewall_internet_service_group']:
+        resp = firewall_internet_service_group(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "firewall_internet_service_group": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
                 "comment": {"required": False, "type": "str"},
                 "member": {"required": False, "type": "list",
                            "options": {
@@ -262,15 +297,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_firewall(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_firewall(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_firewall(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_firewall_ip_translation.py b/lib/ansible/modules/network/fortios/fortios_firewall_ip_translation.py
index b6128321a9..fbf024018a 100644
--- a/lib/ansible/modules/network/fortios/fortios_firewall_ip_translation.py
+++ b/lib/ansible/modules/network/fortios/fortios_firewall_ip_translation.py
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_firewall_ip_translation
 short_description: Configure firewall IP-translation in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure firewall feature and ip_translation category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify firewall feature and ip_translation category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,56 +41,73 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     firewall_ip_translation:
         description:
             - Configure firewall IP-translation.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
             endip:
                 description:
                     - "Final IPv4 address (inclusive) in the range of the addresses to be translated (format xxx.xxx.xxx.xxx, default: 0.0.0.0)."
-            map-startip:
+                type: str
+            map_startip:
                 description:
                     - "Address to be used as the starting point for translation in the range (format xxx.xxx.xxx.xxx, default: 0.0.0.0)."
+                type: str
             startip:
                 description:
                     - "First IPv4 address (inclusive) in the range of the addresses to be translated (format xxx.xxx.xxx.xxx, default: 0.0.0.0)."
+                type: str
             transid:
                 description:
                     - IP translation ID.
                 required: true
+                type: int
             type:
                 description:
                     - "IP translation type (option: SCTP)."
+                type: str
                 choices:
                     - SCTP
 '''
@@ -105,6 +119,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure firewall IP-translation.
     fortios_firewall_ip_translation:
@@ -112,10 +127,11 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       firewall_ip_translation:
-        state: "present"
         endip: "<your_own_value>"
-        map-startip: "<your_own_value>"
+        map_startip: "<your_own_value>"
         startip: "<your_own_value>"
         transid: "6"
         type: "SCTP"
@@ -181,14 +197,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -196,11 +214,11 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_firewall_ip_translation_data(json):
-    option_list = ['endip', 'map-startip', 'startip',
+    option_list = ['endip', 'map_startip', 'startip',
                    'transid', 'type']
     dictionary = {}
 
@@ -211,50 +229,68 @@ def filter_firewall_ip_translation_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def firewall_ip_translation(data, fos):
     vdom = data['vdom']
+    state = data['state']
     firewall_ip_translation_data = data['firewall_ip_translation']
-    filtered_data = filter_firewall_ip_translation_data(firewall_ip_translation_data)
-    if firewall_ip_translation_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_firewall_ip_translation_data(firewall_ip_translation_data))
+
+    if state == "present":
         return fos.set('firewall',
                        'ip-translation',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif firewall_ip_translation_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('firewall',
                           'ip-translation',
                           mkey=filtered_data['transid'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_firewall(data, fos):
-    login(data)
 
-    methodlist = ['firewall_ip_translation']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['firewall_ip_translation']:
+        resp = firewall_ip_translation(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "firewall_ip_translation": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
                 "endip": {"required": False, "type": "str"},
-                "map-startip": {"required": False, "type": "str"},
+                "map_startip": {"required": False, "type": "str"},
                 "startip": {"required": False, "type": "str"},
                 "transid": {"required": True, "type": "int"},
                 "type": {"required": False, "type": "str",
@@ -266,15 +302,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_firewall(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_firewall(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_firewall(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_firewall_ipmacbinding_setting.py b/lib/ansible/modules/network/fortios/fortios_firewall_ipmacbinding_setting.py
index f78358cc34..3a8ff949bd 100644
--- a/lib/ansible/modules/network/fortios/fortios_firewall_ipmacbinding_setting.py
+++ b/lib/ansible/modules/network/fortios/fortios_firewall_ipmacbinding_setting.py
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_firewall_ipmacbinding_setting
 short_description: Configure IP to MAC binding settings in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure firewall_ipmacbinding feature and setting category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify firewall_ipmacbinding feature and setting category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,49 +41,62 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
+        type: bool
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
         type: bool
-        default: false
+        default: true
+        version_added: 2.9
     firewall_ipmacbinding_setting:
         description:
             - Configure IP to MAC binding settings.
         default: null
+        type: dict
         suboptions:
             bindthroughfw:
                 description:
                     - Enable/disable use of IP/MAC binding to filter packets that would normally go through the firewall.
+                type: str
                 choices:
                     - enable
                     - disable
             bindtofw:
                 description:
                     - Enable/disable use of IP/MAC binding to filter packets that would normally go to the firewall.
+                type: str
                 choices:
                     - enable
                     - disable
             undefinedhost:
                 description:
-                    - Select action to take on packets with IP/MAC addresses not in the binding list (default = block).
+                    - Select action to take on packets with IP/MAC addresses not in the binding list.
+                type: str
                 choices:
                     - allow
                     - block
@@ -99,6 +109,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure IP to MAC binding settings.
     fortios_firewall_ipmacbinding_setting:
@@ -106,6 +117,7 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
       firewall_ipmacbinding_setting:
         bindthroughfw: "enable"
         bindtofw: "enable"
@@ -172,14 +184,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -187,7 +201,7 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_firewall_ipmacbinding_setting_data(json):
@@ -201,38 +215,55 @@ def filter_firewall_ipmacbinding_setting_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def firewall_ipmacbinding_setting(data, fos):
     vdom = data['vdom']
     firewall_ipmacbinding_setting_data = data['firewall_ipmacbinding_setting']
-    filtered_data = filter_firewall_ipmacbinding_setting_data(firewall_ipmacbinding_setting_data)
+    filtered_data = underscore_to_hyphen(filter_firewall_ipmacbinding_setting_data(firewall_ipmacbinding_setting_data))
+
     return fos.set('firewall.ipmacbinding',
                    'setting',
                    data=filtered_data,
                    vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_firewall_ipmacbinding(data, fos):
-    login(data)
 
-    methodlist = ['firewall_ipmacbinding_setting']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['firewall_ipmacbinding_setting']:
+        resp = firewall_ipmacbinding_setting(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
         "firewall_ipmacbinding_setting": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
                 "bindthroughfw": {"required": False, "type": "str",
                                   "choices": ["enable", "disable"]},
@@ -247,15 +278,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_firewall_ipmacbinding(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_firewall_ipmacbinding(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_firewall_ipmacbinding(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_firewall_ipmacbinding_table.py b/lib/ansible/modules/network/fortios/fortios_firewall_ipmacbinding_table.py
index b5d8c287a6..55f406f014 100644
--- a/lib/ansible/modules/network/fortios/fortios_firewall_ipmacbinding_table.py
+++ b/lib/ansible/modules/network/fortios/fortios_firewall_ipmacbinding_table.py
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_firewall_ipmacbinding_table
 short_description: Configure IP to MAC address pairs in the IP/MAC binding table in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure firewall_ipmacbinding feature and table category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify firewall_ipmacbinding feature and table category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,56 +41,72 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     firewall_ipmacbinding_table:
         description:
             - Configure IP to MAC address pairs in the IP/MAC binding table.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
             ip:
                 description:
                     - "IPv4 address portion of the pair (format: xxx.xxx.xxx.xxx)."
+                type: str
             mac:
                 description:
                     - "MAC address portion of the pair (format: xx:xx:xx:xx:xx:xx in hexidecimal)."
+                type: str
             name:
                 description:
                     - Name of the pair (optional, default = no name).
-            seq-num:
+                type: str
+            seq_num:
                 description:
                     - Entry number.
-                required: true
+                type: int
             status:
                 description:
                     - Enable/disable this IP-mac binding pair.
+                type: str
                 choices:
                     - enable
                     - disable
@@ -106,6 +119,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure IP to MAC address pairs in the IP/MAC binding table.
     fortios_firewall_ipmacbinding_table:
@@ -113,12 +127,13 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       firewall_ipmacbinding_table:
-        state: "present"
         ip: "<your_own_value>"
         mac: "<your_own_value>"
         name: "default_name_5"
-        seq-num: "6"
+        seq_num: "6"
         status: "enable"
 '''
 
@@ -182,14 +197,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -197,12 +214,12 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_firewall_ipmacbinding_table_data(json):
     option_list = ['ip', 'mac', 'name',
-                   'seq-num', 'status']
+                   'seq_num', 'status']
     dictionary = {}
 
     for attribute in option_list:
@@ -212,52 +229,70 @@ def filter_firewall_ipmacbinding_table_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def firewall_ipmacbinding_table(data, fos):
     vdom = data['vdom']
+    state = data['state']
     firewall_ipmacbinding_table_data = data['firewall_ipmacbinding_table']
-    filtered_data = filter_firewall_ipmacbinding_table_data(firewall_ipmacbinding_table_data)
-    if firewall_ipmacbinding_table_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_firewall_ipmacbinding_table_data(firewall_ipmacbinding_table_data))
+
+    if state == "present":
         return fos.set('firewall.ipmacbinding',
                        'table',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif firewall_ipmacbinding_table_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('firewall.ipmacbinding',
                           'table',
                           mkey=filtered_data['seq-num'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_firewall_ipmacbinding(data, fos):
-    login(data)
 
-    methodlist = ['firewall_ipmacbinding_table']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['firewall_ipmacbinding_table']:
+        resp = firewall_ipmacbinding_table(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "firewall_ipmacbinding_table": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
                 "ip": {"required": False, "type": "str"},
                 "mac": {"required": False, "type": "str"},
                 "name": {"required": False, "type": "str"},
-                "seq-num": {"required": True, "type": "int"},
+                "seq_num": {"required": False, "type": "int"},
                 "status": {"required": False, "type": "str",
                            "choices": ["enable", "disable"]}
 
@@ -267,15 +302,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_firewall_ipmacbinding(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_firewall_ipmacbinding(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_firewall_ipmacbinding(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_firewall_ippool.py b/lib/ansible/modules/network/fortios/fortios_firewall_ippool.py
index c8c62d5bd0..41ffb5ab8c 100644
--- a/lib/ansible/modules/network/fortios/fortios_firewall_ippool.py
+++ b/lib/ansible/modules/network/fortios/fortios_firewall_ippool.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 from __future__ import (absolute_import, division, print_function)
-# Copyright 2018 Fortinet, Inc.
+# Copyright 2019 Fortinet, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_firewall_ippool
 short_description: Configure IPv4 IP pools in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure firewall feature and ippool category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify firewall feature and ippool category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,89 +41,115 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     firewall_ippool:
         description:
             - Configure IPv4 IP pools.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
-            arp-intf:
+            arp_intf:
                 description:
                     - Select an interface from available options that will reply to ARP requests. (If blank, any is selected). Source system.interface.name.
-            arp-reply:
+                type: str
+            arp_reply:
                 description:
-                    - Enable/disable replying to ARP requests when an IP Pool is added to a policy (default = enable).
+                    - Enable/disable replying to ARP requests when an IP Pool is added to a policy.
+                type: str
                 choices:
                     - disable
                     - enable
-            associated-interface:
+            associated_interface:
                 description:
                     - Associated interface name. Source system.interface.name.
-            block-size:
+                type: str
+            block_size:
                 description:
-                    -  Number of addresses in a block (64 to 4096, default = 128).
+                    -  Number of addresses in a block (64 to 4096).
+                type: int
             comments:
                 description:
                     - Comment.
+                type: str
             endip:
                 description:
-                    - "Final IPv4 address (inclusive) in the range for the address pool (format xxx.xxx.xxx.xxx, Default: 0.0.0.0)."
+                    - "Final IPv4 address (inclusive) in the range for the address pool (format xxx.xxx.xxx.xxx)."
+                type: str
             name:
                 description:
                     - IP pool name.
                 required: true
-            num-blocks-per-user:
+                type: str
+            num_blocks_per_user:
                 description:
-                    - Number of addresses blocks that can be used by a user (1 to 128, default = 8).
-            pba-timeout:
+                    - Number of addresses blocks that can be used by a user (1 to 128).
+                type: int
+            pba_timeout:
                 description:
                     - Port block allocation timeout (seconds).
-            permit-any-host:
+                type: int
+            permit_any_host:
                 description:
                     - Enable/disable full cone NAT.
+                type: str
                 choices:
                     - disable
                     - enable
-            source-endip:
+            source_endip:
                 description:
-                    - "Final IPv4 address (inclusive) in the range of the source addresses to be translated (format xxx.xxx.xxx.xxx, Default: 0.0.0.0)."
-            source-startip:
+                    - "Final IPv4 address (inclusive) in the range of the source addresses to be translated (format xxx.xxx.xxx.xxx)."
+                type: str
+            source_startip:
                 description:
-                    - " First IPv4 address (inclusive) in the range of the source addresses to be translated (format xxx.xxx.xxx.xxx, Default: 0.0.0.0)."
+                    - " First IPv4 address (inclusive) in the range of the source addresses to be translated (format xxx.xxx.xxx.xxx)."
+                type: str
             startip:
                 description:
-                    - "First IPv4 address (inclusive) in the range for the address pool (format xxx.xxx.xxx.xxx, Default: 0.0.0.0)."
+                    - "First IPv4 address (inclusive) in the range for the address pool (format xxx.xxx.xxx.xxx)."
+                type: str
             type:
                 description:
                     - IP pool type (overload, one-to-one, fixed port range, or port block allocation).
+                type: str
                 choices:
                     - overload
                     - one-to-one
@@ -141,6 +164,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure IPv4 IP pools.
     fortios_firewall_ippool:
@@ -148,20 +172,21 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       firewall_ippool:
-        state: "present"
-        arp-intf: "<your_own_value> (source system.interface.name)"
-        arp-reply: "disable"
-        associated-interface: "<your_own_value> (source system.interface.name)"
-        block-size: "6"
+        arp_intf: "<your_own_value> (source system.interface.name)"
+        arp_reply: "disable"
+        associated_interface: "<your_own_value> (source system.interface.name)"
+        block_size: "6"
         comments: "<your_own_value>"
         endip: "<your_own_value>"
         name: "default_name_9"
-        num-blocks-per-user: "10"
-        pba-timeout: "11"
-        permit-any-host: "disable"
-        source-endip: "<your_own_value>"
-        source-startip: "<your_own_value>"
+        num_blocks_per_user: "10"
+        pba_timeout: "11"
+        permit_any_host: "disable"
+        source_endip: "<your_own_value>"
+        source_startip: "<your_own_value>"
         startip: "<your_own_value>"
         type: "overload"
 '''
@@ -186,7 +211,7 @@ mkey:
   description: Master key (id) used in the last call to FortiGate
   returned: success
   type: str
-  sample: "key1"
+  sample: "id"
 name:
   description: Name of the table used to fulfill the request
   returned: always
@@ -226,14 +251,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -241,14 +268,14 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_firewall_ippool_data(json):
-    option_list = ['arp-intf', 'arp-reply', 'associated-interface',
-                   'block-size', 'comments', 'endip',
-                   'name', 'num-blocks-per-user', 'pba-timeout',
-                   'permit-any-host', 'source-endip', 'source-startip',
+    option_list = ['arp_intf', 'arp_reply', 'associated_interface',
+                   'block_size', 'comments', 'endip',
+                   'name', 'num_blocks_per_user', 'pba_timeout',
+                   'permit_any_host', 'source_endip', 'source_startip',
                    'startip', 'type']
     dictionary = {}
 
@@ -259,62 +286,80 @@ def filter_firewall_ippool_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def firewall_ippool(data, fos):
     vdom = data['vdom']
+    state = data['state']
     firewall_ippool_data = data['firewall_ippool']
-    filtered_data = filter_firewall_ippool_data(firewall_ippool_data)
-    if firewall_ippool_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_firewall_ippool_data(firewall_ippool_data))
+
+    if state == "present":
         return fos.set('firewall',
                        'ippool',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif firewall_ippool_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('firewall',
                           'ippool',
                           mkey=filtered_data['name'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_firewall(data, fos):
-    login(data)
 
-    methodlist = ['firewall_ippool']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['firewall_ippool']:
+        resp = firewall_ippool(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "firewall_ippool": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
-                "arp-intf": {"required": False, "type": "str"},
-                "arp-reply": {"required": False, "type": "str",
+                "arp_intf": {"required": False, "type": "str"},
+                "arp_reply": {"required": False, "type": "str",
                               "choices": ["disable", "enable"]},
-                "associated-interface": {"required": False, "type": "str"},
-                "block-size": {"required": False, "type": "int"},
+                "associated_interface": {"required": False, "type": "str"},
+                "block_size": {"required": False, "type": "int"},
                 "comments": {"required": False, "type": "str"},
                 "endip": {"required": False, "type": "str"},
                 "name": {"required": True, "type": "str"},
-                "num-blocks-per-user": {"required": False, "type": "int"},
-                "pba-timeout": {"required": False, "type": "int"},
-                "permit-any-host": {"required": False, "type": "str",
+                "num_blocks_per_user": {"required": False, "type": "int"},
+                "pba_timeout": {"required": False, "type": "int"},
+                "permit_any_host": {"required": False, "type": "str",
                                     "choices": ["disable", "enable"]},
-                "source-endip": {"required": False, "type": "str"},
-                "source-startip": {"required": False, "type": "str"},
+                "source_endip": {"required": False, "type": "str"},
+                "source_startip": {"required": False, "type": "str"},
                 "startip": {"required": False, "type": "str"},
                 "type": {"required": False, "type": "str",
                          "choices": ["overload", "one-to-one", "fixed-port-range",
@@ -326,15 +371,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_firewall(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_firewall(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_firewall(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_firewall_ippool6.py b/lib/ansible/modules/network/fortios/fortios_firewall_ippool6.py
index 9bd1901c86..2ecafd3dc2 100644
--- a/lib/ansible/modules/network/fortios/fortios_firewall_ippool6.py
+++ b/lib/ansible/modules/network/fortios/fortios_firewall_ippool6.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 from __future__ import (absolute_import, division, print_function)
-# Copyright 2018 Fortinet, Inc.
+# Copyright 2019 Fortinet, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_firewall_ippool6
 short_description: Configure IPv6 IP pools in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure firewall feature and ippool6 category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify firewall feature and ippool6 category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,53 +41,69 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     firewall_ippool6:
         description:
             - Configure IPv6 IP pools.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
             comments:
                 description:
                     - Comment.
+                type: str
             endip:
                 description:
                     - "Final IPv6 address (inclusive) in the range for the address pool (format xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx, Default: ::)."
+                type: str
             name:
                 description:
                     - IPv6 IP pool name.
                 required: true
+                type: str
             startip:
                 description:
                     - "First IPv6 address (inclusive) in the range for the address pool (format xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx, Default: ::)."
+                type: str
 '''
 
 EXAMPLES = '''
@@ -100,6 +113,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure IPv6 IP pools.
     fortios_firewall_ippool6:
@@ -107,9 +121,10 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       firewall_ippool6:
-        state: "present"
-        comments: "<your_own_comment>"
+        comments: "<your_own_value>"
         endip: "<your_own_value>"
         name: "default_name_5"
         startip: "<your_own_value>"
@@ -135,7 +150,7 @@ mkey:
   description: Master key (id) used in the last call to FortiGate
   returned: success
   type: str
-  sample: "key1"
+  sample: "id"
 name:
   description: Name of the table used to fulfill the request
   returned: always
@@ -175,14 +190,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
-
-fos = None
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
 
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -190,7 +207,7 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_firewall_ippool6_data(json):
@@ -205,48 +222,66 @@ def filter_firewall_ippool6_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def firewall_ippool6(data, fos):
     vdom = data['vdom']
+    state = data['state']
     firewall_ippool6_data = data['firewall_ippool6']
-    filtered_data = filter_firewall_ippool6_data(firewall_ippool6_data)
-    if firewall_ippool6_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_firewall_ippool6_data(firewall_ippool6_data))
+
+    if state == "present":
         return fos.set('firewall',
                        'ippool6',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif firewall_ippool6_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('firewall',
                           'ippool6',
                           mkey=filtered_data['name'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_firewall(data, fos):
-    login(data)
 
-    methodlist = ['firewall_ippool6']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['firewall_ippool6']:
+        resp = firewall_ippool6(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "firewall_ippool6": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
                 "comments": {"required": False, "type": "str"},
                 "endip": {"required": False, "type": "str"},
                 "name": {"required": True, "type": "str"},
@@ -258,15 +293,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_firewall(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_firewall(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_firewall(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_firewall_ipv6_eh_filter.py b/lib/ansible/modules/network/fortios/fortios_firewall_ipv6_eh_filter.py
index 104fd602d2..cd0696aaa7 100644
--- a/lib/ansible/modules/network/fortios/fortios_firewall_ipv6_eh_filter.py
+++ b/lib/ansible/modules/network/fortios/fortios_firewall_ipv6_eh_filter.py
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_firewall_ipv6_eh_filter
 short_description: Configure IPv6 extension header filter in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure firewall feature and ipv6_eh_filter category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify firewall feature and ipv6_eh_filter category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,76 +41,94 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
+        type: bool
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
         type: bool
-        default: false
+        default: true
+        version_added: 2.9
     firewall_ipv6_eh_filter:
         description:
             - Configure IPv6 extension header filter.
         default: null
+        type: dict
         suboptions:
             auth:
                 description:
-                    - Enable/disable blocking packets with the Authentication header (default = disable).
+                    - Enable/disable blocking packets with the Authentication header.
+                type: str
                 choices:
                     - enable
                     - disable
-            dest-opt:
+            dest_opt:
                 description:
-                    - Enable/disable blocking packets with Destination Options headers (default = disable).
+                    - Enable/disable blocking packets with Destination Options headers.
+                type: str
                 choices:
                     - enable
                     - disable
             fragment:
                 description:
-                    - Enable/disable blocking packets with the Fragment header (default = disable).
+                    - Enable/disable blocking packets with the Fragment header.
+                type: str
                 choices:
                     - enable
                     - disable
-            hdopt-type:
+            hdopt_type:
                 description:
-                    - Block specific Hop-by-Hop and/or Destination Option types (max. 7 types, each between 0 and 255, default = 0).
-            hop-opt:
+                    - Block specific Hop-by-Hop and/or Destination Option types (max. 7 types, each between 0 and 255).
+                type: int
+            hop_opt:
                 description:
-                    - Enable/disable blocking packets with the Hop-by-Hop Options header (default = disable).
+                    - Enable/disable blocking packets with the Hop-by-Hop Options header.
+                type: str
                 choices:
                     - enable
                     - disable
-            no-next:
+            no_next:
                 description:
-                    - Enable/disable blocking packets with the No Next header (default = disable)
+                    - Enable/disable blocking packets with the No Next header.
+                type: str
                 choices:
                     - enable
                     - disable
             routing:
                 description:
-                    - Enable/disable blocking packets with Routing headers (default = enable).
+                    - Enable/disable blocking packets with Routing headers.
+                type: str
                 choices:
                     - enable
                     - disable
-            routing-type:
+            routing_type:
                 description:
-                    - Block specific Routing header types (max. 7 types, each between 0 and 255, default =  0).
+                    - Block specific Routing header types (max. 7 types, each between 0 and 255).
+                type: int
 '''
 
 EXAMPLES = '''
@@ -123,6 +138,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure IPv6 extension header filter.
     fortios_firewall_ipv6_eh_filter:
@@ -130,15 +146,16 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
       firewall_ipv6_eh_filter:
         auth: "enable"
-        dest-opt: "enable"
+        dest_opt: "enable"
         fragment: "enable"
-        hdopt-type: "6"
-        hop-opt: "enable"
-        no-next: "enable"
+        hdopt_type: "6"
+        hop_opt: "enable"
+        no_next: "enable"
         routing: "enable"
-        routing-type: "10"
+        routing_type: "10"
 '''
 
 RETURN = '''
@@ -201,14 +218,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -216,13 +235,13 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_firewall_ipv6_eh_filter_data(json):
-    option_list = ['auth', 'dest-opt', 'fragment',
-                   'hdopt-type', 'hop-opt', 'no-next',
-                   'routing', 'routing-type']
+    option_list = ['auth', 'dest_opt', 'fragment',
+                   'hdopt_type', 'hop_opt', 'no_next',
+                   'routing', 'routing_type']
     dictionary = {}
 
     for attribute in option_list:
@@ -232,53 +251,70 @@ def filter_firewall_ipv6_eh_filter_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def firewall_ipv6_eh_filter(data, fos):
     vdom = data['vdom']
     firewall_ipv6_eh_filter_data = data['firewall_ipv6_eh_filter']
-    filtered_data = filter_firewall_ipv6_eh_filter_data(firewall_ipv6_eh_filter_data)
+    filtered_data = underscore_to_hyphen(filter_firewall_ipv6_eh_filter_data(firewall_ipv6_eh_filter_data))
+
     return fos.set('firewall',
                    'ipv6-eh-filter',
                    data=filtered_data,
                    vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_firewall(data, fos):
-    login(data)
 
-    methodlist = ['firewall_ipv6_eh_filter']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['firewall_ipv6_eh_filter']:
+        resp = firewall_ipv6_eh_filter(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
         "firewall_ipv6_eh_filter": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
                 "auth": {"required": False, "type": "str",
                          "choices": ["enable", "disable"]},
-                "dest-opt": {"required": False, "type": "str",
+                "dest_opt": {"required": False, "type": "str",
                              "choices": ["enable", "disable"]},
                 "fragment": {"required": False, "type": "str",
                              "choices": ["enable", "disable"]},
-                "hdopt-type": {"required": False, "type": "int"},
-                "hop-opt": {"required": False, "type": "str",
+                "hdopt_type": {"required": False, "type": "int"},
+                "hop_opt": {"required": False, "type": "str",
                             "choices": ["enable", "disable"]},
-                "no-next": {"required": False, "type": "str",
+                "no_next": {"required": False, "type": "str",
                             "choices": ["enable", "disable"]},
                 "routing": {"required": False, "type": "str",
                             "choices": ["enable", "disable"]},
-                "routing-type": {"required": False, "type": "int"}
+                "routing_type": {"required": False, "type": "int"}
 
             }
         }
@@ -286,15 +322,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_firewall(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_firewall(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_firewall(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_firewall_ldb_monitor.py b/lib/ansible/modules/network/fortios/fortios_firewall_ldb_monitor.py
index ac1fbc1f23..03eefc7f1a 100644
--- a/lib/ansible/modules/network/fortios/fortios_firewall_ldb_monitor.py
+++ b/lib/ansible/modules/network/fortios/fortios_firewall_ldb_monitor.py
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_firewall_ldb_monitor
 short_description: Configure server load balancing health monitors in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure firewall feature and ldb_monitor category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify firewall feature and ldb_monitor category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,70 +41,91 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     firewall_ldb_monitor:
         description:
             - Configure server load balancing health monitors.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
-            http-get:
+            http_get:
                 description:
                     - URL used to send a GET request to check the health of an HTTP server.
-            http-match:
+                type: str
+            http_match:
                 description:
                     - String to match the value expected in response to an HTTP-GET request.
-            http-max-redirects:
+                type: str
+            http_max_redirects:
                 description:
                     - The maximum number of HTTP redirects to be allowed (0 - 5, default = 0).
+                type: int
             interval:
                 description:
                     - Time between health checks (5 - 65635 sec, default = 10).
+                type: int
             name:
                 description:
                     - Monitor name.
                 required: true
+                type: str
             port:
                 description:
                     - Service port used to perform the health check. If 0, health check monitor inherits port configured for the server (0 - 65635, default =
                        0).
+                type: int
             retry:
                 description:
                     - Number health check attempts before the server is considered down (1 - 255, default = 3).
+                type: int
             timeout:
                 description:
                     - Time to wait to receive response to a health check from a server. Reaching the timeout means the health check failed (1 - 255 sec,
                        default = 2).
+                type: int
             type:
                 description:
                     - Select the Monitor type used by the health check monitor to check the health of the server (PING | TCP | HTTP).
+                type: str
                 choices:
                     - ping
                     - tcp
@@ -122,6 +140,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure server load balancing health monitors.
     fortios_firewall_ldb_monitor:
@@ -129,11 +148,12 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       firewall_ldb_monitor:
-        state: "present"
-        http-get: "<your_own_value>"
-        http-match: "<your_own_value>"
-        http-max-redirects: "5"
+        http_get: "<your_own_value>"
+        http_match: "<your_own_value>"
+        http_max_redirects: "5"
         interval: "6"
         name: "default_name_7"
         port: "8"
@@ -202,14 +222,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -217,11 +239,11 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_firewall_ldb_monitor_data(json):
-    option_list = ['http-get', 'http-match', 'http-max-redirects',
+    option_list = ['http_get', 'http_match', 'http_max_redirects',
                    'interval', 'name', 'port',
                    'retry', 'timeout', 'type']
     dictionary = {}
@@ -233,51 +255,69 @@ def filter_firewall_ldb_monitor_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def firewall_ldb_monitor(data, fos):
     vdom = data['vdom']
+    state = data['state']
     firewall_ldb_monitor_data = data['firewall_ldb_monitor']
-    filtered_data = filter_firewall_ldb_monitor_data(firewall_ldb_monitor_data)
-    if firewall_ldb_monitor_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_firewall_ldb_monitor_data(firewall_ldb_monitor_data))
+
+    if state == "present":
         return fos.set('firewall',
                        'ldb-monitor',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif firewall_ldb_monitor_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('firewall',
                           'ldb-monitor',
                           mkey=filtered_data['name'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_firewall(data, fos):
-    login(data)
 
-    methodlist = ['firewall_ldb_monitor']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['firewall_ldb_monitor']:
+        resp = firewall_ldb_monitor(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "firewall_ldb_monitor": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
-                "http-get": {"required": False, "type": "str"},
-                "http-match": {"required": False, "type": "str"},
-                "http-max-redirects": {"required": False, "type": "int"},
+                "http_get": {"required": False, "type": "str"},
+                "http_match": {"required": False, "type": "str"},
+                "http_max_redirects": {"required": False, "type": "int"},
                 "interval": {"required": False, "type": "int"},
                 "name": {"required": True, "type": "str"},
                 "port": {"required": False, "type": "int"},
@@ -293,15 +333,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_firewall(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_firewall(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_firewall(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_firewall_local_in_policy.py b/lib/ansible/modules/network/fortios/fortios_firewall_local_in_policy.py
index fd4435f555..377e67c2db 100644
--- a/lib/ansible/modules/network/fortios/fortios_firewall_local_in_policy.py
+++ b/lib/ansible/modules/network/fortios/fortios_firewall_local_in_policy.py
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_firewall_local_in_policy
 short_description: Configure user defined IPv4 local-in policies in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure firewall feature and local_in_policy category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify firewall feature and local_in_policy category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,93 +41,118 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
+        type: bool
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
         type: bool
         default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     firewall_local_in_policy:
         description:
             - Configure user defined IPv4 local-in policies.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
             action:
                 description:
-                    - Action performed on traffic matching the policy (default = deny).
+                    - Action performed on traffic matching the policy.
+                type: str
                 choices:
                     - accept
                     - deny
             comments:
                 description:
                     - Comment.
+                type: str
             dstaddr:
                 description:
                     - Destination address object from available options.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Address name. Source firewall.address.name firewall.addrgrp.name.
                         required: true
-            ha-mgmt-intf-only:
+                        type: str
+            ha_mgmt_intf_only:
                 description:
                     - Enable/disable dedicating the HA management interface only for local-in policy.
+                type: str
                 choices:
                     - enable
                     - disable
             intf:
                 description:
                     - Incoming interface name from available options. Source system.zone.name system.interface.name.
+                type: str
             policyid:
                 description:
                     - User defined local in policy ID.
                 required: true
+                type: int
             schedule:
                 description:
                     - Schedule object from available options. Source firewall.schedule.onetime.name firewall.schedule.recurring.name firewall.schedule.group
                       .name.
+                type: str
             service:
                 description:
                     - Service object from available options.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Service name. Source firewall.service.custom.name firewall.service.group.name.
                         required: true
+                        type: str
             srcaddr:
                 description:
                     - Source address object from available options.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Address name. Source firewall.address.name firewall.addrgrp.name.
                         required: true
+                        type: str
             status:
                 description:
                     - Enable/disable this local-in policy.
+                type: str
                 choices:
                     - enable
                     - disable
@@ -143,6 +165,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure user defined IPv4 local-in policies.
     fortios_firewall_local_in_policy:
@@ -151,14 +174,14 @@ EXAMPLES = '''
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
       https: "False"
+      state: "present"
       firewall_local_in_policy:
-        state: "present"
         action: "accept"
         comments: "<your_own_value>"
         dstaddr:
          -
             name: "default_name_6 (source firewall.address.name firewall.addrgrp.name)"
-        ha-mgmt-intf-only: "enable"
+        ha_mgmt_intf_only: "enable"
         intf: "<your_own_value> (source system.zone.name system.interface.name)"
         policyid: "9"
         schedule: "<your_own_value> (source firewall.schedule.onetime.name firewall.schedule.recurring.name firewall.schedule.group.name)"
@@ -231,14 +254,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -246,12 +271,12 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_firewall_local_in_policy_data(json):
     option_list = ['action', 'comments', 'dstaddr',
-                   'ha-mgmt-intf-only', 'intf', 'policyid',
+                   'ha_mgmt_intf_only', 'intf', 'policyid',
                    'schedule', 'service', 'srcaddr',
                    'status']
     dictionary = {}
@@ -263,48 +288,66 @@ def filter_firewall_local_in_policy_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def firewall_local_in_policy(data, fos):
     vdom = data['vdom']
+    state = data['state']
     firewall_local_in_policy_data = data['firewall_local_in_policy']
-    filtered_data = filter_firewall_local_in_policy_data(firewall_local_in_policy_data)
-    if firewall_local_in_policy_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_firewall_local_in_policy_data(firewall_local_in_policy_data))
+
+    if state == "present":
         return fos.set('firewall',
                        'local-in-policy',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif firewall_local_in_policy_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('firewall',
                           'local-in-policy',
                           mkey=filtered_data['policyid'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_firewall(data, fos):
-    login(data)
 
-    methodlist = ['firewall_local_in_policy']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['firewall_local_in_policy']:
+        resp = firewall_local_in_policy(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
         "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "firewall_local_in_policy": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
                 "action": {"required": False, "type": "str",
                            "choices": ["accept", "deny"]},
                 "comments": {"required": False, "type": "str"},
@@ -312,7 +355,7 @@ def main():
                             "options": {
                                 "name": {"required": True, "type": "str"}
                             }},
-                "ha-mgmt-intf-only": {"required": False, "type": "str",
+                "ha_mgmt_intf_only": {"required": False, "type": "str",
                                       "choices": ["enable", "disable"]},
                 "intf": {"required": False, "type": "str"},
                 "policyid": {"required": True, "type": "int"},
@@ -334,15 +377,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_firewall(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_firewall(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_firewall(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_firewall_local_in_policy6.py b/lib/ansible/modules/network/fortios/fortios_firewall_local_in_policy6.py
index ed3ffec036..ae651b433a 100644
--- a/lib/ansible/modules/network/fortios/fortios_firewall_local_in_policy6.py
+++ b/lib/ansible/modules/network/fortios/fortios_firewall_local_in_policy6.py
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_firewall_local_in_policy6
 short_description: Configure user defined IPv6 local-in policies in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure firewall feature and local_in_policy6 category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify firewall feature and local_in_policy6 category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,87 +41,111 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
+        type: bool
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
         type: bool
         default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     firewall_local_in_policy6:
         description:
             - Configure user defined IPv6 local-in policies.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
             action:
                 description:
-                    - Action performed on traffic matching the policy (default = deny).
+                    - Action performed on traffic matching the policy.
+                type: str
                 choices:
                     - accept
                     - deny
             comments:
                 description:
                     - Comment.
+                type: str
             dstaddr:
                 description:
                     - Destination address object from available options.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Address name. Source firewall.address6.name firewall.addrgrp6.name.
                         required: true
+                        type: str
             intf:
                 description:
                     - Incoming interface name from available options. Source system.zone.name system.interface.name.
+                type: str
             policyid:
                 description:
                     - User defined local in policy ID.
                 required: true
+                type: int
             schedule:
                 description:
                     - Schedule object from available options. Source firewall.schedule.onetime.name firewall.schedule.recurring.name firewall.schedule.group
                       .name.
+                type: str
             service:
                 description:
                     - Service object from available options. Separate names with a space.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Service name. Source firewall.service.custom.name firewall.service.group.name.
                         required: true
+                        type: str
             srcaddr:
                 description:
                     - Source address object from available options.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Address name. Source firewall.address6.name firewall.addrgrp6.name.
                         required: true
+                        type: str
             status:
                 description:
                     - Enable/disable this local-in policy.
+                type: str
                 choices:
                     - enable
                     - disable
@@ -137,6 +158,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure user defined IPv6 local-in policies.
     fortios_firewall_local_in_policy6:
@@ -145,8 +167,8 @@ EXAMPLES = '''
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
       https: "False"
+      state: "present"
       firewall_local_in_policy6:
-        state: "present"
         action: "accept"
         comments: "<your_own_value>"
         dstaddr:
@@ -224,14 +246,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -239,7 +263,7 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_firewall_local_in_policy6_data(json):
@@ -255,48 +279,66 @@ def filter_firewall_local_in_policy6_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def firewall_local_in_policy6(data, fos):
     vdom = data['vdom']
+    state = data['state']
     firewall_local_in_policy6_data = data['firewall_local_in_policy6']
-    filtered_data = filter_firewall_local_in_policy6_data(firewall_local_in_policy6_data)
-    if firewall_local_in_policy6_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_firewall_local_in_policy6_data(firewall_local_in_policy6_data))
+
+    if state == "present":
         return fos.set('firewall',
                        'local-in-policy6',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif firewall_local_in_policy6_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('firewall',
                           'local-in-policy6',
                           mkey=filtered_data['policyid'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_firewall(data, fos):
-    login(data)
 
-    methodlist = ['firewall_local_in_policy6']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['firewall_local_in_policy6']:
+        resp = firewall_local_in_policy6(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
         "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "firewall_local_in_policy6": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
                 "action": {"required": False, "type": "str",
                            "choices": ["accept", "deny"]},
                 "comments": {"required": False, "type": "str"},
@@ -324,15 +366,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_firewall(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_firewall(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_firewall(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_firewall_multicast_address.py b/lib/ansible/modules/network/fortios/fortios_firewall_multicast_address.py
index 67786b6f5f..343c4e69ec 100644
--- a/lib/ansible/modules/network/fortios/fortios_firewall_multicast_address.py
+++ b/lib/ansible/modules/network/fortios/fortios_firewall_multicast_address.py
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_firewall_multicast_address
 short_description: Configure multicast addresses in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure firewall feature and multicast_address category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify firewall feature and multicast_address category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,91 +41,117 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
+        type: bool
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
         type: bool
         default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     firewall_multicast_address:
         description:
             - Configure multicast addresses.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
-            associated-interface:
+            associated_interface:
                 description:
                     - Interface associated with the address object. When setting up a policy, only addresses associated with this interface are available.
                        Source system.interface.name.
+                type: str
             color:
                 description:
                     - Integer value to determine the color of the icon in the GUI (1 - 32, default = 0, which sets value to 1).
+                type: int
             comment:
                 description:
                     - Comment.
-            end-ip:
+                type: str
+            end_ip:
                 description:
                     - Final IPv4 address (inclusive) in the range for the address.
+                type: str
             name:
                 description:
                     - Multicast address name.
                 required: true
-            start-ip:
+                type: str
+            start_ip:
                 description:
                     - First IPv4 address (inclusive) in the range for the address.
+                type: str
             subnet:
                 description:
                     - Broadcast address and subnet.
+                type: str
             tagging:
                 description:
                     - Config object tagging.
+                type: list
                 suboptions:
                     category:
                         description:
                             - Tag category. Source system.object-tagging.category.
+                        type: str
                     name:
                         description:
                             - Tagging entry name.
                         required: true
+                        type: str
                     tags:
                         description:
                             - Tags.
+                        type: list
                         suboptions:
                             name:
                                 description:
                                     - Tag name. Source system.object-tagging.tags.name.
                                 required: true
+                                type: str
             type:
                 description:
                     - "Type of address object: multicast IP address range or broadcast IP/mask to be treated as a multicast address."
+                type: str
                 choices:
                     - multicastrange
                     - broadcastmask
             visibility:
                 description:
                     - Enable/disable visibility of the multicast address on the GUI.
+                type: str
                 choices:
                     - enable
                     - disable
@@ -141,6 +164,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure multicast addresses.
     fortios_firewall_multicast_address:
@@ -149,14 +173,14 @@ EXAMPLES = '''
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
       https: "False"
+      state: "present"
       firewall_multicast_address:
-        state: "present"
-        associated-interface: "<your_own_value> (source system.interface.name)"
+        associated_interface: "<your_own_value> (source system.interface.name)"
         color: "4"
         comment: "Comment."
-        end-ip: "<your_own_value>"
+        end_ip: "<your_own_value>"
         name: "default_name_7"
-        start-ip: "<your_own_value>"
+        start_ip: "<your_own_value>"
         subnet: "<your_own_value>"
         tagging:
          -
@@ -229,14 +253,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -244,12 +270,12 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_firewall_multicast_address_data(json):
-    option_list = ['associated-interface', 'color', 'comment',
-                   'end-ip', 'name', 'start-ip',
+    option_list = ['associated_interface', 'color', 'comment',
+                   'end_ip', 'name', 'start_ip',
                    'subnet', 'tagging', 'type',
                    'visibility']
     dictionary = {}
@@ -261,54 +287,72 @@ def filter_firewall_multicast_address_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def firewall_multicast_address(data, fos):
     vdom = data['vdom']
+    state = data['state']
     firewall_multicast_address_data = data['firewall_multicast_address']
-    filtered_data = filter_firewall_multicast_address_data(firewall_multicast_address_data)
-    if firewall_multicast_address_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_firewall_multicast_address_data(firewall_multicast_address_data))
+
+    if state == "present":
         return fos.set('firewall',
                        'multicast-address',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif firewall_multicast_address_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('firewall',
                           'multicast-address',
                           mkey=filtered_data['name'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_firewall(data, fos):
-    login(data)
 
-    methodlist = ['firewall_multicast_address']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['firewall_multicast_address']:
+        resp = firewall_multicast_address(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
         "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "firewall_multicast_address": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
-                "associated-interface": {"required": False, "type": "str"},
+                "associated_interface": {"required": False, "type": "str"},
                 "color": {"required": False, "type": "int"},
                 "comment": {"required": False, "type": "str"},
-                "end-ip": {"required": False, "type": "str"},
+                "end_ip": {"required": False, "type": "str"},
                 "name": {"required": True, "type": "str"},
-                "start-ip": {"required": False, "type": "str"},
+                "start_ip": {"required": False, "type": "str"},
                 "subnet": {"required": False, "type": "str"},
                 "tagging": {"required": False, "type": "list",
                             "options": {
@@ -330,15 +374,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_firewall(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_firewall(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_firewall(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_firewall_multicast_address6.py b/lib/ansible/modules/network/fortios/fortios_firewall_multicast_address6.py
index 80420ef6ff..4742a63702 100644
--- a/lib/ansible/modules/network/fortios/fortios_firewall_multicast_address6.py
+++ b/lib/ansible/modules/network/fortios/fortios_firewall_multicast_address6.py
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_firewall_multicast_address6
 short_description: Configure IPv6 multicast address in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure firewall feature and multicast_address6 category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify firewall feature and multicast_address6 category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,75 +41,97 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
+        type: bool
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
         type: bool
         default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     firewall_multicast_address6:
         description:
             - Configure IPv6 multicast address.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
             color:
                 description:
                     - Color of icon on the GUI.
+                type: int
             comment:
                 description:
                     - Comment.
+                type: str
             ip6:
                 description:
                     - "IPv6 address prefix (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx)."
+                type: str
             name:
                 description:
                     - IPv6 multicast address name.
                 required: true
+                type: str
             tagging:
                 description:
                     - Config object tagging.
+                type: list
                 suboptions:
                     category:
                         description:
                             - Tag category. Source system.object-tagging.category.
+                        type: str
                     name:
                         description:
                             - Tagging entry name.
                         required: true
+                        type: str
                     tags:
                         description:
                             - Tags.
+                        type: list
                         suboptions:
                             name:
                                 description:
                                     - Tag name. Source system.object-tagging.tags.name.
                                 required: true
+                                type: str
             visibility:
                 description:
                     - Enable/disable visibility of the IPv6 multicast address on the GUI.
+                type: str
                 choices:
                     - enable
                     - disable
@@ -125,6 +144,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure IPv6 multicast address.
     fortios_firewall_multicast_address6:
@@ -133,8 +153,8 @@ EXAMPLES = '''
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
       https: "False"
+      state: "present"
       firewall_multicast_address6:
-        state: "present"
         color: "3"
         comment: "Comment."
         ip6: "<your_own_value>"
@@ -209,14 +229,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -224,7 +246,7 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_firewall_multicast_address6_data(json):
@@ -239,48 +261,66 @@ def filter_firewall_multicast_address6_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def firewall_multicast_address6(data, fos):
     vdom = data['vdom']
+    state = data['state']
     firewall_multicast_address6_data = data['firewall_multicast_address6']
-    filtered_data = filter_firewall_multicast_address6_data(firewall_multicast_address6_data)
-    if firewall_multicast_address6_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_firewall_multicast_address6_data(firewall_multicast_address6_data))
+
+    if state == "present":
         return fos.set('firewall',
                        'multicast-address6',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif firewall_multicast_address6_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('firewall',
                           'multicast-address6',
                           mkey=filtered_data['name'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_firewall(data, fos):
-    login(data)
 
-    methodlist = ['firewall_multicast_address6']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['firewall_multicast_address6']:
+        resp = firewall_multicast_address6(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
         "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "firewall_multicast_address6": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
                 "color": {"required": False, "type": "int"},
                 "comment": {"required": False, "type": "str"},
                 "ip6": {"required": False, "type": "str"},
@@ -303,15 +343,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_firewall(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_firewall(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_firewall(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_firewall_multicast_policy.py b/lib/ansible/modules/network/fortios/fortios_firewall_multicast_policy.py
index 63b7a0e508..5f756c01f4 100644
--- a/lib/ansible/modules/network/fortios/fortios_firewall_multicast_policy.py
+++ b/lib/ansible/modules/network/fortios/fortios_firewall_multicast_policy.py
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_firewall_multicast_policy
 short_description: Configure multicast NAT policies in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure firewall feature and multicast_policy category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify firewall feature and multicast_policy category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,102 +41,130 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
+        type: bool
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
         type: bool
         default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     firewall_multicast_policy:
         description:
             - Configure multicast NAT policies.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
             action:
                 description:
                     - Accept or deny traffic matching the policy.
+                type: str
                 choices:
                     - accept
                     - deny
             dnat:
                 description:
                     - IPv4 DNAT address used for multicast destination addresses.
+                type: str
             dstaddr:
                 description:
                     - Destination address objects.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Destination address objects. Source firewall.multicast-address.name.
                         required: true
+                        type: str
             dstintf:
                 description:
                     - Destination interface name. Source system.interface.name system.zone.name.
-            end-port:
+                type: str
+            end_port:
                 description:
                     -  Integer value for ending TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
+                type: int
             id:
                 description:
                     - Policy ID.
                 required: true
+                type: int
             logtraffic:
                 description:
                     - Enable/disable logging traffic accepted by this policy.
+                type: str
                 choices:
                     - enable
                     - disable
             protocol:
                 description:
                     - Integer value for the protocol type as defined by IANA (0 - 255, default = 0).
+                type: int
             snat:
                 description:
                     - Enable/disable substitution of the outgoing interface IP address for the original source IP address (called source NAT or SNAT).
+                type: str
                 choices:
                     - enable
                     - disable
-            snat-ip:
+            snat_ip:
                 description:
                     - IPv4 address to be used as the source address for NATed traffic.
+                type: str
             srcaddr:
                 description:
                     - Source address objects.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Source address objects. Source firewall.address.name firewall.addrgrp.name.
                         required: true
+                        type: str
             srcintf:
                 description:
                     - Source interface name. Source system.interface.name system.zone.name.
-            start-port:
+                type: str
+            start_port:
                 description:
                     - Integer value for starting TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
+                type: int
             status:
                 description:
                     - Enable/disable this policy.
+                type: str
                 choices:
                     - enable
                     - disable
@@ -152,6 +177,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure multicast NAT policies.
     fortios_firewall_multicast_policy:
@@ -160,25 +186,25 @@ EXAMPLES = '''
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
       https: "False"
+      state: "present"
       firewall_multicast_policy:
-        state: "present"
         action: "accept"
         dnat: "<your_own_value>"
         dstaddr:
          -
             name: "default_name_6 (source firewall.multicast-address.name)"
         dstintf: "<your_own_value> (source system.interface.name system.zone.name)"
-        end-port: "8"
+        end_port: "8"
         id:  "9"
         logtraffic: "enable"
         protocol: "11"
         snat: "enable"
-        snat-ip: "<your_own_value>"
+        snat_ip: "<your_own_value>"
         srcaddr:
          -
             name: "default_name_15 (source firewall.address.name firewall.addrgrp.name)"
         srcintf: "<your_own_value> (source system.interface.name system.zone.name)"
-        start-port: "17"
+        start_port: "17"
         status: "enable"
 '''
 
@@ -242,14 +268,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -257,15 +285,15 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_firewall_multicast_policy_data(json):
     option_list = ['action', 'dnat', 'dstaddr',
-                   'dstintf', 'end-port', 'id',
+                   'dstintf', 'end_port', 'id',
                    'logtraffic', 'protocol', 'snat',
-                   'snat-ip', 'srcaddr', 'srcintf',
-                   'start-port', 'status']
+                   'snat_ip', 'srcaddr', 'srcintf',
+                   'start_port', 'status']
     dictionary = {}
 
     for attribute in option_list:
@@ -275,48 +303,66 @@ def filter_firewall_multicast_policy_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def firewall_multicast_policy(data, fos):
     vdom = data['vdom']
+    state = data['state']
     firewall_multicast_policy_data = data['firewall_multicast_policy']
-    filtered_data = filter_firewall_multicast_policy_data(firewall_multicast_policy_data)
-    if firewall_multicast_policy_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_firewall_multicast_policy_data(firewall_multicast_policy_data))
+
+    if state == "present":
         return fos.set('firewall',
                        'multicast-policy',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif firewall_multicast_policy_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('firewall',
                           'multicast-policy',
                           mkey=filtered_data['id'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_firewall(data, fos):
-    login(data)
 
-    methodlist = ['firewall_multicast_policy']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['firewall_multicast_policy']:
+        resp = firewall_multicast_policy(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
         "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "firewall_multicast_policy": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
                 "action": {"required": False, "type": "str",
                            "choices": ["accept", "deny"]},
                 "dnat": {"required": False, "type": "str"},
@@ -325,20 +371,20 @@ def main():
                                 "name": {"required": True, "type": "str"}
                             }},
                 "dstintf": {"required": False, "type": "str"},
-                "end-port": {"required": False, "type": "int"},
+                "end_port": {"required": False, "type": "int"},
                 "id": {"required": True, "type": "int"},
                 "logtraffic": {"required": False, "type": "str",
                                "choices": ["enable", "disable"]},
                 "protocol": {"required": False, "type": "int"},
                 "snat": {"required": False, "type": "str",
                          "choices": ["enable", "disable"]},
-                "snat-ip": {"required": False, "type": "str"},
+                "snat_ip": {"required": False, "type": "str"},
                 "srcaddr": {"required": False, "type": "list",
                             "options": {
                                 "name": {"required": True, "type": "str"}
                             }},
                 "srcintf": {"required": False, "type": "str"},
-                "start-port": {"required": False, "type": "int"},
+                "start_port": {"required": False, "type": "int"},
                 "status": {"required": False, "type": "str",
                            "choices": ["enable", "disable"]}
 
@@ -348,15 +394,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_firewall(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_firewall(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_firewall(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_firewall_multicast_policy6.py b/lib/ansible/modules/network/fortios/fortios_firewall_multicast_policy6.py
index dc455b9de3..12d6696a20 100644
--- a/lib/ansible/modules/network/fortios/fortios_firewall_multicast_policy6.py
+++ b/lib/ansible/modules/network/fortios/fortios_firewall_multicast_policy6.py
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_firewall_multicast_policy6
 short_description: Configure IPv6 multicast NAT policies in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure firewall feature and multicast_policy6 category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify firewall feature and multicast_policy6 category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,90 +41,115 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
+        type: bool
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
         type: bool
         default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     firewall_multicast_policy6:
         description:
             - Configure IPv6 multicast NAT policies.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
             action:
                 description:
                     - Accept or deny traffic matching the policy.
+                type: str
                 choices:
                     - accept
                     - deny
             dstaddr:
                 description:
                     - IPv6 destination address name.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Address name. Source firewall.multicast-address6.name.
                         required: true
+                        type: str
             dstintf:
                 description:
                     - IPv6 destination interface name. Source system.interface.name system.zone.name.
-            end-port:
+                type: str
+            end_port:
                 description:
                     - Integer value for ending TCP/UDP/SCTP destination port in range (1 - 65535, default = 65535).
+                type: int
             id:
                 description:
                     - Policy ID.
                 required: true
+                type: int
             logtraffic:
                 description:
                     - Enable/disable logging traffic accepted by this policy.
+                type: str
                 choices:
                     - enable
                     - disable
             protocol:
                 description:
                     - Integer value for the protocol type as defined by IANA (0 - 255, default = 0).
+                type: int
             srcaddr:
                 description:
                     - IPv6 source address name.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Address name. Source firewall.address6.name firewall.addrgrp6.name.
                         required: true
+                        type: str
             srcintf:
                 description:
                     - IPv6 source interface name. Source system.interface.name system.zone.name.
-            start-port:
+                type: str
+            start_port:
                 description:
                     - Integer value for starting TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
+                type: int
             status:
                 description:
                     - Enable/disable this policy.
+                type: str
                 choices:
                     - enable
                     - disable
@@ -140,6 +162,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure IPv6 multicast NAT policies.
     fortios_firewall_multicast_policy6:
@@ -148,14 +171,14 @@ EXAMPLES = '''
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
       https: "False"
+      state: "present"
       firewall_multicast_policy6:
-        state: "present"
         action: "accept"
         dstaddr:
          -
             name: "default_name_5 (source firewall.multicast-address6.name)"
         dstintf: "<your_own_value> (source system.interface.name system.zone.name)"
-        end-port: "7"
+        end_port: "7"
         id:  "8"
         logtraffic: "enable"
         protocol: "10"
@@ -163,7 +186,7 @@ EXAMPLES = '''
          -
             name: "default_name_12 (source firewall.address6.name firewall.addrgrp6.name)"
         srcintf: "<your_own_value> (source system.interface.name system.zone.name)"
-        start-port: "14"
+        start_port: "14"
         status: "enable"
 '''
 
@@ -227,14 +250,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -242,14 +267,14 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_firewall_multicast_policy6_data(json):
     option_list = ['action', 'dstaddr', 'dstintf',
-                   'end-port', 'id', 'logtraffic',
+                   'end_port', 'id', 'logtraffic',
                    'protocol', 'srcaddr', 'srcintf',
-                   'start-port', 'status']
+                   'start_port', 'status']
     dictionary = {}
 
     for attribute in option_list:
@@ -259,48 +284,66 @@ def filter_firewall_multicast_policy6_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def firewall_multicast_policy6(data, fos):
     vdom = data['vdom']
+    state = data['state']
     firewall_multicast_policy6_data = data['firewall_multicast_policy6']
-    filtered_data = filter_firewall_multicast_policy6_data(firewall_multicast_policy6_data)
-    if firewall_multicast_policy6_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_firewall_multicast_policy6_data(firewall_multicast_policy6_data))
+
+    if state == "present":
         return fos.set('firewall',
                        'multicast-policy6',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif firewall_multicast_policy6_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('firewall',
                           'multicast-policy6',
                           mkey=filtered_data['id'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_firewall(data, fos):
-    login(data)
 
-    methodlist = ['firewall_multicast_policy6']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['firewall_multicast_policy6']:
+        resp = firewall_multicast_policy6(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
         "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "firewall_multicast_policy6": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
                 "action": {"required": False, "type": "str",
                            "choices": ["accept", "deny"]},
                 "dstaddr": {"required": False, "type": "list",
@@ -308,7 +351,7 @@ def main():
                                 "name": {"required": True, "type": "str"}
                             }},
                 "dstintf": {"required": False, "type": "str"},
-                "end-port": {"required": False, "type": "int"},
+                "end_port": {"required": False, "type": "int"},
                 "id": {"required": True, "type": "int"},
                 "logtraffic": {"required": False, "type": "str",
                                "choices": ["enable", "disable"]},
@@ -318,7 +361,7 @@ def main():
                                 "name": {"required": True, "type": "str"}
                             }},
                 "srcintf": {"required": False, "type": "str"},
-                "start-port": {"required": False, "type": "int"},
+                "start_port": {"required": False, "type": "int"},
                 "status": {"required": False, "type": "str",
                            "choices": ["enable", "disable"]}
 
@@ -328,15 +371,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_firewall(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_firewall(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_firewall(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_firewall_policy.py b/lib/ansible/modules/network/fortios/fortios_firewall_policy.py
index f740165577..209e451eb9 100644
--- a/lib/ansible/modules/network/fortios/fortios_firewall_policy.py
+++ b/lib/ansible/modules/network/fortios/fortios_firewall_policy.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 from __future__ import (absolute_import, division, print_function)
-# Copyright 2018 Fortinet, Inc.
+# Copyright 2019 Fortinet, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -27,12 +24,12 @@ ANSIBLE_METADATA = {'status': ['preview'],
 DOCUMENTATION = '''
 ---
 module: fortios_firewall_policy
-short_description: Configure IPv4 policies.
+short_description: Configure IPv4 policies in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure firewall feature and policy category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify firewall feature and policy category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,404 +41,493 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     firewall_policy:
         description:
             - Configure IPv4 policies.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
             action:
                 description:
                     - Policy action (allow/deny/ipsec).
+                type: str
                 choices:
                     - accept
                     - deny
                     - ipsec
-            app-category:
+            app_category:
                 description:
                     - Application category ID list.
+                type: list
                 suboptions:
                     id:
                         description:
                             - Category IDs.
                         required: true
-            app-group:
+                        type: int
+            app_group:
                 description:
                     - Application group names.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Application group names. Source application.group.name.
                         required: true
+                        type: str
             application:
                 description:
                     - Application ID list.
+                type: list
                 suboptions:
                     id:
                         description:
                             - Application IDs.
                         required: true
-            application-list:
+                        type: int
+            application_list:
                 description:
                     - Name of an existing Application list. Source application.list.name.
-            auth-cert:
+                type: str
+            auth_cert:
                 description:
                     - HTTPS server certificate for policy authentication. Source vpn.certificate.local.name.
-            auth-path:
+                type: str
+            auth_path:
                 description:
                     - Enable/disable authentication-based routing.
+                type: str
                 choices:
                     - enable
                     - disable
-            auth-redirect-addr:
+            auth_redirect_addr:
                 description:
                     - HTTP-to-HTTPS redirect address for firewall authentication.
-            av-profile:
+                type: str
+            av_profile:
                 description:
                     - Name of an existing Antivirus profile. Source antivirus.profile.name.
-            block-notification:
+                type: str
+            block_notification:
                 description:
                     - Enable/disable block notification.
+                type: str
                 choices:
                     - enable
                     - disable
-            captive-portal-exempt:
+            captive_portal_exempt:
                 description:
                     - Enable to exempt some users from the captive portal.
+                type: str
                 choices:
                     - enable
                     - disable
-            capture-packet:
+            capture_packet:
                 description:
                     - Enable/disable capture packets.
+                type: str
                 choices:
                     - enable
                     - disable
             comments:
                 description:
                     - Comment.
-            custom-log-fields:
+                type: str
+            custom_log_fields:
                 description:
                     - Custom fields to append to log messages for this policy.
+                type: list
                 suboptions:
-                    field-id:
+                    field_id:
                         description:
                             - Custom log field. Source log.custom-field.id.
-                        required: true
-            delay-tcp-npu-session:
+                        type: str
+            delay_tcp_npu_session:
                 description:
                     - Enable TCP NPU session delay to guarantee packet order of 3-way handshake.
+                type: str
                 choices:
                     - enable
                     - disable
             devices:
                 description:
                     - Names of devices or device groups that can be matched by the policy.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Device or group name. Source user.device.alias user.device-group.name user.device-category.name.
                         required: true
-            diffserv-forward:
+                        type: str
+            diffserv_forward:
                 description:
                     - Enable to change packet's DiffServ values to the specified diffservcode-forward value.
+                type: str
                 choices:
                     - enable
                     - disable
-            diffserv-reverse:
+            diffserv_reverse:
                 description:
                     - Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.
+                type: str
                 choices:
                     - enable
                     - disable
-            diffservcode-forward:
+            diffservcode_forward:
                 description:
                     - Change packet's DiffServ to this value.
-            diffservcode-rev:
+                type: str
+            diffservcode_rev:
                 description:
                     - Change packet's reverse (reply) DiffServ to this value.
+                type: str
             disclaimer:
                 description:
                     - Enable/disable user authentication disclaimer.
+                type: str
                 choices:
                     - enable
                     - disable
-            dlp-sensor:
+            dlp_sensor:
                 description:
                     - Name of an existing DLP sensor. Source dlp.sensor.name.
-            dnsfilter-profile:
+                type: str
+            dnsfilter_profile:
                 description:
                     - Name of an existing DNS filter profile. Source dnsfilter.profile.name.
-            dscp-match:
+                type: str
+            dscp_match:
                 description:
                     - Enable DSCP check.
+                type: str
                 choices:
                     - enable
                     - disable
-            dscp-negate:
+            dscp_negate:
                 description:
                     - Enable negated DSCP match.
+                type: str
                 choices:
                     - enable
                     - disable
-            dscp-value:
+            dscp_value:
                 description:
                     - DSCP value.
+                type: str
             dsri:
                 description:
                     - Enable DSRI to ignore HTTP server responses.
+                type: str
                 choices:
                     - enable
                     - disable
             dstaddr:
                 description:
                     - Destination address and address group names.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Address name. Source firewall.address.name firewall.addrgrp.name firewall.vip.name firewall.vipgrp.name.
                         required: true
-            dstaddr-negate:
+                        type: str
+            dstaddr_negate:
                 description:
                     - When enabled dstaddr specifies what the destination address must NOT be.
+                type: str
                 choices:
                     - enable
                     - disable
             dstintf:
                 description:
                     - Outgoing (egress) interface.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Interface name. Source system.interface.name system.zone.name.
                         required: true
-            firewall-session-dirty:
+                        type: str
+            firewall_session_dirty:
                 description:
                     - How to handle sessions if the configuration of this firewall policy changes.
+                type: str
                 choices:
                     - check-all
                     - check-new
             fixedport:
                 description:
                     - Enable to prevent source NAT from changing a session's source port.
+                type: str
                 choices:
                     - enable
                     - disable
             fsso:
                 description:
                     - Enable/disable Fortinet Single Sign-On.
+                type: str
                 choices:
                     - enable
                     - disable
-            fsso-agent-for-ntlm:
+            fsso_agent_for_ntlm:
                 description:
                     - FSSO agent to use for NTLM authentication. Source user.fsso.name.
-            global-label:
+                type: str
+            global_label:
                 description:
                     - Label for the policy that appears when the GUI is in Global View mode.
+                type: str
             groups:
                 description:
                     - Names of user groups that can authenticate with this policy.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Group name. Source user.group.name.
                         required: true
-            icap-profile:
+                        type: str
+            icap_profile:
                 description:
                     - Name of an existing ICAP profile. Source icap.profile.name.
-            identity-based-route:
+                type: str
+            identity_based_route:
                 description:
                     - Name of identity-based routing rule. Source firewall.identity-based-route.name.
+                type: str
             inbound:
                 description:
                     - "Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN."
+                type: str
                 choices:
                     - enable
                     - disable
-            internet-service:
+            internet_service:
                 description:
                     - Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.
+                type: str
                 choices:
                     - enable
                     - disable
-            internet-service-custom:
+            internet_service_custom:
                 description:
                     - Custom Internet Service name.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Custom Internet Service name. Source firewall.internet-service-custom.name.
                         required: true
-            internet-service-id:
+                        type: str
+            internet_service_id:
                 description:
                     - Internet Service ID.
+                type: list
                 suboptions:
                     id:
                         description:
                             - Internet Service ID. Source firewall.internet-service.id.
                         required: true
-            internet-service-negate:
+                        type: int
+            internet_service_negate:
                 description:
                     - When enabled internet-service specifies what the service must NOT be.
+                type: str
                 choices:
                     - enable
                     - disable
-            internet-service-src:
+            internet_service_src:
                 description:
                     - Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.
+                type: str
                 choices:
                     - enable
                     - disable
-            internet-service-src-custom:
+            internet_service_src_custom:
                 description:
                     - Custom Internet Service source name.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Custom Internet Service name. Source firewall.internet-service-custom.name.
                         required: true
-            internet-service-src-id:
+                        type: str
+            internet_service_src_id:
                 description:
                     - Internet Service source ID.
+                type: list
                 suboptions:
                     id:
                         description:
                             - Internet Service ID. Source firewall.internet-service.id.
                         required: true
-            internet-service-src-negate:
+                        type: int
+            internet_service_src_negate:
                 description:
                     - When enabled internet-service-src specifies what the service must NOT be.
+                type: str
                 choices:
                     - enable
                     - disable
             ippool:
                 description:
                     - Enable to use IP Pools for source NAT.
+                type: str
                 choices:
                     - enable
                     - disable
-            ips-sensor:
+            ips_sensor:
                 description:
                     - Name of an existing IPS sensor. Source ips.sensor.name.
+                type: str
             label:
                 description:
                     - Label for the policy that appears when the GUI is in Section View mode.
-            learning-mode:
+                type: str
+            learning_mode:
                 description:
                     - Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated.
+                type: str
                 choices:
                     - enable
                     - disable
             logtraffic:
                 description:
                     - Enable or disable logging. Log all sessions or security profile sessions.
+                type: str
                 choices:
                     - all
                     - utm
                     - disable
-            logtraffic-start:
+            logtraffic_start:
                 description:
                     - Record logs when a session starts and ends.
+                type: str
                 choices:
                     - enable
                     - disable
-            match-vip:
+            match_vip:
                 description:
                     - Enable to match packets that have had their destination addresses changed by a VIP.
+                type: str
                 choices:
                     - enable
                     - disable
             name:
                 description:
                     - Policy name.
+                type: str
             nat:
                 description:
                     - Enable/disable source NAT.
+                type: str
                 choices:
                     - enable
                     - disable
             natinbound:
                 description:
                     - "Policy-based IPsec VPN: apply destination NAT to inbound traffic."
+                type: str
                 choices:
                     - enable
                     - disable
             natip:
                 description:
                     - "Policy-based IPsec VPN: source NAT IP address for outgoing traffic."
+                type: str
             natoutbound:
                 description:
                     - "Policy-based IPsec VPN: apply source NAT to outbound traffic."
+                type: str
                 choices:
                     - enable
                     - disable
             ntlm:
                 description:
                     - Enable/disable NTLM authentication.
+                type: str
                 choices:
                     - enable
                     - disable
-            ntlm-enabled-browsers:
+            ntlm_enabled_browsers:
                 description:
                     - HTTP-User-Agent value of supported browsers.
+                type: list
                 suboptions:
-                    user-agent-string:
+                    user_agent_string:
                         description:
                             - User agent string.
-                        required: true
-            ntlm-guest:
+                        type: str
+            ntlm_guest:
                 description:
                     - Enable/disable NTLM guest user access.
+                type: str
                 choices:
                     - enable
                     - disable
             outbound:
                 description:
                     - "Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN."
+                type: str
                 choices:
                     - enable
                     - disable
-            per-ip-shaper:
+            per_ip_shaper:
                 description:
                     - Per-IP traffic shaper. Source firewall.shaper.per-ip-shaper.name.
-            permit-any-host:
+                type: str
+            permit_any_host:
                 description:
                     - Accept UDP packets from any host.
+                type: str
                 choices:
                     - enable
                     - disable
-            permit-stun-host:
+            permit_stun_host:
                 description:
                     - Accept UDP packets from any Session Traversal Utilities for NAT (STUN) host.
+                type: str
                 choices:
                     - enable
                     - disable
@@ -449,61 +535,75 @@ options:
                 description:
                     - Policy ID.
                 required: true
+                type: int
             poolname:
                 description:
                     - IP Pool names.
+                type: list
                 suboptions:
                     name:
                         description:
                             - IP pool name. Source firewall.ippool.name.
                         required: true
-            profile-group:
+                        type: str
+            profile_group:
                 description:
                     - Name of profile group. Source firewall.profile-group.name.
-            profile-protocol-options:
+                type: str
+            profile_protocol_options:
                 description:
                     - Name of an existing Protocol options profile. Source firewall.profile-protocol-options.name.
-            profile-type:
+                type: str
+            profile_type:
                 description:
                     - Determine whether the firewall policy allows security profile groups or single profiles only.
+                type: str
                 choices:
                     - single
                     - group
-            radius-mac-auth-bypass:
+            radius_mac_auth_bypass:
                 description:
                     - Enable MAC authentication bypass. The bypassed MAC address must be received from RADIUS server.
+                type: str
                 choices:
                     - enable
                     - disable
-            redirect-url:
+            redirect_url:
                 description:
                     - URL users are directed to after seeing and accepting the disclaimer or authenticating.
-            replacemsg-override-group:
+                type: str
+            replacemsg_override_group:
                 description:
                     - Override the default replacement message group for this policy. Source system.replacemsg-group.name.
+                type: str
             rsso:
                 description:
                     - Enable/disable RADIUS single sign-on (RSSO).
+                type: str
                 choices:
                     - enable
                     - disable
-            rtp-addr:
+            rtp_addr:
                 description:
                     - Address names if this is an RTP NAT policy.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Address name. Source firewall.address.name firewall.addrgrp.name.
                         required: true
-            rtp-nat:
+                        type: str
+            rtp_nat:
                 description:
                     - Enable Real Time Protocol (RTP) NAT.
+                type: str
                 choices:
                     - disable
                     - enable
-            scan-botnet-connections:
+            scan_botnet_connections:
                 description:
                     - Block or monitor connections to Botnet servers or disable Botnet scanning.
+                type: str
                 choices:
                     - disable
                     - block
@@ -511,204 +611,251 @@ options:
             schedule:
                 description:
                     - Schedule name. Source firewall.schedule.onetime.name firewall.schedule.recurring.name firewall.schedule.group.name.
-            schedule-timeout:
+                type: str
+            schedule_timeout:
                 description:
                     - Enable to force current sessions to end when the schedule object times out. Disable allows them to end from inactivity.
+                type: str
                 choices:
                     - enable
                     - disable
-            send-deny-packet:
+            send_deny_packet:
                 description:
                     - Enable to send a reply when a session is denied or blocked by a firewall policy.
+                type: str
                 choices:
                     - disable
                     - enable
             service:
                 description:
                     - Service and service group names.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Service and service group names. Source firewall.service.custom.name firewall.service.group.name.
                         required: true
-            service-negate:
+                        type: str
+            service_negate:
                 description:
                     - When enabled service specifies what the service must NOT be.
+                type: str
                 choices:
                     - enable
                     - disable
-            session-ttl:
+            session_ttl:
                 description:
                     - TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
-            spamfilter-profile:
+                type: int
+            spamfilter_profile:
                 description:
                     - Name of an existing Spam filter profile. Source spamfilter.profile.name.
+                type: str
             srcaddr:
                 description:
                     - Source address and address group names.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Address name. Source firewall.address.name firewall.addrgrp.name.
                         required: true
-            srcaddr-negate:
+                        type: str
+            srcaddr_negate:
                 description:
                     - When enabled srcaddr specifies what the source address must NOT be.
+                type: str
                 choices:
                     - enable
                     - disable
             srcintf:
                 description:
                     - Incoming (ingress) interface.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Interface name. Source system.interface.name system.zone.name.
                         required: true
-            ssh-filter-profile:
+                        type: str
+            ssh_filter_profile:
                 description:
                     - Name of an existing SSH filter profile. Source ssh-filter.profile.name.
-            ssl-mirror:
+                type: str
+            ssl_mirror:
                 description:
                     - Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring).
+                type: str
                 choices:
                     - enable
                     - disable
-            ssl-mirror-intf:
+            ssl_mirror_intf:
                 description:
                     - SSL mirror interface name.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Mirror Interface name. Source system.interface.name system.zone.name.
                         required: true
-            ssl-ssh-profile:
+                        type: str
+            ssl_ssh_profile:
                 description:
                     - Name of an existing SSL SSH profile. Source firewall.ssl-ssh-profile.name.
+                type: str
             status:
                 description:
                     - Enable or disable this policy.
+                type: str
                 choices:
                     - enable
                     - disable
-            tcp-mss-receiver:
+            tcp_mss_receiver:
                 description:
                     - Receiver TCP maximum segment size (MSS).
-            tcp-mss-sender:
+                type: int
+            tcp_mss_sender:
                 description:
                     - Sender TCP maximum segment size (MSS).
-            tcp-session-without-syn:
+                type: int
+            tcp_session_without_syn:
                 description:
                     - Enable/disable creation of TCP session without SYN flag.
+                type: str
                 choices:
                     - all
                     - data-only
                     - disable
-            timeout-send-rst:
+            timeout_send_rst:
                 description:
                     - Enable/disable sending RST packets when TCP sessions expire.
+                type: str
                 choices:
                     - enable
                     - disable
-            traffic-shaper:
+            traffic_shaper:
                 description:
                     - Traffic shaper. Source firewall.shaper.traffic-shaper.name.
-            traffic-shaper-reverse:
+                type: str
+            traffic_shaper_reverse:
                 description:
                     - Reverse traffic shaper. Source firewall.shaper.traffic-shaper.name.
-            url-category:
+                type: str
+            url_category:
                 description:
                     - URL category ID list.
+                type: list
                 suboptions:
                     id:
                         description:
                             - URL category ID.
                         required: true
+                        type: int
             users:
                 description:
                     - Names of individual users that can authenticate with this policy.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Names of individual users that can authenticate with this policy. Source user.local.name.
                         required: true
-            utm-status:
+                        type: str
+            utm_status:
                 description:
                     - Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
+                type: str
                 choices:
                     - enable
                     - disable
             uuid:
                 description:
                     - Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
-            vlan-cos-fwd:
+                type: str
+            vlan_cos_fwd:
                 description:
                     - "VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest."
-            vlan-cos-rev:
+                type: int
+            vlan_cos_rev:
                 description:
                     - "VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest.."
-            vlan-filter:
+                type: int
+            vlan_filter:
                 description:
                     - Set VLAN filters.
-            voip-profile:
+                type: str
+            voip_profile:
                 description:
                     - Name of an existing VoIP profile. Source voip.profile.name.
+                type: str
             vpntunnel:
                 description:
                     - "Policy-based IPsec VPN: name of the IPsec VPN Phase 1. Source vpn.ipsec.phase1.name vpn.ipsec.manualkey.name."
-            waf-profile:
+                type: str
+            waf_profile:
                 description:
                     - Name of an existing Web application firewall profile. Source waf.profile.name.
+                type: str
             wanopt:
                 description:
                     - Enable/disable WAN optimization.
+                type: str
                 choices:
                     - enable
                     - disable
-            wanopt-detection:
+            wanopt_detection:
                 description:
                     - WAN optimization auto-detection mode.
+                type: str
                 choices:
                     - active
                     - passive
                     - off
-            wanopt-passive-opt:
+            wanopt_passive_opt:
                 description:
                     - WAN optimization passive mode options. This option decides what IP address will be used to connect server.
+                type: str
                 choices:
                     - default
                     - transparent
                     - non-transparent
-            wanopt-peer:
+            wanopt_peer:
                 description:
                     - WAN optimization peer. Source wanopt.peer.peer-host-id.
-            wanopt-profile:
+                type: str
+            wanopt_profile:
                 description:
                     - WAN optimization profile. Source wanopt.profile.name.
+                type: str
             wccp:
                 description:
                     - Enable/disable forwarding traffic matching this policy to a configured WCCP server.
+                type: str
                 choices:
                     - enable
                     - disable
             webcache:
                 description:
                     - Enable/disable web cache.
+                type: str
                 choices:
                     - enable
                     - disable
-            webcache-https:
+            webcache_https:
                 description:
                     - Enable/disable web cache for HTTPS.
+                type: str
                 choices:
                     - disable
                     - enable
-            webfilter-profile:
+            webfilter_profile:
                 description:
                     - Name of an existing Web filter profile. Source webfilter.profile.name.
+                type: str
             wsso:
                 description:
                     - Enable/disable WiFi Single Sign On (WSSO).
+                type: str
                 choices:
                     - enable
                     - disable
@@ -721,6 +868,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure IPv4 policies.
     fortios_firewall_policy:
@@ -728,168 +876,169 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       firewall_policy:
-        state: "present"
         action: "accept"
-        app-category:
+        app_category:
          -
             id:  "5"
-        app-group:
+        app_group:
          -
             name: "default_name_7 (source application.group.name)"
         application:
          -
             id:  "9"
-        application-list: "<your_own_value> (source application.list.name)"
-        auth-cert: "<your_own_value> (source vpn.certificate.local.name)"
-        auth-path: "enable"
-        auth-redirect-addr: "<your_own_value>"
-        av-profile: "<your_own_value> (source antivirus.profile.name)"
-        block-notification: "enable"
-        captive-portal-exempt: "enable"
-        capture-packet: "enable"
+        application_list: "<your_own_value> (source application.list.name)"
+        auth_cert: "<your_own_value> (source vpn.certificate.local.name)"
+        auth_path: "enable"
+        auth_redirect_addr: "<your_own_value>"
+        av_profile: "<your_own_value> (source antivirus.profile.name)"
+        block_notification: "enable"
+        captive_portal_exempt: "enable"
+        capture_packet: "enable"
         comments: "<your_own_value>"
-        custom-log-fields:
+        custom_log_fields:
          -
-            field-id: "<your_own_value> (source log.custom-field.id)"
-        delay-tcp-npu-session: "enable"
+            field_id: "<your_own_value> (source log.custom-field.id)"
+        delay_tcp_npu_session: "enable"
         devices:
          -
             name: "default_name_23 (source user.device.alias user.device-group.name user.device-category.name)"
-        diffserv-forward: "enable"
-        diffserv-reverse: "enable"
-        diffservcode-forward: "<your_own_value>"
-        diffservcode-rev: "<your_own_value>"
+        diffserv_forward: "enable"
+        diffserv_reverse: "enable"
+        diffservcode_forward: "<your_own_value>"
+        diffservcode_rev: "<your_own_value>"
         disclaimer: "enable"
-        dlp-sensor: "<your_own_value> (source dlp.sensor.name)"
-        dnsfilter-profile: "<your_own_value> (source dnsfilter.profile.name)"
-        dscp-match: "enable"
-        dscp-negate: "enable"
-        dscp-value: "<your_own_value>"
+        dlp_sensor: "<your_own_value> (source dlp.sensor.name)"
+        dnsfilter_profile: "<your_own_value> (source dnsfilter.profile.name)"
+        dscp_match: "enable"
+        dscp_negate: "enable"
+        dscp_value: "<your_own_value>"
         dsri: "enable"
         dstaddr:
          -
             name: "default_name_36 (source firewall.address.name firewall.addrgrp.name firewall.vip.name firewall.vipgrp.name)"
-        dstaddr-negate: "enable"
+        dstaddr_negate: "enable"
         dstintf:
          -
             name: "default_name_39 (source system.interface.name system.zone.name)"
-        firewall-session-dirty: "check-all"
+        firewall_session_dirty: "check-all"
         fixedport: "enable"
         fsso: "enable"
-        fsso-agent-for-ntlm: "<your_own_value> (source user.fsso.name)"
-        global-label: "<your_own_value>"
+        fsso_agent_for_ntlm: "<your_own_value> (source user.fsso.name)"
+        global_label: "<your_own_value>"
         groups:
          -
             name: "default_name_46 (source user.group.name)"
-        icap-profile: "<your_own_value> (source icap.profile.name)"
-        identity-based-route: "<your_own_value> (source firewall.identity-based-route.name)"
+        icap_profile: "<your_own_value> (source icap.profile.name)"
+        identity_based_route: "<your_own_value> (source firewall.identity-based-route.name)"
         inbound: "enable"
-        internet-service: "enable"
-        internet-service-custom:
+        internet_service: "enable"
+        internet_service_custom:
          -
             name: "default_name_52 (source firewall.internet-service-custom.name)"
-        internet-service-id:
+        internet_service_id:
          -
             id:  "54 (source firewall.internet-service.id)"
-        internet-service-negate: "enable"
-        internet-service-src: "enable"
-        internet-service-src-custom:
+        internet_service_negate: "enable"
+        internet_service_src: "enable"
+        internet_service_src_custom:
          -
             name: "default_name_58 (source firewall.internet-service-custom.name)"
-        internet-service-src-id:
+        internet_service_src_id:
          -
             id:  "60 (source firewall.internet-service.id)"
-        internet-service-src-negate: "enable"
+        internet_service_src_negate: "enable"
         ippool: "enable"
-        ips-sensor: "<your_own_value> (source ips.sensor.name)"
+        ips_sensor: "<your_own_value> (source ips.sensor.name)"
         label: "<your_own_value>"
-        learning-mode: "enable"
+        learning_mode: "enable"
         logtraffic: "all"
-        logtraffic-start: "enable"
-        match-vip: "enable"
+        logtraffic_start: "enable"
+        match_vip: "enable"
         name: "default_name_69"
         nat: "enable"
         natinbound: "enable"
         natip: "<your_own_value>"
         natoutbound: "enable"
         ntlm: "enable"
-        ntlm-enabled-browsers:
+        ntlm_enabled_browsers:
          -
-            user-agent-string: "<your_own_value>"
-        ntlm-guest: "enable"
+            user_agent_string: "<your_own_value>"
+        ntlm_guest: "enable"
         outbound: "enable"
-        per-ip-shaper: "<your_own_value> (source firewall.shaper.per-ip-shaper.name)"
-        permit-any-host: "enable"
-        permit-stun-host: "enable"
+        per_ip_shaper: "<your_own_value> (source firewall.shaper.per-ip-shaper.name)"
+        permit_any_host: "enable"
+        permit_stun_host: "enable"
         policyid: "82"
         poolname:
          -
             name: "default_name_84 (source firewall.ippool.name)"
-        profile-group: "<your_own_value> (source firewall.profile-group.name)"
-        profile-protocol-options: "<your_own_value> (source firewall.profile-protocol-options.name)"
-        profile-type: "single"
-        radius-mac-auth-bypass: "enable"
-        redirect-url: "<your_own_value>"
-        replacemsg-override-group: "<your_own_value> (source system.replacemsg-group.name)"
+        profile_group: "<your_own_value> (source firewall.profile-group.name)"
+        profile_protocol_options: "<your_own_value> (source firewall.profile-protocol-options.name)"
+        profile_type: "single"
+        radius_mac_auth_bypass: "enable"
+        redirect_url: "<your_own_value>"
+        replacemsg_override_group: "<your_own_value> (source system.replacemsg-group.name)"
         rsso: "enable"
-        rtp-addr:
+        rtp_addr:
          -
             name: "default_name_93 (source firewall.address.name firewall.addrgrp.name)"
-        rtp-nat: "disable"
-        scan-botnet-connections: "disable"
+        rtp_nat: "disable"
+        scan_botnet_connections: "disable"
         schedule: "<your_own_value> (source firewall.schedule.onetime.name firewall.schedule.recurring.name firewall.schedule.group.name)"
-        schedule-timeout: "enable"
-        send-deny-packet: "disable"
+        schedule_timeout: "enable"
+        send_deny_packet: "disable"
         service:
          -
             name: "default_name_100 (source firewall.service.custom.name firewall.service.group.name)"
-        service-negate: "enable"
-        session-ttl: "102"
-        spamfilter-profile: "<your_own_value> (source spamfilter.profile.name)"
+        service_negate: "enable"
+        session_ttl: "102"
+        spamfilter_profile: "<your_own_value> (source spamfilter.profile.name)"
         srcaddr:
          -
             name: "default_name_105 (source firewall.address.name firewall.addrgrp.name)"
-        srcaddr-negate: "enable"
+        srcaddr_negate: "enable"
         srcintf:
          -
             name: "default_name_108 (source system.interface.name system.zone.name)"
-        ssh-filter-profile: "<your_own_value> (source ssh-filter.profile.name)"
-        ssl-mirror: "enable"
-        ssl-mirror-intf:
+        ssh_filter_profile: "<your_own_value> (source ssh-filter.profile.name)"
+        ssl_mirror: "enable"
+        ssl_mirror_intf:
          -
             name: "default_name_112 (source system.interface.name system.zone.name)"
-        ssl-ssh-profile: "<your_own_value> (source firewall.ssl-ssh-profile.name)"
+        ssl_ssh_profile: "<your_own_value> (source firewall.ssl-ssh-profile.name)"
         status: "enable"
-        tcp-mss-receiver: "115"
-        tcp-mss-sender: "116"
-        tcp-session-without-syn: "all"
-        timeout-send-rst: "enable"
-        traffic-shaper: "<your_own_value> (source firewall.shaper.traffic-shaper.name)"
-        traffic-shaper-reverse: "<your_own_value> (source firewall.shaper.traffic-shaper.name)"
-        url-category:
+        tcp_mss_receiver: "115"
+        tcp_mss_sender: "116"
+        tcp_session_without_syn: "all"
+        timeout_send_rst: "enable"
+        traffic_shaper: "<your_own_value> (source firewall.shaper.traffic-shaper.name)"
+        traffic_shaper_reverse: "<your_own_value> (source firewall.shaper.traffic-shaper.name)"
+        url_category:
          -
             id:  "122"
         users:
          -
             name: "default_name_124 (source user.local.name)"
-        utm-status: "enable"
+        utm_status: "enable"
         uuid: "<your_own_value>"
-        vlan-cos-fwd: "127"
-        vlan-cos-rev: "128"
-        vlan-filter: "<your_own_value>"
-        voip-profile: "<your_own_value> (source voip.profile.name)"
+        vlan_cos_fwd: "127"
+        vlan_cos_rev: "128"
+        vlan_filter: "<your_own_value>"
+        voip_profile: "<your_own_value> (source voip.profile.name)"
         vpntunnel: "<your_own_value> (source vpn.ipsec.phase1.name vpn.ipsec.manualkey.name)"
-        waf-profile: "<your_own_value> (source waf.profile.name)"
+        waf_profile: "<your_own_value> (source waf.profile.name)"
         wanopt: "enable"
-        wanopt-detection: "active"
-        wanopt-passive-opt: "default"
-        wanopt-peer: "<your_own_value> (source wanopt.peer.peer-host-id)"
-        wanopt-profile: "<your_own_value> (source wanopt.profile.name)"
+        wanopt_detection: "active"
+        wanopt_passive_opt: "default"
+        wanopt_peer: "<your_own_value> (source wanopt.peer.peer-host-id)"
+        wanopt_profile: "<your_own_value> (source wanopt.profile.name)"
         wccp: "enable"
         webcache: "enable"
-        webcache-https: "disable"
-        webfilter-profile: "<your_own_value> (source webfilter.profile.name)"
+        webcache_https: "disable"
+        webfilter_profile: "<your_own_value> (source webfilter.profile.name)"
         wsso: "enable"
 '''
 
@@ -913,7 +1062,7 @@ mkey:
   description: Master key (id) used in the last call to FortiGate
   returned: success
   type: str
-  sample: "key1"
+  sample: "id"
 name:
   description: Name of the table used to fulfill the request
   returned: always
@@ -953,14 +1102,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
-
-fos = None
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
 
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -968,50 +1119,50 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_firewall_policy_data(json):
-    option_list = ['action', 'app-category', 'app-group',
-                   'application', 'application-list', 'auth-cert',
-                   'auth-path', 'auth-redirect-addr', 'av-profile',
-                   'block-notification', 'captive-portal-exempt', 'capture-packet',
-                   'comments', 'custom-log-fields', 'delay-tcp-npu-session',
-                   'devices', 'diffserv-forward', 'diffserv-reverse',
-                   'diffservcode-forward', 'diffservcode-rev', 'disclaimer',
-                   'dlp-sensor', 'dnsfilter-profile', 'dscp-match',
-                   'dscp-negate', 'dscp-value', 'dsri',
-                   'dstaddr', 'dstaddr-negate', 'dstintf',
-                   'firewall-session-dirty', 'fixedport', 'fsso',
-                   'fsso-agent-for-ntlm', 'global-label', 'groups',
-                   'icap-profile', 'identity-based-route', 'inbound',
-                   'internet-service', 'internet-service-custom', 'internet-service-id',
-                   'internet-service-negate', 'internet-service-src', 'internet-service-src-custom',
-                   'internet-service-src-id', 'internet-service-src-negate', 'ippool',
-                   'ips-sensor', 'label', 'learning-mode',
-                   'logtraffic', 'logtraffic-start', 'match-vip',
+    option_list = ['action', 'app_category', 'app_group',
+                   'application', 'application_list', 'auth_cert',
+                   'auth_path', 'auth_redirect_addr', 'av_profile',
+                   'block_notification', 'captive_portal_exempt', 'capture_packet',
+                   'comments', 'custom_log_fields', 'delay_tcp_npu_session',
+                   'devices', 'diffserv_forward', 'diffserv_reverse',
+                   'diffservcode_forward', 'diffservcode_rev', 'disclaimer',
+                   'dlp_sensor', 'dnsfilter_profile', 'dscp_match',
+                   'dscp_negate', 'dscp_value', 'dsri',
+                   'dstaddr', 'dstaddr_negate', 'dstintf',
+                   'firewall_session_dirty', 'fixedport', 'fsso',
+                   'fsso_agent_for_ntlm', 'global_label', 'groups',
+                   'icap_profile', 'identity_based_route', 'inbound',
+                   'internet_service', 'internet_service_custom', 'internet_service_id',
+                   'internet_service_negate', 'internet_service_src', 'internet_service_src_custom',
+                   'internet_service_src_id', 'internet_service_src_negate', 'ippool',
+                   'ips_sensor', 'label', 'learning_mode',
+                   'logtraffic', 'logtraffic_start', 'match_vip',
                    'name', 'nat', 'natinbound',
                    'natip', 'natoutbound', 'ntlm',
-                   'ntlm-enabled-browsers', 'ntlm-guest', 'outbound',
-                   'per-ip-shaper', 'permit-any-host', 'permit-stun-host',
-                   'policyid', 'poolname', 'profile-group',
-                   'profile-protocol-options', 'profile-type', 'radius-mac-auth-bypass',
-                   'redirect-url', 'replacemsg-override-group', 'rsso',
-                   'rtp-addr', 'rtp-nat', 'scan-botnet-connections',
-                   'schedule', 'schedule-timeout', 'send-deny-packet',
-                   'service', 'service-negate', 'session-ttl',
-                   'spamfilter-profile', 'srcaddr', 'srcaddr-negate',
-                   'srcintf', 'ssh-filter-profile', 'ssl-mirror',
-                   'ssl-mirror-intf', 'ssl-ssh-profile', 'status',
-                   'tcp-mss-receiver', 'tcp-mss-sender', 'tcp-session-without-syn',
-                   'timeout-send-rst', 'traffic-shaper', 'traffic-shaper-reverse',
-                   'url-category', 'users', 'utm-status',
-                   'uuid', 'vlan-cos-fwd', 'vlan-cos-rev',
-                   'vlan-filter', 'voip-profile', 'vpntunnel',
-                   'waf-profile', 'wanopt', 'wanopt-detection',
-                   'wanopt-passive-opt', 'wanopt-peer', 'wanopt-profile',
-                   'wccp', 'webcache', 'webcache-https',
-                   'webfilter-profile', 'wsso']
+                   'ntlm_enabled_browsers', 'ntlm_guest', 'outbound',
+                   'per_ip_shaper', 'permit_any_host', 'permit_stun_host',
+                   'policyid', 'poolname', 'profile_group',
+                   'profile_protocol_options', 'profile_type', 'radius_mac_auth_bypass',
+                   'redirect_url', 'replacemsg_override_group', 'rsso',
+                   'rtp_addr', 'rtp_nat', 'scan_botnet_connections',
+                   'schedule', 'schedule_timeout', 'send_deny_packet',
+                   'service', 'service_negate', 'session_ttl',
+                   'spamfilter_profile', 'srcaddr', 'srcaddr_negate',
+                   'srcintf', 'ssh_filter_profile', 'ssl_mirror',
+                   'ssl_mirror_intf', 'ssl_ssh_profile', 'status',
+                   'tcp_mss_receiver', 'tcp_mss_sender', 'tcp_session_without_syn',
+                   'timeout_send_rst', 'traffic_shaper', 'traffic_shaper_reverse',
+                   'url_category', 'users', 'utm_status',
+                   'uuid', 'vlan_cos_fwd', 'vlan_cos_rev',
+                   'vlan_filter', 'voip_profile', 'vpntunnel',
+                   'waf_profile', 'wanopt', 'wanopt_detection',
+                   'wanopt_passive_opt', 'wanopt_peer', 'wanopt_profile',
+                   'wccp', 'webcache', 'webcache_https',
+                   'webfilter_profile', 'wsso']
     dictionary = {}
 
     for attribute in option_list:
@@ -1021,55 +1172,73 @@ def filter_firewall_policy_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def firewall_policy(data, fos):
     vdom = data['vdom']
+    state = data['state']
     firewall_policy_data = data['firewall_policy']
-    filtered_data = filter_firewall_policy_data(firewall_policy_data)
-    if firewall_policy_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_firewall_policy_data(firewall_policy_data))
+
+    if state == "present":
         return fos.set('firewall',
                        'policy',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif firewall_policy_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('firewall',
                           'policy',
                           mkey=filtered_data['policyid'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_firewall(data, fos):
-    login(data)
 
-    methodlist = ['firewall_policy']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['firewall_policy']:
+        resp = firewall_policy(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "firewall_policy": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
                 "action": {"required": False, "type": "str",
                            "choices": ["accept", "deny", "ipsec"]},
-                "app-category": {"required": False, "type": "list",
+                "app_category": {"required": False, "type": "list",
                                  "options": {
                                      "id": {"required": True, "type": "int"}
                                  }},
-                "app-group": {"required": False, "type": "list",
+                "app_group": {"required": False, "type": "list",
                               "options": {
                                   "name": {"required": True, "type": "str"}
                               }},
@@ -1077,107 +1246,107 @@ def main():
                                 "options": {
                                     "id": {"required": True, "type": "int"}
                                 }},
-                "application-list": {"required": False, "type": "str"},
-                "auth-cert": {"required": False, "type": "str"},
-                "auth-path": {"required": False, "type": "str",
+                "application_list": {"required": False, "type": "str"},
+                "auth_cert": {"required": False, "type": "str"},
+                "auth_path": {"required": False, "type": "str",
                               "choices": ["enable", "disable"]},
-                "auth-redirect-addr": {"required": False, "type": "str"},
-                "av-profile": {"required": False, "type": "str"},
-                "block-notification": {"required": False, "type": "str",
+                "auth_redirect_addr": {"required": False, "type": "str"},
+                "av_profile": {"required": False, "type": "str"},
+                "block_notification": {"required": False, "type": "str",
                                        "choices": ["enable", "disable"]},
-                "captive-portal-exempt": {"required": False, "type": "str",
+                "captive_portal_exempt": {"required": False, "type": "str",
                                           "choices": ["enable", "disable"]},
-                "capture-packet": {"required": False, "type": "str",
+                "capture_packet": {"required": False, "type": "str",
                                    "choices": ["enable", "disable"]},
                 "comments": {"required": False, "type": "str"},
-                "custom-log-fields": {"required": False, "type": "list",
+                "custom_log_fields": {"required": False, "type": "list",
                                       "options": {
-                                          "field-id": {"required": True, "type": "str"}
+                                          "field_id": {"required": False, "type": "str"}
                                       }},
-                "delay-tcp-npu-session": {"required": False, "type": "str",
+                "delay_tcp_npu_session": {"required": False, "type": "str",
                                           "choices": ["enable", "disable"]},
                 "devices": {"required": False, "type": "list",
                             "options": {
                                 "name": {"required": True, "type": "str"}
                             }},
-                "diffserv-forward": {"required": False, "type": "str",
+                "diffserv_forward": {"required": False, "type": "str",
                                      "choices": ["enable", "disable"]},
-                "diffserv-reverse": {"required": False, "type": "str",
+                "diffserv_reverse": {"required": False, "type": "str",
                                      "choices": ["enable", "disable"]},
-                "diffservcode-forward": {"required": False, "type": "str"},
-                "diffservcode-rev": {"required": False, "type": "str"},
+                "diffservcode_forward": {"required": False, "type": "str"},
+                "diffservcode_rev": {"required": False, "type": "str"},
                 "disclaimer": {"required": False, "type": "str",
                                "choices": ["enable", "disable"]},
-                "dlp-sensor": {"required": False, "type": "str"},
-                "dnsfilter-profile": {"required": False, "type": "str"},
-                "dscp-match": {"required": False, "type": "str",
+                "dlp_sensor": {"required": False, "type": "str"},
+                "dnsfilter_profile": {"required": False, "type": "str"},
+                "dscp_match": {"required": False, "type": "str",
                                "choices": ["enable", "disable"]},
-                "dscp-negate": {"required": False, "type": "str",
+                "dscp_negate": {"required": False, "type": "str",
                                 "choices": ["enable", "disable"]},
-                "dscp-value": {"required": False, "type": "str"},
+                "dscp_value": {"required": False, "type": "str"},
                 "dsri": {"required": False, "type": "str",
                          "choices": ["enable", "disable"]},
                 "dstaddr": {"required": False, "type": "list",
                             "options": {
                                 "name": {"required": True, "type": "str"}
                             }},
-                "dstaddr-negate": {"required": False, "type": "str",
+                "dstaddr_negate": {"required": False, "type": "str",
                                    "choices": ["enable", "disable"]},
                 "dstintf": {"required": False, "type": "list",
                             "options": {
                                 "name": {"required": True, "type": "str"}
                             }},
-                "firewall-session-dirty": {"required": False, "type": "str",
+                "firewall_session_dirty": {"required": False, "type": "str",
                                            "choices": ["check-all", "check-new"]},
                 "fixedport": {"required": False, "type": "str",
                               "choices": ["enable", "disable"]},
                 "fsso": {"required": False, "type": "str",
                          "choices": ["enable", "disable"]},
-                "fsso-agent-for-ntlm": {"required": False, "type": "str"},
-                "global-label": {"required": False, "type": "str"},
+                "fsso_agent_for_ntlm": {"required": False, "type": "str"},
+                "global_label": {"required": False, "type": "str"},
                 "groups": {"required": False, "type": "list",
                            "options": {
                                "name": {"required": True, "type": "str"}
                            }},
-                "icap-profile": {"required": False, "type": "str"},
-                "identity-based-route": {"required": False, "type": "str"},
+                "icap_profile": {"required": False, "type": "str"},
+                "identity_based_route": {"required": False, "type": "str"},
                 "inbound": {"required": False, "type": "str",
                             "choices": ["enable", "disable"]},
-                "internet-service": {"required": False, "type": "str",
+                "internet_service": {"required": False, "type": "str",
                                      "choices": ["enable", "disable"]},
-                "internet-service-custom": {"required": False, "type": "list",
+                "internet_service_custom": {"required": False, "type": "list",
                                             "options": {
                                                 "name": {"required": True, "type": "str"}
                                             }},
-                "internet-service-id": {"required": False, "type": "list",
+                "internet_service_id": {"required": False, "type": "list",
                                         "options": {
                                             "id": {"required": True, "type": "int"}
                                         }},
-                "internet-service-negate": {"required": False, "type": "str",
+                "internet_service_negate": {"required": False, "type": "str",
                                             "choices": ["enable", "disable"]},
-                "internet-service-src": {"required": False, "type": "str",
+                "internet_service_src": {"required": False, "type": "str",
                                          "choices": ["enable", "disable"]},
-                "internet-service-src-custom": {"required": False, "type": "list",
+                "internet_service_src_custom": {"required": False, "type": "list",
                                                 "options": {
                                                     "name": {"required": True, "type": "str"}
                                                 }},
-                "internet-service-src-id": {"required": False, "type": "list",
+                "internet_service_src_id": {"required": False, "type": "list",
                                             "options": {
                                                 "id": {"required": True, "type": "int"}
                                             }},
-                "internet-service-src-negate": {"required": False, "type": "str",
+                "internet_service_src_negate": {"required": False, "type": "str",
                                                 "choices": ["enable", "disable"]},
                 "ippool": {"required": False, "type": "str",
                            "choices": ["enable", "disable"]},
-                "ips-sensor": {"required": False, "type": "str"},
+                "ips_sensor": {"required": False, "type": "str"},
                 "label": {"required": False, "type": "str"},
-                "learning-mode": {"required": False, "type": "str",
+                "learning_mode": {"required": False, "type": "str",
                                   "choices": ["enable", "disable"]},
                 "logtraffic": {"required": False, "type": "str",
                                "choices": ["all", "utm", "disable"]},
-                "logtraffic-start": {"required": False, "type": "str",
+                "logtraffic_start": {"required": False, "type": "str",
                                      "choices": ["enable", "disable"]},
-                "match-vip": {"required": False, "type": "str",
+                "match_vip": {"required": False, "type": "str",
                               "choices": ["enable", "disable"]},
                 "name": {"required": False, "type": "str"},
                 "nat": {"required": False, "type": "str",
@@ -1189,84 +1358,84 @@ def main():
                                 "choices": ["enable", "disable"]},
                 "ntlm": {"required": False, "type": "str",
                          "choices": ["enable", "disable"]},
-                "ntlm-enabled-browsers": {"required": False, "type": "list",
+                "ntlm_enabled_browsers": {"required": False, "type": "list",
                                           "options": {
-                                              "user-agent-string": {"required": True, "type": "str"}
+                                              "user_agent_string": {"required": False, "type": "str"}
                                           }},
-                "ntlm-guest": {"required": False, "type": "str",
+                "ntlm_guest": {"required": False, "type": "str",
                                "choices": ["enable", "disable"]},
                 "outbound": {"required": False, "type": "str",
                              "choices": ["enable", "disable"]},
-                "per-ip-shaper": {"required": False, "type": "str"},
-                "permit-any-host": {"required": False, "type": "str",
+                "per_ip_shaper": {"required": False, "type": "str"},
+                "permit_any_host": {"required": False, "type": "str",
                                     "choices": ["enable", "disable"]},
-                "permit-stun-host": {"required": False, "type": "str",
+                "permit_stun_host": {"required": False, "type": "str",
                                      "choices": ["enable", "disable"]},
                 "policyid": {"required": True, "type": "int"},
                 "poolname": {"required": False, "type": "list",
                              "options": {
                                  "name": {"required": True, "type": "str"}
                              }},
-                "profile-group": {"required": False, "type": "str"},
-                "profile-protocol-options": {"required": False, "type": "str"},
-                "profile-type": {"required": False, "type": "str",
+                "profile_group": {"required": False, "type": "str"},
+                "profile_protocol_options": {"required": False, "type": "str"},
+                "profile_type": {"required": False, "type": "str",
                                  "choices": ["single", "group"]},
-                "radius-mac-auth-bypass": {"required": False, "type": "str",
+                "radius_mac_auth_bypass": {"required": False, "type": "str",
                                            "choices": ["enable", "disable"]},
-                "redirect-url": {"required": False, "type": "str"},
-                "replacemsg-override-group": {"required": False, "type": "str"},
+                "redirect_url": {"required": False, "type": "str"},
+                "replacemsg_override_group": {"required": False, "type": "str"},
                 "rsso": {"required": False, "type": "str",
                          "choices": ["enable", "disable"]},
-                "rtp-addr": {"required": False, "type": "list",
+                "rtp_addr": {"required": False, "type": "list",
                              "options": {
                                  "name": {"required": True, "type": "str"}
                              }},
-                "rtp-nat": {"required": False, "type": "str",
+                "rtp_nat": {"required": False, "type": "str",
                             "choices": ["disable", "enable"]},
-                "scan-botnet-connections": {"required": False, "type": "str",
+                "scan_botnet_connections": {"required": False, "type": "str",
                                             "choices": ["disable", "block", "monitor"]},
                 "schedule": {"required": False, "type": "str"},
-                "schedule-timeout": {"required": False, "type": "str",
+                "schedule_timeout": {"required": False, "type": "str",
                                      "choices": ["enable", "disable"]},
-                "send-deny-packet": {"required": False, "type": "str",
+                "send_deny_packet": {"required": False, "type": "str",
                                      "choices": ["disable", "enable"]},
                 "service": {"required": False, "type": "list",
                             "options": {
                                 "name": {"required": True, "type": "str"}
                             }},
-                "service-negate": {"required": False, "type": "str",
+                "service_negate": {"required": False, "type": "str",
                                    "choices": ["enable", "disable"]},
-                "session-ttl": {"required": False, "type": "int"},
-                "spamfilter-profile": {"required": False, "type": "str"},
+                "session_ttl": {"required": False, "type": "int"},
+                "spamfilter_profile": {"required": False, "type": "str"},
                 "srcaddr": {"required": False, "type": "list",
                             "options": {
                                 "name": {"required": True, "type": "str"}
                             }},
-                "srcaddr-negate": {"required": False, "type": "str",
+                "srcaddr_negate": {"required": False, "type": "str",
                                    "choices": ["enable", "disable"]},
                 "srcintf": {"required": False, "type": "list",
                             "options": {
                                 "name": {"required": True, "type": "str"}
                             }},
-                "ssh-filter-profile": {"required": False, "type": "str"},
-                "ssl-mirror": {"required": False, "type": "str",
+                "ssh_filter_profile": {"required": False, "type": "str"},
+                "ssl_mirror": {"required": False, "type": "str",
                                "choices": ["enable", "disable"]},
-                "ssl-mirror-intf": {"required": False, "type": "list",
+                "ssl_mirror_intf": {"required": False, "type": "list",
                                     "options": {
                                         "name": {"required": True, "type": "str"}
                                     }},
-                "ssl-ssh-profile": {"required": False, "type": "str"},
+                "ssl_ssh_profile": {"required": False, "type": "str"},
                 "status": {"required": False, "type": "str",
                            "choices": ["enable", "disable"]},
-                "tcp-mss-receiver": {"required": False, "type": "int"},
-                "tcp-mss-sender": {"required": False, "type": "int"},
-                "tcp-session-without-syn": {"required": False, "type": "str",
+                "tcp_mss_receiver": {"required": False, "type": "int"},
+                "tcp_mss_sender": {"required": False, "type": "int"},
+                "tcp_session_without_syn": {"required": False, "type": "str",
                                             "choices": ["all", "data-only", "disable"]},
-                "timeout-send-rst": {"required": False, "type": "str",
+                "timeout_send_rst": {"required": False, "type": "str",
                                      "choices": ["enable", "disable"]},
-                "traffic-shaper": {"required": False, "type": "str"},
-                "traffic-shaper-reverse": {"required": False, "type": "str"},
-                "url-category": {"required": False, "type": "list",
+                "traffic_shaper": {"required": False, "type": "str"},
+                "traffic_shaper_reverse": {"required": False, "type": "str"},
+                "url_category": {"required": False, "type": "list",
                                  "options": {
                                      "id": {"required": True, "type": "int"}
                                  }},
@@ -1274,30 +1443,30 @@ def main():
                           "options": {
                               "name": {"required": True, "type": "str"}
                           }},
-                "utm-status": {"required": False, "type": "str",
+                "utm_status": {"required": False, "type": "str",
                                "choices": ["enable", "disable"]},
                 "uuid": {"required": False, "type": "str"},
-                "vlan-cos-fwd": {"required": False, "type": "int"},
-                "vlan-cos-rev": {"required": False, "type": "int"},
-                "vlan-filter": {"required": False, "type": "str"},
-                "voip-profile": {"required": False, "type": "str"},
+                "vlan_cos_fwd": {"required": False, "type": "int"},
+                "vlan_cos_rev": {"required": False, "type": "int"},
+                "vlan_filter": {"required": False, "type": "str"},
+                "voip_profile": {"required": False, "type": "str"},
                 "vpntunnel": {"required": False, "type": "str"},
-                "waf-profile": {"required": False, "type": "str"},
+                "waf_profile": {"required": False, "type": "str"},
                 "wanopt": {"required": False, "type": "str",
                            "choices": ["enable", "disable"]},
-                "wanopt-detection": {"required": False, "type": "str",
+                "wanopt_detection": {"required": False, "type": "str",
                                      "choices": ["active", "passive", "off"]},
-                "wanopt-passive-opt": {"required": False, "type": "str",
+                "wanopt_passive_opt": {"required": False, "type": "str",
                                        "choices": ["default", "transparent", "non-transparent"]},
-                "wanopt-peer": {"required": False, "type": "str"},
-                "wanopt-profile": {"required": False, "type": "str"},
+                "wanopt_peer": {"required": False, "type": "str"},
+                "wanopt_profile": {"required": False, "type": "str"},
                 "wccp": {"required": False, "type": "str",
                          "choices": ["enable", "disable"]},
                 "webcache": {"required": False, "type": "str",
                              "choices": ["enable", "disable"]},
-                "webcache-https": {"required": False, "type": "str",
+                "webcache_https": {"required": False, "type": "str",
                                    "choices": ["disable", "enable"]},
-                "webfilter-profile": {"required": False, "type": "str"},
+                "webfilter_profile": {"required": False, "type": "str"},
                 "wsso": {"required": False, "type": "str",
                          "choices": ["enable", "disable"]}
 
@@ -1307,15 +1476,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_firewall(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_firewall(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_firewall(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_firewall_policy46.py b/lib/ansible/modules/network/fortios/fortios_firewall_policy46.py
index d65c9d4777..b03370af2b 100644
--- a/lib/ansible/modules/network/fortios/fortios_firewall_policy46.py
+++ b/lib/ansible/modules/network/fortios/fortios_firewall_policy46.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 from __future__ import (absolute_import, division, print_function)
-# Copyright 2018 Fortinet, Inc.
+# Copyright 2019 Fortinet, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_firewall_policy46
 short_description: Configure IPv4 to IPv6 policies in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure firewall feature and policy46 category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify firewall feature and policy46 category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,84 +41,106 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     firewall_policy46:
         description:
             - Configure IPv4 to IPv6 policies.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
             action:
                 description:
                     - Accept or deny traffic matching the policy.
+                type: str
                 choices:
                     - accept
                     - deny
             comments:
                 description:
                     - Comment.
+                type: str
             dstaddr:
                 description:
                     - Destination address objects.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Address name. Source firewall.vip46.name firewall.vipgrp46.name.
                         required: true
+                        type: str
             dstintf:
                 description:
                     - Destination interface name. Source system.interface.name system.zone.name.
+                type: str
             fixedport:
                 description:
                     - Enable/disable fixed port for this policy.
+                type: str
                 choices:
                     - enable
                     - disable
             ippool:
                 description:
                     - Enable/disable use of IP Pools for source NAT.
+                type: str
                 choices:
                     - enable
                     - disable
             logtraffic:
                 description:
                     - Enable/disable traffic logging for this policy.
+                type: str
                 choices:
                     - enable
                     - disable
-            per-ip-shaper:
+            per_ip_shaper:
                 description:
                     - Per IP traffic shaper. Source firewall.shaper.per-ip-shaper.name.
-            permit-any-host:
+                type: str
+            permit_any_host:
                 description:
                     - Enable/disable allowing any host.
+                type: str
                 choices:
                     - enable
                     - disable
@@ -129,57 +148,72 @@ options:
                 description:
                     - Policy ID.
                 required: true
+                type: int
             poolname:
                 description:
                     - IP Pool names.
+                type: list
                 suboptions:
                     name:
                         description:
                             - IP pool name. Source firewall.ippool6.name.
                         required: true
+                        type: str
             schedule:
                 description:
                     - Schedule name. Source firewall.schedule.onetime.name firewall.schedule.recurring.name firewall.schedule.group.name.
+                type: str
             service:
                 description:
                     - Service name.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Service name. Source firewall.service.custom.name firewall.service.group.name.
                         required: true
+                        type: str
             srcaddr:
                 description:
                     - Source address objects.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Address name. Source firewall.address.name firewall.addrgrp.name.
                         required: true
+                        type: str
             srcintf:
                 description:
                     - Source interface name. Source system.zone.name system.interface.name.
+                type: str
             status:
                 description:
                     - Enable/disable this policy.
+                type: str
                 choices:
                     - enable
                     - disable
-            tcp-mss-receiver:
+            tcp_mss_receiver:
                 description:
                     - TCP Maximum Segment Size value of receiver (0 - 65535, default = 0)
-            tcp-mss-sender:
+                type: int
+            tcp_mss_sender:
                 description:
                     - TCP Maximum Segment Size value of sender (0 - 65535, default = 0).
-            traffic-shaper:
+                type: int
+            traffic_shaper:
                 description:
                     - Traffic shaper. Source firewall.shaper.traffic-shaper.name.
-            traffic-shaper-reverse:
+                type: str
+            traffic_shaper_reverse:
                 description:
                     - Reverse traffic shaper. Source firewall.shaper.traffic-shaper.name.
+                type: str
             uuid:
                 description:
                     - Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
+                type: str
 '''
 
 EXAMPLES = '''
@@ -189,6 +223,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure IPv4 to IPv6 policies.
     fortios_firewall_policy46:
@@ -196,8 +231,9 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       firewall_policy46:
-        state: "present"
         action: "accept"
         comments: "<your_own_value>"
         dstaddr:
@@ -207,8 +243,8 @@ EXAMPLES = '''
         fixedport: "enable"
         ippool: "enable"
         logtraffic: "enable"
-        per-ip-shaper: "<your_own_value> (source firewall.shaper.per-ip-shaper.name)"
-        permit-any-host: "enable"
+        per_ip_shaper: "<your_own_value> (source firewall.shaper.per-ip-shaper.name)"
+        permit_any_host: "enable"
         policyid: "13"
         poolname:
          -
@@ -222,10 +258,10 @@ EXAMPLES = '''
             name: "default_name_20 (source firewall.address.name firewall.addrgrp.name)"
         srcintf: "<your_own_value> (source system.zone.name system.interface.name)"
         status: "enable"
-        tcp-mss-receiver: "23"
-        tcp-mss-sender: "24"
-        traffic-shaper: "<your_own_value> (source firewall.shaper.traffic-shaper.name)"
-        traffic-shaper-reverse: "<your_own_value> (source firewall.shaper.traffic-shaper.name)"
+        tcp_mss_receiver: "23"
+        tcp_mss_sender: "24"
+        traffic_shaper: "<your_own_value> (source firewall.shaper.traffic-shaper.name)"
+        traffic_shaper_reverse: "<your_own_value> (source firewall.shaper.traffic-shaper.name)"
         uuid: "<your_own_value>"
 '''
 
@@ -249,7 +285,7 @@ mkey:
   description: Master key (id) used in the last call to FortiGate
   returned: success
   type: str
-  sample: "key1"
+  sample: "id"
 name:
   description: Name of the table used to fulfill the request
   returned: always
@@ -289,14 +325,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -304,17 +342,17 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_firewall_policy46_data(json):
     option_list = ['action', 'comments', 'dstaddr',
                    'dstintf', 'fixedport', 'ippool',
-                   'logtraffic', 'per-ip-shaper', 'permit-any-host',
+                   'logtraffic', 'per_ip_shaper', 'permit_any_host',
                    'policyid', 'poolname', 'schedule',
                    'service', 'srcaddr', 'srcintf',
-                   'status', 'tcp-mss-receiver', 'tcp-mss-sender',
-                   'traffic-shaper', 'traffic-shaper-reverse', 'uuid']
+                   'status', 'tcp_mss_receiver', 'tcp_mss_sender',
+                   'traffic_shaper', 'traffic_shaper_reverse', 'uuid']
     dictionary = {}
 
     for attribute in option_list:
@@ -324,48 +362,66 @@ def filter_firewall_policy46_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def firewall_policy46(data, fos):
     vdom = data['vdom']
+    state = data['state']
     firewall_policy46_data = data['firewall_policy46']
-    filtered_data = filter_firewall_policy46_data(firewall_policy46_data)
-    if firewall_policy46_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_firewall_policy46_data(firewall_policy46_data))
+
+    if state == "present":
         return fos.set('firewall',
                        'policy46',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif firewall_policy46_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('firewall',
                           'policy46',
                           mkey=filtered_data['policyid'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_firewall(data, fos):
-    login(data)
 
-    methodlist = ['firewall_policy46']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['firewall_policy46']:
+        resp = firewall_policy46(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "firewall_policy46": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
                 "action": {"required": False, "type": "str",
                            "choices": ["accept", "deny"]},
                 "comments": {"required": False, "type": "str"},
@@ -380,8 +436,8 @@ def main():
                            "choices": ["enable", "disable"]},
                 "logtraffic": {"required": False, "type": "str",
                                "choices": ["enable", "disable"]},
-                "per-ip-shaper": {"required": False, "type": "str"},
-                "permit-any-host": {"required": False, "type": "str",
+                "per_ip_shaper": {"required": False, "type": "str"},
+                "permit_any_host": {"required": False, "type": "str",
                                     "choices": ["enable", "disable"]},
                 "policyid": {"required": True, "type": "int"},
                 "poolname": {"required": False, "type": "list",
@@ -400,10 +456,10 @@ def main():
                 "srcintf": {"required": False, "type": "str"},
                 "status": {"required": False, "type": "str",
                            "choices": ["enable", "disable"]},
-                "tcp-mss-receiver": {"required": False, "type": "int"},
-                "tcp-mss-sender": {"required": False, "type": "int"},
-                "traffic-shaper": {"required": False, "type": "str"},
-                "traffic-shaper-reverse": {"required": False, "type": "str"},
+                "tcp_mss_receiver": {"required": False, "type": "int"},
+                "tcp_mss_sender": {"required": False, "type": "int"},
+                "traffic_shaper": {"required": False, "type": "str"},
+                "traffic_shaper_reverse": {"required": False, "type": "str"},
                 "uuid": {"required": False, "type": "str"}
 
             }
@@ -412,15 +468,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_firewall(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_firewall(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_firewall(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_firewall_policy6.py b/lib/ansible/modules/network/fortios/fortios_firewall_policy6.py
index dc3a119f9b..7e47344585 100644
--- a/lib/ansible/modules/network/fortios/fortios_firewall_policy6.py
+++ b/lib/ansible/modules/network/fortios/fortios_firewall_policy6.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 from __future__ import (absolute_import, division, print_function)
-# Copyright 2018 Fortinet, Inc.
+# Copyright 2019 Fortinet, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_firewall_policy6
 short_description: Configure IPv6 policies in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure firewall feature and policy6 category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify firewall feature and policy6 category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,425 +41,526 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     firewall_policy6:
         description:
             - Configure IPv6 policies.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
             action:
                 description:
                     - Policy action (allow/deny/ipsec).
+                type: str
                 choices:
                     - accept
                     - deny
                     - ipsec
-            app-category:
+            app_category:
                 description:
                     - Application category ID list.
+                type: list
                 suboptions:
                     id:
                         description:
                             - Category IDs.
                         required: true
-            app-group:
+                        type: int
+            app_group:
                 description:
                     - Application group names.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Application group names. Source application.group.name.
                         required: true
+                        type: str
             application:
                 description:
                     - Application ID list.
+                type: list
                 suboptions:
                     id:
                         description:
                             - Application IDs.
                         required: true
-            application-list:
+                        type: int
+            application_list:
                 description:
                     - Name of an existing Application list. Source application.list.name.
-            av-profile:
+                type: str
+            av_profile:
                 description:
                     - Name of an existing Antivirus profile. Source antivirus.profile.name.
+                type: str
             comments:
                 description:
                     - Comment.
-            custom-log-fields:
+                type: str
+            custom_log_fields:
                 description:
                     - Log field index numbers to append custom log fields to log messages for this policy.
+                type: list
                 suboptions:
-                    field-id:
+                    field_id:
                         description:
                             - Custom log field. Source log.custom-field.id.
-                        required: true
+                        type: str
             devices:
                 description:
                     - Names of devices or device groups that can be matched by the policy.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Device or group name. Source user.device.alias user.device-group.name user.device-category.name.
                         required: true
-            diffserv-forward:
+                        type: str
+            diffserv_forward:
                 description:
                     - Enable to change packet's DiffServ values to the specified diffservcode-forward value.
+                type: str
                 choices:
                     - enable
                     - disable
-            diffserv-reverse:
+            diffserv_reverse:
                 description:
                     - Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.
+                type: str
                 choices:
                     - enable
                     - disable
-            diffservcode-forward:
+            diffservcode_forward:
                 description:
                     - Change packet's DiffServ to this value.
-            diffservcode-rev:
+                type: str
+            diffservcode_rev:
                 description:
                     - Change packet's reverse (reply) DiffServ to this value.
-            dlp-sensor:
+                type: str
+            dlp_sensor:
                 description:
                     - Name of an existing DLP sensor. Source dlp.sensor.name.
-            dscp-match:
+                type: str
+            dscp_match:
                 description:
                     - Enable DSCP check.
+                type: str
                 choices:
                     - enable
                     - disable
-            dscp-negate:
+            dscp_negate:
                 description:
                     - Enable negated DSCP match.
+                type: str
                 choices:
                     - enable
                     - disable
-            dscp-value:
+            dscp_value:
                 description:
                     - DSCP value.
+                type: str
             dsri:
                 description:
                     - Enable DSRI to ignore HTTP server responses.
+                type: str
                 choices:
                     - enable
                     - disable
             dstaddr:
                 description:
                     - Destination address and address group names.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Address name. Source firewall.address6.name firewall.addrgrp6.name firewall.vip6.name firewall.vipgrp6.name.
                         required: true
-            dstaddr-negate:
+                        type: str
+            dstaddr_negate:
                 description:
                     - When enabled dstaddr specifies what the destination address must NOT be.
+                type: str
                 choices:
                     - enable
                     - disable
             dstintf:
                 description:
                     - Outgoing (egress) interface.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Interface name. Source system.interface.name system.zone.name.
                         required: true
-            firewall-session-dirty:
+                        type: str
+            firewall_session_dirty:
                 description:
                     - How to handle sessions if the configuration of this firewall policy changes.
+                type: str
                 choices:
                     - check-all
                     - check-new
             fixedport:
                 description:
                     - Enable to prevent source NAT from changing a session's source port.
+                type: str
                 choices:
                     - enable
                     - disable
-            global-label:
+            global_label:
                 description:
                     - Label for the policy that appears when the GUI is in Global View mode.
+                type: str
             groups:
                 description:
                     - Names of user groups that can authenticate with this policy.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Group name. Source user.group.name.
                         required: true
-            icap-profile:
+                        type: str
+            icap_profile:
                 description:
                     - Name of an existing ICAP profile. Source icap.profile.name.
+                type: str
             inbound:
                 description:
                     - "Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN."
+                type: str
                 choices:
                     - enable
                     - disable
             ippool:
                 description:
                     - Enable to use IP Pools for source NAT.
+                type: str
                 choices:
                     - enable
                     - disable
-            ips-sensor:
+            ips_sensor:
                 description:
                     - Name of an existing IPS sensor. Source ips.sensor.name.
+                type: str
             label:
                 description:
                     - Label for the policy that appears when the GUI is in Section View mode.
+                type: str
             logtraffic:
                 description:
                     - Enable or disable logging. Log all sessions or security profile sessions.
+                type: str
                 choices:
                     - all
                     - utm
                     - disable
-            logtraffic-start:
+            logtraffic_start:
                 description:
                     - Record logs when a session starts and ends.
+                type: str
                 choices:
                     - enable
                     - disable
             name:
                 description:
                     - Policy name.
+                type: str
             nat:
                 description:
                     - Enable/disable source NAT.
+                type: str
                 choices:
                     - enable
                     - disable
             natinbound:
                 description:
                     - "Policy-based IPsec VPN: apply destination NAT to inbound traffic."
+                type: str
                 choices:
                     - enable
                     - disable
             natoutbound:
                 description:
                     - "Policy-based IPsec VPN: apply source NAT to outbound traffic."
+                type: str
                 choices:
                     - enable
                     - disable
             outbound:
                 description:
                     - "Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN."
+                type: str
                 choices:
                     - enable
                     - disable
-            per-ip-shaper:
+            per_ip_shaper:
                 description:
                     - Per-IP traffic shaper. Source firewall.shaper.per-ip-shaper.name.
+                type: str
             policyid:
                 description:
                     - Policy ID.
                 required: true
+                type: int
             poolname:
                 description:
                     - IP Pool names.
+                type: list
                 suboptions:
                     name:
                         description:
                             - IP pool name. Source firewall.ippool6.name.
                         required: true
-            profile-group:
+                        type: str
+            profile_group:
                 description:
                     - Name of profile group. Source firewall.profile-group.name.
-            profile-protocol-options:
+                type: str
+            profile_protocol_options:
                 description:
                     - Name of an existing Protocol options profile. Source firewall.profile-protocol-options.name.
-            profile-type:
+                type: str
+            profile_type:
                 description:
                     - Determine whether the firewall policy allows security profile groups or single profiles only.
+                type: str
                 choices:
                     - single
                     - group
-            replacemsg-override-group:
+            replacemsg_override_group:
                 description:
                     - Override the default replacement message group for this policy. Source system.replacemsg-group.name.
+                type: str
             rsso:
                 description:
                     - Enable/disable RADIUS single sign-on (RSSO).
+                type: str
                 choices:
                     - enable
                     - disable
             schedule:
                 description:
                     - Schedule name. Source firewall.schedule.onetime.name firewall.schedule.recurring.name firewall.schedule.group.name.
-            send-deny-packet:
+                type: str
+            send_deny_packet:
                 description:
                     - Enable/disable return of deny-packet.
+                type: str
                 choices:
                     - enable
                     - disable
             service:
                 description:
                     - Service and service group names.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Address name. Source firewall.service.custom.name firewall.service.group.name.
                         required: true
-            service-negate:
+                        type: str
+            service_negate:
                 description:
                     - When enabled service specifies what the service must NOT be.
+                type: str
                 choices:
                     - enable
                     - disable
-            session-ttl:
+            session_ttl:
                 description:
                     - Session TTL in seconds for sessions accepted by this policy. 0 means use the system default session TTL.
-            spamfilter-profile:
+                type: int
+            spamfilter_profile:
                 description:
                     - Name of an existing Spam filter profile. Source spamfilter.profile.name.
+                type: str
             srcaddr:
                 description:
                     - Source address and address group names.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Address name. Source firewall.address6.name firewall.addrgrp6.name.
                         required: true
-            srcaddr-negate:
+                        type: str
+            srcaddr_negate:
                 description:
                     - When enabled srcaddr specifies what the source address must NOT be.
+                type: str
                 choices:
                     - enable
                     - disable
             srcintf:
                 description:
                     - Incoming (ingress) interface.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Interface name. Source system.zone.name system.interface.name.
                         required: true
-            ssh-filter-profile:
+                        type: str
+            ssh_filter_profile:
                 description:
                     - Name of an existing SSH filter profile. Source ssh-filter.profile.name.
-            ssl-mirror:
+                type: str
+            ssl_mirror:
                 description:
                     - Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring).
+                type: str
                 choices:
                     - enable
                     - disable
-            ssl-mirror-intf:
+            ssl_mirror_intf:
                 description:
                     - SSL mirror interface name.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Interface name. Source system.zone.name system.interface.name.
                         required: true
-            ssl-ssh-profile:
+                        type: str
+            ssl_ssh_profile:
                 description:
                     - Name of an existing SSL SSH profile. Source firewall.ssl-ssh-profile.name.
+                type: str
             status:
                 description:
                     - Enable or disable this policy.
+                type: str
                 choices:
                     - enable
                     - disable
-            tcp-mss-receiver:
+            tcp_mss_receiver:
                 description:
                     - Receiver TCP maximum segment size (MSS).
-            tcp-mss-sender:
+                type: int
+            tcp_mss_sender:
                 description:
                     - Sender TCP maximum segment size (MSS).
-            tcp-session-without-syn:
+                type: int
+            tcp_session_without_syn:
                 description:
                     - Enable/disable creation of TCP session without SYN flag.
+                type: str
                 choices:
                     - all
                     - data-only
                     - disable
-            timeout-send-rst:
+            timeout_send_rst:
                 description:
                     - Enable/disable sending RST packets when TCP sessions expire.
+                type: str
                 choices:
                     - enable
                     - disable
-            traffic-shaper:
+            traffic_shaper:
                 description:
                     - Reverse traffic shaper. Source firewall.shaper.traffic-shaper.name.
-            traffic-shaper-reverse:
+                type: str
+            traffic_shaper_reverse:
                 description:
                     - Reverse traffic shaper. Source firewall.shaper.traffic-shaper.name.
-            url-category:
+                type: str
+            url_category:
                 description:
                     - URL category ID list.
+                type: list
                 suboptions:
                     id:
                         description:
                             - URL category ID.
                         required: true
+                        type: int
             users:
                 description:
                     - Names of individual users that can authenticate with this policy.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Names of individual users that can authenticate with this policy. Source user.local.name.
                         required: true
-            utm-status:
+                        type: str
+            utm_status:
                 description:
                     - Enable AV/web/ips protection profile.
+                type: str
                 choices:
                     - enable
                     - disable
             uuid:
                 description:
                     - Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
-            vlan-cos-fwd:
+                type: str
+            vlan_cos_fwd:
                 description:
                     - "VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest"
-            vlan-cos-rev:
+                type: int
+            vlan_cos_rev:
                 description:
                     - "VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest"
-            vlan-filter:
+                type: int
+            vlan_filter:
                 description:
                     - Set VLAN filters.
-            voip-profile:
+                type: str
+            voip_profile:
                 description:
                     - Name of an existing VoIP profile. Source voip.profile.name.
+                type: str
             vpntunnel:
                 description:
                     - "Policy-based IPsec VPN: name of the IPsec VPN Phase 1. Source vpn.ipsec.phase1.name vpn.ipsec.manualkey.name."
-            webfilter-profile:
+                type: str
+            webfilter_profile:
                 description:
                     - Name of an existing Web filter profile. Source webfilter.profile.name.
+                type: str
 '''
 
 EXAMPLES = '''
@@ -472,6 +570,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure IPv6 policies.
     fortios_firewall_policy6:
@@ -479,113 +578,114 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       firewall_policy6:
-        state: "present"
         action: "accept"
-        app-category:
+        app_category:
          -
             id:  "5"
-        app-group:
+        app_group:
          -
             name: "default_name_7 (source application.group.name)"
         application:
          -
             id:  "9"
-        application-list: "<your_own_value> (source application.list.name)"
-        av-profile: "<your_own_value> (source antivirus.profile.name)"
+        application_list: "<your_own_value> (source application.list.name)"
+        av_profile: "<your_own_value> (source antivirus.profile.name)"
         comments: "<your_own_value>"
-        custom-log-fields:
+        custom_log_fields:
          -
-            field-id: "<your_own_value> (source log.custom-field.id)"
+            field_id: "<your_own_value> (source log.custom-field.id)"
         devices:
          -
             name: "default_name_16 (source user.device.alias user.device-group.name user.device-category.name)"
-        diffserv-forward: "enable"
-        diffserv-reverse: "enable"
-        diffservcode-forward: "<your_own_value>"
-        diffservcode-rev: "<your_own_value>"
-        dlp-sensor: "<your_own_value> (source dlp.sensor.name)"
-        dscp-match: "enable"
-        dscp-negate: "enable"
-        dscp-value: "<your_own_value>"
+        diffserv_forward: "enable"
+        diffserv_reverse: "enable"
+        diffservcode_forward: "<your_own_value>"
+        diffservcode_rev: "<your_own_value>"
+        dlp_sensor: "<your_own_value> (source dlp.sensor.name)"
+        dscp_match: "enable"
+        dscp_negate: "enable"
+        dscp_value: "<your_own_value>"
         dsri: "enable"
         dstaddr:
          -
             name: "default_name_27 (source firewall.address6.name firewall.addrgrp6.name firewall.vip6.name firewall.vipgrp6.name)"
-        dstaddr-negate: "enable"
+        dstaddr_negate: "enable"
         dstintf:
          -
             name: "default_name_30 (source system.interface.name system.zone.name)"
-        firewall-session-dirty: "check-all"
+        firewall_session_dirty: "check-all"
         fixedport: "enable"
-        global-label: "<your_own_value>"
+        global_label: "<your_own_value>"
         groups:
          -
             name: "default_name_35 (source user.group.name)"
-        icap-profile: "<your_own_value> (source icap.profile.name)"
+        icap_profile: "<your_own_value> (source icap.profile.name)"
         inbound: "enable"
         ippool: "enable"
-        ips-sensor: "<your_own_value> (source ips.sensor.name)"
+        ips_sensor: "<your_own_value> (source ips.sensor.name)"
         label: "<your_own_value>"
         logtraffic: "all"
-        logtraffic-start: "enable"
+        logtraffic_start: "enable"
         name: "default_name_43"
         nat: "enable"
         natinbound: "enable"
         natoutbound: "enable"
         outbound: "enable"
-        per-ip-shaper: "<your_own_value> (source firewall.shaper.per-ip-shaper.name)"
+        per_ip_shaper: "<your_own_value> (source firewall.shaper.per-ip-shaper.name)"
         policyid: "49"
         poolname:
          -
             name: "default_name_51 (source firewall.ippool6.name)"
-        profile-group: "<your_own_value> (source firewall.profile-group.name)"
-        profile-protocol-options: "<your_own_value> (source firewall.profile-protocol-options.name)"
-        profile-type: "single"
-        replacemsg-override-group: "<your_own_value> (source system.replacemsg-group.name)"
+        profile_group: "<your_own_value> (source firewall.profile-group.name)"
+        profile_protocol_options: "<your_own_value> (source firewall.profile-protocol-options.name)"
+        profile_type: "single"
+        replacemsg_override_group: "<your_own_value> (source system.replacemsg-group.name)"
         rsso: "enable"
         schedule: "<your_own_value> (source firewall.schedule.onetime.name firewall.schedule.recurring.name firewall.schedule.group.name)"
-        send-deny-packet: "enable"
+        send_deny_packet: "enable"
         service:
          -
             name: "default_name_60 (source firewall.service.custom.name firewall.service.group.name)"
-        service-negate: "enable"
-        session-ttl: "62"
-        spamfilter-profile: "<your_own_value> (source spamfilter.profile.name)"
+        service_negate: "enable"
+        session_ttl: "62"
+        spamfilter_profile: "<your_own_value> (source spamfilter.profile.name)"
         srcaddr:
          -
             name: "default_name_65 (source firewall.address6.name firewall.addrgrp6.name)"
-        srcaddr-negate: "enable"
+        srcaddr_negate: "enable"
         srcintf:
          -
             name: "default_name_68 (source system.zone.name system.interface.name)"
-        ssh-filter-profile: "<your_own_value> (source ssh-filter.profile.name)"
-        ssl-mirror: "enable"
-        ssl-mirror-intf:
+        ssh_filter_profile: "<your_own_value> (source ssh-filter.profile.name)"
+        ssl_mirror: "enable"
+        ssl_mirror_intf:
          -
             name: "default_name_72 (source system.zone.name system.interface.name)"
-        ssl-ssh-profile: "<your_own_value> (source firewall.ssl-ssh-profile.name)"
+        ssl_ssh_profile: "<your_own_value> (source firewall.ssl-ssh-profile.name)"
         status: "enable"
-        tcp-mss-receiver: "75"
-        tcp-mss-sender: "76"
-        tcp-session-without-syn: "all"
-        timeout-send-rst: "enable"
-        traffic-shaper: "<your_own_value> (source firewall.shaper.traffic-shaper.name)"
-        traffic-shaper-reverse: "<your_own_value> (source firewall.shaper.traffic-shaper.name)"
-        url-category:
+        tcp_mss_receiver: "75"
+        tcp_mss_sender: "76"
+        tcp_session_without_syn: "all"
+        timeout_send_rst: "enable"
+        traffic_shaper: "<your_own_value> (source firewall.shaper.traffic-shaper.name)"
+        traffic_shaper_reverse: "<your_own_value> (source firewall.shaper.traffic-shaper.name)"
+        url_category:
          -
             id:  "82"
         users:
          -
             name: "default_name_84 (source user.local.name)"
-        utm-status: "enable"
+        utm_status: "enable"
         uuid: "<your_own_value>"
-        vlan-cos-fwd: "87"
-        vlan-cos-rev: "88"
-        vlan-filter: "<your_own_value>"
-        voip-profile: "<your_own_value> (source voip.profile.name)"
+        vlan_cos_fwd: "87"
+        vlan_cos_rev: "88"
+        vlan_filter: "<your_own_value>"
+        voip_profile: "<your_own_value> (source voip.profile.name)"
         vpntunnel: "<your_own_value> (source vpn.ipsec.phase1.name vpn.ipsec.manualkey.name)"
-        webfilter-profile: "<your_own_value> (source webfilter.profile.name)"
+        webfilter_profile: "<your_own_value> (source webfilter.profile.name)"
 '''
 
 RETURN = '''
@@ -608,7 +708,7 @@ mkey:
   description: Master key (id) used in the last call to FortiGate
   returned: success
   type: str
-  sample: "key1"
+  sample: "id"
 name:
   description: Name of the table used to fulfill the request
   returned: always
@@ -648,14 +748,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -663,35 +765,35 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_firewall_policy6_data(json):
-    option_list = ['action', 'app-category', 'app-group',
-                   'application', 'application-list', 'av-profile',
-                   'comments', 'custom-log-fields', 'devices',
-                   'diffserv-forward', 'diffserv-reverse', 'diffservcode-forward',
-                   'diffservcode-rev', 'dlp-sensor', 'dscp-match',
-                   'dscp-negate', 'dscp-value', 'dsri',
-                   'dstaddr', 'dstaddr-negate', 'dstintf',
-                   'firewall-session-dirty', 'fixedport', 'global-label',
-                   'groups', 'icap-profile', 'inbound',
-                   'ippool', 'ips-sensor', 'label',
-                   'logtraffic', 'logtraffic-start', 'name',
+    option_list = ['action', 'app_category', 'app_group',
+                   'application', 'application_list', 'av_profile',
+                   'comments', 'custom_log_fields', 'devices',
+                   'diffserv_forward', 'diffserv_reverse', 'diffservcode_forward',
+                   'diffservcode_rev', 'dlp_sensor', 'dscp_match',
+                   'dscp_negate', 'dscp_value', 'dsri',
+                   'dstaddr', 'dstaddr_negate', 'dstintf',
+                   'firewall_session_dirty', 'fixedport', 'global_label',
+                   'groups', 'icap_profile', 'inbound',
+                   'ippool', 'ips_sensor', 'label',
+                   'logtraffic', 'logtraffic_start', 'name',
                    'nat', 'natinbound', 'natoutbound',
-                   'outbound', 'per-ip-shaper', 'policyid',
-                   'poolname', 'profile-group', 'profile-protocol-options',
-                   'profile-type', 'replacemsg-override-group', 'rsso',
-                   'schedule', 'send-deny-packet', 'service',
-                   'service-negate', 'session-ttl', 'spamfilter-profile',
-                   'srcaddr', 'srcaddr-negate', 'srcintf',
-                   'ssh-filter-profile', 'ssl-mirror', 'ssl-mirror-intf',
-                   'ssl-ssh-profile', 'status', 'tcp-mss-receiver',
-                   'tcp-mss-sender', 'tcp-session-without-syn', 'timeout-send-rst',
-                   'traffic-shaper', 'traffic-shaper-reverse', 'url-category',
-                   'users', 'utm-status', 'uuid',
-                   'vlan-cos-fwd', 'vlan-cos-rev', 'vlan-filter',
-                   'voip-profile', 'vpntunnel', 'webfilter-profile']
+                   'outbound', 'per_ip_shaper', 'policyid',
+                   'poolname', 'profile_group', 'profile_protocol_options',
+                   'profile_type', 'replacemsg_override_group', 'rsso',
+                   'schedule', 'send_deny_packet', 'service',
+                   'service_negate', 'session_ttl', 'spamfilter_profile',
+                   'srcaddr', 'srcaddr_negate', 'srcintf',
+                   'ssh_filter_profile', 'ssl_mirror', 'ssl_mirror_intf',
+                   'ssl_ssh_profile', 'status', 'tcp_mss_receiver',
+                   'tcp_mss_sender', 'tcp_session_without_syn', 'timeout_send_rst',
+                   'traffic_shaper', 'traffic_shaper_reverse', 'url_category',
+                   'users', 'utm_status', 'uuid',
+                   'vlan_cos_fwd', 'vlan_cos_rev', 'vlan_filter',
+                   'voip_profile', 'vpntunnel', 'webfilter_profile']
     dictionary = {}
 
     for attribute in option_list:
@@ -701,55 +803,73 @@ def filter_firewall_policy6_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def firewall_policy6(data, fos):
     vdom = data['vdom']
+    state = data['state']
     firewall_policy6_data = data['firewall_policy6']
-    filtered_data = filter_firewall_policy6_data(firewall_policy6_data)
-    if firewall_policy6_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_firewall_policy6_data(firewall_policy6_data))
+
+    if state == "present":
         return fos.set('firewall',
                        'policy6',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif firewall_policy6_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('firewall',
                           'policy6',
                           mkey=filtered_data['policyid'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_firewall(data, fos):
-    login(data)
 
-    methodlist = ['firewall_policy6']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['firewall_policy6']:
+        resp = firewall_policy6(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "firewall_policy6": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
                 "action": {"required": False, "type": "str",
                            "choices": ["accept", "deny", "ipsec"]},
-                "app-category": {"required": False, "type": "list",
+                "app_category": {"required": False, "type": "list",
                                  "options": {
                                      "id": {"required": True, "type": "int"}
                                  }},
-                "app-group": {"required": False, "type": "list",
+                "app_group": {"required": False, "type": "list",
                               "options": {
                                   "name": {"required": True, "type": "str"}
                               }},
@@ -757,60 +877,60 @@ def main():
                                 "options": {
                                     "id": {"required": True, "type": "int"}
                                 }},
-                "application-list": {"required": False, "type": "str"},
-                "av-profile": {"required": False, "type": "str"},
+                "application_list": {"required": False, "type": "str"},
+                "av_profile": {"required": False, "type": "str"},
                 "comments": {"required": False, "type": "str"},
-                "custom-log-fields": {"required": False, "type": "list",
+                "custom_log_fields": {"required": False, "type": "list",
                                       "options": {
-                                          "field-id": {"required": True, "type": "str"}
+                                          "field_id": {"required": False, "type": "str"}
                                       }},
                 "devices": {"required": False, "type": "list",
                             "options": {
                                 "name": {"required": True, "type": "str"}
                             }},
-                "diffserv-forward": {"required": False, "type": "str",
+                "diffserv_forward": {"required": False, "type": "str",
                                      "choices": ["enable", "disable"]},
-                "diffserv-reverse": {"required": False, "type": "str",
+                "diffserv_reverse": {"required": False, "type": "str",
                                      "choices": ["enable", "disable"]},
-                "diffservcode-forward": {"required": False, "type": "str"},
-                "diffservcode-rev": {"required": False, "type": "str"},
-                "dlp-sensor": {"required": False, "type": "str"},
-                "dscp-match": {"required": False, "type": "str",
+                "diffservcode_forward": {"required": False, "type": "str"},
+                "diffservcode_rev": {"required": False, "type": "str"},
+                "dlp_sensor": {"required": False, "type": "str"},
+                "dscp_match": {"required": False, "type": "str",
                                "choices": ["enable", "disable"]},
-                "dscp-negate": {"required": False, "type": "str",
+                "dscp_negate": {"required": False, "type": "str",
                                 "choices": ["enable", "disable"]},
-                "dscp-value": {"required": False, "type": "str"},
+                "dscp_value": {"required": False, "type": "str"},
                 "dsri": {"required": False, "type": "str",
                          "choices": ["enable", "disable"]},
                 "dstaddr": {"required": False, "type": "list",
                             "options": {
                                 "name": {"required": True, "type": "str"}
                             }},
-                "dstaddr-negate": {"required": False, "type": "str",
+                "dstaddr_negate": {"required": False, "type": "str",
                                    "choices": ["enable", "disable"]},
                 "dstintf": {"required": False, "type": "list",
                             "options": {
                                 "name": {"required": True, "type": "str"}
                             }},
-                "firewall-session-dirty": {"required": False, "type": "str",
+                "firewall_session_dirty": {"required": False, "type": "str",
                                            "choices": ["check-all", "check-new"]},
                 "fixedport": {"required": False, "type": "str",
                               "choices": ["enable", "disable"]},
-                "global-label": {"required": False, "type": "str"},
+                "global_label": {"required": False, "type": "str"},
                 "groups": {"required": False, "type": "list",
                            "options": {
                                "name": {"required": True, "type": "str"}
                            }},
-                "icap-profile": {"required": False, "type": "str"},
+                "icap_profile": {"required": False, "type": "str"},
                 "inbound": {"required": False, "type": "str",
                             "choices": ["enable", "disable"]},
                 "ippool": {"required": False, "type": "str",
                            "choices": ["enable", "disable"]},
-                "ips-sensor": {"required": False, "type": "str"},
+                "ips_sensor": {"required": False, "type": "str"},
                 "label": {"required": False, "type": "str"},
                 "logtraffic": {"required": False, "type": "str",
                                "choices": ["all", "utm", "disable"]},
-                "logtraffic-start": {"required": False, "type": "str",
+                "logtraffic_start": {"required": False, "type": "str",
                                      "choices": ["enable", "disable"]},
                 "name": {"required": False, "type": "str"},
                 "nat": {"required": False, "type": "str",
@@ -821,59 +941,59 @@ def main():
                                 "choices": ["enable", "disable"]},
                 "outbound": {"required": False, "type": "str",
                              "choices": ["enable", "disable"]},
-                "per-ip-shaper": {"required": False, "type": "str"},
+                "per_ip_shaper": {"required": False, "type": "str"},
                 "policyid": {"required": True, "type": "int"},
                 "poolname": {"required": False, "type": "list",
                              "options": {
                                  "name": {"required": True, "type": "str"}
                              }},
-                "profile-group": {"required": False, "type": "str"},
-                "profile-protocol-options": {"required": False, "type": "str"},
-                "profile-type": {"required": False, "type": "str",
+                "profile_group": {"required": False, "type": "str"},
+                "profile_protocol_options": {"required": False, "type": "str"},
+                "profile_type": {"required": False, "type": "str",
                                  "choices": ["single", "group"]},
-                "replacemsg-override-group": {"required": False, "type": "str"},
+                "replacemsg_override_group": {"required": False, "type": "str"},
                 "rsso": {"required": False, "type": "str",
                          "choices": ["enable", "disable"]},
                 "schedule": {"required": False, "type": "str"},
-                "send-deny-packet": {"required": False, "type": "str",
+                "send_deny_packet": {"required": False, "type": "str",
                                      "choices": ["enable", "disable"]},
                 "service": {"required": False, "type": "list",
                             "options": {
                                 "name": {"required": True, "type": "str"}
                             }},
-                "service-negate": {"required": False, "type": "str",
+                "service_negate": {"required": False, "type": "str",
                                    "choices": ["enable", "disable"]},
-                "session-ttl": {"required": False, "type": "int"},
-                "spamfilter-profile": {"required": False, "type": "str"},
+                "session_ttl": {"required": False, "type": "int"},
+                "spamfilter_profile": {"required": False, "type": "str"},
                 "srcaddr": {"required": False, "type": "list",
                             "options": {
                                 "name": {"required": True, "type": "str"}
                             }},
-                "srcaddr-negate": {"required": False, "type": "str",
+                "srcaddr_negate": {"required": False, "type": "str",
                                    "choices": ["enable", "disable"]},
                 "srcintf": {"required": False, "type": "list",
                             "options": {
                                 "name": {"required": True, "type": "str"}
                             }},
-                "ssh-filter-profile": {"required": False, "type": "str"},
-                "ssl-mirror": {"required": False, "type": "str",
+                "ssh_filter_profile": {"required": False, "type": "str"},
+                "ssl_mirror": {"required": False, "type": "str",
                                "choices": ["enable", "disable"]},
-                "ssl-mirror-intf": {"required": False, "type": "list",
+                "ssl_mirror_intf": {"required": False, "type": "list",
                                     "options": {
                                         "name": {"required": True, "type": "str"}
                                     }},
-                "ssl-ssh-profile": {"required": False, "type": "str"},
+                "ssl_ssh_profile": {"required": False, "type": "str"},
                 "status": {"required": False, "type": "str",
                            "choices": ["enable", "disable"]},
-                "tcp-mss-receiver": {"required": False, "type": "int"},
-                "tcp-mss-sender": {"required": False, "type": "int"},
-                "tcp-session-without-syn": {"required": False, "type": "str",
+                "tcp_mss_receiver": {"required": False, "type": "int"},
+                "tcp_mss_sender": {"required": False, "type": "int"},
+                "tcp_session_without_syn": {"required": False, "type": "str",
                                             "choices": ["all", "data-only", "disable"]},
-                "timeout-send-rst": {"required": False, "type": "str",
+                "timeout_send_rst": {"required": False, "type": "str",
                                      "choices": ["enable", "disable"]},
-                "traffic-shaper": {"required": False, "type": "str"},
-                "traffic-shaper-reverse": {"required": False, "type": "str"},
-                "url-category": {"required": False, "type": "list",
+                "traffic_shaper": {"required": False, "type": "str"},
+                "traffic_shaper_reverse": {"required": False, "type": "str"},
+                "url_category": {"required": False, "type": "list",
                                  "options": {
                                      "id": {"required": True, "type": "int"}
                                  }},
@@ -881,15 +1001,15 @@ def main():
                           "options": {
                               "name": {"required": True, "type": "str"}
                           }},
-                "utm-status": {"required": False, "type": "str",
+                "utm_status": {"required": False, "type": "str",
                                "choices": ["enable", "disable"]},
                 "uuid": {"required": False, "type": "str"},
-                "vlan-cos-fwd": {"required": False, "type": "int"},
-                "vlan-cos-rev": {"required": False, "type": "int"},
-                "vlan-filter": {"required": False, "type": "str"},
-                "voip-profile": {"required": False, "type": "str"},
+                "vlan_cos_fwd": {"required": False, "type": "int"},
+                "vlan_cos_rev": {"required": False, "type": "int"},
+                "vlan_filter": {"required": False, "type": "str"},
+                "voip_profile": {"required": False, "type": "str"},
                 "vpntunnel": {"required": False, "type": "str"},
-                "webfilter-profile": {"required": False, "type": "str"}
+                "webfilter_profile": {"required": False, "type": "str"}
 
             }
         }
@@ -897,15 +1017,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_firewall(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_firewall(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_firewall(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_firewall_policy64.py b/lib/ansible/modules/network/fortios/fortios_firewall_policy64.py
index 2fa602ba31..9cd95b68ed 100644
--- a/lib/ansible/modules/network/fortios/fortios_firewall_policy64.py
+++ b/lib/ansible/modules/network/fortios/fortios_firewall_policy64.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 from __future__ import (absolute_import, division, print_function)
-# Copyright 2018 Fortinet, Inc.
+# Copyright 2019 Fortinet, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_firewall_policy64
 short_description: Configure IPv6 to IPv4 policies in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure firewall feature and policy64 category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify firewall feature and policy64 category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,84 +41,106 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
         type: bool
-        default: false
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
+        type: bool
+        default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     firewall_policy64:
         description:
             - Configure IPv6 to IPv4 policies.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
             action:
                 description:
                     - Policy action.
+                type: str
                 choices:
                     - accept
                     - deny
             comments:
                 description:
                     - Comment.
+                type: str
             dstaddr:
                 description:
                     - Destination address name.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Address name. Source firewall.address.name firewall.addrgrp.name firewall.vip64.name firewall.vipgrp64.name.
                         required: true
+                        type: str
             dstintf:
                 description:
                     - Destination interface name. Source system.interface.name system.zone.name.
+                type: str
             fixedport:
                 description:
                     - Enable/disable policy fixed port.
+                type: str
                 choices:
                     - enable
                     - disable
             ippool:
                 description:
                     - Enable/disable policy64 IP pool.
+                type: str
                 choices:
                     - enable
                     - disable
             logtraffic:
                 description:
                     - Enable/disable policy log traffic.
+                type: str
                 choices:
                     - enable
                     - disable
-            per-ip-shaper:
+            per_ip_shaper:
                 description:
                     - Per-IP traffic shaper. Source firewall.shaper.per-ip-shaper.name.
-            permit-any-host:
+                type: str
+            permit_any_host:
                 description:
                     - Enable/disable permit any host in.
+                type: str
                 choices:
                     - enable
                     - disable
@@ -129,57 +148,72 @@ options:
                 description:
                     - Policy ID.
                 required: true
+                type: int
             poolname:
                 description:
                     - Policy IP pool names.
+                type: list
                 suboptions:
                     name:
                         description:
                             - IP pool name. Source firewall.ippool.name.
                         required: true
+                        type: str
             schedule:
                 description:
                     - Schedule name. Source firewall.schedule.onetime.name firewall.schedule.recurring.name firewall.schedule.group.name.
+                type: str
             service:
                 description:
                     - Service name.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Address name. Source firewall.service.custom.name firewall.service.group.name.
                         required: true
+                        type: str
             srcaddr:
                 description:
                     - Source address name.
+                type: list
                 suboptions:
                     name:
                         description:
                             - Address name. Source firewall.address6.name firewall.addrgrp6.name.
                         required: true
+                        type: str
             srcintf:
                 description:
                     - Source interface name. Source system.zone.name system.interface.name.
+                type: str
             status:
                 description:
                     - Enable/disable policy status.
+                type: str
                 choices:
                     - enable
                     - disable
-            tcp-mss-receiver:
+            tcp_mss_receiver:
                 description:
                     - TCP MSS value of receiver.
-            tcp-mss-sender:
+                type: int
+            tcp_mss_sender:
                 description:
                     - TCP MSS value of sender.
-            traffic-shaper:
+                type: int
+            traffic_shaper:
                 description:
                     - Traffic shaper. Source firewall.shaper.traffic-shaper.name.
-            traffic-shaper-reverse:
+                type: str
+            traffic_shaper_reverse:
                 description:
                     - Reverse traffic shaper. Source firewall.shaper.traffic-shaper.name.
+                type: str
             uuid:
                 description:
                     - Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
+                type: str
 '''
 
 EXAMPLES = '''
@@ -189,6 +223,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure IPv6 to IPv4 policies.
     fortios_firewall_policy64:
@@ -196,8 +231,9 @@ EXAMPLES = '''
       username: "{{ username }}"
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
+      https: "False"
+      state: "present"
       firewall_policy64:
-        state: "present"
         action: "accept"
         comments: "<your_own_value>"
         dstaddr:
@@ -207,8 +243,8 @@ EXAMPLES = '''
         fixedport: "enable"
         ippool: "enable"
         logtraffic: "enable"
-        per-ip-shaper: "<your_own_value> (source firewall.shaper.per-ip-shaper.name)"
-        permit-any-host: "enable"
+        per_ip_shaper: "<your_own_value> (source firewall.shaper.per-ip-shaper.name)"
+        permit_any_host: "enable"
         policyid: "13"
         poolname:
          -
@@ -222,10 +258,10 @@ EXAMPLES = '''
             name: "default_name_20 (source firewall.address6.name firewall.addrgrp6.name)"
         srcintf: "<your_own_value> (source system.zone.name system.interface.name)"
         status: "enable"
-        tcp-mss-receiver: "23"
-        tcp-mss-sender: "24"
-        traffic-shaper: "<your_own_value> (source firewall.shaper.traffic-shaper.name)"
-        traffic-shaper-reverse: "<your_own_value> (source firewall.shaper.traffic-shaper.name)"
+        tcp_mss_receiver: "23"
+        tcp_mss_sender: "24"
+        traffic_shaper: "<your_own_value> (source firewall.shaper.traffic-shaper.name)"
+        traffic_shaper_reverse: "<your_own_value> (source firewall.shaper.traffic-shaper.name)"
         uuid: "<your_own_value>"
 '''
 
@@ -249,7 +285,7 @@ mkey:
   description: Master key (id) used in the last call to FortiGate
   returned: success
   type: str
-  sample: "key1"
+  sample: "id"
 name:
   description: Name of the table used to fulfill the request
   returned: always
@@ -289,14 +325,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -304,17 +342,17 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_firewall_policy64_data(json):
     option_list = ['action', 'comments', 'dstaddr',
                    'dstintf', 'fixedport', 'ippool',
-                   'logtraffic', 'per-ip-shaper', 'permit-any-host',
+                   'logtraffic', 'per_ip_shaper', 'permit_any_host',
                    'policyid', 'poolname', 'schedule',
                    'service', 'srcaddr', 'srcintf',
-                   'status', 'tcp-mss-receiver', 'tcp-mss-sender',
-                   'traffic-shaper', 'traffic-shaper-reverse', 'uuid']
+                   'status', 'tcp_mss_receiver', 'tcp_mss_sender',
+                   'traffic_shaper', 'traffic_shaper_reverse', 'uuid']
     dictionary = {}
 
     for attribute in option_list:
@@ -324,48 +362,66 @@ def filter_firewall_policy64_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def firewall_policy64(data, fos):
     vdom = data['vdom']
+    state = data['state']
     firewall_policy64_data = data['firewall_policy64']
-    filtered_data = filter_firewall_policy64_data(firewall_policy64_data)
-    if firewall_policy64_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_firewall_policy64_data(firewall_policy64_data))
+
+    if state == "present":
         return fos.set('firewall',
                        'policy64',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif firewall_policy64_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('firewall',
                           'policy64',
                           mkey=filtered_data['policyid'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_firewall(data, fos):
-    login(data)
 
-    methodlist = ['firewall_policy64']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['firewall_policy64']:
+        resp = firewall_policy64(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
-        "https": {"required": False, "type": "bool", "default": "False"},
+        "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "firewall_policy64": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
                 "action": {"required": False, "type": "str",
                            "choices": ["accept", "deny"]},
                 "comments": {"required": False, "type": "str"},
@@ -380,8 +436,8 @@ def main():
                            "choices": ["enable", "disable"]},
                 "logtraffic": {"required": False, "type": "str",
                                "choices": ["enable", "disable"]},
-                "per-ip-shaper": {"required": False, "type": "str"},
-                "permit-any-host": {"required": False, "type": "str",
+                "per_ip_shaper": {"required": False, "type": "str"},
+                "permit_any_host": {"required": False, "type": "str",
                                     "choices": ["enable", "disable"]},
                 "policyid": {"required": True, "type": "int"},
                 "poolname": {"required": False, "type": "list",
@@ -400,10 +456,10 @@ def main():
                 "srcintf": {"required": False, "type": "str"},
                 "status": {"required": False, "type": "str",
                            "choices": ["enable", "disable"]},
-                "tcp-mss-receiver": {"required": False, "type": "int"},
-                "tcp-mss-sender": {"required": False, "type": "int"},
-                "traffic-shaper": {"required": False, "type": "str"},
-                "traffic-shaper-reverse": {"required": False, "type": "str"},
+                "tcp_mss_receiver": {"required": False, "type": "int"},
+                "tcp_mss_sender": {"required": False, "type": "int"},
+                "traffic_shaper": {"required": False, "type": "str"},
+                "traffic_shaper_reverse": {"required": False, "type": "str"},
                 "uuid": {"required": False, "type": "str"}
 
             }
@@ -412,15 +468,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_firewall(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_firewall(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_firewall(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_firewall_profile_group.py b/lib/ansible/modules/network/fortios/fortios_firewall_profile_group.py
index 050f06fe2a..12cff04514 100644
--- a/lib/ansible/modules/network/fortios/fortios_firewall_profile_group.py
+++ b/lib/ansible/modules/network/fortios/fortios_firewall_profile_group.py
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_firewall_profile_group
 short_description: Configure profile groups in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure firewall feature and profile_group category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify firewall feature and profile_group category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,83 +41,109 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
+        type: bool
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
         type: bool
         default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     firewall_profile_group:
         description:
             - Configure profile groups.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
-            application-list:
+            application_list:
                 description:
                     - Name of an existing Application list. Source application.list.name.
-            av-profile:
+                type: str
+            av_profile:
                 description:
                     - Name of an existing Antivirus profile. Source antivirus.profile.name.
-            dlp-sensor:
+                type: str
+            dlp_sensor:
                 description:
                     - Name of an existing DLP sensor. Source dlp.sensor.name.
-            dnsfilter-profile:
+                type: str
+            dnsfilter_profile:
                 description:
                     - Name of an existing DNS filter profile. Source dnsfilter.profile.name.
-            icap-profile:
+                type: str
+            icap_profile:
                 description:
                     - Name of an existing ICAP profile. Source icap.profile.name.
-            ips-sensor:
+                type: str
+            ips_sensor:
                 description:
                     - Name of an existing IPS sensor. Source ips.sensor.name.
+                type: str
             name:
                 description:
                     - Profile group name.
                 required: true
-            profile-protocol-options:
+                type: str
+            profile_protocol_options:
                 description:
                     - Name of an existing Protocol options profile. Source firewall.profile-protocol-options.name.
-            spamfilter-profile:
+                type: str
+            spamfilter_profile:
                 description:
                     - Name of an existing Spam filter profile. Source spamfilter.profile.name.
-            ssh-filter-profile:
+                type: str
+            ssh_filter_profile:
                 description:
                     - Name of an existing SSH filter profile. Source ssh-filter.profile.name.
-            ssl-ssh-profile:
+                type: str
+            ssl_ssh_profile:
                 description:
                     - Name of an existing SSL SSH profile. Source firewall.ssl-ssh-profile.name.
-            voip-profile:
+                type: str
+            voip_profile:
                 description:
                     - Name of an existing VoIP profile. Source voip.profile.name.
-            waf-profile:
+                type: str
+            waf_profile:
                 description:
                     - Name of an existing Web application firewall profile. Source waf.profile.name.
-            webfilter-profile:
+                type: str
+            webfilter_profile:
                 description:
                     - Name of an existing Web filter profile. Source webfilter.profile.name.
+                type: str
 '''
 
 EXAMPLES = '''
@@ -130,6 +153,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure profile groups.
     fortios_firewall_profile_group:
@@ -138,22 +162,22 @@ EXAMPLES = '''
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
       https: "False"
+      state: "present"
       firewall_profile_group:
-        state: "present"
-        application-list: "<your_own_value> (source application.list.name)"
-        av-profile: "<your_own_value> (source antivirus.profile.name)"
-        dlp-sensor: "<your_own_value> (source dlp.sensor.name)"
-        dnsfilter-profile: "<your_own_value> (source dnsfilter.profile.name)"
-        icap-profile: "<your_own_value> (source icap.profile.name)"
-        ips-sensor: "<your_own_value> (source ips.sensor.name)"
+        application_list: "<your_own_value> (source application.list.name)"
+        av_profile: "<your_own_value> (source antivirus.profile.name)"
+        dlp_sensor: "<your_own_value> (source dlp.sensor.name)"
+        dnsfilter_profile: "<your_own_value> (source dnsfilter.profile.name)"
+        icap_profile: "<your_own_value> (source icap.profile.name)"
+        ips_sensor: "<your_own_value> (source ips.sensor.name)"
         name: "default_name_9"
-        profile-protocol-options: "<your_own_value> (source firewall.profile-protocol-options.name)"
-        spamfilter-profile: "<your_own_value> (source spamfilter.profile.name)"
-        ssh-filter-profile: "<your_own_value> (source ssh-filter.profile.name)"
-        ssl-ssh-profile: "<your_own_value> (source firewall.ssl-ssh-profile.name)"
-        voip-profile: "<your_own_value> (source voip.profile.name)"
-        waf-profile: "<your_own_value> (source waf.profile.name)"
-        webfilter-profile: "<your_own_value> (source webfilter.profile.name)"
+        profile_protocol_options: "<your_own_value> (source firewall.profile-protocol-options.name)"
+        spamfilter_profile: "<your_own_value> (source spamfilter.profile.name)"
+        ssh_filter_profile: "<your_own_value> (source ssh-filter.profile.name)"
+        ssl_ssh_profile: "<your_own_value> (source firewall.ssl-ssh-profile.name)"
+        voip_profile: "<your_own_value> (source voip.profile.name)"
+        waf_profile: "<your_own_value> (source waf.profile.name)"
+        webfilter_profile: "<your_own_value> (source webfilter.profile.name)"
 '''
 
 RETURN = '''
@@ -216,14 +240,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -231,15 +257,15 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_firewall_profile_group_data(json):
-    option_list = ['application-list', 'av-profile', 'dlp-sensor',
-                   'dnsfilter-profile', 'icap-profile', 'ips-sensor',
-                   'name', 'profile-protocol-options', 'spamfilter-profile',
-                   'ssh-filter-profile', 'ssl-ssh-profile', 'voip-profile',
-                   'waf-profile', 'webfilter-profile']
+    option_list = ['application_list', 'av_profile', 'dlp_sensor',
+                   'dnsfilter_profile', 'icap_profile', 'ips_sensor',
+                   'name', 'profile_protocol_options', 'spamfilter_profile',
+                   'ssh_filter_profile', 'ssl_ssh_profile', 'voip_profile',
+                   'waf_profile', 'webfilter_profile']
     dictionary = {}
 
     for attribute in option_list:
@@ -249,62 +275,80 @@ def filter_firewall_profile_group_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def firewall_profile_group(data, fos):
     vdom = data['vdom']
+    state = data['state']
     firewall_profile_group_data = data['firewall_profile_group']
-    filtered_data = filter_firewall_profile_group_data(firewall_profile_group_data)
-    if firewall_profile_group_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_firewall_profile_group_data(firewall_profile_group_data))
+
+    if state == "present":
         return fos.set('firewall',
                        'profile-group',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif firewall_profile_group_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('firewall',
                           'profile-group',
                           mkey=filtered_data['name'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_firewall(data, fos):
-    login(data)
 
-    methodlist = ['firewall_profile_group']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['firewall_profile_group']:
+        resp = firewall_profile_group(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
         "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "firewall_profile_group": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
-                "application-list": {"required": False, "type": "str"},
-                "av-profile": {"required": False, "type": "str"},
-                "dlp-sensor": {"required": False, "type": "str"},
-                "dnsfilter-profile": {"required": False, "type": "str"},
-                "icap-profile": {"required": False, "type": "str"},
-                "ips-sensor": {"required": False, "type": "str"},
+                "application_list": {"required": False, "type": "str"},
+                "av_profile": {"required": False, "type": "str"},
+                "dlp_sensor": {"required": False, "type": "str"},
+                "dnsfilter_profile": {"required": False, "type": "str"},
+                "icap_profile": {"required": False, "type": "str"},
+                "ips_sensor": {"required": False, "type": "str"},
                 "name": {"required": True, "type": "str"},
-                "profile-protocol-options": {"required": False, "type": "str"},
-                "spamfilter-profile": {"required": False, "type": "str"},
-                "ssh-filter-profile": {"required": False, "type": "str"},
-                "ssl-ssh-profile": {"required": False, "type": "str"},
-                "voip-profile": {"required": False, "type": "str"},
-                "waf-profile": {"required": False, "type": "str"},
-                "webfilter-profile": {"required": False, "type": "str"}
+                "profile_protocol_options": {"required": False, "type": "str"},
+                "spamfilter_profile": {"required": False, "type": "str"},
+                "ssh_filter_profile": {"required": False, "type": "str"},
+                "ssl_ssh_profile": {"required": False, "type": "str"},
+                "voip_profile": {"required": False, "type": "str"},
+                "waf_profile": {"required": False, "type": "str"},
+                "webfilter_profile": {"required": False, "type": "str"}
 
             }
         }
@@ -312,15 +356,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_firewall(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_firewall(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_firewall(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/lib/ansible/modules/network/fortios/fortios_firewall_profile_protocol_options.py b/lib/ansible/modules/network/fortios/fortios_firewall_profile_protocol_options.py
index db77b3de82..ad7d67a1b0 100644
--- a/lib/ansible/modules/network/fortios/fortios_firewall_profile_protocol_options.py
+++ b/lib/ansible/modules/network/fortios/fortios_firewall_profile_protocol_options.py
@@ -14,9 +14,6 @@ from __future__ import (absolute_import, division, print_function)
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-#
-# the lib use python logging can get it if the following is set in your
-# Ansible config.
 
 __metaclass__ = type
 
@@ -29,10 +26,10 @@ DOCUMENTATION = '''
 module: fortios_firewall_profile_protocol_options
 short_description: Configure protocol options in Fortinet's FortiOS and FortiGate.
 description:
-    - This module is able to configure a FortiGate or FortiOS by
-      allowing the user to configure firewall feature and profile_protocol_options category.
-      Examples includes all options and need to be adjusted to datasources before usage.
-      Tested with FOS v6.0.2
+    - This module is able to configure a FortiGate or FortiOS device by allowing the
+      user to set and modify firewall feature and profile_protocol_options category.
+      Examples include all parameters and values need to be adjusted to datasources before usage.
+      Tested with FOS v6.0.5
 version_added: "2.8"
 author:
     - Miguel Angel Munoz (@mamunozgonzalez)
@@ -44,156 +41,195 @@ requirements:
     - fortiosapi>=0.9.8
 options:
     host:
-       description:
-            - FortiOS or FortiGate ip address.
-       required: true
+        description:
+            - FortiOS or FortiGate IP address.
+        type: str
+        required: false
     username:
         description:
             - FortiOS or FortiGate username.
-        required: true
+        type: str
+        required: false
     password:
         description:
             - FortiOS or FortiGate password.
+        type: str
         default: ""
     vdom:
         description:
             - Virtual domain, among those defined previously. A vdom is a
               virtual instance of the FortiGate that can be configured and
               used as a different unit.
+        type: str
         default: root
     https:
         description:
-            - Indicates if the requests towards FortiGate must use HTTPS
-              protocol
+            - Indicates if the requests towards FortiGate must use HTTPS protocol.
+        type: bool
+        default: true
+    ssl_verify:
+        description:
+            - Ensures FortiGate certificate must be verified by a proper CA.
         type: bool
         default: true
+        version_added: 2.9
+    state:
+        description:
+            - Indicates whether to create or remove the object.
+        type: str
+        choices:
+            - present
+            - absent
+        version_added: 2.9
     firewall_profile_protocol_options:
         description:
             - Configure protocol options.
         default: null
+        type: dict
         suboptions:
-            state:
-                description:
-                    - Indicates whether to create or remove the object
-                choices:
-                    - present
-                    - absent
             comment:
                 description:
                     - Optional comments.
+                type: str
             dns:
                 description:
                     - Configure DNS protocol options.
+                type: dict
                 suboptions:
                     ports:
                         description:
                             - Ports to scan for content (1 - 65535, default = 53).
+                        type: int
                     status:
                         description:
                             - Enable/disable the active status of scanning for this protocol.
+                        type: str
                         choices:
                             - enable
                             - disable
             ftp:
                 description:
                     - Configure FTP protocol options.
+                type: dict
                 suboptions:
-                    comfort-amount:
+                    comfort_amount:
                         description:
                             - Amount of data to send in a transmission for client comforting (1 - 10240 bytes, default = 1).
-                    comfort-interval:
+                        type: int
+                    comfort_interval:
                         description:
                             - Period of time between start, or last transmission, and the next client comfort transmission of data (1 - 900 sec, default = 10).
-                    inspect-all:
+                        type: int
+                    inspect_all:
                         description:
                             - Enable/disable the inspection of all ports for the protocol.
+                        type: str
                         choices:
                             - enable
                             - disable
                     options:
                         description:
                             - One or more options that can be applied to the session.
+                        type: str
                         choices:
                             - clientcomfort
                             - oversize
                             - splice
                             - bypass-rest-command
                             - bypass-mode-command
-                    oversize-limit:
+                    oversize_limit:
                         description:
                             - Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
+                        type: int
                     ports:
                         description:
                             - Ports to scan for content (1 - 65535, default = 21).
-                    scan-bzip2:
+                        type: int
+                    scan_bzip2:
                         description:
                             - Enable/disable scanning of BZip2 compressed files.
+                        type: str
                         choices:
                             - enable
                             - disable
                     status:
                         description:
                             - Enable/disable the active status of scanning for this protocol.
+                        type: str
                         choices:
                             - enable
                             - disable
-                    uncompressed-nest-limit:
+                    uncompressed_nest_limit:
                         description:
                             - Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
-                    uncompressed-oversize-limit:
+                        type: int
+                    uncompressed_oversize_limit:
                         description:
                             - Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
+                        type: int
             http:
                 description:
                     - Configure HTTP protocol options.
+                type: dict
                 suboptions:
-                    block-page-status-code:
+                    block_page_status_code:
                         description:
                             - Code number returned for blocked HTTP pages (non-FortiGuard only) (100 - 599, default = 403).
-                    comfort-amount:
+                        type: int
+                    comfort_amount:
                         description:
                             - Amount of data to send in a transmission for client comforting (1 - 10240 bytes, default = 1).
-                    comfort-interval:
+                        type: int
+                    comfort_interval:
                         description:
                             - Period of time between start, or last transmission, and the next client comfort transmission of data (1 - 900 sec, default = 10).
-                    fortinet-bar:
+                        type: int
+                    fortinet_bar:
                         description:
                             - Enable/disable Fortinet bar on HTML content.
+                        type: str
                         choices:
                             - enable
                             - disable
-                    fortinet-bar-port:
+                    fortinet_bar_port:
                         description:
                             - Port for use by Fortinet Bar (1 - 65535, default = 8011).
-                    http-policy:
+                        type: int
+                    http_policy:
                         description:
                             - Enable/disable HTTP policy check.
+                        type: str
                         choices:
                             - disable
                             - enable
-                    inspect-all:
+                    inspect_all:
                         description:
                             - Enable/disable the inspection of all ports for the protocol.
+                        type: str
                         choices:
                             - enable
                             - disable
                     options:
                         description:
                             - One or more options that can be applied to the session.
+                        type: str
                         choices:
                             - clientcomfort
                             - servercomfort
                             - oversize
                             - chunkedbypass
-                    oversize-limit:
+                    oversize_limit:
                         description:
                             - Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
+                        type: int
                     ports:
                         description:
                             - Ports to scan for content (1 - 65535, default = 80).
-                    post-lang:
+                        type: int
+                    post_lang:
                         description:
                             - ID codes for character sets to be used to convert to UTF-8 for banned words and DLP on HTTP posts (maximum of 5 character sets).
+                        type: str
                         choices:
                             - jisx0201
                             - jisx0208
@@ -216,287 +252,349 @@ options:
                             - cp874
                             - cp1252
                             - cp1251
-                    range-block:
+                    range_block:
                         description:
                             - Enable/disable blocking of partial downloads.
+                        type: str
                         choices:
                             - disable
                             - enable
-                    retry-count:
+                    retry_count:
                         description:
                             - Number of attempts to retry HTTP connection (0 - 100, default = 0).
-                    scan-bzip2:
+                        type: int
+                    scan_bzip2:
                         description:
                             - Enable/disable scanning of BZip2 compressed files.
+                        type: str
                         choices:
                             - enable
                             - disable
                     status:
                         description:
                             - Enable/disable the active status of scanning for this protocol.
+                        type: str
                         choices:
                             - enable
                             - disable
-                    streaming-content-bypass:
+                    streaming_content_bypass:
                         description:
                             - Enable/disable bypassing of streaming content from buffering.
+                        type: str
                         choices:
                             - enable
                             - disable
-                    strip-x-forwarded-for:
+                    strip_x_forwarded_for:
                         description:
                             - Enable/disable stripping of HTTP X-Forwarded-For header.
+                        type: str
                         choices:
                             - disable
                             - enable
-                    switching-protocols:
+                    switching_protocols:
                         description:
                             - Bypass from scanning, or block a connection that attempts to switch protocol.
+                        type: str
                         choices:
                             - bypass
                             - block
-                    uncompressed-nest-limit:
+                    uncompressed_nest_limit:
                         description:
                             - Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
-                    uncompressed-oversize-limit:
+                        type: int
+                    uncompressed_oversize_limit:
                         description:
                             - Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
+                        type: int
             imap:
                 description:
                     - Configure IMAP protocol options.
+                type: dict
                 suboptions:
-                    inspect-all:
+                    inspect_all:
                         description:
                             - Enable/disable the inspection of all ports for the protocol.
+                        type: str
                         choices:
                             - enable
                             - disable
                     options:
                         description:
                             - One or more options that can be applied to the session.
+                        type: str
                         choices:
                             - fragmail
                             - oversize
-                    oversize-limit:
+                    oversize_limit:
                         description:
                             - Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
+                        type: int
                     ports:
                         description:
                             - Ports to scan for content (1 - 65535, default = 143).
-                    scan-bzip2:
+                        type: int
+                    scan_bzip2:
                         description:
                             - Enable/disable scanning of BZip2 compressed files.
+                        type: str
                         choices:
                             - enable
                             - disable
                     status:
                         description:
                             - Enable/disable the active status of scanning for this protocol.
+                        type: str
                         choices:
                             - enable
                             - disable
-                    uncompressed-nest-limit:
+                    uncompressed_nest_limit:
                         description:
                             - Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
-                    uncompressed-oversize-limit:
+                        type: int
+                    uncompressed_oversize_limit:
                         description:
                             - Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
-            mail-signature:
+                        type: int
+            mail_signature:
                 description:
                     - Configure Mail signature.
+                type: dict
                 suboptions:
                     signature:
                         description:
                             - Email signature to be added to outgoing email (if the signature contains spaces, enclose with quotation marks).
+                        type: str
                     status:
                         description:
                             - Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate.
+                        type: str
                         choices:
                             - disable
                             - enable
             mapi:
                 description:
                     - Configure MAPI protocol options.
+                type: dict
                 suboptions:
                     options:
                         description:
                             - One or more options that can be applied to the session.
+                        type: str
                         choices:
                             - fragmail
                             - oversize
-                    oversize-limit:
+                    oversize_limit:
                         description:
                             - Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
+                        type: int
                     ports:
                         description:
                             - Ports to scan for content (1 - 65535, default = 135).
-                    scan-bzip2:
+                        type: int
+                    scan_bzip2:
                         description:
                             - Enable/disable scanning of BZip2 compressed files.
+                        type: str
                         choices:
                             - enable
                             - disable
                     status:
                         description:
                             - Enable/disable the active status of scanning for this protocol.
+                        type: str
                         choices:
                             - enable
                             - disable
-                    uncompressed-nest-limit:
+                    uncompressed_nest_limit:
                         description:
                             - Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
-                    uncompressed-oversize-limit:
+                        type: int
+                    uncompressed_oversize_limit:
                         description:
                             - Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
+                        type: int
             name:
                 description:
                     - Name.
                 required: true
+                type: str
             nntp:
                 description:
                     - Configure NNTP protocol options.
+                type: dict
                 suboptions:
-                    inspect-all:
+                    inspect_all:
                         description:
                             - Enable/disable the inspection of all ports for the protocol.
+                        type: str
                         choices:
                             - enable
                             - disable
                     options:
                         description:
                             - One or more options that can be applied to the session.
+                        type: str
                         choices:
                             - oversize
                             - splice
-                    oversize-limit:
+                    oversize_limit:
                         description:
                             - Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
+                        type: int
                     ports:
                         description:
                             - Ports to scan for content (1 - 65535, default = 119).
-                    scan-bzip2:
+                        type: int
+                    scan_bzip2:
                         description:
                             - Enable/disable scanning of BZip2 compressed files.
+                        type: str
                         choices:
                             - enable
                             - disable
                     status:
                         description:
                             - Enable/disable the active status of scanning for this protocol.
+                        type: str
                         choices:
                             - enable
                             - disable
-                    uncompressed-nest-limit:
+                    uncompressed_nest_limit:
                         description:
                             - Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
-                    uncompressed-oversize-limit:
+                        type: int
+                    uncompressed_oversize_limit:
                         description:
                             - Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
-            oversize-log:
+                        type: int
+            oversize_log:
                 description:
                     - Enable/disable logging for antivirus oversize file blocking.
+                type: str
                 choices:
                     - disable
                     - enable
             pop3:
                 description:
                     - Configure POP3 protocol options.
+                type: dict
                 suboptions:
-                    inspect-all:
+                    inspect_all:
                         description:
                             - Enable/disable the inspection of all ports for the protocol.
+                        type: str
                         choices:
                             - enable
                             - disable
                     options:
                         description:
                             - One or more options that can be applied to the session.
+                        type: str
                         choices:
                             - fragmail
                             - oversize
-                    oversize-limit:
+                    oversize_limit:
                         description:
                             - Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
+                        type: int
                     ports:
                         description:
                             - Ports to scan for content (1 - 65535, default = 110).
-                    scan-bzip2:
+                        type: int
+                    scan_bzip2:
                         description:
                             - Enable/disable scanning of BZip2 compressed files.
+                        type: str
                         choices:
                             - enable
                             - disable
                     status:
                         description:
                             - Enable/disable the active status of scanning for this protocol.
+                        type: str
                         choices:
                             - enable
                             - disable
-                    uncompressed-nest-limit:
+                    uncompressed_nest_limit:
                         description:
                             - Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
-                    uncompressed-oversize-limit:
+                        type: int
+                    uncompressed_oversize_limit:
                         description:
                             - Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
-            replacemsg-group:
+                        type: int
+            replacemsg_group:
                 description:
                     - Name of the replacement message group to be used Source system.replacemsg-group.name.
-            rpc-over-http:
+                type: str
+            rpc_over_http:
                 description:
                     - Enable/disable inspection of RPC over HTTP.
+                type: str
                 choices:
                     - enable
                     - disable
             smtp:
                 description:
                     - Configure SMTP protocol options.
+                type: dict
                 suboptions:
-                    inspect-all:
+                    inspect_all:
                         description:
                             - Enable/disable the inspection of all ports for the protocol.
+                        type: str
                         choices:
                             - enable
                             - disable
                     options:
                         description:
                             - One or more options that can be applied to the session.
+                        type: str
                         choices:
                             - fragmail
                             - oversize
                             - splice
-                    oversize-limit:
+                    oversize_limit:
                         description:
                             - Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
+                        type: int
                     ports:
                         description:
                             - Ports to scan for content (1 - 65535, default = 25).
-                    scan-bzip2:
+                        type: int
+                    scan_bzip2:
                         description:
                             - Enable/disable scanning of BZip2 compressed files.
+                        type: str
                         choices:
                             - enable
                             - disable
-                    server-busy:
+                    server_busy:
                         description:
                             - Enable/disable SMTP server busy when server not available.
+                        type: str
                         choices:
                             - enable
                             - disable
                     status:
                         description:
                             - Enable/disable the active status of scanning for this protocol.
+                        type: str
                         choices:
                             - enable
                             - disable
-                    uncompressed-nest-limit:
+                    uncompressed_nest_limit:
                         description:
                             - Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
-                    uncompressed-oversize-limit:
+                        type: int
+                    uncompressed_oversize_limit:
                         description:
                             - Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
-            switching-protocols-log:
+                        type: int
+            switching_protocols_log:
                 description:
                     - Enable/disable logging for HTTP/HTTPS switching protocols.
+                type: str
                 choices:
                     - disable
                     - enable
@@ -509,6 +607,7 @@ EXAMPLES = '''
    username: "admin"
    password: ""
    vdom: "root"
+   ssl_verify: "False"
   tasks:
   - name: Configure protocol options.
     fortios_firewall_profile_protocol_options:
@@ -517,97 +616,97 @@ EXAMPLES = '''
       password: "{{ password }}"
       vdom:  "{{ vdom }}"
       https: "False"
+      state: "present"
       firewall_profile_protocol_options:
-        state: "present"
         comment: "Optional comments."
         dns:
             ports: "5"
             status: "enable"
         ftp:
-            comfort-amount: "8"
-            comfort-interval: "9"
-            inspect-all: "enable"
+            comfort_amount: "8"
+            comfort_interval: "9"
+            inspect_all: "enable"
             options: "clientcomfort"
-            oversize-limit: "12"
+            oversize_limit: "12"
             ports: "13"
-            scan-bzip2: "enable"
+            scan_bzip2: "enable"
             status: "enable"
-            uncompressed-nest-limit: "16"
-            uncompressed-oversize-limit: "17"
+            uncompressed_nest_limit: "16"
+            uncompressed_oversize_limit: "17"
         http:
-            block-page-status-code: "19"
-            comfort-amount: "20"
-            comfort-interval: "21"
-            fortinet-bar: "enable"
-            fortinet-bar-port: "23"
-            http-policy: "disable"
-            inspect-all: "enable"
+            block_page_status_code: "19"
+            comfort_amount: "20"
+            comfort_interval: "21"
+            fortinet_bar: "enable"
+            fortinet_bar_port: "23"
+            http_policy: "disable"
+            inspect_all: "enable"
             options: "clientcomfort"
-            oversize-limit: "27"
+            oversize_limit: "27"
             ports: "28"
-            post-lang: "jisx0201"
-            range-block: "disable"
-            retry-count: "31"
-            scan-bzip2: "enable"
+            post_lang: "jisx0201"
+            range_block: "disable"
+            retry_count: "31"
+            scan_bzip2: "enable"
             status: "enable"
-            streaming-content-bypass: "enable"
-            strip-x-forwarded-for: "disable"
-            switching-protocols: "bypass"
-            uncompressed-nest-limit: "37"
-            uncompressed-oversize-limit: "38"
+            streaming_content_bypass: "enable"
+            strip_x_forwarded_for: "disable"
+            switching_protocols: "bypass"
+            uncompressed_nest_limit: "37"
+            uncompressed_oversize_limit: "38"
         imap:
-            inspect-all: "enable"
+            inspect_all: "enable"
             options: "fragmail"
-            oversize-limit: "42"
+            oversize_limit: "42"
             ports: "43"
-            scan-bzip2: "enable"
+            scan_bzip2: "enable"
             status: "enable"
-            uncompressed-nest-limit: "46"
-            uncompressed-oversize-limit: "47"
-        mail-signature:
+            uncompressed_nest_limit: "46"
+            uncompressed_oversize_limit: "47"
+        mail_signature:
             signature: "<your_own_value>"
             status: "disable"
         mapi:
             options: "fragmail"
-            oversize-limit: "53"
+            oversize_limit: "53"
             ports: "54"
-            scan-bzip2: "enable"
+            scan_bzip2: "enable"
             status: "enable"
-            uncompressed-nest-limit: "57"
-            uncompressed-oversize-limit: "58"
+            uncompressed_nest_limit: "57"
+            uncompressed_oversize_limit: "58"
         name: "default_name_59"
         nntp:
-            inspect-all: "enable"
+            inspect_all: "enable"
             options: "oversize"
-            oversize-limit: "63"
+            oversize_limit: "63"
             ports: "64"
-            scan-bzip2: "enable"
+            scan_bzip2: "enable"
             status: "enable"
-            uncompressed-nest-limit: "67"
-            uncompressed-oversize-limit: "68"
-        oversize-log: "disable"
+            uncompressed_nest_limit: "67"
+            uncompressed_oversize_limit: "68"
+        oversize_log: "disable"
         pop3:
-            inspect-all: "enable"
+            inspect_all: "enable"
             options: "fragmail"
-            oversize-limit: "73"
+            oversize_limit: "73"
             ports: "74"
-            scan-bzip2: "enable"
+            scan_bzip2: "enable"
             status: "enable"
-            uncompressed-nest-limit: "77"
-            uncompressed-oversize-limit: "78"
-        replacemsg-group: "<your_own_value> (source system.replacemsg-group.name)"
-        rpc-over-http: "enable"
+            uncompressed_nest_limit: "77"
+            uncompressed_oversize_limit: "78"
+        replacemsg_group: "<your_own_value> (source system.replacemsg-group.name)"
+        rpc_over_http: "enable"
         smtp:
-            inspect-all: "enable"
+            inspect_all: "enable"
             options: "fragmail"
-            oversize-limit: "84"
+            oversize_limit: "84"
             ports: "85"
-            scan-bzip2: "enable"
-            server-busy: "enable"
+            scan_bzip2: "enable"
+            server_busy: "enable"
             status: "enable"
-            uncompressed-nest-limit: "89"
-            uncompressed-oversize-limit: "90"
-        switching-protocols-log: "disable"
+            uncompressed_nest_limit: "89"
+            uncompressed_oversize_limit: "90"
+        switching_protocols_log: "disable"
 '''
 
 RETURN = '''
@@ -670,14 +769,16 @@ version:
 '''
 
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import Connection
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
 
-fos = None
 
-
-def login(data):
+def login(data, fos):
     host = data['host']
     username = data['username']
     password = data['password']
+    ssl_verify = data['ssl_verify']
 
     fos.debug('on')
     if 'https' in data and not data['https']:
@@ -685,15 +786,15 @@ def login(data):
     else:
         fos.https('on')
 
-    fos.login(host, username, password)
+    fos.login(host, username, password, verify=ssl_verify)
 
 
 def filter_firewall_profile_protocol_options_data(json):
     option_list = ['comment', 'dns', 'ftp',
-                   'http', 'imap', 'mail-signature',
+                   'http', 'imap', 'mail_signature',
                    'mapi', 'name', 'nntp',
-                   'oversize-log', 'pop3', 'replacemsg-group',
-                   'rpc-over-http', 'smtp', 'switching-protocols-log']
+                   'oversize_log', 'pop3', 'replacemsg_group',
+                   'rpc_over_http', 'smtp', 'switching_protocols_log']
     dictionary = {}
 
     for attribute in option_list:
@@ -703,48 +804,66 @@ def filter_firewall_profile_protocol_options_data(json):
     return dictionary
 
 
+def underscore_to_hyphen(data):
+    if isinstance(data, list):
+        for elem in data:
+            elem = underscore_to_hyphen(elem)
+    elif isinstance(data, dict):
+        new_data = {}
+        for k, v in data.items():
+            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
+        data = new_data
+
+    return data
+
+
 def firewall_profile_protocol_options(data, fos):
     vdom = data['vdom']
+    state = data['state']
     firewall_profile_protocol_options_data = data['firewall_profile_protocol_options']
-    filtered_data = filter_firewall_profile_protocol_options_data(firewall_profile_protocol_options_data)
-    if firewall_profile_protocol_options_data['state'] == "present":
+    filtered_data = underscore_to_hyphen(filter_firewall_profile_protocol_options_data(firewall_profile_protocol_options_data))
+
+    if state == "present":
         return fos.set('firewall',
                        'profile-protocol-options',
                        data=filtered_data,
                        vdom=vdom)
 
-    elif firewall_profile_protocol_options_data['state'] == "absent":
+    elif state == "absent":
         return fos.delete('firewall',
                           'profile-protocol-options',
                           mkey=filtered_data['name'],
                           vdom=vdom)
 
 
+def is_successful_status(status):
+    return status['status'] == "success" or \
+        status['http_method'] == "DELETE" and status['http_status'] == 404
+
+
 def fortios_firewall(data, fos):
-    login(data)
 
-    methodlist = ['firewall_profile_protocol_options']
-    for method in methodlist:
-        if data[method]:
-            resp = eval(method)(data, fos)
-            break
+    if data['firewall_profile_protocol_options']:
+        resp = firewall_profile_protocol_options(data, fos)
 
-    fos.logout()
-    return not resp['status'] == "success", resp['status'] == "success", resp
+    return not is_successful_status(resp), \
+        resp['status'] == "success", \
+        resp
 
 
 def main():
     fields = {
-        "host": {"required": True, "type": "str"},
-        "username": {"required": True, "type": "str"},
+        "host": {"required": False, "type": "str"},
+        "username": {"required": False, "type": "str"},
         "password": {"required": False, "type": "str", "no_log": True},
         "vdom": {"required": False, "type": "str", "default": "root"},
         "https": {"required": False, "type": "bool", "default": True},
+        "ssl_verify": {"required": False, "type": "bool", "default": True},
+        "state": {"required": True, "type": "str",
+                  "choices": ["present", "absent"]},
         "firewall_profile_protocol_options": {
-            "required": False, "type": "dict",
+            "required": False, "type": "dict", "default": None,
             "options": {
-                "state": {"required": True, "type": "str",
-                          "choices": ["present", "absent"]},
                 "comment": {"required": False, "type": "str"},
                 "dns": {"required": False, "type": "dict",
                         "options": {
@@ -754,40 +873,40 @@ def main():
                         }},
                 "ftp": {"required": False, "type": "dict",
                         "options": {
-                            "comfort-amount": {"required": False, "type": "int"},
-                            "comfort-interval": {"required": False, "type": "int"},
-                            "inspect-all": {"required": False, "type": "str",
+                            "comfort_amount": {"required": False, "type": "int"},
+                            "comfort_interval": {"required": False, "type": "int"},
+                            "inspect_all": {"required": False, "type": "str",
                                             "choices": ["enable", "disable"]},
                             "options": {"required": False, "type": "str",
                                         "choices": ["clientcomfort", "oversize", "splice",
                                                     "bypass-rest-command", "bypass-mode-command"]},
-                            "oversize-limit": {"required": False, "type": "int"},
+                            "oversize_limit": {"required": False, "type": "int"},
                             "ports": {"required": False, "type": "int"},
-                            "scan-bzip2": {"required": False, "type": "str",
+                            "scan_bzip2": {"required": False, "type": "str",
                                            "choices": ["enable", "disable"]},
                             "status": {"required": False, "type": "str",
                                        "choices": ["enable", "disable"]},
-                            "uncompressed-nest-limit": {"required": False, "type": "int"},
-                            "uncompressed-oversize-limit": {"required": False, "type": "int"}
+                            "uncompressed_nest_limit": {"required": False, "type": "int"},
+                            "uncompressed_oversize_limit": {"required": False, "type": "int"}
                         }},
                 "http": {"required": False, "type": "dict",
                          "options": {
-                             "block-page-status-code": {"required": False, "type": "int"},
-                             "comfort-amount": {"required": False, "type": "int"},
-                             "comfort-interval": {"required": False, "type": "int"},
-                             "fortinet-bar": {"required": False, "type": "str",
+                             "block_page_status_code": {"required": False, "type": "int"},
+                             "comfort_amount": {"required": False, "type": "int"},
+                             "comfort_interval": {"required": False, "type": "int"},
+                             "fortinet_bar": {"required": False, "type": "str",
                                               "choices": ["enable", "disable"]},
-                             "fortinet-bar-port": {"required": False, "type": "int"},
-                             "http-policy": {"required": False, "type": "str",
+                             "fortinet_bar_port": {"required": False, "type": "int"},
+                             "http_policy": {"required": False, "type": "str",
                                              "choices": ["disable", "enable"]},
-                             "inspect-all": {"required": False, "type": "str",
+                             "inspect_all": {"required": False, "type": "str",
                                              "choices": ["enable", "disable"]},
                              "options": {"required": False, "type": "str",
                                          "choices": ["clientcomfort", "servercomfort", "oversize",
                                                      "chunkedbypass"]},
-                             "oversize-limit": {"required": False, "type": "int"},
+                             "oversize_limit": {"required": False, "type": "int"},
                              "ports": {"required": False, "type": "int"},
-                             "post-lang": {"required": False, "type": "str",
+                             "post_lang": {"required": False, "type": "str",
                                            "choices": ["jisx0201", "jisx0208", "jisx0212",
                                                        "gb2312", "ksc5601-ex", "euc-jp",
                                                        "sjis", "iso2022-jp", "iso2022-jp-1",
@@ -795,38 +914,38 @@ def main():
                                                        "hz", "ces-big5", "euc-kr",
                                                        "iso2022-jp-3", "iso8859-1", "tis620",
                                                        "cp874", "cp1252", "cp1251"]},
-                             "range-block": {"required": False, "type": "str",
+                             "range_block": {"required": False, "type": "str",
                                              "choices": ["disable", "enable"]},
-                             "retry-count": {"required": False, "type": "int"},
-                             "scan-bzip2": {"required": False, "type": "str",
+                             "retry_count": {"required": False, "type": "int"},
+                             "scan_bzip2": {"required": False, "type": "str",
                                             "choices": ["enable", "disable"]},
                              "status": {"required": False, "type": "str",
                                         "choices": ["enable", "disable"]},
-                             "streaming-content-bypass": {"required": False, "type": "str",
+                             "streaming_content_bypass": {"required": False, "type": "str",
                                                           "choices": ["enable", "disable"]},
-                             "strip-x-forwarded-for": {"required": False, "type": "str",
+                             "strip_x_forwarded_for": {"required": False, "type": "str",
                                                        "choices": ["disable", "enable"]},
-                             "switching-protocols": {"required": False, "type": "str",
+                             "switching_protocols": {"required": False, "type": "str",
                                                      "choices": ["bypass", "block"]},
-                             "uncompressed-nest-limit": {"required": False, "type": "int"},
-                             "uncompressed-oversize-limit": {"required": False, "type": "int"}
+                             "uncompressed_nest_limit": {"required": False, "type": "int"},
+                             "uncompressed_oversize_limit": {"required": False, "type": "int"}
                          }},
                 "imap": {"required": False, "type": "dict",
                          "options": {
-                             "inspect-all": {"required": False, "type": "str",
+                             "inspect_all": {"required": False, "type": "str",
                                              "choices": ["enable", "disable"]},
                              "options": {"required": False, "type": "str",
                                          "choices": ["fragmail", "oversize"]},
-                             "oversize-limit": {"required": False, "type": "int"},
+                             "oversize_limit": {"required": False, "type": "int"},
                              "ports": {"required": False, "type": "int"},
-                             "scan-bzip2": {"required": False, "type": "str",
+                             "scan_bzip2": {"required": False, "type": "str",
                                             "choices": ["enable", "disable"]},
                              "status": {"required": False, "type": "str",
                                         "choices": ["enable", "disable"]},
-                             "uncompressed-nest-limit": {"required": False, "type": "int"},
-                             "uncompressed-oversize-limit": {"required": False, "type": "int"}
+                             "uncompressed_nest_limit": {"required": False, "type": "int"},
+                             "uncompressed_oversize_limit": {"required": False, "type": "int"}
                          }},
-                "mail-signature": {"required": False, "type": "dict",
+                "mail_signature": {"required": False, "type": "dict",
                                    "options": {
                                        "signature": {"required": False, "type": "str"},
                                        "status": {"required": False, "type": "str",
@@ -836,69 +955,69 @@ def main():
                          "options": {
                              "options": {"required": False, "type": "str",
                                          "choices": ["fragmail", "oversize"]},
-                             "oversize-limit": {"required": False, "type": "int"},
+                             "oversize_limit": {"required": False, "type": "int"},
                              "ports": {"required": False, "type": "int"},
-                             "scan-bzip2": {"required": False, "type": "str",
+                             "scan_bzip2": {"required": False, "type": "str",
                                             "choices": ["enable", "disable"]},
                              "status": {"required": False, "type": "str",
                                         "choices": ["enable", "disable"]},
-                             "uncompressed-nest-limit": {"required": False, "type": "int"},
-                             "uncompressed-oversize-limit": {"required": False, "type": "int"}
+                             "uncompressed_nest_limit": {"required": False, "type": "int"},
+                             "uncompressed_oversize_limit": {"required": False, "type": "int"}
                          }},
                 "name": {"required": True, "type": "str"},
                 "nntp": {"required": False, "type": "dict",
                          "options": {
-                             "inspect-all": {"required": False, "type": "str",
+                             "inspect_all": {"required": False, "type": "str",
                                              "choices": ["enable", "disable"]},
                              "options": {"required": False, "type": "str",
                                          "choices": ["oversize", "splice"]},
-                             "oversize-limit": {"required": False, "type": "int"},
+                             "oversize_limit": {"required": False, "type": "int"},
                              "ports": {"required": False, "type": "int"},
-                             "scan-bzip2": {"required": False, "type": "str",
+                             "scan_bzip2": {"required": False, "type": "str",
                                             "choices": ["enable", "disable"]},
                              "status": {"required": False, "type": "str",
                                         "choices": ["enable", "disable"]},
-                             "uncompressed-nest-limit": {"required": False, "type": "int"},
-                             "uncompressed-oversize-limit": {"required": False, "type": "int"}
+                             "uncompressed_nest_limit": {"required": False, "type": "int"},
+                             "uncompressed_oversize_limit": {"required": False, "type": "int"}
                          }},
-                "oversize-log": {"required": False, "type": "str",
+                "oversize_log": {"required": False, "type": "str",
                                  "choices": ["disable", "enable"]},
                 "pop3": {"required": False, "type": "dict",
                          "options": {
-                             "inspect-all": {"required": False, "type": "str",
+                             "inspect_all": {"required": False, "type": "str",
                                              "choices": ["enable", "disable"]},
                              "options": {"required": False, "type": "str",
                                          "choices": ["fragmail", "oversize"]},
-                             "oversize-limit": {"required": False, "type": "int"},
+                             "oversize_limit": {"required": False, "type": "int"},
                              "ports": {"required": False, "type": "int"},
-                             "scan-bzip2": {"required": False, "type": "str",
+                             "scan_bzip2": {"required": False, "type": "str",
                                             "choices": ["enable", "disable"]},
                              "status": {"required": False, "type": "str",
                                         "choices": ["enable", "disable"]},
-                             "uncompressed-nest-limit": {"required": False, "type": "int"},
-                             "uncompressed-oversize-limit": {"required": False, "type": "int"}
+                             "uncompressed_nest_limit": {"required": False, "type": "int"},
+                             "uncompressed_oversize_limit": {"required": False, "type": "int"}
                          }},
-                "replacemsg-group": {"required": False, "type": "str"},
-                "rpc-over-http": {"required": False, "type": "str",
+                "replacemsg_group": {"required": False, "type": "str"},
+                "rpc_over_http": {"required": False, "type": "str",
                                   "choices": ["enable", "disable"]},
                 "smtp": {"required": False, "type": "dict",
                          "options": {
-                             "inspect-all": {"required": False, "type": "str",
+                             "inspect_all": {"required": False, "type": "str",
                                              "choices": ["enable", "disable"]},
                              "options": {"required": False, "type": "str",
                                          "choices": ["fragmail", "oversize", "splice"]},
-                             "oversize-limit": {"required": False, "type": "int"},
+                             "oversize_limit": {"required": False, "type": "int"},
                              "ports": {"required": False, "type": "int"},
-                             "scan-bzip2": {"required": False, "type": "str",
+                             "scan_bzip2": {"required": False, "type": "str",
                                             "choices": ["enable", "disable"]},
-                             "server-busy": {"required": False, "type": "str",
+                             "server_busy": {"required": False, "type": "str",
                                              "choices": ["enable", "disable"]},
                              "status": {"required": False, "type": "str",
                                         "choices": ["enable", "disable"]},
-                             "uncompressed-nest-limit": {"required": False, "type": "int"},
-                             "uncompressed-oversize-limit": {"required": False, "type": "int"}
+                             "uncompressed_nest_limit": {"required": False, "type": "int"},
+                             "uncompressed_oversize_limit": {"required": False, "type": "int"}
                          }},
-                "switching-protocols-log": {"required": False, "type": "str",
+                "switching_protocols_log": {"required": False, "type": "str",
                                             "choices": ["disable", "enable"]}
 
             }
@@ -907,15 +1026,30 @@ def main():
 
     module = AnsibleModule(argument_spec=fields,
                            supports_check_mode=False)
-    try:
-        from fortiosapi import FortiOSAPI
-    except ImportError:
-        module.fail_json(msg="fortiosapi module is required")
 
-    global fos
-    fos = FortiOSAPI()
+    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
+                  'username' in module.params and module.params['username'] is not None and \
+                  'password' in module.params and module.params['password'] is not None
+
+    if not legacy_mode:
+        if module._socket_path:
+            connection = Connection(module._socket_path)
+            fos = FortiOSHandler(connection)
+
+            is_error, has_changed, result = fortios_firewall(module.params, fos)
+        else:
+            module.fail_json(**FAIL_SOCKET_MSG)
+    else:
+        try:
+            from fortiosapi import FortiOSAPI
+        except ImportError:
+            module.fail_json(msg="fortiosapi module is required")
+
+        fos = FortiOSAPI()
 
-    is_error, has_changed, result = fortios_firewall(module.params, fos)
+        login(module.params, fos)
+        is_error, has_changed, result = fortios_firewall(module.params, fos)
+        fos.logout()
 
     if not is_error:
         module.exit_json(changed=has_changed, meta=result)
diff --git a/test/sanity/ignore.txt b/test/sanity/ignore.txt
index f911b4e0a5..c8e2dd325a 100644
--- a/test/sanity/ignore.txt
+++ b/test/sanity/ignore.txt
@@ -3693,42 +3693,7 @@ lib/ansible/modules/network/fortios/fortios_antivirus_quarantine.py validate-mod
 lib/ansible/modules/network/fortios/fortios_config.py validate-modules:E337
 lib/ansible/modules/network/fortios/fortios_firewall_DoS_policy.py validate-modules:E336
 lib/ansible/modules/network/fortios/fortios_firewall_DoS_policy6.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_firewall_internet_service_group.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_firewall_ip_translation.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_firewall_ip_translation.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_firewall_ipmacbinding_setting.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_firewall_ipmacbinding_table.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_firewall_ipmacbinding_table.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_firewall_ippool.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_firewall_ippool.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_firewall_ippool6.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_firewall_ipv6_eh_filter.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_firewall_ipv6_eh_filter.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_firewall_ldb_monitor.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_firewall_ldb_monitor.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_firewall_local_in_policy.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_firewall_local_in_policy.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_firewall_local_in_policy6.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_firewall_multicast_address.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_firewall_multicast_address.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_firewall_multicast_address6.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_firewall_multicast_policy.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_firewall_multicast_policy.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_firewall_multicast_policy6.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_firewall_multicast_policy6.py validate-modules:E337
 lib/ansible/modules/network/fortios/fortios_firewall_policy.py validate-modules:E326
-lib/ansible/modules/network/fortios/fortios_firewall_policy.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_firewall_policy.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_firewall_policy46.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_firewall_policy46.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_firewall_policy6.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_firewall_policy6.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_firewall_policy64.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_firewall_policy64.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_firewall_profile_group.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_firewall_profile_group.py validate-modules:E337
-lib/ansible/modules/network/fortios/fortios_firewall_profile_protocol_options.py validate-modules:E336
-lib/ansible/modules/network/fortios/fortios_firewall_profile_protocol_options.py validate-modules:E337
 lib/ansible/modules/network/fortios/fortios_firewall_proxy_address.py validate-modules:E336
 lib/ansible/modules/network/fortios/fortios_firewall_proxy_address.py validate-modules:E337
 lib/ansible/modules/network/fortios/fortios_firewall_proxy_addrgrp.py validate-modules:E337
diff --git a/test/units/modules/network/fortios/test_fortios_firewall_internet_service_group.py b/test/units/modules/network/fortios/test_fortios_firewall_internet_service_group.py
new file mode 100644
index 0000000000..897cf1d891
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_firewall_internet_service_group.py
@@ -0,0 +1,209 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_firewall_internet_service_group
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_firewall_internet_service_group.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_firewall_internet_service_group_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_internet_service_group': {
+            'comment': 'Comment.',
+            'name': 'default_name_4'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_internet_service_group.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'comment': 'Comment.',
+        'name': 'default_name_4'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'internet-service-group', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_internet_service_group_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_internet_service_group': {
+            'comment': 'Comment.',
+            'name': 'default_name_4'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_internet_service_group.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'comment': 'Comment.',
+        'name': 'default_name_4'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'internet-service-group', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_internet_service_group_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_internet_service_group': {
+            'comment': 'Comment.',
+            'name': 'default_name_4'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_internet_service_group.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'internet-service-group', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_internet_service_group_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_internet_service_group': {
+            'comment': 'Comment.',
+            'name': 'default_name_4'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_internet_service_group.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'internet-service-group', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_internet_service_group_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_internet_service_group': {
+            'comment': 'Comment.',
+            'name': 'default_name_4'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_internet_service_group.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'comment': 'Comment.',
+        'name': 'default_name_4'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'internet-service-group', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_firewall_internet_service_group_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_internet_service_group': {
+            'random_attribute_not_valid': 'tag',
+            'comment': 'Comment.',
+            'name': 'default_name_4'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_internet_service_group.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'comment': 'Comment.',
+        'name': 'default_name_4'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'internet-service-group', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_firewall_ip_translation.py b/test/units/modules/network/fortios/test_fortios_firewall_ip_translation.py
new file mode 100644
index 0000000000..66feef8714
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_firewall_ip_translation.py
@@ -0,0 +1,239 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_firewall_ip_translation
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_firewall_ip_translation.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_firewall_ip_translation_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ip_translation': {
+            'endip': 'test_value_3',
+            'map_startip': 'test_value_4',
+            'startip': 'test_value_5',
+            'transid': '6',
+            'type': 'SCTP'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ip_translation.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'endip': 'test_value_3',
+        'map-startip': 'test_value_4',
+        'startip': 'test_value_5',
+        'transid': '6',
+        'type': 'SCTP'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'ip-translation', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_ip_translation_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ip_translation': {
+            'endip': 'test_value_3',
+            'map_startip': 'test_value_4',
+            'startip': 'test_value_5',
+            'transid': '6',
+            'type': 'SCTP'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ip_translation.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'endip': 'test_value_3',
+        'map-startip': 'test_value_4',
+        'startip': 'test_value_5',
+        'transid': '6',
+        'type': 'SCTP'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'ip-translation', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_ip_translation_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_ip_translation': {
+            'endip': 'test_value_3',
+            'map_startip': 'test_value_4',
+            'startip': 'test_value_5',
+            'transid': '6',
+            'type': 'SCTP'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ip_translation.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'ip-translation', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_ip_translation_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_ip_translation': {
+            'endip': 'test_value_3',
+            'map_startip': 'test_value_4',
+            'startip': 'test_value_5',
+            'transid': '6',
+            'type': 'SCTP'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ip_translation.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'ip-translation', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_ip_translation_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ip_translation': {
+            'endip': 'test_value_3',
+            'map_startip': 'test_value_4',
+            'startip': 'test_value_5',
+            'transid': '6',
+            'type': 'SCTP'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ip_translation.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'endip': 'test_value_3',
+        'map-startip': 'test_value_4',
+        'startip': 'test_value_5',
+        'transid': '6',
+        'type': 'SCTP'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'ip-translation', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_firewall_ip_translation_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ip_translation': {
+            'random_attribute_not_valid': 'tag',
+            'endip': 'test_value_3',
+            'map_startip': 'test_value_4',
+            'startip': 'test_value_5',
+            'transid': '6',
+            'type': 'SCTP'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ip_translation.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'endip': 'test_value_3',
+        'map-startip': 'test_value_4',
+        'startip': 'test_value_5',
+        'transid': '6',
+        'type': 'SCTP'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'ip-translation', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_firewall_ipmacbinding_setting.py b/test/units/modules/network/fortios/test_fortios_firewall_ipmacbinding_setting.py
new file mode 100644
index 0000000000..c5b759a1d7
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_firewall_ipmacbinding_setting.py
@@ -0,0 +1,167 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_firewall_ipmacbinding_setting
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_firewall_ipmacbinding_setting.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_firewall_ipmacbinding_setting_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ipmacbinding_setting': {
+            'bindthroughfw': 'enable',
+            'bindtofw': 'enable',
+            'undefinedhost': 'allow'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ipmacbinding_setting.fortios_firewall_ipmacbinding(input_data, fos_instance)
+
+    expected_data = {
+        'bindthroughfw': 'enable',
+        'bindtofw': 'enable',
+        'undefinedhost': 'allow'
+    }
+
+    set_method_mock.assert_called_with('firewall.ipmacbinding', 'setting', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_ipmacbinding_setting_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ipmacbinding_setting': {
+            'bindthroughfw': 'enable',
+            'bindtofw': 'enable',
+            'undefinedhost': 'allow'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ipmacbinding_setting.fortios_firewall_ipmacbinding(input_data, fos_instance)
+
+    expected_data = {
+        'bindthroughfw': 'enable',
+        'bindtofw': 'enable',
+        'undefinedhost': 'allow'
+    }
+
+    set_method_mock.assert_called_with('firewall.ipmacbinding', 'setting', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_ipmacbinding_setting_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ipmacbinding_setting': {
+            'bindthroughfw': 'enable',
+            'bindtofw': 'enable',
+            'undefinedhost': 'allow'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ipmacbinding_setting.fortios_firewall_ipmacbinding(input_data, fos_instance)
+
+    expected_data = {
+        'bindthroughfw': 'enable',
+        'bindtofw': 'enable',
+        'undefinedhost': 'allow'
+    }
+
+    set_method_mock.assert_called_with('firewall.ipmacbinding', 'setting', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_firewall_ipmacbinding_setting_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ipmacbinding_setting': {
+            'random_attribute_not_valid': 'tag',
+            'bindthroughfw': 'enable',
+            'bindtofw': 'enable',
+            'undefinedhost': 'allow'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ipmacbinding_setting.fortios_firewall_ipmacbinding(input_data, fos_instance)
+
+    expected_data = {
+        'bindthroughfw': 'enable',
+        'bindtofw': 'enable',
+        'undefinedhost': 'allow'
+    }
+
+    set_method_mock.assert_called_with('firewall.ipmacbinding', 'setting', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_firewall_ipmacbinding_table.py b/test/units/modules/network/fortios/test_fortios_firewall_ipmacbinding_table.py
new file mode 100644
index 0000000000..42ccc7ea22
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_firewall_ipmacbinding_table.py
@@ -0,0 +1,239 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_firewall_ipmacbinding_table
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_firewall_ipmacbinding_table.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_firewall_ipmacbinding_table_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ipmacbinding_table': {
+            'ip': 'test_value_3',
+            'mac': 'test_value_4',
+            'name': 'default_name_5',
+            'seq_num': '6',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ipmacbinding_table.fortios_firewall_ipmacbinding(input_data, fos_instance)
+
+    expected_data = {
+        'ip': 'test_value_3',
+        'mac': 'test_value_4',
+        'name': 'default_name_5',
+                'seq-num': '6',
+                'status': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall.ipmacbinding', 'table', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_ipmacbinding_table_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ipmacbinding_table': {
+            'ip': 'test_value_3',
+            'mac': 'test_value_4',
+            'name': 'default_name_5',
+            'seq_num': '6',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ipmacbinding_table.fortios_firewall_ipmacbinding(input_data, fos_instance)
+
+    expected_data = {
+        'ip': 'test_value_3',
+        'mac': 'test_value_4',
+        'name': 'default_name_5',
+                'seq-num': '6',
+                'status': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall.ipmacbinding', 'table', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_ipmacbinding_table_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_ipmacbinding_table': {
+            'ip': 'test_value_3',
+            'mac': 'test_value_4',
+            'name': 'default_name_5',
+            'seq_num': '6',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ipmacbinding_table.fortios_firewall_ipmacbinding(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall.ipmacbinding', 'table', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_ipmacbinding_table_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_ipmacbinding_table': {
+            'ip': 'test_value_3',
+            'mac': 'test_value_4',
+            'name': 'default_name_5',
+            'seq_num': '6',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ipmacbinding_table.fortios_firewall_ipmacbinding(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall.ipmacbinding', 'table', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_ipmacbinding_table_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ipmacbinding_table': {
+            'ip': 'test_value_3',
+            'mac': 'test_value_4',
+            'name': 'default_name_5',
+            'seq_num': '6',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ipmacbinding_table.fortios_firewall_ipmacbinding(input_data, fos_instance)
+
+    expected_data = {
+        'ip': 'test_value_3',
+        'mac': 'test_value_4',
+        'name': 'default_name_5',
+                'seq-num': '6',
+                'status': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall.ipmacbinding', 'table', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_firewall_ipmacbinding_table_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ipmacbinding_table': {
+            'random_attribute_not_valid': 'tag',
+            'ip': 'test_value_3',
+            'mac': 'test_value_4',
+            'name': 'default_name_5',
+            'seq_num': '6',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ipmacbinding_table.fortios_firewall_ipmacbinding(input_data, fos_instance)
+
+    expected_data = {
+        'ip': 'test_value_3',
+        'mac': 'test_value_4',
+        'name': 'default_name_5',
+                'seq-num': '6',
+                'status': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall.ipmacbinding', 'table', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_firewall_ippool.py b/test/units/modules/network/fortios/test_fortios_firewall_ippool.py
new file mode 100644
index 0000000000..607ba97222
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_firewall_ippool.py
@@ -0,0 +1,329 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_firewall_ippool
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_firewall_ippool.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_firewall_ippool_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ippool': {
+            'arp_intf': 'test_value_3',
+            'arp_reply': 'disable',
+            'associated_interface': 'test_value_5',
+            'block_size': '6',
+            'comments': 'test_value_7',
+            'endip': 'test_value_8',
+            'name': 'default_name_9',
+            'num_blocks_per_user': '10',
+            'pba_timeout': '11',
+            'permit_any_host': 'disable',
+            'source_endip': 'test_value_13',
+            'source_startip': 'test_value_14',
+            'startip': 'test_value_15',
+            'type': 'overload'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ippool.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'arp-intf': 'test_value_3',
+        'arp-reply': 'disable',
+        'associated-interface': 'test_value_5',
+        'block-size': '6',
+        'comments': 'test_value_7',
+        'endip': 'test_value_8',
+        'name': 'default_name_9',
+                'num-blocks-per-user': '10',
+                'pba-timeout': '11',
+                'permit-any-host': 'disable',
+                'source-endip': 'test_value_13',
+                'source-startip': 'test_value_14',
+                'startip': 'test_value_15',
+                'type': 'overload'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'ippool', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_ippool_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ippool': {
+            'arp_intf': 'test_value_3',
+            'arp_reply': 'disable',
+            'associated_interface': 'test_value_5',
+            'block_size': '6',
+            'comments': 'test_value_7',
+            'endip': 'test_value_8',
+            'name': 'default_name_9',
+            'num_blocks_per_user': '10',
+            'pba_timeout': '11',
+            'permit_any_host': 'disable',
+            'source_endip': 'test_value_13',
+            'source_startip': 'test_value_14',
+            'startip': 'test_value_15',
+            'type': 'overload'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ippool.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'arp-intf': 'test_value_3',
+        'arp-reply': 'disable',
+        'associated-interface': 'test_value_5',
+        'block-size': '6',
+        'comments': 'test_value_7',
+        'endip': 'test_value_8',
+        'name': 'default_name_9',
+                'num-blocks-per-user': '10',
+                'pba-timeout': '11',
+                'permit-any-host': 'disable',
+                'source-endip': 'test_value_13',
+                'source-startip': 'test_value_14',
+                'startip': 'test_value_15',
+                'type': 'overload'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'ippool', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_ippool_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_ippool': {
+            'arp_intf': 'test_value_3',
+            'arp_reply': 'disable',
+            'associated_interface': 'test_value_5',
+            'block_size': '6',
+            'comments': 'test_value_7',
+            'endip': 'test_value_8',
+            'name': 'default_name_9',
+            'num_blocks_per_user': '10',
+            'pba_timeout': '11',
+            'permit_any_host': 'disable',
+            'source_endip': 'test_value_13',
+            'source_startip': 'test_value_14',
+            'startip': 'test_value_15',
+            'type': 'overload'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ippool.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'ippool', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_ippool_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_ippool': {
+            'arp_intf': 'test_value_3',
+            'arp_reply': 'disable',
+            'associated_interface': 'test_value_5',
+            'block_size': '6',
+            'comments': 'test_value_7',
+            'endip': 'test_value_8',
+            'name': 'default_name_9',
+            'num_blocks_per_user': '10',
+            'pba_timeout': '11',
+            'permit_any_host': 'disable',
+            'source_endip': 'test_value_13',
+            'source_startip': 'test_value_14',
+            'startip': 'test_value_15',
+            'type': 'overload'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ippool.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'ippool', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_ippool_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ippool': {
+            'arp_intf': 'test_value_3',
+            'arp_reply': 'disable',
+            'associated_interface': 'test_value_5',
+            'block_size': '6',
+            'comments': 'test_value_7',
+            'endip': 'test_value_8',
+            'name': 'default_name_9',
+            'num_blocks_per_user': '10',
+            'pba_timeout': '11',
+            'permit_any_host': 'disable',
+            'source_endip': 'test_value_13',
+            'source_startip': 'test_value_14',
+            'startip': 'test_value_15',
+            'type': 'overload'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ippool.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'arp-intf': 'test_value_3',
+        'arp-reply': 'disable',
+        'associated-interface': 'test_value_5',
+        'block-size': '6',
+        'comments': 'test_value_7',
+        'endip': 'test_value_8',
+        'name': 'default_name_9',
+                'num-blocks-per-user': '10',
+                'pba-timeout': '11',
+                'permit-any-host': 'disable',
+                'source-endip': 'test_value_13',
+                'source-startip': 'test_value_14',
+                'startip': 'test_value_15',
+                'type': 'overload'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'ippool', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_firewall_ippool_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ippool': {
+            'random_attribute_not_valid': 'tag',
+            'arp_intf': 'test_value_3',
+            'arp_reply': 'disable',
+            'associated_interface': 'test_value_5',
+            'block_size': '6',
+            'comments': 'test_value_7',
+            'endip': 'test_value_8',
+            'name': 'default_name_9',
+            'num_blocks_per_user': '10',
+            'pba_timeout': '11',
+            'permit_any_host': 'disable',
+            'source_endip': 'test_value_13',
+            'source_startip': 'test_value_14',
+            'startip': 'test_value_15',
+            'type': 'overload'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ippool.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'arp-intf': 'test_value_3',
+        'arp-reply': 'disable',
+        'associated-interface': 'test_value_5',
+        'block-size': '6',
+        'comments': 'test_value_7',
+        'endip': 'test_value_8',
+        'name': 'default_name_9',
+                'num-blocks-per-user': '10',
+                'pba-timeout': '11',
+                'permit-any-host': 'disable',
+                'source-endip': 'test_value_13',
+                'source-startip': 'test_value_14',
+                'startip': 'test_value_15',
+                'type': 'overload'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'ippool', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_firewall_ippool6.py b/test/units/modules/network/fortios/test_fortios_firewall_ippool6.py
new file mode 100644
index 0000000000..69158059f7
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_firewall_ippool6.py
@@ -0,0 +1,229 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_firewall_ippool6
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_firewall_ippool6.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_firewall_ippool6_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ippool6': {
+            'comments': 'test_value_3',
+            'endip': 'test_value_4',
+            'name': 'default_name_5',
+            'startip': 'test_value_6'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ippool6.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'comments': 'test_value_3',
+        'endip': 'test_value_4',
+        'name': 'default_name_5',
+                'startip': 'test_value_6'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'ippool6', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_ippool6_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ippool6': {
+            'comments': 'test_value_3',
+            'endip': 'test_value_4',
+            'name': 'default_name_5',
+            'startip': 'test_value_6'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ippool6.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'comments': 'test_value_3',
+        'endip': 'test_value_4',
+        'name': 'default_name_5',
+                'startip': 'test_value_6'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'ippool6', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_ippool6_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_ippool6': {
+            'comments': 'test_value_3',
+            'endip': 'test_value_4',
+            'name': 'default_name_5',
+            'startip': 'test_value_6'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ippool6.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'ippool6', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_ippool6_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_ippool6': {
+            'comments': 'test_value_3',
+            'endip': 'test_value_4',
+            'name': 'default_name_5',
+            'startip': 'test_value_6'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ippool6.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'ippool6', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_ippool6_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ippool6': {
+            'comments': 'test_value_3',
+            'endip': 'test_value_4',
+            'name': 'default_name_5',
+            'startip': 'test_value_6'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ippool6.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'comments': 'test_value_3',
+        'endip': 'test_value_4',
+        'name': 'default_name_5',
+                'startip': 'test_value_6'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'ippool6', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_firewall_ippool6_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ippool6': {
+            'random_attribute_not_valid': 'tag',
+            'comments': 'test_value_3',
+            'endip': 'test_value_4',
+            'name': 'default_name_5',
+            'startip': 'test_value_6'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ippool6.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'comments': 'test_value_3',
+        'endip': 'test_value_4',
+        'name': 'default_name_5',
+                'startip': 'test_value_6'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'ippool6', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_firewall_ipv6_eh_filter.py b/test/units/modules/network/fortios/test_fortios_firewall_ipv6_eh_filter.py
new file mode 100644
index 0000000000..f851a789ba
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_firewall_ipv6_eh_filter.py
@@ -0,0 +1,207 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_firewall_ipv6_eh_filter
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_firewall_ipv6_eh_filter.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_firewall_ipv6_eh_filter_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ipv6_eh_filter': {
+            'auth': 'enable',
+            'dest_opt': 'enable',
+            'fragment': 'enable',
+            'hdopt_type': '6',
+            'hop_opt': 'enable',
+            'no_next': 'enable',
+            'routing': 'enable',
+            'routing_type': '10'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ipv6_eh_filter.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'auth': 'enable',
+                'dest-opt': 'enable',
+                'fragment': 'enable',
+                'hdopt-type': '6',
+                'hop-opt': 'enable',
+                'no-next': 'enable',
+                'routing': 'enable',
+                'routing-type': '10'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'ipv6-eh-filter', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_ipv6_eh_filter_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ipv6_eh_filter': {
+            'auth': 'enable',
+            'dest_opt': 'enable',
+            'fragment': 'enable',
+            'hdopt_type': '6',
+            'hop_opt': 'enable',
+            'no_next': 'enable',
+            'routing': 'enable',
+            'routing_type': '10'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ipv6_eh_filter.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'auth': 'enable',
+                'dest-opt': 'enable',
+                'fragment': 'enable',
+                'hdopt-type': '6',
+                'hop-opt': 'enable',
+                'no-next': 'enable',
+                'routing': 'enable',
+                'routing-type': '10'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'ipv6-eh-filter', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_ipv6_eh_filter_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ipv6_eh_filter': {
+            'auth': 'enable',
+            'dest_opt': 'enable',
+            'fragment': 'enable',
+            'hdopt_type': '6',
+            'hop_opt': 'enable',
+            'no_next': 'enable',
+            'routing': 'enable',
+            'routing_type': '10'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ipv6_eh_filter.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'auth': 'enable',
+                'dest-opt': 'enable',
+                'fragment': 'enable',
+                'hdopt-type': '6',
+                'hop-opt': 'enable',
+                'no-next': 'enable',
+                'routing': 'enable',
+                'routing-type': '10'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'ipv6-eh-filter', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_firewall_ipv6_eh_filter_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ipv6_eh_filter': {
+            'random_attribute_not_valid': 'tag',
+            'auth': 'enable',
+            'dest_opt': 'enable',
+            'fragment': 'enable',
+            'hdopt_type': '6',
+            'hop_opt': 'enable',
+            'no_next': 'enable',
+            'routing': 'enable',
+            'routing_type': '10'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ipv6_eh_filter.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'auth': 'enable',
+                'dest-opt': 'enable',
+                'fragment': 'enable',
+                'hdopt-type': '6',
+                'hop-opt': 'enable',
+                'no-next': 'enable',
+                'routing': 'enable',
+                'routing-type': '10'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'ipv6-eh-filter', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_firewall_ldb_monitor.py b/test/units/modules/network/fortios/test_fortios_firewall_ldb_monitor.py
new file mode 100644
index 0000000000..ecd1396ee3
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_firewall_ldb_monitor.py
@@ -0,0 +1,279 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_firewall_ldb_monitor
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_firewall_ldb_monitor.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_firewall_ldb_monitor_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ldb_monitor': {
+            'http_get': 'test_value_3',
+            'http_match': 'test_value_4',
+            'http_max_redirects': '5',
+            'interval': '6',
+            'name': 'default_name_7',
+            'port': '8',
+            'retry': '9',
+            'timeout': '10',
+            'type': 'ping'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ldb_monitor.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'http-get': 'test_value_3',
+        'http-match': 'test_value_4',
+        'http-max-redirects': '5',
+        'interval': '6',
+        'name': 'default_name_7',
+                'port': '8',
+                'retry': '9',
+                'timeout': '10',
+                'type': 'ping'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'ldb-monitor', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_ldb_monitor_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ldb_monitor': {
+            'http_get': 'test_value_3',
+            'http_match': 'test_value_4',
+            'http_max_redirects': '5',
+            'interval': '6',
+            'name': 'default_name_7',
+            'port': '8',
+            'retry': '9',
+            'timeout': '10',
+            'type': 'ping'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ldb_monitor.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'http-get': 'test_value_3',
+        'http-match': 'test_value_4',
+        'http-max-redirects': '5',
+        'interval': '6',
+        'name': 'default_name_7',
+                'port': '8',
+                'retry': '9',
+                'timeout': '10',
+                'type': 'ping'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'ldb-monitor', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_ldb_monitor_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_ldb_monitor': {
+            'http_get': 'test_value_3',
+            'http_match': 'test_value_4',
+            'http_max_redirects': '5',
+            'interval': '6',
+            'name': 'default_name_7',
+            'port': '8',
+            'retry': '9',
+            'timeout': '10',
+            'type': 'ping'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ldb_monitor.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'ldb-monitor', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_ldb_monitor_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_ldb_monitor': {
+            'http_get': 'test_value_3',
+            'http_match': 'test_value_4',
+            'http_max_redirects': '5',
+            'interval': '6',
+            'name': 'default_name_7',
+            'port': '8',
+            'retry': '9',
+            'timeout': '10',
+            'type': 'ping'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ldb_monitor.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'ldb-monitor', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_ldb_monitor_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ldb_monitor': {
+            'http_get': 'test_value_3',
+            'http_match': 'test_value_4',
+            'http_max_redirects': '5',
+            'interval': '6',
+            'name': 'default_name_7',
+            'port': '8',
+            'retry': '9',
+            'timeout': '10',
+            'type': 'ping'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ldb_monitor.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'http-get': 'test_value_3',
+        'http-match': 'test_value_4',
+        'http-max-redirects': '5',
+        'interval': '6',
+        'name': 'default_name_7',
+                'port': '8',
+                'retry': '9',
+                'timeout': '10',
+                'type': 'ping'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'ldb-monitor', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_firewall_ldb_monitor_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_ldb_monitor': {
+            'random_attribute_not_valid': 'tag',
+            'http_get': 'test_value_3',
+            'http_match': 'test_value_4',
+            'http_max_redirects': '5',
+            'interval': '6',
+            'name': 'default_name_7',
+            'port': '8',
+            'retry': '9',
+            'timeout': '10',
+            'type': 'ping'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_ldb_monitor.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'http-get': 'test_value_3',
+        'http-match': 'test_value_4',
+        'http-max-redirects': '5',
+        'interval': '6',
+        'name': 'default_name_7',
+                'port': '8',
+                'retry': '9',
+                'timeout': '10',
+                'type': 'ping'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'ldb-monitor', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_firewall_local_in_policy.py b/test/units/modules/network/fortios/test_fortios_firewall_local_in_policy.py
new file mode 100644
index 0000000000..12f43ffe6e
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_firewall_local_in_policy.py
@@ -0,0 +1,259 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_firewall_local_in_policy
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_firewall_local_in_policy.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_firewall_local_in_policy_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_local_in_policy': {
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'ha_mgmt_intf_only': 'enable',
+            'intf': 'test_value_6',
+            'policyid': '7',
+            'schedule': 'test_value_8',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_local_in_policy.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'comments': 'test_value_4',
+        'ha-mgmt-intf-only': 'enable',
+        'intf': 'test_value_6',
+                'policyid': '7',
+                'schedule': 'test_value_8',
+                'status': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'local-in-policy', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_local_in_policy_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_local_in_policy': {
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'ha_mgmt_intf_only': 'enable',
+            'intf': 'test_value_6',
+            'policyid': '7',
+            'schedule': 'test_value_8',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_local_in_policy.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'comments': 'test_value_4',
+        'ha-mgmt-intf-only': 'enable',
+        'intf': 'test_value_6',
+                'policyid': '7',
+                'schedule': 'test_value_8',
+                'status': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'local-in-policy', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_local_in_policy_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_local_in_policy': {
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'ha_mgmt_intf_only': 'enable',
+            'intf': 'test_value_6',
+            'policyid': '7',
+            'schedule': 'test_value_8',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_local_in_policy.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'local-in-policy', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_local_in_policy_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_local_in_policy': {
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'ha_mgmt_intf_only': 'enable',
+            'intf': 'test_value_6',
+            'policyid': '7',
+            'schedule': 'test_value_8',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_local_in_policy.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'local-in-policy', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_local_in_policy_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_local_in_policy': {
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'ha_mgmt_intf_only': 'enable',
+            'intf': 'test_value_6',
+            'policyid': '7',
+            'schedule': 'test_value_8',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_local_in_policy.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'comments': 'test_value_4',
+        'ha-mgmt-intf-only': 'enable',
+        'intf': 'test_value_6',
+                'policyid': '7',
+                'schedule': 'test_value_8',
+                'status': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'local-in-policy', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_firewall_local_in_policy_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_local_in_policy': {
+            'random_attribute_not_valid': 'tag',
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'ha_mgmt_intf_only': 'enable',
+            'intf': 'test_value_6',
+            'policyid': '7',
+            'schedule': 'test_value_8',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_local_in_policy.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'comments': 'test_value_4',
+        'ha-mgmt-intf-only': 'enable',
+        'intf': 'test_value_6',
+                'policyid': '7',
+                'schedule': 'test_value_8',
+                'status': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'local-in-policy', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_firewall_local_in_policy6.py b/test/units/modules/network/fortios/test_fortios_firewall_local_in_policy6.py
new file mode 100644
index 0000000000..398ca1d418
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_firewall_local_in_policy6.py
@@ -0,0 +1,249 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_firewall_local_in_policy6
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_firewall_local_in_policy6.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_firewall_local_in_policy6_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_local_in_policy6': {
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'intf': 'test_value_5',
+            'policyid': '6',
+            'schedule': 'test_value_7',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_local_in_policy6.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'comments': 'test_value_4',
+        'intf': 'test_value_5',
+                'policyid': '6',
+                'schedule': 'test_value_7',
+                'status': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'local-in-policy6', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_local_in_policy6_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_local_in_policy6': {
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'intf': 'test_value_5',
+            'policyid': '6',
+            'schedule': 'test_value_7',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_local_in_policy6.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'comments': 'test_value_4',
+        'intf': 'test_value_5',
+                'policyid': '6',
+                'schedule': 'test_value_7',
+                'status': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'local-in-policy6', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_local_in_policy6_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_local_in_policy6': {
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'intf': 'test_value_5',
+            'policyid': '6',
+            'schedule': 'test_value_7',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_local_in_policy6.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'local-in-policy6', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_local_in_policy6_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_local_in_policy6': {
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'intf': 'test_value_5',
+            'policyid': '6',
+            'schedule': 'test_value_7',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_local_in_policy6.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'local-in-policy6', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_local_in_policy6_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_local_in_policy6': {
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'intf': 'test_value_5',
+            'policyid': '6',
+            'schedule': 'test_value_7',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_local_in_policy6.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'comments': 'test_value_4',
+        'intf': 'test_value_5',
+                'policyid': '6',
+                'schedule': 'test_value_7',
+                'status': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'local-in-policy6', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_firewall_local_in_policy6_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_local_in_policy6': {
+            'random_attribute_not_valid': 'tag',
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'intf': 'test_value_5',
+            'policyid': '6',
+            'schedule': 'test_value_7',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_local_in_policy6.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'comments': 'test_value_4',
+        'intf': 'test_value_5',
+                'policyid': '6',
+                'schedule': 'test_value_7',
+                'status': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'local-in-policy6', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_firewall_multicast_address.py b/test/units/modules/network/fortios/test_fortios_firewall_multicast_address.py
new file mode 100644
index 0000000000..eefb547de9
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_firewall_multicast_address.py
@@ -0,0 +1,279 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_firewall_multicast_address
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_firewall_multicast_address.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_firewall_multicast_address_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_multicast_address': {
+            'associated_interface': 'test_value_3',
+            'color': '4',
+            'comment': 'Comment.',
+            'end_ip': 'test_value_6',
+            'name': 'default_name_7',
+            'start_ip': 'test_value_8',
+            'subnet': 'test_value_9',
+            'type': 'multicastrange',
+            'visibility': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_address.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'associated-interface': 'test_value_3',
+        'color': '4',
+        'comment': 'Comment.',
+        'end-ip': 'test_value_6',
+        'name': 'default_name_7',
+                'start-ip': 'test_value_8',
+                'subnet': 'test_value_9',
+                'type': 'multicastrange',
+                'visibility': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'multicast-address', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_multicast_address_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_multicast_address': {
+            'associated_interface': 'test_value_3',
+            'color': '4',
+            'comment': 'Comment.',
+            'end_ip': 'test_value_6',
+            'name': 'default_name_7',
+            'start_ip': 'test_value_8',
+            'subnet': 'test_value_9',
+            'type': 'multicastrange',
+            'visibility': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_address.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'associated-interface': 'test_value_3',
+        'color': '4',
+        'comment': 'Comment.',
+        'end-ip': 'test_value_6',
+        'name': 'default_name_7',
+                'start-ip': 'test_value_8',
+                'subnet': 'test_value_9',
+                'type': 'multicastrange',
+                'visibility': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'multicast-address', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_multicast_address_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_multicast_address': {
+            'associated_interface': 'test_value_3',
+            'color': '4',
+            'comment': 'Comment.',
+            'end_ip': 'test_value_6',
+            'name': 'default_name_7',
+            'start_ip': 'test_value_8',
+            'subnet': 'test_value_9',
+            'type': 'multicastrange',
+            'visibility': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_address.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'multicast-address', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_multicast_address_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_multicast_address': {
+            'associated_interface': 'test_value_3',
+            'color': '4',
+            'comment': 'Comment.',
+            'end_ip': 'test_value_6',
+            'name': 'default_name_7',
+            'start_ip': 'test_value_8',
+            'subnet': 'test_value_9',
+            'type': 'multicastrange',
+            'visibility': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_address.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'multicast-address', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_multicast_address_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_multicast_address': {
+            'associated_interface': 'test_value_3',
+            'color': '4',
+            'comment': 'Comment.',
+            'end_ip': 'test_value_6',
+            'name': 'default_name_7',
+            'start_ip': 'test_value_8',
+            'subnet': 'test_value_9',
+            'type': 'multicastrange',
+            'visibility': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_address.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'associated-interface': 'test_value_3',
+        'color': '4',
+        'comment': 'Comment.',
+        'end-ip': 'test_value_6',
+        'name': 'default_name_7',
+                'start-ip': 'test_value_8',
+                'subnet': 'test_value_9',
+                'type': 'multicastrange',
+                'visibility': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'multicast-address', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_firewall_multicast_address_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_multicast_address': {
+            'random_attribute_not_valid': 'tag',
+            'associated_interface': 'test_value_3',
+            'color': '4',
+            'comment': 'Comment.',
+            'end_ip': 'test_value_6',
+            'name': 'default_name_7',
+            'start_ip': 'test_value_8',
+            'subnet': 'test_value_9',
+            'type': 'multicastrange',
+            'visibility': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_address.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'associated-interface': 'test_value_3',
+        'color': '4',
+        'comment': 'Comment.',
+        'end-ip': 'test_value_6',
+        'name': 'default_name_7',
+                'start-ip': 'test_value_8',
+                'subnet': 'test_value_9',
+                'type': 'multicastrange',
+                'visibility': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'multicast-address', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_firewall_multicast_address6.py b/test/units/modules/network/fortios/test_fortios_firewall_multicast_address6.py
new file mode 100644
index 0000000000..02f216671c
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_firewall_multicast_address6.py
@@ -0,0 +1,239 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_firewall_multicast_address6
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_firewall_multicast_address6.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_firewall_multicast_address6_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_multicast_address6': {
+            'color': '3',
+            'comment': 'Comment.',
+            'ip6': 'test_value_5',
+            'name': 'default_name_6',
+            'visibility': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_address6.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'color': '3',
+        'comment': 'Comment.',
+        'ip6': 'test_value_5',
+        'name': 'default_name_6',
+                'visibility': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'multicast-address6', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_multicast_address6_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_multicast_address6': {
+            'color': '3',
+            'comment': 'Comment.',
+            'ip6': 'test_value_5',
+            'name': 'default_name_6',
+            'visibility': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_address6.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'color': '3',
+        'comment': 'Comment.',
+        'ip6': 'test_value_5',
+        'name': 'default_name_6',
+                'visibility': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'multicast-address6', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_multicast_address6_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_multicast_address6': {
+            'color': '3',
+            'comment': 'Comment.',
+            'ip6': 'test_value_5',
+            'name': 'default_name_6',
+            'visibility': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_address6.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'multicast-address6', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_multicast_address6_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_multicast_address6': {
+            'color': '3',
+            'comment': 'Comment.',
+            'ip6': 'test_value_5',
+            'name': 'default_name_6',
+            'visibility': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_address6.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'multicast-address6', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_multicast_address6_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_multicast_address6': {
+            'color': '3',
+            'comment': 'Comment.',
+            'ip6': 'test_value_5',
+            'name': 'default_name_6',
+            'visibility': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_address6.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'color': '3',
+        'comment': 'Comment.',
+        'ip6': 'test_value_5',
+        'name': 'default_name_6',
+                'visibility': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'multicast-address6', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_firewall_multicast_address6_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_multicast_address6': {
+            'random_attribute_not_valid': 'tag',
+            'color': '3',
+            'comment': 'Comment.',
+            'ip6': 'test_value_5',
+            'name': 'default_name_6',
+            'visibility': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_address6.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'color': '3',
+        'comment': 'Comment.',
+        'ip6': 'test_value_5',
+        'name': 'default_name_6',
+                'visibility': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'multicast-address6', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_firewall_multicast_policy.py b/test/units/modules/network/fortios/test_fortios_firewall_multicast_policy.py
new file mode 100644
index 0000000000..32c97ba581
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_firewall_multicast_policy.py
@@ -0,0 +1,309 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_firewall_multicast_policy
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_firewall_multicast_policy.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_firewall_multicast_policy_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_multicast_policy': {
+            'action': 'accept',
+            'dnat': 'test_value_4',
+            'dstintf': 'test_value_5',
+            'end_port': '6',
+            'id': '7',
+            'logtraffic': 'enable',
+            'protocol': '9',
+            'snat': 'enable',
+            'snat_ip': 'test_value_11',
+            'srcintf': 'test_value_12',
+            'start_port': '13',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_policy.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'dnat': 'test_value_4',
+                'dstintf': 'test_value_5',
+                'end-port': '6',
+                'id': '7',
+                'logtraffic': 'enable',
+                'protocol': '9',
+                'snat': 'enable',
+                'snat-ip': 'test_value_11',
+                'srcintf': 'test_value_12',
+                'start-port': '13',
+                'status': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'multicast-policy', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_multicast_policy_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_multicast_policy': {
+            'action': 'accept',
+            'dnat': 'test_value_4',
+            'dstintf': 'test_value_5',
+            'end_port': '6',
+            'id': '7',
+            'logtraffic': 'enable',
+            'protocol': '9',
+            'snat': 'enable',
+            'snat_ip': 'test_value_11',
+            'srcintf': 'test_value_12',
+            'start_port': '13',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_policy.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'dnat': 'test_value_4',
+                'dstintf': 'test_value_5',
+                'end-port': '6',
+                'id': '7',
+                'logtraffic': 'enable',
+                'protocol': '9',
+                'snat': 'enable',
+                'snat-ip': 'test_value_11',
+                'srcintf': 'test_value_12',
+                'start-port': '13',
+                'status': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'multicast-policy', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_multicast_policy_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_multicast_policy': {
+            'action': 'accept',
+            'dnat': 'test_value_4',
+            'dstintf': 'test_value_5',
+            'end_port': '6',
+            'id': '7',
+            'logtraffic': 'enable',
+            'protocol': '9',
+            'snat': 'enable',
+            'snat_ip': 'test_value_11',
+            'srcintf': 'test_value_12',
+            'start_port': '13',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_policy.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'multicast-policy', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_multicast_policy_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_multicast_policy': {
+            'action': 'accept',
+            'dnat': 'test_value_4',
+            'dstintf': 'test_value_5',
+            'end_port': '6',
+            'id': '7',
+            'logtraffic': 'enable',
+            'protocol': '9',
+            'snat': 'enable',
+            'snat_ip': 'test_value_11',
+            'srcintf': 'test_value_12',
+            'start_port': '13',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_policy.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'multicast-policy', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_multicast_policy_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_multicast_policy': {
+            'action': 'accept',
+            'dnat': 'test_value_4',
+            'dstintf': 'test_value_5',
+            'end_port': '6',
+            'id': '7',
+            'logtraffic': 'enable',
+            'protocol': '9',
+            'snat': 'enable',
+            'snat_ip': 'test_value_11',
+            'srcintf': 'test_value_12',
+            'start_port': '13',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_policy.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'dnat': 'test_value_4',
+                'dstintf': 'test_value_5',
+                'end-port': '6',
+                'id': '7',
+                'logtraffic': 'enable',
+                'protocol': '9',
+                'snat': 'enable',
+                'snat-ip': 'test_value_11',
+                'srcintf': 'test_value_12',
+                'start-port': '13',
+                'status': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'multicast-policy', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_firewall_multicast_policy_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_multicast_policy': {
+            'random_attribute_not_valid': 'tag',
+            'action': 'accept',
+            'dnat': 'test_value_4',
+            'dstintf': 'test_value_5',
+            'end_port': '6',
+            'id': '7',
+            'logtraffic': 'enable',
+            'protocol': '9',
+            'snat': 'enable',
+            'snat_ip': 'test_value_11',
+            'srcintf': 'test_value_12',
+            'start_port': '13',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_policy.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'dnat': 'test_value_4',
+                'dstintf': 'test_value_5',
+                'end-port': '6',
+                'id': '7',
+                'logtraffic': 'enable',
+                'protocol': '9',
+                'snat': 'enable',
+                'snat-ip': 'test_value_11',
+                'srcintf': 'test_value_12',
+                'start-port': '13',
+                'status': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'multicast-policy', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_firewall_multicast_policy6.py b/test/units/modules/network/fortios/test_fortios_firewall_multicast_policy6.py
new file mode 100644
index 0000000000..c9e58511a5
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_firewall_multicast_policy6.py
@@ -0,0 +1,279 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_firewall_multicast_policy6
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_firewall_multicast_policy6.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_firewall_multicast_policy6_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_multicast_policy6': {
+            'action': 'accept',
+            'dstintf': 'test_value_4',
+            'end_port': '5',
+            'id': '6',
+            'logtraffic': 'enable',
+            'protocol': '8',
+            'srcintf': 'test_value_9',
+            'start_port': '10',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_policy6.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'dstintf': 'test_value_4',
+        'end-port': '5',
+        'id': '6',
+        'logtraffic': 'enable',
+        'protocol': '8',
+        'srcintf': 'test_value_9',
+        'start-port': '10',
+        'status': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'multicast-policy6', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_multicast_policy6_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_multicast_policy6': {
+            'action': 'accept',
+            'dstintf': 'test_value_4',
+            'end_port': '5',
+            'id': '6',
+            'logtraffic': 'enable',
+            'protocol': '8',
+            'srcintf': 'test_value_9',
+            'start_port': '10',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_policy6.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'dstintf': 'test_value_4',
+        'end-port': '5',
+        'id': '6',
+        'logtraffic': 'enable',
+        'protocol': '8',
+        'srcintf': 'test_value_9',
+        'start-port': '10',
+        'status': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'multicast-policy6', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_multicast_policy6_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_multicast_policy6': {
+            'action': 'accept',
+            'dstintf': 'test_value_4',
+            'end_port': '5',
+            'id': '6',
+            'logtraffic': 'enable',
+            'protocol': '8',
+            'srcintf': 'test_value_9',
+            'start_port': '10',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_policy6.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'multicast-policy6', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_multicast_policy6_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_multicast_policy6': {
+            'action': 'accept',
+            'dstintf': 'test_value_4',
+            'end_port': '5',
+            'id': '6',
+            'logtraffic': 'enable',
+            'protocol': '8',
+            'srcintf': 'test_value_9',
+            'start_port': '10',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_policy6.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'multicast-policy6', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_multicast_policy6_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_multicast_policy6': {
+            'action': 'accept',
+            'dstintf': 'test_value_4',
+            'end_port': '5',
+            'id': '6',
+            'logtraffic': 'enable',
+            'protocol': '8',
+            'srcintf': 'test_value_9',
+            'start_port': '10',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_policy6.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'dstintf': 'test_value_4',
+        'end-port': '5',
+        'id': '6',
+        'logtraffic': 'enable',
+        'protocol': '8',
+        'srcintf': 'test_value_9',
+        'start-port': '10',
+        'status': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'multicast-policy6', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_firewall_multicast_policy6_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_multicast_policy6': {
+            'random_attribute_not_valid': 'tag',
+            'action': 'accept',
+            'dstintf': 'test_value_4',
+            'end_port': '5',
+            'id': '6',
+            'logtraffic': 'enable',
+            'protocol': '8',
+            'srcintf': 'test_value_9',
+            'start_port': '10',
+            'status': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_multicast_policy6.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'dstintf': 'test_value_4',
+        'end-port': '5',
+        'id': '6',
+        'logtraffic': 'enable',
+        'protocol': '8',
+        'srcintf': 'test_value_9',
+        'start-port': '10',
+        'status': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'multicast-policy6', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_firewall_policy.py b/test/units/modules/network/fortios/test_fortios_firewall_policy.py
new file mode 100644
index 0000000000..53d7d6c59d
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_firewall_policy.py
@@ -0,0 +1,1169 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_firewall_policy
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_firewall_policy.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_firewall_policy_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_policy': {
+            'action': 'accept',
+            'application_list': 'test_value_4',
+            'auth_cert': 'test_value_5',
+            'auth_path': 'enable',
+            'auth_redirect_addr': 'test_value_7',
+            'av_profile': 'test_value_8',
+            'block_notification': 'enable',
+            'captive_portal_exempt': 'enable',
+            'capture_packet': 'enable',
+            'comments': 'test_value_12',
+            'delay_tcp_npu_session': 'enable',
+            'diffserv_forward': 'enable',
+            'diffserv_reverse': 'enable',
+            'diffservcode_forward': 'test_value_16',
+            'diffservcode_rev': 'test_value_17',
+            'disclaimer': 'enable',
+            'dlp_sensor': 'test_value_19',
+            'dnsfilter_profile': 'test_value_20',
+            'dscp_match': 'enable',
+            'dscp_negate': 'enable',
+            'dscp_value': 'test_value_23',
+            'dsri': 'enable',
+            'dstaddr_negate': 'enable',
+            'firewall_session_dirty': 'check-all',
+            'fixedport': 'enable',
+            'fsso': 'enable',
+            'fsso_agent_for_ntlm': 'test_value_29',
+            'global_label': 'test_value_30',
+            'icap_profile': 'test_value_31',
+            'identity_based_route': 'test_value_32',
+            'inbound': 'enable',
+            'internet_service': 'enable',
+            'internet_service_negate': 'enable',
+            'internet_service_src': 'enable',
+            'internet_service_src_negate': 'enable',
+            'ippool': 'enable',
+            'ips_sensor': 'test_value_39',
+            'label': 'test_value_40',
+            'learning_mode': 'enable',
+            'logtraffic': 'all',
+            'logtraffic_start': 'enable',
+            'match_vip': 'enable',
+            'name': 'default_name_45',
+            'nat': 'enable',
+            'natinbound': 'enable',
+            'natip': 'test_value_48',
+            'natoutbound': 'enable',
+            'ntlm': 'enable',
+            'ntlm_guest': 'enable',
+            'outbound': 'enable',
+            'per_ip_shaper': 'test_value_53',
+            'permit_any_host': 'enable',
+            'permit_stun_host': 'enable',
+            'policyid': '56',
+            'profile_group': 'test_value_57',
+            'profile_protocol_options': 'test_value_58',
+            'profile_type': 'single',
+            'radius_mac_auth_bypass': 'enable',
+            'redirect_url': 'test_value_61',
+            'replacemsg_override_group': 'test_value_62',
+            'rsso': 'enable',
+            'rtp_nat': 'disable',
+            'scan_botnet_connections': 'disable',
+            'schedule': 'test_value_66',
+            'schedule_timeout': 'enable',
+            'send_deny_packet': 'disable',
+            'service_negate': 'enable',
+            'session_ttl': '70',
+            'spamfilter_profile': 'test_value_71',
+            'srcaddr_negate': 'enable',
+            'ssh_filter_profile': 'test_value_73',
+            'ssl_mirror': 'enable',
+            'ssl_ssh_profile': 'test_value_75',
+            'status': 'enable',
+            'tcp_mss_receiver': '77',
+            'tcp_mss_sender': '78',
+            'tcp_session_without_syn': 'all',
+            'timeout_send_rst': 'enable',
+            'traffic_shaper': 'test_value_81',
+            'traffic_shaper_reverse': 'test_value_82',
+            'utm_status': 'enable',
+            'uuid': 'test_value_84',
+            'vlan_cos_fwd': '85',
+            'vlan_cos_rev': '86',
+            'vlan_filter': 'test_value_87',
+            'voip_profile': 'test_value_88',
+            'vpntunnel': 'test_value_89',
+            'waf_profile': 'test_value_90',
+            'wanopt': 'enable',
+            'wanopt_detection': 'active',
+            'wanopt_passive_opt': 'default',
+            'wanopt_peer': 'test_value_94',
+            'wanopt_profile': 'test_value_95',
+            'wccp': 'enable',
+            'webcache': 'enable',
+            'webcache_https': 'disable',
+            'webfilter_profile': 'test_value_99',
+            'wsso': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'application-list': 'test_value_4',
+        'auth-cert': 'test_value_5',
+        'auth-path': 'enable',
+        'auth-redirect-addr': 'test_value_7',
+        'av-profile': 'test_value_8',
+        'block-notification': 'enable',
+        'captive-portal-exempt': 'enable',
+        'capture-packet': 'enable',
+        'comments': 'test_value_12',
+        'delay-tcp-npu-session': 'enable',
+        'diffserv-forward': 'enable',
+        'diffserv-reverse': 'enable',
+        'diffservcode-forward': 'test_value_16',
+        'diffservcode-rev': 'test_value_17',
+        'disclaimer': 'enable',
+        'dlp-sensor': 'test_value_19',
+        'dnsfilter-profile': 'test_value_20',
+        'dscp-match': 'enable',
+        'dscp-negate': 'enable',
+        'dscp-value': 'test_value_23',
+        'dsri': 'enable',
+                'dstaddr-negate': 'enable',
+                'firewall-session-dirty': 'check-all',
+                'fixedport': 'enable',
+                'fsso': 'enable',
+                'fsso-agent-for-ntlm': 'test_value_29',
+                'global-label': 'test_value_30',
+                'icap-profile': 'test_value_31',
+                'identity-based-route': 'test_value_32',
+                'inbound': 'enable',
+                'internet-service': 'enable',
+                'internet-service-negate': 'enable',
+                'internet-service-src': 'enable',
+                'internet-service-src-negate': 'enable',
+                'ippool': 'enable',
+                'ips-sensor': 'test_value_39',
+                'label': 'test_value_40',
+                'learning-mode': 'enable',
+                'logtraffic': 'all',
+                'logtraffic-start': 'enable',
+                'match-vip': 'enable',
+                'name': 'default_name_45',
+                'nat': 'enable',
+                'natinbound': 'enable',
+                'natip': 'test_value_48',
+                'natoutbound': 'enable',
+                'ntlm': 'enable',
+                'ntlm-guest': 'enable',
+                'outbound': 'enable',
+                'per-ip-shaper': 'test_value_53',
+                'permit-any-host': 'enable',
+                'permit-stun-host': 'enable',
+                'policyid': '56',
+                'profile-group': 'test_value_57',
+                'profile-protocol-options': 'test_value_58',
+                'profile-type': 'single',
+                'radius-mac-auth-bypass': 'enable',
+                'redirect-url': 'test_value_61',
+                'replacemsg-override-group': 'test_value_62',
+                'rsso': 'enable',
+                'rtp-nat': 'disable',
+                'scan-botnet-connections': 'disable',
+                'schedule': 'test_value_66',
+                'schedule-timeout': 'enable',
+                'send-deny-packet': 'disable',
+                'service-negate': 'enable',
+                'session-ttl': '70',
+                'spamfilter-profile': 'test_value_71',
+                'srcaddr-negate': 'enable',
+                'ssh-filter-profile': 'test_value_73',
+                'ssl-mirror': 'enable',
+                'ssl-ssh-profile': 'test_value_75',
+                'status': 'enable',
+                'tcp-mss-receiver': '77',
+                'tcp-mss-sender': '78',
+                'tcp-session-without-syn': 'all',
+                'timeout-send-rst': 'enable',
+                'traffic-shaper': 'test_value_81',
+                'traffic-shaper-reverse': 'test_value_82',
+                'utm-status': 'enable',
+                'uuid': 'test_value_84',
+                'vlan-cos-fwd': '85',
+                'vlan-cos-rev': '86',
+                'vlan-filter': 'test_value_87',
+                'voip-profile': 'test_value_88',
+                'vpntunnel': 'test_value_89',
+                'waf-profile': 'test_value_90',
+                'wanopt': 'enable',
+                'wanopt-detection': 'active',
+                'wanopt-passive-opt': 'default',
+                'wanopt-peer': 'test_value_94',
+                'wanopt-profile': 'test_value_95',
+                'wccp': 'enable',
+                'webcache': 'enable',
+                'webcache-https': 'disable',
+                'webfilter-profile': 'test_value_99',
+                'wsso': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'policy', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_policy_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_policy': {
+            'action': 'accept',
+            'application_list': 'test_value_4',
+            'auth_cert': 'test_value_5',
+            'auth_path': 'enable',
+            'auth_redirect_addr': 'test_value_7',
+            'av_profile': 'test_value_8',
+            'block_notification': 'enable',
+            'captive_portal_exempt': 'enable',
+            'capture_packet': 'enable',
+            'comments': 'test_value_12',
+            'delay_tcp_npu_session': 'enable',
+            'diffserv_forward': 'enable',
+            'diffserv_reverse': 'enable',
+            'diffservcode_forward': 'test_value_16',
+            'diffservcode_rev': 'test_value_17',
+            'disclaimer': 'enable',
+            'dlp_sensor': 'test_value_19',
+            'dnsfilter_profile': 'test_value_20',
+            'dscp_match': 'enable',
+            'dscp_negate': 'enable',
+            'dscp_value': 'test_value_23',
+            'dsri': 'enable',
+            'dstaddr_negate': 'enable',
+            'firewall_session_dirty': 'check-all',
+            'fixedport': 'enable',
+            'fsso': 'enable',
+            'fsso_agent_for_ntlm': 'test_value_29',
+            'global_label': 'test_value_30',
+            'icap_profile': 'test_value_31',
+            'identity_based_route': 'test_value_32',
+            'inbound': 'enable',
+            'internet_service': 'enable',
+            'internet_service_negate': 'enable',
+            'internet_service_src': 'enable',
+            'internet_service_src_negate': 'enable',
+            'ippool': 'enable',
+            'ips_sensor': 'test_value_39',
+            'label': 'test_value_40',
+            'learning_mode': 'enable',
+            'logtraffic': 'all',
+            'logtraffic_start': 'enable',
+            'match_vip': 'enable',
+            'name': 'default_name_45',
+            'nat': 'enable',
+            'natinbound': 'enable',
+            'natip': 'test_value_48',
+            'natoutbound': 'enable',
+            'ntlm': 'enable',
+            'ntlm_guest': 'enable',
+            'outbound': 'enable',
+            'per_ip_shaper': 'test_value_53',
+            'permit_any_host': 'enable',
+            'permit_stun_host': 'enable',
+            'policyid': '56',
+            'profile_group': 'test_value_57',
+            'profile_protocol_options': 'test_value_58',
+            'profile_type': 'single',
+            'radius_mac_auth_bypass': 'enable',
+            'redirect_url': 'test_value_61',
+            'replacemsg_override_group': 'test_value_62',
+            'rsso': 'enable',
+            'rtp_nat': 'disable',
+            'scan_botnet_connections': 'disable',
+            'schedule': 'test_value_66',
+            'schedule_timeout': 'enable',
+            'send_deny_packet': 'disable',
+            'service_negate': 'enable',
+            'session_ttl': '70',
+            'spamfilter_profile': 'test_value_71',
+            'srcaddr_negate': 'enable',
+            'ssh_filter_profile': 'test_value_73',
+            'ssl_mirror': 'enable',
+            'ssl_ssh_profile': 'test_value_75',
+            'status': 'enable',
+            'tcp_mss_receiver': '77',
+            'tcp_mss_sender': '78',
+            'tcp_session_without_syn': 'all',
+            'timeout_send_rst': 'enable',
+            'traffic_shaper': 'test_value_81',
+            'traffic_shaper_reverse': 'test_value_82',
+            'utm_status': 'enable',
+            'uuid': 'test_value_84',
+            'vlan_cos_fwd': '85',
+            'vlan_cos_rev': '86',
+            'vlan_filter': 'test_value_87',
+            'voip_profile': 'test_value_88',
+            'vpntunnel': 'test_value_89',
+            'waf_profile': 'test_value_90',
+            'wanopt': 'enable',
+            'wanopt_detection': 'active',
+            'wanopt_passive_opt': 'default',
+            'wanopt_peer': 'test_value_94',
+            'wanopt_profile': 'test_value_95',
+            'wccp': 'enable',
+            'webcache': 'enable',
+            'webcache_https': 'disable',
+            'webfilter_profile': 'test_value_99',
+            'wsso': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'application-list': 'test_value_4',
+        'auth-cert': 'test_value_5',
+        'auth-path': 'enable',
+        'auth-redirect-addr': 'test_value_7',
+        'av-profile': 'test_value_8',
+        'block-notification': 'enable',
+        'captive-portal-exempt': 'enable',
+        'capture-packet': 'enable',
+        'comments': 'test_value_12',
+        'delay-tcp-npu-session': 'enable',
+        'diffserv-forward': 'enable',
+        'diffserv-reverse': 'enable',
+        'diffservcode-forward': 'test_value_16',
+        'diffservcode-rev': 'test_value_17',
+        'disclaimer': 'enable',
+        'dlp-sensor': 'test_value_19',
+        'dnsfilter-profile': 'test_value_20',
+        'dscp-match': 'enable',
+        'dscp-negate': 'enable',
+        'dscp-value': 'test_value_23',
+        'dsri': 'enable',
+                'dstaddr-negate': 'enable',
+                'firewall-session-dirty': 'check-all',
+                'fixedport': 'enable',
+                'fsso': 'enable',
+                'fsso-agent-for-ntlm': 'test_value_29',
+                'global-label': 'test_value_30',
+                'icap-profile': 'test_value_31',
+                'identity-based-route': 'test_value_32',
+                'inbound': 'enable',
+                'internet-service': 'enable',
+                'internet-service-negate': 'enable',
+                'internet-service-src': 'enable',
+                'internet-service-src-negate': 'enable',
+                'ippool': 'enable',
+                'ips-sensor': 'test_value_39',
+                'label': 'test_value_40',
+                'learning-mode': 'enable',
+                'logtraffic': 'all',
+                'logtraffic-start': 'enable',
+                'match-vip': 'enable',
+                'name': 'default_name_45',
+                'nat': 'enable',
+                'natinbound': 'enable',
+                'natip': 'test_value_48',
+                'natoutbound': 'enable',
+                'ntlm': 'enable',
+                'ntlm-guest': 'enable',
+                'outbound': 'enable',
+                'per-ip-shaper': 'test_value_53',
+                'permit-any-host': 'enable',
+                'permit-stun-host': 'enable',
+                'policyid': '56',
+                'profile-group': 'test_value_57',
+                'profile-protocol-options': 'test_value_58',
+                'profile-type': 'single',
+                'radius-mac-auth-bypass': 'enable',
+                'redirect-url': 'test_value_61',
+                'replacemsg-override-group': 'test_value_62',
+                'rsso': 'enable',
+                'rtp-nat': 'disable',
+                'scan-botnet-connections': 'disable',
+                'schedule': 'test_value_66',
+                'schedule-timeout': 'enable',
+                'send-deny-packet': 'disable',
+                'service-negate': 'enable',
+                'session-ttl': '70',
+                'spamfilter-profile': 'test_value_71',
+                'srcaddr-negate': 'enable',
+                'ssh-filter-profile': 'test_value_73',
+                'ssl-mirror': 'enable',
+                'ssl-ssh-profile': 'test_value_75',
+                'status': 'enable',
+                'tcp-mss-receiver': '77',
+                'tcp-mss-sender': '78',
+                'tcp-session-without-syn': 'all',
+                'timeout-send-rst': 'enable',
+                'traffic-shaper': 'test_value_81',
+                'traffic-shaper-reverse': 'test_value_82',
+                'utm-status': 'enable',
+                'uuid': 'test_value_84',
+                'vlan-cos-fwd': '85',
+                'vlan-cos-rev': '86',
+                'vlan-filter': 'test_value_87',
+                'voip-profile': 'test_value_88',
+                'vpntunnel': 'test_value_89',
+                'waf-profile': 'test_value_90',
+                'wanopt': 'enable',
+                'wanopt-detection': 'active',
+                'wanopt-passive-opt': 'default',
+                'wanopt-peer': 'test_value_94',
+                'wanopt-profile': 'test_value_95',
+                'wccp': 'enable',
+                'webcache': 'enable',
+                'webcache-https': 'disable',
+                'webfilter-profile': 'test_value_99',
+                'wsso': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'policy', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_policy_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_policy': {
+            'action': 'accept',
+            'application_list': 'test_value_4',
+            'auth_cert': 'test_value_5',
+            'auth_path': 'enable',
+            'auth_redirect_addr': 'test_value_7',
+            'av_profile': 'test_value_8',
+            'block_notification': 'enable',
+            'captive_portal_exempt': 'enable',
+            'capture_packet': 'enable',
+            'comments': 'test_value_12',
+            'delay_tcp_npu_session': 'enable',
+            'diffserv_forward': 'enable',
+            'diffserv_reverse': 'enable',
+            'diffservcode_forward': 'test_value_16',
+            'diffservcode_rev': 'test_value_17',
+            'disclaimer': 'enable',
+            'dlp_sensor': 'test_value_19',
+            'dnsfilter_profile': 'test_value_20',
+            'dscp_match': 'enable',
+            'dscp_negate': 'enable',
+            'dscp_value': 'test_value_23',
+            'dsri': 'enable',
+            'dstaddr_negate': 'enable',
+            'firewall_session_dirty': 'check-all',
+            'fixedport': 'enable',
+            'fsso': 'enable',
+            'fsso_agent_for_ntlm': 'test_value_29',
+            'global_label': 'test_value_30',
+            'icap_profile': 'test_value_31',
+            'identity_based_route': 'test_value_32',
+            'inbound': 'enable',
+            'internet_service': 'enable',
+            'internet_service_negate': 'enable',
+            'internet_service_src': 'enable',
+            'internet_service_src_negate': 'enable',
+            'ippool': 'enable',
+            'ips_sensor': 'test_value_39',
+            'label': 'test_value_40',
+            'learning_mode': 'enable',
+            'logtraffic': 'all',
+            'logtraffic_start': 'enable',
+            'match_vip': 'enable',
+            'name': 'default_name_45',
+            'nat': 'enable',
+            'natinbound': 'enable',
+            'natip': 'test_value_48',
+            'natoutbound': 'enable',
+            'ntlm': 'enable',
+            'ntlm_guest': 'enable',
+            'outbound': 'enable',
+            'per_ip_shaper': 'test_value_53',
+            'permit_any_host': 'enable',
+            'permit_stun_host': 'enable',
+            'policyid': '56',
+            'profile_group': 'test_value_57',
+            'profile_protocol_options': 'test_value_58',
+            'profile_type': 'single',
+            'radius_mac_auth_bypass': 'enable',
+            'redirect_url': 'test_value_61',
+            'replacemsg_override_group': 'test_value_62',
+            'rsso': 'enable',
+            'rtp_nat': 'disable',
+            'scan_botnet_connections': 'disable',
+            'schedule': 'test_value_66',
+            'schedule_timeout': 'enable',
+            'send_deny_packet': 'disable',
+            'service_negate': 'enable',
+            'session_ttl': '70',
+            'spamfilter_profile': 'test_value_71',
+            'srcaddr_negate': 'enable',
+            'ssh_filter_profile': 'test_value_73',
+            'ssl_mirror': 'enable',
+            'ssl_ssh_profile': 'test_value_75',
+            'status': 'enable',
+            'tcp_mss_receiver': '77',
+            'tcp_mss_sender': '78',
+            'tcp_session_without_syn': 'all',
+            'timeout_send_rst': 'enable',
+            'traffic_shaper': 'test_value_81',
+            'traffic_shaper_reverse': 'test_value_82',
+            'utm_status': 'enable',
+            'uuid': 'test_value_84',
+            'vlan_cos_fwd': '85',
+            'vlan_cos_rev': '86',
+            'vlan_filter': 'test_value_87',
+            'voip_profile': 'test_value_88',
+            'vpntunnel': 'test_value_89',
+            'waf_profile': 'test_value_90',
+            'wanopt': 'enable',
+            'wanopt_detection': 'active',
+            'wanopt_passive_opt': 'default',
+            'wanopt_peer': 'test_value_94',
+            'wanopt_profile': 'test_value_95',
+            'wccp': 'enable',
+            'webcache': 'enable',
+            'webcache_https': 'disable',
+            'webfilter_profile': 'test_value_99',
+            'wsso': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'policy', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_policy_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_policy': {
+            'action': 'accept',
+            'application_list': 'test_value_4',
+            'auth_cert': 'test_value_5',
+            'auth_path': 'enable',
+            'auth_redirect_addr': 'test_value_7',
+            'av_profile': 'test_value_8',
+            'block_notification': 'enable',
+            'captive_portal_exempt': 'enable',
+            'capture_packet': 'enable',
+            'comments': 'test_value_12',
+            'delay_tcp_npu_session': 'enable',
+            'diffserv_forward': 'enable',
+            'diffserv_reverse': 'enable',
+            'diffservcode_forward': 'test_value_16',
+            'diffservcode_rev': 'test_value_17',
+            'disclaimer': 'enable',
+            'dlp_sensor': 'test_value_19',
+            'dnsfilter_profile': 'test_value_20',
+            'dscp_match': 'enable',
+            'dscp_negate': 'enable',
+            'dscp_value': 'test_value_23',
+            'dsri': 'enable',
+            'dstaddr_negate': 'enable',
+            'firewall_session_dirty': 'check-all',
+            'fixedport': 'enable',
+            'fsso': 'enable',
+            'fsso_agent_for_ntlm': 'test_value_29',
+            'global_label': 'test_value_30',
+            'icap_profile': 'test_value_31',
+            'identity_based_route': 'test_value_32',
+            'inbound': 'enable',
+            'internet_service': 'enable',
+            'internet_service_negate': 'enable',
+            'internet_service_src': 'enable',
+            'internet_service_src_negate': 'enable',
+            'ippool': 'enable',
+            'ips_sensor': 'test_value_39',
+            'label': 'test_value_40',
+            'learning_mode': 'enable',
+            'logtraffic': 'all',
+            'logtraffic_start': 'enable',
+            'match_vip': 'enable',
+            'name': 'default_name_45',
+            'nat': 'enable',
+            'natinbound': 'enable',
+            'natip': 'test_value_48',
+            'natoutbound': 'enable',
+            'ntlm': 'enable',
+            'ntlm_guest': 'enable',
+            'outbound': 'enable',
+            'per_ip_shaper': 'test_value_53',
+            'permit_any_host': 'enable',
+            'permit_stun_host': 'enable',
+            'policyid': '56',
+            'profile_group': 'test_value_57',
+            'profile_protocol_options': 'test_value_58',
+            'profile_type': 'single',
+            'radius_mac_auth_bypass': 'enable',
+            'redirect_url': 'test_value_61',
+            'replacemsg_override_group': 'test_value_62',
+            'rsso': 'enable',
+            'rtp_nat': 'disable',
+            'scan_botnet_connections': 'disable',
+            'schedule': 'test_value_66',
+            'schedule_timeout': 'enable',
+            'send_deny_packet': 'disable',
+            'service_negate': 'enable',
+            'session_ttl': '70',
+            'spamfilter_profile': 'test_value_71',
+            'srcaddr_negate': 'enable',
+            'ssh_filter_profile': 'test_value_73',
+            'ssl_mirror': 'enable',
+            'ssl_ssh_profile': 'test_value_75',
+            'status': 'enable',
+            'tcp_mss_receiver': '77',
+            'tcp_mss_sender': '78',
+            'tcp_session_without_syn': 'all',
+            'timeout_send_rst': 'enable',
+            'traffic_shaper': 'test_value_81',
+            'traffic_shaper_reverse': 'test_value_82',
+            'utm_status': 'enable',
+            'uuid': 'test_value_84',
+            'vlan_cos_fwd': '85',
+            'vlan_cos_rev': '86',
+            'vlan_filter': 'test_value_87',
+            'voip_profile': 'test_value_88',
+            'vpntunnel': 'test_value_89',
+            'waf_profile': 'test_value_90',
+            'wanopt': 'enable',
+            'wanopt_detection': 'active',
+            'wanopt_passive_opt': 'default',
+            'wanopt_peer': 'test_value_94',
+            'wanopt_profile': 'test_value_95',
+            'wccp': 'enable',
+            'webcache': 'enable',
+            'webcache_https': 'disable',
+            'webfilter_profile': 'test_value_99',
+            'wsso': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'policy', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_policy_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_policy': {
+            'action': 'accept',
+            'application_list': 'test_value_4',
+            'auth_cert': 'test_value_5',
+            'auth_path': 'enable',
+            'auth_redirect_addr': 'test_value_7',
+            'av_profile': 'test_value_8',
+            'block_notification': 'enable',
+            'captive_portal_exempt': 'enable',
+            'capture_packet': 'enable',
+            'comments': 'test_value_12',
+            'delay_tcp_npu_session': 'enable',
+            'diffserv_forward': 'enable',
+            'diffserv_reverse': 'enable',
+            'diffservcode_forward': 'test_value_16',
+            'diffservcode_rev': 'test_value_17',
+            'disclaimer': 'enable',
+            'dlp_sensor': 'test_value_19',
+            'dnsfilter_profile': 'test_value_20',
+            'dscp_match': 'enable',
+            'dscp_negate': 'enable',
+            'dscp_value': 'test_value_23',
+            'dsri': 'enable',
+            'dstaddr_negate': 'enable',
+            'firewall_session_dirty': 'check-all',
+            'fixedport': 'enable',
+            'fsso': 'enable',
+            'fsso_agent_for_ntlm': 'test_value_29',
+            'global_label': 'test_value_30',
+            'icap_profile': 'test_value_31',
+            'identity_based_route': 'test_value_32',
+            'inbound': 'enable',
+            'internet_service': 'enable',
+            'internet_service_negate': 'enable',
+            'internet_service_src': 'enable',
+            'internet_service_src_negate': 'enable',
+            'ippool': 'enable',
+            'ips_sensor': 'test_value_39',
+            'label': 'test_value_40',
+            'learning_mode': 'enable',
+            'logtraffic': 'all',
+            'logtraffic_start': 'enable',
+            'match_vip': 'enable',
+            'name': 'default_name_45',
+            'nat': 'enable',
+            'natinbound': 'enable',
+            'natip': 'test_value_48',
+            'natoutbound': 'enable',
+            'ntlm': 'enable',
+            'ntlm_guest': 'enable',
+            'outbound': 'enable',
+            'per_ip_shaper': 'test_value_53',
+            'permit_any_host': 'enable',
+            'permit_stun_host': 'enable',
+            'policyid': '56',
+            'profile_group': 'test_value_57',
+            'profile_protocol_options': 'test_value_58',
+            'profile_type': 'single',
+            'radius_mac_auth_bypass': 'enable',
+            'redirect_url': 'test_value_61',
+            'replacemsg_override_group': 'test_value_62',
+            'rsso': 'enable',
+            'rtp_nat': 'disable',
+            'scan_botnet_connections': 'disable',
+            'schedule': 'test_value_66',
+            'schedule_timeout': 'enable',
+            'send_deny_packet': 'disable',
+            'service_negate': 'enable',
+            'session_ttl': '70',
+            'spamfilter_profile': 'test_value_71',
+            'srcaddr_negate': 'enable',
+            'ssh_filter_profile': 'test_value_73',
+            'ssl_mirror': 'enable',
+            'ssl_ssh_profile': 'test_value_75',
+            'status': 'enable',
+            'tcp_mss_receiver': '77',
+            'tcp_mss_sender': '78',
+            'tcp_session_without_syn': 'all',
+            'timeout_send_rst': 'enable',
+            'traffic_shaper': 'test_value_81',
+            'traffic_shaper_reverse': 'test_value_82',
+            'utm_status': 'enable',
+            'uuid': 'test_value_84',
+            'vlan_cos_fwd': '85',
+            'vlan_cos_rev': '86',
+            'vlan_filter': 'test_value_87',
+            'voip_profile': 'test_value_88',
+            'vpntunnel': 'test_value_89',
+            'waf_profile': 'test_value_90',
+            'wanopt': 'enable',
+            'wanopt_detection': 'active',
+            'wanopt_passive_opt': 'default',
+            'wanopt_peer': 'test_value_94',
+            'wanopt_profile': 'test_value_95',
+            'wccp': 'enable',
+            'webcache': 'enable',
+            'webcache_https': 'disable',
+            'webfilter_profile': 'test_value_99',
+            'wsso': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'application-list': 'test_value_4',
+        'auth-cert': 'test_value_5',
+        'auth-path': 'enable',
+        'auth-redirect-addr': 'test_value_7',
+        'av-profile': 'test_value_8',
+        'block-notification': 'enable',
+        'captive-portal-exempt': 'enable',
+        'capture-packet': 'enable',
+        'comments': 'test_value_12',
+        'delay-tcp-npu-session': 'enable',
+        'diffserv-forward': 'enable',
+        'diffserv-reverse': 'enable',
+        'diffservcode-forward': 'test_value_16',
+        'diffservcode-rev': 'test_value_17',
+        'disclaimer': 'enable',
+        'dlp-sensor': 'test_value_19',
+        'dnsfilter-profile': 'test_value_20',
+        'dscp-match': 'enable',
+        'dscp-negate': 'enable',
+        'dscp-value': 'test_value_23',
+        'dsri': 'enable',
+                'dstaddr-negate': 'enable',
+                'firewall-session-dirty': 'check-all',
+                'fixedport': 'enable',
+                'fsso': 'enable',
+                'fsso-agent-for-ntlm': 'test_value_29',
+                'global-label': 'test_value_30',
+                'icap-profile': 'test_value_31',
+                'identity-based-route': 'test_value_32',
+                'inbound': 'enable',
+                'internet-service': 'enable',
+                'internet-service-negate': 'enable',
+                'internet-service-src': 'enable',
+                'internet-service-src-negate': 'enable',
+                'ippool': 'enable',
+                'ips-sensor': 'test_value_39',
+                'label': 'test_value_40',
+                'learning-mode': 'enable',
+                'logtraffic': 'all',
+                'logtraffic-start': 'enable',
+                'match-vip': 'enable',
+                'name': 'default_name_45',
+                'nat': 'enable',
+                'natinbound': 'enable',
+                'natip': 'test_value_48',
+                'natoutbound': 'enable',
+                'ntlm': 'enable',
+                'ntlm-guest': 'enable',
+                'outbound': 'enable',
+                'per-ip-shaper': 'test_value_53',
+                'permit-any-host': 'enable',
+                'permit-stun-host': 'enable',
+                'policyid': '56',
+                'profile-group': 'test_value_57',
+                'profile-protocol-options': 'test_value_58',
+                'profile-type': 'single',
+                'radius-mac-auth-bypass': 'enable',
+                'redirect-url': 'test_value_61',
+                'replacemsg-override-group': 'test_value_62',
+                'rsso': 'enable',
+                'rtp-nat': 'disable',
+                'scan-botnet-connections': 'disable',
+                'schedule': 'test_value_66',
+                'schedule-timeout': 'enable',
+                'send-deny-packet': 'disable',
+                'service-negate': 'enable',
+                'session-ttl': '70',
+                'spamfilter-profile': 'test_value_71',
+                'srcaddr-negate': 'enable',
+                'ssh-filter-profile': 'test_value_73',
+                'ssl-mirror': 'enable',
+                'ssl-ssh-profile': 'test_value_75',
+                'status': 'enable',
+                'tcp-mss-receiver': '77',
+                'tcp-mss-sender': '78',
+                'tcp-session-without-syn': 'all',
+                'timeout-send-rst': 'enable',
+                'traffic-shaper': 'test_value_81',
+                'traffic-shaper-reverse': 'test_value_82',
+                'utm-status': 'enable',
+                'uuid': 'test_value_84',
+                'vlan-cos-fwd': '85',
+                'vlan-cos-rev': '86',
+                'vlan-filter': 'test_value_87',
+                'voip-profile': 'test_value_88',
+                'vpntunnel': 'test_value_89',
+                'waf-profile': 'test_value_90',
+                'wanopt': 'enable',
+                'wanopt-detection': 'active',
+                'wanopt-passive-opt': 'default',
+                'wanopt-peer': 'test_value_94',
+                'wanopt-profile': 'test_value_95',
+                'wccp': 'enable',
+                'webcache': 'enable',
+                'webcache-https': 'disable',
+                'webfilter-profile': 'test_value_99',
+                'wsso': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'policy', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_firewall_policy_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_policy': {
+            'random_attribute_not_valid': 'tag',
+            'action': 'accept',
+            'application_list': 'test_value_4',
+            'auth_cert': 'test_value_5',
+            'auth_path': 'enable',
+            'auth_redirect_addr': 'test_value_7',
+            'av_profile': 'test_value_8',
+            'block_notification': 'enable',
+            'captive_portal_exempt': 'enable',
+            'capture_packet': 'enable',
+            'comments': 'test_value_12',
+            'delay_tcp_npu_session': 'enable',
+            'diffserv_forward': 'enable',
+            'diffserv_reverse': 'enable',
+            'diffservcode_forward': 'test_value_16',
+            'diffservcode_rev': 'test_value_17',
+            'disclaimer': 'enable',
+            'dlp_sensor': 'test_value_19',
+            'dnsfilter_profile': 'test_value_20',
+            'dscp_match': 'enable',
+            'dscp_negate': 'enable',
+            'dscp_value': 'test_value_23',
+            'dsri': 'enable',
+            'dstaddr_negate': 'enable',
+            'firewall_session_dirty': 'check-all',
+            'fixedport': 'enable',
+            'fsso': 'enable',
+            'fsso_agent_for_ntlm': 'test_value_29',
+            'global_label': 'test_value_30',
+            'icap_profile': 'test_value_31',
+            'identity_based_route': 'test_value_32',
+            'inbound': 'enable',
+            'internet_service': 'enable',
+            'internet_service_negate': 'enable',
+            'internet_service_src': 'enable',
+            'internet_service_src_negate': 'enable',
+            'ippool': 'enable',
+            'ips_sensor': 'test_value_39',
+            'label': 'test_value_40',
+            'learning_mode': 'enable',
+            'logtraffic': 'all',
+            'logtraffic_start': 'enable',
+            'match_vip': 'enable',
+            'name': 'default_name_45',
+            'nat': 'enable',
+            'natinbound': 'enable',
+            'natip': 'test_value_48',
+            'natoutbound': 'enable',
+            'ntlm': 'enable',
+            'ntlm_guest': 'enable',
+            'outbound': 'enable',
+            'per_ip_shaper': 'test_value_53',
+            'permit_any_host': 'enable',
+            'permit_stun_host': 'enable',
+            'policyid': '56',
+            'profile_group': 'test_value_57',
+            'profile_protocol_options': 'test_value_58',
+            'profile_type': 'single',
+            'radius_mac_auth_bypass': 'enable',
+            'redirect_url': 'test_value_61',
+            'replacemsg_override_group': 'test_value_62',
+            'rsso': 'enable',
+            'rtp_nat': 'disable',
+            'scan_botnet_connections': 'disable',
+            'schedule': 'test_value_66',
+            'schedule_timeout': 'enable',
+            'send_deny_packet': 'disable',
+            'service_negate': 'enable',
+            'session_ttl': '70',
+            'spamfilter_profile': 'test_value_71',
+            'srcaddr_negate': 'enable',
+            'ssh_filter_profile': 'test_value_73',
+            'ssl_mirror': 'enable',
+            'ssl_ssh_profile': 'test_value_75',
+            'status': 'enable',
+            'tcp_mss_receiver': '77',
+            'tcp_mss_sender': '78',
+            'tcp_session_without_syn': 'all',
+            'timeout_send_rst': 'enable',
+            'traffic_shaper': 'test_value_81',
+            'traffic_shaper_reverse': 'test_value_82',
+            'utm_status': 'enable',
+            'uuid': 'test_value_84',
+            'vlan_cos_fwd': '85',
+            'vlan_cos_rev': '86',
+            'vlan_filter': 'test_value_87',
+            'voip_profile': 'test_value_88',
+            'vpntunnel': 'test_value_89',
+            'waf_profile': 'test_value_90',
+            'wanopt': 'enable',
+            'wanopt_detection': 'active',
+            'wanopt_passive_opt': 'default',
+            'wanopt_peer': 'test_value_94',
+            'wanopt_profile': 'test_value_95',
+            'wccp': 'enable',
+            'webcache': 'enable',
+            'webcache_https': 'disable',
+            'webfilter_profile': 'test_value_99',
+            'wsso': 'enable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'application-list': 'test_value_4',
+        'auth-cert': 'test_value_5',
+        'auth-path': 'enable',
+        'auth-redirect-addr': 'test_value_7',
+        'av-profile': 'test_value_8',
+        'block-notification': 'enable',
+        'captive-portal-exempt': 'enable',
+        'capture-packet': 'enable',
+        'comments': 'test_value_12',
+        'delay-tcp-npu-session': 'enable',
+        'diffserv-forward': 'enable',
+        'diffserv-reverse': 'enable',
+        'diffservcode-forward': 'test_value_16',
+        'diffservcode-rev': 'test_value_17',
+        'disclaimer': 'enable',
+        'dlp-sensor': 'test_value_19',
+        'dnsfilter-profile': 'test_value_20',
+        'dscp-match': 'enable',
+        'dscp-negate': 'enable',
+        'dscp-value': 'test_value_23',
+        'dsri': 'enable',
+                'dstaddr-negate': 'enable',
+                'firewall-session-dirty': 'check-all',
+                'fixedport': 'enable',
+                'fsso': 'enable',
+                'fsso-agent-for-ntlm': 'test_value_29',
+                'global-label': 'test_value_30',
+                'icap-profile': 'test_value_31',
+                'identity-based-route': 'test_value_32',
+                'inbound': 'enable',
+                'internet-service': 'enable',
+                'internet-service-negate': 'enable',
+                'internet-service-src': 'enable',
+                'internet-service-src-negate': 'enable',
+                'ippool': 'enable',
+                'ips-sensor': 'test_value_39',
+                'label': 'test_value_40',
+                'learning-mode': 'enable',
+                'logtraffic': 'all',
+                'logtraffic-start': 'enable',
+                'match-vip': 'enable',
+                'name': 'default_name_45',
+                'nat': 'enable',
+                'natinbound': 'enable',
+                'natip': 'test_value_48',
+                'natoutbound': 'enable',
+                'ntlm': 'enable',
+                'ntlm-guest': 'enable',
+                'outbound': 'enable',
+                'per-ip-shaper': 'test_value_53',
+                'permit-any-host': 'enable',
+                'permit-stun-host': 'enable',
+                'policyid': '56',
+                'profile-group': 'test_value_57',
+                'profile-protocol-options': 'test_value_58',
+                'profile-type': 'single',
+                'radius-mac-auth-bypass': 'enable',
+                'redirect-url': 'test_value_61',
+                'replacemsg-override-group': 'test_value_62',
+                'rsso': 'enable',
+                'rtp-nat': 'disable',
+                'scan-botnet-connections': 'disable',
+                'schedule': 'test_value_66',
+                'schedule-timeout': 'enable',
+                'send-deny-packet': 'disable',
+                'service-negate': 'enable',
+                'session-ttl': '70',
+                'spamfilter-profile': 'test_value_71',
+                'srcaddr-negate': 'enable',
+                'ssh-filter-profile': 'test_value_73',
+                'ssl-mirror': 'enable',
+                'ssl-ssh-profile': 'test_value_75',
+                'status': 'enable',
+                'tcp-mss-receiver': '77',
+                'tcp-mss-sender': '78',
+                'tcp-session-without-syn': 'all',
+                'timeout-send-rst': 'enable',
+                'traffic-shaper': 'test_value_81',
+                'traffic-shaper-reverse': 'test_value_82',
+                'utm-status': 'enable',
+                'uuid': 'test_value_84',
+                'vlan-cos-fwd': '85',
+                'vlan-cos-rev': '86',
+                'vlan-filter': 'test_value_87',
+                'voip-profile': 'test_value_88',
+                'vpntunnel': 'test_value_89',
+                'waf-profile': 'test_value_90',
+                'wanopt': 'enable',
+                'wanopt-detection': 'active',
+                'wanopt-passive-opt': 'default',
+                'wanopt-peer': 'test_value_94',
+                'wanopt-profile': 'test_value_95',
+                'wccp': 'enable',
+                'webcache': 'enable',
+                'webcache-https': 'disable',
+                'webfilter-profile': 'test_value_99',
+                'wsso': 'enable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'policy', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_firewall_policy46.py b/test/units/modules/network/fortios/test_fortios_firewall_policy46.py
new file mode 100644
index 0000000000..41604f0f7a
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_firewall_policy46.py
@@ -0,0 +1,359 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_firewall_policy46
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_firewall_policy46.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_firewall_policy46_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_policy46': {
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'dstintf': 'test_value_5',
+            'fixedport': 'enable',
+            'ippool': 'enable',
+            'logtraffic': 'enable',
+            'per_ip_shaper': 'test_value_9',
+            'permit_any_host': 'enable',
+            'policyid': '11',
+            'schedule': 'test_value_12',
+            'srcintf': 'test_value_13',
+            'status': 'enable',
+            'tcp_mss_receiver': '15',
+            'tcp_mss_sender': '16',
+            'traffic_shaper': 'test_value_17',
+            'traffic_shaper_reverse': 'test_value_18',
+            'uuid': 'test_value_19'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy46.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'comments': 'test_value_4',
+        'dstintf': 'test_value_5',
+        'fixedport': 'enable',
+        'ippool': 'enable',
+        'logtraffic': 'enable',
+        'per-ip-shaper': 'test_value_9',
+        'permit-any-host': 'enable',
+        'policyid': '11',
+        'schedule': 'test_value_12',
+        'srcintf': 'test_value_13',
+        'status': 'enable',
+        'tcp-mss-receiver': '15',
+        'tcp-mss-sender': '16',
+        'traffic-shaper': 'test_value_17',
+        'traffic-shaper-reverse': 'test_value_18',
+        'uuid': 'test_value_19'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'policy46', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_policy46_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_policy46': {
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'dstintf': 'test_value_5',
+            'fixedport': 'enable',
+            'ippool': 'enable',
+            'logtraffic': 'enable',
+            'per_ip_shaper': 'test_value_9',
+            'permit_any_host': 'enable',
+            'policyid': '11',
+            'schedule': 'test_value_12',
+            'srcintf': 'test_value_13',
+            'status': 'enable',
+            'tcp_mss_receiver': '15',
+            'tcp_mss_sender': '16',
+            'traffic_shaper': 'test_value_17',
+            'traffic_shaper_reverse': 'test_value_18',
+            'uuid': 'test_value_19'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy46.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'comments': 'test_value_4',
+        'dstintf': 'test_value_5',
+        'fixedport': 'enable',
+        'ippool': 'enable',
+        'logtraffic': 'enable',
+        'per-ip-shaper': 'test_value_9',
+        'permit-any-host': 'enable',
+        'policyid': '11',
+        'schedule': 'test_value_12',
+        'srcintf': 'test_value_13',
+        'status': 'enable',
+        'tcp-mss-receiver': '15',
+        'tcp-mss-sender': '16',
+        'traffic-shaper': 'test_value_17',
+        'traffic-shaper-reverse': 'test_value_18',
+        'uuid': 'test_value_19'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'policy46', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_policy46_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_policy46': {
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'dstintf': 'test_value_5',
+            'fixedport': 'enable',
+            'ippool': 'enable',
+            'logtraffic': 'enable',
+            'per_ip_shaper': 'test_value_9',
+            'permit_any_host': 'enable',
+            'policyid': '11',
+            'schedule': 'test_value_12',
+            'srcintf': 'test_value_13',
+            'status': 'enable',
+            'tcp_mss_receiver': '15',
+            'tcp_mss_sender': '16',
+            'traffic_shaper': 'test_value_17',
+            'traffic_shaper_reverse': 'test_value_18',
+            'uuid': 'test_value_19'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy46.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'policy46', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_policy46_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_policy46': {
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'dstintf': 'test_value_5',
+            'fixedport': 'enable',
+            'ippool': 'enable',
+            'logtraffic': 'enable',
+            'per_ip_shaper': 'test_value_9',
+            'permit_any_host': 'enable',
+            'policyid': '11',
+            'schedule': 'test_value_12',
+            'srcintf': 'test_value_13',
+            'status': 'enable',
+            'tcp_mss_receiver': '15',
+            'tcp_mss_sender': '16',
+            'traffic_shaper': 'test_value_17',
+            'traffic_shaper_reverse': 'test_value_18',
+            'uuid': 'test_value_19'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy46.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'policy46', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_policy46_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_policy46': {
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'dstintf': 'test_value_5',
+            'fixedport': 'enable',
+            'ippool': 'enable',
+            'logtraffic': 'enable',
+            'per_ip_shaper': 'test_value_9',
+            'permit_any_host': 'enable',
+            'policyid': '11',
+            'schedule': 'test_value_12',
+            'srcintf': 'test_value_13',
+            'status': 'enable',
+            'tcp_mss_receiver': '15',
+            'tcp_mss_sender': '16',
+            'traffic_shaper': 'test_value_17',
+            'traffic_shaper_reverse': 'test_value_18',
+            'uuid': 'test_value_19'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy46.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'comments': 'test_value_4',
+        'dstintf': 'test_value_5',
+        'fixedport': 'enable',
+        'ippool': 'enable',
+        'logtraffic': 'enable',
+        'per-ip-shaper': 'test_value_9',
+        'permit-any-host': 'enable',
+        'policyid': '11',
+        'schedule': 'test_value_12',
+        'srcintf': 'test_value_13',
+        'status': 'enable',
+        'tcp-mss-receiver': '15',
+        'tcp-mss-sender': '16',
+        'traffic-shaper': 'test_value_17',
+        'traffic-shaper-reverse': 'test_value_18',
+        'uuid': 'test_value_19'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'policy46', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_firewall_policy46_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_policy46': {
+            'random_attribute_not_valid': 'tag',
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'dstintf': 'test_value_5',
+            'fixedport': 'enable',
+            'ippool': 'enable',
+            'logtraffic': 'enable',
+            'per_ip_shaper': 'test_value_9',
+            'permit_any_host': 'enable',
+            'policyid': '11',
+            'schedule': 'test_value_12',
+            'srcintf': 'test_value_13',
+            'status': 'enable',
+            'tcp_mss_receiver': '15',
+            'tcp_mss_sender': '16',
+            'traffic_shaper': 'test_value_17',
+            'traffic_shaper_reverse': 'test_value_18',
+            'uuid': 'test_value_19'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy46.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'comments': 'test_value_4',
+        'dstintf': 'test_value_5',
+        'fixedport': 'enable',
+        'ippool': 'enable',
+        'logtraffic': 'enable',
+        'per-ip-shaper': 'test_value_9',
+        'permit-any-host': 'enable',
+        'policyid': '11',
+        'schedule': 'test_value_12',
+        'srcintf': 'test_value_13',
+        'status': 'enable',
+        'tcp-mss-receiver': '15',
+        'tcp-mss-sender': '16',
+        'traffic-shaper': 'test_value_17',
+        'traffic-shaper-reverse': 'test_value_18',
+        'uuid': 'test_value_19'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'policy46', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_firewall_policy6.py b/test/units/modules/network/fortios/test_fortios_firewall_policy6.py
new file mode 100644
index 0000000000..5016f00742
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_firewall_policy6.py
@@ -0,0 +1,789 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_firewall_policy6
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_firewall_policy6.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_firewall_policy6_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_policy6': {
+            'action': 'accept',
+            'application_list': 'test_value_4',
+            'av_profile': 'test_value_5',
+            'comments': 'test_value_6',
+            'diffserv_forward': 'enable',
+            'diffserv_reverse': 'enable',
+            'diffservcode_forward': 'test_value_9',
+            'diffservcode_rev': 'test_value_10',
+            'dlp_sensor': 'test_value_11',
+            'dscp_match': 'enable',
+            'dscp_negate': 'enable',
+            'dscp_value': 'test_value_14',
+            'dsri': 'enable',
+            'dstaddr_negate': 'enable',
+            'firewall_session_dirty': 'check-all',
+            'fixedport': 'enable',
+            'global_label': 'test_value_19',
+            'icap_profile': 'test_value_20',
+            'inbound': 'enable',
+            'ippool': 'enable',
+            'ips_sensor': 'test_value_23',
+            'label': 'test_value_24',
+            'logtraffic': 'all',
+            'logtraffic_start': 'enable',
+            'name': 'default_name_27',
+            'nat': 'enable',
+            'natinbound': 'enable',
+            'natoutbound': 'enable',
+            'outbound': 'enable',
+            'per_ip_shaper': 'test_value_32',
+            'policyid': '33',
+            'profile_group': 'test_value_34',
+            'profile_protocol_options': 'test_value_35',
+            'profile_type': 'single',
+            'replacemsg_override_group': 'test_value_37',
+            'rsso': 'enable',
+            'schedule': 'test_value_39',
+            'send_deny_packet': 'enable',
+            'service_negate': 'enable',
+            'session_ttl': '42',
+            'spamfilter_profile': 'test_value_43',
+            'srcaddr_negate': 'enable',
+            'ssh_filter_profile': 'test_value_45',
+            'ssl_mirror': 'enable',
+            'ssl_ssh_profile': 'test_value_47',
+            'status': 'enable',
+            'tcp_mss_receiver': '49',
+            'tcp_mss_sender': '50',
+            'tcp_session_without_syn': 'all',
+            'timeout_send_rst': 'enable',
+            'traffic_shaper': 'test_value_53',
+            'traffic_shaper_reverse': 'test_value_54',
+            'utm_status': 'enable',
+            'uuid': 'test_value_56',
+            'vlan_cos_fwd': '57',
+            'vlan_cos_rev': '58',
+            'vlan_filter': 'test_value_59',
+            'voip_profile': 'test_value_60',
+            'vpntunnel': 'test_value_61',
+            'webfilter_profile': 'test_value_62'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy6.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'application-list': 'test_value_4',
+        'av-profile': 'test_value_5',
+        'comments': 'test_value_6',
+        'diffserv-forward': 'enable',
+        'diffserv-reverse': 'enable',
+        'diffservcode-forward': 'test_value_9',
+        'diffservcode-rev': 'test_value_10',
+        'dlp-sensor': 'test_value_11',
+        'dscp-match': 'enable',
+        'dscp-negate': 'enable',
+        'dscp-value': 'test_value_14',
+        'dsri': 'enable',
+                'dstaddr-negate': 'enable',
+                'firewall-session-dirty': 'check-all',
+                'fixedport': 'enable',
+                'global-label': 'test_value_19',
+                'icap-profile': 'test_value_20',
+                'inbound': 'enable',
+                'ippool': 'enable',
+                'ips-sensor': 'test_value_23',
+                'label': 'test_value_24',
+                'logtraffic': 'all',
+                'logtraffic-start': 'enable',
+                'name': 'default_name_27',
+                'nat': 'enable',
+                'natinbound': 'enable',
+                'natoutbound': 'enable',
+                'outbound': 'enable',
+                'per-ip-shaper': 'test_value_32',
+                'policyid': '33',
+                'profile-group': 'test_value_34',
+                'profile-protocol-options': 'test_value_35',
+                'profile-type': 'single',
+                'replacemsg-override-group': 'test_value_37',
+                'rsso': 'enable',
+                'schedule': 'test_value_39',
+                'send-deny-packet': 'enable',
+                'service-negate': 'enable',
+                'session-ttl': '42',
+                'spamfilter-profile': 'test_value_43',
+                'srcaddr-negate': 'enable',
+                'ssh-filter-profile': 'test_value_45',
+                'ssl-mirror': 'enable',
+                'ssl-ssh-profile': 'test_value_47',
+                'status': 'enable',
+                'tcp-mss-receiver': '49',
+                'tcp-mss-sender': '50',
+                'tcp-session-without-syn': 'all',
+                'timeout-send-rst': 'enable',
+                'traffic-shaper': 'test_value_53',
+                'traffic-shaper-reverse': 'test_value_54',
+                'utm-status': 'enable',
+                'uuid': 'test_value_56',
+                'vlan-cos-fwd': '57',
+                'vlan-cos-rev': '58',
+                'vlan-filter': 'test_value_59',
+                'voip-profile': 'test_value_60',
+                'vpntunnel': 'test_value_61',
+                'webfilter-profile': 'test_value_62'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'policy6', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_policy6_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_policy6': {
+            'action': 'accept',
+            'application_list': 'test_value_4',
+            'av_profile': 'test_value_5',
+            'comments': 'test_value_6',
+            'diffserv_forward': 'enable',
+            'diffserv_reverse': 'enable',
+            'diffservcode_forward': 'test_value_9',
+            'diffservcode_rev': 'test_value_10',
+            'dlp_sensor': 'test_value_11',
+            'dscp_match': 'enable',
+            'dscp_negate': 'enable',
+            'dscp_value': 'test_value_14',
+            'dsri': 'enable',
+            'dstaddr_negate': 'enable',
+            'firewall_session_dirty': 'check-all',
+            'fixedport': 'enable',
+            'global_label': 'test_value_19',
+            'icap_profile': 'test_value_20',
+            'inbound': 'enable',
+            'ippool': 'enable',
+            'ips_sensor': 'test_value_23',
+            'label': 'test_value_24',
+            'logtraffic': 'all',
+            'logtraffic_start': 'enable',
+            'name': 'default_name_27',
+            'nat': 'enable',
+            'natinbound': 'enable',
+            'natoutbound': 'enable',
+            'outbound': 'enable',
+            'per_ip_shaper': 'test_value_32',
+            'policyid': '33',
+            'profile_group': 'test_value_34',
+            'profile_protocol_options': 'test_value_35',
+            'profile_type': 'single',
+            'replacemsg_override_group': 'test_value_37',
+            'rsso': 'enable',
+            'schedule': 'test_value_39',
+            'send_deny_packet': 'enable',
+            'service_negate': 'enable',
+            'session_ttl': '42',
+            'spamfilter_profile': 'test_value_43',
+            'srcaddr_negate': 'enable',
+            'ssh_filter_profile': 'test_value_45',
+            'ssl_mirror': 'enable',
+            'ssl_ssh_profile': 'test_value_47',
+            'status': 'enable',
+            'tcp_mss_receiver': '49',
+            'tcp_mss_sender': '50',
+            'tcp_session_without_syn': 'all',
+            'timeout_send_rst': 'enable',
+            'traffic_shaper': 'test_value_53',
+            'traffic_shaper_reverse': 'test_value_54',
+            'utm_status': 'enable',
+            'uuid': 'test_value_56',
+            'vlan_cos_fwd': '57',
+            'vlan_cos_rev': '58',
+            'vlan_filter': 'test_value_59',
+            'voip_profile': 'test_value_60',
+            'vpntunnel': 'test_value_61',
+            'webfilter_profile': 'test_value_62'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy6.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'application-list': 'test_value_4',
+        'av-profile': 'test_value_5',
+        'comments': 'test_value_6',
+        'diffserv-forward': 'enable',
+        'diffserv-reverse': 'enable',
+        'diffservcode-forward': 'test_value_9',
+        'diffservcode-rev': 'test_value_10',
+        'dlp-sensor': 'test_value_11',
+        'dscp-match': 'enable',
+        'dscp-negate': 'enable',
+        'dscp-value': 'test_value_14',
+        'dsri': 'enable',
+                'dstaddr-negate': 'enable',
+                'firewall-session-dirty': 'check-all',
+                'fixedport': 'enable',
+                'global-label': 'test_value_19',
+                'icap-profile': 'test_value_20',
+                'inbound': 'enable',
+                'ippool': 'enable',
+                'ips-sensor': 'test_value_23',
+                'label': 'test_value_24',
+                'logtraffic': 'all',
+                'logtraffic-start': 'enable',
+                'name': 'default_name_27',
+                'nat': 'enable',
+                'natinbound': 'enable',
+                'natoutbound': 'enable',
+                'outbound': 'enable',
+                'per-ip-shaper': 'test_value_32',
+                'policyid': '33',
+                'profile-group': 'test_value_34',
+                'profile-protocol-options': 'test_value_35',
+                'profile-type': 'single',
+                'replacemsg-override-group': 'test_value_37',
+                'rsso': 'enable',
+                'schedule': 'test_value_39',
+                'send-deny-packet': 'enable',
+                'service-negate': 'enable',
+                'session-ttl': '42',
+                'spamfilter-profile': 'test_value_43',
+                'srcaddr-negate': 'enable',
+                'ssh-filter-profile': 'test_value_45',
+                'ssl-mirror': 'enable',
+                'ssl-ssh-profile': 'test_value_47',
+                'status': 'enable',
+                'tcp-mss-receiver': '49',
+                'tcp-mss-sender': '50',
+                'tcp-session-without-syn': 'all',
+                'timeout-send-rst': 'enable',
+                'traffic-shaper': 'test_value_53',
+                'traffic-shaper-reverse': 'test_value_54',
+                'utm-status': 'enable',
+                'uuid': 'test_value_56',
+                'vlan-cos-fwd': '57',
+                'vlan-cos-rev': '58',
+                'vlan-filter': 'test_value_59',
+                'voip-profile': 'test_value_60',
+                'vpntunnel': 'test_value_61',
+                'webfilter-profile': 'test_value_62'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'policy6', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_policy6_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_policy6': {
+            'action': 'accept',
+            'application_list': 'test_value_4',
+            'av_profile': 'test_value_5',
+            'comments': 'test_value_6',
+            'diffserv_forward': 'enable',
+            'diffserv_reverse': 'enable',
+            'diffservcode_forward': 'test_value_9',
+            'diffservcode_rev': 'test_value_10',
+            'dlp_sensor': 'test_value_11',
+            'dscp_match': 'enable',
+            'dscp_negate': 'enable',
+            'dscp_value': 'test_value_14',
+            'dsri': 'enable',
+            'dstaddr_negate': 'enable',
+            'firewall_session_dirty': 'check-all',
+            'fixedport': 'enable',
+            'global_label': 'test_value_19',
+            'icap_profile': 'test_value_20',
+            'inbound': 'enable',
+            'ippool': 'enable',
+            'ips_sensor': 'test_value_23',
+            'label': 'test_value_24',
+            'logtraffic': 'all',
+            'logtraffic_start': 'enable',
+            'name': 'default_name_27',
+            'nat': 'enable',
+            'natinbound': 'enable',
+            'natoutbound': 'enable',
+            'outbound': 'enable',
+            'per_ip_shaper': 'test_value_32',
+            'policyid': '33',
+            'profile_group': 'test_value_34',
+            'profile_protocol_options': 'test_value_35',
+            'profile_type': 'single',
+            'replacemsg_override_group': 'test_value_37',
+            'rsso': 'enable',
+            'schedule': 'test_value_39',
+            'send_deny_packet': 'enable',
+            'service_negate': 'enable',
+            'session_ttl': '42',
+            'spamfilter_profile': 'test_value_43',
+            'srcaddr_negate': 'enable',
+            'ssh_filter_profile': 'test_value_45',
+            'ssl_mirror': 'enable',
+            'ssl_ssh_profile': 'test_value_47',
+            'status': 'enable',
+            'tcp_mss_receiver': '49',
+            'tcp_mss_sender': '50',
+            'tcp_session_without_syn': 'all',
+            'timeout_send_rst': 'enable',
+            'traffic_shaper': 'test_value_53',
+            'traffic_shaper_reverse': 'test_value_54',
+            'utm_status': 'enable',
+            'uuid': 'test_value_56',
+            'vlan_cos_fwd': '57',
+            'vlan_cos_rev': '58',
+            'vlan_filter': 'test_value_59',
+            'voip_profile': 'test_value_60',
+            'vpntunnel': 'test_value_61',
+            'webfilter_profile': 'test_value_62'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy6.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'policy6', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_policy6_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_policy6': {
+            'action': 'accept',
+            'application_list': 'test_value_4',
+            'av_profile': 'test_value_5',
+            'comments': 'test_value_6',
+            'diffserv_forward': 'enable',
+            'diffserv_reverse': 'enable',
+            'diffservcode_forward': 'test_value_9',
+            'diffservcode_rev': 'test_value_10',
+            'dlp_sensor': 'test_value_11',
+            'dscp_match': 'enable',
+            'dscp_negate': 'enable',
+            'dscp_value': 'test_value_14',
+            'dsri': 'enable',
+            'dstaddr_negate': 'enable',
+            'firewall_session_dirty': 'check-all',
+            'fixedport': 'enable',
+            'global_label': 'test_value_19',
+            'icap_profile': 'test_value_20',
+            'inbound': 'enable',
+            'ippool': 'enable',
+            'ips_sensor': 'test_value_23',
+            'label': 'test_value_24',
+            'logtraffic': 'all',
+            'logtraffic_start': 'enable',
+            'name': 'default_name_27',
+            'nat': 'enable',
+            'natinbound': 'enable',
+            'natoutbound': 'enable',
+            'outbound': 'enable',
+            'per_ip_shaper': 'test_value_32',
+            'policyid': '33',
+            'profile_group': 'test_value_34',
+            'profile_protocol_options': 'test_value_35',
+            'profile_type': 'single',
+            'replacemsg_override_group': 'test_value_37',
+            'rsso': 'enable',
+            'schedule': 'test_value_39',
+            'send_deny_packet': 'enable',
+            'service_negate': 'enable',
+            'session_ttl': '42',
+            'spamfilter_profile': 'test_value_43',
+            'srcaddr_negate': 'enable',
+            'ssh_filter_profile': 'test_value_45',
+            'ssl_mirror': 'enable',
+            'ssl_ssh_profile': 'test_value_47',
+            'status': 'enable',
+            'tcp_mss_receiver': '49',
+            'tcp_mss_sender': '50',
+            'tcp_session_without_syn': 'all',
+            'timeout_send_rst': 'enable',
+            'traffic_shaper': 'test_value_53',
+            'traffic_shaper_reverse': 'test_value_54',
+            'utm_status': 'enable',
+            'uuid': 'test_value_56',
+            'vlan_cos_fwd': '57',
+            'vlan_cos_rev': '58',
+            'vlan_filter': 'test_value_59',
+            'voip_profile': 'test_value_60',
+            'vpntunnel': 'test_value_61',
+            'webfilter_profile': 'test_value_62'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy6.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'policy6', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_policy6_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_policy6': {
+            'action': 'accept',
+            'application_list': 'test_value_4',
+            'av_profile': 'test_value_5',
+            'comments': 'test_value_6',
+            'diffserv_forward': 'enable',
+            'diffserv_reverse': 'enable',
+            'diffservcode_forward': 'test_value_9',
+            'diffservcode_rev': 'test_value_10',
+            'dlp_sensor': 'test_value_11',
+            'dscp_match': 'enable',
+            'dscp_negate': 'enable',
+            'dscp_value': 'test_value_14',
+            'dsri': 'enable',
+            'dstaddr_negate': 'enable',
+            'firewall_session_dirty': 'check-all',
+            'fixedport': 'enable',
+            'global_label': 'test_value_19',
+            'icap_profile': 'test_value_20',
+            'inbound': 'enable',
+            'ippool': 'enable',
+            'ips_sensor': 'test_value_23',
+            'label': 'test_value_24',
+            'logtraffic': 'all',
+            'logtraffic_start': 'enable',
+            'name': 'default_name_27',
+            'nat': 'enable',
+            'natinbound': 'enable',
+            'natoutbound': 'enable',
+            'outbound': 'enable',
+            'per_ip_shaper': 'test_value_32',
+            'policyid': '33',
+            'profile_group': 'test_value_34',
+            'profile_protocol_options': 'test_value_35',
+            'profile_type': 'single',
+            'replacemsg_override_group': 'test_value_37',
+            'rsso': 'enable',
+            'schedule': 'test_value_39',
+            'send_deny_packet': 'enable',
+            'service_negate': 'enable',
+            'session_ttl': '42',
+            'spamfilter_profile': 'test_value_43',
+            'srcaddr_negate': 'enable',
+            'ssh_filter_profile': 'test_value_45',
+            'ssl_mirror': 'enable',
+            'ssl_ssh_profile': 'test_value_47',
+            'status': 'enable',
+            'tcp_mss_receiver': '49',
+            'tcp_mss_sender': '50',
+            'tcp_session_without_syn': 'all',
+            'timeout_send_rst': 'enable',
+            'traffic_shaper': 'test_value_53',
+            'traffic_shaper_reverse': 'test_value_54',
+            'utm_status': 'enable',
+            'uuid': 'test_value_56',
+            'vlan_cos_fwd': '57',
+            'vlan_cos_rev': '58',
+            'vlan_filter': 'test_value_59',
+            'voip_profile': 'test_value_60',
+            'vpntunnel': 'test_value_61',
+            'webfilter_profile': 'test_value_62'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy6.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'application-list': 'test_value_4',
+        'av-profile': 'test_value_5',
+        'comments': 'test_value_6',
+        'diffserv-forward': 'enable',
+        'diffserv-reverse': 'enable',
+        'diffservcode-forward': 'test_value_9',
+        'diffservcode-rev': 'test_value_10',
+        'dlp-sensor': 'test_value_11',
+        'dscp-match': 'enable',
+        'dscp-negate': 'enable',
+        'dscp-value': 'test_value_14',
+        'dsri': 'enable',
+                'dstaddr-negate': 'enable',
+                'firewall-session-dirty': 'check-all',
+                'fixedport': 'enable',
+                'global-label': 'test_value_19',
+                'icap-profile': 'test_value_20',
+                'inbound': 'enable',
+                'ippool': 'enable',
+                'ips-sensor': 'test_value_23',
+                'label': 'test_value_24',
+                'logtraffic': 'all',
+                'logtraffic-start': 'enable',
+                'name': 'default_name_27',
+                'nat': 'enable',
+                'natinbound': 'enable',
+                'natoutbound': 'enable',
+                'outbound': 'enable',
+                'per-ip-shaper': 'test_value_32',
+                'policyid': '33',
+                'profile-group': 'test_value_34',
+                'profile-protocol-options': 'test_value_35',
+                'profile-type': 'single',
+                'replacemsg-override-group': 'test_value_37',
+                'rsso': 'enable',
+                'schedule': 'test_value_39',
+                'send-deny-packet': 'enable',
+                'service-negate': 'enable',
+                'session-ttl': '42',
+                'spamfilter-profile': 'test_value_43',
+                'srcaddr-negate': 'enable',
+                'ssh-filter-profile': 'test_value_45',
+                'ssl-mirror': 'enable',
+                'ssl-ssh-profile': 'test_value_47',
+                'status': 'enable',
+                'tcp-mss-receiver': '49',
+                'tcp-mss-sender': '50',
+                'tcp-session-without-syn': 'all',
+                'timeout-send-rst': 'enable',
+                'traffic-shaper': 'test_value_53',
+                'traffic-shaper-reverse': 'test_value_54',
+                'utm-status': 'enable',
+                'uuid': 'test_value_56',
+                'vlan-cos-fwd': '57',
+                'vlan-cos-rev': '58',
+                'vlan-filter': 'test_value_59',
+                'voip-profile': 'test_value_60',
+                'vpntunnel': 'test_value_61',
+                'webfilter-profile': 'test_value_62'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'policy6', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_firewall_policy6_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_policy6': {
+            'random_attribute_not_valid': 'tag',
+            'action': 'accept',
+            'application_list': 'test_value_4',
+            'av_profile': 'test_value_5',
+            'comments': 'test_value_6',
+            'diffserv_forward': 'enable',
+            'diffserv_reverse': 'enable',
+            'diffservcode_forward': 'test_value_9',
+            'diffservcode_rev': 'test_value_10',
+            'dlp_sensor': 'test_value_11',
+            'dscp_match': 'enable',
+            'dscp_negate': 'enable',
+            'dscp_value': 'test_value_14',
+            'dsri': 'enable',
+            'dstaddr_negate': 'enable',
+            'firewall_session_dirty': 'check-all',
+            'fixedport': 'enable',
+            'global_label': 'test_value_19',
+            'icap_profile': 'test_value_20',
+            'inbound': 'enable',
+            'ippool': 'enable',
+            'ips_sensor': 'test_value_23',
+            'label': 'test_value_24',
+            'logtraffic': 'all',
+            'logtraffic_start': 'enable',
+            'name': 'default_name_27',
+            'nat': 'enable',
+            'natinbound': 'enable',
+            'natoutbound': 'enable',
+            'outbound': 'enable',
+            'per_ip_shaper': 'test_value_32',
+            'policyid': '33',
+            'profile_group': 'test_value_34',
+            'profile_protocol_options': 'test_value_35',
+            'profile_type': 'single',
+            'replacemsg_override_group': 'test_value_37',
+            'rsso': 'enable',
+            'schedule': 'test_value_39',
+            'send_deny_packet': 'enable',
+            'service_negate': 'enable',
+            'session_ttl': '42',
+            'spamfilter_profile': 'test_value_43',
+            'srcaddr_negate': 'enable',
+            'ssh_filter_profile': 'test_value_45',
+            'ssl_mirror': 'enable',
+            'ssl_ssh_profile': 'test_value_47',
+            'status': 'enable',
+            'tcp_mss_receiver': '49',
+            'tcp_mss_sender': '50',
+            'tcp_session_without_syn': 'all',
+            'timeout_send_rst': 'enable',
+            'traffic_shaper': 'test_value_53',
+            'traffic_shaper_reverse': 'test_value_54',
+            'utm_status': 'enable',
+            'uuid': 'test_value_56',
+            'vlan_cos_fwd': '57',
+            'vlan_cos_rev': '58',
+            'vlan_filter': 'test_value_59',
+            'voip_profile': 'test_value_60',
+            'vpntunnel': 'test_value_61',
+            'webfilter_profile': 'test_value_62'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy6.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'application-list': 'test_value_4',
+        'av-profile': 'test_value_5',
+        'comments': 'test_value_6',
+        'diffserv-forward': 'enable',
+        'diffserv-reverse': 'enable',
+        'diffservcode-forward': 'test_value_9',
+        'diffservcode-rev': 'test_value_10',
+        'dlp-sensor': 'test_value_11',
+        'dscp-match': 'enable',
+        'dscp-negate': 'enable',
+        'dscp-value': 'test_value_14',
+        'dsri': 'enable',
+                'dstaddr-negate': 'enable',
+                'firewall-session-dirty': 'check-all',
+                'fixedport': 'enable',
+                'global-label': 'test_value_19',
+                'icap-profile': 'test_value_20',
+                'inbound': 'enable',
+                'ippool': 'enable',
+                'ips-sensor': 'test_value_23',
+                'label': 'test_value_24',
+                'logtraffic': 'all',
+                'logtraffic-start': 'enable',
+                'name': 'default_name_27',
+                'nat': 'enable',
+                'natinbound': 'enable',
+                'natoutbound': 'enable',
+                'outbound': 'enable',
+                'per-ip-shaper': 'test_value_32',
+                'policyid': '33',
+                'profile-group': 'test_value_34',
+                'profile-protocol-options': 'test_value_35',
+                'profile-type': 'single',
+                'replacemsg-override-group': 'test_value_37',
+                'rsso': 'enable',
+                'schedule': 'test_value_39',
+                'send-deny-packet': 'enable',
+                'service-negate': 'enable',
+                'session-ttl': '42',
+                'spamfilter-profile': 'test_value_43',
+                'srcaddr-negate': 'enable',
+                'ssh-filter-profile': 'test_value_45',
+                'ssl-mirror': 'enable',
+                'ssl-ssh-profile': 'test_value_47',
+                'status': 'enable',
+                'tcp-mss-receiver': '49',
+                'tcp-mss-sender': '50',
+                'tcp-session-without-syn': 'all',
+                'timeout-send-rst': 'enable',
+                'traffic-shaper': 'test_value_53',
+                'traffic-shaper-reverse': 'test_value_54',
+                'utm-status': 'enable',
+                'uuid': 'test_value_56',
+                'vlan-cos-fwd': '57',
+                'vlan-cos-rev': '58',
+                'vlan-filter': 'test_value_59',
+                'voip-profile': 'test_value_60',
+                'vpntunnel': 'test_value_61',
+                'webfilter-profile': 'test_value_62'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'policy6', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_firewall_policy64.py b/test/units/modules/network/fortios/test_fortios_firewall_policy64.py
new file mode 100644
index 0000000000..a479b61b9e
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_firewall_policy64.py
@@ -0,0 +1,359 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_firewall_policy64
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_firewall_policy64.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_firewall_policy64_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_policy64': {
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'dstintf': 'test_value_5',
+            'fixedport': 'enable',
+            'ippool': 'enable',
+            'logtraffic': 'enable',
+            'per_ip_shaper': 'test_value_9',
+            'permit_any_host': 'enable',
+            'policyid': '11',
+            'schedule': 'test_value_12',
+            'srcintf': 'test_value_13',
+            'status': 'enable',
+            'tcp_mss_receiver': '15',
+            'tcp_mss_sender': '16',
+            'traffic_shaper': 'test_value_17',
+            'traffic_shaper_reverse': 'test_value_18',
+            'uuid': 'test_value_19'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy64.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'comments': 'test_value_4',
+        'dstintf': 'test_value_5',
+        'fixedport': 'enable',
+        'ippool': 'enable',
+        'logtraffic': 'enable',
+        'per-ip-shaper': 'test_value_9',
+        'permit-any-host': 'enable',
+        'policyid': '11',
+        'schedule': 'test_value_12',
+        'srcintf': 'test_value_13',
+        'status': 'enable',
+        'tcp-mss-receiver': '15',
+        'tcp-mss-sender': '16',
+        'traffic-shaper': 'test_value_17',
+        'traffic-shaper-reverse': 'test_value_18',
+        'uuid': 'test_value_19'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'policy64', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_policy64_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_policy64': {
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'dstintf': 'test_value_5',
+            'fixedport': 'enable',
+            'ippool': 'enable',
+            'logtraffic': 'enable',
+            'per_ip_shaper': 'test_value_9',
+            'permit_any_host': 'enable',
+            'policyid': '11',
+            'schedule': 'test_value_12',
+            'srcintf': 'test_value_13',
+            'status': 'enable',
+            'tcp_mss_receiver': '15',
+            'tcp_mss_sender': '16',
+            'traffic_shaper': 'test_value_17',
+            'traffic_shaper_reverse': 'test_value_18',
+            'uuid': 'test_value_19'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy64.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'comments': 'test_value_4',
+        'dstintf': 'test_value_5',
+        'fixedport': 'enable',
+        'ippool': 'enable',
+        'logtraffic': 'enable',
+        'per-ip-shaper': 'test_value_9',
+        'permit-any-host': 'enable',
+        'policyid': '11',
+        'schedule': 'test_value_12',
+        'srcintf': 'test_value_13',
+        'status': 'enable',
+        'tcp-mss-receiver': '15',
+        'tcp-mss-sender': '16',
+        'traffic-shaper': 'test_value_17',
+        'traffic-shaper-reverse': 'test_value_18',
+        'uuid': 'test_value_19'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'policy64', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_policy64_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_policy64': {
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'dstintf': 'test_value_5',
+            'fixedport': 'enable',
+            'ippool': 'enable',
+            'logtraffic': 'enable',
+            'per_ip_shaper': 'test_value_9',
+            'permit_any_host': 'enable',
+            'policyid': '11',
+            'schedule': 'test_value_12',
+            'srcintf': 'test_value_13',
+            'status': 'enable',
+            'tcp_mss_receiver': '15',
+            'tcp_mss_sender': '16',
+            'traffic_shaper': 'test_value_17',
+            'traffic_shaper_reverse': 'test_value_18',
+            'uuid': 'test_value_19'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy64.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'policy64', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_policy64_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_policy64': {
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'dstintf': 'test_value_5',
+            'fixedport': 'enable',
+            'ippool': 'enable',
+            'logtraffic': 'enable',
+            'per_ip_shaper': 'test_value_9',
+            'permit_any_host': 'enable',
+            'policyid': '11',
+            'schedule': 'test_value_12',
+            'srcintf': 'test_value_13',
+            'status': 'enable',
+            'tcp_mss_receiver': '15',
+            'tcp_mss_sender': '16',
+            'traffic_shaper': 'test_value_17',
+            'traffic_shaper_reverse': 'test_value_18',
+            'uuid': 'test_value_19'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy64.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'policy64', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_policy64_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_policy64': {
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'dstintf': 'test_value_5',
+            'fixedport': 'enable',
+            'ippool': 'enable',
+            'logtraffic': 'enable',
+            'per_ip_shaper': 'test_value_9',
+            'permit_any_host': 'enable',
+            'policyid': '11',
+            'schedule': 'test_value_12',
+            'srcintf': 'test_value_13',
+            'status': 'enable',
+            'tcp_mss_receiver': '15',
+            'tcp_mss_sender': '16',
+            'traffic_shaper': 'test_value_17',
+            'traffic_shaper_reverse': 'test_value_18',
+            'uuid': 'test_value_19'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy64.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'comments': 'test_value_4',
+        'dstintf': 'test_value_5',
+        'fixedport': 'enable',
+        'ippool': 'enable',
+        'logtraffic': 'enable',
+        'per-ip-shaper': 'test_value_9',
+        'permit-any-host': 'enable',
+        'policyid': '11',
+        'schedule': 'test_value_12',
+        'srcintf': 'test_value_13',
+        'status': 'enable',
+        'tcp-mss-receiver': '15',
+        'tcp-mss-sender': '16',
+        'traffic-shaper': 'test_value_17',
+        'traffic-shaper-reverse': 'test_value_18',
+        'uuid': 'test_value_19'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'policy64', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_firewall_policy64_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_policy64': {
+            'random_attribute_not_valid': 'tag',
+            'action': 'accept',
+            'comments': 'test_value_4',
+            'dstintf': 'test_value_5',
+            'fixedport': 'enable',
+            'ippool': 'enable',
+            'logtraffic': 'enable',
+            'per_ip_shaper': 'test_value_9',
+            'permit_any_host': 'enable',
+            'policyid': '11',
+            'schedule': 'test_value_12',
+            'srcintf': 'test_value_13',
+            'status': 'enable',
+            'tcp_mss_receiver': '15',
+            'tcp_mss_sender': '16',
+            'traffic_shaper': 'test_value_17',
+            'traffic_shaper_reverse': 'test_value_18',
+            'uuid': 'test_value_19'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_policy64.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'action': 'accept',
+        'comments': 'test_value_4',
+        'dstintf': 'test_value_5',
+        'fixedport': 'enable',
+        'ippool': 'enable',
+        'logtraffic': 'enable',
+        'per-ip-shaper': 'test_value_9',
+        'permit-any-host': 'enable',
+        'policyid': '11',
+        'schedule': 'test_value_12',
+        'srcintf': 'test_value_13',
+        'status': 'enable',
+        'tcp-mss-receiver': '15',
+        'tcp-mss-sender': '16',
+        'traffic-shaper': 'test_value_17',
+        'traffic-shaper-reverse': 'test_value_18',
+        'uuid': 'test_value_19'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'policy64', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_firewall_profile_group.py b/test/units/modules/network/fortios/test_fortios_firewall_profile_group.py
new file mode 100644
index 0000000000..fc13e888b1
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_firewall_profile_group.py
@@ -0,0 +1,329 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_firewall_profile_group
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_firewall_profile_group.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_firewall_profile_group_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_profile_group': {
+            'application_list': 'test_value_3',
+            'av_profile': 'test_value_4',
+            'dlp_sensor': 'test_value_5',
+            'dnsfilter_profile': 'test_value_6',
+            'icap_profile': 'test_value_7',
+            'ips_sensor': 'test_value_8',
+            'name': 'default_name_9',
+            'profile_protocol_options': 'test_value_10',
+            'spamfilter_profile': 'test_value_11',
+            'ssh_filter_profile': 'test_value_12',
+            'ssl_ssh_profile': 'test_value_13',
+            'voip_profile': 'test_value_14',
+            'waf_profile': 'test_value_15',
+            'webfilter_profile': 'test_value_16'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_profile_group.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'application-list': 'test_value_3',
+        'av-profile': 'test_value_4',
+        'dlp-sensor': 'test_value_5',
+        'dnsfilter-profile': 'test_value_6',
+        'icap-profile': 'test_value_7',
+        'ips-sensor': 'test_value_8',
+        'name': 'default_name_9',
+                'profile-protocol-options': 'test_value_10',
+                'spamfilter-profile': 'test_value_11',
+                'ssh-filter-profile': 'test_value_12',
+                'ssl-ssh-profile': 'test_value_13',
+                'voip-profile': 'test_value_14',
+                'waf-profile': 'test_value_15',
+                'webfilter-profile': 'test_value_16'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'profile-group', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_profile_group_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_profile_group': {
+            'application_list': 'test_value_3',
+            'av_profile': 'test_value_4',
+            'dlp_sensor': 'test_value_5',
+            'dnsfilter_profile': 'test_value_6',
+            'icap_profile': 'test_value_7',
+            'ips_sensor': 'test_value_8',
+            'name': 'default_name_9',
+            'profile_protocol_options': 'test_value_10',
+            'spamfilter_profile': 'test_value_11',
+            'ssh_filter_profile': 'test_value_12',
+            'ssl_ssh_profile': 'test_value_13',
+            'voip_profile': 'test_value_14',
+            'waf_profile': 'test_value_15',
+            'webfilter_profile': 'test_value_16'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_profile_group.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'application-list': 'test_value_3',
+        'av-profile': 'test_value_4',
+        'dlp-sensor': 'test_value_5',
+        'dnsfilter-profile': 'test_value_6',
+        'icap-profile': 'test_value_7',
+        'ips-sensor': 'test_value_8',
+        'name': 'default_name_9',
+                'profile-protocol-options': 'test_value_10',
+                'spamfilter-profile': 'test_value_11',
+                'ssh-filter-profile': 'test_value_12',
+                'ssl-ssh-profile': 'test_value_13',
+                'voip-profile': 'test_value_14',
+                'waf-profile': 'test_value_15',
+                'webfilter-profile': 'test_value_16'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'profile-group', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_profile_group_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_profile_group': {
+            'application_list': 'test_value_3',
+            'av_profile': 'test_value_4',
+            'dlp_sensor': 'test_value_5',
+            'dnsfilter_profile': 'test_value_6',
+            'icap_profile': 'test_value_7',
+            'ips_sensor': 'test_value_8',
+            'name': 'default_name_9',
+            'profile_protocol_options': 'test_value_10',
+            'spamfilter_profile': 'test_value_11',
+            'ssh_filter_profile': 'test_value_12',
+            'ssl_ssh_profile': 'test_value_13',
+            'voip_profile': 'test_value_14',
+            'waf_profile': 'test_value_15',
+            'webfilter_profile': 'test_value_16'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_profile_group.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'profile-group', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_profile_group_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_profile_group': {
+            'application_list': 'test_value_3',
+            'av_profile': 'test_value_4',
+            'dlp_sensor': 'test_value_5',
+            'dnsfilter_profile': 'test_value_6',
+            'icap_profile': 'test_value_7',
+            'ips_sensor': 'test_value_8',
+            'name': 'default_name_9',
+            'profile_protocol_options': 'test_value_10',
+            'spamfilter_profile': 'test_value_11',
+            'ssh_filter_profile': 'test_value_12',
+            'ssl_ssh_profile': 'test_value_13',
+            'voip_profile': 'test_value_14',
+            'waf_profile': 'test_value_15',
+            'webfilter_profile': 'test_value_16'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_profile_group.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'profile-group', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_profile_group_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_profile_group': {
+            'application_list': 'test_value_3',
+            'av_profile': 'test_value_4',
+            'dlp_sensor': 'test_value_5',
+            'dnsfilter_profile': 'test_value_6',
+            'icap_profile': 'test_value_7',
+            'ips_sensor': 'test_value_8',
+            'name': 'default_name_9',
+            'profile_protocol_options': 'test_value_10',
+            'spamfilter_profile': 'test_value_11',
+            'ssh_filter_profile': 'test_value_12',
+            'ssl_ssh_profile': 'test_value_13',
+            'voip_profile': 'test_value_14',
+            'waf_profile': 'test_value_15',
+            'webfilter_profile': 'test_value_16'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_profile_group.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'application-list': 'test_value_3',
+        'av-profile': 'test_value_4',
+        'dlp-sensor': 'test_value_5',
+        'dnsfilter-profile': 'test_value_6',
+        'icap-profile': 'test_value_7',
+        'ips-sensor': 'test_value_8',
+        'name': 'default_name_9',
+                'profile-protocol-options': 'test_value_10',
+                'spamfilter-profile': 'test_value_11',
+                'ssh-filter-profile': 'test_value_12',
+                'ssl-ssh-profile': 'test_value_13',
+                'voip-profile': 'test_value_14',
+                'waf-profile': 'test_value_15',
+                'webfilter-profile': 'test_value_16'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'profile-group', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_firewall_profile_group_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_profile_group': {
+            'random_attribute_not_valid': 'tag',
+            'application_list': 'test_value_3',
+            'av_profile': 'test_value_4',
+            'dlp_sensor': 'test_value_5',
+            'dnsfilter_profile': 'test_value_6',
+            'icap_profile': 'test_value_7',
+            'ips_sensor': 'test_value_8',
+            'name': 'default_name_9',
+            'profile_protocol_options': 'test_value_10',
+            'spamfilter_profile': 'test_value_11',
+            'ssh_filter_profile': 'test_value_12',
+            'ssl_ssh_profile': 'test_value_13',
+            'voip_profile': 'test_value_14',
+            'waf_profile': 'test_value_15',
+            'webfilter_profile': 'test_value_16'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_profile_group.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'application-list': 'test_value_3',
+        'av-profile': 'test_value_4',
+        'dlp-sensor': 'test_value_5',
+        'dnsfilter-profile': 'test_value_6',
+        'icap-profile': 'test_value_7',
+        'ips-sensor': 'test_value_8',
+        'name': 'default_name_9',
+                'profile-protocol-options': 'test_value_10',
+                'spamfilter-profile': 'test_value_11',
+                'ssh-filter-profile': 'test_value_12',
+                'ssl-ssh-profile': 'test_value_13',
+                'voip-profile': 'test_value_14',
+                'waf-profile': 'test_value_15',
+                'webfilter-profile': 'test_value_16'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'profile-group', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
diff --git a/test/units/modules/network/fortios/test_fortios_firewall_profile_protocol_options.py b/test/units/modules/network/fortios/test_fortios_firewall_profile_protocol_options.py
new file mode 100644
index 0000000000..a2749061dc
--- /dev/null
+++ b/test/units/modules/network/fortios/test_fortios_firewall_profile_protocol_options.py
@@ -0,0 +1,249 @@
+# Copyright 2019 Fortinet, Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <https://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+from mock import ANY
+from ansible.module_utils.network.fortios.fortios import FortiOSHandler
+
+try:
+    from ansible.modules.network.fortios import fortios_firewall_profile_protocol_options
+except ImportError:
+    pytest.skip("Could not load required modules for testing", allow_module_level=True)
+
+
+@pytest.fixture(autouse=True)
+def connection_mock(mocker):
+    connection_class_mock = mocker.patch('ansible.modules.network.fortios.fortios_firewall_profile_protocol_options.Connection')
+    return connection_class_mock
+
+
+fos_instance = FortiOSHandler(connection_mock)
+
+
+def test_firewall_profile_protocol_options_creation(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_profile_protocol_options': {
+            'comment': 'Optional comments.',
+            'name': 'default_name_4',
+            'oversize_log': 'disable',
+            'replacemsg_group': 'test_value_6',
+            'rpc_over_http': 'enable',
+            'switching_protocols_log': 'disable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_profile_protocol_options.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'comment': 'Optional comments.',
+        'name': 'default_name_4',
+                'oversize-log': 'disable',
+                'replacemsg-group': 'test_value_6',
+                'rpc-over-http': 'enable',
+                'switching-protocols-log': 'disable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'profile-protocol-options', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_profile_protocol_options_creation_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_profile_protocol_options': {
+            'comment': 'Optional comments.',
+            'name': 'default_name_4',
+            'oversize_log': 'disable',
+            'replacemsg_group': 'test_value_6',
+            'rpc_over_http': 'enable',
+            'switching_protocols_log': 'disable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_profile_protocol_options.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'comment': 'Optional comments.',
+        'name': 'default_name_4',
+                'oversize-log': 'disable',
+                'replacemsg-group': 'test_value_6',
+                'rpc-over-http': 'enable',
+                'switching-protocols-log': 'disable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'profile-protocol-options', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_profile_protocol_options_removal(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_profile_protocol_options': {
+            'comment': 'Optional comments.',
+            'name': 'default_name_4',
+            'oversize_log': 'disable',
+            'replacemsg_group': 'test_value_6',
+            'rpc_over_http': 'enable',
+            'switching_protocols_log': 'disable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_profile_protocol_options.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'profile-protocol-options', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
+
+
+def test_firewall_profile_protocol_options_deletion_fails(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    delete_method_result = {'status': 'error', 'http_method': 'POST', 'http_status': 500}
+    delete_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.delete', return_value=delete_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'absent',
+        'firewall_profile_protocol_options': {
+            'comment': 'Optional comments.',
+            'name': 'default_name_4',
+            'oversize_log': 'disable',
+            'replacemsg_group': 'test_value_6',
+            'rpc_over_http': 'enable',
+            'switching_protocols_log': 'disable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_profile_protocol_options.fortios_firewall(input_data, fos_instance)
+
+    delete_method_mock.assert_called_with('firewall', 'profile-protocol-options', mkey=ANY, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 500
+
+
+def test_firewall_profile_protocol_options_idempotent(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'error', 'http_method': 'DELETE', 'http_status': 404}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_profile_protocol_options': {
+            'comment': 'Optional comments.',
+            'name': 'default_name_4',
+            'oversize_log': 'disable',
+            'replacemsg_group': 'test_value_6',
+            'rpc_over_http': 'enable',
+            'switching_protocols_log': 'disable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_profile_protocol_options.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'comment': 'Optional comments.',
+        'name': 'default_name_4',
+                'oversize-log': 'disable',
+                'replacemsg-group': 'test_value_6',
+                'rpc-over-http': 'enable',
+                'switching-protocols-log': 'disable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'profile-protocol-options', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert not changed
+    assert response['status'] == 'error'
+    assert response['http_status'] == 404
+
+
+def test_firewall_profile_protocol_options_filter_foreign_attributes(mocker):
+    schema_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.schema')
+
+    set_method_result = {'status': 'success', 'http_method': 'POST', 'http_status': 200}
+    set_method_mock = mocker.patch('ansible.module_utils.network.fortios.fortios.FortiOSHandler.set', return_value=set_method_result)
+
+    input_data = {
+        'username': 'admin',
+        'state': 'present',
+        'firewall_profile_protocol_options': {
+            'random_attribute_not_valid': 'tag',
+            'comment': 'Optional comments.',
+            'name': 'default_name_4',
+            'oversize_log': 'disable',
+            'replacemsg_group': 'test_value_6',
+            'rpc_over_http': 'enable',
+            'switching_protocols_log': 'disable'
+        },
+        'vdom': 'root'}
+
+    is_error, changed, response = fortios_firewall_profile_protocol_options.fortios_firewall(input_data, fos_instance)
+
+    expected_data = {
+        'comment': 'Optional comments.',
+        'name': 'default_name_4',
+                'oversize-log': 'disable',
+                'replacemsg-group': 'test_value_6',
+                'rpc-over-http': 'enable',
+                'switching-protocols-log': 'disable'
+    }
+
+    set_method_mock.assert_called_with('firewall', 'profile-protocol-options', data=expected_data, vdom='root')
+    schema_method_mock.assert_not_called()
+    assert not is_error
+    assert changed
+    assert response['status'] == 'success'
+    assert response['http_status'] == 200
