commit e5cc12a64f274e36738fe51d4caa533003ed626b
Author: Riyad Preukschas <riyad@informatik.uni-bremen.de>
Date:   Wed May 27 17:05:07 2020 +0200

    blockinfile - Preserve line endings (#66461)
    
    Fixes #64966
    * Fix "TypeError: splitlines() takes no keyword arguments" on Python2.7
    * Add changelog fragment
    * Don't use `grep -P` for BSD/macOS compatibility
    * Fix sanity checks complaining about test fixtures with mixed line endings
    * Update changelogs/fragments/66461-blockinfile_preserve_line_endings.yaml

diff --git a/changelogs/fragments/66461-blockinfile_preserve_line_endings.yaml b/changelogs/fragments/66461-blockinfile_preserve_line_endings.yaml
new file mode 100644
index 0000000000..d2454b2af9
--- /dev/null
+++ b/changelogs/fragments/66461-blockinfile_preserve_line_endings.yaml
@@ -0,0 +1,2 @@
+bugfixes:
+  - blockinfile - preserve line endings on update (https://github.com/ansible/ansible/issues/64966)
diff --git a/lib/ansible/modules/blockinfile.py b/lib/ansible/modules/blockinfile.py
index 2db20fe5f7..f11d7f8eeb 100644
--- a/lib/ansible/modules/blockinfile.py
+++ b/lib/ansible/modules/blockinfile.py
@@ -237,7 +237,7 @@ def main():
         f = open(path, 'rb')
         original = f.read()
         f.close()
-        lines = original.splitlines()
+        lines = original.splitlines(True)
 
     diff = {'before': '',
             'after': '',
@@ -266,13 +266,13 @@ def main():
     else:
         insertre = None
 
-    marker0 = re.sub(b(r'{mark}'), b(params['marker_begin']), marker)
-    marker1 = re.sub(b(r'{mark}'), b(params['marker_end']), marker)
+    marker0 = re.sub(b(r'{mark}'), b(params['marker_begin']), marker) + b(os.linesep)
+    marker1 = re.sub(b(r'{mark}'), b(params['marker_end']), marker) + b(os.linesep)
     if present and block:
         # Escape sequences like '\n' need to be handled in Ansible 1.x
         if module.ansible_version.startswith('1.'):
             block = re.sub('', block, '')
-        blocklines = [marker0] + block.splitlines() + [marker1]
+        blocklines = [marker0] + block.splitlines(True) + [marker1]
     else:
         blocklines = []
 
@@ -306,9 +306,7 @@ def main():
     lines[n0:n0] = blocklines
 
     if lines:
-        result = b('\n').join(lines)
-        if original is None or original.endswith(b('\n')):
-            result += b('\n')
+        result = b''.join(lines)
     else:
         result = b''
 
diff --git a/test/integration/targets/blockinfile/tasks/main.yml b/test/integration/targets/blockinfile/tasks/main.yml
index 86e066d944..5accf5b587 100644
--- a/test/integration/targets/blockinfile/tasks/main.yml
+++ b/test/integration/targets/blockinfile/tasks/main.yml
@@ -47,7 +47,7 @@
   register: blockinfile_test0
 
 - name: check content
-  shell: 'grep -e "Match User ansible-agent" -e "PasswordAuthentication no" {{ output_dir_test }}/sshd_config'
+  shell: 'grep -c -e "Match User ansible-agent" -e "PasswordAuthentication no" {{ output_dir_test }}/sshd_config'
   register: blockinfile_test0_grep
 
 - debug:
@@ -65,7 +65,7 @@
       - 'blockinfile_test0.msg is defined'
       - 'blockinfile_test0.changed'
       - 'blockinfile_test0.msg == "Block inserted"'
-      - 'blockinfile_test0_grep.stdout_lines | length == 2'
+      - 'blockinfile_test0_grep.stdout == "2"'
 
 - name: check idemptotence
   blockinfile:
@@ -112,3 +112,28 @@
       - empty_test_2 is changed
       - "'Block removed' in empty_test_2.msg"
       - empty_test_stat.stat.size == 0
+
+- name: create line_endings_test.txt in the test dir
+  copy:
+    dest: "{{ output_dir_test }}/line_endings_test.txt"
+    # generating the content like this instead of copying a fixture file
+    # prevents sanity checks from warning about mixed line endings
+    content: "unix\nunix\nunix\n\ndos\r\ndos\r\ndos\r\n\nunix\nunix\n# BEGIN ANSIBLE MANAGED BLOCK\ndos\r\n# END ANSIBLE MANAGED BLOCK\nunix\nunix\nunix\nunix\n"
+
+- name: insert/update "dos" configuration block in line_endings_test.txt
+  blockinfile:
+    path: "{{ output_dir_test }}/line_endings_test.txt"
+    block: "dos\r\ndos\r\ndos\r\n"
+  register: blockinfile_test2
+
+- name: check content
+  # using the more precise `grep -Pc "^dos\\r$" ...` fails on BSD/macOS
+  shell: 'grep -c "^dos.$" {{ output_dir_test }}/line_endings_test.txt'
+  register: blockinfile_test2_grep
+
+- name: validate line_endings_test.txt results
+  assert:
+    that:
+      - 'blockinfile_test2 is changed'
+      - 'blockinfile_test2.msg == "Block inserted"'
+      - 'blockinfile_test2_grep.stdout == "6"'
