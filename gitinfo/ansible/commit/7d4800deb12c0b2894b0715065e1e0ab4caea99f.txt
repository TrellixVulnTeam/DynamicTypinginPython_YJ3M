commit 7d4800deb12c0b2894b0715065e1e0ab4caea99f
Author: Mark Chappell <mchappel@redhat.com>
Date:   Mon Nov 18 21:41:52 2019 +0100

    Feature: iam_role tags (#63944)
    
    * iam_role tags support
    
    * Make sure we don't Camel -> Snake tags in our return values
    
    * Minor documentation tweaks
    
    * Add tagging tests
    
    * Make sure we return the state of tags once we updated them
    
    * Update lib/ansible/modules/cloud/amazon/iam_role.py
    
    Co-Authored-By: Felix Fontein <felix@fontein.de>
    
    * Move boto3/botocore before we start making changes

diff --git a/lib/ansible/modules/cloud/amazon/iam_role.py b/lib/ansible/modules/cloud/amazon/iam_role.py
index eefaece25b..dc4f62b000 100644
--- a/lib/ansible/modules/cloud/amazon/iam_role.py
+++ b/lib/ansible/modules/cloud/amazon/iam_role.py
@@ -30,22 +30,23 @@ options:
     type: str
   description:
     description:
-      - Provide a description of the new role
+      - Provide a description of the new role.
     version_added: "2.5"
     type: str
   boundary:
     description:
-      - Add the ARN of an IAM managed policy to restrict the permissions this role can pass on to IAM roles/users that it creates.
-      - Boundaries cannot be set on Instance Profiles, so if this option is specified then C(create_instance_profile) must be false.
+      - The ARN of an IAM managed policy to use to restrict the permissions this role can pass on to IAM roles/users that it creates.
+      - Boundaries cannot be set on Instance Profiles, so if this option is specified then I(create_instance_profile) must be false.
       - This is intended for roles/users that have permissions to create new IAM objects.
       - For more information on boundaries, see U(https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html)
+      - Requires botocore 1.10.57 or above.
     aliases: [boundary_policy_arn]
     version_added: "2.7"
     type: str
   assume_role_policy_document:
     description:
       - The trust relationship policy document that grants an entity permission to assume the role.
-      - "This parameter is required when C(state=present)."
+      - "This parameter is required when I(state=present)."
     type: json
   managed_policy:
     description:
@@ -61,30 +62,42 @@ options:
     type: int
   purge_policies:
     description:
-      - Detaches any managed policies not listed in the "managed_policy" option. Set to false if you want to attach policies elsewhere.
+      - Detaches any managed policies not listed in the I(managed_policy) option. Set to false if you want to attach policies elsewhere.
     default: true
     version_added: "2.5"
     type: bool
   state:
     description:
-      - Create or remove the IAM role
+      - Create or remove the IAM role.
     default: present
     choices: [ present, absent ]
     type: str
   create_instance_profile:
     description:
-      - Creates an IAM instance profile along with the role
+      - Creates an IAM instance profile along with the role.
     default: true
     version_added: "2.5"
     type: bool
   delete_instance_profile:
     description:
       - When deleting a role will also delete the instance profile created with
-        the same name as the role
-      - Only applies when C(state=absent)
+        the same name as the role.
+      - Only applies when I(state=absent).
     default: false
     version_added: "2.10"
     type: bool
+  tags:
+    description:
+      - Tag dict to apply to the queue.
+      - Requires botocore 1.12.46 or above.
+    version_added: "2.10"
+    type: dict
+  purge_tags:
+    description:
+      - Remove tags not listed in I(tags) when tags is specified.
+    default: true
+    version_added: "2.10"
+    type: bool
 requirements: [ botocore, boto3 ]
 extends_documentation_fragment:
   - aws
@@ -94,11 +107,13 @@ extends_documentation_fragment:
 EXAMPLES = '''
 # Note: These examples do not set authentication details, see the AWS Guide for details.
 
-- name: Create a role with description
+- name: Create a role with description and tags
   iam_role:
     name: mynewrole
     assume_role_policy_document: "{{ lookup('file','policy.json') }}"
     description: This is My New Role
+    tags:
+      env: dev
 
 - name: "Create a role and attach a managed policy called 'PowerUserAccess'"
   iam_role:
@@ -178,13 +193,18 @@ iam_role:
                     'policy_name': 'PowerUserAccess'
                 }
             ]
+        tags:
+            description: role tags
+            type: dict
+            returned: always
+            sample: '{"Env": "Prod"}'
 '''
 
 import json
 
 from ansible.module_utils.aws.core import AnsibleAWSModule
-from ansible.module_utils.ec2 import camel_dict_to_snake_dict, ec2_argument_spec, get_aws_connection_info, boto3_conn, compare_policies
-from ansible.module_utils.ec2 import AWSRetry
+from ansible.module_utils.ec2 import camel_dict_to_snake_dict, compare_policies
+from ansible.module_utils.ec2 import AWSRetry, ansible_dict_to_boto3_tag_list, boto3_tag_list_to_ansible_dict, compare_aws_tags
 
 try:
     from botocore.exceptions import ClientError, BotoCoreError
@@ -397,7 +417,12 @@ def create_or_update_role(connection, module):
         role = get_role(connection, module, params['RoleName'])
         role['attached_policies'] = get_attached_policy_list(connection, module, params['RoleName'])
 
-    module.exit_json(changed=changed, iam_role=camel_dict_to_snake_dict(role), **camel_dict_to_snake_dict(role))
+    # Manage tags
+    tags_changed = update_role_tags(connection, module)
+    changed |= tags_changed
+    role['tags'] = get_role_tags(connection, module)
+
+    module.exit_json(changed=changed, iam_role=camel_dict_to_snake_dict(role, ignore_list=['tags']), **camel_dict_to_snake_dict(role, ignore_list=['tags']))
 
 
 def destroy_role(connection, module):
@@ -496,6 +521,44 @@ def get_attached_policy_list(connection, module, name):
         module.fail_json_aws(e, msg="Unable to list attached policies for role {0}".format(name))
 
 
+def get_role_tags(connection, module):
+    role_name = module.params.get('name')
+    if not hasattr(connection, 'list_role_tags'):
+        return {}
+    try:
+        return boto3_tag_list_to_ansible_dict(connection.list_role_tags(RoleName=role_name)['Tags'])
+    except ClientError:
+        return {}
+
+
+def update_role_tags(connection, module):
+    new_tags = module.params.get('tags')
+    if new_tags is None:
+        return False
+
+    role_name = module.params.get('name')
+    purge_tags = module.params.get('purge_tags')
+
+    try:
+        existing_tags = boto3_tag_list_to_ansible_dict(connection.list_role_tags(RoleName=role_name)['Tags'])
+    except (ClientError, KeyError):
+        existing_tags = {}
+
+    tags_to_add, tags_to_remove = compare_aws_tags(existing_tags, new_tags, purge_tags=purge_tags)
+
+    if not module.check_mode:
+        try:
+            if tags_to_remove:
+                connection.untag_role(RoleName=role_name, TagKeys=tags_to_remove)
+            if tags_to_add:
+                connection.tag_role(RoleName=role_name, Tags=ansible_dict_to_boto3_tag_list(tags_to_add))
+        except (ClientError, BotoCoreError) as e:
+            module.fail_json_aws(e, msg='Unable to set tags for role %s' % role_name)
+
+    changed = bool(tags_to_add) or bool(tags_to_remove)
+    return changed
+
+
 def main():
 
     argument_spec = dict(
@@ -510,6 +573,8 @@ def main():
         create_instance_profile=dict(type='bool', default=True),
         delete_instance_profile=dict(type='bool', default=False),
         purge_policies=dict(type='bool', default=True),
+        tags=dict(type='dict'),
+        purge_tags=dict(type='bool', default=True),
     )
     module = AnsibleAWSModule(argument_spec=argument_spec,
                               required_if=[('state', 'present', ['assume_role_policy_document'])],
@@ -520,6 +585,9 @@ def main():
             module.fail_json(msg="When using a boundary policy, `create_instance_profile` must be set to `false`.")
         if not module.params.get('boundary').startswith('arn:aws:iam'):
             module.fail_json(msg="Boundary policy must be an ARN")
+    if module.params.get('tags') is not None and not module.botocore_at_least('1.12.46'):
+        module.fail_json(msg="When managing tags botocore must be at least v1.12.46. "
+                         "Current versions: boto3-{boto3_version} botocore-{botocore_version}".format(**module._gather_versions()))
     if module.params.get('boundary') is not None and not module.botocore_at_least('1.10.57'):
         module.fail_json(msg="When using a boundary policy, botocore must be at least v1.10.57. "
                          "Current versions: boto3-{boto3_version} botocore-{botocore_version}".format(**module._gather_versions()))
diff --git a/lib/ansible/modules/cloud/amazon/iam_role_info.py b/lib/ansible/modules/cloud/amazon/iam_role_info.py
index 8ae4b00ddb..2ea513d4fa 100644
--- a/lib/ansible/modules/cloud/amazon/iam_role_info.py
+++ b/lib/ansible/modules/cloud/amazon/iam_role_info.py
@@ -16,7 +16,7 @@ DOCUMENTATION = '''
 module: iam_role_info
 short_description: Gather information on IAM roles
 description:
-    - Gathers information about IAM roles
+    - Gathers information about IAM roles.
     - This module was called C(iam_role_facts) before Ansible 2.9. The usage did not change.
 version_added: "2.5"
 requirements: [ boto3 ]
@@ -32,7 +32,7 @@ options:
         type: str
     path_prefix:
         description:
-            - Prefix of role C(path) to restrict IAM role search for.
+            - Prefix of role to restrict IAM role search for.
             - Mutually exclusive with I(name).
         type: str
 extends_documentation_fragment:
@@ -61,89 +61,94 @@ iam_roles:
   type: complex
   contains:
     arn:
-      description: Amazon Resource Name for IAM role
+      description: Amazon Resource Name for IAM role.
       returned: always
       type: str
       sample: arn:aws:iam::123456789012:role/AnsibleTestRole
     assume_role_policy_document:
-      description: Policy Document describing what can assume the role
+      description: Policy Document describing what can assume the role.
       returned: always
       type: str
     create_date:
-      description: Date IAM role was created
+      description: Date IAM role was created.
       returned: always
       type: str
       sample: '2017-10-23T00:05:08+00:00'
     inline_policies:
-      description: List of names of inline policies
+      description: List of names of inline policies.
       returned: always
       type: list
       sample: []
     managed_policies:
-      description: List of attached managed policies
+      description: List of attached managed policies.
       returned: always
       type: complex
       contains:
         policy_arn:
-          description: Amazon Resource Name for the policy
+          description: Amazon Resource Name for the policy.
           returned: always
           type: str
           sample: arn:aws:iam::123456789012:policy/AnsibleTestEC2Policy
         policy_name:
-          description: Name of managed policy
+          description: Name of managed policy.
           returned: always
           type: str
           sample: AnsibleTestEC2Policy
     instance_profiles:
-      description: List of attached instance profiles
+      description: List of attached instance profiles.
       returned: always
       type: complex
       contains:
         arn:
-          description: Amazon Resource Name for the instance profile
+          description: Amazon Resource Name for the instance profile.
           returned: always
           type: str
           sample: arn:aws:iam::123456789012:instance-profile/AnsibleTestEC2Policy
         create_date:
-          description: Date instance profile was created
+          description: Date instance profile was created.
           returned: always
           type: str
           sample: '2017-10-23T00:05:08+00:00'
         instance_profile_id:
-          description: Amazon Identifier for the instance profile
+          description: Amazon Identifier for the instance profile.
           returned: always
           type: str
           sample: AROAII7ABCD123456EFGH
         instance_profile_name:
-          description: Name of instance profile
+          description: Name of instance profile.
           returned: always
           type: str
           sample: AnsibleTestEC2Policy
         path:
-          description: Path of instance profile
+          description: Path of instance profile.
           returned: always
           type: str
           sample: /
         roles:
-          description: List of roles associated with this instance profile
+          description: List of roles associated with this instance profile.
           returned: always
           type: list
           sample: []
     path:
-      description: Path of role
+      description: Path of role.
       returned: always
       type: str
       sample: /
     role_id:
-      description: Amazon Identifier for the role
+      description: Amazon Identifier for the role.
       returned: always
       type: str
       sample: AROAII7ABCD123456EFGH
     role_name:
-      description: Name of the role
+      description: Name of the role.
       returned: always
       type: str
       sample: AnsibleTestRole
+    tags:
+      description: Role tags.
+      type: dict
+      returned: always
+      sample: '{"Env": "Prod"}'
 '''
 
 try:
@@ -153,7 +158,7 @@ except ImportError:
 
 from ansible.module_utils.aws.core import AnsibleAWSModule
 from ansible.module_utils.ec2 import boto3_conn, get_aws_connection_info, ec2_argument_spec, AWSRetry
-from ansible.module_utils.ec2 import camel_dict_to_snake_dict
+from ansible.module_utils.ec2 import boto3_tag_list_to_ansible_dict, camel_dict_to_snake_dict
 
 
 @AWSRetry.exponential_backoff()
@@ -194,6 +199,11 @@ def describe_iam_role(module, client, role):
         role['InstanceProfiles'] = list_iam_instance_profiles_for_role_with_backoff(client, name)
     except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
         module.fail_json_aws(e, msg="Couldn't get instance profiles for role %s" % name)
+    try:
+        role['tags'] = boto3_tag_list_to_ansible_dict(role['Tags'])
+        del role['Tags']
+    except KeyError:
+        role['tags'] = {}
     return role
 
 
@@ -222,7 +232,7 @@ def describe_iam_roles(module, client):
             roles = list_iam_roles_with_backoff(client, **params)['Roles']
         except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
             module.fail_json_aws(e, msg="Couldn't list IAM roles")
-    return [camel_dict_to_snake_dict(describe_iam_role(module, client, role)) for role in roles]
+    return [camel_dict_to_snake_dict(describe_iam_role(module, client, role), ignore_list=['tags']) for role in roles]
 
 
 def main():
diff --git a/test/integration/targets/iam_role/tasks/main.yml b/test/integration/targets/iam_role/tasks/main.yml
index fc8be72a3d..676179bd71 100644
--- a/test/integration/targets/iam_role/tasks/main.yml
+++ b/test/integration/targets/iam_role/tasks/main.yml
@@ -279,6 +279,7 @@
       - '"permissions_boundary" not in role_info.iam_roles[0]'
       - role_info.iam_roles[0].role_id == iam_role.iam_role.role_id
       - role_info.iam_roles[0].role_name == test_role
+      - role_info.iam_roles[0].tags | length == 0
 
   - name: 'Remove IAM Role'
     iam_role:
@@ -372,6 +373,7 @@
       - '"permissions_boundary" not in role_info.iam_roles[0]'
       - role_info.iam_roles[0].role_id == iam_role.iam_role.role_id
       - role_info.iam_roles[0].role_name == test_role
+      - role_info.iam_roles[0].tags | length == 0
 
   - name: 'iam_role_info after Role creation (searching a path)'
     iam_role_info:
@@ -397,6 +399,7 @@
       - role_info.iam_roles[0].path == '{{ test_path }}'
       - role_info.iam_roles[0].role_id == iam_role.iam_role.role_id
       - role_info.iam_roles[0].role_name == test_role
+      - role_info.iam_roles[0].tags | length == 0
 
   - name: 'Remove IAM Role'
     iam_role:
@@ -483,6 +486,7 @@
       - '"permissions_boundary" not in role_info.iam_roles[0]'
       - role_info.iam_roles[0].role_id == iam_role.iam_role.role_id
       - role_info.iam_roles[0].role_name == test_role
+      - role_info.iam_roles[0].tags | length == 0
 
   # ===================================================================
   # Max Session Duration Manipulation
@@ -542,6 +546,7 @@
       - '"permissions_boundary" not in role_info.iam_roles[0]'
       - role_info.iam_roles[0].role_id == iam_role.iam_role.role_id
       - role_info.iam_roles[0].role_name == test_role
+      - role_info.iam_roles[0].tags | length == 0
 
   # ===================================================================
   # Description Manipulation
@@ -602,6 +607,7 @@
       - '"permissions_boundary" not in role_info.iam_roles[0]'
       - role_info.iam_roles[0].role_id == iam_role.iam_role.role_id
       - role_info.iam_roles[0].role_name == test_role
+      - role_info.iam_roles[0].tags | length == 0
 
   - name: 'Update Description (CHECK MODE)'
     iam_role:
@@ -659,6 +665,281 @@
       - '"permissions_boundary" not in role_info.iam_roles[0]'
       - role_info.iam_roles[0].role_id == iam_role.iam_role.role_id
       - role_info.iam_roles[0].role_name == test_role
+      - role_info.iam_roles[0].tags | length == 0
+
+
+  # ===================================================================
+  # Tag Manipulation
+
+  - name: 'Add Tag (CHECK MODE)'
+    iam_role:
+      name: '{{ test_role }}'
+      tags:
+        TagA: ValueA
+    check_mode: yes
+    register: iam_role
+  - assert:
+      that:
+      - iam_role is changed
+
+  - name: 'Add Tag'
+    iam_role:
+      name: '{{ test_role }}'
+      tags:
+        TagA: ValueA
+    register: iam_role
+  - assert:
+      that:
+      - iam_role is changed
+      - iam_role.iam_role.role_name == test_role
+      - iam_role.iam_role.tags | length == 1
+      - '"TagA" in iam_role.iam_role.tags'
+      - iam_role.iam_role.tags.TagA == "ValueA"
+
+  - name: 'Add Tag (no change)'
+    iam_role:
+      name: '{{ test_role }}'
+      tags:
+        TagA: ValueA
+    register: iam_role
+  - assert:
+      that:
+      - iam_role is not changed
+      - iam_role.iam_role.role_name == test_role
+      - '"TagA" in iam_role.iam_role.tags'
+      - iam_role.iam_role.tags.TagA == "ValueA"
+
+  - name: 'iam_role_info after adding Tags'
+    iam_role_info:
+      name: '{{ test_role }}'
+    register: role_info
+  - assert:
+      that:
+      - role_info is succeeded
+      - role_info.iam_roles | length == 1
+      - 'role_info.iam_roles[0].arn.startswith("arn")'
+      - 'role_info.iam_roles[0].arn.endswith("role/" + test_role )'
+      - '"assume_role_policy_document" in role_info.iam_roles[0]'
+      - '"create_date" in role_info.iam_roles[0]'
+      - 'role_info.iam_roles[0].description == "Ansible Test Role (updated) {{ resource_prefix }}"'
+      - role_info.iam_roles[0].inline_policies | length == 0
+      - role_info.iam_roles[0].instance_profiles | length == 1
+      - role_info.iam_roles[0].instance_profiles[0].instance_profile_name == test_role
+      - 'role_info.iam_roles[0].instance_profiles[0].arn.startswith("arn")'
+      - 'role_info.iam_roles[0].instance_profiles[0].arn.endswith("instance-profile/" + test_role)'
+      - role_info.iam_roles[0].managed_policies | length == 0
+      - role_info.iam_roles[0].max_session_duration == 43200
+      - role_info.iam_roles[0].path == '/'
+      - '"permissions_boundary" not in role_info.iam_roles[0]'
+      - role_info.iam_roles[0].role_id == iam_role.iam_role.role_id
+      - role_info.iam_roles[0].role_name == test_role
+      - role_info.iam_roles[0].tags | length == 1
+      - '"TagA" in role_info.iam_roles[0].tags'
+      - role_info.iam_roles[0].tags.TagA == "ValueA"
+
+  - name: 'Update Tag (CHECK MODE)'
+    iam_role:
+      name: '{{ test_role }}'
+      tags:
+        TagA: AValue
+    check_mode: yes
+    register: iam_role
+  - assert:
+      that:
+      - iam_role is changed
+
+  - name: 'Update Tag'
+    iam_role:
+      name: '{{ test_role }}'
+      tags:
+        TagA: AValue
+    register: iam_role
+  - assert:
+      that:
+      - iam_role is changed
+      - iam_role.iam_role.role_name == test_role
+      - '"TagA" in iam_role.iam_role.tags'
+      - iam_role.iam_role.tags.TagA == "AValue"
+
+  - name: 'Update Tag (no change)'
+    iam_role:
+      name: '{{ test_role }}'
+      tags:
+        TagA: AValue
+    register: iam_role
+  - assert:
+      that:
+      - iam_role is not changed
+      - iam_role.iam_role.role_name == test_role
+      - '"TagA" in iam_role.iam_role.tags'
+      - iam_role.iam_role.tags.TagA == "AValue"
+
+  - name: 'iam_role_info after updating Tag'
+    iam_role_info:
+      name: '{{ test_role }}'
+    register: role_info
+  - assert:
+      that:
+      - role_info is succeeded
+      - role_info.iam_roles | length == 1
+      - 'role_info.iam_roles[0].arn.startswith("arn")'
+      - 'role_info.iam_roles[0].arn.endswith("role/" + test_role )'
+      - '"assume_role_policy_document" in role_info.iam_roles[0]'
+      - '"create_date" in role_info.iam_roles[0]'
+      - 'role_info.iam_roles[0].description == "Ansible Test Role (updated) {{ resource_prefix }}"'
+      - role_info.iam_roles[0].inline_policies | length == 0
+      - role_info.iam_roles[0].instance_profiles | length == 1
+      - role_info.iam_roles[0].instance_profiles[0].instance_profile_name == test_role
+      - 'role_info.iam_roles[0].instance_profiles[0].arn.startswith("arn")'
+      - 'role_info.iam_roles[0].instance_profiles[0].arn.endswith("instance-profile/" + test_role)'
+      - role_info.iam_roles[0].managed_policies | length == 0
+      - role_info.iam_roles[0].max_session_duration == 43200
+      - role_info.iam_roles[0].path == '/'
+      - '"permissions_boundary" not in role_info.iam_roles[0]'
+      - role_info.iam_roles[0].role_id == iam_role.iam_role.role_id
+      - role_info.iam_roles[0].role_name == test_role
+      - role_info.iam_roles[0].tags | length == 1
+      - '"TagA" in role_info.iam_roles[0].tags'
+      - role_info.iam_roles[0].tags.TagA == "AValue"
+
+  - name: 'Add second Tag without purge (CHECK MODE)'
+    iam_role:
+      name: '{{ test_role }}'
+      purge_tags: no
+      tags:
+        TagB: ValueB
+    check_mode: yes
+    register: iam_role
+  - assert:
+      that:
+      - iam_role is changed
+
+  - name: 'Add second Tag without purge'
+    iam_role:
+      name: '{{ test_role }}'
+      purge_tags: no
+      tags:
+        TagB: ValueB
+    register: iam_role
+  - assert:
+      that:
+      - iam_role is changed
+      - iam_role.iam_role.role_name == test_role
+      - '"TagB" in iam_role.iam_role.tags'
+      - iam_role.iam_role.tags.TagB == "ValueB"
+
+  - name: 'Add second Tag without purge (no change)'
+    iam_role:
+      name: '{{ test_role }}'
+      purge_tags: no
+      tags:
+        TagB: ValueB
+    register: iam_role
+  - assert:
+      that:
+      - iam_role is not changed
+      - iam_role.iam_role.role_name == test_role
+      - '"TagB" in iam_role.iam_role.tags'
+      - iam_role.iam_role.tags.TagB == "ValueB"
+
+  - name: 'iam_role_info after adding second Tag without purge'
+    iam_role_info:
+      name: '{{ test_role }}'
+    register: role_info
+  - assert:
+      that:
+      - role_info is succeeded
+      - role_info.iam_roles | length == 1
+      - 'role_info.iam_roles[0].arn.startswith("arn")'
+      - 'role_info.iam_roles[0].arn.endswith("role/" + test_role )'
+      - '"assume_role_policy_document" in role_info.iam_roles[0]'
+      - '"create_date" in role_info.iam_roles[0]'
+      - 'role_info.iam_roles[0].description == "Ansible Test Role (updated) {{ resource_prefix }}"'
+      - role_info.iam_roles[0].inline_policies | length == 0
+      - role_info.iam_roles[0].instance_profiles | length == 1
+      - role_info.iam_roles[0].instance_profiles[0].instance_profile_name == test_role
+      - 'role_info.iam_roles[0].instance_profiles[0].arn.startswith("arn")'
+      - 'role_info.iam_roles[0].instance_profiles[0].arn.endswith("instance-profile/" + test_role)'
+      - role_info.iam_roles[0].managed_policies | length == 0
+      - role_info.iam_roles[0].max_session_duration == 43200
+      - role_info.iam_roles[0].path == '/'
+      - '"permissions_boundary" not in role_info.iam_roles[0]'
+      - role_info.iam_roles[0].role_id == iam_role.iam_role.role_id
+      - role_info.iam_roles[0].role_name == test_role
+      - role_info.iam_roles[0].tags | length == 2
+      - '"TagA" in role_info.iam_roles[0].tags'
+      - role_info.iam_roles[0].tags.TagA == "AValue"
+      - '"TagB" in role_info.iam_roles[0].tags'
+      - role_info.iam_roles[0].tags.TagB == "ValueB"
+
+  - name: 'Purge first tag (CHECK MODE)'
+    iam_role:
+      name: '{{ test_role }}'
+      purge_tags: yes
+      tags:
+        TagB: ValueB
+    check_mode: yes
+    register: iam_role
+  - assert:
+      that:
+      - iam_role is changed
+
+  - name: 'Purge first tag'
+    iam_role:
+      name: '{{ test_role }}'
+      purge_tags: yes
+      tags:
+        TagB: ValueB
+    register: iam_role
+  - assert:
+      that:
+      - iam_role is changed
+      - iam_role.iam_role.role_name == test_role
+      - '"TagB" in iam_role.iam_role.tags'
+      - iam_role.iam_role.tags.TagB == "ValueB"
+
+  - name: 'Purge first tag (no change)'
+    iam_role:
+      name: '{{ test_role }}'
+      purge_tags: yes
+      tags:
+        TagB: ValueB
+    register: iam_role
+  - assert:
+      that:
+      - iam_role is not changed
+      - iam_role.iam_role.role_name == test_role
+      - '"TagB" in iam_role.iam_role.tags'
+      - iam_role.iam_role.tags.TagB == "ValueB"
+
+  - name: 'iam_role_info after purging first Tag'
+    iam_role_info:
+      name: '{{ test_role }}'
+    register: role_info
+  - assert:
+      that:
+      - role_info is succeeded
+      - role_info.iam_roles | length == 1
+      - 'role_info.iam_roles[0].arn.startswith("arn")'
+      - 'role_info.iam_roles[0].arn.endswith("role/" + test_role )'
+      - '"assume_role_policy_document" in role_info.iam_roles[0]'
+      - '"create_date" in role_info.iam_roles[0]'
+      - 'role_info.iam_roles[0].description == "Ansible Test Role (updated) {{ resource_prefix }}"'
+      - role_info.iam_roles[0].inline_policies | length == 0
+      - role_info.iam_roles[0].instance_profiles | length == 1
+      - role_info.iam_roles[0].instance_profiles[0].instance_profile_name == test_role
+      - 'role_info.iam_roles[0].instance_profiles[0].arn.startswith("arn")'
+      - 'role_info.iam_roles[0].instance_profiles[0].arn.endswith("instance-profile/" + test_role)'
+      - role_info.iam_roles[0].managed_policies | length == 0
+      - role_info.iam_roles[0].max_session_duration == 43200
+      - role_info.iam_roles[0].path == '/'
+      - '"permissions_boundary" not in role_info.iam_roles[0]'
+      - role_info.iam_roles[0].role_id == iam_role.iam_role.role_id
+      - role_info.iam_roles[0].role_name == test_role
+      - role_info.iam_roles[0].tags | length == 1
+      - '"TagA" not in role_info.iam_roles[0].tags'
+      - '"TagB" in role_info.iam_roles[0].tags'
+      - role_info.iam_roles[0].tags.TagB == "ValueB"
 
 
   # ===================================================================
@@ -726,6 +1007,9 @@
       - '"permissions_boundary" not in role_info.iam_roles[0]'
       - role_info.iam_roles[0].role_id == iam_role.iam_role.role_id
       - role_info.iam_roles[0].role_name == test_role
+      - role_info.iam_roles[0].tags | length == 1
+      - '"TagB" in role_info.iam_roles[0].tags'
+      - role_info.iam_roles[0].tags.TagB == "ValueB"
 
   - name: 'Update Managed Policy without purge (CHECK MODE)'
     iam_role:
@@ -789,6 +1073,9 @@
       - '"permissions_boundary" not in role_info.iam_roles[0]'
       - role_info.iam_roles[0].role_id == iam_role.iam_role.role_id
       - role_info.iam_roles[0].role_name == test_role
+      - role_info.iam_roles[0].tags | length == 1
+      - '"TagB" in role_info.iam_roles[0].tags'
+      - role_info.iam_roles[0].tags.TagB == "ValueB"
 
   # Managed Policies are purged by default
   - name: 'Update Managed Policy with purge (CHECK MODE)'
@@ -850,6 +1137,9 @@
       - '"permissions_boundary" not in role_info.iam_roles[0]'
       - role_info.iam_roles[0].role_id == iam_role.iam_role.role_id
       - role_info.iam_roles[0].role_name == test_role
+      - role_info.iam_roles[0].tags | length == 1
+      - '"TagB" in role_info.iam_roles[0].tags'
+      - role_info.iam_roles[0].tags.TagB == "ValueB"
 
   # ===================================================================
   # Inline Policy (test _info behaviour)
@@ -902,6 +1192,9 @@
       - '"permissions_boundary" not in role_info.iam_roles[0]'
       - role_info.iam_roles[0].role_id == iam_role.iam_role.role_id
       - role_info.iam_roles[0].role_name == test_role
+      - role_info.iam_roles[0].tags | length == 1
+      - '"TagB" in role_info.iam_roles[0].tags'
+      - role_info.iam_roles[0].tags.TagB == "ValueB"
 
   # XXX iam_role fails to remove inline policies before deleting the role
   - name: 'Detach inline policy a'
@@ -1077,6 +1370,8 @@
       - '{{ custom_policy_name }}'
       max_session_duration: 43200
       path: '{{ test_path }}'
+      tags:
+        TagA: 'ValueA'
     check_mode: yes
     register: iam_role
   - assert:
@@ -1108,6 +1403,8 @@
       - '{{ custom_policy_name }}'
       max_session_duration: 43200
       path: '{{ test_path }}'
+      tags:
+        TagA: 'ValueA'
     register: iam_role
   - assert:
       that:
@@ -1140,6 +1437,8 @@
       - '{{ custom_policy_name }}'
       max_session_duration: 43200
       path: '{{ test_path }}'
+      tags:
+        TagA: 'ValueA'
     register: iam_role
   - assert:
       that:
@@ -1170,6 +1469,8 @@
       - role_info.iam_roles[0].permissions_boundary.permissions_boundary_type == 'Policy'
       - role_info.iam_roles[0].role_id == iam_role.iam_role.role_id
       - role_info.iam_roles[0].role_name == test_role
+      - '"TagA" in role_info.iam_roles[0].tags'
+      - role_info.iam_roles[0].tags.TagA == "ValueA"
 
   always:
   # ===================================================================
