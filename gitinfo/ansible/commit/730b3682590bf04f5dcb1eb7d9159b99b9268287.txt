commit 730b3682590bf04f5dcb1eb7d9159b99b9268287
Author: Serge van Ginderachter <serge@vanginderachter.be>
Date:   Wed Jul 17 13:59:41 2013 +0200

    Introduce flat_list lookup plugin
    
    - hosts: localhost
        gather_facts: False
        tasks:
        - debug: msg="{{item}}"
          with_flat_list:
          - a
          - - b
            - c
            - d
            - - e
            - f
            - - g
              - h
          - i
          - j
          - - k
            - l
    
      # note: main list or list (sub)items can also be set as a variable
    
      TASK: [debug msg="{{item}}"] **************************************************
      ok: [localhost] => (item=a) => {"item": "a", "msg": "a"}
      ok: [localhost] => (item=b) => {"item": "b", "msg": "b"}
      ok: [localhost] => (item=c) => {"item": "c", "msg": "c"}
      ok: [localhost] => (item=d) => {"item": "d", "msg": "d"}
      ok: [localhost] => (item=e) => {"item": "e", "msg": "e"}
      ok: [localhost] => (item=f) => {"item": "f", "msg": "f"}
      ok: [localhost] => (item=g) => {"item": "g", "msg": "g"}
      ok: [localhost] => (item=h) => {"item": "h", "msg": "h"}
      ok: [localhost] => (item=i) => {"item": "i", "msg": "i"}
      ok: [localhost] => (item=j) => {"item": "j", "msg": "j"}
      ok: [localhost] => (item=k) => {"item": "k", "msg": "k"}
      ok: [localhost] => (item=l) => {"item": "l", "msg": "l"}

diff --git a/lib/ansible/runner/lookup_plugins/flat_list.py b/lib/ansible/runner/lookup_plugins/flat_list.py
new file mode 100644
index 0000000000..e359f59172
--- /dev/null
+++ b/lib/ansible/runner/lookup_plugins/flat_list.py
@@ -0,0 +1,78 @@
+# (c) 2013, Serge van Ginderachter <serge@vanginderachter.be>
+#
+# This file is part of Ansible
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+
+import ansible.utils as utils
+import ansible.errors as errors
+
+
+def check_list_of_one_list(term):
+    # make sure term is not a list of one (list of one..) item
+    # return the final non list item if so
+
+    if isinstance(term,list) and len(term) == 1:
+        term = term[0]
+        if isinstance(term,list):
+            term = check_list_of_one_list(term)
+
+    return term
+
+
+
+class LookupModule(object):
+
+    def __init__(self, basedir=None, **kwargs):
+        self.basedir = basedir
+
+
+    def flatten(self, terms, inject):
+
+        ret = []
+        for term in terms:
+            term = check_list_of_one_list(term)
+
+            if term == 'None' or term == 'null':
+                # ignore undefined items
+                break
+
+            if isinstance(term, basestring):
+                # convert a variable to a list
+                term2 = utils.listify_lookup_plugin_terms(term, self.basedir, inject)
+                # but avoid converting a plain string to a list of one string
+                if term2 != [ term ]:
+                    term = term2
+
+            if isinstance(term, list):
+                # if it's a list, check recursively for items that are a list
+                term = self.flatten(term, inject)
+                ret.extend(term)
+            else:   
+                ret.append(term)
+
+        return ret
+
+
+    def run(self, terms, inject=None, **kwargs):
+
+        # see if the string represents a list and convert to list if so
+        terms = utils.listify_lookup_plugin_terms(terms, self.basedir, inject)
+
+        if not isinstance(terms, list):
+            raise errors.AnsibleError("with_flat_list expects a list")
+
+        ret = self.flatten(terms, inject)
+        return ret
+
