commit c6710ebf6b0d2bd530421e244475dc4aa7583f65
Author: Chris Archibald <carchi8py@gmail.com>
Date:   Wed Aug 28 08:23:54 2019 -0700

    Auto support logs were not being created (#60901)
    
    * Auto support logs were not being created
    
    * fixes

diff --git a/lib/ansible/modules/storage/netapp/na_ontap_net_subnet.py b/lib/ansible/modules/storage/netapp/na_ontap_net_subnet.py
index d38ceaa45c..96b50f7905 100644
--- a/lib/ansible/modules/storage/netapp/na_ontap_net_subnet.py
+++ b/lib/ansible/modules/storage/netapp/na_ontap_net_subnet.py
@@ -276,6 +276,9 @@ class NetAppOntapSubnet(object):
 
     def apply(self):
         '''Apply action to subnet'''
+        results = netapp_utils.get_cserver(self.server)
+        cserver = netapp_utils.setup_na_ontap_zapi(module=self.module, vserver=results)
+        netapp_utils.ems_log_event("na_ontap_net_subnet", cserver)
         current = self.get_subnet()
         cd_action, rename = None, None
 
diff --git a/test/units/modules/storage/netapp/test_na_ontap_net_subnet.py b/test/units/modules/storage/netapp/test_na_ontap_net_subnet.py
index f317ce3b3e..d18498143f 100644
--- a/test/units/modules/storage/netapp/test_na_ontap_net_subnet.py
+++ b/test/units/modules/storage/netapp/test_na_ontap_net_subnet.py
@@ -62,10 +62,14 @@ class MockONTAPConnection(object):
     def invoke_successfully(self, xml, enable_tunneling):  # pylint: disable=unused-argument
         ''' mock invoke_successfully returning xml data '''
         self.xml_in = xml
-        if self.type == 'subnet':
+        if xml.get_child_by_name('query') is not None and \
+           xml.get_child_by_name('query').get_child_by_name('vserver-info') is not None:
+            # assume this a a cserver request
+            xml = self.build_cserver_info()
+        elif self.type == 'subnet':
             if xml.get_child_by_name('query'):
-                nameObj = xml.get_child_by_name('query').get_child_by_name('net-subnet-info').get_child_by_name('subnet-name')
-                xml_name = nameObj.get_content()
+                name_obj = xml.get_child_by_name('query').get_child_by_name('net-subnet-info').get_child_by_name('subnet-name')
+                xml_name = name_obj.get_content()
                 if xml_name == self.params.get('name'):
                     xml = self.build_subnet_info(self.params)
         elif self.type == 'subnet_fail':
@@ -73,6 +77,21 @@ class MockONTAPConnection(object):
         self.xml_out = xml
         return xml
 
+    @staticmethod
+    def build_cserver_info():
+        ''' build xml data for vserver-info '''
+        xml = netapp_utils.zapi.NaElement('xml')
+        attributes = {
+            'num-records': 1,
+            'attributes-list': {
+                'vserver-info': {
+                    'vserver-name': 'cserver',
+                }
+            }
+        }
+        xml.translate_struct(attributes)
+        return xml
+
     @staticmethod
     def build_subnet_info(data):
         ''' build xml data for subnet-info '''
@@ -143,7 +162,8 @@ class TestMyModule(unittest.TestCase):
         my_obj.server = MockONTAPConnection(kind='subnet', data=data)
         assert my_obj.get_subnet() is not None
 
-    def test_fail_broadcast_domain_modify(self):
+    @patch('ansible.module_utils.netapp.ems_log_event')
+    def test_fail_broadcast_domain_modify(self, mock_ems_log):
         ''' test that boradcast_domain is not alterable '''
         data = self.set_default_args()
         data.update({'broadcast_domain': 'Test'})
@@ -154,8 +174,9 @@ class TestMyModule(unittest.TestCase):
             my_obj.apply()
         assert 'cannot modify broadcast_domain parameter' in exc.value.args[0]['msg']
 
+    @patch('ansible.module_utils.netapp.ems_log_event')
     @patch('ansible.modules.storage.netapp.na_ontap_net_subnet.NetAppOntapSubnet.create_subnet')
-    def test_successful_create(self, create_subnet):
+    def test_successful_create(self, create_subnet, mock_ems_log):
         ''' creating subnet and testing idempotency '''
         print("Create:")
         data = self.set_default_args()
@@ -177,8 +198,9 @@ class TestMyModule(unittest.TestCase):
             my_obj.apply()
         assert not exc.value.args[0]['changed']
 
+    @patch('ansible.module_utils.netapp.ems_log_event')
     @patch('ansible.modules.storage.netapp.na_ontap_net_subnet.NetAppOntapSubnet.rename_subnet')
-    def test_successful_rename(self, rename_subnet):
+    def test_successful_rename(self, rename_subnet, mock_ems_log):
         ''' renaming subnet '''
         data = self.set_default_args()
         data.update({'from_name': data['name'], 'name': 'new_test_subnet'})
@@ -189,8 +211,9 @@ class TestMyModule(unittest.TestCase):
             my_obj.apply()
         assert exc.value.args[0]['changed']
 
+    @patch('ansible.module_utils.netapp.ems_log_event')
     @patch('ansible.modules.storage.netapp.na_ontap_net_subnet.NetAppOntapSubnet.delete_subnet')
-    def test_successful_delete(self, delete_subnet):
+    def test_successful_delete(self, delete_subnet, mock_ems_log):
         ''' deleting subnet and testing idempotency '''
         data = self.set_default_args()
         data['state'] = 'absent'
@@ -209,7 +232,8 @@ class TestMyModule(unittest.TestCase):
             my_obj.apply()
         assert not exc.value.args[0]['changed']
 
-    def test_successful_modify(self):
+    @patch('ansible.module_utils.netapp.ems_log_event')
+    def test_successful_modify(self, mock_ems_log):
         ''' modifying subnet and testing idempotency '''
         data = self.set_default_args()
         data.update({'ip_ranges': ['10.0.0.10-10.0.0.25', '10.0.0.30']})
@@ -220,7 +244,8 @@ class TestMyModule(unittest.TestCase):
             my_obj.apply()
         assert exc.value.args[0]['changed']
 
-    def test_if_all_methods_catch_exception(self):
+    @patch('ansible.module_utils.netapp.ems_log_event')
+    def test_if_all_methods_catch_exception(self, mock_ems_log):
         data = self.set_default_args()
         set_module_args(data)
         my_obj = my_module()
