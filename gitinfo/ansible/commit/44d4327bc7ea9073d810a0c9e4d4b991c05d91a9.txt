commit 44d4327bc7ea9073d810a0c9e4d4b991c05d91a9
Author: Brian Coca <bcoca@ansible.com>
Date:   Wed Jul 11 13:03:25 2018 -0400

    moved to use 'get_option'
    
    also fixed bad str() usage

diff --git a/lib/ansible/plugins/lookup/url.py b/lib/ansible/plugins/lookup/url.py
index c1165fa0da..9b0aedc1be 100644
--- a/lib/ansible/plugins/lookup/url.py
+++ b/lib/ansible/plugins/lookup/url.py
@@ -44,7 +44,7 @@ RETURN = """
 
 from ansible.errors import AnsibleError
 from ansible.module_utils.six.moves.urllib.error import HTTPError, URLError
-from ansible.module_utils._text import to_text
+from ansible.module_utils._text import to_text, to_native
 from ansible.module_utils.urls import open_url, ConnectionError, SSLValidationError
 from ansible.plugins.lookup import LookupBase
 
@@ -59,25 +59,23 @@ class LookupModule(LookupBase):
 
     def run(self, terms, variables=None, **kwargs):
 
-        validate_certs = kwargs.get('validate_certs', True)
-        split_lines = kwargs.get('split_lines', True)
-        use_proxy = kwargs.get('use_proxy', True)
+        self.set_options(direct=kwargs)
 
         ret = []
         for term in terms:
             display.vvvv("url lookup connecting to %s" % term)
             try:
-                response = open_url(term, validate_certs=validate_certs, use_proxy=use_proxy)
+                response = open_url(term, validate_certs=self.get_option('validate_certs'), use_proxy=self.get_option('use_proxy'))
             except HTTPError as e:
-                raise AnsibleError("Received HTTP error for %s : %s" % (term, str(e)))
+                raise AnsibleError("Received HTTP error for %s : %s" % (term, to_native(e)))
             except URLError as e:
-                raise AnsibleError("Failed lookup url for %s : %s" % (term, str(e)))
+                raise AnsibleError("Failed lookup url for %s : %s" % (term, to_native(e)))
             except SSLValidationError as e:
-                raise AnsibleError("Error validating the server's certificate for %s: %s" % (term, str(e)))
+                raise AnsibleError("Error validating the server's certificate for %s: %s" % (term, to_native(e)))
             except ConnectionError as e:
-                raise AnsibleError("Error connecting to %s: %s" % (term, str(e)))
+                raise AnsibleError("Error connecting to %s: %s" % (term, to_native(e)))
 
-            if split_lines:
+            if self.get_option('split_lines'):
                 for line in response.read().splitlines():
                     ret.append(to_text(line))
             else:
