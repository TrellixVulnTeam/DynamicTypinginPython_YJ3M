commit 14c2c787cb6ccf895faae7d2accc413cfae2a0cd
Author: Dave Kasberg <dkasberg@lenovo.com>
Date:   Thu Mar 2 08:07:01 2017 -0800

    New module: cnos_portchannel (#21589)
    
    * cnos_portchannel initial commit
    
    * Fix line length issue in module
    
    * fix whitespace on line 90
    
    * correct yamllint space issue
    
    * Move roles to integration/roles directory and remove aliases file.
    
    * update module short description
    
    * Change module directory name to Lenovo
    
    * change import cnos statement

diff --git a/lib/ansible/modules/network/lenovo/cnos_portchannel.py b/lib/ansible/modules/network/lenovo/cnos_portchannel.py
new file mode 100644
index 0000000000..17a34248be
--- /dev/null
+++ b/lib/ansible/modules/network/lenovo/cnos_portchannel.py
@@ -0,0 +1,515 @@
+#!/usr/bin/python
+# -*- coding: utf-8 -*-
+#
+# Copyright (C) 2017 Lenovo, Inc.
+#
+# This file is part of Ansible
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+#
+# Module to send Port channel commands to Lenovo Switches
+# Lenovo Networking
+#
+ANSIBLE_METADATA = {'status': ['preview'],
+                    'supported_by': 'community',
+                    'version': '1.0'}
+
+DOCUMENTATION = '''
+---
+module: cnos_portchannel
+short_description: Manage portchannel (port aggregation) configuration on devices running Lenovo CNOS
+description:
+    - This module allows you to work with port aggregation related configurations. The operators
+     used are overloaded to ensure control over switch port aggregation configurations. Apart
+     from the regular device connection related attributes, there are five LAG arguments which are
+     overloaded variables that will perform further configurations. They are interfaceArg1, interfaceArg2,
+     interfaceArg3, interfaceArg4, and interfaceArg5. For more details on how to use these arguments, see
+     [Overloaded Variables].
+     This module uses SSH to manage network device configuration.
+     The results of the operation will be placed in a directory named 'results'
+     that must be created by the user in their local directory to where the playbook is run.
+     For more information about this module from Lenovo and customizing it usage for your
+     use cases, please visit our [User Guide](http://systemx.lenovofiles.com/help/index.jsp?topic=%2Fcom.lenovo.switchmgt.ansible.doc%2Fcnos_portchannel.html)
+version_added: "2.3"
+extends_documentation_fragment: cnos
+options:
+    interfaceRange:
+        description:
+            - This specifies the interface range in which the port aggregation is envisaged
+        required: Yes
+        default: Null
+    interfaceArg1:
+        description:
+            - This is an overloaded Port Channel first argument. Usage of this argument can be found is the User Guide referenced above.
+        required: Yes
+        default: Null
+        choices: [aggregation-group, bfd, bridgeport, description, duplex, flowcontrol, ip, ipv6, lacp, lldp,
+        load-interval, mac, mac-address, mac-learn, microburst-detection, mtu, service, service-policy,
+        shutdown, snmp, spanning-tree, speed, storm-control, vlan, vrrp, port-aggregation]
+    interfaceArg2:
+        description:
+            - This is an overloaded Port Channel second argument. Usage of this argument can be found is the User Guide referenced above.
+        required: No
+        default: Null
+        choices: [aggregation-group number, access or mode or trunk, description, auto or full or half,
+        recieve or send, port-priority, suspend-individual, timeout,     receive or transmit or trap-notification,
+        tlv-select, Load interval delay in seconds, counter, Name for the MAC Access List, mac-address in HHHH.HHHH.HHHH format,
+        THRESHOLD  Value in unit of buffer cell, <64-9216>  MTU in bytes-<64-9216> for L2 packet,<576-9216> for
+        L3 IPv4 packet, <1280-9216> for L3 IPv6 packet, enter the instance id, input or output, copp-system-policy,
+        type, 1000  or  10000  or   40000 or   auto, broadcast or multicast or unicast, disable or enable or egress-only,
+        Virtual router identifier, destination-ip or destination-mac or destination-port or source-dest-ip or
+        source-dest-mac or source-dest-port or source-interface or source-ip or source-mac or source-port]
+    interfaceArg3:
+        description:
+            - This is an overloaded Port Channel third argument. Usage of this argument can be found is the User Guide referenced above.
+        required: No
+        default: Null
+        choices: [active or on or passive, on or off, LACP port priority, long or short, link-aggregation or
+        mac-phy-status or management-address or max-frame-size or port-description or port-protocol-vlan or
+        port-vlan or power-mdi or protocol-identity or system-capabilities or system-description or system-name
+        or vid-management or vlan-name, counter for load interval, policy input name, all or Copp class name to attach,
+        qos, queing, Enter the allowed traffic level, ipv6]
+    interfaceArg4:
+        description:
+            - This is an overloaded Port Channel fourth argument. Usage of this argument can be found is the User Guide referenced above.
+        required: No
+        default: Null
+        choices: [key-chain, key-id, keyed-md5 or keyed-sha1 or meticulous-keyed-md5 or meticulous-keyed-sha1 or simple, Interval value in milliseconds,
+         Destination IP (Both IPV4 and IPV6),in or out, MAC address, Time-out value in seconds, class-id, request, Specify the IPv4 address,
+         OSPF area ID as a decimal value, OSPF area ID in IP address format, anycast or secondary, ethernet, vlan,
+         MAC (hardware) address in HHHH.HHHH.HHHH format,
+         Load interval delay in seconds, Specify policy input name, input or output, cost, port-priority, BFD minimum receive interval,source-interface]
+    interfaceArg5:
+        description:
+            - This is an overloaded Port Channel fifth argument. Usage of this argument can be found is the User Guide referenced above.
+        required: No
+        default: Null
+        choices: [name of key-chain,  key-Id Value, key-chain , key-id, BFD minimum receive interval, Value of Hello Multiplier,
+        admin-down or multihop or non-persistent, Vendor class-identifier name, bootfile-name or host-name or log-server or ntp-server or tftp-server-name,
+        Slot/chassis number, Vlan interface, Specify policy input name, Port path cost or auto, Port priority increments of 32]
+    interfaceArg6:
+        description:
+            - This is an overloaded Port Channel sixth argument. Usage of this argument can be found is the User Guide referenced above.
+        required: No
+        default: Null
+        choices: [Authentication key string, name of key-chain, key-Id Value, Value of Hello Multiplier, admin-down or non-persistent]
+    interfaceArg7:
+        description:
+            - This is an overloaded Port Channel seventh argument. Usage of this argument can be found is the User Guide referenced above.
+        required: No
+        default: Null
+        choices: [Authentication key string, admin-down]
+'''
+EXAMPLES = '''
+Tasks : The following are examples of using the module cnos_portchannel. These are written in the main.yml file of the tasks directory.
+---
+- name: Test Port Channel - aggregation-group
+  cnos_portchannel:
+    host: "{{ inventory_hostname }}"
+    username: "{{ hostvars[inventory_hostname]['username'] }}"
+    password: "{{ hostvars[inventory_hostname]['password'] }}"
+    deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+    outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+    interfaceRange: 33
+    interfaceArg1: "aggregation-group"
+    interfaceArg2: 33
+    interfaceArg3: "on"
+
+- name: Test Port Channel - aggregation-group - Interface Range
+  cnos_portchannel:
+  host: "{{ inventory_hostname }}"
+  username: "{{ hostvars[inventory_hostname]['username'] }}"
+  password: "{{ hostvars[inventory_hostname]['password'] }}"
+  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+  interfaceRange: "1/1-2"
+  interfaceArg1: "aggregation-group"
+  interfaceArg2: 33
+  interfaceArg3: "on"
+
+- name: Test Port Channel - bridge-port
+  cnos_portchannel:
+  host: "{{ inventory_hostname }}"
+  username: "{{ hostvars[inventory_hostname]['username'] }}"
+  password: "{{ hostvars[inventory_hostname]['password'] }}"
+  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+  interfaceRange: 33
+  interfaceArg1: "bridge-port"
+  interfaceArg2: "access"
+  interfaceArg3: 33
+
+- name: Test Port Channel - bridgeport mode
+  cnos_portchannel:
+  host: "{{ inventory_hostname }}"
+  username: "{{ hostvars[inventory_hostname]['username'] }}"
+  password: "{{ hostvars[inventory_hostname]['password'] }}"
+  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+  interfaceRange: 33
+  interfaceArg1: "bridge-port"
+  interfaceArg2: "mode"
+  interfaceArg3: "access"
+
+- name: Test Port Channel  - Description
+  cnos_portchannel:
+  host: "{{ inventory_hostname }}"
+  username: "{{ hostvars[inventory_hostname]['username'] }}"
+  password: "{{ hostvars[inventory_hostname]['password'] }}"
+  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+  interfaceRange: 33
+  interfaceArg1: "description"
+  interfaceArg2: "Hentammoo "
+
+- name: Test Port Channel - Duplex
+  cnos_portchannel:
+  host: "{{ inventory_hostname }}"
+  username: "{{ hostvars[inventory_hostname]['username'] }}"
+  password: "{{ hostvars[inventory_hostname]['password'] }}"
+  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+  interfaceRange: 33
+  interfaceArg1: "duplex"
+  interfaceArg2: "auto"
+
+- name: Test Port Channel - flowcontrol
+  cnos_portchannel:
+  host: "{{ inventory_hostname }}"
+  username: "{{ hostvars[inventory_hostname]['username'] }}"
+  password: "{{ hostvars[inventory_hostname]['password'] }}"
+  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+  interfaceRange: 33
+  interfaceArg1: "flowcontrol"
+  interfaceArg2: "send"
+  interfaceArg3: "off"
+
+- name: Test Port Channel - lacp
+  cnos_portchannel:
+  host: "{{ inventory_hostname }}"
+  username: "{{ hostvars[inventory_hostname]['username'] }}"
+  password: "{{ hostvars[inventory_hostname]['password'] }}"
+  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+  interfaceRange: 33
+  interfaceArg1: "lacp"
+  interfaceArg2: "port-priority"
+  interfaceArg3: 33
+
+- name: Test Port Channel  - lldp
+  cnos_portchannel:
+  host: "{{ inventory_hostname }}"
+  username: "{{ hostvars[inventory_hostname]['username'] }}"
+  password: "{{ hostvars[inventory_hostname]['password'] }}"
+  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+  interfaceRange: 33
+  interfaceArg1: "lldp"
+  interfaceArg2: "tlv-select"
+  interfaceArg3: "max-frame-size"
+
+- name: Test Port Channel - load-interval
+  cnos_portchannel:
+  host: "{{ inventory_hostname }}"
+  username: "{{ hostvars[inventory_hostname]['username'] }}"
+  password: "{{ hostvars[inventory_hostname]['password'] }}"
+  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+  interfaceRange: 33
+  interfaceArg1: "load-interval"
+  interfaceArg2: "counter"
+  interfaceArg3: 2
+  interfaceArg4: 33
+
+#- name: Test Port Channel - mac
+#  cnos_portchannel:
+#  host: "{{ inventory_hostname }}"
+#  username: "{{ hostvars[inventory_hostname]['username'] }}"
+#  password: "{{ hostvars[inventory_hostname]['password'] }}"
+#  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+#  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+#  interfaceRange: 33,
+#  interfaceArg1: "mac"
+#  interfaceArg2: "copp-system-acl-vlag-hc"
+
+- name: Test Port Channel - microburst-detection
+  cnos_portchannel:
+  host: "{{ inventory_hostname }}"
+  username: "{{ hostvars[inventory_hostname]['username'] }}"
+  password: "{{ hostvars[inventory_hostname]['password'] }}"
+  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+  interfaceRange: 33
+  interfaceArg1: "microburst-detection"
+  interfaceArg2: 25
+
+- name: Test Port Channel  - mtu
+  cnos_portchannel:
+  host: "{{ inventory_hostname }}"
+  username: "{{ hostvars[inventory_hostname]['username'] }}"
+  password: "{{ hostvars[inventory_hostname]['password'] }}"
+  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+  interfaceRange: 33
+  interfaceArg1: "mtu"
+  interfaceArg2: 66
+
+- name: Test Port Channel - service-policy
+  cnos_portchannel:
+  host: "{{ inventory_hostname }}"
+  username: "{{ hostvars[inventory_hostname]['username'] }}"
+  password: "{{ hostvars[inventory_hostname]['password'] }}"
+  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+  interfaceRange: 33
+  interfaceArg1: "service-policy"
+  interfaceArg2: "input"
+  interfaceArg3: "Anil"
+
+- name: Test Port Channel - speed
+  cnos_portchannel:
+  host: "{{ inventory_hostname }}"
+  username: "{{ hostvars[inventory_hostname]['username'] }}"
+  password: "{{ hostvars[inventory_hostname]['password'] }}"
+  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+  interfaceRange: 33
+  interfaceArg1: "speed"
+  interfaceArg2: "auto"
+
+- name: Test Port Channel - storm
+  cnos_portchannel:
+  host: "{{ inventory_hostname }}"
+  username: "{{ hostvars[inventory_hostname]['username'] }}"
+  password: "{{ hostvars[inventory_hostname]['password'] }}"
+  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+  interfaceRange: 33
+  interfaceArg1: "storm-control"
+  interfaceArg2: "broadcast"
+  interfaceArg3: 12.5
+
+#- name: Test Port Channel - vlan
+#  cnos_portchannel:
+#  host: "{{ inventory_hostname }}"
+#  username: "{{ hostvars[inventory_hostname]['username'] }}"
+#  password: "{{ hostvars[inventory_hostname]['password'] }}"
+#  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+#  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+#  interfaceRange: 33
+#  interfaceArg1: "vlan"
+#  interfaceArg2: "disable"
+
+- name: Test Port Channel - vrrp
+  cnos_portchannel:
+  host: "{{ inventory_hostname }}"
+  username: "{{ hostvars[inventory_hostname]['username'] }}"
+  password: "{{ hostvars[inventory_hostname]['password'] }}"
+  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+  interfaceRange: 33
+  interfaceArg1: "vrrp"
+  interfaceArg2: 33
+
+- name: Test Port Channel - spanning tree1
+  cnos_portchannel:
+  host: "{{ inventory_hostname }}"
+  username: "{{ hostvars[inventory_hostname]['username'] }}"
+  password: "{{ hostvars[inventory_hostname]['password'] }}"
+  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+  interfaceRange: 33
+  interfaceArg1: "spanning-tree"
+  interfaceArg2: "bpduguard"
+  interfaceArg3: "enable"
+
+- name: Test Port Channel - spanning tree 2
+  cnos_portchannel:
+  host: "{{ inventory_hostname }}"
+  username: "{{ hostvars[inventory_hostname]['username'] }}"
+  password: "{{ hostvars[inventory_hostname]['password'] }}"
+  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+  interfaceRange: 33
+  interfaceArg1: "spanning-tree"
+  interfaceArg2: "mst"
+  interfaceArg3: "33-35"
+  interfaceArg4: "cost"
+  interfaceArg5: 33
+
+- name: Test Port Channel - ip1
+  cnos_portchannel:
+  host: "{{ inventory_hostname }}"
+  username: "{{ hostvars[inventory_hostname]['username'] }}"
+  password: "{{ hostvars[inventory_hostname]['password'] }}"
+  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+  interfaceRange: 33
+  interfaceArg1: "ip"
+  interfaceArg2: "access-group"
+  interfaceArg3: "anil"
+  interfaceArg4: "in"
+
+- name: Test Port Channel - ip2
+  cnos_portchannel:
+  host: "{{ inventory_hostname }}"
+  username: "{{ hostvars[inventory_hostname]['username'] }}"
+  password: "{{ hostvars[inventory_hostname]['password'] }}"
+  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+  interfaceRange: 33
+  interfaceArg1: "ip"
+  interfaceArg2: "port"
+  interfaceArg3: "anil"
+
+- name: Test Port Channel - bfd
+  cnos_portchannel:
+  host: "{{ inventory_hostname }}"
+  username: "{{ hostvars[inventory_hostname]['username'] }}"
+  password: "{{ hostvars[inventory_hostname]['password'] }}"
+  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+  interfaceRange: 33
+  interfaceArg1: "bfd"
+  interfaceArg2: "interval"
+  interfaceArg3: 55
+  interfaceArg4: 55
+  interfaceArg5: 33
+
+- name: Test Port Channel - bfd
+  cnos_portchannel:
+  host: "{{ inventory_hostname }}"
+  username: "{{ hostvars[inventory_hostname]['username'] }}"
+  password: "{{ hostvars[inventory_hostname]['password'] }}"
+  deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
+  outputfile: "./results/test_portchannel_{{ inventory_hostname }}_output.txt"
+  interfaceRange: 33
+  interfaceArg1: "bfd"
+  interfaceArg2: "ipv4"
+  interfaceArg3: "authentication"
+  interfaceArg4: "meticulous-keyed-md5"
+  interfaceArg5: "key-chain"
+  interfaceArg6: "mychain"
+
+'''
+RETURN = '''
+  return value: |
+    On successful execution, the method returns a message in JSON format
+    [Port Channel configurations accomplished]
+    Upon any failure, the method returns an error display string.
+'''
+
+
+import sys
+import paramiko
+import time
+import argparse
+import socket
+import array
+import json
+import time
+import re
+try:
+    from ansible.module_utils import cnos
+    HAS_LIB = True
+except:
+    HAS_LIB = False
+
+from ansible.module_utils.basic import AnsibleModule
+from collections import defaultdict
+
+
+def main():
+    module = AnsibleModule(
+        argument_spec=dict(
+            outputfile=dict(required=True),
+            host=dict(required=True),
+            username=dict(required=True),
+            password=dict(required=True, no_log=True),
+            enablePassword=dict(required=False, no_log=True),
+            deviceType=dict(required=True),
+            interfaceRange=dict(required=False),
+            interfaceArg1=dict(required=True),
+            interfaceArg2=dict(required=False),
+            interfaceArg3=dict(required=False),
+            interfaceArg4=dict(required=False),
+            interfaceArg5=dict(required=False),
+            interfaceArg6=dict(required=False),
+            interfaceArg7=dict(required=False),),
+        supports_check_mode=False)
+
+    username = module.params['username']
+    password = module.params['password']
+    enablePassword = module.params['enablePassword']
+    interfaceRange = module.params['interfaceRange']
+    interfaceArg1 = module.params['interfaceArg1']
+    interfaceArg2 = module.params['interfaceArg2']
+    interfaceArg3 = module.params['interfaceArg3']
+    interfaceArg4 = module.params['interfaceArg4']
+    interfaceArg5 = module.params['interfaceArg5']
+    interfaceArg6 = module.params['interfaceArg6']
+    interfaceArg7 = module.params['interfaceArg7']
+    outputfile = module.params['outputfile']
+    hostIP = module.params['host']
+    deviceType = module.params['deviceType']
+    output = ""
+
+    # Create instance of SSHClient object
+    remote_conn_pre = paramiko.SSHClient()
+
+    # Automatically add untrusted hosts (make sure okay for security policy in your environment)
+    remote_conn_pre.set_missing_host_key_policy(paramiko.AutoAddPolicy())
+
+    # initiate SSH connection with the switch
+    remote_conn_pre.connect(hostIP, username=username, password=password)
+    time.sleep(2)
+
+    # Use invoke_shell to establish an 'interactive session'
+    remote_conn = remote_conn_pre.invoke_shell()
+    time.sleep(2)
+
+    # Enable and enter configure terminal then send command
+    output = output + cnos.waitForDeviceResponse("\n", ">", 2, remote_conn)
+
+    output = output + cnos.enterEnableModeForDevice(enablePassword, 3, remote_conn)
+
+    # Make terminal length = 0
+    output = output + cnos.waitForDeviceResponse("terminal length 0\n", "#", 2, remote_conn)
+
+    # Go to config mode
+    output = output + cnos.waitForDeviceResponse("configure d\n", "(config)#", 2, remote_conn)
+
+    # Send the CLi command
+    if(interfaceArg1 == "port-aggregation"):
+        output = output + cnos.portChannelConfig(remote_conn, deviceType, "(config)#", 2, interfaceArg1,
+                                                 interfaceArg2, interfaceArg3, interfaceArg4, interfaceArg5, interfaceArg6, interfaceArg7)
+    else:
+        output = output + cnos.interfaceConfig(remote_conn, deviceType, "(config)#", 2, "port-aggregation", interfaceRange,
+                                               interfaceArg1, interfaceArg2, interfaceArg3, interfaceArg4, interfaceArg5, interfaceArg6, interfaceArg7)
+
+    # Save it into the file
+    file = open(outputfile, "a")
+    file.write(output)
+    file.close()
+
+    # Logic to check when changes occur or not
+    errorMsg = cnos.checkOutputForError(output)
+    if(errorMsg is None):
+        module.exit_json(changed=True, msg="Port Aggregation configuration is done")
+    else:
+        module.fail_json(msg=errorMsg)
+
+if __name__ == '__main__':
+        main()
diff --git a/test/integration/roles/cnos_portchannel/README.md b/test/integration/roles/cnos_portchannel/README.md
new file mode 100644
index 0000000000..617a0abc2f
--- /dev/null
+++ b/test/integration/roles/cnos_portchannel/README.md
@@ -0,0 +1,115 @@
+# Ansible Role: cnos_portchannel_sample - Switch Link Aggregation Group (LAG) configuration
+---
+<add role description below>
+
+This role is an example of using the *cnos_portchannel.py* Lenovo module in the context of CNOS switch configuration. This module allows you to work with port aggregation related configurations. The operators used are overloaded to ensure control over switch port aggregation configurations.
+
+Apart from the regular device connection related attributes, there are five vLAG arguments which are overloaded variables that will perform further configurations. They are portChArg1, portChArg2, portChArg3, portChArg4, and portChArg5.
+
+The results of the operation can be viewed in *results* directory.
+
+For more details, see [Lenovo modules for Ansible: cnos_portchannel](http://systemx.lenovofiles.com/help/index.jsp?topic=%2Fcom.lenovo.switchmgt.ansible.doc%2Fcnos_portchannel.html&cp=0_3_1_0_4_13).
+
+
+## Requirements
+---
+<add role requirements information below>
+
+- Ansible version 2.2 or later ([Ansible installation documentation](http://docs.ansible.com/ansible/intro_installation.html))
+- Lenovo switches running CNOS version 10.2.1.0 or later
+- an SSH connection to the Lenovo switch (SSH must be enabled on the network device)
+
+
+## Role Variables
+---
+<add role variables information below>
+
+Available variables are listed below, along with description.
+
+The following are mandatory inventory variables:
+
+Variable | Description
+--- | ---
+`username` | Specifies the username used to log into the switch
+`password` | Specifies the password used to log into the switch
+`enablePassword` | Configures the password used to enter Global Configuration command mode on the switch (this is an optional parameter)
+`hostname` | Searches the hosts file at */etc/ansible/hosts* and identifies the IP address of the switch on which the role is going to be applied
+`deviceType` | Specifies the type of device from where the configuration will be backed up (**g8272_cnos** - G8272, **g8296_cnos** - G8296)
+
+The values of the variables used need to be modified to fit the specific scenario in which you are deploying the solution. To change the values of the variables, you need to visits the *vars* directory of each role and edit the *main.yml* file located there. The values stored in this file will be used by Ansible when the template is executed.
+
+The syntax of *main.yml* file for variables is the following:
+
+```
+<template variable>:<value>
+```
+
+You will need to replace the `<value>` field with the value that suits your topology. The `<template variable>` fields are taken from the template and it is recommended that you leave them unchanged.
+
+Variable | Description
+--- | ---
+`interfaceRange` | Specifies the interface range that will be part of the LAG
+`portChArg1` | This is an overloaded BGP variable. Please refer to the [cnos_portchannel module documentation](http://ralfss28.labs.lenovo.com:5555/help/topic/com.lenovo.switchmgt.ansible.doc/cnos_portchannel.html?cp=0_3_1_0_2_14) for detailed information on usage. The values of these variables depend on the configuration context and the choices are the following: **aggregation-group**, **bridge-port**, **description**, **duplex**, **flowcontrol**, **lacp**, **lldp**, **load-interval**, **mac**, **mac-address**, **mac-learn**, **microburst-detection**, **mtu**, **service**, **service-policy**, **shutdown**, **snmp**, **speed**, **storm-control**, **vlan**, **vrrp**, **port-aggregation**.
+`portChArg2` | This is an overloaded BGP variable. Please refer to the [cnos_portchannel module documentation](http://ralfss28.labs.lenovo.com:5555/help/topic/com.lenovo.switchmgt.ansible.doc/cnos_portchannel.html?cp=0_3_1_0_2_14) for detailed information on usage. The values of these variables depend on the configuration context and the choices are the following: specify a LAG number, **access**, **mode**, **trunk**, LAG description, **auto**, **full**, **half**, **receive**, **send**, **port-priority**, **suspend-individual**, **timeout**, **transmit**, **trap-notification**, **tlv-select**, load interval delay, **counter**, name for the MAC access group, MAC address in XXXX.XXXX.XXXX format, threshold value, MTU in bytes, instance ID to map to the EVC, **input**, **output**, **copp-system-policy**, **type**, **auto**, 1000, 10000, 40000, **broadcast**, **unicast**, **multicast**, **disable**, **enable**, **egress-only**, virtual router ID, **destination-ip**, **destination-mac**, **destination-port**, **source-dest-ip**, **source-dest-mac**, **source-dest-port**, **source-interface**, **source-ip**, **source-mac**, **source-port**.
+`portChArg3` | This is an overloaded BGP variable. Please refer to the [cnos_portchannel module documentation](http://ralfss28.labs.lenovo.com:5555/help/topic/com.lenovo.switchmgt.ansible.doc/cnos_portchannel.html?cp=0_3_1_0_2_14) for detailed information on usage. The values of these variables depend on the configuration context and the choices are the following: **active**, **passive**, **on**, **off**, LACP port priority, **long**, **short**, **link-aggregation**, **mac-phy-status**, **management-address**, **max-frame-size**, **port-description**, **port-protocol-vlan**, **port-vlan**, **power-mdi**, **protocol-identity**, **system-capabilities**, **system-description**, **system-name**, **vid-management**, **vlan-name**, counter for the load interval, the name of the policy to attach, **all**, COPP class name to attach, **qos**, **queuing**, allowed traffic level, **ipv6**, **source-interface**.
+`portChArg4` | This is an overloaded BGP variable. Please refer to the [cnos_portchannel module documentation](http://ralfss28.labs.lenovo.com:5555/help/topic/com.lenovo.switchmgt.ansible.doc/cnos_portchannel.html?cp=0_3_1_0_2_14) for detailed information on usage. The values of these variables depend on the configuration context and the choices are the following: load interval delay, name of the QoS policy to attach, **input**, **output**
+`portChArg5` | This is an overloaded BGP variable. Please refer to the [cnos_portchannel module documentation](http://ralfss28.labs.lenovo.com:5555/help/topic/com.lenovo.switchmgt.ansible.doc/cnos_portchannel.html?cp=0_3_1_0_2_14) for detailed information on usage. The values of these variables depend on the configuration context and the choices are the following: name of the QoS policy to attach
+
+
+## Dependencies
+---
+<add dependencies information below>
+
+- username.iptables - Configures the firewall and blocks all ports except those needed for web server and SSH access.
+- username.common - Performs common server configuration.
+- cnos_portchannel.py - This modules needs to be present in the *library* directory of the role.
+- cnos.py - This module needs to be present in the PYTHONPATH environment variable set in the Ansible system.
+- /etc/ansible/hosts - You must edit the */etc/ansible/hosts* file with the device information of the switches designated as leaf switches. You may refer to *cnos_portchannel_sample_hosts* for a sample configuration.
+
+Ansible keeps track of all network elements that it manages through a hosts file. Before the execution of a playbook, the hosts file must be set up.
+
+Open the */etc/ansible/hosts* file with root privileges. Most of the file is commented out by using **#**. You can also comment out the entries you will be adding by using **#**. You need to copy the content of the hosts file for the role into the */etc/ansible/hosts* file. The sample hosts file for the role is located in the main directory.
+
+```
+[cnos_portchannel_sample]
+10.241.107.39   username=<username> password=<password> deviceType=g8272_cnos
+10.241.107.40   username=<username> password=<password> deviceType=g8272_cnos 
+```
+    
+**Note:** You need to change the IP addresses to fit your specific topology. You also need to change the `<username>` and `<password>` to the appropriate values used to log into the specific Lenovo network devices.
+
+
+## Example Playbook
+---
+<add playbook samples below>
+
+To execute an Ansible playbook, use the following command:
+
+```
+ansible-playbook cnos_portchannel_sample.yml -vvv
+```
+
+`-vvv` is an optional verbos command that helps identify what is happening during playbook execution. The playbook for each role is located in the main directory of the solution.
+
+```
+ - name: Module to  do Port Channel configurations
+   hosts: cnos_portchannel_sample
+   gather_facts: no
+   connection: local
+   roles:
+    - cnos_portchannel_sample
+```
+
+
+## License
+---
+<add license information below>
+Copyright (C) 2017 Lenovo, Inc.
+
+This file is part of Ansible
+
+Ansible is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
+
+Ansible is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
\ No newline at end of file
diff --git a/test/integration/roles/cnos_portchannel/cnos_portchannel_sample_hosts b/test/integration/roles/cnos_portchannel/cnos_portchannel_sample_hosts
new file mode 100644
index 0000000000..1267e938b2
--- /dev/null
+++ b/test/integration/roles/cnos_portchannel/cnos_portchannel_sample_hosts
@@ -0,0 +1,15 @@
+# You have to paste this dummy information  in /etc/ansible/hosts
+#    Notes:
+#    - Comments begin with the '#' character
+#    - Blank lines are ignored
+#    - Groups of hosts are delimited by [header] elements
+#    - You can enter hostnames or ip addresses
+#    - A hostname/ip can be a member of multiple groups
+#
+# In the /etc/ansible/hosts file u have to enter [cnos_portchannel_sample] tag
+# Following you should specify IP Adresses details 
+# Please change <username> and <password> with appropriate value for your switch.
+
+[cnos_portchannel_sample]
+10.241.107.39  username=<username> password=<password> deviceType=g8272_cnos
+
diff --git a/test/integration/roles/cnos_portchannel/tasks/main.yml b/test/integration/roles/cnos_portchannel/tasks/main.yml
new file mode 100644
index 0000000000..e30a424a2a
--- /dev/null
+++ b/test/integration/roles/cnos_portchannel/tasks/main.yml
@@ -0,0 +1,98 @@
+# This contain sample template execution tasks
+---
+- name: Test Port Channel - aggregation-group
+  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
+  with_items: "{{test_portchannel_data1}}"
+ 
+- name: Test Port Channel - aggregation-group - Interface Range
+  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
+  with_items: "{{test_portchannel_data24}}"
+
+- name: Test Port Channel - bridge-port
+  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt  interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
+  with_items: "{{test_portchannel_data2}}"
+
+- name: Test Port Channel - bridgeport mode
+  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
+  with_items: "{{test_portchannel_data3}}"
+
+- name: Test Port Channel  - Description
+  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
+  with_items: "{{test_portchannel_data4}}"
+
+- name: Test Port Channel - Duplex
+  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
+  with_items: "{{test_portchannel_data5}}"
+
+- name: Test Port Channel - flowcontrol
+  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
+  with_items: "{{test_portchannel_data6}}"
+
+- name: Test Port Channel - lacp
+  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
+  with_items: "{{test_portchannel_data7}}"
+
+- name: Test Port Channel  - lldp
+  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
+  with_items: "{{test_portchannel_data8}}"
+
+- name: Test Port Channel - load-interval
+  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}' interfaceArg4='{{item.interfaceArg4}}'
+  with_items: "{{test_portchannel_data9}}"
+
+#- name: Test Port Channel - mac
+#  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
+#  with_items: "{{test_portchannel_data10}}"
+
+- name: Test Port Channel - microburst-detection
+  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
+  with_items: "{{test_portchannel_data11}}"
+
+- name: Test Port Channel  - mtu
+  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
+  with_items: "{{test_portchannel_data12}}"
+
+- name: Test Port Channel - service-policy
+  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
+  with_items: "{{test_portchannel_data13}}"
+
+- name: Test Port Channel - speed
+  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
+  with_items: "{{test_portchannel_data14}}"
+
+- name: Test Port Channel - storm
+  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
+  with_items: "{{test_portchannel_data15}}"
+
+#- name: Test Port Channel - vlan
+#  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
+#  with_items: "{{test_portchannel_data16}}"
+
+- name: Test Port Channel - vrrp
+  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
+  with_items: "{{test_portchannel_data17}}"
+
+- name: Test Port Channel - spanning tree1
+  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
+  with_items: "{{test_portchannel_data18}}"
+
+- name: Test Port Channel - spanning tree 2
+  cnos_portchannel: host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}' interfaceArg4='{{item.interfaceArg4}}' interfaceArg5='{{item.interfaceArg5}}'
+  with_items: "{{test_portchannel_data19}}"
+
+- name: Test Port Channel - ip1
+  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}' interfaceArg4='{{item.interfaceArg4}}'
+  with_items: "{{test_portchannel_data20}}"
+
+- name: Test Port Channel - ip2
+  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
+  with_items: "{{test_portchannel_data21}}"
+
+- name: Test Port Channel - bfd
+  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}' interfaceArg4='{{item.interfaceArg4}}' interfaceArg5='{{item.interfaceArg5}}'
+  with_items: "{{test_portchannel_data22}}"
+
+- name: Test Port Channel - bfd
+  cnos_portchannel:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['username']}}  password={{ hostvars[inventory_hostname]['password']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_portchannel_{{ inventory_hostname }}_output.txt interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}' interfaceArg4='{{item.interfaceArg4}}' interfaceArg5='{{item.interfaceArg5}}' interfaceArg6='{{item.interfaceArg6}}'
+  with_items: "{{test_portchannel_data23}}"
+## Completed file
diff --git a/test/integration/roles/cnos_portchannel/vars/main.yml b/test/integration/roles/cnos_portchannel/vars/main.yml
new file mode 100644
index 0000000000..fd15194591
--- /dev/null
+++ b/test/integration/roles/cnos_portchannel/vars/main.yml
@@ -0,0 +1,49 @@
+---
+test_portchannel_data1:
+  - {interfaceRange: 33, interfaceArg1: "aggregation-group", interfaceArg2: 33, interfaceArg3: "on"}
+test_portchannel_data2:
+  - {interfaceRange: 33, interfaceArg1: "bridge-port", interfaceArg2: "access", interfaceArg3: 33}
+test_portchannel_data3:
+  - {interfaceRange: 33, interfaceArg1: "bridge-port", interfaceArg2: "mode", interfaceArg3: "access"}
+test_portchannel_data4:
+  - {interfaceRange: 33, interfaceArg1: "description", interfaceArg2: "Hentammoo "}
+test_portchannel_data5:
+  - {interfaceRange: 2, interfaceArg1: "duplex", interfaceArg2: "auto"}
+test_portchannel_data6:
+  - {interfaceRange: 33, interfaceArg1: "flowcontrol", interfaceArg2: "send", interfaceArg3: "off"}
+test_portchannel_data7:
+  - {interfaceRange: 33, interfaceArg1: "lacp", interfaceArg2: "port-priority", interfaceArg3: 33}
+test_portchannel_data8:
+  - {interfaceRange: 33, interfaceArg1: "lldp", interfaceArg2: "tlv-select", interfaceArg3: "max-frame-size"}
+test_portchannel_data9:
+  - {interfaceRange: 33, interfaceArg1: "load-interval", interfaceArg2: "counter", interfaceArg3: 2, interfaceArg4: 33 }
+test_portchannel_data10:
+  - {interfaceRange: 33, interfaceArg1: "mac", interfaceArg2: "copp-system-acl-vlag-hc"}
+test_portchannel_data11:
+  - {interfaceRange: 33, interfaceArg1: "microburst-detection", interfaceArg2: 25}
+test_portchannel_data12:
+  - {interfaceRange: 33, interfaceArg1: "mtu", interfaceArg2: 66}
+test_portchannel_data13:
+  - {interfaceRange: 33, interfaceArg1: "service-policy", interfaceArg2: "input", interfaceArg3: "Anil"}
+test_portchannel_data14:
+  - {interfaceRange: 33, interfaceArg1: "speed", interfaceArg2: "auto"}
+test_portchannel_data15:
+  - {interfaceRange: 33, interfaceArg1: "storm-control", interfaceArg2: "broadcast", interfaceArg3: 12.5 }
+test_portchannel_data16:
+  - {interfaceRange: 33, interfaceArg1: "vlan", interfaceArg2: "disable"}
+test_portchannel_data17:
+  - {interfaceRange: 33, interfaceArg1: "vrrp", interfaceArg2: 33}
+test_portchannel_data18:
+  - {interfaceRange: 33, interfaceArg1: "spanning-tree", interfaceArg2: "bpduguard", interfaceArg3: "enable"}
+test_portchannel_data19:
+  - {interfaceRange: 33, interfaceArg1: "spanning-tree", interfaceArg2: "mst", interfaceArg3: "33-35", interfaceArg4: "cost", interfaceArg5: 33}
+test_portchannel_data20:
+  - {interfaceRange: 33, interfaceArg1: "ip", interfaceArg2: "access-group", interfaceArg3: "anil", interfaceArg4: "in"}
+test_portchannel_data21:
+  - {interfaceRange: 33, interfaceArg1: "ip", interfaceArg2: "port", interfaceArg3: "anil" }
+test_portchannel_data22:
+  - {interfaceRange: 33, interfaceArg1: "bfd", interfaceArg2: "interval", interfaceArg3: 55, interfaceArg4: 55, interfaceArg5: 33}
+test_portchannel_data23:
+  - {interfaceRange: 33, interfaceArg1: "bfd", interfaceArg2: "ipv4", interfaceArg3: "authentication", interfaceArg4: "meticulous-keyed-md5", interfaceArg5: "key-chain", interfaceArg6: "mychain"}
+test_portchannel_data24:
+- {interfaceRange: "1/1-2", interfaceArg1: "aggregation-group", interfaceArg2: 33, interfaceArg3: "on"}
\ No newline at end of file
