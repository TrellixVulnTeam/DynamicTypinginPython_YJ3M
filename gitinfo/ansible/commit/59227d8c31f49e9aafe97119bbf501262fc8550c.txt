commit 59227d8c31f49e9aafe97119bbf501262fc8550c
Author: Andrea Tartaglia <me@andreatartaglia.com>
Date:   Tue Dec 13 15:47:08 2016 +0000

    Removed dict.iteritems() in several other files.
    This is for py3 compatibility #18506

diff --git a/contrib/inventory/azure_rm.py b/contrib/inventory/azure_rm.py
index 8545967c37..b36d66e279 100755
--- a/contrib/inventory/azure_rm.py
+++ b/contrib/inventory/azure_rm.py
@@ -309,7 +309,7 @@ class AzureRM(object):
 
     def _get_env_credentials(self):
         env_credentials = dict()
-        for attribute, env_variable in AZURE_CREDENTIAL_ENV_MAPPING.iteritems():
+        for attribute, env_variable in AZURE_CREDENTIAL_ENV_MAPPING.items():
             env_credentials[attribute] = os.environ.get(env_variable, None)
 
         if env_credentials['profile'] is not None:
@@ -328,7 +328,7 @@ class AzureRM(object):
         self.log('Getting credentials')
 
         arg_credentials = dict()
-        for attribute, env_variable in AZURE_CREDENTIAL_ENV_MAPPING.iteritems():
+        for attribute, env_variable in AZURE_CREDENTIAL_ENV_MAPPING.items():
             arg_credentials[attribute] = getattr(params, attribute)
 
         # try module params
@@ -664,7 +664,7 @@ class AzureInventory(object):
         self._inventory['azure'].append(host_name)
 
         if self.group_by_tag and vars.get('tags'):
-            for key, value in vars['tags'].iteritems():
+            for key, value in vars['tags'].items():
                 safe_key = self._to_safe(key)
                 safe_value = safe_key + '_' + self._to_safe(value)
                 if not self._inventory.get(safe_key):
@@ -724,7 +724,7 @@ class AzureInventory(object):
 
     def _get_env_settings(self):
         env_settings = dict()
-        for attribute, env_variable in AZURE_CONFIG_SETTINGS.iteritems():
+        for attribute, env_variable in AZURE_CONFIG_SETTINGS.items():
             env_settings[attribute] = os.environ.get(env_variable, None)
         return env_settings
 
diff --git a/contrib/inventory/nsot.py b/contrib/inventory/nsot.py
index 0fe1b27e14..c4737c83ea 100644
--- a/contrib/inventory/nsot.py
+++ b/contrib/inventory/nsot.py
@@ -201,7 +201,7 @@ class NSoTInventory(object):
         _inventory_group()
         '''
         inventory = dict()
-        for group, contents in self.config.iteritems():
+        for group, contents in self.config.items():
             group_response = self._inventory_group(group, contents)
             inventory.update(group_response)
         inventory.update({'_meta': self._meta})
diff --git a/contrib/inventory/rackhd.py b/contrib/inventory/rackhd.py
index f838677f3b..a89cb041e4 100755
--- a/contrib/inventory/rackhd.py
+++ b/contrib/inventory/rackhd.py
@@ -14,7 +14,7 @@ class RackhdInventory(object):
         for nodeid in nodeids:
             self._load_inventory_data(nodeid)
         inventory = {}
-        for nodeid,info in self._inventory.iteritems():
+        for nodeid,info in self._inventory.items():
             inventory[nodeid]= (self._format_output(nodeid, info))
         print(json.dumps(inventory))
 
@@ -24,7 +24,7 @@ class RackhdInventory(object):
         info['lookup'] = RACKHD_URL + '/api/common/lookups/?q={0}'.format(nodeid)
 
         results = {}
-        for key,url in info.iteritems():
+        for key,url in info.items():
             r = requests.get( url, verify=False)
             results[key] = r.text
         self._inventory[nodeid] = results
@@ -36,7 +36,7 @@ class RackhdInventory(object):
             if len(node_info) > 0:
                 ipaddress = node_info[0]['ipAddress']
             output = { 'hosts':[ipaddress],'vars':{}}
-            for key,result in info.iteritems():
+            for key,result in info.items():
                 output['vars'][key] = json.loads(result)
             output['vars']['ansible_ssh_user'] = 'monorail'
         except KeyError:
diff --git a/contrib/inventory/vmware_inventory.py b/contrib/inventory/vmware_inventory.py
index e65226c42f..a221293edc 100755
--- a/contrib/inventory/vmware_inventory.py
+++ b/contrib/inventory/vmware_inventory.py
@@ -230,7 +230,7 @@ class VMWareInventory(object):
         config.read(vmware_ini_path)
 
         # apply defaults
-        for k,v in defaults['vmware'].iteritems():
+        for k,v in defaults['vmware'].items():
             if not config.has_option('vmware', k):
                     config.set('vmware', k, str(v))
 
@@ -401,7 +401,7 @@ class VMWareInventory(object):
 
 
         # Reset the inventory keys
-        for k,v in name_mapping.iteritems():
+        for k,v in name_mapping.items():
 
             if not host_mapping or not k in host_mapping:
                 continue
@@ -434,7 +434,7 @@ class VMWareInventory(object):
                 continue
             self.debugl('filter: %s' % hf)
             filter_map = self.create_template_mapping(inventory, hf, dtype='boolean')
-            for k,v in filter_map.iteritems():
+            for k,v in filter_map.items():
                 if not v:
                     # delete this host
                     inventory['all']['hosts'].remove(k)
@@ -447,7 +447,7 @@ class VMWareInventory(object):
         # Create groups
         for gbp in self.groupby_patterns:
             groupby_map = self.create_template_mapping(inventory, gbp)
-            for k,v in groupby_map.iteritems():
+            for k,v in groupby_map.items():
                 if v not in inventory:
                     inventory[v] = {}
                     inventory[v]['hosts'] = []
@@ -462,7 +462,7 @@ class VMWareInventory(object):
         ''' Return a hash of uuid to templated string from pattern '''
 
         mapping = {}
-        for k,v in inventory['_meta']['hostvars'].iteritems():
+        for k,v in inventory['_meta']['hostvars'].items():
             t = jinja2.Template(pattern)
             newkey = None
             try:           
@@ -671,7 +671,7 @@ class VMWareInventory(object):
             # check if the machine has the name requested
             keys = self.inventory['_meta']['hostvars'].keys()
             match = None
-            for k,v in self.inventory['_meta']['hostvars'].iteritems():
+            for k,v in self.inventory['_meta']['hostvars'].items():
                 if self.inventory['_meta']['hostvars'][k]['name'] == self.args.host:
                     match = k
                     break
diff --git a/lib/ansible/module_utils/azure_rm_common.py b/lib/ansible/module_utils/azure_rm_common.py
index 1cbfc4f52c..2dec4fbd4d 100644
--- a/lib/ansible/module_utils/azure_rm_common.py
+++ b/lib/ansible/module_utils/azure_rm_common.py
@@ -240,12 +240,12 @@ class AzureRMModuleBase(object):
         new_tags = copy.copy(tags) if isinstance(tags, dict) else dict()
         changed = False
         if isinstance(self.module.params.get('tags'), dict):
-            for key, value in self.module.params['tags'].iteritems():
+            for key, value in self.module.params['tags'].items():
                 if not new_tags.get(key) or new_tags[key] != value:
                     changed = True
                     new_tags[key] = value
             if isinstance(tags, dict):
-                for key, value in tags.iteritems():
+                for key, value in tags.items():
                     if not self.module.params['tags'].get(key):
                         new_tags.pop(key)
                         changed = True
@@ -318,7 +318,7 @@ class AzureRMModuleBase(object):
 
     def _get_env_credentials(self):
         env_credentials = dict()
-        for attribute, env_variable in AZURE_CREDENTIAL_ENV_MAPPING.iteritems():
+        for attribute, env_variable in AZURE_CREDENTIAL_ENV_MAPPING.items():
             env_credentials[attribute] = os.environ.get(env_variable, None)
 
         if env_credentials['profile']:
@@ -337,7 +337,7 @@ class AzureRMModuleBase(object):
         self.log('Getting credentials')
 
         arg_credentials = dict()
-        for attribute, env_variable in AZURE_CREDENTIAL_ENV_MAPPING.iteritems():
+        for attribute, env_variable in AZURE_CREDENTIAL_ENV_MAPPING.items():
             arg_credentials[attribute] = params.get(attribute, None)
 
         # try module params
diff --git a/lib/ansible/module_utils/basic.py b/lib/ansible/module_utils/basic.py
index 3c31d0c68b..a7203e87bb 100644
--- a/lib/ansible/module_utils/basic.py
+++ b/lib/ansible/module_utils/basic.py
@@ -651,7 +651,7 @@ def format_attributes(attributes):
 
 def get_flags_from_attributes(attributes):
     flags = []
-    for key,attr in FILE_ATTRIBUTES.iteritems():
+    for key,attr in FILE_ATTRIBUTES.items():
         if attr in attributes:
             flags.append(key)
     return ''.join(flags)
diff --git a/lib/ansible/module_utils/cloudstack.py b/lib/ansible/module_utils/cloudstack.py
index 1ed4793f8b..fcf767f766 100644
--- a/lib/ansible/module_utils/cloudstack.py
+++ b/lib/ansible/module_utils/cloudstack.py
@@ -158,7 +158,7 @@ class AnsibleCloudStack(object):
 
     def has_changed(self, want_dict, current_dict, only_keys=None):
         result = False
-        for key, value in want_dict.iteritems():
+        for key, value in want_dict.items():
 
             # Optionally limit by a list of keys
             if only_keys and key not in only_keys:
@@ -581,12 +581,12 @@ class AnsibleCloudStack(object):
         if resource:
             returns = self.common_returns.copy()
             returns.update(self.returns)
-            for search_key, return_key in returns.iteritems():
+            for search_key, return_key in returns.items():
                 if search_key in resource:
                     self.result[return_key] = resource[search_key]
 
             # Bad bad API does not always return int when it should.
-            for search_key, return_key in self.returns_to_int.iteritems():
+            for search_key, return_key in self.returns_to_int.items():
                 if search_key in resource:
                     self.result[return_key] = int(resource[search_key])
 
diff --git a/lib/ansible/module_utils/ec2.py b/lib/ansible/module_utils/ec2.py
index f9f18c1227..8db34bfba5 100644
--- a/lib/ansible/module_utils/ec2.py
+++ b/lib/ansible/module_utils/ec2.py
@@ -343,7 +343,7 @@ def camel_dict_to_snake_dict(camel_dict):
 
 
     snake_dict = {}
-    for k, v in camel_dict.iteritems():
+    for k, v in camel_dict.items():
         if isinstance(v, dict):
             snake_dict[camel_to_snake(k)] = camel_dict_to_snake_dict(v)
         elif isinstance(v, list):
@@ -378,7 +378,7 @@ def ansible_dict_to_boto3_filter_list(filters_dict):
     """
 
     filters_list = []
-    for k,v in filters_dict.iteritems():
+    for k,v in filters_dict.items():
         filter_dict = {'Name': k}
         if isinstance(v, string_types):
             filter_dict['Values'] = [v]
@@ -443,7 +443,7 @@ def ansible_dict_to_boto3_tag_list(tags_dict):
     """
 
     tags_list = []
-    for k,v in tags_dict.iteritems():
+    for k,v in tags_dict.items():
         tags_list.append({'Key': k, 'Value': v})
 
     return tags_list
diff --git a/lib/ansible/module_utils/exoscale.py b/lib/ansible/module_utils/exoscale.py
index 64118a5e1d..4bfbc2c1c6 100644
--- a/lib/ansible/module_utils/exoscale.py
+++ b/lib/ansible/module_utils/exoscale.py
@@ -143,7 +143,7 @@ class ExoDns(object):
 
     def has_changed(self, want_dict, current_dict, only_keys=None):
         changed = False
-        for key, value in want_dict.iteritems():
+        for key, value in want_dict.items():
             # Optionally limit by a list of keys
             if only_keys and key not in only_keys:
                 continue
diff --git a/lib/ansible/playbook/play.py b/lib/ansible/playbook/play.py
index c45a7e8041..542344033a 100644
--- a/lib/ansible/playbook/play.py
+++ b/lib/ansible/playbook/play.py
@@ -204,7 +204,7 @@ class Play(Base, Taggable, Become):
         for prompt_data in new_ds:
             if 'name' not in prompt_data:
                 display.deprecated("Using the 'short form' for vars_prompt has been deprecated")
-                for vname, prompt in prompt_data.iteritems():
+                for vname, prompt in prompt_data.items():
                     vars_prompts.append(dict(
                         name      = vname,
                         prompt    = prompt,
diff --git a/lib/ansible/plugins/callback/profile_tasks.py b/lib/ansible/plugins/callback/profile_tasks.py
index 3c3726be5b..51c50c8c2a 100644
--- a/lib/ansible/plugins/callback/profile_tasks.py
+++ b/lib/ansible/plugins/callback/profile_tasks.py
@@ -124,7 +124,7 @@ class CallbackModule(CallbackBase):
         # Sort the tasks by the specified sort
         if self.sort_order != 'none':
             results = sorted(
-                self.stats.iteritems(),
+                self.stats.items(),
                 key=lambda x:x[1]['time'],
                 reverse=self.sort_order,
             )
diff --git a/test/sanity/validate-modules/validate-modules b/test/sanity/validate-modules/validate-modules
index a12b062e61..01e04e4bb9 100755
--- a/test/sanity/validate-modules/validate-modules
+++ b/test/sanity/validate-modules/validate-modules
@@ -376,7 +376,7 @@ class ModuleValidator(Validator):
             errors.extend(e.errors)
 
         options = doc.get('options', {})
-        for key, option in (options or {}).iteritems():
+        for key, option in (options or {}).items():
             try:
                 option_schema(option)
             except Exception as e:
@@ -525,7 +525,7 @@ class ModuleValidator(Validator):
         should_be = '.'.join(ansible_version.split('.')[:2])
         strict_ansible_version = StrictVersion(should_be)
 
-        for option, details in options.iteritems():
+        for option, details in options.items():
             new = not bool(existing_options.get(option))
             if not new:
                 continue
diff --git a/test/units/plugins/action/test_synchronize.py b/test/units/plugins/action/test_synchronize.py
index 8072bd0444..4c43584392 100644
--- a/test/units/plugins/action/test_synchronize.py
+++ b/test/units/plugins/action/test_synchronize.py
@@ -29,7 +29,7 @@ from ansible.plugins.action.synchronize import ActionModule
 '''
 import copy
 safe_vars = {}
-for k,v in task_vars.iteritems():
+for k,v in task_vars.items():
     if k not in ['vars', 'hostvars']:
         safe_vars[k] = copy.deepcopy(v)
     else:    
