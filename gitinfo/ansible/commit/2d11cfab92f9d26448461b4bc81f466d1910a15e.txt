commit 2d11cfab92f9d26448461b4bc81f466d1910a15e
Author: James Cammarata <jimi@sngx.net>
Date:   Tue Dec 29 11:40:18 2015 -0500

    Squashed commit of the following:
    
    commit 24efa310b58c431b4d888a6315d1285da918f670
    Author: James Cammarata <jimi@sngx.net>
    Date:   Tue Dec 29 11:23:52 2015 -0500
    
        Adding an additional test for copy exclusion
    
        Adds a negative test for the situation when an exclusion doesn't
        exist in the target to be copied.
    
    commit 643ba054877cf042177d65e6e2958178bdd2fe88
    Merge: e6ee59f 66a8f7e
    Author: James Cammarata <jimi@sngx.net>
    Date:   Tue Dec 29 10:59:18 2015 -0500
    
        Merge branch 'speedup' of https://github.com/chrismeyersfsu/ansible into chrismeyersfsu-speedup
    
    commit 66a8f7e873ca90f7848e47b04d9b62aed23a45df
    Author: Chris Meyers <chris.meyers.fsu@gmail.com>
    Date:   Mon Dec 28 09:47:00 2015 -0500
    
        better api and tests added
    
        * _copy_results = deepcopy for better performance
        * _copy_results_exclude to deepcopy but exclude certain fields. Pop
        fields that do not need to be deep copied. Re-assign popped fields
        after deep copy so we don't modify the original, to be copied, object.
        * _copy_results_exclude unit tests
    
    commit 93490960ff4e75f38a7cc6f6d49f10f949f1a7da
    Author: Chris Meyers <chris.meyers.fsu@gmail.com>
    Date:   Fri Dec 25 23:17:26 2015 -0600
    
        remove uneeded deepcopy fields

diff --git a/lib/ansible/plugins/callback/__init__.py b/lib/ansible/plugins/callback/__init__.py
index 7371fe0a51..cc2a9ad0e7 100644
--- a/lib/ansible/plugins/callback/__init__.py
+++ b/lib/ansible/plugins/callback/__init__.py
@@ -59,9 +59,20 @@ class CallbackBase:
             version = getattr(self, 'CALLBACK_VERSION', '1.0')
             self._display.vvvv('Loaded callback %s of type %s, v%s' % (name, ctype, version))
 
-    def _copy_result(self, result):
-        ''' helper for callbacks, so they don't all have to include deepcopy '''
-        return deepcopy(result)
+    ''' helper for callbacks, so they don't all have to include deepcopy '''
+    _copy_result = deepcopy
+
+    def _copy_result_exclude(self, result, exclude):
+        values = []
+        for e in exclude:
+            values.append(getattr(result, e))
+            setattr(result, e, None)
+
+        result_copy = deepcopy(result)
+        for i,e in enumerate(exclude):
+            setattr(result, e, values[i])
+
+        return result_copy
 
     def _dump_results(self, result, indent=None, sort_keys=True, keep_invocation=False):
         if result.get('_ansible_no_log', False):
@@ -130,7 +141,7 @@ class CallbackBase:
 
     def _process_items(self, result):
         for res in result._result['results']:
-            newres = self._copy_result(result)
+            newres = self._copy_result_exclude(result, ['_result'])
             res['item'] = self._get_item(res)
             newres._result = res
             if 'failed' in res and res['failed']:
diff --git a/test/units/plugins/callback/test_callback.py b/test/units/plugins/callback/test_callback.py
new file mode 100644
index 0000000000..54964ac9df
--- /dev/null
+++ b/test/units/plugins/callback/test_callback.py
@@ -0,0 +1,82 @@
+# (c) 2012-2014, Chris Meyers <chris.meyers.fsu@gmail.com>
+#
+# This file is part of Ansible
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+from six import PY3
+from copy import deepcopy
+
+from ansible.compat.tests import unittest
+from ansible.compat.tests.mock import patch, mock_open
+
+from ansible.plugins.callback import CallbackBase
+import ansible.plugins.callback as callish
+
+class TestCopyResultExclude(unittest.TestCase):
+    def setUp(self):
+        class DummyClass():
+            def __init__(self):
+                self.bar = [ 1, 2, 3 ]
+                self.a = {
+                    "b": 2,
+                    "c": 3,
+                }
+                self.b = {
+                    "c": 3,
+                    "d": 4,
+                }
+        self.foo = DummyClass()
+        self.cb = CallbackBase()
+
+    def tearDown(self):
+        pass
+
+    def test_copy_logic(self):
+        res = self.cb._copy_result_exclude(self.foo, ())
+        self.assertEqual(self.foo.bar, res.bar)
+    
+    def test_copy_deep(self):
+        res = self.cb._copy_result_exclude(self.foo, ())
+        self.assertNotEqual(id(self.foo.bar), id(res.bar))
+
+    def test_no_exclude(self):
+        res = self.cb._copy_result_exclude(self.foo, ())
+        self.assertEqual(self.foo.bar, res.bar)
+        self.assertEqual(self.foo.a, res.a)
+        self.assertEqual(self.foo.b, res.b)
+    
+    def test_exclude(self):
+        res = self.cb._copy_result_exclude(self.foo, ['bar', 'b'])
+        self.assertIsNone(res.bar)
+        self.assertIsNone(res.b)
+        self.assertEqual(self.foo.a, res.a)
+
+    def test_result_unmodified(self):
+        bar_id = id(self.foo.bar)
+        a_id = id(self.foo.a)
+        res = self.cb._copy_result_exclude(self.foo, ['bar', 'a'])
+
+        self.assertEqual(self.foo.bar, [ 1, 2, 3 ])
+        self.assertEqual(bar_id, id(self.foo.bar))
+
+        self.assertEqual(self.foo.a, dict(b=2, c=3))
+        self.assertEqual(a_id, id(self.foo.a))
+
+        self.assertRaises(AttributeError, self.cb._copy_result_exclude, self.foo, ['a', 'c', 'bar'])
+
