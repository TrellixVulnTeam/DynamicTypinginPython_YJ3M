commit 30adc2f124c19c82f53393bd2ecad33ca7a6978a
Author: Dag Wieers <dag@wieers.com>
Date:   Mon Feb 12 21:37:25 2018 +0100

    aci_domain: Add missing integration tests (#36051)

diff --git a/lib/ansible/modules/network/aci/aci_domain.py b/lib/ansible/modules/network/aci/aci_domain.py
index ad7813ea8b..f1db1543be 100644
--- a/lib/ansible/modules/network/aci/aci_domain.py
+++ b/lib/ansible/modules/network/aci/aci_domain.py
@@ -123,6 +123,7 @@ EXAMPLES = r'''
     host: apic
     username: admin
     password: SomeSecretPassword
+    domain_type: phys
     state: query
 '''
 
@@ -321,7 +322,7 @@ def main():
     elif domain_type == 'vmm':
         domain_class = 'vmmDomP'
         domain_mo = 'uni/vmmp-{0}/dom-{1}'.format(VM_PROVIDER_MAPPING[vm_provider], domain)
-        domain_rn = 'dom-{0}'.format(domain)
+        domain_rn = 'vmmp-{0}/dom-{1}'.format(VM_PROVIDER_MAPPING[vm_provider], domain)
 
     aci = ACIModule(module)
     aci.construct_url(
diff --git a/test/integration/targets/aci_domain/aliases b/test/integration/targets/aci_domain/aliases
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test/integration/targets/aci_domain/tasks/fc.yml b/test/integration/targets/aci_domain/tasks/fc.yml
new file mode 100644
index 0000000000..ee5d69e9fd
--- /dev/null
+++ b/test/integration/targets/aci_domain/tasks/fc.yml
@@ -0,0 +1,155 @@
+# Test code for the ACI modules
+# Copyright 2018, Dag Wieers (@dagwieers) <dag@wieers.com>
+
+# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
+
+
+# CLEAN ENVIRONMENT
+- name: Remove FC domain
+  aci_domain: &domain_absent
+    host: "{{ aci_hostname }}"
+    username: "{{ aci_username }}"
+    password: "{{ aci_password }}"
+    validate_certs: '{{ aci_validate_certs | default(false) }}'
+    use_ssl: '{{ aci_use_ssl | default(true) }}'
+    use_proxy: '{{ aci_use_proxy | default(true) }}'
+    output_level: info
+    domain: fc_dom
+    domain_type: fc
+    state: absent
+
+
+# ADD DOMAIN
+- name: Add FC domain (check_mode)
+  aci_domain: &domain_present
+    host: '{{ aci_hostname }}'
+    username: '{{ aci_username }}'
+    password: '{{ aci_password }}'
+    validate_certs: '{{ aci_validate_certs | default(false) }}'
+    use_ssl: '{{ aci_use_ssl | default(true) }}'
+    use_proxy: '{{ aci_use_proxy | default(true) }}'
+    output_level: info
+    domain: fc_dom
+    domain_type: fc
+    state: present
+  check_mode: yes
+  register: cm_add_domain
+
+- name: Add FC domain (normal mode)
+  aci_domain: *domain_present
+  register: nm_add_domain
+
+- name: Add FC domain again (check_mode)
+  aci_domain: *domain_present
+  check_mode: yes
+  register: cm_add_domain_again
+
+- name: Add FC domain again (normal mode)
+  aci_domain: *domain_present
+  register: nm_add_domain_again
+
+- name: Verify add_domain
+  assert:
+    that:
+    - cm_add_domain.changed == nm_add_domain.changed == true
+    - cm_add_domain_again.changed == nm_add_domain_again.changed == false
+    - 'cm_add_domain.sent == nm_add_domain.sent == {"fcDomP": {"attributes": {"name": "fc_dom"}}}'
+    - 'cm_add_domain.proposed == nm_add_domain.proposed == {"fcDomP": {"attributes": {"name": "fc_dom"}}}'
+    - cm_add_domain.current == cm_add_domain.previous == nm_add_domain.previous == []
+    - 'nm_add_domain.current == [{"fcDomP": {"attributes": {"dn": "uni/fc-fc_dom", "name": "fc_dom", "nameAlias": "", "ownerKey": "", "ownerTag": ""}}}]'
+
+
+# QUERY ALL DOMAINS
+- name: Query all FC domains (check_mode)
+  aci_domain: &domain_query
+    host: '{{ aci_hostname }}'
+    username: '{{ aci_username }}'
+    password: '{{ aci_password }}'
+    validate_certs: '{{ aci_validate_certs | default(false) }}'
+    use_ssl: '{{ aci_use_ssl | default(true) }}'
+    use_proxy: '{{ aci_use_proxy | default(true) }}'
+    output_level: info
+    domain_type: fc
+    state: query
+  check_mode: yes
+  register: cm_query_all_domains
+
+- name: Query all FC domains (normal mode)
+  aci_domain: *domain_query
+  register: nm_query_all_domains
+
+- name: Verify query_all_domains
+  assert:
+    that:
+    - cm_query_all_domains.changed == nm_query_all_domains.changed == false
+    # NOTE: Order of domains is not stable between calls
+    #- cm_query_all_domains == nm_query_all_domains
+
+
+# QUERY A DOMAIN
+- name: Query our FC domain (check_mode)
+  aci_domain:
+    <<: *domain_query
+    domain: fc_dom
+  check_mode: yes
+  register: cm_query_domain
+
+- name: Query our FC domain (normal mode)
+  aci_domain:
+    <<: *domain_query
+    domain: fc_dom
+  register: nm_query_domain
+
+- name: Verify query_domain
+  assert:
+    that:
+    - cm_query_domain.changed == nm_query_domain.changed == false
+    - cm_query_domain == nm_query_domain
+    - nm_query_domain.current.0.fcDomP.attributes.dn == 'uni/fc-fc_dom'
+    - nm_query_domain.current.0.fcDomP.attributes.name == 'fc_dom'
+
+
+# REMOVE DOMAIN
+- name: Remove FC domain (check_mode)
+  aci_domain: *domain_absent
+  check_mode: yes
+  register: cm_remove_domain
+
+- name: Remove FC domain (normal mode)
+  aci_domain: *domain_absent
+  register: nm_remove_domain
+
+- name: Remove FC domain again (check_mode)
+  aci_domain: *domain_absent
+  check_mode: yes
+  register: cm_remove_domain_again
+
+- name: Remove FC domain again (normal mode)
+  aci_domain: *domain_absent
+  register: nm_remove_domain_again
+
+- name: Verify remove_domain
+  assert:
+    that:
+    - cm_remove_domain.changed == nm_remove_domain.changed == true
+    - cm_remove_domain_again.changed == nm_remove_domain_again.changed == false
+    - 'cm_remove_domain.current == cm_remove_domain.previous == nm_remove_domain.previous == [{"fcDomP": {"attributes": {"dn": "uni/fc-fc_dom", "name": "fc_dom", "nameAlias": "", "ownerKey": "", "ownerTag": ""}}}]'
+    - nm_remove_domain.current == []
+
+
+# QUERY NON-EXISTING DOMAIN
+- name: Query non-existing FC domain (check_mode)
+  aci_domain: *domain_query
+  check_mode: yes
+  register: cm_query_non_domain
+
+- name: Query non-existing FC domain (normal mode)
+  aci_domain: *domain_query
+  register: nm_query_non_domain
+
+- name: Verify query_non_domain
+  assert:
+    that:
+    - cm_query_non_domain.changed == nm_query_non_domain.changed == false
+    - cm_query_non_domain == nm_query_non_domain
+    - nm_query_non_domain.current == []
diff --git a/test/integration/targets/aci_domain/tasks/l2dom.yml b/test/integration/targets/aci_domain/tasks/l2dom.yml
new file mode 100644
index 0000000000..4fa16076ba
--- /dev/null
+++ b/test/integration/targets/aci_domain/tasks/l2dom.yml
@@ -0,0 +1,155 @@
+# Test code for the ACI modules
+# Copyright 2018, Dag Wieers (@dagwieers) <dag@wieers.com>
+
+# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
+
+
+# CLEAN ENVIRONMENT
+- name: Remove L2 domain
+  aci_domain: &domain_absent
+    host: "{{ aci_hostname }}"
+    username: "{{ aci_username }}"
+    password: "{{ aci_password }}"
+    validate_certs: '{{ aci_validate_certs | default(false) }}'
+    use_ssl: '{{ aci_use_ssl | default(true) }}'
+    use_proxy: '{{ aci_use_proxy | default(true) }}'
+    output_level: info
+    domain: l2_dom
+    domain_type: l2dom
+    state: absent
+
+
+# ADD DOMAIN
+- name: Add L2 domain (check_mode)
+  aci_domain: &domain_present
+    host: '{{ aci_hostname }}'
+    username: '{{ aci_username }}'
+    password: '{{ aci_password }}'
+    validate_certs: '{{ aci_validate_certs | default(false) }}'
+    use_ssl: '{{ aci_use_ssl | default(true) }}'
+    use_proxy: '{{ aci_use_proxy | default(true) }}'
+    output_level: info
+    domain: l2_dom
+    domain_type: l2dom
+    state: present
+  check_mode: yes
+  register: cm_add_domain
+
+- name: Add L2 domain (normal mode)
+  aci_domain: *domain_present
+  register: nm_add_domain
+
+- name: Add L2 domain again (check_mode)
+  aci_domain: *domain_present
+  check_mode: yes
+  register: cm_add_domain_again
+
+- name: Add L2 domain again (normal mode)
+  aci_domain: *domain_present
+  register: nm_add_domain_again
+
+- name: Verify add_domain
+  assert:
+    that:
+    - cm_add_domain.changed == nm_add_domain.changed == true
+    - cm_add_domain_again.changed == nm_add_domain_again.changed == false
+    - 'cm_add_domain.sent == nm_add_domain.sent == {"l2extDomP": {"attributes": {"name": "l2_dom"}}}'
+    - 'cm_add_domain.proposed == nm_add_domain.proposed == {"l2extDomP": {"attributes": {"name": "l2_dom"}}}'
+    - cm_add_domain.current == cm_add_domain.previous == nm_add_domain.previous == []
+    - 'nm_add_domain.current == [{"l2extDomP": {"attributes": {"dn": "uni/l2dom-l2_dom", "name": "l2_dom", "nameAlias": "", "ownerKey": "", "ownerTag": ""}}}]'
+
+
+# QUERY ALL DOMAINS
+- name: Query all L2 domains (check_mode)
+  aci_domain: &domain_query
+    host: '{{ aci_hostname }}'
+    username: '{{ aci_username }}'
+    password: '{{ aci_password }}'
+    validate_certs: '{{ aci_validate_certs | default(false) }}'
+    use_ssl: '{{ aci_use_ssl | default(true) }}'
+    use_proxy: '{{ aci_use_proxy | default(true) }}'
+    output_level: info
+    domain_type: l2dom
+    state: query
+  check_mode: yes
+  register: cm_query_all_domains
+
+- name: Query all L2 domains (normal mode)
+  aci_domain: *domain_query
+  register: nm_query_all_domains
+
+- name: Verify query_all_domains
+  assert:
+    that:
+    - cm_query_all_domains.changed == nm_query_all_domains.changed == false
+    # NOTE: Order of domains is not stable between calls
+    #- cm_query_all_domains == nm_query_all_domains
+
+
+# QUERY A DOMAIN
+- name: Query our L2 domain (check_mode)
+  aci_domain:
+    <<: *domain_query
+    domain: l2_dom
+  check_mode: yes
+  register: cm_query_domain
+
+- name: Query our L2 domain (normal mode)
+  aci_domain:
+    <<: *domain_query
+    domain: l2_dom
+  register: nm_query_domain
+
+- name: Verify query_domain
+  assert:
+    that:
+    - cm_query_domain.changed == nm_query_domain.changed == false
+    - cm_query_domain == nm_query_domain
+    - nm_query_domain.current.0.l2extDomP.attributes.dn == 'uni/l2dom-l2_dom'
+    - nm_query_domain.current.0.l2extDomP.attributes.name == 'l2_dom'
+
+
+# REMOVE DOMAIN
+- name: Remove L2 domain (check_mode)
+  aci_domain: *domain_absent
+  check_mode: yes
+  register: cm_remove_domain
+
+- name: Remove L2 domain (normal mode)
+  aci_domain: *domain_absent
+  register: nm_remove_domain
+
+- name: Remove L2 domain again (check_mode)
+  aci_domain: *domain_absent
+  check_mode: yes
+  register: cm_remove_domain_again
+
+- name: Remove L2 domain again (normal mode)
+  aci_domain: *domain_absent
+  register: nm_remove_domain_again
+
+- name: Verify remove_domain
+  assert:
+    that:
+    - cm_remove_domain.changed == nm_remove_domain.changed == true
+    - cm_remove_domain_again.changed == nm_remove_domain_again.changed == false
+    - 'cm_remove_domain.current == cm_remove_domain.previous == nm_remove_domain.previous == [{"l2extDomP": {"attributes": {"dn": "uni/l2dom-l2_dom", "name": "l2_dom", "nameAlias": "", "ownerKey": "", "ownerTag": ""}}}]'
+    - nm_remove_domain.current == []
+
+
+# QUERY NON-EXISTING DOMAIN
+- name: Query non-existing L2 domain (check_mode)
+  aci_domain: *domain_query
+  check_mode: yes
+  register: cm_query_non_domain
+
+- name: Query non-existing L2 domain (normal mode)
+  aci_domain: *domain_query
+  register: nm_query_non_domain
+
+- name: Verify query_non_domain
+  assert:
+    that:
+    - cm_query_non_domain.changed == nm_query_non_domain.changed == false
+    - cm_query_non_domain == nm_query_non_domain
+    - nm_query_non_domain.current == []
diff --git a/test/integration/targets/aci_domain/tasks/l3dom.yml b/test/integration/targets/aci_domain/tasks/l3dom.yml
new file mode 100644
index 0000000000..5b76bd3717
--- /dev/null
+++ b/test/integration/targets/aci_domain/tasks/l3dom.yml
@@ -0,0 +1,155 @@
+# Test code for the ACI modules
+# Copyright 2018, Dag Wieers (@dagwieers) <dag@wieers.com>
+
+# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
+
+
+# CLEAN ENVIRONMENT
+- name: Remove L3 domain
+  aci_domain: &domain_absent
+    host: "{{ aci_hostname }}"
+    username: "{{ aci_username }}"
+    password: "{{ aci_password }}"
+    validate_certs: '{{ aci_validate_certs | default(false) }}'
+    use_ssl: '{{ aci_use_ssl | default(true) }}'
+    use_proxy: '{{ aci_use_proxy | default(true) }}'
+    output_level: info
+    domain: l3_dom
+    domain_type: l3dom
+    state: absent
+
+
+# ADD DOMAIN
+- name: Add L3 domain (check_mode)
+  aci_domain: &domain_present
+    host: '{{ aci_hostname }}'
+    username: '{{ aci_username }}'
+    password: '{{ aci_password }}'
+    validate_certs: '{{ aci_validate_certs | default(false) }}'
+    use_ssl: '{{ aci_use_ssl | default(true) }}'
+    use_proxy: '{{ aci_use_proxy | default(true) }}'
+    output_level: info
+    domain: l3_dom
+    domain_type: l3dom
+    state: present
+  check_mode: yes
+  register: cm_add_domain
+
+- name: Add L3 domain (normal mode)
+  aci_domain: *domain_present
+  register: nm_add_domain
+
+- name: Add L3 domain again (check_mode)
+  aci_domain: *domain_present
+  check_mode: yes
+  register: cm_add_domain_again
+
+- name: Add L3 domain again (normal mode)
+  aci_domain: *domain_present
+  register: nm_add_domain_again
+
+- name: Verify add_domain
+  assert:
+    that:
+    - cm_add_domain.changed == nm_add_domain.changed == true
+    - cm_add_domain_again.changed == nm_add_domain_again.changed == false
+    - 'cm_add_domain.sent == nm_add_domain.sent == {"l3extDomP": {"attributes": {"name": "l3_dom"}}}'
+    - 'cm_add_domain.proposed == nm_add_domain.proposed == {"l3extDomP": {"attributes": {"name": "l3_dom"}}}'
+    - cm_add_domain.current == cm_add_domain.previous == nm_add_domain.previous == []
+    - 'nm_add_domain.current == [{"l3extDomP": {"attributes": {"dn": "uni/l3dom-l3_dom", "name": "l3_dom", "nameAlias": "", "ownerKey": "", "ownerTag": ""}}}]'
+
+
+# QUERY ALL DOMAINS
+- name: Query all L3 domains (check_mode)
+  aci_domain: &domain_query
+    host: '{{ aci_hostname }}'
+    username: '{{ aci_username }}'
+    password: '{{ aci_password }}'
+    validate_certs: '{{ aci_validate_certs | default(false) }}'
+    use_ssl: '{{ aci_use_ssl | default(true) }}'
+    use_proxy: '{{ aci_use_proxy | default(true) }}'
+    output_level: info
+    domain_type: l3dom
+    state: query
+  check_mode: yes
+  register: cm_query_all_domains
+
+- name: Query all L3 domains (normal mode)
+  aci_domain: *domain_query
+  register: nm_query_all_domains
+
+- name: Verify query_all_domains
+  assert:
+    that:
+    - cm_query_all_domains.changed == nm_query_all_domains.changed == false
+    # NOTE: Order of domains is not stable between calls
+    #- cm_query_all_domains == nm_query_all_domains
+
+
+# QUERY A DOMAIN
+- name: Query our L3 domain (check_mode)
+  aci_domain:
+    <<: *domain_query
+    domain: l3_dom
+  check_mode: yes
+  register: cm_query_domain
+
+- name: Query our L3 domain (normal mode)
+  aci_domain:
+    <<: *domain_query
+    domain: l3_dom
+  register: nm_query_domain
+
+- name: Verify query_domain
+  assert:
+    that:
+    - cm_query_domain.changed == nm_query_domain.changed == false
+    - cm_query_domain == nm_query_domain
+    - nm_query_domain.current.0.l3extDomP.attributes.dn == 'uni/l3dom-l3_dom'
+    - nm_query_domain.current.0.l3extDomP.attributes.name == 'l3_dom'
+
+
+# REMOVE DOMAIN
+- name: Remove L3 domain (check_mode)
+  aci_domain: *domain_absent
+  check_mode: yes
+  register: cm_remove_domain
+
+- name: Remove L3 domain (normal mode)
+  aci_domain: *domain_absent
+  register: nm_remove_domain
+
+- name: Remove L3 domain again (check_mode)
+  aci_domain: *domain_absent
+  check_mode: yes
+  register: cm_remove_domain_again
+
+- name: Remove L3 domain again (normal mode)
+  aci_domain: *domain_absent
+  register: nm_remove_domain_again
+
+- name: Verify remove_domain
+  assert:
+    that:
+    - cm_remove_domain.changed == nm_remove_domain.changed == true
+    - cm_remove_domain_again.changed == nm_remove_domain_again.changed == false
+    - 'cm_remove_domain.current == cm_remove_domain.previous == nm_remove_domain.previous == [{"l3extDomP": {"attributes": {"dn": "uni/l3dom-l3_dom", "name": "l3_dom", "nameAlias": "", "ownerKey": "", "ownerTag": ""}}}]'
+    - nm_remove_domain.current == []
+
+
+# QUERY NON-EXISTING DOMAIN
+- name: Query non-existing L3 domain (check_mode)
+  aci_domain: *domain_query
+  check_mode: yes
+  register: cm_query_non_domain
+
+- name: Query non-existing L3 domain (normal mode)
+  aci_domain: *domain_query
+  register: nm_query_non_domain
+
+- name: Verify query_non_domain
+  assert:
+    that:
+    - cm_query_non_domain.changed == nm_query_non_domain.changed == false
+    - cm_query_non_domain == nm_query_non_domain
+    - nm_query_non_domain.current == []
diff --git a/test/integration/targets/aci_domain/tasks/main.yml b/test/integration/targets/aci_domain/tasks/main.yml
new file mode 100644
index 0000000000..2bc4ddeee8
--- /dev/null
+++ b/test/integration/targets/aci_domain/tasks/main.yml
@@ -0,0 +1,24 @@
+# Test code for the ACI modules
+# Copyright 2018, Dag Wieers (@dagwieers) <dag@wieers.com>
+
+# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
+
+- name: Test that we have an ACI APIC host, ACI username and ACI password
+  fail:
+    msg: 'Please define the following variables: aci_hostname, aci_username and aci_password.'
+  when: aci_hostname is not defined or aci_username is not defined or aci_password is not defined
+
+- include_tasks: phys.yml
+  when: phys is not defined or phys
+
+- include_tasks: l2dom.yml
+  when: l2dom is not defined or l2dom
+
+- include_tasks: l3dom.yml
+  when: l3dom is not defined or l3dom
+
+- include_tasks: fc.yml
+  when: fc is not defined or fc
+
+- include_tasks: vmm-vmware.yml
+  when: vmm_vmware is not defined or vmm_vmware
diff --git a/test/integration/targets/aci_domain/tasks/phys.yml b/test/integration/targets/aci_domain/tasks/phys.yml
new file mode 100644
index 0000000000..01637cb8a9
--- /dev/null
+++ b/test/integration/targets/aci_domain/tasks/phys.yml
@@ -0,0 +1,155 @@
+# Test code for the ACI modules
+# Copyright 2018, Dag Wieers (@dagwieers) <dag@wieers.com>
+
+# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
+
+
+# CLEAN ENVIRONMENT
+- name: Remove physical domain
+  aci_domain: &domain_absent
+    host: "{{ aci_hostname }}"
+    username: "{{ aci_username }}"
+    password: "{{ aci_password }}"
+    validate_certs: '{{ aci_validate_certs | default(false) }}'
+    use_ssl: '{{ aci_use_ssl | default(true) }}'
+    use_proxy: '{{ aci_use_proxy | default(true) }}'
+    output_level: info
+    domain: phys_dom
+    domain_type: phys
+    state: absent
+
+
+# ADD DOMAIN
+- name: Add physical domain (check_mode)
+  aci_domain: &domain_present
+    host: '{{ aci_hostname }}'
+    username: '{{ aci_username }}'
+    password: '{{ aci_password }}'
+    validate_certs: '{{ aci_validate_certs | default(false) }}'
+    use_ssl: '{{ aci_use_ssl | default(true) }}'
+    use_proxy: '{{ aci_use_proxy | default(true) }}'
+    output_level: info
+    domain: phys_dom
+    domain_type: phys
+    state: present
+  check_mode: yes
+  register: cm_add_domain
+
+- name: Add physical domain (normal mode)
+  aci_domain: *domain_present
+  register: nm_add_domain
+
+- name: Add physical domain again (check_mode)
+  aci_domain: *domain_present
+  check_mode: yes
+  register: cm_add_domain_again
+
+- name: Add physical domain again (normal mode)
+  aci_domain: *domain_present
+  register: nm_add_domain_again
+
+- name: Verify add_domain
+  assert:
+    that:
+    - cm_add_domain.changed == nm_add_domain.changed == true
+    - cm_add_domain_again.changed == nm_add_domain_again.changed == false
+    - 'cm_add_domain.sent == nm_add_domain.sent == {"physDomP": {"attributes": {"name": "phys_dom"}}}'
+    - 'cm_add_domain.proposed == nm_add_domain.proposed == {"physDomP": {"attributes": {"name": "phys_dom"}}}'
+    - cm_add_domain.current == cm_add_domain.previous == nm_add_domain.previous == []
+    - 'nm_add_domain.current == [{"physDomP": {"attributes": {"dn": "uni/phys-phys_dom", "name": "phys_dom", "nameAlias": "", "ownerKey": "", "ownerTag": ""}}}]'
+
+
+# QUERY ALL DOMAINS
+- name: Query all physical domains (check_mode)
+  aci_domain: &domain_query
+    host: '{{ aci_hostname }}'
+    username: '{{ aci_username }}'
+    password: '{{ aci_password }}'
+    validate_certs: '{{ aci_validate_certs | default(false) }}'
+    use_ssl: '{{ aci_use_ssl | default(true) }}'
+    use_proxy: '{{ aci_use_proxy | default(true) }}'
+    output_level: info
+    domain_type: phys
+    state: query
+  check_mode: yes
+  register: cm_query_all_domains
+
+- name: Query all physical domains (normal mode)
+  aci_domain: *domain_query
+  register: nm_query_all_domains
+
+- name: Verify query_all_domains
+  assert:
+    that:
+    - cm_query_all_domains.changed == nm_query_all_domains.changed == false
+    # NOTE: Order of domains is not stable between calls
+    #- cm_query_all_domains == nm_query_all_domains
+
+
+# QUERY A DOMAIN
+- name: Query our physical domain (check_mode)
+  aci_domain:
+    <<: *domain_query
+    domain: phys_dom
+  check_mode: yes
+  register: cm_query_domain
+
+- name: Query our physical domain (normal mode)
+  aci_domain:
+    <<: *domain_query
+    domain: phys_dom
+  register: nm_query_domain
+
+- name: Verify query_domain
+  assert:
+    that:
+    - cm_query_domain.changed == nm_query_domain.changed == false
+    - cm_query_domain == nm_query_domain
+    - nm_query_domain.current.0.physDomP.attributes.dn == 'uni/phys-phys_dom'
+    - nm_query_domain.current.0.physDomP.attributes.name == 'phys_dom'
+
+
+# REMOVE DOMAIN
+- name: Remove physical domain (check_mode)
+  aci_domain: *domain_absent
+  check_mode: yes
+  register: cm_remove_domain
+
+- name: Remove physical domain (normal mode)
+  aci_domain: *domain_absent
+  register: nm_remove_domain
+
+- name: Remove physical domain again (check_mode)
+  aci_domain: *domain_absent
+  check_mode: yes
+  register: cm_remove_domain_again
+
+- name: Remove physical domain again (normal mode)
+  aci_domain: *domain_absent
+  register: nm_remove_domain_again
+
+- name: Verify remove_domain
+  assert:
+    that:
+    - cm_remove_domain.changed == nm_remove_domain.changed == true
+    - cm_remove_domain_again.changed == nm_remove_domain_again.changed == false
+    - 'cm_remove_domain.current == cm_remove_domain.previous == nm_remove_domain.previous == [{"physDomP": {"attributes": {"dn": "uni/phys-phys_dom", "name": "phys_dom", "nameAlias": "", "ownerKey": "", "ownerTag": ""}}}]'
+    - nm_remove_domain.current == []
+
+
+# QUERY NON-EXISTING DOMAIN
+- name: Query non-existing physical domain (check_mode)
+  aci_domain: *domain_query
+  check_mode: yes
+  register: cm_query_non_domain
+
+- name: Query non-existing physical domain (normal mode)
+  aci_domain: *domain_query
+  register: nm_query_non_domain
+
+- name: Verify query_non_domain
+  assert:
+    that:
+    - cm_query_non_domain.changed == nm_query_non_domain.changed == false
+    - cm_query_non_domain == nm_query_non_domain
+    - nm_query_non_domain.current == []
diff --git a/test/integration/targets/aci_domain/tasks/vmm-vmware.yml b/test/integration/targets/aci_domain/tasks/vmm-vmware.yml
new file mode 100644
index 0000000000..dab1c8444f
--- /dev/null
+++ b/test/integration/targets/aci_domain/tasks/vmm-vmware.yml
@@ -0,0 +1,163 @@
+# Test code for the ACI modules
+# Copyright 2018, Dag Wieers (@dagwieers) <dag@wieers.com>
+
+# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
+
+
+# CLEAN ENVIRONMENT
+- name: Remove VMM domain
+  aci_domain: &domain_absent
+    host: "{{ aci_hostname }}"
+    username: "{{ aci_username }}"
+    password: "{{ aci_password }}"
+    validate_certs: '{{ aci_validate_certs | default(false) }}'
+    use_ssl: '{{ aci_use_ssl | default(true) }}'
+    use_proxy: '{{ aci_use_proxy | default(true) }}'
+    output_level: info
+    domain: vmm_dom
+    domain_type: vmm
+    vm_provider: vmware
+    state: absent
+
+
+# ADD DOMAIN
+- name: Add VMM domain (check_mode)
+  aci_domain: &domain_present
+    host: '{{ aci_hostname }}'
+    username: '{{ aci_username }}'
+    password: '{{ aci_password }}'
+    validate_certs: '{{ aci_validate_certs | default(false) }}'
+    use_ssl: '{{ aci_use_ssl | default(true) }}'
+    use_proxy: '{{ aci_use_proxy | default(true) }}'
+    output_level: info
+    domain: vmm_dom
+    domain_type: vmm
+    vm_provider: vmware
+    state: present
+  check_mode: yes
+  register: cm_add_domain
+
+- name: Add VMM domain (normal mode)
+  aci_domain: *domain_present
+  register: nm_add_domain
+
+- name: Add VMM domain again (check_mode)
+  aci_domain: *domain_present
+  check_mode: yes
+  register: cm_add_domain_again
+
+- name: Add physical domain again (normal mode)
+  aci_domain: *domain_present
+  register: nm_add_domain_again
+
+- name: Verify add_domain
+  assert:
+    that:
+    - cm_add_domain.changed == nm_add_domain.changed == true
+    - cm_add_domain_again.changed == nm_add_domain_again.changed == false
+    - 'cm_add_domain.sent == nm_add_domain.sent == {"vmmDomP": {"attributes": {"name": "vmm_dom"}}}'
+    - 'cm_add_domain.proposed == nm_add_domain.proposed == {"vmmDomP": {"attributes": {"name": "vmm_dom"}}}'
+    - cm_add_domain.current == cm_add_domain.previous == nm_add_domain.previous == []
+    - nm_add_domain.current.0.vmmDomP.attributes.dn == 'uni/vmmp-VMware/dom-vmm_dom'
+    - nm_add_domain.current.0.vmmDomP.attributes.name == 'vmm_dom'
+
+
+# QUERY ALL DOMAINS
+- name: Query all VMM domains (check_mode)
+  aci_domain: &domain_query
+    host: '{{ aci_hostname }}'
+    username: '{{ aci_username }}'
+    password: '{{ aci_password }}'
+    validate_certs: '{{ aci_validate_certs | default(false) }}'
+    use_ssl: '{{ aci_use_ssl | default(true) }}'
+    use_proxy: '{{ aci_use_proxy | default(true) }}'
+    output_level: info
+    domain_type: vmm
+    vm_provider: vmware
+    state: query
+  check_mode: yes
+  register: cm_query_all_domains
+
+- name: Query all VMM domains (normal mode)
+  aci_domain: *domain_query
+  register: nm_query_all_domains
+
+- name: Verify query_all_domains
+  assert:
+    that:
+    - cm_query_all_domains.changed == nm_query_all_domains.changed == false
+    # NOTE: Order of domains is not stable between calls
+    #- cm_query_all_domains == nm_query_all_domains
+
+
+# QUERY A DOMAIN
+- name: Query our VMM domain (check_mode)
+  aci_domain:
+    <<: *domain_query
+    domain: vmm_dom
+    vm_provider: vmware
+  check_mode: yes
+  register: cm_query_domain
+
+- name: Query our VMM domain (normal mode)
+  aci_domain:
+    <<: *domain_query
+    domain: vmm_dom
+    vm_provider: vmware
+  register: nm_query_domain
+
+- name: Verify query_domain
+  assert:
+    that:
+    - cm_query_domain.changed == nm_query_domain.changed == false
+    - cm_query_domain == nm_query_domain
+    - nm_query_domain.current.0.vmmDomP.attributes.dn == 'uni/vmmp-VMware/dom-vmm_dom'
+    - nm_query_domain.current.0.vmmDomP.attributes.name == 'vmm_dom'
+
+
+# REMOVE DOMAIN
+- name: Remove VMM domain (check_mode)
+  aci_domain: *domain_absent
+  check_mode: yes
+  register: cm_remove_domain
+
+- name: Remove VMM domain (normal mode)
+  aci_domain: *domain_absent
+  register: nm_remove_domain
+
+- name: Remove VMM domain again (check_mode)
+  aci_domain: *domain_absent
+  check_mode: yes
+  register: cm_remove_domain_again
+
+- name: Remove VMM domain again (normal mode)
+  aci_domain: *domain_absent
+  register: nm_remove_domain_again
+
+- name: Verify remove_domain
+  assert:
+    that:
+    - cm_remove_domain.changed == nm_remove_domain.changed == true
+    - cm_remove_domain_again.changed == nm_remove_domain_again.changed == false
+    - cm_remove_domain.current == cm_remove_domain.previous == nm_remove_domain.previous
+    - nm_remove_domain.previous.0.vmmDomP.attributes.dn == 'uni/vmmp-VMware/dom-vmm_dom'
+    - nm_remove_domain.previous.0.vmmDomP.attributes.name == 'vmm_dom'
+    - nm_remove_domain.current == []
+
+
+# QUERY NON-EXISTING DOMAIN
+- name: Query non-existing VMM domain (check_mode)
+  aci_domain: *domain_query
+  check_mode: yes
+  register: cm_query_non_domain
+
+- name: Query non-existing VMM domain (normal mode)
+  aci_domain: *domain_query
+  register: nm_query_non_domain
+
+- name: Verify query_non_domain
+  assert:
+    that:
+    - cm_query_non_domain.changed == nm_query_non_domain.changed == false
+    - cm_query_non_domain == nm_query_non_domain
+    - nm_query_non_domain.current == []
