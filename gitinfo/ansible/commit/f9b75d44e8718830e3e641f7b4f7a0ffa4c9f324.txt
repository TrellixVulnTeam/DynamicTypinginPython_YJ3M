commit f9b75d44e8718830e3e641f7b4f7a0ffa4c9f324
Author: John R Barker <john@johnrbarker.com>
Date:   Mon Mar 27 18:36:20 2017 +0100

    pep8 fixes (#23005)

diff --git a/lib/ansible/modules/cloud/vmware/vmware_resource_pool.py b/lib/ansible/modules/cloud/vmware/vmware_resource_pool.py
index c4a2edab66..5183eeb45d 100644
--- a/lib/ansible/modules/cloud/vmware/vmware_resource_pool.py
+++ b/lib/ansible/modules/cloud/vmware/vmware_resource_pool.py
@@ -38,27 +38,27 @@ requirements:
 options:
     datacenter:
         description:
-            - Name of the datacenter to add the host
+            - Name of the datacenter to add the host.
         required: True
     cluster:
         description:
-            - Name of the cluster to add the host
+            - Name of the cluster to add the host.
         required: True
     resource_pool:
         description:
-            - Resource pool name to manage
+            - Resource pool name to manage.
         required: True
     hostname:
         description:
-            - ESXi hostname to manage
+            - ESXi hostname to manage.
         required: True
     username:
         description:
-            - ESXi username
+            - ESXi username.
         required: True
     password:
         description:
-            - ESXi password
+            - ESXi password.
         required: True
     cpu_expandable_reservations:
         description:
@@ -151,7 +151,9 @@ from ansible.module_utils.vmware import get_all_objs, connect_to_api, vmware_arg
     find_cluster_by_name_datacenter, wait_for_task
 from ansible.module_utils.basic import AnsibleModule
 
+
 class VMwareResourcePool(object):
+
     def __init__(self, module):
         self.module = module
         self.datacenter = module.params['datacenter']
@@ -164,11 +166,13 @@ class VMwareResourcePool(object):
         self.mem_shares = module.params['mem_shares']
         self.mem_limit = module.params['mem_limit']
         self.mem_reservation = module.params['mem_reservation']
-        self.mem_expandable_reservations = module.params['cpu_expandable_reservations']
+        self.mem_expandable_reservations = module.params[
+            'cpu_expandable_reservations']
         self.cpu_shares = module.params['cpu_shares']
         self.cpu_limit = module.params['cpu_limit']
         self.cpu_reservation = module.params['cpu_reservation']
-        self.cpu_expandable_reservations = module.params['cpu_expandable_reservations']
+        self.cpu_expandable_reservations = module.params[
+            'cpu_expandable_reservations']
         self.dc_obj = None
         self.cluster_obj = None
         self.host_obj = None
@@ -177,7 +181,8 @@ class VMwareResourcePool(object):
 
     def find_host_by_cluster_datacenter(self):
         self.dc_obj = find_datacenter_by_name(self.content, self.datacenter)
-        self.cluster_obj = find_cluster_by_name_datacenter(self.dc_obj, self.cluster)
+        self.cluster_obj = find_cluster_by_name_datacenter(
+            self.dc_obj, self.cluster)
 
         for host in self.cluster_obj.host:
             if host.name == self.hostname:
@@ -185,7 +190,6 @@ class VMwareResourcePool(object):
 
         return None, self.cluster
 
-
     def select_resource_pool(self, host):
         pool_obj = None
 
@@ -194,7 +198,7 @@ class VMwareResourcePool(object):
         pool_selections = self.get_obj(
             [vim.ResourcePool],
             self.resource_pool,
-            return_all = True
+            return_all=True
         )
         if pool_selections:
             for p in pool_selections:
@@ -203,7 +207,7 @@ class VMwareResourcePool(object):
                     break
         return pool_obj
 
-    def get_obj(self, vimtype, name, return_all = False):
+    def get_obj(self, vimtype, name, return_all=False):
         obj = list()
         container = self.content.viewManager.CreateContainerView(
             self.content.rootFolder, vimtype, True)
@@ -238,14 +242,14 @@ class VMwareResourcePool(object):
             rp_states[self.state][self.check_rp_state()]()
 
         except vmodl.RuntimeFault as runtime_fault:
-            self.module.fail_json(msg = runtime_fault.msg)
+            self.module.fail_json(msg=runtime_fault.msg)
         except vmodl.MethodFault as method_fault:
-            self.module.fail_json(msg = method_fault.msg)
+            self.module.fail_json(msg=method_fault.msg)
         except Exception as e:
-            self.module.fail_json(msg = str(e))
+            self.module.fail_json(msg=str(e))
 
     def state_exit_unchanged(self):
-        self.module.exit_json(changed = False)
+        self.module.exit_json(changed=False)
 
     def state_remove_rp(self):
         changed = True
@@ -256,22 +260,23 @@ class VMwareResourcePool(object):
             success, result = wait_for_task(task)
 
         except:
-            self.module.fail_json(msg = "Failed to remove resource pool '%s' '%s'" % (self.resource_pool,resource_pool))
-        self.module.exit_json(changed = changed, result = str(result))
+            self.module.fail_json(msg="Failed to remove resource pool '%s' '%s'" % (
+                self.resource_pool, resource_pool))
+        self.module.exit_json(changed=changed, result=str(result))
 
     def state_add_rp(self):
         changed = True
         result = None
         root_resource_pool = None
 
-        rp_spec=vim.ResourceConfigSpec()
-        cpu_alloc=vim.ResourceAllocationInfo()
+        rp_spec = vim.ResourceConfigSpec()
+        cpu_alloc = vim.ResourceAllocationInfo()
         cpu_alloc.expandableReservation = self.cpu_expandable_reservations
         cpu_alloc.limit = int(self.cpu_limit)
         cpu_alloc.reservation = int(self.cpu_reservation)
         cpu_alloc_shares = vim.SharesInfo()
         cpu_alloc_shares.level = self.cpu_shares
-        cpu_alloc.shares =  cpu_alloc_shares
+        cpu_alloc.shares = cpu_alloc_shares
         rp_spec.cpuAllocation = cpu_alloc
         mem_alloc = vim.ResourceAllocationInfo()
         mem_alloc.limit = int(self.mem_limit)
@@ -283,11 +288,12 @@ class VMwareResourcePool(object):
         rp_spec.memoryAllocation = mem_alloc
 
         self.dc_obj = find_datacenter_by_name(self.content, self.datacenter)
-        self.cluster_obj = find_cluster_by_name_datacenter(self.dc_obj, self.cluster)
+        self.cluster_obj = find_cluster_by_name_datacenter(
+            self.dc_obj, self.cluster)
         rootResourcePool = self.cluster_obj.resourcePool
         task = rootResourcePool.CreateResourcePool(self.resource_pool, rp_spec)
 
-        self.module.exit_json(changed = changed)
+        self.module.exit_json(changed=changed)
 
     def check_rp_state(self):
 
@@ -302,26 +308,32 @@ class VMwareResourcePool(object):
 
 def main():
     argument_spec = vmware_argument_spec()
-    argument_spec.update(dict(datacenter = dict(required = True, type = 'str'),
-                              cluster = dict(required = True, type = 'str'),
-                              resource_pool = dict(required=True, type='str'),
-                              hostname = dict(required = True, type = 'str'),
-                              username = dict(required = True, type = 'str'),
-                              password = dict(required = True, type = 'str', no_log = True),
-                              mem_shares = dict(type = 'str', default = "normal", choices = ['high','custom','normal', 'low']),
-                              mem_limit = dict(type = 'int',default = "-1"),
-                              mem_reservation = dict(type = 'int',default = "0"),
-                              mem_expandable_reservations = dict(type = 'bool',default = "True"),
-                              cpu_shares = dict(type = 'str', default = "normal", choices = ['high','custom','normal', 'low']),
-                              cpu_limit = dict(type = 'int',default = "-1"),
-                              cpu_reservation = dict(type = 'int',default = "0"),
-                              cpu_expandable_reservations = dict(type = 'bool',default = "True"),
-                              state = dict(default = 'present', choices = ['present', 'absent'], type = 'str')))
-
-    module = AnsibleModule(argument_spec = argument_spec, supports_check_mode = True)
+    argument_spec.update(dict(datacenter=dict(required=True, type='str'),
+                              cluster=dict(required=True, type='str'),
+                              resource_pool=dict(required=True, type='str'),
+                              hostname=dict(required=True, type='str'),
+                              username=dict(required=True, type='str'),
+                              password=dict(
+                                  required=True, type='str', no_log=True),
+                              mem_shares=dict(type='str', default="normal", choices=[
+                                              'high', 'custom', 'normal', 'low']),
+                              mem_limit=dict(type='int', default="-1"),
+                              mem_reservation=dict(type='int', default="0"),
+                              mem_expandable_reservations=dict(
+                                  type='bool', default="True"),
+                              cpu_shares=dict(type='str', default="normal", choices=[
+                                              'high', 'custom', 'normal', 'low']),
+                              cpu_limit=dict(type='int', default="-1"),
+                              cpu_reservation=dict(type='int', default="0"),
+                              cpu_expandable_reservations=dict(
+                                  type='bool', default="True"),
+                              state=dict(default='present', choices=['present', 'absent'], type='str')))
+
+    module = AnsibleModule(argument_spec=argument_spec,
+                           supports_check_mode=True)
 
     if not HAS_PYVMOMI:
-        module.fail_json(msg = 'pyvmomi is required for this module')
+        module.fail_json(msg='pyvmomi is required for this module')
 
     vmware_rp = VMwareResourcePool(module)
     vmware_rp.process_state()
