commit 101883e34a3aff223f64c37be97fe626911e70b1
Author: Jonathan Mainguy <jon@soh.re>
Date:   Sat Oct 19 11:17:31 2013 -0400

    Added all_databases option which works like all-databases optin in mysqldump, and works in import by not naming a database to import as

diff --git a/library/database/mysql_db b/library/database/mysql_db
index e33dba4caa..360bd1fcdd 100644
--- a/library/database/mysql_db
+++ b/library/database/mysql_db
@@ -64,6 +64,15 @@ options:
     required: false
     default: present
     choices: [ "present", "absent", "dump", "import" ]
+  all_databases:
+    description:
+      - May only be provided if I(state) is C(dump) or C(import). (added in Ansible 1.4)
+      - Requires I(name) = a valid database name.
+      - Uses --all-databases option for mysqldump.
+      - When used for import, works similiar to mysql -u <username> -p <pasword> < target.sql
+    required: no
+    default: false
+    choices: [ "yes", "no", "true", "false", "0", "1" ]
   collation:
     description:
       - Collation mode
@@ -92,6 +101,10 @@ author: Mark Theunissen
 EXAMPLES = '''
 # Create a new database with name 'bobdata'
 - mysql_db: name=bobdata state=present
+# Dumps all databases to hostname.sql
+- mysql_db: name=bobdata state=dump all_databases=true target=/tmp/{{ inventory_hostname }}.sql
+# Imports file.sql similiar to mysql -u <username> -p <password> < hostname.sql
+- mysql_db: name=bobdata state=import all_databases=true target=/tmp/{{ inventory_hostname }}.sql
 '''
 
 import ConfigParser
@@ -116,16 +129,24 @@ def db_delete(cursor, db):
     cursor.execute(query)
     return True
 
-def db_dump(host, user, password, db_name, target):
-    res = os.system("/usr/bin/mysqldump -q -h "+host+" -u "+user+ " --password="+password+" "
-            +db_name+" > "
-            +target)
+def db_dump(host, user, password, db_name, target, all_databases):
+    if all_databases:
+        res = os.system("/usr/bin/mysqldump -q -h "+host+" -u "+user+ " --password="+password+" --all-databases > "
+                +target)
+    else:
+        res = os.system("/usr/bin/mysqldump -q -h "+host+" -u "+user+ " --password="+password+" "
+                +db_name+" > "
+                +target)
     return (res == 0)
 
-def db_import(host, user, password, db_name, target):
-    res = os.system("/usr/bin/mysql -h "+host+" -u "+user+" --password="+password+" "
-            +db_name+" < "
-            +target)
+def db_import(host, user, password, db_name, target, all_databases):
+    if all_databases:
+        res = os.system("/usr/bin/mysql -h "+host+" -u "+user+" --password="+password+" < "
+                +target)
+    else:
+        res = os.system("/usr/bin/mysql -h "+host+" -u "+user+" --password="+password+" "
+                +db_name+" < "
+                +target)
     return (res == 0)
 
 def db_create(cursor, db, encoding, collation):
@@ -207,6 +228,7 @@ def main():
             db=dict(required=True, aliases=['name']),
             encoding=dict(default=""),
             collation=dict(default=""),
+            all_databases=dict(default="no", choices=BOOLEANS, type='bool'),
             target=dict(default=None),
             state=dict(default="present", choices=["absent", "present","dump", "import"]),
         )
@@ -216,6 +238,7 @@ def main():
         module.fail_json(msg="the python mysqldb module is required")
 
     db = module.params["db"]
+    all_databases = module.params["all_databases"]
     encoding = module.params["encoding"]
     collation = module.params["collation"]
     state = module.params["state"]
@@ -258,11 +281,11 @@ def main():
         if state == "absent":
             changed = db_delete(cursor, db)
         elif state == "dump":
-            changed = db_dump(login_host, login_user, login_password, db, target)
+            changed = db_dump(login_host, login_user, login_password, db, target, all_databases)
             if not changed:
                 module.fail_json(msg="dump failed!")
         elif state == "import":
-            changed = db_import(login_host, login_user, login_password, db, target)
+            changed = db_import(login_host, login_user, login_password, db, target, all_databases)
             if not changed:
                 module.fail_json(msg="import failed!")
     else:
