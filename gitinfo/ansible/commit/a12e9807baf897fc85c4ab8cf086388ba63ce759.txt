commit a12e9807baf897fc85c4ab8cf086388ba63ce759
Author: Ganesh Nalawade <ganesh634@gmail.com>
Date:   Tue Aug 15 19:20:28 2017 +0530

    Add intent arguments for ios and iosxr interface modules (#28018)
    
    * Add intent arguments for ios_interface
    
    *  Intent argument support
    *  Integration test case for intent arguments
    
    * Fix ci issue
    
    * Add intent arguments for iosxr_interface
    
    *  Add intent check support for iosxr_interface
    *  Integration test for intent + configuration
    
    * Fix ci failure

diff --git a/lib/ansible/modules/network/interface/net_interface.py b/lib/ansible/modules/network/interface/net_interface.py
index 19592d8349..79aaea16d6 100644
--- a/lib/ansible/modules/network/interface/net_interface.py
+++ b/lib/ansible/modules/network/interface/net_interface.py
@@ -46,10 +46,15 @@ options:
     choices: ['full', 'half', 'auto']
   tx_rate:
     description:
-      - Transmit rate
+      - Transmit rate.
   rx_rate:
     description:
-      - Receiver rate
+      - Receiver rate.
+  delay:
+    description:
+      - Time in seconds to wait before checking for the operational state on remote
+        device. This wait is applicable for operational state argument which are
+        I(state) with values C(up)/C(down), I(tx_rate) and I(rx_rate).
   aggregate:
     description: List of Interfaces definitions.
   purge:
@@ -105,6 +110,19 @@ EXAMPLES = """
       - name: ge-0/0/1
       - name: ge-0/0/2
     state: absent
+
+- name: Check intent arguments
+  net_interface:
+    name: fxp0
+    state: up
+    tx_rate: ge(0)
+    rx_rate: le(0)
+
+- name: Config + intent
+  net_interface:
+    name: fxp0
+    enabled: False
+    state: down
 """
 
 RETURN = """
diff --git a/lib/ansible/modules/network/ios/ios_interface.py b/lib/ansible/modules/network/ios/ios_interface.py
index ac7b2bf116..de96069fce 100644
--- a/lib/ansible/modules/network/ios/ios_interface.py
+++ b/lib/ansible/modules/network/ios/ios_interface.py
@@ -46,17 +46,17 @@ options:
     choices: ['full', 'half', 'auto']
   tx_rate:
     description:
-      - Transmit rate
+      - Transmit rate in bits per second (bps).
   rx_rate:
     description:
-      - Receiver rate
+      - Receiver rate in bits per second (bps).
   aggregate:
     description: List of Interfaces definitions.
-  purge:
+  delay:
     description:
-      - Purge Interfaces not defined in the aggregate parameter.
-        This applies only for logical interface.
-    default: no
+      - Time in seconds to wait before checking for the operational state on remote
+        device. This wait is applicable for operational state argument which are
+        I(state) with values C(up)/C(down), I(tx_rate) and I(rx_rate).
   state:
     description:
       - State of the Interface configuration, C(up) means present and
@@ -82,11 +82,24 @@ EXAMPLES = """
 - name: make interface up
   ios_interface:
     name: GigabitEthernet0/2
-    state: up
+    enabled: True
 
 - name: make interface down
   ios_interface:
     name: GigabitEthernet0/2
+    enabled: False
+
+- name: Check intent arguments
+  ios_interface:
+    name: GigabitEthernet0/2
+    state: up
+    tx_rate: ge(0)
+    rx_rate: le(0)
+
+- name: Config + intent
+  ios_interface:
+    name: GigabitEthernet0/2
+    enabled: False
     state: down
 """
 
@@ -103,10 +116,15 @@ commands:
 """
 import re
 
+from time import sleep
+
+from ansible.module_utils._text import to_text
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import exec_command
 from ansible.module_utils.ios import get_config, load_config
 from ansible.module_utils.ios import ios_argument_spec, check_args
 from ansible.module_utils.netcfg import NetworkConfig
+from ansible.module_utils.network_common import conditional
 
 DEFAULT_DESCRIPTION = "configured by ios_interface"
 
@@ -207,12 +225,17 @@ def map_params_to_obj(module):
 
             if not d.get('state'):
                 d['state'] = module.params['state']
+            if d.get('enabled') is None:
+                d['enabled'] = module.params['enabled']
 
-            if d['state'] in ('present', 'up'):
+            if d['enabled']:
                 d['disable'] = False
             else:
                 d['disable'] = True
 
+            if d.get('delay') is None:
+                d['delay'] = module.params['delay']
+
             obj.append(d)
 
     else:
@@ -224,11 +247,13 @@ def map_params_to_obj(module):
             'speed': module.params['speed'],
             'mtu': module.params['mtu'],
             'duplex': module.params['duplex'],
-            'state': module.params['state']
+            'state': module.params['state'],
+            'delay': module.params['delay'],
+            'tx_rate': module.params['tx_rate'],
+            'rx_rate': module.params['rx_rate']
         }
 
-        state = module.params['state']
-        if state == 'present' or state == 'up':
+        if module.params['enabled']:
             params.update({'disable': False})
         else:
             params.update({'disable': True})
@@ -286,6 +311,53 @@ def map_obj_to_commands(updates):
     return commands
 
 
+def check_declarative_intent_params(module, want, result):
+    failed_conditions = []
+
+    for w in want:
+        want_state = w.get('state')
+        want_tx_rate = w.get('tx_rate')
+        want_rx_rate = w.get('rx_rate')
+        if want_state not in ('up', 'down') and not want_tx_rate and not want_rx_rate:
+            continue
+
+        if result['changed']:
+            sleep(w['delay'])
+
+        command = 'show interfaces %s' % w['name']
+        rc, out, err = exec_command(module, command)
+        if rc != 0:
+            module.fail_json(msg=to_text(err, errors='surrogate_then_replace'), command=command, rc=rc)
+
+        if want_state in ('up', 'down'):
+            match = re.search(r'%s (\w+)' % 'line protocol is', out, re.M)
+            have_state = None
+            if match:
+                have_state = match.group(1)
+            if have_state is None or not conditional(want_state, have_state.strip()):
+                failed_conditions.append('state ' + 'eq(%s)' % want_state)
+
+        if want_tx_rate:
+            match = re.search(r'%s (\d+)' % 'output rate', out, re.M)
+            have_tx_rate = None
+            if match:
+                have_tx_rate = match.group(1)
+
+            if have_tx_rate is None or not conditional(want_tx_rate, have_tx_rate.strip(), cast=int):
+                failed_conditions.append('tx_rate ' + want_tx_rate)
+
+        if want_rx_rate:
+            match = re.search(r'%s (\d+)' % 'input rate', out, re.M)
+            have_rx_rate = None
+            if match:
+                have_rx_rate = match.group(1)
+
+            if have_rx_rate is None or not conditional(want_rx_rate, have_rx_rate.strip(), cast=int):
+                failed_conditions.append('rx_rate ' + want_rx_rate)
+
+    return failed_conditions
+
+
 def main():
     """ main entry point for module execution
     """
@@ -295,11 +367,11 @@ def main():
         speed=dict(),
         mtu=dict(),
         duplex=dict(choices=['full', 'half', 'auto']),
-        enabled=dict(),
+        enabled=dict(default=True, type='bool'),
         tx_rate=dict(),
         rx_rate=dict(),
+        delay=dict(default=10, type='int'),
         aggregate=dict(type='list'),
-        purge=dict(default=False, type='bool'),
         state=dict(default='present',
                    choices=['present', 'absent', 'up', 'down'])
     )
@@ -331,6 +403,12 @@ def main():
             load_config(module, commands)
         result['changed'] = True
 
+    failed_conditions = check_declarative_intent_params(module, want, result)
+
+    if failed_conditions:
+        msg = 'One or more conditional statements have not been satisfied'
+        module.fail_json(msg=msg, failed_conditions=failed_conditions)
+
     module.exit_json(**result)
 
 if __name__ == '__main__':
diff --git a/lib/ansible/modules/network/iosxr/iosxr_interface.py b/lib/ansible/modules/network/iosxr/iosxr_interface.py
index cc09d2fa82..b5075d894b 100644
--- a/lib/ansible/modules/network/iosxr/iosxr_interface.py
+++ b/lib/ansible/modules/network/iosxr/iosxr_interface.py
@@ -45,17 +45,17 @@ options:
     choices: ['full', 'half']
   tx_rate:
     description:
-      - Transmit rate
+      - Transmit rate in bits per second (bps).
   rx_rate:
     description:
-      - Receiver rate
+      - Receiver rate in bits per second (bps).
   aggregate:
     description: List of Interfaces definitions.
-  purge:
+  delay:
     description:
-      - Purge Interfaces not defined in the aggregate parameter.
-        This applies only for logical interface.
-    default: no
+      - Time in seconds to wait before checking for the operational state on remote
+        device. This wait is applicable for operational state argument which are
+        I(state) with values C(up)/C(down), I(tx_rate) and I(rx_rate).
   state:
     description:
       - State of the Interface configuration, C(up) means present and
@@ -81,12 +81,12 @@ EXAMPLES = """
 - name: make interface up
   iosxr_interface:
     name: GigabitEthernet0/0/0/2
-    state: up
+    enabled: True
 
 - name: make interface down
   iosxr_interface:
     name: GigabitEthernet0/0/0/2
-    state: down
+    enabled: False
 """
 
 RETURN = """
@@ -102,9 +102,14 @@ commands:
 """
 import re
 
+from time import sleep
+
+from ansible.module_utils._text import to_text
 from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import exec_command
 from ansible.module_utils.iosxr import get_config, load_config
 from ansible.module_utils.iosxr import iosxr_argument_spec, check_args
+from ansible.module_utils.network_common import conditional
 
 DEFAULT_DESCRIPTION = "configured by iosxr_interface"
 
@@ -173,11 +178,17 @@ def map_params_to_obj(module):
             if not d.get('state'):
                 d['state'] = module.params['state']
 
-            if d['state'] in ('present', 'up'):
+            if d.get('enabled') is None:
+                d['enabled'] = module.params['enabled']
+
+            if d['enabled']:
                 d['disable'] = False
             else:
                 d['disable'] = True
 
+            if d.get('delay') is None:
+                d['delay'] = module.params['delay']
+
             obj.append(d)
 
     else:
@@ -188,11 +199,13 @@ def map_params_to_obj(module):
             'speed': module.params['speed'],
             'mtu': module.params['mtu'],
             'duplex': module.params['duplex'],
-            'state': module.params['state']
+            'state': module.params['state'],
+            'delay': module.params['delay'],
+            'tx_rate': module.params['tx_rate'],
+            'rx_rate': module.params['rx_rate']
         }
 
-        state = module.params['state']
-        if state == 'present' or state == 'up':
+        if module.params['enabled']:
             params.update({'disable': False})
         else:
             params.update({'disable': True})
@@ -275,6 +288,57 @@ def map_obj_to_commands(updates):
     return commands
 
 
+def check_declarative_intent_params(module, want, result):
+    failed_conditions = []
+    for w in want:
+        want_state = w.get('state')
+        want_tx_rate = w.get('tx_rate')
+        want_rx_rate = w.get('rx_rate')
+        if want_state not in ('up', 'down') and not want_tx_rate and not want_rx_rate:
+            continue
+
+        if result['changed']:
+            sleep(w['delay'])
+
+        command = 'show interfaces %s' % w['name']
+        rc, out, err = exec_command(module, command)
+        if rc != 0:
+            module.fail_json(msg=to_text(err, errors='surrogate_then_replace'), command=command, rc=rc)
+
+        if want_state in ('up', 'down'):
+            match = re.search(r'%s (\w+)' % 'line protocol is', out, re.M)
+            have_state = None
+            if match:
+                have_state = match.group(1)
+                if have_state.strip() == 'administratively':
+                    match = re.search(r'%s (\w+)' % 'administratively', out, re.M)
+                    if match:
+                        have_state = match.group(1)
+
+            if have_state is None or not conditional(want_state, have_state.strip()):
+                failed_conditions.append('state ' + 'eq(%s)' % want_state)
+
+        if want_tx_rate:
+            match = re.search(r'%s (\d+)' % 'output rate', out, re.M)
+            have_tx_rate = None
+            if match:
+                have_tx_rate = match.group(1)
+
+            if have_tx_rate is None or not conditional(want_tx_rate, have_tx_rate.strip(), cast=int):
+                failed_conditions.append('tx_rate ' + want_tx_rate)
+
+        if want_rx_rate:
+            match = re.search(r'%s (\d+)' % 'input rate', out, re.M)
+            have_rx_rate = None
+            if match:
+                have_rx_rate = match.group(1)
+
+            if have_rx_rate is None or not conditional(want_rx_rate, have_rx_rate.strip(), cast=int):
+                failed_conditions.append('rx_rate ' + want_rx_rate)
+
+    return failed_conditions
+
+
 def main():
     """ main entry point for module execution
     """
@@ -284,11 +348,11 @@ def main():
         speed=dict(),
         mtu=dict(),
         duplex=dict(choices=['full', 'half']),
-        enabled=dict(),
+        enabled=dict(default=True, type='bool'),
         tx_rate=dict(),
         rx_rate=dict(),
+        delay=dict(default=10, type='int'),
         aggregate=dict(type='list'),
-        purge=dict(default=False, type='bool'),
         state=dict(default='present',
                    choices=['present', 'absent', 'up', 'down'])
     )
@@ -316,14 +380,18 @@ def main():
     result['commands'] = commands
     result['warnings'] = warnings
 
-    if 'no username admin' in commands:
-        module.fail_json(msg='cannot delete the `admin` account')
-
     if commands:
         if not module.check_mode:
             load_config(module, commands, result['warnings'], commit=True)
+            exec_command(module, 'exit')
         result['changed'] = True
 
+    failed_conditions = check_declarative_intent_params(module, want, result)
+
+    if failed_conditions:
+        msg = 'One or more conditional statements have not been satisfied'
+        module.fail_json(msg=msg, failed_conditions=failed_conditions)
+
     module.exit_json(**result)
 
 if __name__ == '__main__':
diff --git a/test/integration/targets/ios_interface/tests/cli/basic.yaml b/test/integration/targets/ios_interface/tests/cli/basic.yaml
index b47e056f6e..a48b81b3a1 100644
--- a/test/integration/targets/ios_interface/tests/cli/basic.yaml
+++ b/test/integration/targets/ios_interface/tests/cli/basic.yaml
@@ -1,6 +1,18 @@
 ---
 - debug: msg="START ios_interface netconf/basic.yaml"
 
+- name: Configure interface (setup)
+  ios_interface:
+    name: GigabitEthernet0/2
+    description: test-interface-1
+    speed: 10
+    duplex: full
+    mtu: 256
+    state: present
+    authorize: yes
+    provider: "{{ cli }}"
+  register: result
+
 - name: Confgure interface
   ios_interface:
     name: GigabitEthernet0/2
@@ -103,7 +115,7 @@
 - name: Disable interface
   ios_interface:
     name: GigabitEthernet0/2
-    state: down
+    enabled: False
     authorize: yes
     provider: "{{ cli }}"
   register: result
@@ -117,7 +129,7 @@
 - name: Enable interface
   ios_interface:
     name: GigabitEthernet0/2
-    state: up
+    enabled: True
     authorize: yes
     provider: "{{ cli }}"
   register: result
@@ -132,17 +144,14 @@
   ios_interface:
     name: GigabitEthernet0/1
     description: test-interface-initial
+    speed: 100
+    duplex: full
+    mtu: 516
     state: present
     authorize: yes
     provider: "{{ cli }}"
   register: result
 
-- assert:
-    that:
-      - 'result.changed == true'
-      - '"interface GigabitEthernet0/1" in result.commands'
-      - '"description test-interface-initial" in result.commands'
-
 - name: Add interface aggregate
   ios_interface:
     aggregate:
@@ -209,8 +218,8 @@
 - name: Disable interface aggregate
   ios_interface:
     aggregate:
-    - { name: GigabitEthernet0/1, state: down }
-    - { name: GigabitEthernet0/2, state: down }
+    - { name: GigabitEthernet0/1, enabled: False }
+    - { name: GigabitEthernet0/2, enabled: False }
     state: present
     authorize: yes
     provider: "{{ cli }}"
@@ -227,8 +236,8 @@
 - name: Enable interface aggregate
   ios_interface:
     aggregate:
-    - { name: GigabitEthernet0/1, state: up }
-    - { name: GigabitEthernet0/2, state: up }
+    - { name: GigabitEthernet0/1, enabled: True }
+    - { name: GigabitEthernet0/2, enabled: True }
     state: present
     authorize: yes
     provider: "{{ cli }}"
diff --git a/test/integration/targets/ios_interface/tests/cli/intent.yaml b/test/integration/targets/ios_interface/tests/cli/intent.yaml
new file mode 100644
index 0000000000..cde3d7b9ce
--- /dev/null
+++ b/test/integration/targets/ios_interface/tests/cli/intent.yaml
@@ -0,0 +1,77 @@
+---
+- debug: msg="START ios_interface cli/intent.yaml"
+
+- name: Check intent arguments
+  ios_interface:
+    name: GigabitEthernet0/2
+    state: up
+    tx_rate: ge(0)
+    rx_rate: le(0)
+    authorize: yes
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - "result.failed == false"
+
+- name: Check intent arguments (failed condition)
+  ios_interface:
+    name: GigabitEthernet0/2
+    state: down
+    tx_rate: gt(0)
+    rx_rate: lt(0)
+    authorize: yes
+    provider: "{{ cli }}"
+  ignore_errors: yes
+  register: result
+
+- assert:
+    that:
+      - "result.failed == true"
+      - "'state eq(down)' in result.failed_conditions"
+      - "'tx_rate gt(0)' in result.failed_conditions"
+      - "'rx_rate lt(0)' in result.failed_conditions"
+
+- name: Config + intent
+  ios_interface:
+    name: GigabitEthernet0/2
+    enabled: False
+    state: down
+    authorize: yes
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - "result.failed == false"
+
+- name: Config + intent (fail)
+  ios_interface:
+    name: GigabitEthernet0/2
+    enabled: False
+    authorize: yes
+    state: up
+    provider: "{{ cli }}"
+  ignore_errors: yes
+  register: result
+
+- assert:
+    that:
+      - "result.failed == true"
+      - "'state eq(up)' in result.failed_conditions"
+
+- name: Aggregate config + intent (pass)
+  ios_interface:
+    aggregate:
+    - name: GigabitEthernet0/2
+      enabled: True
+      state: up
+    authorize: yes
+    provider: "{{ cli }}"
+  ignore_errors: yes
+  register: result
+
+- assert:
+    that:
+      - "result.failed == false"
diff --git a/test/integration/targets/iosxr_interface/tests/cli/basic.yaml b/test/integration/targets/iosxr_interface/tests/cli/basic.yaml
index b49497886e..660c21f8c6 100644
--- a/test/integration/targets/iosxr_interface/tests/cli/basic.yaml
+++ b/test/integration/targets/iosxr_interface/tests/cli/basic.yaml
@@ -2,7 +2,7 @@
 - debug: msg="START iosxr_interface cli/basic.yaml"
 
 - name: Setup interface
-  net_interface:
+  iosxr_interface:
     name: GigabitEthernet0/0/0/2
     state: absent
     provider: "{{ cli }}"
@@ -10,7 +10,7 @@
 
 
 - name: Confgure interface
-  net_interface:
+  iosxr_interface:
     name: GigabitEthernet0/0/0/2
     description: test-interface-initial
     state: present
@@ -23,7 +23,7 @@
       - '"interface GigabitEthernet0/0/0/2 description test-interface-initial" in result.commands'
 
 - name: Confgure interface (idempotent)
-  net_interface:
+  iosxr_interface:
     name: GigabitEthernet0/0/0/2
     description: test-interface-initial
     state: present
@@ -35,7 +35,7 @@
       - 'result.changed == false'
 
 - name: Confgure interface parameters
-  net_interface:
+  iosxr_interface:
     name: GigabitEthernet0/0/0/2
     description: test-interface
     speed: 100
@@ -54,7 +54,7 @@
       - '"interface GigabitEthernet0/0/0/2 mtu 512" in result.commands'
 
 - name: Change interface parameters
-  net_interface:
+  iosxr_interface:
     name: GigabitEthernet0/0/0/2
     description: test-interface-1
     speed: 10
@@ -73,7 +73,7 @@
       - '"interface GigabitEthernet0/0/0/2 mtu 256" in result.commands'
 
 - name: Delete interface parameters
-  net_interface:
+  iosxr_interface:
     name: GigabitEthernet0/0/0/2
     state: present
     provider: "{{ cli }}"
@@ -88,7 +88,7 @@
       - '"no interface GigabitEthernet0/0/0/2 mtu 256" in result.commands'
 
 - name: Delete interface parameters (idempotent)
-  net_interface:
+  iosxr_interface:
     name: GigabitEthernet0/0/0/2
     state: present
     provider: "{{ cli }}"
@@ -99,9 +99,9 @@
       - 'result.changed == false'
 
 - name: Disable interface
-  net_interface:
+  iosxr_interface:
     name: GigabitEthernet0/0/0/2
-    state: down
+    enabled: False
     provider: "{{ cli }}"
   register: result
 
@@ -111,9 +111,9 @@
       - '"interface GigabitEthernet0/0/0/2 shutdown" in result.commands'
 
 - name: Enable interface
-  net_interface:
+  iosxr_interface:
     name: GigabitEthernet0/0/0/2
-    state: up
+    enabled: True
     provider: "{{ cli }}"
   register: result
 
@@ -123,7 +123,7 @@
       - '"no interface GigabitEthernet0/0/0/2 shutdown" in result.commands'
 
 - name: Confgure second interface (setup)
-  net_interface:
+  iosxr_interface:
     name: GigabitEthernet0/0/0/3
     description: test-interface-initial
     state: present
@@ -136,7 +136,7 @@
       - '"interface GigabitEthernet0/0/0/3 description test-interface-initial" in result.commands'
 
 - name: Add interface aggregate
-  net_interface:
+  iosxr_interface:
     aggregate:
     - { name: GigabitEthernet0/0/0/3, speed: 10, duplex: half, mtu: 256, description: test-interface-1 }
     - { name: GigabitEthernet0/0/0/2, speed: 100, duplex: full, mtu: 516, description: test-interface-2 }
@@ -157,7 +157,7 @@
       - '"interface GigabitEthernet0/0/0/2 mtu 516" in result.commands'
 
 - name: Add interface aggregate (idempotent)
-  net_interface:
+  iosxr_interface:
     aggregate:
     - { name: GigabitEthernet0/0/0/3, speed: 10, duplex: half, mtu: 256, description: test-interface-1 }
     - { name: GigabitEthernet0/0/0/2, speed: 100, duplex: full, mtu: 516, description: test-interface-2 }
@@ -171,7 +171,7 @@
 
 
 - name: Change interface parameters in aggregate
-  net_interface:
+  iosxr_interface:
     aggregate:
     - { name: GigabitEthernet0/0/0/3 }
     - { name: GigabitEthernet0/0/0/2 }
@@ -192,10 +192,10 @@
       - '"no interface GigabitEthernet0/0/0/2 mtu 516" in result.commands'
 
 - name: Disable interface aggregate
-  net_interface:
+  iosxr_interface:
     aggregate:
-    - { name: GigabitEthernet0/0/0/3, state: down }
-    - { name: GigabitEthernet0/0/0/2, state: down }
+    - { name: GigabitEthernet0/0/0/3, enabled: False }
+    - { name: GigabitEthernet0/0/0/2, enabled: False }
     state: present
     provider: "{{ cli }}"
   register: result
@@ -207,10 +207,10 @@
       - '"interface GigabitEthernet0/0/0/2 shutdown" in result.commands'
 
 - name: Enable interface aggregate
-  net_interface:
+  iosxr_interface:
     aggregate:
-    - { name: GigabitEthernet0/0/0/3, state: up }
-    - { name: GigabitEthernet0/0/0/2, state: up }
+    - { name: GigabitEthernet0/0/0/3, enabled: True }
+    - { name: GigabitEthernet0/0/0/2, enabled: True }
     state: present
     provider: "{{ cli }}"
   register: result
@@ -222,7 +222,7 @@
       - '"no interface GigabitEthernet0/0/0/2 shutdown" in result.commands'
 
 - name: Create interface aggregate
-  net_interface:
+  iosxr_interface:
     aggregate:
     - { name: GigabitEthernet0/0/0/4 }
     - { name: GigabitEthernet0/0/0/5 }
@@ -237,7 +237,7 @@
       - '"interface GigabitEthernet0/0/0/5 description configured by iosxr_interface" in result.commands'
 
 - name: Delete interface aggregate
-  net_interface:
+  iosxr_interface:
     aggregate:
     - { name: GigabitEthernet0/0/0/4, state: absent }
     - { name: GigabitEthernet0/0/0/5, state: absent }
@@ -252,7 +252,7 @@
       - '"no interface GigabitEthernet0/0/0/5" in result.commands'
 
 - name: Delete interface aggregate (idempotent)
-  net_interface:
+  iosxr_interface:
     aggregate:
     - { name: GigabitEthernet0/0/0/4, state: absent }
     - { name: GigabitEthernet0/0/0/5, state: absent }
diff --git a/test/integration/targets/iosxr_interface/tests/cli/intent.yaml b/test/integration/targets/iosxr_interface/tests/cli/intent.yaml
new file mode 100644
index 0000000000..ac0e34523d
--- /dev/null
+++ b/test/integration/targets/iosxr_interface/tests/cli/intent.yaml
@@ -0,0 +1,77 @@
+---
+- debug: msg="START iosxr_interface cli/intent.yaml"
+
+- name: Setup (interface is up)
+  iosxr_interface:
+    name: GigabitEthernet0/0/0/5
+    enabled: True
+    state: present
+    provider: "{{ cli }}"
+  register: result
+
+- name: Check intent arguments
+  iosxr_interface:
+    name: GigabitEthernet0/0/0/5
+    state: up
+    delay: 20
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - "result.failed == false"
+
+- name: Check intent arguments (failed condition)
+  iosxr_interface:
+    name: GigabitEthernet0/0/0/5
+    state: down
+    provider: "{{ cli }}"
+  ignore_errors: yes
+  register: result
+
+- assert:
+    that:
+      - "result.failed == true"
+      - "'state eq(down)' in result.failed_conditions"
+
+- name: Config + intent
+  iosxr_interface:
+    name: GigabitEthernet0/0/0/5
+    enabled: False
+    state: down
+    delay: 20
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - "result.failed == false"
+
+- name: Config + intent (fail)
+  iosxr_interface:
+    name: GigabitEthernet0/0/0/5
+    enabled: False
+    state: up
+    provider: "{{ cli }}"
+  ignore_errors: yes
+  register: result
+
+- assert:
+    that:
+      - "result.failed == true"
+      - "'state eq(up)' in result.failed_conditions"
+
+- name: Aggregate config + intent (pass)
+  iosxr_interface:
+    aggregate:
+    - name: GigabitEthernet0/0/0/5
+      enabled: True
+      state: up
+      delay: 20
+    provider: "{{ cli }}"
+  ignore_errors: yes
+  register: result
+
+- assert:
+    that:
+      - "result.failed == false"
diff --git a/test/integration/targets/net_interface/tests/ios/basic.yaml b/test/integration/targets/net_interface/tests/ios/basic.yaml
index 4f18588e96..6cd446378c 100644
--- a/test/integration/targets/net_interface/tests/ios/basic.yaml
+++ b/test/integration/targets/net_interface/tests/ios/basic.yaml
@@ -1,6 +1,18 @@
 ---
 - debug: msg="START net_interface ios/basic.yaml"
 
+- name: Configure interface (setup)
+  net_interface:
+    name: GigabitEthernet0/2
+    description: test-interface-1
+    speed: 10
+    duplex: full
+    mtu: 256
+    state: present
+    authorize: yes
+    provider: "{{ cli }}"
+  register: result
+
 - name: Confgure interface
   net_interface:
     name: GigabitEthernet0/2
@@ -103,7 +115,7 @@
 - name: Disable interface
   net_interface:
     name: GigabitEthernet0/2
-    state: down
+    enabled: False
     authorize: yes
     provider: "{{ cli }}"
   register: result
@@ -117,7 +129,7 @@
 - name: Enable interface
   net_interface:
     name: GigabitEthernet0/2
-    state: up
+    enabled: True
     authorize: yes
     provider: "{{ cli }}"
   register: result
@@ -132,17 +144,14 @@
   net_interface:
     name: GigabitEthernet0/1
     description: test-interface-initial
+    speed: 100
+    duplex: full
+    mtu: 516
     state: present
     authorize: yes
     provider: "{{ cli }}"
   register: result
 
-- assert:
-    that:
-      - 'result.changed == true'
-      - '"interface GigabitEthernet0/1" in result.commands'
-      - '"description test-interface-initial" in result.commands'
-
 - name: Add interface aggregate
   net_interface:
     aggregate:
@@ -209,8 +218,8 @@
 - name: Disable interface aggregate
   net_interface:
     aggregate:
-    - { name: GigabitEthernet0/1, state: down }
-    - { name: GigabitEthernet0/2, state: down }
+    - { name: GigabitEthernet0/1, enabled: False }
+    - { name: GigabitEthernet0/2, enabled: False }
     state: present
     authorize: yes
     provider: "{{ cli }}"
@@ -227,8 +236,8 @@
 - name: Enable interface aggregate
   net_interface:
     aggregate:
-    - { name: GigabitEthernet0/1, state: up }
-    - { name: GigabitEthernet0/2, state: up }
+    - { name: GigabitEthernet0/1, enabled: True }
+    - { name: GigabitEthernet0/2, enabled: True }
     state: present
     authorize: yes
     provider: "{{ cli }}"
@@ -290,4 +299,4 @@
     that:
       - 'result.changed == false'
 
-- debug: msg="END net_interface ios/basic.yaml"
\ No newline at end of file
+- debug: msg="END net_interface ios/basic.yaml"
diff --git a/test/integration/targets/net_interface/tests/ios/intent.yaml b/test/integration/targets/net_interface/tests/ios/intent.yaml
new file mode 100644
index 0000000000..a5b864f74b
--- /dev/null
+++ b/test/integration/targets/net_interface/tests/ios/intent.yaml
@@ -0,0 +1,77 @@
+---
+- debug: msg="START net_interface ios/intent.yaml"
+
+- name: Check intent arguments
+  net_interface:
+    name: GigabitEthernet0/2
+    state: up
+    tx_rate: ge(0)
+    rx_rate: le(0)
+    authorize: yes
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - "result.failed == false"
+
+- name: Check intent arguments (failed condition)
+  net_interface:
+    name: GigabitEthernet0/2
+    state: down
+    tx_rate: gt(0)
+    rx_rate: lt(0)
+    authorize: yes
+    provider: "{{ cli }}"
+  ignore_errors: yes
+  register: result
+
+- assert:
+    that:
+      - "result.failed == true"
+      - "'state eq(down)' in result.failed_conditions"
+      - "'tx_rate gt(0)' in result.failed_conditions"
+      - "'rx_rate lt(0)' in result.failed_conditions"
+
+- name: Config + intent
+  net_interface:
+    name: GigabitEthernet0/2
+    enabled: False
+    state: down
+    authorize: yes
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - "result.failed == false"
+
+- name: Config + intent (fail)
+  net_interface:
+    name: GigabitEthernet0/2
+    enabled: False
+    authorize: yes
+    state: up
+    provider: "{{ cli }}"
+  ignore_errors: yes
+  register: result
+
+- assert:
+    that:
+      - "result.failed == true"
+      - "'state eq(up)' in result.failed_conditions"
+
+- name: Aggregate config + intent (pass)
+  net_interface:
+    aggregate:
+    - name: GigabitEthernet0/2
+      enabled: True
+      state: up
+    authorize: yes
+    provider: "{{ cli }}"
+  ignore_errors: yes
+  register: result
+
+- assert:
+    that:
+      - "result.failed == false"
diff --git a/test/integration/targets/net_interface/tests/iosxr/basic.yaml b/test/integration/targets/net_interface/tests/iosxr/basic.yaml
index c55414fc37..58607ecf0f 100644
--- a/test/integration/targets/net_interface/tests/iosxr/basic.yaml
+++ b/test/integration/targets/net_interface/tests/iosxr/basic.yaml
@@ -101,7 +101,7 @@
 - name: Disable interface
   net_interface:
     name: GigabitEthernet0/0/0/2
-    state: down
+    enabled: False
     provider: "{{ cli }}"
   register: result
 
@@ -113,7 +113,7 @@
 - name: Enable interface
   net_interface:
     name: GigabitEthernet0/0/0/2
-    state: up
+    enabled: True
     provider: "{{ cli }}"
   register: result
 
@@ -194,8 +194,8 @@
 - name: Disable interface aggregate
   net_interface:
     aggregate:
-    - { name: GigabitEthernet0/0/0/3, state: down }
-    - { name: GigabitEthernet0/0/0/2, state: down }
+    - { name: GigabitEthernet0/0/0/3, enabled: False }
+    - { name: GigabitEthernet0/0/0/2, enabled: False }
     state: present
     provider: "{{ cli }}"
   register: result
@@ -209,8 +209,8 @@
 - name: Enable interface aggregate
   net_interface:
     aggregate:
-    - { name: GigabitEthernet0/0/0/3, state: up }
-    - { name: GigabitEthernet0/0/0/2, state: up }
+    - { name: GigabitEthernet0/0/0/3, enabled: True }
+    - { name: GigabitEthernet0/0/0/2, enabled: True }
     state: present
     provider: "{{ cli }}"
   register: result
diff --git a/test/integration/targets/net_interface/tests/iosxr/intent.yaml b/test/integration/targets/net_interface/tests/iosxr/intent.yaml
new file mode 100644
index 0000000000..272fcb5cc2
--- /dev/null
+++ b/test/integration/targets/net_interface/tests/iosxr/intent.yaml
@@ -0,0 +1,77 @@
+---
+- debug: msg="START net_interface cli/intent.yaml"
+
+- name: Setup (interface is up)
+  net_interface:
+    name: GigabitEthernet0/0/0/5
+    enabled: True
+    state: present
+    provider: "{{ cli }}"
+  register: result
+
+- name: Check intent arguments
+  net_interface:
+    name: GigabitEthernet0/0/0/5
+    state: up
+    delay: 20
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - "result.failed == false"
+
+- name: Check intent arguments (failed condition)
+  net_interface:
+    name: GigabitEthernet0/0/0/5
+    state: down
+    provider: "{{ cli }}"
+  ignore_errors: yes
+  register: result
+
+- assert:
+    that:
+      - "result.failed == true"
+      - "'state eq(down)' in result.failed_conditions"
+
+- name: Config + intent
+  net_interface:
+    name: GigabitEthernet0/0/0/5
+    enabled: False
+    state: down
+    delay: 20
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - "result.failed == false"
+
+- name: Config + intent (fail)
+  net_interface:
+    name: GigabitEthernet0/0/0/5
+    enabled: False
+    state: up
+    provider: "{{ cli }}"
+  ignore_errors: yes
+  register: result
+
+- assert:
+    that:
+      - "result.failed == true"
+      - "'state eq(up)' in result.failed_conditions"
+
+- name: Aggregate config + intent (pass)
+  net_interface:
+    aggregate:
+    - name: GigabitEthernet0/0/0/5
+      enabled: True
+      state: up
+      delay: 20
+    provider: "{{ cli }}"
+  ignore_errors: yes
+  register: result
+
+- assert:
+    that:
+      - "result.failed == false"
