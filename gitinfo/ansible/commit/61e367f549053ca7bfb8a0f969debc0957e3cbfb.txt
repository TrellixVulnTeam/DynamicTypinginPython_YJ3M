commit 61e367f549053ca7bfb8a0f969debc0957e3cbfb
Author: Toshio Kuratomi <a.badger@gmail.com>
Date:   Mon Jun 22 10:14:04 2015 -0700

    Better error messages when the file to be transferred does not exist.

diff --git a/lib/ansible/plugins/connections/jail.py b/lib/ansible/plugins/connections/jail.py
index 4a47d5101e..0c8c9def27 100644
--- a/lib/ansible/plugins/connections/jail.py
+++ b/lib/ansible/plugins/connections/jail.py
@@ -134,25 +134,27 @@ class Connection(object):
 
         vvv("PUT %s TO %s" % (in_path, out_path), host=self.jail)
 
-        with open(in_path, 'rb') as in_file:
-            try:
-                p = self._buffered_exec_command('dd of=%s' % out_path, None, stdin=in_file)
-            except OSError:
-                raise errors.AnsibleError("jail connection requires dd command in the jail")
-            try:
-                stdout, stderr = p.communicate()
-            except:
-                traceback.print_exc()
-                raise errors.AnsibleError("failed to transfer file to %s" % out_path)
-            if p.returncode != 0:
-                raise errors.AnsibleError("failed to transfer file to %s:\n%s\n%s" % (out_path, stdout, stderr))
+        try:
+            with open(in_path, 'rb') as in_file:
+                try:
+                    p = self._buffered_exec_command('dd of=%s' % out_path, None, stdin=in_file)
+                except OSError:
+                    raise errors.AnsibleError("jail connection requires dd command in the jail")
+                try:
+                    stdout, stderr = p.communicate()
+                except:
+                    traceback.print_exc()
+                    raise errors.AnsibleError("failed to transfer file %s to %s" % (in_path, out_path))
+                if p.returncode != 0:
+                    raise errors.AnsibleError("failed to transfer file %s to %s:\n%s\n%s" % (in_path, out_path, stdout, stderr))
+        except IOError:
+            raise errors.AnsibleError("file or module does not exist at: %s" % in_path)
 
     def fetch_file(self, in_path, out_path):
         ''' fetch a file from jail to local '''
 
         vvv("FETCH %s TO %s" % (in_path, out_path), host=self.jail)
 
-
         try:
             p = self._buffered_exec_command('dd if=%s bs=%s' % (in_path, BUFSIZE), None)
         except OSError:
@@ -164,10 +166,10 @@ class Connection(object):
                     out_file.write(chunk)
             except:
                 traceback.print_exc()
-                raise errors.AnsibleError("failed to transfer file to %s" % out_path)
+                raise errors.AnsibleError("failed to transfer file %s to %s" % (in_path, out_path))
             stdout, stderr = p.communicate()
             if p.returncode != 0:
-                raise errors.AnsibleError("failed to transfer file to %s:\n%s\n%s" % (out_path, stdout, stderr))
+                raise errors.AnsibleError("failed to transfer file %s to %s:\n%s\n%s" % (in_path, out_path, stdout, stderr))
 
     def close(self):
         ''' terminate the connection; nothing to do here '''
diff --git a/lib/ansible/plugins/connections/zone.py b/lib/ansible/plugins/connections/zone.py
index ffcabfca5f..7e6fa5fe60 100644
--- a/lib/ansible/plugins/connections/zone.py
+++ b/lib/ansible/plugins/connections/zone.py
@@ -147,18 +147,21 @@ class Connection(object):
 
         vvv("PUT %s TO %s" % (in_path, out_path), host=self.zone)
 
-        with open(in_path, 'rb') as in_file:
-            try:
-                p = self._buffered_exec_command('dd of=%s' % out_path, None, stdin=in_file)
-            except OSError:
-                raise errors.AnsibleError("zone connection requires dd command in the zone")
-            try:
-                stdout, stderr = p.communicate()
-            except:
-                traceback.print_exc()
-                raise errors.AnsibleError("failed to transfer file to %s" % out_path)
-            if p.returncode != 0:
-                raise errors.AnsibleError("failed to transfer file to %s:\n%s\n%s" % (out_path, stdout, stderr))
+        try:
+            with open(in_path, 'rb') as in_file:
+                try:
+                    p = self._buffered_exec_command('dd of=%s' % out_path, None, stdin=in_file)
+                except OSError:
+                    raise errors.AnsibleError("jail connection requires dd command in the jail")
+                try:
+                    stdout, stderr = p.communicate()
+                except:
+                    traceback.print_exc()
+                    raise errors.AnsibleError("failed to transfer file %s to %s" % (in_path, out_path))
+                if p.returncode != 0:
+                    raise errors.AnsibleError("failed to transfer file %s to %s:\n%s\n%s" % (in_path, out_path, stdout, stderr))
+        except IOError:
+            raise errors.AnsibleError("file or module does not exist at: %s" % in_path)
 
     def fetch_file(self, in_path, out_path):
         ''' fetch a file from zone to local '''
@@ -178,10 +181,10 @@ class Connection(object):
                     out_file.write(chunk)
             except:
                 traceback.print_exc()
-                raise errors.AnsibleError("failed to transfer file to %s" % out_path)
+                raise errors.AnsibleError("failed to transfer file %s to %s" % (in_path, out_path))
             stdout, stderr = p.communicate()
             if p.returncode != 0:
-                raise errors.AnsibleError("failed to transfer file to %s:\n%s\n%s" % (out_path, stdout, stderr))
+                raise errors.AnsibleError("failed to transfer file %s to %s:\n%s\n%s" % (in_path, out_path, stdout, stderr))
 
     def close(self):
         ''' terminate the connection; nothing to do here '''
