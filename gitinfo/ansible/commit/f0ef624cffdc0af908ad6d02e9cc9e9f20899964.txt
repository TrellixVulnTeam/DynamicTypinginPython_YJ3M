commit f0ef624cffdc0af908ad6d02e9cc9e9f20899964
Author: Trishna Guha <trishnaguha17@gmail.com>
Date:   Fri Aug 23 15:06:26 2019 +0530

    Add nxos_l3_interfaces resource module (#61021)
    
    Signed-off-by: Trishna Guha <trishnaguha17@gmail.com>

diff --git a/docs/docsite/rst/porting_guides/porting_guide_2.9.rst b/docs/docsite/rst/porting_guides/porting_guide_2.9.rst
index a192805700..cf9760e41e 100644
--- a/docs/docsite/rst/porting_guides/porting_guide_2.9.rst
+++ b/docs/docsite/rst/porting_guides/porting_guide_2.9.rst
@@ -104,6 +104,9 @@ The following modules will be removed in Ansible 2.13. Please update update your
 
 * vyos_lldp_interface use :ref:`vyos_lldp_interfaces <vyos_lldp_interfaces_module>` instead.
 
+* nxos_l3_interface use :ref:`nxos_l3_interfaces <nxos_l3_interfaces_module>` instead.
+
+
 The following functionality will be removed in Ansible 2.12. Please update update your playbooks accordingly.
 
 * ``vmware_cluster`` DRS, HA and VSAN configuration; use :ref:`vmware_cluster_drs <vmware_cluster_drs_module>`, :ref:`vmware_cluster_ha <vmware_cluster_ha_module>` and :ref:`vmware_cluster_vsan <vmware_cluster_vsan_module>` instead.
diff --git a/lib/ansible/module_utils/network/nxos/argspec/facts/facts.py b/lib/ansible/module_utils/network/nxos/argspec/facts/facts.py
index 6212507b84..4566239d09 100644
--- a/lib/ansible/module_utils/network/nxos/argspec/facts/facts.py
+++ b/lib/ansible/module_utils/network/nxos/argspec/facts/facts.py
@@ -15,6 +15,7 @@ CHOICES = [
     'lacp',
     'lacp_interfaces',
     'interfaces',
+    'l3_interfaces',
 ]
 
 
diff --git a/lib/ansible/module_utils/network/nxos/argspec/l3_interfaces/__init__.py b/lib/ansible/module_utils/network/nxos/argspec/l3_interfaces/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/lib/ansible/module_utils/network/nxos/argspec/l3_interfaces/l3_interfaces.py b/lib/ansible/module_utils/network/nxos/argspec/l3_interfaces/l3_interfaces.py
new file mode 100644
index 0000000000..d8618c1068
--- /dev/null
+++ b/lib/ansible/module_utils/network/nxos/argspec/l3_interfaces/l3_interfaces.py
@@ -0,0 +1,81 @@
+#
+# -*- coding: utf-8 -*-
+# Copyright 2019 Red Hat
+# GNU General Public License v3.0+
+# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
+
+#############################################
+#                WARNING                    #
+#############################################
+#
+# This file is auto generated by the resource
+#   module builder playbook.
+#
+# Do not edit this file manually.
+#
+# Changes to this file will be over written
+#   by the resource module builder.
+#
+# Changes should be made in the model used to
+#   generate this file or in the resource module
+#   builder template.
+#
+#############################################
+"""
+The arg spec for the nxos_l3_interfaces module
+"""
+from __future__ import absolute_import, division, print_function
+__metaclass__ = type
+
+
+class L3_interfacesArgs(object):  # pylint: disable=R0903
+    """The arg spec for the nxos_l3_interfaces module
+    """
+
+    def __init__(self, **kwargs):
+        pass
+
+    argument_spec = {
+        'config': {
+            'elements': 'dict',
+            'options': {
+                'ipv4': {
+                    'elements': 'dict',
+                    'options': {
+                        'address': {
+                            'type': 'str'
+                        },
+                        'secondary': {
+                            'type': 'bool'
+                        },
+                        'tag': {
+                            'type': 'int'
+                        }
+                    },
+                    'type': 'list'
+                },
+                'ipv6': {
+                    'elements': 'dict',
+                    'options': {
+                        'address': {
+                            'type': 'str'
+                        },
+                        'tag': {
+                            'type': 'int'
+                        }
+                    },
+                    'type': 'list'
+                },
+                'name': {
+                    'required': True,
+                    'type': 'str'
+                }
+            },
+            'type': 'list'
+        },
+        'state': {
+            'choices': ['merged', 'replaced', 'overridden', 'deleted'],
+            'default': 'merged',
+            'type': 'str'
+        }
+    }  # pylint: disable=C0301
diff --git a/lib/ansible/module_utils/network/nxos/config/l3_interfaces/__init__.py b/lib/ansible/module_utils/network/nxos/config/l3_interfaces/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/lib/ansible/module_utils/network/nxos/config/l3_interfaces/l3_interfaces.py b/lib/ansible/module_utils/network/nxos/config/l3_interfaces/l3_interfaces.py
new file mode 100644
index 0000000000..6dabaef0f0
--- /dev/null
+++ b/lib/ansible/module_utils/network/nxos/config/l3_interfaces/l3_interfaces.py
@@ -0,0 +1,305 @@
+#
+# -*- coding: utf-8 -*-
+# Copyright 2019 Red Hat
+# GNU General Public License v3.0+
+# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
+"""
+The nxos_l3_interfaces class
+It is in this file where the current configuration (as dict)
+is compared to the provided configuration (as dict) and the command set
+necessary to bring the current configuration to it's desired end-state is
+created
+"""
+
+from __future__ import absolute_import, division, print_function
+__metaclass__ = type
+
+from ansible.module_utils.network.common.cfg.base import ConfigBase
+from ansible.module_utils.network.common.utils import dict_diff, to_list, remove_empties
+from ansible.module_utils.network.nxos.facts.facts import Facts
+from ansible.module_utils.network.nxos.utils.utils import get_interface_type, normalize_interface, search_obj_in_list, validate_ipv4_addr, validate_ipv6_addr
+
+
+class L3_interfaces(ConfigBase):
+    """
+    The nxos_l3_interfaces class
+    """
+
+    gather_subset = [
+        '!all',
+        '!min',
+    ]
+
+    gather_network_resources = [
+        'l3_interfaces',
+    ]
+
+    exclude_params = [
+    ]
+
+    def __init__(self, module):
+        super(L3_interfaces, self).__init__(module)
+
+    def get_l3_interfaces_facts(self):
+        """ Get the 'facts' (the current configuration)
+
+        :rtype: A dictionary
+        :returns: The current configuration as a dictionary
+        """
+        facts, _warnings = Facts(self._module).get_facts(self.gather_subset, self.gather_network_resources)
+        l3_interfaces_facts = facts['ansible_network_resources'].get('l3_interfaces')
+        if not l3_interfaces_facts:
+            return []
+        return l3_interfaces_facts
+
+    def execute_module(self):
+        """ Execute the module
+
+        :rtype: A dictionary
+        :returns: The result from module execution
+        """
+        result = {'changed': False}
+        commands = list()
+        warnings = list()
+
+        existing_l3_interfaces_facts = self.get_l3_interfaces_facts()
+        commands.extend(self.set_config(existing_l3_interfaces_facts))
+        if commands:
+            if not self._module.check_mode:
+                self._connection.edit_config(commands)
+            result['changed'] = True
+        result['commands'] = commands
+
+        changed_l3_interfaces_facts = self.get_l3_interfaces_facts()
+
+        result['before'] = existing_l3_interfaces_facts
+        if result['changed']:
+            result['after'] = changed_l3_interfaces_facts
+
+        result['warnings'] = warnings
+        return result
+
+    def set_config(self, existing_l3_interfaces_facts):
+        """ Collect the configuration from the args passed to the module,
+            collect the current configuration (as a dict from facts)
+
+        :rtype: A list
+        :returns: the commands necessary to migrate the current configuration
+                  to the desired configuration
+        """
+        config = self._module.params.get('config')
+        want = []
+        if config:
+            for w in config:
+                w.update({'name': normalize_interface(w['name'])})
+                want.append(remove_empties(w))
+        have = existing_l3_interfaces_facts
+        resp = self.set_state(want, have)
+        return to_list(resp)
+
+    def set_state(self, want, have):
+        """ Select the appropriate function based on the state provided
+
+        :param want: the desired configuration as a dictionary
+        :param have: the current configuration as a dictionary
+        :rtype: A list
+        :returns: the commands necessary to migrate the current configuration
+                  to the desired configuration
+        """
+        state = self._module.params['state']
+        if state in ('overridden', 'merged', 'replaced') and not want:
+            self._module.fail_json(msg='config is required for state {0}'.format(state))
+
+        commands = list()
+        if state == 'overridden':
+            commands.extend(self._state_overridden(want, have))
+        elif state == 'deleted':
+            commands.extend(self._state_deleted(want, have))
+        else:
+            for w in want:
+                if state == 'merged':
+                    commands.extend(self._state_merged(w, have))
+                elif state == 'replaced':
+                    commands.extend(self._state_replaced(w, have))
+        return commands
+
+    def _state_replaced(self, w, have):
+        """ The command generator when state is replaced
+
+        :rtype: A list
+        :returns: the commands necessary to migrate the current configuration
+                  to the desired configuration
+        """
+        commands = []
+        merged_commands = self.set_commands(w, have)
+        replaced_commands = self.del_delta_attribs(w, have)
+
+        if merged_commands:
+            cmds = set(replaced_commands).intersection(set(merged_commands))
+            for cmd in cmds:
+                merged_commands.remove(cmd)
+            commands.extend(replaced_commands)
+            commands.extend(merged_commands)
+        return commands
+
+    def _state_overridden(self, want, have):
+        """ The command generator when state is overridden
+
+        :rtype: A list
+        :returns: the commands necessary to migrate the current configuration
+                  to the desired configuration
+        """
+        commands = []
+        for h in have:
+            obj_in_want = search_obj_in_list(h['name'], want, 'name')
+            if h == obj_in_want:
+                continue
+            commands.extend(self.del_all_attribs(h))
+        for w in want:
+            commands.extend(self.set_commands(w, have))
+        return commands
+
+    def _state_merged(self, w, have):
+        """ The command generator when state is merged
+
+        :rtype: A list
+        :returns: the commands necessary to merge the provided into
+                  the current configuration
+        """
+        return self.set_commands(w, have)
+
+    def _state_deleted(self, want, have):
+        """ The command generator when state is deleted
+
+        :rtype: A list
+        :returns: the commands necessary to remove the current configuration
+                  of the provided objects
+        """
+        commands = []
+        if want:
+            for w in want:
+                obj_in_have = search_obj_in_list(w['name'], have, 'name')
+                commands.extend(self.del_all_attribs(obj_in_have))
+        else:
+            if not have:
+                return commands
+            for h in have:
+                commands.extend(self.del_all_attribs(h))
+        return commands
+
+    def del_all_attribs(self, obj):
+        commands = []
+        if not obj or len(obj.keys()) == 1:
+            return commands
+        commands = self.generate_delete_commands(obj)
+        if commands:
+            commands.insert(0, 'interface ' + obj['name'])
+        return commands
+
+    def del_delta_attribs(self, w, have):
+        commands = []
+        obj_in_have = search_obj_in_list(w['name'], have, 'name')
+        if obj_in_have:
+            lst_to_del = []
+            ipv4_intersect = self.intersect_list_of_dicts(w.get('ipv4'), obj_in_have.get('ipv4'))
+            ipv6_intersect = self.intersect_list_of_dicts(w.get('ipv6'), obj_in_have.get('ipv6'))
+            if ipv4_intersect:
+                lst_to_del.append({'ipv4': ipv4_intersect})
+            if ipv6_intersect:
+                lst_to_del.append({'ipv6': ipv6_intersect})
+            if lst_to_del:
+                for item in lst_to_del:
+                    commands.extend(self.generate_delete_commands(item))
+            else:
+                commands.extend(self.generate_delete_commands(obj_in_have))
+            if commands:
+                commands.insert(0, 'interface ' + obj_in_have['name'])
+        return commands
+
+    def generate_delete_commands(self, obj):
+        commands = []
+        if 'ipv4' in obj:
+            commands.append('no ip address')
+        if 'ipv6' in obj:
+            commands.append('no ipv6 address')
+        return commands
+
+    def diff_of_dicts(self, w, obj):
+        diff = set(w.items()) - set(obj.items())
+        diff = dict(diff)
+        if diff and w['name'] == obj['name']:
+            diff.update({'name': w['name']})
+        return diff
+
+    def diff_list_of_dicts(self, w, h):
+        diff = []
+        set_w = set(tuple(sorted(d.items())) for d in w) if w else set()
+        set_h = set(tuple(sorted(d.items())) for d in h) if h else set()
+        difference = set_w.difference(set_h)
+        for element in difference:
+            diff.append(dict((x, y) for x, y in element))
+        return diff
+
+    def intersect_list_of_dicts(self, w, h):
+        intersect = []
+        waddr = []
+        haddr = []
+        set_w = set()
+        set_h = set()
+        if w:
+            for d in w:
+                waddr.append({'address': d['address']})
+            set_w = set(tuple(sorted(d.items())) for d in waddr) if waddr else set()
+        if h:
+            for d in h:
+                haddr.append({'address': d['address']})
+            set_h = set(tuple(sorted(d.items())) for d in haddr) if haddr else set()
+        intersection = set_w.intersection(set_h)
+        for element in intersection:
+            intersect.append(dict((x, y) for x, y in element))
+        return intersect
+
+    def add_commands(self, diff, name):
+        commands = []
+        if not diff:
+            return commands
+
+        if 'ipv4' in diff:
+            commands.extend(self.generate_commands(diff['ipv4'], flag='ipv4'))
+        if 'ipv6' in diff:
+            commands.extend(self.generate_commands(diff['ipv6'], flag='ipv6'))
+        if commands:
+            commands.insert(0, 'interface ' + name)
+        return commands
+
+    def generate_commands(self, d, flag=None):
+        commands = []
+
+        for i in d:
+            cmd = ''
+            if flag == 'ipv4':
+                cmd = 'ip address '
+            elif flag == 'ipv6':
+                cmd = 'ipv6 address '
+
+            cmd += i['address']
+            if 'secondary' in i and i['secondary'] is True:
+                cmd += ' ' + 'secondary'
+                if 'tag' in i:
+                    cmd += ' ' + 'tag ' + str(i['tag'])
+            elif 'tag' in i:
+                cmd += ' ' + 'tag ' + str(i['tag'])
+            commands.append(cmd)
+        return commands
+
+    def set_commands(self, w, have):
+        commands = []
+        obj_in_have = search_obj_in_list(w['name'], have, 'name')
+        if not obj_in_have:
+            commands = self.add_commands(w, w['name'])
+        else:
+            diff = {}
+            diff.update({'ipv4': self.diff_list_of_dicts(w.get('ipv4'), obj_in_have.get('ipv4'))})
+            diff.update({'ipv6': self.diff_list_of_dicts(w.get('ipv6'), obj_in_have.get('ipv6'))})
+            commands = self.add_commands(diff, w['name'])
+        return commands
diff --git a/lib/ansible/module_utils/network/nxos/facts/facts.py b/lib/ansible/module_utils/network/nxos/facts/facts.py
index 34110118b6..52b07b8d2f 100644
--- a/lib/ansible/module_utils/network/nxos/facts/facts.py
+++ b/lib/ansible/module_utils/network/nxos/facts/facts.py
@@ -14,6 +14,7 @@ from ansible.module_utils.network.common.facts.facts import FactsBase
 from ansible.module_utils.network.nxos.facts.legacy.base import Default, Legacy, Hardware, Config, Interfaces, Features
 from ansible.module_utils.network.nxos.facts.interfaces.interfaces import InterfacesFacts
 from ansible.module_utils.network.nxos.facts.lacp.lacp import LacpFacts
+from ansible.module_utils.network.nxos.facts.l3_interfaces.l3_interfaces import L3_interfacesFacts
 from ansible.module_utils.network.nxos.facts.lag_interfaces.lag_interfaces import Lag_interfacesFacts
 from ansible.module_utils.network.nxos.facts.telemetry.telemetry import TelemetryFacts
 from ansible.module_utils.network.nxos.facts.vlans.vlans import VlansFacts
@@ -35,6 +36,7 @@ FACT_RESOURCE_SUBSETS = dict(
     lacp=LacpFacts,
     lacp_interfaces=Lacp_interfacesFacts,
     interfaces=InterfacesFacts,
+    l3_interfaces=L3_interfacesFacts,
 )
 
 
diff --git a/lib/ansible/module_utils/network/nxos/facts/l3_interfaces/__init__.py b/lib/ansible/module_utils/network/nxos/facts/l3_interfaces/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/lib/ansible/module_utils/network/nxos/facts/l3_interfaces/l3_interfaces.py b/lib/ansible/module_utils/network/nxos/facts/l3_interfaces/l3_interfaces.py
new file mode 100644
index 0000000000..16bff6ce06
--- /dev/null
+++ b/lib/ansible/module_utils/network/nxos/facts/l3_interfaces/l3_interfaces.py
@@ -0,0 +1,126 @@
+#
+# -*- coding: utf-8 -*-
+# Copyright 2019 Red Hat
+# GNU General Public License v3.0+
+# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)#!/usr/bin/python
+"""
+The nxos l3_interfaces fact class
+It is in this file the configuration is collected from the device
+for a given resource, parsed, and the facts tree is populated
+based on the configuration.
+"""
+from __future__ import absolute_import, division, print_function
+__metaclass__ = type
+
+import re
+from copy import deepcopy
+
+from ansible.module_utils.network.common import utils
+from ansible.module_utils.network.nxos.argspec.l3_interfaces.l3_interfaces import L3_interfacesArgs
+from ansible.module_utils.network.nxos.utils.utils import get_interface_type, validate_ipv4_addr, validate_ipv6_addr
+
+
+class L3_interfacesFacts(object):
+    """ The nxos l3_interfaces fact class
+    """
+
+    def __init__(self, module, subspec='config', options='options'):
+        self._module = module
+        self.argument_spec = L3_interfacesArgs.argument_spec
+        spec = deepcopy(self.argument_spec)
+        if subspec:
+            if options:
+                facts_argument_spec = spec[subspec][options]
+            else:
+                facts_argument_spec = spec[subspec]
+        else:
+            facts_argument_spec = spec
+
+        self.generated_spec = utils.generate_dict(facts_argument_spec)
+
+    def populate_facts(self, connection, ansible_facts, data=None):
+        """ Populate the facts for l3_interfaces
+        :param connection: the device connection
+        :param data: previously collected conf
+        :rtype: dictionary
+        :returns: facts
+        """
+        objs = []
+        if not data:
+            data = connection.get('show running-config | section ^interface')
+
+        config = data.split('interface ')
+        for conf in config:
+            conf = conf.strip()
+            if conf:
+                obj = self.render_config(self.generated_spec, conf)
+                if obj and len(obj.keys()) > 1:
+                    objs.append(obj)
+
+        ansible_facts['ansible_network_resources'].pop('l3_interfaces', None)
+        facts = {}
+        if objs:
+            facts['l3_interfaces'] = []
+            params = utils.validate_config(self.argument_spec, {'config': objs})
+            for cfg in params['config']:
+                facts['l3_interfaces'].append(utils.remove_empties(cfg))
+
+        ansible_facts['ansible_network_resources'].update(facts)
+        return ansible_facts
+
+    def render_config(self, spec, conf):
+        """
+        Render config as dictionary structure and delete keys
+          from spec for null values
+        :param spec: The facts tree, generated from the argspec
+        :param conf: The configuration
+        :rtype: dictionary
+        :returns: The generated config
+        """
+        config = deepcopy(spec)
+        match = re.search(r'^(\S+)', conf)
+        intf = match.group(1)
+        if get_interface_type(intf) == 'unknown':
+            return {}
+        config['name'] = intf
+
+        ipv4_match = re.compile(r'\n  ip address (.*)')
+        matches = ipv4_match.findall(conf)
+        if matches:
+            if validate_ipv4_addr(matches[0]):
+                config['ipv4'] = []
+                for m in matches:
+                    ipv4_conf = m.split()
+                    addr = ipv4_conf[0]
+                    ipv4_addr = addr if validate_ipv4_addr(addr) else None
+                    if ipv4_addr:
+                        config_dict = {'address': ipv4_addr}
+                        if len(ipv4_conf) > 1:
+                            d = ipv4_conf[1]
+                            if d == 'secondary':
+                                config_dict.update({'secondary': True})
+                                if len(ipv4_conf) == 4:
+                                    if ipv4_conf[2] == 'tag':
+                                        config_dict.update({'tag': int(ipv4_conf[-1])})
+                            elif d == 'tag':
+                                config_dict.update({'tag': int(ipv4_conf[-1])})
+                        config['ipv4'].append(config_dict)
+
+        ipv6_match = re.compile(r'\n  ipv6 address (.*)')
+        matches = ipv6_match.findall(conf)
+        if matches:
+            if validate_ipv6_addr(matches[0]):
+                config['ipv6'] = []
+                for m in matches:
+                    ipv6_conf = m.split()
+                    addr = ipv6_conf[0]
+                    ipv6_addr = addr if validate_ipv6_addr(addr) else None
+                    if ipv6_addr:
+                        config_dict = {'address': ipv6_addr}
+                        if len(ipv6_conf) > 1:
+                            d = ipv6_conf[1]
+                            if d == 'tag':
+                                config_dict.update({'tag': int(ipv6_conf[-1])})
+                        config['ipv6'].append(config_dict)
+
+        return utils.remove_empties(config)
diff --git a/lib/ansible/modules/network/nxos/nxos_l3_interface.py b/lib/ansible/modules/network/nxos/_nxos_l3_interface.py
similarity index 97%
rename from lib/ansible/modules/network/nxos/nxos_l3_interface.py
rename to lib/ansible/modules/network/nxos/_nxos_l3_interface.py
index 715c96dd69..2422dea0d9 100644
--- a/lib/ansible/modules/network/nxos/nxos_l3_interface.py
+++ b/lib/ansible/modules/network/nxos/_nxos_l3_interface.py
@@ -9,7 +9,7 @@ __metaclass__ = type
 
 
 ANSIBLE_METADATA = {'metadata_version': '1.1',
-                    'status': ['preview'],
+                    'status': ['deprecated'],
                     'supported_by': 'network'}
 
 
@@ -22,6 +22,10 @@ short_description: Manage L3 interfaces on Cisco NXOS network devices
 description:
   - This module provides declarative management of L3 interfaces
     on Cisco NXOS network devices.
+deprecated:
+  removed_in: '2.13'
+  alternative: nxos_l3_interfaces
+  why: Updated modules released with more functionality
 notes:
   - Tested against NXOSv 7.0(3)I5(1).
 options:
diff --git a/lib/ansible/modules/network/nxos/nxos_facts.py b/lib/ansible/modules/network/nxos/nxos_facts.py
index a6129f0072..ef2deb175c 100644
--- a/lib/ansible/modules/network/nxos/nxos_facts.py
+++ b/lib/ansible/modules/network/nxos/nxos_facts.py
@@ -57,7 +57,7 @@ options:
         to a given subset. Possible values for this argument include
         all and the resources like interfaces, vlans etc.
         Can specify a list of values to include a larger subset.
-    choices: ['all', 'lag_interfaces', 'telemetry', 'vlans', 'lacp', 'lacp_interfaces', 'interfaces']
+    choices: ['all', 'lag_interfaces', 'telemetry', 'vlans', 'lacp', 'lacp_interfaces', 'interfaces', 'l3_interfaces']
     required: false
     version_added: "2.9"
 """
diff --git a/lib/ansible/modules/network/nxos/nxos_l3_interfaces.py b/lib/ansible/modules/network/nxos/nxos_l3_interfaces.py
new file mode 100644
index 0000000000..0ea8eb5c57
--- /dev/null
+++ b/lib/ansible/modules/network/nxos/nxos_l3_interfaces.py
@@ -0,0 +1,249 @@
+#!/usr/bin/python
+# -*- coding: utf-8 -*-
+# Copyright 2019 Red Hat
+# GNU General Public License v3.0+
+# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
+
+#############################################
+#                WARNING                    #
+#############################################
+#
+# This file is auto generated by the resource
+#   module builder playbook.
+#
+# Do not edit this file manually.
+#
+# Changes to this file will be over written
+#   by the resource module builder.
+#
+# Changes should be made in the model used to
+#   generate this file or in the resource module
+#   builder template.
+#
+#############################################
+
+"""
+The module file for nxos_l3_interfaces
+"""
+
+from __future__ import absolute_import, division, print_function
+__metaclass__ = type
+
+ANSIBLE_METADATA = {'metadata_version': '1.1',
+                    'status': ['preview'],
+                    'supported_by': 'network'}
+
+DOCUMENTATION = """
+---
+module: nxos_l3_interfaces
+version_added: 2.9
+short_description: Manages Layer-3 Interfaces attributes of NX-OS Interfaces
+description: This module manages Layer-3 interfaces attributes of NX-OS Interfaces.
+author: Trishna Guha (@trishnaguha)
+notes:
+  - Tested against NXOS 7.3.(0)D1(1) on VIRL
+options:
+  config:
+    description: A dictionary of Layer-3 interface options
+    type: list
+    elements: dict
+    suboptions:
+      name:
+        description:
+          - Full name of L3 interface, i.e. Ethernet1/1.
+        type: str
+        required: true
+      ipv4:
+        description:
+          - IPv4 address and attributes of the L3 interface.
+        type: list
+        elements: dict
+        suboptions:
+          address:
+            description:
+              - IPV4 address of the L3 interface.
+            type: str
+          tag:
+            description:
+              - URIB route tag value for local/direct routes.
+            type: int
+          secondary:
+            description:
+              - A boolean attribute to manage addition of secondary IP address.
+            type: bool
+            default: False
+      ipv6:
+        description:
+          - IPv6 address and attributes of the L3 interface.
+        type: list
+        elements: dict
+        suboptions:
+          address:
+            description:
+              - IPV6 address of the L3 interface.
+            type: str
+          tag:
+            description:
+              - URIB route tag value for local/direct routes.
+            type: int
+
+  state:
+    description:
+      - The state the configuration should be left in.
+    type: str
+    choices:
+      - merged
+      - replaced
+      - overridden
+      - deleted
+    default: merged
+"""
+EXAMPLES = """
+# Using merged
+
+# Before state:
+# -------------
+#
+# interface Ethernet1/6
+
+- name: Merge provided configuration with device configuration.
+  nxos_l3_interfaces:
+    config:
+      - name: Ethernet1/6
+        ipv4:
+          - address: 192.168.1.1/24
+            tag: 5
+          - address: 10.1.1.1/24
+            secondary: True
+            tag: 10
+        ipv6:
+          - address: fd5d:12c9:2201:2::1/64
+            tag: 6
+    state: merged
+
+# After state:
+# ------------
+#
+# interface Ethernet1/6
+#   ip address 192.168.22.1/24 tag 5
+#   ip address 10.1.1.1/24 secondary tag 10
+# interfaqce Ethernet1/6
+#   ipv6 address fd5d:12c9:2201:2::1/64 tag 6
+
+
+# Using replaced
+
+# Before state:
+# -------------
+#
+# interface Ethernet1/6
+#   ip address 192.168.22.1/24
+#   ipv6 address "fd5d:12c9:2201:1::1/64"
+
+- name: Replace device configuration of specified L3 interfaces with provided configuration.
+  nxos_l3_interfaces:
+    config:
+      - name: Ethernet1/6
+        ipv4: 192.168.22.3/24
+    state: replaced
+
+# After state:
+# ------------
+#
+# interface Ethernet1/6
+#   ip address 192.168.22.3/24
+
+
+# Using overridden
+
+# Before state:
+# -------------
+#
+# interface Ethernet1/2
+#   ip address 192.168.22.1/24
+# interface Ethernet1/6
+#   ipv6 address "fd5d:12c9:2201:1::1/64"
+
+- name: Override device configuration of all L3 interfaces on device with provided configuration.
+  nxos_l3_interfaces:
+    config:
+      - name: Ethernet1/2
+        ipv4: 192.168.22.3/4
+    state: overridden
+
+# After state:
+# ------------
+#
+# interface Ethernet1/2
+#   ipv4 address 192.168.22.3/24
+# interface Ethernet1/6
+
+
+# Using deleted
+
+# Before state:
+# -------------
+#
+# interface Ethernet1/6
+#   ip address 192.168.22.1/24
+# interface Ethernet1/2
+#   ipv6 address "fd5d:12c9:2201:1::1/64"
+
+- name: Delete L3 attributes of given interfaces (This won't delete the interface itself).
+  nxos_l3_interfaces:
+    config:
+      - name: Ethernet1/6
+      - name: Ethernet1/2
+    state: deleted
+
+# After state:
+# ------------
+#
+# interface Ethernet1/6
+# interface Ethernet1/2
+
+
+"""
+RETURN = """
+before:
+  description: The configuration prior to the model invocation.
+  returned: always
+  type: list
+  sample: >
+    The configuration returned will always be in the same format
+     of the parameters above.
+after:
+  description: The resulting configuration model invocation.
+  returned: when changed
+  type: list
+  sample: >
+    The configuration returned will always be in the same format
+     of the parameters above.
+commands:
+  description: The set of commands pushed to the remote device.
+  returned: always
+  type: list
+  sample: ['interface Ethernet1/2', 'ip address 192.168.0.1/2']
+"""
+
+
+from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.network.nxos.argspec.l3_interfaces.l3_interfaces import L3_interfacesArgs
+from ansible.module_utils.network.nxos.config.l3_interfaces.l3_interfaces import L3_interfaces
+
+
+def main():
+    """
+    Main entry point for module execution
+
+    :returns: the result form module invocation
+    """
+    module = AnsibleModule(argument_spec=L3_interfacesArgs.argument_spec,
+                           supports_check_mode=True)
+
+    result = L3_interfaces(module).execute_module()
+    module.exit_json(**result)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/test/integration/targets/nxos_l3_interfaces/defaults/main.yaml b/test/integration/targets/nxos_l3_interfaces/defaults/main.yaml
new file mode 100644
index 0000000000..5f709c5aac
--- /dev/null
+++ b/test/integration/targets/nxos_l3_interfaces/defaults/main.yaml
@@ -0,0 +1,2 @@
+---
+testcase: "*"
diff --git a/test/integration/targets/nxos_l3_interfaces/meta/main.yml b/test/integration/targets/nxos_l3_interfaces/meta/main.yml
new file mode 100644
index 0000000000..ae741cbdc7
--- /dev/null
+++ b/test/integration/targets/nxos_l3_interfaces/meta/main.yml
@@ -0,0 +1,2 @@
+dependencies:
+  - prepare_nxos_tests
diff --git a/test/integration/targets/nxos_l3_interfaces/tasks/cli.yaml b/test/integration/targets/nxos_l3_interfaces/tasks/cli.yaml
new file mode 100644
index 0000000000..6c7ea4a7f9
--- /dev/null
+++ b/test/integration/targets/nxos_l3_interfaces/tasks/cli.yaml
@@ -0,0 +1,20 @@
+---
+- name: collect common test cases
+  find:
+    paths: "{{ role_path }}/tests/cli"
+    patterns: "{{ testcase }}.yaml"
+  connection: local
+  register: test_cases
+
+- set_fact:
+    test_cases:
+      files: "{{ test_cases.files }}"
+
+- name: set test_items
+  set_fact: test_items="{{ test_cases.files | map(attribute='path') | list }}"
+
+- name: run test cases (connection=network_cli)
+  include: "{{ test_case_to_run }} ansible_connection=network_cli connection={{ cli }}"
+  with_items: "{{ test_items }}"
+  loop_control:
+    loop_var: test_case_to_run
diff --git a/test/integration/targets/nxos_l3_interfaces/tasks/main.yaml b/test/integration/targets/nxos_l3_interfaces/tasks/main.yaml
new file mode 100644
index 0000000000..415c99d8b1
--- /dev/null
+++ b/test/integration/targets/nxos_l3_interfaces/tasks/main.yaml
@@ -0,0 +1,2 @@
+---
+- { include: cli.yaml, tags: ['cli'] }
diff --git a/test/integration/targets/nxos_l3_interfaces/tasks/nxapi.yaml b/test/integration/targets/nxos_l3_interfaces/tasks/nxapi.yaml
new file mode 100644
index 0000000000..04c99602e6
--- /dev/null
+++ b/test/integration/targets/nxos_l3_interfaces/tasks/nxapi.yaml
@@ -0,0 +1,33 @@
+---
+- name: collect common test cases
+  find:
+    paths: "{{ role_path }}/tests/common"
+    patterns: "{{ testcase }}.yaml"
+  connection: local
+  register: test_cases
+
+- name: collect nxapi test cases
+  find:
+    paths: "{{ role_path }}/tests/nxapi"
+    patterns: "{{ testcase }}.yaml"
+  connection: local
+  register: nxapi_cases
+
+- set_fact:
+    test_cases:
+      files: "{{ test_cases.files }} + {{ nxapi_cases.files }}"
+
+- name: set test_items
+  set_fact: test_items="{{ test_cases.files | map(attribute='path') | list }}"
+
+- name: run test cases (connection=httpapi)
+  include: "{{ test_case_to_run }} ansible_connection=httpapi connection={{ nxapi }}"
+  with_items: "{{ test_items }}"
+  loop_control:
+    loop_var: test_case_to_run
+
+- name: run test cases (connection=local)
+  include: "{{ test_case_to_run }} ansible_connection=local connection={{ nxapi }}"
+  with_items: "{{ test_items }}"
+  loop_control:
+    loop_var: test_case_to_run
diff --git a/test/integration/targets/nxos_l3_interfaces/tests/cli/deleted.yaml b/test/integration/targets/nxos_l3_interfaces/tests/cli/deleted.yaml
new file mode 100644
index 0000000000..c218dbf32d
--- /dev/null
+++ b/test/integration/targets/nxos_l3_interfaces/tests/cli/deleted.yaml
@@ -0,0 +1,52 @@
+---
+- debug:
+    msg: "Start nxos_l3_interfaces deleted integration tests connection={{ ansible_connection }}"
+
+- set_fact: test_int1="{{ nxos_int1 }}"
+
+- name: setup1
+  cli_config: &cleanup
+    config: |
+      default interface {{ test_int1 }}
+
+- block:
+  - name: setup2
+    cli_config:
+      config: |
+        interface {{ test_int1 }}
+          no switchport
+          ip address 192.168.10.2/24
+
+  - name: Gather l3_interfaces facts
+    nxos_facts: &facts
+      gather_subset:
+        - '!all'
+        - '!min'
+      gather_network_resources: l3_interfaces
+
+  - name: deleted
+    nxos_l3_interfaces: &deleted
+      state: deleted
+    register: result
+
+  - assert:
+      that:
+        - "ansible_facts.network_resources.l3_interfaces|symmetric_difference(result.before)|length == 0"
+        - "result.after|length == 0"
+        - "result.changed == true"
+        - "'interface {{ test_int1 }}' in result.commands"
+        - "'no ip address' in result.commands"
+        - "result.commands|length == 2"
+
+  - name: Idempotence - deleted
+    nxos_l3_interfaces: *deleted
+    register: result
+
+  - assert:
+      that:
+        - "result.changed == false"
+        - "result.commands|length == 0"
+
+  always:
+  - name: teardown
+    cli_config: *cleanup
diff --git a/test/integration/targets/nxos_l3_interfaces/tests/cli/merged.yaml b/test/integration/targets/nxos_l3_interfaces/tests/cli/merged.yaml
new file mode 100644
index 0000000000..2b5719c361
--- /dev/null
+++ b/test/integration/targets/nxos_l3_interfaces/tests/cli/merged.yaml
@@ -0,0 +1,58 @@
+---
+- debug:
+    msg: "Start nxos_l3_interfaces merged integration tests connection={{ ansible_connection }}"
+
+- set_fact: test_int1="{{ nxos_int1 }}"
+
+- name: setup1
+  cli_config: &cleanup
+    config: |
+      default interface {{ test_int1 }}
+
+- block:
+  - name: setup2
+    cli_config:
+      config: |
+        interface {{ test_int1 }}
+          no switchport
+
+  - name: Merged
+    nxos_l3_interfaces: &merged
+      config:
+        - name: "{{ test_int1 }}"
+          ipv4:
+            - address: 192.168.10.2/24
+      state:  merged
+    register: result
+
+  - assert:
+      that:
+        - "result.changed == true"
+        - "result.before|length == 0"
+        - "'interface {{ test_int1 }}' in result.commands"
+        - "'ip address 192.168.10.2/24' in result.commands"
+        - "result.commands|length == 2"
+
+  - name: Gather l3_interfaces facts
+    nxos_facts:
+      gather_subset:
+        - '!all'
+        - '!min'
+      gather_network_resources: l3_interfaces
+
+  - assert:
+      that:
+        - "ansible_facts.network_resources.l3_interfaces|symmetric_difference(result.after)|length == 0"
+
+  - name: Idempotence - Merged
+    nxos_l3_interfaces: *merged
+    register: result
+
+  - assert:
+      that:
+        - "result.changed == false"
+        - "result.commands|length == 0"
+
+  always:
+  - name: teardown
+    cli_config: *cleanup
diff --git a/test/integration/targets/nxos_l3_interfaces/tests/cli/overridden.yaml b/test/integration/targets/nxos_l3_interfaces/tests/cli/overridden.yaml
new file mode 100644
index 0000000000..3406d2d3b0
--- /dev/null
+++ b/test/integration/targets/nxos_l3_interfaces/tests/cli/overridden.yaml
@@ -0,0 +1,75 @@
+---
+- debug:
+    msg: "Start nxos_l3_interfaces overridden integration tests connection={{ ansible_connection }}"
+
+- set_fact: test_int1="{{ nxos_int1 }}"
+- set_fact: test_int2="{{ nxos_int2 }}"
+- set_fact: test_int3="{{ nxos_int3 }}"
+
+- name: setup1
+  cli_config: &cleanup
+    config: |
+      default interface {{ test_int1 }}
+      default interface {{ test_int2 }}
+      default interface {{ test_int3 }}
+
+- block:
+  - name: setup2
+    cli_config:
+      config: |
+        interface {{ test_int1 }}
+          no switchport
+          ip address 192.168.10.2/24 tag 5
+        interface {{ test_int2 }}
+          no switchport
+          ip address 10.1.1.1/24
+        interface {{ test_int3 }}
+          no switchport
+
+  - name: Gather l3_interfaces facts
+    nxos_facts: &facts
+      gather_subset:
+        - '!all'
+        - '!min'
+      gather_network_resources: l3_interfaces
+
+  - name: Overridden
+    nxos_l3_interfaces: &overridden
+      config:
+        - name: "{{ test_int3 }}"
+          ipv4:
+            - address: 10.1.1.3/24
+      state: overridden
+    register: result
+
+  - assert:
+      that:
+        - "ansible_facts.network_resources.l3_interfaces|symmetric_difference(result.before)|length == 0"
+        - "result.changed == true"
+        - "'interface {{ test_int1 }}' in result.commands"
+        - "'no ip address' in result.commands"
+        - "'interface {{ test_int2 }}' in result.commands"
+        - "'no ip address' in result.commands"
+        - "'interface {{ test_int3 }}' in result.commands"
+        - "'ip address 10.1.1.3/24' in result.commands"
+        - "result.commands|length == 6"
+
+  - name: Gather l3_interfaces post facts
+    nxos_facts: *facts
+
+  - assert:
+      that:
+        - "ansible_facts.network_resources.l3_interfaces|symmetric_difference(result.after)|length == 0"
+
+  - name: Idempotence - Overridden
+    nxos_l3_interfaces: *overridden
+    register: result
+
+  - assert:
+      that:
+        - "result.changed == false"
+        - "result.commands|length == 0"
+
+  always:
+  - name: teardown
+    cli_config: *cleanup
diff --git a/test/integration/targets/nxos_l3_interfaces/tests/cli/replaced.yaml b/test/integration/targets/nxos_l3_interfaces/tests/cli/replaced.yaml
new file mode 100644
index 0000000000..288a47bb2c
--- /dev/null
+++ b/test/integration/targets/nxos_l3_interfaces/tests/cli/replaced.yaml
@@ -0,0 +1,64 @@
+---
+- debug:
+    msg: "Start nxos_l3_interfaces replaced integration tests connection={{ ansible_connection }}"
+
+- set_fact: test_int1="{{ nxos_int1 }}"
+
+- name: setup1
+  cli_config: &cleanup
+    config: |
+      default interface {{ test_int1 }}
+
+- block:
+  - name: setup2
+    cli_config:
+      config: |
+        interface {{ test_int1 }}
+          no switchport
+          ip address 192.168.10.2/24
+
+  - name: Gather l3_interfaces facts
+    nxos_facts: &facts
+      gather_subset:
+        - '!all'
+        - '!min'
+      gather_network_resources: l3_interfaces
+
+  - name: Replaced
+    nxos_l3_interfaces: &replaced
+      config:
+        - name: "{{ test_int1 }}"
+          ipv6:
+            - address: "fd5d:12c9:2201:1::1/64"
+              tag: 6
+      state: replaced
+    register: result
+
+  - assert:
+      that:
+        - "ansible_facts.network_resources.l3_interfaces|symmetric_difference(result.before)|length == 0"
+        - "result.changed == true"
+        - "'interface {{ test_int1 }}' in result.commands"
+        - "'no ip address' in result.commands"
+        - "'ipv6 address fd5d:12c9:2201:1::1/64 tag 6' in result.commands"
+        - "result.commands|length == 3"
+
+  - name: Gather l3_interfaces post facts
+    nxos_facts: *facts
+
+  - assert:
+      that:
+        - "ansible_facts.network_resources.l3_interfaces|symmetric_difference(result.after)|length == 0"
+
+  - name: Idempotence - Replaced
+    nxos_l3_interfaces: *replaced
+    register: result
+
+  - assert:
+      that:
+        - "result.changed == false"
+        - "result.commands|length == 0"
+
+  always:
+  - name: teardown
+    cli_config: *cleanup
diff --git a/test/sanity/ignore.txt b/test/sanity/ignore.txt
index c0a33abbdd..deda0da831 100644
--- a/test/sanity/ignore.txt
+++ b/test/sanity/ignore.txt
@@ -4494,13 +4494,13 @@ lib/ansible/modules/network/nxos/nxos_l2_interface.py validate-modules:E327
 lib/ansible/modules/network/nxos/nxos_l2_interface.py validate-modules:E337
 lib/ansible/modules/network/nxos/nxos_l2_interface.py validate-modules:E338
 lib/ansible/modules/network/nxos/nxos_l2_interface.py validate-modules:E340
-lib/ansible/modules/network/nxos/nxos_l3_interface.py validate-modules:E322
-lib/ansible/modules/network/nxos/nxos_l3_interface.py validate-modules:E324
-lib/ansible/modules/network/nxos/nxos_l3_interface.py validate-modules:E326
-lib/ansible/modules/network/nxos/nxos_l3_interface.py validate-modules:E327
-lib/ansible/modules/network/nxos/nxos_l3_interface.py validate-modules:E337
-lib/ansible/modules/network/nxos/nxos_l3_interface.py validate-modules:E338
-lib/ansible/modules/network/nxos/nxos_l3_interface.py validate-modules:E340
+lib/ansible/modules/network/nxos/_nxos_l3_interface.py validate-modules:E322
+lib/ansible/modules/network/nxos/_nxos_l3_interface.py validate-modules:E324
+lib/ansible/modules/network/nxos/_nxos_l3_interface.py validate-modules:E326
+lib/ansible/modules/network/nxos/_nxos_l3_interface.py validate-modules:E327
+lib/ansible/modules/network/nxos/_nxos_l3_interface.py validate-modules:E337
+lib/ansible/modules/network/nxos/_nxos_l3_interface.py validate-modules:E338
+lib/ansible/modules/network/nxos/_nxos_l3_interface.py validate-modules:E340
 lib/ansible/modules/network/nxos/nxos_lag_interfaces.py validate-modules:E326
 lib/ansible/modules/network/nxos/nxos_lldp.py validate-modules:E324
 lib/ansible/modules/network/nxos/nxos_lldp.py validate-modules:E326
diff --git a/test/units/modules/network/nxos/test_nxos_l3_interface.py b/test/units/modules/network/nxos/test_nxos_l3_interface.py
index 0257793768..9e23f5702c 100644
--- a/test/units/modules/network/nxos/test_nxos_l3_interface.py
+++ b/test/units/modules/network/nxos/test_nxos_l3_interface.py
@@ -6,21 +6,21 @@ from __future__ import (absolute_import, division, print_function)
 __metaclass__ = type
 
 from units.compat.mock import patch
-from ansible.modules.network.nxos import nxos_l3_interface
+from ansible.modules.network.nxos import _nxos_l3_interface
 from .nxos_module import TestNxosModule, load_fixture, set_module_args
 
 
 class TestNxosL3InterfaceModule(TestNxosModule):
 
-    module = nxos_l3_interface
+    module = _nxos_l3_interface
 
     def setUp(self):
         super(TestNxosL3InterfaceModule, self).setUp()
 
-        self.mock_load_config = patch('ansible.modules.network.nxos.nxos_l3_interface.load_config')
+        self.mock_load_config = patch('ansible.modules.network.nxos._nxos_l3_interface.load_config')
         self.load_config = self.mock_load_config.start()
 
-        self.mock_get_config = patch('ansible.modules.network.nxos.nxos_l3_interface.get_config')
+        self.mock_get_config = patch('ansible.modules.network.nxos._nxos_l3_interface.get_config')
         self.get_config = self.mock_get_config.start()
 
     def tearDown(self):
