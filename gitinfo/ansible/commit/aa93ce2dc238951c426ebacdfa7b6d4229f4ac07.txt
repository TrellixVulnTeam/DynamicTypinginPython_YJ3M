commit aa93ce2dc238951c426ebacdfa7b6d4229f4ac07
Author: Michael DeHaan <michael.dehaan@gmail.com>
Date:   Sat Oct 19 12:57:47 2013 -0400

    Fix deprecation warnings in the Google modules.

diff --git a/library/cloud/gce b/library/cloud/gce
index b8a3a7c0a8..90052e5bf4 100644
--- a/library/cloud/gce
+++ b/library/cloud/gce
@@ -178,7 +178,7 @@ except ImportError:
 ARGS = getattr(secrets, 'GCE_PARAMS', ())
 KWARGS = getattr(secrets, 'GCE_KEYWORD_PARAMS', {})
 
-if not ARGS or not KWARGS.has_key('project'):
+if not ARGS or not 'project' in KWARGS:
     print("failed=True " + \
         "msg='Missing GCE connection parametres in libcloud secrets file.'")
     sys.exit(1)
@@ -196,7 +196,7 @@ def get_instance_info(inst):
 
     """
     metadata = {}
-    if inst.extra.has_key('metadata') and inst.extra['metadata'].has_key('items'):
+    if 'metadata' in inst.extra and 'items' in inst.extra['metadata']:
         for md in inst.extra['metadata']['items']:
             metadata[md['key']] = md['value']
 
@@ -212,9 +212,9 @@ def get_instance_info(inst):
         'network': netname,
         'private_ip': inst.private_ip[0],
         'public_ip': inst.public_ip[0],
-        'status': inst.extra.has_key('status') and inst.extra['status'] or None,
-        'tags': inst.extra.has_key('tags') and inst.extra['tags'] or [],
-        'zone': inst.extra.has_key('zone') and inst.extra['zone'].name or None,
+        'status': ('status' in inst.extra) and inst.extra['status'] or None,
+        'tags': ('tags' in inst.extra) and inst.extra['tags'] or [],
+        'zone': ('zone' in inst.extra) and inst.extra['zone'].name or None,
     })
 
 def create_instances(module, gce, instance_names):
diff --git a/library/cloud/gce_lb b/library/cloud/gce_lb
index 97e82fce19..bc444a44f0 100644
--- a/library/cloud/gce_lb
+++ b/library/cloud/gce_lb
@@ -152,7 +152,7 @@ except ImportError:
 ARGS = getattr(secrets, 'GCE_PARAMS', ())                                       
 KWARGS = getattr(secrets, 'GCE_KEYWORD_PARAMS', {})                             
 
-if not ARGS or not KWARGS.has_key('project'):
+if not ARGS or not 'project' in KWARGS:
     print("failed=True msg='Missing GCE connection " + \
             "parameters in libcloud secrets file.'")
     sys.exit(1)
@@ -290,7 +290,7 @@ def main():
                 json_output['external_ip'] = lb.ip
                 json_output['port_range'] = lb.port
                 hc_names = []
-                if lb.extra.has_key('healthchecks'):
+                if 'healthchecks' in lb.extra:
                     for hc in lb.extra['healthchecks']:
                         hc_names.append(hc.name)
                 json_output['httphealthchecks'] = hc_names
diff --git a/library/cloud/gce_net b/library/cloud/gce_net
index 65f2d022a9..4728584dab 100644
--- a/library/cloud/gce_net
+++ b/library/cloud/gce_net
@@ -117,7 +117,7 @@ except ImportError:
 ARGS = getattr(secrets, 'GCE_PARAMS', ())                                       
 KWARGS = getattr(secrets, 'GCE_KEYWORD_PARAMS', {})                             
 
-if not ARGS or not KWARGS.has_key('project'):
+if not ARGS or not 'project' in KWARGS:
     print("failed=True msg='Missing GCE connection " + \
             "parameters in libcloud secrets file.'")
     sys.exit(1)
diff --git a/library/cloud/gce_pd b/library/cloud/gce_pd
index b60d4fe9bb..245d1bb664 100644
--- a/library/cloud/gce_pd
+++ b/library/cloud/gce_pd
@@ -112,7 +112,7 @@ except ImportError:
 ARGS = getattr(secrets, 'GCE_PARAMS', ())                                       
 KWARGS = getattr(secrets, 'GCE_KEYWORD_PARAMS', {})                             
 
-if not ARGS or not KWARGS.has_key('project'):
+if not ARGS or not 'project' in KWARGS:
     print("failed=True " + \
         "msg='Missing GCE connection parameters in libcloud secrets file.'")
     sys.exit(1)
@@ -195,7 +195,8 @@ def main():
             module.fail_json(msg="Must supply a size_gb", changed=False)
         try:
             size_gb = int(round(float(size_gb)))
-            if size_gb < 1: raise Exception
+            if size_gb < 1: 
+                raise Exception
         except:        
             module.fail_json(msg="Must supply a size_gb larger than 1 GB",
                     changed=False)
