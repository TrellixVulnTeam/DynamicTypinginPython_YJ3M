commit 287fd29db942453dd1c84fa665b4a7a8a57443e4
Author: Toshio Kuratomi <a.badger@gmail.com>
Date:   Fri Mar 18 08:51:17 2016 -0700

    Use better rst markup (main change definition lists instead of code-blocks for config file options

diff --git a/docsite/rst/intro_inventory.rst b/docsite/rst/intro_inventory.rst
index bf103f2847..d413ea64c6 100644
--- a/docsite/rst/intro_inventory.rst
+++ b/docsite/rst/intro_inventory.rst
@@ -200,73 +200,74 @@ List of Behavioral Inventory Parameters
 
 As alluded to above, setting the following variables controls how ansible interacts with remote hosts.
 
-Host connection::
+Host connection:
 
-    ansible_connection
-      Connection type to the host. Candidates are local, smart, ssh or paramiko.  The default is smart.
+ansible_connection
+    Connection type to the host. This can be the name of any of ansible's connection plugins.  Common connection types are local, smart, ssh or paramiko.  The default is smart.
 
 
 .. include:: ansible_ssh_changes_note.rst
 
-SSH connection::
-
-    ansible_host
-      The name of the host to connect to, if different from the alias you wish to give to it.
-    ansible_port
-      The ssh port number, if not 22
-    ansible_user
-      The default ssh user name to use.
-    ansible_ssh_pass
-      The ssh password to use (this is insecure, we strongly recommend using --ask-pass or SSH keys)
-    ansible_ssh_private_key_file
-      Private key file used by ssh.  Useful if using multiple keys and you don't want to use SSH agent.
-    ansible_ssh_common_args
-      This setting is always appended to the default command line for
-      sftp, scp, and ssh. Useful to configure a ``ProxyCommand`` for a
-      certain host (or group).
-    ansible_sftp_extra_args
-      This setting is always appended to the default sftp command line.
-    ansible_scp_extra_args
-      This setting is always appended to the default scp command line.
-    ansible_ssh_extra_args
-      This setting is always appended to the default ssh command line.
-    ansible_ssh_pipelining
-      Determines whether or not to use SSH pipelining. This can override the ``pipelining`` setting in ``ansible.cfg``.
-
-Privilege escalation (see :doc:`Ansible Privilege Escalation<become>` for further details)::
-
-    ansible_become
-      Equivalent to ansible_sudo or ansible_su, allows to force privilege escalation
-    ansible_become_method
-      Allows to set privilege escalation method
-    ansible_become_user
-      Equivalent to ansible_sudo_user or ansible_su_user, allows to set the user you become through privilege escalation
-    ansible_become_pass
-      Equivalent to ansible_sudo_pass or ansible_su_pass, allows you to set the privilege escalation password
-
-Remote host environment parameters::
-
-    ansible_shell_type
-      The shell type of the target system. You should not use this setting unless you have set the 'ansible_shell_executable' to a non sh compatible shell.
-      By default commands are formatted using 'sh'-style syntax.
-      Setting this to 'csh' or 'fish' will cause commands executed on target systems to follow those shell's syntax instead.
-    ansible_python_interpreter
-      The target host python path. This is useful for systems with more
-      than one Python or not located at "/usr/bin/python" such as *BSD, or where /usr/bin/python
-      is not a 2.X series Python.  We do not use the "/usr/bin/env" mechanism as that requires the remote user's
-      path to be set right and also assumes the "python" executable is named python, where the executable might
-      be named something like "python26".
-    ansible_*_interpreter
-      Works for anything such as ruby or perl and works just like ansible_python_interpreter.
-      This replaces shebang of modules which will run on that host.
+SSH connection:
+
+ansible_host
+    The name of the host to connect to, if different from the alias you wish to give to it.
+ansible_port
+    The ssh port number, if not 22
+ansible_user
+    The default ssh user name to use.
+ansible_ssh_pass
+    The ssh password to use (this is insecure, we strongly recommend using :option:`--ask-pass` or SSH keys)
+ansible_ssh_private_key_file
+    Private key file used by ssh.  Useful if using multiple keys and you don't want to use SSH agent.
+ansible_ssh_common_args
+    This setting is always appended to the default command line for :command:`sftp`, :command:`scp`,
+    and :command:`ssh`. Useful to configure a ``ProxyCommand`` for a certain host (or
+    group).
+ansible_sftp_extra_args
+    This setting is always appended to the default :command:`sftp` command line.
+ansible_scp_extra_args
+    This setting is always appended to the default :command:`scp` command line.
+ansible_ssh_extra_args
+    This setting is always appended to the default :command:`ssh` command line.
+ansible_ssh_pipelining
+    Determines whether or not to use SSH pipelining. This can override the ``pipelining`` setting in :file:`ansible.cfg`.
+
+Privilege escalation (see :doc:`Ansible Privilege Escalation<become>` for further details):
+
+ansible_become
+    Equivalent to ``ansible_sudo`` or ``ansible_su``, allows to force privilege escalation
+ansible_become_method
+    Allows to set privilege escalation method
+ansible_become_user
+    Equivalent to ``ansible_sudo_user`` or ``ansible_su_user``, allows to set the user you become through privilege escalation
+ansible_become_pass
+    Equivalent to ``ansible_sudo_pass`` or ``ansible_su_pass``, allows you to set the privilege escalation password
+
+Remote host environment parameters:
+
+ansible_shell_type
+    The shell type of the target system. You should not use this setting unless you have set the ``ansible_shell_executable`` to a non-Bourne (sh) compatible shell.
+    By default commands are formatted using ``sh``-style syntax.
+    Setting this to ``csh`` or ``fish`` will cause commands executed on target systems to follow those shell's syntax instead.
+ansible_python_interpreter
+    The target host python path. This is useful for systems with more
+    than one Python or not located at :command:`/usr/bin/python` such as \*BSD, or where :command:`/usr/bin/python`
+    is not a 2.X series Python.  We do not use the :command:`/usr/bin/env` mechanism as that requires the remote user's
+    path to be set right and also assumes the :program:`python` executable is named python, where the executable might
+    be named something like :program:`python2.6`.
+ansible_*_interpreter
+    Works for anything such as ruby or perl and works just like ``ansible_python_interpreter``.
+    This replaces shebang of modules which will run on that host.
 
 .. versionadded:: 2.1
 
-::
-
-    ansible_shell_executable
-      This sets the shell the ansible controller will use on the target machine, overrides ``executable`` in ``ansible.cfg`` which defaults to ``/bin/sh``.
-      You should really only change it if is not possible to use ``/bin/sh`` (i.e. ``/bin/sh`` is not installed on the target machine.).
+ansible_shell_executable
+    This sets the shell the ansible controller will use on the target machine,
+    overrides ``executable`` in :file:`ansible.cfg` which defaults to
+    :command:`/bin/sh`.  You should really only change it if is not possible
+    to use :command:`/bin/sh` (i.e. :command:`/bin/sh` is not installed on the target
+    machine.).
 
 Examples from a host file::
 
