commit 5afe77933b84de046e880f1838ac83251a268ba4
Author: Tim Rupp <caphrim007@gmail.com>
Date:   Fri Nov 2 22:20:39 2018 -0700

    Removes the f5-sdk from bigip_snmp_trap (#48027)

diff --git a/lib/ansible/modules/network/f5/bigip_snmp_trap.py b/lib/ansible/modules/network/f5/bigip_snmp_trap.py
index 366d80967b..4e29011e0f 100644
--- a/lib/ansible/modules/network/f5/bigip_snmp_trap.py
+++ b/lib/ansible/modules/network/f5/bigip_snmp_trap.py
@@ -1,7 +1,7 @@
 #!/usr/bin/python
 # -*- coding: utf-8 -*-
 #
-# Copyright (c) 2017 F5 Networks Inc.
+# Copyright: (c) 2017, F5 Networks Inc.
 # GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
 
 from __future__ import absolute_import, division, print_function
@@ -13,6 +13,7 @@ ANSIBLE_METADATA = {'metadata_version': '1.1',
                     'supported_by': 'certified'}
 
 DOCUMENTATION = r'''
+---
 module: bigip_snmp_trap
 short_description: Manipulate SNMP trap information on a BIG-IP
 description:
@@ -72,6 +73,7 @@ notes:
 extends_documentation_fragment: f5
 author:
   - Tim Rupp (@caphrim007)
+  - Wojciech Wypior (@wojtek0806)
 '''
 
 EXAMPLES = r'''
@@ -135,34 +137,32 @@ from ansible.module_utils.basic import env_fallback
 from distutils.version import LooseVersion
 
 try:
-    from library.module_utils.network.f5.bigip import HAS_F5SDK
-    from library.module_utils.network.f5.bigip import F5Client
+    from library.module_utils.network.f5.bigip import F5RestClient
     from library.module_utils.network.f5.common import F5ModuleError
     from library.module_utils.network.f5.common import AnsibleF5Parameters
     from library.module_utils.network.f5.common import cleanup_tokens
     from library.module_utils.network.f5.common import f5_argument_spec
-    try:
-        from library.module_utils.network.f5.common import iControlUnexpectedHTTPError
-    except ImportError:
-        HAS_F5SDK = False
+    from library.module_utils.network.f5.common import transform_name
+    from library.module_utils.network.f5.common import exit_json
+    from library.module_utils.network.f5.common import fail_json
+    from library.module_utils.network.f5.icontrol import tmos_version
 except ImportError:
-    from ansible.module_utils.network.f5.bigip import HAS_F5SDK
-    from ansible.module_utils.network.f5.bigip import F5Client
+    from ansible.module_utils.network.f5.bigip import F5RestClient
     from ansible.module_utils.network.f5.common import F5ModuleError
     from ansible.module_utils.network.f5.common import AnsibleF5Parameters
     from ansible.module_utils.network.f5.common import cleanup_tokens
     from ansible.module_utils.network.f5.common import f5_argument_spec
-    try:
-        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError
-    except ImportError:
-        HAS_F5SDK = False
+    from ansible.module_utils.network.f5.common import transform_name
+    from ansible.module_utils.network.f5.common import exit_json
+    from ansible.module_utils.network.f5.common import fail_json
+    from ansible.module_utils.network.f5.icontrol import tmos_version
 
 
 class Parameters(AnsibleF5Parameters):
     api_map = {
         'version': 'snmp_version',
         'community': 'community',
-        'host': 'destination'
+        'host': 'destination',
     }
 
     @property
@@ -187,15 +187,27 @@ class Parameters(AnsibleF5Parameters):
 
 class V3Parameters(Parameters):
     updatables = [
-        'snmp_version', 'community', 'destination', 'port', 'network'
+        'snmp_version',
+        'community',
+        'destination',
+        'port',
+        'network',
     ]
 
     returnables = [
-        'snmp_version', 'community', 'destination', 'port', 'network'
+        'snmp_version',
+        'community',
+        'destination',
+        'port',
+        'network',
     ]
 
     api_attributes = [
-        'version', 'community', 'host', 'port', 'network'
+        'version',
+        'community',
+        'host',
+        'port',
+        'network',
     ]
 
     @property
@@ -216,15 +228,27 @@ class V3Parameters(Parameters):
 
 class V2Parameters(Parameters):
     updatables = [
-        'snmp_version', 'community', 'destination', 'port', 'network'
+        'snmp_version',
+        'community',
+        'destination',
+        'port',
+        'network',
     ]
 
     returnables = [
-        'snmp_version', 'community', 'destination', 'port', 'network'
+        'snmp_version',
+        'community',
+        'destination',
+        'port',
+        'network',
     ]
 
     api_attributes = [
-        'version', 'community', 'host', 'port', 'network'
+        'version',
+        'community',
+        'host',
+        'port',
+        'network',
     ]
 
     @property
@@ -242,15 +266,24 @@ class V2Parameters(Parameters):
 
 class V1Parameters(Parameters):
     updatables = [
-        'snmp_version', 'community', 'destination', 'port'
+        'snmp_version',
+        'community',
+        'destination',
+        'port',
     ]
 
     returnables = [
-        'snmp_version', 'community', 'destination', 'port'
+        'snmp_version',
+        'community',
+        'destination',
+        'port',
     ]
 
     api_attributes = [
-        'version', 'community', 'host', 'port'
+        'version',
+        'community',
+        'host',
+        'port',
     ]
 
     @property
@@ -280,7 +313,7 @@ class ModuleManager(object):
         Returns:
             bool: True when it is missing. False otherwise.
         """
-        version = self.client.api.tmos_version
+        version = tmos_version(self.client)
         if LooseVersion(version) < LooseVersion('12.1.0'):
             return True
         else:
@@ -292,7 +325,7 @@ class ModuleManager(object):
         Returns:
             bool: True when it is missing. False otherwise.
         """
-        version = self.client.api.tmos_version
+        version = tmos_version(self.client)
         if LooseVersion(version) < LooseVersion('13.1.0'):
             return True
         else:
@@ -310,32 +343,35 @@ class BaseManager(object):
         result = dict()
         state = self.want.state
 
-        try:
-            if state == "present":
-                changed = self.present()
-            elif state == "absent":
-                changed = self.absent()
-        except iControlUnexpectedHTTPError as e:
-            raise F5ModuleError(str(e))
+        if state == "present":
+            changed = self.present()
+        elif state == "absent":
+            changed = self.absent()
 
         changes = self.changes.to_return()
         result.update(**changes)
         result.update(dict(changed=changed))
         return result
 
-    def exists(self):
-        result = self.client.api.tm.sys.snmp.traps_s.trap.exists(
-            name=self.want.name,
-            partition=self.want.partition
-        )
-        return result
-
     def present(self):
         if self.exists():
             return self.update()
         else:
             return self.create()
 
+    def absent(self):
+        if self.exists():
+            return self.remove()
+        return False
+
+    def remove(self):
+        if self.module.check_mode:
+            return True
+        self.remove_from_device()
+        if self.exists():
+            raise F5ModuleError("Failed to delete the snmp trap")
+        return True
+
     def create(self):
         self._set_changed_options()
         if self.module.check_mode:
@@ -363,42 +399,69 @@ class BaseManager(object):
         self.update_on_device()
         return True
 
+    def exists(self):
+        uri = "https://{0}:{1}/mgmt/tm/sys/snmp/traps/{2}".format(
+            self.client.provider['server'],
+            self.client.provider['server_port'],
+            transform_name(self.want.partition, self.want.name)
+        )
+        resp = self.client.api.get(uri)
+        try:
+            response = resp.json()
+        except ValueError:
+            return False
+        if resp.status == 404 or 'code' in response and response['code'] == 404:
+            return False
+        return True
+
     def update_on_device(self):
         params = self.want.api_params()
-        result = self.client.api.tm.sys.snmp.traps_s.trap.load(
-            name=self.want.name,
-            partition=self.want.partition
+        uri = "https://{0}:{1}/mgmt/tm/sys/snmp/traps/{2}".format(
+            self.client.provider['server'],
+            self.client.provider['server_port'],
+            transform_name(self.want.partition, self.want.name)
         )
-        result.modify(**params)
+        resp = self.client.api.patch(uri, json=params)
+        try:
+            response = resp.json()
+        except ValueError as ex:
+            raise F5ModuleError(str(ex))
+
+        if 'code' in response and response['code'] == 400:
+            if 'message' in response:
+                raise F5ModuleError(response['message'])
+            else:
+                raise F5ModuleError(resp.content)
 
     def create_on_device(self):
         params = self.want.api_params()
-        self.client.api.tm.sys.snmp.traps_s.trap.create(
-            name=self.want.name,
-            partition=self.want.partition,
-            **params
+        params['name'] = self.want.name
+        params['partition'] = self.want.partition
+        uri = "https://{0}:{1}/mgmt/tm/sys/snmp/traps/".format(
+            self.client.provider['server'],
+            self.client.provider['server_port'],
         )
+        resp = self.client.api.post(uri, json=params)
+        try:
+            response = resp.json()
+        except ValueError as ex:
+            raise F5ModuleError(str(ex))
 
-    def absent(self):
-        if self.exists():
-            return self.remove()
-        return False
-
-    def remove(self):
-        if self.module.check_mode:
-            return True
-        self.remove_from_device()
-        if self.exists():
-            raise F5ModuleError("Failed to delete the snmp trap")
-        return True
+        if 'code' in response and response['code'] in [400, 403]:
+            if 'message' in response:
+                raise F5ModuleError(response['message'])
+            else:
+                raise F5ModuleError(resp.content)
 
     def remove_from_device(self):
-        result = self.client.api.tm.sys.snmp.traps_s.trap.load(
-            name=self.want.name,
-            partition=self.want.partition
+        uri = "https://{0}:{1}/mgmt/tm/sys/snmp/traps/{2}".format(
+            self.client.provider['server'],
+            self.client.provider['server_port'],
+            transform_name(self.want.partition, self.want.name)
         )
-        if result:
-            result.delete()
+        resp = self.client.api.delete(uri)
+        if resp.status == 200:
+            return True
 
 
 class V3Manager(BaseManager):
@@ -432,12 +495,23 @@ class V3Manager(BaseManager):
         return False
 
     def read_current_from_device(self):
-        resource = self.client.api.tm.sys.snmp.traps_s.trap.load(
-            name=self.want.name,
-            partition=self.want.partition
+        uri = "https://{0}:{1}/mgmt/tm/sys/snmp/traps/{2}".format(
+            self.client.provider['server'],
+            self.client.provider['server_port'],
+            transform_name(self.want.partition, self.want.name)
         )
-        result = resource.attrs
-        return V3Parameters(params=result)
+        resp = self.client.api.get(uri)
+        try:
+            response = resp.json()
+        except ValueError as ex:
+            raise F5ModuleError(str(ex))
+
+        if 'code' in response and response['code'] == 400:
+            if 'message' in response:
+                raise F5ModuleError(response['message'])
+            else:
+                raise F5ModuleError(resp.content)
+        return V3Parameters(params=response)
 
 
 class V2Manager(BaseManager):
@@ -471,13 +545,24 @@ class V2Manager(BaseManager):
         return False
 
     def read_current_from_device(self):
-        resource = self.client.api.tm.sys.snmp.traps_s.trap.load(
-            name=self.want.name,
-            partition=self.want.partition
+        uri = "https://{0}:{1}/mgmt/tm/sys/snmp/traps/{2}".format(
+            self.client.provider['server'],
+            self.client.provider['server_port'],
+            transform_name(self.want.partition, self.want.name)
         )
-        result = resource.attrs
-        self._ensure_network(result)
-        return V2Parameters(params=result)
+        resp = self.client.api.get(uri)
+        try:
+            response = resp.json()
+        except ValueError as ex:
+            raise F5ModuleError(str(ex))
+
+        if 'code' in response and response['code'] == 400:
+            if 'message' in response:
+                raise F5ModuleError(response['message'])
+            else:
+                raise F5ModuleError(resp.content)
+        self._ensure_network(response)
+        return V2Parameters(params=response)
 
     def _ensure_network(self, result):
         # BIG-IP's value for "default" is that the key does not
@@ -521,12 +606,23 @@ class V1Manager(BaseManager):
         return False
 
     def read_current_from_device(self):
-        resource = self.client.api.tm.sys.snmp.traps_s.trap.load(
-            name=self.want.name,
-            partition=self.want.partition
+        uri = "https://{0}:{1}/mgmt/tm/sys/snmp/traps/{2}".format(
+            self.client.provider['server'],
+            self.client.provider['server_port'],
+            transform_name(self.want.partition, self.want.name)
         )
-        result = resource.attrs
-        return V1Parameters(params=result)
+        resp = self.client.api.get(uri)
+        try:
+            response = resp.json()
+        except ValueError as ex:
+            raise F5ModuleError(str(ex))
+
+        if 'code' in response and response['code'] == 400:
+            if 'message' in response:
+                raise F5ModuleError(response['message'])
+            else:
+                raise F5ModuleError(resp.content)
+        return V1Parameters(params=response)
 
 
 class ArgumentSpec(object):
@@ -566,18 +662,17 @@ def main():
         argument_spec=spec.argument_spec,
         supports_check_mode=spec.supports_check_mode
     )
-    if not HAS_F5SDK:
-        module.fail_json(msg="The python f5-sdk module is required")
+
+    client = F5RestClient(**module.params)
 
     try:
-        client = F5Client(**module.params)
         mm = ModuleManager(module=module, client=client)
         results = mm.exec_module()
         cleanup_tokens(client)
-        module.exit_json(**results)
+        exit_json(module, results, client)
     except F5ModuleError as ex:
         cleanup_tokens(client)
-        module.fail_json(msg=str(ex))
+        fail_json(module, ex, client)
 
 
 if __name__ == '__main__':
diff --git a/test/units/modules/network/f5/test_bigip_snmp_trap.py b/test/units/modules/network/f5/test_bigip_snmp_trap.py
index 05170ee226..0c4775ce3c 100644
--- a/test/units/modules/network/f5/test_bigip_snmp_trap.py
+++ b/test/units/modules/network/f5/test_bigip_snmp_trap.py
@@ -14,10 +14,6 @@ from nose.plugins.skip import SkipTest
 if sys.version_info < (2, 7):
     raise SkipTest("F5 Ansible modules require Python >= 2.7")
 
-from units.compat import unittest
-from units.compat.mock import Mock
-from units.compat.mock import patch
-from units.compat.mock import DEFAULT
 from ansible.module_utils.basic import AnsibleModule
 
 try:
@@ -27,9 +23,14 @@ try:
     from library.modules.bigip_snmp_trap import V2Manager
     from library.modules.bigip_snmp_trap import V1Manager
     from library.modules.bigip_snmp_trap import ArgumentSpec
-    from library.module_utils.network.f5.common import F5ModuleError
-    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError
-    from test.unit.modules.utils import set_module_args
+
+    # In Ansible 2.8, Ansible changed import paths.
+    from test.units.compat import unittest
+    from test.units.compat.mock import Mock
+    from test.units.compat.mock import patch
+    from test.units.compat.mock import DEFAULT
+
+    from test.units.modules.utils import set_module_args
 except ImportError:
     try:
         from ansible.modules.network.f5.bigip_snmp_trap import V2Parameters
@@ -38,8 +39,13 @@ except ImportError:
         from ansible.modules.network.f5.bigip_snmp_trap import V2Manager
         from ansible.modules.network.f5.bigip_snmp_trap import V1Manager
         from ansible.modules.network.f5.bigip_snmp_trap import ArgumentSpec
-        from ansible.module_utils.network.f5.common import F5ModuleError
-        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError
+
+        # Ansible 2.8 imports
+        from units.compat import unittest
+        from units.compat.mock import Mock
+        from units.compat.mock import patch
+        from units.compat.mock import DEFAULT
+
         from units.modules.utils import set_module_args
     except ImportError:
         raise SkipTest("F5 Ansible modules require the f5-sdk Python library")
