commit d1e4aa76a70e837bfe217652bc94b909a9a1e1d2
Author: yunque <yunque@users.noreply.github.com>
Date:   Thu Jul 28 11:25:07 2016 +0100

    Grammatical clarification and stylistic uniformity
    
    Made more legible by removing unnecessary punctuation, formatting special words (e.g. `sudo`), and a few other minor grammatical changes.

diff --git a/docsite/rst/become.rst b/docsite/rst/become.rst
index 7c5c47f3d5..e1cae2fc1b 100644
--- a/docsite/rst/become.rst
+++ b/docsite/rst/become.rst
@@ -7,8 +7,8 @@ Ansible can use existing privilege escalation systems to allow a user to execute
 
 Become
 ``````
-Ansible allows you 'become' another user, different from the user that logged into the machine (remote user). This is done using existing
-privilege escalation tools, which you probably already use or have configured, like 'sudo', 'su', 'pfexec', 'doas', 'pbrun', 'dzdo', and others.
+Ansible allows you to 'become' another user, different from the user that logged into the machine (remote user). This is done using existing
+privilege escalation tools, which you probably already use or have configured, like `sudo`, `su`, `pfexec`, `doas`, `pbrun`, `dzdo`, and others.
 
 
 .. note:: Before 1.9 Ansible mostly allowed the use of `sudo` and a limited use of `su` to allow a login/remote user to become a different user
@@ -26,10 +26,10 @@ become
     set to 'true'/'yes' to activate privilege escalation.
 
 become_user
-    set to user with desired privileges, the user you 'become', NOT the user you login as. Does NOT imply `become: yes`, to allow it to be set at host level.
+    set to user with desired privileges â€” the user you 'become', NOT the user you login as. Does NOT imply `become: yes`, to allow it to be set at host level.
 
 become_method
-    at play or task level overrides the default method set in ansible.cfg, set to 'sudo'/'su'/'pbrun'/'pfexec'/'doas'/'dzdo'
+    (at play or task level) overrides the default method set in ansible.cfg, set to `sudo`/`su`/`pbrun`/`pfexec`/`doas`/`dzdo`
 
 For example, to manage a system service (which requires ``root`` privileges) when connected as a non-``root`` user (this takes advantage of the fact that the default value of ``become_user`` is ``root``)::
 
