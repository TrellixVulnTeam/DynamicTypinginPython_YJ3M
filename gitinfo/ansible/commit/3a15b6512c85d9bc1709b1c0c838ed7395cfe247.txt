commit 3a15b6512c85d9bc1709b1c0c838ed7395cfe247
Author: Tim Rupp <caphrim007@gmail.com>
Date:   Sun Aug 19 02:46:56 2018 -0400

    Adds bigip http compression profile module (#44362)
    
    This module can be used to manage http compression profiles on
    a BIG-IP.

diff --git a/lib/ansible/modules/network/f5/bigip_profile_http_compression.py b/lib/ansible/modules/network/f5/bigip_profile_http_compression.py
new file mode 100644
index 0000000000..1bb29ef22b
--- /dev/null
+++ b/lib/ansible/modules/network/f5/bigip_profile_http_compression.py
@@ -0,0 +1,540 @@
+#!/usr/bin/python
+# -*- coding: utf-8 -*-
+#
+# Copyright: (c) 2018, F5 Networks Inc.
+# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
+
+from __future__ import absolute_import, division, print_function
+__metaclass__ = type
+
+
+ANSIBLE_METADATA = {'metadata_version': '1.1',
+                    'status': ['preview'],
+                    'supported_by': 'community'}
+
+DOCUMENTATION = r'''
+---
+module: bigip_profile_http_compression
+short_description: Manage HTTP compression profiles on a BIG-IP
+description:
+  - Manage HTTP compression profiles on a BIG-IP.
+version_added: 2.7
+options:
+  name:
+    description:
+      - Specifies the name of the compression profile.
+    required: True
+  parent:
+    description:
+      - Specifies the profile from which this profile inherits settings.
+      - When creating a new profile, if this parameter is not specified, the default
+        is the system-supplied C(httpcompression) profile.
+  description:
+    description:
+      - Description of the HTTP compression profile.
+  buffer_size:
+    description:
+      - Maximum number of compressed bytes that the system buffers before inserting
+        a Content-Length header (which specifies the compressed size) into the response.
+      - When creating a new profile, if this parameter is not specified, the default
+        is provided by the parent profile.
+  gzip_level:
+    description:
+      - Specifies the degree to which the system compresses the content.
+      - Higher compression levels cause the compression process to be slower.
+      - Valid values are between 1 (least compression and fastest) to 9 (most
+        compression and slowest).
+    choices:
+      - 1
+      - 2
+      - 3
+      - 4
+      - 5
+      - 6
+      - 7
+      - 8
+      - 9
+  gzip_memory_level:
+    description:
+      - Number of kilobytes of memory that the system uses for internal compression
+        buffers when compressing a server response.
+    choices:
+      - 1
+      - 2
+      - 4
+      - 8
+      - 16
+      - 32
+      - 64
+      - 128
+      - 256
+  gzip_window_size:
+    description:
+      - Number of kilobytes in the window size that the system uses when compressing
+        a server response.
+    choices:
+      - 1
+      - 2
+      - 4
+      - 8
+      - 16
+      - 32
+      - 64
+      - 128
+  partition:
+    description:
+      - Device partition to manage resources on.
+    default: Common
+  state:
+    description:
+      - When C(present), ensures that the profile exists.
+      - When C(absent), ensures the profile is removed.
+    default: present
+    choices:
+      - present
+      - absent
+extends_documentation_fragment: f5
+author:
+  - Tim Rupp (@caphrim007)
+'''
+
+EXAMPLES = r'''
+- name: Create an HTTP compression profile
+  bigip_profile_http_compression:
+    name: profile1
+    description: Custom HTTP Compression Profile
+    buffer_size: 131072
+    gzip_level: 6
+    gzip_memory_level: 16k
+    gzip_window_size: 64k
+    provider:
+      password: secret
+      server: lb.mydomain.com
+      user: admin
+  delegate_to: localhost
+'''
+
+RETURN = r'''
+description:
+  description: The new description of the resource.
+  returned: changed
+  type: string
+  sample: My custom profile
+buffer_size:
+  description: The new buffer size of the profile.
+  returned: changed
+  type: int
+  sample: 4096
+gzip_memory_level:
+  description: The new GZIP memory level, in KB, of the profile.
+  returned: changed
+  type: int
+  sample: 16
+gzip_level:
+  description: The new GZIP level of the profile. Smaller is less compression.
+  returned: changed
+  type: int
+  sample: 2
+gzip_window_size:
+  description: The new GZIP window size, in KB, of the profile.
+  returned: changed
+  type: int
+  sample: 64
+'''
+
+from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.basic import env_fallback
+
+try:
+    from library.module_utils.network.f5.bigip import F5RestClient
+    from library.module_utils.network.f5.common import F5ModuleError
+    from library.module_utils.network.f5.common import AnsibleF5Parameters
+    from library.module_utils.network.f5.common import cleanup_tokens
+    from library.module_utils.network.f5.common import fq_name
+    from library.module_utils.network.f5.common import f5_argument_spec
+    from library.module_utils.network.f5.common import exit_json
+    from library.module_utils.network.f5.common import fail_json
+    from library.module_utils.network.f5.common import transform_name
+except ImportError:
+    from ansible.module_utils.network.f5.bigip import F5RestClient
+    from ansible.module_utils.network.f5.common import F5ModuleError
+    from ansible.module_utils.network.f5.common import AnsibleF5Parameters
+    from ansible.module_utils.network.f5.common import cleanup_tokens
+    from ansible.module_utils.network.f5.common import fq_name
+    from ansible.module_utils.network.f5.common import f5_argument_spec
+    from ansible.module_utils.network.f5.common import exit_json
+    from ansible.module_utils.network.f5.common import fail_json
+    from ansible.module_utils.network.f5.common import transform_name
+
+
+class Parameters(AnsibleF5Parameters):
+    api_map = {
+        'bufferSize': 'buffer_size',
+        'defaultsFrom': 'parent',
+        'gzipMemoryLevel': 'gzip_memory_level',
+        'gzipLevel': 'gzip_level',
+        'gzipWindowSize': 'gzip_window_size',
+    }
+
+    api_attributes = [
+        'description',
+        'bufferSize',
+        'defaultsFrom',
+        'gzipMemoryLevel',
+        'gzipLevel',
+        'gzipWindowSize',
+    ]
+
+    returnables = [
+        'description',
+        'buffer_size',
+        'gzip_memory_level',
+        'gzip_level',
+        'gzip_window_size',
+    ]
+
+    updatables = [
+        'description',
+        'buffer_size',
+        'gzip_memory_level',
+        'gzip_level',
+        'gzip_window_size',
+    ]
+
+
+class ApiParameters(Parameters):
+    @property
+    def description(self):
+        if self._values['description'] in [None, 'none']:
+            return None
+        return self._values['description']
+
+    @property
+    def gzip_memory_level(self):
+        if self._values['gzip_memory_level'] is None:
+            return None
+        return self._values['gzip_memory_level'] / 1024
+
+    @property
+    def gzip_window_size(self):
+        if self._values['gzip_window_size'] is None:
+            return None
+        return self._values['gzip_window_size'] / 1024
+
+
+class ModuleParameters(Parameters):
+    @property
+    def parent(self):
+        if self._values['parent'] is None:
+            return None
+        result = fq_name(self.partition, self._values['parent'])
+        return result
+
+
+class Changes(Parameters):
+    def to_return(self):
+        result = {}
+        try:
+            for returnable in self.returnables:
+                result[returnable] = getattr(self, returnable)
+            result = self._filter_params(result)
+        except Exception:
+            pass
+        return result
+
+
+class UsableChanges(Changes):
+    @property
+    def gzip_memory_level(self):
+        if self._values['gzip_memory_level'] is None:
+            return None
+        return self._values['gzip_memory_level'] * 1024
+
+    @property
+    def gzip_window_size(self):
+        if self._values['gzip_window_size'] is None:
+            return None
+        return self._values['gzip_window_size'] * 1024
+
+
+class ReportableChanges(Changes):
+    @property
+    def gzip_memory_level(self):
+        if self._values['gzip_memory_level'] is None:
+            return None
+        return self._values['gzip_memory_level'] / 1024
+
+    @property
+    def gzip_window_size(self):
+        if self._values['gzip_window_size'] is None:
+            return None
+        return self._values['gzip_window_size'] / 1024
+
+
+class Difference(object):
+    def __init__(self, want, have=None):
+        self.want = want
+        self.have = have
+
+    def compare(self, param):
+        try:
+            result = getattr(self, param)
+            return result
+        except AttributeError:
+            return self.__default(param)
+
+    def __default(self, param):
+        attr1 = getattr(self.want, param)
+        try:
+            attr2 = getattr(self.have, param)
+            if attr1 != attr2:
+                return attr1
+        except AttributeError:
+            return attr1
+
+    @property
+    def parent(self):
+        if self.want.parent != self.have.parent:
+            raise F5ModuleError(
+                "The parent profile cannot be changed"
+            )
+
+
+class ModuleManager(object):
+    def __init__(self, *args, **kwargs):
+        self.module = kwargs.get('module', None)
+        self.client = kwargs.get('client', None)
+        self.want = ModuleParameters(params=self.module.params)
+        self.have = ApiParameters()
+        self.changes = UsableChanges()
+
+    def _set_changed_options(self):
+        changed = {}
+        for key in Parameters.returnables:
+            if getattr(self.want, key) is not None:
+                changed[key] = getattr(self.want, key)
+        if changed:
+            self.changes = UsableChanges(params=changed)
+
+    def _update_changed_options(self):
+        diff = Difference(self.want, self.have)
+        updatables = Parameters.updatables
+        changed = dict()
+        for k in updatables:
+            change = diff.compare(k)
+            if change is None:
+                continue
+            else:
+                if isinstance(change, dict):
+                    changed.update(change)
+                else:
+                    changed[k] = change
+        if changed:
+            self.changes = UsableChanges(params=changed)
+            return True
+        return False
+
+    def should_update(self):
+        result = self._update_changed_options()
+        if result:
+            return True
+        return False
+
+    def exec_module(self):
+        changed = False
+        result = dict()
+        state = self.want.state
+
+        if state == "present":
+            changed = self.present()
+        elif state == "absent":
+            changed = self.absent()
+
+        reportable = ReportableChanges(params=self.changes.to_return())
+        changes = reportable.to_return()
+        result.update(**changes)
+        result.update(dict(changed=changed))
+        self._announce_deprecations(result)
+        return result
+
+    def _announce_deprecations(self, result):
+        warnings = result.pop('__warnings', [])
+        for warning in warnings:
+            self.client.module.deprecate(
+                msg=warning['msg'],
+                version=warning['version']
+            )
+
+    def present(self):
+        if self.exists():
+            return self.update()
+        else:
+            return self.create()
+
+    def exists(self):
+        uri = "https://{0}:{1}/mgmt/tm/ltm/profile/http-compression/{2}".format(
+            self.client.provider['server'],
+            self.client.provider['server_port'],
+            transform_name(self.want.partition, self.want.name)
+        )
+        resp = self.client.api.get(uri)
+        try:
+            response = resp.json()
+        except ValueError:
+            return False
+        if resp.status == 404 or 'code' in response and response['code'] == 404:
+            return False
+        return True
+
+    def update(self):
+        self.have = self.read_current_from_device()
+        if not self.should_update():
+            return False
+        if self.module.check_mode:
+            return True
+        self.update_on_device()
+        return True
+
+    def remove(self):
+        if self.module.check_mode:
+            return True
+        self.remove_from_device()
+        if self.exists():
+            raise F5ModuleError("Failed to delete the resource.")
+        return True
+
+    def create(self):
+        self._set_changed_options()
+        if self.module.check_mode:
+            return True
+        self.create_on_device()
+        return True
+
+    def create_on_device(self):
+        params = self.changes.api_params()
+        params['name'] = self.want.name
+        params['partition'] = self.want.partition
+        uri = "https://{0}:{1}/mgmt/tm/ltm/profile/http-compression/".format(
+            self.client.provider['server'],
+            self.client.provider['server_port']
+        )
+        resp = self.client.api.post(uri, json=params)
+        try:
+            response = resp.json()
+        except ValueError as ex:
+            raise F5ModuleError(str(ex))
+
+        if 'code' in response and response['code'] in [400, 403]:
+            if 'message' in response:
+                raise F5ModuleError(response['message'])
+            else:
+                raise F5ModuleError(resp.content)
+
+    def update_on_device(self):
+        params = self.changes.api_params()
+        uri = "https://{0}:{1}/mgmt/tm/ltm/profile/http-compression/{2}".format(
+            self.client.provider['server'],
+            self.client.provider['server_port'],
+            transform_name(self.want.partition, self.want.name)
+        )
+        resp = self.client.api.patch(uri, json=params)
+        try:
+            response = resp.json()
+        except ValueError as ex:
+            raise F5ModuleError(str(ex))
+
+        if 'code' in response and response['code'] == 400:
+            if 'message' in response:
+                raise F5ModuleError(response['message'])
+            else:
+                raise F5ModuleError(resp.content)
+
+    def absent(self):
+        if self.exists():
+            return self.remove()
+        return False
+
+    def remove_from_device(self):
+        uri = "https://{0}:{1}/mgmt/tm/ltm/profile/http-compression/{2}".format(
+            self.client.provider['server'],
+            self.client.provider['server_port'],
+            transform_name(self.want.partition, self.want.name)
+        )
+        resp = self.client.api.delete(uri)
+        if resp.status == 200:
+            return True
+        raise F5ModuleError(resp.content)
+
+    def read_current_from_device(self):
+        uri = "https://{0}:{1}/mgmt/tm/ltm/profile/http-compression/{2}".format(
+            self.client.provider['server'],
+            self.client.provider['server_port'],
+            transform_name(self.want.partition, self.want.name)
+        )
+        resp = self.client.api.get(uri)
+        try:
+            response = resp.json()
+        except ValueError as ex:
+            raise F5ModuleError(str(ex))
+
+        if 'code' in response and response['code'] == 400:
+            if 'message' in response:
+                raise F5ModuleError(response['message'])
+            else:
+                raise F5ModuleError(resp.content)
+        return ApiParameters(params=response)
+
+
+class ArgumentSpec(object):
+    def __init__(self):
+        self.supports_check_mode = True
+        argument_spec = dict(
+            name=dict(required=True),
+            parent=dict(),
+            buffer_size=dict(type='int'),
+            description=dict(),
+            gzip_level=dict(
+                type='int',
+                choices=[1, 2, 3, 4, 5, 6, 7, 8, 9]
+            ),
+            gzip_memory_level=dict(
+                type='int',
+                choices=[1, 2, 4, 8, 16, 32, 64, 128, 256]
+            ),
+            gzip_window_size=dict(
+                type='int',
+                choices=[1, 2, 4, 8, 16, 32, 64, 128]
+            ),
+            state=dict(
+                default='present',
+                choices=['present', 'absent']
+            ),
+            partition=dict(
+                default='Common',
+                fallback=(env_fallback, ['F5_PARTITION'])
+            )
+        )
+        self.argument_spec = {}
+        self.argument_spec.update(f5_argument_spec)
+        self.argument_spec.update(argument_spec)
+
+
+def main():
+    spec = ArgumentSpec()
+
+    module = AnsibleModule(
+        argument_spec=spec.argument_spec,
+        supports_check_mode=spec.supports_check_mode,
+    )
+
+    try:
+        client = F5RestClient(**module.params)
+        mm = ModuleManager(module=module, client=client)
+        results = mm.exec_module()
+        exit_json(module, results, client)
+    except F5ModuleError as ex:
+        fail_json(module, ex, client)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/test/units/modules/network/f5/test_bigip_profile_http_compression.py b/test/units/modules/network/f5/test_bigip_profile_http_compression.py
new file mode 100644
index 0000000000..000c4ded9a
--- /dev/null
+++ b/test/units/modules/network/f5/test_bigip_profile_http_compression.py
@@ -0,0 +1,129 @@
+# -*- coding: utf-8 -*-
+#
+# Copyright: (c) 2018, F5 Networks Inc.
+# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
+
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+import pytest
+import sys
+
+from nose.plugins.skip import SkipTest
+if sys.version_info < (2, 7):
+    raise SkipTest("F5 Ansible modules require Python >= 2.7")
+
+from ansible.compat.tests import unittest
+from ansible.compat.tests.mock import Mock
+from ansible.compat.tests.mock import patch
+from ansible.module_utils.basic import AnsibleModule
+
+try:
+    from library.modules.bigip_profile_http_compression import ApiParameters
+    from library.modules.bigip_profile_http_compression import ModuleParameters
+    from library.modules.bigip_profile_http_compression import ModuleManager
+    from library.modules.bigip_profile_http_compression import ArgumentSpec
+    from library.module_utils.network.f5.common import F5ModuleError
+    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError
+    from test.unit.modules.utils import set_module_args
+except ImportError:
+    try:
+        from ansible.modules.network.f5.bigip_profile_http_compression import ApiParameters
+        from ansible.modules.network.f5.bigip_profile_http_compression import ModuleParameters
+        from ansible.modules.network.f5.bigip_profile_http_compression import ModuleManager
+        from ansible.modules.network.f5.bigip_profile_http_compression import ArgumentSpec
+        from ansible.module_utils.network.f5.common import F5ModuleError
+        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError
+        from units.modules.utils import set_module_args
+    except ImportError:
+        raise SkipTest("F5 Ansible modules require the f5-sdk Python library")
+
+fixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')
+fixture_data = {}
+
+
+def load_fixture(name):
+    path = os.path.join(fixture_path, name)
+
+    if path in fixture_data:
+        return fixture_data[path]
+
+    with open(path) as f:
+        data = f.read()
+
+    try:
+        data = json.loads(data)
+    except Exception:
+        pass
+
+    fixture_data[path] = data
+    return data
+
+
+class TestParameters(unittest.TestCase):
+    def test_module_parameters(self):
+        args = dict(
+            name='foo',
+            parent='bar',
+            description='description1',
+            buffer_size=1024,
+            gzip_memory_level=64,
+            gzip_level=2,
+            gzip_window_size=128
+        )
+
+        p = ModuleParameters(params=args)
+        assert p.name == 'foo'
+        assert p.parent == '/Common/bar'
+        assert p.description == 'description1'
+        assert p.buffer_size == 1024
+        assert p.gzip_memory_level == 64
+        assert p.gzip_level == 2
+        assert p.gzip_window_size == 128
+
+    def test_api_parameters(self):
+        p = ApiParameters(params=load_fixture('load_ltm_profile_http_compression_1.json'))
+        assert p.description == 'my profile'
+        assert p.buffer_size == 4096
+        assert p.gzip_memory_level == 8
+        assert p.gzip_level == 1
+        assert p.gzip_window_size == 16
+
+
+@patch('ansible.module_utils.f5_utils.AnsibleF5Client._get_mgmt_root',
+       return_value=True)
+class TestManager(unittest.TestCase):
+
+    def setUp(self):
+        self.spec = ArgumentSpec()
+
+    def test_create(self, *args):
+        # Configure the arguments that would be sent to the Ansible module
+        set_module_args(dict(
+            name='foo',
+            parent='bar',
+            description='description1',
+            buffer_size=1024,
+            gzip_memory_level=64,
+            gzip_level=2,
+            gzip_window_size=128,
+            password='password',
+            server='localhost',
+            user='admin'
+        ))
+
+        module = AnsibleModule(
+            argument_spec=self.spec.argument_spec,
+            supports_check_mode=self.spec.supports_check_mode
+        )
+        mm = ModuleManager(module=module)
+
+        # Override methods to force specific logic in the module to happen
+        mm.exists = Mock(return_value=False)
+        mm.create_on_device = Mock(return_value=True)
+
+        results = mm.exec_module()
+
+        assert results['changed'] is True
