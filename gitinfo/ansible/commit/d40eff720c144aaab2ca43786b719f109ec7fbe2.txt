commit d40eff720c144aaab2ca43786b719f109ec7fbe2
Author: Matt Martz <matt@sivel.net>
Date:   Wed Sep 20 10:33:38 2017 -0500

    Update API example for 2.4

diff --git a/docs/docsite/rst/dev_guide/developing_api.rst b/docs/docsite/rst/dev_guide/developing_api.rst
index 302f388e8c..50057469be 100644
--- a/docs/docsite/rst/dev_guide/developing_api.rst
+++ b/docs/docsite/rst/dev_guide/developing_api.rst
@@ -44,8 +44,8 @@ In 2.0 things get a bit more complicated to start, but you end up with much more
     import json
     from collections import namedtuple
     from ansible.parsing.dataloader import DataLoader
-    from ansible.vars import VariableManager
-    from ansible.inventory import Inventory
+    from ansible.vars.manager import VariableManager
+    from ansible.inventory.manager import InventoryManager
     from ansible.playbook.play import Play
     from ansible.executor.task_queue_manager import TaskQueueManager
     from ansible.plugins.callback import CallbackBase
@@ -63,21 +63,21 @@ In 2.0 things get a bit more complicated to start, but you end up with much more
             This method could store the result in an instance attribute for retrieval later
             """
             host = result._host
-            print json.dumps({host.name: result._result}, indent=4)
+            print(json.dumps({host.name: result._result}, indent=4))
 
-    Options = namedtuple('Options', ['connection', 'module_path', 'forks', 'become', 'become_method', 'become_user', 'check'])
+    Options = namedtuple('Options', ['connection', 'module_path', 'forks', 'become', 'become_method', 'become_user', 'check', 'diff'])
     # initialize needed objects
-    variable_manager = VariableManager()
     loader = DataLoader()
-    options = Options(connection='local', module_path='/path/to/mymodules', forks=100, become=None, become_method=None, become_user=None, check=False)
+    options = Options(connection='local', module_path='/path/to/mymodules', forks=100, become=None, become_method=None, become_user=None, check=False,
+                      diff=False)
     passwords = dict(vault_pass='secret')
 
     # Instantiate our ResultCallback for handling results as they come in
     results_callback = ResultCallback()
 
     # create inventory and pass to var manager
-    inventory = Inventory(loader=loader, variable_manager=variable_manager, host_list='localhost')
-    variable_manager.set_inventory(inventory)
+    inventory = InventoryManager(loader=loader, sources=['localhost'])
+    variable_manager = VariableManager(loader=loader, inventory=inventory)
 
     # create play with tasks
     play_source =  dict(
