commit a7e81ba5005b8ea3136bcd89e6f8a49fcb93c60e
Author: Brian Coca <bcoca@users.noreply.github.com>
Date:   Wed Jan 16 12:36:41 2019 -0500

    ensure we have required systemd env var (#50607)
    
    * ensure we have required systemd env var
    * add clarification about systemd and user scope
    
      fixes #50272

diff --git a/changelogs/fragments/xdg_systemd_fix.yml b/changelogs/fragments/xdg_systemd_fix.yml
new file mode 100644
index 0000000000..ca8ebc1765
--- /dev/null
+++ b/changelogs/fragments/xdg_systemd_fix.yml
@@ -0,0 +1,2 @@
+bugfixes:
+    - ensure we have a XDG_RUNTIME_DIR, as it is not handled correctly by some privilege escalation configurations
diff --git a/lib/ansible/modules/system/systemd.py b/lib/ansible/modules/system/systemd.py
index 1cd45df761..a9d839b0bd 100644
--- a/lib/ansible/modules/system/systemd.py
+++ b/lib/ansible/modules/system/systemd.py
@@ -67,6 +67,9 @@ options:
         description:
             - run systemctl within a given service manager scope, either as the default system scope (system),
               the current user's scope (user), or the scope of all users (global).
+            - "For systemd to work with 'user', the executing user must have its own instance of dbus started (systemd requirement).
+              The user dbus process is normally started during normal login, but not during the run of Ansible tasks.
+              Otherwise you will probably get a 'Failed to connect to bus: no such file or directory' error."
         choices: [ system, user, global ]
         default: 'system'
         version_added: "2.7"
@@ -253,6 +256,8 @@ status:
         }
 '''  # NOQA
 
+import os
+
 from ansible.module_utils.basic import AnsibleModule
 from ansible.module_utils.facts.system.chroot import is_chroot
 from ansible.module_utils.service import sysv_exists, sysv_is_enabled, fail_if_missing
@@ -327,6 +332,9 @@ def main():
 
     systemctl = module.get_bin_path('systemctl', True)
 
+    if os.getenv('XDG_RUNTIME_DIR') is None:
+        os.environ['XDG_RUNTIME_DIR'] = '/run/user/%s' % os.geteuid()
+
     ''' Set CLI options depending on params '''
     if module.params['user'] is not None:
         # handle user deprecation, mutually exclusive with scope
