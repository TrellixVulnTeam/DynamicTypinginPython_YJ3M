commit 1ec3d1f76887b6845bf1ad0e2c7e3f8ab28e0c82
Author: Abhijeet Kasurde <akasurde@redhat.com>
Date:   Fri Mar 9 10:06:27 2018 +0530

    VMware: refactor vmware_datacenter (#36214)
    
    Signed-off-by: Abhijeet Kasurde <akasurde@redhat.com>

diff --git a/lib/ansible/modules/cloud/vmware/vmware_datacenter.py b/lib/ansible/modules/cloud/vmware/vmware_datacenter.py
index 3b0c4a1070..6d80ba877e 100644
--- a/lib/ansible/modules/cloud/vmware/vmware_datacenter.py
+++ b/lib/ansible/modules/cloud/vmware/vmware_datacenter.py
@@ -1,55 +1,44 @@
 #!/usr/bin/python
 # -*- coding: utf-8 -*-
-
 # Copyright: (c) 2015, Joseph Callen <jcallen () csc.com>
+# Copyright: (c) 2018, Ansible Project
 # GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
 
 from __future__ import absolute_import, division, print_function
 __metaclass__ = type
 
-ANSIBLE_METADATA = {'metadata_version': '1.1',
-                    'status': ['preview'],
-                    'supported_by': 'community'}
+ANSIBLE_METADATA = {
+    'metadata_version': '1.1',
+    'status': ['preview'],
+    'supported_by': 'community'
+}
+
 
 DOCUMENTATION = '''
 ---
 module: vmware_datacenter
 short_description: Manage VMware vSphere Datacenters
 description:
-    - Manage VMware vSphere Datacenters
+    - This module can be used to manage (create, delete) VMware vSphere Datacenters.
 version_added: 2.0
 author:
 - Joseph Callen (@jcpowermac)
 - Kamil Szczygiel (@kamsz)
 notes:
-    - Tested on vSphere 6.0
+    - Tested on vSphere 6.0, 6.5
 requirements:
     - "python >= 2.6"
     - PyVmomi
 options:
-    hostname:
-        description:
-            - The hostname or IP address of the vSphere vCenter API server
-        required: True
-    username:
-        description:
-            - The username of the vSphere vCenter
-        required: True
-        aliases: ['user', 'admin']
-    password:
-        description:
-            - The password of the vSphere vCenter
-        required: True
-        aliases: ['pass', 'pwd']
     datacenter_name:
-        description:
-            - The name of the datacenter the cluster will be created in.
-        required: True
+      description:
+      - The name of the datacenter the cluster will be created in.
+      required: True
     state:
-        description:
-            - If the datacenter should be present or absent
-        choices: ['present', 'absent']
-        default: present
+      description:
+      - If the datacenter should be present or absent.
+      choices: [ present, absent ]
+      default: present
 extends_documentation_fragment: vmware.documentation
 '''
 
@@ -63,77 +52,106 @@ EXAMPLES = '''
     password: vmware
     datacenter_name: "datacenter"
     state: present
+
+- name: Delete Datacenter
+  vmware_datacenter:
+    hostname: vcenter_hostname
+    username: root
+    password: pass
+    datacenter_name: DC2
+    state: absent
+  register: datacenter_delete_result
 '''
 
+RETURN = """#
+"""
+
 try:
     from pyVmomi import vim, vmodl
-    HAS_PYVMOMI = True
 except ImportError:
-    HAS_PYVMOMI = False
+    pass
 
 from ansible.module_utils.basic import AnsibleModule
-from ansible.module_utils.vmware import (HAS_PYVMOMI, connect_to_api, find_datacenter_by_name,
-                                         vmware_argument_spec, wait_for_task)
-
-
-def get_datacenter(context, module):
-    try:
-        datacenter_name = module.params.get('datacenter_name')
-        datacenter = find_datacenter_by_name(context, datacenter_name)
-        return datacenter
-    except vmodl.RuntimeFault as runtime_fault:
-        module.fail_json(msg=runtime_fault.msg)
-    except vmodl.MethodFault as method_fault:
-        module.fail_json(msg=method_fault.msg)
-
-
-def create_datacenter(context, module):
-    datacenter_name = module.params.get('datacenter_name')
-    folder = context.rootFolder
-
-    try:
-        datacenter = get_datacenter(context, module)
+from ansible.module_utils.vmware import PyVmomi, find_datacenter_by_name, vmware_argument_spec, wait_for_task
+from ansible.module_utils._text import to_native
+
+
+class VmwareDatacenterManager(PyVmomi):
+    def __init__(self, module):
+        super(VmwareDatacenterManager, self).__init__(module)
+        self.datacenter_name = self.params.get('datacenter_name')
+        self.datacenter_obj = self.get_datacenter()
+
+    def ensure(self):
+        state = self.module.params.get('state')
+
+        if state == 'present':
+            self.create_datacenter()
+
+        if state == 'absent':
+            self.destroy_datacenter()
+
+    def get_datacenter(self):
+        try:
+            datacenter_obj = find_datacenter_by_name(self.content, self.datacenter_name)
+            return datacenter_obj
+        except (vmodl.MethodFault, vmodl.RuntimeFault) as runtime_fault:
+            self.module.fail_json(msg="Failed to get datacenter '%s'"
+                                      " due to : %s" % (self.datacenter_name,
+                                                        to_native(runtime_fault.msg)))
+        except Exception as generic_exc:
+            self.module.fail_json(msg="Failed to get datacenter"
+                                      " '%s' due to generic error: %s" % (self.datacenter_name,
+                                                                          to_native(generic_exc)))
+
+    def create_datacenter(self):
+        folder = self.content.rootFolder
         changed = False
-        if not datacenter:
-            changed = True
-            if not module.check_mode:
-                folder.CreateDatacenter(name=datacenter_name)
-        module.exit_json(changed=changed)
-    except vim.fault.DuplicateName:
-        module.fail_json(msg="A datacenter with the name %s already exists" % datacenter_name)
-    except vim.fault.InvalidName:
-        module.fail_json(msg="%s is an invalid name for a cluster" % datacenter_name)
-    except vmodl.fault.NotSupported:
-        # This should never happen
-        module.fail_json(msg="Trying to create a datacenter on an incorrect folder object")
-    except vmodl.RuntimeFault as runtime_fault:
-        module.fail_json(msg=runtime_fault.msg)
-    except vmodl.MethodFault as method_fault:
-        module.fail_json(msg=method_fault.msg)
-
-
-def destroy_datacenter(context, module):
-    result = None
-
-    try:
-        datacenter = get_datacenter(context, module)
-        changed = False
-        if datacenter:
-            changed = True
-            if not module.check_mode:
-                task = datacenter.Destroy_Task()
+        try:
+            if not self.datacenter_obj and not self.module.check_mode:
+                changed = True
+                folder.CreateDatacenter(name=self.datacenter_name)
+            self.module.exit_json(changed=changed)
+        except vim.fault.DuplicateName as duplicate_name:
+            self.module.exit_json(changed=changed)
+        except vim.fault.InvalidName as invalid_name:
+            self.module.fail_json(msg="Specified datacenter name '%s' is an"
+                                      " invalid name : %s" % (self.datacenter_name,
+                                                              to_native(invalid_name.msg)))
+        except vmodl.fault.NotSupported as not_supported:
+            # This should never happen
+            self.module.fail_json(msg="Trying to create a datacenter '%s' on"
+                                      " an incorrect folder object : %s" % (self.datacenter_name,
+                                                                            to_native(not_supported.msg)))
+        except (vmodl.RuntimeFault, vmodl.MethodFault) as runtime_fault:
+            self.module.fail_json(msg="Failed to create a datacenter"
+                                      " '%s' due to : %s" % (self.datacenter_name,
+                                                             to_native(runtime_fault.msg)))
+        except Exception as generic_exc:
+            self.module.fail_json(msg="Failed to create a datacenter"
+                                      " '%s' due to generic error: %s" % (self.datacenter_name,
+                                                                          to_native(generic_exc)))
+
+    def destroy_datacenter(self):
+        results = dict(changed=False)
+        try:
+            if self.datacenter_obj and not self.module.check_mode:
+                task = self.datacenter_obj.Destroy_Task()
                 changed, result = wait_for_task(task)
-        module.exit_json(changed=changed, result=result)
-    except vim.fault.VimFault as vim_fault:
-        module.fail_json(msg=vim_fault.msg)
-    except vmodl.RuntimeFault as runtime_fault:
-        module.fail_json(msg=runtime_fault.msg)
-    except vmodl.MethodFault as method_fault:
-        module.fail_json(msg=method_fault.msg)
+                results['changed'] = changed
+                results['result'] = result
+            self.module.exit_json(**results)
+        except (vim.fault.VimFault, vmodl.RuntimeFault, vmodl.MethodFault) as runtime_fault:
+            self.module.fail_json(msg="Failed to delete a datacenter"
+                                      " '%s' due to : %s" % (self.datacenter_name,
+                                                             to_native(runtime_fault.msg)))
+        except Exception as generic_exc:
+            self.module.fail_json(msg="Failed to delete a datacenter"
+                                      " '%s' due to generic error: %s" % (self.datacenter_name,
+                                                                          to_native(generic_exc)))
 
 
 def main():
-
     argument_spec = vmware_argument_spec()
     argument_spec.update(
         dict(
@@ -143,17 +161,8 @@ def main():
     )
     module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=True)
 
-    if not HAS_PYVMOMI:
-        module.fail_json(msg='pyvmomi is required for this module')
-
-    context = connect_to_api(module)
-    state = module.params.get('state')
-
-    if state == 'present':
-        create_datacenter(context, module)
-
-    if state == 'absent':
-        destroy_datacenter(context, module)
+    vmware_datacenter_mgr = VmwareDatacenterManager(module)
+    vmware_datacenter_mgr.ensure()
 
 
 if __name__ == '__main__':
