commit 9f1cfe07bb887a47979b141b38db16cab5b997e7
Author: Rene Moser <mail@renemoser.net>
Date:   Mon May 2 18:42:31 2016 +0200

    mysql_user: fix unresolved reference
    
    L282, module is used but not passed into function. Replaced check_mode reference and used module instead since check_mode is also in module.

diff --git a/lib/ansible/modules/database/mysql/mysql_user.py b/lib/ansible/modules/database/mysql/mysql_user.py
index 84ff3ddc25..b0e46ee268 100644
--- a/lib/ansible/modules/database/mysql/mysql_user.py
+++ b/lib/ansible/modules/database/mysql/mysql_user.py
@@ -247,7 +247,7 @@ def is_hash(password):
             ishash = True
     return ishash
 
-def user_mod(cursor, user, host, host_all, password, encrypted, new_priv, append_privs, check_mode):
+def user_mod(cursor, user, host, host_all, password, encrypted, new_priv, append_privs, module):
     changed = False
     grant_option = False
 
@@ -279,7 +279,7 @@ def user_mod(cursor, user, host, host_all, password, encrypted, new_priv, append
                 encrypted_string = (password)
                 if is_hash(password):
                     if current_pass_hash[0] != encrypted_string:
-                        if check_mode:
+                        if module.check_mode:
                             return True
                         if old_user_mgmt:
                             cursor.execute("SET PASSWORD FOR %s@%s = %s", (user, host, password))
@@ -295,7 +295,7 @@ def user_mod(cursor, user, host, host_all, password, encrypted, new_priv, append
                     cursor.execute("SELECT CONCAT('*', UCASE(SHA1(UNHEX(SHA1(%s)))))", (password,))
                 new_pass_hash = cursor.fetchone()
                 if current_pass_hash[0] != new_pass_hash[0]:
-                    if check_mode:
+                    if module.check_mode:
                         return True
                     if old_user_mgmt:
                         cursor.execute("SET PASSWORD FOR %s@%s = %s", (user, host, password))
@@ -315,7 +315,7 @@ def user_mod(cursor, user, host, host_all, password, encrypted, new_priv, append
                     grant_option = True
                 if db_table not in new_priv:
                     if user != "root" and "PROXY" not in priv and not append_privs:
-                        if check_mode:
+                        if module.check_mode:
                             return True
                         privileges_revoke(cursor, user,host,db_table,priv,grant_option)
                         changed = True
@@ -324,7 +324,7 @@ def user_mod(cursor, user, host, host_all, password, encrypted, new_priv, append
             # we can perform a straight grant operation.
             for db_table, priv in new_priv.iteritems():
                 if db_table not in curr_priv:
-                    if check_mode:
+                    if module.check_mode:
                         return True
                     privileges_grant(cursor, user,host,db_table,priv)
                     changed = True
@@ -335,7 +335,7 @@ def user_mod(cursor, user, host, host_all, password, encrypted, new_priv, append
             for db_table in db_table_intersect:
                 priv_diff = set(new_priv[db_table]) ^ set(curr_priv[db_table])
                 if (len(priv_diff) > 0):
-                    if check_mode:
+                    if module.check_mode:
                         return True
                     if not append_privs:
                         privileges_revoke(cursor, user,host,db_table,curr_priv[db_table],grant_option)
@@ -561,9 +561,9 @@ def main():
         if user_exists(cursor, user, host):
             try:
                 if update_password == 'always':
-                    changed = user_mod(cursor, user, host, host_all, password, encrypted, priv, append_privs, module.check_mode)
+                    changed = user_mod(cursor, user, host, host_all, password, encrypted, priv, append_privs, module)
                 else:
-                    changed = user_mod(cursor, user, host, host_all, None, encrypted, priv, append_privs, module.check_mode)
+                    changed = user_mod(cursor, user, host, host_all, None, encrypted, priv, append_privs, module)
 
             except (SQLParseError, InvalidPrivsError, MySQLdb.Error), e:
                 module.fail_json(msg=str(e))
