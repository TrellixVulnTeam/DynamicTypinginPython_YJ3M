commit ae630fff5606eea4616aec73567e4382192cbd85
Author: Ricardo Carrillo Cruz <ricardo.carrillo.cruz@gmail.com>
Date:   Mon Jan 16 18:18:18 2017 +0100

    Refactor iosxr_template to network_cli plugin

diff --git a/lib/ansible/modules/network/iosxr/_iosxr_template.py b/lib/ansible/modules/network/iosxr/_iosxr_template.py
index 70a37f228e..a66c49896f 100644
--- a/lib/ansible/modules/network/iosxr/_iosxr_template.py
+++ b/lib/ansible/modules/network/iosxr/_iosxr_template.py
@@ -106,14 +106,23 @@ responses:
   type: list
   sample: ['...', '...']
 """
+from ansible.module_utils.local import LocalAnsibleModule
 from ansible.module_utils.netcfg import NetworkConfig, dumps
-from ansible.module_utils.iosxr import NetworkModule
+from ansible.module_utils.iosxr import get_config, load_config
+from ansible.module_utils.network import NET_TRANSPORT_ARGS, _transitional_argument_spec
+
+
+def check_args(module):
+    warnings = list()
+    for key in NET_TRANSPORT_ARGS:
+        if module.params[key]:
+            warnings.append(
+                'network provider arguments are no longer supported.  Please '
+                'use connection: network_cli for the task'
+            )
+            break
+    return warnings
 
-def get_config(module):
-    config = module.params['config'] or dict()
-    if not config and not module.params['force']:
-        config = module.config.get_config()
-    return config
 
 def main():
     """ main entry point for module execution
@@ -126,33 +135,37 @@ def main():
         config=dict(),
     )
 
+    # Removed the use of provider arguments in 2.3 due to network_cli
+    # connection plugin.  To be removed in 2.5
+    argument_spec.update(_transitional_argument_spec())
+
     mutually_exclusive = [('config', 'backup'), ('config', 'force')]
 
-    module = NetworkModule(argument_spec=argument_spec,
+    module = LocalAnsibleModule(argument_spec=argument_spec,
                            mutually_exclusive=mutually_exclusive,
                            supports_check_mode=True)
 
-    result = dict(changed=False)
+    warnings = check_args(module)
+
+    result = dict(changed=False, warnings=warnings)
 
     candidate = NetworkConfig(contents=module.params['src'], indent=1)
 
-    contents = get_config(module)
-    if contents:
-        config = NetworkConfig(contents=contents, indent=1)
-        result['_backup'] = str(contents)
+    if module.params['backup']:
+        result['__backup__'] = get_config(module)
 
     if not module.params['force']:
-        commands = candidate.difference(config)
+        contents = get_config(module)
+        configobj = NetworkConfig(contents=contents, indent=1)
+        commands = candidate.difference(configobj)
         commands = dumps(commands, 'commands').split('\n')
-        commands = [str(c) for c in commands if c]
+        commands = [str(c).strip() for c in commands if c]
     else:
-        commands = str(candidate).split('\n')
+        commands = [c.strip() for c in str(candidate).split('\n')]
 
     if commands:
-        if not module.check_mode:
-            response = module.config(commands)
-            result['responses'] = response
-        result['changed'] = True
+        load_config(module, commands, not module.check_mode)
+        result['changed'] = not module.check_mode
 
     result['updates'] = commands
     module.exit_json(**result)
diff --git a/test/units/modules/network/iosxr/fixtures/iosxr_template_config.cfg b/test/units/modules/network/iosxr/fixtures/iosxr_template_config.cfg
new file mode 100644
index 0000000000..afad9d08aa
--- /dev/null
+++ b/test/units/modules/network/iosxr/fixtures/iosxr_template_config.cfg
@@ -0,0 +1,12 @@
+!
+hostname router
+!
+interface GigabitEthernet0/0
+ ip address 1.2.3.4 255.255.255.0
+ description test string
+!
+interface GigabitEthernet0/1
+ ip address 6.7.8.9 255.255.255.0
+ description test string
+ shutdown
+!
diff --git a/test/units/modules/network/iosxr/fixtures/iosxr_template_src.cfg b/test/units/modules/network/iosxr/fixtures/iosxr_template_src.cfg
new file mode 100644
index 0000000000..b3d8961a99
--- /dev/null
+++ b/test/units/modules/network/iosxr/fixtures/iosxr_template_src.cfg
@@ -0,0 +1,11 @@
+!
+hostname foo
+!
+interface GigabitEthernet0/0
+ no ip address
+!
+interface GigabitEthernet0/1
+ ip address 6.7.8.9 255.255.255.0
+ description test string
+ shutdown
+!
diff --git a/test/units/modules/network/iosxr/test_iosxr_template.py b/test/units/modules/network/iosxr/test_iosxr_template.py
new file mode 100644
index 0000000000..729ea6f53c
--- /dev/null
+++ b/test/units/modules/network/iosxr/test_iosxr_template.py
@@ -0,0 +1,134 @@
+#
+# (c) 2016 Red Hat Inc.
+#
+# This file is part of Ansible
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import os
+import json
+
+from ansible.compat.tests import unittest
+from ansible.compat.tests.mock import patch, MagicMock
+from ansible.errors import AnsibleModuleExit
+from ansible.modules.network.iosxr import _iosxr_template
+from ansible.module_utils import basic
+from ansible.module_utils._text import to_bytes
+
+
+def set_module_args(args):
+    args = json.dumps({'ANSIBLE_MODULE_ARGS': args})
+    basic._ANSIBLE_ARGS = to_bytes(args)
+
+fixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')
+fixture_data = {}
+
+def load_fixture(name):
+    path = os.path.join(fixture_path, name)
+
+    if path in fixture_data:
+        return fixture_data[path]
+
+    with open(path) as f:
+        data = f.read()
+
+    try:
+        data = json.loads(data)
+    except:
+        pass
+
+    fixture_data[path] = data
+    return data
+
+
+class TestIosxrTemplateModule(unittest.TestCase):
+
+    def setUp(self):
+        self.mock_get_config = patch('ansible.modules.network.iosxr._iosxr_template.get_config')
+        self.get_config = self.mock_get_config.start()
+
+        self.mock_load_config = patch('ansible.modules.network.iosxr._iosxr_template.load_config')
+        self.load_config = self.mock_load_config.start()
+
+    def tearDown(self):
+        self.mock_get_config.stop()
+        self.mock_load_config.stop()
+
+    def execute_module(self, failed=False, changed=False, commands=None,
+            sort=True):
+
+        config_file = 'iosxr_template_config.cfg'
+        self.get_config.return_value = load_fixture(config_file)
+        self.load_config.return_value = None
+
+        with self.assertRaises(AnsibleModuleExit) as exc:
+            _iosxr_template.main()
+
+        result = exc.exception.result
+
+        if failed:
+            self.assertTrue(result['failed'], result)
+        else:
+            self.assertEqual(result.get('changed'), changed, result)
+
+        if commands:
+            if sort:
+                self.assertEqual(sorted(commands), sorted(result['updates']), result['updates'])
+            else:
+                self.assertEqual(commands, result['updates'], result['updates'])
+
+        return result
+
+    def test_iosxr_template_unchanged(self):
+        src = load_fixture('iosxr_template_config.cfg')
+        set_module_args(dict(src=src))
+        self.execute_module()
+
+    def test_iosxr_template_simple(self):
+        src = load_fixture('iosxr_template_src.cfg')
+        set_module_args(dict(src=src))
+        commands = ['hostname foo',
+                    'interface GigabitEthernet0/0',
+                    'no ip address']
+        self.execute_module(changed=True, commands=commands)
+
+    def test_iosxr_template_force(self):
+        src = load_fixture('iosxr_template_config.cfg')
+        set_module_args(dict(src=src, force=True))
+        commands = [str(s).strip() for s in src.split('\n') if s and s != '!']
+        self.execute_module(changed=True, commands=commands)
+        self.assertFalse(self.get_config.called)
+
+    def test_iosxr_template_backup(self):
+        set_module_args(dict(backup=True))
+        result = self.execute_module()
+        self.assertIn('__backup__', result)
+
+    def test_iosxr_template_config(self):
+        src = load_fixture('iosxr_template_config.cfg')
+        config = 'hostname router'
+        set_module_args(dict(src=src, config=config))
+        commands = ['interface GigabitEthernet0/0',
+                    'ip address 1.2.3.4 255.255.255.0',
+                    'description test string',
+                    'interface GigabitEthernet0/1',
+                    'ip address 6.7.8.9 255.255.255.0',
+                    'description test string',
+                    'shutdown']
+        self.execute_module(changed=False)
+        self.assertTrue(self.get_config.called)
