commit 8eadc1d8ebd7ec90fac2ae386de69c9d783e0d95
Author: James Cammarata <jimi@sngx.net>
Date:   Thu Mar 17 02:01:47 2016 -0400

    Adding more unit tests for AnsibleModule things in basic.py

diff --git a/test/units/module_utils/basic/test__log_invocation.py b/test/units/module_utils/basic/test__log_invocation.py
new file mode 100644
index 0000000000..a08a2d84ca
--- /dev/null
+++ b/test/units/module_utils/basic/test__log_invocation.py
@@ -0,0 +1,58 @@
+# -*- coding: utf-8 -*-
+# (c) 2016, James Cammarata <jimi@sngx.net>
+#
+# This file is part of Ansible
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division)
+__metaclass__ = type
+
+import json
+
+from ansible.compat.tests import unittest
+from ansible.compat.tests.mock import MagicMock
+
+class TestModuleUtilsBasic(unittest.TestCase):
+
+    def test_module_utils_basic__log_invocation(self):
+        from ansible.module_utils import basic
+
+        # test basic log invocation
+        basic.MODULE_COMPLEX_ARGS = json.dumps(dict(foo=False, bar=[1,2,3], bam="bam", baz=u'baz'))
+        am = basic.AnsibleModule(
+            argument_spec=dict(
+                foo = dict(default=True, type='bool'),
+                bar = dict(default=[], type='list'),
+                bam = dict(default="bam"),
+                baz = dict(default=u"baz"),
+                password = dict(default=True),
+                no_log = dict(default="you shouldn't see me", no_log=True),
+            ),
+        )
+
+        am.log = MagicMock()
+        am._log_invocation()
+        am.log.assert_called_with(
+            'Invoked with bam=bam bar=[1, 2, 3] foo=False baz=baz no_log=NOT_LOGGING_PARAMETER password=NOT_LOGGING_PASSWORD ',
+            log_args={
+                'foo': 'False',
+                'bar': '[1, 2, 3]',
+                'bam': 'bam',
+                'baz': 'baz',
+                'password': 'NOT_LOGGING_PASSWORD',
+                'no_log': 'NOT_LOGGING_PARAMETER',
+            },
+        )
diff --git a/test/units/module_utils/basic/test_safe_eval.py b/test/units/module_utils/basic/test_safe_eval.py
new file mode 100644
index 0000000000..32a2c4c27a
--- /dev/null
+++ b/test/units/module_utils/basic/test_safe_eval.py
@@ -0,0 +1,64 @@
+# -*- coding: utf-8 -*-
+# (c) 2015, Toshio Kuratomi <tkuratomi@ansible.com>
+#
+# This file is part of Ansible
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division)
+__metaclass__ = type
+
+from ansible.compat.tests import unittest
+
+
+class TestAnsibleModuleExitJson(unittest.TestCase):
+
+    def test_module_utils_basic_safe_eval(self):
+        from ansible.module_utils import basic
+
+        basic.MODULE_COMPLEX_ARGS = '{}'
+        am = basic.AnsibleModule(
+            argument_spec=dict(),
+        )
+
+        # test some basic usage
+        # string (and with exceptions included), integer, bool
+        self.assertEqual(am.safe_eval("'a'"), 'a')
+        self.assertEqual(am.safe_eval("'a'", include_exceptions=True), ('a', None))
+        self.assertEqual(am.safe_eval("1"), 1)
+        self.assertEqual(am.safe_eval("True"), True)
+        self.assertEqual(am.safe_eval("False"), False)
+        self.assertEqual(am.safe_eval("{}"), {})
+        # not passing in a string to convert
+        self.assertEqual(am.safe_eval({'a':1}), {'a':1})
+        self.assertEqual(am.safe_eval({'a':1}, include_exceptions=True), ({'a':1}, None))
+        # invalid literal eval
+        self.assertEqual(am.safe_eval("a=1"), "a=1")
+        res = am.safe_eval("a=1", include_exceptions=True)
+        self.assertEqual(res[0], "a=1")
+        self.assertEqual(type(res[1]), SyntaxError)
+        self.assertEqual(am.safe_eval("a.foo()"), "a.foo()")
+        res = am.safe_eval("a.foo()", include_exceptions=True)
+        self.assertEqual(res[0], "a.foo()")
+        self.assertEqual(res[1], None)
+        self.assertEqual(am.safe_eval("import foo"), "import foo")
+        res = am.safe_eval("import foo", include_exceptions=True)
+        self.assertEqual(res[0], "import foo")
+        self.assertEqual(res[1], None)
+        self.assertEqual(am.safe_eval("__import__('foo')"), "__import__('foo')")
+        res = am.safe_eval("__import__('foo')", include_exceptions=True)
+        self.assertEqual(res[0], "__import__('foo')")
+        self.assertEqual(type(res[1]), ValueError)
+
diff --git a/test/units/module_utils/test_basic.py b/test/units/module_utils/test_basic.py
index 61914e67bc..0a4ed0763d 100644
--- a/test/units/module_utils/test_basic.py
+++ b/test/units/module_utils/test_basic.py
@@ -99,6 +99,12 @@ class TestModuleUtilsBasic(unittest.TestCase):
         mock_import.side_effect = _mock_import
         mod = builtins.__import__('ansible.module_utils.basic')
 
+    # FIXME: doesn't work yet
+    #@patch.object(builtins, 'bytes')
+    #def test_module_utils_basic_bytes(self, mock_bytes):
+    #    mock_bytes.side_effect = NameError()
+    #    from ansible.module_utils import basic
+
     @patch.object(builtins, '__import__')
     @unittest.skipIf(sys.version_info[0] >= 3, "Python 3 is not supported on targets (yet)")
     def test_module_utils_basic_import_literal_eval(self, mock_import):
