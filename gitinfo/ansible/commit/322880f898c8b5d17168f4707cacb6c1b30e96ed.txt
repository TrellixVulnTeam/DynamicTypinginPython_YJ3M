commit 322880f898c8b5d17168f4707cacb6c1b30e96ed
Author: Brian Coca <bcoca@ansible.com>
Date:   Mon Sep 19 14:00:11 2016 -0400

    dash

diff --git a/docsite/rst/committer_guidelines.rst b/docsite/rst/committer_guidelines.rst
index 6b9e6691dd..10815eda30 100644
--- a/docsite/rst/committer_guidelines.rst
+++ b/docsite/rst/committer_guidelines.rst
@@ -42,23 +42,23 @@ General Rules
 Individuals with direct commit access to ansible/ansible (+core, + extras) are entrusted with powers that allow them to do a broad variety of things--probably more than we can write down. Rather than rules, treat these as general *guidelines*, individuals with this power are expected to use their best judgement. 
 
 * Don’t
-  * Commit directly.
-  * Merge your own PRs. Someone else should have a chance to review and approve the PR merge. If you are a Core Committer, you have a small amount of leeway here for very minor changes.
-  * Forget about alternate environments. Consider the alternatives--yes, people have bad environments, but they are the ones who need us the most.
-  * Drag your community team members down. Always discuss the technical merits, but you should never address the person’s limitations (you can later go for beers and call them idiots, but not in IRC/Github/etc.).
-  * Forget about the maintenance burden. Some things are really cool to have, but they might not be worth shoehorning in if the maintenance burden is too great.
-  * Break playbooks. Always keep backwards compatibility in mind.
-  * Forget to keep it simple. Complexity breeds all kinds of problems.
+  - Commit directly.
+  - Merge your own PRs. Someone else should have a chance to review and approve the PR merge. If you are a Core Committer, you have a small amount of leeway here for very minor changes.
+  - Forget about alternate environments. Consider the alternatives--yes, people have bad environments, but they are the ones who need us the most.
+  - Drag your community team members down. Always discuss the technical merits, but you should never address the person’s limitations (you can later go for beers and call them idiots, but not in IRC/Github/etc.).
+  - Forget about the maintenance burden. Some things are really cool to have, but they might not be worth shoehorning in if the maintenance burden is too great.
+  - Break playbooks. Always keep backwards compatibility in mind.
+  - Forget to keep it simple. Complexity breeds all kinds of problems.
 
 * Do
-  * Squash, avoid merges whenever possible, use github's squash commits or cherry pick if needed (bisect thanks you).
-  * Be active. Committers who have no activity on the project (through merges, triage, commits, etc.) will have their permissions suspended.
-  * Consider backwards compatibility (goes back to "don’t break existing playbooks").
-  * Write tests. PRs with tests are looked at with more priority than PRs without tests that should have them included. While not all changes require tests, be sure to add them for bug fixes or functionality changes.
-  * Discuss with other commiters, specially when you are unsure of something.
-  * Document! If your PR is a new feature or a change to behavior, make sure you've updated all associated documentation or have notified the right people to do so. It also helps to add the version of Core against which this documentation is compatible (to avoid confusion with stable versus devel docs, for backwards compatibility, etc.).
-  * Consider scope, sometimes a fix can be generalized
-  * Keep it simple, then things are maintainable, debuggable and intelligible.
+  - Squash, avoid merges whenever possible, use github's squash commits or cherry pick if needed (bisect thanks you).
+  - Be active. Committers who have no activity on the project (through merges, triage, commits, etc.) will have their permissions suspended.
+  - Consider backwards compatibility (goes back to "don’t break existing playbooks").
+  - Write tests. PRs with tests are looked at with more priority than PRs without tests that should have them included. While not all changes require tests, be sure to add them for bug fixes or functionality changes.
+  - Discuss with other commiters, specially when you are unsure of something.
+  - Document! If your PR is a new feature or a change to behavior, make sure you've updated all associated documentation or have notified the right people to do so. It also helps to add the version of Core against which this documentation is compatible (to avoid confusion with stable versus devel docs, for backwards compatibility, etc.).
+  - Consider scope, sometimes a fix can be generalized
+  - Keep it simple, then things are maintainable, debuggable and intelligible.
 
 Committers are expected to continue to follow the same community and contribution guidelines followed by the rest of the Ansible community. 
 
