commit e7cb2ddc9ca1d229c17e16fe62d6c44ef71618bb
Author: rajaspachipulusu17 <rajas.pachipulusu@calsoftinc.com>
Date:   Tue Aug 27 11:26:13 2019 +0530

    Pluribus Networks vtep module with unit test cases (#60455)

diff --git a/lib/ansible/modules/network/netvisor/pn_vtep.py b/lib/ansible/modules/network/netvisor/pn_vtep.py
new file mode 100644
index 0000000000..10b4768d32
--- /dev/null
+++ b/lib/ansible/modules/network/netvisor/pn_vtep.py
@@ -0,0 +1,204 @@
+#!/usr/bin/python
+# Copyright: (c) 2018, Pluribus Networks
+# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
+
+from __future__ import absolute_import, division, print_function
+__metaclass__ = type
+
+
+ANSIBLE_METADATA = {'metadata_version': '1.1',
+                    'status': ['preview'],
+                    'supported_by': 'community'}
+
+
+DOCUMENTATION = """
+---
+module: pn_vtep
+author: "Pluribus Networks (@rajaspachipulusu17)"
+version_added: "2.9"
+short_description: CLI command to create/delete vtep
+description:
+  - This module can be used to create a vtep and delte a vtep.
+options:
+  pn_cliswitch:
+    description:
+      - Target switch to run the CLI on.
+    required: false
+    type: str
+  state:
+    description:
+      - vtep configuration command.
+    required: false
+    choices: ['present', 'absent']
+    type: str
+    default: 'present'
+  pn_name:
+    description:
+      - vtep name.
+    required: false
+    type: str
+  pn_ip:
+    description:
+      - Primary IP address.
+    required: false
+    type: str
+  pn_vrouter_name:
+    description:
+      - name of the vrouter service.
+    required: false
+    type: str
+  pn_virtual_ip:
+    description:
+      - Virtual/Secondary IP address.
+    required: false
+    type: str
+  pn_location:
+    description:
+      - switch name.
+    required: false
+    type: str
+  pn_switch_in_cluster:
+    description:
+      - Tells whether switch in cluster or not.
+    required: false
+    type: bool
+    default: True
+"""
+
+EXAMPLES = """
+- name: create vtep
+  pn_vtep:
+    pn_cliswitch: 'sw01'
+    pn_name: 'foo'
+    pn_vrouter_name: 'foo-vrouter'
+    pn_ip: '22.22.22.2'
+    pn_location: 'sw01'
+    pn_virtual_ip: "22.22.22.1"
+
+- name: delete vtep
+  pn_vtep:
+    pn_cliswitch: 'sw01'
+    state: 'absent'
+    pn_name: 'foo'
+"""
+
+RETURN = """
+command:
+  description: the CLI command run on the target node.
+  returned: always
+  type: str
+stdout:
+  description: set of responses from the vtep command.
+  returned: always
+  type: list
+stderr:
+  description: set of error responses from the vtep command.
+  returned: on error
+  type: list
+changed:
+  description: indicates whether the CLI caused changes on the target.
+  returned: always
+  type: bool
+"""
+
+from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.network.netvisor.pn_nvos import pn_cli, run_cli
+from ansible.module_utils.network.netvisor.netvisor import run_commands
+
+
+def check_cli(module, cli):
+    """
+    This method checks for idempotency using the vtep-show command.
+    If a name exists, return True if name exists else False.
+    :param module: The Ansible module to fetch input parameters
+    :param cli: The CLI string
+    """
+    name = module.params['pn_name']
+
+    cli += ' vtep-show format name no-show-headers'
+    out = run_commands(module, cli)[1]
+
+    if out:
+        out = out.split()
+
+    return True if name in out else False
+
+
+def main():
+    """ This section is for arguments parsing """
+
+    state_map = dict(
+        present='vtep-create',
+        absent='vtep-delete'
+    )
+
+    argument_spec = dict(
+        pn_cliswitch=dict(required=False, type='str'),
+        state=dict(required=False, type='str', choices=state_map.keys(), default='present'),
+        pn_name=dict(required=False, type='str'),
+        pn_ip=dict(required=False, type='str'),
+        pn_vrouter_name=dict(required=False, type='str'),
+        pn_virtual_ip=dict(required=False, type='str'),
+        pn_location=dict(required=False, type='str'),
+        pn_switch_in_cluster=dict(required=False, type='bool', default='True')
+    )
+
+    module = AnsibleModule(
+        argument_spec=argument_spec,
+        required_if=(
+            ["state", "present", ["pn_name", "pn_ip", "pn_vrouter_name", "pn_location"]],
+            ["state", "absent", ["pn_name"]],
+        ),
+    )
+
+    # Accessing the arguments
+    cliswitch = module.params['pn_cliswitch']
+    state = module.params['state']
+    name = module.params['pn_name']
+    ip = module.params['pn_ip']
+    vrouter_name = module.params['pn_vrouter_name']
+    virtual_ip = module.params['pn_virtual_ip']
+    location = module.params['pn_location']
+    switch_in_cluster = module.params['pn_switch_in_cluster']
+
+    if switch_in_cluster and not virtual_ip and state == 'present':
+        module.exit_json(
+            failed=True,
+            msg='virtual ip is required when switch is in cluster'
+        )
+
+    command = state_map[state]
+
+    # Building the CLI command string
+    cli = pn_cli(module, cliswitch)
+
+    NAME_EXISTS = check_cli(module, cli)
+
+    cli += ' %s name %s ' % (command, name)
+
+    if command == 'vtep-delete':
+        if NAME_EXISTS is False:
+            module.exit_json(
+                skipped=True,
+                msg='vtep with name %s does not exist' % name
+            )
+
+    if command == 'vtep-create':
+        if NAME_EXISTS is True:
+            module.exit_json(
+                skipped=True,
+                msg='vtpe with name %s already exists' % name
+            )
+
+        cli += 'vrouter-name %s ' % vrouter_name
+        cli += 'ip %s ' % ip
+        cli += 'location %s ' % location
+
+        if virtual_ip:
+            cli += 'virtual-ip %s ' % virtual_ip
+
+    run_cli(module, cli, state_map)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/test/units/modules/network/netvisor/test_pn_vtep.py b/test/units/modules/network/netvisor/test_pn_vtep.py
new file mode 100644
index 0000000000..bbe829becf
--- /dev/null
+++ b/test/units/modules/network/netvisor/test_pn_vtep.py
@@ -0,0 +1,63 @@
+# Copyright: (c) 2018, Pluribus Networks
+# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
+
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import json
+
+from units.compat.mock import patch
+from ansible.modules.network.netvisor import pn_vtep
+from units.modules.utils import set_module_args
+from .nvos_module import TestNvosModule, load_fixture
+
+
+class TestVtepModule(TestNvosModule):
+
+    module = pn_vtep
+
+    def setUp(self):
+        self.mock_run_nvos_commands = patch('ansible.modules.network.netvisor.pn_vtep.run_cli')
+        self.run_nvos_commands = self.mock_run_nvos_commands.start()
+
+        self.mock_run_check_cli = patch('ansible.modules.network.netvisor.pn_vtep.check_cli')
+        self.run_check_cli = self.mock_run_check_cli.start()
+
+    def tearDown(self):
+        self.mock_run_nvos_commands.stop()
+        self.mock_run_check_cli.stop()
+
+    def run_cli_patch(self, module, cli, state_map):
+        if state_map['present'] == 'vtep-create':
+            results = dict(
+                changed=True,
+                cli_cmd=cli
+            )
+        elif state_map['absent'] == 'vtep-delete':
+            results = dict(
+                changed=True,
+                cli_cmd=cli
+            )
+        module.exit_json(**results)
+
+    def load_fixtures(self, commands=None, state=None, transport='cli'):
+        self.run_nvos_commands.side_effect = self.run_cli_patch
+        if state == 'present':
+            self.run_check_cli.return_value = False
+        if state == 'absent':
+            self.run_check_cli.return_value = True
+
+    def test_vtep_create(self):
+        set_module_args({'pn_cliswitch': 'sw01', 'pn_name': 'foo',
+                         'pn_vrouter_name': 'sw01-vrouter', 'pn_location': 'sw01', 'pn_ip': '192.168.1.10',
+                         'pn_virtual_ip': '192.168.1.9', 'state': 'present'})
+        result = self.execute_module(changed=True, state='present')
+        expected_cmd = ' switch sw01 vtep-create name foo vrouter-name sw01-vrouter ip 192.168.1.10 location sw01 virtual-ip 192.168.1.9 '
+        self.assertEqual(result['cli_cmd'], expected_cmd)
+
+    def test_vtep_delete(self):
+        set_module_args({'pn_cliswitch': 'sw01', 'pn_name': 'foo',
+                         'state': 'absent'})
+        result = self.execute_module(changed=True, state='absent')
+        expected_cmd = ' switch sw01 vtep-delete name foo '
+        self.assertEqual(result['cli_cmd'], expected_cmd)
