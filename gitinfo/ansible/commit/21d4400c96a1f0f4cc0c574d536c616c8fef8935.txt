commit 21d4400c96a1f0f4cc0c574d536c616c8fef8935
Author: Michael DeHaan <michael.dehaan@gmail.com>
Date:   Sat Oct 19 13:02:57 2013 -0400

    Misc pep8 fixes

diff --git a/lib/ansible/playbook/task.py b/lib/ansible/playbook/task.py
index 93eb99b1db..8a22002aa6 100644
--- a/lib/ansible/playbook/task.py
+++ b/lib/ansible/playbook/task.py
@@ -101,7 +101,7 @@ class Task(object):
                 utils.deprecated("The 'when_' conditional is a deprecated syntax as of 1.2. Switch to using the regular unified 'when' statements as described in ansibleworks.com/docs/.","1.5")
 
                 if 'when' in ds:
-                   raise errors.AnsibleError("multiple when_* statements specified in task %s" % (ds.get('name', ds['action'])))
+                    raise errors.AnsibleError("multiple when_* statements specified in task %s" % (ds.get('name', ds['action'])))
                 when_name = x.replace("when_","")
                 ds['when'] = "%s %s" % (when_name, ds[x])
                 ds.pop(x)
diff --git a/library/cloud/ovirt b/library/cloud/ovirt
index 450537c884..c0f1fb99bb 100755
--- a/library/cloud/ovirt
+++ b/library/cloud/ovirt
@@ -377,7 +377,8 @@ def main():
                 create_vm_template(c, vmname, image, zone)
                 module.exit_json(changed=True, msg="deployed VM %s from template %s"  % (vmname,image))
             elif resource_type == 'new':
-                create_vm(c, vmtype, vmname, zone, vmdisk_size, vmcpus, vmnic, vmnetwork, vmmem, vmdisk_alloc, sdomain, vmcores, vmos, vmdisk_int )
+                # FIXME: refactor, use keyword args.
+                create_vm(c, vmtype, vmname, zone, vmdisk_size, vmcpus, vmnic, vmnetwork, vmmem, vmdisk_alloc, sdomain, vmcores, vmos, vmdisk_int)
                 module.exit_json(changed=True, msg="deployed VM %s from scratch"  % vmname)
             else:
                 module.exit_json(changed=False, msg="You did not specify a resource type")
diff --git a/library/packaging/homebrew b/library/packaging/homebrew
index 4e45483e3c..c53d728740 100644
--- a/library/packaging/homebrew
+++ b/library/packaging/homebrew
@@ -135,7 +135,7 @@ def generate_options_string(install_options):
     if install_options is None:
         return ''
 
-    options_str =  ''
+    options_str = ''
 
     for option in install_options:
         options_str += ' --%s' % option
diff --git a/library/system/service b/library/system/service
index b21d3f508d..34b8dc31e1 100644
--- a/library/system/service
+++ b/library/system/service
@@ -880,7 +880,7 @@ class NetBsdService(Service):
             if os.path.isfile(rcfile):
                 self.rcconf_file = rcfile
 
-        self.rcconf_key = "%s" % string.replace(self.name,"-","_");
+        self.rcconf_key = "%s" % string.replace(self.name,"-","_")
 
         return self.service_enable_rcconf()
 
diff --git a/library/utilities/accelerate b/library/utilities/accelerate
index 6d50826bc4..8381c52e11 100644
--- a/library/utilities/accelerate
+++ b/library/utilities/accelerate
@@ -168,6 +168,7 @@ def daemonize_self(module, password, port, minutes):
     log("daemonizing successful")
 
 class ThreadWithReturnValue(Thread):
+
     def __init__(self, group=None, target=None, name=None, args=(), kwargs={}, Verbose=None):
         Thread.__init__(self, group, target, name, args, kwargs, Verbose)
         self._return = None
@@ -176,6 +177,7 @@ class ThreadWithReturnValue(Thread):
         if self._Thread__target is not None:
             self._return = self._Thread__target(*self._Thread__args,
                                                 **self._Thread__kwargs)
+
     def join(self,timeout=None):
         Thread.join(self, timeout=timeout)
         return self._return
