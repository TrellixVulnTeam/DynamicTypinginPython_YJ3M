commit eab3b02cb37c5410543a2de79d72955de1eeebcc
Author: Anil Kumar Muraleedharan <amuraleedhar@lenovo.com>
Date:   Wed Dec 19 22:08:19 2018 +0530

    Refactoring of cnos_interface module like what followed by other vendors (#49927)
    
    * Refactoring of cnos_interface module like what followed by other vendors
    
    * To remove cnos-interface from E326 validation ignore list
    
    * Effect of default parameters impacted UT

diff --git a/lib/ansible/module_utils/network/cnos/cnos.py b/lib/ansible/module_utils/network/cnos/cnos.py
index f3ca8cbef3..b0c12f86aa 100644
--- a/lib/ansible/module_utils/network/cnos/cnos.py
+++ b/lib/ansible/module_utils/network/cnos/cnos.py
@@ -216,1118 +216,6 @@ def get_defaults_flag(module):
         return 'full'
 
 
-def interfaceConfig(module, prompt, functionality, answer):
-    retVal = ""
-    command = "interface "
-    newPrompt = prompt
-    interfaceArg1 = functionality
-    interfaceArg2 = module.params['interfaceRange']
-    interfaceArg3 = module.params['interfaceArg1']
-    interfaceArg4 = module.params['interfaceArg2']
-    interfaceArg5 = module.params['interfaceArg3']
-    interfaceArg6 = module.params['interfaceArg4']
-    interfaceArg7 = module.params['interfaceArg5']
-    interfaceArg8 = module.params['interfaceArg6']
-    interfaceArg9 = module.params['interfaceArg7']
-    deviceType = module.params['deviceType']
-
-    if(interfaceArg1 == "port-channel"):
-        command = command + " " + interfaceArg1 + " " + interfaceArg2
-        # debugOutput(command)
-        value = checkSanityofVariable(
-            deviceType, "portchannel_interface_value", interfaceArg2)
-        if(value == "ok"):
-            cmd = [{'command': command, 'prompt': None, 'answer': None}]
-        else:
-            value = checkSanityofVariable(
-                deviceType, "portchannel_interface_range", interfaceArg2)
-            if(value == "ok"):
-                cmd = [{'command': command, 'prompt': None, 'answer': None}]
-            else:
-                value = checkSanityofVariable(
-                    deviceType, "portchannel_interface_string", interfaceArg2)
-                if(value == "ok"):
-                    cmd = [{'command': command, 'prompt': None,
-                            'answer': None}]
-                else:
-                    retVal = "Error-102"
-                    return retVal
-        retVal = retVal + interfaceLevel2Config(module, cmd, prompt, answer)
-    elif(interfaceArg1 == "ethernet"):
-        value = checkSanityofVariable(
-            deviceType, "ethernet_interface_value", interfaceArg2)
-        if(value == "ok"):
-            command = command + interfaceArg1 + " 1/" + interfaceArg2
-            cmd = [{'command': command, 'prompt': None, 'answer': None}]
-        else:
-            value = checkSanityofVariable(
-                deviceType, "ethernet_interface_range", interfaceArg2)
-            if(value == "ok"):
-                command = command + interfaceArg1 + " 1/" + interfaceArg2
-                cmd = [{'command': command, 'prompt': None, 'answer': None}]
-            else:
-                value = checkSanityofVariable(
-                    deviceType, "ethernet_interface_string", interfaceArg2)
-                if(value == "ok"):
-                    command = command + interfaceArg1 + " " + interfaceArg2
-                    cmd = [{'command': command, 'prompt': None,
-                            'answer': None}]
-                else:
-                    retVal = "Error-102"
-                    return retVal
-
-        retVal = retVal + interfaceLevel2Config(module, cmd, prompt, answer)
-    elif(interfaceArg1 == "loopback"):
-        value = checkSanityofVariable(
-            deviceType, "loopback_interface_value", interfaceArg2)
-        if(value == "ok"):
-            command = command + interfaceArg1 + " " + interfaceArg2
-            cmd = [{'command': command, 'prompt': None, 'answer': None}]
-        else:
-            retVal = "Error-102"
-            return retVal
-        retVal = retVal + interfaceLevel2Config(module, cmd, prompt, answer)
-    elif(interfaceArg1 == "mgmt"):
-        value = checkSanityofVariable(
-            deviceType, "mgmt_interface_value", interfaceArg2)
-        if(value == "ok"):
-            command = command + interfaceArg1 + " " + interfaceArg2
-            cmd = [{'command': command, 'prompt': None, 'answer': None}]
-        else:
-            retVal = "Error-102"
-            return retVal
-        retVal = retVal + interfaceLevel2Config(module, cmd, prompt, answer)
-    elif(interfaceArg1 == "vlan"):
-        value = checkSanityofVariable(
-            deviceType, "vlan_interface_value", interfaceArg2)
-        if(value == "ok"):
-            command = command + interfaceArg1 + " " + interfaceArg2
-            cmd = [{'command': command, 'prompt': None, 'answer': None}]
-        else:
-            retVal = "Error-102"
-            return retVal
-        retVal = retVal + interfaceLevel2Config(module, cmd, prompt, answer)
-    else:
-        retVal = "Error-102"
-
-    return retVal
-# EOM
-
-
-def interfaceLevel2Config(module, cmd, prompt, answer):
-    retVal = ""
-    command = ""
-    interfaceL2Arg1 = module.params['interfaceArg1']
-    interfaceL2Arg2 = module.params['interfaceArg2']
-    interfaceL2Arg3 = module.params['interfaceArg3']
-    interfaceL2Arg4 = module.params['interfaceArg4']
-    interfaceL2Arg5 = module.params['interfaceArg5']
-    interfaceL2Arg6 = module.params['interfaceArg6']
-    interfaceL2Arg7 = module.params['interfaceArg7']
-    deviceType = module.params['deviceType']
-
-    if(interfaceL2Arg1 == "channel-group"):
-        # debugOutput("channel-group")
-        command = interfaceL2Arg1 + " "
-        value = checkSanityofVariable(
-            deviceType, "aggregation_group_no", interfaceL2Arg2)
-        if(value == "ok"):
-            command = command + interfaceL2Arg2 + " mode "
-            value = checkSanityofVariable(
-                deviceType, "aggregation_group_mode", interfaceL2Arg3)
-            if(value == "ok"):
-                command = command + interfaceL2Arg3
-            else:
-                retVal = "Error-200"
-                return retVal
-        else:
-            retVal = "Error-201"
-            return retVal
-
-    elif (interfaceL2Arg1 == "bfd"):
-        # debugOutput("bfd")
-        command = interfaceL2Arg1 + " "
-        value = checkSanityofVariable(
-            deviceType, "bfd_options", interfaceL2Arg2)
-        if(value == "ok"):
-            if(interfaceL2Arg2 == "echo"):
-                command = command + interfaceL2Arg2
-            elif(interfaceL2Arg2 == "interval"):
-                command = command + interfaceL2Arg2 + " "
-                value = checkSanityofVariable(
-                    deviceType, "bfd_interval", interfaceL2Arg3)
-                if(value == "ok"):
-                    command = command + interfaceL2Arg3
-                    value = checkSanityofVariable(
-                        deviceType, "bfd_minrx", interfaceL2Arg4)
-                    if(value == "ok"):
-                        command = command + " minrx " + interfaceL2Arg4
-                        value = checkSanityofVariable(
-                            deviceType, "bfd_ multiplier", interfaceL2Arg5)
-                        if(value == "ok"):
-                            command = command + " multiplier " + \
-                                interfaceL2Arg5
-                        else:
-                            retVal = "Error-236"
-                            return retVal
-                    else:
-                        retVal = "Error-235"
-                        return retVal
-                else:
-                    retVal = "Error-234"
-                    return retVal
-            elif(interfaceL2Arg2 == "authentication"):
-                command = command + interfaceL2Arg2 + " "
-                value = checkSanityofVariable(
-                    deviceType, "bfd_auth_options", interfaceL2Arg3)
-                if(value == "ok"):
-                    command = command + interfaceL2Arg3 + " "
-                    if((interfaceL2Arg3 == "keyed-md5") or
-                        (interfaceL2Arg3 == "keyed-sha1") or
-                        (interfaceL2Arg3 == "meticulous-keyed-md5") or
-                        (interfaceL2Arg3 == "meticulous-keyed-sha1") or
-                            (interfaceL2Arg3 == "simple")):
-                        value = checkSanityofVariable(
-                            deviceType, "bfd_key_options", interfaceL2Arg4)
-                        if(value == "ok"):
-                            command = command + interfaceL2Arg4 + " "
-                            if(interfaceL2Arg4 == "key-chain"):
-                                value = checkSanityofVariable(
-                                    deviceType, "bfd_key_chain",
-                                    interfaceL2Arg5)
-                                if(value == "ok"):
-                                    command = command + interfaceL2Arg5
-                                else:
-                                    retVal = "Error-237"
-                                    return retVal
-                            elif(interfaceL2Arg4 == "key-id"):
-                                value = checkSanityofVariable(
-                                    deviceType, "bfd_key_id", interfaceL2Arg5)
-                                if(value == "ok"):
-                                    command = command + interfaceL2Arg5
-                                    command = command + " key "
-                                    value = checkSanityofVariable(
-                                        deviceType, "bfd_key_name",
-                                        interfaceL2Arg6)
-                                    if(value == "ok"):
-                                        command = command + interfaceL2Arg6
-                                    else:
-                                        retVal = "Error-238"
-                                        return retVal
-                                else:
-                                    retVal = "Error-239"
-                                    return retVal
-                        else:
-                            retVal = "Error-240"
-                            return retVal
-                else:
-                    retVal = "Error-241"
-                    return retVal
-
-            elif(interfaceL2Arg2 == "ipv4" or interfaceL2Arg2 == "ipv6"):
-                command = command + interfaceL2Arg2 + " "
-                value = checkSanityofVariable(
-                    deviceType, "bfd_ipv4_options", interfaceL2Arg3)
-                if(value == "ok"):
-                    command = command + interfaceL2Arg3 + " "
-                    if(interfaceL2Arg3 == "authentication"):
-                        value = checkSanityofVariable(
-                            deviceType, "bfd_auth_options", interfaceL2Arg4)
-                        if(value == "ok"):
-                            command = command + interfaceL2Arg4 + " "
-                            if((interfaceL2Arg4 == "keyed-md5") or
-                                (interfaceL2Arg4 == "keyed-sha1") or
-                                (interfaceL2Arg4 == "meticulous-keyed-md5") or
-                                (interfaceL2Arg4 == "meticulous-keyed-sha1") or
-                                    (interfaceL2Arg4 == "simple")):
-                                value = checkSanityofVariable(
-                                    deviceType, "bfd_key_options",
-                                    interfaceL2Arg5)
-                                if(value == "ok"):
-                                    command = command + interfaceL2Arg5 + " "
-                                    if(interfaceL2Arg5 == "key-chain"):
-                                        value = checkSanityofVariable(
-                                            deviceType, "bfd_key_chain",
-                                            interfaceL2Arg6)
-                                        if(value == "ok"):
-                                            command = command + interfaceL2Arg6
-                                        else:
-                                            retVal = "Error-237"
-                                            return retVal
-                                    elif(interfaceL2Arg5 == "key-id"):
-                                        value = checkSanityofVariable(
-                                            deviceType, "bfd_key_id",
-                                            interfaceL2Arg6)
-                                        if(value == "ok"):
-                                            command = command + \
-                                                interfaceL2Arg6 + " key "
-                                            value = checkSanityofVariable(
-                                                deviceType, "bfd_key_name",
-                                                interfaceL2Arg7)
-                                            if(value == "ok"):
-                                                command = command + \
-                                                    interfaceL2Arg7
-                                            else:
-                                                retVal = "Error-238"
-                                                return retVal
-                                        else:
-                                            retVal = "Error-239"
-                                            return retVal
-
-                                    else:
-                                        retVal = "Error-240"
-                                        return retVal
-                                else:
-                                    retVal = "Error-240"
-                                    return retVal
-                        else:
-                            retVal = "Error-241"
-                            return retVal
-                    elif(interfaceL2Arg3 == "echo"):
-                        command = command + interfaceL2Arg3
-                    elif(interfaceL2Arg3 == "interval"):
-                        command = command + interfaceL2Arg3 + " "
-                        value = checkSanityofVariable(
-                            deviceType, "bfd_interval", interfaceL2Arg4)
-                        if(value == "ok"):
-                            command = command + interfaceL2Arg4
-                            value = checkSanityofVariable(
-                                deviceType, "bfd_minrx", interfaceL2Arg5)
-                            if(value == "ok"):
-                                command = command + " minrx " + interfaceL2Arg5
-                                value = checkSanityofVariable(
-                                    deviceType, "bfd_ multiplier",
-                                    interfaceL2Arg6)
-                                if(value == "ok"):
-                                    command = command + " multiplier " + \
-                                        interfaceL2Arg6
-                                else:
-                                    retVal = "Error-236"
-                                    return retVal
-                            else:
-                                retVal = "Error-235"
-                                return retVal
-                        else:
-                            retVal = "Error-234"
-                            return retVal
-                else:
-                    command = command.strip()  # None is taken care here
-
-            elif(interfaceL2Arg2 == "neighbor"):
-                command = command + interfaceL2Arg2 + " src-ip "
-                value = checkSanityofVariable(
-                    deviceType, "bfd_neighbor_ip", interfaceL2Arg3)
-                if(value == "ok"):
-                    command = command + interfaceL2Arg3 + " dest-ip "
-                    value = checkSanityofVariable(
-                        deviceType, "bfd_neighbor_ip", interfaceL2Arg4)
-                    if(value == "ok"):
-                        command = command + interfaceL2Arg4 + " "
-                        if(interfaceL2Arg5 is not None):
-                            value = checkSanityofVariable(
-                                deviceType, "bfd_neighbor_options",
-                                interfaceL2Arg5)
-                            if(value == "ok"):
-                                command = command + interfaceL2Arg5 + " "
-                                if(interfaceL2Arg6 is not None):
-                                    if((interfaceL2Arg6 == "admin-down") or
-                                            (interfaceL2Arg6 ==
-                                                "non-persistent")):
-                                        command = command + \
-                                            interfaceL2Arg6 + " "
-                                        if((interfaceL2Arg7 is not None) and
-                                                (interfaceL2Arg7 ==
-                                                    "admin-down")):
-                                            command = command + interfaceL2Arg7
-                                        else:
-                                            retVal = "Error-277"
-                                            return retVal
-                                    else:
-                                        retVal = "Error-277"
-                                        return retVal
-                                # Else is not there are its optionsal
-                            # Else is not there as this is optional
-                        # Else is not there as this is optional
-                    else:
-                        retVal = "Error-242"
-                        return retVal
-                else:
-                    retVal = "Error-243"
-                    return retVal
-
-            else:
-                retVal = "Error-205"
-                return retVal
-        else:
-            retVal = "Error-205"
-            return retVal
-
-    elif (interfaceL2Arg1 == "switchport"):
-        # debugOutput("switchport")
-        command = interfaceL2Arg1 + " "
-        if(interfaceL2Arg2 is None):
-            command = command.strip()
-        elif(interfaceL2Arg2 == "access"):
-            command = command + interfaceL2Arg2 + " vlan "
-            value = checkSanityofVariable(
-                deviceType, "bfd_access_vlan", interfaceL2Arg3)
-            if(value == "ok"):
-                command = command + interfaceL2Arg3
-            else:
-                retVal = "Error-202"
-                return retVal
-        elif(interfaceL2Arg2 == "mode"):
-            command = command + interfaceL2Arg2 + " "
-            value = checkSanityofVariable(
-                deviceType, "bfd_bridgeport_mode", interfaceL2Arg3)
-            if(value == "ok"):
-                command = command + interfaceL2Arg3
-            else:
-                retVal = "Error-203"
-                return retVal
-        elif(interfaceL2Arg2 == "trunk"):
-            command = command + interfaceL2Arg2 + " "
-            value = checkSanityofVariable(
-                deviceType, "trunk_options", interfaceL2Arg3)
-            if(value == "ok"):
-                command = command + interfaceL2Arg3 + " "
-                if((interfaceL2Arg3 == "allowed") or
-                        (interfaceL2Arg3 == "native")):
-                    command = command + "vlan "  # Only permiting one vlan id
-                    if(interfaceL2Arg4 == "all" or interfaceL2Arg4 == "none"):
-                        command = command + interfaceL2Arg4
-                    elif(interfaceL2Arg4 == "add" or
-                            interfaceL2Arg4 == "remove" or
-                            interfaceL2Arg4 == "none"):
-                        command = command + interfaceL2Arg4 + " "
-                        value = checkSanityofVariable(
-                            deviceType, "bfd_access_vlan", interfaceL2Arg5)
-                        if(value == "ok"):
-                            command = command + interfaceL2Arg5
-                        else:
-                            retVal = "Error-202"
-                            return retVal
-                    else:
-                        value = checkSanityofVariable(
-                            deviceType, "bfd_access_vlan", interfaceL2Arg4)
-                        if(value == "ok"):
-                            command = command + interfaceL2Arg4
-                        else:
-                            retVal = "Error-202"
-                            return retVal
-                else:
-                    retVal = "Error-204"
-                    return retVal
-            else:
-                retVal = "Error-204"
-                return retVal
-        else:
-            retVal = "Error-205"
-            return retVal
-
-    elif (interfaceL2Arg1 == "description"):
-        # debugOutput("description")
-        command = interfaceL2Arg1 + " "
-        value = checkSanityofVariable(
-            deviceType, "portCh_description", interfaceL2Arg2)
-        if(value == "ok"):
-            command = command + interfaceL2Arg2
-        else:
-            retVal = "Error-206"
-            return retVal
-    elif (interfaceL2Arg1 == "duplex"):
-        # debugOutput("duplex")
-        command = interfaceL2Arg1 + " "
-        value = checkSanityofVariable(
-            deviceType, "duplex_option", interfaceL2Arg2)
-        if(value == "ok"):
-            command = command + interfaceL2Arg2
-        else:
-            retVal = "Error-207"
-            return retVal
-    elif (interfaceL2Arg1 == "flowcontrol"):
-        # debugOutput("flowcontrol")
-        command = interfaceL2Arg1 + " "
-        value = checkSanityofVariable(
-            deviceType, "flowcontrol_options", interfaceL2Arg2)
-        if(value == "ok"):
-            command = command + interfaceL2Arg2 + " "
-            if(interfaceL2Arg3 == "on" or interfaceL2Arg3 == "off"):
-                command = command + interfaceL2Arg3
-            else:
-                retVal = "Error-208"
-                return retVal
-        else:
-            retVal = "Error-209"
-            return retVal
-    elif (interfaceL2Arg1 == "ip"):
-        # debugOutput("ip")
-        command = interfaceL2Arg1 + " "
-        value = checkSanityofVariable(
-            deviceType, "portchannel_ip_options", interfaceL2Arg2)
-        if(value == "ok"):
-            command = command + interfaceL2Arg2 + " "
-            if(interfaceL2Arg2 == "access-group"):
-                value = checkSanityofVariable(
-                    deviceType, "accessgroup_name", interfaceL2Arg3)
-                if(value == "ok"):
-                    command = command + interfaceL2Arg3 + " "
-                    if(interfaceL2Arg4 == "in" or interfaceL2Arg4 == "out"):
-                        command = command + interfaceL2Arg4
-                    else:
-                        retVal = "Error-245"
-                        return retVal
-                else:
-                    retVal = "Error-246"
-                    return retVal
-            elif(interfaceL2Arg2 == "address"):
-                if(interfaceL2Arg3 == "dhcp"):
-                    command = command + interfaceL2Arg3
-                elif(interfaceL2Arg3 is not None):
-                    value = checkSanityofVariable(
-                        deviceType, "portchannel_ipv4", interfaceL2Arg3)
-                    if(value == "ok"):
-                        command = command + interfaceL2Arg3 + " "
-                        value = checkSanityofVariable(
-                            deviceType, "portchannel_ipv4", interfaceL2Arg4)
-                        if(value == "ok"):
-                            command = command + interfaceL2Arg4 + " "
-                            if(interfaceL2Arg5 == "secondary"):
-                                command = command + interfaceL2Arg5
-                            else:
-                                retVal = "Error-278"
-                                return retVal
-                        else:
-                            retVal = "Error-279"
-                            return retVal
-                    else:
-                        value = checkSanityofVariable(
-                            deviceType, "portchannel_ipv4_mask",
-                            interfaceL2Arg3)
-                        if(value == "ok"):
-                            command = command + interfaceL2Arg3 + " "
-                            if(interfaceL2Arg4 == "secondary"):
-                                command = command + interfaceL2Arg4
-                            elif(interfaceL2Arg4 is None):
-                                command = command.strip()
-                            else:
-                                retVal = "Error-278"
-                                return retVal
-                        else:
-                            retVal = "Error-279"
-                            return retVal
-
-            elif(interfaceL2Arg2 == "arp"):
-                value = checkSanityofVariable(
-                    deviceType, "arp_ipaddress", interfaceL2Arg3)
-                if(value == "ok"):
-                    command = command + interfaceL2Arg3 + " "
-                    value = checkSanityofVariable(
-                        deviceType, "arp_macaddress", interfaceL2Arg4)
-                    if(value == "ok"):
-                        command = command + interfaceL2Arg4 + " "
-                    else:
-                        retVal = "Error-247"
-                        return retVal
-                elif(interfaceL2Arg3 == "timeout"):
-                    command = command + interfaceL2Arg3 + " "
-                    value = checkSanityofVariable(
-                        deviceType, "arp_timeout_value", interfaceL2Arg4)
-                    if(value == "ok"):
-                        command = command + interfaceL2Arg4 + " "
-                    else:
-                        retVal = "Error-248"
-                        return retVal
-                else:
-                    retVal = "Error-249"
-                    return retVal
-            elif(interfaceL2Arg2 == "dhcp"):
-                if(interfaceL2Arg3 == "client"):
-                    command = command + interfaceL2Arg3 + " "
-                    if(interfaceL2Arg4 == "class-id"):
-                        command = command + interfaceL2Arg3 + " "
-                        if(interfaceL2Arg4 is not None):
-                            command = command + interfaceL2Arg4
-                    elif(interfaceL2Arg4 == "request"):
-                        command = command + interfaceL2Arg4 + " "
-                        if(interfaceL2Arg5 == "bootfile-name" or
-                                interfaceL2Arg5 == "host-name" or
-                                interfaceL2Arg5 == "log-server" or
-                                interfaceL2Arg5 == "tftp-server-name"):
-                            command = command + interfaceL2Arg5 + " "
-                        else:
-                            retVal = "Error-250"
-                            return retVal
-                    else:
-                        retVal = "Error-251"
-                        return retVal
-                elif(interfaceL2Arg3 == "relay"):
-                    command = command + interfaceL2Arg3 + " address "
-                    value = checkSanityofVariable(
-                        deviceType, "relay_ipaddress", interfaceL2Arg4)
-                    if(value == "ok"):
-                        command = command + interfaceL2Arg4
-                    else:
-                        retVal = "Error-252"
-                        return retVal
-                else:
-                    retVal = "Error-253"
-                    return retVal
-            elif(interfaceL2Arg2 == "ospf"):
-                value = checkSanityofVariable(
-                    deviceType, "ip_ospf_options", interfaceL2Arg3)
-                if(value == "ok"):
-                    retVal = "Error-102"
-                    return retVal
-                else:
-                    retVal = "Error-254"
-                    return retVal
-
-            elif(interfaceL2Arg2 == "port"):
-                command = command + "access-group "
-                value = checkSanityofVariable(
-                    deviceType, "accessgroup_name", interfaceL2Arg3)
-                if(value == "ok"):
-                    command = command + interfaceL2Arg3 + " in"
-                else:
-                    retVal = "Error-246"
-                    return retVal
-            elif(interfaceL2Arg2 == "port-unreachable"):
-                command = command + interfaceL2Arg2
-
-            elif(interfaceL2Arg2 == "redirects"):
-                command = command + interfaceL2Arg2
-
-            elif(interfaceL2Arg2 == "router"):
-                command = command + interfaceL2Arg2 + " 0 "
-                if(interfaceL2Arg3 == "area" or
-                        interfaceL2Arg3 == "multi-area"):
-                    command = command + interfaceL2Arg3
-                    value = checkSanityofVariable(
-                        deviceType, "ospf_id_decimal_value", interfaceL2Arg4)
-                    if(value == "ok"):
-                        command = command + interfaceL2Arg4
-                    else:
-                        value = checkSanityofVariable(
-                            deviceType, "ospf_id_ipaddres_value",
-                            interfaceL2Arg4)
-                        if(value == "ok"):
-                            command = command + interfaceL2Arg4
-                        else:
-                            retVal = "Error-255"
-                            return retVal
-                else:
-                    retVal = "Error-256"
-                    return retVal
-
-            elif(interfaceL2Arg2 == "unreachables"):
-                command = command + interfaceL2Arg2
-            else:
-                retVal = "Error-244"
-                return retVal
-        else:
-            retVal = "Error-244"
-            return retVal
-
-    elif (interfaceL2Arg1 == "ipv6"):
-        # debugOutput("ipv6")
-        command = interfaceL2Arg1 + " "
-        value = checkSanityofVariable(
-            deviceType, "portchannel_ipv6_options", interfaceL2Arg2)
-        if(value == "ok"):
-            command = command + interfaceL2Arg2 + " "
-            if(interfaceL2Arg2 == "address"):
-                if(interfaceL2Arg3 == "dhcp"):
-                    command = command + interfaceL2Arg3
-                else:
-                    value = checkSanityofVariable(
-                        deviceType, "portchannel_ipv6_address",
-                        interfaceL2Arg3)
-                    if(value == "ok"):
-                        command = command + interfaceL2Arg3 + " "
-                        if(interfaceL2Arg4 == "anycast" or
-                                interfaceL2Arg4 == "secondary"):
-                            command = command + interfaceL2Arg4
-                        else:
-                            retVal = "Error-276"
-                            return retVal
-                    else:
-                        retVal = "Error-275"
-                        return retVal
-            elif(interfaceL2Arg2 == "dhcp"):
-                value = checkSanityofVariable(
-                    deviceType, "portchannel_ipv6_dhcp", interfaceL2Arg3)
-                if(value == "ok"):
-                    command = command + "relay address " + interfaceL2Arg3
-                    if(interfaceL2Arg4 is not None):
-                        if(interfaceL2Arg4 == "ethernet"):
-                            value = checkSanityofVariable(
-                                deviceType, "portchannel_ipv6_dhcp_ethernet",
-                                interfaceL2Arg4)
-                            if(value == "ok"):
-                                command = command + " interface ethernet " + \
-                                    interfaceL2Arg4
-                            else:
-                                retVal = "Error-271"
-                                return retVal
-                        elif(interfaceL2Arg4 == "vlan"):
-                            value = checkSanityofVariable(
-                                deviceType, "portchannel_ipv6_dhcp_vlan",
-                                interfaceL2Arg4)
-                            if(value == "ok"):
-                                command = command + " interface vlan " + \
-                                    interfaceL2Arg4
-                            else:
-                                retVal = "Error-272"
-                                return retVal
-                        else:
-                            retVal = "Error-270"
-                            return retVal
-                else:
-                    retVal = "Error-269"
-                    return retVal
-
-            elif(interfaceL2Arg2 == "link-local"):
-                value = checkSanityofVariable(
-                    deviceType, "portchannel_ipv6_linklocal", interfaceL2Arg3)
-                if(value == "ok"):
-                    command = command + interfaceL2Arg3
-                else:
-                    retVal = "Error-273"
-                    return retVal
-            elif(interfaceL2Arg2 == "nd"):
-                retVal = "Error-102"
-                return retVal
-            elif(interfaceL2Arg2 == "neighbor"):
-                value = checkSanityofVariable(
-                    deviceType, "portchannel_ipv6_neighbor_address",
-                    interfaceL2Arg3)
-                if(value == "ok"):
-                    command = command + interfaceL2Arg3 + " "
-                    value = checkSanityofVariable(
-                        deviceType, "portchannel_ipv6_neighbor_mac",
-                        interfaceL2Arg4)
-                    if(value == "ok"):
-                        command = command + interfaceL2Arg4
-                    else:
-                        retVal = "Error-267"
-                        return retVal
-                else:
-                    retVal = "Error-268"
-                    return retVal
-            else:
-                retVal = "Error-266"
-                return retVal
-        else:
-            retVal = "Error-102"
-            return retVal
-
-    elif (interfaceL2Arg1 == "lacp"):
-        # debugOutput("lacp")
-        command = interfaceL2Arg1 + " "
-        value = checkSanityofVariable(
-            deviceType, "lacp_options", interfaceL2Arg2)
-        if(value == "ok"):
-            command = command + interfaceL2Arg2 + " "
-            if(interfaceL2Arg2 == "port-priority"):
-                value = checkSanityofVariable(
-                    deviceType, "port_priority", interfaceL2Arg3)
-                if(value == "ok"):
-                    command = command + interfaceL2Arg3
-                else:
-                    retVal = "Error-210"
-                    return retVal
-            elif(interfaceL2Arg2 == "suspend-individual"):
-                command = command + interfaceL2Arg3
-            elif(interfaceL2Arg2 == "timeout"):
-                command = command + interfaceL2Arg2 + " "
-                if(interfaceL2Arg3 == "long" or interfaceL2Arg3 == "short"):
-                    command = command + interfaceL2Arg3
-                else:
-                    retVal = "Error-211"
-                    return retVal
-            else:
-                retVal = "Error-212"
-                return retVal
-        else:
-            retVal = "Error-212"
-            return retVal
-
-    elif (interfaceL2Arg1 == "lldp"):
-        # debugOutput("lldp")
-        command = interfaceL2Arg1 + " "
-        value = checkSanityofVariable(
-            deviceType, "lldp_options", interfaceL2Arg2)
-        if(value == "ok"):
-            command = command + interfaceL2Arg2 + " "
-            if(interfaceL2Arg2 == "receive" or
-                    interfaceL2Arg2 == "trap-notification" or
-                    interfaceL2Arg2 == "transmit"):
-                command = command.strip()
-            elif(interfaceL2Arg2 == "tlv-select"):
-                value = checkSanityofVariable(
-                    deviceType, "lldp_tlv_options", interfaceL2Arg3)
-                if(value == "ok"):
-                    command = command + interfaceL2Arg3
-                else:
-                    retVal = "Error-213"
-                    return retVal
-            else:
-                retVal = "Error-214"
-                return retVal
-        else:
-            retVal = "Error-214"
-            return retVal
-
-    elif (interfaceL2Arg1 == "load-interval"):
-        # debugOutput("load-interval")
-        command = interfaceL2Arg1 + " "
-        value = checkSanityofVariable(
-            deviceType, "load_interval_delay", interfaceL2Arg2)
-        if(value == "ok"):
-            command = command + interfaceL2Arg2
-        else:
-            if(interfaceL2Arg2 == "counter"):
-                command = command + interfaceL2Arg2 + " "
-                value = checkSanityofVariable(
-                    deviceType, "load_interval_counter", interfaceL2Arg3)
-                if(value == "ok"):
-                    command = command + interfaceL2Arg3 + " "
-                    value = checkSanityofVariable(
-                        deviceType, "load_interval_delay", interfaceL2Arg4)
-                    if(value == "ok"):
-                        command = command + interfaceL2Arg4
-                    else:
-                        retVal = "Error-215"
-                        return retVal
-                else:
-                    retVal = "Error-216"
-                    return retVal
-            else:
-                retVal = "Error-217"
-                return retVal
-
-    elif (interfaceL2Arg1 == "mac"):
-        # debugOutput("mac")
-        command = interfaceL2Arg1 + " port access-group "
-        value = checkSanityofVariable(
-            deviceType, "mac_accessgroup_name", interfaceL2Arg2)
-        if(value == "ok"):
-            command = command + interfaceL2Arg2
-        else:
-            retVal = "Error-218"
-            return retVal
-    elif (interfaceL2Arg1 == "mac-address"):
-        # debugOutput("mac-address")
-        command = interfaceL2Arg1 + " "
-        value = checkSanityofVariable(
-            deviceType, "mac_address", interfaceL2Arg2)
-        if(value == "ok"):
-            command = command + interfaceL2Arg2
-        else:
-            retVal = "Error-219"
-            return retVal
-
-    elif (interfaceL2Arg1 == "mac-learn"):
-        # debugOutput("mac-learn")
-        command = interfaceL2Arg1 + " disable"
-
-    elif (interfaceL2Arg1 == "microburst-detection"):
-        # debugOutput("microburst-detection")
-        command = interfaceL2Arg1 + " enable threshold "
-        value = checkSanityofVariable(
-            deviceType, "microburst_threshold", interfaceL2Arg2)
-        if(value == "ok"):
-            command = command + interfaceL2Arg2
-        else:
-            retVal = "Error-220"
-            return retVal
-
-    elif (interfaceL2Arg1 == "mtu"):
-        # debugOutput("mtu")
-        command = interfaceL2Arg1 + " "
-        value = checkSanityofVariable(deviceType, "mtu_value", interfaceL2Arg2)
-        if(value == "ok"):
-            command = command + interfaceL2Arg2
-        else:
-            retVal = "Error-221"
-            return retVal
-
-    elif (interfaceL2Arg1 == "service"):
-        # debugOutput("service")
-        command = interfaceL2Arg1 + " instance "
-        value = checkSanityofVariable(
-            deviceType, "service_instance", interfaceL2Arg2)
-        if(value == "ok"):
-            command = command + interfaceL2Arg2
-        else:
-            retVal = "Error-222"
-            return retVal
-
-    elif (interfaceL2Arg1 == "service-policy"):
-        # debugOutput("service-policy")
-        command = interfaceL2Arg1 + " "
-        value = checkSanityofVariable(
-            deviceType, "service_policy_options", interfaceL2Arg2)
-        if(value == "ok"):
-            command = command + interfaceL2Arg2 + " "
-            if(interfaceL2Arg2 == "input" or interfaceL2Arg2 == "output"):
-                value = checkSanityofVariable(
-                    deviceType, "service_policy_name", interfaceL2Arg3)
-                if(value == "ok"):
-                    command = command + interfaceL2Arg3
-                else:
-                    retVal = "Error-223"
-                    return retVal
-            elif(interfaceL2Arg2 == "copp-system-policy"):
-                command = command + "class all"
-            elif(interfaceL2Arg2 == "type" and interfaceL2Arg3 == "qos"):
-                command = command + interfaceL2Arg3 + " "
-                if(interfaceL2Arg4 == "input" or interfaceL2Arg4 == "output"):
-                    value = checkSanityofVariable(
-                        deviceType, "service_policy_name", interfaceL2Arg5)
-                    if(value == "ok"):
-                        command = command + interfaceL2Arg5
-                else:
-                    retVal = "Error-223"
-                    return retVal
-            elif(interfaceL2Arg2 == "type" and interfaceL2Arg3 == "queuing"):
-                command = command + interfaceL2Arg3 + " "
-                if(interfaceL2Arg4 == "input" or interfaceL2Arg4 == "output"):
-                    value = checkSanityofVariable(
-                        deviceType, "service_policy_name", interfaceL2Arg5)
-                    if(value == "ok"):
-                        command = command + interfaceL2Arg5
-                else:
-                    retVal = "Error-223"
-                    return retVal
-            else:
-                retVal = "Error-224"
-                return retVal
-
-    elif (interfaceL2Arg1 == "shutdown"):
-        # debugOutput("shutdown")
-        command = interfaceL2Arg1
-
-    elif (interfaceL2Arg1 == "no shutdown"):
-        # debugOutput("no shutdown")
-        command = interfaceL2Arg1
-
-    elif (interfaceL2Arg1 == "snmp"):
-        # debugOutput("snmp")
-        command = interfaceL2Arg1 + "  trap link-status "
-
-    elif (interfaceL2Arg1 == "spanning-tree"):
-        # debugOutput("spanning-tree")
-        command = interfaceL2Arg1 + " "
-        value = checkSanityofVariable(
-            deviceType, "spanning_tree_options", interfaceL2Arg2)
-        if(value == "ok"):
-            if(interfaceL2Arg2 == "bpdufilter"):
-                command = command + interfaceL2Arg2 + " "
-                if(interfaceL2Arg3 == "enable" or
-                        interfaceL2Arg3 == "disable"):
-                    command = command + interfaceL2Arg3
-                else:
-                    retVal = "Error-257"
-                    return retVal
-            elif(interfaceL2Arg2 == "bpduguard"):
-                command = command + interfaceL2Arg2 + " "
-                if(interfaceL2Arg3 == "enable" or
-                        interfaceL2Arg3 == "disable"):
-                    command = command + interfaceL2Arg3
-                else:
-                    retVal = "Error-258"
-                    return retVal
-            elif(interfaceL2Arg2 == "cost"):
-                command = command + interfaceL2Arg2 + " "
-                value = checkSanityofVariable(
-                    deviceType, "spanning_tree_cost", interfaceL2Arg3)
-                if(value == "ok"):
-                    command = command + interfaceL2Arg3
-                elif(interfaceL2Arg3 == "auto"):
-                    command = command + interfaceL2Arg3
-                else:
-                    retVal = "Error-259"
-                    return retVal
-            elif(interfaceL2Arg2 == "disable" or interfaceL2Arg2 == "enable"):
-                command = command + interfaceL2Arg2 + " "
-            elif(interfaceL2Arg2 == "guard"):
-                command = command + interfaceL2Arg2 + " "
-                if(interfaceL2Arg3 == "loop" or interfaceL2Arg3 == "root"):
-                    command = command + interfaceL2Arg3
-                else:
-                    retVal = "Error-260"
-                    return retVal
-            elif(interfaceL2Arg2 == "link-type"):
-                command = command + interfaceL2Arg2 + " "
-                if(interfaceL2Arg3 == "auto" or
-                        interfaceL2Arg3 == "point-to-point" or
-                        interfaceL2Arg3 == "shared"):
-                    command = command + interfaceL2Arg3
-                else:
-                    retVal = "Error-261"
-                    return retVal
-
-            elif(interfaceL2Arg2 == "mst"):
-                command = command + interfaceL2Arg2 + " "
-                value = checkSanityofVariable(
-                    deviceType, "spanning_tree_interfacerange",
-                    interfaceL2Arg3)
-                if(value == "ok"):
-                    command = command + interfaceL2Arg3 + " "
-                    if(interfaceL2Arg4 == "cost"):
-                        command = command + interfaceL2Arg4 + " "
-                        value = checkSanityofVariable(
-                            deviceType, "spanning_tree_cost", interfaceL2Arg5)
-                        if(value == "ok"):
-                            command = command + interfaceL2Arg5
-                        elif(interfaceL2Arg5 == "auto"):
-                            command = command + interfaceL2Arg5
-                        else:
-                            retVal = "Error-259"
-                            return retVal
-                    elif(interfaceL2Arg4 == "port-priority"):
-                        command = command + interfaceL2Arg4 + " "
-                        value = checkSanityofVariable(
-                            deviceType, "spanning_tree_portpriority",
-                            interfaceL2Arg5)
-                        if(value == "ok"):
-                            command = command + interfaceL2Arg5
-                        else:
-                            retVal = "Error-259"
-                            return retVal
-                    else:
-                        retVal = "Error-259"
-                        return retVal
-                else:
-                    retVal = "Error-263"
-                    return retVal
-            elif(interfaceL2Arg2 == "port"):
-                command = command + interfaceL2Arg2 + " type edge"
-            elif(interfaceL2Arg2 == "port-priority"):
-                command = command + interfaceL2Arg2 + " "
-                value = checkSanityofVariable(
-                    deviceType, "spanning_tree_portpriority", interfaceL2Arg3)
-                if(value == "ok"):
-                    command = command + interfaceL2Arg3
-                else:
-                    retVal = "Error-264"
-                    return retVal
-
-            elif(interfaceL2Arg2 == "vlan"):
-                command = command + interfaceL2Arg2 + " "
-                value = checkSanityofVariable(
-                    deviceType, "vlan_id_range", interfaceL2Arg3)
-                if(value == "ok"):
-                    command = command + interfaceL2Arg3
-                    if(interfaceL2Arg4 == "cost"):
-                        command = command + interfaceL2Arg4 + " "
-                        value = checkSanityofVariable(
-                            deviceType, "spanning_tree_cost", interfaceL2Arg5)
-                        if(value == "ok"):
-                            command = command + interfaceL2Arg5
-                        elif(interfaceL2Arg5 == "auto"):
-                            command = command + interfaceL2Arg5
-                        else:
-                            retVal = "Error-263"
-                            return retVal
-                    elif(interfaceL2Arg4 == "port-priority"):
-                        command = command + interfaceL2Arg4 + " "
-                        value = checkSanityofVariable(
-                            deviceType, "spanning_tree_portpriority",
-                            interfaceL2Arg5)
-                        if(value == "ok"):
-                            command = command + interfaceL2Arg5
-                        else:
-                            retVal = "Error-264"
-                            return retVal
-                    else:
-                        retVal = "Error-264"
-                        return retVal
-                else:
-                    retVal = "Error-134"
-                    return retVal
-            else:
-                retVal = "Error-263"
-                return retVal
-    elif (interfaceL2Arg1 == "speed"):
-        # debugOutput("speed")
-        command = interfaceL2Arg1 + " "
-        value = checkSanityofVariable(
-            deviceType, "interface_speed", interfaceL2Arg2)
-        if(value == "ok"):
-            command = command + interfaceL2Arg2
-        else:
-            retVal = "Error-225"
-            return retVal
-    elif (interfaceL2Arg1 == "storm-control"):
-        # debugOutput("storm-control")
-        command = interfaceL2Arg1 + " "
-        value = checkSanityofVariable(
-            deviceType, "stormcontrol_options", interfaceL2Arg2)
-        if(value == "ok"):
-            command = command + interfaceL2Arg2 + " level "
-            value = checkSanityofVariable(
-                deviceType, "stormcontrol_level", interfaceL2Arg3)
-            if(value == "ok"):
-                command = command + interfaceL2Arg3
-
-            else:
-                retVal = "Error-226"
-                return retVal
-        else:
-            retVal = "Error-227"
-            return retVal
-
-    elif (interfaceL2Arg1 == "vlan"):
-        # debugOutput("vlan")
-        command = interfaceL2Arg1 + " dot1q tag native "
-        value = checkSanityofVariable(
-            deviceType, "portchannel_dot1q_tag", interfaceL2Arg2)
-        if(value == "ok"):
-            command = command + interfaceL2Arg2
-            if(interfaceL2Arg2 == "egress-only"):
-                command = command + " enable"
-        else:
-            retVal = "Error-228"
-            return retVal
-
-    elif (interfaceL2Arg1 == "vrrp"):
-        # debugOutput("vrrp")
-        command = interfaceL2Arg1 + " "
-        value = checkSanityofVariable(deviceType, "vrrp_id", interfaceL2Arg2)
-        if(value == "ok"):
-            command = command + interfaceL2Arg2 + " "
-            if(interfaceL2Arg3 == "ipv6"):
-                command = command + interfaceL2Arg3 + " "
-            elif(interfaceL2Arg3 is None):
-                command = command + ""
-            else:
-                retVal = "Error-229"
-                return retVal
-        else:
-            retVal = "Error-230"
-            return retVal
-
-    else:
-        retVal = "Error-233"
-        return retVal
-
-    # debugOutput(command)
-    inner_cmd = [{'command': command, 'prompt': None, 'answer': None}]
-    cmd.extend(inner_cmd)
-    retVal = retVal + str(run_cnos_commands(module, cmd))
-    # Come back to config mode
-    if((prompt == "(config-if)#") or (prompt == "(config-if-range)#")):
-        command = "exit"
-        # debugOutput(command)
-        cmd = [{'command': command, 'prompt': None, 'answer': None}]
-        # retVal = retVal + str(run_cnos_commands(module, cmd))
-    return retVal
-# EOM
-
-
 def enterEnableModeForDevice(enablePassword, timeout, obj):
     command = "enable\n"
     pwdPrompt = "password:"
diff --git a/lib/ansible/modules/network/cnos/cnos_interface.py b/lib/ansible/modules/network/cnos/cnos_interface.py
index 58e2e591f2..06c4229d3b 100644
--- a/lib/ansible/modules/network/cnos/cnos_interface.py
+++ b/lib/ansible/modules/network/cnos/cnos_interface.py
@@ -1,10 +1,8 @@
 #!/usr/bin/python
 # -*- coding: utf-8 -*-
-from __future__ import (absolute_import, division, print_function)
-__metaclass__ = type
 #
 # Copyright (C) 2017 Lenovo, Inc.
-#
+# (c) 2017, Ansible by Red Hat, inc
 # This file is part of Ansible
 #
 # Ansible is free software: you can redistribute it and/or modify
@@ -20,427 +18,551 @@ __metaclass__ = type
 # You should have received a copy of the GNU General Public License
 # along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
 #
-# Module to send Port channel commands to Lenovo Switches
+# Module to work on Interfaces with Lenovo Switches
 # Lenovo Networking
 #
+
+from __future__ import absolute_import, division, print_function
+__metaclass__ = type
+
+
 ANSIBLE_METADATA = {'metadata_version': '1.1',
                     'status': ['preview'],
                     'supported_by': 'community'}
 
 
-DOCUMENTATION = '''
+DOCUMENTATION = """
 ---
 module: cnos_interface
-author: "Anil Kumar Muraleedharan (@amuraleedhar)"
-short_description: Manage interface configuration on devices running Lenovo CNOS
-description:
-    - This module allows you to work with interface related configurations. The operators used are
-     overloaded to ensure control over switch interface configurations. Apart from the regular device
-     connection related attributes, there are seven interface arguments that will perform further
-     configurations. They are interfaceArg1, interfaceArg2, interfaceArg3, interfaceArg4, interfaceArg5,
-     interfaceArg6, and interfaceArg7. For more details on how to use these arguments, see
-     [Overloaded Variables]. Interface configurations are taken care at six contexts in a regular CLI.
-     They are
-     1. Interface Name - Configurations
-     2. Ethernet Interface - Configurations
-     3. Loopback Interface Configurations
-     4. Management Interface Configurations
-     5. Port Aggregation - Configurations
-     6. VLAN Configurations
-     This module uses SSH to manage network device configuration.
-     The results of the operation will be placed in a directory named 'results'
-     that must be created by the user in their local directory to where the playbook is run.
 version_added: "2.3"
-extends_documentation_fragment: cnos
+author: "Anil Kumar Muraleedharan(@amuraleedhar)"
+short_description: Manage Interface on Lenovo CNOS network devices
+description:
+  - This module provides declarative management of Interfaces
+    on Lenovo CNOS network devices.
+notes:
+  - Tested against CNOS 10.8.1
 options:
-    interfaceRange:
-        description:
-            - This specifies the interface range in which the port channel is envisaged
-        required: Yes
-        default: Null
-    interfaceOption:
+  name:
+    description:
+      - Name of the Interface.
+    required: true
+    version_added: "2.8"
+  description:
+    description:
+      - Description of Interface.
+    version_added: "2.8"
+  enabled:
+    description:
+      - Interface link status.
+    type: bool
+    default: True
+    version_added: "2.8"
+  speed:
+    description:
+      - Interface link speed.
+    version_added: "2.8"
+  mtu:
+    description:
+      - Maximum size of transmit packet.
+    version_added: "2.8"
+  duplex:
+    description:
+      - Interface link status
+    default: auto
+    choices: ['full', 'half', 'auto']
+    version_added: "2.8"
+  tx_rate:
+    description:
+      - Transmit rate in bits per second (bps).
+      - This is state check parameter only.
+      - Supports conditionals, see L(Conditionals in Networking Modules,
+        ../network/user_guide/network_working_with_command_output.html)
+    version_added: "2.8"
+  rx_rate:
+    description:
+      - Receiver rate in bits per second (bps).
+      - This is state check parameter only.
+      - Supports conditionals, see L(Conditionals in Networking Modules,
+        ../network/user_guide/network_working_with_command_output.html)
+    version_added: "2.8"
+  neighbors:
+    description:
+      - Check operational state of given interface C(name) for LLDP neighbor.
+      - The following suboptions are available.
+    version_added: "2.8"
+    suboptions:
+        host:
+          description:
+            - "LLDP neighbor host for given interface C(name)."
+        port:
+          description:
+            - "LLDP neighbor port to which interface C(name) is connected."
+  aggregate:
+    description: List of Interfaces definitions.
+    version_added: "2.8"
+  delay:
+    description:
+      - Time in seconds to wait before checking for the operational state on
+        remote device. This wait is applicable for operational state argument
+        which are I(state) with values C(up)/C(down), I(tx_rate) and I(rx_rate)
+    default: 20
+    version_added: "2.8"
+  state:
+    description:
+      - State of the Interface configuration, C(up) means present and
+        operationally up and C(down) means present and operationally C(down)
+    default: present
+    version_added: "2.8"
+    choices: ['present', 'absent', 'up', 'down']
+  provider:
+    description:
+      - B(Deprecated)
+      - "Starting with Ansible 2.5 we recommend using C(connection: network_cli)."
+      - For more information please see the L(CNOS Platform Options guide, ../network/user_guide/platform_cnos.html).
+      - HORIZONTALLINE
+      - A dict object containing connection details.
+    version_added: "2.8"
+    suboptions:
+      host:
         description:
-            - This specifies the attribute you specify subsequent to interface command
-        required: Yes
-        default: Null
-        choices: [None, ethernet, loopback, mgmt, port-channel, vlan]
-    interfaceArg1:
+          - Specifies the DNS host name or address for connecting to the remote
+            device over the specified transport.  The value of host is used as
+            the destination address for the transport.
+        required: true
+      port:
         description:
-            - This is an overloaded interface first argument. Usage of this argument can be found is the User Guide referenced above.
-        required: Yes
-        default: Null
-        choices: [channel-group, bfd, switchport, description, duplex, flowcontrol, ip, ipv6, lacp, lldp,
-        load-interval, mac, mac-address, mac-learn, microburst-detection, mtu, service, service-policy,
-        shutdown, snmp, spanning-tree, speed, storm-control, vlan, vrrp, port-channel]
-    interfaceArg2:
+          - Specifies the port to use when building the connection to the remote device.
+        default: 22
+      username:
         description:
-            - This is an overloaded interface second argument. Usage of this argument can be found is the User Guide referenced above.
-        required: No
-        default: Null
-        choices: [channel-group number, access or mode or trunk, description, auto or full or half,
-        receive or send, port-priority, suspend-individual, timeout, receive or transmit or trap-notification,
-        tlv-select, Load interval delay in seconds, counter, Name for the MAC Access List, mac-address in HHHH.HHHH.HHHH format,
-        THRESHOLD  Value in unit of buffer cell, <64-9216>  MTU in bytes-<64-9216> for L2 packet,<576-9216> for L3 IPv4 packet,
-        <1280-9216> for L3 IPv6 packet, enter the instance id, input or output, copp-system-policy,
-        type, 1000  or  10000  or   40000 or   auto, broadcast or multicast or unicast, disable or enable or egress-only,
-        Virtual router identifier, destination-ip or destination-mac or destination-port or source-dest-ip or
-        source-dest-mac or source-dest-port or source-interface or source-ip or source-mac or source-port]
-    interfaceArg3:
+          - Configures the username to use to authenticate the connection to
+            the remote device.  This value is used to authenticate
+            the SSH session. If the value is not specified in the task, the
+            value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.
+      password:
         description:
-            - This is an overloaded interface third argument. Usage of this argument can be found is the User Guide referenced above.
-        required: No
-        default: Null
-        choices: [active or on or passive, on or off, LACP port priority, long or short, link-aggregation or
-        mac-phy-status or management-address or max-frame-size or port-description or port-protocol-vlan or
-        port-vlan or power-mdi or protocol-identity or system-capabilities or system-description or system-name
-        or vid-management or vlan-name, counter for load interval, policy input name, all or Copp class name to attach,
-        qos, queueing, Enter the allowed traffic level, ipv6]
-    interfaceArg4:
+          - Specifies the password to use to authenticate the connection to
+            the remote device.   This value is used to authenticate
+            the SSH session. If the value is not specified in the task, the
+            value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.
+      timeout:
         description:
-            - This is an overloaded interface fourth argument. Usage of this argument can be found is the User Guide referenced above.
-        required: No
-        default: Null
-        choices: [key-chain, key-id, keyed-md5 or keyed-sha1 or meticulous-keyed-md5 or meticulous-keyed-sha1 or simple, Interval value in milliseconds,
-         Destination IP (Both IPV4 and IPV6),in or out, MAC address, Time-out value in seconds, class-id, request, Specify the IPv4 address,
-         OSPF area ID as a decimal value, OSPF area ID in IP address format, anycast or secondary, ethernet, vlan,
-         MAC (hardware) address in HHHH.HHHH.HHHH format,
-         Load interval delay in seconds, Specify policy input name, input or output, cost, port-priority, BFD minimum receive interval,source-interface]
-    interfaceArg5:
+          - Specifies the timeout in seconds for communicating with the network device
+            for either connecting or sending commands.  If the timeout is
+            exceeded before the operation is completed, the module will error.
+        default: 10
+      ssh_keyfile:
         description:
-            - This is an overloaded interface fifth argument. Usage of this argument can be found is the User Guide referenced above.
-        required: No
-        default: Null
-        choices: [name of key-chain,  key-Id Value, key-chain , key-id, BFD minimum receive interval, Value of Hello Multiplier,
-        admin-down or multihop or non-persistent, Vendor class-identifier name, bootfile-name or host-name or log-server or ntp-server or tftp-server-name,
-        Slot/chassis number, Vlan interface, Specify policy input name, Port path cost or auto, Port priority increments of 32]
-    interfaceArg6:
+          - Specifies the SSH key to use to authenticate the connection to
+            the remote device.   This value is the path to the
+            key used to authenticate the SSH session. If the value is not specified
+            in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE)
+            will be used instead.
+      authorize:
         description:
-            - This is an overloaded interface sixth argument. Usage of this argument can be found is the User Guide referenced above.
-        required: No
-        default: Null
-        choices: [Authentication key string, name of key-chain, key-Id Value, Value of Hello Multiplier, admin-down or non-persistent]
-    interfaceArg7:
+          - Instructs the module to enter privileged mode on the remote device
+            before sending any commands.  If not specified, the device will
+            attempt to execute all commands in non-privileged mode. If the value
+            is not specified in the task, the value of environment variable
+            C(ANSIBLE_NET_AUTHORIZE) will be used instead.
+        type: bool
+        default: 'no'
+      auth_pass:
         description:
-            - This is an overloaded interface seventh argument. Usage of this argument can be found is the User Guide referenced above.
-        required: No
-        default: Null
-        choices: [Authentication key string, admin-down]
-
-'''
-EXAMPLES = '''
-Tasks : The following are examples of using the module cnos_interface. These are written in the main.yml file of the tasks directory.
----
-- name: Test Interface Ethernet - channel-group
-  cnos_interface:
-      deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-      outputfile: "./results/test_interface_{{ inventory_hostname }}_output.txt"
-      interfaceOption: 'ethernet'
-      interfaceRange: 1
-      interfaceArg1: "channel-group"
-      interfaceArg2: 33
-      interfaceArg3: "on"
-
-- name: Test Interface Ethernet - switchport
-  cnos_interface:
-      deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-      outputfile: "./results/test_interface_{{ inventory_hostname }}_output.txt"
-      interfaceOption: 'ethernet'
-      interfaceRange: 33
-      interfaceArg1: "switchport"
-      interfaceArg2: "access"
-      interfaceArg3: 33
-
-- name: Test Interface Ethernet - switchport mode
-  cnos_interface:
-      deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-      outputfile: "./results/test_interface_{{ inventory_hostname }}_output.txt"
-      interfaceOption: 'ethernet'
-      interfaceRange: 33
-      interfaceArg1: "switchport"
-      interfaceArg2: "mode"
-      interfaceArg3: "access"
-
-- name: Test Interface Ethernet  - Description
-  cnos_interface:
-      deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-      outputfile: "./results/test_interface_{{ inventory_hostname }}_output.txt"
-      interfaceOption: 'ethernet'
-      interfaceRange: 33
-      interfaceArg1: "description"
-      interfaceArg2: "Hentammoo "
-
-- name: Test Interface Ethernet - Duplex
+          - Specifies the password to use if required to enter privileged mode
+            on the remote device.  If I(authorize) is false, then this argument
+            does nothing. If the value is not specified in the task, the value of
+            environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead.
+"""
+
+EXAMPLES = """
+- name: configure interface
   cnos_interface:
-      deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-      outputfile: "./results/test_interface_{{ inventory_hostname }}_output.txt"
-      interfaceOption: 'ethernet'
-      interfaceRange: 1
-      interfaceArg1: "duplex"
-      interfaceArg2: "auto"
-
-- name: Test Interface Ethernet - flowcontrol
-  cnos_interface:
-      deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-      outputfile: "./results/test_interface_{{ inventory_hostname }}_output.txt"
-      interfaceOption: 'ethernet'
-      interfaceRange: 33
-      interfaceArg1: "flowcontrol"
-      interfaceArg2: "send"
-      interfaceArg3: "off"
-
-- name: Test Interface Ethernet - lacp
-  cnos_interface:
-      deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-      outputfile: "./results/test_interface_{{ inventory_hostname }}_output.txt"
-      interfaceOption: 'ethernet'
-      interfaceRange: 33
-      interfaceArg1: "lacp"
-      interfaceArg2: "port-priority"
-      interfaceArg3: 33
-
-- name: Test Interface Ethernet  - lldp
-  cnos_interface:
-      deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-      outputfile: "./results/test_interface_{{ inventory_hostname }}_output.txt"
-      interfaceOption: 'ethernet'
-      interfaceRange: 33
-      interfaceArg1: "lldp"
-      interfaceArg2: "tlv-select"
-      interfaceArg3: "max-frame-size"
-
-- name: Test Interface Ethernet - load-interval
-  cnos_interface:
-      deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-      outputfile: "./results/test_interface_{{ inventory_hostname }}_output.txt"
-      interfaceOption: 'ethernet'
-      interfaceRange: 33
-      interfaceArg1: "load-interval"
-      interfaceArg2: "counter"
-      interfaceArg3: 2
-      interfaceArg4: 33
-
-- name: Test Interface Ethernet - mac
-  cnos_interface:
-      deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-      outputfile: "./results/test_interface_{{ inventory_hostname }}_output.txt"
-      interfaceOption: 'ethernet'
-      interfaceRange: 33
-      interfaceArg1: "mac"
-      interfaceArg2: "copp-system-acl-vlag-hc"
-
-- name: Test Interface Ethernet - microburst-detection
-  cnos_interface:
-      deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-      outputfile: "./results/test_interface_{{ inventory_hostname }}_output.txt"
-      interfaceOption: 'ethernet'
-      interfaceRange: 33
-      interfaceArg1: "microburst-detection"
-      interfaceArg2: 25
-
-- name: Test Interface Ethernet  - mtu
-  cnos_interface:
-      deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-      outputfile: "./results/test_interface_{{ inventory_hostname }}_output.txt"
-      interfaceOption: 'ethernet'
-      interfaceRange: 33
-      interfaceArg1: "mtu"
-      interfaceArg2: 66
-
-- name: Test Interface Ethernet - service-policy
-  cnos_interface:
-      deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-      outputfile: "./results/test_interface_{{ inventory_hostname }}_output.txt"
-      interfaceOption: 'ethernet'
-      interfaceRange: 33
-      interfaceArg1: "service-policy"
-      interfaceArg2: "input"
-      interfaceArg3: "Anil"
-
-- name: Test Interface Ethernet - speed
-  cnos_interface:
-      deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-      outputfile: "./results/test_interface_{{ inventory_hostname }}_output.txt"
-      interfaceOption: 'ethernet'
-      interfaceRange: 1
-      interfaceArg1: "speed"
-      interfaceArg2: "auto"
-
-- name: Test Interface Ethernet - storm
-  cnos_interface:
-      deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-      outputfile: "./results/test_interface_{{ inventory_hostname }}_output.txt"
-      interfaceOption: 'ethernet'
-      interfaceRange: 33
-      interfaceArg1: "storm-control"
-      interfaceArg2: "broadcast"
-      interfaceArg3: 12.5
-
-- name: Test Interface Ethernet - vlan
+      name: Ethernet1/33
+      description: test-interface
+      speed: 100
+      duplex: half
+      mtu: 999
+
+- name: remove interface
   cnos_interface:
-      deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-      outputfile: "./results/test_interface_{{ inventory_hostname }}_output.txt"
-      interfaceOption: 'ethernet'
-      interfaceRange: 33
-      interfaceArg1: "vlan"
-      interfaceArg2: "disable"
-
-- name: Test Interface Ethernet - vrrp
+    name: loopback3
+    state: absent
+
+- name: make interface up
   cnos_interface:
-      deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-      outputfile: "./results/test_interface_{{ inventory_hostname }}_output.txt"
-      interfaceOption: 'ethernet'
-      interfaceRange: 33
-      interfaceArg1: "vrrp"
-      interfaceArg2: 33
-
-- name: Test Interface Ethernet - spanning tree1
+    name: Ethernet1/33
+    enabled: True
+
+- name: make interface down
   cnos_interface:
-      deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-      outputfile: "./results/test_interface_{{ inventory_hostname }}_output.txt"
-      interfaceOption: 'ethernet'
-      interfaceRange: 33
-      interfaceArg1: "spanning-tree"
-      interfaceArg2: "bpduguard"
-      interfaceArg3: "enable"
-
-- name: Test Interface Ethernet - spanning tree 2
+    name: Ethernet1/33
+    enabled: False
+
+- name: Check intent arguments
   cnos_interface:
-      deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-      outputfile: "./results/test_interface_{{ inventory_hostname }}_output.txt"
-      interfaceOption: 'ethernet'
-      interfaceRange: 33
-      interfaceArg1: "spanning-tree"
-      interfaceArg2: "mst"
-      interfaceArg3: "33-35"
-      interfaceArg4: "cost"
-      interfaceArg5: 33
-
-- name: Test Interface Ethernet - ip1
+    name: Ethernet1/33
+    state: up
+    tx_rate: ge(0)
+    rx_rate: le(0)
+
+- name: Check neighbors intent arguments
   cnos_interface:
-      deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-      outputfile: "./results/test_interface_{{ inventory_hostname }}_output.txt"
-      interfaceOption: 'ethernet'
-      interfaceRange: 33
-      interfaceArg1: "ip"
-      interfaceArg2: "access-group"
-      interfaceArg3: "anil"
-      interfaceArg4: "in"
-
-- name: Test Interface Ethernet - ip2
+    name: Ethernet1/33
+    neighbors:
+    - port: eth0
+      host: netdev
+
+- name: Config + intent
   cnos_interface:
-      deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-      outputfile: "./results/test_interface_{{ inventory_hostname }}_output.txt"
-      interfaceOption: 'ethernet'
-      interfaceRange: 33
-      interfaceArg1: "ip"
-      interfaceArg2: "port"
-      interfaceArg3: "anil"
-
-- name: Test Interface Ethernet - bfd
+    name: Ethernet1/33
+    enabled: False
+    state: down
+
+- name: Add interface using aggregate
   cnos_interface:
-      deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-      outputfile: "./results/test_interface_{{ inventory_hostname }}_output.txt"
-      interfaceOption: 'ethernet'
-      interfaceRange: 33
-      interfaceArg1: "bfd"
-      interfaceArg2: "interval"
-      interfaceArg3: 55
-      interfaceArg4: 55
-      interfaceArg5: 33
-
-- name: Test Interface Ethernet - bfd
+    aggregate:
+    - { name: Ethernet1/33, mtu: 256, description: test-interface-1 }
+    - { name: Ethernet1/44, mtu: 516, description: test-interface-2 }
+    duplex: full
+    speed: 100
+    state: present
+
+- name: Delete interface using aggregate
   cnos_interface:
-      deviceType: "{{ hostvars[inventory_hostname]['deviceType'] }}"
-      outputfile: "./results/test_interface_{{ inventory_hostname }}_output.txt"
-      interfaceOption: 'ethernet'
-      interfaceRange: 33
-      interfaceArg1: "bfd"
-      interfaceArg2: "ipv4"
-      interfaceArg3: "authentication"
-      interfaceArg4: "meticulous-keyed-md5"
-      interfaceArg5: "key-chain"
-      interfaceArg6: "mychain"
-
-'''
-RETURN = '''
-msg:
-  description: Success or failure message
-  returned: always
-  type: str
-  sample: "Interface configurations accomplished."
-'''
-
-import sys
-try:
-    import paramiko
-    HAS_PARAMIKO = True
-except ImportError:
-    HAS_PARAMIKO = False
-import time
-import socket
-import array
-import json
-import time
+    aggregate:
+    - name: loopback3
+    - name: loopback6
+    state: absent
+"""
+
+RETURN = """
+commands:
+  description: The list of configuration mode commands to send to the device.
+  returned: always, except for the platforms that use Netconf transport to
+            manage the device.
+  type: list
+  sample:
+  - interface Ethernet1/33
+  - description test-interface
+  - duplex half
+  - mtu 512
+"""
 import re
-try:
-    from ansible.module_utils.network.cnos import cnos
-    HAS_LIB = True
-except Exception:
-    HAS_LIB = False
-from ansible.module_utils.basic import AnsibleModule
-from collections import defaultdict
 
+from copy import deepcopy
+from time import sleep
 
-def main():
-    module = AnsibleModule(
-        argument_spec=dict(
-            outputfile=dict(required=True),
-            host=dict(required=False),
-            username=dict(required=False),
-            password=dict(required=False, no_log=True),
-            enablePassword=dict(required=False, no_log=True),
-            deviceType=dict(required=True),
-            interfaceRange=dict(required=False),
-            interfaceOption=dict(required=False),
-            interfaceArg1=dict(required=True),
-            interfaceArg2=dict(required=False),
-            interfaceArg3=dict(required=False),
-            interfaceArg4=dict(required=False),
-            interfaceArg5=dict(required=False),
-            interfaceArg6=dict(required=False),
-            interfaceArg7=dict(required=False),),
-        supports_check_mode=False)
-
-    interfaceOption = module.params['interfaceOption']
-    outputfile = module.params['outputfile']
-
-    output = ''
-    # Send the CLi command
-    if(interfaceOption is None or interfaceOption == ""):
-        output = output + cnos.interfaceConfig(module, "(config)#", None, None)
-    elif(interfaceOption == "ethernet"):
-        output = output + cnos.interfaceConfig(module, "(config)#", "ethernet", None)
-    elif(interfaceOption == "loopback"):
-        output = output + cnos.interfaceConfig(module, "(config)#", "loopback", None)
-    elif(interfaceOption == "mgmt"):
-        output = output + cnos.interfaceConfig(module, "(config)#", "mgmt", None)
-    elif(interfaceOption == "port-channel"):
-        output = output + cnos.interfaceConfig(module, "(config)#", "port-channel", None)
-    elif(interfaceOption == "vlan"):
-        output = output + cnos.interfaceConfig(module, "(config)#", "vlan", None)
+from ansible.module_utils._text import to_text
+from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.connection import exec_command
+from ansible.module_utils.network.cnos.cnos import get_config, load_config
+from ansible.module_utils.network.cnos.cnos import cnos_argument_spec
+from ansible.module_utils.network.cnos.cnos import debugOutput, check_args
+from ansible.module_utils.network.common.config import NetworkConfig
+from ansible.module_utils.network.common.utils import conditional
+from ansible.module_utils.network.common.utils import remove_default_spec
+
+
+def validate_mtu(value, module):
+    if value and not 64 <= int(value) <= 9216:
+        module.fail_json(msg='mtu must be between 64 and 9216')
+
+
+def validate_param_values(module, obj, param=None):
+    if param is None:
+        param = module.params
+    for key in obj:
+        # validate the param value (if validator func exists)
+        validator = globals().get('validate_%s' % key)
+        if callable(validator):
+            validator(param.get(key), module)
+
+
+def parse_shutdown(configobj, name):
+    cfg = configobj['interface %s' % name]
+    cfg = '\n'.join(cfg.children)
+    match = re.search(r'^shutdown', cfg, re.M)
+    if match:
+        return True
     else:
-        output = "Invalid interface option \n"
-    # Save it into the file
-    file = open(outputfile, "a")
-    file.write(output)
-    file.close()
-
-    # Logic to check when changes occur or not
-    errorMsg = cnos.checkOutputForError(output)
-    if(errorMsg is None):
-        module.exit_json(changed=True, msg="Interface Configuration is Accomplished")
+        return False
+
+
+def parse_config_argument(configobj, name, arg=None):
+    cfg = configobj['interface %s' % name]
+    cfg = '\n'.join(cfg.children)
+    match = re.search(r'%s (.+)$' % arg, cfg, re.M)
+    if match:
+        return match.group(1)
+
+
+def search_obj_in_list(name, lst):
+    for o in lst:
+        if o['name'] == name:
+            return o
+
+    return None
+
+
+def add_command_to_interface(interface, cmd, commands):
+    if interface not in commands:
+        commands.append(interface)
+    commands.append(cmd)
+
+
+def map_config_to_obj(module):
+    config = get_config(module)
+    configobj = NetworkConfig(indent=1, contents=config)
+
+    match = re.findall(r'^interface (\S+)', config, re.M)
+    if not match:
+        return list()
+
+    instances = list()
+
+    for item in set(match):
+        obj = {
+            'name': item,
+            'description': parse_config_argument(configobj, item, 'description'),
+            'speed': parse_config_argument(configobj, item, 'speed'),
+            'duplex': parse_config_argument(configobj, item, 'duplex'),
+            'mtu': parse_config_argument(configobj, item, 'mtu'),
+            'disable': True if parse_shutdown(configobj, item) else False,
+            'state': 'present'
+        }
+        instances.append(obj)
+    return instances
+
+
+def map_params_to_obj(module):
+    obj = []
+    aggregate = module.params.get('aggregate')
+    if aggregate:
+        for item in aggregate:
+            for key in item:
+                if item.get(key) is None:
+                    item[key] = module.params[key]
+
+            validate_param_values(module, item, item)
+            d = item.copy()
+
+            if d['enabled']:
+                d['disable'] = False
+            else:
+                d['disable'] = True
+
+            obj.append(d)
+
     else:
-        module.fail_json(msg=errorMsg)
+        params = {
+            'name': module.params['name'],
+            'description': module.params['description'],
+            'speed': module.params['speed'],
+            'mtu': module.params['mtu'],
+            'duplex': module.params['duplex'],
+            'state': module.params['state'],
+            'delay': module.params['delay'],
+            'tx_rate': module.params['tx_rate'],
+            'rx_rate': module.params['rx_rate'],
+            'neighbors': module.params['neighbors']
+        }
+
+        validate_param_values(module, params)
+        if module.params['enabled']:
+            params.update({'disable': False})
+        else:
+            params.update({'disable': True})
+
+        obj.append(params)
+    return obj
+
+
+def map_obj_to_commands(updates):
+    commands = list()
+    want, have = updates
+
+    args = ('speed', 'description', 'duplex', 'mtu')
+    for w in want:
+        name = w['name']
+        disable = w['disable']
+        state = w['state']
+
+        obj_in_have = search_obj_in_list(name, have)
+        interface = 'interface ' + name
+        if state == 'absent' and obj_in_have:
+            commands.append('no ' + interface)
+        elif state in ('present', 'up', 'down'):
+            if obj_in_have:
+                for item in args:
+                    candidate = w.get(item)
+                    running = obj_in_have.get(item)
+                    if candidate != running:
+                        if candidate:
+                            cmd = item + ' ' + str(candidate)
+                            add_command_to_interface(interface, cmd, commands)
+
+                if disable and not obj_in_have.get('disable', False):
+                    add_command_to_interface(interface, 'shutdown', commands)
+                elif not disable and obj_in_have.get('disable', False):
+                    add_command_to_interface(interface, 'no shutdown', commands)
+            else:
+                commands.append(interface)
+                for item in args:
+                    value = w.get(item)
+                    if value:
+                        commands.append(item + ' ' + str(value))
+
+                if disable:
+                    commands.append('no shutdown')
+    return commands
+
+
+def check_declarative_intent_params(module, want, result):
+    failed_conditions = []
+    have_neighbors_lldp = None
+    for w in want:
+        want_state = w.get('state')
+        want_tx_rate = w.get('tx_rate')
+        want_rx_rate = w.get('rx_rate')
+        want_neighbors = w.get('neighbors')
+
+        if want_state not in ('up', 'down') and not want_tx_rate and not want_rx_rate and not want_neighbors:
+            continue
+
+        if result['changed']:
+            sleep(w['delay'])
+
+        command = 'show interface %s brief' % w['name']
+        rc, out, err = exec_command(module, command)
+        if rc != 0:
+            module.fail_json(msg=to_text(err, errors='surrogate_then_replace'), command=command, rc=rc)
+        if want_state in ('up', 'down'):
+            state_data = out.strip().lower().split(w['name'])
+            have_state = None
+            have_state = state_data[1].split()[3]
+            if have_state is None or not conditional(want_state, have_state.strip()):
+                failed_conditions.append('state ' + 'eq(%s)' % want_state)
+
+        command = 'show interface %s' % w['name']
+        rc, out, err = exec_command(module, command)
+        have_tx_rate = None
+        have_rx_rate = None
+        rates = out.splitlines()
+        for s in rates:
+            s = s.strip()
+            if 'output rate' in s and 'input rate' in s:
+                sub = s.split()
+                if want_tx_rate:
+                    have_tx_rate = sub[8]
+                    if have_tx_rate is None or not conditional(want_tx_rate, have_tx_rate.strip(), cast=int):
+                        failed_conditions.append('tx_rate ' + want_tx_rate)
+                if want_rx_rate:
+                    have_rx_rate = sub[2]
+                    if have_rx_rate is None or not conditional(want_rx_rate, have_rx_rate.strip(), cast=int):
+                        failed_conditions.append('rx_rate ' + want_rx_rate)
+        if want_neighbors:
+            have_host = []
+            have_port = []
+
+            # Process LLDP neighbors
+            if have_neighbors_lldp is None:
+                rc, have_neighbors_lldp, err = exec_command(module, 'show lldp neighbors detail')
+                if rc != 0:
+                    module.fail_json(msg=to_text(err,
+                                     errors='surrogate_then_replace'),
+                                     command=command, rc=rc)
+
+            if have_neighbors_lldp:
+                lines = have_neighbors_lldp.strip().split('Local Port ID: ')
+                for line in lines:
+                    field = line.split('\n')
+                    if field[0].strip() == w['name']:
+                        for item in field:
+                            if item.startswith('System Name:'):
+                                have_host.append(item.split(':')[1].strip())
+                            if item.startswith('Port Description:'):
+                                have_port.append(item.split(':')[1].strip())
+
+            for item in want_neighbors:
+                host = item.get('host')
+                port = item.get('port')
+                if host and host not in have_host:
+                    failed_conditions.append('host ' + host)
+                if port and port not in have_port:
+                    failed_conditions.append('port ' + port)
+    return failed_conditions
+
+
+def main():
+    """ main entry point for module execution
+    """
+    neighbors_spec = dict(
+        host=dict(),
+        port=dict()
+    )
+
+    element_spec = dict(
+        name=dict(),
+        description=dict(),
+        speed=dict(),
+        mtu=dict(),
+        duplex=dict(default='auto', choices=['full', 'half', 'auto']),
+        enabled=dict(default=True, type='bool'),
+        tx_rate=dict(),
+        rx_rate=dict(),
+        neighbors=dict(type='list', elements='dict', options=neighbors_spec),
+        delay=dict(default=20, type='int'),
+        state=dict(default='present',
+                   choices=['present', 'absent', 'up', 'down'])
+    )
+
+    aggregate_spec = deepcopy(element_spec)
+    aggregate_spec['name'] = dict(required=True)
+
+    # remove default in aggregate spec, to handle common arguments
+    remove_default_spec(aggregate_spec)
+
+    argument_spec = dict(
+        aggregate=dict(type='list', elements='dict', options=aggregate_spec),
+    )
+
+    argument_spec.update(element_spec)
+    argument_spec.update(cnos_argument_spec)
+
+    required_one_of = [['name', 'aggregate']]
+    mutually_exclusive = [['name', 'aggregate']]
+
+    module = AnsibleModule(argument_spec=argument_spec,
+                           required_one_of=required_one_of,
+                           mutually_exclusive=mutually_exclusive,
+                           supports_check_mode=True)
+    warnings = list()
+    check_args(module, warnings)
+
+    result = {'changed': False}
+    if warnings:
+        result['warnings'] = warnings
+
+    want = map_params_to_obj(module)
+    have = map_config_to_obj(module)
+
+    commands = map_obj_to_commands((want, have))
+    result['commands'] = commands
+
+    if commands:
+        if not module.check_mode:
+            load_config(module, commands)
+        result['changed'] = True
+
+    failed_conditions = check_declarative_intent_params(module, want, result)
+
+    if failed_conditions:
+        msg = 'One or more conditional statements have not been satisfied'
+        module.fail_json(msg=msg, failed_conditions=failed_conditions)
+
+    module.exit_json(**result)
 
 
 if __name__ == '__main__':
diff --git a/test/integration/targets/cnos_ethernet/README.md b/test/integration/targets/cnos_ethernet/README.md
deleted file mode 100644
index ec5c1b3499..0000000000
--- a/test/integration/targets/cnos_ethernet/README.md
+++ /dev/null
@@ -1,120 +0,0 @@
-# Ansible Role: cnos_ethernet_sample - Performs switch ethernet port configuration and state management
----
-<add role description below>
-
-This role is an example of using the *cnos_interface.py* Lenovo module in the context of CNOS switch configuration. This module allows you to work with interface related configurations. The operators used are overloaded to ensure control over switch interface configurations, such as ethernet ports, loopback interfaces, VLANs, and the management interface.
-
-Apart from the regular device connection related attributes, there are seven interface arguments that will perform further configurations. They are *interfaceArg1*, *interfaceArg2*, *interfaceArg3*, *interfaceArg4*, *interfaceArg5*, *interfaceArg6*, and *interfaceArg7*.
-
-The results of the operation can be viewed in *results* directory.
-
-For more details, see [Lenovo modules for Ansible: cnos_interface](http://systemx.lenovofiles.com/help/index.jsp?topic=%2Fcom.lenovo.switchmgt.ansible.doc%2Fcnos_interface.html&cp=0_3_1_0_4_12).
-
-
-## Requirements
----
-<add role requirements information below>
-
-- Ansible version 2.2 or later ([Ansible installation documentation](http://docs.ansible.com/ansible/intro_installation.html))
-- Lenovo switches running CNOS version 10.2.1.0 or later
-- an SSH connection to the Lenovo switch (SSH must be enabled on the network device)
-
-
-## Role Variables
----
-<add role variables information below>
-
-Available variables are listed below, along with description.
-
-The following are mandatory inventory variables:
-
-Variable | Description
---- | ---
-`ansible_connection` | Has to be `network_cli`
-`ansible_network_os` | Has to be `cnos`
-`ansible_ssh_user` | Specifies the username used to log into the switch
-`ansible_ssh_pass` | Specifies the password used to log into the switch
-`enablePassword` | Configures the password used to enter Global Configuration command mode on the switch (this is an optional parameter)
-`hostname` | Searches the hosts file at */etc/ansible/hosts* and identifies the IP address of the switch on which the role is going to be applied
-`deviceType` | Specifies the type of device from where the configuration will be backed up (**g8272_cnos** - G8272, **g8296_cnos** - G8296, **g8332_cnos** - G8332, **NE10032** - NE10032, **NE1072T** - NE1072T, **NE1032** - NE1032, **NE1032T** - NE1032T, **NE2572** - NE2572, **NE0152T** - NE0152T)
-
-The values of the variables used need to be modified to fit the specific scenario in which you are deploying the solution. To change the values of the variables, you need to visits the *vars* directory of each role and edit the *main.yml* file located there. The values stored in this file will be used by Ansible when the template is executed.
-
-The syntax of *main.yml* file for variables is the following:
-
-```
-<template variable>:<value>
-```
-
-You will need to replace the `<value>` field with the value that suits your topology. The `<template variable>` fields are taken from the template and it is recommended that you leave them unchanged.
-
-Variable | Description
---- | ---
-`interfaceOption` | Specifies the type of the interface that will be configured (**ethernet** - ethernet port, **loopback** - loopback interface, **vlan** - VLAN, **mgmt** - management interface, **port-aggregation** - Link Aggregation Group)
-`interfaceRange` | Specifies the interface range that will be configured
-`interfaceArg1` | This is an overloaded BGP variable. Please refer to the [cnos_interface module documentation](http://ralfss28.labs.lenovo.com:5555/help/topic/com.lenovo.switchmgt.ansible.doc/cnos_interface.html?cp=0_3_1_0_2_12) for detailed information on usage. The values of these variables depend on the configuration context and the choices are the following: **aggregation-group**, **bfd**, **bridge-port**, **description**, **duplex**, **flowcontrol**, **ip**, **ipv6**, **lacp**, **lldp**, **load-interval**, **mac**, **mac-address**, **mac-learn**, **microburst-detection**, **mtu**, **service**, **service-policy**, **shutdown**, **snmp**, **spanning-tree**, **speed**, **storm-control**, **vlan**, **vrrp**, **port-aggregation**.
-`interfaceArg2` | This is an overloaded BGP variable. Please refer to the [cnos_interface module documentation](http://ralfss28.labs.lenovo.com:5555/help/topic/com.lenovo.switchmgt.ansible.doc/cnos_interface.html?cp=0_3_1_0_2_12) for detailed information on usage. The values of these variables depend on the configuration context and the choices are the following: specify a LAG number, **authentication**, **echo**, **ipv4**, **ipv6**, **interval**, **neighbor**, **access**, **mode**, **trunk**, interface description, **auto**, **full**, **half**, **receive**, **send**, **access-group**, **arp**, **dhcp**, **port**, **port-unreachable**, **redirects**, **router**, **unreachables**, **address**, **link-local**, **port-priority**, **suspend-individual**, **timeout**, **transmit**, **trap-notification**, **tlv-select**, load interval delay, **counter**, name for the MAC access group, MAC address in XXXX.XXXX.XXXX format, threshold value, MTU in bytes, instance ID to map to the EVC, **input**, **output**, **copp-system-policy**, **type**, **bpdufilter**, **bpduguard**, **cost**, **enable**, **disable**, **guard**, **link-type**, **mst**, **port**, **port-priority**, **vlan**, **auto**, 1000, 10000, 40000, **broadcast**, **unicast**, **multicast**, **egress-only**, **destination-ip**, **destination-mac**, **destination-port**, **source-dest-ip**, **source-dest-mac**, **source-dest-port**, **source-interface**, **source-ip**, **source-mac**, **source-port**.
-`interfaceArg3` | This is an overloaded BGP variable. Please refer to the [cnos_interface module documentation](http://ralfss28.labs.lenovo.com:5555/help/topic/com.lenovo.switchmgt.ansible.doc/cnos_interface.html?cp=0_3_1_0_2_12) for detailed information on usage. The values of these variables depend on the configuration context and the choices are the following: **active**, **passive**, **on**, **keyed-md5**, **keyed-sha1**, **meticulous-keyed-md5**, **meticulous-keyed-sha1**, **simple**, **authentication**, **echo**, **interval**, interval value, source IP address, **off**, ACL name, IP address of the ARP entry, **timeout**, **client**, **relay**, **area**, **multi-area**, **dhcp**, IPv6 address, IPv6 address of the DHCP Relay, Neighbor IPv6 address, LACP port priority, **long**, **short**, **link-aggregation**, **mac-phy-status**, **management-address**, **max-frame-size**, **port-description**, **port-protocol-vlan**, **port-vlan**, **power-mdi**, **protocol-identity**, **system-capabilities**, **system-description**, **system-name**, **vid-management**, **vlan-name**, counter for the load interval, name of the policy to attach, **all**, COPP class name to attach, **qos**, **queuing**, **enable**, **disable**, **auto**, port path cost, **loop**, **root**, **auto**, **point-to-point**, **shared**, MSTP instance range, port priority value, specify VLAN, allowed traffic level, **ipv6**, **source-interface**.
-`interfaceArg4` | This is an overloaded BGP variable. Please refer to the [cnos_interface module documentation](http://ralfss28.labs.lenovo.com:5555/help/topic/com.lenovo.switchmgt.ansible.doc/cnos_interface.html?cp=0_3_1_0_2_12) for detailed information on usage. The values of these variables depend on the configuration context and the choices are the following: **key-chain**, **key-id**, **keyed-md5**, **keyed-sha1**, **meticulous-keyed-md5**, **meticulous-keyed-sha1**, **simple**, interval value, BFD minimum receive interval, destination IP address, **in**, **out**, MAC address in XXXX.XXXX.XXXX format, timeout value, **class-id**, **request**, IPv4 address of the DHCP Relay, OSPF area ID, **anycast**, **secondary**, **ethernet**, **vlan**, load interval delay, name of the QoS policy to attach, **input**, **output**, **cost**, **port-priority**.
-`interfaceArg5` | This is an overloaded BGP variable. Please refer to the [cnos_interface module documentation](http://ralfss28.labs.lenovo.com:5555/help/topic/com.lenovo.switchmgt.ansible.doc/cnos_interface.html?cp=0_3_1_0_2_12) for detailed information on usage. The values of these variables depend on the configuration context and the choices are the following: name of the key chain, key ID, **key-chain**, **key-id**, BFD minimum receive interval, Hello multiplier value, **admin-down**, **multihop**, **non-persistent**, vendor class ID name, **bootfile-name**, **host-name**, **log-server**, **ntp-server**, **tftp-server-name**, specifiy ethernet port, specify VLAN, name of the QoS policy to attach, **auto**, port path cost, port priority value. 
-`interfaceArg6` | This is an overloaded BGP variable. Please refer to the [cnos_interface module documentation](http://ralfss28.labs.lenovo.com:5555/help/topic/com.lenovo.switchmgt.ansible.doc/cnos_interface.html?cp=0_3_1_0_2_12) for detailed information on usage. The values of these variables depend on the configuration context and the choices are the following: authentication key string, name of the key chain, key ID, Hello multiplier value, **admin-down**, **non-persistent**.
-`interfaceArg7` | This is an overloaded BGP variable. Please refer to the [cnos_interface module documentation](http://ralfss28.labs.lenovo.com:5555/help/topic/com.lenovo.switchmgt.ansible.doc/cnos_interface.html?cp=0_3_1_0_2_12) for detailed information on usage. The values of these variables depend on the configuration context and the choices are the following: authentication key string, **admin-down**.
-
-
-## Dependencies
----
-<add dependencies information below>
-
-- username.iptables - Configures the firewall and blocks all ports except those needed for web server and SSH access.
-- username.common - Performs common server configuration.
-- cnos_interface.py - This modules needs to be present in the *library* directory of the role.
-- cnos.py - This module needs to be present in the PYTHONPATH environment variable set in the Ansible system.
-- /etc/ansible/hosts - You must edit the */etc/ansible/hosts* file with the device information of the switches designated as leaf switches. You may refer to *cnos_interface_sample_hosts* for a sample configuration.
-
-Ansible keeps track of all network elements that it manages through a hosts file. Before the execution of a playbook, the hosts file must be set up.
-
-Open the */etc/ansible/hosts* file with root privileges. Most of the file is commented out by using **#**. You can also comment out the entries you will be adding by using **#**. You need to copy the content of the hosts file for the role into the */etc/ansible/hosts* file. The sample hosts file for the role is located in the main directory.
-
-```
-[cnos_ethernet_sample]
-10.241.107.39   ansible_network_os=cnos ansible_ssh_user=<username> ansible_ssh_pass=<password> deviceType=g8272_cnos
-10.241.107.40   ansible_network_os=cnos ansible_ssh_user=<username> ansible_ssh_pass=<password> deviceType=g8272_cnos 
-```
-    
-**Note:** You need to change the IP addresses to fit your specific topology. You also need to change the `<username>` and `<password>` to the appropriate values used to log into the specific Lenovo network devices.
-
-
-## Example Playbook
----
-<add playbook samples below>
-
-To execute an Ansible playbook, use the following command:
-
-```
-ansible-playbook cnos_interface_sample.yml -vvv
-```
-
-`-vvv` is an optional verbos command that helps identify what is happening during playbook execution. The playbook for each role is located in the main directory of the solution.
-
-```
- - name: Module to  do Interface Ethernet configurations
-   hosts: cnos_ethernet_sample
-   gather_facts: no
-   connection: local
-   roles:
-    - cnos_ethernet_sample
-```
-
-
-## License
----
-<add license information below>
-Copyright (C) 2017 Lenovo, Inc.
-
-This file is part of Ansible
-
-Ansible is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
-
-Ansible is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
\ No newline at end of file
diff --git a/test/integration/targets/cnos_ethernet/tasks/main.yml b/test/integration/targets/cnos_ethernet/tasks/main.yml
deleted file mode 100644
index 237fd6fdcf..0000000000
--- a/test/integration/targets/cnos_ethernet/tasks/main.yml
+++ /dev/null
@@ -1,98 +0,0 @@
-### This contain sample execution tasks
----
-- name: Test Interface Ethernet - aggregation-group
-  cnos_interface:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt  interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
-  with_items: "{{test_ethernet_data1}}"
-
-#- name: Test Interface Ethernet - aggregation-group - Interface Range
-#  cnos_interface:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt  interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
-#  with_items: "{{test_ethernet_data24}}"
-
-- name: Test Interface Ethernet - bridge-port
-  cnos_interface:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt   interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
-  with_items: "{{test_ethernet_data2}}"
-
-- name: Test Interface Ethernet - bridgeport mode
-  cnos_interface:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt  interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
-  with_items: "{{test_ethernet_data3}}"
-
-- name: Test Interface Ethernet  - Description
-  cnos_interface:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt  interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
-  with_items: "{{test_ethernet_data4}}"
-
-- name: Test Interface Ethernet - Duplex
-  cnos_interface:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt  interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
-  with_items: "{{test_ethernet_data5}}"
-
-- name: Test Interface Ethernet - flowcontrol
-  cnos_interface:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt  interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
-  with_items: "{{test_ethernet_data6}}"
-
-- name: Test Interface Ethernet - lacp
-  cnos_interface:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt  interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
-  with_items: "{{test_ethernet_data7}}"
-
-- name: Test Interface Ethernet  - lldp
-  cnos_interface:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt  interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
-  with_items: "{{test_ethernet_data8}}"
-
-- name: Test Interface Ethernet - load-interval
-  cnos_interface:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt  interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}' interfaceArg4='{{item.interfaceArg4}}'
-  with_items: "{{test_ethernet_data9}}"
-
-#- name: Test Interface Ethernet - mac
-#  cnos_interface:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt  interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
-#  with_items: "{{test_ethernet_data10}}"
-
-- name: Test Interface Ethernet - microburst-detection
-  cnos_interface:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt  interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
-  with_items: "{{test_ethernet_data11}}"
-
-- name: Test Interface Ethernet  - mtu
-  cnos_interface:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt  interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
-  with_items: "{{test_ethernet_data12}}"
-
-- name: Test Interface Ethernet - service-policy
-  cnos_interface:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt  interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
-  with_items: "{{test_ethernet_data13}}"
-
-- name: Test Interface Ethernet - speed
-  cnos_interface:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt  interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
-  with_items: "{{test_ethernet_data14}}"
-
-- name: Test Interface Ethernet - storm
-  cnos_interface:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt  interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
-  with_items: "{{test_ethernet_data15}}"
-
-#- name: Test Interface Ethernet - vlan
-#  cnos_interface:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt  interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
-#  with_items: "{{test_ethernet_data16}}"
-
-- name: Test Interface Ethernet - vrrp
-  cnos_interface:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt  interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}'
-  with_items: "{{test_ethernet_data17}}"
-
-- name: Test Interface Ethernet - spanning tree1
-  cnos_interface:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt  interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
-  with_items: "{{test_ethernet_data18}}"
-
-- name: Test Interface Ethernet - spanning tree 2
-  cnos_interface: host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt  interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}' interfaceArg4='{{item.interfaceArg4}}' interfaceArg5='{{item.interfaceArg5}}'
-  with_items: "{{test_ethernet_data19}}"
-
-- name: Test Interface Ethernet - ip1
-  cnos_interface:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt  interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}' interfaceArg4='{{item.interfaceArg4}}'
-  with_items: "{{test_ethernet_data20}}"
-
-- name: Test Interface Ethernet - ip2
-  cnos_interface:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt  interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}'
-  with_items: "{{test_ethernet_data21}}"
-
-- name: Test Interface Ethernet - bfd
-  cnos_interface:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt  interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}' interfaceArg4='{{item.interfaceArg4}}' interfaceArg5='{{item.interfaceArg5}}'
-  with_items: "{{test_ethernet_data22}}"
-
-- name: Test Interface Ethernet - bfd
-  cnos_interface:  host={{ inventory_hostname }} username={{ hostvars[inventory_hostname]['ansible_ssh_user']}}  password={{ hostvars[inventory_hostname]['ansible_ssh_pass']}} deviceType={{ hostvars[inventory_hostname]['deviceType']}} outputfile=./results/cnos_ethernet_{{ inventory_hostname }}_output.txt  interfaceOption='{{item.interfaceOption}}' interfaceRange='{{item.interfaceRange}}' interfaceArg1='{{item.interfaceArg1}}' interfaceArg2='{{item.interfaceArg2}}' interfaceArg3='{{item.interfaceArg3}}' interfaceArg4='{{item.interfaceArg4}}' interfaceArg5='{{item.interfaceArg5}}' interfaceArg6='{{item.interfaceArg6}}'
-  with_items: "{{test_ethernet_data23}}"
-# Completed file
diff --git a/test/integration/targets/cnos_ethernet/vars/main.yml b/test/integration/targets/cnos_ethernet/vars/main.yml
deleted file mode 100644
index b1565cb65c..0000000000
--- a/test/integration/targets/cnos_ethernet/vars/main.yml
+++ /dev/null
@@ -1,49 +0,0 @@
----
-test_ethernet_data1:
-  - {interfaceOption: 'ethernet', interfaceRange: 1, interfaceArg1: "channel-group", interfaceArg2: 33, interfaceArg3: "on"}
-test_ethernet_data2:
-  - {interfaceOption: 'ethernet', interfaceRange: 33, interfaceArg1: "switchport", interfaceArg2: "access", interfaceArg3: 33}
-test_ethernet_data3:
-  - {interfaceOption: 'ethernet', interfaceRange: 33, interfaceArg1: "switchport", interfaceArg2: "mode", interfaceArg3: "access"}
-test_ethernet_data4:
-  - {interfaceOption: 'ethernet', interfaceRange: 33, interfaceArg1: "description", interfaceArg2: "Hentammoo "}
-test_ethernet_data5:
-  - {interfaceOption: 'ethernet', interfaceRange: 1, interfaceArg1: "duplex", interfaceArg2: "auto"}
-test_ethernet_data6:
-  - {interfaceOption: 'ethernet', interfaceRange: 33, interfaceArg1: "flowcontrol", interfaceArg2: "send", interfaceArg3: "off"}
-test_ethernet_data7:
-  - {interfaceOption: 'ethernet', interfaceRange: 33, interfaceArg1: "lacp", interfaceArg2: "port-priority", interfaceArg3: 33}
-test_ethernet_data8:
-  - {interfaceOption: 'ethernet', interfaceRange: 33, interfaceArg1: "lldp", interfaceArg2: "tlv-select", interfaceArg3: "max-frame-size"}
-test_ethernet_data9:
-  - {interfaceOption: 'ethernet', interfaceRange: 33, interfaceArg1: "load-interval", interfaceArg2: "counter", interfaceArg3: 2, interfaceArg4: 33}
-test_ethernet_data10:
-  - {interfaceOption: 'ethernet', interfaceRange: 33, interfaceArg1: "mac", interfaceArg2: "copp-system-acl-vlag-hc"}
-test_ethernet_data11:
-  - {interfaceOption: 'ethernet', interfaceRange: 33, interfaceArg1: "microburst-detection", interfaceArg2: 25}
-test_ethernet_data12:
-  - {interfaceOption: 'ethernet', interfaceRange: 33, interfaceArg1: "mtu", interfaceArg2: 660}
-test_ethernet_data13:
-  - {interfaceOption: 'ethernet', interfaceRange: 33, interfaceArg1: "service-policy", interfaceArg2: "input", interfaceArg3: "Anil"}
-test_ethernet_data14:
-  - {interfaceOption: 'ethernet', interfaceRange: 1, interfaceArg1: "speed", interfaceArg2: "40000"}
-test_ethernet_data15:
-  - {interfaceOption: 'ethernet', interfaceRange: 33, interfaceArg1: "storm-control", interfaceArg2: "broadcast", interfaceArg3: 12.5 }
-test_ethernet_data16:
-  - {interfaceOption: 'ethernet', interfaceRange: 33, interfaceArg1: "vlan", interfaceArg2: "disable"}
-test_ethernet_data17:
-  - {interfaceOption: 'ethernet', interfaceRange: 33, interfaceArg1: "vrrp", interfaceArg2: 33}
-test_ethernet_data18:
-  - {interfaceOption: 'ethernet', interfaceRange: 33, interfaceArg1: "spanning-tree", interfaceArg2: "bpduguard", interfaceArg3: "enable"}
-test_ethernet_data19:
-  - {interfaceOption: 'ethernet', interfaceRange: 33, interfaceArg1: "spanning-tree", interfaceArg2: "mst", interfaceArg3: "33-35", interfaceArg4: "cost", interfaceArg5: 33}
-test_ethernet_data20:
-  - {interfaceOption: 'ethernet', interfaceRange: 33, interfaceArg1: "ip", interfaceArg2: "access-group", interfaceArg3: "anil", interfaceArg4: "in"}
-test_ethernet_data21:
-  - {interfaceOption: 'ethernet', interfaceRange: 33, interfaceArg1: "ip", interfaceArg2: "port", interfaceArg3: "anil" }
-test_ethernet_data22:
-  - {interfaceOption: 'ethernet', interfaceRange: 33, interfaceArg1: "bfd", interfaceArg2: "interval", interfaceArg3: 55, interfaceArg4: 55, interfaceArg5: 33}
-test_ethernet_data23:
-  - {interfaceOption: 'ethernet', interfaceRange: 33, interfaceArg1: "bfd", interfaceArg2: "ipv4", interfaceArg3: "authentication", interfaceArg4: "meticulous-keyed-md5", interfaceArg5: "key-chain", interfaceArg6: "mychain"}
-test_ethernet_data24:
-  - {interfaceOption: 'ethernet', interfaceRange: "1/1-2", interfaceArg1: "channel-group", interfaceArg2: 33, interfaceArg3: "on"}
diff --git a/test/integration/targets/cnos_ethernet/aliases b/test/integration/targets/cnos_interface/aliases
similarity index 100%
rename from test/integration/targets/cnos_ethernet/aliases
rename to test/integration/targets/cnos_interface/aliases
diff --git a/test/integration/targets/cnos_ethernet/cnos_ethernet_sample_hosts b/test/integration/targets/cnos_interface/cnos_interface_sample_hosts
similarity index 73%
rename from test/integration/targets/cnos_ethernet/cnos_ethernet_sample_hosts
rename to test/integration/targets/cnos_interface/cnos_interface_sample_hosts
index 1c49fc0cdd..e44ea6761d 100644
--- a/test/integration/targets/cnos_ethernet/cnos_ethernet_sample_hosts
+++ b/test/integration/targets/cnos_interface/cnos_interface_sample_hosts
@@ -6,9 +6,9 @@
 #    - You can enter hostnames or ip addresses
 #    - A hostname/ip can be a member of multiple groups
 #
-# In the /etc/ansible/hosts file u have to enter [cnos_ethernet_sample] tag
+# In the /etc/ansible/hosts file u have to enter [cnos_interface_sample] tag
 # Following you should specify IP Adresses details 
 # Please change <username> and <password> with appropriate value for your switch.
 
-[cnos_ethernet_sample]
-10.241.107.39  ansible_network_os=cnos ansible_ssh_user=<username> ansible_ssh_pass=<password> deviceType=g8272_cnos
+[cnos_interface_sample]
+10.241.107.39  ansible_network_os=cnos ansible_ssh_user=<username> ansible_ssh_pass=<password> test_interface=ethernet1/33 test_interface2=ethernet1/44
diff --git a/test/integration/targets/cnos_interface/defaults/main.yaml b/test/integration/targets/cnos_interface/defaults/main.yaml
new file mode 100644
index 0000000000..5f709c5aac
--- /dev/null
+++ b/test/integration/targets/cnos_interface/defaults/main.yaml
@@ -0,0 +1,2 @@
+---
+testcase: "*"
diff --git a/test/integration/targets/cnos_interface/tasks/cli.yaml b/test/integration/targets/cnos_interface/tasks/cli.yaml
new file mode 100644
index 0000000000..303af40762
--- /dev/null
+++ b/test/integration/targets/cnos_interface/tasks/cli.yaml
@@ -0,0 +1,22 @@
+---
+- name: collect all cli test cases
+  find:
+    paths: "{{ role_path }}/tests/cli"
+    patterns: "{{ testcase }}.yaml"
+  register: test_cases
+  delegate_to: localhost
+
+- name: set test_items
+  set_fact: test_items="{{ test_cases.files | map(attribute='path') | list }}"
+
+- name: run test cases (connection=network_cli)
+  include: "{{ test_case_to_run }}"
+  with_items: "{{ test_items }}"
+  loop_control:
+    loop_var: test_case_to_run
+
+- name: run test case (connection=local)
+  include: "{{ test_case_to_run }} ansible_connection=local"
+  with_first_found: "{{ test_items }}"
+  loop_control:
+    loop_var: test_case_to_run
diff --git a/test/integration/targets/cnos_interface/tasks/main.yaml b/test/integration/targets/cnos_interface/tasks/main.yaml
new file mode 100644
index 0000000000..415c99d8b1
--- /dev/null
+++ b/test/integration/targets/cnos_interface/tasks/main.yaml
@@ -0,0 +1,2 @@
+---
+- { include: cli.yaml, tags: ['cli'] }
diff --git a/test/integration/targets/cnos_interface/tests/cli/basic.yaml b/test/integration/targets/cnos_interface/tests/cli/basic.yaml
new file mode 100644
index 0000000000..9525b6b571
--- /dev/null
+++ b/test/integration/targets/cnos_interface/tests/cli/basic.yaml
@@ -0,0 +1,228 @@
+---
+- debug: msg="START cnos_interface cli/basic.yaml on connection={{ ansible_connection }}"
+
+- name: Configure interface (setup)
+  cnos_interface:
+    name: "{{ test_interface }}"
+    description: test-interface-1
+    speed: 1000
+    mtu: 1800
+    state: present
+    provider: "{{ cli }}"
+  register: result
+
+- name: Configure interface
+  cnos_interface:
+    name: "{{ test_interface }}"
+    description: test-interface-initial
+    state: present
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      - '"interface {{ test_interface }}" in result.commands'
+      - '"description test-interface-initial" in result.commands'
+
+- name: Confgure interface (idempotent)
+  cnos_interface:
+    name: "{{ test_interface }}"
+    description: test-interface-initial
+    state: present
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+
+- name: Confgure interface parameters
+  cnos_interface:
+    name: "{{ test_interface }}"
+    description: test-interface
+    mtu: 2000
+    state: present
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      - '"interface {{ test_interface }}" in result.commands'
+      - '"description test-interface" in result.commands'
+      - '"mtu 2000" in result.commands'
+
+- name: Change interface parameters
+  cnos_interface:
+    name: "{{ test_interface }}"
+    description: test-interface-1
+    mtu: 1800
+    state: present
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      - '"interface {{ test_interface }}" in result.commands'
+      - '"description test-interface-1" in result.commands'
+      - '"mtu 1800" in result.commands'
+
+- name: Disable interface
+  cnos_interface:
+    name: "{{ test_interface }}"
+    enabled: False
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      #- '"interface {{ test_interface }}" in result.commands'
+      #- '"shutdown" in result.commands'
+
+- name: Enable interface
+  cnos_interface:
+    name: "{{ test_interface }}"
+    enabled: True
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      - '"interface {{ test_interface }}" in result.commands'
+      #- '"no shutdown" in result.commands'
+
+- name: Confgure second interface (setup)
+  cnos_interface:
+    name: "{{ test_interface2 }}"
+    description: test-interface-initial
+    speed: 1000
+    mtu: 1800
+    state: present
+    provider: "{{ cli }}"
+  register: result
+
+- name: Add interface aggregate
+  cnos_interface:
+    aggregate:
+    - { name: "{{ test_interface }}", mtu: 2000, description: test-interface-1 }
+    - { name: "{{ test_interface2 }}", mtu: 2000, description: test-interface-2 }
+    speed: 1000
+    state: present
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      - '"interface {{ test_interface }}" in result.commands'
+      - '"mtu 2000" in result.commands'
+      - '"interface {{ test_interface2 }}" in result.commands'
+      - '"description test-interface-2" in result.commands'
+      - '"mtu 2000" in result.commands'
+
+- name: Add interface aggregate (idempotent)
+  cnos_interface:
+    aggregate:
+    - { name: "{{ test_interface }}", mtu: 2000, description: test-interface-1 }
+    - { name: "{{ test_interface2 }}", mtu: 2000, description: test-interface-2 }
+    speed: 1000
+    state: present
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+
+- name: Disable interface aggregate
+  cnos_interface:
+    aggregate:
+    - { name: "{{ test_interface }}" }
+    - { name: "{{ test_interface2 }}" }
+    enabled: False
+    state: present
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+#      - '"interface {{ test_interface }}" in result.commands'
+#      - '"shutdown" in result.commands'
+#      - '"interface {{ test_interface2 }}" in result.commands'
+#      - '"shutdown" in result.commands'
+
+- name: Enable interface aggregate
+  cnos_interface:
+    aggregate:
+    - { name: "{{ test_interface }}" }
+    - { name: "{{ test_interface2 }}" }
+    enabled: True
+    state: present
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      - '"interface {{ test_interface }}" in result.commands'
+      #- '"no shutdown" in result.commands'
+      - '"interface {{ test_interface2 }}" in result.commands'
+      #- '"no shutdown" in result.commands'
+
+- name: loopback interface setup
+  cnos_interface:
+    aggregate:
+    - name: loopback3
+    - name: loopback6
+    state: absent
+    provider: "{{ cli }}"
+
+- name: Create loopback interface aggregate
+  cnos_interface:
+    aggregate:
+    - name: loopback3
+    - name: loopback6
+    state: present
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      #- '"interface loopback3" in result.commands'
+      #- '"interface loopback6" in result.commands'
+
+- name: Delete loopback interface aggregate
+  cnos_interface:
+    aggregate:
+    - name: loopback3
+    - name: loopback6
+    state: absent
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == true'
+      - '"no interface loopback3" in result.commands'
+      - '"no interface loopback6" in result.commands'
+
+- name: Delete loopback interface aggregate (idempotent)
+  cnos_interface:
+    aggregate:
+    - name: loopback3
+    - name: loopback6
+    state: absent
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - 'result.changed == false'
+
+- debug: msg="END cnos_interface cli/basic.yaml on connection={{ ansible_connection }}"
diff --git a/test/integration/targets/cnos_interface/tests/cli/intent.yaml b/test/integration/targets/cnos_interface/tests/cli/intent.yaml
new file mode 100644
index 0000000000..c4d7534ef4
--- /dev/null
+++ b/test/integration/targets/cnos_interface/tests/cli/intent.yaml
@@ -0,0 +1,140 @@
+---
+- debug: msg="START cnos_interface cli/intent.yaml on connection={{ ansible_connection }}"
+
+- name: Check intent arguments
+  cnos_interface:
+    name: "{{ test_interface }}"
+    state: down
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - "result.failed == false"
+
+- name: Check intent arguments (failed condition)
+  cnos_interface:
+    name: "{{ test_interface }}"
+    state: up
+    provider: "{{ cli }}"
+  ignore_errors: yes
+  register: result
+
+- assert:
+    that:
+      - "result.failed == true"
+      - "'state eq(up)' in result.failed_conditions"
+
+- name: Config + intent
+  cnos_interface:
+    name: "{{ test_interface }}"
+    enabled: False
+    state: down
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - "result.failed == false"
+
+- name: Config + intent (fail)
+  cnos_interface:
+    name: "{{ test_interface }}"
+    enabled: False
+    provider: "{{ cli }}"
+    state: up
+  ignore_errors: yes
+  register: result
+
+- assert:
+    that:
+      - "result.failed == true"
+      - "'state eq(up)' in result.failed_conditions"
+
+- name: Register show neighbors detail
+  cnos_command:
+    commands:
+      - show lldp neighbors
+    provider: "{{ cli }}"
+  register: show_lldp_neighbors_result
+
+- block:
+    - name: Check neighbors intent arguments
+      cnos_interface:
+        name: Ethernet1/7
+        neighbors:
+          - port: Ethernet1/19
+            host: NE1032
+        provider: "{{ cli }}"
+      register: result
+
+    - assert:
+        that:
+          - "result.failed == false"
+
+    - name: Check neighbors intent arguments (failed condition)
+      cnos_interface:
+        name: Ethernet1/7
+        neighbors:
+          - port: dummy_port
+            host: dummy_host
+        provider: "{{ cli }}"
+      ignore_errors: yes
+      register: result
+
+    - assert:
+        that:
+          - "result.failed == true"
+          - "'host dummy_host' in result.failed_conditions"
+          - "'port dummy_port' in result.failed_conditions"
+  when: '"netdev" in show_lldp_neighbors_result.stdout[0]'
+
+- name: Aggregate config + intent (pass)
+  cnos_interface:
+    aggregate:
+      - name: "{{ test_interface }}"
+        enabled: True
+        state: down
+    provider: "{{ cli }}"
+  ignore_errors: yes
+  register: result
+
+- assert:
+    that:
+      - "result.failed == false"
+
+- block:
+    - name: Aggregate neighbors intent (pass)
+      cnos_interface:
+        aggregate:
+          - name: Ethernet1/7
+            neighbors:
+              - port: Ethernet1/19
+                host: NE1032
+        provider: "{{ cli }}"
+      ignore_errors: yes
+      register: result
+
+    - assert:
+        that:
+          - "result.failed == false"
+
+    - name: Aggregate neighbors intent (fail)
+      cnos_interface:
+        aggregate:
+          - name: Ethernet1/7
+        neighbors:
+          - port: Ethernet1/19
+            host: NE1032
+          - port: dummy_port
+            host: dummy_host
+        provider: "{{ cli }}"
+      ignore_errors: yes
+      register: result
+
+    - assert:
+        that:
+          - "result.failed == true"
+          - "'host dummy_host' in result.failed_conditions"
+          - "'port dummy_port' in result.failed_conditions"
+  when: "'netdev' in show_lldp_neighbors_result.stdout[0]"
diff --git a/test/integration/targets/cnos_interface/vars/main.yaml b/test/integration/targets/cnos_interface/vars/main.yaml
new file mode 100644
index 0000000000..aa25153ec8
--- /dev/null
+++ b/test/integration/targets/cnos_interface/vars/main.yaml
@@ -0,0 +1,9 @@
+---
+cli:
+  host: "{{ inventory_hostname }}"
+  port: 22
+  username: admin
+  password: admin
+  timeout: 30
+  authorize: True
+  auth_pass:
diff --git a/test/sanity/validate-modules/ignore.txt b/test/sanity/validate-modules/ignore.txt
index 7d6f7c922a..c432791d39 100644
--- a/test/sanity/validate-modules/ignore.txt
+++ b/test/sanity/validate-modules/ignore.txt
@@ -581,8 +581,6 @@ lib/ansible/modules/network/cnos/cnos_conditional_template.py E326
 lib/ansible/modules/network/cnos/cnos_factory.py E326
 lib/ansible/modules/network/cnos/cnos_facts.py E323
 lib/ansible/modules/network/cnos/cnos_image.py E326
-lib/ansible/modules/network/cnos/cnos_interface.py E326
-lib/ansible/modules/network/cnos/cnos_portchannel.py E326
 lib/ansible/modules/network/cnos/cnos_reload.py E326
 lib/ansible/modules/network/cnos/cnos_rollback.py E322
 lib/ansible/modules/network/cnos/cnos_rollback.py E323
diff --git a/test/units/modules/network/cnos/fixtures/cnos_config_config.cfg b/test/units/modules/network/cnos/fixtures/cnos_config_config.cfg
index ff7e724f9c..34477df930 100644
--- a/test/units/modules/network/cnos/fixtures/cnos_config_config.cfg
+++ b/test/units/modules/network/cnos/fixtures/cnos_config_config.cfg
@@ -227,6 +227,9 @@ interface Ethernet1/42
 interface Ethernet1/43
 !
 interface Ethernet1/44
+ ip address 6.7.8.9 255.255.255.0
+ description test string
+ shutdown
 !
 interface Ethernet1/45
 !
diff --git a/test/units/modules/network/cnos/fixtures/cnos_ethernet_config.cfg b/test/units/modules/network/cnos/fixtures/cnos_ethernet_config.cfg
deleted file mode 100644
index b52cdb7c07..0000000000
--- a/test/units/modules/network/cnos/fixtures/cnos_ethernet_config.cfg
+++ /dev/null
@@ -1,96 +0,0 @@
-
---------------------------------------------------------------------------------
-Ethernet        PVID   Type Mode   Status  Reason                  Speed    Port
-Interface       NVLAN                                                       Ch#
---------------------------------------------------------------------------------
-Ethernet1/1     33     eth  access down    Link not connected      10000    33
-Ethernet1/2     1      eth  access down    Link not connected      10000    1001
-Ethernet1/3     1      eth  trunk  down    Link not connected      10000    1003
-Ethernet1/4     1      eth  trunk  down    Link not connected      10000    1004
-Ethernet1/5     --     eth  routed down    Link not connected      10000    --
-Ethernet1/6     --     eth  routed down    Link not connected      10000    --
-Ethernet1/7     --     eth  routed down    Link not connected      10000    --
-Ethernet1/8     --     eth  routed down    Link not connected      10000    --
-Ethernet1/9     1      eth  access down    Link not connected      10000    --
-Ethernet1/10    1      eth  access down    Link not connected      10000    --
-Ethernet1/11    --     eth  routed down    Link not connected      10000    --
-Ethernet1/12    --     eth  routed down    Link not connected      10000    --
-Ethernet1/13    --     eth  routed down    Link not connected      10000    --
-Ethernet1/14    1      eth  access down    Link not connected      10000    --
-Ethernet1/15    1      eth  access down    Link not connected      10000    --
-Ethernet1/16    1      eth  access down    Link not connected      10000    --
-Ethernet1/17    1      eth  access down    Link not connected      10000    --
-Ethernet1/18    1      eth  access down    Link not connected      10000    --
-Ethernet1/19    1      eth  access down    Link not connected      10000    --
-Ethernet1/20    1      eth  access down    Link not connected      10000    --
-Ethernet1/21    1      eth  access down    Link not connected      10000    --
-Ethernet1/22    1      eth  access down    Link not connected      10000    --
-Ethernet1/23    1      eth  access down    Link not connected      10000    11
-Ethernet1/24    1      eth  access down    Link not connected      10000    --
-Ethernet1/25    1      eth  access down    Link not connected      10000    --
-Ethernet1/26    1      eth  access down    Link not connected      10000    --
-Ethernet1/27    1      eth  access down    Link not connected      10000    --
-Ethernet1/28    1      eth  access down    Link not connected      10000    --
-Ethernet1/29    1      eth  access down    Link not connected      10000    --
-Ethernet1/30    1      eth  access down    Link not connected      10000    --
-Ethernet1/31    1      eth  access down    Link not connected      10000    --
-Ethernet1/32    1      eth  access down    Link not connected      10000    --
-Ethernet1/33    --     eth  routed down    Link not connected      10000    --
-Ethernet1/34    1      eth  access down    Link not connected      10000    --
-Ethernet1/35    1      eth  access down    Link not connected      10000    --
-Ethernet1/36    1      eth  access down    Link not connected      10000    --
-Ethernet1/37    1      eth  access down    Link not connected      10000    --
-Ethernet1/38    1      eth  access down    Link not connected      10000    --
-Ethernet1/39    1      eth  access down    Link not connected      10000    --
-Ethernet1/40    1      eth  access down    Link not connected      10000    --
-Ethernet1/41    1      eth  access down    Link not connected      10000    --
-Ethernet1/42    1      eth  access down    Link not connected      10000    --
-Ethernet1/43    1      eth  access down    Link not connected      10000    --
-Ethernet1/44    1      eth  access down    Link not connected      10000    --
-Ethernet1/45    1      eth  access down    Link not connected      10000    --
-Ethernet1/46    1      eth  access down    Link not connected      10000    --
-Ethernet1/47    1      eth  access down    Link not connected      10000    --
-Ethernet1/48    1      eth  access down    Link not connected      10000    --
-Ethernet1/49    1      eth  access down    Link not connected      40000    --
-Ethernet1/50    1      eth  access down    Link not connected      40000    --
-Ethernet1/51    1      eth  access down    Link not connected      40000    --
-Ethernet1/52    1      eth  access down    Link not connected      40000    --
-Ethernet1/53    1      eth  access down    Link not connected      40000    --
-Ethernet1/54    1      eth  access down    Link not connected      40000    --
-
---------------------------------------------------------------------------------
-Port-channel     PVID Type Mode   Status  Reason                 Speed  Protocol
-Interface        NVLAN
---------------------------------------------------------------------------------
-po1              1    eth  access down    No link up members     NA     none
-po2              1    eth  access down    No link up members     NA     none
-po11             1    eth  access down    No link up members     NA     lacp
-po12             1    eth  access down    No link up members     NA     none
-po13             1    eth  trunk  down    No link up members     NA     none
-po14             1    eth  access down    No link up members     NA     none
-po15             1    eth  access down    No link up members     NA     none
-po17             1    eth  trunk  down    No link up members     NA     none
-po20             1    eth  access down    No link up members     NA     none
-po33             33   eth  access down    No link up members     NA     none
-po100            1    eth  trunk  down    No link up members     NA     none
-po1001           1    eth  access down    No link up members     NA     lacp
-po1002           1    eth  access down    No link up members     NA     none
-po1003           1    eth  trunk  down    No link up members     NA     lacp
-po1004           1    eth  trunk  down    No link up members     NA     lacp
-
---------------------------------------------------------------------------------
-Port   VRF          Status IP Address                              Speed    MTU
---------------------------------------------------------------------------------
-mgmt0  management   up     10.241.107.39                           1000     1500
-
--------------------------------------------------------------------------------
-Interface Secondary VLAN(Type)                    Status Reason
--------------------------------------------------------------------------------
-Vlan1     --                                      down   VLAN is down
-
---------------------------------------------------------------------------------
-Interface     Status     Description
---------------------------------------------------------------------------------
-loopback0     up         --
-loopback3     up         --
-
diff --git a/test/units/modules/network/cnos/test_cnos_ethernet.py b/test/units/modules/network/cnos/test_cnos_ethernet.py
deleted file mode 100644
index 0eafd2e702..0000000000
--- a/test/units/modules/network/cnos/test_cnos_ethernet.py
+++ /dev/null
@@ -1,84 +0,0 @@
-from __future__ import (absolute_import, division, print_function)
-__metaclass__ = type
-
-import json
-import os
-from units.compat.mock import patch
-from ansible.modules.network.cnos import cnos_interface
-from units.modules.utils import set_module_args
-from .cnos_module import TestCnosModule, load_fixture
-
-
-class TestCnosEthernetModule(TestCnosModule):
-
-    module = cnos_interface
-
-    def setUp(self):
-        super(TestCnosEthernetModule, self).setUp()
-
-        self.mock_run_cnos_commands = patch('ansible.module_utils.network.cnos.cnos.run_cnos_commands')
-        self.run_cnos_commands = self.mock_run_cnos_commands.start()
-
-    def tearDown(self):
-        super(TestCnosEthernetModule, self).tearDown()
-        self.mock_run_cnos_commands.stop()
-
-    def load_fixtures(self, commands=None, transport='cli'):
-        self.run_cnos_commands.return_value = [load_fixture('cnos_ethernet_config.cfg')]
-
-    def test_ethernet_channelgroup(self):
-        set_module_args({'username': 'admin', 'password': 'pass',
-                         'host': '10.241.107.39', 'deviceType': 'g8272_cnos',
-                         'outputfile': self.test_log, 'interfaceOption': 'ethernet', 'interfaceRange': '33',
-                         'interfaceArg1': 'channel-group', 'interfaceArg2': '33', 'interfaceArg3': 'on'})
-        result = self.execute_module(changed=True)
-        expected_result = 'Interface Configuration is Accomplished'
-        self.assertEqual(result['msg'], expected_result)
-
-    def test_cnos_ethernet_lacp(self):
-        set_module_args({'username': 'admin', 'password': 'pass',
-                         'host': '10.241.107.39', 'deviceType': 'g8272_cnos',
-                         'outputfile': self.test_log, 'interfaceOption': 'ethernet', 'interfaceRange': '33',
-                         'interfaceArg1': 'lacp', 'interfaceArg2': 'port-priority', 'interfaceArg3': '33'})
-        result = self.execute_module(changed=True)
-        expected_result = 'Interface Configuration is Accomplished'
-        self.assertEqual(result['msg'], expected_result)
-
-    def test_cnos_ethernet_duplex(self):
-        set_module_args({'username': 'admin', 'password': 'pass',
-                         'host': '10.241.107.39', 'deviceType': 'g8272_cnos',
-                         'outputfile': self.test_log, 'interfaceOption': 'ethernet', 'interfaceRange': '33',
-                         'interfaceArg1': 'duplex', 'interfaceArg2': 'auto'})
-        result = self.execute_module(changed=True)
-        expected_result = 'Interface Configuration is Accomplished'
-        self.assertEqual(result['msg'], expected_result)
-
-    def test_cnos_ethernet_mtu(self):
-        set_module_args({'username': 'admin', 'password': 'pass',
-                         'host': '10.241.107.39', 'deviceType': 'g8272_cnos',
-                         'outputfile': self.test_log, 'interfaceOption': 'ethernet', 'interfaceRange': '33',
-                         'interfaceArg1': 'mtu', 'interfaceArg2': '1300'})
-        result = self.execute_module(changed=True)
-        expected_result = 'Interface Configuration is Accomplished'
-        self.assertEqual(result['msg'], expected_result)
-
-    def test_cnos_ethernet_spanningtree(self):
-        set_module_args({'username': 'admin', 'password': 'pass',
-                         'host': '10.241.107.39', 'deviceType': 'g8272_cnos',
-                         'outputfile': self.test_log, 'interfaceOption': 'ethernet', 'interfaceRange': '33',
-                         'interfaceArg1': 'spanning-tree', 'interfaceArg2': 'mst',
-                         'interfaceArg3': '33-35', 'interfaceArg4': 'cost',
-                         'interfaceArg5': '33'})
-        result = self.execute_module(changed=True)
-        expected_result = 'Interface Configuration is Accomplished'
-        self.assertEqual(result['msg'], expected_result)
-
-    def test_cnos_ethernet_ip(self):
-        set_module_args({'username': 'admin', 'password': 'pass',
-                         'host': '10.241.107.39', 'deviceType': 'g8272_cnos',
-                         'outputfile': self.test_log, 'interfaceOption': 'ethernet', 'interfaceRange': '33',
-                         'interfaceArg1': 'ip', 'interfaceArg2': 'port',
-                         'interfaceArg3': 'anil'})
-        result = self.execute_module(changed=True)
-        expected_result = 'Interface Configuration is Accomplished'
-        self.assertEqual(result['msg'], expected_result)
diff --git a/test/units/modules/network/cnos/test_cnos_interface.py b/test/units/modules/network/cnos/test_cnos_interface.py
new file mode 100644
index 0000000000..d7346abcf5
--- /dev/null
+++ b/test/units/modules/network/cnos/test_cnos_interface.py
@@ -0,0 +1,146 @@
+#
+# (c) 2018 Red Hat Inc.
+# Copyright (C) 2017 Lenovo.
+#
+# This file is part of Ansible
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+#
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import re
+import json
+
+from units.compat.mock import patch
+from ansible.modules.network.cnos import cnos_interface
+from units.modules.utils import set_module_args
+from .cnos_module import TestCnosModule, load_fixture
+
+
+class TestCnosInterfaceModule(TestCnosModule):
+    module = cnos_interface
+
+    def setUp(self):
+        super(TestCnosInterfaceModule, self).setUp()
+        self._patch_get_config = patch(
+            'ansible.modules.network.cnos.cnos_interface.get_config'
+        )
+        self._patch_load_config = patch(
+            'ansible.modules.network.cnos.cnos_interface.load_config'
+        )
+        self._patch_exec_command = patch(
+            'ansible.modules.network.cnos.cnos_interface.exec_command'
+        )
+
+        self._get_config = self._patch_get_config.start()
+        self._load_config = self._patch_load_config.start()
+        self._exec_command = self._patch_exec_command.start()
+
+    def tearDown(self):
+        super(TestCnosInterfaceModule, self).tearDown()
+        self._patch_get_config.stop()
+        self._patch_load_config.stop()
+        self._patch_exec_command.stop()
+
+    def load_fixtures(self, commands=None):
+        config_file = 'cnos_config_config.cfg'
+        self._get_config.return_value = load_fixture(config_file)
+        self._load_config.return_value = None
+
+    def test_cnos_interface_description(self, *args, **kwargs):
+        set_module_args(dict(
+            name='Ethernet1/2',
+            description='show version'
+        ))
+        result = self.execute_module(changed=True)
+        self.assertEqual(
+            result,
+            {
+                'commands': [
+                    'interface Ethernet1/2',
+                    'description show version',
+                    'duplex auto'
+                ],
+                'changed': True
+            }
+        )
+
+    def test_cnos_interface_speed(self, *args, **kwargs):
+        set_module_args(dict(
+            name='Ethernet1/2',
+            speed=1000
+        ))
+        result = self.execute_module(changed=True)
+        self.assertEqual(
+            result,
+            {
+                'commands': [
+                    'interface Ethernet1/2',
+                    'speed 1000',
+                    'duplex auto'
+                ],
+                'changed': True
+            }
+        )
+
+    def test_cnos_interface_mtu(self, *args, **kwargs):
+        set_module_args(dict(
+            name='Ethernet1/2',
+            mtu=1548
+        ))
+        result = self.execute_module(changed=True)
+        self.assertEqual(
+            result,
+            {
+                'commands': [
+                    'interface Ethernet1/2',
+                    'duplex auto',
+                    'mtu 1548'
+                ],
+                'changed': True
+            }
+        )
+
+    def test_cnos_interface_mtu_out_of_range(self, *args, **kwargs):
+        set_module_args(dict(
+            name='Ethernet0/2',
+            mtu=15000
+        ))
+        result = self.execute_module(failed=True)
+        self.assertEqual(
+            result,
+            {
+                'msg': 'mtu must be between 64 and 9216',
+                'failed': True
+            }
+        )
+
+    def test_cnos_interface_enabled(self, *args, **kwargs):
+        set_module_args(dict(
+            name='Ethernet1/44',
+            enabled=True
+        ))
+        result = self.execute_module(changed=True)
+        self.assertEqual(
+            result,
+            {
+                'commands': [
+                    'interface Ethernet1/44',
+                    'duplex auto',
+                    'no shutdown'
+                ],
+                'changed': True
+            }
+        )
