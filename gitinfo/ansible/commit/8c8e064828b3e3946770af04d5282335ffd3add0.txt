commit 8c8e064828b3e3946770af04d5282335ffd3add0
Author: Toshio Kuratomi <a.badger@gmail.com>
Date:   Tue Jun 14 12:03:59 2016 -0700

        Be more lenient of symlinked /bin/sh inside the chroot (#16239)
    
    Symlinks inside of the chroot were failng because we weren't able to
        determine if they were pointing to a real file or not.  We could write
        some complicated code to walk the symlink path taking into account where
        the root of the tree is but that could be fragile.  Since this is just
        a sanity check, instead we just assume that the chroot is fine if we
        find that /bin/sh in the chroot is a symlink.  Can revisit if it turns
        out that many chroots have a /bin/sh that's a broken symlink.
    
        Fixes #16097

diff --git a/lib/ansible/plugins/connection/chroot.py b/lib/ansible/plugins/connection/chroot.py
index 65c37a0841..d9f499a11c 100644
--- a/lib/ansible/plugins/connection/chroot.py
+++ b/lib/ansible/plugins/connection/chroot.py
@@ -63,7 +63,11 @@ class Connection(ConnectionBase):
             raise AnsibleError("%s is not a directory" % self.chroot)
 
         chrootsh = os.path.join(self.chroot, 'bin/sh')
-        if not is_executable(chrootsh):
+        # Want to check for a usable bourne shell inside the chroot.
+        # is_executable() == True is sufficient.  For symlinks it
+        # gets really complicated really fast.  So we punt on finding that
+        # out.  As long as it's a symlink we assume that it will work
+        if not (is_executable(chrootsh) or (os.path.lexists(chrootsh) and os.path.islink(chrootsh))):
             raise AnsibleError("%s does not look like a chrootable dir (/bin/sh missing)" % self.chroot)
 
         self.chroot_cmd = distutils.spawn.find_executable('chroot')
