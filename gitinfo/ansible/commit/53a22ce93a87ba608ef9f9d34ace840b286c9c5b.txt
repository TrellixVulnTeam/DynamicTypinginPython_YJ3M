commit 53a22ce93a87ba608ef9f9d34ace840b286c9c5b
Author: Toshio Kuratomi <a.badger@gmail.com>
Date:   Mon Jun 13 12:00:31 2016 -0700

    Finish python3 syntax compilation fixing for core repo

diff --git a/lib/ansible/modules/cloud/amazon/cloudformation.py b/lib/ansible/modules/cloud/amazon/cloudformation.py
index 2f495e7a90..cdc24bbc7d 100644
--- a/lib/ansible/modules/cloud/amazon/cloudformation.py
+++ b/lib/ansible/modules/cloud/amazon/cloudformation.py
@@ -239,7 +239,7 @@ def invoke_with_throttling_retries(function_ref, *argv):
         try:
             retval=function_ref(*argv)
             return retval
-        except boto.exception.BotoServerError, e:
+        except boto.exception.BotoServerError as e:
             if e.code != IGNORE_CODE or retries==MAX_RETRIES:
                 raise e
         time.sleep(5 * (2**retries))
@@ -313,7 +313,7 @@ def main():
 
     try:
         cfn = connect_to_aws(boto.cloudformation, region, **aws_connect_kwargs)
-    except boto.exception.NoAuthHandlerFound, e:
+    except boto.exception.NoAuthHandlerFound as e:
         module.fail_json(msg=str(e))
     update = False
     result = {}
@@ -332,7 +332,7 @@ def main():
                              capabilities=['CAPABILITY_IAM'],
                              **kwargs)
             operation = 'CREATE'
-        except Exception, err:
+        except Exception as err:
             error_msg = boto_exception(err)
             if 'AlreadyExistsException' in error_msg or 'already exists' in error_msg:
                 update = True
@@ -354,7 +354,7 @@ def main():
                              template_url=template_url,
                              capabilities=['CAPABILITY_IAM'])
             operation = 'UPDATE'
-        except Exception, err:
+        except Exception as err:
             error_msg = boto_exception(err)
             if 'No updates are to be performed.' in error_msg:
                 result = dict(changed=False, output='Stack is already up-to-date.')
@@ -391,7 +391,7 @@ def main():
         try:
             invoke_with_throttling_retries(cfn.describe_stacks,stack_name)
             operation = 'DELETE'
-        except Exception, err:
+        except Exception as err:
             error_msg = boto_exception(err)
             if 'Stack:%s does not exist' % stack_name in error_msg:
                 result = dict(changed=False, output='Stack not found.')
