commit 3777c2e93df23ac6bf59de6196c28a756aed7c50
Author: Matt Clay <mclay@redhat.com>
Date:   Thu Aug 8 23:23:12 2019 -0700

    Fix plugin names when loading all plugins. (#59950)
    
    * Fix plugin names when loading all plugins.
    
    Add an integration test to verify plugin __package__ and __name__ are correct.
    
    * Make sure filter and test names are unique.
    
    * Remove __package__ test.
    
    On Python 2.x __package__ is not set, but it is on Python 3.x.

diff --git a/lib/ansible/plugins/loader.py b/lib/ansible/plugins/loader.py
index 922263a4b5..39c3a2be92 100644
--- a/lib/ansible/plugins/loader.py
+++ b/lib/ansible/plugins/loader.py
@@ -678,7 +678,13 @@ class PluginLoader:
 
             if path not in self._module_cache:
                 try:
-                    module = self._load_module_source(name, path)
+                    if self.subdir in ('filter_plugins', 'test_plugins'):
+                        # filter and test plugin files can contain multiple plugins
+                        # they must have a unique python module name to prevent them from shadowing each other
+                        full_name = '{0}_{1}'.format(abs(hash(path)), basename)
+                    else:
+                        full_name = basename
+                    module = self._load_module_source(full_name, path)
                     self._load_config_defs(basename, module, path)
                 except Exception as e:
                     display.warning("Skipping plugin (%s) as it seems to be invalid: %s" % (path, to_text(e)))
diff --git a/test/integration/targets/plugin_namespace/aliases b/test/integration/targets/plugin_namespace/aliases
new file mode 100644
index 0000000000..a6dafcf8cd
--- /dev/null
+++ b/test/integration/targets/plugin_namespace/aliases
@@ -0,0 +1 @@
+shippable/posix/group1
diff --git a/test/integration/targets/plugin_namespace/filter_plugins/test_filter.py b/test/integration/targets/plugin_namespace/filter_plugins/test_filter.py
new file mode 100644
index 0000000000..dca094be8a
--- /dev/null
+++ b/test/integration/targets/plugin_namespace/filter_plugins/test_filter.py
@@ -0,0 +1,15 @@
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+
+def filter_name(a):
+    return __name__
+
+
+class FilterModule(object):
+    def filters(self):
+        filters = {
+            'filter_name': filter_name,
+        }
+
+        return filters
diff --git a/test/integration/targets/plugin_namespace/lookup_plugins/lookup_name.py b/test/integration/targets/plugin_namespace/lookup_plugins/lookup_name.py
new file mode 100644
index 0000000000..d0af703bbd
--- /dev/null
+++ b/test/integration/targets/plugin_namespace/lookup_plugins/lookup_name.py
@@ -0,0 +1,9 @@
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+from ansible.plugins.lookup import LookupBase
+
+
+class LookupModule(LookupBase):
+    def run(self, terms, variables, **kwargs):
+        return [__name__]
diff --git a/test/integration/targets/plugin_namespace/tasks/main.yml b/test/integration/targets/plugin_namespace/tasks/main.yml
new file mode 100644
index 0000000000..19bdd3a0eb
--- /dev/null
+++ b/test/integration/targets/plugin_namespace/tasks/main.yml
@@ -0,0 +1,11 @@
+- set_fact:
+    filter_name: "{{ 1 | filter_name }}"
+    lookup_name: "{{ lookup('lookup_name') }}"
+    test_name_ok: "{{ 1 is test_name_ok }}"
+
+- assert:
+    that:
+      # filter names are prefixed with a unique hash value to prevent shadowing of other plugins
+      - filter_name | regex_search('^ansible\.plugins\.filter\.[0-9]+_test_filter$')
+      - lookup_name == 'ansible.plugins.lookup.lookup_name'
+      - test_name_ok
diff --git a/test/integration/targets/plugin_namespace/test_plugins/test_test.py b/test/integration/targets/plugin_namespace/test_plugins/test_test.py
new file mode 100644
index 0000000000..2a9d6ee079
--- /dev/null
+++ b/test/integration/targets/plugin_namespace/test_plugins/test_test.py
@@ -0,0 +1,16 @@
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import re
+
+
+def test_name_ok(value):
+    # test names are prefixed with a unique hash value to prevent shadowing of other plugins
+    return bool(re.match(r'^ansible\.plugins\.test\.[0-9]+_test_test$', __name__))
+
+
+class TestModule:
+    def tests(self):
+        return {
+            'test_name_ok': test_name_ok,
+        }
