commit 8937246f8fadb928d3f531eac37c145037ba0c03
Author: Trishna Guha <trishnaguha17@gmail.com>
Date:   Wed May 17 11:16:41 2017 +0530

    Fix nxos ospf and Unit test (#24613)
    
    * nxos_ospf fixes refactor
    
    Signed-off-by: Trishna Guha <trishnaguha17@gmail.com>
    
    * unit test nxos_ospf
    
    Signed-off-by: Trishna Guha <trishnaguha17@gmail.com>

diff --git a/lib/ansible/modules/network/nxos/nxos_ospf.py b/lib/ansible/modules/network/nxos/nxos_ospf.py
index abbe39c348..746e7187a5 100644
--- a/lib/ansible/modules/network/nxos/nxos_ospf.py
+++ b/lib/ansible/modules/network/nxos/nxos_ospf.py
@@ -16,10 +16,11 @@
 # along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
 #
 
-ANSIBLE_METADATA = {'metadata_version': '1.0',
-                    'status': ['preview'],
-                    'supported_by': 'community'}
-
+ANSIBLE_METADATA = {
+    'metadata_version': '1.0',
+    'status': ['preview'],
+    'supported_by': 'community'
+}
 
 DOCUMENTATION = '''
 ---
@@ -28,79 +29,48 @@ extends_documentation_fragment: nxos
 version_added: "2.2"
 short_description: Manages configuration of an ospf instance.
 description:
-    - Manages configuration of an ospf instance.
+  - Manages configuration of an ospf instance.
 author: Gabriele Gerbino (@GGabriele)
 options:
-    ospf:
-        description:
-            - Name of the ospf instance.
-        required: true
-    state:
-        description:
-            - Determines whether the config should be present or not
-              on the device.
-        required: false
-        default: present
-        choices: ['present','absent']
+  ospf:
+    description:
+      - Name of the ospf instance.
+    required: true
+  state:
+    description:
+      - Determines whether the config should be present or not
+        on the device.
+    required: false
+    default: present
+    choices: ['present','absent']
 '''
 
 EXAMPLES = '''
 - nxos_ospf:
     ospf: 1
     state: present
-    username: "{{ un }}"
-    password: "{{ pwd }}"
-    host: "{{ inventory_hostname }}"
 '''
 
 RETURN = '''
-proposed:
-    description: k/v pairs of parameters passed into module
-    returned: verbose mode
-    type: dict
-    sample: {"ospf": "1"}
-existing:
-    description: k/v pairs of existing configuration
-    returned: verbose mode
-    type: dict
-    sample: {"ospf": ["2"]}
-end_state:
-    description: k/v pairs of configuration after module execution
-    returned: verbose mode
-    type: dict
-    sample: {"ospf": ["1", "2"]}
-updates:
+commands:
     description: commands sent to the device
     returned: always
     type: list
     sample: ["router ospf 1"]
-changed:
-    description: check to see if a change was made on the device
-    returned: always
-    type: boolean
-    sample: true
 '''
 
-
 import re
-from ansible.module_utils.nxos import get_config, load_config, run_commands
+from ansible.module_utils.nxos import get_config, load_config
 from ansible.module_utils.nxos import nxos_argument_spec, check_args
 from ansible.module_utils.basic import AnsibleModule
 from ansible.module_utils.netcfg import CustomNetworkConfig
 
-import re
 
 PARAM_TO_COMMAND_KEYMAP = {
     'ospf': 'router ospf'
 }
 
 
-def invoke(name, *args, **kwargs):
-    func = globals().get(name)
-    if func:
-        return func(*args, **kwargs)
-
-
 def get_value(config, module):
     splitted_config = config.splitlines()
     value_list = []
@@ -132,14 +102,10 @@ def get_existing(module):
 
 def apply_key_map(key_map, table):
     new_dict = {}
-    for key, value in table.items():
+    for key, value in table:
         new_key = key_map.get(key)
         if new_key:
-            value = table.get(key)
-            if value:
-                new_dict[new_key] = value
-            else:
-                new_dict[new_key] = value
+            new_dict[new_key] = table.get(key)
     return new_dict
 
 
@@ -156,8 +122,7 @@ def state_absent(module, proposed, candidate):
 def main():
     argument_spec = dict(
         ospf=dict(required=True, type='str'),
-        state=dict(choices=['present', 'absent'], default='present',
-                       required=False),
+        state=dict(choices=['present', 'absent'], default='present', required=False),
         include_defaults=dict(default=True),
         config=dict(),
         save=dict(type='bool', default=False)
@@ -165,18 +130,16 @@ def main():
 
     argument_spec.update(nxos_argument_spec)
 
-    module = AnsibleModule(argument_spec=argument_spec,
-                        supports_check_mode=True)
+    module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=True)
 
     warnings = list()
     check_args(module, warnings)
-
+    result = dict(changed=False, warnings=warnings)
 
     state = module.params['state']
     ospf = str(module.params['ospf'])
 
-    existing = invoke('get_existing', module)
-    end_state = existing
+    existing = get_existing(module)
     proposed = dict(ospf=ospf)
 
     if not existing:
@@ -184,25 +147,22 @@ def main():
     else:
         existing_list = existing['ospf']
 
-    result = {}
-    if (state == 'present' or (state == 'absent' and ospf in existing_list)):
-        candidate = CustomNetworkConfig(indent=3)
-        invoke('state_%s' % state, module, proposed, candidate)
-        response = load_config(module, candidate)
-        result.update(response)
-
-    else:
-        result['updates'] = []
+    candidate = CustomNetworkConfig(indent=3)
+    if state == 'present':
+        state_present(module, proposed, candidate)
+    if state == 'absent' and ospf in existing_list:
+        state_absent(module, proposed, candidate)
 
-    if module._verbosity > 0:
-        end_state = invoke('get_existing', module)
-        result['end_state'] = end_state
-        result['existing'] = existing
-        result['proposed'] = proposed
+    if candidate:
+        candidate = candidate.items_text()
+        load_config(module, candidate)
+        result['changed'] = True
+        result['commands'] = candidate
 
+    else:
+        result['commands'] = []
     module.exit_json(**result)
 
 
 if __name__ == '__main__':
     main()
-
diff --git a/test/sanity/pep8/legacy-files.txt b/test/sanity/pep8/legacy-files.txt
index 65ab2e4d4b..ff1d49a2b7 100644
--- a/test/sanity/pep8/legacy-files.txt
+++ b/test/sanity/pep8/legacy-files.txt
@@ -497,7 +497,6 @@ lib/ansible/modules/network/nxos/nxos_ntp.py
 lib/ansible/modules/network/nxos/nxos_ntp_auth.py
 lib/ansible/modules/network/nxos/nxos_ntp_options.py
 lib/ansible/modules/network/nxos/nxos_nxapi.py
-lib/ansible/modules/network/nxos/nxos_ospf.py
 lib/ansible/modules/network/nxos/nxos_ospf_vrf.py
 lib/ansible/modules/network/nxos/nxos_overlay_global.py
 lib/ansible/modules/network/nxos/nxos_pim.py
diff --git a/test/units/modules/network/nxos/test_nxos_ospf.py b/test/units/modules/network/nxos/test_nxos_ospf.py
new file mode 100644
index 0000000000..4e90168af2
--- /dev/null
+++ b/test/units/modules/network/nxos/test_nxos_ospf.py
@@ -0,0 +1,55 @@
+# (c) 2016 Red Hat Inc.
+#
+# This file is part of Ansible
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import json
+
+from ansible.compat.tests.mock import patch
+from ansible.modules.network.nxos import nxos_ospf
+from .nxos_module import TestNxosModule, load_fixture, set_module_args
+
+
+class TestNxosOspfModule(TestNxosModule):
+
+    module = nxos_ospf
+
+    def setUp(self):
+        self.mock_load_config = patch('ansible.modules.network.nxos.nxos_ospf.load_config')
+        self.load_config = self.mock_load_config.start()
+
+        self.mock_get_config = patch('ansible.modules.network.nxos.nxos_ospf.get_config')
+        self.get_config = self.mock_get_config.start()
+
+    def tearDown(self):
+        self.mock_load_config.stop()
+        self.mock_get_config.stop()
+
+    def load_fixtures(self, commands=None):
+        self.load_config.return_value = None
+
+    def test_nxos_ospf_present(self):
+        set_module_args(dict(ospf=1, state='present'))
+        result = self.execute_module(changed=True)
+        self.assertEqual(result['commands'], ['router ospf 1'])
+
+    def test_nxos_ospf_absent(self):
+        set_module_args(dict(ospf=1, state='absent'))
+        result = self.execute_module(changed=False)
+        self.assertEqual(result['commands'], [])
