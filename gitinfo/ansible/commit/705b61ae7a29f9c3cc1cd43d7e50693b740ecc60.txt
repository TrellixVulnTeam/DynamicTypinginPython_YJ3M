commit 705b61ae7a29f9c3cc1cd43d7e50693b740ecc60
Author: GGabriele <gabrielegerbino@gmail.com>
Date:   Sat Sep 3 01:20:37 2016 +0200

    Adding nxos_portchannel

diff --git a/lib/ansible/modules/network/nxos/nxos_vpc_interface.py b/lib/ansible/modules/network/nxos/nxos_vpc_interface.py
new file mode 100644
index 0000000000..f5b5dd1d5c
--- /dev/null
+++ b/lib/ansible/modules/network/nxos/nxos_vpc_interface.py
@@ -0,0 +1,1077 @@
+#!/usr/bin/python
+#
+# This file is part of Ansible
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+#
+
+DOCUMENTATION = '''
+---
+module: nxos_vpc_interface
+version_added: "2.2"
+short_description: Manages interface VPC configuration
+description:
+    - Manages interface VPC configuration
+extends_documentation_fragment: nxos
+author:
+    - Jason Edelman (@jedelman8)
+    - Gabriele Gerbino (@GGabriele)
+notes:
+    - Either vpc or peer_link param is required, but not both.
+    - C(state)=absent removes whatever VPC config is on a port-channel
+      if one exists.
+    - Re-assigning a vpc or peerlink from one portchannel to another is not
+      supported.  The module will force the user to unconfigure an existing
+      vpc/pl before configuring the same value on a new portchannel
+options:
+    portchannel:
+        description:
+            - group number of the portchannel that will be configured
+        required: true
+    vpc:
+        description:
+            - vpc group/id that will be configured on associated portchannel
+        required: false
+        default: null
+    peer_link:
+        description:
+            - Set to true/false for peer link config on assoicated portchannel
+        required: false
+        default: null
+    state:
+        description:
+            - Manages desired state of the resource
+        required: true
+        choices: ['present','absent']
+'''
+
+EXAMPLES = '''
+- nxos_vpc_portchannel:
+    portchannel=10
+    vpc=100
+    username: "{{ un }}"
+    password: "{{ pwd }}"
+    host: "{{ inventory_hostname }}"
+'''
+
+RETURN = '''
+proposed:
+    description: k/v pairs of parameters passed into module
+    returned: always
+    type: dict
+    sample: {"portchannel": "100", "vpc": "10"}
+existing:
+    description: k/v pairs of existing configuration
+    type: dict
+    sample: {}
+end_state:
+    description: k/v pairs of configuration after module execution
+    returned: always
+    type: dict
+    sample:  {"peer-link": false, "portchannel": "100", "vpc": "10"}
+updates:
+    description: commands sent to the device
+    returned: always
+    type: list
+    sample: ["interface port-channel100", "vpc 10"]
+changed:
+    description: check to see if a change was made on the device
+    returned: always
+    type: boolean
+    sample: true
+'''
+
+# COMMON CODE FOR MIGRATION
+
+import re
+import time
+import collections
+import itertools
+import shlex
+import json
+
+from ansible.module_utils.basic import AnsibleModule, env_fallback, get_exception
+from ansible.module_utils.basic import BOOLEANS_TRUE, BOOLEANS_FALSE
+from ansible.module_utils.shell import Shell, ShellError, HAS_PARAMIKO
+from ansible.module_utils.netcfg import parse
+from ansible.module_utils.urls import fetch_url
+
+
+DEFAULT_COMMENT_TOKENS = ['#', '!']
+
+class ConfigLine(object):
+
+    def __init__(self, text):
+        self.text = text
+        self.children = list()
+        self.parents = list()
+        self.raw = None
+
+    @property
+    def line(self):
+        line = ['set']
+        line.extend([p.text for p in self.parents])
+        line.append(self.text)
+        return ' '.join(line)
+
+    def __str__(self):
+        return self.raw
+
+    def __eq__(self, other):
+        if self.text == other.text:
+            return self.parents == other.parents
+
+    def __ne__(self, other):
+        return not self.__eq__(other)
+
+def ignore_line(text, tokens=None):
+    for item in (tokens or DEFAULT_COMMENT_TOKENS):
+        if text.startswith(item):
+            return True
+
+def get_next(iterable):
+    item, next_item = itertools.tee(iterable, 2)
+    next_item = itertools.islice(next_item, 1, None)
+    return itertools.izip_longest(item, next_item)
+
+def parse(lines, indent, comment_tokens=None):
+    toplevel = re.compile(r'\S')
+    childline = re.compile(r'^\s*(.+)$')
+
+    ancestors = list()
+    config = list()
+
+    for line in str(lines).split('\n'):
+        text = str(re.sub(r'([{};])', '', line)).strip()
+
+        cfg = ConfigLine(text)
+        cfg.raw = line
+
+        if not text or ignore_line(text, comment_tokens):
+            continue
+
+        # handle top level commands
+        if toplevel.match(line):
+            ancestors = [cfg]
+
+        # handle sub level commands
+        else:
+            match = childline.match(line)
+            line_indent = match.start(1)
+            level = int(line_indent / indent)
+            parent_level = level - 1
+
+            cfg.parents = ancestors[:level]
+
+            if level > len(ancestors):
+                config.append(cfg)
+                continue
+
+            for i in range(level, len(ancestors)):
+                ancestors.pop()
+
+            ancestors.append(cfg)
+            ancestors[parent_level].children.append(cfg)
+
+        config.append(cfg)
+
+    return config
+
+
+class CustomNetworkConfig(object):
+
+    def __init__(self, indent=None, contents=None, device_os=None):
+        self.indent = indent or 1
+        self._config = list()
+        self._device_os = device_os
+
+        if contents:
+            self.load(contents)
+
+    @property
+    def items(self):
+        return self._config
+
+    @property
+    def lines(self):
+        lines = list()
+        for item, next_item in get_next(self.items):
+            if next_item is None:
+                lines.append(item.line)
+            elif not next_item.line.startswith(item.line):
+                lines.append(item.line)
+        return lines
+
+    def __str__(self):
+        text = ''
+        for item in self.items:
+            if not item.parents:
+                expand = self.get_section(item.text)
+                text += '%s\n' % self.get_section(item.text)
+        return str(text).strip()
+
+    def load(self, contents):
+        self._config = parse(contents, indent=self.indent)
+
+    def load_from_file(self, filename):
+        self.load(open(filename).read())
+
+    def get(self, path):
+        if isinstance(path, basestring):
+            path = [path]
+        for item in self._config:
+            if item.text == path[-1]:
+                parents = [p.text for p in item.parents]
+                if parents == path[:-1]:
+                    return item
+
+    def search(self, regexp, path=None):
+        regex = re.compile(r'^%s' % regexp, re.M)
+
+        if path:
+            parent = self.get(path)
+            if not parent or not parent.children:
+                return
+            children = [c.text for c in parent.children]
+            data = '\n'.join(children)
+        else:
+            data = str(self)
+
+        match = regex.search(data)
+        if match:
+            if match.groups():
+                values = match.groupdict().values()
+                groups = list(set(match.groups()).difference(values))
+                return (groups, match.groupdict())
+            else:
+                return match.group()
+
+    def findall(self, regexp):
+        regexp = r'%s' % regexp
+        return re.findall(regexp, str(self))
+
+    def expand(self, obj, items):
+        block = [item.raw for item in obj.parents]
+        block.append(obj.raw)
+
+        current_level = items
+        for b in block:
+            if b not in current_level:
+                current_level[b] = collections.OrderedDict()
+            current_level = current_level[b]
+        for c in obj.children:
+            if c.raw not in current_level:
+                current_level[c.raw] = collections.OrderedDict()
+
+    def to_lines(self, section):
+        lines = list()
+        for entry in section[1:]:
+            line = ['set']
+            line.extend([p.text for p in entry.parents])
+            line.append(entry.text)
+            lines.append(' '.join(line))
+        return lines
+
+    def to_block(self, section):
+        return '\n'.join([item.raw for item in section])
+
+    def get_section(self, path):
+        try:
+            section = self.get_section_objects(path)
+            if self._device_os == 'junos':
+                return self.to_lines(section)
+            return self.to_block(section)
+        except ValueError:
+            return list()
+
+    def get_section_objects(self, path):
+        if not isinstance(path, list):
+            path = [path]
+        obj = self.get_object(path)
+        if not obj:
+            raise ValueError('path does not exist in config')
+        return self.expand_section(obj)
+
+    def expand_section(self, configobj, S=None):
+        if S is None:
+            S = list()
+        S.append(configobj)
+        for child in configobj.children:
+            if child in S:
+                continue
+            self.expand_section(child, S)
+        return S
+
+    def flatten(self, data, obj=None):
+        if obj is None:
+            obj = list()
+        for k, v in data.items():
+            obj.append(k)
+            self.flatten(v, obj)
+        return obj
+
+    def get_object(self, path):
+        for item in self.items:
+            if item.text == path[-1]:
+                parents = [p.text for p in item.parents]
+                if parents == path[:-1]:
+                    return item
+
+    def get_children(self, path):
+        obj = self.get_object(path)
+        if obj:
+            return obj.children
+
+    def difference(self, other, path=None, match='line', replace='line'):
+        updates = list()
+
+        config = self.items
+        if path:
+            config = self.get_children(path) or list()
+
+        if match == 'line':
+            for item in config:
+                if item not in other.items:
+                    updates.append(item)
+
+        elif match == 'strict':
+            if path:
+                current = other.get_children(path) or list()
+            else:
+                current = other.items
+
+            for index, item in enumerate(config):
+                try:
+                    if item != current[index]:
+                        updates.append(item)
+                except IndexError:
+                    updates.append(item)
+
+        elif match == 'exact':
+            if path:
+                current = other.get_children(path) or list()
+            else:
+                current = other.items
+
+            if len(current) != len(config):
+                updates.extend(config)
+            else:
+                for ours, theirs in itertools.izip(config, current):
+                    if ours != theirs:
+                        updates.extend(config)
+                        break
+
+        if self._device_os == 'junos':
+            return updates
+
+        diffs = collections.OrderedDict()
+        for update in updates:
+            if replace == 'block' and update.parents:
+                update = update.parents[-1]
+            self.expand(update, diffs)
+
+        return self.flatten(diffs)
+
+    def replace(self, replace, text=None, regex=None, parents=None,
+            add_if_missing=False, ignore_whitespace=False):
+        match = None
+
+        parents = parents or list()
+        if text is None and regex is None:
+            raise ValueError('missing required arguments')
+
+        if not regex:
+            regex = ['^%s$' % text]
+
+        patterns = [re.compile(r, re.I) for r in to_list(regex)]
+
+        for item in self.items:
+            for regexp in patterns:
+                if ignore_whitespace is True:
+                    string = item.text
+                else:
+                    string = item.raw
+                if regexp.search(item.text):
+                    if item.text != replace:
+                        if parents == [p.text for p in item.parents]:
+                            match = item
+                            break
+
+        if match:
+            match.text = replace
+            indent = len(match.raw) - len(match.raw.lstrip())
+            match.raw = replace.rjust(len(replace) + indent)
+
+        elif add_if_missing:
+            self.add(replace, parents=parents)
+
+
+    def add(self, lines, parents=None):
+        """Adds one or lines of configuration
+        """
+
+        ancestors = list()
+        offset = 0
+        obj = None
+
+        ## global config command
+        if not parents:
+            for line in to_list(lines):
+                item = ConfigLine(line)
+                item.raw = line
+                if item not in self.items:
+                    self.items.append(item)
+
+        else:
+            for index, p in enumerate(parents):
+                try:
+                    i = index + 1
+                    obj = self.get_section_objects(parents[:i])[0]
+                    ancestors.append(obj)
+
+                except ValueError:
+                    # add parent to config
+                    offset = index * self.indent
+                    obj = ConfigLine(p)
+                    obj.raw = p.rjust(len(p) + offset)
+                    if ancestors:
+                        obj.parents = list(ancestors)
+                        ancestors[-1].children.append(obj)
+                    self.items.append(obj)
+                    ancestors.append(obj)
+
+            # add child objects
+            for line in to_list(lines):
+                # check if child already exists
+                for child in ancestors[-1].children:
+                    if child.text == line:
+                        break
+                else:
+                    offset = len(parents) * self.indent
+                    item = ConfigLine(line)
+                    item.raw = line.rjust(len(line) + offset)
+                    item.parents = ancestors
+                    ancestors[-1].children.append(item)
+                    self.items.append(item)
+
+
+def argument_spec():
+    return dict(
+        # config options
+        running_config=dict(aliases=['config']),
+        save_config=dict(type='bool', default=False, aliases=['save'])
+    )
+nxos_argument_spec = argument_spec()
+
+
+NET_PASSWD_RE = re.compile(r"[\r\n]?password: $", re.I)
+
+NET_COMMON_ARGS = dict(
+    host=dict(required=True),
+    port=dict(type='int'),
+    username=dict(fallback=(env_fallback, ['ANSIBLE_NET_USERNAME'])),
+    password=dict(no_log=True, fallback=(env_fallback, ['ANSIBLE_NET_PASSWORD'])),
+    ssh_keyfile=dict(fallback=(env_fallback, ['ANSIBLE_NET_SSH_KEYFILE']), type='path'),
+    transport=dict(default='cli', choices=['cli', 'nxapi']),
+    use_ssl=dict(default=False, type='bool'),
+    validate_certs=dict(default=True, type='bool'),
+    provider=dict(type='dict'),
+    timeout=dict(default=10, type='int')
+)
+
+NXAPI_COMMAND_TYPES = ['cli_show', 'cli_show_ascii', 'cli_conf', 'bash']
+
+NXAPI_ENCODINGS = ['json', 'xml']
+
+CLI_PROMPTS_RE = [
+    re.compile(r'[\r\n]?[a-zA-Z]{1}[a-zA-Z0-9-]*[>|#|%](?:\s*)$'),
+    re.compile(r'[\r\n]?[a-zA-Z]{1}[a-zA-Z0-9-]*\(.+\)#(?:\s*)$')
+]
+
+CLI_ERRORS_RE = [
+    re.compile(r"% ?Error"),
+    re.compile(r"^% \w+", re.M),
+    re.compile(r"% ?Bad secret"),
+    re.compile(r"invalid input", re.I),
+    re.compile(r"(?:incomplete|ambiguous) command", re.I),
+    re.compile(r"connection timed out", re.I),
+    re.compile(r"[^\r\n]+ not found", re.I),
+    re.compile(r"'[^']' +returned error code: ?\d+"),
+    re.compile(r"syntax error"),
+    re.compile(r"unknown command")
+]
+
+
+def to_list(val):
+    if isinstance(val, (list, tuple)):
+        return list(val)
+    elif val is not None:
+        return [val]
+    else:
+        return list()
+
+
+class Nxapi(object):
+
+    def __init__(self, module):
+        self.module = module
+
+        # sets the module_utils/urls.py req parameters
+        self.module.params['url_username'] = module.params['username']
+        self.module.params['url_password'] = module.params['password']
+
+        self.url = None
+        self._nxapi_auth = None
+
+    def _get_body(self, commands, command_type, encoding, version='1.0', chunk='0', sid=None):
+        """Encodes a NXAPI JSON request message
+        """
+        if isinstance(commands, (list, set, tuple)):
+            commands = ' ;'.join(commands)
+
+        if encoding not in NXAPI_ENCODINGS:
+            msg = 'invalid encoding, received %s, exceped one of %s' % \
+                    (encoding, ','.join(NXAPI_ENCODINGS))
+            self.module_fail_json(msg=msg)
+
+        msg = {
+            'version': version,
+            'type': command_type,
+            'chunk': chunk,
+            'sid': sid,
+            'input': commands,
+            'output_format': encoding
+        }
+        return dict(ins_api=msg)
+
+    def connect(self):
+        host = self.module.params['host']
+        port = self.module.params['port']
+
+        if self.module.params['use_ssl']:
+            proto = 'https'
+            if not port:
+                port = 443
+        else:
+            proto = 'http'
+            if not port:
+                port = 80
+
+        self.url = '%s://%s:%s/ins' % (proto, host, port)
+
+    def send(self, commands, command_type='cli_show_ascii', encoding='json'):
+        """Send commands to the device.
+        """
+        clist = to_list(commands)
+
+        if command_type not in NXAPI_COMMAND_TYPES:
+            msg = 'invalid command_type, received %s, exceped one of %s' % \
+                    (command_type, ','.join(NXAPI_COMMAND_TYPES))
+            self.module_fail_json(msg=msg)
+
+        data = self._get_body(clist, command_type, encoding)
+        data = self.module.jsonify(data)
+
+        headers = {'Content-Type': 'application/json'}
+        if self._nxapi_auth:
+            headers['Cookie'] = self._nxapi_auth
+
+        response, headers = fetch_url(self.module, self.url, data=data,
+                headers=headers, method='POST')
+
+        self._nxapi_auth = headers.get('set-cookie')
+
+        if headers['status'] != 200:
+            self.module.fail_json(**headers)
+
+        response = self.module.from_json(response.read())
+        result = list()
+
+        output = response['ins_api']['outputs']['output']
+        for item in to_list(output):
+            if item['code'] != '200':
+                self.module.fail_json(**item)
+            else:
+                result.append(item['body'])
+
+        return result
+
+
+class Cli(object):
+
+    def __init__(self, module):
+        self.module = module
+        self.shell = None
+
+    def connect(self, **kwargs):
+        host = self.module.params['host']
+        port = self.module.params['port'] or 22
+
+        username = self.module.params['username']
+        password = self.module.params['password']
+        timeout = self.module.params['timeout']
+        key_filename = self.module.params['ssh_keyfile']
+
+        allow_agent = (key_filename is not None) or (key_filename is None and password is None)
+
+        try:
+            self.shell = Shell(kickstart=False, prompts_re=CLI_PROMPTS_RE,
+                    errors_re=CLI_ERRORS_RE)
+            self.shell.open(host, port=port, username=username,
+                    password=password, key_filename=key_filename,
+                    allow_agent=allow_agent, timeout=timeout)
+        except ShellError:
+            e = get_exception()
+            msg = 'failed to connect to %s:%s - %s' % (host, port, str(e))
+            self.module.fail_json(msg=msg)
+
+    def send(self, commands, encoding='text'):
+        try:
+            return self.shell.send(commands)
+        except ShellError:
+            e = get_exception()
+            self.module.fail_json(msg=e.message, commands=commands)
+
+
+class NetworkModule(AnsibleModule):
+
+    def __init__(self, *args, **kwargs):
+        super(NetworkModule, self).__init__(*args, **kwargs)
+        self.connection = None
+        self._config = None
+        self._connected = False
+
+    @property
+    def connected(self):
+        return self._connected
+
+    @property
+    def config(self):
+        if not self._config:
+            self._config = self.get_config()
+        return self._config
+
+    def _load_params(self):
+        super(NetworkModule, self)._load_params()
+        provider = self.params.get('provider') or dict()
+        for key, value in provider.items():
+            if key in NET_COMMON_ARGS:
+                if self.params.get(key) is None and value is not None:
+                    self.params[key] = value
+
+    def connect(self):
+        cls = globals().get(str(self.params['transport']).capitalize())
+        try:
+            self.connection = cls(self)
+        except TypeError:
+            e = get_exception()
+            self.fail_json(msg=e.message)
+
+        self.connection.connect()
+
+        if self.params['transport'] == 'cli':
+            self.connection.send('terminal length 0')
+
+        self._connected = True
+
+    def configure(self, commands):
+        commands = to_list(commands)
+        if self.params['transport'] == 'cli':
+            return self.configure_cli(commands)
+        else:
+            return self.execute(commands, command_type='cli_conf')
+
+    def configure_cli(self, commands):
+        commands = to_list(commands)
+        commands.insert(0, 'configure')
+        responses = self.execute(commands)
+        responses.pop(0)
+        return responses
+
+    def execute(self, commands, **kwargs):
+        if not self.connected:
+            self.connect()
+        return self.connection.send(commands, **kwargs)
+
+    def disconnect(self):
+        self.connection.close()
+        self._connected = False
+
+    def parse_config(self, cfg):
+        return parse(cfg, indent=2)
+
+    def get_config(self):
+        cmd = 'show running-config'
+        if self.params.get('include_defaults'):
+            cmd += ' all'
+        response = self.execute(cmd)
+        return response[0]
+
+
+def get_module(**kwargs):
+    """Return instance of NetworkModule
+    """
+    argument_spec = NET_COMMON_ARGS.copy()
+    if kwargs.get('argument_spec'):
+        argument_spec.update(kwargs['argument_spec'])
+    kwargs['argument_spec'] = argument_spec
+
+    module = NetworkModule(**kwargs)
+
+    if module.params['transport'] == 'cli' and not HAS_PARAMIKO:
+        module.fail_json(msg='paramiko is required but does not appear to be installed')
+
+    return module
+
+
+def custom_get_config(module, include_defaults=False):
+    config = module.params['running_config']
+    if not config:
+        cmd = 'show running-config'
+        if module.params['include_defaults']:
+            cmd += ' all'
+        if module.params['transport'] == 'nxapi':
+            config = module.execute([cmd], command_type='cli_show_ascii')[0]
+        else:
+            config = module.execute([cmd])[0]
+
+    return CustomNetworkConfig(indent=2, contents=config)
+
+def load_config(module, candidate):
+    config = custom_get_config(module)
+
+    commands = candidate.difference(config)
+    commands = [str(c).strip() for c in commands]
+
+    save_config = module.params['save_config']
+
+    result = dict(changed=False)
+
+    if commands:
+        if not module.check_mode:
+            module.configure(commands)
+            if save_config:
+                module.config.save_config()
+
+        result['changed'] = True
+        result['updates'] = commands
+
+    return result
+# END OF COMMON CODE
+
+def execute_config_command(commands, module):
+    try:
+        output = module.configure(commands)
+    except ShellError:
+        clie = get_exception()
+        module.fail_json(msg='Error sending CLI commands',
+                         error=str(clie), commands=commands)
+    return output
+
+
+def get_cli_body_ssh(command, response, module):
+    """Get response for when transport=cli.  This is kind of a hack and mainly
+    needed because these modules were originally written for NX-API.  And
+    not every command supports "| json" when using cli/ssh.
+    """
+    if '^' == response[0]:
+        body = []
+    elif 'running' in command or 'xml' in response[0]:
+        body = response
+    else:
+        try:
+            body = [json.loads(response[0])]
+        except ValueError:
+            module.fail_json(msg='Command does not support JSON output',
+                             command=command)
+    return body
+
+
+def execute_show(cmds, module, command_type=None):
+    try:
+        if command_type:
+            response = module.execute(cmds, command_type=command_type)
+        else:
+            response = module.execute(cmds)
+    except ShellError:
+        clie = get_exception()
+        module.fail_json(msg='Error sending {0}'.format(cmds),
+                         error=str(clie))
+    return response
+
+
+def execute_show_command(command, module, command_type='cli_show'):
+    if module.params['transport'] == 'cli':
+        command += ' | json'
+        cmds = [command]
+        response = execute_show(cmds, module)
+        body = get_cli_body_ssh(command, response, module)
+    elif module.params['transport'] == 'nxapi':
+        cmds = [command]
+        body = execute_show(cmds, module, command_type=command_type)
+
+    return body
+
+
+def flatten_list(command_lists):
+    flat_command_list = []
+    for command in command_lists:
+        if isinstance(command, list):
+            flat_command_list.extend(command)
+        else:
+            flat_command_list.append(command)
+    return flat_command_list
+
+
+def get_portchannel_list(module):
+    command = 'show port-channel summary'
+    portchannels = []
+    pc_list = []
+
+    body = execute_show_command(command, module)
+
+    try:
+        pc_list = body[0]['TABLE_channel']['ROW_channel']
+    except (KeyError, AttributeError):
+        return portchannels
+
+    if pc_list:
+        if isinstance(pc_list, dict):
+            pc_list = [pc_list]
+
+        for pc in pc_list:
+            portchannels.append(pc['group'])
+
+    return portchannels
+
+
+def get_existing_portchannel_to_vpc_mappings(module):
+    command = 'show vpc brief'
+    pc_vpc_mapping = {}
+
+    body = execute_show_command(command, module)
+
+    try:
+        vpc_table = body[0]['TABLE_vpc']['ROW_vpc']
+    except (KeyError, AttributeError, TypeError):
+        vpc_table = None
+
+    if vpc_table:
+        if isinstance(vpc_table, dict):
+            vpc_table = [vpc_table]
+
+        for vpc in vpc_table:
+            pc_vpc_mapping[str(vpc['vpc-id'])] = str(vpc['vpc-ifindex'])
+
+    return pc_vpc_mapping
+
+
+def peer_link_exists(module):
+    found = False
+    run = get_vpc_running_config(module)
+
+    vpc_list = run.split('\n')
+    for each in vpc_list:
+        if 'peer-link' in each:
+            found = True
+    return found
+
+
+def get_vpc_running_config(module):
+    command = 'show running section vpc'
+    body = execute_show_command(command, module,
+                                command_type='cli_show_ascii')[0]
+
+    return body
+
+
+def get_active_vpc_peer_link(module):
+    command = 'show vpc brief'
+    peer_link = None
+    body = execute_show_command(command, module)
+    try:
+        peer_link = body[0]['TABLE_peerlink']['ROW_peerlink']['peerlink-ifindex']
+    except (KeyError, AttributeError):
+        return peer_link
+
+    return peer_link
+
+
+def get_portchannel_vpc_config(module, portchannel):
+    command = 'show vpc brief'
+    peer_link_pc = None
+    peer_link = False
+    vpc = ""
+    pc = ""
+    config = {}
+
+    body = execute_show_command(command, module)
+
+    try:
+        table = body[0]['TABLE_peerlink']['ROW_peerlink']
+    except (KeyError, AttributeError, TypeError):
+        table = {}
+
+    if table:
+        peer_link_pc = table.get('peerlink-ifindex', None)
+
+    if peer_link_pc:
+        plpc = str(peer_link_pc[2:])
+        if portchannel == plpc:
+            config['portchannel'] = portchannel
+            config['peer-link'] = True
+            config['vpc'] = vpc
+
+    mapping = get_existing_portchannel_to_vpc_mappings(module)
+
+    for existing_vpc, port_channel in mapping.iteritems():
+        port_ch = str(port_channel[2:])
+        if port_ch == portchannel:
+            pc = port_ch
+            vpc = str(existing_vpc)
+
+            config['portchannel'] = pc
+            config['peer-link'] = peer_link
+            config['vpc'] = vpc
+
+    return config
+
+
+def get_commands_to_config_vpc_interface(portchannel, delta, config_value, existing):
+    commands = []
+
+    if delta.get('peer-link') is False and existing.get('peer-link') is True:
+        command = 'no vpc peer-link'
+        commands.append('no vpc peer-link')
+        commands.insert(0, 'interface port-channel{0}'.format(portchannel))
+
+    elif delta.get('peer-link') or not existing.get('vpc'):
+        command = 'vpc {0}'.format(config_value)
+        commands.append(command)
+        commands.insert(0, 'interface port-channel{0}'.format(portchannel))
+
+    return commands
+
+
+def main():
+    argument_spec = dict(
+            portchannel=dict(required=True, type='str'),
+            vpc=dict(required=False, type='str'),
+            peer_link=dict(required=False, type='bool'),
+            state=dict(choices=['absent', 'present'], default='present'),
+    )
+    module = get_module(argument_spec=argument_spec,
+                        mutually_exclusive=[['vpc', 'peer_link']],
+                        supports_check_mode=True)
+
+    portchannel = module.params['portchannel']
+    vpc = module.params['vpc']
+    peer_link = module.params['peer_link']
+    state = module.params['state']
+
+    changed = False
+    args = {'portchannel': portchannel, 'vpc': vpc, 'peer-link': peer_link}
+    active_peer_link = None
+
+    if portchannel not in get_portchannel_list(module):
+        module.fail_json(msg="The portchannel you are trying to make a"
+                             " VPC or PL is not created yet. "
+                             "Create it first!")
+    if vpc:
+        mapping = get_existing_portchannel_to_vpc_mappings(module)
+
+        if vpc in mapping.keys() and portchannel != mapping[vpc].strip('Po'):
+            module.fail_json(msg="This vpc is already configured on "
+                                 "another portchannel.  Remove it first "
+                                 "before trying to assign it here. ",
+                             existing_portchannel=mapping[vpc])
+
+        for vpcid, existing_pc in mapping.iteritems():
+            if portchannel == existing_pc.strip('Po') and vpcid != vpc:
+                module.fail_json(msg="This portchannel already has another"
+                                     " VPC configured.  Remove it first "
+                                     "before assigning this one",
+                                 existing_vpc=vpcid)
+
+        if peer_link_exists(module):
+            active_peer_link = get_active_vpc_peer_link(module)
+            if active_peer_link[-2:] == portchannel:
+                module.fail_json(msg="That port channel is the current "
+                                     "PEER LINK.  Remove it if you want it"
+                                     " to be a VPC")
+        config_value = vpc
+
+    elif peer_link is not None:
+        if peer_link_exists(module):
+            active_peer_link = get_active_vpc_peer_link(module)[2::]
+            if active_peer_link != portchannel:
+                if peer_link:
+                    module.fail_json(msg="A peer link already exists on"
+                                         " the device.  Remove it first",
+                                     current_peer_link='Po{0}'.format(
+                                     active_peer_link))
+        config_value = 'peer-link'
+
+
+    proposed = dict((k, v) for k, v in args.iteritems() if v is not None)
+    existing = get_portchannel_vpc_config(module, portchannel)
+    end_state = existing
+    commands = []
+
+    if state == 'present':
+        delta = dict(set(proposed.iteritems()).difference(existing.iteritems()))
+        if delta:
+            command = get_commands_to_config_vpc_interface(
+                portchannel,
+                delta,
+                config_value,
+                existing
+                )
+            commands.append(command)
+
+    elif state == 'absent':
+        if existing.get('vpc'):
+            command = ['no vpc']
+            commands.append(command)
+        elif existing.get('peer-link'):
+            command = ['no vpc peer-link']
+            commands.append(command)
+        if commands:
+            commands.insert(0, ['interface port-channel{0}'.format(portchannel)])
+
+    cmds = flatten_list(commands)
+    if cmds:
+        if module.check_mode:
+            module.exit_json(changed=True, commands=cmds)
+        else:
+            changed = True
+            output = execute_config_command(cmds, module)
+            if module.params['transport'] == 'cli':
+                output = ' '.join(output)
+                if 'error' in output.lower():
+                    module.fail_json(msg=output.replace('\n', ''))
+            end_state = get_portchannel_vpc_config(module, portchannel)
+
+    results = {}
+    results['proposed'] = proposed
+    results['existing'] = existing
+    results['end_state'] = end_state
+    results['updates'] = cmds
+    results['changed'] = changed
+
+    module.exit_json(**results)
+
+
+if __name__ == '__main__':
+    main()
