commit 36a545553e9a9f5a2b964a5b018c18a75ef429b3
Author: Ansible Core Team <info@ansible.com>
Date:   Mon Mar 9 09:40:36 2020 +0000

    Migrated to dellemc_networking.os6

diff --git a/lib/ansible/module_utils/network/dellos6/dellos6.py b/lib/ansible/module_utils/network/dellos6/dellos6.py
deleted file mode 100644
index 545a82757f..0000000000
--- a/lib/ansible/module_utils/network/dellos6/dellos6.py
+++ /dev/null
@@ -1,270 +0,0 @@
-#
-# (c) 2015 Peter Sprygada, <psprygada@ansible.com>
-# (c) 2017 Red Hat, Inc
-#
-# Copyright (c) 2016 Dell Inc.
-#
-# This code is part of Ansible, but is an independent component.
-# This particular file snippet, and this file snippet only, is BSD licensed.
-# Modules you write using this snippet, which is embedded dynamically by Ansible
-# still belong to the author of the module, and may assign their own license
-# to the complete work.
-#
-# Redistribution and use in source and binary forms, with or without modification,
-# are permitted provided that the following conditions are met:
-#
-#    * Redistributions of source code must retain the above copyright
-#      notice, this list of conditions and the following disclaimer.
-#    * Redistributions in binary form must reproduce the above copyright notice,
-#      this list of conditions and the following disclaimer in the documentation
-#      and/or other materials provided with the distribution.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
-# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
-# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
-# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-#
-import re
-import json
-
-from ansible.module_utils._text import to_text
-from ansible.module_utils.basic import env_fallback
-from ansible.module_utils.network.common.utils import to_list, ComplexList
-from ansible.module_utils.connection import Connection, ConnectionError, exec_command
-from ansible.module_utils.network.common.config import NetworkConfig, ConfigLine, ignore_line
-
-_DEVICE_CONFIGS = {}
-
-WARNING_PROMPTS_RE = [
-    r"[\r\n]?\[confirm yes/no\]:\s?$",
-    r"[\r\n]?\[y/n\]:\s?$",
-    r"[\r\n]?\[yes/no\]:\s?$"
-]
-
-dellos6_provider_spec = {
-    'host': dict(),
-    'port': dict(type='int'),
-    'username': dict(fallback=(env_fallback, ['ANSIBLE_NET_USERNAME'])),
-    'password': dict(fallback=(env_fallback, ['ANSIBLE_NET_PASSWORD']), no_log=True),
-    'ssh_keyfile': dict(fallback=(env_fallback, ['ANSIBLE_NET_SSH_KEYFILE']), type='path'),
-    'authorize': dict(fallback=(env_fallback, ['ANSIBLE_NET_AUTHORIZE']), type='bool'),
-    'auth_pass': dict(fallback=(env_fallback, ['ANSIBLE_NET_AUTH_PASS']), no_log=True),
-    'timeout': dict(type='int'),
-}
-dellos6_argument_spec = {
-    'provider': dict(type='dict', options=dellos6_provider_spec),
-}
-dellos6_top_spec = {
-    'host': dict(removed_in_version=2.9),
-    'port': dict(removed_in_version=2.9, type='int'),
-    'username': dict(removed_in_version=2.9),
-    'password': dict(removed_in_version=2.9, no_log=True),
-    'ssh_keyfile': dict(removed_in_version=2.9, type='path'),
-    'authorize': dict(removed_in_version=2.9, type='bool'),
-    'auth_pass': dict(removed_in_version=2.9, no_log=True),
-    'timeout': dict(removed_in_version=2.9, type='int'),
-}
-dellos6_argument_spec.update(dellos6_top_spec)
-
-
-def get_provider_argspec():
-    return dellos6_provider_spec
-
-
-def get_connection(module):
-    if hasattr(module, '_dellos6_connection'):
-        return module._dellos6_connection
-
-    capabilities = get_capabilities(module)
-    network_api = capabilities.get('network_api')
-    if network_api == 'cliconf':
-        module._dellos6_connection = Connection(module._socket_path)
-    else:
-        module.fail_json(msg='Invalid connection type %s' % network_api)
-
-    return module._dellos6_connection
-
-
-def get_capabilities(module):
-    if hasattr(module, '_dellos6_capabilities'):
-        return module._dellos6_capabilities
-    try:
-        capabilities = Connection(module._socket_path).get_capabilities()
-    except ConnectionError as exc:
-        module.fail_json(msg=to_text(exc, errors='surrogate_then_replace'))
-    module._dellos6_capabilities = json.loads(capabilities)
-    return module._dellos6_capabilities
-
-
-def check_args(module, warnings):
-    pass
-
-
-def get_config(module, flags=None):
-    flags = [] if flags is None else flags
-
-    cmd = 'show running-config '
-    cmd += ' '.join(flags)
-    cmd = cmd.strip()
-
-    try:
-        return _DEVICE_CONFIGS[cmd]
-    except KeyError:
-        rc, out, err = exec_command(module, cmd)
-        if rc != 0:
-            module.fail_json(msg='unable to retrieve current config', stderr=to_text(err, errors='surrogate_or_strict'))
-        cfg = to_text(out, errors='surrogate_or_strict').strip()
-        _DEVICE_CONFIGS[cmd] = cfg
-        return cfg
-
-
-def run_commands(module, commands, check_rc=True):
-    connection = get_connection(module)
-    try:
-        return connection.run_commands(commands=commands, check_rc=check_rc)
-    except ConnectionError as exc:
-        module.fail_json(msg=to_text(exc))
-
-
-def load_config(module, commands):
-    rc, out, err = exec_command(module, 'configure terminal')
-    if rc != 0:
-        module.fail_json(msg='unable to enter configuration mode', err=to_text(err, errors='surrogate_or_strict'))
-
-    for command in to_list(commands):
-        if command == 'end':
-            continue
-#        cmd = {'command': command, 'prompt': WARNING_PROMPTS_RE, 'answer': 'yes'}
-        rc, out, err = exec_command(module, command)
-        if rc != 0:
-            module.fail_json(msg=to_text(err, errors='surrogate_or_strict'), command=command, rc=rc)
-    exec_command(module, 'end')
-
-
-def get_sublevel_config(running_config, module):
-    contents = list()
-    current_config_contents = list()
-    sublevel_config = Dellos6NetworkConfig(indent=0)
-    obj = running_config.get_object(module.params['parents'])
-    if obj:
-        contents = obj._children
-    for c in contents:
-        if isinstance(c, ConfigLine):
-            current_config_contents.append(c.raw)
-    sublevel_config.add(current_config_contents, module.params['parents'])
-    return sublevel_config
-
-
-def os6_parse(lines, indent=None, comment_tokens=None):
-    sublevel_cmds = [
-        re.compile(r'^vlan !(priority).*$'),
-        re.compile(r'^stack.*$'),
-        re.compile(r'^interface.*$'),
-        re.compile(r'datacenter-bridging.*$'),
-        re.compile(r'line (console|telnet|ssh).*$'),
-        re.compile(r'ip ssh !(server).*$'),
-        re.compile(r'(ip|mac|management|arp) access-list.*$'),
-        re.compile(r'ip dhcp pool.*$'),
-        re.compile(r'ip vrf !(forwarding).*$'),
-        re.compile(r'ipv6 (dhcp pool|router).*$'),
-        re.compile(r'mail-server.*$'),
-        re.compile(r'vpc domain.*$'),
-        re.compile(r'router.*$'),
-        re.compile(r'route-map.*$'),
-        re.compile(r'policy-map.*$'),
-        re.compile(r'((class-map match-(all|any))|(class\s)).*$'),
-        re.compile(r'captive-portal.*$'),
-        re.compile(r'admin-profile.*$'),
-        re.compile(r'link-dependency group.*$'),
-        re.compile(r'banner motd.*$'),
-        re.compile(r'openflow.*$'),
-        re.compile(r'support-assist.*$'),
-        re.compile(r'template.*$'),
-        re.compile(r'address-family.*$'),
-        re.compile(r'spanning-tree mst configuration.*$'),
-        re.compile(r'logging (?!.*(cli-command|buffered|console|email|facility|file|monitor|protocol|snmp|source-interface|traps|web-session)).*$'),
-        re.compile(r'(radius-server|tacacs-server) host.*$'),
-        re.compile(r'radius server (auth|acct).*$'),
-        re.compile(r'aaa server radius dynamic-author.*$')]
-
-    childline = re.compile(r'^exit$')
-    config = list()
-    parent = list()
-    children = []
-    parent_match = False
-    for line in str(lines).split('\n'):
-        text = str(re.sub(r'([{};])', '', line)).strip()
-        cfg = ConfigLine(text)
-        cfg.raw = line
-        if not text or ignore_line(text, comment_tokens):
-            continue
-
-        else:
-            parent_match = False
-            # handle sublevel parent
-            for pr in sublevel_cmds:
-                if pr.match(line):
-                    if len(parent) != 0:
-                        cfg._parents.extend(parent)
-                    parent.append(cfg)
-                    config.append(cfg)
-                    if children:
-                        children.insert(len(parent) - 1, [])
-                        children[len(parent) - 2].append(cfg)
-                    parent_match = True
-                    continue
-            # handle exit
-            if childline.match(line):
-                if children:
-                    parent[len(children) - 1]._children.extend(children[len(children) - 1])
-                    if len(children) > 1:
-                        parent[len(children) - 2]._children.extend(parent[len(children) - 1]._children)
-                    cfg._parents.extend(parent)
-                    children.pop()
-                    parent.pop()
-                if not children:
-                    children = list()
-                    if parent:
-                        cfg._parents.extend(parent)
-                    parent = list()
-                config.append(cfg)
-            # handle sublevel children
-            elif parent_match is False and len(parent) > 0:
-                if not children:
-                    cfglist = [cfg]
-                    children.append(cfglist)
-                else:
-                    children[len(parent) - 1].append(cfg)
-                cfg._parents.extend(parent)
-                config.append(cfg)
-            # handle global commands
-            elif not parent:
-                config.append(cfg)
-    return config
-
-
-class Dellos6NetworkConfig(NetworkConfig):
-
-    def load(self, contents):
-        self._items = os6_parse(contents, self._indent)
-
-    def _diff_line(self, other, path=None):
-        diff = list()
-        for item in self.items:
-            if str(item) == "exit":
-                for diff_item in diff:
-                    if diff_item._parents:
-                        if item._parents == diff_item._parents:
-                            diff.append(item)
-                            break
-                    else:
-                        diff.append(item)
-                        break
-            elif item not in other:
-                diff.append(item)
-        return diff
diff --git a/lib/ansible/modules/network/dellos6/dellos6_command.py b/lib/ansible/modules/network/dellos6/dellos6_command.py
deleted file mode 100644
index 4c1933756b..0000000000
--- a/lib/ansible/modules/network/dellos6/dellos6_command.py
+++ /dev/null
@@ -1,230 +0,0 @@
-#!/usr/bin/python
-# -*- coding: utf-8 -*-
-
-# Copyright: (c) 2015, Peter Sprygada <psprygada@ansible.com>
-# Copyright: (c) 2016, Dell Inc.
-# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
-
-from __future__ import absolute_import, division, print_function
-__metaclass__ = type
-
-
-ANSIBLE_METADATA = {'metadata_version': '1.1',
-                    'status': ['preview'],
-                    'supported_by': 'community'}
-
-DOCUMENTATION = """
----
-module: dellos6_command
-version_added: "2.2"
-author: "Abirami N (@abirami-n)"
-short_description: Run commands on remote devices running Dell OS6
-description:
-  - Sends arbitrary commands to a Dell OS6 node and returns the results
-    read from the device. This module includes an
-    argument that will cause the module to wait for a specific condition
-    before returning or timing out if the condition is not met.
-  - This module does not support running commands in configuration mode.
-    Please use M(dellos6_config) to configure Dell OS6 devices.
-extends_documentation_fragment: dellos6
-options:
-  commands:
-    description:
-      - List of commands to send to the remote dellos6 device over the
-        configured provider. The resulting output from the command
-        is returned. If the I(wait_for) argument is provided, the
-        module is not returned until the condition is satisfied or
-        the number of retries has expired. If a command sent to the
-        device requires answering a prompt, it is possible to pass
-        a dict containing I(command), I(answer) and I(prompt).
-        Common answers are 'yes' or "\\r" (carriage return, must be
-        double quotes). See examples.
-    type: list
-    required: true
-  wait_for:
-    description:
-      - List of conditions to evaluate against the output of the
-        command. The task will wait for each condition to be true
-        before moving forward. If the conditional is not true
-        within the configured number of retries, the task fails.
-        See examples.
-    type: list
-    version_added: "2.2"
-  match:
-    description:
-      - The I(match) argument is used in conjunction with the
-        I(wait_for) argument to specify the match policy.  Valid
-        values are C(all) or C(any).  If the value is set to C(all)
-        then all conditionals in the wait_for must be satisfied.  If
-        the value is set to C(any) then only one of the values must be
-        satisfied.
-    type: str
-    default: all
-    choices: [ 'all', 'any' ]
-    version_added: "2.5"
-  retries:
-    description:
-      - Specifies the number of retries a command should be tried
-        before it is considered failed. The command is run on the
-        target device every retry and evaluated against the
-        I(wait_for) conditions.
-    type: int
-    default: 10
-  interval:
-    description:
-      - Configures the interval in seconds to wait between retries
-        of the command. If the command does not pass the specified
-        conditions, the interval indicates how long to wait before
-        trying the command again.
-    type: int
-    default: 1
-"""
-
-EXAMPLES = """
-tasks:
-  - name: run show version on remote devices
-    dellos6_command:
-      commands: show version
-
-  - name: run show version and check to see if output contains Dell
-    dellos6_command:
-      commands: show version
-      wait_for: result[0] contains Dell
-
-  - name: run multiple commands on remote nodes
-    dellos6_command:
-      commands:
-       - show version
-       - show interfaces
-
-  - name: run multiple commands and evaluate the output
-    dellos6_command:
-      commands:
-       - show version
-       - show interfaces
-      wait_for:
-       - result[0] contains Dell
-       - result[1] contains Access
-
-  - name: run commands that require answering a prompt
-    dellos6_command:
-      commands:
-        - command: 'copy running-config startup-config'
-          prompt: '[confirm yes/no]: ?$'
-          answer: 'yes'
-"""
-
-RETURN = """
-stdout:
-  description: The set of responses from the commands
-  returned: always apart from low level errors (such as action plugin)
-  type: list
-  sample: ['...', '...']
-stdout_lines:
-  description: The value of stdout split into a list
-  returned: always apart from low level errors (such as action plugin)
-  type: list
-  sample: [['...', '...'], ['...'], ['...']]
-failed_conditions:
-  description: The list of conditionals that have failed
-  returned: failed
-  type: list
-  sample: ['...', '...']
-warnings:
-  description: The list of warnings (if any) generated by module based on arguments
-  returned: always
-  type: list
-  sample: ['...', '...']
-"""
-
-import time
-
-from ansible.module_utils._text import to_text
-from ansible.module_utils.basic import AnsibleModule
-from ansible.module_utils.network.common.parsing import Conditional
-from ansible.module_utils.network.common.utils import transform_commands, to_lines
-from ansible.module_utils.network.dellos6.dellos6 import run_commands
-from ansible.module_utils.network.dellos6.dellos6 import dellos6_argument_spec, check_args
-
-
-def parse_commands(module, warnings):
-    commands = transform_commands(module)
-
-    if module.check_mode:
-        for item in list(commands):
-            if not item['command'].startswith('show'):
-                warnings.append(
-                    'Only show commands are supported when using check mode, not '
-                    'executing %s' % item['command']
-                )
-                commands.remove(item)
-
-    return commands
-
-
-def main():
-    """main entry point for module execution
-    """
-    argument_spec = dict(
-        # { command: <str>, prompt: <str>, response: <str> }
-        commands=dict(type='list', required=True),
-
-        wait_for=dict(type='list'),
-        match=dict(default='all', choices=['all', 'any']),
-
-        retries=dict(default=10, type='int'),
-        interval=dict(default=1, type='int')
-    )
-
-    argument_spec.update(dellos6_argument_spec)
-    module = AnsibleModule(argument_spec=argument_spec,
-                           supports_check_mode=True)
-
-    result = {'changed': False}
-
-    warnings = list()
-    check_args(module, warnings)
-    commands = parse_commands(module, warnings)
-    result['warnings'] = warnings
-
-    wait_for = module.params['wait_for'] or list()
-
-    try:
-        conditionals = [Conditional(c) for c in wait_for]
-    except AttributeError as exc:
-        module.fail_json(msg=to_text(exc))
-    retries = module.params['retries']
-    interval = module.params['interval']
-    match = module.params['match']
-
-    while retries > 0:
-        responses = run_commands(module, commands)
-
-        for item in list(conditionals):
-            if item(responses):
-                if match == 'any':
-                    conditionals = list()
-                    break
-                conditionals.remove(item)
-
-        if not conditionals:
-            break
-
-        time.sleep(interval)
-        retries -= 1
-
-    if conditionals:
-        failed_conditions = [item.raw for item in conditionals]
-        msg = 'One or more conditional statements have not been satisfied'
-        module.fail_json(msg=msg, failed_conditions=failed_conditions)
-
-    result.update({
-        'stdout': responses,
-        'stdout_lines': list(to_lines(responses))
-    })
-
-    module.exit_json(**result)
-
-
-if __name__ == '__main__':
-    main()
diff --git a/lib/ansible/modules/network/dellos6/dellos6_config.py b/lib/ansible/modules/network/dellos6/dellos6_config.py
deleted file mode 100644
index bdcb90bc3a..0000000000
--- a/lib/ansible/modules/network/dellos6/dellos6_config.py
+++ /dev/null
@@ -1,335 +0,0 @@
-#!/usr/bin/python
-#
-# (c) 2015 Peter Sprygada, <psprygada@ansible.com>
-# Copyright (c) 2016 Dell Inc.
-# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
-
-from __future__ import absolute_import, division, print_function
-__metaclass__ = type
-
-
-ANSIBLE_METADATA = {'metadata_version': '1.1',
-                    'status': ['preview'],
-                    'supported_by': 'community'}
-
-DOCUMENTATION = """
----
-module: dellos6_config
-version_added: "2.2"
-author: "Abirami N (@abirami-n)"
-short_description: Manage Dell EMC Networking OS6 configuration sections
-description:
-  - OS6 configurations use a simple block indent file syntax
-    for segmenting configuration into sections.  This module provides
-    an implementation for working with OS6 configuration sections in
-    a deterministic way.
-extends_documentation_fragment: dellos6
-options:
-  lines:
-    description:
-      - The ordered set of commands that should be configured in the
-        section.  The commands must be the exact same commands as found
-        in the device running-config. Be sure to note the configuration
-        command syntax as some commands are automatically modified by the
-        device config parser. This argument is mutually exclusive with I(src).
-    aliases: ['commands']
-  parents:
-    description:
-      - The ordered set of parents that uniquely identify the section or hierarchy
-        the commands should be checked against.  If the parents argument
-        is omitted, the commands are checked against the set of top
-        level or global commands.
-  src:
-    description:
-      - Specifies the source path to the file that contains the configuration
-        or configuration template to load.  The path to the source file can
-        either be the full path on the Ansible control host or a relative
-        path from the playbook or role root directory. This argument is
-        mutually exclusive with I(lines).
-  before:
-    description:
-      - The ordered set of commands to push on to the command stack if
-        a change needs to be made.  This allows the playbook designer
-        the opportunity to perform configuration commands prior to pushing
-        any changes without affecting how the set of commands are matched
-        against the system.
-  after:
-    description:
-      - The ordered set of commands to append to the end of the command
-        stack if a change needs to be made.  Just like with I(before) this
-        allows the playbook designer to append a set of commands to be
-        executed after the command set.
-  match:
-    description:
-      - Instructs the module on the way to perform the matching of
-        the set of commands against the current device config.  If
-        match is set to I(line), commands are matched line by line.  If
-        match is set to I(strict), command lines are matched with respect
-        to position.  If match is set to I(exact), command lines
-        must be an equal match.  Finally, if match is set to I(none), the
-        module will not attempt to compare the source configuration with
-        the running configuration on the remote device.
-    default: line
-    choices: ['line', 'strict', 'exact', 'none']
-  replace:
-    description:
-      - Instructs the module on the way to perform the configuration
-        on the device.  If the replace argument is set to I(line) then
-        the modified lines are pushed to the device in configuration
-        mode.  If the replace argument is set to I(block) then the entire
-        command block is pushed to the device in configuration mode if any
-        line is not correct.
-    default: line
-    choices: ['line', 'block']
-  update:
-    description:
-      - The I(update) argument controls how the configuration statements
-        are processed on the remote device.  Valid choices for the I(update)
-        argument are I(merge) and I(check).  When you set this argument to
-        I(merge), the configuration changes merge with the current
-        device running configuration.  When you set this argument to I(check)
-        the configuration updates are determined but not actually configured
-        on the remote device.
-    default: merge
-    choices: ['merge', 'check']
-  save:
-    description:
-      - The C(save) argument instructs the module to save the running-
-        config to the startup-config at the conclusion of the module
-        running.  If check mode is specified, this argument is ignored.
-    type: bool
-    default: 'no'
-  config:
-    description:
-      - The module, by default, will connect to the remote device and
-        retrieve the current running-config to use as a base for comparing
-        against the contents of source.  There are times when it is not
-        desirable to have the task get the current running-config for
-        every task in a playbook.  The I(config) argument allows the
-        implementer to pass in the configuration to use as the base
-        config for comparison.
-  backup:
-    description:
-      - This argument will cause the module to create a full backup of
-        the current C(running-config) from the remote device before any
-        changes are made. If the C(backup_options) value is not given,
-        the backup file is written to the C(backup) folder in the playbook
-        root directory. If the directory does not exist, it is created.
-    type: bool
-    default: 'no'
-  backup_options:
-    description:
-      - This is a dict object containing configurable options related to backup file path.
-        The value of this option is read only when C(backup) is set to I(yes), if C(backup) is set
-        to I(no) this option will be silently ignored.
-    suboptions:
-      filename:
-        description:
-          - The filename to be used to store the backup configuration. If the filename
-            is not given it will be generated based on the hostname, current time and date
-            in format defined by <hostname>_config.<current-date>@<current-time>
-      dir_path:
-        description:
-          - This option provides the path ending with directory name in which the backup
-            configuration file will be stored. If the directory does not exist it will be first
-            created and the filename is either the value of C(filename) or default filename
-            as described in C(filename) options description. If the path value is not given
-            in that case a I(backup) directory will be created in the current working directory
-            and backup configuration will be copied in C(filename) within I(backup) directory.
-        type: path
-    type: dict
-    version_added: "2.8"
-"""
-
-EXAMPLES = """
-- dellos6_config:
-    lines: ['hostname {{ inventory_hostname }}']
-
-- dellos6_config:
-    lines:
-      - 10 permit ip 1.1.1.1 any log
-      - 20 permit ip 2.2.2.2 any log
-      - 30 permit ip 3.3.3.3 any log
-      - 40 permit ip 4.4.4.4 any log
-      - 50 permit ip  5.5.5.5 any log
-    parents: ['ip access-list test']
-    before: ['no ip access-list test']
-    match: exact
-
-- dellos6_config:
-    lines:
-      - 10 permit ip 1.1.1.1 any log
-      - 20 permit ip 2.2.2.2 any log
-      - 30 permit ip 3.3.3.3 any log
-      - 40 permit ip 4.4.4.4 any log
-    parents: ['ip access-list test']
-    before: ['no ip access-list test']
-    replace: block
-
-- dellos6_config:
-    lines: ['hostname {{ inventory_hostname }}']
-    backup: yes
-    backup_options:
-      filename: backup.cfg
-      dir_path: /home/user
-"""
-
-RETURN = """
-updates:
-  description: The set of commands that will be pushed to the remote device.
-  returned: always
-  type: list
-  sample: ['interface Te1/0/1', 'no shutdown', 'exit']
-
-commands:
-  description: The set of commands that will be pushed to the remote device
-  returned: always
-  type: list
-  sample: ['interface Te1/0/1', 'no shutdown', 'exit']
-
-saved:
-  description: Returns whether the configuration is saved to the startup
-               configuration or not.
-  returned: When not check_mode.
-  type: bool
-  sample: True
-
-backup_path:
-  description: The full path to the backup file
-  returned: when backup is yes
-  type: str
-  sample: /playbooks/ansible/backup/dellos6_config.2017-07-16@22:28:34
-"""
-from ansible.module_utils.basic import AnsibleModule
-from ansible.module_utils.network.dellos6.dellos6 import get_config, get_sublevel_config, Dellos6NetworkConfig
-from ansible.module_utils.network.dellos6.dellos6 import dellos6_argument_spec, check_args
-from ansible.module_utils.network.dellos6.dellos6 import load_config, run_commands
-from ansible.module_utils.network.dellos6.dellos6 import WARNING_PROMPTS_RE
-from ansible.module_utils.network.common.config import dumps
-
-
-def get_candidate(module):
-    candidate = Dellos6NetworkConfig(indent=0)
-    if module.params['src']:
-        candidate.load(module.params['src'])
-    elif module.params['lines']:
-        parents = module.params['parents'] or list()
-        commands = module.params['lines'][0]
-        if (isinstance(commands, dict)) and (isinstance(commands['command'], list)):
-            candidate.add(commands['command'], parents=parents)
-        elif (isinstance(commands, dict)) and (isinstance(commands['command'], str)):
-            candidate.add([commands['command']], parents=parents)
-        else:
-            candidate.add(module.params['lines'], parents=parents)
-    return candidate
-
-
-def get_running_config(module):
-    contents = module.params['config']
-    if not contents:
-        contents = get_config(module)
-    return contents
-
-
-def main():
-
-    backup_spec = dict(
-        filename=dict(),
-        dir_path=dict(type='path')
-    )
-    argument_spec = dict(
-        lines=dict(aliases=['commands'], type='list'),
-        parents=dict(type='list'),
-
-        src=dict(type='path'),
-
-        before=dict(type='list'),
-        after=dict(type='list'),
-
-        match=dict(default='line',
-                   choices=['line', 'strict', 'exact', 'none']),
-        replace=dict(default='line', choices=['line', 'block']),
-
-        update=dict(choices=['merge', 'check'], default='merge'),
-        save=dict(type='bool', default=False),
-        config=dict(),
-        backup=dict(type='bool', default=False),
-        backup_options=dict(type='dict', options=backup_spec)
-    )
-
-    argument_spec.update(dellos6_argument_spec)
-    mutually_exclusive = [('lines', 'src'),
-                          ('parents', 'src')]
-
-    module = AnsibleModule(argument_spec=argument_spec,
-                           mutually_exclusive=mutually_exclusive,
-                           supports_check_mode=True)
-
-    parents = module.params['parents'] or list()
-
-    match = module.params['match']
-    replace = module.params['replace']
-
-    warnings = list()
-    check_args(module, warnings)
-    result = dict(changed=False, saved=False, warnings=warnings)
-
-    candidate = get_candidate(module)
-    if module.params['backup']:
-        if not module.check_mode:
-            result['__backup__'] = get_config(module)
-
-    commands = list()
-
-    if any((module.params['lines'], module.params['src'])):
-        if match != 'none':
-            config = get_running_config(module)
-            config = Dellos6NetworkConfig(contents=config, indent=0)
-            if parents:
-                config = get_sublevel_config(config, module)
-            configobjs = candidate.difference(config, match=match, replace=replace)
-        else:
-            configobjs = candidate.items
-
-        if configobjs:
-            commands = dumps(configobjs, 'commands')
-            if ((isinstance(module.params['lines'], list)) and
-                    (isinstance(module.params['lines'][0], dict)) and
-                    set(['prompt', 'answer']).issubset(module.params['lines'][0])):
-                cmd = {'command': commands,
-                       'prompt': module.params['lines'][0]['prompt'],
-                       'answer': module.params['lines'][0]['answer']}
-                commands = [module.jsonify(cmd)]
-            else:
-                commands = commands.split('\n')
-
-            if module.params['before']:
-                commands[:0] = module.params['before']
-
-            if module.params['after']:
-                commands.extend(module.params['after'])
-
-            if not module.check_mode and module.params['update'] == 'merge':
-                load_config(module, commands)
-
-            result['changed'] = True
-            result['commands'] = commands
-            result['updates'] = commands
-
-    if module.params['save']:
-        result['changed'] = True
-        if not module.check_mode:
-            cmd = {'command': 'copy running-config startup-config',
-                   'prompt': r'\(y/n\)\s?$', 'answer': 'y'}
-            run_commands(module, [cmd])
-            result['saved'] = True
-        else:
-            module.warn('Skipping command `copy running-config startup-config`'
-                        'due to check_mode.  Configuration not copied to '
-                        'non-volatile storage')
-
-    module.exit_json(**result)
-
-
-if __name__ == '__main__':
-    main()
diff --git a/lib/ansible/modules/network/dellos6/dellos6_facts.py b/lib/ansible/modules/network/dellos6/dellos6_facts.py
deleted file mode 100644
index 01631edb29..0000000000
--- a/lib/ansible/modules/network/dellos6/dellos6_facts.py
+++ /dev/null
@@ -1,487 +0,0 @@
-#!/usr/bin/python
-#
-# (c) 2015 Peter Sprygada, <psprygada@ansible.com>
-# Copyright (c) 2016 Dell Inc.
-# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
-
-from __future__ import absolute_import, division, print_function
-__metaclass__ = type
-
-
-ANSIBLE_METADATA = {'metadata_version': '1.1',
-                    'status': ['preview'],
-                    'supported_by': 'community'}
-
-
-DOCUMENTATION = """
----
-module: dellos6_facts
-version_added: "2.2"
-author: "Abirami N (@abirami-n)"
-short_description: Collect facts from remote devices running Dell EMC Networking OS6
-description:
-  - Collects a base set of device facts from a remote device that
-    is running OS6.  This module prepends all of the
-    base network fact keys with C(ansible_net_<fact>).  The facts
-    module will always collect a base set of facts from the device
-    and can enable or disable collection of additional facts.
-extends_documentation_fragment: dellos6
-options:
-  gather_subset:
-    description:
-      - When supplied, this argument will restrict the facts collected
-        to a given subset.  Possible values for this argument include
-        all, hardware, config, and interfaces. Can specify a list of
-        values to include a larger subset.  Values can also be used
-        with an initial C(M(!)) to specify that a specific subset should
-        not be collected.
-    default: [ '!config' ]
-"""
-
-EXAMPLES = """
-# Collect all facts from the device
-- dellos6_facts:
-    gather_subset: all
-
-# Collect only the config and default facts
-- dellos6_facts:
-    gather_subset:
-      - config
-
-# Do not collect hardware facts
-- dellos6_facts:
-    gather_subset:
-      - "!interfaces"
-"""
-
-RETURN = """
-ansible_net_gather_subset:
-  description: The list of fact subsets collected from the device.
-  returned: always.
-  type: list
-
-# default
-ansible_net_model:
-  description: The model name returned from the device.
-  returned: always.
-  type: str
-ansible_net_serialnum:
-  description: The serial number of the remote device.
-  returned: always.
-  type: str
-ansible_net_version:
-  description: The operating system version running on the remote device.
-  returned: always.
-  type: str
-ansible_net_hostname:
-  description: The configured hostname of the device.
-  returned: always.
-  type: str
-ansible_net_image:
-  description: The image file that the device is running.
-  returned: always
-  type: str
-
-# hardware
-ansible_net_memfree_mb:
-  description: The available free memory on the remote device in MB.
-  returned: When hardware is configured.
-  type: int
-ansible_net_memtotal_mb:
-  description: The total memory on the remote device in MB.
-  returned: When hardware is configured.
-  type: int
-
-# config
-ansible_net_config:
-  description: The current active config from the device.
-  returned: When config is configured.
-  type: str
-
-# interfaces
-ansible_net_interfaces:
-  description: A hash of all interfaces running on the system.
-  returned: When interfaces is configured.
-  type: dict
-ansible_net_neighbors:
-  description: The list of LLDP neighbors from the remote device.
-  returned: When interfaces is configured.
-  type: dict
-
-"""
-import re
-
-from ansible.module_utils.basic import AnsibleModule
-from ansible.module_utils.network.dellos6.dellos6 import run_commands
-from ansible.module_utils.network.dellos6.dellos6 import dellos6_argument_spec, check_args
-from ansible.module_utils.six import iteritems
-
-
-class FactsBase(object):
-
-    COMMANDS = list()
-
-    def __init__(self, module):
-        self.module = module
-        self.facts = dict()
-        self.responses = None
-
-    def populate(self):
-        self.responses = run_commands(self.module, self.COMMANDS, check_rc=False)
-
-    def run(self, cmd):
-        return run_commands(self.module, cmd, check_rc=False)
-
-
-class Default(FactsBase):
-
-    COMMANDS = [
-        'show version',
-        'show running-config | include hostname'
-    ]
-
-    def populate(self):
-        super(Default, self).populate()
-        data = self.responses[0]
-        self.facts['version'] = self.parse_version(data)
-        self.facts['serialnum'] = self.parse_serialnum(data)
-        self.facts['model'] = self.parse_model(data)
-        self.facts['image'] = self.parse_image(data)
-        hdata = self.responses[1]
-        self.facts['hostname'] = self.parse_hostname(hdata)
-
-    def parse_version(self, data):
-        facts = dict()
-        match = re.search(r'HW Version(.+)\s(\d+)', data)
-        temp, temp_next = data.split('---- ----------- ----------- -------------- --------------')
-        for en in temp_next.splitlines():
-            if en == '':
-                continue
-            match_image = re.search(r'^(\S+)\s+(\S+)\s+(\S+)\s+(\S+)', en)
-            version = match_image.group(4)
-            facts["Version"] = list()
-            fact = dict()
-            fact['HW Version'] = match.group(2)
-            fact['SW Version'] = match_image.group(4)
-            facts["Version"].append(fact)
-        return facts
-
-    def parse_hostname(self, data):
-        match = re.search(r'\S+\s(\S+)', data, re.M)
-        if match:
-            return match.group(1)
-
-    def parse_model(self, data):
-        match = re.search(r'System Model ID(.+)\s([A-Z0-9]*)\n', data, re.M)
-        if match:
-            return match.group(2)
-
-    def parse_image(self, data):
-        match = re.search(r'Image File(.+)\s([A-Z0-9a-z_.]*)\n', data)
-        if match:
-            return match.group(2)
-
-    def parse_serialnum(self, data):
-        match = re.search(r'Serial Number(.+)\s([A-Z0-9]*)\n', data)
-        if match:
-            return match.group(2)
-
-
-class Hardware(FactsBase):
-
-    COMMANDS = [
-        'show memory cpu'
-    ]
-
-    def populate(self):
-        super(Hardware, self).populate()
-        data = self.responses[0]
-        match = re.findall(r'\s(\d+)\s', data)
-        if match:
-            self.facts['memtotal_mb'] = int(match[0]) // 1024
-            self.facts['memfree_mb'] = int(match[1]) // 1024
-
-
-class Config(FactsBase):
-
-    COMMANDS = ['show running-config']
-
-    def populate(self):
-        super(Config, self).populate()
-        self.facts['config'] = self.responses[0]
-
-
-class Interfaces(FactsBase):
-    COMMANDS = [
-        'show interfaces',
-        'show interfaces status',
-        'show interfaces transceiver properties',
-        'show ip int',
-        'show lldp',
-        'show lldp remote-device all',
-        'show version'
-    ]
-
-    def populate(self):
-        vlan_info = dict()
-        super(Interfaces, self).populate()
-        data = self.responses[0]
-        interfaces = self.parse_interfaces(data)
-        desc = self.responses[1]
-        properties = self.responses[2]
-        vlan = self.responses[3]
-        version_info = self.responses[6]
-        vlan_info = self.parse_vlan(vlan, version_info)
-        self.facts['interfaces'] = self.populate_interfaces(interfaces, desc, properties)
-        self.facts['interfaces'].update(vlan_info)
-        if 'LLDP is not enabled' not in self.responses[4]:
-            neighbors = self.responses[5]
-            self.facts['neighbors'] = self.parse_neighbors(neighbors)
-
-    def parse_vlan(self, vlan, version_info):
-        facts = dict()
-        if "N11" in version_info:
-            match = re.search(r'IP Address(.+)\s([0-9.]*)\n', vlan)
-            mask = re.search(r'Subnet Mask(.+)\s([0-9.]*)\n', vlan)
-            vlan_id_match = re.search(r'Management VLAN ID(.+)\s(\d+)', vlan)
-            vlan_id = "Vl" + vlan_id_match.group(2)
-            if vlan_id not in facts:
-                facts[vlan_id] = list()
-            fact = dict()
-            fact['address'] = match.group(2)
-            fact['masklen'] = mask.group(2)
-            facts[vlan_id].append(fact)
-        else:
-            vlan_info, vlan_info_next = vlan.split('----------   -----   --------------- --------------- -------')
-            for en in vlan_info_next.splitlines():
-                if en == '':
-                    continue
-                match = re.search(r'^(\S+)\s+(\S+)\s+(\S+)', en)
-                intf = match.group(1)
-                if intf not in facts:
-                    facts[intf] = list()
-                fact = dict()
-                matc = re.search(r'^([\w+\s\d]*)\s+(\S+)\s+(\S+)', en)
-                fact['address'] = matc.group(2)
-                fact['masklen'] = matc.group(3)
-                facts[intf].append(fact)
-        return facts
-
-    def populate_interfaces(self, interfaces, desc, properties):
-        facts = dict()
-        for key, value in interfaces.items():
-            intf = dict()
-            intf['description'] = self.parse_description(key, desc)
-            intf['macaddress'] = self.parse_macaddress(value)
-            intf['mtu'] = self.parse_mtu(value)
-            intf['bandwidth'] = self.parse_bandwidth(value)
-            intf['mediatype'] = self.parse_mediatype(key, properties)
-            intf['duplex'] = self.parse_duplex(value)
-            intf['lineprotocol'] = self.parse_lineprotocol(value)
-            intf['operstatus'] = self.parse_operstatus(value)
-            intf['type'] = self.parse_type(key, properties)
-            facts[key] = intf
-        return facts
-
-    def parse_neighbors(self, neighbors):
-        facts = dict()
-        neighbor, neighbor_next = neighbors.split('--------- ------- ------------------- ----------------- -----------------')
-        for en in neighbor_next.splitlines():
-            if en == '':
-                continue
-            intf = self.parse_lldp_intf(en.split()[0])
-            if intf not in facts:
-                facts[intf] = list()
-            fact = dict()
-            fact['port'] = self.parse_lldp_port(en.split()[3])
-            if (len(en.split()) > 4):
-                fact['host'] = self.parse_lldp_host(en.split()[4])
-            else:
-                fact['host'] = "Null"
-            facts[intf].append(fact)
-
-        return facts
-
-    def parse_interfaces(self, data):
-        parsed = dict()
-        for line in data.split('\n'):
-            if len(line) == 0:
-                continue
-            else:
-                match = re.match(r'Interface Name(.+)\s([A-Za-z0-9/]*)', line)
-                if match:
-                    key = match.group(2)
-                    parsed[key] = line
-                else:
-                    parsed[key] += '\n%s' % line
-        return parsed
-
-    def parse_description(self, key, desc):
-        desc, desc_next = desc.split('--------- --------------- ------ ------- ---- ------ ----- -- -------------------')
-        if desc_next.find('Oob') > 0:
-            desc_val, desc_info = desc_next.split('Oob')
-        elif desc_next.find('Port') > 0:
-            desc_val, desc_info = desc_next.split('Port')
-        for en in desc_val.splitlines():
-            if key in en:
-                match = re.search(r'^(\S+)\s+(\S+)', en)
-                if match.group(2) in ['Full', 'N/A']:
-                    return "Null"
-                else:
-                    return match.group(2)
-
-    def parse_macaddress(self, data):
-        match = re.search(r'Burned In MAC Address(.+)\s([A-Z0-9.]*)\n', data)
-        if match:
-            return match.group(2)
-
-    def parse_mtu(self, data):
-        match = re.search(r'MTU Size(.+)\s(\d+)\n', data)
-        if match:
-            return int(match.group(2))
-
-    def parse_bandwidth(self, data):
-        match = re.search(r'Port Speed\s*[:\s\.]+\s(\d+)\n', data)
-        if match:
-            return int(match.group(1))
-
-    def parse_duplex(self, data):
-        match = re.search(r'Port Mode\s([A-Za-z]*)(.+)\s([A-Za-z/]*)\n', data)
-        if match:
-            return match.group(3)
-
-    def parse_mediatype(self, key, properties):
-        mediatype, mediatype_next = properties.split('--------- ------- --------------------- --------------------- --------------')
-        flag = 1
-        for en in mediatype_next.splitlines():
-            if key in en:
-                flag = 0
-                match = re.search(r'^(\S+)\s+(\S+)\s+(\S+)', en)
-                if match:
-                    strval = match.group(3)
-                    return strval
-        if flag == 1:
-            return "null"
-
-    def parse_type(self, key, properties):
-        type_val, type_val_next = properties.split('--------- ------- --------------------- --------------------- --------------')
-        flag = 1
-        for en in type_val_next.splitlines():
-            if key in en:
-                flag = 0
-                match = re.search(r'^(\S+)\s+(\S+)\s+(\S+)', en)
-                if match:
-                    strval = match.group(2)
-                    return strval
-        if flag == 1:
-            return "null"
-
-    def parse_lineprotocol(self, data):
-        data = data.splitlines()
-        for d in data:
-            match = re.search(r'^Link Status\s*[:\s\.]+\s(\S+)', d)
-            if match:
-                return match.group(1)
-
-    def parse_operstatus(self, data):
-        data = data.splitlines()
-        for d in data:
-            match = re.search(r'^Link Status\s*[:\s\.]+\s(\S+)', d)
-            if match:
-                return match.group(1)
-
-    def parse_lldp_intf(self, data):
-        match = re.search(r'^([A-Za-z0-9/]*)', data)
-        if match:
-            return match.group(1)
-
-    def parse_lldp_host(self, data):
-        match = re.search(r'^([A-Za-z0-9-]*)', data)
-        if match:
-            return match.group(1)
-
-    def parse_lldp_port(self, data):
-        match = re.search(r'^([A-Za-z0-9/]*)', data)
-        if match:
-            return match.group(1)
-
-
-FACT_SUBSETS = dict(
-    default=Default,
-    hardware=Hardware,
-    interfaces=Interfaces,
-    config=Config,
-)
-
-VALID_SUBSETS = frozenset(FACT_SUBSETS.keys())
-
-
-def main():
-    """main entry point for module execution
-    """
-    argument_spec = dict(
-        gather_subset=dict(default=['!config'], type='list')
-    )
-
-    argument_spec.update(dellos6_argument_spec)
-
-    module = AnsibleModule(argument_spec=argument_spec,
-                           supports_check_mode=True)
-
-    gather_subset = module.params['gather_subset']
-
-    runable_subsets = set()
-    exclude_subsets = set()
-
-    for subset in gather_subset:
-        if subset == 'all':
-            runable_subsets.update(VALID_SUBSETS)
-            continue
-
-        if subset.startswith('!'):
-            subset = subset[1:]
-            if subset == 'all':
-                exclude_subsets.update(VALID_SUBSETS)
-                continue
-            exclude = True
-        else:
-            exclude = False
-
-        if subset not in VALID_SUBSETS:
-            module.fail_json(msg='Bad subset')
-
-        if exclude:
-            exclude_subsets.add(subset)
-        else:
-            runable_subsets.add(subset)
-
-    if not runable_subsets:
-        runable_subsets.update(VALID_SUBSETS)
-
-    runable_subsets.difference_update(exclude_subsets)
-    runable_subsets.add('default')
-
-    facts = dict()
-    facts['gather_subset'] = list(runable_subsets)
-
-    instances = list()
-    for key in runable_subsets:
-        instances.append(FACT_SUBSETS[key](module))
-
-    for inst in instances:
-        inst.populate()
-        facts.update(inst.facts)
-
-    ansible_facts = dict()
-    for key, value in iteritems(facts):
-        key = 'ansible_net_%s' % key
-        ansible_facts[key] = value
-
-    warnings = list()
-    check_args(module, warnings)
-
-    module.exit_json(ansible_facts=ansible_facts, warnings=warnings)
-
-
-if __name__ == '__main__':
-    main()
diff --git a/lib/ansible/plugins/action/dellos6.py b/lib/ansible/plugins/action/dellos6.py
deleted file mode 100644
index cb5e0eaecf..0000000000
--- a/lib/ansible/plugins/action/dellos6.py
+++ /dev/null
@@ -1,81 +0,0 @@
-#
-# (c) 2016 Red Hat Inc.
-#
-# (c) 2017 Dell EMC.
-#
-# This file is part of Ansible
-#
-# Ansible is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-#
-# Ansible is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
-#
-from __future__ import (absolute_import, division, print_function)
-__metaclass__ = type
-
-import sys
-import copy
-
-from ansible import constants as C
-from ansible.plugins.action.network import ActionModule as ActionNetworkModule
-from ansible.module_utils.network.dellos6.dellos6 import dellos6_provider_spec
-from ansible.module_utils.network.common.utils import load_provider
-from ansible.utils.display import Display
-
-display = Display()
-
-
-class ActionModule(ActionNetworkModule):
-
-    def run(self, tmp=None, task_vars=None):
-        del tmp  # tmp no longer has any effect
-
-        module_name = self._task.action.split('.')[-1]
-        self._config_module = True if module_name == 'dellos6_config' else False
-        socket_path = None
-        persistent_connection = self._play_context.connection.split('.')[-1]
-
-        if persistent_connection == 'network_cli':
-            provider = self._task.args.get('provider', {})
-            if any(provider.values()):
-                display.warning('provider is unnecessary when using network_cli and will be ignored')
-                del self._task.args['provider']
-        elif self._play_context.connection == 'local':
-            provider = load_provider(dellos6_provider_spec, self._task.args)
-            pc = copy.deepcopy(self._play_context)
-            pc.connection = 'network_cli'
-            pc.network_os = 'dellos6'
-            pc.remote_addr = provider['host'] or self._play_context.remote_addr
-            pc.port = int(provider['port'] or self._play_context.port or 22)
-            pc.remote_user = provider['username'] or self._play_context.connection_user
-            pc.password = provider['password'] or self._play_context.password
-            pc.private_key_file = provider['ssh_keyfile'] or self._play_context.private_key_file
-            command_timeout = int(provider['timeout'] or C.PERSISTENT_COMMAND_TIMEOUT)
-            pc.become = provider['authorize'] or False
-            if pc.become:
-                pc.become_method = 'enable'
-            pc.become_pass = provider['auth_pass']
-
-            display.vvv('using connection plugin %s' % pc.connection, pc.remote_addr)
-            connection = self._shared_loader_obj.connection_loader.get('persistent', pc, sys.stdin, task_uuid=self._task._uuid)
-            connection.set_options(direct={'persistent_command_timeout': command_timeout})
-
-            socket_path = connection.run()
-            display.vvvv('socket_path: %s' % socket_path, pc.remote_addr)
-            if not socket_path:
-                return {'failed': True,
-                        'msg': 'unable to open shell. Please see: ' +
-                               'https://docs.ansible.com/ansible/network_debug_troubleshooting.html#unable-to-open-shell'}
-
-            task_vars['ansible_socket'] = socket_path
-
-        result = super(ActionModule, self).run(task_vars=task_vars)
-        return result
diff --git a/lib/ansible/plugins/cliconf/dellos6.py b/lib/ansible/plugins/cliconf/dellos6.py
deleted file mode 100644
index 6dba49b143..0000000000
--- a/lib/ansible/plugins/cliconf/dellos6.py
+++ /dev/null
@@ -1,123 +0,0 @@
-#
-# (c) 2017 Red Hat Inc.
-#
-# (c) 2017 Dell EMC.
-#
-# This file is part of Ansible
-#
-# Ansible is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-#
-# Ansible is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
-#
-from __future__ import (absolute_import, division, print_function)
-__metaclass__ = type
-
-DOCUMENTATION = """
----
-cliconf: dellos6
-short_description: Use dellos6 cliconf to run command on Dell OS6 platform
-description:
-  - This dellos6 plugin provides low level abstraction apis for
-    sending and receiving CLI commands from Dell OS6 network devices.
-version_added: 2.5
-"""
-
-import re
-import json
-
-from itertools import chain
-
-from ansible.errors import AnsibleConnectionFailure
-from ansible.module_utils._text import to_bytes, to_text
-from ansible.module_utils.common._collections_compat import Mapping
-from ansible.module_utils.network.common.utils import to_list
-from ansible.plugins.cliconf import CliconfBase, enable_mode
-
-
-class Cliconf(CliconfBase):
-
-    def get_device_info(self):
-        device_info = {}
-
-        device_info['network_os'] = 'dellos6'
-        reply = self.get('show version')
-        data = to_text(reply, errors='surrogate_or_strict').strip()
-
-        match = re.search(r'Software Version (\S+)', data)
-        if match:
-            device_info['network_os_version'] = match.group(1)
-
-        match = re.search(r'System Type (\S+)', data, re.M)
-        if match:
-            device_info['network_os_model'] = match.group(1)
-
-        reply = self.get('show running-config | include hostname')
-        data = to_text(reply, errors='surrogate_or_strict').strip()
-        match = re.search(r'^hostname (.+)', data, re.M)
-        if match:
-            device_info['network_os_hostname'] = match.group(1)
-
-        return device_info
-
-    @enable_mode
-    def get_config(self, source='running', format='text', flags=None):
-        if source not in ('running', 'startup'):
-            return self.invalid_params("fetching configuration from %s is not supported" % source)
-#        if source == 'running':
-#            cmd = 'show running-config all'
-        else:
-            cmd = 'show startup-config'
-        return self.send_command(cmd)
-
-    @enable_mode
-    def edit_config(self, command):
-        for cmd in chain(['configure terminal'], to_list(command), ['end']):
-            self.send_command(cmd)
-
-    def get(self, command, prompt=None, answer=None, sendonly=False, newline=True, check_all=False):
-        return self.send_command(command=command, prompt=prompt, answer=answer, sendonly=sendonly, newline=newline, check_all=check_all)
-
-    def get_capabilities(self):
-        result = super(Cliconf, self).get_capabilities()
-        return json.dumps(result)
-
-    def run_commands(self, commands=None, check_rc=True):
-        if commands is None:
-            raise ValueError("'commands' value is required")
-
-        responses = list()
-        for cmd in to_list(commands):
-            if not isinstance(cmd, Mapping):
-                cmd = {'command': cmd}
-
-            output = cmd.pop('output', None)
-            if output:
-                raise ValueError("'output' value %s is not supported for run_commands" % output)
-
-            try:
-                out = self.send_command(**cmd)
-            except AnsibleConnectionFailure as e:
-                if check_rc:
-                    raise
-                out = getattr(e, 'err', to_text(e))
-
-            responses.append(out)
-
-        return responses
-
-    def set_cli_prompt_context(self):
-        """
-        Make sure we are in the operational cli mode
-        :return: None
-        """
-        if self._connection.connected:
-            self._update_cli_prompt_context(config_context=')#')
diff --git a/lib/ansible/plugins/doc_fragments/dellos6.py b/lib/ansible/plugins/doc_fragments/dellos6.py
deleted file mode 100644
index e65e53cdc3..0000000000
--- a/lib/ansible/plugins/doc_fragments/dellos6.py
+++ /dev/null
@@ -1,58 +0,0 @@
-# -*- coding: utf-8 -*-
-
-# Copyright: (c) 2015, Peter Sprygada <psprygada@ansible.com>
-# Copyright: (c) 2016, Dell Inc.
-# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
-
-
-class ModuleDocFragment(object):
-
-    # Standard files documentation fragment
-    DOCUMENTATION = r'''
-options:
-  provider:
-    description:
-      - A dict object containing connection details.
-    type: dict
-    suboptions:
-      host:
-        description:
-          - Specifies the DNS host name or address for connecting to the remote
-            device over the specified transport.  The value of host is used as
-            the destination address for the transport.
-        type: str
-        required: true
-      port:
-        description:
-          - Specifies the port to use when building the connection to the remote
-            device.
-        type: int
-        default: 22
-      username:
-        description:
-          - User to authenticate the SSH session to the remote device. If the
-            value is not specified in the task, the value of environment variable
-            C(ANSIBLE_NET_USERNAME) will be used instead.
-        type: str
-      password:
-        description:
-          - Password to authenticate the SSH session to the remote device. If the
-            value is not specified in the task, the value of environment variable
-            C(ANSIBLE_NET_PASSWORD) will be used instead.
-        type: str
-      ssh_keyfile:
-        description:
-          - Path to an ssh key used to authenticate the SSH session to the remote
-            device.  If the value is not specified in the task, the value of
-            environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.
-        type: path
-      timeout:
-        description:
-          - Specifies idle timeout (in seconds) for the connection. Useful if the
-            console freezes before continuing. For example when saving
-            configurations.
-        type: int
-        default: 10
-notes:
-  - For more information on using Ansible to manage Dell EMC Network devices see U(https://www.ansible.com/ansible-dell-networking).
-'''
diff --git a/lib/ansible/plugins/terminal/dellos6.py b/lib/ansible/plugins/terminal/dellos6.py
deleted file mode 100644
index 5cbd8f3642..0000000000
--- a/lib/ansible/plugins/terminal/dellos6.py
+++ /dev/null
@@ -1,93 +0,0 @@
-#
-# (c) 2016 Red Hat Inc.
-#
-# (c) 2017 Dell EMC.
-#
-# This file is part of Ansible
-#
-# Ansible is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-#
-# Ansible is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
-#
-from __future__ import (absolute_import, division, print_function)
-__metaclass__ = type
-
-import re
-import json
-
-from ansible.module_utils._text import to_text, to_bytes
-from ansible.plugins.terminal import TerminalBase
-from ansible.errors import AnsibleConnectionFailure
-
-
-class TerminalModule(TerminalBase):
-
-    terminal_stdout_re = [
-        re.compile(br"[\r\n]?[\w+\-\.:\/\[\]]+(?:\([^\)]+\)){,3}(?:>|#) ?$"),
-        re.compile(br"\[\w+\@[\w\-\.]+(?: [^\]])\] ?[>#\$] ?$")
-    ]
-
-    terminal_stderr_re = [
-        re.compile(br"% ?Bad secret"),
-        re.compile(br"(\bInterface is part of a port-channel\b)"),
-        re.compile(br"(\bThe maximum number of users have already been created\b)|(\bUse '-' for range\b)"),
-        re.compile(br"(?:incomplete|ambiguous) command", re.I),
-        re.compile(br"connection timed out", re.I),
-        re.compile(br"'[^']' +returned error code: ?\d+"),
-        re.compile(br"Invalid|invalid.*$", re.I),
-        re.compile(br"((\bout of range\b)|(\bnot found\b)|(\bCould not\b)|(\bUnable to\b)|(\bCannot\b)|(\bError\b)).*", re.I),
-        re.compile(br"((\balready exists\b)|(\bnot exist\b)|(\bnot active\b)|(\bFailed\b)|(\bIncorrect\b)|(\bnot enabled\b)).*", re.I),
-
-    ]
-
-    terminal_initial_prompt = br"\(y/n\)"
-
-    terminal_initial_answer = b"y"
-
-    terminal_inital_prompt_newline = False
-
-    def on_open_shell(self):
-        try:
-            self._exec_cli_command(b'terminal length 0')
-        except AnsibleConnectionFailure:
-            raise AnsibleConnectionFailure('unable to set terminal parameters')
-
-    def on_become(self, passwd=None):
-        if self._get_prompt().endswith(b'#'):
-            return
-
-        cmd = {u'command': u'enable'}
-        if passwd:
-            cmd[u'prompt'] = to_text(r"[\r\n]?password:$", errors='surrogate_or_strict')
-            cmd[u'answer'] = passwd
-        try:
-            self._exec_cli_command(to_bytes(json.dumps(cmd), errors='surrogate_or_strict'))
-        except AnsibleConnectionFailure:
-            raise AnsibleConnectionFailure('unable to elevate privilege to enable mode')
-        # in dellos6 the terminal settings are accepted after the privilege mode
-        try:
-            self._exec_cli_command(b'terminal length 0')
-        except AnsibleConnectionFailure:
-            raise AnsibleConnectionFailure('unable to set terminal parameters')
-
-    def on_unbecome(self):
-        prompt = self._get_prompt()
-        if prompt is None:
-            # if prompt is None most likely the terminal is hung up at a prompt
-            return
-
-        if prompt.strip().endswith(b')#'):
-            self._exec_cli_command(b'end')
-            self._exec_cli_command(b'disable')
-
-        elif prompt.endswith(b'#'):
-            self._exec_cli_command(b'disable')
diff --git a/test/integration/targets/dellos6_command/defaults/main.yaml b/test/integration/targets/dellos6_command/defaults/main.yaml
deleted file mode 100644
index 5f709c5aac..0000000000
--- a/test/integration/targets/dellos6_command/defaults/main.yaml
+++ /dev/null
@@ -1,2 +0,0 @@
----
-testcase: "*"
diff --git a/test/integration/targets/dellos6_command/tasks/cli.yaml b/test/integration/targets/dellos6_command/tasks/cli.yaml
deleted file mode 100644
index d675462dd0..0000000000
--- a/test/integration/targets/dellos6_command/tasks/cli.yaml
+++ /dev/null
@@ -1,15 +0,0 @@
----
-- name: collect all cli test cases
-  find:
-    paths: "{{ role_path }}/tests/cli"
-    patterns: "{{ testcase }}.yaml"
-  register: test_cases
-
-- name: set test_items
-  set_fact: test_items="{{ test_cases.files | map(attribute='path') | list }}"
-
-- name: run test case
-  include: "{{ test_case_to_run }}"
-  with_items: "{{ test_items }}"
-  loop_control:
-    loop_var: test_case_to_run
diff --git a/test/integration/targets/dellos6_command/tasks/main.yaml b/test/integration/targets/dellos6_command/tasks/main.yaml
deleted file mode 100644
index 415c99d8b1..0000000000
--- a/test/integration/targets/dellos6_command/tasks/main.yaml
+++ /dev/null
@@ -1,2 +0,0 @@
----
-- { include: cli.yaml, tags: ['cli'] }
diff --git a/test/integration/targets/dellos6_command/tests/cli/bad_operator.yaml b/test/integration/targets/dellos6_command/tests/cli/bad_operator.yaml
deleted file mode 100644
index 1a8f6a2826..0000000000
--- a/test/integration/targets/dellos6_command/tests/cli/bad_operator.yaml
+++ /dev/null
@@ -1,20 +0,0 @@
----
-- debug: msg="START cli/bad_operator.yaml"
-
-- name: test bad operator
-  dellos6_command:
-    commands:
-      - show version
-      - show interfaces GigabitEthernet 1/0/1
-    wait_for:
-      - "result[0] contains 'Description: Foo'"
-    provider: "{{ cli }}"
-  register: result
-  ignore_errors: yes
-
-- assert:
-    that:
-      - "result.failed == true"
-      - "result.msg is defined"
-
-- debug: msg="END cli/bad_operator.yaml"
diff --git a/test/integration/targets/dellos6_command/tests/cli/contains.yaml b/test/integration/targets/dellos6_command/tests/cli/contains.yaml
deleted file mode 100644
index b9978ea867..0000000000
--- a/test/integration/targets/dellos6_command/tests/cli/contains.yaml
+++ /dev/null
@@ -1,20 +0,0 @@
----
-- debug: msg="START cli/contains.yaml"
-
-- name: test contains operator
-  dellos6_command:
-    commands:
-      - show version
-      - show interfaces GigabitEthernet 1/0/1
-    wait_for:
-      - "result[0] contains 5"
-      - "result[1] contains Access"
-    provider: "{{ cli }}"
-  register: result
-
-- assert:
-    that:
-      - "result.changed == false"
-      - "result.stdout is defined"
-
-- debug: msg="END cli/contains.yaml"
diff --git a/test/integration/targets/dellos6_command/tests/cli/invalid.yaml b/test/integration/targets/dellos6_command/tests/cli/invalid.yaml
deleted file mode 100644
index 036e54d6e5..0000000000
--- a/test/integration/targets/dellos6_command/tests/cli/invalid.yaml
+++ /dev/null
@@ -1,28 +0,0 @@
----
-- debug: msg="START cli/invalid.yaml"
-
-- name: run invalid command
-  dellos6_command:
-    commands: ['show foo']
-    provider: "{{ cli }}"
-  register: result
-  ignore_errors: yes
-
-- assert:
-    that:
-      - "result.failed"
-
-- name: run commands that include invalid command
-  dellos6_command:
-    commands:
-      - show version
-      - show foo
-    provider: "{{ cli }}"
-  register: result
-  ignore_errors: yes
-
-- assert:
-    that:
-      - "result.failed"
-
-- debug: msg="END cli/invalid.yaml"
diff --git a/test/integration/targets/dellos6_command/tests/cli/output.yaml b/test/integration/targets/dellos6_command/tests/cli/output.yaml
deleted file mode 100644
index 5d0ea281de..0000000000
--- a/test/integration/targets/dellos6_command/tests/cli/output.yaml
+++ /dev/null
@@ -1,29 +0,0 @@
----
-- debug: msg="START cli/output.yaml"
-
-- name: get output for single command
-  dellos6_command:
-    commands: ['show version']
-    provider: "{{ cli }}"
-  register: result
-
-- assert:
-    that:
-      - "result.changed == false"
-      - "result.stdout is defined"
-
-- name: get output for multiple commands
-  dellos6_command:
-    commands:
-      - show version
-      - show interfaces
-    provider: "{{ cli }}"
-  register: result
-
-- assert:
-    that:
-      - "result.changed == false"
-      - "result.stdout is defined"
-      - "result.stdout | length == 2"
-
-- debug: msg="END cli/output.yaml"
diff --git a/test/integration/targets/dellos6_command/tests/cli/timeout.yaml b/test/integration/targets/dellos6_command/tests/cli/timeout.yaml
deleted file mode 100644
index 046a759abe..0000000000
--- a/test/integration/targets/dellos6_command/tests/cli/timeout.yaml
+++ /dev/null
@@ -1,19 +0,0 @@
----
-- debug: msg="START cli/timeout.yaml"
-
-- name: test bad condition
-  dellos6_command:
-    commands:
-      - show version
-    wait_for:
-      - "result[0] contains bad_value_string"
-    provider: "{{ cli }}"
-  register: result
-  ignore_errors: yes
-
-- assert:
-    that:
-      - "result.failed == true"
-      - "result.msg is defined"
-
-- debug: msg="END cli/timeout.yaml"
diff --git a/test/integration/targets/dellos6_config/defaults/main.yaml b/test/integration/targets/dellos6_config/defaults/main.yaml
deleted file mode 100644
index 5f709c5aac..0000000000
--- a/test/integration/targets/dellos6_config/defaults/main.yaml
+++ /dev/null
@@ -1,2 +0,0 @@
----
-testcase: "*"
diff --git a/test/integration/targets/dellos6_config/tasks/cli.yaml b/test/integration/targets/dellos6_config/tasks/cli.yaml
deleted file mode 100644
index d675462dd0..0000000000
--- a/test/integration/targets/dellos6_config/tasks/cli.yaml
+++ /dev/null
@@ -1,15 +0,0 @@
----
-- name: collect all cli test cases
-  find:
-    paths: "{{ role_path }}/tests/cli"
-    patterns: "{{ testcase }}.yaml"
-  register: test_cases
-
-- name: set test_items
-  set_fact: test_items="{{ test_cases.files | map(attribute='path') | list }}"
-
-- name: run test case
-  include: "{{ test_case_to_run }}"
-  with_items: "{{ test_items }}"
-  loop_control:
-    loop_var: test_case_to_run
diff --git a/test/integration/targets/dellos6_config/tasks/main.yaml b/test/integration/targets/dellos6_config/tasks/main.yaml
deleted file mode 100644
index 415c99d8b1..0000000000
--- a/test/integration/targets/dellos6_config/tasks/main.yaml
+++ /dev/null
@@ -1,2 +0,0 @@
----
-- { include: cli.yaml, tags: ['cli'] }
diff --git a/test/integration/targets/dellos6_config/tests/cli/sublevel.yaml b/test/integration/targets/dellos6_config/tests/cli/sublevel.yaml
deleted file mode 100644
index 44af7c5e0f..0000000000
--- a/test/integration/targets/dellos6_config/tests/cli/sublevel.yaml
+++ /dev/null
@@ -1,42 +0,0 @@
----
-- debug: msg="START cli/sublevel.yaml"
-
-- name: setup test
-  dellos6_config:
-    lines:
-      - 'no ip access-list test'
-    provider: "{{ cli }}"
-    match: none
-
-- name: configure sub level command
-  dellos6_config:
-    lines: ['1000 permit every log']
-    parents: ['ip access-list test']
-    provider: "{{ cli }}"
-  register: result
-
-- assert:
-    that:
-      - "result.changed == true"
-      - "'ip access-list test' in result.updates"
-      - "'1000 permit every log' in result.updates"
-
-- name: configure sub level command idempotent check
-  dellos6_config:
-    lines: ['1000 permit every log']
-    parents: ['ip access-list test']
-    provider: "{{ cli }}"
-  register: result
-
-- assert:
-    that:
-      - "result.changed == false"
-
-- name: teardown
-  dellos6_config:
-    lines:
-      - 'no ip access-list test'
-    provider: "{{ cli }}"
-    match: none
-
-- debug: msg="END cli/sublevel.yaml"
diff --git a/test/integration/targets/dellos6_config/tests/cli/sublevel_block.yaml b/test/integration/targets/dellos6_config/tests/cli/sublevel_block.yaml
deleted file mode 100644
index 9b4f1d8907..0000000000
--- a/test/integration/targets/dellos6_config/tests/cli/sublevel_block.yaml
+++ /dev/null
@@ -1,62 +0,0 @@
----
-- debug: msg="START cli/sublevel_block.yaml"
-
-- name: setup
-  dellos6_config:
-    lines:
-      - permit ip 192.0.2.1 0.0.0.0 any log
-      - permit ip 192.0.2.2 0.0.0.0 any log
-      - permit ip 192.0.2.3 0.0.0.0 any log
-    parents: ['ip access-list test']
-    before: ['no ip access-list test']
-    after: ['exit']
-    provider: "{{ cli }}"
-    match: none
-
-- name: configure sub level command using block resplace
-  dellos6_config:
-    lines:
-      - 1000 permit ip 192.0.2.1 0.0.0.0 any log
-      - 1010 permit ip 192.0.2.2 0.0.0.0 any log
-      - 1020 permit ip 192.0.2.3 0.0.0.0 any log
-      - 1030 permit ip 192.0.2.4 0.0.0.0 any log
-    parents: ['ip access-list test']
-    replace: block
-    after: ['exit']
-    provider: "{{ cli }}"
-  register: result
-
-- assert:
-    that:
-      - "result.changed == true"
-      - "'ip access-list test' in result.updates"
-      - "'1000 permit ip 192.0.2.1 0.0.0.0 any log' in result.updates"
-      - "'1010 permit ip 192.0.2.2 0.0.0.0 any log' in result.updates"
-      - "'1020 permit ip 192.0.2.3 0.0.0.0 any log' in result.updates"
-      - "'1030 permit ip 192.0.2.4 0.0.0.0 any log' in result.updates"
-
-- name: check sub level command using block replace
-  dellos6_config:
-    lines:
-      - 1000 permit ip 192.0.2.1 0.0.0.0 any log
-      - 1010 permit ip 192.0.2.2 0.0.0.0 any log
-      - 1020 permit ip 192.0.2.3 0.0.0.0 any log
-      - 1030 permit ip 192.0.2.4 0.0.0.0 any log
-    parents: ['ip access-list test']
-    replace: block
-    after: ['exit']
-    provider: "{{ cli }}"
-  register: result
-
-- assert:
-    that:
-      - "result.changed == false"
-
-- name: teardown
-  dellos6_config:
-    lines:
-      - no ip access-list test
-    match: none
-    provider: "{{ cli }}"
-
-- debug: msg="END cli/sublevel_block.yaml"
diff --git a/test/integration/targets/dellos6_config/tests/cli/sublevel_exact.yaml b/test/integration/targets/dellos6_config/tests/cli/sublevel_exact.yaml
deleted file mode 100644
index 9a7bfe6971..0000000000
--- a/test/integration/targets/dellos6_config/tests/cli/sublevel_exact.yaml
+++ /dev/null
@@ -1,66 +0,0 @@
----
-- debug: msg="START cli/sublevel_exact.yaml"
-
-- name: setup
-  dellos6_config:
-    lines:
-      - permit ip 192.0.2.1 0.0.0.0 any log
-      - permit ip 192.0.2.2 0.0.0.0 any log
-      - permit ip 192.0.2.3 0.0.0.0 any log
-      - permit ip 192.0.2.4 0.0.0.0 any log
-      - permit ip 192.0.2.5 0.0.0.0 any log
-    parents: ['ip access-list test']
-    before: ['no ip access-list test']
-    after: ['exit']
-    provider: "{{ cli }}"
-    match: none
-
-- name: configure sub level command using exact match
-  dellos6_config:
-    lines:
-      - 1000 permit ip 192.0.2.1 0.0.0.0 any log
-      - 1010 permit ip 192.0.2.2 0.0.0.0 any log
-      - 1020 permit ip 192.0.2.3 0.0.0.0 any log
-      - 1030 permit ip 192.0.2.4 0.0.0.0 any log
-    parents: ['ip access-list test']
-    after: ['exit']
-    match: exact
-    provider: "{{ cli }}"
-  register: result
-
-- assert:
-    that:
-      - "result.changed == true"
-      - "'ip access-list test' in result.updates"
-      - "'1000 permit ip 192.0.2.1 0.0.0.0 any log' in result.updates"
-      - "'1010 permit ip 192.0.2.2 0.0.0.0 any log' in result.updates"
-      - "'1020 permit ip 192.0.2.3 0.0.0.0 any log' in result.updates"
-      - "'1030 permit ip 192.0.2.4 0.0.0.0 any log' in result.updates"
-      - "'1040 permit ip 192.0.2.5 0.0.0.0 any log' not in result.updates"
-
-- name: check sub level command using exact match
-  dellos6_config:
-    lines:
-      - 1000 permit ip 192.0.2.1 0.0.0.0 any log
-      - 1010 permit ip 192.0.2.2 0.0.0.0 any log
-      - 1020 permit ip 192.0.2.3 0.0.0.0 any log
-      - 1030 permit ip 192.0.2.4 0.0.0.0 any log
-      - 1040 permit ip 192.0.2.5 0.0.0.0 any log
-    parents: ['ip access-list test']
-    after: ['exit']
-    match: exact
-    provider: "{{ cli }}"
-  register: result
-
-- assert:
-    that:
-      - "result.changed == false"
-
-- name: teardown
-  dellos6_config:
-    lines:
-      - no ip access-list test
-    provider: "{{ cli }}"
-    match: none
-
-- debug: msg="END cli/sublevel_exact.yaml"
diff --git a/test/integration/targets/dellos6_config/tests/cli/sublevel_strict.yaml b/test/integration/targets/dellos6_config/tests/cli/sublevel_strict.yaml
deleted file mode 100644
index b858a6085a..0000000000
--- a/test/integration/targets/dellos6_config/tests/cli/sublevel_strict.yaml
+++ /dev/null
@@ -1,63 +0,0 @@
----
-- debug: msg="START cli/sublevel_strict.yaml"
-
-- name: setup
-  dellos6_config:
-    lines:
-      - permit ip 192.0.2.1 0.0.0.0 any log
-      - permit ip 192.0.2.2 0.0.0.0 any log
-      - permit ip 192.0.2.3 0.0.0.0 any log
-      - permit ip 192.0.2.4 0.0.0.0 any log
-      - permit ip 192.0.2.5 0.0.0.0 any log
-    parents: ['ip access-list test']
-    before: ['no ip access-list test']
-    after: ['exit']
-    provider: "{{ cli }}"
-    match: none
-
-- name: configure sub level command using strict match
-  dellos6_config:
-    lines:
-      - 1000 permit ip 192.0.2.1 0.0.0.0 any log
-      - 1010 permit ip 192.0.2.2 0.0.0.0 any log
-      - 1020 permit ip 192.0.2.3 0.0.0.0 any log
-      - 1030 permit ip 192.0.2.4 0.0.0.0 any log
-    parents: ['ip access-list test']
-    match: strict
-    provider: "{{ cli }}"
-  register: result
-
-- assert:
-    that:
-      - "result.changed == false"
-
-- name: check sub level command using strict match
-  dellos6_config:
-    lines:
-      - 1000 permit ip 192.0.2.1 0.0.0.0 any log
-      - 1010 permit ip 192.0.2.3 0.0.0.0 any log
-      - 1020 permit ip 192.0.2.2 0.0.0.0 any log
-    parents: ['ip access-list test']
-    after: ['exit']
-    match: strict
-    provider: "{{ cli }}"
-  register: result
-
-- assert:
-    that:
-      - "result.changed == true"
-      - "'ip access-list test' in result.updates"
-      - "'1000 permit ip 192.0.2.1 0.0.0.0 any log' not in result.updates"
-      - "'1020 permit ip 192.0.2.2 0.0.0.0 any log' in result.updates"
-      - "'1010 permit ip 192.0.2.3 0.0.0.0 any log' in result.updates"
-      - "'1030 permit ip 192.0.2.4 0.0.0.0 any log' not in result.updates"
-      - "'1040 permit ip 192.0.2.5 0.0.0.0 any log' not in result.updates"
-
-- name: teardown
-  dellos6_config:
-    lines:
-      - no ip access-list test
-    provider: "{{ cli }}"
-    match: none
-
-- debug: msg="END cli/sublevel_strict.yaml"
diff --git a/test/integration/targets/dellos6_config/tests/cli/toplevel.yaml b/test/integration/targets/dellos6_config/tests/cli/toplevel.yaml
deleted file mode 100644
index ecfd822df8..0000000000
--- a/test/integration/targets/dellos6_config/tests/cli/toplevel.yaml
+++ /dev/null
@@ -1,37 +0,0 @@
----
-- debug: msg="START cli/toplevel.yaml"
-
-- name: setup
-  dellos6_config:
-    lines: ['hostname {{ inventory_hostname_short }}']
-    provider: "{{ cli }}"
-    match: none
-
-- name: configure top level command
-  dellos6_config:
-    lines: ['hostname foo']
-    provider: "{{ cli }}"
-  register: result
-
-- assert:
-    that:
-      - "result.changed == true"
-      - "'hostname foo' in result.updates"
-
-- name: configure top level command idempotent check
-  dellos6_config:
-    lines: ['hostname "foo"']
-    provider: "{{ cli }}"
-  register: result
-
-- assert:
-    that:
-      - "result.changed == false"
-
-- name: teardown
-  dellos6_config:
-    lines: ['hostname {{ inventory_hostname_short }}']
-    provider: "{{ cli }}"
-    match: none
-
-- debug: msg="END cli/toplevel.yaml"
diff --git a/test/integration/targets/dellos6_config/tests/cli/toplevel_after.yaml b/test/integration/targets/dellos6_config/tests/cli/toplevel_after.yaml
deleted file mode 100644
index bde57cb068..0000000000
--- a/test/integration/targets/dellos6_config/tests/cli/toplevel_after.yaml
+++ /dev/null
@@ -1,44 +0,0 @@
----
-- debug: msg="START cli/toplevel_after.yaml"
-
-- name: setup
-  dellos6_config:
-    lines:
-      - "snmp-server contact ansible"
-      - "hostname {{ inventory_hostname_short }}"
-    provider: "{{ cli }}"
-    match: none
-
-- name: configure top level command with before
-  dellos6_config:
-    lines: ['hostname foo']
-    after: ['snmp-server contact bar']
-    provider: "{{ cli }}"
-  register: result
-
-- assert:
-    that:
-      - "result.changed == true"
-      - "'hostname foo' in result.updates"
-      - "'snmp-server contact bar' in result.updates"
-
-- name: configure top level command with before idempotent check
-  dellos6_config:
-    lines: ['hostname "foo"']
-    after: ['snmp-server contact foo']
-    provider: "{{ cli }}"
-  register: result
-
-- assert:
-    that:
-      - "result.changed == false"
-
-- name: teardown
-  dellos6_config:
-    lines:
-      - "no snmp-server contact"
-      - "hostname {{ inventory_hostname_short }}"
-    provider: "{{ cli }}"
-    match: none
-
-- debug: msg="END cli/toplevel_after.yaml"
diff --git a/test/integration/targets/dellos6_config/tests/cli/toplevel_before.yaml b/test/integration/targets/dellos6_config/tests/cli/toplevel_before.yaml
deleted file mode 100644
index 2142dda913..0000000000
--- a/test/integration/targets/dellos6_config/tests/cli/toplevel_before.yaml
+++ /dev/null
@@ -1,44 +0,0 @@
----
-- debug: msg="START cli/toplevel_before.yaml"
-
-- name: setup
-  dellos6_config:
-    lines:
-      - "snmp-server contact ansible"
-      - "hostname {{ inventory_hostname_short }}"
-    provider: "{{ cli }}"
-    match: none
-
-- name: configure top level command with before
-  dellos6_config:
-    lines: ['hostname foo']
-    before: ['snmp-server contact bar']
-    provider: "{{ cli }}"
-  register: result
-
-- assert:
-    that:
-      - "result.changed == true"
-      - "'hostname foo' in result.updates"
-      - "'snmp-server contact bar' in result.updates"
-
-- name: configure top level command with before idempotent check
-  dellos6_config:
-    lines: ['hostname "foo"']
-    before: ['snmp-server contact foo']
-    provider: "{{ cli }}"
-  register: result
-
-- assert:
-    that:
-      - "result.changed == false"
-
-- name: teardown
-  dellos6_config:
-    lines:
-      - "no snmp-server contact"
-      - "hostname {{ inventory_hostname_short }}"
-    provider: "{{ cli }}"
-    match: none
-
-- debug: msg="END cli/toplevel_before.yaml"
diff --git a/test/integration/targets/dellos6_config/tests/cli/toplevel_nonidempotent.yaml b/test/integration/targets/dellos6_config/tests/cli/toplevel_nonidempotent.yaml
deleted file mode 100644
index 3c94abef82..0000000000
--- a/test/integration/targets/dellos6_config/tests/cli/toplevel_nonidempotent.yaml
+++ /dev/null
@@ -1,39 +0,0 @@
----
-- debug: msg="START cli/toplevel_nonidempotent.yaml"
-
-- name: setup
-  dellos6_config:
-    lines: ['hostname {{ inventory_hostname_short }}']
-    provider: "{{ cli }}"
-    match: none
-
-- name: configure top level command
-  dellos6_config:
-    lines: ['hostname foo']
-    provider: "{{ cli }}"
-    match: strict
-  register: result
-
-- assert:
-    that:
-      - "result.changed == true"
-      - "'hostname foo' in result.updates"
-
-- name: configure top level command idempotent check
-  dellos6_config:
-    lines: ['hostname foo']
-    provider: "{{ cli }}"
-    match: strict
-  register: result
-
-- assert:
-    that:
-      - "result.changed == true"
-
-- name: teardown
-  dellos6_config:
-    lines: ['hostname {{ inventory_hostname_short }}']
-    provider: "{{ cli }}"
-    match: none
-
-- debug: msg="END cli/toplevel_nonidempotent.yaml"
diff --git a/test/integration/targets/dellos6_facts/defaults/main.yaml b/test/integration/targets/dellos6_facts/defaults/main.yaml
deleted file mode 100644
index 5f709c5aac..0000000000
--- a/test/integration/targets/dellos6_facts/defaults/main.yaml
+++ /dev/null
@@ -1,2 +0,0 @@
----
-testcase: "*"
diff --git a/test/integration/targets/dellos6_facts/tasks/cli.yaml b/test/integration/targets/dellos6_facts/tasks/cli.yaml
deleted file mode 100644
index 8c11e106f2..0000000000
--- a/test/integration/targets/dellos6_facts/tasks/cli.yaml
+++ /dev/null
@@ -1,16 +0,0 @@
----
-- name: collect all cli test cases
-  find:
-    paths: "{{ role_path }}/tests/cli"
-    patterns: "{{ testcase }}.yaml"
-  register: test_cases
-
-- name: set test_items
-  set_fact: 
-    test_items: "{{ test_cases.files | map(attribute='path') | list }}"
-
-- name: run test case
-  include: "{{ test_case_to_run }}"
-  with_items: "{{ test_items }}"
-  loop_control:
-    loop_var: test_case_to_run
diff --git a/test/integration/targets/dellos6_facts/tasks/main.yaml b/test/integration/targets/dellos6_facts/tasks/main.yaml
deleted file mode 100644
index 415c99d8b1..0000000000
--- a/test/integration/targets/dellos6_facts/tasks/main.yaml
+++ /dev/null
@@ -1,2 +0,0 @@
----
-- { include: cli.yaml, tags: ['cli'] }
diff --git a/test/integration/targets/dellos6_facts/tests/cli/facts.yaml b/test/integration/targets/dellos6_facts/tests/cli/facts.yaml
deleted file mode 100644
index f6b19ddb56..0000000000
--- a/test/integration/targets/dellos6_facts/tests/cli/facts.yaml
+++ /dev/null
@@ -1,42 +0,0 @@
----
-- debug: msg="START cli/facts.yaml"
-
-- name: test all facts
-  dellos6_facts:
-    gather_subset:
-      - all
-    provider: "{{ cli }}"
-  register: result
-
-- assert:
-    that:
-      - "result.changed == false"
-      - "result.ansible_facts is defined"
-
-- name: test all facts except hardware
-  dellos6_facts:
-    gather_subset:
-      - "!hardware"
-    provider: "{{ cli }}"
-  register: result
-
-- assert:
-    that:
-      - "result.changed == false"
-      - "result.ansible_facts.ansible_net_memfree_mb is not defined"
-
-- name: test interface facts
-  dellos6_facts:
-    gather_subset:
-      - interfaces
-    provider: "{{ cli }}"
-  register: result
-
-- assert:
-    that:
-      - "result.changed == false"
-      - "result.ansible_facts.ansible_net_interfaces is defined"
-      - "result.ansible_facts.ansible_net_memfree_mb is not defined"
-
-
-- debug: msg="END cli/facts.yaml"
diff --git a/test/sanity/ignore.txt b/test/sanity/ignore.txt
index 65eb06513b..054f7f73b5 100644
--- a/test/sanity/ignore.txt
+++ b/test/sanity/ignore.txt
@@ -84,8 +84,6 @@ lib/ansible/module_utils/gcp_utils.py future-import-boilerplate
 lib/ansible/module_utils/gcp_utils.py metaclass-boilerplate
 lib/ansible/module_utils/json_utils.py future-import-boilerplate
 lib/ansible/module_utils/json_utils.py metaclass-boilerplate
-lib/ansible/module_utils/network/dellos6/dellos6.py future-import-boilerplate
-lib/ansible/module_utils/network/dellos6/dellos6.py metaclass-boilerplate
 lib/ansible/module_utils/network/skydive/api.py future-import-boilerplate
 lib/ansible/module_utils/network/skydive/api.py metaclass-boilerplate
 lib/ansible/module_utils/network/vyos/vyos.py future-import-boilerplate
@@ -1044,24 +1042,6 @@ lib/ansible/modules/net_tools/basics/uri.py pylint:blacklisted-name
 lib/ansible/modules/net_tools/basics/uri.py validate-modules:doc-required-mismatch
 lib/ansible/modules/net_tools/basics/uri.py validate-modules:parameter-list-no-elements
 lib/ansible/modules/net_tools/basics/uri.py validate-modules:parameter-type-not-in-doc
-lib/ansible/modules/network/dellos6/dellos6_command.py validate-modules:doc-default-does-not-match-spec
-lib/ansible/modules/network/dellos6/dellos6_command.py validate-modules:doc-missing-type
-lib/ansible/modules/network/dellos6/dellos6_command.py validate-modules:doc-required-mismatch
-lib/ansible/modules/network/dellos6/dellos6_command.py validate-modules:parameter-list-no-elements
-lib/ansible/modules/network/dellos6/dellos6_command.py validate-modules:parameter-type-not-in-doc
-lib/ansible/modules/network/dellos6/dellos6_command.py validate-modules:undocumented-parameter
-lib/ansible/modules/network/dellos6/dellos6_config.py validate-modules:doc-default-does-not-match-spec
-lib/ansible/modules/network/dellos6/dellos6_config.py validate-modules:doc-missing-type
-lib/ansible/modules/network/dellos6/dellos6_config.py validate-modules:doc-required-mismatch
-lib/ansible/modules/network/dellos6/dellos6_config.py validate-modules:parameter-list-no-elements
-lib/ansible/modules/network/dellos6/dellos6_config.py validate-modules:parameter-type-not-in-doc
-lib/ansible/modules/network/dellos6/dellos6_config.py validate-modules:undocumented-parameter
-lib/ansible/modules/network/dellos6/dellos6_facts.py validate-modules:doc-default-does-not-match-spec
-lib/ansible/modules/network/dellos6/dellos6_facts.py validate-modules:doc-missing-type
-lib/ansible/modules/network/dellos6/dellos6_facts.py validate-modules:doc-required-mismatch
-lib/ansible/modules/network/dellos6/dellos6_facts.py validate-modules:parameter-list-no-elements
-lib/ansible/modules/network/dellos6/dellos6_facts.py validate-modules:parameter-type-not-in-doc
-lib/ansible/modules/network/dellos6/dellos6_facts.py validate-modules:undocumented-parameter
 lib/ansible/modules/network/ovs/openvswitch_bridge.py validate-modules:doc-choices-do-not-match-spec
 lib/ansible/modules/network/ovs/openvswitch_bridge.py validate-modules:doc-missing-type
 lib/ansible/modules/network/ovs/openvswitch_bridge.py validate-modules:parameter-type-not-in-doc
@@ -1345,7 +1325,6 @@ lib/ansible/playbook/base.py pylint:blacklisted-name
 lib/ansible/playbook/collectionsearch.py required-and-default-attributes  # https://github.com/ansible/ansible/issues/61460
 lib/ansible/playbook/helpers.py pylint:blacklisted-name
 lib/ansible/playbook/role/__init__.py pylint:blacklisted-name
-lib/ansible/plugins/action/dellos6.py action-plugin-docs # base class for deprecated network platform modules using `connection: local`
 lib/ansible/plugins/action/normal.py action-plugin-docs # default action plugin for modules without a dedicated action plugin
 lib/ansible/plugins/action/vyos.py action-plugin-docs # base class for deprecated network platform modules using `connection: local`
 lib/ansible/plugins/cache/base.py ansible-doc!skip  # not a plugin, but a stub for backwards compatibility
@@ -1361,8 +1340,6 @@ lib/ansible/plugins/doc_fragments/decrypt.py future-import-boilerplate
 lib/ansible/plugins/doc_fragments/decrypt.py metaclass-boilerplate
 lib/ansible/plugins/doc_fragments/default_callback.py future-import-boilerplate
 lib/ansible/plugins/doc_fragments/default_callback.py metaclass-boilerplate
-lib/ansible/plugins/doc_fragments/dellos6.py future-import-boilerplate
-lib/ansible/plugins/doc_fragments/dellos6.py metaclass-boilerplate
 lib/ansible/plugins/doc_fragments/files.py future-import-boilerplate
 lib/ansible/plugins/doc_fragments/files.py metaclass-boilerplate
 lib/ansible/plugins/doc_fragments/hcloud.py future-import-boilerplate
diff --git a/test/units/modules/network/dellos6/dellos6_module.py b/test/units/modules/network/dellos6/dellos6_module.py
deleted file mode 100644
index 2323a02dd9..0000000000
--- a/test/units/modules/network/dellos6/dellos6_module.py
+++ /dev/null
@@ -1,88 +0,0 @@
-# (c) 2016 Red Hat Inc.
-#
-# This file is part of Ansible
-#
-# Ansible is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-#
-# Ansible is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
-
-# Make coding more python3-ish
-from __future__ import (absolute_import, division, print_function)
-__metaclass__ = type
-
-import os
-import json
-
-from units.modules.utils import AnsibleExitJson, AnsibleFailJson, ModuleTestCase
-
-
-fixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')
-fixture_data = {}
-
-
-def load_fixture(name):
-    path = os.path.join(fixture_path, name)
-
-    if path in fixture_data:
-        return fixture_data[path]
-
-    with open(path) as f:
-        data = f.read()
-
-    try:
-        data = json.loads(data)
-    except Exception:
-        pass
-
-    fixture_data[path] = data
-    return data
-
-
-class TestDellos6Module(ModuleTestCase):
-
-    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):
-
-        self.load_fixtures(commands)
-
-        if failed:
-            result = self.failed()
-            self.assertTrue(result['failed'], result)
-        else:
-            result = self.changed(changed)
-            self.assertEqual(result['changed'], changed, result)
-
-        if commands is not None:
-            if sort:
-                self.assertEqual(sorted(commands), sorted(result['updates']), result['updates'])
-            else:
-                self.assertEqual(commands, result['updates'], result['updates'])
-
-        return result
-
-    def failed(self):
-        with self.assertRaises(AnsibleFailJson) as exc:
-            self.module.main()
-
-        result = exc.exception.args[0]
-        self.assertTrue(result['failed'], result)
-        return result
-
-    def changed(self, changed=False):
-        with self.assertRaises(AnsibleExitJson) as exc:
-            self.module.main()
-
-        result = exc.exception.args[0]
-        self.assertEqual(result['changed'], changed, result)
-        return result
-
-    def load_fixtures(self, commands=None):
-        pass
diff --git a/test/units/modules/network/dellos6/fixtures/dellos6_config_config.cfg b/test/units/modules/network/dellos6/fixtures/dellos6_config_config.cfg
deleted file mode 100644
index a8ed721c86..0000000000
--- a/test/units/modules/network/dellos6/fixtures/dellos6_config_config.cfg
+++ /dev/null
@@ -1,16 +0,0 @@
-!
-hostname router
-exit
-!
-interface Te1/0/1
-description "test_string"
-exit
-!
-interface Te1/0/2
-no shutdown
-exit
-!
-interface Te1/0/9
-switchport access vlan 2
-exit
-
diff --git a/test/units/modules/network/dellos6/fixtures/dellos6_config_src.cfg b/test/units/modules/network/dellos6/fixtures/dellos6_config_src.cfg
deleted file mode 100644
index 70d5f6653e..0000000000
--- a/test/units/modules/network/dellos6/fixtures/dellos6_config_src.cfg
+++ /dev/null
@@ -1,7 +0,0 @@
-!
-hostname foo
-exit
-!
-interface Te1/0/2
-shutdown
-exit
diff --git a/test/units/modules/network/dellos6/fixtures/show_interfaces b/test/units/modules/network/dellos6/fixtures/show_interfaces
deleted file mode 100644
index f6aede901b..0000000000
--- a/test/units/modules/network/dellos6/fixtures/show_interfaces
+++ /dev/null
@@ -1,41 +0,0 @@
-Interface Name................................. Te1/0/1
-SOC Hardware Info.............................. BCM56842_A1
-Link Status.................................... Up     /None
-Keepalive Enabled.............................. FALSE
-Err-disable Cause.............................. None
-VLAN Membership Mode........................... Trunk Mode
-VLAN Membership................................ (1),2-4096
-MTU Size....................................... 1518
-Port Mode [Duplex]............................. Full
-Port Speed..................................... 1000
-Link Debounce Flaps............................ 0
-Auto-Negotation Status......................... Auto
-Burned MAC Address............................. F8B1.565B.615E
-L3 MAC Address................................. F8B1.565B.615F
-Sample Load Interval........................... 300
-Received Input Rate Bits/Sec................... 0
-Received Input Rate Packets/Sec................ 0
-Transmitted Input Rate Bits/Sec................ 440
-Transmitted Input Rate Packets/Sec : .......... 0
-Total Packets Received Without Errors.......... 0
-Unicast Packets Received....................... 0
-Multicast Packets Received..................... 0
-Broadcast Packets Received..................... 0
-Total Packets Received with MAC Errors......... 0
-Jabbers Received............................... 0
-Fragments/Undersize Received................... 0
-Alignment Errors............................... 0
-FCS Errors..................................... 0
-Overruns....................................... 0
-Total Received Packets Not Forwarded........... 0
-Total Packets Transmitted Successfully......... 381302
-Unicast Packets Transmitted.................... 1
-Multicast Packets Transmitted.................. 351645
-Broadcast Packets Transmitted.................. 29656
-Transmit Packets Discarded..................... 0
-Total Transmit Errors.......................... 0
-Total Transmit Packets Discarded............... 0
-Single Collision Frames........................ 0
-Multiple Collision Frames...................... 0
-Excessive Collision Frames..................... 0
-
diff --git a/test/units/modules/network/dellos6/fixtures/show_interfaces_status b/test/units/modules/network/dellos6/fixtures/show_interfaces_status
deleted file mode 100644
index 28defda61e..0000000000
--- a/test/units/modules/network/dellos6/fixtures/show_interfaces_status
+++ /dev/null
@@ -1,48 +0,0 @@
-Port      Description     Duplex Speed   Neg  Link   Flow  M  VLAN
-                                              State  Ctrl
---------- --------------- ------ ------- ---- ------ ----- -- -------------------
-Te1/0/1   connected to sp Full   1000    Auto Up     Off   T  (1),2-4096
-Te1/0/2   to_NIC_1        Full   1000    Auto Up     Off   A  99
-Te1/0/3                   N/A    Unknown Auto Down   Off   A  1
-Te1/0/4                   N/A    Unknown Auto Down   Off   A  1
-Te1/0/5                   N/A    Unknown Auto Down   Off   A  1
-Te1/0/6                   N/A    Unknown Auto Down   Off   A  1
-Te1/0/7                   N/A    Unknown Auto Down   Off   A  1
-Te1/0/8                   N/A    Unknown Auto Down   Off   A  1
-Te1/0/9                   N/A    Unknown Auto Down   Off   A  2
-Te1/0/10                  N/A    Unknown Auto Down   Off   A  1
-Te1/0/11                  N/A    Unknown Auto Down   Off   A  1
-Te1/0/12                  N/A    Unknown Auto Down   Off   A  1
-Te1/0/13                  N/A    Unknown Auto Down   Off   A  1
-Te1/0/14                  N/A    Unknown Auto Down   Off   A  1
-Te1/0/15                  N/A    Unknown Auto Down   Off   A  1
-Te1/0/16                  N/A    Unknown Auto Down   Off   A  1
-Te1/0/17                  N/A    Unknown Auto Down   Off   A  1
-Te1/0/18                  N/A    Unknown Auto Down   Off   A  1
-Te1/0/19                  N/A    Unknown Auto Down   Off   A  1
-Te1/0/20                  N/A    Unknown Auto Down   Off   A  1
-Te1/0/21                  N/A    Unknown Auto Down   Off   A  1
-Te1/0/22                  N/A    Unknown Auto Down   Off   A  100
-Te1/0/23                  N/A    Unknown Auto Down   Off   A  1
-Te1/0/24                  N/A    Unknown Auto Down   Off   A  1
-Fo1/1/1                   N/A    N/A     N/A  Detach N/A
-Fo1/1/2                   Full   40000   Off  Down   Off   A  1
-Te1/1/1                   N/A    N/A     N/A  Detach N/A
-Te1/1/2                   N/A    N/A     N/A  Detach N/A
-Te1/1/3                   N/A    N/A     N/A  Detach N/A
-Te1/1/4                   N/A    N/A     N/A  Detach N/A
-Te1/1/5                   N/A    N/A     N/A  Detach N/A
-Te1/1/6                   N/A    N/A     N/A  Detach N/A
-Te1/1/7                   N/A    N/A     N/A  Detach N/A
-Te1/1/8                   N/A    N/A     N/A  Detach N/A
-
-Oob  Type                            Link
-                                     State
----  ------------------------------  -----
-oob  Out-Of-Band                     Up
-
-
-Port    Description                    Link    M  VLAN
-Channel                                State
-------- ------------------------------ ------- -- -------------------
-                                                   
diff --git a/test/units/modules/network/dellos6/fixtures/show_interfaces_transceiver_properties b/test/units/modules/network/dellos6/fixtures/show_interfaces_transceiver_properties
deleted file mode 100644
index 976f45a821..0000000000
--- a/test/units/modules/network/dellos6/fixtures/show_interfaces_transceiver_properties
+++ /dev/null
@@ -1,6 +0,0 @@
-Yes: Dell Qualified        No: Not Qualified
-N/A : Not Applicable
-Port      Type    Media                 Serial Number         Dell Qualified
---------- ------- --------------------- --------------------- --------------
-
-
diff --git a/test/units/modules/network/dellos6/fixtures/show_ip_int b/test/units/modules/network/dellos6/fixtures/show_ip_int
deleted file mode 100644
index 2c2f1e2011..0000000000
--- a/test/units/modules/network/dellos6/fixtures/show_ip_int
+++ /dev/null
@@ -1,15 +0,0 @@
-Default Gateway................................ 0.0.0.0
-L3 MAC Address................................. F8B1.565B.615F
-
-Routing Interfaces:
-
-Interface    State   IP Address      IP Mask         Method
-----------   -----   --------------- --------------- -------
-Vl1          Down    0.0.0.0         0.0.0.0         None
-Vl2          Up      0.0.0.0         0.0.0.0         DHCP
-Vl99         Up      10.99.1.2       255.255.0.0     Manual
-Vl100        Up      192.0.2.3       255.255.255.0   Manual
-Vl999        Up      10.250.1.2      255.255.255.0   Manual
-Vl1010       Up      10.1.1.1        255.255.255.0   Manual
-Vl1681       Up      192.168.100.1   255.255.255.0   Manual
-
diff --git a/test/units/modules/network/dellos6/fixtures/show_lldp b/test/units/modules/network/dellos6/fixtures/show_lldp
deleted file mode 100644
index be89c415b5..0000000000
--- a/test/units/modules/network/dellos6/fixtures/show_lldp
+++ /dev/null
@@ -1,11 +0,0 @@
-LLDP Global Configuration
-
-
-Transmit Interval............................ 30 seconds
-
-Transmit Hold Multiplier..................... 4
-
-Reinit Delay................................. 2 seconds
-
-Notification Interval........................ 5 seconds
-
diff --git a/test/units/modules/network/dellos6/fixtures/show_lldp_remote-device_all b/test/units/modules/network/dellos6/fixtures/show_lldp_remote-device_all
deleted file mode 100644
index 5a135c88e6..0000000000
--- a/test/units/modules/network/dellos6/fixtures/show_lldp_remote-device_all
+++ /dev/null
@@ -1,9 +0,0 @@
-LLDP Remote Device Summary
-
-Local
-Interface RemID   Chassis ID          Port ID           System Name
---------- ------- ------------------- ----------------- -----------------
-Te1/0/5   14      F8:B1:56:70:49:38   Gi1/0/5             MAA-N2048-6884
-
-
-
diff --git a/test/units/modules/network/dellos6/fixtures/show_memory_cpu b/test/units/modules/network/dellos6/fixtures/show_memory_cpu
deleted file mode 100644
index 426576938a..0000000000
--- a/test/units/modules/network/dellos6/fixtures/show_memory_cpu
+++ /dev/null
@@ -1,3 +0,0 @@
-Total Memory................................... 1723232 KBytes
-Available Memory Space......................... 638144 KBytes
-
diff --git a/test/units/modules/network/dellos6/fixtures/show_running-config b/test/units/modules/network/dellos6/fixtures/show_running-config
deleted file mode 100644
index ddcec523f1..0000000000
--- a/test/units/modules/network/dellos6/fixtures/show_running-config
+++ /dev/null
@@ -1,124 +0,0 @@
-!Current Configuration:
-!System Description "Dell Networking N4064F, 6.3.3.10, Linux 3.7.10-e54850e7"
-!System Software Version 6.3.3.10
-!Cut-through mode is configured as disabled
-!
-configure
-hostname "os6"
-slot 1/0 5    ! Dell Networking N4064F
-slot 1/1 8    ! Dell 10GBase-T Card
-stack
-member 1 4    ! N4064F
-exit
-interface out-of-band
-ip address 10.16.148.73 255.255.0.0 10.16.144.254
-exit
-no logging console
-interface vlan 1
-ip address dhcp
-exit
-no passwords min-length
-username "admin" password 21232f297a57a5a743894a0e4a801fc3 privilege 1 encrypted
-line telnet
-exec-timeout 0
-exit
-ip ssh server
-application install SupportAssist auto-restart start-on-boot
-!
-interface Te1/0/1
-no switchport port-security violation protect
-exit
-!
-interface Te1/0/2
-no switchport port-security violation protect
-exit
-!
-interface Te1/0/3
-no switchport port-security violation protect
-exit
-!
-interface Te1/0/4
-no switchport port-security violation protect
-exit
-!
-interface Te1/0/5
-no switchport port-security violation protect
-exit
-!
-interface Te1/0/6
-no switchport port-security violation protect
-exit
-!
-interface Te1/0/7
-no switchport port-security violation protect
-exit
-!
-interface Te1/0/8
-no switchport port-security violation protect
-exit
-!
-interface Te1/0/9
-no switchport port-security violation protect
-exit
-!
-interface Te1/0/10
-no switchport port-security violation protect
-exit
-!
-interface Te1/0/11
-no switchport port-security violation protect
-exit
-!
-interface port-channel 1
-no switchport port-security violation protect
-exit
-!
-interface port-channel 2
-no switchport port-security violation protect
-exit
-!
-interface port-channel 3
-no switchport port-security violation protect
-exit
-!
-interface port-channel 4
-no switchport port-security violation protect
-exit
-!
-interface port-channel 5
-no switchport port-security violation protect
-exit
-!
-snmp-server enable traps dvmrp
-snmp-server enable traps pim
-no snmp-server enable traps vrrp
-no snmp-server enable traps acl
-snmp-server enable traps captive-portal
-snmp-server enable traps captive-portal client-auth-failure
-snmp-server enable traps captive-portal client-connect
-snmp-server enable traps captive-portal client-db-full
-snmp-server enable traps captive-portal client-disconnect
-router bgp 11
-bgp router-id 192.0.2.1
-maximum-paths 2
-maximum-paths ibgp 2
-network 101.1.2.0 mask 255.255.255.0
-template peer MUX_HNV_ACCESS
-remote-as 64918
-exit
-neighbor 10.10.234.16 remote-as 64818
-neighbor 10.10.234.16 default-originate
-neighbor 10.10.234.16 timers 2 5
-neighbor 2001:4898:5808:ffa2::1 remote-as 64818
-neighbor 2001:4898:5808:ffa2::1 default-originate
-neighbor 2001:4898:5808:ffa2::1 timers 2 4
-address-family ipv6
-network 2001:4898:5808:ffa0::/126
-redistribute connected
-exit
-exit
-enable password c4f25f005187e9a85ad6480d3507a541 encrypted
-openflow
-exit
-eula-consent support-assist reject
-exit
diff --git a/test/units/modules/network/dellos6/fixtures/show_running-config__include_hostname b/test/units/modules/network/dellos6/fixtures/show_running-config__include_hostname
deleted file mode 100644
index 35b72bacc6..0000000000
--- a/test/units/modules/network/dellos6/fixtures/show_running-config__include_hostname
+++ /dev/null
@@ -1,3 +0,0 @@
-hostname "dellos6_sw1"
-
-
diff --git a/test/units/modules/network/dellos6/fixtures/show_version b/test/units/modules/network/dellos6/fixtures/show_version
deleted file mode 100644
index 37c58e8b09..0000000000
--- a/test/units/modules/network/dellos6/fixtures/show_version
+++ /dev/null
@@ -1,17 +0,0 @@
-Machine Description............... Dell Networking Switch
-System Model ID................... N4032
-Machine Type...................... Dell Networking N4032
-Serial Number..................... CN04G4FP282984AI0097A01
-Manufacturer...................... 0xbc00
-Burned In MAC Address............. F8B1.565B.615C
-System Object ID.................. 1.3.6.1.4.1.674.10895.3042
-CPU Version....................... XLP308H-B2
-SOC Version....................... BCM56842_A1
-HW Version........................ 3
-CPLD Version...................... 17
-
-unit active      backup      current-active next-active
----- ----------- ----------- -------------- --------------
-1    6.3.3.7     6.3.2.7     6.3.3.7        6.3.3.7
-
-
diff --git a/test/units/modules/network/dellos6/test_dellos6_command.py b/test/units/modules/network/dellos6/test_dellos6_command.py
deleted file mode 100644
index 3b38dad1f8..0000000000
--- a/test/units/modules/network/dellos6/test_dellos6_command.py
+++ /dev/null
@@ -1,108 +0,0 @@
-# (c) 2016 Red Hat Inc.
-#
-# This file is part of Ansible
-#
-# Ansible is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-#
-# Ansible is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
-
-# Make coding more python3-ish
-from __future__ import (absolute_import, division, print_function)
-__metaclass__ = type
-
-import json
-
-from units.compat.mock import patch
-from ansible.modules.network.dellos6 import dellos6_command
-from units.modules.utils import set_module_args
-from .dellos6_module import TestDellos6Module, load_fixture
-
-
-class TestDellos6CommandModule(TestDellos6Module):
-
-    module = dellos6_command
-
-    def setUp(self):
-        super(TestDellos6CommandModule, self).setUp()
-
-        self.mock_run_commands = patch('ansible.modules.network.dellos6.dellos6_command.run_commands')
-        self.run_commands = self.mock_run_commands.start()
-
-    def tearDown(self):
-        super(TestDellos6CommandModule, self).tearDown()
-        self.mock_run_commands.stop()
-
-    def load_fixtures(self, commands=None):
-
-        def load_from_file(*args, **kwargs):
-            module, commands = args
-            output = list()
-
-            for item in commands:
-                try:
-                    obj = json.loads(item['command'])
-                    command = obj['command']
-                except ValueError:
-                    command = item['command']
-                filename = str(command).replace(' ', '_')
-                output.append(load_fixture(filename))
-            return output
-
-        self.run_commands.side_effect = load_from_file
-
-    def test_dellos6_command_simple(self):
-        set_module_args(dict(commands=['show version']))
-        result = self.execute_module()
-        self.assertEqual(len(result['stdout']), 1)
-        self.assertTrue(result['stdout'][0].startswith('Machine Description'))
-
-    def test_dellos6_command_multiple(self):
-        set_module_args(dict(commands=['show version', 'show version']))
-        result = self.execute_module()
-        self.assertEqual(len(result['stdout']), 2)
-        self.assertTrue(result['stdout'][0].startswith('Machine Description'))
-
-    def test_dellos6_command_wait_for(self):
-        wait_for = 'result[0] contains "Machine Description"'
-        set_module_args(dict(commands=['show version'], wait_for=wait_for))
-        self.execute_module()
-
-    def test_dellos6_command_wait_for_fails(self):
-        wait_for = 'result[0] contains "test string"'
-        set_module_args(dict(commands=['show version'], wait_for=wait_for))
-        self.execute_module(failed=True)
-        self.assertEqual(self.run_commands.call_count, 10)
-
-    def test_dellos6_command_retries(self):
-        wait_for = 'result[0] contains "test string"'
-        set_module_args(dict(commands=['show version'], wait_for=wait_for, retries=2))
-        self.execute_module(failed=True)
-        self.assertEqual(self.run_commands.call_count, 2)
-
-    def test_dellos6_command_match_any(self):
-        wait_for = ['result[0] contains "Machine Description"',
-                    'result[0] contains "test string"']
-        set_module_args(dict(commands=['show version'], wait_for=wait_for, match='any'))
-        self.execute_module()
-
-    def test_dellos6_command_match_all(self):
-        wait_for = ['result[0] contains "Machine Description"',
-                    'result[0] contains "Dell Networking"']
-        set_module_args(dict(commands=['show version'], wait_for=wait_for, match='all'))
-        self.execute_module()
-
-    def test_dellos6_command_match_all_failure(self):
-        wait_for = ['result[0] contains "Machine Description"',
-                    'result[0] contains "test string"']
-        commands = ['show version', 'show version']
-        set_module_args(dict(commands=commands, wait_for=wait_for, match='all'))
-        self.execute_module(failed=True)
diff --git a/test/units/modules/network/dellos6/test_dellos6_config.py b/test/units/modules/network/dellos6/test_dellos6_config.py
deleted file mode 100644
index 7cd939486f..0000000000
--- a/test/units/modules/network/dellos6/test_dellos6_config.py
+++ /dev/null
@@ -1,147 +0,0 @@
-#
-# (c) 2016 Red Hat Inc.
-#
-# This file is part of Ansible
-#
-# Ansible is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-#
-# Ansible is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
-
-# Make coding more python3-ish
-from __future__ import (absolute_import, division, print_function)
-__metaclass__ = type
-
-from units.compat.mock import patch
-from ansible.modules.network.dellos6 import dellos6_config
-from units.modules.utils import set_module_args
-from .dellos6_module import TestDellos6Module, load_fixture
-
-
-class TestDellos6ConfigModule(TestDellos6Module):
-
-    module = dellos6_config
-
-    def setUp(self):
-        super(TestDellos6ConfigModule, self).setUp()
-
-        self.mock_get_config = patch('ansible.modules.network.dellos6.dellos6_config.get_config')
-        self.get_config = self.mock_get_config.start()
-
-        self.mock_load_config = patch('ansible.modules.network.dellos6.dellos6_config.load_config')
-        self.load_config = self.mock_load_config.start()
-
-        self.mock_run_commands = patch('ansible.modules.network.dellos6.dellos6_config.run_commands')
-        self.run_commands = self.mock_run_commands.start()
-
-    def tearDown(self):
-        super(TestDellos6ConfigModule, self).tearDown()
-        self.mock_get_config.stop()
-        self.mock_load_config.stop()
-        self.mock_run_commands.stop()
-
-    def load_fixtures(self, commands=None):
-        config_file = 'dellos6_config_config.cfg'
-        self.get_config.return_value = load_fixture(config_file)
-        self.load_config.return_value = None
-
-    def test_dellos6_config_unchanged(self):
-        src = load_fixture('dellos6_config_config.cfg')
-        set_module_args(dict(src=src))
-        self.execute_module()
-
-    def test_dellos6_config_src(self):
-        src = load_fixture('dellos6_config_src.cfg')
-        set_module_args(dict(src=src))
-        commands = ['hostname foo', 'exit', 'interface Te1/0/2',
-                    'shutdown', 'exit']
-        self.execute_module(changed=True, commands=commands)
-
-    def test_dellos6_config_backup(self):
-        set_module_args(dict(backup=True))
-        result = self.execute_module()
-        self.assertIn('__backup__', result)
-
-    def test_dellos6_config_save(self):
-        set_module_args(dict(save=True))
-        self.execute_module(changed=True)
-        self.assertEqual(self.run_commands.call_count, 1)
-        self.assertEqual(self.get_config.call_count, 0)
-        self.assertEqual(self.load_config.call_count, 0)
-        args = self.run_commands.call_args[0][1]
-        self.assertDictContainsSubset({'command': 'copy running-config startup-config'}, args[0])
-#        self.assertIn('copy running-config startup-config\r', args)
-
-    def test_dellos6_config_lines_wo_parents(self):
-        set_module_args(dict(lines=['hostname foo']))
-        commands = ['hostname foo']
-        self.execute_module(changed=True, commands=commands)
-
-    def test_dellos6_config_lines_w_parents(self):
-        set_module_args(dict(lines=['description "teest"', 'exit'], parents=['interface Te1/0/2']))
-        commands = ['interface Te1/0/2', 'description "teest"', 'exit']
-        self.execute_module(changed=True, commands=commands)
-
-    def test_dellos6_config_before(self):
-        set_module_args(dict(lines=['hostname foo'], before=['snmp-server contact bar']))
-        commands = ['snmp-server contact bar', 'hostname foo']
-        self.execute_module(changed=True, commands=commands, sort=False)
-
-    def test_dellos6_config_after(self):
-        set_module_args(dict(lines=['hostname foo'], after=['snmp-server contact bar']))
-        commands = ['hostname foo', 'snmp-server contact bar']
-        self.execute_module(changed=True, commands=commands, sort=False)
-
-    def test_dellos6_config_before_after_no_change(self):
-        set_module_args(dict(lines=['hostname router'],
-                             before=['snmp-server contact bar'],
-                             after=['snmp-server location chennai']))
-        self.execute_module()
-
-    def test_dellos6_config_config(self):
-        config = 'hostname localhost'
-        set_module_args(dict(lines=['hostname router'], config=config))
-        commands = ['hostname router']
-        self.execute_module(changed=True, commands=commands)
-
-    def test_dellos6_config_replace_block(self):
-        lines = ['description test string', 'shutdown']
-        parents = ['interface Te1/0/2']
-        set_module_args(dict(lines=lines, replace='block', parents=parents))
-        commands = parents + lines
-        self.execute_module(changed=True, commands=commands)
-
-    def test_dellos6_config_match_none(self):
-        lines = ['hostname router']
-        set_module_args(dict(lines=lines, match='none'))
-        self.execute_module(changed=True, commands=lines)
-
-    def test_dellos6_config_match_none(self):
-        lines = ['description test string', 'shutdown']
-        parents = ['interface Te1/0/2']
-        set_module_args(dict(lines=lines, parents=parents, match='none'))
-        commands = parents + lines
-        self.execute_module(changed=True, commands=commands, sort=False)
-
-    def test_dellos6_config_match_strict(self):
-        lines = ['description "test_string"',
-                 'shutdown']
-        parents = ['interface Te1/0/1']
-        set_module_args(dict(lines=lines, parents=parents, match='strict'))
-        commands = parents + ['shutdown']
-        self.execute_module(changed=True, commands=commands, sort=False)
-
-    def test_dellos6_config_match_exact(self):
-        lines = ['description test_string', 'shutdown']
-        parents = ['interface Te1/0/1']
-        set_module_args(dict(lines=lines, parents=parents, match='exact'))
-        commands = parents + lines
-        self.execute_module(changed=True, commands=commands, sort=False)
diff --git a/test/units/modules/network/dellos6/test_dellos6_facts.py b/test/units/modules/network/dellos6/test_dellos6_facts.py
deleted file mode 100644
index d28b4874bc..0000000000
--- a/test/units/modules/network/dellos6/test_dellos6_facts.py
+++ /dev/null
@@ -1,105 +0,0 @@
-# (c) 2016 Red Hat Inc.
-#
-# This file is part of Ansible
-#
-# Ansible is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-#
-# Ansible is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
-
-# Make coding more python3-ish
-from __future__ import (absolute_import, division, print_function)
-__metaclass__ = type
-
-import json
-
-from units.compat.mock import patch
-from units.modules.utils import set_module_args
-from .dellos6_module import TestDellos6Module, load_fixture
-from ansible.modules.network.dellos6 import dellos6_facts
-
-
-class TestDellos6Facts(TestDellos6Module):
-
-    module = dellos6_facts
-
-    def setUp(self):
-        super(TestDellos6Facts, self).setUp()
-
-        self.mock_run_command = patch(
-            'ansible.modules.network.dellos6.dellos6_facts.run_commands')
-        self.run_command = self.mock_run_command.start()
-
-    def tearDown(self):
-        super(TestDellos6Facts, self).tearDown()
-
-        self.mock_run_command.stop()
-
-    def load_fixtures(self, commands=None):
-
-        def load_from_file(*args, **kwargs):
-            module, commands = args
-            output = list()
-
-            for item in commands:
-                try:
-                    obj = json.loads(item)
-                    command = obj['command']
-                except ValueError:
-                    command = item
-                if '|' in command:
-                    command = str(command).replace('|', '')
-                filename = str(command).replace(' ', '_')
-                filename = filename.replace('/', '7')
-                output.append(load_fixture(filename))
-            return output
-
-        self.run_command.side_effect = load_from_file
-
-    def test_dellos6_facts_gather_subset_default(self):
-        set_module_args(dict())
-        result = self.execute_module()
-        ansible_facts = result['ansible_facts']
-        self.assertIn('hardware', ansible_facts['ansible_net_gather_subset'])
-        self.assertIn('default', ansible_facts['ansible_net_gather_subset'])
-        self.assertIn('interfaces', ansible_facts['ansible_net_gather_subset'])
-        self.assertEqual('"dellos6_sw1"', ansible_facts['ansible_net_hostname'])
-        self.assertIn('Te1/0/1', ansible_facts['ansible_net_interfaces'].keys())
-        self.assertEqual(1682, ansible_facts['ansible_net_memtotal_mb'])
-        self.assertEqual(623, ansible_facts['ansible_net_memfree_mb'])
-
-    def test_dellos6_facts_gather_subset_config(self):
-        set_module_args({'gather_subset': 'config'})
-        result = self.execute_module()
-        ansible_facts = result['ansible_facts']
-        self.assertIn('default', ansible_facts['ansible_net_gather_subset'])
-        self.assertIn('config', ansible_facts['ansible_net_gather_subset'])
-        self.assertEqual('"dellos6_sw1"', ansible_facts['ansible_net_hostname'])
-        self.assertIn('ansible_net_config', ansible_facts)
-
-    def test_dellos6_facts_gather_subset_hardware(self):
-        set_module_args({'gather_subset': 'hardware'})
-        result = self.execute_module()
-        ansible_facts = result['ansible_facts']
-        self.assertIn('default', ansible_facts['ansible_net_gather_subset'])
-        self.assertIn('hardware', ansible_facts['ansible_net_gather_subset'])
-        self.assertEqual(1682, ansible_facts['ansible_net_memtotal_mb'])
-        self.assertEqual(623, ansible_facts['ansible_net_memfree_mb'])
-
-    def test_dellos6_facts_gather_subset_interfaces(self):
-        set_module_args({'gather_subset': 'interfaces'})
-        result = self.execute_module()
-        ansible_facts = result['ansible_facts']
-        self.assertIn('default', ansible_facts['ansible_net_gather_subset'])
-        self.assertIn('interfaces', ansible_facts['ansible_net_gather_subset'])
-        self.assertIn('Te1/0/1', ansible_facts['ansible_net_interfaces'].keys())
-        self.assertEqual(['Te1/0/5'], list(ansible_facts['ansible_net_neighbors'].keys()))
-        self.assertIn('ansible_net_interfaces', ansible_facts)
