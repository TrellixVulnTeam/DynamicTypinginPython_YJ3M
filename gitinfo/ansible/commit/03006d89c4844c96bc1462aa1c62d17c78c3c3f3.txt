commit 03006d89c4844c96bc1462aa1c62d17c78c3c3f3
Author: Tim Rupp <caphrim007@gmail.com>
Date:   Sat Jul 16 00:41:57 2016 -0700

    Adds style conventions to bigip_monitor_http (#2564)
    
    A number of coding conventions have been adopted for new F5 modules
    that are in development. To ensure common usage across the modules,
    this module needed to be updated to reflect those conventions.
    
    No functional code changes were made.

diff --git a/lib/ansible/modules/extras/network/f5/bigip_monitor_http.py b/lib/ansible/modules/extras/network/f5/bigip_monitor_http.py
index 7e26b7d482..86096e95a2 100644
--- a/lib/ansible/modules/extras/network/f5/bigip_monitor_http.py
+++ b/lib/ansible/modules/extras/network/f5/bigip_monitor_http.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 # -*- coding: utf-8 -*-
-
+#
 # (c) 2013, serge van Ginderachter <serge@vanginderachter.be>
 # based on Matt Hite's bigip_pool module
 # (c) 2013, Matt Hite <mhite@hotmail.com>
@@ -25,160 +25,163 @@ DOCUMENTATION = '''
 module: bigip_monitor_http
 short_description: "Manages F5 BIG-IP LTM http monitors"
 description:
-    - "Manages F5 BIG-IP LTM monitors via iControl SOAP API"
+  - Manages F5 BIG-IP LTM monitors via iControl SOAP API
 version_added: "1.4"
 author:
-    - Serge van Ginderachter (@srvg)
-    - Tim Rupp (@caphrim007)
+  - Serge van Ginderachter (@srvg)
+  - Tim Rupp (@caphrim007)
 notes:
-    - "Requires BIG-IP software version >= 11"
-    - "F5 developed module 'bigsuds' required (see http://devcentral.f5.com)"
-    - "Best run as a local_action in your playbook"
-    - "Monitor API documentation: https://devcentral.f5.com/wiki/iControl.LocalLB__Monitor.ashx"
+  - "Requires BIG-IP software version >= 11"
+  - "F5 developed module 'bigsuds' required (see http://devcentral.f5.com)"
+  - "Best run as a local_action in your playbook"
+  - "Monitor API documentation: https://devcentral.f5.com/wiki/iControl.LocalLB__Monitor.ashx"
 requirements:
-    - bigsuds
+  - bigsuds
 options:
-    server:
-        description:
-            - BIG-IP host
-        required: true
-        default: null
-    server_port:
-        description:
-            - BIG-IP server port
-        required: false
-        default: 443
-        version_added: "2.2"
-    user:
-        description:
-            - BIG-IP username
-        required: true
-        default: null
-    password:
-        description:
-            - BIG-IP password
-        required: true
-        default: null
-    validate_certs:
-        description:
-            - If C(no), SSL certificates will not be validated. This should only be used
-              on personally controlled sites.  Prior to 2.0, this module would always
-              validate on python >= 2.7.9 and never validate on python <= 2.7.8
-        required: false
-        default: 'yes'
-        choices: ['yes', 'no']
-        version_added: 1.9.1
-    state:
-        description:
-            - Monitor state
-        required: false
-        default: 'present'
-        choices: ['present', 'absent']
-    name:
-        description:
-            - Monitor name
-        required: true
-        default: null
-        aliases: ['monitor']
-    partition:
-        description:
-            - Partition for the monitor
-        required: false
-        default: 'Common'
-    parent:
-        description:
-            - The parent template of this monitor template
-        required: false
-        default: 'http'
-    parent_partition:
-        description:
-            - Partition for the parent monitor
-        required: false
-        default: 'Common'
-    send:
-        description:
-            - The send string for the monitor call
-        required: true
-        default: none
-    receive:
-        description:
-            - The receive string for the monitor call
-        required: true
-        default: none
-    receive_disable:
-        description:
-            - The receive disable string for the monitor call
-        required: true
-        default: none
-    ip:
-        description:
-            - IP address part of the ipport definition. The default API setting
-              is "0.0.0.0".
-        required: false
-        default: none
-    port:
-        description:
-            - port address part op the ipport definition. The default API
-              setting is 0.
-        required: false
-        default: none
-    interval:
-        description:
-            - The interval specifying how frequently the monitor instance
-              of this template will run. By default, this interval is used for up and
-              down states. The default API setting is 5.
-        required: false
-        default: none
-    timeout:
-        description:
-            - The number of seconds in which the node or service must respond to
-              the monitor request. If the target responds within the set time
-              period, it is considered up. If the target does not respond within
-              the set time period, it is considered down. You can change this
-              number to any number you want, however, it should be 3 times the
-              interval number of seconds plus 1 second. The default API setting
-              is 16.
-        required: false
-        default: none
-    time_until_up:
-        description:
-            - Specifies the amount of time in seconds after the first successful
-              response before a node will be marked up. A value of 0 will cause a
-              node to be marked up immediately after a valid response is received
-              from the node. The default API setting is 0.
-        required: false
-        default: none
+  server:
+    description:
+      - BIG-IP host
+    required: true
+    default: null
+  server_port:
+    description:
+      - BIG-IP server port
+    required: false
+    default: 443
+    version_added: "2.2"
+  user:
+    description:
+      - BIG-IP username
+    required: true
+    default: null
+  password:
+    description:
+      - BIG-IP password
+    required: true
+    default: null
+  validate_certs:
+    description:
+      - If C(no), SSL certificates will not be validated. This should only be used
+        on personally controlled sites.  Prior to 2.0, this module would always
+        validate on python >= 2.7.9 and never validate on python <= 2.7.8
+    required: false
+    default: 'yes'
+    choices:
+      - yes
+      - no
+    version_added: 2.0
+  state:
+    description:
+      - Monitor state
+    required: false
+    default: 'present'
+    choices:
+      - present
+      - absent
+  name:
+    description:
+      - Monitor name
+    required: true
+    default: null
+    aliases:
+      - monitor
+  partition:
+    description:
+      - Partition for the monitor
+    required: false
+    default: 'Common'
+  parent:
+    description:
+      - The parent template of this monitor template
+    required: false
+    default: 'http'
+  parent_partition:
+    description:
+      - Partition for the parent monitor
+    required: false
+    default: 'Common'
+  send:
+    description:
+      - The send string for the monitor call
+    required: true
+    default: none
+  receive:
+    description:
+      - The receive string for the monitor call
+    required: true
+    default: none
+  receive_disable:
+    description:
+      - The receive disable string for the monitor call
+    required: true
+    default: none
+  ip:
+    description:
+      - IP address part of the ipport definition. The default API setting
+        is "0.0.0.0".
+    required: false
+    default: none
+  port:
+    description:
+      - Port address part of the ip/port definition. The default API
+        setting is 0.
+    required: false
+    default: none
+  interval:
+    description:
+      - The interval specifying how frequently the monitor instance
+        of this template will run. By default, this interval is used for up and
+        down states. The default API setting is 5.
+    required: false
+    default: none
+  timeout:
+    description:
+      - The number of seconds in which the node or service must respond to
+        the monitor request. If the target responds within the set time
+        period, it is considered up. If the target does not respond within
+        the set time period, it is considered down. You can change this
+        number to any number you want, however, it should be 3 times the
+        interval number of seconds plus 1 second. The default API setting
+        is 16.
+    required: false
+    default: none
+  time_until_up:
+    description:
+      - Specifies the amount of time in seconds after the first successful
+        response before a node will be marked up. A value of 0 will cause a
+        node to be marked up immediately after a valid response is received
+        from the node. The default API setting is 0.
+    required: false
+    default: none
 '''
 
 EXAMPLES = '''
 - name: BIGIP F5 | Create HTTP Monitor
-  local_action:
-    module:             bigip_monitor_http
-    state:              present
-    server:             "{{ f5server }}"
-    user:               "{{ f5user }}"
-    password:           "{{ f5password }}"
-    name:               "{{ item.monitorname }}"
-    send:               "{{ item.send }}"
-    receive:            "{{ item.receive }}"
-  with_items: f5monitors
+  bigip_monitor_http:
+      state: "present"
+      server: "lb.mydomain.com"
+      user: "admin"
+      password: "secret"
+      name: "my_http_monitor"
+      send: "http string to send"
+      receive: "http string to receive"
+  delegate_to: localhost
+
 - name: BIGIP F5 | Remove HTTP Monitor
-  local_action:
-    module:             bigip_monitor_http
-    state:              absent
-    server:             "{{ f5server }}"
-    user:               "{{ f5user }}"
-    password:           "{{ f5password }}"
-    name:               "{{ monitorname }}"
+  bigip_monitor_http:
+    state: "absent"
+    server: "lb.mydomain.com"
+    user: "admin"
+    password: "secret"
+    name: "my_http_monitor"
+  delegate_to: localhost
 '''
 
 TEMPLATE_TYPE = 'TTYPE_HTTP'
 DEFAULT_PARENT_TYPE = 'http'
 
 
-
 def check_monitor_exists(module, api, monitor, parent):
-
     # hack to determine if monitor exists
     result = False
     try:
@@ -188,7 +191,7 @@ def check_monitor_exists(module, api, monitor, parent):
             result = True
         else:
             module.fail_json(msg='Monitor already exists, but has a different type (%s) or parent(%s)' % (ttype, parent))
-    except bigsuds.OperationFailed, e:
+    except bigsuds.OperationFailed as e:
         if "was not found" in str(e):
             result = False
         else:
@@ -198,10 +201,15 @@ def check_monitor_exists(module, api, monitor, parent):
 
 
 def create_monitor(api, monitor, template_attributes):
-
     try:
-        api.LocalLB.Monitor.create_template(templates=[{'template_name': monitor, 'template_type': TEMPLATE_TYPE}], template_attributes=[template_attributes])
-    except bigsuds.OperationFailed, e:
+        api.LocalLB.Monitor.create_template(
+            templates=[{
+                'template_name': monitor,
+                'template_type': TEMPLATE_TYPE
+            }],
+            template_attributes=[template_attributes]
+        )
+    except bigsuds.OperationFailed as e:
         if "already exists" in str(e):
             return False
         else:
@@ -211,10 +219,9 @@ def create_monitor(api, monitor, template_attributes):
 
 
 def delete_monitor(api, monitor):
-
     try:
         api.LocalLB.Monitor.delete_template(template_names=[monitor])
-    except bigsuds.OperationFailed, e:
+    except bigsuds.OperationFailed as e:
         # maybe it was deleted since we checked
         if "was not found" in str(e):
             return False
@@ -225,10 +232,12 @@ def delete_monitor(api, monitor):
 
 
 def check_string_property(api, monitor, str_property):
-
     try:
-        return str_property == api.LocalLB.Monitor.get_template_string_property([monitor], [str_property['type']])[0]
-    except bigsuds.OperationFailed, e:
+        template_prop = api.LocalLB.Monitor.get_template_string_property(
+            [monitor], [str_property['type']]
+        )[0]
+        return str_property == template_prop
+    except bigsuds.OperationFailed as e:
         # happens in check mode if not created yet
         if "was not found" in str(e):
             return True
@@ -238,15 +247,19 @@ def check_string_property(api, monitor, str_property):
 
 
 def set_string_property(api, monitor, str_property):
-
-    api.LocalLB.Monitor.set_template_string_property(template_names=[monitor], values=[str_property])
+    api.LocalLB.Monitor.set_template_string_property(
+        template_names=[monitor],
+        values=[str_property]
+    )
 
 
 def check_integer_property(api, monitor, int_property):
-
     try:
-        return int_property == api.LocalLB.Monitor.get_template_integer_property([monitor], [int_property['type']])[0]
-    except bigsuds.OperationFailed, e:
+        template_prop = api.LocalLB.Monitor.get_template_integer_property(
+            [monitor], [int_property['type']]
+        )[0]
+        return int_property == template_prop
+    except bigsuds.OperationFailed as e:
         # happens in check mode if not created yet
         if "was not found" in str(e):
             return True
@@ -255,10 +268,11 @@ def check_integer_property(api, monitor, int_property):
             raise
 
 
-
 def set_integer_property(api, monitor, int_property):
-
-    api.LocalLB.Monitor.set_template_integer_property(template_names=[monitor], values=[int_property])
+    api.LocalLB.Monitor.set_template_integer_property(
+        template_names=[monitor],
+        values=[int_property]
+    )
 
 
 def update_monitor_properties(api, module, monitor, template_string_properties, template_integer_properties):
@@ -278,61 +292,46 @@ def update_monitor_properties(api, module, monitor, template_string_properties,
 
 
 def get_ipport(api, monitor):
-
     return api.LocalLB.Monitor.get_template_destination(template_names=[monitor])[0]
 
 
 def set_ipport(api, monitor, ipport):
-
     try:
-        api.LocalLB.Monitor.set_template_destination(template_names=[monitor], destinations=[ipport])
+        api.LocalLB.Monitor.set_template_destination(
+            template_names=[monitor], destinations=[ipport]
+        )
         return True, ""
-
-    except bigsuds.OperationFailed, e:
+    except bigsuds.OperationFailed as e:
         if "Cannot modify the address type of monitor" in str(e):
             return False, "Cannot modify the address type of monitor if already assigned to a pool."
         else:
             # genuine exception
             raise
 
-# ===========================================
-# main loop
-#
-# writing a module for other monitor types should
-# only need an updated main() (and monitor specific functions)
 
 def main():
-
-    # begin monitor specific stuff
-    argument_spec=f5_argument_spec();
-    argument_spec.update( dict(
-            name      = dict(required=True),
-            parent    = dict(default=DEFAULT_PARENT_TYPE),
-            parent_partition = dict(default='Common'),
-            send      = dict(required=False),
-            receive   = dict(required=False),
-            receive_disable   = dict(required=False),
-            ip        = dict(required=False),
-            port      = dict(required=False, type='int'),
-            interval  = dict(required=False, type='int'),
-            timeout   = dict(required=False, type='int'),
-            time_until_up = dict(required=False, type='int', default=0)
-        )
+    argument_spec = f5_argument_spec()
+
+    meta_args = dict(
+        name=dict(required=True),
+        parent=dict(default=DEFAULT_PARENT_TYPE),
+        parent_partition=dict(default='Common'),
+        send=dict(required=False),
+        receive=dict(required=False),
+        receive_disable=dict(required=False),
+        ip=dict(required=False),
+        port=dict(required=False, type='int'),
+        interval=dict(required=False, type='int'),
+        timeout=dict(required=False, type='int'),
+        time_until_up=dict(required=False, type='int', default=0)
     )
+    argument_spec.update(meta_args)
 
     module = AnsibleModule(
-        argument_spec = argument_spec,
+        argument_spec=argument_spec,
         supports_check_mode=True
     )
 
-    if not bigsuds_found:
-        module.fail_json(msg="the python bigsuds module is required")
-
-    if module.params['validate_certs']:
-        import ssl
-        if not hasattr(ssl, 'SSLContext'):
-            module.fail_json(msg='bigsuds does not support verifying certificates with python < 2.7.9.  Either update python or set validate_certs=False on the task')
-
     server = module.params['server']
     server_port = module.params['server_port']
     user = module.params['user']
@@ -359,15 +358,14 @@ def main():
     api = bigip_api(server, user, password, validate_certs, port=server_port)
     monitor_exists = check_monitor_exists(module, api, monitor, parent)
 
-
     # ipport is a special setting
-    if monitor_exists: # make sure to not update current settings if not asked
+    if monitor_exists:
         cur_ipport = get_ipport(api, monitor)
         if ip is None:
             ip = cur_ipport['ipport']['address']
         if port is None:
             port = cur_ipport['ipport']['port']
-    else: # use API defaults if not defined to create it
+    else:
         if interval is None:
             interval = 5
         if timeout is None:
@@ -412,19 +410,26 @@ def main():
                                   {'type': 'STYPE_RECEIVE_DRAIN',
                                    'value': receive_disable}]
 
-    template_integer_properties = [{'type': 'ITYPE_INTERVAL',
-                                     'value': interval},
-                                   {'type': 'ITYPE_TIMEOUT',
-                                    'value': timeout},
-                                   {'type': 'ITYPE_TIME_UNTIL_UP',
-                                    'value': time_until_up}]
+    template_integer_properties = [
+        {
+            'type': 'ITYPE_INTERVAL',
+            'value': interval
+        },
+        {
+            'type': 'ITYPE_TIMEOUT',
+            'value': timeout
+        },
+        {
+            'type': 'ITYPE_TIME_UNTIL_UP',
+            'value': time_until_up
+        }
+    ]
 
     # main logic, monitor generic
 
     try:
         result = {'changed': False}  # default
 
-
         if state == 'absent':
             if monitor_exists:
                 if not module.check_mode:
@@ -433,10 +438,9 @@ def main():
                     result['changed'] |= delete_monitor(api, monitor)
                 else:
                     result['changed'] |= True
-
-        else: # state present
-            ## check for monitor itself
-            if not monitor_exists: # create it
+        else:
+            # check for monitor itself
+            if not monitor_exists:
                 if not module.check_mode:
                     # again, check changed status here b/c race conditions
                     # if other task already created it
@@ -444,22 +448,20 @@ def main():
                 else:
                     result['changed'] |= True
 
-            ## check for monitor parameters
+            # check for monitor parameters
             # whether it already existed, or was just created, now update
             # the update functions need to check for check mode but
             # cannot update settings if it doesn't exist which happens in check mode
             result['changed'] |= update_monitor_properties(api, module, monitor,
-                                                    template_string_properties,
-                                                    template_integer_properties)
+                                                           template_string_properties,
+                                                           template_integer_properties)
 
             # we just have to update the ipport if monitor already exists and it's different
             if monitor_exists and cur_ipport != ipport:
                 set_ipport(api, monitor, ipport)
                 result['changed'] |= True
-            #else: monitor doesn't exist (check mode) or ipport is already ok
-
-
-    except Exception, e:
+            # else: monitor doesn't exist (check mode) or ipport is already ok
+    except Exception as e:
         module.fail_json(msg="received exception: %s" % e)
 
     module.exit_json(**result)
