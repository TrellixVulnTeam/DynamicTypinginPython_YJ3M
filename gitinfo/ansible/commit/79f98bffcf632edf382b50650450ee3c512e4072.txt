commit 79f98bffcf632edf382b50650450ee3c512e4072
Author: Tony Kinsley <anthony.kinsley@viasat.com>
Date:   Sun Aug 23 11:51:28 2015 -0700

    Adding start and stop actions to os_server_actions
    
    Also making the os_server module allow a server in the possible new
    states from the os_server_actions changes

diff --git a/lib/ansible/modules/cloud/openstack/os_server.py b/lib/ansible/modules/cloud/openstack/os_server.py
index f4132b13ab..91d062f1a1 100644
--- a/lib/ansible/modules/cloud/openstack/os_server.py
+++ b/lib/ansible/modules/cloud/openstack/os_server.py
@@ -368,7 +368,7 @@ def _get_server_state(module, cloud):
     state = module.params['state']
     server = cloud.get_server(module.params['name'])
     if server and state == 'present':
-        if server.status != 'ACTIVE':
+        if server.status not in ('ACTIVE', 'SHUTOFF', 'PAUSED', 'SUSPENDED'):
             module.fail_json(
                 msg="The instance is available but not Active state: "
                     + server.status)
diff --git a/lib/ansible/modules/cloud/openstack/os_server_actions.py b/lib/ansible/modules/cloud/openstack/os_server_actions.py
index 0cfc5bf47c..76f34c4707 100644
--- a/lib/ansible/modules/cloud/openstack/os_server_actions.py
+++ b/lib/ansible/modules/cloud/openstack/os_server_actions.py
@@ -55,7 +55,7 @@ options:
      description:
        - Perform the given action. The lock and unlock actions always return
          changed as the servers API does not provide lock status.
-     choices: [pause, unpause, lock, unlock, suspend, resume]
+     choices: [stop, start, pause, unpause, lock, unlock, suspend, resume]
      default: present
 requirements:
     - "python >= 2.6"
@@ -75,7 +75,9 @@ EXAMPLES = '''
        timeout: 200
 '''
 
-_action_map = {'pause': 'PAUSED',
+_action_map = {'stop': 'SHUTOFF',
+               'start': 'ACTIVE',
+               'pause': 'PAUSED',
                'unpause': 'ACTIVE',
                'lock': 'ACTIVE', # API doesn't show lock/unlock status
                'unlock': 'ACTIVE',
@@ -87,11 +89,11 @@ _admin_actions = ['pause', 'unpause', 'suspend', 'resume', 'lock', 'unlock']
 def _wait(timeout, cloud, server, action):
     """Wait for the server to reach the desired state for the given action."""
 
-    for count in shade._iterate_timeout(
+    for count in shade._utils._iterate_timeout(
             timeout,
             "Timeout waiting for server to complete %s" % action):
         try:
-           server = cloud.get_server(server.id)
+            server = cloud.get_server(server.id)
         except Exception:
             continue
 
@@ -110,8 +112,8 @@ def _system_state_change(action, status):
 def main():
     argument_spec = openstack_full_argument_spec(
         server=dict(required=True),
-        action=dict(required=True, choices=['pause', 'unpause', 'lock', 'unlock', 'suspend',
-                                            'resume']),
+        action=dict(required=True, choices=['stop', 'start', 'pause', 'unpause',
+                                            'lock', 'unlock', 'suspend', 'resume']),
     )
 
     module_kwargs = openstack_module_kwargs()
@@ -137,6 +139,24 @@ def main():
         if module.check_mode:
             module.exit_json(changed=_system_state_change(action, status))
 
+        if action == 'stop':
+            if not _system_state_change(action, status):
+                module.exit_json(changed=False)
+
+            cloud.nova_client.servers.stop(server=server.id)
+            if wait:
+                _wait(timeout, cloud, server, action)
+                module.exit_json(changed=True)
+
+        if action == 'start':
+            if not _system_state_change(action, status):
+                module.exit_json(changed=False)
+
+            cloud.nova_client.servers.start(server=server.id)
+            if wait:
+                _wait(timeout, cloud, server, action)
+                module.exit_json(changed=True)
+
         if action == 'pause':
             if not _system_state_change(action, status):
                 module.exit_json(changed=False)
