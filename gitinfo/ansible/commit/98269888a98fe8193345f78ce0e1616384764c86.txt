commit 98269888a98fe8193345f78ce0e1616384764c86
Author: Trishna Guha <trishnaguha17@gmail.com>
Date:   Fri Jun 16 11:56:47 2017 +0530

    iosxr_banner Implementation module (#25744)
    
    * Add iosxr_banner implementation module
    
    Signed-off-by: Trishna Guha <trishnaguha17@gmail.com>
    
    * Integration test for iosxr_banner
    
    Signed-off-by: Trishna Guha <trishnaguha17@gmail.com>
    
    * Unit test for iosxr_banner
    
    Signed-off-by: Trishna Guha <trishnaguha17@gmail.com>
    
    * remove blank line pep8
    
    Signed-off-by: Trishna Guha <trishnaguha17@gmail.com>

diff --git a/lib/ansible/modules/network/iosxr/iosxr_banner.py b/lib/ansible/modules/network/iosxr/iosxr_banner.py
new file mode 100644
index 0000000000..2493866290
--- /dev/null
+++ b/lib/ansible/modules/network/iosxr/iosxr_banner.py
@@ -0,0 +1,173 @@
+#!/usr/bin/python
+# -*- coding: utf-8 -*-
+
+# (c) 2017, Ansible by Red Hat, inc
+#
+# This file is part of Ansible by Red Hat
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+#
+
+ANSIBLE_METADATA = {'metadata_version': '1.0',
+                    'status': ['preview'],
+                    'supported_by': 'core'}
+
+DOCUMENTATION = """
+---
+module: iosxr_banner
+version_added: "2.4"
+author: "Trishna Guha (@trishnag)"
+short_description: Manage multiline banners on Cisco IOS XR devices
+description:
+  - This will configure both exec and motd banners on remote devices
+    running Cisco IOS XR. It allows playbooks to add or remote
+    banner text from the active running configuration.
+options:
+  banner:
+    description:
+      - Specifies which banner that should be
+        configured on the remote device.
+    required: true
+    default: null
+    choices: ['login', 'banner']
+  text:
+    description:
+      - The banner text that should be
+        present in the remote device running configuration. This argument
+        accepts a multiline string, with no empty lines. Requires I(state=present).
+    default: null
+  state:
+    description:
+      - Specifies whether or not the configuration is present in the current
+        devices active running configuration.
+    default: present
+    choices: ['present', 'absent']
+"""
+
+EXAMPLES = """
+- name: configure the login banner
+  iosxr_banner:
+    banner: login
+    text: |
+      this is my login banner
+      that contains a multiline
+      string
+    state: present
+- name: remove the motd banner
+  iosxr_banner:
+    banner: motd
+    state: absent
+- name: Configure banner from file
+  iosxr_banner:
+    banner:  motd
+    text: "{{ lookup('file', './config_partial/raw_banner.cfg') }}"
+    state: present
+"""
+
+RETURN = """
+commands:
+  description: The list of configuration mode commands to send to the device
+  returned: always
+  type: list
+  sample:
+    - banner login
+    - this is my login banner
+    - that contains a multiline
+    - string
+"""
+
+from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.iosxr import get_config, load_config
+from ansible.module_utils.iosxr import iosxr_argument_spec, check_args
+
+
+def map_obj_to_commands(updates, module):
+    commands = list()
+    want, have = updates
+    state = module.params['state']
+
+    if state == 'absent' or (state == 'absent' and
+                             'text' in have.keys() and have['text']):
+        commands.append('no banner %s' % module.params['banner'])
+
+    elif state == 'present':
+        if want['text'] and (want['text'] != have.get('text')):
+            banner_cmd = 'banner %s ' % module.params['banner']
+            banner_cmd += want['text'].strip()
+            commands.append(banner_cmd)
+
+    return commands
+
+
+def map_config_to_obj(module):
+    flags = 'banner %s' % module.params['banner']
+    output = get_config(module, flags=[flags])
+    obj = {'banner': module.params['banner'], 'state': 'absent'}
+    if output:
+        obj['text'] = output
+        obj['state'] = 'present'
+
+    return obj
+
+
+def map_params_to_obj(module):
+    text = module.params['text']
+    if text:
+        text = str(text).strip()
+
+    return {
+        'banner': module.params['banner'],
+        'text': text,
+        'state': module.params['state']
+    }
+
+
+def main():
+    """ main entry point for module execution
+    """
+    argument_spec = dict(
+        banner=dict(required=True, choices=['login', 'motd']),
+        text=dict(),
+        state=dict(default='present', choices=['present', 'absent'])
+    )
+
+    argument_spec.update(iosxr_argument_spec)
+
+    required_if = [('state', 'present', ('text',))]
+
+    module = AnsibleModule(argument_spec=argument_spec,
+                           required_if=required_if,
+                           supports_check_mode=True)
+
+    warnings = list()
+    check_args(module, warnings)
+
+    result = {'changed': False}
+    result['warnings'] = warnings
+
+    want = map_params_to_obj(module)
+    have = map_config_to_obj(module)
+
+    commands = map_obj_to_commands((want, have), module)
+    result['commands'] = commands
+
+    if commands:
+        if not module.check_mode:
+            load_config(module, commands, result['warnings'], commit=True)
+        result['changed'] = True
+
+    module.exit_json(**result)
+
+if __name__ == '__main__':
+    main()
diff --git a/test/integration/iosxr.yaml b/test/integration/iosxr.yaml
index d3e2aade6c..8b9f968b22 100644
--- a/test/integration/iosxr.yaml
+++ b/test/integration/iosxr.yaml
@@ -14,3 +14,4 @@
     - { role: iosxr_template, when: "limit_to in ['*', 'iosxr_template']" }
     - { role: iosxr_system, when: "limit_to in ['*', 'iosxr_system']" }
     - { role: iosxr_user, when: "limit_to in ['*', 'iosxr_user']" }
+    - { role: iosxr_banner, when: "limit_to in ['*', 'iosxr_banner']" }
diff --git a/test/integration/targets/iosxr_banner/defaults/main.yaml b/test/integration/targets/iosxr_banner/defaults/main.yaml
new file mode 100644
index 0000000000..9ef5ba5165
--- /dev/null
+++ b/test/integration/targets/iosxr_banner/defaults/main.yaml
@@ -0,0 +1,3 @@
+---
+testcase: "*"
+test_items: []
diff --git a/test/integration/targets/iosxr_banner/meta/main.yaml b/test/integration/targets/iosxr_banner/meta/main.yaml
new file mode 100644
index 0000000000..d4da833dd5
--- /dev/null
+++ b/test/integration/targets/iosxr_banner/meta/main.yaml
@@ -0,0 +1,2 @@
+dependencies:
+  - prepare_iosxr_tests
diff --git a/test/integration/targets/iosxr_banner/tasks/cli.yaml b/test/integration/targets/iosxr_banner/tasks/cli.yaml
new file mode 100644
index 0000000000..46d86dd698
--- /dev/null
+++ b/test/integration/targets/iosxr_banner/tasks/cli.yaml
@@ -0,0 +1,16 @@
+---
+- name: collect all cli test cases
+  find:
+    paths: "{{ role_path }}/tests/cli"
+    patterns: "{{ testcase }}.yaml"
+  register: test_cases
+  delegate_to: localhost
+
+- name: set test_items
+  set_fact: test_items="{{ test_cases.files | map(attribute='path') | list }}"
+
+- name: run test case
+  include: "{{ test_case_to_run }}"
+  with_items: "{{ test_items }}"
+  loop_control:
+    loop_var: test_case_to_run
diff --git a/test/integration/targets/iosxr_banner/tasks/main.yaml b/test/integration/targets/iosxr_banner/tasks/main.yaml
new file mode 100644
index 0000000000..415c99d8b1
--- /dev/null
+++ b/test/integration/targets/iosxr_banner/tasks/main.yaml
@@ -0,0 +1,2 @@
+---
+- { include: cli.yaml, tags: ['cli'] }
diff --git a/test/integration/targets/iosxr_banner/tests/cli/basic-login.yaml b/test/integration/targets/iosxr_banner/tests/cli/basic-login.yaml
new file mode 100644
index 0000000000..9e87a5d5ad
--- /dev/null
+++ b/test/integration/targets/iosxr_banner/tests/cli/basic-login.yaml
@@ -0,0 +1,47 @@
+---
+- name: setup - remove login
+  iosxr_banner:
+    banner: login
+    state: absent
+    provider: "{{ cli }}"
+
+- name: Set login
+  iosxr_banner:
+    banner: login
+    text: |
+      this is my login banner
+      that has a multiline
+      string
+    state: present
+    provider: "{{ cli }}"
+  register: result
+
+- debug:
+    msg: "{{ result }}"
+
+- assert:
+    that:
+      - "result.changed == true"
+      - "'this is my login banner' in result.commands"
+      - "'that has a multiline' in result.commands"
+
+- name: Set login again (idempotent)
+  iosxr_banner:
+    banner: login
+    text: |
+      this is my login banner
+      that has a multiline
+      string
+    state: present
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - "result.changed == false"
+      - "result.commands | length == 0"
+
+
+# FIXME add in tests for everything defined in docs
+# FIXME Test state:absent + test:
+# FIXME Without powers ensure "privileged mode required"
diff --git a/test/integration/targets/iosxr_banner/tests/cli/basic-motd.yaml b/test/integration/targets/iosxr_banner/tests/cli/basic-motd.yaml
new file mode 100644
index 0000000000..da7b78c17e
--- /dev/null
+++ b/test/integration/targets/iosxr_banner/tests/cli/basic-motd.yaml
@@ -0,0 +1,47 @@
+---
+- name: setup - remove motd
+  iosxr_banner:
+    banner: motd
+    state: absent
+    provider: "{{ cli }}"
+
+- name: Set motd
+  iosxr_banner:
+    banner: motd
+    text: |
+      this is my motd banner
+      that has a multiline
+      string
+    state: present
+    provider: "{{ cli }}"
+  register: result
+
+- debug:
+    msg: "{{ result }}"
+
+- assert:
+    that:
+      - "result.changed == true"
+      - "'this is my motd banner' in result.commands"
+      - "'that has a multiline' in result.commands"
+
+- name: Set motd again (idempotent)
+  iosxr_banner:
+    banner: motd
+    text: |
+      this is my motd banner
+      that has a multiline
+      string
+    state: present
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - "result.changed == false"
+      - "result.commands | length == 0"
+
+
+# FIXME add in tests for everything defined in docs
+# FIXME Test state:absent + test:
+# FIXME Without powers ensure "privileged mode required"
diff --git a/test/integration/targets/iosxr_banner/tests/cli/basic-no-login.yaml b/test/integration/targets/iosxr_banner/tests/cli/basic-no-login.yaml
new file mode 100644
index 0000000000..7590b6b2fa
--- /dev/null
+++ b/test/integration/targets/iosxr_banner/tests/cli/basic-no-login.yaml
@@ -0,0 +1,41 @@
+---
+- name: Setup
+  iosxr_banner:
+    banner: login
+    text: |
+      Junk login banner
+      over multiple lines
+    state: present
+    provider: "{{ cli }}"
+
+- name: remove login
+  iosxr_banner:
+    banner: login
+    state: absent
+    provider: "{{ cli }}"
+  register: result
+
+- debug:
+    msg: "{{ result }}"
+
+- assert:
+    that:
+      - "result.changed == true"
+      - "'no banner login' in result.commands"
+
+- name: remove login (idempotent)
+  iosxr_banner:
+    banner: login
+    state: absent
+    provider: "{{ cli }}"
+  register: result
+
+- assert:
+    that:
+      - "result.changed == false"
+      - "result.commands | length == 0"
+
+
+# FIXME add in tests for everything defined in docs
+# FIXME Test state:absent + test:
+# FIXME Without powers ensure "privileged mode required"
diff --git a/test/units/modules/network/iosxr/test_iosxr_banner.py b/test/units/modules/network/iosxr/test_iosxr_banner.py
new file mode 100644
index 0000000000..ae2c07ed81
--- /dev/null
+++ b/test/units/modules/network/iosxr/test_iosxr_banner.py
@@ -0,0 +1,53 @@
+# This file is part of Ansible
+#
+# Ansible is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Ansible is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
+
+# Make coding more python3-ish
+from __future__ import (absolute_import, division, print_function)
+__metaclass__ = type
+
+import json
+
+from ansible.compat.tests.mock import patch
+from ansible.modules.network.iosxr import iosxr_banner
+from .iosxr_module import TestIosxrModule, load_fixture, set_module_args
+
+
+class TestIosxrBannerModule(TestIosxrModule):
+
+    module = iosxr_banner
+
+    def setUp(self):
+        self.mock_get_config = patch('ansible.modules.network.iosxr.iosxr_banner.get_config')
+        self.get_config = self.mock_get_config.start()
+
+        self.mock_load_config = patch('ansible.modules.network.iosxr.iosxr_banner.load_config')
+        self.load_config = self.mock_load_config.start()
+
+    def tearDown(self):
+        self.mock_get_config.stop()
+        self.mock_load_config.stop()
+
+    def load_fixtures(self, commands=None):
+        self.load_config.return_value = dict(diff=None, session='session')
+
+    def test_iosxr_banner_create(self):
+        set_module_args(dict(banner='login', text='test\nbanner\nstring'))
+        commands = ['banner login test\nbanner\nstring']
+        self.execute_module(changed=True, commands=commands)
+
+    def test_iosxr_banner_remove(self):
+        set_module_args(dict(banner='login', state='absent'))
+        commands = ['no banner login']
+        self.execute_module(changed=True, commands=commands)
