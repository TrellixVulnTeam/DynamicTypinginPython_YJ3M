commit 0e72f3bd71296bbb304e900296beb32e38cd44ab
Author: Wayne Witzel III <wayne@riotousliving.com>
Date:   Mon Jan 30 13:42:32 2017 -0500

    Ansible Tower organization module (#20355)
    
    * add Ansible Tower organization module
    
    * skip Python 2.4 check for ansible_tower module
    
    * make spec and doc match, extract tower auth helper method
    
    * added auth params at module level
    
    * support check mode
    
    * extract check mode check to ansible_tower utils, add utils to 2.4 skip
    
    * update interpreter shebang
    
    * remove colon from docs
    
    * no log for password, verify_ssl default to true

diff --git a/lib/ansible/module_utils/ansible_tower.py b/lib/ansible/module_utils/ansible_tower.py
new file mode 100644
index 0000000000..3055ddfd83
--- /dev/null
+++ b/lib/ansible/module_utils/ansible_tower.py
@@ -0,0 +1,77 @@
+# This code is part of Ansible, but is an independent component.
+# This particular file snippet, and this file snippet only, is BSD licensed.
+# Modules you write using this snippet, which is embedded dynamically by Ansible
+# still belong to the author of the module, and may assign their own license
+# to the complete work.
+#
+# Copyright (c), Wayne Witzel III <wayne@riotousliving.com>
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without modification,
+# are permitted provided that the following conditions are met:
+#
+#    * Redistributions of source code must retain the above copyright
+#      notice, this list of conditions and the following disclaimer.
+#    * Redistributions in binary form must reproduce the above copyright notice,
+#      this list of conditions and the following disclaimer in the documentation
+#      and/or other materials provided with the distribution.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
+# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+import os
+
+import tower_cli.utils.exceptions as exc
+from tower_cli.utils import parser
+from tower_cli.api import client
+
+
+def tower_auth_config(module):
+    '''tower_auth_config attempts to load the tower-cli.cfg file
+    specified from the `tower_config_file` parameter. If found,
+    if returns the contents of the file as a dictionary, else
+    it will attempt to fetch values from the module pararms and
+    only pass those values that have been set.
+    '''
+    config_file = module.params.get('tower_config_file')
+    if config_file:
+        config_file = os.path.expanduser(config_file)
+        if not os.path.exists(config_file):
+            module.fail_json(msg='file not found: %s' % config_file)
+        if os.path.isdir(config_file):
+            module.fail_json(msg='directory can not be used as config file: %s' % config_file)
+
+        with open(config_file, 'rb') as f:
+            return parser.string_to_dict(f.read())
+    else:
+        auth_config = {}
+        host = module.params.get('host')
+        if host:
+            auth_config['host'] = host
+        username = module.params.get('username')
+        if username:
+            auth_config['username'] = username
+        password = module.params.get('password')
+        if password:
+            auth_config['password'] = password
+        verify_ssl = module.params.get('verify_ssl')
+        if verify_ssl:
+            auth_config['verify_ssl'] = verify_ssl
+        return auth_config
+
+
+def tower_check_mode(module):
+    '''Execute check mode logic for Ansible Tower modules'''
+    if module.check_mode:
+        try:
+            result = client.get('/ping').json()
+            module.exit_json(changed=True, tower_version='{0}'.format(result['version']))
+        except (exc.ServerError, exc.ConnectionError, exc.BadRequest) as excinfo:
+            module.fail_json(changed=False, msg='Failed check mode: {0}'.format(excinfo))
diff --git a/lib/ansible/modules/web_infrastructure/ansible_tower/__init__.py b/lib/ansible/modules/web_infrastructure/ansible_tower/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/lib/ansible/modules/web_infrastructure/ansible_tower/tower_organization.py b/lib/ansible/modules/web_infrastructure/ansible_tower/tower_organization.py
new file mode 100644
index 0000000000..f661bc4fee
--- /dev/null
+++ b/lib/ansible/modules/web_infrastructure/ansible_tower/tower_organization.py
@@ -0,0 +1,152 @@
+#!/usr/bin/python
+#coding: utf-8 -*-
+
+# (c) 2017, Wayne Witzel III <wayne@riotousliving.com>
+#
+# This module is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# This software is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this software.  If not, see <http://www.gnu.org/licenses/>.
+
+DOCUMENTATION = '''
+---
+module: tower_organization
+version_added: "2.3"
+short_description: create, update, or destroy Ansible Tower organizations
+description:
+    - Create, update, or destroy Ansible Tower organizations. See
+      U(https://www.ansible.com/tower) for an overview.
+options:
+    name:
+      description:
+        - Name to use for the organization.
+      required: True
+    description:
+      description:
+        - String to use for the organization.
+      required: False
+      default: null
+    state:
+      description:
+        - Desired state of the resource.
+      required: False
+      default: "present"
+      choices: ["present", "absent"]
+    host:
+      description:
+        - URL to your Tower instance.
+      required: False
+      default: null
+    username:
+        description:
+          - Username for your Tower instance.
+        required: False
+        default: null
+    password:
+        description:
+          - Password for your Tower instance.
+        required: False
+        default: null
+    verify_ssl:
+        description:
+          - Dis/allow insecure connections to Tower. If C(no), SSL certificates will not be validated.
+            This should only be used on personally controlled sites using self-signed certificates.
+        required: False
+        default: 'yes'
+    tower_config_file:
+      description:
+        - Path to the Tower config file. See notes.
+      required: False
+      default: null
+
+
+requirements:
+  - "python >= 2.6"
+  - "ansible-tower-cli >= 3.0.3"
+
+notes:
+  - If no I(tower_config_file) is provided we will attempt to use the tower-cli library
+    defaults to find your Tower host information.
+  - I(tower_config_file) should contain Tower configuration in the following format
+      host=hostname
+      username=username
+      password=password
+'''
+
+
+EXAMPLES = '''
+  - tasks
+    - name: Create organization
+      tower_organization:
+          name: "Foo"
+          description: "Foo bar organization"
+          state: present
+          tower_config_file: "~/tower_cli.cfg"
+'''
+
+import os
+
+try:
+    import tower_cli
+    import tower_cli.utils.exceptions as exc
+
+    from tower_cli.conf import settings
+    from ansible.module_utils.ansible_tower import tower_auth_config, tower_check_mode
+
+    HAS_TOWER_CLI = True
+except ImportError:
+    HAS_TOWER_CLI = False
+
+
+def main():
+    module = AnsibleModule(
+        argument_spec = dict(
+            name = dict(required=True),
+            description = dict(),
+            host = dict(),
+            username = dict(),
+            password = dict(no_log=True),
+            verify_ssl = dict(type='bool', default='yes'),
+            tower_config_file = dict(type='path'),
+            state = dict(choices=['present', 'absent'], default='present'),
+        ),
+        supports_check_mode=True
+    )
+
+    if not HAS_TOWER_CLI:
+        module.fail_json(msg='ansible-tower-cli required for this module')
+
+    name = module.params.get('name')
+    description = module.params.get('description')
+    state = module.params.get('state')
+
+    json_output = {'organization': name, 'state': state}
+
+    tower_auth = tower_auth_config(module)
+    with settings.runtime_values(**tower_auth):
+        tower_check_mode(module)
+        organization = tower_cli.get_resource('organization')
+        try:
+            if state == 'present':
+                result = organization.modify(name=name, description=description, create_on_missing=True)
+                json_output['id'] = result['id']
+            elif state == 'absent':
+                result = organization.delete(name=name)
+        except (exc.ConnectionError, exc.BadRequest) as excinfo:
+            module.fail_json(msg='Failed to update the organization: {0}'.format(excinfo), changed=False)
+
+    json_output['changed'] = result['changed']
+    module.exit_json(**json_output)
+
+
+from ansible.module_utils.basic import AnsibleModule
+if __name__ == '__main__':
+    main()
diff --git a/test/compile/python2.4-skip.txt b/test/compile/python2.4-skip.txt
index 07b2b11157..ec68ee9cf7 100644
--- a/test/compile/python2.4-skip.txt
+++ b/test/compile/python2.4-skip.txt
@@ -27,7 +27,9 @@
 /lib/ansible/modules/storage/infinidat/
 /lib/ansible/modules/univention/
 /lib/ansible/modules/web_infrastructure/letsencrypt.py
+/lib/ansible/modules/web_infrastructure/ansible_tower/
 /lib/ansible/module_utils/a10.py
+/lib/ansible/module_utils/ansible_tower.py
 /lib/ansible/module_utils/azure_rm_common.py
 /lib/ansible/module_utils/cloud.py
 /lib/ansible/module_utils/docker_common.py
