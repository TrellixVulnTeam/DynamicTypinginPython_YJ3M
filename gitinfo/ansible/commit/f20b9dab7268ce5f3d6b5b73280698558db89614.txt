commit f20b9dab7268ce5f3d6b5b73280698558db89614
Author: Sloane Hertel <shertel@redhat.com>
Date:   Wed Feb 7 15:04:36 2018 -0500

    Add cloudwatchlogs_log_group_facts module (#35314)
    
    * Add cloudwatchlogs_log_group_facts module
    
    * pep8
    
    * Add new module cloudwatchlogs_log_group_facts to CHANGELOG

diff --git a/CHANGELOG.md b/CHANGELOG.md
index c13a84e11d..8d7800319e 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -122,6 +122,7 @@ While neither is technically a new plugin, these connections may now be used dir
   * cloudfront_distribution
   * cloudfront_invalidation
   * cloudfront_origin_access_identity
+  * cloudwatchlogs_log_group_facts
   * ec2_ami_facts
   * ec2_asg_lifecycle_hook
   * ec2_customer_gateway_facts
diff --git a/lib/ansible/modules/cloud/amazon/cloudwatchlogs_log_group_facts.py b/lib/ansible/modules/cloud/amazon/cloudwatchlogs_log_group_facts.py
new file mode 100644
index 0000000000..0b0c48cd57
--- /dev/null
+++ b/lib/ansible/modules/cloud/amazon/cloudwatchlogs_log_group_facts.py
@@ -0,0 +1,126 @@
+#!/usr/bin/python
+# Copyright: Ansible Project
+# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
+
+from __future__ import absolute_import, division, print_function
+
+__metaclass__ = type
+
+ANSIBLE_METADATA = {'metadata_version': '1.1',
+                    'status': ['preview'],
+                    'supported_by': 'community'}
+
+DOCUMENTATION = '''
+---
+module: cloudwatchlogs_log_group_facts
+short_description: get facts about log_group in CloudWatchLogs
+description: Lists the specified log groups. You can list all your log groups or filter the results by prefix.
+version_added: "2.5"
+author:
+    - Willian Ricardo(@willricardo) <willricardo@gmail.com>
+requirements: [ botocore, boto3 ]
+options:
+    log_group_name:
+      description:
+        - The name or prefix of the log group to filter by.
+extends_documentation_fragment:
+    - aws
+    - ec2
+'''
+
+EXAMPLES = '''
+# Note: These examples do not set authentication details, see the AWS Guide for details.
+- cloudwatchlogs_log_group:
+    log_group_name: test-log-group
+'''
+
+RETURN = '''
+log_groups:
+    description: Return the list of complex objetcs representing log groups
+    returned: success
+    type: complex
+    contains:
+        log_group_name:
+            description: The name of the log group.
+            returned: always
+            type: string
+        creation_time:
+            description: The creation time of the log group.
+            returned: always
+            type: integer
+        retention_in_days:
+            description: The number of days to retain the log events in the specified log group.
+            returned: always
+            type: integer
+        metric_filter_count:
+            description: The number of metric filters.
+            returned: always
+            type: integer
+        arn:
+            description: The Amazon Resource Name (ARN) of the log group.
+            returned: always
+            type: string
+        stored_bytes:
+            description: The number of bytes stored.
+            returned: always
+            type: string
+        kms_key_id:
+            description: The Amazon Resource Name (ARN) of the CMK to use when encrypting log data.
+            returned: always
+            type: string
+'''
+
+import traceback
+from ansible.module_utils._text import to_native
+from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils.ec2 import HAS_BOTO3, camel_dict_to_snake_dict, boto3_conn, ec2_argument_spec, get_aws_connection_info
+
+try:
+    import botocore
+except ImportError:
+    pass  # will be detected by imported HAS_BOTO3
+
+
+def describe_log_group(client, log_group_name, module):
+    params = {}
+    if log_group_name:
+        params['logGroupNamePrefix'] = log_group_name
+    try:
+        desc_log_group = client.describe_log_groups(**params)
+        return desc_log_group
+    except botocore.exceptions.ClientError as e:
+        module.fail_json(msg="Unable to describe log group {0}: {1}".format(log_group_name, to_native(e)),
+                         exception=traceback.format_exc(), **camel_dict_to_snake_dict(e.response))
+    except botocore.exceptions.BotoCoreError as e:
+        module.fail_json(msg="Unable to describe log group {0}: {1}".format(log_group_name, to_native(e)),
+                         exception=traceback.format_exc())
+
+
+def main():
+    argument_spec = ec2_argument_spec()
+    argument_spec.update(dict(
+        log_group_name=dict(),
+    ))
+
+    module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=True)
+
+    if not HAS_BOTO3:
+        module.fail_json(msg='boto3 is required.')
+
+    region, ec2_url, aws_connect_kwargs = get_aws_connection_info(module, boto3=True)
+    logs = boto3_conn(module, conn_type='client', resource='logs', region=region, endpoint=ec2_url, **aws_connect_kwargs)
+
+    desc_log_group = describe_log_group(client=logs,
+                                        log_group_name=module.params['log_group_name'],
+                                        module=module)
+    final_log_group_snake = []
+
+    for log_group in desc_log_group['logGroups']:
+        final_log_group_snake.append(camel_dict_to_snake_dict(log_group))
+
+    desc_log_group_result = dict(changed=False, log_groups=final_log_group_snake)
+    module.exit_json(**desc_log_group_result)
+
+
+if __name__ == '__main__':
+    main()
