commit f99d1b3e47e367b8f1f75c0703c5b55396f73c04
Author: Lukas KÃ¤mmerling <4281581+LKaemmerling@users.noreply.github.com>
Date:   Mon Apr 1 13:16:24 2019 +0200

    Add hcloud_floating_ip_facts module (#54667)

diff --git a/lib/ansible/modules/cloud/hcloud/hcloud_floating_ip_facts.py b/lib/ansible/modules/cloud/hcloud/hcloud_floating_ip_facts.py
new file mode 100644
index 0000000000..f7a892ae1c
--- /dev/null
+++ b/lib/ansible/modules/cloud/hcloud/hcloud_floating_ip_facts.py
@@ -0,0 +1,169 @@
+#!/usr/bin/python
+# -*- coding: utf-8 -*-
+
+# Copyright: (c) 2019, Hetzner Cloud GmbH <info@hetzner-cloud.de>
+# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
+
+from __future__ import absolute_import, division, print_function
+
+__metaclass__ = type
+
+ANSIBLE_METADATA = {
+    "metadata_version": "1.1",
+    "status": ["preview"],
+    "supported_by": "community",
+}
+
+DOCUMENTATION = """
+---
+module: hcloud_floating_ip_facts
+
+short_description: Gather facts about the Hetzner Cloud Floating IPs.
+
+version_added: "2.8"
+description:
+    - Gather facts about your Hetzner Cloud Floating IPs.
+
+author:
+    - Lukas Kaemmerling (@lkaemmerling)
+
+options:
+    id:
+        description:
+            - The ID of the Floating IP you want to get.
+        type: int
+    label_selector:
+        description:
+            - The label selector for the Floating IP you want to get.
+        type: str
+extends_documentation_fragment: hcloud
+"""
+
+EXAMPLES = """
+- name: Gather hcloud Floating ip facts
+  local_action:
+    module: hcloud_floating_ip_facts
+- name: Print the gathered facts
+  debug:
+    var: ansible_facts.hcloud_floating_ip_facts
+"""
+
+RETURN = """
+hcloud_floating_ip_facts:
+    description: The Floating ip facts as list
+    returned: always
+    type: complex
+    contains:
+        id:
+            description: Numeric identifier of the Floating IP
+            returned: always
+            type: int
+            sample: 1937415
+        description:
+            description: Description of the Floating IP
+            returned: always
+            type: str
+            sample: Falkenstein DC 8
+        ip:
+            description: IP address of the Floating IP
+            returned: always
+            type: str
+            sample: 131.232.99.1
+        type:
+            description: Type of the Floating IP
+            returned: always
+            type: str
+            sample: ipv4
+        server:
+            description: Name of the server where the Floating IP is assigned to.
+            returned: always
+            type: str
+            sample: my-server
+        home_location:
+            description: Location the Floating IP was created in
+            returned: always
+            type: str
+            sample: fsn1
+        labels:
+            description: User-defined labels (key-value pairs)
+            returned: always
+            type: dict
+"""
+
+from ansible.module_utils.basic import AnsibleModule
+from ansible.module_utils._text import to_native
+from ansible.module_utils.hcloud import Hcloud
+
+try:
+    from hcloud import APIException
+except ImportError:
+    pass
+
+
+class AnsibleHcloudFloatingIPFacts(Hcloud):
+    def __init__(self, module):
+        Hcloud.__init__(self, module, "hcloud_floating_ip_facts")
+        self.hcloud_floating_ip_facts = None
+
+    def _prepare_result(self):
+        tmp = []
+
+        for floating_ip in self.hcloud_floating_ip_facts:
+            if floating_ip is not None:
+                server_name = None
+                if floating_ip.server is not None:
+                    server_name = floating_ip.server.name
+                tmp.append({
+                    "id": to_native(floating_ip.id),
+                    "description": to_native(floating_ip.description),
+                    "ip": to_native(floating_ip.ip),
+                    "type": to_native(floating_ip.type),
+                    "server": to_native(server_name),
+                    "home_location": to_native(floating_ip.home_location.name),
+                    "labels": floating_ip.labels,
+                })
+
+        return tmp
+
+    def get_floating_ips(self):
+        try:
+            if self.module.params.get("id") is not None:
+                self.hcloud_floating_ip_facts = [self.client.floating_ips.get_by_id(
+                    self.module.params.get("id")
+                )]
+            elif self.module.params.get("label_selector") is not None:
+                self.hcloud_floating_ip_facts = self.client.floating_ips.get_all(
+                    label_selector=self.module.params.get("label_selector"))
+            else:
+                self.hcloud_floating_ip_facts = self.client.floating_ips.get_all()
+
+        except APIException as e:
+            self.module.fail_json(msg=e.message)
+
+    @staticmethod
+    def define_module():
+        return AnsibleModule(
+            argument_spec=dict(
+                id={"type": "int"},
+                label_selector={"type": "str"},
+                **Hcloud.base_module_arguments()
+            ),
+            supports_check_mode=True,
+        )
+
+
+def main():
+    module = AnsibleHcloudFloatingIPFacts.define_module()
+
+    hcloud = AnsibleHcloudFloatingIPFacts(module)
+
+    hcloud.get_floating_ips()
+    result = hcloud.get_result()
+    ansible_facts = {
+        'hcloud_floating_ip_facts': result['hcloud_floating_ip_facts']
+    }
+    module.exit_json(ansible_facts=ansible_facts)
+
+
+if __name__ == "__main__":
+    main()
diff --git a/test/integration/targets/hcloud_floating_ip_facts/aliases b/test/integration/targets/hcloud_floating_ip_facts/aliases
new file mode 100644
index 0000000000..51742ee23f
--- /dev/null
+++ b/test/integration/targets/hcloud_floating_ip_facts/aliases
@@ -0,0 +1,2 @@
+cloud/hcloud
+unsupported
diff --git a/test/integration/targets/hcloud_floating_ip_facts/defaults/main.yml b/test/integration/targets/hcloud_floating_ip_facts/defaults/main.yml
new file mode 100644
index 0000000000..36ec1edb18
--- /dev/null
+++ b/test/integration/targets/hcloud_floating_ip_facts/defaults/main.yml
@@ -0,0 +1,6 @@
+# Copyright: (c) 2019, Hetzner Cloud GmbH <info@hetzner-cloud.de>
+# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
+---
+hcloud_test_floating_ip_name: "always-there-floating-ip"
+hcloud_test_floating_ip_label_selector: "key=value"
+hcloud_test_floating_ip_id: 62227
diff --git a/test/integration/targets/hcloud_floating_ip_facts/tasks/main.yml b/test/integration/targets/hcloud_floating_ip_facts/tasks/main.yml
new file mode 100644
index 0000000000..39a386cf0b
--- /dev/null
+++ b/test/integration/targets/hcloud_floating_ip_facts/tasks/main.yml
@@ -0,0 +1,51 @@
+# Copyright: (c) 2019, Hetzner Cloud GmbH <info@hetzner-cloud.de>
+# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
+---
+- name: test gather hcloud image facts
+  hcloud_floating_ip_facts:
+- name: verify test gather hcloud image facts in check mode
+  assert:
+    that:
+      - ansible_facts.hcloud_floating_ip_facts| list | count == 1
+
+- name: test gather hcloud image facts in check mode
+  hcloud_floating_ip_facts:
+  check_mode: yes
+
+- name: verify test gather hcloud image facts in check mode
+  assert:
+    that:
+      - ansible_facts.hcloud_floating_ip_facts| list | count == 1
+
+
+- name: test gather hcloud image facts with correct label selector
+  hcloud_floating_ip_facts:
+    label_selector: "key=value"
+- name: verify test gather hcloud image with correct label selector
+  assert:
+    that:
+      - ansible_facts.hcloud_floating_ip_facts|selectattr('description','equalto','{{ hcloud_test_floating_ip_name }}') | list | count == 1
+
+- name: test gather hcloud image facts with wrong label selector
+  hcloud_floating_ip_facts:
+    label_selector: "key!=value"
+- name: verify test gather hcloud image with wrong label selector
+  assert:
+    that:
+      - ansible_facts.hcloud_floating_ip_facts | list | count == 0
+
+- name: test gather hcloud image facts with correct id
+  hcloud_floating_ip_facts:
+    id: "{{hcloud_test_floating_ip_id}}"
+- name: verify test gather hcloud image with correct id
+  assert:
+    that:
+      - ansible_facts.hcloud_floating_ip_facts|selectattr('description','equalto','{{ hcloud_test_floating_ip_name }}') | list | count == 1
+
+- name: test gather hcloud image facts with wrong id
+  hcloud_floating_ip_facts:
+      id: "{{hcloud_test_floating_ip_id}}1"
+- name: verify test gather hcloud image with wrong id
+  assert:
+    that:
+      - ansible_facts.hcloud_floating_ip_facts | list | count == 0
