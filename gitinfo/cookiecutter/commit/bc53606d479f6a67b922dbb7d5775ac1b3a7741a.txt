commit bc53606d479f6a67b922dbb7d5775ac1b3a7741a
Author: Audrey Roy <audreyr@gmail.com>
Date:   Sun Sep 1 15:34:30 2013 +0200

    Refactor generate and hook tests - partial checkin.

diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 78b8bb3..7140a0a 100755
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -103,55 +103,65 @@ def generate_file(project_dir, infile, context, env):
         with unicode_open(rendered_name, 'w') as fh:
             fh.write(rendered_file)
 
-def generate_files(template_dir, context=None, output_dir='.'):
+
+def render_and_create_dir(dirname, context):
+    """
+    Renders the name of a directory, creates the directory, and returns its path.
+    """
+
+    name_tmpl = Template(dirname)
+    dir_to_create = name_tmpl.render(**context)
+    make_sure_path_exists(dir_to_create)
+    return dir_to_create
+
+
+def ensure_dir_is_templated(dirname):
+    """
+    Ensures that dirname is a templated directory name.
+    """
+    if '{{' in dirname and \
+        '}}' in dirname:
+        return True
+    else:
+        raise NonTemplatedInputDirException
+
+
+def generate_files(template_dir, context=None):
     """
     Renders the templates and saves them to files.
     :param input_dir: Project template input directory.
     :paramtype input_dir: directory
     """
 
-    # Always use utf-8
-    template_dir = template_dir
-
     logging.debug('Generating project from {0}...'.format(template_dir))
-
     context = context or {}
 
-    # Render dirname before writing
-    name_tmpl = Template(template_dir)
-    project_dir = name_tmpl.render(**context)
-
-    if project_dir == template_dir:
-        raise NonTemplatedInputDirException
+    ensure_dir_is_templated(template_dir)
+    output_dir = render_and_create_dir(template_dir, context)
 
     # We want the Jinja path and the OS paths to match. Consequently, we'll:
     #   + CD to the template folder
     #   + Set Jinja's path to "."
     #
     #  In order to build our files to the correct folder(s), we'll use an
-    # absolute path for the target folder (project)
+    # absolute path for the target folder (output_dir)
 
-    project_dir = os.path.abspath(project_dir)
-
-    logging.debug("project_dir is {0}".format(project_dir))
-    make_sure_path_exists(project_dir)
+    output_dir = os.path.abspath(output_dir)
+    logging.debug("output_dir is {0}".format(output_dir))
 
     with work_in(template_dir):
         env = Environment()
-        env.loader = FileSystemLoader(output_dir)
+        env.loader = FileSystemLoader(".")
 
         # run pre-gen hook
         run_hook('pre_gen_project', template_dir, output_dir)
 
         for root, dirs, files in os.walk("."):
-
             for d in dirs:
                 if d == 'hooks':
                     continue
-                indir = os.path.join(root, d)
-                name_tmpl = Template(indir)
-                rendered_dirname = name_tmpl.render(**context)
-                make_sure_path_exists(os.path.join(project_dir, rendered_dirname))
+                unrendered_dir = os.path.join(output_dir, os.path.join(root, d))
+                render_and_create_dir(unrendered_dir, context)
 
             for f in files:
                 infile = os.path.join(root, f)
@@ -160,7 +170,7 @@ def generate_files(template_dir, context=None, output_dir='.'):
                 if infile.endswith('hooks%s%s' % (os.path.sep, f)):
                     logging.debug("skipping: {0}".format(infile))
                     continue
-                generate_file(project_dir, infile, context, env)
+                generate_file(output_dir, infile, context, env)
 
         # run post-gen hook
         run_hook('post_gen_project', template_dir, output_dir)
diff --git a/cookiecutter/hooks.py b/cookiecutter/hooks.py
index 454c5ff..e755311 100755
--- a/cookiecutter/hooks.py
+++ b/cookiecutter/hooks.py
@@ -8,6 +8,7 @@ cookiecutter.hooks
 Functions for discovering and executing various cookiecutter hooks.
 """
 
+import logging
 import os
 import sys
 
@@ -57,6 +58,7 @@ def run_hook(hook_name, input_dir, output_dir):
     and execute it with the current working directory.
     '''
     script = find_hooks(input_dir).get(hook_name)
-    if script is None: 
+    if script is None:
+        logging.debug("No hooks found")
         return
     return _run_hook(script, output_dir)
diff --git a/tests/input{{hooks}}/README.rst b/tests/input{{pyhooks}}/README.rst
similarity index 100%
rename from tests/input{{hooks}}/README.rst
rename to tests/input{{pyhooks}}/README.rst
diff --git a/tests/input{{pyhooks}}/hooks/post_gen_project.py b/tests/input{{pyhooks}}/hooks/post_gen_project.py
new file mode 100755
index 0000000..75ca798
--- /dev/null
+++ b/tests/input{{pyhooks}}/hooks/post_gen_project.py
@@ -0,0 +1,8 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+from __future__ import print_function
+
+print('pre generation hook')
+f = open('python_post.txt', 'w')
+f.close()
+
diff --git a/tests/input{{hooks}}/hooks/pre_gen_project.py b/tests/input{{pyhooks}}/hooks/pre_gen_project.py
similarity index 79%
rename from tests/input{{hooks}}/hooks/pre_gen_project.py
rename to tests/input{{pyhooks}}/hooks/pre_gen_project.py
index 06d6b13..3cb7018 100755
--- a/tests/input{{hooks}}/hooks/pre_gen_project.py
+++ b/tests/input{{pyhooks}}/hooks/pre_gen_project.py
@@ -3,6 +3,6 @@
 from __future__ import print_function
 
 print('pre generation hook')
-f = open('bar.txt', 'w')
+f = open('python_pre.txt', 'w')
 f.close()
 
diff --git a/tests/input{{pyshellhooks}}/README.rst b/tests/input{{pyshellhooks}}/README.rst
new file mode 100644
index 0000000..a71dc41
--- /dev/null
+++ b/tests/input{{pyshellhooks}}/README.rst
@@ -0,0 +1,4 @@
+foo
+===
+
+bar
diff --git a/tests/input{{pyshellhooks}}/hooks/post_gen_project.py b/tests/input{{pyshellhooks}}/hooks/post_gen_project.py
new file mode 100755
index 0000000..75ca798
--- /dev/null
+++ b/tests/input{{pyshellhooks}}/hooks/post_gen_project.py
@@ -0,0 +1,8 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+from __future__ import print_function
+
+print('pre generation hook')
+f = open('python_post.txt', 'w')
+f.close()
+
diff --git a/tests/input{{pyshellhooks}}/hooks/post_gen_project.sh b/tests/input{{pyshellhooks}}/hooks/post_gen_project.sh
new file mode 100755
index 0000000..d244dce
--- /dev/null
+++ b/tests/input{{pyshellhooks}}/hooks/post_gen_project.sh
@@ -0,0 +1,4 @@
+#!/bin/bash
+
+echo 'post generation hook';
+touch 'shell_post.txt'
diff --git a/tests/input{{pyshellhooks}}/hooks/pre_gen_project.py b/tests/input{{pyshellhooks}}/hooks/pre_gen_project.py
new file mode 100755
index 0000000..3cb7018
--- /dev/null
+++ b/tests/input{{pyshellhooks}}/hooks/pre_gen_project.py
@@ -0,0 +1,8 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+from __future__ import print_function
+
+print('pre generation hook')
+f = open('python_pre.txt', 'w')
+f.close()
+
diff --git a/tests/input{{hooks}}/hooks/post_gen_project.sh b/tests/input{{pyshellhooks}}/hooks/pre_gen_project.sh
similarity index 65%
rename from tests/input{{hooks}}/hooks/post_gen_project.sh
rename to tests/input{{pyshellhooks}}/hooks/pre_gen_project.sh
index 5e54763..351b6af 100755
--- a/tests/input{{hooks}}/hooks/post_gen_project.sh
+++ b/tests/input{{pyshellhooks}}/hooks/pre_gen_project.sh
@@ -1,4 +1,4 @@
 #!/bin/bash
 
 echo 'post generation hook';
-touch 'foo.txt'
+touch 'shell_pre.txt'
diff --git a/tests/input{{shellhooks}}/README.rst b/tests/input{{shellhooks}}/README.rst
new file mode 100644
index 0000000..a71dc41
--- /dev/null
+++ b/tests/input{{shellhooks}}/README.rst
@@ -0,0 +1,4 @@
+foo
+===
+
+bar
diff --git a/tests/input{{shellhooks}}/hooks/post_gen_project.sh b/tests/input{{shellhooks}}/hooks/post_gen_project.sh
new file mode 100755
index 0000000..d244dce
--- /dev/null
+++ b/tests/input{{shellhooks}}/hooks/post_gen_project.sh
@@ -0,0 +1,4 @@
+#!/bin/bash
+
+echo 'post generation hook';
+touch 'shell_post.txt'
diff --git a/tests/input{{shellhooks}}/hooks/pre_gen_project.sh b/tests/input{{shellhooks}}/hooks/pre_gen_project.sh
new file mode 100755
index 0000000..351b6af
--- /dev/null
+++ b/tests/input{{shellhooks}}/hooks/pre_gen_project.sh
@@ -0,0 +1,4 @@
+#!/bin/bash
+
+echo 'post generation hook';
+touch 'shell_pre.txt'
diff --git a/tests/test_generate.py b/tests/test_generate.py
index 37692d1..297c8eb 100755
--- a/tests/test_generate.py
+++ b/tests/test_generate.py
@@ -172,22 +172,32 @@ class TestHooks(unittest.TestCase):
 
     def test_ignore_hooks_dirs(self):
         generate.generate_files(
-            context={'hooks': 'hooks'},
-            template_dir='tests/input{{hooks}}'
+            context={'pyhooks': 'pyhooks'},
+            template_dir='tests/input{{pyhooks}}'
         )
-        self.assertFalse(os.path.exists('tests/inputhooks/hooks'))
+        self.assertFalse(os.path.exists('tests/inputpyhooks/hooks'))
 
-    def test_run_hooks(self):
+    def test_run_python_hooks(self):
         generate.generate_files(
-            context={'hooks': 'hooks'},
-            template_dir='tests/input{{hooks}}'
+            context={'pyhooks': 'pyhooks'},
+            template_dir='tests/input{{pyhooks}}'
         )
-        self.assertTrue(os.path.exists('tests/inputhooks/bar.txt'))
-        self.assertTrue(os.path.exists('tests/inputhooks/foo.txt'))
+        self.assertTrue(os.path.exists('tests/inputpyhooks/python_pre.txt'))
+        self.assertTrue(os.path.exists('tests/inputpyhooks/python_post.txt'))
+
+    def test_run_shell_hooks(self):
+        generate.generate_files(
+            context={'shellhooks': 'shellhooks'},
+            template_dir='tests/input{{shellhooks}}'
+        )
+        self.assertTrue(os.path.exists('tests/inputshellhooks/shell_pre.txt'))
+        self.assertTrue(os.path.exists('tests/inputshellhooks/shell_post.txt'))
 
     def tearDown(self):
-        if os.path.exists('tests/inputhooks'):
-            shutil.rmtree('tests/inputhooks')
+        if os.path.exists('tests/inputpyhooks'):
+            shutil.rmtree('tests/inputpyhooks')
+        if os.path.exists('tests/inputshellhooks'):
+            shutil.rmtree('tests/inputshellhooks')
 
 
 if __name__ == '__main__':
