commit d9b7079d0bd89d380e5569d655ebd2e94ffe784d
Author: Michael Joseph <michaeljoseph+github@gmail.com>
Date:   Sat Oct 18 17:38:05 2014 +0200

    Use context to Jinja hook scripts

diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index b3751c9..7959142 100755
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -183,7 +183,7 @@ def generate_files(repo_dir, context=None, output_dir="."):
 
     # run pre-gen hook from repo_dir
     with work_in(repo_dir):
-        run_hook('pre_gen_project', project_dir)
+        run_hook('pre_gen_project', project_dir, context)
 
     with work_in(template_dir):
         env = Environment(keep_trailing_newline=True)
@@ -201,4 +201,4 @@ def generate_files(repo_dir, context=None, output_dir="."):
 
     # run post-gen hook from repo_dir
     with work_in(repo_dir):
-        run_hook('post_gen_project', project_dir)
+        run_hook('post_gen_project', project_dir, context)
diff --git a/cookiecutter/hooks.py b/cookiecutter/hooks.py
index 7e02303..bbe523c 100755
--- a/cookiecutter/hooks.py
+++ b/cookiecutter/hooks.py
@@ -8,12 +8,15 @@ cookiecutter.hooks
 Functions for discovering and executing various cookiecutter hooks.
 """
 
+import io
 import logging
 import os
 import subprocess
 import sys
 
-from .utils import make_sure_path_exists, work_in
+from jinja2 import Template
+
+from cookiecutter import utils
 
 _HOOKS = [
     'pre_gen_project',
@@ -48,12 +51,16 @@ def run_script(script_path, cwd='.'):
 
     :param script_path: Absolute path to the script to run.
     :param cwd: The directory to run the script from.
+    :param context: Cookiecutter project template context.
     """
     run_thru_shell = sys.platform.startswith('win')
     if script_path.endswith('.py'):
         script_command = [sys.executable, script_path]
     else:
         script_command = [script_path]
+
+    utils.make_executable(script_path)
+
     proc = subprocess.Popen(
         script_command,
         shell=run_thru_shell,
@@ -61,7 +68,19 @@ def run_script(script_path, cwd='.'):
     )
     proc.wait()
 
-def run_hook(hook_name, project_dir):
+
+def run_script_with_context(script_path, cwd, context):
+    """
+    Executes a script after
+    """
+    with io.open(script_path, 'r', encoding='utf-8') as fh:
+        temp_script_path = utils.write_to_temp_file(
+            Template(fh.read()).render(**context)
+        )
+        run_script(temp_script_path, cwd)
+
+
+def run_hook(hook_name, project_dir, context):
     """
     Try to find and execute a hook from the specified project directory.
 
@@ -73,4 +92,4 @@ def run_hook(hook_name, project_dir):
     if script is None:
         logging.debug("No hooks found")
         return
-    return run_script(script, project_dir)
+    return run_script_with_context(script, project_dir, context)
diff --git a/tests/test_hooks.py b/tests/test_hooks.py
index da79c35..fe61b6f 100755
--- a/tests/test_hooks.py
+++ b/tests/test_hooks.py
@@ -100,28 +100,55 @@ class TestExternalHooks(unittest.TestCase):
             os.remove('tests/test-hooks/input{{hooks}}/python_pre.txt')
         if os.path.exists('tests/test-hooks/input{{hooks}}/shell_post.txt'):
             os.remove('tests/test-hooks/input{{hooks}}/shell_post.txt')
+        if os.path.exists('tests/context_post.txt'):
+            os.remove('tests/context_post.txt')
 
     def test_run_script(self):
+        """Execute a hook script, independently of project generation"""
         hooks.run_script(os.path.join(self.hooks_path, self.post_hook))
         self.assertTrue(os.path.isfile('shell_post.txt'))
 
     def test_run_script_cwd(self):
-        hooks.run_script(os.path.join(self.hooks_path, self.post_hook),
-                        'tests')
         """Change directory before running hook"""
+        hooks.run_script(
+            os.path.join(self.hooks_path, self.post_hook),
+            'tests'
+        )
         self.assertTrue(os.path.isfile('tests/shell_post.txt'))
         self.assertFalse('tests' in os.getcwd())
 
+    def test_run_script_with_context(self):
+        """Execute a hook script, passing a context"""
+
+        hook_path = os.path.join(self.hooks_path, 'post_gen_project.sh')
+        with open(hook_path, 'w') as fh:
+            fh.write("#!/bin/bash\n")
+            fh.write("\n")
+            fh.write("echo 'post generation hook';\n")
+            fh.write("touch 'shell_post.txt'\n")
+            fh.write("touch '{{cookiecutter.file}}'\n")
+            os.chmod(hook_path, os.stat(hook_path).st_mode | stat.S_IXUSR)
+
+        hooks.run_script_with_context(
+            os.path.join(self.hooks_path, self.post_hook),
+            'tests',
+            {
+                'cookiecutter': {
+                    'file': 'context_post.txt'
+                }
+            })
+        self.assertTrue(os.path.isfile('tests/context_post.txt'))
+        self.assertFalse('tests' in os.getcwd())
+
     def test_run_hook(self):
         """Execute hook from specified template in specified output directory"""
         tests_dir = os.path.join(self.repo_path, 'input{{hooks}}')
         with utils.work_in(self.repo_path):
-            hooks.run_hook('pre_gen_project', tests_dir)
+            hooks.run_hook('pre_gen_project', tests_dir, {})
             self.assertTrue(os.path.isfile(os.path.join(tests_dir, 'python_pre.txt')))
 
-            hooks.run_hook('post_gen_project', tests_dir)
+            hooks.run_hook('post_gen_project', tests_dir, {})
             self.assertTrue(os.path.isfile(os.path.join(tests_dir, 'shell_post.txt')))
 
-
 if __name__ == '__main__':
     unittest.main()
