commit 24420ada0ba7cef7cf9781361171b61f1b3133db
Author: Russell Keith-Magee <russell@keith-magee.com>
Date:   Sat Sep 16 14:47:55 2017 +0800

    Fixed flake8 problems.

diff --git a/cookiecutter/vcs.py b/cookiecutter/vcs.py
index 72c3b07..6af7818 100644
--- a/cookiecutter/vcs.py
+++ b/cookiecutter/vcs.py
@@ -6,7 +6,6 @@ from __future__ import unicode_literals
 import logging
 import os
 import subprocess
-import sys
 
 from whichcraft import which
 
diff --git a/cookiecutter/zipfile.py b/cookiecutter/zipfile.py
index b519913..92daf08 100644
--- a/cookiecutter/zipfile.py
+++ b/cookiecutter/zipfile.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 import os
 import requests
-import sys
 import tempfile
 from zipfile import ZipFile
 try:
@@ -112,7 +111,8 @@ def unzip(zip_uri, is_url, clone_to_dir='.', no_input=False, password=None):
                         retry += 1
                         if retry == 3:
                             raise InvalidZipRepository(
-                                'Invalid password provided for protected repository'
+                                'Invalid password provided '
+                                'for protected repository'
                             )
 
     except BadZipFile:
diff --git a/tests/test_cookiecutter_local_no_input.py b/tests/test_cookiecutter_local_no_input.py
index 4e3a0bc..ac9ddd6 100644
--- a/tests/test_cookiecutter_local_no_input.py
+++ b/tests/test_cookiecutter_local_no_input.py
@@ -139,13 +139,13 @@ def test_cookiecutter_template_cleanup(mocker):
     `Call cookiecutter()` with `no_input=True` and templates in the
     cookiecutter.json file
     """
-    mock_mkdtemp = mocker.patch(
+    mocker.patch(
         'tempfile.mkdtemp',
         return_value='fake-tmp',
         autospec=True
     )
 
-    mock_tmpdir = mocker.patch(
+    mocker.patch(
         'cookiecutter.utils.prompt_and_delete',
         return_value=True,
         autospec=True
diff --git a/tests/test_read_repo_password.py b/tests/test_read_repo_password.py
index 5e24303..8779210 100644
--- a/tests/test_read_repo_password.py
+++ b/tests/test_read_repo_password.py
@@ -1,10 +1,7 @@
 # -*- coding: utf-8 -*-
-
-import click
-import pytest
-
 from cookiecutter.prompt import read_repo_password
 
+
 def test_click_invocation(mocker):
     prompt = mocker.patch('click.prompt')
     prompt.return_value = 'sekrit'
diff --git a/tests/zipfile/test_unzip.py b/tests/zipfile/test_unzip.py
index c86b81e..c48dbff 100644
--- a/tests/zipfile/test_unzip.py
+++ b/tests/zipfile/test_unzip.py
@@ -1,5 +1,4 @@
 # -*- coding: utf-8 -*-
-import os
 import tempfile
 
 import pytest
@@ -62,7 +61,7 @@ def test_unzip_protected_local_file_environment_password(mocker, tmpdir):
 def test_unzip_protected_local_file_bad_environment_password(mocker, tmpdir):
     """In `unzip()`, an error occurs if the environment has a bad password.
     """
-    mock_prompt_and_delete = mocker.patch(
+    mocker.patch(
         'cookiecutter.zipfile.prompt_and_delete',
         return_value=True,
         autospec=True
@@ -71,7 +70,7 @@ def test_unzip_protected_local_file_bad_environment_password(mocker, tmpdir):
     clone_to_dir = tmpdir.mkdir('clone')
 
     with pytest.raises(InvalidZipRepository):
-        output_dir = zipfile.unzip(
+        zipfile.unzip(
             'tests/files/protected-fake-repo-tmpl.zip',
             is_url=False,
             clone_to_dir=str(clone_to_dir),
@@ -82,7 +81,7 @@ def test_unzip_protected_local_file_bad_environment_password(mocker, tmpdir):
 def test_unzip_protected_local_file_user_password_with_noinput(mocker, tmpdir):
     """In `unzip()`, you can't unpack a password-protected repo in no_input mode
     """
-    mock_prompt_and_delete = mocker.patch(
+    mocker.patch(
         'cookiecutter.zipfile.prompt_and_delete',
         return_value=True,
         autospec=True
@@ -107,7 +106,7 @@ def test_unzip_protected_local_file_user_password(mocker, tmpdir):
         return_value=True,
         autospec=True
     )
-    mock_read_password = mocker.patch(
+    mocker.patch(
         'cookiecutter.zipfile.read_repo_password',
         return_value='sekrit'
     )
@@ -127,12 +126,12 @@ def test_unzip_protected_local_file_user_password(mocker, tmpdir):
 def test_unzip_protected_local_file_user_bad_password(mocker, tmpdir):
     """In `unzip()`, If you can't provide a valid password, you get an error
     """
-    mock_prompt_and_delete = mocker.patch(
+    mocker.patch(
         'cookiecutter.zipfile.prompt_and_delete',
         return_value=True,
         autospec=True
     )
-    mock_read_password = mocker.patch(
+    mocker.patch(
         'cookiecutter.zipfile.read_repo_password',
         return_value='not-the-right-password'
     )
@@ -140,7 +139,7 @@ def test_unzip_protected_local_file_user_bad_password(mocker, tmpdir):
     clone_to_dir = tmpdir.mkdir('clone')
 
     with pytest.raises(InvalidZipRepository):
-        output_dir = zipfile.unzip(
+        zipfile.unzip(
             'tests/files/protected-fake-repo-tmpl.zip',
             is_url=False,
             clone_to_dir=str(clone_to_dir)
@@ -150,7 +149,7 @@ def test_unzip_protected_local_file_user_bad_password(mocker, tmpdir):
 def test_empty_zip_file(mocker, tmpdir):
     """In `unzip()`, an empty file raises an error.
     """
-    mock_prompt_and_delete = mocker.patch(
+    mocker.patch(
         'cookiecutter.zipfile.prompt_and_delete',
         return_value=True,
         autospec=True
@@ -169,7 +168,7 @@ def test_empty_zip_file(mocker, tmpdir):
 def test_non_repo_zip_file(mocker, tmpdir):
     """In `unzip()`, a repository must have a top level directory
     """
-    mock_prompt_and_delete = mocker.patch(
+    mocker.patch(
         'cookiecutter.zipfile.prompt_and_delete',
         return_value=True,
         autospec=True
@@ -188,7 +187,7 @@ def test_non_repo_zip_file(mocker, tmpdir):
 def test_bad_zip_file(mocker, tmpdir):
     """In `unzip()`, a corrupted zip file raises an error.
     """
-    mock_prompt_and_delete = mocker.patch(
+    mocker.patch(
         'cookiecutter.zipfile.prompt_and_delete',
         return_value=True,
         autospec=True
