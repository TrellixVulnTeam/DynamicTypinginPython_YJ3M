commit f6375163889dff0346cbae3a4caf1ba0dcc76685
Author: Russell Keith-Magee <russell@keith-magee.com>
Date:   Fri Sep 15 18:32:29 2017 -0700

    Enable password to be passed in as a paraneter.

diff --git a/cookiecutter/cli.py b/cookiecutter/cli.py
index aea78cd..35d09e8 100644
--- a/cookiecutter/cli.py
+++ b/cookiecutter/cli.py
@@ -116,6 +116,7 @@ def main(
             output_dir=output_dir,
             config_file=config_file,
             default_config=default_config,
+            password=os.environ.get('COOKIECUTTER_REPO_PASSWORD')
         )
     except (OutputDirExistsException,
             InvalidModeException,
diff --git a/cookiecutter/main.py b/cookiecutter/main.py
index 45d62f3..cc2515d 100644
--- a/cookiecutter/main.py
+++ b/cookiecutter/main.py
@@ -25,7 +25,7 @@ logger = logging.getLogger(__name__)
 def cookiecutter(
         template, checkout=None, no_input=False, extra_context=None,
         replay=False, overwrite_if_exists=False, output_dir='.',
-        config_file=None, default_config=False):
+        config_file=None, default_config=False, password=None):
     """
     API equivalent to using Cookiecutter at the command line.
 
@@ -40,6 +40,7 @@ def cookiecutter(
     :param output_dir: Where to output the generated project dir into.
     :param config_file: User configuration file path.
     :param default_config: Use default values rather than a config file.
+    :param password: The password to use when extracting the repository.
     """
     if replay and ((no_input is not False) or (extra_context is not None)):
         err_msg = (
@@ -59,6 +60,7 @@ def cookiecutter(
         clone_to_dir=config_dict['cookiecutters_dir'],
         checkout=checkout,
         no_input=no_input,
+        password=password
     )
 
     template_name = os.path.basename(os.path.abspath(repo_dir))
diff --git a/cookiecutter/repository.py b/cookiecutter/repository.py
index 235adb9..81502b8 100644
--- a/cookiecutter/repository.py
+++ b/cookiecutter/repository.py
@@ -62,7 +62,7 @@ def repository_has_cookiecutter_json(repo_directory):
 
 
 def determine_repo_dir(template, abbreviations, clone_to_dir, checkout,
-                       no_input):
+                       no_input, password=None):
     """
     Locate the repository directory from a template reference.
 
@@ -77,6 +77,7 @@ def determine_repo_dir(template, abbreviations, clone_to_dir, checkout,
     :param clone_to_dir: The directory to clone the repository into.
     :param checkout: The branch, tag or commit ID to checkout after clone.
     :param no_input: Prompt the user at command line for manual configuration?
+    :param password: The password to use when extracting the repository.
     :return: A tuple containing the cookiecutter template directory, and
         a boolean descriving whether that directory should be cleaned up
         after the template has been instantiated.
@@ -89,7 +90,8 @@ def determine_repo_dir(template, abbreviations, clone_to_dir, checkout,
             zip_uri=template,
             is_url=is_repo_url(template),
             clone_to_dir=clone_to_dir,
-            no_input=no_input
+            no_input=no_input,
+            password=password
         )
         repository_candidates = [unzipped_dir]
         cleanup = True
diff --git a/cookiecutter/zipfile.py b/cookiecutter/zipfile.py
index 4cf5c0b..b519913 100644
--- a/cookiecutter/zipfile.py
+++ b/cookiecutter/zipfile.py
@@ -15,7 +15,7 @@ from .prompt import read_repo_password
 from .utils import make_sure_path_exists, prompt_and_delete
 
 
-def unzip(zip_uri, is_url, clone_to_dir='.', no_input=False):
+def unzip(zip_uri, is_url, clone_to_dir='.', no_input=False, password=None):
     """Download and unpack a zipfile at a given URI.
 
     This will download the zipfile to the cookiecutter repository,
@@ -26,6 +26,7 @@ def unzip(zip_uri, is_url, clone_to_dir='.', no_input=False):
     :param clone_to_dir: The cookiecutter repository directory
         to put the archive into.
     :param no_input: Supress any prompts
+    :param password: The password to use when unpacking the repository.
     """
     # Ensure that clone_to_dir exists
     clone_to_dir = os.path.expanduser(clone_to_dir)
@@ -83,8 +84,7 @@ def unzip(zip_uri, is_url, clone_to_dir='.', no_input=False):
         except RuntimeError:
             # File is password protected; try to get a password from the
             # environment; if that doesn't work, ask the user.
-            password = os.environ.get('COOKIECUTTER_REPO_PASSWORD')
-            if password:
+            if password is not None:
                 try:
                     zip_file.extractall(
                         path=unzip_base,
@@ -112,7 +112,7 @@ def unzip(zip_uri, is_url, clone_to_dir='.', no_input=False):
                         retry += 1
                         if retry == 3:
                             raise InvalidZipRepository(
-                                'Unable to unlock password protected repository'
+                                'Invalid password provided for protected repository'
                             )
 
     except BadZipFile:
diff --git a/tests/repository/test_determine_repo_dir_clones_repo.py b/tests/repository/test_determine_repo_dir_clones_repo.py
index c583677..3a4e6b0 100644
--- a/tests/repository/test_determine_repo_dir_clones_repo.py
+++ b/tests/repository/test_determine_repo_dir_clones_repo.py
@@ -28,14 +28,16 @@ def test_zipfile_unzip(mocker, template, is_url, user_config_data):
         abbreviations={},
         clone_to_dir=user_config_data['cookiecutters_dir'],
         checkout=None,
-        no_input=True
+        no_input=True,
+        password=None,
     )
 
     mock_clone.assert_called_once_with(
         zip_uri=template,
         is_url=is_url,
         clone_to_dir=user_config_data['cookiecutters_dir'],
-        no_input=True
+        no_input=True,
+        password=None,
     )
 
     assert os.path.isdir(project_dir)
diff --git a/tests/test_cli.py b/tests/test_cli.py
index 93079cc..061f0a4 100644
--- a/tests/test_cli.py
+++ b/tests/test_cli.py
@@ -97,6 +97,7 @@ def test_cli_replay(mocker, cli_runner):
         config_file=None,
         default_config=False,
         extra_context=None,
+        password=None
     )
 
 
@@ -129,6 +130,7 @@ def test_cli_exit_on_noinput_and_replay(mocker, cli_runner):
         config_file=None,
         default_config=False,
         extra_context=None,
+        password=None,
     )
 
 
@@ -160,6 +162,7 @@ def test_run_cookiecutter_on_overwrite_if_exists_and_replay(
         config_file=None,
         default_config=False,
         extra_context=None,
+        password=None,
     )
 
 
@@ -219,6 +222,7 @@ def test_cli_output_dir(mocker, cli_runner, output_dir_flag, output_dir):
         config_file=None,
         default_config=False,
         extra_context=None,
+        password=None,
     )
 
 
@@ -257,6 +261,7 @@ def test_user_config(mocker, cli_runner, user_config_path):
         config_file=user_config_path,
         default_config=False,
         extra_context=None,
+        password=None,
     )
 
 
@@ -283,7 +288,8 @@ def test_default_user_config_overwrite(mocker, cli_runner, user_config_path):
         output_dir='.',
         config_file=user_config_path,
         default_config=True,
-        extra_context=None
+        extra_context=None,
+        password=None,
     )
 
 
@@ -306,6 +312,7 @@ def test_default_user_config(mocker, cli_runner):
         config_file=None,
         default_config=True,
         extra_context=None,
+        password=None,
     )
 
 
diff --git a/tests/zipfile/test_unzip.py b/tests/zipfile/test_unzip.py
index b77ad54..c86b81e 100644
--- a/tests/zipfile/test_unzip.py
+++ b/tests/zipfile/test_unzip.py
@@ -45,17 +45,14 @@ def test_unzip_protected_local_file_environment_password(mocker, tmpdir):
         return_value=True,
         autospec=True
     )
-    mock_os_environ = mocker.patch(
-        'os.environ.get',
-        return_value='sekrit'
-    )
 
     clone_to_dir = tmpdir.mkdir('clone')
 
     output_dir = zipfile.unzip(
         'tests/files/protected-fake-repo-tmpl.zip',
         is_url=False,
-        clone_to_dir=str(clone_to_dir)
+        clone_to_dir=str(clone_to_dir),
+        password='sekrit'
     )
 
     assert output_dir.startswith(tempfile.gettempdir())
@@ -70,10 +67,6 @@ def test_unzip_protected_local_file_bad_environment_password(mocker, tmpdir):
         return_value=True,
         autospec=True
     )
-    mock_os_environ = mocker.patch(
-        'os.environ.get',
-        return_value='not-the-right-password'
-    )
 
     clone_to_dir = tmpdir.mkdir('clone')
 
@@ -81,7 +74,8 @@ def test_unzip_protected_local_file_bad_environment_password(mocker, tmpdir):
         output_dir = zipfile.unzip(
             'tests/files/protected-fake-repo-tmpl.zip',
             is_url=False,
-            clone_to_dir=str(clone_to_dir)
+            clone_to_dir=str(clone_to_dir),
+            password='not-the-right-password'
         )
 
 
