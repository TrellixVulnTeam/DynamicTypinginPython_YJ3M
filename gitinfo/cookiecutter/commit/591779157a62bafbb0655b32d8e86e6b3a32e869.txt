commit 591779157a62bafbb0655b32d8e86e6b3a32e869
Author: Chris <chrisbrake@users.noreply.github.com>
Date:   Sat May 30 13:56:07 2020 -0600

    Added: --list-installed cli option, listing already downloaded cookiecutter packages (#1096)
    
    * Added list command line option
    
    * Fixed a bug in a test that caused it to only work on a system with templates available.
    
    * Adjusted formatting
    
    * Fixed docstring
    
    * Linting
    
    * Fix naming
    
    * Make template not required, fix tests.
    
    Co-authored-by: Andrey Shpak <ashpak@ashpak.ru>

diff --git a/cookiecutter/cli.py b/cookiecutter/cli.py
index d2e7155..7f52cca 100644
--- a/cookiecutter/cli.py
+++ b/cookiecutter/cli.py
@@ -19,6 +19,7 @@ from cookiecutter.exceptions import (
 )
 from cookiecutter.log import configure_logger
 from cookiecutter.main import cookiecutter
+from cookiecutter.config import get_user_config
 
 
 def version_msg():
@@ -43,9 +44,32 @@ def validate_extra_context(ctx, param, value):
     return collections.OrderedDict(s.split('=', 1) for s in value) or None
 
 
+def list_installed_templates(default_config, passed_config_file):
+    """List installed (locally cloned) templates. Use cookiecutter --list-installed."""
+    config = get_user_config(passed_config_file, default_config)
+    cookiecutter_folder = config.get('cookiecutters_dir')
+    if not os.path.exists(cookiecutter_folder):
+        click.echo(
+            'Error: Cannot list installed templates. Folder does not exist: '
+            '{}'.format(cookiecutter_folder)
+        )
+        sys.exit(-1)
+
+    template_names = [
+        folder
+        for folder in os.listdir(cookiecutter_folder)
+        if os.path.exists(
+            os.path.join(cookiecutter_folder, folder, 'cookiecutter.json')
+        )
+    ]
+    click.echo('{} installed templates: '.format(len(template_names)))
+    for name in template_names:
+        click.echo(' * {}'.format(name))
+
+
 @click.command(context_settings=dict(help_option_names=['-h', '--help']))
 @click.version_option(__version__, '-V', '--version', message=version_msg())
-@click.argument('template')
+@click.argument('template', required=False)
 @click.argument('extra_context', nargs=-1, callback=validate_extra_context)
 @click.option(
     '--no-input',
@@ -72,7 +96,7 @@ def validate_extra_context(ctx, param, value):
     '--replay-file',
     type=click.Path(),
     default=None,
-    help=u'Use this file for replay instead of the default.',
+    help='Use this file for replay instead of the default.',
 )
 @click.option(
     '-f',
@@ -109,10 +133,13 @@ def validate_extra_context(ctx, param, value):
     help='File to be used as a stream for DEBUG logging',
 )
 @click.option(
-    u"--accept-hooks",
-    type=click.Choice(["yes", "ask", "no"]),
-    default="yes",
-    help=u"Accept pre/post hooks",
+    '--accept-hooks',
+    type=click.Choice(['yes', 'ask', 'no']),
+    default='yes',
+    help='Accept pre/post hooks',
+)
+@click.option(
+    '-l', '--list-installed', is_flag=True, help='List currently installed templates.'
 )
 def main(
     template,
@@ -130,6 +157,7 @@ def main(
     skip_if_file_exists,
     accept_hooks,
     replay_file,
+    list_installed,
 ):
     """Create a project from a Cookiecutter project template (TEMPLATE).
 
@@ -137,9 +165,13 @@ def main(
     volunteers. If you would like to help out or fund the project, please get
     in touch at https://github.com/audreyr/cookiecutter.
     """
-    # If you _need_ to support a local template in a directory
-    # called 'help', use a qualified path to the directory.
-    if template == 'help':
+    # Commands that should work without arguments
+    if list_installed:
+        list_installed_templates(default_config, config_file)
+        sys.exit(0)
+
+    # Raising usage, after all commands that should work without args.
+    if not template or template.lower() == 'help':
         click.echo(click.get_current_context().get_help())
         sys.exit(0)
 
diff --git a/tests/test_cli.py b/tests/test_cli.py
index 4d69423..a2d8acc 100644
--- a/tests/test_cli.py
+++ b/tests/test_cli.py
@@ -493,6 +493,39 @@ def test_debug_file_verbose(cli_runner, debug_file):
     assert context_log in result.output
 
 
+@pytest.mark.usefixtures('make_fake_project_dir', 'remove_fake_project_dir')
+def test_debug_list_installed_templates(cli_runner, debug_file, user_config_path):
+    """Verify --list-installed command correct invocation."""
+    fake_template_dir = os.path.dirname(os.path.abspath('fake-project'))
+    os.makedirs(os.path.dirname(user_config_path))
+    with open(user_config_path, 'w') as config_file:
+        config_file.write('cookiecutters_dir: "%s"' % fake_template_dir)
+    open(os.path.join('fake-project', 'cookiecutter.json'), 'w').write('{}')
+
+    result = cli_runner(
+        '--list-installed', '--config-file', user_config_path, str(debug_file),
+    )
+
+    assert "1 installed templates:" in result.output
+    assert result.exit_code == 0
+
+
+def test_debug_list_installed_templates_failure(
+    cli_runner, debug_file, user_config_path
+):
+    """Verify --list-installed command error on invocation."""
+    os.makedirs(os.path.dirname(user_config_path))
+    with open(user_config_path, 'w') as config_file:
+        config_file.write('cookiecutters_dir: "/notarealplace/"')
+
+    result = cli_runner(
+        '--list-installed', '--config-file', user_config_path, str(debug_file)
+    )
+
+    assert "Error: Cannot list installed templates." in result.output
+    assert result.exit_code == -1
+
+
 @pytest.mark.usefixtures('remove_fake_project_dir')
 def test_directory_repo(cli_runner):
     """Test cli invocation works with `directory` option."""
diff --git a/tests/test_cookiecutter_invocation.py b/tests/test_cookiecutter_invocation.py
index 8f5a6b1..3327830 100644
--- a/tests/test_cookiecutter_invocation.py
+++ b/tests/test_cookiecutter_invocation.py
@@ -23,18 +23,6 @@ def project_dir():
         utils.rmtree('fake-project-templated')
 
 
-def test_should_raise_error_without_template_arg(monkeypatch, capfd):
-    """Verify expected error in command line on invocation without arguments."""
-    monkeypatch.setenv('PYTHONPATH', '.')
-
-    with pytest.raises(subprocess.CalledProcessError):
-        subprocess.check_call([sys.executable, '-m', 'cookiecutter.cli'])
-
-    _, err = capfd.readouterr()
-    exp_message = "Error: Missing argument"
-    assert exp_message in err and "TEMPLATE" in err
-
-
 @pytest.mark.usefixtures('clean_system')
 def test_should_invoke_main(monkeypatch, project_dir):
     """Should create a project and exit with 0 code on cli invocation."""
