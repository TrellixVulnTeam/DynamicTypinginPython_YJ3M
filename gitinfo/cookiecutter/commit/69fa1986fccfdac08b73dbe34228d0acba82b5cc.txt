commit 69fa1986fccfdac08b73dbe34228d0acba82b5cc
Author: Audrey Roy <audreyr@gmail.com>
Date:   Sat Aug 10 14:00:56 2013 +0200

    Input mock tests only work on PY3.

diff --git a/tests/test_prompt.py b/tests/test_prompt.py
index c05d7e4..6f043df 100755
--- a/tests/test_prompt.py
+++ b/tests/test_prompt.py
@@ -8,11 +8,23 @@ test_prompt
 Tests for `cookiecutter.prompt` module.
 """
 
+import sys
 import unittest
-from unittest.mock import patch
 
 from cookiecutter import prompt
 
+PY3 = sys.version > '3'
+if PY3:
+    from unittest.mock import patch
+    input_str = 'builtins.input'
+else:
+    from mock import patch
+    input_str = '__builtin__.input'
+
+if sys.version_info[:2] < (2, 7):
+    import unittest2 as unittest
+else:
+    import unittest
 
 # class TestPrompt(unittest.TestCase):
 #     def test_prompt_for_config(self):
@@ -22,29 +34,30 @@ from cookiecutter import prompt
         # TODO: figure out how to mock input with pexpect or something
         # prompt.prompt_for_config(context)
 
+@unittest.skipUnless(condition=PY3, reason='Only works on PY3 as of now.')
 class TestQueryAnswers(unittest.TestCase):
 
-    @patch('builtins.input', lambda: 'y')
+    @patch(input_str, lambda: 'y')
     def test_query_y(self):
         answer = prompt.query_yes_no("Blah?")
         self.assertTrue(answer)
 
-    @patch('builtins.input', lambda: 'ye')
+    @patch(input_str, lambda: 'ye')
     def test_query_ye(self):
         answer = prompt.query_yes_no("Blah?")
         self.assertTrue(answer)
 
-    @patch('builtins.input', lambda: 'yes')
+    @patch(input_str, lambda: 'yes')
     def test_query_yes(self):
         answer = prompt.query_yes_no("Blah?")
         self.assertTrue(answer)
 
-    @patch('builtins.input', lambda: 'n')
+    @patch(input_str, lambda: 'n')
     def test_query_n(self):
         answer = prompt.query_yes_no("Blah?")
         self.assertFalse(answer)
 
-    @patch('builtins.input', lambda: 'no')
+    @patch(input_str, lambda: 'no')
     def test_query_n(self):
         answer = prompt.query_yes_no("Blah?")
         self.assertFalse(answer)
@@ -54,23 +67,24 @@ class TestQueryAnswers(unittest.TestCase):
     #     answer = prompt.query_yes_no("Blah?")
     #     self.assertTrue(answer)
 
+@unittest.skipUnless(condition=PY3, reason='Only works on PY3 as of now.')
 class TestQueryDefaults(unittest.TestCase):
 
-    @patch('builtins.input', lambda: 'y')
+    @patch(input_str, lambda: 'y')
     def test_query_y_none_default(self):
         answer = prompt.query_yes_no("Blah?", default=None)
         self.assertTrue(answer)
 
-    @patch('builtins.input', lambda: 'n')
+    @patch(input_str, lambda: 'n')
     def test_query_n_none_default(self):
         answer = prompt.query_yes_no("Blah?", default=None)
         self.assertFalse(answer)
 
-    @patch('builtins.input', lambda: '')
+    @patch(input_str, lambda: '')
     def test_query_no_default(self):
         answer = prompt.query_yes_no("Blah?", default='no')
         self.assertFalse(answer)
 
-    @patch('builtins.input', lambda: 'junk')
+    @patch(input_str, lambda: 'junk')
     def test_query_bad_default(self):
         self.assertRaises(ValueError, prompt.query_yes_no, "Blah?", default='yn')
