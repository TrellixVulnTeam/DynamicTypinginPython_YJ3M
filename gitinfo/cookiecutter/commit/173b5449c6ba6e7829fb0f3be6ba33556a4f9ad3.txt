commit 173b5449c6ba6e7829fb0f3be6ba33556a4f9ad3
Author: michaeljoseph <michaeljoseph+github@gmail.com>
Date:   Mon Jul 11 22:03:50 2016 +0200

    Capture vcs output subprocess errors

diff --git a/cookiecutter/exceptions.py b/cookiecutter/exceptions.py
index 0e8fbb2..7c87a99 100644
--- a/cookiecutter/exceptions.py
+++ b/cookiecutter/exceptions.py
@@ -113,3 +113,26 @@ class RepositoryNotFound(CookiecutterException):
     """
     Raised when the specified cookiecutter repository doesn't exist.
     """
+
+
+class RepositoryCloneFailed(CookiecutterException):
+    """Raised when a cookiecutter template can't be cloned."""
+
+    BRANCH_ERRORS = [
+        'error: pathspec',
+        'unknown revision',
+    ]
+
+    def __init__(self, e, repo_url, checkout):
+        if 'not found' in e.output.lower():
+            self.message = (
+                'The repository {} could not be found, '
+                'have you made a typo?'.format(repo_url)
+            )
+        elif any(error in e.output for error in self.BRANCH_ERRORS):
+            self.message = (
+                'The {} branch of repository {} could not found, '
+                'have you made a typo?'.format(checkout, repo_url)
+            )
+        else:
+            raise e
diff --git a/cookiecutter/vcs.py b/cookiecutter/vcs.py
index e7431e5..e699d85 100644
--- a/cookiecutter/vcs.py
+++ b/cookiecutter/vcs.py
@@ -15,7 +15,7 @@ import sys
 
 from whichcraft import which
 
-from .exceptions import UnknownRepoType, VCSNotInstalled
+from .exceptions import RepositoryCloneFailed, UnknownRepoType, VCSNotInstalled
 from .prompt import read_user_yes_no
 from .utils import make_sure_path_exists, rmtree
 
@@ -115,9 +115,19 @@ def clone(repo_url, checkout=None, clone_to_dir=".", no_input=False):
         prompt_and_delete_repo(repo_dir, no_input=no_input)
 
     if repo_type in ['git', 'hg']:
-        subprocess.check_call([repo_type, 'clone', repo_url], cwd=clone_to_dir)
-        if checkout is not None:
-            subprocess.check_call([repo_type, 'checkout', checkout],
-                                  cwd=repo_dir)
+        try:
+            subprocess.check_output(
+                [repo_type, 'clone', repo_url],
+                cwd=clone_to_dir,
+                stderr=subprocess.STDOUT,
+            )
+            if checkout is not None:
+                subprocess.check_output(
+                    [repo_type, 'checkout', checkout],
+                    cwd=repo_dir,
+                    stderr=subprocess.STDOUT,
+                )
+        except subprocess.CalledProcessError as e:
+            raise RepositoryCloneFailed(e, repo_url, checkout)
 
     return repo_dir
