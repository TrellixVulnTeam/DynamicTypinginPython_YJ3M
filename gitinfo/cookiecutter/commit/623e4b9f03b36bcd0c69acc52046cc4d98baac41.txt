commit 623e4b9f03b36bcd0c69acc52046cc4d98baac41
Author: Paul Harrison <paulharrison@fastmail.com>
Date:   Wed May 27 10:50:43 2020 +0100

    Render variables starting with an underscore. (#1339)
    
    Co-authored-by: Paul Harrison <paulharrison@ip-192-168-1-10.ec2.internal>
    Co-authored-by: Paul Harrison <paulharrison@Pauls-MacBook-Pro.local>
    Co-authored-by: Paul Harrison <paul@LAPTOP-16SL8FNL.localdomain>
    Co-authored-by: Paul Harrison <paul@harrison.sh>
    Co-authored-by: Sorin Sbarnea <ssbarnea@users.noreply.github.com>

diff --git a/AUTHORS.md b/AUTHORS.md
index 3db2a87..bf54aa6 100644
--- a/AUTHORS.md
+++ b/AUTHORS.md
@@ -145,3 +145,4 @@
 * Chuan-Heng Hsiao ([@chhsiao1981](https://github.com/chhsiao1981))
 * Mohammad Hossein Sekhavat ([@mhsekhavat](https://github.com/mhsekhavat))
 * Amey Joshi ([@amey589](https://github.com/amey589))
+* Paul Harrison ([@smoothml](https://github.com/smoothml))
diff --git a/cookiecutter/prompt.py b/cookiecutter/prompt.py
index d7d9d24..2042a20 100644
--- a/cookiecutter/prompt.py
+++ b/cookiecutter/prompt.py
@@ -186,9 +186,12 @@ def prompt_for_config(context, no_input=False):
     # These must be done first because the dictionaries keys and
     # values might refer to them.
     for key, raw in context[u'cookiecutter'].items():
-        if key.startswith(u'_'):
+        if key.startswith(u'_') and not key.startswith(u'__'):
             cookiecutter_dict[key] = raw
             continue
+        elif key.startswith(u'__'):
+            cookiecutter_dict[key] = render_variable(env, raw, cookiecutter_dict)
+            continue
 
         try:
             if isinstance(raw, list):
diff --git a/docs/advanced/index.rst b/docs/advanced/index.rst
index b5b311c..8149023 100644
--- a/docs/advanced/index.rst
+++ b/docs/advanced/index.rst
@@ -14,6 +14,7 @@ Various advanced topics regarding cookiecutter usage.
    injecting_context
    suppressing_prompts
    templates_in_context
+   private_variables
    copy_without_render
    replay
    cli_options
diff --git a/docs/advanced/private_variables.rst b/docs/advanced/private_variables.rst
new file mode 100644
index 0000000..e336338
--- /dev/null
+++ b/docs/advanced/private_variables.rst
@@ -0,0 +1,45 @@
+.. _private-variables:
+
+Private Variables
+-----------------
+
+Cookiecutter allows the definition private variables - those the user will not be required to fill in - by prepending an underscore to the variable name. These can either be not rendered, by using a prepending underscore, or rendered, prepending a double underscore. For example, the ``cookiecutter.json``::
+
+    {
+        "project_name": "Really cool project",
+        "_not_rendered": "{{ cookiecutter.project_name|lower }}",
+        "__rendered": "{{ cookiecutter.project_name|lower }}"
+    }
+
+Will be rendered as::
+
+    {
+        "project_name": "Really cool project",
+        "_not_rendered": "{{ cookiecutter.project_name|lower }}",
+        "__rendered": "really cool project"
+    }
+
+The user will only be asked for ``project_name``.
+
+Non-rendered private variables can be used for defining constants. An example of where you may wish to use private **rendered** variables is creating a Python package repository and want to enforce naming consistency. To ensure the repository and package name are based on the project name, you could create a ``cookiecutter.json`` such as::
+
+    {
+        "project_name": "Project Name",
+        "__project_slug": "{{ cookiecutter.project_name|lower|replace(' ', '-') }}",
+        "__package_name": "{{ cookiecutter.project_name|lower|replace(' ', '_') }}",
+    }
+
+Which could create a structure like this::
+
+    project-name
+    ├── Makefile
+    ├── README.md
+    ├── requirements.txt
+    └── src
+        ├── project_name
+        │   └── __init__.py
+        ├── setup.py
+        └── tests
+            └── __init__.py
+
+The ``README.md`` can then have a plain English project title.
\ No newline at end of file
diff --git a/tests/test_prompt.py b/tests/test_prompt.py
index d85faa1..19eb9d4 100644
--- a/tests/test_prompt.py
+++ b/tests/test_prompt.py
@@ -199,6 +199,43 @@ class TestPrompt(object):
         cookiecutter_dict = prompt.prompt_for_config(context)
         assert cookiecutter_dict == {'_copy_without_render': ['*.html']}
 
+    def test_should_render_private_variables_with_two_underscores(self):
+        """Test rendering of private variables with two underscores.
+
+        There are three cases:
+        1. Variables beginning with a single underscore are private and not rendered.
+        2. Variables beginning with a double underscore are private and are rendered.
+        3. Variables beginning with anything other than underscores are not private and
+           are rendered.
+        """
+        context = {
+            'cookiecutter': OrderedDict(
+                [
+                    ('foo', 'Hello world'),
+                    ('bar', 123),
+                    ('rendered_foo', u'{{ cookiecutter.foo|lower }}'),
+                    ('rendered_bar', 123),
+                    ('_hidden_foo', u'{{ cookiecutter.foo|lower }}'),
+                    ('_hidden_bar', 123),
+                    ('__rendered_hidden_foo', u'{{ cookiecutter.foo|lower }}'),
+                    ('__rendered_hidden_bar', 123),
+                ]
+            )
+        }
+        cookiecutter_dict = prompt.prompt_for_config(context, no_input=True)
+        assert cookiecutter_dict == OrderedDict(
+            [
+                ('foo', 'Hello world'),
+                ('bar', '123'),
+                ('rendered_foo', 'hello world'),
+                ('rendered_bar', '123'),
+                ('_hidden_foo', u'{{ cookiecutter.foo|lower }}'),
+                ('_hidden_bar', 123),
+                ('__rendered_hidden_foo', 'hello world'),
+                ('__rendered_hidden_bar', '123'),
+            ]
+        )
+
     def test_should_not_render_private_variables(self):
         """Verify private(underscored) variables not rendered by `prompt_for_config`.
 
