commit 68b98f0c9f2821959f91c385c2d8efe19338d76c
Author: Michael Joseph <michaeljoseph+github@gmail.com>
Date:   Sun Nov 9 11:47:21 2014 +0200

    Single quotes where it makes sense
    
    Update coding standards
    Fixes #204

diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 3ed01e6..18abebb 100755
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -80,17 +80,17 @@ def generate_file(project_dir, infile, context, env):
     :param env: Jinja2 template execution environment.
     """
 
-    logging.debug("Generating file {0}".format(infile))
+    logging.debug('Generating file {0}'.format(infile))
 
     # Render the path to the output file (not including the root project dir)
     outfile_tmpl = Template(infile)
     outfile = os.path.join(project_dir, outfile_tmpl.render(**context))
-    logging.debug("outfile is {0}".format(outfile))
+    logging.debug('outfile is {0}'.format(outfile))
 
     # Just copy over binary files. Don't render.
     logging.debug("Check {0} to see if it's a binary".format(infile))
     if is_binary(infile):
-        logging.debug("Copying binary {0} to {1} without rendering"
+        logging.debug('Copying binary {0} to {1} without rendering'
                       .format(infile, outfile))
         shutil.copyfile(infile, outfile)
     else:
@@ -108,9 +108,9 @@ def generate_file(project_dir, infile, context, env):
             raise
         rendered_file = tmpl.render(**context)
 
-        logging.debug("Writing {0}".format(outfile))
+        logging.debug('Writing {0}'.format(outfile))
 
-        with io.open(outfile, 'w', encoding="utf-8") as fh:
+        with io.open(outfile, 'w', encoding='utf-8') as fh:
             fh.write(rendered_file)
 
     # Apply file permissions to output file
@@ -146,7 +146,7 @@ def ensure_dir_is_templated(dirname):
         raise NonTemplatedInputDirException
 
 
-def generate_files(repo_dir, context=None, output_dir="."):
+def generate_files(repo_dir, context=None, output_dir='.'):
     """
     Renders the templates and saves them to files.
 
@@ -165,13 +165,13 @@ def generate_files(repo_dir, context=None, output_dir="."):
 
     # We want the Jinja path and the OS paths to match. Consequently, we'll:
     #   + CD to the template folder
-    #   + Set Jinja's path to "."
+    #   + Set Jinja's path to '.'
     #
     #  In order to build our files to the correct folder(s), we'll use an
     # absolute path for the target folder (project_dir)
 
     project_dir = os.path.abspath(project_dir)
-    logging.debug("project_dir is {0}".format(project_dir))
+    logging.debug('project_dir is {0}'.format(project_dir))
 
     # run pre-gen hook from repo_dir
     with work_in(repo_dir):
@@ -179,9 +179,9 @@ def generate_files(repo_dir, context=None, output_dir="."):
 
     with work_in(template_dir):
         env = Environment(keep_trailing_newline=True)
-        env.loader = FileSystemLoader(".")
+        env.loader = FileSystemLoader('.')
 
-        for root, dirs, files in os.walk("."):
+        for root, dirs, files in os.walk('.'):
             for d in dirs:
                 unrendered_dir = os.path.join(project_dir,
                                               os.path.join(root, d))
@@ -189,7 +189,7 @@ def generate_files(repo_dir, context=None, output_dir="."):
 
             for f in files:
                 infile = os.path.join(root, f)
-                logging.debug("f is {0}".format(f))
+                logging.debug('f is {0}'.format(f))
                 generate_file(project_dir, infile, context, env)
 
     # run post-gen hook from repo_dir
diff --git a/cookiecutter/hooks.py b/cookiecutter/hooks.py
index 6c5cc20..37d1764 100755
--- a/cookiecutter/hooks.py
+++ b/cookiecutter/hooks.py
@@ -36,9 +36,9 @@ def find_hooks():
     """
     hooks_dir = 'hooks'
     r = {}
-    logging.debug("hooks_dir is {0}".format(hooks_dir))
+    logging.debug('hooks_dir is {0}'.format(hooks_dir))
     if not os.path.isdir(hooks_dir):
-        logging.debug("No hooks/ dir in template_dir")
+        logging.debug('No hooks/ dir in template_dir')
         return r
     for f in os.listdir(hooks_dir):
         basename = os.path.splitext(os.path.basename(f))[0]
@@ -102,6 +102,6 @@ def run_hook(hook_name, project_dir, context):
     """
     script = find_hooks().get(hook_name)
     if script is None:
-        logging.debug("No hooks found")
+        logging.debug('No hooks found')
         return
     return run_script_with_context(script, project_dir, context)
diff --git a/cookiecutter/main.py b/cookiecutter/main.py
index 77240ff..47ad5e8 100755
--- a/cookiecutter/main.py
+++ b/cookiecutter/main.py
@@ -74,7 +74,7 @@ def cookiecutter(input_dir, checkout=None, no_input=False, extra_context=None):
     input_dir = expand_abbreviations(input_dir, config_dict)
 
     # TODO: find a better way to tell if it's a repo URL
-    if "git@" in input_dir or "https://" in input_dir:
+    if 'git@' in input_dir or 'https://' in input_dir:
         repo_dir = clone(
             repo_url=input_dir,
             checkout=checkout,
@@ -112,7 +112,7 @@ def _get_parser():
     )
     parser.add_argument(
         '--no-input',
-        action="store_true",
+        action='store_true',
         help='Do not prompt for parameters and only use cookiecutter.json '
              'file content')
     parser.add_argument(
@@ -128,7 +128,7 @@ def _get_parser():
     )
     parser.add_argument(
         '-V', '--version',
-        help="Show version information and exit.",
+        help='Show version information and exit.',
         action='version',
         version='Cookiecutter {0} from {1} (Python {2})'.format(
             __version__,
diff --git a/cookiecutter/prompt.py b/cookiecutter/prompt.py
index 44e3d12..76f4694 100755
--- a/cookiecutter/prompt.py
+++ b/cookiecutter/prompt.py
@@ -29,7 +29,7 @@ def prompt_for_config(context, no_input=False):
         val = env.from_string(raw).render(cookiecutter=cookiecutter_dict)
 
         if not no_input:
-            prompt = "{0} (default is \"{1}\")? ".format(key, val)
+            prompt = '{0} (default is "{1}")? '.format(key, val)
 
             new_val = read_response(prompt).strip()
 
@@ -40,7 +40,7 @@ def prompt_for_config(context, no_input=False):
     return cookiecutter_dict
 
 
-def query_yes_no(question, default="yes"):
+def query_yes_no(question, default='yes'):
     """
     Ask a yes/no question via `read_response()` and return their answer.
 
@@ -56,15 +56,15 @@ def query_yes_no(question, default="yes"):
     http://code.activestate.com/recipes/577058/
 
     """
-    valid = {"yes": True, "y": True, "ye": True, "no": False, "n": False}
+    valid = {'yes': True, 'y': True, 'ye': True, 'no': False, 'n': False}
     if default is None:
-        prompt = " [y/n] "
-    elif default == "yes":
-        prompt = " [Y/n] "
-    elif default == "no":
-        prompt = " [y/N] "
+        prompt = ' [y/n] '
+    elif default == 'yes':
+        prompt = ' [Y/n] '
+    elif default == 'no':
+        prompt = ' [y/N] '
     else:
-        raise ValueError("invalid default answer: '{0}'".format(default))
+        raise ValueError('Invalid default answer: "{0}"'.format(default))
 
     while True:
         sys.stdout.write(question + prompt)
@@ -75,5 +75,5 @@ def query_yes_no(question, default="yes"):
         elif choice in valid:
             return valid[choice]
         else:
-            sys.stdout.write("Please respond with 'yes' or 'no' "
-                             "(or 'y' or 'n').\n")
+            sys.stdout.write('Please respond with "yes" or "no" '
+                             '(or "y" or "n").\n')
diff --git a/cookiecutter/utils.py b/cookiecutter/utils.py
index 132e6a2..af43894 100755
--- a/cookiecutter/utils.py
+++ b/cookiecutter/utils.py
@@ -15,6 +15,7 @@ import logging
 import os
 import stat
 import shutil
+import tempfile
 
 
 def force_delete(func, path, exc_info):
@@ -45,7 +46,7 @@ def make_sure_path_exists(path):
     :param path: A directory path.
     """
 
-    logging.debug("Making sure path exists: {0}".format(path))
+    logging.debug('Making sure path exists: {0}'.format(path))
     try:
         os.makedirs(path)
     except OSError as exception:
diff --git a/cookiecutter/vcs.py b/cookiecutter/vcs.py
index 202eb44..f3b4a53 100755
--- a/cookiecutter/vcs.py
+++ b/cookiecutter/vcs.py
@@ -34,8 +34,8 @@ def prompt_and_delete_repo(repo_dir, no_input=False):
     else:
         ok_to_delete = query_yes_no(
             "You've cloned {0} before. "
-            "Is it okay to delete and re-clone it?".format(repo_dir),
-            default="yes"
+            'Is it okay to delete and re-clone it?'.format(repo_dir),
+            default='yes'
         )
 
     if ok_to_delete:
@@ -52,15 +52,15 @@ def identify_repo(repo_url):
     :returns: "git", "hg", or None.
     """
 
-    if "git" in repo_url:
-        return "git"
-    elif "bitbucket" in repo_url:
-        return "hg"
+    if 'git' in repo_url:
+        return 'git'
+    elif 'bitbucket' in repo_url:
+        return 'hg'
     else:
         raise UnknownRepoType
 
 
-def clone(repo_url, checkout=None, clone_to_dir=".", no_input=False):
+def clone(repo_url, checkout=None, clone_to_dir='.', no_input=False):
     """
     Clone a repo to the current directory.
 
@@ -78,17 +78,17 @@ def clone(repo_url, checkout=None, clone_to_dir=".", no_input=False):
     repo_type = identify_repo(repo_url)
 
     tail = os.path.split(repo_url)[1]
-    if repo_type == "git":
+    if repo_type == 'git':
         repo_dir = os.path.normpath(os.path.join(clone_to_dir,
                                                  tail.rsplit('.git')[0]))
-    elif repo_type == "hg":
+    elif repo_type == 'hg':
         repo_dir = os.path.normpath(os.path.join(clone_to_dir, tail))
     logging.debug('repo_dir is {0}'.format(repo_dir))
 
     if os.path.isdir(repo_dir):
         prompt_and_delete_repo(repo_dir, no_input=no_input)
 
-    if repo_type in ["git", "hg"]:
+    if repo_type in ['git', 'hg']:
         subprocess.check_call([repo_type, 'clone', repo_url], cwd=clone_to_dir)
         if checkout is not None:
             subprocess.check_call([repo_type, 'checkout', checkout],
diff --git a/docs/contributor_guidelines.rst b/docs/contributor_guidelines.rst
index 390368b..ece61a8 100644
--- a/docs/contributor_guidelines.rst
+++ b/docs/contributor_guidelines.rst
@@ -19,3 +19,4 @@ Coding Standards
 
 * PEP8
 * Functions over classes except in tests
+* Prefer single quotes (unless inconvenient) http://stackoverflow.com/a/56190/5549
