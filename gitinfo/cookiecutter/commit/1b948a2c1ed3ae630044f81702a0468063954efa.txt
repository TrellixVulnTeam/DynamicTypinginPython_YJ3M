commit 1b948a2c1ed3ae630044f81702a0468063954efa
Author: Audrey Roy <audreyr@gmail.com>
Date:   Fri Sep 6 16:34:59 2013 +0200

    Pass repo_dir arg to generate_files(). Find templates within there instead of outside.

diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 7ada131..a22ee6e 100755
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -19,6 +19,7 @@ from jinja2.exceptions import TemplateSyntaxError
 from binaryornot.check import is_binary
 
 from .exceptions import NonTemplatedInputDirException
+from .find import find_template
 from .utils import make_sure_path_exists, unicode_open, work_in
 from .hooks import run_hook
 
@@ -109,7 +110,6 @@ def render_and_create_dir(dirname, context, output_dir):
     Renders the name of a directory, creates the directory, and returns its path.
     """
 
-    dirname = os.path.split(dirname)[1]
     name_tmpl = Template(dirname)
     rendered_dirname = name_tmpl.render(**context)
     logging.debug('Rendered dir {0} must exist in output_dir {1}'.format(
@@ -134,7 +134,7 @@ def ensure_dir_is_templated(dirname):
         raise NonTemplatedInputDirException
 
 
-def generate_files(template_dir, context=None, output_dir="."):
+def generate_files(repo_dir, context=None, output_dir="."):
     """
     Renders the templates and saves them to files.
     :param input_dir: Project template input directory.
@@ -142,11 +142,13 @@ def generate_files(template_dir, context=None, output_dir="."):
     :param output_dir: Where to output the generated project dir into.
     """
 
+    template_dir = find_template(repo_dir)
     logging.debug('Generating project from {0}...'.format(template_dir))
     context = context or {}
 
-    ensure_dir_is_templated(template_dir)
-    project_dir = render_and_create_dir(template_dir, context, output_dir)
+    unrendered_dir = os.path.split(template_dir)[1]
+    ensure_dir_is_templated(unrendered_dir)
+    project_dir = render_and_create_dir(unrendered_dir, context, output_dir)
 
     # We want the Jinja path and the OS paths to match. Consequently, we'll:
     #   + CD to the template folder
@@ -158,8 +160,9 @@ def generate_files(template_dir, context=None, output_dir="."):
     project_dir = os.path.abspath(project_dir)
     logging.debug("project_dir is {0}".format(project_dir))
 
-    # run pre-gen hook
-    run_hook('pre_gen_project', project_dir)
+    # run pre-gen hook from repo_dir
+    with work_in(repo_dir):
+        run_hook('pre_gen_project', project_dir)
 
     with work_in(template_dir):
         env = Environment()
@@ -175,5 +178,6 @@ def generate_files(template_dir, context=None, output_dir="."):
                 logging.debug("f is {0}".format(f))
                 generate_file(project_dir, infile, context, env)
 
-    # run post-gen hook
-    run_hook('post_gen_project', project_dir)
+    # run post-gen hook from repo_dir
+    with work_in(repo_dir):
+        run_hook('post_gen_project', project_dir)
diff --git a/cookiecutter/hooks.py b/cookiecutter/hooks.py
index e0e2fd7..ac8db69 100755
--- a/cookiecutter/hooks.py
+++ b/cookiecutter/hooks.py
@@ -56,14 +56,14 @@ def _run_hook(script_path, cwd='.'):
     subprocess.call(script_path, cwd=cwd)
 
 
-def run_hook(hook_name, output_dir):
+def run_hook(hook_name, project_dir):
     '''
-    Try and find a script mapped to `hook_name` in `input_dir`,
-    and execute it from `output_dir`.
+    Try and find a script mapped to `hook_name` in the current working directory,
+    and execute it from `project_dir`.
     '''
-    with work_in(os.path.dirname(output_dir)):
-        script = find_hooks().get(hook_name)
-        if script is None:
-            logging.debug("No hooks found")
-            return
-        return _run_hook(script, output_dir)
+    # with work_in(os.path.dirname(project_dir)):
+    script = find_hooks().get(hook_name)
+    if script is None:
+        logging.debug("No hooks found")
+        return
+    return _run_hook(script, project_dir)
diff --git a/cookiecutter/main.py b/cookiecutter/main.py
index ea628b3..0f03a83 100755
--- a/cookiecutter/main.py
+++ b/cookiecutter/main.py
@@ -18,7 +18,7 @@ import sys
 import shutil
 
 from .cleanup import remove_repo
-from .find import find_template
+# from .find import find_template
 from .prompt import prompt_for_config
 from .generate import generate_context, generate_files
 from .vcs import git_clone
@@ -44,7 +44,7 @@ def cookiecutter(input_dir, checkout=None, no_input=False):
         got_repo_arg = False
         repo_dir = input_dir
 
-    project_template = find_template(repo_dir)
+    # project_template = find_template(repo_dir)
     config_file = os.path.join(os.path.dirname(project_template),
                                'cookiecutter.json')
     logging.debug('config_file is {0}'.format(config_file))
@@ -61,7 +61,8 @@ def cookiecutter(input_dir, checkout=None, no_input=False):
 
     # Create project from local context and project template.
     generate_files(
-        template_dir=project_template,
+        repo_dir=repo_dir,
+        # template_dir=project_template,
         context=context
     )
 
diff --git a/tests/test-pyhooks/input{{pyhooks}}/README.rst b/tests/test-pyhooks/input{{cookiecutter.pyhooks}}/README.rst
similarity index 100%
rename from tests/test-pyhooks/input{{pyhooks}}/README.rst
rename to tests/test-pyhooks/input{{cookiecutter.pyhooks}}/README.rst
diff --git a/tests/test-shellhooks/input{{shellhooks}}/README.rst b/tests/test-shellhooks/input{{cookiecutter.shellhooks}}/README.rst
similarity index 100%
rename from tests/test-shellhooks/input{{shellhooks}}/README.rst
rename to tests/test-shellhooks/input{{cookiecutter.shellhooks}}/README.rst
diff --git a/tests/test_generate.py b/tests/test_generate.py
index 6529c33..bb2e4e4 100755
--- a/tests/test_generate.py
+++ b/tests/test_generate.py
@@ -85,8 +85,8 @@ class TestGenerateFiles(unittest.TestCase):
             context={'food': 'pizzä'},
             template_dir='tests/input{{food}}'
         )
-        self.assertTrue(os.path.isfile('tests/inputpizzä/simple.txt'))
-        simple_text = open('tests/inputpizzä/simple.txt', 'rt').read()
+        self.assertTrue(os.path.isfile('inputpizzä/simple.txt'))
+        simple_text = open('inputpizzä/simple.txt', 'rt').read()
         if PY3:
             self.assertEqual(simple_text, 'I eat pizzä')
         else:
@@ -97,11 +97,11 @@ class TestGenerateFiles(unittest.TestCase):
             context={'binary_test': 'binary_files'},
             template_dir='tests/input{{binary_test}}'
         )
-        self.assertTrue(os.path.isfile('tests/inputbinary_files/logo.png'))
-        self.assertTrue(os.path.isfile('tests/inputbinary_files/.DS_Store'))
-        self.assertTrue(os.path.isfile('tests/inputbinary_files/readme.txt'))
+        self.assertTrue(os.path.isfile('inputbinary_files/logo.png'))
+        self.assertTrue(os.path.isfile('inputbinary_files/.DS_Store'))
+        self.assertTrue(os.path.isfile('inputbinary_files/readme.txt'))
         self.assertTrue(
-            os.path.isfile('tests/inputbinary_files/some_font.otf')
+            os.path.isfile('inputbinary_files/some_font.otf')
         )
 
     def test_generate_binary_files_in_nested_jinja_path(self):
@@ -109,9 +109,9 @@ class TestGenerateFiles(unittest.TestCase):
             context={'binary_test': 'binary_files'},
             template_dir='tests/input{{binary_test}}'
         )
-        expected = ['tests/inputbinary_files/binary_files/logo.png',
-                    "tests/inputbinary_files/binary_files/.DS_Store",
-                    "tests/inputbinary_files/binary_files/readme.txt"]
+        expected = ['inputbinary_files/binary_files/logo.png',
+                    "inputbinary_files/binary_files/.DS_Store",
+                    "inputbinary_files/binary_files/readme.txt"]
         for each in expected:
             self.assertTrue(os.path.isfile(each))
 
@@ -120,7 +120,7 @@ class TestGenerateFiles(unittest.TestCase):
             context={'food': 'pizzä'},
             template_dir=os.path.abspath('tests/input{{food}}')
         )
-        self.assertTrue(os.path.isfile('tests/inputpizzä/simple.txt'))
+        self.assertTrue(os.path.isfile('inputpizzä/simple.txt'))
 
     def test_generate_files_output_dir(self):
         os.mkdir('tests/custom_output_dir')
@@ -132,12 +132,12 @@ class TestGenerateFiles(unittest.TestCase):
         self.assertTrue(os.path.isfile('tests/custom_output_dir/inputpizzä/simple.txt'))
 
     def tearDown(self):
-        if os.path.exists('tests/inputpizzä'):
-            shutil.rmtree('tests/inputpizzä')
-        if os.path.exists('tests/inputgreen'):
-            shutil.rmtree('tests/inputgreen')
-        if os.path.exists('tests/inputbinary_files'):
-            shutil.rmtree('tests/inputbinary_files')
+        if os.path.exists('inputpizzä'):
+            shutil.rmtree('inputpizzä')
+        if os.path.exists('inputgreen'):
+            shutil.rmtree('inputgreen')
+        if os.path.exists('inputbinary_files'):
+            shutil.rmtree('inputbinary_files')
         if os.path.exists('tests/custom_output_dir'):
             shutil.rmtree('tests/custom_output_dir')
 
@@ -183,23 +183,42 @@ class TestHooks(unittest.TestCase):
 
     def test_ignore_hooks_dirs(self):
         generate.generate_files(
-            context={'pyhooks': 'pyhooks'},
-            template_dir='tests/test-pyhooks/input{{pyhooks}}'
+            context={
+                'cookiecutter' : {'pyhooks': 'pyhooks'}
+            },
+            repo_dir='tests/test-pyhooks/',
+            output_dir='tests/test-pyhooks/'
         )
         self.assertFalse(os.path.exists('tests/test-pyhooks/inputpyhooks/hooks'))
 
     def test_run_python_hooks(self):
         generate.generate_files(
-            context={'pyhooks': 'pyhooks'},
-            template_dir='tests/test-pyhooks/input{{pyhooks}}'
+            context={
+                'cookiecutter' : {'pyhooks': 'pyhooks'}
+            },
+            repo_dir='tests/test-pyhooks/',
+            output_dir='tests/test-pyhooks/'
         )
         self.assertTrue(os.path.exists('tests/test-pyhooks/inputpyhooks/python_pre.txt'))
         self.assertTrue(os.path.exists('tests/test-pyhooks/inputpyhooks/python_post.txt'))
 
+    def test_run_python_hooks_cwd(self):
+        generate.generate_files(
+            context={
+                'cookiecutter' : {'pyhooks': 'pyhooks'}
+            },
+            repo_dir='tests/test-pyhooks/'
+        )
+        self.assertTrue(os.path.exists('inputpyhooks/python_pre.txt'))
+        self.assertTrue(os.path.exists('inputpyhooks/python_post.txt'))
+
     def test_run_shell_hooks(self):
         generate.generate_files(
-            context={'shellhooks': 'shellhooks'},
-            template_dir='tests/test-shellhooks/input{{shellhooks}}'
+            context={
+                'cookiecutter' : {'shellhooks': 'shellhooks'}
+            },
+            repo_dir='tests/test-shellhooks/',
+            output_dir='tests/test-shellhooks/'
         )
         self.assertTrue(os.path.exists('tests/test-shellhooks/inputshellhooks/shell_pre.txt'))
         self.assertTrue(os.path.exists('tests/test-shellhooks/inputshellhooks/shell_post.txt'))
@@ -207,6 +226,8 @@ class TestHooks(unittest.TestCase):
     def tearDown(self):
         if os.path.exists('tests/test-pyhooks/inputpyhooks'):
             shutil.rmtree('tests/test-pyhooks/inputpyhooks')
+        if os.path.exists('inputpyhooks'):
+            shutil.rmtree('inputpyhooks')
         if os.path.exists('tests/test-shellhooks/inputshellhooks'):
             shutil.rmtree('tests/test-shellhooks/inputshellhooks')
 
