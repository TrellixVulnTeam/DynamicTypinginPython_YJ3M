commit b29ecbc3222cfe946110d26ff262481a4e8da1d8
Author: Roman Hartmann <romhartmann@gmail.com>
Date:   Wed Jan 8 12:32:19 2020 -0800

    Enable multiple templates per repository (#1224)
    
    * implement subdirectory functionality for a repo.
    
    * add tests for subdir implementation.
    
    * change way subdirectory is implemented
    
    * create unit test for subdirectory.
    
    * Change implementation as per unit tests.
    
    * Add documentation on how to use.
    
    * Hail to the mighty linter.
    
    * add documentation to index
    
    * update documentation to be more explicit.
    
    * fix list to be rst
    
    * This _should_ fix the .rst formatting...
    
    * add unit test for determine_repo_dir
    
    * Fix documentation
    
    * Cli rename and docs fix
    
    * PR comments, rename test script
    
    * PR comments: remove redundant condition
    
    * rename argument 'dir' to directory
    
    * Documentation review changes.
    
    * Shorten Docstring by 2 characters for 79 width
    
    Co-authored-by: Andrey Shpak <insspb@users.noreply.github.com>

diff --git a/cookiecutter/cli.py b/cookiecutter/cli.py
index 9034d95..a9b10e3 100644
--- a/cookiecutter/cli.py
+++ b/cookiecutter/cli.py
@@ -59,6 +59,11 @@ def validate_extra_context(ctx, param, value):
     u'-c', u'--checkout',
     help=u'branch, tag or commit to checkout after git clone',
 )
+@click.option(
+    u'--directory',
+    help=u'Directory within repo that holds cookiecutter.json file '
+         u'for advanced repositories with multi templates in it',
+)
 @click.option(
     '-v', '--verbose',
     is_flag=True, help='Print debug information', default=False
@@ -91,7 +96,7 @@ def validate_extra_context(ctx, param, value):
 def main(
         template, extra_context, no_input, checkout, verbose,
         replay, overwrite_if_exists, output_dir, config_file,
-        default_config, debug_file):
+        default_config, debug_file, directory):
     """Create a project from a Cookiecutter project template (TEMPLATE).
 
     Cookiecutter is free and open source software, developed and managed by
@@ -118,7 +123,8 @@ def main(
             output_dir=output_dir,
             config_file=config_file,
             default_config=default_config,
-            password=os.environ.get('COOKIECUTTER_REPO_PASSWORD')
+            password=os.environ.get('COOKIECUTTER_REPO_PASSWORD'),
+            directory=directory
         )
     except (OutputDirExistsException,
             InvalidModeException,
diff --git a/cookiecutter/main.py b/cookiecutter/main.py
index b5c791f..85965be 100644
--- a/cookiecutter/main.py
+++ b/cookiecutter/main.py
@@ -25,7 +25,7 @@ logger = logging.getLogger(__name__)
 def cookiecutter(
         template, checkout=None, no_input=False, extra_context=None,
         replay=False, overwrite_if_exists=False, output_dir='.',
-        config_file=None, default_config=False, password=None):
+        config_file=None, default_config=False, password=None, directory=None):
     """
     Run Cookiecutter just as if using it from the command line.
 
@@ -41,6 +41,7 @@ def cookiecutter(
     :param config_file: User configuration file path.
     :param default_config: Use default values rather than a config file.
     :param password: The password to use when extracting the repository.
+    :param directory: Relative path to a cookiecutter template in a repository.
     """
     if replay and ((no_input is not False) or (extra_context is not None)):
         err_msg = (
@@ -60,7 +61,8 @@ def cookiecutter(
         clone_to_dir=config_dict['cookiecutters_dir'],
         checkout=checkout,
         no_input=no_input,
-        password=password
+        password=password,
+        directory=directory
     )
 
     template_name = os.path.basename(os.path.abspath(repo_dir))
diff --git a/cookiecutter/repository.py b/cookiecutter/repository.py
index 08fbcef..14d8704 100644
--- a/cookiecutter/repository.py
+++ b/cookiecutter/repository.py
@@ -62,7 +62,7 @@ def repository_has_cookiecutter_json(repo_directory):
 
 
 def determine_repo_dir(template, abbreviations, clone_to_dir, checkout,
-                       no_input, password=None):
+                       no_input, password=None, directory=None):
     """
     Locate the repository directory from a template reference.
 
@@ -78,6 +78,7 @@ def determine_repo_dir(template, abbreviations, clone_to_dir, checkout,
     :param checkout: The branch, tag or commit ID to checkout after clone.
     :param no_input: Prompt the user at command line for manual configuration?
     :param password: The password to use when extracting the repository.
+    :param directory: Directory within repo where cookiecutter.json lives.
     :return: A tuple containing the cookiecutter template directory, and
         a boolean descriving whether that directory should be cleaned up
         after the template has been instantiated.
@@ -111,6 +112,10 @@ def determine_repo_dir(template, abbreviations, clone_to_dir, checkout,
         ]
         cleanup = False
 
+    if directory:
+        repository_candidates = [os.path.join(s, directory)
+                                 for s in repository_candidates]
+
     for repo_candidate in repository_candidates:
         if repository_has_cookiecutter_json(repo_candidate):
             return repo_candidate, cleanup
diff --git a/docs/advanced/directories.rst b/docs/advanced/directories.rst
new file mode 100644
index 0000000..cbec8e4
--- /dev/null
+++ b/docs/advanced/directories.rst
@@ -0,0 +1,23 @@
+.. _directories:
+
+Organizing cookiecutters in directories (1.7+)
+---------------------------------------------------
+
+*New in Cookiecutter 1.7*
+
+Cookiecutter introduces the ability to organize several templates in one
+repository or zip file, separating them by directories. This allows using
+symlinks for general files. Here's an example repository demonstrating
+this feature::
+
+    https://github.com/user/repo-name.git
+        ├── directory1-name/
+        |   ├── {{cookiecutter.project_slug}}/
+        |   └── cookiecutter.json
+        └── directory2-name/
+            ├── {{cookiecutter.project_slug}}/
+            └── cookiecutter.json
+
+To activate one of templates within a subdirectory, use the ``--directory`` option::
+
+    cookiecutter https://github.com/user/repo-name.git --directory="directory1-name"
diff --git a/docs/advanced/index.rst b/docs/advanced/index.rst
index 124e380..b5b311c 100644
--- a/docs/advanced/index.rst
+++ b/docs/advanced/index.rst
@@ -20,3 +20,4 @@ Various advanced topics regarding cookiecutter usage.
    choice_variables
    dict_variables
    template_extensions
+   directories
diff --git a/tests/fake-repo-dir/my-dir/cookiecutter.json b/tests/fake-repo-dir/my-dir/cookiecutter.json
new file mode 100644
index 0000000..e25d080
--- /dev/null
+++ b/tests/fake-repo-dir/my-dir/cookiecutter.json
@@ -0,0 +1,11 @@
+{
+	"full_name": "Audrey Roy",
+	"email": "audreyr@gmail.com",
+	"github_username": "audreyr",
+	"project_name": "Fake Project",
+	"repo_name": "fake-project",
+	"project_short_description": "This is a fake project.",
+	"release_date": "2013-07-28",
+	"year": "2013",
+	"version": "0.1"
+}
\ No newline at end of file
diff --git a/tests/fake-repo-dir/my-dir/{{cookiecutter.repo_name}}/README.rst b/tests/fake-repo-dir/my-dir/{{cookiecutter.repo_name}}/README.rst
new file mode 100644
index 0000000..0abd26e
--- /dev/null
+++ b/tests/fake-repo-dir/my-dir/{{cookiecutter.repo_name}}/README.rst
@@ -0,0 +1,7 @@
+============
+Fake Project
+============
+
+Project name: **{{ cookiecutter.project_name }}**
+
+Blah!!!!
diff --git a/tests/repository/test_determine_repo_dir_finds_subdirectories.py b/tests/repository/test_determine_repo_dir_finds_subdirectories.py
new file mode 100644
index 0000000..f05020b
--- /dev/null
+++ b/tests/repository/test_determine_repo_dir_finds_subdirectories.py
@@ -0,0 +1,73 @@
+# -*- coding: utf-8 -*-
+import io
+import os
+import pytest
+
+from cookiecutter import repository, exceptions
+
+
+@pytest.fixture
+def template():
+    return 'cookiecutter-pytest-plugin'
+
+
+@pytest.fixture
+def cloned_cookiecutter_path(user_config_data, template):
+    cookiecutters_dir = user_config_data['cookiecutters_dir']
+
+    cloned_template_path = os.path.join(cookiecutters_dir, template)
+    if not os.path.exists(cloned_template_path):
+        os.mkdir(cloned_template_path)  # might exist from other tests.
+
+    subdir_template_path = os.path.join(cloned_template_path, 'my-dir')
+    if not os.path.exists(subdir_template_path):
+        os.mkdir(subdir_template_path)
+    io.open(os.path.join(subdir_template_path, 'cookiecutter.json'), 'w')
+
+    return subdir_template_path
+
+
+def test_should_find_existing_cookiecutter(
+        template, user_config_data, cloned_cookiecutter_path):
+
+    project_dir, cleanup = repository.determine_repo_dir(
+        template,
+        abbreviations={},
+        clone_to_dir=user_config_data['cookiecutters_dir'],
+        checkout=None,
+        no_input=True,
+        directory='my-dir',
+    )
+
+    assert cloned_cookiecutter_path == project_dir
+    assert not cleanup
+
+
+def test_local_repo_typo(template, user_config_data, cloned_cookiecutter_path):
+    """An unknown local repository should raise a `RepositoryNotFound`
+    exception.
+    """
+    with pytest.raises(exceptions.RepositoryNotFound) as err:
+        repository.determine_repo_dir(
+            template,
+            abbreviations={},
+            clone_to_dir=user_config_data['cookiecutters_dir'],
+            checkout=None,
+            no_input=True,
+            directory='wrong-dir',
+        )
+
+    wrong_full_cookiecutter_path = os.path.join(
+        os.path.dirname(cloned_cookiecutter_path),
+        'wrong-dir'
+    )
+    assert str(err.value) == (
+        'A valid repository for "{}" could not be found in the following '
+        'locations:\n{}'.format(
+            template,
+            '\n'.join([
+                os.path.join(template, 'wrong-dir'),
+                wrong_full_cookiecutter_path
+            ]),
+        )
+    )
diff --git a/tests/test_cli.py b/tests/test_cli.py
index ab5a3ae..7c5c8cb 100644
--- a/tests/test_cli.py
+++ b/tests/test_cli.py
@@ -97,7 +97,8 @@ def test_cli_replay(mocker, cli_runner):
         config_file=None,
         default_config=False,
         extra_context=None,
-        password=None
+        password=None,
+        directory=None,
     )
 
 
@@ -131,6 +132,7 @@ def test_cli_exit_on_noinput_and_replay(mocker, cli_runner):
         default_config=False,
         extra_context=None,
         password=None,
+        directory=None,
     )
 
 
@@ -163,6 +165,7 @@ def test_run_cookiecutter_on_overwrite_if_exists_and_replay(
         default_config=False,
         extra_context=None,
         password=None,
+        directory=None,
     )
 
 
@@ -223,6 +226,7 @@ def test_cli_output_dir(mocker, cli_runner, output_dir_flag, output_dir):
         default_config=False,
         extra_context=None,
         password=None,
+        directory=None,
     )
 
 
@@ -262,6 +266,7 @@ def test_user_config(mocker, cli_runner, user_config_path):
         default_config=False,
         extra_context=None,
         password=None,
+        directory=None,
     )
 
 
@@ -290,6 +295,7 @@ def test_default_user_config_overwrite(mocker, cli_runner, user_config_path):
         default_config=True,
         extra_context=None,
         password=None,
+        directory=None,
     )
 
 
@@ -313,6 +319,7 @@ def test_default_user_config(mocker, cli_runner):
         default_config=True,
         extra_context=None,
         password=None,
+        directory=None,
     )
 
 
@@ -442,3 +449,17 @@ def test_debug_file_verbose(cli_runner, debug_file):
     )
     assert context_log in debug_file.readlines(cr=False)
     assert context_log in result.output
+
+
+@pytest.mark.usefixtures('remove_fake_project_dir')
+def test_directory_repo(cli_runner):
+    result = cli_runner(
+        'tests/fake-repo-dir/',
+        '--no-input',
+        '-v',
+        '--directory=my-dir',
+    )
+    assert result.exit_code == 0
+    assert os.path.isdir('fake-project')
+    with open(os.path.join('fake-project', 'README.rst')) as f:
+        assert 'Project name: **Fake Project**' in f.read()
