commit 5d227278d0875617707fc82725577fddca00345d
Author: Audrey Roy <audreyr@gmail.com>
Date:   Wed Aug 21 12:15:14 2013 +0200

    Add test for generate.generate_file(). (#37)

diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 821501f..66b9143 100755
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -52,6 +52,47 @@ def generate_context(config_file='cookiecutter.json'):
     return context
 
 
+def generate_file(infile, context, env):
+    """
+    1. Render the contents of infile.
+    2. Render the filename of infile as the name of outfile.
+    3. Write the rendered infile to outfile.
+    :param infile: Input file to generate the file from.
+    """
+    logging.debug("Generating file {0}".format(infile))
+
+    # Render the path to the output file (but don't include the filename)
+    outdir_tmpl = Template(os.path.dirname(os.path.abspath(infile)))
+    outdir = outdir_tmpl.render(**context)
+    fname = os.path.basename(os.path.abspath(infile))  # input/output filename
+    # Write it to the corresponding place in output_dir
+    outfile = os.path.join(outdir, fname)
+    logging.debug("outfile is {0}".format(outfile))
+
+    # Just copy over binary files. Don't render.
+    logging.debug("Check {0} to see if it's a binary".format(infile))
+    if is_binary(infile):
+        logging.debug("Copying binary {0} to {1} without rendering"
+                      .format(infile, outfile))
+        shutil.copyfile(infile, outfile)
+
+    else:
+        # Force fwd slashes on Windows for get_template
+        # This is a by-design Jinja issue
+        infile_fwd_slashes = infile.replace(os.path.sep, '/')
+
+        # Render the file
+        tmpl = env.get_template(infile_fwd_slashes)
+        rendered_file = tmpl.render(**context)
+
+        # Render the output filename before writing
+        name_tmpl = Template(outfile)
+        rendered_name = name_tmpl.render(**context)
+        logging.debug("Writing {0}".format(rendered_name))
+
+        with unicode_open(rendered_name, 'w') as fh:
+            fh.write(rendered_file)
+
 def generate_files(template_dir, context=None):
     """
     Renders the templates and saves them to files.
@@ -91,36 +132,4 @@ def generate_files(template_dir, context=None):
         for f in files:
             logging.debug("f is {0}".format(f))
             infile = os.path.join(root, f)
-            logging.debug("infile is {0}".format(infile))
-
-            # Render the path to the output file (but don't include the filename)
-            outdir_tmpl = Template(os.path.dirname(os.path.abspath(infile)))
-            outdir = outdir_tmpl.render(**context)
-            fname = os.path.basename(os.path.abspath(infile))  # input/output filename
-            # Write it to the corresponding place in output_dir
-            outfile = os.path.join(outdir, fname)
-            logging.debug("outfile is {0}".format(outfile))
-
-            # Just copy over binary files. Don't render.
-            logging.debug("Check {0} to see if it's a binary".format(infile))
-            if is_binary(infile):
-                logging.debug("Copying binary {0} to {1} without rendering"
-                              .format(infile, outfile))
-                shutil.copyfile(infile, outfile)
-
-            else:
-                # Force fwd slashes on Windows for get_template
-                # This is a by-design Jinja issue
-                infile_fwd_slashes = infile.replace(os.path.sep, '/')
-
-                # Render the file
-                tmpl = env.get_template(infile_fwd_slashes)
-                rendered_file = tmpl.render(**context)
-
-                # Render the output filename before writing
-                name_tmpl = Template(outfile)
-                rendered_name = name_tmpl.render(**context)
-                logging.debug("Writing {0}".format(rendered_name))
-
-                with unicode_open(rendered_name, 'w') as fh:
-                    fh.write(rendered_file)
+            generate_file(infile, context, env)
diff --git a/tests/files/{{generate_file}}.txt b/tests/files/{{generate_file}}.txt
new file mode 100644
index 0000000..e2b5167
--- /dev/null
+++ b/tests/files/{{generate_file}}.txt
@@ -0,0 +1 @@
+Testing {{ generate_file }}
\ No newline at end of file
diff --git a/tests/test_generate.py b/tests/test_generate.py
index 1520b83..1dc2738 100755
--- a/tests/test_generate.py
+++ b/tests/test_generate.py
@@ -27,6 +27,20 @@ logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.DEBUG)
 
 class TestGenerate(unittest.TestCase):
 
+    def test_generate_file(self):
+        env = Environment()
+        env.loader = FileSystemLoader('.')
+        infile = 'tests/files/{{generate_file}}.txt'
+        generate.generate_file(
+            infile=infile,
+            context={'generate_file': 'cheese'},
+            env=env
+        )
+        self.assertTrue(os.path.isfile('tests/files/cheese.txt'))
+        with open('tests/files/cheese.txt', 'rt') as f:
+             generated_text = f.read()
+             self.assertEqual(generated_text, 'Testing cheese')
+    
     def test_generate_files_bad(self):
         self.assertRaises(
             exceptions.NonTemplatedInputDirException,
@@ -104,6 +118,9 @@ It is 2014."""
             shutil.rmtree('tests/inputgreen')
         if os.path.exists('tests/inputbinary_files'):
             shutil.rmtree('tests/inputbinary_files')
+        if os.path.exists('tests/files/cheese.txt'):
+            os.remove('tests/files/cheese.txt')
+
 
 if __name__ == '__main__':
     unittest.main()
