commit 4441e29ef99a928df23e1bb41937816a0d8b3da2
Author: Raphael Pierzina <raphael@hackebrot.de>
Date:   Sat Nov 26 02:11:49 2016 +0000

    Rewrite tests for updated read_user_dict

diff --git a/tests/test_read_user_dict.py b/tests/test_read_user_dict.py
index b2c35aa..fabd82f 100644
--- a/tests/test_read_user_dict.py
+++ b/tests/test_read_user_dict.py
@@ -10,60 +10,51 @@ from __future__ import unicode_literals
 import click
 import pytest
 
-from cookiecutter.prompt import read_user_dict
-
-
-def test_use_default_dict(mocker):
-    prompt = mocker.patch('click.prompt')
-    prompt.return_value = 'default'
-
-    VARIABLE = 'var'
-    DEFAULT = {"key": 1}
-
-    assert read_user_dict(VARIABLE, DEFAULT) == {'key': 1}
-
-    click.prompt.assert_called_once_with(VARIABLE, default='default')
-
-
-def test_empty_input_dict(mocker):
-    prompt = mocker.patch('click.prompt')
-    prompt.return_value = '{}'
-
-    VARIABLE = 'var'
-    DEFAULT = {"key": 1}
+from cookiecutter.prompt import (
+    create_value_proc,
+    read_user_dict,
+)
+
+
+@pytest.fixture
+def value_proc():
+    return create_value_proc(
+        'default123',
+        {
+            'key': 1,
+        },
+    )
 
-    assert read_user_dict(VARIABLE, DEFAULT) == {}
 
-    click.prompt.assert_called_once_with(VARIABLE, default='default')
+def test_value_proc_default_display(value_proc):
+    assert value_proc('default123') == {'key': 1}
 
 
-def test_use_empty_default_dict(mocker):
-    prompt = mocker.patch('click.prompt')
-    prompt.return_value = 'default'
+def test_value_proc_invalid_json(value_proc):
+    with pytest.raises(click.UsageError) as exc_info:
+        value_proc('nope]')
 
-    VARIABLE = 'var'
-    DEFAULT = {}
+    assert str(exc_info.value) == 'Unable to decode to JSON.'
 
-    assert read_user_dict(VARIABLE, DEFAULT) == {}
 
-    click.prompt.assert_called_once_with(VARIABLE, default='default')
+def test_value_proc_non_dict(value_proc):
+    with pytest.raises(click.UsageError) as exc_info:
+        value_proc('[1, 2]')
 
+    assert str(exc_info.value) == 'Requires JSON dict.'
 
-def test_shallow_dict(mocker):
-    prompt = mocker.patch('click.prompt')
-    prompt.return_value = '{"key": 2}'
 
-    VARIABLE = 'var'
-    DEFAULT = {}
+def test_value_proc_valid_json(value_proc):
+    user_value = '{"name": "foobar", "bla": ["a", 1, "b", false]}'
 
-    assert read_user_dict(VARIABLE, DEFAULT) == {'key': 2}
-
-    click.prompt.assert_called_once_with(VARIABLE, default='default')
+    assert value_proc(user_value) == {
+        'name': 'foobar',
+        'bla': ['a', 1, 'b', False],
+    }
 
 
-def test_deep_dict(mocker):
-    prompt = mocker.patch('click.prompt')
-    prompt.return_value = '''{
+def test_value_proc_deep_dict(value_proc):
+    user_value = '''{
         "key": "value",
         "integer_key": 37,
         "dict_key": {
@@ -82,10 +73,7 @@ def test_deep_dict(mocker):
         ]
     }'''
 
-    VARIABLE = 'var'
-    DEFAULT = {}
-
-    assert read_user_dict(VARIABLE, DEFAULT) == {
+    assert value_proc(user_value) == {
         "key": "value",
         "integer_key": 37,
         "dict_key": {
@@ -104,17 +92,38 @@ def test_deep_dict(mocker):
         ]
     }
 
-    click.prompt.assert_called_once_with(VARIABLE, default='default')
 
+def test_should_raise_type_error(mocker):
+    prompt = mocker.patch('click.prompt')
 
-def test_raise_if_value_is_not_dict():
     with pytest.raises(TypeError):
-        read_user_dict('foo', 'NOT A LIST')
+        read_user_dict('name', 'russell')
+
+    assert not prompt.called
 
 
-def test_raise_if_value_not_valid_json(mocker):
+def test_should_call_prompt_with_value_proc(mocker):
+    """Test to make sure that create_value_proc is actually being used
+    to generate a processer for the user input."""
     prompt = mocker.patch('click.prompt')
-    prompt.return_value = '{'
 
-    with pytest.raises(ValueError):
-        read_user_dict('foo', {})
+    def process_json(user_value):
+        return user_value
+
+    create_value_proc = mocker.patch(
+        'cookiecutter.prompt.create_value_proc',
+        return_value=process_json,
+    )
+
+    read_user_dict('name', {'project_slug': 'pytest-plugin'})
+
+    assert create_value_proc.call_args == mocker.call(
+        'default',
+        {'project_slug': 'pytest-plugin'},
+    )
+    assert prompt.call_args == mocker.call(
+        'name',
+        type=click.STRING,
+        default='default',
+        value_proc=process_json,
+    )
