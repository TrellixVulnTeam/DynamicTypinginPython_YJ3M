commit 6602bf231e5b01ad890235c253cfbd7431c4858f
Author: Raphael Pierzina <raphael@hackebrot.de>
Date:   Mon Dec 21 21:59:44 2015 +0100

    Refactor StrictEnvironment to use a Mixin for handling extensions

diff --git a/cookiecutter/environment.py b/cookiecutter/environment.py
index fb431e0..996fbd5 100644
--- a/cookiecutter/environment.py
+++ b/cookiecutter/environment.py
@@ -5,18 +5,30 @@ from jinja2 import Environment, StrictUndefined
 from .exceptions import UnknownExtension
 
 
-class StrictEnvironment(Environment):
-    """Jinja2 environment that raises an error when it hits a variable
-    which is not defined in the context used to render a template.
-    """
-    def __init__(self, context, **kwargs):
-        extensions = context.get('_extensions', [])
+class ExtensionLoaderMixin(object):
+    """Mixin that provides a sane way of loading extensions that are specified
+    in a given context.
 
+    The context is being extracted from the keyword arguments before calling
+    the next parent class in line of the child.
+    """
+    def __init__(self, **kwargs):
+        context = kwargs.pop('context', {})
         try:
-            super(StrictEnvironment, self).__init__(
-                undefined=StrictUndefined,
-                extensions=extensions,
+            super(ExtensionLoaderMixin, self).__init__(
+                extensions=context.get('_extensions', []),
                 **kwargs
             )
         except ImportError as err:
             raise UnknownExtension('Unable to load extension: {}'.format(err))
+
+
+class StrictEnvironment(ExtensionLoaderMixin, Environment):
+    """Jinja2 environment that raises an error when it hits a variable
+    which is not defined in the context used to render a template.
+    """
+    def __init__(self, **kwargs):
+        super(StrictEnvironment, self).__init__(
+            undefined=StrictUndefined,
+            **kwargs
+        )
diff --git a/tests/test_environment.py b/tests/test_environment.py
index 0df7458..62dcb26 100644
--- a/tests/test_environment.py
+++ b/tests/test_environment.py
@@ -12,6 +12,6 @@ def test_env_should_raise_for_unknown_extension():
     }
 
     with pytest.raises(UnknownExtension) as err:
-        StrictEnvironment(context, keep_trailing_newline=True)
+        StrictEnvironment(context=context, keep_trailing_newline=True)
 
     assert 'Unable to load extension: No module named foobar' in str(err.value)
