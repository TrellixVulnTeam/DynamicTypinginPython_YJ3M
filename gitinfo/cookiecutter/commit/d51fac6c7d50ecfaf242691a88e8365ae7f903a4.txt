commit d51fac6c7d50ecfaf242691a88e8365ae7f903a4
Author: Audrey Roy <audreyr@gmail.com>
Date:   Sat Aug 10 15:22:22 2013 +0200

    Fix iteritems to work on Python 2 & 3.

diff --git a/cookiecutter/prompt.py b/cookiecutter/prompt.py
index 386673a..5b39e70 100755
--- a/cookiecutter/prompt.py
+++ b/cookiecutter/prompt.py
@@ -12,9 +12,10 @@ import sys
 
 PY3 = sys.version > '3'
 if PY3:
-    pass
+    iteritems = lambda d: iter(d.items())
 else:
     input = raw_input
+    iteritems = lambda d: d.iteritems()
 
 def prompt_for_config(context):
     """
@@ -23,7 +24,7 @@ def prompt_for_config(context):
     """
     cookiecutter_dict = {}
     
-    for key, val in context['cookiecutter'].iteritems():
+    for key, val in iteritems(context['cookiecutter']):
         prompt = "{0} (default is \"{1}\")? ".format(key, val)
         new_val = input(prompt)
         new_val = new_val.strip()
diff --git a/tests/test_prompt.py b/tests/test_prompt.py
index 6f043df..9a9eac5 100755
--- a/tests/test_prompt.py
+++ b/tests/test_prompt.py
@@ -23,16 +23,19 @@ else:
 
 if sys.version_info[:2] < (2, 7):
     import unittest2 as unittest
+    from ordereddict import OrderedDict
 else:
     import unittest
+    from collections import OrderedDict
 
-# class TestPrompt(unittest.TestCase):
-#     def test_prompt_for_config(self):
-#         context = {"cookiecutter": {"full_name": "Your Name",
-#                                     "email": "you@example.com"}}
-
-        # TODO: figure out how to mock input with pexpect or something
-        # prompt.prompt_for_config(context)
+@unittest.skipUnless(condition=PY3, reason='Only works on PY3 as of now.')
+class TestPrompt(unittest.TestCase):
+    
+    @patch(input_str, lambda x: 'Audrey Roy')
+    def test_prompt_for_config_simple(self):
+        context = {"cookiecutter": {"full_name": "Your Name"}}
+        cookiecutter_dict = prompt.prompt_for_config(context)
+        self.assertEqual(cookiecutter_dict, {"full_name": "Audrey Roy"})
 
 @unittest.skipUnless(condition=PY3, reason='Only works on PY3 as of now.')
 class TestQueryAnswers(unittest.TestCase):
