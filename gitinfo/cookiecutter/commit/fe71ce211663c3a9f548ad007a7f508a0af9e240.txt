commit fe71ce211663c3a9f548ad007a7f508a0af9e240
Author: Audrey Roy <audreyr@gmail.com>
Date:   Sat Jul 27 10:08:58 2013 +0200

    Support git repo as input_dir argument.

diff --git a/cookiecutter/exceptions.py b/cookiecutter/exceptions.py
index f6d3cec..6a30ffe 100755
--- a/cookiecutter/exceptions.py
+++ b/cookiecutter/exceptions.py
@@ -22,3 +22,9 @@ class NonTemplatedInputDirException(CookiecutterException):
     The name of the input directory should always contain a string that is
     rendered to something else, so that input_dir != output_dir.
     """
+
+class UnknownTemplateDirException(CookiecutterException):
+    """
+    Raised when Cookiecutter cannot determine which directory is the project
+    template, e.g. more than one dir appears to be a template dir.
+    """
diff --git a/cookiecutter/find.py b/cookiecutter/find.py
new file mode 100755
index 0000000..7594c5d
--- /dev/null
+++ b/cookiecutter/find.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+
+"""
+cookiecutter.find
+-----------------
+
+Functions for finding Cookiecutter templates and other components.
+"""
+
+import os
+
+
+def find_template(repo_dir):
+    """
+    Determines which child directory of `repo_dir` is the project template.
+    
+    :param repo_dir: Local directory of newly cloned repo.
+    """
+
+    contents_set = set(os.listdir(repo_dir))
+    exclude_set = set(['.DS_Store', '.git', '.gitignore', 'README.rst', 'json'])
+    
+    # Subtract set of excludes from contents.
+    contents_set -= exclude_set
+
+    if len(contents_set) == 1:
+        return contents_set.pop()
+    return False
diff --git a/cookiecutter/main.py b/cookiecutter/main.py
index 2bd5b34..9f61d72 100755
--- a/cookiecutter/main.py
+++ b/cookiecutter/main.py
@@ -13,7 +13,9 @@ library rather than a script.
 
 import argparse
 
+from .find import find_template
 from .generate import generate_context, generate_files
+from .vcs import git_clone
 
 
 def main():
@@ -28,10 +30,18 @@ def main():
         help='Cookiecutter project template dir, e.g. {{project.repo_name}}/'
     )
     args = parser.parse_args()
-
+    
+    # If it's a git repo, clone and prompt
+    if args.input_dir.endswith('.git'):
+        repo_dir = git_clone(args.input_dir)
+        project_template = find_template(repo_dir)
+    else:
+        project_template = args.input_dir
+
+    # Create project from local context and project template.
     context = generate_context()
     generate_files(
-        input_dir=args.input_dir,
+        input_dir=project_template,
         context=context
     )
 
diff --git a/cookiecutter/vcs.py b/cookiecutter/vcs.py
new file mode 100755
index 0000000..275f59c
--- /dev/null
+++ b/cookiecutter/vcs.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+
+"""
+cookiecutter.vcs
+----------------
+
+Helper functions for working with version control systems.
+"""
+
+import os
+
+
+def git_clone(repo):
+    """
+    Clone a git repo to the current directory.
+    
+    :param repo: Git repo URL ending with .git.
+    """
+
+    os.system('git clone {0}'.format(repo))
+    
+    # Return repo dir
+    tail = os.path.split(repo)[1]
+    repo_dir = tail.rsplit('.git')[0]
+    return repo_dir
diff --git a/tests/test_find.py b/tests/test_find.py
new file mode 100755
index 0000000..896fe07
--- /dev/null
+++ b/tests/test_find.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+
+"""
+test_find
+------------
+
+Tests for `cookiecutter.find` module.
+"""
+
+import os
+import shutil
+import unittest
+
+from cookiecutter import find
+
+
+class TestUtils(unittest.TestCase):
+
+    def test_find_template(self):
+        os.system('git clone https://github.com/audreyr/cookiecutter-pypackage.git')
+        template = find.find_template(repo_dir='cookiecutter-pypackage')
+        self.assertEqual(template, '{{project.repo_name}}')
+        self.assertNotEqual(template, '{{project.repo_name }}')
+        self.assertNotEqual(template, '{{ project.repo_name }}')
+        shutil.rmtree('cookiecutter-pypackage')
+
+if __name__ == '__main__':
+    unittest.main()
