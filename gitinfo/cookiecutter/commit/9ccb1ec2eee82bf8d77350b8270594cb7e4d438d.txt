commit 9ccb1ec2eee82bf8d77350b8270594cb7e4d438d
Author: Raphael Pierzina <raphael@hackebrot.de>
Date:   Wed May 27 00:51:56 2015 +0200

    Implement a test for render_variable

diff --git a/cookiecutter/prompt.py b/cookiecutter/prompt.py
index ea47220..2127141 100755
--- a/cookiecutter/prompt.py
+++ b/cookiecutter/prompt.py
@@ -80,10 +80,12 @@ def read_user_choice(var_name, options):
     return choice_map[user_choice]
 
 
-def _render_variable(env, raw, cookiecutter_dict):
+def render_variable(env, raw, cookiecutter_dict):
     if not is_string(raw):
         raw = str(raw)
-    return env.from_string(raw).render(cookiecutter=cookiecutter_dict)
+    template = env.from_string(raw)
+    rendered_template = template.render(cookiecutter=cookiecutter_dict)
+    return rendered_template
 
 
 def prompt_choice_for_config(cookiecutter_dict, env, key, options, no_input):
@@ -91,7 +93,7 @@ def prompt_choice_for_config(cookiecutter_dict, env, key, options, no_input):
     possible choices is rendered beforehand.
     """
     rendered_options = [
-        _render_variable(env, raw, cookiecutter_dict) for raw in options
+        render_variable(env, raw, cookiecutter_dict) for raw in options
     ]
 
     if no_input:
@@ -121,7 +123,7 @@ def prompt_for_config(context, no_input=False):
             )
         else:
             # We are dealing with a regular variable
-            val = _render_variable(env, raw, cookiecutter_dict)
+            val = render_variable(env, raw, cookiecutter_dict)
 
             if not no_input:
                 val = read_user_variable(key, val)
diff --git a/tests/test_prompt.py b/tests/test_prompt.py
index 5c5334f..f26c232 100644
--- a/tests/test_prompt.py
+++ b/tests/test_prompt.py
@@ -13,10 +13,33 @@ import platform
 
 import pytest
 
-from cookiecutter import prompt
+from cookiecutter import prompt, compat
 from jinja2.environment import Environment
 
 
+@pytest.mark.parametrize('raw_var, rendered_var', [
+    (1, '1'),
+    (True, 'True'),
+    ('foo', 'foo'),
+    ('{{cookiecutter.project}}', 'foobar')
+])
+def test_convert_to_str(mocker, raw_var, rendered_var):
+    env = Environment()
+    from_string = mocker.patch(
+        'cookiecutter.prompt.Environment.from_string',
+        wraps=env.from_string
+    )
+    context = {'project': 'foobar'}
+
+    result = prompt.render_variable(env, raw_var, context)
+    assert result == rendered_var
+
+    # Make sure that non str variables are conerted beforehand
+    if not compat.is_string(raw_var):
+        raw_var = str(raw_var)
+    from_string.assert_called_once_with(raw_var)
+
+
 @pytest.fixture(autouse=True)
 def patch_readline_on_win(monkeypatch):
     if 'windows' in platform.platform().lower():
