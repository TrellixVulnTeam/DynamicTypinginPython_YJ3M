commit 15f6f5398e9979f283022dad2d6eae1bc2983d91
Author: Andrey Shpak <insspb@users.noreply.github.com>
Date:   Sat Feb 1 13:04:53 2020 +0300

    Revert black implementation (#1299)

diff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml
index ae1fe8e..4e4763b 100644
--- a/.pre-commit-config.yaml
+++ b/.pre-commit-config.yaml
@@ -1,11 +1,5 @@
 ---
 repos:
-  - repo: https://github.com/psf/black
-    rev: 19.10b0
-    hooks:
-      - id: black
-        exclude: ^tests\/hooks-abort-render\/hooks
-        language_version: python3.7
   - repo: https://github.com/pre-commit/pre-commit-hooks
     rev: v2.4.0
     hooks:
diff --git a/cookiecutter/__init__.py b/cookiecutter/__init__.py
index 31dba7d..3cc931c 100644
--- a/cookiecutter/__init__.py
+++ b/cookiecutter/__init__.py
@@ -2,4 +2,4 @@
 
 """Main package for Cookiecutter."""
 
-__version__ = "1.7.0"
+__version__ = '1.7.0'
diff --git a/cookiecutter/cli.py b/cookiecutter/cli.py
index 3d4f365..a9b10e3 100644
--- a/cookiecutter/cli.py
+++ b/cookiecutter/cli.py
@@ -20,7 +20,7 @@ from cookiecutter.exceptions import (
     UnknownExtension,
     InvalidZipRepository,
     RepositoryNotFound,
-    RepositoryCloneFailed,
+    RepositoryCloneFailed
 )
 
 
@@ -28,92 +28,75 @@ def version_msg():
     """Return the Cookiecutter version, location and Python powering it."""
     python_version = sys.version[:3]
     location = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
-    message = u"Cookiecutter %(version)s from {} (Python {})"
+    message = u'Cookiecutter %(version)s from {} (Python {})'
     return message.format(location, python_version)
 
 
 def validate_extra_context(ctx, param, value):
     """Validate extra context."""
     for s in value:
-        if "=" not in s:
+        if '=' not in s:
             raise click.BadParameter(
-                "EXTRA_CONTEXT should contain items of the form key=value; "
+                'EXTRA_CONTEXT should contain items of the form key=value; '
                 "'{}' doesn't match that form".format(s)
             )
 
     # Convert tuple -- e.g.: (u'program_name=foobar', u'startsecs=66')
     # to dict -- e.g.: {'program_name': 'foobar', 'startsecs': '66'}
-    return collections.OrderedDict(s.split("=", 1) for s in value) or None
+    return collections.OrderedDict(s.split('=', 1) for s in value) or None
 
 
-@click.command(context_settings=dict(help_option_names=[u"-h", u"--help"]))
-@click.version_option(__version__, u"-V", u"--version", message=version_msg())
-@click.argument(u"template")
-@click.argument(u"extra_context", nargs=-1, callback=validate_extra_context)
+@click.command(context_settings=dict(help_option_names=[u'-h', u'--help']))
+@click.version_option(__version__, u'-V', u'--version', message=version_msg())
+@click.argument(u'template')
+@click.argument(u'extra_context', nargs=-1, callback=validate_extra_context)
 @click.option(
-    u"--no-input",
-    is_flag=True,
-    help=u"Do not prompt for parameters and only use cookiecutter.json "
-    u"file content",
+    u'--no-input', is_flag=True,
+    help=u'Do not prompt for parameters and only use cookiecutter.json '
+         u'file content',
 )
 @click.option(
-    u"-c", u"--checkout", help=u"branch, tag or commit to checkout after git clone",
+    u'-c', u'--checkout',
+    help=u'branch, tag or commit to checkout after git clone',
 )
 @click.option(
-    u"--directory",
-    help=u"Directory within repo that holds cookiecutter.json file "
-    u"for advanced repositories with multi templates in it",
+    u'--directory',
+    help=u'Directory within repo that holds cookiecutter.json file '
+         u'for advanced repositories with multi templates in it',
 )
 @click.option(
-    "-v", "--verbose", is_flag=True, help="Print debug information", default=False,
+    '-v', '--verbose',
+    is_flag=True, help='Print debug information', default=False
 )
 @click.option(
-    u"--replay",
-    is_flag=True,
-    help=u"Do not prompt for parameters and only use information entered "
-    u"previously",
+    u'--replay', is_flag=True,
+    help=u'Do not prompt for parameters and only use information entered '
+         u'previously',
 )
 @click.option(
-    u"-f",
-    u"--overwrite-if-exists",
-    is_flag=True,
-    help=u"Overwrite the contents of the output directory if it already exists",
+    u'-f', u'--overwrite-if-exists', is_flag=True,
+    help=u'Overwrite the contents of the output directory if it already exists'
 )
 @click.option(
-    u"-o",
-    u"--output-dir",
-    default=".",
-    type=click.Path(),
-    help=u"Where to output the generated project dir into",
+    u'-o', u'--output-dir', default='.', type=click.Path(),
+    help=u'Where to output the generated project dir into'
 )
 @click.option(
-    u"--config-file", type=click.Path(), default=None, help=u"User configuration file",
+    u'--config-file', type=click.Path(), default=None,
+    help=u'User configuration file'
 )
 @click.option(
-    u"--default-config",
-    is_flag=True,
-    help=u"Do not load a config file. Use the defaults instead",
+    u'--default-config', is_flag=True,
+    help=u'Do not load a config file. Use the defaults instead'
 )
 @click.option(
-    u"--debug-file",
-    type=click.Path(),
-    default=None,
-    help=u"File to be used as a stream for DEBUG logging",
+    u'--debug-file', type=click.Path(), default=None,
+    help=u'File to be used as a stream for DEBUG logging',
 )
 def main(
-    template,
-    extra_context,
-    no_input,
-    checkout,
-    verbose,
-    replay,
-    overwrite_if_exists,
-    output_dir,
-    config_file,
-    default_config,
-    debug_file,
-    directory,
-):
+        template, extra_context, no_input, checkout, verbose,
+        replay, overwrite_if_exists, output_dir, config_file,
+        default_config, debug_file, directory):
     """Create a project from a Cookiecutter project template (TEMPLATE).
 
     Cookiecutter is free and open source software, developed and managed by
@@ -122,45 +105,46 @@ def main(
     """
     # If you _need_ to support a local template in a directory
     # called 'help', use a qualified path to the directory.
-    if template == u"help":
+    if template == u'help':
         click.echo(click.get_current_context().get_help())
         sys.exit(0)
 
     configure_logger(
-        stream_level="DEBUG" if verbose else "INFO", debug_file=debug_file,
+        stream_level='DEBUG' if verbose else 'INFO',
+        debug_file=debug_file,
     )
 
     try:
         cookiecutter(
-            template,
-            checkout,
-            no_input,
+            template, checkout, no_input,
             extra_context=extra_context,
             replay=replay,
             overwrite_if_exists=overwrite_if_exists,
             output_dir=output_dir,
             config_file=config_file,
             default_config=default_config,
-            password=os.environ.get("COOKIECUTTER_REPO_PASSWORD"),
-            directory=directory,
+            password=os.environ.get('COOKIECUTTER_REPO_PASSWORD'),
+            directory=directory
         )
-    except (
-        OutputDirExistsException,
-        InvalidModeException,
-        FailedHookException,
-        UnknownExtension,
-        InvalidZipRepository,
-        RepositoryNotFound,
-        RepositoryCloneFailed,
-    ) as e:
+    except (OutputDirExistsException,
+            InvalidModeException,
+            FailedHookException,
+            UnknownExtension,
+            InvalidZipRepository,
+            RepositoryNotFound,
+            RepositoryCloneFailed) as e:
         click.echo(e)
         sys.exit(1)
     except UndefinedVariableInTemplate as undefined_err:
-        click.echo("{}".format(undefined_err.message))
-        click.echo("Error message: {}".format(undefined_err.error.message))
+        click.echo('{}'.format(undefined_err.message))
+        click.echo('Error message: {}'.format(undefined_err.error.message))
 
-        context_str = json.dumps(undefined_err.context, indent=4, sort_keys=True)
-        click.echo("Context: {}".format(context_str))
+        context_str = json.dumps(
+            undefined_err.context,
+            indent=4,
+            sort_keys=True
+        )
+        click.echo('Context: {}'.format(context_str))
         sys.exit(1)
 
 
diff --git a/cookiecutter/config.py b/cookiecutter/config.py
index fc7e045..27598aa 100644
--- a/cookiecutter/config.py
+++ b/cookiecutter/config.py
@@ -17,19 +17,19 @@ from cookiecutter.exceptions import InvalidConfiguration
 
 logger = logging.getLogger(__name__)
 
-USER_CONFIG_PATH = os.path.expanduser("~/.cookiecutterrc")
+USER_CONFIG_PATH = os.path.expanduser('~/.cookiecutterrc')
 
 BUILTIN_ABBREVIATIONS = {
-    "gh": "https://github.com/{0}.git",
-    "gl": "https://gitlab.com/{0}.git",
-    "bb": "https://bitbucket.org/{0}",
+    'gh': 'https://github.com/{0}.git',
+    'gl': 'https://gitlab.com/{0}.git',
+    'bb': 'https://bitbucket.org/{0}',
 }
 
 DEFAULT_CONFIG = {
-    "cookiecutters_dir": os.path.expanduser("~/.cookiecutters/"),
-    "replay_dir": os.path.expanduser("~/.cookiecutter_replay/"),
-    "default_context": collections.OrderedDict([]),
-    "abbreviations": BUILTIN_ABBREVIATIONS,
+    'cookiecutters_dir': os.path.expanduser('~/.cookiecutters/'),
+    'replay_dir': os.path.expanduser('~/.cookiecutter_replay/'),
+    'default_context': collections.OrderedDict([]),
+    'abbreviations': BUILTIN_ABBREVIATIONS,
 }
 
 
@@ -64,22 +64,23 @@ def get_config(config_path):
     if not os.path.exists(config_path):
         raise ConfigDoesNotExistException
 
-    logger.debug("config_path is {0}".format(config_path))
-    with io.open(config_path, encoding="utf-8") as file_handle:
+    logger.debug('config_path is {0}'.format(config_path))
+    with io.open(config_path, encoding='utf-8') as file_handle:
         try:
             yaml_dict = poyo.parse_string(file_handle.read())
         except poyo.exceptions.PoyoException as e:
             raise InvalidConfiguration(
-                "Unable to parse YAML file {}. Error: {}" "".format(config_path, e)
+                'Unable to parse YAML file {}. Error: {}'
+                ''.format(config_path, e)
             )
 
     config_dict = merge_configs(DEFAULT_CONFIG, yaml_dict)
 
-    raw_replay_dir = config_dict["replay_dir"]
-    config_dict["replay_dir"] = _expand_path(raw_replay_dir)
+    raw_replay_dir = config_dict['replay_dir']
+    config_dict['replay_dir'] = _expand_path(raw_replay_dir)
 
-    raw_cookies_dir = config_dict["cookiecutters_dir"]
-    config_dict["cookiecutters_dir"] = _expand_path(raw_cookies_dir)
+    raw_cookies_dir = config_dict['cookiecutters_dir']
+    config_dict['cookiecutters_dir'] = _expand_path(raw_cookies_dir)
 
     return config_dict
 
@@ -110,7 +111,7 @@ def get_user_config(config_file=None, default_config=False):
 
     try:
         # Does the user set up a config environment variable?
-        env_config_file = os.environ["COOKIECUTTER_CONFIG"]
+        env_config_file = os.environ['COOKIECUTTER_CONFIG']
     except KeyError:
         # Load an optional user config if it exists
         # otherwise return the defaults
diff --git a/cookiecutter/environment.py b/cookiecutter/environment.py
index e2e4000..5660c26 100644
--- a/cookiecutter/environment.py
+++ b/cookiecutter/environment.py
@@ -23,19 +23,22 @@ class ExtensionLoaderMixin(object):
         2. Reads extensions set in the cookiecutter.json _extensions key.
         3. Attempts to load the extensions. Provides useful error if fails.
         """
-        context = kwargs.pop("context", {})
+        context = kwargs.pop('context', {})
 
         default_extensions = [
-            "cookiecutter.extensions.JsonifyExtension",
-            "cookiecutter.extensions.RandomStringExtension",
-            "jinja2_time.TimeExtension",
+            'cookiecutter.extensions.JsonifyExtension',
+            'cookiecutter.extensions.RandomStringExtension',
+            'jinja2_time.TimeExtension',
         ]
         extensions = default_extensions + self._read_extensions(context)
 
         try:
-            super(ExtensionLoaderMixin, self).__init__(extensions=extensions, **kwargs)
+            super(ExtensionLoaderMixin, self).__init__(
+                extensions=extensions,
+                **kwargs
+            )
         except ImportError as err:
-            raise UnknownExtension("Unable to load extension: {}".format(err))
+            raise UnknownExtension('Unable to load extension: {}'.format(err))
 
     def _read_extensions(self, context):
         """Return list of extensions as str to be passed on to the Jinja2 env.
@@ -44,7 +47,7 @@ class ExtensionLoaderMixin(object):
         list instead.
         """
         try:
-            extensions = context["cookiecutter"]["_extensions"]
+            extensions = context['cookiecutter']['_extensions']
         except KeyError:
             return []
         else:
@@ -63,4 +66,7 @@ class StrictEnvironment(ExtensionLoaderMixin, Environment):
 
         Also loading extensions defined in cookiecutter.json's _extensions key.
         """
-        super(StrictEnvironment, self).__init__(undefined=StrictUndefined, **kwargs)
+        super(StrictEnvironment, self).__init__(
+            undefined=StrictUndefined,
+            **kwargs
+        )
diff --git a/cookiecutter/exceptions.py b/cookiecutter/exceptions.py
index cd0864f..2f5ca75 100644
--- a/cookiecutter/exceptions.py
+++ b/cookiecutter/exceptions.py
@@ -27,7 +27,6 @@ class UnknownTemplateDirException(CookiecutterException):
     Raised when Cookiecutter cannot determine which directory is the project
     template, e.g. more than one dir appears to be a template dir.
     """
-
     # unused locally
 
 
@@ -38,7 +37,6 @@ class MissingProjectDir(CookiecutterException):
     Raised during cleanup when remove_repo() can't find a generated project
     directory inside of a repo.
     """
-
     # unused locally
 
 
diff --git a/cookiecutter/extensions.py b/cookiecutter/extensions.py
index 989d7e6..40f36d0 100644
--- a/cookiecutter/extensions.py
+++ b/cookiecutter/extensions.py
@@ -4,7 +4,6 @@
 
 import json
 import string
-
 try:
     # Python 3.6 and above
     from secrets import choice
@@ -24,7 +23,7 @@ class JsonifyExtension(Extension):
         def jsonify(obj):
             return json.dumps(obj, sort_keys=True, indent=4)
 
-        environment.filters["jsonify"] = jsonify
+        environment.filters['jsonify'] = jsonify
 
 
 class RandomStringExtension(Extension):
@@ -40,5 +39,4 @@ class RandomStringExtension(Extension):
             else:
                 corpus = string.ascii_letters
             return "".join(choice(corpus) for _ in range(length))
-
         environment.globals.update(random_ascii_string=random_ascii_string)
diff --git a/cookiecutter/find.py b/cookiecutter/find.py
index e9445dd..b12a42a 100644
--- a/cookiecutter/find.py
+++ b/cookiecutter/find.py
@@ -16,19 +16,21 @@ def find_template(repo_dir):
     :param repo_dir: Local directory of newly cloned repo.
     :returns project_template: Relative path to project template.
     """
-    logger.debug("Searching {} for the project template.".format(repo_dir))
+    logger.debug('Searching {} for the project template.'.format(repo_dir))
 
     repo_dir_contents = os.listdir(repo_dir)
 
     project_template = None
     for item in repo_dir_contents:
-        if "cookiecutter" in item and "{{" in item and "}}" in item:
+        if 'cookiecutter' in item and '{{' in item and '}}' in item:
             project_template = item
             break
 
     if project_template:
         project_template = os.path.join(repo_dir, project_template)
-        logger.debug("The project template appears to be {}".format(project_template))
+        logger.debug(
+            'The project template appears to be {}'.format(project_template)
+        )
         return project_template
     else:
         raise NonTemplatedInputDirException
diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index bbd45fb..5fb3997 100644
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -21,7 +21,7 @@ from cookiecutter.exceptions import (
     ContextDecodingException,
     FailedHookException,
     OutputDirExistsException,
-    UndefinedVariableInTemplate,
+    UndefinedVariableInTemplate
 )
 from cookiecutter.find import find_template
 from cookiecutter.hooks import run_hook
@@ -41,7 +41,7 @@ def is_copy_only_path(path, context):
     :param context: cookiecutter context.
     """
     try:
-        for dont_render in context["cookiecutter"]["_copy_without_render"]:
+        for dont_render in context['cookiecutter']['_copy_without_render']:
             if fnmatch.fnmatch(path, dont_render):
                 return True
     except KeyError:
@@ -72,9 +72,8 @@ def apply_overwrites_to_context(context, overwrite_context):
             context[variable] = overwrite
 
 
-def generate_context(
-    context_file="cookiecutter.json", default_context=None, extra_context=None
-):
+def generate_context(context_file='cookiecutter.json', default_context=None,
+                     extra_context=None):
     """Generate the context for a Cookiecutter project template.
 
     Loads the JSON file as a Python object, with key being the JSON filename.
@@ -96,13 +95,12 @@ def generate_context(
         json_exc_message = str(e)
         our_exc_message = (
             'JSON decoding error while loading "{0}".  Decoding'
-            ' error details: "{1}"'.format(full_fpath, json_exc_message)
-        )
+            ' error details: "{1}"'.format(full_fpath, json_exc_message))
         raise ContextDecodingException(our_exc_message)
 
     # Add the Python object to the context dictionary
     file_name = os.path.split(context_file)[1]
-    file_stem = file_name.split(".")[0]
+    file_stem = file_name.split('.')[0]
     context[file_stem] = obj
 
     # Overwrite context variable defaults with the default context from the
@@ -112,7 +110,7 @@ def generate_context(
     if extra_context:
         apply_overwrites_to_context(obj, extra_context)
 
-    logger.debug("Context generated is {}".format(context))
+    logger.debug('Context generated is {}'.format(context))
     return context
 
 
@@ -137,7 +135,7 @@ def generate_file(project_dir, infile, context, env):
     :param context: Dict for populating the cookiecutter's variables.
     :param env: Jinja2 template execution environment.
     """
-    logger.debug("Processing file {}".format(infile))
+    logger.debug('Processing file {}'.format(infile))
 
     # Render the path to the output file (not including the root project dir)
     outfile_tmpl = env.from_string(infile)
@@ -145,22 +143,23 @@ def generate_file(project_dir, infile, context, env):
     outfile = os.path.join(project_dir, outfile_tmpl.render(**context))
     file_name_is_empty = os.path.isdir(outfile)
     if file_name_is_empty:
-        logger.debug("The resulting file name is empty: {0}".format(outfile))
+        logger.debug('The resulting file name is empty: {0}'.format(outfile))
         return
 
-    logger.debug("Created file at {0}".format(outfile))
+    logger.debug('Created file at {0}'.format(outfile))
 
     # Just copy over binary files. Don't render.
     logger.debug("Check {} to see if it's a binary".format(infile))
     if is_binary(infile):
         logger.debug(
-            "Copying binary {} to {} without rendering" "".format(infile, outfile)
+            'Copying binary {} to {} without rendering'
+            ''.format(infile, outfile)
         )
         shutil.copyfile(infile, outfile)
     else:
         # Force fwd slashes on Windows for get_template
         # This is a by-design Jinja issue
-        infile_fwd_slashes = infile.replace(os.path.sep, "/")
+        infile_fwd_slashes = infile.replace(os.path.sep, '/')
 
         # Render the file
         try:
@@ -172,35 +171,37 @@ def generate_file(project_dir, infile, context, env):
             raise
         rendered_file = tmpl.render(**context)
 
-        logger.debug("Writing contents to file {}".format(outfile))
+        logger.debug('Writing contents to file {}'.format(outfile))
 
-        with io.open(outfile, "w", encoding="utf-8") as fh:
+        with io.open(outfile, 'w', encoding='utf-8') as fh:
             fh.write(rendered_file)
 
     # Apply file permissions to output file
     shutil.copymode(infile, outfile)
 
 
-def render_and_create_dir(
-    dirname, context, output_dir, environment, overwrite_if_exists=False
-):
+def render_and_create_dir(dirname, context, output_dir, environment,
+                          overwrite_if_exists=False):
     """Render name of a directory, create the directory, return its path."""
     name_tmpl = environment.from_string(dirname)
     rendered_dirname = name_tmpl.render(**context)
 
-    dir_to_create = os.path.normpath(os.path.join(output_dir, rendered_dirname))
-
-    logger.debug(
-        "Rendered dir {} must exist in output_dir {}".format(dir_to_create, output_dir)
+    dir_to_create = os.path.normpath(
+        os.path.join(output_dir, rendered_dirname)
     )
 
+    logger.debug('Rendered dir {} must exist in output_dir {}'.format(
+        dir_to_create,
+        output_dir
+    ))
+
     output_dir_exists = os.path.exists(dir_to_create)
 
     if output_dir_exists:
         if overwrite_if_exists:
             logger.debug(
-                "Output directory {} already exists,"
-                "overwriting it".format(dir_to_create)
+                'Output directory {} already exists,'
+                'overwriting it'.format(dir_to_create)
             )
         else:
             msg = 'Error: "{}" directory already exists'.format(dir_to_create)
@@ -213,15 +214,14 @@ def render_and_create_dir(
 
 def ensure_dir_is_templated(dirname):
     """Ensure that dirname is a templated directory name."""
-    if "{{" in dirname and "}}" in dirname:
+    if '{{' in dirname and '}}' in dirname:
         return True
     else:
         raise NonTemplatedInputDirException
 
 
-def _run_hook_from_repo_dir(
-    repo_dir, hook_name, project_dir, context, delete_project_on_failure
-):
+def _run_hook_from_repo_dir(repo_dir, hook_name, project_dir, context,
+                            delete_project_on_failure):
     """Run hook from repo directory, clean project directory if hook fails.
 
     :param repo_dir: Project template input directory.
@@ -244,7 +244,8 @@ def _run_hook_from_repo_dir(
             raise
 
 
-def generate_files(repo_dir, context=None, output_dir=".", overwrite_if_exists=False):
+def generate_files(repo_dir, context=None, output_dir='.',
+                   overwrite_if_exists=False):
     """Render the templates and saves them to files.
 
     :param repo_dir: Project template input directory.
@@ -254,15 +255,22 @@ def generate_files(repo_dir, context=None, output_dir=".", overwrite_if_exists=F
         if it exists.
     """
     template_dir = find_template(repo_dir)
-    logger.debug("Generating project from {}...".format(template_dir))
+    logger.debug('Generating project from {}...'.format(template_dir))
     context = context or OrderedDict([])
 
     unrendered_dir = os.path.split(template_dir)[1]
     ensure_dir_is_templated(unrendered_dir)
-    env = StrictEnvironment(context=context, keep_trailing_newline=True,)
+    env = StrictEnvironment(
+        context=context,
+        keep_trailing_newline=True,
+    )
     try:
         project_dir, output_directory_created = render_and_create_dir(
-            unrendered_dir, context, output_dir, env, overwrite_if_exists
+            unrendered_dir,
+            context,
+            output_dir,
+            env,
+            overwrite_if_exists
         )
     except UndefinedError as err:
         msg = "Unable to create project directory '{}'".format(unrendered_dir)
@@ -276,20 +284,24 @@ def generate_files(repo_dir, context=None, output_dir=".", overwrite_if_exists=F
     # absolute path for the target folder (project_dir)
 
     project_dir = os.path.abspath(project_dir)
-    logger.debug("Project directory is {}".format(project_dir))
+    logger.debug('Project directory is {}'.format(project_dir))
 
     # if we created the output directory, then it's ok to remove it
     # if rendering fails
     delete_project_on_failure = output_directory_created
 
     _run_hook_from_repo_dir(
-        repo_dir, "pre_gen_project", project_dir, context, delete_project_on_failure,
+        repo_dir,
+        'pre_gen_project',
+        project_dir,
+        context,
+        delete_project_on_failure
     )
 
     with work_in(template_dir):
-        env.loader = FileSystemLoader(".")
+        env.loader = FileSystemLoader('.')
 
-        for root, dirs, files in os.walk("."):
+        for root, dirs, files in os.walk('.'):
             # We must separate the two types of dirs into different lists.
             # The reason is that we don't want ``os.walk`` to go through the
             # unrendered directories, since they will just be copied.
@@ -310,7 +322,8 @@ def generate_files(repo_dir, context=None, output_dir=".", overwrite_if_exists=F
                 indir = os.path.normpath(os.path.join(root, copy_dir))
                 outdir = os.path.normpath(os.path.join(project_dir, indir))
                 logger.debug(
-                    "Copying dir {} to {} without rendering" "".format(indir, outdir)
+                    'Copying dir {} to {} without rendering'
+                    ''.format(indir, outdir)
                 )
                 shutil.copytree(indir, outdir)
 
@@ -321,7 +334,11 @@ def generate_files(repo_dir, context=None, output_dir=".", overwrite_if_exists=F
                 unrendered_dir = os.path.join(project_dir, root, d)
                 try:
                     render_and_create_dir(
-                        unrendered_dir, context, output_dir, env, overwrite_if_exists,
+                        unrendered_dir,
+                        context,
+                        output_dir,
+                        env,
+                        overwrite_if_exists
                     )
                 except UndefinedError as err:
                     if delete_project_on_failure:
@@ -337,8 +354,8 @@ def generate_files(repo_dir, context=None, output_dir=".", overwrite_if_exists=F
                     outfile_rendered = outfile_tmpl.render(**context)
                     outfile = os.path.join(project_dir, outfile_rendered)
                     logger.debug(
-                        "Copying file {} to {} without rendering"
-                        "".format(infile, outfile)
+                        'Copying file {} to {} without rendering'
+                        ''.format(infile, outfile)
                     )
                     shutil.copyfile(infile, outfile)
                     shutil.copymode(infile, outfile)
@@ -352,7 +369,11 @@ def generate_files(repo_dir, context=None, output_dir=".", overwrite_if_exists=F
                     raise UndefinedVariableInTemplate(msg, err, context)
 
     _run_hook_from_repo_dir(
-        repo_dir, "post_gen_project", project_dir, context, delete_project_on_failure,
+        repo_dir,
+        'post_gen_project',
+        project_dir,
+        context,
+        delete_project_on_failure
     )
 
     return project_dir
diff --git a/cookiecutter/hooks.py b/cookiecutter/hooks.py
index 48f877d..60cb68d 100644
--- a/cookiecutter/hooks.py
+++ b/cookiecutter/hooks.py
@@ -17,8 +17,8 @@ from cookiecutter.exceptions import FailedHookException
 logger = logging.getLogger(__name__)
 
 _HOOKS = [
-    "pre_gen_project",
-    "post_gen_project",
+    'pre_gen_project',
+    'post_gen_project',
 ]
 EXIT_SUCCESS = 0
 
@@ -35,12 +35,12 @@ def valid_hook(hook_file, hook_name):
 
     matching_hook = basename == hook_name
     supported_hook = basename in _HOOKS
-    backup_file = filename.endswith("~")
+    backup_file = filename.endswith('~')
 
     return matching_hook and supported_hook and not backup_file
 
 
-def find_hook(hook_name, hooks_dir="hooks"):
+def find_hook(hook_name, hooks_dir='hooks'):
     """Return a dict of all hook scripts provided.
 
     Must be called with the project template as the current working directory.
@@ -52,10 +52,10 @@ def find_hook(hook_name, hooks_dir="hooks"):
     :param hooks_dir: The hook directory in the template
     :return: The absolute path to the hook script or None
     """
-    logger.debug("hooks_dir is {}".format(os.path.abspath(hooks_dir)))
+    logger.debug('hooks_dir is {}'.format(os.path.abspath(hooks_dir)))
 
     if not os.path.isdir(hooks_dir):
-        logger.debug("No hooks/ dir in template_dir")
+        logger.debug('No hooks/ dir in template_dir')
         return None
 
     for hook_file in os.listdir(hooks_dir):
@@ -65,14 +65,14 @@ def find_hook(hook_name, hooks_dir="hooks"):
     return None
 
 
-def run_script(script_path, cwd="."):
+def run_script(script_path, cwd='.'):
     """Execute a script from a working directory.
 
     :param script_path: Absolute path to the script to run.
     :param cwd: The directory to run the script from.
     """
-    run_thru_shell = sys.platform.startswith("win")
-    if script_path.endswith(".py"):
+    run_thru_shell = sys.platform.startswith('win')
+    if script_path.endswith('.py'):
         script_command = [sys.executable, script_path]
     else:
         script_command = [script_path]
@@ -80,18 +80,25 @@ def run_script(script_path, cwd="."):
     utils.make_executable(script_path)
 
     try:
-        proc = subprocess.Popen(script_command, shell=run_thru_shell, cwd=cwd)
+        proc = subprocess.Popen(
+            script_command,
+            shell=run_thru_shell,
+            cwd=cwd
+        )
         exit_status = proc.wait()
         if exit_status != EXIT_SUCCESS:
             raise FailedHookException(
-                "Hook script failed (exit status: {})".format(exit_status)
+                'Hook script failed (exit status: {})'.format(exit_status)
             )
     except OSError as os_error:
         if os_error.errno == errno.ENOEXEC:
             raise FailedHookException(
-                "Hook script failed, might be an " "empty file or missing a shebang"
+                'Hook script failed, might be an '
+                'empty file or missing a shebang'
             )
-        raise FailedHookException("Hook script failed (error: {})".format(os_error))
+        raise FailedHookException(
+            'Hook script failed (error: {})'.format(os_error)
+        )
 
 
 def run_script_with_context(script_path, cwd, context):
@@ -103,14 +110,21 @@ def run_script_with_context(script_path, cwd, context):
     """
     _, extension = os.path.splitext(script_path)
 
-    with io.open(script_path, "r", encoding="utf-8") as file:
+    with io.open(script_path, 'r', encoding='utf-8') as file:
         contents = file.read()
 
-    with tempfile.NamedTemporaryFile(delete=False, mode="wb", suffix=extension) as temp:
-        env = StrictEnvironment(context=context, keep_trailing_newline=True,)
+    with tempfile.NamedTemporaryFile(
+        delete=False,
+        mode='wb',
+        suffix=extension
+    ) as temp:
+        env = StrictEnvironment(
+            context=context,
+            keep_trailing_newline=True,
+        )
         template = env.from_string(contents)
         output = template.render(**context)
-        temp.write(output.encode("utf-8"))
+        temp.write(output.encode('utf-8'))
 
     run_script(temp.name, cwd)
 
@@ -125,7 +139,7 @@ def run_hook(hook_name, project_dir, context):
     """
     script = find_hook(hook_name)
     if script is None:
-        logger.debug("No {} hook found".format(hook_name))
+        logger.debug('No {} hook found'.format(hook_name))
         return
-    logger.debug("Running hook {}".format(hook_name))
+    logger.debug('Running hook {}'.format(hook_name))
     run_script_with_context(script, project_dir, context)
diff --git a/cookiecutter/log.py b/cookiecutter/log.py
index 84d04d1..c921d65 100644
--- a/cookiecutter/log.py
+++ b/cookiecutter/log.py
@@ -6,27 +6,27 @@ import logging
 import sys
 
 LOG_LEVELS = {
-    "DEBUG": logging.DEBUG,
-    "INFO": logging.INFO,
-    "WARNING": logging.WARNING,
-    "ERROR": logging.ERROR,
-    "CRITICAL": logging.CRITICAL,
+    'DEBUG': logging.DEBUG,
+    'INFO': logging.INFO,
+    'WARNING': logging.WARNING,
+    'ERROR': logging.ERROR,
+    'CRITICAL': logging.CRITICAL,
 }
 
 LOG_FORMATS = {
-    "DEBUG": u"%(levelname)s %(name)s: %(message)s",
-    "INFO": u"%(levelname)s: %(message)s",
+    'DEBUG': u'%(levelname)s %(name)s: %(message)s',
+    'INFO': u'%(levelname)s: %(message)s',
 }
 
 
-def configure_logger(stream_level="DEBUG", debug_file=None):
+def configure_logger(stream_level='DEBUG', debug_file=None):
     """Configure logging for cookiecutter.
 
     Set up logging to stdout with given level. If ``debug_file`` is given set
     up logging to file with DEBUG level.
     """
     # Set up 'cookiecutter' logger
-    logger = logging.getLogger("cookiecutter")
+    logger = logging.getLogger('cookiecutter')
     logger.setLevel(logging.DEBUG)
 
     # Remove all attached handlers, in case there was
@@ -35,9 +35,9 @@ def configure_logger(stream_level="DEBUG", debug_file=None):
 
     # Create a file handler if a log file is provided
     if debug_file is not None:
-        debug_formatter = logging.Formatter(LOG_FORMATS["DEBUG"])
+        debug_formatter = logging.Formatter(LOG_FORMATS['DEBUG'])
         file_handler = logging.FileHandler(debug_file)
-        file_handler.setLevel(LOG_LEVELS["DEBUG"])
+        file_handler.setLevel(LOG_LEVELS['DEBUG'])
         file_handler.setFormatter(debug_formatter)
         logger.addHandler(file_handler)
 
diff --git a/cookiecutter/main.py b/cookiecutter/main.py
index 7536694..dd9dcfe 100644
--- a/cookiecutter/main.py
+++ b/cookiecutter/main.py
@@ -23,18 +23,9 @@ logger = logging.getLogger(__name__)
 
 
 def cookiecutter(
-    template,
-    checkout=None,
-    no_input=False,
-    extra_context=None,
-    replay=False,
-    overwrite_if_exists=False,
-    output_dir=".",
-    config_file=None,
-    default_config=False,
-    password=None,
-    directory=None,
-):
+        template, checkout=None, no_input=False, extra_context=None,
+        replay=False, overwrite_if_exists=False, output_dir='.',
+        config_file=None, default_config=False, password=None, directory=None):
     """
     Run Cookiecutter just as if using it from the command line.
 
@@ -60,48 +51,49 @@ def cookiecutter(
         raise InvalidModeException(err_msg)
 
     config_dict = get_user_config(
-        config_file=config_file, default_config=default_config,
+        config_file=config_file,
+        default_config=default_config,
     )
 
     repo_dir, cleanup = determine_repo_dir(
         template=template,
-        abbreviations=config_dict["abbreviations"],
-        clone_to_dir=config_dict["cookiecutters_dir"],
+        abbreviations=config_dict['abbreviations'],
+        clone_to_dir=config_dict['cookiecutters_dir'],
         checkout=checkout,
         no_input=no_input,
         password=password,
-        directory=directory,
+        directory=directory
     )
 
     template_name = os.path.basename(os.path.abspath(repo_dir))
 
     if replay:
-        context = load(config_dict["replay_dir"], template_name)
+        context = load(config_dict['replay_dir'], template_name)
     else:
-        context_file = os.path.join(repo_dir, "cookiecutter.json")
-        logger.debug("context_file is {}".format(context_file))
+        context_file = os.path.join(repo_dir, 'cookiecutter.json')
+        logger.debug('context_file is {}'.format(context_file))
 
         context = generate_context(
             context_file=context_file,
-            default_context=config_dict["default_context"],
+            default_context=config_dict['default_context'],
             extra_context=extra_context,
         )
 
         # prompt the user to manually configure at the command line.
         # except when 'no-input' flag is set
-        context["cookiecutter"] = prompt_for_config(context, no_input)
+        context['cookiecutter'] = prompt_for_config(context, no_input)
 
         # include template dir or url in the context dict
-        context["cookiecutter"]["_template"] = template
+        context['cookiecutter']['_template'] = template
 
-        dump(config_dict["replay_dir"], template_name, context)
+        dump(config_dict['replay_dir'], template_name, context)
 
     # Create project from local context and project template.
     result = generate_files(
         repo_dir=repo_dir,
         context=context,
         overwrite_if_exists=overwrite_if_exists,
-        output_dir=output_dir,
+        output_dir=output_dir
     )
 
     # Cleanup (if required)
diff --git a/cookiecutter/prompt.py b/cookiecutter/prompt.py
index 70dee28..b20d02c 100644
--- a/cookiecutter/prompt.py
+++ b/cookiecutter/prompt.py
@@ -34,7 +34,11 @@ def read_user_yes_no(question, default_value):
     :param default_value: Value that will be returned if no input happens
     """
     # Please see http://click.pocoo.org/4/api/#click.prompt
-    return click.prompt(question, default=default_value, type=click.BOOL)
+    return click.prompt(
+        question,
+        default=default_value,
+        type=click.BOOL
+    )
 
 
 def read_repo_password(question):
@@ -63,19 +67,17 @@ def read_user_choice(var_name, options):
         raise ValueError
 
     choice_map = OrderedDict(
-        (u"{}".format(i), value) for i, value in enumerate(options, 1)
+        (u'{}'.format(i), value) for i, value in enumerate(options, 1)
     )
     choices = choice_map.keys()
-    default = u"1"
-
-    choice_lines = [u"{} - {}".format(*c) for c in choice_map.items()]
-    prompt = u"\n".join(
-        (
-            u"Select {}:".format(var_name),
-            u"\n".join(choice_lines),
-            u"Choose from {}".format(u", ".join(choices)),
-        )
-    )
+    default = u'1'
+
+    choice_lines = [u'{} - {}'.format(*c) for c in choice_map.items()]
+    prompt = u'\n'.join((
+        u'Select {}:'.format(var_name),
+        u'\n'.join(choice_lines),
+        u'Choose from {}'.format(u', '.join(choices))
+    ))
 
     user_choice = click.prompt(
         prompt, type=click.Choice(choices), default=default, show_choices=False
@@ -89,14 +91,17 @@ def process_json(user_value):
     :param str user_value: User-supplied value to load as a JSON dict
     """
     try:
-        user_dict = json.loads(user_value, object_pairs_hook=OrderedDict,)
+        user_dict = json.loads(
+            user_value,
+            object_pairs_hook=OrderedDict,
+        )
     except Exception:
         # Leave it up to click to ask the user again
-        raise click.UsageError("Unable to decode to JSON.")
+        raise click.UsageError('Unable to decode to JSON.')
 
     if not isinstance(user_dict, dict):
         # Leave it up to click to ask the user again
-        raise click.UsageError("Requires JSON dict.")
+        raise click.UsageError('Requires JSON dict.')
 
     return user_dict
 
@@ -112,10 +117,13 @@ def read_user_dict(var_name, default_value):
     if not isinstance(default_value, dict):
         raise TypeError
 
-    default_display = "default"
+    default_display = 'default'
 
     user_value = click.prompt(
-        var_name, default=default_display, type=click.STRING, value_proc=process_json,
+        var_name,
+        default=default_display,
+        type=click.STRING,
+        value_proc=process_json,
     )
 
     if user_value == default_display:
@@ -145,15 +153,16 @@ def render_variable(env, raw, cookiecutter_dict):
         return None
     elif isinstance(raw, dict):
         return {
-            render_variable(env, k, cookiecutter_dict): render_variable(
-                env, v, cookiecutter_dict
-            )
+            render_variable(env, k, cookiecutter_dict):
+                render_variable(env, v, cookiecutter_dict)
             for k, v in raw.items()
         }
     elif isinstance(raw, list):
-        return [render_variable(env, v, cookiecutter_dict) for v in raw]
+        return [
+            render_variable(env, v, cookiecutter_dict)
+            for v in raw
+        ]
     elif not isinstance(raw, six.string_types):
-
         raw = str(raw)
 
     template = env.from_string(raw)
@@ -167,7 +176,9 @@ def prompt_choice_for_config(cookiecutter_dict, env, key, options, no_input):
 
     Each of the possible choices is rendered beforehand.
     """
-    rendered_options = [render_variable(env, raw, cookiecutter_dict) for raw in options]
+    rendered_options = [
+        render_variable(env, raw, cookiecutter_dict) for raw in options
+    ]
 
     if no_input:
         return rendered_options[0]
@@ -186,9 +197,8 @@ def prompt_for_config(context, no_input=False):
     # First pass: Handle simple and raw variables, plus choices.
     # These must be done first because the dictionaries keys and
     # values might refer to them.
-    for key, raw in context[u"cookiecutter"].items():
-        if key.startswith(u"_"):
-
+    for key, raw in context[u'cookiecutter'].items():
+        if key.startswith(u'_'):
             cookiecutter_dict[key] = raw
             continue
 
@@ -212,7 +222,7 @@ def prompt_for_config(context, no_input=False):
             raise UndefinedVariableInTemplate(msg, err, context)
 
     # Second pass; handle the dictionaries.
-    for key, raw in context[u"cookiecutter"].items():
+    for key, raw in context[u'cookiecutter'].items():
 
         try:
             if isinstance(raw, dict):
diff --git a/cookiecutter/replay.py b/cookiecutter/replay.py
index 806a547..42c2c84 100644
--- a/cookiecutter/replay.py
+++ b/cookiecutter/replay.py
@@ -18,41 +18,41 @@ from cookiecutter.utils import make_sure_path_exists
 
 def get_file_name(replay_dir, template_name):
     """Get the name of file."""
-    file_name = "{}.json".format(template_name)
+    file_name = '{}.json'.format(template_name)
     return os.path.join(replay_dir, file_name)
 
 
 def dump(replay_dir, template_name, context):
     """Write json data to file."""
     if not make_sure_path_exists(replay_dir):
-        raise IOError("Unable to create replay dir at {}".format(replay_dir))
+        raise IOError('Unable to create replay dir at {}'.format(replay_dir))
 
     if not isinstance(template_name, six.string_types):
-        raise TypeError("Template name is required to be of type str")
+        raise TypeError('Template name is required to be of type str')
 
     if not isinstance(context, dict):
-        raise TypeError("Context is required to be of type dict")
+        raise TypeError('Context is required to be of type dict')
 
-    if "cookiecutter" not in context:
-        raise ValueError("Context is required to contain a cookiecutter key")
+    if 'cookiecutter' not in context:
+        raise ValueError('Context is required to contain a cookiecutter key')
 
     replay_file = get_file_name(replay_dir, template_name)
 
-    with open(replay_file, "w") as outfile:
+    with open(replay_file, 'w') as outfile:
         json.dump(context, outfile, indent=2)
 
 
 def load(replay_dir, template_name):
     """Read json data from file."""
     if not isinstance(template_name, six.string_types):
-        raise TypeError("Template name is required to be of type str")
+        raise TypeError('Template name is required to be of type str')
 
     replay_file = get_file_name(replay_dir, template_name)
 
-    with open(replay_file, "r") as infile:
+    with open(replay_file, 'r') as infile:
         context = json.load(infile)
 
-    if "cookiecutter" not in context:
-        raise ValueError("Context is required to contain a cookiecutter key")
+    if 'cookiecutter' not in context:
+        raise ValueError('Context is required to contain a cookiecutter key')
 
     return context
diff --git a/cookiecutter/repository.py b/cookiecutter/repository.py
index 45b3d1f..badb97c 100644
--- a/cookiecutter/repository.py
+++ b/cookiecutter/repository.py
@@ -10,16 +10,13 @@ from cookiecutter.exceptions import RepositoryNotFound
 from cookiecutter.vcs import clone
 from cookiecutter.zipfile import unzip
 
-REPO_REGEX = re.compile(
-    r"""
+REPO_REGEX = re.compile(r"""
 # something like git:// ssh:// file:// etc.
 ((((git|hg)\+)?(git|ssh|file|https?):(//)?)
  |                                      # or
  (\w+@[\w\.]+)                          # something like user@...
 )
-""",
-    re.VERBOSE,
-)
+""", re.VERBOSE)
 
 
 def is_repo_url(value):
@@ -29,7 +26,7 @@ def is_repo_url(value):
 
 def is_zip_file(value):
     """Return True if value is a zip file."""
-    return value.lower().endswith(".zip")
+    return value.lower().endswith('.zip')
 
 
 def expand_abbreviations(template, abbreviations):
@@ -43,7 +40,7 @@ def expand_abbreviations(template, abbreviations):
 
     # Split on colon. If there is no colon, rest will be empty
     # and prefix will be the whole template
-    prefix, sep, rest = template.partition(":")
+    prefix, sep, rest = template.partition(':')
     if prefix in abbreviations:
         return abbreviations[prefix].format(rest)
 
@@ -59,20 +56,13 @@ def repository_has_cookiecutter_json(repo_directory):
     repo_directory_exists = os.path.isdir(repo_directory)
 
     repo_config_exists = os.path.isfile(
-        os.path.join(repo_directory, "cookiecutter.json")
+        os.path.join(repo_directory, 'cookiecutter.json')
     )
     return repo_directory_exists and repo_config_exists
 
 
-def determine_repo_dir(
-    template,
-    abbreviations,
-    clone_to_dir,
-    checkout,
-    no_input,
-    password=None,
-    directory=None,
-):
+def determine_repo_dir(template, abbreviations, clone_to_dir, checkout,
+                       no_input, password=None, directory=None):
     """
     Locate the repository directory from a template reference.
 
@@ -102,7 +92,7 @@ def determine_repo_dir(
             is_url=is_repo_url(template),
             clone_to_dir=clone_to_dir,
             no_input=no_input,
-            password=password,
+            password=password
         )
         repository_candidates = [unzipped_dir]
         cleanup = True
@@ -118,14 +108,13 @@ def determine_repo_dir(
     else:
         repository_candidates = [
             template,
-            os.path.join(clone_to_dir, template),
+            os.path.join(clone_to_dir, template)
         ]
         cleanup = False
 
     if directory:
-        repository_candidates = [
-            os.path.join(s, directory) for s in repository_candidates
-        ]
+        repository_candidates = [os.path.join(s, directory)
+                                 for s in repository_candidates]
 
     for repo_candidate in repository_candidates:
         if repository_has_cookiecutter_json(repo_candidate):
@@ -133,5 +122,8 @@ def determine_repo_dir(
 
     raise RepositoryNotFound(
         'A valid repository for "{}" could not be found in the following '
-        "locations:\n{}".format(template, "\n".join(repository_candidates))
+        'locations:\n{}'.format(
+            template,
+            '\n'.join(repository_candidates)
+        )
     )
diff --git a/cookiecutter/utils.py b/cookiecutter/utils.py
index a1c4410..7a8461a 100644
--- a/cookiecutter/utils.py
+++ b/cookiecutter/utils.py
@@ -39,10 +39,10 @@ def make_sure_path_exists(path):
 
     :param path: A directory path.
     """
-    logger.debug("Making sure path exists: {}".format(path))
+    logger.debug('Making sure path exists: {}'.format(path))
     try:
         os.makedirs(path)
-        logger.debug("Created directory at: {}".format(path))
+        logger.debug('Created directory at: {}'.format(path))
     except OSError as exception:
         if exception.errno != errno.EEXIST:
             return False
@@ -89,10 +89,11 @@ def prompt_and_delete(path, no_input=False):
         ok_to_delete = True
     else:
         question = (
-            "You've downloaded {} before. " "Is it okay to delete and re-download it?"
+            "You've downloaded {} before. "
+            "Is it okay to delete and re-download it?"
         ).format(path)
 
-        ok_to_delete = read_user_yes_no(question, "yes")
+        ok_to_delete = read_user_yes_no(question, 'yes')
 
     if ok_to_delete:
         if os.path.isdir(path):
@@ -102,7 +103,7 @@ def prompt_and_delete(path, no_input=False):
         return True
     else:
         ok_to_reuse = read_user_yes_no(
-            "Do you want to re-use the existing version?", "yes"
+            "Do you want to re-use the existing version?", 'yes'
         )
 
         if ok_to_reuse:
diff --git a/cookiecutter/vcs.py b/cookiecutter/vcs.py
index 590d96b..ad402f6 100644
--- a/cookiecutter/vcs.py
+++ b/cookiecutter/vcs.py
@@ -13,10 +13,7 @@ except ImportError:
     from whichcraft import which
 
 from cookiecutter.exceptions import (
-    RepositoryNotFound,
-    RepositoryCloneFailed,
-    UnknownRepoType,
-    VCSNotInstalled,
+    RepositoryNotFound, RepositoryCloneFailed, UnknownRepoType, VCSNotInstalled
 )
 from cookiecutter.utils import make_sure_path_exists, prompt_and_delete
 
@@ -24,8 +21,8 @@ logger = logging.getLogger(__name__)
 
 
 BRANCH_ERRORS = [
-    "error: pathspec",
-    "unknown revision",
+    'error: pathspec',
+    'unknown revision',
 ]
 
 
@@ -37,7 +34,7 @@ def identify_repo(repo_url):
     :param repo_url: Repo URL of unknown type.
     :returns: ('git', repo_url), ('hg', repo_url), or None.
     """
-    repo_url_values = repo_url.split("+")
+    repo_url_values = repo_url.split('+')
     if len(repo_url_values) == 2:
         repo_type = repo_url_values[0]
         if repo_type in ["git", "hg"]:
@@ -45,10 +42,10 @@ def identify_repo(repo_url):
         else:
             raise UnknownRepoType
     else:
-        if "git" in repo_url:
-            return "git", repo_url
-        elif "bitbucket" in repo_url:
-            return "hg", repo_url
+        if 'git' in repo_url:
+            return 'git', repo_url
+        elif 'bitbucket' in repo_url:
+            return 'hg', repo_url
         else:
             raise UnknownRepoType
 
@@ -62,7 +59,7 @@ def is_vcs_installed(repo_type):
     return bool(which(repo_type))
 
 
-def clone(repo_url, checkout=None, clone_to_dir=".", no_input=False):
+def clone(repo_url, checkout=None, clone_to_dir='.', no_input=False):
     """Clone a repo to the current directory.
 
     :param repo_url: Repo URL of unknown type.
@@ -83,13 +80,14 @@ def clone(repo_url, checkout=None, clone_to_dir=".", no_input=False):
         msg = "'{0}' is not installed.".format(repo_type)
         raise VCSNotInstalled(msg)
 
-    repo_url = repo_url.rstrip("/")
+    repo_url = repo_url.rstrip('/')
     tail = os.path.split(repo_url)[1]
-    if repo_type == "git":
-        repo_dir = os.path.normpath(os.path.join(clone_to_dir, tail.rsplit(".git")[0]))
-    elif repo_type == "hg":
+    if repo_type == 'git':
+        repo_dir = os.path.normpath(os.path.join(clone_to_dir,
+                                                 tail.rsplit('.git')[0]))
+    elif repo_type == 'hg':
         repo_dir = os.path.normpath(os.path.join(clone_to_dir, tail))
-    logger.debug("repo_dir is {0}".format(repo_dir))
+    logger.debug('repo_dir is {0}'.format(repo_dir))
 
     if os.path.isdir(repo_dir):
         clone = prompt_and_delete(repo_dir, no_input=no_input)
@@ -99,27 +97,27 @@ def clone(repo_url, checkout=None, clone_to_dir=".", no_input=False):
     if clone:
         try:
             subprocess.check_output(
-                [repo_type, "clone", repo_url],
+                [repo_type, 'clone', repo_url],
                 cwd=clone_to_dir,
                 stderr=subprocess.STDOUT,
             )
             if checkout is not None:
                 subprocess.check_output(
-                    [repo_type, "checkout", checkout],
+                    [repo_type, 'checkout', checkout],
                     cwd=repo_dir,
                     stderr=subprocess.STDOUT,
                 )
         except subprocess.CalledProcessError as clone_error:
-            output = clone_error.output.decode("utf-8")
-            if "not found" in output.lower():
+            output = clone_error.output.decode('utf-8')
+            if 'not found' in output.lower():
                 raise RepositoryNotFound(
-                    "The repository {} could not be found, "
-                    "have you made a typo?".format(repo_url)
+                    'The repository {} could not be found, '
+                    'have you made a typo?'.format(repo_url)
                 )
             if any(error in output for error in BRANCH_ERRORS):
                 raise RepositoryCloneFailed(
-                    "The {} branch of repository {} could not found, "
-                    "have you made a typo?".format(checkout, repo_url)
+                    'The {} branch of repository {} could not found, '
+                    'have you made a typo?'.format(checkout, repo_url)
                 )
             raise
 
diff --git a/cookiecutter/zipfile.py b/cookiecutter/zipfile.py
index 771c12e..9924cc3 100644
--- a/cookiecutter/zipfile.py
+++ b/cookiecutter/zipfile.py
@@ -19,7 +19,7 @@ from cookiecutter.prompt import read_repo_password
 from cookiecutter.utils import make_sure_path_exists, prompt_and_delete
 
 
-def unzip(zip_uri, is_url, clone_to_dir=".", no_input=False, password=None):
+def unzip(zip_uri, is_url, clone_to_dir='.', no_input=False, password=None):
     """Download and unpack a zipfile at a given URI.
 
     This will download the zipfile to the cookiecutter repository,
@@ -39,7 +39,7 @@ def unzip(zip_uri, is_url, clone_to_dir=".", no_input=False, password=None):
     if is_url:
         # Build the name of the cached zipfile,
         # and prompt to delete if it already exists.
-        identifier = zip_uri.rsplit("/", 1)[1]
+        identifier = zip_uri.rsplit('/', 1)[1]
         zip_path = os.path.join(clone_to_dir, identifier)
 
         if os.path.exists(zip_path):
@@ -50,7 +50,7 @@ def unzip(zip_uri, is_url, clone_to_dir=".", no_input=False, password=None):
         if download:
             # (Re) download the zipfile
             r = requests.get(zip_uri, stream=True)
-            with open(zip_path, "wb") as f:
+            with open(zip_path, 'wb') as f:
                 for chunk in r.iter_content(chunk_size=1024):
                     if chunk:  # filter out keep-alive new chunks
                         f.write(chunk)
@@ -64,15 +64,17 @@ def unzip(zip_uri, is_url, clone_to_dir=".", no_input=False, password=None):
         zip_file = ZipFile(zip_path)
 
         if len(zip_file.namelist()) == 0:
-            raise InvalidZipRepository("Zip repository {} is empty".format(zip_uri))
+            raise InvalidZipRepository(
+                'Zip repository {} is empty'.format(zip_uri)
+            )
 
         # The first record in the zipfile should be the directory entry for
         # the archive. If it isn't a directory, there's a problem.
         first_filename = zip_file.namelist()[0]
-        if not first_filename.endswith("/"):
+        if not first_filename.endswith('/'):
             raise InvalidZipRepository(
-                "Zip repository {} does not include "
-                "a top-level directory".format(zip_uri)
+                'Zip repository {} does not include '
+                'a top-level directory'.format(zip_uri)
             )
 
         # Construct the final target directory
@@ -88,34 +90,39 @@ def unzip(zip_uri, is_url, clone_to_dir=".", no_input=False, password=None):
             # environment; if that doesn't work, ask the user.
             if password is not None:
                 try:
-                    zip_file.extractall(path=unzip_base, pwd=password.encode("utf-8"))
+                    zip_file.extractall(
+                        path=unzip_base,
+                        pwd=password.encode('utf-8')
+                    )
                 except RuntimeError:
                     raise InvalidZipRepository(
-                        "Invalid password provided for protected repository"
+                        'Invalid password provided for protected repository'
                     )
             elif no_input:
                 raise InvalidZipRepository(
-                    "Unable to unlock password protected repository"
+                    'Unable to unlock password protected repository'
                 )
             else:
                 retry = 0
                 while retry is not None:
                     try:
-                        password = read_repo_password("Repo password")
+                        password = read_repo_password('Repo password')
                         zip_file.extractall(
-                            path=unzip_base, pwd=password.encode("utf-8")
+                            path=unzip_base,
+                            pwd=password.encode('utf-8')
                         )
                         retry = None
                     except RuntimeError:
                         retry += 1
                         if retry == 3:
                             raise InvalidZipRepository(
-                                "Invalid password provided " "for protected repository"
+                                'Invalid password provided '
+                                'for protected repository'
                             )
 
     except BadZipFile:
         raise InvalidZipRepository(
-            "Zip repository {} is not a valid zip archive:".format(zip_uri)
+            'Zip repository {} is not a valid zip archive:'.format(zip_uri)
         )
 
     return unzip_path
diff --git a/docs/ccext.py b/docs/ccext.py
index eb86140..f6a3e4a 100644
--- a/docs/ccext.py
+++ b/docs/ccext.py
@@ -18,7 +18,7 @@ class CcCommandLineOptions(rst.Directive):
             ".. option:: " + ", ".join(option.opts),
             "",
             option.help,
-            "",
+            ""
         ]
 
     def process_actions(self):
@@ -37,4 +37,4 @@ class CcCommandLineOptions(rst.Directive):
 
 
 def setup(app):
-    app.add_directive("cc-command-line-options", CcCommandLineOptions)
+    app.add_directive('cc-command-line-options', CcCommandLineOptions)
diff --git a/docs/conf.py b/docs/conf.py
index 8ab34ab..7a2ed0c 100644
--- a/docs/conf.py
+++ b/docs/conf.py
@@ -30,7 +30,6 @@ import sys
 
 # flake8: noqa D107,D105
 
-
 class Mock(object):
     def __init__(self, *args, **kwargs):
         pass
@@ -40,8 +39,8 @@ class Mock(object):
 
     @classmethod
     def __getattr__(cls, name):
-        if name in ("__file__", "__path__"):
-            return "/dev/null"
+        if name in ('__file__', '__path__'):
+            return '/dev/null'
         elif name[0] == name[0].upper():
             mockType = type(name, (), {})
             mockType.__module__ = __name__
@@ -50,7 +49,7 @@ class Mock(object):
             return Mock()
 
 
-MOCK_MODULES = ["yaml"]
+MOCK_MODULES = ['yaml']
 for mod_name in MOCK_MODULES:
     sys.modules[mod_name] = Mock()
 
@@ -71,36 +70,36 @@ import cookiecutter  # noqa 402
 # extensions coming with Sphinx (named 'sphinx.ext.*') or
 # your custom ones.
 extensions = [
-    "sphinx.ext.autodoc",
-    "sphinx.ext.doctest",
-    "sphinx.ext.intersphinx",
-    "sphinx.ext.todo",
-    "sphinx.ext.coverage",
-    "sphinx.ext.imgmath",
-    "sphinx.ext.ifconfig",
-    "sphinx.ext.viewcode",
-    "docs.ccext",
-    "recommonmark",
+    'sphinx.ext.autodoc',
+    'sphinx.ext.doctest',
+    'sphinx.ext.intersphinx',
+    'sphinx.ext.todo',
+    'sphinx.ext.coverage',
+    'sphinx.ext.imgmath',
+    'sphinx.ext.ifconfig',
+    'sphinx.ext.viewcode',
+    'docs.ccext',
+    'recommonmark'
 ]
 
 # Add any paths that contain templates here, relative to this directory.
-templates_path = ["_templates"]
+templates_path = ['_templates']
 
 # The suffix of source filenames.
 source_suffix = {
-    ".rst": "restructuredtext",
-    ".md": "markdown",
+    '.rst': 'restructuredtext',
+    '.md': 'markdown',
 }
 
 # The encoding of source files.
 # source_encoding = 'utf-8-sig'
 
 # The master toctree document.
-master_doc = "index"
+master_doc = 'index'
 
 # General information about the project.
-project = u"cookiecutter"
-copyright = u"2013-2019, Audrey Roy and Cookiecutter community"
+project = u'cookiecutter'
+copyright = u'2013-2019, Audrey Roy and Cookiecutter community'
 
 # The version info for the project you're documenting, acts as replacement for
 # |version| and |release|, also used in various other places throughout the
@@ -123,7 +122,7 @@ release = cookiecutter.__version__
 
 # List of patterns, relative to source directory, that match files and
 # directories to ignore when looking for source files.
-exclude_patterns = ["_build"]
+exclude_patterns = ['_build']
 
 # The reST default role (used for this markup: `text`) to use for all documents
 # default_role = None
@@ -140,7 +139,7 @@ exclude_patterns = ["_build"]
 # show_authors = False
 
 # The name of the Pygments (syntax highlighting) style to use.
-pygments_style = "sphinx"
+pygments_style = 'sphinx'
 
 # A list of ignored prefixes for module index sorting.
 # modindex_common_prefix = []
@@ -149,13 +148,13 @@ pygments_style = "sphinx"
 # keep_warnings = False
 
 # Suppress nonlocal image warnings
-suppress_warnings = ["image.nonlocal_uri"]
+suppress_warnings = ['image.nonlocal_uri']
 
 # -- Options for HTML output --------------------------------------------------
 
 # The theme to use for HTML and HTML Help pages.  See the documentation for
 # a list of builtin themes.
-html_theme = "sphinx_rtd_theme"
+html_theme = 'sphinx_rtd_theme'
 
 # Theme options are theme-specific and customize the look and feel of a theme
 # further.  For a list of options available for each theme, see the
@@ -228,7 +227,7 @@ html_static_path = []
 # html_file_suffix = None
 
 # Output file base name for HTML help builder.
-htmlhelp_basename = "cookiecutterdoc"
+htmlhelp_basename = 'cookiecutterdoc'
 
 
 # -- Options for LaTeX output -------------------------------------------------
@@ -236,8 +235,10 @@ htmlhelp_basename = "cookiecutterdoc"
 latex_elements = {
     # The paper size ('letterpaper' or 'a4paper').
     # 'papersize': 'letterpaper',
+
     # The font size ('10pt', '11pt' or '12pt').
     # 'pointsize': '10pt',
+
     # Additional stuff for the LaTeX preamble.
     # 'preamble': '',
 }
@@ -245,13 +246,8 @@ latex_elements = {
 # Grouping the document tree into LaTeX files. List of tuples
 # (source start file, target name, title, author, documentclass [howto/manual])
 latex_documents = [
-    (
-        "index",
-        "cookiecutter.tex",
-        u"cookiecutter Documentation",
-        u"Audrey Roy and Cookiecutter community",
-        "manual",
-    ),
+    ('index', 'cookiecutter.tex', u'cookiecutter Documentation',
+     u'Audrey Roy and Cookiecutter community', 'manual'),
 ]
 
 # The name of an image file (relative to this directory) to place at the top of
@@ -280,13 +276,8 @@ latex_documents = [
 # One entry per manual page. List of tuples
 # (source start file, name, description, authors, manual section).
 man_pages = [
-    (
-        "index",
-        "cookiecutter",
-        u"cookiecutter Documentation",
-        [u"Audrey Roy and Cookiecutter community"],
-        1,
-    )
+    ('index', 'cookiecutter', u'cookiecutter Documentation',
+     [u'Audrey Roy and Cookiecutter community'], 1)
 ]
 
 # If true, show URL addresses after external links.
@@ -299,15 +290,9 @@ man_pages = [
 # (source start file, target name, title, author,
 #  dir menu entry, description, category)
 texinfo_documents = [
-    (
-        "index",
-        "cookiecutter",
-        u"cookiecutter Documentation",
-        u"Audrey Roy and Cookiecutter community",
-        "cookiecutter",
-        "Creates projects from project templates",
-        "Miscellaneous",
-    ),
+    ('index', 'cookiecutter', u'cookiecutter Documentation',
+     u'Audrey Roy and Cookiecutter community', 'cookiecutter',
+     'Creates projects from project templates', 'Miscellaneous'),
 ]
 
 # Documents to append as an appendix to all manuals.
@@ -326,10 +311,10 @@ texinfo_documents = [
 # -- Options for Epub output --------------------------------------------------
 
 # Bibliographic Dublin Core info.
-epub_title = u"cookiecutter"
-epub_author = u"Audrey Roy"
-epub_publisher = u"Audrey Roy and Cookiecutter community"
-epub_copyright = u"2013-2019, Audrey Roy and Cookiecutter community"
+epub_title = u'cookiecutter'
+epub_author = u'Audrey Roy'
+epub_publisher = u'Audrey Roy and Cookiecutter community'
+epub_copyright = u'2013-2019, Audrey Roy and Cookiecutter community'
 
 # The language of the text. It defaults to the language option
 # or en if the language is not set.
@@ -382,4 +367,4 @@ epub_copyright = u"2013-2019, Audrey Roy and Cookiecutter community"
 
 
 # Example configuration for intersphinx: refer to the Python standard library.
-intersphinx_mapping = {"http://docs.python.org/": None}
+intersphinx_mapping = {'http://docs.python.org/': None}
diff --git a/pyproject.toml b/pyproject.toml
deleted file mode 100644
index 565b234..0000000
--- a/pyproject.toml
+++ /dev/null
@@ -1,17 +0,0 @@
-[tool.black]
-exclude = '''
-/(
-    \.eggs
-  | \.git
-  | \.hg
-  | \.mypy_cache
-  | \.tox
-  | \.venv
-  | _build
-  | buck-out
-  | build
-  | dist
-  # The following are project specific:
-  | tests/hooks-abort-render/hooks
-)/
-'''
diff --git a/setup.cfg b/setup.cfg
index c9151bf..4aee6af 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -9,7 +9,7 @@ tag_name = {new_version}
 [bumpversion:file:cookiecutter/__init__.py]
 
 [flake8]
-ignore = E231,E731,W503,D101,D102,D103,D400
+ignore = BLK100,E231,E731,W503,D100,D101,D102,D103,D400
 # D400 First line should end with a period
 
 # Excludes due to known issues or incompatibilities:
diff --git a/setup.py b/setup.py
index a828759..65d4446 100644
--- a/setup.py
+++ b/setup.py
@@ -11,76 +11,82 @@ from setuptools import setup
 
 version = "1.7.0"
 
-if sys.argv[-1] == "publish":
-    os.system("python setup.py sdist upload")
-    os.system("python setup.py bdist_wheel upload")
+if sys.argv[-1] == 'publish':
+    os.system('python setup.py sdist upload')
+    os.system('python setup.py bdist_wheel upload')
     sys.exit()
 
-if sys.argv[-1] == "tag":
+if sys.argv[-1] == 'tag':
     os.system("git tag -a %s -m 'version %s'" % (version, version))
     os.system("git push --tags")
     sys.exit()
 
-with io.open("README.md", "r", encoding="utf-8") as readme_file:
+with io.open('README.md', 'r', encoding='utf-8') as readme_file:
     readme = readme_file.read()
 
 requirements = [
-    "binaryornot>=0.2.0",
-    "jinja2>=2.7",
-    "click>=7.0",
-    "poyo>=0.1.0",
-    "jinja2-time>=0.1.0",
-    "requests>=2.18.0",
-    "six>=1.10",
+    'binaryornot>=0.2.0',
+    'jinja2>=2.7',
+    'click>=7.0',
+    'poyo>=0.1.0',
+    'jinja2-time>=0.1.0',
+    'requests>=2.18.0',
+    'six>=1.10',
 ]
 
-if sys.argv[-1] == "readme":
+if sys.argv[-1] == 'readme':
     print(readme)
     sys.exit()
 
 
 setup(
-    name="cookiecutter",
+    name='cookiecutter',
     version=version,
-    description=(
-        "A command-line utility that creates projects from project "
-        "templates, e.g. creating a Python package project from a "
-        "Python package project template."
-    ),
+    description=('A command-line utility that creates projects from project '
+                 'templates, e.g. creating a Python package project from a '
+                 'Python package project template.'),
     long_description=readme,
-    long_description_content_type="text/markdown",
-    author="Audrey Roy",
-    author_email="audreyr@gmail.com",
-    url="https://github.com/cookiecutter/cookiecutter",
-    packages=["cookiecutter",],
-    package_dir={"cookiecutter": "cookiecutter"},
-    entry_points={"console_scripts": ["cookiecutter = cookiecutter.__main__:main",]},
+    long_description_content_type='text/markdown',
+    author='Audrey Roy',
+    author_email='audreyr@gmail.com',
+    url='https://github.com/cookiecutter/cookiecutter',
+    packages=[
+        'cookiecutter',
+    ],
+    package_dir={'cookiecutter': 'cookiecutter'},
+    entry_points={
+        'console_scripts': [
+            'cookiecutter = cookiecutter.__main__:main',
+        ]
+    },
     include_package_data=True,
-    python_requires=">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
+    python_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*',
     install_requires=requirements,
-    extras_require={':python_version<"3.3"': ["whichcraft>=0.4.0"],},
-    license="BSD",
+    extras_require={
+        ':python_version<"3.3"': ['whichcraft>=0.4.0'],
+    },
+    license='BSD',
     zip_safe=False,
     classifiers=[
-        "Development Status :: 5 - Production/Stable",
-        "Environment :: Console",
-        "Intended Audience :: Developers",
-        "Natural Language :: English",
-        "License :: OSI Approved :: BSD License",
-        "Programming Language :: Python",
-        "Programming Language :: Python :: 2",
-        "Programming Language :: Python :: 2.7",
-        "Programming Language :: Python :: 3",
-        "Programming Language :: Python :: 3.5",
-        "Programming Language :: Python :: 3.6",
-        "Programming Language :: Python :: 3.7",
-        "Programming Language :: Python :: Implementation :: CPython",
-        "Programming Language :: Python :: Implementation :: PyPy",
-        "Topic :: Software Development",
+        'Development Status :: 5 - Production/Stable',
+        'Environment :: Console',
+        'Intended Audience :: Developers',
+        'Natural Language :: English',
+        'License :: OSI Approved :: BSD License',
+        'Programming Language :: Python',
+        'Programming Language :: Python :: 2',
+        'Programming Language :: Python :: 2.7',
+        'Programming Language :: Python :: 3',
+        'Programming Language :: Python :: 3.5',
+        'Programming Language :: Python :: 3.6',
+        'Programming Language :: Python :: 3.7',
+        'Programming Language :: Python :: Implementation :: CPython',
+        'Programming Language :: Python :: Implementation :: PyPy',
+        'Topic :: Software Development',
     ],
     keywords=(
-        "cookiecutter, Python, projects, project templates, Jinja2, "
-        "skeleton, scaffolding, project directory, setup.py, package, "
-        "packaging"
+        'cookiecutter, Python, projects, project templates, Jinja2, '
+        'skeleton, scaffolding, project directory, setup.py, package, '
+        'packaging'
     ),
 )
diff --git a/tests/conftest.py b/tests/conftest.py
index d670b73..0ae6f68 100644
--- a/tests/conftest.py
+++ b/tests/conftest.py
@@ -54,7 +54,7 @@ def restore_backup_dir(original_dir, backup_dir, original_dir_found):
         utils.rmtree(backup_dir)
 
 
-@pytest.fixture(scope="function")
+@pytest.fixture(scope='function')
 def clean_system(request):
     """
     Fixture that simulates a clean system with no config/cloned cookiecutters.
@@ -90,8 +90,10 @@ def clean_system(request):
 
     """
     # If ~/.cookiecutterrc is pre-existing, move it to a temp location
-    user_config_path = os.path.expanduser("~/.cookiecutterrc")
-    user_config_path_backup = os.path.expanduser("~/.cookiecutterrc.backup")
+    user_config_path = os.path.expanduser('~/.cookiecutterrc')
+    user_config_path_backup = os.path.expanduser(
+        '~/.cookiecutterrc.backup'
+    )
     if os.path.exists(user_config_path):
         user_config_found = True
         shutil.copy(user_config_path, user_config_path_backup)
@@ -101,14 +103,18 @@ def clean_system(request):
 
     # If the default cookiecutters_dir is pre-existing, move it to a
     # temp location
-    cookiecutters_dir = os.path.expanduser("~/.cookiecutters")
-    cookiecutters_dir_backup = os.path.expanduser("~/.cookiecutters.backup")
-    cookiecutters_dir_found = backup_dir(cookiecutters_dir, cookiecutters_dir_backup)
+    cookiecutters_dir = os.path.expanduser('~/.cookiecutters')
+    cookiecutters_dir_backup = os.path.expanduser('~/.cookiecutters.backup')
+    cookiecutters_dir_found = backup_dir(
+        cookiecutters_dir, cookiecutters_dir_backup
+    )
 
     # If the default cookiecutter_replay_dir is pre-existing, move it to a
     # temp location
-    cookiecutter_replay_dir = os.path.expanduser("~/.cookiecutter_replay")
-    cookiecutter_replay_dir_backup = os.path.expanduser("~/.cookiecutter_replay.backup")
+    cookiecutter_replay_dir = os.path.expanduser('~/.cookiecutter_replay')
+    cookiecutter_replay_dir_backup = os.path.expanduser(
+        '~/.cookiecutter_replay.backup'
+    )
     cookiecutter_replay_dir_found = backup_dir(
         cookiecutter_replay_dir, cookiecutter_replay_dir_backup
     )
@@ -123,7 +129,9 @@ def clean_system(request):
         # Carefully delete the created ~/.cookiecutters dir only in certain
         # conditions.
         restore_backup_dir(
-            cookiecutters_dir, cookiecutters_dir_backup, cookiecutters_dir_found,
+            cookiecutters_dir,
+            cookiecutters_dir_backup,
+            cookiecutters_dir_found
         )
 
         # Carefully delete the created ~/.cookiecutter_replay dir only in
@@ -131,19 +139,19 @@ def clean_system(request):
         restore_backup_dir(
             cookiecutter_replay_dir,
             cookiecutter_replay_dir_backup,
-            cookiecutter_replay_dir_found,
+            cookiecutter_replay_dir_found
         )
 
     request.addfinalizer(restore_backup)
 
 
-@pytest.fixture(scope="session")
+@pytest.fixture(scope='session')
 def user_dir(tmpdir_factory):
     """Fixture that simulates the user's home directory."""
-    return tmpdir_factory.mktemp("user_dir")
+    return tmpdir_factory.mktemp('user_dir')
 
 
-@pytest.fixture(scope="session")
+@pytest.fixture(scope='session')
 def user_config_data(user_dir):
     """Fixture that creates 2 Cookiecutter user config dirs.
 
@@ -154,16 +162,16 @@ def user_config_data(user_dir):
 
     :returns: Dict with name of both user config dirs
     """
-    cookiecutters_dir = user_dir.mkdir("cookiecutters")
-    replay_dir = user_dir.mkdir("cookiecutter_replay")
+    cookiecutters_dir = user_dir.mkdir('cookiecutters')
+    replay_dir = user_dir.mkdir('cookiecutter_replay')
 
     return {
-        "cookiecutters_dir": str(cookiecutters_dir),
-        "replay_dir": str(replay_dir),
+        'cookiecutters_dir': str(cookiecutters_dir),
+        'replay_dir': str(replay_dir),
     }
 
 
-@pytest.fixture(scope="session")
+@pytest.fixture(scope='session')
 def user_config_file(user_dir, user_config_data):
     """Fixture that creates a config file called `config`.
 
@@ -174,7 +182,7 @@ def user_config_file(user_dir, user_config_data):
     :param user_config_data: Dict of config values
     :returns: String of path to config file
     """
-    config_file = user_dir.join("config")
+    config_file = user_dir.join('config')
 
     config_text = USER_CONFIG.format(**user_config_data)
     config_file.write(config_text)
@@ -184,4 +192,4 @@ def user_config_file(user_dir, user_config_data):
 @pytest.fixture(autouse=True)
 def disable_poyo_logging():
     """Fixture that disables poyo logging."""
-    logging.getLogger("poyo").setLevel(logging.WARNING)
+    logging.getLogger('poyo').setLevel(logging.WARNING)
diff --git a/tests/replay/conftest.py b/tests/replay/conftest.py
index f4e0945..0c93e1b 100644
--- a/tests/replay/conftest.py
+++ b/tests/replay/conftest.py
@@ -9,20 +9,22 @@ import pytest
 def context():
     """Fixture to return a valid context as known from a cookiecutter.json."""
     return {
-        u"cookiecutter": {
-            u"email": u"raphael@hackebrot.de",
-            u"full_name": u"Raphael Pierzina",
-            u"github_username": u"hackebrot",
-            u"version": u"0.1.0",
+        u'cookiecutter': {
+            u'email': u'raphael@hackebrot.de',
+            u'full_name': u'Raphael Pierzina',
+            u'github_username': u'hackebrot',
+            u'version': u'0.1.0',
         }
     }
 
 
 @pytest.fixture
 def replay_test_dir():
-    return "tests/test-replay/"
+    """Fixture to test directory."""
+    return 'tests/test-replay/'
 
 
 @pytest.fixture
 def mock_user_config(mocker):
-    return mocker.patch("cookiecutter.main.get_user_config")
+    """Fixture to mock user config."""
+    return mocker.patch('cookiecutter.main.get_user_config')
diff --git a/tests/replay/test_dump.py b/tests/replay/test_dump.py
index e2b32d7..4f8a8ac 100644
--- a/tests/replay/test_dump.py
+++ b/tests/replay/test_dump.py
@@ -12,24 +12,22 @@ from cookiecutter import replay
 @pytest.fixture
 def template_name():
     """Fixture to return a valid template_name."""
-    return "cookiedozer"
+    return 'cookiedozer'
 
 
 @pytest.fixture
 def replay_file(replay_test_dir, template_name):
     """Fixture to return a actual file name of the dump."""
-    file_name = "{}.json".format(template_name)
+    file_name = '{}.json'.format(template_name)
     return os.path.join(replay_test_dir, file_name)
 
 
 @pytest.fixture(autouse=True)
 def remove_replay_dump(request, replay_file):
     """Remove the replay file created by tests."""
-
     def fin_remove_replay_file():
         if os.path.exists(replay_file):
             os.remove(replay_file)
-
     request.addfinalizer(fin_remove_replay_file)
 
 
@@ -42,48 +40,51 @@ def test_type_error_if_no_template_name(replay_test_dir, context):
 def test_type_error_if_not_dict_context(replay_test_dir, template_name):
     """Test that replay.dump raises if the context is not of type dict."""
     with pytest.raises(TypeError):
-        replay.dump(replay_test_dir, template_name, "not_a_dict")
+        replay.dump(replay_test_dir, template_name, 'not_a_dict')
 
 
 def test_value_error_if_key_missing_in_context(replay_test_dir, template_name):
     """Test that replay.dump raises if the context does not contain a key \
     named 'cookiecutter'."""
     with pytest.raises(ValueError):
-        replay.dump(replay_test_dir, template_name, {"foo": "bar"})
+        replay.dump(replay_test_dir, template_name, {'foo': 'bar'})
 
 
 @pytest.fixture
 def mock_ensure_failure(mocker):
-    return mocker.patch("cookiecutter.replay.make_sure_path_exists", return_value=False)
+    return mocker.patch(
+        'cookiecutter.replay.make_sure_path_exists',
+        return_value=False
+    )
 
 
 @pytest.fixture
 def mock_ensure_success(mocker):
-    return mocker.patch("cookiecutter.replay.make_sure_path_exists", return_value=True)
+    return mocker.patch(
+        'cookiecutter.replay.make_sure_path_exists',
+        return_value=True
+    )
 
 
-def test_ioerror_if_replay_dir_creation_fails(mock_ensure_failure, replay_test_dir):
+def test_ioerror_if_replay_dir_creation_fails(
+        mock_ensure_failure, replay_test_dir):
     """Test that replay.dump raises when the replay_dir cannot be created."""
     with pytest.raises(IOError):
-        replay.dump(replay_test_dir, "foo", {"cookiecutter": {"hello": "world"}})
+        replay.dump(
+            replay_test_dir,
+            'foo', {'cookiecutter': {'hello': 'world'}}
+        )
 
     mock_ensure_failure.assert_called_once_with(replay_test_dir)
 
 
-def test_run_json_dump(
-    mocker,
-    mock_ensure_success,
-    mock_user_config,
-    template_name,
-    context,
-    replay_test_dir,
-    replay_file,
-):
+def test_run_json_dump(mocker, mock_ensure_success, mock_user_config,
+                       template_name, context, replay_test_dir, replay_file):
     """Test that replay.dump runs json.dump under the hood and that the context \
     is correctly written to the expected file in the replay_dir."""
-    spy_get_replay_file = mocker.spy(replay, "get_file_name")
+    spy_get_replay_file = mocker.spy(replay, 'get_file_name')
 
-    mock_json_dump = mocker.patch("json.dump", side_effect=json.dump)
+    mock_json_dump = mocker.patch('json.dump', side_effect=json.dump)
 
     replay.dump(replay_test_dir, template_name, context)
 
diff --git a/tests/replay/test_load.py b/tests/replay/test_load.py
index 7228c86..5f9c1f0 100644
--- a/tests/replay/test_load.py
+++ b/tests/replay/test_load.py
@@ -12,13 +12,13 @@ from cookiecutter import replay
 @pytest.fixture
 def template_name():
     """Fixture to return a valid template_name."""
-    return "cookiedozer_load"
+    return 'cookiedozer_load'
 
 
 @pytest.fixture
 def replay_file(replay_test_dir, template_name):
     """Fixture to return a actual file name of the dump."""
-    file_name = "{}.json".format(template_name)
+    file_name = '{}.json'.format(template_name)
     return os.path.join(replay_test_dir, file_name)
 
 
@@ -32,23 +32,22 @@ def test_value_error_if_key_missing_in_context(mocker, replay_test_dir):
     """Test that replay.load raises if the loaded context does not contain \
     'cookiecutter'."""
     with pytest.raises(ValueError):
-        replay.load(replay_test_dir, "invalid_replay")
+        replay.load(replay_test_dir, 'invalid_replay')
 
 
 def test_io_error_if_no_replay_file(mocker, replay_test_dir):
     """Test that replay.load raises if it cannot find a replay file."""
     with pytest.raises(IOError):
-        replay.load(replay_test_dir, "no_replay")
+        replay.load(replay_test_dir, 'no_replay')
 
 
-def test_run_json_load(
-    mocker, mock_user_config, template_name, context, replay_test_dir, replay_file,
-):
+def test_run_json_load(mocker, mock_user_config, template_name,
+                       context, replay_test_dir, replay_file):
     """Test that replay.load runs json.load under the hood and that the context \
     is correctly loaded from the file in replay_dir."""
-    spy_get_replay_file = mocker.spy(replay, "get_file_name")
+    spy_get_replay_file = mocker.spy(replay, 'get_file_name')
 
-    mock_json_load = mocker.patch("json.load", side_effect=json.load)
+    mock_json_load = mocker.patch('json.load', side_effect=json.load)
 
     loaded_context = replay.load(replay_test_dir, template_name)
 
diff --git a/tests/replay/test_replay.py b/tests/replay/test_replay.py
index 7eb64e7..1086a7a 100644
--- a/tests/replay/test_replay.py
+++ b/tests/replay/test_replay.py
@@ -10,34 +10,32 @@ from cookiecutter import replay, main, exceptions
 
 def test_get_replay_file_name():
     """Make sure that replay.get_file_name generates a valid json file path."""
-    exp_replay_file_name = os.path.join("foo", "bar.json")
-    assert replay.get_file_name("foo", "bar") == exp_replay_file_name
+    exp_replay_file_name = os.path.join('foo', 'bar.json')
+    assert replay.get_file_name('foo', 'bar') == exp_replay_file_name
 
 
-@pytest.fixture(
-    params=[
-        {"no_input": True},
-        {"extra_context": {}},
-        {"no_input": True, "extra_context": {}},
-    ]
-)
+@pytest.fixture(params=[
+    {'no_input': True},
+    {'extra_context': {}},
+    {'no_input': True, 'extra_context': {}},
+])
 def invalid_kwargs(request):
     return request.param
 
 
 def test_raise_on_invalid_mode(invalid_kwargs):
     with pytest.raises(exceptions.InvalidModeException):
-        main.cookiecutter("foo", replay=True, **invalid_kwargs)
+        main.cookiecutter('foo', replay=True, **invalid_kwargs)
 
 
 def test_main_does_not_invoke_dump_but_load(mocker):
-    mock_prompt = mocker.patch("cookiecutter.main.prompt_for_config")
-    mock_gen_context = mocker.patch("cookiecutter.main.generate_context")
-    mock_gen_files = mocker.patch("cookiecutter.main.generate_files")
-    mock_replay_dump = mocker.patch("cookiecutter.main.dump")
-    mock_replay_load = mocker.patch("cookiecutter.main.load")
+    mock_prompt = mocker.patch('cookiecutter.main.prompt_for_config')
+    mock_gen_context = mocker.patch('cookiecutter.main.generate_context')
+    mock_gen_files = mocker.patch('cookiecutter.main.generate_files')
+    mock_replay_dump = mocker.patch('cookiecutter.main.dump')
+    mock_replay_load = mocker.patch('cookiecutter.main.load')
 
-    main.cookiecutter("tests/fake-repo-tmpl/", replay=True)
+    main.cookiecutter('tests/fake-repo-tmpl/', replay=True)
 
     assert not mock_prompt.called
     assert not mock_gen_context.called
@@ -47,13 +45,13 @@ def test_main_does_not_invoke_dump_but_load(mocker):
 
 
 def test_main_does_not_invoke_load_but_dump(mocker):
-    mock_prompt = mocker.patch("cookiecutter.main.prompt_for_config")
-    mock_gen_context = mocker.patch("cookiecutter.main.generate_context")
-    mock_gen_files = mocker.patch("cookiecutter.main.generate_files")
-    mock_replay_dump = mocker.patch("cookiecutter.main.dump")
-    mock_replay_load = mocker.patch("cookiecutter.main.load")
+    mock_prompt = mocker.patch('cookiecutter.main.prompt_for_config')
+    mock_gen_context = mocker.patch('cookiecutter.main.generate_context')
+    mock_gen_files = mocker.patch('cookiecutter.main.generate_files')
+    mock_replay_dump = mocker.patch('cookiecutter.main.dump')
+    mock_replay_load = mocker.patch('cookiecutter.main.load')
 
-    main.cookiecutter("tests/fake-repo-tmpl/", replay=False)
+    main.cookiecutter('tests/fake-repo-tmpl/', replay=False)
 
     assert mock_prompt.called
     assert mock_gen_context.called
diff --git a/tests/repository/test_abbreviation_expansion.py b/tests/repository/test_abbreviation_expansion.py
index 9df551e..3d9c3ba 100644
--- a/tests/repository/test_abbreviation_expansion.py
+++ b/tests/repository/test_abbreviation_expansion.py
@@ -10,37 +10,47 @@ from cookiecutter.repository import expand_abbreviations
 
 
 def test_abbreviation_expansion():
-    input_dir = expand_abbreviations("foo", {"foo": "bar"})
-    assert input_dir == "bar"
+    input_dir = expand_abbreviations(
+        'foo', {'foo': 'bar'}
+    )
+    assert input_dir == 'bar'
 
 
 def test_abbreviation_expansion_not_an_abbreviation():
-    input_dir = expand_abbreviations("baz", {"foo": "bar"})
-    assert input_dir == "baz"
+    input_dir = expand_abbreviations(
+        'baz', {'foo': 'bar'}
+    )
+    assert input_dir == 'baz'
 
 
 def test_abbreviation_expansion_prefix():
-    input_dir = expand_abbreviations("xx:a", {"xx": "<{0}>"})
-    assert input_dir == "<a>"
+    input_dir = expand_abbreviations(
+        'xx:a', {'xx': '<{0}>'}
+    )
+    assert input_dir == '<a>'
 
 
 def test_abbreviation_expansion_builtin():
     input_dir = expand_abbreviations(
-        "gh:pydanny/cookiecutter-django", BUILTIN_ABBREVIATIONS
+        'gh:pydanny/cookiecutter-django', BUILTIN_ABBREVIATIONS
     )
-    assert input_dir == "https://github.com/pydanny/cookiecutter-django.git"
+    assert input_dir == 'https://github.com/pydanny/cookiecutter-django.git'
 
 
 def test_abbreviation_expansion_override_builtin():
-    input_dir = expand_abbreviations("gh:a", {"gh": "<{0}>"})
-    assert input_dir == "<a>"
+    input_dir = expand_abbreviations(
+        'gh:a', {'gh': '<{0}>'}
+    )
+    assert input_dir == '<a>'
 
 
 def test_abbreviation_expansion_prefix_ignores_suffix():
-    input_dir = expand_abbreviations("xx:a", {"xx": "<>"})
-    assert input_dir == "<>"
+    input_dir = expand_abbreviations(
+        'xx:a', {'xx': '<>'}
+    )
+    assert input_dir == '<>'
 
 
 def test_abbreviation_expansion_prefix_not_0_in_braces():
     with pytest.raises(IndexError):
-        expand_abbreviations("xx:a", {"xx": "{1}"})
+        expand_abbreviations('xx:a', {'xx': '{1}'})
diff --git a/tests/repository/test_determine_repo_dir_clones_repo.py b/tests/repository/test_determine_repo_dir_clones_repo.py
index 11bce70..211b672 100644
--- a/tests/repository/test_determine_repo_dir_clones_repo.py
+++ b/tests/repository/test_determine_repo_dir_clones_repo.py
@@ -9,28 +9,25 @@ import pytest
 from cookiecutter import repository, exceptions
 
 
-@pytest.mark.parametrize(
-    "template, is_url",
-    [
-        ("/path/to/zipfile.zip", False),
-        ("https://example.com/path/to/zipfile.zip", True),
-        ("http://example.com/path/to/zipfile.zip", True),
-    ],
-)
+@pytest.mark.parametrize('template, is_url', [
+    ('/path/to/zipfile.zip', False),
+    ('https://example.com/path/to/zipfile.zip', True),
+    ('http://example.com/path/to/zipfile.zip', True),
+])
 def test_zipfile_unzip(mocker, template, is_url, user_config_data):
     """`unzip()` should be called with correct args when \
     `determine_repo_dir()` is passed a zipfile, or a URL \
     to a zipfile."""
     mock_clone = mocker.patch(
-        "cookiecutter.repository.unzip",
-        return_value="tests/fake-repo-tmpl",
-        autospec=True,
+        'cookiecutter.repository.unzip',
+        return_value='tests/fake-repo-tmpl',
+        autospec=True
     )
 
     project_dir, cleanup = repository.determine_repo_dir(
         template,
         abbreviations={},
-        clone_to_dir=user_config_data["cookiecutters_dir"],
+        clone_to_dir=user_config_data['cookiecutters_dir'],
         checkout=None,
         no_input=True,
         password=None,
@@ -39,14 +36,14 @@ def test_zipfile_unzip(mocker, template, is_url, user_config_data):
     mock_clone.assert_called_once_with(
         zip_uri=template,
         is_url=is_url,
-        clone_to_dir=user_config_data["cookiecutters_dir"],
+        clone_to_dir=user_config_data['cookiecutters_dir'],
         no_input=True,
         password=None,
     )
 
     assert os.path.isdir(project_dir)
     assert cleanup
-    assert "tests/fake-repo-tmpl" == project_dir
+    assert 'tests/fake-repo-tmpl' == project_dir
 
 
 @pytest.fixture
@@ -55,43 +52,45 @@ def template_url():
 
     Note: when used, git clone is mocked.
     """
-    return "https://github.com/pytest-dev/cookiecutter-pytest-plugin.git"
+    return 'https://github.com/pytest-dev/cookiecutter-pytest-plugin.git'
 
 
-def test_repository_url_should_clone(mocker, template_url, user_config_data):
+def test_repository_url_should_clone(
+        mocker, template_url, user_config_data):
     """`clone()` should be called with correct args when \
     `determine_repo_dir()` is passed a repository template url."""
     mock_clone = mocker.patch(
-        "cookiecutter.repository.clone",
-        return_value="tests/fake-repo-tmpl",
-        autospec=True,
+        'cookiecutter.repository.clone',
+        return_value='tests/fake-repo-tmpl',
+        autospec=True
     )
 
     project_dir, cleanup = repository.determine_repo_dir(
         template_url,
         abbreviations={},
-        clone_to_dir=user_config_data["cookiecutters_dir"],
+        clone_to_dir=user_config_data['cookiecutters_dir'],
         checkout=None,
-        no_input=True,
+        no_input=True
     )
 
     mock_clone.assert_called_once_with(
         repo_url=template_url,
         checkout=None,
-        clone_to_dir=user_config_data["cookiecutters_dir"],
-        no_input=True,
+        clone_to_dir=user_config_data['cookiecutters_dir'],
+        no_input=True
     )
 
     assert os.path.isdir(project_dir)
     assert not cleanup
-    assert "tests/fake-repo-tmpl" == project_dir
+    assert 'tests/fake-repo-tmpl' == project_dir
 
 
-def test_repository_url_with_no_context_file(mocker, template_url, user_config_data):
+def test_repository_url_with_no_context_file(
+        mocker, template_url, user_config_data):
     mocker.patch(
-        "cookiecutter.repository.clone",
-        return_value="tests/fake-repo-bad",
-        autospec=True,
+        'cookiecutter.repository.clone',
+        return_value='tests/fake-repo-bad',
+        autospec=True
     )
 
     with pytest.raises(exceptions.RepositoryNotFound) as err:
@@ -100,10 +99,13 @@ def test_repository_url_with_no_context_file(mocker, template_url, user_config_d
             abbreviations={},
             clone_to_dir=None,
             checkout=None,
-            no_input=True,
+            no_input=True
         )
 
     assert str(err.value) == (
         'A valid repository for "{}" could not be found in the following '
-        "locations:\n{}".format(template_url, "tests/fake-repo-bad",)
+        'locations:\n{}'.format(
+            template_url,
+            'tests/fake-repo-bad',
+        )
     )
diff --git a/tests/repository/test_determine_repo_dir_finds_existing_cookiecutter.py b/tests/repository/test_determine_repo_dir_finds_existing_cookiecutter.py
index e543c94..6aa290c 100644
--- a/tests/repository/test_determine_repo_dir_finds_existing_cookiecutter.py
+++ b/tests/repository/test_determine_repo_dir_finds_existing_cookiecutter.py
@@ -12,28 +12,27 @@ from cookiecutter import repository
 
 @pytest.fixture
 def template():
-    return "cookiecutter-pytest-plugin"
+    return 'cookiecutter-pytest-plugin'
 
 
 @pytest.fixture
 def cloned_cookiecutter_path(user_config_data, template):
-    cookiecutters_dir = user_config_data["cookiecutters_dir"]
+    cookiecutters_dir = user_config_data['cookiecutters_dir']
 
     cloned_template_path = os.path.join(cookiecutters_dir, template)
     os.mkdir(cloned_template_path)
 
-    io.open(os.path.join(cloned_template_path, "cookiecutter.json"), "w")
+    io.open(os.path.join(cloned_template_path, 'cookiecutter.json'), 'w')
 
     return cloned_template_path
 
 
 def test_should_find_existing_cookiecutter(
-    template, user_config_data, cloned_cookiecutter_path
-):
+        template, user_config_data, cloned_cookiecutter_path):
     project_dir, cleanup = repository.determine_repo_dir(
         template,
         abbreviations={},
-        clone_to_dir=user_config_data["cookiecutters_dir"],
+        clone_to_dir=user_config_data['cookiecutters_dir'],
         checkout=None,
         no_input=True,
     )
diff --git a/tests/repository/test_determine_repo_dir_finds_subdirectories.py b/tests/repository/test_determine_repo_dir_finds_subdirectories.py
index 08c11b7..40b0068 100644
--- a/tests/repository/test_determine_repo_dir_finds_subdirectories.py
+++ b/tests/repository/test_determine_repo_dir_finds_subdirectories.py
@@ -12,21 +12,21 @@ from cookiecutter import repository, exceptions
 
 @pytest.fixture
 def template():
-    return "cookiecutter-pytest-plugin"
+    return 'cookiecutter-pytest-plugin'
 
 
 @pytest.fixture
 def cloned_cookiecutter_path(user_config_data, template):
-    cookiecutters_dir = user_config_data["cookiecutters_dir"]
+    cookiecutters_dir = user_config_data['cookiecutters_dir']
 
     cloned_template_path = os.path.join(cookiecutters_dir, template)
     if not os.path.exists(cloned_template_path):
         os.mkdir(cloned_template_path)  # might exist from other tests.
 
-    subdir_template_path = os.path.join(cloned_template_path, "my-dir")
+    subdir_template_path = os.path.join(cloned_template_path, 'my-dir')
     if not os.path.exists(subdir_template_path):
         os.mkdir(subdir_template_path)
-    io.open(os.path.join(subdir_template_path, "cookiecutter.json"), "w")
+    io.open(os.path.join(subdir_template_path, 'cookiecutter.json'), 'w')
 
     return subdir_template_path
 
@@ -34,13 +34,14 @@ def cloned_cookiecutter_path(user_config_data, template):
 def test_should_find_existing_cookiecutter(
     template, user_config_data, cloned_cookiecutter_path
 ):
+
     project_dir, cleanup = repository.determine_repo_dir(
         template,
         abbreviations={},
-        clone_to_dir=user_config_data["cookiecutters_dir"],
+        clone_to_dir=user_config_data['cookiecutters_dir'],
         checkout=None,
         no_input=True,
-        directory="my-dir",
+        directory='my-dir',
     )
 
     assert cloned_cookiecutter_path == project_dir
@@ -53,21 +54,23 @@ def test_local_repo_typo(template, user_config_data, cloned_cookiecutter_path):
         repository.determine_repo_dir(
             template,
             abbreviations={},
-            clone_to_dir=user_config_data["cookiecutters_dir"],
+            clone_to_dir=user_config_data['cookiecutters_dir'],
             checkout=None,
             no_input=True,
-            directory="wrong-dir",
+            directory='wrong-dir',
         )
 
     wrong_full_cookiecutter_path = os.path.join(
-        os.path.dirname(cloned_cookiecutter_path), "wrong-dir"
+        os.path.dirname(cloned_cookiecutter_path),
+        'wrong-dir'
     )
     assert str(err.value) == (
         'A valid repository for "{}" could not be found in the following '
-        "locations:\n{}".format(
+        'locations:\n{}'.format(
             template,
-            "\n".join(
-                [os.path.join(template, "wrong-dir"), wrong_full_cookiecutter_path,]
-            ),
+            '\n'.join([
+                os.path.join(template, 'wrong-dir'),
+                wrong_full_cookiecutter_path
+            ]),
         )
     )
diff --git a/tests/repository/test_determine_repository_should_use_local_repo.py b/tests/repository/test_determine_repository_should_use_local_repo.py
index 840ff89..470245c 100644
--- a/tests/repository/test_determine_repository_should_use_local_repo.py
+++ b/tests/repository/test_determine_repository_should_use_local_repo.py
@@ -12,35 +12,38 @@ from cookiecutter import repository, exceptions
 def test_finds_local_repo(tmpdir):
     """A valid local repository should be returned."""
     project_dir, cleanup = repository.determine_repo_dir(
-        "tests/fake-repo",
+        'tests/fake-repo',
         abbreviations={},
         clone_to_dir=str(tmpdir),
         checkout=None,
-        no_input=True,
+        no_input=True
     )
 
-    assert "tests/fake-repo" == project_dir
+    assert 'tests/fake-repo' == project_dir
     assert not cleanup
 
 
 def test_local_repo_with_no_context_raises(tmpdir):
     """A local repository without a cookiecutter.json should raise a \
     `RepositoryNotFound` exception."""
-    template_path = os.path.join("tests", "fake-repo-bad")
+    template_path = os.path.join('tests', 'fake-repo-bad')
     with pytest.raises(exceptions.RepositoryNotFound) as err:
         repository.determine_repo_dir(
             template_path,
             abbreviations={},
             clone_to_dir=str(tmpdir),
             checkout=None,
-            no_input=True,
+            no_input=True
         )
 
     assert str(err.value) == (
         'A valid repository for "{}" could not be found in the following '
-        "locations:\n{}".format(
+        'locations:\n{}'.format(
             template_path,
-            "\n".join([template_path, str(tmpdir / "tests/fake-repo-bad")]),
+            '\n'.join([
+                template_path,
+                str(tmpdir / 'tests/fake-repo-bad')
+            ]),
         )
     )
 
@@ -48,20 +51,23 @@ def test_local_repo_with_no_context_raises(tmpdir):
 def test_local_repo_typo(tmpdir):
     """An unknown local repository should raise a `RepositoryNotFound` \
     exception."""
-    template_path = os.path.join("tests", "unknown-repo")
+    template_path = os.path.join('tests', 'unknown-repo')
     with pytest.raises(exceptions.RepositoryNotFound) as err:
         repository.determine_repo_dir(
             template_path,
             abbreviations={},
             clone_to_dir=str(tmpdir),
             checkout=None,
-            no_input=True,
+            no_input=True
         )
 
     assert str(err.value) == (
         'A valid repository for "{}" could not be found in the following '
-        "locations:\n{}".format(
+        'locations:\n{}'.format(
             template_path,
-            "\n".join([template_path, str(tmpdir / "tests/unknown-repo")]),
+            '\n'.join([
+                template_path,
+                str(tmpdir / 'tests/unknown-repo')
+            ]),
         )
     )
diff --git a/tests/repository/test_is_repo_url.py b/tests/repository/test_is_repo_url.py
index d32d758..acda77f 100644
--- a/tests/repository/test_is_repo_url.py
+++ b/tests/repository/test_is_repo_url.py
@@ -6,19 +6,15 @@ import pytest
 
 from cookiecutter.config import BUILTIN_ABBREVIATIONS
 from cookiecutter.repository import (
-    is_zip_file,
-    is_repo_url,
-    expand_abbreviations,
+    is_zip_file, is_repo_url, expand_abbreviations
 )
 
 
-@pytest.fixture(
-    params=[
-        "/path/to/zipfile.zip",
-        "https://example.com/path/to/zipfile.zip",
-        "http://example.com/path/to/zipfile.zip",
-    ]
-)
+@pytest.fixture(params=[
+    '/path/to/zipfile.zip',
+    'https://example.com/path/to/zipfile.zip',
+    'http://example.com/path/to/zipfile.zip',
+])
 def zipfile(request):
     return request.param
 
@@ -28,17 +24,15 @@ def test_is_zip_file(zipfile):
     assert is_zip_file(zipfile) is True
 
 
-@pytest.fixture(
-    params=[
-        "gitolite@server:team/repo",
-        "git@github.com:audreyr/cookiecutter.git",
-        "https://github.com/audreyr/cookiecutter.git",
-        "git+https://private.com/gitrepo",
-        "hg+https://private.com/mercurialrepo",
-        "https://bitbucket.org/pokoli/cookiecutter.hg",
-        "file://server/path/to/repo.git",
-    ]
-)
+@pytest.fixture(params=[
+    'gitolite@server:team/repo',
+    'git@github.com:audreyr/cookiecutter.git',
+    'https://github.com/audreyr/cookiecutter.git',
+    'git+https://private.com/gitrepo',
+    'hg+https://private.com/mercurialrepo',
+    'https://bitbucket.org/pokoli/cookiecutter.hg',
+    'file://server/path/to/repo.git',
+])
 def remote_repo_url(request):
     return request.param
 
@@ -48,16 +42,14 @@ def test_is_repo_url_for_remote_urls(remote_repo_url):
     assert is_repo_url(remote_repo_url) is True
 
 
-@pytest.fixture(
-    params=[
-        "/audreyr/cookiecutter.git",
-        "/home/audreyr/cookiecutter",
-        (
-            "c:\\users\\appveyor\\appdata\\local\\temp\\1\\pytest-0\\"
-            "test_default_output_dir0\\template"
-        ),
-    ]
-)
+@pytest.fixture(params=[
+    '/audreyr/cookiecutter.git',
+    '/home/audreyr/cookiecutter',
+    (
+        'c:\\users\\appveyor\\appdata\\local\\temp\\1\\pytest-0\\'
+        'test_default_output_dir0\\template'
+    ),
+])
 def local_repo_url(request):
     return request.param
 
@@ -68,7 +60,7 @@ def test_is_repo_url_for_local_urls(local_repo_url):
 
 
 def test_expand_abbreviations():
-    template = "gh:audreyr/cookiecutter-pypackage"
+    template = 'gh:audreyr/cookiecutter-pypackage'
 
     # This is not a valid repo url just yet!
     # First `repository.expand_abbreviations` needs to translate it
diff --git a/tests/repository/test_repository_has_cookiecutter_json.py b/tests/repository/test_repository_has_cookiecutter_json.py
index 0988598..d9d1ec5 100644
--- a/tests/repository/test_repository_has_cookiecutter_json.py
+++ b/tests/repository/test_repository_has_cookiecutter_json.py
@@ -8,12 +8,13 @@ from cookiecutter.repository import repository_has_cookiecutter_json
 
 
 def test_valid_repository():
-    assert repository_has_cookiecutter_json("tests/fake-repo")
+    assert repository_has_cookiecutter_json('tests/fake-repo')
 
 
-@pytest.fixture(
-    params=["tests/fake-repo-bad", "tests/unknown-repo",]
-)
+@pytest.fixture(params=[
+    'tests/fake-repo-bad',
+    'tests/unknown-repo',
+])
 def invalid_repository(request):
     return request.param
 
diff --git a/tests/test-extensions/custom-extension-post/hooks/post_gen_project.py b/tests/test-extensions/custom-extension-post/hooks/post_gen_project.py
index e3d0ed5..32f30fc 100644
--- a/tests/test-extensions/custom-extension-post/hooks/post_gen_project.py
+++ b/tests/test-extensions/custom-extension-post/hooks/post_gen_project.py
@@ -4,4 +4,4 @@
 
 """Sample post-gen hook for testing that custom extensions are available and exposed methods are callable."""
 
-print("{% hello cookiecutter.name %}")
+print('{% hello cookiecutter.name %}')
diff --git a/tests/test-extensions/custom-extension-pre/hooks/pre_gen_project.py b/tests/test-extensions/custom-extension-pre/hooks/pre_gen_project.py
index 1147f0b..b93fcba 100644
--- a/tests/test-extensions/custom-extension-pre/hooks/pre_gen_project.py
+++ b/tests/test-extensions/custom-extension-pre/hooks/pre_gen_project.py
@@ -4,4 +4,4 @@
 
 """Sample pre-gen hook for testing that custom extensions are available and exposed methods are callable."""
 
-print("{% hello cookiecutter.name %}")
+print('{% hello cookiecutter.name %}')
diff --git a/tests/test-extensions/hello_extension/hello_extension.py b/tests/test-extensions/hello_extension/hello_extension.py
index ba22839..74bf6b7 100644
--- a/tests/test-extensions/hello_extension/hello_extension.py
+++ b/tests/test-extensions/hello_extension/hello_extension.py
@@ -7,17 +7,17 @@ from jinja2.ext import Extension
 
 
 class HelloExtension(Extension):
-    tags = {"hello"}
+    tags = set(['hello'])
 
     def __init__(self, environment):
         """Hello Extension Constructor"""
         super(HelloExtension, self).__init__(environment)
 
     def _hello(self, name):
-        return "Hello {name}!".format(name=name)
+        return 'Hello {name}!'.format(name=name)
 
     def parse(self, parser):
         lineno = next(parser.stream).lineno
         node = parser.parse_expression()
-        call_method = self.call_method("_hello", [node], lineno=lineno)
+        call_method = self.call_method('_hello', [node], lineno=lineno)
         return nodes.Output([call_method], lineno=lineno)
diff --git a/tests/test-pyhooks/hooks/post_gen_project.py b/tests/test-pyhooks/hooks/post_gen_project.py
index c25d458..6099354 100644
--- a/tests/test-pyhooks/hooks/post_gen_project.py
+++ b/tests/test-pyhooks/hooks/post_gen_project.py
@@ -5,6 +5,6 @@
 
 from __future__ import print_function
 
-print("pre generation hook")
-f = open("python_post.txt", "w")
+print('pre generation hook')
+f = open('python_post.txt', 'w')
 f.close()
diff --git a/tests/test-pyhooks/hooks/pre_gen_project.py b/tests/test-pyhooks/hooks/pre_gen_project.py
index bf53f1b..c2cc477 100644
--- a/tests/test-pyhooks/hooks/pre_gen_project.py
+++ b/tests/test-pyhooks/hooks/pre_gen_project.py
@@ -5,6 +5,6 @@
 
 from __future__ import print_function
 
-print("pre generation hook")
-f = open("python_pre.txt", "w")
+print('pre generation hook')
+f = open('python_pre.txt', 'w')
 f.close()
diff --git a/tests/test-pyshellhooks/hooks/post_gen_project.py b/tests/test-pyshellhooks/hooks/post_gen_project.py
index c25d458..6099354 100644
--- a/tests/test-pyshellhooks/hooks/post_gen_project.py
+++ b/tests/test-pyshellhooks/hooks/post_gen_project.py
@@ -5,6 +5,6 @@
 
 from __future__ import print_function
 
-print("pre generation hook")
-f = open("python_post.txt", "w")
+print('pre generation hook')
+f = open('python_post.txt', 'w')
 f.close()
diff --git a/tests/test-pyshellhooks/hooks/pre_gen_project.py b/tests/test-pyshellhooks/hooks/pre_gen_project.py
index bf53f1b..c2cc477 100644
--- a/tests/test-pyshellhooks/hooks/pre_gen_project.py
+++ b/tests/test-pyshellhooks/hooks/pre_gen_project.py
@@ -5,6 +5,6 @@
 
 from __future__ import print_function
 
-print("pre generation hook")
-f = open("python_pre.txt", "w")
+print('pre generation hook')
+f = open('python_pre.txt', 'w')
 f.close()
diff --git a/tests/test_abort_generate_on_hook_error.py b/tests/test_abort_generate_on_hook_error.py
index 5fd7d94..6d5f4c5 100644
--- a/tests/test_abort_generate_on_hook_error.py
+++ b/tests/test_abort_generate_on_hook_error.py
@@ -13,41 +13,41 @@ from cookiecutter import exceptions
 from cookiecutter import generate
 
 
-@pytest.mark.usefixtures("clean_system")
+@pytest.mark.usefixtures('clean_system')
 def test_pre_gen_hook(tmpdir):
     context = {
-        "cookiecutter": {
+        'cookiecutter': {
             "repo_dir": "foobar",
             "abort_pre_gen": "yes",
-            "abort_post_gen": "no",
+            "abort_post_gen": "no"
         }
     }
 
     with pytest.raises(exceptions.FailedHookException):
         generate.generate_files(
-            repo_dir="tests/hooks-abort-render",
+            repo_dir='tests/hooks-abort-render',
             context=context,
-            output_dir=str(tmpdir),
+            output_dir=str(tmpdir)
         )
 
-    assert not tmpdir.join("foobar").isdir()
+    assert not tmpdir.join('foobar').isdir()
 
 
-@pytest.mark.usefixtures("clean_system")
+@pytest.mark.usefixtures('clean_system')
 def test_post_gen_hook(tmpdir):
     context = {
-        "cookiecutter": {
+        'cookiecutter': {
             "repo_dir": "foobar",
             "abort_pre_gen": "no",
-            "abort_post_gen": "yes",
+            "abort_post_gen": "yes"
         }
     }
 
     with pytest.raises(exceptions.FailedHookException):
         generate.generate_files(
-            repo_dir="tests/hooks-abort-render",
+            repo_dir='tests/hooks-abort-render',
             context=context,
-            output_dir=str(tmpdir),
+            output_dir=str(tmpdir)
         )
 
-    assert not tmpdir.join("foobar").isdir()
+    assert not tmpdir.join('foobar').isdir()
diff --git a/tests/test_cli.py b/tests/test_cli.py
index 2ff6bdc..dbaceca 100644
--- a/tests/test_cli.py
+++ b/tests/test_cli.py
@@ -13,7 +13,7 @@ from cookiecutter.__main__ import main
 from cookiecutter.main import cookiecutter
 
 
-@pytest.fixture(scope="session")
+@pytest.fixture(scope='session')
 def cli_runner():
     """Fixture that returns a helper function to run the cookiecutter cli."""
     runner = CliRunner()
@@ -28,21 +28,19 @@ def cli_runner():
 @pytest.fixture
 def remove_fake_project_dir(request):
     """Remove the fake project directory created during the tests."""
-
     def fin_remove_fake_project_dir():
-        if os.path.isdir("fake-project"):
-            utils.rmtree("fake-project")
-
+        if os.path.isdir('fake-project'):
+            utils.rmtree('fake-project')
     request.addfinalizer(fin_remove_fake_project_dir)
 
 
 @pytest.fixture
 def make_fake_project_dir(request):
     """Create a fake project to be overwritten in the according tests."""
-    os.makedirs("fake-project")
+    os.makedirs('fake-project')
 
 
-@pytest.fixture(params=["-V", "--version"])
+@pytest.fixture(params=['-V', '--version'])
 def version_cli_flag(request):
     return request.param
 
@@ -50,41 +48,43 @@ def version_cli_flag(request):
 def test_cli_version(cli_runner, version_cli_flag):
     result = cli_runner(version_cli_flag)
     assert result.exit_code == 0
-    assert result.output.startswith("Cookiecutter")
+    assert result.output.startswith('Cookiecutter')
 
 
-@pytest.mark.usefixtures("make_fake_project_dir", "remove_fake_project_dir")
+@pytest.mark.usefixtures('make_fake_project_dir', 'remove_fake_project_dir')
 def test_cli_error_on_existing_output_directory(cli_runner):
-    result = cli_runner("tests/fake-repo-pre/", "--no-input")
+    result = cli_runner('tests/fake-repo-pre/', '--no-input')
     assert result.exit_code != 0
     expected_error_msg = 'Error: "fake-project" directory already exists\n'
     assert result.output == expected_error_msg
 
 
-@pytest.mark.usefixtures("remove_fake_project_dir")
+@pytest.mark.usefixtures('remove_fake_project_dir')
 def test_cli(cli_runner):
-    result = cli_runner("tests/fake-repo-pre/", "--no-input")
+    result = cli_runner('tests/fake-repo-pre/', '--no-input')
     assert result.exit_code == 0
-    assert os.path.isdir("fake-project")
-    with open(os.path.join("fake-project", "README.rst")) as f:
-        assert "Project name: **Fake Project**" in f.read()
+    assert os.path.isdir('fake-project')
+    with open(os.path.join('fake-project', 'README.rst')) as f:
+        assert 'Project name: **Fake Project**' in f.read()
 
 
-@pytest.mark.usefixtures("remove_fake_project_dir")
+@pytest.mark.usefixtures('remove_fake_project_dir')
 def test_cli_verbose(cli_runner):
-    result = cli_runner("tests/fake-repo-pre/", "--no-input", "-v")
+    result = cli_runner('tests/fake-repo-pre/', '--no-input', '-v')
     assert result.exit_code == 0
-    assert os.path.isdir("fake-project")
-    with open(os.path.join("fake-project", "README.rst")) as f:
-        assert "Project name: **Fake Project**" in f.read()
+    assert os.path.isdir('fake-project')
+    with open(os.path.join('fake-project', 'README.rst')) as f:
+        assert 'Project name: **Fake Project**' in f.read()
 
 
-@pytest.mark.usefixtures("remove_fake_project_dir")
+@pytest.mark.usefixtures('remove_fake_project_dir')
 def test_cli_replay(mocker, cli_runner):
-    mock_cookiecutter = mocker.patch("cookiecutter.cli.cookiecutter")
+    mock_cookiecutter = mocker.patch(
+        'cookiecutter.cli.cookiecutter'
+    )
 
-    template_path = "tests/fake-repo-pre/"
-    result = cli_runner(template_path, "--replay", "-v")
+    template_path = 'tests/fake-repo-pre/'
+    result = cli_runner(template_path, '--replay', '-v')
 
     assert result.exit_code == 0
     mock_cookiecutter.assert_called_once_with(
@@ -93,7 +93,7 @@ def test_cli_replay(mocker, cli_runner):
         False,
         replay=True,
         overwrite_if_exists=False,
-        output_dir=".",
+        output_dir='.',
         config_file=None,
         default_config=False,
         extra_context=None,
@@ -102,19 +102,21 @@ def test_cli_replay(mocker, cli_runner):
     )
 
 
-@pytest.mark.usefixtures("remove_fake_project_dir")
+@pytest.mark.usefixtures('remove_fake_project_dir')
 def test_cli_exit_on_noinput_and_replay(mocker, cli_runner):
     mock_cookiecutter = mocker.patch(
-        "cookiecutter.cli.cookiecutter", side_effect=cookiecutter
+        'cookiecutter.cli.cookiecutter',
+        side_effect=cookiecutter
     )
 
-    template_path = "tests/fake-repo-pre/"
-    result = cli_runner(template_path, "--no-input", "--replay", "-v")
+    template_path = 'tests/fake-repo-pre/'
+    result = cli_runner(template_path, '--no-input', '--replay', '-v')
 
     assert result.exit_code == 1
 
     expected_error_msg = (
-        "You can not use both replay and no_input or extra_context " "at the same time."
+        "You can not use both replay and no_input or extra_context "
+        "at the same time."
     )
 
     assert expected_error_msg in result.output
@@ -125,7 +127,7 @@ def test_cli_exit_on_noinput_and_replay(mocker, cli_runner):
         True,
         replay=True,
         overwrite_if_exists=False,
-        output_dir=".",
+        output_dir='.',
         config_file=None,
         default_config=False,
         extra_context=None,
@@ -134,21 +136,21 @@ def test_cli_exit_on_noinput_and_replay(mocker, cli_runner):
     )
 
 
-@pytest.fixture(params=["-f", "--overwrite-if-exists"])
+@pytest.fixture(params=['-f', '--overwrite-if-exists'])
 def overwrite_cli_flag(request):
     return request.param
 
 
-@pytest.mark.usefixtures("remove_fake_project_dir")
+@pytest.mark.usefixtures('remove_fake_project_dir')
 def test_run_cookiecutter_on_overwrite_if_exists_and_replay(
-    mocker, cli_runner, overwrite_cli_flag
-):
+        mocker, cli_runner, overwrite_cli_flag):
     mock_cookiecutter = mocker.patch(
-        "cookiecutter.cli.cookiecutter", side_effect=cookiecutter
+        'cookiecutter.cli.cookiecutter',
+        side_effect=cookiecutter
     )
 
-    template_path = "tests/fake-repo-pre/"
-    result = cli_runner(template_path, "--replay", "-v", overwrite_cli_flag)
+    template_path = 'tests/fake-repo-pre/'
+    result = cli_runner(template_path, '--replay', '-v', overwrite_cli_flag)
 
     assert result.exit_code == 0
 
@@ -158,7 +160,7 @@ def test_run_cookiecutter_on_overwrite_if_exists_and_replay(
         False,
         replay=True,
         overwrite_if_exists=True,
-        output_dir=".",
+        output_dir='.',
         config_file=None,
         default_config=False,
         extra_context=None,
@@ -167,38 +169,49 @@ def test_run_cookiecutter_on_overwrite_if_exists_and_replay(
     )
 
 
-@pytest.mark.usefixtures("remove_fake_project_dir")
+@pytest.mark.usefixtures('remove_fake_project_dir')
 def test_cli_overwrite_if_exists_when_output_dir_does_not_exist(
-    cli_runner, overwrite_cli_flag
-):
+        cli_runner, overwrite_cli_flag):
 
-    result = cli_runner("tests/fake-repo-pre/", "--no-input", overwrite_cli_flag,)
+    result = cli_runner(
+        'tests/fake-repo-pre/',
+        '--no-input',
+        overwrite_cli_flag,
+    )
 
     assert result.exit_code == 0
-    assert os.path.isdir("fake-project")
+    assert os.path.isdir('fake-project')
 
 
-@pytest.mark.usefixtures("make_fake_project_dir", "remove_fake_project_dir")
-def test_cli_overwrite_if_exists_when_output_dir_exists(cli_runner, overwrite_cli_flag):
-    result = cli_runner("tests/fake-repo-pre/", "--no-input", overwrite_cli_flag,)
+@pytest.mark.usefixtures('make_fake_project_dir', 'remove_fake_project_dir')
+def test_cli_overwrite_if_exists_when_output_dir_exists(
+        cli_runner, overwrite_cli_flag):
+
+    result = cli_runner(
+        'tests/fake-repo-pre/',
+        '--no-input',
+        overwrite_cli_flag,
+    )
     assert result.exit_code == 0
-    assert os.path.isdir("fake-project")
+    assert os.path.isdir('fake-project')
 
 
-@pytest.fixture(params=["-o", "--output-dir"])
+@pytest.fixture(params=['-o', '--output-dir'])
 def output_dir_flag(request):
     return request.param
 
 
 @pytest.fixture
 def output_dir(tmpdir):
-    return str(tmpdir.mkdir("output"))
+    return str(tmpdir.mkdir('output'))
 
 
 def test_cli_output_dir(mocker, cli_runner, output_dir_flag, output_dir):
-    mock_cookiecutter = mocker.patch("cookiecutter.cli.cookiecutter")
+    mock_cookiecutter = mocker.patch(
+        'cookiecutter.cli.cookiecutter'
+    )
 
-    template_path = "tests/fake-repo-pre/"
+    template_path = 'tests/fake-repo-pre/'
     result = cli_runner(template_path, output_dir_flag, output_dir)
 
     assert result.exit_code == 0
@@ -217,7 +230,7 @@ def test_cli_output_dir(mocker, cli_runner, output_dir_flag, output_dir):
     )
 
 
-@pytest.fixture(params=["-h", "--help", "help"])
+@pytest.fixture(params=['-h', '--help', 'help'])
 def help_cli_flag(request):
     return request.param
 
@@ -225,19 +238,21 @@ def help_cli_flag(request):
 def test_cli_help(cli_runner, help_cli_flag):
     result = cli_runner(help_cli_flag)
     assert result.exit_code == 0
-    assert result.output.startswith("Usage")
+    assert result.output.startswith('Usage')
 
 
 @pytest.fixture
 def user_config_path(tmpdir):
-    return str(tmpdir.join("tests/config.yaml"))
+    return str(tmpdir.join('tests/config.yaml'))
 
 
 def test_user_config(mocker, cli_runner, user_config_path):
-    mock_cookiecutter = mocker.patch("cookiecutter.cli.cookiecutter")
+    mock_cookiecutter = mocker.patch(
+        'cookiecutter.cli.cookiecutter'
+    )
 
-    template_path = "tests/fake-repo-pre/"
-    result = cli_runner(template_path, "--config-file", user_config_path)
+    template_path = 'tests/fake-repo-pre/'
+    result = cli_runner(template_path, '--config-file', user_config_path)
 
     assert result.exit_code == 0
     mock_cookiecutter.assert_called_once_with(
@@ -246,7 +261,7 @@ def test_user_config(mocker, cli_runner, user_config_path):
         False,
         replay=False,
         overwrite_if_exists=False,
-        output_dir=".",
+        output_dir='.',
         config_file=user_config_path,
         default_config=False,
         extra_context=None,
@@ -256,11 +271,16 @@ def test_user_config(mocker, cli_runner, user_config_path):
 
 
 def test_default_user_config_overwrite(mocker, cli_runner, user_config_path):
-    mock_cookiecutter = mocker.patch("cookiecutter.cli.cookiecutter")
+    mock_cookiecutter = mocker.patch(
+        'cookiecutter.cli.cookiecutter'
+    )
 
-    template_path = "tests/fake-repo-pre/"
+    template_path = 'tests/fake-repo-pre/'
     result = cli_runner(
-        template_path, "--config-file", user_config_path, "--default-config",
+        template_path,
+        '--config-file',
+        user_config_path,
+        '--default-config',
     )
 
     assert result.exit_code == 0
@@ -270,7 +290,7 @@ def test_default_user_config_overwrite(mocker, cli_runner, user_config_path):
         False,
         replay=False,
         overwrite_if_exists=False,
-        output_dir=".",
+        output_dir='.',
         config_file=user_config_path,
         default_config=True,
         extra_context=None,
@@ -280,10 +300,12 @@ def test_default_user_config_overwrite(mocker, cli_runner, user_config_path):
 
 
 def test_default_user_config(mocker, cli_runner):
-    mock_cookiecutter = mocker.patch("cookiecutter.cli.cookiecutter")
+    mock_cookiecutter = mocker.patch(
+        'cookiecutter.cli.cookiecutter'
+    )
 
-    template_path = "tests/fake-repo-pre/"
-    result = cli_runner(template_path, "--default-config")
+    template_path = 'tests/fake-repo-pre/'
+    result = cli_runner(template_path, '--default-config')
 
     assert result.exit_code == 0
     mock_cookiecutter.assert_called_once_with(
@@ -292,7 +314,7 @@ def test_default_user_config(mocker, cli_runner):
         False,
         replay=False,
         overwrite_if_exists=False,
-        output_dir=".",
+        output_dir='.',
         config_file=None,
         default_config=True,
         extra_context=None,
@@ -302,11 +324,15 @@ def test_default_user_config(mocker, cli_runner):
 
 
 def test_echo_undefined_variable_error(tmpdir, cli_runner):
-    output_dir = str(tmpdir.mkdir("output"))
-    template_path = "tests/undefined-variable/file-name/"
+    output_dir = str(tmpdir.mkdir('output'))
+    template_path = 'tests/undefined-variable/file-name/'
 
     result = cli_runner(
-        "--no-input", "--default-config", "--output-dir", output_dir, template_path,
+        '--no-input',
+        '--default-config',
+        '--output-dir',
+        output_dir,
+        template_path,
     )
 
     assert result.exit_code == 1
@@ -315,15 +341,16 @@ def test_echo_undefined_variable_error(tmpdir, cli_runner):
     assert error in result.output
 
     message = (
-        "Error message: 'collections.OrderedDict object' " "has no attribute 'foobar'"
+        "Error message: 'collections.OrderedDict object' "
+        "has no attribute 'foobar'"
     )
     assert message in result.output
 
     context = {
-        "cookiecutter": {
-            "github_username": "hackebrot",
-            "project_slug": "testproject",
-            "_template": template_path,
+        'cookiecutter': {
+            'github_username': 'hackebrot',
+            'project_slug': 'testproject',
+            '_template': template_path
         }
     }
     context_str = json.dumps(context, indent=4, sort_keys=True)
@@ -331,50 +358,63 @@ def test_echo_undefined_variable_error(tmpdir, cli_runner):
 
 
 def test_echo_unknown_extension_error(tmpdir, cli_runner):
-    output_dir = str(tmpdir.mkdir("output"))
-    template_path = "tests/test-extensions/unknown/"
+    output_dir = str(tmpdir.mkdir('output'))
+    template_path = 'tests/test-extensions/unknown/'
 
     result = cli_runner(
-        "--no-input", "--default-config", "--output-dir", output_dir, template_path,
+        '--no-input',
+        '--default-config',
+        '--output-dir',
+        output_dir,
+        template_path,
     )
 
     assert result.exit_code == 1
 
-    assert "Unable to load extension: " in result.output
+    assert 'Unable to load extension: ' in result.output
 
 
-@pytest.mark.usefixtures("remove_fake_project_dir")
+@pytest.mark.usefixtures('remove_fake_project_dir')
 def test_cli_extra_context(cli_runner):
     result = cli_runner(
-        "tests/fake-repo-pre/", "--no-input", "-v", "project_name=Awesomez",
+        'tests/fake-repo-pre/',
+        '--no-input',
+        '-v',
+        'project_name=Awesomez',
     )
     assert result.exit_code == 0
-    assert os.path.isdir("fake-project")
-    with open(os.path.join("fake-project", "README.rst")) as f:
-        assert "Project name: **Awesomez**" in f.read()
+    assert os.path.isdir('fake-project')
+    with open(os.path.join('fake-project', 'README.rst')) as f:
+        assert 'Project name: **Awesomez**' in f.read()
 
 
-@pytest.mark.usefixtures("remove_fake_project_dir")
+@pytest.mark.usefixtures('remove_fake_project_dir')
 def test_cli_extra_context_invalid_format(cli_runner):
     result = cli_runner(
-        "tests/fake-repo-pre/", "--no-input", "-v", "ExtraContextWithNoEqualsSoInvalid",
+        'tests/fake-repo-pre/',
+        '--no-input',
+        '-v',
+        'ExtraContextWithNoEqualsSoInvalid',
     )
     assert result.exit_code == 2
     assert 'Error: Invalid value for "[EXTRA_CONTEXT]..."' in result.output
-    assert "should contain items of the form key=value" in result.output
+    assert 'should contain items of the form key=value' in result.output
 
 
 @pytest.fixture
 def debug_file(tmpdir):
-    return tmpdir / "fake-repo.log"
+    return tmpdir / 'fake-repo.log'
 
 
-@pytest.mark.usefixtures("remove_fake_project_dir")
+@pytest.mark.usefixtures('remove_fake_project_dir')
 def test_debug_file_non_verbose(cli_runner, debug_file):
     assert not debug_file.exists()
 
     result = cli_runner(
-        "--no-input", "--debug-file", str(debug_file), "tests/fake-repo-pre/",
+        '--no-input',
+        '--debug-file',
+        str(debug_file),
+        'tests/fake-repo-pre/',
     )
     assert result.exit_code == 0
 
@@ -388,16 +428,16 @@ def test_debug_file_non_verbose(cli_runner, debug_file):
     assert context_log not in result.output
 
 
-@pytest.mark.usefixtures("remove_fake_project_dir")
+@pytest.mark.usefixtures('remove_fake_project_dir')
 def test_debug_file_verbose(cli_runner, debug_file):
     assert not debug_file.exists()
 
     result = cli_runner(
-        "--verbose",
-        "--no-input",
-        "--debug-file",
+        '--verbose',
+        '--no-input',
+        '--debug-file',
         str(debug_file),
-        "tests/fake-repo-pre/",
+        'tests/fake-repo-pre/',
     )
     assert result.exit_code == 0
 
@@ -411,12 +451,15 @@ def test_debug_file_verbose(cli_runner, debug_file):
     assert context_log in result.output
 
 
-@pytest.mark.usefixtures("remove_fake_project_dir")
+@pytest.mark.usefixtures('remove_fake_project_dir')
 def test_directory_repo(cli_runner):
     result = cli_runner(
-        "tests/fake-repo-dir/", "--no-input", "-v", "--directory=my-dir",
+        'tests/fake-repo-dir/',
+        '--no-input',
+        '-v',
+        '--directory=my-dir',
     )
     assert result.exit_code == 0
-    assert os.path.isdir("fake-project")
-    with open(os.path.join("fake-project", "README.rst")) as f:
-        assert "Project name: **Fake Project**" in f.read()
+    assert os.path.isdir('fake-project')
+    with open(os.path.join('fake-project', 'README.rst')) as f:
+        assert 'Project name: **Fake Project**' in f.read()
diff --git a/tests/test_cookiecutter_invocation.py b/tests/test_cookiecutter_invocation.py
index 0475fbd..885c9a2 100644
--- a/tests/test_cookiecutter_invocation.py
+++ b/tests/test_cookiecutter_invocation.py
@@ -17,10 +17,10 @@ from cookiecutter import utils
 
 
 def test_should_raise_error_without_template_arg(monkeypatch, capfd):
-    monkeypatch.setenv("PYTHONPATH", ".")
+    monkeypatch.setenv('PYTHONPATH', '.')
 
     with pytest.raises(subprocess.CalledProcessError):
-        subprocess.check_call([sys.executable, "-m", "cookiecutter.cli"])
+        subprocess.check_call([sys.executable, '-m', 'cookiecutter.cli'])
 
     _, err = capfd.readouterr()
     exp_message = 'Error: Missing argument "TEMPLATE".'
@@ -30,29 +30,26 @@ def test_should_raise_error_without_template_arg(monkeypatch, capfd):
 @pytest.fixture
 def project_dir(request):
     """Remove the rendered project directory created by the test."""
-    rendered_dir = "fake-project-templated"
+    rendered_dir = 'fake-project-templated'
 
     def remove_generated_project():
         if os.path.isdir(rendered_dir):
             utils.rmtree(rendered_dir)
-
     request.addfinalizer(remove_generated_project)
 
     return rendered_dir
 
 
-@pytest.mark.usefixtures("clean_system")
+@pytest.mark.usefixtures('clean_system')
 def test_should_invoke_main(monkeypatch, project_dir):
-    monkeypatch.setenv("PYTHONPATH", ".")
-
-    subprocess.check_call(
-        [
-            sys.executable,
-            "-m",
-            "cookiecutter.cli",
-            "tests/fake-repo-tmpl",
-            "--no-input",
-        ]
-    )
+    monkeypatch.setenv('PYTHONPATH', '.')
+
+    subprocess.check_call([
+        sys.executable,
+        '-m',
+        'cookiecutter.cli',
+        'tests/fake-repo-tmpl',
+        '--no-input'
+    ])
 
     assert os.path.isdir(project_dir)
diff --git a/tests/test_cookiecutter_local_no_input.py b/tests/test_cookiecutter_local_no_input.py
index 8e3bc38..0ce9c4e 100644
--- a/tests/test_cookiecutter_local_no_input.py
+++ b/tests/test_cookiecutter_local_no_input.py
@@ -17,78 +17,76 @@ import pytest
 from cookiecutter import main, utils
 
 
-@pytest.fixture(scope="function")
+@pytest.fixture(scope='function')
 def remove_additional_dirs(request):
     """Remove special directories which are created during the tests."""
-
     def fin_remove_additional_dirs():
-        if os.path.isdir("fake-project"):
-            utils.rmtree("fake-project")
-        if os.path.isdir("fake-project-extra"):
-            utils.rmtree("fake-project-extra")
-        if os.path.isdir("fake-project-templated"):
-            utils.rmtree("fake-project-templated")
-        if os.path.isdir("fake-project-dict"):
-            utils.rmtree("fake-project-dict")
-        if os.path.isdir("fake-tmp"):
-            utils.rmtree("fake-tmp")
-
+        if os.path.isdir('fake-project'):
+            utils.rmtree('fake-project')
+        if os.path.isdir('fake-project-extra'):
+            utils.rmtree('fake-project-extra')
+        if os.path.isdir('fake-project-templated'):
+            utils.rmtree('fake-project-templated')
+        if os.path.isdir('fake-project-dict'):
+            utils.rmtree('fake-project-dict')
+        if os.path.isdir('fake-tmp'):
+            utils.rmtree('fake-tmp')
     request.addfinalizer(fin_remove_additional_dirs)
 
 
-@pytest.fixture(params=["tests/fake-repo-pre/", "tests/fake-repo-pre"])
+@pytest.fixture(params=['tests/fake-repo-pre/', 'tests/fake-repo-pre'])
 def bake(request):
     """Run cookiecutter with the given input_dir path."""
     main.cookiecutter(request.param, no_input=True)
 
 
-@pytest.mark.usefixtures("clean_system", "remove_additional_dirs", "bake")
+@pytest.mark.usefixtures('clean_system', 'remove_additional_dirs', 'bake')
 def test_cookiecutter():
-    assert os.path.isdir("tests/fake-repo-pre/{{cookiecutter.repo_name}}")
-    assert not os.path.isdir("tests/fake-repo-pre/fake-project")
-    assert os.path.isdir("fake-project")
-    assert os.path.isfile("fake-project/README.rst")
-    assert not os.path.exists("fake-project/json/")
+    assert os.path.isdir('tests/fake-repo-pre/{{cookiecutter.repo_name}}')
+    assert not os.path.isdir('tests/fake-repo-pre/fake-project')
+    assert os.path.isdir('fake-project')
+    assert os.path.isfile('fake-project/README.rst')
+    assert not os.path.exists('fake-project/json/')
 
 
-@pytest.mark.usefixtures("clean_system", "remove_additional_dirs")
+@pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
 def test_cookiecutter_no_input_extra_context():
     """Call `cookiecutter()` with `no_input=True` and `extra_context"""
     main.cookiecutter(
-        "tests/fake-repo-pre",
+        'tests/fake-repo-pre',
         no_input=True,
-        extra_context={"repo_name": "fake-project-extra"},
+        extra_context={'repo_name': 'fake-project-extra'}
     )
-    assert os.path.isdir("fake-project-extra")
+    assert os.path.isdir('fake-project-extra')
 
 
-@pytest.mark.usefixtures("clean_system", "remove_additional_dirs")
+@pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
 def test_cookiecutter_templated_context():
     """Call `cookiecutter()` with `no_input=True` and templates in the \
     cookiecutter.json file"""
-    main.cookiecutter("tests/fake-repo-tmpl", no_input=True)
-    assert os.path.isdir("fake-project-templated")
+    main.cookiecutter(
+        'tests/fake-repo-tmpl',
+        no_input=True
+    )
+    assert os.path.isdir('fake-project-templated')
 
 
-@pytest.mark.usefixtures("clean_system", "remove_additional_dirs")
+@pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
 def test_cookiecutter_no_input_return_project_dir():
     """Call `cookiecutter()` with `no_input=True`."""
-    project_dir = main.cookiecutter("tests/fake-repo-pre", no_input=True)
-    assert project_dir == os.path.abspath("fake-project")
+    project_dir = main.cookiecutter('tests/fake-repo-pre', no_input=True)
+    assert project_dir == os.path.abspath('fake-project')
 
 
-@pytest.mark.usefixtures("clean_system", "remove_additional_dirs")
+@pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
 def test_cookiecutter_dict_values_in_context():
-    project_dir = main.cookiecutter("tests/fake-repo-dict", no_input=True)
-    assert project_dir == os.path.abspath("fake-project-dict")
+    project_dir = main.cookiecutter('tests/fake-repo-dict', no_input=True)
+    assert project_dir == os.path.abspath('fake-project-dict')
 
-    with open(os.path.join(project_dir, "README.md")) as fh:
+    with open(os.path.join(project_dir, 'README.md')) as fh:
         contents = fh.read()
 
-    assert (
-        contents
-        == textwrap.dedent(
-            """
+    assert contents == textwrap.dedent("""
         # README
 
 
@@ -123,25 +121,32 @@ def test_cookiecutter_dict_values_in_context():
           </dd>
         </dl>
 
-    """
-        ).lstrip()
-    )
+    """).lstrip()
 
 
-@pytest.mark.usefixtures("clean_system", "remove_additional_dirs")
+@pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
 def test_cookiecutter_template_cleanup(mocker):
     """Call `cookiecutter()` with `no_input=True` and templates in the \
     cookiecutter.json file"""
-    mocker.patch("tempfile.mkdtemp", return_value="fake-tmp", autospec=True)
+    mocker.patch(
+        'tempfile.mkdtemp',
+        return_value='fake-tmp',
+        autospec=True
+    )
 
     mocker.patch(
-        "cookiecutter.utils.prompt_and_delete", return_value=True, autospec=True,
+        'cookiecutter.utils.prompt_and_delete',
+        return_value=True,
+        autospec=True
     )
 
-    main.cookiecutter("tests/files/fake-repo-tmpl.zip", no_input=True)
-    assert os.path.isdir("fake-project-templated")
+    main.cookiecutter(
+        'tests/files/fake-repo-tmpl.zip',
+        no_input=True
+    )
+    assert os.path.isdir('fake-project-templated')
 
     # The tmp directory will still exist, but the
     # extracted template directory *in* the temp directory will not.
-    assert os.path.exists("fake-tmp")
-    assert not os.path.exists("fake-tmp/fake-repo-tmpl")
+    assert os.path.exists('fake-tmp')
+    assert not os.path.exists('fake-tmp/fake-repo-tmpl')
diff --git a/tests/test_cookiecutter_local_with_input.py b/tests/test_cookiecutter_local_with_input.py
index 559244b..bb24f6d 100644
--- a/tests/test_cookiecutter_local_with_input.py
+++ b/tests/test_cookiecutter_local_with_input.py
@@ -15,41 +15,41 @@ import pytest
 from cookiecutter import main, utils
 
 
-@pytest.fixture(scope="function")
+@pytest.fixture(scope='function')
 def remove_additional_dirs(request):
     """Remove special directories which are created during the tests."""
-
     def fin_remove_additional_dirs():
-        if os.path.isdir("fake-project"):
-            utils.rmtree("fake-project")
-        if os.path.isdir("fake-project-input-extra"):
-            utils.rmtree("fake-project-input-extra")
-
+        if os.path.isdir('fake-project'):
+            utils.rmtree('fake-project')
+        if os.path.isdir('fake-project-input-extra'):
+            utils.rmtree('fake-project-input-extra')
     request.addfinalizer(fin_remove_additional_dirs)
 
 
-@pytest.mark.usefixtures("clean_system", "remove_additional_dirs")
+@pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
 def test_cookiecutter_local_with_input(monkeypatch):
     monkeypatch.setattr(
-        "cookiecutter.prompt.read_user_variable", lambda var, default: default
+        'cookiecutter.prompt.read_user_variable',
+        lambda var, default: default
     )
-    main.cookiecutter("tests/fake-repo-pre/", no_input=False)
-    assert os.path.isdir("tests/fake-repo-pre/{{cookiecutter.repo_name}}")
-    assert not os.path.isdir("tests/fake-repo-pre/fake-project")
-    assert os.path.isdir("fake-project")
-    assert os.path.isfile("fake-project/README.rst")
-    assert not os.path.exists("fake-project/json/")
+    main.cookiecutter('tests/fake-repo-pre/', no_input=False)
+    assert os.path.isdir('tests/fake-repo-pre/{{cookiecutter.repo_name}}')
+    assert not os.path.isdir('tests/fake-repo-pre/fake-project')
+    assert os.path.isdir('fake-project')
+    assert os.path.isfile('fake-project/README.rst')
+    assert not os.path.exists('fake-project/json/')
 
 
-@pytest.mark.usefixtures("clean_system", "remove_additional_dirs")
+@pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
 def test_cookiecutter_input_extra_context(monkeypatch):
     """Call `cookiecutter()` with `no_input=False` and `extra_context`"""
     monkeypatch.setattr(
-        "cookiecutter.prompt.read_user_variable", lambda var, default: default
+        'cookiecutter.prompt.read_user_variable',
+        lambda var, default: default
     )
     main.cookiecutter(
-        "tests/fake-repo-pre",
+        'tests/fake-repo-pre',
         no_input=False,
-        extra_context={"repo_name": "fake-project-input-extra"},
+        extra_context={'repo_name': 'fake-project-input-extra'}
     )
-    assert os.path.isdir("fake-project-input-extra")
+    assert os.path.isdir('fake-project-input-extra')
diff --git a/tests/test_custom_extensions_in_hooks.py b/tests/test_custom_extensions_in_hooks.py
index a36dec8..ab2727e 100644
--- a/tests/test_custom_extensions_in_hooks.py
+++ b/tests/test_custom_extensions_in_hooks.py
@@ -15,23 +15,28 @@ import pytest
 from cookiecutter import main
 
 
-@pytest.fixture(
-    params=["custom-extension-pre", "custom-extension-post",],
-    ids=["pre_gen_hook", "post_gen_hook",],
-)
+@pytest.fixture(params=[
+    'custom-extension-pre',
+    'custom-extension-post',
+], ids=[
+    'pre_gen_hook',
+    'post_gen_hook',
+])
 def template(request):
-    return "tests/test-extensions/" + request.param
+    return 'tests/test-extensions/' + request.param
 
 
 @pytest.fixture
 def output_dir(tmpdir):
-    return str(tmpdir.mkdir("hello"))
+    return str(tmpdir.mkdir('hello'))
 
 
 @pytest.fixture(autouse=True)
 def modify_syspath(monkeypatch):
     # Make sure that the custom extension can be loaded
-    monkeypatch.syspath_prepend("tests/test-extensions/hello_extension")
+    monkeypatch.syspath_prepend(
+        'tests/test-extensions/hello_extension'
+    )
 
 
 def test_hook_with_extension(template, output_dir):
@@ -39,12 +44,15 @@ def test_hook_with_extension(template, output_dir):
         template,
         no_input=True,
         output_dir=output_dir,
-        extra_context={"project_slug": "foobar", "name": "Cookiemonster",},
+        extra_context={
+            'project_slug': 'foobar',
+            'name': 'Cookiemonster',
+        },
     )
 
-    readme_file = os.path.join(project_dir, "README.rst")
+    readme_file = os.path.join(project_dir, 'README.rst')
 
-    with codecs.open(readme_file, encoding="utf8") as f:
+    with codecs.open(readme_file, encoding='utf8') as f:
         readme = f.read().strip()
 
-    assert readme == "Hello Cookiemonster!"
+    assert readme == 'Hello Cookiemonster!'
diff --git a/tests/test_default_extensions.py b/tests/test_default_extensions.py
index 0aa7f95..c41d684 100644
--- a/tests/test_default_extensions.py
+++ b/tests/test_default_extensions.py
@@ -26,21 +26,23 @@ def freeze():
 
 def test_jinja2_time_extension(tmpdir):
     project_dir = cookiecutter(
-        "tests/test-extensions/default/", no_input=True, output_dir=str(tmpdir)
+        'tests/test-extensions/default/',
+        no_input=True,
+        output_dir=str(tmpdir)
     )
-    changelog_file = os.path.join(project_dir, "HISTORY.rst")
+    changelog_file = os.path.join(project_dir, 'HISTORY.rst')
     assert os.path.isfile(changelog_file)
 
-    with io.open(changelog_file, "r", encoding="utf-8") as f:
+    with io.open(changelog_file, 'r', encoding='utf-8') as f:
         changelog_lines = f.readlines()
 
     expected_lines = [
-        "History\n",
-        "-------\n",
-        "\n",
-        "0.1.0 (2015-12-09)\n",
-        "---------------------\n",
-        "\n",
-        "First release on PyPI.\n",
+        'History\n',
+        '-------\n',
+        '\n',
+        '0.1.0 (2015-12-09)\n',
+        '---------------------\n',
+        '\n',
+        'First release on PyPI.\n'
     ]
     assert expected_lines == changelog_lines
diff --git a/tests/test_environment.py b/tests/test_environment.py
index 3c04d46..034d9a6 100644
--- a/tests/test_environment.py
+++ b/tests/test_environment.py
@@ -9,14 +9,18 @@ from cookiecutter.exceptions import UnknownExtension
 
 
 def test_env_should_raise_for_unknown_extension():
-    context = {"cookiecutter": {"_extensions": ["foobar"]}}
+    context = {
+        'cookiecutter': {
+            '_extensions': ['foobar']
+        }
+    }
 
     with pytest.raises(UnknownExtension) as err:
         StrictEnvironment(context=context, keep_trailing_newline=True)
 
-    assert "Unable to load extension: " in str(err.value)
+    assert 'Unable to load extension: ' in str(err.value)
 
 
 def test_env_should_come_with_jinja2_time_extension():
     env = StrictEnvironment(keep_trailing_newline=True)
-    assert "jinja2_time.jinja2_time.TimeExtension" in env.extensions
+    assert 'jinja2_time.jinja2_time.TimeExtension' in env.extensions
diff --git a/tests/test_exceptions.py b/tests/test_exceptions.py
index cf129bb..f9288e2 100644
--- a/tests/test_exceptions.py
+++ b/tests/test_exceptions.py
@@ -9,9 +9,9 @@ from cookiecutter import exceptions
 
 def test_undefined_variable_to_str():
     undefined_var_error = exceptions.UndefinedVariableInTemplate(
-        "Beautiful is better than ugly",
-        UndefinedError("Errors should never pass silently"),
-        {"cookiecutter": {"foo": "bar"}},
+        'Beautiful is better than ugly',
+        UndefinedError('Errors should never pass silently'),
+        {'cookiecutter': {'foo': 'bar'}}
     )
 
     expected_str = (
diff --git a/tests/test_find.py b/tests/test_find.py
index 584652f..0d4598f 100644
--- a/tests/test_find.py
+++ b/tests/test_find.py
@@ -9,13 +9,13 @@ import pytest
 from cookiecutter import find
 
 
-@pytest.fixture(params=["fake-repo-pre", "fake-repo-pre2"])
+@pytest.fixture(params=['fake-repo-pre', 'fake-repo-pre2'])
 def repo_dir(request):
-    return os.path.join("tests", request.param)
+    return os.path.join('tests', request.param)
 
 
 def test_find_template(repo_dir):
     template = find.find_template(repo_dir=repo_dir)
 
-    test_dir = os.path.join(repo_dir, "{{cookiecutter.repo_name}}")
+    test_dir = os.path.join(repo_dir, '{{cookiecutter.repo_name}}')
     assert template == test_dir
diff --git a/tests/test_generate_context.py b/tests/test_generate_context.py
index 96ff2b9..45a939d 100644
--- a/tests/test_generate_context.py
+++ b/tests/test_generate_context.py
@@ -24,33 +24,43 @@ from cookiecutter.exceptions import ContextDecodingException
 
 def context_data():
     context = (
-        {"context_file": "tests/test-generate-context/test.json"},
-        {"test": {"1": 2, "some_key": "some_val"}},
+        {
+            'context_file': 'tests/test-generate-context/test.json'
+        },
+        {
+            'test': {'1': 2, 'some_key': 'some_val'}
+        }
     )
 
     context_with_default = (
         {
-            "context_file": "tests/test-generate-context/test.json",
-            "default_context": {"1": 3},
+            'context_file': 'tests/test-generate-context/test.json',
+            'default_context': {'1': 3}
         },
-        {"test": {"1": 3, "some_key": "some_val"}},
+        {
+            'test': {'1': 3, 'some_key': 'some_val'}
+        }
     )
 
     context_with_extra = (
         {
-            "context_file": "tests/test-generate-context/test.json",
-            "extra_context": {"1": 4},
+            'context_file': 'tests/test-generate-context/test.json',
+            'extra_context': {'1': 4},
         },
-        {"test": {"1": 4, "some_key": "some_val"}},
+        {
+            'test': {'1': 4, 'some_key': 'some_val'}
+        }
     )
 
     context_with_default_and_extra = (
         {
-            "context_file": "tests/test-generate-context/test.json",
-            "default_context": {"1": 3},
-            "extra_context": {"1": 5},
+            'context_file': 'tests/test-generate-context/test.json',
+            'default_context': {'1': 3},
+            'extra_context': {'1': 5},
         },
-        {"test": {"1": 5, "some_key": "some_val"}},
+        {
+            'test': {'1': 5, 'some_key': 'some_val'}
+        }
     )
 
     yield context
@@ -59,66 +69,69 @@ def context_data():
     yield context_with_default_and_extra
 
 
-@pytest.mark.usefixtures("clean_system")
-@pytest.mark.parametrize("input_params, expected_context", context_data())
+@pytest.mark.usefixtures('clean_system')
+@pytest.mark.parametrize('input_params, expected_context', context_data())
 def test_generate_context(input_params, expected_context):
     """Test the generated context for several input parameters against the \
     according expected context."""
     assert generate.generate_context(**input_params) == expected_context
 
 
-@pytest.mark.usefixtures("clean_system")
+@pytest.mark.usefixtures('clean_system')
 def test_generate_context_with_json_decoding_error():
     with pytest.raises(ContextDecodingException) as excinfo:
-        generate.generate_context("tests/test-generate-context/invalid-syntax.json")
+        generate.generate_context(
+            'tests/test-generate-context/invalid-syntax.json'
+        )
     # original message from json module should be included
     pattern = (
-        "Expecting '{0,1}:'{0,1} delimiter: " "line 1 column (19|20) \\(char 19\\)"
+        'Expecting \'{0,1}:\'{0,1} delimiter: '
+        'line 1 column (19|20) \\(char 19\\)'
     )
     assert re.search(pattern, str(excinfo.value))
     # File name should be included too...for testing purposes, just test the
     # last part of the file. If we wanted to test the absolute path, we'd have
     # to do some additional work in the test which doesn't seem that needed at
     # this point.
-    path = os.path.sep.join(["tests", "test-generate-context", "invalid-syntax.json"])
+    path = os.path.sep.join(
+        ['tests', 'test-generate-context', 'invalid-syntax.json']
+    )
     assert path in str(excinfo.value)
 
 
 @pytest.fixture
 def default_context():
     return {
-        "not_in_template": "foobar",
-        "project_name": "Kivy Project",
-        "orientation": "landscape",
+        'not_in_template': 'foobar',
+        'project_name': 'Kivy Project',
+        'orientation': 'landscape'
     }
 
 
 @pytest.fixture
 def extra_context():
     return {
-        "also_not_in_template": "foobar2",
-        "github_username": "hackebrot",
+        'also_not_in_template': 'foobar2',
+        'github_username': 'hackebrot',
     }
 
 
 @pytest.fixture
 def context_file():
-    return "tests/test-generate-context/choices_template.json"
+    return 'tests/test-generate-context/choices_template.json'
 
 
 def test_choices(context_file, default_context, extra_context):
     """Make sure that the default for list variables is based on the user \
     config and the list as such is not changed to a single value."""
     expected_context = {
-        "choices_template": OrderedDict(
-            [
-                ("full_name", "Raphael Pierzina"),
-                ("github_username", "hackebrot"),
-                ("project_name", "Kivy Project"),
-                ("repo_name", "{{cookiecutter.project_name|lower}}"),
-                ("orientation", ["landscape", "all", "portrait"]),
-            ]
-        )
+        'choices_template': OrderedDict([
+            ('full_name', 'Raphael Pierzina'),
+            ('github_username', 'hackebrot'),
+            ('project_name', 'Kivy Project'),
+            ('repo_name', '{{cookiecutter.project_name|lower}}'),
+            ('orientation', ['landscape', 'all', 'portrait']),
+        ])
     }
 
     generated_context = generate.generate_context(
@@ -130,40 +143,47 @@ def test_choices(context_file, default_context, extra_context):
 
 @pytest.fixture
 def template_context():
-    return OrderedDict(
-        [
-            ("full_name", "Raphael Pierzina"),
-            ("github_username", "hackebrot"),
-            ("project_name", "Kivy Project"),
-            ("repo_name", "{{cookiecutter.project_name|lower}}"),
-            ("orientation", ["all", "landscape", "portrait"]),
-        ]
-    )
+    return OrderedDict([
+        ('full_name', 'Raphael Pierzina'),
+        ('github_username', 'hackebrot'),
+        ('project_name', 'Kivy Project'),
+        ('repo_name', '{{cookiecutter.project_name|lower}}'),
+        ('orientation', ['all', 'landscape', 'portrait']),
+    ])
 
 
 def test_apply_overwrites_does_include_unused_variables(template_context):
     generate.apply_overwrites_to_context(
-        template_context, {"not in template": "foobar"}
+        template_context,
+        {'not in template': 'foobar'}
     )
 
-    assert "not in template" not in template_context
+    assert 'not in template' not in template_context
 
 
 def test_apply_overwrites_sets_non_list_value(template_context):
-    generate.apply_overwrites_to_context(template_context, {"repo_name": "foobar"})
+    generate.apply_overwrites_to_context(
+        template_context,
+        {'repo_name': 'foobar'}
+    )
 
-    assert template_context["repo_name"] == "foobar"
+    assert template_context['repo_name'] == 'foobar'
 
 
 def test_apply_overwrites_does_not_modify_choices_for_invalid_overwrite(
-    template_context,
-):
-    generate.apply_overwrites_to_context(template_context, {"orientation": "foobar"})
+        template_context):
+    generate.apply_overwrites_to_context(
+        template_context,
+        {'orientation': 'foobar'}
+    )
 
-    assert template_context["orientation"] == ["all", "landscape", "portrait"]
+    assert template_context['orientation'] == ['all', 'landscape', 'portrait']
 
 
 def test_apply_overwrites_sets_default_for_choice_variable(template_context):
-    generate.apply_overwrites_to_context(template_context, {"orientation": "landscape"})
+    generate.apply_overwrites_to_context(
+        template_context,
+        {'orientation': 'landscape'}
+    )
 
-    assert template_context["orientation"] == ["landscape", "all", "portrait"]
+    assert template_context['orientation'] == ['landscape', 'all', 'portrait']
diff --git a/tests/test_generate_copy_without_render.py b/tests/test_generate_copy_without_render.py
index d440139..e6f33c1 100644
--- a/tests/test_generate_copy_without_render.py
+++ b/tests/test_generate_copy_without_render.py
@@ -10,61 +10,56 @@ from cookiecutter import generate
 from cookiecutter import utils
 
 
-@pytest.fixture(scope="function")
+@pytest.fixture(scope='function')
 def remove_test_dir(request):
     """Remove the folder that is created by the test."""
-
     def fin_remove_test_dir():
-        if os.path.exists("test_copy_without_render"):
-            utils.rmtree("test_copy_without_render")
-
+        if os.path.exists('test_copy_without_render'):
+            utils.rmtree('test_copy_without_render')
     request.addfinalizer(fin_remove_test_dir)
 
 
-@pytest.mark.usefixtures("clean_system", "remove_test_dir")
+@pytest.mark.usefixtures('clean_system', 'remove_test_dir')
 def test_generate_copy_without_render_extensions():
     generate.generate_files(
         context={
-            "cookiecutter": {
-                "repo_name": "test_copy_without_render",
-                "render_test": "I have been rendered!",
-                "_copy_without_render": [
-                    "*not-rendered",
-                    "rendered/not_rendered.yml",
-                    "*.txt",
-                ],
-            }
+            'cookiecutter': {
+                'repo_name': 'test_copy_without_render',
+                'render_test': 'I have been rendered!',
+                '_copy_without_render': [
+                    '*not-rendered',
+                    'rendered/not_rendered.yml',
+                    '*.txt',
+                ]}
         },
-        repo_dir="tests/test-generate-copy-without-render",
+        repo_dir='tests/test-generate-copy-without-render'
     )
 
-    dir_contents = os.listdir("test_copy_without_render")
+    dir_contents = os.listdir('test_copy_without_render')
 
-    assert "{{cookiecutter.repo_name}}-not-rendered" in dir_contents
-    assert "test_copy_without_render-rendered" in dir_contents
+    assert '{{cookiecutter.repo_name}}-not-rendered' in dir_contents
+    assert 'test_copy_without_render-rendered' in dir_contents
 
-    with open("test_copy_without_render/README.txt") as f:
-        assert "{{cookiecutter.render_test}}" in f.read()
+    with open('test_copy_without_render/README.txt') as f:
+        assert '{{cookiecutter.render_test}}' in f.read()
 
-    with open("test_copy_without_render/README.rst") as f:
-        assert "I have been rendered!" in f.read()
+    with open('test_copy_without_render/README.rst') as f:
+        assert 'I have been rendered!' in f.read()
 
-    with open(
-        "test_copy_without_render/" "test_copy_without_render-rendered/" "README.txt"
-    ) as f:
-        assert "{{cookiecutter.render_test}}" in f.read()
+    with open('test_copy_without_render/'
+              'test_copy_without_render-rendered/'
+              'README.txt') as f:
+        assert '{{cookiecutter.render_test}}' in f.read()
 
-    with open(
-        "test_copy_without_render/" "test_copy_without_render-rendered/" "README.rst"
-    ) as f:
-        assert "I have been rendered" in f.read()
+    with open('test_copy_without_render/'
+              'test_copy_without_render-rendered/'
+              'README.rst') as f:
+        assert 'I have been rendered' in f.read()
 
-    with open(
-        "test_copy_without_render/"
-        "{{cookiecutter.repo_name}}-not-rendered/"
-        "README.rst"
-    ) as f:
-        assert "{{cookiecutter.render_test}}" in f.read()
+    with open('test_copy_without_render/'
+              '{{cookiecutter.repo_name}}-not-rendered/'
+              'README.rst') as f:
+        assert '{{cookiecutter.render_test}}' in f.read()
 
-    with open("test_copy_without_render/rendered/not_rendered.yml") as f:
-        assert "{{cookiecutter.render_test}}" in f.read()
+    with open('test_copy_without_render/rendered/not_rendered.yml') as f:
+        assert '{{cookiecutter.render_test}}' in f.read()
diff --git a/tests/test_generate_file.py b/tests/test_generate_file.py
index 3c61eee..138bfa8 100644
--- a/tests/test_generate_file.py
+++ b/tests/test_generate_file.py
@@ -21,110 +21,125 @@ from cookiecutter import generate
 from cookiecutter.environment import StrictEnvironment
 
 
-@pytest.fixture(scope="function")
+@pytest.fixture(scope='function')
 def remove_cheese_file(request):
     """Remove the cheese text file which is created by the tests."""
-
     def fin_remove_cheese_file():
-        if os.path.exists("tests/files/cheese.txt"):
-            os.remove("tests/files/cheese.txt")
-
+        if os.path.exists('tests/files/cheese.txt'):
+            os.remove('tests/files/cheese.txt')
     request.addfinalizer(fin_remove_cheese_file)
 
 
 @pytest.fixture
 def env():
     environment = StrictEnvironment()
-    environment.loader = FileSystemLoader(".")
+    environment.loader = FileSystemLoader('.')
     return environment
 
 
-@pytest.mark.usefixtures("remove_cheese_file")
+@pytest.mark.usefixtures('remove_cheese_file')
 def test_generate_file(env):
-    infile = "tests/files/{{generate_file}}.txt"
+    infile = 'tests/files/{{generate_file}}.txt'
     generate.generate_file(
-        project_dir=".", infile=infile, context={"generate_file": "cheese"}, env=env,
+        project_dir=".",
+        infile=infile,
+        context={'generate_file': 'cheese'},
+        env=env
     )
-    assert os.path.isfile("tests/files/cheese.txt")
-    with open("tests/files/cheese.txt", "rt") as f:
+    assert os.path.isfile('tests/files/cheese.txt')
+    with open('tests/files/cheese.txt', 'rt') as f:
         generated_text = f.read()
-        assert generated_text == "Testing cheese"
+        assert generated_text == 'Testing cheese'
 
 
-@pytest.mark.usefixtures("remove_cheese_file")
+@pytest.mark.usefixtures('remove_cheese_file')
 def test_generate_file_with_false_condition(env):
-    infile = "tests/files/{% if generate_file == 'y' %}cheese.txt{% endif %}"
+    infile = 'tests/files/{% if generate_file == \'y\' %}cheese.txt{% endif %}'
     generate.generate_file(
-        project_dir=".", infile=infile, context={"generate_file": "n"}, env=env
+        project_dir=".",
+        infile=infile,
+        context={'generate_file': 'n'},
+        env=env
     )
-    assert not os.path.exists("tests/files/cheese.txt")
+    assert not os.path.exists('tests/files/cheese.txt')
 
 
-@pytest.mark.usefixtures("remove_cheese_file")
+@pytest.mark.usefixtures('remove_cheese_file')
 def test_generate_file_jsonify_filter(env):
-    infile = "tests/files/{{cookiecutter.jsonify_file}}.txt"
-    data = {"jsonify_file": "cheese", "type": "roquefort"}
+    infile = 'tests/files/{{cookiecutter.jsonify_file}}.txt'
+    data = {'jsonify_file': 'cheese', 'type': 'roquefort'}
     generate.generate_file(
-        project_dir=".", infile=infile, context={"cookiecutter": data}, env=env
+        project_dir=".",
+        infile=infile,
+        context={'cookiecutter': data},
+        env=env
     )
-    assert os.path.isfile("tests/files/cheese.txt")
-    with open("tests/files/cheese.txt", "rt") as f:
+    assert os.path.isfile('tests/files/cheese.txt')
+    with open('tests/files/cheese.txt', 'rt') as f:
         generated_text = f.read()
         assert json.loads(generated_text) == data
 
 
-@pytest.mark.usefixtures("remove_cheese_file")
+@pytest.mark.usefixtures('remove_cheese_file')
 @pytest.mark.parametrize("length", (10, 40))
 @pytest.mark.parametrize("punctuation", (True, False))
 def test_generate_file_random_ascii_string(env, length, punctuation):
-    infile = "tests/files/{{cookiecutter.random_string_file}}.txt"
-    data = {"random_string_file": "cheese"}
+    infile = 'tests/files/{{cookiecutter.random_string_file}}.txt'
+    data = {'random_string_file': 'cheese'}
     context = {
         "cookiecutter": data,
         "length": length,
-        "punctuation": punctuation,
+        "punctuation": punctuation
     }
-    generate.generate_file(project_dir=".", infile=infile, context=context, env=env)
-    assert os.path.isfile("tests/files/cheese.txt")
-    with open("tests/files/cheese.txt", "rt") as f:
+    generate.generate_file(
+        project_dir=".",
+        infile=infile,
+        context=context,
+        env=env
+    )
+    assert os.path.isfile('tests/files/cheese.txt')
+    with open('tests/files/cheese.txt', 'rt') as f:
         generated_text = f.read()
         assert len(generated_text) == length
 
 
-@pytest.mark.usefixtures("remove_cheese_file")
+@pytest.mark.usefixtures('remove_cheese_file')
 def test_generate_file_with_true_conditional(env):
-    infile = "tests/files/{% if generate_file == 'y' %}cheese.txt{% endif %}"
+    infile = 'tests/files/{% if generate_file == \'y\' %}cheese.txt{% endif %}'
     generate.generate_file(
-        project_dir=".", infile=infile, context={"generate_file": "y"}, env=env
+        project_dir=".",
+        infile=infile,
+        context={'generate_file': 'y'},
+        env=env
     )
-    assert os.path.isfile("tests/files/cheese.txt")
-    with open("tests/files/cheese.txt", "rt") as f:
+    assert os.path.isfile('tests/files/cheese.txt')
+    with open('tests/files/cheese.txt', 'rt') as f:
         generated_text = f.read()
-        assert generated_text == "Testing that generate_file was y"
+        assert generated_text == 'Testing that generate_file was y'
 
 
 @pytest.fixture
 def expected_msg():
     msg = (
-        "Missing end of comment tag\n"
+        'Missing end of comment tag\n'
         '  File "./tests/files/syntax_error.txt", line 1\n'
-        "    I eat {{ syntax_error }} {# this comment is not closed}"
+        '    I eat {{ syntax_error }} {# this comment is not closed}'
     )
     return msg.replace("/", os.sep)
 
 
-@pytest.mark.usefixtures("remove_cheese_file")
+@pytest.mark.usefixtures('remove_cheese_file')
 def test_generate_file_verbose_template_syntax_error(env, expected_msg):
     try:
         generate.generate_file(
             project_dir=".",
-            infile="tests/files/syntax_error.txt",
-            context={"syntax_error": "syntax_error"},
-            env=env,
+            infile='tests/files/syntax_error.txt',
+            context={'syntax_error': 'syntax_error'},
+            env=env
         )
     except TemplateSyntaxError as exception:
         assert str(exception) == expected_msg
     except Exception as exception:
-        pytest.fail("Unexpected exception thrown: {0}".format(exception))
+        pytest.fail('Unexpected exception thrown: {0}'.format(exception))
     else:
-        pytest.fail("TemplateSyntaxError not thrown")
+        pytest.fail('TemplateSyntaxError not thrown')
diff --git a/tests/test_generate_files.py b/tests/test_generate_files.py
index 7e5da1e..6526c23 100644
--- a/tests/test_generate_files.py
+++ b/tests/test_generate_files.py
@@ -34,154 +34,178 @@ from cookiecutter import generate
 from cookiecutter import utils
 
 
-@pytest.mark.parametrize("invalid_dirname", ["", "{foo}", "{{foo", "bar}}"])
+@pytest.mark.parametrize('invalid_dirname', ['', '{foo}', '{{foo', 'bar}}'])
 def test_ensure_dir_is_templated_raises(invalid_dirname):
     with pytest.raises(exceptions.NonTemplatedInputDirException):
         generate.ensure_dir_is_templated(invalid_dirname)
 
 
-@pytest.fixture(scope="function")
+@pytest.fixture(scope='function')
 def remove_additional_folders(request):
     """Remove some special folders which are created by the tests."""
-
     def fin_remove_additional_folders():
-        if os.path.exists("inputpizzä"):
-            utils.rmtree("inputpizzä")
-        if os.path.exists("inputgreen"):
-            utils.rmtree("inputgreen")
-        if os.path.exists("inputbinary_files"):
-            utils.rmtree("inputbinary_files")
-        if os.path.exists("tests/custom_output_dir"):
-            utils.rmtree("tests/custom_output_dir")
-        if os.path.exists("inputpermissions"):
-            utils.rmtree("inputpermissions")
-
+        if os.path.exists('inputpizzä'):
+            utils.rmtree('inputpizzä')
+        if os.path.exists('inputgreen'):
+            utils.rmtree('inputgreen')
+        if os.path.exists('inputbinary_files'):
+            utils.rmtree('inputbinary_files')
+        if os.path.exists('tests/custom_output_dir'):
+            utils.rmtree('tests/custom_output_dir')
+        if os.path.exists('inputpermissions'):
+            utils.rmtree('inputpermissions')
     request.addfinalizer(fin_remove_additional_folders)
 
 
-@pytest.mark.usefixtures("clean_system", "remove_additional_folders")
+@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_generate_files_nontemplated_exception():
     with pytest.raises(exceptions.NonTemplatedInputDirException):
         generate.generate_files(
-            context={"cookiecutter": {"food": "pizza"}},
-            repo_dir="tests/test-generate-files-nontemplated",
+            context={
+                'cookiecutter': {'food': 'pizza'}
+            },
+            repo_dir='tests/test-generate-files-nontemplated'
         )
 
 
-@pytest.mark.usefixtures("clean_system", "remove_additional_folders")
+@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_generate_files():
     generate.generate_files(
-        context={"cookiecutter": {"food": "pizzä"}},
-        repo_dir="tests/test-generate-files",
+        context={
+            'cookiecutter': {'food': 'pizzä'}
+        },
+        repo_dir='tests/test-generate-files'
     )
 
-    simple_file = "inputpizzä/simple.txt"
+    simple_file = 'inputpizzä/simple.txt'
     assert os.path.isfile(simple_file)
 
-    simple_text = io.open(simple_file, "rt", encoding="utf-8").read()
-    assert simple_text == "I eat pizzä"
+    simple_text = io.open(simple_file, 'rt', encoding='utf-8').read()
+    assert simple_text == u'I eat pizzä'
 
 
-@pytest.mark.usefixtures("clean_system", "remove_additional_folders")
+@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_generate_files_with_trailing_newline():
     generate.generate_files(
-        context={"cookiecutter": {"food": "pizzä"}},
-        repo_dir="tests/test-generate-files",
+        context={
+            'cookiecutter': {'food': 'pizzä'}
+        },
+        repo_dir='tests/test-generate-files'
     )
 
-    newline_file = "inputpizzä/simple-with-newline.txt"
+    newline_file = 'inputpizzä/simple-with-newline.txt'
     assert os.path.isfile(newline_file)
 
-    with io.open(newline_file, "r", encoding="utf-8") as f:
+    with io.open(newline_file, 'r', encoding='utf-8') as f:
         simple_text = f.read()
-    assert simple_text == "I eat pizzä\n"
+    assert simple_text == u'I eat pizzä\n'
 
 
-@pytest.mark.usefixtures("clean_system", "remove_additional_folders")
+@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_generate_files_binaries():
     generate.generate_files(
-        context={"cookiecutter": {"binary_test": "binary_files"}},
-        repo_dir="tests/test-generate-binaries",
+        context={
+            'cookiecutter': {'binary_test': 'binary_files'}
+        },
+        repo_dir='tests/test-generate-binaries'
     )
 
-    assert os.path.isfile("inputbinary_files/logo.png")
-    assert os.path.isfile("inputbinary_files/.DS_Store")
-    assert os.path.isfile("inputbinary_files/readme.txt")
-    assert os.path.isfile("inputbinary_files/some_font.otf")
-    assert os.path.isfile("inputbinary_files/binary_files/logo.png")
-    assert os.path.isfile("inputbinary_files/binary_files/.DS_Store")
-    assert os.path.isfile("inputbinary_files/binary_files/readme.txt")
-    assert os.path.isfile("inputbinary_files/binary_files/some_font.otf")
-    assert os.path.isfile("inputbinary_files/binary_files/binary_files/logo.png")
+    assert os.path.isfile('inputbinary_files/logo.png')
+    assert os.path.isfile('inputbinary_files/.DS_Store')
+    assert os.path.isfile('inputbinary_files/readme.txt')
+    assert os.path.isfile('inputbinary_files/some_font.otf')
+    assert os.path.isfile('inputbinary_files/binary_files/logo.png')
+    assert os.path.isfile('inputbinary_files/binary_files/.DS_Store')
+    assert os.path.isfile('inputbinary_files/binary_files/readme.txt')
+    assert os.path.isfile('inputbinary_files/binary_files/some_font.otf')
+    assert os.path.isfile(
+        'inputbinary_files/binary_files/binary_files/logo.png'
+    )
 
 
-@pytest.mark.usefixtures("clean_system", "remove_additional_folders")
+@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_generate_files_absolute_path():
     generate.generate_files(
-        context={"cookiecutter": {"food": "pizzä"}},
-        repo_dir=os.path.abspath("tests/test-generate-files"),
+        context={
+            'cookiecutter': {'food': 'pizzä'}
+        },
+        repo_dir=os.path.abspath('tests/test-generate-files')
     )
-    assert os.path.isfile("inputpizzä/simple.txt")
+    assert os.path.isfile('inputpizzä/simple.txt')
 
 
-@pytest.mark.usefixtures("clean_system", "remove_additional_folders")
+@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_generate_files_output_dir():
-    os.mkdir("tests/custom_output_dir")
+    os.mkdir('tests/custom_output_dir')
     generate.generate_files(
-        context={"cookiecutter": {"food": "pizzä"}},
-        repo_dir=os.path.abspath("tests/test-generate-files"),
-        output_dir="tests/custom_output_dir",
+        context={
+            'cookiecutter': {'food': 'pizzä'}
+        },
+        repo_dir=os.path.abspath('tests/test-generate-files'),
+        output_dir='tests/custom_output_dir'
     )
-    assert os.path.isfile("tests/custom_output_dir/inputpizzä/simple.txt")
+    assert os.path.isfile('tests/custom_output_dir/inputpizzä/simple.txt')
 
 
-@pytest.mark.usefixtures("clean_system", "remove_additional_folders")
+@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_return_rendered_project_dir():
-    os.mkdir("tests/custom_output_dir")
+    os.mkdir('tests/custom_output_dir')
     project_dir = generate.generate_files(
-        context={"cookiecutter": {"food": "pizzä"}},
-        repo_dir=os.path.abspath("tests/test-generate-files"),
-        output_dir="tests/custom_output_dir",
+        context={
+            'cookiecutter': {'food': 'pizzä'}
+        },
+        repo_dir=os.path.abspath('tests/test-generate-files'),
+        output_dir='tests/custom_output_dir'
+    )
+    assert project_dir == os.path.abspath(
+        'tests/custom_output_dir/inputpizzä/'
     )
-    assert project_dir == os.path.abspath("tests/custom_output_dir/inputpizzä/")
 
 
-@pytest.mark.usefixtures("clean_system", "remove_additional_folders")
+@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_generate_files_permissions():
     """simple.txt and script.sh should retain their respective 0o644 and \
     0o755 permissions"""
     generate.generate_files(
-        context={"cookiecutter": {"permissions": "permissions"}},
-        repo_dir="tests/test-generate-files-permissions",
+        context={
+            'cookiecutter': {'permissions': 'permissions'}
+        },
+        repo_dir='tests/test-generate-files-permissions'
     )
 
-    assert os.path.isfile("inputpermissions/simple.txt")
+    assert os.path.isfile('inputpermissions/simple.txt')
 
     # simple.txt should still be 0o644
     tests_simple_file = os.path.join(
-        "tests",
-        "test-generate-files-permissions",
-        "input{{cookiecutter.permissions}}",
-        "simple.txt",
+        'tests',
+        'test-generate-files-permissions',
+        'input{{cookiecutter.permissions}}',
+        'simple.txt'
     )
     tests_simple_file_mode = os.stat(tests_simple_file).st_mode & 0o777
 
-    input_simple_file = os.path.join("inputpermissions", "simple.txt")
+    input_simple_file = os.path.join(
+        'inputpermissions',
+        'simple.txt'
+    )
     input_simple_file_mode = os.stat(input_simple_file).st_mode & 0o777
     assert tests_simple_file_mode == input_simple_file_mode
 
-    assert os.path.isfile("inputpermissions/script.sh")
+    assert os.path.isfile('inputpermissions/script.sh')
 
     # script.sh should still be 0o755
     tests_script_file = os.path.join(
-        "tests",
-        "test-generate-files-permissions",
-        "input{{cookiecutter.permissions}}",
-        "script.sh",
+        'tests',
+        'test-generate-files-permissions',
+        'input{{cookiecutter.permissions}}',
+        'script.sh'
     )
     tests_script_file_mode = os.stat(tests_script_file).st_mode & 0o777
 
-    input_script_file = os.path.join("inputpermissions", "script.sh")
+    input_script_file = os.path.join(
+        'inputpermissions',
+        'script.sh'
+    )
     input_script_file_mode = os.stat(input_script_file).st_mode & 0o777
     assert tests_script_file_mode == input_script_file_mode
 
@@ -189,116 +213,121 @@ def test_generate_files_permissions():
 @pytest.fixture
 def undefined_context():
     return {
-        "cookiecutter": {"project_slug": "testproject", "github_username": "hackebrot",}
+        'cookiecutter': {
+            'project_slug': 'testproject',
+            'github_username': 'hackebrot'
+        }
     }
 
 
 def test_raise_undefined_variable_file_name(tmpdir, undefined_context):
-    output_dir = tmpdir.mkdir("output")
+    output_dir = tmpdir.mkdir('output')
 
     with pytest.raises(exceptions.UndefinedVariableInTemplate) as err:
         generate.generate_files(
-            repo_dir="tests/undefined-variable/file-name/",
+            repo_dir='tests/undefined-variable/file-name/',
             output_dir=str(output_dir),
-            context=undefined_context,
+            context=undefined_context
         )
     error = err.value
     assert "Unable to create file '{{cookiecutter.foobar}}'" == error.message
     assert error.context == undefined_context
 
-    assert not output_dir.join("testproject").exists()
+    assert not output_dir.join('testproject').exists()
 
 
-def test_raise_undefined_variable_file_name_existing_project(tmpdir, undefined_context):
-    output_dir = tmpdir.mkdir("output")
+def test_raise_undefined_variable_file_name_existing_project(
+        tmpdir, undefined_context):
+    output_dir = tmpdir.mkdir('output')
 
-    output_dir.join("testproject").mkdir()
+    output_dir.join('testproject').mkdir()
 
     with pytest.raises(exceptions.UndefinedVariableInTemplate) as err:
         generate.generate_files(
-            repo_dir="tests/undefined-variable/file-name/",
+            repo_dir='tests/undefined-variable/file-name/',
             output_dir=str(output_dir),
             context=undefined_context,
-            overwrite_if_exists=True,
+            overwrite_if_exists=True
         )
     error = err.value
     assert "Unable to create file '{{cookiecutter.foobar}}'" == error.message
     assert error.context == undefined_context
 
-    assert output_dir.join("testproject").exists()
+    assert output_dir.join('testproject').exists()
 
 
 def test_raise_undefined_variable_file_content(tmpdir, undefined_context):
-    output_dir = tmpdir.mkdir("output")
+    output_dir = tmpdir.mkdir('output')
 
     with pytest.raises(exceptions.UndefinedVariableInTemplate) as err:
         generate.generate_files(
-            repo_dir="tests/undefined-variable/file-content/",
+            repo_dir='tests/undefined-variable/file-content/',
             output_dir=str(output_dir),
-            context=undefined_context,
+            context=undefined_context
         )
     error = err.value
     assert "Unable to create file 'README.rst'" == error.message
     assert error.context == undefined_context
 
-    assert not output_dir.join("testproject").exists()
+    assert not output_dir.join('testproject').exists()
 
 
 def test_raise_undefined_variable_dir_name(tmpdir, undefined_context):
-    output_dir = tmpdir.mkdir("output")
+    output_dir = tmpdir.mkdir('output')
 
     with pytest.raises(exceptions.UndefinedVariableInTemplate) as err:
         generate.generate_files(
-            repo_dir="tests/undefined-variable/dir-name/",
+            repo_dir='tests/undefined-variable/dir-name/',
             output_dir=str(output_dir),
-            context=undefined_context,
+            context=undefined_context
         )
     error = err.value
 
-    directory = os.path.join("testproject", "{{cookiecutter.foobar}}")
+    directory = os.path.join('testproject', '{{cookiecutter.foobar}}')
     msg = "Unable to create directory '{}'".format(directory)
     assert msg == error.message
 
     assert error.context == undefined_context
 
-    assert not output_dir.join("testproject").exists()
+    assert not output_dir.join('testproject').exists()
 
 
-def test_raise_undefined_variable_dir_name_existing_project(tmpdir, undefined_context):
-    output_dir = tmpdir.mkdir("output")
+def test_raise_undefined_variable_dir_name_existing_project(
+        tmpdir, undefined_context):
+    output_dir = tmpdir.mkdir('output')
 
-    output_dir.join("testproject").mkdir()
+    output_dir.join('testproject').mkdir()
 
     with pytest.raises(exceptions.UndefinedVariableInTemplate) as err:
         generate.generate_files(
-            repo_dir="tests/undefined-variable/dir-name/",
+            repo_dir='tests/undefined-variable/dir-name/',
             output_dir=str(output_dir),
             context=undefined_context,
-            overwrite_if_exists=True,
+            overwrite_if_exists=True
         )
     error = err.value
 
-    directory = os.path.join("testproject", "{{cookiecutter.foobar}}")
+    directory = os.path.join('testproject', '{{cookiecutter.foobar}}')
     msg = "Unable to create directory '{}'".format(directory)
     assert msg == error.message
 
     assert error.context == undefined_context
 
-    assert output_dir.join("testproject").exists()
+    assert output_dir.join('testproject').exists()
 
 
 def test_raise_undefined_variable_project_dir(tmpdir):
-    output_dir = tmpdir.mkdir("output")
+    output_dir = tmpdir.mkdir('output')
 
     with pytest.raises(exceptions.UndefinedVariableInTemplate) as err:
         generate.generate_files(
-            repo_dir="tests/undefined-variable/dir-name/",
+            repo_dir='tests/undefined-variable/dir-name/',
             output_dir=str(output_dir),
-            context={},
+            context={}
         )
     error = err.value
     msg = "Unable to create project directory '{{cookiecutter.project_slug}}'"
     assert msg == error.message
     assert error.context == {}
 
-    assert not output_dir.join("testproject").exists()
+    assert not output_dir.join('testproject').exists()
diff --git a/tests/test_generate_hooks.py b/tests/test_generate_hooks.py
index c3914ed..1725c18 100644
--- a/tests/test_generate_hooks.py
+++ b/tests/test_generate_hooks.py
@@ -23,176 +23,188 @@ from cookiecutter import generate
 from cookiecutter import utils
 from cookiecutter.exceptions import FailedHookException
 
-WINDOWS = sys.platform.startswith("win")
+WINDOWS = sys.platform.startswith('win')
 
 
-@pytest.fixture(scope="function")
+@pytest.fixture(scope='function')
 def remove_additional_folders(request):
     """Remove some special folders which are created by the tests."""
-
     def fin_remove_additional_folders():
         directories_to_delete = [
-            "tests/test-pyhooks/inputpyhooks",
-            "inputpyhooks",
-            "inputhooks",
-            "tests/test-shellhooks",
-            "tests/test-hooks",
+            'tests/test-pyhooks/inputpyhooks',
+            'inputpyhooks',
+            'inputhooks',
+            'tests/test-shellhooks',
+            'tests/test-hooks',
         ]
         for directory in directories_to_delete:
             if os.path.exists(directory):
                 utils.rmtree(directory)
-
     request.addfinalizer(fin_remove_additional_folders)
 
 
-@pytest.mark.usefixtures("clean_system", "remove_additional_folders")
+@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_ignore_hooks_dirs():
     generate.generate_files(
-        context={"cookiecutter": {"pyhooks": "pyhooks"}},
-        repo_dir="tests/test-pyhooks/",
-        output_dir="tests/test-pyhooks/",
+        context={
+            'cookiecutter': {'pyhooks': 'pyhooks'}
+        },
+        repo_dir='tests/test-pyhooks/',
+        output_dir='tests/test-pyhooks/'
     )
-    assert not os.path.exists("tests/test-pyhooks/inputpyhooks/hooks")
+    assert not os.path.exists('tests/test-pyhooks/inputpyhooks/hooks')
 
 
-@pytest.mark.usefixtures("clean_system", "remove_additional_folders")
+@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_run_python_hooks():
     generate.generate_files(
-        context={"cookiecutter": {"pyhooks": "pyhooks"}},
-        repo_dir="tests/test-pyhooks/".replace("/", os.sep),
-        output_dir="tests/test-pyhooks/".replace("/", os.sep),
+        context={
+            'cookiecutter': {'pyhooks': 'pyhooks'}
+        },
+        repo_dir='tests/test-pyhooks/'.replace("/", os.sep),
+        output_dir='tests/test-pyhooks/'.replace("/", os.sep)
     )
-    assert os.path.exists("tests/test-pyhooks/inputpyhooks/python_pre.txt")
-    assert os.path.exists("tests/test-pyhooks/inputpyhooks/python_post.txt")
+    assert os.path.exists('tests/test-pyhooks/inputpyhooks/python_pre.txt')
+    assert os.path.exists('tests/test-pyhooks/inputpyhooks/python_post.txt')
 
 
-@pytest.mark.usefixtures("clean_system", "remove_additional_folders")
+@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_run_python_hooks_cwd():
     generate.generate_files(
-        context={"cookiecutter": {"pyhooks": "pyhooks"}},
-        repo_dir="tests/test-pyhooks/",
+        context={
+            'cookiecutter': {'pyhooks': 'pyhooks'}
+        },
+        repo_dir='tests/test-pyhooks/'
     )
-    assert os.path.exists("inputpyhooks/python_pre.txt")
-    assert os.path.exists("inputpyhooks/python_post.txt")
+    assert os.path.exists('inputpyhooks/python_pre.txt')
+    assert os.path.exists('inputpyhooks/python_post.txt')
 
 
-@pytest.mark.skipif(WINDOWS, reason="OSError.errno=8 is not thrown on Windows")
-@pytest.mark.usefixtures("clean_system", "remove_additional_folders")
+@pytest.mark.skipif(WINDOWS, reason='OSError.errno=8 is not thrown on Windows')
+@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_empty_hooks():
     # OSError.errno=8 is not thrown on Windows when the script is empty
     # because it always runs through shell instead of needing a shebang.
     with pytest.raises(FailedHookException) as excinfo:
         generate.generate_files(
-            context={"cookiecutter": {"shellhooks": "shellhooks"}},
-            repo_dir="tests/test-shellhooks-empty/",
-            overwrite_if_exists=True,
+            context={
+                'cookiecutter': {'shellhooks': 'shellhooks'}
+            },
+            repo_dir='tests/test-shellhooks-empty/',
+            overwrite_if_exists=True
         )
-    assert "shebang" in str(excinfo.value)
+    assert 'shebang' in str(excinfo.value)
 
 
-@pytest.mark.usefixtures("clean_system", "remove_additional_folders")
+@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_oserror_hooks(mocker):
-    message = "Out of memory"
+    message = 'Out of memory'
 
     err = OSError(message)
     err.errno = errno.ENOMEM
 
-    prompt = mocker.patch("subprocess.Popen")
+    prompt = mocker.patch('subprocess.Popen')
     prompt.side_effect = err
 
     with pytest.raises(FailedHookException) as excinfo:
         generate.generate_files(
-            context={"cookiecutter": {"shellhooks": "shellhooks"}},
-            repo_dir="tests/test-shellhooks-empty/",
-            overwrite_if_exists=True,
+            context={
+                'cookiecutter': {'shellhooks': 'shellhooks'}
+            },
+            repo_dir='tests/test-shellhooks-empty/',
+            overwrite_if_exists=True
         )
     assert message in str(excinfo.value)
 
 
-@pytest.mark.usefixtures("clean_system", "remove_additional_folders")
+@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_run_failing_hook_removes_output_directory():
-    repo_path = os.path.abspath("tests/test-hooks/")
-    hooks_path = os.path.abspath("tests/test-hooks/hooks")
+    repo_path = os.path.abspath('tests/test-hooks/')
+    hooks_path = os.path.abspath('tests/test-hooks/hooks')
 
-    hook_dir = os.path.join(repo_path, "hooks")
-    template = os.path.join(repo_path, "input{{cookiecutter.hooks}}")
+    hook_dir = os.path.join(repo_path, 'hooks')
+    template = os.path.join(repo_path, 'input{{cookiecutter.hooks}}')
     os.mkdir(repo_path)
     os.mkdir(hook_dir)
     os.mkdir(template)
 
-    hook_path = os.path.join(hooks_path, "pre_gen_project.py")
+    hook_path = os.path.join(hooks_path, 'pre_gen_project.py')
 
-    with open(hook_path, "w") as f:
+    with open(hook_path, 'w') as f:
         f.write("#!/usr/bin/env python\n")
         f.write("import sys; sys.exit(1)\n")
 
     with pytest.raises(FailedHookException) as excinfo:
         generate.generate_files(
-            context={"cookiecutter": {"hooks": "hooks"}},
-            repo_dir="tests/test-hooks/",
-            overwrite_if_exists=True,
+            context={
+                'cookiecutter': {'hooks': 'hooks'}
+            },
+            repo_dir='tests/test-hooks/',
+            overwrite_if_exists=True
         )
 
-    assert "Hook script failed" in str(excinfo.value)
-    assert not os.path.exists("inputhooks")
+    assert 'Hook script failed' in str(excinfo.value)
+    assert not os.path.exists('inputhooks')
 
 
-@pytest.mark.usefixtures("clean_system", "remove_additional_folders")
+@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_run_failing_hook_preserves_existing_output_directory():
-    repo_path = os.path.abspath("tests/test-hooks/")
-    hooks_path = os.path.abspath("tests/test-hooks/hooks")
+    repo_path = os.path.abspath('tests/test-hooks/')
+    hooks_path = os.path.abspath('tests/test-hooks/hooks')
 
-    hook_dir = os.path.join(repo_path, "hooks")
-    template = os.path.join(repo_path, "input{{cookiecutter.hooks}}")
+    hook_dir = os.path.join(repo_path, 'hooks')
+    template = os.path.join(repo_path, 'input{{cookiecutter.hooks}}')
     os.mkdir(repo_path)
     os.mkdir(hook_dir)
     os.mkdir(template)
 
-    hook_path = os.path.join(hooks_path, "pre_gen_project.py")
+    hook_path = os.path.join(hooks_path, 'pre_gen_project.py')
 
-    with open(hook_path, "w") as f:
+    with open(hook_path, 'w') as f:
         f.write("#!/usr/bin/env python\n")
         f.write("import sys; sys.exit(1)\n")
 
-    os.mkdir("inputhooks")
+    os.mkdir('inputhooks')
     with pytest.raises(FailedHookException) as excinfo:
         generate.generate_files(
-            context={"cookiecutter": {"hooks": "hooks"}},
-            repo_dir="tests/test-hooks/",
-            overwrite_if_exists=True,
+            context={
+                'cookiecutter': {'hooks': 'hooks'}
+            },
+            repo_dir='tests/test-hooks/',
+            overwrite_if_exists=True
         )
 
-    assert "Hook script failed" in str(excinfo.value)
-    assert os.path.exists("inputhooks")
+    assert 'Hook script failed' in str(excinfo.value)
+    assert os.path.exists('inputhooks')
 
 
 def make_test_repo(name):
-    hooks = os.path.join(name, "hooks")
-    template = os.path.join(name, "input{{cookiecutter.shellhooks}}")
+    hooks = os.path.join(name, 'hooks')
+    template = os.path.join(name, 'input{{cookiecutter.shellhooks}}')
     os.mkdir(name)
     os.mkdir(hooks)
     os.mkdir(template)
 
-    with open(os.path.join(template, "README.rst"), "w") as f:
+    with open(os.path.join(template, 'README.rst'), 'w') as f:
         f.write("foo\n===\n\nbar\n")
 
-    if sys.platform.startswith("win"):
-        filename = os.path.join(hooks, "pre_gen_project.bat")
-        with open(filename, "w") as f:
+    if sys.platform.startswith('win'):
+        filename = os.path.join(hooks, 'pre_gen_project.bat')
+        with open(filename, 'w') as f:
             f.write("@echo off\n")
             f.write("\n")
             f.write("echo pre generation hook\n")
             f.write("echo. >shell_pre.txt\n")
 
-        filename = os.path.join(hooks, "post_gen_project.bat")
-        with open(filename, "w") as f:
+        filename = os.path.join(hooks, 'post_gen_project.bat')
+        with open(filename, 'w') as f:
             f.write("@echo off\n")
             f.write("\n")
             f.write("echo post generation hook\n")
             f.write("echo. >shell_post.txt\n")
     else:
-        filename = os.path.join(hooks, "pre_gen_project.sh")
-        with open(filename, "w") as f:
+        filename = os.path.join(hooks, 'pre_gen_project.sh')
+        with open(filename, 'w') as f:
             f.write("#!/bin/bash\n")
             f.write("\n")
             f.write("echo 'pre generation hook';\n")
@@ -200,8 +212,8 @@ def make_test_repo(name):
         # Set the execute bit
         os.chmod(filename, os.stat(filename).st_mode | stat.S_IXUSR)
 
-        filename = os.path.join(hooks, "post_gen_project.sh")
-        with open(filename, "w") as f:
+        filename = os.path.join(hooks, 'post_gen_project.sh')
+        with open(filename, 'w') as f:
             f.write("#!/bin/bash\n")
             f.write("\n")
             f.write("echo 'post generation hook';\n")
@@ -210,15 +222,17 @@ def make_test_repo(name):
         os.chmod(filename, os.stat(filename).st_mode | stat.S_IXUSR)
 
 
-@pytest.mark.usefixtures("clean_system", "remove_additional_folders")
+@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_run_shell_hooks():
-    make_test_repo("tests/test-shellhooks")
+    make_test_repo('tests/test-shellhooks')
     generate.generate_files(
-        context={"cookiecutter": {"shellhooks": "shellhooks"}},
-        repo_dir="tests/test-shellhooks/",
-        output_dir="tests/test-shellhooks/",
+        context={
+            'cookiecutter': {'shellhooks': 'shellhooks'}
+        },
+        repo_dir='tests/test-shellhooks/',
+        output_dir='tests/test-shellhooks/'
     )
-    shell_pre_file = "tests/test-shellhooks/inputshellhooks/shell_pre.txt"
-    shell_post_file = "tests/test-shellhooks/inputshellhooks/shell_post.txt"
+    shell_pre_file = 'tests/test-shellhooks/inputshellhooks/shell_pre.txt'
+    shell_post_file = 'tests/test-shellhooks/inputshellhooks/shell_post.txt'
     assert os.path.exists(shell_pre_file)
     assert os.path.exists(shell_post_file)
diff --git a/tests/test_get_config.py b/tests/test_get_config.py
index 5d6f964..22bdaf4 100644
--- a/tests/test_get_config.py
+++ b/tests/test_get_config.py
@@ -8,47 +8,46 @@ import pytest
 
 from cookiecutter import config
 from cookiecutter.exceptions import (
-    ConfigDoesNotExistException,
-    InvalidConfiguration,
+    ConfigDoesNotExistException, InvalidConfiguration
 )
 
 
 def test_merge_configs():
     default = {
-        "cookiecutters_dir": "/home/example/some-path-to-templates",
-        "replay_dir": "/home/example/some-path-to-replay-files",
-        "default_context": {},
-        "abbreviations": {
-            "gh": "https://github.com/{0}.git",
-            "gl": "https://gitlab.com/{0}.git",
-            "bb": "https://bitbucket.org/{0}",
-        },
+        'cookiecutters_dir': '/home/example/some-path-to-templates',
+        'replay_dir': '/home/example/some-path-to-replay-files',
+        'default_context': {},
+        'abbreviations': {
+            'gh': 'https://github.com/{0}.git',
+            'gl': 'https://gitlab.com/{0}.git',
+            'bb': 'https://bitbucket.org/{0}',
+        }
     }
 
     user_config = {
-        "default_context": {
-            "full_name": "Raphael Pierzina",
-            "github_username": "hackebrot",
-        },
-        "abbreviations": {
-            "gl": "https://gitlab.com/hackebrot/{0}.git",
-            "pytest-plugin": "https://github.com/pytest-dev/pytest-plugin.git",
+        'default_context': {
+            'full_name': 'Raphael Pierzina',
+            'github_username': 'hackebrot',
         },
+        'abbreviations': {
+            'gl': 'https://gitlab.com/hackebrot/{0}.git',
+            'pytest-plugin': 'https://github.com/pytest-dev/pytest-plugin.git',
+        }
     }
 
     expected_config = {
-        "cookiecutters_dir": "/home/example/some-path-to-templates",
-        "replay_dir": "/home/example/some-path-to-replay-files",
-        "default_context": {
-            "full_name": "Raphael Pierzina",
-            "github_username": "hackebrot",
-        },
-        "abbreviations": {
-            "gh": "https://github.com/{0}.git",
-            "gl": "https://gitlab.com/hackebrot/{0}.git",
-            "bb": "https://bitbucket.org/{0}",
-            "pytest-plugin": "https://github.com/pytest-dev/pytest-plugin.git",
+        'cookiecutters_dir': '/home/example/some-path-to-templates',
+        'replay_dir': '/home/example/some-path-to-replay-files',
+        'default_context': {
+            'full_name': 'Raphael Pierzina',
+            'github_username': 'hackebrot',
         },
+        'abbreviations': {
+            'gh': 'https://github.com/{0}.git',
+            'gl': 'https://gitlab.com/hackebrot/{0}.git',
+            'bb': 'https://bitbucket.org/{0}',
+            'pytest-plugin': 'https://github.com/pytest-dev/pytest-plugin.git',
+        }
     }
 
     assert config.merge_configs(default, user_config) == expected_config
@@ -56,21 +55,21 @@ def test_merge_configs():
 
 def test_get_config():
     """Opening and reading config file"""
-    conf = config.get_config("tests/test-config/valid-config.yaml")
+    conf = config.get_config('tests/test-config/valid-config.yaml')
     expected_conf = {
-        "cookiecutters_dir": "/home/example/some-path-to-templates",
-        "replay_dir": "/home/example/some-path-to-replay-files",
-        "default_context": {
-            "full_name": "Firstname Lastname",
-            "email": "firstname.lastname@gmail.com",
-            "github_username": "example",
-        },
-        "abbreviations": {
-            "gh": "https://github.com/{0}.git",
-            "gl": "https://gitlab.com/{0}.git",
-            "bb": "https://bitbucket.org/{0}",
-            "helloworld": "https://github.com/hackebrot/helloworld",
+        'cookiecutters_dir': '/home/example/some-path-to-templates',
+        'replay_dir': '/home/example/some-path-to-replay-files',
+        'default_context': {
+            'full_name': 'Firstname Lastname',
+            'email': 'firstname.lastname@gmail.com',
+            'github_username': 'example'
         },
+        'abbreviations': {
+            'gh': 'https://github.com/{0}.git',
+            'gl': 'https://gitlab.com/{0}.git',
+            'bb': 'https://bitbucket.org/{0}',
+            'helloworld': 'https://github.com/hackebrot/helloworld'
+        }
     }
     assert conf == expected_conf
 
@@ -79,38 +78,40 @@ def test_get_config_does_not_exist():
     """Check that `exceptions.ConfigDoesNotExistException` is raised when \
     attempting to get a non-existent config file."""
     with pytest.raises(ConfigDoesNotExistException):
-        config.get_config("tests/test-config/this-does-not-exist.yaml")
+        config.get_config('tests/test-config/this-does-not-exist.yaml')
 
 
 def test_invalid_config():
     """An invalid config file should raise an `InvalidConfiguration` \
     exception."""
     with pytest.raises(InvalidConfiguration) as excinfo:
-        config.get_config("tests/test-config/invalid-config.yaml")
+        config.get_config('tests/test-config/invalid-config.yaml')
 
     expected_error_msg = (
-        "Unable to parse YAML file " "tests/test-config/invalid-config.yaml. " "Error: "
+        'Unable to parse YAML file '
+        'tests/test-config/invalid-config.yaml. '
+        'Error: '
     )
     assert expected_error_msg in str(excinfo.value)
 
 
 def test_get_config_with_defaults():
     """A config file that overrides 1 of 3 defaults"""
-    conf = config.get_config("tests/test-config/valid-partial-config.yaml")
-    default_cookiecutters_dir = os.path.expanduser("~/.cookiecutters/")
-    default_replay_dir = os.path.expanduser("~/.cookiecutter_replay/")
+    conf = config.get_config('tests/test-config/valid-partial-config.yaml')
+    default_cookiecutters_dir = os.path.expanduser('~/.cookiecutters/')
+    default_replay_dir = os.path.expanduser('~/.cookiecutter_replay/')
     expected_conf = {
-        "cookiecutters_dir": default_cookiecutters_dir,
-        "replay_dir": default_replay_dir,
-        "default_context": {
-            "full_name": "Firstname Lastname",
-            "email": "firstname.lastname@gmail.com",
-            "github_username": "example",
-        },
-        "abbreviations": {
-            "gh": "https://github.com/{0}.git",
-            "gl": "https://gitlab.com/{0}.git",
-            "bb": "https://bitbucket.org/{0}",
+        'cookiecutters_dir': default_cookiecutters_dir,
+        'replay_dir': default_replay_dir,
+        'default_context': {
+            'full_name': 'Firstname Lastname',
+            'email': 'firstname.lastname@gmail.com',
+            'github_username': 'example'
         },
+        'abbreviations': {
+            'gh': 'https://github.com/{0}.git',
+            'gl': 'https://gitlab.com/{0}.git',
+            'bb': 'https://bitbucket.org/{0}',
+        }
     }
     assert conf == expected_conf
diff --git a/tests/test_get_user_config.py b/tests/test_get_user_config.py
index 8202496..91650a8 100644
--- a/tests/test_get_user_config.py
+++ b/tests/test_get_user_config.py
@@ -17,19 +17,19 @@ from cookiecutter import config
 from cookiecutter.exceptions import InvalidConfiguration
 
 
-@pytest.fixture(scope="module")
+@pytest.fixture(scope='module')
 def user_config_path():
-    return os.path.expanduser("~/.cookiecutterrc")
+    return os.path.expanduser('~/.cookiecutterrc')
 
 
-@pytest.fixture(scope="function")
+@pytest.fixture(scope='function')
 def back_up_rc(request, user_config_path):
     """
     Back up an existing cookiecutter rc and restore it after the test.
 
     If ~/.cookiecutterrc is pre-existing, move it to a temp location
     """
-    user_config_path_backup = os.path.expanduser("~/.cookiecutterrc.backup")
+    user_config_path_backup = os.path.expanduser('~/.cookiecutterrc.backup')
 
     if os.path.exists(user_config_path):
         shutil.copy(user_config_path, user_config_path_backup)
@@ -56,40 +56,40 @@ def back_up_rc(request, user_config_path):
 @pytest.fixture
 def custom_config():
     return {
-        "default_context": {
-            "full_name": "Firstname Lastname",
-            "email": "firstname.lastname@gmail.com",
-            "github_username": "example",
-        },
-        "cookiecutters_dir": "/home/example/some-path-to-templates",
-        "replay_dir": "/home/example/some-path-to-replay-files",
-        "abbreviations": {
-            "gh": "https://github.com/{0}.git",
-            "gl": "https://gitlab.com/{0}.git",
-            "bb": "https://bitbucket.org/{0}",
-            "helloworld": "https://github.com/hackebrot/helloworld",
+        'default_context': {
+            'full_name': 'Firstname Lastname',
+            'email': 'firstname.lastname@gmail.com',
+            'github_username': 'example',
         },
+        'cookiecutters_dir': '/home/example/some-path-to-templates',
+        'replay_dir': '/home/example/some-path-to-replay-files',
+        'abbreviations': {
+            'gh': 'https://github.com/{0}.git',
+            'gl': 'https://gitlab.com/{0}.git',
+            'bb': 'https://bitbucket.org/{0}',
+            'helloworld': 'https://github.com/hackebrot/helloworld',
+        }
     }
 
 
-@pytest.mark.usefixtures("back_up_rc")
+@pytest.mark.usefixtures('back_up_rc')
 def test_get_user_config_valid(user_config_path, custom_config):
     """Get config from a valid ~/.cookiecutterrc file"""
-    shutil.copy("tests/test-config/valid-config.yaml", user_config_path)
+    shutil.copy('tests/test-config/valid-config.yaml', user_config_path)
     conf = config.get_user_config()
 
     assert conf == custom_config
 
 
-@pytest.mark.usefixtures("back_up_rc")
+@pytest.mark.usefixtures('back_up_rc')
 def test_get_user_config_invalid(user_config_path):
     """Get config from an invalid ~/.cookiecutterrc file"""
-    shutil.copy("tests/test-config/invalid-config.yaml", user_config_path)
+    shutil.copy('tests/test-config/invalid-config.yaml', user_config_path)
     with pytest.raises(InvalidConfiguration):
         config.get_user_config()
 
 
-@pytest.mark.usefixtures("back_up_rc")
+@pytest.mark.usefixtures('back_up_rc')
 def test_get_user_config_nonexistent():
     """Get config from a nonexistent ~/.cookiecutterrc file"""
     assert config.get_user_config() == config.DEFAULT_CONFIG
@@ -97,11 +97,11 @@ def test_get_user_config_nonexistent():
 
 @pytest.fixture
 def custom_config_path(custom_config):
-    return "tests/test-config/valid-config.yaml"
+    return 'tests/test-config/valid-config.yaml'
 
 
 def test_specify_config_path(mocker, custom_config_path, custom_config):
-    spy_get_config = mocker.spy(config, "get_config")
+    spy_get_config = mocker.spy(config, 'get_config')
 
     user_config = config.get_user_config(custom_config_path)
     spy_get_config.assert_called_once_with(custom_config_path)
@@ -114,16 +114,15 @@ def test_default_config_path(user_config_path):
 
 
 def test_default_config_from_env_variable(
-    monkeypatch, custom_config_path, custom_config
-):
-    monkeypatch.setenv("COOKIECUTTER_CONFIG", custom_config_path)
+        monkeypatch, custom_config_path, custom_config):
+    monkeypatch.setenv('COOKIECUTTER_CONFIG', custom_config_path)
 
     user_config = config.get_user_config()
     assert user_config == custom_config
 
 
 def test_force_default_config(mocker):
-    spy_get_config = mocker.spy(config, "get_config")
+    spy_get_config = mocker.spy(config, 'get_config')
 
     user_config = config.get_user_config(None, default_config=True)
 
@@ -133,22 +132,21 @@ def test_force_default_config(mocker):
 
 def test_expand_user_for_directories_in_config(monkeypatch):
     def _expanduser(path):
-        return path.replace("~", "Users/bob")
-
-    monkeypatch.setattr("os.path.expanduser", _expanduser)
+        return path.replace('~', 'Users/bob')
+    monkeypatch.setattr('os.path.expanduser', _expanduser)
 
-    config_file = "tests/test-config/config-expand-user.yaml"
+    config_file = 'tests/test-config/config-expand-user.yaml'
 
     user_config = config.get_user_config(config_file)
-    assert user_config["replay_dir"] == "Users/bob/replay-files"
-    assert user_config["cookiecutters_dir"] == "Users/bob/templates"
+    assert user_config['replay_dir'] == 'Users/bob/replay-files'
+    assert user_config['cookiecutters_dir'] == 'Users/bob/templates'
 
 
 def test_expand_vars_for_directories_in_config(monkeypatch):
-    monkeypatch.setenv("COOKIES", "Users/bob/cookies")
+    monkeypatch.setenv('COOKIES', 'Users/bob/cookies')
 
-    config_file = "tests/test-config/config-expand-vars.yaml"
+    config_file = 'tests/test-config/config-expand-vars.yaml'
 
     user_config = config.get_user_config(config_file)
-    assert user_config["replay_dir"] == "Users/bob/cookies/replay-files"
-    assert user_config["cookiecutters_dir"] == "Users/bob/cookies/templates"
+    assert user_config['replay_dir'] == 'Users/bob/cookies/replay-files'
+    assert user_config['cookiecutters_dir'] == 'Users/bob/cookies/templates'
diff --git a/tests/test_hooks.py b/tests/test_hooks.py
index 4d3c3cb..189b5ec 100644
--- a/tests/test_hooks.py
+++ b/tests/test_hooks.py
@@ -13,16 +13,16 @@ from cookiecutter import hooks, utils, exceptions
 
 def make_test_repo(name):
     """Create test repository for test setup methods."""
-    hook_dir = os.path.join(name, "hooks")
-    template = os.path.join(name, "input{{hooks}}")
+    hook_dir = os.path.join(name, 'hooks')
+    template = os.path.join(name, 'input{{hooks}}')
     os.mkdir(name)
     os.mkdir(hook_dir)
     os.mkdir(template)
 
-    with open(os.path.join(template, "README.rst"), "w") as f:
+    with open(os.path.join(template, 'README.rst'), 'w') as f:
         f.write("foo\n===\n\nbar\n")
 
-    with open(os.path.join(hook_dir, "pre_gen_project.py"), "w") as f:
+    with open(os.path.join(hook_dir, 'pre_gen_project.py'), 'w') as f:
         f.write("#!/usr/bin/env python\n")
         f.write("# -*- coding: utf-8 -*-\n")
         f.write("from __future__ import print_function\n")
@@ -31,17 +31,17 @@ def make_test_repo(name):
         f.write("f = open('python_pre.txt', 'w')\n")
         f.write("f.close()\n")
 
-    if sys.platform.startswith("win"):
-        post = "post_gen_project.bat"
-        with open(os.path.join(hook_dir, post), "w") as f:
+    if sys.platform.startswith('win'):
+        post = 'post_gen_project.bat'
+        with open(os.path.join(hook_dir, post), 'w') as f:
             f.write("@echo off\n")
             f.write("\n")
             f.write("echo post generation hook\n")
             f.write("echo. >shell_post.txt\n")
     else:
-        post = "post_gen_project.sh"
+        post = 'post_gen_project.sh'
         filename = os.path.join(hook_dir, post)
-        with open(filename, "w") as f:
+        with open(filename, 'w') as f:
             f.write("#!/bin/bash\n")
             f.write("\n")
             f.write("echo 'post generation hook';\n")
@@ -54,7 +54,7 @@ def make_test_repo(name):
 
 class TestFindHooks(object):
 
-    repo_path = "tests/test-hooks"
+    repo_path = 'tests/test-hooks'
 
     def setup_method(self, method):
         self.post_hook = make_test_repo(self.repo_path)
@@ -65,32 +65,35 @@ class TestFindHooks(object):
     def test_find_hook(self):
         """Finds the specified hook."""
         with utils.work_in(self.repo_path):
-            expected_pre = os.path.abspath("hooks/pre_gen_project.py")
-            actual_hook_path = hooks.find_hook("pre_gen_project")
+            expected_pre = os.path.abspath('hooks/pre_gen_project.py')
+            actual_hook_path = hooks.find_hook('pre_gen_project')
             assert expected_pre == actual_hook_path
 
-            expected_post = os.path.abspath("hooks/{}".format(self.post_hook))
-            actual_hook_path = hooks.find_hook("post_gen_project")
+            expected_post = os.path.abspath('hooks/{}'.format(self.post_hook))
+            actual_hook_path = hooks.find_hook('post_gen_project')
             assert expected_post == actual_hook_path
 
     def test_no_hooks(self):
         """find_hooks should return None if the hook could not be found."""
-        with utils.work_in("tests/fake-repo"):
-            assert None is hooks.find_hook("pre_gen_project")
+        with utils.work_in('tests/fake-repo'):
+            assert None is hooks.find_hook('pre_gen_project')
 
     def test_unknown_hooks_dir(self):
         with utils.work_in(self.repo_path):
-            assert hooks.find_hook("pre_gen_project", hooks_dir="hooks_dir") is None
+            assert hooks.find_hook(
+                'pre_gen_project',
+                hooks_dir='hooks_dir'
+            ) is None
 
     def test_hook_not_found(self):
         with utils.work_in(self.repo_path):
-            assert hooks.find_hook("unknown_hook") is None
+            assert hooks.find_hook('unknown_hook') is None
 
 
 class TestExternalHooks(object):
 
-    repo_path = os.path.abspath("tests/test-hooks/")
-    hooks_path = os.path.abspath("tests/test-hooks/hooks")
+    repo_path = os.path.abspath('tests/test-hooks/')
+    hooks_path = os.path.abspath('tests/test-hooks/hooks')
 
     def setup_method(self, method):
         self.post_hook = make_test_repo(self.repo_path)
@@ -98,43 +101,46 @@ class TestExternalHooks(object):
     def teardown_method(self, method):
         utils.rmtree(self.repo_path)
 
-        if os.path.exists("python_pre.txt"):
-            os.remove("python_pre.txt")
-        if os.path.exists("shell_post.txt"):
-            os.remove("shell_post.txt")
-        if os.path.exists("tests/shell_post.txt"):
-            os.remove("tests/shell_post.txt")
-        if os.path.exists("tests/test-hooks/input{{hooks}}/python_pre.txt"):
-            os.remove("tests/test-hooks/input{{hooks}}/python_pre.txt")
-        if os.path.exists("tests/test-hooks/input{{hooks}}/shell_post.txt"):
-            os.remove("tests/test-hooks/input{{hooks}}/shell_post.txt")
-        if os.path.exists("tests/context_post.txt"):
-            os.remove("tests/context_post.txt")
+        if os.path.exists('python_pre.txt'):
+            os.remove('python_pre.txt')
+        if os.path.exists('shell_post.txt'):
+            os.remove('shell_post.txt')
+        if os.path.exists('tests/shell_post.txt'):
+            os.remove('tests/shell_post.txt')
+        if os.path.exists('tests/test-hooks/input{{hooks}}/python_pre.txt'):
+            os.remove('tests/test-hooks/input{{hooks}}/python_pre.txt')
+        if os.path.exists('tests/test-hooks/input{{hooks}}/shell_post.txt'):
+            os.remove('tests/test-hooks/input{{hooks}}/shell_post.txt')
+        if os.path.exists('tests/context_post.txt'):
+            os.remove('tests/context_post.txt')
 
     def test_run_script(self):
         """Execute a hook script, independently of project generation"""
         hooks.run_script(os.path.join(self.hooks_path, self.post_hook))
-        assert os.path.isfile("shell_post.txt")
+        assert os.path.isfile('shell_post.txt')
 
     def test_run_script_cwd(self):
         """Change directory before running hook"""
-        hooks.run_script(os.path.join(self.hooks_path, self.post_hook), "tests")
-        assert os.path.isfile("tests/shell_post.txt")
-        assert "tests" not in os.getcwd()
+        hooks.run_script(
+            os.path.join(self.hooks_path, self.post_hook),
+            'tests'
+        )
+        assert os.path.isfile('tests/shell_post.txt')
+        assert 'tests' not in os.getcwd()
 
     def test_run_script_with_context(self):
         """Execute a hook script, passing a context"""
-        hook_path = os.path.join(self.hooks_path, "post_gen_project.sh")
+        hook_path = os.path.join(self.hooks_path, 'post_gen_project.sh')
 
-        if sys.platform.startswith("win"):
-            post = "post_gen_project.bat"
-            with open(os.path.join(self.hooks_path, post), "w") as f:
+        if sys.platform.startswith('win'):
+            post = 'post_gen_project.bat'
+            with open(os.path.join(self.hooks_path, post), 'w') as f:
                 f.write("@echo off\n")
                 f.write("\n")
                 f.write("echo post generation hook\n")
                 f.write("echo. >{{cookiecutter.file}}\n")
         else:
-            with open(hook_path, "w") as fh:
+            with open(hook_path, 'w') as fh:
                 fh.write("#!/bin/bash\n")
                 fh.write("\n")
                 fh.write("echo 'post generation hook';\n")
@@ -144,41 +150,44 @@ class TestExternalHooks(object):
 
         hooks.run_script_with_context(
             os.path.join(self.hooks_path, self.post_hook),
-            "tests",
-            {"cookiecutter": {"file": "context_post.txt"}},
-        )
-        assert os.path.isfile("tests/context_post.txt")
-        assert "tests" not in os.getcwd()
+            'tests',
+            {
+                'cookiecutter': {
+                    'file': 'context_post.txt'
+                }
+            })
+        assert os.path.isfile('tests/context_post.txt')
+        assert 'tests' not in os.getcwd()
 
     def test_run_hook(self):
         """Execute hook from specified template in specified output \
         directory."""
-        tests_dir = os.path.join(self.repo_path, "input{{hooks}}")
+        tests_dir = os.path.join(self.repo_path, 'input{{hooks}}')
         with utils.work_in(self.repo_path):
-            hooks.run_hook("pre_gen_project", tests_dir, {})
-            assert os.path.isfile(os.path.join(tests_dir, "python_pre.txt"))
+            hooks.run_hook('pre_gen_project', tests_dir, {})
+            assert os.path.isfile(os.path.join(tests_dir, 'python_pre.txt'))
 
-            hooks.run_hook("post_gen_project", tests_dir, {})
-            assert os.path.isfile(os.path.join(tests_dir, "shell_post.txt"))
+            hooks.run_hook('post_gen_project', tests_dir, {})
+            assert os.path.isfile(os.path.join(tests_dir, 'shell_post.txt'))
 
     def test_run_failing_hook(self):
-        hook_path = os.path.join(self.hooks_path, "pre_gen_project.py")
-        tests_dir = os.path.join(self.repo_path, "input{{hooks}}")
+        hook_path = os.path.join(self.hooks_path, 'pre_gen_project.py')
+        tests_dir = os.path.join(self.repo_path, 'input{{hooks}}')
 
-        with open(hook_path, "w") as f:
+        with open(hook_path, 'w') as f:
             f.write("#!/usr/bin/env python\n")
             f.write("import sys; sys.exit(1)\n")
 
         with utils.work_in(self.repo_path):
             with pytest.raises(exceptions.FailedHookException) as excinfo:
-                hooks.run_hook("pre_gen_project", tests_dir, {})
-            assert "Hook script failed" in str(excinfo.value)
+                hooks.run_hook('pre_gen_project', tests_dir, {})
+            assert 'Hook script failed' in str(excinfo.value)
 
 
 @pytest.yield_fixture
 def dir_with_hooks(tmpdir):
     """Yield a directory that contains hook backup files."""
-    hooks_dir = tmpdir.mkdir("hooks")
+    hooks_dir = tmpdir.mkdir('hooks')
 
     pre_hook_content = textwrap.dedent(
         u"""
@@ -187,8 +196,8 @@ def dir_with_hooks(tmpdir):
         print('pre_gen_project.py~')
         """
     )
-    pre_gen_hook_file = hooks_dir / "pre_gen_project.py~"
-    pre_gen_hook_file.write_text(pre_hook_content, encoding="utf8")
+    pre_gen_hook_file = hooks_dir / 'pre_gen_project.py~'
+    pre_gen_hook_file.write_text(pre_hook_content, encoding='utf8')
 
     post_hook_content = textwrap.dedent(
         u"""
@@ -198,8 +207,8 @@ def dir_with_hooks(tmpdir):
         """
     )
 
-    post_gen_hook_file = hooks_dir / "post_gen_project.py~"
-    post_gen_hook_file.write_text(post_hook_content, encoding="utf8")
+    post_gen_hook_file = hooks_dir / 'post_gen_project.py~'
+    post_gen_hook_file.write_text(post_hook_content, encoding='utf8')
 
     # Make sure to yield the parent directory as `find_hooks()`
     # looks into `hooks/` in the current working directory
@@ -212,5 +221,5 @@ def dir_with_hooks(tmpdir):
 def test_ignore_hook_backup_files(monkeypatch, dir_with_hooks):
     # Change the current working directory that contains `hooks/`
     monkeypatch.chdir(dir_with_hooks)
-    assert hooks.find_hook("pre_gen_project") is None
-    assert hooks.find_hook("post_gen_project") is None
+    assert hooks.find_hook('pre_gen_project') is None
+    assert hooks.find_hook('post_gen_project') is None
diff --git a/tests/test_log.py b/tests/test_log.py
index 8543bd8..a4d7110 100644
--- a/tests/test_log.py
+++ b/tests/test_log.py
@@ -10,59 +10,75 @@ from cookiecutter.log import configure_logger
 
 
 def create_log_records():
-    cookiecutter_logger = logging.getLogger("cookiecutter")
-    foo_logger = logging.getLogger("cookiecutter.foo")
-    foobar_logger = logging.getLogger("cookiecutter.foo.bar")
+    cookiecutter_logger = logging.getLogger('cookiecutter')
+    foo_logger = logging.getLogger('cookiecutter.foo')
+    foobar_logger = logging.getLogger('cookiecutter.foo.bar')
 
-    cookiecutter_logger.info("Welcome to Cookiecutter")
-    cookiecutter_logger.debug("Generating project from pytest-plugin")
-    foo_logger.info("Loading user config from home dir")
+    cookiecutter_logger.info('Welcome to Cookiecutter')
+    cookiecutter_logger.debug('Generating project from pytest-plugin')
+    foo_logger.info('Loading user config from home dir')
     foobar_logger.debug("I don't know.")
-    foobar_logger.debug("I wanted to save the world.")
-    foo_logger.error("Aw, snap! Something went wrong")
-    cookiecutter_logger.debug("Successfully generated project")
+    foobar_logger.debug('I wanted to save the world.')
+    foo_logger.error('Aw, snap! Something went wrong')
+    cookiecutter_logger.debug('Successfully generated project')
 
 
 @pytest.fixture
 def info_messages():
     return [
-        "INFO: Welcome to Cookiecutter",
-        "INFO: Loading user config from home dir",
-        "ERROR: Aw, snap! Something went wrong",
+        'INFO: Welcome to Cookiecutter',
+        'INFO: Loading user config from home dir',
+        'ERROR: Aw, snap! Something went wrong',
     ]
 
 
 @pytest.fixture
 def debug_messages():
     return [
-        "INFO cookiecutter: " "Welcome to Cookiecutter",
-        "DEBUG cookiecutter: " "Generating project from pytest-plugin",
-        "INFO cookiecutter.foo: " "Loading user config from home dir",
-        "DEBUG cookiecutter.foo.bar: " "I don't know.",
-        "DEBUG cookiecutter.foo.bar: " "I wanted to save the world.",
-        "ERROR cookiecutter.foo: " "Aw, snap! Something went wrong",
-        "DEBUG cookiecutter: " "Successfully generated project",
+        'INFO cookiecutter: '
+        'Welcome to Cookiecutter',
+
+        'DEBUG cookiecutter: '
+        'Generating project from pytest-plugin',
+
+        'INFO cookiecutter.foo: '
+        'Loading user config from home dir',
+
+        "DEBUG cookiecutter.foo.bar: "
+        "I don't know.",
+
+        'DEBUG cookiecutter.foo.bar: '
+        'I wanted to save the world.',
+
+        'ERROR cookiecutter.foo: '
+        'Aw, snap! Something went wrong',
+
+        'DEBUG cookiecutter: '
+        'Successfully generated project',
     ]
 
 
 @pytest.fixture
 def info_logger():
-    return configure_logger(stream_level="INFO")
+    return configure_logger(stream_level='INFO')
 
 
 @pytest.fixture
 def debug_logger():
-    return configure_logger(stream_level="DEBUG")
+    return configure_logger(stream_level='DEBUG')
 
 
 @pytest.fixture
 def debug_file(tmpdir):
-    return tmpdir / "pytest-plugin.log"
+    return tmpdir / 'pytest-plugin.log'
 
 
 @pytest.fixture
 def info_logger_with_file(debug_file):
-    return configure_logger(stream_level="INFO", debug_file=str(debug_file),)
+    return configure_logger(
+        stream_level='INFO',
+        debug_file=str(debug_file),
+    )
 
 
 def test_info_stdout_logging(caplog, info_logger, info_messages):
@@ -99,7 +115,8 @@ def test_debug_stdout_logging(caplog, debug_logger, debug_messages):
     assert stream_messages == debug_messages
 
 
-def test_debug_file_logging(caplog, info_logger_with_file, debug_file, debug_messages):
+def test_debug_file_logging(
+        caplog, info_logger_with_file, debug_file, debug_messages):
     """Test that logging to stdout uses a different format and level than \
     the the file handler."""
     [file_handler, stream_handler] = info_logger_with_file.handlers
@@ -113,4 +130,4 @@ def test_debug_file_logging(caplog, info_logger_with_file, debug_file, debug_mes
     assert debug_file.exists()
 
     # Last line in the log file is an empty line
-    assert debug_file.readlines(cr=False) == debug_messages + [""]
+    assert debug_file.readlines(cr=False) == debug_messages + ['']
diff --git a/tests/test_main.py b/tests/test_main.py
index a0732ad..f98e81c 100644
--- a/tests/test_main.py
+++ b/tests/test_main.py
@@ -6,8 +6,7 @@ from cookiecutter.main import cookiecutter
 
 
 def test_replay_dump_template_name(
-    monkeypatch, mocker, user_config_data, user_config_file
-):
+        monkeypatch, mocker, user_config_data, user_config_file):
     """Check that replay_dump is called with a valid template_name
 
     Template name must not be a relative path.
@@ -19,23 +18,27 @@ def test_replay_dump_template_name(
     Change the current working directory temporarily to 'tests/fake-repo-tmpl'
     for this test and call cookiecutter with '.' for the target template.
     """
-    monkeypatch.chdir("tests/fake-repo-tmpl")
+    monkeypatch.chdir('tests/fake-repo-tmpl')
 
-    mock_replay_dump = mocker.patch("cookiecutter.main.dump")
-    mocker.patch("cookiecutter.main.generate_files")
+    mock_replay_dump = mocker.patch('cookiecutter.main.dump')
+    mocker.patch('cookiecutter.main.generate_files')
 
     cookiecutter(
-        ".", no_input=True, replay=False, config_file=user_config_file,
+        '.',
+        no_input=True,
+        replay=False,
+        config_file=user_config_file,
     )
 
     mock_replay_dump.assert_called_once_with(
-        user_config_data["replay_dir"], "fake-repo-tmpl", mocker.ANY,
+        user_config_data['replay_dir'],
+        'fake-repo-tmpl',
+        mocker.ANY,
     )
 
 
 def test_replay_load_template_name(
-    monkeypatch, mocker, user_config_data, user_config_file
-):
+        monkeypatch, mocker, user_config_data, user_config_file):
     """Check that replay_load is called correctly
 
     Calls require valid template_name that is not a relative path.
@@ -43,15 +46,18 @@ def test_replay_load_template_name(
     Change the current working directory temporarily to 'tests/fake-repo-tmpl'
     for this test and call cookiecutter with '.' for the target template.
     """
-    monkeypatch.chdir("tests/fake-repo-tmpl")
+    monkeypatch.chdir('tests/fake-repo-tmpl')
 
-    mock_replay_load = mocker.patch("cookiecutter.main.load")
-    mocker.patch("cookiecutter.main.generate_files")
+    mock_replay_load = mocker.patch('cookiecutter.main.load')
+    mocker.patch('cookiecutter.main.generate_files')
 
     cookiecutter(
-        ".", replay=True, config_file=user_config_file,
+        '.',
+        replay=True,
+        config_file=user_config_file,
     )
 
     mock_replay_load.assert_called_once_with(
-        user_config_data["replay_dir"], "fake-repo-tmpl",
+        user_config_data['replay_dir'],
+        'fake-repo-tmpl',
     )
diff --git a/tests/test_output_folder.py b/tests/test_output_folder.py
index 81a0831..25e753e 100644
--- a/tests/test_output_folder.py
+++ b/tests/test_output_folder.py
@@ -18,46 +18,50 @@ from cookiecutter import generate
 from cookiecutter import utils
 
 
-@pytest.fixture(scope="function")
+@pytest.fixture(scope='function')
 def remove_output_folder(request):
     """Remove the output folder in case it exists on disk."""
-
     def finalizer_remove_output_folder():
-        if os.path.exists("output_folder"):
-            utils.rmtree("output_folder")
-
+        if os.path.exists('output_folder'):
+            utils.rmtree('output_folder')
     request.addfinalizer(finalizer_remove_output_folder)
 
 
-@pytest.mark.usefixtures("clean_system", "remove_output_folder")
+@pytest.mark.usefixtures('clean_system', 'remove_output_folder')
 def test_output_folder():
     context = generate.generate_context(
-        context_file="tests/test-output-folder/cookiecutter.json"
+        context_file='tests/test-output-folder/cookiecutter.json'
+    )
+    generate.generate_files(
+        context=context,
+        repo_dir='tests/test-output-folder'
     )
-    generate.generate_files(context=context, repo_dir="tests/test-output-folder")
 
     something = """Hi!
 My name is Audrey Greenfeld.
 It is 2014."""
-    something2 = open("output_folder/something.txt").read()
+    something2 = open('output_folder/something.txt').read()
     assert something == something2
 
     in_folder = "The color is green and the letter is D."
-    in_folder2 = open("output_folder/folder/in_folder.txt").read()
+    in_folder2 = open('output_folder/folder/in_folder.txt').read()
     assert in_folder == in_folder2
 
-    assert os.path.isdir("output_folder/im_a.dir")
-    assert os.path.isfile("output_folder/im_a.dir/im_a.file.py")
+    assert os.path.isdir('output_folder/im_a.dir')
+    assert os.path.isfile('output_folder/im_a.dir/im_a.file.py')
 
 
-@pytest.mark.usefixtures("clean_system", "remove_output_folder")
+@pytest.mark.usefixtures('clean_system', 'remove_output_folder')
 def test_exception_when_output_folder_exists():
     context = generate.generate_context(
-        context_file="tests/test-output-folder/cookiecutter.json"
+        context_file='tests/test-output-folder/cookiecutter.json'
     )
-    output_folder = context["cookiecutter"]["test_name"]
+    output_folder = context['cookiecutter']['test_name']
 
     if not os.path.exists(output_folder):
         os.makedirs(output_folder)
     with pytest.raises(exceptions.OutputDirExistsException):
-        generate.generate_files(context=context, repo_dir="tests/test-output-folder")
+        generate.generate_files(
+            context=context,
+            repo_dir='tests/test-output-folder'
+        )
diff --git a/tests/test_preferred_encoding.py b/tests/test_preferred_encoding.py
index 6d5b552..26b0306 100644
--- a/tests/test_preferred_encoding.py
+++ b/tests/test_preferred_encoding.py
@@ -11,7 +11,7 @@ import pytest
 PY3 = sys.version_info[0] == 3
 
 
-@pytest.mark.skipif(not PY3, reason="Only necessary on Python3")
+@pytest.mark.skipif(not PY3, reason='Only necessary on Python3')
 def test_not_ascii():
     """Make sure that the systems preferred encoding is not `ascii`.
 
@@ -26,5 +26,5 @@ def test_not_ascii():
         preferred_encoding = locale.getpreferredencoding()
         fs_enc = codecs.lookup(preferred_encoding).name
     except Exception:
-        fs_enc = "ascii"
-    assert fs_enc != "ascii"
+        fs_enc = 'ascii'
+    assert fs_enc != 'ascii'
diff --git a/tests/test_prompt.py b/tests/test_prompt.py
index 304b85e..5461e6d 100644
--- a/tests/test_prompt.py
+++ b/tests/test_prompt.py
@@ -11,22 +11,20 @@ import six
 from cookiecutter import prompt, exceptions, environment
 
 
-@pytest.mark.parametrize(
-    "raw_var, rendered_var",
-    [
-        (1, "1"),
-        (True, "True"),
-        ("foo", "foo"),
-        ("{{cookiecutter.project}}", "foobar"),
-        (None, None),
-    ],
-)
+@pytest.mark.parametrize('raw_var, rendered_var', [
+    (1, '1'),
+    (True, 'True'),
+    ('foo', 'foo'),
+    ('{{cookiecutter.project}}', 'foobar'),
+    (None, None),
+])
 def test_convert_to_str(mocker, raw_var, rendered_var):
     env = environment.StrictEnvironment()
     from_string = mocker.patch(
-        "cookiecutter.prompt.StrictEnvironment.from_string", wraps=env.from_string,
+        'cookiecutter.prompt.StrictEnvironment.from_string',
+        wraps=env.from_string
     )
-    context = {"project": "foobar"}
+    context = {'project': 'foobar'}
 
     result = prompt.render_variable(env, raw_var, context)
     assert result == rendered_var
@@ -42,125 +40,151 @@ def test_convert_to_str(mocker, raw_var, rendered_var):
 
 @pytest.fixture(autouse=True)
 def patch_readline_on_win(monkeypatch):
-    if "windows" in platform.platform().lower():
-        monkeypatch.setattr("sys.stdin.readline", lambda: "\n")
+    if 'windows' in platform.platform().lower():
+        monkeypatch.setattr('sys.stdin.readline', lambda: '\n')
 
 
 class TestPrompt(object):
     def test_prompt_for_config_simple(self, monkeypatch):
         monkeypatch.setattr(
-            "cookiecutter.prompt.read_user_variable",
-            lambda var, default: u"Audrey Roy",
+            'cookiecutter.prompt.read_user_variable',
+            lambda var, default: u'Audrey Roy'
         )
-        context = {"cookiecutter": {"full_name": "Your Name"}}
+        context = {'cookiecutter': {'full_name': 'Your Name'}}
 
         cookiecutter_dict = prompt.prompt_for_config(context)
-        assert cookiecutter_dict == {"full_name": u"Audrey Roy"}
+        assert cookiecutter_dict == {'full_name': u'Audrey Roy'}
 
     def test_prompt_for_config_unicode(self, monkeypatch):
         monkeypatch.setattr(
-            "cookiecutter.prompt.read_user_variable",
-            lambda var, default: u"Pizzä ïs Gööd",
+            'cookiecutter.prompt.read_user_variable',
+            lambda var, default: u'Pizzä ïs Gööd'
         )
-        context = {"cookiecutter": {"full_name": "Your Name"}}
+        context = {'cookiecutter': {'full_name': 'Your Name'}}
 
         cookiecutter_dict = prompt.prompt_for_config(context)
-        assert cookiecutter_dict == {"full_name": u"Pizzä ïs Gööd"}
+        assert cookiecutter_dict == {'full_name': u'Pizzä ïs Gööd'}
 
     def test_prompt_for_config_empty_dict(self, monkeypatch):
         monkeypatch.setattr(
-            "cookiecutter.prompt.read_user_dict", lambda var, default: {}
+            'cookiecutter.prompt.read_user_dict',
+            lambda var, default: {}
         )
-        context = {"cookiecutter": {"details": {}}}
+        context = {'cookiecutter': {'details': {}}}
 
         cookiecutter_dict = prompt.prompt_for_config(context)
-        assert cookiecutter_dict == {"details": {}}
+        assert cookiecutter_dict == {'details': {}}
 
     def test_prompt_for_config_dict(self, monkeypatch):
         monkeypatch.setattr(
-            "cookiecutter.prompt.read_user_dict",
-            lambda var, default: {"key": "value", "integer": 37},
+            'cookiecutter.prompt.read_user_dict',
+            lambda var, default: {"key": "value", "integer": 37}
         )
-        context = {"cookiecutter": {"details": {}}}
+        context = {'cookiecutter': {'details': {}}}
 
         cookiecutter_dict = prompt.prompt_for_config(context)
-        assert cookiecutter_dict == {"details": {"key": u"value", "integer": 37}}
+        assert cookiecutter_dict == {
+            'details': {
+                'key': u'value',
+                'integer': 37
+            }
+        }
 
     def test_prompt_for_config_deep_dict(self, monkeypatch):
         monkeypatch.setattr(
-            "cookiecutter.prompt.read_user_dict",
+            'cookiecutter.prompt.read_user_dict',
             lambda var, default: {
                 "key": "value",
                 "integer_key": 37,
                 "dict_key": {
                     "deep_key": "deep_value",
                     "deep_integer": 42,
-                    "deep_list": ["deep value 1", "deep value 2", "deep value 3",],
+                    "deep_list": [
+                        "deep value 1",
+                        "deep value 2",
+                        "deep value 3",
+                    ]
                 },
-                "list_key": ["value 1", "value 2", "value 3",],
-            },
+                "list_key": [
+                    "value 1",
+                    "value 2",
+                    "value 3",
+                ]
+            }
         )
-        context = {"cookiecutter": {"details": {}}}
+        context = {'cookiecutter': {'details': {}}}
 
         cookiecutter_dict = prompt.prompt_for_config(context)
         assert cookiecutter_dict == {
-            "details": {
+            'details': {
                 "key": "value",
                 "integer_key": 37,
                 "dict_key": {
                     "deep_key": "deep_value",
                     "deep_integer": 42,
-                    "deep_list": ["deep value 1", "deep value 2", "deep value 3",],
+                    "deep_list": [
+                        "deep value 1",
+                        "deep value 2",
+                        "deep value 3",
+                    ]
                 },
-                "list_key": ["value 1", "value 2", "value 3",],
+                "list_key": [
+                    "value 1",
+                    "value 2",
+                    "value 3",
+                ]
             }
         }
 
     def test_should_render_dict(self):
         context = {
-            "cookiecutter": {
-                "project_name": "Slartibartfast",
-                "details": {"other_name": "{{cookiecutter.project_name}}"},
+            'cookiecutter': {
+                'project_name': 'Slartibartfast',
+                'details': {
+                    'other_name': '{{cookiecutter.project_name}}'
+                }
             }
         }
 
         cookiecutter_dict = prompt.prompt_for_config(context, no_input=True)
         assert cookiecutter_dict == {
-            "project_name": "Slartibartfast",
-            "details": {"other_name": u"Slartibartfast",},
+            'project_name': 'Slartibartfast',
+            'details': {
+                'other_name': u'Slartibartfast',
+            }
         }
 
     def test_should_render_deep_dict(self):
         context = {
-            "cookiecutter": {
-                "project_name": "Slartibartfast",
-                "details": {
+            'cookiecutter': {
+                'project_name': "Slartibartfast",
+                'details': {
                     "key": "value",
                     "integer_key": 37,
-                    "other_name": "{{cookiecutter.project_name}}",
+                    "other_name": '{{cookiecutter.project_name}}',
                     "dict_key": {
                         "deep_key": "deep_value",
                         "deep_integer": 42,
-                        "deep_other_name": "{{cookiecutter.project_name}}",
+                        "deep_other_name": '{{cookiecutter.project_name}}',
                         "deep_list": [
                             "deep value 1",
                             "{{cookiecutter.project_name}}",
                             "deep value 3",
-                        ],
+                        ]
                     },
                     "list_key": [
                         "value 1",
                         "{{cookiecutter.project_name}}",
                         "value 3",
-                    ],
-                },
+                    ]
+                }
             }
         }
 
         cookiecutter_dict = prompt.prompt_for_config(context, no_input=True)
         assert cookiecutter_dict == {
-            "project_name": "Slartibartfast",
-            "details": {
+            'project_name': "Slartibartfast",
+            'details': {
                 "key": "value",
                 "integer_key": "37",
                 "other_name": "Slartibartfast",
@@ -168,184 +192,208 @@ class TestPrompt(object):
                     "deep_key": "deep_value",
                     "deep_integer": "42",
                     "deep_other_name": "Slartibartfast",
-                    "deep_list": ["deep value 1", "Slartibartfast", "deep value 3",],
+                    "deep_list": [
+                        "deep value 1",
+                        "Slartibartfast",
+                        "deep value 3",
+                    ]
                 },
-                "list_key": ["value 1", "Slartibartfast", "value 3",],
-            },
+                "list_key": [
+                    "value 1",
+                    "Slartibartfast",
+                    "value 3",
+                ]
+            }
         }
 
     def test_unicode_prompt_for_config_unicode(self, monkeypatch):
         monkeypatch.setattr(
-            "cookiecutter.prompt.read_user_variable",
-            lambda var, default: u"Pizzä ïs Gööd",
+            'cookiecutter.prompt.read_user_variable',
+            lambda var, default: u'Pizzä ïs Gööd'
         )
-        context = {"cookiecutter": {"full_name": u"Řekni či napiš své jméno"}}
+        context = {'cookiecutter': {'full_name': u'Řekni či napiš své jméno'}}
 
         cookiecutter_dict = prompt.prompt_for_config(context)
-        assert cookiecutter_dict == {"full_name": u"Pizzä ïs Gööd"}
+        assert cookiecutter_dict == {'full_name': u'Pizzä ïs Gööd'}
 
     def test_unicode_prompt_for_default_config_unicode(self, monkeypatch):
         monkeypatch.setattr(
-            "cookiecutter.prompt.read_user_variable", lambda var, default: default,
+            'cookiecutter.prompt.read_user_variable',
+            lambda var, default: default
         )
-        context = {"cookiecutter": {"full_name": u"Řekni či napiš své jméno"}}
+        context = {'cookiecutter': {'full_name': u'Řekni či napiš své jméno'}}
 
         cookiecutter_dict = prompt.prompt_for_config(context)
-        assert cookiecutter_dict == {"full_name": u"Řekni či napiš své jméno"}
+        assert cookiecutter_dict == {'full_name': u'Řekni či napiš své jméno'}
 
     def test_unicode_prompt_for_templated_config(self, monkeypatch):
         monkeypatch.setattr(
-            "cookiecutter.prompt.read_user_variable", lambda var, default: default,
+            'cookiecutter.prompt.read_user_variable',
+            lambda var, default: default
         )
-        context = {
-            "cookiecutter": OrderedDict(
-                [
-                    ("project_name", u"A New Project"),
-                    (
-                        "pkg_name",
-                        u'{{ cookiecutter.project_name|lower|replace(" ", "") }}',
-                    ),
-                ]
+        context = {'cookiecutter': OrderedDict([
+            (
+                'project_name',
+                u'A New Project'
+            ), (
+                'pkg_name',
+                u'{{ cookiecutter.project_name|lower|replace(" ", "") }}'
             )
-        }
+        ])}
 
         exp_cookiecutter_dict = {
-            "project_name": u"A New Project",
-            "pkg_name": u"anewproject",
+            'project_name': u'A New Project', 'pkg_name': u'anewproject'
         }
         cookiecutter_dict = prompt.prompt_for_config(context)
         assert cookiecutter_dict == exp_cookiecutter_dict
 
     def test_dont_prompt_for_private_context_var(self, monkeypatch):
         monkeypatch.setattr(
-            "cookiecutter.prompt.read_user_variable",
+            'cookiecutter.prompt.read_user_variable',
             lambda var, default: pytest.fail(
-                "Should not try to read a response for private context var"
-            ),
+                'Should not try to read a response for private context var'
+            )
         )
-        context = {"cookiecutter": {"_copy_without_render": ["*.html"]}}
+        context = {'cookiecutter': {'_copy_without_render': ['*.html']}}
         cookiecutter_dict = prompt.prompt_for_config(context)
-        assert cookiecutter_dict == {"_copy_without_render": ["*.html"]}
+        assert cookiecutter_dict == {'_copy_without_render': ['*.html']}
 
 
 class TestReadUserChoice(object):
     def test_should_invoke_read_user_choice(self, mocker):
         prompt_choice = mocker.patch(
-            "cookiecutter.prompt.prompt_choice_for_config",
-            wraps=prompt.prompt_choice_for_config,
+            'cookiecutter.prompt.prompt_choice_for_config',
+            wraps=prompt.prompt_choice_for_config
         )
 
-        read_choice = mocker.patch("cookiecutter.prompt.read_user_choice")
-        read_choice.return_value = "all"
+        read_choice = mocker.patch('cookiecutter.prompt.read_user_choice')
+        read_choice.return_value = 'all'
 
-        read_variable = mocker.patch("cookiecutter.prompt.read_user_variable")
+        read_variable = mocker.patch('cookiecutter.prompt.read_user_variable')
 
-        CHOICES = ["landscape", "portrait", "all"]
-        CONTEXT = {"cookiecutter": {"orientation": CHOICES}}
+        CHOICES = ['landscape', 'portrait', 'all']
+        CONTEXT = {
+            'cookiecutter': {
+                'orientation': CHOICES
+            }
+        }
 
         cookiecutter_dict = prompt.prompt_for_config(CONTEXT)
 
         assert not read_variable.called
         assert prompt_choice.called
-        read_choice.assert_called_once_with("orientation", CHOICES)
-        assert cookiecutter_dict == {"orientation": "all"}
+        read_choice.assert_called_once_with('orientation', CHOICES)
+        assert cookiecutter_dict == {'orientation': 'all'}
 
     def test_should_not_invoke_read_user_variable(self, mocker):
-        read_variable = mocker.patch("cookiecutter.prompt.read_user_variable")
-        read_variable.return_value = u"Audrey Roy"
+        read_variable = mocker.patch('cookiecutter.prompt.read_user_variable')
+        read_variable.return_value = u'Audrey Roy'
 
-        prompt_choice = mocker.patch("cookiecutter.prompt.prompt_choice_for_config")
+        prompt_choice = mocker.patch(
+            'cookiecutter.prompt.prompt_choice_for_config'
+        )
 
-        read_choice = mocker.patch("cookiecutter.prompt.read_user_choice")
+        read_choice = mocker.patch('cookiecutter.prompt.read_user_choice')
 
-        CONTEXT = {"cookiecutter": {"full_name": "Your Name"}}
+        CONTEXT = {'cookiecutter': {'full_name': 'Your Name'}}
 
         cookiecutter_dict = prompt.prompt_for_config(CONTEXT)
 
         assert not prompt_choice.called
         assert not read_choice.called
-        read_variable.assert_called_once_with("full_name", "Your Name")
-        assert cookiecutter_dict == {"full_name": u"Audrey Roy"}
+        read_variable.assert_called_once_with('full_name', 'Your Name')
+        assert cookiecutter_dict == {'full_name': u'Audrey Roy'}
 
     def test_should_render_choices(self, mocker):
-        read_choice = mocker.patch("cookiecutter.prompt.read_user_choice")
-        read_choice.return_value = u"anewproject"
-
-        read_variable = mocker.patch("cookiecutter.prompt.read_user_variable")
-        read_variable.return_value = u"A New Project"
-
-        RENDERED_CHOICES = [u"foo", u"anewproject", u"bar"]
-
-        CONTEXT = {
-            "cookiecutter": OrderedDict(
+        read_choice = mocker.patch('cookiecutter.prompt.read_user_choice')
+        read_choice.return_value = u'anewproject'
+
+        read_variable = mocker.patch('cookiecutter.prompt.read_user_variable')
+        read_variable.return_value = u'A New Project'
+
+        RENDERED_CHOICES = [
+            u'foo',
+            u'anewproject',
+            u'bar'
+        ]
+
+        CONTEXT = {'cookiecutter': OrderedDict([
+            (
+                'project_name',
+                u'A New Project'
+            ), (
+                'pkg_name',
                 [
-                    ("project_name", u"A New Project"),
-                    (
-                        "pkg_name",
-                        [
-                            u"foo",
-                            u'{{ cookiecutter.project_name|lower|replace(" ", "") }}',
-                            u"bar",
-                        ],
-                    ),
+                    u'foo',
+                    u'{{ cookiecutter.project_name|lower|replace(" ", "") }}',
+                    u'bar'
                 ]
             )
-        }
+        ])}
 
         EXP_COOKIECUTTER_DICT = {
-            "project_name": u"A New Project",
-            "pkg_name": u"anewproject",
+            'project_name': u'A New Project', 'pkg_name': u'anewproject'
         }
         cookiecutter_dict = prompt.prompt_for_config(CONTEXT)
 
-        read_variable.assert_called_once_with("project_name", u"A New Project")
-        read_choice.assert_called_once_with("pkg_name", RENDERED_CHOICES)
+        read_variable.assert_called_once_with('project_name', u'A New Project')
+        read_choice.assert_called_once_with('pkg_name', RENDERED_CHOICES)
         assert cookiecutter_dict == EXP_COOKIECUTTER_DICT
 
 
 class TestPromptChoiceForConfig(object):
     @pytest.fixture
     def choices(self):
-        return ["landscape", "portrait", "all"]
+        return ['landscape', 'portrait', 'all']
 
     @pytest.fixture
     def context(self, choices):
-        return {"cookiecutter": {"orientation": choices}}
+        return {
+            'cookiecutter': {
+                'orientation': choices
+            }
+        }
 
-    def test_should_return_first_option_if_no_input(self, mocker, choices, context):
-        read_choice = mocker.patch("cookiecutter.prompt.read_user_choice")
+    def test_should_return_first_option_if_no_input(
+            self, mocker, choices, context):
+        read_choice = mocker.patch('cookiecutter.prompt.read_user_choice')
 
         expected_choice = choices[0]
 
         actual_choice = prompt.prompt_choice_for_config(
             context,
             environment.StrictEnvironment(),
-            "orientation",
+            'orientation',
             choices,
-            True,  # Suppress user input
+            True  # Suppress user input
         )
         assert not read_choice.called
         assert expected_choice == actual_choice
 
     def test_should_read_userchoice(self, mocker, choices, context):
-        read_choice = mocker.patch("cookiecutter.prompt.read_user_choice")
-        read_choice.return_value = "all"
+        read_choice = mocker.patch('cookiecutter.prompt.read_user_choice')
+        read_choice.return_value = 'all'
 
-        expected_choice = "all"
+        expected_choice = 'all'
 
         actual_choice = prompt.prompt_choice_for_config(
             context,
             environment.StrictEnvironment(),
-            "orientation",
+            'orientation',
             choices,
-            False,  # Ask the user for input
+            False  # Ask the user for input
         )
-        read_choice.assert_called_once_with("orientation", choices)
+        read_choice.assert_called_once_with('orientation', choices)
         assert expected_choice == actual_choice
 
 
 def test_undefined_variable_in_cookiecutter_dict():
-    context = {"cookiecutter": {"hello": "world", "foo": "{{cookiecutter.nope}}"}}
+    context = {
+        'cookiecutter': {
+            'hello': 'world',
+            'foo': '{{cookiecutter.nope}}'
+        }
+    }
     with pytest.raises(exceptions.UndefinedVariableInTemplate) as err:
         prompt.prompt_for_config(context, no_input=True)
 
@@ -356,9 +404,9 @@ def test_undefined_variable_in_cookiecutter_dict():
 
 def test_undefined_variable_in_cookiecutter_dict_with_choices():
     context = {
-        "cookiecutter": {
-            "hello": "world",
-            "foo": ["123", "{{cookiecutter.nope}}", "456"],
+        'cookiecutter': {
+            'hello': 'world',
+            'foo': ['123', '{{cookiecutter.nope}}', '456']
         }
     }
     with pytest.raises(exceptions.UndefinedVariableInTemplate) as err:
@@ -371,7 +419,10 @@ def test_undefined_variable_in_cookiecutter_dict_with_choices():
 
 def test_undefined_variable_in_cookiecutter_dict_with_dict_key():
     context = {
-        "cookiecutter": {"hello": "world", "foo": {"{{cookiecutter.nope}}": "value"},}
+        'cookiecutter': {
+            'hello': 'world',
+            'foo': {'{{cookiecutter.nope}}': 'value'}
+        }
     }
     with pytest.raises(exceptions.UndefinedVariableInTemplate) as err:
         prompt.prompt_for_config(context, no_input=True)
@@ -383,7 +434,10 @@ def test_undefined_variable_in_cookiecutter_dict_with_dict_key():
 
 def test_undefined_variable_in_cookiecutter_dict_with_key_value():
     context = {
-        "cookiecutter": {"hello": "world", "foo": {"key": "{{cookiecutter.nope}}"},}
+        'cookiecutter': {
+            'hello': 'world',
+            'foo': {'key': '{{cookiecutter.nope}}'}
+        }
     }
     with pytest.raises(exceptions.UndefinedVariableInTemplate) as err:
         prompt.prompt_for_config(context, no_input=True)
diff --git a/tests/test_read_repo_password.py b/tests/test_read_repo_password.py
index 502ddb5..1330530 100644
--- a/tests/test_read_repo_password.py
+++ b/tests/test_read_repo_password.py
@@ -6,9 +6,9 @@ from cookiecutter.prompt import read_repo_password
 
 
 def test_click_invocation(mocker):
-    prompt = mocker.patch("click.prompt")
-    prompt.return_value = "sekrit"
+    prompt = mocker.patch('click.prompt')
+    prompt.return_value = 'sekrit'
 
-    assert read_repo_password("Password") == "sekrit"
+    assert read_repo_password('Password') == 'sekrit'
 
-    prompt.assert_called_once_with("Password", hide_input=True)
+    prompt.assert_called_once_with('Password', hide_input=True)
diff --git a/tests/test_read_user_choice.py b/tests/test_read_user_choice.py
index cf7d965..874f373 100644
--- a/tests/test_read_user_choice.py
+++ b/tests/test_read_user_choice.py
@@ -7,7 +7,7 @@ import pytest
 
 from cookiecutter.prompt import read_user_choice
 
-OPTIONS = ["hello", "world", "foo", "bar"]
+OPTIONS = ['hello', 'world', 'foo', 'bar']
 
 EXPECTED_PROMPT = """Select varname:
 1 - hello
@@ -17,24 +17,27 @@ EXPECTED_PROMPT = """Select varname:
 Choose from 1, 2, 3, 4"""
 
 
-@pytest.mark.parametrize("user_choice, expected_value", enumerate(OPTIONS, 1))
+@pytest.mark.parametrize('user_choice, expected_value', enumerate(OPTIONS, 1))
 def test_click_invocation(mocker, user_choice, expected_value):
-    choice = mocker.patch("click.Choice")
+    choice = mocker.patch('click.Choice')
     choice.return_value = click.Choice(OPTIONS)
 
-    prompt = mocker.patch("click.prompt")
-    prompt.return_value = "{}".format(user_choice)
+    prompt = mocker.patch('click.prompt')
+    prompt.return_value = '{}'.format(user_choice)
 
-    assert read_user_choice("varname", OPTIONS) == expected_value
+    assert read_user_choice('varname', OPTIONS) == expected_value
 
     prompt.assert_called_once_with(
-        EXPECTED_PROMPT, type=click.Choice(OPTIONS), default="1", show_choices=False,
+        EXPECTED_PROMPT,
+        type=click.Choice(OPTIONS),
+        default='1',
+        show_choices=False
     )
 
 
 def test_raise_if_options_is_not_a_non_empty_list():
     with pytest.raises(TypeError):
-        read_user_choice("foo", "NOT A LIST")
+        read_user_choice('foo', 'NOT A LIST')
 
     with pytest.raises(ValueError):
-        read_user_choice("foo", [])
+        read_user_choice('foo', [])
diff --git a/tests/test_read_user_dict.py b/tests/test_read_user_dict.py
index b4a46f7..51fd912 100644
--- a/tests/test_read_user_dict.py
+++ b/tests/test_read_user_dict.py
@@ -15,29 +15,29 @@ from cookiecutter.prompt import (
 
 def test_process_json_invalid_json():
     with pytest.raises(click.UsageError) as exc_info:
-        process_json("nope]")
+        process_json('nope]')
 
-    assert str(exc_info.value) == "Unable to decode to JSON."
+    assert str(exc_info.value) == 'Unable to decode to JSON.'
 
 
 def test_process_json_non_dict():
     with pytest.raises(click.UsageError) as exc_info:
-        process_json("[1, 2]")
+        process_json('[1, 2]')
 
-    assert str(exc_info.value) == "Requires JSON dict."
+    assert str(exc_info.value) == 'Requires JSON dict.'
 
 
 def test_process_json_valid_json():
     user_value = '{"name": "foobar", "bla": ["a", 1, "b", false]}'
 
     assert process_json(user_value) == {
-        "name": "foobar",
-        "bla": ["a", 1, "b", False],
+        'name': 'foobar',
+        'bla': ['a', 1, 'b', False],
     }
 
 
 def test_process_json_deep_dict():
-    user_value = """{
+    user_value = '''{
         "key": "value",
         "integer_key": 37,
         "dict_key": {
@@ -54,7 +54,7 @@ def test_process_json_deep_dict():
             "value 2",
             "value 3"
         ]
-    }"""
+    }'''
 
     assert process_json(user_value) == {
         "key": "value",
@@ -62,17 +62,25 @@ def test_process_json_deep_dict():
         "dict_key": {
             "deep_key": "deep_value",
             "deep_integer": 42,
-            "deep_list": ["deep value 1", "deep value 2", "deep value 3",],
+            "deep_list": [
+                "deep value 1",
+                "deep value 2",
+                "deep value 3",
+            ]
         },
-        "list_key": ["value 1", "value 2", "value 3",],
+        "list_key": [
+            "value 1",
+            "value 2",
+            "value 3",
+        ]
     }
 
 
 def test_should_raise_type_error(mocker):
-    prompt = mocker.patch("click.prompt")
+    prompt = mocker.patch('click.prompt')
 
     with pytest.raises(TypeError):
-        read_user_dict("name", "russell")
+        read_user_dict('name', 'russell')
 
     assert not prompt.called
 
@@ -82,12 +90,18 @@ def test_should_call_prompt_with_process_json(mocker):
 
     Verifies generation of a processor for the user input.
     """
-    mock_prompt = mocker.patch("cookiecutter.prompt.click.prompt", autospec=True,)
+    mock_prompt = mocker.patch(
+        'cookiecutter.prompt.click.prompt',
+        autospec=True,
+    )
 
-    read_user_dict("name", {"project_slug": "pytest-plugin"})
+    read_user_dict('name', {'project_slug': 'pytest-plugin'})
 
     assert mock_prompt.call_args == mocker.call(
-        "name", type=click.STRING, default="default", value_proc=process_json,
+        'name',
+        type=click.STRING,
+        default='default',
+        value_proc=process_json,
     )
 
 
@@ -97,13 +111,18 @@ def test_read_user_dict_default_value(mocker):
     Verify return of a dict variable rather than the display value.
     """
     mock_prompt = mocker.patch(
-        "cookiecutter.prompt.click.prompt", autospec=True, return_value="default",
+        'cookiecutter.prompt.click.prompt',
+        autospec=True,
+        return_value='default',
     )
 
-    val = read_user_dict("name", {"project_slug": "pytest-plugin"})
+    val = read_user_dict('name', {'project_slug': 'pytest-plugin'})
 
     assert mock_prompt.call_args == mocker.call(
-        "name", type=click.STRING, default="default", value_proc=process_json,
+        'name',
+        type=click.STRING,
+        default='default',
+        value_proc=process_json,
     )
 
-    assert val == {"project_slug": "pytest-plugin"}
+    assert val == {'project_slug': 'pytest-plugin'}
diff --git a/tests/test_read_user_variable.py b/tests/test_read_user_variable.py
index 7ff1f2f..1c3b8e0 100644
--- a/tests/test_read_user_variable.py
+++ b/tests/test_read_user_variable.py
@@ -8,12 +8,12 @@ import click
 
 from cookiecutter.prompt import read_user_variable
 
-VARIABLE = "project_name"
-DEFAULT = "Kivy Project"
+VARIABLE = 'project_name'
+DEFAULT = 'Kivy Project'
 
 
 def test_click_invocation(mocker):
-    prompt = mocker.patch("click.prompt")
+    prompt = mocker.patch('click.prompt')
     prompt.return_value = DEFAULT
 
     assert read_user_variable(VARIABLE, DEFAULT) == DEFAULT
diff --git a/tests/test_read_user_yes_no.py b/tests/test_read_user_yes_no.py
index fa4fbc4..b8caf08 100644
--- a/tests/test_read_user_yes_no.py
+++ b/tests/test_read_user_yes_no.py
@@ -8,14 +8,18 @@ import click
 
 from cookiecutter.prompt import read_user_yes_no
 
-QUESTION = "Is it okay to delete and re-clone it?"
-DEFAULT = "y"
+QUESTION = 'Is it okay to delete and re-clone it?'
+DEFAULT = 'y'
 
 
 def test_click_invocation(mocker):
-    prompt = mocker.patch("click.prompt")
+    prompt = mocker.patch('click.prompt')
     prompt.return_value = DEFAULT
 
     assert read_user_yes_no(QUESTION, DEFAULT) == DEFAULT
 
-    click.prompt.assert_called_once_with(QUESTION, default=DEFAULT, type=click.BOOL)
+    click.prompt.assert_called_once_with(
+        QUESTION,
+        default=DEFAULT,
+        type=click.BOOL
+    )
diff --git a/tests/test_repo_not_found.py b/tests/test_repo_not_found.py
index 8729255..5f50267 100644
--- a/tests/test_repo_not_found.py
+++ b/tests/test_repo_not_found.py
@@ -9,4 +9,4 @@ from cookiecutter import main, exceptions
 
 def test_should_raise_error_if_repo_does_not_exist():
     with pytest.raises(exceptions.RepositoryNotFound):
-        main.cookiecutter("definitely-not-a-valid-repo-dir")
+        main.cookiecutter('definitely-not-a-valid-repo-dir')
diff --git a/tests/test_specify_output_dir.py b/tests/test_specify_output_dir.py
index 8939736..5e06db7 100644
--- a/tests/test_specify_output_dir.py
+++ b/tests/test_specify_output_dir.py
@@ -11,44 +11,44 @@ from cookiecutter import main
 def context():
     """Fixture to return a valid context as known from a cookiecutter.json."""
     return {
-        u"cookiecutter": {
-            u"email": u"raphael@hackebrot.de",
-            u"full_name": u"Raphael Pierzina",
-            u"github_username": u"hackebrot",
-            u"version": u"0.1.0",
+        u'cookiecutter': {
+            u'email': u'raphael@hackebrot.de',
+            u'full_name': u'Raphael Pierzina',
+            u'github_username': u'hackebrot',
+            u'version': u'0.1.0',
         }
     }
 
 
 @pytest.fixture
 def output_dir(tmpdir):
-    return str(tmpdir.mkdir("output"))
+    return str(tmpdir.mkdir('output'))
 
 
 @pytest.fixture
 def template(tmpdir):
-    template_dir = tmpdir.mkdir("template")
-    template_dir.join("cookiecutter.json").ensure(file=True)
+    template_dir = tmpdir.mkdir('template')
+    template_dir.join('cookiecutter.json').ensure(file=True)
     return str(template_dir)
 
 
 @pytest.fixture(autouse=True)
 def mock_gen_context(mocker, context):
-    mocker.patch("cookiecutter.main.generate_context", return_value=context)
+    mocker.patch('cookiecutter.main.generate_context', return_value=context)
 
 
 @pytest.fixture(autouse=True)
 def mock_prompt(mocker):
-    mocker.patch("cookiecutter.main.prompt_for_config")
+    mocker.patch('cookiecutter.main.prompt_for_config')
 
 
 @pytest.fixture(autouse=True)
 def mock_replay(mocker):
-    mocker.patch("cookiecutter.main.dump")
+    mocker.patch('cookiecutter.main.dump')
 
 
 def test_api_invocation(mocker, template, output_dir, context):
-    mock_gen_files = mocker.patch("cookiecutter.main.generate_files")
+    mock_gen_files = mocker.patch('cookiecutter.main.generate_files')
 
     main.cookiecutter(template, output_dir=output_dir)
 
@@ -56,15 +56,18 @@ def test_api_invocation(mocker, template, output_dir, context):
         repo_dir=template,
         context=context,
         overwrite_if_exists=False,
-        output_dir=output_dir,
+        output_dir=output_dir
     )
 
 
 def test_default_output_dir(mocker, template, context):
-    mock_gen_files = mocker.patch("cookiecutter.main.generate_files")
+    mock_gen_files = mocker.patch('cookiecutter.main.generate_files')
 
     main.cookiecutter(template)
 
     mock_gen_files.assert_called_once_with(
-        repo_dir=template, context=context, overwrite_if_exists=False, output_dir=".",
+        repo_dir=template,
+        context=context,
+        overwrite_if_exists=False,
+        output_dir='.'
     )
diff --git a/tests/test_utils.py b/tests/test_utils.py
index cf72b53..45f1914 100644
--- a/tests/test_utils.py
+++ b/tests/test_utils.py
@@ -18,33 +18,33 @@ def make_readonly(path):
 
 
 def test_rmtree():
-    os.mkdir("foo")
-    with open("foo/bar", "w") as f:
+    os.mkdir('foo')
+    with open('foo/bar', "w") as f:
         f.write("Test data")
-    make_readonly("foo/bar")
-    utils.rmtree("foo")
-    assert not os.path.exists("foo")
+    make_readonly('foo/bar')
+    utils.rmtree('foo')
+    assert not os.path.exists('foo')
 
 
 def test_make_sure_path_exists():
-    if sys.platform.startswith("win"):
+    if sys.platform.startswith('win'):
         existing_directory = os.path.abspath(os.curdir)
-        uncreatable_directory = "a*b"
+        uncreatable_directory = 'a*b'
     else:
-        existing_directory = "/usr/"
-        uncreatable_directory = "/this-doesnt-exist-and-cant-be-created/"
+        existing_directory = '/usr/'
+        uncreatable_directory = '/this-doesnt-exist-and-cant-be-created/'
 
     assert utils.make_sure_path_exists(existing_directory)
-    assert utils.make_sure_path_exists("tests/blah")
-    assert utils.make_sure_path_exists("tests/trailingslash/")
+    assert utils.make_sure_path_exists('tests/blah')
+    assert utils.make_sure_path_exists('tests/trailingslash/')
     assert not utils.make_sure_path_exists(uncreatable_directory)
-    utils.rmtree("tests/blah/")
-    utils.rmtree("tests/trailingslash/")
+    utils.rmtree('tests/blah/')
+    utils.rmtree('tests/trailingslash/')
 
 
 def test_workin():
     cwd = os.getcwd()
-    ch_to = "tests/files"
+    ch_to = 'tests/files'
 
     class TestException(Exception):
         pass
@@ -67,9 +67,11 @@ def test_prompt_should_ask_and_rm_repo_dir(mocker, tmpdir):
     """In `prompt_and_delete()`, if the user agrees to delete/reclone the \
     repo, the repo should be deleted."""
     mock_read_user = mocker.patch(
-        "cookiecutter.utils.read_user_yes_no", return_value=True, autospec=True
+        'cookiecutter.utils.read_user_yes_no',
+        return_value=True,
+        autospec=True
     )
-    repo_dir = tmpdir.mkdir("repo")
+    repo_dir = tmpdir.mkdir('repo')
 
     deleted = utils.prompt_and_delete(str(repo_dir))
 
@@ -82,11 +84,13 @@ def test_prompt_should_ask_and_rm_repo_file(mocker, tmpdir):
     """In `prompt_and_delete()`, if the user agrees to delete/reclone a \
     repo file, the repo should be deleted."""
     mock_read_user = mocker.patch(
-        "cookiecutter.utils.read_user_yes_no", return_value=True, autospec=True
+        'cookiecutter.utils.read_user_yes_no',
+        return_value=True,
+        autospec=True
     )
 
-    repo_file = tmpdir.join("repo.zip")
-    repo_file.write("this is zipfile content")
+    repo_file = tmpdir.join('repo.zip')
+    repo_file.write('this is zipfile content')
 
     deleted = utils.prompt_and_delete(str(repo_file))
 
@@ -99,9 +103,11 @@ def test_prompt_should_ask_and_keep_repo_on_no_reuse(mocker, tmpdir):
     """In `prompt_and_delete()`, if the user wants to keep their old \
     cloned template repo, it should not be deleted."""
     mock_read_user = mocker.patch(
-        "cookiecutter.utils.read_user_yes_no", return_value=False, autospec=True,
+        'cookiecutter.utils.read_user_yes_no',
+        return_value=False,
+        autospec=True
     )
-    repo_dir = tmpdir.mkdir("repo")
+    repo_dir = tmpdir.mkdir('repo')
 
     with pytest.raises(SystemExit):
         utils.prompt_and_delete(str(repo_dir))
@@ -113,17 +119,18 @@ def test_prompt_should_ask_and_keep_repo_on_no_reuse(mocker, tmpdir):
 def test_prompt_should_ask_and_keep_repo_on_reuse(mocker, tmpdir):
     """In `prompt_and_delete()`, if the user wants to keep their old \
     cloned template repo, it should not be deleted."""
-
     def answer(question, default):
-        if "okay to delete" in question:
+        if 'okay to delete' in question:
             return False
         else:
             return True
 
     mock_read_user = mocker.patch(
-        "cookiecutter.utils.read_user_yes_no", side_effect=answer, autospec=True,
+        'cookiecutter.utils.read_user_yes_no',
+        side_effect=answer,
+        autospec=True
     )
-    repo_dir = tmpdir.mkdir("repo")
+    repo_dir = tmpdir.mkdir('repo')
 
     deleted = utils.prompt_and_delete(str(repo_dir))
 
@@ -139,9 +146,11 @@ def test_prompt_should_not_ask_if_no_input_and_rm_repo_dir(mocker, tmpdir):
     `prompt.read_user_yes_no()` should be suppressed.
     """
     mock_read_user = mocker.patch(
-        "cookiecutter.prompt.read_user_yes_no", return_value=True, autospec=True,
+        'cookiecutter.prompt.read_user_yes_no',
+        return_value=True,
+        autospec=True
     )
-    repo_dir = tmpdir.mkdir("repo")
+    repo_dir = tmpdir.mkdir('repo')
 
     deleted = utils.prompt_and_delete(str(repo_dir), no_input=True)
 
@@ -157,11 +166,13 @@ def test_prompt_should_not_ask_if_no_input_and_rm_repo_file(mocker, tmpdir):
     `prompt.read_user_yes_no()` should be suppressed.
     """
     mock_read_user = mocker.patch(
-        "cookiecutter.prompt.read_user_yes_no", return_value=True, autospec=True,
+        'cookiecutter.prompt.read_user_yes_no',
+        return_value=True,
+        autospec=True
     )
 
-    repo_file = tmpdir.join("repo.zip")
-    repo_file.write("this is zipfile content")
+    repo_file = tmpdir.join('repo.zip')
+    repo_file.write('this is zipfile content')
 
     deleted = utils.prompt_and_delete(str(repo_file), no_input=True)
 
diff --git a/tests/vcs/test_clone.py b/tests/vcs/test_clone.py
index 4aab6b1..8906db6 100644
--- a/tests/vcs/test_clone.py
+++ b/tests/vcs/test_clone.py
@@ -14,15 +14,19 @@ from cookiecutter import exceptions, vcs
 def clone_dir(tmpdir):
     """Simulate creation of a directory called `clone_dir` inside of `tmpdir`. \
     Returns a str to said directory."""
-    return str(tmpdir.mkdir("clone_dir"))
+    return str(tmpdir.mkdir('clone_dir'))
 
 
 def test_clone_should_raise_if_vcs_not_installed(mocker, clone_dir):
     """In `clone()`, a `VCSNotInstalled` exception should be raised if no VCS \
     is installed."""
-    mocker.patch("cookiecutter.vcs.is_vcs_installed", autospec=True, return_value=False)
+    mocker.patch(
+        'cookiecutter.vcs.is_vcs_installed',
+        autospec=True,
+        return_value=False
+    )
 
-    repo_url = "https://github.com/pytest-dev/cookiecutter-pytest-plugin.git"
+    repo_url = 'https://github.com/pytest-dev/cookiecutter-pytest-plugin.git'
 
     with pytest.raises(exceptions.VCSNotInstalled):
         vcs.clone(repo_url, clone_to_dir=clone_dir)
@@ -31,54 +35,66 @@ def test_clone_should_raise_if_vcs_not_installed(mocker, clone_dir):
 def test_clone_should_rstrip_trailing_slash_in_repo_url(mocker, clone_dir):
     """In `clone()`, repo URL's trailing slash should be stripped if one is \
     present."""
-    mocker.patch("cookiecutter.vcs.is_vcs_installed", autospec=True, return_value=True)
+    mocker.patch(
+        'cookiecutter.vcs.is_vcs_installed',
+        autospec=True,
+        return_value=True
+    )
 
     mock_subprocess = mocker.patch(
-        "cookiecutter.vcs.subprocess.check_output", autospec=True,
+        'cookiecutter.vcs.subprocess.check_output',
+        autospec=True,
     )
 
-    vcs.clone("https://github.com/foo/bar/", clone_to_dir=clone_dir, no_input=True)
+    vcs.clone(
+        'https://github.com/foo/bar/',
+        clone_to_dir=clone_dir,
+        no_input=True
+    )
 
     mock_subprocess.assert_called_once_with(
-        ["git", "clone", "https://github.com/foo/bar"],
+        ['git', 'clone', 'https://github.com/foo/bar'],
         cwd=clone_dir,
-        stderr=subprocess.STDOUT,
+        stderr=subprocess.STDOUT
     )
 
 
 def test_clone_should_abort_if_user_does_not_want_to_reclone(mocker, tmpdir):
     """In `clone()`, if user doesn't want to reclone, Cookiecutter should exit \
     without cloning anything."""
-    mocker.patch("cookiecutter.vcs.is_vcs_installed", autospec=True, return_value=True)
     mocker.patch(
-        "cookiecutter.vcs.prompt_and_delete", side_effect=SystemExit, autospec=True,
+        'cookiecutter.vcs.is_vcs_installed',
+        autospec=True,
+        return_value=True
+    )
+    mocker.patch(
+        'cookiecutter.vcs.prompt_and_delete',
+        side_effect=SystemExit,
+        autospec=True
     )
     mock_subprocess = mocker.patch(
-        "cookiecutter.vcs.subprocess.check_output", autospec=True,
+        'cookiecutter.vcs.subprocess.check_output',
+        autospec=True,
     )
 
-    clone_to_dir = tmpdir.mkdir("clone")
+    clone_to_dir = tmpdir.mkdir('clone')
 
     # Create repo_dir to trigger prompt_and_delete
-    clone_to_dir.mkdir("cookiecutter-pytest-plugin")
+    clone_to_dir.mkdir('cookiecutter-pytest-plugin')
 
-    repo_url = "https://github.com/pytest-dev/cookiecutter-pytest-plugin.git"
+    repo_url = 'https://github.com/pytest-dev/cookiecutter-pytest-plugin.git'
 
     with pytest.raises(SystemExit):
         vcs.clone(repo_url, clone_to_dir=str(clone_to_dir))
     assert not mock_subprocess.called
 
 
-@pytest.mark.parametrize(
-    "repo_type, repo_url, repo_name",
-    [
-        ("git", "https://github.com/hello/world.git", "world"),
-        ("hg", "https://bitbucket.org/foo/bar", "bar"),
-    ],
-)
+@pytest.mark.parametrize('repo_type, repo_url, repo_name', [
+    ('git', 'https://github.com/hello/world.git', 'world'),
+    ('hg', 'https://bitbucket.org/foo/bar', 'bar'),
+])
 def test_clone_should_invoke_vcs_command(
-    mocker, clone_dir, repo_type, repo_url, repo_name
-):
+        mocker, clone_dir, repo_type, repo_url, repo_name):
     """When `clone()` is called with a git/hg repo, the corresponding VCS \
     command should be run via `subprocess.check_output()`.
 
@@ -86,40 +102,48 @@ def test_clone_should_invoke_vcs_command(
     * In the correct dir
     * With the correct args.
     """
-    mocker.patch("cookiecutter.vcs.is_vcs_installed", autospec=True, return_value=True)
+    mocker.patch(
+        'cookiecutter.vcs.is_vcs_installed',
+        autospec=True,
+        return_value=True
+    )
 
     mock_subprocess = mocker.patch(
-        "cookiecutter.vcs.subprocess.check_output", autospec=True,
+        'cookiecutter.vcs.subprocess.check_output',
+        autospec=True,
     )
     expected_repo_dir = os.path.normpath(os.path.join(clone_dir, repo_name))
 
-    branch = "foobar"
+    branch = 'foobar'
 
     repo_dir = vcs.clone(
-        repo_url, checkout=branch, clone_to_dir=clone_dir, no_input=True
+        repo_url,
+        checkout=branch,
+        clone_to_dir=clone_dir,
+        no_input=True
     )
 
     assert repo_dir == expected_repo_dir
 
     mock_subprocess.assert_any_call(
-        [repo_type, "clone", repo_url], cwd=clone_dir, stderr=subprocess.STDOUT
+        [repo_type, 'clone', repo_url],
+        cwd=clone_dir,
+        stderr=subprocess.STDOUT
     )
     mock_subprocess.assert_any_call(
-        [repo_type, "checkout", branch],
+        [repo_type, 'checkout', branch],
         cwd=expected_repo_dir,
-        stderr=subprocess.STDOUT,
+        stderr=subprocess.STDOUT
     )
 
 
-@pytest.mark.parametrize(
-    "error_message",
-    [
-        (
-            "fatal: repository 'https://github.com/hackebro/cookiedozer' " "not found"
-        ).encode("utf-8"),
-        "hg: abort: HTTP Error 404: Not Found".encode("utf-8"),
-    ],
-)
+@pytest.mark.parametrize('error_message', [
+    (
+        "fatal: repository 'https://github.com/hackebro/cookiedozer' "
+        "not found"
+    ).encode('utf-8'),
+    'hg: abort: HTTP Error 404: Not Found'.encode('utf-8'),
+])
 def test_clone_handles_repo_typo(mocker, clone_dir, error_message):
     """In `clone()`, repository not found errors should raise an \
     appropriate exception."""
@@ -127,68 +151,72 @@ def test_clone_handles_repo_typo(mocker, clone_dir, error_message):
     # because of a Python 3.4 unittest.mock regression
     # http://bugs.python.org/issue23661
     mocker.patch(
-        "cookiecutter.vcs.subprocess.check_output",
+        'cookiecutter.vcs.subprocess.check_output',
         autospec=True,
-        side_effect=[subprocess.CalledProcessError(-1, "cmd", output=error_message)],
+        side_effect=[subprocess.CalledProcessError(
+            -1, 'cmd', output=error_message
+        )]
     )
 
-    repository_url = "https://github.com/hackebro/cookiedozer"
+    repository_url = 'https://github.com/hackebro/cookiedozer'
     with pytest.raises(exceptions.RepositoryNotFound) as err:
-        vcs.clone(repository_url, clone_to_dir=clone_dir, no_input=True)
+        vcs.clone(
+            repository_url,
+            clone_to_dir=clone_dir,
+            no_input=True
+        )
 
     assert str(err.value) == (
-        "The repository {} could not be found, have you made a typo?"
+        'The repository {} could not be found, have you made a typo?'
     ).format(repository_url)
 
 
-@pytest.mark.parametrize(
-    "error_message",
-    [
-        (
-            "error: pathspec 'unknown_branch' did not match any file(s) known " "to git"
-        ).encode("utf-8"),
-        "hg: abort: unknown revision 'unknown_branch'!".encode("utf-8"),
-    ],
-)
+@pytest.mark.parametrize('error_message', [
+    (
+        "error: pathspec 'unknown_branch' did not match any file(s) known "
+        "to git"
+    ).encode('utf-8'),
+    "hg: abort: unknown revision 'unknown_branch'!".encode('utf-8'),
+])
 def test_clone_handles_branch_typo(mocker, clone_dir, error_message):
     """In `clone()`, branch not found errors should raise an \
     appropriate exception."""
     mocker.patch(
-        "cookiecutter.vcs.subprocess.check_output",
+        'cookiecutter.vcs.subprocess.check_output',
         autospec=True,
-        side_effect=[subprocess.CalledProcessError(-1, "cmd", output=error_message)],
+        side_effect=[subprocess.CalledProcessError(
+            -1, 'cmd', output=error_message
+        )]
     )
 
-    repository_url = "https://github.com/pytest-dev/cookiecutter-pytest-plugin"
+    repository_url = 'https://github.com/pytest-dev/cookiecutter-pytest-plugin'
     with pytest.raises(exceptions.RepositoryCloneFailed) as err:
         vcs.clone(
             repository_url,
             clone_to_dir=clone_dir,
-            checkout="unknown_branch",
-            no_input=True,
+            checkout='unknown_branch',
+            no_input=True
         )
 
     assert str(err.value) == (
-        "The unknown_branch branch of repository "
-        "{} could not found, have you made a typo?"
+        'The unknown_branch branch of repository '
+        '{} could not found, have you made a typo?'
     ).format(repository_url)
 
 
 def test_clone_unknown_subprocess_error(mocker, clone_dir):
     """In `clone()`, unknown subprocess errors should be raised."""
     mocker.patch(
-        "cookiecutter.vcs.subprocess.check_output",
+        'cookiecutter.vcs.subprocess.check_output',
         autospec=True,
-        side_effect=[
-            subprocess.CalledProcessError(
-                -1, "cmd", output="Something went wrong".encode("utf-8")
-            )
-        ],
+        side_effect=[subprocess.CalledProcessError(
+            -1, 'cmd', output='Something went wrong'.encode('utf-8')
+        )]
     )
 
     with pytest.raises(subprocess.CalledProcessError):
         vcs.clone(
-            "https://github.com/pytest-dev/cookiecutter-pytest-plugin",
+            'https://github.com/pytest-dev/cookiecutter-pytest-plugin',
             clone_to_dir=clone_dir,
-            no_input=True,
+            no_input=True
         )
diff --git a/tests/vcs/test_identify_repo.py b/tests/vcs/test_identify_repo.py
index f88617a..24fde7f 100644
--- a/tests/vcs/test_identify_repo.py
+++ b/tests/vcs/test_identify_repo.py
@@ -7,60 +7,52 @@ import pytest
 from cookiecutter import exceptions, vcs
 
 
-@pytest.mark.parametrize(
-    "repo_url, exp_repo_type, exp_repo_url",
-    [
-        (
-            "git+https://github.com/pytest-dev/cookiecutter-pytest-plugin.git",
-            "git",
-            "https://github.com/pytest-dev/cookiecutter-pytest-plugin.git",
-        ),
-        (
-            "hg+https://bitbucket.org/foo/bar.hg",
-            "hg",
-            "https://bitbucket.org/foo/bar.hg",
-        ),
-        (
-            "https://github.com/pytest-dev/cookiecutter-pytest-plugin.git",
-            "git",
-            "https://github.com/pytest-dev/cookiecutter-pytest-plugin.git",
-        ),
-        ("https://bitbucket.org/foo/bar.hg", "hg", "https://bitbucket.org/foo/bar.hg",),
-        (
-            "https://github.com/audreyr/cookiecutter-pypackage.git",
-            "git",
-            "https://github.com/audreyr/cookiecutter-pypackage.git",
-        ),
-        (
-            "https://github.com/audreyr/cookiecutter-pypackage",
-            "git",
-            "https://github.com/audreyr/cookiecutter-pypackage",
-        ),
-        (
-            "git@gitorious.org:cookiecutter-gitorious/cookiecutter-gitorious.git",
-            "git",
-            "git@gitorious.org:cookiecutter-gitorious/cookiecutter-gitorious.git",
-        ),
-        (
-            "https://audreyr@bitbucket.org/audreyr/cookiecutter-bitbucket",
-            "hg",
-            "https://audreyr@bitbucket.org/audreyr/cookiecutter-bitbucket",
-        ),
-    ],
-)
+@pytest.mark.parametrize('repo_url, exp_repo_type, exp_repo_url', [
+    (
+        'git+https://github.com/pytest-dev/cookiecutter-pytest-plugin.git',
+        'git',
+        'https://github.com/pytest-dev/cookiecutter-pytest-plugin.git'
+    ), (
+        'hg+https://bitbucket.org/foo/bar.hg',
+        'hg',
+        'https://bitbucket.org/foo/bar.hg'
+    ), (
+        'https://github.com/pytest-dev/cookiecutter-pytest-plugin.git',
+        'git',
+        'https://github.com/pytest-dev/cookiecutter-pytest-plugin.git'
+    ), (
+        'https://bitbucket.org/foo/bar.hg',
+        'hg',
+        'https://bitbucket.org/foo/bar.hg'
+    ), (
+        'https://github.com/audreyr/cookiecutter-pypackage.git',
+        'git',
+        'https://github.com/audreyr/cookiecutter-pypackage.git',
+    ), (
+        'https://github.com/audreyr/cookiecutter-pypackage',
+        'git',
+        'https://github.com/audreyr/cookiecutter-pypackage',
+    ), (
+        'git@gitorious.org:cookiecutter-gitorious/cookiecutter-gitorious.git',
+        'git',
+        'git@gitorious.org:cookiecutter-gitorious/cookiecutter-gitorious.git',
+    ), (
+        'https://audreyr@bitbucket.org/audreyr/cookiecutter-bitbucket',
+        'hg',
+        'https://audreyr@bitbucket.org/audreyr/cookiecutter-bitbucket',
+    )
+])
 def test_identify_known_repo(repo_url, exp_repo_type, exp_repo_url):
     assert vcs.identify_repo(repo_url) == (exp_repo_type, exp_repo_url)
 
 
-@pytest.fixture(
-    params=[
-        "foo+git",  # uses explicit identifier with 'git' in the wrong place
-        "foo+hg",  # uses explicit identifier with 'hg' in the wrong place
-        "foo+bar",  # uses explicit identifier with neither 'git' nor 'hg'
-        "foobar",  # no identifier but neither 'git' nor 'bitbucket' in url
-        "http://norepotypespecified.com",
-    ]
-)
+@pytest.fixture(params=[
+    'foo+git',  # uses explicit identifier with 'git' in the wrong place
+    'foo+hg',  # uses explicit identifier with 'hg' in the wrong place
+    'foo+bar',  # uses explicit identifier with neither 'git' nor 'hg'
+    'foobar',  # no identifier but neither 'git' nor 'bitbucket' in url
+    'http://norepotypespecified.com'
+])
 def unknown_repo_type_url(request):
     return request.param
 
diff --git a/tests/vcs/test_is_vcs_installed.py b/tests/vcs/test_is_vcs_installed.py
index 6284909..18d084d 100644
--- a/tests/vcs/test_is_vcs_installed.py
+++ b/tests/vcs/test_is_vcs_installed.py
@@ -7,10 +7,16 @@ import pytest
 from cookiecutter import vcs
 
 
-@pytest.mark.parametrize(
-    "which_return, result",
-    [("", False), (None, False), (False, False), ("/usr/local/bin/git", True),],
-)
+@pytest.mark.parametrize('which_return, result', [
+    ('', False),
+    (None, False),
+    (False, False),
+    ('/usr/local/bin/git', True),
+])
 def test_is_vcs_installed(mocker, which_return, result):
-    mocker.patch("cookiecutter.vcs.which", autospec=True, return_value=which_return)
-    assert vcs.is_vcs_installed("git") == result
+    mocker.patch(
+        'cookiecutter.vcs.which',
+        autospec=True,
+        return_value=which_return
+    )
+    assert vcs.is_vcs_installed('git') == result
diff --git a/tests/zipfile/test_unzip.py b/tests/zipfile/test_unzip.py
index 9002476..d8ab757 100644
--- a/tests/zipfile/test_unzip.py
+++ b/tests/zipfile/test_unzip.py
@@ -13,7 +13,7 @@ from cookiecutter.exceptions import InvalidZipRepository
 
 def mock_download():
     """Fake download function."""
-    with open("tests/files/fake-repo-tmpl.zip", "rb") as zf:
+    with open('tests/files/fake-repo-tmpl.zip', 'rb') as zf:
         chunk = zf.read(1024)
         while chunk:
             yield chunk
@@ -23,13 +23,17 @@ def mock_download():
 def test_unzip_local_file(mocker, tmpdir):
     """Local file reference can be unzipped."""
     mock_prompt_and_delete = mocker.patch(
-        "cookiecutter.zipfile.prompt_and_delete", return_value=True, autospec=True,
+        'cookiecutter.zipfile.prompt_and_delete',
+        return_value=True,
+        autospec=True
     )
 
-    clone_to_dir = tmpdir.mkdir("clone")
+    clone_to_dir = tmpdir.mkdir('clone')
 
     output_dir = zipfile.unzip(
-        "tests/files/fake-repo-tmpl.zip", is_url=False, clone_to_dir=str(clone_to_dir),
+        'tests/files/fake-repo-tmpl.zip',
+        is_url=False,
+        clone_to_dir=str(clone_to_dir)
     )
 
     assert output_dir.startswith(tempfile.gettempdir())
@@ -39,16 +43,18 @@ def test_unzip_local_file(mocker, tmpdir):
 def test_unzip_protected_local_file_environment_password(mocker, tmpdir):
     """In `unzip()`, the environment can be used to provide a repo password."""
     mock_prompt_and_delete = mocker.patch(
-        "cookiecutter.zipfile.prompt_and_delete", return_value=True, autospec=True,
+        'cookiecutter.zipfile.prompt_and_delete',
+        return_value=True,
+        autospec=True
     )
 
-    clone_to_dir = tmpdir.mkdir("clone")
+    clone_to_dir = tmpdir.mkdir('clone')
 
     output_dir = zipfile.unzip(
-        "tests/files/protected-fake-repo-tmpl.zip",
+        'tests/files/protected-fake-repo-tmpl.zip',
         is_url=False,
         clone_to_dir=str(clone_to_dir),
-        password="sekrit",
+        password='sekrit'
     )
 
     assert output_dir.startswith(tempfile.gettempdir())
@@ -58,50 +64,59 @@ def test_unzip_protected_local_file_environment_password(mocker, tmpdir):
 def test_unzip_protected_local_file_bad_environment_password(mocker, tmpdir):
     """In `unzip()`, an error occurs if the environment has a bad password."""
     mocker.patch(
-        "cookiecutter.zipfile.prompt_and_delete", return_value=True, autospec=True,
+        'cookiecutter.zipfile.prompt_and_delete',
+        return_value=True,
+        autospec=True
     )
 
-    clone_to_dir = tmpdir.mkdir("clone")
+    clone_to_dir = tmpdir.mkdir('clone')
 
     with pytest.raises(InvalidZipRepository):
         zipfile.unzip(
-            "tests/files/protected-fake-repo-tmpl.zip",
+            'tests/files/protected-fake-repo-tmpl.zip',
             is_url=False,
             clone_to_dir=str(clone_to_dir),
-            password="not-the-right-password",
+            password='not-the-right-password'
         )
 
 
 def test_unzip_protected_local_file_user_password_with_noinput(mocker, tmpdir):
     """Can't unpack a password-protected repo in no_input mode."""
     mocker.patch(
-        "cookiecutter.zipfile.prompt_and_delete", return_value=True, autospec=True,
+        'cookiecutter.zipfile.prompt_and_delete',
+        return_value=True,
+        autospec=True
     )
 
-    clone_to_dir = tmpdir.mkdir("clone")
+    clone_to_dir = tmpdir.mkdir('clone')
 
     with pytest.raises(InvalidZipRepository):
         zipfile.unzip(
-            "tests/files/protected-fake-repo-tmpl.zip",
+            'tests/files/protected-fake-repo-tmpl.zip',
             is_url=False,
             clone_to_dir=str(clone_to_dir),
-            no_input=True,
+            no_input=True
         )
 
 
 def test_unzip_protected_local_file_user_password(mocker, tmpdir):
     """A password-protected local file reference can be unzipped."""
     mock_prompt_and_delete = mocker.patch(
-        "cookiecutter.zipfile.prompt_and_delete", return_value=True, autospec=True,
+        'cookiecutter.zipfile.prompt_and_delete',
+        return_value=True,
+        autospec=True
+    )
+    mocker.patch(
+        'cookiecutter.zipfile.read_repo_password',
+        return_value='sekrit'
     )
-    mocker.patch("cookiecutter.zipfile.read_repo_password", return_value="sekrit")
 
-    clone_to_dir = tmpdir.mkdir("clone")
+    clone_to_dir = tmpdir.mkdir('clone')
 
     output_dir = zipfile.unzip(
-        "tests/files/protected-fake-repo-tmpl.zip",
+        'tests/files/protected-fake-repo-tmpl.zip',
         is_url=False,
-        clone_to_dir=str(clone_to_dir),
+        clone_to_dir=str(clone_to_dir)
     )
 
     assert output_dir.startswith(tempfile.gettempdir())
@@ -111,86 +126,102 @@ def test_unzip_protected_local_file_user_password(mocker, tmpdir):
 def test_unzip_protected_local_file_user_bad_password(mocker, tmpdir):
     """Error in `unzip()`, if user can't provide a valid password."""
     mocker.patch(
-        "cookiecutter.zipfile.prompt_and_delete", return_value=True, autospec=True,
+        'cookiecutter.zipfile.prompt_and_delete',
+        return_value=True,
+        autospec=True
     )
     mocker.patch(
-        "cookiecutter.zipfile.read_repo_password",
-        return_value="not-the-right-password",
+        'cookiecutter.zipfile.read_repo_password',
+        return_value='not-the-right-password'
     )
 
-    clone_to_dir = tmpdir.mkdir("clone")
+    clone_to_dir = tmpdir.mkdir('clone')
 
     with pytest.raises(InvalidZipRepository):
         zipfile.unzip(
-            "tests/files/protected-fake-repo-tmpl.zip",
+            'tests/files/protected-fake-repo-tmpl.zip',
             is_url=False,
-            clone_to_dir=str(clone_to_dir),
+            clone_to_dir=str(clone_to_dir)
         )
 
 
 def test_empty_zip_file(mocker, tmpdir):
     """In `unzip()`, an empty file raises an error."""
     mocker.patch(
-        "cookiecutter.zipfile.prompt_and_delete", return_value=True, autospec=True,
+        'cookiecutter.zipfile.prompt_and_delete',
+        return_value=True,
+        autospec=True
     )
 
-    clone_to_dir = tmpdir.mkdir("clone")
+    clone_to_dir = tmpdir.mkdir('clone')
 
     with pytest.raises(InvalidZipRepository):
         zipfile.unzip(
-            "tests/files/empty.zip", is_url=False, clone_to_dir=str(clone_to_dir),
+            'tests/files/empty.zip',
+            is_url=False,
+            clone_to_dir=str(clone_to_dir)
         )
 
 
 def test_non_repo_zip_file(mocker, tmpdir):
     """In `unzip()`, a repository must have a top level directory."""
     mocker.patch(
-        "cookiecutter.zipfile.prompt_and_delete", return_value=True, autospec=True,
+        'cookiecutter.zipfile.prompt_and_delete',
+        return_value=True,
+        autospec=True
     )
 
-    clone_to_dir = tmpdir.mkdir("clone")
+    clone_to_dir = tmpdir.mkdir('clone')
 
     with pytest.raises(InvalidZipRepository):
         zipfile.unzip(
-            "tests/files/not-a-repo.zip", is_url=False, clone_to_dir=str(clone_to_dir),
+            'tests/files/not-a-repo.zip',
+            is_url=False,
+            clone_to_dir=str(clone_to_dir)
         )
 
 
 def test_bad_zip_file(mocker, tmpdir):
     """In `unzip()`, a corrupted zip file raises an error."""
     mocker.patch(
-        "cookiecutter.zipfile.prompt_and_delete", return_value=True, autospec=True,
+        'cookiecutter.zipfile.prompt_and_delete',
+        return_value=True,
+        autospec=True
     )
 
-    clone_to_dir = tmpdir.mkdir("clone")
+    clone_to_dir = tmpdir.mkdir('clone')
 
     with pytest.raises(InvalidZipRepository):
         zipfile.unzip(
-            "tests/files/bad-zip-file.zip",
+            'tests/files/bad-zip-file.zip',
             is_url=False,
-            clone_to_dir=str(clone_to_dir),
+            clone_to_dir=str(clone_to_dir)
         )
 
 
 def test_unzip_url(mocker, tmpdir):
     """In `unzip()`, a url will be downloaded and unzipped."""
     mock_prompt_and_delete = mocker.patch(
-        "cookiecutter.zipfile.prompt_and_delete", return_value=True, autospec=True,
+        'cookiecutter.zipfile.prompt_and_delete',
+        return_value=True,
+        autospec=True
     )
 
     request = mocker.MagicMock()
     request.iter_content.return_value = mock_download()
 
     mocker.patch(
-        "cookiecutter.zipfile.requests.get", return_value=request, autospec=True,
+        'cookiecutter.zipfile.requests.get',
+        return_value=request,
+        autospec=True,
     )
 
-    clone_to_dir = tmpdir.mkdir("clone")
+    clone_to_dir = tmpdir.mkdir('clone')
 
     output_dir = zipfile.unzip(
-        "https://example.com/path/to/fake-repo-tmpl.zip",
+        'https://example.com/path/to/fake-repo-tmpl.zip',
         is_url=True,
-        clone_to_dir=str(clone_to_dir),
+        clone_to_dir=str(clone_to_dir)
     )
 
     assert output_dir.startswith(tempfile.gettempdir())
@@ -200,26 +231,30 @@ def test_unzip_url(mocker, tmpdir):
 def test_unzip_url_existing_cache(mocker, tmpdir):
     """Url should be downloaded and unzipped, old zip file will be removed."""
     mock_prompt_and_delete = mocker.patch(
-        "cookiecutter.zipfile.prompt_and_delete", return_value=True, autospec=True,
+        'cookiecutter.zipfile.prompt_and_delete',
+        return_value=True,
+        autospec=True
     )
 
     request = mocker.MagicMock()
     request.iter_content.return_value = mock_download()
 
     mocker.patch(
-        "cookiecutter.zipfile.requests.get", return_value=request, autospec=True,
+        'cookiecutter.zipfile.requests.get',
+        return_value=request,
+        autospec=True,
     )
 
-    clone_to_dir = tmpdir.mkdir("clone")
+    clone_to_dir = tmpdir.mkdir('clone')
 
     # Create an existing cache of the zipfile
-    existing_zip = clone_to_dir.join("fake-repo-tmpl.zip")
-    existing_zip.write("This is an existing zipfile")
+    existing_zip = clone_to_dir.join('fake-repo-tmpl.zip')
+    existing_zip.write('This is an existing zipfile')
 
     output_dir = zipfile.unzip(
-        "https://example.com/path/to/fake-repo-tmpl.zip",
+        'https://example.com/path/to/fake-repo-tmpl.zip',
         is_url=True,
-        clone_to_dir=str(clone_to_dir),
+        clone_to_dir=str(clone_to_dir)
     )
 
     assert output_dir.startswith(tempfile.gettempdir())
@@ -232,20 +267,22 @@ def test_unzip_url_existing_cache_no_input(mocker, tmpdir):
     request.iter_content.return_value = mock_download()
 
     mocker.patch(
-        "cookiecutter.zipfile.requests.get", return_value=request, autospec=True,
+        'cookiecutter.zipfile.requests.get',
+        return_value=request,
+        autospec=True,
     )
 
-    clone_to_dir = tmpdir.mkdir("clone")
+    clone_to_dir = tmpdir.mkdir('clone')
 
     # Create an existing cache of the zipfile
-    existing_zip = clone_to_dir.join("fake-repo-tmpl.zip")
-    existing_zip.write("This is an existing zipfile")
+    existing_zip = clone_to_dir.join('fake-repo-tmpl.zip')
+    existing_zip.write('This is an existing zipfile')
 
     output_dir = zipfile.unzip(
-        "https://example.com/path/to/fake-repo-tmpl.zip",
+        'https://example.com/path/to/fake-repo-tmpl.zip',
         is_url=True,
         clone_to_dir=str(clone_to_dir),
-        no_input=True,
+        no_input=True
     )
 
     assert output_dir.startswith(tempfile.gettempdir())
@@ -254,20 +291,23 @@ def test_unzip_url_existing_cache_no_input(mocker, tmpdir):
 def test_unzip_should_abort_if_no_redownload(mocker, tmpdir):
     """Should exit without cloning anything If no redownload."""
     mocker.patch(
-        "cookiecutter.zipfile.prompt_and_delete", side_effect=SystemExit, autospec=True,
+        'cookiecutter.zipfile.prompt_and_delete',
+        side_effect=SystemExit,
+        autospec=True
     )
 
     mock_requests_get = mocker.patch(
-        "cookiecutter.zipfile.requests.get", autospec=True,
+        'cookiecutter.zipfile.requests.get',
+        autospec=True,
     )
 
-    clone_to_dir = tmpdir.mkdir("clone")
+    clone_to_dir = tmpdir.mkdir('clone')
 
     # Create an existing cache of the zipfile
-    existing_zip = clone_to_dir.join("fake-repo-tmpl.zip")
-    existing_zip.write("This is an existing zipfile")
+    existing_zip = clone_to_dir.join('fake-repo-tmpl.zip')
+    existing_zip.write('This is an existing zipfile')
 
-    zipfile_url = "https://example.com/path/to/fake-repo-tmpl.zip"
+    zipfile_url = 'https://example.com/path/to/fake-repo-tmpl.zip'
 
     with pytest.raises(SystemExit):
         zipfile.unzip(zipfile_url, is_url=True, clone_to_dir=str(clone_to_dir))
