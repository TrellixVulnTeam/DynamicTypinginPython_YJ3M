commit 881587a2a2a44693e7b898e330613edbc225daa7
Author: Nicholas Bollweg <nicholas.bollweg@gtri.gatech.edu>
Date:   Thu Oct 23 10:23:54 2014 -0400

    always run context through prompt_for_config for templates

diff --git a/cookiecutter/main.py b/cookiecutter/main.py
index e1926f1..1b49ffe 100755
--- a/cookiecutter/main.py
+++ b/cookiecutter/main.py
@@ -97,9 +97,7 @@ def cookiecutter(input_dir, checkout=None, no_input=False, extra_context=None):
 
     # prompt the user to manually configure at the command line.
     # except when 'no-input' flag is set
-    if not no_input:
-        cookiecutter_dict = prompt_for_config(context)
-        context['cookiecutter'] = cookiecutter_dict
+    context['cookiecutter'] = prompt_for_config(context, no_input)
 
     # Create project from local context and project template.
     generate_files(
diff --git a/cookiecutter/prompt.py b/cookiecutter/prompt.py
index 3767e57..8502fb5 100755
--- a/cookiecutter/prompt.py
+++ b/cookiecutter/prompt.py
@@ -15,7 +15,7 @@ from .compat import iteritems, read_response
 from jinja2.environment import Environment
 
 
-def prompt_for_config(context):
+def prompt_for_config(context, no_input=False):
     """
     Prompts the user to enter new config, using context as a source for the
     field names and sample values.
@@ -23,16 +23,18 @@ def prompt_for_config(context):
     cookiecutter_dict = {}
     env = Environment()
 
-    for key, val in iteritems(context['cookiecutter']):
-        val = env.from_string(val).render(**cookiecutter_dict)
-        prompt = "{0} (default is \"{1}\")? ".format(key, val)
+    for key, raw in iteritems(context['cookiecutter']):
+        val = env.from_string(raw).render(**cookiecutter_dict)
 
-        new_val = read_response(prompt).strip()
+        if not no_input:
+            prompt = "{0} (default is \"{1}\")? ".format(key, val)
 
-        if new_val == '':
-            new_val = val
+            new_val = read_response(prompt).strip()
 
-        cookiecutter_dict[key] = new_val
+            if new_val != '':
+                val = new_val
+
+        cookiecutter_dict[key] = val
     return cookiecutter_dict
 
 
diff --git a/tests/fake-repo-tmpl/cookiecutter.json b/tests/fake-repo-tmpl/cookiecutter.json
new file mode 100755
index 0000000..60acb3a
--- /dev/null
+++ b/tests/fake-repo-tmpl/cookiecutter.json
@@ -0,0 +1,11 @@
+{
+	"full_name": "Audrey Roy",
+	"email": "audreyr@gmail.com",
+	"github_username": "audreyr",
+	"project_name": "Fake Project Templated",
+	"repo_name": "{{ project_name|lower|replace(' ', '-') }}",
+	"project_short_description": "This is a fake project.",
+	"release_date": "2013-07-28",
+	"year": "2013",
+	"version": "0.1"
+}
diff --git a/tests/fake-repo-tmpl/{{cookiecutter.repo_name}}/README.rst b/tests/fake-repo-tmpl/{{cookiecutter.repo_name}}/README.rst
new file mode 100755
index 0000000..d97975c
--- /dev/null
+++ b/tests/fake-repo-tmpl/{{cookiecutter.repo_name}}/README.rst
@@ -0,0 +1,5 @@
+============
+Fake Project
+============
+
+Blah!!!!
diff --git a/tests/test_main.py b/tests/test_main.py
index 60cd2af..cc683ea 100755
--- a/tests/test_main.py
+++ b/tests/test_main.py
@@ -51,11 +51,24 @@ class TestCookiecutterLocalNoInput(CookiecutterCleanSystemTestCase):
         )
         self.assertTrue(os.path.isdir('fake-project-extra'))
 
+    def test_cookiecutter_templated_context(self):
+        """
+        `Call cookiecutter()` with `no_input=True` and templates in the
+        cookiecutter.json file
+        """
+        main.cookiecutter(
+            'tests/fake-repo-tmpl',
+            no_input=True
+        )
+        self.assertTrue(os.path.isdir('fake-project-templated'))
+
     def tearDown(self):
         if os.path.isdir('fake-project'):
             utils.rmtree('fake-project')
         if os.path.isdir('fake-project-extra'):
             utils.rmtree('fake-project-extra')
+        if os.path.isdir('fake-project-templated'):
+            utils.rmtree('fake-project-templated')
 
 
 class TestCookiecutterLocalWithInput(CookiecutterCleanSystemTestCase):
