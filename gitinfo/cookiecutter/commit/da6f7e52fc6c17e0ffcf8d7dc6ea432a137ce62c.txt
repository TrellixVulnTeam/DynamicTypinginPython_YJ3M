commit da6f7e52fc6c17e0ffcf8d7dc6ea432a137ce62c
Author: Raphael Pierzina <raphael@hackebrot.de>
Date:   Mon Dec 21 22:23:59 2015 +0100

    Update main and prompt to use StrictEnvironment and update tests

diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index d627646..5ee2934 100755
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -16,8 +16,8 @@ import logging
 import os
 import shutil
 
-from jinja2 import FileSystemLoader, StrictUndefined
-from jinja2.environment import Environment
+from jinja2 import FileSystemLoader
+from cookiecutter.environment import StrictEnvironment
 from jinja2.exceptions import TemplateSyntaxError, UndefinedError
 from binaryornot.check import is_binary
 
@@ -256,9 +256,9 @@ def generate_files(repo_dir, context=None, output_dir='.',
 
     unrendered_dir = os.path.split(template_dir)[1]
     ensure_dir_is_templated(unrendered_dir)
-    env = Environment(
+    env = StrictEnvironment(
+        context=context,
         keep_trailing_newline=True,
-        undefined=StrictUndefined
     )
     try:
         project_dir = render_and_create_dir(
diff --git a/cookiecutter/prompt.py b/cookiecutter/prompt.py
index 7b931c8..0d7e4df 100755
--- a/cookiecutter/prompt.py
+++ b/cookiecutter/prompt.py
@@ -15,11 +15,10 @@ from past.builtins import basestring
 
 from future.utils import iteritems
 
-from jinja2 import StrictUndefined
-from jinja2.environment import Environment
 from jinja2.exceptions import UndefinedError
 
 from .exceptions import UndefinedVariableInTemplate
+from .environment import StrictEnvironment
 
 
 def read_user_variable(var_name, default_value):
@@ -117,7 +116,7 @@ def prompt_for_config(context, no_input=False):
     :param no_input: Prompt the user at command line for manual configuration?
     """
     cookiecutter_dict = {}
-    env = Environment(undefined=StrictUndefined)
+    env = StrictEnvironment(context=context)
 
     for key, raw in iteritems(context[u'cookiecutter']):
         if key.startswith(u'_'):
diff --git a/tests/test_generate_file.py b/tests/test_generate_file.py
index 187973e..40a7260 100755
--- a/tests/test_generate_file.py
+++ b/tests/test_generate_file.py
@@ -15,10 +15,10 @@ import os
 import pytest
 
 from jinja2 import FileSystemLoader
-from jinja2.environment import Environment
 from jinja2.exceptions import TemplateSyntaxError
 
 from cookiecutter import generate
+from cookiecutter.environment import StrictEnvironment
 
 
 @pytest.fixture(scope='function')
@@ -34,7 +34,7 @@ def remove_cheese_file(request):
 
 @pytest.fixture
 def env():
-    environment = Environment()
+    environment = StrictEnvironment()
     environment.loader = FileSystemLoader('.')
     return environment
 
diff --git a/tests/test_prompt.py b/tests/test_prompt.py
index 42aad0b..1129715 100644
--- a/tests/test_prompt.py
+++ b/tests/test_prompt.py
@@ -14,8 +14,7 @@ import platform
 import pytest
 from past.builtins import basestring
 
-from cookiecutter import prompt, exceptions
-from jinja2.environment import Environment
+from cookiecutter import prompt, exceptions, environment
 
 
 @pytest.mark.parametrize('raw_var, rendered_var', [
@@ -26,9 +25,9 @@ from jinja2.environment import Environment
     (None, None),
 ])
 def test_convert_to_str(mocker, raw_var, rendered_var):
-    env = Environment()
+    env = environment.StrictEnvironment()
     from_string = mocker.patch(
-        'cookiecutter.prompt.Environment.from_string',
+        'cookiecutter.prompt.StrictEnvironment.from_string',
         wraps=env.from_string
     )
     context = {'project': 'foobar'}
@@ -228,7 +227,7 @@ class TestPromptChoiceForConfig(object):
 
         actual_choice = prompt.prompt_choice_for_config(
             context,
-            Environment(),
+            environment.StrictEnvironment(),
             'orientation',
             choices,
             True  # Suppress user input
@@ -244,7 +243,7 @@ class TestPromptChoiceForConfig(object):
 
         actual_choice = prompt.prompt_choice_for_config(
             context,
-            Environment(),
+            environment.StrictEnvironment(),
             'orientation',
             choices,
             False  # Ask the user for input
