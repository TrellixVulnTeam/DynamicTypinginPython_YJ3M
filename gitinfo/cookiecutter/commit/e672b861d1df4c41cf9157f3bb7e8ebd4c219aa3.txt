commit e672b861d1df4c41cf9157f3bb7e8ebd4c219aa3
Author: Sergi Almacellas Abellana <sergi@koolpi.com>
Date:   Tue Aug 27 16:03:37 2013 +0200

    Added support for mercurial VCS
    
        Use .hg in the end of the repo to indicate that is a mercurial repo.
    
        - Added mercurial for test dependency.
        - Added test for mercurial checkout.
        - Refactored vcs.py to reuse delete code.

diff --git a/cookiecutter/main.py b/cookiecutter/main.py
index 7168932..0314f2a 100755
--- a/cookiecutter/main.py
+++ b/cookiecutter/main.py
@@ -20,7 +20,7 @@ from .cleanup import remove_repo
 from .find import find_template
 from .prompt import prompt_for_config
 from .generate import generate_context, generate_files
-from .vcs import git_clone
+from .vcs import git_clone, hg_clone
 
 
 logger = logging.getLogger(__name__)
@@ -28,8 +28,8 @@ logger = logging.getLogger(__name__)
 def cookiecutter(input_dir):
     """
     API equivalent to using Cookiecutter at the command line.
-    
-    :param input_dir: A directory containing a project template dir, 
+
+    :param input_dir: A directory containing a project template dir,
         or a URL to git repo.
     """
 
@@ -38,6 +38,10 @@ def cookiecutter(input_dir):
         got_repo_arg = True
         repo_dir = git_clone(input_dir)
         project_template = find_template(repo_dir)
+    elif input_dir.endswith('.hg'):
+        got_repo_arg = True
+        repo_dir = hg_clone(input_dir)
+        project_template = find_template(repo_dir)
     else:
         got_repo_arg = False
         project_template = find_template(input_dir)
@@ -78,7 +82,7 @@ def parse_cookiecutter_args(args):
         help='Cookiecutter project dir, e.g. cookiecutter-pypackage/'
     )
     return parser.parse_args(args)
-    
+
 def main():
     """ Entry point for the package, as defined in setup.py. """
 
@@ -86,7 +90,7 @@ def main():
     logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.INFO)
 
     args = parse_cookiecutter_args(sys.argv[1:])
-    
+
     cookiecutter(args.input_dir)
 
 if __name__ == '__main__':
diff --git a/cookiecutter/vcs.py b/cookiecutter/vcs.py
index 11c9c53..26c77be 100755
--- a/cookiecutter/vcs.py
+++ b/cookiecutter/vcs.py
@@ -16,26 +16,50 @@ import sys
 from .prompt import query_yes_no
 
 
+def delete_repo(repo_dir):
+    ok_to_delete = query_yes_no("You've cloned {0} before. "
+        "Is it okay to delete and re-clone it?".format(repo_dir))
+    if ok_to_delete:
+        shutil.rmtree(repo_dir)
+    else:
+        sys.exit()
+
+
 def git_clone(repo):
     """
     Clone a git repo to the current directory.
-    
+
     :param repo: Git repo URL ending with .git.
     """
 
-    
     # Return repo dir
     tail = os.path.split(repo)[1]
     repo_dir = tail.rsplit('.git')[0]
     logging.debug('repo_dir is {0}'.format(repo_dir))
 
     if os.path.isdir(repo_dir):
-        ok_to_delete = query_yes_no("You've cloned {0} before. Is it okay to delete and re-clone it?".format(repo_dir))
-        if ok_to_delete:
-            shutil.rmtree(repo_dir)
-        else:
-            sys.exit()
+        delete_repo(repo_dir)
 
     os.system('git clone {0}'.format(repo))
 
     return repo_dir
+
+
+def hg_clone(repo):
+    """
+    Clone a mercurial repo to the current directory.
+
+    :param repo: repo URL ending with .hg.
+    """
+
+    # Return repo dir
+    tail = os.path.split(repo)[1]
+    repo_dir = tail.rsplit('.hg')[0]
+    logging.debug('repo_dir is {0}'.format(repo_dir))
+
+    if os.path.isdir(repo_dir):
+        delete_repo(repo_dir)
+
+    os.system('hg clone {0}'.format(repo[0:-3]))
+
+    return repo_dir
diff --git a/requirements/base_test.txt b/requirements/base_test.txt
index 71094bb..54a5a1f 100644
--- a/requirements/base_test.txt
+++ b/requirements/base_test.txt
@@ -1 +1,2 @@
 coveralls
+mercurial
diff --git a/tests/test_vcs.py b/tests/test_vcs.py
index 7749523..688e398 100755
--- a/tests/test_vcs.py
+++ b/tests/test_vcs.py
@@ -42,6 +42,15 @@ class TestVCS(unittest.TestCase):
         if os.path.isdir('cookiecutter-pypackage'):
             shutil.rmtree('cookiecutter-pypackage')
 
+    def test_hg_clone(self):
+        repo_dir = vcs.hg_clone(
+            'https://bitbucket.org/pokoli/cookiecutter-trytonmodule.hg'
+        )
+        self.assertEqual(repo_dir, 'cookiecutter-trytonmodule')
+        self.assertTrue(os.path.isfile('cookiecutter-trytonmodule/README.rst'))
+        if os.path.isdir('cookiecutter-trytonmodule'):
+            shutil.rmtree('cookiecutter-trytonmodule')
+
 
 class TestVCSPrompt(unittest.TestCase):
 
@@ -49,6 +58,9 @@ class TestVCSPrompt(unittest.TestCase):
         if os.path.isdir('cookiecutter-pypackage'):
             shutil.rmtree('cookiecutter-pypackage')
         os.mkdir('cookiecutter-pypackage/')
+        if os.path.isdir('cookiecutter-trytonmodule'):
+            shutil.rmtree('cookiecutter-trytonmodule')
+        os.mkdir('cookiecutter-trytonmodule/')
 
     @patch(input_str, lambda: 'y')
     def test_git_clone_overwrite(self):
@@ -70,9 +82,31 @@ class TestVCSPrompt(unittest.TestCase):
             'https://github.com/audreyr/cookiecutter-pypackage.git'
         )
 
+    @patch(input_str, lambda: 'y')
+    def test_hg_clone_overwrite(self):
+        if not PY3:
+            sys.stdin = StringIO('y\n\n')
+        repo_dir = vcs.hg_clone(
+            'https://bitbucket.org/pokoli/cookiecutter-trytonmodule.hg'
+        )
+        self.assertEqual(repo_dir, 'cookiecutter-trytonmodule')
+        self.assertTrue(os.path.isfile('cookiecutter-trytonmodule/README.rst'))
+
+    @patch(input_str, lambda: 'n')
+    def test_hg_clone_cancel(self):
+        if not PY3:
+            sys.stdin = StringIO('n\n\n')
+        self.assertRaises(
+            SystemExit,
+            vcs.hg_clone,
+            'https://bitbucket.org/pokoli/cookiecutter-trytonmodule.hg'
+        )
+
     def tearDown(self):
         if os.path.isdir('cookiecutter-pypackage'):
             shutil.rmtree('cookiecutter-pypackage')
+        if os.path.isdir('cookiecutter-trytonmodule'):
+            shutil.rmtree('cookiecutter-trytonmodule')
 
 
 if __name__ == '__main__':
