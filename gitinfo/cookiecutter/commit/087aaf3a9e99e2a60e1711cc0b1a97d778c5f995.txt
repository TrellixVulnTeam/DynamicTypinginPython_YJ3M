commit 087aaf3a9e99e2a60e1711cc0b1a97d778c5f995
Author: Raphael Pierzina <raphael@hackebrot.de>
Date:   Sun Jul 31 03:13:28 2016 +0100

    Improve log messages and remove py26 left-overs

diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index b03e3ed..c67acc8 100644
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -106,7 +106,7 @@ def generate_context(context_file='cookiecutter.json', default_context=None,
     if extra_context:
         apply_overwrites_to_context(obj, extra_context)
 
-    logger.debug('Context generated is {0}'.format(context))
+    logger.debug('Context generated is {}'.format(context))
     return context
 
 
@@ -131,7 +131,7 @@ def generate_file(project_dir, infile, context, env):
     :param context: Dict for populating the cookiecutter's variables.
     :param env: Jinja2 template execution environment.
     """
-    logger.debug('Generating file {0}'.format(infile))
+    logger.debug('Processing file {}'.format(infile))
 
     # Render the path to the output file (not including the root project dir)
     outfile_tmpl = env.from_string(infile)
@@ -142,13 +142,15 @@ def generate_file(project_dir, infile, context, env):
         logger.debug('The resulting file name is empty: {0}'.format(outfile))
         return
 
-    logger.debug('outfile is {0}'.format(outfile))
+    logger.debug('Created file at {0}'.format(outfile))
 
     # Just copy over binary files. Don't render.
-    logger.debug("Check {0} to see if it's a binary".format(infile))
+    logger.debug("Check {} to see if it's a binary".format(infile))
     if is_binary(infile):
-        logger.debug('Copying binary {0} to {1} without rendering'
-                      .format(infile, outfile))
+        logger.debug(
+            'Copying binary {} to {} without rendering'
+            ''.format(infile, outfile)
+        )
         shutil.copyfile(infile, outfile)
     else:
         # Force fwd slashes on Windows for get_template
@@ -165,7 +167,7 @@ def generate_file(project_dir, infile, context, env):
             raise
         rendered_file = tmpl.render(**context)
 
-        logger.debug('Writing {0}'.format(outfile))
+        logger.debug('Writing contents to file {}'.format(outfile))
 
         with io.open(outfile, 'w', encoding='utf-8') as fh:
             fh.write(rendered_file)
@@ -179,20 +181,24 @@ def render_and_create_dir(dirname, context, output_dir, environment,
     """Render name of a directory, create the directory, return its path."""
     name_tmpl = environment.from_string(dirname)
     rendered_dirname = name_tmpl.render(**context)
-    logger.debug('Rendered dir {0} must exist in output_dir {1}'.format(
-        rendered_dirname,
-        output_dir
-    ))
+
     dir_to_create = os.path.normpath(
         os.path.join(output_dir, rendered_dirname)
     )
 
+    logger.debug('Rendered dir {} must exist in output_dir {}'.format(
+        dir_to_create,
+        output_dir
+    ))
+
     output_dir_exists = os.path.exists(dir_to_create)
 
     if overwrite_if_exists:
         if output_dir_exists:
-            logger.debug('Output directory {} already exists,'
-                          'overwriting it'.format(dir_to_create))
+            logger.debug(
+                'Output directory {} already exists,'
+                'overwriting it'.format(dir_to_create)
+            )
     else:
         if output_dir_exists:
             msg = 'Error: "{}" directory already exists'.format(dir_to_create)
@@ -217,8 +223,10 @@ def _run_hook_from_repo_dir(repo_dir, hook_name, project_dir, context):
             run_hook(hook_name, project_dir, context)
         except FailedHookException:
             rmtree(project_dir)
-            logger.error("Stopping generation because %s"
-                          " hook script didn't exit successfully" % hook_name)
+            logger.error(
+                "Stopping generation because {} hook "
+                "script didn't exit successfully".format(hook_name)
+            )
             raise
 
 
@@ -233,7 +241,7 @@ def generate_files(repo_dir, context=None, output_dir='.',
         if it exists.
     """
     template_dir = find_template(repo_dir)
-    logger.debug('Generating project from {0}...'.format(template_dir))
+    logger.debug('Generating project from {}...'.format(template_dir))
     context = context or {}
 
     unrendered_dir = os.path.split(template_dir)[1]
@@ -262,7 +270,7 @@ def generate_files(repo_dir, context=None, output_dir='.',
     # absolute path for the target folder (project_dir)
 
     project_dir = os.path.abspath(project_dir)
-    logger.debug('project_dir is {0}'.format(project_dir))
+    logger.debug('project_dir is {}'.format(project_dir))
 
     _run_hook_from_repo_dir(repo_dir, 'pre_gen_project', project_dir, context)
 
@@ -290,7 +298,7 @@ def generate_files(repo_dir, context=None, output_dir='.',
                 indir = os.path.normpath(os.path.join(root, copy_dir))
                 outdir = os.path.normpath(os.path.join(project_dir, indir))
                 logger.debug(
-                    'Copying dir {0} to {1} without rendering'
+                    'Copying dir {} to {} without rendering'
                     ''.format(indir, outdir)
                 )
                 shutil.copytree(indir, outdir)
@@ -321,13 +329,12 @@ def generate_files(repo_dir, context=None, output_dir='.',
                     outfile_rendered = outfile_tmpl.render(**context)
                     outfile = os.path.join(project_dir, outfile_rendered)
                     logger.debug(
-                        'Copying file {0} to {1} without rendering'
+                        'Copying file {} to {} without rendering'
                         ''.format(infile, outfile)
                     )
                     shutil.copyfile(infile, outfile)
                     shutil.copymode(infile, outfile)
                     continue
-                logger.debug('f is {0}'.format(f))
                 try:
                     generate_file(project_dir, infile, context, env)
                 except UndefinedError as err:
diff --git a/cookiecutter/hooks.py b/cookiecutter/hooks.py
index 352c25f..bd39be8 100644
--- a/cookiecutter/hooks.py
+++ b/cookiecutter/hooks.py
@@ -35,7 +35,7 @@ def find_hooks():
     """
     hooks_dir = 'hooks'
     hooks = {}
-    logger.debug('hooks_dir is {0}'.format(hooks_dir))
+    logger.debug('hooks_dir is {}'.format(hooks_dir))
 
     if not os.path.isdir(hooks_dir):
         logger.debug('No hooks/ dir in template_dir')
@@ -109,4 +109,5 @@ def run_hook(hook_name, project_dir, context):
     if script is None:
         logger.debug('No hooks found')
         return
+    logger.debug('Running hook {}'.format(hook_name))
     run_script_with_context(script, project_dir, context)
diff --git a/cookiecutter/utils.py b/cookiecutter/utils.py
index 920e4f8..9f661df 100644
--- a/cookiecutter/utils.py
+++ b/cookiecutter/utils.py
@@ -46,9 +46,10 @@ def make_sure_path_exists(path):
     :param path: A directory path.
     """
 
-    logger.debug('Making sure path exists: {0}'.format(path))
+    logger.debug('Making sure path exists: {}'.format(path))
     try:
         os.makedirs(path)
+        logger.debug('Created directory at: {}'.format(path))
     except OSError as exception:
         if exception.errno != errno.EEXIST:
             return False
