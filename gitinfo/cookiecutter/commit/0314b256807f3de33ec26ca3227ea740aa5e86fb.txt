commit 0314b256807f3de33ec26ca3227ea740aa5e86fb
Author: Steven Loria <sloria1@gmail.com>
Date:   Mon Aug 19 22:00:10 2013 -0500

    Fix copying of binary files in nested paths
    
    This solves a problem where files in nested, templated paths would raise an IOError:
    e.g. {{cookiecutter.repo_name}}/{{cookiecutter.repo_name}}/binaryfile
    
    This also removes the requirements file from tox.ini (since it doesn't exist). Instead, deps are
    specified explicitly.

diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 9ba99de..d1932eb 100755
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -58,7 +58,7 @@ def generate_files(template_dir, context=None):
     :param input_dir: Project template input directory.
     :paramtype input_dir: directory
     """
-    
+
     # Always use utf-8
     template_dir = template_dir
 
@@ -93,8 +93,12 @@ def generate_files(template_dir, context=None):
             infile = os.path.join(root, f)
             logging.debug("infile is {0}".format(infile))
 
+            # Render the path to the output file (but don't include the filename)
+            outdir_tmpl = Template(os.path.dirname(os.path.abspath(infile)))
+            outdir = outdir_tmpl.render(**context)
+            fname = os.path.basename(os.path.abspath(infile))  # input/output filename
             # Write it to the corresponding place in output_dir
-            outfile = infile.replace(template_dir, output_dir, 1)
+            outfile = os.path.join(outdir, fname)
             logging.debug("outfile is {0}".format(outfile))
 
             # Just copy over binary files. Don't render.
@@ -105,7 +109,6 @@ def generate_files(template_dir, context=None):
                 shutil.copyfile(infile, outfile)
 
             else:
-
                 # Render the file
                 tmpl = env.get_template(infile)
                 rendered_file = tmpl.render(**context)
diff --git a/tests/input{{binary_test}}/{{binary_test}}/logo.png b/tests/input{{binary_test}}/{{binary_test}}/logo.png
new file mode 100644
index 0000000..e04d51e
Binary files /dev/null and b/tests/input{{binary_test}}/{{binary_test}}/logo.png differ
diff --git a/tests/input{{binary_test}}/{{binary_test}}/readme.txt b/tests/input{{binary_test}}/{{binary_test}}/readme.txt
new file mode 100644
index 0000000..43b2948
--- /dev/null
+++ b/tests/input{{binary_test}}/{{binary_test}}/readme.txt
@@ -0,0 +1 @@
+I eat {{ binary_test }}
\ No newline at end of file
diff --git a/tests/input{{binary_test}}/{{binary_test}}/some_font.otf b/tests/input{{binary_test}}/{{binary_test}}/some_font.otf
new file mode 100755
index 0000000..b058f1c
Binary files /dev/null and b/tests/input{{binary_test}}/{{binary_test}}/some_font.otf differ
diff --git a/tests/test_generate.py b/tests/test_generate.py
index 1787b14..1520b83 100755
--- a/tests/test_generate.py
+++ b/tests/test_generate.py
@@ -31,7 +31,7 @@ class TestGenerate(unittest.TestCase):
         self.assertRaises(
             exceptions.NonTemplatedInputDirException,
             generate.generate_files,
-            context={'food': 'pizza'}, 
+            context={'food': 'pizza'},
             template_dir='tests/input'
         )
 
@@ -59,6 +59,17 @@ class TestGenerate(unittest.TestCase):
             os.path.isfile('tests/inputbinary_files/some_font.otf')
         )
 
+    def test_generate_binary_files_in_nested_jinja_path(self):
+        generate.generate_files(
+            context={'binary_test': 'binary_files'},
+            template_dir='tests/input{{binary_test}}'
+        )
+        expected = ['tests/inputbinary_files/binary_files/logo.png',
+                    "tests/inputbinary_files/binary_files/.DS_Store",
+                    "tests/inputbinary_files/binary_files/readme.txt"]
+        for each in expected:
+            self.assertTrue(os.path.isfile(each))
+
     def test_generate_context(self):
         context = generate.generate_context(config_file='tests/json/test.json')
         self.assertEqual(context, {"test": {"1": 2}})
@@ -72,17 +83,17 @@ class TestGenerate(unittest.TestCase):
             context=context,
             template_dir='tests/input{{stuff.color}}'
         )
-        
+
         something = """Hi!
 My name is Audrey Greenfeld.
 It is 2014."""
         something2 = open('tests/inputgreen/something.txt').read()
         self.assertEqual(something, something2)
-        
+
         in_folder = "The color is green and the letter is D."
         in_folder2 = open('tests/inputgreen/folder/in_folder.txt').read()
         self.assertEqual(in_folder, in_folder2)
-        
+
         self.assertTrue(os.path.isdir('tests/inputgreen/im_a.dir'))
         self.assertTrue(os.path.isfile('tests/inputgreen/im_a.dir/im_a.file.py'))
 
diff --git a/tox.ini b/tox.ini
index aa44704..437ee54 100644
--- a/tox.ini
+++ b/tox.ini
@@ -4,7 +4,7 @@ envlist = py26, py27, py33, pypy
 [testenv]
 commands = python setup.py test
 deps =
-    -r{toxinidir}/requirements.txt
+    mock
 
 [testenv:py26]
 deps =
@@ -12,11 +12,9 @@ deps =
     unittest2
     ordereddict
     simplejson
-    -r{toxinidir}/requirements.txt
 commands = python setup.py test
 
 [testenv:py27]
 deps =
     mock
-    -r{toxinidir}/requirements.txt
 commands = python setup.py test
