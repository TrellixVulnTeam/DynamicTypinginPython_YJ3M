commit ca76833e7bd727bfa80d8429250657c7627ea2ed
Author: Rachel Sanders <rsanders@linkedin.com>
Date:   Sat Oct 4 12:46:42 2014 -0700

    Adding style fixes per audreyr. thanks for the feedback

diff --git a/cookiecutter/vcs.py b/cookiecutter/vcs.py
index 373965b..8688601 100755
--- a/cookiecutter/vcs.py
+++ b/cookiecutter/vcs.py
@@ -19,21 +19,23 @@ from .prompt import query_yes_no
 from .utils import make_sure_path_exists, rmtree
 
 
-def delete_repo(repo_dir, no_input=False):
+def prompt_and_delete_repo(repo_dir, no_input=False):
     """
     Asks the user whether it's okay to delete the previously-cloned repo.
     If yes, deletes it. Otherwise, Cookiecutter exits.
 
     :param repo_dir: Directory of previously-cloned repo.
+    :param no_input: Suppress prompt to delete repo and just delete it.
     """
 
+    # Suppress prompt if called via API
     if no_input:
-      ok_to_delete = True
+        ok_to_delete = True
     else:
-      ok_to_delete = query_yes_no("You've cloned {0} before. "
-          "Is it okay to delete and re-clone it?".format(repo_dir),
-          default="yes"
-      )
+        ok_to_delete = query_yes_no("You've cloned {0} before. "
+            "Is it okay to delete and re-clone it?".format(repo_dir),
+            default="yes"
+        )
 
     if ok_to_delete:
         rmtree(repo_dir)
@@ -62,7 +64,9 @@ def clone(repo_url, checkout=None, clone_to_dir=".", no_input=False):
     Clone a repo to the current directory.
 
     :param repo_url: Repo URL of unknown type.
-    :param checkout: The branch, tag or commit ID to checkout after clone
+    :param checkout: The branch, tag or commit ID to checkout after clone.
+    :param clone_to_dir: The directory to clone to. Defaults to the current directory.
+    :param no_input: Suppress all user prompts when calling via API.
     """
 
     # Ensure that clone_to_dir exists
@@ -79,7 +83,7 @@ def clone(repo_url, checkout=None, clone_to_dir=".", no_input=False):
     logging.debug('repo_dir is {0}'.format(repo_dir))
 
     if os.path.isdir(repo_dir):
-        delete_repo(repo_dir, no_input=no_input)
+        prompt_and_delete_repo(repo_dir, no_input=no_input)
 
     if repo_type in ["git", "hg"]:
         subprocess.check_call([repo_type, 'clone', repo_url], cwd=clone_to_dir)
