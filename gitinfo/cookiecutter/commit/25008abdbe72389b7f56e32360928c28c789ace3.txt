commit 25008abdbe72389b7f56e32360928c28c789ace3
Author: Russell Keith-Magee <russell@keith-magee.com>
Date:   Fri Sep 15 08:21:52 2017 -0700

    After unrolling a zipfile template, delete the extracted files.

diff --git a/cookiecutter/main.py b/cookiecutter/main.py
index f138cdb..45d62f3 100644
--- a/cookiecutter/main.py
+++ b/cookiecutter/main.py
@@ -17,6 +17,7 @@ from .exceptions import InvalidModeException
 from .prompt import prompt_for_config
 from .replay import dump, load
 from .repository import determine_repo_dir
+from .utils import rmtree
 
 logger = logging.getLogger(__name__)
 
@@ -52,7 +53,7 @@ def cookiecutter(
         default_config=default_config,
     )
 
-    repo_dir = determine_repo_dir(
+    repo_dir, cleanup = determine_repo_dir(
         template=template,
         abbreviations=config_dict['abbreviations'],
         clone_to_dir=config_dict['cookiecutters_dir'],
@@ -84,9 +85,15 @@ def cookiecutter(
         dump(config_dict['replay_dir'], template_name, context)
 
     # Create project from local context and project template.
-    return generate_files(
+    result = generate_files(
         repo_dir=repo_dir,
         context=context,
         overwrite_if_exists=overwrite_if_exists,
         output_dir=output_dir
     )
+
+    # Cleanup (if required)
+    if cleanup:
+        rmtree(repo_dir)
+
+    return result
diff --git a/cookiecutter/repository.py b/cookiecutter/repository.py
index c0f0bc9..235adb9 100644
--- a/cookiecutter/repository.py
+++ b/cookiecutter/repository.py
@@ -77,7 +77,9 @@ def determine_repo_dir(template, abbreviations, clone_to_dir, checkout,
     :param clone_to_dir: The directory to clone the repository into.
     :param checkout: The branch, tag or commit ID to checkout after clone.
     :param no_input: Prompt the user at command line for manual configuration?
-    :return: The cookiecutter template directory
+    :return: A tuple containing the cookiecutter template directory, and
+        a boolean descriving whether that directory should be cleaned up
+        after the template has been instantiated.
     :raises: `RepositoryNotFound` if a repository directory could not be found.
     """
     template = expand_abbreviations(template, abbreviations)
@@ -90,6 +92,7 @@ def determine_repo_dir(template, abbreviations, clone_to_dir, checkout,
             no_input=no_input
         )
         repository_candidates = [unzipped_dir]
+        cleanup = True
     elif is_repo_url(template):
         cloned_repo = clone(
             repo_url=template,
@@ -98,15 +101,17 @@ def determine_repo_dir(template, abbreviations, clone_to_dir, checkout,
             no_input=no_input,
         )
         repository_candidates = [cloned_repo]
+        cleanup = False
     else:
         repository_candidates = [
             template,
             os.path.join(clone_to_dir, template)
         ]
+        cleanup = False
 
     for repo_candidate in repository_candidates:
         if repository_has_cookiecutter_json(repo_candidate):
-            return repo_candidate
+            return repo_candidate, cleanup
 
     raise RepositoryNotFound(
         'A valid repository for "{}" could not be found in the following '
diff --git a/tests/repository/test_determine_repo_dir_clones_repo.py b/tests/repository/test_determine_repo_dir_clones_repo.py
index fe84c90..c583677 100644
--- a/tests/repository/test_determine_repo_dir_clones_repo.py
+++ b/tests/repository/test_determine_repo_dir_clones_repo.py
@@ -23,7 +23,7 @@ def test_zipfile_unzip(mocker, template, is_url, user_config_data):
         autospec=True
     )
 
-    project_dir = repository.determine_repo_dir(
+    project_dir, cleanup = repository.determine_repo_dir(
         template,
         abbreviations={},
         clone_to_dir=user_config_data['cookiecutters_dir'],
@@ -39,6 +39,7 @@ def test_zipfile_unzip(mocker, template, is_url, user_config_data):
     )
 
     assert os.path.isdir(project_dir)
+    assert cleanup
     assert 'tests/fake-repo-tmpl' == project_dir
 
 
@@ -63,7 +64,7 @@ def test_repository_url_should_clone(
         autospec=True
     )
 
-    project_dir = repository.determine_repo_dir(
+    project_dir, cleanup = repository.determine_repo_dir(
         template_url,
         abbreviations={},
         clone_to_dir=user_config_data['cookiecutters_dir'],
@@ -79,6 +80,7 @@ def test_repository_url_should_clone(
     )
 
     assert os.path.isdir(project_dir)
+    assert not cleanup
     assert 'tests/fake-repo-tmpl' == project_dir
 
 
diff --git a/tests/repository/test_determine_repo_dir_finds_existing_cookiecutter.py b/tests/repository/test_determine_repo_dir_finds_existing_cookiecutter.py
index 7b274a3..05f1a23 100644
--- a/tests/repository/test_determine_repo_dir_finds_existing_cookiecutter.py
+++ b/tests/repository/test_determine_repo_dir_finds_existing_cookiecutter.py
@@ -25,7 +25,7 @@ def cloned_cookiecutter_path(user_config_data, template):
 
 def test_should_find_existing_cookiecutter(
         template, user_config_data, cloned_cookiecutter_path):
-    project_dir = repository.determine_repo_dir(
+    project_dir, cleanup = repository.determine_repo_dir(
         template,
         abbreviations={},
         clone_to_dir=user_config_data['cookiecutters_dir'],
@@ -34,3 +34,4 @@ def test_should_find_existing_cookiecutter(
     )
 
     assert cloned_cookiecutter_path == project_dir
+    assert not cleanup
diff --git a/tests/repository/test_determine_repository_should_use_local_repo.py b/tests/repository/test_determine_repository_should_use_local_repo.py
index b2ca4f1..196cfbd 100644
--- a/tests/repository/test_determine_repository_should_use_local_repo.py
+++ b/tests/repository/test_determine_repository_should_use_local_repo.py
@@ -7,7 +7,7 @@ import pytest
 
 def test_finds_local_repo(tmpdir):
     """A valid local repository should be returned."""
-    project_dir = repository.determine_repo_dir(
+    project_dir, cleanup = repository.determine_repo_dir(
         'tests/fake-repo',
         abbreviations={},
         clone_to_dir=str(tmpdir),
@@ -16,6 +16,7 @@ def test_finds_local_repo(tmpdir):
     )
 
     assert 'tests/fake-repo' == project_dir
+    assert not cleanup
 
 
 def test_local_repo_with_no_context_raises(tmpdir):
diff --git a/tests/test_cookiecutter_local_no_input.py b/tests/test_cookiecutter_local_no_input.py
index 885da18..cd701b4 100644
--- a/tests/test_cookiecutter_local_no_input.py
+++ b/tests/test_cookiecutter_local_no_input.py
@@ -32,6 +32,8 @@ def remove_additional_dirs(request):
             utils.rmtree('fake-project-templated')
         if os.path.isdir('fake-project-dict'):
             utils.rmtree('fake-project-dict')
+        if os.path.isdir('fake-tmp'):
+            utils.rmtree('fake-tmp')
     request.addfinalizer(fin_remove_additional_dirs)
 
 
@@ -129,3 +131,33 @@ def test_cookiecutter_dict_values_in_context():
         </dl>
 
     """).lstrip()
+
+
+@pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
+def test_cookiecutter_template_cleanup(mocker):
+    """
+    `Call cookiecutter()` with `no_input=True` and templates in the
+    cookiecutter.json file
+    """
+    mock_mkdtemp = mocker.patch(
+        'tempfile.mkdtemp',
+        return_value='fake-tmp',
+        autospec=True
+    )
+
+    mock_tmpdir = mocker.patch(
+        'cookiecutter.zipfile.prompt_and_delete',
+        return_value=True,
+        autospec=True
+    )
+
+    main.cookiecutter(
+        'tests/files/fake-repo-tmpl.zip',
+        no_input=True
+    )
+    assert os.path.isdir('fake-project-templated')
+
+    # The tmp directory will still exist, but the
+    # extracted template directory *in* the temp directory will not.
+    assert os.path.exists('fake-tmp')
+    assert not os.path.exists('fake-tmp/fake-repo-tmpl')
