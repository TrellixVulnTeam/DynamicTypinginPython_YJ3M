commit 201f3332a82b52ee64ae9d5474585e93318f9394
Author: Raphael Pierzina <raphael@hackebrot.de>
Date:   Sun Jul 31 02:33:31 2016 +0100

    Update logging to track the package/module hierarchy

diff --git a/cookiecutter/find.py b/cookiecutter/find.py
index 3755bd1..c6f3246 100644
--- a/cookiecutter/find.py
+++ b/cookiecutter/find.py
@@ -7,6 +7,8 @@ import os
 
 from .exceptions import NonTemplatedInputDirException
 
+logger = logging.getLogger(__name__)
+
 
 def find_template(repo_dir):
     """Determine which child directory of `repo_dir` is the project template.
@@ -14,7 +16,7 @@ def find_template(repo_dir):
     :param repo_dir: Local directory of newly cloned repo.
     :returns project_template: Relative path to project template.
     """
-    logging.debug('Searching {0} for the project template.'.format(repo_dir))
+    logger.debug('Searching {0} for the project template.'.format(repo_dir))
 
     repo_dir_contents = os.listdir(repo_dir)
 
@@ -26,7 +28,7 @@ def find_template(repo_dir):
 
     if project_template:
         project_template = os.path.join(repo_dir, project_template)
-        logging.debug(
+        logger.debug(
             'The project template appears to be {0}'.format(project_template)
         )
         return project_template
diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index e1a6a8a..b03e3ed 100644
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -26,6 +26,8 @@ from .find import find_template
 from .utils import make_sure_path_exists, work_in, rmtree
 from .hooks import run_hook
 
+logger = logging.getLogger(__name__)
+
 
 def copy_without_render(path, context):
     """Return True if `path` matches context dict pattern.
@@ -104,7 +106,7 @@ def generate_context(context_file='cookiecutter.json', default_context=None,
     if extra_context:
         apply_overwrites_to_context(obj, extra_context)
 
-    logging.debug('Context generated is {0}'.format(context))
+    logger.debug('Context generated is {0}'.format(context))
     return context
 
 
@@ -129,7 +131,7 @@ def generate_file(project_dir, infile, context, env):
     :param context: Dict for populating the cookiecutter's variables.
     :param env: Jinja2 template execution environment.
     """
-    logging.debug('Generating file {0}'.format(infile))
+    logger.debug('Generating file {0}'.format(infile))
 
     # Render the path to the output file (not including the root project dir)
     outfile_tmpl = env.from_string(infile)
@@ -137,15 +139,15 @@ def generate_file(project_dir, infile, context, env):
     outfile = os.path.join(project_dir, outfile_tmpl.render(**context))
     file_name_is_empty = os.path.isdir(outfile)
     if file_name_is_empty:
-        logging.debug('The resulting file name is empty: {0}'.format(outfile))
+        logger.debug('The resulting file name is empty: {0}'.format(outfile))
         return
 
-    logging.debug('outfile is {0}'.format(outfile))
+    logger.debug('outfile is {0}'.format(outfile))
 
     # Just copy over binary files. Don't render.
-    logging.debug("Check {0} to see if it's a binary".format(infile))
+    logger.debug("Check {0} to see if it's a binary".format(infile))
     if is_binary(infile):
-        logging.debug('Copying binary {0} to {1} without rendering'
+        logger.debug('Copying binary {0} to {1} without rendering'
                       .format(infile, outfile))
         shutil.copyfile(infile, outfile)
     else:
@@ -163,7 +165,7 @@ def generate_file(project_dir, infile, context, env):
             raise
         rendered_file = tmpl.render(**context)
 
-        logging.debug('Writing {0}'.format(outfile))
+        logger.debug('Writing {0}'.format(outfile))
 
         with io.open(outfile, 'w', encoding='utf-8') as fh:
             fh.write(rendered_file)
@@ -177,7 +179,7 @@ def render_and_create_dir(dirname, context, output_dir, environment,
     """Render name of a directory, create the directory, return its path."""
     name_tmpl = environment.from_string(dirname)
     rendered_dirname = name_tmpl.render(**context)
-    logging.debug('Rendered dir {0} must exist in output_dir {1}'.format(
+    logger.debug('Rendered dir {0} must exist in output_dir {1}'.format(
         rendered_dirname,
         output_dir
     ))
@@ -189,7 +191,7 @@ def render_and_create_dir(dirname, context, output_dir, environment,
 
     if overwrite_if_exists:
         if output_dir_exists:
-            logging.debug('Output directory {} already exists,'
+            logger.debug('Output directory {} already exists,'
                           'overwriting it'.format(dir_to_create))
     else:
         if output_dir_exists:
@@ -215,7 +217,7 @@ def _run_hook_from_repo_dir(repo_dir, hook_name, project_dir, context):
             run_hook(hook_name, project_dir, context)
         except FailedHookException:
             rmtree(project_dir)
-            logging.error("Stopping generation because %s"
+            logger.error("Stopping generation because %s"
                           " hook script didn't exit successfully" % hook_name)
             raise
 
@@ -231,7 +233,7 @@ def generate_files(repo_dir, context=None, output_dir='.',
         if it exists.
     """
     template_dir = find_template(repo_dir)
-    logging.debug('Generating project from {0}...'.format(template_dir))
+    logger.debug('Generating project from {0}...'.format(template_dir))
     context = context or {}
 
     unrendered_dir = os.path.split(template_dir)[1]
@@ -260,7 +262,7 @@ def generate_files(repo_dir, context=None, output_dir='.',
     # absolute path for the target folder (project_dir)
 
     project_dir = os.path.abspath(project_dir)
-    logging.debug('project_dir is {0}'.format(project_dir))
+    logger.debug('project_dir is {0}'.format(project_dir))
 
     _run_hook_from_repo_dir(repo_dir, 'pre_gen_project', project_dir, context)
 
@@ -287,7 +289,7 @@ def generate_files(repo_dir, context=None, output_dir='.',
             for copy_dir in copy_dirs:
                 indir = os.path.normpath(os.path.join(root, copy_dir))
                 outdir = os.path.normpath(os.path.join(project_dir, indir))
-                logging.debug(
+                logger.debug(
                     'Copying dir {0} to {1} without rendering'
                     ''.format(indir, outdir)
                 )
@@ -318,14 +320,14 @@ def generate_files(repo_dir, context=None, output_dir='.',
                     outfile_tmpl = env.from_string(infile)
                     outfile_rendered = outfile_tmpl.render(**context)
                     outfile = os.path.join(project_dir, outfile_rendered)
-                    logging.debug(
+                    logger.debug(
                         'Copying file {0} to {1} without rendering'
                         ''.format(infile, outfile)
                     )
                     shutil.copyfile(infile, outfile)
                     shutil.copymode(infile, outfile)
                     continue
-                logging.debug('f is {0}'.format(f))
+                logger.debug('f is {0}'.format(f))
                 try:
                     generate_file(project_dir, infile, context, env)
                 except UndefinedError as err:
diff --git a/cookiecutter/hooks.py b/cookiecutter/hooks.py
index 259189a..352c25f 100644
--- a/cookiecutter/hooks.py
+++ b/cookiecutter/hooks.py
@@ -14,6 +14,8 @@ from jinja2 import Template
 from cookiecutter import utils
 from .exceptions import FailedHookException
 
+logger = logging.getLogger(__name__)
+
 
 _HOOKS = [
     'pre_gen_project',
@@ -33,10 +35,10 @@ def find_hooks():
     """
     hooks_dir = 'hooks'
     hooks = {}
-    logging.debug('hooks_dir is {0}'.format(hooks_dir))
+    logger.debug('hooks_dir is {0}'.format(hooks_dir))
 
     if not os.path.isdir(hooks_dir):
-        logging.debug('No hooks/ dir in template_dir')
+        logger.debug('No hooks/ dir in template_dir')
         return hooks
 
     for f in os.listdir(hooks_dir):
@@ -105,6 +107,6 @@ def run_hook(hook_name, project_dir, context):
     """
     script = find_hooks().get(hook_name)
     if script is None:
-        logging.debug('No hooks found')
+        logger.debug('No hooks found')
         return
     run_script_with_context(script, project_dir, context)
diff --git a/cookiecutter/main.py b/cookiecutter/main.py
index 9f38757..08d8f17 100644
--- a/cookiecutter/main.py
+++ b/cookiecutter/main.py
@@ -67,7 +67,7 @@ def cookiecutter(
         context = load(config_dict['replay_dir'], template_name)
     else:
         context_file = os.path.join(repo_dir, 'cookiecutter.json')
-        logging.debug('context_file is {0}'.format(context_file))
+        logger.debug('context_file is {0}'.format(context_file))
 
         context = generate_context(
             context_file=context_file,
diff --git a/cookiecutter/utils.py b/cookiecutter/utils.py
index 7f1a847..920e4f8 100644
--- a/cookiecutter/utils.py
+++ b/cookiecutter/utils.py
@@ -15,6 +15,8 @@ import os
 import stat
 import shutil
 
+logger = logging.getLogger(__name__)
+
 
 def force_delete(func, path, exc_info):
     """
@@ -44,7 +46,7 @@ def make_sure_path_exists(path):
     :param path: A directory path.
     """
 
-    logging.debug('Making sure path exists: {0}'.format(path))
+    logger.debug('Making sure path exists: {0}'.format(path))
     try:
         os.makedirs(path)
     except OSError as exception:
diff --git a/cookiecutter/vcs.py b/cookiecutter/vcs.py
index c6b3efe..491c855 100644
--- a/cookiecutter/vcs.py
+++ b/cookiecutter/vcs.py
@@ -21,6 +21,8 @@ from .exceptions import (
 from .prompt import read_user_yes_no
 from .utils import make_sure_path_exists, rmtree
 
+logger = logging.getLogger(__name__)
+
 
 BRANCH_ERRORS = [
     'error: pathspec',
@@ -117,7 +119,7 @@ def clone(repo_url, checkout=None, clone_to_dir='.', no_input=False):
                                                  tail.rsplit('.git')[0]))
     elif repo_type == 'hg':
         repo_dir = os.path.normpath(os.path.join(clone_to_dir, tail))
-    logging.debug('repo_dir is {0}'.format(repo_dir))
+    logger.debug('repo_dir is {0}'.format(repo_dir))
 
     if os.path.isdir(repo_dir):
         prompt_and_delete_repo(repo_dir, no_input=no_input)
