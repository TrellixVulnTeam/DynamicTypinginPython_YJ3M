commit c52556dda568387cffa777e199101f09cf131778
Author: Andrey Shpak <insspb@users.noreply.github.com>
Date:   Mon Apr 13 19:33:03 2020 +0300

    Changed format of loggers invocation (#1343)
    
    * Changed format of loggers invocation (#1307)
    
    * Update changelog #1346
    
    Co-authored-by: FÃ¡bio C. Barrionuevo da Luz <bnafta@gmail.com>

diff --git a/HISTORY.md b/HISTORY.md
index 7e5f131..d605067 100644
--- a/HISTORY.md
+++ b/HISTORY.md
@@ -17,6 +17,7 @@ Internal CI/CD changes:
 * Coverage comment in future merge requests disabled [@ssbarnea](https://github.com/ssbarnea) (#1279)
 * Fixed Python 3.8 travis tests and setup.py message [@insspb](https://github.com/insspb) (#1295, #1297)
 * Travis builds extended with Windows setup for all supported python versions [@insspb](https://github.com/insspb) (#1300, #1301)
+* Update .travis.yml to be compatible with latest travis cfg specs [@luzfcb](https://github.com/luzfcb) (#1346)
 
 Code style and docs changes:
 
@@ -35,6 +36,7 @@ Code style and docs changes:
 * Updated submodule link to latest version with documentation links fix [@DanBoothDev](https://github.com/DanBoothDev) (#1388)
 * Fixed links in main README file. [@insspb](https://github.com/insspb) (#1342)
 * Fix indentation of .cookiecutterrc in README.md [@mhsekhavat](https://github.com/mhsekhavat) (#1322)
+* Changed format of loggers invocation [@insspb](https://github.com/insspb) (#1307)
 
 ## 1.7.0 (2019-12-22) Old friend
 
diff --git a/cookiecutter/config.py b/cookiecutter/config.py
index 27598aa..a736974 100644
--- a/cookiecutter/config.py
+++ b/cookiecutter/config.py
@@ -64,7 +64,7 @@ def get_config(config_path):
     if not os.path.exists(config_path):
         raise ConfigDoesNotExistException
 
-    logger.debug('config_path is {0}'.format(config_path))
+    logger.debug('config_path is %s', config_path)
     with io.open(config_path, encoding='utf-8') as file_handle:
         try:
             yaml_dict = poyo.parse_string(file_handle.read())
diff --git a/cookiecutter/find.py b/cookiecutter/find.py
index b12a42a..618921a 100644
--- a/cookiecutter/find.py
+++ b/cookiecutter/find.py
@@ -16,7 +16,7 @@ def find_template(repo_dir):
     :param repo_dir: Local directory of newly cloned repo.
     :returns project_template: Relative path to project template.
     """
-    logger.debug('Searching {} for the project template.'.format(repo_dir))
+    logger.debug('Searching %s for the project template.', repo_dir)
 
     repo_dir_contents = os.listdir(repo_dir)
 
@@ -28,9 +28,7 @@ def find_template(repo_dir):
 
     if project_template:
         project_template = os.path.join(repo_dir, project_template)
-        logger.debug(
-            'The project template appears to be {}'.format(project_template)
-        )
+        logger.debug('The project template appears to be %s', project_template)
         return project_template
     else:
         raise NonTemplatedInputDirException
diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 0e8d9b5..72682a8 100644
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -110,7 +110,7 @@ def generate_context(context_file='cookiecutter.json', default_context=None,
     if extra_context:
         apply_overwrites_to_context(obj, extra_context)
 
-    logger.debug('Context generated is {}'.format(context))
+    logger.debug('Context generated is %s', context)
     return context
 
 
@@ -136,7 +136,7 @@ def generate_file(project_dir, infile, context, env,
     :param context: Dict for populating the cookiecutter's variables.
     :param env: Jinja2 template execution environment.
     """
-    logger.debug('Processing file {}'.format(infile))
+    logger.debug('Processing file %s', infile)
 
     # Render the path to the output file (not including the root project dir)
     outfile_tmpl = env.from_string(infile)
@@ -144,21 +144,20 @@ def generate_file(project_dir, infile, context, env,
     outfile = os.path.join(project_dir, outfile_tmpl.render(**context))
     file_name_is_empty = os.path.isdir(outfile)
     if file_name_is_empty:
-        logger.debug('The resulting file name is empty: {0}'.format(outfile))
+        logger.debug('The resulting file name is empty: %s', outfile)
         return
 
     if skip_if_file_exists and os.path.exists(outfile):
-        logger.debug('The resulting file already exists: {0}'.format(outfile))
+        logger.debug('The resulting file already exists: %s', outfile)
         return
 
-    logger.debug('Created file at {0}'.format(outfile))
+    logger.debug('Created file at %s', outfile)
 
     # Just copy over binary files. Don't render.
-    logger.debug("Check {} to see if it's a binary".format(infile))
+    logger.debug("Check %s to see if it's a binary", infile)
     if is_binary(infile):
         logger.debug(
-            'Copying binary {} to {} without rendering'
-            ''.format(infile, outfile)
+            'Copying binary %s to %s without rendering', infile, outfile
         )
         shutil.copyfile(infile, outfile)
     else:
@@ -176,7 +175,7 @@ def generate_file(project_dir, infile, context, env,
             raise
         rendered_file = tmpl.render(**context)
 
-        logger.debug('Writing contents to file {}'.format(outfile))
+        logger.debug('Writing contents to file %s', outfile)
 
         with io.open(outfile, 'w', encoding='utf-8') as fh:
             fh.write(rendered_file)
@@ -195,18 +194,17 @@ def render_and_create_dir(dirname, context, output_dir, environment,
         os.path.join(output_dir, rendered_dirname)
     )
 
-    logger.debug('Rendered dir {} must exist in output_dir {}'.format(
-        dir_to_create,
-        output_dir
-    ))
+    logger.debug('Rendered dir %s must exist in output_dir %s',
+                 dir_to_create,
+                 output_dir
+                 )
 
     output_dir_exists = os.path.exists(dir_to_create)
 
     if output_dir_exists:
         if overwrite_if_exists:
             logger.debug(
-                'Output directory {} already exists,'
-                'overwriting it'.format(dir_to_create)
+                'Output directory %s already exists, overwriting it', dir_to_create
             )
         else:
             msg = 'Error: "{}" directory already exists'.format(dir_to_create)
@@ -243,8 +241,8 @@ def _run_hook_from_repo_dir(repo_dir, hook_name, project_dir, context,
             if delete_project_on_failure:
                 rmtree(project_dir)
             logger.error(
-                "Stopping generation because {} hook "
-                "script didn't exit successfully".format(hook_name)
+                "Stopping generation because %s hook "
+                "script didn't exit successfully", hook_name
             )
             raise
 
@@ -260,7 +258,7 @@ def generate_files(repo_dir, context=None, output_dir='.',
         if it exists.
     """
     template_dir = find_template(repo_dir)
-    logger.debug('Generating project from {}...'.format(template_dir))
+    logger.debug('Generating project from %s...', template_dir)
     context = context or OrderedDict([])
 
     unrendered_dir = os.path.split(template_dir)[1]
@@ -289,7 +287,7 @@ def generate_files(repo_dir, context=None, output_dir='.',
     # absolute path for the target folder (project_dir)
 
     project_dir = os.path.abspath(project_dir)
-    logger.debug('Project directory is {}'.format(project_dir))
+    logger.debug('Project directory is %s', project_dir)
 
     # if we created the output directory, then it's ok to remove it
     # if rendering fails
@@ -327,8 +325,7 @@ def generate_files(repo_dir, context=None, output_dir='.',
                 indir = os.path.normpath(os.path.join(root, copy_dir))
                 outdir = os.path.normpath(os.path.join(project_dir, indir))
                 logger.debug(
-                    'Copying dir {} to {} without rendering'
-                    ''.format(indir, outdir)
+                    'Copying dir %s to %s without rendering', indir, outdir
                 )
                 shutil.copytree(indir, outdir)
 
@@ -359,8 +356,7 @@ def generate_files(repo_dir, context=None, output_dir='.',
                     outfile_rendered = outfile_tmpl.render(**context)
                     outfile = os.path.join(project_dir, outfile_rendered)
                     logger.debug(
-                        'Copying file {} to {} without rendering'
-                        ''.format(infile, outfile)
+                        'Copying file %s to %s without rendering', infile, outfile
                     )
                     shutil.copyfile(infile, outfile)
                     shutil.copymode(infile, outfile)
diff --git a/cookiecutter/hooks.py b/cookiecutter/hooks.py
index 60cb68d..2f58a13 100644
--- a/cookiecutter/hooks.py
+++ b/cookiecutter/hooks.py
@@ -52,10 +52,10 @@ def find_hook(hook_name, hooks_dir='hooks'):
     :param hooks_dir: The hook directory in the template
     :return: The absolute path to the hook script or None
     """
-    logger.debug('hooks_dir is {}'.format(os.path.abspath(hooks_dir)))
+    logger.debug('hooks_dir is %s', os.path.abspath(hooks_dir))
 
     if not os.path.isdir(hooks_dir):
-        logger.debug('No hooks/ dir in template_dir')
+        logger.debug('No hooks/dir in template_dir')
         return None
 
     for hook_file in os.listdir(hooks_dir):
@@ -139,7 +139,7 @@ def run_hook(hook_name, project_dir, context):
     """
     script = find_hook(hook_name)
     if script is None:
-        logger.debug('No {} hook found'.format(hook_name))
+        logger.debug('No %s hook found', hook_name)
         return
-    logger.debug('Running hook {}'.format(hook_name))
+    logger.debug('Running hook %s', hook_name)
     run_script_with_context(script, project_dir, context)
diff --git a/cookiecutter/main.py b/cookiecutter/main.py
index 724d91d..d1e904c 100644
--- a/cookiecutter/main.py
+++ b/cookiecutter/main.py
@@ -72,7 +72,7 @@ def cookiecutter(
         context = load(config_dict['replay_dir'], template_name)
     else:
         context_file = os.path.join(repo_dir, 'cookiecutter.json')
-        logger.debug('context_file is {}'.format(context_file))
+        logger.debug('context_file is %s', context_file)
 
         context = generate_context(
             context_file=context_file,
diff --git a/cookiecutter/utils.py b/cookiecutter/utils.py
index 7a8461a..459f1a8 100644
--- a/cookiecutter/utils.py
+++ b/cookiecutter/utils.py
@@ -39,10 +39,10 @@ def make_sure_path_exists(path):
 
     :param path: A directory path.
     """
-    logger.debug('Making sure path exists: {}'.format(path))
+    logger.debug('Making sure path exists: %s', path)
     try:
         os.makedirs(path)
-        logger.debug('Created directory at: {}'.format(path))
+        logger.debug('Created directory at: %s', path)
     except OSError as exception:
         if exception.errno != errno.EEXIST:
             return False
diff --git a/cookiecutter/vcs.py b/cookiecutter/vcs.py
index ad402f6..5eb9b3c 100644
--- a/cookiecutter/vcs.py
+++ b/cookiecutter/vcs.py
@@ -87,7 +87,7 @@ def clone(repo_url, checkout=None, clone_to_dir='.', no_input=False):
                                                  tail.rsplit('.git')[0]))
     elif repo_type == 'hg':
         repo_dir = os.path.normpath(os.path.join(clone_to_dir, tail))
-    logger.debug('repo_dir is {0}'.format(repo_dir))
+    logger.debug('repo_dir is %s', repo_dir)
 
     if os.path.isdir(repo_dir):
         clone = prompt_and_delete(repo_dir, no_input=no_input)
