commit 5671b4310dbf2fd9cc8eef34ca6f6cb0deb06a41
Author: Sorin Sbarnea <ssbarnea@users.noreply.github.com>
Date:   Sun Apr 19 18:56:58 2020 +0100

    Added: Black formatting verification for whole project
    
    * Enable black formatting
    
    * Fixid commas #1368
    
    Co-authored-by: Andrey Shpak <ashpak@ashpak.ru>

diff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml
index 4e4763b..2842a9d 100644
--- a/.pre-commit-config.yaml
+++ b/.pre-commit-config.yaml
@@ -1,5 +1,11 @@
 ---
 repos:
+  - repo: https://github.com/python/black.git
+    rev: 19.10b0
+    hooks:
+      - id: black
+        language_version: python3
+        exclude: ^(tests\/hooks-abort-render\/hooks|docs\/HelloCookieCutter1)
   - repo: https://github.com/pre-commit/pre-commit-hooks
     rev: v2.4.0
     hooks:
diff --git a/cookiecutter/cli.py b/cookiecutter/cli.py
index e034a69..1896653 100644
--- a/cookiecutter/cli.py
+++ b/cookiecutter/cli.py
@@ -20,7 +20,7 @@ from cookiecutter.exceptions import (
     UnknownExtension,
     InvalidZipRepository,
     RepositoryNotFound,
-    RepositoryCloneFailed
+    RepositoryCloneFailed,
 )
 
 
@@ -51,57 +51,77 @@ def validate_extra_context(ctx, param, value):
 @click.argument(u'template')
 @click.argument(u'extra_context', nargs=-1, callback=validate_extra_context)
 @click.option(
-    u'--no-input', is_flag=True,
+    u'--no-input',
+    is_flag=True,
     help=u'Do not prompt for parameters and only use cookiecutter.json '
-         u'file content',
+    u'file content',
 )
 @click.option(
-    u'-c', u'--checkout',
-    help=u'branch, tag or commit to checkout after git clone',
+    u'-c', u'--checkout', help=u'branch, tag or commit to checkout after git clone',
 )
 @click.option(
     u'--directory',
     help=u'Directory within repo that holds cookiecutter.json file '
-         u'for advanced repositories with multi templates in it',
+    u'for advanced repositories with multi templates in it',
 )
 @click.option(
-    '-v', '--verbose',
-    is_flag=True, help='Print debug information', default=False
+    '-v', '--verbose', is_flag=True, help='Print debug information', default=False
 )
 @click.option(
-    u'--replay', is_flag=True,
+    u'--replay',
+    is_flag=True,
     help=u'Do not prompt for parameters and only use information entered '
-         u'previously',
+    u'previously',
 )
 @click.option(
-    u'-f', u'--overwrite-if-exists', is_flag=True,
-    help=u'Overwrite the contents of the output directory if it already exists'
+    u'-f',
+    u'--overwrite-if-exists',
+    is_flag=True,
+    help=u'Overwrite the contents of the output directory if it already exists',
 )
 @click.option(
-    u'-s', u'--skip-if-file-exists', is_flag=True,
-    help=u'Skip the files in the corresponding directories if they already '
-         u'exist', default=False
+    u'-s',
+    u'--skip-if-file-exists',
+    is_flag=True,
+    help=u'Skip the files in the corresponding directories if they already ' u'exist',
+    default=False,
 )
 @click.option(
-    u'-o', u'--output-dir', default='.', type=click.Path(),
-    help=u'Where to output the generated project dir into'
+    u'-o',
+    u'--output-dir',
+    default='.',
+    type=click.Path(),
+    help=u'Where to output the generated project dir into',
 )
 @click.option(
-    u'--config-file', type=click.Path(), default=None,
-    help=u'User configuration file'
+    u'--config-file', type=click.Path(), default=None, help=u'User configuration file'
 )
 @click.option(
-    u'--default-config', is_flag=True,
-    help=u'Do not load a config file. Use the defaults instead'
+    u'--default-config',
+    is_flag=True,
+    help=u'Do not load a config file. Use the defaults instead',
 )
 @click.option(
-    u'--debug-file', type=click.Path(), default=None,
+    u'--debug-file',
+    type=click.Path(),
+    default=None,
     help=u'File to be used as a stream for DEBUG logging',
 )
 def main(
-        template, extra_context, no_input, checkout, verbose,
-        replay, overwrite_if_exists, output_dir, config_file,
-        default_config, debug_file, directory, skip_if_file_exists):
+    template,
+    extra_context,
+    no_input,
+    checkout,
+    verbose,
+    replay,
+    overwrite_if_exists,
+    output_dir,
+    config_file,
+    default_config,
+    debug_file,
+    directory,
+    skip_if_file_exists,
+):
     """Create a project from a Cookiecutter project template (TEMPLATE).
 
     Cookiecutter is free and open source software, developed and managed by
@@ -114,14 +134,13 @@ def main(
         click.echo(click.get_current_context().get_help())
         sys.exit(0)
 
-    configure_logger(
-        stream_level='DEBUG' if verbose else 'INFO',
-        debug_file=debug_file,
-    )
+    configure_logger(stream_level='DEBUG' if verbose else 'INFO', debug_file=debug_file)
 
     try:
         cookiecutter(
-            template, checkout, no_input,
+            template,
+            checkout,
+            no_input,
             extra_context=extra_context,
             replay=replay,
             overwrite_if_exists=overwrite_if_exists,
@@ -130,26 +149,24 @@ def main(
             default_config=default_config,
             password=os.environ.get('COOKIECUTTER_REPO_PASSWORD'),
             directory=directory,
-            skip_if_file_exists=skip_if_file_exists
+            skip_if_file_exists=skip_if_file_exists,
         )
-    except (OutputDirExistsException,
-            InvalidModeException,
-            FailedHookException,
-            UnknownExtension,
-            InvalidZipRepository,
-            RepositoryNotFound,
-            RepositoryCloneFailed) as e:
+    except (
+        OutputDirExistsException,
+        InvalidModeException,
+        FailedHookException,
+        UnknownExtension,
+        InvalidZipRepository,
+        RepositoryNotFound,
+        RepositoryCloneFailed,
+    ) as e:
         click.echo(e)
         sys.exit(1)
     except UndefinedVariableInTemplate as undefined_err:
         click.echo('{}'.format(undefined_err.message))
         click.echo('Error message: {}'.format(undefined_err.error.message))
 
-        context_str = json.dumps(
-            undefined_err.context,
-            indent=4,
-            sort_keys=True
-        )
+        context_str = json.dumps(undefined_err.context, indent=4, sort_keys=True)
         click.echo('Context: {}'.format(context_str))
         sys.exit(1)
 
diff --git a/cookiecutter/config.py b/cookiecutter/config.py
index da02067..8f6f710 100644
--- a/cookiecutter/config.py
+++ b/cookiecutter/config.py
@@ -72,8 +72,7 @@ def get_config(config_path):
             yaml_dict = poyo.parse_string(file_handle.read())
         except poyo.exceptions.PoyoException as e:
             raise InvalidConfiguration(
-                'Unable to parse YAML file {}. Error: {}'
-                ''.format(config_path, e)
+                'Unable to parse YAML file {}. Error: {}' ''.format(config_path, e)
             )
 
     config_dict = merge_configs(DEFAULT_CONFIG, yaml_dict)
diff --git a/cookiecutter/environment.py b/cookiecutter/environment.py
index cc36a86..ac5fcaf 100644
--- a/cookiecutter/environment.py
+++ b/cookiecutter/environment.py
@@ -34,10 +34,7 @@ class ExtensionLoaderMixin(object):
         extensions = default_extensions + self._read_extensions(context)
 
         try:
-            super(ExtensionLoaderMixin, self).__init__(
-                extensions=extensions,
-                **kwargs
-            )
+            super(ExtensionLoaderMixin, self).__init__(extensions=extensions, **kwargs)
         except ImportError as err:
             raise UnknownExtension('Unable to load extension: {}'.format(err))
 
@@ -67,7 +64,4 @@ class StrictEnvironment(ExtensionLoaderMixin, Environment):
 
         Also loading extensions defined in cookiecutter.json's _extensions key.
         """
-        super(StrictEnvironment, self).__init__(
-            undefined=StrictUndefined,
-            **kwargs
-        )
+        super(StrictEnvironment, self).__init__(undefined=StrictUndefined, **kwargs)
diff --git a/cookiecutter/exceptions.py b/cookiecutter/exceptions.py
index 2f5ca75..cd0864f 100644
--- a/cookiecutter/exceptions.py
+++ b/cookiecutter/exceptions.py
@@ -27,6 +27,7 @@ class UnknownTemplateDirException(CookiecutterException):
     Raised when Cookiecutter cannot determine which directory is the project
     template, e.g. more than one dir appears to be a template dir.
     """
+
     # unused locally
 
 
@@ -37,6 +38,7 @@ class MissingProjectDir(CookiecutterException):
     Raised during cleanup when remove_repo() can't find a generated project
     directory inside of a repo.
     """
+
     # unused locally
 
 
diff --git a/cookiecutter/extensions.py b/cookiecutter/extensions.py
index 471ab60..b3506de 100644
--- a/cookiecutter/extensions.py
+++ b/cookiecutter/extensions.py
@@ -4,6 +4,7 @@
 
 import json
 import string
+
 try:
     # Python 3.6 and above
     from secrets import choice
@@ -40,6 +41,7 @@ class RandomStringExtension(Extension):
             else:
                 corpus = string.ascii_letters
             return "".join(choice(corpus) for _ in range(length))
+
         environment.globals.update(random_ascii_string=random_ascii_string)
 
 
diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 72682a8..6b2992a 100644
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -21,7 +21,7 @@ from cookiecutter.exceptions import (
     ContextDecodingException,
     FailedHookException,
     OutputDirExistsException,
-    UndefinedVariableInTemplate
+    UndefinedVariableInTemplate,
 )
 from cookiecutter.find import find_template
 from cookiecutter.hooks import run_hook
@@ -72,8 +72,9 @@ def apply_overwrites_to_context(context, overwrite_context):
             context[variable] = overwrite
 
 
-def generate_context(context_file='cookiecutter.json', default_context=None,
-                     extra_context=None):
+def generate_context(
+    context_file='cookiecutter.json', default_context=None, extra_context=None
+):
     """Generate the context for a Cookiecutter project template.
 
     Loads the JSON file as a Python object, with key being the JSON filename.
@@ -95,7 +96,8 @@ def generate_context(context_file='cookiecutter.json', default_context=None,
         json_exc_message = str(e)
         our_exc_message = (
             'JSON decoding error while loading "{0}".  Decoding'
-            ' error details: "{1}"'.format(full_fpath, json_exc_message))
+            ' error details: "{1}"'.format(full_fpath, json_exc_message)
+        )
         raise ContextDecodingException(our_exc_message)
 
     # Add the Python object to the context dictionary
@@ -114,8 +116,7 @@ def generate_context(context_file='cookiecutter.json', default_context=None,
     return context
 
 
-def generate_file(project_dir, infile, context, env,
-                  skip_if_file_exists=False):
+def generate_file(project_dir, infile, context, env, skip_if_file_exists=False):
     """Render filename of infile as name of outfile, handle infile correctly.
 
     Dealing with infile appropriately:
@@ -156,9 +157,7 @@ def generate_file(project_dir, infile, context, env,
     # Just copy over binary files. Don't render.
     logger.debug("Check %s to see if it's a binary", infile)
     if is_binary(infile):
-        logger.debug(
-            'Copying binary %s to %s without rendering', infile, outfile
-        )
+        logger.debug('Copying binary %s to %s without rendering', infile, outfile)
         shutil.copyfile(infile, outfile)
     else:
         # Force fwd slashes on Windows for get_template
@@ -184,20 +183,18 @@ def generate_file(project_dir, infile, context, env,
     shutil.copymode(infile, outfile)
 
 
-def render_and_create_dir(dirname, context, output_dir, environment,
-                          overwrite_if_exists=False):
+def render_and_create_dir(
+    dirname, context, output_dir, environment, overwrite_if_exists=False
+):
     """Render name of a directory, create the directory, return its path."""
     name_tmpl = environment.from_string(dirname)
     rendered_dirname = name_tmpl.render(**context)
 
-    dir_to_create = os.path.normpath(
-        os.path.join(output_dir, rendered_dirname)
-    )
+    dir_to_create = os.path.normpath(os.path.join(output_dir, rendered_dirname))
 
-    logger.debug('Rendered dir %s must exist in output_dir %s',
-                 dir_to_create,
-                 output_dir
-                 )
+    logger.debug(
+        'Rendered dir %s must exist in output_dir %s', dir_to_create, output_dir
+    )
 
     output_dir_exists = os.path.exists(dir_to_create)
 
@@ -223,8 +220,9 @@ def ensure_dir_is_templated(dirname):
         raise NonTemplatedInputDirException
 
 
-def _run_hook_from_repo_dir(repo_dir, hook_name, project_dir, context,
-                            delete_project_on_failure):
+def _run_hook_from_repo_dir(
+    repo_dir, hook_name, project_dir, context, delete_project_on_failure
+):
     """Run hook from repo directory, clean project directory if hook fails.
 
     :param repo_dir: Project template input directory.
@@ -242,13 +240,19 @@ def _run_hook_from_repo_dir(repo_dir, hook_name, project_dir, context,
                 rmtree(project_dir)
             logger.error(
                 "Stopping generation because %s hook "
-                "script didn't exit successfully", hook_name
+                "script didn't exit successfully",
+                hook_name,
             )
             raise
 
 
-def generate_files(repo_dir, context=None, output_dir='.',
-                   overwrite_if_exists=False, skip_if_file_exists=False):
+def generate_files(
+    repo_dir,
+    context=None,
+    output_dir='.',
+    overwrite_if_exists=False,
+    skip_if_file_exists=False,
+):
     """Render the templates and saves them to files.
 
     :param repo_dir: Project template input directory.
@@ -263,17 +267,10 @@ def generate_files(repo_dir, context=None, output_dir='.',
 
     unrendered_dir = os.path.split(template_dir)[1]
     ensure_dir_is_templated(unrendered_dir)
-    env = StrictEnvironment(
-        context=context,
-        keep_trailing_newline=True,
-    )
+    env = StrictEnvironment(context=context, keep_trailing_newline=True)
     try:
         project_dir, output_directory_created = render_and_create_dir(
-            unrendered_dir,
-            context,
-            output_dir,
-            env,
-            overwrite_if_exists
+            unrendered_dir, context, output_dir, env, overwrite_if_exists
         )
     except UndefinedError as err:
         msg = "Unable to create project directory '{}'".format(unrendered_dir)
@@ -294,11 +291,7 @@ def generate_files(repo_dir, context=None, output_dir='.',
     delete_project_on_failure = output_directory_created
 
     _run_hook_from_repo_dir(
-        repo_dir,
-        'pre_gen_project',
-        project_dir,
-        context,
-        delete_project_on_failure
+        repo_dir, 'pre_gen_project', project_dir, context, delete_project_on_failure
     )
 
     with work_in(template_dir):
@@ -324,9 +317,7 @@ def generate_files(repo_dir, context=None, output_dir='.',
             for copy_dir in copy_dirs:
                 indir = os.path.normpath(os.path.join(root, copy_dir))
                 outdir = os.path.normpath(os.path.join(project_dir, indir))
-                logger.debug(
-                    'Copying dir %s to %s without rendering', indir, outdir
-                )
+                logger.debug('Copying dir %s to %s without rendering', indir, outdir)
                 shutil.copytree(indir, outdir)
 
             # We mutate ``dirs``, because we only want to go through these dirs
@@ -336,11 +327,7 @@ def generate_files(repo_dir, context=None, output_dir='.',
                 unrendered_dir = os.path.join(project_dir, root, d)
                 try:
                     render_and_create_dir(
-                        unrendered_dir,
-                        context,
-                        output_dir,
-                        env,
-                        overwrite_if_exists
+                        unrendered_dir, context, output_dir, env, overwrite_if_exists
                     )
                 except UndefinedError as err:
                     if delete_project_on_failure:
@@ -362,8 +349,9 @@ def generate_files(repo_dir, context=None, output_dir='.',
                     shutil.copymode(infile, outfile)
                     continue
                 try:
-                    generate_file(project_dir, infile, context, env,
-                                  skip_if_file_exists)
+                    generate_file(
+                        project_dir, infile, context, env, skip_if_file_exists
+                    )
                 except UndefinedError as err:
                     if delete_project_on_failure:
                         rmtree(project_dir)
@@ -371,11 +359,7 @@ def generate_files(repo_dir, context=None, output_dir='.',
                     raise UndefinedVariableInTemplate(msg, err, context)
 
     _run_hook_from_repo_dir(
-        repo_dir,
-        'post_gen_project',
-        project_dir,
-        context,
-        delete_project_on_failure
+        repo_dir, 'post_gen_project', project_dir, context, delete_project_on_failure
     )
 
     return project_dir
diff --git a/cookiecutter/hooks.py b/cookiecutter/hooks.py
index 2f58a13..08ad763 100644
--- a/cookiecutter/hooks.py
+++ b/cookiecutter/hooks.py
@@ -80,11 +80,7 @@ def run_script(script_path, cwd='.'):
     utils.make_executable(script_path)
 
     try:
-        proc = subprocess.Popen(
-            script_command,
-            shell=run_thru_shell,
-            cwd=cwd
-        )
+        proc = subprocess.Popen(script_command, shell=run_thru_shell, cwd=cwd)
         exit_status = proc.wait()
         if exit_status != EXIT_SUCCESS:
             raise FailedHookException(
@@ -93,12 +89,9 @@ def run_script(script_path, cwd='.'):
     except OSError as os_error:
         if os_error.errno == errno.ENOEXEC:
             raise FailedHookException(
-                'Hook script failed, might be an '
-                'empty file or missing a shebang'
+                'Hook script failed, might be an ' 'empty file or missing a shebang'
             )
-        raise FailedHookException(
-            'Hook script failed (error: {})'.format(os_error)
-        )
+        raise FailedHookException('Hook script failed (error: {})'.format(os_error))
 
 
 def run_script_with_context(script_path, cwd, context):
@@ -113,15 +106,8 @@ def run_script_with_context(script_path, cwd, context):
     with io.open(script_path, 'r', encoding='utf-8') as file:
         contents = file.read()
 
-    with tempfile.NamedTemporaryFile(
-        delete=False,
-        mode='wb',
-        suffix=extension
-    ) as temp:
-        env = StrictEnvironment(
-            context=context,
-            keep_trailing_newline=True,
-        )
+    with tempfile.NamedTemporaryFile(delete=False, mode='wb', suffix=extension) as temp:
+        env = StrictEnvironment(context=context, keep_trailing_newline=True)
         template = env.from_string(contents)
         output = template.render(**context)
         temp.write(output.encode('utf-8'))
diff --git a/cookiecutter/main.py b/cookiecutter/main.py
index d1e904c..840dfee 100644
--- a/cookiecutter/main.py
+++ b/cookiecutter/main.py
@@ -23,10 +23,19 @@ logger = logging.getLogger(__name__)
 
 
 def cookiecutter(
-        template, checkout=None, no_input=False, extra_context=None,
-        replay=False, overwrite_if_exists=False, output_dir='.',
-        config_file=None, default_config=False, password=None, directory=None,
-        skip_if_file_exists=False):
+    template,
+    checkout=None,
+    no_input=False,
+    extra_context=None,
+    replay=False,
+    overwrite_if_exists=False,
+    output_dir='.',
+    config_file=None,
+    default_config=False,
+    password=None,
+    directory=None,
+    skip_if_file_exists=False,
+):
     """
     Run Cookiecutter just as if using it from the command line.
 
@@ -52,8 +61,7 @@ def cookiecutter(
         raise InvalidModeException(err_msg)
 
     config_dict = get_user_config(
-        config_file=config_file,
-        default_config=default_config,
+        config_file=config_file, default_config=default_config,
     )
 
     repo_dir, cleanup = determine_repo_dir(
@@ -63,7 +71,7 @@ def cookiecutter(
         checkout=checkout,
         no_input=no_input,
         password=password,
-        directory=directory
+        directory=directory,
     )
 
     template_name = os.path.basename(os.path.abspath(repo_dir))
@@ -95,7 +103,7 @@ def cookiecutter(
         context=context,
         overwrite_if_exists=overwrite_if_exists,
         skip_if_file_exists=skip_if_file_exists,
-        output_dir=output_dir
+        output_dir=output_dir,
     )
 
     # Cleanup (if required)
diff --git a/cookiecutter/prompt.py b/cookiecutter/prompt.py
index 69d0189..d7d9d24 100644
--- a/cookiecutter/prompt.py
+++ b/cookiecutter/prompt.py
@@ -34,11 +34,7 @@ def read_user_yes_no(question, default_value):
     :param default_value: Value that will be returned if no input happens
     """
     # Please see https://click.palletsprojects.com/en/7.x/api/#click.prompt
-    return click.prompt(
-        question,
-        default=default_value,
-        type=click.BOOL
-    )
+    return click.prompt(question, default=default_value, type=click.BOOL)
 
 
 def read_repo_password(question):
@@ -73,11 +69,13 @@ def read_user_choice(var_name, options):
     default = u'1'
 
     choice_lines = [u'{} - {}'.format(*c) for c in choice_map.items()]
-    prompt = u'\n'.join((
-        u'Select {}:'.format(var_name),
-        u'\n'.join(choice_lines),
-        u'Choose from {}'.format(u', '.join(choices))
-    ))
+    prompt = u'\n'.join(
+        (
+            u'Select {}:'.format(var_name),
+            u'\n'.join(choice_lines),
+            u'Choose from {}'.format(u', '.join(choices)),
+        )
+    )
 
     user_choice = click.prompt(
         prompt, type=click.Choice(choices), default=default, show_choices=False
@@ -91,10 +89,7 @@ def process_json(user_value):
     :param str user_value: User-supplied value to load as a JSON dict
     """
     try:
-        user_dict = json.loads(
-            user_value,
-            object_pairs_hook=OrderedDict,
-        )
+        user_dict = json.loads(user_value, object_pairs_hook=OrderedDict)
     except Exception:
         # Leave it up to click to ask the user again
         raise click.UsageError('Unable to decode to JSON.')
@@ -120,10 +115,7 @@ def read_user_dict(var_name, default_value):
     default_display = 'default'
 
     user_value = click.prompt(
-        var_name,
-        default=default_display,
-        type=click.STRING,
-        value_proc=process_json,
+        var_name, default=default_display, type=click.STRING, value_proc=process_json
     )
 
     if user_value == default_display:
@@ -153,15 +145,13 @@ def render_variable(env, raw, cookiecutter_dict):
         return None
     elif isinstance(raw, dict):
         return {
-            render_variable(env, k, cookiecutter_dict):
-                render_variable(env, v, cookiecutter_dict)
+            render_variable(env, k, cookiecutter_dict): render_variable(
+                env, v, cookiecutter_dict
+            )
             for k, v in raw.items()
         }
     elif isinstance(raw, list):
-        return [
-            render_variable(env, v, cookiecutter_dict)
-            for v in raw
-        ]
+        return [render_variable(env, v, cookiecutter_dict) for v in raw]
     elif not isinstance(raw, six.string_types):
         raw = str(raw)
 
@@ -176,9 +166,7 @@ def prompt_choice_for_config(cookiecutter_dict, env, key, options, no_input):
 
     Each of the possible choices is rendered beforehand.
     """
-    rendered_options = [
-        render_variable(env, raw, cookiecutter_dict) for raw in options
-    ]
+    rendered_options = [render_variable(env, raw, cookiecutter_dict) for raw in options]
 
     if no_input:
         return rendered_options[0]
diff --git a/cookiecutter/repository.py b/cookiecutter/repository.py
index badb97c..490b172 100644
--- a/cookiecutter/repository.py
+++ b/cookiecutter/repository.py
@@ -10,13 +10,16 @@ from cookiecutter.exceptions import RepositoryNotFound
 from cookiecutter.vcs import clone
 from cookiecutter.zipfile import unzip
 
-REPO_REGEX = re.compile(r"""
+REPO_REGEX = re.compile(
+    r"""
 # something like git:// ssh:// file:// etc.
 ((((git|hg)\+)?(git|ssh|file|https?):(//)?)
  |                                      # or
  (\w+@[\w\.]+)                          # something like user@...
 )
-""", re.VERBOSE)
+""",
+    re.VERBOSE,
+)
 
 
 def is_repo_url(value):
@@ -61,8 +64,15 @@ def repository_has_cookiecutter_json(repo_directory):
     return repo_directory_exists and repo_config_exists
 
 
-def determine_repo_dir(template, abbreviations, clone_to_dir, checkout,
-                       no_input, password=None, directory=None):
+def determine_repo_dir(
+    template,
+    abbreviations,
+    clone_to_dir,
+    checkout,
+    no_input,
+    password=None,
+    directory=None,
+):
     """
     Locate the repository directory from a template reference.
 
@@ -92,7 +102,7 @@ def determine_repo_dir(template, abbreviations, clone_to_dir, checkout,
             is_url=is_repo_url(template),
             clone_to_dir=clone_to_dir,
             no_input=no_input,
-            password=password
+            password=password,
         )
         repository_candidates = [unzipped_dir]
         cleanup = True
@@ -106,15 +116,13 @@ def determine_repo_dir(template, abbreviations, clone_to_dir, checkout,
         repository_candidates = [cloned_repo]
         cleanup = False
     else:
-        repository_candidates = [
-            template,
-            os.path.join(clone_to_dir, template)
-        ]
+        repository_candidates = [template, os.path.join(clone_to_dir, template)]
         cleanup = False
 
     if directory:
-        repository_candidates = [os.path.join(s, directory)
-                                 for s in repository_candidates]
+        repository_candidates = [
+            os.path.join(s, directory) for s in repository_candidates
+        ]
 
     for repo_candidate in repository_candidates:
         if repository_has_cookiecutter_json(repo_candidate):
@@ -122,8 +130,5 @@ def determine_repo_dir(template, abbreviations, clone_to_dir, checkout,
 
     raise RepositoryNotFound(
         'A valid repository for "{}" could not be found in the following '
-        'locations:\n{}'.format(
-            template,
-            '\n'.join(repository_candidates)
-        )
+        'locations:\n{}'.format(template, '\n'.join(repository_candidates))
     )
diff --git a/cookiecutter/utils.py b/cookiecutter/utils.py
index 459f1a8..e3ee45d 100644
--- a/cookiecutter/utils.py
+++ b/cookiecutter/utils.py
@@ -89,8 +89,7 @@ def prompt_and_delete(path, no_input=False):
         ok_to_delete = True
     else:
         question = (
-            "You've downloaded {} before. "
-            "Is it okay to delete and re-download it?"
+            "You've downloaded {} before. " "Is it okay to delete and re-download it?"
         ).format(path)
 
         ok_to_delete = read_user_yes_no(question, 'yes')
diff --git a/cookiecutter/vcs.py b/cookiecutter/vcs.py
index 5eb9b3c..ee4feea 100644
--- a/cookiecutter/vcs.py
+++ b/cookiecutter/vcs.py
@@ -13,7 +13,10 @@ except ImportError:
     from whichcraft import which
 
 from cookiecutter.exceptions import (
-    RepositoryNotFound, RepositoryCloneFailed, UnknownRepoType, VCSNotInstalled
+    RepositoryNotFound,
+    RepositoryCloneFailed,
+    UnknownRepoType,
+    VCSNotInstalled,
 )
 from cookiecutter.utils import make_sure_path_exists, prompt_and_delete
 
@@ -83,8 +86,7 @@ def clone(repo_url, checkout=None, clone_to_dir='.', no_input=False):
     repo_url = repo_url.rstrip('/')
     tail = os.path.split(repo_url)[1]
     if repo_type == 'git':
-        repo_dir = os.path.normpath(os.path.join(clone_to_dir,
-                                                 tail.rsplit('.git')[0]))
+        repo_dir = os.path.normpath(os.path.join(clone_to_dir, tail.rsplit('.git')[0]))
     elif repo_type == 'hg':
         repo_dir = os.path.normpath(os.path.join(clone_to_dir, tail))
     logger.debug('repo_dir is %s', repo_dir)
diff --git a/cookiecutter/zipfile.py b/cookiecutter/zipfile.py
index 9924cc3..17db005 100644
--- a/cookiecutter/zipfile.py
+++ b/cookiecutter/zipfile.py
@@ -64,9 +64,7 @@ def unzip(zip_uri, is_url, clone_to_dir='.', no_input=False, password=None):
         zip_file = ZipFile(zip_path)
 
         if len(zip_file.namelist()) == 0:
-            raise InvalidZipRepository(
-                'Zip repository {} is empty'.format(zip_uri)
-            )
+            raise InvalidZipRepository('Zip repository {} is empty'.format(zip_uri))
 
         # The first record in the zipfile should be the directory entry for
         # the archive. If it isn't a directory, there's a problem.
@@ -90,10 +88,7 @@ def unzip(zip_uri, is_url, clone_to_dir='.', no_input=False, password=None):
             # environment; if that doesn't work, ask the user.
             if password is not None:
                 try:
-                    zip_file.extractall(
-                        path=unzip_base,
-                        pwd=password.encode('utf-8')
-                    )
+                    zip_file.extractall(path=unzip_base, pwd=password.encode('utf-8'))
                 except RuntimeError:
                     raise InvalidZipRepository(
                         'Invalid password provided for protected repository'
@@ -108,16 +103,14 @@ def unzip(zip_uri, is_url, clone_to_dir='.', no_input=False, password=None):
                     try:
                         password = read_repo_password('Repo password')
                         zip_file.extractall(
-                            path=unzip_base,
-                            pwd=password.encode('utf-8')
+                            path=unzip_base, pwd=password.encode('utf-8')
                         )
                         retry = None
                     except RuntimeError:
                         retry += 1
                         if retry == 3:
                             raise InvalidZipRepository(
-                                'Invalid password provided '
-                                'for protected repository'
+                                'Invalid password provided ' 'for protected repository'
                             )
 
     except BadZipFile:
diff --git a/docs/ccext.py b/docs/ccext.py
index a394b2d..2c8dfbe 100644
--- a/docs/ccext.py
+++ b/docs/ccext.py
@@ -21,7 +21,7 @@ class CcCommandLineOptions(rst.Directive):
             ".. option:: " + ", ".join(option.opts),
             "",
             option.help,
-            ""
+            "",
         ]
 
     def process_actions(self):
diff --git a/docs/conf.py b/docs/conf.py
index 7a2ed0c..ea89aab 100644
--- a/docs/conf.py
+++ b/docs/conf.py
@@ -30,6 +30,7 @@ import sys
 
 # flake8: noqa D107,D105
 
+
 class Mock(object):
     def __init__(self, *args, **kwargs):
         pass
@@ -79,17 +80,14 @@ extensions = [
     'sphinx.ext.ifconfig',
     'sphinx.ext.viewcode',
     'docs.ccext',
-    'recommonmark'
+    'recommonmark',
 ]
 
 # Add any paths that contain templates here, relative to this directory.
 templates_path = ['_templates']
 
 # The suffix of source filenames.
-source_suffix = {
-    '.rst': 'restructuredtext',
-    '.md': 'markdown',
-}
+source_suffix = {'.rst': 'restructuredtext', '.md': 'markdown'}
 
 # The encoding of source files.
 # source_encoding = 'utf-8-sig'
@@ -235,10 +233,8 @@ htmlhelp_basename = 'cookiecutterdoc'
 latex_elements = {
     # The paper size ('letterpaper' or 'a4paper').
     # 'papersize': 'letterpaper',
-
     # The font size ('10pt', '11pt' or '12pt').
     # 'pointsize': '10pt',
-
     # Additional stuff for the LaTeX preamble.
     # 'preamble': '',
 }
@@ -246,8 +242,13 @@ latex_elements = {
 # Grouping the document tree into LaTeX files. List of tuples
 # (source start file, target name, title, author, documentclass [howto/manual])
 latex_documents = [
-    ('index', 'cookiecutter.tex', u'cookiecutter Documentation',
-     u'Audrey Roy and Cookiecutter community', 'manual'),
+    (
+        'index',
+        'cookiecutter.tex',
+        u'cookiecutter Documentation',
+        u'Audrey Roy and Cookiecutter community',
+        'manual',
+    ),
 ]
 
 # The name of an image file (relative to this directory) to place at the top of
@@ -276,8 +277,13 @@ latex_documents = [
 # One entry per manual page. List of tuples
 # (source start file, name, description, authors, manual section).
 man_pages = [
-    ('index', 'cookiecutter', u'cookiecutter Documentation',
-     [u'Audrey Roy and Cookiecutter community'], 1)
+    (
+        'index',
+        'cookiecutter',
+        u'cookiecutter Documentation',
+        [u'Audrey Roy and Cookiecutter community'],
+        1,
+    )
 ]
 
 # If true, show URL addresses after external links.
@@ -290,9 +296,15 @@ man_pages = [
 # (source start file, target name, title, author,
 #  dir menu entry, description, category)
 texinfo_documents = [
-    ('index', 'cookiecutter', u'cookiecutter Documentation',
-     u'Audrey Roy and Cookiecutter community', 'cookiecutter',
-     'Creates projects from project templates', 'Miscellaneous'),
+    (
+        'index',
+        'cookiecutter',
+        u'cookiecutter Documentation',
+        u'Audrey Roy and Cookiecutter community',
+        'cookiecutter',
+        'Creates projects from project templates',
+        'Miscellaneous',
+    ),
 ]
 
 # Documents to append as an appendix to all manuals.
diff --git a/pyproject.toml b/pyproject.toml
new file mode 100644
index 0000000..96b4483
--- /dev/null
+++ b/pyproject.toml
@@ -0,0 +1,5 @@
+[tool.black]
+skip-string-normalization = true
+exclude = '/(tests/hooks-abort-render/hooks|docs\/HelloCookieCutter1)/'
+line-length = 88
+target-version = ['py27']
diff --git a/setup.py b/setup.py
index c3c76b6..f620c4f 100644
--- a/setup.py
+++ b/setup.py
@@ -33,7 +33,7 @@ requirements = [
     'python-slugify>=4.0.0',
     'requests>=2.23.0',
     'six>=1.14',
-    'MarkupSafe<2.0.0'
+    'MarkupSafe<2.0.0',
 ]
 
 if sys.argv[-1] == 'readme':
@@ -44,29 +44,23 @@ if sys.argv[-1] == 'readme':
 setup(
     name='cookiecutter',
     version=version,
-    description=('A command-line utility that creates projects from project '
-                 'templates, e.g. creating a Python package project from a '
-                 'Python package project template.'),
+    description=(
+        'A command-line utility that creates projects from project '
+        'templates, e.g. creating a Python package project from a '
+        'Python package project template.'
+    ),
     long_description=readme,
     long_description_content_type='text/markdown',
     author='Audrey Roy',
     author_email='audreyr@gmail.com',
     url='https://github.com/cookiecutter/cookiecutter',
-    packages=[
-        'cookiecutter',
-    ],
+    packages=['cookiecutter'],
     package_dir={'cookiecutter': 'cookiecutter'},
-    entry_points={
-        'console_scripts': [
-            'cookiecutter = cookiecutter.__main__:main',
-        ]
-    },
+    entry_points={'console_scripts': ['cookiecutter = cookiecutter.__main__:main']},
     include_package_data=True,
     python_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*',
     install_requires=requirements,
-    extras_require={
-        ':python_version<"3.3"': ['whichcraft>=0.4.0'],
-    },
+    extras_require={':python_version<"3.3"': ['whichcraft>=0.4.0']},
     license='BSD',
     zip_safe=False,
     classifiers=[
diff --git a/tests/conftest.py b/tests/conftest.py
index fc9fcfb..1081846 100644
--- a/tests/conftest.py
+++ b/tests/conftest.py
@@ -90,9 +90,7 @@ def clean_system(request):
     """
     # If ~/.cookiecutterrc is pre-existing, move it to a temp location
     user_config_path = os.path.expanduser('~/.cookiecutterrc')
-    user_config_path_backup = os.path.expanduser(
-        '~/.cookiecutterrc.backup'
-    )
+    user_config_path_backup = os.path.expanduser('~/.cookiecutterrc.backup')
     if os.path.exists(user_config_path):
         user_config_found = True
         shutil.copy(user_config_path, user_config_path_backup)
@@ -104,16 +102,12 @@ def clean_system(request):
     # temp location
     cookiecutters_dir = os.path.expanduser('~/.cookiecutters')
     cookiecutters_dir_backup = os.path.expanduser('~/.cookiecutters.backup')
-    cookiecutters_dir_found = backup_dir(
-        cookiecutters_dir, cookiecutters_dir_backup
-    )
+    cookiecutters_dir_found = backup_dir(cookiecutters_dir, cookiecutters_dir_backup)
 
     # If the default cookiecutter_replay_dir is pre-existing, move it to a
     # temp location
     cookiecutter_replay_dir = os.path.expanduser('~/.cookiecutter_replay')
-    cookiecutter_replay_dir_backup = os.path.expanduser(
-        '~/.cookiecutter_replay.backup'
-    )
+    cookiecutter_replay_dir_backup = os.path.expanduser('~/.cookiecutter_replay.backup')
     cookiecutter_replay_dir_found = backup_dir(
         cookiecutter_replay_dir, cookiecutter_replay_dir_backup
     )
@@ -128,9 +122,7 @@ def clean_system(request):
         # Carefully delete the created ~/.cookiecutters dir only in certain
         # conditions.
         restore_backup_dir(
-            cookiecutters_dir,
-            cookiecutters_dir_backup,
-            cookiecutters_dir_found
+            cookiecutters_dir, cookiecutters_dir_backup, cookiecutters_dir_found
         )
 
         # Carefully delete the created ~/.cookiecutter_replay dir only in
@@ -138,7 +130,7 @@ def clean_system(request):
         restore_backup_dir(
             cookiecutter_replay_dir,
             cookiecutter_replay_dir_backup,
-            cookiecutter_replay_dir_found
+            cookiecutter_replay_dir_found,
         )
 
     request.addfinalizer(restore_backup)
diff --git a/tests/replay/test_dump.py b/tests/replay/test_dump.py
index 12e545c..ebb79ef 100644
--- a/tests/replay/test_dump.py
+++ b/tests/replay/test_dump.py
@@ -25,9 +25,11 @@ def replay_file(replay_test_dir, template_name):
 @pytest.fixture(autouse=True)
 def remove_replay_dump(request, replay_file):
     """Remove the replay file created by tests."""
+
     def fin_remove_replay_file():
         if os.path.exists(replay_file):
             os.remove(replay_file)
+
     request.addfinalizer(fin_remove_replay_file)
 
 
@@ -57,10 +59,7 @@ def mock_ensure_failure(mocker):
     Used to mock internal function and limit test scope.
     Always return expected value: False
     """
-    return mocker.patch(
-        'cookiecutter.replay.make_sure_path_exists',
-        return_value=False
-    )
+    return mocker.patch('cookiecutter.replay.make_sure_path_exists', return_value=False)
 
 
 @pytest.fixture
@@ -70,26 +69,26 @@ def mock_ensure_success(mocker):
     Used to mock internal function and limit test scope.
     Always return expected value: True
     """
-    return mocker.patch(
-        'cookiecutter.replay.make_sure_path_exists',
-        return_value=True
-    )
+    return mocker.patch('cookiecutter.replay.make_sure_path_exists', return_value=True)
 
 
-def test_ioerror_if_replay_dir_creation_fails(
-        mock_ensure_failure, replay_test_dir):
+def test_ioerror_if_replay_dir_creation_fails(mock_ensure_failure, replay_test_dir):
     """Test that replay.dump raises when the replay_dir cannot be created."""
     with pytest.raises(IOError):
-        replay.dump(
-            replay_test_dir,
-            'foo', {'cookiecutter': {'hello': 'world'}}
-        )
+        replay.dump(replay_test_dir, 'foo', {'cookiecutter': {'hello': 'world'}})
 
     mock_ensure_failure.assert_called_once_with(replay_test_dir)
 
 
-def test_run_json_dump(mocker, mock_ensure_success, mock_user_config,
-                       template_name, context, replay_test_dir, replay_file):
+def test_run_json_dump(
+    mocker,
+    mock_ensure_success,
+    mock_user_config,
+    template_name,
+    context,
+    replay_test_dir,
+    replay_file,
+):
     """Test that replay.dump runs json.dump under the hood and that the context \
     is correctly written to the expected file in the replay_dir."""
     spy_get_replay_file = mocker.spy(replay, 'get_file_name')
diff --git a/tests/replay/test_load.py b/tests/replay/test_load.py
index b44d80f..0ecbd0f 100644
--- a/tests/replay/test_load.py
+++ b/tests/replay/test_load.py
@@ -41,8 +41,9 @@ def test_io_error_if_no_replay_file(mocker, replay_test_dir):
         replay.load(replay_test_dir, 'no_replay')
 
 
-def test_run_json_load(mocker, mock_user_config, template_name,
-                       context, replay_test_dir, replay_file):
+def test_run_json_load(
+    mocker, mock_user_config, template_name, context, replay_test_dir, replay_file
+):
     """Test that replay.load runs json.load under the hood and that the context \
     is correctly loaded from the file in replay_dir."""
     spy_get_replay_file = mocker.spy(replay, 'get_file_name')
diff --git a/tests/replay/test_replay.py b/tests/replay/test_replay.py
index 8e9ce53..17e440c 100644
--- a/tests/replay/test_replay.py
+++ b/tests/replay/test_replay.py
@@ -15,9 +15,12 @@ def test_get_replay_file_name():
 
 
 @pytest.mark.parametrize(
-    'invalid_kwargs', ({'no_input': True},
-                       {'extra_context': {}},
-                       {'no_input': True, 'extra_context': {}},)
+    'invalid_kwargs',
+    (
+        {'no_input': True},
+        {'extra_context': {}},
+        {'no_input': True, 'extra_context': {}},
+    ),
 )
 def test_raise_on_invalid_mode(invalid_kwargs):
     """Test `cookiecutter` raise exception on unacceptable `replay` request."""
diff --git a/tests/repository/test_abbreviation_expansion.py b/tests/repository/test_abbreviation_expansion.py
index d039824..2a56b94 100644
--- a/tests/repository/test_abbreviation_expansion.py
+++ b/tests/repository/test_abbreviation_expansion.py
@@ -17,16 +17,23 @@ from cookiecutter.repository import expand_abbreviations
         ('xx:a', {'xx': '<{0}>'}, '<a>'),
         ('gh:a', {'gh': '<{0}>'}, '<a>'),
         ('xx:a', {'xx': '<>'}, '<>'),
-        ('gh:pydanny/cookiecutter-django',
-         BUILTIN_ABBREVIATIONS,
-         'https://github.com/pydanny/cookiecutter-django.git'),
-        ('gl:pydanny/cookiecutter-django',
-         BUILTIN_ABBREVIATIONS,
-         'https://gitlab.com/pydanny/cookiecutter-django.git'),
-        ('bb:pydanny/cookiecutter-django',
-         BUILTIN_ABBREVIATIONS,
-         'https://bitbucket.org/pydanny/cookiecutter-django'),
-    ], ids=(
+        (
+            'gh:pydanny/cookiecutter-django',
+            BUILTIN_ABBREVIATIONS,
+            'https://github.com/pydanny/cookiecutter-django.git',
+        ),
+        (
+            'gl:pydanny/cookiecutter-django',
+            BUILTIN_ABBREVIATIONS,
+            'https://gitlab.com/pydanny/cookiecutter-django.git',
+        ),
+        (
+            'bb:pydanny/cookiecutter-django',
+            BUILTIN_ABBREVIATIONS,
+            'https://bitbucket.org/pydanny/cookiecutter-django',
+        ),
+    ],
+    ids=(
         'Simple expansion',
         'Skip expansion (expansion not an abbreviation)',
         'Expansion prefix',
@@ -35,7 +42,7 @@ from cookiecutter.repository import expand_abbreviations
         'Correct expansion for builtin abbreviations (github)',
         'Correct expansion for builtin abbreviations (gitlab)',
         'Correct expansion for builtin abbreviations (bitbucket)',
-    )
+    ),
 )
 def test_abbreviation_expansion(template, abbreviations, expected_result):
     """Verify abbreviation unpacking."""
diff --git a/tests/repository/test_determine_repo_dir_clones_repo.py b/tests/repository/test_determine_repo_dir_clones_repo.py
index d49db22..9063e70 100644
--- a/tests/repository/test_determine_repo_dir_clones_repo.py
+++ b/tests/repository/test_determine_repo_dir_clones_repo.py
@@ -9,11 +9,14 @@ import pytest
 from cookiecutter import repository, exceptions
 
 
-@pytest.mark.parametrize('template, is_url', [
-    ('/path/to/zipfile.zip', False),
-    ('https://example.com/path/to/zipfile.zip', True),
-    ('http://example.com/path/to/zipfile.zip', True),
-])
+@pytest.mark.parametrize(
+    'template, is_url',
+    [
+        ('/path/to/zipfile.zip', False),
+        ('https://example.com/path/to/zipfile.zip', True),
+        ('http://example.com/path/to/zipfile.zip', True),
+    ],
+)
 def test_zipfile_unzip(mocker, template, is_url, user_config_data):
     """Verify zip files correctly handled for different source locations.
 
@@ -23,7 +26,7 @@ def test_zipfile_unzip(mocker, template, is_url, user_config_data):
     mock_clone = mocker.patch(
         'cookiecutter.repository.unzip',
         return_value='tests/fake-repo-tmpl',
-        autospec=True
+        autospec=True,
     )
 
     project_dir, cleanup = repository.determine_repo_dir(
@@ -57,8 +60,7 @@ def template_url():
     return 'https://github.com/pytest-dev/cookiecutter-pytest-plugin.git'
 
 
-def test_repository_url_should_clone(
-        mocker, template_url, user_config_data):
+def test_repository_url_should_clone(mocker, template_url, user_config_data):
     """Verify repository url triggers clone function.
 
     `clone()` should be called with correct args when `determine_repo_dir()` is
@@ -67,7 +69,7 @@ def test_repository_url_should_clone(
     mock_clone = mocker.patch(
         'cookiecutter.repository.clone',
         return_value='tests/fake-repo-tmpl',
-        autospec=True
+        autospec=True,
     )
 
     project_dir, cleanup = repository.determine_repo_dir(
@@ -75,14 +77,14 @@ def test_repository_url_should_clone(
         abbreviations={},
         clone_to_dir=user_config_data['cookiecutters_dir'],
         checkout=None,
-        no_input=True
+        no_input=True,
     )
 
     mock_clone.assert_called_once_with(
         repo_url=template_url,
         checkout=None,
         clone_to_dir=user_config_data['cookiecutters_dir'],
-        no_input=True
+        no_input=True,
     )
 
     assert os.path.isdir(project_dir)
@@ -90,13 +92,12 @@ def test_repository_url_should_clone(
     assert 'tests/fake-repo-tmpl' == project_dir
 
 
-def test_repository_url_with_no_context_file(
-        mocker, template_url, user_config_data):
+def test_repository_url_with_no_context_file(mocker, template_url, user_config_data):
     """Verify cloned repository without `cookiecutter.json` file raises error."""
     mocker.patch(
         'cookiecutter.repository.clone',
         return_value='tests/fake-repo-bad',
-        autospec=True
+        autospec=True,
     )
 
     with pytest.raises(exceptions.RepositoryNotFound) as err:
@@ -105,13 +106,10 @@ def test_repository_url_with_no_context_file(
             abbreviations={},
             clone_to_dir=None,
             checkout=None,
-            no_input=True
+            no_input=True,
         )
 
     assert str(err.value) == (
         'A valid repository for "{}" could not be found in the following '
-        'locations:\n{}'.format(
-            template_url,
-            'tests/fake-repo-bad',
-        )
+        'locations:\n{}'.format(template_url, 'tests/fake-repo-bad')
     )
diff --git a/tests/repository/test_determine_repo_dir_finds_existing_cookiecutter.py b/tests/repository/test_determine_repo_dir_finds_existing_cookiecutter.py
index 20a5b98..c5b3b89 100644
--- a/tests/repository/test_determine_repo_dir_finds_existing_cookiecutter.py
+++ b/tests/repository/test_determine_repo_dir_finds_existing_cookiecutter.py
@@ -30,7 +30,8 @@ def cloned_cookiecutter_path(user_config_data, template):
 
 
 def test_should_find_existing_cookiecutter(
-        template, user_config_data, cloned_cookiecutter_path):
+    template, user_config_data, cloned_cookiecutter_path
+):
     """
     Should find folder created by `cloned_cookiecutter_path` and return it.
 
diff --git a/tests/repository/test_determine_repo_dir_finds_subdirectories.py b/tests/repository/test_determine_repo_dir_finds_subdirectories.py
index 610c03c..b6beb0b 100644
--- a/tests/repository/test_determine_repo_dir_finds_subdirectories.py
+++ b/tests/repository/test_determine_repo_dir_finds_subdirectories.py
@@ -63,16 +63,14 @@ def test_local_repo_typo(template, user_config_data, cloned_cookiecutter_path):
         )
 
     wrong_full_cookiecutter_path = os.path.join(
-        os.path.dirname(cloned_cookiecutter_path),
-        'wrong-dir'
+        os.path.dirname(cloned_cookiecutter_path), 'wrong-dir'
     )
     assert str(err.value) == (
         'A valid repository for "{}" could not be found in the following '
         'locations:\n{}'.format(
             template,
-            '\n'.join([
-                os.path.join(template, 'wrong-dir'),
-                wrong_full_cookiecutter_path
-            ]),
+            '\n'.join(
+                [os.path.join(template, 'wrong-dir'), wrong_full_cookiecutter_path]
+            ),
         )
     )
diff --git a/tests/repository/test_determine_repository_should_use_local_repo.py b/tests/repository/test_determine_repository_should_use_local_repo.py
index 470245c..6b14a1b 100644
--- a/tests/repository/test_determine_repository_should_use_local_repo.py
+++ b/tests/repository/test_determine_repository_should_use_local_repo.py
@@ -16,7 +16,7 @@ def test_finds_local_repo(tmpdir):
         abbreviations={},
         clone_to_dir=str(tmpdir),
         checkout=None,
-        no_input=True
+        no_input=True,
     )
 
     assert 'tests/fake-repo' == project_dir
@@ -33,17 +33,14 @@ def test_local_repo_with_no_context_raises(tmpdir):
             abbreviations={},
             clone_to_dir=str(tmpdir),
             checkout=None,
-            no_input=True
+            no_input=True,
         )
 
     assert str(err.value) == (
         'A valid repository for "{}" could not be found in the following '
         'locations:\n{}'.format(
             template_path,
-            '\n'.join([
-                template_path,
-                str(tmpdir / 'tests/fake-repo-bad')
-            ]),
+            '\n'.join([template_path, str(tmpdir / 'tests/fake-repo-bad')]),
         )
     )
 
@@ -58,16 +55,13 @@ def test_local_repo_typo(tmpdir):
             abbreviations={},
             clone_to_dir=str(tmpdir),
             checkout=None,
-            no_input=True
+            no_input=True,
         )
 
     assert str(err.value) == (
         'A valid repository for "{}" could not be found in the following '
         'locations:\n{}'.format(
             template_path,
-            '\n'.join([
-                template_path,
-                str(tmpdir / 'tests/unknown-repo')
-            ]),
+            '\n'.join([template_path, str(tmpdir / 'tests/unknown-repo')]),
         )
     )
diff --git a/tests/repository/test_is_repo_url.py b/tests/repository/test_is_repo_url.py
index 7832f28..77cd4d1 100644
--- a/tests/repository/test_is_repo_url.py
+++ b/tests/repository/test_is_repo_url.py
@@ -5,16 +5,16 @@
 import pytest
 
 from cookiecutter.config import BUILTIN_ABBREVIATIONS
-from cookiecutter.repository import (
-    is_zip_file, is_repo_url, expand_abbreviations
-)
+from cookiecutter.repository import is_zip_file, is_repo_url, expand_abbreviations
 
 
-@pytest.fixture(params=[
-    '/path/to/zipfile.zip',
-    'https://example.com/path/to/zipfile.zip',
-    'http://example.com/path/to/zipfile.zip',
-])
+@pytest.fixture(
+    params=[
+        '/path/to/zipfile.zip',
+        'https://example.com/path/to/zipfile.zip',
+        'http://example.com/path/to/zipfile.zip',
+    ]
+)
 def zipfile(request):
     """Fixture. Represent possible paths to zip file."""
     return request.param
@@ -25,15 +25,17 @@ def test_is_zip_file(zipfile):
     assert is_zip_file(zipfile) is True
 
 
-@pytest.fixture(params=[
-    'gitolite@server:team/repo',
-    'git@github.com:audreyr/cookiecutter.git',
-    'https://github.com/audreyr/cookiecutter.git',
-    'git+https://private.com/gitrepo',
-    'hg+https://private.com/mercurialrepo',
-    'https://bitbucket.org/pokoli/cookiecutter.hg',
-    'file://server/path/to/repo.git',
-])
+@pytest.fixture(
+    params=[
+        'gitolite@server:team/repo',
+        'git@github.com:audreyr/cookiecutter.git',
+        'https://github.com/audreyr/cookiecutter.git',
+        'git+https://private.com/gitrepo',
+        'hg+https://private.com/mercurialrepo',
+        'https://bitbucket.org/pokoli/cookiecutter.hg',
+        'file://server/path/to/repo.git',
+    ]
+)
 def remote_repo_url(request):
     """Fixture. Represent possible URI to different repositories types."""
     return request.param
@@ -44,14 +46,16 @@ def test_is_repo_url_for_remote_urls(remote_repo_url):
     assert is_repo_url(remote_repo_url) is True
 
 
-@pytest.fixture(params=[
-    '/audreyr/cookiecutter.git',
-    '/home/audreyr/cookiecutter',
-    (
-        'c:\\users\\foo\\appdata\\local\\temp\\1\\pytest-0\\'
-        'test_default_output_dir0\\template'
-    ),
-])
+@pytest.fixture(
+    params=[
+        '/audreyr/cookiecutter.git',
+        '/home/audreyr/cookiecutter',
+        (
+            'c:\\users\\foo\\appdata\\local\\temp\\1\\pytest-0\\'
+            'test_default_output_dir0\\template'
+        ),
+    ]
+)
 def local_repo_url(request):
     """Fixture. Represent possible paths to local resources."""
     return request.param
diff --git a/tests/test_cli.py b/tests/test_cli.py
index 1ba8392..e9b559c 100644
--- a/tests/test_cli.py
+++ b/tests/test_cli.py
@@ -29,9 +29,11 @@ def cli_runner():
 @pytest.fixture
 def remove_fake_project_dir(request):
     """Remove the fake project directory created during the tests."""
+
     def fin_remove_fake_project_dir():
         if os.path.isdir('fake-project'):
             utils.rmtree('fake-project')
+
     request.addfinalizer(fin_remove_fake_project_dir)
 
 
@@ -86,9 +88,7 @@ def test_cli_verbose(cli_runner):
 @pytest.mark.usefixtures('remove_fake_project_dir')
 def test_cli_replay(mocker, cli_runner):
     """Test cli invocation display log with `verbose` and `replay` flags."""
-    mock_cookiecutter = mocker.patch(
-        'cookiecutter.cli.cookiecutter'
-    )
+    mock_cookiecutter = mocker.patch('cookiecutter.cli.cookiecutter')
 
     template_path = 'tests/fake-repo-pre/'
     result = cli_runner(template_path, '--replay', '-v')
@@ -114,8 +114,7 @@ def test_cli_replay(mocker, cli_runner):
 def test_cli_exit_on_noinput_and_replay(mocker, cli_runner):
     """Test cli invocation fail if both `no-input` and `replay` flags passed."""
     mock_cookiecutter = mocker.patch(
-        'cookiecutter.cli.cookiecutter',
-        side_effect=cookiecutter
+        'cookiecutter.cli.cookiecutter', side_effect=cookiecutter
     )
 
     template_path = 'tests/fake-repo-pre/'
@@ -124,8 +123,7 @@ def test_cli_exit_on_noinput_and_replay(mocker, cli_runner):
     assert result.exit_code == 1
 
     expected_error_msg = (
-        "You can not use both replay and no_input or extra_context "
-        "at the same time."
+        "You can not use both replay and no_input or extra_context " "at the same time."
     )
 
     assert expected_error_msg in result.output
@@ -154,11 +152,11 @@ def overwrite_cli_flag(request):
 
 @pytest.mark.usefixtures('remove_fake_project_dir')
 def test_run_cookiecutter_on_overwrite_if_exists_and_replay(
-        mocker, cli_runner, overwrite_cli_flag):
+    mocker, cli_runner, overwrite_cli_flag
+):
     """Test cli invocation with `overwrite-if-exists` and `replay` flags."""
     mock_cookiecutter = mocker.patch(
-        'cookiecutter.cli.cookiecutter',
-        side_effect=cookiecutter
+        'cookiecutter.cli.cookiecutter', side_effect=cookiecutter
     )
 
     template_path = 'tests/fake-repo-pre/'
@@ -184,33 +182,25 @@ def test_run_cookiecutter_on_overwrite_if_exists_and_replay(
 
 @pytest.mark.usefixtures('remove_fake_project_dir')
 def test_cli_overwrite_if_exists_when_output_dir_does_not_exist(
-        cli_runner, overwrite_cli_flag):
+    cli_runner, overwrite_cli_flag
+):
     """Test cli invocation with `overwrite-if-exists` and `no-input` flags.
 
     Case when output dir not exist.
     """
-    result = cli_runner(
-        'tests/fake-repo-pre/',
-        '--no-input',
-        overwrite_cli_flag,
-    )
+    result = cli_runner('tests/fake-repo-pre/', '--no-input', overwrite_cli_flag)
 
     assert result.exit_code == 0
     assert os.path.isdir('fake-project')
 
 
 @pytest.mark.usefixtures('make_fake_project_dir', 'remove_fake_project_dir')
-def test_cli_overwrite_if_exists_when_output_dir_exists(
-        cli_runner, overwrite_cli_flag):
+def test_cli_overwrite_if_exists_when_output_dir_exists(cli_runner, overwrite_cli_flag):
     """Test cli invocation with `overwrite-if-exists` and `no-input` flags.
 
     Case when output dir already exist.
     """
-    result = cli_runner(
-        'tests/fake-repo-pre/',
-        '--no-input',
-        overwrite_cli_flag,
-    )
+    result = cli_runner('tests/fake-repo-pre/', '--no-input', overwrite_cli_flag)
     assert result.exit_code == 0
     assert os.path.isdir('fake-project')
 
@@ -229,9 +219,7 @@ def output_dir(tmpdir):
 
 def test_cli_output_dir(mocker, cli_runner, output_dir_flag, output_dir):
     """Test cli invocation with `output-dir` flag changes output directory."""
-    mock_cookiecutter = mocker.patch(
-        'cookiecutter.cli.cookiecutter'
-    )
+    mock_cookiecutter = mocker.patch('cookiecutter.cli.cookiecutter')
 
     template_path = 'tests/fake-repo-pre/'
     result = cli_runner(template_path, output_dir_flag, output_dir)
@@ -274,9 +262,7 @@ def user_config_path(tmpdir):
 
 def test_user_config(mocker, cli_runner, user_config_path):
     """Test cli invocation works with `config-file` option."""
-    mock_cookiecutter = mocker.patch(
-        'cookiecutter.cli.cookiecutter'
-    )
+    mock_cookiecutter = mocker.patch('cookiecutter.cli.cookiecutter')
 
     template_path = 'tests/fake-repo-pre/'
     result = cli_runner(template_path, '--config-file', user_config_path)
@@ -300,16 +286,11 @@ def test_user_config(mocker, cli_runner, user_config_path):
 
 def test_default_user_config_overwrite(mocker, cli_runner, user_config_path):
     """Test cli invocation ignores `config-file` if `default-config` passed."""
-    mock_cookiecutter = mocker.patch(
-        'cookiecutter.cli.cookiecutter'
-    )
+    mock_cookiecutter = mocker.patch('cookiecutter.cli.cookiecutter')
 
     template_path = 'tests/fake-repo-pre/'
     result = cli_runner(
-        template_path,
-        '--config-file',
-        user_config_path,
-        '--default-config',
+        template_path, '--config-file', user_config_path, '--default-config',
     )
 
     assert result.exit_code == 0
@@ -331,9 +312,7 @@ def test_default_user_config_overwrite(mocker, cli_runner, user_config_path):
 
 def test_default_user_config(mocker, cli_runner):
     """Test cli invocation accepts `default-config` flag correctly."""
-    mock_cookiecutter = mocker.patch(
-        'cookiecutter.cli.cookiecutter'
-    )
+    mock_cookiecutter = mocker.patch('cookiecutter.cli.cookiecutter')
 
     template_path = 'tests/fake-repo-pre/'
     result = cli_runner(template_path, '--default-config')
@@ -357,7 +336,7 @@ def test_default_user_config(mocker, cli_runner):
 
 @pytest.mark.skipif(
     sys.version_info[0] == 3 and sys.version_info[1] == 6 and sys.version_info[2] == 1,
-    reason="Outdated pypy3 version on Travis CI/CD with wrong OrderedDict syntax."
+    reason="Outdated pypy3 version on Travis CI/CD with wrong OrderedDict syntax.",
 )
 def test_echo_undefined_variable_error(tmpdir, cli_runner):
     """Cli invocation return error if variable undefined in template."""
@@ -365,11 +344,7 @@ def test_echo_undefined_variable_error(tmpdir, cli_runner):
     template_path = 'tests/undefined-variable/file-name/'
 
     result = cli_runner(
-        '--no-input',
-        '--default-config',
-        '--output-dir',
-        output_dir,
-        template_path,
+        '--no-input', '--default-config', '--output-dir', output_dir, template_path,
     )
 
     assert result.exit_code == 1
@@ -386,7 +361,7 @@ def test_echo_undefined_variable_error(tmpdir, cli_runner):
         'cookiecutter': {
             'github_username': 'hackebrot',
             'project_slug': 'testproject',
-            '_template': template_path
+            '_template': template_path,
         }
     }
     context_str = json.dumps(context, indent=4, sort_keys=True)
@@ -399,11 +374,7 @@ def test_echo_unknown_extension_error(tmpdir, cli_runner):
     template_path = 'tests/test-extensions/unknown/'
 
     result = cli_runner(
-        '--no-input',
-        '--default-config',
-        '--output-dir',
-        output_dir,
-        template_path,
+        '--no-input', '--default-config', '--output-dir', output_dir, template_path,
     )
 
     assert result.exit_code == 1
@@ -415,10 +386,7 @@ def test_echo_unknown_extension_error(tmpdir, cli_runner):
 def test_cli_extra_context(cli_runner):
     """Cli invocation replace content if called with replacement pairs."""
     result = cli_runner(
-        'tests/fake-repo-pre/',
-        '--no-input',
-        '-v',
-        'project_name=Awesomez',
+        'tests/fake-repo-pre/', '--no-input', '-v', 'project_name=Awesomez',
     )
     assert result.exit_code == 0
     assert os.path.isdir('fake-project')
@@ -430,10 +398,7 @@ def test_cli_extra_context(cli_runner):
 def test_cli_extra_context_invalid_format(cli_runner):
     """Cli invocation raise error if called with unknown argument."""
     result = cli_runner(
-        'tests/fake-repo-pre/',
-        '--no-input',
-        '-v',
-        'ExtraContextWithNoEqualsSoInvalid',
+        'tests/fake-repo-pre/', '--no-input', '-v', 'ExtraContextWithNoEqualsSoInvalid',
     )
     assert result.exit_code == 2
     assert "Error: Invalid value for '[EXTRA_CONTEXT]...'" in result.output
@@ -455,10 +420,7 @@ def test_debug_file_non_verbose(cli_runner, debug_file):
     assert not debug_file.exists()
 
     result = cli_runner(
-        '--no-input',
-        '--debug-file',
-        str(debug_file),
-        'tests/fake-repo-pre/',
+        '--no-input', '--debug-file', str(debug_file), 'tests/fake-repo-pre/',
     )
     assert result.exit_code == 0
 
@@ -503,10 +465,7 @@ def test_debug_file_verbose(cli_runner, debug_file):
 def test_directory_repo(cli_runner):
     """Test cli invocation works with `directory` option."""
     result = cli_runner(
-        'tests/fake-repo-dir/',
-        '--no-input',
-        '-v',
-        '--directory=my-dir',
+        'tests/fake-repo-dir/', '--no-input', '-v', '--directory=my-dir',
     )
     assert result.exit_code == 0
     assert os.path.isdir('fake-project')
diff --git a/tests/test_cookiecutter_invocation.py b/tests/test_cookiecutter_invocation.py
index 507b392..275dfaa 100644
--- a/tests/test_cookiecutter_invocation.py
+++ b/tests/test_cookiecutter_invocation.py
@@ -42,12 +42,8 @@ def test_should_invoke_main(monkeypatch, project_dir):
     """Should create a project and exit with 0 code on cli invocation."""
     monkeypatch.setenv('PYTHONPATH', '.')
 
-    exit_code = subprocess.check_call([
-        sys.executable,
-        '-m',
-        'cookiecutter.cli',
-        'tests/fake-repo-tmpl',
-        '--no-input'
-    ])
+    exit_code = subprocess.check_call(
+        [sys.executable, '-m', 'cookiecutter.cli', 'tests/fake-repo-tmpl', '--no-input']
+    )
     assert exit_code == 0
     assert os.path.isdir(project_dir)
diff --git a/tests/test_cookiecutter_local_no_input.py b/tests/test_cookiecutter_local_no_input.py
index d9a6fd6..816cabc 100644
--- a/tests/test_cookiecutter_local_no_input.py
+++ b/tests/test_cookiecutter_local_no_input.py
@@ -16,6 +16,7 @@ from cookiecutter import main, utils
 @pytest.fixture(scope='function')
 def remove_additional_dirs(request):
     """Fixture. Remove special directories which are created during the tests."""
+
     def fin_remove_additional_dirs():
         if os.path.isdir('fake-project'):
             utils.rmtree('fake-project')
@@ -27,6 +28,7 @@ def remove_additional_dirs(request):
             utils.rmtree('fake-project-dict')
         if os.path.isdir('fake-tmp'):
             utils.rmtree('fake-tmp')
+
     request.addfinalizer(fin_remove_additional_dirs)
 
 
@@ -48,7 +50,7 @@ def test_cookiecutter_no_input_extra_context():
     main.cookiecutter(
         'tests/fake-repo-pre',
         no_input=True,
-        extra_context={'repo_name': 'fake-project-extra'}
+        extra_context={'repo_name': 'fake-project-extra'},
     )
     assert os.path.isdir('fake-project-extra')
 
@@ -56,10 +58,7 @@ def test_cookiecutter_no_input_extra_context():
 @pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
 def test_cookiecutter_templated_context():
     """Verify Jinja2 templating correctly works in `cookiecutter.json` file."""
-    main.cookiecutter(
-        'tests/fake-repo-tmpl',
-        no_input=True
-    )
+    main.cookiecutter('tests/fake-repo-tmpl', no_input=True)
     assert os.path.isdir('fake-project-templated')
 
 
@@ -82,7 +81,10 @@ def test_cookiecutter_dict_values_in_context():
     with open(os.path.join(project_dir, 'README.md')) as fh:
         contents = fh.read()
 
-    assert contents == textwrap.dedent("""
+    assert (
+        contents
+        == textwrap.dedent(
+            """
         # README
 
 
@@ -117,28 +119,21 @@ def test_cookiecutter_dict_values_in_context():
           </dd>
         </dl>
 
-    """).lstrip()
+    """
+        ).lstrip()
+    )
 
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
 def test_cookiecutter_template_cleanup(mocker):
     """Verify temporary folder for zip unpacking dropped."""
-    mocker.patch(
-        'tempfile.mkdtemp',
-        return_value='fake-tmp',
-        autospec=True
-    )
+    mocker.patch('tempfile.mkdtemp', return_value='fake-tmp', autospec=True)
 
     mocker.patch(
-        'cookiecutter.utils.prompt_and_delete',
-        return_value=True,
-        autospec=True
+        'cookiecutter.utils.prompt_and_delete', return_value=True, autospec=True
     )
 
-    main.cookiecutter(
-        'tests/files/fake-repo-tmpl.zip',
-        no_input=True
-    )
+    main.cookiecutter('tests/files/fake-repo-tmpl.zip', no_input=True)
     assert os.path.isdir('fake-project-templated')
 
     # The tmp directory will still exist, but the
diff --git a/tests/test_cookiecutter_local_with_input.py b/tests/test_cookiecutter_local_with_input.py
index 7f399fd..e5a472d 100644
--- a/tests/test_cookiecutter_local_with_input.py
+++ b/tests/test_cookiecutter_local_with_input.py
@@ -23,8 +23,7 @@ def remove_additional_dirs(request):
 def test_cookiecutter_local_with_input(monkeypatch):
     """Verify simple cookiecutter run results, without extra_context provided."""
     monkeypatch.setattr(
-        'cookiecutter.prompt.read_user_variable',
-        lambda var, default: default
+        'cookiecutter.prompt.read_user_variable', lambda var, default: default
     )
     main.cookiecutter('tests/fake-repo-pre/', no_input=False)
     assert os.path.isdir('tests/fake-repo-pre/{{cookiecutter.repo_name}}')
@@ -38,12 +37,11 @@ def test_cookiecutter_local_with_input(monkeypatch):
 def test_cookiecutter_input_extra_context(monkeypatch):
     """Verify simple cookiecutter run results, with extra_context provided."""
     monkeypatch.setattr(
-        'cookiecutter.prompt.read_user_variable',
-        lambda var, default: default
+        'cookiecutter.prompt.read_user_variable', lambda var, default: default
     )
     main.cookiecutter(
         'tests/fake-repo-pre',
         no_input=False,
-        extra_context={'repo_name': 'fake-project-input-extra'}
+        extra_context={'repo_name': 'fake-project-input-extra'},
     )
     assert os.path.isdir('fake-project-input-extra')
diff --git a/tests/test_custom_extensions_in_hooks.py b/tests/test_custom_extensions_in_hooks.py
index a5bf1d2..b185eb2 100644
--- a/tests/test_custom_extensions_in_hooks.py
+++ b/tests/test_custom_extensions_in_hooks.py
@@ -15,13 +15,10 @@ import pytest
 from cookiecutter import main
 
 
-@pytest.fixture(params=[
-    'custom-extension-pre',
-    'custom-extension-post',
-], ids=[
-    'pre_gen_hook',
-    'post_gen_hook',
-])
+@pytest.fixture(
+    params=['custom-extension-pre', 'custom-extension-post'],
+    ids=['pre_gen_hook', 'post_gen_hook'],
+)
 def template(request):
     """Fixture. Allows to split pre and post hooks test directories."""
     return 'tests/test-extensions/' + request.param
@@ -36,9 +33,7 @@ def output_dir(tmpdir):
 @pytest.fixture(autouse=True)
 def modify_syspath(monkeypatch):
     """Fixture. Make sure that the custom extension can be loaded."""
-    monkeypatch.syspath_prepend(
-        'tests/test-extensions/hello_extension'
-    )
+    monkeypatch.syspath_prepend('tests/test-extensions/hello_extension')
 
 
 def test_hook_with_extension(template, output_dir):
@@ -51,10 +46,7 @@ def test_hook_with_extension(template, output_dir):
         template,
         no_input=True,
         output_dir=output_dir,
-        extra_context={
-            'project_slug': 'foobar',
-            'name': 'Cookiemonster',
-        },
+        extra_context={'project_slug': 'foobar', 'name': 'Cookiemonster'},
     )
 
     readme_file = os.path.join(project_dir, 'README.rst')
diff --git a/tests/test_default_extensions.py b/tests/test_default_extensions.py
index 76c18eb..edfadd5 100644
--- a/tests/test_default_extensions.py
+++ b/tests/test_default_extensions.py
@@ -23,9 +23,7 @@ def freeze():
 def test_jinja2_time_extension(tmpdir):
     """Verify Jinja2 time extension work correctly."""
     project_dir = cookiecutter(
-        'tests/test-extensions/default/',
-        no_input=True,
-        output_dir=str(tmpdir)
+        'tests/test-extensions/default/', no_input=True, output_dir=str(tmpdir)
     )
     changelog_file = os.path.join(project_dir, 'HISTORY.rst')
     assert os.path.isfile(changelog_file)
@@ -40,7 +38,7 @@ def test_jinja2_time_extension(tmpdir):
         '0.1.0 (2015-12-09)\n',
         '---------------------\n',
         '\n',
-        'First release on PyPI.\n'
+        'First release on PyPI.\n',
     ]
     assert expected_lines == changelog_lines
 
@@ -48,9 +46,7 @@ def test_jinja2_time_extension(tmpdir):
 def test_jinja2_slugify_extension(tmpdir):
     """Verify Jinja2 slugify extension work correctly."""
     project_dir = cookiecutter(
-        'tests/test-extensions/default/',
-        no_input=True,
-        output_dir=str(tmpdir)
+        'tests/test-extensions/default/', no_input=True, output_dir=str(tmpdir)
     )
 
     assert os.path.basename(project_dir) == "it-s-slugified-foobar"
diff --git a/tests/test_exceptions.py b/tests/test_exceptions.py
index 9927da0..2c67bdd 100644
--- a/tests/test_exceptions.py
+++ b/tests/test_exceptions.py
@@ -12,7 +12,7 @@ def test_undefined_variable_to_str():
     undefined_var_error = exceptions.UndefinedVariableInTemplate(
         'Beautiful is better than ugly',
         UndefinedError('Errors should never pass silently'),
-        {'cookiecutter': {'foo': 'bar'}}
+        {'cookiecutter': {'foo': 'bar'}},
     )
 
     expected_str = (
diff --git a/tests/test_generate_copy_without_render.py b/tests/test_generate_copy_without_render.py
index 1c79e82..d5f35b4 100644
--- a/tests/test_generate_copy_without_render.py
+++ b/tests/test_generate_copy_without_render.py
@@ -34,9 +34,10 @@ def test_generate_copy_without_render_extensions():
                     '*not-rendered',
                     'rendered/not_rendered.yml',
                     '*.txt',
-                ]}
+                ],
+            }
         },
-        repo_dir='tests/test-generate-copy-without-render'
+        repo_dir='tests/test-generate-copy-without-render',
     )
 
     dir_contents = os.listdir('test_copy_without_render')
@@ -50,19 +51,21 @@ def test_generate_copy_without_render_extensions():
     with open('test_copy_without_render/README.rst') as f:
         assert 'I have been rendered!' in f.read()
 
-    with open('test_copy_without_render/'
-              'test_copy_without_render-rendered/'
-              'README.txt') as f:
+    with open(
+        'test_copy_without_render/' 'test_copy_without_render-rendered/' 'README.txt'
+    ) as f:
         assert '{{cookiecutter.render_test}}' in f.read()
 
-    with open('test_copy_without_render/'
-              'test_copy_without_render-rendered/'
-              'README.rst') as f:
+    with open(
+        'test_copy_without_render/' 'test_copy_without_render-rendered/' 'README.rst'
+    ) as f:
         assert 'I have been rendered' in f.read()
 
-    with open('test_copy_without_render/'
-              '{{cookiecutter.repo_name}}-not-rendered/'
-              'README.rst') as f:
+    with open(
+        'test_copy_without_render/'
+        '{{cookiecutter.repo_name}}-not-rendered/'
+        'README.rst'
+    ) as f:
         assert '{{cookiecutter.render_test}}' in f.read()
 
     with open('test_copy_without_render/rendered/not_rendered.yml') as f:
diff --git a/tests/test_generate_file.py b/tests/test_generate_file.py
index cca214e..f53ba32 100644
--- a/tests/test_generate_file.py
+++ b/tests/test_generate_file.py
@@ -39,10 +39,7 @@ def test_generate_file(env):
     """Verify simple file is generated with rendered context data."""
     infile = 'tests/files/{{generate_file}}.txt'
     generate.generate_file(
-        project_dir=".",
-        infile=infile,
-        context={'generate_file': 'cheese'},
-        env=env
+        project_dir=".", infile=infile, context={'generate_file': 'cheese'}, env=env
     )
     assert os.path.isfile('tests/files/cheese.txt')
     with open('tests/files/cheese.txt', 'rt') as f:
@@ -55,10 +52,7 @@ def test_generate_file_jsonify_filter(env):
     infile = 'tests/files/{{cookiecutter.jsonify_file}}.txt'
     data = {'jsonify_file': 'cheese', 'type': 'roquefort'}
     generate.generate_file(
-        project_dir=".",
-        infile=infile,
-        context={'cookiecutter': data},
-        env=env
+        project_dir=".", infile=infile, context={'cookiecutter': data}, env=env
     )
     assert os.path.isfile('tests/files/cheese.txt')
     with open('tests/files/cheese.txt', 'rt') as f:
@@ -72,17 +66,8 @@ def test_generate_file_random_ascii_string(env, length, punctuation):
     """Verify correct work of random_ascii_string extension on file generation."""
     infile = 'tests/files/{{cookiecutter.random_string_file}}.txt'
     data = {'random_string_file': 'cheese'}
-    context = {
-        "cookiecutter": data,
-        "length": length,
-        "punctuation": punctuation
-    }
-    generate.generate_file(
-        project_dir=".",
-        infile=infile,
-        context=context,
-        env=env
-    )
+    context = {"cookiecutter": data, "length": length, "punctuation": punctuation}
+    generate.generate_file(project_dir=".", infile=infile, context=context, env=env)
     assert os.path.isfile('tests/files/cheese.txt')
     with open('tests/files/cheese.txt', 'rt') as f:
         generated_text = f.read()
@@ -96,10 +81,7 @@ def test_generate_file_with_true_condition(env):
     """
     infile = 'tests/files/{% if generate_file == \'y\' %}cheese.txt{% endif %}'
     generate.generate_file(
-        project_dir=".",
-        infile=infile,
-        context={'generate_file': 'y'},
-        env=env
+        project_dir=".", infile=infile, context={'generate_file': 'y'}, env=env
     )
     assert os.path.isfile('tests/files/cheese.txt')
     with open('tests/files/cheese.txt', 'rt') as f:
@@ -114,10 +96,7 @@ def test_generate_file_with_false_condition(env):
     """
     infile = 'tests/files/{% if generate_file == \'y\' %}cheese.txt{% endif %}'
     generate.generate_file(
-        project_dir=".",
-        infile=infile,
-        context={'generate_file': 'n'},
-        env=env
+        project_dir=".", infile=infile, context={'generate_file': 'n'}, env=env
     )
     assert not os.path.isfile('tests/files/cheese.txt')
 
@@ -140,6 +119,6 @@ def test_generate_file_verbose_template_syntax_error(env, expected_msg):
             project_dir=".",
             infile='tests/files/syntax_error.txt',
             context={'syntax_error': 'syntax_error'},
-            env=env
+            env=env,
         )
     assert str(exception.value) == expected_msg
diff --git a/tests/test_generate_files.py b/tests/test_generate_files.py
index 7047195..469f754 100644
--- a/tests/test_generate_files.py
+++ b/tests/test_generate_files.py
@@ -54,10 +54,8 @@ def test_generate_files_nontemplated_exception():
     """
     with pytest.raises(exceptions.NonTemplatedInputDirException):
         generate.generate_files(
-            context={
-                'cookiecutter': {'food': 'pizza'}
-            },
-            repo_dir='tests/test-generate-files-nontemplated'
+            context={'cookiecutter': {'food': 'pizza'}},
+            repo_dir='tests/test-generate-files-nontemplated',
         )
 
 
@@ -65,10 +63,8 @@ def test_generate_files_nontemplated_exception():
 def test_generate_files():
     """Verify directory name correctly rendered with unicode containing context."""
     generate.generate_files(
-        context={
-            'cookiecutter': {'food': 'pizzä'}
-        },
-        repo_dir='tests/test-generate-files'
+        context={'cookiecutter': {'food': 'pizzä'}},
+        repo_dir='tests/test-generate-files',
     )
 
     simple_file = 'inputpizzä/simple.txt'
@@ -82,10 +78,8 @@ def test_generate_files():
 def test_generate_files_with_trailing_newline():
     """Verify new line not removed by templating engine after folder generation."""
     generate.generate_files(
-        context={
-            'cookiecutter': {'food': 'pizzä'}
-        },
-        repo_dir='tests/test-generate-files'
+        context={'cookiecutter': {'food': 'pizzä'}},
+        repo_dir='tests/test-generate-files',
     )
 
     newline_file = 'inputpizzä/simple-with-newline.txt'
@@ -100,10 +94,8 @@ def test_generate_files_with_trailing_newline():
 def test_generate_files_binaries():
     """Verify binary files created during directory generation."""
     generate.generate_files(
-        context={
-            'cookiecutter': {'binary_test': 'binary_files'}
-        },
-        repo_dir='tests/test-generate-binaries'
+        context={'cookiecutter': {'binary_test': 'binary_files'}},
+        repo_dir='tests/test-generate-binaries',
     )
 
     assert is_binary('inputbinary_files/logo.png')
@@ -121,10 +113,8 @@ def test_generate_files_binaries():
 def test_generate_files_absolute_path():
     """Verify usage of `abspath` does not change files generation behaviour."""
     generate.generate_files(
-        context={
-            'cookiecutter': {'food': 'pizzä'}
-        },
-        repo_dir=os.path.abspath('tests/test-generate-files')
+        context={'cookiecutter': {'food': 'pizzä'}},
+        repo_dir=os.path.abspath('tests/test-generate-files'),
     )
     assert os.path.isfile('inputpizzä/simple.txt')
 
@@ -134,16 +124,12 @@ def test_generate_files_output_dir():
     """Verify `output_dir` option for `generate_files` changing location correctly."""
     os.mkdir('tests/custom_output_dir')
     project_dir = generate.generate_files(
-        context={
-            'cookiecutter': {'food': 'pizzä'}
-        },
+        context={'cookiecutter': {'food': 'pizzä'}},
         repo_dir=os.path.abspath('tests/test-generate-files'),
-        output_dir='tests/custom_output_dir'
+        output_dir='tests/custom_output_dir',
     )
     assert os.path.isfile('tests/custom_output_dir/inputpizzä/simple.txt')
-    assert project_dir == os.path.abspath(
-        'tests/custom_output_dir/inputpizzä'
-    )
+    assert project_dir == os.path.abspath('tests/custom_output_dir/inputpizzä')
 
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
@@ -154,10 +140,8 @@ def test_generate_files_permissions():
     permissions.
     """
     generate.generate_files(
-        context={
-            'cookiecutter': {'permissions': 'permissions'}
-        },
-        repo_dir='tests/test-generate-files-permissions'
+        context={'cookiecutter': {'permissions': 'permissions'}},
+        repo_dir='tests/test-generate-files-permissions',
     )
 
     assert os.path.isfile('inputpermissions/simple.txt')
@@ -167,14 +151,11 @@ def test_generate_files_permissions():
         'tests',
         'test-generate-files-permissions',
         'input{{cookiecutter.permissions}}',
-        'simple.txt'
+        'simple.txt',
     )
     tests_simple_file_mode = os.stat(tests_simple_file).st_mode & 0o777
 
-    input_simple_file = os.path.join(
-        'inputpermissions',
-        'simple.txt'
-    )
+    input_simple_file = os.path.join('inputpermissions', 'simple.txt')
     input_simple_file_mode = os.stat(input_simple_file).st_mode & 0o777
     assert tests_simple_file_mode == input_simple_file_mode
 
@@ -185,14 +166,11 @@ def test_generate_files_permissions():
         'tests',
         'test-generate-files-permissions',
         'input{{cookiecutter.permissions}}',
-        'script.sh'
+        'script.sh',
     )
     tests_script_file_mode = os.stat(tests_script_file).st_mode & 0o777
 
-    input_script_file = os.path.join(
-        'inputpermissions',
-        'script.sh'
-    )
+    input_script_file = os.path.join('inputpermissions', 'script.sh')
     input_script_file_mode = os.stat(input_script_file).st_mode & 0o777
     assert tests_script_file_mode == input_script_file_mode
 
@@ -208,13 +186,10 @@ def test_generate_files_with_overwrite_if_exists_with_skip_if_file_exists():
         f.write('temp')
 
     generate.generate_files(
-        context={
-            'cookiecutter': {'food': 'pizzä'}
-        },
+        context={'cookiecutter': {'food': 'pizzä'}},
         repo_dir='tests/test-generate-files',
-
         overwrite_if_exists=True,
-        skip_if_file_exists=True
+        skip_if_file_exists=True,
     )
 
     assert os.path.isfile(simple_file)
@@ -236,11 +211,9 @@ def test_generate_files_with_skip_if_file_exists():
 
     with pytest.raises(exceptions.OutputDirExistsException):
         generate.generate_files(
-            context={
-                'cookiecutter': {'food': 'pizzä'}
-            },
+            context={'cookiecutter': {'food': 'pizzä'}},
             repo_dir='tests/test-generate-files',
-            skip_if_file_exists=True
+            skip_if_file_exists=True,
         )
 
     assert os.path.isfile(simple_file)
@@ -261,11 +234,9 @@ def test_generate_files_with_overwrite_if_exists():
         f.write('temp')
 
     generate.generate_files(
-        context={
-            'cookiecutter': {'food': 'pizzä'}
-        },
+        context={'cookiecutter': {'food': 'pizzä'}},
         repo_dir='tests/test-generate-files',
-        overwrite_if_exists=True
+        overwrite_if_exists=True,
     )
 
     assert os.path.isfile(simple_file)
@@ -279,10 +250,7 @@ def test_generate_files_with_overwrite_if_exists():
 def undefined_context():
     """Fixture. Populate context variable for future tests."""
     return {
-        'cookiecutter': {
-            'project_slug': 'testproject',
-            'github_username': 'hackebrot'
-        }
+        'cookiecutter': {'project_slug': 'testproject', 'github_username': 'hackebrot'}
     }
 
 
@@ -294,7 +262,7 @@ def test_raise_undefined_variable_file_name(tmpdir, undefined_context):
         generate.generate_files(
             repo_dir='tests/undefined-variable/file-name/',
             output_dir=str(output_dir),
-            context=undefined_context
+            context=undefined_context,
         )
     error = err.value
     assert "Unable to create file '{{cookiecutter.foobar}}'" == error.message
@@ -303,8 +271,7 @@ def test_raise_undefined_variable_file_name(tmpdir, undefined_context):
     assert not output_dir.join('testproject').exists()
 
 
-def test_raise_undefined_variable_file_name_existing_project(
-        tmpdir, undefined_context):
+def test_raise_undefined_variable_file_name_existing_project(tmpdir, undefined_context):
     """Verify correct error raised when file name cannot be rendered."""
     output_dir = tmpdir.mkdir('output')
 
@@ -315,7 +282,7 @@ def test_raise_undefined_variable_file_name_existing_project(
             repo_dir='tests/undefined-variable/file-name/',
             output_dir=str(output_dir),
             context=undefined_context,
-            overwrite_if_exists=True
+            overwrite_if_exists=True,
         )
     error = err.value
     assert "Unable to create file '{{cookiecutter.foobar}}'" == error.message
@@ -332,7 +299,7 @@ def test_raise_undefined_variable_file_content(tmpdir, undefined_context):
         generate.generate_files(
             repo_dir='tests/undefined-variable/file-content/',
             output_dir=str(output_dir),
-            context=undefined_context
+            context=undefined_context,
         )
     error = err.value
     assert "Unable to create file 'README.rst'" == error.message
@@ -349,7 +316,7 @@ def test_raise_undefined_variable_dir_name(tmpdir, undefined_context):
         generate.generate_files(
             repo_dir='tests/undefined-variable/dir-name/',
             output_dir=str(output_dir),
-            context=undefined_context
+            context=undefined_context,
         )
     error = err.value
 
@@ -362,8 +329,7 @@ def test_raise_undefined_variable_dir_name(tmpdir, undefined_context):
     assert not output_dir.join('testproject').exists()
 
 
-def test_raise_undefined_variable_dir_name_existing_project(
-        tmpdir, undefined_context):
+def test_raise_undefined_variable_dir_name_existing_project(tmpdir, undefined_context):
     """Verify correct error raised when directory name cannot be rendered."""
     output_dir = tmpdir.mkdir('output')
 
@@ -374,7 +340,7 @@ def test_raise_undefined_variable_dir_name_existing_project(
             repo_dir='tests/undefined-variable/dir-name/',
             output_dir=str(output_dir),
             context=undefined_context,
-            overwrite_if_exists=True
+            overwrite_if_exists=True,
         )
     error = err.value
 
@@ -395,7 +361,7 @@ def test_raise_undefined_variable_project_dir(tmpdir):
         generate.generate_files(
             repo_dir='tests/undefined-variable/dir-name/',
             output_dir=str(output_dir),
-            context={}
+            context={},
         )
     error = err.value
     msg = "Unable to create project directory '{{cookiecutter.project_slug}}'"
diff --git a/tests/test_get_config.py b/tests/test_get_config.py
index 8ce9712..6ea1d56 100644
--- a/tests/test_get_config.py
+++ b/tests/test_get_config.py
@@ -7,9 +7,7 @@ import os
 import pytest
 
 from cookiecutter import config
-from cookiecutter.exceptions import (
-    ConfigDoesNotExistException, InvalidConfiguration
-)
+from cookiecutter.exceptions import ConfigDoesNotExistException, InvalidConfiguration
 
 
 def test_merge_configs():
@@ -22,7 +20,7 @@ def test_merge_configs():
             'gh': 'https://github.com/{0}.git',
             'gl': 'https://gitlab.com/{0}.git',
             'bb': 'https://bitbucket.org/{0}',
-        }
+        },
     }
 
     user_config = {
@@ -33,7 +31,7 @@ def test_merge_configs():
         'abbreviations': {
             'gl': 'https://gitlab.com/hackebrot/{0}.git',
             'pytest-plugin': 'https://github.com/pytest-dev/pytest-plugin.git',
-        }
+        },
     }
 
     expected_config = {
@@ -48,7 +46,7 @@ def test_merge_configs():
             'gl': 'https://gitlab.com/hackebrot/{0}.git',
             'bb': 'https://bitbucket.org/{0}',
             'pytest-plugin': 'https://github.com/pytest-dev/pytest-plugin.git',
-        }
+        },
     }
 
     assert config.merge_configs(default, user_config) == expected_config
@@ -63,14 +61,14 @@ def test_get_config():
         'default_context': {
             'full_name': 'Firstname Lastname',
             'email': 'firstname.lastname@gmail.com',
-            'github_username': 'example'
+            'github_username': 'example',
         },
         'abbreviations': {
             'gh': 'https://github.com/{0}.git',
             'gl': 'https://gitlab.com/{0}.git',
             'bb': 'https://bitbucket.org/{0}',
-            'helloworld': 'https://github.com/hackebrot/helloworld'
-        }
+            'helloworld': 'https://github.com/hackebrot/helloworld',
+        },
     }
     assert conf == expected_conf
 
@@ -91,9 +89,7 @@ def test_invalid_config():
         config.get_config('tests/test-config/invalid-config.yaml')
 
     expected_error_msg = (
-        'Unable to parse YAML file '
-        'tests/test-config/invalid-config.yaml. '
-        'Error: '
+        'Unable to parse YAML file ' 'tests/test-config/invalid-config.yaml. ' 'Error: '
     )
     assert expected_error_msg in str(exc_info.value)
 
@@ -109,12 +105,12 @@ def test_get_config_with_defaults():
         'default_context': {
             'full_name': 'Firstname Lastname',
             'email': 'firstname.lastname@gmail.com',
-            'github_username': 'example'
+            'github_username': 'example',
         },
         'abbreviations': {
             'gh': 'https://github.com/{0}.git',
             'gl': 'https://gitlab.com/{0}.git',
             'bb': 'https://bitbucket.org/{0}',
-        }
+        },
     }
     assert conf == expected_conf
diff --git a/tests/test_get_user_config.py b/tests/test_get_user_config.py
index 380e1d9..8bcbeb8 100644
--- a/tests/test_get_user_config.py
+++ b/tests/test_get_user_config.py
@@ -57,7 +57,7 @@ def custom_config():
             'gl': 'https://gitlab.com/{0}.git',
             'bb': 'https://bitbucket.org/{0}',
             'helloworld': 'https://github.com/hackebrot/helloworld',
-        }
+        },
     }
 
 
@@ -106,7 +106,8 @@ def test_default_config_path(user_config_path):
 
 
 def test_default_config_from_env_variable(
-        monkeypatch, custom_config_path, custom_config):
+    monkeypatch, custom_config_path, custom_config
+):
     """Validate app configuration. User config path should be parsed from sys env."""
     monkeypatch.setenv('COOKIECUTTER_CONFIG', custom_config_path)
 
@@ -126,8 +127,10 @@ def test_force_default_config(mocker, custom_config_path):
 
 def test_expand_user_for_directories_in_config(monkeypatch):
     """Validate user pointers expanded in user configs."""
+
     def _expanduser(path):
         return path.replace('~', 'Users/bob')
+
     monkeypatch.setattr('os.path.expanduser', _expanduser)
 
     config_file = 'tests/test-config/config-expand-user.yaml'
diff --git a/tests/test_hooks.py b/tests/test_hooks.py
index abf055b..79d3955 100644
--- a/tests/test_hooks.py
+++ b/tests/test_hooks.py
@@ -84,10 +84,7 @@ class TestFindHooks(object):
     def test_unknown_hooks_dir(self):
         """`find_hooks` should return None if hook directory not found."""
         with utils.work_in(self.repo_path):
-            assert hooks.find_hook(
-                'pre_gen_project',
-                hooks_dir='hooks_dir'
-            ) is None
+            assert hooks.find_hook('pre_gen_project', hooks_dir='hooks_dir') is None
 
     def test_hook_not_found(self):
         """`find_hooks` should return None if the hook could not be found."""
@@ -129,10 +126,7 @@ class TestExternalHooks(object):
 
     def test_run_script_cwd(self):
         """Change directory before running hook."""
-        hooks.run_script(
-            os.path.join(self.hooks_path, self.post_hook),
-            'tests'
-        )
+        hooks.run_script(os.path.join(self.hooks_path, self.post_hook), 'tests')
         assert os.path.isfile('tests/shell_post.txt')
         assert 'tests' not in os.getcwd()
 
@@ -159,11 +153,8 @@ class TestExternalHooks(object):
         hooks.run_script_with_context(
             os.path.join(self.hooks_path, self.post_hook),
             'tests',
-            {
-                'cookiecutter': {
-                    'file': 'context_post.txt'
-                }
-            })
+            {'cookiecutter': {'file': 'context_post.txt'}},
+        )
         assert os.path.isfile('tests/context_post.txt')
         assert 'tests' not in os.getcwd()
 
diff --git a/tests/test_log.py b/tests/test_log.py
index 798eeb2..7bcbff7 100644
--- a/tests/test_log.py
+++ b/tests/test_log.py
@@ -38,26 +38,13 @@ def info_messages():
 def debug_messages():
     """Fixture. List of test debug messages."""
     return [
-        'INFO cookiecutter: '
-        'Welcome to Cookiecutter',
-
-        'DEBUG cookiecutter: '
-        'Generating project from pytest-plugin',
-
-        'INFO cookiecutter.foo: '
-        'Loading user config from home dir',
-
-        "DEBUG cookiecutter.foo.bar: "
-        "I don't know.",
-
-        'DEBUG cookiecutter.foo.bar: '
-        'I wanted to save the world.',
-
-        'ERROR cookiecutter.foo: '
-        'Aw, snap! Something went wrong',
-
-        'DEBUG cookiecutter: '
-        'Successfully generated project',
+        'INFO cookiecutter: ' 'Welcome to Cookiecutter',
+        'DEBUG cookiecutter: ' 'Generating project from pytest-plugin',
+        'INFO cookiecutter.foo: ' 'Loading user config from home dir',
+        "DEBUG cookiecutter.foo.bar: " "I don't know.",
+        'DEBUG cookiecutter.foo.bar: ' 'I wanted to save the world.',
+        'ERROR cookiecutter.foo: ' 'Aw, snap! Something went wrong',
+        'DEBUG cookiecutter: ' 'Successfully generated project',
     ]
 
 
@@ -82,10 +69,7 @@ def debug_file(tmpdir):
 @pytest.fixture
 def info_logger_with_file(debug_file):
     """Fixture. Call cookiecutter logger setup with `info` debug level + `file`."""
-    return configure_logger(
-        stream_level='INFO',
-        debug_file=str(debug_file),
-    )
+    return configure_logger(stream_level='INFO', debug_file=str(debug_file))
 
 
 def test_info_stdout_logging(caplog, info_logger, info_messages):
@@ -122,8 +106,7 @@ def test_debug_stdout_logging(caplog, debug_logger, debug_messages):
     assert stream_messages == debug_messages
 
 
-def test_debug_file_logging(
-        caplog, info_logger_with_file, debug_file, debug_messages):
+def test_debug_file_logging(caplog, info_logger_with_file, debug_file, debug_messages):
     """Test that logging to stdout uses a different format and level than \
     the the file handler."""
     [file_handler, stream_handler] = info_logger_with_file.handlers
diff --git a/tests/test_main.py b/tests/test_main.py
index 9fcf37a..92a6bb8 100644
--- a/tests/test_main.py
+++ b/tests/test_main.py
@@ -6,7 +6,8 @@ from cookiecutter.main import cookiecutter
 
 
 def test_replay_dump_template_name(
-        monkeypatch, mocker, user_config_data, user_config_file):
+    monkeypatch, mocker, user_config_data, user_config_file
+):
     """Check that replay_dump is called with a valid template_name.
 
     Template name must not be a relative path.
@@ -24,21 +25,17 @@ def test_replay_dump_template_name(
     mocker.patch('cookiecutter.main.generate_files')
 
     cookiecutter(
-        '.',
-        no_input=True,
-        replay=False,
-        config_file=user_config_file,
+        '.', no_input=True, replay=False, config_file=user_config_file,
     )
 
     mock_replay_dump.assert_called_once_with(
-        user_config_data['replay_dir'],
-        'fake-repo-tmpl',
-        mocker.ANY,
+        user_config_data['replay_dir'], 'fake-repo-tmpl', mocker.ANY,
     )
 
 
 def test_replay_load_template_name(
-        monkeypatch, mocker, user_config_data, user_config_file):
+    monkeypatch, mocker, user_config_data, user_config_file
+):
     """Check that replay_load is called correctly.
 
     Calls require valid template_name that is not a relative path.
@@ -52,12 +49,9 @@ def test_replay_load_template_name(
     mocker.patch('cookiecutter.main.generate_files')
 
     cookiecutter(
-        '.',
-        replay=True,
-        config_file=user_config_file,
+        '.', replay=True, config_file=user_config_file,
     )
 
     mock_replay_load.assert_called_once_with(
-        user_config_data['replay_dir'],
-        'fake-repo-tmpl',
+        user_config_data['replay_dir'], 'fake-repo-tmpl',
     )
diff --git a/tests/test_output_folder.py b/tests/test_output_folder.py
index 7cd9ad7..c7ab9e9 100644
--- a/tests/test_output_folder.py
+++ b/tests/test_output_folder.py
@@ -32,10 +32,7 @@ def test_output_folder():
     context = generate.generate_context(
         context_file='tests/test-output-folder/cookiecutter.json'
     )
-    generate.generate_files(
-        context=context,
-        repo_dir='tests/test-output-folder'
-    )
+    generate.generate_files(context=context, repo_dir='tests/test-output-folder')
 
     something = """Hi!
 My name is Audrey Greenfeld.
@@ -62,7 +59,4 @@ def test_exception_when_output_folder_exists():
     if not os.path.exists(output_folder):
         os.makedirs(output_folder)
     with pytest.raises(exceptions.OutputDirExistsException):
-        generate.generate_files(
-            context=context,
-            repo_dir='tests/test-output-folder'
-        )
+        generate.generate_files(context=context, repo_dir='tests/test-output-folder')
diff --git a/tests/test_prompt.py b/tests/test_prompt.py
index e687f87..d85faa1 100644
--- a/tests/test_prompt.py
+++ b/tests/test_prompt.py
@@ -115,7 +115,7 @@ class TestPrompt(object):
         cookiecutter_dict = prompt.prompt_for_config(context, no_input=True)
         assert cookiecutter_dict == {
             'project_name': 'Slartibartfast',
-            'details': {'Slartibartfast': u'Slartibartfast',},
+            'details': {'Slartibartfast': u'Slartibartfast'},
         }
 
     def test_should_render_deep_dict(self):
@@ -157,9 +157,9 @@ class TestPrompt(object):
                     "deep_key": "deep_value",
                     "deep_integer": "42",
                     "deep_other_name": "Slartibartfast",
-                    "deep_list": ["deep value 1", "Slartibartfast", "deep value 3",],
+                    "deep_list": ["deep value 1", "Slartibartfast", "deep value 3"],
                 },
-                "list_key": ["value 1", "Slartibartfast", "value 3",],
+                "list_key": ["value 1", "Slartibartfast", "value 3"],
             },
         }
 
diff --git a/tests/test_read_user_choice.py b/tests/test_read_user_choice.py
index 9d68f81..2cdf0e0 100644
--- a/tests/test_read_user_choice.py
+++ b/tests/test_read_user_choice.py
@@ -32,10 +32,7 @@ def test_click_invocation(mocker, user_choice, expected_value):
     assert read_user_choice('varname', OPTIONS) == expected_value
 
     prompt.assert_called_once_with(
-        EXPECTED_PROMPT,
-        type=click.Choice(OPTIONS),
-        default='1',
-        show_choices=False
+        EXPECTED_PROMPT, type=click.Choice(OPTIONS), default='1', show_choices=False
     )
 
 
diff --git a/tests/test_read_user_dict.py b/tests/test_read_user_dict.py
index cd9715f..baa2304 100644
--- a/tests/test_read_user_dict.py
+++ b/tests/test_read_user_dict.py
@@ -72,17 +72,9 @@ def test_process_json_deep_dict():
         "dict_key": {
             "deep_key": "deep_value",
             "deep_integer": 42,
-            "deep_list": [
-                "deep value 1",
-                "deep value 2",
-                "deep value 3",
-            ]
+            "deep_list": ["deep value 1", "deep value 2", "deep value 3"],
         },
-        "list_key": [
-            "value 1",
-            "value 2",
-            "value 3",
-        ]
+        "list_key": ["value 1", "value 2", "value 3"],
     }
 
 
@@ -101,18 +93,12 @@ def test_should_call_prompt_with_process_json(mocker):
 
     Verifies generation of a processor for the user input.
     """
-    mock_prompt = mocker.patch(
-        'cookiecutter.prompt.click.prompt',
-        autospec=True,
-    )
+    mock_prompt = mocker.patch('cookiecutter.prompt.click.prompt', autospec=True)
 
     read_user_dict('name', {'project_slug': 'pytest-plugin'})
 
     assert mock_prompt.call_args == mocker.call(
-        'name',
-        type=click.STRING,
-        default='default',
-        value_proc=process_json,
+        'name', type=click.STRING, default='default', value_proc=process_json,
     )
 
 
@@ -122,18 +108,13 @@ def test_read_user_dict_default_value(mocker):
     Verify return of a dict variable rather than the display value.
     """
     mock_prompt = mocker.patch(
-        'cookiecutter.prompt.click.prompt',
-        autospec=True,
-        return_value='default',
+        'cookiecutter.prompt.click.prompt', autospec=True, return_value='default',
     )
 
     val = read_user_dict('name', {'project_slug': 'pytest-plugin'})
 
     assert mock_prompt.call_args == mocker.call(
-        'name',
-        type=click.STRING,
-        default='default',
-        value_proc=process_json,
+        'name', type=click.STRING, default='default', value_proc=process_json,
     )
 
     assert val == {'project_slug': 'pytest-plugin'}
diff --git a/tests/test_read_user_yes_no.py b/tests/test_read_user_yes_no.py
index ee1e602..cb48cc8 100644
--- a/tests/test_read_user_yes_no.py
+++ b/tests/test_read_user_yes_no.py
@@ -22,8 +22,4 @@ def test_click_invocation(mocker):
 
     assert read_user_yes_no(QUESTION, DEFAULT) == DEFAULT
 
-    click.prompt.assert_called_once_with(
-        QUESTION,
-        default=DEFAULT,
-        type=click.BOOL
-    )
+    click.prompt.assert_called_once_with(QUESTION, default=DEFAULT, type=click.BOOL)
diff --git a/tests/test_specify_output_dir.py b/tests/test_specify_output_dir.py
index 6c6a12b..97a7f2d 100644
--- a/tests/test_specify_output_dir.py
+++ b/tests/test_specify_output_dir.py
@@ -63,7 +63,7 @@ def test_api_invocation(mocker, template, output_dir, context):
         context=context,
         overwrite_if_exists=False,
         skip_if_file_exists=False,
-        output_dir=output_dir
+        output_dir=output_dir,
     )
 
 
@@ -78,5 +78,5 @@ def test_default_output_dir(mocker, template, context):
         context=context,
         overwrite_if_exists=False,
         skip_if_file_exists=False,
-        output_dir='.'
+        output_dir='.',
     )
diff --git a/tests/test_utils.py b/tests/test_utils.py
index 0863e5f..980a059 100644
--- a/tests/test_utils.py
+++ b/tests/test_utils.py
@@ -74,9 +74,7 @@ def test_prompt_should_ask_and_rm_repo_dir(mocker, tmpdir):
     """In `prompt_and_delete()`, if the user agrees to delete/reclone the \
     repo, the repo should be deleted."""
     mock_read_user = mocker.patch(
-        'cookiecutter.utils.read_user_yes_no',
-        return_value=True,
-        autospec=True
+        'cookiecutter.utils.read_user_yes_no', return_value=True, autospec=True
     )
     repo_dir = tmpdir.mkdir('repo')
 
@@ -91,13 +89,9 @@ def test_prompt_should_ask_and_exit_on_user_no_answer(mocker, tmpdir):
     """In `prompt_and_delete()`, if the user decline to delete/reclone the \
     repo, cookiecutter should exit."""
     mock_read_user = mocker.patch(
-        'cookiecutter.utils.read_user_yes_no',
-        return_value=False,
-    )
-    mock_sys_exit = mocker.patch(
-        'sys.exit',
-        return_value=True,
+        'cookiecutter.utils.read_user_yes_no', return_value=False,
     )
+    mock_sys_exit = mocker.patch('sys.exit', return_value=True)
     repo_dir = tmpdir.mkdir('repo')
 
     deleted = utils.prompt_and_delete(str(repo_dir))
@@ -112,9 +106,7 @@ def test_prompt_should_ask_and_rm_repo_file(mocker, tmpdir):
     """In `prompt_and_delete()`, if the user agrees to delete/reclone a \
     repo file, the repo should be deleted."""
     mock_read_user = mocker.patch(
-        'cookiecutter.utils.read_user_yes_no',
-        return_value=True,
-        autospec=True
+        'cookiecutter.utils.read_user_yes_no', return_value=True, autospec=True
     )
 
     repo_file = tmpdir.join('repo.zip')
@@ -131,9 +123,7 @@ def test_prompt_should_ask_and_keep_repo_on_no_reuse(mocker, tmpdir):
     """In `prompt_and_delete()`, if the user wants to keep their old \
     cloned template repo, it should not be deleted."""
     mock_read_user = mocker.patch(
-        'cookiecutter.utils.read_user_yes_no',
-        return_value=False,
-        autospec=True
+        'cookiecutter.utils.read_user_yes_no', return_value=False, autospec=True
     )
     repo_dir = tmpdir.mkdir('repo')
 
@@ -147,6 +137,7 @@ def test_prompt_should_ask_and_keep_repo_on_no_reuse(mocker, tmpdir):
 def test_prompt_should_ask_and_keep_repo_on_reuse(mocker, tmpdir):
     """In `prompt_and_delete()`, if the user wants to keep their old \
     cloned template repo, it should not be deleted."""
+
     def answer(question, default):
         if 'okay to delete' in question:
             return False
@@ -154,9 +145,7 @@ def test_prompt_should_ask_and_keep_repo_on_reuse(mocker, tmpdir):
             return True
 
     mock_read_user = mocker.patch(
-        'cookiecutter.utils.read_user_yes_no',
-        side_effect=answer,
-        autospec=True
+        'cookiecutter.utils.read_user_yes_no', side_effect=answer, autospec=True
     )
     repo_dir = tmpdir.mkdir('repo')
 
@@ -174,9 +163,7 @@ def test_prompt_should_not_ask_if_no_input_and_rm_repo_dir(mocker, tmpdir):
     `prompt.read_user_yes_no()` should be suppressed.
     """
     mock_read_user = mocker.patch(
-        'cookiecutter.prompt.read_user_yes_no',
-        return_value=True,
-        autospec=True
+        'cookiecutter.prompt.read_user_yes_no', return_value=True, autospec=True
     )
     repo_dir = tmpdir.mkdir('repo')
 
@@ -194,9 +181,7 @@ def test_prompt_should_not_ask_if_no_input_and_rm_repo_file(mocker, tmpdir):
     `prompt.read_user_yes_no()` should be suppressed.
     """
     mock_read_user = mocker.patch(
-        'cookiecutter.prompt.read_user_yes_no',
-        return_value=True,
-        autospec=True
+        'cookiecutter.prompt.read_user_yes_no', return_value=True, autospec=True
     )
 
     repo_file = tmpdir.join('repo.zip')
diff --git a/tests/vcs/test_clone.py b/tests/vcs/test_clone.py
index 8906db6..10c625d 100644
--- a/tests/vcs/test_clone.py
+++ b/tests/vcs/test_clone.py
@@ -20,11 +20,7 @@ def clone_dir(tmpdir):
 def test_clone_should_raise_if_vcs_not_installed(mocker, clone_dir):
     """In `clone()`, a `VCSNotInstalled` exception should be raised if no VCS \
     is installed."""
-    mocker.patch(
-        'cookiecutter.vcs.is_vcs_installed',
-        autospec=True,
-        return_value=False
-    )
+    mocker.patch('cookiecutter.vcs.is_vcs_installed', autospec=True, return_value=False)
 
     repo_url = 'https://github.com/pytest-dev/cookiecutter-pytest-plugin.git'
 
@@ -35,46 +31,30 @@ def test_clone_should_raise_if_vcs_not_installed(mocker, clone_dir):
 def test_clone_should_rstrip_trailing_slash_in_repo_url(mocker, clone_dir):
     """In `clone()`, repo URL's trailing slash should be stripped if one is \
     present."""
-    mocker.patch(
-        'cookiecutter.vcs.is_vcs_installed',
-        autospec=True,
-        return_value=True
-    )
+    mocker.patch('cookiecutter.vcs.is_vcs_installed', autospec=True, return_value=True)
 
     mock_subprocess = mocker.patch(
-        'cookiecutter.vcs.subprocess.check_output',
-        autospec=True,
+        'cookiecutter.vcs.subprocess.check_output', autospec=True,
     )
 
-    vcs.clone(
-        'https://github.com/foo/bar/',
-        clone_to_dir=clone_dir,
-        no_input=True
-    )
+    vcs.clone('https://github.com/foo/bar/', clone_to_dir=clone_dir, no_input=True)
 
     mock_subprocess.assert_called_once_with(
         ['git', 'clone', 'https://github.com/foo/bar'],
         cwd=clone_dir,
-        stderr=subprocess.STDOUT
+        stderr=subprocess.STDOUT,
     )
 
 
 def test_clone_should_abort_if_user_does_not_want_to_reclone(mocker, tmpdir):
     """In `clone()`, if user doesn't want to reclone, Cookiecutter should exit \
     without cloning anything."""
+    mocker.patch('cookiecutter.vcs.is_vcs_installed', autospec=True, return_value=True)
     mocker.patch(
-        'cookiecutter.vcs.is_vcs_installed',
-        autospec=True,
-        return_value=True
-    )
-    mocker.patch(
-        'cookiecutter.vcs.prompt_and_delete',
-        side_effect=SystemExit,
-        autospec=True
+        'cookiecutter.vcs.prompt_and_delete', side_effect=SystemExit, autospec=True
     )
     mock_subprocess = mocker.patch(
-        'cookiecutter.vcs.subprocess.check_output',
-        autospec=True,
+        'cookiecutter.vcs.subprocess.check_output', autospec=True,
     )
 
     clone_to_dir = tmpdir.mkdir('clone')
@@ -89,12 +69,16 @@ def test_clone_should_abort_if_user_does_not_want_to_reclone(mocker, tmpdir):
     assert not mock_subprocess.called
 
 
-@pytest.mark.parametrize('repo_type, repo_url, repo_name', [
-    ('git', 'https://github.com/hello/world.git', 'world'),
-    ('hg', 'https://bitbucket.org/foo/bar', 'bar'),
-])
+@pytest.mark.parametrize(
+    'repo_type, repo_url, repo_name',
+    [
+        ('git', 'https://github.com/hello/world.git', 'world'),
+        ('hg', 'https://bitbucket.org/foo/bar', 'bar'),
+    ],
+)
 def test_clone_should_invoke_vcs_command(
-        mocker, clone_dir, repo_type, repo_url, repo_name):
+    mocker, clone_dir, repo_type, repo_url, repo_name
+):
     """When `clone()` is called with a git/hg repo, the corresponding VCS \
     command should be run via `subprocess.check_output()`.
 
@@ -102,48 +86,38 @@ def test_clone_should_invoke_vcs_command(
     * In the correct dir
     * With the correct args.
     """
-    mocker.patch(
-        'cookiecutter.vcs.is_vcs_installed',
-        autospec=True,
-        return_value=True
-    )
+    mocker.patch('cookiecutter.vcs.is_vcs_installed', autospec=True, return_value=True)
 
     mock_subprocess = mocker.patch(
-        'cookiecutter.vcs.subprocess.check_output',
-        autospec=True,
+        'cookiecutter.vcs.subprocess.check_output', autospec=True,
     )
     expected_repo_dir = os.path.normpath(os.path.join(clone_dir, repo_name))
 
     branch = 'foobar'
 
     repo_dir = vcs.clone(
-        repo_url,
-        checkout=branch,
-        clone_to_dir=clone_dir,
-        no_input=True
+        repo_url, checkout=branch, clone_to_dir=clone_dir, no_input=True
     )
 
     assert repo_dir == expected_repo_dir
 
     mock_subprocess.assert_any_call(
-        [repo_type, 'clone', repo_url],
-        cwd=clone_dir,
-        stderr=subprocess.STDOUT
+        [repo_type, 'clone', repo_url], cwd=clone_dir, stderr=subprocess.STDOUT
     )
     mock_subprocess.assert_any_call(
-        [repo_type, 'checkout', branch],
-        cwd=expected_repo_dir,
-        stderr=subprocess.STDOUT
+        [repo_type, 'checkout', branch], cwd=expected_repo_dir, stderr=subprocess.STDOUT
     )
 
 
-@pytest.mark.parametrize('error_message', [
-    (
-        "fatal: repository 'https://github.com/hackebro/cookiedozer' "
-        "not found"
-    ).encode('utf-8'),
-    'hg: abort: HTTP Error 404: Not Found'.encode('utf-8'),
-])
+@pytest.mark.parametrize(
+    'error_message',
+    [
+        (
+            "fatal: repository 'https://github.com/hackebro/cookiedozer' " "not found"
+        ).encode('utf-8'),
+        'hg: abort: HTTP Error 404: Not Found'.encode('utf-8'),
+    ],
+)
 def test_clone_handles_repo_typo(mocker, clone_dir, error_message):
     """In `clone()`, repository not found errors should raise an \
     appropriate exception."""
@@ -153,40 +127,34 @@ def test_clone_handles_repo_typo(mocker, clone_dir, error_message):
     mocker.patch(
         'cookiecutter.vcs.subprocess.check_output',
         autospec=True,
-        side_effect=[subprocess.CalledProcessError(
-            -1, 'cmd', output=error_message
-        )]
+        side_effect=[subprocess.CalledProcessError(-1, 'cmd', output=error_message)],
     )
 
     repository_url = 'https://github.com/hackebro/cookiedozer'
     with pytest.raises(exceptions.RepositoryNotFound) as err:
-        vcs.clone(
-            repository_url,
-            clone_to_dir=clone_dir,
-            no_input=True
-        )
+        vcs.clone(repository_url, clone_to_dir=clone_dir, no_input=True)
 
     assert str(err.value) == (
         'The repository {} could not be found, have you made a typo?'
     ).format(repository_url)
 
 
-@pytest.mark.parametrize('error_message', [
-    (
-        "error: pathspec 'unknown_branch' did not match any file(s) known "
-        "to git"
-    ).encode('utf-8'),
-    "hg: abort: unknown revision 'unknown_branch'!".encode('utf-8'),
-])
+@pytest.mark.parametrize(
+    'error_message',
+    [
+        (
+            "error: pathspec 'unknown_branch' did not match any file(s) known " "to git"
+        ).encode('utf-8'),
+        "hg: abort: unknown revision 'unknown_branch'!".encode('utf-8'),
+    ],
+)
 def test_clone_handles_branch_typo(mocker, clone_dir, error_message):
     """In `clone()`, branch not found errors should raise an \
     appropriate exception."""
     mocker.patch(
         'cookiecutter.vcs.subprocess.check_output',
         autospec=True,
-        side_effect=[subprocess.CalledProcessError(
-            -1, 'cmd', output=error_message
-        )]
+        side_effect=[subprocess.CalledProcessError(-1, 'cmd', output=error_message)],
     )
 
     repository_url = 'https://github.com/pytest-dev/cookiecutter-pytest-plugin'
@@ -195,7 +163,7 @@ def test_clone_handles_branch_typo(mocker, clone_dir, error_message):
             repository_url,
             clone_to_dir=clone_dir,
             checkout='unknown_branch',
-            no_input=True
+            no_input=True,
         )
 
     assert str(err.value) == (
@@ -209,14 +177,16 @@ def test_clone_unknown_subprocess_error(mocker, clone_dir):
     mocker.patch(
         'cookiecutter.vcs.subprocess.check_output',
         autospec=True,
-        side_effect=[subprocess.CalledProcessError(
-            -1, 'cmd', output='Something went wrong'.encode('utf-8')
-        )]
+        side_effect=[
+            subprocess.CalledProcessError(
+                -1, 'cmd', output='Something went wrong'.encode('utf-8')
+            )
+        ],
     )
 
     with pytest.raises(subprocess.CalledProcessError):
         vcs.clone(
             'https://github.com/pytest-dev/cookiecutter-pytest-plugin',
             clone_to_dir=clone_dir,
-            no_input=True
+            no_input=True,
         )
diff --git a/tests/vcs/test_identify_repo.py b/tests/vcs/test_identify_repo.py
index f775d50..eb8cc15 100644
--- a/tests/vcs/test_identify_repo.py
+++ b/tests/vcs/test_identify_repo.py
@@ -7,53 +7,61 @@ import pytest
 from cookiecutter import exceptions, vcs
 
 
-@pytest.mark.parametrize('repo_url, exp_repo_type, exp_repo_url', [
-    (
-        'git+https://github.com/pytest-dev/cookiecutter-pytest-plugin.git',
-        'git',
-        'https://github.com/pytest-dev/cookiecutter-pytest-plugin.git'
-    ), (
-        'hg+https://bitbucket.org/foo/bar.hg',
-        'hg',
-        'https://bitbucket.org/foo/bar.hg'
-    ), (
-        'https://github.com/pytest-dev/cookiecutter-pytest-plugin.git',
-        'git',
-        'https://github.com/pytest-dev/cookiecutter-pytest-plugin.git'
-    ), (
-        'https://bitbucket.org/foo/bar.hg',
-        'hg',
-        'https://bitbucket.org/foo/bar.hg'
-    ), (
-        'https://github.com/audreyr/cookiecutter-pypackage.git',
-        'git',
-        'https://github.com/audreyr/cookiecutter-pypackage.git',
-    ), (
-        'https://github.com/audreyr/cookiecutter-pypackage',
-        'git',
-        'https://github.com/audreyr/cookiecutter-pypackage',
-    ), (
-        'git@gitorious.org:cookiecutter-gitorious/cookiecutter-gitorious.git',
-        'git',
-        'git@gitorious.org:cookiecutter-gitorious/cookiecutter-gitorious.git',
-    ), (
-        'https://audreyr@bitbucket.org/audreyr/cookiecutter-bitbucket',
-        'hg',
-        'https://audreyr@bitbucket.org/audreyr/cookiecutter-bitbucket',
-    )
-])
+@pytest.mark.parametrize(
+    'repo_url, exp_repo_type, exp_repo_url',
+    [
+        (
+            'git+https://github.com/pytest-dev/cookiecutter-pytest-plugin.git',
+            'git',
+            'https://github.com/pytest-dev/cookiecutter-pytest-plugin.git',
+        ),
+        (
+            'hg+https://bitbucket.org/foo/bar.hg',
+            'hg',
+            'https://bitbucket.org/foo/bar.hg',
+        ),
+        (
+            'https://github.com/pytest-dev/cookiecutter-pytest-plugin.git',
+            'git',
+            'https://github.com/pytest-dev/cookiecutter-pytest-plugin.git',
+        ),
+        ('https://bitbucket.org/foo/bar.hg', 'hg', 'https://bitbucket.org/foo/bar.hg'),
+        (
+            'https://github.com/audreyr/cookiecutter-pypackage.git',
+            'git',
+            'https://github.com/audreyr/cookiecutter-pypackage.git',
+        ),
+        (
+            'https://github.com/audreyr/cookiecutter-pypackage',
+            'git',
+            'https://github.com/audreyr/cookiecutter-pypackage',
+        ),
+        (
+            'git@gitorious.org:cookiecutter-gitorious/cookiecutter-gitorious.git',
+            'git',
+            'git@gitorious.org:cookiecutter-gitorious/cookiecutter-gitorious.git',
+        ),
+        (
+            'https://audreyr@bitbucket.org/audreyr/cookiecutter-bitbucket',
+            'hg',
+            'https://audreyr@bitbucket.org/audreyr/cookiecutter-bitbucket',
+        ),
+    ],
+)
 def test_identify_known_repo(repo_url, exp_repo_type, exp_repo_url):
     """Verify different correct repositories url syntax is correctly transformed."""
     assert vcs.identify_repo(repo_url) == (exp_repo_type, exp_repo_url)
 
 
-@pytest.fixture(params=[
-    'foo+git',  # uses explicit identifier with 'git' in the wrong place
-    'foo+hg',  # uses explicit identifier with 'hg' in the wrong place
-    'foo+bar',  # uses explicit identifier with neither 'git' nor 'hg'
-    'foobar',  # no identifier but neither 'git' nor 'bitbucket' in url
-    'http://norepotypespecified.com'
-])
+@pytest.fixture(
+    params=[
+        'foo+git',  # uses explicit identifier with 'git' in the wrong place
+        'foo+hg',  # uses explicit identifier with 'hg' in the wrong place
+        'foo+bar',  # uses explicit identifier with neither 'git' nor 'hg'
+        'foobar',  # no identifier but neither 'git' nor 'bitbucket' in url
+        'http://norepotypespecified.com',
+    ]
+)
 def unknown_repo_type_url(request):
     """Fixture. Return wrong formatted repository url."""
     return request.param
diff --git a/tests/vcs/test_is_vcs_installed.py b/tests/vcs/test_is_vcs_installed.py
index a7ceb5a..8ff9222 100644
--- a/tests/vcs/test_is_vcs_installed.py
+++ b/tests/vcs/test_is_vcs_installed.py
@@ -7,17 +7,11 @@ import pytest
 from cookiecutter import vcs
 
 
-@pytest.mark.parametrize('which_return, result', [
-    ('', False),
-    (None, False),
-    (False, False),
-    ('/usr/local/bin/git', True),
-])
+@pytest.mark.parametrize(
+    'which_return, result',
+    [('', False), (None, False), (False, False), ('/usr/local/bin/git', True)],
+)
 def test_is_vcs_installed(mocker, which_return, result):
     """Verify `is_vcs_installed` function correctly handles `which` answer."""
-    mocker.patch(
-        'cookiecutter.vcs.which',
-        autospec=True,
-        return_value=which_return
-    )
+    mocker.patch('cookiecutter.vcs.which', autospec=True, return_value=which_return)
     assert vcs.is_vcs_installed('git') == result
diff --git a/tests/zipfile/test_unzip.py b/tests/zipfile/test_unzip.py
index d8ab757..d1d33dc 100644
--- a/tests/zipfile/test_unzip.py
+++ b/tests/zipfile/test_unzip.py
@@ -23,17 +23,13 @@ def mock_download():
 def test_unzip_local_file(mocker, tmpdir):
     """Local file reference can be unzipped."""
     mock_prompt_and_delete = mocker.patch(
-        'cookiecutter.zipfile.prompt_and_delete',
-        return_value=True,
-        autospec=True
+        'cookiecutter.zipfile.prompt_and_delete', return_value=True, autospec=True
     )
 
     clone_to_dir = tmpdir.mkdir('clone')
 
     output_dir = zipfile.unzip(
-        'tests/files/fake-repo-tmpl.zip',
-        is_url=False,
-        clone_to_dir=str(clone_to_dir)
+        'tests/files/fake-repo-tmpl.zip', is_url=False, clone_to_dir=str(clone_to_dir)
     )
 
     assert output_dir.startswith(tempfile.gettempdir())
@@ -43,9 +39,7 @@ def test_unzip_local_file(mocker, tmpdir):
 def test_unzip_protected_local_file_environment_password(mocker, tmpdir):
     """In `unzip()`, the environment can be used to provide a repo password."""
     mock_prompt_and_delete = mocker.patch(
-        'cookiecutter.zipfile.prompt_and_delete',
-        return_value=True,
-        autospec=True
+        'cookiecutter.zipfile.prompt_and_delete', return_value=True, autospec=True
     )
 
     clone_to_dir = tmpdir.mkdir('clone')
@@ -54,7 +48,7 @@ def test_unzip_protected_local_file_environment_password(mocker, tmpdir):
         'tests/files/protected-fake-repo-tmpl.zip',
         is_url=False,
         clone_to_dir=str(clone_to_dir),
-        password='sekrit'
+        password='sekrit',
     )
 
     assert output_dir.startswith(tempfile.gettempdir())
@@ -64,9 +58,7 @@ def test_unzip_protected_local_file_environment_password(mocker, tmpdir):
 def test_unzip_protected_local_file_bad_environment_password(mocker, tmpdir):
     """In `unzip()`, an error occurs if the environment has a bad password."""
     mocker.patch(
-        'cookiecutter.zipfile.prompt_and_delete',
-        return_value=True,
-        autospec=True
+        'cookiecutter.zipfile.prompt_and_delete', return_value=True, autospec=True
     )
 
     clone_to_dir = tmpdir.mkdir('clone')
@@ -76,16 +68,14 @@ def test_unzip_protected_local_file_bad_environment_password(mocker, tmpdir):
             'tests/files/protected-fake-repo-tmpl.zip',
             is_url=False,
             clone_to_dir=str(clone_to_dir),
-            password='not-the-right-password'
+            password='not-the-right-password',
         )
 
 
 def test_unzip_protected_local_file_user_password_with_noinput(mocker, tmpdir):
     """Can't unpack a password-protected repo in no_input mode."""
     mocker.patch(
-        'cookiecutter.zipfile.prompt_and_delete',
-        return_value=True,
-        autospec=True
+        'cookiecutter.zipfile.prompt_and_delete', return_value=True, autospec=True
     )
 
     clone_to_dir = tmpdir.mkdir('clone')
@@ -95,28 +85,23 @@ def test_unzip_protected_local_file_user_password_with_noinput(mocker, tmpdir):
             'tests/files/protected-fake-repo-tmpl.zip',
             is_url=False,
             clone_to_dir=str(clone_to_dir),
-            no_input=True
+            no_input=True,
         )
 
 
 def test_unzip_protected_local_file_user_password(mocker, tmpdir):
     """A password-protected local file reference can be unzipped."""
     mock_prompt_and_delete = mocker.patch(
-        'cookiecutter.zipfile.prompt_and_delete',
-        return_value=True,
-        autospec=True
-    )
-    mocker.patch(
-        'cookiecutter.zipfile.read_repo_password',
-        return_value='sekrit'
+        'cookiecutter.zipfile.prompt_and_delete', return_value=True, autospec=True
     )
+    mocker.patch('cookiecutter.zipfile.read_repo_password', return_value='sekrit')
 
     clone_to_dir = tmpdir.mkdir('clone')
 
     output_dir = zipfile.unzip(
         'tests/files/protected-fake-repo-tmpl.zip',
         is_url=False,
-        clone_to_dir=str(clone_to_dir)
+        clone_to_dir=str(clone_to_dir),
     )
 
     assert output_dir.startswith(tempfile.gettempdir())
@@ -126,13 +111,10 @@ def test_unzip_protected_local_file_user_password(mocker, tmpdir):
 def test_unzip_protected_local_file_user_bad_password(mocker, tmpdir):
     """Error in `unzip()`, if user can't provide a valid password."""
     mocker.patch(
-        'cookiecutter.zipfile.prompt_and_delete',
-        return_value=True,
-        autospec=True
+        'cookiecutter.zipfile.prompt_and_delete', return_value=True, autospec=True
     )
     mocker.patch(
-        'cookiecutter.zipfile.read_repo_password',
-        return_value='not-the-right-password'
+        'cookiecutter.zipfile.read_repo_password', return_value='not-the-right-password'
     )
 
     clone_to_dir = tmpdir.mkdir('clone')
@@ -141,79 +123,63 @@ def test_unzip_protected_local_file_user_bad_password(mocker, tmpdir):
         zipfile.unzip(
             'tests/files/protected-fake-repo-tmpl.zip',
             is_url=False,
-            clone_to_dir=str(clone_to_dir)
+            clone_to_dir=str(clone_to_dir),
         )
 
 
 def test_empty_zip_file(mocker, tmpdir):
     """In `unzip()`, an empty file raises an error."""
     mocker.patch(
-        'cookiecutter.zipfile.prompt_and_delete',
-        return_value=True,
-        autospec=True
+        'cookiecutter.zipfile.prompt_and_delete', return_value=True, autospec=True
     )
 
     clone_to_dir = tmpdir.mkdir('clone')
 
     with pytest.raises(InvalidZipRepository):
         zipfile.unzip(
-            'tests/files/empty.zip',
-            is_url=False,
-            clone_to_dir=str(clone_to_dir)
+            'tests/files/empty.zip', is_url=False, clone_to_dir=str(clone_to_dir)
         )
 
 
 def test_non_repo_zip_file(mocker, tmpdir):
     """In `unzip()`, a repository must have a top level directory."""
     mocker.patch(
-        'cookiecutter.zipfile.prompt_and_delete',
-        return_value=True,
-        autospec=True
+        'cookiecutter.zipfile.prompt_and_delete', return_value=True, autospec=True
     )
 
     clone_to_dir = tmpdir.mkdir('clone')
 
     with pytest.raises(InvalidZipRepository):
         zipfile.unzip(
-            'tests/files/not-a-repo.zip',
-            is_url=False,
-            clone_to_dir=str(clone_to_dir)
+            'tests/files/not-a-repo.zip', is_url=False, clone_to_dir=str(clone_to_dir)
         )
 
 
 def test_bad_zip_file(mocker, tmpdir):
     """In `unzip()`, a corrupted zip file raises an error."""
     mocker.patch(
-        'cookiecutter.zipfile.prompt_and_delete',
-        return_value=True,
-        autospec=True
+        'cookiecutter.zipfile.prompt_and_delete', return_value=True, autospec=True
     )
 
     clone_to_dir = tmpdir.mkdir('clone')
 
     with pytest.raises(InvalidZipRepository):
         zipfile.unzip(
-            'tests/files/bad-zip-file.zip',
-            is_url=False,
-            clone_to_dir=str(clone_to_dir)
+            'tests/files/bad-zip-file.zip', is_url=False, clone_to_dir=str(clone_to_dir)
         )
 
 
 def test_unzip_url(mocker, tmpdir):
     """In `unzip()`, a url will be downloaded and unzipped."""
     mock_prompt_and_delete = mocker.patch(
-        'cookiecutter.zipfile.prompt_and_delete',
-        return_value=True,
-        autospec=True
+        'cookiecutter.zipfile.prompt_and_delete', return_value=True, autospec=True
     )
 
     request = mocker.MagicMock()
     request.iter_content.return_value = mock_download()
 
     mocker.patch(
-        'cookiecutter.zipfile.requests.get',
-        return_value=request,
-        autospec=True,
+        'cookiecutter.zipfile.requests.get', return_value=request, autospec=True,
     )
 
     clone_to_dir = tmpdir.mkdir('clone')
@@ -221,7 +187,7 @@ def test_unzip_url(mocker, tmpdir):
     output_dir = zipfile.unzip(
         'https://example.com/path/to/fake-repo-tmpl.zip',
         is_url=True,
-        clone_to_dir=str(clone_to_dir)
+        clone_to_dir=str(clone_to_dir),
     )
 
     assert output_dir.startswith(tempfile.gettempdir())
@@ -231,18 +197,14 @@ def test_unzip_url(mocker, tmpdir):
 def test_unzip_url_existing_cache(mocker, tmpdir):
     """Url should be downloaded and unzipped, old zip file will be removed."""
     mock_prompt_and_delete = mocker.patch(
-        'cookiecutter.zipfile.prompt_and_delete',
-        return_value=True,
-        autospec=True
+        'cookiecutter.zipfile.prompt_and_delete', return_value=True, autospec=True
     )
 
     request = mocker.MagicMock()
     request.iter_content.return_value = mock_download()
 
     mocker.patch(
-        'cookiecutter.zipfile.requests.get',
-        return_value=request,
-        autospec=True,
+        'cookiecutter.zipfile.requests.get', return_value=request, autospec=True,
     )
 
     clone_to_dir = tmpdir.mkdir('clone')
@@ -254,7 +216,7 @@ def test_unzip_url_existing_cache(mocker, tmpdir):
     output_dir = zipfile.unzip(
         'https://example.com/path/to/fake-repo-tmpl.zip',
         is_url=True,
-        clone_to_dir=str(clone_to_dir)
+        clone_to_dir=str(clone_to_dir),
     )
 
     assert output_dir.startswith(tempfile.gettempdir())
@@ -267,9 +229,7 @@ def test_unzip_url_existing_cache_no_input(mocker, tmpdir):
     request.iter_content.return_value = mock_download()
 
     mocker.patch(
-        'cookiecutter.zipfile.requests.get',
-        return_value=request,
-        autospec=True,
+        'cookiecutter.zipfile.requests.get', return_value=request, autospec=True,
     )
 
     clone_to_dir = tmpdir.mkdir('clone')
@@ -282,7 +242,7 @@ def test_unzip_url_existing_cache_no_input(mocker, tmpdir):
         'https://example.com/path/to/fake-repo-tmpl.zip',
         is_url=True,
         clone_to_dir=str(clone_to_dir),
-        no_input=True
+        no_input=True,
     )
 
     assert output_dir.startswith(tempfile.gettempdir())
@@ -291,14 +251,11 @@ def test_unzip_url_existing_cache_no_input(mocker, tmpdir):
 def test_unzip_should_abort_if_no_redownload(mocker, tmpdir):
     """Should exit without cloning anything If no redownload."""
     mocker.patch(
-        'cookiecutter.zipfile.prompt_and_delete',
-        side_effect=SystemExit,
-        autospec=True
+        'cookiecutter.zipfile.prompt_and_delete', side_effect=SystemExit, autospec=True
     )
 
     mock_requests_get = mocker.patch(
-        'cookiecutter.zipfile.requests.get',
-        autospec=True,
+        'cookiecutter.zipfile.requests.get', autospec=True,
     )
 
     clone_to_dir = tmpdir.mkdir('clone')
