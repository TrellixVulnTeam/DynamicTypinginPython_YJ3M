commit 6e48337eb8f21d787d002274a3253665f6df27f6
Author: Audrey Roy <audreyr@gmail.com>
Date:   Sun Jul 21 14:50:51 2013 +0200

    Constrain input_dir to always be templated. Eliminate output_dir.

diff --git a/cookiecutter/exceptions.py b/cookiecutter/exceptions.py
new file mode 100755
index 0000000..11d8920
--- /dev/null
+++ b/cookiecutter/exceptions.py
@@ -0,0 +1,24 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+
+"""
+cookiecutter.exceptions
+---------------------
+
+Cookiecutter-specific exceptions.
+"""
+
+
+class CookiecutterException(Exception):
+    """
+    Base exception class. All Cookiecutter-specific exceptions should subclass
+    this class.
+    """
+
+
+class NonTemplatedInputDirException(CookiecutterException):
+    """
+    Raised when a project's input dir is not templated. 
+    The name of the input directory should always contain a string that is
+    rendered to something else, so that input_dir != output_dir.
+    """
diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 6041648..ef99ddb 100755
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -6,6 +6,7 @@ import os
 from jinja2 import FileSystemLoader, Template
 from jinja2.environment import Environment
 
+from .exceptions import NonTemplatedInputDirException
 from .utils import make_sure_path_exists, unicode_open
 
 
@@ -48,7 +49,7 @@ def generate_context(json_dir='json/'):
     return context
 
 
-def generate_files(input_dir, output_dir, context=None):
+def generate_files(input_dir, context=None):
     """ Renders the templates and saves them to files. """
 
     context = context or {}
@@ -56,9 +57,12 @@ def generate_files(input_dir, output_dir, context=None):
     env.loader = FileSystemLoader('.')
 
     # Render dirname before writing
-    name_tmpl = Template(output_dir)
-    rendered_dirname = name_tmpl.render(**context)
-    make_sure_path_exists(rendered_dirname)
+    name_tmpl = Template(input_dir)
+    output_dir = name_tmpl.render(**context)
+    if output_dir == input_dir:
+        raise NonTemplatedInputDirException
+        
+    make_sure_path_exists(output_dir)
 
     for root, dirs, files in os.walk(input_dir):
         for d in dirs:
diff --git a/tests/input{{food}}/simple.txt b/tests/input{{food}}/simple.txt
new file mode 100644
index 0000000..a459ce5
--- /dev/null
+++ b/tests/input{{food}}/simple.txt
@@ -0,0 +1 @@
+I eat {{ food }}
\ No newline at end of file
diff --git a/tests/input2/folder/in_folder.txt b/tests/input{{stuff.color}}/folder/in_folder.txt
similarity index 100%
rename from tests/input2/folder/in_folder.txt
rename to tests/input{{stuff.color}}/folder/in_folder.txt
diff --git a/tests/input2/something.txt b/tests/input{{stuff.color}}/something.txt
similarity index 100%
rename from tests/input2/something.txt
rename to tests/input{{stuff.color}}/something.txt
diff --git a/tests/input2/{{stuff.folder_name}}/{{stuff.filename}}.py b/tests/input{{stuff.color}}/{{stuff.folder_name}}/{{stuff.filename}}.py
similarity index 100%
rename from tests/input2/{{stuff.folder_name}}/{{stuff.filename}}.py
rename to tests/input{{stuff.color}}/{{stuff.folder_name}}/{{stuff.filename}}.py
diff --git a/tests/test_generate.py b/tests/test_generate.py
index e2cad96..9bb0624 100755
--- a/tests/test_generate.py
+++ b/tests/test_generate.py
@@ -16,18 +16,25 @@ from jinja2 import FileSystemLoader
 from jinja2.environment import Environment
 
 from cookiecutter import generate
-
+from cookiecutter import exceptions
 
 class TestGenerate(unittest.TestCase):
 
+    def test_generate_files_bad(self):
+        self.assertRaises(
+            exceptions.NonTemplatedInputDirException,
+            generate.generate_files,
+            context={'food': 'pizza'}, 
+            input_dir='tests/input'
+        )
+
     def test_generate_files(self):
         generate.generate_files(
             context={'food': 'pizza'},
-            input_dir='tests/input',
-            output_dir='tests/output'
+            input_dir='tests/input{{food}}'
         )
-        self.assertTrue(os.path.isfile('tests/output/simple.txt'))
-        simple_text = open('tests/output/simple.txt', 'rt').read()
+        self.assertTrue(os.path.isfile('tests/inputpizza/simple.txt'))
+        simple_text = open('tests/inputpizza/simple.txt', 'rt').read()
         self.assertEqual(simple_text, 'I eat pizza')
 
     def test_generate_context(self):
@@ -38,28 +45,27 @@ class TestGenerate(unittest.TestCase):
         context = generate.generate_context(json_dir='tests/json2')
         generate.generate_files(
             context=context,
-            input_dir='tests/input2',
-            output_dir='tests/output2'
+            input_dir='tests/input{{stuff.color}}'
         )
         
         something = """Hi!
 My name is Audrey Greenfeld.
 It is 2014."""
-        something2 = open('tests/output2/something.txt').read()
+        something2 = open('tests/inputgreen/something.txt').read()
         self.assertEqual(something, something2)
         
         in_folder = "The color is green and the letter is D."
-        in_folder2 = open('tests/output2/folder/in_folder.txt').read()
+        in_folder2 = open('tests/inputgreen/folder/in_folder.txt').read()
         self.assertEqual(in_folder, in_folder2)
         
-        self.assertTrue(os.path.isdir('tests/output2/im_a.dir'))
-        self.assertTrue(os.path.isfile('tests/output2/im_a.dir/im_a.file.py'))
+        self.assertTrue(os.path.isdir('tests/inputgreen/im_a.dir'))
+        self.assertTrue(os.path.isfile('tests/inputgreen/im_a.dir/im_a.file.py'))
 
     def tearDown(self):
-        if os.path.exists('tests/output'):
-            shutil.rmtree('tests/output')
-        if os.path.exists('tests/output2'):
-            shutil.rmtree('tests/output2')
+        if os.path.exists('tests/inputpizza'):
+            shutil.rmtree('tests/inputpizza')
+        if os.path.exists('tests/inputgreen'):
+            shutil.rmtree('tests/inputgreen')
 
 if __name__ == '__main__':
     unittest.main()
