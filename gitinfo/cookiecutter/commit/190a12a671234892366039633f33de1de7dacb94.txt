commit 190a12a671234892366039633f33de1de7dacb94
Author: Andrey Shpak <ashpak@ashpak.ru>
Date:   Sun Sep 8 22:14:07 2019 +0300

    Dedunded code lines + new templates

diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 0550ff6..c4a616f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -48,8 +48,8 @@ Cookiecutter could always use more documentation, whether as part of the officia
 If you want to review your changes on the documentation locally, you can do:
 
 ```bash
-    pip install -r docs/requirements.txt
-    make servedocs
+pip install -r docs/requirements.txt
+make servedocs
 ```
 
 This will compile the documentation, open it in your browser and start watching the files for changes, recompiling as you save.
@@ -72,21 +72,21 @@ Here's how to set up `cookiecutter` for local development.
 2. Clone your fork locally:
 
 ```bash
-    git clone git@github.com:your_name_here/cookiecutter.git
+git clone git@github.com:your_name_here/cookiecutter.git
 ```
 
 3. Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development:
 
 ```bash
-    mkvirtualenv cookiecutter
-    cd cookiecutter/
-    python setup.py develop
+mkvirtualenv cookiecutter
+cd cookiecutter/
+python setup.py develop
 ```
 
 4. Create a branch for local development:
 
 ```bash
-    git checkout -b name-of-your-bugfix-or-feature
+git checkout -b name-of-your-bugfix-or-feature
 ```
 
 Now you can make your changes locally.
@@ -94,8 +94,8 @@ Now you can make your changes locally.
 5. When you're done making changes, check that your changes pass the tests and flake8:
 
 ```bash
-    pip install tox
-    tox
+pip install tox
+tox
 ```
 
 Please note that tox runs flake8 automatically, since we have a test environment for it.
@@ -103,21 +103,21 @@ Please note that tox runs flake8 automatically, since we have a test environment
 If you feel like running only the flake8 environment, please use the following command:
 
 ```bash
-    tox -e flake8
+tox -e flake8
 ```
 
 6. Commit your changes and push your branch to GitHub:
 
 ```bash
-    git add .
-    git commit -m "Your detailed description of your changes."
-    git push origin name-of-your-bugfix-or-feature
+git add .
+git commit -m "Your detailed description of your changes."
+git push origin name-of-your-bugfix-or-feature
 ```
 
 7. Check that the test coverage hasn't dropped:
 
 ```bash
-    tox -e cov-report
+tox -e cov-report
 ```
 
 8. Submit a pull request through the GitHub website.
@@ -145,16 +145,16 @@ Before you submit a pull request, check that it meets these guidelines:
   * Example:
 
 ```python
-    LIGHT_MESSAGES = {
-        'English': "There are %(number_of_lights)s lights.",
-        'Pirate':  "Arr! Thar be %(number_of_lights)s lights."
-    }
-    def lights_message(language, number_of_lights):
-        """Return a language-appropriate string reporting the light count."""
-        return LIGHT_MESSAGES[language] % locals()
-    def is_pirate(message):
-        """Return True if the given message sounds piratical."""
-        return re.search(r"(?i)(arr|avast|yohoho)!", message) is not None
+LIGHT_MESSAGES = {
+    'English': "There are %(number_of_lights)s lights.",
+    'Pirate':  "Arr! Thar be %(number_of_lights)s lights."
+}
+def lights_message(language, number_of_lights):
+    """Return a language-appropriate string reporting the light count."""
+    return LIGHT_MESSAGES[language] % locals()
+def is_pirate(message):
+    """Return True if the given message sounds piratical."""
+    return re.search(r"(?i)(arr|avast|yohoho)!", message) is not None
 ```
 
 * Write new code in Python 3.
@@ -168,13 +168,13 @@ For further information please consult the [`pytest usage docs`](http://pytest.o
 To run a particular test class with tox:
 
 ```bash
-    tox -e py '-k TestFindHooks'
+tox -e py '-k TestFindHooks'
 ```
 
 To run some tests with names matching a string expression:
 
 ```bash
-    tox -e py '-k generate'
+tox -e py '-k generate'
 ```
 
 Will run all tests matching "generate", test_generate_files for example.
@@ -182,13 +182,13 @@ Will run all tests matching "generate", test_generate_files for example.
 To run just one method:
 
 ```bash
-    tox -e py '-k "TestFindHooks and test_find_hook"'
+tox -e py '-k "TestFindHooks and test_find_hook"'
 ```
 
 To run all tests using various versions of python in virtualenvs defined in tox.ini, just run tox:
 
 ```bash
-    tox
+tox
 ```
 
 This configuration file setup the pytest-cov plugin and it is an additional dependency. It generate a coverage report after the tests.
@@ -196,7 +196,7 @@ This configuration file setup the pytest-cov plugin and it is an additional depe
 It is possible to tests with some versions of python, to do this the command is:
 
 ```bash
-    tox -e py27,py35,pypy
+tox -e py27,py35,pypy
 ```
 
 Will run py.test with the python2.7, python3.5 and pypy interpreters, for example.
@@ -322,25 +322,22 @@ If you merge a pull request, you're responsible for updating `AUTHORS.md` and `H
 
 When you're processing the first change after a release, create boilerplate following the existing pattern:
 
-```rest
-    x.y.z (Development)
+```md
+## x.y.z (Development)
 
-    The goals of this release are TODO: release summary of features
+The goals of this release are TODO: release summary of features
 
-    Features:
+Features:
 
-    * Feature description, thanks to @contributor (#PR).
+* Feature description, thanks to [@contributor](https://github.com/contributor) (#PR).
 
-    Bug Fixes:
+Bug Fixes:
 
-    * Bug fix description, thanks to @contributor (#PR).
+* Bug fix description, thanks to [@contributor](https://github.com/contributor) (#PR).
 
-    Other changes:
-
-    * Description of the change, thanks to @contributor (#PR).
-
-    .. _`@contributor`: https://github.com/contributor
+Other changes:
 
+* Description of the change, thanks to [@contributor](https://github.com/contributor) (#PR).
 ```
 
 ### Process: Accepting Template Pull Requests
@@ -380,5 +377,3 @@ Contributors may be given core commit privileges. Preference will be given to th
 2. A coding style that the other core committers find simple, minimal, and clean.
 3. Access to resources for cross-platform development and testing.
 4. Time to devote to the project regularly.
-
-Autogenerated from the docs via `make contributing`
diff --git a/README.md b/README.md
index 8ff2f84..e04e9be 100644
--- a/README.md
+++ b/README.md
@@ -34,39 +34,39 @@ Did someone say features?
 * Simple command line usage:
 
 ```bash
-    # Create project from the cookiecutter-pypackage.git repo template
-    # You'll be prompted to enter values.
-    # Then it'll create your Python package in the current working directory,
-    # based on those values.
-    $ cookiecutter https://github.com/audreyr/cookiecutter-pypackage
-    # For the sake of brevity, repos on GitHub can just use the 'gh' prefix
-    $ cookiecutter gh:audreyr/cookiecutter-pypackage
+# Create project from the cookiecutter-pypackage.git repo template
+# You'll be prompted to enter values.
+# Then it'll create your Python package in the current working directory,
+# based on those values.
+$ cookiecutter https://github.com/audreyr/cookiecutter-pypackage
+# For the sake of brevity, repos on GitHub can just use the 'gh' prefix
+$ cookiecutter gh:audreyr/cookiecutter-pypackage
 ```
 
 * Use it at the command line with a local template:
 
 ```bash
-    # Create project in the current working directory, from the local
-    # cookiecutter-pypackage/ template
-    $ cookiecutter cookiecutter-pypackage/
+# Create project in the current working directory, from the local
+# cookiecutter-pypackage/ template
+$ cookiecutter cookiecutter-pypackage/
 ```
 
 * Or use it from Python:
 
 ```py
-    from cookiecutter.main import cookiecutter
+from cookiecutter.main import cookiecutter
 
-    # Create project from the cookiecutter-pypackage/ template
-    cookiecutter('cookiecutter-pypackage/')
+# Create project from the cookiecutter-pypackage/ template
+cookiecutter('cookiecutter-pypackage/')
 
-    # Create project from the cookiecutter-pypackage.git repo template
-    cookiecutter('https://github.com/audreyr/cookiecutter-pypackage.git')
+# Create project from the cookiecutter-pypackage.git repo template
+cookiecutter('https://github.com/audreyr/cookiecutter-pypackage.git')
 ```
 
 * Directory names and filenames can be templated. For example:
 
 ```py
-    {{cookiecutter.repo_name}}/{{cookiecutter.repo_name}}/{{cookiecutter.repo_name}}.py
+{{cookiecutter.repo_name}}/{{cookiecutter.repo_name}}/{{cookiecutter.repo_name}}.py
 ```
 
 * Supports unlimited levels of directory nesting.
@@ -76,16 +76,16 @@ Did someone say features?
 * Simply define your template variables in a ``cookiecutter.json`` file. For example:
 
 ```json
-    {
-        "full_name": "Audrey Roy",
-        "email": "audreyr@gmail.com",
-        "project_name": "Complexity",
-        "repo_name": "complexity",
-        "project_short_description": "Refreshingly simple static site generator.",
-        "release_date": "2013-07-10",
-        "year": "2013",
-        "version": "0.1.1"
-    }
+{
+    "full_name": "Audrey Roy",
+    "email": "audreyr@gmail.com",
+    "project_name": "Complexity",
+    "repo_name": "complexity",
+    "project_short_description": "Refreshingly simple static site generator.",
+    "release_date": "2013-07-10",
+    "year": "2013",
+    "version": "0.1.1"
+}
 ```
 
 * Unless you suppress it with ``--no-input``, you are prompted for input:
@@ -97,11 +97,11 @@ Did someone say features?
 * Cross-platform support for ``~/.cookiecutterrc`` files:
 
 ```yaml
-    default_context:
-    full_name: "Audrey Roy"
-    email: "audreyr@gmail.com"
-    github_username: "audreyr"
-    cookiecutters_dir: "~/.cookiecutters/"
+default_context:
+full_name: "Audrey Roy"
+email: "audreyr@gmail.com"
+github_username: "audreyr"
+cookiecutters_dir: "~/.cookiecutters/"
 ```
 
 * Cookiecutters (cloned Cookiecutter project templates) are put into ``~/.cookiecutters/`` by default, or cookiecutters_dir if specified.
@@ -109,10 +109,10 @@ Did someone say features?
 * If you have already cloned a cookiecutter into ``~/.cookiecutters/``, you can reference it by directory name:
 
 ```bash
-    # Clone cookiecutter-pypackage
-    $ cookiecutter gh:audreyr/cookiecutter-pypackage
-    # Now you can use the already cloned cookiecutter by name
-    $ cookiecutter cookiecutter-pypackage
+# Clone cookiecutter-pypackage
+$ cookiecutter gh:audreyr/cookiecutter-pypackage
+# Now you can use the already cloned cookiecutter by name
+$ cookiecutter cookiecutter-pypackage
 ```
 
 * You can use local cookiecutters, or remote cookiecutters directly from Git repos or from Mercurial repos on Bitbucket.
@@ -122,7 +122,7 @@ Did someone say features?
 * Inject extra context with command-line arguments:
 
 ```bash
-    cookiecutter --no-input gh:msabramo/cookiecutter-supervisor program_name=foobar startsecs=10
+cookiecutter --no-input gh:msabramo/cookiecutter-supervisor program_name=foobar startsecs=10
 ```
 
 * Direct access to the Cookiecutter API allows for injection of extra context.
diff --git a/docs/conf.py b/docs/conf.py
index fd8f2ca..6d99f34 100644
--- a/docs/conf.py
+++ b/docs/conf.py
@@ -287,7 +287,7 @@ man_pages = [
 texinfo_documents = [
     ('index', 'cookiecutter', u'cookiecutter Documentation',
      u'Audrey Roy and cookiecutter community', 'cookiecutter',
-     'One line description of project.', 'Miscellaneous'),
+     'Creates projects from project templates', 'Miscellaneous'),
 ]
 
 # Documents to append as an appendix to all manuals.
