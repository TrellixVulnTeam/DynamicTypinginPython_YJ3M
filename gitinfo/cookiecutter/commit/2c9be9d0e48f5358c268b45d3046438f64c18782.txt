commit 2c9be9d0e48f5358c268b45d3046438f64c18782
Author: Audrey Roy <audreyr@gmail.com>
Date:   Sun Jul 21 13:03:02 2013 +0200

    Factor out project generation into generate module.

diff --git a/cookiecutter/cookiecutter.py b/cookiecutter/cookiecutter.py
index ca4b2a0..afa8fa4 100755
--- a/cookiecutter/cookiecutter.py
+++ b/cookiecutter/cookiecutter.py
@@ -1,96 +1,8 @@
 #!/usr/bin/env python
 # -*- coding: utf-8 -*-
 import argparse
-import codecs
-import errno
-import json
-import os
-import sys
 
-from jinja2 import FileSystemLoader, Template
-from jinja2.environment import Environment
-
-from .utils import make_sure_path_exists, unicode_open
-
-
-def generate_context(json_dir='json/'):
-    """
-    Generates the context for all complexity pages.
-
-    Description:
-
-        Iterates through the contents of the input_dir and finds all JSON
-        files.
-        Loads the JSON file as a Python object with the key being the JSON
-        filename.
-
-    Example:
-
-        Assume the following files exist:
-
-            json/names.json
-            json/numbers.json
-
-        Depending on their content, might generate a context as follows:
-
-        contexts = {"names":
-                        ['Audrey', 'Danny']
-                    "numbers":
-                        [1, 2, 3, 4]
-                    }
-    """
-    context = {}
-
-    for file_name in os.listdir(json_dir):
-        file_to_open = "{0}/{1}".format(json_dir, file_name)
-        file_handle = open(file_to_open)
-        obj = json.load(file_handle)
-
-        # Add the Python object to the context dictionary
-        context[file_name[:-5]] = obj
-
-    return context
-
-
-def generate_files(input_dir, output_dir, context=None):
-    """ Renders the templates and saves them to files. """
-
-    context = context or {}
-    env = Environment()
-    env.loader = FileSystemLoader('.')
-
-    # Render dirname before writing
-    name_tmpl = Template(output_dir)
-    rendered_dirname = name_tmpl.render(**context)
-    make_sure_path_exists(rendered_dirname)
-    
-    for root, dirs, files in os.walk(input_dir):
-        for d in dirs:
-            indir = os.path.join(root, d)
-            outdir = indir.replace(input_dir, output_dir, 1)
-            
-            # Render dirname before writing
-            name_tmpl = Template(outdir)
-            rendered_dirname = name_tmpl.render(**context)
-            
-            make_sure_path_exists(rendered_dirname)
-            
-        for f in files:
-            # Render the file
-            infile = os.path.join(root, f)
-            tmpl = env.get_template(infile)
-            rendered_file = tmpl.render(**context)
-        
-            # Write it to the corresponding place in output_dir
-            outfile = infile.replace(input_dir, output_dir, 1)
-            
-            # Render the output filename before writing
-            name_tmpl = Template(outfile)
-            rendered_name = name_tmpl.render(**context)
-            print("Writing {0}".format(rendered_name))
-            
-            with unicode_open(rendered_name, 'w') as fh:
-                fh.write(rendered_file)
+from .generate import generate_context, generate_files
 
 
 def main():
diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
new file mode 100755
index 0000000..5765366
--- /dev/null
+++ b/cookiecutter/generate.py
@@ -0,0 +1,90 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+import json
+import os
+import sys
+
+from jinja2 import FileSystemLoader, Template
+from jinja2.environment import Environment
+
+from .utils import make_sure_path_exists, unicode_open
+
+
+def generate_context(json_dir='json/'):
+    """
+    Generates the context for all complexity pages.
+
+    Description:
+
+        Iterates through the contents of the input_dir and finds all JSON
+        files.
+        Loads the JSON file as a Python object with the key being the JSON
+        filename.
+
+    Example:
+
+        Assume the following files exist:
+
+            json/names.json
+            json/numbers.json
+
+        Depending on their content, might generate a context as follows:
+
+        contexts = {"names":
+                        ['Audrey', 'Danny']
+                    "numbers":
+                        [1, 2, 3, 4]
+                    }
+    """
+    context = {}
+
+    for file_name in os.listdir(json_dir):
+        file_to_open = "{0}/{1}".format(json_dir, file_name)
+        file_handle = open(file_to_open)
+        obj = json.load(file_handle)
+
+        # Add the Python object to the context dictionary
+        context[file_name[:-5]] = obj
+
+    return context
+
+
+def generate_files(input_dir, output_dir, context=None):
+    """ Renders the templates and saves them to files. """
+
+    context = context or {}
+    env = Environment()
+    env.loader = FileSystemLoader('.')
+
+    # Render dirname before writing
+    name_tmpl = Template(output_dir)
+    rendered_dirname = name_tmpl.render(**context)
+    make_sure_path_exists(rendered_dirname)
+    
+    for root, dirs, files in os.walk(input_dir):
+        for d in dirs:
+            indir = os.path.join(root, d)
+            outdir = indir.replace(input_dir, output_dir, 1)
+            
+            # Render dirname before writing
+            name_tmpl = Template(outdir)
+            rendered_dirname = name_tmpl.render(**context)
+            
+            make_sure_path_exists(rendered_dirname)
+            
+        for f in files:
+            # Render the file
+            infile = os.path.join(root, f)
+            tmpl = env.get_template(infile)
+            rendered_file = tmpl.render(**context)
+        
+            # Write it to the corresponding place in output_dir
+            outfile = infile.replace(input_dir, output_dir, 1)
+            
+            # Render the output filename before writing
+            name_tmpl = Template(outfile)
+            rendered_name = name_tmpl.render(**context)
+            print("Writing {0}".format(rendered_name))
+            
+            with unicode_open(rendered_name, 'w') as fh:
+                fh.write(rendered_file)
diff --git a/tests/test_cookiecutter.py b/tests/test_cookiecutter.py
index 2b953ac..fa7bbd5 100755
--- a/tests/test_cookiecutter.py
+++ b/tests/test_cookiecutter.py
@@ -17,46 +17,8 @@ from cookiecutter import cookiecutter
 
 class TestCookiecutter(unittest.TestCase):
 
-    def test_generate_files(self):
-        cookiecutter.generate_files(
-            context={'food': 'pizza'},
-            input_dir='tests/input',
-            output_dir='tests/output'
-        )
-        self.assertTrue(os.path.isfile('tests/output/simple.txt'))
-        simple_text = open('tests/output/simple.txt', 'rt').read()
-        self.assertEqual(simple_text, 'I eat pizza')
-
-    def test_generate_context(self):
-        context = cookiecutter.generate_context(json_dir='tests/json')
-        self.assertEqual(context, {"test": {"1": 2}})
-
-    def test_output_folder(self):
-        context = cookiecutter.generate_context(json_dir='tests/json2')
-        cookiecutter.generate_files(
-            context=context,
-            input_dir='tests/input2',
-            output_dir='tests/output2'
-        )
-        
-        something = """Hi!
-My name is Audrey Greenfeld.
-It is 2014."""
-        something2 = open('tests/output2/something.txt').read()
-        self.assertEqual(something, something2)
-        
-        in_folder = "The color is green and the letter is D."
-        in_folder2 = open('tests/output2/folder/in_folder.txt').read()
-        self.assertEqual(in_folder, in_folder2)
-        
-        self.assertTrue(os.path.isdir('tests/output2/im_a.dir'))
-        self.assertTrue(os.path.isfile('tests/output2/im_a.dir/im_a.file.py'))
-
-    def tearDown(self):
-        if os.path.exists('tests/output'):
-            shutil.rmtree('tests/output')
-        if os.path.exists('tests/output2'):
-            shutil.rmtree('tests/output2')
+    def test_something(self):
+        pass
 
 if __name__ == '__main__':
     unittest.main()
diff --git a/tests/test_generate.py b/tests/test_generate.py
new file mode 100755
index 0000000..e2cad96
--- /dev/null
+++ b/tests/test_generate.py
@@ -0,0 +1,65 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+
+"""
+test_generate
+--------------
+
+Tests for `cookiecutter.generate` module.
+"""
+
+import os
+import shutil
+import unittest
+
+from jinja2 import FileSystemLoader
+from jinja2.environment import Environment
+
+from cookiecutter import generate
+
+
+class TestGenerate(unittest.TestCase):
+
+    def test_generate_files(self):
+        generate.generate_files(
+            context={'food': 'pizza'},
+            input_dir='tests/input',
+            output_dir='tests/output'
+        )
+        self.assertTrue(os.path.isfile('tests/output/simple.txt'))
+        simple_text = open('tests/output/simple.txt', 'rt').read()
+        self.assertEqual(simple_text, 'I eat pizza')
+
+    def test_generate_context(self):
+        context = generate.generate_context(json_dir='tests/json')
+        self.assertEqual(context, {"test": {"1": 2}})
+
+    def test_output_folder(self):
+        context = generate.generate_context(json_dir='tests/json2')
+        generate.generate_files(
+            context=context,
+            input_dir='tests/input2',
+            output_dir='tests/output2'
+        )
+        
+        something = """Hi!
+My name is Audrey Greenfeld.
+It is 2014."""
+        something2 = open('tests/output2/something.txt').read()
+        self.assertEqual(something, something2)
+        
+        in_folder = "The color is green and the letter is D."
+        in_folder2 = open('tests/output2/folder/in_folder.txt').read()
+        self.assertEqual(in_folder, in_folder2)
+        
+        self.assertTrue(os.path.isdir('tests/output2/im_a.dir'))
+        self.assertTrue(os.path.isfile('tests/output2/im_a.dir/im_a.file.py'))
+
+    def tearDown(self):
+        if os.path.exists('tests/output'):
+            shutil.rmtree('tests/output')
+        if os.path.exists('tests/output2'):
+            shutil.rmtree('tests/output2')
+
+if __name__ == '__main__':
+    unittest.main()
