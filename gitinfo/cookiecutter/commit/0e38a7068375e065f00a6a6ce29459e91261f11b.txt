commit 0e38a7068375e065f00a6a6ce29459e91261f11b
Author: Audrey Roy <audreyr@gmail.com>
Date:   Sun Aug 18 15:16:22 2013 +0200

    Now copies over binary files as-is, without rendering them. Fix #18.

diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 6fe7925..a20d6bd 100755
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -10,10 +10,12 @@ Functions for generating a project from a project template.
 
 import logging
 import os
+import shutil
 import sys
 
 from jinja2 import FileSystemLoader, Template
 from jinja2.environment import Environment
+from binaryornot.check import is_binary
 
 from .exceptions import NonTemplatedInputDirException
 from .utils import make_sure_path_exists, unicode_open
@@ -26,6 +28,7 @@ else:
     import json
     from collections import OrderedDict
 
+
 def generate_context(config_file='cookiecutter.json'):
     """
     Generates the context for a Cookiecutter project template.
@@ -55,7 +58,7 @@ def generate_files(template_dir, context=None):
     :param input_dir: Project template input directory.
     :paramtype input_dir: directory
     """
-    
+
     logging.debug('Generating project from {0}...'.format(template_dir))
 
     context = context or {}
@@ -68,6 +71,7 @@ def generate_files(template_dir, context=None):
     if output_dir == template_dir:
         raise NonTemplatedInputDirException
 
+    logging.debug("output_dir is {0}".format(output_dir))
     make_sure_path_exists(output_dir)
 
     for root, dirs, files in os.walk(template_dir):
@@ -82,18 +86,31 @@ def generate_files(template_dir, context=None):
             make_sure_path_exists(rendered_dirname)
 
         for f in files:
-            # Render the file
+            logging.debug("f is {0}".format(f))
             infile = os.path.join(root, f)
-            tmpl = env.get_template(infile)
-            rendered_file = tmpl.render(**context)
+            logging.debug("infile is {0}".format(infile))
 
             # Write it to the corresponding place in output_dir
             outfile = infile.replace(template_dir, output_dir, 1)
+            logging.debug("outfile is {0}".format(outfile))
+
+            # Just copy over binary files. Don't render.
+            logging.debug("Check {0} to see if it's a binary".format(infile))
+            if is_binary(infile):
+                logging.debug("Copying binary {0} to {1} without rendering"
+                              .format(infile, outfile))
+                shutil.copyfile(infile, outfile)
+
+            else:
+
+                # Render the file
+                tmpl = env.get_template(infile)
+                rendered_file = tmpl.render(**context)
 
-            # Render the output filename before writing
-            name_tmpl = Template(outfile)
-            rendered_name = name_tmpl.render(**context)
-            logging.debug("Writing {0}".format(rendered_name))
+                # Render the output filename before writing
+                name_tmpl = Template(outfile)
+                rendered_name = name_tmpl.render(**context)
+                logging.debug("Writing {0}".format(rendered_name))
 
-            with unicode_open(rendered_name, 'w') as fh:
-                fh.write(rendered_file)
+                with unicode_open(rendered_name, 'w') as fh:
+                    fh.write(rendered_file)
diff --git a/setup.py b/setup.py
index 5c34492..2367ba0 100755
--- a/setup.py
+++ b/setup.py
@@ -17,7 +17,7 @@ if sys.argv[-1] == 'publish':
 readme = open('README.rst').read()
 history = open('HISTORY.rst').read().replace('.. :changelog:', '')
 
-requirements = ['jinja2>=2.4']
+requirements = ['binaryornot>=0.1.1', 'jinja2>=2.4']
 
 if sys.version_info[:2] < (2, 7):
     requirements.append('argparse')
diff --git a/tests/input{{binary_test}}/logo.png b/tests/input{{binary_test}}/logo.png
new file mode 100644
index 0000000..e04d51e
Binary files /dev/null and b/tests/input{{binary_test}}/logo.png differ
diff --git a/tests/input{{binary_test}}/readme.txt b/tests/input{{binary_test}}/readme.txt
new file mode 100644
index 0000000..43b2948
--- /dev/null
+++ b/tests/input{{binary_test}}/readme.txt
@@ -0,0 +1 @@
+I eat {{ binary_test }}
\ No newline at end of file
diff --git a/tests/input{{binary_test}}/some_font.otf b/tests/input{{binary_test}}/some_font.otf
new file mode 100755
index 0000000..b058f1c
Binary files /dev/null and b/tests/input{{binary_test}}/some_font.otf differ
diff --git a/tests/test_generate.py b/tests/test_generate.py
index 7b99c93..2960f4b 100755
--- a/tests/test_generate.py
+++ b/tests/test_generate.py
@@ -40,12 +40,25 @@ class TestGenerate(unittest.TestCase):
         simple_text = open('tests/inputpizza/simple.txt', 'rt').read()
         self.assertEqual(simple_text, 'I eat pizza')
 
+    def test_generate_files_binaries(self):
+        generate.generate_files(
+            context={'binary_test': 'binary_files'},
+            template_dir='tests/input{{binary_test}}'
+        )
+        self.assertTrue(os.path.isfile('tests/inputbinary_files/logo.png'))
+        self.assertTrue(os.path.isfile('tests/inputbinary_files/readme.txt'))
+        self.assertTrue(
+            os.path.isfile('tests/inputbinary_files/some_font.otf')
+        )
+
     def test_generate_context(self):
         context = generate.generate_context(config_file='tests/json/test.json')
         self.assertEqual(context, {"test": {"1": 2}})
 
     def test_output_folder(self):
-        context = generate.generate_context(config_file='tests/json2/stuff.json')
+        context = generate.generate_context(
+            config_file='tests/json2/stuff.json'
+        )
         logging.debug('Context is {0}'.format(context))
         generate.generate_files(
             context=context,
@@ -70,6 +83,8 @@ It is 2014."""
             shutil.rmtree('tests/inputpizza')
         if os.path.exists('tests/inputgreen'):
             shutil.rmtree('tests/inputgreen')
+        if os.path.exists('tests/inputbinary_files'):
+            shutil.rmtree('tests/inputbinary_files')
 
 if __name__ == '__main__':
     unittest.main()
