commit f7bd36b48c18397360c9281a7dac97d54bd2bc24
Author: Raphael Pierzina <raphael@hackebrot.de>
Date:   Thu Sep 24 23:54:19 2015 +0200

    Replace compat.is_string in favor of future's basestring

diff --git a/cookiecutter/compat.py b/cookiecutter/compat.py
index 14c7deb..3f85f3a 100644
--- a/cookiecutter/compat.py
+++ b/cookiecutter/compat.py
@@ -10,8 +10,3 @@ if PY3:  # pragma: no cover
 
 else:  # pragma: no cover
     iteritems = lambda d: d.iteritems()
-
-
-def is_string(obj):
-    """Determine if an object is a string."""
-    return isinstance(obj, str if PY3 else basestring)
diff --git a/cookiecutter/prompt.py b/cookiecutter/prompt.py
index 831602e..8dfe953 100755
--- a/cookiecutter/prompt.py
+++ b/cookiecutter/prompt.py
@@ -11,8 +11,9 @@ Functions for prompting the user for project info.
 from collections import OrderedDict
 
 import click
+from past.builtins import basestring
 
-from .compat import iteritems, is_string
+from .compat import iteritems
 from jinja2.environment import Environment
 
 
@@ -80,7 +81,7 @@ def read_user_choice(var_name, options):
 
 
 def render_variable(env, raw, cookiecutter_dict):
-    if not is_string(raw):
+    if not isinstance(raw, basestring):
         raw = str(raw)
     template = env.from_string(raw)
     rendered_template = template.render(cookiecutter=cookiecutter_dict)
diff --git a/cookiecutter/replay.py b/cookiecutter/replay.py
index 0643290..627170d 100644
--- a/cookiecutter/replay.py
+++ b/cookiecutter/replay.py
@@ -9,8 +9,8 @@ from __future__ import unicode_literals
 
 import json
 import os
+from past.builtins import basestring
 
-from .compat import is_string
 from .config import get_user_config
 from .utils import make_sure_path_exists
 
@@ -21,7 +21,7 @@ def get_file_name(replay_dir, template_name):
 
 
 def dump(template_name, context):
-    if not is_string(template_name):
+    if not isinstance(template_name, basestring):
         raise TypeError('Template name is required to be of type str')
 
     if not isinstance(context, dict):
@@ -42,7 +42,7 @@ def dump(template_name, context):
 
 
 def load(template_name):
-    if not is_string(template_name):
+    if not isinstance(template_name, basestring):
         raise TypeError('Template name is required to be of type str')
 
     replay_dir = get_user_config()['replay_dir']
diff --git a/tests/test_prompt.py b/tests/test_prompt.py
index f26c232..3000fda 100644
--- a/tests/test_prompt.py
+++ b/tests/test_prompt.py
@@ -12,8 +12,9 @@ from collections import OrderedDict
 import platform
 
 import pytest
+from past.builtins import basestring
 
-from cookiecutter import prompt, compat
+from cookiecutter import prompt
 from jinja2.environment import Environment
 
 
@@ -35,7 +36,7 @@ def test_convert_to_str(mocker, raw_var, rendered_var):
     assert result == rendered_var
 
     # Make sure that non str variables are conerted beforehand
-    if not compat.is_string(raw_var):
+    if not isinstance(raw_var, basestring):
         raw_var = str(raw_var)
     from_string.assert_called_once_with(raw_var)
 
