commit 0347a62545c5cfb83cf1a2deb9a27339a7ec5566
Author: Andrey Shpak <insspb@users.noreply.github.com>
Date:   Wed May 27 11:58:32 2020 +0300

    Tests refactoring: test_utils write issues fixed #1405 (#1406)

diff --git a/tests/test_utils.py b/tests/test_utils.py
index 980a059..f34705f 100644
--- a/tests/test_utils.py
+++ b/tests/test_utils.py
@@ -1,10 +1,9 @@
 # -*- coding: utf-8 -*-
 
 """Tests for `cookiecutter.utils` module."""
-
-import os
 import stat
 import sys
+from pathlib import Path
 
 import pytest
 
@@ -13,70 +12,91 @@ from cookiecutter import utils
 
 def make_readonly(path):
     """Change the access permissions to readonly for a given file."""
-    mode = os.stat(path).st_mode
-    os.chmod(path, mode & ~stat.S_IWRITE)
+    mode = Path.stat(path).st_mode
+    Path.chmod(path, mode & ~stat.S_IWRITE)
 
 
-def test_rmtree():
+@pytest.mark.skipif(
+    sys.version_info[0] == 3 and sys.version_info[1] == 6 and sys.version_info[2] == 1,
+    reason="Outdated pypy3 version on Travis CI/CD",
+)
+def test_rmtree(tmp_path):
     """Verify `utils.rmtree` remove files marked as read-only."""
-    os.mkdir('foo')
-    with open('foo/bar', "w") as f:
+    with open(Path(tmp_path, 'bar'), "w") as f:
         f.write("Test data")
-    make_readonly('foo/bar')
-    utils.rmtree('foo')
-    assert not os.path.exists('foo')
+    make_readonly(Path(tmp_path, 'bar'))
+
+    utils.rmtree(tmp_path)
 
+    assert not Path(tmp_path).exists()
 
-def test_make_sure_path_exists():
+
+@pytest.mark.skipif(
+    sys.version_info[0] == 3 and sys.version_info[1] == 6 and sys.version_info[2] == 1,
+    reason="Outdated pypy3 version on Travis CI/CD",
+)
+def test_make_sure_path_exists(tmp_path):
     """Verify correct True/False response from `utils.make_sure_path_exists`.
 
     Should return True if directory exist or created.
     Should return False if impossible to create directory (for example protected)
     """
-    if sys.platform.startswith('win'):
-        existing_directory = os.path.abspath(os.curdir)
-        uncreatable_directory = 'a*b'
-    else:
-        existing_directory = '/usr/'
-        uncreatable_directory = '/this-doesnt-exist-and-cant-be-created/'
+    existing_directory = tmp_path
+    directory_to_create = Path(tmp_path, "not_yet_created")
 
     assert utils.make_sure_path_exists(existing_directory)
-    assert utils.make_sure_path_exists('tests/blah')
-    assert utils.make_sure_path_exists('tests/trailingslash/')
+    assert utils.make_sure_path_exists(directory_to_create)
+
+    # Ensure by base system methods.
+    assert existing_directory.is_dir()
+    assert existing_directory.exists()
+    assert directory_to_create.is_dir()
+    assert directory_to_create.exists()
+
+
+def test_make_sure_path_exists_correctly_handle_os_error(mocker):
+    """Verify correct True/False response from `utils.make_sure_path_exists`.
+
+    Should return True if directory exist or created.
+    Should return False if impossible to create directory (for example protected)
+    """
+
+    def raiser(*args, **kwargs):
+        raise OSError()
+
+    mocker.patch("os.makedirs", raiser)
+    uncreatable_directory = Path('protected_path')
+
     assert not utils.make_sure_path_exists(uncreatable_directory)
-    utils.rmtree('tests/blah/')
-    utils.rmtree('tests/trailingslash/')
 
 
-def test_workin():
+@pytest.mark.skipif(
+    sys.version_info[0] == 3 and sys.version_info[1] == 6 and sys.version_info[2] == 1,
+    reason="Outdated pypy3 version on Travis CI/CD",
+)
+def test_work_in(tmp_path):
     """Verify returning to original folder after `utils.work_in` use."""
-    cwd = os.getcwd()
-    ch_to = 'tests/files'
+    cwd = Path.cwd()
+    ch_to = tmp_path
 
-    class TestException(Exception):
-        pass
+    assert ch_to != Path.cwd()
 
-    def test_work_in():
-        with utils.work_in(ch_to):
-            test_dir = os.path.join(cwd, ch_to).replace("/", os.sep)
-            assert test_dir == os.getcwd()
-            raise TestException()
+    # Under context manager we should work in tmp_path.
+    with utils.work_in(ch_to):
+        assert ch_to == Path.cwd()
 
     # Make sure we return to the correct folder
-    assert cwd == os.getcwd()
+    assert cwd == Path.cwd()
 
-    # Make sure that exceptions are still bubbled up
-    with pytest.raises(TestException):
-        test_work_in()
 
-
-def test_prompt_should_ask_and_rm_repo_dir(mocker, tmpdir):
+def test_prompt_should_ask_and_rm_repo_dir(mocker, tmp_path):
     """In `prompt_and_delete()`, if the user agrees to delete/reclone the \
     repo, the repo should be deleted."""
     mock_read_user = mocker.patch(
-        'cookiecutter.utils.read_user_yes_no', return_value=True, autospec=True
+        'cookiecutter.utils.read_user_yes_no', return_value=True
     )
-    repo_dir = tmpdir.mkdir('repo')
+    repo_dir = Path(tmp_path, 'repo')
+    repo_dir.mkdir()
 
     deleted = utils.prompt_and_delete(str(repo_dir))
 
@@ -85,14 +105,15 @@ def test_prompt_should_ask_and_rm_repo_dir(mocker, tmpdir):
     assert deleted
 
 
-def test_prompt_should_ask_and_exit_on_user_no_answer(mocker, tmpdir):
+def test_prompt_should_ask_and_exit_on_user_no_answer(mocker, tmp_path):
     """In `prompt_and_delete()`, if the user decline to delete/reclone the \
     repo, cookiecutter should exit."""
     mock_read_user = mocker.patch(
         'cookiecutter.utils.read_user_yes_no', return_value=False,
     )
     mock_sys_exit = mocker.patch('sys.exit', return_value=True)
-    repo_dir = tmpdir.mkdir('repo')
+    repo_dir = Path(tmp_path, 'repo')
+    repo_dir.mkdir()
 
     deleted = utils.prompt_and_delete(str(repo_dir))
 
@@ -102,15 +123,15 @@ def test_prompt_should_ask_and_exit_on_user_no_answer(mocker, tmpdir):
     assert mock_sys_exit.called
 
 
-def test_prompt_should_ask_and_rm_repo_file(mocker, tmpdir):
+def test_prompt_should_ask_and_rm_repo_file(mocker, tmp_path):
     """In `prompt_and_delete()`, if the user agrees to delete/reclone a \
     repo file, the repo should be deleted."""
     mock_read_user = mocker.patch(
         'cookiecutter.utils.read_user_yes_no', return_value=True, autospec=True
     )
 
-    repo_file = tmpdir.join('repo.zip')
-    repo_file.write('this is zipfile content')
+    repo_file = tmp_path.joinpath('repo.zip')
+    repo_file.write_text('this is zipfile content')
 
     deleted = utils.prompt_and_delete(str(repo_file))
 
@@ -119,13 +140,14 @@ def test_prompt_should_ask_and_rm_repo_file(mocker, tmpdir):
     assert deleted
 
 
-def test_prompt_should_ask_and_keep_repo_on_no_reuse(mocker, tmpdir):
+def test_prompt_should_ask_and_keep_repo_on_no_reuse(mocker, tmp_path):
     """In `prompt_and_delete()`, if the user wants to keep their old \
     cloned template repo, it should not be deleted."""
     mock_read_user = mocker.patch(
         'cookiecutter.utils.read_user_yes_no', return_value=False, autospec=True
     )
-    repo_dir = tmpdir.mkdir('repo')
+    repo_dir = Path(tmp_path, 'repo')
+    repo_dir.mkdir()
 
     with pytest.raises(SystemExit):
         utils.prompt_and_delete(str(repo_dir))
@@ -134,7 +156,7 @@ def test_prompt_should_ask_and_keep_repo_on_no_reuse(mocker, tmpdir):
     assert repo_dir.exists()
 
 
-def test_prompt_should_ask_and_keep_repo_on_reuse(mocker, tmpdir):
+def test_prompt_should_ask_and_keep_repo_on_reuse(mocker, tmp_path):
     """In `prompt_and_delete()`, if the user wants to keep their old \
     cloned template repo, it should not be deleted."""
 
@@ -147,7 +169,8 @@ def test_prompt_should_ask_and_keep_repo_on_reuse(mocker, tmpdir):
     mock_read_user = mocker.patch(
         'cookiecutter.utils.read_user_yes_no', side_effect=answer, autospec=True
     )
-    repo_dir = tmpdir.mkdir('repo')
+    repo_dir = Path(tmp_path, 'repo')
+    repo_dir.mkdir()
 
     deleted = utils.prompt_and_delete(str(repo_dir))
 
@@ -156,7 +179,7 @@ def test_prompt_should_ask_and_keep_repo_on_reuse(mocker, tmpdir):
     assert not deleted
 
 
-def test_prompt_should_not_ask_if_no_input_and_rm_repo_dir(mocker, tmpdir):
+def test_prompt_should_not_ask_if_no_input_and_rm_repo_dir(mocker, tmp_path):
     """Prompt should not ask if no input and rm dir.
 
     In `prompt_and_delete()`, if `no_input` is True, the call to
@@ -165,7 +188,8 @@ def test_prompt_should_not_ask_if_no_input_and_rm_repo_dir(mocker, tmpdir):
     mock_read_user = mocker.patch(
         'cookiecutter.prompt.read_user_yes_no', return_value=True, autospec=True
     )
-    repo_dir = tmpdir.mkdir('repo')
+    repo_dir = Path(tmp_path, 'repo')
+    repo_dir.mkdir()
 
     deleted = utils.prompt_and_delete(str(repo_dir), no_input=True)
 
@@ -174,7 +198,7 @@ def test_prompt_should_not_ask_if_no_input_and_rm_repo_dir(mocker, tmpdir):
     assert deleted
 
 
-def test_prompt_should_not_ask_if_no_input_and_rm_repo_file(mocker, tmpdir):
+def test_prompt_should_not_ask_if_no_input_and_rm_repo_file(mocker, tmp_path):
     """Prompt should not ask if no input and rm file.
 
     In `prompt_and_delete()`, if `no_input` is True, the call to
@@ -184,8 +208,8 @@ def test_prompt_should_not_ask_if_no_input_and_rm_repo_file(mocker, tmpdir):
         'cookiecutter.prompt.read_user_yes_no', return_value=True, autospec=True
     )
 
-    repo_file = tmpdir.join('repo.zip')
-    repo_file.write('this is zipfile content')
+    repo_file = tmp_path.joinpath('repo.zip')
+    repo_file.write_text('this is zipfile content')
 
     deleted = utils.prompt_and_delete(str(repo_file), no_input=True)
 
