commit f85bada324abedcce3c46886af8d93cc90ec27ef
Author: Andrey Shpak <insspb@users.noreply.github.com>
Date:   Wed May 27 13:23:48 2020 +0300

    Python3: Remove python2 u' sign, fix some strings (#1402)

diff --git a/cookiecutter/cli.py b/cookiecutter/cli.py
index a9c22f6..4d2d788 100644
--- a/cookiecutter/cli.py
+++ b/cookiecutter/cli.py
@@ -25,7 +25,7 @@ def version_msg():
     """Return the Cookiecutter version, location and Python powering it."""
     python_version = sys.version[:3]
     location = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
-    message = u'Cookiecutter %(version)s from {} (Python {})'
+    message = 'Cookiecutter %(version)s from {} (Python {})'
     return message.format(location, python_version)
 
 
@@ -38,71 +38,69 @@ def validate_extra_context(ctx, param, value):
                 "'{}' doesn't match that form".format(s)
             )
 
-    # Convert tuple -- e.g.: (u'program_name=foobar', u'startsecs=66')
+    # Convert tuple -- e.g.: ('program_name=foobar', 'startsecs=66')
     # to dict -- e.g.: {'program_name': 'foobar', 'startsecs': '66'}
     return collections.OrderedDict(s.split('=', 1) for s in value) or None
 
 
-@click.command(context_settings=dict(help_option_names=[u'-h', u'--help']))
-@click.version_option(__version__, u'-V', u'--version', message=version_msg())
-@click.argument(u'template')
-@click.argument(u'extra_context', nargs=-1, callback=validate_extra_context)
+@click.command(context_settings=dict(help_option_names=['-h', '--help']))
+@click.version_option(__version__, '-V', '--version', message=version_msg())
+@click.argument('template')
+@click.argument('extra_context', nargs=-1, callback=validate_extra_context)
 @click.option(
-    u'--no-input',
+    '--no-input',
     is_flag=True,
-    help=u'Do not prompt for parameters and only use cookiecutter.json '
-    u'file content',
+    help='Do not prompt for parameters and only use cookiecutter.json file content',
 )
 @click.option(
-    u'-c', u'--checkout', help=u'branch, tag or commit to checkout after git clone',
+    '-c', '--checkout', help='branch, tag or commit to checkout after git clone',
 )
 @click.option(
-    u'--directory',
-    help=u'Directory within repo that holds cookiecutter.json file '
-    u'for advanced repositories with multi templates in it',
+    '--directory',
+    help='Directory within repo that holds cookiecutter.json file '
+    'for advanced repositories with multi templates in it',
 )
 @click.option(
     '-v', '--verbose', is_flag=True, help='Print debug information', default=False
 )
 @click.option(
-    u'--replay',
+    '--replay',
     is_flag=True,
-    help=u'Do not prompt for parameters and only use information entered '
-    u'previously',
+    help='Do not prompt for parameters and only use information entered previously',
 )
 @click.option(
-    u'-f',
-    u'--overwrite-if-exists',
+    '-f',
+    '--overwrite-if-exists',
     is_flag=True,
-    help=u'Overwrite the contents of the output directory if it already exists',
+    help='Overwrite the contents of the output directory if it already exists',
 )
 @click.option(
-    u'-s',
-    u'--skip-if-file-exists',
+    '-s',
+    '--skip-if-file-exists',
     is_flag=True,
-    help=u'Skip the files in the corresponding directories if they already ' u'exist',
+    help='Skip the files in the corresponding directories if they already exist',
     default=False,
 )
 @click.option(
-    u'-o',
-    u'--output-dir',
+    '-o',
+    '--output-dir',
     default='.',
     type=click.Path(),
-    help=u'Where to output the generated project dir into',
+    help='Where to output the generated project dir into',
 )
 @click.option(
-    u'--config-file', type=click.Path(), default=None, help=u'User configuration file'
+    '--config-file', type=click.Path(), default=None, help='User configuration file'
 )
 @click.option(
-    u'--default-config',
+    '--default-config',
     is_flag=True,
-    help=u'Do not load a config file. Use the defaults instead',
+    help='Do not load a config file. Use the defaults instead',
 )
 @click.option(
-    u'--debug-file',
+    '--debug-file',
     type=click.Path(),
     default=None,
-    help=u'File to be used as a stream for DEBUG logging',
+    help='File to be used as a stream for DEBUG logging',
 )
 def main(
     template,
@@ -127,7 +125,7 @@ def main(
     """
     # If you _need_ to support a local template in a directory
     # called 'help', use a qualified path to the directory.
-    if template == u'help':
+    if template == 'help':
         click.echo(click.get_current_context().get_help())
         sys.exit(0)
 
diff --git a/cookiecutter/config.py b/cookiecutter/config.py
index 89a7f1d..fae63ec 100644
--- a/cookiecutter/config.py
+++ b/cookiecutter/config.py
@@ -66,7 +66,7 @@ def get_config(config_path):
             yaml_dict = poyo.parse_string(file_handle.read())
         except poyo.exceptions.PoyoException as e:
             raise InvalidConfiguration(
-                'Unable to parse YAML file {}. Error: {}' ''.format(config_path, e)
+                'Unable to parse YAML file {}. Error: {}'.format(config_path, e)
             )
 
     config_dict = merge_configs(DEFAULT_CONFIG, yaml_dict)
diff --git a/cookiecutter/hooks.py b/cookiecutter/hooks.py
index 1b3d979..e740ccc 100644
--- a/cookiecutter/hooks.py
+++ b/cookiecutter/hooks.py
@@ -86,7 +86,7 @@ def run_script(script_path, cwd='.'):
     except OSError as os_error:
         if os_error.errno == errno.ENOEXEC:
             raise FailedHookException(
-                'Hook script failed, might be an ' 'empty file or missing a shebang'
+                'Hook script failed, might be an empty file or missing a shebang'
             )
         raise FailedHookException('Hook script failed (error: {})'.format(os_error))
 
diff --git a/cookiecutter/log.py b/cookiecutter/log.py
index 33c0f05..d7633c5 100644
--- a/cookiecutter/log.py
+++ b/cookiecutter/log.py
@@ -11,8 +11,8 @@ LOG_LEVELS = {
 }
 
 LOG_FORMATS = {
-    'DEBUG': u'%(levelname)s %(name)s: %(message)s',
-    'INFO': u'%(levelname)s: %(message)s',
+    'DEBUG': '%(levelname)s %(name)s: %(message)s',
+    'INFO': '%(levelname)s: %(message)s',
 }
 
 
diff --git a/cookiecutter/prompt.py b/cookiecutter/prompt.py
index a6eee17..b5bfee3 100644
--- a/cookiecutter/prompt.py
+++ b/cookiecutter/prompt.py
@@ -58,17 +58,17 @@ def read_user_choice(var_name, options):
         raise ValueError
 
     choice_map = OrderedDict(
-        (u'{}'.format(i), value) for i, value in enumerate(options, 1)
+        ('{}'.format(i), value) for i, value in enumerate(options, 1)
     )
     choices = choice_map.keys()
-    default = u'1'
+    default = '1'
 
-    choice_lines = [u'{} - {}'.format(*c) for c in choice_map.items()]
-    prompt = u'\n'.join(
+    choice_lines = ['{} - {}'.format(*c) for c in choice_map.items()]
+    prompt = '\n'.join(
         (
-            u'Select {}:'.format(var_name),
-            u'\n'.join(choice_lines),
-            u'Choose from {}'.format(u', '.join(choices)),
+            'Select {}:'.format(var_name),
+            '\n'.join(choice_lines),
+            'Choose from {}'.format(', '.join(choices)),
         )
     )
 
@@ -180,11 +180,11 @@ def prompt_for_config(context, no_input=False):
     # First pass: Handle simple and raw variables, plus choices.
     # These must be done first because the dictionaries keys and
     # values might refer to them.
-    for key, raw in context[u'cookiecutter'].items():
-        if key.startswith(u'_') and not key.startswith(u'__'):
+    for key, raw in context['cookiecutter'].items():
+        if key.startswith('_') and not key.startswith('__'):
             cookiecutter_dict[key] = raw
             continue
-        elif key.startswith(u'__'):
+        elif key.startswith('__'):
             cookiecutter_dict[key] = render_variable(env, raw, cookiecutter_dict)
             continue
 
@@ -208,7 +208,7 @@ def prompt_for_config(context, no_input=False):
             raise UndefinedVariableInTemplate(msg, err, context)
 
     # Second pass; handle the dictionaries.
-    for key, raw in context[u'cookiecutter'].items():
+    for key, raw in context['cookiecutter'].items():
 
         try:
             if isinstance(raw, dict):
diff --git a/cookiecutter/utils.py b/cookiecutter/utils.py
index 28d29f0..5935a24 100644
--- a/cookiecutter/utils.py
+++ b/cookiecutter/utils.py
@@ -85,7 +85,7 @@ def prompt_and_delete(path, no_input=False):
         ok_to_delete = True
     else:
         question = (
-            "You've downloaded {} before. " "Is it okay to delete and re-download it?"
+            "You've downloaded {} before. Is it okay to delete and re-download it?"
         ).format(path)
 
         ok_to_delete = read_user_yes_no(question, 'yes')
diff --git a/cookiecutter/zipfile.py b/cookiecutter/zipfile.py
index 59940e9..24925c7 100644
--- a/cookiecutter/zipfile.py
+++ b/cookiecutter/zipfile.py
@@ -101,7 +101,7 @@ def unzip(zip_uri, is_url, clone_to_dir='.', no_input=False, password=None):
                         retry += 1
                         if retry == 3:
                             raise InvalidZipRepository(
-                                'Invalid password provided ' 'for protected repository'
+                                'Invalid password provided for protected repository'
                             )
 
     except BadZipFile:
diff --git a/docs/conf.py b/docs/conf.py
index efb096a..13690a9 100644
--- a/docs/conf.py
+++ b/docs/conf.py
@@ -94,8 +94,8 @@ source_suffix = {'.rst': 'restructuredtext', '.md': 'markdown'}
 master_doc = 'index'
 
 # General information about the project.
-project = u'cookiecutter'
-copyright = u'2013-2019, Audrey Roy and Cookiecutter community'
+project = 'cookiecutter'
+copyright = '2013-2019, Audrey Roy and Cookiecutter community'
 
 # The version info for the project you're documenting, acts as replacement for
 # |version| and |release|, also used in various other places throughout the
@@ -243,8 +243,8 @@ latex_documents = [
     (
         'index',
         'cookiecutter.tex',
-        u'cookiecutter Documentation',
-        u'Audrey Roy and Cookiecutter community',
+        'cookiecutter Documentation',
+        'Audrey Roy and Cookiecutter community',
         'manual',
     ),
 ]
@@ -278,8 +278,8 @@ man_pages = [
     (
         'index',
         'cookiecutter',
-        u'cookiecutter Documentation',
-        [u'Audrey Roy and Cookiecutter community'],
+        'cookiecutter Documentation',
+        ['Audrey Roy and Cookiecutter community'],
         1,
     )
 ]
@@ -297,8 +297,8 @@ texinfo_documents = [
     (
         'index',
         'cookiecutter',
-        u'cookiecutter Documentation',
-        u'Audrey Roy and Cookiecutter community',
+        'cookiecutter Documentation',
+        'Audrey Roy and Cookiecutter community',
         'cookiecutter',
         'Creates projects from project templates',
         'Miscellaneous',
@@ -321,10 +321,10 @@ texinfo_documents = [
 # -- Options for Epub output --------------------------------------------------
 
 # Bibliographic Dublin Core info.
-epub_title = u'cookiecutter'
-epub_author = u'Audrey Roy'
-epub_publisher = u'Audrey Roy and Cookiecutter community'
-epub_copyright = u'2013-2019, Audrey Roy and Cookiecutter community'
+epub_title = 'cookiecutter'
+epub_author = 'Audrey Roy'
+epub_publisher = 'Audrey Roy and Cookiecutter community'
+epub_copyright = '2013-2019, Audrey Roy and Cookiecutter community'
 
 # The language of the text. It defaults to the language option
 # or en if the language is not set.
diff --git a/tests/conftest.py b/tests/conftest.py
index 879b414..ee3eab6 100644
--- a/tests/conftest.py
+++ b/tests/conftest.py
@@ -7,7 +7,8 @@ import pytest
 
 from cookiecutter import utils
 
-USER_CONFIG = u"""
+
+USER_CONFIG = """
 cookiecutters_dir: "{cookiecutters_dir}"
 replay_dir: "{replay_dir}"
 """
diff --git a/tests/replay/conftest.py b/tests/replay/conftest.py
index aa37bf4..4d60f2c 100644
--- a/tests/replay/conftest.py
+++ b/tests/replay/conftest.py
@@ -6,11 +6,11 @@ import pytest
 def context():
     """Fixture to return a valid context as known from a cookiecutter.json."""
     return {
-        u'cookiecutter': {
-            u'email': u'raphael@hackebrot.de',
-            u'full_name': u'Raphael Pierzina',
-            u'github_username': u'hackebrot',
-            u'version': u'0.1.0',
+        'cookiecutter': {
+            'email': 'raphael@hackebrot.de',
+            'full_name': 'Raphael Pierzina',
+            'github_username': 'hackebrot',
+            'version': '0.1.0',
         }
     }
 
diff --git a/tests/test_cli.py b/tests/test_cli.py
index 829cf2a..d435386 100644
--- a/tests/test_cli.py
+++ b/tests/test_cli.py
@@ -121,7 +121,7 @@ def test_cli_exit_on_noinput_and_replay(mocker, cli_runner):
     assert result.exit_code == 1
 
     expected_error_msg = (
-        "You can not use both replay and no_input or extra_context " "at the same time."
+        "You can not use both replay and no_input or extra_context at the same time."
     )
 
     assert expected_error_msg in result.output
diff --git a/tests/test_generate_context.py b/tests/test_generate_context.py
index 5976b3d..26e7d4d 100644
--- a/tests/test_generate_context.py
+++ b/tests/test_generate_context.py
@@ -63,9 +63,7 @@ def test_generate_context_with_json_decoding_error():
     with pytest.raises(ContextDecodingException) as excinfo:
         generate.generate_context('tests/test-generate-context/invalid-syntax.json')
     # original message from json module should be included
-    pattern = (
-        'Expecting \'{0,1}:\'{0,1} delimiter: ' 'line 1 column (19|20) \\(char 19\\)'
-    )
+    pattern = 'Expecting \'{0,1}:\'{0,1} delimiter: line 1 column (19|20) \\(char 19\\)'
     assert re.search(pattern, str(excinfo.value))
     # File name should be included too...for testing purposes, just test the
     # last part of the file. If we wanted to test the absolute path, we'd have
diff --git a/tests/test_generate_copy_without_render.py b/tests/test_generate_copy_without_render.py
index 3667322..0e2a944 100644
--- a/tests/test_generate_copy_without_render.py
+++ b/tests/test_generate_copy_without_render.py
@@ -49,19 +49,17 @@ def test_generate_copy_without_render_extensions():
         assert 'I have been rendered!' in f.read()
 
     with open(
-        'test_copy_without_render/' 'test_copy_without_render-rendered/' 'README.txt'
+        'test_copy_without_render/test_copy_without_render-rendered/README.txt'
     ) as f:
         assert '{{cookiecutter.render_test}}' in f.read()
 
     with open(
-        'test_copy_without_render/' 'test_copy_without_render-rendered/' 'README.rst'
+        'test_copy_without_render/test_copy_without_render-rendered/README.rst'
     ) as f:
         assert 'I have been rendered' in f.read()
 
     with open(
-        'test_copy_without_render/'
-        '{{cookiecutter.repo_name}}-not-rendered/'
-        'README.rst'
+        'test_copy_without_render/{{cookiecutter.repo_name}}-not-rendered/README.rst'
     ) as f:
         assert '{{cookiecutter.render_test}}' in f.read()
 
diff --git a/tests/test_generate_files.py b/tests/test_generate_files.py
index d43e296..cae50bd 100644
--- a/tests/test_generate_files.py
+++ b/tests/test_generate_files.py
@@ -67,7 +67,7 @@ def test_generate_files():
     assert os.path.isfile(simple_file)
 
     simple_text = io.open(simple_file, 'rt', encoding='utf-8').read()
-    assert simple_text == u'I eat pizzä'
+    assert simple_text == 'I eat pizzä'
 
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
@@ -83,7 +83,7 @@ def test_generate_files_with_trailing_newline():
 
     with io.open(newline_file, 'r', encoding='utf-8') as f:
         simple_text = f.read()
-    assert simple_text == u'I eat pizzä\n'
+    assert simple_text == 'I eat pizzä\n'
 
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
@@ -192,7 +192,7 @@ def test_generate_files_with_overwrite_if_exists_with_skip_if_file_exists():
     assert os.path.isfile(simple_with_new_line_file)
 
     simple_text = io.open(simple_file, 'rt', encoding='utf-8').read()
-    assert simple_text == u'temp'
+    assert simple_text == 'temp'
 
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
@@ -216,7 +216,7 @@ def test_generate_files_with_skip_if_file_exists():
     assert not os.path.exists(simple_with_new_line_file)
 
     simple_text = io.open(simple_file, 'rt', encoding='utf-8').read()
-    assert simple_text == u'temp'
+    assert simple_text == 'temp'
 
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
@@ -239,7 +239,7 @@ def test_generate_files_with_overwrite_if_exists():
     assert os.path.isfile(simple_with_new_line_file)
 
     simple_text = io.open(simple_file, 'rt', encoding='utf-8').read()
-    assert simple_text == u'I eat pizzä'
+    assert simple_text == 'I eat pizzä'
 
 
 @pytest.fixture
diff --git a/tests/test_get_config.py b/tests/test_get_config.py
index aeb7cb9..9466dc3 100644
--- a/tests/test_get_config.py
+++ b/tests/test_get_config.py
@@ -86,7 +86,7 @@ def test_invalid_config():
         config.get_config('tests/test-config/invalid-config.yaml')
 
     expected_error_msg = (
-        'Unable to parse YAML file ' 'tests/test-config/invalid-config.yaml. ' 'Error: '
+        'Unable to parse YAML file tests/test-config/invalid-config.yaml. Error: '
     )
     assert expected_error_msg in str(exc_info.value)
 
diff --git a/tests/test_hooks.py b/tests/test_hooks.py
index e08016d..be4038f 100644
--- a/tests/test_hooks.py
+++ b/tests/test_hooks.py
@@ -188,7 +188,7 @@ def dir_with_hooks(tmpdir):
     hooks_dir = tmpdir.mkdir('hooks')
 
     pre_hook_content = textwrap.dedent(
-        u"""
+        """
         #!/usr/bin/env python
         # -*- coding: utf-8 -*-
         print('pre_gen_project.py~')
@@ -198,7 +198,7 @@ def dir_with_hooks(tmpdir):
     pre_gen_hook_file.write_text(pre_hook_content, encoding='utf8')
 
     post_hook_content = textwrap.dedent(
-        u"""
+        """
         #!/usr/bin/env python
         # -*- coding: utf-8 -*-
         print('post_gen_project.py~')
diff --git a/tests/test_log.py b/tests/test_log.py
index 83e26dd..4f4d9ff 100644
--- a/tests/test_log.py
+++ b/tests/test_log.py
@@ -35,13 +35,13 @@ def info_messages():
 def debug_messages():
     """Fixture. List of test debug messages."""
     return [
-        'INFO cookiecutter: ' 'Welcome to Cookiecutter',
-        'DEBUG cookiecutter: ' 'Generating project from pytest-plugin',
-        'INFO cookiecutter.foo: ' 'Loading user config from home dir',
-        "DEBUG cookiecutter.foo.bar: " "I don't know.",
-        'DEBUG cookiecutter.foo.bar: ' 'I wanted to save the world.',
-        'ERROR cookiecutter.foo: ' 'Aw, snap! Something went wrong',
-        'DEBUG cookiecutter: ' 'Successfully generated project',
+        "INFO cookiecutter: Welcome to Cookiecutter",
+        "DEBUG cookiecutter: Generating project from pytest-plugin",
+        "INFO cookiecutter.foo: Loading user config from home dir",
+        "DEBUG cookiecutter.foo.bar: I don't know.",
+        "DEBUG cookiecutter.foo.bar: I wanted to save the world.",
+        "ERROR cookiecutter.foo: Aw, snap! Something went wrong",
+        "DEBUG cookiecutter: Successfully generated project",
     ]
 
 
diff --git a/tests/test_prompt.py b/tests/test_prompt.py
index f703cf2..0932ab5 100644
--- a/tests/test_prompt.py
+++ b/tests/test_prompt.py
@@ -73,7 +73,7 @@ class TestPrompt(object):
         'context',
         [
             {'cookiecutter': {'full_name': 'Your Name'}},
-            {'cookiecutter': {'full_name': u'Řekni či napiš své jméno'}},
+            {'cookiecutter': {'full_name': 'Řekni či napiš své jméno'}},
         ],
         ids=['ASCII default prompt/input', 'Unicode default prompt/input'],
     )
@@ -95,7 +95,7 @@ class TestPrompt(object):
         context = {'cookiecutter': {'details': {}}}
 
         cookiecutter_dict = prompt.prompt_for_config(context)
-        assert cookiecutter_dict == {'details': {'key': u'value', 'integer': 37}}
+        assert cookiecutter_dict == {'details': {'key': 'value', 'integer': 37}}
 
     def test_should_render_dict(self):
         """Verify template inside dictionary variable rendered."""
@@ -111,7 +111,7 @@ class TestPrompt(object):
         cookiecutter_dict = prompt.prompt_for_config(context, no_input=True)
         assert cookiecutter_dict == {
             'project_name': 'Slartibartfast',
-            'details': {'Slartibartfast': u'Slartibartfast'},
+            'details': {'Slartibartfast': 'Slartibartfast'},
         }
 
     def test_should_render_deep_dict(self):
@@ -167,18 +167,18 @@ class TestPrompt(object):
         context = {
             'cookiecutter': OrderedDict(
                 [
-                    ('project_name', u'A New Project'),
+                    ('project_name', 'A New Project'),
                     (
                         'pkg_name',
-                        u'{{ cookiecutter.project_name|lower|replace(" ", "") }}',
+                        '{{ cookiecutter.project_name|lower|replace(" ", "") }}',
                     ),
                 ]
             )
         }
 
         exp_cookiecutter_dict = {
-            'project_name': u'A New Project',
-            'pkg_name': u'anewproject',
+            'project_name': 'A New Project',
+            'pkg_name': 'anewproject',
         }
         cookiecutter_dict = prompt.prompt_for_config(context)
         assert cookiecutter_dict == exp_cookiecutter_dict
@@ -279,7 +279,7 @@ class TestReadUserChoice(object):
     def test_should_invoke_read_user_variable(self, mocker):
         """Verify correct function called for string input variables."""
         read_user_variable = mocker.patch('cookiecutter.prompt.read_user_variable')
-        read_user_variable.return_value = u'Audrey Roy'
+        read_user_variable.return_value = 'Audrey Roy'
 
         prompt_choice = mocker.patch('cookiecutter.prompt.prompt_choice_for_config')
 
@@ -292,28 +292,28 @@ class TestReadUserChoice(object):
         assert not prompt_choice.called
         assert not read_user_choice.called
         read_user_variable.assert_called_once_with('full_name', 'Your Name')
-        assert cookiecutter_dict == {'full_name': u'Audrey Roy'}
+        assert cookiecutter_dict == {'full_name': 'Audrey Roy'}
 
     def test_should_render_choices(self, mocker):
         """Verify Jinja2 templating engine works inside choices variables."""
         read_user_choice = mocker.patch('cookiecutter.prompt.read_user_choice')
-        read_user_choice.return_value = u'anewproject'
+        read_user_choice.return_value = 'anewproject'
 
         read_user_variable = mocker.patch('cookiecutter.prompt.read_user_variable')
-        read_user_variable.return_value = u'A New Project'
+        read_user_variable.return_value = 'A New Project'
 
-        rendered_choices = [u'foo', u'anewproject', u'bar']
+        rendered_choices = ['foo', 'anewproject', 'bar']
 
         context = {
             'cookiecutter': OrderedDict(
                 [
-                    ('project_name', u'A New Project'),
+                    ('project_name', 'A New Project'),
                     (
                         'pkg_name',
                         [
-                            u'foo',
-                            u'{{ cookiecutter.project_name|lower|replace(" ", "") }}',
-                            u'bar',
+                            'foo',
+                            '{{ cookiecutter.project_name|lower|replace(" ", "") }}',
+                            'bar',
                         ],
                     ),
                 ]
@@ -321,12 +321,12 @@ class TestReadUserChoice(object):
         }
 
         expected = {
-            'project_name': u'A New Project',
-            'pkg_name': u'anewproject',
+            'project_name': 'A New Project',
+            'pkg_name': 'anewproject',
         }
         cookiecutter_dict = prompt.prompt_for_config(context)
 
-        read_user_variable.assert_called_once_with('project_name', u'A New Project')
+        read_user_variable.assert_called_once_with('project_name', 'A New Project')
         read_user_choice.assert_called_once_with('pkg_name', rendered_choices)
         assert cookiecutter_dict == expected
 
diff --git a/tests/test_specify_output_dir.py b/tests/test_specify_output_dir.py
index b805613..deee504 100644
--- a/tests/test_specify_output_dir.py
+++ b/tests/test_specify_output_dir.py
@@ -8,11 +8,11 @@ from cookiecutter import main
 def context():
     """Fixture to return a valid context as known from a cookiecutter.json."""
     return {
-        u'cookiecutter': {
-            u'email': u'raphael@hackebrot.de',
-            u'full_name': u'Raphael Pierzina',
-            u'github_username': u'hackebrot',
-            u'version': u'0.1.0',
+        'cookiecutter': {
+            'email': 'raphael@hackebrot.de',
+            'full_name': 'Raphael Pierzina',
+            'github_username': 'hackebrot',
+            'version': '0.1.0',
         }
     }
 
diff --git a/tests/vcs/test_clone.py b/tests/vcs/test_clone.py
index 7ff1e94..8be72ca 100644
--- a/tests/vcs/test_clone.py
+++ b/tests/vcs/test_clone.py
@@ -113,7 +113,7 @@ def test_clone_should_invoke_vcs_command(
     'error_message',
     [
         (
-            "fatal: repository 'https://github.com/hackebro/cookiedozer' " "not found"
+            "fatal: repository 'https://github.com/hackebro/cookiedozer' not found"
         ).encode('utf-8'),
         'hg: abort: HTTP Error 404: Not Found'.encode('utf-8'),
     ],
@@ -143,7 +143,7 @@ def test_clone_handles_repo_typo(mocker, clone_dir, error_message):
     'error_message',
     [
         (
-            "error: pathspec 'unknown_branch' did not match any file(s) known " "to git"
+            "error: pathspec 'unknown_branch' did not match any file(s) known to git"
         ).encode('utf-8'),
         "hg: abort: unknown revision 'unknown_branch'!".encode('utf-8'),
     ],
