commit 2987615f624ff925b59905467be6d35dbe220bca
Author: Michael Joseph <michaeljoseph+github@gmail.com>
Date:   Fri Nov 7 21:46:28 2014 +0200

    Rename `input_dir` everywhere

diff --git a/cookiecutter/main.py b/cookiecutter/main.py
index 8a015d4..fb5cc3b 100755
--- a/cookiecutter/main.py
+++ b/cookiecutter/main.py
@@ -28,11 +28,11 @@ builtin_abbreviations = {
 }
 
 
-def expand_abbreviations(input_dir, config_dict):
+def expand_abbreviations(template, config_dict):
     """
     Expand abbreviations in a template name.
 
-    :param input_dir: The project template name.
+    :param template: The project template name.
     :param config_dict: The user config, which will contain abbreviation
         definitions.
     """
@@ -40,16 +40,16 @@ def expand_abbreviations(input_dir, config_dict):
     abbreviations = builtin_abbreviations.copy()
     abbreviations.update(config_dict.get('abbreviations', {}))
 
-    if input_dir in abbreviations:
-        return abbreviations[input_dir]
+    if template in abbreviations:
+        return abbreviations[template]
 
     # Split on colon. If there is no colon, rest will be empty
-    # and prefix will be the whole input_dir
-    prefix, sep, rest = input_dir.partition(':')
+    # and prefix will be the whole template
+    prefix, sep, rest = template.partition(':')
     if prefix in abbreviations:
         return abbreviations[prefix].format(rest)
 
-    return input_dir
+    return template
 
 
 def cookiecutter(template, checkout=None, no_input=False, extra_context=None):
diff --git a/tests/test_main.py b/tests/test_main.py
index 232d7c6..d1527dd 100755
--- a/tests/test_main.py
+++ b/tests/test_main.py
@@ -103,28 +103,28 @@ class TestCookiecutterLocalWithInput(CookiecutterCleanSystemTestCase):
 class TestAbbreviationExpansion(unittest.TestCase):
 
     def test_abbreviation_expansion(self):
-        input_dir = main.expand_abbreviations('foo', {'abbreviations': {'foo': 'bar'}})
-        self.assertEqual(input_dir, 'bar')
+        template = main.expand_abbreviations('foo', {'abbreviations': {'foo': 'bar'}})
+        self.assertEqual(template, 'bar')
 
     def test_abbreviation_expansion_not_an_abbreviation(self):
-        input_dir = main.expand_abbreviations('baz', {'abbreviations': {'foo': 'bar'}})
-        self.assertEqual(input_dir, 'baz')
+        template = main.expand_abbreviations('baz', {'abbreviations': {'foo': 'bar'}})
+        self.assertEqual(template, 'baz')
 
     def test_abbreviation_expansion_prefix(self):
-        input_dir = main.expand_abbreviations('xx:a', {'abbreviations': {'xx': '<{0}>'}})
-        self.assertEqual(input_dir, '<a>')
+        template = main.expand_abbreviations('xx:a', {'abbreviations': {'xx': '<{0}>'}})
+        self.assertEqual(template, '<a>')
 
     def test_abbreviation_expansion_builtin(self):
-        input_dir = main.expand_abbreviations('gh:a', {})
-        self.assertEqual(input_dir, 'https://github.com/a.git')
+        template = main.expand_abbreviations('gh:a', {})
+        self.assertEqual(template, 'https://github.com/a.git')
 
     def test_abbreviation_expansion_override_builtin(self):
-        input_dir = main.expand_abbreviations('gh:a', {'abbreviations': {'gh': '<{0}>'}})
-        self.assertEqual(input_dir, '<a>')
+        template = main.expand_abbreviations('gh:a', {'abbreviations': {'gh': '<{0}>'}})
+        self.assertEqual(template, '<a>')
 
     def test_abbreviation_expansion_prefix_ignores_suffix(self):
-        input_dir = main.expand_abbreviations('xx:a', {'abbreviations': {'xx': '<>'}})
-        self.assertEqual(input_dir, '<>')
+        template = main.expand_abbreviations('xx:a', {'abbreviations': {'xx': '<>'}})
+        self.assertEqual(template, '<>')
 
     def test_abbreviation_expansion_prefix_not_0_in_braces(self):
         self.assertRaises(
