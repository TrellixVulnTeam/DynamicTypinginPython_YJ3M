commit 9163559480157c2ff905e29ebfb3279c595d4e37
Author: Michael Joseph <michaeljoseph+github@gmail.com>
Date:   Sat Jul 9 14:56:57 2016 +0200

    Split up vcs tests

diff --git a/tests/test_vcs.py b/tests/vcs/test_clone.py
similarity index 57%
rename from tests/test_vcs.py
rename to tests/vcs/test_clone.py
index df9a5a7..ba3a787 100644
--- a/tests/test_vcs.py
+++ b/tests/vcs/test_clone.py
@@ -1,108 +1,10 @@
 # -*- coding: utf-8 -*-
-
-"""
-test_vcs
-------------
-
-Tests for `cookiecutter.vcs` module.
-"""
-
 import os
 import pytest
 
 from cookiecutter import exceptions, vcs
 
 
-@pytest.mark.parametrize('repo_url, exp_repo_type, exp_repo_url', [
-    (
-        "git+https://github.com/pytest-dev/cookiecutter-pytest-plugin.git",
-        "git",
-        "https://github.com/pytest-dev/cookiecutter-pytest-plugin.git"
-    ), (
-        "hg+https://bitbucket.org/foo/bar.hg",
-        "hg",
-        "https://bitbucket.org/foo/bar.hg"
-    ), (
-        "https://github.com/pytest-dev/cookiecutter-pytest-plugin.git",
-        "git",
-        "https://github.com/pytest-dev/cookiecutter-pytest-plugin.git"
-    ), (
-        "https://bitbucket.org/foo/bar.hg",
-        "hg",
-        "https://bitbucket.org/foo/bar.hg"
-    )
-])
-def test_identify_known_repo(repo_url, exp_repo_type, exp_repo_url):
-    assert vcs.identify_repo(repo_url) == (exp_repo_type, exp_repo_url)
-
-
-@pytest.fixture(params=[
-    "foo+git",  # uses explicit identifier with 'git' in the wrong place
-    "foo+hg",  # uses explicit identifier with 'hg' in the wrong place
-    "foo+bar",  # uses explicit identifier with neither 'git' nor 'hg'
-    "foobar"  # no identifier but neither 'git' nor 'bitbucket' in url
-])
-def unknown_repo_type_url(request):
-    return request.param
-
-
-def test_identify_raise_on_unknown_repo(unknown_repo_type_url):
-    with pytest.raises(exceptions.UnknownRepoType):
-        vcs.identify_repo(unknown_repo_type_url)
-
-
-def test_prompt_should_ask_and_rm_repo_dir(mocker, tmpdir):
-    """In `prompt_and_delete_repo()`, if the user agrees to delete/reclone the
-    repo, the repo should be deleted.
-    """
-    mock_read_user = mocker.patch(
-        'cookiecutter.vcs.read_user_yes_no',
-        return_value=True,
-        autospec=True
-    )
-    repo_dir = tmpdir.mkdir('repo')
-
-    vcs.prompt_and_delete_repo(str(repo_dir))
-
-    assert mock_read_user.called
-    assert not repo_dir.exists()
-
-
-def test_prompt_should_ask_and_keep_repo_dir(mocker, tmpdir):
-    """In `prompt_and_delete_repo()`, if the user wants to keep their old
-    cloned template repo, it should not be deleted.
-    """
-    mock_read_user = mocker.patch(
-        'cookiecutter.vcs.read_user_yes_no',
-        return_value=False,
-        autospec=True
-    )
-    repo_dir = tmpdir.mkdir('repo')
-
-    with pytest.raises(SystemExit):
-        vcs.prompt_and_delete_repo(str(repo_dir))
-
-    assert mock_read_user.called
-    assert repo_dir.exists()
-
-
-def test_prompt_should_not_ask_if_no_input_and_rm_repo_dir(mocker, tmpdir):
-    """In `prompt_and_delete_repo()`, if `no_input` is True, the call to
-    `vcs.read_user_yes_no()` should be suppressed.
-    """
-    mock_read_user = mocker.patch(
-        'cookiecutter.vcs.read_user_yes_no',
-        return_value=True,
-        autospec=True
-    )
-    repo_dir = tmpdir.mkdir('repo')
-
-    vcs.prompt_and_delete_repo(str(repo_dir), no_input=True)
-
-    assert not mock_read_user.called
-    assert not repo_dir.exists()
-
-
 @pytest.fixture
 def clone_dir(tmpdir):
     """Simulates creation of a directory called `clone_dir` inside of `tmpdir`.
diff --git a/tests/vcs/test_identify_repo.py b/tests/vcs/test_identify_repo.py
new file mode 100644
index 0000000..dbd2bf9
--- /dev/null
+++ b/tests/vcs/test_identify_repo.py
@@ -0,0 +1,42 @@
+# -*- coding: utf-8 -*-
+import pytest
+
+from cookiecutter import exceptions, vcs
+
+
+@pytest.mark.parametrize('repo_url, exp_repo_type, exp_repo_url', [
+    (
+        "git+https://github.com/pytest-dev/cookiecutter-pytest-plugin.git",
+        "git",
+        "https://github.com/pytest-dev/cookiecutter-pytest-plugin.git"
+    ), (
+        "hg+https://bitbucket.org/foo/bar.hg",
+        "hg",
+        "https://bitbucket.org/foo/bar.hg"
+    ), (
+        "https://github.com/pytest-dev/cookiecutter-pytest-plugin.git",
+        "git",
+        "https://github.com/pytest-dev/cookiecutter-pytest-plugin.git"
+    ), (
+        "https://bitbucket.org/foo/bar.hg",
+        "hg",
+        "https://bitbucket.org/foo/bar.hg"
+    )
+])
+def test_identify_known_repo(repo_url, exp_repo_type, exp_repo_url):
+    assert vcs.identify_repo(repo_url) == (exp_repo_type, exp_repo_url)
+
+
+@pytest.fixture(params=[
+    "foo+git",  # uses explicit identifier with 'git' in the wrong place
+    "foo+hg",  # uses explicit identifier with 'hg' in the wrong place
+    "foo+bar",  # uses explicit identifier with neither 'git' nor 'hg'
+    "foobar"  # no identifier but neither 'git' nor 'bitbucket' in url
+])
+def unknown_repo_type_url(request):
+    return request.param
+
+
+def test_identify_raise_on_unknown_repo(unknown_repo_type_url):
+    with pytest.raises(exceptions.UnknownRepoType):
+        vcs.identify_repo(unknown_repo_type_url)
diff --git a/tests/vcs/test_is_vcs_installed.py b/tests/vcs/test_is_vcs_installed.py
new file mode 100644
index 0000000..32dba55
--- /dev/null
+++ b/tests/vcs/test_is_vcs_installed.py
@@ -0,0 +1,43 @@
+# -*- coding: utf-8 -*-
+import pytest
+
+from cookiecutter import exceptions, vcs
+
+
+@pytest.fixture
+def clone_dir(tmpdir):
+    """Simulates creation of a directory called `clone_dir` inside of `tmpdir`.
+    Returns a str to said directory.
+    """
+    return str(tmpdir.mkdir('clone_dir'))
+
+
+def test_clone_should_raise_if_vcs_not_installed(mocker, clone_dir):
+    """In `clone()`, a `VCSNotInstalled` exception should be raised if no VCS
+    is installed.
+    """
+    mocker.patch(
+        'cookiecutter.vcs.is_vcs_installed',
+        autospec=True,
+        return_value=False
+    )
+
+    repo_url = 'https://github.com/pytest-dev/cookiecutter-pytest-plugin.git'
+
+    with pytest.raises(exceptions.VCSNotInstalled):
+        vcs.clone(repo_url, clone_to_dir=clone_dir)
+
+
+@pytest.mark.parametrize('which_return, result', [
+    ('', False),
+    (None, False),
+    (False, False),
+    ('/usr/local/bin/git', True),
+])
+def test_is_vcs_installed(mocker, which_return, result):
+    mocker.patch(
+        'cookiecutter.vcs.which',
+        autospec=True,
+        return_value=which_return
+    )
+    assert vcs.is_vcs_installed('git') == result
diff --git a/tests/vcs/test_prompt_and_delete_repo.py b/tests/vcs/test_prompt_and_delete_repo.py
new file mode 100644
index 0000000..09a1b59
--- /dev/null
+++ b/tests/vcs/test_prompt_and_delete_repo.py
@@ -0,0 +1,56 @@
+# -*- coding: utf-8 -*-
+import pytest
+
+from cookiecutter import vcs
+
+
+def test_prompt_should_ask_and_rm_repo_dir(mocker, tmpdir):
+    """In `prompt_and_delete_repo()`, if the user agrees to delete/reclone the
+    repo, the repo should be deleted.
+    """
+    mock_read_user = mocker.patch(
+        'cookiecutter.vcs.read_user_yes_no',
+        return_value=True,
+        autospec=True
+    )
+    repo_dir = tmpdir.mkdir('repo')
+
+    vcs.prompt_and_delete_repo(str(repo_dir))
+
+    assert mock_read_user.called
+    assert not repo_dir.exists()
+
+
+def test_prompt_should_ask_and_keep_repo_dir(mocker, tmpdir):
+    """In `prompt_and_delete_repo()`, if the user wants to keep their old
+    cloned template repo, it should not be deleted.
+    """
+    mock_read_user = mocker.patch(
+        'cookiecutter.vcs.read_user_yes_no',
+        return_value=False,
+        autospec=True
+    )
+    repo_dir = tmpdir.mkdir('repo')
+
+    with pytest.raises(SystemExit):
+        vcs.prompt_and_delete_repo(str(repo_dir))
+
+    assert mock_read_user.called
+    assert repo_dir.exists()
+
+
+def test_prompt_should_not_ask_if_no_input_and_rm_repo_dir(mocker, tmpdir):
+    """In `prompt_and_delete_repo()`, if `no_input` is True, the call to
+    `vcs.read_user_yes_no()` should be suppressed.
+    """
+    mock_read_user = mocker.patch(
+        'cookiecutter.vcs.read_user_yes_no',
+        return_value=True,
+        autospec=True
+    )
+    repo_dir = tmpdir.mkdir('repo')
+
+    vcs.prompt_and_delete_repo(str(repo_dir), no_input=True)
+
+    assert not mock_read_user.called
+    assert not repo_dir.exists()
