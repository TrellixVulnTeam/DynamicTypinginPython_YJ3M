commit ad4d9d060b8bab5196012f3387b05169fade85e0
Author: Audrey Roy <audreyr@gmail.com>
Date:   Sat Sep 7 22:52:30 2013 +0200

    First working test for generic clone() - git.

diff --git a/cookiecutter/exceptions.py b/cookiecutter/exceptions.py
index 8d4e41c..091024b 100755
--- a/cookiecutter/exceptions.py
+++ b/cookiecutter/exceptions.py
@@ -46,3 +46,8 @@ class InvalidConfiguration(CookiecutterException):
     Raised if the global configuration file is not valid YAML or is
     badly contructed.
     """
+
+class UnknownRepoType(CookiecutterException):
+    """
+    Raised if a repo's type cannot be determined.
+    """
diff --git a/cookiecutter/vcs.py b/cookiecutter/vcs.py
index 309b134..40d58f1 100755
--- a/cookiecutter/vcs.py
+++ b/cookiecutter/vcs.py
@@ -15,11 +15,12 @@ import shutil
 import subprocess
 import sys
 
+from .exceptions import UnknownRepoType
 from .prompt import query_yes_no
 from .utils import make_sure_path_exists
 
 
-def delete_repo(repo_dir):
+def prompt_and_delete_repo(repo_dir):
     """
     Asks the user whether it's okay to delete the previously-cloned repo.
     If yes, deletes it. Otherwise, Cookiecutter exits.
@@ -48,7 +49,7 @@ def identify_repo(repo_url):
     elif "bitbucket" in repo_url:
         return "hg"
     else:
-        return None
+        raise UnknownRepoType
 
 
 def clone(repo_url, checkout=None, clone_to_dir="."):
@@ -62,19 +63,26 @@ def clone(repo_url, checkout=None, clone_to_dir="."):
     # Ensure that clone_to_dir exists
     clone_to_dir = os.path.expanduser(clone_to_dir)
     make_sure_path_exists(clone_to_dir)
-
-    # Return repo dir
-    tail = os.path.split(repo)[1]
-    repo_dir = os.path.normpath(os.path.join(clone_to_dir, tail.rsplit('.git')[0]))
+    
+    repo_type = identify_repo(repo_url)
+    
+    tail = os.path.split(repo_url)[1]
+    if repo_type == "git":
+        repo_dir = os.path.normpath(os.path.join(clone_to_dir, tail.rsplit('.git')[0]))
+    elif repo_type == "hg":
+        repo_dir = os.path.normpath(os.path.join(clone_to_dir, tail.rsplit('.hg')[0]))
     logging.debug('repo_dir is {0}'.format(repo_dir))
 
     if os.path.isdir(repo_dir):
-        delete_repo(repo_dir)
-
-    subprocess.check_call(['git', 'clone', repo], cwd=clone_to_dir)
+        prompt_and_delete_repo(repo_dir)
 
-    if checkout is not None:
-        subprocess.check_call(['git', 'checkout', checkout], cwd=repo_dir)
+    if repo_type == "git":
+        subprocess.check_call(['git', 'clone', repo_url], cwd=clone_to_dir)
+        if checkout is not None:
+            subprocess.check_call(['git', 'checkout', checkout], cwd=repo_dir)
+    elif repo_type == "hg":
+        subprocess.check_call(['hg', 'clone', repo_url[0:-3]], cwd=clone_to_dir)
+        # TODO: implement checkout
 
     return repo_dir
 
@@ -120,7 +128,6 @@ def hg_clone(repo, clone_to_dir="."):
 
     # Return repo dir
     tail = os.path.split(repo)[1]
-    repo_dir = os.path.normpath(os.path.join(clone_to_dir, tail.rsplit('.hg')[0]))
     logging.debug('repo_dir is {0}'.format(repo_dir))
 
     if os.path.isdir(repo_dir):
diff --git a/tests/test_vcs.py b/tests/test_vcs.py
index d2ed8ae..da3fe81 100755
--- a/tests/test_vcs.py
+++ b/tests/test_vcs.py
@@ -57,6 +57,15 @@ class TestIdentifyRepo(unittest.TestCase):
 
 class TestVCS(unittest.TestCase):
 
+    def test_clone(self):
+        repo_dir = vcs.clone(
+            'https://github.com/audreyr/cookiecutter-pypackage.git'
+        )
+        self.assertEqual(repo_dir, 'cookiecutter-pypackage')
+        self.assertTrue(os.path.isfile('cookiecutter-pypackage/README.rst'))
+        if os.path.isdir('cookiecutter-pypackage'):
+            shutil.rmtree('cookiecutter-pypackage')
+
     def test_git_clone(self):
         repo_dir = vcs.git_clone(
             'https://github.com/audreyr/cookiecutter-pypackage.git'
