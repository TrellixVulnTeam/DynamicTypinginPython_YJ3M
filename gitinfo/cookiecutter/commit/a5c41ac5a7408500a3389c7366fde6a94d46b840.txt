commit a5c41ac5a7408500a3389c7366fde6a94d46b840
Author: Raphael Pierzina <raphael@hackebrot.de>
Date:   Sun Nov 22 02:30:29 2015 +0100

    Create templates from configured environment and raise for undefined

diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 7a4d461..53118eb 100755
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -16,16 +16,17 @@ import logging
 import os
 import shutil
 
-from jinja2 import FileSystemLoader, Template
+from jinja2 import FileSystemLoader, StrictUndefined
 from jinja2.environment import Environment
-from jinja2.exceptions import TemplateSyntaxError
+from jinja2.exceptions import TemplateSyntaxError, UndefinedError
 from binaryornot.check import is_binary
 
 from .exceptions import (
     NonTemplatedInputDirException,
     ContextDecodingException,
     FailedHookException,
-    OutputDirExistsException
+    OutputDirExistsException,
+    UndefinedVariableInTemplate
 )
 from .find import find_template
 from .utils import make_sure_path_exists, work_in, rmtree
@@ -141,7 +142,7 @@ def generate_file(project_dir, infile, context, env):
     logging.debug('Generating file {0}'.format(infile))
 
     # Render the path to the output file (not including the root project dir)
-    outfile_tmpl = Template(infile)
+    outfile_tmpl = env.from_string(infile)
 
     outfile = os.path.join(project_dir, outfile_tmpl.render(**context))
     file_name_is_empty = os.path.isdir(outfile)
@@ -181,14 +182,14 @@ def generate_file(project_dir, infile, context, env):
     shutil.copymode(infile, outfile)
 
 
-def render_and_create_dir(dirname, context, output_dir,
+def render_and_create_dir(dirname, context, output_dir, environment,
                           overwrite_if_exists=False):
     """
     Renders the name of a directory, creates the directory, and
     returns its path.
     """
 
-    name_tmpl = Template(dirname)
+    name_tmpl = environment.from_string(dirname)
     rendered_dirname = name_tmpl.render(**context)
     logging.debug('Rendered dir {0} must exist in output_dir {1}'.format(
         rendered_dirname,
@@ -255,10 +256,21 @@ def generate_files(repo_dir, context=None, output_dir='.',
 
     unrendered_dir = os.path.split(template_dir)[1]
     ensure_dir_is_templated(unrendered_dir)
-    project_dir = render_and_create_dir(unrendered_dir,
-                                        context,
-                                        output_dir,
-                                        overwrite_if_exists)
+    env = Environment(
+        keep_trailing_newline=True,
+        undefined=StrictUndefined
+    )
+    try:
+        project_dir = render_and_create_dir(
+            unrendered_dir,
+            context,
+            output_dir,
+            env,
+            overwrite_if_exists
+        )
+    except UndefinedError as err:
+        msg = "Unable to create project directory '{}'".format(unrendered_dir)
+        raise UndefinedVariableInTemplate(msg, err, context)
 
     # We want the Jinja path and the OS paths to match. Consequently, we'll:
     #   + CD to the template folder
@@ -273,7 +285,6 @@ def generate_files(repo_dir, context=None, output_dir='.',
     _run_hook_from_repo_dir(repo_dir, 'pre_gen_project', project_dir, context)
 
     with work_in(template_dir):
-        env = Environment(keep_trailing_newline=True)
         env.loader = FileSystemLoader('.')
 
         for root, dirs, files in os.walk('.'):
@@ -307,13 +318,24 @@ def generate_files(repo_dir, context=None, output_dir='.',
             dirs[:] = render_dirs
             for d in dirs:
                 unrendered_dir = os.path.join(project_dir, root, d)
-                render_and_create_dir(unrendered_dir, context, output_dir,
-                                      overwrite_if_exists)
+                try:
+                    render_and_create_dir(
+                        unrendered_dir,
+                        context,
+                        output_dir,
+                        env,
+                        overwrite_if_exists
+                    )
+                except UndefinedError as err:
+                    rmtree(project_dir)
+                    _dir = os.path.relpath(unrendered_dir, output_dir)
+                    msg = "Unable to create directory '{}'".format(_dir)
+                    raise UndefinedVariableInTemplate(msg, err, context)
 
             for f in files:
                 infile = os.path.normpath(os.path.join(root, f))
                 if copy_without_render(infile, context):
-                    outfile_tmpl = Template(infile)
+                    outfile_tmpl = env.from_string(infile)
                     outfile_rendered = outfile_tmpl.render(**context)
                     outfile = os.path.join(project_dir, outfile_rendered)
                     logging.debug(
@@ -324,7 +346,12 @@ def generate_files(repo_dir, context=None, output_dir='.',
                     shutil.copymode(infile, outfile)
                     continue
                 logging.debug('f is {0}'.format(f))
-                generate_file(project_dir, infile, context, env)
+                try:
+                    generate_file(project_dir, infile, context, env)
+                except UndefinedError as err:
+                    rmtree(project_dir)
+                    msg = "Unable to create file '{}'".format(infile)
+                    raise UndefinedVariableInTemplate(msg, err, context)
 
     _run_hook_from_repo_dir(repo_dir, 'post_gen_project', project_dir, context)
 
