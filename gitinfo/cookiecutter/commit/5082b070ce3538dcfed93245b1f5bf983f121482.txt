commit 5082b070ce3538dcfed93245b1f5bf983f121482
Author: Andrey Shpak <insspb@users.noreply.github.com>
Date:   Sat Apr 18 19:27:21 2020 +0300

    Added: docstrings for test files in `tests/repository` directory (#1371)

diff --git a/tests/repository/test_determine_repo_dir_clones_repo.py b/tests/repository/test_determine_repo_dir_clones_repo.py
index 211b672..d49db22 100644
--- a/tests/repository/test_determine_repo_dir_clones_repo.py
+++ b/tests/repository/test_determine_repo_dir_clones_repo.py
@@ -15,9 +15,11 @@ from cookiecutter import repository, exceptions
     ('http://example.com/path/to/zipfile.zip', True),
 ])
 def test_zipfile_unzip(mocker, template, is_url, user_config_data):
-    """`unzip()` should be called with correct args when \
-    `determine_repo_dir()` is passed a zipfile, or a URL \
-    to a zipfile."""
+    """Verify zip files correctly handled for different source locations.
+
+    `unzip()` should be called with correct args when `determine_repo_dir()`
+    is passed a zipfile, or a URL to a zipfile.
+    """
     mock_clone = mocker.patch(
         'cookiecutter.repository.unzip',
         return_value='tests/fake-repo-tmpl',
@@ -57,8 +59,11 @@ def template_url():
 
 def test_repository_url_should_clone(
         mocker, template_url, user_config_data):
-    """`clone()` should be called with correct args when \
-    `determine_repo_dir()` is passed a repository template url."""
+    """Verify repository url triggers clone function.
+
+    `clone()` should be called with correct args when `determine_repo_dir()` is
+    passed a repository template url.
+    """
     mock_clone = mocker.patch(
         'cookiecutter.repository.clone',
         return_value='tests/fake-repo-tmpl',
@@ -87,6 +92,7 @@ def test_repository_url_should_clone(
 
 def test_repository_url_with_no_context_file(
         mocker, template_url, user_config_data):
+    """Verify cloned repository without `cookiecutter.json` file raises error."""
     mocker.patch(
         'cookiecutter.repository.clone',
         return_value='tests/fake-repo-bad',
diff --git a/tests/repository/test_determine_repo_dir_finds_existing_cookiecutter.py b/tests/repository/test_determine_repo_dir_finds_existing_cookiecutter.py
index 6aa290c..20a5b98 100644
--- a/tests/repository/test_determine_repo_dir_finds_existing_cookiecutter.py
+++ b/tests/repository/test_determine_repo_dir_finds_existing_cookiecutter.py
@@ -12,11 +12,13 @@ from cookiecutter import repository
 
 @pytest.fixture
 def template():
+    """Fixture. Return simple string as template name."""
     return 'cookiecutter-pytest-plugin'
 
 
 @pytest.fixture
 def cloned_cookiecutter_path(user_config_data, template):
+    """Fixture. Create fake project directory in special user folder."""
     cookiecutters_dir = user_config_data['cookiecutters_dir']
 
     cloned_template_path = os.path.join(cookiecutters_dir, template)
@@ -29,8 +31,13 @@ def cloned_cookiecutter_path(user_config_data, template):
 
 def test_should_find_existing_cookiecutter(
         template, user_config_data, cloned_cookiecutter_path):
+    """
+    Should find folder created by `cloned_cookiecutter_path` and return it.
+
+    This folder is considered like previously cloned project directory.
+    """
     project_dir, cleanup = repository.determine_repo_dir(
-        template,
+        template=template,
         abbreviations={},
         clone_to_dir=user_config_data['cookiecutters_dir'],
         checkout=None,
diff --git a/tests/repository/test_determine_repo_dir_finds_subdirectories.py b/tests/repository/test_determine_repo_dir_finds_subdirectories.py
index 40b0068..610c03c 100644
--- a/tests/repository/test_determine_repo_dir_finds_subdirectories.py
+++ b/tests/repository/test_determine_repo_dir_finds_subdirectories.py
@@ -12,11 +12,13 @@ from cookiecutter import repository, exceptions
 
 @pytest.fixture
 def template():
+    """Fixture. Return simple string as template name."""
     return 'cookiecutter-pytest-plugin'
 
 
 @pytest.fixture
 def cloned_cookiecutter_path(user_config_data, template):
+    """Fixture. Prepare folder structure for tests in this file."""
     cookiecutters_dir = user_config_data['cookiecutters_dir']
 
     cloned_template_path = os.path.join(cookiecutters_dir, template)
@@ -34,9 +36,9 @@ def cloned_cookiecutter_path(user_config_data, template):
 def test_should_find_existing_cookiecutter(
     template, user_config_data, cloned_cookiecutter_path
 ):
-
+    """Find `cookiecutter.json` in sub folder created by `cloned_cookiecutter_path`."""
     project_dir, cleanup = repository.determine_repo_dir(
-        template,
+        template=template,
         abbreviations={},
         clone_to_dir=user_config_data['cookiecutters_dir'],
         checkout=None,
@@ -49,10 +51,10 @@ def test_should_find_existing_cookiecutter(
 
 
 def test_local_repo_typo(template, user_config_data, cloned_cookiecutter_path):
-    """An unknown local repo should raise a `RepositoryNotFound` exception."""
+    """Wrong pointing to `cookiecutter.json` sub-directory should raise."""
     with pytest.raises(exceptions.RepositoryNotFound) as err:
         repository.determine_repo_dir(
-            template,
+            template=template,
             abbreviations={},
             clone_to_dir=user_config_data['cookiecutters_dir'],
             checkout=None,
diff --git a/tests/repository/test_is_repo_url.py b/tests/repository/test_is_repo_url.py
index 9a2fef7..7832f28 100644
--- a/tests/repository/test_is_repo_url.py
+++ b/tests/repository/test_is_repo_url.py
@@ -16,6 +16,7 @@ from cookiecutter.repository import (
     'http://example.com/path/to/zipfile.zip',
 ])
 def zipfile(request):
+    """Fixture. Represent possible paths to zip file."""
     return request.param
 
 
@@ -34,6 +35,7 @@ def test_is_zip_file(zipfile):
     'file://server/path/to/repo.git',
 ])
 def remote_repo_url(request):
+    """Fixture. Represent possible URI to different repositories types."""
     return request.param
 
 
@@ -51,6 +53,7 @@ def test_is_repo_url_for_remote_urls(remote_repo_url):
     ),
 ])
 def local_repo_url(request):
+    """Fixture. Represent possible paths to local resources."""
     return request.param
 
 
@@ -60,6 +63,7 @@ def test_is_repo_url_for_local_urls(local_repo_url):
 
 
 def test_expand_abbreviations():
+    """Validate `repository.expand_abbreviations` correctly translate url."""
     template = 'gh:audreyr/cookiecutter-pypackage'
 
     # This is not a valid repo url just yet!
diff --git a/tests/repository/test_repository_has_cookiecutter_json.py b/tests/repository/test_repository_has_cookiecutter_json.py
index d9d1ec5..38569d4 100644
--- a/tests/repository/test_repository_has_cookiecutter_json.py
+++ b/tests/repository/test_repository_has_cookiecutter_json.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
 
-"""Tests around validation if a given repository contains a (valid) config."""
+"""Tests for `repository_has_cookiecutter_json` function."""
 
 import pytest
 
@@ -8,16 +8,13 @@ from cookiecutter.repository import repository_has_cookiecutter_json
 
 
 def test_valid_repository():
+    """Validate correct response if `cookiecutter.json` file exist."""
     assert repository_has_cookiecutter_json('tests/fake-repo')
 
 
-@pytest.fixture(params=[
-    'tests/fake-repo-bad',
-    'tests/unknown-repo',
-])
-def invalid_repository(request):
-    return request.param
-
-
+@pytest.mark.parametrize(
+    'invalid_repository', (['tests/fake-repo-bad', 'tests/unknown-repo'])
+)
 def test_invalid_repository(invalid_repository):
+    """Validate correct response if `cookiecutter.json` file not exist."""
     assert not repository_has_cookiecutter_json(invalid_repository)
