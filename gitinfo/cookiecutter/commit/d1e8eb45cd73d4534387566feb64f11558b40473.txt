commit d1e8eb45cd73d4534387566feb64f11558b40473
Author: Daniel Greenfeld <danny@eventbrite.com>
Date:   Tue Jan 13 08:04:36 2015 -0800

    Changed 2.6 deprecation warning to raise an exception

diff --git a/HISTORY.rst b/HISTORY.rst
index cb21aa0..5ac4399 100644
--- a/HISTORY.rst
+++ b/HISTORY.rst
@@ -10,8 +10,8 @@ The goals of this release was to formally remove support for Python 2.6 and cont
 
 * Lay the foundation for `py.test` fixtures and convert `test_generate.py` and `test_examples.py`, thanks to `@hackebrot`_ (#322).
 * Generate pytest coverage, thanks to `@michaeljoseph`_ (#326).
-* Add `PendingDeprecation` warning for users of Python 2.6, as support for it is gone in Python 2.7, thanks to `@michaeljoseph`_ (#201).
 * Documenting of Pull Request merging and HISTORY.rst maintenance, thanks to `@michaeljoseph`_ (#330).
+* Formally removed support for 2.6, thanks to `@pydanny`_ (#201).
 
 
 0.9.0 (2015-01-13)
@@ -24,6 +24,7 @@ Features:
 * Python 3.4 is now a first class citizen, thanks to everyone.
 * `cookiecutter.json` values are now rendered Jinja2 templates, thanks to @bollwyvl (#291).
 * Move to `py.test`, thanks to `@pfmoore`_ (#319) and `@ramiroluz`_ (#310).
+* Add `PendingDeprecation` warning for users of Python 2.6, as support for it is gone in Python 2.7, thanks to `@michaeljoseph`_ (#201).
 
 Bug Fixes:
 
diff --git a/cookiecutter/__init__.py b/cookiecutter/__init__.py
index 732fd08..544deb0 100755
--- a/cookiecutter/__init__.py
+++ b/cookiecutter/__init__.py
@@ -7,15 +7,9 @@ cookiecutter
 
 Main package for Cookiecutter.
 """
-import warnings
-
 from .compat import OLD_PY2
 
-
 __version__ = '0.9.0'
 
 if OLD_PY2:
-    warnings.warn(
-        'Python 2.6 support has been removed as of 1.0.0',
-        DeprecationWarning
-    )
+    raise DeprecationWarning('Python 2.6 support was removed from cookiecutter in release 1.0.0.')
diff --git a/cookiecutter/compat.py b/cookiecutter/compat.py
index b2bdb36..d4d4d61 100644
--- a/cookiecutter/compat.py
+++ b/cookiecutter/compat.py
@@ -9,10 +9,6 @@ if PY3:  # pragma: no cover
     iteritems = lambda d: iter(d.items())
     from unittest.mock import patch
     from io import StringIO
-    import unittest
-
-    import json
-    from collections import OrderedDict
 
     def read_response(prompt=''):
         """
@@ -34,15 +30,6 @@ else:  # pragma: no cover
     from mock import patch
     from cStringIO import StringIO
 
-    if OLD_PY2:
-        from ordereddict import OrderedDict
-        import simplejson as json
-        import unittest2 as unittest
-    else:
-        import json
-        from collections import OrderedDict
-        import unittest
-
     def read_response(prompt=''):
         """
         Prompt the user for a response.
@@ -144,4 +131,4 @@ else:  # Forced testing
                         return name
         return None
 
-_hush_pyflakes = (patch, StringIO, json, OrderedDict, unittest, which)
+_hush_pyflakes = (patch, StringIO, which)
