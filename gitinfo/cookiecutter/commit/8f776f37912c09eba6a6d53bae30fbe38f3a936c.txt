commit 8f776f37912c09eba6a6d53bae30fbe38f3a936c
Author: Andrey Shpak <insspb@users.noreply.github.com>
Date:   Sat Apr 18 19:33:11 2020 +0300

    Added: docstrings for cookiecutter test files (#1376)

diff --git a/tests/test_log.py b/tests/test_log.py
index a4d7110..798eeb2 100644
--- a/tests/test_log.py
+++ b/tests/test_log.py
@@ -10,6 +10,7 @@ from cookiecutter.log import configure_logger
 
 
 def create_log_records():
+    """Test function, create log entries in expected stage of test."""
     cookiecutter_logger = logging.getLogger('cookiecutter')
     foo_logger = logging.getLogger('cookiecutter.foo')
     foobar_logger = logging.getLogger('cookiecutter.foo.bar')
@@ -25,6 +26,7 @@ def create_log_records():
 
 @pytest.fixture
 def info_messages():
+    """Fixture. List of test info messages."""
     return [
         'INFO: Welcome to Cookiecutter',
         'INFO: Loading user config from home dir',
@@ -34,6 +36,7 @@ def info_messages():
 
 @pytest.fixture
 def debug_messages():
+    """Fixture. List of test debug messages."""
     return [
         'INFO cookiecutter: '
         'Welcome to Cookiecutter',
@@ -60,21 +63,25 @@ def debug_messages():
 
 @pytest.fixture
 def info_logger():
+    """Fixture. Call cookiecutter logger setup with `info` debug level."""
     return configure_logger(stream_level='INFO')
 
 
 @pytest.fixture
 def debug_logger():
+    """Fixture. Call cookiecutter logger setup with `debug` debug level."""
     return configure_logger(stream_level='DEBUG')
 
 
 @pytest.fixture
 def debug_file(tmpdir):
+    """Fixture. Generate debug file location for tests."""
     return tmpdir / 'pytest-plugin.log'
 
 
 @pytest.fixture
 def info_logger_with_file(debug_file):
+    """Fixture. Call cookiecutter logger setup with `info` debug level + `file`."""
     return configure_logger(
         stream_level='INFO',
         debug_file=str(debug_file),
diff --git a/tests/test_repo_not_found.py b/tests/test_repo_not_found.py
index 5f50267..d2e8b63 100644
--- a/tests/test_repo_not_found.py
+++ b/tests/test_repo_not_found.py
@@ -8,5 +8,6 @@ from cookiecutter import main, exceptions
 
 
 def test_should_raise_error_if_repo_does_not_exist():
+    """Cookiecutter invocation with non-exist repository should raise error."""
     with pytest.raises(exceptions.RepositoryNotFound):
         main.cookiecutter('definitely-not-a-valid-repo-dir')
diff --git a/tests/test_specify_output_dir.py b/tests/test_specify_output_dir.py
index aa02d60..6c6a12b 100644
--- a/tests/test_specify_output_dir.py
+++ b/tests/test_specify_output_dir.py
@@ -22,11 +22,13 @@ def context():
 
 @pytest.fixture
 def output_dir(tmpdir):
+    """Fixture to prepare test output directory."""
     return str(tmpdir.mkdir('output'))
 
 
 @pytest.fixture
 def template(tmpdir):
+    """Fixture to prepare test template directory."""
     template_dir = tmpdir.mkdir('template')
     template_dir.join('cookiecutter.json').ensure(file=True)
     return str(template_dir)
@@ -34,20 +36,24 @@ def template(tmpdir):
 
 @pytest.fixture(autouse=True)
 def mock_gen_context(mocker, context):
+    """Fixture. Automatically mock cookiecutter's function with expected output."""
     mocker.patch('cookiecutter.main.generate_context', return_value=context)
 
 
 @pytest.fixture(autouse=True)
 def mock_prompt(mocker):
+    """Fixture. Automatically mock cookiecutter's function with expected output."""
     mocker.patch('cookiecutter.main.prompt_for_config')
 
 
 @pytest.fixture(autouse=True)
 def mock_replay(mocker):
+    """Fixture. Automatically mock cookiecutter's function with expected output."""
     mocker.patch('cookiecutter.main.dump')
 
 
 def test_api_invocation(mocker, template, output_dir, context):
+    """Verify output dir location is correctly passed."""
     mock_gen_files = mocker.patch('cookiecutter.main.generate_files')
 
     main.cookiecutter(template, output_dir=output_dir)
@@ -62,6 +68,7 @@ def test_api_invocation(mocker, template, output_dir, context):
 
 
 def test_default_output_dir(mocker, template, context):
+    """Verify default output dir is current working folder."""
     mock_gen_files = mocker.patch('cookiecutter.main.generate_files')
 
     main.cookiecutter(template)
diff --git a/tests/test_utils.py b/tests/test_utils.py
index efbdb02..0863e5f 100644
--- a/tests/test_utils.py
+++ b/tests/test_utils.py
@@ -18,6 +18,7 @@ def make_readonly(path):
 
 
 def test_rmtree():
+    """Verify `utils.rmtree` remove files marked as read-only."""
     os.mkdir('foo')
     with open('foo/bar', "w") as f:
         f.write("Test data")
@@ -27,6 +28,11 @@ def test_rmtree():
 
 
 def test_make_sure_path_exists():
+    """Verify correct True/False response from `utils.make_sure_path_exists`.
+
+    Should return True if directory exist or created.
+    Should return False if impossible to create directory (for example protected)
+    """
     if sys.platform.startswith('win'):
         existing_directory = os.path.abspath(os.curdir)
         uncreatable_directory = 'a*b'
@@ -43,6 +49,7 @@ def test_make_sure_path_exists():
 
 
 def test_workin():
+    """Verify returning to original folder after `utils.work_in` use."""
     cwd = os.getcwd()
     ch_to = 'tests/files'
 
diff --git a/tests/vcs/test_identify_repo.py b/tests/vcs/test_identify_repo.py
index 24fde7f..f775d50 100644
--- a/tests/vcs/test_identify_repo.py
+++ b/tests/vcs/test_identify_repo.py
@@ -43,6 +43,7 @@ from cookiecutter import exceptions, vcs
     )
 ])
 def test_identify_known_repo(repo_url, exp_repo_type, exp_repo_url):
+    """Verify different correct repositories url syntax is correctly transformed."""
     assert vcs.identify_repo(repo_url) == (exp_repo_type, exp_repo_url)
 
 
@@ -54,9 +55,11 @@ def test_identify_known_repo(repo_url, exp_repo_type, exp_repo_url):
     'http://norepotypespecified.com'
 ])
 def unknown_repo_type_url(request):
+    """Fixture. Return wrong formatted repository url."""
     return request.param
 
 
 def test_identify_raise_on_unknown_repo(unknown_repo_type_url):
+    """Verify different incorrect repositories url syntax trigger error raising."""
     with pytest.raises(exceptions.UnknownRepoType):
         vcs.identify_repo(unknown_repo_type_url)
diff --git a/tests/vcs/test_is_vcs_installed.py b/tests/vcs/test_is_vcs_installed.py
index 18d084d..a7ceb5a 100644
--- a/tests/vcs/test_is_vcs_installed.py
+++ b/tests/vcs/test_is_vcs_installed.py
@@ -14,6 +14,7 @@ from cookiecutter import vcs
     ('/usr/local/bin/git', True),
 ])
 def test_is_vcs_installed(mocker, which_return, result):
+    """Verify `is_vcs_installed` function correctly handles `which` answer."""
     mocker.patch(
         'cookiecutter.vcs.which',
         autospec=True,
