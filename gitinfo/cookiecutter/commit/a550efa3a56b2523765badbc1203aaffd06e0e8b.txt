commit a550efa3a56b2523765badbc1203aaffd06e0e8b
Author: Daniel Greenfeld <danny@eventbrite.com>
Date:   Sat Mar 14 17:02:09 2015 -0400

    merge

diff --git a/HISTORY.rst b/HISTORY.rst
index 72936ec..372c580 100644
--- a/HISTORY.rst
+++ b/HISTORY.rst
@@ -10,7 +10,7 @@ The goals of this release was to formally remove support for Python 2.6 and cont
 
 Features:
 
-* Lay the foundation for `py.test` fixtures and convert `test_generate.py` and `test_examples.py`, thanks to `@hackebrot`_ (#322, #332, #336, #338, #340, #341, #347).
+* Lay the foundation for `py.test` fixtures and convert `test_generate.py` and `test_examples.py`, thanks to `@hackebrot`_ (#322, #332, #336, #338, #340, #341, #345, #347).
 * Generate pytest coverage, thanks to `@michaeljoseph`_ (#326).
 * Documenting of Pull Request merging and HISTORY.rst maintenance, thanks to `@michaeljoseph`_ (#330).
 * Large expansions to the tutorials thanks to `@hackebrot`_ (#384)
diff --git a/tests/test_arg_parsing.py b/tests/test_arg_parsing.py
index d3ee79c..7f09c74 100644
--- a/tests/test_arg_parsing.py
+++ b/tests/test_arg_parsing.py
@@ -8,6 +8,8 @@ test_arg_parsing
 Tests formerly known from a unittest residing in test_main.py named
 TestArgParsing.test_parse_cookiecutter_args
 TestArgParsing.test_parse_cookiecutter_args_with_branch
+
+Deprecated - Delete when ready
 """
 
 from __future__ import unicode_literals
@@ -15,13 +17,13 @@ from __future__ import unicode_literals
 from cookiecutter import main
 
 
-def test_parse_cookiecutter_args():
-    args = main.parse_cookiecutter_args(['project/'])
-    assert args.input_dir == 'project/'
-    assert args.checkout is None
+# def test_parse_cookiecutter_args():
+#     args = main.parse_cookiecutter_args(['project/'])
+#     assert args.input_dir == 'project/'
+#     assert args.checkout is None
 
 
-def test_parse_cookiecutter_args_with_branch():
-    args = main.parse_cookiecutter_args(['project/', '--checkout', 'develop'])
-    assert args.input_dir == 'project/'
-    assert args.checkout == 'develop'
+# def test_parse_cookiecutter_args_with_branch():
+#     args = main.parse_cookiecutter_args(['project/', '--checkout', 'develop'])
+#     assert args.input_dir == 'project/'
+#     assert args.checkout == 'develop'
diff --git a/tests/test_prompt.py b/tests/test_prompt.py
old mode 100755
new mode 100644
index 66717a2..8880111
--- a/tests/test_prompt.py
+++ b/tests/test_prompt.py
@@ -3,117 +3,150 @@
 
 """
 test_prompt
---------------
+-----------
 
 Tests for `cookiecutter.prompt` module.
+TestPrompt.test_prompt_for_config_simple
+TestPrompt.test_prompt_for_config_unicode
+TestPrompt.test_unicode_prompt_for_config_unicode
+TestPrompt.test_unicode_prompt_for_default_config_unicode
+TestPrompt.test_unicode_prompt_for_templated_config
+
+TestQueryAnswers.test_query_y
+TestQueryAnswers.test_query_ye
+TestQueryAnswers.test_query_yes
+TestQueryAnswers.test_query_n
+
+TestQueryDefaults.test_query_y_none_default
+TestQueryDefaults.test_query_n_none_default
+TestQueryDefaults.test_query_no_default
+TestQueryDefaults.test_query_bad_default
 """
 
 from collections import OrderedDict
 import platform
-import sys
-import unittest
 
-from cookiecutter.compat import patch
-from cookiecutter import prompt
+import pytest
 
-if 'windows' in platform.platform().lower():
-    old_stdin = sys.stdin
+from cookiecutter import prompt
 
-    class X(object):
-        def readline(self):
-            return '\n'
-    sys.stdin = X()
 
+@pytest.fixture(autouse=True)
+def patch_readline_on_win(monkeypatch):
+    if 'windows' in platform.platform().lower():
+        monkeypatch.setattr('sys.stdin.readline', lambda: '\n')
 
-class TestPrompt(unittest.TestCase):
 
-    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'Audrey Roy')
-    def test_prompt_for_config_simple(self):
+class TestPrompt(object):
+    def test_prompt_for_config_simple(self, monkeypatch):
+        monkeypatch.setattr(
+            'cookiecutter.prompt.read_response',
+            lambda x=u'': u'Audrey Roy'
+        )
         context = {"cookiecutter": {"full_name": "Your Name"}}
 
         cookiecutter_dict = prompt.prompt_for_config(context)
-        self.assertEqual(cookiecutter_dict, {"full_name": u"Audrey Roy"})
+        assert cookiecutter_dict == {"full_name": u"Audrey Roy"}
 
-    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'Pizzä ïs Gööd')
-    def test_prompt_for_config_unicode(self):
+    def test_prompt_for_config_unicode(self, monkeypatch):
+        monkeypatch.setattr(
+            'cookiecutter.prompt.read_response',
+            lambda x=u'': u'Pizzä ïs Gööd'
+        )
         context = {"cookiecutter": {"full_name": "Your Name"}}
 
         cookiecutter_dict = prompt.prompt_for_config(context)
-        self.assertEqual(cookiecutter_dict, {"full_name": u"Pizzä ïs Gööd"})
+        assert cookiecutter_dict == {"full_name": u"Pizzä ïs Gööd"}
 
-    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'Pizzä ïs Gööd')
-    def test_unicode_prompt_for_config_unicode(self):
+    def test_unicode_prompt_for_config_unicode(self, monkeypatch):
+        monkeypatch.setattr(
+            'cookiecutter.prompt.read_response',
+            lambda x=u'': u'Pizzä ïs Gööd'
+        )
         context = {"cookiecutter": {"full_name": u"Řekni či napiš své jméno"}}
 
         cookiecutter_dict = prompt.prompt_for_config(context)
-        self.assertEqual(cookiecutter_dict, {"full_name": u"Pizzä ïs Gööd"})
+        assert cookiecutter_dict == {"full_name": u"Pizzä ïs Gööd"}
 
-    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'\n')
-    def test_unicode_prompt_for_default_config_unicode(self):
+    def test_unicode_prompt_for_default_config_unicode(self, monkeypatch):
+        monkeypatch.setattr(
+            'cookiecutter.prompt.read_response',
+            lambda x=u'': u'\n'
+        )
         context = {"cookiecutter": {"full_name": u"Řekni či napiš své jméno"}}
 
         cookiecutter_dict = prompt.prompt_for_config(context)
-        self.assertEqual(cookiecutter_dict, {"full_name": u"Řekni či napiš své jméno"})
+        assert cookiecutter_dict == {"full_name": u"Řekni či napiš své jméno"}
 
-    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'\n')
-    def test_unicode_prompt_for_templated_config(self):
+    def test_unicode_prompt_for_templated_config(self, monkeypatch):
+        monkeypatch.setattr(
+            'cookiecutter.prompt.read_response',
+            lambda x=u'': u'\n'
+        )
         context = {"cookiecutter": OrderedDict([
-            ("project_name", u"A New Project"),
-            ("pkg_name", u"{{ cookiecutter.project_name|lower|replace(' ', '') }}")
+            (
+                "project_name",
+                u"A New Project"
+            ), (
+                "pkg_name",
+                u"{{ cookiecutter.project_name|lower|replace(' ', '') }}"
+            )
         ])}
 
+        exp_cookiecutter_dict = {
+            "project_name": u"A New Project", "pkg_name": u"anewproject"
+        }
         cookiecutter_dict = prompt.prompt_for_config(context)
-        self.assertEqual(cookiecutter_dict, {"project_name": u"A New Project",
-             "pkg_name": u"anewproject"})
-
-    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'2')
-    def test_prompt_for_config_nonstring(self):
-        context = {"cookiecutter": {"python_major_version": 3}}
-
-        cookiecutter_dict = prompt.prompt_for_config(context)
-        self.assertEqual(cookiecutter_dict, {"python_major_version": u"2"})
-
-
-class TestQueryAnswers(unittest.TestCase):
-
-    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'y')
-    def test_query_y(self):
-        answer = prompt.query_yes_no("Blah?")
-        self.assertTrue(answer)
-
-    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'ye')
-    def test_query_ye(self):
-        answer = prompt.query_yes_no("Blah?")
-        self.assertTrue(answer)
-
-    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'yes')
-    def test_query_yes(self):
-        answer = prompt.query_yes_no("Blah?")
-        self.assertTrue(answer)
-
-    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'n')
-    def test_query_n(self):
-        answer = prompt.query_yes_no("Blah?")
-        self.assertFalse(answer)
-
-
-class TestQueryDefaults(unittest.TestCase):
-
-    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'y')
-    def test_query_y_none_default(self):
-        answer = prompt.query_yes_no("Blah?", default=None)
-        self.assertTrue(answer)
-
-    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'n')
-    def test_query_n_none_default(self):
-        answer = prompt.query_yes_no("Blah?", default=None)
-        self.assertFalse(answer)
-
-    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'')
-    def test_query_no_default(self):
-        answer = prompt.query_yes_no("Blah?", default='no')
-        self.assertFalse(answer)
+        assert cookiecutter_dict == exp_cookiecutter_dict
+
+
+class TestQueryAnswers(object):
+    @pytest.fixture(params=[u'y', u'ye', u'yes'])
+    def patch_read_response(self, request, monkeypatch):
+        monkeypatch.setattr(
+            'cookiecutter.prompt.read_response',
+            lambda x=u'': request.param
+        )
+
+    @pytest.mark.usefixtures('patch_read_response')
+    def test_query(self):
+        assert prompt.query_yes_no("Blah?")
+
+    def test_query_n(self, monkeypatch):
+        monkeypatch.setattr(
+            'cookiecutter.prompt.read_response',
+            lambda x=u'': u'n'
+        )
+        assert not prompt.query_yes_no("Blah?")
+
+
+class TestQueryDefaults(object):
+    def test_query_y_none_default(self, monkeypatch):
+        monkeypatch.setattr(
+            'cookiecutter.prompt.read_response',
+            lambda x=u'': u'y'
+        )
+        assert prompt.query_yes_no("Blah?", default=None)
+
+    def test_query_n_none_default(self, monkeypatch):
+        monkeypatch.setattr(
+            'cookiecutter.prompt.read_response',
+            lambda x=u'': u'n'
+        )
+        assert not prompt.query_yes_no("Blah?", default=None)
+
+    def test_query_no_default(self, monkeypatch):
+        monkeypatch.setattr(
+            'cookiecutter.prompt.read_response',
+            lambda x=u'': u''
+        )
+        assert not prompt.query_yes_no("Blah?", default='no')
+
+    def test_query_bad_default(self, monkeypatch):
+        monkeypatch.setattr(
+            'cookiecutter.prompt.read_response',
+            lambda x=u'': u'junk'
+        )
+        with pytest.raises(ValueError):
+            prompt.query_yes_no("Blah?", default='yn')
 
-    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'junk')
-    def test_query_bad_default(self):
-        self.assertRaises(ValueError, prompt.query_yes_no, "Blah?", default='yn')
