commit c4f8a2cc0eab73e5529efdcf86dcb40a1c77b268
Author: Raphael Pierzina <raphael@hackebrot.de>
Date:   Fri Aug 7 23:34:39 2015 +0200

    Add doc strings for all of the methods in test_replay.py

diff --git a/tests/test_replay.py b/tests/test_replay.py
index 4343e42..da0f098 100644
--- a/tests/test_replay.py
+++ b/tests/test_replay.py
@@ -16,10 +16,12 @@ from cookiecutter.config import get_user_config
 
 @pytest.fixture
 def replay_dir():
+    """Fixture to return the expected replay directory."""
     return os.path.expanduser('~/.cookiecutter_replay/')
 
 
 def test_get_user_config(mocker, replay_dir):
+    """Test that get_user_config holds the correct replay_dir."""
     mocker.patch('os.path.exists', return_value=False)
     config_dict = get_user_config()
     assert 'replay_dir' in config_dict
@@ -29,11 +31,13 @@ def test_get_user_config(mocker, replay_dir):
 
 @pytest.fixture
 def template_name():
+    """Fixture to return a valid template_name."""
     return 'cookiedozer'
 
 
 @pytest.fixture
 def context():
+    """Fixture to return a valid context as known from a cookiecutter.json."""
     return {
         u'email': u'raphael@hackebrot.de',
         u'full_name': u'Raphael Pierzina',
@@ -43,17 +47,20 @@ def context():
 
 
 def test_dump_value_error_if_no_template_name(context):
+    """Test that replay.dump raises if the tempate_name is not a valid str."""
     with pytest.raises(ValueError):
         replay.dump(None, context)
 
 
 def test_dump_type_error_if_not_dict_context(template_name):
+    """Test that replay.dump raises if the context is not of type dict."""
     with pytest.raises(TypeError):
         replay.dump(template_name, 'not_a_dict')
 
 
 @pytest.fixture
 def cleanup_replay_dir(request, replay_dir):
+    """Fixture to remove the replay_dir that is created by replay.dump."""
     def remove_dir():
         if os.path.isdir(replay_dir):
             utils.rmtree(replay_dir)
@@ -63,6 +70,7 @@ def cleanup_replay_dir(request, replay_dir):
 @pytest.mark.usefixtures('cleanup_replay_dir')
 def test_raise_if_replay_dir_creation_fails(
         mocker, template_name, context, replay_dir):
+    """Test that replay.dump raises when the replay_dir cannot be created."""
     mock_ensure = mocker.patch(
         'cookiecutter.replay.make_sure_path_exists',
         return_value=False
@@ -76,6 +84,9 @@ def test_raise_if_replay_dir_creation_fails(
 @pytest.mark.usefixtures('cleanup_replay_dir')
 def test_run_json_dump(
         mocker, template_name, context, replay_dir):
+    """Test that replay.dump runs json.dump under the hood and that the context
+    is correctly written to the expected file in the replay_dir.
+    """
     spy_ensure = mocker.spy(
         'cookiecutter.replay.make_sure_path_exists',
     )
