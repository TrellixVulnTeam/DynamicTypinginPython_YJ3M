commit e29b24b2786d4c3c686602ab24b6fef738a5397c
Author: Audrey Roy <audreyr@gmail.com>
Date:   Sun Sep 1 20:28:19 2013 +0200

    Hooks dir is now at same level as template and cookiecutter.json, fixing tests.

diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 45c682c..2e6448b 100755
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -149,28 +149,22 @@ def generate_files(template_dir, context=None):
     output_dir = os.path.abspath(output_dir)
     logging.debug("output_dir is {0}".format(output_dir))
 
+    # run pre-gen hook
+    run_hook('pre_gen_project', output_dir)
+
     with work_in(template_dir):
         env = Environment()
         env.loader = FileSystemLoader(".")
 
-        # run pre-gen hook
-        run_hook('pre_gen_project', output_dir)
-
         for root, dirs, files in os.walk("."):
             for d in dirs:
-                if d == 'hooks':
-                    continue
                 unrendered_dir = os.path.join(output_dir, os.path.join(root, d))
                 render_and_create_dir(unrendered_dir, context)
 
             for f in files:
                 infile = os.path.join(root, f)
                 logging.debug("f is {0}".format(f))
-
-                if infile.endswith('hooks%s%s' % (os.path.sep, f)):
-                    logging.debug("skipping: {0}".format(infile))
-                    continue
                 generate_file(output_dir, infile, context, env)
 
-        # run post-gen hook
-        run_hook('post_gen_project', output_dir)
+    # run post-gen hook
+    run_hook('post_gen_project', output_dir)
diff --git a/cookiecutter/hooks.py b/cookiecutter/hooks.py
index f925eb7..e0e2fd7 100755
--- a/cookiecutter/hooks.py
+++ b/cookiecutter/hooks.py
@@ -18,6 +18,8 @@ if PY3:
 else:
     import subprocess32 as subprocess
 
+from .utils import make_sure_path_exists, unicode_open, work_in
+
 _HOOKS = [
     'pre_gen_project',
     'post_gen_project',
@@ -59,8 +61,9 @@ def run_hook(hook_name, output_dir):
     Try and find a script mapped to `hook_name` in `input_dir`,
     and execute it from `output_dir`.
     '''
-    script = find_hooks().get(hook_name)
-    if script is None:
-        logging.debug("No hooks found")
-        return
-    return _run_hook(script, output_dir)
+    with work_in(os.path.dirname(output_dir)):
+        script = find_hooks().get(hook_name)
+        if script is None:
+            logging.debug("No hooks found")
+            return
+        return _run_hook(script, output_dir)
diff --git a/tests/test_hooks.py b/tests/test_hooks.py
index 1eff4ea..e7e210f 100755
--- a/tests/test_hooks.py
+++ b/tests/test_hooks.py
@@ -19,7 +19,7 @@ class TestFindHooks(unittest.TestCase):
 
     def test_find_hooks(self):
         '''Getting the list of all defined hooks'''
-        repo_path = 'tests/test-hooks/input{{hooks}}'
+        repo_path = 'tests/test-hooks/'
         with utils.work_in(repo_path):
             self.assertEqual({
                 'pre_gen_project': os.path.abspath('hooks/pre_gen_project.py'),
@@ -34,7 +34,7 @@ class TestFindHooks(unittest.TestCase):
 
 class TestExternalHooks(unittest.TestCase):
 
-    repo_path  = os.path.abspath('tests/test-hooks/input{{hooks}}')
+    repo_path  = os.path.abspath('tests/test-hooks/')
     hooks_path = os.path.abspath('tests/test-hooks/hooks')
 
     def tearDown(self):
@@ -42,10 +42,12 @@ class TestExternalHooks(unittest.TestCase):
             os.remove('python_pre.txt')
         if os.path.exists('shell_post.txt'):
             os.remove('shell_post.txt')
-        if os.path.exists('tests/test-hooks/python_pre.txt'):
-            os.remove('tests/test-hooks/python_pre.txt')
-        if os.path.exists('tests/test-hooks/shell_post.txt'):
-            os.remove('tests/test-hooks/shell_post.txt')
+        if os.path.exists('tests/shell_post.txt'):
+            os.remove('tests/shell_post.txt')
+        if os.path.exists('tests/test-hooks/input{{hooks}}/python_pre.txt'):
+            os.remove('tests/test-hooks/input{{hooks}}/python_pre.txt')
+        if os.path.exists('tests/test-hooks/input{{hooks}}/shell_post.txt'):
+            os.remove('tests/test-hooks/input{{hooks}}/shell_post.txt')
 
     def test_run_hook(self):
         '''execute a hook script, independently of project generation'''
@@ -61,7 +63,7 @@ class TestExternalHooks(unittest.TestCase):
         
     def test_public_run_hook(self):
         '''Execute hook from specified template in specified output directory'''
-        tests_dir = os.getcwd()
+        tests_dir = os.path.join(self.repo_path, 'input{{hooks}}')
         with utils.work_in(self.repo_path):
             hooks.run_hook('pre_gen_project', tests_dir)
             self.assertTrue(os.path.isfile(os.path.join(tests_dir, 'python_pre.txt')))
