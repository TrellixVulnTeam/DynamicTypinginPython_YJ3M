commit 14eef068885e310ebcdeb7ea3926e123428773c7
Author: Thomas Orozco <thomas@orozco.fr>
Date:   Sun Aug 25 13:39:26 2013 +0200

    Add support for absolute paths
    
    When using a command such as cookiecutter /path/to/template,
    Jinja would raise an error complaining that the template file was not
    found.

diff --git a/cookiecutter/__init__.py b/cookiecutter/__init__.py
index 90abccf..8e23d59 100755
--- a/cookiecutter/__init__.py
+++ b/cookiecutter/__init__.py
@@ -8,4 +8,4 @@ cookiecutter
 Main package for Cookiecutter.
 """
 
-__version__ = '0.6.4'
+__version__ = '0.6.5'
diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 66b9143..4cc1d43 100755
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -18,7 +18,7 @@ from jinja2.environment import Environment
 from binaryornot.check import is_binary
 
 from .exceptions import NonTemplatedInputDirException
-from .utils import make_sure_path_exists, unicode_open
+from .utils import make_sure_path_exists, unicode_open, chdir
 
 
 if sys.version_info[:2] < (2, 7):
@@ -52,7 +52,7 @@ def generate_context(config_file='cookiecutter.json'):
     return context
 
 
-def generate_file(infile, context, env):
+def generate_file(project_dir, infile, context, env):
     """
     1. Render the contents of infile.
     2. Render the filename of infile as the name of outfile.
@@ -61,12 +61,14 @@ def generate_file(infile, context, env):
     """
     logging.debug("Generating file {0}".format(infile))
 
-    # Render the path to the output file (but don't include the filename)
-    outdir_tmpl = Template(os.path.dirname(os.path.abspath(infile)))
+    # Render the intermediary path to the output file (not including the root
+    # project dir nor the filename itself)
+    outdir_tmpl = Template(os.path.dirname(infile))
     outdir = outdir_tmpl.render(**context)
-    fname = os.path.basename(os.path.abspath(infile))  # input/output filename
-    # Write it to the corresponding place in output_dir
-    outfile = os.path.join(outdir, fname)
+
+    # Write the file to the corresponding place
+    fname = os.path.basename(infile)  # input/output filename
+    outfile = os.path.join(project_dir, outdir, fname)
     logging.debug("outfile is {0}".format(outfile))
 
     # Just copy over binary files. Don't render.
@@ -106,30 +108,39 @@ def generate_files(template_dir, context=None):
     logging.debug('Generating project from {0}...'.format(template_dir))
 
     context = context or {}
-    env = Environment()
-    env.loader = FileSystemLoader('.')
 
     # Render dirname before writing
     name_tmpl = Template(template_dir)
-    output_dir = name_tmpl.render(**context)
-    if output_dir == template_dir:
+    project_dir = name_tmpl.render(**context)
+
+    if project_dir == template_dir:
         raise NonTemplatedInputDirException
 
-    logging.debug("output_dir is {0}".format(output_dir))
-    make_sure_path_exists(output_dir)
+    # We want the Jinja path and the OS paths to match. Consequently, we'll:
+    #   + CD to the template folder
+    #   + Set Jinja's path to "."
+    #
+    #  In order to build our files to the correct folder(s), we'll use an
+    # absolute path for the target folder (project)
+
+    project_dir = os.path.abspath(project_dir)
+
+    logging.debug("project_dir is {0}".format(project_dir))
+    make_sure_path_exists(project_dir)
 
-    for root, dirs, files in os.walk(template_dir):
-        for d in dirs:
-            indir = os.path.join(root, d)
-            outdir = indir.replace(template_dir, output_dir, 1)
+    with chdir(template_dir):
+        env = Environment()
+        env.loader = FileSystemLoader(".")
 
-            # Render dirname before writing
-            name_tmpl = Template(outdir)
-            rendered_dirname = name_tmpl.render(**context)
+        for root, dirs, files in os.walk("."):
 
-            make_sure_path_exists(rendered_dirname)
+            for d in dirs:
+                indir = os.path.join(root, d)
+                name_tmpl = Template(indir)
+                rendered_dirname = name_tmpl.render(**context)
+                make_sure_path_exists(os.path.join(project_dir, rendered_dirname))
 
-        for f in files:
-            logging.debug("f is {0}".format(f))
-            infile = os.path.join(root, f)
-            generate_file(infile, context, env)
+            for f in files:
+                infile = os.path.join(root, f)
+                logging.debug("f is {0}".format(f))
+                generate_file(project_dir, infile, context, env)
diff --git a/cookiecutter/utils.py b/cookiecutter/utils.py
index 69a7322..7c00d07 100755
--- a/cookiecutter/utils.py
+++ b/cookiecutter/utils.py
@@ -11,6 +11,8 @@ Helper functions used throughout Cookiecutter.
 import errno
 import os
 import sys
+import contextlib
+
 
 PY3 = sys.version > '3'
 if PY3:
@@ -41,3 +43,14 @@ def unicode_open(filename, *args, **kwargs):
     if PY3:
         return open(filename, *args, **kwargs)
     return codecs.open(filename, *args, **kwargs)
+
+
+@contextlib.contextmanager
+def chdir(dirname=None):
+  curdir = os.getcwd()
+  try:
+    if dirname is not None:
+      os.chdir(dirname)
+    yield
+  finally:
+    os.chdir(curdir)
diff --git a/tests/test_generate.py b/tests/test_generate.py
index a46d6eb..48de5a9 100755
--- a/tests/test_generate.py
+++ b/tests/test_generate.py
@@ -32,6 +32,7 @@ class TestGenerate(unittest.TestCase):
         env.loader = FileSystemLoader('.')
         infile = 'tests/files/{{generate_file}}.txt'
         generate.generate_file(
+            project_dir=".",
             infile=infile,
             context={'generate_file': 'cheese'},
             env=env
