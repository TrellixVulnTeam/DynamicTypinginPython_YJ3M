commit 4541bde1fb13dfa9dd405f13fd5acfd0ced3a061
Author: Andrey Shpak <insspb@users.noreply.github.com>
Date:   Sat Apr 18 19:32:26 2020 +0300

    Tests refactoring: test-generate_context one time use fixtures removed, docstrings added, code reformatting (#1379)

diff --git a/tests/test_generate_context.py b/tests/test_generate_context.py
index 87c23ff..aff4dbc 100644
--- a/tests/test_generate_context.py
+++ b/tests/test_generate_context.py
@@ -1,14 +1,6 @@
 # -*- coding: utf-8 -*-
 
-"""
-test_generate_context.
-
-Tests formerly known from a unittest residing in test_generate.py named
-TestGenerateContext.test_generate_context
-TestGenerateContext.test_generate_context_with_default
-TestGenerateContext.test_generate_context_with_extra
-TestGenerateContext.test_generate_context_with_default_and_extra
-"""
+"""Verify generate context behaviour and context overwrite priorities."""
 
 from __future__ import unicode_literals
 
@@ -23,23 +15,21 @@ from cookiecutter.exceptions import ContextDecodingException
 
 
 def context_data():
+    """Generate pytest parametrization variables for test.
+
+    Return ('input_params, expected_context') tuples.
+    """
     context = (
-        {
-            'context_file': 'tests/test-generate-context/test.json'
-        },
-        {
-            'test': {'1': 2, 'some_key': 'some_val'}
-        }
+        {'context_file': 'tests/test-generate-context/test.json'},
+        {'test': {'1': 2, 'some_key': 'some_val'}},
     )
 
     context_with_default = (
         {
             'context_file': 'tests/test-generate-context/test.json',
-            'default_context': {'1': 3}
+            'default_context': {'1': 3},
         },
-        {
-            'test': {'1': 3, 'some_key': 'some_val'}
-        }
+        {'test': {'1': 3, 'some_key': 'some_val'}},
     )
 
     context_with_extra = (
@@ -47,9 +37,7 @@ def context_data():
             'context_file': 'tests/test-generate-context/test.json',
             'extra_context': {'1': 4},
         },
-        {
-            'test': {'1': 4, 'some_key': 'some_val'}
-        }
+        {'test': {'1': 4, 'some_key': 'some_val'}},
     )
 
     context_with_default_and_extra = (
@@ -58,9 +46,7 @@ def context_data():
             'default_context': {'1': 3},
             'extra_context': {'1': 5},
         },
-        {
-            'test': {'1': 5, 'some_key': 'some_val'}
-        }
+        {'test': {'1': 5, 'some_key': 'some_val'}},
     )
 
     yield context
@@ -72,70 +58,58 @@ def context_data():
 @pytest.mark.usefixtures('clean_system')
 @pytest.mark.parametrize('input_params, expected_context', context_data())
 def test_generate_context(input_params, expected_context):
-    """Test the generated context for several input parameters against the \
-    according expected context."""
+    """Verify input contexts combinations result in expected content on output."""
     assert generate.generate_context(**input_params) == expected_context
 
 
 @pytest.mark.usefixtures('clean_system')
 def test_generate_context_with_json_decoding_error():
+    """Verify malformed JSON file generates expected error output."""
     with pytest.raises(ContextDecodingException) as excinfo:
-        generate.generate_context(
-            'tests/test-generate-context/invalid-syntax.json'
-        )
+        generate.generate_context('tests/test-generate-context/invalid-syntax.json')
     # original message from json module should be included
     pattern = (
-        'Expecting \'{0,1}:\'{0,1} delimiter: '
-        'line 1 column (19|20) \\(char 19\\)'
+        'Expecting \'{0,1}:\'{0,1} delimiter: ' 'line 1 column (19|20) \\(char 19\\)'
     )
     assert re.search(pattern, str(excinfo.value))
     # File name should be included too...for testing purposes, just test the
     # last part of the file. If we wanted to test the absolute path, we'd have
     # to do some additional work in the test which doesn't seem that needed at
     # this point.
-    path = os.path.sep.join(
-        ['tests', 'test-generate-context', 'invalid-syntax.json']
-    )
+    path = os.path.sep.join(['tests', 'test-generate-context', 'invalid-syntax.json'])
     assert path in str(excinfo.value)
 
 
-@pytest.fixture
-def default_context():
-    return {
-        'not_in_template': 'foobar',
-        'project_name': 'Kivy Project',
-        'orientation': 'landscape'
-    }
-
-
-@pytest.fixture
-def extra_context():
-    return {
-        'also_not_in_template': 'foobar2',
-        'github_username': 'hackebrot',
-    }
+def test_default_context_replacement_in_generate_context():
+    """Verify default content settings are correctly replaced by template settings.
 
-
-@pytest.fixture
-def context_file():
-    return 'tests/test-generate-context/choices_template.json'
-
-
-def test_choices(context_file, default_context, extra_context):
-    """Make sure that the default for list variables is based on the user \
-    config and the list as such is not changed to a single value."""
+    Make sure that the default for list variables of `orientation` is based on
+    the user config (`choices_template.json`) and not changed to a single value
+    from `default_context`.
+    """
     expected_context = {
-        'choices_template': OrderedDict([
-            ('full_name', 'Raphael Pierzina'),
-            ('github_username', 'hackebrot'),
-            ('project_name', 'Kivy Project'),
-            ('repo_name', '{{cookiecutter.project_name|lower}}'),
-            ('orientation', ['landscape', 'all', 'portrait']),
-        ])
+        'choices_template': OrderedDict(
+            [
+                ('full_name', 'Raphael Pierzina'),
+                ('github_username', 'hackebrot'),
+                ('project_name', 'Kivy Project'),
+                ('repo_name', '{{cookiecutter.project_name|lower}}'),
+                ('orientation', ['landscape', 'all', 'portrait']),
+            ]
+        )
     }
 
     generated_context = generate.generate_context(
-        context_file, default_context, extra_context
+        context_file='tests/test-generate-context/choices_template.json',
+        default_context={
+            'not_in_template': 'foobar',
+            'project_name': 'Kivy Project',
+            'orientation': 'landscape',
+        },
+        extra_context={
+            'also_not_in_template': 'foobar2',
+            'github_username': 'hackebrot',
+        },
     )
 
     assert generated_context == expected_context
@@ -143,47 +117,51 @@ def test_choices(context_file, default_context, extra_context):
 
 @pytest.fixture
 def template_context():
-    return OrderedDict([
-        ('full_name', 'Raphael Pierzina'),
-        ('github_username', 'hackebrot'),
-        ('project_name', 'Kivy Project'),
-        ('repo_name', '{{cookiecutter.project_name|lower}}'),
-        ('orientation', ['all', 'landscape', 'portrait']),
-    ])
+    """Fixture. Populates template content for future tests."""
+    return OrderedDict(
+        [
+            ('full_name', 'Raphael Pierzina'),
+            ('github_username', 'hackebrot'),
+            ('project_name', 'Kivy Project'),
+            ('repo_name', '{{cookiecutter.project_name|lower}}'),
+            ('orientation', ['all', 'landscape', 'portrait']),
+        ]
+    )
 
 
 def test_apply_overwrites_does_include_unused_variables(template_context):
+    """Verify `apply_overwrites_to_context` skips variables that are not in context."""
     generate.apply_overwrites_to_context(
-        template_context,
-        {'not in template': 'foobar'}
+        context=template_context, overwrite_context={'not in template': 'foobar'}
     )
 
     assert 'not in template' not in template_context
 
 
 def test_apply_overwrites_sets_non_list_value(template_context):
+    """Verify `apply_overwrites_to_context` work with string variables."""
     generate.apply_overwrites_to_context(
-        template_context,
-        {'repo_name': 'foobar'}
+        context=template_context, overwrite_context={'repo_name': 'foobar'}
     )
 
     assert template_context['repo_name'] == 'foobar'
 
 
 def test_apply_overwrites_does_not_modify_choices_for_invalid_overwrite(
-        template_context):
+    template_context,
+):
+    """Verify variables overwrite for list if variable not in list ignored."""
     generate.apply_overwrites_to_context(
-        template_context,
-        {'orientation': 'foobar'}
+        context=template_context, overwrite_context={'orientation': 'foobar'}
     )
 
     assert template_context['orientation'] == ['all', 'landscape', 'portrait']
 
 
 def test_apply_overwrites_sets_default_for_choice_variable(template_context):
+    """Verify overwritten list member became a default value."""
     generate.apply_overwrites_to_context(
-        template_context,
-        {'orientation': 'landscape'}
+        context=template_context, overwrite_context={'orientation': 'landscape'}
     )
 
     assert template_context['orientation'] == ['landscape', 'all', 'portrait']
