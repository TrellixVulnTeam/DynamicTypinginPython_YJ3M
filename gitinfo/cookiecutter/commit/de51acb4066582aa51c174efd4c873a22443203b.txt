commit de51acb4066582aa51c174efd4c873a22443203b
Author: Paul Moore <p.f.moore@gmail.com>
Date:   Fri Aug 8 22:31:54 2014 +0100

    Use a utility function to cleanly read input from the user

diff --git a/cookiecutter/prompt.py b/cookiecutter/prompt.py
index 1e27215..231865e 100755
--- a/cookiecutter/prompt.py
+++ b/cookiecutter/prompt.py
@@ -14,8 +14,26 @@ import sys
 PY3 = sys.version > '3'
 if PY3:
     iteritems = lambda d: iter(d.items())
+    def read_response(prompt=''):
+        return input(prompt)
 else:
-    input = raw_input
+    def read_response(prompt=''):
+        # For Python 2, raw_input takes a byte string argument for the prompt.
+        # This must be encoded using the encoding used by sys.stdout.
+        # The result is a byte string encoding using sys.stdin.encoding.
+        # However, if the program is not being run interactively, sys.stdout
+        # and sys.stdin may not have encoding attributes.
+        # In that case we don't print a prompt (stdin/out isn't interactive,
+        # so prompting is pointless), and we assume the returned data is
+        # encoded using sys.getdefaultencoding(). This may not be right,
+        # but it's likely the best we can do.
+        # Isn't Python 2 encoding support wonderful? :-)
+        if sys.stdout.encoding:
+            prompt = prompt.encode(sys.stdout.encoding)
+        else:
+            prompt = ''
+        enc = sys.stdin.encoding or sys.getdefaultencoding()
+        return raw_input(prompt).decode(enc)
     iteritems = lambda d: d.iteritems()
 
 
@@ -29,12 +47,7 @@ def prompt_for_config(context):
     for key, val in iteritems(context['cookiecutter']):
         prompt = "{0} (default is \"{1}\")? ".format(key, val)
 
-        if PY3:
-            new_val = input(prompt)
-        else:
-            new_val = input(prompt.encode('utf-8')).decode('utf-8')
-
-        new_val = new_val.strip()
+        new_val = read_response(prompt).strip()
 
         if new_val == '':
             new_val = val
@@ -45,7 +58,7 @@ def prompt_for_config(context):
 
 def query_yes_no(question, default="yes"):
     """
-    Ask a yes/no question via `raw_input()` and return their answer.
+    Ask a yes/no question via `read_response()` and return their answer.
 
     :param question: A string that is presented to the user.
     :param default: The presumed answer if the user just hits <Enter>.
@@ -71,7 +84,7 @@ def query_yes_no(question, default="yes"):
 
     while True:
         sys.stdout.write(question + prompt)
-        choice = input().lower()
+        choice = read_response().lower()
 
         if default is not None and choice == '':
             return valid[default]
diff --git a/tests/test_examples.py b/tests/test_examples.py
index 5f5c5c5..185e5ab 100755
--- a/tests/test_examples.py
+++ b/tests/test_examples.py
@@ -16,17 +16,6 @@ import shutil
 import subprocess
 import sys
 
-PY3 = sys.version > '3'
-if PY3:
-    from unittest.mock import patch
-    input_str = 'builtins.input'
-    from io import StringIO
-else:
-    import __builtin__
-    from mock import patch
-    input_str = '__builtin__.raw_input'
-    from cStringIO import StringIO
-
 if sys.version_info[:3] < (2, 7):
     import unittest2 as unittest
 else:
diff --git a/tests/test_main.py b/tests/test_main.py
index daa9bb2..95d1693 100755
--- a/tests/test_main.py
+++ b/tests/test_main.py
@@ -23,12 +23,8 @@ else:
 PY3 = sys.version > '3'
 if PY3:
     from unittest.mock import patch
-    input_str = 'builtins.input'
 else:
-    import __builtin__
     from mock import patch
-    input_str = '__builtin__.raw_input'
-    from cStringIO import StringIO
 
 try:
     no_network = os.environ[u'DISABLE_NETWORK_TESTS']
@@ -76,11 +72,8 @@ class TestCookiecutterLocalNoInput(CookiecutterCleanSystemTestCase):
 
 class TestCookiecutterLocalWithInput(CookiecutterCleanSystemTestCase):
 
-    @patch(input_str, lambda x: '\n')
+    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'\n')
     def test_cookiecutter_local_with_input(self):
-        if not PY3:
-            sys.stdin = StringIO("\n\n\n\n\n\n\n\n\n\n\n\n")
-
         main.cookiecutter('tests/fake-repo-pre/', no_input=False)
         self.assertTrue(os.path.isdir('tests/fake-repo-pre/{{cookiecutter.repo_name}}'))
         self.assertFalse(os.path.isdir('tests/fake-repo-pre/fake-project'))
@@ -135,28 +128,8 @@ class TestCookiecutterRepoArg(CookiecutterCleanSystemTestCase):
             utils.rmtree('module_name')
         super(TestCookiecutterRepoArg, self).tearDown()
 
-    # HACK: The *args is because:
-    # 1. If the lambda has 1 arg named x, I sometimes get this error:
-    #    TypeError: <lambda>() missing 1 required positional argument: 'x'
-    # 2. If lambda has no args, I unpredictably get this error:
-    #    TypeError: <lambda>() takes 0 positional arguments but 1 was given
-    # *args is the best of both worlds.
-    # But I am not sure why I started getting these errors for no reason.
-    # Any help would be appreciated. -- @audreyr
-    @patch(input_str, lambda *args: '')
+    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'')
     def test_cookiecutter_git(self):
-        if not PY3:
-            # Simulate pressing return 10x.
-            # HACK: There are only 9 prompts in cookiecutter-pypackage's
-            # cookiecutter.json (http://git.io/b-1MVA) but 10 \n chars here.
-            # There was an "EOFError: EOF when reading a line" test fail here
-            # out of the blue, which an extra \n fixed. 
-            # Not sure why. There shouldn't be an extra prompt to delete 
-            # the repo, since CookiecutterCleanSystemTestCase ensured that it
-            # wasn't present.
-            # It's possibly an edge case in CookiecutterCleanSystemTestCase.
-            # Improvements to this would be appreciated. -- @audreyr
-            sys.stdin = StringIO('\n\n\n\n\n\n\n\n\n\n')
         main.cookiecutter('https://github.com/audreyr/cookiecutter-pypackage.git')
         logging.debug('Current dir is {0}'.format(os.getcwd()))
         clone_dir = os.path.join(os.path.expanduser('~/.cookiecutters'), 'cookiecutter-pypackage')
@@ -165,10 +138,8 @@ class TestCookiecutterRepoArg(CookiecutterCleanSystemTestCase):
         self.assertTrue(os.path.isfile('boilerplate/README.rst'))
         self.assertTrue(os.path.exists('boilerplate/setup.py'))
 
-    @patch(input_str, lambda x: '')
+    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'')
     def test_cookiecutter_mercurial(self):
-        if not PY3:
-            sys.stdin = StringIO('\n\n\n\n\n\n\n\n\n')
         main.cookiecutter('https://bitbucket.org/pokoli/cookiecutter-trytonmodule')
         logging.debug('Current dir is {0}'.format(os.getcwd()))
         clone_dir = os.path.join(os.path.expanduser('~/.cookiecutters'), 'cookiecutter-trytonmodule')
diff --git a/tests/test_prompt.py b/tests/test_prompt.py
index 57f509e..082c2b2 100755
--- a/tests/test_prompt.py
+++ b/tests/test_prompt.py
@@ -17,146 +17,91 @@ from cookiecutter import prompt
 PY3 = sys.version > '3'
 if PY3:
     from unittest.mock import patch
-    input_str = 'builtins.input'
 else:
-    import __builtin__
     from mock import patch
-    input_str = '__builtin__.raw_input'
-    from cStringIO import StringIO
 
 if sys.version_info[:2] < (2, 7):
     import unittest2 as unittest
 else:
     import unittest
 
-if 'windows' in platform.platform().lower():
-
-    old_stdin = sys.stdin
-
-    class X(object):
-        def readline(self):
-            return '\n'
-    sys.stdin = X()
-
 
 class TestPrompt(unittest.TestCase):
 
-    @patch(input_str, lambda x: 'Audrey Roy')
+    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'Audrey Roy')
     def test_prompt_for_config_simple(self):
         context = {"cookiecutter": {"full_name": "Your Name"}}
 
-        if not PY3:
-            sys.stdin = StringIO("Audrey Roy")
-
         cookiecutter_dict = prompt.prompt_for_config(context)
-        self.assertEqual(cookiecutter_dict, {"full_name": "Audrey Roy"})
+        self.assertEqual(cookiecutter_dict, {"full_name": u"Audrey Roy"})
 
-    @patch(input_str, lambda x: 'Pizzä ïs Gööd')
+    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'Pizzä ïs Gööd')
     def test_prompt_for_config_unicode(self):
         context = {"cookiecutter": {"full_name": "Your Name"}}
 
-        if not PY3:
-            sys.stdin = StringIO("Pizzä ïs Gööd")
-
         cookiecutter_dict = prompt.prompt_for_config(context)
+        self.assertEqual(cookiecutter_dict, {"full_name": u"Pizzä ïs Gööd"})
 
-        if PY3:
-            self.assertEqual(cookiecutter_dict, {"full_name": "Pizzä ïs Gööd"})
-        else:
-            self.assertEqual(cookiecutter_dict, {"full_name": u"Pizzä ïs Gööd"})
-
-    @patch(input_str, lambda x: 'Pizzä ïs Gööd')
+    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'Pizzä ïs Gööd')
     def test_unicode_prompt_for_config_unicode(self):
         context = {"cookiecutter": {"full_name": u"Řekni či napiš své jméno"}}
 
-        if not PY3:
-            sys.stdin = StringIO("Pizzä ïs Gööd")
-
         cookiecutter_dict = prompt.prompt_for_config(context)
+        self.assertEqual(cookiecutter_dict, {"full_name": u"Pizzä ïs Gööd"})
 
-        if PY3:
-            self.assertEqual(cookiecutter_dict, {"full_name": "Pizzä ïs Gööd"})
-        else:
-            self.assertEqual(cookiecutter_dict, {"full_name": u"Pizzä ïs Gööd"})
-
-    @patch(input_str, lambda x: '\n')
+    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'\n')
     def test_unicode_prompt_for_default_config_unicode(self):
         context = {"cookiecutter": {"full_name": u"Řekni či napiš své jméno"}}
 
-        if not PY3:
-            sys.stdin = StringIO("\n")
-
         cookiecutter_dict = prompt.prompt_for_config(context)
-
-        if PY3:
-            self.assertEqual(cookiecutter_dict, {"full_name": "Řekni či napiš své jméno"})
-        else:
-            self.assertEqual(cookiecutter_dict, {"full_name": u"Řekni či napiš své jméno"})
+        self.assertEqual(cookiecutter_dict, {"full_name": u"Řekni či napiš své jméno"})
 
 
 class TestQueryAnswers(unittest.TestCase):
 
-    @patch(input_str, lambda: 'y')
+    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'y')
     def test_query_y(self):
-        if not PY3:
-            sys.stdin = StringIO('y')
         answer = prompt.query_yes_no("Blah?")
         self.assertTrue(answer)
 
-    @patch(input_str, lambda: 'ye')
+    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'ye')
     def test_query_ye(self):
-        if not PY3:
-            sys.stdin = StringIO('ye')
         answer = prompt.query_yes_no("Blah?")
         self.assertTrue(answer)
 
-    @patch(input_str, lambda: 'yes')
+    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'yes')
     def test_query_yes(self):
-        if not PY3:
-            sys.stdin = StringIO('yes')
         answer = prompt.query_yes_no("Blah?")
         self.assertTrue(answer)
 
-    @patch(input_str, lambda: 'n')
+    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'n')
     def test_query_n(self):
-        if not PY3:
-            sys.stdin = StringIO('n')
         answer = prompt.query_yes_no("Blah?")
         self.assertFalse(answer)
 
-    @patch(input_str, lambda: 'no')
+    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'no')
     def test_query_n(self):
-        if not PY3:
-            sys.stdin = StringIO('no')
         answer = prompt.query_yes_no("Blah?")
         self.assertFalse(answer)
 
 
 class TestQueryDefaults(unittest.TestCase):
 
-    @patch(input_str, lambda: 'y')
+    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'y')
     def test_query_y_none_default(self):
-        if not PY3:
-            sys.stdin = StringIO('y')
         answer = prompt.query_yes_no("Blah?", default=None)
         self.assertTrue(answer)
 
-    @patch(input_str, lambda: 'n')
+    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'n')
     def test_query_n_none_default(self):
-        if not PY3:
-            sys.stdin = StringIO('n')
         answer = prompt.query_yes_no("Blah?", default=None)
         self.assertFalse(answer)
 
-    @patch(input_str, lambda: '')
+    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'')
     def test_query_no_default(self):
-        if not PY3:
-            sys.stdin = StringIO('\n')
         answer = prompt.query_yes_no("Blah?", default='no')
         self.assertFalse(answer)
 
-    @patch(input_str, lambda: 'junk')
+    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'junk')
     def test_query_bad_default(self):
-        if not PY3:
-            sys.stdin = StringIO('junk')
         self.assertRaises(ValueError, prompt.query_yes_no, "Blah?", default='yn')
diff --git a/tests/test_vcs.py b/tests/test_vcs.py
index 780905e..fcca3e0 100755
--- a/tests/test_vcs.py
+++ b/tests/test_vcs.py
@@ -18,12 +18,8 @@ import unittest
 PY3 = sys.version > '3'
 if PY3:
     from unittest.mock import patch
-    input_str = 'builtins.input'
 else:
-    import __builtin__
     from mock import patch
-    input_str = '__builtin__.raw_input'
-    from cStringIO import StringIO
 
 if sys.version_info[:3] < (2, 7):
     import unittest2 as unittest
@@ -132,40 +128,32 @@ class TestVCSPrompt(unittest.TestCase):
             utils.rmtree('cookiecutter-trytonmodule')
         os.mkdir('cookiecutter-trytonmodule/')
 
-    @patch(input_str, lambda: 'y')
+    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'y')
     def test_git_clone_overwrite(self):
-        if not PY3:
-            sys.stdin = StringIO('y\n\n')
         repo_dir = vcs.clone(
             'https://github.com/audreyr/cookiecutter-pypackage.git'
         )
         self.assertEqual(repo_dir, 'cookiecutter-pypackage')
         self.assertTrue(os.path.isfile('cookiecutter-pypackage/README.rst'))
 
-    @patch(input_str, lambda: 'n')
+    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'n')
     def test_git_clone_cancel(self):
-        if not PY3:
-            sys.stdin = StringIO('n\n\n')
         self.assertRaises(
             SystemExit,
             vcs.clone,
             'https://github.com/audreyr/cookiecutter-pypackage.git'
         )
 
-    @patch(input_str, lambda: 'y')
+    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'y')
     def test_hg_clone_overwrite(self):
-        if not PY3:
-            sys.stdin = StringIO('y\n\n')
         repo_dir = vcs.clone(
             'https://bitbucket.org/pokoli/cookiecutter-trytonmodule'
         )
         self.assertEqual(repo_dir, 'cookiecutter-trytonmodule')
         self.assertTrue(os.path.isfile('cookiecutter-trytonmodule/README.rst'))
 
-    @patch(input_str, lambda: 'n')
+    @patch('cookiecutter.prompt.read_response', lambda x=u'': u'n')
     def test_hg_clone_cancel(self):
-        if not PY3:
-            sys.stdin = StringIO('n\n\n')
         self.assertRaises(
             SystemExit,
             vcs.clone,
