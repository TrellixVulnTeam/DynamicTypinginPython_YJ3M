commit ed1f47b6c4b7e35069bc66bfe30c9e6b28cd2464
Author: Audrey Roy <audreyr@gmail.com>
Date:   Wed Aug 7 17:32:44 2013 +0200

    Generate context from cookiecutter.json instead of json/

diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 70d347f..72cc678 100755
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -19,42 +19,24 @@ from .exceptions import NonTemplatedInputDirException
 from .utils import make_sure_path_exists, unicode_open
 
 
-def generate_context(json_dir='json/'):
+def generate_context(config_file='cookiecutter.json'):
     """
     Generates the context for a Cookiecutter project template.
-    :param json_dir: Directory containing .json file(s).
-    :paramtype json_dir: directory
+    Loads the JSON file as a Python object, with key being the JSON filename.
 
-    Description:
-
-        Iterates through the contents of json_dir and finds all JSON
-        files. Loads the JSON file as a Python object with the key being the
-        JSON file name..
-
-    Example:
-
-        Assume the following files exist:
-
-            json/names.json
-            json/numbers.json
-
-        Depending on their content, might generate a context as follows:
-
-        contexts = {"names":
-                        ['Audrey', 'Danny']
-                    "numbers":
-                        [1, 2, 3, 4]
-                    }
+    :param config_file: JSON file containing project config values.
+    :paramtype config_file: filename
     """
+
     context = {}
 
-    for file_name in os.listdir(json_dir):
-        file_to_open = "{0}/{1}".format(json_dir, file_name)
-        file_handle = open(file_to_open)
-        obj = json.load(file_handle)
+    file_handle = open(config_file)
+    obj = json.load(file_handle)
 
-        # Add the Python object to the context dictionary
-        context[file_name[:-5]] = obj
+    # Add the Python object to the context dictionary
+    file_name = os.path.split(config_file)[1]
+    file_stem = file_name.split('.')[0]
+    context[file_stem] = obj
 
     logging.info('Context generated is {0}'.format(context))
     return context
diff --git a/tests/fake-repo-pre/json/project.json b/tests/fake-repo-pre/cookiecutter.json
similarity index 100%
rename from tests/fake-repo-pre/json/project.json
rename to tests/fake-repo-pre/cookiecutter.json
diff --git a/tests/test_generate.py b/tests/test_generate.py
index 1e4b5a6..7b99c93 100755
--- a/tests/test_generate.py
+++ b/tests/test_generate.py
@@ -8,6 +8,7 @@ test_generate
 Tests for `cookiecutter.generate` module.
 """
 
+import logging
 import os
 import shutil
 import unittest
@@ -18,6 +19,8 @@ from jinja2.environment import Environment
 from cookiecutter import generate
 from cookiecutter import exceptions
 
+logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.DEBUG)
+
 class TestGenerate(unittest.TestCase):
 
     def test_generate_files_bad(self):
@@ -38,11 +41,12 @@ class TestGenerate(unittest.TestCase):
         self.assertEqual(simple_text, 'I eat pizza')
 
     def test_generate_context(self):
-        context = generate.generate_context(json_dir='tests/json')
+        context = generate.generate_context(config_file='tests/json/test.json')
         self.assertEqual(context, {"test": {"1": 2}})
 
     def test_output_folder(self):
-        context = generate.generate_context(json_dir='tests/json2')
+        context = generate.generate_context(config_file='tests/json2/stuff.json')
+        logging.debug('Context is {0}'.format(context))
         generate.generate_files(
             context=context,
             template_dir='tests/input{{stuff.color}}'
