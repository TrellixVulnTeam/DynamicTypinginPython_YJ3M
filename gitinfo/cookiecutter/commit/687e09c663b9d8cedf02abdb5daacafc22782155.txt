commit 687e09c663b9d8cedf02abdb5daacafc22782155
Author: Mark Jones <mjones@imagehawk.com>
Date:   Sat Feb 7 09:53:03 2015 -0600

    Fixed PR358

diff --git a/cookiecutter/exceptions.py b/cookiecutter/exceptions.py
index 2100e74..fe7cf59 100755
--- a/cookiecutter/exceptions.py
+++ b/cookiecutter/exceptions.py
@@ -62,3 +62,9 @@ class VCSNotInstalled(CookiecutterException):
     """
     Raised if the version control system (git or hg) is not installed.
     """
+
+
+class ContextDecodingException(CookiecutterException):
+    """
+    Raised when a project's JSON context file can not be decoded.
+    """
diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 115f64e..6d91c18 100755
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -20,7 +20,8 @@ from jinja2.environment import Environment
 from jinja2.exceptions import TemplateSyntaxError
 from binaryornot.check import is_binary
 
-from .exceptions import NonTemplatedInputDirException
+from .exceptions import NonTemplatedInputDirException, ContextDecodingException
+from collections import OrderedDict
 from .find import find_template
 from .utils import make_sure_path_exists, work_in
 from .hooks import run_hook
@@ -41,7 +42,16 @@ def generate_context(context_file='cookiecutter.json', default_context=None,
     context = {}
 
     file_handle = open(context_file)
-    obj = json.load(file_handle, object_pairs_hook=OrderedDict)
+    try:
+        obj = json.load(file_handle, object_pairs_hook=OrderedDict)
+    except ValueError as e:
+        # JSON decoding error.  Let's throw a new exception that is more friendly for the developer
+        # or user.
+        full_fpath = os.path.abspath(context_file)
+        json_exc_message = str(e)
+        our_exc_message = 'JSON decoding error while loading "{0}".  Decoding error details: "{1}"'\
+                          .format(full_fpath, json_exc_message)
+        raise ContextDecodingException(our_exc_message)
 
     # Add the Python object to the context dictionary
     file_name = os.path.split(context_file)[1]
diff --git a/tests/test-generate-context/invalid-syntax.json b/tests/test-generate-context/invalid-syntax.json
new file mode 100644
index 0000000..d70a145
--- /dev/null
+++ b/tests/test-generate-context/invalid-syntax.json
@@ -0,0 +1 @@
+{"1": 2, "some_key"- "some_val"}
diff --git a/tests/test_generate_context.py b/tests/test_generate_context.py
index f81b886..381ae5a 100644
--- a/tests/test_generate_context.py
+++ b/tests/test_generate_context.py
@@ -14,8 +14,9 @@ TestGenerateContext.test_generate_context_with_default_and_extra
 
 from __future__ import unicode_literals
 import pytest
-
+import re
 from cookiecutter import generate
+from cookiecutter.exceptions import ContextDecodingException
 
 
 def context_data():
@@ -73,3 +74,17 @@ def test_generate_context(input_params, expected_context):
     according expected context.
     """
     assert generate.generate_context(**input_params) == expected_context
+
+
+@pytest.mark.usefixtures('clean_system')
+def test_generate_context_with_json_decoding_error():
+    with pytest.raises(ContextDecodingException) as excinfo:
+        generate.generate_context('tests/test-generate-context/invalid-syntax.json')
+    # original message from json module should be included
+    print 'XXX%sXXX' % excinfo.value
+    assert re.search('Expecting : delimiter: line 1 column (19|20) \(char 19\)',
+                     str(excinfo.value))
+    # File name should be included too...for testing purposes, just test the last part of the file.
+    # If we wanted to test the absolute path, we'd have to do some additional work in the test which
+    # doesn't seem that needed at this point.
+    assert 'tests/test-generate-context/invalid-syntax.json' in str(excinfo.value)
