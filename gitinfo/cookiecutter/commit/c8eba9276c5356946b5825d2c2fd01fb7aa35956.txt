commit c8eba9276c5356946b5825d2c2fd01fb7aa35956
Author: Daniel Roy Greenfeld <danny@eventbrite.com>
Date:   Thu Sep 10 09:39:12 2015 -0700

    fixed #511, added whichcraft and removed compat.which

diff --git a/HISTORY.rst b/HISTORY.rst
index 710ede3..a30bb51 100644
--- a/HISTORY.rst
+++ b/HISTORY.rst
@@ -19,6 +19,7 @@ Features:
 
 Other Changes:
 
+* Added whichcraft and removed ``compat.which()``, thanks to `@pydanny`_ (#511).
 * Updated click requirement to 4.0, thanks to `@pydanny`_ (#473).
 * Added landscape.io flair, thanks to `@michaeljoseph`_ (#439).
 * Descriptions of PEP8 specifications and milestone management, thanks to `@michaeljoseph`_ (#440).
diff --git a/cookiecutter/compat.py b/cookiecutter/compat.py
index 68c9473..2665dae 100644
--- a/cookiecutter/compat.py
+++ b/cookiecutter/compat.py
@@ -1,4 +1,3 @@
-import os
 import sys
 
 PY3 = sys.version_info[0] == 3
@@ -19,78 +18,9 @@ else:  # pragma: no cover
     from cStringIO import StringIO
 
 
-if PY3:  # Forced testing
-
-    from shutil import which
-
-else:  # Forced testing
-
-    def which(cmd, mode=os.F_OK | os.X_OK, path=None):
-        """Given a command, mode, and a PATH string, return the path which
-        conforms to the given mode on the PATH, or None if there is no such
-        file.
-        `mode` defaults to os.F_OK | os.X_OK. `path` defaults to the result
-        of os.environ.get("PATH"), or can be overridden with a custom search
-        path.
-
-        Note: This function was backported from the Python 3 source code.
-        """
-        # Check that a given file can be accessed with the correct mode.
-        # Additionally check that `file` is not a directory, as on Windows
-        # directories pass the os.access check.
-        def _access_check(fn, mode):
-            return (os.path.exists(fn) and os.access(fn, mode) and
-                    not os.path.isdir(fn))
-
-        # If we're given a path with a directory part, look it up directly
-        # rather than referring to PATH directories. This includes checking
-        # relative to the current directory, e.g. ./script
-        if os.path.dirname(cmd):
-            if _access_check(cmd, mode):
-                return cmd
-            return None
-
-        if path is None:
-            path = os.environ.get("PATH", os.defpath)
-        if not path:
-            return None
-        path = path.split(os.pathsep)
-
-        if sys.platform == "win32":
-            # The current directory takes precedence on Windows.
-            if os.curdir not in path:
-                path.insert(0, os.curdir)
-
-            # PATHEXT is necessary to check on Windows.
-            pathext = os.environ.get("PATHEXT", "").split(os.pathsep)
-            # See if the given file matches any of the expected path
-            # extensions. This will allow us to short circuit when given
-            # "python.exe". If it does match, only test that one, otherwise we
-            # have to try others.
-            if any(cmd.lower().endswith(ext.lower()) for ext in pathext):
-                files = [cmd]
-            else:
-                files = [cmd + ext for ext in pathext]
-        else:
-            # On other platforms you don't have things like PATHEXT to tell you
-            # what file suffixes are executable, so just pass on cmd as-is.
-            files = [cmd]
-
-        seen = set()
-        for dir in path:
-            normdir = os.path.normcase(dir)
-            if normdir not in seen:
-                seen.add(normdir)
-                for thefile in files:
-                    name = os.path.join(dir, thefile)
-                    if _access_check(name, mode):
-                        return name
-        return None
-
-
 def is_string(obj):
     """Determine if an object is a string."""
     return isinstance(obj, str if PY3 else basestring)
 
 
-_hush_pyflakes = (StringIO, which)
+_hush_pyflakes = (StringIO)
diff --git a/cookiecutter/vcs.py b/cookiecutter/vcs.py
index f97461c..269fee3 100755
--- a/cookiecutter/vcs.py
+++ b/cookiecutter/vcs.py
@@ -14,7 +14,8 @@ import os
 import subprocess
 import sys
 
-from .compat import which
+from whichcraft import which
+
 from .exceptions import UnknownRepoType, VCSNotInstalled
 from .prompt import read_user_yes_no
 from .utils import make_sure_path_exists, rmtree
diff --git a/setup.py b/setup.py
index b6b7fd5..5e5a5de 100755
--- a/setup.py
+++ b/setup.py
@@ -30,7 +30,8 @@ requirements = [
     'binaryornot>=0.2.0',
     'jinja2>=2.7',
     'PyYAML>=3.10',
-    'click<5.0'
+    'click<5.0',
+    'whichcraft>=0.1.1'
 ]
 
 long_description = readme + '\n\n' + history
diff --git a/tests/test_compat.py b/tests/test_compat.py
deleted file mode 100644
index 4655f71..0000000
--- a/tests/test_compat.py
+++ /dev/null
@@ -1,25 +0,0 @@
-#!/usr/bin/env python
-# -*- coding: utf-8 -*-
-
-"""
-test_compat
-------------
-
-Tests for `cookiecutter.compat` module.
-"""
-
-import os
-
-from cookiecutter.compat import which
-
-
-def test_existing_command():
-    cmd = which('date')
-    assert cmd
-    assert os.path.exists(cmd)
-    assert os.access(cmd, os.F_OK | os.X_OK)
-    assert not os.path.isdir(cmd)
-
-
-def test_non_existing_command():
-    assert which('stringthatisntashellcommand') is None
