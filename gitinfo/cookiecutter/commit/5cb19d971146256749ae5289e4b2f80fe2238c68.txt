commit 5cb19d971146256749ae5289e4b2f80fe2238c68
Author: Paul Moore <p.f.moore@gmail.com>
Date:   Wed Jul 23 15:32:19 2014 +0100

    Replace unicode_open with direct use of io.open

diff --git a/cookiecutter/config.py b/cookiecutter/config.py
index c9c17a8..4233613 100755
--- a/cookiecutter/config.py
+++ b/cookiecutter/config.py
@@ -11,11 +11,11 @@ Global configuration handling
 from __future__ import unicode_literals
 import copy
 import os
+import io
 
 import yaml
 
 from .exceptions import ConfigDoesNotExistException
-from .utils import unicode_open
 from .exceptions import InvalidConfiguration
 
 
@@ -34,7 +34,7 @@ def get_config(config_path):
         raise ConfigDoesNotExistException
 
     print("config_path is {0}".format(config_path))
-    with unicode_open(config_path) as file_handle:
+    with io.open(config_path, encoding="utf-8") as file_handle:
         try:
             yaml_dict = yaml.safe_load(file_handle)
         except yaml.scanner.ScannerError:
diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 9edf87c..89bb4d7 100755
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -10,6 +10,7 @@ Functions for generating a project from a project template.
 from __future__ import unicode_literals
 import logging
 import os
+import io
 import shutil
 import sys
 
@@ -20,7 +21,7 @@ from binaryornot.check import is_binary
 
 from .exceptions import NonTemplatedInputDirException
 from .find import find_template
-from .utils import make_sure_path_exists, unicode_open, work_in
+from .utils import make_sure_path_exists, work_in
 from .hooks import run_hook
 
 
@@ -113,7 +114,7 @@ def generate_file(project_dir, infile, context, env):
 
         logging.debug("Writing {0}".format(outfile))
 
-        with unicode_open(outfile, 'w') as fh:
+        with io.open(outfile, 'w', encoding="utf-8") as fh:
             fh.write(rendered_file)
 
     # Apply file permissions to output file
diff --git a/cookiecutter/hooks.py b/cookiecutter/hooks.py
index e9ab074..1119562 100755
--- a/cookiecutter/hooks.py
+++ b/cookiecutter/hooks.py
@@ -13,7 +13,7 @@ import os
 import subprocess
 import sys
 
-from .utils import make_sure_path_exists, unicode_open, work_in
+from .utils import make_sure_path_exists, work_in
 
 _HOOKS = [
     'pre_gen_project',
diff --git a/cookiecutter/utils.py b/cookiecutter/utils.py
index a1a4ff8..df75922 100755
--- a/cookiecutter/utils.py
+++ b/cookiecutter/utils.py
@@ -18,13 +18,6 @@ import shutil
 import contextlib
 
 
-PY3 = sys.version > '3'
-if PY3:
-    pass
-else:
-    import codecs
-
-
 def force_delete(func, path, exc_info):
     """
     Error handler for `shutil.rmtree()` equivalent to `rm -rf`
@@ -62,18 +55,6 @@ def make_sure_path_exists(path):
     return True
 
 
-def unicode_open(filename, *args, **kwargs):
-    """
-    Opens a file as usual on Python 3, and with UTF-8 encoding on Python 2.
-
-    :param filename: Name of file to open.
-    """
-    kwargs['encoding'] = "utf-8"
-    if PY3:
-        return open(filename, *args, **kwargs)
-    return codecs.open(filename, *args, **kwargs)
-
-
 @contextlib.contextmanager
 def work_in(dirname=None):
     """
diff --git a/tests/test_utils.py b/tests/test_utils.py
index 0057637..aa68705 100755
--- a/tests/test_utils.py
+++ b/tests/test_utils.py
@@ -9,6 +9,7 @@ Tests for `cookiecutter.utils` module.
 """
 
 import os
+import io
 import sys
 import stat
 import unittest
@@ -45,16 +46,14 @@ class TestUtils(unittest.TestCase):
         utils.rmtree('tests/trailingslash/')
 
     def test_unicode_open(self):
-        """ Test unicode_open(filename, *args, **kwargs). """
+        """ Test that io.open(filename, mode, encoding='utf-8') works as we expect. """
 
         unicode_text = u"""Polish: Ą Ł Ż
 Chinese: 倀 倁 倂 倃 倄 倅 倆 倇 倈
 Musical Notes: ♬ ♫ ♯"""
 
-        with utils.unicode_open('tests/files/unicode.txt') as f:
+        with io.open('tests/files/unicode.txt', encoding='utf-8') as f:
             opened_text = f.read()
-            if sys.platform.startswith('win'):
-                unicode_text = os.linesep.join([s for s in unicode_text.splitlines() if not s.isspace()])
             self.assertEqual(unicode_text, opened_text)
 
     def test_workin(self):
