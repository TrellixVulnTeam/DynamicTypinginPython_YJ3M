commit 3a0f171814e01f3ec17beee5a45a2adac5836b42
Author: Raphael Pierzina <raphael@hackebrot.de>
Date:   Fri Nov 13 23:36:00 2015 +0100

    Change replay.dump and replay.load to require replay_dir. Update callers

diff --git a/cookiecutter/main.py b/cookiecutter/main.py
index e6d858f..93b3c29 100755
--- a/cookiecutter/main.py
+++ b/cookiecutter/main.py
@@ -115,7 +115,7 @@ def cookiecutter(
     template_name = os.path.basename(template)
 
     if replay:
-        context = load(template_name)
+        context = load(config_dict['replay_dir'], template_name)
     else:
         context_file = os.path.join(repo_dir, 'cookiecutter.json')
         logging.debug('context_file is {0}'.format(context_file))
@@ -130,7 +130,7 @@ def cookiecutter(
         # except when 'no-input' flag is set
         context['cookiecutter'] = prompt_for_config(context, no_input)
 
-        dump(template_name, context)
+        dump(config_dict['replay_dir'], template_name, context)
 
     # Create project from local context and project template.
     return generate_files(
diff --git a/cookiecutter/replay.py b/cookiecutter/replay.py
index 627170d..bee7ec3 100644
--- a/cookiecutter/replay.py
+++ b/cookiecutter/replay.py
@@ -11,7 +11,6 @@ import json
 import os
 from past.builtins import basestring
 
-from .config import get_user_config
 from .utils import make_sure_path_exists
 
 
@@ -20,7 +19,10 @@ def get_file_name(replay_dir, template_name):
     return os.path.join(replay_dir, file_name)
 
 
-def dump(template_name, context):
+def dump(replay_dir, template_name, context):
+    if not make_sure_path_exists(replay_dir):
+        raise IOError('Unable to create replay dir at {}'.format(replay_dir))
+
     if not isinstance(template_name, basestring):
         raise TypeError('Template name is required to be of type str')
 
@@ -30,22 +32,16 @@ def dump(template_name, context):
     if 'cookiecutter' not in context:
         raise ValueError('Context is required to contain a cookiecutter key')
 
-    replay_dir = get_user_config()['replay_dir']
-
-    if not make_sure_path_exists(replay_dir):
-        raise IOError('Unable to create replay dir at {}'.format(replay_dir))
-
     replay_file = get_file_name(replay_dir, template_name)
 
     with open(replay_file, 'w') as outfile:
         json.dump(context, outfile)
 
 
-def load(template_name):
+def load(replay_dir, template_name):
     if not isinstance(template_name, basestring):
         raise TypeError('Template name is required to be of type str')
 
-    replay_dir = get_user_config()['replay_dir']
     replay_file = get_file_name(replay_dir, template_name)
 
     with open(replay_file, 'r') as infile:
