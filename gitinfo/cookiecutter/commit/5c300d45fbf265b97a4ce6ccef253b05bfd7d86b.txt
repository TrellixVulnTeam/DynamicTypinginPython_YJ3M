commit 5c300d45fbf265b97a4ce6ccef253b05bfd7d86b
Author: Nathan Cheung <ncheung@ciena.com>
Date:   Mon Dec 5 23:28:12 2016 +0000

    instantiate StrictEnvironment instead of passing env

diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index ea670c7..4d2f1eb 100644
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -220,18 +220,17 @@ def ensure_dir_is_templated(dirname):
         raise NonTemplatedInputDirException
 
 
-def _run_hook_from_repo_dir(repo_dir, hook_name, project_dir, context, env):
+def _run_hook_from_repo_dir(repo_dir, hook_name, project_dir, context):
     """Run hook from repo directory, clean project directory if hook fails.
 
     :param repo_dir: Project template input directory.
     :param hook_name: The hook to execute.
     :param project_dir: The directory to execute the script from.
     :param context: Cookiecutter project context.
-    :param env: Jinja2 template execution environment.
     """
     with work_in(repo_dir):
         try:
-            run_hook(hook_name, project_dir, context, env)
+            run_hook(hook_name, project_dir, context)
         except FailedHookException:
             rmtree(project_dir)
             logger.error(
@@ -283,13 +282,7 @@ def generate_files(repo_dir, context=None, output_dir='.',
     project_dir = os.path.abspath(project_dir)
     logger.debug('Project directory is {}'.format(project_dir))
 
-    _run_hook_from_repo_dir(
-        repo_dir,
-        'pre_gen_project',
-        project_dir,
-        context,
-        env
-    )
+    _run_hook_from_repo_dir(repo_dir, 'pre_gen_project', project_dir, context)
 
     with work_in(template_dir):
         env.loader = FileSystemLoader('.')
@@ -359,12 +352,6 @@ def generate_files(repo_dir, context=None, output_dir='.',
                     msg = "Unable to create file '{}'".format(infile)
                     raise UndefinedVariableInTemplate(msg, err, context)
 
-    _run_hook_from_repo_dir(
-        repo_dir,
-        'post_gen_project',
-        project_dir,
-        context,
-        env
-    )
+    _run_hook_from_repo_dir(repo_dir, 'post_gen_project', project_dir, context)
 
     return project_dir
diff --git a/cookiecutter/hooks.py b/cookiecutter/hooks.py
index fbc8234..413ac8c 100644
--- a/cookiecutter/hooks.py
+++ b/cookiecutter/hooks.py
@@ -10,6 +10,7 @@ import sys
 import tempfile
 
 from cookiecutter import utils
+from cookiecutter.environment import StrictEnvironment
 from .exceptions import FailedHookException
 
 logger = logging.getLogger(__name__)
@@ -88,13 +89,12 @@ def run_script(script_path, cwd='.'):
             "Hook script failed (exit status: %d)" % exit_status)
 
 
-def run_script_with_context(script_path, cwd, context, env):
+def run_script_with_context(script_path, cwd, context):
     """Execute a script after rendering it with Jinja.
 
     :param script_path: Absolute path to the script to run.
     :param cwd: The directory to run the script from.
     :param context: Cookiecutter project template context.
-    :param env: Jinja2 template execution environment.
     """
     _, extension = os.path.splitext(script_path)
 
@@ -105,6 +105,10 @@ def run_script_with_context(script_path, cwd, context, env):
         mode='wb',
         suffix=extension
     ) as temp:
+        env = StrictEnvironment(
+            context=context,
+            keep_trailing_newline=True,
+        )
         template = env.from_string(contents)
         output = template.render(**context)
         temp.write(output.encode('utf-8'))
@@ -112,18 +116,17 @@ def run_script_with_context(script_path, cwd, context, env):
     run_script(temp.name, cwd)
 
 
-def run_hook(hook_name, project_dir, context, env):
+def run_hook(hook_name, project_dir, context):
     """
     Try to find and execute a hook from the specified project directory.
 
     :param hook_name: The hook to execute.
     :param project_dir: The directory to execute the script from.
     :param context: Cookiecutter project context.
-    :param env: Jinja2 template execution environment.
     """
     script = find_hook(hook_name)
     if script is None:
         logger.debug('No hooks found')
         return
     logger.debug('Running hook {}'.format(hook_name))
-    run_script_with_context(script, project_dir, context, env)
+    run_script_with_context(script, project_dir, context)
diff --git a/tests/test_hooks.py b/tests/test_hooks.py
index 15c2b9e..4402599 100644
--- a/tests/test_hooks.py
+++ b/tests/test_hooks.py
@@ -14,7 +14,6 @@ import sys
 import textwrap
 
 from cookiecutter import hooks, utils, exceptions
-from cookiecutter.environment import StrictEnvironment
 
 
 def make_test_repo(name):
@@ -102,7 +101,6 @@ class TestExternalHooks(object):
 
     repo_path = os.path.abspath('tests/test-hooks/')
     hooks_path = os.path.abspath('tests/test-hooks/hooks')
-    env = StrictEnvironment()
 
     def setup_method(self, method):
         self.post_hook = make_test_repo(self.repo_path)
@@ -165,8 +163,7 @@ class TestExternalHooks(object):
                 'cookiecutter': {
                     'file': 'context_post.txt'
                 }
-            },
-            self.env)
+            })
         assert os.path.isfile('tests/context_post.txt')
         assert 'tests' not in os.getcwd()
 
@@ -176,10 +173,10 @@ class TestExternalHooks(object):
         """
         tests_dir = os.path.join(self.repo_path, 'input{{hooks}}')
         with utils.work_in(self.repo_path):
-            hooks.run_hook('pre_gen_project', tests_dir, {}, self.env)
+            hooks.run_hook('pre_gen_project', tests_dir, {})
             assert os.path.isfile(os.path.join(tests_dir, 'python_pre.txt'))
 
-            hooks.run_hook('post_gen_project', tests_dir, {}, self.env)
+            hooks.run_hook('post_gen_project', tests_dir, {})
             assert os.path.isfile(os.path.join(tests_dir, 'shell_post.txt'))
 
     def test_run_failing_hook(self):
@@ -192,7 +189,7 @@ class TestExternalHooks(object):
 
         with utils.work_in(self.repo_path):
             with pytest.raises(exceptions.FailedHookException) as excinfo:
-                hooks.run_hook('pre_gen_project', tests_dir, {}, self.env)
+                hooks.run_hook('pre_gen_project', tests_dir, {})
             assert 'Hook script failed' in str(excinfo.value)
 
 
