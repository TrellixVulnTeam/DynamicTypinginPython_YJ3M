commit f9ab55e9dae56843701acf8b79b9253a54337903
Author: Audrey Roy <audreyr@gmail.com>
Date:   Sun Jul 14 20:36:41 2013 +0200

    Works with package project templates.

diff --git a/cookiecutter/__init__.py b/cookiecutter/__init__.py
new file mode 100644
index 0000000..b794fd4
--- /dev/null
+++ b/cookiecutter/__init__.py
@@ -0,0 +1 @@
+__version__ = '0.1.0'
diff --git a/cookiecutter/cookiecutter.py b/cookiecutter/cookiecutter.py
new file mode 100755
index 0000000..af9813c
--- /dev/null
+++ b/cookiecutter/cookiecutter.py
@@ -0,0 +1,91 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+import errno
+import json
+import os
+
+from jinja2 import FileSystemLoader
+from jinja2.environment import Environment
+
+
+def make_sure_path_exists(path):
+    try:
+        os.makedirs(path)
+    except OSError as exception:
+        if exception.errno != errno.EEXIST:
+            return False
+    return True
+
+
+def generate_context(json_dir='json/'):
+    """
+    Generates the context for all complexity pages.
+
+    Description:
+
+        Iterates through the contents of the input_dir and finds all JSON
+        files.
+        Loads the JSON file as a Python object with the key being the JSON
+        filename.
+
+    Example:
+
+        Assume the following files exist:
+
+            json/names.json
+            json/numbers.json
+
+        Depending on their content, might generate a context as follows:
+
+        contexts = {"names":
+                        ['Audrey', 'Danny']
+                    "numbers":
+                        [1, 2, 3, 4]
+                    }
+    """
+    context = {}
+
+    for file_name in os.listdir(json_dir):
+        file_to_open = "{0}/{1}".format(json_dir, file_name)
+        file_handle = open(file_to_open)
+        obj = json.load(file_handle)
+
+        # Add the Python object to the context dictionary
+        context[file_name[:-5]] = obj
+
+    return context
+
+
+def generate_files(context=None, input_dir='input/', output_dir='output/'):
+    """ Renders the templates and saves them to files. """
+
+    context = context or {}
+    env = Environment()
+    env.loader = FileSystemLoader(input_dir)
+
+    make_sure_path_exists(output_dir)
+
+    for f in os.listdir(input_dir):
+        # If f is a directory, create it
+        print f
+        full_path = '{0}/{1}'.format(input_dir, f)
+        print full_path
+        if os.path.isdir(full_path):
+            make_sure_path_exists(full_path)
+        elif os.path.isfile(full_path):   # If f is a file, render it
+            tmpl = env.get_template(f)
+            rendered_file = tmpl.render(**context)
+
+            with open('{0}/{1}'.format(output_dir, f), 'w') as fh:
+                fh.write(rendered_file)
+
+
+def command_line_runner():
+    """ Entry point for the package, as defined in setup.py. """
+
+    context = generate_context()
+    generate_files(context=context, input_dir='package')
+
+
+if __name__ == '__main__':
+    command_line_runner()
diff --git a/setup.py b/setup.py
new file mode 100755
index 0000000..7280406
--- /dev/null
+++ b/setup.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python
+
+import os
+import sys
+
+import cookiecutter
+
+try:
+    from setuptools import setup
+except ImportError:
+    from distutils.core import setup
+
+if sys.argv[-1] == 'publish':
+    os.system('python setup.py sdist upload')
+    sys.exit()
+
+readme = open('README.rst', 'rt').read()
+history = open('HISTORY.rst', 'rt').read()
+license = open('LICENSE', 'rt').read()
+
+setup(
+    name='cookiecutter',
+    version=cookiecutter.__version__,
+    description='Utility to render a directory of Jinja2 templates to files.',
+    long_description=readme + '\n\n' + history,
+    author='Audrey Roy',
+    author_email='audreyr@gmail.com',
+    url='https://github.com/audreyr/border',
+    packages=[
+        'cookiecutter',
+    ],
+    entry_points={
+        'console_scripts': [
+            'cookiecutter = cookiecutter.cookiecutter:command_line_runner',
+        ]
+    },
+    include_package_data=True,
+    install_requires=[
+        'Jinja2',
+    ],
+    license=license,
+    zip_safe=False,
+    classifiers=(
+        'Development Status :: 2 - Pre-Alpha',
+        "Environment :: Console",
+        'Intended Audience :: Developers',
+        'Natural Language :: English',
+        'License :: OSI Approved :: BSD License',
+        'Programming Language :: Python',
+        "Programming Language :: Python :: 2",
+        'Programming Language :: Python :: 2.6',
+        'Programming Language :: Python :: 2.7',
+        'Programming Language :: Python :: 3',
+        'Programming Language :: Python :: 3.3',
+    ),
+    keywords='cookiecutter Jinja2 templates project',
+)
