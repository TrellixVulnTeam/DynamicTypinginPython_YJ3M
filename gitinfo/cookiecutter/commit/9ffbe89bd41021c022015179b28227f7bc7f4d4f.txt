commit 9ffbe89bd41021c022015179b28227f7bc7f4d4f
Author: Andrey Shpak <insspb@users.noreply.github.com>
Date:   Sat Apr 18 19:30:12 2020 +0300

    Added: docstrings for extensions feature test files (#1373)

diff --git a/tests/test-extensions/custom-extension-post/hooks/post_gen_project.py b/tests/test-extensions/custom-extension-post/hooks/post_gen_project.py
index 32f30fc..8e0eca8 100644
--- a/tests/test-extensions/custom-extension-post/hooks/post_gen_project.py
+++ b/tests/test-extensions/custom-extension-post/hooks/post_gen_project.py
@@ -3,5 +3,9 @@
 # flake8: noqa
 
 """Sample post-gen hook for testing that custom extensions are available and exposed methods are callable."""
+import sys
 
-print('{% hello cookiecutter.name %}')
+if '{% hello cookiecutter.name %}' == 'Hello Cookiemonster!':
+    sys.exit(0)
+else:
+    sys.exit(1)
diff --git a/tests/test-extensions/custom-extension-pre/hooks/pre_gen_project.py b/tests/test-extensions/custom-extension-pre/hooks/pre_gen_project.py
index b93fcba..2c2d75d 100644
--- a/tests/test-extensions/custom-extension-pre/hooks/pre_gen_project.py
+++ b/tests/test-extensions/custom-extension-pre/hooks/pre_gen_project.py
@@ -4,4 +4,9 @@
 
 """Sample pre-gen hook for testing that custom extensions are available and exposed methods are callable."""
 
-print('{% hello cookiecutter.name %}')
+import sys
+
+if '{% hello cookiecutter.name %}' == 'Hello Cookiemonster!':
+    sys.exit(0)
+else:
+    sys.exit(1)
diff --git a/tests/test-extensions/hello_extension/hello_extension.py b/tests/test-extensions/hello_extension/hello_extension.py
index 8c25c6d..80aa1fc 100644
--- a/tests/test-extensions/hello_extension/hello_extension.py
+++ b/tests/test-extensions/hello_extension/hello_extension.py
@@ -16,9 +16,11 @@ class HelloExtension(Extension):
         super(HelloExtension, self).__init__(environment)
 
     def _hello(self, name):
+        """Do actual tag replace when invoked by parser."""
         return 'Hello {name}!'.format(name=name)
 
     def parse(self, parser):
+        """Work when something match `tags` variable."""
         lineno = next(parser.stream).lineno
         node = parser.parse_expression()
         call_method = self.call_method('_hello', [node], lineno=lineno)
diff --git a/tests/test_custom_extensions_in_hooks.py b/tests/test_custom_extensions_in_hooks.py
index a217d67..a5bf1d2 100644
--- a/tests/test_custom_extensions_in_hooks.py
+++ b/tests/test_custom_extensions_in_hooks.py
@@ -23,23 +23,30 @@ from cookiecutter import main
     'post_gen_hook',
 ])
 def template(request):
+    """Fixture. Allows to split pre and post hooks test directories."""
     return 'tests/test-extensions/' + request.param
 
 
 @pytest.fixture
 def output_dir(tmpdir):
+    """Fixture. Create and return custom temp directory for test."""
     return str(tmpdir.mkdir('hello'))
 
 
 @pytest.fixture(autouse=True)
 def modify_syspath(monkeypatch):
-    # Make sure that the custom extension can be loaded
+    """Fixture. Make sure that the custom extension can be loaded."""
     monkeypatch.syspath_prepend(
         'tests/test-extensions/hello_extension'
     )
 
 
 def test_hook_with_extension(template, output_dir):
+    """Verify custom Jinja2 extension correctly work in hooks and file rendering.
+
+    Each file in hooks has simple tests inside and will raise error if not
+    correctly rendered.
+    """
     project_dir = main.cookiecutter(
         template,
         no_input=True,
diff --git a/tests/test_default_extensions.py b/tests/test_default_extensions.py
index 2830f78..76c18eb 100644
--- a/tests/test_default_extensions.py
+++ b/tests/test_default_extensions.py
@@ -1,11 +1,6 @@
 # -*- coding: utf-8 -*-
 
-"""
-test_default_extensions.
-
-Tests to ensure Jinja2 filters/extensions are available from within pre- and
-post-gen hooks.
-"""
+"""Verify Jinja2 filters/extensions are available from pre-gen/post-gen hooks."""
 
 import io
 import os
@@ -16,8 +11,9 @@ import pytest
 from cookiecutter.main import cookiecutter
 
 
-@pytest.yield_fixture(autouse=True)
+@pytest.fixture(autouse=True)
 def freeze():
+    """Fixture. Make time stating during all tests in this file."""
     freezer = freezegun.freeze_time("2015-12-09 23:33:01")
     freezer.start()
     yield
@@ -25,6 +21,7 @@ def freeze():
 
 
 def test_jinja2_time_extension(tmpdir):
+    """Verify Jinja2 time extension work correctly."""
     project_dir = cookiecutter(
         'tests/test-extensions/default/',
         no_input=True,
@@ -49,6 +46,7 @@ def test_jinja2_time_extension(tmpdir):
 
 
 def test_jinja2_slugify_extension(tmpdir):
+    """Verify Jinja2 slugify extension work correctly."""
     project_dir = cookiecutter(
         'tests/test-extensions/default/',
         no_input=True,
