commit beb21af3801ec90c8c5b1c6697fac2f4520c08ad
Author: Andrey Shpak <insspb@users.noreply.github.com>
Date:   Sat Apr 18 19:41:05 2020 +0300

    Tests refactoring: test_generate* docstrings added, setup/teardown functions updated, duplicate tests dropped (#1378)

diff --git a/tests/test_generate_file.py b/tests/test_generate_file.py
index c91b45b..cca214e 100644
--- a/tests/test_generate_file.py
+++ b/tests/test_generate_file.py
@@ -1,12 +1,6 @@
 # -*- coding: utf-8 -*-
 
-"""
-test_generate_file.
-
-Tests formerly known from a unittest residing in test_generate.py named
-TestGenerateFile.test_generate_file
-TestGenerateFile.test_generate_file_verbose_template_syntax_error
-"""
+"""Tests for `generate_file` function, part of `generate_files` function workflow."""
 
 from __future__ import unicode_literals
 
@@ -21,24 +15,28 @@ from cookiecutter import generate
 from cookiecutter.environment import StrictEnvironment
 
 
-@pytest.fixture(scope='function')
-def remove_cheese_file(request):
-    """Remove the cheese text file which is created by the tests."""
-    def fin_remove_cheese_file():
-        if os.path.exists('tests/files/cheese.txt'):
-            os.remove('tests/files/cheese.txt')
-    request.addfinalizer(fin_remove_cheese_file)
+@pytest.fixture(scope='function', autouse=True)
+def tear_down():
+    """
+    Fixture. Remove the test text file which is created by the tests.
+
+    Used for all tests in this file.
+    """
+    yield
+    if os.path.exists('tests/files/cheese.txt'):
+        os.remove('tests/files/cheese.txt')
 
 
 @pytest.fixture
 def env():
+    """Fixture. Set Jinja2 environment settings for other tests."""
     environment = StrictEnvironment()
     environment.loader = FileSystemLoader('.')
     return environment
 
 
-@pytest.mark.usefixtures('remove_cheese_file')
 def test_generate_file(env):
+    """Verify simple file is generated with rendered context data."""
     infile = 'tests/files/{{generate_file}}.txt'
     generate.generate_file(
         project_dir=".",
@@ -52,20 +50,8 @@ def test_generate_file(env):
         assert generated_text == 'Testing cheese'
 
 
-@pytest.mark.usefixtures('remove_cheese_file')
-def test_generate_file_with_false_condition(env):
-    infile = 'tests/files/{% if generate_file == \'y\' %}cheese.txt{% endif %}'
-    generate.generate_file(
-        project_dir=".",
-        infile=infile,
-        context={'generate_file': 'n'},
-        env=env
-    )
-    assert not os.path.exists('tests/files/cheese.txt')
-
-
-@pytest.mark.usefixtures('remove_cheese_file')
 def test_generate_file_jsonify_filter(env):
+    """Verify jsonify filter works during files generation process."""
     infile = 'tests/files/{{cookiecutter.jsonify_file}}.txt'
     data = {'jsonify_file': 'cheese', 'type': 'roquefort'}
     generate.generate_file(
@@ -80,10 +66,10 @@ def test_generate_file_jsonify_filter(env):
         assert json.loads(generated_text) == data
 
 
-@pytest.mark.usefixtures('remove_cheese_file')
 @pytest.mark.parametrize("length", (10, 40))
 @pytest.mark.parametrize("punctuation", (True, False))
 def test_generate_file_random_ascii_string(env, length, punctuation):
+    """Verify correct work of random_ascii_string extension on file generation."""
     infile = 'tests/files/{{cookiecutter.random_string_file}}.txt'
     data = {'random_string_file': 'cheese'}
     context = {
@@ -103,8 +89,11 @@ def test_generate_file_random_ascii_string(env, length, punctuation):
         assert len(generated_text) == length
 
 
-@pytest.mark.usefixtures('remove_cheese_file')
-def test_generate_file_with_true_conditional(env):
+def test_generate_file_with_true_condition(env):
+    """Verify correct work of boolean condition in file name on file generation.
+
+    This test has positive answer, so file should be rendered.
+    """
     infile = 'tests/files/{% if generate_file == \'y\' %}cheese.txt{% endif %}'
     generate.generate_file(
         project_dir=".",
@@ -118,8 +107,24 @@ def test_generate_file_with_true_conditional(env):
         assert generated_text == 'Testing that generate_file was y'
 
 
+def test_generate_file_with_false_condition(env):
+    """Verify correct work of boolean condition in file name on file generation.
+
+    This test has negative answer, so file should not be rendered.
+    """
+    infile = 'tests/files/{% if generate_file == \'y\' %}cheese.txt{% endif %}'
+    generate.generate_file(
+        project_dir=".",
+        infile=infile,
+        context={'generate_file': 'n'},
+        env=env
+    )
+    assert not os.path.isfile('tests/files/cheese.txt')
+
+
 @pytest.fixture
 def expected_msg():
+    """Fixture. Used to ensure that exception generated text contain full data."""
     msg = (
         'Missing end of comment tag\n'
         '  File "./tests/files/syntax_error.txt", line 1\n'
@@ -128,18 +133,13 @@ def expected_msg():
     return msg.replace("/", os.sep)
 
 
-@pytest.mark.usefixtures('remove_cheese_file')
 def test_generate_file_verbose_template_syntax_error(env, expected_msg):
-    try:
+    """Verify correct exception raised on syntax error in file before generation."""
+    with pytest.raises(TemplateSyntaxError) as exception:
         generate.generate_file(
             project_dir=".",
             infile='tests/files/syntax_error.txt',
             context={'syntax_error': 'syntax_error'},
             env=env
         )
-    except TemplateSyntaxError as exception:
-        assert str(exception) == expected_msg
-    except Exception as exception:
-        pytest.fail('Unexpected exception thrown: {0}'.format(exception))
-    else:
-        pytest.fail('TemplateSyntaxError not thrown')
+    assert str(exception.value) == expected_msg
diff --git a/tests/test_generate_files.py b/tests/test_generate_files.py
index a7d5656..7047195 100644
--- a/tests/test_generate_files.py
+++ b/tests/test_generate_files.py
@@ -1,16 +1,6 @@
 # -*- coding: utf-8 -*-
 
-"""
-test_generate_files.
-
-Tests formerly known from a unittest residing in test_generate.py named
-TestGenerateFiles.test_generate_files_nontemplated_exception
-TestGenerateFiles.test_generate_files
-TestGenerateFiles.test_generate_files_with_trailing_newline
-TestGenerateFiles.test_generate_files_binaries
-TestGenerateFiles.test_generate_files_absolute_path
-TestGenerateFiles.test_generate_files_output_dir
-TestGenerateFiles.test_generate_files_permissions
+"""Tests for `generate_files` function and related errors raising.
 
 Use the global clean_system fixture and run additional teardown code to remove
 some special folders.
@@ -28,37 +18,40 @@ import io
 import os
 
 import pytest
-
-from cookiecutter import exceptions
-from cookiecutter import generate
-from cookiecutter import utils
+from binaryornot.check import is_binary
+from cookiecutter import exceptions, generate, utils
 
 
 @pytest.mark.parametrize('invalid_dirname', ['', '{foo}', '{{foo', 'bar}}'])
 def test_ensure_dir_is_templated_raises(invalid_dirname):
+    """Verify `ensure_dir_is_templated` raises on wrong directories names input."""
     with pytest.raises(exceptions.NonTemplatedInputDirException):
         generate.ensure_dir_is_templated(invalid_dirname)
 
 
 @pytest.fixture(scope='function')
-def remove_additional_folders(request):
+def remove_additional_folders():
     """Remove some special folders which are created by the tests."""
-    def fin_remove_additional_folders():
-        if os.path.exists('inputpizzä'):
-            utils.rmtree('inputpizzä')
-        if os.path.exists('inputgreen'):
-            utils.rmtree('inputgreen')
-        if os.path.exists('inputbinary_files'):
-            utils.rmtree('inputbinary_files')
-        if os.path.exists('tests/custom_output_dir'):
-            utils.rmtree('tests/custom_output_dir')
-        if os.path.exists('inputpermissions'):
-            utils.rmtree('inputpermissions')
-    request.addfinalizer(fin_remove_additional_folders)
+    yield
+    if os.path.exists('inputpizzä'):
+        utils.rmtree('inputpizzä')
+    if os.path.exists('inputgreen'):
+        utils.rmtree('inputgreen')
+    if os.path.exists('inputbinary_files'):
+        utils.rmtree('inputbinary_files')
+    if os.path.exists('tests/custom_output_dir'):
+        utils.rmtree('tests/custom_output_dir')
+    if os.path.exists('inputpermissions'):
+        utils.rmtree('inputpermissions')
 
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_generate_files_nontemplated_exception():
+    """
+    Verify `generate_files` raises when no directories to render exist.
+
+    Note: Check `tests/test-generate-files-nontemplated` location to understand.
+    """
     with pytest.raises(exceptions.NonTemplatedInputDirException):
         generate.generate_files(
             context={
@@ -70,6 +63,7 @@ def test_generate_files_nontemplated_exception():
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_generate_files():
+    """Verify directory name correctly rendered with unicode containing context."""
     generate.generate_files(
         context={
             'cookiecutter': {'food': 'pizzä'}
@@ -86,6 +80,7 @@ def test_generate_files():
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_generate_files_with_trailing_newline():
+    """Verify new line not removed by templating engine after folder generation."""
     generate.generate_files(
         context={
             'cookiecutter': {'food': 'pizzä'}
@@ -103,6 +98,7 @@ def test_generate_files_with_trailing_newline():
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_generate_files_binaries():
+    """Verify binary files created during directory generation."""
     generate.generate_files(
         context={
             'cookiecutter': {'binary_test': 'binary_files'}
@@ -110,21 +106,20 @@ def test_generate_files_binaries():
         repo_dir='tests/test-generate-binaries'
     )
 
-    assert os.path.isfile('inputbinary_files/logo.png')
-    assert os.path.isfile('inputbinary_files/.DS_Store')
-    assert os.path.isfile('inputbinary_files/readme.txt')
-    assert os.path.isfile('inputbinary_files/some_font.otf')
-    assert os.path.isfile('inputbinary_files/binary_files/logo.png')
-    assert os.path.isfile('inputbinary_files/binary_files/.DS_Store')
-    assert os.path.isfile('inputbinary_files/binary_files/readme.txt')
-    assert os.path.isfile('inputbinary_files/binary_files/some_font.otf')
-    assert os.path.isfile(
-        'inputbinary_files/binary_files/binary_files/logo.png'
-    )
+    assert is_binary('inputbinary_files/logo.png')
+    assert is_binary('inputbinary_files/.DS_Store')
+    assert not is_binary('inputbinary_files/readme.txt')
+    assert is_binary('inputbinary_files/some_font.otf')
+    assert is_binary('inputbinary_files/binary_files/logo.png')
+    assert is_binary('inputbinary_files/binary_files/.DS_Store')
+    assert not is_binary('inputbinary_files/binary_files/readme.txt')
+    assert is_binary('inputbinary_files/binary_files/some_font.otf')
+    assert is_binary('inputbinary_files/binary_files/binary_files/logo.png')
 
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_generate_files_absolute_path():
+    """Verify usage of `abspath` does not change files generation behaviour."""
     generate.generate_files(
         context={
             'cookiecutter': {'food': 'pizzä'}
@@ -136,19 +131,7 @@ def test_generate_files_absolute_path():
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_generate_files_output_dir():
-    os.mkdir('tests/custom_output_dir')
-    generate.generate_files(
-        context={
-            'cookiecutter': {'food': 'pizzä'}
-        },
-        repo_dir=os.path.abspath('tests/test-generate-files'),
-        output_dir='tests/custom_output_dir'
-    )
-    assert os.path.isfile('tests/custom_output_dir/inputpizzä/simple.txt')
-
-
-@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
-def test_return_rendered_project_dir():
+    """Verify `output_dir` option for `generate_files` changing location correctly."""
     os.mkdir('tests/custom_output_dir')
     project_dir = generate.generate_files(
         context={
@@ -157,6 +140,7 @@ def test_return_rendered_project_dir():
         repo_dir=os.path.abspath('tests/test-generate-files'),
         output_dir='tests/custom_output_dir'
     )
+    assert os.path.isfile('tests/custom_output_dir/inputpizzä/simple.txt')
     assert project_dir == os.path.abspath(
         'tests/custom_output_dir/inputpizzä'
     )
@@ -164,8 +148,11 @@ def test_return_rendered_project_dir():
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_generate_files_permissions():
-    """simple.txt and script.sh should retain their respective 0o644 and \
-    0o755 permissions."""
+    """Verify generates files respect source files permissions.
+
+    simple.txt and script.sh should retain their respective 0o644 and 0o755
+    permissions.
+    """
     generate.generate_files(
         context={
             'cookiecutter': {'permissions': 'permissions'}
@@ -212,6 +199,7 @@ def test_generate_files_permissions():
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_generate_files_with_overwrite_if_exists_with_skip_if_file_exists():
+    """Verify `skip_if_file_exist` has priority over `overwrite_if_exists`."""
     simple_file = 'inputpizzä/simple.txt'
     simple_with_new_line_file = 'inputpizzä/simple-with-newline.txt'
 
@@ -238,6 +226,7 @@ def test_generate_files_with_overwrite_if_exists_with_skip_if_file_exists():
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_generate_files_with_skip_if_file_exists():
+    """Verify existed files not removed if error raised with `skip_if_file_exists`."""
     simple_file = 'inputpizzä/simple.txt'
     simple_with_new_line_file = 'inputpizzä/simple-with-newline.txt'
 
@@ -263,6 +252,7 @@ def test_generate_files_with_skip_if_file_exists():
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_generate_files_with_overwrite_if_exists():
+    """Verify overwrite_if_exists overwrites old files."""
     simple_file = 'inputpizzä/simple.txt'
     simple_with_new_line_file = 'inputpizzä/simple-with-newline.txt'
 
@@ -287,6 +277,7 @@ def test_generate_files_with_overwrite_if_exists():
 
 @pytest.fixture
 def undefined_context():
+    """Fixture. Populate context variable for future tests."""
     return {
         'cookiecutter': {
             'project_slug': 'testproject',
@@ -296,6 +287,7 @@ def undefined_context():
 
 
 def test_raise_undefined_variable_file_name(tmpdir, undefined_context):
+    """Verify correct error raised when file name cannot be rendered."""
     output_dir = tmpdir.mkdir('output')
 
     with pytest.raises(exceptions.UndefinedVariableInTemplate) as err:
@@ -313,6 +305,7 @@ def test_raise_undefined_variable_file_name(tmpdir, undefined_context):
 
 def test_raise_undefined_variable_file_name_existing_project(
         tmpdir, undefined_context):
+    """Verify correct error raised when file name cannot be rendered."""
     output_dir = tmpdir.mkdir('output')
 
     output_dir.join('testproject').mkdir()
@@ -332,6 +325,7 @@ def test_raise_undefined_variable_file_name_existing_project(
 
 
 def test_raise_undefined_variable_file_content(tmpdir, undefined_context):
+    """Verify correct error raised when file content cannot be rendered."""
     output_dir = tmpdir.mkdir('output')
 
     with pytest.raises(exceptions.UndefinedVariableInTemplate) as err:
@@ -348,6 +342,7 @@ def test_raise_undefined_variable_file_content(tmpdir, undefined_context):
 
 
 def test_raise_undefined_variable_dir_name(tmpdir, undefined_context):
+    """Verify correct error raised when directory name cannot be rendered."""
     output_dir = tmpdir.mkdir('output')
 
     with pytest.raises(exceptions.UndefinedVariableInTemplate) as err:
@@ -369,6 +364,7 @@ def test_raise_undefined_variable_dir_name(tmpdir, undefined_context):
 
 def test_raise_undefined_variable_dir_name_existing_project(
         tmpdir, undefined_context):
+    """Verify correct error raised when directory name cannot be rendered."""
     output_dir = tmpdir.mkdir('output')
 
     output_dir.join('testproject').mkdir()
@@ -392,6 +388,7 @@ def test_raise_undefined_variable_dir_name_existing_project(
 
 
 def test_raise_undefined_variable_project_dir(tmpdir):
+    """Verify correct error raised when directory name cannot be rendered."""
     output_dir = tmpdir.mkdir('output')
 
     with pytest.raises(exceptions.UndefinedVariableInTemplate) as err:
