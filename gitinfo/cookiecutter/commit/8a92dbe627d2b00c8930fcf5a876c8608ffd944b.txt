commit 8a92dbe627d2b00c8930fcf5a876c8608ffd944b
Author: Audrey Roy <audreyr@gmail.com>
Date:   Sat Sep 7 12:42:46 2013 +0200

    Don't create config if it doesn't exist. Separate out get_config() from get_user_config().

diff --git a/cookiecutter/config.py b/cookiecutter/config.py
old mode 100644
new mode 100755
index ecbd529..b6a5fd8
--- a/cookiecutter/config.py
+++ b/cookiecutter/config.py
@@ -14,33 +14,26 @@ import sys
 
 import yaml
 
+from .exceptions import ConfigDoesNotExistException
 from .utils import unicode_open
 from .exceptions import InvalidConfiguration
 
-_CONFIG = {}
 
-# TODO: test on windows...
-GLOB_SETTINGS_PATH = os.path.expanduser('~/.cookiecutter')
-
-# TODO: figure out some sane default values
+# TODO: figure out some sane default values, or if this is needed
 DEFAULT_SETTINGS = {
 	'template_dirs': [],
-	'default_context': {
-  		'full_name': '{full_name}',
-  		'email': '{email}',
-  		'github_username': '{github_username}',
-  	}
+	'default_context': {}
 }
 
-def get_config(config_path=GLOB_SETTINGS_PATH):
+
+def get_config(config_path):
     """
-    Retrieve the global settings and return them.
+    Retrieve the config from the specified path, and return it as a config dict.
     """
-    global _CONFIG
-    if _CONFIG:
-        return _CONFIG
+
     if not os.path.exists(config_path):
-        create_config({}, config_path)	
+        raise ConfigDoesNotExistException
+
     with unicode_open(config_path) as file_handle:
         try:
             global_config = yaml.load(file_handle)
@@ -50,13 +43,14 @@ def get_config(config_path=GLOB_SETTINGS_PATH):
 
     return global_config
 
-def create_config(params, path=GLOB_SETTINGS_PATH):
-	"""
-	Create a new config file at `path` with the default values defined in
-	`params`.
-	"""
-	settings = DEFAULT_SETTINGS
-	settings['template_dirs'] = params.pop('template_dirs', [])
-	settings['default_context'].update(params)
-	with unicode_open(path, 'w') as file_handle:
-		file_handle.write(yaml.dump(settings, default_flow_style=False))
+
+def get_user_config():
+    """
+    Retrieve settings from the user's ~/.cookiecutterrc or equivalent home dir
+    config file.
+    """
+    
+    # TODO: test on windows...
+    USER_CONFIG_PATH = os.path.expanduser('~/.cookiecutter')
+    
+    return get_config(USER_CONFIG_PATH)
diff --git a/cookiecutter/exceptions.py b/cookiecutter/exceptions.py
index f819dc8..8d4e41c 100755
--- a/cookiecutter/exceptions.py
+++ b/cookiecutter/exceptions.py
@@ -35,6 +35,12 @@ class MissingProjectDir(CookiecutterException):
     directory inside of a repo.
     """
 
+class ConfigDoesNotExistException(CookiecutterException):
+    """
+    Raised when get_config() is passed a path to a config file, but no file
+    is found at that path.
+    """
+
 class InvalidConfiguration(CookiecutterException):
     """
     Raised if the global configuration file is not valid YAML or is
diff --git a/tests/config/invalid-config.yaml b/tests/test-config/invalid-config.yaml
similarity index 100%
rename from tests/config/invalid-config.yaml
rename to tests/test-config/invalid-config.yaml
diff --git a/tests/config/test-config.yaml b/tests/test-config/test-config.yaml
similarity index 100%
rename from tests/config/test-config.yaml
rename to tests/test-config/test-config.yaml
diff --git a/tests/test_config.py b/tests/test_config.py
index e726139..b7985ea 100755
--- a/tests/test_config.py
+++ b/tests/test_config.py
@@ -15,7 +15,7 @@ import unittest
 import yaml
 
 from cookiecutter import config
-from cookiecutter.exceptions import InvalidConfiguration
+from cookiecutter.exceptions import ConfigDoesNotExistException, InvalidConfiguration
 
 if sys.version_info[:2] < (2, 7):
     import unittest2 as unittest
@@ -23,61 +23,40 @@ else:
     import unittest
 
 
-test_config_file = 'tests/config/test-config.yaml'
-test_config_obj = {
-	'template_dirs': [
-		'/home/raphi/dev'
-	],
-	'default_context': {
-		"full_name": "Raphi Gaziano",
-		"email": "r.gaziano@gmail.com",
-		"github_username": "raphigaziano"
-	}
-}
-
 class TestConfig(unittest.TestCase):
 
-    def test_create_config(self):
-        """ Create a new config file with passed values """
-        fname = "tests/config/dynamic-config.yaml"
-        config.create_config({
-            'template_dirs': [
-                'foo',
-                'bar'
-            ],
-            'full_name': 'bob',
-            'email': 'bob@bob.com',
-            'github_username': 'bobo'
-        }, path=fname)
-
-        self.assertTrue(os.path.exists(fname))
-
-        with open(fname, 'r') as file_handle:
-            conf = yaml.load(file_handle)
-
-        self.assertEqual(conf['template_dirs'], ['foo', 'bar'])
-        self.assertEqual(conf['default_context']['full_name'], 'bob')
-        self.assertEqual(conf['default_context']['email'], 'bob@bob.com')
-        self.assertEqual(conf['default_context']['github_username'], 'bobo')
-
-        os.remove(fname)
-
     def test_get_config(self):
         """ Opening and reading config file """
-        conf = config.get_config(test_config_file)
-        self.assertEqual(conf, test_config_obj)
-
-    def test_auto_gen_config_if_does_not_exist(self):
-        """ Auto generation of a default config file if none can be found """
-        fname = "tests/config/autogen.yaml"
-        config.get_config(fname)
-        self.assertTrue(os.path.exists(fname))
-        os.remove(fname)
+        conf = config.get_config('tests/test-config/test-config.yaml')
+        expected_conf = {
+        	'template_dirs': [
+        		'/home/raphi/dev'
+        	],
+        	'default_context': {
+        		"full_name": "Raphi Gaziano",
+        		"email": "r.gaziano@gmail.com",
+        		"github_username": "raphigaziano"
+        	}
+        }
+        self.assertEqual(conf, expected_conf)
+
+    def test_get_config_does_not_exist(self):
+        """
+        Check that `exceptions.ConfigDoesNotExistException` is raised when
+        attempting to get a non-existent config file.
+        """
+        self.assertRaises(
+            ConfigDoesNotExistException,
+            config.get_config,
+            'tests/test-config/this-does-not-exist.yaml'
+        )
 
     def test_invalid_config(self):
-        """ An invalid config file should raise a cookiecutter InvalidConfiguration exception """
+        """
+        An invalid config file should raise an `InvalidConfiguration` exception.
+        """
         self.assertRaises(InvalidConfiguration, config.get_config,
-                          "tests/config/invalid-config.yaml")
+                          "tests/test-config/invalid-config.yaml")
 
 
 if __name__ == '__main__':
