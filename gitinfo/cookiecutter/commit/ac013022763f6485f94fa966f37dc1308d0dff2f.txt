commit ac013022763f6485f94fa966f37dc1308d0dff2f
Author: Raphael Pierzina <raphael@hackebrot.de>
Date:   Sun Mar 22 23:03:19 2015 +0100

    Merge copy without render feature of @osantana and @LucianU

diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 092008b..71ea2e3 100755
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -9,11 +9,13 @@ Functions for generating a project from a project template.
 """
 from __future__ import unicode_literals
 from collections import OrderedDict
+import fnmatch
 import io
 import json
 import logging
 import os
 import shutil
+import sys
 
 from jinja2 import FileSystemLoader, Template
 from jinja2.environment import Environment
@@ -26,6 +28,25 @@ from .utils import make_sure_path_exists, work_in
 from .hooks import run_hook
 
 
+def copy_without_render(path, context):
+    """
+    Returns True if `path` matches some pattern in the
+    `_copy_without_render` context setting.
+
+    :param path: A file-system path referring to a file or dir that
+        should be rendered or just copied.
+    :param context: cookiecutter context.
+    """
+    try:
+        for dont_render in context["cookiecutter"]["_copy_without_render"]:
+            if fnmatch.fnmatch(path, os.path.relpath(dont_render)):
+                return True
+    except KeyError:
+        return False
+
+    return False
+
+
 def generate_context(context_file='cookiecutter.json', default_context=None,
                      extra_context=None):
     """
@@ -193,13 +214,48 @@ def generate_files(repo_dir, context=None, output_dir='.'):
         env.loader = FileSystemLoader('.')
 
         for root, dirs, files in os.walk('.'):
+            # We must separate the two types of dirs into different lists.
+            # The reason is that we don't want ``os.walk`` to go through the
+            # unrendered directories, since they will just be copied.
+            copy_dirs = []
+            render_dirs = []
+
+            for d in dirs:
+                d_ = os.path.normpath(os.path.join(root, d))
+                # We check the full path, because that's how it can be
+                # specified in the ``_copy_without_render`` setting, but
+                # we store just the dir name
+                if copy_without_render(os.path.relpath(d_), context):
+                    copy_dirs.append(d)
+                else:
+                    render_dirs.append(d)
+
+            for copy_dir in copy_dirs:
+                indir = os.path.normpath(os.path.join(root, copy_dir))
+                outdir = os.path.normpath(os.path.join(project_dir, indir))
+                logging.debug(
+                    "Copying dir {0} to {1} without rendering".format(indir, outdir)
+                )
+                shutil.copytree(indir, outdir)
+
+            # We mutate ``dirs``, because we only want to go through these dirs
+            # recursively
+            dirs[:] = render_dirs
             for d in dirs:
-                unrendered_dir = os.path.join(project_dir,
-                                              os.path.join(root, d))
+                unrendered_dir = os.path.join(project_dir, os.path.join(root, d))
                 render_and_create_dir(unrendered_dir, context, output_dir)
 
             for f in files:
-                infile = os.path.join(root, f)
+                infile = os.path.normpath(os.path.join(root, f))
+                if copy_without_render(infile, context):
+                    outfile_tmpl = Template(infile)
+                    outfile = os.path.join(project_dir, outfile_tmpl.render(**context))
+                    logging.debug(
+                        "Copying file {0} to {1} without rendering".format(infile, outfile)
+                    )
+                    shutil.copyfile(infile, outfile)
+                    shutil.copymode(infile, outfile)
+                    continue
                 logging.debug('f is {0}'.format(f))
                 generate_file(project_dir, infile, context, env)
 
