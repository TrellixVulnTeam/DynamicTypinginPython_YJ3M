commit 90434ff4ea4477941444f1e83313beb414838535
Author: Nimrod Milo <milo.nimrod@gmail.com>
Date:   Fri May 29 19:41:33 2020 +0300

    Changed: Generated projects can use multiple type hooks at same time. (sh + py) (#974)
    
    * Added support for multiple hooks in a single project
    
    * Added tests for Pull #974
    
    * Fix linting
    
    Co-authored-by: Nimrod Moli <nimrodm@traxretail.com>
    Co-authored-by: Andrey Shpak <ashpak@ashpak.ru>

diff --git a/cookiecutter/hooks.py b/cookiecutter/hooks.py
index 20ccae2..3c73f74 100644
--- a/cookiecutter/hooks.py
+++ b/cookiecutter/hooks.py
@@ -54,11 +54,14 @@ def find_hook(hook_name, hooks_dir='hooks'):
         logger.debug('No hooks/dir in template_dir')
         return None
 
+    scripts = []
     for hook_file in os.listdir(hooks_dir):
         if valid_hook(hook_file, hook_name):
-            return os.path.abspath(os.path.join(hooks_dir, hook_file))
+            scripts.append(os.path.abspath(os.path.join(hooks_dir, hook_file)))
 
-    return None
+    if len(scripts) == 0:
+        return None
+    return scripts
 
 
 def run_script(script_path, cwd='.'):
@@ -119,9 +122,10 @@ def run_hook(hook_name, project_dir, context):
     :param project_dir: The directory to execute the script from.
     :param context: Cookiecutter project context.
     """
-    script = find_hook(hook_name)
-    if script is None:
+    scripts = find_hook(hook_name)
+    if not scripts:
         logger.debug('No %s hook found', hook_name)
         return
     logger.debug('Running hook %s', hook_name)
-    run_script_with_context(script, project_dir, context)
+    for script in scripts:
+        run_script_with_context(script, project_dir, context)
diff --git a/tests/test_hooks.py b/tests/test_hooks.py
index be4038f..bd374ad 100644
--- a/tests/test_hooks.py
+++ b/tests/test_hooks.py
@@ -9,7 +9,7 @@ import pytest
 from cookiecutter import hooks, utils, exceptions
 
 
-def make_test_repo(name):
+def make_test_repo(name, multiple_hooks=False):
     """Create test repository for test setup methods."""
     hook_dir = os.path.join(name, 'hooks')
     template = os.path.join(name, 'input{{hooks}}')
@@ -47,6 +47,26 @@ def make_test_repo(name):
         # Set the execute bit
         os.chmod(filename, os.stat(filename).st_mode | stat.S_IXUSR)
 
+    # Adding an additional pre script
+    if multiple_hooks:
+        if sys.platform.startswith('win'):
+            pre = 'pre_gen_project.bat'
+            with open(os.path.join(hook_dir, pre), 'w') as f:
+                f.write("@echo off\n")
+                f.write("\n")
+                f.write("echo post generation hook\n")
+                f.write("echo. >shell_pre.txt\n")
+        else:
+            pre = 'pre_gen_project.sh'
+            filename = os.path.join(hook_dir, pre)
+            with open(filename, 'w') as f:
+                f.write("#!/bin/bash\n")
+                f.write("\n")
+                f.write("echo 'post generation hook';\n")
+                f.write("touch 'shell_pre.txt'\n")
+            # Set the execute bit
+            os.chmod(filename, os.stat(filename).st_mode | stat.S_IXUSR)
+
     return post
 
 
@@ -68,11 +88,11 @@ class TestFindHooks(object):
         with utils.work_in(self.repo_path):
             expected_pre = os.path.abspath('hooks/pre_gen_project.py')
             actual_hook_path = hooks.find_hook('pre_gen_project')
-            assert expected_pre == actual_hook_path
+            assert expected_pre == actual_hook_path[0]
 
             expected_post = os.path.abspath('hooks/{}'.format(self.post_hook))
             actual_hook_path = hooks.find_hook('post_gen_project')
-            assert expected_post == actual_hook_path
+            assert expected_post == actual_hook_path[0]
 
     def test_no_hooks(self):
         """`find_hooks` should return None if the hook could not be found."""
@@ -98,7 +118,7 @@ class TestExternalHooks(object):
 
     def setup_method(self, method):
         """External hooks related tests setup fixture."""
-        self.post_hook = make_test_repo(self.repo_path)
+        self.post_hook = make_test_repo(self.repo_path, multiple_hooks=True)
 
     def teardown_method(self, method):
         """External hooks related tests teardown fixture."""
@@ -108,6 +128,8 @@ class TestExternalHooks(object):
             os.remove('python_pre.txt')
         if os.path.exists('shell_post.txt'):
             os.remove('shell_post.txt')
+        if os.path.exists('shell_pre.txt'):
+            os.remove('shell_pre.txt')
         if os.path.exists('tests/shell_post.txt'):
             os.remove('tests/shell_post.txt')
         if os.path.exists('tests/test-hooks/input{{hooks}}/python_pre.txt'):
@@ -163,6 +185,7 @@ class TestExternalHooks(object):
         with utils.work_in(self.repo_path):
             hooks.run_hook('pre_gen_project', tests_dir, {})
             assert os.path.isfile(os.path.join(tests_dir, 'python_pre.txt'))
+            assert os.path.isfile(os.path.join(tests_dir, 'shell_pre.txt'))
 
             hooks.run_hook('post_gen_project', tests_dir, {})
             assert os.path.isfile(os.path.join(tests_dir, 'shell_post.txt'))
