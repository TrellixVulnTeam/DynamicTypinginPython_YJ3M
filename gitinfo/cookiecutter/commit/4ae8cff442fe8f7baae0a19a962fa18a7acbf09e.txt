commit 4ae8cff442fe8f7baae0a19a962fa18a7acbf09e
Author: Audrey Roy <audreyr@gmail.com>
Date:   Thu Aug 8 11:08:30 2013 +0200

    Prompt the user: delete and reclone the repo dir?

diff --git a/cookiecutter/prompt.py b/cookiecutter/prompt.py
index fe5a7d6..386673a 100755
--- a/cookiecutter/prompt.py
+++ b/cookiecutter/prompt.py
@@ -34,3 +34,42 @@ def prompt_for_config(context):
         cookiecutter_dict[key] = new_val
     
     return cookiecutter_dict
+
+
+def query_yes_no(question, default="yes"):
+    """
+    Ask a yes/no question via `raw_input()` and return their answer.
+
+    :param question: A string that is presented to the user.
+    :param default: The presumed answer if the user just hits <Enter>.
+        It must be "yes" (the default), "no" or None (meaning
+        an answer is required of the user).
+
+    The "answer" return value is one of "yes" or "no".
+
+    Adapted from
+    http://stackoverflow.com/questions/3041986/python-command-line-yes-no-input
+    http://code.activestate.com/recipes/577058/
+
+    """
+    valid = {"yes": True, "y": True, "ye": True, "no": False, "n": False}
+    if default is None:
+        prompt = " [y/n] "
+    elif default == "yes":
+        prompt = " [Y/n] "
+    elif default == "no":
+        prompt = " [y/N] "
+    else:
+        raise ValueError("invalid default answer: '%s'" % default)
+
+    while True:
+        sys.stdout.write(question + prompt)
+        choice = input().lower()
+
+        if default is not None and choice == '':
+            return valid[default]
+        elif choice in valid:
+            return valid[choice]
+        else:
+            sys.stdout.write("Please respond with 'yes' or 'no' "
+                             "(or 'y' or 'n').\n")
diff --git a/cookiecutter/vcs.py b/cookiecutter/vcs.py
index a8b5efc..83cd330 100755
--- a/cookiecutter/vcs.py
+++ b/cookiecutter/vcs.py
@@ -10,6 +10,10 @@ Helper functions for working with version control systems.
 
 import logging
 import os
+import shutil
+import sys
+
+from prompt import query_yes_no
 
 
 def git_clone(repo):
@@ -19,10 +23,19 @@ def git_clone(repo):
     :param repo: Git repo URL ending with .git.
     """
 
-    os.system('git clone {0}'.format(repo))
     
     # Return repo dir
     tail = os.path.split(repo)[1]
     repo_dir = tail.rsplit('.git')[0]
-    logging.info('repo_dir is {0}'.format(repo_dir))
+    logging.debug('repo_dir is {0}'.format(repo_dir))
+
+    if os.path.isdir(repo_dir):
+        ok_to_delete = query_yes_no("You've cloned {0} before. Is it okay to delete and re-clone it?".format(repo_dir))
+        if ok_to_delete:
+            shutil.rmtree(repo_dir)
+        else:
+            sys.exit()
+
+    os.system('git clone {0}'.format(repo))
+
     return repo_dir
