commit 9a59c71dc3cb4f0f8328ae0538418d4a0970d913
Author: Chuan-Heng Hsiao <hsiao.chuanheng@gmail.com>
Date:   Mon Mar 30 05:16:28 2020 -0400

    Add skip-if-file-exists (#1076)
    
    Co-authored-by: Sorin Sbarnea <ssbarnea@users.noreply.github.com>

diff --git a/cookiecutter/cli.py b/cookiecutter/cli.py
index a9b10e3..e034a69 100644
--- a/cookiecutter/cli.py
+++ b/cookiecutter/cli.py
@@ -77,6 +77,11 @@ def validate_extra_context(ctx, param, value):
     u'-f', u'--overwrite-if-exists', is_flag=True,
     help=u'Overwrite the contents of the output directory if it already exists'
 )
+@click.option(
+    u'-s', u'--skip-if-file-exists', is_flag=True,
+    help=u'Skip the files in the corresponding directories if they already '
+         u'exist', default=False
+)
 @click.option(
     u'-o', u'--output-dir', default='.', type=click.Path(),
     help=u'Where to output the generated project dir into'
@@ -96,7 +101,7 @@ def validate_extra_context(ctx, param, value):
 def main(
         template, extra_context, no_input, checkout, verbose,
         replay, overwrite_if_exists, output_dir, config_file,
-        default_config, debug_file, directory):
+        default_config, debug_file, directory, skip_if_file_exists):
     """Create a project from a Cookiecutter project template (TEMPLATE).
 
     Cookiecutter is free and open source software, developed and managed by
@@ -124,7 +129,8 @@ def main(
             config_file=config_file,
             default_config=default_config,
             password=os.environ.get('COOKIECUTTER_REPO_PASSWORD'),
-            directory=directory
+            directory=directory,
+            skip_if_file_exists=skip_if_file_exists
         )
     except (OutputDirExistsException,
             InvalidModeException,
diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 5fb3997..0e8d9b5 100644
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -114,7 +114,8 @@ def generate_context(context_file='cookiecutter.json', default_context=None,
     return context
 
 
-def generate_file(project_dir, infile, context, env):
+def generate_file(project_dir, infile, context, env,
+                  skip_if_file_exists=False):
     """Render filename of infile as name of outfile, handle infile correctly.
 
     Dealing with infile appropriately:
@@ -146,6 +147,10 @@ def generate_file(project_dir, infile, context, env):
         logger.debug('The resulting file name is empty: {0}'.format(outfile))
         return
 
+    if skip_if_file_exists and os.path.exists(outfile):
+        logger.debug('The resulting file already exists: {0}'.format(outfile))
+        return
+
     logger.debug('Created file at {0}'.format(outfile))
 
     # Just copy over binary files. Don't render.
@@ -245,7 +250,7 @@ def _run_hook_from_repo_dir(repo_dir, hook_name, project_dir, context,
 
 
 def generate_files(repo_dir, context=None, output_dir='.',
-                   overwrite_if_exists=False):
+                   overwrite_if_exists=False, skip_if_file_exists=False):
     """Render the templates and saves them to files.
 
     :param repo_dir: Project template input directory.
@@ -361,7 +366,8 @@ def generate_files(repo_dir, context=None, output_dir='.',
                     shutil.copymode(infile, outfile)
                     continue
                 try:
-                    generate_file(project_dir, infile, context, env)
+                    generate_file(project_dir, infile, context, env,
+                                  skip_if_file_exists)
                 except UndefinedError as err:
                     if delete_project_on_failure:
                         rmtree(project_dir)
diff --git a/cookiecutter/main.py b/cookiecutter/main.py
index 0250651..724d91d 100644
--- a/cookiecutter/main.py
+++ b/cookiecutter/main.py
@@ -25,7 +25,8 @@ logger = logging.getLogger(__name__)
 def cookiecutter(
         template, checkout=None, no_input=False, extra_context=None,
         replay=False, overwrite_if_exists=False, output_dir='.',
-        config_file=None, default_config=False, password=None, directory=None):
+        config_file=None, default_config=False, password=None, directory=None,
+        skip_if_file_exists=False):
     """
     Run Cookiecutter just as if using it from the command line.
 
@@ -93,6 +94,7 @@ def cookiecutter(
         repo_dir=repo_dir,
         context=context,
         overwrite_if_exists=overwrite_if_exists,
+        skip_if_file_exists=skip_if_file_exists,
         output_dir=output_dir
     )
 
diff --git a/tests/test_cli.py b/tests/test_cli.py
index a0bd142..21e6713 100644
--- a/tests/test_cli.py
+++ b/tests/test_cli.py
@@ -99,6 +99,7 @@ def test_cli_replay(mocker, cli_runner):
         False,
         replay=True,
         overwrite_if_exists=False,
+        skip_if_file_exists=False,
         output_dir='.',
         config_file=None,
         default_config=False,
@@ -134,6 +135,7 @@ def test_cli_exit_on_noinput_and_replay(mocker, cli_runner):
         True,
         replay=True,
         overwrite_if_exists=False,
+        skip_if_file_exists=False,
         output_dir='.',
         config_file=None,
         default_config=False,
@@ -169,6 +171,7 @@ def test_run_cookiecutter_on_overwrite_if_exists_and_replay(
         False,
         replay=True,
         overwrite_if_exists=True,
+        skip_if_file_exists=False,
         output_dir='.',
         config_file=None,
         default_config=False,
@@ -239,6 +242,7 @@ def test_cli_output_dir(mocker, cli_runner, output_dir_flag, output_dir):
         False,
         replay=False,
         overwrite_if_exists=False,
+        skip_if_file_exists=False,
         output_dir=output_dir,
         config_file=None,
         default_config=False,
@@ -283,6 +287,7 @@ def test_user_config(mocker, cli_runner, user_config_path):
         False,
         replay=False,
         overwrite_if_exists=False,
+        skip_if_file_exists=False,
         output_dir='.',
         config_file=user_config_path,
         default_config=False,
@@ -313,6 +318,7 @@ def test_default_user_config_overwrite(mocker, cli_runner, user_config_path):
         False,
         replay=False,
         overwrite_if_exists=False,
+        skip_if_file_exists=False,
         output_dir='.',
         config_file=user_config_path,
         default_config=True,
@@ -338,6 +344,7 @@ def test_default_user_config(mocker, cli_runner):
         False,
         replay=False,
         overwrite_if_exists=False,
+        skip_if_file_exists=False,
         output_dir='.',
         config_file=None,
         default_config=True,
diff --git a/tests/test_generate_files.py b/tests/test_generate_files.py
index 0605d90..a7d5656 100644
--- a/tests/test_generate_files.py
+++ b/tests/test_generate_files.py
@@ -210,6 +210,81 @@ def test_generate_files_permissions():
     assert tests_script_file_mode == input_script_file_mode
 
 
+@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
+def test_generate_files_with_overwrite_if_exists_with_skip_if_file_exists():
+    simple_file = 'inputpizzä/simple.txt'
+    simple_with_new_line_file = 'inputpizzä/simple-with-newline.txt'
+
+    os.makedirs('inputpizzä')
+    with open(simple_file, 'w') as f:
+        f.write('temp')
+
+    generate.generate_files(
+        context={
+            'cookiecutter': {'food': 'pizzä'}
+        },
+        repo_dir='tests/test-generate-files',
+
+        overwrite_if_exists=True,
+        skip_if_file_exists=True
+    )
+
+    assert os.path.isfile(simple_file)
+    assert os.path.isfile(simple_with_new_line_file)
+
+    simple_text = io.open(simple_file, 'rt', encoding='utf-8').read()
+    assert simple_text == u'temp'
+
+
+@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
+def test_generate_files_with_skip_if_file_exists():
+    simple_file = 'inputpizzä/simple.txt'
+    simple_with_new_line_file = 'inputpizzä/simple-with-newline.txt'
+
+    os.makedirs('inputpizzä')
+    with open(simple_file, 'w') as f:
+        f.write('temp')
+
+    with pytest.raises(exceptions.OutputDirExistsException):
+        generate.generate_files(
+            context={
+                'cookiecutter': {'food': 'pizzä'}
+            },
+            repo_dir='tests/test-generate-files',
+            skip_if_file_exists=True
+        )
+
+    assert os.path.isfile(simple_file)
+    assert not os.path.exists(simple_with_new_line_file)
+
+    simple_text = io.open(simple_file, 'rt', encoding='utf-8').read()
+    assert simple_text == u'temp'
+
+
+@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
+def test_generate_files_with_overwrite_if_exists():
+    simple_file = 'inputpizzä/simple.txt'
+    simple_with_new_line_file = 'inputpizzä/simple-with-newline.txt'
+
+    os.makedirs('inputpizzä')
+    with open(simple_file, 'w') as f:
+        f.write('temp')
+
+    generate.generate_files(
+        context={
+            'cookiecutter': {'food': 'pizzä'}
+        },
+        repo_dir='tests/test-generate-files',
+        overwrite_if_exists=True
+    )
+
+    assert os.path.isfile(simple_file)
+    assert os.path.isfile(simple_with_new_line_file)
+
+    simple_text = io.open(simple_file, 'rt', encoding='utf-8').read()
+    assert simple_text == u'I eat pizzä'
+
+
 @pytest.fixture
 def undefined_context():
     return {
diff --git a/tests/test_specify_output_dir.py b/tests/test_specify_output_dir.py
index 5e06db7..aa02d60 100644
--- a/tests/test_specify_output_dir.py
+++ b/tests/test_specify_output_dir.py
@@ -56,6 +56,7 @@ def test_api_invocation(mocker, template, output_dir, context):
         repo_dir=template,
         context=context,
         overwrite_if_exists=False,
+        skip_if_file_exists=False,
         output_dir=output_dir
     )
 
@@ -69,5 +70,6 @@ def test_default_output_dir(mocker, template, context):
         repo_dir=template,
         context=context,
         overwrite_if_exists=False,
+        skip_if_file_exists=False,
         output_dir='.'
     )
