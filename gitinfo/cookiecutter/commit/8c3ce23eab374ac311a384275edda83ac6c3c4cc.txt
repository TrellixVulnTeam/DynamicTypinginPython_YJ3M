commit 8c3ce23eab374ac311a384275edda83ac6c3c4cc
Author: Michael Joseph <michaeljoseph+github@gmail.com>
Date:   Thu Aug 7 11:08:59 2014 +0200

    Add extra_context parameter and apply override

diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 89bb4d7..95f4072 100755
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -33,14 +33,16 @@ else:
     from collections import OrderedDict
 
 
-def generate_context(context_file='cookiecutter.json', default_context=None):
+def generate_context(context_file='cookiecutter.json', default_context=None,
+                     extra_context=None):
     """
     Generates the context for a Cookiecutter project template.
     Loads the JSON file as a Python object, with key being the JSON filename.
 
     :param context_file: JSON file containing key/value pairs for populating
         the cookiecutter's variables.
-    :param config_dict: Dict containing any config to take into account.
+    :param default_context: Dictionary containing any config to take into account.
+    :param extra_context: Dictionary containing configuration overrides
     """
 
     context = {}
@@ -57,6 +59,8 @@ def generate_context(context_file='cookiecutter.json', default_context=None):
     # user's global config, if available
     if default_context:
         obj.update(default_context)
+    if extra_context:
+        obj.update(extra_context)
 
     logging.debug('Context generated is {0}'.format(context))
     return context
diff --git a/cookiecutter/main.py b/cookiecutter/main.py
index 87402cf..cd049e0 100755
--- a/cookiecutter/main.py
+++ b/cookiecutter/main.py
@@ -26,13 +26,16 @@ from .vcs import clone
 logger = logging.getLogger(__name__)
 
 
-def cookiecutter(input_dir, checkout=None, no_input=False):
+def cookiecutter(input_dir, checkout=None, no_input=False, extra_context=None):
     """
     API equivalent to using Cookiecutter at the command line.
 
     :param input_dir: A directory containing a project template dir,
-        or a URL to git repo.
-    :param checkout: The branch, tag or commit ID to checkout after clone
+        or a URL to a git repository.
+    :param checkout: The branch, tag or commit ID to checkout after clone.
+    :param no_input: Prompt the user at command line for manual configuration?
+    :param extra_context: A dictionary of context that overrides default
+        and user configuration.
     """
 
     # Get user config from ~/.cookiecutterrc or equivalent
@@ -55,7 +58,8 @@ def cookiecutter(input_dir, checkout=None, no_input=False):
 
     context = generate_context(
         context_file=context_file,
-        default_context=config_dict['default_context']
+        default_context=config_dict['default_context'],
+        extra_context=extra_context,
     )
 
     # prompt the user to manually configure at the command line.
diff --git a/docs/advanced_usage.rst b/docs/advanced_usage.rst
index 0c5ebee..dcd6899 100644
--- a/docs/advanced_usage.rst
+++ b/docs/advanced_usage.rst
@@ -73,8 +73,18 @@ This is useful if, for example, you're writing a web framework and need to
 provide developers with a tool similar to `django-admin.py startproject` or
 `npm init`.
 
-See the :ref:`API Reference <apiref>` for more details.
+It is also possible to specify an `extra_context` dictionary that will override values from `cookiecutter.json` or `.cookiecutterrc`::
+
+    cookiecutter('cookiecutter-pypackage/',
+                 extra_context={'project_name': 'TheGreatest'})
+
+If you combine that with the no_input parameter, you can programmatically create the project with a set list of context parameters and without any command line prompts::
 
+    cookiecutter('cookiecutter-pypackage/',
+                 no_input=True,
+                 extra_context={'project_name': 'TheGreatest'})
+
+See the :ref:`API Reference <apiref>` for more details.
 
 .. _command_line_options:
 
