commit aa1e7ebe0b92fbfcaebe4b31bf8dd12ded20e4d2
Author: Rémy HUBSCHER <remy.hubscher@novapost.fr>
Date:   Tue Mar 4 15:21:33 2014 +0100

    Add tox to check the PEP8 + Fix current code PEP8.

diff --git a/AUTHORS.rst b/AUTHORS.rst
index 1cbce20..b50f2c7 100644
--- a/AUTHORS.rst
+++ b/AUTHORS.rst
@@ -56,6 +56,7 @@ Contributors
 * Mishbah Razzaque (`@mishbahr`_)
 * Robin Andeer (`@robinandeer`_)
 * Rachel Sanders (`@trustrachel`_)
+* Rémy Hubscher (`@Natim`_)
 
 .. _`@vincentbernat`: https://github.com/vincentbernat
 .. _`@audreyr`: https://github.com/audreyr
@@ -100,3 +101,4 @@ Contributors
 .. _`@mishbahr`: https://github.com/mishbahr
 .. _`@robinandeer`: https://github.com/robinandeer
 .. _`@trustrachel`: https://github.com/trustrachel
+.. _`@Natim`: https://github.com/Natim
diff --git a/cookiecutter/exceptions.py b/cookiecutter/exceptions.py
index 091024b..9223999 100755
--- a/cookiecutter/exceptions.py
+++ b/cookiecutter/exceptions.py
@@ -23,30 +23,35 @@ class NonTemplatedInputDirException(CookiecutterException):
     rendered to something else, so that input_dir != output_dir.
     """
 
+
 class UnknownTemplateDirException(CookiecutterException):
     """
     Raised when Cookiecutter cannot determine which directory is the project
     template, e.g. more than one dir appears to be a template dir.
     """
 
+
 class MissingProjectDir(CookiecutterException):
     """
     Raised during cleanup when remove_repo() can't find a generated project
     directory inside of a repo.
     """
 
+
 class ConfigDoesNotExistException(CookiecutterException):
     """
     Raised when get_config() is passed a path to a config file, but no file
     is found at that path.
     """
 
+
 class InvalidConfiguration(CookiecutterException):
     """
     Raised if the global configuration file is not valid YAML or is
     badly contructed.
     """
 
+
 class UnknownRepoType(CookiecutterException):
     """
     Raised if a repo's type cannot be determined.
diff --git a/cookiecutter/find.py b/cookiecutter/find.py
index ca1e25d..ab087e4 100755
--- a/cookiecutter/find.py
+++ b/cookiecutter/find.py
@@ -17,26 +17,27 @@ from .exceptions import NonTemplatedInputDirException
 def find_template(repo_dir):
     """
     Determines which child directory of `repo_dir` is the project template.
-    
+
     :param repo_dir: Local directory of newly cloned repo.
     :returns project_template: Relative path to project template.
     """
 
     logging.debug('Searching {0} for the project template.'.format(repo_dir))
-    
+
     repo_dir_contents = os.listdir(repo_dir)
 
     project_template = None
     for item in repo_dir_contents:
         if 'cookiecutter' in item and \
-            '{{' in item and \
-            '}}' in item:
+                '{{' in item and \
+                '}}' in item:
             project_template = item
             break
 
     if project_template:
         project_template = os.path.join(repo_dir, project_template)
-        logging.debug('The project template appears to be {0}'.format(project_template))
+        logging.debug('The project template appears to be {0}'.format(
+            project_template))
         return project_template
     else:
-        raise NonTemplatedInputDirException
\ No newline at end of file
+        raise NonTemplatedInputDirException
diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index b3751c9..352031f 100755
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -41,7 +41,7 @@ def generate_context(context_file='cookiecutter.json', default_context=None,
 
     :param context_file: JSON file containing key/value pairs for populating
         the cookiecutter's variables.
-    :param default_context: Dictionary containing any config to take into account.
+    :param default_context: Dictionary containing config to take into account.
     :param extra_context: Dictionary containing configuration overrides
     """
 
@@ -127,7 +127,8 @@ def generate_file(project_dir, infile, context, env):
 
 def render_and_create_dir(dirname, context, output_dir):
     """
-    Renders the name of a directory, creates the directory, and returns its path.
+    Renders the name of a directory, creates the directory, and
+    returns its path.
     """
 
     name_tmpl = Template(dirname)
@@ -148,7 +149,7 @@ def ensure_dir_is_templated(dirname):
     Ensures that dirname is a templated directory name.
     """
     if '{{' in dirname and \
-        '}}' in dirname:
+            '}}' in dirname:
         return True
     else:
         raise NonTemplatedInputDirException
@@ -191,7 +192,8 @@ def generate_files(repo_dir, context=None, output_dir="."):
 
         for root, dirs, files in os.walk("."):
             for d in dirs:
-                unrendered_dir = os.path.join(project_dir, os.path.join(root, d))
+                unrendered_dir = os.path.join(project_dir,
+                                              os.path.join(root, d))
                 render_and_create_dir(unrendered_dir, context, output_dir)
 
             for f in files:
diff --git a/cookiecutter/hooks.py b/cookiecutter/hooks.py
index 1119562..afe5e4e 100755
--- a/cookiecutter/hooks.py
+++ b/cookiecutter/hooks.py
@@ -13,14 +13,13 @@ import os
 import subprocess
 import sys
 
-from .utils import make_sure_path_exists, work_in
-
 _HOOKS = [
     'pre_gen_project',
     'post_gen_project',
     # TODO: other hooks should be listed here
 ]
 
+
 def find_hooks():
     '''
     Must be called with the project template as the current working directory.
@@ -60,10 +59,11 @@ def _run_hook(script_path, cwd='.'):
     )
     proc.wait()
 
+
 def run_hook(hook_name, project_dir):
     '''
-    Try and find a script mapped to `hook_name` in the current working directory,
-    and execute it from `project_dir`.
+    Try and find a script mapped to `hook_name` in the current working
+    directory, and execute it from `project_dir`.
     '''
     script = find_hooks().get(hook_name)
     if script is None:
diff --git a/cookiecutter/main.py b/cookiecutter/main.py
index 9effcad..b929078 100755
--- a/cookiecutter/main.py
+++ b/cookiecutter/main.py
@@ -51,7 +51,8 @@ def cookiecutter(input_dir, checkout=None, no_input=False, extra_context=None):
             no_input=no_input
         )
     else:
-        # If it's a local repo, no need to clone or copy to your cookiecutters_dir
+        # If it's a local repo, no need to clone or copy to your
+        # cookiecutters_dir
         repo_dir = input_dir
 
     context_file = os.path.join(repo_dir, 'cookiecutter.json')
@@ -93,7 +94,9 @@ def _get_parser():
         '-c', '--checkout',
         help='branch, tag or commit to checkout after git clone'
     )
-    cookiecutter_pkg_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+    cookiecutter_pkg_dir = os.path.dirname(
+        os.path.dirname(os.path.abspath(__file__))
+    )
     parser.add_argument(
         '-V', '--version',
         help="Show version information and exit.",
@@ -112,6 +115,7 @@ def _get_parser():
 
     return parser
 
+
 def parse_cookiecutter_args(args):
     """ Parse the command-line arguments to Cookiecutter. """
     parser = _get_parser()
@@ -124,7 +128,8 @@ def main():
     args = parse_cookiecutter_args(sys.argv[1:])
 
     if args.verbose:
-        logging.basicConfig(format='%(levelname)s %(filename)s: %(message)s', level=logging.DEBUG)
+        logging.basicConfig(format='%(levelname)s %(filename)s: %(message)s',
+                            level=logging.DEBUG)
     else:
         # Log info and above to console
         logging.basicConfig(
diff --git a/cookiecutter/prompt.py b/cookiecutter/prompt.py
index 8ae6d9d..16712bb 100755
--- a/cookiecutter/prompt.py
+++ b/cookiecutter/prompt.py
@@ -14,6 +14,7 @@ import sys
 PY3 = sys.version > '3'
 if PY3:
     iteritems = lambda d: iter(d.items())
+
     def read_response(prompt=''):
         """
         Prompt the user for a response.
diff --git a/cookiecutter/utils.py b/cookiecutter/utils.py
index df75922..75b9be5 100755
--- a/cookiecutter/utils.py
+++ b/cookiecutter/utils.py
@@ -12,7 +12,6 @@ from __future__ import unicode_literals
 import errno
 import logging
 import os
-import sys
 import stat
 import shutil
 import contextlib
diff --git a/cookiecutter/vcs.py b/cookiecutter/vcs.py
index 8688601..0d4aba2 100755
--- a/cookiecutter/vcs.py
+++ b/cookiecutter/vcs.py
@@ -77,7 +77,8 @@ def clone(repo_url, checkout=None, clone_to_dir=".", no_input=False):
 
     tail = os.path.split(repo_url)[1]
     if repo_type == "git":
-        repo_dir = os.path.normpath(os.path.join(clone_to_dir, tail.rsplit('.git')[0]))
+        repo_dir = os.path.normpath(os.path.join(clone_to_dir,
+                                                 tail.rsplit('.git')[0]))
     elif repo_type == "hg":
         repo_dir = os.path.normpath(os.path.join(clone_to_dir, tail))
     logging.debug('repo_dir is {0}'.format(repo_dir))
@@ -88,6 +89,7 @@ def clone(repo_url, checkout=None, clone_to_dir=".", no_input=False):
     if repo_type in ["git", "hg"]:
         subprocess.check_call([repo_type, 'clone', repo_url], cwd=clone_to_dir)
         if checkout is not None:
-            subprocess.check_call([repo_type, 'checkout', checkout], cwd=repo_dir)
+            subprocess.check_call([repo_type, 'checkout', checkout],
+                                  cwd=repo_dir)
 
     return repo_dir
diff --git a/tox.ini b/tox.ini
index 91fd994..fb7cf18 100644
--- a/tox.ini
+++ b/tox.ini
@@ -1,5 +1,5 @@
 [tox]
-envlist = py26, py27, py33, py34, pypy
+envlist = py26, py27, py33, py34, pypy, flake8
 
 [testenv:py26]
 deps = -r{toxinidir}/requirements/test_26.txt
@@ -16,3 +16,9 @@ commands = python setup.py test
 [testenv:py34]
 deps = -r{toxinidir}/requirements/test_34.txt
 commands = python setup.py test
+
+[testenv:flake8]
+deps =
+    flake8
+commands =
+    flake8 cookiecutter
