commit f4205a973e898dcaf841c1f03b68a2c614b76618
Author: L. Guruprasad <lgp171188@gmail.com>
Date:   Fri Sep 4 00:19:47 2015 +0530

    Add a flag to overwrite existing output directory
    
    Fix issue #493 and allow the user to alter the default behaviour
    of not overwriting the contents of the output directory if it
    already exists. Fix issue #475 by removing the conflicting
    use of 'fail_if_exists' arguments and refactoring it.

diff --git a/cookiecutter/cli.py b/cookiecutter/cli.py
index 987cd6e..de80d1b 100755
--- a/cookiecutter/cli.py
+++ b/cookiecutter/cli.py
@@ -61,7 +61,11 @@ def print_version(context, param, value):
     help='Do not prompt for parameters and only use information entered '
          'previously',
 )
-def main(template, no_input, checkout, verbose, replay):
+@click.option(
+    '-f', '--overwrite-if-exists', is_flag=True,
+    help='Overwrite the contents of the output directory if it already exists'
+)
+def main(template, no_input, checkout, verbose, replay, overwrite_if_exists):
     """Create a project from a Cookiecutter project template (TEMPLATE)."""
     if verbose:
         logging.basicConfig(
@@ -76,7 +80,8 @@ def main(template, no_input, checkout, verbose, replay):
         )
 
     try:
-        cookiecutter(template, checkout, no_input, replay=replay)
+        cookiecutter(template, checkout, no_input, replay=replay,
+                     overwrite_if_exists=overwrite_if_exists)
     except (OutputDirExistsException, InvalidModeException) as e:
         click.echo(e)
         sys.exit(1)
diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 8bc63a3..2707ad0 100755
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -152,7 +152,8 @@ def generate_file(project_dir, infile, context, env):
     shutil.copymode(infile, outfile)
 
 
-def render_and_create_dir(dirname, context, output_dir, fail_if_exists=False):
+def render_and_create_dir(dirname, context, output_dir,
+                          overwrite_if_exists=False):
     """
     Renders the name of a directory, creates the directory, and
     returns its path.
@@ -168,8 +169,14 @@ def render_and_create_dir(dirname, context, output_dir, fail_if_exists=False):
         os.path.join(output_dir, rendered_dirname)
     )
 
-    if fail_if_exists:
-        if os.path.exists(dir_to_create):
+    output_dir_exists = os.path.exists(dir_to_create)
+
+    if overwrite_if_exists:
+        if output_dir_exists:
+            logging.debug('Output directory {} already exists,'
+                          'overwriting it'.format(dir_to_create))
+    else:
+        if output_dir_exists:
             msg = 'Error: "{}" directory already exists'.format(dir_to_create)
             raise OutputDirExistsException(msg)
 
@@ -187,13 +194,16 @@ def ensure_dir_is_templated(dirname):
         raise NonTemplatedInputDirException
 
 
-def generate_files(repo_dir, context=None, output_dir='.'):
+def generate_files(repo_dir, context=None, output_dir='.',
+                   overwrite_if_exists=False):
     """
     Renders the templates and saves them to files.
 
     :param repo_dir: Project template input directory.
     :param context: Dict for populating the template's variables.
     :param output_dir: Where to output the generated project dir into.
+    :param overwrite_if_exists: Overwrite teh contents of the output directory
+        if it exists
     """
 
     template_dir = find_template(repo_dir)
@@ -205,7 +215,7 @@ def generate_files(repo_dir, context=None, output_dir='.'):
     project_dir = render_and_create_dir(unrendered_dir,
                                         context,
                                         output_dir,
-                                        fail_if_exists=True)
+                                        overwrite_if_exists)
 
     # We want the Jinja path and the OS paths to match. Consequently, we'll:
     #   + CD to the template folder
@@ -256,7 +266,8 @@ def generate_files(repo_dir, context=None, output_dir='.'):
             dirs[:] = render_dirs
             for d in dirs:
                 unrendered_dir = os.path.join(project_dir, root, d)
-                render_and_create_dir(unrendered_dir, context, output_dir)
+                render_and_create_dir(unrendered_dir, context, output_dir,
+                                      overwrite_if_exists)
 
             for f in files:
                 infile = os.path.normpath(os.path.join(root, f))
diff --git a/cookiecutter/main.py b/cookiecutter/main.py
index 415aa6e..58e79ff 100755
--- a/cookiecutter/main.py
+++ b/cookiecutter/main.py
@@ -70,8 +70,8 @@ def expand_abbreviations(template, config_dict):
 
 
 def cookiecutter(
-        template,
-        checkout=None, no_input=False, extra_context=None, replay=False):
+        template, checkout=None, no_input=False, extra_context=None,
+        replay=False, overwrite_if_exists=False):
     """
     API equivalent to using Cookiecutter at the command line.
 
@@ -81,11 +81,14 @@ def cookiecutter(
     :param no_input: Prompt the user at command line for manual configuration?
     :param extra_context: A dictionary of context that overrides default
         and user configuration.
+    :param: overwrite_if_exists: Overwrite the contents of output directory
+        if it exists
     """
-    if replay and ((no_input is not False) or (extra_context is not None)):
+    if replay and ((no_input is not False) or (extra_context is not None) or
+                   (overwrite_if_exists is not False)):
         err_msg = (
-            "You can not use both replay and no_input or extra_context "
-            "at the same time."
+            "You can not use replay with no_input, extra_context"
+            " or overwrite_if_exists"
         )
         raise InvalidModeException(err_msg)
 
@@ -130,5 +133,6 @@ def cookiecutter(
     # Create project from local context and project template.
     generate_files(
         repo_dir=repo_dir,
-        context=context
+        context=context,
+        overwrite_if_exists=overwrite_if_exists
     )
diff --git a/tests/test_cli.py b/tests/test_cli.py
index 7fc4533..9e9c8e5 100644
--- a/tests/test_cli.py
+++ b/tests/test_cli.py
@@ -76,7 +76,8 @@ def test_cli_replay(mocker):
         template_path,
         None,
         False,
-        replay=True
+        replay=True,
+        overwrite_if_exists=False
     )
 
 
@@ -98,14 +99,66 @@ def test_cli_exit_on_noinput_and_replay(mocker):
     assert result.exit_code == 1
 
     expected_error_msg = (
-        "You can not use both replay and no_input or extra_context "
-        "at the same time."
+        "You can not use replay with no_input, extra_context or"
+        " overwrite_if_exists"
     )
+
     assert expected_error_msg in result.output
 
     mock_cookiecutter.assert_called_once_with(
         template_path,
         None,
         True,
-        replay=True
+        replay=True,
+        overwrite_if_exists=False
+    )
+
+@pytest.mark.usefixtures('remove_fake_project_dir')
+def test_cli_exit_on_overwrite_if_exists_and_replay(mocker):
+    mock_cookiecutter = mocker.patch(
+        'cookiecutter.cli.cookiecutter',
+        side_effect=cookiecutter
+    )
+
+    template_path = 'tests/fake-repo-pre/'
+    result = runner.invoke(main, [
+        template_path,
+        '--replay',
+        '-v',
+        '-f',
+    ])
+
+    assert result.exit_code == 1
+
+    expected_error_msg = (
+        "You can not use replay with no_input, extra_context or"
+        " overwrite_if_exists"
+    )
+
+    assert expected_error_msg in result.output
+
+    mock_cookiecutter.assert_called_once_with(
+        template_path,
+        None,
+        False,
+        replay=True,
+        overwrite_if_exists=True
     )
+
+
+@pytest.mark.usefixtures('remove_fake_project_dir')
+def test_cli_overwrite_if_exists_when_output_dir_does_not_exist():
+    if os.path.isdir('fake-project'):
+        utils.rmtree('fake-project')
+
+    result = runner.invoke(main, ['tests/fake-repo-pre/', '--no-input', '-f'])
+
+    assert result.exit_code == 0
+    assert os.path.isdir('fake-project')
+
+
+@pytest.mark.usefixtures('make_fake_project_dir', 'remove_fake_project_dir')
+def test_cli_overwrite_if_exists_when_output_dir_exists():
+    result = runner.invoke(main, ['tests/fake-repo-pre/', '--no-input', '-f'])
+    assert result.exit_code == 0
+    assert os.path.isdir('fake-project')
