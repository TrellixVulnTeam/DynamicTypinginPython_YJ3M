commit cf19c6d9babd23bccd80ef8306f37ff8fe05fc5c
Author: Paul Moore <p.f.moore@gmail.com>
Date:   Tue Aug 26 13:57:13 2014 +0100

    Unify the terms alias and prefix as one term, abbreviation

diff --git a/README.rst b/README.rst
index 9717b6b..cbbbbdc 100644
--- a/README.rst
+++ b/README.rst
@@ -47,7 +47,7 @@ Did someone say features?
         # You'll be prompted to enter values.
         # Then it'll create your Python package in the current working directory,
         # based on those values.
-        $ cookiecutter https://github.com/audreyr/cookiecutter-pypackage.git
+        $ cookiecutter gh:audreyr/cookiecutter-pypackage
 
 * Can also use it at the command line with a local template:
 
diff --git a/cookiecutter/main.py b/cookiecutter/main.py
index f561593..9381922 100755
--- a/cookiecutter/main.py
+++ b/cookiecutter/main.py
@@ -25,22 +25,31 @@ from .vcs import clone
 
 logger = logging.getLogger(__name__)
 
-builtin_prefixes = {
+builtin_abbreviations = {
     'gh': 'https://github.com/{0}.git',
     'bb': 'https://bitbucket.org/{0}',
 }
 
-def expand_aliases(input_dir, config_dict):
-    aliases = config_dict.get('aliases', {})
-    prefixes = builtin_prefixes.copy()
-    prefixes.update(config_dict.get('prefixes', {}))
+def expand_abbreviations(input_dir, config_dict):
+    """
+    Expand abbreviations in a template name.
+
+    :param input_dir: The project template name.
+    :param config_dict: The user config, which will contain abbreviation
+        definitions.
+    """
+
+    abbreviations = builtin_abbreviations.copy()
+    abbreviations.update(config_dict.get('abbreviations', {}))
 
-    if input_dir in aliases:
-        return aliases[input_dir]
+    if input_dir in abbreviations:
+        return abbreviations[input_dir]
 
+    # Split on colon. If there is no colon, rest will be empty
+    # and prefix will be the whole input_dir
     prefix, sep, rest = input_dir.partition(':')
-    if sep and prefix in prefixes:
-        return prefixes[prefix].replace('{0}', rest)
+    if prefix in abbreviations:
+        return abbreviations[prefix].format(rest)
 
     return input_dir
 
@@ -58,7 +67,7 @@ def cookiecutter(input_dir, checkout=None, no_input=False):
     # If no config file, sensible defaults from config.DEFAULT_CONFIG are used
     config_dict = get_user_config()
 
-    input_dir = expand_aliases(input_dir, config_dict)
+    input_dir = expand_abbreviations(input_dir, config_dict)
 
     # TODO: find a better way to tell if it's a repo URL
     if "git@" in input_dir or "https://" in input_dir:
diff --git a/docs/advanced_usage.rst b/docs/advanced_usage.rst
index f30a5c2..99226ba 100644
--- a/docs/advanced_usage.rst
+++ b/docs/advanced_usage.rst
@@ -47,9 +47,8 @@ If you use Cookiecutter a lot, you'll find it useful to have a
         email: "audreyr@gmail.com"
         github_username: "audreyr"
     cookiecutters_dir: "/home/audreyr/my-custom-cookiecutters-dir/"
-    aliases:
+    abbreviations:
         pp: https://github.com/audreyr/cookiecutter-pypackage.git
-    prefixes:
         gh: https://github.com/{0}.git
         bb: https://bitbucket.org/{0}
 
@@ -60,13 +59,12 @@ Possible settings are:
   like the defaults in `cookiecutter.json`, upon generation of any project.
 * cookiecutters_dir: Directory where your cookiecutters are cloned to when you
   use Cookiecutter with a repo argument.
-* aliases: A list of short names for cookiecutters. With the above aliases, you
-  could use the `cookiecutter-pypackage` template simply by saying `cookiecutter pp`.
-* prefixes: A list of URL-like prefixes that can be used to abbreviate common
-  locations for cookiecutters. The `{0}` will be replaced with the part of the
-  argument after the prefix. So, for example,
-  `gh:audreyr/cookiecutter-pypackage` is a short form for
-  `https://github.com/audreyr/cookiecutter-pypackage.git`.
+* abbreviations: A list of abbreviations for cookiecutters. Abbreviations can
+  be simple aliases for a repo name, or can be used as a prefix, in the form
+  `abbr:suffix`. Any suffix will be inserted into the expansion in place of
+  the text `{0}`, using standard Python string formatting.  With the above
+  aliases, you could use the `cookiecutter-pypackage` template simply by saying
+  `cookiecutter pp`, or `cookiecutter gh:audreyr/cookiecutter-pypackage`.
   The `gh` (github) and `bb` (bitbucket) abbreviations shown above are actually
   built in, and can be used without defining them yourself.
 
diff --git a/docs/usage.rst b/docs/usage.rst
index 26244d5..6395d8e 100644
--- a/docs/usage.rst
+++ b/docs/usage.rst
@@ -40,6 +40,11 @@ Works directly with git repos too
 
 To create a project from the cookiecutter-pypackage.git repo template::
 
+    $ cookiecutter gh:audreyr/cookiecutter-pypackage
+
+Cookiecutter knows abbreviations for Github (``gh``) and Bitbucket (``bb``)
+projects, but you can also give it the full URL to any repository::
+
     $ cookiecutter https://github.com/audreyr/cookiecutter-pypackage.git
 
 You will be prompted to enter a bunch of project config values. (These are
diff --git a/tests/test_main.py b/tests/test_main.py
index 2cee8b8..18b6b0f 100755
--- a/tests/test_main.py
+++ b/tests/test_main.py
@@ -95,35 +95,39 @@ class TestArgParsing(unittest.TestCase):
         self.assertEqual(args.checkout, 'develop')
 
 
-class TestArgParsing(unittest.TestCase):
+class TestAbbreviationExpansion(unittest.TestCase):
 
-    def test_alias_expansion(self):
-        input_dir = main.expand_aliases('foo', {'aliases': {'foo': 'bar'}})
+    def test_abbreviation_expansion(self):
+        input_dir = main.expand_abbreviations('foo', {'abbreviations': {'foo': 'bar'}})
         self.assertEqual(input_dir, 'bar')
 
-    def test_alias_expansion_not_an_alias(self):
-        input_dir = main.expand_aliases('baz', {'aliases': {'foo': 'bar'}})
+    def test_abbreviation_expansion_not_an_abbreviation(self):
+        input_dir = main.expand_abbreviations('baz', {'abbreviations': {'foo': 'bar'}})
         self.assertEqual(input_dir, 'baz')
 
-    def test_alias_expansion_prefix(self):
-        input_dir = main.expand_aliases('xx:a', {'prefixes': {'xx': '<{0}>'}})
+    def test_abbreviation_expansion_prefix(self):
+        input_dir = main.expand_abbreviations('xx:a', {'abbreviations': {'xx': '<{0}>'}})
         self.assertEqual(input_dir, '<a>')
 
-    def test_alias_expansion_builtin(self):
-        input_dir = main.expand_aliases('gh:a', {})
+    def test_abbreviation_expansion_builtin(self):
+        input_dir = main.expand_abbreviations('gh:a', {})
         self.assertEqual(input_dir, 'https://github.com/a.git')
 
-    def test_alias_expansion_override_builtin(self):
-        input_dir = main.expand_aliases('gh:a', {'prefixes': {'gh': '<{0}>'}})
+    def test_abbreviation_expansion_override_builtin(self):
+        input_dir = main.expand_abbreviations('gh:a', {'abbreviations': {'gh': '<{0}>'}})
         self.assertEqual(input_dir, '<a>')
 
-    def test_alias_expansion_prefix_ignores_suffix(self):
-        input_dir = main.expand_aliases('xx:a', {'prefixes': {'xx': '<>'}})
+    def test_abbreviation_expansion_prefix_ignores_suffix(self):
+        input_dir = main.expand_abbreviations('xx:a', {'abbreviations': {'xx': '<>'}})
         self.assertEqual(input_dir, '<>')
 
-    def test_alias_expansion_prefix_not_0_in_braces(self):
-        input_dir = main.expand_aliases('xx:a', {'prefixes': {'xx': '{1}'}})
-        self.assertEqual(input_dir, '{1}')
+    def test_abbreviation_expansion_prefix_not_0_in_braces(self):
+        self.assertRaises(
+            IndexError,
+            main.expand_abbreviations,
+            'xx:a',
+            {'abbreviations': {'xx': '{1}'}}
+        )
 
 
 @unittest.skipIf(condition=no_network, reason='Needs a network connection to GitHub/Bitbucket.')
