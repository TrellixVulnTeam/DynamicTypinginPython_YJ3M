commit 2c7449261910b7fab4a2da14159957f379041e8a
Author: Raphael Pierzina <raphael@hackebrot.de>
Date:   Thu Dec 1 21:58:20 2016 +0000

    Improve handling for default config values

diff --git a/cookiecutter/cli.py b/cookiecutter/cli.py
index 6db44a0..e403f02 100644
--- a/cookiecutter/cli.py
+++ b/cookiecutter/cli.py
@@ -14,7 +14,6 @@ import json
 import click
 
 from cookiecutter import __version__
-from cookiecutter.config import USER_CONFIG_PATH
 from cookiecutter.log import configure_logger
 from cookiecutter.main import cookiecutter
 from cookiecutter.exceptions import (
@@ -80,7 +79,7 @@ def validate_extra_context(ctx, param, value):
     help=u'Where to output the generated project dir into'
 )
 @click.option(
-    u'--config-file', type=click.Path(), default=USER_CONFIG_PATH,
+    u'--config-file', type=click.Path(), default=None,
     help=u'User configuration file'
 )
 @click.option(
@@ -109,15 +108,14 @@ def main(
     )
 
     try:
-        user_config = None if default_config else config_file
-
         cookiecutter(
             template, checkout, no_input,
             extra_context=extra_context,
             replay=replay,
             overwrite_if_exists=overwrite_if_exists,
             output_dir=output_dir,
-            config_file=user_config
+            config_file=config_file,
+            default_config=default_config,
         )
     except (OutputDirExistsException,
             InvalidModeException,
diff --git a/cookiecutter/config.py b/cookiecutter/config.py
index 48055e4..5e8762e 100644
--- a/cookiecutter/config.py
+++ b/cookiecutter/config.py
@@ -73,13 +73,13 @@ def get_config(config_path):
     return config_dict
 
 
-def get_user_config(config_file=USER_CONFIG_PATH):
+def get_user_config(config_file=None, default_config=False):
     """Retrieve the config from a file or return the defaults if None is
     passed. If an environment variable `COOKIECUTTER_CONFIG` is set up, try
     to load its value. Otherwise fall back to a default file or config.
     """
     # Do NOT load a config. Return defaults instead.
-    if config_file is None:
+    if default_config:
         return copy.copy(DEFAULT_CONFIG)
 
     # Load the given config file
diff --git a/cookiecutter/main.py b/cookiecutter/main.py
index 5a15ba4..fd3f1e6 100644
--- a/cookiecutter/main.py
+++ b/cookiecutter/main.py
@@ -14,7 +14,7 @@ from __future__ import unicode_literals
 import logging
 import os
 
-from .config import get_user_config, USER_CONFIG_PATH
+from .config import get_user_config
 from .generate import generate_context, generate_files
 from .exceptions import InvalidModeException
 from .prompt import prompt_for_config
@@ -27,7 +27,7 @@ logger = logging.getLogger(__name__)
 def cookiecutter(
         template, checkout=None, no_input=False, extra_context=None,
         replay=False, overwrite_if_exists=False, output_dir='.',
-        config_file=USER_CONFIG_PATH):
+        config_file=None, default_config=False):
     """
     API equivalent to using Cookiecutter at the command line.
 
@@ -41,6 +41,7 @@ def cookiecutter(
         if it exists
     :param output_dir: Where to output the generated project dir into.
     :param config_file: User configuration file path.
+    :param default_config: Use default values rather than a config file.
     """
     if replay and ((no_input is not False) or (extra_context is not None)):
         err_msg = (
@@ -49,9 +50,10 @@ def cookiecutter(
         )
         raise InvalidModeException(err_msg)
 
-    # Get user config from ~/.cookiecutterrc or equivalent
-    # If no config file, sensible defaults from config.DEFAULT_CONFIG are used
-    config_dict = get_user_config(config_file=config_file)
+    config_dict = get_user_config(
+        config_file=config_file,
+        default_config=default_config,
+    )
 
     repo_dir = determine_repo_dir(
         template=template,
