commit ae7703266c509324e099d353afc1e38bc7ebe104
Author: Audrey Roy <audreyr@gmail.com>
Date:   Sun Sep 1 15:56:15 2013 +0200

    Modify find_hooks to work with work_in() change.

diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 7140a0a..45c682c 100755
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -154,7 +154,7 @@ def generate_files(template_dir, context=None):
         env.loader = FileSystemLoader(".")
 
         # run pre-gen hook
-        run_hook('pre_gen_project', template_dir, output_dir)
+        run_hook('pre_gen_project', output_dir)
 
         for root, dirs, files in os.walk("."):
             for d in dirs:
@@ -173,4 +173,4 @@ def generate_files(template_dir, context=None):
                 generate_file(output_dir, infile, context, env)
 
         # run post-gen hook
-        run_hook('post_gen_project', template_dir, output_dir)
+        run_hook('post_gen_project', output_dir)
diff --git a/cookiecutter/hooks.py b/cookiecutter/hooks.py
index e755311..a97138e 100755
--- a/cookiecutter/hooks.py
+++ b/cookiecutter/hooks.py
@@ -24,17 +24,19 @@ _HOOKS = [
     # TODO: other hooks should be listed here
 ]
 
-def find_hooks(template_root):
+def find_hooks():
     '''
-    Return a dict of all hook scripts provided with the template located at
-    `template_root`.
+    Must be called with the project template as the current working directory.
+    Returns a dict of all hook scripts provided.
     Dict's key will be the hook/script's name, without extension, while
     values will be the absolute path to the script.
     Missing scripts will not be included in the returned dict.
     '''
-    hooks_dir = os.path.join(template_root, 'hooks')
+    hooks_dir = 'hooks'
     r = {}
+    logging.debug("hooks_dir is {0}".format(hooks_dir))
     if not os.path.isdir(hooks_dir):
+        logging.debug("No hooks/ dir in template_dir")
         return r
     for f in os.listdir(hooks_dir):
         basename = os.path.splitext(os.path.basename(f))[0]
@@ -52,12 +54,12 @@ def _run_hook(script_path, cwd='.'):
     subprocess.call(script_path, cwd=cwd)
 
 
-def run_hook(hook_name, input_dir, output_dir):
+def run_hook(hook_name, output_dir):
     '''
     Try and find a script mapped to `hook_name` in `input_dir`,
     and execute it with the current working directory.
     '''
-    script = find_hooks(input_dir).get(hook_name)
+    script = find_hooks().get(hook_name)
     if script is None:
         logging.debug("No hooks found")
         return
