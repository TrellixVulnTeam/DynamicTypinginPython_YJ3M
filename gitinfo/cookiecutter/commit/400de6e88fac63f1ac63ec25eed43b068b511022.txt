commit 400de6e88fac63f1ac63ec25eed43b068b511022
Author: Andrey Shpak <insspb@users.noreply.github.com>
Date:   Sat Apr 18 19:34:44 2020 +0300

    tests: docstrings for invocation test files (#1375)
    
    * Added: docstrings for cookiecutter invocation files
    
    * Updated: test_cookiecutter_invocation docstrings + new setup/teardown

diff --git a/tests/test_cookiecutter_invocation.py b/tests/test_cookiecutter_invocation.py
index f0e56b6..507b392 100644
--- a/tests/test_cookiecutter_invocation.py
+++ b/tests/test_cookiecutter_invocation.py
@@ -16,7 +16,17 @@ import pytest
 from cookiecutter import utils
 
 
+@pytest.fixture
+def project_dir():
+    """Return test project folder name and remove it after the test."""
+    yield 'fake-project-templated'
+
+    if os.path.isdir('fake-project-templated'):
+        utils.rmtree('fake-project-templated')
+
+
 def test_should_raise_error_without_template_arg(monkeypatch, capfd):
+    """Verify expected error in command line on invocation without arguments."""
     monkeypatch.setenv('PYTHONPATH', '.')
 
     with pytest.raises(subprocess.CalledProcessError):
@@ -27,29 +37,17 @@ def test_should_raise_error_without_template_arg(monkeypatch, capfd):
     assert exp_message in err and "TEMPLATE" in err
 
 
-@pytest.fixture
-def project_dir(request):
-    """Remove the rendered project directory created by the test."""
-    rendered_dir = 'fake-project-templated'
-
-    def remove_generated_project():
-        if os.path.isdir(rendered_dir):
-            utils.rmtree(rendered_dir)
-    request.addfinalizer(remove_generated_project)
-
-    return rendered_dir
-
-
 @pytest.mark.usefixtures('clean_system')
 def test_should_invoke_main(monkeypatch, project_dir):
+    """Should create a project and exit with 0 code on cli invocation."""
     monkeypatch.setenv('PYTHONPATH', '.')
 
-    subprocess.check_call([
+    exit_code = subprocess.check_call([
         sys.executable,
         '-m',
         'cookiecutter.cli',
         'tests/fake-repo-tmpl',
         '--no-input'
     ])
-
+    assert exit_code == 0
     assert os.path.isdir(project_dir)
diff --git a/tests/test_cookiecutter_local_no_input.py b/tests/test_cookiecutter_local_no_input.py
index 17f0efd..d9a6fd6 100644
--- a/tests/test_cookiecutter_local_no_input.py
+++ b/tests/test_cookiecutter_local_no_input.py
@@ -1,13 +1,9 @@
 # -*- coding: utf-8 -*-
 
-"""
-test_cookiecutter_local_no_input.
+"""Test cookiecutter for work without any input.
 
-Tests formerly known from a unittest residing in test_main.py named
-TestCookiecutterLocalNoInput.test_cookiecutter
-TestCookiecutterLocalNoInput.test_cookiecutter_no_slash
-TestCookiecutterLocalNoInput.test_cookiecutter_no_input_extra_context
-TestCookiecutterLocalNoInput.test_cookiecutter_templated_context
+Tests in this file execute `cookiecutter()` with `no_input=True` flag and
+verify result with different settings in `cookiecutter.json`.
 """
 
 import os
@@ -19,7 +15,7 @@ from cookiecutter import main, utils
 
 @pytest.fixture(scope='function')
 def remove_additional_dirs(request):
-    """Remove special directories which are created during the tests."""
+    """Fixture. Remove special directories which are created during the tests."""
     def fin_remove_additional_dirs():
         if os.path.isdir('fake-project'):
             utils.rmtree('fake-project')
@@ -34,24 +30,21 @@ def remove_additional_dirs(request):
     request.addfinalizer(fin_remove_additional_dirs)
 
 
-@pytest.fixture(params=['tests/fake-repo-pre/', 'tests/fake-repo-pre'])
-def bake(request):
-    """Run cookiecutter with the given input_dir path."""
-    main.cookiecutter(request.param, no_input=True)
-
-
-@pytest.mark.usefixtures('clean_system', 'remove_additional_dirs', 'bake')
-def test_cookiecutter():
+@pytest.mark.parametrize('path', ['tests/fake-repo-pre/', 'tests/fake-repo-pre'])
+@pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
+def test_cookiecutter_no_input_return_project_dir(path):
+    """Verify `cookiecutter` create project dir on input with or without slash."""
+    project_dir = main.cookiecutter(path, no_input=True)
     assert os.path.isdir('tests/fake-repo-pre/{{cookiecutter.repo_name}}')
     assert not os.path.isdir('tests/fake-repo-pre/fake-project')
-    assert os.path.isdir('fake-project')
+    assert os.path.isdir(project_dir)
     assert os.path.isfile('fake-project/README.rst')
     assert not os.path.exists('fake-project/json/')
 
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
 def test_cookiecutter_no_input_extra_context():
-    """Call `cookiecutter()` with `no_input=True` and `extra_context."""
+    """Verify `cookiecutter` accept `extra_context` argument."""
     main.cookiecutter(
         'tests/fake-repo-pre',
         no_input=True,
@@ -62,8 +55,7 @@ def test_cookiecutter_no_input_extra_context():
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
 def test_cookiecutter_templated_context():
-    """Call `cookiecutter()` with `no_input=True` and templates in the \
-    cookiecutter.json file."""
+    """Verify Jinja2 templating correctly works in `cookiecutter.json` file."""
     main.cookiecutter(
         'tests/fake-repo-tmpl',
         no_input=True
@@ -72,14 +64,18 @@ def test_cookiecutter_templated_context():
 
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
-def test_cookiecutter_no_input_return_project_dir():
-    """Call `cookiecutter()` with `no_input=True`."""
+def test_cookiecutter_no_input_return_rendered_file():
+    """Verify Jinja2 templating correctly works in `cookiecutter.json` file."""
     project_dir = main.cookiecutter('tests/fake-repo-pre', no_input=True)
     assert project_dir == os.path.abspath('fake-project')
+    with open(os.path.join(project_dir, 'README.rst')) as fh:
+        contents = fh.read()
+    assert "Project name: **Fake Project**" in contents
 
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
 def test_cookiecutter_dict_values_in_context():
+    """Verify configured dictionary from `cookiecutter.json` correctly unpacked."""
     project_dir = main.cookiecutter('tests/fake-repo-dict', no_input=True)
     assert project_dir == os.path.abspath('fake-project-dict')
 
@@ -126,8 +122,7 @@ def test_cookiecutter_dict_values_in_context():
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
 def test_cookiecutter_template_cleanup(mocker):
-    """Call `cookiecutter()` with `no_input=True` and templates in the \
-    cookiecutter.json file."""
+    """Verify temporary folder for zip unpacking dropped."""
     mocker.patch(
         'tempfile.mkdtemp',
         return_value='fake-tmp',
diff --git a/tests/test_cookiecutter_local_with_input.py b/tests/test_cookiecutter_local_with_input.py
index eeb2e94..7f399fd 100644
--- a/tests/test_cookiecutter_local_with_input.py
+++ b/tests/test_cookiecutter_local_with_input.py
@@ -1,12 +1,6 @@
 # -*- coding: utf-8 -*-
 
-"""
-test_cookiecutter_local_with_input.
-
-Tests formerly known from a unittest residing in test_main.py named
-TestCookiecutterLocalWithInput.test_cookiecutter_local_with_input
-TestCookiecutterLocalWithInput.test_cookiecutter_input_extra_context
-"""
+"""Test main cookiecutter invocation with user input enabled (mocked)."""
 
 import os
 
@@ -18,16 +12,16 @@ from cookiecutter import main, utils
 @pytest.fixture(scope='function')
 def remove_additional_dirs(request):
     """Remove special directories which are created during the tests."""
-    def fin_remove_additional_dirs():
-        if os.path.isdir('fake-project'):
-            utils.rmtree('fake-project')
-        if os.path.isdir('fake-project-input-extra'):
-            utils.rmtree('fake-project-input-extra')
-    request.addfinalizer(fin_remove_additional_dirs)
+    yield
+    if os.path.isdir('fake-project'):
+        utils.rmtree('fake-project')
+    if os.path.isdir('fake-project-input-extra'):
+        utils.rmtree('fake-project-input-extra')
 
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
 def test_cookiecutter_local_with_input(monkeypatch):
+    """Verify simple cookiecutter run results, without extra_context provided."""
     monkeypatch.setattr(
         'cookiecutter.prompt.read_user_variable',
         lambda var, default: default
@@ -42,7 +36,7 @@ def test_cookiecutter_local_with_input(monkeypatch):
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
 def test_cookiecutter_input_extra_context(monkeypatch):
-    """Call `cookiecutter()` with `no_input=False` and `extra_context`."""
+    """Verify simple cookiecutter run results, with extra_context provided."""
     monkeypatch.setattr(
         'cookiecutter.prompt.read_user_variable',
         lambda var, default: default
