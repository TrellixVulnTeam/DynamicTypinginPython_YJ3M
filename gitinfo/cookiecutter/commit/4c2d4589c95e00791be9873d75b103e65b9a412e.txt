commit 4c2d4589c95e00791be9873d75b103e65b9a412e
Author: Audrey Roy <audreyr@gmail.com>
Date:   Sun Jul 21 12:53:13 2013 +0200

    Factor out utils into separate module.

diff --git a/cookiecutter/cookiecutter.py b/cookiecutter/cookiecutter.py
index 8b05ec8..ca4b2a0 100755
--- a/cookiecutter/cookiecutter.py
+++ b/cookiecutter/cookiecutter.py
@@ -10,25 +10,8 @@ import sys
 from jinja2 import FileSystemLoader, Template
 from jinja2.environment import Environment
 
+from .utils import make_sure_path_exists, unicode_open
 
-PY3 = sys.version > '3'
-
-def make_sure_path_exists(path):
-    try:
-        os.makedirs(path)
-    except OSError as exception:
-        if exception.errno != errno.EEXIST:
-            return False
-    return True
-
-
-def unicode_open(filename, *args, **kwargs):
-
-    if PY3:
-        return open(filename, *args, **kwargs)
-    kwargs['encoding'] = "utf-8"
-    return codecs.open(filename, *args, **kwargs)
-    
 
 def generate_context(json_dir='json/'):
     """
diff --git a/cookiecutter/utils.py b/cookiecutter/utils.py
new file mode 100755
index 0000000..7f0eb99
--- /dev/null
+++ b/cookiecutter/utils.py
@@ -0,0 +1,35 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+import errno
+import os
+import sys
+
+PY3 = sys.version > '3'
+if PY3:
+    pass
+else:
+    import codecs
+
+
+def make_sure_path_exists(path):
+    """
+    Ensures that a directory exists.
+    :param path: A directory path.
+    """
+    try:
+        os.makedirs(path)
+    except OSError as exception:
+        if exception.errno != errno.EEXIST:
+            return False
+    return True
+
+
+def unicode_open(filename, *args, **kwargs):
+    """
+    Opens a file as usual on Python 3, and with UTF-8 encoding on Python 2.
+    :param filename: Name of file to open.
+    """
+    if PY3:
+        return open(filename, *args, **kwargs)
+    kwargs['encoding'] = "utf-8"
+    return codecs.open(filename, *args, **kwargs)
diff --git a/tests/files/unicode.txt b/tests/files/unicode.txt
new file mode 100644
index 0000000..642dd4f
--- /dev/null
+++ b/tests/files/unicode.txt
@@ -0,0 +1,3 @@
+Polish: Ą Ł Ż
+Chinese: 倀 倁 倂 倃 倄 倅 倆 倇 倈
+Musical Notes: ♬ ♫ ♯
\ No newline at end of file
diff --git a/tests/test_cookiecutter.py b/tests/test_cookiecutter.py
old mode 100644
new mode 100755
index cdb6cb9..2b953ac
--- a/tests/test_cookiecutter.py
+++ b/tests/test_cookiecutter.py
@@ -17,15 +17,6 @@ from cookiecutter import cookiecutter
 
 class TestCookiecutter(unittest.TestCase):
 
-    def test_make_sure_path_exists(self):
-        self.assertTrue(cookiecutter.make_sure_path_exists('/usr/'))
-        self.assertTrue(cookiecutter.make_sure_path_exists('tests/output/'))
-        self.assertFalse(
-            cookiecutter.make_sure_path_exists(
-                '/this-dir-does-not-exist-and-cant-be-created/'
-            )
-        )
-
     def test_generate_files(self):
         cookiecutter.generate_files(
             context={'food': 'pizza'},
diff --git a/tests/test_utils.py b/tests/test_utils.py
new file mode 100755
index 0000000..a5fdd77
--- /dev/null
+++ b/tests/test_utils.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+
+"""
+test_utils
+------------
+
+Tests for `complexity.utils` module.
+"""
+
+import shutil
+import unittest
+
+from cookiecutter import utils
+
+
+class TestUtils(unittest.TestCase):
+
+    def test_make_sure_path_exists(self):
+        self.assertTrue(utils.make_sure_path_exists('/usr/'))
+        self.assertTrue(utils.make_sure_path_exists('tests/blah'))
+        self.assertTrue(utils.make_sure_path_exists('tests/trailingslash/'))
+        self.assertFalse(
+            utils.make_sure_path_exists(
+                '/this-dir-does-not-exist-and-cant-be-created/'
+            )
+        )
+        shutil.rmtree('tests/blah/')
+        shutil.rmtree('tests/trailingslash/')
+
+    def test_unicode_open(self):
+        """ Test unicode_open(filename, *args, **kwargs). """
+
+        unicode_text = u"""Polish: Ą Ł Ż
+Chinese: 倀 倁 倂 倃 倄 倅 倆 倇 倈
+Musical Notes: ♬ ♫ ♯"""
+
+        with utils.unicode_open('tests/files/unicode.txt') as f:
+            opened_text = f.read()
+            self.assertEqual(unicode_text, opened_text)
+
+if __name__ == '__main__':
+    unittest.main()
