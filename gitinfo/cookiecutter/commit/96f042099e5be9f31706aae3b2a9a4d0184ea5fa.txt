commit 96f042099e5be9f31706aae3b2a9a4d0184ea5fa
Author: Daniel Greenfeld <danny@eventbrite.com>
Date:   Fri Oct 31 10:27:04 2014 -0700

    Added vcs.is_vcs_installed function to provide verbose exceptions for users without git or hg installed.

diff --git a/cookiecutter/compat.py b/cookiecutter/compat.py
index 2f2823e..c14bcc6 100644
--- a/cookiecutter/compat.py
+++ b/cookiecutter/compat.py
@@ -1,3 +1,4 @@
+import os
 import sys
 
 PY3 = sys.version_info[0] == 3
@@ -24,6 +25,8 @@ if PY3:  # pragma: no cover
         """
         # The Python 3 input function does exactly what we want
         return input(prompt)
+
+    from shutil import which
 else:  # pragma: no cover
     from __builtin__ import raw_input
     input = raw_input
@@ -67,4 +70,28 @@ else:  # pragma: no cover
         enc = sys.stdin.encoding or sys.getdefaultencoding()
         return raw_input(prompt).decode(enc)
 
+    def is_exe(program):
+        return os.path.isfile(program) and os.access(program, os.X_OK)
+
+    def which(shell_command):
+        """
+        Returns the location of the shell command or None if it does not exist.
+
+        :param shell_command: The name of a shell command.
+        """
+        # http://stackoverflow.com/questions/377017/test-if-executable-exists-in-python
+        fpath, fname = os.path.split(shell_command)
+        if fpath:
+            if is_exe(shell_command):
+                return shell_command
+        else:
+            for path in os.environ["PATH"].split(os.pathsep):
+                path = path.strip('"')
+                exe_file = os.path.join(path, shell_command)
+                if is_exe(exe_file):
+                    return exe_file
+
+        return None
+
+
 _hush_pyflakes = (patch, StringIO, json, OrderedDict, unittest)
diff --git a/cookiecutter/exceptions.py b/cookiecutter/exceptions.py
index 9223999..2100e74 100755
--- a/cookiecutter/exceptions.py
+++ b/cookiecutter/exceptions.py
@@ -56,3 +56,9 @@ class UnknownRepoType(CookiecutterException):
     """
     Raised if a repo's type cannot be determined.
     """
+
+
+class VCSNotInstalled(CookiecutterException):
+    """
+    Raised if the version control system (git or hg) is not installed.
+    """
diff --git a/cookiecutter/vcs.py b/cookiecutter/vcs.py
index f3b4a53..653951e 100755
--- a/cookiecutter/vcs.py
+++ b/cookiecutter/vcs.py
@@ -14,7 +14,8 @@ import os
 import subprocess
 import sys
 
-from .exceptions import UnknownRepoType
+from .compat import which
+from .exceptions import UnknownRepoType, VCSNotInstalled
 from .prompt import query_yes_no
 from .utils import make_sure_path_exists, rmtree
 
@@ -60,7 +61,20 @@ def identify_repo(repo_url):
         raise UnknownRepoType
 
 
+<<<<<<< HEAD
 def clone(repo_url, checkout=None, clone_to_dir='.', no_input=False):
+=======
+def is_vcs_installed(repo_type):
+    """
+    Check if the version control system for a repo type is installed.
+
+    :param repo_type:
+    """
+    return bool(which(repo_type))
+
+
+def clone(repo_url, checkout=None, clone_to_dir=".", no_input=False):
+>>>>>>> Added vcs.is_vcs_installed function to provide verbose exceptions for users without git or hg installed.
     """
     Clone a repo to the current directory.
 
@@ -75,8 +89,14 @@ def clone(repo_url, checkout=None, clone_to_dir='.', no_input=False):
     clone_to_dir = os.path.expanduser(clone_to_dir)
     make_sure_path_exists(clone_to_dir)
 
+    # identify the repo_type
     repo_type = identify_repo(repo_url)
 
+    # check that the appropriate VCS for the repo_type is installed
+    if not is_vcs_installed(repo_type):
+        msg = "'{0}' is not installed.".format(repo_type)
+        raise VCSNotInstalled(msg)
+
     tail = os.path.split(repo_url)[1]
     if repo_type == 'git':
         repo_dir = os.path.normpath(os.path.join(clone_to_dir,
@@ -95,3 +115,4 @@ def clone(repo_url, checkout=None, clone_to_dir='.', no_input=False):
                                   cwd=repo_dir)
 
     return repo_dir
+
diff --git a/docs/cookiecutter.rst b/docs/cookiecutter.rst
deleted file mode 100644
index 039c5a2..0000000
--- a/docs/cookiecutter.rst
+++ /dev/null
@@ -1,83 +0,0 @@
-cookiecutter Package
-====================
-
-:mod:`cookiecutter` Package
----------------------------
-
-.. automodule:: cookiecutter.__init__
-    :members:
-    :undoc-members:
-    :show-inheritance:
-
-:mod:`config` Module
---------------------
-
-.. automodule:: cookiecutter.config
-    :members:
-    :undoc-members:
-    :show-inheritance:
-
-:mod:`exceptions` Module
-------------------------
-
-.. automodule:: cookiecutter.exceptions
-    :members:
-    :undoc-members:
-    :show-inheritance:
-
-:mod:`find` Module
-------------------
-
-.. automodule:: cookiecutter.find
-    :members:
-    :undoc-members:
-    :show-inheritance:
-
-:mod:`generate` Module
-----------------------
-
-.. automodule:: cookiecutter.generate
-    :members:
-    :undoc-members:
-    :show-inheritance:
-
-:mod:`hooks` Module
--------------------
-
-.. automodule:: cookiecutter.hooks
-    :members:
-    :undoc-members:
-    :show-inheritance:
-
-:mod:`main` Module
-------------------
-
-.. automodule:: cookiecutter.main
-    :members:
-    :undoc-members:
-    :show-inheritance:
-
-:mod:`prompt` Module
---------------------
-
-.. automodule:: cookiecutter.prompt
-    :members:
-    :undoc-members:
-    :show-inheritance:
-
-:mod:`utils` Module
--------------------
-
-.. automodule:: cookiecutter.utils
-    :members:
-    :undoc-members:
-    :show-inheritance:
-
-:mod:`vcs` Module
------------------
-
-.. automodule:: cookiecutter.vcs
-    :members:
-    :undoc-members:
-    :show-inheritance:
-
diff --git a/tests/test_compat.py b/tests/test_compat.py
new file mode 100644
index 0000000..2aa2470
--- /dev/null
+++ b/tests/test_compat.py
@@ -0,0 +1,27 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+
+"""
+test_compat
+------------
+
+Tests for `cookiecutter.compat` module.
+"""
+
+from cookiecutter.compat import unittest, which
+
+
+class TestWhich(unittest.TestCase):
+
+    def test_existing_command(self):
+        self.assertTrue(
+            which('cookiecutter')
+        )
+
+    def test_non_existing_command(self):
+        self.assertFalse(
+            which('stringthatisntashellcommand')
+        )
+
+if __name__ == '__main__':
+    unittest.main()
diff --git a/tests/test_vcs.py b/tests/test_vcs.py
index ed1c0cb..b433b7a 100755
--- a/tests/test_vcs.py
+++ b/tests/test_vcs.py
@@ -14,7 +14,7 @@ import os
 import subprocess
 
 from cookiecutter.compat import patch, unittest
-from cookiecutter import utils, vcs
+from cookiecutter import exceptions, utils, vcs
 
 try:
     no_network = os.environ[u'DISABLE_NETWORK_TESTS']
@@ -45,6 +45,14 @@ class TestIdentifyRepo(unittest.TestCase):
         repo_url = "https://audreyr@bitbucket.org/audreyr/cookiecutter-bitbucket"
         self.assertEqual(vcs.identify_repo(repo_url), "hg")
 
+    def test_unknown_repo_type(self):
+        repo_url = "http://norepotypespecified.com"
+        self.assertRaises(
+            exceptions.UnknownRepoType,
+            vcs.identify_repo,
+            repo_url
+        )
+
 
 @unittest.skipIf(condition=no_network, reason='Needs a network connection to GitHub/Bitbucket.')
 class TestVCS(unittest.TestCase):
@@ -104,6 +112,14 @@ class TestVCS(unittest.TestCase):
         if os.path.isdir('cookiecutter-trytonmodule'):
             utils.rmtree('cookiecutter-trytonmodule')
 
+    @patch('cookiecutter.vcs.identify_repo', lambda x: u'stringthatisntashellcommand')
+    def test_vcs_not_installed(self):
+        self.assertRaises(
+            exceptions.VCSNotInstalled,
+            vcs.clone,
+            "http://norepotypespecified.com"
+        )
+
 
 @unittest.skipIf(condition=no_network, reason='Needs a network connection to GitHub/Bitbucket.')
 class TestVCSPrompt(unittest.TestCase):
@@ -163,5 +179,18 @@ class TestVCSPrompt(unittest.TestCase):
             utils.rmtree('cookiecutter-trytonmodule')
 
 
+class TestIsVCSInstalled(unittest.TestCase):
+
+    def test_existing_repo_type(self):
+        self.assertTrue(
+            vcs.is_vcs_installed("git"),
+        )
+
+    def test_non_existing_repo_type(self):
+        self.assertFalse(
+            vcs.is_vcs_installed("stringthatisntashellcommand")
+        )
+
+
 if __name__ == '__main__':
     unittest.main()
