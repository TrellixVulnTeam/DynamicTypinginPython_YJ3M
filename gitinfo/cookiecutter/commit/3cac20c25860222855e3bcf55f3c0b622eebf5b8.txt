commit 3cac20c25860222855e3bcf55f3c0b622eebf5b8
Author: Russell Keith-Magee <russell@keith-magee.com>
Date:   Fri Sep 15 17:22:12 2017 -0700

    Refactored prompt_and_delete, and added option to use old repo copy.

diff --git a/cookiecutter/utils.py b/cookiecutter/utils.py
index 9f661df..24dcf5f 100644
--- a/cookiecutter/utils.py
+++ b/cookiecutter/utils.py
@@ -14,6 +14,9 @@ import logging
 import os
 import stat
 import shutil
+import sys
+
+from .prompt import read_user_yes_no
 
 logger = logging.getLogger(__name__)
 
@@ -79,3 +82,42 @@ def make_executable(script_path):
     """
     status = os.stat(script_path)
     os.chmod(script_path, status.st_mode | stat.S_IEXEC)
+
+
+def prompt_and_delete(path, no_input=False):
+    """Ask the user whether it's okay to delete the previously-downloaded
+    file/directory.
+
+    If yes, deletes it. If no, checks to see if the old version should be
+    reused. If yes, it's reused; otherwise, Cookiecutter exits.
+
+    :param path: Previously downloaded zipfile.
+    :param no_input: Suppress prompt to delete repo and just delete it.
+    :return: True if the content was deleted
+    """
+    # Suppress prompt if called via API
+    if no_input:
+        ok_to_delete = True
+    else:
+        question = (
+            "You've downloaded {} before. "
+            "Is it okay to delete and re-download it?"
+        ).format(path)
+
+        ok_to_delete = read_user_yes_no(question, 'yes')
+
+    if ok_to_delete:
+        if os.path.isdir(path):
+            rmtree(path)
+        else:
+            os.remove(path)
+        return True
+    else:
+        ok_to_reuse = read_user_yes_no(
+            "Do you want to re-use the existing version?", 'yes'
+        )
+
+        if ok_to_reuse:
+            return False
+
+        sys.exit()
diff --git a/cookiecutter/vcs.py b/cookiecutter/vcs.py
index 3fb44a6..72c3b07 100644
--- a/cookiecutter/vcs.py
+++ b/cookiecutter/vcs.py
@@ -13,8 +13,7 @@ from whichcraft import which
 from .exceptions import (
     RepositoryNotFound, RepositoryCloneFailed, UnknownRepoType, VCSNotInstalled
 )
-from .prompt import read_user_yes_no
-from .utils import make_sure_path_exists, rmtree
+from .utils import make_sure_path_exists, prompt_and_delete
 
 logger = logging.getLogger(__name__)
 
@@ -25,31 +24,6 @@ BRANCH_ERRORS = [
 ]
 
 
-def prompt_and_delete_repo(repo_dir, no_input=False):
-    """Ask the user whether it's okay to delete the previously-cloned repo.
-
-    If yes, deletes it. Otherwise, Cookiecutter exits.
-
-    :param repo_dir: Directory of previously-cloned repo.
-    :param no_input: Suppress prompt to delete repo and just delete it.
-    """
-    # Suppress prompt if called via API
-    if no_input:
-        ok_to_delete = True
-    else:
-        question = (
-            "You've cloned {} before. "
-            "Is it okay to delete and re-clone it?"
-        ).format(repo_dir)
-
-        ok_to_delete = read_user_yes_no(question, 'yes')
-
-    if ok_to_delete:
-        rmtree(repo_dir)
-    else:
-        sys.exit()
-
-
 def identify_repo(repo_url):
     """Determine if `repo_url` should be treated as a URL to a git or hg repo.
 
@@ -114,32 +88,35 @@ def clone(repo_url, checkout=None, clone_to_dir='.', no_input=False):
     logger.debug('repo_dir is {0}'.format(repo_dir))
 
     if os.path.isdir(repo_dir):
-        prompt_and_delete_repo(repo_dir, no_input=no_input)
-
-    try:
-        subprocess.check_output(
-            [repo_type, 'clone', repo_url],
-            cwd=clone_to_dir,
-            stderr=subprocess.STDOUT,
-        )
-        if checkout is not None:
+        clone = prompt_and_delete(repo_dir, no_input=no_input)
+    else:
+        clone = True
+
+    if clone:
+        try:
             subprocess.check_output(
-                [repo_type, 'checkout', checkout],
-                cwd=repo_dir,
+                [repo_type, 'clone', repo_url],
+                cwd=clone_to_dir,
                 stderr=subprocess.STDOUT,
             )
-    except subprocess.CalledProcessError as clone_error:
-        output = clone_error.output.decode('utf-8')
-        if 'not found' in output.lower():
-            raise RepositoryNotFound(
-                'The repository {} could not be found, '
-                'have you made a typo?'.format(repo_url)
-            )
-        if any(error in output for error in BRANCH_ERRORS):
-            raise RepositoryCloneFailed(
-                'The {} branch of repository {} could not found, '
-                'have you made a typo?'.format(checkout, repo_url)
-            )
-        raise
+            if checkout is not None:
+                subprocess.check_output(
+                    [repo_type, 'checkout', checkout],
+                    cwd=repo_dir,
+                    stderr=subprocess.STDOUT,
+                )
+        except subprocess.CalledProcessError as clone_error:
+            output = clone_error.output.decode('utf-8')
+            if 'not found' in output.lower():
+                raise RepositoryNotFound(
+                    'The repository {} could not be found, '
+                    'have you made a typo?'.format(repo_url)
+                )
+            if any(error in output for error in BRANCH_ERRORS):
+                raise RepositoryCloneFailed(
+                    'The {} branch of repository {} could not found, '
+                    'have you made a typo?'.format(checkout, repo_url)
+                )
+            raise
 
     return repo_dir
diff --git a/cookiecutter/zipfile.py b/cookiecutter/zipfile.py
index 056d5d9..2440362 100644
--- a/cookiecutter/zipfile.py
+++ b/cookiecutter/zipfile.py
@@ -11,37 +11,7 @@ except ImportError:
     from zipfile import BadZipfile as BadZipFile
 
 from .exceptions import InvalidZipRepository
-from .prompt import read_user_yes_no
-from .utils import make_sure_path_exists, rmtree
-
-
-def prompt_and_delete(path, no_input=False):
-    """Ask the user whether it's okay to delete the previously-downloaded
-    file/directory.
-
-    If yes, deletes it. Otherwise, Cookiecutter exits.
-
-    :param path: Previously downloaded zipfile.
-    :param no_input: Suppress prompt to delete repo and just delete it.
-    """
-    # Suppress prompt if called via API
-    if no_input:
-        ok_to_delete = True
-    else:
-        question = (
-            "You've downloaded {} before. "
-            "Is it okay to delete and re-download it?"
-        ).format(path)
-
-        ok_to_delete = read_user_yes_no(question, 'yes')
-
-    if ok_to_delete:
-        if os.path.isdir(path):
-            rmtree(path)
-        else:
-            os.remove(path)
-    else:
-        sys.exit()
+from .utils import make_sure_path_exists, prompt_and_delete
 
 
 def unzip(zip_uri, is_url, clone_to_dir='.', no_input=False):
@@ -67,14 +37,17 @@ def unzip(zip_uri, is_url, clone_to_dir='.', no_input=False):
         zip_path = os.path.join(clone_to_dir, identifier)
 
         if os.path.exists(zip_path):
-            prompt_and_delete(zip_path, no_input=no_input)
-
-        # (Re) download the zipfile
-        r = requests.get(zip_uri, stream=True)
-        with open(zip_path, 'wb') as f:
-            for chunk in r.iter_content(chunk_size=1024):
-                if chunk:  # filter out keep-alive new chunks
-                    f.write(chunk)
+            download = prompt_and_delete(zip_path, no_input=no_input)
+        else:
+            download = True
+
+        if download:
+            # (Re) download the zipfile
+            r = requests.get(zip_uri, stream=True)
+            with open(zip_path, 'wb') as f:
+                for chunk in r.iter_content(chunk_size=1024):
+                    if chunk:  # filter out keep-alive new chunks
+                        f.write(chunk)
     else:
         # Just use the local zipfile as-is.
         zip_path = os.path.abspath(zip_uri)
diff --git a/tests/test_cookiecutter_local_no_input.py b/tests/test_cookiecutter_local_no_input.py
index cd701b4..4e3a0bc 100644
--- a/tests/test_cookiecutter_local_no_input.py
+++ b/tests/test_cookiecutter_local_no_input.py
@@ -146,7 +146,7 @@ def test_cookiecutter_template_cleanup(mocker):
     )
 
     mock_tmpdir = mocker.patch(
-        'cookiecutter.zipfile.prompt_and_delete',
+        'cookiecutter.utils.prompt_and_delete',
         return_value=True,
         autospec=True
     )
diff --git a/tests/test_utils.py b/tests/test_utils.py
index 172ce6f..8504e6b 100644
--- a/tests/test_utils.py
+++ b/tests/test_utils.py
@@ -67,3 +67,121 @@ def test_workin():
     # Make sure that exceptions are still bubbled up
     with pytest.raises(TestException):
         test_work_in()
+
+
+def test_prompt_should_ask_and_rm_repo_dir(mocker, tmpdir):
+    """In `prompt_and_delete()`, if the user agrees to delete/reclone the
+    repo, the repo should be deleted.
+    """
+    mock_read_user = mocker.patch(
+        'cookiecutter.utils.read_user_yes_no',
+        return_value=True,
+        autospec=True
+    )
+    repo_dir = tmpdir.mkdir('repo')
+
+    deleted = utils.prompt_and_delete(str(repo_dir))
+
+    assert mock_read_user.called
+    assert not repo_dir.exists()
+    assert deleted
+
+
+def test_prompt_should_ask_and_rm_repo_file(mocker, tmpdir):
+    """In `prompt_and_delete()`, if the user agrees to delete/reclone a
+    repo file, the repo should be deleted.
+    """
+    mock_read_user = mocker.patch(
+        'cookiecutter.utils.read_user_yes_no',
+        return_value=True,
+        autospec=True
+    )
+
+    repo_file = tmpdir.join('repo.zip')
+    repo_file.write('this is zipfile content')
+
+    deleted = utils.prompt_and_delete(str(repo_file))
+
+    assert mock_read_user.called
+    assert not repo_file.exists()
+    assert deleted
+
+
+def test_prompt_should_ask_and_keep_repo_on_no_reuse(mocker, tmpdir):
+    """In `prompt_and_delete()`, if the user wants to keep their old
+    cloned template repo, it should not be deleted.
+    """
+    mock_read_user = mocker.patch(
+        'cookiecutter.utils.read_user_yes_no',
+        return_value=False,
+        autospec=True
+    )
+    repo_dir = tmpdir.mkdir('repo')
+
+    with pytest.raises(SystemExit):
+        utils.prompt_and_delete(str(repo_dir))
+
+    assert mock_read_user.called
+    assert repo_dir.exists()
+
+
+def test_prompt_should_ask_and_keep_repo_on_reuse(mocker, tmpdir):
+    """In `prompt_and_delete()`, if the user wants to keep their old
+    cloned template repo, it should not be deleted.
+    """
+    def answer(question, default):
+        if 'okay to delete' in question:
+            return False
+        else:
+            return True
+
+    mock_read_user = mocker.patch(
+        'cookiecutter.utils.read_user_yes_no',
+        side_effect=answer,
+        autospec=True
+    )
+    repo_dir = tmpdir.mkdir('repo')
+
+    deleted = utils.prompt_and_delete(str(repo_dir))
+
+    assert mock_read_user.called
+    assert repo_dir.exists()
+    assert not deleted
+
+
+def test_prompt_should_not_ask_if_no_input_and_rm_repo_dir(mocker, tmpdir):
+    """In `prompt_and_delete()`, if `no_input` is True, the call to
+    `prompt.read_user_yes_no()` should be suppressed.
+    """
+    mock_read_user = mocker.patch(
+        'cookiecutter.prompt.read_user_yes_no',
+        return_value=True,
+        autospec=True
+    )
+    repo_dir = tmpdir.mkdir('repo')
+
+    deleted = utils.prompt_and_delete(str(repo_dir), no_input=True)
+
+    assert not mock_read_user.called
+    assert not repo_dir.exists()
+    assert deleted
+
+
+def test_prompt_should_not_ask_if_no_input_and_rm_repo_file(mocker, tmpdir):
+    """In `prompt_and_delete()`, if `no_input` is True, the call to
+    `prompt.read_user_yes_no()` should be suppressed.
+    """
+    mock_read_user = mocker.patch(
+        'cookiecutter.prompt.read_user_yes_no',
+        return_value=True,
+        autospec=True
+    )
+
+    repo_file = tmpdir.join('repo.zip')
+    repo_file.write('this is zipfile content')
+
+    deleted = utils.prompt_and_delete(str(repo_file), no_input=True)
+
+    assert not mock_read_user.called
+    assert not repo_file.exists()
+    assert deleted
diff --git a/tests/vcs/test_clone.py b/tests/vcs/test_clone.py
index efdfa71..5f77eb9 100644
--- a/tests/vcs/test_clone.py
+++ b/tests/vcs/test_clone.py
@@ -69,7 +69,7 @@ def test_clone_should_abort_if_user_does_not_want_to_reclone(mocker, tmpdir):
         return_value=True
     )
     mocker.patch(
-        'cookiecutter.vcs.prompt_and_delete_repo',
+        'cookiecutter.vcs.prompt_and_delete',
         side_effect=SystemExit,
         autospec=True
     )
@@ -80,7 +80,7 @@ def test_clone_should_abort_if_user_does_not_want_to_reclone(mocker, tmpdir):
 
     clone_to_dir = tmpdir.mkdir('clone')
 
-    # Create repo_dir to trigger prompt_and_delete_repo
+    # Create repo_dir to trigger prompt_and_delete
     clone_to_dir.mkdir('cookiecutter-pytest-plugin')
 
     repo_url = 'https://github.com/pytest-dev/cookiecutter-pytest-plugin.git'
diff --git a/tests/vcs/test_prompt_and_delete_repo.py b/tests/vcs/test_prompt_and_delete_repo.py
deleted file mode 100644
index 09a1b59..0000000
--- a/tests/vcs/test_prompt_and_delete_repo.py
+++ /dev/null
@@ -1,56 +0,0 @@
-# -*- coding: utf-8 -*-
-import pytest
-
-from cookiecutter import vcs
-
-
-def test_prompt_should_ask_and_rm_repo_dir(mocker, tmpdir):
-    """In `prompt_and_delete_repo()`, if the user agrees to delete/reclone the
-    repo, the repo should be deleted.
-    """
-    mock_read_user = mocker.patch(
-        'cookiecutter.vcs.read_user_yes_no',
-        return_value=True,
-        autospec=True
-    )
-    repo_dir = tmpdir.mkdir('repo')
-
-    vcs.prompt_and_delete_repo(str(repo_dir))
-
-    assert mock_read_user.called
-    assert not repo_dir.exists()
-
-
-def test_prompt_should_ask_and_keep_repo_dir(mocker, tmpdir):
-    """In `prompt_and_delete_repo()`, if the user wants to keep their old
-    cloned template repo, it should not be deleted.
-    """
-    mock_read_user = mocker.patch(
-        'cookiecutter.vcs.read_user_yes_no',
-        return_value=False,
-        autospec=True
-    )
-    repo_dir = tmpdir.mkdir('repo')
-
-    with pytest.raises(SystemExit):
-        vcs.prompt_and_delete_repo(str(repo_dir))
-
-    assert mock_read_user.called
-    assert repo_dir.exists()
-
-
-def test_prompt_should_not_ask_if_no_input_and_rm_repo_dir(mocker, tmpdir):
-    """In `prompt_and_delete_repo()`, if `no_input` is True, the call to
-    `vcs.read_user_yes_no()` should be suppressed.
-    """
-    mock_read_user = mocker.patch(
-        'cookiecutter.vcs.read_user_yes_no',
-        return_value=True,
-        autospec=True
-    )
-    repo_dir = tmpdir.mkdir('repo')
-
-    vcs.prompt_and_delete_repo(str(repo_dir), no_input=True)
-
-    assert not mock_read_user.called
-    assert not repo_dir.exists()
diff --git a/tests/zipfile/test_prompt_and_delete.py b/tests/zipfile/test_prompt_and_delete.py
deleted file mode 100644
index 0c9c550..0000000
--- a/tests/zipfile/test_prompt_and_delete.py
+++ /dev/null
@@ -1,111 +0,0 @@
-# -*- coding: utf-8 -*-
-import pytest
-
-from cookiecutter import zipfile
-
-
-def test_prompt_should_ask_and_rm_dir(mocker, tmpdir):
-    """In `prompt_and_delete()`, if the user agrees to delete/reclone the
-    repo, the repo should be deleted.
-    """
-    mock_read_user = mocker.patch(
-        'cookiecutter.zipfile.read_user_yes_no',
-        return_value=True,
-        autospec=True
-    )
-    repodir = tmpdir.mkdir('repo')
-
-    zipfile.prompt_and_delete(str(repodir))
-
-    assert mock_read_user.called
-    assert not repodir.exists()
-
-
-def test_prompt_should_ask_and_keep_dir(mocker, tmpdir):
-    """In `prompt_and_delete()`, if the user wants to keep their old
-    cloned template repo, it should not be deleted.
-    """
-    mock_read_user = mocker.patch(
-        'cookiecutter.zipfile.read_user_yes_no',
-        return_value=False,
-        autospec=True
-    )
-    repodir = tmpdir.mkdir('repo')
-
-    with pytest.raises(SystemExit):
-        zipfile.prompt_and_delete(str(repodir))
-
-    assert mock_read_user.called
-    assert repodir.exists()
-
-
-def test_prompt_should_not_ask_if_no_input_and_rm_dir(mocker, tmpdir):
-    """In `prompt_and_delete()`, if `no_input` is True, the call to
-    `zipfile.read_user_yes_no()` should be suppressed.
-    """
-    mock_read_user = mocker.patch(
-        'cookiecutter.zipfile.read_user_yes_no',
-        return_value=True,
-        autospec=True
-    )
-    repodir = tmpdir.mkdir('repo')
-
-    zipfile.prompt_and_delete(str(repodir), no_input=True)
-
-    assert not mock_read_user.called
-    assert not repodir.exists()
-
-
-def test_prompt_should_ask_and_rm_file(mocker, tmpdir):
-    """In `prompt_and_delete()`, if the user agrees to delete/reclone the
-    template zipfile, the zipfile should be deleted.
-    """
-    mock_read_user = mocker.patch(
-        'cookiecutter.zipfile.read_user_yes_no',
-        return_value=True,
-        autospec=True
-    )
-    repofile = tmpdir.join('repo.zip')
-    repofile.write('this is zipfile content')
-
-    zipfile.prompt_and_delete(str(repofile))
-
-    assert mock_read_user.called
-    assert not repofile.exists()
-
-
-def test_prompt_should_ask_and_keep_file(mocker, tmpdir):
-    """In `prompt_and_delete()`, if the user wants to keep their old
-    downloaded template zipfile, it should not be deleted.
-    """
-    mock_read_user = mocker.patch(
-        'cookiecutter.zipfile.read_user_yes_no',
-        return_value=False,
-        autospec=True
-    )
-    repofile = tmpdir.join('repo.zip')
-    repofile.write('this is zipfile content')
-
-    with pytest.raises(SystemExit):
-        zipfile.prompt_and_delete(str(repofile))
-
-    assert mock_read_user.called
-    assert repofile.exists()
-
-
-def test_prompt_should_not_ask_if_no_input_and_rm_file(mocker, tmpdir):
-    """In `prompt_and_delete()`, if `no_input` is True, the call to
-    `zipfile.read_user_yes_no()` should be suppressed.
-    """
-    mock_read_user = mocker.patch(
-        'cookiecutter.zipfile.read_user_yes_no',
-        return_value=True,
-        autospec=True
-    )
-    repofile = tmpdir.join('repo.zip')
-    repofile.write('this is zipfile content')
-
-    zipfile.prompt_and_delete(str(repofile), no_input=True)
-
-    assert not mock_read_user.called
-    assert not repofile.exists()
