commit e7ece5b7ca7140fdf07df39af013953ddc7a4a20
Author: Benjamin Schwarze <benjamin.schwarze@mailboxd.de>
Date:   Sun Sep 8 14:29:18 2013 +0200

    apply file permissions from input file to output file

diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 5bb915e..ee02b96 100755
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -69,14 +69,9 @@ def generate_file(project_dir, infile, context, env):
     """
     logging.debug("Generating file {0}".format(infile))
 
-    # Render the intermediary path to the output file (not including the root
-    # project dir nor the filename itself)
-    outdir_tmpl = Template(os.path.dirname(infile))
-    outdir = outdir_tmpl.render(**context)
-
-    # Write the file to the corresponding place
-    fname = os.path.basename(infile)  # input/output filename
-    outfile = os.path.join(project_dir, outdir, fname)
+    # Render the path to the output file (not including the root project dir)
+    outfile_tmpl = Template(infile)
+    outfile = os.path.join(project_dir, outfile_tmpl.render(**context))
     logging.debug("outfile is {0}".format(outfile))
 
     # Just copy over binary files. Don't render.
@@ -85,7 +80,6 @@ def generate_file(project_dir, infile, context, env):
         logging.debug("Copying binary {0} to {1} without rendering"
                       .format(infile, outfile))
         shutil.copyfile(infile, outfile)
-
     else:
         # Force fwd slashes on Windows for get_template
         # This is a by-design Jinja issue
@@ -101,14 +95,14 @@ def generate_file(project_dir, infile, context, env):
             raise
         rendered_file = tmpl.render(**context)
 
-        # Render the output filename before writing
-        name_tmpl = Template(outfile)
-        rendered_name = name_tmpl.render(**context)
-        logging.debug("Writing {0}".format(rendered_name))
+        logging.debug("Writing {0}".format(outfile))
 
-        with unicode_open(rendered_name, 'w') as fh:
+        with unicode_open(outfile, 'w') as fh:
             fh.write(rendered_file)
 
+    # Apply file permissions to output file
+    shutil.copymode(infile, outfile)
+
 
 def render_and_create_dir(dirname, context, output_dir):
     """
diff --git a/tests/test-generate-files-permissions/input{{cookiecutter.permissions}}/script.sh b/tests/test-generate-files-permissions/input{{cookiecutter.permissions}}/script.sh
new file mode 100755
index 0000000..0402dbb
--- /dev/null
+++ b/tests/test-generate-files-permissions/input{{cookiecutter.permissions}}/script.sh
@@ -0,0 +1,3 @@
+#!/bin/bash
+
+# some bash script
diff --git a/tests/test-generate-files-permissions/input{{cookiecutter.permissions}}/simple.txt b/tests/test-generate-files-permissions/input{{cookiecutter.permissions}}/simple.txt
new file mode 100644
index 0000000..3101923
--- /dev/null
+++ b/tests/test-generate-files-permissions/input{{cookiecutter.permissions}}/simple.txt
@@ -0,0 +1 @@
+Some static text
\ No newline at end of file
diff --git a/tests/test_generate.py b/tests/test_generate.py
index fe63efd..9539715 100755
--- a/tests/test_generate.py
+++ b/tests/test_generate.py
@@ -82,6 +82,8 @@ class TestGenerateFiles(CookiecutterCleanSystemTestCase):
             shutil.rmtree('inputbinary_files')
         if os.path.exists('tests/custom_output_dir'):
             shutil.rmtree('tests/custom_output_dir')
+        if os.path.exists('inputpermissions'):
+            shutil.rmtree('inputpermissions')
         super(TestGenerateFiles, self).tearDown()
 
     def test_generate_files_nontemplated_exception(self):
@@ -154,6 +156,18 @@ class TestGenerateFiles(CookiecutterCleanSystemTestCase):
         )
         self.assertTrue(os.path.isfile('tests/custom_output_dir/inputpizz√§/simple.txt'))
 
+    def test_generate_files_permissions(self):
+        generate.generate_files(
+            context={
+                'cookiecutter': {'permissions': 'permissions'}
+            },
+            repo_dir='tests/test-generate-files-permissions'
+        )
+        self.assertTrue(os.path.isfile('inputpermissions/simple.txt'))
+        self.assertEquals('0644', oct(os.stat('inputpermissions/simple.txt').st_mode & 0777))
+        self.assertTrue(os.path.isfile('inputpermissions/script.sh'))
+        self.assertEquals('0755', oct(os.stat('inputpermissions/script.sh').st_mode & 0777))
+
 
 class TestGenerateContext(CookiecutterCleanSystemTestCase):
 
