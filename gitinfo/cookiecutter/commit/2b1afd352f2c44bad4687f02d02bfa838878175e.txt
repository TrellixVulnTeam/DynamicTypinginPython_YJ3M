commit 2b1afd352f2c44bad4687f02d02bfa838878175e
Author: Raphael Pierzina <raphael@hackebrot.de>
Date:   Thu Apr 16 00:32:06 2015 +0200

    Use click.prompt for read_response

diff --git a/cookiecutter/compat.py b/cookiecutter/compat.py
index 7cd280f..939cc68 100644
--- a/cookiecutter/compat.py
+++ b/cookiecutter/compat.py
@@ -1,26 +1,21 @@
+import click
 import os
 import sys
 
 PY3 = sys.version_info[0] == 3
 OLD_PY2 = sys.version_info[:2] < (2, 7)
 
+
+def read_response(prompt=''):
+    return click.prompt(prompt, default='')
+
+
 if PY3:  # pragma: no cover
     input_str = 'builtins.input'
     iteritems = lambda d: iter(d.items())
     from unittest.mock import patch
     from io import StringIO
 
-    def read_response(prompt=''):
-        """
-        Prompt the user for a response.
-
-        Prints the given prompt (which should be a Unicode string),
-        and returns the text entered by the user as a Unicode string.
-
-        :param prompt: A Unicode string that is presented to the user.
-        """
-        # The Python 3 input function does exactly what we want
-        return input(prompt)
 
 else:  # pragma: no cover
     from __builtin__ import raw_input
@@ -30,32 +25,6 @@ else:  # pragma: no cover
     from mock import patch
     from cStringIO import StringIO
 
-    def read_response(prompt=''):
-        """
-        Prompt the user for a response.
-
-        Prints the given prompt (which should be a Unicode string),
-        and returns the text entered by the user as a Unicode string.
-
-        :param prompt: A Unicode string that is presented to the user.
-        """
-        # For Python 2, raw_input takes a byte string argument for the prompt.
-        # This must be encoded using the encoding used by sys.stdout.
-        # The result is a byte string encoding using sys.stdin.encoding.
-        # However, if the program is not being run interactively, sys.stdout
-        # and sys.stdin may not have encoding attributes.
-        # In that case we don't print a prompt (stdin/out isn't interactive,
-        # so prompting is pointless), and we assume the returned data is
-        # encoded using sys.getdefaultencoding(). This may not be right,
-        # but it's likely the best we can do.
-        # Isn't Python 2 encoding support wonderful? :-)
-        if sys.stdout.encoding:
-            prompt = prompt.encode(sys.stdout.encoding)
-        else:
-            prompt = ''
-        enc = sys.stdin.encoding or sys.getdefaultencoding()
-        return raw_input(prompt).decode(enc)
-
 
 if PY3:  # Forced testing
 
