commit 14e50f82a752cb4447835262923dd3f768c5fe6c
Author: Andrey Shpak <insspb@users.noreply.github.com>
Date:   Sat Apr 18 19:22:58 2020 +0300

    Added: docstrings for cookiecutter test files (#1377)

diff --git a/tests/conftest.py b/tests/conftest.py
index 0ae6f68..fc9fcfb 100644
--- a/tests/conftest.py
+++ b/tests/conftest.py
@@ -56,8 +56,7 @@ def restore_backup_dir(original_dir, backup_dir, original_dir_found):
 
 @pytest.fixture(scope='function')
 def clean_system(request):
-    """
-    Fixture that simulates a clean system with no config/cloned cookiecutters.
+    """Fixture. Simulates a clean system with no configured or cloned cookiecutters.
 
     It runs code which can be regarded as setup code as known from a unittest
     TestCase. Additionally it defines a local function referring to values
diff --git a/tests/test_environment.py b/tests/test_environment.py
index 034d9a6..693d4bc 100644
--- a/tests/test_environment.py
+++ b/tests/test_environment.py
@@ -9,11 +9,8 @@ from cookiecutter.exceptions import UnknownExtension
 
 
 def test_env_should_raise_for_unknown_extension():
-    context = {
-        'cookiecutter': {
-            '_extensions': ['foobar']
-        }
-    }
+    """Test should raise if extension not installed in system."""
+    context = {'cookiecutter': {'_extensions': ['foobar']}}
 
     with pytest.raises(UnknownExtension) as err:
         StrictEnvironment(context=context, keep_trailing_newline=True)
@@ -21,6 +18,10 @@ def test_env_should_raise_for_unknown_extension():
     assert 'Unable to load extension: ' in str(err.value)
 
 
-def test_env_should_come_with_jinja2_time_extension():
+def test_env_should_come_with_default_extensions():
+    """Verify default extensions loaded with StrictEnvironment."""
     env = StrictEnvironment(keep_trailing_newline=True)
     assert 'jinja2_time.jinja2_time.TimeExtension' in env.extensions
+    assert 'cookiecutter.extensions.JsonifyExtension' in env.extensions
+    assert 'cookiecutter.extensions.RandomStringExtension' in env.extensions
+    assert 'cookiecutter.extensions.SlugifyExtension' in env.extensions
diff --git a/tests/test_exceptions.py b/tests/test_exceptions.py
index f9288e2..9927da0 100644
--- a/tests/test_exceptions.py
+++ b/tests/test_exceptions.py
@@ -8,6 +8,7 @@ from cookiecutter import exceptions
 
 
 def test_undefined_variable_to_str():
+    """Verify string representation of errors formatted in expected form."""
     undefined_var_error = exceptions.UndefinedVariableInTemplate(
         'Beautiful is better than ugly',
         UndefinedError('Errors should never pass silently'),
diff --git a/tests/test_generate_copy_without_render.py b/tests/test_generate_copy_without_render.py
index 5fe810e..1c79e82 100644
--- a/tests/test_generate_copy_without_render.py
+++ b/tests/test_generate_copy_without_render.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
 
-"""test_generate_copy_without_render."""
+"""Verify correct work of `_copy_without_render` context option."""
 
 from __future__ import unicode_literals
 import os
@@ -10,17 +10,21 @@ from cookiecutter import generate
 from cookiecutter import utils
 
 
-@pytest.fixture(scope='function')
-def remove_test_dir(request):
-    """Remove the folder that is created by the test."""
-    def fin_remove_test_dir():
-        if os.path.exists('test_copy_without_render'):
-            utils.rmtree('test_copy_without_render')
-    request.addfinalizer(fin_remove_test_dir)
+@pytest.fixture
+def remove_test_dir():
+    """Fixture. Remove the folder that is created by the test."""
+    yield
+    if os.path.exists('test_copy_without_render'):
+        utils.rmtree('test_copy_without_render')
 
 
 @pytest.mark.usefixtures('clean_system', 'remove_test_dir')
 def test_generate_copy_without_render_extensions():
+    """Verify correct work of `_copy_without_render` context option.
+
+    Some files/directories should be rendered during invocation,
+    some just copied, without any modification.
+    """
     generate.generate_files(
         context={
             'cookiecutter': {
diff --git a/tests/test_get_user_config.py b/tests/test_get_user_config.py
index de28652..380e1d9 100644
--- a/tests/test_get_user_config.py
+++ b/tests/test_get_user_config.py
@@ -1,16 +1,10 @@
 # -*- coding: utf-8 -*-
 
-"""
-test_get_user_config.
-
-Tests formerly known from a unittest residing in test_config.py named
-TestGetUserConfig.test_get_user_config_valid
-TestGetUserConfig.test_get_user_config_invalid
-TestGetUserConfig.test_get_user_config_nonexistent
-"""
+"""Tests to verify correct work with user configs and system/user variables inside."""
 
 import os
 import shutil
+
 import pytest
 
 from cookiecutter import config
@@ -19,11 +13,12 @@ from cookiecutter.exceptions import InvalidConfiguration
 
 @pytest.fixture(scope='module')
 def user_config_path():
+    """Fixture. Return user config path for current user."""
     return os.path.expanduser('~/.cookiecutterrc')
 
 
 @pytest.fixture(scope='function')
-def back_up_rc(request, user_config_path):
+def back_up_rc(user_config_path):
     """
     Back up an existing cookiecutter rc and restore it after the test.
 
@@ -35,26 +30,20 @@ def back_up_rc(request, user_config_path):
         shutil.copy(user_config_path, user_config_path_backup)
         os.remove(user_config_path)
 
-    def remove_test_rc():
-        """Remove the ~/.cookiecutterrc that has been created in the test."""
-        if os.path.exists(user_config_path):
-            os.remove(user_config_path)
-
-    def restore_original_rc():
-        """If it existed, restore the original ~/.cookiecutterrc."""
-        if os.path.exists(user_config_path_backup):
-            shutil.copy(user_config_path_backup, user_config_path)
-            os.remove(user_config_path_backup)
+    yield
+    # Remove the ~/.cookiecutterrc that has been created in the test.
+    if os.path.exists(user_config_path):
+        os.remove(user_config_path)
 
-    # According to the py.test source code finalizers are popped from an
-    # internal list that we populated via 'addfinalizer'. As a result the
-    # last-added finalizer function is executed first.
-    request.addfinalizer(restore_original_rc)
-    request.addfinalizer(remove_test_rc)
+    # If it existed, restore the original ~/.cookiecutterrc.
+    if os.path.exists(user_config_path_backup):
+        shutil.copy(user_config_path_backup, user_config_path)
+        os.remove(user_config_path_backup)
 
 
 @pytest.fixture
 def custom_config():
+    """Fixture. Return expected custom configuration for future tests validation."""
     return {
         'default_context': {
             'full_name': 'Firstname Lastname',
@@ -74,7 +63,7 @@ def custom_config():
 
 @pytest.mark.usefixtures('back_up_rc')
 def test_get_user_config_valid(user_config_path, custom_config):
-    """Get config from a valid ~/.cookiecutterrc file."""
+    """Validate user config correctly parsed if exist and correctly formatted."""
     shutil.copy('tests/test-config/valid-config.yaml', user_config_path)
     conf = config.get_user_config()
 
@@ -83,7 +72,7 @@ def test_get_user_config_valid(user_config_path, custom_config):
 
 @pytest.mark.usefixtures('back_up_rc')
 def test_get_user_config_invalid(user_config_path):
-    """Get config from an invalid ~/.cookiecutterrc file."""
+    """Validate `InvalidConfiguration` raised when provided user config malformed."""
     shutil.copy('tests/test-config/invalid-config.yaml', user_config_path)
     with pytest.raises(InvalidConfiguration):
         config.get_user_config()
@@ -91,16 +80,18 @@ def test_get_user_config_invalid(user_config_path):
 
 @pytest.mark.usefixtures('back_up_rc')
 def test_get_user_config_nonexistent():
-    """Get config from a nonexistent ~/.cookiecutterrc file."""
+    """Validate default app config returned, if user does not have own config."""
     assert config.get_user_config() == config.DEFAULT_CONFIG
 
 
 @pytest.fixture
-def custom_config_path(custom_config):
+def custom_config_path():
+    """Fixture. Return path to custom user config for tests."""
     return 'tests/test-config/valid-config.yaml'
 
 
 def test_specify_config_path(mocker, custom_config_path, custom_config):
+    """Validate provided custom config path should be respected and parsed."""
     spy_get_config = mocker.spy(config, 'get_config')
 
     user_config = config.get_user_config(custom_config_path)
@@ -110,27 +101,31 @@ def test_specify_config_path(mocker, custom_config_path, custom_config):
 
 
 def test_default_config_path(user_config_path):
+    """Validate app configuration. User config path should match default path."""
     assert config.USER_CONFIG_PATH == user_config_path
 
 
 def test_default_config_from_env_variable(
         monkeypatch, custom_config_path, custom_config):
+    """Validate app configuration. User config path should be parsed from sys env."""
     monkeypatch.setenv('COOKIECUTTER_CONFIG', custom_config_path)
 
     user_config = config.get_user_config()
     assert user_config == custom_config
 
 
-def test_force_default_config(mocker):
+def test_force_default_config(mocker, custom_config_path):
+    """Validate `default_config=True` should ignore provided custom user config."""
     spy_get_config = mocker.spy(config, 'get_config')
 
-    user_config = config.get_user_config(None, default_config=True)
+    user_config = config.get_user_config(custom_config_path, default_config=True)
 
     assert user_config == config.DEFAULT_CONFIG
     assert not spy_get_config.called
 
 
 def test_expand_user_for_directories_in_config(monkeypatch):
+    """Validate user pointers expanded in user configs."""
     def _expanduser(path):
         return path.replace('~', 'Users/bob')
     monkeypatch.setattr('os.path.expanduser', _expanduser)
@@ -143,6 +138,7 @@ def test_expand_user_for_directories_in_config(monkeypatch):
 
 
 def test_expand_vars_for_directories_in_config(monkeypatch):
+    """Validate environment variables expanded in user configs."""
     monkeypatch.setenv('COOKIES', 'Users/bob/cookies')
 
     config_file = 'tests/test-config/config-expand-vars.yaml'
diff --git a/tests/test_output_folder.py b/tests/test_output_folder.py
index b0d2c6f..7cd9ad7 100644
--- a/tests/test_output_folder.py
+++ b/tests/test_output_folder.py
@@ -20,15 +20,15 @@ from cookiecutter import utils
 
 @pytest.fixture(scope='function')
 def remove_output_folder(request):
-    """Remove the output folder in case it exists on disk."""
-    def finalizer_remove_output_folder():
-        if os.path.exists('output_folder'):
-            utils.rmtree('output_folder')
-    request.addfinalizer(finalizer_remove_output_folder)
+    """Remove the output folder after test."""
+    yield
+    if os.path.exists('output_folder'):
+        utils.rmtree('output_folder')
 
 
 @pytest.mark.usefixtures('clean_system', 'remove_output_folder')
 def test_output_folder():
+    """Tests should correctly create content, as output_folder does not yet exist."""
     context = generate.generate_context(
         context_file='tests/test-output-folder/cookiecutter.json'
     )
@@ -53,6 +53,7 @@ It is 2014."""
 
 @pytest.mark.usefixtures('clean_system', 'remove_output_folder')
 def test_exception_when_output_folder_exists():
+    """Tests should raise error as output folder created before `generate_files`."""
     context = generate.generate_context(
         context_file='tests/test-output-folder/cookiecutter.json'
     )
