commit 7b905c952de6325ff7f18cb8ca2bedaae3e66b83
Author: Jeremy Carbaugh <jeremy@jcarbaugh.com>
Date:   Fri Jun 3 16:41:39 2016 -0700

    Handle empty hook file or other OSErrors

diff --git a/cookiecutter/hooks.py b/cookiecutter/hooks.py
index 254bc2e..630d7b1 100644
--- a/cookiecutter/hooks.py
+++ b/cookiecutter/hooks.py
@@ -8,6 +8,7 @@ cookiecutter.hooks
 Functions for discovering and executing various cookiecutter hooks.
 """
 
+import errno
 import io
 import logging
 import os
@@ -65,15 +66,23 @@ def run_script(script_path, cwd='.'):
 
     utils.make_executable(script_path)
 
-    proc = subprocess.Popen(
-        script_command,
-        shell=run_thru_shell,
-        cwd=cwd
-    )
-    exit_status = proc.wait()
-    if exit_status != EXIT_SUCCESS:
+    try:
+        proc = subprocess.Popen(
+            script_command,
+            shell=run_thru_shell,
+            cwd=cwd
+        )
+        exit_status = proc.wait()
+        if exit_status != EXIT_SUCCESS:
+            raise FailedHookException(
+                "Hook script failed (exit status: %d)" % exit_status)
+    except OSError as oe:
+        if oe.errno == errno.ENOEXEC:
+            raise FailedHookException(
+                "Hook script failed, might be an "
+                "empty file or missing a shebang")
         raise FailedHookException(
-            "Hook script failed (exit status: %d)" % exit_status)
+            "Hook script failed (error: %s)" % oe)
 
 
 def run_script_with_context(script_path, cwd, context):
diff --git a/tests/test-shellhooks-empty/hooks/pre_gen_project.sh b/tests/test-shellhooks-empty/hooks/pre_gen_project.sh
new file mode 100644
index 0000000..e69de29
diff --git a/tests/test-shellhooks-empty/input{{cookiecutter.shellhooks}}/README.rst b/tests/test-shellhooks-empty/input{{cookiecutter.shellhooks}}/README.rst
new file mode 100644
index 0000000..8c02abb
--- /dev/null
+++ b/tests/test-shellhooks-empty/input{{cookiecutter.shellhooks}}/README.rst
@@ -0,0 +1 @@
+Empty, just like the hooks we are testing.
diff --git a/tests/test_generate_hooks.py b/tests/test_generate_hooks.py
index 7586c78..9468c3a 100644
--- a/tests/test_generate_hooks.py
+++ b/tests/test_generate_hooks.py
@@ -13,6 +13,7 @@ TestHooks.test_run_shell_hooks
 """
 
 from __future__ import unicode_literals
+import errno
 import os
 import sys
 import stat
@@ -20,6 +21,7 @@ import pytest
 
 from cookiecutter import generate
 from cookiecutter import utils
+from cookiecutter.exceptions import FailedHookException
 
 
 @pytest.fixture(scope='function')
@@ -74,6 +76,41 @@ def test_run_python_hooks_cwd():
     assert os.path.exists('inputpyhooks/python_post.txt')
 
 
+@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
+def test_empty_hooks():
+    with pytest.raises(FailedHookException) as excinfo:
+        generate.generate_files(
+            context={
+                'cookiecutter': {'shellhooks': 'shellhooks'}
+            },
+            repo_dir='tests/test-shellhooks-empty/',
+            output_dir='tests/test-shellhooks-empty/'
+        )
+    assert 'shebang' in str(excinfo.value)
+
+
+@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
+def test_oserror_hooks(mocker):
+
+    message = 'Out of memory'
+
+    err = OSError(message)
+    err.errno = errno.ENOMEM
+
+    prompt = mocker.patch('subprocess.Popen')
+    prompt.side_effect = err
+
+    with pytest.raises(FailedHookException) as excinfo:
+        generate.generate_files(
+            context={
+                'cookiecutter': {'shellhooks': 'shellhooks'}
+            },
+            repo_dir='tests/test-shellhooks-empty/',
+            output_dir='tests/test-shellhooks-empty/'
+        )
+    assert message in str(excinfo.value)
+
+
 def make_test_repo(name):
     hooks = os.path.join(name, 'hooks')
     template = os.path.join(name, 'input{{cookiecutter.shellhooks}}')
