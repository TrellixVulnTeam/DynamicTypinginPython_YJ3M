commit b13e210d0d7f90147d18e523b090b48564f78d42
Author: Nicholas Bollweg (Nick) <nick.bollweg@gmail.com>
Date:   Thu Oct 23 21:12:11 2014 -0400

    docs, and adding cookiecutter prefix for consistency

diff --git a/cookiecutter/prompt.py b/cookiecutter/prompt.py
index 8502fb5..c3daa28 100755
--- a/cookiecutter/prompt.py
+++ b/cookiecutter/prompt.py
@@ -19,12 +19,14 @@ def prompt_for_config(context, no_input=False):
     """
     Prompts the user to enter new config, using context as a source for the
     field names and sample values.
+    
+    :param no_input: Prompt the user at command line for manual configuration?
     """
     cookiecutter_dict = {}
     env = Environment()
 
     for key, raw in iteritems(context['cookiecutter']):
-        val = env.from_string(raw).render(**cookiecutter_dict)
+        val = env.from_string(raw).render(cookiecutter=cookiecutter_dict)
 
         if not no_input:
             prompt = "{0} (default is \"{1}\")? ".format(key, val)
diff --git a/docs/advanced_usage.rst b/docs/advanced_usage.rst
index a1c4b2e..bdce1c6 100644
--- a/docs/advanced_usage.rst
+++ b/docs/advanced_usage.rst
@@ -140,6 +140,43 @@ If you combine an `extra_context` dict with the `no_input` argument, you can pro
 
 See the :ref:`API Reference <apiref>` for more details.
 
+Templates in Context Values
+--------------------------------
+
+The values (but not the keys!) of `cookiecutter.json` are also Jinja2 templates.
+Values from user prompts are added to the context immediately, such that one
+context value can be derived from previous values. This approach can potentially
+save your user a lot of keystrokes by providing more sensible defaults.
+
+Basic Example: Templates in Context
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Python packages show some patterns for their naming conventions:
+
+* a human-readable project name
+* a lowercase, dashed repository name
+* an importable, dash-less package name
+
+Here is a `cookiecuttter.json` with templated values for this pattern::
+
+    {
+      "project_name": "My New Project",
+      "repo_name": "{{ cookiecutter.project_name|lower|replace(' ', '-') }}",
+      "pkg_name": "{{ cookiecutter.repo_name|replace('-', '') }}"
+    }
+
+If the user takes the defaults, or uses `no_input`, the templated values will 
+be:
+
+* `my-new-project`
+* `mynewproject`
+
+Or, if the user gives `Yet Another New Project`, the values will be:
+
+* `yet-another-new-project`
+* `yetanothernewproject`
+
+
 .. _command_line_options:
 
 Command Line Options
diff --git a/tests/fake-repo-tmpl/cookiecutter.json b/tests/fake-repo-tmpl/cookiecutter.json
index 60acb3a..ba75c70 100755
--- a/tests/fake-repo-tmpl/cookiecutter.json
+++ b/tests/fake-repo-tmpl/cookiecutter.json
@@ -3,7 +3,7 @@
 	"email": "audreyr@gmail.com",
 	"github_username": "audreyr",
 	"project_name": "Fake Project Templated",
-	"repo_name": "{{ project_name|lower|replace(' ', '-') }}",
+	"repo_name": "{{ cookiecutter.project_name|lower|replace(' ', '-') }}",
 	"project_short_description": "This is a fake project.",
 	"release_date": "2013-07-28",
 	"year": "2013",
diff --git a/tests/test_prompt.py b/tests/test_prompt.py
index 6b2e316..3e815e5 100755
--- a/tests/test_prompt.py
+++ b/tests/test_prompt.py
@@ -57,7 +57,7 @@ class TestPrompt(unittest.TestCase):
     def test_unicode_prompt_for_templated_config(self):
         context = {"cookiecutter": OrderedDict([
             ("project_name", u"A New Project"),
-            ("pkg_name", u"{{ project_name|lower|replace(' ', '') }}")
+            ("pkg_name", u"{{ cookiecutter.project_name|lower|replace(' ', '') }}")
         ])}
 
         cookiecutter_dict = prompt.prompt_for_config(context)
