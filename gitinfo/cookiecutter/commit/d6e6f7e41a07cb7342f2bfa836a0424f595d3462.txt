commit d6e6f7e41a07cb7342f2bfa836a0424f595d3462
Author: Andrey Shpak <insspb@users.noreply.github.com>
Date:   Sun Dec 22 14:55:45 2019 +0300

    Updated docstrings in test_unzip.py to better match pep257 (#1236) (#1262)
    
    Updated docstrings in test_unzip.py to better match pep257 (#1236) (#1262)

diff --git a/tests/zipfile/test_unzip.py b/tests/zipfile/test_unzip.py
index c48dbff..d8ab757 100644
--- a/tests/zipfile/test_unzip.py
+++ b/tests/zipfile/test_unzip.py
@@ -1,13 +1,18 @@
 # -*- coding: utf-8 -*-
+
+"""Tests for function unzip() from zipfile module."""
+
 import tempfile
 
 import pytest
 
 from cookiecutter import zipfile
+
 from cookiecutter.exceptions import InvalidZipRepository
 
 
 def mock_download():
+    """Fake download function."""
     with open('tests/files/fake-repo-tmpl.zip', 'rb') as zf:
         chunk = zf.read(1024)
         while chunk:
@@ -16,8 +21,7 @@ def mock_download():
 
 
 def test_unzip_local_file(mocker, tmpdir):
-    """In `unzip()`, a local file reference can be unzipped.
-    """
+    """Local file reference can be unzipped."""
     mock_prompt_and_delete = mocker.patch(
         'cookiecutter.zipfile.prompt_and_delete',
         return_value=True,
@@ -37,8 +41,7 @@ def test_unzip_local_file(mocker, tmpdir):
 
 
 def test_unzip_protected_local_file_environment_password(mocker, tmpdir):
-    """In `unzip()`, the environment can be used to provide a repo password
-    """
+    """In `unzip()`, the environment can be used to provide a repo password."""
     mock_prompt_and_delete = mocker.patch(
         'cookiecutter.zipfile.prompt_and_delete',
         return_value=True,
@@ -59,8 +62,7 @@ def test_unzip_protected_local_file_environment_password(mocker, tmpdir):
 
 
 def test_unzip_protected_local_file_bad_environment_password(mocker, tmpdir):
-    """In `unzip()`, an error occurs if the environment has a bad password.
-    """
+    """In `unzip()`, an error occurs if the environment has a bad password."""
     mocker.patch(
         'cookiecutter.zipfile.prompt_and_delete',
         return_value=True,
@@ -79,8 +81,7 @@ def test_unzip_protected_local_file_bad_environment_password(mocker, tmpdir):
 
 
 def test_unzip_protected_local_file_user_password_with_noinput(mocker, tmpdir):
-    """In `unzip()`, you can't unpack a password-protected repo in no_input mode
-    """
+    """Can't unpack a password-protected repo in no_input mode."""
     mocker.patch(
         'cookiecutter.zipfile.prompt_and_delete',
         return_value=True,
@@ -99,8 +100,7 @@ def test_unzip_protected_local_file_user_password_with_noinput(mocker, tmpdir):
 
 
 def test_unzip_protected_local_file_user_password(mocker, tmpdir):
-    """In `unzip()`, a password-protected local file reference can be unzipped.
-    """
+    """A password-protected local file reference can be unzipped."""
     mock_prompt_and_delete = mocker.patch(
         'cookiecutter.zipfile.prompt_and_delete',
         return_value=True,
@@ -124,8 +124,7 @@ def test_unzip_protected_local_file_user_password(mocker, tmpdir):
 
 
 def test_unzip_protected_local_file_user_bad_password(mocker, tmpdir):
-    """In `unzip()`, If you can't provide a valid password, you get an error
-    """
+    """Error in `unzip()`, if user can't provide a valid password."""
     mocker.patch(
         'cookiecutter.zipfile.prompt_and_delete',
         return_value=True,
@@ -147,8 +146,7 @@ def test_unzip_protected_local_file_user_bad_password(mocker, tmpdir):
 
 
 def test_empty_zip_file(mocker, tmpdir):
-    """In `unzip()`, an empty file raises an error.
-    """
+    """In `unzip()`, an empty file raises an error."""
     mocker.patch(
         'cookiecutter.zipfile.prompt_and_delete',
         return_value=True,
@@ -166,8 +164,7 @@ def test_empty_zip_file(mocker, tmpdir):
 
 
 def test_non_repo_zip_file(mocker, tmpdir):
-    """In `unzip()`, a repository must have a top level directory
-    """
+    """In `unzip()`, a repository must have a top level directory."""
     mocker.patch(
         'cookiecutter.zipfile.prompt_and_delete',
         return_value=True,
@@ -185,8 +182,7 @@ def test_non_repo_zip_file(mocker, tmpdir):
 
 
 def test_bad_zip_file(mocker, tmpdir):
-    """In `unzip()`, a corrupted zip file raises an error.
-    """
+    """In `unzip()`, a corrupted zip file raises an error."""
     mocker.patch(
         'cookiecutter.zipfile.prompt_and_delete',
         return_value=True,
@@ -204,8 +200,7 @@ def test_bad_zip_file(mocker, tmpdir):
 
 
 def test_unzip_url(mocker, tmpdir):
-    """In `unzip()`, a url will be downloaded and unzipped
-    """
+    """In `unzip()`, a url will be downloaded and unzipped."""
     mock_prompt_and_delete = mocker.patch(
         'cookiecutter.zipfile.prompt_and_delete',
         return_value=True,
@@ -234,9 +229,7 @@ def test_unzip_url(mocker, tmpdir):
 
 
 def test_unzip_url_existing_cache(mocker, tmpdir):
-    """In `unzip()`, a url will be downloaded and unzipped; an existing zip file
-    will be removed.
-    """
+    """Url should be downloaded and unzipped, old zip file will be removed."""
     mock_prompt_and_delete = mocker.patch(
         'cookiecutter.zipfile.prompt_and_delete',
         return_value=True,
@@ -269,8 +262,7 @@ def test_unzip_url_existing_cache(mocker, tmpdir):
 
 
 def test_unzip_url_existing_cache_no_input(mocker, tmpdir):
-    """In `unzip()`, if no_input is provided, the existing file will be removed.
-    """
+    """If no_input is provided, the existing file should be removed."""
     request = mocker.MagicMock()
     request.iter_content.return_value = mock_download()
 
@@ -297,9 +289,7 @@ def test_unzip_url_existing_cache_no_input(mocker, tmpdir):
 
 
 def test_unzip_should_abort_if_no_redownload(mocker, tmpdir):
-    """In `unzip()`, if user doesn't want to download, Cookiecutter should exit
-    without cloning anything.
-    """
+    """Should exit without cloning anything If no redownload."""
     mocker.patch(
         'cookiecutter.zipfile.prompt_and_delete',
         side_effect=SystemExit,
