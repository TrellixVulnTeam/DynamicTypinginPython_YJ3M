commit 8349b59610c2f4f150fb1369fa602234420b015c
Author: Audrey Roy <audreyr@gmail.com>
Date:   Sun Sep 1 20:10:47 2013 +0200

    Change tests to test expected new hook dir (should fail).

diff --git a/tests/test_generate.py b/tests/test_generate.py
index 297c8eb..c970057 100755
--- a/tests/test_generate.py
+++ b/tests/test_generate.py
@@ -173,31 +173,31 @@ class TestHooks(unittest.TestCase):
     def test_ignore_hooks_dirs(self):
         generate.generate_files(
             context={'pyhooks': 'pyhooks'},
-            template_dir='tests/input{{pyhooks}}'
+            template_dir='tests/test-pyhooks/input{{pyhooks}}'
         )
-        self.assertFalse(os.path.exists('tests/inputpyhooks/hooks'))
+        self.assertFalse(os.path.exists('tests/test-pyhooks/inputpyhooks/hooks'))
 
     def test_run_python_hooks(self):
         generate.generate_files(
             context={'pyhooks': 'pyhooks'},
-            template_dir='tests/input{{pyhooks}}'
+            template_dir='tests/test-pyhooks/input{{pyhooks}}'
         )
-        self.assertTrue(os.path.exists('tests/inputpyhooks/python_pre.txt'))
-        self.assertTrue(os.path.exists('tests/inputpyhooks/python_post.txt'))
+        self.assertTrue(os.path.exists('tests/test-pyhooks/inputpyhooks/python_pre.txt'))
+        self.assertTrue(os.path.exists('tests/test-pyhooks/inputpyhooks/python_post.txt'))
 
     def test_run_shell_hooks(self):
         generate.generate_files(
             context={'shellhooks': 'shellhooks'},
-            template_dir='tests/input{{shellhooks}}'
+            template_dir='tests/test-shellhooks/input{{shellhooks}}'
         )
-        self.assertTrue(os.path.exists('tests/inputshellhooks/shell_pre.txt'))
-        self.assertTrue(os.path.exists('tests/inputshellhooks/shell_post.txt'))
+        self.assertTrue(os.path.exists('tests/test-shellhooks/inputshellhooks/shell_pre.txt'))
+        self.assertTrue(os.path.exists('tests/test-shellhooks/inputshellhooks/shell_post.txt'))
 
     def tearDown(self):
-        if os.path.exists('tests/inputpyhooks'):
-            shutil.rmtree('tests/inputpyhooks')
-        if os.path.exists('tests/inputshellhooks'):
-            shutil.rmtree('tests/inputshellhooks')
+        if os.path.exists('tests/test-pyhooks/inputpyhooks'):
+            shutil.rmtree('tests/test-pyhooks/inputpyhooks')
+        if os.path.exists('tests/test-shellhooks/inputshellhooks'):
+            shutil.rmtree('tests/test-shellhooks/inputshellhooks')
 
 
 if __name__ == '__main__':
diff --git a/tests/test_hooks.py b/tests/test_hooks.py
index 61eea0a..1eff4ea 100755
--- a/tests/test_hooks.py
+++ b/tests/test_hooks.py
@@ -19,7 +19,7 @@ class TestFindHooks(unittest.TestCase):
 
     def test_find_hooks(self):
         '''Getting the list of all defined hooks'''
-        repo_path = 'tests/input{{hooks}}'
+        repo_path = 'tests/test-hooks/input{{hooks}}'
         with utils.work_in(repo_path):
             self.assertEqual({
                 'pre_gen_project': os.path.abspath('hooks/pre_gen_project.py'),
@@ -34,18 +34,18 @@ class TestFindHooks(unittest.TestCase):
 
 class TestExternalHooks(unittest.TestCase):
 
-    repo_path  = os.path.abspath('tests/input{{hooks}}')
-    hooks_path = os.path.join(repo_path, 'hooks')
+    repo_path  = os.path.abspath('tests/test-hooks/input{{hooks}}')
+    hooks_path = os.path.abspath('tests/test-hooks/hooks')
 
     def tearDown(self):
         if os.path.exists('python_pre.txt'):
             os.remove('python_pre.txt')
         if os.path.exists('shell_post.txt'):
             os.remove('shell_post.txt')
-        if os.path.exists('tests/python_pre.txt'):
-            os.remove('tests/python_pre.txt')
-        if os.path.exists('tests/shell_post.txt'):
-            os.remove('tests/shell_post.txt')
+        if os.path.exists('tests/test-hooks/python_pre.txt'):
+            os.remove('tests/test-hooks/python_pre.txt')
+        if os.path.exists('tests/test-hooks/shell_post.txt'):
+            os.remove('tests/test-hooks/shell_post.txt')
 
     def test_run_hook(self):
         '''execute a hook script, independently of project generation'''
