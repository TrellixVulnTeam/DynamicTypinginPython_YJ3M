commit 51b1fe8decd55718106a9df5d2db8e998575046b
Author: Sorin Sbarnea <ssbarnea@users.noreply.github.com>
Date:   Sun Jan 19 13:13:19 2020 +0000

    D205: rule activation (#1286)

diff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml
index a8aaea7..aff6ddc 100644
--- a/.pre-commit-config.yaml
+++ b/.pre-commit-config.yaml
@@ -1,7 +1,7 @@
 ---
 repos:
   - repo: https://github.com/pre-commit/pre-commit-hooks
-    rev: v2.2.3
+    rev: v2.4.0
     hooks:
       - id: trailing-whitespace
         args: [--markdown-linebreak-ext=md]
@@ -11,7 +11,7 @@ repos:
       - id: check-merge-conflict
       - id: check-symlinks
   - repo: https://gitlab.com/pycqa/flake8
-    rev: 3.7.8
+    rev: 3.7.9
     hooks:
       - id: flake8
         additional_dependencies:
diff --git a/setup.cfg b/setup.cfg
index ef548a7..99f9c4c 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -11,8 +11,9 @@ tag_name = {new_version}
 [flake8]
 # BLK100 excluded temporary until we enable python black
 # D* added temporary to ease enablement remove them while addressing them
-ignore = E731,BLK100,D100,D101,D102,D103,D200,D202,D205,D400
+ignore = E731,BLK100,D100,D101,D102,D103,D200,D202,D400
 # D400 First line should end with a period
+statistics = 1
 
 [bdist_wheel]
 universal = 1
diff --git a/tests/replay/test_dump.py b/tests/replay/test_dump.py
index c660066..006c4e6 100644
--- a/tests/replay/test_dump.py
+++ b/tests/replay/test_dump.py
@@ -2,7 +2,6 @@
 
 """
 test_dump
----------
 """
 
 import json
@@ -47,7 +46,7 @@ def test_type_error_if_not_dict_context(replay_test_dir, template_name):
 
 
 def test_value_error_if_key_missing_in_context(replay_test_dir, template_name):
-    """Test that replay.dump raises if the context does not contain a key
+    """Test that replay.dump raises if the context does not contain a key \
     named 'cookiecutter'.
     """
     with pytest.raises(ValueError):
@@ -85,7 +84,7 @@ def test_ioerror_if_replay_dir_creation_fails(
 
 def test_run_json_dump(mocker, mock_ensure_success, mock_user_config,
                        template_name, context, replay_test_dir, replay_file):
-    """Test that replay.dump runs json.dump under the hood and that the context
+    """Test that replay.dump runs json.dump under the hood and that the context \
     is correctly written to the expected file in the replay_dir.
     """
     spy_get_replay_file = mocker.spy(replay, 'get_file_name')
diff --git a/tests/replay/test_load.py b/tests/replay/test_load.py
index 098b36d..127551d 100644
--- a/tests/replay/test_load.py
+++ b/tests/replay/test_load.py
@@ -2,7 +2,6 @@
 
 """
 test_load
------------
 """
 
 import json
@@ -32,7 +31,7 @@ def test_type_error_if_no_template_name(replay_test_dir):
 
 
 def test_value_error_if_key_missing_in_context(mocker, replay_test_dir):
-    """Test that replay.load raises if the loaded context does not contain
+    """Test that replay.load raises if the loaded context does not contain \
     'cookiecutter'.
     """
     with pytest.raises(ValueError):
@@ -47,7 +46,7 @@ def test_io_error_if_no_replay_file(mocker, replay_test_dir):
 
 def test_run_json_load(mocker, mock_user_config, template_name,
                        context, replay_test_dir, replay_file):
-    """Test that replay.load runs json.load under the hood and that the context
+    """Test that replay.load runs json.load under the hood and that the context \
     is correctly loaded from the file in replay_dir.
     """
     spy_get_replay_file = mocker.spy(replay, 'get_file_name')
diff --git a/tests/replay/test_replay.py b/tests/replay/test_replay.py
index d91bc06..78639c2 100644
--- a/tests/replay/test_replay.py
+++ b/tests/replay/test_replay.py
@@ -2,7 +2,6 @@
 
 """
 test_replay
------------
 """
 
 import os
diff --git a/tests/repository/test_determine_repo_dir_clones_repo.py b/tests/repository/test_determine_repo_dir_clones_repo.py
index 3a4e6b0..7bf1e32 100644
--- a/tests/repository/test_determine_repo_dir_clones_repo.py
+++ b/tests/repository/test_determine_repo_dir_clones_repo.py
@@ -12,8 +12,8 @@ from cookiecutter import repository, exceptions
     ('http://example.com/path/to/zipfile.zip', True),
 ])
 def test_zipfile_unzip(mocker, template, is_url, user_config_data):
-    """`unzip()` should be called with correct args when
-    `determine_repo_dir()` is passed a zipfile, or a URL
+    """`unzip()` should be called with correct args when \
+    `determine_repo_dir()` is passed a zipfile, or a URL \
     to a zipfile.
     """
 
@@ -56,7 +56,7 @@ def template_url():
 
 def test_repository_url_should_clone(
         mocker, template_url, user_config_data):
-    """`clone()` should be called with correct args when
+    """`clone()` should be called with correct args when \
     `determine_repo_dir()` is passed a repository template url.
     """
 
diff --git a/tests/repository/test_determine_repo_dir_finds_subdirectories.py b/tests/repository/test_determine_repo_dir_finds_subdirectories.py
index f05020b..13fd16f 100644
--- a/tests/repository/test_determine_repo_dir_finds_subdirectories.py
+++ b/tests/repository/test_determine_repo_dir_finds_subdirectories.py
@@ -44,7 +44,7 @@ def test_should_find_existing_cookiecutter(
 
 
 def test_local_repo_typo(template, user_config_data, cloned_cookiecutter_path):
-    """An unknown local repository should raise a `RepositoryNotFound`
+    """An unknown local repository should raise a `RepositoryNotFound` \
     exception.
     """
     with pytest.raises(exceptions.RepositoryNotFound) as err:
diff --git a/tests/repository/test_determine_repository_should_use_local_repo.py b/tests/repository/test_determine_repository_should_use_local_repo.py
index 196cfbd..e8d3ab9 100644
--- a/tests/repository/test_determine_repository_should_use_local_repo.py
+++ b/tests/repository/test_determine_repository_should_use_local_repo.py
@@ -20,7 +20,7 @@ def test_finds_local_repo(tmpdir):
 
 
 def test_local_repo_with_no_context_raises(tmpdir):
-    """A local repository without a cookiecutter.json should raise a
+    """A local repository without a cookiecutter.json should raise a \
     `RepositoryNotFound` exception.
     """
     template_path = os.path.join('tests', 'fake-repo-bad')
@@ -46,8 +46,7 @@ def test_local_repo_with_no_context_raises(tmpdir):
 
 
 def test_local_repo_typo(tmpdir):
-    """An unknown local repository should raise a `RepositoryNotFound`
-    exception.
+    """An unknown local repository should raise a `RepositoryNotFound` exception.
     """
     template_path = os.path.join('tests', 'unknown-repo')
     with pytest.raises(exceptions.RepositoryNotFound) as err:
diff --git a/tests/test_cookiecutter_invocation.py b/tests/test_cookiecutter_invocation.py
index 49c8919..ae7d4fa 100644
--- a/tests/test_cookiecutter_invocation.py
+++ b/tests/test_cookiecutter_invocation.py
@@ -2,7 +2,6 @@
 
 """
 test_cookiecutter_invocation
-----------------------------
 
 Tests to make sure that cookiecutter can be called from the cli without
 using the entry point set up for the package.
diff --git a/tests/test_cookiecutter_local_no_input.py b/tests/test_cookiecutter_local_no_input.py
index ac9ddd6..c1e9d16 100644
--- a/tests/test_cookiecutter_local_no_input.py
+++ b/tests/test_cookiecutter_local_no_input.py
@@ -2,7 +2,6 @@
 
 """
 test_cookiecutter_local_no_input
---------------------------------
 
 Tests formerly known from a unittest residing in test_main.py named
 TestCookiecutterLocalNoInput.test_cookiecutter
@@ -70,7 +69,7 @@ def test_cookiecutter_no_input_extra_context():
 @pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
 def test_cookiecutter_templated_context():
     """
-    `Call cookiecutter()` with `no_input=True` and templates in the
+    `Call cookiecutter()` with `no_input=True` and templates in the \
     cookiecutter.json file
     """
     main.cookiecutter(
@@ -136,7 +135,7 @@ def test_cookiecutter_dict_values_in_context():
 @pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
 def test_cookiecutter_template_cleanup(mocker):
     """
-    `Call cookiecutter()` with `no_input=True` and templates in the
+    `Call cookiecutter()` with `no_input=True` and templates in the \
     cookiecutter.json file
     """
     mocker.patch(
diff --git a/tests/test_cookiecutter_local_with_input.py b/tests/test_cookiecutter_local_with_input.py
index ade3e47..8fa1324 100644
--- a/tests/test_cookiecutter_local_with_input.py
+++ b/tests/test_cookiecutter_local_with_input.py
@@ -2,7 +2,6 @@
 
 """
 test_cookiecutter_local_with_input
-----------------------------------
 
 Tests formerly known from a unittest residing in test_main.py named
 TestCookiecutterLocalWithInput.test_cookiecutter_local_with_input
diff --git a/tests/test_find.py b/tests/test_find.py
index c7be805..93df83d 100644
--- a/tests/test_find.py
+++ b/tests/test_find.py
@@ -2,7 +2,6 @@
 
 """
 test_find
----------
 
 Tests for `cookiecutter.find` module.
 """
diff --git a/tests/test_generate_context.py b/tests/test_generate_context.py
index 79dbbda..5fa4cd7 100644
--- a/tests/test_generate_context.py
+++ b/tests/test_generate_context.py
@@ -2,7 +2,6 @@
 
 """
 test_generate_context
----------------------
 
 Tests formerly known from a unittest residing in test_generate.py named
 TestGenerateContext.test_generate_context
@@ -72,7 +71,7 @@ def context_data():
 @pytest.mark.parametrize('input_params, expected_context', context_data())
 def test_generate_context(input_params, expected_context):
     """
-    Test the generated context for several input parameters against the
+    Test the generated context for several input parameters against the \
     according expected context.
     """
     assert generate.generate_context(**input_params) == expected_context
@@ -123,7 +122,7 @@ def context_file():
 
 
 def test_choices(context_file, default_context, extra_context):
-    """Make sure that the default for list variables is based on the user
+    """Make sure that the default for list variables is based on the user \
     config and the list as such is not changed to a single value.
     """
     expected_context = {
diff --git a/tests/test_generate_copy_without_render.py b/tests/test_generate_copy_without_render.py
index 599c363..b91ec48 100644
--- a/tests/test_generate_copy_without_render.py
+++ b/tests/test_generate_copy_without_render.py
@@ -2,7 +2,6 @@
 
 """
 test_generate_copy_without_render
----------------------------------
 """
 
 from __future__ import unicode_literals
diff --git a/tests/test_generate_file.py b/tests/test_generate_file.py
index a997475..ff0c2b8 100644
--- a/tests/test_generate_file.py
+++ b/tests/test_generate_file.py
@@ -2,7 +2,6 @@
 
 """
 test_generate_file
-------------------
 
 Tests formerly known from a unittest residing in test_generate.py named
 TestGenerateFile.test_generate_file
diff --git a/tests/test_generate_files.py b/tests/test_generate_files.py
index 65b582f..157726d 100644
--- a/tests/test_generate_files.py
+++ b/tests/test_generate_files.py
@@ -2,7 +2,6 @@
 
 """
 test_generate_files
--------------------
 
 Tests formerly known from a unittest residing in test_generate.py named
 TestGenerateFiles.test_generate_files_nontemplated_exception
@@ -166,7 +165,7 @@ def test_return_rendered_project_dir():
 @pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_generate_files_permissions():
     """
-    simple.txt and script.sh should retain their respective 0o644 and
+    simple.txt and script.sh should retain their respective 0o644 and \
     0o755 permissions
     """
     generate.generate_files(
diff --git a/tests/test_generate_hooks.py b/tests/test_generate_hooks.py
index c624265..8c10421 100644
--- a/tests/test_generate_hooks.py
+++ b/tests/test_generate_hooks.py
@@ -2,7 +2,6 @@
 
 """
 test_generate_hooks
--------------------
 
 Tests formerly known from a unittest residing in test_generate.py named
 TestHooks.test_ignore_hooks_dirs
diff --git a/tests/test_get_config.py b/tests/test_get_config.py
index ff5bb1f..f8d0f45 100644
--- a/tests/test_get_config.py
+++ b/tests/test_get_config.py
@@ -74,7 +74,7 @@ def test_get_config():
 
 def test_get_config_does_not_exist():
     """
-    Check that `exceptions.ConfigDoesNotExistException` is raised when
+    Check that `exceptions.ConfigDoesNotExistException` is raised when \
     attempting to get a non-existent config file.
     """
     with pytest.raises(ConfigDoesNotExistException):
diff --git a/tests/test_get_user_config.py b/tests/test_get_user_config.py
index 8a541f8..d5b3eb7 100644
--- a/tests/test_get_user_config.py
+++ b/tests/test_get_user_config.py
@@ -2,7 +2,6 @@
 
 """
 test_get_user_config
---------------------
 
 Tests formerly known from a unittest residing in test_config.py named
 TestGetUserConfig.test_get_user_config_valid
@@ -27,6 +26,7 @@ def user_config_path():
 def back_up_rc(request, user_config_path):
     """
     Back up an existing cookiecutter rc and restore it after the test.
+
     If ~/.cookiecutterrc is pre-existing, move it to a temp location
     """
     user_config_path_backup = os.path.expanduser('~/.cookiecutterrc.backup')
diff --git a/tests/test_hooks.py b/tests/test_hooks.py
index fcc95ad..60298ae 100644
--- a/tests/test_hooks.py
+++ b/tests/test_hooks.py
@@ -2,7 +2,6 @@
 
 """
 test_hooks
-------------
 
 Tests for `cookiecutter.hooks` module.
 """
@@ -168,7 +167,7 @@ class TestExternalHooks(object):
         assert 'tests' not in os.getcwd()
 
     def test_run_hook(self):
-        """Execute hook from specified template in specified output
+        """Execute hook from specified template in specified output \
         directory.
         """
         tests_dir = os.path.join(self.repo_path, 'input{{hooks}}')
diff --git a/tests/test_log.py b/tests/test_log.py
index 4448bca..b785d28 100644
--- a/tests/test_log.py
+++ b/tests/test_log.py
@@ -115,7 +115,7 @@ def test_debug_stdout_logging(caplog, debug_logger, debug_messages):
 
 def test_debug_file_logging(
         caplog, info_logger_with_file, debug_file, debug_messages):
-    """Test that logging to stdout uses a different format and level than
+    """Test that logging to stdout uses a different format and level than \
     the the file handler.
     """
 
diff --git a/tests/test_main.py b/tests/test_main.py
index 1198fb0..3c812e6 100644
--- a/tests/test_main.py
+++ b/tests/test_main.py
@@ -4,8 +4,9 @@ from cookiecutter.main import cookiecutter
 
 def test_replay_dump_template_name(
         monkeypatch, mocker, user_config_data, user_config_file):
-    """Check that replay_dump is called with a valid template_name that is
-    not a relative path.
+    """Check that replay_dump is called with a valid template_name
+
+    Template name must not be a relative path.
 
     Otherwise files such as ``..json`` are created, which are not just cryptic
     but also later mistaken for replay files of other templates if invoked with
@@ -35,8 +36,9 @@ def test_replay_dump_template_name(
 
 def test_replay_load_template_name(
         monkeypatch, mocker, user_config_data, user_config_file):
-    """Check that replay_load is called with a valid template_name that is
-    not a relative path.
+    """Check that replay_load is called correctly
+
+    Calls require valid template_name that is not a relative path.
 
     Change the current working directory temporarily to 'tests/fake-repo-tmpl'
     for this test and call cookiecutter with '.' for the target template.
diff --git a/tests/test_output_folder.py b/tests/test_output_folder.py
index 73ca51b..d6e1640 100644
--- a/tests/test_output_folder.py
+++ b/tests/test_output_folder.py
@@ -2,7 +2,6 @@
 
 """
 test_output_folder
-------------------
 
 Test formerly known from a unittest residing in test_generate.py named
 TestOutputFolder.test_output_folder
diff --git a/tests/test_prompt.py b/tests/test_prompt.py
index 3b9563b..4a284d2 100644
--- a/tests/test_prompt.py
+++ b/tests/test_prompt.py
@@ -2,7 +2,6 @@
 
 """
 test_prompt
------------
 
 Tests for `cookiecutter.prompt` module.
 """
diff --git a/tests/test_read_user_dict.py b/tests/test_read_user_dict.py
index ae9f635..144f030 100644
--- a/tests/test_read_user_dict.py
+++ b/tests/test_read_user_dict.py
@@ -1,9 +1,6 @@
 # -*- coding: utf-8 -*-
 
-"""
-test_read_user_dict
--------------------
-"""
+"""test_read_user_dict"""
 
 from __future__ import unicode_literals
 
@@ -90,7 +87,8 @@ def test_should_raise_type_error(mocker):
 
 def test_should_call_prompt_with_process_json(mocker):
     """Test to make sure that process_jon is actually being used
-    to generate a processor for the user input.
+
+    Verifies generation of a processor for the user input.
     """
 
     mock_prompt = mocker.patch(
@@ -109,8 +107,9 @@ def test_should_call_prompt_with_process_json(mocker):
 
 
 def test_read_user_dict_default_value(mocker):
-    """Test to make sure that read_user_dict returns the default value for a
-    dict variable rather than the display value.
+    """Make sure that read_user_dict returns the default value
+
+    Verify return of a dict variable rather than the display value.
     """
     mock_prompt = mocker.patch(
         'cookiecutter.prompt.click.prompt',
diff --git a/tests/test_read_user_variable.py b/tests/test_read_user_variable.py
index b4b9834..1c3b8e0 100644
--- a/tests/test_read_user_variable.py
+++ b/tests/test_read_user_variable.py
@@ -1,9 +1,6 @@
 # -*- coding: utf-8 -*-
 
-"""
-test_read_user_variable
------------------------
-"""
+"""test_read_user_variable"""
 
 from __future__ import unicode_literals
 
diff --git a/tests/test_read_user_yes_no.py b/tests/test_read_user_yes_no.py
index ec3d59c..cf89af9 100644
--- a/tests/test_read_user_yes_no.py
+++ b/tests/test_read_user_yes_no.py
@@ -2,7 +2,6 @@
 
 """
 test_read_user_yes_no
----------------------
 """
 
 from __future__ import unicode_literals
diff --git a/tests/test_utils.py b/tests/test_utils.py
index 5d61207..543b1d2 100644
--- a/tests/test_utils.py
+++ b/tests/test_utils.py
@@ -2,7 +2,6 @@
 
 """
 test_utils
-------------
 
 Tests for `cookiecutter.utils` module.
 """
@@ -68,7 +67,7 @@ def test_workin():
 
 
 def test_prompt_should_ask_and_rm_repo_dir(mocker, tmpdir):
-    """In `prompt_and_delete()`, if the user agrees to delete/reclone the
+    """In `prompt_and_delete()`, if the user agrees to delete/reclone the \
     repo, the repo should be deleted.
     """
     mock_read_user = mocker.patch(
@@ -86,7 +85,7 @@ def test_prompt_should_ask_and_rm_repo_dir(mocker, tmpdir):
 
 
 def test_prompt_should_ask_and_rm_repo_file(mocker, tmpdir):
-    """In `prompt_and_delete()`, if the user agrees to delete/reclone a
+    """In `prompt_and_delete()`, if the user agrees to delete/reclone a \
     repo file, the repo should be deleted.
     """
     mock_read_user = mocker.patch(
@@ -106,7 +105,7 @@ def test_prompt_should_ask_and_rm_repo_file(mocker, tmpdir):
 
 
 def test_prompt_should_ask_and_keep_repo_on_no_reuse(mocker, tmpdir):
-    """In `prompt_and_delete()`, if the user wants to keep their old
+    """In `prompt_and_delete()`, if the user wants to keep their old \
     cloned template repo, it should not be deleted.
     """
     mock_read_user = mocker.patch(
@@ -124,7 +123,7 @@ def test_prompt_should_ask_and_keep_repo_on_no_reuse(mocker, tmpdir):
 
 
 def test_prompt_should_ask_and_keep_repo_on_reuse(mocker, tmpdir):
-    """In `prompt_and_delete()`, if the user wants to keep their old
+    """In `prompt_and_delete()`, if the user wants to keep their old \
     cloned template repo, it should not be deleted.
     """
     def answer(question, default):
@@ -148,7 +147,9 @@ def test_prompt_should_ask_and_keep_repo_on_reuse(mocker, tmpdir):
 
 
 def test_prompt_should_not_ask_if_no_input_and_rm_repo_dir(mocker, tmpdir):
-    """In `prompt_and_delete()`, if `no_input` is True, the call to
+    """Prompt shoul dnot ask if no input and rm dir
+
+    In `prompt_and_delete()`, if `no_input` is True, the call to
     `prompt.read_user_yes_no()` should be suppressed.
     """
     mock_read_user = mocker.patch(
@@ -166,7 +167,9 @@ def test_prompt_should_not_ask_if_no_input_and_rm_repo_dir(mocker, tmpdir):
 
 
 def test_prompt_should_not_ask_if_no_input_and_rm_repo_file(mocker, tmpdir):
-    """In `prompt_and_delete()`, if `no_input` is True, the call to
+    """Prompt should not ask if no input and rm file
+
+    In `prompt_and_delete()`, if `no_input` is True, the call to
     `prompt.read_user_yes_no()` should be suppressed.
     """
     mock_read_user = mocker.patch(
diff --git a/tests/vcs/test_clone.py b/tests/vcs/test_clone.py
index da9ab17..4918fdb 100644
--- a/tests/vcs/test_clone.py
+++ b/tests/vcs/test_clone.py
@@ -9,14 +9,14 @@ from cookiecutter import exceptions, vcs
 
 @pytest.fixture
 def clone_dir(tmpdir):
-    """Simulate creation of a directory called `clone_dir` inside of `tmpdir`.
+    """Simulate creation of a directory called `clone_dir` inside of `tmpdir`. \
     Returns a str to said directory.
     """
     return str(tmpdir.mkdir('clone_dir'))
 
 
 def test_clone_should_raise_if_vcs_not_installed(mocker, clone_dir):
-    """In `clone()`, a `VCSNotInstalled` exception should be raised if no VCS
+    """In `clone()`, a `VCSNotInstalled` exception should be raised if no VCS \
     is installed.
     """
     mocker.patch(
@@ -32,7 +32,7 @@ def test_clone_should_raise_if_vcs_not_installed(mocker, clone_dir):
 
 
 def test_clone_should_rstrip_trailing_slash_in_repo_url(mocker, clone_dir):
-    """In `clone()`, repo URL's trailing slash should be stripped if one is
+    """In `clone()`, repo URL's trailing slash should be stripped if one is \
     present.
     """
     mocker.patch(
@@ -60,7 +60,7 @@ def test_clone_should_rstrip_trailing_slash_in_repo_url(mocker, clone_dir):
 
 
 def test_clone_should_abort_if_user_does_not_want_to_reclone(mocker, tmpdir):
-    """In `clone()`, if user doesn't want to reclone, Cookiecutter should exit
+    """In `clone()`, if user doesn't want to reclone, Cookiecutter should exit \
     without cloning anything.
     """
     mocker.patch(
@@ -96,7 +96,7 @@ def test_clone_should_abort_if_user_does_not_want_to_reclone(mocker, tmpdir):
 ])
 def test_clone_should_invoke_vcs_command(
         mocker, clone_dir, repo_type, repo_url, repo_name):
-    """When `clone()` is called with a git/hg repo, the corresponding VCS
+    """When `clone()` is called with a git/hg repo, the corresponding VCS \
     command should be run via `subprocess.check_output()`.
 
     This should take place:
@@ -146,7 +146,7 @@ def test_clone_should_invoke_vcs_command(
     'hg: abort: HTTP Error 404: Not Found'.encode('utf-8'),
 ])
 def test_clone_handles_repo_typo(mocker, clone_dir, error_message):
-    """In `clone()`, repository not found errors should raise an
+    """In `clone()`, repository not found errors should raise an \
     appropriate exception.
     """
     # side_effect is set to an iterable here (and below),
@@ -181,7 +181,7 @@ def test_clone_handles_repo_typo(mocker, clone_dir, error_message):
     "hg: abort: unknown revision 'unknown_branch'!".encode('utf-8'),
 ])
 def test_clone_handles_branch_typo(mocker, clone_dir, error_message):
-    """In `clone()`, branch not found errors should raise an
+    """In `clone()`, branch not found errors should raise an \
     appropriate exception.
     """
     mocker.patch(
