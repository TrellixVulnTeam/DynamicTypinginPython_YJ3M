commit b256f09f2f6005ec9ba20a9f77cd047857094b84
Author: Sorin Sbarnea <ssbarnea@redhat.com>
Date:   Sun Jan 19 13:33:59 2020 +0000

    D200 rule activation
    
    Enables and fixes:
    D200 One-line docstring should fit on one line with quotes

diff --git a/setup.cfg b/setup.cfg
index 6b22e25..ab019be 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -11,7 +11,7 @@ tag_name = {new_version}
 [flake8]
 # BLK100 excluded temporary until we enable python black
 # D* added temporary to ease enablement remove them while addressing them
-ignore = E731,BLK100,D100,D101,D102,D103,D200,D400
+ignore = E731,BLK100,D100,D101,D102,D103,D400
 # D400 First line should end with a period
 statistics = 1
 
diff --git a/tests/replay/test_dump.py b/tests/replay/test_dump.py
index 6ccb9e4..4f8a8ac 100644
--- a/tests/replay/test_dump.py
+++ b/tests/replay/test_dump.py
@@ -1,8 +1,6 @@
 # -*- coding: utf-8 -*-
 
-"""
-test_dump
-"""
+"""test_dump"""
 
 import json
 import os
@@ -47,8 +45,7 @@ def test_type_error_if_not_dict_context(replay_test_dir, template_name):
 
 def test_value_error_if_key_missing_in_context(replay_test_dir, template_name):
     """Test that replay.dump raises if the context does not contain a key \
-    named 'cookiecutter'.
-    """
+    named 'cookiecutter'."""
     with pytest.raises(ValueError):
         replay.dump(replay_test_dir, template_name, {'foo': 'bar'})
 
@@ -84,8 +81,7 @@ def test_ioerror_if_replay_dir_creation_fails(
 def test_run_json_dump(mocker, mock_ensure_success, mock_user_config,
                        template_name, context, replay_test_dir, replay_file):
     """Test that replay.dump runs json.dump under the hood and that the context \
-    is correctly written to the expected file in the replay_dir.
-    """
+    is correctly written to the expected file in the replay_dir."""
     spy_get_replay_file = mocker.spy(replay, 'get_file_name')
 
     mock_json_dump = mocker.patch('json.dump', side_effect=json.dump)
diff --git a/tests/replay/test_load.py b/tests/replay/test_load.py
index 127551d..5f9c1f0 100644
--- a/tests/replay/test_load.py
+++ b/tests/replay/test_load.py
@@ -1,8 +1,6 @@
 # -*- coding: utf-8 -*-
 
-"""
-test_load
-"""
+"""test_load"""
 
 import json
 import os
@@ -32,8 +30,7 @@ def test_type_error_if_no_template_name(replay_test_dir):
 
 def test_value_error_if_key_missing_in_context(mocker, replay_test_dir):
     """Test that replay.load raises if the loaded context does not contain \
-    'cookiecutter'.
-    """
+    'cookiecutter'."""
     with pytest.raises(ValueError):
         replay.load(replay_test_dir, 'invalid_replay')
 
@@ -47,8 +44,7 @@ def test_io_error_if_no_replay_file(mocker, replay_test_dir):
 def test_run_json_load(mocker, mock_user_config, template_name,
                        context, replay_test_dir, replay_file):
     """Test that replay.load runs json.load under the hood and that the context \
-    is correctly loaded from the file in replay_dir.
-    """
+    is correctly loaded from the file in replay_dir."""
     spy_get_replay_file = mocker.spy(replay, 'get_file_name')
 
     mock_json_load = mocker.patch('json.load', side_effect=json.load)
diff --git a/tests/replay/test_replay.py b/tests/replay/test_replay.py
index 78639c2..1086a7a 100644
--- a/tests/replay/test_replay.py
+++ b/tests/replay/test_replay.py
@@ -1,8 +1,6 @@
 # -*- coding: utf-8 -*-
 
-"""
-test_replay
-"""
+"""test_replay"""
 
 import os
 import pytest
diff --git a/tests/repository/test_determine_repo_dir_clones_repo.py b/tests/repository/test_determine_repo_dir_clones_repo.py
index e57f482..c8f34ba 100644
--- a/tests/repository/test_determine_repo_dir_clones_repo.py
+++ b/tests/repository/test_determine_repo_dir_clones_repo.py
@@ -55,8 +55,7 @@ def template_url():
 def test_repository_url_should_clone(
         mocker, template_url, user_config_data):
     """`clone()` should be called with correct args when \
-    `determine_repo_dir()` is passed a repository template url.
-    """
+    `determine_repo_dir()` is passed a repository template url."""
     mock_clone = mocker.patch(
         'cookiecutter.repository.clone',
         return_value='tests/fake-repo-tmpl',
diff --git a/tests/repository/test_determine_repo_dir_finds_subdirectories.py b/tests/repository/test_determine_repo_dir_finds_subdirectories.py
index 13fd16f..03ae308 100644
--- a/tests/repository/test_determine_repo_dir_finds_subdirectories.py
+++ b/tests/repository/test_determine_repo_dir_finds_subdirectories.py
@@ -45,8 +45,7 @@ def test_should_find_existing_cookiecutter(
 
 def test_local_repo_typo(template, user_config_data, cloned_cookiecutter_path):
     """An unknown local repository should raise a `RepositoryNotFound` \
-    exception.
-    """
+    exception."""
     with pytest.raises(exceptions.RepositoryNotFound) as err:
         repository.determine_repo_dir(
             template,
diff --git a/tests/repository/test_determine_repository_should_use_local_repo.py b/tests/repository/test_determine_repository_should_use_local_repo.py
index e8d3ab9..87969f9 100644
--- a/tests/repository/test_determine_repository_should_use_local_repo.py
+++ b/tests/repository/test_determine_repository_should_use_local_repo.py
@@ -21,8 +21,7 @@ def test_finds_local_repo(tmpdir):
 
 def test_local_repo_with_no_context_raises(tmpdir):
     """A local repository without a cookiecutter.json should raise a \
-    `RepositoryNotFound` exception.
-    """
+    `RepositoryNotFound` exception."""
     template_path = os.path.join('tests', 'fake-repo-bad')
     with pytest.raises(exceptions.RepositoryNotFound) as err:
         repository.determine_repo_dir(
@@ -46,8 +45,8 @@ def test_local_repo_with_no_context_raises(tmpdir):
 
 
 def test_local_repo_typo(tmpdir):
-    """An unknown local repository should raise a `RepositoryNotFound` exception.
-    """
+    """An unknown local repository should raise a `RepositoryNotFound` \
+    exception."""
     template_path = os.path.join('tests', 'unknown-repo')
     with pytest.raises(exceptions.RepositoryNotFound) as err:
         repository.determine_repo_dir(
diff --git a/tests/test_cli.py b/tests/test_cli.py
index 7c5c8cb..23d95b1 100644
--- a/tests/test_cli.py
+++ b/tests/test_cli.py
@@ -25,9 +25,7 @@ def cli_runner():
 
 @pytest.fixture
 def remove_fake_project_dir(request):
-    """
-    Remove the fake project directory created during the tests.
-    """
+    """Remove the fake project directory created during the tests."""
     def fin_remove_fake_project_dir():
         if os.path.isdir('fake-project'):
             utils.rmtree('fake-project')
diff --git a/tests/test_cookiecutter_local_no_input.py b/tests/test_cookiecutter_local_no_input.py
index c1e9d16..0ce9c4e 100644
--- a/tests/test_cookiecutter_local_no_input.py
+++ b/tests/test_cookiecutter_local_no_input.py
@@ -19,9 +19,7 @@ from cookiecutter import main, utils
 
 @pytest.fixture(scope='function')
 def remove_additional_dirs(request):
-    """
-    Remove special directories which are created during the tests.
-    """
+    """Remove special directories which are created during the tests."""
     def fin_remove_additional_dirs():
         if os.path.isdir('fake-project'):
             utils.rmtree('fake-project')
@@ -38,9 +36,7 @@ def remove_additional_dirs(request):
 
 @pytest.fixture(params=['tests/fake-repo-pre/', 'tests/fake-repo-pre'])
 def bake(request):
-    """
-    Run cookiecutter with the given input_dir path.
-    """
+    """Run cookiecutter with the given input_dir path."""
     main.cookiecutter(request.param, no_input=True)
 
 
@@ -55,9 +51,7 @@ def test_cookiecutter():
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
 def test_cookiecutter_no_input_extra_context():
-    """
-    `Call cookiecutter()` with `no_input=True` and `extra_context
-    """
+    """Call `cookiecutter()` with `no_input=True` and `extra_context"""
     main.cookiecutter(
         'tests/fake-repo-pre',
         no_input=True,
@@ -68,10 +62,8 @@ def test_cookiecutter_no_input_extra_context():
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
 def test_cookiecutter_templated_context():
-    """
-    `Call cookiecutter()` with `no_input=True` and templates in the \
-    cookiecutter.json file
-    """
+    """Call `cookiecutter()` with `no_input=True` and templates in the \
+    cookiecutter.json file"""
     main.cookiecutter(
         'tests/fake-repo-tmpl',
         no_input=True
@@ -134,10 +126,8 @@ def test_cookiecutter_dict_values_in_context():
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
 def test_cookiecutter_template_cleanup(mocker):
-    """
-    `Call cookiecutter()` with `no_input=True` and templates in the \
-    cookiecutter.json file
-    """
+    """Call `cookiecutter()` with `no_input=True` and templates in the \
+    cookiecutter.json file"""
     mocker.patch(
         'tempfile.mkdtemp',
         return_value='fake-tmp',
diff --git a/tests/test_cookiecutter_local_with_input.py b/tests/test_cookiecutter_local_with_input.py
index 8fa1324..e010a7e 100644
--- a/tests/test_cookiecutter_local_with_input.py
+++ b/tests/test_cookiecutter_local_with_input.py
@@ -7,7 +7,6 @@ Tests formerly known from a unittest residing in test_main.py named
 TestCookiecutterLocalWithInput.test_cookiecutter_local_with_input
 TestCookiecutterLocalWithInput.test_cookiecutter_input_extra_context
 """
-
 import os
 import pytest
 
@@ -16,9 +15,7 @@ from cookiecutter import main, utils
 
 @pytest.fixture(scope='function')
 def remove_additional_dirs(request):
-    """
-    Remove special directories which are created during the tests.
-    """
+    """Remove special directories which are created during the tests."""
     def fin_remove_additional_dirs():
         if os.path.isdir('fake-project'):
             utils.rmtree('fake-project')
@@ -43,9 +40,7 @@ def test_cookiecutter_local_with_input(monkeypatch):
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_dirs')
 def test_cookiecutter_input_extra_context(monkeypatch):
-    """
-    `Call cookiecutter()` with `no_input=False` and `extra_context`
-    """
+    """Call `cookiecutter()` with `no_input=False` and `extra_context`"""
     monkeypatch.setattr(
         'cookiecutter.prompt.read_user_variable',
         lambda var, default: default
diff --git a/tests/test_generate_context.py b/tests/test_generate_context.py
index 5fa4cd7..f56f478 100644
--- a/tests/test_generate_context.py
+++ b/tests/test_generate_context.py
@@ -70,10 +70,8 @@ def context_data():
 @pytest.mark.usefixtures('clean_system')
 @pytest.mark.parametrize('input_params, expected_context', context_data())
 def test_generate_context(input_params, expected_context):
-    """
-    Test the generated context for several input parameters against the \
-    according expected context.
-    """
+    """Test the generated context for several input parameters against the \
+    according expected context."""
     assert generate.generate_context(**input_params) == expected_context
 
 
@@ -123,8 +121,7 @@ def context_file():
 
 def test_choices(context_file, default_context, extra_context):
     """Make sure that the default for list variables is based on the user \
-    config and the list as such is not changed to a single value.
-    """
+    config and the list as such is not changed to a single value."""
     expected_context = {
         'choices_template': OrderedDict([
             ('full_name', 'Raphael Pierzina'),
diff --git a/tests/test_generate_copy_without_render.py b/tests/test_generate_copy_without_render.py
index b91ec48..e6f33c1 100644
--- a/tests/test_generate_copy_without_render.py
+++ b/tests/test_generate_copy_without_render.py
@@ -1,8 +1,6 @@
 # -*- coding: utf-8 -*-
 
-"""
-test_generate_copy_without_render
-"""
+"""test_generate_copy_without_render"""
 
 from __future__ import unicode_literals
 import os
@@ -14,9 +12,7 @@ from cookiecutter import utils
 
 @pytest.fixture(scope='function')
 def remove_test_dir(request):
-    """
-    Remove the folder that is created by the test.
-    """
+    """Remove the folder that is created by the test."""
     def fin_remove_test_dir():
         if os.path.exists('test_copy_without_render'):
             utils.rmtree('test_copy_without_render')
diff --git a/tests/test_generate_file.py b/tests/test_generate_file.py
index ff0c2b8..2b3a97d 100644
--- a/tests/test_generate_file.py
+++ b/tests/test_generate_file.py
@@ -22,9 +22,7 @@ from cookiecutter.environment import StrictEnvironment
 
 @pytest.fixture(scope='function')
 def remove_cheese_file(request):
-    """
-    Remove the cheese text file which is created by the tests.
-    """
+    """Remove the cheese text file which is created by the tests."""
     def fin_remove_cheese_file():
         if os.path.exists('tests/files/cheese.txt'):
             os.remove('tests/files/cheese.txt')
diff --git a/tests/test_generate_files.py b/tests/test_generate_files.py
index 157726d..37cfc43 100644
--- a/tests/test_generate_files.py
+++ b/tests/test_generate_files.py
@@ -40,9 +40,7 @@ def test_ensure_dir_is_templated_raises(invalid_dirname):
 
 @pytest.fixture(scope='function')
 def remove_additional_folders(request):
-    """
-    Remove some special folders which are created by the tests.
-    """
+    """Remove some special folders which are created by the tests."""
     def fin_remove_additional_folders():
         if os.path.exists('inputpizzä'):
             utils.rmtree('inputpizzä')
@@ -164,10 +162,8 @@ def test_return_rendered_project_dir():
 
 @pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
 def test_generate_files_permissions():
-    """
-    simple.txt and script.sh should retain their respective 0o644 and \
-    0o755 permissions
-    """
+    """simple.txt and script.sh should retain their respective 0o644 and \
+    0o755 permissions"""
     generate.generate_files(
         context={
             'cookiecutter': {'permissions': 'permissions'}
diff --git a/tests/test_generate_hooks.py b/tests/test_generate_hooks.py
index 8c10421..b134c69 100644
--- a/tests/test_generate_hooks.py
+++ b/tests/test_generate_hooks.py
@@ -26,9 +26,7 @@ WINDOWS = sys.platform.startswith('win')
 
 @pytest.fixture(scope='function')
 def remove_additional_folders(request):
-    """
-    Remove some special folders which are created by the tests.
-    """
+    """Remove some special folders which are created by the tests."""
     def fin_remove_additional_folders():
         directories_to_delete = [
             'tests/test-pyhooks/inputpyhooks',
diff --git a/tests/test_get_config.py b/tests/test_get_config.py
index f8d0f45..3901dc3 100644
--- a/tests/test_get_config.py
+++ b/tests/test_get_config.py
@@ -50,9 +50,7 @@ def test_merge_configs():
 
 
 def test_get_config():
-    """
-    Opening and reading config file
-    """
+    """Opening and reading config file"""
     conf = config.get_config('tests/test-config/valid-config.yaml')
     expected_conf = {
         'cookiecutters_dir': '/home/example/some-path-to-templates',
@@ -73,18 +71,15 @@ def test_get_config():
 
 
 def test_get_config_does_not_exist():
-    """
-    Check that `exceptions.ConfigDoesNotExistException` is raised when \
-    attempting to get a non-existent config file.
-    """
+    """Check that `exceptions.ConfigDoesNotExistException` is raised when \
+    attempting to get a non-existent config file."""
     with pytest.raises(ConfigDoesNotExistException):
         config.get_config('tests/test-config/this-does-not-exist.yaml')
 
 
 def test_invalid_config():
-    """
-    An invalid config file should raise an `InvalidConfiguration` exception.
-    """
+    """An invalid config file should raise an `InvalidConfiguration` \
+    exception."""
     with pytest.raises(InvalidConfiguration) as excinfo:
         config.get_config('tests/test-config/invalid-config.yaml')
 
@@ -97,9 +92,7 @@ def test_invalid_config():
 
 
 def test_get_config_with_defaults():
-    """
-    A config file that overrides 1 of 3 defaults
-    """
+    """A config file that overrides 1 of 3 defaults"""
     conf = config.get_config('tests/test-config/valid-partial-config.yaml')
     default_cookiecutters_dir = os.path.expanduser('~/.cookiecutters/')
     default_replay_dir = os.path.expanduser('~/.cookiecutter_replay/')
diff --git a/tests/test_get_user_config.py b/tests/test_get_user_config.py
index d5b3eb7..91650a8 100644
--- a/tests/test_get_user_config.py
+++ b/tests/test_get_user_config.py
@@ -36,16 +36,12 @@ def back_up_rc(request, user_config_path):
         os.remove(user_config_path)
 
     def remove_test_rc():
-        """
-        Remove the ~/.cookiecutterrc that has been created in the test.
-        """
+        """Remove the ~/.cookiecutterrc that has been created in the test."""
         if os.path.exists(user_config_path):
             os.remove(user_config_path)
 
     def restore_original_rc():
-        """
-        If it existed, restore the original ~/.cookiecutterrc
-        """
+        """If it existed, restore the original ~/.cookiecutterrc"""
         if os.path.exists(user_config_path_backup):
             shutil.copy(user_config_path_backup, user_config_path)
             os.remove(user_config_path_backup)
@@ -78,9 +74,7 @@ def custom_config():
 
 @pytest.mark.usefixtures('back_up_rc')
 def test_get_user_config_valid(user_config_path, custom_config):
-    """
-    Get config from a valid ~/.cookiecutterrc file
-    """
+    """Get config from a valid ~/.cookiecutterrc file"""
     shutil.copy('tests/test-config/valid-config.yaml', user_config_path)
     conf = config.get_user_config()
 
@@ -89,9 +83,7 @@ def test_get_user_config_valid(user_config_path, custom_config):
 
 @pytest.mark.usefixtures('back_up_rc')
 def test_get_user_config_invalid(user_config_path):
-    """
-    Get config from an invalid ~/.cookiecutterrc file
-    """
+    """Get config from an invalid ~/.cookiecutterrc file"""
     shutil.copy('tests/test-config/invalid-config.yaml', user_config_path)
     with pytest.raises(InvalidConfiguration):
         config.get_user_config()
@@ -99,9 +91,7 @@ def test_get_user_config_invalid(user_config_path):
 
 @pytest.mark.usefixtures('back_up_rc')
 def test_get_user_config_nonexistent():
-    """
-    Get config from a nonexistent ~/.cookiecutterrc file
-    """
+    """Get config from a nonexistent ~/.cookiecutterrc file"""
     assert config.get_user_config() == config.DEFAULT_CONFIG
 
 
diff --git a/tests/test_hooks.py b/tests/test_hooks.py
index 7adb157..2b9aa2a 100644
--- a/tests/test_hooks.py
+++ b/tests/test_hooks.py
@@ -165,8 +165,7 @@ class TestExternalHooks(object):
 
     def test_run_hook(self):
         """Execute hook from specified template in specified output \
-        directory.
-        """
+        directory."""
         tests_dir = os.path.join(self.repo_path, 'input{{hooks}}')
         with utils.work_in(self.repo_path):
             hooks.run_hook('pre_gen_project', tests_dir, {})
diff --git a/tests/test_output_folder.py b/tests/test_output_folder.py
index d6e1640..9a2d789 100644
--- a/tests/test_output_folder.py
+++ b/tests/test_output_folder.py
@@ -18,9 +18,7 @@ from cookiecutter import exceptions
 
 @pytest.fixture(scope='function')
 def remove_output_folder(request):
-    """
-    Remove the output folder in case it exists on disk.
-    """
+    """Remove the output folder in case it exists on disk."""
     def finalizer_remove_output_folder():
         if os.path.exists('output_folder'):
             utils.rmtree('output_folder')
diff --git a/tests/test_read_user_yes_no.py b/tests/test_read_user_yes_no.py
index cf89af9..b8caf08 100644
--- a/tests/test_read_user_yes_no.py
+++ b/tests/test_read_user_yes_no.py
@@ -1,8 +1,6 @@
 # -*- coding: utf-8 -*-
 
-"""
-test_read_user_yes_no
-"""
+"""test_read_user_yes_no"""
 
 from __future__ import unicode_literals
 
diff --git a/tests/test_utils.py b/tests/test_utils.py
index 543b1d2..1d1c4e3 100644
--- a/tests/test_utils.py
+++ b/tests/test_utils.py
@@ -68,8 +68,7 @@ def test_workin():
 
 def test_prompt_should_ask_and_rm_repo_dir(mocker, tmpdir):
     """In `prompt_and_delete()`, if the user agrees to delete/reclone the \
-    repo, the repo should be deleted.
-    """
+    repo, the repo should be deleted."""
     mock_read_user = mocker.patch(
         'cookiecutter.utils.read_user_yes_no',
         return_value=True,
@@ -86,8 +85,7 @@ def test_prompt_should_ask_and_rm_repo_dir(mocker, tmpdir):
 
 def test_prompt_should_ask_and_rm_repo_file(mocker, tmpdir):
     """In `prompt_and_delete()`, if the user agrees to delete/reclone a \
-    repo file, the repo should be deleted.
-    """
+    repo file, the repo should be deleted."""
     mock_read_user = mocker.patch(
         'cookiecutter.utils.read_user_yes_no',
         return_value=True,
@@ -106,8 +104,7 @@ def test_prompt_should_ask_and_rm_repo_file(mocker, tmpdir):
 
 def test_prompt_should_ask_and_keep_repo_on_no_reuse(mocker, tmpdir):
     """In `prompt_and_delete()`, if the user wants to keep their old \
-    cloned template repo, it should not be deleted.
-    """
+    cloned template repo, it should not be deleted."""
     mock_read_user = mocker.patch(
         'cookiecutter.utils.read_user_yes_no',
         return_value=False,
@@ -124,8 +121,7 @@ def test_prompt_should_ask_and_keep_repo_on_no_reuse(mocker, tmpdir):
 
 def test_prompt_should_ask_and_keep_repo_on_reuse(mocker, tmpdir):
     """In `prompt_and_delete()`, if the user wants to keep their old \
-    cloned template repo, it should not be deleted.
-    """
+    cloned template repo, it should not be deleted."""
     def answer(question, default):
         if 'okay to delete' in question:
             return False
diff --git a/tests/vcs/test_clone.py b/tests/vcs/test_clone.py
index 4918fdb..ba4018c 100644
--- a/tests/vcs/test_clone.py
+++ b/tests/vcs/test_clone.py
@@ -10,15 +10,13 @@ from cookiecutter import exceptions, vcs
 @pytest.fixture
 def clone_dir(tmpdir):
     """Simulate creation of a directory called `clone_dir` inside of `tmpdir`. \
-    Returns a str to said directory.
-    """
+    Returns a str to said directory."""
     return str(tmpdir.mkdir('clone_dir'))
 
 
 def test_clone_should_raise_if_vcs_not_installed(mocker, clone_dir):
     """In `clone()`, a `VCSNotInstalled` exception should be raised if no VCS \
-    is installed.
-    """
+    is installed."""
     mocker.patch(
         'cookiecutter.vcs.is_vcs_installed',
         autospec=True,
@@ -33,8 +31,7 @@ def test_clone_should_raise_if_vcs_not_installed(mocker, clone_dir):
 
 def test_clone_should_rstrip_trailing_slash_in_repo_url(mocker, clone_dir):
     """In `clone()`, repo URL's trailing slash should be stripped if one is \
-    present.
-    """
+    present."""
     mocker.patch(
         'cookiecutter.vcs.is_vcs_installed',
         autospec=True,
@@ -61,8 +58,7 @@ def test_clone_should_rstrip_trailing_slash_in_repo_url(mocker, clone_dir):
 
 def test_clone_should_abort_if_user_does_not_want_to_reclone(mocker, tmpdir):
     """In `clone()`, if user doesn't want to reclone, Cookiecutter should exit \
-    without cloning anything.
-    """
+    without cloning anything."""
     mocker.patch(
         'cookiecutter.vcs.is_vcs_installed',
         autospec=True,
@@ -147,8 +143,7 @@ def test_clone_should_invoke_vcs_command(
 ])
 def test_clone_handles_repo_typo(mocker, clone_dir, error_message):
     """In `clone()`, repository not found errors should raise an \
-    appropriate exception.
-    """
+    appropriate exception."""
     # side_effect is set to an iterable here (and below),
     # because of a Python 3.4 unittest.mock regression
     # http://bugs.python.org/issue23661
@@ -182,8 +177,7 @@ def test_clone_handles_repo_typo(mocker, clone_dir, error_message):
 ])
 def test_clone_handles_branch_typo(mocker, clone_dir, error_message):
     """In `clone()`, branch not found errors should raise an \
-    appropriate exception.
-    """
+    appropriate exception."""
     mocker.patch(
         'cookiecutter.vcs.subprocess.check_output',
         autospec=True,
