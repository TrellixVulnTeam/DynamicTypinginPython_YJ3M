commit 750b96105f557b67042de4cf586b8da78c1e6f2f
Author: sax <s.apostolico@gmail.com>
Date:   Wed May 7 20:43:31 2014 +0200

    add documentation about command line arguments
    
    text is auto generated from the arguments help text
    
    ref. #166

diff --git a/cookiecutter/main.py b/cookiecutter/main.py
index 94cd0c0..87402cf 100755
--- a/cookiecutter/main.py
+++ b/cookiecutter/main.py
@@ -71,9 +71,7 @@ def cookiecutter(input_dir, checkout=None, no_input=False):
     )
 
 
-def parse_cookiecutter_args(args):
-    """ Parse the command-line arguments to Cookiecutter. """
-
+def _get_parser():
     parser = argparse.ArgumentParser(
         description='Create a project from a Cookiecutter project template.'
     )
@@ -106,6 +104,12 @@ def parse_cookiecutter_args(args):
         help='Print debug information',
         action='store_true', default=False
     )
+
+    return parser
+
+def parse_cookiecutter_args(args):
+    """ Parse the command-line arguments to Cookiecutter. """
+    parser = _get_parser()
     return parser.parse_args(args)
 
 
diff --git a/docs/__init__.py b/docs/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/docs/advanced_usage.rst b/docs/advanced_usage.rst
index 259e22f..782d0e0 100644
--- a/docs/advanced_usage.rst
+++ b/docs/advanced_usage.rst
@@ -6,7 +6,7 @@ Using Pre/Post-Generate Hooks (0.7.0+)
 --------------------------------------
 
 You can have Python or Shell scripts that run before and/or after your project
-is generated. 
+is generated.
 
 Put them in `hooks/` like this::
 
@@ -57,7 +57,7 @@ Calling Cookiecutter Functions From Python
 You can use Cookiecutter from Python::
 
     from cookiecutter.main import cookiecutter
-    
+
     # Create project from the cookiecutter-pypackage/ template
     cookiecutter('cookiecutter-pypackage/')
 
@@ -69,3 +69,13 @@ provide developers with a tool similar to `django-admin.py startproject` or
 `npm init`.
 
 See the :ref:`API Reference <apiref>` for more details.
+
+
+.. _command_line_options:
+
+Command Line Options
+--------------------
+
+.. cc-command-line-options::
+
+
diff --git a/docs/ccext.py b/docs/ccext.py
new file mode 100644
index 0000000..90a2e5b
--- /dev/null
+++ b/docs/ccext.py
@@ -0,0 +1,39 @@
+# -*- coding: utf-8 -*-
+import sys
+from cookiecutter import main
+from docutils import nodes
+from docutils.parsers import rst
+from docutils.statemachine import ViewList
+
+
+class CcCommandLineOptions(rst.Directive):
+    def _format_action(self, action):
+        bookmark_line = ".. _`%s`:" % action.dest
+        line = ".. option:: "
+        line += ", ".join(action.option_strings)
+        opt_help = action.help.replace('%default', str(action.default))
+
+        # fix paths with sys.prefix
+        opt_help = opt_help.replace(sys.prefix, "<sys.prefix>")
+
+        return [bookmark_line, "", line, "", " %s" % opt_help, ""]
+
+    def process_actions(self):
+        parser = main._get_parser()
+        for action in parser._actions:
+            if not action.option_strings:
+                continue
+            for line in self._format_action(action):
+                self.view_list.append(line, "")
+
+    def run(self):
+        node = nodes.paragraph()
+        node.document = self.state.document
+        self.view_list = ViewList()
+        self.process_actions()
+        self.state.nested_parse(self.view_list, 0, node)
+        return [node]
+
+
+def setup(app):
+    app.add_directive('cc-command-line-options', CcCommandLineOptions)
diff --git a/docs/conf.py b/docs/conf.py
index c1c349a..2fc99a3 100644
--- a/docs/conf.py
+++ b/docs/conf.py
@@ -61,7 +61,9 @@ import cookiecutter
 
 # Add any Sphinx extension module names here, as strings. They can be extensions
 # coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
-extensions = ['sphinx.ext.autodoc', 'sphinx.ext.doctest', 'sphinx.ext.intersphinx', 'sphinx.ext.todo', 'sphinx.ext.coverage', 'sphinx.ext.pngmath', 'sphinx.ext.ifconfig', 'sphinx.ext.viewcode']
+extensions = ['sphinx.ext.autodoc', 'sphinx.ext.doctest', 'sphinx.ext.intersphinx',
+              'sphinx.ext.todo', 'sphinx.ext.coverage', 'sphinx.ext.pngmath',
+              'sphinx.ext.ifconfig', 'sphinx.ext.viewcode', 'docs.ccext']
 
 # Add any paths that contain templates here, relative to this directory.
 templates_path = ['_templates']
diff --git a/docs/usage.rst b/docs/usage.rst
index 1956db8..26244d5 100644
--- a/docs/usage.rst
+++ b/docs/usage.rst
@@ -29,8 +29,12 @@ Then generate your project from the project template::
 The only argument is the input directory. (The output directory is generated
 by rendering that, and it can't be the same as the input directory.)
 
+.. note:: see :ref:`command_line_options` for extra command line arguments
+
 Try it out!
 
+
+
 Works directly with git repos too
 ---------------------------------
 
@@ -66,3 +70,4 @@ Pre-0.7.0, this is how it worked:
   is output to your current directory.
 
 * Cloned cookiecutters were not saved locally.
+
