commit 8a07caca6afa297fca067ab60d7807b468852b74
Author: Andrey Shpak <insspb@users.noreply.github.com>
Date:   Thu May 28 10:48:15 2020 +0300

    Added: End of line detection and configuration. (#1407)
    
    Co-authored-by: Philippe Ombredanne <pombredanne@nexb.com>
    Co-authored-by: Francisco Molina <franciscojose.molina@alten.es>

diff --git a/.gitattributes b/.gitattributes
new file mode 100644
index 0000000..6e60408
--- /dev/null
+++ b/.gitattributes
@@ -0,0 +1,7 @@
+*           text=auto
+# CRLF sets for test files! Or tests will fail on CI/CD
+*crlf.txt   text eol=crlf
+simple-with-newline-crlf.txt        text eol=crlf
+simple-with-newline.txt             text eol=lf
+*_crlf_newlines.txt                 text eol=crlf
+*_lf_newlines.txt                   text eol=lf
diff --git a/.gitignore b/.gitignore
index 6572957..6220284 100644
--- a/.gitignore
+++ b/.gitignore
@@ -44,6 +44,7 @@ nosetests.xml
 coverage.xml
 *,cover
 .hypothesis/
+.pytest_cache
 
 # Translations
 *.mo
diff --git a/.travis.yml b/.travis.yml
index 76d2879..e7e8ef3 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -13,8 +13,10 @@ jobs:
         env: TOXENV=py37
       - python: 3.8
         env: TOXENV=py38
-      - python: pypy3
-        env: TOXENV=pypy3
+# Travis pypy3 excluded as outdated.
+# Currently done on github, will be resumed after Travis update.
+#      - python: pypy3
+#        env: TOXENV=pypy3
       - name: "Python 3.6 on Windows"
         os: windows
         language: shell
diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 7f96dbb..8bcd074 100644
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -170,9 +170,20 @@ def generate_file(project_dir, infile, context, env, skip_if_file_exists=False):
             raise
         rendered_file = tmpl.render(**context)
 
+        # Detect original file newline to output the rendered file
+        # note: newline='' ensures newlines are not converted
+        with io.open(infile, 'r', encoding='utf-8', newline='') as rd:
+            rd.readline()  # Read the first line to load 'newlines' value
+
+            # Use `_new_lines` overwrite from context, if configured.
+            newline = rd.newlines
+            if context['cookiecutter'].get('_new_lines', False):
+                newline = context['cookiecutter']['_new_lines']
+                logger.debug('Overwriting end line character with %s', newline)
+
         logger.debug('Writing contents to file %s', outfile)
 
-        with io.open(outfile, 'w', encoding='utf-8') as fh:
+        with io.open(outfile, 'w', encoding='utf-8', newline=newline) as fh:
             fh.write(rendered_file)
 
     # Apply file permissions to output file
diff --git a/docs/advanced/index.rst b/docs/advanced/index.rst
index 8149023..90e7f29 100644
--- a/docs/advanced/index.rst
+++ b/docs/advanced/index.rst
@@ -22,3 +22,4 @@ Various advanced topics regarding cookiecutter usage.
    dict_variables
    template_extensions
    directories
+   new_line_characters
diff --git a/docs/advanced/new_line_characters.rst b/docs/advanced/new_line_characters.rst
new file mode 100644
index 0000000..64f0098
--- /dev/null
+++ b/docs/advanced/new_line_characters.rst
@@ -0,0 +1,25 @@
+.. _new-lines:
+
+Working with line-ends special symbols LF/CRLF
+----------------------------------------------
+
+*New in Cookiecutter 2.0*
+
+Before version 2.0 Cookiecutter silently used system line end character.
+LF for POSIX and CRLF for Windows. Since version 2.0 this behaviour changed
+and now can be forced at template level.
+
+By default Cookiecutter now check every file at render stage and use same line
+end as in source. This allow template developers to have both types of files in
+the same template. Developers should correctly configure their `.gitattributes`
+file to avoid line-end character overwrite by git.
+
+Special template variable `_new_lines` was added in Cookiecutter 2.0.
+Acceptable variables: `'\n\r'` for CRLF and `'\n'` for POSIX.
+
+Here is example how to force line endings to CRLF on any deployment::
+
+    {
+        "project_slug": "sample",
+        "_new_lines": "\n\r"
+    }
diff --git a/tests/files/{% if cookiecutter.generate_file == 'y' %}cheese.txt{% endif %} b/tests/files/{% if cookiecutter.generate_file == 'y' %}cheese.txt{% endif %}
new file mode 100644
index 0000000..aa1afce
--- /dev/null
+++ b/tests/files/{% if cookiecutter.generate_file == 'y' %}cheese.txt{% endif %}	
@@ -0,0 +1 @@
+Testing that generate_file was {{ cookiecutter.generate_file }}
\ No newline at end of file
diff --git a/tests/files/{% if generate_file == 'y' %}cheese.txt{% endif %} b/tests/files/{% if generate_file == 'y' %}cheese.txt{% endif %}
deleted file mode 100644
index 5f47c92..0000000
--- a/tests/files/{% if generate_file == 'y' %}cheese.txt{% endif %}	
+++ /dev/null
@@ -1 +0,0 @@
-Testing that generate_file was {{ generate_file }}
\ No newline at end of file
diff --git a/tests/files/{{cookiecutter.generate_file}}.txt b/tests/files/{{cookiecutter.generate_file}}.txt
new file mode 100644
index 0000000..36f98f8
--- /dev/null
+++ b/tests/files/{{cookiecutter.generate_file}}.txt
@@ -0,0 +1 @@
+Testing {{ cookiecutter.generate_file }}
\ No newline at end of file
diff --git a/tests/files/{{cookiecutter.generate_file}}_crlf_newlines.txt b/tests/files/{{cookiecutter.generate_file}}_crlf_newlines.txt
new file mode 100644
index 0000000..7937467
--- /dev/null
+++ b/tests/files/{{cookiecutter.generate_file}}_crlf_newlines.txt
@@ -0,0 +1,3 @@
+newline is CRLF
+newline is CRLF
+newline is CRLF
diff --git a/tests/files/{{cookiecutter.generate_file}}_lf_newlines.txt b/tests/files/{{cookiecutter.generate_file}}_lf_newlines.txt
new file mode 100644
index 0000000..e7c0f74
--- /dev/null
+++ b/tests/files/{{cookiecutter.generate_file}}_lf_newlines.txt
@@ -0,0 +1,2 @@
+newline is LF
+newline is LF
diff --git a/tests/files/{{generate_file}}.txt b/tests/files/{{generate_file}}.txt
deleted file mode 100644
index e2b5167..0000000
--- a/tests/files/{{generate_file}}.txt
+++ /dev/null
@@ -1 +0,0 @@
-Testing {{ generate_file }}
\ No newline at end of file
diff --git a/tests/test-generate-files-line-end/cookiecutter.json b/tests/test-generate-files-line-end/cookiecutter.json
new file mode 100644
index 0000000..688dd6d
--- /dev/null
+++ b/tests/test-generate-files-line-end/cookiecutter.json
@@ -0,0 +1,9 @@
+{
+    "full_name": "Philippe Ombredanne",
+    "year": "2015",
+    "color": "blue",
+    "letter": "D",
+    "folder_name": "im_a.dir",
+    "filename": "im_a.file",
+    "test_name": "output_folder"
+}
\ No newline at end of file
diff --git a/tests/test-generate-files-line-end/{{cookiecutter.test_name}}/folder/in_folder.txt b/tests/test-generate-files-line-end/{{cookiecutter.test_name}}/folder/in_folder.txt
new file mode 100644
index 0000000..f1cdaea
--- /dev/null
+++ b/tests/test-generate-files-line-end/{{cookiecutter.test_name}}/folder/in_folder.txt
@@ -0,0 +1 @@
+The color is {{ cookiecutter.color }} and the letter is {{ cookiecutter.letter }}.
diff --git a/tests/test-generate-files-line-end/{{cookiecutter.test_name}}/something.txt b/tests/test-generate-files-line-end/{{cookiecutter.test_name}}/something.txt
new file mode 100644
index 0000000..85a8899
--- /dev/null
+++ b/tests/test-generate-files-line-end/{{cookiecutter.test_name}}/something.txt
@@ -0,0 +1,3 @@
+Hi!
+My name is {{ cookiecutter.full_name }}.
+It is {{ cookiecutter.year }}.
diff --git a/tests/test-generate-files-line-end/{{cookiecutter.test_name}}/{{cookiecutter.folder_name}}/{{cookiecutter.filename}}.py b/tests/test-generate-files-line-end/{{cookiecutter.test_name}}/{{cookiecutter.folder_name}}/{{cookiecutter.filename}}.py
new file mode 100644
index 0000000..0e2debf
--- /dev/null
+++ b/tests/test-generate-files-line-end/{{cookiecutter.test_name}}/{{cookiecutter.folder_name}}/{{cookiecutter.filename}}.py
@@ -0,0 +1,2 @@
+"""Sample file to be created through a cookiecutter run."""
+print("This is the contents of {{ cookiecutter.filename }}.py.")
diff --git a/tests/test-generate-files/input{{cookiecutter.food}}/simple-with-newline-crlf.txt b/tests/test-generate-files/input{{cookiecutter.food}}/simple-with-newline-crlf.txt
new file mode 100644
index 0000000..7937467
--- /dev/null
+++ b/tests/test-generate-files/input{{cookiecutter.food}}/simple-with-newline-crlf.txt
@@ -0,0 +1,3 @@
+newline is CRLF
+newline is CRLF
+newline is CRLF
diff --git a/tests/test-generate-files/input{{cookiecutter.food}}/simple-with-newline.txt b/tests/test-generate-files/input{{cookiecutter.food}}/simple-with-newline.txt
index 8658884..e7c0f74 100644
--- a/tests/test-generate-files/input{{cookiecutter.food}}/simple-with-newline.txt
+++ b/tests/test-generate-files/input{{cookiecutter.food}}/simple-with-newline.txt
@@ -1 +1,2 @@
-I eat {{ cookiecutter.food }}
+newline is LF
+newline is LF
diff --git a/tests/test_generate_file.py b/tests/test_generate_file.py
index bca4980..2ca30df 100644
--- a/tests/test_generate_file.py
+++ b/tests/test_generate_file.py
@@ -20,6 +20,10 @@ def tear_down():
     yield
     if os.path.exists('tests/files/cheese.txt'):
         os.remove('tests/files/cheese.txt')
+    if os.path.exists('tests/files/cheese_lf_newlines.txt'):
+        os.remove('tests/files/cheese_lf_newlines.txt')
+    if os.path.exists('tests/files/cheese_crlf_newlines.txt'):
+        os.remove('tests/files/cheese_crlf_newlines.txt')
 
 
 @pytest.fixture
@@ -32,9 +36,12 @@ def env():
 
 def test_generate_file(env):
     """Verify simple file is generated with rendered context data."""
-    infile = 'tests/files/{{generate_file}}.txt'
+    infile = 'tests/files/{{cookiecutter.generate_file}}.txt'
     generate.generate_file(
-        project_dir=".", infile=infile, context={'generate_file': 'cheese'}, env=env
+        project_dir=".",
+        infile=infile,
+        context={'cookiecutter': {'generate_file': 'cheese'}},
+        env=env,
     )
     assert os.path.isfile('tests/files/cheese.txt')
     with open('tests/files/cheese.txt', 'rt') as f:
@@ -74,9 +81,14 @@ def test_generate_file_with_true_condition(env):
 
     This test has positive answer, so file should be rendered.
     """
-    infile = 'tests/files/{% if generate_file == \'y\' %}cheese.txt{% endif %}'
+    infile = (
+        'tests/files/{% if cookiecutter.generate_file == \'y\' %}cheese.txt{% endif %}'
+    )
     generate.generate_file(
-        project_dir=".", infile=infile, context={'generate_file': 'y'}, env=env
+        project_dir=".",
+        infile=infile,
+        context={'cookiecutter': {'generate_file': 'y'}},
+        env=env,
     )
     assert os.path.isfile('tests/files/cheese.txt')
     with open('tests/files/cheese.txt', 'rt') as f:
@@ -89,9 +101,14 @@ def test_generate_file_with_false_condition(env):
 
     This test has negative answer, so file should not be rendered.
     """
-    infile = 'tests/files/{% if generate_file == \'y\' %}cheese.txt{% endif %}'
+    infile = (
+        'tests/files/{% if cookiecutter.generate_file == \'y\' %}cheese.txt{% endif %}'
+    )
     generate.generate_file(
-        project_dir=".", infile=infile, context={'generate_file': 'n'}, env=env
+        project_dir=".",
+        infile=infile,
+        context={'cookiecutter': {'generate_file': 'n'}},
+        env=env,
     )
     assert not os.path.isfile('tests/files/cheese.txt')
 
@@ -117,3 +134,39 @@ def test_generate_file_verbose_template_syntax_error(env, expected_msg):
             env=env,
         )
     assert str(exception.value) == expected_msg
+
+
+def test_generate_file_does_not_translate_lf_newlines_to_crlf(env, tmp_path):
+    """Verify that file generation use same line ending, as in source file."""
+    infile = 'tests/files/{{cookiecutter.generate_file}}_lf_newlines.txt'
+    generate.generate_file(
+        project_dir=".",
+        infile=infile,
+        context={'cookiecutter': {'generate_file': 'cheese'}},
+        env=env,
+    )
+
+    # this generated file should have a LF line ending
+    gf = 'tests/files/cheese_lf_newlines.txt'
+    with open(gf, 'r', encoding='utf-8', newline='') as f:
+        simple_text = f.readline()
+    assert simple_text == 'newline is LF\n'
+    assert f.newlines == '\n'
+
+
+def test_generate_file_does_not_translate_crlf_newlines_to_lf(env):
+    """Verify that file generation use same line ending, as in source file."""
+    infile = 'tests/files/{{cookiecutter.generate_file}}_crlf_newlines.txt'
+    generate.generate_file(
+        project_dir=".",
+        infile=infile,
+        context={'cookiecutter': {'generate_file': 'cheese'}},
+        env=env,
+    )
+
+    # this generated file should have a CRLF line ending
+    gf = 'tests/files/cheese_crlf_newlines.txt'
+    with open(gf, 'r', encoding='utf-8', newline='') as f:
+        simple_text = f.readline()
+    assert simple_text == 'newline is CRLF\r\n'
+    assert f.newlines == '\r\n'
diff --git a/tests/test_generate_files.py b/tests/test_generate_files.py
index cae50bd..5cc59ee 100644
--- a/tests/test_generate_files.py
+++ b/tests/test_generate_files.py
@@ -2,20 +2,15 @@
 
 Use the global clean_system fixture and run additional teardown code to remove
 some special folders.
-
-For a better understanding - order of fixture calls:
-clean_system setup code
-remove_additional_folders setup code
-remove_additional_folders teardown code
-clean_system teardown code
 """
 import io
 import os
+from pathlib import Path
 
 import pytest
 from binaryornot.check import is_binary
 
-from cookiecutter import exceptions, generate, utils
+from cookiecutter import exceptions, generate
 
 
 @pytest.mark.parametrize('invalid_dirname', ['', '{foo}', '{{foo', 'bar}}'])
@@ -25,24 +20,7 @@ def test_ensure_dir_is_templated_raises(invalid_dirname):
         generate.ensure_dir_is_templated(invalid_dirname)
 
 
-@pytest.fixture(scope='function')
-def remove_additional_folders():
-    """Remove some special folders which are created by the tests."""
-    yield
-    if os.path.exists('inputpizzä'):
-        utils.rmtree('inputpizzä')
-    if os.path.exists('inputgreen'):
-        utils.rmtree('inputgreen')
-    if os.path.exists('inputbinary_files'):
-        utils.rmtree('inputbinary_files')
-    if os.path.exists('tests/custom_output_dir'):
-        utils.rmtree('tests/custom_output_dir')
-    if os.path.exists('inputpermissions'):
-        utils.rmtree('inputpermissions')
-
-
-@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
-def test_generate_files_nontemplated_exception():
+def test_generate_files_nontemplated_exception(tmp_path):
     """
     Verify `generate_files` raises when no directories to render exist.
 
@@ -52,84 +30,148 @@ def test_generate_files_nontemplated_exception():
         generate.generate_files(
             context={'cookiecutter': {'food': 'pizza'}},
             repo_dir='tests/test-generate-files-nontemplated',
+            output_dir=tmp_path,
         )
 
 
-@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
-def test_generate_files():
+def test_generate_files(tmp_path):
     """Verify directory name correctly rendered with unicode containing context."""
     generate.generate_files(
         context={'cookiecutter': {'food': 'pizzä'}},
         repo_dir='tests/test-generate-files',
+        output_dir=tmp_path,
     )
 
-    simple_file = 'inputpizzä/simple.txt'
-    assert os.path.isfile(simple_file)
+    simple_file = Path(tmp_path, 'inputpizzä/simple.txt')
+    assert simple_file.exists()
+    assert simple_file.is_file()
 
-    simple_text = io.open(simple_file, 'rt', encoding='utf-8').read()
+    simple_text = open(simple_file, 'rt', encoding='utf-8').read()
     assert simple_text == 'I eat pizzä'
 
 
-@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
-def test_generate_files_with_trailing_newline():
+def test_generate_files_with_linux_newline(tmp_path):
     """Verify new line not removed by templating engine after folder generation."""
     generate.generate_files(
         context={'cookiecutter': {'food': 'pizzä'}},
         repo_dir='tests/test-generate-files',
+        output_dir=tmp_path,
     )
 
-    newline_file = 'inputpizzä/simple-with-newline.txt'
-    assert os.path.isfile(newline_file)
+    newline_file = Path(tmp_path, 'inputpizzä/simple-with-newline.txt')
+    assert newline_file.is_file()
+    assert newline_file.exists()
+
+    with io.open(newline_file, 'r', encoding='utf-8', newline='') as f:
+        simple_text = f.readline()
+    assert simple_text == 'newline is LF\n'
+    assert f.newlines == '\n'
+
+
+def test_generate_files_with_trailing_newline_forced_to_linux_by_context(tmp_path):
+    """Verify new line not removed by templating engine after folder generation."""
+    generate.generate_files(
+        context={'cookiecutter': {'food': 'pizzä', '_new_lines': '\r\n'}},
+        repo_dir='tests/test-generate-files',
+        output_dir=tmp_path,
+    )
+
+    # assert 'Overwritting endline character with %s' in caplog.messages
+    newline_file = Path(tmp_path, 'inputpizzä/simple-with-newline.txt')
+    assert newline_file.is_file()
+    assert newline_file.exists()
+
+    with io.open(newline_file, 'r', encoding='utf-8', newline='') as f:
+        simple_text = f.readline()
+    assert simple_text == 'newline is LF\r\n'
+    assert f.newlines == '\r\n'
+
+
+def test_generate_files_with_windows_newline(tmp_path):
+    """Verify windows source line end not changed during files generation."""
+    generate.generate_files(
+        context={'cookiecutter': {'food': 'pizzä'}},
+        repo_dir='tests/test-generate-files',
+        output_dir=tmp_path,
+    )
 
-    with io.open(newline_file, 'r', encoding='utf-8') as f:
-        simple_text = f.read()
-    assert simple_text == 'I eat pizzä\n'
+    newline_file = Path(tmp_path, 'inputpizzä/simple-with-newline-crlf.txt')
+    assert newline_file.is_file()
+    assert newline_file.exists()
 
+    with io.open(newline_file, 'r', encoding='utf-8', newline='') as f:
+        simple_text = f.readline()
+    assert simple_text == 'newline is CRLF\r\n'
+    assert f.newlines == '\r\n'
 
-@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
-def test_generate_files_binaries():
+
+def test_generate_files_with_windows_newline_forced_to_linux_by_context(tmp_path):
+    """Verify windows line end changed to linux during files generation."""
+    generate.generate_files(
+        context={'cookiecutter': {'food': 'pizzä', '_new_lines': '\n'}},
+        repo_dir='tests/test-generate-files',
+        output_dir=tmp_path,
+    )
+
+    newline_file = Path(tmp_path, 'inputpizzä/simple-with-newline-crlf.txt')
+    assert newline_file.is_file()
+    assert newline_file.exists()
+
+    with io.open(newline_file, 'r', encoding='utf-8', newline='') as f:
+        simple_text = f.readline()
+
+    assert simple_text == 'newline is CRLF\n'
+    assert f.newlines == '\n'
+
+
+def test_generate_files_binaries(tmp_path):
     """Verify binary files created during directory generation."""
     generate.generate_files(
         context={'cookiecutter': {'binary_test': 'binary_files'}},
         repo_dir='tests/test-generate-binaries',
+        output_dir=tmp_path,
     )
 
-    assert is_binary('inputbinary_files/logo.png')
-    assert is_binary('inputbinary_files/.DS_Store')
-    assert not is_binary('inputbinary_files/readme.txt')
-    assert is_binary('inputbinary_files/some_font.otf')
-    assert is_binary('inputbinary_files/binary_files/logo.png')
-    assert is_binary('inputbinary_files/binary_files/.DS_Store')
-    assert not is_binary('inputbinary_files/binary_files/readme.txt')
-    assert is_binary('inputbinary_files/binary_files/some_font.otf')
-    assert is_binary('inputbinary_files/binary_files/binary_files/logo.png')
+    dst_dir = Path(tmp_path, 'inputbinary_files')
+
+    assert is_binary(str(Path(dst_dir, 'logo.png')))
+    assert is_binary(str(Path(dst_dir, '.DS_Store')))
+    assert not is_binary(str(Path(dst_dir, 'readme.txt')))
+    assert is_binary(str(Path(dst_dir, 'some_font.otf')))
+    assert is_binary(str(Path(dst_dir, 'binary_files/logo.png')))
+    assert is_binary(str(Path(dst_dir, 'binary_files/.DS_Store')))
+    assert not is_binary(str(Path(dst_dir, 'binary_files/readme.txt')))
+    assert is_binary(str(Path(dst_dir, 'binary_files/some_font.otf')))
+    assert is_binary(str(Path(dst_dir, 'binary_files/binary_files/logo.png')))
 
 
-@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
-def test_generate_files_absolute_path():
-    """Verify usage of `abspath` does not change files generation behaviour."""
+def test_generate_files_absolute_path(tmp_path):
+    """Verify usage of absolute path does not change files generation behaviour."""
     generate.generate_files(
         context={'cookiecutter': {'food': 'pizzä'}},
-        repo_dir=os.path.abspath('tests/test-generate-files'),
+        repo_dir=Path('tests/test-generate-files').absolute(),
+        output_dir=tmp_path,
     )
-    assert os.path.isfile('inputpizzä/simple.txt')
+    assert Path(tmp_path, 'inputpizzä/simple.txt').is_file()
 
 
-@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
-def test_generate_files_output_dir():
+def test_generate_files_output_dir(tmp_path):
     """Verify `output_dir` option for `generate_files` changing location correctly."""
-    os.mkdir('tests/custom_output_dir')
+    output_dir = Path(tmp_path, 'custom_output_dir')
+    output_dir.mkdir()
+
     project_dir = generate.generate_files(
         context={'cookiecutter': {'food': 'pizzä'}},
-        repo_dir=os.path.abspath('tests/test-generate-files'),
-        output_dir='tests/custom_output_dir',
+        repo_dir=Path('tests/test-generate-files').absolute(),
+        output_dir=output_dir,
     )
-    assert os.path.isfile('tests/custom_output_dir/inputpizzä/simple.txt')
-    assert project_dir == os.path.abspath('tests/custom_output_dir/inputpizzä')
+
+    assert Path(output_dir, 'inputpizzä/simple.txt').exists()
+    assert Path(output_dir, 'inputpizzä/simple.txt').is_file()
+    assert Path(project_dir) == Path(tmp_path, 'custom_output_dir/inputpizzä')
 
 
-@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
-def test_generate_files_permissions():
+def test_generate_files_permissions(tmp_path):
     """Verify generates files respect source files permissions.
 
     simple.txt and script.sh should retain their respective 0o644 and 0o755
@@ -138,46 +180,48 @@ def test_generate_files_permissions():
     generate.generate_files(
         context={'cookiecutter': {'permissions': 'permissions'}},
         repo_dir='tests/test-generate-files-permissions',
+        output_dir=tmp_path,
     )
 
-    assert os.path.isfile('inputpermissions/simple.txt')
+    assert Path(tmp_path, 'inputpermissions/simple.txt').exists()
+    assert Path(tmp_path, 'inputpermissions/simple.txt').is_file()
 
-    # simple.txt should still be 0o644
-    tests_simple_file = os.path.join(
+    # Verify source simple.txt should still be 0o644
+    tests_simple_file = Path(
         'tests',
         'test-generate-files-permissions',
         'input{{cookiecutter.permissions}}',
         'simple.txt',
     )
-    tests_simple_file_mode = os.stat(tests_simple_file).st_mode & 0o777
+    tests_simple_file_mode = tests_simple_file.stat().st_mode
 
-    input_simple_file = os.path.join('inputpermissions', 'simple.txt')
-    input_simple_file_mode = os.stat(input_simple_file).st_mode & 0o777
+    input_simple_file = Path(tmp_path, 'inputpermissions', 'simple.txt')
+    input_simple_file_mode = input_simple_file.stat().st_mode
     assert tests_simple_file_mode == input_simple_file_mode
 
-    assert os.path.isfile('inputpermissions/script.sh')
+    assert Path(tmp_path, 'inputpermissions/script.sh').exists()
+    assert Path(tmp_path, 'inputpermissions/script.sh').is_file()
 
-    # script.sh should still be 0o755
-    tests_script_file = os.path.join(
+    # Verify source script.sh should still be 0o755
+    tests_script_file = Path(
         'tests',
         'test-generate-files-permissions',
         'input{{cookiecutter.permissions}}',
         'script.sh',
     )
-    tests_script_file_mode = os.stat(tests_script_file).st_mode & 0o777
+    tests_script_file_mode = tests_script_file.stat().st_mode
 
-    input_script_file = os.path.join('inputpermissions', 'script.sh')
-    input_script_file_mode = os.stat(input_script_file).st_mode & 0o777
+    input_script_file = Path(tmp_path, 'inputpermissions', 'script.sh')
+    input_script_file_mode = input_script_file.stat().st_mode
     assert tests_script_file_mode == input_script_file_mode
 
 
-@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
-def test_generate_files_with_overwrite_if_exists_with_skip_if_file_exists():
+def test_generate_files_with_overwrite_if_exists_with_skip_if_file_exists(tmp_path):
     """Verify `skip_if_file_exist` has priority over `overwrite_if_exists`."""
-    simple_file = 'inputpizzä/simple.txt'
-    simple_with_new_line_file = 'inputpizzä/simple-with-newline.txt'
+    simple_file = Path(tmp_path, 'inputpizzä/simple.txt')
+    simple_with_new_line_file = Path(tmp_path, 'inputpizzä/simple-with-newline.txt')
 
-    os.makedirs('inputpizzä')
+    Path(tmp_path, 'inputpizzä').mkdir(parents=True)
     with open(simple_file, 'w') as f:
         f.write('temp')
 
@@ -186,22 +230,24 @@ def test_generate_files_with_overwrite_if_exists_with_skip_if_file_exists():
         repo_dir='tests/test-generate-files',
         overwrite_if_exists=True,
         skip_if_file_exists=True,
+        output_dir=tmp_path,
     )
 
-    assert os.path.isfile(simple_file)
-    assert os.path.isfile(simple_with_new_line_file)
+    assert Path(simple_file).is_file()
+    assert Path(simple_file).exists()
+    assert Path(simple_with_new_line_file).is_file()
+    assert Path(simple_with_new_line_file).exists()
 
     simple_text = io.open(simple_file, 'rt', encoding='utf-8').read()
     assert simple_text == 'temp'
 
 
-@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
-def test_generate_files_with_skip_if_file_exists():
+def test_generate_files_with_skip_if_file_exists(tmp_path):
     """Verify existed files not removed if error raised with `skip_if_file_exists`."""
-    simple_file = 'inputpizzä/simple.txt'
-    simple_with_new_line_file = 'inputpizzä/simple-with-newline.txt'
+    simple_file = Path(tmp_path, 'inputpizzä/simple.txt')
+    simple_with_new_line_file = Path(tmp_path, 'inputpizzä/simple-with-newline.txt')
 
-    os.makedirs('inputpizzä')
+    Path(tmp_path, 'inputpizzä').mkdir(parents=True)
     with open(simple_file, 'w') as f:
         f.write('temp')
 
@@ -210,22 +256,24 @@ def test_generate_files_with_skip_if_file_exists():
             context={'cookiecutter': {'food': 'pizzä'}},
             repo_dir='tests/test-generate-files',
             skip_if_file_exists=True,
+            output_dir=tmp_path,
         )
 
-    assert os.path.isfile(simple_file)
-    assert not os.path.exists(simple_with_new_line_file)
+    assert Path(simple_file).is_file()
+    assert Path(simple_file).exists()
+    assert not Path(simple_with_new_line_file).is_file()
+    assert not Path(simple_with_new_line_file).exists()
 
     simple_text = io.open(simple_file, 'rt', encoding='utf-8').read()
     assert simple_text == 'temp'
 
 
-@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')
-def test_generate_files_with_overwrite_if_exists():
+def test_generate_files_with_overwrite_if_exists(tmp_path):
     """Verify overwrite_if_exists overwrites old files."""
-    simple_file = 'inputpizzä/simple.txt'
-    simple_with_new_line_file = 'inputpizzä/simple-with-newline.txt'
+    simple_file = Path(tmp_path, 'inputpizzä/simple.txt')
+    simple_with_new_line_file = Path(tmp_path, 'inputpizzä/simple-with-newline.txt')
 
-    os.makedirs('inputpizzä')
+    Path(tmp_path, 'inputpizzä').mkdir(parents=True)
     with open(simple_file, 'w') as f:
         f.write('temp')
 
@@ -233,10 +281,13 @@ def test_generate_files_with_overwrite_if_exists():
         context={'cookiecutter': {'food': 'pizzä'}},
         repo_dir='tests/test-generate-files',
         overwrite_if_exists=True,
+        output_dir=tmp_path,
     )
 
-    assert os.path.isfile(simple_file)
-    assert os.path.isfile(simple_with_new_line_file)
+    assert Path(simple_file).is_file()
+    assert Path(simple_file).exists()
+    assert Path(simple_with_new_line_file).is_file()
+    assert Path(simple_with_new_line_file).exists()
 
     simple_text = io.open(simple_file, 'rt', encoding='utf-8').read()
     assert simple_text == 'I eat pizzä'
@@ -349,14 +400,12 @@ def test_raise_undefined_variable_dir_name_existing_project(tmpdir, undefined_co
     assert output_dir.join('testproject').exists()
 
 
-def test_raise_undefined_variable_project_dir(tmpdir):
+def test_raise_undefined_variable_project_dir(tmp_path):
     """Verify correct error raised when directory name cannot be rendered."""
-    output_dir = tmpdir.mkdir('output')
-
     with pytest.raises(exceptions.UndefinedVariableInTemplate) as err:
         generate.generate_files(
             repo_dir='tests/undefined-variable/dir-name/',
-            output_dir=str(output_dir),
+            output_dir=tmp_path,
             context={},
         )
     error = err.value
@@ -364,4 +413,4 @@ def test_raise_undefined_variable_project_dir(tmpdir):
     assert msg == error.message
     assert error.context == {}
 
-    assert not output_dir.join('testproject').exists()
+    assert not Path(tmp_path, 'testproject').exists()
