commit ae25f9a0cd0fdd29d273099d87584f669edf446f
Author: Raphael Pierzina <raphael@hackebrot.de>
Date:   Thu Jul 19 19:04:53 2018 +0200

    Use OrderedDict in generate_context() (#1074)
    
    * Use OrderedDict in generate_context()
    
    * Use OrderedDict in prompt_for_config()
    
    * Use collections.OrderedDict for all context values
    
    * Update error message in tests/test_cli.py
    
    * Fix flake8 issue in tests/test_cli.py

diff --git a/cookiecutter/cli.py b/cookiecutter/cli.py
index 1b7db2d..9034d95 100644
--- a/cookiecutter/cli.py
+++ b/cookiecutter/cli.py
@@ -5,6 +5,7 @@
 import os
 import sys
 import json
+import collections
 
 import click
 
@@ -42,7 +43,7 @@ def validate_extra_context(ctx, param, value):
 
     # Convert tuple -- e.g.: (u'program_name=foobar', u'startsecs=66')
     # to dict -- e.g.: {'program_name': 'foobar', 'startsecs': '66'}
-    return dict(s.split('=', 1) for s in value) or None
+    return collections.OrderedDict(s.split('=', 1) for s in value) or None
 
 
 @click.command(context_settings=dict(help_option_names=[u'-h', u'--help']))
diff --git a/cookiecutter/config.py b/cookiecutter/config.py
index 42214b8..c7d8b0d 100644
--- a/cookiecutter/config.py
+++ b/cookiecutter/config.py
@@ -7,6 +7,7 @@ import copy
 import logging
 import os
 import io
+import collections
 
 import poyo
 
@@ -27,7 +28,7 @@ BUILTIN_ABBREVIATIONS = {
 DEFAULT_CONFIG = {
     'cookiecutters_dir': os.path.expanduser('~/.cookiecutters/'),
     'replay_dir': os.path.expanduser('~/.cookiecutter_replay/'),
-    'default_context': {},
+    'default_context': collections.OrderedDict([]),
     'abbreviations': BUILTIN_ABBREVIATIONS,
 }
 
diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 3bdd1e0..e536136 100644
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -83,7 +83,7 @@ def generate_context(context_file='cookiecutter.json', default_context=None,
     :param default_context: Dictionary containing config to take into account.
     :param extra_context: Dictionary containing configuration overrides
     """
-    context = {}
+    context = OrderedDict([])
 
     try:
         with open(context_file) as file_handle:
@@ -256,7 +256,7 @@ def generate_files(repo_dir, context=None, output_dir='.',
     """
     template_dir = find_template(repo_dir)
     logger.debug('Generating project from {}...'.format(template_dir))
-    context = context or {}
+    context = context or OrderedDict([])
 
     unrendered_dir = os.path.split(template_dir)[1]
     ensure_dir_is_templated(unrendered_dir)
diff --git a/cookiecutter/prompt.py b/cookiecutter/prompt.py
index d420d02..45a065b 100644
--- a/cookiecutter/prompt.py
+++ b/cookiecutter/prompt.py
@@ -193,7 +193,7 @@ def prompt_for_config(context, no_input=False):
 
     :param no_input: Prompt the user at command line for manual configuration?
     """
-    cookiecutter_dict = {}
+    cookiecutter_dict = OrderedDict([])
     env = StrictEnvironment(context=context)
 
     # First pass: Handle simple and raw variables, plus choices.
diff --git a/tests/test_cli.py b/tests/test_cli.py
index 061f0a4..d351200 100644
--- a/tests/test_cli.py
+++ b/tests/test_cli.py
@@ -333,7 +333,10 @@ def test_echo_undefined_variable_error(tmpdir, cli_runner):
     error = "Unable to create file '{{cookiecutter.foobar}}'"
     assert error in result.output
 
-    message = "Error message: 'dict object' has no attribute 'foobar'"
+    message = (
+        "Error message: 'collections.OrderedDict object' "
+        "has no attribute 'foobar'"
+    )
     assert message in result.output
 
     context = {
