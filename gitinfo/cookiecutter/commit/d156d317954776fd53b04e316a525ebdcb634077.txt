commit d156d317954776fd53b04e316a525ebdcb634077
Author: Audrey Roy <audreyr@gmail.com>
Date:   Fri Sep 6 15:49:48 2013 +0200

    Add output_dir param to generate_files().

diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index 2e6448b..7ada131 100755
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -104,13 +104,21 @@ def generate_file(project_dir, infile, context, env):
             fh.write(rendered_file)
 
 
-def render_and_create_dir(dirname, context):
+def render_and_create_dir(dirname, context, output_dir):
     """
     Renders the name of a directory, creates the directory, and returns its path.
     """
 
+    dirname = os.path.split(dirname)[1]
     name_tmpl = Template(dirname)
-    dir_to_create = name_tmpl.render(**context)
+    rendered_dirname = name_tmpl.render(**context)
+    logging.debug('Rendered dir {0} must exist in output_dir {1}'.format(
+        rendered_dirname,
+        output_dir
+    ))
+    dir_to_create = os.path.normpath(
+        os.path.join(output_dir, rendered_dirname)
+    )
     make_sure_path_exists(dir_to_create)
     return dir_to_create
 
@@ -126,31 +134,32 @@ def ensure_dir_is_templated(dirname):
         raise NonTemplatedInputDirException
 
 
-def generate_files(template_dir, context=None):
+def generate_files(template_dir, context=None, output_dir="."):
     """
     Renders the templates and saves them to files.
     :param input_dir: Project template input directory.
     :paramtype input_dir: directory
+    :param output_dir: Where to output the generated project dir into.
     """
 
     logging.debug('Generating project from {0}...'.format(template_dir))
     context = context or {}
 
     ensure_dir_is_templated(template_dir)
-    output_dir = render_and_create_dir(template_dir, context)
+    project_dir = render_and_create_dir(template_dir, context, output_dir)
 
     # We want the Jinja path and the OS paths to match. Consequently, we'll:
     #   + CD to the template folder
     #   + Set Jinja's path to "."
     #
     #  In order to build our files to the correct folder(s), we'll use an
-    # absolute path for the target folder (output_dir)
+    # absolute path for the target folder (project_dir)
 
-    output_dir = os.path.abspath(output_dir)
-    logging.debug("output_dir is {0}".format(output_dir))
+    project_dir = os.path.abspath(project_dir)
+    logging.debug("project_dir is {0}".format(project_dir))
 
     # run pre-gen hook
-    run_hook('pre_gen_project', output_dir)
+    run_hook('pre_gen_project', project_dir)
 
     with work_in(template_dir):
         env = Environment()
@@ -158,13 +167,13 @@ def generate_files(template_dir, context=None):
 
         for root, dirs, files in os.walk("."):
             for d in dirs:
-                unrendered_dir = os.path.join(output_dir, os.path.join(root, d))
-                render_and_create_dir(unrendered_dir, context)
+                unrendered_dir = os.path.join(project_dir, os.path.join(root, d))
+                render_and_create_dir(unrendered_dir, context, output_dir)
 
             for f in files:
                 infile = os.path.join(root, f)
                 logging.debug("f is {0}".format(f))
-                generate_file(output_dir, infile, context, env)
+                generate_file(project_dir, infile, context, env)
 
     # run post-gen hook
-    run_hook('post_gen_project', output_dir)
+    run_hook('post_gen_project', project_dir)
diff --git a/cookiecutter/utils.py b/cookiecutter/utils.py
index 61fee63..c40d4e4 100755
--- a/cookiecutter/utils.py
+++ b/cookiecutter/utils.py
@@ -8,7 +8,9 @@ cookiecutter.utils
 Helper functions used throughout Cookiecutter.
 """
 
+from __future__ import unicode_literals
 import errno
+import logging
 import os
 import sys
 import contextlib
@@ -26,6 +28,8 @@ def make_sure_path_exists(path):
     Ensures that a directory exists.
     :param path: A directory path.
     """
+    
+    logging.debug("Making sure path exists: {0}".format(path))
     try:
         os.makedirs(path)
     except OSError as exception:
diff --git a/tests/test_generate.py b/tests/test_generate.py
index c970057..6529c33 100755
--- a/tests/test_generate.py
+++ b/tests/test_generate.py
@@ -122,6 +122,15 @@ class TestGenerateFiles(unittest.TestCase):
         )
         self.assertTrue(os.path.isfile('tests/inputpizzä/simple.txt'))
 
+    def test_generate_files_output_dir(self):
+        os.mkdir('tests/custom_output_dir')
+        generate.generate_files(
+            context={'food': 'pizzä'},
+            template_dir=os.path.abspath('tests/input{{food}}'),
+            output_dir='tests/custom_output_dir'
+        )
+        self.assertTrue(os.path.isfile('tests/custom_output_dir/inputpizzä/simple.txt'))
+
     def tearDown(self):
         if os.path.exists('tests/inputpizzä'):
             shutil.rmtree('tests/inputpizzä')
@@ -129,6 +138,8 @@ class TestGenerateFiles(unittest.TestCase):
             shutil.rmtree('tests/inputgreen')
         if os.path.exists('tests/inputbinary_files'):
             shutil.rmtree('tests/inputbinary_files')
+        if os.path.exists('tests/custom_output_dir'):
+            shutil.rmtree('tests/custom_output_dir')
 
 
 class TestGenerateContext(unittest.TestCase):
