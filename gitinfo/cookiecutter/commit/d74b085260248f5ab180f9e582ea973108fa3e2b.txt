commit d74b085260248f5ab180f9e582ea973108fa3e2b
Author: Stuart Mumford <stuart@cadair.com>
Date:   Fri May 29 23:53:41 2020 +0100

    Added: --replay-file cli option, for replay file distributing (#906)
    
    * Add the option to specify a replay file.
    
    * Document the --replay-file option & add entry in HISTORY.rst
    
    * Write tests for the --replay-file option
    
    * Don't double add '.json' file extension if provided in --replay-file
    
    * Fix flake8 error
    
    * Update docs
    
    * Fix tests
    
    * Linting
    
    Co-authored-by: Stuart Mumford <stuart@cadair.com>
    Co-authored-by: Bruno Alla <alla.brunoo@gmail.com>
    Co-authored-by: Andrey Shpak <ashpak@ashpak.ru>

diff --git a/cookiecutter/cli.py b/cookiecutter/cli.py
index ddd75cc..d2e7155 100644
--- a/cookiecutter/cli.py
+++ b/cookiecutter/cli.py
@@ -68,6 +68,12 @@ def validate_extra_context(ctx, param, value):
     is_flag=True,
     help='Do not prompt for parameters and only use information entered previously',
 )
+@click.option(
+    '--replay-file',
+    type=click.Path(),
+    default=None,
+    help=u'Use this file for replay instead of the default.',
+)
 @click.option(
     '-f',
     '--overwrite-if-exists',
@@ -123,6 +129,7 @@ def main(
     directory,
     skip_if_file_exists,
     accept_hooks,
+    replay_file,
 ):
     """Create a project from a Cookiecutter project template (TEMPLATE).
 
@@ -145,6 +152,9 @@ def main(
     else:
         _accept_hooks = accept_hooks == "yes"
 
+    if replay_file:
+        replay = replay_file
+
     try:
         cookiecutter(
             template,
diff --git a/cookiecutter/main.py b/cookiecutter/main.py
index bfe5ccf..047d30a 100644
--- a/cookiecutter/main.py
+++ b/cookiecutter/main.py
@@ -23,7 +23,7 @@ def cookiecutter(
     checkout=None,
     no_input=False,
     extra_context=None,
-    replay=False,
+    replay=None,
     overwrite_if_exists=False,
     output_dir='.',
     config_file=None,
@@ -42,7 +42,8 @@ def cookiecutter(
     :param no_input: Prompt the user at command line for manual configuration?
     :param extra_context: A dictionary of context that overrides default
         and user configuration.
-    :param overwrite_if_exists: Overwrite the contents of output directory
+    :param replay: Do not prompt for input, instead read from saved json. If
+        ``True`` read from the ``replay_dir``.
         if it exists
     :param output_dir: Where to output the generated project dir into.
     :param config_file: User configuration file path.
@@ -75,7 +76,11 @@ def cookiecutter(
     template_name = os.path.basename(os.path.abspath(repo_dir))
 
     if replay:
-        context = load(config_dict['replay_dir'], template_name)
+        if isinstance(replay, bool):
+            context = load(config_dict['replay_dir'], template_name)
+        else:
+            path, template_name = os.path.split(os.path.splitext(replay)[0])
+            context = load(path, template_name)
     else:
         context_file = os.path.join(repo_dir, 'cookiecutter.json')
         logger.debug('context_file is %s', context_file)
diff --git a/cookiecutter/replay.py b/cookiecutter/replay.py
index 8e6c7c8..504a6a3 100644
--- a/cookiecutter/replay.py
+++ b/cookiecutter/replay.py
@@ -11,7 +11,8 @@ from cookiecutter.utils import make_sure_path_exists
 
 def get_file_name(replay_dir, template_name):
     """Get the name of file."""
-    file_name = '{}.json'.format(template_name)
+    suffix = '.json' if not template_name.endswith('.json') else ''
+    file_name = '{}{}'.format(template_name, suffix)
     return os.path.join(replay_dir, file_name)
 
 
diff --git a/docs/advanced/replay.rst b/docs/advanced/replay.rst
index 746e17b..14afbfd 100644
--- a/docs/advanced/replay.rst
+++ b/docs/advanced/replay.rst
@@ -40,3 +40,15 @@ Or use the Python API::
 
 
 This feature is comes in handy if, for instance, you want to create a new project from an updated template.
+
+Custom replay file
+~~~~~~~~~~~~~~~~~~
+
+*New in Cookiecutter 2.0*
+
+To specify a custom filename, you can use the ``--replay-file`` option::
+
+    cookiecutter --replay-file ./cookiedozer.json gh:hackebrot/cookiedozer
+
+This may be useful to run the same replay file over several machines, in tests
+or when a user of the template reports a problem
diff --git a/tests/replay/test_replay.py b/tests/replay/test_replay.py
index 7ba50e4..92e1e3d 100644
--- a/tests/replay/test_replay.py
+++ b/tests/replay/test_replay.py
@@ -6,10 +6,12 @@ import pytest
 from cookiecutter import exceptions, main, replay
 
 
-def test_get_replay_file_name():
+@pytest.mark.parametrize("replay_file_name", ['bar', 'bar.json'])
+def test_get_replay_file_name(replay_file_name):
     """Make sure that replay.get_file_name generates a valid json file path."""
-    exp_replay_file_name = os.path.join('foo', 'bar.json')
-    assert replay.get_file_name('foo', 'bar') == exp_replay_file_name
+    exp_replay_file_path = os.path.join('foo', 'bar.json')
+    replay_file_path = replay.get_file_name('foo', replay_file_name)
+    assert replay_file_path == exp_replay_file_path
 
 
 @pytest.mark.parametrize(
diff --git a/tests/test_cli.py b/tests/test_cli.py
index 0bd9ac0..4d69423 100644
--- a/tests/test_cli.py
+++ b/tests/test_cli.py
@@ -109,6 +109,32 @@ def test_cli_replay(mocker, cli_runner):
     )
 
 
+@pytest.mark.usefixtures('remove_fake_project_dir')
+def test_cli_replay_file(mocker, cli_runner):
+    """Test cli invocation correctly pass --replay-file option."""
+    mock_cookiecutter = mocker.patch('cookiecutter.cli.cookiecutter')
+
+    template_path = 'tests/fake-repo-pre/'
+    result = cli_runner(template_path, '--replay-file', '~/custom-replay-file', '-v')
+
+    assert result.exit_code == 0
+    mock_cookiecutter.assert_called_once_with(
+        template_path,
+        None,
+        False,
+        replay='~/custom-replay-file',
+        overwrite_if_exists=False,
+        skip_if_file_exists=False,
+        output_dir='.',
+        config_file=None,
+        default_config=False,
+        extra_context=None,
+        password=None,
+        directory=None,
+        accept_hooks=True,
+    )
+
+
 @pytest.mark.usefixtures('remove_fake_project_dir')
 def test_cli_exit_on_noinput_and_replay(mocker, cli_runner):
     """Test cli invocation fail if both `no-input` and `replay` flags passed."""
diff --git a/tests/test_main.py b/tests/test_main.py
index ae7efad..46b7ff9 100644
--- a/tests/test_main.py
+++ b/tests/test_main.py
@@ -52,3 +52,19 @@ def test_replay_load_template_name(
     mock_replay_load.assert_called_once_with(
         user_config_data['replay_dir'], 'fake-repo-tmpl',
     )
+
+
+def test_custom_replay_file(monkeypatch, mocker, user_config_file):
+    """Check that reply.load is called with the custom replay_file."""
+    monkeypatch.chdir('tests/fake-repo-tmpl')
+
+    mock_replay_load = mocker.patch('cookiecutter.main.load')
+    mocker.patch('cookiecutter.main.generate_files')
+
+    cookiecutter(
+        '.', replay='./custom-replay-file', config_file=user_config_file,
+    )
+
+    mock_replay_load.assert_called_once_with(
+        '.', 'custom-replay-file',
+    )
