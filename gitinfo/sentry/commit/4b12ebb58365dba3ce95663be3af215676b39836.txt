commit 4b12ebb58365dba3ce95663be3af215676b39836
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Nov 16 10:48:16 2018 -0800

    feat(discover): Update field names (#10613)
    
    event_id -> id
    project_id -> project.id
    project_name -> project.name
    issue -> issue.id

diff --git a/src/sentry/api/endpoints/organization_discover_query.py b/src/sentry/api/endpoints/organization_discover_query.py
index 2826618f1b..9443aa78e6 100644
--- a/src/sentry/api/endpoints/organization_discover_query.py
+++ b/src/sentry/api/endpoints/organization_discover_query.py
@@ -215,35 +215,35 @@ class OrganizationDiscoverQueryEndpoint(OrganizationEndpoint):
         return types.get(snuba_type, 'string')
 
     def handle_results(self, snuba_results, requested_query, projects):
-        if 'project_name' in requested_query['selected_columns']:
-            project_name_index = requested_query['selected_columns'].index('project_name')
+        if 'project.name' in requested_query['selected_columns']:
+            project_name_index = requested_query['selected_columns'].index('project.name')
             snuba_results['meta'].insert(
                 project_name_index, {
-                    'name': 'project_name', 'type': 'String'})
-            if 'project_id' not in requested_query['selected_columns']:
+                    'name': 'project.name', 'type': 'String'})
+            if 'project.id' not in requested_query['selected_columns']:
                 snuba_results['meta'] = [
-                    field for field in snuba_results['meta'] if field['name'] != 'project_id'
+                    field for field in snuba_results['meta'] if field['name'] != 'project.id'
                 ]
 
             for result in snuba_results['data']:
-                result['project_name'] = projects[result['project_id']]
-                if 'project_id' not in requested_query['selected_columns']:
-                    del result['project_id']
+                result['project.name'] = projects[result['project.id']]
+                if 'project.id' not in requested_query['selected_columns']:
+                    del result['project.id']
 
-        if 'project_name' in requested_query['groupby']:
-            project_name_index = requested_query['groupby'].index('project_name')
+        if 'project.name' in requested_query['groupby']:
+            project_name_index = requested_query['groupby'].index('project.name')
             snuba_results['meta'].insert(
                 project_name_index, {
-                    'name': 'project_name', 'type': 'String'})
-            if 'project_id' not in requested_query['groupby']:
+                    'name': 'project.name', 'type': 'String'})
+            if 'project.id' not in requested_query['groupby']:
                 snuba_results['meta'] = [
-                    field for field in snuba_results['meta'] if field['name'] != 'project_id'
+                    field for field in snuba_results['meta'] if field['name'] != 'project.id'
                 ]
 
             for result in snuba_results['data']:
-                result['project_name'] = projects[result['project_id']]
-                if 'project_id' not in requested_query['groupby']:
-                    del result['project_id']
+                result['project.name'] = projects[result['project.id']]
+                if 'project.id' not in requested_query['groupby']:
+                    del result['project.id']
 
         # Convert snuba types to json types
         for col in snuba_results['meta']:
@@ -257,19 +257,19 @@ class OrganizationDiscoverQueryEndpoint(OrganizationEndpoint):
         selected_columns = kwargs['selected_columns']
         groupby_columns = kwargs['groupby']
 
-        if 'project_name' in requested_query['selected_columns']:
-            selected_columns.remove('project_name')
-            if 'project_id' not in selected_columns:
-                selected_columns.append('project_id')
+        if 'project.name' in requested_query['selected_columns']:
+            selected_columns.remove('project.name')
+            if 'project.id' not in selected_columns:
+                selected_columns.append('project.id')
 
-        if 'project_name' in requested_query['groupby']:
-            groupby_columns.remove('project_name')
-            if 'project_id' not in groupby_columns:
-                groupby_columns.append('project_id')
+        if 'project.name' in requested_query['groupby']:
+            groupby_columns.remove('project.name')
+            if 'project.id' not in groupby_columns:
+                groupby_columns.append('project.id')
 
         for aggregation in kwargs['aggregations']:
-            if aggregation[1] == 'project_name':
-                aggregation[1] = 'project_id'
+            if aggregation[1] == 'project.name':
+                aggregation[1] = 'project.id'
 
         if not kwargs['aggregations']:
 
@@ -342,7 +342,7 @@ class OrganizationDiscoverQueryEndpoint(OrganizationEndpoint):
             limit=serialized.get('limit'),
             aggregations=serialized.get('aggregations'),
             rollup=serialized.get('rollup'),
-            filter_keys={'project_id': serialized.get('projects')},
+            filter_keys={'project.id': serialized.get('projects')},
             arrayjoin=serialized.get('arrayjoin'),
             request=request,
             turbo=serialized.get('turbo'),
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
index 3d60c97a9a..82c3c9810c 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
@@ -32,10 +32,10 @@ export const SPECIAL_TAGS = {
 };
 
 export const COLUMNS = [
-  {name: 'event_id', type: TYPES.STRING},
-  {name: 'issue', type: TYPES.STRING},
-  {name: 'project_id', type: TYPES.STRING},
-  {name: 'project_name', type: TYPES.STRING}, // Not a snuba column
+  {name: 'id', type: TYPES.STRING},
+  {name: 'issue.id', type: TYPES.STRING},
+  {name: 'project.id', type: TYPES.STRING},
+  {name: 'project.name', type: TYPES.STRING}, // Not a snuba column
   {name: 'platform', type: TYPES.STRING},
   {name: 'message', type: TYPES.STRING},
   {name: 'primary_hash', type: TYPES.STRING},
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/intro.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/intro.jsx
index 626baaacac..8b248c562b 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/intro.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/intro.jsx
@@ -18,7 +18,7 @@ export default class Intro extends React.Component {
       {
         description: t('Last 10 event IDs'),
         query: {
-          fields: ['event_id'],
+          fields: ['id'],
           aggregations: [],
           conditions: [],
           limit: 10,
@@ -28,7 +28,7 @@ export default class Intro extends React.Component {
       {
         description: t('Events by project ID'),
         query: {
-          fields: ['project_id'],
+          fields: ['project.id'],
           aggregations: [['count()', null, 'count']],
           conditions: [],
           limit: 1000,
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
index 1087810661..6a37e9b586 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
@@ -12,7 +12,7 @@ import {isValidAggregation} from './aggregations/utils';
 
 const DEFAULTS = {
   projects: [],
-  fields: ['event_id', 'issue', 'project_name', 'platform', 'timestamp'],
+  fields: ['id', 'issue.id', 'project.name', 'platform', 'timestamp'],
   conditions: [],
   aggregations: [],
   range: DEFAULT_STATS_PERIOD,
@@ -227,7 +227,7 @@ export default function createQueryBuilder(initial = {}, organization) {
       return !originalQuery.aggregations.length && originalQuery.fields.length
         ? {
             ...originalQuery,
-            fields: uniq([...originalQuery.fields, 'event_id', 'project_id']),
+            fields: uniq([...originalQuery.fields, 'id', 'project.id']),
           }
         : originalQuery;
     }
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx
index e50ab7d83d..844e74d53d 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx
@@ -83,15 +83,12 @@ export default class ResultTable extends React.Component {
 
   getLink = event => {
     const {slug, projects} = this.context.organization;
-    const projectSlug = projects.find(project => project.id === `${event.project_id}`)
+    const projectSlug = projects.find(project => project.id === `${event['project.id']}`)
       .slug;
 
     return (
       <Tooltip title={t('Open event')} tooltipOptions={{container: 'body'}}>
-        <Link
-          to={`/${slug}/${projectSlug}/issues/?query=${event.event_id}`}
-          target="_blank"
-        >
+        <Link to={`/${slug}/${projectSlug}/issues/?query=${event.id}`} target="_blank">
           <InlineSvg src="icon-exit" size="1em" />
         </Link>
       </Tooltip>
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx
index c65759b1db..7b1071fa24 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx
@@ -47,9 +47,9 @@ export default class QueryFields extends React.Component {
 
     const currentQuery = queryBuilder.getInternal();
     const columns = queryBuilder.getColumns();
-    // Do not allow conditions on project_id or project_name fields
+    // Do not allow conditions on project.id or project.name fields
     const columnsForConditions = columns.filter(
-      ({name}) => !['project_id', 'project_name'].includes(name)
+      ({name}) => !['project.id', 'project.name'].includes(name)
     );
 
     const fieldOptions = columns.map(({name}) => ({
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
index 6d15dc765c..eae5d86177 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
@@ -59,8 +59,8 @@ export function getOrderByOptions(queryBuilder) {
       }
     }
 
-    // Never allow ordering by project_name since this can't be done in Snuba
-    if (name === 'project_name') {
+    // Never allow ordering by project.name since this can't be done in Snuba
+    if (name === 'project.name') {
       return acc;
     }
 
diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index 2a402909bd..0e47cb385b 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -25,11 +25,11 @@ MAX_HASHES = 5000
 
 SENTRY_SNUBA_MAP = {
     # general
-    'event_id': 'event_id',
-    'project_id': 'project_id',
+    'id': 'event_id',
+    'project.id': 'project_id',
     'platform': 'platform',
     'message': 'message',
-    'issue': 'issue',
+    'issue.id': 'issue',
     'timestamp': 'timestamp',
     'time': 'time',
     'type': 'type',
@@ -156,6 +156,7 @@ def transform_aliases_and_query(**kwargs):
     groupby = kwargs['groupby']
     aggregations = kwargs['aggregations']
     conditions = kwargs['conditions'] or []
+    filter_keys = kwargs['filter_keys']
 
     for (idx, col) in enumerate(selected_columns):
         name = get_snuba_column_name(col)
@@ -171,6 +172,10 @@ def transform_aliases_and_query(**kwargs):
         derived_columns.add(aggregation[2])
         aggregation[1] = get_snuba_column_name(aggregation[1])
 
+    for (col, _value) in six.iteritems(filter_keys):
+        name = get_snuba_column_name(col)
+        filter_keys[name] = filter_keys.pop(col)
+
     def handle_condition(cond):
         if isinstance(cond, (list, tuple)) and len(cond):
             if (isinstance(cond[0], (list, tuple))):
diff --git a/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx
index 5ef5d222ce..687e2bcd3e 100644
--- a/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx
@@ -89,20 +89,20 @@ describe('Conditions', function() {
         output: '',
       },
       {
-        input: 'event_id like %test%',
-        output: 'event_id LIKE %test%',
+        input: 'id like %test%',
+        output: 'id LIKE %test%',
       },
       {
-        input: 'event_id IS Nul',
-        output: 'event_id IS NUL',
+        input: 'id IS Nul',
+        output: 'id IS NUL',
       },
       {
-        input: 'event_id = asdf',
-        output: 'event_id = asdf',
+        input: 'id = asdf',
+        output: 'id = asdf',
       },
       {
-        input: 'event_id IS not null',
-        output: 'event_id IS NOT NULL',
+        input: 'id IS not null',
+        output: 'id IS NOT NULL',
       },
     ];
 
diff --git a/tests/js/spec/views/organizationDiscover/discover.spec.jsx b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
index 47368fb577..5707516d75 100644
--- a/tests/js/spec/views/organizationDiscover/discover.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
@@ -22,7 +22,7 @@ describe('Discover', function() {
     beforeEach(function() {
       mockResponse = {
         timing: {},
-        data: [{foo: 'bar', project_id: project.id}],
+        data: [{foo: 'bar', 'project.id': project.id}],
         meta: [{name: 'foo'}],
       };
       queryBuilder.fetch = jest.fn(() => Promise.resolve(mockResponse));
@@ -183,7 +183,7 @@ describe('Discover', function() {
 
     it('runs basic query', async function() {
       const query = {...queryBuilder.getExternal()};
-      query.fields = [...queryBuilder.getExternal().fields, 'project_id'];
+      query.fields = [...queryBuilder.getExternal().fields, 'project.id'];
 
       wrapper.instance().runQuery();
       await tick();
@@ -192,14 +192,14 @@ describe('Discover', function() {
       expect(wrapper.state().data.baseQuery.data).toEqual(mockResponse);
     });
 
-    it('always requests event_id and project_id for basic queries', async function() {
+    it('always requests id and project.id for basic queries', async function() {
       queryBuilder.updateField('fields', ['message']);
       wrapper.instance().runQuery();
       await tick();
       expect(queryBuilder.fetch).toHaveBeenCalledTimes(1);
       expect(queryBuilder.fetch).toHaveBeenCalledWith(
         expect.objectContaining({
-          fields: ['message', 'event_id', 'project_id'],
+          fields: ['message', 'id', 'project.id'],
         })
       );
       expect(wrapper.state().data.baseQuery.data).toEqual(mockResponse);
@@ -293,7 +293,7 @@ describe('Discover', function() {
         );
 
         wrapper.instance().updateField('fields', ['message']);
-        wrapper.instance().updateField('orderby', 'event_id');
+        wrapper.instance().updateField('orderby', 'id');
         wrapper.instance().updateField('limit', 5);
 
         wrapper.instance().runQuery();
@@ -315,11 +315,11 @@ describe('Discover', function() {
         expect(fields.text()).toContain('message');
         wrapper.instance().reset();
         expect(fields.text()).not.toContain('message');
-        expect(fields.text()).toContain('event_id');
+        expect(fields.text()).toContain('id');
       });
 
       it('resets "orderby"', function() {
-        expect(wrapper.find('SelectControl[name="orderby"]').text()).toBe('event_id asc');
+        expect(wrapper.find('SelectControl[name="orderby"]').text()).toBe('id asc');
         wrapper.instance().reset();
         wrapper.update();
         expect(wrapper.find('SelectControl[name="orderby"]').text()).toBe(
@@ -458,7 +458,7 @@ describe('Discover', function() {
         .simulate('click');
 
       const query = queryBuilder.getInternal();
-      expect(query.fields).toEqual(['event_id']);
+      expect(query.fields).toEqual(['id']);
       expect(query.limit).toEqual(10);
     });
   });
diff --git a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx b/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
index f828858907..b64879645c 100644
--- a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
@@ -113,7 +113,7 @@ describe('Query Builder', function() {
     });
 
     it('makes request', async function() {
-      const data = {projects: [1], fields: ['event_id']};
+      const data = {projects: [1], fields: ['id']};
       await queryBuilder.fetch(data);
       expect(discoverMock).toHaveBeenCalledWith(
         '/organizations/org-slug/discover/query/?per_page=1000&cursor=0:0:1',
@@ -143,14 +143,14 @@ describe('Query Builder', function() {
 
     it('updates field', function() {
       queryBuilder.updateField('projects', [5]);
-      queryBuilder.updateField('conditions', [['event_id', '=', 'event1']]);
+      queryBuilder.updateField('conditions', [['id', '=', 'event1']]);
 
       const query = queryBuilder.getInternal();
-      expect(query.conditions).toEqual([['event_id', '=', 'event1']]);
+      expect(query.conditions).toEqual([['id', '=', 'event1']]);
     });
 
     it('updates orderby if there is an aggregation and value is not a valid field', function() {
-      queryBuilder.updateField('fields', ['event_id']);
+      queryBuilder.updateField('fields', ['id']);
       queryBuilder.updateField('aggregations', [['count()', null, 'count']]);
 
       const query = queryBuilder.getInternal();
@@ -158,7 +158,7 @@ describe('Query Builder', function() {
     });
 
     it('updates orderby if there is no aggregation and value is not a valid field', function() {
-      queryBuilder.updateField('fields', ['event_id']);
+      queryBuilder.updateField('fields', ['id']);
       queryBuilder.updateField('aggregations', [['count()', null, 'count']]);
       expect(queryBuilder.getInternal().orderby).toBe('-count');
       queryBuilder.updateField('aggregations', []);
diff --git a/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
index 39e604c602..3d552c900b 100644
--- a/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
@@ -11,34 +11,34 @@ import {
 describe('Utils', function() {
   it('getChartData()', function() {
     const raw = [
-      {count: 2, uniq_event_id: 1, project_id: 5, environment: null},
-      {count: 2, uniq_event_id: 3, project_id: 5, environment: 'staging'},
-      {count: 2, uniq_event_id: 4, project_id: 5, environment: 'alpha'},
-      {count: 6, uniq_event_id: 10, project_id: 5, environment: 'production'},
+      {count: 2, uniq_id: 1, 'project.id': 5, environment: null},
+      {count: 2, uniq_id: 3, 'project.id': 5, environment: 'staging'},
+      {count: 2, uniq_id: 4, 'project.id': 5, environment: 'alpha'},
+      {count: 6, uniq_id: 10, 'project.id': 5, environment: 'production'},
     ];
 
     const query = {
-      aggregations: [['count()', null, 'count'], ['uniq', 'event_id', 'uniq_event_id']],
-      fields: ['project_id', 'environment'],
+      aggregations: [['count()', null, 'count'], ['uniq', 'id', 'uniq_id']],
+      fields: ['project.id', 'environment'],
     };
 
     const expected = [
       {
         seriesName: 'count',
         data: [
-          {value: 2, name: 'project_id 5 environment null'},
-          {value: 2, name: 'project_id 5 environment staging'},
-          {value: 2, name: 'project_id 5 environment alpha'},
-          {value: 6, name: 'project_id 5 environment production'},
+          {value: 2, name: 'project.id 5 environment null'},
+          {value: 2, name: 'project.id 5 environment staging'},
+          {value: 2, name: 'project.id 5 environment alpha'},
+          {value: 6, name: 'project.id 5 environment production'},
         ],
       },
       {
-        seriesName: 'uniq_event_id',
+        seriesName: 'uniq_id',
         data: [
-          {value: 1, name: 'project_id 5 environment null'},
-          {value: 3, name: 'project_id 5 environment staging'},
-          {value: 4, name: 'project_id 5 environment alpha'},
-          {value: 10, name: 'project_id 5 environment production'},
+          {value: 1, name: 'project.id 5 environment null'},
+          {value: 3, name: 'project.id 5 environment staging'},
+          {value: 4, name: 'project.id 5 environment alpha'},
+          {value: 10, name: 'project.id 5 environment production'},
         ],
       },
     ];
diff --git a/tests/js/spec/views/organizationDiscover/resultManager.spec.jsx b/tests/js/spec/views/organizationDiscover/resultManager.spec.jsx
index 6d069bc45f..1399a48f16 100644
--- a/tests/js/spec/views/organizationDiscover/resultManager.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/resultManager.spec.jsx
@@ -32,14 +32,14 @@ describe('Result manager', function() {
 
   describe('fetchAll()', function() {
     it('handles raw data', async function() {
-      queryBuilder.updateField('fields', ['event_id', 'project_id', 'message']);
+      queryBuilder.updateField('fields', ['id', 'project.id', 'message']);
       await resultManager.fetchAll();
       expect(discoverMock).toHaveBeenCalledTimes(1);
       expect(discoverMock).toHaveBeenCalledWith(
         '/organizations/org-slug/discover/query/?per_page=1000&cursor=0:0:1',
         expect.objectContaining({
           data: expect.objectContaining({
-            fields: ['event_id', 'project_id', 'message'],
+            fields: ['id', 'project.id', 'message'],
           }),
         })
       );
diff --git a/tests/js/spec/views/organizationDiscover/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/utils.spec.jsx
index a4327d0fa3..68bb6eb260 100644
--- a/tests/js/spec/views/organizationDiscover/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/utils.spec.jsx
@@ -10,16 +10,16 @@ import createQueryBuilder from 'app/views/organizationDiscover/queryBuilder';
 import {COLUMNS} from 'app/views/organizationDiscover/data';
 
 const queryString =
-  '?aggregations=%5B%5B%22count()%22%2Cnull%2C%22count%22%5D%2C%5B%22uniq%22%2C%22os_build%22%2C%22uniq_os_build%22%5D%5D&conditions=%5B%5D&end=%222018-07-10T01%3A18%3A04%22&fields=%5B%22event_id%22%2C%22timestamp%22%5D&limit=1000&orderby=%22-timestamp%22&projects=%5B8%5D&start=%222018-06-26T01%3A18%3A04%22';
+  '?aggregations=%5B%5B%22count()%22%2Cnull%2C%22count%22%5D%2C%5B%22uniq%22%2C%22os_build%22%2C%22uniq_os_build%22%5D%5D&conditions=%5B%5D&end=%222018-07-10T01%3A18%3A04%22&fields=%5B%22id%22%2C%22timestamp%22%5D&limit=1000&orderby=%22-timestamp%22&projects=%5B8%5D&start=%222018-06-26T01%3A18%3A04%22';
 
 const queryStringWithInvalidKey =
-  '?aggregations=%5B%5B%22count()%22%2Cnull%2C%22count%22%5D%2C%5B%22uniq%22%2C%22os_build%22%2C%22uniq_os_build%22%5D%5D&conditions=%5B%5D&end=%222018-07-10T01%3A18%3A04%22&fields=%5B%22event_id%22%2C%22timestamp%22%5D&limit=1000&orderby=%22-timestamp%22&projects=%5B8%5D&start=%222018-06-26T01%3A18%3A04%22&invalid=true';
+  '?aggregations=%5B%5B%22count()%22%2Cnull%2C%22count%22%5D%2C%5B%22uniq%22%2C%22os_build%22%2C%22uniq_os_build%22%5D%5D&conditions=%5B%5D&end=%222018-07-10T01%3A18%3A04%22&fields=%5B%22id%22%2C%22timestamp%22%5D&limit=1000&orderby=%22-timestamp%22&projects=%5B8%5D&start=%222018-06-26T01%3A18%3A04%22&invalid=true';
 
 const query = {
   aggregations: [['count()', null, 'count'], ['uniq', 'os_build', 'uniq_os_build']],
   conditions: [],
   end: '2018-07-10T01:18:04',
-  fields: ['event_id', 'timestamp'],
+  fields: ['id', 'timestamp'],
   limit: 1000,
   orderby: '-timestamp',
   projects: [8],
@@ -50,7 +50,7 @@ describe('getOrderByOptions()', function() {
   const organization = TestStubs.Organization({projects: [TestStubs.Project()]});
   const queryBuilder = createQueryBuilder({}, organization);
 
-  it('allows ordering by all fields when no aggregations except project_name', function() {
+  it('allows ordering by all fields when no aggregations except project.name', function() {
     expect(getOrderByOptions(queryBuilder)).toHaveLength((COLUMNS.length - 1) * 2);
   });
 
diff --git a/tests/snuba/test_organization_discover_query.py b/tests/snuba/test_organization_discover_query.py
index de5788a375..3cbfddb904 100644
--- a/tests/snuba/test_organization_discover_query.py
+++ b/tests/snuba/test_organization_discover_query.py
@@ -192,13 +192,13 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
             url = reverse('sentry-api-0-organization-discover-query', args=[self.org.slug])
             response = self.client.post(url, {
                 'projects': [self.project.id],
-                'fields': ['project_name'],
+                'fields': ['project.name'],
                 'range': '14d',
                 'orderby': '-timestamp',
             })
         assert response.status_code == 200, response.content
         assert len(response.data['data']) == 1
-        assert(response.data['data'][0]['project_name']) == 'bar'
+        assert(response.data['data'][0]['project.name']) == 'bar'
 
     def test_groupby_project_name(self):
         with self.feature('organizations:discover'):
@@ -206,13 +206,13 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
             response = self.client.post(url, {
                 'projects': [self.project.id],
                 'aggregations': [['count()', '', 'count']],
-                'fields': ['project_name'],
+                'fields': ['project.name'],
                 'range': '14d',
                 'orderby': '-count',
             })
         assert response.status_code == 200, response.content
         assert len(response.data['data']) == 1
-        assert(response.data['data'][0]['project_name']) == 'bar'
+        assert(response.data['data'][0]['project.name']) == 'bar'
         assert(response.data['data'][0]['count']) == 1
 
     def test_uniq_project_name(self):
@@ -220,7 +220,7 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
             url = reverse('sentry-api-0-organization-discover-query', args=[self.org.slug])
             response = self.client.post(url, {
                 'projects': [self.project.id],
-                'aggregations': [['uniq', 'project_name', 'uniq_project_name']],
+                'aggregations': [['uniq', 'project.name', 'uniq_project_name']],
                 'range': '14d',
                 'orderby': '-uniq_project_name',
             })
@@ -233,14 +233,14 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
             url = reverse('sentry-api-0-organization-discover-query', args=[self.org.slug])
             response = self.client.post(url, {
                 'projects': [self.project.id],
-                'fields': ['project_id', 'project_name'],
+                'fields': ['project.id', 'project.name'],
                 'aggregations': [['count()', '', 'count']],
                 'range': '14d',
                 'orderby': '-count',
             })
         assert response.status_code == 200, response.content
         assert response.data['meta'] == [
-            {'name': 'project_id', 'type': 'integer'},
-            {'name': 'project_name', 'type': 'string'},
+            {'name': 'project.id', 'type': 'integer'},
+            {'name': 'project.name', 'type': 'string'},
             {'name': 'count', 'type': 'integer'}
         ]
