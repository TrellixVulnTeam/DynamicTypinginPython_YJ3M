commit 44cfab779b1a54cc2d618c3d1374519b92982082
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Jul 12 09:10:32 2019 -0700

    ref(ui): Remove legacy `app/views/projectSettings` (#13949)
    
    This is no longer used, this was the legacy project settings templates.

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index d65d93b4f0..42094f7ed9 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -18,7 +18,6 @@ import IssueListOverview from 'app/views/issueList/overview';
 import ProjectEventRedirect from 'app/views/projectEventRedirect';
 import ProjectPluginDetails from 'app/views/projectPluginDetails';
 import ProjectPlugins from 'app/views/projectPlugins';
-import ProjectSettings from 'app/views/projectSettings';
 import redirectDeprecatedProjectRoute from 'app/views/projects/redirectDeprecatedProjectRoute';
 import RouteNotFound from 'app/views/routeNotFound';
 import SettingsProjectProvider from 'app/views/settings/components/settingsProjectProvider';
@@ -1328,7 +1327,7 @@ function routes() {
             )}
           />
         </Route>
-        <Route path=":projectId/settings/" component={errorHandler(ProjectSettings)}>
+        <Route path=":projectId/settings/">
           <Redirect from="teams/" to="/settings/:orgId/projects/:projectId/teams/" />
           <Redirect from="alerts/" to="/settings/:orgId/projects/:projectId/alerts/" />
           <Redirect
@@ -1420,7 +1419,6 @@ function routes() {
             from="install/:platform'"
             to="/settings/:orgId/projects/:projectId/install/:platform/"
           />
-          {projectSettingsRoutes}
         </Route>
         <Redirect from=":projectId/group/:groupId/" to="issues/:groupId/" />
         <Redirect
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
deleted file mode 100644
index 236ce66578..0000000000
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ /dev/null
@@ -1,183 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import {t} from 'app/locale';
-import withApi from 'app/utils/withApi';
-import Badge from 'app/components/badge';
-import ListLink from 'app/components/links/listLink';
-import LoadingError from 'app/components/loadingError';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import PluginNavigation from 'app/views/projectSettings/pluginNavigation';
-import ExternalLink from 'app/components/links/externalLink';
-import withOrganization from 'app/utils/withOrganization';
-import SentryTypes from 'app/sentryTypes';
-
-class ProjectSettings extends React.Component {
-  static propTypes = {
-    api: PropTypes.object,
-    organization: SentryTypes.Organization.isRequired,
-    setProjectNavSection: PropTypes.func,
-  };
-
-  state = {
-    loading: true,
-    error: false,
-    project: null,
-  };
-
-  componentWillMount() {
-    const {setProjectNavSection} = this.props;
-
-    setProjectNavSection('settings');
-    this.fetchData();
-  }
-
-  componentWillReceiveProps(nextProps) {
-    const params = this.props.params;
-    if (
-      nextProps.params.projectId !== params.projectId ||
-      nextProps.params.orgId !== params.orgId
-    ) {
-      this.setState(
-        {
-          loading: true,
-          error: false,
-        },
-        this.fetchData
-      );
-    }
-  }
-
-  fetchData = () => {
-    const params = this.props.params;
-
-    this.props.api.request(`/projects/${params.orgId}/${params.projectId}/`, {
-      success: data => {
-        this.setState({
-          project: data,
-          loading: false,
-          error: false,
-        });
-      },
-      error: () => {
-        this.setState({
-          loading: false,
-          error: true,
-        });
-      },
-    });
-  };
-
-  render() {
-    // TODO(dcramer): move sidebar into component
-    if (this.state.loading) {
-      return <LoadingIndicator />;
-    } else if (this.state.error) {
-      return <LoadingError onRetry={this.fetchData} />;
-    }
-
-    const access = new Set(this.props.organization.access);
-    const {orgId, projectId} = this.props.params;
-    const pathPrefix = `/settings/${orgId}/projects/${projectId}`;
-    const settingsUrlRoot = pathPrefix;
-    const project = this.state.project;
-    const rootInstallPath = `${pathPrefix}/install/`;
-    const path = this.props.location.pathname;
-    const processingIssues = this.state.project.processingIssues;
-    const organization = this.props.organization;
-
-    return (
-      <div className="row">
-        <div className="col-md-2">
-          <h6 className="nav-header">{t('Configuration')}</h6>
-          <ul className="nav nav-stacked">
-            <ListLink to={`${pathPrefix}/`} index={true}>
-              {t('General')}
-            </ListLink>
-            <ListLink
-              to={`${pathPrefix}/alerts/`}
-              isActive={loc => path.indexOf(loc.pathname) === 0}
-            >
-              {t('Alerts')}
-            </ListLink>
-            <ListLink
-              to={`${pathPrefix}/environments/`}
-              isActive={loc => path.indexOf(loc.pathname) === 0}
-            >
-              {t('Environments')}
-            </ListLink>
-            <ListLink to={`${pathPrefix}/tags/`}>{t('Tags')}</ListLink>
-            {access.has('project:write') && (
-              <ListLink
-                to={`${pathPrefix}/release-tracking/`}
-                isActive={loc => path.indexOf(loc.pathname) === 0}
-              >
-                {t('Release Tracking')}
-              </ListLink>
-            )}
-            <ListLink to={`${pathPrefix}/data-forwarding/`}>
-              {t('Data Forwarding')}
-            </ListLink>
-            <ListLink to={`${pathPrefix}/debug-symbols/`}>
-              {t('Debug Information Files')}
-            </ListLink>
-            <ListLink className="badged" to={`${pathPrefix}/processing-issues/`}>
-              {t('Processing Issues')}
-              {processingIssues > 0 && (
-                <Badge
-                  text={processingIssues > 99 ? '99+' : processingIssues + ''}
-                  isNew={true}
-                />
-              )}
-            </ListLink>
-          </ul>
-          <h6 className="nav-header">{t('Data')}</h6>
-          <ul className="nav nav-stacked">
-            <ListLink
-              to={rootInstallPath}
-              isActive={loc => {
-                // Because react-router 1.0 removes router.isActive(route)
-                return path === rootInstallPath || /install\/[\w\-]+\/$/.test(path);
-              }}
-            >
-              {t('Error Tracking')}
-            </ListLink>
-            <ListLink to={`${pathPrefix}/security-headers/`}>
-              {t('Security Headers')}
-            </ListLink>
-            <ListLink to={`${pathPrefix}/user-feedback/`}>{t('User Feedback')}</ListLink>
-            <ListLink to={`${pathPrefix}/filters/`}>{t('Inbound Filters')}</ListLink>
-            <ListLink to={`${pathPrefix}/keys/`}>{t('Client Keys')} (DSN)</ListLink>
-          </ul>
-          <h6 className="nav-header">{t('Legacy Integrations')}</h6>
-          <ul className="nav nav-stacked">
-            <ListLink to={`${pathPrefix}/plugins/`}>{t('Legacy Integrations')}</ListLink>
-            <PluginNavigation urlRoot={settingsUrlRoot} />
-          </ul>
-        </div>
-        <div className="col-md-10">
-          {access.has('project:write') ? (
-            React.cloneElement(this.props.children, {
-              setProjectNavSection: this.props.setProjectNavSection,
-              project,
-              organization,
-            })
-          ) : (
-            <div className="alert alert-block">
-              {t(
-                'Youâ€™re restricted from accessing this page based on your organization role. Read more here: '
-              )}
-              <ExternalLink href="https://docs.sentry.io/learn/membership/">
-                https://docs.sentry.io/learn/membership/
-              </ExternalLink>
-            </div>
-          )}
-        </div>
-      </div>
-    );
-  }
-}
-
-export {ProjectSettings};
-
-export default withApi(withOrganization(ProjectSettings));
diff --git a/src/sentry/static/sentry/app/views/projectSettings/pluginNavigation.jsx b/src/sentry/static/sentry/app/views/projectSettings/pluginNavigation.jsx
deleted file mode 100644
index a9f1d514e0..0000000000
--- a/src/sentry/static/sentry/app/views/projectSettings/pluginNavigation.jsx
+++ /dev/null
@@ -1,41 +0,0 @@
-import React from 'react';
-
-import createReactClass from 'create-react-class';
-import {Link} from 'react-router';
-import PropTypes from 'prop-types';
-
-import withPlugins from 'app/utils/withPlugins';
-import SentryTypes from 'app/sentryTypes';
-
-const PluginNavigation = createReactClass({
-  displayName: 'PluginNavigation',
-  propTypes: {
-    urlRoot: PropTypes.string,
-    plugins: SentryTypes.PluginsStore,
-  },
-
-  render() {
-    const {urlRoot, plugins} = this.props;
-
-    if (!plugins || !plugins.plugins) {
-      return null;
-    }
-    const enabledPlugins = plugins.plugins.filter(p => p.enabled && p.hasConfiguration);
-
-    if (!enabledPlugins.length) {
-      return null;
-    }
-
-    return (
-      <div>
-        {enabledPlugins.map(({id, name}) => (
-          <li key={id}>
-            <Link to={`${urlRoot}/plugins/${id}/`}>{name}</Link>
-          </li>
-        ))}
-      </div>
-    );
-  },
-});
-
-export default withPlugins(PluginNavigation);
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsPluginsNavigation.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsPluginsNavigation.jsx
deleted file mode 100644
index 967d2cab08..0000000000
--- a/src/sentry/static/sentry/app/views/settings/components/settingsPluginsNavigation.jsx
+++ /dev/null
@@ -1,73 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import {t} from 'app/locale';
-import SentryTypes from 'app/sentryTypes';
-import SettingsNavItem from 'app/views/settings/components/settingsNavItem';
-import NavSection from 'app/views/settings/components/navSection.styled';
-import SettingsHeading from 'app/views/settings/components/settingsHeading.styled';
-import replaceRouterParams from 'app/utils/replaceRouterParams';
-import PluginNavigation from 'app/views/projectSettings/pluginNavigation';
-
-/**
- * Navigation menu for integrations.
- *
- * Is composed of:
- *   - header
- *   - "All Integrations"
- *   - enabled plugins that have configurations
- */
-class SettingsPluginsNavigation extends React.Component {
-  static propTypes = {
-    ...SentryTypes.NavigationGroup,
-    organization: SentryTypes.Organization,
-    project: SentryTypes.Project,
-  };
-
-  static contextTypes = {
-    router: PropTypes.object,
-    location: PropTypes.object,
-  };
-
-  render() {
-    const {organization, project} = this.props;
-    const {router} = this.context;
-
-    const pathPrefix = '/settings/:orgId/projects/:projectId';
-    const allIntegrationsPath = replaceRouterParams(`${pathPrefix}/plugins/`, {
-      orgId: organization && organization.slug,
-      projectId: project && project.slug,
-    });
-
-    return (
-      <NavSection>
-        <SettingsHeading>{t('Legacy Integrations')}</SettingsHeading>
-
-        <SettingsNavItem
-          active={router.isActive(allIntegrationsPath)}
-          to={allIntegrationsPath}
-          label={t('Legacy Integrations')}
-        />
-
-        <PluginNavigation>
-          {plugin => {
-            const to = replaceRouterParams(`${pathPrefix}/plugins/${plugin.slug}/`, {
-              orgId: organization && organization.slug,
-              projectId: project && project.slug,
-            });
-            return (
-              <SettingsNavItem
-                active={router.isActive(to)}
-                key={plugin.id}
-                to={to}
-                label={plugin.name}
-              />
-            );
-          }}
-        </PluginNavigation>
-      </NavSection>
-    );
-  }
-}
-
-export default SettingsPluginsNavigation;
diff --git a/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx b/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
deleted file mode 100644
index 8fe7addcfc..0000000000
--- a/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
+++ /dev/null
@@ -1,75 +0,0 @@
-import React from 'react';
-import {mount} from 'enzyme';
-import ProjectPlugins from 'app/views/projectPlugins';
-import PluginNavigation from 'app/views/projectSettings/pluginNavigation';
-
-jest.mock('app/api');
-
-describe('PluginNavigation Integration', function() {
-  let wrapper;
-  const routerContext = TestStubs.routerContext();
-  const org = routerContext.context.organization;
-  const project = routerContext.context.project;
-  const plugins = TestStubs.Plugins();
-
-  beforeEach(function() {
-    MockApiClient.addMockResponse({
-      url: `/organizations/${org.slug}/integrations/`,
-      method: 'GET',
-      body: [],
-    });
-    MockApiClient.addMockResponse({
-      url: `/organizations/${org.slug}/`,
-      method: 'GET',
-      body: {organization: org},
-    });
-    MockApiClient.addMockResponse({
-      url: `/projects/${org.slug}/${project.slug}/plugins/`,
-      method: 'GET',
-      body: plugins,
-    });
-    MockApiClient.addMockResponse({
-      url: `/projects/${org.slug}/${project.slug}/plugins/amazon-sqs/`,
-      method: 'POST',
-    });
-    MockApiClient.addMockResponse({
-      url: `/projects/${org.slug}/${project.slug}/plugins/github/`,
-      method: 'DELETE',
-    });
-  });
-
-  // Integration test with PluginNavigation
-  describe('with PluginNavigation', function() {
-    beforeEach(function() {
-      const params = {orgId: org.slug, projectId: project.slug};
-      const organization = {...org, id: org.slug, features: []};
-      wrapper = mount(
-        <div>
-          <ProjectPlugins params={params} organization={organization} />
-          <PluginNavigation organization={organization} urlRoot="/" />
-        </div>,
-        TestStubs.routerContext()
-      );
-    });
-
-    it('has no items in <PluginNavigation />', function() {
-      expect(wrapper.find('PluginNavigation a')).toHaveLength(0);
-    });
-
-    /**
-     * This tests that ProjectPlugins and PluginNavigation respond to the same store
-     */
-    it('has Amazon in <PluginNavigation /> after enabling', async function() {
-      await tick();
-      wrapper.update();
-      wrapper
-        .find('Switch')
-        .first()
-        .simulate('click');
-
-      await tick();
-      wrapper.update();
-      expect(wrapper.find('PluginNavigation').find('a')).toHaveLength(1);
-    });
-  });
-});
