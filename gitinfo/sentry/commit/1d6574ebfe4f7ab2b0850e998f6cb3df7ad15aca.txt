commit 1d6574ebfe4f7ab2b0850e998f6cb3df7ad15aca
Author: Chris Fuller <cfuller@sentry.io>
Date:   Tue Feb 11 08:43:00 2020 -0500

    fixing logic when resolve threshold is none (#16905)

diff --git a/src/sentry/incidents/endpoints/serializers.py b/src/sentry/incidents/endpoints/serializers.py
index bcbc033abd..dbf3b57645 100644
--- a/src/sentry/incidents/endpoints/serializers.py
+++ b/src/sentry/incidents/endpoints/serializers.py
@@ -303,9 +303,9 @@ class AlertRuleSerializer(CamelSnakeModelSerializer):
                         operator.gt,
                         "alert threshold must be below resolution threshold",
                     )
-
-                if alert_op(critical["alert_threshold"], critical["resolve_threshold"]):
-                    raise serializers.ValidationError("Critical " + trigger_error)
+                if critical["resolve_threshold"] is not None:
+                    if alert_op(critical["alert_threshold"], critical["resolve_threshold"]):
+                        raise serializers.ValidationError("Critical " + trigger_error)
             elif len(triggers) == 2:
                 critical = triggers[0]
                 warning = triggers[1]
@@ -348,10 +348,13 @@ class AlertRuleSerializer(CamelSnakeModelSerializer):
                     elif resolve_op(critical["resolve_threshold"], warning["resolve_threshold"]):
                         raise serializers.ValidationError(resolve_error)
 
-                    if alert_op(critical["alert_threshold"], critical["resolve_threshold"]):
-                        raise serializers.ValidationError("Critical " + trigger_error)
-                    elif alert_op(warning["alert_threshold"], warning["resolve_threshold"]):
-                        raise serializers.ValidationError("Warning " + trigger_error)
+                    if critical["resolve_threshold"] is not None:
+                        if alert_op(critical["alert_threshold"], critical["resolve_threshold"]):
+                            raise serializers.ValidationError("Critical " + trigger_error)
+
+                    if warning["resolve_threshold"] is not None:
+                        if alert_op(warning["alert_threshold"], warning["resolve_threshold"]):
+                            raise serializers.ValidationError("Warning " + trigger_error)
             else:
                 raise serializers.ValidationError(
                     "Must send 1 or 2 triggers - A critical trigger, and an optional warning trigger"
diff --git a/tests/sentry/incidents/endpoints/test_serializers.py b/tests/sentry/incidents/endpoints/test_serializers.py
index c6227112ad..ab1d1d163c 100644
--- a/tests/sentry/incidents/endpoints/test_serializers.py
+++ b/tests/sentry/incidents/endpoints/test_serializers.py
@@ -114,6 +114,51 @@ class TestAlertRuleSerializer(TestCase):
         )
         self.run_fail_validation_test({"aggregation": 50}, {"aggregation": invalid_values})
 
+    def test_simple_below_threshold(self):
+        payload = {
+            "name": "hello_im_a_test",
+            "time_window": 10,
+            "query": "level:error",
+            "threshold_type": 0,
+            "resolve_threshold": 1,
+            "alert_threshold": 0,
+            "aggregation": 0,
+            "threshold_period": 1,
+            "projects": [self.project.slug],
+            "triggers": [
+                {
+                    "label": "critical",
+                    "alertThreshold": 98,
+                    "resolveThreshold": None,
+                    "thresholdType": 1,
+                    "actions": [
+                        {"type": "email", "targetType": "team", "targetIdentifier": self.team.id}
+                    ],
+                }
+            ],
+        }
+        serializer = AlertRuleSerializer(context=self.context, data=payload, partial=True)
+
+        assert serializer.is_valid(), serializer.errors
+
+        # Now do a two trigger test:
+        payload["triggers"].append(
+            {
+                "label": "warning",
+                "alertThreshold": 99,
+                "resolveThreshold": 100,
+                "thresholdType": 1,
+                "actions": [
+                    {"type": "email", "targetType": "team", "targetIdentifier": self.team.id},
+                    {"type": "email", "targetType": "user", "targetIdentifier": self.user.id},
+                ],
+            }
+        )
+
+        serializer = AlertRuleSerializer(context=self.context, data=payload, partial=True)
+
+        assert serializer.is_valid(), serializer.errors
+
     def _run_changed_fields_test(self, alert_rule, params, expected):
         test_params = self.valid_params.copy()
         test_params.update(params)
