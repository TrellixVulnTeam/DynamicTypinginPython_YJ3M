commit 568aa28f78010f0d70e238af16db2accafa6aa5d
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon Jan 29 13:47:35 2018 -0800

    security: Backport for CVE-2016-7401 from Django 1.8.15

diff --git a/bin/scan b/bin/scan
index beac728b72..2cd9472877 100755
--- a/bin/scan
+++ b/bin/scan
@@ -23,7 +23,7 @@ ignored=(
     33074
     # django, installed 1.6.11, affected <1.8.15, id 25718
     # Description: The cookie parsing code in Django before 1.8.15 and 1.9.x before 1.9.10, when used on a site with Google Analytics, allows remote attackers to bypass an intended CSRF protection mechanism by setting arbitrary cookies.
-    # TODO: This is known issue, and we need to backport the patch: https://github.com/django/django/commit/6118ab7d0676f0d622278e5be215f14fb5410b6a
+    # Reason: We have backported the patch.
     25718
     # django, installed 1.6.11, affected >=1.5,<1.7, id 25725
     # Description: The session backends in Django before 1.4.21, 1.5.x through 1.6.x, 1.7.x before 1.7.9, and 1.8.x before 1.8.3 allows remote attackers to cause a denial of service (session store consumption) via multiple requests with unique session keys.
diff --git a/src/sentry/monkey.py b/src/sentry/monkey.py
index d83db7e0aa..12e618dee8 100644
--- a/src/sentry/monkey.py
+++ b/src/sentry/monkey.py
@@ -16,19 +16,59 @@ register_scheme('app')
 register_scheme('chrome-extension')
 
 
-# Intentionally strip all GET/POST/COOKIE values out of repr() for HttpRequest
-# and subclass WSGIRequest. This prevents sensitive information from getting
-# logged. This was yanked out of Django master anyhow.
-# https://code.djangoproject.com/ticket/12098
-def safe_httprequest_repr(self):
-    return '<%s: %s %r>' % (self.__class__.__name__, self.method, self.get_full_path())
-
-
-try:
-    from django.http import HttpRequest
-except ImportError:
-    # This module is potentially imported before Django is installed
-    # during a setup.py run
-    pass
-else:
+def patch_httprequest_repr():
+    try:
+        from django.http import HttpRequest
+    except ImportError:
+        # This module is potentially imported before Django is installed
+        # during a setup.py run
+        return
+
+    # Intentionally strip all GET/POST/COOKIE values out of repr() for HttpRequest
+    # and subclass WSGIRequest. This prevents sensitive information from getting
+    # logged. This was yanked out of Django master anyhow.
+    # https://code.djangoproject.com/ticket/12098
+    def safe_httprequest_repr(self):
+        return '<%s: %s %r>' % (self.__class__.__name__, self.method, self.get_full_path())
+
     HttpRequest.__repr__ = safe_httprequest_repr
+
+
+def patch_parse_cookie():
+    try:
+        from django.utils import six
+        from django.utils.encoding import force_str
+        from django.utils.six.moves import http_cookies
+        from django import http
+    except ImportError:
+        # This module is potentially imported before Django is installed
+        # during a setup.py run
+        return
+
+    # Backported from 1.8.15: https://github.com/django/django/blob/1.8.15/django/http/cookie.py#L91
+    # See https://www.djangoproject.com/weblog/2016/sep/26/security-releases/ for more context.
+    def safe_parse_cookie(cookie):
+        """
+        Return a dictionary parsed from a `Cookie:` header string.
+        """
+        cookiedict = {}
+        if six.PY2:
+            cookie = force_str(cookie)
+        for chunk in cookie.split(';'):
+            if '=' in chunk:
+                key, val = chunk.split('=', 1)
+            else:
+                # Assume an empty name per
+                # https://bugzilla.mozilla.org/show_bug.cgi?id=169091
+                key, val = '', chunk
+            key, val = key.strip(), val.strip()
+            if key or val:
+                # unquote using Python's algorithm.
+                cookiedict[key] = http_cookies._unquote(val)
+        return cookiedict
+
+    http.parse_cookie = safe_parse_cookie
+
+
+for patch in patch_parse_cookie, patch_httprequest_repr:
+    patch()
