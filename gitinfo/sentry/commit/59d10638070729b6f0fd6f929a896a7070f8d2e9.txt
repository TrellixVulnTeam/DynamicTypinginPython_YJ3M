commit 59d10638070729b6f0fd6f929a896a7070f8d2e9
Author: Katie Lundsgaard <katie@getsentry.com>
Date:   Tue Nov 15 11:20:31 2016 -0800

    Make it so verification is sent to specific emails upon adding them (#4358)

diff --git a/CHANGES b/CHANGES
index 5bf5f28af8..7d8095a52c 100644
--- a/CHANGES
+++ b/CHANGES
@@ -9,6 +9,9 @@ Version 8.11 (Unreleased)
 - Added support for switching to unsymbolicated tracebacks in cocoa.
 - Invalidate user sessions when changing password and 2fa settings.
 - Add configurable password validators to enforce password strength.
+- Send email to specific email when adding a new email rather than sending to all unverified email addresses.
+- Allow user to resend email verification to primary email address.
+
 
 Schema Changes
 ~~~~~~~~~~~~~~
diff --git a/src/sentry/models/user.py b/src/sentry/models/user.py
index 25e6620658..446315aa40 100644
--- a/src/sentry/models/user.py
+++ b/src/sentry/models/user.py
@@ -124,33 +124,36 @@ class User(BaseModel, AbstractBaseUser):
             return avatar.get_avatar_type_display()
         return 'letter_avatar'
 
-    def send_confirm_emails(self, is_new_user=False):
+    def send_confirm_email_singular(self, email, is_new_user=False):
         from sentry import options
         from sentry.utils.email import MessageBuilder
 
+        if not email.hash_is_valid():
+            email.set_hash()
+            email.save()
+
+        context = {
+            'user': self,
+            'url': absolute_uri(reverse(
+                'sentry-account-confirm-email',
+                args=[self.id, email.validation_hash]
+            )),
+            'confirm_email': email.email,
+            'is_new_user': is_new_user,
+        }
+        msg = MessageBuilder(
+            subject='%sConfirm Email' % (options.get('mail.subject-prefix'),),
+            template='sentry/emails/confirm_email.txt',
+            html_template='sentry/emails/confirm_email.html',
+            type='user.confirm_email',
+            context=context,
+        )
+        msg.send_async([email.email])
+
+    def send_confirm_emails(self, is_new_user=False):
         email_list = self.get_unverified_emails()
         for email in email_list:
-            if not email.hash_is_valid():
-                email.set_hash()
-                email.save()
-
-            context = {
-                'user': self,
-                'url': absolute_uri(reverse(
-                    'sentry-account-confirm-email',
-                    args=[self.id, email.validation_hash]
-                )),
-                'confirm_email': email.email,
-                'is_new_user': is_new_user,
-            }
-            msg = MessageBuilder(
-                subject='%sConfirm Email' % (options.get('mail.subject-prefix'),),
-                template='sentry/emails/confirm_email.txt',
-                html_template='sentry/emails/confirm_email.html',
-                type='user.confirm_email',
-                context=context,
-            )
-            msg.send_async([email.email])
+            self.send_confirm_email_singular(email, is_new_user)
 
     def merge_to(from_user, to_user):
         # TODO: we could discover relations automatically and make this useful
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index c7a87ce741..70828857cc 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -2254,6 +2254,22 @@ ul.faces {
   background: @white-dark;
 }
 
+.email-alert-button {
+    display: inline;
+    margin: 0;
+
+    button {
+      font-weight: 600;
+      color: inherit;
+      padding: 0;
+      border:0;
+
+      &:hover {
+        color: inherit;
+      }
+    }
+  }
+
 /**
 * Dropdowns
 * ============================================================================
diff --git a/src/sentry/templates/sentry/account/emails.html b/src/sentry/templates/sentry/account/emails.html
index 6b16acbd3c..92a3663e17 100644
--- a/src/sentry/templates/sentry/account/emails.html
+++ b/src/sentry/templates/sentry/account/emails.html
@@ -10,7 +10,10 @@
     {% if request.user.has_unverified_emails %}
       <div class="alert alert-warning alert-block">
         {% trans "You have unverified emails. " %}
-        <a href="{% url 'sentry-account-confirm-email-send' %}">{% trans "Resend Verification Emails" %}</a>.
+        <form action="{% url 'sentry-account-confirm-email-send' %}" method="post" class="email-alert-button">
+          {% csrf_token %}
+          <button type="submit" class="btn-link">{% trans "Resend Verification Emails." %}</button>
+        </form>
       </div>
     {% endif %}
 
diff --git a/src/sentry/templates/sentry/account/settings.html b/src/sentry/templates/sentry/account/settings.html
index f62be45b64..5a344ac2c4 100644
--- a/src/sentry/templates/sentry/account/settings.html
+++ b/src/sentry/templates/sentry/account/settings.html
@@ -9,17 +9,21 @@
 {% block title %}{% trans "Account Settings" %} | {{ block.super }}{% endblock %}
 
 {% block main %}
+    {% if not email.is_verified %}
+      <div class="alert alert-warning alert-block">
+        {% trans "Your email address has not been verified. " %}
+        <form action="{% url 'sentry-account-confirm-email-send' %}" method="post" class="email-alert-button">
+          {% csrf_token %}
+          <input type="hidden" name="email" value="{{ email.email }}">
+          <button type="submit" name="primary-email" class="btn-link">{% trans "Resend Verification Email." %}</button>
+        </form>
+      </div>
+    {% endif %}
+
     <form action="" method="post">
         {% csrf_token %}
         {{ form|as_crispy_errors }}
 
-        {% if request.user.has_unverified_emails %}
-          <div class="alert alert-warning alert-block">
-            {% trans "Your email address has not been verified. " %}
-            <a href="{% url 'sentry-account-confirm-email-send' %}">{% trans "Resend Verification Email" %}</a>.
-          </div>
-        {% endif %}
-
         <legend style="margin-top: 0;">Your details</legend>
 
         <div class="account-settings-overview">
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 387b81490c..fca1a396a1 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -16,6 +16,7 @@ from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
 from django.db import IntegrityError, transaction
 from django.http import HttpResponseRedirect, Http404, HttpResponse
+from django.views.decorators.http import require_http_methods
 from django.views.decorators.cache import never_cache
 from django.views.decorators.csrf import csrf_protect
 from django.utils import timezone
@@ -122,6 +123,7 @@ def recover_confirm(request, user_id, hash):
 
 
 @login_required
+@require_http_methods(["POST"])
 def start_confirm_email(request):
     from sentry.app import ratelimiter
 
@@ -135,8 +137,20 @@ def start_confirm_email(request):
             status=429,
         )
 
-    has_unverified_emails = request.user.has_unverified_emails()
-    if has_unverified_emails:
+    if 'primary-email' in request.POST:
+        email = request.POST.get('email')
+        try:
+            email_to_send = UserEmail.objects.get(user=request.user, email=email)
+        except UserEmail.DoesNotExist:
+            msg = _('There was an error confirming your email.')
+            level = messages.ERROR
+        else:
+            request.user.send_confirm_email_singular(email_to_send)
+            msg = _('A verification email has been sent to %s.') % (email)
+            level = messages.SUCCESS
+        messages.add_message(request, level, msg)
+        return HttpResponseRedirect(reverse('sentry-account-settings'))
+    elif request.user.has_unverified_emails():
         request.user.send_confirm_emails()
         unverified_emails = [e.email for e in request.user.get_unverified_emails()]
         msg = _('A verification email has been sent to %s.') % (', ').join(unverified_emails)
@@ -204,10 +218,15 @@ def account_settings(request):
             else:
                 user_email.set_hash()
                 user_email.save()
-            user.send_confirm_emails()
+            user.send_confirm_email_singular(user_email)
+            msg = _('A confirmation email has been sent to %s.') % user_email.email
+            messages.add_message(
+                request,
+                messages.SUCCESS,
+                msg)
 
         messages.add_message(
-            request, messages.SUCCESS, 'Your settings were saved.')
+            request, messages.SUCCESS, _('Your settings were saved.'))
         return HttpResponseRedirect(request.path)
 
     context = csrf(request)
@@ -216,6 +235,7 @@ def account_settings(request):
         'page': 'settings',
         'has_2fa': Authenticator.objects.user_has_2fa(request.user),
         'AUTH_PROVIDERS': auth.get_auth_providers(),
+        'email': UserEmail.get_primary_email(user),
     })
     return render_to_response('sentry/account/settings.html', context, request)
 
@@ -411,7 +431,12 @@ def show_emails(request):
             else:
                 user_email.set_hash()
                 user_email.save()
-            user.send_confirm_emails()
+            user.send_confirm_email_singular(user_email)
+            msg = _('A confirmation email has been sent to %s.') % user_email.email
+            messages.add_message(
+                request,
+                messages.SUCCESS,
+                msg)
         alternative_email = email_form.cleaned_data['alt_email']
         # check if this alternative email already exists for user
         if alternative_email and not UserEmail.objects.filter(user=user, email=alternative_email):
@@ -428,10 +453,15 @@ def show_emails(request):
                 new_email.set_hash()
                 new_email.save()
             # send confirmation emails to any non verified emails
-            user.send_confirm_emails()
+            user.send_confirm_email_singular(new_email)
+            msg = _('A confirmation email has been sent to %s.') % new_email.email
+            messages.add_message(
+                request,
+                messages.SUCCESS,
+                msg)
 
         messages.add_message(
-            request, messages.SUCCESS, 'Your settings were saved.')
+            request, messages.SUCCESS, _('Your settings were saved.'))
         return HttpResponseRedirect(request.path)
 
     context = csrf(request)
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index 9cbe948061..054e62cee8 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -278,10 +278,26 @@ class ConfirmEmailSendTest(TestCase):
     @mock.patch('sentry.models.User.send_confirm_emails')
     def test_valid(self, send_confirm_email):
         self.login_as(self.user)
-        resp = self.client.get(reverse('sentry-account-confirm-email-send'))
+        resp = self.client.post(reverse('sentry-account-confirm-email-send'))
         self.assertRedirects(resp, reverse('sentry-account-settings-emails'), status_code=302)
         send_confirm_email.assert_called_once_with()
 
+    def test_get_request_not_valid(self):
+        self.login_as(self.user)
+        resp = self.client.get(reverse('sentry-account-confirm-email-send'))
+        assert resp.status_code == 405
+
+    @mock.patch('sentry.models.User.send_confirm_email_singular')
+    def test_send_single_email(self, send_confirm_email):
+        user = self.create_user('foo@example.com')
+        email = UserEmail.objects.create(user=user, email='bar@example.com')
+        email.save()
+        self.login_as(user)
+        self.client.post(reverse('sentry-account-confirm-email-send'),
+                        data={'primary-email': '', 'email': 'foo@example.com'},
+                        follow=True)
+        send_confirm_email.assert_called_once_with(UserEmail.get_primary_email(user))
+
 
 class ConfirmEmailTest(TestCase):
 
@@ -296,7 +312,7 @@ class ConfirmEmailTest(TestCase):
     def test_valid(self):
         self.user.save()
         self.login_as(self.user)
-        self.client.get(reverse('sentry-account-confirm-email-send'))
+        self.client.post(reverse('sentry-account-confirm-email-send'))
         email = self.user.emails.first()
         resp = self.client.get(reverse('sentry-account-confirm-email',
                                        args=[self.user.id, email.validation_hash]))
