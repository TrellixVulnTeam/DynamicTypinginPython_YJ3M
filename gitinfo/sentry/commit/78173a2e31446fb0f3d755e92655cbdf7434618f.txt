commit 78173a2e31446fb0f3d755e92655cbdf7434618f
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon Jun 20 13:28:39 2016 -0700

    Convert all instanceof and typeof checks to underscore functions (#3529)

diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index 7ad0ea6f1e..5baef03304 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -1,6 +1,7 @@
 import $ from 'jquery';
 import GroupActions from './actions/groupActions';
 import TeamActions from './actions/teamActions';
+import _ from 'underscore';
 
 export class Request {
   constructor(xhr) {
@@ -28,7 +29,7 @@ export function paramsToQueryArgs(params) {
 
 export class Client {
   constructor(options) {
-    if (typeof options === 'undefined') {
+    if (_.isUndefined(options)) {
       options = {};
     }
     this.baseUrl = options.baseUrl || '/api/0';
@@ -47,7 +48,7 @@ export class Client {
 
   wrapCallback(id, func, cleanup) {
     /*eslint consistent-return:0*/
-    if (typeof func === 'undefined') {
+    if (_.isUndefined(func)) {
       return;
     }
 
@@ -74,7 +75,7 @@ export class Client {
     let data = options.data;
     let id = this.uniqueId();
 
-    if (typeof data !== 'undefined' && method !== 'GET') {
+    if (!_.isUndefined(data) && method !== 'GET') {
       data = JSON.stringify(data);
     }
 
@@ -109,7 +110,7 @@ export class Client {
   }
 
   _chain(...funcs) {
-    funcs = funcs.filter((f) => typeof f !== 'undefined' && f);
+    funcs = funcs.filter((f) => !_.isUndefined(f) && f);
     return (...args) => {
       funcs.forEach((func) => {
         func.apply(funcs, args);
@@ -118,7 +119,7 @@ export class Client {
   }
 
   _wrapRequest(path, options, extraParams) {
-    if (typeof extraParams === 'undefined') {
+    if (_.isUndefined(extraParams)) {
       extraParams = {};
     }
 
diff --git a/src/sentry/static/sentry/app/components/contextData.jsx b/src/sentry/static/sentry/app/components/contextData.jsx
index 46403f6345..5b528c8c06 100644
--- a/src/sentry/static/sentry/app/components/contextData.jsx
+++ b/src/sentry/static/sentry/app/components/contextData.jsx
@@ -1,6 +1,7 @@
 import React from 'react';
 import jQuery from 'jquery';
 import {isUrl} from '../utils';
+import _ from 'underscore';
 
 function looksLikeObjectRepr(value) {
   let a = value[0];
@@ -107,7 +108,7 @@ const ContextData = React.createClass({
         return <span className="val-null">{'None'}</span>;
       } else if (value === true || value === false) {
         return <span className="val-bool">{value ? 'True' : 'False'}</span>;
-      } else if (typeof value === 'string' || value instanceof String) {
+      } else if (_.isString(value)) {
         let valueInfo = analyzeStringForRepr(value);
 
         let out = [<span key="value" className={
@@ -125,9 +126,9 @@ const ContextData = React.createClass({
         }
 
         return out;
-      } else if (typeof value === 'number' || value instanceof Number) {
+      } else if (_.isNumber(value)) {
         return <span className="val-number">{value}</span>;
-      } else if (value instanceof Array) {
+      } else if (_.isArray(value)) {
         for (i = 0; i < value.length; i++) {
           children.push(
             <span className="val-array-item" key={i}>
@@ -176,7 +177,7 @@ const ContextData = React.createClass({
   },
 
   renderKeyPosValue(value) {
-    if (typeof value === 'string' || value instanceof String) {
+    if (_.isString(value)) {
       return <span className="val-string">{value}</span>;
     }
     return this.renderValue(value);
diff --git a/src/sentry/static/sentry/app/components/dateTime.jsx b/src/sentry/static/sentry/app/components/dateTime.jsx
index 09efb3056b..062f8eaf1c 100644
--- a/src/sentry/static/sentry/app/components/dateTime.jsx
+++ b/src/sentry/static/sentry/app/components/dateTime.jsx
@@ -1,6 +1,7 @@
 import React from 'react';
 import moment from 'moment';
 import ConfigStore from '../stores/configStore.jsx';
+import _ from 'underscore';
 
 const DateTime = React.createClass({
   propTypes: {
@@ -26,7 +27,7 @@ const DateTime = React.createClass({
       options.clock24Hours ? 'MMMM D YYYY HH:mm:ss z' : this.getDefaultFormat()
     );
 
-    if (typeof date === 'string' || typeof date === 'number') {
+    if (_.isString(date) || _.isNumber(date)) {
       date = new Date(date);
     }
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
index fe5ea1b576..ce26232bc7 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
@@ -1,4 +1,5 @@
 import {defined} from '../../../utils';
+import _ from 'underscore';
 
 export function escapeQuotes(v) {
   return v.replace(/"/g, '\\"');
@@ -28,7 +29,7 @@ export function getCurlCommand(data) {
     result += ' \\\n -H "' + header[0] + ': ' + escapeQuotes(header[1] + '') + '"';
   }
 
-  if (typeof data.data === 'string') {
+  if (_.isString(data.data)) {
     result += ' \\\n --data "' + escapeQuotes(data.data) + '"';
   } else if (defined(data.data)) {
     result += ' \\\n --data "' + escapeQuotes(jQuery.param(data.data)) + '"';
diff --git a/src/sentry/static/sentry/app/components/timeSince.jsx b/src/sentry/static/sentry/app/components/timeSince.jsx
index 509e81669e..bfca67c173 100644
--- a/src/sentry/static/sentry/app/components/timeSince.jsx
+++ b/src/sentry/static/sentry/app/components/timeSince.jsx
@@ -3,6 +3,7 @@ import moment from 'moment';
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 import ConfigStore from '../stores/configStore.jsx';
 import {t} from '../locale';
+import _ from 'underscore';
 
 const TimeSince = React.createClass({
   propTypes: {
@@ -16,7 +17,7 @@ const TimeSince = React.createClass({
 
   statics: {
     getDateObj(date) {
-      if (typeof date === 'string' || typeof date === 'number') {
+      if (_.isString(date) || _.isNumber(date)) {
         date = new Date(date);
       }
       return date;
diff --git a/src/sentry/static/sentry/app/locale.jsx b/src/sentry/static/sentry/app/locale.jsx
index f605477ffc..93d178fb35 100644
--- a/src/sentry/static/sentry/app/locale.jsx
+++ b/src/sentry/static/sentry/app/locale.jsx
@@ -2,6 +2,7 @@ import Jed from 'jed';
 import React from 'react';
 import {getTranslations} from './translations';
 import {sprintf} from 'sprintf-js';
+import _ from 'underscore';
 
 let LOCALE_DEBUG = false;
 
@@ -39,7 +40,7 @@ function formatForReact(formatString, args) {
 
   // always re-parse, do not cache, because we change the match
   sprintf.parse(formatString).forEach((match, idx) => {
-    if (typeof match === 'string') {
+    if (_.isString(match)) {
       rv.push(match);
     } else {
       let arg = null;
@@ -75,7 +76,7 @@ function argsInvolveReact(args) {
   if (args.some(React.isValidElement)) {
     return true;
   }
-  if (args.length == 1 && typeof args[0] === 'object') {
+  if (args.length == 1 && _.isObject(args[0])) {
     return Object.keys(args[0]).some((key) => {
       return React.isValidElement(args[0][key]);
     });
@@ -141,7 +142,7 @@ export function renderComponentTemplate(template, components) {
     let children = [];
 
     (template[group] || []).forEach((item) => {
-      if (typeof item === 'string') {
+      if (_.isString(item)) {
         children.push(<span key={idx++}>{item}</span>);
       } else {
         children.push(renderGroup(item.group));
@@ -177,7 +178,7 @@ function mark(rv) {
     ref: null,
     props: {
       className: 'translation-wrapper',
-      children: typeof rv === 'array' ? rv : [rv]
+      children: _.isArray(rv) ? rv : [rv]
     },
     _owner: null,
     _store: {}
diff --git a/src/sentry/static/sentry/app/stores/eventStore.jsx b/src/sentry/static/sentry/app/stores/eventStore.jsx
index f72810f27d..f97bd7698d 100644
--- a/src/sentry/static/sentry/app/stores/eventStore.jsx
+++ b/src/sentry/static/sentry/app/stores/eventStore.jsx
@@ -1,5 +1,6 @@
 import jQuery from 'jquery';
 import Reflux from 'reflux';
+import _ from 'underscore';
 
 const EventStore = Reflux.createStore({
   init() {
@@ -23,7 +24,7 @@ const EventStore = Reflux.createStore({
   },
 
   add(items) {
-    if (!(items instanceof Array)) {
+    if (!_.isArray(items)) {
       items = [items];
     }
 
diff --git a/src/sentry/static/sentry/app/stores/groupStore.jsx b/src/sentry/static/sentry/app/stores/groupStore.jsx
index d6d536f31b..776f66a009 100644
--- a/src/sentry/static/sentry/app/stores/groupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupStore.jsx
@@ -4,6 +4,7 @@ import GroupActions from '../actions/groupActions';
 import IndicatorStore from '../stores/indicatorStore';
 import utils from '../utils';
 import {t} from '../locale';
+import _ from 'underscore';
 
 
 function showAlert(msg, type) {
@@ -41,7 +42,7 @@ const GroupStore = Reflux.createStore({
   },
 
   add(items) {
-    if (!(items instanceof Array)) {
+    if (!_.isArray(items)) {
       items = [items];
     }
 
@@ -79,21 +80,21 @@ const GroupStore = Reflux.createStore({
   },
 
   addStatus(id, status) {
-    if (typeof this.statuses[id] === 'undefined') {
+    if (_.isUndefined(this.statuses[id])) {
       this.statuses[id] = {};
     }
     this.statuses[id][status] = true;
   },
 
   clearStatus(id, status) {
-    if (typeof this.statuses[id] === 'undefined') {
+    if (_.isUndefined(this.statuses[id])) {
       return;
     }
     this.statuses[id][status] = false;
   },
 
   hasStatus(id, status) {
-    if (typeof this.statuses[id] === 'undefined') {
+    if (_.isUndefined(this.statuses[id])) {
       return false;
     }
     return this.statuses[id][status] || false;
@@ -189,7 +190,7 @@ const GroupStore = Reflux.createStore({
     // regroup pending changes by their itemID
     let pendingById = {};
     this.pendingChanges.forEach(change => {
-      if (typeof pendingById[change.id] === 'undefined') {
+      if (_.isUndefined(pendingById[change.id])) {
         pendingById[change.id] = [];
       }
       pendingById[change.id].push(change);
@@ -197,7 +198,7 @@ const GroupStore = Reflux.createStore({
 
     return this.items.map(item => {
       let rItem = item;
-      if (typeof pendingById[item.id] !== 'undefined') {
+      if (!_.isUndefined(pendingById[item.id])) {
         // copy the object so dirty state doesnt mutate original
         rItem = jQuery.extend(true, {}, rItem);
         pendingById[item.id].forEach(change => {
@@ -295,7 +296,7 @@ const GroupStore = Reflux.createStore({
    * If itemIds is undefined, returns all ids in the store
    */
   _itemIdsOrAll(itemIds) {
-    if (typeof itemIds === 'undefined') {
+    if (_.isUndefined(itemIds)) {
       itemIds = this.items.map(item => item.id);
     }
     return itemIds;
diff --git a/src/sentry/static/sentry/app/stores/hookStore.jsx b/src/sentry/static/sentry/app/stores/hookStore.jsx
index 0a817928ab..1fe0ad71fb 100644
--- a/src/sentry/static/sentry/app/stores/hookStore.jsx
+++ b/src/sentry/static/sentry/app/stores/hookStore.jsx
@@ -1,5 +1,5 @@
-
 import Reflux from 'reflux';
+import _ from 'underscore';
 
 let validHookNames = new Set([
   'footer',
@@ -16,7 +16,7 @@ const HookStore = Reflux.createStore({
     if (!validHookNames.has(hookName)) {
       throw new Error('Invalid hook name: ' + hookName);
     }
-    if (typeof this.hooks[hookName] === 'undefined') {
+    if (_.isUndefined(this.hooks[hookName])) {
       this.hooks[hookName] = [];
     }
     this.hooks[hookName].push(callback);
@@ -24,7 +24,7 @@ const HookStore = Reflux.createStore({
   },
 
   remove(hookName, callback) {
-    if (typeof this.hooks[hookName] === 'undefined') {
+    if (_.isUndefined(this.hooks[hookName])) {
       return;
     }
     this.hooks[hookName] = this.hooks[hookName].filter((cb) => {
diff --git a/src/sentry/static/sentry/app/utils.jsx b/src/sentry/static/sentry/app/utils.jsx
index e8058c4b28..64ac11ce4d 100644
--- a/src/sentry/static/sentry/app/utils.jsx
+++ b/src/sentry/static/sentry/app/utils.jsx
@@ -34,11 +34,11 @@ const arrayIsEqual = function(arr, other, deep) {
 const valueIsEqual = function(value, other, deep) {
   if (value === other) {
     return true;
-  } else if (value instanceof Array || other instanceof Array) {
+  } else if (_.isArray(value) || _.isArray(other)) {
     if (arrayIsEqual(value, other, deep)) {
       return true;
     }
-  } else if (value instanceof Object || other instanceof Object) {
+  } else if (_.isObject(value) || _.isObject(other)) {
     if (objectMatchesSubset(value, other, deep)) {
       return true;
     }
@@ -163,7 +163,7 @@ export default {
   },
 
   defined(item) {
-    return typeof item !== 'undefined' && item !== null;
+    return !_.isUndefined(item) && item !== null;
   },
 
   nl2br(str) {
diff --git a/src/sentry/static/sentry/app/utils/collection.jsx b/src/sentry/static/sentry/app/utils/collection.jsx
index 5424f323e0..ce83008cb9 100644
--- a/src/sentry/static/sentry/app/utils/collection.jsx
+++ b/src/sentry/static/sentry/app/utils/collection.jsx
@@ -1,3 +1,5 @@
+import _ from 'underscore';
+
 let defaults = {
   limit: null,
   key: function(item) {
@@ -10,19 +12,19 @@ function Collection(collection, options) {
 
   Array.call(this);
 
-  if (typeof options === 'undefined') {
+  if (_.isUndefined(options)) {
     options = {};
   }
 
   for (i in defaults) {
-    if (typeof options[i] === 'undefined') {
+    if (_.isUndefined(options[i])) {
       options[i] = defaults[i];
     }
   }
 
   this.options = options;
 
-  if (typeof collection !== 'undefined') {
+  if (!_.isUndefined(collection)) {
     this.push(collection);
   }
 
@@ -40,7 +42,7 @@ Collection.prototype._refresh = function _refresh() {
 };
 
 Collection.prototype.push = function push(items) {
-  if (!(items instanceof Array)) {
+  if (!_.isArray(items)) {
     items = [items];
   }
 
@@ -57,7 +59,7 @@ Collection.prototype.push = function push(items) {
 };
 
 Collection.prototype.unshift = function unshift(items) {
-  if (!(items instanceof Array)) {
+  if (!_.isArray(items)) {
     items = [items];
   }
   items.reverse().forEach(function(item){
diff --git a/src/sentry/static/sentry/app/views/adminSettings.jsx b/src/sentry/static/sentry/app/views/adminSettings.jsx
index 32d77aa0c6..7989d13bcd 100644
--- a/src/sentry/static/sentry/app/views/adminSettings.jsx
+++ b/src/sentry/static/sentry/app/views/adminSettings.jsx
@@ -30,7 +30,7 @@ const SettingsList = React.createClass({
     for (let key of optionsAvailable) {
       // TODO(dcramer): we should not be mutating options
       let option = options[key] || {field: {}};
-      if (typeof option.value === 'undefined' || option.value === '') {
+      if (_.isUndefined(option.value) || option.value === '') {
         let defn = getOption(key);
         formData[key] = defn.defaultValue ? defn.defaultValue() : '';
       } else {
diff --git a/src/sentry/static/sentry/app/views/stream/actionLink.jsx b/src/sentry/static/sentry/app/views/stream/actionLink.jsx
index 057f4b4e7a..1e70365406 100644
--- a/src/sentry/static/sentry/app/views/stream/actionLink.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actionLink.jsx
@@ -4,6 +4,7 @@ import React from 'react';
 import SelectedGroupStore from '../../stores/selectedGroupStore';
 import TooltipMixin from '../../mixins/tooltip';
 import {t} from '../../locale';
+import _ from 'underscore';
 
 // TODO(mitsuhiko): very unclear how to translate this
 const ActionLink = React.createClass({
@@ -89,7 +90,7 @@ const ActionLink = React.createClass({
     let numEvents = SelectedGroupStore.getSelectedIds().size;
 
     function resolveLabel(obj) {
-      if (typeof obj === 'function') {
+      if (_.isFunction(obj)) {
         return obj(numEvents);
       }
       return obj;
