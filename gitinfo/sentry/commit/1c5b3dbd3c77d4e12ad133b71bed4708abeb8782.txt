commit 1c5b3dbd3c77d4e12ad133b71bed4708abeb8782
Author: David Cramer <dcramer@gmail.com>
Date:   Sat May 7 17:39:20 2011 -0700

    Ensure all web properties can be read from config file

diff --git a/docs/config/index.rst b/docs/config/index.rst
index c734119f81..c8213e21a2 100644
--- a/docs/config/index.rst
+++ b/docs/config/index.rst
@@ -1,6 +1,10 @@
 Configuration
 =============
 
+This document describes additional configuration options available to Sentry.
+
+.. note:: If you are using Django, you must prefix all setting names with ``SENTRY_`` in your ``settings.py``.
+
 Integration with ``logging``
 ----------------------------
 
@@ -62,19 +66,19 @@ Integration with ``haystack`` (Search)
 
 (This support is still under development)
 
-Note: You will need to install a forked version of Haystack which supports additional configuration. It can be obtained on [GitHub](http://github.com/disqus/django-haystack).
+Note: You will need to install a forked version of Haystack which supports additional configuration. It can be obtained on `GitHub <http://github.com/disqus/django-haystack>`.
 
 Start by configuring your Sentry search backend::
 
-	SENTRY_SEARCH_BACKEND = 'solr'
-	SENTRY_SEARCH_OPTIONS = {
+	SEARCH_BACKEND = 'solr'
+	SEARCH_OPTIONS = {
 	    'url': 'http://127.0.0.1:8983/solr'
 	}
 
 Or if you want to use Whoosh (you shouldn't)::
 
-	SENTRY_SEARCH_BACKEND = 'whoosh'
-	SENTRY_SEARCH_OPTIONS = {
+	SEARCH_BACKEND = 'whoosh'
+	SEARCH_OPTIONS = {
 	    'path': os.path.join(PROJECT_ROOT, 'sentry_index')
 	}
 
@@ -142,14 +146,14 @@ Other Settings
 
 Several options exist to configure django-sentry via your ``settings.py``:
 
-#############
-SENTRY_CLIENT
-#############
+######
+CLIENT
+######
 
 In some situations you may wish for a slightly different behavior to how Sentry communicates with your server. For
 this, Sentry allows you to specify a custom client::
 
-	SENTRY_CLIENT = 'sentry.client.base.SentryClient'
+	CLIENT = 'sentry.client.base.SentryClient'
 
 In addition to the default client (which will handle multi-db and REMOTE_URL for you) we also include two additional options:
 
@@ -162,7 +166,7 @@ this would be the way to do it.
 
 ::
 
-	SENTRY_CLIENT = 'sentry.client.log.LoggingSentryClient'
+	CLIENT = 'sentry.client.log.LoggingSentryClient'
 
 ******************
 CelerySentryClient
@@ -170,12 +174,12 @@ CelerySentryClient
 
 Integrates with the Celery message queue (http://celeryproject.org/). To use this you will also need to add ``sentry.client.celery`` to ``INSTALLED_APPS`` for ``tasks.py`` auto discovery.
 
-You may also specify ``SENTRY_CELERY_ROUTING_KEY`` to change the task queue
+You may also specify ``CELERY_ROUTING_KEY`` to change the task queue
 name (defaults to ``sentry``).
 
 ::
 
-	SENTRY_CLIENT = 'sentry.client.celery.CelerySentryClient'
+	CLIENT = 'sentry.client.celery.CelerySentryClient'
 	
 	INSTALLED_APPS = (
 	    ...,
@@ -190,25 +194,25 @@ Spawns a background thread within the process that will handle sending messages
 
 ::
 
-	SENTRY_CLIENT = 'sentry.client.async.AsyncSentryClient'
+	CLIENT = 'sentry.client.async.AsyncSentryClient'
 
-#############
-SENTRY_ADMINS
-#############
+######
+ADMINS
+######
 
 On smaller sites you may wish to enable throttled emails, we recommend doing this by first
-removing the ``ADMINS`` setting in Django, and adding in ``SENTRY_ADMINS``::
+removing the ``ADMINS`` setting in Django, and adding in ``ADMINS``::
 
 	ADMINS = ()
-	SENTRY_ADMINS = ('root@localhost',)
+	ADMINS = ('root@localhost',)
 
 This will send out a notification the first time an error is seen, and the first time an error is
 seen after it has been resolved.
 
 
-##############
-SENTRY_TESTING
-##############
+#######
+TESTING
+#######
 
 Enabling this setting allows the testing of Sentry exception handler even if Django DEBUG is enabled.
 
@@ -216,39 +220,39 @@ Default value is ``False``
 
 .. note:: Normally when Django DEBUG is enabled the Sentry exception handler is immediately skipped
 
-###########
-SENTRY_NAME
-###########
+####
+NAME
+####
 
 This will override the ``server_name`` value for this installation. Defaults to ``socket.gethostname()``.
 
-#################
-SENTRY_URL_PREFIX
-#################
+##########
+URL_PREFIX
+##########
 
 Absolute URL to the sentry root directory. Should not include a trailing slash. Defaults to "".
 
-####################
-SENTRY_EXCLUDE_PATHS
-####################
+#############
+EXCLUDE_PATHS
+#############
 
 Extending this allow you to ignore module prefixes when we attempt to discover which function an error comes from (typically a view)
 
-####################
-SENTRY_INCLUDE_PATHS
-####################
+#############
+INCLUDE_PATHS
+#############
 
 By default Sentry only looks at modules in INSTALLED_APPS for drilling down where an exception is located
 
-######################
-SENTRY_MAX_LENGTH_LIST
-######################
+###############
+MAX_LENGTH_LIST
+###############
 
 The maximum number of items a list-like container should store. Defaults to 50.
 
-########################
-SENTRY_MAX_LENGTH_STRING
-########################
+#################
+MAX_LENGTH_STRING
+#################
 
 The maximum characters of a string that should be stored. Defaults to 200.
 
diff --git a/docs/install/index.rst b/docs/install/index.rst
index 17c74ea3c1..b42ffcdf04 100644
--- a/docs/install/index.rst
+++ b/docs/install/index.rst
@@ -1,3 +1,4 @@
+=======
 Install
 =======
 
@@ -9,6 +10,7 @@ Or with *setuptools*::
 
 	easy_install -U django-sentry
 
+------------
 Requirements
 ------------
 
@@ -39,6 +41,7 @@ You now have two choices:
    most compatibility with your application, as well as ensuring it does not impact your
    primary application servers.
 
+----------------
 Integrated Setup
 ----------------
 
@@ -75,13 +78,15 @@ Finally, run ``python manage.py syncdb`` to create the database tables.
 
    See :doc:`../extensions` for information on additional plugins and functionality included.
 
+#########
 Upgrading
-~~~~~~~~~
+#########
 
 Upgrading Sentry is fairly painless with South migrations. If you're not using South then you're on your own::
 
 	python manage.py migrate sentry
 
+-----------------------
 Running a Sentry Server
 -----------------------
 
@@ -90,8 +95,9 @@ logging. This means that any number of Sentry clients simply pass on this inform
 server. If you run into a situation where one of Sentry's requirements conflict with your own, or you simply
 need to ensure quality of service within your project, this is for you.
 
+###################
 The Built-in Server
-~~~~~~~~~~~~~~~~~~~
+###################
 
 Sentry provides a built-in webserver (powered by eventlet) to get you off the ground quickly. It's powered by two open source
 libraries, eventlet and python-daemon.
@@ -104,8 +110,35 @@ Sentry provides the start, stop, and restart commands available via the command
 
 .. note: The ``start`` command will also automatically run the ``upgrade`` command, which handles data and schema migrations.
 
+The following settings are available for the built-in webserver:
+
+********
+WEB_HOST
+********
+
+THe hostname which the webserver should bind to. Defaults to ``localhost``.
+
+********
+WEB_PORT
+********
+
+The port which the webserver should listen on. Defaults to ``9000``.
+
+************
+WEB_PID_FILE
+************
+
+The location to store the PID file. Defaults to ``/var/run/sentry.pid``.
+
+************
+WEB_LOG_FILE
+************
+
+The location to store the log file. Defaults to ``/var/log/sentry.log``.
+
+#############################
 Configuring a Sentry WSGI app
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+#############################
 
 If you need more flexibility in your Sentry server, you may want to setup the server project manually. While this guide does not
 cover configuring your webserver, it does describe the required attributes of your WSGI app to run in a standalone server mode.
@@ -125,8 +158,9 @@ You will also need to ensure that your ``SENTRY_KEY`` matches across your client
 	SENTRY_KEY = '0123456789abcde'
 
 
+######################
 Configure your Clients
-~~~~~~~~~~~~~~~~~~~~~~
+######################
 
 On each of your application servers, you will need to configure Sentry to communicate with your remote Sentry server.
 
@@ -148,11 +182,13 @@ You will also need to ensure that your ``SENTRY_KEY`` matches across your client
 	SENTRY_KEY = '0123456789abcde'
 
 
+-------
 Caveats
 -------
 
+#########################
 Error Handling Middleware
-~~~~~~~~~~~~~~~~~~~~~~~~~
+#########################
 
 If you already have middleware in place that handles ``process_exception`` you will need to take extra care when using Sentry.
 
diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index 5c62594a90..f7ff129172 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -71,4 +71,11 @@ URL_PREFIX = ''
 PUBLIC = False
 
 MAX_LENGTH_LIST = 50
-MAX_LENGTH_STRING = 200
\ No newline at end of file
+MAX_LENGTH_STRING = 200
+
+## The following settings refer to the built-in webserver
+
+WEB_HOST = 'localhost'
+WEB_PORT = 9000
+WEB_LOG_FILE = '/var/log/sentry.log'
+WEB_PID_FILE = '/var/run/sentry.pid'
\ No newline at end of file
diff --git a/sentry/scripts/runner.py b/sentry/scripts/runner.py
index 7939dc0be7..1c8a5a37d6 100644
--- a/sentry/scripts/runner.py
+++ b/sentry/scripts/runner.py
@@ -16,22 +16,23 @@ class SentryServer(DaemonRunner):
     pidfile_timeout = 10
     start_message = u"started with pid %(pid)d"
 
-    def __init__(self, host='localhost', port=9000, pidfile='/var/run/sentry.pid',
-                 logfile='/var/log/sentry.log'):
+    def __init__(self, host=None, port=None, pidfile=None,
+                 logfile=None):
+        from sentry import conf
+
+        if not logfile:
+            logfile = conf.WEB_LOG_FILE
 
         self.daemon_context = DaemonContext()
         self.daemon_context.stdout = open(logfile, 'w+')
         self.daemon_context.stderr = open(logfile, 'w+', buffering=0)
 
-        self.pidfile = None
-        if pidfile is not None:
-            self.pidfile = make_pidlockfile(
-                pidfile, self.pidfile_timeout)
+        self.pidfile = make_pidlockfile(pidfile or conf.WEB_PID_FILE, self.pidfile_timeout)
 
         self.daemon_context.pidfile = self.pidfile
 
-        self.host = host
-        self.port = port
+        self.host = host or conf.WEB_HOST
+        self.port = port or conf.WEB_PORT
 
         # HACK: set app to self so self.app.run() works
         self.app = self
@@ -89,14 +90,14 @@ def main():
     parser = OptionParser(version="%%prog %s" % VERSION)
     parser.add_option('--config', metavar='CONFIG')
     if args[1] == 'start':
-        parser.add_option('--host', default='localhost', metavar='HOSTNAME')
-        parser.add_option('--port', type=int, default=9000, metavar='PORT')
+        parser.add_option('--host', metavar='HOSTNAME')
+        parser.add_option('--port', type=int, metavar='PORT')
         parser.add_option('--daemon', action='store_true', default=False, dest='daemonize')
-        parser.add_option('--pidfile', default='/var/run/sentry.pid', dest='pidfile')
-        parser.add_option('--logfile', default='/var/log/sentry.log', dest='logfile')
+        parser.add_option('--pidfile', dest='pidfile')
+        parser.add_option('--logfile', dest='logfile')
     elif args[1] == 'stop':
-        parser.add_option('--pidfile', default='/var/run/sentry.pid', dest='pidfile')
-        parser.add_option('--logfile', default='/var/log/sentry.log', dest='logfile')
+        parser.add_option('--pidfile', dest='pidfile')
+        parser.add_option('--logfile', dest='logfile')
     elif args[1] == 'cleanup':
         parser.add_option('--days', default='30',
                           help='Numbers of days to truncate on.')
@@ -113,15 +114,12 @@ def main():
         os.environ['DJANGO_SETTINGS_MODULE'] = options.config
 
     if not settings.configured:
-        os.environ['DJANGO_SETTINGS_MODULE'] = 'sentry.utils.conf.server'
+        os.environ['DJANGO_SETTINGS_MODULE'] = 'sentry.conf.server'
 
     if args[0] == 'upgrade':
         upgrade()
 
     elif args[0] == 'start':
-        if not options.pidfile:
-            sys.exit('You must specify --pidfile')
-
         app = SentryServer(host=options.host, port=options.port,
                              pidfile=options.pidfile, logfile=options.logfile)
         app.execute(args[0])
@@ -131,9 +129,6 @@ def main():
         app.execute(args[0])
   
     elif args[0] == 'stop':
-        if not options.pidfile:
-            sys.exit('You must specify --pidfile')
-
         app = SentryServer(pidfile=options.pidfile, logfile=options.logfile)
         app.execute(args[0])
 
diff --git a/sentry/wsgi.py b/sentry/wsgi.py
index e33ed29783..1434697864 100644
--- a/sentry/wsgi.py
+++ b/sentry/wsgi.py
@@ -9,7 +9,7 @@ sys.stdout = sys.stderr
 from django.conf import settings
 
 if not settings.configured:
-    os.environ['DJANGO_SETTINGS_MODULE'] = 'sentry.utils.conf.server'
+    os.environ['DJANGO_SETTINGS_MODULE'] = 'sentry.conf.server'
 os.environ['CELERY_LOADER'] = 'django'
 
 import django.core.handlers.wsgi
