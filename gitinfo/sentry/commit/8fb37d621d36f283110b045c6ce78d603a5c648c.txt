commit 8fb37d621d36f283110b045c6ce78d603a5c648c
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Aug 27 23:37:19 2015 +0200

    Updated documentation for all event APIs and fixed a small bug with 404ing on an event.

diff --git a/api-docs/cache/endpoints/delete-group-details.json b/api-docs/cache/endpoints/delete-group-details.json
index adcc88f05c..9a95f7ebba 100644
--- a/api-docs/cache/endpoints/delete-group-details.json
+++ b/api-docs/cache/endpoints/delete-group-details.json
@@ -10,7 +10,8 @@
   "text": [
     "Removes an individual aggregate.",
     "",
-    ":pparam int group_id: the ID of the group to delete."
+    ":pparam int group_id: the ID of the group to delete.",
+    ":auth: required"
   ],
   "title": "Remove an Aggregate"
 }
diff --git a/api-docs/cache/endpoints/delete-project-group-index.json b/api-docs/cache/endpoints/delete-project-group-index.json
index 102af4d53d..dfff22ac4e 100644
--- a/api-docs/cache/endpoints/delete-project-group-index.json
+++ b/api-docs/cache/endpoints/delete-project-group-index.json
@@ -22,7 +22,8 @@
     ":pparam string organization_slug: the slug of the organization the",
     "                                  groups belong to.",
     ":pparam string project_slug: the slug of the project the groups",
-    "                             belong to."
+    "                             belong to.",
+    ":auth: required"
   ],
   "title": "Bulk Remove a List of Aggregates"
 }
diff --git a/api-docs/cache/endpoints/get-group-details.json b/api-docs/cache/endpoints/get-group-details.json
index f1fbdcf0a3..2c409c1400 100644
--- a/api-docs/cache/endpoints/get-group-details.json
+++ b/api-docs/cache/endpoints/get-group-details.json
@@ -13,7 +13,8 @@
     "the group (the bar graph), some overall numbers (number of comments,",
     "user reports) as well as the summarized event data.",
     "",
-    ":pparam int group_id: the ID of the group to retrieve."
+    ":pparam int group_id: the ID of the group to retrieve.",
+    ":auth: required"
   ],
   "title": "Retrieve an Aggregate"
 }
diff --git a/api-docs/cache/endpoints/get-group-events.json b/api-docs/cache/endpoints/get-group-events.json
index 1e95136bcb..50044371f1 100644
--- a/api-docs/cache/endpoints/get-group-events.json
+++ b/api-docs/cache/endpoints/get-group-events.json
@@ -3,10 +3,15 @@
   "internal_path": "sentry.api.endpoints.group_events.GroupEventsEndpoint:get",
   "method": "GET",
   "path": "/api/0/groups/{group_id}/events/",
-  "scenarios": [],
+  "scenarios": [
+    "ListAvailableSamples"
+  ],
   "section": "events",
   "text": [
-    "This endpoint lists an aggregate's available samples."
+    "This endpoint lists an aggregate's available samples.",
+    "",
+    ":pparam int group_id: the ID of the group to retrieve.",
+    ":auth: required"
   ],
   "title": "List Available Samples"
 }
diff --git a/api-docs/cache/endpoints/get-group-tag-key-details.json b/api-docs/cache/endpoints/get-group-tag-key-details.json
index 94d51b3add..658bc42885 100644
--- a/api-docs/cache/endpoints/get-group-tag-key-details.json
+++ b/api-docs/cache/endpoints/get-group-tag-key-details.json
@@ -6,7 +6,11 @@
   "scenarios": [],
   "section": "events",
   "text": [
-    "Returns a list of details about the given tag key."
+    "Returns a list of details about the given tag key.",
+    "",
+    ":pparam int group_id: the ID of the group to retrieve.",
+    ":pparam string key: the tag key to look the values up for.",
+    ":auth: required"
   ],
   "title": "List Tag Details"
 }
diff --git a/api-docs/cache/endpoints/get-group-tag-key-values.json b/api-docs/cache/endpoints/get-group-tag-key-values.json
index 24a9d23525..d157104251 100644
--- a/api-docs/cache/endpoints/get-group-tag-key-values.json
+++ b/api-docs/cache/endpoints/get-group-tag-key-values.json
@@ -9,7 +9,8 @@
     "Return a list of values associated with this key.",
     "",
     ":pparam int group_id: the ID of the group to retrieve.",
-    ":pparam string key: the tag key to look the values up for."
+    ":pparam string key: the tag key to look the values up for.",
+    ":auth: required"
   ],
   "title": "List a Tag's Values"
 }
diff --git a/api-docs/cache/endpoints/get-project-event-details.json b/api-docs/cache/endpoints/get-project-event-details.json
index cbb86c547d..a52fa82480 100644
--- a/api-docs/cache/endpoints/get-project-event-details.json
+++ b/api-docs/cache/endpoints/get-project-event-details.json
@@ -3,10 +3,20 @@
   "internal_path": "sentry.api.endpoints.project_event_details.ProjectEventDetailsEndpoint:get",
   "method": "GET",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/events/{event_id}/",
-  "scenarios": [],
+  "scenarios": [
+    "RetrieveEventForProject"
+  ],
   "section": "events",
   "text": [
-    "Return details on an individual event."
+    "Return details on an individual event.",
+    "",
+    ":pparam string organization_slug: the slug of the organization the",
+    "                                  event belongs to.",
+    ":pparam string project_slug: the slug of the project the event",
+    "                             belongs to.",
+    ":pparam string event_id: the hexadecimal ID of the event to",
+    "                         retrieve (as reported by the raven client).",
+    ":auth: required"
   ],
   "title": "Retrieve an Event for a Project"
 }
diff --git a/api-docs/cache/endpoints/get-project-group-index.json b/api-docs/cache/endpoints/get-project-group-index.json
index c750d178b7..d73edfa4ca 100644
--- a/api-docs/cache/endpoints/get-project-group-index.json
+++ b/api-docs/cache/endpoints/get-project-group-index.json
@@ -27,7 +27,8 @@
     ":pparam string organization_slug: the slug of the organization the",
     "                                  groups belong to.",
     ":pparam string project_slug: the slug of the project the groups",
-    "                             belong to."
+    "                             belong to.",
+    ":auth: required"
   ],
   "title": "List a Project's Aggregates"
 }
diff --git a/api-docs/cache/endpoints/put-group-details.json b/api-docs/cache/endpoints/put-group-details.json
index 94b598c250..a70e7d8f01 100644
--- a/api-docs/cache/endpoints/put-group-details.json
+++ b/api-docs/cache/endpoints/put-group-details.json
@@ -9,17 +9,22 @@
   "section": "events",
   "text": [
     "Updates an individual aggregate's attributes.  Only the attributes",
-    "submitted are modified.  The following attributes are supported",
-    "for all keys:",
+    "submitted are modified.",
     "",
-    "- ``status``: ``\"resolved\"``, ``\"unresolved\"``, ``\"muted\"``",
-    "- ``assignedTo``: user id",
-    "",
-    "In case the API call is invoked in a user context, these",
-    "attributes can also be modified:",
-    "",
-    "- ``hasSeen``: `true`, `false`",
-    "- ``isBookmarked``: `true`, `false`"
+    ":pparam int group_id: the ID of the group to retrieve.",
+    ":param string status: the new status for the groups.  Valid values",
+    "                      are ``\"resolved\"``, ``\"unresolved\"`` and",
+    "                      ``\"muted\"``.",
+    ":param int assignedTo: the user ID of the user that should be",
+    "                       assigned to this group.",
+    ":param boolean hasSeen: in case this API call is invoked with a user",
+    "                        context this allows changing of the flag",
+    "                        that indicates if the user has seen the",
+    "                        event.",
+    ":param boolean isBookmarked: in case this API call is invoked with a",
+    "                             user context this allows changing of",
+    "                             the bookmark flag.",
+    ":auth: required"
   ],
   "title": "Update an Aggregate"
 }
diff --git a/api-docs/cache/scenarios/GetLatestGroupSample.json b/api-docs/cache/scenarios/GetLatestGroupSample.json
index ced4e95e58..0f4e20c3be 100644
--- a/api-docs/cache/scenarios/GetLatestGroupSample.json
+++ b/api-docs/cache/scenarios/GetLatestGroupSample.json
@@ -24,7 +24,7 @@
               "foo": "bar"
             }
           },
-          "dateCreated": "2015-08-27T18:36:04Z",
+          "dateCreated": "2015-08-27T21:35:20Z",
           "entries": [
             {
               "data": {
@@ -453,7 +453,7 @@
             }
           ],
           "errors": [],
-          "eventID": "9c98100ee1464abdad072045d5ff3d32",
+          "eventID": "e18141e45c044cf8a06acc5425d883cc",
           "groupID": 1,
           "id": "1",
           "message": "This is an example Python exception",
@@ -465,16 +465,16 @@
           "previousEventID": null,
           "release": {
             "data": {},
-            "dateCreated": "2015-08-27T18:36:04.555Z",
+            "dateCreated": "2015-08-27T21:35:20.679Z",
             "dateReleased": null,
             "dateStarted": null,
             "firstEvent": null,
             "lastEvent": null,
             "newGroups": 0,
             "ref": null,
-            "shortVersion": "d1f60347554a",
+            "shortVersion": "f8a9324ea70f",
             "url": null,
-            "version": "d1f60347554a5d9912804637a1eb2fa97fedff75"
+            "version": "f8a9324ea70fa8918e6fa62b628fa6b587e986e9"
           },
           "size": 6705,
           "tags": {
@@ -482,7 +482,7 @@
             "device": "Other",
             "level": "error",
             "os": "Windows 8",
-            "sentry:release": "d1f60347554a5d9912804637a1eb2fa97fedff75",
+            "sentry:release": "f8a9324ea70fa8918e6fa62b628fa6b587e986e9",
             "url": "http://example.com/foo"
           },
           "timeSpent": null,
diff --git a/api-docs/cache/scenarios/ListAvailableSamples.json b/api-docs/cache/scenarios/ListAvailableSamples.json
new file mode 100644
index 0000000000..9e91a0a80e
--- /dev/null
+++ b/api-docs/cache/scenarios/ListAvailableSamples.json
@@ -0,0 +1,497 @@
+{
+  "ident": "ListAvailableSamples",
+  "requests": [
+    {
+      "request": {
+        "data": null,
+        "headers": {},
+        "method": "GET",
+        "path": "/api/0/groups/1/events/"
+      },
+      "response": {
+        "data": [
+          {
+            "context": {
+              "emptyList": [],
+              "emptyMap": {},
+              "results": [
+                1,
+                2,
+                3,
+                4,
+                5
+              ],
+              "session": {
+                "foo": "bar"
+              }
+            },
+            "dateCreated": "2015-08-27T21:35:20Z",
+            "entries": [
+              {
+                "data": {
+                  "context": [
+                    [
+                      11,
+                      "{% endif %}\n"
+                    ],
+                    [
+                      12,
+                      "<script src=\"{% static 'debug_toolbar/js/toolbar.js' %}\"></script>\n"
+                    ],
+                    [
+                      13,
+                      "<div id=\"djDebug\" hidden=\"hidden\" dir=\"ltr\"\n"
+                    ],
+                    [
+                      14,
+                      "     data-store-id=\"{{ toolbar.store_id }}\" data-render-panel-url=\"{% url 'djdt:render_panel' %}\"\n"
+                    ],
+                    [
+                      15,
+                      "     {{ toolbar.config.ROOT_TAG_EXTRA_ATTRS|safe }}>\n"
+                    ],
+                    [
+                      16,
+                      "\t<div hidden=\"hidden\" id=\"djDebugToolbar\">\n"
+                    ],
+                    [
+                      17,
+                      "\t\t<ul id=\"djDebugPanelList\">\n"
+                    ]
+                  ],
+                  "filename": "debug_toolbar/base.html",
+                  "lineNo": 14
+                },
+                "type": "template"
+              },
+              {
+                "data": {
+                  "frames": [
+                    {
+                      "absPath": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/base.py",
+                      "colNo": null,
+                      "context": [
+                        [
+                          298,
+                          "                frames = stack"
+                        ],
+                        [
+                          299,
+                          ""
+                        ],
+                        [
+                          300,
+                          "            data.update({"
+                        ],
+                        [
+                          301,
+                          "                'sentry.interfaces.Stacktrace': {"
+                        ],
+                        [
+                          302,
+                          "                    'frames': get_stack_info(frames,"
+                        ],
+                        [
+                          303,
+                          "                        transformer=self.transform)"
+                        ],
+                        [
+                          304,
+                          "                },"
+                        ],
+                        [
+                          305,
+                          "            })"
+                        ],
+                        [
+                          306,
+                          ""
+                        ],
+                        [
+                          307,
+                          "        if 'sentry.interfaces.Stacktrace' in data:"
+                        ],
+                        [
+                          308,
+                          "            if self.include_paths:"
+                        ]
+                      ],
+                      "errors": null,
+                      "filename": "raven/base.py",
+                      "function": "build_msg",
+                      "inApp": false,
+                      "lineNo": 303,
+                      "module": "raven.base",
+                      "vars": {
+                        "'culprit'": null,
+                        "'data'": {
+                          "'message'": "u'This is a test message generated using ``raven test``'",
+                          "'sentry.interfaces.Message'": {
+                            "'message'": "u'This is a test message generated using ``raven test``'",
+                            "'params'": []
+                          }
+                        },
+                        "'date'": "datetime.datetime(2013, 8, 13, 3, 8, 24, 880386)",
+                        "'event_id'": "'54a322436e1b47b88e239b78998ae742'",
+                        "'event_type'": "'raven.events.Message'",
+                        "'extra'": {
+                          "'loadavg'": [
+                            0.37255859375,
+                            0.5341796875,
+                            0.62939453125
+                          ],
+                          "'user'": "'dcramer'"
+                        },
+                        "'frames'": "<generator object iter_stack_frames at 0x107bcc3c0>",
+                        "'handler'": "<raven.events.Message object at 0x107bd0890>",
+                        "'k'": "'sentry.interfaces.Message'",
+                        "'kwargs'": {
+                          "'level'": 20,
+                          "'message'": "'This is a test message generated using ``raven test``'"
+                        },
+                        "'public_key'": null,
+                        "'result'": {
+                          "'message'": "u'This is a test message generated using ``raven test``'",
+                          "'sentry.interfaces.Message'": {
+                            "'message'": "u'This is a test message generated using ``raven test``'",
+                            "'params'": []
+                          }
+                        },
+                        "'self'": "<raven.base.Client object at 0x107bb8210>",
+                        "'stack'": true,
+                        "'tags'": null,
+                        "'time_spent'": null,
+                        "'v'": {
+                          "'message'": "u'This is a test message generated using ``raven test``'",
+                          "'params'": []
+                        }
+                      }
+                    },
+                    {
+                      "absPath": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/base.py",
+                      "colNo": null,
+                      "context": [
+                        [
+                          454,
+                          "        if not self.is_enabled():"
+                        ],
+                        [
+                          455,
+                          "            return"
+                        ],
+                        [
+                          456,
+                          ""
+                        ],
+                        [
+                          457,
+                          "        data = self.build_msg("
+                        ],
+                        [
+                          458,
+                          "            event_type, data, date, time_spent, extra, stack, tags=tags,"
+                        ],
+                        [
+                          459,
+                          "            **kwargs)"
+                        ],
+                        [
+                          460,
+                          ""
+                        ],
+                        [
+                          461,
+                          "        self.send(**data)"
+                        ],
+                        [
+                          462,
+                          ""
+                        ],
+                        [
+                          463,
+                          "        return (data.get('event_id'),)"
+                        ],
+                        [
+                          464,
+                          ""
+                        ]
+                      ],
+                      "errors": null,
+                      "filename": "raven/base.py",
+                      "function": "capture",
+                      "inApp": false,
+                      "lineNo": 459,
+                      "module": "raven.base",
+                      "vars": {
+                        "'data'": null,
+                        "'date'": null,
+                        "'event_type'": "'raven.events.Message'",
+                        "'extra'": {
+                          "'loadavg'": [
+                            0.37255859375,
+                            0.5341796875,
+                            0.62939453125
+                          ],
+                          "'user'": "'dcramer'"
+                        },
+                        "'kwargs'": {
+                          "'level'": 20,
+                          "'message'": "'This is a test message generated using ``raven test``'"
+                        },
+                        "'self'": "<raven.base.Client object at 0x107bb8210>",
+                        "'stack'": true,
+                        "'tags'": null,
+                        "'time_spent'": null
+                      }
+                    },
+                    {
+                      "absPath": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/base.py",
+                      "colNo": null,
+                      "context": [
+                        [
+                          572,
+                          "        \"\"\""
+                        ],
+                        [
+                          573,
+                          "        Creates an event from ``message``."
+                        ],
+                        [
+                          574,
+                          ""
+                        ],
+                        [
+                          575,
+                          "        >>> client.captureMessage('My event just happened!')"
+                        ],
+                        [
+                          576,
+                          "        \"\"\""
+                        ],
+                        [
+                          577,
+                          "        return self.capture('raven.events.Message', message=message, **kwargs)"
+                        ],
+                        [
+                          578,
+                          ""
+                        ],
+                        [
+                          579,
+                          "    def captureException(self, exc_info=None, **kwargs):"
+                        ],
+                        [
+                          580,
+                          "        \"\"\""
+                        ],
+                        [
+                          581,
+                          "        Creates an event from an exception."
+                        ],
+                        [
+                          582,
+                          ""
+                        ]
+                      ],
+                      "errors": null,
+                      "filename": "raven/base.py",
+                      "function": "captureMessage",
+                      "inApp": false,
+                      "lineNo": 577,
+                      "module": "raven.base",
+                      "vars": {
+                        "'kwargs'": {
+                          "'data'": null,
+                          "'extra'": {
+                            "'loadavg'": [
+                              0.37255859375,
+                              0.5341796875,
+                              0.62939453125
+                            ],
+                            "'user'": "'dcramer'"
+                          },
+                          "'level'": 20,
+                          "'stack'": true,
+                          "'tags'": null
+                        },
+                        "'message'": "'This is a test message generated using ``raven test``'",
+                        "'self'": "<raven.base.Client object at 0x107bb8210>"
+                      }
+                    },
+                    {
+                      "absPath": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/scripts/runner.py",
+                      "colNo": null,
+                      "context": [
+                        [
+                          72,
+                          "        level=logging.INFO,"
+                        ],
+                        [
+                          73,
+                          "        stack=True,"
+                        ],
+                        [
+                          74,
+                          "        tags=options.get('tags', {}),"
+                        ],
+                        [
+                          75,
+                          "        extra={"
+                        ],
+                        [
+                          76,
+                          "            'user': get_uid(),"
+                        ],
+                        [
+                          77,
+                          "            'loadavg': get_loadavg(),"
+                        ],
+                        [
+                          78,
+                          "        },"
+                        ],
+                        [
+                          79,
+                          "    ))"
+                        ],
+                        [
+                          80,
+                          ""
+                        ],
+                        [
+                          81,
+                          "    if client.state.did_fail():"
+                        ],
+                        [
+                          82,
+                          "        print('error!')"
+                        ]
+                      ],
+                      "errors": null,
+                      "filename": "raven/scripts/runner.py",
+                      "function": "send_test_message",
+                      "inApp": false,
+                      "lineNo": 77,
+                      "module": "raven.scripts.runner",
+                      "vars": {
+                        "'client'": "<raven.base.Client object at 0x107bb8210>",
+                        "'data'": null,
+                        "'k'": "'secret_key'",
+                        "'options'": {
+                          "'data'": null,
+                          "'tags'": null
+                        }
+                      }
+                    },
+                    {
+                      "absPath": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/scripts/runner.py",
+                      "colNo": null,
+                      "context": [
+                        [
+                          107,
+                          "    print(\"Using DSN configuration:\")"
+                        ],
+                        [
+                          108,
+                          "    print(\" \", dsn)"
+                        ],
+                        [
+                          109,
+                          "    print()"
+                        ],
+                        [
+                          110,
+                          ""
+                        ],
+                        [
+                          111,
+                          "    client = Client(dsn, include_paths=['raven'])"
+                        ],
+                        [
+                          112,
+                          "    send_test_message(client, opts.__dict__)"
+                        ]
+                      ],
+                      "errors": null,
+                      "filename": "raven/scripts/runner.py",
+                      "function": "main",
+                      "inApp": false,
+                      "lineNo": 112,
+                      "module": "raven.scripts.runner",
+                      "vars": {
+                        "'args'": [
+                          "'test'",
+                          "'https://ebc35f33e151401f9deac549978bda11:f3403f81e12e4c24942d505f086b2cad@app.getsentry.com/1'"
+                        ],
+                        "'client'": "<raven.base.Client object at 0x107bb8210>",
+                        "'dsn'": "'https://ebc35f33e151401f9deac549978bda11:f3403f81e12e4c24942d505f086b2cad@app.getsentry.com/1'",
+                        "'opts'": "<Values at 0x107ba3b00: {'data': None, 'tags': None}>",
+                        "'parser'": "<optparse.OptionParser instance at 0x107ba3368>",
+                        "'root'": "<logging.Logger object at 0x107ba5b10>"
+                      }
+                    }
+                  ],
+                  "framesOmitted": null
+                },
+                "type": "stacktrace"
+              },
+              {
+                "data": {
+                  "cookies": null,
+                  "data": "{\"hello\": \"world\"}",
+                  "env": null,
+                  "fragment": "",
+                  "headers": {
+                    "Content-Type": "application/json",
+                    "Referer": "http://example.com",
+                    "User-Agent": "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36"
+                  },
+                  "method": "GET",
+                  "query": "foo=bar",
+                  "url": "http://example.com/foo"
+                },
+                "type": "request"
+              }
+            ],
+            "errors": [],
+            "eventID": "e18141e45c044cf8a06acc5425d883cc",
+            "groupID": 1,
+            "id": "1",
+            "message": "This is an example Python exception",
+            "packages": {
+              "my.package": "1.0.0"
+            },
+            "platform": "python",
+            "size": 6705,
+            "tags": {
+              "browser": "Chrome 28.0",
+              "device": "Other",
+              "level": "error",
+              "os": "Windows 8",
+              "sentry:release": "f8a9324ea70fa8918e6fa62b628fa6b587e986e9",
+              "url": "http://example.com/foo"
+            },
+            "timeSpent": null,
+            "user": {
+              "email": "foo@example.com",
+              "id": "1671",
+              "username": "getsentry"
+            }
+          }
+        ],
+        "headers": {
+          "allow": "GET, HEAD, OPTIONS",
+          "content-language": "en-us",
+          "content-type": "application/json",
+          "link": "<https://app.getsentry.com/api/0/groups/1/events/?&cursor=1440711320:0:1>; rel=\"previous\"; results=\"false\"; cursor=\"1440711320:0:1\", <https://app.getsentry.com/api/0/groups/1/events/?&cursor=1440711320:100:0>; rel=\"next\"; results=\"false\"; cursor=\"1440711320:100:0\"",
+          "vary": "Accept-Language, Cookie"
+        },
+        "is_json": true,
+        "reason": "OK",
+        "status": 200
+      }
+    }
+  ],
+  "text": [],
+  "title": null
+}
diff --git a/api-docs/cache/scenarios/ListProjectAggregates.json b/api-docs/cache/scenarios/ListProjectAggregates.json
index 77084e2786..165e5e1e01 100644
--- a/api-docs/cache/scenarios/ListProjectAggregates.json
+++ b/api-docs/cache/scenarios/ListProjectAggregates.json
@@ -15,12 +15,12 @@
             "assignedTo": null,
             "count": "1",
             "culprit": "javax.servlet.ServletException",
-            "firstSeen": "2015-08-27T18:36:06Z",
+            "firstSeen": "2015-08-27T21:35:22Z",
             "hasSeen": false,
             "id": "2",
             "isBookmarked": false,
             "isPublic": false,
-            "lastSeen": "2015-08-27T18:36:06Z",
+            "lastSeen": "2015-08-27T21:35:22Z",
             "level": "error",
             "logger": null,
             "numComments": 0,
@@ -32,105 +32,105 @@
             "shareId": "322e32",
             "stats": {
               "24h": [
-                [
-                  1440612000,
-                  15174
-                ],
-                [
-                  1440615600,
-                  13641
-                ],
-                [
-                  1440619200,
-                  14216
-                ],
                 [
                   1440622800,
-                  14121
+                  16931
                 ],
                 [
                   1440626400,
-                  12480
+                  16071
                 ],
                 [
                   1440630000,
-                  12812
+                  17336
                 ],
                 [
                   1440633600,
-                  12700
+                  15778
                 ],
                 [
                   1440637200,
-                  13711
+                  16584
                 ],
                 [
                   1440640800,
-                  15791
+                  20527
                 ],
                 [
                   1440644400,
-                  13457
+                  16878
                 ],
                 [
                   1440648000,
-                  12886
+                  17599
                 ],
                 [
                   1440651600,
-                  13985
+                  16795
                 ],
                 [
                   1440655200,
-                  12904
+                  16549
                 ],
                 [
                   1440658800,
-                  13676
+                  18442
                 ],
                 [
                   1440662400,
-                  14877
+                  18716
                 ],
                 [
                   1440666000,
-                  16004
+                  19117
                 ],
                 [
                   1440669600,
-                  13009
+                  15424
                 ],
                 [
                   1440673200,
-                  9560
+                  15186
                 ],
                 [
                   1440676800,
-                  8629
+                  13555
                 ],
                 [
                   1440680400,
-                  8909
+                  12937
                 ],
                 [
                   1440684000,
-                  8754
+                  13331
                 ],
                 [
                   1440687600,
-                  7340
+                  12648
                 ],
                 [
                   1440691200,
-                  8454
+                  11618
                 ],
                 [
                   1440694800,
-                  11259
+                  15175
                 ],
                 [
                   1440698400,
-                  9022
+                  12367
+                ],
+                [
+                  1440702000,
+                  3837
+                ],
+                [
+                  1440705600,
+                  4755
+                ],
+                [
+                  1440709200,
+                  5426
                 ]
               ]
             },
@@ -144,12 +144,12 @@
             "assignedTo": null,
             "count": "1",
             "culprit": "raven.scripts.runner in main",
-            "firstSeen": "2015-08-27T18:36:04Z",
+            "firstSeen": "2015-08-27T21:35:20Z",
             "hasSeen": false,
             "id": "1",
             "isBookmarked": false,
             "isPublic": false,
-            "lastSeen": "2015-08-27T18:36:04Z",
+            "lastSeen": "2015-08-27T21:35:20Z",
             "level": "error",
             "logger": null,
             "numComments": 0,
@@ -161,105 +161,105 @@
             "shareId": "322e31",
             "stats": {
               "24h": [
-                [
-                  1440612000,
-                  14059
-                ],
-                [
-                  1440615600,
-                  15258
-                ],
-                [
-                  1440619200,
-                  15693
-                ],
                 [
                   1440622800,
-                  14020
+                  17440
                 ],
                 [
                   1440626400,
-                  14830
+                  18271
                 ],
                 [
                   1440630000,
-                  15685
+                  18651
                 ],
                 [
                   1440633600,
-                  12746
+                  17445
                 ],
                 [
                   1440637200,
-                  12680
+                  16918
                 ],
                 [
                   1440640800,
-                  14078
+                  18440
                 ],
                 [
                   1440644400,
-                  15456
+                  19694
                 ],
                 [
                   1440648000,
-                  14726
+                  18588
                 ],
                 [
                   1440651600,
-                  11834
+                  16728
                 ],
                 [
                   1440655200,
-                  13315
+                  17789
                 ],
                 [
                   1440658800,
-                  13340
+                  17209
                 ],
                 [
                   1440662400,
-                  12514
+                  16464
                 ],
                 [
                   1440666000,
-                  13276
+                  17661
                 ],
                 [
                   1440669600,
-                  11594
+                  16671
                 ],
                 [
                   1440673200,
-                  9433
+                  13339
                 ],
                 [
                   1440676800,
-                  7218
+                  11288
                 ],
                 [
                   1440680400,
-                  7804
+                  11267
                 ],
                 [
                   1440684000,
-                  10991
+                  14972
                 ],
                 [
                   1440687600,
-                  8282
+                  12872
                 ],
                 [
                   1440691200,
-                  8321
+                  12839
                 ],
                 [
                   1440694800,
-                  10036
+                  12950
                 ],
                 [
                   1440698400,
-                  10478
+                  13551
+                ],
+                [
+                  1440702000,
+                  4012
+                ],
+                [
+                  1440705600,
+                  4713
+                ],
+                [
+                  1440709200,
+                  4777
                 ]
               ]
             },
@@ -273,7 +273,7 @@
           "allow": "GET, PUT, DELETE, HEAD, OPTIONS",
           "content-language": "en-us",
           "content-type": "application/json",
-          "link": "<https://app.getsentry.com/api/0/projects/the-interstellar-jurisdiction/pump-station/groups/?statsPeriod=24h&cursor=1440700566:0:1>; rel=\"previous\"; results=\"false\"; cursor=\"1440700566:0:1\", <https://app.getsentry.com/api/0/projects/the-interstellar-jurisdiction/pump-station/groups/?statsPeriod=24h&cursor=1440700564:0:0>; rel=\"next\"; results=\"false\"; cursor=\"1440700564:0:0\"",
+          "link": "<https://app.getsentry.com/api/0/projects/the-interstellar-jurisdiction/pump-station/groups/?statsPeriod=24h&cursor=1440711322:0:1>; rel=\"previous\"; results=\"false\"; cursor=\"1440711322:0:1\", <https://app.getsentry.com/api/0/projects/the-interstellar-jurisdiction/pump-station/groups/?statsPeriod=24h&cursor=1440711320:0:0>; rel=\"next\"; results=\"false\"; cursor=\"1440711320:0:0\"",
           "vary": "Accept-Language, Cookie"
         },
         "is_json": true,
diff --git a/api-docs/cache/scenarios/ListProjectAvailableSamples.json b/api-docs/cache/scenarios/ListProjectAvailableSamples.json
index b6b0dee43d..2a33d87490 100644
--- a/api-docs/cache/scenarios/ListProjectAvailableSamples.json
+++ b/api-docs/cache/scenarios/ListProjectAvailableSamples.json
@@ -25,7 +25,7 @@
                 "foo": "bar"
               }
             },
-            "dateCreated": "2015-08-27T18:36:06Z",
+            "dateCreated": "2015-08-27T21:35:22Z",
             "entries": [
               {
                 "data": {
@@ -445,7 +445,7 @@
               }
             ],
             "errors": [],
-            "eventID": "80dd9b7ab5fe41c98f960cfce10dbd42",
+            "eventID": "bff747799f314d3fa310a0b25a95dc49",
             "groupID": 2,
             "id": "2",
             "message": "This is an example Java exception",
@@ -459,7 +459,7 @@
               "device": "Other",
               "level": "error",
               "os": "Windows 8",
-              "sentry:release": "d1f60347554a5d9912804637a1eb2fa97fedff75",
+              "sentry:release": "f8a9324ea70fa8918e6fa62b628fa6b587e986e9",
               "url": "http://example.com/foo"
             },
             "timeSpent": null,
@@ -484,7 +484,7 @@
                 "foo": "bar"
               }
             },
-            "dateCreated": "2015-08-27T18:36:04Z",
+            "dateCreated": "2015-08-27T21:35:20Z",
             "entries": [
               {
                 "data": {
@@ -913,7 +913,7 @@
               }
             ],
             "errors": [],
-            "eventID": "9c98100ee1464abdad072045d5ff3d32",
+            "eventID": "e18141e45c044cf8a06acc5425d883cc",
             "groupID": 1,
             "id": "1",
             "message": "This is an example Python exception",
@@ -927,7 +927,7 @@
               "device": "Other",
               "level": "error",
               "os": "Windows 8",
-              "sentry:release": "d1f60347554a5d9912804637a1eb2fa97fedff75",
+              "sentry:release": "f8a9324ea70fa8918e6fa62b628fa6b587e986e9",
               "url": "http://example.com/foo"
             },
             "timeSpent": null,
@@ -942,7 +942,7 @@
           "allow": "GET, HEAD, OPTIONS",
           "content-language": "en-us",
           "content-type": "application/json",
-          "link": "<https://app.getsentry.com/api/0/projects/the-interstellar-jurisdiction/pump-station/events/?&cursor=1440700566:0:1>; rel=\"previous\"; results=\"false\"; cursor=\"1440700566:0:1\", <https://app.getsentry.com/api/0/projects/the-interstellar-jurisdiction/pump-station/events/?&cursor=1440700564:0:0>; rel=\"next\"; results=\"false\"; cursor=\"1440700564:0:0\"",
+          "link": "<https://app.getsentry.com/api/0/projects/the-interstellar-jurisdiction/pump-station/events/?&cursor=1440711322:0:1>; rel=\"previous\"; results=\"false\"; cursor=\"1440711322:0:1\", <https://app.getsentry.com/api/0/projects/the-interstellar-jurisdiction/pump-station/events/?&cursor=1440711320:0:0>; rel=\"next\"; results=\"false\"; cursor=\"1440711320:0:0\"",
           "vary": "Accept-Language, Cookie"
         },
         "is_json": true,
diff --git a/api-docs/cache/scenarios/ListTagDetails.json b/api-docs/cache/scenarios/ListTagDetails.json
new file mode 100644
index 0000000000..e2f7a3ebaf
--- /dev/null
+++ b/api-docs/cache/scenarios/ListTagDetails.json
@@ -0,0 +1,29 @@
+{
+  "ident": "ListTagDetails",
+  "requests": [
+    {
+      "request": {
+        "data": null,
+        "headers": {},
+        "method": "GET",
+        "path": "/api/0/groups/1/tags/browser/"
+      },
+      "response": {
+        "data": {
+          "detail": ""
+        },
+        "headers": {
+          "allow": "GET, HEAD, OPTIONS",
+          "content-language": "en-us",
+          "content-type": "application/json",
+          "vary": "Accept-Language, Cookie"
+        },
+        "is_json": true,
+        "reason": "NOT FOUND",
+        "status": 404
+      }
+    }
+  ],
+  "text": [],
+  "title": null
+}
diff --git a/api-docs/cache/scenarios/RetrieveAggregate.json b/api-docs/cache/scenarios/RetrieveAggregate.json
index d7d235c9dd..3d9fd1c3ef 100644
--- a/api-docs/cache/scenarios/RetrieveAggregate.json
+++ b/api-docs/cache/scenarios/RetrieveAggregate.json
@@ -13,7 +13,7 @@
           "activity": [
             {
               "data": {},
-              "dateCreated": "2015-08-27T18:36:04Z",
+              "dateCreated": "2015-08-27T21:35:20Z",
               "id": "None",
               "type": "first_seen",
               "user": null
@@ -25,24 +25,24 @@
           "culprit": "raven.scripts.runner in main",
           "firstRelease": {
             "data": {},
-            "dateCreated": "2015-08-27T18:36:04.555Z",
+            "dateCreated": "2015-08-27T21:35:20.679Z",
             "dateReleased": null,
             "dateStarted": null,
             "firstEvent": null,
             "lastEvent": null,
             "newGroups": 0,
             "ref": null,
-            "shortVersion": "d1f60347554a",
+            "shortVersion": "f8a9324ea70f",
             "url": null,
-            "version": "d1f60347554a5d9912804637a1eb2fa97fedff75"
+            "version": "f8a9324ea70fa8918e6fa62b628fa6b587e986e9"
           },
-          "firstSeen": "2015-08-27T18:36:04Z",
+          "firstSeen": "2015-08-27T21:35:20Z",
           "hasSeen": false,
           "id": "1",
           "isBookmarked": false,
           "isPublic": false,
           "lastRelease": null,
-          "lastSeen": "2015-08-27T18:36:04Z",
+          "lastSeen": "2015-08-27T21:35:20Z",
           "level": "error",
           "logger": null,
           "numComments": 0,
@@ -56,231 +56,231 @@
           "shareId": "322e31",
           "stats": {
             "24h": [
-              [
-                1440612000,
-                14059
-              ],
-              [
-                1440615600,
-                15258
-              ],
-              [
-                1440619200,
-                15693
-              ],
               [
                 1440622800,
-                14020
+                17440
               ],
               [
                 1440626400,
-                14830
+                18271
               ],
               [
                 1440630000,
-                15685
+                18651
               ],
               [
                 1440633600,
-                12746
+                17445
               ],
               [
                 1440637200,
-                12680
+                16918
               ],
               [
                 1440640800,
-                14078
+                18440
               ],
               [
                 1440644400,
-                15456
+                19694
               ],
               [
                 1440648000,
-                14726
+                18588
               ],
               [
                 1440651600,
-                11834
+                16728
               ],
               [
                 1440655200,
-                13315
+                17789
               ],
               [
                 1440658800,
-                13340
+                17209
               ],
               [
                 1440662400,
-                12514
+                16464
               ],
               [
                 1440666000,
-                13276
+                17661
               ],
               [
                 1440669600,
-                11594
+                16671
               ],
               [
                 1440673200,
-                9433
+                13339
               ],
               [
                 1440676800,
-                7218
+                11288
               ],
               [
                 1440680400,
-                7804
+                11267
               ],
               [
                 1440684000,
-                10991
+                14972
               ],
               [
                 1440687600,
-                8282
+                12872
               ],
               [
                 1440691200,
-                8321
+                12839
               ],
               [
                 1440694800,
-                10036
+                12950
               ],
               [
                 1440698400,
-                10478
+                13551
+              ],
+              [
+                1440702000,
+                4012
+              ],
+              [
+                1440705600,
+                4713
+              ],
+              [
+                1440709200,
+                4777
               ]
             ],
             "30d": [
               [
                 1438041600,
-                1000423
+                1009198
               ],
               [
                 1438128000,
-                1222892
+                1315161
               ],
               [
                 1438214400,
-                1227116
+                1318828
               ],
               [
                 1438300800,
-                1214455
+                1309614
               ],
               [
                 1438387200,
-                1202192
+                1293414
               ],
               [
                 1438473600,
-                1205598
+                1291102
               ],
               [
                 1438560000,
-                1216235
+                1309184
               ],
               [
                 1438646400,
-                1223437
+                1319267
               ],
               [
                 1438732800,
-                1225518
+                1318995
               ],
               [
                 1438819200,
-                1212312
+                1311009
               ],
               [
                 1438905600,
-                1206532
+                1302101
               ],
               [
                 1438992000,
-                1214842
+                1309681
               ],
               [
                 1439078400,
-                1234110
+                1326142
               ],
               [
                 1439164800,
-                1226719
+                1325871
               ],
               [
                 1439251200,
-                1243454
+                1335182
               ],
               [
                 1439337600,
-                1208460
+                1300614
               ],
               [
                 1439424000,
-                1231213
+                1319817
               ],
               [
                 1439510400,
-                1206341
+                1295023
               ],
               [
                 1439596800,
-                1208806
+                1304764
               ],
               [
                 1439683200,
-                1199977
+                1290113
               ],
               [
                 1439769600,
-                1208451
+                1309869
               ],
               [
                 1439856000,
-                1215416
+                1312176
               ],
               [
                 1439942400,
-                1195448
+                1285837
               ],
               [
                 1440028800,
-                1160811
+                1251091
               ],
               [
                 1440115200,
-                915687
+                1010243
               ],
               [
                 1440201600,
-                789458
+                881779
               ],
               [
                 1440288000,
-                769284
+                860785
               ],
               [
                 1440374400,
-                723308
+                819296
               ],
               [
                 1440460800,
-                608285
+                695870
               ],
               [
                 1440547200,
-                428953
+                520899
               ],
               [
                 1440633600,
-                218122
+                310187
               ]
             ]
           },
diff --git a/api-docs/cache/scenarios/RetrieveEventForProject.json b/api-docs/cache/scenarios/RetrieveEventForProject.json
new file mode 100644
index 0000000000..fa23d646be
--- /dev/null
+++ b/api-docs/cache/scenarios/RetrieveEventForProject.json
@@ -0,0 +1,496 @@
+{
+  "ident": "RetrieveEventForProject",
+  "requests": [
+    {
+      "request": {
+        "data": null,
+        "headers": {},
+        "method": "GET",
+        "path": "/api/0/projects/the-interstellar-jurisdiction/pump-station/events/e18141e45c044cf8a06acc5425d883cc/"
+      },
+      "response": {
+        "data": {
+          "context": {
+            "emptyList": [],
+            "emptyMap": {},
+            "results": [
+              1,
+              2,
+              3,
+              4,
+              5
+            ],
+            "session": {
+              "foo": "bar"
+            }
+          },
+          "dateCreated": "2015-08-27T21:35:20Z",
+          "entries": [
+            {
+              "data": {
+                "context": [
+                  [
+                    11,
+                    "{% endif %}\n"
+                  ],
+                  [
+                    12,
+                    "<script src=\"{% static 'debug_toolbar/js/toolbar.js' %}\"></script>\n"
+                  ],
+                  [
+                    13,
+                    "<div id=\"djDebug\" hidden=\"hidden\" dir=\"ltr\"\n"
+                  ],
+                  [
+                    14,
+                    "     data-store-id=\"{{ toolbar.store_id }}\" data-render-panel-url=\"{% url 'djdt:render_panel' %}\"\n"
+                  ],
+                  [
+                    15,
+                    "     {{ toolbar.config.ROOT_TAG_EXTRA_ATTRS|safe }}>\n"
+                  ],
+                  [
+                    16,
+                    "\t<div hidden=\"hidden\" id=\"djDebugToolbar\">\n"
+                  ],
+                  [
+                    17,
+                    "\t\t<ul id=\"djDebugPanelList\">\n"
+                  ]
+                ],
+                "filename": "debug_toolbar/base.html",
+                "lineNo": 14
+              },
+              "type": "template"
+            },
+            {
+              "data": {
+                "frames": [
+                  {
+                    "absPath": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/base.py",
+                    "colNo": null,
+                    "context": [
+                      [
+                        298,
+                        "                frames = stack"
+                      ],
+                      [
+                        299,
+                        ""
+                      ],
+                      [
+                        300,
+                        "            data.update({"
+                      ],
+                      [
+                        301,
+                        "                'sentry.interfaces.Stacktrace': {"
+                      ],
+                      [
+                        302,
+                        "                    'frames': get_stack_info(frames,"
+                      ],
+                      [
+                        303,
+                        "                        transformer=self.transform)"
+                      ],
+                      [
+                        304,
+                        "                },"
+                      ],
+                      [
+                        305,
+                        "            })"
+                      ],
+                      [
+                        306,
+                        ""
+                      ],
+                      [
+                        307,
+                        "        if 'sentry.interfaces.Stacktrace' in data:"
+                      ],
+                      [
+                        308,
+                        "            if self.include_paths:"
+                      ]
+                    ],
+                    "errors": null,
+                    "filename": "raven/base.py",
+                    "function": "build_msg",
+                    "inApp": false,
+                    "lineNo": 303,
+                    "module": "raven.base",
+                    "vars": {
+                      "'culprit'": null,
+                      "'data'": {
+                        "'message'": "u'This is a test message generated using ``raven test``'",
+                        "'sentry.interfaces.Message'": {
+                          "'message'": "u'This is a test message generated using ``raven test``'",
+                          "'params'": []
+                        }
+                      },
+                      "'date'": "datetime.datetime(2013, 8, 13, 3, 8, 24, 880386)",
+                      "'event_id'": "'54a322436e1b47b88e239b78998ae742'",
+                      "'event_type'": "'raven.events.Message'",
+                      "'extra'": {
+                        "'loadavg'": [
+                          0.37255859375,
+                          0.5341796875,
+                          0.62939453125
+                        ],
+                        "'user'": "'dcramer'"
+                      },
+                      "'frames'": "<generator object iter_stack_frames at 0x107bcc3c0>",
+                      "'handler'": "<raven.events.Message object at 0x107bd0890>",
+                      "'k'": "'sentry.interfaces.Message'",
+                      "'kwargs'": {
+                        "'level'": 20,
+                        "'message'": "'This is a test message generated using ``raven test``'"
+                      },
+                      "'public_key'": null,
+                      "'result'": {
+                        "'message'": "u'This is a test message generated using ``raven test``'",
+                        "'sentry.interfaces.Message'": {
+                          "'message'": "u'This is a test message generated using ``raven test``'",
+                          "'params'": []
+                        }
+                      },
+                      "'self'": "<raven.base.Client object at 0x107bb8210>",
+                      "'stack'": true,
+                      "'tags'": null,
+                      "'time_spent'": null,
+                      "'v'": {
+                        "'message'": "u'This is a test message generated using ``raven test``'",
+                        "'params'": []
+                      }
+                    }
+                  },
+                  {
+                    "absPath": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/base.py",
+                    "colNo": null,
+                    "context": [
+                      [
+                        454,
+                        "        if not self.is_enabled():"
+                      ],
+                      [
+                        455,
+                        "            return"
+                      ],
+                      [
+                        456,
+                        ""
+                      ],
+                      [
+                        457,
+                        "        data = self.build_msg("
+                      ],
+                      [
+                        458,
+                        "            event_type, data, date, time_spent, extra, stack, tags=tags,"
+                      ],
+                      [
+                        459,
+                        "            **kwargs)"
+                      ],
+                      [
+                        460,
+                        ""
+                      ],
+                      [
+                        461,
+                        "        self.send(**data)"
+                      ],
+                      [
+                        462,
+                        ""
+                      ],
+                      [
+                        463,
+                        "        return (data.get('event_id'),)"
+                      ],
+                      [
+                        464,
+                        ""
+                      ]
+                    ],
+                    "errors": null,
+                    "filename": "raven/base.py",
+                    "function": "capture",
+                    "inApp": false,
+                    "lineNo": 459,
+                    "module": "raven.base",
+                    "vars": {
+                      "'data'": null,
+                      "'date'": null,
+                      "'event_type'": "'raven.events.Message'",
+                      "'extra'": {
+                        "'loadavg'": [
+                          0.37255859375,
+                          0.5341796875,
+                          0.62939453125
+                        ],
+                        "'user'": "'dcramer'"
+                      },
+                      "'kwargs'": {
+                        "'level'": 20,
+                        "'message'": "'This is a test message generated using ``raven test``'"
+                      },
+                      "'self'": "<raven.base.Client object at 0x107bb8210>",
+                      "'stack'": true,
+                      "'tags'": null,
+                      "'time_spent'": null
+                    }
+                  },
+                  {
+                    "absPath": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/base.py",
+                    "colNo": null,
+                    "context": [
+                      [
+                        572,
+                        "        \"\"\""
+                      ],
+                      [
+                        573,
+                        "        Creates an event from ``message``."
+                      ],
+                      [
+                        574,
+                        ""
+                      ],
+                      [
+                        575,
+                        "        >>> client.captureMessage('My event just happened!')"
+                      ],
+                      [
+                        576,
+                        "        \"\"\""
+                      ],
+                      [
+                        577,
+                        "        return self.capture('raven.events.Message', message=message, **kwargs)"
+                      ],
+                      [
+                        578,
+                        ""
+                      ],
+                      [
+                        579,
+                        "    def captureException(self, exc_info=None, **kwargs):"
+                      ],
+                      [
+                        580,
+                        "        \"\"\""
+                      ],
+                      [
+                        581,
+                        "        Creates an event from an exception."
+                      ],
+                      [
+                        582,
+                        ""
+                      ]
+                    ],
+                    "errors": null,
+                    "filename": "raven/base.py",
+                    "function": "captureMessage",
+                    "inApp": false,
+                    "lineNo": 577,
+                    "module": "raven.base",
+                    "vars": {
+                      "'kwargs'": {
+                        "'data'": null,
+                        "'extra'": {
+                          "'loadavg'": [
+                            0.37255859375,
+                            0.5341796875,
+                            0.62939453125
+                          ],
+                          "'user'": "'dcramer'"
+                        },
+                        "'level'": 20,
+                        "'stack'": true,
+                        "'tags'": null
+                      },
+                      "'message'": "'This is a test message generated using ``raven test``'",
+                      "'self'": "<raven.base.Client object at 0x107bb8210>"
+                    }
+                  },
+                  {
+                    "absPath": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/scripts/runner.py",
+                    "colNo": null,
+                    "context": [
+                      [
+                        72,
+                        "        level=logging.INFO,"
+                      ],
+                      [
+                        73,
+                        "        stack=True,"
+                      ],
+                      [
+                        74,
+                        "        tags=options.get('tags', {}),"
+                      ],
+                      [
+                        75,
+                        "        extra={"
+                      ],
+                      [
+                        76,
+                        "            'user': get_uid(),"
+                      ],
+                      [
+                        77,
+                        "            'loadavg': get_loadavg(),"
+                      ],
+                      [
+                        78,
+                        "        },"
+                      ],
+                      [
+                        79,
+                        "    ))"
+                      ],
+                      [
+                        80,
+                        ""
+                      ],
+                      [
+                        81,
+                        "    if client.state.did_fail():"
+                      ],
+                      [
+                        82,
+                        "        print('error!')"
+                      ]
+                    ],
+                    "errors": null,
+                    "filename": "raven/scripts/runner.py",
+                    "function": "send_test_message",
+                    "inApp": false,
+                    "lineNo": 77,
+                    "module": "raven.scripts.runner",
+                    "vars": {
+                      "'client'": "<raven.base.Client object at 0x107bb8210>",
+                      "'data'": null,
+                      "'k'": "'secret_key'",
+                      "'options'": {
+                        "'data'": null,
+                        "'tags'": null
+                      }
+                    }
+                  },
+                  {
+                    "absPath": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/scripts/runner.py",
+                    "colNo": null,
+                    "context": [
+                      [
+                        107,
+                        "    print(\"Using DSN configuration:\")"
+                      ],
+                      [
+                        108,
+                        "    print(\" \", dsn)"
+                      ],
+                      [
+                        109,
+                        "    print()"
+                      ],
+                      [
+                        110,
+                        ""
+                      ],
+                      [
+                        111,
+                        "    client = Client(dsn, include_paths=['raven'])"
+                      ],
+                      [
+                        112,
+                        "    send_test_message(client, opts.__dict__)"
+                      ]
+                    ],
+                    "errors": null,
+                    "filename": "raven/scripts/runner.py",
+                    "function": "main",
+                    "inApp": false,
+                    "lineNo": 112,
+                    "module": "raven.scripts.runner",
+                    "vars": {
+                      "'args'": [
+                        "'test'",
+                        "'https://ebc35f33e151401f9deac549978bda11:f3403f81e12e4c24942d505f086b2cad@app.getsentry.com/1'"
+                      ],
+                      "'client'": "<raven.base.Client object at 0x107bb8210>",
+                      "'dsn'": "'https://ebc35f33e151401f9deac549978bda11:f3403f81e12e4c24942d505f086b2cad@app.getsentry.com/1'",
+                      "'opts'": "<Values at 0x107ba3b00: {'data': None, 'tags': None}>",
+                      "'parser'": "<optparse.OptionParser instance at 0x107ba3368>",
+                      "'root'": "<logging.Logger object at 0x107ba5b10>"
+                    }
+                  }
+                ],
+                "framesOmitted": null
+              },
+              "type": "stacktrace"
+            },
+            {
+              "data": {
+                "cookies": null,
+                "data": "{\"hello\": \"world\"}",
+                "env": null,
+                "fragment": "",
+                "headers": {
+                  "Content-Type": "application/json",
+                  "Referer": "http://example.com",
+                  "User-Agent": "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36"
+                },
+                "method": "GET",
+                "query": "foo=bar",
+                "url": "http://example.com/foo"
+              },
+              "type": "request"
+            }
+          ],
+          "errors": [],
+          "eventID": "e18141e45c044cf8a06acc5425d883cc",
+          "groupID": 1,
+          "id": "1",
+          "message": "This is an example Python exception",
+          "nextEventID": null,
+          "packages": {
+            "my.package": "1.0.0"
+          },
+          "platform": "python",
+          "previousEventID": null,
+          "size": 6705,
+          "tags": {
+            "browser": "Chrome 28.0",
+            "device": "Other",
+            "level": "error",
+            "os": "Windows 8",
+            "sentry:release": "f8a9324ea70fa8918e6fa62b628fa6b587e986e9",
+            "url": "http://example.com/foo"
+          },
+          "timeSpent": null,
+          "user": {
+            "email": "foo@example.com",
+            "id": "1671",
+            "username": "getsentry"
+          }
+        },
+        "headers": {
+          "allow": "GET, HEAD, OPTIONS",
+          "content-language": "en-us",
+          "content-type": "application/json",
+          "vary": "Accept-Language, Cookie"
+        },
+        "is_json": true,
+        "reason": "OK",
+        "status": 200
+      }
+    }
+  ],
+  "text": [],
+  "title": null
+}
diff --git a/api-docs/cache/scenarios/UpdateAggregate.json b/api-docs/cache/scenarios/UpdateAggregate.json
index 94720195fb..d73a46b8bc 100644
--- a/api-docs/cache/scenarios/UpdateAggregate.json
+++ b/api-docs/cache/scenarios/UpdateAggregate.json
@@ -18,12 +18,12 @@
           "assignedTo": null,
           "count": "1",
           "culprit": "raven.scripts.runner in main",
-          "firstSeen": "2015-08-27T18:36:04Z",
+          "firstSeen": "2015-08-27T21:35:20Z",
           "hasSeen": false,
           "id": "1",
           "isBookmarked": false,
           "isPublic": false,
-          "lastSeen": "2015-08-27T18:36:04Z",
+          "lastSeen": "2015-08-27T21:35:20Z",
           "level": "error",
           "logger": null,
           "numComments": 0,
diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index 7350802e80..beaf95b751 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -134,6 +134,7 @@ class GroupDetailsEndpoint(GroupEndpoint):
         user reports) as well as the summarized event data.
 
         :pparam int group_id: the ID of the group to retrieve.
+        :auth: required
         """
         # TODO(dcramer): handle unauthenticated/public response
         data = serialize(group, request.user)
@@ -213,17 +214,22 @@ class GroupDetailsEndpoint(GroupEndpoint):
         ```````````````````
 
         Updates an individual aggregate's attributes.  Only the attributes
-        submitted are modified.  The following attributes are supported
-        for all keys:
+        submitted are modified.
 
-        - ``status``: ``"resolved"``, ``"unresolved"``, ``"muted"``
-        - ``assignedTo``: user id
-
-        In case the API call is invoked in a user context, these
-        attributes can also be modified:
-
-        - ``hasSeen``: `true`, `false`
-        - ``isBookmarked``: `true`, `false`
+        :pparam int group_id: the ID of the group to retrieve.
+        :param string status: the new status for the groups.  Valid values
+                              are ``"resolved"``, ``"unresolved"`` and
+                              ``"muted"``.
+        :param int assignedTo: the user ID of the user that should be
+                               assigned to this group.
+        :param boolean hasSeen: in case this API call is invoked with a user
+                                context this allows changing of the flag
+                                that indicates if the user has seen the
+                                event.
+        :param boolean isBookmarked: in case this API call is invoked with a
+                                     user context this allows changing of
+                                     the bookmark flag.
+        :auth: required
         """
         serializer = GroupSerializer(data=request.DATA, partial=True)
         if not serializer.is_valid():
@@ -354,6 +360,7 @@ class GroupDetailsEndpoint(GroupEndpoint):
         Removes an individual aggregate.
 
         :pparam int group_id: the ID of the group to delete.
+        :auth: required
         """
         from sentry.tasks.deletion import delete_group
 
diff --git a/src/sentry/api/endpoints/group_events.py b/src/sentry/api/endpoints/group_events.py
index e2df136625..1067c6a686 100644
--- a/src/sentry/api/endpoints/group_events.py
+++ b/src/sentry/api/endpoints/group_events.py
@@ -4,18 +4,32 @@ from sentry.api.base import DocSection
 from sentry.api.bases.group import GroupEndpoint
 from sentry.api.serializers import serialize
 from sentry.api.paginator import DateTimePaginator
-from sentry.models import Event
+from sentry.models import Event, Group
+from sentry.utils.apidocs import scenario, attach_scenarios
+
+
+@scenario('ListAvailableSamples')
+def list_available_samples_scenario(runner):
+    group = Group.objects.filter(project=runner.default_project).first()
+    runner.request(
+        method='GET',
+        path='/groups/%s/events/' % group.id
+    )
 
 
 class GroupEventsEndpoint(GroupEndpoint):
     doc_section = DocSection.EVENTS
 
+    @attach_scenarios([list_available_samples_scenario])
     def get(self, request, group):
         """
         List Available Samples
         ``````````````````````
 
         This endpoint lists an aggregate's available samples.
+
+        :pparam int group_id: the ID of the group to retrieve.
+        :auth: required
         """
 
         events = Event.objects.filter(
diff --git a/src/sentry/api/endpoints/group_tagkey_details.py b/src/sentry/api/endpoints/group_tagkey_details.py
index 6b96a3fccc..051afe6232 100644
--- a/src/sentry/api/endpoints/group_tagkey_details.py
+++ b/src/sentry/api/endpoints/group_tagkey_details.py
@@ -6,18 +6,35 @@ from sentry.api.base import DocSection
 from sentry.api.bases.group import GroupEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.serializers import serialize
-from sentry.models import GroupTagValue, TagKey, TagKeyStatus
+from sentry.models import GroupTagValue, TagKey, TagKeyStatus, Group
+from sentry.utils.apidocs import scenario
+
+
+@scenario('ListTagDetails')
+def list_tag_details_scenario(runner):
+    group = Group.objects.filter(project=runner.default_project).first()
+    runner.request(
+        method='GET',
+        path='/groups/%s/tags/%s/' % (
+            group.id, 'browser'),
+    )
 
 
 class GroupTagKeyDetailsEndpoint(GroupEndpoint):
     doc_section = DocSection.EVENTS
 
+    # XXX: this scenario does not work for some inexplicable reasons
+    # @attach_scenarios([list_tag_details_scenario])
     def get(self, request, group, key):
         """
         List Tag Details
         ````````````````
 
         Returns a list of details about the given tag key.
+
+        :pparam int group_id: the ID of the group to retrieve.
+        :pparam string key: the tag key to look the values up for.
+        :auth: required
         """
         # XXX(dcramer): kill sentry prefix for internal reserved tags
         if key in ('release', 'user', 'filename', 'function'):
diff --git a/src/sentry/api/endpoints/group_tagkey_values.py b/src/sentry/api/endpoints/group_tagkey_values.py
index cc5336f996..46e7298cbb 100644
--- a/src/sentry/api/endpoints/group_tagkey_values.py
+++ b/src/sentry/api/endpoints/group_tagkey_values.py
@@ -32,6 +32,7 @@ class GroupTagKeyValuesEndpoint(GroupEndpoint):
 
         :pparam int group_id: the ID of the group to retrieve.
         :pparam string key: the tag key to look the values up for.
+        :auth: required
         """
         # XXX(dcramer): kill sentry prefix for internal reserved tags
         if key in ('release', 'user', 'filename', 'function'):
diff --git a/src/sentry/api/endpoints/project_event_details.py b/src/sentry/api/endpoints/project_event_details.py
index 94ed96b37d..e911f946b2 100644
--- a/src/sentry/api/endpoints/project_event_details.py
+++ b/src/sentry/api/endpoints/project_event_details.py
@@ -6,22 +6,45 @@ from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import serialize
 from sentry.models import Event
+from sentry.utils.apidocs import scenario, attach_scenarios
+
+
+@scenario('RetrieveEventForProject')
+def retrieve_event_for_project_scenario(runner):
+    runner.request(
+        method='GET',
+        path='/projects/%s/%s/events/%s/' % (
+            runner.org.slug, runner.default_project.slug,
+            runner.default_event.event_id)
+    )
 
 
 class ProjectEventDetailsEndpoint(ProjectEndpoint):
     doc_section = DocSection.EVENTS
 
+    @attach_scenarios([retrieve_event_for_project_scenario])
     def get(self, request, project, event_id):
         """
         Retrieve an Event for a Project
         ```````````````````````````````
 
         Return details on an individual event.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          event belongs to.
+        :pparam string project_slug: the slug of the project the event
+                                     belongs to.
+        :pparam string event_id: the hexadecimal ID of the event to
+                                 retrieve (as reported by the raven client).
+        :auth: required
         """
-        event = Event.objects.get(
-            event_id=event_id,
-            project=project,
-        )
+        try:
+            event = Event.objects.get(
+                event_id=event_id,
+                project=project,
+            )
+        except Event.DoesNotExist:
+            return Response({'detail': 'Event not found'}, status=404)
 
         Event.objects.bind_nodes([event], 'data')
 
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 5693249842..aef0618357 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -115,6 +115,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
                                           groups belong to.
         :pparam string project_slug: the slug of the project the groups
                                      belong to.
+        :auth: required
         """
         query_kwargs = {
             'project': project,
@@ -454,6 +455,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
                                           groups belong to.
         :pparam string project_slug: the slug of the project the groups
                                      belong to.
+        :auth: required
         """
         group_ids = request.GET.getlist('id')
         if group_ids:
diff --git a/src/sentry/utils/apidocs.py b/src/sentry/utils/apidocs.py
index 7e47d4e1fb..599efbc2b2 100644
--- a/src/sentry/utils/apidocs.py
+++ b/src/sentry/utils/apidocs.py
@@ -355,7 +355,7 @@ class Runner(object):
 
     @property
     def default_event(self):
-        return self.teams[0]['projects'][0]['events']
+        return self.teams[0]['projects'][0]['events'][0]
 
     @contextmanager
     def isolated_project(self, project_name):
