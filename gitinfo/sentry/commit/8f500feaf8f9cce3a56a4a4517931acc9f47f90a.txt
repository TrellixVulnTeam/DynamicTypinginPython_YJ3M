commit 8f500feaf8f9cce3a56a4a4517931acc9f47f90a
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Mon Jul 1 12:25:09 2019 +0200

    fix: Allow event id as load balancing key (#13861)

diff --git a/src/sentry/lang/native/processing.py b/src/sentry/lang/native/processing.py
index 2e83bcadf1..7e2bcb931f 100644
--- a/src/sentry/lang/native/processing.py
+++ b/src/sentry/lang/native/processing.py
@@ -27,10 +27,6 @@ IMAGE_STATUS_FIELDS = frozenset((
 ))
 
 
-def task_id_cache_key_for_event(data):
-    return u'symbolicator:{1}:{0}'.format(data['project'], data['event_id'])
-
-
 def _merge_frame(new_frame, symbolicated):
     if symbolicated.get('function'):
         raw_func = trim(symbolicated['function'], 256)
@@ -217,11 +213,9 @@ def process_minidump(data):
         logger.error("Missing minidump for minidump event")
         return
 
-    task_id_cache_key = task_id_cache_key_for_event(data)
-
     symbolicator = Symbolicator(
         project=project,
-        task_id_cache_key=task_id_cache_key
+        event_id=data['event_id']
     )
 
     response = symbolicator.process_minidump(make_buffered_slice_reader(minidump.data, None))
@@ -246,11 +240,10 @@ def _handles_frame(data, frame):
 
 def process_payload(data):
     project = Project.objects.get_from_cache(id=data['project'])
-    task_id_cache_key = task_id_cache_key_for_event(data)
 
     symbolicator = Symbolicator(
         project=project,
-        task_id_cache_key=task_id_cache_key
+        event_id=data['event_id']
     )
 
     stacktrace_infos = [
diff --git a/src/sentry/lang/native/symbolicator.py b/src/sentry/lang/native/symbolicator.py
index 51b390deba..6a5d388f79 100644
--- a/src/sentry/lang/native/symbolicator.py
+++ b/src/sentry/lang/native/symbolicator.py
@@ -108,8 +108,12 @@ SOURCES_SCHEMA = {
 }
 
 
+def _task_id_cache_key_for_event(project_id, event_id):
+    return u'symbolicator:{1}:{0}'.format(project_id, event_id)
+
+
 class Symbolicator(object):
-    def __init__(self, project, task_id_cache_key):
+    def __init__(self, project, event_id):
         symbolicator_options = options.get('symbolicator.options')
         base_url = symbolicator_options['url'].rstrip('/')
         assert base_url
@@ -117,11 +121,12 @@ class Symbolicator(object):
         self.sess = SymbolicatorSession(
             url=base_url,
             project_id=six.text_type(project.id),
+            event_id=six.text_type(event_id),
             timeout=SYMBOLICATOR_TIMEOUT,
             sources=get_sources_for_project(project)
         )
 
-        self.task_id_cache_key = task_id_cache_key
+        self.task_id_cache_key = _task_id_cache_key_for_event(project.id, event_id)
 
     def _process(self, create_task):
         task_id = default_cache.get(self.task_id_cache_key)
@@ -282,9 +287,10 @@ def get_sources_for_project(project):
 
 
 class SymbolicatorSession(object):
-    def __init__(self, url=None, sources=None, project_id=None, timeout=None):
+    def __init__(self, url=None, sources=None, project_id=None, event_id=None, timeout=None):
         self.url = url
         self.project_id = project_id
+        self.event_id = event_id
         self.sources = sources or []
         self.timeout = timeout
         self.session = None
@@ -318,6 +324,7 @@ class SymbolicatorSession(object):
 
         # required for load balancing
         kwargs.setdefault('headers', {})['x-sentry-project-id'] = self.project_id
+        kwargs.setdefault('headers', {})['x-sentry-event-id'] = self.event_id
 
         attempts = 0
         wait = 0.5
