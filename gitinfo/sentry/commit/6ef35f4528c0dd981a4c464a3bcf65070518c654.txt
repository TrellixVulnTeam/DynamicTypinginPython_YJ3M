commit 6ef35f4528c0dd981a4c464a3bcf65070518c654
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Thu Feb 7 06:35:25 2019 -0600

    feat(snuba): Send all eventstream events to local development Snuba (#11935)
    
    * feat(snuba): Send all eventstream events to local development Snuba
    
    * Fixes from feedback.
    
    * Include status in error.

diff --git a/src/sentry/eventstream/snuba.py b/src/sentry/eventstream/snuba.py
index 6f66f6b6c4..d1d05edcb0 100644
--- a/src/sentry/eventstream/snuba.py
+++ b/src/sentry/eventstream/snuba.py
@@ -1,50 +1,23 @@
 from __future__ import absolute_import
 
-from sentry.eventstream.base import EventStream
-from sentry.utils import snuba
-
-
-class SnubaEventStream(EventStream):
-    def insert(self, group, event, is_new, is_sample, is_regression,
-               is_new_group_environment, primary_hash, skip_consume=False):
-        snuba.insert_raw([{
-            'group_id': event.group_id,
-            'event_id': event.event_id,
-            'project_id': event.project_id,
-            # TODO(mitsuhiko): We do not want to send this incorrect
-            # message but this is what snuba needs at the moment.
-            'message': event.message,
-            'platform': event.platform,
-            'datetime': event.datetime,
-            'data': dict(event.data.items()),
-            'primary_hash': primary_hash,
-        }])
-        super(SnubaEventStream, self).insert(
-            group, event, is_new, is_sample,
-            is_regression, is_new_group_environment,
-            primary_hash, skip_consume
-        )
-
-    def start_delete_groups(self, project_id, group_ids):
-        pass
-
-    def end_delete_groups(self, state):
-        pass
-
-    def start_merge(self, project_id, previous_group_ids, new_group_id):
-        pass
-
-    def end_merge(self, state):
-        pass
-
-    def start_unmerge(self, project_id, hashes, previous_group_id, new_group_id):
-        pass
-
-    def end_unmerge(self, state):
-        pass
-
-    def start_delete_tag(self, project_id, tag):
-        pass
-
-    def end_delete_tag(self, state):
-        pass
+import urllib3
+
+from sentry.eventstream.kafka import KafkaEventStream
+from sentry.eventstream.kafka.backend import EVENT_PROTOCOL_VERSION
+from sentry.utils import snuba, json
+
+
+class SnubaEventStream(KafkaEventStream):
+    def _send(self, project_id, _type, extra_data=(), asynchronous=True):
+        data = (EVENT_PROTOCOL_VERSION, _type) + extra_data
+
+        try:
+            resp = snuba._snuba_pool.urlopen(
+                'POST', '/tests/eventstream',
+                body=json.dumps(data),
+            )
+            if resp.status != 200:
+                raise snuba.SnubaError("HTTP %s response from Snuba!" % resp.status)
+            return resp
+        except urllib3.exceptions.HTTPError as err:
+            raise snuba.SnubaError(err)
diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index 2cd447eef5..91fca39f80 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -671,21 +671,6 @@ def get_related_project_ids(column, ids):
     return []
 
 
-def insert_raw(data):
-    data = json.dumps(data)
-    try:
-        with timer('snuba_insert_raw'):
-            resp = _snuba_pool.urlopen(
-                'POST', '/tests/insert',
-                body=data,
-            )
-            if resp.status != 200:
-                raise SnubaError("Non-200 response from Snuba insert!")
-            return resp
-    except urllib3.exceptions.HTTPError as err:
-        raise SnubaError(err)
-
-
 def shrink_time_window(issues, start):
     """\
     If a single issue is passed in, shrink the `start` parameter to be briefly before
diff --git a/tests/snuba/eventstream/test_eventstream.py b/tests/snuba/eventstream/test_eventstream.py
index 7afe1614e1..bf4a4ba62f 100644
--- a/tests/snuba/eventstream/test_eventstream.py
+++ b/tests/snuba/eventstream/test_eventstream.py
@@ -8,6 +8,7 @@ from mock import patch, Mock
 
 from sentry.event_manager import EventManager
 from sentry.eventstream.kafka import KafkaEventStream
+from sentry.eventstream.snuba import SnubaEventStream
 from sentry.testutils import SnubaTestCase
 from sentry.utils import snuba, json
 
@@ -71,11 +72,12 @@ class SnubaEventStreamTest(SnubaTestCase):
         assert produce_kwargs['topic'] == 'events'
         assert produce_kwargs['key'] == six.text_type(self.project.id)
 
-        version, type_, primary_payload = json.loads(produce_kwargs['value'])[:3]
+        version, type_, payload1, payload2 = json.loads(produce_kwargs['value'])
         assert version == 2
         assert type_ == 'insert'
 
         # insert what would have been the Kafka payload directly
         # into Snuba, expect an HTTP 200 and for the event to now exist
-        snuba.insert_raw([primary_payload])
+        snuba_eventstream = SnubaEventStream()
+        snuba_eventstream._send(self.project.id, 'insert', (payload1, payload2))
         assert _get_event_count() == 1
