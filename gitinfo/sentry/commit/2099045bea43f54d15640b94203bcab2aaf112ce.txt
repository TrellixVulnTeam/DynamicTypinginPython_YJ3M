commit 2099045bea43f54d15640b94203bcab2aaf112ce
Author: David Wang <davidw1339@gmail.com>
Date:   Wed Oct 23 11:32:12 2019 -0700

    feat(projects): Added query parameter for getting all projects within an organization (#15232)
    
    Overrode some functionality in organization_projects.py in order to bypass pagination of projects. This is as meant as an intermediate step so that frontend components no longer have to rely on organization.projects from org details, but will use a new <Projects> utility component which will fetch data from this modified organization_projects endpoint. Eventually this option will go away as we push to have more elements display paginated data on the frontend. Call the organization/projects endpoint like this: organization/projects?all_projects=1 to retrieve all projects.

diff --git a/src/sentry/api/endpoints/organization_projects.py b/src/sentry/api/endpoints/organization_projects.py
index c6318ea3c2..ee6c4a6c0b 100644
--- a/src/sentry/api/endpoints/organization_projects.py
+++ b/src/sentry/api/endpoints/organization_projects.py
@@ -102,17 +102,26 @@ class OrganizationProjectsEndpoint(OrganizationEndpoint, EnvironmentMixin):
 
         queryset = queryset.filter(status=ProjectStatus.VISIBLE).distinct()
 
-        return self.paginate(
-            request=request,
-            queryset=queryset,
-            order_by=order_by,
-            on_results=lambda x: serialize(
-                x,
-                request.user,
-                ProjectSummarySerializer(
-                    environment_id=self._get_environment_id_from_request(request, organization.id),
-                    stats_period=stats_period,
+        # TODO(davidenwang): remove this after frontend requires only paginated projects
+        get_all_projects = request.GET.get("all_projects") == "1"
+
+        if get_all_projects:
+            queryset = queryset.order_by("slug")
+            return Response(serialize(list(queryset), request.user, ProjectSummarySerializer()))
+        else:
+            return self.paginate(
+                request=request,
+                queryset=queryset,
+                order_by=order_by,
+                on_results=lambda x: serialize(
+                    x,
+                    request.user,
+                    ProjectSummarySerializer(
+                        environment_id=self._get_environment_id_from_request(
+                            request, organization.id
+                        ),
+                        stats_period=stats_period,
+                    ),
                 ),
-            ),
-            paginator_cls=OffsetPaginator,
-        )
+                paginator_cls=OffsetPaginator,
+            )
diff --git a/tests/sentry/api/endpoints/test_organization_projects.py b/tests/sentry/api/endpoints/test_organization_projects.py
index 4226691637..fb89f6cce5 100644
--- a/tests/sentry/api/endpoints/test_organization_projects.py
+++ b/tests/sentry/api/endpoints/test_organization_projects.py
@@ -149,3 +149,16 @@ class OrganizationProjectsTest(APITestCase):
             self.path, HTTP_AUTHORIZATION="Basic " + b64encode(u"{}:".format(key.key))
         )
         self.check_valid_response(response, [project])
+
+    def test_all_projects(self):
+        self.login_as(user=self.user)
+        other_team = self.create_team(organization=self.org)
+
+        project_bar = self.create_project(teams=[self.team], name="bar", slug="bar")
+        project_foo = self.create_project(teams=[other_team], name="foo", slug="foo")
+        project_baz = self.create_project(teams=[other_team], name="baz", slug="baz")
+        sorted_projects = [project_bar, project_baz, project_foo]
+
+        response = self.client.get(self.path + "?all_projects=1&per_page=1")
+        # Verify all projects in the org are returned in sorted order
+        self.check_valid_response(response, sorted_projects)
