commit 11eed7612bc39ed8fed2c574da2ae189d8073852
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Apr 17 14:53:51 2015 -0700

    Initial pass at some additional optimizations

diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index b248823621..23ff51e4c5 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -10,6 +10,7 @@ var DropdownLink = require("./dropdownLink");
 var MenuItem = require("./menuItem");
 var PropTypes = require("../proptypes");
 var LoadingIndicator = require("../components/loadingIndicator");
+var utils = require("../utils");
 
 var AssigneeSelector = React.createClass({
   mixins: [Reflux.ListenerMixin],
@@ -21,18 +22,19 @@ var AssigneeSelector = React.createClass({
 
   getInitialState() {
     return {
-      filterQuery: ''
+      filterQuery: '',
+      loading: false
     };
   },
 
   assignTo(member) {
     api.assignTo({id: this.props.group.id, email: member.email});
-    this.setState({filterQuery: ''});
+    this.setState({filterQuery: '', loading: true});
   },
 
   clearAssignTo() {
     api.assignTo({id: this.props.group.id, email: ''});
-    this.setState({filterQuery: ''});
+    this.setState({filterQuery: '', loading: true});
   },
 
   onChangeFilter() {
@@ -51,9 +53,32 @@ var AssigneeSelector = React.createClass({
     });
   },
 
+  componentWillReceiveProps(nextProps) {
+    var loading = GroupListStore.hasStatus(nextProps.group.id, 'assignTo');
+    if (this.state.loading != loading) {
+      this.setState({loading: loading});
+    }
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    if (!utils.objectMatchesSubset(nextProps.group.assignedTo, this.props.group.assignedTo)) {
+      return true;
+    }
+    if (nextState.filterQuery !== this.state.filterQuery) {
+      return true;
+    }
+    if (nextState.loading !== this.state.loading) {
+      return true;
+    }
+    if (!utils.arrayIsEqual(this.props.memberList, nextProps.memberList)) {
+      return true;
+    }
+    return false;
+  },
+
   render() {
     var group = this.props.group;
-    var loading = GroupListStore.hasStatus(group.id, 'assignTo');
+    var loading = this.state.loading;
 
     var className = "assignee-selector anchor-right";
     if (!group.assignedTo) {
diff --git a/src/sentry/static/sentry/app/utils.jsx b/src/sentry/static/sentry/app/utils.jsx
index 43fbebd685..20729b8dec 100644
--- a/src/sentry/static/sentry/app/utils.jsx
+++ b/src/sentry/static/sentry/app/utils.jsx
@@ -1,5 +1,60 @@
 /*** @jsx React.DOM */
 
+
+var objectMatchesSubset = function(obj, other, deep){
+  var k;
+
+  if (deep !== true) {
+    for (k in other) {
+      if (obj[k] != other[k]) {
+        return false;
+      }
+    }
+    return true;
+  }
+
+  for (k in other) {
+    if (obj[k] === other[k]) {
+      continue;
+    }
+
+    if (obj[k] instanceof Array || other[k] instanceof Array) {
+      if (!arrayIsEqual(obj[k], other[k])) {
+        return false;
+      }
+      continue;
+    }
+
+    if (obj[k] instanceof Object || other[k] instanceof Object) {
+      if (!objectMatchesSubset(obj[k], other[k])) {
+        return false;
+      }
+      continue;
+    }
+  }
+  return true;
+};
+
+var arrayIsEqual = function(arr, other) {
+  // if the other array is a falsy value, return
+  if (!arr || !other) {
+    return false;
+  }
+
+  // compare lengths - can save a lot of time
+  if (arr.length != other.length) {
+    return false;
+  }
+
+  for (var i = 0, l = arr.length; i < l; i++) {
+    // Warning - two different object instances will never be equal: {x:20} != {x:20}
+    if (arr[i] != other[i]) {
+      return false;
+    }
+  }
+  return true;
+};
+
 module.exports = {
   getQueryParams() {
     var vars = {},
@@ -74,6 +129,8 @@ module.exports = {
     });
   },
 
+  arrayIsEqual: arrayIsEqual,
+  objectMatchesSubset: objectMatchesSubset,
   parseLinkHeader: require('./utils/parseLinkHeader'),
 
   Collection: require('./utils/collection'),
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index bcfa260da3..164173dffa 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -154,6 +154,16 @@ var SortOptions = React.createClass({
     );
   },
 
+  componentWillReceiveProps(nextProps) {
+    var router = this.context.router;
+    this._activeRoutePath = router.getCurrentPath();
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    var router = this.context.router;
+    return this._activeRoutePath != router.getCurrentPath();
+  },
+
   render() {
     var router = this.context.router;
     var queryParams = router.getCurrentQuery();
diff --git a/src/sentry/static/sentry/app/views/stream/group.jsx b/src/sentry/static/sentry/app/views/stream/group.jsx
index 246f3a957f..4b34ad9f49 100644
--- a/src/sentry/static/sentry/app/views/stream/group.jsx
+++ b/src/sentry/static/sentry/app/views/stream/group.jsx
@@ -8,6 +8,7 @@ var BarChart = require("../../components/barChart");
 var Count = require("../../components/count");
 var SelectedGroupStore = require("../../stores/selectedGroupStore");
 var TimeSince = require("../../components/timeSince");
+var utils = require("../../utils");
 
 var StreamGroup = React.createClass({
   contextTypes: {
@@ -32,6 +33,22 @@ var StreamGroup = React.createClass({
     };
   },
 
+  shouldComponentUpdate(nextProps, nextState) {
+    if (nextProps.statsPeriod !== this.props.statsPeriod) {
+      return true;
+    }
+    if (nextState.isSelected !== this.state.isSelected) {
+      return true;
+    }
+    if (!utils.objectMatchesSubset(this.props.data, nextProps.data, true)) {
+      return true;
+    }
+    if (!utils.arrayIsEqual(this.props.memberList, nextProps.data)) {
+      return true;
+    }
+    return false;
+  },
+
   onSelectedGroupChange() {
     var id = this.props.data.id;
     this.setState({
