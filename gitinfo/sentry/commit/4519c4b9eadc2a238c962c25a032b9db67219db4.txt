commit 4519c4b9eadc2a238c962c25a032b9db67219db4
Author: Dena Mwangi <dena@getsentry.com>
Date:   Wed Mar 14 15:57:53 2018 -0700

    feat(assistant): Add cue dismiss functionality (#7555)
    
    * Add cue dismiss functionality

diff --git a/src/sentry/static/sentry/app/components/assistant/guideDrawer.jsx b/src/sentry/static/sentry/app/components/assistant/guideDrawer.jsx
index 78a9df6086..64a0a0df8d 100644
--- a/src/sentry/static/sentry/app/components/assistant/guideDrawer.jsx
+++ b/src/sentry/static/sentry/app/components/assistant/guideDrawer.jsx
@@ -2,24 +2,20 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import Button from '../buttons/button';
 import {t} from '../../locale';
-import {dismiss, markUseful, nextStep} from '../../actionCreators/guides';
+import {markUseful, nextStep} from '../../actionCreators/guides';
 
 // GuideDrawer is what slides up when the user clicks on a guide cue.
 export default class GuideDrawer extends React.Component {
   static propTypes = {
     guide: PropTypes.object.isRequired,
     step: PropTypes.number.isRequired,
-    onClose: PropTypes.func.isRequired,
+    onFinish: PropTypes.func.isRequired,
+    onDismiss: PropTypes.func.isRequired,
   };
 
   handleUseful = useful => {
     markUseful(this.props.guide.id, useful);
-    this.props.onClose();
-  };
-
-  handleDismiss = () => {
-    dismiss(this.props.guide.id);
-    this.props.onClose();
+    this.props.onFinish();
   };
 
   render() {
@@ -38,7 +34,7 @@ export default class GuideDrawer extends React.Component {
           {this.props.step < this.props.guide.steps.length ? (
             <div>
               <Button onClick={nextStep}>{t('Next')} &rarr;</Button>
-              <Button onClick={this.handleDismiss}>{t('Dismiss')}</Button>
+              <Button onClick={this.props.onDismiss}>{t('Dismiss')}</Button>
             </div>
           ) : (
             <div>
diff --git a/src/sentry/static/sentry/app/components/assistant/helper.jsx b/src/sentry/static/sentry/app/components/assistant/helper.jsx
index 6436ae4b5a..617e3faa82 100644
--- a/src/sentry/static/sentry/app/components/assistant/helper.jsx
+++ b/src/sentry/static/sentry/app/components/assistant/helper.jsx
@@ -2,7 +2,8 @@ import React from 'react';
 import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
 import {t} from '../../locale';
-import {closeGuide, fetchGuides, nextStep} from '../../actionCreators/guides';
+
+import {dismiss, closeGuide, fetchGuides, nextStep} from '../../actionCreators/guides';
 import SupportDrawer from './supportDrawer';
 import GuideDrawer from './guideDrawer';
 import GuideStore from '../../stores/guideStore';
@@ -54,20 +55,23 @@ const AssistantHelper = createReactClass({
     });
   },
 
+  handleDismiss() {
+    dismiss(this.state.currentGuide.id);
+    closeGuide();
+  },
+
   render() {
-    const cueText = this.state.currentGuide
-      ? this.state.currentGuide.cue
-      : t('Need Help?');
     // isDrawerOpen and currentGuide/currentStep live in different places and are updated
     // non-atomically. So we need to guard against the inconsistent state of the drawer
     // being open and a guide being present, but currentStep not updated yet.
     // If this gets too complicated, it would be better to move isDrawerOpen into
     // GuideStore so we can update the state atomically in onGuideStateChange.
     let showDrawer = false;
-    if (
-      this.state.isDrawerOpen &&
-      (!this.state.currentGuide || this.state.currentStep > 0)
-    ) {
+    let {currentGuide, currentStep, isDrawerOpen} = this.state;
+    let isGuideCued = currentGuide !== null;
+
+    const cueText = isGuideCued ? currentGuide.cue : t('Need Help?');
+    if (isDrawerOpen && (!isGuideCued || currentStep > 0)) {
       showDrawer = true;
     }
 
@@ -75,20 +79,26 @@ const AssistantHelper = createReactClass({
       <div className="assistant-container">
         {showDrawer ? (
           <div className="assistant-drawer">
-            {this.state.currentGuide ? (
+            {currentGuide ? (
               <GuideDrawer
-                guide={this.state.currentGuide}
-                step={this.state.currentStep}
-                onClose={closeGuide}
+                guide={currentGuide}
+                step={currentStep}
+                onFinish={closeGuide}
+                onDismiss={this.handleDismiss}
               />
             ) : (
               <SupportDrawer onClose={this.handleSupportDrawerClose} />
             )}
           </div>
         ) : (
-          <a onClick={this.handleDrawerOpen} className="assistant-cue">
-            {cueText}
-          </a>
+          <div>
+            <a onClick={this.handleDrawerOpen} className="assistant-cue">
+              {cueText}
+            </a>
+            {isGuideCued && (
+              <a onClick={this.handleDismiss} className="icon-close assistant-cue" />
+            )}
+          </div>
         )}
       </div>
     );
diff --git a/tests/js/spec/components/assistant/__snapshots__/guideDrawer.spec.jsx.snap b/tests/js/spec/components/assistant/__snapshots__/guideDrawer.spec.jsx.snap
index bd1a73e9fd..51140d0b58 100644
--- a/tests/js/spec/components/assistant/__snapshots__/guideDrawer.spec.jsx.snap
+++ b/tests/js/spec/components/assistant/__snapshots__/guideDrawer.spec.jsx.snap
@@ -26,7 +26,7 @@ exports[`GuideDrawer gets dismissed 1`] = `
       </Button>
       <Button
         disabled={false}
-        onClick={[Function]}
+        onClick={[MockFunction]}
       >
         Dismiss
       </Button>
diff --git a/tests/js/spec/components/assistant/__snapshots__/helper.spec.jsx.snap b/tests/js/spec/components/assistant/__snapshots__/helper.spec.jsx.snap
index acb34bec72..81d1d7d565 100644
--- a/tests/js/spec/components/assistant/__snapshots__/helper.spec.jsx.snap
+++ b/tests/js/spec/components/assistant/__snapshots__/helper.spec.jsx.snap
@@ -4,12 +4,14 @@ exports[`Helper renders cue 1`] = `
 <div
   className="assistant-container"
 >
-  <a
-    className="assistant-cue"
-    onClick={[Function]}
-  >
-    Need Help?
-  </a>
+  <div>
+    <a
+      className="assistant-cue"
+      onClick={[Function]}
+    >
+      Need Help?
+    </a>
+  </div>
 </div>
 `;
 
@@ -43,7 +45,8 @@ exports[`Helper renders guide drawer 1`] = `
           ],
         }
       }
-      onClose={[Function]}
+      onDismiss={[Function]}
+      onFinish={[Function]}
       step={1}
     />
   </div>
diff --git a/tests/js/spec/components/assistant/guideDrawer.spec.jsx b/tests/js/spec/components/assistant/guideDrawer.spec.jsx
index 2997234411..919af57845 100644
--- a/tests/js/spec/components/assistant/guideDrawer.spec.jsx
+++ b/tests/js/spec/components/assistant/guideDrawer.spec.jsx
@@ -17,17 +17,24 @@ describe('GuideDrawer', function() {
 
   it('gets dismissed', function() {
     let mock = jest.fn();
-    let wrapper = shallow(<GuideDrawer guide={data} step={1} onClose={mock} />);
+    let mock2 = jest.fn();
+    let wrapper = shallow(
+      <GuideDrawer guide={data} step={1} onFinish={mock} onDismiss={mock2} />
+    );
     expect(wrapper).toMatchSnapshot();
     wrapper
       .find('Button')
       .last()
       .simulate('click');
-    expect(mock).toHaveBeenCalled();
+    expect(mock2).toHaveBeenCalled();
   });
 
   it('renders next step', function() {
-    let wrapper = shallow(<GuideDrawer guide={data} step={2} onClose={jest.fn()} />);
+    let mock = jest.fn();
+    let mock2 = jest.fn();
+    let wrapper = shallow(
+      <GuideDrawer guide={data} step={2} onFinish={mock} onDismiss={mock2} />
+    );
     expect(wrapper).toMatchSnapshot();
 
     // Mark as useful.
