commit a4ce1e54802c332634520e3b93ff5b093a6a0abe
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Nov 16 13:52:39 2018 -0800

    feat(discover): issue.id returns external short id instead of internal id (#10633)
    
    Since this field isn't in Snuba, prevent orderby and conditions on this field

diff --git a/src/sentry/api/endpoints/organization_discover_query.py b/src/sentry/api/endpoints/organization_discover_query.py
index 9443aa78e6..d78ea7750a 100644
--- a/src/sentry/api/endpoints/organization_discover_query.py
+++ b/src/sentry/api/endpoints/organization_discover_query.py
@@ -18,7 +18,7 @@ from sentry.api.serializers.rest_framework import ListField
 from sentry.api.bases.organization import OrganizationPermission
 from sentry.api.bases import OrganizationEndpoint
 from sentry.api.paginator import GenericOffsetPaginator
-from sentry.models import Project, ProjectStatus, OrganizationMember, OrganizationMemberTeam
+from sentry.models import Project, Group, ProjectStatus, OrganizationMember, OrganizationMemberTeam
 from sentry.utils import snuba
 from sentry import roles
 from sentry import features
@@ -245,6 +245,20 @@ class OrganizationDiscoverQueryEndpoint(OrganizationEndpoint):
                 if 'project.id' not in requested_query['groupby']:
                     del result['project.id']
 
+        if 'issue.id' in (requested_query['selected_columns'] + requested_query['groupby']):
+            for col in snuba_results['meta']:
+                if col['name'] == 'issue.id':
+                    col['type'] = 'String'
+
+        for arr in [requested_query['selected_columns'], requested_query['groupby']]:
+            if 'issue.id' in arr:
+                groups = {k: v for k, v in Group.objects.filter(
+                    id__in=[row['issue.id'] for row in snuba_results['data']]
+                ).values_list('id', 'short_id')}
+
+                for result in snuba_results['data']:
+                    result['issue.id'] = six.text_type(groups.get(result['issue.id']))
+
         # Convert snuba types to json types
         for col in snuba_results['meta']:
             col['type'] = self.get_json_type(col.get('type'))
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
index 82c3c9810c..353d102d36 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
@@ -35,7 +35,7 @@ export const COLUMNS = [
   {name: 'id', type: TYPES.STRING},
   {name: 'issue.id', type: TYPES.STRING},
   {name: 'project.id', type: TYPES.STRING},
-  {name: 'project.name', type: TYPES.STRING}, // Not a snuba column
+  {name: 'project.name', type: TYPES.STRING},
   {name: 'platform', type: TYPES.STRING},
   {name: 'message', type: TYPES.STRING},
   {name: 'primary_hash', type: TYPES.STRING},
@@ -85,6 +85,10 @@ export const COLUMNS = [
   {name: 'stack.stack_level', type: TYPES.STRING},
 ];
 
+export const NON_SNUBA_FIELDS = ['issue.id', 'project.name'];
+
+export const NON_CONDITIONS_FIELDS = [...NON_SNUBA_FIELDS, 'project.id'];
+
 export const CONDITION_OPERATORS = [
   '>',
   '<',
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx
index 7b1071fa24..8f8d735a36 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx
@@ -11,6 +11,7 @@ import Aggregations from '../aggregations';
 import Conditions from '../conditions';
 import {getOrderByOptions} from '../utils';
 import {Fieldset, PlaceholderText, SidebarLabel} from '../styles';
+import {NON_CONDITIONS_FIELDS} from '../data';
 
 export default class QueryFields extends React.Component {
   static propTypes = {
@@ -47,9 +48,9 @@ export default class QueryFields extends React.Component {
 
     const currentQuery = queryBuilder.getInternal();
     const columns = queryBuilder.getColumns();
-    // Do not allow conditions on project.id or project.name fields
+    // Do not allow conditions on certain fields
     const columnsForConditions = columns.filter(
-      ({name}) => !['project.id', 'project.name'].includes(name)
+      ({name}) => !NON_CONDITIONS_FIELDS.includes(name)
     );
 
     const fieldOptions = columns.map(({name}) => ({
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
index eae5d86177..588cc33eb4 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
@@ -1,6 +1,7 @@
 import moment from 'moment';
 import {Client} from 'app/api';
 import {isValidAggregation} from './aggregations/utils';
+import {NON_SNUBA_FIELDS} from './data';
 
 export function getQueryFromQueryString(queryString) {
   const validQueryKeys = new Set([
@@ -59,8 +60,8 @@ export function getOrderByOptions(queryBuilder) {
       }
     }
 
-    // Never allow ordering by project.name since this can't be done in Snuba
-    if (name === 'project.name') {
+    // Never allow ordering by project.name or issue.id since this can't be done in Snuba
+    if (NON_SNUBA_FIELDS.includes(name)) {
       return acc;
     }
 
diff --git a/tests/js/spec/views/organizationDiscover/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/utils.spec.jsx
index 68bb6eb260..81e93c0a7e 100644
--- a/tests/js/spec/views/organizationDiscover/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/utils.spec.jsx
@@ -50,8 +50,8 @@ describe('getOrderByOptions()', function() {
   const organization = TestStubs.Organization({projects: [TestStubs.Project()]});
   const queryBuilder = createQueryBuilder({}, organization);
 
-  it('allows ordering by all fields when no aggregations except project.name', function() {
-    expect(getOrderByOptions(queryBuilder)).toHaveLength((COLUMNS.length - 1) * 2);
+  it('allows ordering by all fields when no aggregations except project.name and issue.id', function() {
+    expect(getOrderByOptions(queryBuilder)).toHaveLength((COLUMNS.length - 2) * 2);
   });
 
   it('allows ordering by aggregations with aggregations and no fields', function() {
diff --git a/tests/snuba/test_organization_discover_query.py b/tests/snuba/test_organization_discover_query.py
index 3cbfddb904..7feed15a19 100644
--- a/tests/snuba/test_organization_discover_query.py
+++ b/tests/snuba/test_organization_discover_query.py
@@ -22,7 +22,7 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
             organization=self.org,
         )
 
-        self.group = self.create_group(project=self.project)
+        self.group = self.create_group(project=self.project, short_id=20)
 
         self.event = self.create_event(
             group=self.group,
@@ -228,6 +228,47 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
         assert len(response.data['data']) == 1
         assert(response.data['data'][0]['uniq_project_name']) == 1
 
+    def test_select_issue_id(self):
+        with self.feature('organizations:discover'):
+            url = reverse('sentry-api-0-organization-discover-query', args=[self.org.slug])
+            response = self.client.post(url, {
+                'projects': [self.project.id],
+                'fields': ['issue.id'],
+                'range': '14d',
+                'orderby': '-timestamp',
+            })
+        assert response.status_code == 200, response.content
+        assert len(response.data['data']) == 1
+        assert(response.data['data'][0]['issue.id']) == '20'
+
+    def test_groupby_issue_id(self):
+        with self.feature('organizations:discover'):
+            url = reverse('sentry-api-0-organization-discover-query', args=[self.org.slug])
+            response = self.client.post(url, {
+                'projects': [self.project.id],
+                'aggregations': [['count()', '', 'count']],
+                'fields': ['issue.id'],
+                'range': '14d',
+                'orderby': '-count',
+            })
+        assert response.status_code == 200, response.content
+        assert len(response.data['data']) == 1
+        assert(response.data['data'][0]['issue.id']) == '20'
+        assert(response.data['data'][0]['count']) == 1
+
+    def test_uniq_issue_id(self):
+        with self.feature('organizations:discover'):
+            url = reverse('sentry-api-0-organization-discover-query', args=[self.org.slug])
+            response = self.client.post(url, {
+                'projects': [self.project.id],
+                'aggregations': [['uniq', 'issue.id', 'uniq_issue_id']],
+                'range': '14d',
+                'orderby': '-uniq_issue_id',
+            })
+        assert response.status_code == 200, response.content
+        assert len(response.data['data']) == 1
+        assert(response.data['data'][0]['uniq_issue_id']) == 1
+
     def test_meta_types(self):
         with self.feature('organizations:discover'):
             url = reverse('sentry-api-0-organization-discover-query', args=[self.org.slug])
