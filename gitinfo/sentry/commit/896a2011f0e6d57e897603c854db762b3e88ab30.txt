commit 896a2011f0e6d57e897603c854db762b3e88ab30
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Jan 14 16:39:47 2019 -0800

    feat(dashboard): Add overview dashboard  (#11416)
    
    This adds widgets to the dashboard that is generated by JSON modules.

diff --git a/src/sentry/static/sentry/app/actionCreators/events.jsx b/src/sentry/static/sentry/app/actionCreators/events.jsx
index 08657b6d76..c16ac548a4 100644
--- a/src/sentry/static/sentry/app/actionCreators/events.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/events.jsx
@@ -1,57 +1,7 @@
-import moment from 'moment';
-
-import {DEFAULT_STATS_PERIOD} from 'app/constants';
-import {getUtcDateString} from 'app/utils/dates';
+import {getPeriod} from 'app/utils/getPeriod';
 
 const BASE_URL = org => `/organizations/${org.slug}/events-stats/`;
 
-// Gets the period to query with if we need to double the initial period in order
-// to get data for the previous period
-const getPeriod = ({period, start, end}, {shouldDoublePeriod}) => {
-  if (!period && !start && !end) {
-    period = DEFAULT_STATS_PERIOD;
-  }
-
-  // you can not specify both relative and absolute periods
-  // relative period takes precendence
-  if (period) {
-    if (!shouldDoublePeriod) return {statsPeriod: period};
-    const [, periodNumber, periodLength] = period.match(/([0-9]+)([mhdw])/);
-
-    return {statsPeriod: `${parseInt(periodNumber, 10) * 2}${periodLength}`};
-  }
-
-  if (!start || !end) {
-    throw new Error('start and end required');
-  }
-
-  const formattedStart = getUtcDateString(start);
-  const formattedEnd = getUtcDateString(end);
-
-  if (shouldDoublePeriod) {
-    // get duration of end - start and double
-    const diff = moment(end).diff(moment(start));
-
-    const previousPeriodStart = moment(start).subtract(diff);
-
-    return [
-      {
-        start: getUtcDateString(previousPeriodStart),
-        end: formattedStart,
-      },
-      {
-        start: formattedStart,
-        end: formattedEnd,
-      },
-    ];
-  }
-
-  return {
-    start: formattedStart,
-    end: formattedEnd,
-  };
-};
-
 /**
  * Make requests to `health` endpoint
  *
@@ -89,33 +39,17 @@ export const doEventsRequest = (
     query,
   };
 
-  // Need to treat absolute dates differently, need to perform 2 requests in
-  // order to guarantee a previous period that matches up to current period
-  if (period || !shouldDoublePeriod) {
-    const periodObj = getPeriod({period, start, end}, {shouldDoublePeriod});
+  // Doubling period for absolute dates is not accurate unless starting and
+  // ending times are the same (at least for daily intervals). This is
+  // the tradeoff for now.
+  const periodObj = getPeriod({period, start, end}, {shouldDoublePeriod});
 
-    return api.requestPromise(`${BASE_URL(organization)}`, {
-      query: {
-        ...urlQuery,
-        ...periodObj,
-      },
-    });
-  }
-
-  const absolutePeriods = getPeriod({start, end}, {shouldDoublePeriod});
-
-  return Promise.all(
-    absolutePeriods.filter(i => !!i).map(absolutePeriod =>
-      api.requestPromise(`${BASE_URL(organization)}`, {
-        query: {
-          ...urlQuery,
-          ...absolutePeriod,
-        },
-      })
-    )
-  ).then(results => ({
-    data: results.reduce((acc, {data}) => acc.concat(data), []),
-  }));
+  return api.requestPromise(`${BASE_URL(organization)}`, {
+    query: {
+      ...urlQuery,
+      ...periodObj,
+    },
+  });
 };
 
 /**
diff --git a/src/sentry/static/sentry/app/components/charts/baseChart.jsx b/src/sentry/static/sentry/app/components/charts/baseChart.jsx
index c5ffcb5ae6..9f67dfed70 100644
--- a/src/sentry/static/sentry/app/components/charts/baseChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/baseChart.jsx
@@ -108,7 +108,7 @@ class BaseChart extends React.Component {
     /**
      * Display previous period as a LineSeries
      */
-    previousPeriod: SentryTypes.SeriesUnit,
+    previousPeriod: PropTypes.arrayOf(SentryTypes.SeriesUnit),
 
     // If data is grouped by date, then apply default date formatting to
     // x-axis and tooltips.
@@ -230,14 +230,16 @@ class BaseChart extends React.Component {
             ? series
             : [
                 ...series,
-                LineSeries({
-                  name: previousPeriod.seriesName,
-                  data: previousPeriod.data.map(({name, value}) => [name, value]),
-                  lineStyle: {
-                    color: theme.gray1,
-                    type: 'dotted',
-                  },
-                }),
+                ...previousPeriod.map(previous =>
+                  LineSeries({
+                    name: previous.seriesName,
+                    data: previous.data.map(({name, value}) => [name, value]),
+                    lineStyle: {
+                      color: theme.gray1,
+                      type: 'dotted',
+                    },
+                  })
+                ),
               ],
           dataZoom,
           toolbox: toolBox,
diff --git a/src/sentry/static/sentry/app/components/charts/percentageAreaChart.jsx b/src/sentry/static/sentry/app/components/charts/percentageAreaChart.jsx
index 3aeb0e27e4..f6d337b808 100644
--- a/src/sentry/static/sentry/app/components/charts/percentageAreaChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/percentageAreaChart.jsx
@@ -32,9 +32,11 @@ export default class PercentageAreaChart extends React.Component {
   getSeries() {
     let {series, getDataItemName, getValue} = this.props;
 
-    const totalsArray = series[0].data.map(({name, value}, i) => {
-      return [name, series.reduce((sum, {data}) => sum + data[i].value, 0)];
-    });
+    const totalsArray = series.length
+      ? series[0].data.map(({name, value}, i) => {
+          return [name, series.reduce((sum, {data}) => sum + data[i].value, 0)];
+        })
+      : [];
     const totals = new Map(totalsArray);
     return [
       ...series.map(({seriesName, data}) =>
diff --git a/src/sentry/static/sentry/app/components/charts/worldMapChart.jsx b/src/sentry/static/sentry/app/components/charts/worldMapChart.jsx
index 0859243276..1d49371afe 100644
--- a/src/sentry/static/sentry/app/components/charts/worldMapChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/worldMapChart.jsx
@@ -47,7 +47,7 @@ export default class WorldMapChart extends React.Component {
     // TODO(billy):
     // For absolute values, we want min/max to based on min/max of series
     // Otherwise it should be 0-100
-    const maxValue = max(series.map(({data}) => max(data.map(({value}) => value))));
+    const maxValue = max(series.map(({data}) => max(data.map(({value}) => value)))) || 1;
 
     return (
       <BaseChart
diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index 3532c31c5d..41de07730c 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -71,12 +71,7 @@ export const Deploy = PropTypes.shape({
   version: PropTypes.string,
 });
 
-export const DiscoverSavedQuery = PropTypes.shape({
-  id: PropTypes.string.isRequired,
-  dateCreated: PropTypes.string.isRequired,
-  dateUpdated: PropTypes.string.isRequired,
-  name: PropTypes.string.isRequired,
-  createdBy: PropTypes.string,
+const DiscoverQueryShape = {
   projects: PropTypes.arrayOf(PropTypes.number),
   fields: PropTypes.arrayOf(PropTypes.string),
   aggregations: PropTypes.arrayOf(PropTypes.array),
@@ -85,6 +80,17 @@ export const DiscoverSavedQuery = PropTypes.shape({
   range: PropTypes.string,
   start: PropTypes.string,
   end: PropTypes.string,
+};
+
+export const DiscoverQuery = PropTypes.shape(DiscoverQueryShape);
+
+export const DiscoverSavedQuery = PropTypes.shape({
+  id: PropTypes.string.isRequired,
+  dateCreated: PropTypes.string.isRequired,
+  dateUpdated: PropTypes.string.isRequired,
+  name: PropTypes.string.isRequired,
+  createdBy: PropTypes.string,
+  ...DiscoverQueryShape,
 });
 
 /**
@@ -361,6 +367,15 @@ export const GlobalSelection = PropTypes.shape({
   }),
 });
 
+export const Widget = PropTypes.shape({
+  queries: PropTypes.shape({
+    discover: PropTypes.arrayOf(DiscoverQuery),
+  }),
+  title: PropTypes.node,
+  fieldLabelMap: PropTypes.object,
+  yAxisMapping: PropTypes.array,
+});
+
 export const EChartsData = PropTypes.arrayOf(
   PropTypes.oneOfType([
     // `PercentageBarChart` has a fixed dataset of 0, 25, 50, 100
@@ -862,6 +877,7 @@ let SentryTypes = {
   AuthProvider,
   Config,
   Deploy,
+  DiscoverQuery,
   DiscoverSavedQuery,
   Environment,
   Event,
@@ -889,6 +905,7 @@ let SentryTypes = {
   Repository,
   User,
   SentryApplication,
+  Widget,
 
   // echarts prop types
   EChartsSeries,
diff --git a/src/sentry/static/sentry/app/utils/__mocks__/withOrganization.jsx b/src/sentry/static/sentry/app/utils/__mocks__/withOrganization.jsx
index 1456d4f01b..771ab8d320 100644
--- a/src/sentry/static/sentry/app/utils/__mocks__/withOrganization.jsx
+++ b/src/sentry/static/sentry/app/utils/__mocks__/withOrganization.jsx
@@ -1,9 +1,19 @@
 import React from 'react';
 
+import SentryTypes from 'app/sentryTypes';
+
 const withOrganizationMock = WrappedComponent =>
   class WithOrganizationMockWrappeer extends React.Component {
+    static contextTypes = {
+      organization: SentryTypes.Organization,
+    };
     render() {
-      return <WrappedComponent organization={TestStubs.Organization()} {...this.props} />;
+      return (
+        <WrappedComponent
+          organization={this.context.organization || TestStubs.Organization()}
+          {...this.props}
+        />
+      );
     }
   };
 
diff --git a/src/sentry/static/sentry/app/utils/getPeriod.jsx b/src/sentry/static/sentry/app/utils/getPeriod.jsx
new file mode 100644
index 0000000000..35029697b2
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/getPeriod.jsx
@@ -0,0 +1,56 @@
+import moment from 'moment';
+
+import {DEFAULT_STATS_PERIOD} from 'app/constants';
+import {getUtcDateString} from 'app/utils/dates';
+
+/**
+ * Gets the period to query with if we need to double the initial period in order
+ * to get data for the previous period
+ *
+ * @param {Object} dateObj The date object
+ * @param {String} dateObj.period Relative period string in format "<int><unit>" (e.g. 4d for 4 days)
+ * @param {Date} dateObj.start Starting date object
+ * @param {Date} dateObj.end Ending date object
+ * @param {Object} options Options
+ * @param {Boolean} [options.shouldDoublePeriod] Doubles the given period (useful for getting previous period data)
+ * @return Object Returns an object with either a period or start/end dates ({statsPeriod: string} or {start: string, end: string})
+ */
+export const getPeriod = ({period, start, end}, {shouldDoublePeriod} = {}) => {
+  if (!period && !start && !end) {
+    period = DEFAULT_STATS_PERIOD;
+  }
+
+  // you can not specify both relative and absolute periods
+  // relative period takes precendence
+  if (period) {
+    if (!shouldDoublePeriod) return {statsPeriod: period};
+    const [, periodNumber, periodLength] = period.match(/([0-9]+)([mhdw])/);
+
+    return {statsPeriod: `${parseInt(periodNumber, 10) * 2}${periodLength}`};
+  }
+
+  if (!start || !end) {
+    throw new Error('start and end required');
+  }
+
+  const formattedStart = getUtcDateString(start);
+  const formattedEnd = getUtcDateString(end);
+
+  if (shouldDoublePeriod) {
+    // get duration of end - start and double
+    const diff = moment(end).diff(moment(start));
+
+    const previousPeriodStart = moment(start).subtract(diff);
+
+    // This is not as accurate as having 2 start/end objs
+    return {
+      start: getUtcDateString(previousPeriodStart),
+      end: formattedEnd,
+    };
+  }
+
+  return {
+    start: formattedStart,
+    end: formattedEnd,
+  };
+};
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/constants.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/constants.jsx
new file mode 100644
index 0000000000..742dad2f05
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/constants.jsx
@@ -0,0 +1,10 @@
+export const WIDGET_DISPLAY = {
+  LINE_CHART: 'line',
+  AREA_CHART: 'area',
+  STACKED_AREA_CHART: 'stacked-area',
+  BAR_CHART: 'bar',
+  PIE_CHART: 'pie',
+  TABLE: 'table',
+  WORLD_MAP: 'world-map',
+  PERCENTAGE_AREA_CHART: 'percentage-area',
+};
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/dashboard.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/dashboard.jsx
index 45b877c163..05e1ac927d 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/dashboard.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/dashboard.jsx
@@ -5,6 +5,7 @@ import styled from 'react-emotion';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
 import SentryTypes from 'app/sentryTypes';
+import Widget from 'app/views/organizationDashboard/widget';
 import space from 'app/styles/space';
 
 class Dashboard extends AsyncView {
@@ -27,7 +28,7 @@ class Dashboard extends AsyncView {
       <Widgets>
         {widgets.map((widget, i) => (
           <WidgetWrapper key={i}>
-            <div />
+            <Widget widget={widget} />
           </WidgetWrapper>
         ))}
       </Widgets>
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/dashboards/overviewDashboard.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/dashboards/overviewDashboard.jsx
new file mode 100644
index 0000000000..cf72850278
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/dashboards/overviewDashboard.jsx
@@ -0,0 +1,23 @@
+import affectedUsers from '../widgets/affectedUsers';
+import errorsByGeo from '../widgets/errorsByGeo';
+import eventsByReleasePercent from '../widgets/eventsByReleasePercent';
+import eventsByReleaseArea from '../widgets/eventsByReleaseArea';
+import events from '../widgets/events';
+import handledVsUnhandled from '../widgets/handledVsUnhandled';
+import topBrowsers from '../widgets/topBrowsers';
+import topDevices from '../widgets/topDevices';
+
+const overviewDashboard = {
+  widgets: [
+    events,
+    handledVsUnhandled,
+    affectedUsers,
+    topBrowsers,
+    topDevices,
+    eventsByReleasePercent,
+    eventsByReleaseArea,
+    errorsByGeo,
+  ],
+};
+
+export default overviewDashboard;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/anonymousUsersAffected.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/anonymousUsersAffected.jsx
new file mode 100644
index 0000000000..af6c48e6a4
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/anonymousUsersAffected.jsx
@@ -0,0 +1,15 @@
+/**
+ * Anonymous affected users
+ */
+const anonymousUsersAffectedQuery = {
+  fields: [],
+  conditions: [['user.email', 'IS NULL', null]],
+  aggregations: [['count()', null, 'Anonymous Users']],
+  limit: 1000,
+
+  orderby: '-time',
+  groupby: ['time'],
+  rollup: 86400,
+};
+
+export default anonymousUsersAffectedQuery;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/errorsByGeo.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/errorsByGeo.jsx
new file mode 100644
index 0000000000..4f315ee110
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/errorsByGeo.jsx
@@ -0,0 +1,14 @@
+/**
+ * Top Errors by geo location
+ */
+const errorsByGeo = {
+  fields: ['geo.country_code'],
+  conditions: [['geo.country_code', 'IS NOT NULL', null]],
+  aggregations: [['count()', null, 'count']],
+  limit: 10,
+
+  orderby: '-count',
+  groupby: ['geo.country_code'],
+};
+
+export default errorsByGeo;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/events.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/events.jsx
new file mode 100644
index 0000000000..d05c852bdd
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/events.jsx
@@ -0,0 +1,15 @@
+/**
+ * Events by day
+ */
+const events = {
+  fields: [],
+  conditions: [],
+  aggregations: [['count()', null, 'Events']],
+  limit: 1000,
+
+  orderby: '-time',
+  groupby: ['time'],
+  rollup: 86400,
+};
+
+export default events;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/eventsByRelease.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/eventsByRelease.jsx
new file mode 100644
index 0000000000..20930e8334
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/eventsByRelease.jsx
@@ -0,0 +1,15 @@
+/**
+ * Events by Release
+ */
+const eventsByRelease = {
+  fields: ['sentry:release'],
+  conditions: [],
+  aggregations: [['count()', null, 'Events']],
+  limit: 1000,
+
+  orderby: '-time',
+  groupby: ['time'],
+  rollup: 86400,
+};
+
+export default eventsByRelease;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/handledVsUnhandled.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/handledVsUnhandled.jsx
new file mode 100644
index 0000000000..5fb137d90c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/handledVsUnhandled.jsx
@@ -0,0 +1,15 @@
+/**
+ * Events by day
+ */
+const handledVsUnhandledQuery = {
+  fields: ['error.handled'],
+  conditions: [],
+  aggregations: [['count()', null, 'count']],
+  limit: 1000,
+
+  orderby: '-time',
+  groupby: ['time'],
+  rollup: 86400,
+};
+
+export default handledVsUnhandledQuery;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/knownUsersAffected.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/knownUsersAffected.jsx
new file mode 100644
index 0000000000..6d092e0e8a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/knownUsersAffected.jsx
@@ -0,0 +1,15 @@
+/**
+ * Known affected users
+ */
+const knownUsersAffectedQuery = {
+  fields: [],
+  conditions: [['user.email', 'IS NOT NULL', null]],
+  aggregations: [['uniq', 'user.email', 'Known Users']],
+  limit: 1000,
+
+  orderby: '-time',
+  groupby: ['time'],
+  rollup: 86400,
+};
+
+export default knownUsersAffectedQuery;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/topBrowsers.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/topBrowsers.jsx
new file mode 100644
index 0000000000..cef266d583
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/topBrowsers.jsx
@@ -0,0 +1,14 @@
+/**
+ * Top Errors by Browser
+ */
+const topBrowsers = {
+  fields: ['browser.name'],
+  conditions: [],
+  aggregations: [['count()', null, 'count']],
+  limit: 10,
+
+  orderby: '-count',
+  groupby: ['browser.name'],
+};
+
+export default topBrowsers;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/topDevices.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/topDevices.jsx
new file mode 100644
index 0000000000..59f7575e5a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/topDevices.jsx
@@ -0,0 +1,14 @@
+/**
+ * Top Errors by Device
+ */
+const topDevices = {
+  fields: ['device.family'],
+  conditions: [],
+  aggregations: [['count()', null, 'count']],
+  limit: 10,
+
+  orderby: '-count',
+  groupby: ['device.family'],
+};
+
+export default topDevices;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/topTransactions.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/topTransactions.jsx
new file mode 100644
index 0000000000..0d2a119664
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/topTransactions.jsx
@@ -0,0 +1,15 @@
+/**
+ * Top Events by URL
+ */
+const eventsQuery = {
+  fields: ['url'],
+  conditions: [],
+  aggregations: [['count()', null, 'count']],
+  limit: 1000,
+
+  orderby: '-time',
+  groupby: ['time'],
+  rollup: 86400,
+};
+
+export default eventsQuery;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/affectedUsers.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/affectedUsers.jsx
new file mode 100644
index 0000000000..4fd9b1bd2f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/affectedUsers.jsx
@@ -0,0 +1,14 @@
+import {WIDGET_DISPLAY} from 'app/views/organizationDashboard/constants';
+
+import anonymousUsersAffected from 'app/views/organizationDashboard/data/queries/anonymousUsersAffected';
+import knownUsersAffected from 'app/views/organizationDashboard/data/queries/knownUsersAffected';
+
+const affectedUsers = {
+  type: WIDGET_DISPLAY.LINE_CHART,
+  queries: {discover: [knownUsersAffected, anonymousUsersAffected]},
+
+  title: 'Affected Users',
+  yAxisMapping: [[0], [1]],
+};
+
+export default affectedUsers;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/errorsByGeo.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/errorsByGeo.jsx
new file mode 100644
index 0000000000..41db71c3ed
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/errorsByGeo.jsx
@@ -0,0 +1,13 @@
+import {WIDGET_DISPLAY} from 'app/views/organizationDashboard/constants';
+import errorsByGeoQuery from 'app/views/organizationDashboard/data/queries/errorsByGeo';
+
+const errorsByGeo = {
+  type: WIDGET_DISPLAY.WORLD_MAP,
+  queries: {discover: [errorsByGeoQuery]},
+  compareToPeriod: {
+    statsPeriodStart: '15d',
+    statsPeriodEnd: '8d',
+  },
+};
+
+export default errorsByGeo;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/events.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/events.jsx
new file mode 100644
index 0000000000..6ded7c9d27
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/events.jsx
@@ -0,0 +1,17 @@
+import {WIDGET_DISPLAY} from 'app/views/organizationDashboard/constants';
+
+import eventsQuery from '../queries/events';
+
+const events = {
+  type: WIDGET_DISPLAY.LINE_CHART,
+  queries: {
+    discover: [eventsQuery],
+  },
+  includePreviousPeriod: true,
+  title: 'Events',
+  aggregateLabelMap: {
+    count: 'Events',
+  },
+};
+
+export default events;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/eventsByReleaseArea.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/eventsByReleaseArea.jsx
new file mode 100644
index 0000000000..896445847c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/eventsByReleaseArea.jsx
@@ -0,0 +1,11 @@
+import {WIDGET_DISPLAY} from 'app/views/organizationDashboard/constants';
+
+import eventsByRelease from '../queries/eventsByRelease';
+
+const eventsByReleasePercent = {
+  type: WIDGET_DISPLAY.STACKED_AREA_CHART,
+  queries: {discover: [eventsByRelease]},
+  title: 'Events By Release',
+};
+
+export default eventsByReleasePercent;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/eventsByReleasePercent.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/eventsByReleasePercent.jsx
new file mode 100644
index 0000000000..33d5afbdc9
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/eventsByReleasePercent.jsx
@@ -0,0 +1,11 @@
+import {WIDGET_DISPLAY} from 'app/views/organizationDashboard/constants';
+
+import eventsByRelease from '../queries/eventsByRelease';
+
+const eventsByReleasePercent = {
+  type: WIDGET_DISPLAY.PERCENTAGE_AREA_CHART,
+  queries: {discover: [eventsByRelease]},
+  title: 'Events By Release',
+};
+
+export default eventsByReleasePercent;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/handledVsUnhandled.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/handledVsUnhandled.jsx
new file mode 100644
index 0000000000..86efbe8f1d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/handledVsUnhandled.jsx
@@ -0,0 +1,17 @@
+import {WIDGET_DISPLAY} from 'app/views/organizationDashboard/constants';
+
+import handledVsUnhandledQuery from '../queries/handledVsUnhandled';
+
+const handledVsUnhandled = {
+  type: WIDGET_DISPLAY.LINE_CHART,
+  queries: {discover: [handledVsUnhandledQuery]},
+
+  title: 'Handled vs. Unhandled',
+  fieldLabelMap: {
+    '0': 'Unhandled',
+    '1': 'Handled',
+    null: 'Unknown',
+  },
+};
+
+export default handledVsUnhandled;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/topBrowsers.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/topBrowsers.jsx
new file mode 100644
index 0000000000..4643cb3853
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/topBrowsers.jsx
@@ -0,0 +1,12 @@
+import {WIDGET_DISPLAY} from 'app/views/organizationDashboard/constants';
+
+import topBrowsersQuery from '../queries/topBrowsers';
+
+const topBrowsers = {
+  type: WIDGET_DISPLAY.TABLE,
+  queries: {discover: [topBrowsersQuery]},
+
+  title: 'Browsers',
+};
+
+export default topBrowsers;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/topDevices.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/topDevices.jsx
new file mode 100644
index 0000000000..807bd29cca
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/topDevices.jsx
@@ -0,0 +1,12 @@
+import {WIDGET_DISPLAY} from 'app/views/organizationDashboard/constants';
+
+import topDevicesQuery from '../queries/topDevices';
+
+const topDevices = {
+  type: WIDGET_DISPLAY.TABLE,
+  queries: {discover: [topDevicesQuery]},
+
+  title: 'Devices',
+};
+
+export default topDevices;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/discoverQuery.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/discoverQuery.jsx
new file mode 100644
index 0000000000..bf460d6376
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/discoverQuery.jsx
@@ -0,0 +1,111 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {getPeriod} from 'app/utils/getPeriod';
+import SentryTypes from 'app/sentryTypes';
+import createQueryBuilder from 'app/views/organizationDiscover/queryBuilder';
+import withGlobalSelection from 'app/utils/withGlobalSelection';
+import withOrganization from 'app/utils/withOrganization';
+
+class DiscoverQuery extends React.Component {
+  static propTypes = {
+    compareToPeriod: PropTypes.shape({
+      statsPeriodStart: PropTypes.string,
+      statsPeriodEnd: PropTypes.string,
+    }),
+    includePreviousPeriod: PropTypes.bool,
+    organization: SentryTypes.Organization,
+    selection: SentryTypes.GlobalSelection,
+    queries: PropTypes.arrayOf(SentryTypes.DiscoverQuery),
+  };
+
+  constructor(props) {
+    super(props);
+
+    this.state = {
+      results: null,
+    };
+
+    // Query builders based on `queries`
+    this.queryBuilders = [];
+
+    this.createQueryBuilders();
+  }
+
+  componentDidMount() {
+    this.fetchData();
+  }
+
+  componentDidUpdate(prevProps) {
+    if (prevProps === this.props) {
+      return;
+    }
+
+    this.fetchData();
+  }
+
+  createQueryBuilders() {
+    const {organization, queries} = this.props;
+    queries.forEach(query => {
+      this.queryBuilders.push(createQueryBuilder(this.getQuery(query), organization));
+    });
+  }
+
+  getQuery(query, compareToPeriod) {
+    const {includePreviousPeriod} = this.props;
+    const {datetime, ...selection} = this.props.selection;
+    let period;
+
+    if (!compareToPeriod) {
+      const {start, end, statsPeriod} = getPeriod(datetime, {
+        shouldDoublePeriod: includePreviousPeriod,
+      });
+      period = {start, end, range: statsPeriod};
+    }
+
+    return {
+      ...query,
+      ...selection,
+      ...period,
+      ...compareToPeriod,
+    };
+  }
+
+  resetQueries() {
+    const {queries} = this.props;
+    this.queryBuilders.forEach((builder, i) => {
+      const query = queries[i];
+      builder.reset(this.getQuery(query));
+    });
+  }
+
+  async fetchData() {
+    // Reset query builder
+    this.resetQueries();
+
+    // Fetch
+    const promises = this.queryBuilders.map(builder => builder.fetch());
+    let results = await Promise.all(promises);
+    let previousData = null;
+    let data = null;
+
+    this.setState({
+      results,
+      data,
+      previousData,
+    });
+  }
+
+  render() {
+    const {children} = this.props;
+
+    return children({
+      queries: this.queryBuilders.map(builder => builder.getInternal()),
+      results: this.state.results,
+      data: this.state.data,
+      previousData: this.state.previousData,
+    });
+  }
+}
+
+export default withGlobalSelection(withOrganization(DiscoverQuery));
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/overviewDashboard.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/overviewDashboard.jsx
index b96278f888..7eea11e608 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/overviewDashboard.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/overviewDashboard.jsx
@@ -1,10 +1,11 @@
 import React from 'react';
 
 import Dashboard from 'app/views/organizationDashboard/dashboard';
+import overviewDashboard from 'app/views/organizationDashboard/data/dashboards/overviewDashboard';
 
 class OverviewDashboard extends React.Component {
   render() {
-    return <Dashboard widgets={[]} />;
+    return <Dashboard {...overviewDashboard} />;
   }
 }
 export default OverviewDashboard;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/overviewDashboard/index.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/overviewDashboard/index.jsx
new file mode 100644
index 0000000000..061eb4422a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/overviewDashboard/index.jsx
@@ -0,0 +1 @@
+export {default} from './overviewDashboard';
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/overviewDashboard/overviewDashboard.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/overviewDashboard/overviewDashboard.jsx
new file mode 100644
index 0000000000..7eea11e608
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/overviewDashboard/overviewDashboard.jsx
@@ -0,0 +1,11 @@
+import React from 'react';
+
+import Dashboard from 'app/views/organizationDashboard/dashboard';
+import overviewDashboard from 'app/views/organizationDashboard/data/dashboards/overviewDashboard';
+
+class OverviewDashboard extends React.Component {
+  render() {
+    return <Dashboard {...overviewDashboard} />;
+  }
+}
+export default OverviewDashboard;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/utils/getChartComponent.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/utils/getChartComponent.jsx
new file mode 100644
index 0000000000..da36307cc5
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/utils/getChartComponent.jsx
@@ -0,0 +1,24 @@
+import {WIDGET_DISPLAY} from 'app/views/organizationDashboard/constants';
+import AreaChart from 'app/components/charts/areaChart';
+import BarChart from 'app/components/charts/barChart';
+import LineChart from 'app/components/charts/lineChart';
+import PercentageAreaChart from 'app/components/charts/percentageAreaChart';
+import PercentageTableChart from 'app/components/charts/percentageTableChart';
+import PieChart from 'app/components/charts/pieChart';
+import StackedAreaChart from 'app/components/charts/stackedAreaChart';
+import WorldMapChart from 'app/components/charts/worldMapChart';
+
+const CHART_MAP = {
+  [WIDGET_DISPLAY.LINE_CHART]: LineChart,
+  [WIDGET_DISPLAY.AREA_CHART]: AreaChart,
+  [WIDGET_DISPLAY.STACKED_AREA_CHART]: StackedAreaChart,
+  [WIDGET_DISPLAY.BAR_CHART]: BarChart,
+  [WIDGET_DISPLAY.PIE_CHART]: PieChart,
+  [WIDGET_DISPLAY.WORLD_MAP]: WorldMapChart,
+  [WIDGET_DISPLAY.TABLE]: PercentageTableChart,
+  [WIDGET_DISPLAY.PERCENTAGE_AREA_CHART]: PercentageAreaChart,
+};
+
+export function getChartComponent({type}) {
+  return CHART_MAP[type];
+}
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/utils/getChartDataFunc.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/utils/getChartDataFunc.jsx
new file mode 100644
index 0000000000..a8c7880fe2
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/utils/getChartDataFunc.jsx
@@ -0,0 +1,31 @@
+import {WIDGET_DISPLAY} from 'app/views/organizationDashboard/constants';
+import {
+  getChartDataForWidget,
+  getChartDataByDay,
+} from 'app/views/organizationDiscover/result/utils';
+import {isTimeSeries} from 'app/views/organizationDashboard/utils/isTimeSeries';
+
+/**
+ * Get data function based on widget properties
+ */
+export function getChartDataFunc({queries, type, fieldLabelMap}) {
+  if (queries.discover.some(isTimeSeries)) {
+    return [
+      getChartDataByDay,
+      [
+        {
+          fieldLabelMap,
+        },
+      ],
+    ];
+  }
+
+  return [
+    getChartDataForWidget,
+    [
+      {
+        includePercentages: type === WIDGET_DISPLAY.TABLE,
+      },
+    ],
+  ];
+}
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/utils/getData.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/utils/getData.jsx
new file mode 100644
index 0000000000..282dc3034b
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/utils/getData.jsx
@@ -0,0 +1,100 @@
+import {WIDGET_DISPLAY} from 'app/views/organizationDashboard/constants';
+import {getChartDataFunc} from 'app/views/organizationDashboard/utils/getChartDataFunc';
+import {isTimeSeries} from 'app/views/organizationDashboard/utils/isTimeSeries';
+
+// TODO(billy): Currently only supports discover queries
+export function getData(results, widget) {
+  const {type, title, queries, yAxisMapping} = widget;
+  const isTable = type === WIDGET_DISPLAY.TABLE;
+  const [chartDataFunc, chartDataFuncArgs] = getChartDataFunc(widget);
+  const hasYAxes = yAxisMapping && yAxisMapping.length === 2;
+
+  if (isTable) {
+    const [series] = chartDataFunc(
+      results[0].data,
+      queries.discover[0],
+      ...chartDataFuncArgs
+    );
+
+    return {
+      title,
+      countTitle: 'Events',
+      height: '200px',
+      data: series.data,
+    };
+  }
+
+  let series = results
+    .map((result, i) =>
+      chartDataFunc(result.data, queries.discover[i], ...chartDataFuncArgs)
+    )
+    .reduce((acc, s) => [...acc, ...s], []);
+
+  // Has 2 y axes
+  if (hasYAxes) {
+    yAxisMapping.forEach((mappings, yAxisIndex) => {
+      mappings.forEach(seriesIndex => {
+        if (typeof series[seriesIndex] === 'undefined') {
+          return;
+        }
+
+        series[seriesIndex].yAxisIndex = yAxisIndex;
+      });
+    });
+  }
+
+  let previousPeriod = null;
+  // XXX(billy): Probably will need to be more generic in future
+  // Instead of simply doubling period for previous period
+  // we'll want to a second query with a specific period. that way
+  // we can compare to "this time last month" (or anything else besides the very last period)
+  if (widget.includePreviousPeriod) {
+    // `series` is an array of series objects
+    // need to map through each one and split up data into 2 series objects
+    // (one for previous period and one for the current period)
+    [previousPeriod, series] = series
+      .map(({data, seriesName, ...rest}) => {
+        // Split data into halves
+        const previousPeriodData = data.slice(0, Math.ceil(data.length / 2));
+        const currentPeriodData = data.slice(Math.floor(data.length / 2));
+
+        return [
+          {
+            seriesName: `${seriesName} (Previous Period)`,
+            data: previousPeriodData.map(({name, value}, index) => ({
+              value,
+              originalTimestamp: name,
+              name: currentPeriodData[index].name,
+            })),
+            ...rest,
+          },
+          {
+            seriesName,
+            data: currentPeriodData,
+            ...rest,
+          },
+        ];
+      })
+      .reduce(
+        // reduce down to a tuple of [PreviousPeriodSeriesObj[], CurrentPeriodSeriesObj[]]
+        ([accPrev, accSeries], [prev, currentSeries]) => [
+          [...accPrev, prev],
+          [...accSeries, currentSeries],
+        ],
+        [[], []]
+      );
+  }
+
+  const isTime = queries.discover.some(isTimeSeries);
+  return {
+    isGroupedByDate: isTime,
+    xAxis: {...(!isTime && {truncate: 80})},
+    grid: {
+      left: '16px',
+      right: '16px',
+    },
+    series,
+    previousPeriod,
+    yAxes: hasYAxes,
+  };
+}
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/utils/isTimeSeries.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/utils/isTimeSeries.jsx
new file mode 100644
index 0000000000..8728cecedd
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/utils/isTimeSeries.jsx
@@ -0,0 +1,4 @@
+// Consider a query a time series if
+export function isTimeSeries(query) {
+  return query.groupby.includes('time');
+}
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/widget.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/widget.jsx
new file mode 100644
index 0000000000..6892643932
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/widget.jsx
@@ -0,0 +1,147 @@
+import {withRouter} from 'react-router';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import {WIDGET_DISPLAY} from 'app/views/organizationDashboard/constants';
+import {getChartComponent} from 'app/views/organizationDashboard/utils/getChartComponent';
+import {getData} from 'app/views/organizationDashboard/utils/getData';
+import {getQueryStringFromQuery} from 'app/views/organizationDiscover/utils';
+import Button from 'app/components/button';
+import InlineSvg from 'app/components/inlineSvg';
+import SentryTypes from 'app/sentryTypes';
+import withGlobalSelection from 'app/utils/withGlobalSelection';
+import withOrganization from 'app/utils/withOrganization';
+
+import DiscoverQuery from './discoverQuery';
+
+class Widget extends React.Component {
+  static propTypes = {
+    widget: SentryTypes.Widget,
+    organization: SentryTypes.Organization,
+    selection: SentryTypes.GlobalSelection,
+    router: PropTypes.object,
+  };
+
+  handleExportToDiscover = event => {
+    const {organization, widget, router} = this.props;
+    const [firstQuery] = widget.queries.discover;
+    const {
+      datetime,
+      environments, // eslint-disable-line no-unused-vars
+      ...selection
+    } = this.props.selection;
+
+    event.stopPropagation();
+
+    // Discover does not support importing these
+    const {
+      groupby, // eslint-disable-line no-unused-vars
+      rollup, // eslint-disable-line no-unused-vars
+      orderby,
+      ...query
+    } = firstQuery;
+
+    const orderbyTimeIndex = orderby.indexOf('time');
+    let visual = 'table';
+
+    if (orderbyTimeIndex !== -1) {
+      query.orderby = `${orderbyTimeIndex === 0 ? '' : '-'}${query.aggregations[0][2]}`;
+      visual = 'line-by-day';
+    } else {
+      query.orderby = orderby;
+    }
+
+    router.push(
+      `/organizations/${organization.slug}/discover/${getQueryStringFromQuery({
+        ...query,
+        ...selection,
+        start: datetime.start,
+        end: datetime.end,
+        range: datetime.period,
+      })}&visual=${visual}`
+    );
+  };
+
+  renderResults(results) {
+    const {widget} = this.props;
+    const isTable = widget.type === WIDGET_DISPLAY.TABLE;
+
+    // get visualization based on widget data
+    const ChartComponent = getChartComponent(widget);
+    // get data func based on query
+    const chartData = getData(results, widget);
+
+    const extra = {
+      ...(isTable && {
+        headerProps: {hasButtons: true},
+        extraTitle: this.renderDiscoverButton(),
+      }),
+    };
+
+    return <ChartComponent {...chartData} {...extra} />;
+  }
+
+  renderDiscoverButton() {
+    // TODO(billy): This is temporary
+    // Need design followups
+    return (
+      <Button size="xsmall" onClick={this.handleExportToDiscover}>
+        <InlineSvg src="icon-discover" />
+      </Button>
+    );
+  }
+
+  render() {
+    const {widget} = this.props;
+    const {type, title, includePreviousPeriod, compareToPeriod, queries} = widget;
+    const isTable = type === WIDGET_DISPLAY.TABLE;
+
+    return (
+      <DiscoverQuery
+        queries={queries.discover}
+        includePreviousPeriod={includePreviousPeriod}
+        compareToPeriod={compareToPeriod}
+      >
+        {({results}) => {
+          if (!results) {
+            return <Placeholder />;
+          }
+
+          if (isTable) {
+            return this.renderResults(results);
+          }
+
+          return (
+            <Panel>
+              <StyledPanelHeader hasButtons>
+                {title}
+
+                {this.renderDiscoverButton()}
+              </StyledPanelHeader>
+
+              <StyledPanelBody>{this.renderResults(results)}</StyledPanelBody>
+            </Panel>
+          );
+        }}
+      </DiscoverQuery>
+    );
+  }
+}
+export default withRouter(withOrganization(withGlobalSelection(Widget)));
+export {Widget};
+
+// XXX Heights between panel headers with `hasButtons` are not equal :(
+const StyledPanelHeader = styled(PanelHeader)`
+  height: 46px;
+`;
+
+const StyledPanelBody = styled(PanelBody)`
+  height: 200px;
+`;
+
+const Placeholder = styled('div')`
+  background-color: ${p => p.theme.offWhite};
+  height: 248px;
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx b/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
index 60f66e0ba4..cc9662a8ad 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
@@ -260,7 +260,7 @@ class EventsChart extends React.Component {
                 seriesOptions={{
                   showSymbol: false,
                 }}
-                previousPeriod={previousTimeseriesData}
+                previousPeriod={previousTimeseriesData ? [previousTimeseriesData] : null}
                 grid={{
                   left: '30px',
                   right: '18px',
diff --git a/tests/js/fixtures/dashboard.js b/tests/js/fixtures/dashboard.js
new file mode 100644
index 0000000000..b9f77998c0
--- /dev/null
+++ b/tests/js/fixtures/dashboard.js
@@ -0,0 +1,10 @@
+import {Widget} from './widget';
+
+const DEFAULT_WIDGETS = [Widget()];
+
+export function Dashboard(widgets = DEFAULT_WIDGETS, options) {
+  return {
+    widgets,
+    title: 'Dashboard',
+  };
+}
diff --git a/tests/js/fixtures/widget.js b/tests/js/fixtures/widget.js
new file mode 100644
index 0000000000..1beb158721
--- /dev/null
+++ b/tests/js/fixtures/widget.js
@@ -0,0 +1,33 @@
+const DEFAULT_QUERIES = {
+  discover: [
+    {
+      fields: [],
+      conditions: [['user.email', 'IS NOT NULL', null]],
+      aggregations: [['uniq', 'user.email', 'Known Users']],
+      limit: 1000,
+
+      orderby: '-time',
+      groupby: ['time'],
+      rollup: 86400,
+    },
+    {
+      fields: [],
+      conditions: [['user.email', 'IS NULL', null]],
+      aggregations: [['count()', null, 'Anonymous Users']],
+      limit: 1000,
+
+      orderby: '-time',
+      groupby: ['time'],
+      rollup: 86400,
+    },
+  ],
+};
+
+export function Widget(queries = {...DEFAULT_QUERIES}, options) {
+  return {
+    type: 'line',
+    queries,
+    title: 'Widget',
+    ...options,
+  };
+}
diff --git a/tests/js/spec/actionCreators/events.spec.jsx b/tests/js/spec/actionCreators/events.spec.jsx
index bbb65457b7..abf3d4cd30 100644
--- a/tests/js/spec/actionCreators/events.spec.jsx
+++ b/tests/js/spec/actionCreators/events.spec.jsx
@@ -86,41 +86,23 @@ describe('Events ActionCreator', function() {
   it('requests events stats with absolute period including previous period', async function() {
     const start = new Date('2017-10-12T12:00:00.000Z');
     const end = new Date('2017-10-17T00:00:00.000Z');
-    const result = await doEventsRequest(api, {
+    await doEventsRequest(api, {
       ...opts,
       includePrevious: true,
       start,
       end,
     });
 
-    expect(mock).toHaveBeenCalledTimes(2);
-
-    // Previous period call
-    expect(mock).toHaveBeenNthCalledWith(
-      1,
-      '/organizations/org-slug/events-stats/',
-      expect.objectContaining({
-        query: expect.objectContaining({
-          project: [project.id],
-          environment: [],
-          start: '2017-10-08T00:00:00',
-          end: '2017-10-12T12:00:00',
-        }),
-      })
-    );
-
     expect(mock).toHaveBeenLastCalledWith(
       '/organizations/org-slug/events-stats/',
       expect.objectContaining({
         query: expect.objectContaining({
           project: [project.id],
           environment: [],
-          start: '2017-10-12T12:00:00',
+          start: '2017-10-08T00:00:00',
           end: '2017-10-17T00:00:00',
         }),
       })
     );
-
-    expect(result.data).toHaveLength(12);
   });
 });
diff --git a/tests/js/spec/utils/getPeriod.spec.jsx b/tests/js/spec/utils/getPeriod.spec.jsx
new file mode 100644
index 0000000000..bfa8762761
--- /dev/null
+++ b/tests/js/spec/utils/getPeriod.spec.jsx
@@ -0,0 +1,36 @@
+import {getPeriod} from 'app/utils/getPeriod';
+
+describe('getPeriod()', function() {
+  const start = new Date('2017-10-03T02:41:20.000Z');
+  const end = new Date('2017-10-17T14:31:42.000Z');
+
+  it('prioritizes period over start/end', function() {
+    const periodObj = {period: '7d', start, end};
+    expect(getPeriod(periodObj)).toEqual({
+      statsPeriod: '7d',
+    });
+  });
+
+  it('doubles relative period', function() {
+    const periodObj = {period: '7d'};
+    expect(getPeriod(periodObj, {shouldDoublePeriod: true})).toEqual({
+      statsPeriod: '14d',
+    });
+  });
+
+  it('returns start and end dates', function() {
+    const periodObj = {start, end};
+    expect(getPeriod(periodObj)).toEqual({
+      start: '2017-10-03T02:41:20',
+      end: '2017-10-17T14:31:42',
+    });
+  });
+
+  it('doubles period when given start and end dates', function() {
+    const periodObj = {start, end};
+    expect(getPeriod(periodObj, {shouldDoublePeriod: true})).toEqual({
+      start: '2017-09-18T14:50:58',
+      end: '2017-10-17T14:31:42',
+    });
+  });
+});
diff --git a/tests/js/spec/views/organizationDashboard/dashboard.spec.jsx b/tests/js/spec/views/organizationDashboard/dashboard.spec.jsx
new file mode 100644
index 0000000000..ea4efcf5d7
--- /dev/null
+++ b/tests/js/spec/views/organizationDashboard/dashboard.spec.jsx
@@ -0,0 +1,157 @@
+import {mount} from 'enzyme';
+import React from 'react';
+
+import {initializeOrg} from 'app-test/helpers/initializeOrg';
+import {mockRouterPush} from 'app-test/helpers/mockRouterPush';
+
+import Dashboard from 'app/views/organizationDashboard/dashboard';
+import OrganizationDashboardContainer from 'app/views/organizationDashboard';
+
+jest.mock('app/utils/withLatestContext');
+
+describe('OrganizationDashboard', function() {
+  const {organization, router, routerContext} = initializeOrg({
+    projects: [{isMember: true}, {isMember: true, slug: 'new-project', id: 3}],
+    organization: {
+      features: ['sentry10'],
+    },
+    router: {
+      location: {
+        pathname: '/organizations/org-slug/dashboard/?statsPeriod=14d&utc=true',
+        query: {},
+      },
+    },
+  });
+  const org = organization;
+
+  let discoverMock;
+
+  beforeEach(function() {
+    router.push.mockRestore();
+    MockApiClient.clearMockResponses();
+    MockApiClient.addMockResponse({
+      url: `/organizations/${org.slug}/environments/`,
+      body: TestStubs.Environments(),
+    });
+    discoverMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/discover/query/?per_page=1000&cursor=0:0:1',
+      method: 'POST',
+      body: {
+        data: [],
+        meta: [],
+        timing: [],
+      },
+    });
+  });
+
+  it('queries and renders discover-based widgets grouped by time', async function() {
+    let wrapper = mount(
+      <OrganizationDashboardContainer>
+        <Dashboard {...TestStubs.Dashboard()} />
+      </OrganizationDashboardContainer>,
+      routerContext
+    );
+    mockRouterPush(wrapper, router);
+
+    expect(discoverMock).toHaveBeenCalledTimes(2);
+    expect(discoverMock).toHaveBeenCalledWith(
+      expect.anything(),
+      expect.objectContaining({
+        data: expect.objectContaining({
+          environments: [],
+          projects: [2, 3],
+          range: '14d',
+
+          fields: [],
+          conditions: [['user.email', 'IS NOT NULL', null]],
+          aggregations: [['uniq', 'user.email', 'Known Users']],
+          limit: 1000,
+          orderby: '-time',
+          groupby: ['time'],
+          rollup: 86400,
+        }),
+      })
+    );
+    expect(discoverMock).toHaveBeenCalledWith(
+      expect.anything(),
+      expect.objectContaining({
+        data: expect.objectContaining({
+          environments: [],
+          projects: [2, 3],
+          range: '14d',
+
+          fields: [],
+          conditions: [['user.email', 'IS NULL', null]],
+          aggregations: [['count()', null, 'Anonymous Users']],
+          limit: 1000,
+          orderby: '-time',
+          groupby: ['time'],
+          rollup: 86400,
+        }),
+      })
+    );
+
+    await tick();
+    wrapper.update();
+
+    // Should have one LineChart
+    expect(wrapper.find('LineChart')).toHaveLength(1);
+  });
+
+  it('queries and renders discover-based widgets not grouped by time', async function() {
+    let wrapper = mount(
+      <OrganizationDashboardContainer>
+        <Dashboard
+          {...TestStubs.Dashboard([
+            TestStubs.Widget(
+              {
+                discover: [
+                  {
+                    fields: ['browser.name'],
+                    conditions: [],
+                    aggregations: [['count()', null, 'count']],
+                    limit: 1000,
+
+                    orderby: '-count',
+                    groupby: ['browser.name'],
+                  },
+                ],
+              },
+              {
+                type: 'table',
+                title: 'Table',
+              }
+            ),
+          ])}
+        />
+      </OrganizationDashboardContainer>,
+      routerContext
+    );
+    mockRouterPush(wrapper, router);
+
+    expect(discoverMock).toHaveBeenCalledTimes(1);
+    expect(discoverMock).toHaveBeenCalledWith(
+      expect.anything(),
+      expect.objectContaining({
+        data: expect.objectContaining({
+          environments: [],
+          projects: [2, 3],
+          range: '14d',
+
+          fields: ['browser.name'],
+          conditions: [],
+          aggregations: [['count()', null, 'count']],
+          limit: 1000,
+          orderby: '-count',
+          groupby: ['browser.name'],
+        }),
+      })
+    );
+
+    await tick();
+    wrapper.update();
+
+    // Should have one LineChart
+    expect(wrapper.find('PercentageTableChart')).toHaveLength(1);
+  });
+});
