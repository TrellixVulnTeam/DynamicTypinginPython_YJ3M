commit ec558091a3a8af90c62484905be9cfd5e74c1222
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Jul 19 10:05:42 2018 -0700

    feat(ui): Add `<TableChart>` component (#9096)
    
    ![image](https://user-images.githubusercontent.com/79684/42911963-f467d846-8aa1-11e8-90ea-a70cf028e20c.png)

diff --git a/docs-ui/components/tableChart.stories.js b/docs-ui/components/tableChart.stories.js
new file mode 100644
index 0000000000..209f1848ce
--- /dev/null
+++ b/docs-ui/components/tableChart.stories.js
@@ -0,0 +1,44 @@
+import React from 'react';
+import {storiesOf} from '@storybook/react';
+import {withInfo} from '@storybook/addon-info';
+import {number, text, boolean, array} from '@storybook/addon-knobs';
+
+import TableChart from 'app/components/charts/tableChart';
+
+storiesOf('Charts/TableChart', module).add(
+  'default',
+  withInfo(
+    'A simple table that can calculate totals and relative share as a bar inside of a row'
+  )(() => {
+    const ERROR_TYPE_DATA = [
+      ['TypeError', 50, 40, 30],
+      ['SyntaxError', 40, 30, 20],
+      ['NameError', 15, 15, 15],
+      ['ZeroDivisionError', 20, 10, 0],
+    ];
+
+    return (
+      <TableChart
+        data={ERROR_TYPE_DATA}
+        dataStartIndex={number('Data Start Index', 1)}
+        showRowTotal={boolean('Show Row Total', true)}
+        showColumnTotal={boolean('Show Column Total', true)}
+        shadeRowPercentage={boolean('Shade Row %', true)}
+        headers={array('Headers', [
+          text('Column 1', 'Exception Type'),
+          text('Column 2', 'Project 1'),
+          text('Column 3', 'Project 2'),
+          text('Column 4', 'Project 3'),
+        ])}
+        widths={array('Widths', [
+          number('Column 1', null),
+          number('Column 2', 100),
+          number('Column 3', 100),
+          number('Column 4', 100),
+        ])}
+        rowTotalLabel={text('Row Total Label', 'Row Total')}
+        rowTotalWidth={number('Row Total Column Width', 120)}
+      />
+    );
+  })
+);
diff --git a/src/sentry/static/sentry/app/components/charts/tableChart/index.jsx b/src/sentry/static/sentry/app/components/charts/tableChart/index.jsx
new file mode 100644
index 0000000000..77a73ffc0d
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/tableChart/index.jsx
@@ -0,0 +1,392 @@
+import {Flex, Box} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {Panel, PanelHeader, PanelItem} from 'app/components/panels';
+
+export const TableChart = styled(
+  class TableChartComponent extends React.Component {
+    static propTypes = {
+      data: PropTypes.arrayOf(
+        PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number]))
+      ),
+      /**
+       * The column index where your data starts.
+       * This is used to calculate totals.
+       *
+       * Will not work if you have mixed string/number columns
+       */
+      dataStartIndex: PropTypes.number,
+      widths: PropTypes.arrayOf(PropTypes.number),
+      getValue: PropTypes.func,
+      renderTableHeader: PropTypes.func,
+      renderBody: PropTypes.func,
+      renderHeaderCell: PropTypes.func,
+      renderDataCell: PropTypes.func,
+      shadeRowPercentage: PropTypes.bool,
+      showRowTotal: PropTypes.bool,
+      showColumnTotal: PropTypes.bool,
+      rowTotalLabel: PropTypes.string,
+      columnTotalLabel: PropTypes.string,
+    };
+
+    static get defaultProps() {
+      // Default renderer for Table Header
+      const defaultRenderTableHeader = ({
+        headers,
+        renderRow,
+        rowTotalLabel,
+        showRowTotal,
+        ...props
+      }) => {
+        const headersWithTotalColumn = [
+          ...(headers || []),
+          ...(showRowTotal ? [rowTotalLabel] : []),
+        ];
+
+        return (
+          <PanelHeader>
+            {renderRow({
+              isTableHeader: true,
+              items: headersWithTotalColumn,
+              rowIndex: -1,
+              showRowTotal,
+              ...props,
+            })}
+          </PanelHeader>
+        );
+      };
+
+      // Default renderer for Table Body (all the data rows)
+      const defaultRenderBody = ({
+        widths,
+        data,
+        dataTotals,
+        dataMaybeWithTotals,
+        renderRow,
+        shadeRowPercentage,
+        showRowTotal,
+        ...props
+      }) =>
+        dataMaybeWithTotals.map((row, rowIndex) => {
+          let lastRowIndex = dataMaybeWithTotals.length - 1;
+          let isLastRow = rowIndex === lastRowIndex;
+          let showBar = !isLastRow && shadeRowPercentage;
+
+          // rowTotals does not include the grand total of data
+          let rowTotal =
+            showRowTotal && rowIndex < data.length
+              ? [dataTotals.rowTotals[rowIndex]]
+              : [];
+
+          return (
+            <TableChartRow
+              key={rowIndex}
+              showBar={showBar}
+              value={dataTotals.rowTotals[rowIndex]}
+              total={dataTotals.total}
+              widths={widths}
+            >
+              {renderRow({
+                css: {zIndex: showBar ? '2' : undefined},
+                ...props,
+                data,
+                widths,
+                items: [...row, ...rowTotal],
+                rowIndex,
+                showRowTotal,
+              })}
+            </TableChartRow>
+          );
+        });
+
+      // Default renderer for ALL rows (including header + body so that both can share the same DOM structure + styles)
+      const defaultRenderRow = ({
+        dataStartIndex,
+        css,
+        items,
+        rowHeaders,
+        rowData,
+        isTableHeader,
+        rowIndex,
+        renderCell,
+        showRowTotal,
+        rowTotalWidth,
+        widths,
+        ...props
+      }) => {
+        return (
+          <Flex flex={1} css={css}>
+            {items &&
+              items.slice(0, dataStartIndex).map((rowHeaderValue, columnIndex) =>
+                renderCell({
+                  isTableHeader,
+                  isHeader: true,
+                  value: rowHeaderValue,
+                  columnIndex,
+                  rowIndex,
+                  width:
+                    columnIndex < widths.length
+                      ? widths[columnIndex]
+                      : showRowTotal ? rowTotalWidth : null,
+                  showRowTotal,
+                  ...props,
+                })
+              )}
+
+            <DataGroup>
+              {items &&
+                items.slice(dataStartIndex).map((rowDataValue, columnIndex) => {
+                  let index = columnIndex + dataStartIndex;
+                  let renderCellProps = {
+                    isTableHeader,
+                    value: rowDataValue,
+                    columnIndex: index,
+                    rowIndex,
+                    width:
+                      index < widths.length
+                        ? widths[index]
+                        : showRowTotal ? rowTotalWidth : null,
+                    justify: 'right',
+                    showRowTotal,
+                    ...props,
+                  };
+
+                  return renderCell(renderCellProps);
+                })}
+            </DataGroup>
+          </Flex>
+        );
+      };
+
+      // Default renderer for ALL cells
+      const defaultRenderCell = p => {
+        let {
+          isTableHeader,
+          isHeader,
+          justify,
+          width,
+          rowIndex,
+          columnIndex,
+          renderTableHeaderCell,
+          renderHeaderCell,
+          renderDataCell,
+        } = p;
+
+        return (
+          <Cell justify={justify} width={width} key={`${rowIndex}-${columnIndex}`}>
+            {isTableHeader
+              ? renderTableHeaderCell(p)
+              : isHeader ? renderHeaderCell(p) : renderDataCell(p)}
+          </Cell>
+        );
+      };
+
+      const defaultRenderDataCell = ({
+        isTableHeader,
+        justify,
+        value,
+        width,
+        rowIndex,
+        columnIndex,
+      }) => value;
+      const defaultRenderHeaderCell = defaultRenderDataCell;
+      const defaultRenderTableHeaderCell = defaultRenderHeaderCell;
+
+      return {
+        dataStartIndex: 1,
+        getValue: i => i,
+        renderTableHeader: defaultRenderTableHeader,
+        renderBody: defaultRenderBody,
+        renderRow: defaultRenderRow,
+        renderCell: defaultRenderCell,
+        renderDataCell: defaultRenderDataCell,
+        renderHeaderCell: defaultRenderHeaderCell,
+        renderTableHeaderCell: defaultRenderTableHeaderCell,
+        columnTotalLabel: 'Total',
+        rowTotalLabel: 'Total',
+        rowTotalWidth: 120,
+      };
+    }
+
+    // TODO(billy): memoize?
+    getTotals(rows) {
+      if (!rows) return [];
+
+      const {getValue, dataStartIndex} = this.props;
+
+      const reduceSum = (sum, val) => (sum += getValue(val));
+      const rowTotals = rows.map((row, rowIndex) =>
+        row.slice(dataStartIndex).reduce(reduceSum, 0)
+      );
+      const columnTotals = rows.length
+        ? rows[0]
+            .slice(dataStartIndex)
+            .map((r, currentColumn) =>
+              rows.reduce(
+                (sum, row) => (sum += getValue(row[currentColumn + dataStartIndex])),
+                0
+              )
+            )
+        : [];
+      const total = columnTotals.reduce(reduceSum, 0);
+
+      rowTotals.push(total);
+
+      return {
+        rowTotals,
+        columnTotals,
+        total,
+      };
+    }
+
+    getDataWithTotals(dataTotals) {
+      let {
+        data,
+        dataStartIndex,
+        showRowTotal,
+        showColumnTotal,
+        columnTotalLabel,
+      } = this.props;
+
+      if (!data) return [];
+
+      let totalRow = showColumnTotal
+        ? [
+            [
+              // Label for Total Row
+              columnTotalLabel,
+
+              // Need to fill empty columns between label and `dataStartIndex`,
+              ...[...Array(dataStartIndex - 1)].map(() => ''),
+
+              // totals for each data column
+              ...dataTotals.columnTotals,
+
+              // grand total if `showRowTotal` is enabled
+              ...(showRowTotal ? [dataTotals.total] : []),
+            ],
+          ]
+        : [];
+
+      return [...data, ...totalRow];
+    }
+
+    render() {
+      let {
+        className,
+        children,
+        data,
+        dataStartIndex,
+        getValue,
+        showRowTotal,
+        showColumnTotal,
+        shadeRowPercentage,
+        renderTableHeader,
+        renderBody,
+        widths,
+        ...props
+      } = this.props;
+
+      // If we need to calculate totals...
+      let dataTotals =
+        showRowTotal || showColumnTotal || shadeRowPercentage ? this.getTotals(data) : [];
+      let dataMaybeWithTotals = this.getDataWithTotals(dataTotals);
+
+      // For better render customization
+      let isRenderProp = typeof children === 'function';
+      let renderProps = {
+        data,
+        dataTotals,
+        dataMaybeWithTotals,
+        dataStartIndex,
+        getValue,
+        showRowTotal,
+        showColumnTotal,
+        shadeRowPercentage,
+        widths,
+        ...props,
+      };
+
+      return (
+        <Panel className={className}>
+          {isRenderProp ? (
+            children(renderProps)
+          ) : (
+            <React.Fragment>
+              {renderTableHeader(renderProps)}
+              {renderBody(renderProps)}
+            </React.Fragment>
+          )}
+        </Panel>
+      );
+    }
+  }
+)`
+  flex: 1;
+`;
+
+export default TableChart;
+
+export const TableChartRow = styled(
+  class extends React.Component {
+    static propTypes = {
+      /**
+       * Show percentage as a bar in the row
+       */
+      showBar: PropTypes.bool,
+      /**
+       * Total value of row
+       */
+      value: PropTypes.number,
+      /**
+       * Total value of all rows
+       */
+      total: PropTypes.number,
+    };
+
+    render() {
+      let {className, showBar, total, value, children} = this.props;
+      let barWidth =
+        total > 0 && typeof value === 'number' ? Math.round(value / total * 100) : 0;
+
+      return (
+        <PanelItem className={className}>
+          {children}
+          {showBar && <TableChartRowBar width={barWidth} />}
+        </PanelItem>
+      );
+    }
+  }
+)`
+  position: relative;
+  flex: 1;
+`;
+
+/**
+ * Shows relative percentage as width of bar inside of a table's row
+ */
+export const TableChartRowBar = styled(({width, ...props}) => <div {...props} />)`
+  position: absolute;
+  top: 0;
+  bottom: 0;
+  left: 0;
+  right: ${p => 100 - p.width}%;
+  background-color: ${p => p.theme.offWhite2};
+  z-index: 1;
+`;
+
+export const Cell = styled(Box)`
+  z-index: 2;
+  display: block;
+  white-space: nowrap;
+  overflow: hidden;
+  text-overflow: ellipsis;
+  ${p => (!p.width ? 'flex: 1' : '')};
+  ${p => (p.justify === 'right' ? 'text-align: right' : '')};
+`;
+
+const DataGroup = styled(Flex)`
+  flex-shrink: 0;
+`;
diff --git a/tests/js/spec/components/charts/tableChart/index.spec.jsx b/tests/js/spec/components/charts/tableChart/index.spec.jsx
new file mode 100644
index 0000000000..740bcd10f8
--- /dev/null
+++ b/tests/js/spec/components/charts/tableChart/index.spec.jsx
@@ -0,0 +1,225 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import TableChart from 'app/components/charts/tableChart';
+
+describe('TableChart', function() {
+  it('calculates row and column totals and passes to renderers', function() {
+    const ERROR_TYPE_DATA = [
+      ['TypeError', 50, 40, 30],
+      ['SyntaxError', 40, 30, 20],
+      ['NameError', 15, 15, 15],
+      ['ZeroDivisionError', 20, 10, 0],
+    ];
+    const renderer = jest.fn();
+    mount(
+      <TableChart
+        title="Error Type"
+        data={ERROR_TYPE_DATA}
+        showRowTotal
+        showColumnTotal
+        widths={[null, 80, 80, 80, 100]}
+      >
+        {renderer}
+      </TableChart>
+    );
+
+    expect(renderer).toHaveBeenCalledWith(
+      expect.objectContaining({
+        data: ERROR_TYPE_DATA,
+        dataTotals: {
+          columnTotals: [125, 95, 65],
+          rowTotals: [120, 90, 45, 30, 285],
+          total: 285,
+        },
+        dataMaybeWithTotals: [
+          ['TypeError', 50, 40, 30],
+          ['SyntaxError', 40, 30, 20],
+          ['NameError', 15, 15, 15],
+          ['ZeroDivisionError', 20, 10, 0],
+          ['Total', 125, 95, 65, 285],
+        ],
+      })
+    );
+  });
+
+  it('calculates totals with multiple non-data columns', function() {
+    const ERROR_TYPE_DATA = [
+      ['TypeError', 'Label', 50, 40, 30],
+      ['SyntaxError', 'Label', 40, 30, 20],
+      ['NameError', 'Label', 15, 15, 15],
+      ['ZeroDivisionError', 'Label', 20, 10, 0],
+    ];
+    const renderer = jest.fn();
+    mount(
+      <TableChart
+        title="Error Type"
+        data={ERROR_TYPE_DATA}
+        showRowTotal
+        showColumnTotal
+        dataStartIndex={2}
+        widths={[null, 80, 80, 80, 100]}
+      >
+        {renderer}
+      </TableChart>
+    );
+
+    expect(renderer).toHaveBeenCalledWith(
+      expect.objectContaining({
+        data: ERROR_TYPE_DATA,
+        dataTotals: {
+          columnTotals: [125, 95, 65],
+          rowTotals: [120, 90, 45, 30, 285],
+          total: 285,
+        },
+        dataMaybeWithTotals: [
+          ['TypeError', 'Label', 50, 40, 30],
+          ['SyntaxError', 'Label', 40, 30, 20],
+          ['NameError', 'Label', 15, 15, 15],
+          ['ZeroDivisionError', 'Label', 20, 10, 0],
+          ['Total', '', 125, 95, 65, 285],
+        ],
+      })
+    );
+  });
+
+  it('renders percentage bar on correct rows', function() {
+    const ERROR_TYPE_DATA = [['TypeError', 50, 40, 30], ['SyntaxError', 40, 30, 20]];
+    const wrapper = mount(
+      <TableChart
+        title="Error Type"
+        data={ERROR_TYPE_DATA}
+        showRowTotal
+        showColumnTotal
+        shadeRowPercentage
+        widths={[null, 80, 80, 80, 100]}
+      />
+    );
+
+    expect(wrapper.find('TableChartRowBar')).toHaveLength(2);
+    expect(wrapper.find('TableChartRow')).toHaveLength(3);
+  });
+
+  it('renders headers', function() {
+    const renderer = jest.fn();
+    const headers = ['Foo', 'Bar', 'Baz'];
+    mount(
+      <TableChart
+        title="Error Type"
+        showRowTotal={false}
+        headers={['Foo', 'Bar', 'Baz']}
+        widths={[null, 100, 100]}
+        renderRow={renderer}
+      />
+    );
+
+    expect(renderer).toHaveBeenCalledTimes(1);
+    expect(renderer).toHaveBeenCalledWith(
+      expect.objectContaining({
+        items: headers,
+      })
+    );
+  });
+
+  it('renders headers with row total column', function() {
+    const renderer = jest.fn();
+    mount(
+      <TableChart
+        title="Error Type"
+        showRowTotal
+        headers={['Foo', 'Bar', 'Baz']}
+        widths={[null, 100, 100]}
+        renderRow={renderer}
+        rowTotalLabel="Row Total"
+        rowTotalWidth={120}
+      />
+    );
+
+    expect(renderer).toHaveBeenCalledWith(
+      expect.objectContaining({
+        items: ['Foo', 'Bar', 'Baz', 'Row Total'],
+      })
+    );
+  });
+
+  it('renders correct cells', function() {
+    const ERROR_TYPE_DATA = [
+      ['TypeError', 50, 40, 30],
+      ['SyntaxError', 40, 30, 20],
+      ['NameError', 15, 15, 15],
+      ['ZeroDivisionError', 20, 10, 0],
+    ];
+    const renderDataCell = jest.fn();
+    const renderHeaderCell = jest.fn();
+    const renderTableHeaderCell = jest.fn();
+    mount(
+      <TableChart
+        title="Error Type"
+        showRowTotal
+        showColumnTotal
+        data={ERROR_TYPE_DATA}
+        headers={['', '', '', '']}
+        widths={[null, 100, 100]}
+        rowTotalLabel="Row Total"
+        columnTotalLabel="Column Total"
+        rowTotalWidth={111}
+        renderDataCell={renderDataCell}
+        renderHeaderCell={renderHeaderCell}
+        renderTableHeaderCell={renderTableHeaderCell}
+      />
+    );
+
+    // table headers == Number of data columns + total column
+    expect(renderTableHeaderCell).toHaveBeenCalledTimes(5);
+    expect(renderTableHeaderCell).toHaveBeenLastCalledWith(
+      expect.objectContaining({
+        width: 111,
+        value: 'Row Total',
+      })
+    );
+
+    // header cells is the number of data rows + total row (e.g. no table header row)
+    expect(renderHeaderCell).toHaveBeenCalledTimes(5);
+    expect(renderHeaderCell).toHaveBeenLastCalledWith(
+      expect.objectContaining({
+        width: null,
+        value: 'Column Total',
+      })
+    );
+
+    // data cells is the table without table header row and without header cells (includes totals)
+    expect(renderDataCell).toHaveBeenCalledTimes(20);
+    [
+      50,
+      40,
+      30,
+      120,
+      40,
+      30,
+      20,
+      90,
+      15,
+      15,
+      15,
+      45,
+      20,
+      10,
+      0,
+      30,
+      125,
+      95,
+      65,
+      285,
+    ].forEach((value, i) =>
+      expect(renderDataCell).toHaveBeenNthCalledWith(
+        i + 1,
+        expect.objectContaining({value})
+      )
+    );
+    expect(renderDataCell).toHaveBeenLastCalledWith(
+      expect.objectContaining({
+        width: 111,
+      })
+    );
+  });
+});
