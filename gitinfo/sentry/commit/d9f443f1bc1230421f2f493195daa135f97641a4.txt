commit d9f443f1bc1230421f2f493195daa135f97641a4
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Nov 15 09:37:45 2018 -0800

    fix(org-events): Fix events table not updating on changes (#10594)
    
    Fixes APP-781

diff --git a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
index 64f70f183e..62442b39ef 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
@@ -31,9 +31,10 @@ class OrganizationEvents extends AsyncView {
       return true;
     }
 
-    const isDiff = ['path', 'query', 'search'].find(
-      key => !isEqual(this.props[key], nextProps[key])
+    const isDiff = ['path', 'search'].find(
+      key => !isEqual(this.props.location[key], nextProps.location[key])
     );
+
     if (isDiff) {
       return true;
     }
diff --git a/tests/js/spec/views/organizationEvents/events.spec.jsx b/tests/js/spec/views/organizationEvents/events.spec.jsx
index e977979382..04c4005177 100644
--- a/tests/js/spec/views/organizationEvents/events.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/events.spec.jsx
@@ -8,15 +8,20 @@ jest.mock('app/utils/withLatestContext');
 describe('OrganizationEventsErrors', function() {
   const project = TestStubs.Project({isMember: true});
   const org = TestStubs.Organization({projects: [project]});
-  MockApiClient.addMockResponse({
-    url: '/organizations/org-slug/events/',
-    body: (url, opts) => [TestStubs.OrganizationEvent(opts.query)],
-  });
-  const healthGraphMock = MockApiClient.addMockResponse({
-    url: '/organizations/org-slug/health/graph/',
-    body: (url, opts) => {
-      return TestStubs.HealthGraph(opts.query);
-    },
+  let eventsMock;
+  let healthGraphMock;
+
+  beforeEach(function() {
+    eventsMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/events/',
+      body: (url, opts) => [TestStubs.OrganizationEvent(opts.query)],
+    });
+    healthGraphMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/health/graph/',
+      body: (url, opts) => {
+        return TestStubs.HealthGraph(opts.query);
+      },
+    });
   });
 
   it('renders events table', async function() {
@@ -30,4 +35,53 @@ describe('OrganizationEventsErrors', function() {
     expect(wrapper.find('LoadingIndicator')).toHaveLength(0);
     expect(wrapper.find('IdBadge')).toHaveLength(2);
   });
+
+  // This tests the component's `shouldComponentUpdate`
+  // Use `search` to compare instead of `query` because that's what we check in `AsyncComponent`
+  it('location.query changes updates events table', async function() {
+    let wrapper = mount(
+      <OrganizationEvents
+        organization={org}
+        location={{
+          search: '?statsPeriod=14d',
+          query: {
+            statsPeriod: '14d',
+          },
+        }}
+      />,
+      TestStubs.routerContext()
+    );
+
+    expect(eventsMock).toHaveBeenCalledWith(
+      expect.any(String),
+      expect.objectContaining({
+        query: {
+          statsPeriod: '14d',
+        },
+      })
+    );
+
+    eventsMock.mockClear();
+
+    wrapper.setProps({
+      location: {
+        query: {
+          start: '2017-10-01T04:00:00',
+          end: '2017-10-02T03:59:59',
+        },
+        search: '?start=2017-10-01T04:00:00&end=2017-10-02T03:59:59',
+      },
+    });
+    wrapper.update();
+
+    expect(eventsMock).toHaveBeenLastCalledWith(
+      expect.any(String),
+      expect.objectContaining({
+        query: {
+          start: '2017-10-01T04:00:00',
+          end: '2017-10-02T03:59:59',
+        },
+      })
+    );
+  });
 });
diff --git a/tests/js/spec/views/organizationEvents/index.spec.jsx b/tests/js/spec/views/organizationEvents/index.spec.jsx
index 46c648d7f5..511706442d 100644
--- a/tests/js/spec/views/organizationEvents/index.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/index.spec.jsx
@@ -185,4 +185,33 @@ describe('OrganizationEvents', function() {
       },
     });
   });
+
+  it('changes to absolute time', async function() {
+    const start = new Date('2017-10-01T04:00:00.000Z');
+    const end = new Date('2017-10-02T03:59:59.000Z');
+
+    wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
+
+    await wrapper.find('SelectorItem[value="absolute"]').simulate('click');
+
+    // Oct 1st
+    wrapper
+      .find('DayCell')
+      .at(0)
+      .simulate('mouseUp');
+
+    expect(wrapper.state('period')).toEqual(null);
+    expect(wrapper.state('start')).toEqual(start);
+    expect(wrapper.state('end')).toEqual(end);
+
+    wrapper.find('TimeRangeSelector StyledChevron').simulate('click');
+
+    expect(router.push).toHaveBeenCalledWith({
+      pathname: '/organizations/org-slug/events/',
+      query: {
+        start: '2017-10-01T04:00:00',
+        end: '2017-10-02T03:59:59',
+      },
+    });
+  });
 });
