commit 70f6f13587c0c93fd37048d94f857504a7aacd18
Author: Stephen Cefali <scefali@sentry.io>
Date:   Thu Jan 2 10:11:14 2020 -0800

    chore(ts): convert resourceSubscriptions (#16218)

diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionsObserver.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionsObserver.tsx
index 10d9d5d131..6588a49269 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionsObserver.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionsObserver.tsx
@@ -38,7 +38,7 @@ export default class PermissionsObserver extends React.Component<Props, State> {
     appPublished: false,
   };
 
-  constructor(props) {
+  constructor(props: Props) {
     super(props);
     this.state = {
       permissions: this.scopeListToPermissionState(),
@@ -60,11 +60,11 @@ export default class PermissionsObserver extends React.Component<Props, State> {
     return toResourcePermissions(this.props.scopes);
   }
 
-  onPermissionChange = permissions => {
+  onPermissionChange = (permissions: Permissions) => {
     this.setState({permissions});
   };
 
-  onEventChange = events => {
+  onEventChange = (events: WebhookEvent[]) => {
     this.setState({events});
   };
 
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/resourceSubscriptions.jsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/resourceSubscriptions.tsx
similarity index 79%
rename from src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/resourceSubscriptions.jsx
rename to src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/resourceSubscriptions.tsx
index ca015271d4..b797bbb0ed 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/resourceSubscriptions.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/resourceSubscriptions.tsx
@@ -7,8 +7,19 @@ import {
   PERMISSIONS_MAP,
 } from 'app/views/settings/organizationDeveloperSettings/constants';
 import styled from 'react-emotion';
+import {WebhookEvent, Permissions} from 'app/types';
+import {Context} from 'app/components/forms/form';
 
-export default class Subscriptions extends React.Component {
+type Resource = typeof EVENT_CHOICES[number];
+
+type Props = {
+  permissions: Permissions;
+  events: WebhookEvent[];
+  onChange: (events: WebhookEvent[]) => void;
+  webhookDisabled: boolean;
+};
+
+export default class Subscriptions extends React.Component<Props> {
   static contextTypes = {
     router: PropTypes.object.isRequired,
     form: PropTypes.object,
@@ -25,12 +36,12 @@ export default class Subscriptions extends React.Component {
     webhookDisabled: false,
   };
 
-  constructor(...args) {
-    super(...args);
+  constructor(props: Props, context: Context) {
+    super(props, context);
     this.context.form.setValue('events', this.props.events);
   }
 
-  componentWillReceiveProps(nextProps) {
+  componentWillReceiveProps(nextProps: Props) {
     // if webhooks are disabled, unset the events
     if (nextProps.webhookDisabled && this.props.events.length) {
       this.save([]);
@@ -49,13 +60,13 @@ export default class Subscriptions extends React.Component {
     }
   }
 
-  onChange = (resource, checked) => {
+  onChange = (resource: Resource, checked: boolean) => {
     const events = new Set(this.props.events);
     checked ? events.add(resource) : events.delete(resource);
     this.save(Array.from(events));
   };
 
-  save = events => {
+  save = (events: WebhookEvent[]) => {
     this.props.onChange(events);
     this.context.form.setValue('events', events);
   };
