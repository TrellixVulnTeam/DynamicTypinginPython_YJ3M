commit 9cefe0c1b25567a456847c06aa6a5d010dbef3a1
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Oct 15 18:56:44 2015 -0700

    Reject CSP reports from chrome-extension:// urls

diff --git a/src/sentry/interfaces/csp.py b/src/sentry/interfaces/csp.py
index a8296efec7..520731ef8f 100644
--- a/src/sentry/interfaces/csp.py
+++ b/src/sentry/interfaces/csp.py
@@ -75,6 +75,8 @@ DIRECTIVE_TO_MESSAGES = {
 
 DEFAULT_MESSAGE = ('blocked {directive!r} from {uri!r}', 'blocked inline {directive!r}')
 
+DISALLOWED_SOURCES = ('chrome-extension://',)
+
 
 class Csp(Interface):
     """
@@ -105,6 +107,12 @@ class Csp(Interface):
         if kwargs['blocked_uri'] in ('about', 'data'):
             raise InterfaceValidationError("Invalid value for 'blocked-uri'")
 
+        # Here, we want to block reports that are coming from browser extensions
+        # and other sources that are meaningless
+        if kwargs['source_file'] is not None:
+            if kwargs['source_file'].startswith(DISALLOWED_SOURCES):
+                raise InterfaceValidationError("Invalid value for 'source-file'")
+
         # Anything resulting from an "inline" whatever violation is either sent
         # as 'self', or left off. In the case if it missing, we want to noramalize.
         if not kwargs['blocked_uri']:
diff --git a/tests/sentry/interfaces/test_csp.py b/tests/sentry/interfaces/test_csp.py
index 568a239cd3..b5fb07e53b 100644
--- a/tests/sentry/interfaces/test_csp.py
+++ b/tests/sentry/interfaces/test_csp.py
@@ -34,10 +34,21 @@ class CspTest(TestCase):
 
     def test_to_python_validation_errors(self):
         with self.assertRaises(InterfaceValidationError):
-            Csp.to_python(dict(blocked_uri='about'))
+            Csp.to_python(dict(
+                effective_directive='style-src',
+                blocked_uri='about',
+            ))
 
         with self.assertRaises(InterfaceValidationError):
-            Csp.to_python(dict(effective_directive='lol'))
+            Csp.to_python(dict(
+                effective_directive='lol',
+            ))
+
+        with self.assertRaises(InterfaceValidationError):
+            Csp.to_python(dict(
+                effective_directive='style-src',
+                source_file='chrome-extension://fdasfdsafdsfdsa',
+            ))
 
     def test_coerce_blocked_uri_if_missing(self):
         result = Csp.to_python(dict(
