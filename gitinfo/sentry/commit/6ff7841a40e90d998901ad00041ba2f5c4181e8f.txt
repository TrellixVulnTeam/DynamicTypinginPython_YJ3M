commit 6ff7841a40e90d998901ad00041ba2f5c4181e8f
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri May 5 14:22:49 2017 +0200

    Refactored mail subscriber code to be more efficient

diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index 408b78de96..96af7294bc 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -260,6 +260,43 @@ class Project(Model):
             return '%s %s' % (self.team.name, self.name)
         return self.name
 
+    def get_notification_recipients(self, user_option):
+        from sentry.models import UserOption
+        alert_settings = dict(
+            (o.user_id, int(o.value))
+            for o in UserOption.objects.filter(
+                project=self,
+                key=user_option,
+            )
+        )
+
+        disabled = set(u for u, v in six.iteritems(alert_settings) if v == 0)
+
+        member_set = set(self.member_set.exclude(
+            user__in=disabled,
+        ).values_list('user', flat=True))
+
+        # determine members default settings
+        members_to_check = set(u for u in member_set if u not in alert_settings)
+        if members_to_check:
+            disabled = set((
+                uo.user_id for uo in UserOption.objects.filter(
+                    key='subscribe_by_default',
+                    user__in=members_to_check,
+                )
+                if uo.value == '0'
+            ))
+            member_set = [x for x in member_set if x not in disabled]
+
+        return member_set
+
+    def get_mail_alert_subscribers(self):
+        user_ids = self.get_notification_recipients('mail:alert')
+        if not user_ids:
+            return []
+        from sentry.models import User
+        return list(User.objects.filter(id__in=user_ids))
+
     def is_user_subscribed_to_mail_alerts(self, user):
         from sentry.models import UserOption
         is_enabled = UserOption.objects.get_value(
diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index 5c32722f2f..1d44cbc508 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -8,7 +8,6 @@ sentry.plugins.bases.notify
 from __future__ import absolute_import, print_function
 
 import logging
-import six
 
 from django import forms
 
@@ -20,10 +19,7 @@ from sentry.digests.notifications import (
 )
 from sentry.plugins import Notification, Plugin
 from sentry.plugins.base.configuration import react_plugin_config
-from sentry.models import (
-    ProjectOption,
-    UserOption,
-)
+from sentry.models import ProjectOption
 from sentry.tasks.digests import deliver_digest
 
 
@@ -118,35 +114,8 @@ class NotificationPlugin(Plugin):
         Return a collection of user IDs that are eligible to receive
         notifications for the provided project.
         """
-        conf_key = self.get_conf_key()
-
-        alert_settings = dict(
-            (o.user_id, int(o.value))
-            for o in UserOption.objects.filter(
-                project=project,
-                key='%s:alert' % conf_key,
-            )
-        )
-
-        disabled = set(u for u, v in six.iteritems(alert_settings) if v == 0)
-
-        member_set = set(project.member_set.exclude(
-            user__in=disabled,
-        ).values_list('user', flat=True))
-
-        # determine members default settings
-        members_to_check = set(u for u in member_set if u not in alert_settings)
-        if members_to_check:
-            disabled = set((
-                uo.user_id for uo in UserOption.objects.filter(
-                    key='subscribe_by_default',
-                    user__in=members_to_check,
-                )
-                if uo.value == '0'
-            ))
-            member_set = [x for x in member_set if x not in disabled]
-
-        return member_set
+        user_option = '%s:alert' % self.get_conf_key()
+        return project.get_notification_recipients(user_option)
 
     def __is_rate_limited(self, group, event):
         return ratelimits.is_limited(
diff --git a/src/sentry/plugins/sentry_mail/activity/new_processing_issues.py b/src/sentry/plugins/sentry_mail/activity/new_processing_issues.py
index 4812a5bcec..fcf067085c 100644
--- a/src/sentry/plugins/sentry_mail/activity/new_processing_issues.py
+++ b/src/sentry/plugins/sentry_mail/activity/new_processing_issues.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from sentry.models import User, GroupSubscriptionReason, EventError
+from sentry.models import GroupSubscriptionReason, EventError
 from sentry.utils.http import absolute_uri
 
 from .base import ActivityEmail
@@ -35,19 +35,10 @@ class NewProcessingIssuesActivityEmail(ActivityEmail):
         self.issues = summarize_issues(self.data['issues'])
 
     def get_participants(self):
-        # XXX: We want to send an email to everybody who is subscribed to
-        # the mail alerts.  Since currenlty that is only checked in the
-        # base notify code and requires event information, we use the UI
-        # code (Project.is_user_subscribed_to_mail_alerts) which
-        # replicates the logic on a per-user basis.
-        users = User.objects.filter(
-            id__in=self.project.team.member_set.values_list('user_id'),
+        return dict(
+            (user, GroupSubscriptionReason.processing_issue)
+            for user in self.project.get_mail_alert_subscribers()
         )
-        participants = {}
-        for user in users:
-            if self.project.is_user_subscribed_to_mail_alerts(user):
-                participants[user] = GroupSubscriptionReason.processing_issue
-        return participants
 
     def get_context(self):
         return {
