commit d63a2600f1a01b91f73d776d66a31e06d5abca62
Author: Ben Vinegar <ben@benv.ca>
Date:   Wed Feb 17 17:37:09 2016 -0800

    Add "preview report dialog" button to user report settings

diff --git a/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx b/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx
index 4dd5888f75..b829871d09 100644
--- a/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx
@@ -11,6 +11,24 @@ const ProjectUserReportSettings = React.createClass({
     this.props.setProjectNavSection('settings');
   },
 
+  componentDidMount() {
+    window.sentryEmbedCallback = function (embed) {
+      // Mock the embed's submit xhr to always be successful
+      // NOTE: this will not have errors if the form is empty
+      embed.submit = function (body) {
+        this._submitInProgress = true;
+        setTimeout(function () {
+          this._submitInProgress = false;
+          this.onSuccess();
+        }.bind(this), 500);
+      };
+    };
+  },
+
+  componentWillUnmount() {
+    window.sentryEmbedCallback = null;
+  },
+
   getInstructions() {
     return (
       '<!-- Sentry JS SDK 2.1.+ required -->\n' +
@@ -18,7 +36,7 @@ const ProjectUserReportSettings = React.createClass({
       '{% if request.sentry.id %}\n' +
       '  <script>\n' +
       '  Raven.showReportDialog({\n' +
-      '    eventId: \'{{ request.sentry.id }}\',' +
+      '    eventId: \'{{ request.sentry.id }}\',\n\n' +
       '    // use the public DSN (dont include your secret!)\n' +
       '    dsn: \'https://public@sentry.example.com/1\'\n' +
       '  });\n' +
@@ -27,6 +45,13 @@ const ProjectUserReportSettings = React.createClass({
     );
   },
 
+  handleClick() {
+    Raven.showReportDialog({
+      // should never make it to the Sentry API, but just in case, use throwaway id
+      eventId: 'ignoreme'
+    });
+  },
+
   render() {
     // TODO(dcramer): localize when language is final
     return (
@@ -42,6 +67,8 @@ const ProjectUserReportSettings = React.createClass({
         <p>The following example uses our Django integration. Check the documentation for the SDK you're using for more details.</p>
 
         <pre>{this.getInstructions()}</pre>
+
+        <p><a className="btn btn-primary" onClick={this.handleClick}>See the report dialog in action</a></p>
       </div>
     );
   }
diff --git a/src/sentry/templates/sentry/error-page-embed.js b/src/sentry/templates/sentry/error-page-embed.js
index 64ded8235c..4f9ba5d1c3 100644
--- a/src/sentry/templates/sentry/error-page-embed.js
+++ b/src/sentry/templates/sentry/error-page-embed.js
@@ -111,23 +111,9 @@
     xhr.onreadystatechange = function() {
       if (xhr.readyState === XHR_DONE) {
         if (xhr.status === 200) {
-          self._errorWrapper.innerHTML = '';
-          self._formContent.innerHTML = '<p class="message-success">Your feedback has been sent. Thank you!</p>';
-          self._submitBtn.parentNode.removeChild(self._submitBtn);
+          self.onSuccess();
         } else if (xhr.status == 400) {
-          var data = JSON.parse(xhr.responseText);
-          var node;
-          for (var key in self._formMap) {
-            node = self._formMap[key]
-            if (data.errors[key]) {
-              if (!/form-errors/.test(node.className)) {
-                node.className += " form-errors";
-              }
-            } else if (/form-errors/.test(node.className)) {
-              node.className = node.className.replace(/form-errors/, "");
-            }
-          }
-          self._errorWrapper.innerHTML = FORM_ERROR;
+          self.onFormError(JSON.parse(xhr.responseText));
         } else {
           self._errorWrapper.innerHTML = GENERIC_ERROR;
         }
@@ -139,6 +125,27 @@
     xhr.send(body);
   };
 
+  SentryErrorEmbed.prototype.onSuccess = function() {
+    this._errorWrapper.innerHTML = '';
+    this._formContent.innerHTML = '<p class="message-success">Your feedback has been sent. Thank you!</p>';
+    this._submitBtn.parentNode.removeChild(this._submitBtn);
+  },
+
+  SentryErrorEmbed.prototype.onFormError = function (data) {
+    var node;
+    for (var key in this._formMap) {
+      node = this._formMap[key]
+      if (data.errors[key]) {
+        if (!/form-errors/.test(node.className)) {
+          node.className += " form-errors";
+        }
+      } else if (/form-errors/.test(node.className)) {
+        node.className = node.className.replace(/form-errors/, "");
+      }
+    }
+    this._errorWrapper.innerHTML = FORM_ERROR;
+  },
+
   SentryErrorEmbed.prototype.attach = function(parent) {
     parent.appendChild(this.element);
   };
@@ -148,6 +155,9 @@
   if (options.attachOnLoad !== false) {
     onReady(function(){
       embed.attach(options.parent || document.body);
+      if (window.sentryEmbedCallback && typeof sentryEmbedCallback === 'function') {
+        sentryEmbedCallback(embed);
+      }
     });
   }
 }(window, document, JSON));
