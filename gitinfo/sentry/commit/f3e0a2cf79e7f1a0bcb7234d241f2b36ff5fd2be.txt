commit f3e0a2cf79e7f1a0bcb7234d241f2b36ff5fd2be
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Feb 24 10:30:40 2020 -0800

    feat(workflow): Replace old alerts with new design (#17094)
    
    This replaces the existing Alerts with our new issue alerts. Only show
    Metric/Issue alert selector if user has access to incidents feature
    flag.

diff --git a/src/sentry/incidents/endpoints/project_alert_rule_index.py b/src/sentry/incidents/endpoints/project_alert_rule_index.py
index e7fabf78f5..f537206ed8 100644
--- a/src/sentry/incidents/endpoints/project_alert_rule_index.py
+++ b/src/sentry/incidents/endpoints/project_alert_rule_index.py
@@ -26,9 +26,6 @@ class ProjectCombinedRuleIndexEndpoint(ProjectEndpoint):
         """
         Fetches alert rules and legacy rules for an organization
         """
-        if not features.has("organizations:incidents", project.organization, actor=request.user):
-            raise ResourceDoesNotExist
-
         cursor_string = request.GET.get(
             "cursor", six.binary_type(int(time.time() * 1000000)) + ":0:0"
         )
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 0c47b2516f..b00d8d90d6 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -258,65 +258,12 @@ function routes() {
             /* webpackChunkName: "ProjectAlerts" */ 'app/views/settings/projectAlerts'
           )
         }
-      >
-        <IndexRedirect to="rules/" />
-        <Route
-          path="settings/"
-          name="Settings"
-          component={errorHandler(LazyLoad)}
-          componentPromise={() =>
-            import(
-              /* webpackChunkName: "ProjectAlertSettings" */ 'app/views/settings/projectAlerts/projectAlertSettings'
-            )
-          }
-        />
-        <Route path="rules/" name="Rules" component={null}>
-          <IndexRoute
-            component={errorHandler(LazyLoad)}
-            componentPromise={() =>
-              import(
-                /* webpackChunkName: "ProjectAlertRules" */ 'app/views/settings/projectAlerts/projectAlertRules'
-              )
-            }
-          />
-          <Route
-            path="new/"
-            name="New"
-            component={errorHandler(LazyLoad)}
-            componentPromise={() =>
-              import(
-                /* webpackChunkName: "ProjectAlertRuleDetails" */ 'app/views/settings/projectAlerts/projectAlertRuleDetails'
-              )
-            }
-          />
-          <Route
-            path=":ruleId/"
-            name="Edit"
-            componentPromise={() =>
-              import(
-                /* webpackChunkName: "ProjectAlertRuleDetails" */ 'app/views/settings/projectAlerts/projectAlertRuleDetails'
-              )
-            }
-            component={errorHandler(LazyLoad)}
-          />
-        </Route>
-      </Route>
-
-      <Route
-        name="Alert Rules"
-        path="alerts-v2/"
-        component={errorHandler(LazyLoad)}
-        componentPromise={() =>
-          import(
-            /* webpackChunkName: "ProjectAlertsNew" */ 'app/views/settings/projectAlerts/new'
-          )
-        }
       >
         <IndexRoute
           component={errorHandler(LazyLoad)}
           componentPromise={() =>
             import(
-              /* webpackChunkName: "ProjectAlertRules" */ 'app/views/settings/projectAlerts/projectAlertRulesNew'
+              /* webpackChunkName: "ProjectAlertsList" */ 'app/views/settings/projectAlerts/list'
             )
           }
         />
@@ -327,30 +274,31 @@ function routes() {
           component={errorHandler(LazyLoad)}
           componentPromise={() =>
             import(
-              /* webpackChunkName: "ProjectAlertSettings" */ 'app/views/settings/projectAlerts/projectAlertSettings'
+              /* webpackChunkName: "ProjectAlertsSettings" */ 'app/views/settings/projectAlerts/settings'
             )
           }
         />
+
         <Route
           path="new/"
           name="New Alert Rule"
           component={errorHandler(LazyLoad)}
           componentPromise={() =>
             import(
-              /* webpackChunkName: "ProjectAlertsRuleDetails" */ 'app/views/settings/projectAlerts/ruleDetailsNew'
+              /* webpackChunkName: "ProjectAlertsCreate" */ 'app/views/settings/projectAlerts/create'
             )
           }
         />
 
-        <Route path="issue-rules/" component={null}>
-          <IndexRedirect to="/settings/:orgId/projects/:projectId/alerts-v2/" />
+        <Route path="rules/">
+          <IndexRedirect to="/settings/:orgId/projects/:projectId/alerts/" />
           <Route
             path="new/"
             name="New Alert Rule"
             component={errorHandler(LazyLoad)}
             componentPromise={() =>
               import(
-                /* webpackChunkName: "ProjectAlertRuleDetails" */ 'app/views/settings/projectAlerts/ruleDetailsNew'
+                /* webpackChunkName: "ProjectAlertsIssueCreate" */ 'app/views/settings/projectAlerts/create'
               )
             }
           />
@@ -367,19 +315,19 @@ function routes() {
         </Route>
 
         <Route path="metric-rules/" component={null}>
-          <IndexRedirect to="/settings/:orgId/projects/:projectId/alerts-v2/" />
+          <IndexRedirect to="/settings/:orgId/projects/:projectId/alerts/" />
           <Route
-            name="New Incident Rule"
+            name="New Alert Rule"
             path="new/"
             componentPromise={() =>
               import(
-                /* webpackChunkName: "IncidentRulesCreate" */ 'app/views/settings/incidentRules/create'
+                /* webpackChunkName: "IncidentRulesCreate" */ 'app/views/settings/projectAlerts/create'
               )
             }
             component={errorHandler(LazyLoad)}
           />
           <Route
-            name="Edit Incident Rule"
+            name="Edit Alert Rule"
             path=":incidentRuleId/"
             componentPromise={() =>
               import(
diff --git a/src/sentry/static/sentry/app/utils/recreateRoute.tsx b/src/sentry/static/sentry/app/utils/recreateRoute.tsx
index 58c11efd17..3db7beee3e 100644
--- a/src/sentry/static/sentry/app/utils/recreateRoute.tsx
+++ b/src/sentry/static/sentry/app/utils/recreateRoute.tsx
@@ -10,7 +10,7 @@ type Options = {
 
   // parameters to replace any route string parameters (e.g. if route is `:orgId`,
   // params should have `{orgId: slug}`
-  params: {[key: string]: string};
+  params: {[key: string]: string | undefined};
 
   /**
    * The number of routes to to pop off of `routes
diff --git a/src/sentry/static/sentry/app/utils/replaceRouterParams.tsx b/src/sentry/static/sentry/app/utils/replaceRouterParams.tsx
index ae0d91a40d..e3bfcc72e4 100644
--- a/src/sentry/static/sentry/app/utils/replaceRouterParams.tsx
+++ b/src/sentry/static/sentry/app/utils/replaceRouterParams.tsx
@@ -5,7 +5,7 @@
  */
 export default function replaceRouterParams(
   route: string,
-  params: {[key: string]: string}
+  params: {[key: string]: string | undefined}
 ): string {
   // parse route params from route
   const matches = route.match(/:\w+/g);
@@ -21,7 +21,7 @@ export default function replaceRouterParams(
       return;
     }
 
-    route = route.replace(param, params[paramName]);
+    route = route.replace(param, params[paramName] as string);
   });
 
   return route;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/controls/radioGroup.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/controls/radioGroup.tsx
index adf609f01c..c0f9d28736 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/controls/radioGroup.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/controls/radioGroup.tsx
@@ -31,7 +31,7 @@ const RadioGroup = ({value, disabled, choices, label, onChange, ...props}: Props
             aria-checked={isSelected}
             disabled={disabled}
           >
-            <RadioLineButton type="button" disabled={disabled}>
+            <RadioLineButton aria-label={id} type="button" disabled={disabled}>
               {isSelected && (
                 <RadioLineButtonFill disabled={disabled} animate={value !== ''} />
               )}
diff --git a/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.tsx b/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.tsx
index cdc4bee4fb..ed15b195bb 100644
--- a/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.tsx
+++ b/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.tsx
@@ -29,13 +29,7 @@ export default function getConfiguration({project}: ConfigParams): NavigationSec
         {
           path: `${pathPrefix}/alerts/`,
           title: t('Alerts'),
-          description: t('Manage alerts and alert rules for a project'),
-        },
-        {
-          path: `${pathPrefix}/alerts-v2/`,
-          title: t('Alerts (New)'),
-          description: t('Manage alerts and alert rules for a project'),
-          show: ({features}) => features!.has('incidents'),
+          description: t('Manage alert rules for a project'),
         },
         {
           path: `${pathPrefix}/tags/`,
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/create.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/create.tsx
new file mode 100644
index 0000000000..ea3a2e2634
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/create.tsx
@@ -0,0 +1,109 @@
+import {RouteComponentProps} from 'react-router/lib/Router';
+import React from 'react';
+
+import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import {t} from 'app/locale';
+import AsyncView from 'app/views/asyncView';
+import IssueEditor from 'app/views/settings/projectAlerts/issueEditor';
+import IncidentRulesCreate from 'app/views/settings/incidentRules/create';
+import PanelItem from 'app/components/panels/panelItem';
+import RadioGroup from 'app/views/settings/components/forms/controls/radioGroup';
+import routeTitleGen from 'app/utils/routeTitle';
+
+type RouteParams = {
+  orgId: string;
+  projectId: string;
+  incidentRuleId: string;
+};
+
+type Props = RouteComponentProps<RouteParams, {}> & {
+  hasMetricAlerts: boolean;
+};
+
+type State = {
+  alertType: string | null;
+} & AsyncView['state'];
+
+class Create extends AsyncView<Props, State> {
+  getDefaultState() {
+    const {pathname} = this.props.location;
+
+    return {
+      ...super.getDefaultState(),
+      alertType: pathname.includes('/alerts/rules/')
+        ? 'issue'
+        : pathname.includes('/alerts/metric-rules/')
+        ? 'metric'
+        : null,
+    };
+  }
+
+  getTitle() {
+    return routeTitleGen(t('New Alert'), this.props.params.projectId, false);
+  }
+
+  getEndpoints(): [string, string][] {
+    return [];
+  }
+
+  handleChangeAlertType = (alertType: string) => {
+    // alertType should be `issue` or `metric`
+    this.setState({
+      alertType,
+    });
+  };
+
+  renderLoading() {
+    return this.renderBody();
+  }
+
+  renderBody() {
+    const {hasMetricAlerts} = this.props;
+    const {alertType} = this.state;
+
+    const shouldShowAlertTypeChooser = hasMetricAlerts;
+
+    return (
+      <React.Fragment>
+        {shouldShowAlertTypeChooser && (
+          <Panel>
+            <PanelHeader>{t('Choose an Alert Type')}</PanelHeader>
+            <PanelBody>
+              <PanelItem>
+                <RadioGroup
+                  label={t('Select an Alert Type')}
+                  value={this.state.alertType}
+                  choices={[
+                    [
+                      'metric',
+                      t('Metric Alert'),
+                      t(
+                        'Metric alerts allow you to filter and set thresholds on errors. They can be used for high-level monitoring of patterns, or fine-grained monitoring of individual events.'
+                      ),
+                    ],
+                    [
+                      'issue',
+                      t('Issue Alert'),
+                      t(
+                        'Issue alerts fire whenever any issue in the project matches your specified criteria, such as a resolved issue re-appearing or an issue affecting many users.'
+                      ),
+                    ],
+                  ]}
+                  onChange={this.handleChangeAlertType}
+                />
+              </PanelItem>
+            </PanelBody>
+          </Panel>
+        )}
+
+        {(!hasMetricAlerts || alertType === 'issue') && <IssueEditor {...this.props} />}
+
+        {hasMetricAlerts && alertType === 'metric' && (
+          <IncidentRulesCreate {...this.props} />
+        )}
+      </React.Fragment>
+    );
+  }
+}
+
+export default Create;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/index.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/index.tsx
index 566e80bbf3..95010d7254 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/index.tsx
@@ -1,19 +1,35 @@
-import {Params} from 'react-router/lib/Router';
+import {RouteComponentProps} from 'react-router/lib/Router';
 import React from 'react';
 
-import ProjectAlertHeader from './projectAlertHeader';
+import {Organization} from 'app/types';
+import Access from 'app/components/acl/access';
+import Feature from 'app/components/acl/feature';
+
+import ProjectAlertHeader from './projectAlertHeaderNew';
 
 type Props = {
-  params: Params;
+  organization: Organization;
   children: React.ReactNode;
-};
+} & RouteComponentProps<{organizationId: string; projectId: string}, {}>;
 
-function ProjectAlerts({params, children}: Props) {
+function ProjectAlerts({children, organization, ...props}: Props) {
   return (
-    <React.Fragment>
-      <ProjectAlertHeader projectId={params.projectId} />
-      {children}
-    </React.Fragment>
+    <Access organization={organization} access={['project:write']}>
+      {({hasAccess}) => (
+        <Feature organization={organization} features={['incidents']}>
+          {({hasFeature}) => (
+            <React.Fragment>
+              <ProjectAlertHeader canEditRule={hasAccess} {...props} />
+
+              {React.isValidElement(children) &&
+                React.cloneElement(children, {
+                  hasMetricAlerts: hasFeature,
+                })}
+            </React.Fragment>
+          )}
+        </Feature>
+      )}
+    </Access>
   );
 }
 
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
index 1d7d6c9893..17ccaf2e5d 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
@@ -71,7 +71,7 @@ type ConditionOrAction = string;
 type Props = {
   project: Project;
   organization: Organization;
-} & RouteComponentProps<{orgId: string; projectId: string; ruleId: string}, {}>;
+} & RouteComponentProps<{orgId: string; projectId: string; ruleId?: string}, {}>;
 
 type State = AsyncView['state'] & {
   rule: UnsavedIssueAlertRule | IssueAlertRule;
@@ -138,11 +138,10 @@ class IssueRuleEditor extends AsyncView<Props, State> {
         method: isNew ? 'POST' : 'PUT',
         data: rule,
       });
-
       this.setState({detailedError: null, rule: resp});
 
       addSuccessMessage(isNew ? t('Created alert rule') : t('Updated alert rule'));
-      browserHistory.replace(recreateRoute('', {...this.props, stepBack: -1}));
+      browserHistory.replace(recreateRoute('', {...this.props, stepBack: -2}));
     } catch (err) {
       this.setState({
         detailedError: err.responseJSON || {__all__: 'Unknown error'},
@@ -280,7 +279,7 @@ class IssueRuleEditor extends AsyncView<Props, State> {
     const environment =
       !rule || !rule.environment ? ALL_ENVIRONMENTS_KEY : rule.environment;
 
-    const title = ruleId ? t('Edit Alert Rule') : t('New Alert Rule');
+    const title = ruleId ? t('Edit Alert') : t('New Alert');
 
     // Note `key` on `<Form>` below is so that on initial load, we show
     // the form with a loading mask on top of it, but force a re-render by using
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx
index fb8f59f577..fa55188abc 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx
@@ -47,6 +47,14 @@ class RuleNode extends React.Component<Props> {
       }
     }
 
+    // Cast `key` to string, this problem pops up because of react-select v3 where
+    // `value` requires the `option` object (e.g. {label, object}) - we have
+    // helpers in `SelectControl` to filter `choices` to produce the value object
+    //
+    // However there are integrations that give the form field choices with the value as number, but
+    // when the integration configuration gets saved, it gets saved and returned as a string
+    const choices = fieldConfig.choices.map(([key, value]) => [`${key}`, value]);
+
     return (
       <InlineSelectControl
         isClearable={false}
@@ -59,7 +67,7 @@ class RuleNode extends React.Component<Props> {
             height: '28px',
           }),
         }}
-        choices={fieldConfig.choices}
+        choices={choices}
         onChange={({value}) => this.props.onPropertyChange(name, value)}
       />
     );
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRulesNew.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/list.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRulesNew.tsx
rename to src/sentry/static/sentry/app/views/settings/projectAlerts/list.tsx
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/new.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/new.tsx
deleted file mode 100644
index 5e0dd5a89b..0000000000
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/new.tsx
+++ /dev/null
@@ -1,19 +0,0 @@
-import {RouteComponentProps} from 'react-router/lib/Router';
-import React from 'react';
-
-import ProjectAlertHeader from './projectAlertHeaderNew';
-
-type Props = {
-  children: React.ReactNode;
-} & RouteComponentProps<{organizationId: string; projectId: string}, {}>;
-
-function ProjectAlerts({children, ...props}: Props) {
-  return (
-    <React.Fragment>
-      <ProjectAlertHeader {...props} />
-      {children}
-    </React.Fragment>
-  );
-}
-
-export default ProjectAlerts;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertHeaderNew.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertHeaderNew.tsx
index e9d6922fd2..cde45b139b 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertHeaderNew.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertHeaderNew.tsx
@@ -12,16 +12,15 @@ import withOrganization from 'app/utils/withOrganization';
 
 type Props = {
   organization: Organization;
+  canEditRule: boolean;
 } & Pick<RouteComponentProps<{projectId: string}, {}>, 'params'>;
 
 class ProjectAlertHeader extends React.Component<Props> {
   render() {
-    const {params, organization} = this.props;
+    const {canEditRule, params, organization} = this.props;
     const {projectId} = params;
 
-    const canEditRule = organization.access.includes('project:write');
-
-    const basePath = `/settings/${organization.slug}/projects/${projectId}/alerts-v2/`;
+    const basePath = `/settings/${organization.slug}/projects/${projectId}/alerts/`;
 
     return (
       <SettingsPageHeader
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRuleDetails.jsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRuleDetails.jsx
deleted file mode 100644
index fbb7dc1f58..0000000000
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRuleDetails.jsx
+++ /dev/null
@@ -1,36 +0,0 @@
-import React from 'react';
-
-import SentryTypes from 'app/sentryTypes';
-import AsyncView from 'app/views/asyncView';
-import RuleEditor from 'app/views/settings/projectAlerts/ruleEditor';
-
-class ProjectAlertRuleDetails extends AsyncView {
-  static contextTypes = {
-    organization: SentryTypes.Organization,
-    project: SentryTypes.Project,
-  };
-
-  getEndpoints() {
-    const {orgId, projectId} = this.props.params;
-
-    return [['configs', `/projects/${orgId}/${projectId}/rules/configuration/`]];
-  }
-
-  renderBody() {
-    const {organization, project} = this.context;
-    const {actions, conditions} = this.state.configs;
-
-    return (
-      <RuleEditor
-        organization={organization}
-        project={project}
-        actions={actions}
-        conditions={conditions}
-        params={this.props.params}
-        routes={this.props.routes}
-      />
-    );
-  }
-}
-
-export default ProjectAlertRuleDetails;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.tsx
deleted file mode 100644
index c3e32190ca..0000000000
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.tsx
+++ /dev/null
@@ -1,93 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import {RouteComponentProps} from 'react-router/lib/Router';
-
-import {IssueAlertRule} from 'app/types/alerts';
-import {Panel} from 'app/components/panels';
-import {t} from 'app/locale';
-import AsyncView from 'app/views/asyncView';
-import EmptyStateWarning from 'app/components/emptyStateWarning';
-import PermissionAlert from 'app/views/settings/project/permissionAlert';
-import RuleRow from 'app/views/settings/projectAlerts/ruleRow';
-import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
-import SentryTypes from 'app/sentryTypes';
-
-type Props = RouteComponentProps<{orgId: string; projectId: string}, {}>;
-type State = {
-  ruleList: IssueAlertRule[];
-} & AsyncView['state'];
-
-class ProjectAlertRules extends AsyncView<Props, State> {
-  static propTypes = {
-    routes: PropTypes.array.isRequired,
-  };
-
-  static contextTypes = {
-    router: PropTypes.object,
-    organization: SentryTypes.Organization,
-  };
-
-  getEndpoints(): [string, string][] {
-    const {orgId, projectId} = this.props.params;
-    return [['ruleList', `/projects/${orgId}/${projectId}/rules/`]];
-  }
-
-  handleDeleteRule = (rule: IssueAlertRule) => {
-    this.setState({
-      ruleList: this.state.ruleList.filter(r => r.id !== rule.id),
-    });
-  };
-
-  renderEmpty() {
-    return (
-      <Panel>
-        <EmptyStateWarning>
-          <p>{t('There are no alerts configured for this project.')}</p>
-        </EmptyStateWarning>
-      </Panel>
-    );
-  }
-
-  renderResults() {
-    const {orgId, projectId} = this.props.params;
-    const {organization} = this.context;
-    const canEditRule = organization.access.includes('project:write');
-
-    return (
-      <div className="rules-list">
-        {this.state.ruleList.map(rule => {
-          return (
-            <RuleRow
-              api={this.api}
-              key={rule.id}
-              data={rule}
-              orgId={orgId}
-              projectId={projectId}
-              params={this.props.params}
-              location={this.props.location}
-              routes={this.props.routes}
-              onDelete={this.handleDeleteRule.bind(this, rule)}
-              canEdit={canEditRule}
-            />
-          );
-        })}
-      </div>
-    );
-  }
-
-  renderBody() {
-    const {ruleList} = this.state;
-    const {projectId} = this.props.params;
-
-    return (
-      <React.Fragment>
-        <SentryDocumentTitle title={t('Alerts Rules')} objSlug={projectId} />
-        <PermissionAlert />
-        {!!ruleList.length && this.renderResults()}
-        {!ruleList.length && this.renderEmpty()}
-      </React.Fragment>
-    );
-  }
-}
-
-export default ProjectAlertRules;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleDetailsNew/index.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleDetailsNew/index.tsx
index 8325f387e6..d93fe4b258 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleDetailsNew/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleDetailsNew/index.tsx
@@ -17,7 +17,9 @@ type RouteParams = {
   ruleId: string; //TODO(ts): Make ruleId optional
 };
 
-type Props = RouteComponentProps<RouteParams, {}>;
+type Props = RouteComponentProps<RouteParams, {}> & {
+  hasMetricAlerts: boolean;
+};
 
 type State = {
   alertType: string | null;
@@ -29,9 +31,9 @@ class RuleDetails extends AsyncView<Props, State> {
 
     return {
       ...super.getDefaultState(),
-      alertType: pathname.includes('issue-rules')
+      alertType: pathname.includes('/alerts/rules/')
         ? 'issue'
-        : pathname.includes('metric-rules')
+        : pathname.includes('/alerts/metric-rules/')
         ? 'metric'
         : null,
     };
@@ -57,38 +59,43 @@ class RuleDetails extends AsyncView<Props, State> {
   }
 
   renderBody() {
+    const {hasMetricAlerts} = this.props;
     const {alertType} = this.state;
 
+    const shouldShowAlertTypeChooser = hasMetricAlerts;
+
     return (
       <React.Fragment>
-        <Panel>
-          <PanelHeader>{t('Choose an Alert Type')}</PanelHeader>
-          <PanelBody>
-            <PanelItem>
-              <RadioGroup
-                label={t('Select an Alert Type')}
-                value={this.state.alertType}
-                choices={[
-                  [
-                    'metric',
-                    t('Metric Alert'),
-                    t(
-                      'Metric alerts allow you to filter and set thresholds on errors. They can be used for high-level monitoring of patterns, or fine-grained monitoring of individual events.'
-                    ),
-                  ],
-                  [
-                    'issue',
-                    t('Issue Alert'),
-                    t(
-                      'Issue alerts fire whenever any issue in the project matches your specified criteria, such as a resolved issue re-appearing or an issue affecting many users.'
-                    ),
-                  ],
-                ]}
-                onChange={this.handleChangeAlertType}
-              />
-            </PanelItem>
-          </PanelBody>
-        </Panel>
+        {shouldShowAlertTypeChooser && (
+          <Panel>
+            <PanelHeader>{t('Choose an Alert Type')}</PanelHeader>
+            <PanelBody>
+              <PanelItem>
+                <RadioGroup
+                  label={t('Select an Alert Type')}
+                  value={this.state.alertType}
+                  choices={[
+                    [
+                      'metric',
+                      t('Metric Alert'),
+                      t(
+                        'Metric alerts allow you to filter and set thresholds on errors. They can be used for high-level monitoring of patterns, or fine-grained monitoring of individual events.'
+                      ),
+                    ],
+                    [
+                      'issue',
+                      t('Issue Alert'),
+                      t(
+                        'Issue alerts fire whenever any issue in the project matches your specified criteria, such as a resolved issue re-appearing or an issue affecting many users.'
+                      ),
+                    ],
+                  ]}
+                  onChange={this.handleChangeAlertType}
+                />
+              </PanelItem>
+            </PanelBody>
+          </Panel>
+        )}
 
         {alertType === 'issue' ? (
           <IssueEditor {...this.props} />
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleEditor/index.jsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleEditor/index.jsx
deleted file mode 100644
index 6492b8ac24..0000000000
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleEditor/index.jsx
+++ /dev/null
@@ -1,423 +0,0 @@
-import {browserHistory} from 'react-router';
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from '@emotion/styled';
-
-import {ALL_ENVIRONMENTS_KEY} from 'app/constants';
-import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
-import {SelectField, TextField} from 'app/components/forms';
-import {
-  addErrorMessage,
-  addSuccessMessage,
-  addMessage,
-} from 'app/actionCreators/indicator';
-import {t} from 'app/locale';
-import withApi from 'app/utils/withApi';
-import Button from 'app/components/button';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
-import RuleNodeList from 'app/views/settings/projectAlerts/ruleEditor/ruleNodeList';
-import recreateRoute from 'app/utils/recreateRoute';
-import space from 'app/styles/space';
-import {getDisplayName} from 'app/utils/environment';
-
-const FREQUENCY_CHOICES = [
-  ['5', t('5 minutes')],
-  ['10', t('10 minutes')],
-  ['30', t('30 minutes')],
-  ['60', t('60 minutes')],
-  ['180', t('3 hours')],
-  ['720', t('12 hours')],
-  ['1440', t('24 hours')],
-  ['10080', t('one week')],
-  ['43200', t('30 days')],
-];
-
-const ACTION_MATCH_CHOICES = [
-  ['all', t('all')],
-  ['any', t('any')],
-  ['none', t('none')],
-];
-
-const POLLING_INTERVAL = 1000;
-const POLLING_MAX_TIME_LIMIT = 3 * 60000;
-
-const AlertRuleRow = styled('h6')`
-  display: flex;
-  align-items: center;
-`;
-
-class RuleEditor extends React.Component {
-  static propTypes = {
-    api: PropTypes.object,
-    actions: PropTypes.array.isRequired,
-    conditions: PropTypes.array.isRequired,
-    project: PropTypes.object.isRequired,
-    organization: PropTypes.object.isRequired,
-  };
-
-  constructor(props) {
-    super(props);
-    this.state = {
-      rule: null,
-      loading: false,
-      error: null,
-      environments: [],
-      uuid: null,
-    };
-  }
-
-  componentDidMount() {
-    this.fetchData();
-  }
-
-  componentDidUpdate() {
-    if (this.state.error) {
-      window.scrollTo(0, this.formNode.getBoundingClientRect().top + window.scrollY);
-    }
-  }
-
-  fetchData() {
-    const {
-      api,
-      params: {ruleId, projectId, orgId},
-    } = this.props;
-
-    const defaultRule = {
-      actionMatch: 'all',
-      actions: [],
-      conditions: [],
-      name: '',
-      frequency: 30,
-      environment: ALL_ENVIRONMENTS_KEY,
-    };
-
-    const promises = [
-      api.requestPromise(`/projects/${orgId}/${projectId}/environments/`),
-      ruleId
-        ? api.requestPromise(`/projects/${orgId}/${projectId}/rules/${ruleId}/`)
-        : Promise.resolve(defaultRule),
-    ];
-
-    Promise.all(promises).then(([environments, rule]) => {
-      this.setState({environments, rule});
-    });
-  }
-
-  pollHandler = async quitTime => {
-    if (Date.now() > quitTime) {
-      addErrorMessage(t('Looking for that channel took too long :('));
-      this.setState({loading: false});
-      return;
-    }
-
-    const {api, organization, project} = this.props;
-    const {uuid} = this.state;
-    const origRule = {...this.state.rule};
-    let response;
-
-    try {
-      response = await api.requestPromise(
-        `/projects/${organization.slug}/${project.slug}/rule-task/${uuid}/`
-      );
-    } catch {
-      addErrorMessage(t('An error occurred'));
-      this.setState({loading: false});
-    }
-
-    const {status, rule, error} = response;
-
-    if (status === 'pending') {
-      setTimeout(() => {
-        this.pollHandler(quitTime);
-      }, POLLING_INTERVAL);
-      return;
-    }
-
-    if (status === 'failed') {
-      this.setState({
-        error: {actions: [error]},
-        loading: false,
-      });
-      addErrorMessage(t('An error occurred'));
-    }
-    if (rule && status === 'success') {
-      const isNew = !origRule.id;
-      this.handleRuleSuccess(isNew, rule);
-    }
-  };
-
-  fetchStatus() {
-    // pollHander calls itself until it gets either a sucesss
-    // or failed status but we don't want to poll forever so we pass
-    // in a hard stop time of 3 minutes before we bail.
-    const quitTime = Date.now() + POLLING_MAX_TIME_LIMIT;
-    setTimeout(() => {
-      this.pollHandler(quitTime);
-    }, POLLING_INTERVAL);
-  }
-
-  handleRuleSuccess = (isNew, rule) => {
-    this.setState({error: null, loading: false, rule});
-    // Redirect to correct ID if /new
-    if (isNew) {
-      browserHistory.replace(recreateRoute(`${rule.id}/`, {...this.props, stepBack: -1}));
-    }
-    addSuccessMessage(isNew ? t('Created alert rule') : t('Updated alert rule'));
-  };
-
-  handleSubmit = e => {
-    e.preventDefault();
-
-    const data = {...this.state.rule};
-    const isNew = !data.id;
-    const {project, organization} = this.props;
-
-    let endpoint = `/projects/${organization.slug}/${project.slug}/rules/`;
-    if (data.id) {
-      endpoint += data.id + '/';
-    }
-
-    if (data.environment === ALL_ENVIRONMENTS_KEY) {
-      delete data.environment;
-    }
-
-    addMessage(t('Saving...'));
-
-    this.props.api.request(endpoint, {
-      method: isNew ? 'POST' : 'PUT',
-      data,
-      success: (resp, _, jqXHR) => {
-        // if we get a 202 back it means that we have an async task
-        // running to lookup and verfity the channel id for Slack.
-        if (jqXHR.status === 202) {
-          this.setState({error: null, loading: true, uuid: resp.uuid});
-          this.fetchStatus();
-          addMessage(t('Looking through all your channels...'));
-        } else {
-          this.handleRuleSuccess(isNew, resp);
-        }
-      },
-      error: response => {
-        this.setState({
-          error: response.responseJSON || {__all__: 'Unknown error'},
-          loading: false,
-        });
-        addErrorMessage(t('An error occurred'));
-      },
-    });
-  };
-
-  hasError(field) {
-    const {error} = this.state;
-    if (!error) {
-      return false;
-    }
-    return !!error[field];
-  }
-
-  handleEnvironmentChange(val) {
-    // If 'All Environments' is selected the value should be null
-    if (val === ALL_ENVIRONMENTS_KEY) {
-      this.handleChange('environment', null);
-    } else {
-      this.handleChange('environment', val);
-    }
-  }
-
-  handleChange(prop, val) {
-    this.setState(state => {
-      const rule = {...state.rule};
-      rule[prop] = val;
-      return {rule};
-    });
-  }
-
-  handlePropertyChange(type) {
-    return idx => {
-      return (prop, val) => {
-        const rule = {...this.state.rule};
-        rule[type][idx][prop] = val;
-        this.setState({rule});
-      };
-    };
-  }
-
-  handleAddRow(type) {
-    return id => {
-      this.setState(prevState => {
-        prevState.rule[type].push({id});
-        return {
-          rule: prevState.rule,
-        };
-      });
-    };
-  }
-
-  handleDeleteRow(type) {
-    return idx => {
-      this.setState(prevState => {
-        prevState.rule[type].splice(idx, 1);
-        return {
-          rule: prevState.rule,
-        };
-      });
-    };
-  }
-
-  render() {
-    const {projectId} = this.props.params;
-    const {environments} = this.state;
-    const environmentChoices = [
-      [ALL_ENVIRONMENTS_KEY, t('All Environments')],
-      ...environments.map(env => [env.name, getDisplayName(env)]),
-    ];
-
-    if (!this.state.rule) {
-      return <LoadingIndicator />;
-    }
-
-    const {rule, loading, error} = this.state;
-    const {actionMatch, actions, conditions, frequency, name} = rule;
-
-    const environment =
-      rule.environment === null ? ALL_ENVIRONMENTS_KEY : rule.environment;
-
-    const title = rule.id ? t('Edit Alert Rule') : t('New Alert Rule');
-
-    return (
-      <form onSubmit={this.handleSubmit} ref={node => (this.formNode = node)}>
-        <SentryDocumentTitle title={title} objSlug={projectId} />
-        <Panel className="rule-detail">
-          <PanelHeader>{title}</PanelHeader>
-          <PanelBody withPadding>
-            {error && (
-              <div className="alert alert-block alert-error">
-                <p>
-                  {t(
-                    'There was an error saving your changes. Make sure all fields are valid and try again.'
-                  )}
-                </p>
-              </div>
-            )}
-            <h6>{t('Rule name')}:</h6>
-            <TextField
-              name="name"
-              defaultValue={name}
-              required
-              placeholder={t('My Rule Name')}
-              onChange={val => this.handleChange('name', val)}
-            />
-
-            <hr />
-
-            <AlertRuleRow>
-              {t(
-                'Every time %s of these conditions are met:',
-                <SelectField
-                  deprecatedSelectControl
-                  clearable={false}
-                  className={this.hasError('actionMatch') ? ' error' : ''}
-                  style={{marginBottom: 0, marginLeft: 5, marginRight: 5, width: 100}}
-                  name="actionMatch"
-                  value={actionMatch}
-                  required
-                  choices={ACTION_MATCH_CHOICES}
-                  onChange={val => this.handleChange('actionMatch', val)}
-                />
-              )}
-            </AlertRuleRow>
-
-            {this.hasError('conditions') && (
-              <p className="error">{this.state.error.conditions[0]}</p>
-            )}
-
-            <RuleNodeList
-              nodes={this.props.conditions}
-              items={conditions || []}
-              className="rule-condition-list"
-              handlePropertyChange={this.handlePropertyChange('conditions')}
-              handleAddRow={this.handleAddRow('conditions')}
-              handleDeleteRow={this.handleDeleteRow('conditions')}
-            />
-
-            <hr />
-
-            <h6>{t('In this environment')}:</h6>
-            <SelectField
-              deprecatedSelectControl
-              clearable={false}
-              className={this.hasError('environment') ? ' error' : ''}
-              style={{marginBottom: 0, marginLeft: 5, marginRight: 5}}
-              name="environment"
-              value={environment}
-              required
-              choices={environmentChoices}
-              onChange={val => this.handleEnvironmentChange(val)}
-            />
-
-            <hr />
-
-            <h6>{t('Take these actions:')}</h6>
-
-            {this.hasError('actions') && (
-              <p className="error">{this.state.error.actions[0]}</p>
-            )}
-
-            <RuleNodeList
-              nodes={this.props.actions}
-              items={actions || []}
-              handlePropertyChange={this.handlePropertyChange('actions')}
-              handleAddRow={this.handleAddRow('actions')}
-              handleDeleteRow={this.handleDeleteRow('actions')}
-            />
-
-            <hr />
-
-            <AlertRuleRow>
-              {t(
-                'Perform these actions at most once every %s for an issue.',
-                <SelectField
-                  deprecatedSelectControl
-                  clearable={false}
-                  name="frequency"
-                  className={this.hasError('frequency') ? ' error' : ''}
-                  value={frequency}
-                  style={{marginBottom: 0, marginLeft: 5, marginRight: 5, width: 140}}
-                  required
-                  choices={FREQUENCY_CHOICES}
-                  onChange={val => this.handleChange('frequency', val)}
-                />
-              )}
-            </AlertRuleRow>
-
-            <ActionBar>
-              <CancelButton to={recreateRoute('', {...this.props, stepBack: -1})}>
-                {t('Cancel')}
-              </CancelButton>
-              <Button priority="primary" disabled={loading}>
-                {t('Save Rule')}
-              </Button>
-            </ActionBar>
-          </PanelBody>
-        </Panel>
-      </form>
-    );
-  }
-}
-
-export {RuleEditor};
-
-export default withApi(RuleEditor);
-
-const CancelButton = styled(Button)`
-  margin-right: ${space(1)};
-`;
-
-const ActionBar = styled('div')`
-  display: flex;
-  justify-content: flex-end;
-  padding: ${space(2)};
-  border-top: 1px solid ${p => p.theme.borderLight};
-  margin: 0 -${space(2)} -${space(2)};
-`;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleEditor/ruleNode.jsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleEditor/ruleNode.jsx
deleted file mode 100644
index 9ab3b75f52..0000000000
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleEditor/ruleNode.jsx
+++ /dev/null
@@ -1,187 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from '@emotion/styled';
-
-import Button from 'app/components/button';
-import {t} from 'app/locale';
-import {SelectField, NumberField, TextField} from 'app/components/forms';
-
-class RuleNode extends React.Component {
-  static propTypes = {
-    data: PropTypes.object.isRequired,
-    node: PropTypes.shape({
-      label: PropTypes.string.isRequired,
-      formFields: PropTypes.object,
-    }).isRequired,
-    handleDelete: PropTypes.func.isRequired,
-    handlePropertyChange: PropTypes.func.isRequired,
-  };
-
-  getChoiceField(name, data) {
-    // Select the first item on this list
-    // If it's not yet defined, call handlePropertyChange to make sure the value is set on state
-
-    let initialVal;
-    if (this.props.data[name] === undefined && !!data.choices.length) {
-      if (data.initial) {
-        initialVal = data.initial;
-      } else {
-        initialVal = data.choices[0][0];
-      }
-      this.props.handlePropertyChange(name, initialVal);
-    } else {
-      initialVal = this.props.data[name];
-    }
-
-    return (
-      <SelectField
-        deprecatedSelectControl
-        clearable={false}
-        placeholder={t('Select integration')}
-        noResultsText={t('No integrations available')}
-        name={name}
-        value={initialVal}
-        choices={data.choices}
-        key={name}
-        style={{marginLeft: 6, marginRight: 6}}
-        onChange={val => this.props.handlePropertyChange(name, val)}
-      />
-    );
-  }
-
-  getTextField(name, data) {
-    return (
-      <TextField
-        name={name}
-        value={this.props.data[name]}
-        placeholder={data.placeholder}
-        key={name}
-        style={{marginBottom: 0}}
-        onChange={val => this.props.handlePropertyChange(name, val)}
-      />
-    );
-  }
-
-  getNumberField(name, data) {
-    return (
-      <NumberField
-        name={name}
-        value={this.props.data[name]}
-        placeholder={data.placeholder.toString()}
-        key={name}
-        style={{marginBottom: 0}}
-        onChange={val => this.props.handlePropertyChange(name, val)}
-      />
-    );
-  }
-
-  getField(name, data) {
-    const getFieldTypes = {
-      choice: this.getChoiceField.bind(this),
-      number: this.getNumberField.bind(this),
-      string: this.getTextField.bind(this),
-    };
-    return getFieldTypes[data.type](name, data);
-  }
-
-  getComponent(node) {
-    const {label, formFields} = node;
-
-    return label.split(/({\w+})/).map(part => {
-      if (!/^{\w+}$/.test(part)) {
-        return part;
-      }
-
-      const key = part.slice(1, -1);
-
-      // If matcher is "is set" or "is not set", then we do not want to show the value input
-      // because it is not required
-      if (
-        key === 'value' &&
-        (this.props.data.match === 'is' || this.props.data.match === 'ns')
-      ) {
-        return null;
-      }
-
-      return formFields[key] ? this.getField(key, formFields[key]) : part;
-    });
-  }
-
-  render() {
-    const {data, node} = this.props;
-
-    const component = this.getComponent(node);
-
-    return (
-      <RuleNodeRow>
-        <RuleNodeForm>
-          <input type="hidden" name="id" value={data.id} />
-          {component}
-        </RuleNodeForm>
-        <RuleNodeControls>
-          <Button
-            onClick={this.props.handleDelete}
-            type="button"
-            size="small"
-            icon="icon-trash"
-          />
-        </RuleNodeControls>
-      </RuleNodeRow>
-    );
-  }
-}
-
-export default RuleNode;
-
-const RuleNodeRow = styled('div')`
-  display: flex;
-  align-items: center;
-  padding: 0 15px;
-
-  &:nth-child(odd) {
-    background-color: ${p => p.theme.offWhite};
-  }
-`;
-
-const RuleNodeForm = styled('div')`
-  display: flex;
-  flex-wrap: wrap;
-  flex: 1;
-  line-height: 40px;
-  margin: 5px 12px 5px 0;
-  align-items: center;
-
-  .control-group {
-    margin: 0 6px;
-  }
-
-  .form-control {
-    padding: 3px 12px;
-  }
-
-  .Select {
-    line-height: 26px;
-    min-width: 150px;
-  }
-  .Select-placeholder {
-    height: 26px;
-    line-height: 26px;
-  }
-  .Select-control {
-    height: 24px;
-  }
-  .Select--single > .Select-control .Select-value {
-    line-height: 25px;
-  }
-  .Select-input {
-    height: 24px;
-    input {
-      line-height: 20px;
-      padding: 2px 0;
-    }
-  }
-`;
-
-const RuleNodeControls = styled('div')`
-  margin-left: 6px;
-`;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleEditor/ruleNodeList.jsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleEditor/ruleNodeList.jsx
deleted file mode 100644
index eafad6dbd4..0000000000
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleEditor/ruleNodeList.jsx
+++ /dev/null
@@ -1,61 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from '@emotion/styled';
-
-import SelectControl from 'app/components/forms/selectControl';
-import RuleNode from 'app/views/settings/projectAlerts/ruleEditor/ruleNode';
-
-class RuleNodeList extends React.Component {
-  static propTypes = {
-    items: PropTypes.array,
-    nodes: PropTypes.array.isRequired,
-    handlePropertyChange: PropTypes.func.isRequired,
-    handleAddRow: PropTypes.func.isRequired,
-    handleDeleteRow: PropTypes.func.isRequired,
-  };
-
-  getNode = id => {
-    return this.props.nodes.find(node => node.id === id);
-  };
-
-  render() {
-    return (
-      <div className={this.props.className}>
-        <RuleNodes>
-          {this.props.items.map((item, idx) => {
-            return (
-              <RuleNode
-                key={idx}
-                node={this.getNode(item.id)}
-                handleDelete={() => this.props.handleDeleteRow(idx)}
-                data={item}
-                handlePropertyChange={this.props.handlePropertyChange(idx)}
-              />
-            );
-          })}
-        </RuleNodes>
-        <fieldset>
-          <SelectControl
-            deprecatedSelectControl
-            onChange={obj => this.props.handleAddRow(obj ? obj.value : obj)}
-            style={{width: '100%'}}
-            options={this.props.nodes
-              .filter(n => n.enabled)
-              .map(node => ({
-                value: node.id,
-                label: node.label,
-              }))}
-          />
-        </fieldset>
-      </div>
-    );
-  }
-}
-
-export default RuleNodeList;
-
-const RuleNodes = styled('div')`
-  display: flex;
-  flex-direction: column;
-  margin-bottom: 10px;
-`;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRowNew.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRowNew.tsx
index f2dafa6461..5c099550ef 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRowNew.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRowNew.tsx
@@ -42,7 +42,7 @@ class RuleRow extends React.Component<Props, State> {
 
   renderIssueRule(data: IssueAlertRule) {
     const {params, routes, location, canEdit} = this.props;
-    const editLink = recreateRoute(`issue-rules/${data.id}/`, {
+    const editLink = recreateRoute(`rules/${data.id}/`, {
       params,
       routes,
       location,
@@ -78,11 +78,11 @@ class RuleRow extends React.Component<Props, State> {
             )}
           </div>
 
-          <div>
+          <Actions>
             {data.actions.map((action, i) => {
               return <div key={i}>{action.name}</div>;
             })}
-          </div>
+          </Actions>
         </TriggerAndActions>
       </RuleItem>
     );
@@ -117,12 +117,12 @@ class RuleRow extends React.Component<Props, State> {
                       {trigger.alertThreshold}/{data.timeWindow}min
                     </div>
                   </Trigger>
-                  <div>
+                  <Actions>
                     {trigger.actions &&
                       trigger.actions.map((action, j) => (
                         <div key={j}>{action.desc}</div>
                       ))}
-                  </div>
+                  </Actions>
                 </TriggerAndActions>
               );
             })}
@@ -165,6 +165,9 @@ const Conditions = styled('div')`
   height: 100%;
 `;
 
+// For tests
+const Actions = styled('div')``;
+
 const TriggerAndActions = styled('div')`
   display: grid;
   grid-template-columns: 1fr 1fr;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertSettings.jsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/settings.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertSettings.jsx
rename to src/sentry/static/sentry/app/views/settings/projectAlerts/settings.jsx
diff --git a/tests/js/sentry-test/fixtures/projectAlertRuleConfiguration.js b/tests/js/sentry-test/fixtures/projectAlertRuleConfiguration.js
index fc3f937caa..768f054f81 100644
--- a/tests/js/sentry-test/fixtures/projectAlertRuleConfiguration.js
+++ b/tests/js/sentry-test/fixtures/projectAlertRuleConfiguration.js
@@ -1,17 +1,184 @@
 export function ProjectAlertRuleConfiguration(params = {}) {
   return {
-    actions: [
+    conditions: [
+      {
+        enabled: true,
+        id: 'sentry.rules.conditions.every_event.EveryEventCondition',
+        label: 'An event is seen',
+      },
       {
-        id: 'sentry.rules.actions.notify1',
-        label: 'Send a notification for all services',
         enabled: true,
+        id: 'sentry.rules.conditions.first_seen_event.FirstSeenEventCondition',
+        label: 'An issue is first seen',
+      },
+      {
+        enabled: true,
+        id: 'sentry.rules.conditions.regression_event.RegressionEventCondition',
+        label: 'An issue changes state from resolved to unresolved',
+      },
+      {
+        enabled: true,
+        id: 'sentry.rules.conditions.reappeared_event.ReappearedEventCondition',
+        label: 'An issue changes state from ignored to unresolved',
+      },
+      {
+        formFields: {
+          value: {placeholder: 'value', type: 'string'},
+          match: {
+            type: 'choice',
+            choices: [
+              ['eq', 'equals'],
+              ['ne', 'does not equal'],
+              ['sw', 'starts with'],
+              ['ew', 'ends with'],
+              ['co', 'contains'],
+              ['nc', 'does not contain'],
+              ['is', 'is set'],
+              ['ns', 'is not set'],
+            ],
+          },
+          key: {placeholder: 'key', type: 'string'},
+        },
+        enabled: true,
+        id: 'sentry.rules.conditions.tagged_event.TaggedEventCondition',
+        label: "An event's tags match {key} {match} {value}",
+      },
+      {
+        formFields: {
+          interval: {
+            type: 'choice',
+            choices: [
+              ['1m', 'one minute'],
+              ['1h', 'one hour'],
+              ['1d', 'one day'],
+              ['1w', 'one week'],
+              ['30d', '30 days'],
+            ],
+          },
+          value: {placeholder: 100, type: 'number'},
+        },
+        enabled: true,
+        id: 'sentry.rules.conditions.event_frequency.EventFrequencyCondition',
+        label: 'An issue is seen more than {value} times in {interval}',
+      },
+      {
+        formFields: {
+          interval: {
+            type: 'choice',
+            choices: [
+              ['1m', 'one minute'],
+              ['1h', 'one hour'],
+              ['1d', 'one day'],
+              ['1w', 'one week'],
+              ['30d', '30 days'],
+            ],
+          },
+          value: {placeholder: 100, type: 'number'},
+        },
+        enabled: true,
+        id: 'sentry.rules.conditions.event_frequency.EventUniqueUserFrequencyCondition',
+        label: 'An issue is seen by more than {value} users in {interval}',
+      },
+      {
+        formFields: {
+          attribute: {
+            placeholder: 'i.e. exception.type',
+            type: 'choice',
+            choices: [
+              ['message', 'message'],
+              ['platform', 'platform'],
+              ['environment', 'environment'],
+              ['type', 'type'],
+              ['exception.type', 'exception.type'],
+              ['exception.value', 'exception.value'],
+              ['user.id', 'user.id'],
+              ['user.email', 'user.email'],
+              ['user.username', 'user.username'],
+              ['user.ip_address', 'user.ip_address'],
+              ['http.method', 'http.method'],
+              ['http.url', 'http.url'],
+              ['stacktrace.code', 'stacktrace.code'],
+              ['stacktrace.module', 'stacktrace.module'],
+              ['stacktrace.filename', 'stacktrace.filename'],
+            ],
+          },
+          value: {placeholder: 'value', type: 'string'},
+          match: {
+            type: 'choice',
+            choices: [
+              ['eq', 'equals'],
+              ['ne', 'does not equal'],
+              ['sw', 'starts with'],
+              ['ew', 'ends with'],
+              ['co', 'contains'],
+              ['nc', 'does not contain'],
+              ['is', 'is set'],
+              ['ns', 'is not set'],
+            ],
+          },
+        },
+        enabled: true,
+        id: 'sentry.rules.conditions.event_attribute.EventAttributeCondition',
+        label: "An event's {attribute} value {match} {value}",
+      },
+      {
+        formFields: {
+          match: {
+            type: 'choice',
+            choices: [
+              ['eq', 'equal to'],
+              ['lte', 'less than or equal to'],
+              ['gte', 'greater than or equal to'],
+            ],
+          },
+          level: {
+            type: 'choice',
+            choices: [
+              ['50', 'fatal'],
+              ['40', 'error'],
+              ['30', 'warning'],
+              ['20', 'info'],
+              ['10', 'debug'],
+              ['0', 'sample'],
+            ],
+          },
+        },
+        enabled: true,
+        id: 'sentry.rules.conditions.level.LevelCondition',
+        label: "An event's level is {match} {level}",
       },
     ],
-    conditions: [
+    actions: [
       {
-        id: 'sentry.rules.conditions.1',
-        label: 'An event is seen',
         enabled: true,
+        id: 'sentry.rules.actions.notify_event.NotifyEventAction',
+        label: 'Send a notification (for all legacy integrations)',
+      },
+      {
+        formFields: {service: {type: 'choice', choices: [['mail', 'Mail']]}},
+        enabled: true,
+        id: 'sentry.rules.actions.notify_event_service.NotifyEventServiceAction',
+        label: 'Send a notification via {service}',
+      },
+      {
+        formFields: {
+          channel: {placeholder: 'i.e #critical', type: 'string'},
+          workspace: {type: 'choice', choices: []},
+          tags: {placeholder: 'i.e environment,user,my_tag', type: 'string'},
+        },
+        enabled: false,
+        id: 'sentry.integrations.slack.notify_action.SlackNotifyServiceAction',
+        label:
+          'Send a notification to the {workspace} Slack workspace to {channel} and show tags {tags} in notification',
+      },
+      {
+        formFields: {
+          account: {type: 'choice', choices: []},
+          service: {type: 'choice', choices: []},
+        },
+        enabled: false,
+        id: 'sentry.integrations.pagerduty.notify_action.PagerDutyNotifyServiceAction',
+        label: 'Send a notification to PagerDuty account {account} and service {service}',
       },
     ],
     ...params,
diff --git a/tests/js/spec/components/forms/__snapshots__/radioGroup.spec.jsx.snap b/tests/js/spec/components/forms/__snapshots__/radioGroup.spec.jsx.snap
index 38d4b18ef5..75362377a8 100644
--- a/tests/js/spec/components/forms/__snapshots__/radioGroup.spec.jsx.snap
+++ b/tests/js/spec/components/forms/__snapshots__/radioGroup.spec.jsx.snap
@@ -14,6 +14,7 @@ exports[`RadioGroup can select a different item 1`] = `
     role="radio"
   >
     <RadioLineButton
+      aria-label="choice_one"
       type="button"
     />
     <RadioLineText>
@@ -28,6 +29,7 @@ exports[`RadioGroup can select a different item 1`] = `
     role="radio"
   >
     <RadioLineButton
+      aria-label="choice_two"
       type="button"
     />
     <RadioLineText>
@@ -42,6 +44,7 @@ exports[`RadioGroup can select a different item 1`] = `
     role="radio"
   >
     <RadioLineButton
+      aria-label="choice_three"
       type="button"
     >
       <RadioLineButtonFill
@@ -69,6 +72,7 @@ exports[`RadioGroup renders 1`] = `
     role="radio"
   >
     <RadioLineButton
+      aria-label="choice_one"
       type="button"
     >
       <RadioLineButtonFill
@@ -87,6 +91,7 @@ exports[`RadioGroup renders 1`] = `
     role="radio"
   >
     <RadioLineButton
+      aria-label="choice_two"
       type="button"
     />
     <RadioLineText>
@@ -101,6 +106,7 @@ exports[`RadioGroup renders 1`] = `
     role="radio"
   >
     <RadioLineButton
+      aria-label="choice_three"
       type="button"
     />
     <RadioLineText>
@@ -146,10 +152,12 @@ exports[`RadioGroup renders disabled 1`] = `
         role="radio"
       >
         <RadioLineButton
+          aria-label="choice_one"
           disabled={true}
           type="button"
         >
           <button
+            aria-label="choice_one"
             className="css-2gvt33-RadioLineButton e1r42lk40"
             disabled={true}
             type="button"
diff --git a/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
deleted file mode 100644
index ffc7fdc565..0000000000
--- a/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
+++ /dev/null
@@ -1,41 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`ProjectAlertSettings render() renders 1`] = `
-<ProjectAlertSettings
-  organization={
-    Object {
-      "access": Array [
-        "org:read",
-        "org:write",
-        "org:admin",
-        "org:integrations",
-        "project:read",
-        "project:write",
-        "project:admin",
-        "team:read",
-        "team:write",
-        "team:admin",
-      ],
-      "features": Array [],
-      "id": "3",
-      "name": "Organization Name",
-      "onboardingTasks": Array [],
-      "projects": Array [],
-      "scrapeJavaScript": true,
-      "slug": "org-slug",
-      "status": Object {
-        "id": "active",
-        "name": "active",
-      },
-      "teams": Array [],
-    }
-  }
-  params={
-    Object {
-      "orgId": "org-slug",
-      "projectId": "project-slug",
-    }
-  }
-  routes={Array []}
-/>
-`;
diff --git a/tests/js/spec/views/projectAlertSettings.spec.jsx b/tests/js/spec/views/projectAlertSettings.spec.jsx
deleted file mode 100644
index c9443267cf..0000000000
--- a/tests/js/spec/views/projectAlertSettings.spec.jsx
+++ /dev/null
@@ -1,44 +0,0 @@
-import React from 'react';
-import {shallow} from 'sentry-test/enzyme';
-
-import {Client} from 'app/api';
-import ProjectAlertSettings from 'app/views/settings/projectAlerts/projectAlertSettings';
-
-describe('ProjectAlertSettings', function() {
-  let org;
-  let project;
-
-  beforeEach(function() {
-    org = TestStubs.Organization();
-    project = TestStubs.ProjectDetails();
-
-    Client.addMockResponse({
-      url: `/projects/${org.slug}/${project.slug}/`,
-      method: 'GET',
-      body: project,
-    });
-    Client.addMockResponse({
-      url: `/projects/${org.slug}/${project.slug}/plugins/`,
-      method: 'GET',
-      body: [],
-    });
-  });
-
-  describe('render()', function() {
-    it('renders', function() {
-      const wrapper = shallow(
-        <ProjectAlertSettings
-          params={{orgId: org.slug, projectId: project.slug}}
-          organization={org}
-          routes={[]}
-        />,
-        {
-          context: {
-            router: TestStubs.router(),
-          },
-        }
-      );
-      expect(wrapper).toMatchSnapshot();
-    });
-  });
-});
diff --git a/tests/js/spec/views/settings/projectAlertRuleDetails.spec.jsx b/tests/js/spec/views/settings/projectAlertRuleDetails.spec.jsx
deleted file mode 100644
index 7967e9ad1c..0000000000
--- a/tests/js/spec/views/settings/projectAlertRuleDetails.spec.jsx
+++ /dev/null
@@ -1,184 +0,0 @@
-import React from 'react';
-import {mountWithTheme} from 'sentry-test/enzyme';
-import {browserHistory} from 'react-router';
-
-import ProjectAlertRuleDetails from 'app/views/settings/projectAlerts/projectAlertRuleDetails';
-
-import {selectByValue} from 'sentry-test/select';
-
-jest.mock('jquery');
-jest.unmock('app/utils/recreateRoute');
-
-describe('ProjectAlertRuleDetails', function() {
-  const projectAlertRuleDetailsRoutes = [
-    {
-      path: '/',
-    },
-    {
-      path: '/settings/',
-      name: 'Settings',
-      indexRoute: {},
-    },
-    {
-      name: 'Organization',
-      path: ':orgId/',
-    },
-    {
-      name: 'Project',
-      path: ':projectId/',
-    },
-    {},
-    {
-      indexRoute: {name: 'General'},
-    },
-    {
-      name: 'Alerts',
-      path: 'alerts/',
-      indexRoute: {},
-    },
-    {
-      path: 'rules/',
-      name: 'Rules',
-      component: null,
-      indexRoute: {},
-      childRoutes: [
-        {path: 'new/', name: 'New'},
-        {path: ':ruleId/', name: 'Edit'},
-      ],
-    },
-    {path: ':ruleId/', name: 'Edit'},
-  ];
-
-  beforeEach(async function() {
-    browserHistory.replace = jest.fn();
-    MockApiClient.addMockResponse({
-      url: '/projects/org-slug/project-slug/rules/configuration/',
-      body: TestStubs.ProjectAlertRuleConfiguration(),
-    });
-    MockApiClient.addMockResponse({
-      url: '/projects/org-slug/project-slug/rules/1/',
-      body: TestStubs.ProjectAlertRule(),
-    });
-    MockApiClient.addMockResponse({
-      url: '/projects/org-slug/project-slug/environments/',
-      body: TestStubs.Environments(),
-    });
-  });
-
-  afterEach(function() {
-    MockApiClient.clearMockResponses();
-  });
-
-  describe('New alert rule', function() {
-    let wrapper, mock;
-    beforeEach(async function() {
-      mock = MockApiClient.addMockResponse({
-        url: '/projects/org-slug/project-slug/rules/',
-        method: 'POST',
-        body: TestStubs.ProjectAlertRule(),
-      });
-
-      wrapper = mountWithTheme(
-        <ProjectAlertRuleDetails
-          routes={projectAlertRuleDetailsRoutes}
-          params={{orgId: 'org-slug', projectId: 'project-slug'}}
-        />,
-        TestStubs.routerContext()
-      );
-      await tick();
-      wrapper.update();
-    });
-
-    it('sets defaults', function() {
-      const selects = wrapper.find('SelectControl');
-      expect(selects.first().props().value).toBe('all');
-      expect(selects.last().props().value).toBe(30);
-    });
-
-    describe('saves', function() {
-      let name;
-      beforeEach(function() {
-        name = wrapper.find('input').first();
-        name.simulate('change', {target: {value: 'My rule'}});
-
-        wrapper.find('form').simulate('submit');
-      });
-
-      it('sends create request on save', function() {
-        expect(mock).toHaveBeenCalled();
-
-        expect(mock.mock.calls[0][1]).toMatchObject({
-          data: {
-            name: 'My rule',
-          },
-        });
-      });
-
-      it('updates URL', function() {
-        const url = '/settings/org-slug/project-slug/alerts/rules/1/';
-        expect(browserHistory.replace).toHaveBeenCalledWith(url);
-      });
-    });
-  });
-
-  describe('Edit alert rule', function() {
-    let wrapper, mock;
-    const endpoint = '/projects/org-slug/project-slug/rules/1/';
-    beforeEach(async function() {
-      mock = MockApiClient.addMockResponse({
-        url: endpoint,
-        method: 'PUT',
-        body: TestStubs.ProjectAlertRule(),
-      });
-
-      wrapper = mountWithTheme(
-        <ProjectAlertRuleDetails
-          routes={projectAlertRuleDetailsRoutes}
-          params={{orgId: 'org-slug', projectId: 'project-slug', ruleId: '1'}}
-        />,
-        TestStubs.routerContext()
-      );
-      await tick();
-      wrapper.update();
-    });
-
-    it('updates', function() {
-      const name = wrapper.find('input').first();
-      name.simulate('change', {target: {value: 'My rule'}});
-
-      wrapper.find('form').simulate('submit');
-      expect(mock).toHaveBeenCalled();
-    });
-
-    it('does not update URL', function() {
-      expect(browserHistory.replace).not.toHaveBeenCalled();
-    });
-
-    it('sends correct environment value', function() {
-      selectByValue(wrapper, 'production', {name: 'environment'});
-      expect(
-        wrapper.find('SelectField[name="environment"] Select').prop('value')
-      ).toEqual(expect.objectContaining({value: 'production'}));
-      wrapper.find('form').simulate('submit');
-
-      expect(mock).toHaveBeenCalledWith(
-        endpoint,
-        expect.objectContaining({
-          data: expect.objectContaining({environment: 'production'}),
-        })
-      );
-    });
-
-    it('strips environment value if "All environments" is selected', async function() {
-      selectByValue(wrapper, '__all_environments__', {name: 'environment'});
-      wrapper.find('form').simulate('submit');
-
-      expect(mock).not.toHaveBeenCalledWith(
-        endpoint,
-        expect.objectContaining({
-          data: expect.objectContaining({environment: '__all_environments__'}),
-        })
-      );
-    });
-  });
-});
diff --git a/tests/js/spec/views/settings/projectAlertRules.spec.jsx b/tests/js/spec/views/settings/projectAlertRules.spec.jsx
deleted file mode 100644
index 09fa4e3a55..0000000000
--- a/tests/js/spec/views/settings/projectAlertRules.spec.jsx
+++ /dev/null
@@ -1,45 +0,0 @@
-import React from 'react';
-import {mountWithTheme} from 'sentry-test/enzyme';
-
-import ProjectAlertRules from 'app/views/settings/projectAlerts/projectAlertRules';
-
-describe('projectAlertRules', function() {
-  let deleteMock;
-  beforeEach(function() {
-    MockApiClient.addMockResponse({
-      url: '/projects/org1/project1/rules/',
-      body: [TestStubs.ProjectAlertRule()],
-    });
-
-    deleteMock = MockApiClient.addMockResponse({
-      method: 'DELETE',
-      url: '/projects/org1/project1/rules/1/',
-      body: {},
-    });
-  });
-
-  afterEach(function() {
-    MockApiClient.clearMockResponses();
-  });
-
-  it('deletes', function() {
-    const wrapper = mountWithTheme(
-      <ProjectAlertRules routes={[]} params={{orgId: 'org1', projectId: 'project1'}} />,
-      TestStubs.routerContext()
-    );
-
-    wrapper.find('Confirm Button').simulate('click');
-    wrapper.update();
-    wrapper.find('Modal Button[priority="primary"]').simulate('click');
-    expect(deleteMock).toHaveBeenCalled();
-  });
-
-  it('has disabled edit rule button without access', function() {
-    const wrapper = mountWithTheme(
-      <ProjectAlertRules routes={[]} params={{orgId: 'org1', projectId: 'project1'}} />,
-      TestStubs.routerContext([{organization: TestStubs.Organization({access: []})}])
-    );
-
-    expect(wrapper.find('Button[data-test-id="edit-rule"]').prop('disabled')).toBe(true);
-  });
-});
diff --git a/tests/js/spec/views/settings/projectAlerts/create.spec.jsx b/tests/js/spec/views/settings/projectAlerts/create.spec.jsx
new file mode 100644
index 0000000000..b3dcfe60cf
--- /dev/null
+++ b/tests/js/spec/views/settings/projectAlerts/create.spec.jsx
@@ -0,0 +1,261 @@
+import {browserHistory} from 'react-router';
+import React from 'react';
+
+import {initializeOrg} from 'sentry-test/initializeOrg';
+import {mountWithTheme} from 'sentry-test/enzyme';
+import {selectByValue} from 'sentry-test/select-new';
+import ProjectAlerts from 'app/views/settings/projectAlerts';
+import ProjectAlertsCreate from 'app/views/settings/projectAlerts/create';
+
+jest.unmock('app/utils/recreateRoute');
+
+describe('ProjectAlertsCreate', function() {
+  const projectAlertRuleDetailsRoutes = [
+    {
+      path: '/',
+    },
+    {
+      path: '/settings/',
+      name: 'Settings',
+      indexRoute: {},
+    },
+    {
+      name: 'Organization',
+      path: ':orgId/',
+    },
+    {
+      name: 'Project',
+      path: 'projects/:projectId/',
+    },
+    {},
+    {
+      indexRoute: {name: 'General'},
+    },
+    {
+      name: 'Alert Rules',
+      path: 'alerts/',
+      indexRoute: {},
+    },
+    {
+      path: 'rules/',
+      name: 'Rules',
+      component: null,
+      indexRoute: {},
+      childRoutes: [
+        {path: 'new/', name: 'New'},
+        {path: ':ruleId/', name: 'Edit'},
+      ],
+    },
+    {path: ':ruleId/', name: 'Edit Alert Rule'},
+  ];
+
+  beforeEach(async function() {
+    browserHistory.replace = jest.fn();
+    MockApiClient.addMockResponse({
+      url: '/projects/org-slug/project-slug/rules/configuration/',
+      body: TestStubs.ProjectAlertRuleConfiguration(),
+    });
+    MockApiClient.addMockResponse({
+      url: '/projects/org-slug/project-slug/rules/1/',
+      body: TestStubs.ProjectAlertRule(),
+    });
+    MockApiClient.addMockResponse({
+      url: '/projects/org-slug/project-slug/environments/',
+      body: TestStubs.Environments(),
+    });
+  });
+
+  afterEach(function() {
+    MockApiClient.clearMockResponses();
+  });
+
+  const createWrapper = (props = {}) => {
+    const {organization, project, routerContext} = initializeOrg(props);
+    const params = {orgId: organization.slug, projectId: project.slug};
+    const wrapper = mountWithTheme(
+      <ProjectAlerts organization={organization} params={params}>
+        <ProjectAlertsCreate
+          params={params}
+          location={{pathname: ''}}
+          routes={projectAlertRuleDetailsRoutes}
+        />
+      </ProjectAlerts>,
+      routerContext
+    );
+
+    return {
+      wrapper,
+      organization,
+      project,
+    };
+  };
+
+  describe('Issue Alert', function() {
+    describe('With Metric Alerts', function() {
+      beforeEach(function() {
+        MockApiClient.addMockResponse({
+          url: '/organizations/org-slug/tags/',
+          body: [],
+        });
+        MockApiClient.addMockResponse({
+          url: '/organizations/org-slug/alert-rules/available-actions/',
+          body: [
+            {
+              allowedTargetTypes: ['user', 'team'],
+              integrationName: null,
+              type: 'email',
+              integrationId: null,
+            },
+          ],
+        });
+        MockApiClient.addMockResponse({
+          url: '/organizations/org-slug/users/',
+          body: [TestStubs.User()],
+        });
+        MockApiClient.addMockResponse({
+          url: '/organizations/org-slug/events-stats/',
+          body: TestStubs.EventsStats(),
+        });
+      });
+      it('forces user to select Metric or Issue alert', async function() {
+        const {wrapper} = createWrapper({
+          organization: {features: ['incidents']},
+        });
+        expect(wrapper.find('IssueEditor')).toHaveLength(0);
+        expect(wrapper.find('IncidentRulesCreate')).toHaveLength(0);
+
+        wrapper.find('button[aria-label="metric"]').simulate('click');
+        expect(wrapper.find('IncidentRulesCreate')).toHaveLength(1);
+        await tick();
+
+        wrapper.find('button[aria-label="issue"]').simulate('click');
+        await tick();
+        expect(wrapper.find('IncidentRulesCreate')).toHaveLength(0);
+        expect(wrapper.find('SelectControl[name="environment"]').prop('value')).toBe(
+          '__all_environments__'
+        );
+        expect(wrapper.find('SelectControl[name="actionMatch"]').prop('value')).toBe(
+          'all'
+        );
+        expect(wrapper.find('SelectControl[name="frequency"]').prop('value')).toBe('30');
+      });
+    });
+
+    describe('Without Metric Alerts', function() {
+      it('loads default values', function() {
+        const {wrapper} = createWrapper();
+        expect(wrapper.find('SelectControl[name="environment"]').prop('value')).toBe(
+          '__all_environments__'
+        );
+        expect(wrapper.find('SelectControl[name="actionMatch"]').prop('value')).toBe(
+          'all'
+        );
+        expect(wrapper.find('SelectControl[name="frequency"]').prop('value')).toBe('30');
+      });
+
+      it('updates values and saves', async function() {
+        const {wrapper} = createWrapper();
+        const mock = MockApiClient.addMockResponse({
+          url: '/projects/org-slug/project-slug/rules/',
+          method: 'POST',
+          body: TestStubs.ProjectAlertRule(),
+        });
+
+        selectByValue(wrapper, 'production', {control: true, name: 'environment'});
+        selectByValue(wrapper, 'any', {name: 'actionMatch'});
+
+        // Add a condition and remove it
+        selectByValue(
+          wrapper,
+          'sentry.rules.conditions.first_seen_event.FirstSeenEventCondition',
+          {selector: 'Select[placeholder="Add a condition..."]'}
+        );
+
+        wrapper
+          .find('RuleNode')
+          .at(0)
+          .find('button[aria-label="Delete Node"]')
+          .simulate('click');
+
+        selectByValue(
+          wrapper,
+          'sentry.rules.conditions.tagged_event.TaggedEventCondition',
+          {selector: 'Select[placeholder="Add a condition..."]'}
+        );
+
+        const ruleNode = wrapper.find('RuleNode').at(0);
+
+        ruleNode
+          .find('input[name="key"]')
+          .simulate('change', {target: {value: 'conditionKey'}});
+
+        ruleNode
+          .find('input[name="value"]')
+          .simulate('change', {target: {value: 'conditionValue'}});
+
+        selectByValue(wrapper, 'ne', {name: 'match', control: true});
+
+        // Add an action and remove it
+        selectByValue(wrapper, 'sentry.rules.actions.notify_event.NotifyEventAction', {
+          selector: 'Select[placeholder="Add an action..."]',
+        });
+
+        wrapper
+          .find('PanelRuleItem')
+          .at(1)
+          .find('button[aria-label="Delete Node"]')
+          .simulate('click');
+
+        selectByValue(
+          wrapper,
+          'sentry.rules.actions.notify_event_service.NotifyEventServiceAction',
+          {
+            selector: 'Select[placeholder="Add an action..."]',
+          }
+        );
+
+        selectByValue(wrapper, '60', {
+          name: 'frequency',
+        });
+
+        wrapper
+          .find('input[name="name"]')
+          .simulate('change', {target: {value: 'My Rule Name'}});
+
+        wrapper.find('form').simulate('submit');
+
+        expect(mock).toHaveBeenCalledWith(
+          expect.any(String),
+          expect.objectContaining({
+            data: {
+              actionMatch: 'any',
+              actions: [
+                {
+                  id:
+                    'sentry.rules.actions.notify_event_service.NotifyEventServiceAction',
+                  service: 'mail',
+                },
+              ],
+              conditions: [
+                {
+                  id: 'sentry.rules.conditions.tagged_event.TaggedEventCondition',
+                  key: 'conditionKey',
+                  match: 'ne',
+                  value: 'conditionValue',
+                },
+              ],
+              environment: 'production',
+              frequency: '60',
+              name: 'My Rule Name',
+            },
+          })
+        );
+
+        await tick();
+        expect(browserHistory.replace).toHaveBeenCalledWith(
+          '/settings/org-slug/projects/project-slug/alerts/'
+        );
+      });
+    });
+  });
+});
diff --git a/tests/js/spec/views/settings/projectAlerts/list.spec.jsx b/tests/js/spec/views/settings/projectAlerts/list.spec.jsx
new file mode 100644
index 0000000000..ba749efafa
--- /dev/null
+++ b/tests/js/spec/views/settings/projectAlerts/list.spec.jsx
@@ -0,0 +1,100 @@
+import React from 'react';
+
+import {initializeOrg} from 'sentry-test/initializeOrg';
+import {mountWithTheme} from 'sentry-test/enzyme';
+import ProjectAlerts from 'app/views/settings/projectAlerts';
+import ProjectAlertsList from 'app/views/settings/projectAlerts/list';
+
+describe('ProjectAlertsList', function() {
+  let listMock;
+  beforeEach(function() {
+    listMock = MockApiClient.addMockResponse({
+      url: '/projects/org-slug/project-slug/combined-rules/',
+      body: [TestStubs.ProjectAlertRule()],
+    });
+  });
+
+  afterEach(function() {
+    MockApiClient.clearMockResponses();
+  });
+
+  const createWrapper = props => {
+    const {organization, project, routerContext} = initializeOrg(props);
+    const params = {orgId: organization.slug, projectId: project.slug};
+    const wrapper = mountWithTheme(
+      <ProjectAlerts organization={organization} params={params}>
+        <ProjectAlertsList params={params} />
+      </ProjectAlerts>,
+      routerContext
+    );
+
+    return {
+      wrapper,
+      organization,
+      project,
+    };
+  };
+
+  it('lists alert rules', function() {
+    const {wrapper} = createWrapper();
+
+    expect(listMock).toHaveBeenCalled();
+
+    expect(
+      wrapper
+        .find('RuleItem RuleType')
+        .at(0)
+        .text()
+    ).toBe('Issue');
+
+    expect(
+      wrapper
+        .find('RuleItem RuleName')
+        .at(0)
+        .text()
+    ).toBe('My alert rule');
+
+    expect(
+      wrapper
+        .find('RuleItem RuleDescription')
+        .at(0)
+        .text()
+    ).toBe('Environment: Staging');
+
+    expect(
+      wrapper
+        .find('RuleItem Conditions')
+        .at(0)
+        .text()
+    ).toBe('An alert is first seen');
+
+    expect(
+      wrapper
+        .find('RuleItem Actions')
+        .at(0)
+        .text()
+    ).toBe('Send a notification to all services');
+
+    // Has correct link to details
+    expect(wrapper.find('RuleName').prop('to')).toBe('rules/1/');
+  });
+
+  it('has disabled edit rule button without access', function() {
+    const {wrapper} = createWrapper({
+      organization: {
+        access: [],
+      },
+    });
+
+    expect(
+      wrapper.find('button[aria-label="New Alert Rule"]').prop('aria-disabled')
+    ).toBe(true);
+    expect(
+      wrapper
+        .find('RuleItem RuleDescription')
+        .at(0)
+        .text()
+    ).toBe('Environment: Staging');
+    expect(wrapper.find('RuleName')).toHaveLength(0);
+  });
+});
diff --git a/tests/js/spec/views/settings/projectAlerts/settings.spec.jsx b/tests/js/spec/views/settings/projectAlerts/settings.spec.jsx
new file mode 100644
index 0000000000..ce8cc9a763
--- /dev/null
+++ b/tests/js/spec/views/settings/projectAlerts/settings.spec.jsx
@@ -0,0 +1,44 @@
+import React from 'react';
+
+import {initializeOrg} from 'sentry-test/initializeOrg';
+import {mountWithTheme} from 'sentry-test/enzyme';
+
+import {Client} from 'app/api';
+import ProjectAlertSettings from 'app/views/settings/projectAlerts/settings';
+
+describe('ProjectAlertSettings', function() {
+  let organization;
+  let project;
+  let routerContext;
+
+  beforeEach(function() {
+    ({organization, project, routerContext} = initializeOrg());
+
+    Client.addMockResponse({
+      url: `/projects/${organization.slug}/${project.slug}/`,
+      method: 'GET',
+      body: project,
+    });
+    Client.addMockResponse({
+      url: `/projects/${organization.slug}/${project.slug}/plugins/`,
+      method: 'GET',
+      body: [],
+    });
+  });
+
+  it('renders', function() {
+    const wrapper = mountWithTheme(
+      <ProjectAlertSettings
+        params={{orgId: organization.slug, projectId: project.slug}}
+        organization={organization}
+        routes={[]}
+      />,
+      routerContext
+    );
+
+    expect(wrapper.find('Input[name="subjectTemplate"]')).toHaveLength(1);
+    expect(wrapper.find('RangeSlider[name="digestsMinDelay"]')).toHaveLength(1);
+    expect(wrapper.find('RangeSlider[name="digestsMaxDelay"]')).toHaveLength(1);
+    expect(wrapper.find('PluginList')).toHaveLength(1);
+  });
+});
