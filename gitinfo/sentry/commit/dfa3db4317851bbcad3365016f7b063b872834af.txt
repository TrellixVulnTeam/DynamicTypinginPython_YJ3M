commit dfa3db4317851bbcad3365016f7b063b872834af
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu Nov 1 10:28:15 2018 -0700

    fix(integrations): Azure DevOps prevent New workitems from erroring during issue sync (#10359)
    
    * allowed New status to be accepted.
    
    * changed should unresolve so that new acts like unresolve

diff --git a/src/sentry/integrations/vsts/issues.py b/src/sentry/integrations/vsts/issues.py
index f13db3c8b5..aea0d7e03f 100644
--- a/src/sentry/integrations/vsts/issues.py
+++ b/src/sentry/integrations/vsts/issues.py
@@ -232,7 +232,7 @@ class VstsIssueSync(IssueSyncMixin):
 
     def should_unresolve(self, data):
         done_states = self.get_done_states(data['project'])
-        return data['old_state'] in done_states and not data['new_state'] in done_states
+        return data['old_state'] in done_states or data['old_state'] is None and not data['new_state'] in done_states
 
     def should_resolve(self, data):
         done_states = self.get_done_states(data['project'])
diff --git a/src/sentry/integrations/vsts/webhooks.py b/src/sentry/integrations/vsts/webhooks.py
index 28dfa2879a..24c9ffe4df 100644
--- a/src/sentry/integrations/vsts/webhooks.py
+++ b/src/sentry/integrations/vsts/webhooks.py
@@ -162,7 +162,8 @@ class WorkItemWebhook(Endpoint):
             installation = integration.get_installation(organization_id)
             data = {
                 'new_state': status_change['newValue'],
-                'old_state': status_change['oldValue'],
+                # old_state is None when the issue is New
+                'old_state': status_change.get('oldValue'),
                 'project': project,
             }
 
diff --git a/tests/sentry/integrations/vsts/test_issues.py b/tests/sentry/integrations/vsts/test_issues.py
index ed85a004bb..c79a354120 100644
--- a/tests/sentry/integrations/vsts/test_issues.py
+++ b/tests/sentry/integrations/vsts/test_issues.py
@@ -18,7 +18,7 @@ from sentry.models import (
 from sentry.testutils import TestCase
 from sentry.utils import json
 
-from .testutils import WORK_ITEM_RESPONSE, GET_PROJECTS_RESPONSE, GET_USERS_RESPONSE
+from .testutils import WORK_ITEM_RESPONSE, WORK_ITEM_STATES, GET_PROJECTS_RESPONSE, GET_USERS_RESPONSE
 
 
 class VstsIssueBase(TestCase):
@@ -59,6 +59,12 @@ class VstsIssueBase(TestCase):
         }
         self.integration = VstsIntegration(model, self.organization.id)
         self.issue_id = '309'
+        responses.add(
+            responses.GET,
+            'https://fabrikam-fiber-inc.visualstudio.com/c0bf429a-c03c-4a99-9336-d45be74db5a6/_apis/wit/workitemtypes/Bug/states',
+            json=WORK_ITEM_STATES,
+        )
+        self.project_id_with_states = 'c0bf429a-c03c-4a99-9336-d45be74db5a6'
 
 
 class VstsIssueSyncTest(VstsIssueBase):
@@ -212,6 +218,60 @@ class VstsIssueSyncTest(VstsIssueBase):
         url = self.integration.get_issue_url(work_id)
         assert url == 'https://fabrikam-fiber-inc.visualstudio.com/_workitems/edit/345'
 
+    @responses.activate
+    def test_should_resolve_active_to_resolved(self):
+        should_resolve = self.integration.should_resolve({
+            'project': self.project_id_with_states,
+            'old_state': 'Active',
+            'new_state': 'Resolved',
+        })
+        assert should_resolve is True
+
+    @responses.activate
+    def test_should_resolve_resolved_to_active(self):
+        should_resolve = self.integration.should_resolve({
+            'project': self.project_id_with_states,
+            'old_state': 'Resolved',
+            'new_state': 'Active',
+        })
+        assert should_resolve is False
+
+    @responses.activate
+    def test_should_resolve_new(self):
+        should_resolve = self.integration.should_resolve({
+            'project': self.project_id_with_states,
+            'old_state': None,
+            'new_state': 'New',
+        })
+        assert should_resolve is False
+
+    @responses.activate
+    def test_should_unresolve_active_to_resolved(self):
+        should_unresolve = self.integration.should_unresolve({
+            'project': self.project_id_with_states,
+            'old_state': 'Active',
+            'new_state': 'Resolved',
+        })
+        assert should_unresolve is False
+
+    @responses.activate
+    def test_should_unresolve_resolved_to_active(self):
+        should_unresolve = self.integration.should_unresolve({
+            'project': self.project_id_with_states,
+            'old_state': 'Resolved',
+            'new_state': 'Active',
+        })
+        assert should_unresolve is True
+
+    @responses.activate
+    def test_should_unresolve_new(self):
+        should_unresolve = self.integration.should_unresolve({
+            'project': self.project_id_with_states,
+            'old_state': None,
+            'new_state': 'New',
+        })
+        assert should_unresolve is True
+
 
 class VstsIssueFormTest(VstsIssueBase):
     def setUp(self):
diff --git a/tests/sentry/integrations/vsts/test_webhooks.py b/tests/sentry/integrations/vsts/test_webhooks.py
index 6a206da80b..6d72a2ac05 100644
--- a/tests/sentry/integrations/vsts/test_webhooks.py
+++ b/tests/sentry/integrations/vsts/test_webhooks.py
@@ -61,6 +61,9 @@ class VstsWebhookWorkItemTest(APITestCase):
 
         self.user_to_assign = self.create_user('sentryuseremail@email.com')
 
+    def tearDown(self):
+        responses.reset()
+
     def create_linked_group(self, external_issue, project, status):
         group = self.create_group(project=project, status=status)
         GroupLink.objects.create(
@@ -72,6 +75,18 @@ class VstsWebhookWorkItemTest(APITestCase):
         )
         return group
 
+    def set_workitem_state(self, old_value, new_value):
+        work_item = dict(WORK_ITEM_UPDATED_STATUS)
+        state = work_item['resource']['fields']['System.State']
+
+        if old_value is None:
+            del state['oldValue']
+        else:
+            state['oldValue'] = old_value
+        state['newValue'] = new_value
+
+        return work_item
+
     @responses.activate
     def test_workitem_change_assignee(self):
         work_item_id = 31
@@ -143,10 +158,13 @@ class VstsWebhookWorkItemTest(APITestCase):
                 self.project,
                 GroupStatus.UNRESOLVED) for _ in range(num_groups)]
 
+        # Change so that state is changing from unresolved to resolved
+        work_item = self.set_workitem_state('Active', 'Resolved')
+
         with self.feature('organizations:integrations-issue-sync'):
             resp = self.client.post(
                 absolute_uri('/extensions/vsts/issue-updated/'),
-                data=WORK_ITEM_UPDATED_STATUS,
+                data=work_item,
                 HTTP_SHARED_SECRET=self.shared_secret,
             )
             assert resp.status_code == 200
@@ -178,14 +196,12 @@ class VstsWebhookWorkItemTest(APITestCase):
                 GroupStatus.RESOLVED) for _ in range(num_groups)]
 
         # Change so that state is changing from resolved to unresolved
-        state = WORK_ITEM_UPDATED_STATUS['resource']['fields']['System.State']
-        state['oldValue'] = 'Resolved'
-        state['newValue'] = 'Active'
+        work_item = self.set_workitem_state('Resolved', 'Active')
 
         with self.feature('organizations:integrations-issue-sync'):
             resp = self.client.post(
                 absolute_uri('/extensions/vsts/issue-updated/'),
-                data=WORK_ITEM_UPDATED_STATUS,
+                data=work_item,
                 HTTP_SHARED_SECRET=self.shared_secret,
             )
             assert resp.status_code == 200
@@ -195,3 +211,37 @@ class VstsWebhookWorkItemTest(APITestCase):
                     id__in=group_ids,
                     status=GroupStatus.UNRESOLVED)) == num_groups
             assert len(Activity.objects.filter(group_id__in=group_ids)) == num_groups
+
+    @responses.activate
+    def test_inbound_status_sync_new_workitem(self):
+        responses.add(
+            responses.GET,
+            'https://instance.visualstudio.com/c0bf429a-c03c-4a99-9336-d45be74db5a6/_apis/wit/workitemtypes/Bug/states',
+            json=WORK_ITEM_STATES,
+        )
+        work_item_id = 33
+        external_issue = ExternalIssue.objects.create(
+            organization_id=self.organization.id,
+            integration_id=self.model.id,
+            key=work_item_id,
+        )
+
+        group = self.create_linked_group(
+            external_issue,
+            self.project,
+            GroupStatus.UNRESOLVED)
+
+        # Change so that it is a new workitem
+        work_item = self.set_workitem_state(None, 'New')
+        assert 'oldValue' not in work_item['resource']['fields']['System.State']
+
+        with self.feature('organizations:integrations-issue-sync'):
+            resp = self.client.post(
+                absolute_uri('/extensions/vsts/issue-updated/'),
+                data=work_item,
+                HTTP_SHARED_SECRET=self.shared_secret,
+            )
+            assert resp.status_code == 200
+            assert Group.objects.get(id=group.id).status == GroupStatus.UNRESOLVED
+            # no change happened. no activity should be created here
+            assert len(Activity.objects.filter(group_id=group.id)) == 0
