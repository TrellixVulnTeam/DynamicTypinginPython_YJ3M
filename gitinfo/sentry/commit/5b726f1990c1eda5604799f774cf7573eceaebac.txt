commit 5b726f1990c1eda5604799f774cf7573eceaebac
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Apr 10 16:26:51 2018 -0700

    fix(ui): Fix invite member redirect (#8000)

diff --git a/src/sentry/static/sentry/app/views/inviteMember/inviteMember.jsx b/src/sentry/static/sentry/app/views/inviteMember/inviteMember.jsx
index 7e6d618912..e812c4193f 100644
--- a/src/sentry/static/sentry/app/views/inviteMember/inviteMember.jsx
+++ b/src/sentry/static/sentry/app/views/inviteMember/inviteMember.jsx
@@ -116,11 +116,11 @@ const InviteMember = createReactClass({
     // Get path to parent route (`/organizations/${slug}/members/`)
     // `recreateRoute` fucks up because of getsentry hooks
     let {params, router} = this.props;
-    let isNewSettings = /^settings/.test(router.location.pathname);
+    let isNewSettings = /^\/settings\//.test(router.location.pathname);
     let pathToParentRoute = isNewSettings
       ? '/settings/:orgId/members/'
       : '/organizations/:orgId/members/';
-    router.history.push(replaceRouterParams(pathToParentRoute, params));
+    router.push(replaceRouterParams(pathToParentRoute, params));
   },
 
   splitEmails(text) {
@@ -176,7 +176,7 @@ const InviteMember = createReactClass({
     Promise.all(emails.map(this.inviteUser))
       .then(() => this.redirectToMemberPage())
       .catch(error => {
-        if (!error.email && !error.role) {
+        if (error && !error.email && !error.role) {
           Raven.captureMessage('Unknown invite member api response', {
             extra: {error, state: this.state},
           });
diff --git a/src/sentry/static/sentry/app/views/settings/organization/members/organizationMembersView.jsx b/src/sentry/static/sentry/app/views/settings/organization/members/organizationMembersView.jsx
index 9ab58b8728..7c649c5fa6 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/members/organizationMembersView.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/members/organizationMembersView.jsx
@@ -206,7 +206,7 @@ class OrganizationMembersView extends AsyncView {
             ? t('You do not have enough permission to add new members')
             : undefined
         }
-        to={recreateRoute('new', {routes, params})}
+        to={recreateRoute('new/', {routes, params})}
         icon="icon-circle-add"
       >
         {t('Invite Member')}
diff --git a/tests/js/spec/views/inviteMember/inviteMember.spec.jsx b/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
index acbda719c6..ad6c1838e7 100644
--- a/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
+++ b/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
@@ -108,16 +108,37 @@ describe('CreateProject', function() {
         },
       });
 
-      let handleSubmitStub = sandbox.stub(InviteMember.prototype, 'redirectToMemberPage');
-      // üë∫ ‚ö†Ô∏è this is a hack to defeat the method auto binding so we can fully stub the method. It would not be neccessary with es6 class components and it relies on react internals so it's fragile - maxbittker
-      const index =
-        InviteMember.prototype.__reactAutoBindPairs.indexOf('redirectToMemberPage') + 1;
-      InviteMember.prototype.__reactAutoBindPairs[index] = handleSubmitStub;
-
-      let wrapper = mount(<InviteMember {...baseProps} />, baseContext);
+      let pushMock = jest.fn();
+      let wrapper = mount(
+        <InviteMember
+          router={{
+            push: pushMock,
+            location: {
+              pathname: '/settings/testOrg/members/new/',
+            },
+          }}
+          {...baseProps}
+        />,
+        baseContext
+      );
 
-      expect(handleSubmitStub.callCount).toEqual(1);
+      expect(pushMock).toHaveBeenCalledWith('/settings/testOrg/members/');
       expect(wrapper.state('loading')).toBe(false);
+
+      wrapper = mount(
+        <InviteMember
+          router={{
+            push: pushMock,
+            location: {
+              pathname: '/organizations/testOrg/members/new/',
+            },
+          }}
+          {...baseProps}
+        />,
+        baseContext
+      );
+
+      expect(pushMock).toHaveBeenCalledWith('/organizations/testOrg/members/');
     });
 
     it('should render roles when available and allowed, and handle submitting', function() {
