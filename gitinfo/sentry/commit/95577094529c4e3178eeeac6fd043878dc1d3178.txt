commit 95577094529c4e3178eeeac6fd043878dc1d3178
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Fri Nov 1 11:28:28 2019 -0700

    ref(pagerduty): Remove project/service mapping (#15351)

diff --git a/src/sentry/integrations/pagerduty/integration.py b/src/sentry/integrations/pagerduty/integration.py
index 3d044fbc38..0abf4a7211 100644
--- a/src/sentry/integrations/pagerduty/integration.py
+++ b/src/sentry/integrations/pagerduty/integration.py
@@ -14,12 +14,7 @@ from sentry.integrations.base import (
     IntegrationProvider,
     FeatureDescription,
 )
-from sentry.models import (
-    OrganizationIntegration,
-    PagerDutyServiceProject,
-    PagerDutyService,
-    Project,
-)
+from sentry.models import OrganizationIntegration, PagerDutyService
 from sentry.pipeline import PipelineView
 from .client import PagerDutyClient
 
@@ -51,66 +46,6 @@ class PagerDutyIntegration(IntegrationInstallation):
     def get_client(self, integration_key):
         return PagerDutyClient(integration_key=integration_key)
 
-    def get_organization_config(self):
-        from sentry.models import Project
-
-        projects = Project.objects.filter(organization_id=self.org_integration.organization_id)
-        items = []
-        for p in projects:
-            items.append({"value": p.id, "label": p.name})
-
-        service_options = [(s.id, s.service_name) for s in self.services]
-
-        fields = [
-            {
-                "name": "project_mapping",
-                "type": "choice_mapper",
-                "label": "Map projects in Sentry to services in PagerDuty",
-                "help": "When an alert rule is triggered in a project, this mapping will let us know what service to create the incident in PagerDuty.",
-                "addButtonText": "Add Sentry Project",
-                "addDropdown": {
-                    "emptyMessage": "All projects configured",
-                    "noResultsMessage": "Could not find project",
-                    "items": items,
-                },
-                "mappedSelectors": {
-                    "service": {"choices": service_options, "placeholder": "Select a service"}
-                },
-                "columnLabels": {"service": "Service"},
-                "mappedColumnLabel": "Sentry Project",
-            }
-        ]
-
-        return fields
-
-    def update_organization_config(self, data):
-
-        if "project_mapping" in data:
-            project_ids_and_services = data.pop("project_mapping")
-
-            with transaction.atomic():
-                PagerDutyServiceProject.objects.filter(pagerduty_service__in=self.services).delete()
-
-                for p_id, s in project_ids_and_services.items():
-                    # create the record in the table
-                    project = Project.objects.get(pk=p_id)
-                    service = PagerDutyService.objects.get(id=s["service"])
-                    PagerDutyServiceProject.objects.create(
-                        project=project, pagerduty_service=service
-                    )
-
-    def get_config_data(self):
-        config = self.org_integration.config
-        project_mappings = PagerDutyServiceProject.objects.filter(
-            pagerduty_service__in=self.services
-        )
-        data = {}
-        for pm in project_mappings:
-            data[pm.project_id] = {"service": pm.pagerduty_service_id}
-        config = {}
-        config["project_mapping"] = data
-        return config
-
     @property
     def services(self):
         services = PagerDutyService.objects.filter(organization_integration=self.org_integration)
diff --git a/src/sentry/integrations/pagerduty/notify_action.py b/src/sentry/integrations/pagerduty/notify_action.py
index 9bf67ef47b..2f65a6aa46 100644
--- a/src/sentry/integrations/pagerduty/notify_action.py
+++ b/src/sentry/integrations/pagerduty/notify_action.py
@@ -8,7 +8,7 @@ from django.utils.translation import ugettext_lazy as _
 from sentry.constants import ObjectStatus
 
 from sentry.rules.actions.base import EventAction
-from sentry.models import Integration, PagerDutyService, PagerDutyServiceProject
+from sentry.models import Integration, PagerDutyService
 from sentry.integrations.exceptions import ApiError
 from .client import PagerDutyClient
 
@@ -74,25 +74,10 @@ class PagerDutyNotifyServiceAction(EventAction):
             },
             "service": {"type": "choice", "choices": self.get_services()},
         }
-        initial_service = self.get_initial_service()
-        if initial_service:
-            self.form_fields["service"]["initial"] = initial_service
 
     def is_enabled(self):
         return self.get_integrations().exists()
 
-    def get_initial_service(self):
-        try:
-            # service_id here is the id of the PagerDutyService record, not the
-            # service_id that is generated by pagerduty
-            service_id = PagerDutyServiceProject.objects.get(
-                project=self.project
-            ).pagerduty_service_id
-        except PagerDutyServiceProject.DoesNotExist:
-            service_id = None
-
-        return service_id
-
     def after(self, event, state):
         if event.group.is_ignored():
             return
