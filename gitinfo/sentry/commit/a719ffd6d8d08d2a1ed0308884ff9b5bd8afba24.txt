commit a719ffd6d8d08d2a1ed0308884ff9b5bd8afba24
Author: cclauss <cclauss@bluewin.ch>
Date:   Fri Nov 17 00:06:07 2017 +0100

    Fix lambda expressions for Python 3 (#6569)

diff --git a/src/sentry/api/endpoints/group_similar_issues.py b/src/sentry/api/endpoints/group_similar_issues.py
index b6ba2de80a..2f711ff198 100644
--- a/src/sentry/api/endpoints/group_similar_issues.py
+++ b/src/sentry/api/endpoints/group_similar_issues.py
@@ -18,7 +18,7 @@ class GroupSimilarIssuesEndpoint(GroupEndpoint):
             limit = int(limit) + 1  # the target group will always be included
 
         results = filter(
-            lambda (group_id, scores): group_id != group.id,
+            lambda group_id__scores: group_id__scores[0] != group.id,
             features.compare(group, limit=limit)
         )
 
@@ -32,9 +32,9 @@ class GroupSimilarIssuesEndpoint(GroupEndpoint):
         # unexpected behavior, but still possible.)
         return Response(
             filter(
-                lambda (group_id, scores): group_id is not None,
+                lambda group_id__scores: group_id__scores[0] is not None,
                 map(
-                    lambda (group_id, scores): (serialized_groups.get(group_id), scores, ),
+                    lambda group_id__scores: (serialized_groups.get(group_id__scores[0]), group_id__scores[1], ),
                     results,
                 ),
             ),
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index d7c0ca9cd8..eadc151882 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -75,8 +75,8 @@ class GroupSerializer(Serializer):
                 group__in=list(
                     itertools.chain.from_iterable(
                         itertools.imap(
-                            lambda (project, groups): groups if not options.get(
-                                project.id,
+                            lambda project__groups: project__groups[1] if not options.get(
+                                project__groups[0].id,
                                 options.get(None)
                             ) == UserOptionValue.no_conversations else [],
                             projects.items(),
diff --git a/src/sentry/digests/backends/redis.py b/src/sentry/digests/backends/redis.py
index 47cc9d8fa2..fad2cfe3be 100644
--- a/src/sentry/digests/backends/redis.py
+++ b/src/sentry/digests/backends/redis.py
@@ -228,10 +228,10 @@ class RedisBackend(Backend):
                     raise
 
             records = map(
-                lambda (key, value, timestamp): Record(
-                    key,
-                    self.codec.decode(value) if value is not None else None,
-                    float(timestamp),
+                lambda key__value__timestamp: Record(
+                    key__value__timestamp[0],
+                    self.codec.decode(key__value__timestamp[1]) if key__value__timestamp[1] is not None else None,
+                    float(key__value__timestamp[2]),
                 ),
                 response,
             )
diff --git a/src/sentry/rules/conditions/event_frequency.py b/src/sentry/rules/conditions/event_frequency.py
index b46270aab3..6b648415fb 100644
--- a/src/sentry/rules/conditions/event_frequency.py
+++ b/src/sentry/rules/conditions/event_frequency.py
@@ -29,7 +29,7 @@ class EventFrequencyForm(forms.Form):
         choices=[
             (key, label)
             for key, (label, duration
-                      ) in sorted(intervals.items(), key=lambda (key, (label, duration)): duration)
+                      ) in sorted(intervals.items(), key=lambda key____label__duration: key____label__duration[1][1])
         ]
     )
     value = forms.IntegerField(
diff --git a/src/sentry/similarity/features.py b/src/sentry/similarity/features.py
index 5e8e740bff..0e842b24b8 100644
--- a/src/sentry/similarity/features.py
+++ b/src/sentry/similarity/features.py
@@ -16,9 +16,9 @@ def get_application_chunks(exception):
     application code "chunks": blocks of contiguously called application code.
     """
     return map(
-        lambda (in_app, frames): list(frames),
+        lambda in_app__frames: list(in_app__frames[1]),
         itertools.ifilter(
-            lambda (in_app, frames): in_app,
+            lambda in_app__frames: in_app__frames[0],
             itertools.groupby(
                 exception.stacktrace.frames,
                 key=lambda frame: frame.in_app,
@@ -180,9 +180,9 @@ class FeatureSet(object):
                         labels.append(label)
 
         return map(
-            lambda (key, scores): (
-                int(key),
-                dict(zip(labels, scores)),
+            lambda key__scores: (
+                int(key__scores[0]),
+                dict(zip(labels, key__scores[1])),
             ),
             self.index.classify(
                 scope,
@@ -201,9 +201,9 @@ class FeatureSet(object):
         items = [(self.aliases[label], thresholds.get(label, 0), ) for label in features]
 
         return map(
-            lambda (key, scores): (
-                int(key),
-                dict(zip(features, scores)),
+            lambda key__scores: (
+                int(key__scores[0]),
+                dict(zip(features, key__scores[1])),
             ),
             self.index.compare(
                 self.__get_scope(group.project),
diff --git a/src/sentry/tasks/reports.py b/src/sentry/tasks/reports.py
index ad04e7a76a..65ef048f31 100644
--- a/src/sentry/tasks/reports.py
+++ b/src/sentry/tasks/reports.py
@@ -697,7 +697,7 @@ def deliver_organization_user_report(timestamp, duration, organization_id, user_
     projects = list(projects)
 
     inclusion_predicates = [
-        lambda interval, (project, report): report is not None,
+        lambda interval, project__report: project__report[1] is not None,
         has_valid_aggregates,
     ]
 
@@ -770,7 +770,7 @@ def build_project_breakdown_series(reports):
         operator.itemgetter(0),
         sorted(
             reports.items(),
-            key=lambda (instance, report): sum(sum(values) for timestamp, values in report[0]),
+            key=lambda instance__report: sum(sum(values) for timestamp, values in instance__report[1][0]),
             reverse=True,
         ),
     )[:len(colors)]
@@ -781,14 +781,14 @@ def build_project_breakdown_series(reports):
     # largest color blocks are at the bottom and it feels appropriately
     # weighted.)
     selections = map(
-        lambda (instance, color): (
+        lambda instance__color: (
             Key(
-                instance.slug,
-                instance.get_absolute_url(),
-                color,
-                get_legend_data(reports[instance]),
+                instance__color[0].slug,
+                instance__color[0].get_absolute_url(),
+                instance__color[1],
+                get_legend_data(reports[instance__color[0]]),
             ),
-            reports[instance],
+            reports[instance__color[0]],
         ),
         zip(
             instances,
diff --git a/src/sentry/utils/iterators.py b/src/sentry/utils/iterators.py
index de52e65cd8..23ad7be766 100644
--- a/src/sentry/utils/iterators.py
+++ b/src/sentry/utils/iterators.py
@@ -18,7 +18,7 @@ def shingle(n, iterator):
     """
     return itertools.izip(
         *map(
-            lambda (i, iterator): advance(i, iterator),
+            lambda i__iterator: advance(i__iterator[0], i__iterator[1]),
             enumerate(itertools.tee(iterator, n)),
         )
     )
diff --git a/tests/sentry/similarity/test_signatures.py b/tests/sentry/similarity/test_signatures.py
index f5753547a3..b3f8cf3214 100644
--- a/tests/sentry/similarity/test_signatures.py
+++ b/tests/sentry/similarity/test_signatures.py
@@ -22,7 +22,7 @@ class MinHashSignatureBuilderTestCase(TestCase):
 
         results = Counter(
             map(
-                lambda (l, r): l == r,
+                lambda l__r: l__r[0] == l__r[1],
                 zip(
                     get_signature(a),
                     get_signature(b),
