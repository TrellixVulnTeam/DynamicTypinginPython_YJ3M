commit 83a318b65d4f1015e9687471d539bb8f97148054
Author: ckj <chriskjennings@gmail.com>
Date:   Mon Nov 9 13:28:28 2015 -0800

    Fix tests :boom:

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx
index 9abc45811d..fd381b4d01 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx
@@ -24,15 +24,15 @@ const KeyValueList = React.createClass({
           if (this.props.isContextData) {
             return [
               <tr key={key}>
-                <td>{key}</td>
-                <td><ContextData data={value}/></td>
+                <td className="key">{key}</td>
+                <td className="value"><ContextData data={value}/></td>
               </tr>
             ];
           } else {
             return [
               <tr key={key}>
-                <td>{key}</td>
-                <td><pre>{'' + value || ' '}</pre></td>
+                <td className="key">{key}</td>
+                <td className="value"><pre>{'' + value || ' '}</pre></td>
               </tr>
             ];
           }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx
index b849393412..f44da33abb 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx
@@ -54,7 +54,7 @@ const RichHttpContent = React.createClass({
     try {
       // Sentry API abbreviates long query string values, sometimes resulting in
       // an un-parsable querystring ... stay safe kids
-      return <keyValueList data={this.objectToSortedTupleArray(queryString.parse(data))}/>;
+      return <KeyValueList data={this.objectToSortedTupleArray(queryString.parse(data))}/>;
     } catch (e) {
       return <pre>{data}</pre>;
     }
diff --git a/tests/js/spec/components/events/interfaces/keyValueList.spec.jsx b/tests/js/spec/components/events/interfaces/keyValueList.spec.jsx
index 516faa935b..e4c6238182 100644
--- a/tests/js/spec/components/events/interfaces/keyValueList.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/keyValueList.spec.jsx
@@ -12,13 +12,13 @@ describe('KeyValueList', function () {
       ];
       let elem = TestUtils.renderIntoDocument(<KeyValueList data={data} />);
 
-      let dts = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dt');
-      expect(ReactDOM.findDOMNode(dts[0]).textContent).to.eql('a');
-      expect(ReactDOM.findDOMNode(dts[1]).textContent).to.eql('b');
+      let keys = TestUtils.scryRenderedDOMComponentsWithClass(elem, 'key');
+      expect(ReactDOM.findDOMNode(keys[0]).textContent).to.eql('a');
+      expect(ReactDOM.findDOMNode(keys[1]).textContent).to.eql('b');
 
-      let dds = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dd');
-      expect(ReactDOM.findDOMNode(dds[0]).textContent).to.eql('x');
-      expect(ReactDOM.findDOMNode(dds[1]).textContent).to.eql('y');
+      let values = TestUtils.scryRenderedDOMComponentsWithClass(elem, 'value');
+      expect(ReactDOM.findDOMNode(values[0]).textContent).to.eql('x');
+      expect(ReactDOM.findDOMNode(values[1]).textContent).to.eql('y');
     });
 
     it('should sort sort key/value pairs', function () {
@@ -27,13 +27,13 @@ describe('KeyValueList', function () {
       ];
       let elem = TestUtils.renderIntoDocument(<KeyValueList data={data} />);
 
-      let dts = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dt');
-      expect(ReactDOM.findDOMNode(dts[0]).textContent).to.eql('a');
-      expect(ReactDOM.findDOMNode(dts[1]).textContent).to.eql('b');
+      let keys = TestUtils.scryRenderedDOMComponentsWithClass(elem, 'key');
+      expect(ReactDOM.findDOMNode(keys[0]).textContent).to.eql('a');
+      expect(ReactDOM.findDOMNode(keys[1]).textContent).to.eql('b');
 
-      let dds = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dd');
-      expect(ReactDOM.findDOMNode(dds[0]).textContent).to.eql('x');
-      expect(ReactDOM.findDOMNode(dds[1]).textContent).to.eql('y');
+      let values = TestUtils.scryRenderedDOMComponentsWithClass(elem, 'value');
+      expect(ReactDOM.findDOMNode(values[0]).textContent).to.eql('x');
+      expect(ReactDOM.findDOMNode(values[1]).textContent).to.eql('y');
     });
 
     it('should use a single space for values that are an empty string', function () {
@@ -42,13 +42,13 @@ describe('KeyValueList', function () {
       ];
       let elem = TestUtils.renderIntoDocument(<KeyValueList data={data} />);
 
-      let dts = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dt');
-      expect(ReactDOM.findDOMNode(dts[0]).textContent).to.eql('a');
-      expect(ReactDOM.findDOMNode(dts[1]).textContent).to.eql('b');
+      let keys = TestUtils.scryRenderedDOMComponentsWithClass(elem, 'key');
+      expect(ReactDOM.findDOMNode(keys[0]).textContent).to.eql('a');
+      expect(ReactDOM.findDOMNode(keys[1]).textContent).to.eql('b');
 
-      let dds = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dd');
-      expect(ReactDOM.findDOMNode(dds[0]).textContent).to.eql(' ');
-      expect(ReactDOM.findDOMNode(dds[1]).textContent).to.eql('y');
+      let values = TestUtils.scryRenderedDOMComponentsWithClass(elem, 'value');
+      expect(ReactDOM.findDOMNode(values[0]).textContent).to.eql(' ');
+      expect(ReactDOM.findDOMNode(values[1]).textContent).to.eql('y');
     });
 
     it('should coerce non-strings into strings', function () {
@@ -57,11 +57,11 @@ describe('KeyValueList', function () {
       ];
       let elem = TestUtils.renderIntoDocument(<KeyValueList data={data} />);
 
-      let dts = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dt');
-      expect(ReactDOM.findDOMNode(dts[0]).textContent).to.eql('a');
+      let keys = TestUtils.scryRenderedDOMComponentsWithClass(elem, 'key');
+      expect(ReactDOM.findDOMNode(keys[0]).textContent).to.eql('a');
 
-      let dds = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dd');
-      expect(ReactDOM.findDOMNode(dds[0]).textContent).to.eql('false');
+      let values = TestUtils.scryRenderedDOMComponentsWithClass(elem, 'value');
+      expect(ReactDOM.findDOMNode(values[0]).textContent).to.eql('false');
     });
 
     it('shouldn\'t blow up on null', function () {
@@ -70,11 +70,11 @@ describe('KeyValueList', function () {
       ];
       let elem = TestUtils.renderIntoDocument(<KeyValueList data={data} />);
 
-      let dts = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dt');
-      expect(ReactDOM.findDOMNode(dts[0]).textContent).to.eql('a');
+      let keys = TestUtils.scryRenderedDOMComponentsWithClass(elem, 'key');
+      expect(ReactDOM.findDOMNode(keys[0]).textContent).to.eql('a');
 
-      let dds = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dd');
-      expect(ReactDOM.findDOMNode(dds[0]).textContent).to.eql('null');
+      let values = TestUtils.scryRenderedDOMComponentsWithClass(elem, 'value');
+      expect(ReactDOM.findDOMNode(values[0]).textContent).to.eql('null');
     });
   });
 });
