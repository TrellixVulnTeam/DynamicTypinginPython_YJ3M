commit 032440a9cbc5ab180625b29766449a6b68ab0447
Author: Chris Clark <christopherchristopherclark@gmail.com>
Date:   Tue Jan 2 12:00:14 2018 -0800

    Feat(Personal Settings): Avatar Page Styles (#6828)
    
    * copy pasta
    
    * use Panel, PanelHeader, and PanelBody components
    
    * light styles
    
    * switch to string proptype for radioField and radioGroup because that seems to be what we use elsewhere
    
    * gotta use rems for the radioGroup fill otherwise it gets weird sizes
    
    * gotta use rems for the radioGroup fill otherwise it gets weird sizes
    
    * refactor onChange method to be much easier to read

diff --git a/docs-ui/components/form.stories.js b/docs-ui/components/form.stories.js
index 8602a8afda..334a95c869 100644
--- a/docs-ui/components/form.stories.js
+++ b/docs-ui/components/form.stories.js
@@ -95,7 +95,11 @@ storiesOf('Forms/Fields', module)
         <RadioField
           name="radio"
           label="Radio Field"
-          choices={[[0, 'Choice One'], [1, 'Choice Two'], [2, 'Choice Three']]}
+          choices={[
+            ['choice_one', 'Choice One'],
+            ['choice_two', 'Choice Two'],
+            ['choice_three', 'Choice Three'],
+          ]}
         />
       </Form>
     ))
diff --git a/src/sentry/static/sentry/app/components/avatarSettings.jsx b/src/sentry/static/sentry/app/components/avatarSettings.jsx
new file mode 100644
index 0000000000..63123e2f7c
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/avatarSettings.jsx
@@ -0,0 +1,129 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import AlertActions from '../actions/alertActions';
+import ApiMixin from '../mixins/apiMixin';
+import AvatarCropper from '../components/avatarCropper';
+import AvatarRadio from '../components/avatarRadio';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import {t} from '../locale';
+
+const AvatarSettings = React.createClass({
+  propTypes: {
+    userId: PropTypes.number,
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      user: null,
+      savedDataUrl: null,
+      dataUrl: null,
+      hasError: false,
+    };
+  },
+
+  componentDidMount() {
+    this.api.request(this.getEndpoint(), {
+      method: 'GET',
+      success: this.updateUserState,
+      error: () => {
+        this.setState({hasError: true});
+      },
+    });
+  },
+
+  getEndpoint() {
+    return '/users/me/avatar/';
+  },
+
+  updateUserState(user) {
+    this.setState({user});
+  },
+
+  updateDataUrlState(dataUrlState) {
+    this.setState(dataUrlState);
+  },
+
+  handleError(msg) {
+    AlertActions.addAlert({
+      message: t(msg),
+      type: 'error',
+    });
+  },
+
+  handleSuccess(user) {
+    this.setState({user});
+    AlertActions.addAlert({
+      message: t('Successfully saved avatar preferences'),
+      type: 'success',
+      expireAfrer: 3000,
+    });
+  },
+
+  saveSettings(ev) {
+    ev.preventDefault();
+    let avatarPhoto = null;
+    if (this.state.dataUrl) {
+      avatarPhoto = this.state.dataUrl.split(',')[1];
+    }
+    this.api.request(this.getEndpoint(), {
+      method: 'PUT',
+      data: {
+        avatar_photo: avatarPhoto,
+        avatar_type: this.state.user.avatar.avatarType,
+      },
+      success: user => {
+        this.setState({savedDataUrl: this.state.dataUrl});
+        this.handleSuccess(user);
+      },
+      error: this.handleError.bind(this, 'There was an error saving your preferences.'),
+    });
+  },
+
+  render() {
+    if (this.state.hasError) {
+      return <LoadingError />;
+    }
+    if (!this.state.user) {
+      return <LoadingIndicator />;
+    }
+
+    let gravatarMessage = (
+      <div className="well">
+        {t('Gravatars are managed through ')}
+        <a href="http://gravatar.com" target="_blank" rel="noreferrer noopener">
+          Gravatar.com
+        </a>
+      </div>
+    );
+
+    return (
+      <div style={{lineHeight: '1.5em'}}>
+        <form>
+          <AvatarRadio user={this.state.user} updateUser={this.updateUserState} />
+
+          {this.state.user.avatar.avatarType === 'gravatar' && gravatarMessage}
+
+          {this.state.user.avatar.avatarType === 'upload' && (
+            <AvatarCropper
+              {...this.props}
+              user={this.state.user}
+              savedDataUrl={this.state.savedDataUrl}
+              updateDataUrlState={this.updateDataUrlState}
+            />
+          )}
+          <fieldset className="form-actions">
+            <button className="btn btn-primary" onClick={this.saveSettings}>
+              {t('Done')}
+            </button>
+          </fieldset>
+        </form>
+      </div>
+    );
+  },
+});
+
+export default AvatarSettings;
diff --git a/src/sentry/static/sentry/app/data/forms/accountNotificationSettings.jsx b/src/sentry/static/sentry/app/data/forms/accountNotificationSettings.jsx
index e0fd1b302d..425d28b516 100644
--- a/src/sentry/static/sentry/app/data/forms/accountNotificationSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/accountNotificationSettings.jsx
@@ -22,7 +22,11 @@ const forms = [
         name: 'workflowNotifications',
         type: 'radio',
         label: 'Send Me Workflow Notifications',
-        choices: [[0, 'Always'], [1, 'Only On Issues I Subscribe To'], [2, 'Never']],
+        choices: [
+          ['always', 'Always'],
+          ['subscribe_to', 'Only On Issues I Subscribe To'],
+          ['never', 'Never'],
+        ],
         help: 'E.g. changes in issue assignment, resolution status, and comments.',
       },
     ],
@@ -55,7 +59,11 @@ const forms = [
         name: 'deployNotifications',
         type: 'radio',
         label: 'Send Me Deploy Notifications',
-        choices: [[0, 'Always'], [1, 'Only On Deploys With My Commits'], [2, 'Never']],
+        choices: [
+          ['always', 'Always'],
+          ['my_commits', 'Only On Deploys With My Commits'],
+          ['never', 'Never'],
+        ],
         help: 'Deploy emails include release, environment and commit overviews.',
       },
     ],
diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index ef8b758da6..85ead747b4 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -114,7 +114,7 @@ export default {
     Alerts: require('./components/alerts').default,
     AlertActions: require('./actions/alertActions').default,
     // TODO: remove when old personal settings are deprecated
-    AvatarSettings: require('./views/settings/account/avatar').default,
+    AvatarSettings: require('./components/avatarSettings').default,
     mixins: {
       ApiMixin: require('./mixins/apiMixin').default,
       TooltipMixin: require('./mixins/tooltip').default,
@@ -141,8 +141,8 @@ export default {
       .default,
     OrganizationsLoader: require('./components/organizations/organizationsLoader')
       .default,
-    OrganizationMembersView:
-      require('./views/settings/organization/members/organizationMembersView').default,
+    OrganizationMembersView: require('./views/settings/organization/members/organizationMembersView')
+      .default,
     Pagination: require('./components/pagination').default,
     PluginConfig: require('./components/pluginConfig').default,
     ProjectIssueTracking: require('./views/projectIssueTracking').default,
diff --git a/src/sentry/static/sentry/app/views/settings/account/avatar.jsx b/src/sentry/static/sentry/app/views/settings/account/avatar.jsx
index 3bbbc82203..1e3f293e65 100644
--- a/src/sentry/static/sentry/app/views/settings/account/avatar.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/avatar.jsx
@@ -1,10 +1,14 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import styled from 'react-emotion';
 
+import Panel from '../components/panel';
+import PanelBody from '../components/panelBody';
+import PanelHeader from '../components/panelHeader';
 import AlertActions from '../../../actions/alertActions';
 import ApiMixin from '../../../mixins/apiMixin';
 import AvatarCropper from '../../../components/avatarCropper';
-import AvatarRadio from '../../../components/avatarRadio';
+import RadioGroup from '../components/forms/radioGroup';
 import LoadingError from '../../../components/loadingError';
 import LoadingIndicator from '../../../components/loadingIndicator';
 import {t} from '../../../locale';
@@ -83,6 +87,12 @@ const AvatarSettings = React.createClass({
     });
   },
 
+  handleChange(id) {
+    let user = {...this.state.user};
+    user.avatar.avatarType = id;
+    this.updateUserState(user);
+  },
+
   render() {
     if (this.state.hasError) {
       return <LoadingError />;
@@ -101,29 +111,56 @@ const AvatarSettings = React.createClass({
     );
 
     return (
-      <div style={{lineHeight: '1.5em'}}>
-        <form>
-          <AvatarRadio user={this.state.user} updateUser={this.updateUserState} />
-
-          {this.state.user.avatar.avatarType === 'gravatar' && gravatarMessage}
-
-          {this.state.user.avatar.avatarType === 'upload' && (
-            <AvatarCropper
-              {...this.props}
-              user={this.state.user}
-              savedDataUrl={this.state.savedDataUrl}
-              updateDataUrlState={this.updateDataUrlState}
+      <Panel>
+        <PanelHeader>Avatar</PanelHeader>
+        <PanelBody>
+          <AvatarForm>
+            <RadioGroup
+              choices={[
+                ['letter_avatar', 'Use my initials'],
+                ['upload', 'Upload a Photo'],
+                ['gravatar', 'Use Gravatar'],
+              ]}
+              value={this.state.user.avatar.avatarType || 'letter_avatar'}
+              label="Avatar Type"
+              onChange={id => this.handleChange(id)}
             />
-          )}
-          <fieldset className="form-actions">
-            <button className="btn btn-primary" onClick={this.saveSettings}>
-              {t('Done')}
-            </button>
-          </fieldset>
-        </form>
-      </div>
+
+            <AvatarUploadSection>
+              {this.state.user.avatar.avatarType === 'gravatar' && gravatarMessage}
+
+              {this.state.user.avatar.avatarType === 'upload' && (
+                <AvatarCropper
+                  {...this.props}
+                  user={this.state.user}
+                  savedDataUrl={this.state.savedDataUrl}
+                  updateDataUrlState={this.updateDataUrlState}
+                />
+              )}
+              <AvatarSubmit className="form-actions">
+                <button className="btn btn-primary" onClick={this.saveSettings}>
+                  {t('Done')}
+                </button>
+              </AvatarSubmit>
+            </AvatarUploadSection>
+          </AvatarForm>
+        </PanelBody>
+      </Panel>
     );
   },
 });
 
+const AvatarForm = styled('form')`
+  line-height: 1.5em;
+  padding: 1em 1.25em;
+`;
+
+const AvatarSubmit = styled('fieldset')`
+  margin-top: 1em;
+`;
+
+const AvatarUploadSection = styled('div')`
+  margin-top: 1em;
+`;
+
 export default AvatarSettings;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField.jsx
index 8e280839c3..af4fc71cbd 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formField.jsx
@@ -14,7 +14,7 @@ import Spinner from './styled/spinner';
 import {pulse, fadeOut} from './styled/animations';
 
 const SettingsPanelItemWrapper = styled(({highlighted, ...props}) => <Flex {...props} />)`
-  padding: 15px 20px;
+  padding: 1em 1.25em;
   border-bottom: 1px solid ${p => p.theme.borderLight};
   align-items: center;
   transition: background 0.15s;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/radioField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/radioField.jsx
index 13729b74bd..63dde73247 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/radioField.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/radioField.jsx
@@ -6,7 +6,7 @@ import InputField from './inputField';
 
 class RadioField extends React.Component {
   static propTypes = {
-    id: PropTypes.number,
+    id: PropTypes.string,
     value: PropTypes.string,
     choices: PropTypes.arrayOf(PropTypes.array),
   };
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/radioGroup.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/radioGroup.jsx
index 61e3a279cf..c1b2b62f0f 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/radioGroup.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/radioGroup.jsx
@@ -31,7 +31,7 @@ const RadioGroup = ({value, choices, label, onChange}) => {
 };
 
 RadioGroup.propTypes = {
-  value: PropTypes.number,
+  value: PropTypes.string,
   choices: PropTypes.arrayOf(PropTypes.array),
   label: PropTypes.string,
   onChange: PropTypes.func,
@@ -62,8 +62,8 @@ const RadioLineItem = styled.div`
 `;
 
 const RadioLineButtonFill = styled.div`
-  width: 54%;
-  height: 54%;
+  width: 1rem;
+  height: 1rem;
   border-radius: 50%;
   background-color: ${p => p.theme.green};
   animation: ${p => (p.animate ? `0.2s ${growIn} ease` : 'none')};
diff --git a/tests/js/spec/components/forms/radioGroup.spec.jsx b/tests/js/spec/components/forms/radioGroup.spec.jsx
index 1ae6474a7b..eefd60a000 100644
--- a/tests/js/spec/components/forms/radioGroup.spec.jsx
+++ b/tests/js/spec/components/forms/radioGroup.spec.jsx
@@ -9,8 +9,12 @@ describe('RadioGroup', function() {
       const wrapper = shallow(
         <RadioGroup
           name="radio"
-          value={0}
-          choices={[[0, 'Choice One'], [1, 'Choice Two'], [2, 'Choice Three']]}
+          value="choice_one"
+          choices={[
+            ['choice_one', 'Choice One'],
+            ['choice_two', 'Choice Two'],
+            ['choice_three', 'Choice Three'],
+          ]}
         />
       );
       expect(wrapper).toMatchSnapshot();
@@ -20,8 +24,12 @@ describe('RadioGroup', function() {
       const wrapper = shallow(
         <RadioGroup
           name="radio"
-          value={2}
-          choices={[[0, 'Choice One'], [1, 'Choice Two'], [2, 'Choice Three']]}
+          value="choice_three"
+          choices={[
+            ['choice_one', 'Choice One'],
+            ['choice_two', 'Choice Two'],
+            ['choice_three', 'Choice Three'],
+          ]}
         />
       );
       expect(wrapper).toMatchSnapshot();
@@ -33,8 +41,12 @@ describe('RadioGroup', function() {
       const wrapper = mount(
         <RadioGroup
           name="radio"
-          value={0}
-          choices={[[0, 'Choice One'], [1, 'Choice Two'], [2, 'Choice Three']]}
+          value="choice_one"
+          choices={[
+            ['choice_one', 'Choice One'],
+            ['choice_two', 'Choice Two'],
+            ['choice_three', 'Choice Three'],
+          ]}
           onChange={mock}
         />
       );
@@ -42,7 +54,7 @@ describe('RadioGroup', function() {
         .find('[role="radio"]')
         .last()
         .simulate('click');
-      expect(mock).toBeCalledWith(expect.any(Number), expect.any(Object));
+      expect(mock).toBeCalledWith(expect.any(String), expect.any(Object));
     });
   });
 });
