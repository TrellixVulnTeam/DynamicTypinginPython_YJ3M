commit fb8d415cb75e7ce797f2558d32634f64d451d9f7
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Jun 4 22:55:57 2019 +0200

    feat(grouping): Added basic grouping update button (#13388)

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index c05b956102..f4444395ea 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -830,6 +830,8 @@ SENTRY_FEATURES = {
     'organizations:global-views': False,
     # Turns on grouping info.
     'organizations:grouping-info': False,
+    # Lets organizations upgrade grouping configs and tweak them
+    'organizations:tweak-grouping-config': False,
     # Lets organizations manage grouping configs
     'organizations:set-grouping-config': False,
     # Enable incidents feature
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 36eb8334c8..eb114c7d57 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -82,6 +82,7 @@ default_manager.add('organizations:sso-basic', OrganizationFeature)  # NOQA
 default_manager.add('organizations:sso-rippling', OrganizationFeature)  # NOQA
 default_manager.add('organizations:sso-saml2', OrganizationFeature)  # NOQA
 default_manager.add('organizations:grouping-info', OrganizationFeature)  # NOQA
+default_manager.add('organizations:tweak-grouping-config', OrganizationFeature)  # NOQA
 default_manager.add('organizations:set-grouping-config', OrganizationFeature)  # NOQA
 
 # Project scoped features
diff --git a/src/sentry/grouping/component.py b/src/sentry/grouping/component.py
index 4b1014fb2e..99182f3f5e 100644
--- a/src/sentry/grouping/component.py
+++ b/src/sentry/grouping/component.py
@@ -124,7 +124,7 @@ class GroupingComponent(object):
             'name': self.name,
             'contributes': self.contributes,
             'hint': self.hint,
-            'values': []
+            'values': [],
         }
         for value in self.values:
             if isinstance(value, GroupingComponent):
diff --git a/src/sentry/grouping/enhancer.py b/src/sentry/grouping/enhancer.py
index 53e76b4117..d7cdc3eddb 100644
--- a/src/sentry/grouping/enhancer.py
+++ b/src/sentry/grouping/enhancer.py
@@ -10,6 +10,7 @@ from itertools import izip
 from parsimonious.grammar import Grammar, NodeVisitor
 from parsimonious.exceptions import ParseError
 
+from sentry import projectoptions
 from sentry.stacktraces.platform import get_behavior_family_for_platform
 from sentry.grouping.utils import get_rule_bool
 from sentry.utils.compat import implements_to_string
@@ -337,6 +338,8 @@ class Enhancements(object):
             'id': self.id,
             'changelog': self.changelog,
             'bases': self.bases,
+            'latest': projectoptions.lookup_well_known_key('sentry:grouping_enhancements_base')
+            .get_default(epoch=projectoptions.LATEST_EPOCH) == self.id,
         }
         if with_rules:
             rv['rules'] = [x.as_dict() for x in self.rules]
diff --git a/src/sentry/grouping/strategies/base.py b/src/sentry/grouping/strategies/base.py
index c0f5f87653..1a0c6ad663 100644
--- a/src/sentry/grouping/strategies/base.py
+++ b/src/sentry/grouping/strategies/base.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import inspect
 
+from sentry import projectoptions
 from sentry.grouping.component import GroupingComponent
 from sentry.grouping.enhancer import Enhancements
 
@@ -202,6 +203,8 @@ class StrategyConfiguration(object):
             'strategies': sorted(self.strategies),
             'changelog': self.changelog,
             'delegates': sorted(x.id for x in self.delegates.values()),
+            'latest': projectoptions.lookup_well_known_key('sentry:grouping_config')
+            .get_default(epoch=projectoptions.LATEST_EPOCH) == self.id,
         }
 
 
diff --git a/src/sentry/grouping/strategies/configurations.py b/src/sentry/grouping/strategies/configurations.py
index 9dbf0d6f8d..371d583415 100644
--- a/src/sentry/grouping/strategies/configurations.py
+++ b/src/sentry/grouping/strategies/configurations.py
@@ -44,7 +44,6 @@ register_strategy_config(
     changelog='''
         * Traditional grouping algorithm
         * Some known weaknesses with regards to grouping of native frames
-        * No support for grouping enhancements
     '''
 )
 
diff --git a/src/sentry/south_migrations/0184_auto__del_field_group_checksum__del_unique_group_project_checksum__del.py b/src/sentry/south_migrations/0184_auto__del_field_group_checksum__del_unique_group_project_checksum__del.py
index d55bea4fd1..8b715dd6b5 100644
--- a/src/sentry/south_migrations/0184_auto__del_field_group_checksum__del_unique_group_project_checksum__del.py
+++ b/src/sentry/south_migrations/0184_auto__del_field_group_checksum__del_unique_group_project_checksum__del.py
@@ -23,7 +23,8 @@ class Migration(SchemaMigration):
             "Cannot reverse this migration. 'Group.checksum' and its values cannot be restored."
         )
 
-        # The following code is provided here to aid in writing a correct migration        # Adding field 'Group.checksum'
+        # The following code is provided here to aid in writing a correct
+        # migration        # Adding field 'Group.checksum'
         db.add_column(
             'sentry_groupedmessage',
             'checksum',
@@ -39,7 +40,8 @@ class Migration(SchemaMigration):
             "Cannot reverse this migration. 'Event.checksum' and its values cannot be restored."
         )
 
-        # The following code is provided here to aid in writing a correct migration        # Adding field 'Event.checksum'
+        # The following code is provided here to aid in writing a correct
+        # migration        # Adding field 'Event.checksum'
         db.add_column(
             'sentry_message',
             'checksum',
diff --git a/src/sentry/south_migrations/0277_auto__add_commitfilechange__add_unique_commitfilechange_commit_filenam.py b/src/sentry/south_migrations/0277_auto__add_commitfilechange__add_unique_commitfilechange_commit_filenam.py
index ed205a8b06..dfe067016d 100644
--- a/src/sentry/south_migrations/0277_auto__add_commitfilechange__add_unique_commitfilechange_commit_filenam.py
+++ b/src/sentry/south_migrations/0277_auto__add_commitfilechange__add_unique_commitfilechange_commit_filenam.py
@@ -74,11 +74,13 @@ class Migration(SchemaMigration):
             keep_default=False
         )
 
-        # Adding unique constraint on 'Repository', fields ['organization_id', 'provider', 'external_id']
+        # Adding unique constraint on 'Repository', fields ['organization_id',
+        # 'provider', 'external_id']
         db.create_unique('sentry_repository', ['organization_id', 'provider', 'external_id'])
 
     def backwards(self, orm):
-        # Removing unique constraint on 'Repository', fields ['organization_id', 'provider', 'external_id']
+        # Removing unique constraint on 'Repository', fields ['organization_id',
+        # 'provider', 'external_id']
         db.delete_unique('sentry_repository', ['organization_id', 'provider', 'external_id'])
 
         # Removing unique constraint on 'CommitFileChange', fields ['commit', 'filename']
diff --git a/src/sentry/south_migrations/0478_auto__add_incidentseen__add_unique_incidentseen_user_incident.py b/src/sentry/south_migrations/0478_auto__add_incidentseen__add_unique_incidentseen_user_incident.py
index 3291e4e09c..b75a141c73 100644
--- a/src/sentry/south_migrations/0478_auto__add_incidentseen__add_unique_incidentseen_user_incident.py
+++ b/src/sentry/south_migrations/0478_auto__add_incidentseen__add_unique_incidentseen_user_incident.py
@@ -15,8 +15,10 @@ class Migration(SchemaMigration):
         # Adding model 'IncidentSeen'
         db.create_table('sentry_incidentseen', (
             ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('incident', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.Incident'])),
-            ('user', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.User'], db_index=False)),
+            ('incident', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                to=orm['sentry.Incident'])),
+            ('user', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                to=orm['sentry.User'], db_index=False)),
             ('last_seen', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
         ))
         db.send_create_signal('sentry', ['IncidentSeen'])
@@ -24,7 +26,6 @@ class Migration(SchemaMigration):
         # Adding unique constraint on 'IncidentSeen', fields ['user', 'incident']
         db.create_unique('sentry_incidentseen', ['user_id', 'incident_id'])
 
-
     def backwards(self, orm):
         # Removing unique constraint on 'IncidentSeen', fields ['user', 'incident']
         db.delete_unique('sentry_incidentseen', ['user_id', 'incident_id'])
@@ -32,7 +33,6 @@ class Migration(SchemaMigration):
         # Deleting model 'IncidentSeen'
         db.delete_table('sentry_incidentseen')
 
-
     models = {
         'sentry.activity': {
             'Meta': {'object_name': 'Activity'},
diff --git a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
index 8bb0ab8d19..a2678f5944 100644
--- a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
@@ -139,6 +139,7 @@ export const fields = {
       return groupingConfigs.map(({id}) => [id.toString(), <code key={id}>{id}</code>]);
     },
     help: t('Sets the grouping algorithm to be used for new events.'),
+    visible: ({features}) => features.has('set-grouping-config'),
   },
   groupingEnhancementsBase: {
     name: 'groupingEnhancementsBase',
@@ -170,6 +171,7 @@ export const fields = {
       ]);
     },
     help: t('The built-in base version of grouping enhancements.'),
+    visible: ({features}) => features.has('set-grouping-config'),
   },
   groupingEnhancements: {
     name: 'groupingEnhancements',
@@ -207,6 +209,8 @@ export const fields = {
     validate: ({id, form}) => {
       return [];
     },
+    visible: ({features}) =>
+      features.has('set-grouping-config') || features.has('tweak-grouping-config'),
   },
   fingerprintingRules: {
     name: 'fingerprintingRules',
@@ -243,6 +247,8 @@ export const fields = {
         </pre>
       </React.Fragment>
     ),
+    visible: ({features}) =>
+      features.has('set-grouping-config') || features.has('tweak-grouping-config'),
   },
 
   dataScrubber: {
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
index 49acd07b03..511069d110 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
@@ -447,7 +447,11 @@ class FormField extends React.Component {
             {() => {
               const error = this.getError();
               const value = model.getValue(name);
-              return selectionInfoFunction({...props, error, value});
+              return (
+                ((typeof props.visible === 'function' ? props.visible(props) : true) &&
+                  selectionInfoFunction({...props, error, value})) ||
+                null
+              );
             }}
           </Observer>
         )}
diff --git a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
index f2031ab034..24cd3613b3 100644
--- a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
@@ -3,6 +3,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
+import marked from 'marked';
 
 import {Panel, PanelAlert, PanelHeader} from 'app/components/panels';
 import {
@@ -10,6 +11,7 @@ import {
   removeProject,
   transferProject,
 } from 'app/actionCreators/projects';
+import {addLoadingMessage, clearIndicators} from 'app/actionCreators/indicator';
 import {fields} from 'app/data/forms/projectGeneralSettings';
 import {t, tct} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
@@ -51,7 +53,7 @@ class ProjectGeneralSettings extends AsyncView {
     const endpoints = [['data', `/projects/${orgId}/${projectId}/`]];
     const {organization} = this.context;
     const features = new Set(organization.features);
-    if (features.has('set-grouping-config')) {
+    if (features.has('set-grouping-config') || features.has('tweak-grouping-config')) {
       endpoints.push(['groupingConfigs', '/grouping-configs/']);
       endpoints.push(['groupingEnhancementBases', '/grouping-enhancements/']);
     }
@@ -91,6 +93,96 @@ class ProjectGeneralSettings extends AsyncView {
     }, handleXhrErrorResponse('Unable to transfer project'));
   };
 
+  renderUpgradeGrouping() {
+    const {orgId, projectId} = this.props.params;
+
+    if (!this.state.groupingConfigs || !this.state.groupingEnhancementBases) {
+      return null;
+    }
+
+    let updateNotes = '';
+    const newData = {};
+
+    this.state.groupingConfigs.forEach(({id, latest, changelog}) => {
+      if (latest && this.state.data.groupingConfig !== id) {
+        updateNotes += changelog + '\n\n';
+        newData.groupingConfig = id;
+      }
+    });
+
+    this.state.groupingEnhancementBases.forEach(({id, latest, changelog}) => {
+      if (latest && this.state.data.groupingEnhancementsBase !== id) {
+        updateNotes += changelog + '\n\n';
+        newData.groupingEnhancementsBase = id;
+      }
+    });
+
+    if (Object.keys(newData).length === 0) {
+      return null;
+    }
+
+    return (
+      <Field
+        label={t('Upgrade Grouping Strategy')}
+        help={tct(
+          'This project uses an old grouping strategy and an update is possible.[linebreak]Doing so will cause new events to group differently.',
+          {
+            linebreak: <br />,
+          }
+        )}
+      >
+        <Confirm
+          onConfirm={() => {
+            addLoadingMessage(t('Changing grouping...'));
+            this.api
+              .requestPromise(`/projects/${orgId}/${projectId}/`, {
+                method: 'PUT',
+                data: newData,
+              })
+              .then(resp => {
+                clearIndicators();
+                ProjectActions.updateSuccess(resp);
+                this.fetchData();
+              }, handleXhrErrorResponse('Unable to upgrade config'));
+          }}
+          priority="danger"
+          title={t('Upgrade grouping strategy?')}
+          confirmText={t('Upgrade')}
+          message={
+            <div>
+              <TextBlock>
+                <strong>
+                  {t(
+                    'This will upgrade grouping and cause new events to group differently.'
+                  )}
+                </strong>
+              </TextBlock>
+              <TextBlock>
+                {t(
+                  'From this moment onwards new events are likely to generate new groups.'
+                )}
+                <br />
+                <br />
+                <strong>{t('New Behavior')}</strong>
+                <div dangerouslySetInnerHTML={{__html: marked(updateNotes)}} />
+              </TextBlock>
+            </div>
+          }
+        >
+          <div>
+            <Button
+              className="ref-upgrade-grouping-strategy"
+              type="button"
+              priority="primary"
+            >
+              {t('Update Grouping Strategy')}
+            </Button>
+          </div>
+        </Confirm>
+      </Field>
+    );
+  }
+
   isProjectAdmin = () => {
     return new Set(this.context.organization.access).has('project:admin');
   };
@@ -257,6 +349,10 @@ class ProjectGeneralSettings extends AsyncView {
           apiMethod="PUT"
           apiEndpoint={endpoint}
           onSubmitSuccess={resp => {
+            // this is necessary for the grouping upgrade button to be
+            // updating based on the current selection of the grouping
+            // config.
+            this.setState({data: resp});
             if (projectId !== resp.slug) {
               changeProjectSlug(projectId, resp.slug);
               // Container will redirect after stores get updated with new slug
@@ -284,7 +380,8 @@ class ProjectGeneralSettings extends AsyncView {
             fields={[fields.resolveAge]}
           />
 
-          {jsonFormProps.features.has('set-grouping-config') && (
+          {(jsonFormProps.features.has('set-grouping-config') ||
+            jsonFormProps.features.has('tweak-grouping-config')) && (
             <JsonForm
               {...jsonFormProps}
               title={t('Grouping Settings')}
@@ -295,13 +392,17 @@ class ProjectGeneralSettings extends AsyncView {
                 fields.fingerprintingRules,
               ]}
               renderHeader={() => (
-                <PanelAlert type="warning">
-                  <TextBlock noMargin>
-                    {t(
-                      'This is an experimental feature. Changing the value here will only apply to future events and is likely to cause events to create different groups than before.'
-                    )}
-                  </TextBlock>
-                </PanelAlert>
+                <>
+                  <PanelAlert type="warning">
+                    <TextBlock noMargin>
+                      {t(
+                        'This is an experimental feature. Changing the value here will only apply to future events and is likely to cause events to create different groups than before.'
+                      )}
+                    </TextBlock>
+                  </PanelAlert>
+                  {jsonFormProps.features.has('tweak-grouping-config') &&
+                    this.renderUpgradeGrouping()}
+                </>
               )}
             />
           )}
