commit 15500e3077f4afe5d554d652b13917cc2536673a
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu Mar 7 13:44:34 2019 -0800

    fix(deletions): Save only fields specified on RenamePendingDelete mixin and  added transaction atomic (#12229)
    
    * Save only fields speified added transaction atomic
    
    * changed location of transaction/
    
    * Added coorect import.
    
    * Added additional fields to save to keep from not saving the repo config.
    
    * Removed unnecessary transation.

diff --git a/src/sentry/db/mixin.py b/src/sentry/db/mixin.py
index e7d345150c..d20411e663 100644
--- a/src/sentry/db/mixin.py
+++ b/src/sentry/db/mixin.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import logging
 import six
 
+from django.db import transaction
 from uuid import uuid4
 
 from sentry.models import OrganizationOption
@@ -21,22 +22,35 @@ class PendingDeletionMixin(object):
     def build_pending_deletion_key(self):
         return 'pending-delete:%s:%s' % (self.__class__.__name__, self.id)
 
-    def rename_on_pending_deletion(self, fields=None):
+    def rename_on_pending_deletion(self, fields=None, extra_fields_to_save=None):
+        """
+        `fields` represents the fields that should be renamed when pending deletion occurs.
+
+        For special situations, `extra_fields_to_save`, adds additional fields that do not
+        require a new name, but do need to be saved on pending deletion.
+
+        See the Repository Model for an example.
+        """
         fields = fields or self._rename_fields_on_pending_delete
         original_data = {}
+        original_data['id'] = self.id
+        original_data['model'] = self.__class__.__name__
 
         for field in fields:
             original_data[field] = getattr(self, field)
             setattr(self, field, uuid4().hex)
 
-        self.save()
-        original_data['id'] = self.id
-        original_data['model'] = self.__class__.__name__
-        OrganizationOption.objects.create(
-            organization_id=self.organization_id,
-            key=self.build_pending_deletion_key(),
-            value=original_data,
-        )
+        if extra_fields_to_save:
+            fields = list(fields) + extra_fields_to_save
+
+        with transaction.atomic():
+            self.save(update_fields=fields)
+            OrganizationOption.objects.create(
+                organization_id=self.organization_id,
+                key=self.build_pending_deletion_key(),
+                value=original_data,
+            )
+
         logger.info(
             'rename-on-pending-deletion',
             extra={
@@ -52,7 +66,13 @@ class PendingDeletionMixin(object):
             key=self.build_pending_deletion_key(),
         )
 
-    def reset_pending_deletion_field_names(self):
+    def reset_pending_deletion_field_names(self, extra_fields_to_save=None):
+        """
+        For special situations, `extra_fields_to_save`, adds additional fields that
+        do need to be saved when resetting pending deletion.
+
+        See the Repository Model for an example.
+        """
         try:
             option = self.get_pending_deletion_option()
         except OrganizationOption.DoesNotExist:
@@ -66,11 +86,19 @@ class PendingDeletionMixin(object):
             )
             return False
 
+        fields_to_save = []
+
         for field_name, field_value in six.iteritems(option.value):
             if field_name in ('id', 'model'):
                 continue
+            fields_to_save.append(field_name)
             setattr(self, field_name, field_value)
-        self.save()
+
+        if extra_fields_to_save:
+            fields_to_save += extra_fields_to_save
+
+        self.save(update_fields=fields_to_save)
+
         logger.info(
             'reset-on-pending-deletion.success',
             extra={
diff --git a/src/sentry/models/repository.py b/src/sentry/models/repository.py
index df2d08a2be..90efa53e21 100644
--- a/src/sentry/models/repository.py
+++ b/src/sentry/models/repository.py
@@ -72,11 +72,11 @@ class Repository(Model, PendingDeletionMixin):
         # as it is pending deletion, this is added to display the fields
         # correctly to the user.
         self.config['pending_deletion_name'] = self.name
-        super(Repository, self).rename_on_pending_deletion(fields)
+        super(Repository, self).rename_on_pending_deletion(fields, ['config'])
 
     def reset_pending_deletion_field_names(self):
         del self.config['pending_deletion_name']
-        super(Repository, self).reset_pending_deletion_field_names()
+        super(Repository, self).reset_pending_deletion_field_names(['config'])
 
 
 def on_delete(instance, actor=None, **kwargs):
