commit 7715d106b80519685df14392c83d9b292b0e123c
Author: Mark Story <mark@sentry.io>
Date:   Thu Mar 19 10:08:37 2020 -0400

    ref(discover) Remove field alias support (#17705)
    
    Once we've applied the migration to remove field aliases from saved
    queries we can drop support for them from the UI. I've also corrected
    the data types for `last_seen` fields as we had them inconsistently typed
    as date and timestamp, when the type should have been `date` as that is
    what the API returns for datetime columns.

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 247e4604b0..5836bb04b3 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -866,7 +866,6 @@ def get_filter(query=None, params=None):
 # static/app/views/eventsV2/eventQueryParams.tsx so that
 # the UI builder stays in sync.
 FIELD_ALIASES = {
-    "last_seen": {"aggregations": [["max", "timestamp", "last_seen"]]},
     "project": {"fields": ["project.id"], "column_alias": "project.id"},
     "issue": {"fields": ["issue.id"], "column_alias": "issue.id"},
     "user": {"fields": ["user.id", "user.username", "user.email", "user.ip"]},
@@ -882,8 +881,7 @@ def get_json_meta_type(field_alias, snuba_type):
         function_definition = FUNCTIONS.get(function_match.group(1))
         if function_definition and function_definition.get("result_type"):
             return function_definition.get("result_type")
-    # TODO remove this check when field aliases are removed.
-    if "duration" in field_alias or field_alias in ("p75", "p95", "p99"):
+    if "duration" in field_alias:
         return "duration"
     if field_alias == "transaction.status":
         return "string"
@@ -1037,7 +1035,7 @@ FUNCTIONS = {
         "name": "last_seen",
         "args": [],
         "aggregate": ["max", "timestamp", "last_seen"],
-        "result_type": "timestamp",
+        "result_type": "date",
     },
     "latest_event": {
         "name": "latest_event",
@@ -1298,11 +1296,9 @@ def resolve_field(field, params=None):
     if match:
         return resolve_function(field, match, params)
 
-    sans_parens = field.strip("()")
-    if sans_parens in FIELD_ALIASES:
-        special_field = deepcopy(FIELD_ALIASES[sans_parens])
-        return (special_field.get("fields", []), special_field.get("aggregations", []))
-
+    if field in FIELD_ALIASES:
+        special_field = deepcopy(FIELD_ALIASES[field])
+        return (special_field.get("fields", []), None)
     return ([field], None)
 
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/data.tsx b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
index a11c6c2a01..c19a16dedb 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/data.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
@@ -208,7 +208,6 @@ type SpecialField = {
 type SpecialFields = {
   project: SpecialField;
   user: SpecialField;
-  last_seen: SpecialField;
   'issue.id': SpecialField;
   issue: SpecialField;
   release: SpecialField;
@@ -273,19 +272,6 @@ export const SPECIAL_FIELDS: SpecialFields = {
       return <Container>{badge}</Container>;
     },
   },
-  last_seen: {
-    sortField: 'last_seen',
-    renderFunc: data => (
-      <Container>
-        {data.last_seen
-          ? getDynamicText({
-              value: <StyledDateTime date={data.last_seen} />,
-              fixed: 'time',
-            })
-          : emptyValue}
-      </Container>
-    ),
-  },
   release: {
     sortField: 'release',
     renderFunc: data =>
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
index a323eb3d31..c235223236 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
@@ -6,7 +6,7 @@ export type ColumnType =
   | 'integer'
   | 'number'
   | 'duration'
-  | 'timestamp'
+  | 'date'
   | 'boolean';
 
 export type ColumnValueType = ColumnType | 'never'; // Matches to nothing
@@ -36,7 +36,7 @@ export const AGGREGATIONS = {
     parameters: [
       {
         kind: 'column',
-        columnTypes: ['string', 'integer', 'number', 'duration', 'timestamp', 'boolean'],
+        columnTypes: ['string', 'integer', 'number', 'duration', 'date', 'boolean'],
         required: true,
       },
     ],
@@ -47,7 +47,7 @@ export const AGGREGATIONS = {
     parameters: [
       {
         kind: 'column',
-        columnTypes: ['integer', 'number', 'duration', 'timestamp'],
+        columnTypes: ['integer', 'number', 'duration', 'date'],
         required: true,
       },
     ],
@@ -58,7 +58,7 @@ export const AGGREGATIONS = {
     parameters: [
       {
         kind: 'column',
-        columnTypes: ['integer', 'number', 'duration', 'timestamp'],
+        columnTypes: ['integer', 'number', 'duration', 'date'],
         required: true,
       },
     ],
@@ -89,7 +89,7 @@ export const AGGREGATIONS = {
   },
   last_seen: {
     parameters: [],
-    outputType: 'timestamp',
+    outputType: 'date',
     isSortable: true,
   },
 
@@ -192,8 +192,8 @@ export const FIELDS = {
   id: 'string',
   // issue.id and project.id are omitted on purpose.
   // Customers should use `issue` and `project` instead.
-  timestamp: 'timestamp',
-  time: 'timestamp',
+  timestamp: 'date',
+  time: 'date',
 
   culprit: 'string',
   location: 'string',
@@ -280,17 +280,3 @@ export const TRACING_FIELDS = [
   'rps',
   'rpm',
 ];
-
-// In the early days of discover2 these functions were exposed
-// as simple fields. Until we clean up all the saved queries we
-// need this for backwards compatibility.
-export const FIELD_ALIASES = [
-  'apdex',
-  'impact',
-  'p99',
-  'p95',
-  'p75',
-  'error_rate',
-  'last_seen',
-  'latest_event',
-];
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx
index cebf07eb66..6fea0e0940 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx
@@ -10,12 +10,7 @@ import {t} from 'app/locale';
 import space from 'app/styles/space';
 
 import {FieldValueKind, FieldValue} from './types';
-import {
-  FIELD_ALIASES,
-  ColumnType,
-  Aggregation,
-  AggregateParameter,
-} from '../eventQueryParams';
+import {ColumnType, AggregateParameter} from '../eventQueryParams';
 import {Column} from '../eventView';
 
 type FieldOptions = StringMap<SelectValue<FieldValue>>;
@@ -65,15 +60,6 @@ class ColumnEditRow extends React.Component<Props> {
             function: [value.meta.name, current.function[1], current.function[2]],
           };
         }
-        // Backwards compatibility for field alias versions of functions.
-        if (
-          current.kind === 'function' &&
-          column.kind === 'function' &&
-          current.function[1] &&
-          FIELD_ALIASES.includes(current.function[1])
-        ) {
-          column.function = [column.function[1] as Aggregation, '', undefined];
-        }
         break;
       default:
         throw new Error('Invalid field type found in column picker');
@@ -178,16 +164,9 @@ class ColumnEditRow extends React.Component<Props> {
         // TODO move this closer to where it is used.
         fieldParameter = this.getFieldOrTagValue(column.function[1]);
       }
-    } else if (column.kind === 'field') {
-      if (FIELD_ALIASES.includes(column.field)) {
-        // Handle backwards compatible field aliases.
-        const aliasName = `function:${column.field}`;
-        if (fieldOptions[aliasName] !== undefined) {
-          field = fieldOptions[aliasName].value;
-        }
-      } else {
-        field = this.getFieldOrTagValue(column.field);
-      }
+    }
+    if (column.kind === 'field') {
+      field = this.getFieldOrTagValue(column.field);
     }
 
     // If our current field, or columnParameter is a virtual tag, add it to the option list.
diff --git a/tests/js/spec/views/eventsV2/table/columnEditModal.spec.jsx b/tests/js/spec/views/eventsV2/table/columnEditModal.spec.jsx
index da158e844e..c4541193b4 100644
--- a/tests/js/spec/views/eventsV2/table/columnEditModal.spec.jsx
+++ b/tests/js/spec/views/eventsV2/table/columnEditModal.spec.jsx
@@ -145,33 +145,6 @@ describe('EventsV2 -> ColumnEditModal', function() {
     });
   });
 
-  describe('rendering old field aliases', function() {
-    const onApply = jest.fn();
-    const wrapper = mountModal(
-      {
-        columns: [{kind: 'field', field: 'p95'}],
-        onApply,
-        tagKeys,
-      },
-      initialData
-    );
-
-    it('renders as an aggregate function with no parameters', function() {
-      const row = wrapper.find('ColumnEditRow').first();
-      expect(row.find('SelectControl[name="field"] SingleValue').text()).toBe('p95()');
-      expect(row.find('StyledInput[disabled]')).toHaveLength(1);
-    });
-
-    it('updates correctly when the function is changed', function() {
-      // Change the function to p99. We should not get p99(p95)
-      selectByLabel(wrapper, 'p99()', {name: 'field', at: 0, control: true});
-      wrapper.find('button[aria-label="Apply"]').simulate('click');
-      expect(onApply).toHaveBeenCalledWith([
-        {kind: 'function', function: ['p99', '', undefined]},
-      ]);
-    });
-  });
-
   describe('function & column selection', function() {
     const wrapper = mountModal(
       {
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index 21e93aa188..f59ce379cc 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -1205,19 +1205,6 @@ class ResolveFieldListTest(unittest.TestCase):
         ]
         assert result["groupby"] == ["event.type", "message", "id", "project.id"]
 
-    def test_automatic_fields_with_aggregate_aliases(self):
-        fields = ["title", "last_seen"]
-        result = resolve_field_list(fields, {})
-        # Automatic fields should be inserted
-        assert result["selected_columns"] == ["title"]
-        assert result["aggregations"] == [
-            ["max", "timestamp", "last_seen"],
-            ["argMax", ["id", "timestamp"], "latest_event"],
-            ["argMax", ["project.id", "timestamp"], "projectid"],
-            ["transform(projectid, array(), array(), '')", None, "project.name"],
-        ]
-        assert result["groupby"] == ["title"]
-
     def test_field_alias_duration_expansion_with_brackets(self):
         fields = [
             "avg(transaction.duration)",
@@ -1533,19 +1520,6 @@ class ResolveFieldListTest(unittest.TestCase):
         ]
         assert result["groupby"] == ["message", "id", "project.id"]
 
-    def test_orderby_field_alias(self):
-        fields = ["last_seen"]
-        snuba_args = {"orderby": "-last_seen"}
-        result = resolve_field_list(fields, snuba_args)
-        assert result["selected_columns"] == []
-        assert result["aggregations"] == [
-            ["max", "timestamp", "last_seen"],
-            ["argMax", ["id", "timestamp"], "latest_event"],
-            ["argMax", ["project.id", "timestamp"], "projectid"],
-            ["transform(projectid, array(), array(), '')", None, "project.name"],
-        ]
-        assert result["groupby"] == []
-
     def test_orderby_field_aggregate(self):
         fields = ["count(id)", "count_unique(user)"]
         snuba_args = {"orderby": "-count(id)"}
@@ -1560,7 +1534,18 @@ class ResolveFieldListTest(unittest.TestCase):
         ]
         assert result["groupby"] == []
 
-    def test_orderby_project(self):
+    def test_orderby_issue_alias(self):
+        fields = ["issue"]
+        snuba_args = {"orderby": "-issue"}
+        result = resolve_field_list(fields, snuba_args)
+        assert result["orderby"] == ["-issue.id"]
+        assert result["selected_columns"] == ["issue.id", "id", "project.id"]
+        assert result["aggregations"] == [
+            ["transform(project_id, array(), array(), '')", None, "project.name"]
+        ]
+        assert result["groupby"] == ["issue.id", "id", "project.id"]
+
+    def test_orderby_project_alias(self):
         fields = ["project"]
         snuba_args = {"orderby": "-project"}
         result = resolve_field_list(fields, snuba_args)
