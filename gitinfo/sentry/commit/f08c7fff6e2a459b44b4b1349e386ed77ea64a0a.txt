commit f08c7fff6e2a459b44b4b1349e386ed77ea64a0a
Author: Ben Vinegar <ben@benv.ca>
Date:   Thu Sep 3 17:00:05 2015 -0700

    Search autocomplete implementation (refs #1240)

diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index d884bd8ec4..bb20bcbd0e 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -50,7 +50,7 @@ class Client {
     };
   }
 
-  request(path, options) {
+  request(path, options = {}) {
     var query = $.param(options.query || "", true);
     var method = options.method || (options.data ? "POST" : "GET");
     var data = options.data;
diff --git a/src/sentry/static/sentry/app/views/projectReleases/index.jsx b/src/sentry/static/sentry/app/views/projectReleases/index.jsx
index a4db068a6f..2ea6c90d4d 100644
--- a/src/sentry/static/sentry/app/views/projectReleases/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectReleases/index.jsx
@@ -5,7 +5,7 @@ import LoadingError from "../../components/loadingError";
 import LoadingIndicator from "../../components/loadingIndicator";
 import Pagination from "../../components/pagination";
 import RouteMixin from "../../mixins/routeMixin";
-import SearchBar from "../../views/stream/searchBar.jsx";
+import SearchBar from "./searchBar.jsx";
 
 import ReleaseList from "./releaseList";
 
diff --git a/src/sentry/static/sentry/app/views/projectReleases/searchBar.jsx b/src/sentry/static/sentry/app/views/projectReleases/searchBar.jsx
new file mode 100644
index 0000000000..7e577d892a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectReleases/searchBar.jsx
@@ -0,0 +1,86 @@
+import React from "react";
+var PureRenderMixin = require('react/addons').addons.PureRenderMixin;
+
+var SearchBar = React.createClass({
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  mixins: [PureRenderMixin],
+
+  getDefaultProps() {
+    return {
+      defaultQuery: "",
+      query: "",
+      onSearch: function() {},
+      onQueryChange: function() {}
+    };
+  },
+
+  getInitialState() {
+    return {
+      query: this.props.query || this.props.defaultQuery
+    };
+  },
+
+  blur() {
+    this.refs.searchInput.getDOMNode().blur();
+  },
+
+  onSubmit(event) {
+    event.preventDefault();
+    this.blur();
+    this.props.onSearch(this.state.query);
+  },
+
+  clearSearch() {
+    this.setState(
+      { query: this.props.defaultQuery },
+      () => this.props.onSearch(this.state.query)
+    );
+  },
+
+  onQueryFocus() {
+    this.setState({
+      dropdownVisible: true
+    });
+  },
+
+  onQueryBlur() {
+    this.setState({ dropdownVisible: false });
+  },
+
+  onQueryChange(event) {
+    this.setState({ query: event.target.value });
+  },
+
+  render() {
+    return (
+      <div className="search">
+        <form className="form-horizontal" ref="searchForm" onSubmit={this.onSubmit}>
+          <div>
+            <input type="text" className="search-input form-control"
+              placeholder={this.props.placeholder}
+              name="query"
+              ref="searchInput"
+              autoComplete="off"
+              value={this.state.query}
+              onBlur={this.onQueryBlur}
+              onChange={this.onQueryChange}
+              />
+            <span className="icon-search" />
+            {this.state.query !== this.props.defaultQuery &&
+              <div>
+                <a className="search-clear-form" onClick={this.clearSearch}>
+                  <span className="icon-circle-cross" />
+                </a>
+              </div>
+            }
+          </div>
+        </form>
+      </div>
+    );
+  }
+});
+
+export default SearchBar;
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index b34847e0b9..cbe049cf17 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -31,7 +31,9 @@ var Stream = React.createClass({
 
   getDefaultProps() {
     return {
-      defaultQuery: "is:unresolved",
+      // intentional trailing whitespace / better UX for when uesrs focus on search input
+      defaultQuery: "is:unresolved ",
+
       defaultSort: "date",
       defaultStatsPeriod: "24h",
       maxItems: 25
diff --git a/src/sentry/static/sentry/app/views/stream/filters.jsx b/src/sentry/static/sentry/app/views/stream/filters.jsx
index b3e7dbd4d5..d08cc734f2 100644
--- a/src/sentry/static/sentry/app/views/stream/filters.jsx
+++ b/src/sentry/static/sentry/app/views/stream/filters.jsx
@@ -1,8 +1,6 @@
 import React from "react";
-
 import FilterSelectLink from "./filterSelectLink";
 import SearchBar from "./searchBar";
-import SearchDropdown from "./searchDropdown";
 import SortOptions from "./sortOptions";
 
 var StreamFilters = React.createClass({
@@ -22,12 +20,6 @@ var StreamFilters = React.createClass({
     };
   },
 
-  getInitialState() {
-    return {
-      activeButton: null
-    };
-  },
-
   componentWillMount() {
     this.setState({
       activeButton: this.getActiveButton()
@@ -90,12 +82,13 @@ var StreamFilters = React.createClass({
             </ul>
           </div>
           <div className="col-sm-5">
-            <SearchBar defaultQuery={this.props.defaultQuery}
+            <SearchBar
+              ref="searchBar"
+              defaultQuery={this.props.defaultQuery}
               placeholder="Search for events, users, tags, and everything else."
               query={this.props.query}
-              onSearch={this.props.onSearch}>
-              <SearchDropdown dropdownVisible={this.state.dropdownVisible} />
-            </SearchBar>
+              onSearch={this.props.onSearch}
+              />
           </div>
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index 888235ac60..6eb3d532d4 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -1,29 +1,94 @@
 import React from "react";
+import Reflux from "reflux";
+import _ from "underscore";
+
+// import TagStore from "../../stores/tagStore";
+import MemberListStore from "../../stores/memberListStore";
+
+import api from "../../api";
+
 var PureRenderMixin = require('react/addons').addons.PureRenderMixin;
 
+import SearchDropdown from "./searchDropdown";
+
 var SearchBar = React.createClass({
   contextTypes: {
     router: React.PropTypes.func
   },
 
-  mixins: [PureRenderMixin],
+  mixins: [
+    PureRenderMixin,
+    Reflux.listenTo(MemberListStore, 'onMemberListStoreChange')
+  ],
+
+  DROPDOWN_BLUR_DURATION: 200,
 
   getDefaultProps() {
     return {
       defaultQuery: "",
       query: "",
       onSearch: function() {},
-      onQueryChange: function() {}
+      onQueryChange: function() {},
+
+      defaultSearchItems: [
+        {
+          title: 'Tag',
+          desc: 'key/value pair associated to an event',
+          example: 'browser:"Chrome 34"',
+          className: 'icon-tag',
+          value: 'browser:'
+        },
+        {
+          title: 'Status',
+          desc: 'State of an event',
+          example: 'is:resolved, unresolved, muted',
+          className: 'icon-toggle',
+          value: 'is:'
+        },
+        {
+          title: 'Assigned',
+          desc: 'team member assigned to an event',
+          example: 'assigned:[me|user@example.com]',
+          className: 'icon-user',
+          value: 'assigned:'
+        },
+        {
+          desc: 'or paste an event id to jump straight to it',
+          className: 'icon-hash'
+        }
+      ]
     };
   },
 
   getInitialState() {
     return {
       query: this.props.query || this.props.defaultQuery,
-      dropdownVisible: false
+
+      searchItems: [],
+      activeSearchItem: 0,
+
+      tags: {},
+      members: MemberListStore.getAll(),
+
+      dropdownVisible: false,
+      loading: false
     };
   },
 
+  componentWillMount() {
+    var params = this.context.router.getCurrentParams();
+    api.request(`/projects/${params.orgId}/${params.projectId}/tags/`, {
+      success: (tags) => {
+        this.setState({
+          tags: tags.reduce((obj, tag) => {
+            obj[tag.key] = tag;
+            return obj;
+          }, this.state.tags)
+        });
+      }
+    });
+  },
+
   blur() {
     this.refs.searchInput.getDOMNode().blur();
   },
@@ -48,15 +113,18 @@ var SearchBar = React.createClass({
   },
 
   onQueryBlur() {
-    this.setState({
-      dropdownVisible: false
-    });
+    // wait 200ms before closing dropdown in case blur was a result of
+    // clicking a menu option
+    this.blurTimeout = setTimeout(() => {
+      this.blurTimeout = null;
+      this.setState({ dropdownVisible: false });
+    }, this.DROPDOWN_BLUR_DURATION);
   },
 
   onQueryChange(event) {
     this.setState(
       { query: event.target.value },
-      () => this.props.onQueryChange(this.state.query)
+      () => this.updateAutoCompleteItems()
     );
   },
 
@@ -67,6 +135,269 @@ var SearchBar = React.createClass({
     }
   },
 
+  getCursorPosition() {
+    return this.refs.searchInput.getDOMNode().selectionStart;
+  },
+
+  /**
+   * Returns an array of query terms, including incomplete terms
+   *
+   * e.g. ["is:unassigned", "browser:\"Chrome 33.0\"", "assigned"]
+   */
+  getQueryTerms(query, cursor) {
+    return query.slice(0, cursor).match(/\S+:"[^"]*"?|\S+/g);
+  },
+
+  /**
+   * Returns a tag object matching the given tag name. Includes
+   * predefined tags (e..g "is:" and "assigned:").
+   */
+  getTag(tagName) {
+    // predefined search terms tag priority over tags
+    switch (tagName) {
+      case 'is':
+        return {
+          key: 'is',
+          values: [
+            { value: 'resolved' },
+            { value: 'unresolved' },
+            { value: 'muted' }
+          ],
+          predefined: true
+        };
+      case 'assigned':
+        return {
+          key: 'assigned',
+          values: MemberListStore.getAll().map(user => {
+            return { value: user.email };
+          }),
+          predefined: true
+        };
+      default:
+        return this.state.tags[tagName];
+    }
+  },
+
+  /**
+   * Returns array of possible key values that substring match `query`
+   *
+   * e.g. ['is:', 'assigned:', 'url:', 'release:']
+   */
+  getTagKeys: function (query) {
+    let keys = [
+      'is',
+      'assigned'
+    ].concat(Object.keys(this.state.tags).map(k => this.state.tags[k].key));
+
+    return keys
+      .map(key => key + ':')
+      .filter(key => key.indexOf(query) > -1);
+  },
+
+  /**
+   * Returns array of tag values that substring match `query`; invokes `callback`
+   * with data when ready
+   */
+  getTagValues: _.debounce(function (tag, query, callback) {
+    // Strip double quotes if there are any
+    query = query.replace('"', '').trim();
+
+    this.setState({
+      loading: true
+    });
+
+    var params = this.context.router.getCurrentParams();
+    api.request(`/projects/${params.orgId}/${params.projectId}/tags/${tag.key}/values/`, {
+      data: {
+        query: query
+      },
+      method: "GET",
+      success: (values) => {
+        this.setState({ loading: false });
+        callback(values.map(v => '"' + v.value + '"'), tag.key);
+      }
+    });
+  }, 300),
+
+  /**
+   * Returns array of tag values that substring match `query`; invokes `callback`
+   * with results
+   */
+  getPredefinedTagValues: function (tag, query, callback) {
+    var values = tag.values
+      .map(valueObj => valueObj.value)
+      .filter(value => value.indexOf(query) > -1);
+
+    callback(values, tag.key);
+  },
+
+  onInputClick() {
+    let cursor = this.getCursorPosition();
+
+    if (cursor === this.state.query.length && this.state.query.charAt(cursor - 1) !== ' ') {
+      // If the cursor lands at the end of the input value, and the preceding character
+      // is not whitespace, then add a space and move the cursor beyond that space.
+      this.setState(
+        { query: this.state.query + ' ' },
+        () => {
+          this.refs.searchInput.getDOMNode().setSelectionRange(cursor + 1, cursor + 1);
+          this.updateAutoCompleteItems();
+        }
+      );
+    } else {
+      this.updateAutoCompleteItems();
+    }
+  },
+
+  updateAutoCompleteItems() {
+    if (this.blurTimeout) {
+      clearTimeout(this.blurTimeout);
+      this.blurTimeout = null;
+    }
+
+    var cursor = this.getCursorPosition();
+    var query = this.state.query;
+    let terms = this.getQueryTerms(query);
+
+    if (!terms || // no terms
+        terms.length === 0 || // no terms
+        terms.length === 1 && terms[0] === this.props.defaultQuery || // default term
+        /\s{2}|\s{1}/.test(query.slice(cursor - 1, cursor + 1))) // cursor on whitespace
+    {
+      // show default "help" search terms
+      return void this.setState({
+        searchItems: this.props.defaultSearchItems,
+        activeSearchItem: 0
+      });
+    }
+
+    let last = terms.pop();
+    let autoCompleteItems;
+    let matchValue;
+    let tagName;
+
+    if (last.indexOf(':') === -1) {
+      // No colon present; must still be deciding key
+      matchValue = last;
+      autoCompleteItems = this.getTagKeys(matchValue);
+
+      this.updateAutoCompleteState(autoCompleteItems, matchValue);
+    } else {
+      [tagName, query] = last.split(':');
+
+      let tag = this.getTag(tagName);
+      if (!tag)
+        return void this.setState({ searchItems: [] });
+
+      return void (
+        tag.predefined
+          ? this.getPredefinedTagValues
+          : this.getTagValues
+        )(tag, query, this.updateAutoCompleteState);
+    }
+  },
+
+  updateAutoCompleteState(autoCompleteItems, tagName) {
+    autoCompleteItems = autoCompleteItems.map(item => {
+      let out = {
+        desc: item,
+        value: item,
+      };
+
+      // Specify icons according to tag value
+      switch (tagName || item.replace(':', '')) {
+        case 'is':
+          out.className = 'icon-toggle';
+          break;
+        case 'assigned':
+          out.className = 'icon-user';
+          break;
+        default:
+          out.className = 'icon-tag';
+      }
+      return out;
+    });
+
+    if (autoCompleteItems.length > 0) {
+      autoCompleteItems[0].active = true;
+    }
+
+    this.setState({
+      searchItems: autoCompleteItems.slice(0, 5), // only show 5
+      activeSearchItem: 0
+    });
+  },
+
+  onKeyDown(event) {
+    let state = this.state;
+    let searchItems = state.searchItems;
+
+    if (!searchItems.length)
+      return;
+
+    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {
+      // Move active selection up/down
+      delete searchItems[state.activeSearchItem].active;
+
+      state.activeSearchItem = event.key === 'ArrowDown'
+        ? Math.min(state.activeSearchItem + 1, searchItems.length - 1)
+        : Math.max(state.activeSearchItem - 1, 0);
+
+      searchItems[state.activeSearchItem].active = true;
+      this.setState({ searchItems: searchItems.slice(0) });
+
+    } else if (event.key === 'Tab') {
+      this.onAutoComplete(searchItems[state.activeSearchItem].value);
+    }
+  },
+
+  onAutoComplete(replaceText) {
+    let cursor = this.getCursorPosition();
+    let query = this.state.query;
+
+    let terms = this.getQueryTerms(query);
+    let newQuery;
+
+    // If not postfixed with : (tag value), add trailing space
+    replaceText += replaceText.charAt(replaceText.length - 1) === ':' ? '' : ' ';
+
+    if (!terms) {
+      newQuery = replaceText;
+    } else {
+      let last = terms.pop();
+
+      newQuery = query.slice(0, cursor); // get text preceding cursor
+
+      newQuery = last.indexOf(':') > -1
+        // tag key present: replace everything after colon with replaceText
+        ? newQuery.replace(/\:"[^"]*"?$|\:\S*$/, ':' + replaceText)
+        // no tag key present: replace last token with replaceText
+        : newQuery.replace(/\S+$/, replaceText);
+
+      newQuery = newQuery.concat(query.slice(cursor));
+    }
+
+    // prevent enter keypress from losing focus
+    event.preventDefault();
+
+    this.setState({
+      query: newQuery
+    }, () => {
+      // setting a new input value will lose focus; restore it
+      var node = this.refs.searchInput.getDOMNode();
+      node.focus();
+
+      // then update the autocomplete box with new contextTypes
+      this.updateAutoCompleteItems();
+    });
+  },
+
+  onMemberListStoreChange(members) {
+    this.setState({
+      members: members
+    }, this.updateAutoCompleteItems);
+  },
+
   render() {
     var dropdownStyle = {
       display: this.state.dropdownVisible ? 'block' : 'none'
@@ -85,7 +416,10 @@ var SearchBar = React.createClass({
               onFocus={this.onQueryFocus}
               onBlur={this.onQueryBlur}
               onKeyUp={this.onKeyUp}
-              onChange={this.onQueryChange} />
+              onKeyDown={this.onKeyDown}
+              onChange={this.onQueryChange}
+              onClick={this.onInputClick}
+              />
             <span className="icon-search" />
             {this.state.query !== this.props.defaultQuery &&
               <div>
@@ -96,11 +430,16 @@ var SearchBar = React.createClass({
             }
           </div>
 
-          {function() {
-            if (this.props.children) {
-              return <div style={dropdownStyle}>{this.props.children}</div>;
-            }
-          }.call(this)}
+          {(this.state.loading || this.state.searchItems.length > 0) &&
+            <div style={dropdownStyle}>
+              <SearchDropdown
+                style={dropdownStyle}
+                items={this.state.searchItems}
+                onClick={this.onAutoComplete}
+                loading={this.state.loading}
+                />
+            </div>
+          }
         </form>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx b/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx
index b357431ad0..3b598f09bf 100644
--- a/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx
@@ -1,59 +1,42 @@
 import React from "react";
+import classNames from "classnames";
+
+import LoadingIndicator from "../../components/loadingIndicator";
+
 var PureRenderMixin = require('react/addons').addons.PureRenderMixin;
 
 var SearchDropdown = React.createClass({
   mixins: [PureRenderMixin],
 
+  defaultProps: {
+    onClick: function () {}
+  },
+
+  onClick(itemValue) {
+    this.props.onClick(itemValue);
+  },
+
   render() {
     return (
       <div className="search-dropdown">
         <ul className="search-helper search-autocomplete-list">
-          <li className="search-autocomplete-item">
-            <span className="icon icon-tag"></span>
-            <h4>Tag - <span className="search-description">key/value pair associated to an event</span></h4>
-            <p className="search-example">browser:"Chrome 34"</p>
-          </li>
-          <li className="search-autocomplete-item">
-            <span className="icon icon-toggle"></span>
-            <h4>Status - <span className="search-description">State of an event</span></h4>
-            <p className="search-example">is:resolved, unresolved, muted</p>
-          </li>
-          <li className="search-autocomplete-item">
-            <span className="icon icon-user"></span>
-            <h4>Assigned - <span className="search-description">team member assigned to an event</span></h4>
-            <p className="search-example">assigned:[me|user@example.com]</p>
-          </li>
-          <li className="search-autocomplete-item">
-            <span className="icon icon-hash">#</span>
-            <h4><span className="search-description">or paste an event id to jump straight to it</span></h4>
-          </li>
-        </ul>
-        <ul className="search-saved-searches search-autocomplete-list hidden">
-          <li className="search-autocomplete-item">
-            <a className="pull-right remove-saved-search">
-              <span className="icon icon-trash"></span>
-            </a>
-            <span className="icon icon-search"></span>
-            <h4>os:"Mac OS X 10.8", browser:"Chrome 31"</h4>
-          </li>
-          <li className="search-autocomplete-item">
-            <a className="pull-right remove-saved-search">
-              <span className="icon icon-trash"></span>
-            </a>
-            <span className="icon icon-search"></span>
-            <h4>status:unresolved, assigned:me</h4>
-          </li>
-          <li className="search-autocomplete-item">
-            <a className="pull-right remove-saved-search">
-              <span className="icon icon-trash"></span>
-            </a>
-            <span className="icon icon-search"></span>
-            <h4>server:"web-1", server:"web-2", server:"web-3"</h4>
-          </li>
+          {this.props.loading
+            ? <li key="loading" className="search-autocomplete-item"><LoadingIndicator mini={true}/></li>
+            : this.props.items.map((item) => {
+              return (
+                <li key={item.value || item.desc} className={classNames("search-autocomplete-item", item.active && 'active')} onClick={this.onClick.bind(this, item.value)}>
+                  <span className={classNames("icon", item.className)}></span>
+                  <h4>{ item.title && item.title + ' - '}<span className="search-description">{item.desc}</span></h4>
+                  {item.example ?
+                    <p className="search-example">{item.example}</p> : ''
+                  }
+                </li>
+              );
+            })}
         </ul>
       </div>
     );
   }
 });
 
-export default SearchDropdown;
+export default SearchDropdown;
\ No newline at end of file
diff --git a/src/sentry/static/sentry/app/views/stream/streamSearchBar.jsx b/src/sentry/static/sentry/app/views/stream/streamSearchBar.jsx
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index d02b4bdcc8..8183360583 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -916,7 +916,7 @@ table.integrations {
       border: 0;
     }
 
-    &:hover, .active {
+    &:hover, &.active {
       background: @bgColor;
       border-color: @trim;
 
diff --git a/tests/js/spec/views/stream.spec.jsx b/tests/js/spec/views/stream.spec.jsx
index 0aaabf208c..54795d0060 100644
--- a/tests/js/spec/views/stream.spec.jsx
+++ b/tests/js/spec/views/stream.spec.jsx
@@ -9,6 +9,7 @@ var LoadingError = require("app/components/loadingError");
 var LoadingIndicator = require("app/components/loadingIndicator");
 var Stream = require("app/views/stream");
 var StreamGroup = require("app/components/stream/group");
+var StreamFilters = require("app/views/stream/filters");
 var stubReactComponents = require("../../helpers/stubReactComponent");
 var stubContext = require("../../helpers/stubContext");
 var stubRouter = require("../../helpers/stubRouter");
@@ -23,7 +24,7 @@ describe("Stream", function() {
     this.sandbox = sinon.sandbox.create();
 
     this.stubbedApiRequest = this.sandbox.stub(Api, "request");
-    stubReactComponents(this.sandbox, [StreamGroup]);
+    stubReactComponents(this.sandbox, [StreamGroup, StreamFilters]);
 
     var ContextStubbedStream = stubContext(Stream, {
       router: stubRouter({
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/stream/searchBar.spec.jsx
index 8912b9b53d..4381864f1b 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/stream/searchBar.spec.jsx
@@ -1,8 +1,11 @@
 var React = require("react/addons");
-
+var api = require("app/api");
 var SearchBar = require("app/views/stream/searchBar");
 var SearchDropdown = require("app/views/stream/searchDropdown");
+
 var stubReactComponents = require("../../../helpers/stubReactComponent");
+var stubRouter = require("../../../helpers/stubRouter");
+var stubContext = require("../../../helpers/stubContext");
 
 var TestUtils = React.addons.TestUtils;
 var findWithClass = TestUtils.findRenderedDOMComponentWithClass;
@@ -11,14 +14,47 @@ describe("SearchBar", function() {
 
   beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
+
+    this.sandbox.stub(api, "request");
+
     stubReactComponents(this.sandbox, [SearchDropdown]);
+    this.ContextStubbedSearchBar = stubContext(SearchBar, {
+      router: stubRouter({
+        getCurrentParams() {
+          return {
+            orgId: "123",
+            projectId: "456"
+          };
+        },
+        getCurrentQuery() {
+          return { limit: 0 };
+        }
+      })
+    });
   });
 
   afterEach(function() {
     this.sandbox.restore();
+
     React.unmountComponentAtNode(document.body);
   });
 
+  describe("getQueryTerms()", function () {
+    it ("should extract query terms from a query string", function () {
+      let searchBar = React.render(<this.ContextStubbedSearchBar/>, document.body).refs.wrapped;
+      let query;
+
+      query = "tagname: ";
+      expect(searchBar.getQueryTerms(query, query.length)).to.eql(["tagname:"]);
+
+      query = "tagname:derp browser:";
+      expect(searchBar.getQueryTerms(query, query.length)).to.eql(["tagname:derp", "browser:"]);
+
+      query = "   browser:\"Chrome 33.0\"    ";
+      expect(searchBar.getQueryTerms(query, query.length)).to.eql(["browser:\"Chrome 33.0\""]);
+    });
+  });
+
   describe("clearSearch()", function() {
 
     it("clears the query", function() {
@@ -26,7 +62,7 @@ describe("SearchBar", function() {
         query: "is:unresolved ruby",
         defaultQuery: "is:unresolved"
       };
-      var wrapper = React.render(<SearchBar {...props} />, document.body);
+      var wrapper = React.render(<this.ContextStubbedSearchBar {...props} />, document.body).refs.wrapped;
 
       wrapper.clearSearch();
 
@@ -39,7 +75,7 @@ describe("SearchBar", function() {
         defaultQuery: "is:unresolved",
         onSearch: this.sandbox.spy()
       };
-      var wrapper = React.render(<SearchBar {...props} />, document.body);
+      var wrapper = React.render(<this.ContextStubbedSearchBar {...props} />, document.body).refs.wrapped;
 
       wrapper.clearSearch();
 
@@ -54,7 +90,7 @@ describe("SearchBar", function() {
   describe("onQueryFocus()", function() {
 
     it("displays the drop down", function() {
-      var wrapper = React.render(<SearchBar />, document.body);
+      var wrapper = React.render(<this.ContextStubbedSearchBar />, document.body).refs.wrapped;
       expect(wrapper.state.dropdownVisible).to.be.false;
 
       wrapper.onQueryFocus();
@@ -67,10 +103,12 @@ describe("SearchBar", function() {
   describe("onQueryBlur()", function() {
 
     it("hides the drop down", function() {
-      var wrapper = React.render(<SearchBar />, document.body);
+      var wrapper = React.render(<this.ContextStubbedSearchBar />, document.body).refs.wrapped;
       wrapper.state.dropdownVisible = true;
 
+      var clock = this.sandbox.useFakeTimers();
       wrapper.onQueryBlur();
+      clock.tick(201); // doesn't close until 200ms
 
       expect(wrapper.state.dropdownVisible).to.be.false;
     });
@@ -80,7 +118,7 @@ describe("SearchBar", function() {
   describe("onKeyUp()", function () {
     describe("escape", function () {
       it("blurs the input", function () {
-        var wrapper = React.render(<SearchBar />, document.body);
+        var wrapper = React.render(<this.ContextStubbedSearchBar />, document.body).refs.wrapped;
         wrapper.state.dropdownVisible = true;
 
         var input = React.findDOMNode(wrapper.refs.searchInput);
@@ -100,7 +138,7 @@ describe("SearchBar", function() {
 
     it("invokes onSearch() when submitting the form", function() {
       var stubbedOnSearch = this.sandbox.spy();
-      var wrapper = React.render(<SearchBar onSearch={stubbedOnSearch} />, document.body);
+      var wrapper = React.render(<this.ContextStubbedSearchBar onSearch={stubbedOnSearch} />, document.body).refs.wrapped;
 
       TestUtils.Simulate.submit(wrapper.refs.searchForm, { preventDefault() {} });
 
@@ -112,7 +150,7 @@ describe("SearchBar", function() {
         query: "is:unresolved",
         onSearch: this.sandbox.spy()
       };
-      var wrapper = React.render(<SearchBar {...props} />, document.body);
+      var wrapper = React.render(<this.ContextStubbedSearchBar {...props} />, document.body).refs.wrapped;
 
       var cancelButton = findWithClass(wrapper, "search-clear-form");
       TestUtils.Simulate.click(cancelButton);
