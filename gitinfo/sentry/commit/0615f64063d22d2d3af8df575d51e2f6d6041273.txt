commit 0615f64063d22d2d3af8df575d51e2f6d6041273
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Wed May 20 09:26:36 2020 +0200

    feat(pii) Add organization level rules in project level (#18877)

diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index b88614789a..39970ba6d6 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -96,6 +96,7 @@ export type OrganizationSummary = {
  * Lightweight in this case means it does not contain `projects` or `teams`
  */
 export type LightWeightOrganization = OrganizationSummary & {
+  relayPiiConfig: string;
   scrubIPAddresses: boolean;
   attachmentsRole: string;
   eventsMemberAdmin: boolean;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRules.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRules.tsx
index acae6aa8e4..70ff654e8c 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRules.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRules.tsx
@@ -7,14 +7,15 @@ import {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';
 import {Client} from 'app/api';
 import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
 import ExternalLink from 'app/components/links/externalLink';
-import SentryTypes from 'app/sentryTypes';
 import Button from 'app/components/button';
+import {Organization, Project} from 'app/types';
 
 import {defaultSuggestions as sourceDefaultSuggestions} from './dataPrivacyRulesForm/dataPrivacyRulesFormSourceSuggestions';
 import DataPrivacyRulesModal from './dataPrivacyRulesModal';
 import DataPrivacyRulesPanelContent from './dataPrivacyRulesContent';
-import {RuleType, MethodType, EventIdStatus} from './dataPrivacyRulesForm/types';
 import DataPrivacyRulesPanelForm from './dataPrivacyRulesForm/dataPrivacyRulesForm';
+import OrganizationRules from './organizationRules';
+import {Rule, RuleType, MethodType, EventIdStatus} from './types';
 
 const ADVANCED_DATASCRUBBING_LINK =
   'https://docs.sentry.io/data-management/advanced-datascrubbing/';
@@ -23,7 +24,6 @@ type DataPrivacyRulesPanelFormProps = React.ComponentProps<
   typeof DataPrivacyRulesPanelForm
 >;
 type ModalProps = React.ComponentProps<typeof DataPrivacyRulesModal>;
-type Rule = NonNullable<ModalProps['rule']>;
 type SourceSuggestions = ModalProps['sourceSuggestions'];
 type Errors = DataPrivacyRulesPanelFormProps['errors'];
 
@@ -42,10 +42,13 @@ type PiiConfigRule = {
 type Applications = {[key: string]: Array<string>};
 
 type Props = {
-  disabled?: boolean;
   endpoint: string;
+  organization: Organization;
+  onSubmitSuccess: (resp: Organization | Project) => void;
+  projectId?: Project['id'];
   relayPiiConfig?: string;
   additionalContext?: React.ReactNode;
+  disabled?: boolean;
 };
 
 type State = {
@@ -54,15 +57,12 @@ type State = {
   relayPiiConfig?: string;
   sourceSuggestions: SourceSuggestions;
   eventId: ModalProps['eventId'];
+  orgRules: Array<Rule>;
   showAddRuleModal?: boolean;
+  isProjectLevel?: boolean;
 };
 
 class DataPrivacyRules extends React.Component<Props, State> {
-  static contextTypes = {
-    organization: SentryTypes.Organization,
-    project: SentryTypes.Project,
-  };
-
   state: State = {
     rules: [],
     savedRules: [],
@@ -71,11 +71,14 @@ class DataPrivacyRules extends React.Component<Props, State> {
     eventId: {
       value: '',
     },
+    orgRules: [],
+    isProjectLevel: this.props.endpoint.includes('projects'),
   };
 
   componentDidMount() {
     this.loadRules();
     this.loadSourceSuggestions();
+    this.loadOrganizationRules();
   }
 
   componentDidUpdate(_prevProps: Props, prevState: State) {
@@ -90,55 +93,85 @@ class DataPrivacyRules extends React.Component<Props, State> {
 
   api = new Client();
 
+  loadOrganizationRules = () => {
+    const {isProjectLevel} = this.state;
+    const {organization} = this.props;
+
+    if (isProjectLevel) {
+      try {
+        const convertedRules = this.convertRelayPiiConfig(organization.relayPiiConfig);
+        this.setState({
+          orgRules: convertedRules,
+        });
+      } catch {
+        addErrorMessage(t('Unable to load organization rules'));
+      }
+    }
+  };
+
   loadRules() {
     try {
-      const relayPiiConfig = this.state.relayPiiConfig;
-      const piiConfig = relayPiiConfig ? JSON.parse(relayPiiConfig) : {};
-      const rules: PiiConfigRule = piiConfig.rules || {};
-      const applications: Applications = piiConfig.applications || {};
-      const convertedRules: Array<Rule> = [];
-
-      for (const application in applications) {
-        for (const rule of applications[application]) {
-          if (!rules[rule]) {
-            if (rule[0] === '@') {
-              const [type, method] = rule.slice(1).split(':');
-              convertedRules.push({
-                id: convertedRules.length,
-                type: type as RuleType,
-                method: method as MethodType,
-                source: application,
-              });
-            }
-            continue;
-          }
-
-          const resolvedRule = rules[rule];
-          if (resolvedRule.type === RuleType.PATTERN && resolvedRule.pattern) {
-            const method = resolvedRule?.redaction?.method;
+      const convertedRules = this.convertRelayPiiConfig(this.state.relayPiiConfig);
+      this.setState({
+        rules: convertedRules,
+        savedRules: convertedRules,
+      });
+    } catch {
+      addErrorMessage(t('Unable to load project rules'));
+    }
+  }
 
+  // Remap PII config format to something that is more usable in React. Ideally
+  // we would stop doing this at some point and make some updates to how we
+  // store this configuration on the server.
+  //
+  // For the time being the PII config format is documented at
+  // https://getsentry.github.io/relay/pii-config/
+  convertRelayPiiConfig = (relayPiiConfig?: string) => {
+    const piiConfig = relayPiiConfig ? JSON.parse(relayPiiConfig) : {};
+    const rules: PiiConfigRule = piiConfig.rules || {};
+    const applications: Applications = piiConfig.applications || {};
+    const convertedRules: Array<Rule> = [];
+
+    for (const application in applications) {
+      for (const rule of applications[application]) {
+        if (!rules[rule]) {
+          // Convert a "built-in" rule like "@anything:remove" to an object {
+          //   type: "anything",
+          //   method: "remove"
+          // }
+          if (rule[0] === '@') {
+            const [type, method] = rule.slice(1).split(':');
             convertedRules.push({
               id: convertedRules.length,
-              type: RuleType.PATTERN,
+              type: type as RuleType,
               method: method as MethodType,
               source: application,
-              customRegularExpression: resolvedRule.pattern,
             });
           }
+          continue;
         }
-      }
 
-      this.setState({
-        rules: convertedRules,
-        savedRules: convertedRules,
-      });
-    } catch {
-      addErrorMessage(t('Unable to load the rules'));
+        const resolvedRule = rules[rule];
+        if (resolvedRule.type === RuleType.PATTERN && resolvedRule.pattern) {
+          const method = resolvedRule?.redaction?.method;
+
+          convertedRules.push({
+            id: convertedRules.length,
+            type: RuleType.PATTERN,
+            method: method as MethodType,
+            source: application,
+            customRegularExpression: resolvedRule.pattern,
+          });
+        }
+      }
     }
-  }
+
+    return convertedRules;
+  };
 
   loadSourceSuggestions = async () => {
-    const {organization, project} = this.context;
+    const {organization, projectId} = this.props;
     const {eventId} = this.state;
 
     if (!eventId.value) {
@@ -162,12 +195,12 @@ class DataPrivacyRules extends React.Component<Props, State> {
 
     try {
       const query: {projectId?: string; eventId: string} = {eventId: eventId.value};
-      if (project?.id) {
-        query.projectId = project.id;
+      if (projectId) {
+        query.projectId = projectId;
       }
       const rawSuggestions = await this.api.requestPromise(
         `/organizations/${organization.slug}/data-scrubbing-selector-suggestions/`,
-        {method: 'GET', query}
+        {query}
       );
       const sourceSuggestions: SourceSuggestions = rawSuggestions.suggestions;
 
@@ -200,7 +233,7 @@ class DataPrivacyRules extends React.Component<Props, State> {
   };
 
   handleSubmit = async (rules: Array<Rule>) => {
-    const {endpoint} = this.props;
+    const {endpoint, onSubmitSuccess} = this.props;
 
     const errors: Errors = {};
 
@@ -245,7 +278,8 @@ class DataPrivacyRules extends React.Component<Props, State> {
         method: 'PUT',
         data: {relayPiiConfig},
       })
-      .then(() => {
+      .then(result => {
+        onSubmitSuccess(result);
         this.setState({
           relayPiiConfig,
         });
@@ -361,7 +395,14 @@ class DataPrivacyRules extends React.Component<Props, State> {
 
   render() {
     const {additionalContext, disabled} = this.props;
-    const {rules, sourceSuggestions, showAddRuleModal, eventId} = this.state;
+    const {
+      rules,
+      sourceSuggestions,
+      showAddRuleModal,
+      eventId,
+      orgRules,
+      isProjectLevel,
+    } = this.state;
 
     return (
       <React.Fragment>
@@ -381,9 +422,9 @@ class DataPrivacyRules extends React.Component<Props, State> {
             })}
           </PanelAlert>
           <PanelBody>
+            {isProjectLevel && <OrganizationRules rules={orgRules} />}
             <DataPrivacyRulesPanelContent
               rules={rules}
-              disabled={disabled}
               onDeleteRule={this.handleDeleteRule}
               onUpdateRule={this.handleUpdateRule}
               onUpdateEventId={this.handleUpdateEventId}
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesContent.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesContent.tsx
index ad685d6130..abfddd38fd 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesContent.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesContent.tsx
@@ -1,16 +1,12 @@
 import React from 'react';
-import styled from '@emotion/styled';
 
 import {t} from 'app/locale';
-import space from 'app/styles/space';
 import {defined} from 'app/utils';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
-import {IconDelete, IconWarning, IconEdit} from 'app/icons';
-import TextOverflow from 'app/components/textOverflow';
-import Button from 'app/components/button';
+import {IconWarning} from 'app/icons';
 
+import RulesList from './rulesList';
 import DataPrivacyRulesModal from './dataPrivacyRulesModal';
-import {getRuleTypeLabel, getMethodTypeLabel} from './dataPrivacyRulesForm/utils';
 
 type ModalProps = React.ComponentProps<typeof DataPrivacyRulesModal>;
 type Rule = NonNullable<ModalProps['rule']>;
@@ -19,7 +15,7 @@ type Props = {
   rules: Array<Rule>;
   onUpdateRule: ModalProps['onSaveRule'];
   onDeleteRule: (rulesToBeDeleted: Array<Rule['id']>) => void;
-} & Pick<ModalProps, 'disabled' | 'eventId' | 'onUpdateEventId' | 'sourceSuggestions'>;
+} & Pick<ModalProps, 'eventId' | 'onUpdateEventId' | 'sourceSuggestions'>;
 
 type State = {
   editRule?: Rule['id'];
@@ -76,29 +72,11 @@ class DataPrivacyRulesContent extends React.Component<Props, State> {
 
     return (
       <React.Fragment>
-        <List>
-          {rules.map(({id, method, type, source}) => {
-            const methodLabel = getMethodTypeLabel(method);
-            const typelabel = getRuleTypeLabel(type);
-            return (
-              <ListItem key={id}>
-                <TextOverflow>
-                  {`[${methodLabel.label}] [${typelabel}] ${t('from')} [${source}]`}
-                </TextOverflow>
-                <Button
-                  size="small"
-                  onClick={this.handleShowEditRuleModal(id)}
-                  icon={<IconEdit />}
-                />
-                <Button
-                  size="small"
-                  onClick={this.handleDeleteRule(id)}
-                  icon={<IconDelete />}
-                />
-              </ListItem>
-            );
-          })}
-        </List>
+        <RulesList
+          rules={rules}
+          onDeleteRule={this.handleDeleteRule}
+          onShowEditRuleModal={this.handleShowEditRuleModal}
+        />
         {defined(editRule) && (
           <DataPrivacyRulesModal
             rule={rules[editRule]}
@@ -115,25 +93,3 @@ class DataPrivacyRulesContent extends React.Component<Props, State> {
 }
 
 export default DataPrivacyRulesContent;
-
-const List = styled('ul')`
-  list-style: none;
-  margin: 0;
-  padding: 0;
-  margin-bottom: 0 !important;
-`;
-
-const ListItem = styled('li')`
-  display: grid;
-  grid-template-columns: auto max-content max-content;
-  grid-column-gap: ${space(1)};
-  align-items: center;
-  padding: ${space(1)} ${space(2)};
-  border-bottom: 1px solid ${p => p.theme.borderDark};
-  &:hover {
-    background-color: ${p => p.theme.offWhite};
-  }
-  &:last-child {
-    border-bottom: 0;
-  }
-`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesForm.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesForm.tsx
index 186b1ba285..21bf3a92bd 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesForm.tsx
@@ -6,20 +6,12 @@ import space from 'app/styles/space';
 import {t} from 'app/locale';
 import TextField from 'app/components/forms/textField';
 
-import {RuleType, MethodType} from './types';
+import {Rule, RuleType, MethodType} from '../types';
+import {getMethodTypeLabel, getRuleTypeLabel} from './utils';
 import Source from './source';
 import DataPrivacyRulesFormField from './dataPrivacyRulesFormField';
 import DataPrivacyRulesFormSelectControl from './dataPrivacyRulesFormSelectControl';
 import DataPrivacyRulesFormEventId from './dataPrivacyRulesFormEventId';
-import {getMethodTypeLabel, getRuleTypeLabel} from './utils';
-
-type Rule = {
-  id: number;
-  type: RuleType;
-  method: MethodType;
-  source: string;
-  customRegularExpression?: string;
-};
 
 type EventIdProps = React.ComponentProps<typeof DataPrivacyRulesFormEventId>;
 type SourceProps = React.ComponentProps<typeof Source>;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventId.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventId.tsx
index cd8ab1aead..24fda0768b 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventId.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventId.tsx
@@ -8,7 +8,7 @@ import space from 'app/styles/space';
 
 import DataPrivacyRulesPanelFormField from './dataPrivacyRulesFormField';
 import DataPrivacyRulesFormEventIdStatusIcon from './dataPrivacyRulesFormEventIdStatusIcon';
-import {EventIdStatus} from './types';
+import {EventIdStatus} from '../types';
 
 type EventId = {
   value: string;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventIdStatusIcon.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventIdStatusIcon.tsx
index 90a040720d..9840c95e4d 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventIdStatusIcon.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventIdStatusIcon.tsx
@@ -6,7 +6,7 @@ import {t} from 'app/locale';
 import Tooltip from 'app/components/tooltip';
 import {IconClose, IconCheckmark} from 'app/icons';
 
-import {EventIdStatus} from './types';
+import {EventIdStatus} from '../types';
 
 type Props = {
   onClickIconClose: () => void;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSourceSuggestions.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSourceSuggestions.tsx
index ae8b403b74..4cccda01fa 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSourceSuggestions.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSourceSuggestions.tsx
@@ -1,6 +1,6 @@
 import {t} from 'app/locale';
 
-import {SourceSuggestion, SourceSuggestionType} from './types';
+import {SourceSuggestion, SourceSuggestionType} from '../types';
 
 const binaryOperatorSuggestions: Array<SourceSuggestion> = [
   {
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/source.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/source.tsx
index f9176ce08b..acca83d2c8 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/source.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/source.tsx
@@ -12,7 +12,7 @@ import {
   binaryOperatorSuggestions,
 } from './dataPrivacyRulesFormSourceSuggestions';
 import SourceSuggestionExamples from './sourceSuggestionExamples';
-import {SourceSuggestion, SourceSuggestionType} from './types';
+import {SourceSuggestion, SourceSuggestionType} from '../types';
 
 type Props = {
   value: string;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/utils.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/utils.tsx
index 1dcfee04a3..73ddfccfcb 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/utils.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/utils.tsx
@@ -1,6 +1,6 @@
 import {t} from 'app/locale';
 
-import {RuleType, MethodType} from './types';
+import {RuleType, MethodType} from '../types';
 
 function getRuleTypeLabel(type: RuleType) {
   switch (type) {
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesModal.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesModal.tsx
index 1bcdca478f..20a736c1b9 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesModal.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesModal.tsx
@@ -9,7 +9,7 @@ import {t} from 'app/locale';
 import {defined} from 'app/utils';
 
 import DataPrivacyRulesPanelForm from './dataPrivacyRulesForm/dataPrivacyRulesForm';
-import {RuleType, MethodType} from './dataPrivacyRulesForm/types';
+import {RuleType, MethodType} from './types';
 
 const DEFAULT_RULE_SOURCE_VALUE = '';
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/organizationRules.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/organizationRules.tsx
new file mode 100644
index 0000000000..5b86872044
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/organizationRules.tsx
@@ -0,0 +1,112 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import space from 'app/styles/space';
+import {t} from 'app/locale';
+import Button from 'app/components/button';
+import {IconChevron} from 'app/icons';
+
+import RulesList from './rulesList';
+import {Rule} from './types';
+
+type Props = {
+  rules: Array<Rule>;
+};
+
+type State = {
+  isCollapsed: boolean;
+  contentHeight?: string;
+};
+
+class OrganizationRules extends React.Component<Props, State> {
+  state: State = {
+    isCollapsed: true,
+  };
+
+  componentDidUpdate() {
+    this.loadContentHeight();
+  }
+
+  rulesListRef = React.createRef<HTMLUListElement>();
+
+  loadContentHeight = () => {
+    if (!this.state.contentHeight) {
+      const contentHeight = this.rulesListRef.current?.offsetHeight;
+      if (contentHeight) {
+        this.setState({
+          contentHeight: `${contentHeight}px`,
+        });
+      }
+    }
+  };
+
+  handleToggleCollapsed = () => {
+    this.setState(prevState => ({
+      isCollapsed: !prevState.isCollapsed,
+    }));
+  };
+
+  render() {
+    const {rules} = this.props;
+    const {isCollapsed, contentHeight} = this.state;
+
+    if (rules.length === 0) {
+      return (
+        <Wrapper>
+          {t('There are no data privacy rules at the organization level')}
+        </Wrapper>
+      );
+    }
+    return (
+      <Wrapper isCollapsed={isCollapsed} contentHeight={contentHeight}>
+        <Header onClick={this.handleToggleCollapsed}>
+          <div>{t('Organization Rules')}</div>
+          <Button
+            label={
+              isCollapsed
+                ? t('Expand Organization Rules')
+                : t('Collapse Organization Rules')
+            }
+            icon={<IconChevron size="xs" direction={isCollapsed ? 'down' : 'up'} />}
+            size="xsmall"
+          />
+        </Header>
+        <Content>
+          <RulesList rules={rules} ref={this.rulesListRef} />
+        </Content>
+      </Wrapper>
+    );
+  }
+}
+
+export default OrganizationRules;
+
+const Content = styled('div')`
+  transition: height 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
+  height: 0;
+  overflow: hidden;
+`;
+
+const Header = styled('div')`
+  cursor: pointer;
+  display: grid;
+  grid-template-columns: 1fr auto;
+  align-items: center;
+  border-bottom: 1px solid ${p => p.theme.borderDark};
+  padding: ${space(1)} ${space(2)};
+`;
+
+const Wrapper = styled('div')<{isCollapsed?: boolean; contentHeight?: string}>`
+  color: ${p => p.theme.gray1};
+  background: ${p => p.theme.offWhite};
+  ${p => !p.contentHeight && `padding: ${space(1)} ${space(2)}`};
+  ${p => !p.isCollapsed && ` border-bottom: 1px solid ${p.theme.borderDark}`};
+  ${p =>
+    !p.isCollapsed &&
+    p.contentHeight &&
+    `
+      ${Content} {
+        height: ${p.contentHeight};
+      }
+    `}
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/rulesList.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/rulesList.tsx
new file mode 100644
index 0000000000..ac1c9b1328
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/rulesList.tsx
@@ -0,0 +1,86 @@
+import React from 'react';
+import styled from '@emotion/styled';
+import PropTypes from 'prop-types';
+
+import {t} from 'app/locale';
+import space from 'app/styles/space';
+import TextOverflow from 'app/components/textOverflow';
+import {IconDelete, IconEdit} from 'app/icons';
+import Button from 'app/components/button';
+
+import DataPrivacyRulesForm from './dataPrivacyRulesForm/dataPrivacyRulesForm';
+import {getRuleTypeLabel, getMethodTypeLabel} from './dataPrivacyRulesForm/utils';
+
+type Rule = React.ComponentProps<typeof DataPrivacyRulesForm>['rule'];
+type Props = {
+  rules: Array<Rule>;
+  onShowEditRuleModal?: (id: Rule['id']) => () => void;
+  onDeleteRule?: (id: Rule['id']) => () => void;
+};
+
+const RulesList = React.forwardRef<HTMLUListElement, Props>(function RulesList(
+  {rules, onShowEditRuleModal, onDeleteRule},
+  ref
+) {
+  return (
+    <List ref={ref}>
+      {rules.map(({id, method, type, source}) => {
+        const methodLabel = getMethodTypeLabel(method);
+        const typelabel = getRuleTypeLabel(type);
+        return (
+          <ListItem key={id}>
+            <TextOverflow>
+              {`[${methodLabel.label}] [${typelabel}] ${t('from')} [${source}]`}
+            </TextOverflow>
+            {onShowEditRuleModal && (
+              <Button
+                label={t('Edit Rule')}
+                size="small"
+                onClick={onShowEditRuleModal(id)}
+                icon={<IconEdit />}
+              />
+            )}
+            {onDeleteRule && (
+              <Button
+                label={t('Delete Rule')}
+                size="small"
+                onClick={onDeleteRule(id)}
+                icon={<IconDelete />}
+              />
+            )}
+          </ListItem>
+        );
+      })}
+    </List>
+  );
+});
+
+RulesList.propTypes = {
+  rules: PropTypes.array.isRequired,
+  onShowEditRuleModal: PropTypes.func,
+  onDeleteRule: PropTypes.func,
+};
+
+export default RulesList;
+
+const List = styled('ul')`
+  list-style: none;
+  margin: 0;
+  padding: 0;
+  margin-bottom: 0 !important;
+`;
+
+const ListItem = styled('li')`
+  display: grid;
+  grid-template-columns: auto max-content max-content;
+  grid-column-gap: ${space(1)};
+  align-items: center;
+  padding: ${space(1)} ${space(2)};
+  border-bottom: 1px solid ${p => p.theme.borderDark};
+  &:hover {
+    background-color: ${p => p.theme.offWhite};
+  }
+  &:last-child {
+    border-bottom: 0;
+  }
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/types.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/types.tsx
similarity index 85%
rename from src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/types.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/types.tsx
index d63dd611fb..abe9bca5c2 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/types.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/types.tsx
@@ -42,3 +42,11 @@ export type SourceSuggestion = {
   description?: string;
   examples?: Array<string>;
 };
+
+export type Rule = {
+  id: number;
+  type: RuleType;
+  method: MethodType;
+  source: string;
+  customRegularExpression?: string;
+};
diff --git a/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx b/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx
index a9af8714d6..99bc6f3e80 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx
@@ -26,7 +26,7 @@ class OrganizationSecurityAndPrivacyContent extends AsyncView<Props> {
     ];
   }
 
-  handleSave = (data: Organization) => {
+  handleUpdateOrganization = (data: Organization) => {
     // This will update OrganizationStore (as well as OrganizationsStore
     // which is slightly incorrect because it has summaries vs a detailed org)
     updateOrganization(data);
@@ -52,7 +52,7 @@ class OrganizationSecurityAndPrivacyContent extends AsyncView<Props> {
           initialData={initialData}
           additionalFieldProps={{hasSsoEnabled: !!authProvider}}
           onSubmitSuccess={(_resp, model) => {
-            this.handleSave(model.initialData as Organization);
+            this.handleUpdateOrganization(model.initialData as Organization);
           }}
           onSubmitError={() => addErrorMessage('Unable to save change')}
           saveOnBlur
@@ -69,6 +69,10 @@ class OrganizationSecurityAndPrivacyContent extends AsyncView<Props> {
           endpoint={endpoint}
           relayPiiConfig={relayPiiConfig}
           disabled={!access.has('org:write')}
+          organization={organization}
+          onSubmitSuccess={resp => {
+            this.handleUpdateOrganization(resp as Organization);
+          }}
         />
       </React.Fragment>
     );
diff --git a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
index ec51b3d288..7acbc80161 100644
--- a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
@@ -24,6 +24,11 @@ class ProjectDataPrivacyContent extends AsyncView<Props> {
     return [['data', `/projects/${organization.slug}/${project.slug}/`]];
   }
 
+  handleUpdateProject = (data: Project) => {
+    // This will update our project global state
+    ProjectActions.updateSuccess(data);
+  };
+
   renderBody() {
     const {organization, project} = this.props;
     const initialData = this.state.data;
@@ -42,10 +47,7 @@ class ProjectDataPrivacyContent extends AsyncView<Props> {
           initialData={initialData}
           apiMethod={apiMethod}
           apiEndpoint={endpoint}
-          onSubmitSuccess={resp => {
-            // This will update our project context
-            ProjectActions.updateSuccess(resp);
-          }}
+          onSubmitSuccess={this.handleUpdateProject}
         >
           <JsonForm
             title={t('Data Privacy')}
@@ -82,6 +84,11 @@ class ProjectDataPrivacyContent extends AsyncView<Props> {
           endpoint={endpoint}
           relayPiiConfig={relayPiiConfig}
           disabled={!access.has('project:write')}
+          organization={organization}
+          projectId={project.id}
+          onSubmitSuccess={resp => {
+            this.handleUpdateProject(resp as Project);
+          }}
         />
       </React.Fragment>
     );
