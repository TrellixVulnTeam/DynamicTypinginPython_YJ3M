commit 7fdea2aaf962533b8a3a3a8de307aac37810348c
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Apr 4 17:44:29 2016 -0700

    Expand CSP and User Reports
    
    - Add CSP reports to settings
    - Rename User Reports to User Feedback
    - Remove protocol from CSP reports
    - Remove various auth capabilities from CSP reports

diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index af2a99441e..3a679c6a27 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -42,7 +42,7 @@ class ProjectSerializer(Serializer):
         from sentry import features
 
         feature_list = []
-        for feature in ('event-types', 'global-events', 'user-reports', 'dsym'):
+        for feature in ('csp', 'event-types', 'global-events', 'user-reports', 'dsym'):
             if features.has('projects:' + feature, obj, actor=user):
                 feature_list.append(feature)
 
diff --git a/src/sentry/api/serializers/models/project_key.py b/src/sentry/api/serializers/models/project_key.py
index 63080dc2c9..d461886e58 100644
--- a/src/sentry/api/serializers/models/project_key.py
+++ b/src/sentry/api/serializers/models/project_key.py
@@ -1,7 +1,10 @@
 from __future__ import absolute_import
 
+from django.core.urlresolvers import reverse
+
 from sentry.api.serializers import Serializer, register
 from sentry.models import ProjectKey
+from sentry.utils.http import absolute_uri
 
 
 @register(ProjectKey)
@@ -15,6 +18,12 @@ class ProjectKeySerializer(Serializer):
             'dsn': {
                 'secret': obj.dsn_private,
                 'public': obj.dsn_public,
+                'csp': '{}?sentry_key={}'.format(
+                    absolute_uri(reverse('sentry-api-csp-report', args=[
+                        obj.project_id,
+                    ])),
+                    obj.public_key,
+                ),
             },
             'dateCreated': obj.date_added,
         }
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index b3efd0ee5a..2521ab0240 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -606,6 +606,17 @@ class CspApiHelper(ClientApiHelper):
         # We don't use an origin here
         return None
 
+    def auth_from_request(self, request):
+        key = request.GET.get('sentry_key')
+        if not key:
+            raise APIUnauthorized('Unable to find authentication information')
+
+        auth = Auth({
+            'sentry_key': key,
+        }, is_public=True)
+        auth.client = request.META.get('HTTP_USER_AGENT')
+        return auth
+
     def validate_data(self, project, data):
         # All keys are sent with hyphens, so we want to conver to underscores
         report = dict(map(lambda v: (v[0].replace('-', '_'), v[1]), data.iteritems()))
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 44525f070f..d11774d953 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -16,6 +16,7 @@ default_manager.add('projects:global-events', ProjectFeature)
 default_manager.add('projects:quotas', ProjectFeature)
 default_manager.add('projects:user-reports', ProjectFeature)
 default_manager.add('projects:plugins', ProjectPluginFeature)
+default_manager.add('projects:csp', ProjectFeature)
 default_manager.add('projects:dsym', ProjectFeature)
 
 
diff --git a/src/sentry/static/sentry/app/components/projectHeader/index.jsx b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
index cb99a30485..fc11a43358 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/index.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
@@ -44,9 +44,9 @@ const ProjectHeader = React.createClass({
                   </li>
                 }
                 {features.has('user-reports') &&
-                  <li className={navSection == 'user-reports' ? 'active' : ''}>
-                    <Link to={`/${org.slug}/${project.slug}/user-reports/`}>
-                      {t('User Reports')}
+                  <li className={navSection == 'user-feedback' ? 'active' : ''}>
+                    <Link to={`/${org.slug}/${project.slug}/user-feedback/`}>
+                      {t('User Feedback')}
                     </Link>
                   </li>
                 }
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index e329fe2796..adc9f56282 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -25,6 +25,7 @@ import OrganizationStats from './views/organizationStats';
 import OrganizationTeams from './views/organizationTeams';
 import AllTeamsList from './views/organizationTeams/allTeamsList';
 import ProjectChooser from './views/projectChooser';
+import ProjectCspSettings from './views/projectCspSettings';
 import ProjectDashboard from './views/projectDashboard';
 import ProjectDetails from './views/projectDetails';
 import ProjectEvents from './views/projectEvents';
@@ -101,7 +102,7 @@ let routes = (
           <Route path="all-events/" component={errorHandler(ReleaseAllEvents)} />
           <Route path="artifacts/" component={errorHandler(ReleaseArtifacts)} />
         </Route>
-        <Route path="user-reports/" component={errorHandler(ProjectUserReports)} />
+        <Route path="user-feedback/" component={errorHandler(ProjectUserReports)} />
         <Route path="settings/" component={errorHandler(ProjectSettings)}>
           <Route path="install/" component={errorHandler(ProjectInstall)}>
             <IndexRoute component={errorHandler(ProjectInstallOverview)}/>
@@ -109,7 +110,8 @@ let routes = (
           </Route>
           <Route path="saved-searches/" component={errorHandler(ProjectSavedSearches)} />
           <Route path="debug-symbols/" component={errorHandler(ProjectDebugSymbols)} />
-          <Route path="user-reports/" component={errorHandler(ProjectUserReportSettings)} />
+          <Route path="user-feedback/" component={errorHandler(ProjectUserReportSettings)} />
+          <Route path="csp/" component={errorHandler(ProjectCspSettings)} />
         </Route>
         <Redirect from="group/:groupId/" to="issues/:groupId/" />
         <Route path="issues/:groupId/" component={errorHandler(GroupDetails)}
@@ -122,7 +124,7 @@ let routes = (
           <Route path="hashes/" component={errorHandler(GroupHashes)} />
           <Route path="tags/" component={errorHandler(GroupTags)} />
           <Route path="tags/:tagKey/" component={errorHandler(GroupTagValues)} />
-          <Route path="reports/" component={errorHandler(GroupUserReports)} />
+          <Route path="feedback/" component={errorHandler(GroupUserReports)} />
         </Route>
       </Route>
     </Route>
diff --git a/src/sentry/static/sentry/app/views/groupDetails/header.jsx b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
index 4eb43d64b7..e1cff5c9e3 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/header.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
@@ -223,8 +223,8 @@ const GroupHeader = React.createClass({
             {t('Comments')} <span className="badge animated">{group.numComments}</span>
           </ListLink>
           {features.has('user-reports') &&
-            <ListLink to={`/${orgId}/${projectId}/issues/${groupId}/reports/`}>
-              {t('User Reports')} <span className="badge animated">{group.userReportCount}</span>
+            <ListLink to={`/${orgId}/${projectId}/issues/${groupId}/feedback/`}>
+              {t('User Feedback')} <span className="badge animated">{group.userReportCount}</span>
             </ListLink>
           }
           <ListLink to={`/${orgId}/${projectId}/issues/${groupId}/tags/`}>
diff --git a/src/sentry/static/sentry/app/views/groupUserReports.jsx b/src/sentry/static/sentry/app/views/groupUserReports.jsx
index 0db2dacb9d..f5266eee6d 100644
--- a/src/sentry/static/sentry/app/views/groupUserReports.jsx
+++ b/src/sentry/static/sentry/app/views/groupUserReports.jsx
@@ -66,7 +66,7 @@ const GroupUserReports = React.createClass({
   getUserReportsUrl() {
     let params = this.props.params;
 
-    return `/${params.orgId}/${params.projectId}/settings/user-reports/`;
+    return `/${params.orgId}/${params.projectId}/settings/user-feedback/`;
   },
 
   render() {
@@ -108,7 +108,7 @@ const GroupUserReports = React.createClass({
       <div className="box empty-stream">
         <span className="icon icon-exclamation" />
         <p>{t('No user reports have been collected for this event.')}</p>
-        <p><Link to={this.getUserReportsUrl()}>{t('Learn how to integrate User Crash Reports')}</Link></p>
+        <p><Link to={this.getUserReportsUrl()}>{t('Learn how to integrate User Feedback')}</Link></p>
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/projectCspSettings.jsx b/src/sentry/static/sentry/app/views/projectCspSettings.jsx
new file mode 100644
index 0000000000..509469dce6
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectCspSettings.jsx
@@ -0,0 +1,127 @@
+import React from 'react';
+
+import ApiMixin from '../mixins/apiMixin';
+import LoadingIndicator from '../components/loadingIndicator';
+import {t} from '../locale';
+
+const ProjectCspSettings = React.createClass({
+  propTypes: {
+    setProjectNavSection: React.PropTypes.func
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      keyList: [],
+    };
+  },
+
+  componentWillMount() {
+    this.props.setProjectNavSection('settings');
+    this.fetchData();
+  },
+
+  // TODO(dcramer): abstract this into a shared helper as its common for route handlers
+  componentWillReceiveProps(nextProps) {
+    let location = this.props.location;
+    let nextLocation = nextProps.location;
+    if (location.pathname != nextLocation.pathname || location.search != nextLocation.search) {
+      this.remountComponent();
+    }
+  },
+
+  remountComponent() {
+    this.setState(this.getInitialState(), this.fetchData);
+  },
+
+  fetchData() {
+    let {orgId, projectId} = this.props.params;
+    this.api.request(`/projects/${orgId}/${projectId}/keys/`, {
+      success: (data, _, jqXHR) => {
+        this.setState({
+          error: false,
+          loading: false,
+          keyList: data,
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      }
+    });
+  },
+
+  getInstructions() {
+    let endpoint = (this.state.keyList.length ?
+      this.state.keyList[0].dsn.csp :
+      'https://sentry.example.com/api/csp-report/');
+
+    return (
+      'def middleware(request, response):\n' +
+      '    response[\'Content-Security-Policy\'] = \\\n' +
+      '        \"default-src *; \" \\\n' +
+      '        \"script-src \'self\' \'unsafe-eval\' \'unsafe-inline\' cdn.example.com cdn.ravenjs.com; \" \\\n' +
+      '        \"style-src \'self\' \'unsafe-inline\' cdn.example.com; \" \\\n' +
+      '        \"img-src * data:; \" \\\n' +
+      '        \"report-uri ' + endpoint + '\"\n' +
+      '    return response\n'
+    );
+  },
+
+  getReportOnlyInstructions() {
+    let endpoint = (this.state.keyList.length ?
+      this.state.keyList[0].dsn.csp :
+      'https://sentry.example.com/api/csp-report/');
+
+    return (
+      'def middleware(request, response):\n' +
+      '    response[\'Content-Security-Policy-Report-Only\'] = \\\n' +
+      '        \"default-src \'self\'; \" \\\n' +
+      '        \"report-uri ' + endpoint + '\"\n' +
+      '    return response\n'
+    );
+  },
+
+  renderLoading() {
+    return (
+      <div className="box">
+        <LoadingIndicator />
+      </div>
+    );
+  },
+
+  render() {
+    if (this.state.loading)
+      return this.renderLoading();
+
+    // TODO(dcramer): localize when language is final
+    return (
+      <div>
+        <h1>{t('CSP Reports')}</h1>
+
+        <div className="alert alert-block alert-info">Psst! This feature is still a work-in-progress. Thanks for being an early adopter!</div>
+
+        <p><a href="https://en.wikipedia.org/wiki/Content_Security_Policy">Content Security Policy</a> (CSP) is a security standard which helps prevent cross-site scripting (XSS), clickjacking and other code injection attacks resulting from execution of malicious content in the trusted web page context. It's enforced by browser vendors, and Sentry supports capturing CSP violations using the standard reporting hooks.</p>
+
+        <p>To configure <acronym title="Content Security Policy">CSP</acronym> reports in Sentry, you'll need to send a header from your server describing your policy, as well specifying the authenticated Sentry endpoint.</p>
+
+        <p>For example, in Python you might achieve this via a simple web middleware:</p>
+
+        <pre>{this.getInstructions()}</pre>
+
+        <p>Additionally you can setup CSP reports to simply send reports rather than actually enforcing the policy:</p>
+
+        <pre>{this.getReportOnlyInstructions()}</pre>
+
+        <p>We recommend setting this up to only run on a percentage of requests, as otherwise you may find that you've quickly exhausted your quota. For more information, take a look at <a href="http://www.html5rocks.com/en/tutorials/security/content-security-policy/">the article on html5rocks.com</a>.</p>
+      </div>
+    );
+  }
+});
+
+export default ProjectCspSettings;
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index d5acad7710..1758032a5d 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -83,7 +83,7 @@ const ProjectSettings = React.createClass({
         <div className="col-md-2">
           <h6 className="nav-header">{t('Configuration')}</h6>
           <ul className="nav nav-stacked">
-            <li><a href={`${settingsUrlRoot}/`}>{t('Project Settings')}</a></li>
+            <li><a href={`${settingsUrlRoot}/`}>{t('General')}</a></li>
             <li><a href={`${settingsUrlRoot}/notifications/`}>{t('Notifications')}</a></li>
             {features.has('quotas') &&
               <li><a href={`${settingsUrlRoot}/quotas/`}>{t('Rate Limits')}</a></li>
@@ -93,21 +93,25 @@ const ProjectSettings = React.createClass({
             <li><a href={`${settingsUrlRoot}/issue-tracking/`}>{t('Issue Tracking')}</a></li>
             <li><a href={`${settingsUrlRoot}/release-tracking/`}>{t('Release Tracking')}</a></li>
             <ListLink to={`/${orgId}/${projectId}/settings/saved-searches/`}>{t('Saved Searches')}</ListLink>
-            {features.has('user-reports') &&
-              <ListLink to={`/${orgId}/${projectId}/settings/user-reports/`}>{t('User Reports')}</ListLink>
-            }
+
             {features.has('dsym') &&
               <ListLink to={`/${orgId}/${projectId}/settings/debug-symbols/`}>{t('Debug Symbols')}</ListLink>
             }
           </ul>
-          <h6 className="nav-header">{t('Setup')}</h6>
+          <h6 className="nav-header">{t('Data')}</h6>
           <ul className="nav nav-stacked">
             <ListLink to={rootInstallPath} isActive={function (to) {
               let pathname = this.context.location.pathname;
 
               // Because react-router 1.0 removes router.isActive(route)
               return pathname === rootInstallPath || /install\/[\w\-]+\/$/.test(pathname);
-            }.bind(this)}>{t('Instructions')}</ListLink>
+            }.bind(this)}>{t('Error Tracking')}</ListLink>
+            {features.has('csp') &&
+              <ListLink to={`/${orgId}/${projectId}/settings/csp/`}>{t('CSP Reports')}</ListLink>
+            }
+            {features.has('user-reports') &&
+              <ListLink to={`/${orgId}/${projectId}/settings/user-feedback/`}>{t('User Feedback')}</ListLink>
+            }
             <li><a href={`${settingsUrlRoot}/keys/`}>{t('Client Keys')} (DSN)</a></li>
           </ul>
           <h6 className="nav-header">{t('Integrations')}</h6>
diff --git a/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx b/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx
index 1e3809b999..0f7e1676bc 100644
--- a/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx
@@ -146,11 +146,11 @@ const ProjectUserReportSettings = React.createClass({
     // TODO(dcramer): localize when language is final
     return (
       <div>
-        <h1>{t('User Reports')}</h1>
+        <h1>{t('User Feedback')}</h1>
 
         <div className="alert alert-block alert-info">Psst! This feature is still a work-in-progress. Thanks for being an early adopter!</div>
 
-        <p>Enabling User Reports allows you to interact with your users on an unprecedented level. Collect additional details about issues affecting them, and more importantly reach out to them with resolutions.</p>
+        <p>Enabling User Feedback allows you to interact with your users on an unprecedented level. Collect additional details about issues affecting them, and more importantly reach out to them with resolutions.</p>
 
         <p>When configured, your users will be presented with a dialog prompting them for additional information. That information will get attached to the issue in Sentry</p>
 
diff --git a/src/sentry/static/sentry/app/views/projectUserReports.jsx b/src/sentry/static/sentry/app/views/projectUserReports.jsx
index f697bb002f..7345feee45 100644
--- a/src/sentry/static/sentry/app/views/projectUserReports.jsx
+++ b/src/sentry/static/sentry/app/views/projectUserReports.jsx
@@ -41,7 +41,7 @@ const ProjectUserReports = React.createClass({
   },
 
   componentWillMount() {
-    this.props.setProjectNavSection('user-reports');
+    this.props.setProjectNavSection('user-feedback');
     this.fetchData();
   },
 
@@ -60,7 +60,7 @@ const ProjectUserReports = React.createClass({
       targetQueryParams.query = query;
 
     let {orgId, projectId} = this.props.params;
-    this.history.pushState(null, `/${orgId}/${projectId}/user-reports/`, targetQueryParams);
+    this.history.pushState(null, `/${orgId}/${projectId}/user-feedback/`, targetQueryParams);
   },
 
   fetchData() {
@@ -101,7 +101,7 @@ const ProjectUserReports = React.createClass({
   getUserReportsUrl() {
     let params = this.props.params;
 
-    return `/${params.orgId}/${params.projectId}/settings/user-reports/`;
+    return `/${params.orgId}/${params.projectId}/settings/user-feedback/`;
   },
 
   renderStreamBody() {
@@ -143,7 +143,7 @@ const ProjectUserReports = React.createClass({
       <div className="box empty-stream">
         <span className="icon icon-exclamation" />
         <p>{t('No user reports have been collected for this project.')}</p>
-        <p><Link to={this.getUserReportsUrl()}>{t('Learn how to integrate User Crash Reports')}</Link></p>
+        <p><Link to={this.getUserReportsUrl()}>{t('Learn how to integrate User Feedback')}</Link></p>
       </div>
     );
   },
@@ -189,7 +189,7 @@ const ProjectUserReports = React.createClass({
       <div>
         <div className="row release-list-header">
           <div className="col-sm-7">
-            <h3>{t('User Reports')}</h3>
+            <h3>{t('User Feedback')}</h3>
           </div>
         </div>
         <div className="alert alert-block alert-info">Psst! This feature is still a work-in-progress. Thanks for being an early adopter!</div>
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 7d4e52fbd9..9178b806d4 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -166,7 +166,7 @@
   <h6 class="nav-header">{% trans "Configuration" %}</h6>
   <ul class="nav nav-stacked">
     <li{% if page == 'details' %} class="active"{% endif %}>
-        <a href="{% url 'sentry-manage-project' project.organization.slug project.slug %}">{% trans "Project Settings" %}</a>
+        <a href="{% url 'sentry-manage-project' project.organization.slug project.slug %}">{% trans "General" %}</a>
     </li>
     <li{% if page == 'notifications' %} class="active"{% endif %}>
         <a href="{% url 'sentry-project-notifications' project.organization.slug project.slug %}">{% trans "Notifications" %}</a>
@@ -196,17 +196,22 @@
         <a href="{% absolute_uri '/{}/{}/settings/debug-symbols/' project.organization.slug project.slug %}">{% trans "Debug Symbols" %}</a>
     </li>
     {% endfeature %}
-    {% feature projects:user-reports project %}
+  </ul>
+  <h6 class="nav-header">{% trans "Data" %}</h6>
+  <ul class="nav nav-stacked">
+    <li>
+        <a href="{% absolute_uri '/{}/{}/settings/install/' project.organization.slug project.slug %}">{% trans "Error Tracking" %}</a>
+    </li>
+    {% feature projects:csp project %}
     <li>
-        <a href="{% absolute_uri '/{}/{}/settings/user-reports/' project.organization.slug project.slug %}">{% trans "User Reports" %}</a>
+        <a href="{% absolute_uri '/{}/{}/settings/csp/' project.organization.slug project.slug %}">{% trans "CSP Reports" %}</a>
     </li>
     {% endfeature %}
-  </ul>
-  <h6 class="nav-header">{% trans "Setup" %}</h6>
-  <ul class="nav nav-stacked">
+    {% feature projects:user-reports project %}
     <li>
-        <a href="{% absolute_uri '/{}/{}/settings/install/' project.organization.slug project.slug %}">{% trans "Instructions" %}</a>
+        <a href="{% absolute_uri '/{}/{}/settings/user-feedback/' project.organization.slug project.slug %}">{% trans "User Feedback" %}</a>
     </li>
+    {% endfeature %}
     <li{% if page == 'keys' %} class="active"{% endif %}>
         <a href="{% url 'sentry-manage-project-keys' project.organization.slug project.slug %}">{% trans "Client Keys (DSN)" %}</a>
     </li>
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index f71ee184e3..af7e9192a6 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -17,7 +17,7 @@ from raven.contrib.django.models import client as Raven
 
 from sentry import app
 from sentry.coreapi import (
-    APIError, APIForbidden, APIRateLimited, ClientApiHelper, CspApiHelper,
+    APIError, APIForbidden, APIRateLimited, ClientApiHelper, CspApiHelper
 )
 from sentry.event_manager import EventManager
 from sentry.models import Project, OrganizationOption
@@ -403,7 +403,6 @@ class CspReportView(StoreView):
 
     def _dispatch(self, request, helper, project_id=None, origin=None,
                   *args, **kwargs):
-        # NOTE: We need to override the auth flow for a CSP report!
         # A CSP report is sent as a POST request with no Origin or Referer
         # header. What we're left with is a 'document-uri' key which is
         # inside of the JSON body of the request. This 'document-uri' value
@@ -425,7 +424,7 @@ class CspReportView(StoreView):
         # This is yanking the auth from the querystring since it's not
         # in the POST body. This means we expect a `sentry_key` and
         # `sentry_version` to be set in querystring
-        auth = self._parse_header(request, helper, project)
+        auth = helper.auth_from_request(request)
 
         project_ = helper.project_from_auth(auth)
         if project_ != project:
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index b3939d0f08..ae4bd6506d 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -16,7 +16,7 @@ class CspReportViewTest(TestCase):
     @fixture
     def path(self):
         path = reverse('sentry-api-csp-report', kwargs={'project_id': self.project.id})
-        return path + '?sentry_key=%s&sentry_version=5' % self.projectkey.public_key
+        return path + '?sentry_key=%s' % self.projectkey.public_key
 
     def test_get_response(self):
         resp = self.client.get(self.path)
