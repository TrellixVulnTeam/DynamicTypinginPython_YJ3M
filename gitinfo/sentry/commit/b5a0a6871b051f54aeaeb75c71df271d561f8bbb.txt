commit b5a0a6871b051f54aeaeb75c71df271d561f8bbb
Author: Mark Story <mark@sentry.io>
Date:   Thu Jul 25 10:10:24 2019 -0400

    feat(apm) Expose transaction start & end timestamp (#14007)
    
    On transaction events expose both the start and end timestamps. This
    will allow us to correctly display the transaction span length.
    
    Move logic to serialize transaction only events into a separate method.
    This also allows error/default only logic to be moved as well. I've
    elected to not emit `dateCreated` on transaction events as it is
    redundant given the start/end timestamps.
    
    Refs SEN-799

diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index b2ba6945ad..6e906a4527 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -257,10 +257,8 @@ class EventSerializer(Serializer):
             'message': message,
             'title': obj.title,
             'location': obj.location,
-            'culprit': obj.culprit,
             'user': attrs['user'],
             'contexts': attrs['contexts'],
-            'crashFile': attrs['crash_file'],
             'sdk': attrs['sdk'],
             # TODO(dcramer): move into contexts['extra']
             'context': context,
@@ -269,11 +267,8 @@ class EventSerializer(Serializer):
             'metadata': obj.get_event_metadata(),
             'tags': tags,
             'platform': obj.platform,
-            'dateCreated': obj.datetime,
             'dateReceived': received,
             'errors': errors,
-            'fingerprints': obj.get_hashes(),
-            'groupingConfig': obj.get_grouping_config(),
             '_meta': {
                 'entries': attrs['_meta']['entries'],
                 'message': message_meta,
@@ -285,8 +280,34 @@ class EventSerializer(Serializer):
                 'tags': tags_meta,
             },
         }
+        # Serialize attributes that are specific to different types of events.
+        if obj.get_event_type() == 'transaction':
+            d.update(self.__serialize_transaction_attrs(attrs, obj))
+        else:
+            d.update(self.__serialize_error_attrs(attrs, obj))
         return d
 
+    def __serialize_transaction_attrs(self, attrs, obj):
+        """
+        Add attributes that are only present on transaction events.
+        """
+        return {
+            'startTimestamp': obj.data.get('start_timestamp'),
+            'endTimestamp': obj.data.get('timestamp'),
+        }
+
+    def __serialize_error_attrs(self, attrs, obj):
+        """
+        Add attributes that are present on error and default event types
+        """
+        return {
+            'crashFile': attrs['crash_file'],
+            'culprit': obj.culprit,
+            'dateCreated': obj.datetime,
+            'fingerprints': obj.get_hashes(),
+            'groupingConfig': obj.get_grouping_config(),
+        }
+
 
 class DetailedEventSerializer(EventSerializer):
     """
diff --git a/src/sentry/data/samples/transaction.json b/src/sentry/data/samples/transaction.json
new file mode 100644
index 0000000000..9e48ad9fc4
--- /dev/null
+++ b/src/sentry/data/samples/transaction.json
@@ -0,0 +1,160 @@
+{
+   "platform": "python",
+   "message": "",
+   "tags": [
+      [
+         "application",
+         "countries"
+      ],
+      [
+         "browser",
+         "Python Requests 2.22"
+      ],
+      [
+         "browser.name",
+         "Python Requests"
+      ],
+      [
+         "environment",
+         "dev"
+      ],
+      [
+         "release",
+         "v0.1"
+      ],
+      [
+         "user",
+         "ip:127.0.0.1"
+      ],
+      [
+         "trace",
+         "a7d67cf796774551a95be6543cacd459"
+      ],
+      [
+         "trace.ctx",
+         "a7d67cf796774551a95be6543cacd459-babaae0d4b7512d9"
+      ],
+      [
+         "trace.span",
+         "babaae0d4b7512d9"
+      ],
+      [
+         "transaction",
+         "/country_by_code/"
+      ],
+      [
+         "url",
+         "http://countries:8010/country_by_code/"
+      ]
+   ],
+   "breadcrumbs": {
+      "values": [
+         {
+            "category": "query",
+            "timestamp":1562681591.0,
+            "message": "SELECT \"countries\".\"id\", \"countries\".\"name\", \"countries\".\"continent\", \"countries\".\"region\", \"countries\".\"surface_area\", \"coun...'CAN'",
+            "type": "default",
+            "level": "info"
+         }
+      ]
+   },
+   "contexts": {
+      "runtime": {
+         "version": "3.7.3",
+         "type": "runtime",
+         "name": "CPython",
+         "build": "3.7.3 (default, Jun 27 2019, 22:53:21) \n[GCC 8.3.0]"
+      },
+      "trace": {
+         "parent_span_id": "8988cec7cc0779c1",
+         "type": "trace",
+         "trace_id": "a7d67cf796774551a95be6543cacd459",
+         "span_id": "babaae0d4b7512d9"
+      },
+      "browser": {
+         "version": "2.22",
+         "type": "browser",
+         "name": "Python Requests"
+      }
+   },
+   "culprit": "/country_by_code/",
+   "environment": "dev",
+   "extra": {},
+   "logger": "",
+   "metadata": {
+      "location": "/country_by_code/",
+      "title": "/country_by_code/"
+   },
+   "request": {
+      "url": "http://countries:8010/country_by_code/",
+      "headers": [
+         [
+            "Accept",
+            "*/*"
+         ],
+         [
+            "Accept-Encoding",
+            "gzip, deflate"
+         ],
+         [
+            "Connection",
+            "keep-alive"
+         ],
+         [
+            "Content-Length",
+            ""
+         ],
+         [
+            "Content-Type",
+            "text/plain"
+         ],
+         [
+            "Host",
+            "countries:8010"
+         ],
+         [
+            "Sentry-Trace",
+            "a7d67cf796774551a95be6543cacd459-8988cec7cc0779c1-1"
+         ],
+         [
+            "User-Agent",
+            "python-requests/2.22.0"
+         ]
+      ],
+      "env": {
+         "SERVER_PORT": "8010",
+         "SERVER_NAME": "a90286977562"
+      },
+      "query_string": [
+         [
+            "code",
+            "CAN"
+         ]
+      ],
+      "method": "GET",
+      "inferred_content_type": "text/plain"
+   },
+   "spans": [
+      {
+         "start_timestamp": 1562681591.0,
+         "same_process_as_parent":true,
+         "description": "Django: SELECT \"countries\".\"id\", \"countries\".\"name\", \"countries\".\"continent\", \"countries\".\"region\", \"countries\".\"surface_area\", \"coun...'CAN'",
+         "tags": {
+            "error":false
+         },
+         "timestamp":1562681591.0,
+         "parent_span_id": "babaae0d4b7512d9",
+         "trace_id": "a7d67cf796774551a95be6543cacd459",
+         "op": "db",
+         "data": {},
+         "span_id": "b048b4c8fdc5168c"
+      }
+   ],
+   "start_timestamp": 1562681591.0,
+   "timestamp": 1562681591.0,
+   "transaction": "/country_by_code/",
+   "type": "transaction",
+   "user": {
+      "ip_address": "127.0.0.1"
+   }
+}
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/eventModalContent.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/eventModalContent.jsx
index 37a52aaee9..e536ac74bc 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/eventModalContent.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/eventModalContent.jsx
@@ -95,7 +95,10 @@ const EventMetadata = props => {
       <MetadataContainer data-test-id="event-id">ID {event.eventID}</MetadataContainer>
       <MetadataContainer>
         <DateTime
-          date={getDynamicText({value: event.dateCreated, fixed: 'Dummy timestamp'})}
+          date={getDynamicText({
+            value: event.dateCreated || event.endTimestamp * 1000,
+            fixed: 'Dummy timestamp',
+          })}
         />
         <ExternalLink href={eventJsonUrl} className="json-link">
           JSON (<FileSize bytes={event.size} />)
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/modalLineGraph.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/modalLineGraph.jsx
index d4d2b291cd..7cb6531d87 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/modalLineGraph.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/modalLineGraph.jsx
@@ -27,7 +27,9 @@ import {MODAL_QUERY_KEYS, PIN_ICON} from './data';
  */
 const getCurrentEventMarker = currentEvent => {
   const title = t('Current Event');
-  const eventTime = +new Date(currentEvent.dateCreated);
+  const eventTime = +new Date(
+    currentEvent.dateCreated || currentEvent.endTimestamp * 1000
+  );
 
   return {
     type: 'line',
diff --git a/src/sentry/utils/samples.py b/src/sentry/utils/samples.py
index 76539ae15c..9c2fae808a 100644
--- a/src/sentry/utils/samples.py
+++ b/src/sentry/utils/samples.py
@@ -132,7 +132,7 @@ def load_data(platform, default=None, sample_name=None):
         return
 
     data = CanonicalKeyDict(data)
-    if platform in ('csp', 'hkpk', 'expectct', 'expectstaple'):
+    if platform in ('transaction', 'csp', 'hkpk', 'expectct', 'expectstaple'):
         return data
 
     data['platform'] = platform
diff --git a/tests/sentry/api/serializers/test_event.py b/tests/sentry/api/serializers/test_event.py
index 183af77bb9..7d19e60faa 100644
--- a/tests/sentry/api/serializers/test_event.py
+++ b/tests/sentry/api/serializers/test_event.py
@@ -11,6 +11,7 @@ from sentry.api.serializers.models.event import (
 )
 from sentry.models import EventError
 from sentry.testutils import TestCase
+from sentry.utils.samples import load_data
 
 
 class EventSerializerTest(TestCase):
@@ -36,6 +37,8 @@ class EventSerializerTest(TestCase):
         assert 'data' in result['errors'][0]
         assert result['errors'][0]['type'] == EventError.INVALID_DATA
         assert result['errors'][0]['data'] == {'name': u'Ã¼'}
+        assert 'startTimestamp' not in result
+        assert 'timestamp' not in result
 
     def test_hidden_eventerror(self):
         event = self.create_event(
@@ -180,6 +183,22 @@ class EventSerializerTest(TestCase):
         assert result['user'] is None
         assert result['sdk'] is None
         assert result['contexts'] == {}
+        assert 'startTimestamp' not in result
+
+    def test_transaction_event(self):
+        event_data = load_data('transaction')
+        event = self.store_event(
+            data=event_data,
+            project_id=self.project.id
+        )
+        result = serialize(event)
+        assert isinstance(result['endTimestamp'], float)
+        assert result['endTimestamp'] == event.data.get('timestamp')
+        assert isinstance(result['startTimestamp'], float)
+        assert result['startTimestamp'] == event.data.get('start_timestamp')
+        assert 'dateCreated' not in result
+        assert 'crashFile' not in result
+        assert 'fingerprints' not in result
 
 
 class SharedEventSerializerTest(TestCase):
@@ -199,7 +218,7 @@ class SharedEventSerializerTest(TestCase):
             assert entry['type'] != 'breadcrumbs'
 
 
-class SnubaEventSerializerTest(TestCase):
+class SimpleEventSerializerTest(TestCase):
     def test_user(self):
         """
         Use the SimpleEventSerializer to serialize an event
