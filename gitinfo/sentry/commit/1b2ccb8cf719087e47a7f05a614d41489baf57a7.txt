commit 1b2ccb8cf719087e47a7f05a614d41489baf57a7
Author: Eric Feng <ehfeng@users.noreply.github.com>
Date:   Thu Mar 23 16:36:13 2017 -0700

    Feature signals (#5020)
    
    * adding feature adoption signals
    
    * adding a few more signals
    
    * finishing up signals
    
    * fixing matt's comments
    
    * fix for percy diff
    
    * adding line to changes, as required by getsentry-bot
    
    * capturing project information in signal
    
    * moving constant def to module level
    
    * removing unnecessary orm calls in the signals
    
    * adding saved search signal

diff --git a/CHANGES b/CHANGES
index 68600a8d64..9921e04c92 100644
--- a/CHANGES
+++ b/CHANGES
@@ -71,6 +71,7 @@ Version 8.14
 - Added the ability to verify TLS connections when fetching artifacts.
 - Added data migration to merge environments across an organization
 - Added ``timesSeen`` keyword to issue search.
+- Added feature signals, such as first time release tracking is enabled.
 
 API Changes
 ~~~~~~~~~~~
diff --git a/src/sentry/api/endpoints/organization_member_details.py b/src/sentry/api/endpoints/organization_member_details.py
index 4d8924e345..2a2ce74ea1 100644
--- a/src/sentry/api/endpoints/organization_member_details.py
+++ b/src/sentry/api/endpoints/organization_member_details.py
@@ -13,6 +13,7 @@ from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.models import (
     AuditLogEntryEvent, AuthIdentity, AuthProvider, OrganizationMember
 )
+from sentry.signals import sso_enabled
 
 ERR_NO_AUTH = 'You cannot remove this member with an unauthenticated API request.'
 
@@ -99,6 +100,9 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
             else:
                 # TODO(dcramer): proper error message
                 return Response({'detail': ERR_UNINVITABLE}, status=400)
+        if has_sso:
+            sso_enabled.send(organization=organization, sender=request.user)
+
         return Response(status=204)
 
     def delete(self, request, organization, member_id):
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index d4b1840257..d537baca94 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -27,7 +27,9 @@ from sentry.models import (
 )
 from sentry.models.event import Event
 from sentry.models.group import looks_like_short_id
+from sentry.receivers import DEFAULT_SAVED_SEARCHES
 from sentry.search.utils import InvalidQuery, parse_query
+from sentry.signals import advanced_search, issue_resolved_in_release
 from sentry.tasks.deletion import delete_group
 from sentry.tasks.merge import merge_group
 from sentry.utils.apidocs import attach_scenarios, scenario
@@ -37,6 +39,7 @@ delete_logger = logging.getLogger('sentry.deletions.api')
 
 
 ERR_INVALID_STATS_PERIOD = "Invalid stats_period. Valid choices are '', '24h', and '14d'"
+SAVED_SEARCH_QUERIES = set([s['query'] for s in DEFAULT_SAVED_SEARCHES])
 
 
 @scenario('BulkUpdateIssues')
@@ -214,6 +217,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
             stats_period = None
 
         query = request.GET.get('query', '').strip()
+
         if query:
             matching_group = None
             matching_event = None
@@ -281,6 +285,9 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
             self.build_cursor_link(request, 'next', cursor_result.next),
         ])
 
+        if results and query not in SAVED_SEARCH_QUERIES:
+            advanced_search.send(project=project, sender=request.user)
+
         return response
 
     @attach_scenarios([bulk_update_issues_scenario])
@@ -425,6 +432,8 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
                     if not is_bulk:
                         activity.send_notification()
 
+                    issue_resolved_in_release.send(project=project, sender=acting_user)
+
             queryset.update(
                 status=GroupStatus.RESOLVED,
                 resolved_at=now,
diff --git a/src/sentry/api/endpoints/project_searches.py b/src/sentry/api/endpoints/project_searches.py
index feb37de5ce..ad730a41d4 100644
--- a/src/sentry/api/endpoints/project_searches.py
+++ b/src/sentry/api/endpoints/project_searches.py
@@ -8,6 +8,7 @@ from django.db.models import Q
 from sentry.api.bases.project import ProjectEndpoint, RelaxedSearchPermission
 from sentry.api.serializers import serialize
 from sentry.models import SavedSearch, SavedSearchUserDefault
+from sentry.signals import save_search_created
 
 
 class SavedSearchSerializer(serializers.Serializer):
@@ -69,6 +70,8 @@ class ProjectSearchesEndpoint(ProjectEndpoint):
                         is_default=result.get('isDefault', False),
                         owner=(None if request.access.has_scope('project:write') else request.user)
                     )
+                    save_search_created.send(project=project, sender=self)
+
                 except IntegrityError:
                     return Response({
                         'detail': 'Search with same name already exists.'
diff --git a/src/sentry/filters/base.py b/src/sentry/filters/base.py
index 13132402e4..f5c8bf7733 100644
--- a/src/sentry/filters/base.py
+++ b/src/sentry/filters/base.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 __all__ = ['Filter']
 
 from sentry.models import ProjectOption
+from sentry.signals import inbound_filter_toggled
 from rest_framework import serializers
 
 
@@ -37,6 +38,9 @@ class Filter(object):
             value='1' if value.get('active', False) else '0',
         )
 
+        if value:
+            inbound_filter_toggled.send(project=self.project, sender=self)
+
     def disable(self):
         return self.enable(False)
 
diff --git a/src/sentry/models/groupassignee.py b/src/sentry/models/groupassignee.py
index f7e8f8fbdd..2b8172307f 100644
--- a/src/sentry/models/groupassignee.py
+++ b/src/sentry/models/groupassignee.py
@@ -16,6 +16,7 @@ from django.utils import timezone
 from sentry.db.models import FlexibleForeignKey, Model, sane_repr, \
     BaseManager
 from sentry.models.activity import Activity
+from sentry.signals import issue_assigned
 
 
 class GroupAssigneeManager(BaseManager):
@@ -42,6 +43,7 @@ class GroupAssigneeManager(BaseManager):
             )
         else:
             affected = True
+            issue_assigned.send(project=group.project, group=group, sender=acting_user)
 
         if affected:
             activity = Activity.objects.create(
diff --git a/src/sentry/receivers/savedsearch.py b/src/sentry/receivers/savedsearch.py
index e494136cee..9408c4bed9 100644
--- a/src/sentry/receivers/savedsearch.py
+++ b/src/sentry/receivers/savedsearch.py
@@ -5,40 +5,21 @@ from django.db.models.signals import post_save
 from sentry.models import Project, SavedSearch
 
 
+DEFAULT_SAVED_SEARCHES = [
+    {'name': 'Unresolved Issues', 'query': 'is:unresolved', 'is_default': True},
+    {'name': 'Needs Triage', 'query': 'is:unresolved is:unassigned'},
+    {'name': 'Assigned To Me', 'query': 'is:unresolved assigned:me'},
+    {'name': 'My Bookmarks', 'query': 'is:unresolved bookmarks:me'},
+    {'name': 'New Today', 'query': 'is:unresolved age:-24h'},
+]
+
+
 def create_default_saved_searches(instance, created=True, **kwargs):
     if not created:
         return
 
-    SavedSearch.objects.create(
-        project=instance,
-        name='Unresolved Issues',
-        query='is:unresolved',
-        is_default=True,
-    )
-
-    SavedSearch.objects.create(
-        project=instance,
-        name='Needs Triage',
-        query='is:unresolved is:unassigned',
-    )
-
-    SavedSearch.objects.create(
-        project=instance,
-        name='Assigned To Me',
-        query='is:unresolved assigned:me',
-    )
-
-    SavedSearch.objects.create(
-        project=instance,
-        name='My Bookmarks',
-        query='is:unresolved bookmarks:me',
-    )
-
-    SavedSearch.objects.create(
-        project=instance,
-        name='New Today',
-        query='is:unresolved age:-24h',
-    )
+    for search_kwargs in DEFAULT_SAVED_SEARCHES:
+        SavedSearch.objects.create(project=instance, **search_kwargs)
 
 
 post_save.connect(
diff --git a/src/sentry/signals.py b/src/sentry/signals.py
index 397447f50e..a82151672d 100644
--- a/src/sentry/signals.py
+++ b/src/sentry/signals.py
@@ -49,3 +49,13 @@ plugin_enabled = BetterSignal(providing_args=["plugin", "project", "user"])
 email_verified = BetterSignal(providing_args=["email"])
 
 mocks_loaded = BetterSignal(providing_args=["project"])
+
+user_feedback_received = BetterSignal(providing_args=["project"])
+api_called = BetterSignal(providing_args=["project"])
+issue_assigned = BetterSignal(providing_args=["project", "group"])
+issue_resolved_in_release = BetterSignal(providing_args=["project"])
+advanced_search = BetterSignal(providing_args=["project"])
+save_search_created = BetterSignal(providing_args=["project"])
+inbound_filter_toggled = BetterSignal(providing_args=["project"])
+sso_enabled = BetterSignal(providing_args=["organization"])
+data_scrubber_enabled = BetterSignal(providing_args=["organization"])
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 9a54da75bf..0071fee5f8 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -24,7 +24,7 @@ from sentry.coreapi import (
 )
 from sentry.models import Project, OrganizationOption, Organization
 from sentry.signals import (
-    event_accepted, event_dropped, event_filtered, event_received
+    event_accepted, event_dropped, event_filtered, event_received, api_called
 )
 from sentry.quotas.base import RateLimit
 from sentry.utils import json, metrics
@@ -239,6 +239,7 @@ class APIView(BaseView):
             else:
                 response['Access-Control-Allow-Origin'] = origin
 
+        api_called.send(project=project, sender=self)
         return response
 
     # XXX: backported from Django 1.5
diff --git a/src/sentry/web/frontend/error_page_embed.py b/src/sentry/web/frontend/error_page_embed.py
index f5389bd7cd..a031d8d692 100644
--- a/src/sentry/web/frontend/error_page_embed.py
+++ b/src/sentry/web/frontend/error_page_embed.py
@@ -16,6 +16,7 @@ from sentry.models import (
     EventMapping, Group, ProjectKey, ProjectOption, UserReport
 )
 from sentry.web.helpers import render_to_response
+from sentry.signals import user_feedback_received
 from sentry.utils import json
 from sentry.utils.http import is_valid_origin, origin_from_request
 from sentry.utils.validators import is_event_id
@@ -139,6 +140,9 @@ class ErrorPageEmbedView(View):
                     comments=report.comments,
                     date_added=timezone.now(),
                 )
+
+            user_feedback_received.send(project=report.project, group=report.group, sender=self)
+
             return self._json_response(request)
         elif request.method == 'POST':
             return self._json_response(request, {
diff --git a/src/sentry/web/frontend/organization_settings.py b/src/sentry/web/frontend/organization_settings.py
index c638ddf130..8f168d3d97 100644
--- a/src/sentry/web/frontend/organization_settings.py
+++ b/src/sentry/web/frontend/organization_settings.py
@@ -9,6 +9,7 @@ from django.utils.translation import ugettext_lazy as _
 
 from sentry import roles
 from sentry.models import AuditLogEntryEvent, Organization
+from sentry.signals import data_scrubber_enabled
 from sentry.web.frontend.base import OrganizationView
 
 
@@ -139,12 +140,14 @@ class OrganizationSettingsView(OrganizationView):
             organization.flags.early_adopter = form.cleaned_data['early_adopter']
             organization.save()
 
-            for opt in (
-                    'require_scrub_data',
-                    'require_scrub_defaults',
-                    'sensitive_fields',
-                    'safe_fields',
-                    'require_scrub_ip_address'):
+            data_scrubbing_options = (
+                'require_scrub_data',
+                'require_scrub_defaults',
+                'sensitive_fields',
+                'safe_fields',
+                'require_scrub_ip_address')
+
+            for opt in data_scrubbing_options:
                 value = form.cleaned_data.get(opt)
                 if value is None:
                     organization.delete_option('sentry:%s' % (opt,))
@@ -162,6 +165,9 @@ class OrganizationSettingsView(OrganizationView):
             messages.add_message(request, messages.SUCCESS,
                 _('Changes to your organization were saved.'))
 
+            if any((scrubbing_field in form.cleaned_data for scrubbing_field in data_scrubbing_options)):
+                data_scrubber_enabled.send(organization=organization, sender=request.user)
+
             return HttpResponseRedirect(reverse('sentry-organization-settings', args=[organization.slug]))
 
         context = {
