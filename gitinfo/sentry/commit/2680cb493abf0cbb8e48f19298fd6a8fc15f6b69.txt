commit 2680cb493abf0cbb8e48f19298fd6a8fc15f6b69
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Nov 30 22:44:11 2015 -0800

    Implement org quotas, remove team quotas

diff --git a/CHANGES b/CHANGES
index 530b1bcd54..6c13c81d19 100644
--- a/CHANGES
+++ b/CHANGES
@@ -41,6 +41,7 @@ General
 - Membership permissions have been overhauled and have been flattened into a single tiered
   role. Additionally owners will no longer be automatically added to new teams.
 - ``NotificationPlugin`` now requires ``is_configured`` to be declared.
+- Team and System based quotas are now longer available. A new organization-relative project quota replaces them.
 
 Client API
 ~~~~~~~~~~
diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index bd156db200..064e70d113 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -66,7 +66,7 @@ class OrganizationSerializer(serializers.ModelSerializer):
             OrganizationOption.objects.set_value(
                 organization=self.object,
                 key='sentry:project-rate-limit',
-                value=self.init_data['projectRateLimit'],
+                value=int(self.init_data['projectRateLimit']),
             )
         return rv
 
diff --git a/src/sentry/quotas/base.py b/src/sentry/quotas/base.py
index 6da343b7d1..5065dbd390 100644
--- a/src/sentry/quotas/base.py
+++ b/src/sentry/quotas/base.py
@@ -40,39 +40,59 @@ class Quota(object):
         return 0
 
     def translate_quota(self, quota, parent_quota):
-        if quota.endswith('%'):
+        if str(quota).endswith('%'):
             pct = int(quota[:-1])
             quota = int(parent_quota) * pct / 100
+        if not quota:
+            return int(parent_quota or 0)
         return int(quota or 0)
 
     def get_project_quota(self, project):
-        from sentry.models import ProjectOption, Team
+        from sentry.models import (
+            ProjectOption, Organization, OrganizationOption
+        )
 
-        project_quota = ProjectOption.objects.get_value(project, 'quotas:per_minute', '')
-        if project_quota is None:
-            project_quota = settings.SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE
+        # DEPRECATED: Will likely be removed in a future version unless Sentry
+        # team is convinced otherwise.
+        legacy_quota = ProjectOption.objects.get_value(project, 'quotas:per_minute', '')
+        if legacy_quota == '':
+            legacy_quota = settings.SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE
 
-        team = getattr(project, '_team_cache', None)
-        if not team:
-            team = Team.objects.get_from_cache(id=project.team_id)
+        org = getattr(project, '_organization_cache', None)
+        if not org:
+            org = Organization.objects.get_from_cache(id=project.organization_id)
+            project._organization_cache = org
 
-        return self.translate_quota(
-            project_quota,
-            self.get_team_quota(team),
-        )
+        max_quota_share = int(OrganizationOption.objects.get_value(
+            org, 'sentry:project-rate-limit', 100))
 
-    def get_team_quota(self, team):
-        from sentry.models import Organization
+        if not legacy_quota and max_quota_share == 100:
+            return 0
 
-        org = getattr(team, '_organization_cache', None)
-        if not org:
-            org = Organization.objects.get_from_cache(id=team.organization_id)
+        org_quota = self.get_organization_quota(org)
 
-        return self.translate_quota(
-            settings.SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE,
-            self.get_organization_quota(org)
+        quota = self.translate_quota(
+            legacy_quota,
+            org_quota,
         )
 
+        # if we have set a max project quota percentage and there's actually
+        # a quota set for the org, lets calculate the maximum by using the min
+        # of the two quotas
+        if max_quota_share != 100 and org_quota:
+            if quota:
+                quota = min(quota, self.translate_quota(
+                    '{}%'.format(max_quota_share),
+                    org_quota,
+                ))
+            else:
+                quota = self.translate_quota(
+                    '{}%'.format(max_quota_share),
+                    org_quota,
+                )
+
+        return quota
+
     def get_organization_quota(self, organization):
         return self.translate_quota(
             settings.SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE,
diff --git a/src/sentry/quotas/redis.py b/src/sentry/quotas/redis.py
index 24ee2fa589..154ec68ed7 100644
--- a/src/sentry/quotas/redis.py
+++ b/src/sentry/quotas/redis.py
@@ -72,7 +72,6 @@ class RedisQuota(Quota):
         return filter(
             lambda (key, value): value > 0,  # a zero quota means "no quota"
             (
-                (self._get_team_key(project.team), self.get_team_quota(project.team)),
                 (self._get_project_key(project), self.get_project_quota(project)),
                 (self._get_organization_key(project.organization), self.get_organization_quota(project.organization)),
             )
@@ -94,9 +93,6 @@ class RedisQuota(Quota):
     def get_time_remaining(self):
         return int(self.ttl - (time.time() - int(time.time() / self.ttl) * self.ttl))
 
-    def _get_team_key(self, team):
-        return 'quota:t:%s:%s' % (team.id, int(time.time() / self.ttl))
-
     def _get_project_key(self, project):
         return 'quota:p:%s:%s' % (project.id, int(time.time() / self.ttl))
 
diff --git a/src/sentry/web/frontend/project_quotas.py b/src/sentry/web/frontend/project_quotas.py
index 19801643de..f5bf3cc650 100644
--- a/src/sentry/web/frontend/project_quotas.py
+++ b/src/sentry/web/frontend/project_quotas.py
@@ -42,7 +42,6 @@ class ProjectQuotasView(ProjectView):
             'page': 'quotas',
             # TODO(dcramer): has_quotas is an awful hack
             'has_quotas': type(app.quotas) != Quota,
-            'team_quota': int(app.quotas.get_team_quota(project.team)),
             'organization_quota': int(app.quotas.get_organization_quota(project.organization)),
             'project': project,
             'form': form,
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index 532b0988c7..e4a8ae957b 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 from mock import patch
 
-from sentry.models import Organization, OrganizationStatus
+from sentry.models import Organization, OrganizationOption, OrganizationStatus
 from sentry.testutils import APITestCase
 
 
@@ -35,6 +35,20 @@ class OrganizationUpdateTest(APITestCase):
         assert org.name == 'hello world'
         assert org.slug == 'foobar'
 
+    def test_setting_rate_limit(self):
+        org = self.create_organization(owner=self.user)
+        self.login_as(user=self.user)
+        url = reverse('sentry-api-0-organization-details', kwargs={
+            'organization_slug': org.slug,
+        })
+        response = self.client.put(url, data={
+            'projectRateLimit': '80',
+        })
+        assert response.status_code == 200, response.content
+        result = OrganizationOption.objects.get_value(
+            org, 'sentry:project-rate-limit')
+        assert result == 80
+
 
 class OrganizationDeleteTest(APITestCase):
     @patch('sentry.api.endpoints.organization_details.delete_organization')
diff --git a/tests/sentry/quotas/redis/tests.py b/tests/sentry/quotas/redis/tests.py
index 92e35238fc..73390c81ba 100644
--- a/tests/sentry/quotas/redis/tests.py
+++ b/tests/sentry/quotas/redis/tests.py
@@ -45,12 +45,6 @@ class RedisQuotaTest(TestCase):
         })
         return inst
 
-    @patcher.object(RedisQuota, 'get_team_quota')
-    def get_team_quota(self):
-        inst = mock.MagicMock()
-        inst.return_value = 0
-        return inst
-
     @patcher.object(RedisQuota, 'get_project_quota')
     def get_project_quota(self):
         inst = mock.MagicMock()
@@ -73,11 +67,9 @@ class RedisQuotaTest(TestCase):
         assert set(self.quota._get_quotas(self.project)) == set()
 
     def test_uses_defined_quotas(self):
-        self.get_team_quota.return_value = 100
         self.get_project_quota.return_value = 200
         self.get_organization_quota.return_value = 300
         assert set(self.quota._get_quotas(self.project)) == set((
-            (self.quota._get_team_key(self.project.team), 100),
             (self.quota._get_project_key(self.project), 200),
             (self.quota._get_organization_key(self.project.team), 300),
         ))
@@ -91,12 +83,12 @@ class RedisQuotaTest(TestCase):
 
     @mock.patch('sentry.quotas.redis.is_rate_limited', return_value=(False, False))
     def test_is_not_limited_without_rejections(self, is_rate_limited):
-        self.get_team_quota.return_value = 100
+        self.get_organization_quota.return_value = 100
         self.get_project_quota.return_value = 200
         assert not self.quota.is_rate_limited(self.project).is_limited
 
     @mock.patch('sentry.quotas.redis.is_rate_limited', return_value=(True, False))
     def test_is_limited_on_rejections(self, is_rate_limited):
-        self.get_team_quota.return_value = 100
+        self.get_organization_quota.return_value = 100
         self.get_project_quota.return_value = 200
         assert self.quota.is_rate_limited(self.project).is_limited
diff --git a/tests/sentry/quotas/test_base.py b/tests/sentry/quotas/test_base.py
new file mode 100644
index 0000000000..d0fd3abdfa
--- /dev/null
+++ b/tests/sentry/quotas/test_base.py
@@ -0,0 +1,63 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from sentry.models import OrganizationOption, ProjectOption
+from sentry.quotas.base import Quota
+from sentry.testutils import TestCase
+
+
+class QuotaTest(TestCase):
+    def setUp(self):
+        self.backend = Quota()
+
+    def test_get_project_quota(self):
+        org = self.create_organization()
+        project = self.create_project(organization=org)
+
+        with self.settings(SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE=0):
+            with self.settings(SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE=0):
+                assert self.backend.get_project_quota(project) == 0
+
+            ProjectOption.objects.set_value(
+                project, 'quotas:per_minute', '80%'
+            )
+
+            with self.settings(SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE=100):
+                assert self.backend.get_project_quota(project) == 80
+
+            with self.settings(SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE=0):
+                assert self.backend.get_project_quota(project) == 0
+
+            ProjectOption.objects.set_value(
+                project, 'quotas:per_minute', '50'
+            )
+
+            with self.settings(SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE=100):
+                assert self.backend.get_project_quota(project) == 50
+
+            with self.settings(SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE=0):
+                assert self.backend.get_project_quota(project) == 50
+
+            OrganizationOption.objects.set_value(
+                org, 'sentry:project-rate-limit', 80,
+            )
+
+            with self.settings(SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE=100):
+                assert self.backend.get_project_quota(project) == 50
+
+            with self.settings(SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE=50):
+                assert self.backend.get_project_quota(project) == 40
+
+            with self.settings(SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE=0):
+                assert self.backend.get_project_quota(project) == 50
+
+            ProjectOption.objects.set_value(
+                project, 'quotas:per_minute', ''
+            )
+
+            with self.settings(SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE=100):
+                assert self.backend.get_project_quota(project) == 80
+
+            with self.settings(SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE=0):
+                assert self.backend.get_project_quota(project) == 0
