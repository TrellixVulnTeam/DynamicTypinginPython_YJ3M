commit 81f4a64bed2c621298fc1bf574c441ddcb91b9d4
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Mon Jun 15 19:13:34 2020 +0200

    ref(pii): rename pii files (#19368)

diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesContent.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/content.tsx
similarity index 82%
rename from src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesContent.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataScrubbing/content.tsx
index 9fd82bb907..936b1e35ce 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesContent.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/content.tsx
@@ -6,23 +6,23 @@ import EmptyMessage from 'app/views/settings/components/emptyMessage';
 import {IconWarning} from 'app/icons';
 
 import RulesList from './rulesList';
-import DataPrivacyRulesModal from './dataPrivacyRulesModal';
+import Dialog from './dialog';
 
-type ModalProps = React.ComponentProps<typeof DataPrivacyRulesModal>;
-type Rule = NonNullable<ModalProps['rule']>;
+type DialogProps = React.ComponentProps<typeof Dialog>;
+type Rule = NonNullable<DialogProps['rule']>;
 
 type Props = {
   rules: Array<Rule>;
-  onUpdateRule: ModalProps['onSaveRule'];
+  onUpdateRule: DialogProps['onSaveRule'];
   onDeleteRule: (rulesToBeDeleted: Array<Rule['id']>) => void;
   disabled?: boolean;
-} & Pick<ModalProps, 'eventId' | 'onUpdateEventId' | 'sourceSuggestions'>;
+} & Pick<DialogProps, 'eventId' | 'onUpdateEventId' | 'sourceSuggestions'>;
 
 type State = {
   editRule?: Rule['id'];
 };
 
-class DataPrivacyRulesContent extends React.Component<Props, State> {
+class Content extends React.Component<Props, State> {
   state: State = {
     editRule: undefined,
   };
@@ -80,7 +80,7 @@ class DataPrivacyRulesContent extends React.Component<Props, State> {
           disabled={disabled}
         />
         {defined(editRule) && (
-          <DataPrivacyRulesModal
+          <Dialog
             rule={rules[editRule]}
             sourceSuggestions={sourceSuggestions}
             onClose={this.handleCloseEditRuleModal}
@@ -94,4 +94,4 @@ class DataPrivacyRulesContent extends React.Component<Props, State> {
   }
 }
 
-export default DataPrivacyRulesContent;
+export default Content;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/convertRelayPiiConfig.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/convertRelayPiiConfig.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/convertRelayPiiConfig.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataScrubbing/convertRelayPiiConfig.tsx
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesModal.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/dialog.tsx
similarity index 93%
rename from src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesModal.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataScrubbing/dialog.tsx
index b824aca691..672d85a67c 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesModal.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/dialog.tsx
@@ -8,12 +8,12 @@ import ButtonBar from 'app/components/buttonBar';
 import {t} from 'app/locale';
 import {defined} from 'app/utils';
 
-import DataPrivacyRulesPanelForm from './dataPrivacyRulesForm/dataPrivacyRulesForm';
+import Form from './form/form';
 import {RuleType, MethodType} from './types';
 
 const DEFAULT_RULE_SOURCE_VALUE = '';
 
-type FormProps = React.ComponentProps<typeof DataPrivacyRulesPanelForm>;
+type FormProps = React.ComponentProps<typeof Form>;
 type Rule = FormProps['rule'];
 type Errors = FormProps['errors'];
 type Error = keyof Errors;
@@ -33,7 +33,7 @@ type State = {
   errors: Errors;
 };
 
-class DataPrivacyRulesModal extends React.Component<Props, State> {
+class Dialog extends React.Component<Props, State> {
   state: State = {
     rule: {
       id: defined(this.props.rule?.id) ? this.props.rule?.id! : -1,
@@ -137,7 +137,7 @@ class DataPrivacyRulesModal extends React.Component<Props, State> {
             : t('Add a data scrubbing rule')}
         </Modal.Header>
         <Modal.Body>
-          <DataPrivacyRulesPanelForm
+          <Form
             onChange={this.handleChange}
             onValidate={this.handleValidation}
             sourceSuggestions={sourceSuggestions}
@@ -167,7 +167,7 @@ class DataPrivacyRulesModal extends React.Component<Props, State> {
   }
 }
 
-export default DataPrivacyRulesModal;
+export default Dialog;
 
 const StyledModal = styled(Modal)`
   .modal-dialog {
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventId.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/eventIdField.tsx
similarity index 89%
rename from src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventId.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/eventIdField.tsx
index 24fda0768b..47db1cc5fd 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventId.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/eventIdField.tsx
@@ -6,8 +6,8 @@ import TextField from 'app/components/forms/textField';
 import {t} from 'app/locale';
 import space from 'app/styles/space';
 
-import DataPrivacyRulesPanelFormField from './dataPrivacyRulesFormField';
-import DataPrivacyRulesFormEventIdStatusIcon from './dataPrivacyRulesFormEventIdStatusIcon';
+import FormField from './formField';
+import EventIdFieldStatusIconStatusIcon from './eventIdFieldStatusIcon';
 import {EventIdStatus} from '../types';
 
 type EventId = {
@@ -26,7 +26,7 @@ type State = {
   status?: EventIdStatus;
 };
 
-class DataPrivacyRulesFormEventId extends React.Component<Props, State> {
+class EventIdField extends React.Component<Props, State> {
   state = {
     value: this.props.eventId.value,
     status: this.props.eventId.status,
@@ -111,7 +111,7 @@ class DataPrivacyRulesFormEventId extends React.Component<Props, State> {
     const {value, status} = this.state;
 
     return (
-      <DataPrivacyRulesPanelFormField
+      <FormField
         label={t('Event ID (Optional)')}
         tooltipInfo={t(
           'Providing an event ID will automatically provide you a list of suggested sources'
@@ -130,17 +130,17 @@ class DataPrivacyRulesFormEventId extends React.Component<Props, State> {
             error={this.getErrorMessage()}
           />
           <Status>
-            <DataPrivacyRulesFormEventIdStatusIcon
+            <EventIdFieldStatusIconStatusIcon
               onClickIconClose={this.handleClickIconClose}
               status={status}
             />
           </Status>
         </EventIdFieldWrapper>
-      </DataPrivacyRulesPanelFormField>
+      </FormField>
     );
   }
 }
-export default DataPrivacyRulesFormEventId;
+export default EventIdField;
 
 const StyledTextField = styled(TextField)<{showStatus: boolean}>`
   flex: 1;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventIdStatusIcon.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/eventIdFieldStatusIcon.tsx
similarity index 87%
rename from src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventIdStatusIcon.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/eventIdFieldStatusIcon.tsx
index 9840c95e4d..1ed8ee38df 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventIdStatusIcon.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/eventIdFieldStatusIcon.tsx
@@ -13,7 +13,7 @@ type Props = {
   status?: EventIdStatus;
 };
 
-const DataPrivacyRulesFormEventIdStatusIcon = ({status, onClickIconClose}: Props) => {
+const EventIdFieldStatusIcon = ({status, onClickIconClose}: Props) => {
   switch (status) {
     case EventIdStatus.ERROR:
     case EventIdStatus.INVALID:
@@ -34,7 +34,7 @@ const DataPrivacyRulesFormEventIdStatusIcon = ({status, onClickIconClose}: Props
   }
 };
 
-export default DataPrivacyRulesFormEventIdStatusIcon;
+export default EventIdFieldStatusIcon;
 
 const CloseIcon = styled('div')`
   cursor: pointer;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesForm.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/form.tsx
similarity index 79%
rename from src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesForm.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/form.tsx
index f7edc140ad..64b631b2bb 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/form.tsx
@@ -8,12 +8,12 @@ import TextField from 'app/components/forms/textField';
 
 import {Rule, RuleType, MethodType} from '../types';
 import {getMethodTypeLabel, getRuleTypeLabel} from './utils';
-import Source from './source';
-import DataPrivacyRulesFormField from './dataPrivacyRulesFormField';
-import DataPrivacyRulesFormSelectControl from './dataPrivacyRulesFormSelectControl';
-import DataPrivacyRulesFormEventId from './dataPrivacyRulesFormEventId';
+import Source from './sourceField';
+import FormField from './formField';
+import SelectField from './selectField';
+import EventidField from './eventIdField';
 
-type EventIdProps = React.ComponentProps<typeof DataPrivacyRulesFormEventId>;
+type EventIdProps = React.ComponentProps<typeof EventidField>;
 type SourceProps = React.ComponentProps<typeof Source>;
 type Errors = {
   customRegularExpression?: string;
@@ -29,7 +29,7 @@ type Props = EventIdProps & {
   errors: Errors;
 };
 
-const DataPrivacyRulesForm = ({
+const Form = ({
   disabled,
   rule: {source, customRegularExpression, type, method},
   errors,
@@ -41,8 +41,8 @@ const DataPrivacyRulesForm = ({
 }: Props) => (
   <Wrapper>
     <WrapperSelectFields>
-      <DataPrivacyRulesFormField label={t('Method')} tooltipInfo={t('What to do')}>
-        <DataPrivacyRulesFormSelectControl
+      <FormField label={t('Method')} tooltipInfo={t('What to do')}>
+        <SelectField
           placeholder={t('Select method')}
           name="method"
           options={sortBy(Object.values(MethodType)).map(value => ({
@@ -53,14 +53,14 @@ const DataPrivacyRulesForm = ({
           onChange={({value}) => onChange('method', value)}
           isDisabled={disabled}
         />
-      </DataPrivacyRulesFormField>
-      <DataPrivacyRulesFormField
+      </FormField>
+      <FormField
         label={t('Data Type')}
         tooltipInfo={t(
           'What to look for. Use an existing pattern or define your own using regular expressions.'
         )}
       >
-        <DataPrivacyRulesFormSelectControl
+        <SelectField
           placeholder={t('Select type')}
           name="type"
           options={sortBy(Object.values(RuleType)).map(value => ({
@@ -71,10 +71,10 @@ const DataPrivacyRulesForm = ({
           onChange={({value}) => onChange('type', value)}
           isDisabled={disabled}
         />
-      </DataPrivacyRulesFormField>
+      </FormField>
     </WrapperSelectFields>
     {type === RuleType.PATTERN && (
-      <DataPrivacyRulesFormField
+      <FormField
         label={t('Regex matches')}
         tooltipInfo={t('Custom Perl-style regex (PCRE)')}
         isFullWidth
@@ -90,10 +90,10 @@ const DataPrivacyRulesForm = ({
           error={errors.customRegularExpression}
           disabled={disabled}
         />
-      </DataPrivacyRulesFormField>
+      </FormField>
     )}
-    <DataPrivacyRulesFormEventId onUpdateEventId={onUpdateEventId} eventId={eventId} />
-    <DataPrivacyRulesFormField
+    <EventidField onUpdateEventId={onUpdateEventId} eventId={eventId} />
+    <FormField
       label={t('Source')}
       tooltipInfo={t(
         'Where to look. In the simplest case this can be an attribute name.'
@@ -110,11 +110,11 @@ const DataPrivacyRulesForm = ({
         error={errors.source}
         disabled={disabled}
       />
-    </DataPrivacyRulesFormField>
+    </FormField>
   </Wrapper>
 );
 
-export default DataPrivacyRulesForm;
+export default Form;
 
 const Wrapper = styled('div')`
   display: grid;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormField.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/formField.tsx
similarity index 81%
rename from src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormField.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/formField.tsx
index 2e8da8cae6..02084b6cc1 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormField.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/formField.tsx
@@ -1,6 +1,5 @@
 import React from 'react';
 import styled from '@emotion/styled';
-import {css} from '@emotion/core';
 
 import QuestionTooltip from 'app/components/questionTooltip';
 import space from 'app/styles/space';
@@ -12,12 +11,7 @@ type Props = {
   isFullWidth?: boolean;
 };
 
-const DataPrivacyRulesFormField = ({
-  label,
-  tooltipInfo,
-  children,
-  isFullWidth,
-}: Props) => (
+const FormField = ({label, tooltipInfo, children, isFullWidth}: Props) => (
   <Wrapper isFullWidth={isFullWidth}>
     <Label>
       <LabelDescription>{label}</LabelDescription>
@@ -27,12 +21,12 @@ const DataPrivacyRulesFormField = ({
   </Wrapper>
 );
 
-export default DataPrivacyRulesFormField;
+export default FormField;
 
 const Wrapper = styled('div')<{isFullWidth?: boolean}>`
   ${p =>
     p.isFullWidth &&
-    css`
+    `
       grid-column-start: 1;
       grid-column-end: -1;
     `}
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSelectControl.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/selectField.tsx
similarity index 92%
rename from src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSelectControl.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/selectField.tsx
index 2430934445..215c369bed 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSelectControl.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/selectField.tsx
@@ -1,6 +1,5 @@
 import React from 'react';
 import styled from '@emotion/styled';
-import {css} from '@emotion/core';
 // eslint import checks can't find types in the flow code.
 // eslint-disable-next-line import/named
 import {components, OptionProps} from 'react-select';
@@ -15,7 +14,7 @@ type Props = Pick<
   'value' | 'placeholder' | 'name' | 'onChange' | 'options' | 'isDisabled'
 >;
 
-class DataPrivacyRulesPanelFormSelectControl extends React.Component<Props> {
+class SelectField extends React.Component<Props> {
   componentDidMount() {
     if (!this.selectRef.current) {
       return;
@@ -66,7 +65,7 @@ class DataPrivacyRulesPanelFormSelectControl extends React.Component<Props> {
   }
 }
 
-export default DataPrivacyRulesPanelFormSelectControl;
+export default SelectField;
 
 const Description = styled('div')`
   color: ${p => p.theme.gray500};
@@ -78,7 +77,7 @@ const Wrapper = styled('div')<{isSelected?: boolean}>`
   grid-gap: ${space(1)};
   ${p =>
     p.isSelected &&
-    css`
+    `
       ${Description} {
         :not(:hover) {
           color: ${p.theme.white};
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/source.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/sourceField.tsx
similarity index 99%
rename from src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/source.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/sourceField.tsx
index 7df8117d09..ba3cedab2e 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/source.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/sourceField.tsx
@@ -10,7 +10,7 @@ import {defined} from 'app/utils';
 import {
   unaryOperatorSuggestions,
   binaryOperatorSuggestions,
-} from './dataPrivacyRulesFormSourceSuggestions';
+} from './sourceFieldSuggestions';
 import SourceSuggestionExamples from './sourceSuggestionExamples';
 import {SourceSuggestion, SourceSuggestionType} from '../types';
 
@@ -33,7 +33,7 @@ type State = {
   help?: string;
 };
 
-class Source extends React.Component<Props, State> {
+class SourceField extends React.Component<Props, State> {
   state: State = {
     suggestions: [],
     fieldValues: [],
@@ -440,7 +440,7 @@ class Source extends React.Component<Props, State> {
   }
 }
 
-export default Source;
+export default SourceField;
 
 const Wrapper = styled('div')<{hideCaret?: boolean}>`
   position: relative;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSourceSuggestions.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/sourceFieldSuggestions.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSourceSuggestions.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/sourceFieldSuggestions.tsx
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/sourceSuggestionExamples.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/sourceSuggestionExamples.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/sourceSuggestionExamples.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/sourceSuggestionExamples.tsx
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/utils.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/utils.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/utils.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/utils.tsx
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/getRelayPiiConfig.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/getRelayPiiConfig.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/getRelayPiiConfig.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataScrubbing/getRelayPiiConfig.tsx
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRules.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/index.tsx
similarity index 91%
rename from src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRules.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataScrubbing/index.tsx
index 847e25d7ad..c6cad975dc 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRules.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/index.tsx
@@ -10,10 +10,10 @@ import ExternalLink from 'app/components/links/externalLink';
 import Button from 'app/components/button';
 import {Organization, Project} from 'app/types';
 
-import {defaultSuggestions as sourceDefaultSuggestions} from './dataPrivacyRulesForm/dataPrivacyRulesFormSourceSuggestions';
-import DataPrivacyRulesModal from './dataPrivacyRulesModal';
-import DataPrivacyRulesPanelContent from './dataPrivacyRulesContent';
-import DataPrivacyRulesPanelForm from './dataPrivacyRulesForm/dataPrivacyRulesForm';
+import {defaultSuggestions as sourceDefaultSuggestions} from './form/sourceFieldSuggestions';
+import Dialog from './dialog';
+import Content from './content';
+import Form from './form/form';
 import OrganizationRules from './organizationRules';
 import {Rule, EventIdStatus} from './types';
 import convertRelayPiiConfig from './convertRelayPiiConfig';
@@ -22,12 +22,10 @@ import getRelayPiiConfig from './getRelayPiiConfig';
 const ADVANCED_DATASCRUBBING_LINK =
   'https://docs.sentry.io/data-management/advanced-datascrubbing/';
 
-type DataPrivacyRulesPanelFormProps = React.ComponentProps<
-  typeof DataPrivacyRulesPanelForm
->;
-type ModalProps = React.ComponentProps<typeof DataPrivacyRulesModal>;
-type SourceSuggestions = ModalProps['sourceSuggestions'];
-type Errors = DataPrivacyRulesPanelFormProps['errors'];
+type FormProps = React.ComponentProps<typeof Form>;
+type DialogProps = React.ComponentProps<typeof Dialog>;
+type SourceSuggestions = DialogProps['sourceSuggestions'];
+type Errors = FormProps['errors'];
 
 type Props = {
   endpoint: string;
@@ -44,13 +42,13 @@ type State = {
   savedRules: Array<Rule>;
   relayPiiConfig?: string;
   sourceSuggestions: SourceSuggestions;
-  eventId: ModalProps['eventId'];
+  eventId: DialogProps['eventId'];
   orgRules: Array<Rule>;
   showAddRuleModal?: boolean;
   isProjectLevel?: boolean;
 };
 
-class DataPrivacyRules extends React.Component<Props, State> {
+class DataScrubbing extends React.Component<Props, State> {
   state: State = {
     rules: [],
     savedRules: [],
@@ -326,7 +324,7 @@ class DataPrivacyRules extends React.Component<Props, State> {
           </PanelAlert>
           <PanelBody>
             {isProjectLevel && <OrganizationRules rules={orgRules} />}
-            <DataPrivacyRulesPanelContent
+            <Content
               rules={rules}
               onDeleteRule={this.handleDeleteRule}
               onUpdateRule={this.handleUpdateRule}
@@ -336,11 +334,7 @@ class DataPrivacyRules extends React.Component<Props, State> {
               disabled={disabled}
             />
             <PanelAction>
-              <Button
-                href={ADVANCED_DATASCRUBBING_LINK}
-                target="_blank"
-                disabled={disabled}
-              >
+              <Button href={ADVANCED_DATASCRUBBING_LINK} target="_blank">
                 {t('Read the docs')}
               </Button>
               <Button
@@ -354,7 +348,7 @@ class DataPrivacyRules extends React.Component<Props, State> {
           </PanelBody>
         </Panel>
         {showAddRuleModal && (
-          <DataPrivacyRulesModal
+          <Dialog
             sourceSuggestions={sourceSuggestions}
             onSaveRule={this.handleAddRule}
             onClose={this.handleToggleAddRuleModal(false)}
@@ -367,7 +361,7 @@ class DataPrivacyRules extends React.Component<Props, State> {
   }
 }
 
-export default DataPrivacyRules;
+export default DataScrubbing;
 
 const PanelAction = styled('div')`
   padding: ${space(1)} ${space(2)};
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/organizationRules.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/organizationRules.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/organizationRules.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataScrubbing/organizationRules.tsx
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/rulesList.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/rulesList.tsx
similarity index 91%
rename from src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/rulesList.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataScrubbing/rulesList.tsx
index 08a1e806b3..8c2ca2c915 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/rulesList.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/rulesList.tsx
@@ -8,11 +8,11 @@ import TextOverflow from 'app/components/textOverflow';
 import {IconDelete, IconEdit} from 'app/icons';
 import Button from 'app/components/button';
 
-import DataPrivacyRulesForm from './dataPrivacyRulesForm/dataPrivacyRulesForm';
-import {getRuleTypeLabel, getMethodTypeLabel} from './dataPrivacyRulesForm/utils';
+import Form from './form/form';
+import {getRuleTypeLabel, getMethodTypeLabel} from './form/utils';
 import {RuleType} from './types';
 
-type Rule = React.ComponentProps<typeof DataPrivacyRulesForm>['rule'];
+type Rule = React.ComponentProps<typeof Form>['rule'];
 type Props = {
   rules: Array<Rule>;
   onShowEditRuleModal?: (id: Rule['id']) => () => void;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/types.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/types.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/types.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataScrubbing/types.tsx
diff --git a/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx b/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx
index 99bc6f3e80..18a73b83dc 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx
@@ -11,7 +11,7 @@ import {addErrorMessage} from 'app/actionCreators/indicator';
 import {updateOrganization} from 'app/actionCreators/organizations';
 import organizationSecurityAndPrivacy from 'app/data/forms/organizationSecurityAndPrivacy';
 
-import DataPrivacyRules from '../components/dataPrivacyRules/dataPrivacyRules';
+import DataScrubbing from '../components/dataScrubbing';
 
 type Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {
   organization: Organization;
@@ -64,7 +64,7 @@ class OrganizationSecurityAndPrivacyContent extends AsyncView<Props> {
             disabled={!access.has('org:write')}
           />
         </Form>
-        <DataPrivacyRules
+        <DataScrubbing
           additionalContext={t('These rules can be configured for each project.')}
           endpoint={endpoint}
           relayPiiConfig={relayPiiConfig}
diff --git a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
index 9691397632..ba720053ad 100644
--- a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
@@ -11,7 +11,7 @@ import AsyncView from 'app/views/asyncView';
 import ProjectActions from 'app/actions/projectActions';
 import {Organization, Project} from 'app/types';
 
-import DataPrivacyRules from '../components/dataPrivacyRules/dataPrivacyRules';
+import DataScrubbing from '../components/dataScrubbing';
 
 type Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {
   organization: Organization;
@@ -74,7 +74,7 @@ class ProjectDataPrivacyContent extends AsyncView<Props> {
             ]}
           />
         </Form>
-        <DataPrivacyRules
+        <DataScrubbing
           additionalContext={
             <span>
               {tct(
diff --git a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/source.tsx b/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/source.tsx
index e2e63e393e..93d9a395bb 100644
--- a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/source.tsx
+++ b/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/source.tsx
@@ -2,20 +2,20 @@ import React from 'react';
 
 import {mountWithTheme} from 'sentry-test/enzyme';
 
-import Source from 'app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/source';
+import SourceField from 'app/views/settings/components/dataScrubbing/form/sourceField';
 import {
   binaryOperatorSuggestions,
   unaryOperatorSuggestions,
   defaultSuggestions,
-} from 'app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSourceSuggestions';
+} from 'app/views/settings/components/dataScrubbing/form/sourceFieldSuggestions';
 
 function renderComponent({
   value = '$string',
   onChange = jest.fn(),
   ...props
-}: Partial<Source['props']>) {
+}: Partial<SourceField['props']>) {
   return mountWithTheme(
-    <Source
+    <SourceField
       isRegExMatchesSelected={false}
       suggestions={defaultSuggestions}
       onChange={onChange}
