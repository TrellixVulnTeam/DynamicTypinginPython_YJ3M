commit b214511f6b146b5896ed6d2eac5ccdd99cac2555
Author: k-fish <k-fish@users.noreply.github.com>
Date:   Wed Jun 10 13:42:22 2020 -0700

    fix(discover) Show 'n/a' when user field has no user data (#19266)
    
    * fix(discover) Show 'n/a' when user field has no user data
    
    When there is no user data to display, the `user` field was showing an avatar with a question mark inside. This change makes it so "n\a" is shown instead if user data doesn't exist.
    
    #### Other
    * Remove expects checking that renderer is a function as it should be caught by mount failing

diff --git a/src/sentry/static/sentry/app/utils/discover/fieldRenderers.tsx b/src/sentry/static/sentry/app/utils/discover/fieldRenderers.tsx
index 41321eaad5..f47aa82ccb 100644
--- a/src/sentry/static/sentry/app/utils/discover/fieldRenderers.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/fieldRenderers.tsx
@@ -1,6 +1,7 @@
 import React from 'react';
 import {Location} from 'history';
 import partial from 'lodash/partial';
+import styled from '@emotion/styled';
 
 import {Organization} from 'app/types';
 import {t, tct} from 'app/locale';
@@ -66,6 +67,9 @@ type FieldFormatters = {
 export type FieldTypes = keyof FieldFormatters;
 
 const emptyValue = <span>{t('n/a')}</span>;
+const EmptyValueContainer = styled(Container)`
+  color: ${p => p.theme.gray500};
+`;
 
 /**
  * A mapping of field types to their rendering function.
@@ -246,9 +250,12 @@ const SPECIAL_FIELDS: SpecialFields = {
         ip_address: '',
       };
 
-      const badge = <UserBadge user={userObj} hideEmail avatarSize={16} />;
+      if (data.user) {
+        const badge = <UserBadge user={userObj} hideEmail avatarSize={16} />;
+        return <Container>{badge}</Container>;
+      }
 
-      return <Container>{badge}</Container>;
+      return <EmptyValueContainer>{emptyValue}</EmptyValueContainer>;
     },
   },
   release: {
diff --git a/tests/acceptance/test_organization_events_v2.py b/tests/acceptance/test_organization_events_v2.py
index e6d22012d6..f6c0707fa8 100644
--- a/tests/acceptance/test_organization_events_v2.py
+++ b/tests/acceptance/test_organization_events_v2.py
@@ -178,6 +178,7 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
     def test_all_events_query(self, mock_now):
         mock_now.return_value = before_now().replace(tzinfo=pytz.utc)
         min_ago = iso_format(before_now(minutes=1))
+        two_min_ago = iso_format(before_now(minutes=2))
         self.store_event(
             data={
                 "event_id": "a" * 32,
@@ -189,6 +190,24 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
             assert_no_errors=False,
         )
 
+        self.store_event(
+            data={
+                "event_id": "b" * 32,
+                "message": "this is bad.",
+                "timestamp": two_min_ago,
+                "fingerprint": ["group-2"],
+                "user": {
+                    "id": "123",
+                    "email": "someone@example.com",
+                    "username": "haveibeenpwned",
+                    "ip_address": "8.8.8.8",
+                    "name": "Someone",
+                },
+            },
+            project_id=self.project.id,
+            assert_no_errors=False,
+        )
+
         with self.feature(FEATURE_NAMES):
             self.browser.get(self.result_path + "?" + all_events_query())
             self.wait_until_loaded()
diff --git a/tests/js/spec/utils/discover/fieldRenderer.spec.jsx b/tests/js/spec/utils/discover/fieldRenderer.spec.jsx
index 092acdba64..da5909c061 100644
--- a/tests/js/spec/utils/discover/fieldRenderer.spec.jsx
+++ b/tests/js/spec/utils/discover/fieldRenderer.spec.jsx
@@ -4,13 +4,15 @@ import {initializeOrg} from 'sentry-test/initializeOrg';
 import {getFieldRenderer} from 'app/utils/discover/fieldRenderers';
 
 describe('getFieldRenderer', function() {
-  let location, context, project, organization, data;
+  let location, context, project, organization, data, user, userAlias;
   beforeEach(function() {
     context = initializeOrg({
       project: TestStubs.Project(),
     });
     organization = context.organization;
     project = context.project;
+    user = TestStubs.User();
+    userAlias = user.email || user.username || user.ip || user.id;
 
     location = {
       pathname: '/events',
@@ -25,6 +27,7 @@ describe('getFieldRenderer', function() {
       url: '/example',
       latest_event: 'deadbeef',
       project: project.slug,
+      user: userAlias,
     };
 
     MockApiClient.addMockResponse({
@@ -35,7 +38,6 @@ describe('getFieldRenderer', function() {
 
   it('can render string fields', function() {
     const renderer = getFieldRenderer('url', {url: 'string'});
-    expect(renderer).toBeInstanceOf(Function);
     const wrapper = mount(renderer(data, {location, organization}));
     const text = wrapper.find('Container');
     expect(text.text()).toEqual(data.url);
@@ -43,7 +45,6 @@ describe('getFieldRenderer', function() {
 
   it('can render boolean fields', function() {
     const renderer = getFieldRenderer('boolValue', {boolValue: 'boolean'});
-    expect(renderer).toBeInstanceOf(Function);
     const wrapper = mount(renderer(data, {location, organization}));
     const text = wrapper.find('Container');
     expect(text.text()).toEqual('yes');
@@ -51,7 +52,6 @@ describe('getFieldRenderer', function() {
 
   it('can render integer fields', function() {
     const renderer = getFieldRenderer('numeric', {numeric: 'integer'});
-    expect(renderer).toBeInstanceOf(Function);
     const wrapper = mount(renderer(data, {location, organization}));
 
     const value = wrapper.find('Count');
@@ -71,7 +71,6 @@ describe('getFieldRenderer', function() {
 
   it('can render null date fields', function() {
     const renderer = getFieldRenderer('nope', {nope: 'date'});
-    expect(renderer).toBeInstanceOf(Function);
     const wrapper = mount(renderer(data, {location, organization}));
 
     const value = wrapper.find('StyledDateTime');
@@ -79,9 +78,36 @@ describe('getFieldRenderer', function() {
     expect(wrapper.text()).toEqual('n/a');
   });
 
+  it('can render user fields with aliased user', function() {
+    const renderer = getFieldRenderer('user', {user: 'string'});
+
+    const wrapper = mount(renderer(data, {location, organization}));
+
+    const badge = wrapper.find('UserBadge');
+    expect(badge).toHaveLength(1);
+
+    const value = wrapper.find('StyledNameAndEmail');
+    expect(value).toHaveLength(1);
+    expect(value.text()).toEqual(userAlias);
+  });
+
+  it('can render null user fields', function() {
+    const renderer = getFieldRenderer('user', {user: 'string'});
+
+    delete data.user;
+    const wrapper = mount(renderer(data, {location, organization}));
+
+    const badge = wrapper.find('UserBadge');
+    expect(badge).toHaveLength(0);
+
+    const value = wrapper.find('EmptyValueContainer');
+    expect(value).toHaveLength(1);
+    expect(value.text()).toEqual('n/a');
+  });
+
   it('can render project as an avatar', function() {
     const renderer = getFieldRenderer('project', {project: 'string'});
-    expect(renderer).toBeInstanceOf(Function);
+
     const wrapper = mountWithTheme(
       renderer(data, {location, organization}),
       context.routerContext
