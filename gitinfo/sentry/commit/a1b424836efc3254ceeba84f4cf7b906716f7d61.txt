commit a1b424836efc3254ceeba84f4cf7b906716f7d61
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 12 11:31:53 2016 -0700

    Allow searching issues by release:latest (#4073)

diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 18b682c4ee..582773d7cb 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -89,6 +89,8 @@ class Release(Model):
                     'date_added': date_added,
                 },
             )[0]
+            # TODO(dcramer): upon creating a new release, check if it should be
+            # the new "latest release" for this project
             cache.set(cache_key, release, 3600)
 
         return release
diff --git a/src/sentry/search/base.py b/src/sentry/search/base.py
index 8b9583e6b8..ac930399d1 100644
--- a/src/sentry/search/base.py
+++ b/src/sentry/search/base.py
@@ -9,6 +9,7 @@ sentry.search.base
 from __future__ import absolute_import
 
 ANY = object()
+EMPTY = object()
 
 
 class SearchBackend(object):
diff --git a/src/sentry/search/django/backend.py b/src/sentry/search/django/backend.py
index 6bfbcfbe64..d7a25061ec 100644
--- a/src/sentry/search/django/backend.py
+++ b/src/sentry/search/django/backend.py
@@ -14,7 +14,7 @@ from django.db import router
 from django.db.models import Q
 
 from sentry.api.paginator import DateTimePaginator, Paginator
-from sentry.search.base import ANY, SearchBackend
+from sentry.search.base import ANY, EMPTY, SearchBackend
 from sentry.search.django.constants import (
     SORT_CLAUSES, SQLITE_SORT_CLAUSES, MYSQL_SORT_CLAUSES, MSSQL_SORT_CLAUSES,
     MSSQL_ENGINES, ORACLE_SORT_CLAUSES
@@ -38,12 +38,16 @@ class DjangoSearchBackend(SearchBackend):
         # for each remaining tag, find matches contained in our
         # existing set, pruning it down each iteration
         for k, v in tag_lookups:
-            if v != ANY:
+            if v is EMPTY:
+                return None
+
+            elif v != ANY:
                 base_qs = GroupTagValue.objects.filter(
                     key=k,
                     value=v,
                     project=project,
                 )
+
             else:
                 base_qs = GroupTagValue.objects.filter(
                     key=k,
@@ -58,14 +62,14 @@ class DjangoSearchBackend(SearchBackend):
                 return None
         return matches
 
-    def query(self, project, query=None, status=None, tags=None,
-              bookmarked_by=None, assigned_to=None, first_release=None,
-              sort_by='date', unassigned=None,
-              age_from=None, age_from_inclusive=True,
-              age_to=None, age_to_inclusive=True,
-              date_from=None, date_from_inclusive=True,
-              date_to=None, date_to_inclusive=True,
-              cursor=None, limit=100):
+    def _build_queryset(self, project, query=None, status=None, tags=None,
+                        bookmarked_by=None, assigned_to=None, first_release=None,
+                        sort_by='date', unassigned=None,
+                        age_from=None, age_from_inclusive=True,
+                        age_to=None, age_to_inclusive=True,
+                        date_from=None, date_from_inclusive=True,
+                        date_to=None, date_to_inclusive=True,
+                        cursor=None, limit=None):
         from sentry.models import Event, Group, GroupStatus
 
         engine = get_db_engine('default')
@@ -109,6 +113,8 @@ class DjangoSearchBackend(SearchBackend):
             )
 
         if first_release:
+            if first_release is EMPTY:
+                return queryset.none()
             queryset = queryset.filter(
                 first_release__project=project,
                 first_release__version=first_release,
@@ -116,12 +122,11 @@ class DjangoSearchBackend(SearchBackend):
 
         if tags:
             matches = self._tags_to_filter(project, tags)
-            if matches:
-                queryset = queryset.filter(
-                    id__in=matches,
-                )
-            else:
-                queryset = queryset.none()
+            if not matches:
+                return queryset.none()
+            queryset = queryset.filter(
+                id__in=matches,
+            )
 
         if age_from or age_to:
             params = {}
@@ -185,6 +190,14 @@ class DjangoSearchBackend(SearchBackend):
         queryset = queryset.extra(
             select={'sort_value': score_clause},
         )
+        return queryset
+
+    def query(self, project, **kwargs):
+        queryset = self._build_queryset(project=project, **kwargs)
+
+        sort_by = kwargs.get('sort_by', 'date')
+        limit = kwargs.get('limit', 100)
+        cursor = kwargs.get('cursor')
 
         # HACK: don't sort by the same column twice
         if sort_by == 'date':
diff --git a/src/sentry/search/utils.py b/src/sentry/search/utils.py
index 3d5c205451..bb5c4cbed0 100644
--- a/src/sentry/search/utils.py
+++ b/src/sentry/search/utils.py
@@ -9,8 +9,8 @@ from django.utils import timezone
 from six.moves import reduce
 
 from sentry.constants import STATUS_CHOICES
-from sentry.models import EventUser, User
-from sentry.search.base import ANY
+from sentry.models import EventUser, Release, User
+from sentry.search.base import ANY, EMPTY
 from sentry.utils.auth import find_users
 
 
@@ -18,6 +18,17 @@ class InvalidQuery(Exception):
     pass
 
 
+def parse_release(project, value):
+    # TODO(dcramer): add environment support
+    if value == 'latest':
+        value = Release.objects.extra(select={
+            'sort': 'COALESCE(date_released, date_added)',
+        }).order_by('-sort').values_list('version', flat=True).first()
+        if value is None:
+            return EMPTY
+    return value
+
+
 def get_user_tag(project, key, value):
     # TODO(dcramer): do something with case of multiple matches
     try:
@@ -223,9 +234,9 @@ def parse_query(project, query, user):
                         # an invalid user is entered
                         results['bookmarked_by'] = User(id=0)
             elif key == 'first-release':
-                results['first_release'] = value
+                results['first_release'] = parse_release(project, value)
             elif key == 'release':
-                results['tags']['sentry:release'] = value
+                results['tags']['sentry:release'] = parse_release(project, value)
             elif key == 'user':
                 if ':' in value:
                     comp, value = value.split(':', 1)
diff --git a/tests/sentry/search/test_utils.py b/tests/sentry/search/test_utils.py
index 02f586597f..4edfa67976 100644
--- a/tests/sentry/search/test_utils.py
+++ b/tests/sentry/search/test_utils.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from datetime import datetime, timedelta
 from django.utils import timezone
 
-from sentry.models import EventUser, GroupStatus
+from sentry.models import EventUser, GroupStatus, Release
 from sentry.testutils import TestCase
 from sentry.search.base import ANY
 from sentry.search.utils import parse_query
@@ -77,10 +77,30 @@ class ParseQueryTest(TestCase):
         result = self.parse_query('first-release:bar')
         assert result == {'first_release': 'bar', 'tags': {}, 'query': ''}
 
+    def test_first_release_latest(self):
+        old = Release.objects.create(project=self.project, version='a')
+        new = Release.objects.create(
+            project=self.project, version='b',
+            date_released=old.date_added + timedelta(minutes=1),
+        )
+
+        result = self.parse_query('first-release:latest')
+        assert result == {'tags': {}, 'first_release': new.version, 'query': ''}
+
     def test_release(self):
         result = self.parse_query('release:bar')
         assert result == {'tags': {'sentry:release': 'bar'}, 'query': ''}
 
+    def test_release_latest(self):
+        old = Release.objects.create(project=self.project, version='a')
+        new = Release.objects.create(
+            project=self.project, version='b',
+            date_released=old.date_added + timedelta(minutes=1),
+        )
+
+        result = self.parse_query('release:latest')
+        assert result == {'tags': {'sentry:release': new.version}, 'query': ''}
+
     def test_padded_spacing(self):
         result = self.parse_query('release:bar  foo   bar')
         assert result == {'tags': {'sentry:release': 'bar'}, 'query': 'foo bar'}
