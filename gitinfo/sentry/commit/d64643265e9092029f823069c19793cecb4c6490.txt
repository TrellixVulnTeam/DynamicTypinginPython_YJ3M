commit d64643265e9092029f823069c19793cecb4c6490
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Jul 2 10:53:04 2018 -0700

    fea(discover): Improve aggregations UI
    
    Improve autocompletion and other things

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.jsx
new file mode 100644
index 0000000000..da7be1a6e6
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.jsx
@@ -0,0 +1,138 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import {Box} from 'grid-emotion';
+import SelectControl from 'app/components/forms/selectControl';
+
+import {getInternal, getExternal} from './utils';
+import {TOPK_COUNTS} from '../data';
+
+export default class Aggregation extends React.Component {
+  static propTypes = {
+    value: PropTypes.array,
+    onChange: PropTypes.func,
+    columns: PropTypes.array,
+  };
+
+  constructor(props) {
+    super(props);
+    this.state = {
+      selectedFunction: null,
+    };
+  }
+
+  getOptions() {
+    const currentValue = getInternal(this.props.value);
+    return [{label: currentValue, value: currentValue}];
+  }
+
+  filterOptions = (options, input, value) => {
+    input = input || this.state.selectedFunction || '';
+
+    let optionList = [
+      {value: 'count', label: 'count'},
+      {value: 'uniq', label: 'uniq(...)'},
+      {value: 'topK', label: 'topK(...)'},
+    ];
+
+    if (input.startsWith('uniq')) {
+      optionList = this.props.columns.map(({name}) => ({
+        value: `uniq(${name})`,
+        label: `uniq(${name})`,
+      }));
+    }
+
+    if (input.startsWith('topK')) {
+      optionList = TOPK_COUNTS.map(num => ({
+        value: `topK(${num})`,
+        label: `topK(${num})(...)`,
+      }));
+    }
+
+    const topKValueMatch = input.match(/^topK\((\d+)\)/);
+
+    if (topKValueMatch) {
+      const count = topKValueMatch[1];
+
+      optionList = this.props.columns.map(({name}) => ({
+        value: `topK(${count})(${name})`,
+        label: `topK(${count})(${name})`,
+      }));
+    }
+
+    return optionList.filter(({label}) => label.includes(input));
+  };
+
+  focus() {
+    this.select.focus();
+  }
+
+  handleChange = option => {
+    const topKValues = new Set([...TOPK_COUNTS.map(num => `topK(${num})`)]);
+
+    if (option.value === 'uniq' || option.value === 'topK') {
+      this.setState({selectedFunction: option.value}, this.focus);
+    } else if (topKValues.has(option.value)) {
+      this.setState(
+        {
+          selectedFunction: option.value,
+        },
+        this.focus
+      );
+    } else {
+      this.setState({selectedFunction: null}, () => {
+        this.props.onChange(getExternal(option.value));
+      });
+    }
+  };
+
+  handleClose = () => {
+    this.setState({selectedFunction: null});
+  };
+
+  inputRenderer = props => {
+    const val = `${this.state.selectedFunction || ''}`.trim();
+
+    return (
+      <input
+        type="text"
+        {...props}
+        value={props.value || val}
+        style={{width: '100%', border: 0}}
+      />
+    );
+  };
+
+  valueRenderer = option => {
+    const hideValue = this.state.selectedFunction;
+    return hideValue ? '' : option.value;
+  };
+
+  handleInputChange = value => {
+    return value;
+  };
+
+  render() {
+    const value = getInternal(this.props.value);
+    return (
+      <Box w={1}>
+        <SelectControl
+          forwardedRef={ref => (this.select = ref)}
+          value={value}
+          options={this.getOptions()}
+          filterOptions={this.filterOptions}
+          onChange={this.handleChange}
+          closeOnSelect={true}
+          openOnFocus={true}
+          autoBlur={true}
+          clearable={false}
+          backspaceRemoves={false}
+          deleteRemoves={false}
+          onClose={this.handleClose}
+          inputRenderer={this.inputRenderer}
+          valueRenderer={this.valueRenderer}
+          onInputChange={this.handleInputChange}
+        />
+      </Box>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/index.jsx
index 6a00f122f2..ba57098033 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/index.jsx
@@ -4,106 +4,10 @@ import styled from 'react-emotion';
 import {Flex, Box} from 'grid-emotion';
 
 import Link from 'app/components/link';
-import SelectControl from 'app/components/forms/selectControl';
 import InlineSvg from 'app/components/inlineSvg';
 import {t} from 'app/locale';
 
-import {getInternal, getExternal, getAggregateOptions} from './utils';
-import {TOPK_COUNTS} from '../data';
-
-class Aggregation extends React.Component {
-  static propTypes = {
-    value: PropTypes.array,
-    onChange: PropTypes.func,
-    columns: PropTypes.array,
-  };
-
-  constructor(props) {
-    super(props);
-    this.state = {
-      value: getInternal(props.value),
-      displayedOptions: null,
-      options: getAggregateOptions(props.columns),
-    };
-  }
-
-  componentWillReceiveProps(nextProps) {
-    this.setState({
-      value: getInternal(nextProps.value),
-    });
-  }
-
-  getOptions() {
-    const {options} = this.state;
-    return [options.topLevel[0], ...options.uniq, ...options.topKValues];
-  }
-
-  filterOptions = (options, input, value) => {
-    let optionList = this.state.options.topLevel;
-
-    if (input.startsWith('uniq') || this.state.displayedOptions === 'uniq') {
-      optionList = this.state.options.uniq;
-    }
-
-    if (input.match(/^topK_\d+/) || this.state.displayedOptions === 'topKValue') {
-      optionList = this.state.options.topKValues;
-    }
-
-    if (input.startsWith('topK') || this.state.displayedOptions === 'topK') {
-      optionList = this.state.options.topKCounts;
-    }
-
-    return optionList.filter(({label}) => label.includes(input));
-  };
-
-  focus() {
-    this.select.focus();
-  }
-
-  handleChange = option => {
-    const topKValues = new Set([...TOPK_COUNTS.map(num => `topK_${num}`)]);
-
-    if (option.value === 'uniq' || option.value === 'topK') {
-      this.setState({displayedOptions: option.value}, this.focus);
-    } else if (topKValues.has(option.value)) {
-      this.setState(
-        {
-          displayedOptions: 'topKValue',
-        },
-        this.focus
-      );
-    } else {
-      this.setState({value: option.value, displayedOptions: null}, () => {
-        this.props.onChange(getExternal(option.value));
-      });
-    }
-  };
-
-  handleClose = () => {
-    this.setState({displayedOptions: null});
-  };
-
-  render() {
-    return (
-      <Box w={1}>
-        <SelectControl
-          forwardedRef={ref => (this.select = ref)}
-          value={this.state.value}
-          options={this.getOptions()}
-          filterOptions={this.filterOptions}
-          onChange={this.handleChange}
-          closeOnSelect={true}
-          openOnFocus={true}
-          autoBlur={true}
-          clearable={false}
-          backspaceRemoves={false}
-          deleteRemoves={false}
-          onClose={this.handleClose}
-        />
-      </Box>
-    );
-  }
-}
+import Aggregation from './aggregation';
 
 export default class Aggregations extends React.Component {
   static propTypes = {
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx
index 42118cdd20..6daa1f2f08 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx
@@ -1,48 +1,9 @@
-import {TOPK_COUNTS} from '../data';
-
-/*
-* Returns options for aggregation field dropdown
-*/
-
-export function getAggregateOptions(columns) {
-  const topLevel = [
-    {value: 'count', label: 'count'},
-    {value: 'uniq', label: 'uniq(...)'},
-    {value: 'topK', label: 'topK(...)'},
-  ];
-
-  const uniq = columns.map(({name}) => ({
-    value: `uniq_${name}`,
-    label: `uniq(${name})`,
-  }));
-
-  const topKCounts = TOPK_COUNTS.map(num => ({
-    value: `topK_${num}`,
-    label: `topK(${num})(...)`,
-  }));
-
-  const topKValues = TOPK_COUNTS.reduce((acc, num) => {
-    return [
-      ...acc,
-      ...columns.map(({name}) => ({
-        value: `topK_${num}_${name}`,
-        label: `topK(${num})(${name})`,
-      })),
-    ];
-  }, []);
-
-  return {
-    topLevel,
-    uniq,
-    topKCounts,
-    topKValues,
-  };
-}
-
-/*
-* Converts from external representation (array) to internal format (string)
-* for dropdown.
-*/
+/**
+* Converts aggregation from external Snuba format to internal format for dropdown
+*
+* @param {Array} external Aggregation in external Snuba format
+* @return {String} Aggregation in internal format
+**/
 export function getInternal(external) {
   const [func, col] = external;
 
@@ -55,35 +16,43 @@ export function getInternal(external) {
   }
 
   if (func === 'uniq') {
-    return `uniq_${col}`;
+    return `uniq(${col})`;
   }
 
   if (func.startsWith('topK')) {
     const count = func.match(/topK\((\d+)\)/)[1];
-    return `topK_${count}_${col}`;
+    return `topK(${count})(${col})`;
   }
 
   return func;
 }
 
-/*
-* Converts from external representation (string value from dropdown) to external format (array)
+/**
+* Converts aggregation internal string format to external Snuba representation
+*
+* @param {String} internal Aggregation in internal format
+* @return {Array} Aggregation in external Snuba format
 */
 export function getExternal(internal) {
-  const uniqRegex = /^uniq_(.+)$/;
-  const topKRegex = /^topK_(\d+)_(.+)$/;
+  const uniqRegex = /^uniq\((.+)\)$/;
+  const topKRegex = /^topK\((\d+)\)\((.+)\)$/;
 
   if (internal === 'count') {
     return ['count()', null, 'count'];
   }
 
   if (internal.match(uniqRegex)) {
-    return ['uniq', internal.match(uniqRegex)[1], internal];
+    const column = internal.match(uniqRegex)[1];
+    return ['uniq', column, `uniq_${column}`];
   }
 
   const topKMatch = internal.match(topKRegex);
   if (topKMatch) {
-    return [`topK(${parseInt(topKMatch[1], 10)})`, topKMatch[2], internal];
+    return [
+      `topK(${parseInt(topKMatch[1], 10)})`,
+      topKMatch[2],
+      `topK_${topKMatch[1]}_${topKMatch[2]}`,
+    ];
   }
 
   return internal;
diff --git a/tests/js/spec/views/organizationDiscover/aggregations.spec.jsx b/tests/js/spec/views/organizationDiscover/aggregations.spec.jsx
index cc986435dd..2ace4485a5 100644
--- a/tests/js/spec/views/organizationDiscover/aggregations.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/aggregations.spec.jsx
@@ -9,11 +9,11 @@ const aggregationList = [
     external: ['count()', null, 'count'],
   },
   {
-    internal: 'uniq_message',
+    internal: 'uniq(message)',
     external: ['uniq', 'message', 'uniq_message'],
   },
   {
-    internal: 'topK_10_message',
+    internal: 'topK(10)(message)',
     external: ['topK(10)', 'message', 'topK_10_message'],
   },
 ];
