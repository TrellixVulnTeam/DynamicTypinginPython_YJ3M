commit c271afb9c47c4a1ec2ec8416e02b74e94bfbf004
Author: Jess MacQueen <jess@getsentry.com>
Date:   Thu Nov 30 16:21:28 2017 -0800

    feat(signals): Add event_discarded signal

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 7a1dfd1d39..ee94f39530 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -33,7 +33,7 @@ from sentry.models import (
     UserReport
 )
 from sentry.plugins import plugins
-from sentry.signals import first_event_received, regression_signal
+from sentry.signals import first_event_received, regression_signal, event_discarded
 from sentry.tasks.merge import merge_group
 from sentry.tasks.post_process import post_process_group
 from sentry.utils import metrics
@@ -600,9 +600,16 @@ class EventManager(object):
         if release:
             group_kwargs['first_release'] = release
 
-        group, is_new, is_regression, is_sample = self._save_aggregate(
-            event=event, hashes=hashes, release=release, **group_kwargs
-        )
+        try:
+            group, is_new, is_regression, is_sample = self._save_aggregate(
+                event=event, hashes=hashes, release=release, **group_kwargs
+            )
+        except HashDiscarded:
+            event_discarded.send_robust(
+                project=project,
+                sender=EventManager,
+            )
+            raise
 
         event.group = group
         # store a reference to the group id to guarantee validation of isolation
diff --git a/src/sentry/signals.py b/src/sentry/signals.py
index 4494446b4b..ae436f7282 100644
--- a/src/sentry/signals.py
+++ b/src/sentry/signals.py
@@ -32,6 +32,7 @@ class BetterSignal(Signal):
 regression_signal = BetterSignal(providing_args=["instance"])
 buffer_incr_complete = BetterSignal(providing_args=["model", "columns", "extra", "result"])
 event_accepted = BetterSignal(providing_args=["ip", "data", "project"])
+event_discarded = BetterSignal(providing_args=["project"])
 event_dropped = BetterSignal(providing_args=["ip", "data", "project", "reason_code"])
 event_filtered = BetterSignal(providing_args=["ip", "data", "project"])
 event_received = BetterSignal(providing_args=["ip", "project"])
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index fc16818b98..0463d241c0 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -3,6 +3,7 @@
 from __future__ import absolute_import, print_function
 
 import logging
+import mock
 import pytest
 
 from datetime import timedelta
@@ -21,7 +22,8 @@ from sentry.models import (
     Activity, Environment, Event, Group, GroupHash, GroupRelease, GroupResolution, GroupStatus, GroupTombstone,
     EventMapping, Release
 )
-from sentry.testutils import TestCase, TransactionTestCase
+from sentry.signals import event_discarded
+from sentry.testutils import assert_mock_called_once_with_partial, TestCase, TransactionTestCase
 
 
 class EventManagerTest(TransactionTestCase):
@@ -927,7 +929,7 @@ class EventManagerTest(TransactionTestCase):
             'formatted': 'world hello',
         }
 
-    def test_trows_when_matches_discarded_hash(self):
+    def test_throws_when_matches_discarded_hash(self):
         manager = EventManager(
             self.make_event(
                 message='foo',
@@ -962,10 +964,20 @@ class EventManagerTest(TransactionTestCase):
             )
         )
 
+        mock_event_discarded = mock.Mock()
+        event_discarded.connect(mock_event_discarded)
+
         with self.tasks():
             with self.assertRaises(HashDiscarded):
                 event = manager.save(1)
 
+        assert_mock_called_once_with_partial(
+            mock_event_discarded,
+            project=group.project,
+            sender=EventManager,
+            signal=event_discarded,
+        )
+
 
 class GetHashesFromEventTest(TestCase):
     @patch('sentry.interfaces.stacktrace.Stacktrace.compute_hashes')
