commit 07fdfd6e25719d7f653c6d3d7ca590f2b01abeb7
Author: Matej Minar <matej.minar@sentry.io>
Date:   Thu Mar 12 10:52:08 2020 +0100

    feat(ui): Added releasesV2 detail page (wip) (#17434)
    
    * feat(ui): Added releasesV2 detail page (wip)
    
    * feat(ui): Added crash free users timeline
    
    * feat(ui): Added non-simplified issue list
    
    * feat(ui): Added session duration chart mock
    
    * feat(ui): Added link to release url
    
    * feat(ui): Added ability to delete release
    
    * feat(ui): ReleaseHeader connected to API
    
    * feat(ui): ProjectReleaseDetails connected to API
    
    * feat(ui): CommitAuthorBreakdown connected to API
    
    * feat(ui): Open in Discover button
    
    * feat(ui): Extracted sidebar widget heading and wrapper into styles
    
    * eslint fixes
    
    * ref(ui): Added comments, improved readability
    
    * fix(ui): Fixed lint errors
    
    * ref(ui): Updated getEndpoints type
    
    * ref(ui): Changed breadcrumb icon size, named type
    
    * feat(ui): Issue stream connected to API
    
    * feat(ui): Removed errors for now

diff --git a/src/sentry/static/sentry/app/components/stream/group.jsx b/src/sentry/static/sentry/app/components/stream/group.jsx
index 93cb862256..78e4217213 100644
--- a/src/sentry/static/sentry/app/components/stream/group.jsx
+++ b/src/sentry/static/sentry/app/components/stream/group.jsx
@@ -1,4 +1,5 @@
 import $ from 'jquery';
+// eslint-disable-next-line no-restricted-imports
 import {Flex, Box} from 'reflexbox';
 import PropTypes from 'prop-types';
 import React from 'react';
@@ -29,15 +30,17 @@ const StreamGroup = createReactClass({
     query: PropTypes.string,
     hasGuideAnchor: PropTypes.bool,
     memberList: PropTypes.array,
+    withChart: PropTypes.bool,
   },
 
   mixins: [Reflux.listenTo(GroupStore, 'onGroupChange')],
 
   getDefaultProps() {
     return {
-      canSelect: true,
       id: '',
       statsPeriod: '24h',
+      canSelect: true,
+      withChart: true,
     };
   },
 
@@ -92,7 +95,14 @@ const StreamGroup = createReactClass({
 
   render() {
     const {data} = this.state;
-    const {query, hasGuideAnchor, canSelect, memberList} = this.props;
+    const {
+      query,
+      hasGuideAnchor,
+      canSelect,
+      memberList,
+      withChart,
+      statsPeriod,
+    } = this.props;
 
     return (
       <Group data-test-id="group" onClick={this.toggleSelect}>
@@ -111,9 +121,11 @@ const StreamGroup = createReactClass({
           <EventOrGroupExtraDetails {...data} />
         </GroupSummary>
         {hasGuideAnchor && <GuideAnchor target="issue_stream" />}
-        <Box width={160} mx={2} className="hidden-xs hidden-sm">
-          <GroupChart id={data.id} statsPeriod={this.props.statsPeriod} data={data} />
-        </Box>
+        {withChart && (
+          <Box width={160} mx={2} className="hidden-xs hidden-sm">
+            <GroupChart id={data.id} statsPeriod={statsPeriod} data={data} />
+          </Box>
+        )}
         <Flex width={[40, 60, 80, 80]} mx={2} justifyContent="flex-end">
           <StyledCount value={data.count} />
         </Flex>
diff --git a/src/sentry/static/sentry/app/components/version.tsx b/src/sentry/static/sentry/app/components/version.tsx
index 08503bbad3..144236570d 100644
--- a/src/sentry/static/sentry/app/components/version.tsx
+++ b/src/sentry/static/sentry/app/components/version.tsx
@@ -50,6 +50,10 @@ type Props = {
    * Ellipsis on overflow
    */
   truncate?: boolean;
+  /**
+   * Use releases v2 (for example when linking to detail page)
+   */
+  v2?: boolean;
   className?: string;
 };
 
@@ -64,6 +68,7 @@ const Version = ({
   truncate,
   className,
   location,
+  v2,
 }: WithRouterProps & Props) => {
   const LinkComponent = preserveGlobalSelection ? GlobalSelectionLink : Link;
   const versionToDisplay = formatVersion(version, withPackage);
@@ -84,9 +89,9 @@ const Version = ({
       return (
         <LinkComponent
           to={{
-            pathname: `/organizations/${organization?.slug}/releases/${encodeURIComponent(
-              version
-            )}/`,
+            pathname: `/organizations/${organization?.slug}/${
+              v2 ? 'releases-v2' : 'releases'
+            }/${encodeURIComponent(version)}/`,
             query: releaseDetailProjectId ? {project: releaseDetailProjectId} : undefined,
           }}
           className={className}
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 93d8379f8f..1523e25f86 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -1531,14 +1531,50 @@ function routes() {
               component={errorHandler(LazyLoad)}
             />
             <Route
-              path=":releaseSlug/"
+              path=":release/"
               componentPromise={() =>
                 import(
                   /* webpackChunkName: "ReleasesV2Detail" */ 'app/views/releasesV2/detail'
                 )
               }
               component={errorHandler(LazyLoad)}
-            />
+            >
+              <IndexRoute
+                componentPromise={() =>
+                  import(
+                    /* webpackChunkName: "ReleasesV2DetailOverview" */ 'app/views/releasesV2/detail/overview'
+                  )
+                }
+                component={errorHandler(LazyLoad)}
+              />
+              <Route
+                path="commits/"
+                componentPromise={() =>
+                  import(
+                    /* webpackChunkName: "ReleasesV2DetailCommits" */ 'app/views/releasesV2/detail/commits'
+                  )
+                }
+                component={errorHandler(LazyLoad)}
+              />
+              <Route
+                path="artifacts/"
+                componentPromise={() =>
+                  import(
+                    /* webpackChunkName: "ReleasesV2DetailArtifacts" */ 'app/views/releasesV2/detail/artifacts'
+                  )
+                }
+                component={errorHandler(LazyLoad)}
+              />
+              <Route
+                path="files-changed/"
+                componentPromise={() =>
+                  import(
+                    /* webpackChunkName: "ReleasesV2DetailFilesChanged" */ 'app/views/releasesV2/detail/filesChanged'
+                  )
+                }
+                component={errorHandler(LazyLoad)}
+              />
+            </Route>
           </Route>
           <Route
             path="/organizations/:orgId/alerts/"
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index fd7d897826..b9ce59b50c 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -125,6 +125,7 @@ export type ProjectRelease = {
   newGroups: number;
   healthData: Health | null;
   projectSlug: string;
+  projectId: number;
 };
 
 export type Health = {
@@ -777,9 +778,16 @@ export type Release = {
   authors: User[];
   owner?: any; // TODO(ts)
   newGroups: number;
-  projects: {slug: string; name: string; healthData?: Health | null}[];
+  projects: ReleaseProject[];
 } & BaseRelease;
 
+type ReleaseProject = {
+  slug: string;
+  name: string;
+  id: number;
+  healthData?: Health | null;
+};
+
 export type BaseRelease = {
   dateReleased: string;
   url: string;
diff --git a/src/sentry/static/sentry/app/utils/formatters.tsx b/src/sentry/static/sentry/app/utils/formatters.tsx
index 3a17d19bf7..de406fceb9 100644
--- a/src/sentry/static/sentry/app/utils/formatters.tsx
+++ b/src/sentry/static/sentry/app/utils/formatters.tsx
@@ -4,7 +4,7 @@ import {Release} from '@sentry/release-parser';
 import {t} from 'app/locale';
 import {CommitAuthor, User} from 'app/types';
 
-export function userDisplayName(user: User | CommitAuthor): string {
+export function userDisplayName(user: User | CommitAuthor, includeEmail = true): string {
   let displayName = String(get(user, 'name', t('Unknown author'))).trim();
 
   if (displayName.length <= 0) {
@@ -13,7 +13,7 @@ export function userDisplayName(user: User | CommitAuthor): string {
 
   const email = String(get(user, 'email', '')).trim();
 
-  if (email.length > 0 && email !== displayName) {
+  if (email.length > 0 && email !== displayName && includeEmail) {
     displayName += ' (' + email + ')';
   }
   return displayName;
diff --git a/src/sentry/static/sentry/app/views/releases/detail/groupList.jsx b/src/sentry/static/sentry/app/views/releases/detail/groupList.jsx
index 7b877a0fdd..d91480d715 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/groupList.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/groupList.jsx
@@ -3,6 +3,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
+import {browserHistory} from 'react-router';
 import qs from 'query-string';
 
 import {Panel, PanelBody} from 'app/components/panels';
@@ -15,6 +16,7 @@ import LoadingIndicator from 'app/components/loadingIndicator';
 import StreamGroup from 'app/components/stream/group';
 import StreamManager from 'app/utils/streamManager';
 import withApi from 'app/utils/withApi';
+import Pagination from 'app/components/pagination';
 
 import GroupListHeader from './groupListHeader';
 
@@ -25,7 +27,9 @@ const GroupList = createReactClass({
     api: PropTypes.object.isRequired,
     query: PropTypes.string.isRequired,
     canSelectGroups: PropTypes.bool,
+    withChart: PropTypes.bool,
     orgId: PropTypes.string.isRequired,
+    endpointPath: PropTypes.string,
   },
 
   contextTypes: {
@@ -37,6 +41,7 @@ const GroupList = createReactClass({
   getDefaultProps() {
     return {
       canSelectGroups: true,
+      withChart: true,
     };
   },
 
@@ -54,12 +59,20 @@ const GroupList = createReactClass({
     this.fetchData();
   },
 
-  shouldComponentUpdate(_nextProps, nextState) {
-    return !isEqual(this.state, nextState);
+  shouldComponentUpdate(nextProps, nextState) {
+    return (
+      !isEqual(this.state, nextState) ||
+      nextProps.endpointPath !== this.props.endpointPath ||
+      nextProps.query !== this.props.query
+    );
   },
 
   componentDidUpdate(prevProps) {
-    if (prevProps.orgId !== this.props.orgId) {
+    if (
+      prevProps.orgId !== this.props.orgId ||
+      prevProps.endpointPath !== this.props.endpointPath ||
+      prevProps.query !== this.props.query
+    ) {
       this.fetchData();
     }
   },
@@ -101,8 +114,8 @@ const GroupList = createReactClass({
   },
 
   getGroupListEndpoint() {
-    const {orgId} = this.props;
-    const path = `/organizations/${orgId}/issues/`;
+    const {orgId, endpointPath} = this.props;
+    const path = endpointPath ?? `/organizations/${orgId}/issues/`;
 
     return `${path}?${qs.stringify(this.getQueryParams())}`;
   },
@@ -118,6 +131,24 @@ const GroupList = createReactClass({
     return queryParams;
   },
 
+  onCursorChange(cursor, path, query, pageDiff) {
+    const queryPageInt = parseInt(query.page, 10);
+    let nextPage = isNaN(queryPageInt) ? pageDiff : queryPageInt + pageDiff;
+
+    // unset cursor and page when we navigate back to the first page
+    // also reset cursor if somehow the previous button is enabled on
+    // first page and user attempts to go backwards
+    if (nextPage <= 0) {
+      cursor = undefined;
+      nextPage = undefined;
+    }
+
+    browserHistory.push({
+      pathname: path,
+      query: {...query, cursor},
+    });
+  },
+
   onGroupChange() {
     const groups = this._streamManager.getAllItems();
 
@@ -129,11 +160,14 @@ const GroupList = createReactClass({
   },
 
   render() {
-    if (this.state.loading) {
+    const {orgId, canSelectGroups, withChart} = this.props;
+    const {loading, error, groups, memberList, pageLinks} = this.state;
+
+    if (loading) {
       return <LoadingIndicator />;
-    } else if (this.state.error) {
+    } else if (error) {
       return <LoadingError onRetry={this.fetchData} />;
-    } else if (this.state.groups.length === 0) {
+    } else if (groups.length === 0) {
       return (
         <Panel>
           <PanelBody>
@@ -145,30 +179,32 @@ const GroupList = createReactClass({
       );
     }
 
-    const {orgId} = this.props;
-
     return (
-      <Panel>
-        <GroupListHeader />
-        <PanelBody>
-          {this.state.groups.map(({id, project}) => {
-            const members =
-              this.state.memberList && this.state.memberList.hasOwnProperty(project.slug)
-                ? this.state.memberList[project.slug]
-                : null;
-
-            return (
-              <StreamGroup
-                key={id}
-                id={id}
-                orgId={orgId}
-                canSelect={this.props.canSelectGroups}
-                memberList={members}
-              />
-            );
-          })}
-        </PanelBody>
-      </Panel>
+      <React.Fragment>
+        <Panel>
+          <GroupListHeader withChart={withChart} />
+          <PanelBody>
+            {groups.map(({id, project}) => {
+              const members =
+                memberList && memberList.hasOwnProperty(project.slug)
+                  ? memberList[project.slug]
+                  : null;
+
+              return (
+                <StreamGroup
+                  key={id}
+                  id={id}
+                  orgId={orgId}
+                  canSelect={canSelectGroups}
+                  withChart={withChart}
+                  memberList={members}
+                />
+              );
+            })}
+          </PanelBody>
+        </Panel>
+        <Pagination pageLinks={pageLinks} onCursor={this.onCursorChange} />
+      </React.Fragment>
     );
   },
 });
diff --git a/src/sentry/static/sentry/app/views/releases/detail/groupListHeader.jsx b/src/sentry/static/sentry/app/views/releases/detail/groupListHeader.tsx
similarity index 75%
rename from src/sentry/static/sentry/app/views/releases/detail/groupListHeader.jsx
rename to src/sentry/static/sentry/app/views/releases/detail/groupListHeader.tsx
index 3c4f8bd6db..1cd911ea5a 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/groupListHeader.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/groupListHeader.tsx
@@ -4,14 +4,20 @@ import {Flex, Box} from 'reflexbox';
 import {t} from 'app/locale';
 import {PanelHeader} from 'app/components/panels';
 
-const GroupListHeader = () => (
+type Props = {
+  withChart: boolean;
+};
+
+const GroupListHeader = ({withChart = true}: Props) => (
   <PanelHeader disablePadding>
     <Box width={[8 / 12, 8 / 12, 6 / 12]} mx={2} flex="1" className="toolbar-header">
       {t('Issue')}
     </Box>
-    <Box width={160} mx={2} className="toolbar-header hidden-xs hidden-sm">
-      {t('Last 24 hours')}
-    </Box>
+    {withChart && (
+      <Box width={160} mx={2} className="toolbar-header hidden-xs hidden-sm">
+        {t('Last 24 hours')}
+      </Box>
+    )}
     <Flex width={80} mx={2} justifyContent="flex-end" className="toolbar-header">
       {t('events')}
     </Flex>
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/artifacts/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/artifacts/index.tsx
new file mode 100644
index 0000000000..eea2c36c0c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/artifacts/index.tsx
@@ -0,0 +1,8 @@
+import React from 'react';
+
+type Props = {};
+
+// TODO(releasesV2): finish this component
+const ReleaseArtifacts = ({}: Props) => <div>ReleaseArtifacts</div>;
+
+export default ReleaseArtifacts;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/breadcrumbs.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/breadcrumbs.tsx
new file mode 100644
index 0000000000..5041b3f98e
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/breadcrumbs.tsx
@@ -0,0 +1,54 @@
+// TODO(matej): this could be moved to components to be reused in the future (also discover has something similar)
+import React from 'react';
+import styled from '@emotion/styled';
+
+import Link from 'app/components/links/link';
+import {IconChevron} from 'app/icons';
+import space from 'app/styles/space';
+
+type Crumb = {
+  label: React.ReactNode;
+  to?: string;
+};
+
+type Props = {
+  crumbs: Crumb[];
+};
+
+const Breadcrumbs = ({crumbs}: Props) => (
+  <BreadcrumbList>
+    {crumbs.map((crumb, index) => (
+      <React.Fragment key={crumb.to}>
+        <BreadcrumbItem to={crumb.to}>{crumb.label}</BreadcrumbItem>
+        {index < crumbs.length - 1 && <StyledIcon size="xs" direction="right" />}
+      </React.Fragment>
+    ))}
+  </BreadcrumbList>
+);
+
+export default Breadcrumbs;
+
+const BreadcrumbList = styled('span')`
+  display: flex;
+  align-items: center;
+  height: 40px;
+`;
+
+const BreadcrumbItem = styled(Link)`
+  color: ${p => p.theme.gray2};
+
+  &:last-child {
+    color: ${p => p.theme.gray4};
+    pointer-events: none;
+  }
+
+  &:hover,
+  &:active {
+    color: ${p => p.theme.gray3};
+  }
+`;
+
+const StyledIcon = styled(IconChevron)`
+  color: ${p => p.theme.gray2};
+  margin: 0 ${space(1)} ${space(0.25)} ${space(1)};
+`;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/commits/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/commits/index.tsx
new file mode 100644
index 0000000000..8e6aa6f2c1
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/commits/index.tsx
@@ -0,0 +1,8 @@
+import React from 'react';
+
+type Props = {};
+
+// TODO(releasesV2): finish this component
+const ReleaseCommits = ({}: Props) => <div>ReleaseCommits</div>;
+
+export default ReleaseCommits;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/filesChanged/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/filesChanged/index.tsx
new file mode 100644
index 0000000000..63a3b0d405
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/filesChanged/index.tsx
@@ -0,0 +1,8 @@
+import React from 'react';
+
+type Props = {};
+
+// TODO(releasesV2): finish this component
+const FilesChanged = ({}: Props) => <div>FilesChanged</div>;
+
+export default FilesChanged;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/index.tsx
index d420d94519..82472b0a67 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/index.tsx
@@ -2,18 +2,24 @@ import React from 'react';
 import * as ReactRouter from 'react-router';
 import {Params} from 'react-router/lib/Router';
 import {Location} from 'history';
+import pick from 'lodash/pick';
+import styled from '@emotion/styled';
 
 import {t} from 'app/locale';
-import {Organization} from 'app/types';
+import {Organization, Release, Deploy} from 'app/types';
 import AsyncView from 'app/views/asyncView';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import NoProjectMessage from 'app/components/noProjectMessage';
-import {PageContent, PageHeader} from 'app/styles/organization';
-import PageHeading from 'app/components/pageHeading';
+import {PageContent} from 'app/styles/organization';
+import Alert from 'app/components/alert';
 import withOrganization from 'app/utils/withOrganization';
 import routeTitleGen from 'app/utils/routeTitle';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import EmptyStateWarning from 'app/components/emptyStateWarning';
+import {URL_PARAM} from 'app/constants/globalSelectionHeader';
+import {formatVersion} from 'app/utils/formatters';
+
+import ReleaseHeader from './releaseHeader';
+
+const ReleaseContext = React.createContext<Release | undefined>(undefined);
 
 type Props = {
   organization: Organization;
@@ -22,11 +28,20 @@ type Props = {
   params: Params;
 } & AsyncView['props'];
 
-type State = {} & AsyncView['state'];
+type State = {
+  release: Release;
+  deploys: Deploy[];
+} & AsyncView['state'];
 
+// TODO(releasesv2): Handle project selection
 class ReleasesV2Detail extends AsyncView<Props, State> {
   getTitle() {
-    return routeTitleGen(t('Releases v2 Detail'), this.props.organization.slug, false);
+    const {params, organization} = this.props;
+    return routeTitleGen(
+      t('Release %s', formatVersion(params.release)),
+      organization.slug,
+      false
+    );
   }
 
   getDefaultState() {
@@ -35,60 +50,74 @@ class ReleasesV2Detail extends AsyncView<Props, State> {
     };
   }
 
-  getEndpoints(): [string, string][] {
-    return [['dummy', '/organizations/sentry/projects/']];
-  }
+  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {
+    const {organization, location, params} = this.props;
 
-  renderLoading() {
-    return this.renderBody();
-  }
-
-  renderEmpty() {
-    return <EmptyStateWarning small>{t('There are no data.')}</EmptyStateWarning>;
-  }
+    const query = {
+      ...pick(location.query, [...Object.values(URL_PARAM)]),
+      health: 1,
+    };
 
-  renderInnerBody() {
-    const {loading, dummy} = this.state;
+    const basePath = `/organizations/${organization.slug}/releases/${encodeURIComponent(
+      params.release
+    )}/`;
 
-    if (loading) {
-      return <LoadingIndicator />;
-    }
+    return [
+      ['release', basePath, {query}],
+      ['deploys', `${basePath}deploys/`],
+    ];
+  }
 
-    if (!dummy.length) {
-      return this.renderEmpty();
+  renderError(error: Error, disableLog = false, disableReport = false) {
+    const {errors} = this.state;
+    const has404Errors = Object.values(errors).find(e => e?.status === 404);
+
+    if (has404Errors) {
+      return (
+        <PageContent>
+          <Alert type="error" icon="icon-circle-exclamation">
+            {t('This release may not be in your selected project')}
+          </Alert>
+        </PageContent>
+      );
     }
 
-    return (
-      <p>
-        Results: Lorem, ipsum dolor sit amet consectetur adipisicing elit. Illo dicta
-        pariatur incidunt sit vitae laborum, suscipit ducimus atque dolor nostrum rem
-        minima reiciendis nihil omnis eius, consequuntur eos nobis molestias!
-      </p>
-    );
+    return super.renderError(error, disableLog, disableReport);
   }
 
   renderBody() {
-    const {organization} = this.props;
+    const {organization, location} = this.props;
+    const {release, deploys} = this.state;
 
     return (
-      <React.Fragment>
-        <GlobalSelectionHeader organization={organization} />
-
-        <NoProjectMessage organization={organization}>
-          <PageContent>
-            <PageHeader>
-              <PageHeading withMargins>
-                {t('Releases v2 Detail')} {this.props.params.releaseSlug}
-              </PageHeading>
-            </PageHeader>
-
-            {this.renderInnerBody()}
-          </PageContent>
-        </NoProjectMessage>
-      </React.Fragment>
+      <NoProjectMessage organization={organization}>
+        <StyledPageContent>
+          <ReleaseHeader
+            location={location}
+            orgId={organization.slug}
+            release={release}
+            deploys={deploys}
+          />
+
+          <ReleaseContext.Provider value={release}>
+            {this.props.children}
+          </ReleaseContext.Provider>
+        </StyledPageContent>
+      </NoProjectMessage>
     );
   }
 }
 
-export default withOrganization(ReleasesV2Detail);
-export {ReleasesV2Detail};
+const ReleasesV2DetailContainer = (props: Props) => (
+  <React.Fragment>
+    <GlobalSelectionHeader organization={props.organization} />
+    <ReleasesV2Detail {...props} />
+  </React.Fragment>
+);
+
+const StyledPageContent = styled(PageContent)`
+  padding: 0;
+`;
+
+export {ReleasesV2DetailContainer, ReleaseContext};
+export default withOrganization(ReleasesV2DetailContainer);
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/commitAuthorBreakdown.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/commitAuthorBreakdown.tsx
new file mode 100644
index 0000000000..727903a5c4
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/commitAuthorBreakdown.tsx
@@ -0,0 +1,147 @@
+import React from 'react';
+import styled from '@emotion/styled';
+import round from 'lodash/round';
+
+import {t, tn} from 'app/locale';
+import space from 'app/styles/space';
+import UserAvatar from 'app/components/avatar/userAvatar';
+import overflowEllipsis from 'app/styles/overflowEllipsis';
+import AsyncComponent from 'app/components/asyncComponent';
+import {percent} from 'app/utils';
+import {userDisplayName} from 'app/utils/formatters';
+import {Commit, User} from 'app/types';
+
+import {SectionHeading, Wrapper} from './styles';
+
+type GroupedAuthorCommits = {
+  [key: string]: {author: User | undefined; commitCount: number};
+};
+
+type Props = {
+  projectId: string;
+  orgId: string;
+  version: string;
+  commitCount: number;
+} & AsyncComponent['props'];
+
+type State = {
+  commits: Commit[];
+} & AsyncComponent['state'];
+
+class CommitAuthorBreakdown extends AsyncComponent<Props, State> {
+  getDefaultState() {
+    return {
+      ...super.getDefaultState(),
+    };
+  }
+
+  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {
+    const {projectId, orgId, version} = this.props;
+
+    const commitsEndpoint = `/projects/${orgId}/${encodeURIComponent(
+      projectId
+    )}/releases/${encodeURIComponent(version)}/commits/`;
+
+    return [['commits', commitsEndpoint]];
+  }
+
+  getDisplayPercent(authorCommitCount: number): string {
+    const {commitCount} = this.props;
+
+    const calculatedPercent = round(percent(authorCommitCount, commitCount), 0);
+
+    return `${calculatedPercent < 1 ? '<1' : calculatedPercent}%`;
+  }
+
+  renderBody() {
+    // group commits by author
+    const groupedAuthorCommits = this.state.commits?.reduce(
+      (authorCommitsAccumulator, commit) => {
+        const email = commit.author?.email ?? 'unknown';
+
+        if (authorCommitsAccumulator.hasOwnProperty(email)) {
+          authorCommitsAccumulator[email].commitCount += 1;
+        } else {
+          authorCommitsAccumulator[email] = {
+            commitCount: 1,
+            author: commit.author,
+          };
+        }
+
+        return authorCommitsAccumulator;
+      },
+      {} as GroupedAuthorCommits
+    );
+
+    // sort authors by number of commits
+    const sortedAuthorsByNumberOfCommits = Object.values(groupedAuthorCommits).sort(
+      (a, b) => b.commitCount - a.commitCount
+    );
+
+    if (!sortedAuthorsByNumberOfCommits.length) {
+      return null;
+    }
+
+    return (
+      <Wrapper>
+        <SectionHeading>{t('Commit Author Breakdown')}</SectionHeading>
+        {sortedAuthorsByNumberOfCommits.map(({commitCount, author}) => (
+          <AuthorLine key={author?.email}>
+            <Author>
+              <StyledUserAvatar user={author} size={20} hasTooltip />
+              <AuthorName>{userDisplayName(author || {}, false)}</AuthorName>
+            </Author>
+
+            <Stats>
+              <Commits>{tn('%s commit', '%s commits', commitCount)}</Commits>
+              <Percent>{this.getDisplayPercent(commitCount)}</Percent>
+            </Stats>
+          </AuthorLine>
+        ))}
+      </Wrapper>
+    );
+  }
+}
+
+const AuthorLine = styled('div')`
+  display: flex;
+  justify-content: space-between;
+  margin-bottom: ${space(0.5)};
+  font-size: ${p => p.theme.fontSizeSmall};
+`;
+
+const Author = styled('div')`
+  display: flex;
+  flex: 1;
+  align-items: center;
+  overflow: hidden;
+`;
+
+const StyledUserAvatar = styled(UserAvatar)`
+  margin-right: ${space(1)};
+`;
+
+const AuthorName = styled('div')`
+  font-weight: 600;
+  color: ${p => p.theme.gray3};
+  ${overflowEllipsis}
+`;
+
+const Stats = styled('div')`
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  width: 115px;
+`;
+
+const Commits = styled('div')`
+  color: ${p => p.theme.gray2};
+`;
+
+const Percent = styled('div')`
+  min-width: 40px;
+  text-align: right;
+  color: ${p => p.theme.gray4};
+`;
+
+export default CommitAuthorBreakdown;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/healthChart.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/healthChart.tsx
new file mode 100644
index 0000000000..210a9f58db
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/healthChart.tsx
@@ -0,0 +1,113 @@
+import React from 'react';
+import styled from '@emotion/styled';
+import {withRouter} from 'react-router';
+
+import {Panel} from 'app/components/panels';
+import {t} from 'app/locale';
+import space from 'app/styles/space';
+import DropdownButton from 'app/components/dropdownButton';
+import DropdownControl, {DropdownItem} from 'app/components/dropdownControl';
+import {EventsChart} from 'app/views/events/eventsChart';
+import withOrganization from 'app/utils/withOrganization';
+import {Client} from 'app/api';
+
+// VERY ROUGH MOCK, MORE LIKE VISUAL PLACEHOLDER, this will be changed completely
+
+const HealthChart = ({organization, router}: any) => (
+  <Panel>
+    <ChartWrapper>
+      <EventsChart
+        {...{
+          api: new Client(),
+          router,
+          query: '',
+          organization,
+          showLegend: true,
+          yAxis: 'count(id)',
+          projects: [],
+          environments: [],
+          period: '24h',
+          utc: false,
+        }}
+      />
+    </ChartWrapper>
+
+    <ChartControls>
+      <InlineContainer>
+        <SectionHeading key="total-label">{t('Total Active Users')}</SectionHeading>
+        <Value key="total-value">{(1234).toLocaleString()}</Value>
+      </InlineContainer>
+
+      <InlineContainer>
+        <SectionHeading>{t('Y-Axis')}</SectionHeading>
+        <DropdownControl
+          menuWidth="auto"
+          alignRight
+          button={({getActorProps}) => (
+            <StyledDropdownButton {...getActorProps()} size="zero" isOpen={false}>
+              Active User Count
+            </StyledDropdownButton>
+          )}
+        >
+          {[{value: 'activeUserCount', label: t('Active User Count')}].map(
+            (opt, index) => (
+              <DropdownItem
+                key={opt.value}
+                onSelect={() => {}}
+                eventKey={opt.value}
+                isActive={index === 1}
+              >
+                {opt.label}
+              </DropdownItem>
+            )
+          )}
+        </DropdownControl>
+      </InlineContainer>
+    </ChartControls>
+  </Panel>
+);
+
+const InlineContainer = styled('div')`
+  display: flex;
+  flex-direction: row;
+  align-items: center;
+`;
+
+const ChartWrapper = styled('div')`
+  padding: ${space(1)} ${space(3)};
+`;
+
+const ChartControls = styled('div')`
+  display: flex;
+  justify-content: space-between;
+  padding: ${space(1)} ${space(3)};
+  border-top: 1px solid ${p => p.theme.borderLight};
+`;
+
+const SectionHeading = styled('h4')`
+  color: ${p => p.theme.gray3};
+  font-size: ${p => p.theme.fontSizeMedium};
+  margin: ${space(1)} 0;
+  padding-right: ${space(1)};
+  line-height: 1.2;
+`;
+
+const Value = styled('span')`
+  color: ${p => p.theme.gray3};
+  font-size: ${p => p.theme.fontSizeMedium};
+  margin-right: ${space(1)};
+`;
+
+const StyledDropdownButton = styled(DropdownButton)`
+  padding: ${space(1)} ${space(2)};
+  font-weight: normal;
+  color: ${p => p.theme.gray3};
+
+  &:hover,
+  &:focus,
+  &:active {
+    color: ${p => p.theme.gray4};
+  }
+`;
+
+export default withOrganization(withRouter(HealthChart));
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/index.tsx
new file mode 100644
index 0000000000..080b8ec386
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/index.tsx
@@ -0,0 +1,81 @@
+import React from 'react';
+import styled from '@emotion/styled';
+import {Params} from 'react-router/lib/Router';
+import {Location} from 'history';
+
+import withOrganization from 'app/utils/withOrganization';
+import {Organization} from 'app/types';
+import space from 'app/styles/space';
+
+import HealthChart from './healthChart';
+import Issues from './issues';
+import CommitAuthorBreakdown from './commitAuthorBreakdown';
+import ProjectReleaseDetails from './projectReleaseDetails';
+import TotalCrashFreeUsers from './totalCrashFreeUsers';
+import SessionDuration from './sessionDuration';
+import {ReleaseContext} from '../index';
+
+type Props = {
+  organization: Organization;
+  params: Params;
+  location: Location;
+};
+
+const ReleaseOverview = ({organization, params, location}: Props) => {
+  const projectId =
+    typeof location.query.project === 'string' ? location.query.project : undefined;
+
+  if (!projectId) {
+    return null;
+  }
+
+  return (
+    <ReleaseContext.Consumer>
+      {release => {
+        const {commitCount, version} = release!; // if release is undefined, this will not be rendered at all
+        return (
+          <ContentBox>
+            <Main>
+              <HealthChart />
+              <Issues orgId={organization.slug} version={params.release} />
+            </Main>
+            <Sidebar>
+              {commitCount > 0 && (
+                <CommitAuthorBreakdown
+                  version={version}
+                  orgId={organization.slug}
+                  projectId={location.query.project as string}
+                  commitCount={commitCount}
+                />
+              )}
+              <ProjectReleaseDetails release={release!} />
+              <TotalCrashFreeUsers />
+              <SessionDuration />
+            </Sidebar>
+          </ContentBox>
+        );
+      }}
+    </ReleaseContext.Consumer>
+  );
+};
+
+const ContentBox = styled('div')`
+  padding: ${space(4)};
+  flex: 1;
+  background-color: white;
+
+  @media (min-width: ${p => p.theme.breakpoints[1]}) {
+    display: grid;
+    grid-column-gap: ${space(3)};
+    grid-template-columns: minmax(470px, 1fr) minmax(220px, 280px);
+  }
+`;
+
+const Main = styled('div')`
+  grid-column: 1 / 2;
+`;
+const Sidebar = styled('div')`
+  grid-column: 2 / 3;
+`;
+
+export default withOrganization(ReleaseOverview);
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/issues.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/issues.tsx
new file mode 100644
index 0000000000..21fcfc8dea
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/issues.tsx
@@ -0,0 +1,151 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {t} from 'app/locale';
+import DropdownControl, {DropdownItem} from 'app/components/dropdownControl';
+import Button from 'app/components/button';
+import GroupList from 'app/views/releases/detail/groupList';
+import space from 'app/styles/space';
+import {Panel} from 'app/components/panels';
+import EventView from 'app/views/eventsV2/eventView';
+import {formatVersion} from 'app/utils/formatters';
+
+type Props = {
+  orgId: string;
+  version: string;
+};
+
+type State = {
+  issuesType: string;
+};
+
+class Issues extends React.Component<Props, State> {
+  // TODO(releasesV2): we may want to put this in the URL, for now it stays just in state (issues stream is still subject to change)
+  state = {
+    issuesType: 'new',
+  };
+
+  // TODO(releasesV2): figure out the query we want + do we want to pass globalSelectionHeader values?
+  getDiscoverUrl() {
+    const {version, orgId} = this.props;
+
+    const discoverQuery = {
+      id: undefined,
+      version: 2,
+      name: `${t('Release')} ${formatVersion(version)}`,
+      fields: ['title', 'count(id)', 'event.type', 'user', 'last_seen'],
+      query: `release:${version}`,
+
+      projects: [],
+      range: '',
+      start: '',
+      end: '',
+      environment: [''],
+    } as const;
+
+    const discoverView = EventView.fromSavedQuery(discoverQuery);
+    return discoverView.getResultsViewUrlTarget(orgId);
+  }
+
+  getIssuesEndpoint(): {path: string; query: string} {
+    const {version, orgId} = this.props;
+    const {issuesType} = this.state;
+
+    switch (issuesType) {
+      case 'all':
+        return {path: `/organizations/${orgId}/issues/`, query: `release:"${version}"`};
+      case 'resolved':
+        return {
+          path: `/organizations/${orgId}/releases/${version}/resolved/`,
+          query: '',
+        };
+      case 'new':
+      default:
+        return {
+          path: `/organizations/${orgId}/issues/`,
+          query: `first-release:"${version}"`,
+        };
+    }
+  }
+
+  handleIssuesTypeSelection = (issuesType: string) => {
+    this.setState({issuesType});
+  };
+
+  renderFilterLabel(label: string | undefined) {
+    return (
+      <React.Fragment>
+        <LabelText>{t('Filter')}: &nbsp; </LabelText>
+        {label}
+      </React.Fragment>
+    );
+  }
+
+  render() {
+    const {issuesType} = this.state;
+    const {orgId} = this.props;
+    const {path, query} = this.getIssuesEndpoint();
+    const issuesTypes = [
+      {value: 'new', label: t('New Issues')},
+      {value: 'resolved', label: t('Resolved Issues')},
+      {value: 'all', label: t('All Issues')},
+    ];
+
+    return (
+      <React.Fragment>
+        <ControlsWrapper>
+          <DropdownControl
+            label={this.renderFilterLabel(
+              issuesTypes.find(i => i.value === issuesType)?.label
+            )}
+          >
+            {issuesTypes.map(({value, label}) => (
+              <DropdownItem
+                key={value}
+                onSelect={this.handleIssuesTypeSelection}
+                eventKey={value}
+                isActive={value === issuesType}
+              >
+                {label}
+              </DropdownItem>
+            ))}
+          </DropdownControl>
+
+          <Button to={this.getDiscoverUrl()}>{t('Open in Discover')}</Button>
+        </ControlsWrapper>
+
+        <TableWrapper>
+          <GroupList
+            orgId={orgId}
+            endpointPath={path}
+            query={query}
+            canSelectGroups={false}
+            withChart={false}
+          />
+        </TableWrapper>
+      </React.Fragment>
+    );
+  }
+}
+
+const ControlsWrapper = styled('div')`
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  margin-bottom: ${space(1)};
+`;
+
+const TableWrapper = styled('div')`
+  margin-bottom: ${space(3)};
+  ${Panel} {
+    /* smaller space between table and pagination */
+    margin-bottom: -${space(1)};
+  }
+`;
+
+const LabelText = styled('em')`
+  font-style: normal;
+  color: ${p => p.theme.gray2};
+`;
+
+export default Issues;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/projectReleaseDetails.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/projectReleaseDetails.tsx
new file mode 100644
index 0000000000..1d158404e8
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/projectReleaseDetails.tsx
@@ -0,0 +1,80 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {t} from 'app/locale';
+import space from 'app/styles/space';
+import overflowEllipsis from 'app/styles/overflowEllipsis';
+import {Release} from 'app/types';
+import Version from 'app/components/version';
+import TimeSince from 'app/components/timeSince';
+
+import {SectionHeading, Wrapper} from './styles';
+
+type Props = {
+  release: Release;
+};
+
+// TODO(releasesV2): TagValues should probably be links
+const ProjectReleaseDetails = ({release}: Props) => {
+  const {version, dateCreated, firstEvent, lastEvent} = release;
+  return (
+    <Wrapper>
+      <SectionHeading>{t('Project Release Details')}</SectionHeading>
+      <StyledTable>
+        <tbody>
+          <StyledTr>
+            <TagKey>{t('Version')}</TagKey>
+            <TagValue>
+              <Version version={version} anchor={false} />
+            </TagValue>
+          </StyledTr>
+
+          <StyledTr>
+            <TagKey>{t('Created')}</TagKey>
+            <TagValue>
+              <TimeSince date={dateCreated} />
+            </TagValue>
+          </StyledTr>
+
+          <StyledTr>
+            <TagKey>{t('First Event')}</TagKey>
+            <TagValue>{firstEvent ? <TimeSince date={firstEvent} /> : '-'}</TagValue>
+          </StyledTr>
+
+          <StyledTr>
+            <TagKey>{t('Last Event')}</TagKey>
+            <TagValue>{lastEvent ? <TimeSince date={lastEvent} /> : '-'}</TagValue>
+          </StyledTr>
+        </tbody>
+      </StyledTable>
+    </Wrapper>
+  );
+};
+
+const StyledTable = styled('table')`
+  table-layout: fixed;
+  width: 100%;
+  max-width: 100%;
+  font-size: ${p => p.theme.fontSizeSmall};
+`;
+
+const StyledTr = styled('tr')`
+  &:nth-child(2n + 1) td {
+    background-color: ${p => p.theme.offWhite};
+  }
+`;
+
+const TagKey = styled('td')`
+  color: ${p => p.theme.gray3};
+  padding: ${space(0.5)} ${space(1)};
+  white-space: nowrap;
+  overflow: hidden;
+  text-overflow: ellipsis;
+`;
+
+const TagValue = styled(TagKey)`
+  text-align: right;
+  ${overflowEllipsis};
+`;
+
+export default ProjectReleaseDetails;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/sessionDuration.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/sessionDuration.tsx
new file mode 100644
index 0000000000..8a8aec9427
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/sessionDuration.tsx
@@ -0,0 +1,32 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {t} from 'app/locale';
+
+import UsersChart from '../../list/usersChart';
+import {mockData} from '../../list/mock';
+import {SectionHeading, Wrapper} from './styles';
+
+type Props = {};
+
+// TODO(releasesV2): waiting for API
+const SessionDuration = ({}: Props) => (
+  <StyledWrapper>
+    <SectionHeading>{t('Session Duration')}</SectionHeading>
+    <UsersChart
+      data={{'24h': mockData[0].graphData['24h'].slice(0, 15)}}
+      statsPeriod="24h"
+      height={50}
+    />
+  </StyledWrapper>
+);
+
+const StyledWrapper = styled(Wrapper)`
+  /* TODO(releasesV2): this will be changed */
+  g > .barchart-rect {
+    background: ${p => p.theme.offWhite2};
+    fill: ${p => p.theme.offWhite2};
+  }
+`;
+
+export default SessionDuration;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/styles.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/styles.tsx
new file mode 100644
index 0000000000..3baf3cfd01
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/styles.tsx
@@ -0,0 +1,15 @@
+import styled from '@emotion/styled';
+
+import space from 'app/styles/space';
+
+export const SectionHeading = styled('h4')`
+  color: ${p => p.theme.gray3};
+  font-size: ${p => p.theme.fontSizeMedium};
+  margin: ${space(1)} 0;
+  padding-right: ${space(1)};
+  line-height: 1.2;
+`;
+
+export const Wrapper = styled('div')`
+  margin-bottom: ${space(4)};
+`;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/totalCrashFreeUsers.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/totalCrashFreeUsers.tsx
new file mode 100644
index 0000000000..9cceb57bc6
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/totalCrashFreeUsers.tsx
@@ -0,0 +1,79 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {t} from 'app/locale';
+import space from 'app/styles/space';
+import overflowEllipsis from 'app/styles/overflowEllipsis';
+
+import {SectionHeading, Wrapper} from './styles';
+
+type Props = {};
+
+// TODO(releasesV2): waiting for API
+const TotalCrashFreeUsers = ({}: Props) => (
+  <Wrapper>
+    <SectionHeading>{t('Total Crash Free Users')}</SectionHeading>
+    <Timeline>
+      {[1, 2, 3, 4].map((_, index) => (
+        <Row key={index}>
+          <InnerRow>
+            <Text bold>March 7</Text>
+            <Text bold right>
+              4.8k users
+            </Text>
+          </InnerRow>
+          <InnerRow>
+            <Text>1 wk later</Text>
+            <Text right>30%</Text>
+          </InnerRow>
+        </Row>
+      ))}
+    </Timeline>
+  </Wrapper>
+);
+
+const Timeline = styled('div')`
+  font-size: ${p => p.theme.fontSizeSmall};
+  color: ${p => p.theme.gray3};
+  line-height: 1;
+`;
+
+const DOT_SIZE = 10;
+const Row = styled('div')`
+  border-left: 1px solid ${p => p.theme.offWhite2};
+  padding-left: ${space(2)};
+  padding-bottom: ${space(1)};
+  margin-left: ${space(1)};
+  position: relative;
+
+  &:before {
+    content: '';
+    width: ${DOT_SIZE}px;
+    height: ${DOT_SIZE}px;
+    border-radius: 100%;
+    background-color: ${p => p.theme.purple};
+    position: absolute;
+    top: 0;
+    left: -${Math.floor(DOT_SIZE / 2)}px;
+  }
+
+  &:last-child {
+    border-left: 0;
+  }
+`;
+const InnerRow = styled('div')`
+  display: grid;
+  grid-column-gap: ${space(2)};
+  grid-auto-flow: column;
+  grid-auto-columns: 1fr;
+
+  padding-bottom: ${space(0.75)};
+`;
+
+const Text = styled('div')<{bold?: boolean; right?: boolean}>`
+  font-weight: ${p => (p.bold ? 600 : 400)};
+  text-align: ${p => (p.right ? 'right' : 'left')};
+  ${overflowEllipsis};
+`;
+
+export default TotalCrashFreeUsers;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/releaseActions.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/releaseActions.tsx
new file mode 100644
index 0000000000..b4611bdeed
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/releaseActions.tsx
@@ -0,0 +1,62 @@
+import React from 'react';
+import styled from '@emotion/styled';
+import {browserHistory} from 'react-router';
+
+import {t} from 'app/locale';
+import space from 'app/styles/space';
+import Button from 'app/components/button';
+import {IconDelete} from 'app/icons';
+import Confirm from 'app/components/confirm';
+import {
+  addErrorMessage,
+  addLoadingMessage,
+  addSuccessMessage,
+} from 'app/actionCreators/indicator';
+
+import {deleteRelease} from './utils';
+
+type Props = {
+  orgId: string;
+  version: string;
+};
+
+const ReleaseActions = ({orgId, version}: Props) => {
+  const handleDelete = async () => {
+    const redirectPath = `/organizations/${orgId}/releases-v2/`;
+    addLoadingMessage(t('Deleting Release...'));
+
+    try {
+      await deleteRelease(orgId, version);
+      addSuccessMessage(t('Release was successfully removed.'));
+      browserHistory.push(redirectPath);
+    } catch {
+      addErrorMessage(
+        t('This release is referenced by active issues and cannot be removed.')
+      );
+    }
+  };
+
+  return (
+    <Wrapper>
+      <Confirm
+        onConfirm={handleDelete}
+        message={t(
+          'Deleting this release is permanent. Are you sure you wish to continue?'
+        )}
+      >
+        <Button>
+          <IconDelete size="xs" />
+        </Button>
+      </Confirm>
+    </Wrapper>
+  );
+};
+
+const Wrapper = styled('div')`
+  display: grid;
+  grid-auto-flow: column;
+  grid-auto-columns: min-content;
+  grid-gap: ${space(0.5)};
+`;
+
+export default ReleaseActions;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/releaseHeader.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/releaseHeader.tsx
new file mode 100644
index 0000000000..c10c9ac531
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/releaseHeader.tsx
@@ -0,0 +1,197 @@
+import React from 'react';
+import {Location} from 'history';
+import styled from '@emotion/styled';
+
+import space from 'app/styles/space';
+import {t} from 'app/locale';
+import Link from 'app/components/links/link';
+import ListLink from 'app/components/links/listLink';
+import ExternalLink from 'app/components/links/externalLink';
+import NavTabs from 'app/components/navTabs';
+import {Release, Deploy} from 'app/types';
+import Version from 'app/components/version';
+import Clipboard from 'app/components/clipboard';
+import {IconCopy, IconOpen} from 'app/icons';
+import Tooltip from 'app/components/tooltip';
+import Badge from 'app/components/badge';
+import Count from 'app/components/count';
+import TimeSince from 'app/components/timeSince';
+
+import ReleaseStat from './releaseStat';
+import Breadcrumbs from './breadcrumbs';
+import ReleaseActions from './releaseActions';
+
+type Props = {
+  location: Location;
+  orgId: string;
+  release: Release;
+  deploys: Deploy[];
+};
+
+const ReleaseHeader = ({location, orgId, release, deploys}: Props) => {
+  const {version, newGroups, url} = release;
+
+  const releasePath = `/organizations/${orgId}/releases-v2/${encodeURIComponent(
+    version
+  )}/`;
+
+  const tabs = [
+    {title: t('Overview'), to: releasePath},
+    {title: t('Commits'), to: `${releasePath}commits/`},
+    {title: t('Artifacts'), to: `${releasePath}artifacts/`},
+    {title: t('Files Changed'), to: `${releasePath}files-changed/`},
+  ];
+
+  return (
+    <Header>
+      <Layout>
+        <Breadcrumbs
+          crumbs={[
+            {
+              label: t('Releases'),
+              to: `/organizations/${orgId}/releases-v2/`,
+            },
+            {label: <Version version={version} anchor={false} />},
+          ]}
+        />
+
+        <StatsWrapper>
+          {deploys.length > 0 && (
+            <ReleaseStat label={t('Deploys')}>
+              <DeploysWrapper>
+                {deploys.map(deploy => (
+                  <Tooltip
+                    title={<TimeSince date={deploy.dateFinished} />}
+                    key={deploy.id}
+                  >
+                    <Link
+                      title={t('View in stream')}
+                      to={`/organizations/${orgId}/issues/?query=release:${encodeURIComponent(
+                        version
+                      )}&environment=${encodeURIComponent(deploy.environment)}`}
+                    >
+                      <StyledBadge text={deploy.environment} />
+                    </Link>
+                  </Tooltip>
+                ))}
+              </DeploysWrapper>
+            </ReleaseStat>
+          )}
+          <ReleaseStat label={t('Crashes')}>
+            <Count value={/*release.healthData?.crashes ??*/ 0} />
+          </ReleaseStat>
+          {/* TODO(releasesV2): waiting for api */}
+          {/* <ReleaseStat label={t('Errors')}>
+            <Count value={release.healthData?.errors ?? 0} />
+          </ReleaseStat> */}
+          <ReleaseStat label={t('New Issues')}>
+            <Count value={newGroups} />
+          </ReleaseStat>
+          <ReleaseActions version={version} orgId={orgId} />
+        </StatsWrapper>
+      </Layout>
+
+      <ReleaseName>
+        <Version version={version} anchor={false} />
+
+        <IconWrapper>
+          <Clipboard value={version}>
+            <Tooltip title={version}>
+              <IconCopy size="xs" />
+            </Tooltip>
+          </Clipboard>
+        </IconWrapper>
+
+        {!!url && (
+          <IconWrapper>
+            <Tooltip title={url}>
+              <ExternalLink href={url}>
+                <IconOpen size="xs" />
+              </ExternalLink>
+            </Tooltip>
+          </IconWrapper>
+        )}
+      </ReleaseName>
+
+      <StyledNavTabs>
+        {tabs.map(tab => (
+          <ListLink
+            key={tab.to}
+            to={`${tab.to}${location.search}`}
+            isActive={() => tab.to === location.pathname}
+          >
+            {tab.title}
+          </ListLink>
+        ))}
+      </StyledNavTabs>
+    </Header>
+  );
+};
+
+const Header = styled('div')`
+  padding: ${space(2)} ${space(4)} 0;
+  border-bottom: 1px solid ${p => p.theme.borderDark};
+`;
+
+const Layout = styled('div')`
+  margin-bottom: ${space(1)};
+  @media (min-width: ${p => p.theme.breakpoints[1]}) {
+    display: grid;
+    grid-column-gap: ${space(3)};
+    grid-template-columns: 1fr 1fr;
+    margin-bottom: 0;
+  }
+`;
+
+const StatsWrapper = styled('div')`
+  display: grid;
+  grid-auto-flow: row;
+  grid-gap: ${space(2)};
+  padding: ${space(1.5)} 0;
+  @media (min-width: ${p => p.theme.breakpoints[0]}) {
+    grid-auto-flow: column;
+    grid-gap: ${space(4)};
+  }
+  @media (min-width: ${p => p.theme.breakpoints[1]}) {
+    justify-content: flex-end;
+    text-align: right;
+  }
+`;
+
+const DeploysWrapper = styled('div')`
+  display: flex;
+  margin-top: ${space(0.5)};
+`;
+
+const StyledBadge = styled(Badge)`
+  background-color: ${p => p.theme.gray4};
+  font-size: ${p => p.theme.fontSizeSmall};
+  font-weight: 400;
+`;
+
+const ReleaseName = styled('div')`
+  font-size: ${p => p.theme.headerFontSize};
+  color: ${p => p.theme.gray4};
+  margin-bottom: ${space(2)};
+`;
+
+const IconWrapper = styled('span')`
+  transition: color 0.3s ease-in-out;
+  margin-left: ${space(1)};
+
+  &,
+  a {
+    color: ${p => p.theme.gray2};
+    &:hover {
+      cursor: pointer;
+      color: ${p => p.theme.gray4};
+    }
+  }
+`;
+
+const StyledNavTabs = styled(NavTabs)`
+  margin-bottom: 0;
+  grid-column: 1 / 2;
+`;
+
+export default ReleaseHeader;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/releaseStat.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/releaseStat.tsx
new file mode 100644
index 0000000000..a6cf56cdd5
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/releaseStat.tsx
@@ -0,0 +1,28 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+type Props = {
+  label: string;
+  children: React.ReactNode;
+};
+
+const ReleaseStat = ({label, children}: Props) => (
+  <div>
+    <Label>{label}</Label>
+    <Value>{children}</Value>
+  </div>
+);
+
+const Label = styled('div')`
+  font-weight: 600;
+  font-size: ${p => p.theme.fontSizeSmall};
+  text-transform: uppercase;
+  color: ${p => p.theme.gray2};
+  line-height: 1.3;
+`;
+const Value = styled('div')`
+  font-size: ${p => p.theme.fontSizeExtraLarge};
+  color: ${p => p.theme.gray4};
+`;
+
+export default ReleaseStat;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/utils.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/utils.tsx
new file mode 100644
index 0000000000..2797645db5
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/utils.tsx
@@ -0,0 +1,12 @@
+import {Client} from 'app/api';
+
+export const deleteRelease = (orgId: string, version: string) => {
+  const api = new Client();
+
+  return api.requestPromise(
+    `/organizations/${orgId}/releases/${encodeURIComponent(version)}/`,
+    {
+      method: 'DELETE',
+    }
+  );
+};
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
index e6ce523bc0..092fdd3c7c 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
@@ -129,7 +129,7 @@ class ReleasesList extends AsyncView<Props, State> {
           lastEvent,
           newGroups,
         } = release;
-        const {slug, healthData} = project;
+        const {slug, id, healthData} = project;
         return {
           version,
           dateCreated,
@@ -140,6 +140,7 @@ class ReleasesList extends AsyncView<Props, State> {
           newGroups,
           healthData: healthData!,
           projectSlug: slug,
+          projectId: id,
           // TODO(releasesv2): make api send also project platform
         };
       })
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/releaseCard.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/releaseCard.tsx
index cb91bd4f4d..fe45667369 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/releaseCard.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/releaseCard.tsx
@@ -57,9 +57,12 @@ const ReleaseCard = ({release, project, location}: Props) => (
             <VersionWrapper>
               <Version
                 version={release.version}
-                preserveGlobalSelection
+                // TODO(releasesV2): we don't use this for now
+                // preserveGlobalSelection
                 tooltipRawVersion
                 truncate
+                projectId={String(release.projectId)}
+                v2
               />
               <TimeWithIcon date={release.dateReleased || release.dateCreated} />
             </VersionWrapper>
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/releaseHealth.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/releaseHealth.tsx
index 45b876edce..ed53278332 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/releaseHealth.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/releaseHealth.tsx
@@ -30,7 +30,7 @@ const ReleaseHealth = ({release, location}: Props) => {
     crashFreeUsers,
     crashFreeSessions,
     sessionsCrashed,
-    sessionsErrored,
+    // sessionsErrored,
   } = release.healthData!;
 
   const healthStatsPeriods = [
@@ -68,8 +68,8 @@ const ReleaseHealth = ({release, location}: Props) => {
           <AdoptionColumn>{t('Release adoption')}</AdoptionColumn>
           <CrashFreeUsersColumn>{t('Crash free users')}</CrashFreeUsersColumn>
           <CrashFreeSessionsColumn>{t('Crash free sessions')}</CrashFreeSessionsColumn>
+          <ErrorsColumn>{/* {t('Errors')} */}</ErrorsColumn>
           <CrashesColumn>{t('Crashes')}</CrashesColumn>
-          <ErrorsColumn>{t('Errors')}</ErrorsColumn>
         </HeaderLayout>
       </StyledPanelHeader>
 
@@ -131,13 +131,11 @@ const ReleaseHealth = ({release, location}: Props) => {
               )}
             </CrashFreeSessionsColumn>
 
+            <ErrorsColumn>{/* <Count value={sessionsErrored ?? 0} /> */}</ErrorsColumn>
+
             <CrashesColumn>
               <Count value={sessionsCrashed ?? 0} />
             </CrashesColumn>
-
-            <ErrorsColumn>
-              <Count value={sessionsErrored ?? 0} />
-            </ErrorsColumn>
           </Layout>
         </StyledPanelItem>
       </PanelBody>
@@ -157,17 +155,17 @@ const StyledPanelHeader = styled(PanelHeader)`
 
 const Layout = styled('div')`
   display: grid;
-  grid-template-areas: 'daily-users adoption crash-free-users crash-free-sessions crashes errors';
+  grid-template-areas: 'daily-users adoption crash-free-users crash-free-sessions errors crashes';
   grid-template-columns: 3fr minmax(230px, 2fr) 2fr 2fr 160px 1fr;
   grid-column-gap: ${space(1.5)};
   width: 100%;
   align-items: center;
   @media (max-width: ${p => p.theme.breakpoints[2]}) {
-    grid-template-areas: 'adoption crash-free-users crash-free-sessions crashes errors';
+    grid-template-areas: 'adoption crash-free-users crash-free-sessions errors crashes';
     grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
   }
   @media (max-width: ${p => p.theme.breakpoints[1]}) {
-    grid-template-areas: 'crash-free-users crash-free-sessions errors';
+    grid-template-areas: 'crash-free-users crash-free-sessions crashes';
     grid-template-columns: 2fr 2fr 1fr;
   }
 `;
@@ -221,12 +219,12 @@ const CrashFreeSessionsColumn = styled(CenterColumn)`
 `;
 const CrashesColumn = styled(RightColumn)`
   grid-area: crashes;
-  @media (max-width: ${p => p.theme.breakpoints[1]}) {
-    display: none;
-  }
 `;
 const ErrorsColumn = styled(RightColumn)`
   grid-area: errors;
+  @media (max-width: ${p => p.theme.breakpoints[1]}) {
+    display: none;
+  }
 `;
 
 const StyledPanelItem = styled(PanelItem)`
