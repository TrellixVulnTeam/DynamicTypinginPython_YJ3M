commit aa491e9850f63b64b7acc6102682efe49041cbc9
Author: Ben Vinegar <ben@benv.ca>
Date:   Mon Aug 10 16:20:22 2015 -0700

    Implement template interface (fixes #1719)

diff --git a/src/sentry/static/sentry/app/components/eventEntries.jsx b/src/sentry/static/sentry/app/components/eventEntries.jsx
index 4f608f2b2e..15375bd56b 100644
--- a/src/sentry/static/sentry/app/components/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/eventEntries.jsx
@@ -98,7 +98,8 @@ var EventEntries = React.createClass({
   interfaces: {
     exception: require("./interfaces/exception"),
     request: require("./interfaces/request"),
-    stacktrace: require("./interfaces/stacktrace")
+    stacktrace: require("./interfaces/stacktrace"),
+    template: require("./interfaces/template")
   },
 
   shouldComponentUpdate(nextProps, nextState) {
diff --git a/src/sentry/static/sentry/app/components/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/interfaces/frame.jsx
new file mode 100644
index 0000000000..802ab87101
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/interfaces/frame.jsx
@@ -0,0 +1,151 @@
+import React from "react";
+import classSet from "react/lib/cx";
+import {defined} from "../../utils";
+import PropTypes from "../../proptypes";
+import ContextData from "../contextData";
+
+var FrameVariables = React.createClass({
+  propTypes: {
+    data: React.PropTypes.object.isRequired
+  },
+
+  // make sure that clicking on the variables does not actually do
+  // anything on the containing element.
+  preventToggling(event) {
+    event.stopPropagation();
+  },
+
+  render() {
+    var children = [];
+    var data = this.props.data;
+
+    for (var key in data) {
+      var value = data[key];
+      children.push(<dt key={'dt-' + key}>{key}</dt>);
+      children.push((
+        <dd key={'dd-' + key}>
+          <ContextData data={value} />
+        </dd>
+      ));
+    }
+
+    return (
+      <dl className="vars expandable" onClick={this.preventToggling}>{children}</dl>
+    );
+  }
+});
+
+var Frame = React.createClass({
+  propTypes: {
+    data: React.PropTypes.object.isRequired
+  },
+
+  getInitialState() {
+    // isExpanded can be initialized to true via parent component;
+    // data synchronization is not important
+    // https://facebook.github.io/react/tips/props-in-getInitialState-as-anti-pattern.html
+    return {
+      isExpanded: defined(this.props.isExpanded) ? this.props.isExpanded : false
+    };
+  },
+
+  isUrl(filename) {
+    if (!filename) {
+      return false;
+    }
+    return filename.indexOf('http:') !== -1 || filename.indexOf('https:') !== -1;
+  },
+
+  toggleContext() {
+    this.setState({
+      isExpanded: !this.state.isExpanded
+    });
+  },
+
+  render() {
+    var data = this.props.data;
+
+    var className = classSet({
+      "frame": true,
+      "system-frame": !data.inApp,
+      "frame-errors": data.errors,
+    });
+
+    var title = [];
+
+    if (defined(data.filename || data.module)) {
+      title.push(<code key="filename">{data.filename || data.module}</code>);
+      if (this.isUrl(data.absPath)) {
+        title.push(<a href={data.absPath} className="icon-share" key="share" />);
+      }
+      if (defined(data.function)) {
+        title.push(<span className="in-at" key="in"> in </span>);
+      }
+    }
+
+    if (defined(data.function)) {
+      title.push(<code key="function">{data.function}</code>);
+    }
+
+    if (defined(data.lineNo)) {
+      // TODO(dcramer): we need to implement source mappings
+      // title.push(<span className="pull-right blame"><a><span className="icon-mark-github"></span> View Code</a></span>);
+      title.push(<span className="in-at" key="at"> at line </span>);
+      if (defined(data.colNo)) {
+        title.push(<code key="line">{data.lineNo}:{data.colNo}</code>);
+      } else {
+        title.push(<code key="line">{data.lineNo}</code>);
+      }
+    }
+
+    var outerClassName = "context";
+    if (this.state.isExpanded) {
+      outerClassName += " expanded";
+    }
+
+    var context = '';
+    if (defined(data.context) && data.context.length) {
+      var startLineNo = data.context[0][0];
+      context = (
+        <ol start={startLineNo} className={outerClassName}
+            onClick={this.toggleContext}>
+          {defined(data.errors) &&
+          <li className="expandable error"
+              key="errors">{data.errors.join(", ")}</li>
+          }
+          {data.context.map((line) => {
+            var className = "expandable";
+            if (line[0] === data.lineNo) {
+              className += " active";
+            }
+
+            var lineWs;
+            var lineCode;
+            if (defined(line[1])) {
+              [, lineWs, lineCode] = line[1].match(/^(\s*)(.*?)$/m);
+            } else {
+              lineWs = '';
+              lineCode = '';
+            }
+            return <li className={className} key={line[0]}><span className="ws">{
+              lineWs}</span><span className="contextline">{lineCode
+            }</span> <span className="icon-plus"></span></li>;
+          })}
+          {defined(data.vars) &&
+          <FrameVariables data={data.vars} key="vars" />
+          }
+        </ol>
+      );
+    }
+    // TODO(dcramer): implement popover annotations
+    // TODO(dcramer): implement local vars
+    return (
+      <li className={className}>
+        <p>{title}</p>
+        {context}
+      </li>
+    );
+  }
+});
+
+export default Frame;
diff --git a/src/sentry/static/sentry/app/components/interfaces/stacktraceContent.jsx b/src/sentry/static/sentry/app/components/interfaces/stacktraceContent.jsx
index e0f841fac8..db79a1981d 100644
--- a/src/sentry/static/sentry/app/components/interfaces/stacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/interfaces/stacktraceContent.jsx
@@ -1,150 +1,7 @@
 import React from "react";
-import classSet from "react/lib/cx";
-import GroupEventDataSection from "../eventDataSection";
-import PropTypes from "../../proptypes";
+//import GroupEventDataSection from "../eventDataSection";
+import Frame from "./frame";
 import {defined} from "../../utils";
-import ContextData from "../contextData";
-
-var FrameVariables = React.createClass({
-  propTypes: {
-    data: React.PropTypes.object.isRequired
-  },
-
-  // make sure that clicking on the variables does not actually do
-  // anything on the containing element.
-  preventToggling(event) {
-    event.stopPropagation();
-  },
-
-  render() {
-    var children = [];
-    var data = this.props.data;
-
-    for (var key in data) {
-      var value = data[key];
-      children.push(<dt key={'dt-' + key}>{key}</dt>);
-      children.push((
-        <dd key={'dd-' + key}>
-          <ContextData data={value} />
-        </dd>
-      ));
-    }
-
-    return (
-      <dl className="vars expandable" onClick={this.preventToggling}>{children}</dl>
-    );
-  }
-});
-
-var Frame = React.createClass({
-  propTypes: {
-    data: React.PropTypes.object.isRequired
-  },
-
-  getInitialState() {
-    return {
-      isExpanded: false
-    };
-  },
-
-  isUrl(filename) {
-    if (!filename) {
-      return false;
-    }
-    return filename.indexOf('http:') !== -1 || filename.indexOf('https:') !== -1;
-  },
-
-  toggleContext() {
-    this.setState({
-      isExpanded: !this.state.isExpanded
-    });
-  },
-
-  render() {
-    var data = this.props.data;
-
-    var className = classSet({
-      "frame": true,
-      "system-frame": !data.inApp,
-      "frame-errors": data.errors,
-    });
-
-    var title = [];
-
-    if (defined(data.filename || data.module)) {
-      title.push(<code key="filename">{data.filename || data.module}</code>);
-      if (this.isUrl(data.absPath)) {
-        title.push(<a href={data.absPath} className="icon-share" key="share" />);
-      }
-      if (defined(data.function)) {
-        title.push(<span className="in-at" key="in"> in </span>);
-      }
-    }
-
-    if (defined(data.function)) {
-        title.push(<code key="function">{data.function}</code>);
-    }
-
-    if (defined(data.lineNo)) {
-      // TODO(dcramer): we need to implement source mappings
-      // title.push(<span className="pull-right blame"><a><span className="icon-mark-github"></span> View Code</a></span>);
-      title.push(<span className="in-at" key="at"> at line </span>);
-      if (defined(data.colNo)) {
-        title.push(<code key="line">{data.lineNo}:{data.colNo}</code>);
-      } else {
-        title.push(<code key="line">{data.lineNo}</code>);
-      }
-    }
-
-    var outerClassName = "context";
-    if (this.state.isExpanded) {
-      outerClassName += " expanded";
-    }
-
-    var context = '';
-    if (defined(data.context) && data.context.length) {
-      var startLineNo = data.context[0][0];
-      context = (
-        <ol start={startLineNo} className={outerClassName}
-            onClick={this.toggleContext}>
-        {defined(data.errors) &&
-          <li className="expandable error"
-              key="errors">{data.errors.join(", ")}</li>
-        }
-        {data.context.map((line) => {
-          var className = "expandable";
-          if (line[0] === data.lineNo) {
-            className += " active";
-          }
-
-          var lineWs;
-          var lineCode;
-          if (defined(line[1])) {
-            [, lineWs, lineCode] = line[1].match(/^(\s*)(.*?)$/m);
-          } else {
-            lineWs = '';
-            lineCode = '';
-          }
-          return <li className={className} key={line[0]}><span className="ws">{
-            lineWs}</span><span className="contextline">{lineCode
-            }</span> <span className="icon-plus"></span></li>;
-        })}
-        {defined(data.vars) &&
-          <FrameVariables data={data.vars} key="vars" />
-        }
-        </ol>
-      );
-    }
-    // TODO(dcramer): implement popover annotations
-    // TODO(dcramer): implement local vars
-    return (
-      <li className={className}>
-        <p>{title}</p>
-        {context}
-      </li>
-    );
-  }
-});
 
 var StacktraceContent = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/components/interfaces/template.jsx b/src/sentry/static/sentry/app/components/interfaces/template.jsx
new file mode 100644
index 0000000000..eb7cd413bd
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/interfaces/template.jsx
@@ -0,0 +1,37 @@
+import React from "react";
+import GroupEventDataSection from "../eventDataSection";
+import PropTypes from "../../proptypes";
+import {defined} from "../../utils";
+import ContextData from "../contextData";
+import Frame from "./frame";
+
+var TemplateInterface = React.createClass({
+  propTypes: {
+    group: PropTypes.Group.isRequired,
+    event: PropTypes.Event.isRequired,
+    type: React.PropTypes.string.isRequired,
+    data: React.PropTypes.object.isRequired
+  },
+
+  getInitialState() {
+    return {};
+  },
+
+  render() {
+    return (
+      <GroupEventDataSection
+        group={this.props.group}
+        event={this.props.event}
+        type={this.props.type}
+        title={<div>Template</div>}>
+        <div className="traceback">
+          <ul>
+            <Frame data={this.props.data} isExpanded={true}/>
+          </ul>
+        </div>
+      </GroupEventDataSection>
+    );
+  }
+});
+
+export default TemplateInterface;
