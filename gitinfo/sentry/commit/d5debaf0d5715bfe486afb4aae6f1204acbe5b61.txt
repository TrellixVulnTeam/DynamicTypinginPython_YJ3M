commit d5debaf0d5715bfe486afb4aae6f1204acbe5b61
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Mon Feb 5 14:44:56 2018 -0800

    feat(api): Add access attributes to project serializer

diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 50847303bd..049aa4649e 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -8,9 +8,12 @@ from django.db.models import Q
 from django.db.models.aggregates import Count
 from django.utils import timezone
 
-from sentry import tsdb, options
+from sentry import options, roles, tsdb
 from sentry.api.serializers import register, serialize, Serializer
 from sentry.api.serializers.models.plugin import PluginSerializer
+from sentry.api.serializers.models.team import get_org_roles, get_team_memberships
+from sentry.app import env
+from sentry.auth.superuser import is_active_superuser
 from sentry.constants import StatsPeriod
 from sentry.digests import backend as digests
 from sentry.models import (
@@ -46,6 +49,46 @@ class ProjectSerializer(Serializer):
 
         self.stats_period = stats_period
 
+    def get_access_by_project(self, item_list, user):
+        request = env.request
+
+        project_teams = list(
+            ProjectTeam.objects.filter(
+                project__in=item_list,
+            ).select_related('team')
+        )
+
+        project_team_map = defaultdict(list)
+
+        for pt in project_teams:
+            project_team_map[pt.project_id].append(pt.team)
+
+        team_memberships = get_team_memberships([pt.team for pt in project_teams], user)
+        org_roles = get_org_roles([i.organization_id for i in item_list], user)
+
+        is_superuser = (request and is_active_superuser(request) and request.user == user)
+        result = {}
+        for project in item_list:
+            is_member = any(
+                t.id in team_memberships for t in project_team_map.get(project.id, [])
+            )
+            org_role = org_roles.get(project.organization_id)
+            if is_member:
+                has_access = True
+            elif is_superuser:
+                has_access = True
+            elif project.organization.flags.allow_joinleave:
+                has_access = True
+            elif org_role and roles.get(org_role).is_global:
+                has_access = True
+            else:
+                has_access = False
+            result[project] = {
+                'is_member': is_member,
+                'has_access': has_access,
+            }
+        return result
+
     def get_attrs(self, item_list, user):
         project_ids = [i.id for i in item_list]
         if user.is_authenticated() and item_list:
@@ -85,16 +128,16 @@ class ProjectSerializer(Serializer):
         else:
             stats = None
 
-        result = {}
+        result = self.get_access_by_project(item_list, user)
         for item in item_list:
-            result[item] = {
+            result[item].update({
                 'is_bookmarked': item.id in bookmarks,
                 'is_subscribed':
                 bool(user_options.get(
                     (item.id, 'mail:alert'),
                     default_subscribe,
                 )),
-            }
+            })
             if stats:
                 result[item]['stats'] = stats[item.id]
         return result
@@ -128,7 +171,9 @@ class ProjectSerializer(Serializer):
             'features': feature_list,
             'status': status_label,
             'platform': obj.platform,
-            'isInternal': obj.is_internal_project()
+            'isInternal': obj.is_internal_project(),
+            'isMember': attrs['is_member'],
+            'hasAccess': attrs['has_access'],
         }
         if 'stats' in attrs:
             context['stats'] = attrs['stats']
diff --git a/src/sentry/api/serializers/models/team.py b/src/sentry/api/serializers/models/team.py
index 47796e40b7..a3d05d7be0 100644
--- a/src/sentry/api/serializers/models/team.py
+++ b/src/sentry/api/serializers/models/team.py
@@ -15,19 +15,40 @@ from sentry.models import (
 )
 
 
+def get_team_memberships(team_list, user):
+    if user.is_authenticated():
+        memberships = frozenset(
+            OrganizationMemberTeam.objects.filter(
+                organizationmember__user=user,
+                team__in=team_list,
+            ).values_list('team', flat=True)
+        )
+    else:
+        memberships = frozenset()
+
+    return memberships
+
+
+def get_org_roles(org_ids, user):
+    if user.is_authenticated():
+        # map of org id to role
+        org_roles = {
+            om.organization_id: om.role for om in
+            OrganizationMember.objects.filter(
+                user=user,
+                organization__in=set(org_ids),
+            )}
+    else:
+        org_roles = {}
+
+    return org_roles
+
+
 @register(Team)
 class TeamSerializer(Serializer):
     def get_attrs(self, item_list, user):
         request = env.request
-        if user.is_authenticated():
-            memberships = frozenset(
-                OrganizationMemberTeam.objects.filter(
-                    organizationmember__user=user,
-                    team__in=item_list,
-                ).values_list('team', flat=True)
-            )
-        else:
-            memberships = frozenset()
+        memberships = get_team_memberships(item_list, user)
 
         if user.is_authenticated():
             access_requests = frozenset(
@@ -39,16 +60,7 @@ class TeamSerializer(Serializer):
         else:
             access_requests = frozenset()
 
-        if user.is_authenticated():
-            # map of org id to role
-            org_roles = {
-                om.organization_id: om.role for om in
-                OrganizationMember.objects.filter(
-                    user=user,
-                    organization__in=set([t.organization_id for t in item_list]),
-                )}
-        else:
-            org_roles = {}
+        org_roles = get_org_roles([t.organization_id for t in item_list], user)
 
         is_superuser = (request and is_active_superuser(request) and request.user == user)
         result = {}
diff --git a/tests/sentry/api/serializers/test_project.py b/tests/sentry/api/serializers/test_project.py
index 438143c080..ef9d9bfe20 100644
--- a/tests/sentry/api/serializers/test_project.py
+++ b/tests/sentry/api/serializers/test_project.py
@@ -24,6 +24,107 @@ class ProjectSerializerTest(TestCase):
         assert result['name'] == project.name
         assert result['id'] == six.text_type(project.id)
 
+    def test_member_access(self):
+        user = self.create_user(username='foo')
+        organization = self.create_organization()
+        self.create_member(user=user, organization=organization)
+        team = self.create_team(organization=organization)
+        project = self.create_project(teams=[team])
+
+        result = serialize(project, user)
+
+        assert result['hasAccess'] is True
+        assert result['isMember'] is False
+
+        organization.flags.allow_joinleave = False
+        organization.save()
+        result = serialize(project, user)
+        # after changing to allow_joinleave=False
+        assert result['hasAccess'] is False
+        assert result['isMember'] is False
+
+        self.create_team_membership(user=user, team=team)
+        result = serialize(project, user)
+        # after giving them access to team
+        assert result['hasAccess'] is True
+        assert result['isMember'] is True
+
+    def test_admin_access(self):
+        user = self.create_user(username='foo')
+        organization = self.create_organization()
+        self.create_member(user=user, organization=organization, role='admin')
+        team = self.create_team(organization=organization)
+        project = self.create_project(teams=[team])
+
+        result = serialize(project, user)
+        result.pop('dateCreated')
+
+        assert result['hasAccess'] is True
+        assert result['isMember'] is False
+
+        organization.flags.allow_joinleave = False
+        organization.save()
+        result = serialize(project, user)
+        # after changing to allow_joinleave=False
+        assert result['hasAccess'] is False
+        assert result['isMember'] is False
+
+        self.create_team_membership(user=user, team=team)
+        result = serialize(project, user)
+        # after giving them access to team
+        assert result['hasAccess'] is True
+        assert result['isMember'] is True
+
+    def test_manager_access(self):
+        user = self.create_user(username='foo')
+        organization = self.create_organization()
+        self.create_member(user=user, organization=organization, role='manager')
+        team = self.create_team(organization=organization)
+        project = self.create_project(teams=[team])
+
+        result = serialize(project, user)
+
+        assert result['hasAccess'] is True
+        assert result['isMember'] is False
+
+        organization.flags.allow_joinleave = False
+        organization.save()
+        result = serialize(project, user)
+        # after changing to allow_joinleave=False
+        assert result['hasAccess'] is True
+        assert result['isMember'] is False
+
+        self.create_team_membership(user=user, team=team)
+        result = serialize(project, user)
+        # after giving them access to team
+        assert result['hasAccess'] is True
+        assert result['isMember'] is True
+
+    def test_owner_access(self):
+        user = self.create_user(username='foo')
+        organization = self.create_organization()
+        self.create_member(user=user, organization=organization, role='owner')
+        team = self.create_team(organization=organization)
+        project = self.create_project(teams=[team])
+
+        result = serialize(project, user)
+
+        assert result['hasAccess'] is True
+        assert result['isMember'] is False
+
+        organization.flags.allow_joinleave = False
+        organization.save()
+        result = serialize(project, user)
+        # after changing to allow_joinleave=False
+        assert result['hasAccess'] is True
+        assert result['isMember'] is False
+
+        self.create_team_membership(user=user, team=team)
+        result = serialize(project, user)
+        # after giving them access to team
+        assert result['hasAccess'] is True
+        assert result['isMember'] is True
+
 
 class ProjectWithTeamSerializerTest(TestCase):
     def test_simple(self):
