commit 7a164c6c3f8edbd403225ee2e443f2347156c04f
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jul 1 11:55:39 2015 -0700

    Optimize behavior around failure conditions in EventManager.save

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 6c63c18624..210782e7c0 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -313,33 +313,15 @@ class EventManager(object):
             'time_spent_count': time_spent and 1 or 0,
         })
 
-        tags = data['tags']
-        tags.append(('level', LOG_LEVELS[level]))
-        if logger_name:
-            tags.append(('logger', logger_name))
-        if server_name:
-            tags.append(('server_name', server_name))
-        if site:
-            tags.append(('site', site))
         if release:
-            # TODO(dcramer): we should ensure we create Release objects
-            tags.append(('sentry:release', release))
-
             group_kwargs['first_release'] = Release.objects.get_or_create(
                 project=project,
                 version=release,
             )[0]
 
-        for plugin in plugins.for_project(project, version=None):
-            added_tags = safe_execute(plugin.get_tags, event,
-                                      _with_transaction=False)
-            if added_tags:
-                tags.extend(added_tags)
-
         group, is_new, is_regression, is_sample = safe_execute(
             self._save_aggregate,
             event=event,
-            tags=tags,
             hashes=hashes,
             **group_kwargs
         )
@@ -348,9 +330,6 @@ class EventManager(object):
 
         event.group = group
 
-        safe_execute(Group.objects.add_tags, group, tags,
-                     _with_transaction=False)
-
         try:
             with transaction.atomic():
                 EventMapping.objects.create(
@@ -368,6 +347,27 @@ class EventManager(object):
                 self.logger.info('Duplicate Event found for event_id=%s', event_id)
                 return event
 
+        tags = data['tags']
+        tags.append(('level', LOG_LEVELS[level]))
+        if logger_name:
+            tags.append(('logger', logger_name))
+        if server_name:
+            tags.append(('server_name', server_name))
+        if site:
+            tags.append(('site', site))
+        if release:
+            # TODO(dcramer): we should ensure we create Release objects
+            tags.append(('sentry:release', release))
+
+        for plugin in plugins.for_project(project, version=None):
+            added_tags = safe_execute(plugin.get_tags, event,
+                                      _with_transaction=False)
+            if added_tags:
+                tags.extend(added_tags)
+
+        safe_execute(Group.objects.add_tags, group, tags,
+                     _with_transaction=False)
+
         if not raw:
             post_process_group.delay(
                 group=group,
@@ -422,7 +422,7 @@ class EventManager(object):
             group=group,
         )
 
-    def _save_aggregate(self, event, tags, hashes, **kwargs):
+    def _save_aggregate(self, event, hashes, **kwargs):
         time_spent = event.time_spent
         project = event.project
 
