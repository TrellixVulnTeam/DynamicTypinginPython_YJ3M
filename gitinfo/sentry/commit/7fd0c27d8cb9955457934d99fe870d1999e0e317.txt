commit 7fd0c27d8cb9955457934d99fe870d1999e0e317
Author: Alex Coomans <alexc@squareup.com>
Date:   Sat Jun 4 11:16:47 2016 -0700

    Add (failing) test for merging GroupMeta

diff --git a/tests/sentry/tasks/test_merge.py b/tests/sentry/tasks/test_merge.py
index 5196236262..a67f96ca86 100644
--- a/tests/sentry/tasks/test_merge.py
+++ b/tests/sentry/tasks/test_merge.py
@@ -1,7 +1,9 @@
 from __future__ import absolute_import
 
+import pytest
+
 from sentry.tasks.merge import merge_group, rehash_group_events
-from sentry.models import Event, Group, GroupRedirect, GroupTagKey, GroupTagValue
+from sentry.models import Event, Group, GroupMeta, GroupRedirect, GroupTagKey, GroupTagValue
 from sentry.testutils import TestCase
 
 
@@ -106,6 +108,38 @@ class MergeGroupTest(TestCase):
             key='key2',
         ).times_seen == 10
 
+    # TODO - Add code to merge GroupMeta
+    @pytest.mark.xfail(run=False)
+    def test_merge_with_group_meta(self):
+        project1 = self.create_project()
+        group1 = self.create_group(project1)
+        event1 = self.create_event('a' * 32, group=group1, data={'foo': 'bar'})
+        project2 = self.create_project()
+        group2 = self.create_group(project2)
+        event2 = self.create_event('b' * 32, group=group2, data={'foo': 'baz'})
+
+        GroupMeta.objects.create(
+            group=event1.group,
+            key='github:tid',
+            value='134',
+        )
+
+        GroupMeta.objects.populate_cache([group1, group2])
+
+        assert GroupMeta.objects.get_value(group1, 'github:tid') == '134'
+        assert not GroupMeta.objects.get_value(group2, 'github:tid')
+
+        with self.tasks():
+            merge_group(group1.id, group2.id)
+
+        assert not Group.objects.filter(id=group1.id).exists()
+
+        GroupMeta.objects.clear_local_cache()
+        GroupMeta.objects.populate_cache([group1, group2])
+
+        assert not GroupMeta.objects.get_value(group1, 'github:tid')
+        assert GroupMeta.objects.get_value(group2, 'github:tid') == '134'
+
 
 class RehashGroupEventsTest(TestCase):
     def test_simple(self):
