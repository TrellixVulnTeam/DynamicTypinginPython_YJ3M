commit 7c979fbae956f90c30b13eaac2bf1d944bb6bbed
Author: jeffkwoh <23180853+jeffkwoh@users.noreply.github.com>
Date:   Fri Apr 17 07:02:44 2020 +0800

    feat(workflow): Change action options text (#17644)
    
    Add frontend rendering of a better description of actions.
    
    Also introduces additional strings.

diff --git a/src/sentry/api/endpoints/project_rules_configuration.py b/src/sentry/api/endpoints/project_rules_configuration.py
index 39a2d0c0d4..db56c7895e 100644
--- a/src/sentry/api/endpoints/project_rules_configuration.py
+++ b/src/sentry/api/endpoints/project_rules_configuration.py
@@ -24,6 +24,9 @@ class ProjectRulesConfigurationEndpoint(ProjectEndpoint):
         for rule_type, rule_cls in rules:
             node = rule_cls(project)
             context = {"id": node.id, "label": node.label, "enabled": node.is_enabled()}
+            if hasattr(node, "prompt"):
+                context["prompt"] = node.prompt
+
             if (
                 node.id == "sentry.mail.actions.NotifyEmailAction"
                 and not has_issue_alerts_targeting
diff --git a/src/sentry/integrations/pagerduty/notify_action.py b/src/sentry/integrations/pagerduty/notify_action.py
index 8e7b040b37..5b345557f7 100644
--- a/src/sentry/integrations/pagerduty/notify_action.py
+++ b/src/sentry/integrations/pagerduty/notify_action.py
@@ -65,6 +65,7 @@ class PagerDutyNotifyServiceForm(forms.Form):
 class PagerDutyNotifyServiceAction(EventAction):
     form_cls = PagerDutyNotifyServiceForm
     label = "Send a notification to PagerDuty account {account} and service {service}"
+    prompt = "Send a PagerDuty notification"
 
     def __init__(self, *args, **kwargs):
         super(PagerDutyNotifyServiceAction, self).__init__(*args, **kwargs)
diff --git a/src/sentry/integrations/slack/notify_action.py b/src/sentry/integrations/slack/notify_action.py
index ae707d222b..95861cdf5b 100644
--- a/src/sentry/integrations/slack/notify_action.py
+++ b/src/sentry/integrations/slack/notify_action.py
@@ -72,6 +72,7 @@ class SlackNotifyServiceForm(forms.Form):
 class SlackNotifyServiceAction(EventAction):
     form_cls = SlackNotifyServiceForm
     label = u"Send a notification to the {workspace} Slack workspace to {channel} and show tags {tags} in notification"
+    prompt = "Send a Slack notification"
 
     def __init__(self, *args, **kwargs):
         super(SlackNotifyServiceAction, self).__init__(*args, **kwargs)
diff --git a/src/sentry/rules/actions/notify_event.py b/src/sentry/rules/actions/notify_event.py
index d5cc6ad266..069b04747c 100644
--- a/src/sentry/rules/actions/notify_event.py
+++ b/src/sentry/rules/actions/notify_event.py
@@ -12,6 +12,7 @@ from sentry.utils.safe import safe_execute
 
 class NotifyEventAction(EventAction):
     label = "Send a notification (for all legacy integrations)"
+    prompt = "Send a notification to all legacy integrations"
 
     def get_plugins(self):
         from sentry.plugins.bases.notify import NotificationPlugin
diff --git a/src/sentry/rules/actions/notify_event_service.py b/src/sentry/rules/actions/notify_event_service.py
index a1023f2e9f..db95cbb799 100644
--- a/src/sentry/rules/actions/notify_event_service.py
+++ b/src/sentry/rules/actions/notify_event_service.py
@@ -29,6 +29,7 @@ class NotifyEventServiceForm(forms.Form):
 class NotifyEventServiceAction(EventAction):
     form_cls = NotifyEventServiceForm
     label = "Send a notification via {service}"
+    prompt = "Send a notification to one legacy integration"
 
     def __init__(self, *args, **kwargs):
         super(NotifyEventServiceAction, self).__init__(*args, **kwargs)
diff --git a/src/sentry/static/sentry/app/types/alerts.tsx b/src/sentry/static/sentry/app/types/alerts.tsx
index 0a72b5931b..5712a3e04f 100644
--- a/src/sentry/static/sentry/app/types/alerts.tsx
+++ b/src/sentry/static/sentry/app/types/alerts.tsx
@@ -23,6 +23,7 @@ export type IssueAlertRuleFormField =
 export type IssueAlertRuleActionTemplate = {
   id: string;
   label: string;
+  prompt: string;
   enabled: boolean;
   formFields?: {
     [key: string]: IssueAlertRuleFormField;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx
index f447aea0c3..1cded93311 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx
@@ -58,12 +58,13 @@ class RuleNodeList extends React.Component<Props> {
       project,
     } = this.props;
 
+    const shouldUsePrompt = project.features?.includes?.('issue-alerts-targeting');
     const options = nodes
       ? nodes
           .filter(({enabled}) => enabled)
           .map(node => ({
             value: node.id,
-            label: node.label,
+            label: shouldUsePrompt && node.prompt?.length > 0 ? node.prompt : node.label,
           }))
       : [];
 
diff --git a/tests/sentry/api/endpoints/test_project_rules_configuration.py b/tests/sentry/api/endpoints/test_project_rules_configuration.py
index 3516593540..a46dbcd809 100644
--- a/tests/sentry/api/endpoints/test_project_rules_configuration.py
+++ b/tests/sentry/api/endpoints/test_project_rules_configuration.py
@@ -34,6 +34,7 @@ class ProjectRuleConfigurationTest(APITestCase):
         node = rule.return_value
         node.id = "sentry.mail.actions.NotifyEmailAction"
         node.label = "hello"
+        node.prompt = "hello"
         node.is_enabled.return_value = True
         node.form_fields = {}
         rules.add(rule)
