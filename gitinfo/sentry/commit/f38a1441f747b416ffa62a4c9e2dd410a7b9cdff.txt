commit f38a1441f747b416ffa62a4c9e2dd410a7b9cdff
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Nov 25 13:00:55 2015 -0800

    Change server-side scrubber to use [Filtered] instead of asterix (refs GH-2366)

diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 44ad628a28..985997a19c 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -191,3 +191,5 @@ OK_PLUGIN_SAVED = _('Configuration for the {name} integration has been saved.')
 
 # Key to use when ordering a list of events manually
 EVENT_ORDERING_KEY = attrgetter('datetime', 'id')
+
+FILTER_MASK = '[Filtered]'
diff --git a/src/sentry/utils/data_scrubber.py b/src/sentry/utils/data_scrubber.py
index ba2639040c..6046a2951e 100644
--- a/src/sentry/utils/data_scrubber.py
+++ b/src/sentry/utils/data_scrubber.py
@@ -10,7 +10,7 @@ from __future__ import absolute_import
 import re
 import six
 
-from sentry.constants import DEFAULT_SCRUBBED_FIELDS
+from sentry.constants import DEFAULT_SCRUBBED_FIELDS, FILTER_MASK
 
 
 def varmap(func, var, context=None, name=None):
@@ -42,7 +42,6 @@ class SensitiveDataFilter(object):
     Asterisk out things that look like passwords, credit card numbers,
     and API keys in frames, http, and basic extra data.
     """
-    MASK = '*' * 8
     VALUES_RE = re.compile(r'\b(?:\d[ -]*?){13,16}\b')
     URL_PASSWORD_RE = re.compile(r'\b((?:[a-z0-9]+:)?//[^:]+:)([^@]+)@')
 
@@ -74,13 +73,13 @@ class SensitiveDataFilter(object):
 
         if isinstance(value, six.string_types):
             if self.VALUES_RE.search(value):
-                return self.MASK
+                return FILTER_MASK
 
             # Check if the value is a url-like object
             # that contains a password
             # e.g. postgres://foo:password@example.com/db
             if '//' in value and '@' in value:
-                value = self.URL_PASSWORD_RE.sub(r'\1' + self.MASK + '@', value)
+                value = self.URL_PASSWORD_RE.sub(r'\1' + FILTER_MASK + '@', value)
 
         if isinstance(key, six.string_types):
             key = key.lower()
@@ -96,7 +95,7 @@ class SensitiveDataFilter(object):
         for field in self.fields:
             if field in key or field in value:
                 # store mask as a fixed length for security
-                return self.MASK
+                return FILTER_MASK
         return original_value
 
     def filter_stacktrace(self, data):
