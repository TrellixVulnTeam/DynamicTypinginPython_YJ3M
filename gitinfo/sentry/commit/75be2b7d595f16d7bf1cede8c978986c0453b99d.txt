commit 75be2b7d595f16d7bf1cede8c978986c0453b99d
Author: Ben Vinegar <ben@benv.ca>
Date:   Tue Jun 20 11:44:09 2017 -0700

    Surface locked state, last event in hashes ui

diff --git a/src/sentry/api/serializers/models/grouphash.py b/src/sentry/api/serializers/models/grouphash.py
index ab4f64b711..5cff8e4246 100644
--- a/src/sentry/api/serializers/models/grouphash.py
+++ b/src/sentry/api/serializers/models/grouphash.py
@@ -59,6 +59,6 @@ class GroupHashSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         return {
             'id': obj.hash,
-            'latest_event': attrs['latest_event'],
+            'latestEvent': attrs['latest_event'],
             'state': self.state_text_map[obj.state],
         }
diff --git a/src/sentry/static/sentry/app/views/groupHashes.jsx b/src/sentry/static/sentry/app/views/groupHashes.jsx
index 99690261fe..d8590140ce 100644
--- a/src/sentry/static/sentry/app/views/groupHashes.jsx
+++ b/src/sentry/static/sentry/app/views/groupHashes.jsx
@@ -1,12 +1,15 @@
 import React from 'react';
+import moment from 'moment';
 
 import ApiMixin from '../mixins/apiMixin';
+import TooltipMixin from '../mixins/tooltip';
 import GroupState from '../mixins/groupState';
 
 import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
 import Pagination from '../components/pagination';
 import LinkWithConfirmation from '../components/linkWithConfirmation';
+import Link from '../components/link';
 
 import IndicatorStore from '../stores/indicatorStore';
 
@@ -16,9 +19,18 @@ const GroupHashRow = React.createClass({
   propTypes: {
     disabled: React.PropTypes.bool,
     hash: React.PropTypes.object.isRequired,
-    onChange: React.PropTypes.func.isRequired
+    onChange: React.PropTypes.func.isRequired,
+    orgId: React.PropTypes.string,
+    projectId: React.PropTypes.string,
+    groupId: React.PropTypes.string
   },
 
+  mixins: [
+    TooltipMixin({
+      selector: '.tip'
+    })
+  ],
+
   getInitialState() {
     return {
       checked: false
@@ -32,22 +44,47 @@ const GroupHashRow = React.createClass({
   },
 
   render() {
-    let {hash, disabled} = this.props;
+    let {hash, disabled, orgId, projectId, groupId} = this.props;
+
+    let locked = hash.state === 'locked';
+    let checkboxDisabled = disabled || locked;
+
+    let lockedSpanProps = {};
+    if (locked) {
+      lockedSpanProps = {
+        className: 'tip',
+        style: {textDecoration: 'line-through'},
+        title: t('This hash is currently locked (busy) and cannot be unmerged.')
+      };
+    }
+
     return (
       <tr
         key={hash.id}
         onClick={e => {
           // clicking anywhere in the row will toggle the checkbox
-          if (e.currentTarget.type !== 'input') this.toggleCheckbox();
+          if (e.currentTarget.type !== 'input' && !checkboxDisabled)
+            this.toggleCheckbox();
         }}>
         <td>
-          <h5>{hash.id}</h5>
+          <h5>
+            <span {...lockedSpanProps}>
+              {hash.id}
+            </span>
+          </h5>
+        </td>
+        <td>
+          {hash.latestEvent &&
+            <Link
+              to={`/${orgId}/${projectId}/issues/${groupId}/events/${hash.latestEvent.id}`}>
+              {moment(hash.latestEvent).fromNow()}
+            </Link>}
         </td>
         <td style={{textAlign: 'right'}}>
           <input
             type="checkbox"
             className="chk-select"
-            disabled={disabled}
+            disabled={checkboxDisabled}
             checked={this.state.checked}
             onChange={this.toggleCheckbox}
           />
@@ -153,7 +190,12 @@ const GroupHashes = React.createClass({
       },
       success: (data, _, jqXHR) => {
         this.setState({
-          hashList: this.state.hashList.filter(hash => !selectedSet.has(hash.id)),
+          hashList: this.state.hashList.map(hash => {
+            if (selectedSet.has(hash.id)) {
+              hash.state = 'locked';
+            }
+            return hash;
+          }),
           error: false
         });
         IndicatorStore.add(t('Issues successfully queued for unmerging.'), 'success', {
@@ -181,6 +223,7 @@ const GroupHashes = React.createClass({
 
   renderResults() {
     let {hashList, selectedSet} = this.state;
+    let {orgId, projectId, groupId} = this.props.params;
 
     // Need to always leave at least one hash; disable remaining checkboxes
     // if remaining count is 1
@@ -190,6 +233,7 @@ const GroupHashes = React.createClass({
     let children = hashList.map(hash => {
       return (
         <GroupHashRow
+          {...{orgId, projectId, groupId}}
           hash={hash}
           key={hash.id}
           disabled={isRemainingDisabled && !selectedSet.has(hash.id)}
@@ -210,6 +254,7 @@ const GroupHashes = React.createClass({
             <thead>
               <tr>
                 <th>{t('ID')}</th>
+                <th>{t('Last seen')}</th>
                 <th
                   className="pull-right"
                   style={{borderBottom: 'none', padding: '8px 20px'}}>
