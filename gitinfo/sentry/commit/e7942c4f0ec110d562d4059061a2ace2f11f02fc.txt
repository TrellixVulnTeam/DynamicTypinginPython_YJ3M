commit e7942c4f0ec110d562d4059061a2ace2f11f02fc
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Aug 30 15:00:30 2018 -0700

    feat(charts): Select initial series item for pie chart (#9527)
    
    This will select the first series data item for pie charts.
    
    ![image](https://user-images.githubusercontent.com/79684/44690612-6675e080-aa10-11e8-93ee-49be2f2ccd77.png)

diff --git a/docs-ui/components/pieChart.stories.js b/docs-ui/components/pieChart.stories.js
index 2b338af088..6c6a2132d6 100644
--- a/docs-ui/components/pieChart.stories.js
+++ b/docs-ui/components/pieChart.stories.js
@@ -11,19 +11,23 @@ storiesOf('Charts/PieChart', module).add(
   withInfo('PieChart')(() => (
     <PieChart
       startDate={new Date()}
-      name="Browsers"
-      data={[
+      series={[
         {
-          name: 'Chrome',
-          value: 3500,
-        },
-        {
-          name: 'Firefox',
-          value: 650,
-        },
-        {
-          name: 'Safari',
-          value: 250,
+          seriesName: 'Browsers',
+          data: [
+            {
+              name: 'Chrome',
+              value: 3500,
+            },
+            {
+              name: 'Firefox',
+              value: 650,
+            },
+            {
+              name: 'Safari',
+              value: 250,
+            },
+          ],
         },
       ]}
     />
diff --git a/src/sentry/static/sentry/app/components/charts/baseChart.jsx b/src/sentry/static/sentry/app/components/charts/baseChart.jsx
index a834ff4328..d3c0987174 100644
--- a/src/sentry/static/sentry/app/components/charts/baseChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/baseChart.jsx
@@ -59,6 +59,15 @@ class BaseChart extends React.Component {
 
     // states whether not to update chart immediately
     lazyUpdate: PropTypes.bool,
+
+    // Map of eventName -> function for echarts events
+    onEvents: PropTypes.shape({
+      highlight: PropTypes.func,
+      mouseover: PropTypes.func,
+    }),
+
+    // Forwarded Ref
+    forwardedRef: PropTypes.object,
   };
 
   static defaultProps = {
@@ -96,11 +105,13 @@ class BaseChart extends React.Component {
       lazyUpdate,
       silent,
       style,
+      onEvents,
+      forwardedRef,
     } = this.props;
 
     return (
       <ReactEchartsCore
-        ref={e => (this.chart = e)}
+        ref={forwardedRef}
         echarts={echarts}
         option={{
           color: colors || this.getColorPalette(),
@@ -113,9 +124,7 @@ class BaseChart extends React.Component {
         silent={silent}
         theme={this.props.theme}
         onChartReady={this.handleChartReady}
-        onEvents={{
-          /* TBD */
-        }}
+        onEvents={onEvents}
         opts={{
           height,
           width,
@@ -131,4 +140,10 @@ class BaseChart extends React.Component {
     );
   }
 }
-export default BaseChart;
+
+const BaseChartRef = React.forwardRef((props, ref) => (
+  <BaseChart forwardedRef={ref} {...props} />
+));
+BaseChartRef.displayName = 'forwardRef(BaseChart)';
+
+export default BaseChartRef;
diff --git a/src/sentry/static/sentry/app/components/charts/pieChart.jsx b/src/sentry/static/sentry/app/components/charts/pieChart.jsx
index 29dbf5b841..5953dc58a8 100644
--- a/src/sentry/static/sentry/app/components/charts/pieChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/pieChart.jsx
@@ -1,5 +1,7 @@
+import PropTypes from 'prop-types';
 import React from 'react';
 
+import Legend from './components/legend';
 import PieSeries from './series/pieSeries';
 import BaseChart from './baseChart';
 
@@ -7,6 +9,63 @@ class PieChart extends React.Component {
   static propTypes = {
     // We passthrough all props exception `options`
     ...BaseChart.propTypes,
+
+    // Attempt to select first series in chart (to show in center of PieChart)
+    selectOnRender: PropTypes.bool,
+  };
+
+  constructor(props) {
+    super(props);
+    this.chart = React.createRef();
+    this.isInitialSelected = true;
+    this.selected = 0;
+  }
+
+  componentDidMount() {
+    let {selectOnRender} = this.props;
+
+    if (!selectOnRender) return;
+
+    // Timeout is because we need to wait for rendering animation to complete
+    // And I haven't found a callback for this
+    setTimeout(() => this.highlight(0), 1000);
+  }
+
+  // echarts Legend does not have access to percentages (but tooltip does :/)
+  getSeriesPercentages = series => {
+    const total = series.data.reduce((acc, {value}) => acc + value, 0);
+    return series.data
+      .map(({name, value}) => [name, Math.round(value / total * 10000) / 100])
+      .reduce(
+        (acc, [name, value]) => ({
+          ...acc,
+          [name]: value,
+        }),
+        {}
+      );
+  };
+
+  // Select a series to highlight (e.g. shows details of series)
+  // This is the same event as when you hover over a series in the chart
+  highlight = dataIndex => {
+    if (!this.chart.current) return;
+
+    this.chart.current.getEchartsInstance().dispatchAction({
+      type: 'highlight',
+      seriesIndex: 0,
+      dataIndex,
+    });
+  };
+
+  // Opposite of `highlight`
+  downplay = dataIndex => {
+    if (!this.chart.current) return;
+
+    this.chart.current.getEchartsInstance().dispatchAction({
+      type: 'downplay',
+      seriesIndex: 0,
+      dataIndex,
+    });
   };
 
   render() {
@@ -19,11 +78,51 @@ class PieChart extends React.Component {
 
     // Note, we only take the first series unit!
     const [firstSeries] = series;
+    const seriesPercentages = this.getSeriesPercentages(firstSeries);
 
     return (
       <BaseChart
+        ref={this.chart}
+        onChartReady={this.handleChartReady}
+        onEvents={{
+          // when legend highlights it does NOT pass dataIndex :(
+          highlight: ({name}) => {
+            if (
+              !this.isInitialSelected ||
+              !name ||
+              firstSeries.data[this.selected].name === name
+            )
+              return;
+
+            // Unhighlight if not initial "highlight" event and
+            // if name exists (i.e. not dispatched from cDM) and
+            // highlighted series name is different than the initially selected series name
+            this.downplay(this.selected);
+            this.isInitialSelected = false;
+          },
+
+          mouseover: ({dataIndex}) => {
+            if (!this.isInitialSelected) return;
+            if (dataIndex === this.selected) return;
+            this.downplay(this.selected);
+            this.isInitialSelected = false;
+          },
+        }}
         {...props}
         options={{
+          legend: Legend({
+            orient: 'vertical',
+            align: 'left',
+            show: true,
+            left: 10,
+            top: 10,
+            bottom: 10,
+            formatter: name => {
+              return `${name} ${typeof seriesPercentages[name] !== 'undefined'
+                ? `(${seriesPercentages[name]}%)`
+                : ''}`;
+            },
+          }),
           series: [
             PieSeries({
               name: firstSeries.seriesName,
@@ -31,7 +130,9 @@ class PieChart extends React.Component {
               avoidLabelOverlap: false,
               label: {
                 normal: {
-                  formatter: '{b}\n{d}%',
+                  formatter: ({name, percent, dataIndex}) => {
+                    return `${name}\n${percent}%`;
+                  },
                   show: false,
                   position: 'center',
                 },
