commit fff7cafe298918e59c282e71a2acecc771fc0701
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Nov 18 11:53:10 2019 -0800

    ref(ts): Refactor and fix `<OrganizationGeneralSettings>` (#15629)
    
    This was making an unnecessary API call for organization details. It is behind `<OrganizationContext>` so it will have an org in scope. Also converts to ts + es6.

diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index b62846bb1b..771a0c307d 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -18,6 +18,7 @@ export type Avatar = {
 export type LightWeightOrganization = {
   id: string;
   slug: string;
+  name: string;
   access: string[];
   features: string[];
 };
diff --git a/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/index.jsx
deleted file mode 100644
index b398d17c84..0000000000
--- a/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/index.jsx
+++ /dev/null
@@ -1,175 +0,0 @@
-import {browserHistory} from 'react-router';
-import PropTypes from 'prop-types';
-import React from 'react';
-import createReactClass from 'create-react-class';
-
-import {Panel, PanelHeader} from 'app/components/panels';
-import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
-import {addLoadingMessage} from 'app/actionCreators/indicator';
-import {
-  changeOrganizationSlug,
-  removeAndRedirectToRemainingOrganization,
-  updateOrganization,
-} from 'app/actionCreators/organizations';
-import {t, tct} from 'app/locale';
-import withApi from 'app/utils/withApi';
-import Field from 'app/views/settings/components/forms/field';
-import LinkWithConfirmation from 'app/components/links/linkWithConfirmation';
-import LoadingError from 'app/components/loadingError';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-import TextBlock from 'app/views/settings/components/text/textBlock';
-
-import OrganizationSettingsForm from './organizationSettingsForm';
-
-const OrganizationGeneralSettings = createReactClass({
-  displayName: 'OrganizationGeneralSettings',
-
-  propTypes: {
-    api: PropTypes.object,
-    routes: PropTypes.arrayOf(PropTypes.object),
-  },
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      data: null,
-    };
-  },
-
-  componentDidMount() {
-    Promise.all([this.fetchData()]).then(
-      ([data]) => {
-        this.setState({data, loading: false});
-      },
-      () => {
-        this.setState({error: true, loading: false});
-      }
-    );
-  },
-
-  fetchData() {
-    return new Promise((resolve, reject) => {
-      this.props.api.request(`/organizations/${this.props.params.orgId}/`, {
-        method: 'GET',
-        success: data => {
-          resolve(data);
-        },
-        error: () => {
-          reject();
-        },
-      });
-    });
-  },
-
-  handleRemoveOrganization() {
-    const {data} = this.state || {};
-    if (!data) {
-      return;
-    }
-
-    addLoadingMessage();
-    removeAndRedirectToRemainingOrganization(this.props.api, {
-      orgId: this.props.params.orgId,
-      successMessage: `${data.name} is queued for deletion.`,
-      errorMessage: `Error removing the ${data && data.name} organization`,
-    });
-  },
-
-  handleSave(prevData, data) {
-    if (data.slug && data.slug !== prevData.slug) {
-      changeOrganizationSlug(prevData, data);
-      browserHistory.replace(`/settings/${data.slug}/`);
-    } else {
-      // TODO(dcramer): this should propagate
-      this.setState({data});
-      // Ugh `data` here is different than data in OrganizationsStore
-      updateOrganization(data);
-    }
-  },
-
-  render() {
-    const {data, loading, error} = this.state;
-    const orgId = this.props.params.orgId;
-    const access = data && new Set(data.access);
-
-    const hasProjects = data && data.projects && !!data.projects.length;
-
-    return (
-      <div>
-        <SentryDocumentTitle title={t('General Settings')} objSlug={orgId} />
-        {error && <LoadingError />}
-        {loading && !error && <LoadingIndicator />}
-
-        {data && !loading && !error && (
-          <div>
-            <SettingsPageHeader title={t('Organization Settings')} />
-            <OrganizationSettingsForm
-              {...this.props}
-              initialData={data}
-              orgId={orgId}
-              access={access}
-              onSave={this.handleSave}
-            />
-
-            {access.has('org:admin') && !data.isDefault && (
-              <Panel>
-                <PanelHeader>{t('Remove Organization')}</PanelHeader>
-                <Field
-                  label={t('Remove Organization')}
-                  help={t(
-                    'Removing this organization will delete all data including projects and their associated events.'
-                  )}
-                >
-                  <div>
-                    <LinkWithConfirmation
-                      className="btn btn-danger"
-                      priority="danger"
-                      size="small"
-                      title={t('Remove %s organization', data && data.name)}
-                      message={
-                        <div>
-                          <TextBlock>
-                            {tct(
-                              'Removing the organization, [name] is permanent and cannot be undone! Are you sure you want to continue?',
-                              {
-                                name: data && <strong>{data.name}</strong>,
-                              }
-                            )}
-                          </TextBlock>
-
-                          {hasProjects && (
-                            <div>
-                              <TextBlock noMargin>
-                                {t(
-                                  'This will also remove the following associated projects:'
-                                )}
-                              </TextBlock>
-                              <ul className="ref-projects">
-                                {data.projects.map(project => (
-                                  <li key={project.slug}>{project.slug}</li>
-                                ))}
-                              </ul>
-                            </div>
-                          )}
-                        </div>
-                      }
-                      onConfirm={this.handleRemoveOrganization}
-                    >
-                      {t('Remove Organization')}
-                    </LinkWithConfirmation>
-                  </div>
-                </Field>
-              </Panel>
-            )}
-          </div>
-        )}
-      </div>
-    );
-  },
-});
-
-export {OrganizationGeneralSettings};
-
-export default withApi(OrganizationGeneralSettings);
diff --git a/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/index.tsx b/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/index.tsx
new file mode 100644
index 0000000000..dc94be57af
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/index.tsx
@@ -0,0 +1,131 @@
+import {RouteComponentProps} from 'react-router/lib/Router';
+import {browserHistory} from 'react-router';
+import React from 'react';
+
+import {Client} from 'app/api';
+import {OrganizationDetailed} from 'app/types';
+import {Panel, PanelHeader} from 'app/components/panels';
+import {addLoadingMessage} from 'app/actionCreators/indicator';
+import {
+  changeOrganizationSlug,
+  removeAndRedirectToRemainingOrganization,
+  updateOrganization,
+} from 'app/actionCreators/organizations';
+import {t, tct} from 'app/locale';
+import Field from 'app/views/settings/components/forms/field';
+import LinkWithConfirmation from 'app/components/links/linkWithConfirmation';
+import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+import TextBlock from 'app/views/settings/components/text/textBlock';
+import withApi from 'app/utils/withApi';
+import withOrganization from 'app/utils/withOrganization';
+
+import OrganizationSettingsForm from './organizationSettingsForm';
+
+type Props = {
+  api: Client;
+  organization: OrganizationDetailed;
+} & RouteComponentProps<{orgId: string}, {}>;
+
+class OrganizationGeneralSettings extends React.Component<Props> {
+  handleRemoveOrganization = () => {
+    const {api, organization, params} = this.props;
+    if (!organization) {
+      return;
+    }
+
+    addLoadingMessage();
+    removeAndRedirectToRemainingOrganization(api, {
+      orgId: params.orgId,
+      successMessage: `${organization.name} is queued for deletion.`,
+      errorMessage: `Error removing the ${organization.name} organization`,
+    });
+  };
+
+  handleSave = (prevData: OrganizationDetailed, data: OrganizationDetailed) => {
+    if (data.slug && data.slug !== prevData.slug) {
+      changeOrganizationSlug(prevData, data);
+      browserHistory.replace(`/settings/${data.slug}/`);
+    } else {
+      // This will update OrganizationStore (as well as OrganizationsStore
+      // which is slightly incorrect because it has summaries vs a detailed org)
+      updateOrganization(data);
+    }
+  };
+
+  render() {
+    const {organization, params} = this.props;
+    const {orgId} = params;
+    const access = new Set(organization.access);
+    const hasProjects = organization.projects && !!organization.projects.length;
+
+    return (
+      <React.Fragment>
+        <SentryDocumentTitle title={t('General Settings')} objSlug={orgId} />
+        <div>
+          <SettingsPageHeader title={t('Organization Settings')} />
+          <OrganizationSettingsForm
+            {...this.props}
+            initialData={organization}
+            orgId={orgId}
+            access={access}
+            onSave={this.handleSave}
+          />
+
+          {access.has('org:admin') && !organization.isDefault && (
+            <Panel>
+              <PanelHeader>{t('Remove Organization')}</PanelHeader>
+              <Field
+                label={t('Remove Organization')}
+                help={t(
+                  'Removing this organization will delete all data including projects and their associated events.'
+                )}
+              >
+                <div>
+                  <LinkWithConfirmation
+                    className="btn btn-danger"
+                    priority="danger"
+                    size="small"
+                    title={t('Remove %s organization', organization && organization.name)}
+                    message={
+                      <div>
+                        <TextBlock>
+                          {tct(
+                            'Removing the organization, [name] is permanent and cannot be undone! Are you sure you want to continue?',
+                            {
+                              name: organization && <strong>{organization.name}</strong>,
+                            }
+                          )}
+                        </TextBlock>
+
+                        {hasProjects && (
+                          <div>
+                            <TextBlock noMargin>
+                              {t(
+                                'This will also remove the following associated projects:'
+                              )}
+                            </TextBlock>
+                            <ul className="ref-projects">
+                              {organization.projects.map(project => (
+                                <li key={project.slug}>{project.slug}</li>
+                              ))}
+                            </ul>
+                          </div>
+                        )}
+                      </div>
+                    }
+                    onConfirm={this.handleRemoveOrganization}
+                  >
+                    {t('Remove Organization')}
+                  </LinkWithConfirmation>
+                </div>
+              </Field>
+            </Panel>
+          )}
+        </div>
+      </React.Fragment>
+    );
+  }
+}
+
+export default withApi(withOrganization(OrganizationGeneralSettings));
diff --git a/tests/js/spec/views/settings/organizationGeneralSettings.spec.jsx b/tests/js/spec/views/settings/organizationGeneralSettings/index.spec.jsx
similarity index 70%
rename from tests/js/spec/views/settings/organizationGeneralSettings.spec.jsx
rename to tests/js/spec/views/settings/organizationGeneralSettings/index.spec.jsx
index 8f0c59093e..fa62fbf0d3 100644
--- a/tests/js/spec/views/settings/organizationGeneralSettings.spec.jsx
+++ b/tests/js/spec/views/settings/organizationGeneralSettings/index.spec.jsx
@@ -1,7 +1,8 @@
 import {browserHistory} from 'react-router';
-import {mountWithTheme} from 'sentry-test/enzyme';
 import React from 'react';
 
+import {initializeOrg} from 'sentry-test/initializeOrg';
+import {mountWithTheme} from 'sentry-test/enzyme';
 import OrganizationGeneralSettings from 'app/views/settings/organizationGeneralSettings';
 
 jest.mock('jquery');
@@ -16,47 +17,29 @@ jest.mock('react-router', () => {
 });
 
 describe('OrganizationGeneralSettings', function() {
-  const org = TestStubs.Organization();
-  const ENDPOINT = `/organizations/${org.slug}/`;
+  let organization;
+  let routerContext;
+  const ENDPOINT = '/organizations/org-slug/';
+
   beforeEach(function() {
-    MockApiClient.clearMockResponses();
-    MockApiClient.addMockResponse({
-      url: ENDPOINT,
-      body: TestStubs.Organization(),
-    });
     browserHistory.push.mockReset();
     browserHistory.replace.mockReset();
-  });
-
-  it('has LoadingError on error', async function() {
-    MockApiClient.clearMockResponses();
-    MockApiClient.addMockResponse({
-      url: ENDPOINT,
-      statusCode: 500,
-      body: {},
-    });
-    const wrapper = mountWithTheme(
-      <OrganizationGeneralSettings params={{orgId: org.slug}} />,
-      TestStubs.routerContext()
-    );
-
-    await tick();
-    wrapper.update();
-    expect(wrapper.find('LoadingIndicator')).toHaveLength(0);
-    expect(wrapper.find('LoadingError')).toHaveLength(1);
+    ({organization, routerContext} = initializeOrg());
   });
 
   it('can enable "early adopter"', async function() {
     const wrapper = mountWithTheme(
-      <OrganizationGeneralSettings params={{orgId: org.slug}} />,
-      TestStubs.routerContext()
+      <OrganizationGeneralSettings
+        params={{orgId: organization.slug}}
+        organization={organization}
+      />,
+      routerContext
     );
     const mock = MockApiClient.addMockResponse({
       url: ENDPOINT,
       method: 'PUT',
     });
 
-    wrapper.setState({loading: false});
     await tick();
     wrapper.update();
     wrapper.find('Switch[id="isEarlyAdopter"]').simulate('click');
@@ -70,16 +53,17 @@ describe('OrganizationGeneralSettings', function() {
 
   it('changes org slug and redirects to new slug', async function() {
     const wrapper = mountWithTheme(
-      <OrganizationGeneralSettings params={{orgId: org.slug}} />,
-      TestStubs.routerContext()
+      <OrganizationGeneralSettings
+        params={{orgId: organization.slug}}
+        organization={organization}
+      />,
+      routerContext
     );
     const mock = MockApiClient.addMockResponse({
       url: ENDPOINT,
       method: 'PUT',
     });
 
-    wrapper.setState({loading: false});
-
     await tick();
     wrapper.update();
     // Change slug
@@ -102,18 +86,18 @@ describe('OrganizationGeneralSettings', function() {
   });
 
   it('disables the entire form if user does not have write access', async function() {
-    const readOnlyOrg = TestStubs.Organization({access: ['org:read']});
-    MockApiClient.clearMockResponses();
-    MockApiClient.addMockResponse({
-      url: ENDPOINT,
-      body: readOnlyOrg,
-    });
+    ({organization, routerContext} = initializeOrg({
+      organization: TestStubs.Organization({access: ['org:read']}),
+    }));
     const wrapper = mountWithTheme(
-      <OrganizationGeneralSettings routes={[]} params={{orgId: readOnlyOrg.slug}} />,
-      TestStubs.routerContext([{organization: readOnlyOrg}])
+      <OrganizationGeneralSettings
+        routes={[]}
+        params={{orgId: organization.slug}}
+        organization={organization}
+      />,
+      routerContext
     );
 
-    wrapper.setState({loading: false});
     await tick();
     wrapper.update();
 
@@ -129,44 +113,38 @@ describe('OrganizationGeneralSettings', function() {
   });
 
   it('does not have remove organization button', async function() {
-    MockApiClient.clearMockResponses();
-    MockApiClient.addMockResponse({
-      url: ENDPOINT,
-      body: TestStubs.Organization({
-        projects: [{slug: 'project'}],
-        access: ['org:write'],
-      }),
-    });
     const wrapper = mountWithTheme(
-      <OrganizationGeneralSettings params={{orgId: org.slug}} />,
-      TestStubs.routerContext()
+      <OrganizationGeneralSettings
+        params={{orgId: organization.slug}}
+        organization={TestStubs.Organization({
+          projects: [{slug: 'project'}],
+          access: ['org:write'],
+        })}
+      />,
+      routerContext
     );
 
-    wrapper.setState({loading: false});
     await tick();
     wrapper.update();
     expect(wrapper.find('Confirm[priority="danger"]')).toHaveLength(0);
   });
 
   it('can remove organization when org admin', async function() {
-    MockApiClient.clearMockResponses();
-    MockApiClient.addMockResponse({
-      url: ENDPOINT,
-      body: TestStubs.Organization({
-        projects: [{slug: 'project'}],
-        access: ['org:admin'],
-      }),
-    });
     const wrapper = mountWithTheme(
-      <OrganizationGeneralSettings params={{orgId: org.slug}} />,
-      TestStubs.routerContext()
+      <OrganizationGeneralSettings
+        params={{orgId: organization.slug}}
+        organization={TestStubs.Organization({
+          projects: [{slug: 'project'}],
+          access: ['org:admin'],
+        })}
+      />,
+      routerContext
     );
     const mock = MockApiClient.addMockResponse({
       url: ENDPOINT,
       method: 'DELETE',
     });
 
-    wrapper.setState({loading: false});
     await tick();
     wrapper.update();
     wrapper.find('Confirm[priority="danger"]').simulate('click');
@@ -187,11 +165,13 @@ describe('OrganizationGeneralSettings', function() {
 
   it('shows require2fa switch', async function() {
     const wrapper = mountWithTheme(
-      <OrganizationGeneralSettings params={{orgId: org.slug}} />,
-      TestStubs.routerContext()
+      <OrganizationGeneralSettings
+        params={{orgId: organization.slug}}
+        organization={organization}
+      />,
+      routerContext
     );
 
-    wrapper.setState({loading: false});
     await tick();
     wrapper.update();
     expect(wrapper.find('Switch[name="require2FA"]')).toHaveLength(1);
@@ -203,11 +183,13 @@ describe('OrganizationGeneralSettings', function() {
       method: 'PUT',
     });
     const wrapper = mountWithTheme(
-      <OrganizationGeneralSettings params={{orgId: org.slug}} />,
-      TestStubs.routerContext()
+      <OrganizationGeneralSettings
+        params={{orgId: organization.slug}}
+        organization={organization}
+      />,
+      routerContext
     );
 
-    wrapper.setState({loading: false});
     await tick();
     wrapper.update();
     expect(wrapper.find('Switch[name="require2FA"]')).toHaveLength(1);
@@ -231,11 +213,13 @@ describe('OrganizationGeneralSettings', function() {
     });
 
     const wrapper = mountWithTheme(
-      <OrganizationGeneralSettings params={{orgId: org.slug}} />,
-      TestStubs.routerContext()
+      <OrganizationGeneralSettings
+        params={{orgId: organization.slug}}
+        organization={organization}
+      />,
+      routerContext
     );
 
-    wrapper.setState({loading: false});
     await tick();
     wrapper.update();
     expect(wrapper.find('Switch[name="require2FA"]')).toHaveLength(1);
@@ -269,11 +253,13 @@ describe('OrganizationGeneralSettings', function() {
     });
 
     const wrapper = mountWithTheme(
-      <OrganizationGeneralSettings params={{orgId: org.slug}} />,
-      TestStubs.routerContext()
+      <OrganizationGeneralSettings
+        params={{orgId: organization.slug}}
+        organization={organization}
+      />,
+      routerContext
     );
 
-    wrapper.setState({loading: false});
     await tick();
     wrapper.update();
     wrapper.find('Switch[name="require2FA"]').simulate('click');
@@ -295,7 +281,7 @@ describe('OrganizationGeneralSettings', function() {
   });
 
   it('renders join request switch with experiment', async function() {
-    const organization = TestStubs.Organization({
+    organization = TestStubs.Organization({
       experiments: {ImprovedInvitesExperiment: 'join_request'},
     });
     const wrapper = mountWithTheme(
@@ -303,14 +289,13 @@ describe('OrganizationGeneralSettings', function() {
       TestStubs.routerContext([{organization}])
     );
 
-    wrapper.setState({loading: false});
     await tick();
     wrapper.update();
     expect(wrapper.find('Switch[name="allowJoinRequests"]').exists()).toBe(true);
   });
 
   it('does not render join request switch in experiment control', async function() {
-    const organization = TestStubs.Organization({
+    organization = TestStubs.Organization({
       experiments: {ImprovedInvitesExperiment: 'none'},
     });
     const wrapper = mountWithTheme(
@@ -318,7 +303,6 @@ describe('OrganizationGeneralSettings', function() {
       TestStubs.routerContext([{organization}])
     );
 
-    wrapper.setState({loading: false});
     await tick();
     wrapper.update();
     expect(wrapper.find('Switch[name="allowJoinRequests"]').exists()).toBe(false);
@@ -326,11 +310,13 @@ describe('OrganizationGeneralSettings', function() {
 
   it('does not render join request switch without experiments', async function() {
     const wrapper = mountWithTheme(
-      <OrganizationGeneralSettings params={{orgId: org.slug}} />,
-      TestStubs.routerContext()
+      <OrganizationGeneralSettings
+        params={{orgId: organization.slug}}
+        organization={organization}
+      />,
+      routerContext
     );
 
-    wrapper.setState({loading: false});
     await tick();
     wrapper.update();
     expect(wrapper.find('Switch[name="allowJoinRequests"]').exists()).toBe(false);
