commit 66dfb6a9bdabd2f2b189d3769b920f6e16ba61ac
Author: Jess MacQueen <jess@getsentry.com>
Date:   Mon May 9 14:22:54 2016 -0700

    python pr feedback

diff --git a/setup.py b/setup.py
index 4fd3778e15..355f99a8d5 100755
--- a/setup.py
+++ b/setup.py
@@ -112,7 +112,7 @@ install_requires = [
     'lxml>=3.4.1',
     'mock>=0.8.0,<1.1',
     'petname>=1.7,<1.8',
-    'Pillow==3.2.0',
+    'Pillow>=3.2.0,<3.3.0',
     'progressbar>=2.2,<2.4',
     'psycopg2>=2.6.0,<2.7.0',
     'pytest>=2.6.4,<2.7.0',
diff --git a/src/sentry/api/endpoints/useravatar.py b/src/sentry/api/endpoints/useravatar.py
index c6e0ad5f7b..2e898e6e78 100644
--- a/src/sentry/api/endpoints/useravatar.py
+++ b/src/sentry/api/endpoints/useravatar.py
@@ -2,6 +2,8 @@ from __future__ import absolute_import
 
 from PIL import Image
 
+from django.conf import settings
+
 from rest_framework import status
 from rest_framework.response import Response
 
@@ -39,6 +41,8 @@ class UserAvatarEndpoint(UserEndpoint):
         photo = None
         if photo_string:
             photo_string = photo_string.decode('base64')
+            if len(photo_string) > settings.SENTRY_MAX_AVATAR_SIZE:
+                return Response(status=status.HTTP_400_BAD_REQUEST)
             with Image.open(StringIO(photo_string)) as img:
                 width, height = img.size
                 if not self.is_valid_size(width, height):
@@ -60,7 +64,10 @@ class UserAvatarEndpoint(UserEndpoint):
             return Response(status=status.HTTP_400_BAD_REQUEST)
 
         if avatar_type:
-            avatar.avatar_type = avatar_type
+            try:
+                avatar.avatar_type = [i for i, n in UserAvatar.AVATAR_TYPES if n == avatar_type][0]
+            except IndexError:
+                return Response(status=status.HTTP_400_BAD_REQUEST)
 
         avatar.save()
         return Response(serialize(user, request.user))
diff --git a/src/sentry/api/serializers/models/user.py b/src/sentry/api/serializers/models/user.py
index 0efe90a81e..8b5fc94141 100644
--- a/src/sentry/api/serializers/models/user.py
+++ b/src/sentry/api/serializers/models/user.py
@@ -45,11 +45,11 @@ class UserSerializer(Serializer):
         try:
             avatar = UserAvatar.objects.get(user=obj)
         except UserAvatar.DoesNotExist:
-            avatar = {'avatarType': 'letter_avatar', 'avatar_uuid': None}
+            avatar = {'avatarType': 'letter_avatar', 'avatarUuid': None}
         else:
             avatar = {
-                'avatarType': avatar.avatar_type,
-                'avatar_uuid': avatar.ident if avatar.file else None
+                'avatarType': avatar.get_avatar_type(),
+                'avatarUuid': avatar.ident if avatar.file else None
             }
         d['avatar'] = avatar
 
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 7de2b58b46..3f7e170961 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -953,6 +953,9 @@ SENTRY_WATCHERS = (
      "--config={}".format(os.path.normpath(os.path.join(PROJECT_ROOT, os.pardir, os.pardir, "webpack.config.js")))]),
 )
 
+# Max file size for avatar photo uploads
+SENTRY_MAX_AVATAR_SIZE = 5000000
+
 # statuspage.io support
 STATUS_PAGE_ID = None
 STATUS_PAGE_API_HOST = 'statuspage.io'
diff --git a/src/sentry/migrations/0249_auto__add_useravatar.py b/src/sentry/migrations/0249_auto__add_useravatar.py
index 1ec0c2252e..3c6217c5e6 100644
--- a/src/sentry/migrations/0249_auto__add_useravatar.py
+++ b/src/sentry/migrations/0249_auto__add_useravatar.py
@@ -13,8 +13,8 @@ class Migration(SchemaMigration):
             ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
             ('user', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(related_name='avatar', unique=True, to=orm['sentry.User'])),
             ('file', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.File'], unique=True, null=True, on_delete=models.SET_NULL)),
-            ('ident', self.gf('django.db.models.fields.CharField')(max_length=36, unique=True, null=True, db_index=True)),
-            ('avatar_type', self.gf('django.db.models.fields.CharField')(default='letter_avatar', max_length=20)),
+            ('ident', self.gf('django.db.models.fields.CharField')(max_length=32, unique=True, null=True, db_index=True)),
+            ('avatar_type', self.gf('django.db.models.fields.PositiveSmallIntegerField')(default=0)),
         ))
         db.send_create_signal('sentry', ['UserAvatar'])
 
@@ -89,7 +89,7 @@ class Migration(SchemaMigration):
         'sentry.broadcast': {
             'Meta': {'object_name': 'Broadcast'},
             'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2016, 5, 13, 0, 0)', 'null': 'True', 'blank': 'True'}),
+            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2016, 5, 16, 0, 0)', 'null': 'True', 'blank': 'True'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
             'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
@@ -565,10 +565,10 @@ class Migration(SchemaMigration):
         },
         'sentry.useravatar': {
             'Meta': {'object_name': 'UserAvatar'},
-            'avatar_type': ('django.db.models.fields.CharField', [], {'default': "'letter_avatar'", 'max_length': '20'}),
+            'avatar_type': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
             'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']", 'unique': 'True', 'null': 'True', 'on_delete': 'models.SET_NULL'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'ident': ('django.db.models.fields.CharField', [], {'max_length': '36', 'unique': 'True', 'null': 'True', 'db_index': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True', 'db_index': 'True'}),
             'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'avatar'", 'unique': 'True', 'to': "orm['sentry.User']"})
         },
         'sentry.useroption': {
diff --git a/src/sentry/migrations/0250_default_users_to_gravatar.py b/src/sentry/migrations/0250_default_users_to_gravatar.py
index cd52dc5e70..14139fdbc4 100644
--- a/src/sentry/migrations/0250_default_users_to_gravatar.py
+++ b/src/sentry/migrations/0250_default_users_to_gravatar.py
@@ -12,7 +12,7 @@ class Migration(DataMigration):
             orm.UserAvatar.objects.create(user=user,
                                           file=None,
                                           ident=None,
-                                          avatar_type='gravatar')
+                                          avatar_type=2)
 
     def backwards(self, orm):
         "Write your backwards methods here."
@@ -82,7 +82,7 @@ class Migration(DataMigration):
         'sentry.broadcast': {
             'Meta': {'object_name': 'Broadcast'},
             'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2016, 5, 13, 0, 0)', 'null': 'True', 'blank': 'True'}),
+            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2016, 5, 16, 0, 0)', 'null': 'True', 'blank': 'True'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
             'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
@@ -558,10 +558,10 @@ class Migration(DataMigration):
         },
         'sentry.useravatar': {
             'Meta': {'object_name': 'UserAvatar'},
-            'avatar_type': ('django.db.models.fields.CharField', [], {'default': "'letter_avatar'", 'max_length': '20'}),
+            'avatar_type': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
             'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']", 'unique': 'True', 'null': 'True', 'on_delete': 'models.SET_NULL'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'ident': ('django.db.models.fields.CharField', [], {'max_length': '36', 'unique': 'True', 'null': 'True', 'db_index': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True', 'db_index': 'True'}),
             'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'avatar'", 'unique': 'True', 'to': "orm['sentry.User']"})
         },
         'sentry.useroption': {
diff --git a/src/sentry/models/user.py b/src/sentry/models/user.py
index 3614ee6ed9..8b2836465a 100644
--- a/src/sentry/models/user.py
+++ b/src/sentry/models/user.py
@@ -63,7 +63,9 @@ class User(BaseModel, AbstractBaseUser):
     def delete(self):
         if self.username == 'sentry':
             raise Exception('You cannot delete the "sentry" user as it is required by Sentry.')
-        self.avatar.first().delete()
+        avatar = self.avatar.first()
+        if avatar:
+            avatar.delete()
         return super(User, self).delete()
 
     def save(self, *args, **kwargs):
@@ -92,12 +94,10 @@ class User(BaseModel, AbstractBaseUser):
         return self.username
 
     def get_avatar_type(self):
-        from sentry.models import UserAvatar
-        try:
-            avatar = UserAvatar.objects.get(user=self)
-        except UserAvatar.DoesNotExist:
-            return 'letter_avatar'
-        return avatar.avatar_type
+        avatar = self.avatar.first()
+        if avatar:
+            return avatar.get_avatar_type()
+        return 'letter_avatar'
 
     def merge_to(from_user, to_user):
         # TODO: we could discover relations automatically and make this useful
diff --git a/src/sentry/models/useravatar.py b/src/sentry/models/useravatar.py
index 564b1f4203..38225ef03a 100644
--- a/src/sentry/models/useravatar.py
+++ b/src/sentry/models/useravatar.py
@@ -19,17 +19,17 @@ class UserAvatar(Model):
     __core__ = False
 
     AVATAR_TYPES = (
-        ('letter_avatar', 'LetterAvatar'),
-        ('upload', 'Upload'),
-        ('gravatar', 'Gravatar'),
+        (0, 'letter_avatar'),
+        (1, 'upload'),
+        (2, 'gravatar'),
     )
 
     ALLOWED_SIZES = (20, 48, 52, 64, 80, 96, 120)
 
     user = FlexibleForeignKey('sentry.User', unique=True, related_name='avatar')
     file = FlexibleForeignKey('sentry.File', unique=True, null=True, on_delete=models.SET_NULL)
-    ident = models.CharField(max_length=36, unique=True, db_index=True, null=True)
-    avatar_type = models.CharField(max_length=20, choices=AVATAR_TYPES, default='letter_avatar')
+    ident = models.CharField(max_length=32, unique=True, db_index=True, null=True)
+    avatar_type = models.PositiveSmallIntegerField(default=0)
 
     class Meta:
         app_label = 'sentry'
@@ -37,7 +37,7 @@ class UserAvatar(Model):
 
     def save(self, *args, **kwargs):
         if not self.ident:
-            self.ident = str(uuid.uuid4())
+            self.ident = uuid.uuid4().hex
         return super(UserAvatar, self).save(*args, **kwargs)
 
     def delete(self, *args, **kwargs):
@@ -45,6 +45,9 @@ class UserAvatar(Model):
             self.file.delete()
         return super(UserAvatar, self).delete(*args, **kwargs)
 
+    def get_avatar_type(self):
+        return [n for i, n in self.AVATAR_TYPES if i == self.avatar_type][0]
+
     def get_cache_key(self, size):
         return 'avatar:%s:%s' % (self.user_id, size)
 
@@ -58,7 +61,7 @@ class UserAvatar(Model):
             size = min(self.ALLOWED_SIZES, key=lambda x: abs(x - size))
         cache_key = self.get_cache_key(size)
         photo = cache.get(cache_key)
-        if not photo:
+        if photo is None:
             photo_file = self.file.getfile()
             with Image.open(photo_file) as image:
                 image = image.resize((size, size))
diff --git a/src/sentry/static/sentry/app/components/avatar.jsx b/src/sentry/static/sentry/app/components/avatar.jsx
index a24dcd9ddc..2dda7ae2bc 100644
--- a/src/sentry/static/sentry/app/components/avatar.jsx
+++ b/src/sentry/static/sentry/app/components/avatar.jsx
@@ -41,7 +41,7 @@ const Avatar = React.createClass({
   },
 
   buildProfileUrl() {
-    let url = '/avatar/' + this.props.user.avatar.avatar_uuid + '/';
+    let url = '/avatar/' + this.props.user.avatar.avatarUuid + '/';
     if (this.props.size) {
       url += '?' + $.param({s: this.props.size});
     }
diff --git a/src/sentry/static/sentry/app/components/avatarSettings.jsx b/src/sentry/static/sentry/app/components/avatarSettings.jsx
index ca743aa762..bec87c75dd 100644
--- a/src/sentry/static/sentry/app/components/avatarSettings.jsx
+++ b/src/sentry/static/sentry/app/components/avatarSettings.jsx
@@ -297,7 +297,7 @@ const AvatarCropper = React.createClass({
   },
 
   getImgSrc() {
-    let uuid = this.props.user.avatar.avatar_uuid;
+    let uuid = this.props.user.avatar.avatarUuid;
     let photoUrl = uuid && '/avatar/' + uuid + '/';
     return this.props.savedDataUrl || this.state.objectURL || photoUrl;
   },
diff --git a/tests/js/spec/components/avatar.spec.jsx b/tests/js/spec/components/avatar.spec.jsx
index 540f179086..73c6c7e679 100644
--- a/tests/js/spec/components/avatar.spec.jsx
+++ b/tests/js/spec/components/avatar.spec.jsx
@@ -22,7 +22,7 @@ describe('Avatar', function() {
       let user = Object.assign({}, USER, {
         avatar: {
           avatarType: 'gravatar',
-          avatar_uuid: '2d641b5d-8c74-44de-9cb6-fbd54701b35e'
+          avatarUuid: '2d641b5d-8c74-44de-9cb6-fbd54701b35e'
         }
       });
       let avatar = TestUtils.renderIntoDocument(<Avatar user={user}/>);
@@ -37,7 +37,7 @@ describe('Avatar', function() {
       let user = Object.assign({}, USER, {
         avatar: {
           avatarType: 'upload',
-          avatar_uuid: '2d641b5d-8c74-44de-9cb6-fbd54701b35e'
+          avatarUuid: '2d641b5d-8c74-44de-9cb6-fbd54701b35e'
         }
       });
       let avatar = TestUtils.renderIntoDocument(<Avatar user={user}/>);
@@ -52,7 +52,7 @@ describe('Avatar', function() {
       let user = Object.assign({}, USER, {
         avatar: {
           avatarType: 'letter_avatar',
-          avatar_uuid: '2d641b5d-8c74-44de-9cb6-fbd54701b35e'
+          avatarUuid: '2d641b5d-8c74-44de-9cb6-fbd54701b35e'
         }
       });
       let avatar = TestUtils.renderIntoDocument(<Avatar user={user}/>);
diff --git a/tests/sentry/api/endpoints/test_user_avatar.py b/tests/sentry/api/endpoints/test_user_avatar.py
index f58202de2a..83f952cb28 100644
--- a/tests/sentry/api/endpoints/test_user_avatar.py
+++ b/tests/sentry/api/endpoints/test_user_avatar.py
@@ -20,7 +20,7 @@ class UserAvatarTest(APITestCase):
         assert response.status_code == 200, response.content
         assert response.data['id'] == str(user.id)
         assert response.data['avatar']['avatarType'] == 'letter_avatar'
-        assert response.data['avatar']['avatar_uuid'] is None
+        assert response.data['avatar']['avatarUuid'] is None
 
     def test_put(self):
         user = self.create_user(email='a@example.com')
@@ -34,7 +34,7 @@ class UserAvatarTest(APITestCase):
 
         avatar = UserAvatar.objects.get(user=user)
         assert response.status_code == 200, response.content
-        assert avatar.avatar_type == 'gravatar'
+        assert avatar.get_avatar_type() == 'gravatar'
 
     def test_put_bad(self):
         user = self.create_user(email='a@example.com')
@@ -48,7 +48,11 @@ class UserAvatarTest(APITestCase):
 
         avatar = UserAvatar.objects.get(user=user)
         assert response.status_code == 400
-        assert avatar.avatar_type == 'letter_avatar'
+        assert avatar.get_avatar_type() == 'letter_avatar'
+
+        response = self.client.put(url, data={'avatar_type': 'foo'}, format='json')
+        assert response.status_code == 400
+        assert avatar.get_avatar_type() == 'letter_avatar'
 
     def test_put_forbidden(self):
         user = self.create_user(email='a@example.com')
