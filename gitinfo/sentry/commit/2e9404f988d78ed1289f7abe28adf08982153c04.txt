commit 2e9404f988d78ed1289f7abe28adf08982153c04
Author: Matej Minar <matej.minar@sentry.io>
Date:   Tue Mar 24 06:36:26 2020 +0100

    feat(ui): Add Release v2 project picker (#17664)
    
    * feat(ui): Present project selector when no project in URL
    
    * feat(ui): Lock project selection in globalSelectionHeader
    
    * final touches
    
    * ref(ui): Improved translation of locked message
    
    * feat(ui): Add withProjectsBySlugs HoC
    
    * feat(ui): Add ability to specify projects to choose from in ContextPickerModal
    
    * feat(ui): Add ability to specify projects to choose from in GlobalSelectionHeader
    
    * ref(ui): Add fetch of available projects to release v2 detail to fill project picker with the right options
    
    * ref(ui): Renamed withProjectsBySlugs to withProjectsSpecified
    
    * ref(ui): Project picker extracted to it's own component
    
    * ref(ui): Rename projectSlugs prop to specificProjectSlugs, typo

diff --git a/src/sentry/static/sentry/app/components/contextPickerModal.tsx b/src/sentry/static/sentry/app/components/contextPickerModal.tsx
index c43ef77690..95e50623fc 100644
--- a/src/sentry/static/sentry/app/components/contextPickerModal.tsx
+++ b/src/sentry/static/sentry/app/components/contextPickerModal.tsx
@@ -144,6 +144,7 @@ class ContextPickerModal extends React.Component<Props> {
       replaceRouterParams(nextPath, {
         orgId: org,
         projectId: projects[0].slug,
+        project: this.props.projects.find(p => p.slug === projects[0].slug)?.id,
       })
     );
   };
@@ -333,7 +334,12 @@ class ContextPickerModal extends React.Component<Props> {
 type ContainerProps = Omit<
   Props,
   'projects' | 'loading' | 'organizations' | 'organization' | 'onSelectOrganization'
->;
+> & {
+  /**
+   * List of slugs we want to be able to choose from
+   */
+  projectSlugs?: string[];
+};
 
 type ContainerState = {
   organizations?: Organization[];
@@ -368,9 +374,15 @@ const ContextPickerModalContainer = createReactClass<ContainerProps, ContainerSt
   },
 
   render() {
+    const {projectSlugs} = this.props; // eslint-disable-line react/prop-types
+
     if (this.state.selectedOrganization) {
       return (
-        <Projects orgId={this.state.selectedOrganization} allProjects>
+        <Projects
+          orgId={this.state.selectedOrganization}
+          allProjects={!projectSlugs?.length}
+          slugs={projectSlugs}
+        >
           {renderProps => this.renderModal(renderProps)}
         </Projects>
       );
diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx
index 88b811f2d4..96e3f3e8ef 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx
@@ -33,7 +33,7 @@ import TimeRangeSelector from 'app/components/organizations/timeRangeSelector';
 import Tooltip from 'app/components/tooltip';
 import space from 'app/styles/space';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
-import withProjects from 'app/utils/withProjects';
+import withProjectsSpecified from 'app/utils/withProjectsSpecified';
 
 import {getStateFromQuery} from './utils';
 import Header from './header';
@@ -50,10 +50,20 @@ class GlobalSelectionHeader extends React.Component {
     router: PropTypes.object,
 
     /**
-     * List of projects to display in project selector
+     * List of projects to display in project selector (comes from HoC)
      */
     projects: PropTypes.arrayOf(SentryTypes.Project).isRequired,
 
+    /**
+     * Slugs of projects to display in project selector (this affects the ^^^projects returned from HoC)
+     */
+    specificProjectSlugs: PropTypes.arrayOf(PropTypes.string),
+
+    /**
+     * Remove ability to select multiple projects even if organization has feature 'global-views'
+     */
+    disableMultipleProjectSelection: PropTypes.bool,
+
     /**
      * Whether or not the projects are currently being loaded in
      */
@@ -137,6 +147,23 @@ class GlobalSelectionHeader extends React.Component {
     onUpdateEnvironments: PropTypes.func,
     onChangeTime: PropTypes.func,
     onUpdateTime: PropTypes.func,
+
+    /**
+     * If true, there will be a back to issues stream icon link
+     */
+    showIssueStreamLink: PropTypes.bool,
+
+    /**
+     * If true, there will be a project settings icon link
+     * (forceProject prop needs to be present to know the right project slug)
+     */
+    showProjectSettingsLink: PropTypes.bool,
+
+    /**
+     * Subject that will be used in a tooltip that is shown on a lock icon hover
+     * E.g. This 'issue' is unique to a project
+     */
+    lockedMessageSubject: PropTypes.string,
   };
 
   static defaultProps = {
@@ -144,6 +171,7 @@ class GlobalSelectionHeader extends React.Component {
     showEnvironmentSelector: true,
     showDateSelector: true,
     resetParamsOnChange: [],
+    disableMultipleProjectSelection: false,
   };
 
   constructor(props) {
@@ -569,7 +597,12 @@ class GlobalSelectionHeader extends React.Component {
       showDateSelector,
       showEnvironmentSelector,
       allowClearTimeRange,
+      showIssueStreamLink,
+      showProjectSettingsLink,
+      lockedMessageSubject,
       timeRangeHint,
+      specificProjectSlugs,
+      disableMultipleProjectSelection,
     } = this.props;
     const {period, start, end, utc} = this.props.selection.datetime || {};
 
@@ -582,8 +615,12 @@ class GlobalSelectionHeader extends React.Component {
     return (
       <Header className={className}>
         <HeaderItemPosition>
-          {shouldForceProject && this.getBackButton()}
-          <Projects orgId={organization.slug} limit={PROJECTS_PER_PAGE} globalSelection>
+          {showIssueStreamLink && this.getBackButton()}
+          <Projects
+            orgId={organization.slug}
+            limit={PROJECTS_PER_PAGE}
+            slugs={specificProjectSlugs}
+          >
             {({projects, initiallyLoaded, hasMore, onSearch, fetching}) => {
               const paginatedProjectSelectorCallbacks = {
                 onScroll: ({clientHeight, scrollHeight, scrollTop}) => {
@@ -616,8 +653,13 @@ class GlobalSelectionHeader extends React.Component {
                   value={this.state.projects || this.props.selection.projects}
                   onChange={this.handleChangeProjects}
                   onUpdate={this.handleUpdateProjects}
-                  multi={this.hasMultipleProjectSelection()}
+                  multi={
+                    !disableMultipleProjectSelection && this.hasMultipleProjectSelection()
+                  }
                   {...(loadingProjects ? paginatedProjectSelectorCallbacks : {})}
+                  showIssueStreamLink={showIssueStreamLink}
+                  showProjectSettingsLink={showProjectSettingsLink}
+                  lockedMessageSubject={lockedMessageSubject}
                 />
               );
             }}
@@ -670,7 +712,9 @@ class GlobalSelectionHeader extends React.Component {
   }
 }
 
-export default withProjects(withRouter(withGlobalSelection(GlobalSelectionHeader)));
+export default withProjectsSpecified(
+  withRouter(withGlobalSelection(GlobalSelectionHeader))
+);
 
 const BackButtonWrapper = styled('div')`
   display: flex;
diff --git a/src/sentry/static/sentry/app/components/organizations/headerItem.tsx b/src/sentry/static/sentry/app/components/organizations/headerItem.tsx
index daba3dff04..ccc18901cf 100644
--- a/src/sentry/static/sentry/app/components/organizations/headerItem.tsx
+++ b/src/sentry/static/sentry/app/components/organizations/headerItem.tsx
@@ -16,7 +16,7 @@ type DefaultProps = {
 
 type Props = {
   icon: React.ReactElement;
-  lockedMessage: string;
+  lockedMessage: React.ReactNode;
   settingsLink: string;
   hint?: string;
   hasChanges: boolean;
@@ -37,7 +37,7 @@ class HeaderItem extends React.Component<Props> {
     hasSelected: PropTypes.bool,
     isOpen: PropTypes.bool,
     locked: PropTypes.bool,
-    lockedMessage: PropTypes.string,
+    lockedMessage: PropTypes.element,
     settingsLink: PropTypes.string,
     hint: PropTypes.string,
   };
diff --git a/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx b/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
index a9f0de9b4c..060c30cb5a 100644
--- a/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
@@ -8,7 +8,7 @@ import SentryTypes from 'app/sentryTypes';
 import {analytics} from 'app/utils/analytics';
 import {ALL_ACCESS_PROJECTS} from 'app/constants/globalSelectionHeader';
 import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
-import {t} from 'app/locale';
+import {t, tct} from 'app/locale';
 import Button from 'app/components/button';
 import ProjectSelector from 'app/components/projectSelector';
 import InlineSvg from 'app/components/inlineSvg';
@@ -29,6 +29,9 @@ export default class MultipleProjectSelector extends React.PureComponent {
     multi: PropTypes.bool,
     shouldForceProject: PropTypes.bool,
     forceProject: SentryTypes.Project,
+    showIssueStreamLink: PropTypes.bool,
+    showProjectSettingsLink: PropTypes.bool,
+    lockedMessageSubject: PropTypes.string,
   };
 
   static contextTypes = {
@@ -37,6 +40,7 @@ export default class MultipleProjectSelector extends React.PureComponent {
 
   static defaultProps = {
     multi: true,
+    lockedMessageSubject: t('page'),
   };
 
   constructor() {
@@ -136,9 +140,9 @@ export default class MultipleProjectSelector extends React.PureComponent {
 
   renderProjectName() {
     const {location} = this.context.router;
-    const {forceProject, multi, organization} = this.props;
+    const {forceProject, multi, organization, showIssueStreamLink} = this.props;
 
-    if (forceProject && multi) {
+    if (showIssueStreamLink && forceProject && multi) {
       return (
         <Tooltip title={t('Issues Stream')} position="bottom">
           <StyledLink
@@ -160,6 +164,19 @@ export default class MultipleProjectSelector extends React.PureComponent {
     return '';
   }
 
+  getLockedMessage() {
+    const {forceProject, lockedMessageSubject} = this.props;
+
+    if (forceProject) {
+      return tct('This [subject] is unique to the [projectSlug] project', {
+        subject: lockedMessageSubject,
+        projectSlug: forceProject.slug,
+      });
+    }
+
+    return tct('This [subject] is unique to a project', {subject: lockedMessageSubject});
+  }
+
   render() {
     const {
       value,
@@ -170,6 +187,7 @@ export default class MultipleProjectSelector extends React.PureComponent {
       organization,
       shouldForceProject,
       forceProject,
+      showProjectSettingsLink,
     } = this.props;
     const selectedProjectIds = new Set(value);
 
@@ -186,13 +204,11 @@ export default class MultipleProjectSelector extends React.PureComponent {
         data-test-id="global-header-project-selector"
         icon={<StyledInlineSvg src="icon-project" />}
         locked
-        lockedMessage={
-          forceProject
-            ? t(`This issue is unique to the ${forceProject.slug} project`)
-            : t('This issue is unique to a project')
-        }
+        lockedMessage={this.getLockedMessage()}
         settingsLink={
-          forceProject && `/settings/${organization.slug}/projects/${forceProject.slug}/`
+          forceProject &&
+          showProjectSettingsLink &&
+          `/settings/${organization.slug}/projects/${forceProject.slug}/`
         }
       >
         {this.renderProjectName()}
diff --git a/src/sentry/static/sentry/app/stores/projectsStore.jsx b/src/sentry/static/sentry/app/stores/projectsStore.jsx
index f5dd47016f..94c6cec7e9 100644
--- a/src/sentry/static/sentry/app/stores/projectsStore.jsx
+++ b/src/sentry/static/sentry/app/stores/projectsStore.jsx
@@ -171,9 +171,13 @@ const ProjectsStore = Reflux.createStore({
     return this.getAll().find(project => project.slug === slug);
   },
 
-  getState() {
+  getBySlugs(slugs) {
+    return this.getAll().filter(project => slugs.includes(project.slug));
+  },
+
+  getState(slugs) {
     return {
-      projects: this.getAll(),
+      projects: slugs ? this.getBySlugs(slugs) : this.getAll(),
       loading: this.loading,
     };
   },
diff --git a/src/sentry/static/sentry/app/utils/withProjectsSpecified.tsx b/src/sentry/static/sentry/app/utils/withProjectsSpecified.tsx
new file mode 100644
index 0000000000..a9519da105
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/withProjectsSpecified.tsx
@@ -0,0 +1,56 @@
+import React from 'react';
+import Reflux from 'reflux';
+import createReactClass from 'create-react-class';
+import PropTypes from 'prop-types';
+
+import getDisplayName from 'app/utils/getDisplayName';
+import ProjectsStore from 'app/stores/projectsStore';
+import SentryTypes from 'app/sentryTypes';
+import {Project} from 'app/types';
+
+type InjectedProjectsProps = {
+  projects: Project[];
+  loadingProjects?: boolean;
+};
+
+type State = {
+  projects: Project[];
+  loading: boolean;
+};
+
+/**
+ * Higher order component that takes specificProjectSlugs and provides list of that projects from ProjectsStore
+ */
+const withProjectsSpecified = <P extends InjectedProjectsProps>(
+  WrappedComponent: React.ComponentType<P>
+) =>
+  createReactClass<
+    Omit<P, keyof InjectedProjectsProps> & Partial<InjectedProjectsProps>,
+    State
+  >({
+    displayName: `withProjectsSpecified(${getDisplayName(WrappedComponent)})`,
+    propTypes: {
+      organization: SentryTypes.Organization,
+      project: SentryTypes.Project,
+      specificProjectSlugs: PropTypes.arrayOf(PropTypes.string),
+    },
+    mixins: [Reflux.listenTo(ProjectsStore, 'onProjectUpdate') as any],
+    getInitialState() {
+      return ProjectsStore.getState(this.props.specificProjectSlugs);
+    },
+
+    onProjectUpdate() {
+      this.setState(ProjectsStore.getState(this.props.specificProjectSlugs));
+    },
+    render() {
+      return (
+        <WrappedComponent
+          {...this.props}
+          projects={this.state.projects}
+          loadingProjects={this.state.loading}
+        />
+      );
+    },
+  });
+
+export default withProjectsSpecified;
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupDetails.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupDetails.jsx
index e900ef23ca..9b5b5cf73f 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupDetails.jsx
@@ -275,6 +275,9 @@ const GroupDetails = createReactClass({
             forceProject={project}
             showDateSelector={false}
             shouldForceProject
+            lockedMessageSubject={t('issue')}
+            showIssueStreamLink
+            showProjectSettingsLink
           />
         )}
         {isLoading ? (
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/index.tsx
index 7ae445ee47..95740b8f6d 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/index.tsx
@@ -9,14 +9,15 @@ import AsyncView from 'app/views/asyncView';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import NoProjectMessage from 'app/components/noProjectMessage';
 import {PageContent} from 'app/styles/organization';
-import Alert from 'app/components/alert';
 import withOrganization from 'app/utils/withOrganization';
 import routeTitleGen from 'app/utils/routeTitle';
 import {URL_PARAM} from 'app/constants/globalSelectionHeader';
 import {formatVersion} from 'app/utils/formatters';
+import AsyncComponent from 'app/components/asyncComponent';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
 
 import ReleaseHeader from './releaseHeader';
+import PickProjectToContinue from './pickProjectToContinue';
 
 type ReleaseContext = {release: Release; project: ReleaseProject};
 const ReleaseContext = React.createContext<ReleaseContext>({} as ReleaseContext);
@@ -59,6 +60,7 @@ class ReleasesV2Detail extends AsyncView<Props, State> {
 
     const query = {
       ...pick(location.query, [...Object.values(URL_PARAM)]),
+      // TODO(releasesV2): summaryStatsPeriod + healthStatsPeriod?
       health: 1,
     };
 
@@ -72,21 +74,19 @@ class ReleasesV2Detail extends AsyncView<Props, State> {
     ];
   }
 
-  renderError(error: Error, disableLog = false, disableReport = false) {
-    const {errors} = this.state;
-    const has404Errors = Object.values(errors).find(e => e?.status === 404);
-
-    if (has404Errors) {
-      return (
-        <PageContent>
-          <Alert type="error" icon="icon-circle-exclamation">
-            {t('This release may not be in your selected project')}
-          </Alert>
-        </PageContent>
-      );
+  handleError(e, args) {
+    const {router, location} = this.props;
+    const possiblyWrongProject = e.status === 404 || e.status === 403;
+
+    if (possiblyWrongProject) {
+      // refreshing this page without project ID will bring up a project selector
+      router.replace({
+        ...location,
+        query: {...location.query, project: undefined},
+      });
+      return;
     }
-
-    return super.renderError(error, disableLog, disableReport);
+    super.handleError(e, args);
   }
 
   renderBody() {
@@ -119,12 +119,56 @@ class ReleasesV2Detail extends AsyncView<Props, State> {
   }
 }
 
-const ReleasesV2DetailContainer = (props: Props) => (
-  <React.Fragment>
-    <GlobalSelectionHeader organization={props.organization} />
-    <ReleasesV2Detail {...props} />
-  </React.Fragment>
-);
+class ReleasesV2DetailContainer extends AsyncComponent<Props> {
+  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {
+    const {organization, params} = this.props;
+    // fetch projects this release belongs to
+    return [
+      [
+        'release',
+        `/organizations/${organization.slug}/releases/${encodeURIComponent(
+          params.release
+        )}/`,
+      ],
+    ];
+  }
+
+  isProjectMissingInUrl() {
+    const projectId = this.props.location.query.project;
+
+    return !projectId || typeof projectId !== 'string';
+  }
+
+  renderBody() {
+    const {organization, params, router} = this.props;
+    const {projects} = this.state.release;
+
+    if (this.isProjectMissingInUrl()) {
+      return (
+        <PickProjectToContinue
+          orgSlug={organization.slug}
+          version={params.release}
+          router={router}
+          projects={projects}
+        />
+      );
+    }
+
+    return (
+      <React.Fragment>
+        <GlobalSelectionHeader
+          organization={organization}
+          lockedMessageSubject={t('release')}
+          shouldForceProject={projects.length === 1}
+          forceProject={projects.length === 1 ? projects[0] : undefined}
+          specificProjectSlugs={projects.map(p => p.slug)}
+          disableMultipleProjectSelection
+        />
+        <ReleasesV2Detail {...this.props} />
+      </React.Fragment>
+    );
+  }
+}
 
 const StyledPageContent = styled(PageContent)`
   padding: 0;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/pickProjectToContinue.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/pickProjectToContinue.tsx
new file mode 100644
index 0000000000..91a9988c08
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/pickProjectToContinue.tsx
@@ -0,0 +1,57 @@
+import React from 'react';
+import * as ReactRouter from 'react-router';
+import styled from '@emotion/styled';
+
+import {openModal} from 'app/actionCreators/modal';
+import ContextPickerModalContainer from 'app/components/contextPickerModal';
+import {ReleaseProject} from 'app/types';
+
+type Props = {
+  orgSlug: string;
+  version: string;
+  router: ReactRouter.InjectedRouter;
+  projects: ReleaseProject[];
+};
+
+const PickProjectToContinue = ({orgSlug, version, router, projects}: Props) => {
+  const path = `/organizations/${orgSlug}/releases-v2/${encodeURIComponent(
+    version
+  )}/?project=`;
+
+  // if the project in URL is missing, but this release belongs to only one project, redirect there
+  if (projects.length === 1) {
+    router.replace(path + projects[0].id);
+    return null;
+  }
+
+  openModal(
+    ({Header, Body}) => (
+      <ContextPickerModalContainer
+        Header={Header}
+        Body={Body}
+        needOrg={false}
+        needProject
+        nextPath={`${path}:project`}
+        onFinish={pathname => {
+          router.replace(pathname);
+        }}
+        projectSlugs={projects.map(p => p.slug)}
+      />
+    ),
+    {
+      onClose() {
+        // if a user closes the modal (either via button, Esc, clicking outside)
+        router.push(`/organizations/${orgSlug}/releases-v2/`);
+      },
+    }
+  );
+
+  return <ContextPickerBackground />;
+};
+
+const ContextPickerBackground = styled('div')`
+  height: 100vh;
+  width: 100%;
+`;
+
+export default PickProjectToContinue;
diff --git a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
index 0719783bfd..820ebf77d2 100644
--- a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
+++ b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
@@ -623,6 +623,7 @@ describe('GlobalSelectionHeader', function() {
           organization={initialData.organization}
           shouldForceProject
           forceProject={initialData.organization.projects[0]}
+          showIssueStreamLink
         />,
         initialData.routerContext
       );
