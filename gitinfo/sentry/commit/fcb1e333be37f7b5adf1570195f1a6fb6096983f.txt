commit fcb1e333be37f7b5adf1570195f1a6fb6096983f
Author: Alex Hofsteede <alex@hofsteede.com>
Date:   Fri Dec 8 08:17:48 2017 +1300

    fix: Clean up ip_address defaulting. (#6700)
    
    * fix: Deal with bad message interface data.
    
    Add a cast to deal with the Message interface being sent as a string.
    Ideally this would actuallly just be in the schema and we would reject
    it, but we have existing logic to insert 'message' into
    'sentry.interface.Message' that I don't want to break.
    
    fixes: SENTRY-58P
    
    * fix: Clean up ip_address defaulting.
    
    fixes SENTRY-58M

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index a1adeb722f..10f963237f 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -25,6 +25,7 @@ from time import time
 
 from sentry import filters
 from sentry.cache import default_cache
+from sentry.constants import VERSION_LENGTH
 from sentry.interfaces.csp import Csp
 from sentry.event_manager import EventManager
 from sentry.models import EventError, ProjectKey, upload_minidump, merge_minidump_event
@@ -297,14 +298,14 @@ class ClientApiHelper(object):
 
     def parse_client_as_sdk(self, value):
         if not value:
-            return
+            return {}
         try:
             name, version = value.split('/', 1)
         except ValueError:
             try:
                 name, version = value.split(' ', 1)
             except ValueError:
-                return
+                return {}
         return {
             'name': name,
             'version': version,
@@ -348,25 +349,6 @@ class ClientApiHelper(object):
         if 'sentry.interfaces.User' in data:
             data['sentry.interfaces.User'].pop('ip_address', None)
 
-    def ensure_has_ip(self, data, ip_address, set_if_missing=True):
-        got_ip = False
-        ip = data.get('sentry.interfaces.Http', {}) \
-            .get('env', {}).get('REMOTE_ADDR')
-        if ip:
-            if ip == '{{auto}}':
-                data['sentry.interfaces.Http']['env']['REMOTE_ADDR'] = ip_address
-            got_ip = True
-
-        ip = data.get('sentry.interfaces.User', {}).get('ip_address')
-        if ip:
-            if ip == '{{auto}}':
-                data['sentry.interfaces.User']['ip_address'] = ip_address
-            got_ip = True
-
-        if not got_ip and set_if_missing:
-            data.setdefault('sentry.interfaces.User', {})[
-                'ip_address'] = ip_address
-
     def insert_data_to_database(self, data, start_time=None, from_reprocessing=False):
         if start_time is None:
             start_time = time()
@@ -561,30 +543,17 @@ class LazyData(MutableMapping):
         # mutates data
         data = helper.validate_data(data)
 
-        if 'sdk' not in data:
-            sdk = helper.parse_client_as_sdk(auth.client)
-            if sdk:
-                data['sdk'] = sdk
-            else:
-                data['sdk'] = {}
-
-        data['sdk']['client_ip'] = self._client_ip
-
         data['project'] = self._project.id
         data['key_id'] = self._key.id
-
-        # we always fill in the IP so that filters and other items can
-        # access it (even if it eventually gets scrubbed)
-        helper.ensure_has_ip(
-            data,
-            self._client_ip,
-            set_if_missing=auth.is_public or
-            data.get('platform') in ('javascript', 'cocoa', 'objc')
-        )
+        data['sdk'] = data.get('sdk') or helper.parse_client_as_sdk(auth.client)
+        data['sdk']['client_ip'] = self._client_ip
 
         # mutates data
         manager = EventManager(data, version=auth.version)
-        manager.normalize()
+        manager.normalize(request_env={
+            'client_ip': self._client_ip,
+            'auth': self._auth,
+        })
 
         self._data = data
         self._decoded = True
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 97305cef08..706a17354d 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -43,7 +43,7 @@ from sentry.utils.cache import default_cache
 from sentry.utils.db import get_db_engine
 from sentry.utils.safe import safe_execute, trim, trim_dict
 from sentry.utils.strings import truncatechars
-from sentry.utils.validators import is_float, validate_ip
+from sentry.utils.validators import is_float
 from sentry.stacktraces import normalize_in_app
 
 
@@ -292,7 +292,8 @@ class EventManager(object):
         self.data = data
         self.version = version
 
-    def normalize(self):
+    def normalize(self, request_env=None):
+        request_env = request_env or {}
         data = self.data
         errors = data.get('errors', [])
 
@@ -313,6 +314,7 @@ class EventManager(object):
             'tags': lambda v: [(text(v_k).replace(' ', '-').strip(), text(v_v).strip()) for (v_k, v_v) in dict(v).items()],
             'timestamp': lambda v: process_timestamp(v),
             'platform': lambda v: v if v in VALID_PLATFORMS else 'other',
+            'sentry.interfaces.Message': lambda v: v if isinstance(v, dict) else {'message': v},
 
             # These can be sent as lists and need to be converted to {'values': [...]}
             'exception': to_values,
@@ -341,10 +343,19 @@ class EventManager(object):
             if msg_if.get('message') != msg_str:
                 msg_if.setdefault('formatted', msg_str)
 
+        # Fill in ip addresses marked as {{auto}}
+        client_ip = request_env.get('client_ip')
+        if client_ip:
+            if data.get('sentry.interfaces.Http', {}).get(
+                    'env', {}).get('REMOTE_ADDR') == '{{auto}}':
+                data['sentry.interfaces.Http']['env']['REMOTE_ADDR'] = client_ip
+
+            if data.get('sentry.interfaces.User', {}).get('ip_address') == '{{auto}}':
+                data['sentry.interfaces.User']['ip_address'] = client_ip
+
         # Validate main event body and tags against schema
         is_valid, event_errors = validate_and_default_interface(data, 'event')
         errors.extend(event_errors)
-
         if 'tags' in data:
             is_valid, tag_errors = validate_and_default_interface(data['tags'], 'tags', name='tags')
             errors.extend(tag_errors)
@@ -376,6 +387,7 @@ class EventManager(object):
                 log('Discarded invalid value for interface: %s (%r)', k, value, exc_info=True)
                 errors.append({'type': EventError.INVALID_DATA, 'name': k, 'value': value})
 
+        # Additional data coercion and defaulting
         level = data.get('level') or DEFAULT_LOG_LEVEL
         if isinstance(level, int) or (isinstance(level, six.string_types) and level.isdigit()):
             level = LOG_LEVELS.get(int(level), DEFAULT_LOG_LEVEL)
@@ -405,17 +417,18 @@ class EventManager(object):
         data['timestamp'] = timestamp
         data['received'] = float(timezone.now().strftime('%s'))
 
-        data.setdefault('culprit', None)
-        data.setdefault('transaction', None)
-        data.setdefault('server_name', None)
-        data.setdefault('site', None)
         data.setdefault('checksum', None)
-        data.setdefault('fingerprint', None)
-        data.setdefault('platform', None)
+        data.setdefault('culprit', None)
         data.setdefault('dist', None)
         data.setdefault('environment', None)
         data.setdefault('extra', {})
+        data.setdefault('fingerprint', None)
+        data.setdefault('logger', DEFAULT_LOGGER_NAME)
+        data.setdefault('platform', None)
+        data.setdefault('server_name', None)
+        data.setdefault('site', None)
         data.setdefault('tags', [])
+        data.setdefault('transaction', None)
 
         # Fix case where legacy apps pass 'environment' as a tag
         # instead of a top level key.
@@ -438,25 +451,20 @@ class EventManager(object):
             exception['values'][0]['stacktrace'] = stacktrace
             del data['sentry.interfaces.Stacktrace']
 
-        if 'sentry.interfaces.Http' in data:
-            try:
-                ip_address = validate_ip(
-                    data['sentry.interfaces.Http'].get('env', {}).get('REMOTE_ADDR'),
-                    required=False,
-                )
-                if ip_address:
-                    data.setdefault(
-                        'sentry.interfaces.User',
-                        {}).setdefault(
-                        'ip_address',
-                        ip_address)
-            except ValueError:
-                pass
+        # If there is no User ip_addres, update it either from the Http interface
+        # or the client_ip of the request.
+        auth = request_env.get('auth')
+        is_public = auth and auth.is_public
+        add_ip_platforms = ('javascript', 'cocoa', 'objc')
 
-        # Trim values
-        logger = data.get('logger', DEFAULT_LOGGER_NAME)
-        data['logger'] = trim(logger.strip(), 64)
+        http_ip = data.get('sentry.interfaces.Http', {}).get('env', {}).get('REMOTE_ADDR')
+        if http_ip:
+            data.setdefault('sentry.interfaces.User', {}).setdefault('ip_address', http_ip)
+        elif client_ip and (is_public or data.get('platform') in add_ip_platforms):
+            data.setdefault('sentry.interfaces.User', {}).setdefault('ip_address', client_ip)
 
+        # Trim values
+        data['logger'] = trim(data['logger'].strip(), 64)
         trim_dict(data['extra'], max_size=settings.SENTRY_MAX_EXTRA_VARIABLE_SIZE)
 
         if data['culprit']:
diff --git a/src/sentry/interfaces/http.py b/src/sentry/interfaces/http.py
index a55137bdfe..a1885359d1 100644
--- a/src/sentry/interfaces/http.py
+++ b/src/sentry/interfaces/http.py
@@ -21,6 +21,7 @@ from sentry.interfaces.base import Interface, InterfaceValidationError
 from sentry.interfaces.schemas import validate_and_default_interface
 from sentry.utils.safe import trim, trim_dict, trim_pairs
 from sentry.utils.http import heuristic_decode
+from sentry.utils.validators import validate_ip
 from sentry.web.helpers import render_to_string
 
 # Instead of relying on a list of hardcoded methods, just loosly match
@@ -191,9 +192,17 @@ class Http(Interface):
         if body:
             body = trim(body, settings.SENTRY_MAX_HTTP_BODY_SIZE)
 
+        env = data.get('env', {})
+        # TODO (alex) This could also be accomplished with schema (with formats)
+        if 'REMOTE_ADDR' in env:
+            try:
+                validate_ip(env['REMOTE_ADDR'], required=False)
+            except ValueError:
+                del env['REMOTE_ADDR']
+
         kwargs['inferred_content_type'] = inferred_content_type
         kwargs['cookies'] = trim_pairs(format_cookies(cookies))
-        kwargs['env'] = trim_dict(data.get('env') or {})
+        kwargs['env'] = trim_dict(env)
         kwargs['headers'] = trim_pairs(headers)
         kwargs['data'] = fix_broken_encoding(body)
         kwargs['url'] = urlunsplit((scheme, netloc, path, '', ''))
diff --git a/src/sentry/interfaces/schemas.py b/src/sentry/interfaces/schemas.py
index 60a25bf10a..5e7b437003 100644
--- a/src/sentry/interfaces/schemas.py
+++ b/src/sentry/interfaces/schemas.py
@@ -384,6 +384,7 @@ EVENT_SCHEMA = {
 
         # Other reserved keys. (some are added in processing)
         'project': {'type': ['number', 'string']},
+        'key_id': {},
         'errors': {'type': 'array'},
         'checksum': {},
         'site': {},
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index 83b76b99b6..1624b6d85c 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -33,9 +33,9 @@ class BaseAPITest(TestCase):
         self.pk = self.project.key_set.get_or_create()[0]
         self.helper = self.helper_cls(agent='Awesome Browser', ip_address='198.51.100.0')
 
-    def validate_and_normalize(self, data):
+    def validate_and_normalize(self, data, request_env=None):
         data = self.helper.validate_data(data)
-        return EventManager(data).normalize()
+        return EventManager(data).normalize(request_env=request_env)
 
 
 class AuthFromRequestTest(BaseAPITest):
@@ -536,14 +536,15 @@ class EnsureHasIpTest(BaseAPITest):
     def test_with_remote_addr(self):
         inp = {
             'sentry.interfaces.Http': {
+                'url': 'http://example.com/',
                 'env': {
                     'REMOTE_ADDR': '192.168.0.1',
                 },
             },
         }
         out = inp.copy()
-        self.helper.ensure_has_ip(out, '127.0.0.1')
-        assert inp == out
+        self.validate_and_normalize(out, {'client_ip': '127.0.0.1'})
+        assert out['sentry.interfaces.Http']['env']['REMOTE_ADDR'] == '192.168.0.1'
 
     def test_with_user_ip(self):
         inp = {
@@ -552,8 +553,8 @@ class EnsureHasIpTest(BaseAPITest):
             },
         }
         out = inp.copy()
-        self.helper.ensure_has_ip(out, '127.0.0.1')
-        assert inp == out
+        self.validate_and_normalize(out, {'client_ip': '127.0.0.1'})
+        assert out['sentry.interfaces.User']['ip_address'] == '192.168.0.1'
 
     def test_with_user_auto_ip(self):
         out = {
@@ -561,33 +562,38 @@ class EnsureHasIpTest(BaseAPITest):
                 'ip_address': '{{auto}}',
             },
         }
-        self.helper.ensure_has_ip(out, '127.0.0.1')
+        self.validate_and_normalize(out, {'client_ip': '127.0.0.1'})
         assert out['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
 
     def test_without_ip_values(self):
         out = {
+            'platform': 'javascript',
             'sentry.interfaces.User': {},
             'sentry.interfaces.Http': {
+                'url': 'http://example.com/',
                 'env': {},
             },
         }
-        self.helper.ensure_has_ip(out, '127.0.0.1')
+        self.validate_and_normalize(out, {'client_ip': '127.0.0.1'})
         assert out['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
 
     def test_without_any_values(self):
-        out = {}
-        self.helper.ensure_has_ip(out, '127.0.0.1')
+        out = {
+            'platform': 'javascript',
+        }
+        self.validate_and_normalize(out, {'client_ip': '127.0.0.1'})
         assert out['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
 
     def test_with_http_auto_ip(self):
         out = {
             'sentry.interfaces.Http': {
+                'url': 'http://example.com/',
                 'env': {
                     'REMOTE_ADDR': '{{auto}}',
                 },
             },
         }
-        self.helper.ensure_has_ip(out, '127.0.0.1')
+        self.validate_and_normalize(out, {'client_ip': '127.0.0.1'})
         assert out['sentry.interfaces.Http']['env']['REMOTE_ADDR'] == '127.0.0.1'
 
     def test_with_all_auto_ip(self):
@@ -596,12 +602,13 @@ class EnsureHasIpTest(BaseAPITest):
                 'ip_address': '{{auto}}',
             },
             'sentry.interfaces.Http': {
+                'url': 'http://example.com/',
                 'env': {
                     'REMOTE_ADDR': '{{auto}}',
                 },
             },
         }
-        self.helper.ensure_has_ip(out, '127.0.0.1')
+        self.validate_and_normalize(out, {'client_ip': '127.0.0.1'})
         assert out['sentry.interfaces.Http']['env']['REMOTE_ADDR'] == '127.0.0.1'
         assert out['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
 
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index e332c91b0a..9daab0d1a1 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -912,6 +912,9 @@ class EventManagerTest(TransactionTestCase):
         }
 
     def test_message_attribute_goes_to_formatted(self):
+        # The combining of 'message' and 'sentry.interfaces.Message' is a bit
+        # of a compatibility hack, and ideally we would just enforce a stricter
+        # schema instead of combining them like this.
         manager = EventManager(
             self.make_event(
                 **{
@@ -929,6 +932,22 @@ class EventManagerTest(TransactionTestCase):
             'formatted': 'world hello',
         }
 
+    def test_message_attribute_interface_both_strings(self):
+        manager = EventManager(
+            self.make_event(
+                **{
+                    'sentry.interfaces.Message': 'a plain string',
+                    'message': 'another string',
+                }
+            )
+        )
+        manager.normalize()
+        event = manager.save(self.project.id)
+        assert event.data['sentry.interfaces.Message'] == {
+            'message': 'a plain string',
+            'formatted': 'another string',
+        }
+
     def test_throws_when_matches_discarded_hash(self):
         manager = EventManager(
             self.make_event(
