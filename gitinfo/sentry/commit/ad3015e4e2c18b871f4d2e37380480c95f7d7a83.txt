commit ad3015e4e2c18b871f4d2e37380480c95f7d7a83
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Thu Aug 30 11:48:27 2018 +0200

    feat: Make js loader async (#9536)
    
    * feat: Capture calls to SDK and replay them
    
    * feat: Add data-lazy for loader
    
    * ref: Refactor the loader
    
    * Shave off ~200B of loader size
    
    * fix: Add minified version of loader
    
    * feat: Add forceLoad function
    
    * feat: Add minified loader version
    
    * fix: ref loader to add params in function call
    
    * feat: Make on load optional

diff --git a/src/sentry/templates/sentry/js-sdk-loader.js.tmpl b/src/sentry/templates/sentry/js-sdk-loader.js.tmpl
index d69690629e..ca6d2618ce 100644
--- a/src/sentry/templates/sentry/js-sdk-loader.js.tmpl
+++ b/src/sentry/templates/sentry/js-sdk-loader.js.tmpl
@@ -1,83 +1,169 @@
 {% load sentry_helpers %}// Sentry Loader
-(function(_window, _document, _script, _onerror, _onunhandledrejection) {
+(function(_window, _document, _script, _onerror, _onunhandledrejection, _namespace, _publicKey, _sdkBundleUrl, _config) {
+  var lazy = true;
+  var forceLoad = false;
+
+  for (var i = 0; i < document.scripts.length; i++) {
+    if (document.scripts[i].src.indexOf(_publicKey) > -1) {
+      lazy = !(document.scripts[i].dataset.lazy === 'no');
+      break;
+    }
+  }
+
+  var injected = false;
+  var onLoadCallback;
+
   // Create a namespace and attach function that will store captured exception
   // Because functions are also objects, we can attach the queue itself straight to it and save some bytes
-  var queue = function(exception) {
-    queue.data.push(exception);
+  var queue = function(content) {
+    // content.e = error
+    // content.p = promise rejection
+    // content.f = function call the Sentry
+    if (
+      (content.e || content.p || (content.f && content.f.indexOf('capture') > -1)) &&
+      lazy
+    ) {
+      // We only want to lazy inject/load the sdk bundle if
+      // an error or promise rejection occured
+      // OR someone called `capture...` on the SDK
+      injectSdk(onLoadCallback);
+    }
+    queue.data.push(content);
   };
   queue.data = [];
 
-  // Store reference to the old `onerror` handler and override it with our own function
-  // that will just push exceptions to the queue and call through old handler if we found one
-  var _oldOnerror = _window[_onerror];
-  _window[_onerror] = function(message, source, lineno, colno, exception) {
-    // Use keys as "data type" to save some characters"
-    queue({
-      e: [].slice.call(arguments)
-    });
+  function injectSdk(callback) {
+    if (injected) {
+      return;
+    }
+    injected = true;
 
-    if (_oldOnerror) _oldOnerror.apply(_window, arguments);
-  };
+    // Create a `script` tag with provided SDK `url` and attach it just before the first, already existing `script` tag
+    // Scripts that are dynamically created and added to the document are async by default,
+    // they don't block rendering and execute as soon as they download, meaning they could
+    // come out in the wrong order. Because of that we don't need async=1 as GA does.
+    // it was probably(?) a legacy behavior that they left to not modify few years old snippet
+    // https://www.html5rocks.com/en/tutorials/speed/script-loading/
+    var _currentScriptTag = _document.getElementsByTagName(_script)[0];
+    var _newScriptTag = _document.createElement(_script);
+    _newScriptTag.src = _sdkBundleUrl;
+    _newScriptTag.crossorigin = 'anonymous';
 
-  // Do the same store/queue/call operations for `onunhandledrejection` event
-  var _oldOnunhandledrejection = _window[_onunhandledrejection];
-  _window[_onunhandledrejection] = function(exception) {
-    queue({
-      p: exception.reason
+    // Once our SDK is loaded
+    _newScriptTag.addEventListener('load', function() {
+      try {
+        // Restore onerror/onunhandledrejection handlers
+        _window[_onerror] = _oldOnerror;
+        _window[_onunhandledrejection] = _oldOnunhandledrejection;
+
+        var SDK = _window[_namespace];
+
+        var oldInit = SDK.init;
+
+        // Configure it using provided DSN and config object
+        SDK.init = function(options) {
+          var target = _config;
+          for (var key in options) {
+            if (Object.prototype.hasOwnProperty.call(options, key)) {
+              target[key] = options[key];
+            }
+          }
+          oldInit(target);
+        };
+
+        sdkLoaded(callback, SDK);
+      } catch (o_O) {
+        console.error(o_O);
+      }
     });
-    if (_oldOnunhandledrejection) _oldOnunhandledrejection.apply(_window, arguments);
-  };
 
-  // Create a `script` tag with provided SDK `url` and attach it just before the first, already existing `script` tag
-  // Scripts that are dynamically created and added to the document are async by default,
-  // they don't block rendering and execute as soon as they download, meaning they could
-  // come out in the wrong order. Because of that we don't need async=1 as GA does.
-  // it was probably(?) a legacy behavior that they left to not modify few years old snippet
-  // https://www.html5rocks.com/en/tutorials/speed/script-loading/
-  var _currentScriptTag = _document.getElementsByTagName(_script)[0];
-  var _newScriptTag = _document.createElement(_script);
-  _newScriptTag.src = '{{ jsSdkUrl|safe }}';
-  _newScriptTag.crossorigin = 'anonymous';
-
-  // Once our SDK is loaded
-  _newScriptTag.addEventListener('load', function() {
-    try {
-      // Restore onerror/onunhandledrejection handlers
-      _window[_onerror] = _oldOnerror;
-      _window[_onunhandledrejection] = _oldOnunhandledrejection;
+    _currentScriptTag.parentNode.insertBefore(_newScriptTag, _currentScriptTag);
+  }
 
+  function sdkLoaded(callback, SDK) {
+    try {
+      if (callback) {
+        callback();
+      }
       var data = queue.data;
-      var SDK = _window.Sentry;
 
-      // Configure it using provided DSN and config object
-      var options = {{ config|to_json|safe }};
-      for (var key in window.SENTRY_OPTIONS) {
-        options[key] = SENTRY_OPTIONS[key];
+      // We want to replay all calls to Sentry first to make sure init is called before
+      // we call all our internal error handlers
+      for (var i = 0; i < data.length; i++) {
+        if (data[i].f) {
+          var call = data[i];
+          SDK[call.f].apply(SDK, call.a);
+        }
       }
-      SDK.init(options);
-
-      var event = document.createEvent('HTMLEvents');
-      event.initEvent('sentryLoaded', true, true);
-      document.dispatchEvent(event);
 
       // Because we installed the SDK, at this point we have an access to TraceKit's handler,
       // which can take care of browser differences (eg. missing exception argument in onerror)
       var tracekitErrorHandler = _window[_onerror];
 
-      // And capture all previously caught exceptions
-      if (data.length) {
-        for (var i = 0; i < data.length; i++) {
-          if (data[i].e) {
-            tracekitErrorHandler.apply(_window, data[i].e);
-          } else if (data[i].p) {
-            SDK.captureException(data[i].p);
-          }
+      // And now capture all previously caught exceptions
+      for (var i = 0; i < data.length; i++) {
+        if (data[i].e) {
+          tracekitErrorHandler.apply(_window, data[i].e);
+        } else if (data[i].p) {
+          SDK.captureException(data[i].p);
         }
       }
     } catch (o_O) {
-      console.log(o_O);
+      console.error(o_O);
     }
+  }
+
+  // We don't want to _window.Sentry = _window.Sentry || { ... } since we want to make sure
+  // that the first Sentry "instance" is our with onLoad
+  _window[_namespace] = {
+    onLoad: function(callback) {
+      if (lazy && !forceLoad) {
+        onLoadCallback = callback;
+      } else {
+        injectSdk(callback);
+      }
+    },
+    forceLoad: function() {
+      forceLoad = true;
+      if (lazy) {
+        setTimeout(function() {
+          injectSdk(onLoadCallback);
+        });
+      }
+    },
+  };
+
+  [
+    'init',
+    'addBreadcrumb',
+    'captureMessage',
+    'captureException',
+    'captureEvent',
+    'configureScope',
+  ].forEach(function(f) {
+    _window[_namespace][f] = function() {
+      queue({f: f, a: arguments});
+    };
   });
 
-  _currentScriptTag.parentNode.insertBefore(_newScriptTag, _currentScriptTag);
-})(window, document, 'script', 'onerror', 'onunhandledrejection');
+  // Store reference to the old `onerror` handler and override it with our own function
+  // that will just push exceptions to the queue and call through old handler if we found one
+  var _oldOnerror = _window[_onerror];
+  _window[_onerror] = function(message, source, lineno, colno, exception) {
+    // Use keys as "data type" to save some characters"
+    queue({
+      e: [].slice.call(arguments),
+    });
+
+    if (_oldOnerror) _oldOnerror.apply(_window, arguments);
+  };
+
+  // Do the same store/queue/call operations for `onunhandledrejection` event
+  var _oldOnunhandledrejection = _window[_onunhandledrejection];
+  _window[_onunhandledrejection] = function(exception) {
+    queue({
+      p: exception.reason,
+    });
+    if (_oldOnunhandledrejection) _oldOnunhandledrejection.apply(_window, arguments);
+  };
+})(window, document, "script", "onerror", "onunhandledrejection", "Sentry", "{{ publicKey|safe }}", "{{ jsSdkUrl|safe }}", {{ config|to_json|safe }});
diff --git a/src/sentry/templates/sentry/js-sdk-loader.min.js.tmpl b/src/sentry/templates/sentry/js-sdk-loader.min.js.tmpl
index 919fccb014..2d9e88354a 100644
--- a/src/sentry/templates/sentry/js-sdk-loader.min.js.tmpl
+++ b/src/sentry/templates/sentry/js-sdk-loader.min.js.tmpl
@@ -1,2 +1,3 @@
-{% load sentry_helpers %}(function(a,b,e,f,h){var g=function(a){g.data.push(a)};g.data=[];var l=a[f];a[f]=function(d,b,c,f,h){g({e:[].slice.call(arguments)});l&&l.apply(a,arguments)};var n=a[h];a[h]=function(d){g({p:d.reason});n&&n.apply(a,arguments)};var k=b.getElementsByTagName(e)[0];b=b.createElement(e);b.src="{{ jsSdkUrl|safe }}";b.crossorigin="anonymous";b.addEventListener("load",function(){try{a[f]=l;a[h]=n;var d=g.data,b=a.Sentry,c={{ config|to_json|safe }},
-m;for(m in window.SENTRY_OPTIONS)c[m]=SENTRY_OPTIONS[m];b.init(c);var e=document.createEvent("HTMLEvents");e.initEvent("sentryLoaded",!0,!0);document.dispatchEvent(e);var k=a[f];if(d.length)for(c=0;c<d.length;c++)d[c].e?k.apply(a,d[c].e):d[c].p&&b.captureException(d[c].p)}catch(p){console.log(p)}});k.parentNode.insertBefore(b,k)})(window,document,"script","onerror","onunhandledrejection");
+{% load sentry_helpers %}(function(d,t,u,k,l,m,y,z,v){function n(a){if(!w){w=!0;var g=t.getElementsByTagName(u)[0],c=t.createElement(u);c.src=z;c.crossorigin="anonymous";c.addEventListener("load",function(){try{d[k]=p;d[l]=q;var b=d[m],c=b.init;b.init=function(a){for(var b in a)Object.prototype.hasOwnProperty.call(a,b)&&(v[b]=a[b]);c(v)};C(a,b)}catch(A){console.error(A)}});g.parentNode.insertBefore(c,g)}}function C(a,g){try{a&&a();for(var c=h.data,b=0;b<c.length;b++)if(c[b].f){var e=c[b];g[e.f].apply(g,e.a)}var f=d[k];for(b=
+0;b<c.length;b++)c[b].e?f.apply(d,c[b].e):c[b].p&&g.captureException(c[b].p)}catch(B){console.error(B)}}for(var e=!0,x=!1,f=0;f<document.scripts.length;f++)if(-1<document.scripts[f].src.indexOf(y)){e="no"!==document.scripts[f].dataset.lazy;break}var w=!1,r,h=function(a){(a.e||a.p||a.f&&-1<a.f.indexOf("capture"))&&e&&n(r);h.data.push(a)};h.data=[];d[m]={onLoad:function(a){e&&!x?r=a:n(a)},forceLoad:function(){x=!0;e&&setTimeout(function(){n(r)})}};"init addBreadcrumb captureMessage captureException captureEvent configureScope".split(" ").forEach(function(a){d[m][a]=
+function(){h({f:a,a:arguments})}});var p=d[k];d[k]=function(a,e,c,b,f){h({e:[].slice.call(arguments)});p&&p.apply(d,arguments)};var q=d[l];d[l]=function(a){h({p:a.reason});q&&q.apply(d,arguments)}})(window,document,"script","onerror","onunhandledrejection","Sentry","{{ publicKey|safe }}","{{ jsSdkUrl|safe }}",{{ config|to_json|safe }});
diff --git a/src/sentry/web/frontend/js_sdk_loader.py b/src/sentry/web/frontend/js_sdk_loader.py
index a7ca543149..b009024a38 100644
--- a/src/sentry/web/frontend/js_sdk_loader.py
+++ b/src/sentry/web/frontend/js_sdk_loader.py
@@ -34,9 +34,11 @@ class JavaScriptSdkLoader(BaseView):
             tmpl = 'sentry/js-sdk-loader.js.tmpl'
 
         config = Config(key.project)
+
         context = {
             'config': config.get_project_key_config(key),
-            'jsSdkUrl': sdk_url
+            'jsSdkUrl': sdk_url,
+            'publicKey': public_key
         }
 
         response = render_to_response(tmpl, context, content_type="text/javascript")
