commit 549015f4bfcc0adb1d114e8d51ab8f32c242ba99
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Aug 30 10:40:37 2016 -0700

    Add tools for listing and removing authenticators (#4042)
    
    - Add authenticators to user details endpoint
    - Add authenticator deletion endpoint (superuser only)

diff --git a/src/sentry/api/endpoints/user_authenticator_details.py b/src/sentry/api/endpoints/user_authenticator_details.py
new file mode 100644
index 0000000000..2eec7f823c
--- /dev/null
+++ b/src/sentry/api/endpoints/user_authenticator_details.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.bases.user import UserEndpoint
+from sentry.api.permissions import SuperuserPermission
+from sentry.models import Authenticator
+
+
+class UserAuthenticatorDetailsEndpoint(UserEndpoint):
+    # XXX(dcramer): this requires superuser until we sort out how it will be
+    # used from the React app (which will require some kind of double
+    # verification)
+    permission_classes = (SuperuserPermission,)
+
+    def delete(self, request, user, auth_id):
+        Authenticator.objects.filter(
+            user=user,
+            id=auth_id,
+        ).delete()
+        return Response(status=204)
diff --git a/src/sentry/api/endpoints/user_details.py b/src/sentry/api/endpoints/user_details.py
index 3da683b2c9..7f04e26f45 100644
--- a/src/sentry/api/endpoints/user_details.py
+++ b/src/sentry/api/endpoints/user_details.py
@@ -6,6 +6,7 @@ from rest_framework.response import Response
 
 from sentry.api.bases.user import UserEndpoint
 from sentry.api.serializers import serialize
+from sentry.api.serializers.models.user import DetailedUserSerializer
 from sentry.models import User
 
 
@@ -64,7 +65,7 @@ class AdminUserSerializer(BaseUserSerializer):
 
 class UserDetailsEndpoint(UserEndpoint):
     def get(self, request, user):
-        data = serialize(user, request.user)
+        data = serialize(user, request.user, DetailedUserSerializer())
         return Response(data)
 
     def put(self, request, user):
diff --git a/src/sentry/api/serializers/models/user.py b/src/sentry/api/serializers/models/user.py
index 8b7b76c0a3..c0ccfebfa3 100644
--- a/src/sentry/api/serializers/models/user.py
+++ b/src/sentry/api/serializers/models/user.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import six
 
+from collections import defaultdict
 from django.conf import settings
 
 from sentry.app import env
@@ -93,7 +94,7 @@ class UserSerializer(Serializer):
 
         if attrs['identities'] is not None:
             d['identities'] = [{
-                'id': i.id,
+                'id': six.text_type(i.id),
                 'name': i.ident,
                 'organization': {
                     'slug': i.auth_provider.organization.slug,
@@ -108,3 +109,34 @@ class UserSerializer(Serializer):
             } for i in attrs['identities']]
 
         return d
+
+
+class DetailedUserSerializer(UserSerializer):
+    def get_attrs(self, item_list, user):
+        attrs = super(DetailedUserSerializer, self).get_attrs(item_list, user)
+
+        authenticators = defaultdict(list)
+        queryset = Authenticator.objects.filter(
+            user__in=item_list,
+        )
+        for auth in queryset:
+            # ignore things that aren't user controlled (like recovery codes)
+            if auth.interface.is_backup_interface:
+                continue
+            authenticators[auth.user_id].append(auth)
+
+        for item in item_list:
+            attrs[item]['authenticators'] = authenticators[item.id]
+
+        return attrs
+
+    def serialize(self, obj, attrs, user):
+        d = super(DetailedUserSerializer, self).serialize(obj, attrs, user)
+        d['authenticators'] = [{
+            'id': six.text_type(a.id),
+            'type': a.interface.interface_id,
+            'name': a.interface.name,
+            'dateCreated': a.created_at,
+            'dateUsed': a.last_used_at,
+        } for a in attrs['authenticators']]
+        return d
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 5d924ebb5b..6931a21430 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -81,10 +81,11 @@ from .endpoints.team_groups_trending import TeamGroupsTrendingEndpoint
 from .endpoints.team_members import TeamMembersEndpoint
 from .endpoints.team_project_index import TeamProjectIndexEndpoint
 from .endpoints.team_stats import TeamStatsEndpoint
+from .endpoints.useravatar import UserAvatarEndpoint
+from .endpoints.user_authenticator_details import UserAuthenticatorDetailsEndpoint
 from .endpoints.user_identity_details import UserIdentityDetailsEndpoint
 from .endpoints.user_index import UserIndexEndpoint
 from .endpoints.user_details import UserDetailsEndpoint
-from .endpoints.useravatar import UserAvatarEndpoint
 from .endpoints.user_organizations import UserOrganizationsEndpoint
 
 
@@ -116,6 +117,9 @@ urlpatterns = patterns(
     url(r'^users/(?P<user_id>[^\/]+)/avatar/$',
         UserAvatarEndpoint.as_view(),
         name='sentry-api-0-user-avatar'),
+    url(r'^users/(?P<user_id>[^\/]+)/authenticators/(?P<auth_id>[^\/]+)/$',
+        UserAuthenticatorDetailsEndpoint.as_view(),
+        name='sentry-api-0-user-authenticator-details'),
     url(r'^users/(?P<user_id>[^\/]+)/identities/(?P<identity_id>[^\/]+)/$',
         UserIdentityDetailsEndpoint.as_view(),
         name='sentry-api-0-user-identity-details'),
diff --git a/tests/sentry/api/endpoints/test_user_authenticator_details.py b/tests/sentry/api/endpoints/test_user_authenticator_details.py
new file mode 100644
index 0000000000..765e0b87d9
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_user_authenticator_details.py
@@ -0,0 +1,48 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import Authenticator
+from sentry.testutils import APITestCase
+
+
+class DeleteUserAuthenticatorTest(APITestCase):
+    def test_simple(self):
+        user = self.create_user(email='a@example.com', is_superuser=True)
+        auth = Authenticator.objects.create(
+            type=3,  # u2f
+            user=user,
+        )
+
+        self.login_as(user=user)
+
+        url = reverse('sentry-api-0-user-authenticator-details', kwargs={
+            'user_id': user.id,
+            'auth_id': auth.id,
+        })
+        resp = self.client.delete(url, format='json')
+        assert resp.status_code == 204, (resp.status_code, resp.content)
+
+        assert not Authenticator.objects.filter(
+            id=auth.id,
+        ).exists()
+
+    def test_cannot_delete_without_superuser(self):
+        user = self.create_user(email='a@example.com', is_superuser=False)
+        auth = Authenticator.objects.create(
+            type=3,  # u2f
+            user=user,
+        )
+
+        self.login_as(user=user)
+
+        url = reverse('sentry-api-0-user-authenticator-details', kwargs={
+            'user_id': user.id,
+            'auth_id': auth.id,
+        })
+        resp = self.client.delete(url, format='json')
+        assert resp.status_code == 403, (resp.status_code, resp.content)
+
+        assert Authenticator.objects.filter(
+            id=auth.id,
+        ).exists()
diff --git a/tests/sentry/api/endpoints/test_user_details.py b/tests/sentry/api/endpoints/test_user_details.py
index 37c2ecff93..2586ab6870 100644
--- a/tests/sentry/api/endpoints/test_user_details.py
+++ b/tests/sentry/api/endpoints/test_user_details.py
@@ -4,7 +4,7 @@ import six
 
 from django.core.urlresolvers import reverse
 
-from sentry.models import AuthIdentity, AuthProvider, User
+from sentry.models import Authenticator, AuthIdentity, AuthProvider, User
 from sentry.testutils import APITestCase
 
 
@@ -38,6 +38,10 @@ class UserDetailsTest(APITestCase):
             ident=user.email,
             user=user,
         )
+        auth = Authenticator.objects.create(
+            type=3,  # u2f
+            user=user,
+        )
 
         self.login_as(user=user)
 
@@ -50,8 +54,11 @@ class UserDetailsTest(APITestCase):
         assert resp.data['id'] == six.text_type(user.id)
         assert 'identities' in resp.data
         assert len(resp.data['identities']) == 1
-        assert resp.data['identities'][0]['id'] == auth_identity.id
+        assert resp.data['identities'][0]['id'] == six.text_type(auth_identity.id)
         assert resp.data['identities'][0]['name'] == auth_identity.ident
+        assert 'authenticators' in resp.data
+        assert len(resp.data['authenticators']) == 1
+        assert resp.data['authenticators'][0]['id'] == six.text_type(auth.id)
 
     def test_superuser(self):
         user = self.create_user(email='a@example.com')
