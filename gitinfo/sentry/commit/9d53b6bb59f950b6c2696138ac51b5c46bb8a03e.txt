commit 9d53b6bb59f950b6c2696138ac51b5c46bb8a03e
Author: Chris Fuller <cfuller@sentry.io>
Date:   Thu Apr 16 18:49:40 2020 -0400

    feat(workflow) Add Incident field `status_method` to model (#18302)
    
    * Adding Incident status_method field

diff --git a/migrations_lockfile.txt b/migrations_lockfile.txt
index d8ee79850e..263ce6251b 100644
--- a/migrations_lockfile.txt
+++ b/migrations_lockfile.txt
@@ -10,7 +10,7 @@ auth: 0008_alter_user_username_max_length
 contenttypes: 0002_remove_content_type_name
 jira_ac: 0001_initial
 nodestore: 0001_initial
-sentry: 0064_project_has_transactions
+sentry: 0065_add_incident_status_method
 sessions: 0001_initial
 sites: 0002_alter_domain_unique
 social_auth: 0001_initial
diff --git a/src/sentry/api/endpoints/organization_incident_details.py b/src/sentry/api/endpoints/organization_incident_details.py
index 0814ca3070..8aeda1dd2d 100644
--- a/src/sentry/api/endpoints/organization_incident_details.py
+++ b/src/sentry/api/endpoints/organization_incident_details.py
@@ -7,7 +7,7 @@ from sentry.api.bases.incident import IncidentEndpoint, IncidentPermission
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.incident import DetailedIncidentSerializer
 from sentry.incidents.logic import update_incident_status
-from sentry.incidents.models import IncidentStatus
+from sentry.incidents.models import IncidentStatus, IncidentStatusMethod
 
 
 class IncidentSerializer(serializers.Serializer):
@@ -49,6 +49,7 @@ class OrganizationIncidentDetailsEndpoint(IncidentEndpoint):
                     status=result["status"],
                     user=request.user,
                     comment=result.get("comment"),
+                    status_method=IncidentStatusMethod.MANUAL,
                 )
                 return Response(
                     serialize(incident, request.user, DetailedIncidentSerializer()), status=200
diff --git a/src/sentry/api/serializers/models/incident.py b/src/sentry/api/serializers/models/incident.py
index e638278449..0003e55233 100644
--- a/src/sentry/api/serializers/models/incident.py
+++ b/src/sentry/api/serializers/models/incident.py
@@ -38,6 +38,7 @@ class IncidentSerializer(Serializer):
             "organizationId": six.text_type(obj.organization_id),
             "projects": attrs["projects"],
             "status": obj.status,
+            "status_method": obj.status_method,
             "type": obj.type,
             "title": obj.title,
             "query": obj.query,
diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index 1fe2666389..828fb4dbdb 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -29,6 +29,7 @@ from sentry.incidents.models import (
     IncidentSnapshot,
     IncidentSeen,
     IncidentStatus,
+    IncidentStatusMethod,
     IncidentSubscription,
     TimeSeriesSnapshot,
 )
@@ -123,7 +124,9 @@ def create_incident(
     return incident
 
 
-def update_incident_status(incident, status, user=None, comment=None):
+def update_incident_status(
+    incident, status, user=None, comment=None, status_method=IncidentStatusMethod.RULE_TRIGGERED
+):
     """
     Updates the status of an Incident and write an IncidentActivity row to log
     the change. When the status is CLOSED we also set the date closed to the
@@ -146,7 +149,7 @@ def update_incident_status(incident, status, user=None, comment=None):
 
         prev_status = incident.status
 
-        kwargs = {"status": status.value}
+        kwargs = {"status": status.value, "status_method": status_method.value}
         if status == IncidentStatus.CLOSED:
             kwargs["date_closed"] = timezone.now()
         elif status == IncidentStatus.OPEN:
diff --git a/src/sentry/incidents/models.py b/src/sentry/incidents/models.py
index f2af9cb6c2..9cb3502d00 100644
--- a/src/sentry/incidents/models.py
+++ b/src/sentry/incidents/models.py
@@ -140,6 +140,12 @@ class IncidentStatus(Enum):
     CRITICAL = 20
 
 
+class IncidentStatusMethod(Enum):
+    MANUAL = 1
+    RULE_UPDATED = 2
+    RULE_TRIGGERED = 3
+
+
 INCIDENT_STATUS = {
     IncidentStatus.OPEN: "Open",
     IncidentStatus.CLOSED: "Resolved",
@@ -164,6 +170,9 @@ class Incident(Model):
     # Identifier used to match incoming events from the detection algorithm
     detection_uuid = UUIDField(null=True, db_index=True)
     status = models.PositiveSmallIntegerField(default=IncidentStatus.OPEN.value)
+    status_method = models.PositiveSmallIntegerField(
+        default=IncidentStatusMethod.RULE_TRIGGERED.value
+    )
     type = models.PositiveSmallIntegerField()
     aggregation = models.PositiveSmallIntegerField(default=QueryAggregations.TOTAL.value)
     title = models.TextField()
diff --git a/src/sentry/incidents/subscription_processor.py b/src/sentry/incidents/subscription_processor.py
index 711f50942f..640334986f 100644
--- a/src/sentry/incidents/subscription_processor.py
+++ b/src/sentry/incidents/subscription_processor.py
@@ -17,6 +17,7 @@ from sentry.incidents.models import (
     AlertRuleTrigger,
     Incident,
     IncidentStatus,
+    IncidentStatusMethod,
     IncidentTrigger,
     IncidentType,
     TriggerStatus,
@@ -247,7 +248,11 @@ class SubscriptionProcessor(object):
             self.handle_incident_severity_update()
 
             if self.check_triggers_resolved():
-                update_incident_status(self.active_incident, IncidentStatus.CLOSED)
+                update_incident_status(
+                    self.active_incident,
+                    IncidentStatus.CLOSED,
+                    status_method=IncidentStatusMethod.RULE_TRIGGERED,
+                )
                 self.active_incident = None
                 self.incident_triggers.clear()
             self.trigger_resolve_counts[trigger.id] = 0
@@ -281,7 +286,11 @@ class SubscriptionProcessor(object):
                     severity = IncidentStatus.WARNING
 
             if severity:
-                update_incident_status(self.active_incident, severity)
+                update_incident_status(
+                    self.active_incident,
+                    severity,
+                    status_method=IncidentStatusMethod.RULE_TRIGGERED,
+                )
 
     def update_alert_rule_stats(self):
         """
diff --git a/src/sentry/migrations/0065_add_incident_status_method.py b/src/sentry/migrations/0065_add_incident_status_method.py
new file mode 100644
index 0000000000..0c8b6984d3
--- /dev/null
+++ b/src/sentry/migrations/0065_add_incident_status_method.py
@@ -0,0 +1,38 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.11.29 on 2020-04-16 03:25
+from __future__ import unicode_literals
+
+from django.db import migrations, models
+import django.db.models.manager
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+    # This flag is used to decide whether to run this migration in a transaction or not.
+    # By default we prefer to run in a transaction, but for migrations where you want
+    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
+    # want to create an index concurrently when adding one to an existing table.
+    atomic = True
+
+
+    dependencies = [
+        ('sentry', '0064_project_has_transactions'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='incident',
+            name='status_method',
+            field=models.PositiveSmallIntegerField(default=3),
+        ),
+    ]
diff --git a/tests/sentry/api/serializers/test_incident.py b/tests/sentry/api/serializers/test_incident.py
index 12247728a7..8e9888fb7f 100644
--- a/tests/sentry/api/serializers/test_incident.py
+++ b/tests/sentry/api/serializers/test_incident.py
@@ -27,6 +27,7 @@ class IncidentSerializerTest(TestCase):
         assert result["organizationId"] == six.text_type(incident.organization_id)
         assert result["projects"] == [p.slug for p in incident.projects.all()]
         assert result["status"] == incident.status
+        assert result["status_method"] == incident.status_method
         assert result["type"] == incident.type
         assert result["title"] == incident.title
         assert result["query"] == incident.query
diff --git a/tests/sentry/incidents/test_action_handlers.py b/tests/sentry/incidents/test_action_handlers.py
index 49ae14c128..efe9a74d1e 100644
--- a/tests/sentry/incidents/test_action_handlers.py
+++ b/tests/sentry/incidents/test_action_handlers.py
@@ -16,6 +16,7 @@ from sentry.incidents.logic import update_incident_status
 from sentry.incidents.models import (
     AlertRuleTriggerAction,
     IncidentStatus,
+    IncidentStatusMethod,
     QueryAggregations,
     TriggerStatus,
     INCIDENT_STATUS,
@@ -221,5 +222,7 @@ class SlackActionHandlerResolveTest(SlackActionHandlerBaseTest, TestCase):
     def test(self):
         alert_rule = self.create_alert_rule()
         incident = self.create_incident(alert_rule=alert_rule)
-        update_incident_status(incident, IncidentStatus.CLOSED)
+        update_incident_status(
+            incident, IncidentStatus.CLOSED, status_method=IncidentStatusMethod.MANUAL
+        )
         self.run_test(incident, "resolve")
diff --git a/tests/sentry/incidents/test_logic.py b/tests/sentry/incidents/test_logic.py
index 6794c14a4e..c39bc6066f 100644
--- a/tests/sentry/incidents/test_logic.py
+++ b/tests/sentry/incidents/test_logic.py
@@ -66,6 +66,7 @@ from sentry.incidents.models import (
     IncidentProject,
     IncidentSnapshot,
     IncidentStatus,
+    IncidentStatusMethod,
     IncidentSubscription,
     IncidentType,
 )
@@ -156,13 +157,21 @@ class UpdateIncidentStatus(TestCase):
 
     def test_status_already_set(self):
         incident = self.create_incident(status=IncidentStatus.WARNING.value)
-        update_incident_status(incident, IncidentStatus.WARNING)
+        update_incident_status(
+            incident, IncidentStatus.WARNING, status_method=IncidentStatusMethod.RULE_TRIGGERED
+        )
         assert incident.status == IncidentStatus.WARNING.value
 
     def run_test(self, incident, status, expected_date_closed, user=None, comment=None):
         prev_status = incident.status
         self.record_event.reset_mock()
-        update_incident_status(incident, status, user=user, comment=comment)
+        update_incident_status(
+            incident,
+            status,
+            user=user,
+            comment=comment,
+            status_method=IncidentStatusMethod.RULE_TRIGGERED,
+        )
         incident = Incident.objects.get(id=incident.id)
         assert incident.status == status.value
         assert incident.date_closed == expected_date_closed
@@ -616,7 +625,11 @@ class BulkGetIncidentStatsTest(TestCase, BaseIncidentsTest):
             groups=[self.group],
             date_started=timezone.now() - timedelta(days=30),
         )
-        update_incident_status(closed_incident, IncidentStatus.CLOSED)
+        update_incident_status(
+            closed_incident,
+            IncidentStatus.CLOSED,
+            status_method=IncidentStatusMethod.RULE_TRIGGERED,
+        )
         open_incident = create_incident(
             self.organization,
             IncidentType.ALERT_TRIGGERED,
