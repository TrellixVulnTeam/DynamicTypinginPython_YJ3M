commit 51ece24921d382e1cd1cc917e7ba33442053cf3c
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Mon Mar 16 21:19:06 2020 +0100

    feat(data-privacy-rules): added data privacy rules form (#17527)

diff --git a/src/sentry/static/sentry/app/actionCreators/indicator.tsx b/src/sentry/static/sentry/app/actionCreators/indicator.tsx
index 78d4179534..c6848b0881 100644
--- a/src/sentry/static/sentry/app/actionCreators/indicator.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/indicator.tsx
@@ -12,6 +12,11 @@ type IndicatorType = 'loading' | 'error' | 'success' | 'undo' | '';
 type Options = {
   duration?: number;
   append?: boolean;
+  modelArg?: {
+    model: FormModel;
+    id: string;
+    undo: () => void;
+  };
 };
 
 type Indicator = {
@@ -37,36 +42,36 @@ export function addMessage(
   type: IndicatorType,
   options: Options = {}
 ): void {
-  let {duration} = options;
+  const {duration: optionsDuration, append, ...rest} = options;
 
   // use default only if undefined, as 0 is a valid duration
-  duration = typeof duration === 'undefined' ? DEFAULT_TOAST_DURATION : duration;
+  const duration =
+    typeof optionsDuration === 'undefined' ? DEFAULT_TOAST_DURATION : optionsDuration;
 
-  const action = options.append ? 'append' : 'replace';
+  const action = append ? 'append' : 'replace';
   // XXX: This differs from `IndicatorStore.add` since it won't return the indicator that is created
   // because we are firing an action. You can just add a new message and it will, by default,
   // replace active indicator
-  IndicatorActions[action](msg, type, {...options, duration});
+  IndicatorActions[action](msg, type, {...rest, duration});
 }
 
 function addMessageWithType(type: IndicatorType) {
-  return (msg: React.ReactNode, duration?: number, options?: Omit<Options, 'duration'>) =>
-    addMessage(msg, type, {...options, duration});
+  return (msg: React.ReactNode, options?: Options) => addMessage(msg, type, options);
 }
 
 export function addLoadingMessage(
   msg: React.ReactNode = t('Saving changes...'),
-  ...args
+  options?: Options
 ) {
-  return addMessageWithType('loading')(msg, ...args);
+  return addMessageWithType('loading')(msg, options);
 }
 
-export function addErrorMessage(msg: React.ReactNode, ...args) {
-  return addMessageWithType('error')(msg, ...args);
+export function addErrorMessage(msg: React.ReactNode, options?: Options) {
+  return addMessageWithType('error')(msg, options);
 }
 
-export function addSuccessMessage(msg: React.ReactNode, ...args) {
-  return addMessageWithType('success')(msg, ...args);
+export function addSuccessMessage(msg: React.ReactNode, options?: Options) {
+  return addMessageWithType('success')(msg, options);
 }
 
 const PRETTY_VALUES: Map<unknown, string> = new Map([
@@ -142,65 +147,66 @@ export function saveOnBlurUndoMessage(
         newValue: <FormValue>{prettifyValue(change.new)}</FormValue>,
       }
     ),
-    DEFAULT_TOAST_DURATION,
     {
-      model,
-      id: fieldName,
-      undo: () => {
-        if (!model || !fieldName) {
-          return;
-        }
-
-        const oldValue = model.getValue(fieldName);
-        const didUndo = model.undo();
-        const newValue = model.getValue(fieldName);
-
-        if (!didUndo) {
-          return;
-        }
-        if (!label) {
-          return;
-        }
-
-        // `saveField` can return null if it can't save
-        const saveResult = model.saveField(fieldName, newValue);
-
-        if (!saveResult) {
-          addErrorMessage(
-            tct(
-              showChangeText
-                ? 'Unable to restore [fieldName] from [oldValue] to [newValue]'
-                : 'Unable to restore [fieldName]',
+      modelArg: {
+        model,
+        id: fieldName,
+        undo: () => {
+          if (!model || !fieldName) {
+            return;
+          }
+
+          const oldValue = model.getValue(fieldName);
+          const didUndo = model.undo();
+          const newValue = model.getValue(fieldName);
+
+          if (!didUndo) {
+            return;
+          }
+          if (!label) {
+            return;
+          }
+
+          // `saveField` can return null if it can't save
+          const saveResult = model.saveField(fieldName, newValue);
+
+          if (!saveResult) {
+            addErrorMessage(
+              tct(
+                showChangeText
+                  ? 'Unable to restore [fieldName] from [oldValue] to [newValue]'
+                  : 'Unable to restore [fieldName]',
+                {
+                  root: <MessageContainer />,
+                  fieldName: <FieldName>{label}</FieldName>,
+                  oldValue: <FormValue>{prettifyValue(oldValue)}</FormValue>,
+                  newValue: <FormValue>{prettifyValue(newValue)}</FormValue>,
+                }
+              )
+            );
+            return;
+          }
+
+          saveResult.then(() => {
+            addMessage(
+              tct(
+                showChangeText
+                  ? 'Restored [fieldName] from [oldValue] to [newValue]'
+                  : 'Restored [fieldName]',
+                {
+                  root: <MessageContainer />,
+                  fieldName: <FieldName>{label}</FieldName>,
+                  oldValue: <FormValue>{prettifyValue(oldValue)}</FormValue>,
+                  newValue: <FormValue>{prettifyValue(newValue)}</FormValue>,
+                }
+              ),
+              'undo',
               {
-                root: <MessageContainer />,
-                fieldName: <FieldName>{label}</FieldName>,
-                oldValue: <FormValue>{prettifyValue(oldValue)}</FormValue>,
-                newValue: <FormValue>{prettifyValue(newValue)}</FormValue>,
+                duration: DEFAULT_TOAST_DURATION,
               }
-            )
-          );
-          return;
-        }
-
-        saveResult.then(() => {
-          addMessage(
-            tct(
-              showChangeText
-                ? 'Restored [fieldName] from [oldValue] to [newValue]'
-                : 'Restored [fieldName]',
-              {
-                root: <MessageContainer />,
-                fieldName: <FieldName>{label}</FieldName>,
-                oldValue: <FormValue>{prettifyValue(oldValue)}</FormValue>,
-                newValue: <FormValue>{prettifyValue(newValue)}</FormValue>,
-              }
-            ),
-            'undo',
-            {
-              duration: DEFAULT_TOAST_DURATION,
-            }
-          );
-        });
+            );
+          });
+        },
       },
     }
   );
diff --git a/src/sentry/static/sentry/app/components/alertLink.tsx b/src/sentry/static/sentry/app/components/alertLink.tsx
index 0c66fcf2be..30e506469d 100644
--- a/src/sentry/static/sentry/app/components/alertLink.tsx
+++ b/src/sentry/static/sentry/app/components/alertLink.tsx
@@ -1,6 +1,7 @@
 import styled from '@emotion/styled';
 import React from 'react';
 import {LocationDescriptor} from 'history';
+import omit from 'lodash/omit';
 
 import Link from 'app/components/links/link';
 import InlineSvg from 'app/components/inlineSvg';
@@ -18,18 +19,38 @@ type OtherProps = {
 type DefaultProps = {
   size: Size;
   priority: Priority;
+  withoutMarginBottom: boolean;
+  openInNewTab: boolean;
 };
 
 type Props = (PropsWithHref | PropsWithTo) & OtherProps & DefaultProps;
 
+// TODO(Priscila): Improve it as soon as we merge this PR: https://github.com/getsentry/sentry/pull/17346
+type StyledLinkProps = PropsWithHref &
+  PropsWithTo &
+  Omit<DefaultProps, 'openInNewTab'> &
+  Pick<OtherProps, 'onClick'> & {
+    target: '_blank' | '_self';
+  };
+
 export default class AlertLink extends React.Component<Props> {
   static defaultProps: DefaultProps = {
     priority: 'warning',
     size: 'normal',
+    withoutMarginBottom: false,
+    openInNewTab: false,
   };
 
   render() {
-    const {size, priority, icon, children, onClick} = this.props;
+    const {
+      size,
+      priority,
+      icon,
+      children,
+      onClick,
+      withoutMarginBottom,
+      openInNewTab,
+    } = this.props;
     return (
       <StyledLink
         to={(this.props as PropsWithTo).to}
@@ -37,6 +58,8 @@ export default class AlertLink extends React.Component<Props> {
         onClick={onClick}
         size={size}
         priority={priority}
+        withoutMarginBottom={withoutMarginBottom}
+        target={openInNewTab ? '_blank' : '_self'}
       >
         {icon && <StyledInlineSvg src={icon} size="1.5em" spacingSize={size} />}
         <AlertLinkText>{children}</AlertLinkText>
@@ -46,14 +69,16 @@ export default class AlertLink extends React.Component<Props> {
   }
 }
 
-const StyledLink = styled(Link)<{priority: Priority; size: Size}>`
+const StyledLink = styled((props: StyledLinkProps) => (
+  <Link {...omit(props, ['withoutMarginBottom', 'priority', 'size'])} />
+))`
   display: flex;
   align-items: center;
   background-color: ${p => p.theme.alert[p.priority].backgroundLight};
   color: ${p => p.theme.gray4};
   border: 1px dashed ${p => p.theme.alert[p.priority].border};
   padding: ${p => (p.size === 'small' ? `${space(1)} ${space(1.5)}` : space(2))};
-  margin-bottom: ${space(3)};
+  margin-bottom: ${p => (p.withoutMarginBottom ? 0 : space(3))};
   border-radius: 0.25em;
   transition: 0.2s border-color;
 
diff --git a/src/sentry/static/sentry/app/components/forms/inputField.tsx b/src/sentry/static/sentry/app/components/forms/inputField.tsx
index a4bd932df9..02710cfd68 100644
--- a/src/sentry/static/sentry/app/components/forms/inputField.tsx
+++ b/src/sentry/static/sentry/app/components/forms/inputField.tsx
@@ -6,6 +6,7 @@ import FormField from 'app/components/forms/formField';
 type InputFieldProps = FormField['props'] & {
   placeholder: string;
   inputStyle?: object;
+  onBlur?: (event?: React.FocusEvent<HTMLInputElement>) => void;
 };
 
 export default class InputField<
@@ -34,6 +35,7 @@ export default class InputField<
         required={this.props.required}
         value={this.state.value as string | number} //can't pass in boolean here
         style={this.props.inputStyle}
+        onBlur={this.props.onBlur}
         {...this.getAttributes()}
       />
     );
diff --git a/src/sentry/static/sentry/app/components/forms/selectControl.jsx b/src/sentry/static/sentry/app/components/forms/selectControl.jsx
index 79db13bcbc..7a325b63bc 100644
--- a/src/sentry/static/sentry/app/components/forms/selectControl.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectControl.jsx
@@ -43,6 +43,7 @@ const indicatorStyles = ({padding: _padding, ...provided}) => ({
 
 const defaultStyles = {
   control: (_, state) => ({
+    height: '100%',
     fontSize: '15px',
     color: theme.gray5,
     display: 'flex',
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx
index ede753b340..f5b89e3d1c 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx
@@ -554,7 +554,7 @@ class FormModel {
             Array.isArray(resp.responseJSON.non_field_errors) &&
             resp.responseJSON.non_field_errors.length
           ) {
-            addErrorMessage(resp.responseJSON.non_field_errors[0], 10000);
+            addErrorMessage(resp.responseJSON.non_field_errors[0], {duration: 10000});
             // Reset saving state
             this.setError(id, '');
           } else {
@@ -685,7 +685,7 @@ class FormModel {
         Array.isArray(resp.non_field_errors) &&
         resp.non_field_errors.length
       ) {
-        addErrorMessage(resp.non_field_errors[0], 10000);
+        addErrorMessage(resp.non_field_errors[0], {duration: 10000});
       } else if (Array.isArray(resp[id]) && resp[id].length) {
         // Just take first resp for now
         this.setError(id, resp[id][0]);
diff --git a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
index 762462709b..4ecdad7c12 100644
--- a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
@@ -11,6 +11,8 @@ import ProjectActions from 'app/actions/projectActions';
 import {Organization} from 'app/types';
 import SentryTypes from 'app/sentryTypes';
 
+import ProjectDataPrivacyRulesPanel from './projectDataPrivacyRulesPanel';
+
 type Props = {
   organization: Organization;
   params: {
@@ -33,11 +35,13 @@ class ProjectDataPrivacyContent extends AsyncView<Props> {
 
   renderBody() {
     const {organization} = this.context;
-    const project = this.state.data;
+    const initialData = this.state.data;
     const {orgId, projectId} = this.props.params;
     const endpoint = `/projects/${orgId}/${projectId}/`;
     const access = new Set(organization.access);
     const features = new Set(organization.features);
+    const relayPiiConfig = initialData?.relayPiiConfig;
+    const apiMethod = 'PUT';
 
     return (
       <React.Fragment>
@@ -45,8 +49,8 @@ class ProjectDataPrivacyContent extends AsyncView<Props> {
         <Form
           saveOnBlur
           allowUndo
-          initialData={project}
-          apiMethod="PUT"
+          initialData={initialData}
+          apiMethod={apiMethod}
           apiEndpoint={endpoint}
           onSubmitSuccess={resp => {
             // This will update our project context
@@ -67,10 +71,14 @@ class ProjectDataPrivacyContent extends AsyncView<Props> {
               fields.sensitiveFields,
               fields.safeFields,
               fields.storeCrashReports,
-              fields.relayPiiConfig,
             ]}
           />
         </Form>
+        <ProjectDataPrivacyRulesPanel
+          orgId={orgId}
+          projectId={projectId}
+          relayPiiConfig={relayPiiConfig}
+        />
       </React.Fragment>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyRulesForm.tsx b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyRulesForm.tsx
new file mode 100644
index 0000000000..499d0a30a0
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyRulesForm.tsx
@@ -0,0 +1,223 @@
+import React from 'react';
+import styled from '@emotion/styled';
+import omit from 'lodash/omit';
+
+import space from 'app/styles/space';
+import {t} from 'app/locale';
+import SelectControl from 'app/components/forms/selectControl';
+import TextField from 'app/components/forms/textField';
+import {IconDelete} from 'app/icons/iconDelete';
+import Button from 'app/components/button';
+
+import {
+  RULE_TYPE,
+  METHOD_TYPE,
+  getRuleTypeSelectorFieldLabel,
+  getMethodTypeSelectorFieldLabel,
+} from './utils';
+
+type Rule = {
+  id: number;
+  type: RULE_TYPE;
+  method: METHOD_TYPE;
+  from: string;
+  customRegularExpression?: string;
+};
+
+type Props = {
+  onDelete: (ruleId: Rule['id']) => void;
+  onChange: (rule: Rule) => void;
+  rule: Rule;
+};
+
+type State = {
+  errors: {
+    [key: string]: string;
+  };
+};
+class ProjectDataPrivacyRulesForm extends React.PureComponent<Props, State> {
+  state: State = {
+    errors: {},
+  };
+
+  handleChange = <T extends keyof Omit<Rule, 'id'>>(stateProperty: T, value: Rule[T]) => {
+    const rule: Rule = {
+      ...omit(this.props.rule, 'customRegularExpression'),
+      [stateProperty]: value,
+    };
+
+    if (stateProperty === 'type' && value === RULE_TYPE.PATTERN) {
+      rule.customRegularExpression = this.props.rule.customRegularExpression || '';
+    }
+
+    this.props.onChange({
+      ...rule,
+    });
+  };
+
+  handleDelete = (event: React.MouseEvent) => {
+    event.stopPropagation();
+    const {onDelete, rule} = this.props;
+    onDelete(rule.id);
+  };
+
+  handleValidation = <T extends keyof Omit<Rule, 'id'>>(field: T) => () => {
+    const errors = {...this.state.errors};
+    const isFieldValueEmpty = !this.props.rule[field];
+    const fieldErrorAlreadyExist = errors[field];
+
+    if (isFieldValueEmpty && fieldErrorAlreadyExist) {
+      return;
+    }
+
+    if (isFieldValueEmpty && !fieldErrorAlreadyExist) {
+      errors[field] = t('Field Required');
+    }
+
+    if (!isFieldValueEmpty && fieldErrorAlreadyExist) {
+      delete errors[field];
+    }
+
+    this.setState({
+      errors,
+    });
+  };
+
+  render() {
+    const {onDelete, rule} = this.props;
+    const {from, customRegularExpression, type, method} = rule;
+    const {errors} = this.state;
+
+    return (
+      <Wrapper hasError={Object.keys(errors).length > 0}>
+        <WrapperFields>
+          <StyledSelectControl
+            placeholder={t('Select type')}
+            name="type"
+            options={Object.values(RULE_TYPE).map(value => ({
+              label: getRuleTypeSelectorFieldLabel(value),
+              value,
+            }))}
+            height={40}
+            value={type}
+            onChange={({value}) => this.handleChange('type', value)}
+            openOnFocus
+            required
+          />
+
+          <StyledSelectControl
+            placeholder={t('Select method')}
+            name="method"
+            options={Object.values(METHOD_TYPE).map(value => ({
+              label: getMethodTypeSelectorFieldLabel(value),
+              value,
+            }))}
+            height={40}
+            value={method}
+            onChange={({value}) => this.handleChange('method', value)}
+            openOnFocus
+            required
+          />
+          <From>{t('from')}</From>
+          <StyledTextField
+            name="from"
+            placeholder={t('ex. strings, numbers, custom')}
+            onChange={(value: string) => {
+              this.handleChange('from', value);
+            }}
+            value={from}
+            inputStyle={{
+              height: '100%',
+            }}
+            onBlur={this.handleValidation('from')}
+            error={errors.from}
+          />
+          {type === RULE_TYPE.PATTERN && (
+            <CustomRegularExpression
+              name="customRegularExpression"
+              placeholder={t('Enter custom regular expression')}
+              onChange={(value: string) => {
+                this.handleChange('customRegularExpression', value);
+              }}
+              value={customRegularExpression}
+              inputStyle={{
+                height: '100%',
+              }}
+              onBlur={this.handleValidation('customRegularExpression')}
+              error={errors.customRegularExpression}
+            />
+          )}
+        </WrapperFields>
+        {onDelete && (
+          <StyledIconTrash onClick={this.handleDelete}>
+            <IconDelete />
+          </StyledIconTrash>
+        )}
+      </Wrapper>
+    );
+  }
+}
+
+export default ProjectDataPrivacyRulesForm;
+
+const Wrapper = styled('div')<{hasError?: boolean}>`
+  padding: ${p => `${space(p.hasError ? 4 : 2)} ${space(3)}`};
+  display: grid;
+  grid-gap: ${space(2)};
+  grid-template-columns: 1fr 40px;
+  align-items: center;
+  border-bottom: 1px solid ${p => p.theme.offWhite2};
+`;
+
+const WrapperFields = styled('div')`
+  display: grid;
+  grid-gap: ${space(2)};
+  align-items: flex-start;
+
+  @media (min-width: ${p => p.theme.breakpoints[2]}) {
+    grid-template-columns: minmax(157px, 1fr) minmax(300px, 1fr);
+  }
+
+  @media (min-width: ${p => p.theme.breakpoints[3]}) {
+    grid-template-columns: minmax(157px, 1fr) minmax(300px, 1fr) max-content minmax(
+        300px,
+        1fr
+      );
+  }
+`;
+
+const From = styled('div')`
+  height: 40px;
+  display: flex;
+  align-items: center;
+`;
+
+const StyledSelectControl = styled(SelectControl)`
+  width: 100%;
+  height: 100%;
+`;
+
+const StyledTextField = styled(TextField)<{error?: string}>`
+  width: 100%;
+  height: 40px;
+  > * {
+    height: 100%;
+    min-height: 100%;
+  }
+  ${p =>
+    !p.error &&
+    `
+      margin-bottom: 0;
+    `}
+`;
+
+const CustomRegularExpression = styled(StyledTextField)`
+  grid-column-start: 1;
+  grid-column-end: -1;
+  font-family: ${p => p.theme.text.familyMono};
+`;
+
+const StyledIconTrash = styled(Button)`
+  width: 40px;
+  height: 100%;
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyRulesPanel.tsx b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyRulesPanel.tsx
new file mode 100644
index 0000000000..ae3c68cb2d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyRulesPanel.tsx
@@ -0,0 +1,312 @@
+import React from 'react';
+import styled from '@emotion/styled';
+import omit from 'lodash/omit';
+
+import AlertLink from 'app/components/alertLink';
+import space from 'app/styles/space';
+import {t} from 'app/locale';
+import {Panel, PanelHeader, PanelBody} from 'app/components/panels';
+import Button from 'app/components/button';
+import {IconAdd} from 'app/icons/iconAdd';
+import ButtonBar from 'app/components/buttonBar';
+import {Client} from 'app/api';
+import {
+  addErrorMessage,
+  addLoadingMessage,
+  addSuccessMessage,
+} from 'app/actionCreators/indicator';
+
+import ProjectDataPrivacyRulesForm from './projectDataPrivacyRulesForm';
+import {RULE_TYPE, METHOD_TYPE} from './utils';
+
+const INDICATORS_DURATION = 500;
+const DEFAULT_RULE_FROM_VALUE = '$string';
+
+type Rule = React.ComponentProps<typeof ProjectDataPrivacyRulesForm>['rule'];
+
+type PiiConfig = {
+  type: RULE_TYPE;
+  pattern: string;
+  redaction?: {
+    method?: METHOD_TYPE;
+  };
+};
+
+type PiiConfigRule = {
+  [key: string]: PiiConfig;
+};
+
+type Applications = {[key: string]: Array<string>};
+
+type Props = {
+  orgId: string;
+  projectId: string;
+  relayPiiConfig?: string;
+};
+
+type State = {
+  rules: Array<Rule>;
+  savedRules: Array<Rule>;
+  relayPiiConfig?: string;
+};
+
+class ProjectDataPrivacyRulesPanel extends React.Component<Props, State> {
+  state: State = {
+    rules: [],
+    savedRules: [],
+    relayPiiConfig: this.props.relayPiiConfig,
+  };
+
+  componentDidMount() {
+    this.loadRules();
+  }
+
+  componentDidUpdate(_prevProps: Props, prevState: State) {
+    if (prevState.relayPiiConfig !== this.state.relayPiiConfig) {
+      this.loadRules();
+    }
+  }
+
+  componentWillUnmount() {
+    this.api.clear();
+  }
+
+  api = new Client();
+
+  loadRules() {
+    try {
+      const relayPiiConfig = this.state.relayPiiConfig;
+      const piiConfig = relayPiiConfig ? JSON.parse(relayPiiConfig) : {};
+      const rules: PiiConfigRule = piiConfig.rules || {};
+      const applications: Applications = piiConfig.applications || {};
+      const convertedRules: Array<Rule> = [];
+
+      for (const application in applications) {
+        for (const rule of applications[application]) {
+          if (!rules[rule]) {
+            if (rule[0] === '@') {
+              const [type, method] = rule.slice(1).split(':');
+              convertedRules.push({
+                id: convertedRules.length,
+                type: type as RULE_TYPE,
+                method: method as METHOD_TYPE,
+                from: application,
+              });
+            }
+            continue;
+          }
+
+          const resolvedRule = rules[rule];
+          if (resolvedRule.type === RULE_TYPE.PATTERN && resolvedRule.pattern) {
+            const method = resolvedRule?.redaction?.method;
+
+            convertedRules.push({
+              id: convertedRules.length,
+              type: RULE_TYPE.PATTERN,
+              method: method as METHOD_TYPE,
+              from: application,
+              customRegularExpression: resolvedRule.pattern,
+            });
+          }
+        }
+      }
+
+      this.setState({
+        rules: convertedRules,
+        savedRules: convertedRules,
+      });
+    } catch {
+      addErrorMessage(t('Unable to load the rules'));
+    }
+  }
+
+  handleAddRule = () => {
+    this.setState(prevState => ({
+      rules: [
+        ...prevState.rules,
+        {
+          id: prevState.rules.length + 1,
+          type: RULE_TYPE.IBAN,
+          method: METHOD_TYPE.MASK,
+          from: DEFAULT_RULE_FROM_VALUE,
+        },
+      ],
+    }));
+  };
+
+  handleDeleteRule = (ruleId: number) => {
+    this.setState(prevState => ({
+      rules: prevState.rules.filter(rule => rule.id !== ruleId),
+    }));
+  };
+
+  handleChange = (updatedRule: Rule) => {
+    this.setState(prevState => ({
+      rules: prevState.rules.map(rule => {
+        if (rule.id === updatedRule.id) {
+          return updatedRule;
+        }
+        return rule;
+      }),
+    }));
+  };
+
+  handleSubmit = async () => {
+    const {orgId, projectId} = this.props;
+    const {rules} = this.state;
+    let customRulesCounter = 0;
+    const applications: Applications = {};
+    const customRules: PiiConfigRule = {};
+
+    for (const rule of rules) {
+      let ruleName = `@${rule.type}:${rule.method}`;
+      if (rule.type === RULE_TYPE.PATTERN && rule.customRegularExpression) {
+        ruleName = `customRule${customRulesCounter}`;
+
+        customRulesCounter += 1;
+
+        customRules[ruleName] = {
+          type: RULE_TYPE.PATTERN,
+          pattern: rule.customRegularExpression,
+          redaction: {
+            method: rule.method,
+          },
+        };
+      }
+
+      if (!applications[rule.from]) {
+        applications[rule.from] = [];
+      }
+
+      if (!applications[rule.from].includes(ruleName)) {
+        applications[rule.from].push(ruleName);
+      }
+    }
+
+    const piiConfig = {
+      rules: customRules,
+      applications,
+    };
+
+    const relayPiiConfig = JSON.stringify(piiConfig);
+
+    await this.api
+      .requestPromise(`/projects/${orgId}/${projectId}/`, {
+        method: 'PUT',
+        data: {relayPiiConfig},
+      })
+      .then(() => {
+        this.setState({
+          relayPiiConfig,
+        });
+      })
+      .then(() => {
+        addSuccessMessage(t('Successfully saved data scrubbing rules'), {
+          duration: INDICATORS_DURATION,
+        });
+      })
+      .catch(() => {
+        addErrorMessage(t('An error occurred while saving data scrubbing rules'), {
+          duration: INDICATORS_DURATION,
+        });
+      });
+  };
+
+  handleValidation = () => {
+    const {rules} = this.state;
+    const isAnyRuleFieldEmpty = rules.find(rule => {
+      const ruleKeys = Object.keys(omit(rule, 'id'));
+      const anyEmptyField = ruleKeys.find(ruleKey => !rule[ruleKey]);
+      return !!anyEmptyField;
+    });
+
+    const isFormValid = !isAnyRuleFieldEmpty;
+
+    if (isFormValid) {
+      this.handleSubmit();
+    } else {
+      addErrorMessage(t("Invalid rule's form"), {duration: INDICATORS_DURATION});
+    }
+  };
+
+  handleSaveForm = () => {
+    this.handleValidation();
+  };
+
+  handleCancelForm = () => {
+    addLoadingMessage(t('Cancelling...'), {duration: INDICATORS_DURATION});
+    this.setState(prevState => ({
+      rules: prevState.savedRules,
+    }));
+  };
+
+  render() {
+    const {rules, savedRules} = this.state;
+    const hideButtonBar = savedRules.length === 0 && rules.length === 0;
+    return (
+      <React.Fragment>
+        <Panel>
+          <PanelHeader>{t('Data Privacy Rules')}</PanelHeader>
+          <AlertLink
+            priority="info"
+            icon="icon-docs"
+            href="https://docs.sentry.io/data-management/advanced-datascrubbing/"
+            size="small"
+            openInNewTab
+            withoutMarginBottom
+          >
+            {t('Check out how to use advanced datascrubbing')}
+          </AlertLink>
+          <PanelBody>
+            {rules.map(rule => (
+              <ProjectDataPrivacyRulesForm
+                key={rule.id}
+                onDelete={this.handleDeleteRule}
+                onChange={this.handleChange}
+                rule={rule}
+              />
+            ))}
+            <PanelAction>
+              <StyledButton
+                icon={<IconAdd circle />}
+                onClick={this.handleAddRule}
+                borderless
+              >
+                {t('Add Rule')}
+              </StyledButton>
+            </PanelAction>
+          </PanelBody>
+        </Panel>
+        {!hideButtonBar && (
+          <StyledButtonBar gap={1.5}>
+            <Button onClick={this.handleCancelForm}>{t('Cancel')}</Button>
+            <Button priority="primary" onClick={this.handleSaveForm}>
+              {t('Save Rules')}
+            </Button>
+          </StyledButtonBar>
+        )}
+      </React.Fragment>
+    );
+  }
+}
+
+export default ProjectDataPrivacyRulesPanel;
+
+const PanelAction = styled('div')`
+  padding: ${space(2)} ${space(3)};
+`;
+
+// TODO(style): color #2c58a8 not yet in the theme
+const StyledButton = styled(Button)`
+  color: ${p => p.theme.blue};
+  :hover {
+    color: #2c58a8;
+  }
+  > *:first-child {
+    padding: 0;
+  }
+`;
+
+const StyledButtonBar = styled(ButtonBar)`
+  justify-content: flex-end;
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/utils.tsx b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/utils.tsx
new file mode 100644
index 0000000000..e505b113e2
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/utils.tsx
@@ -0,0 +1,84 @@
+import {t} from 'app/locale';
+
+enum RULE_TYPE {
+  PATTERN = 'pattern',
+  CREDITCARD = 'creditcard',
+  IBAN = 'iban',
+  PASSWORD = 'password',
+  IP = 'ip',
+  IMEI = 'imei',
+  EMAIL = 'email',
+  UUID = 'uuid',
+  PEMKEY = 'pemkey',
+  URLAUTH = 'urlauth',
+  USSSN = 'usssn',
+  USER_PATH = 'userpath',
+  MAC = 'mac',
+  ANYTHING = 'anything',
+}
+
+enum METHOD_TYPE {
+  MASK = 'mask',
+  REMOVE = 'remove',
+  HASH = 'hash',
+  // TODO(Priscila): reactivate METHOD_TYPE.REPLACE
+  // REPLACE = 'replace',
+}
+
+function getRuleTypeSelectorFieldLabel(labelType: RULE_TYPE): string {
+  switch (labelType) {
+    case RULE_TYPE.ANYTHING:
+      return t('Anything');
+    case RULE_TYPE.IMEI:
+      return t('IMEI Numbers');
+    case RULE_TYPE.MAC:
+      return t('MAC addresses');
+    case RULE_TYPE.EMAIL:
+      return t('Email Addresses');
+    case RULE_TYPE.PEMKEY:
+      return t('PEM keys');
+    case RULE_TYPE.URLAUTH:
+      return t('Auth in URLs');
+    case RULE_TYPE.USSSN:
+      return t('US social security numbers');
+    case RULE_TYPE.USER_PATH:
+      return t('Usernames in filepaths');
+    case RULE_TYPE.UUID:
+      return t('UUIDs');
+    case RULE_TYPE.CREDITCARD:
+      return t('Credit Card Number');
+    case RULE_TYPE.IBAN:
+      return t('IBAN bank accounts');
+    case RULE_TYPE.PASSWORD:
+      return t('Password fields');
+    case RULE_TYPE.IP:
+      return t('IP Addresses');
+    case RULE_TYPE.PATTERN:
+      return t('Custom Regular Expression');
+    default:
+      return '';
+  }
+}
+
+function getMethodTypeSelectorFieldLabel(labelType: METHOD_TYPE): string {
+  switch (labelType) {
+    case METHOD_TYPE.MASK:
+      return t('Mask');
+    case METHOD_TYPE.HASH:
+      return t('Hash');
+    case METHOD_TYPE.REMOVE:
+      return t('Remove');
+    // TODO(Priscila): reactivate METHOD_TYPE.REPLACE
+    // case METHOD_TYPE.REPLACE:
+    //   return t('Replace');
+    default:
+      return '';
+  }
+}
+
+export {
+  RULE_TYPE,
+  METHOD_TYPE,
+  getRuleTypeSelectorFieldLabel,
+  getMethodTypeSelectorFieldLabel,
+};
diff --git a/tests/js/spec/components/__snapshots__/alertLink.spec.jsx.snap b/tests/js/spec/components/__snapshots__/alertLink.spec.jsx.snap
index 6c5538dbf4..883bffb376 100644
--- a/tests/js/spec/components/__snapshots__/alertLink.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/alertLink.spec.jsx.snap
@@ -4,7 +4,9 @@ exports[`AlertLink renders 1`] = `
 <StyledLink
   priority="warning"
   size="normal"
+  target="_self"
   to="/settings/accounts/notifications"
+  withoutMarginBottom={false}
 >
   <AlertLinkText>
     This is an external link button
@@ -20,7 +22,9 @@ exports[`AlertLink renders with icon 1`] = `
 <StyledLink
   priority="warning"
   size="normal"
+  target="_self"
   to="/settings/accounts/notifications"
+  withoutMarginBottom={false}
 >
   <StyledInlineSvg
     size="1.5em"
diff --git a/tests/js/spec/components/indicators.spec.jsx b/tests/js/spec/components/indicators.spec.jsx
index ca9c60f76e..cff710045c 100644
--- a/tests/js/spec/components/indicators.spec.jsx
+++ b/tests/js/spec/components/indicators.spec.jsx
@@ -112,14 +112,14 @@ describe('Indicators', function() {
 
   it('adds and replaces toasts by calling action creators helpers', function() {
     // Old indicator gets replaced when a new one is added
-    addSuccessMessage('success', null);
+    addSuccessMessage('success');
     jest.runAllTimers();
     wrapper.update();
     expect(wrapper.find('ToastIndicator')).toHaveLength(1);
     expect(wrapper.find('Message').text()).toBe('success');
 
     clearIndicators();
-    addErrorMessage('error', null);
+    addErrorMessage('error');
     jest.runAllTimers();
     wrapper.update();
     expect(wrapper.find('ToastIndicator')).toHaveLength(1);
diff --git a/tests/js/spec/views/__snapshots__/accountEmails.spec.jsx.snap b/tests/js/spec/views/__snapshots__/accountEmails.spec.jsx.snap
index ea3389e9c9..3de56d142f 100644
--- a/tests/js/spec/views/__snapshots__/accountEmails.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/accountEmails.spec.jsx.snap
@@ -80,9 +80,11 @@ exports[`AccountEmails renders with emails 1`] = `
     </Form>
     <AlertLink
       icon="icon-stack"
+      openInNewTab={false}
       priority="warning"
       size="normal"
       to="/settings/account/notifications"
+      withoutMarginBottom={false}
     >
       Want to change how many emails you get? Use the notifications panel.
     </AlertLink>
diff --git a/tests/js/spec/views/__snapshots__/apiTokens.spec.jsx.snap b/tests/js/spec/views/__snapshots__/apiTokens.spec.jsx.snap
index 5d5859a0f9..4b0ca3210b 100644
--- a/tests/js/spec/views/__snapshots__/apiTokens.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/apiTokens.spec.jsx.snap
@@ -20,9 +20,11 @@ exports[`ApiTokens renders empty result 1`] = `
       title="Auth Tokens"
     />
     <AlertLink
+      openInNewTab={false}
       priority="warning"
       size="normal"
       to="/settings/org-slug/developer-settings/new-internal"
+      withoutMarginBottom={false}
     >
       Auth Tokens are tied to the logged in user, meaning they'll stop working if the user leaves the organization! We suggest using internal integrations to create/manage tokens tied to the organization instead.
     </AlertLink>
@@ -106,9 +108,11 @@ exports[`ApiTokens renders with result 1`] = `
       title="Auth Tokens"
     />
     <AlertLink
+      openInNewTab={false}
       priority="warning"
       size="normal"
       to="/settings/org-slug/developer-settings/new-internal"
+      withoutMarginBottom={false}
     >
       Auth Tokens are tied to the logged in user, meaning they'll stop working if the user leaves the organization! We suggest using internal integrations to create/manage tokens tied to the organization instead.
     </AlertLink>
diff --git a/tests/js/spec/views/settings/__snapshots__/organizationRepositories.spec.jsx.snap b/tests/js/spec/views/settings/__snapshots__/organizationRepositories.spec.jsx.snap
index 6aa232e61c..eb28a0e722 100644
--- a/tests/js/spec/views/settings/__snapshots__/organizationRepositories.spec.jsx.snap
+++ b/tests/js/spec/views/settings/__snapshots__/organizationRepositories.spec.jsx.snap
@@ -7,9 +7,11 @@ exports[`OrganizationRepositories renders with a repository 1`] = `
     title="Repositories"
   />
   <AlertLink
+    openInNewTab={false}
     priority="warning"
     size="normal"
     to="/settings/org-slug/integrations/"
+    withoutMarginBottom={false}
   >
     Want to add a repository to start tracking commits? Install or configure your version control integration here.
   </AlertLink>
@@ -67,9 +69,11 @@ exports[`OrganizationRepositories renders with github provider 1`] = `
     title="Repositories"
   />
   <AlertLink
+    openInNewTab={false}
     priority="warning"
     size="normal"
     to="/settings/org-slug/integrations/"
+    withoutMarginBottom={false}
   >
     Want to add a repository to start tracking commits? Install or configure your version control integration here.
   </AlertLink>
@@ -142,9 +146,11 @@ exports[`OrganizationRepositories renders without providers 1`] = `
     title="Repositories"
   />
   <AlertLink
+    openInNewTab={false}
     priority="warning"
     size="normal"
     to="/settings/org-slug/integrations/"
+    withoutMarginBottom={false}
   >
     Want to add a repository to start tracking commits? Install or configure your version control integration here.
   </AlertLink>
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/settings/organizationDeveloperSettings/__snapshots__/index.spec.jsx.snap
index 566c7656e2..f9882ae92d 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/__snapshots__/index.spec.jsx.snap
@@ -116,57 +116,68 @@ exports[`Organization Developer Settings when no Apps exist displays empty state
           </StyledSettingsPageHeading>
           <AlertLink
             href="https://docs.sentry.io/workflow/integrations/integration-platform/"
+            openInNewTab={false}
             priority="warning"
             size="normal"
+            withoutMarginBottom={false}
           >
             <StyledLink
               href="https://docs.sentry.io/workflow/integrations/integration-platform/"
               priority="warning"
               size="normal"
+              target="_self"
+              withoutMarginBottom={false}
             >
-              <Link
+              <Component
                 className="css-1yd43zs-StyledLink e1ylhppg0"
                 href="https://docs.sentry.io/workflow/integrations/integration-platform/"
                 priority="warning"
                 size="normal"
+                target="_self"
+                withoutMarginBottom={false}
               >
-                <a
+                <Link
                   className="css-1yd43zs-StyledLink e1ylhppg0"
                   href="https://docs.sentry.io/workflow/integrations/integration-platform/"
-                  priority="warning"
-                  size="normal"
+                  target="_self"
                 >
-                  <AlertLinkText>
-                    <div
-                      className="css-1niufup-AlertLinkText e1ylhppg1"
-                    >
-                      Have questions about the Integration Platform? Learn more about it in our docs.
-                    </div>
-                  </AlertLinkText>
-                  <InlineSvg
-                    size="1em"
-                    src="icon-chevron-right"
+                  <a
+                    className="css-1yd43zs-StyledLink e1ylhppg0"
+                    href="https://docs.sentry.io/workflow/integrations/integration-platform/"
+                    target="_self"
                   >
-                    <ForwardRef
-                      className="css-tbsmsq-InlineSvg enyz4ql0"
+                    <AlertLinkText>
+                      <div
+                        className="css-1niufup-AlertLinkText e1ylhppg1"
+                      >
+                        Have questions about the Integration Platform? Learn more about it in our docs.
+                      </div>
+                    </AlertLinkText>
+                    <InlineSvg
                       size="1em"
                       src="icon-chevron-right"
                     >
-                      <svg
+                      <ForwardRef
                         className="css-tbsmsq-InlineSvg enyz4ql0"
-                        height="1em"
-                        viewBox={Object {}}
-                        width="1em"
+                        size="1em"
+                        src="icon-chevron-right"
                       >
-                        <use
-                          href="#test"
-                          xlinkHref="#test"
-                        />
-                      </svg>
-                    </ForwardRef>
-                  </InlineSvg>
-                </a>
-              </Link>
+                        <svg
+                          className="css-tbsmsq-InlineSvg enyz4ql0"
+                          height="1em"
+                          viewBox={Object {}}
+                          width="1em"
+                        >
+                          <use
+                            href="#test"
+                            xlinkHref="#test"
+                          />
+                        </svg>
+                      </ForwardRef>
+                    </InlineSvg>
+                  </a>
+                </Link>
+              </Component>
             </StyledLink>
           </AlertLink>
           <Panel>
