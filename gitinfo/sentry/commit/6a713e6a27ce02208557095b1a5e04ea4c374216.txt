commit 6a713e6a27ce02208557095b1a5e04ea4c374216
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Dec 10 12:17:22 2014 -0800

    Remove excess query logic

diff --git a/src/sentry/migrations/0132_add_default_orgs.py b/src/sentry/migrations/0132_add_default_orgs.py
index c0eac9f43e..d19317246f 100644
--- a/src/sentry/migrations/0132_add_default_orgs.py
+++ b/src/sentry/migrations/0132_add_default_orgs.py
@@ -19,8 +19,8 @@ class Migration(DataMigration):
 
         user_orgs = {}
         for team in RangeQuerySetWrapperWithProgressBar(queryset):
-            if team.owner not in user_orgs:
-                user_orgs[team.owner_id] = org = Organization.objects.create(
+            if team.owner_id not in user_orgs:
+                user_orgs[team.owner_id] = Organization.objects.create(
                     name=team.name.strip() or 'Default',
                     owner_id=team.owner_id,
                 )
diff --git a/src/sentry/migrations/0133_add_org_members.py b/src/sentry/migrations/0133_add_org_members.py
index fb5b3f4c31..4aad763eff 100644
--- a/src/sentry/migrations/0133_add_org_members.py
+++ b/src/sentry/migrations/0133_add_org_members.py
@@ -2,7 +2,7 @@
 import datetime
 from south.db import db
 from south.v2 import DataMigration
-from django.db import models, transaction
+from django.db import IntegrityError, models, transaction
 
 class Migration(DataMigration):
 
@@ -14,15 +14,20 @@ class Migration(DataMigration):
         OrganizationMember = orm['sentry.OrganizationMember']
         Team = orm['sentry.Team']
 
-        queryset = Team.objects.select_related('organization', 'owner')
+        queryset = Team.objects.all()
 
         for team in RangeQuerySetWrapperWithProgressBar(queryset):
-            create_or_update(
-                OrganizationMember,
-                organization=team.organization,
-                user=team.owner,
-                defaults={'type': 0},  # OWNER
-            )
+            sid = transaction.savepoint()
+            try:
+                OrganizationMember.objects.create(
+                    organization_id=team.organization_id,
+                    user_id=team.owner_id,
+                    type=0,  # OWNER
+                )
+            except IntegrityError:
+                transaction.savepoint_rollback(sid)
+            else:
+                transaction.savepoint_commit(sid)
 
     def backwards(self, orm):
         pass
diff --git a/src/sentry/migrations/0138_migrate_team_members.py b/src/sentry/migrations/0138_migrate_team_members.py
index 5873dea5fe..a089a7e9e2 100644
--- a/src/sentry/migrations/0138_migrate_team_members.py
+++ b/src/sentry/migrations/0138_migrate_team_members.py
@@ -3,7 +3,7 @@ import datetime
 from collections import defaultdict
 from south.db import db
 from south.v2 import DataMigration
-from django.db import models, transaction
+from django.db import IntegrityError, models, transaction
 
 class Migration(DataMigration):
 
@@ -28,33 +28,38 @@ class Migration(DataMigration):
         for org, team_list in WithProgresBar(teams_by_org.items(), caption='Organizations'):
             team_member_qs = TeamMember.objects.filter(
                 team__organization=org
-            ).select_related('user', 'team')
+            ).select_related('team')
 
             members_by_user = defaultdict(list)
             for member in team_member_qs.iterator():
                 if member.user_id == member.team.owner_id:
                     continue  # team owners are already present
-                members_by_user[member.user].append(member)
+                members_by_user[member.user_id].append(member)
 
             total_teams = len(team_list)
 
-            for user, member_list in members_by_user.iteritems():
+            for user_id, member_list in members_by_user.iteritems():
                 # if they were a member of all teams, give them global access
                 has_global_access = len(member_list) == total_teams
 
                 # give them the highest level access they had
                 access = min(m.type for m in member_list)
 
-                om, created = OrganizationMember.objects.get_or_create(
-                    organization=org,
-                    user=user,
-                    defaults={
-                        'type': access,
-                        'has_global_access': has_global_access,
-                    },  # ADMIN
-                )
+                sid = transaction.savepoint()
+                try:
+                    om = OrganizationMember.objects.create(
+                        organization=org,
+                        user_id=user_id,
+                        type=access,
+                        has_global_access=has_global_access,
+                    )
+                except IntegrityError:
+                    transaction.savepoint_rollback(sid)
+                    continue
+                else:
+                    transaction.savepoint_commit(sid)
 
-                if created and not has_global_access:
+                if not has_global_access:
                     for member in member_list:
                         om.teams.add(member.team)
 
diff --git a/src/sentry/migrations/0143_fill_project_orgs.py b/src/sentry/migrations/0143_fill_project_orgs.py
index fce2e6fb4c..c6e08c9684 100644
--- a/src/sentry/migrations/0143_fill_project_orgs.py
+++ b/src/sentry/migrations/0143_fill_project_orgs.py
@@ -2,7 +2,7 @@
 import datetime
 from south.db import db
 from south.v2 import DataMigration
-from django.db import models, transaction
+from django.db import IntegrityError, models, transaction
 
 class Migration(DataMigration):
 
@@ -24,7 +24,7 @@ class Migration(DataMigration):
             sid = transaction.savepoint()
             try:
                 project.save()
-            except Exception:
+            except IntegrityError:
                 transaction.savepoint_rollback(sid)
                 # we also need to update the slug here based on the new constraints
                 slugify_instance(project, project.name, (
