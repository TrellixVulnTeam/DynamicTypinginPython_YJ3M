commit 6cbf6c2c62f4a0abb2312853da24d2603d9d74fa
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Wed Oct 30 14:36:51 2019 -0700

    feat(analytics): Add join request events (#15325)

diff --git a/src/sentry/analytics/events/join_request_created.py b/src/sentry/analytics/events/join_request_created.py
new file mode 100644
index 0000000000..cb858bfccc
--- /dev/null
+++ b/src/sentry/analytics/events/join_request_created.py
@@ -0,0 +1,12 @@
+from __future__ import absolute_import, print_function
+
+from sentry import analytics
+
+
+class JoinRequestCreatedEvent(analytics.Event):
+    type = "join_request.created"
+
+    attributes = (analytics.Attribute("member_id"), analytics.Attribute("organization_id"))
+
+
+analytics.register(JoinRequestCreatedEvent)
diff --git a/src/sentry/analytics/events/join_request_link_viewed.py b/src/sentry/analytics/events/join_request_link_viewed.py
new file mode 100644
index 0000000000..1af27b151c
--- /dev/null
+++ b/src/sentry/analytics/events/join_request_link_viewed.py
@@ -0,0 +1,12 @@
+from __future__ import absolute_import, print_function
+
+from sentry import analytics
+
+
+class JoinRequestLinkViewedEvent(analytics.Event):
+    type = "join_request.link_viewed"
+
+    attributes = (analytics.Attribute("organization_id"),)
+
+
+analytics.register(JoinRequestLinkViewedEvent)
diff --git a/src/sentry/api/endpoints/organization_join_request.py b/src/sentry/api/endpoints/organization_join_request.py
index dbf356f57f..7d97891869 100644
--- a/src/sentry/api/endpoints/organization_join_request.py
+++ b/src/sentry/api/endpoints/organization_join_request.py
@@ -12,6 +12,8 @@ from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.validators import AllowedEmailField
 from sentry.app import ratelimiter
 from sentry.models import AuthProvider, InviteStatus, OrganizationMember
+from sentry.signals import join_request_created
+
 
 JOIN_REQUEST_EXPERIMENT = "JoinRequestExperiment"
 
@@ -88,5 +90,6 @@ class OrganizationJoinRequestEndpoint(OrganizationEndpoint):
 
         if member:
             member.send_request_notification_email()
+            join_request_created.send_robust(sender=self, member=member)
 
         return Response(status=204)
diff --git a/src/sentry/receivers/experiments.py b/src/sentry/receivers/experiments.py
new file mode 100644
index 0000000000..4aa9bbcefe
--- /dev/null
+++ b/src/sentry/receivers/experiments.py
@@ -0,0 +1,16 @@
+from __future__ import print_function, absolute_import
+
+from sentry import analytics
+from sentry.signals import join_request_created, join_request_link_viewed
+
+
+@join_request_created.connect(weak=False)
+def record_join_request_created(member, **kwargs):
+    analytics.record(
+        "join_request.created", member_id=member.id, organization_id=member.organization_id
+    )
+
+
+@join_request_link_viewed.connect(weak=False)
+def record_join_request_link_viewed(organization, **kwargs):
+    analytics.record("join_request.link_viewed", organization_id=organization.id)
diff --git a/src/sentry/signals.py b/src/sentry/signals.py
index c3760b4607..91f732603d 100644
--- a/src/sentry/signals.py
+++ b/src/sentry/signals.py
@@ -105,3 +105,7 @@ integration_issue_linked = BetterSignal(providing_args=["integration", "organiza
 issue_deleted = BetterSignal(providing_args=["group", "user", "delete_type"])
 
 monitor_failed = BetterSignal(providing_args=["monitor"])
+
+# experiments
+join_request_created = BetterSignal(providing_args=["member"])
+join_request_link_viewed = BetterSignal(providing_args=["organization"])
diff --git a/src/sentry/static/sentry/app/views/organizationJoinRequest.tsx b/src/sentry/static/sentry/app/views/organizationJoinRequest.tsx
index e693fb0aa4..5241191b28 100644
--- a/src/sentry/static/sentry/app/views/organizationJoinRequest.tsx
+++ b/src/sentry/static/sentry/app/views/organizationJoinRequest.tsx
@@ -4,6 +4,7 @@ import {Params} from 'react-router/lib/Router';
 
 import {addErrorMessage} from 'app/actionCreators/indicator';
 import {t, tct} from 'app/locale';
+import {trackAdhocEvent} from 'app/utils/analytics';
 import EmailField from 'app/views/settings/components/forms/emailField';
 import Form from 'app/views/settings/components/forms/form';
 import InlineSvg from 'app/components/inlineSvg';
@@ -23,6 +24,15 @@ class OrganizationJoinRequest extends React.Component<Props, State> {
     submitSuccess: null,
   };
 
+  componentDidMount() {
+    const {orgId} = this.props.params;
+
+    trackAdhocEvent({
+      eventKey: 'join_request.viewed',
+      org_slug: orgId,
+    });
+  }
+
   handleSubmitSuccess = () => {
     this.setState({submitSuccess: true});
   };
diff --git a/src/sentry/web/frontend/auth_login.py b/src/sentry/web/frontend/auth_login.py
index 7bba10febe..2ecb16cc7c 100644
--- a/src/sentry/web/frontend/auth_login.py
+++ b/src/sentry/web/frontend/auth_login.py
@@ -15,6 +15,7 @@ from sentry.auth.superuser import is_active_superuser
 from sentry.constants import WARN_SESSION_EXPIRED
 from sentry.http import get_server_hostname
 from sentry.models import AuthProvider, Organization, OrganizationStatus
+from sentry.signals import join_request_link_viewed
 from sentry.web.forms.accounts import AuthenticationForm, RegistrationForm
 from sentry.web.frontend.base import BaseView
 from sentry.utils import auth, metrics
@@ -91,6 +92,8 @@ class AuthLoginView(BaseView):
         if organization.get_option("sentry:join_requests") is False:
             return None
 
+        join_request_link_viewed.send_robust(sender=self, organization=organization)
+
         return reverse("sentry-join-request", args=[organization.slug])
 
     def get_next_uri(self, request):
diff --git a/tests/js/spec/views/organizationJoinRequest.spec.jsx b/tests/js/spec/views/organizationJoinRequest.spec.jsx
index 2ff5c2b37a..8ae8c354e3 100644
--- a/tests/js/spec/views/organizationJoinRequest.spec.jsx
+++ b/tests/js/spec/views/organizationJoinRequest.spec.jsx
@@ -2,8 +2,12 @@ import {mountWithTheme} from 'sentry-test/enzyme';
 import React from 'react';
 
 import {addErrorMessage} from 'app/actionCreators/indicator';
+import {trackAdhocEvent} from 'app/utils/analytics';
 import OrganizationJoinRequest from 'app/views/organizationJoinRequest';
 
+jest.mock('app/utils/analytics', () => ({
+  trackAdhocEvent: jest.fn(),
+}));
 jest.mock('app/actionCreators/indicator');
 
 describe('OrganizationJoinRequest', function() {
@@ -11,6 +15,7 @@ describe('OrganizationJoinRequest', function() {
   const endpoint = `/organizations/${org.slug}/join-request/`;
 
   beforeEach(function() {
+    trackAdhocEvent.mockClear();
     MockApiClient.clearMockResponses();
   });
 
@@ -23,6 +28,11 @@ describe('OrganizationJoinRequest', function() {
     expect(wrapper.find('h3').text()).toBe('Request to Join');
     expect(wrapper.find('EmailField').exists()).toBe(true);
     expect(wrapper.find('button[aria-label="Request to Join"]').exists()).toBe(true);
+
+    expect(trackAdhocEvent).toHaveBeenCalledWith({
+      eventKey: 'join_request.viewed',
+      org_slug: org.slug,
+    });
   });
 
   it('submits', async function() {
diff --git a/tests/sentry/api/endpoints/test_organization_join_request.py b/tests/sentry/api/endpoints/test_organization_join_request.py
index 814ec2e323..7752ec0a3f 100644
--- a/tests/sentry/api/endpoints/test_organization_join_request.py
+++ b/tests/sentry/api/endpoints/test_organization_join_request.py
@@ -108,9 +108,10 @@ class OrganizationJoinRequestTest(APITestCase):
         assert pending == original_pending
         assert not mock_log.info.called
 
+    @patch("sentry.analytics.record")
     @patch("sentry.api.endpoints.organization_join_request.logger")
     @patch("sentry.experiments.get", return_value=1)
-    def test_already_requested_to_join(self, mock_experiment, mock_log):
+    def test_already_requested_to_join(self, mock_experiment, mock_log, mock_record):
         join_request_email = "join-request@example.com"
         original_join_request = self.create_member(
             email=join_request_email,
@@ -128,9 +129,12 @@ class OrganizationJoinRequestTest(APITestCase):
         assert join_request == original_join_request
         assert not mock_log.info.called
 
+        assert not any(c[0][0] == "join_request.created" for c in mock_record.call_args_list)
+
+    @patch("sentry.analytics.record")
     @patch("sentry.api.endpoints.organization_join_request.logger")
     @patch("sentry.experiments.get", return_value=1)
-    def test_request_to_join(self, mock_experiment, mock_log):
+    def test_request_to_join(self, mock_experiment, mock_log, mock_record):
         with self.tasks():
             resp = self.get_response(self.org.slug, email=self.email)
 
@@ -153,4 +157,8 @@ class OrganizationJoinRequestTest(APITestCase):
             },
         )
 
+        mock_record.assert_called_with(
+            "join_request.created", member_id=join_request.id, organization_id=self.org.id
+        )
+
         assert len(mail.outbox) == 1
diff --git a/tests/sentry/web/frontend/test_auth_organization_login.py b/tests/sentry/web/frontend/test_auth_organization_login.py
index b09b576f58..be8d8d2ec7 100644
--- a/tests/sentry/web/frontend/test_auth_organization_login.py
+++ b/tests/sentry/web/frontend/test_auth_organization_login.py
@@ -25,7 +25,8 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
     def path(self):
         return reverse("sentry-auth-organization", args=[self.organization.slug])
 
-    def test_renders_basic(self):
+    @patch("sentry.analytics.record")
+    def test_renders_basic(self, mock_record):
         self.login_as(self.user)
         resp = self.client.get(self.path)
 
@@ -37,8 +38,11 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         assert "provider_key" not in resp.context
         assert resp.context["join_request_link"] is None
 
+        assert not any(c[0][0] == "join_request.link_viewed" for c in mock_record.call_args_list)
+
+    @patch("sentry.analytics.record")
     @patch("sentry.experiments.get", return_value=1)
-    def test_get_request_join_link_with_experiment(self, mock_experiment):
+    def test_get_request_join_link_with_experiment(self, mock_experiment, mock_record):
         self.login_as(self.user)
         resp = self.client.get(self.path)
 
@@ -47,6 +51,10 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
             "sentry-join-request", args=[self.organization.slug]
         )
 
+        mock_record.assert_called_with(
+            "join_request.link_viewed", organization_id=self.organization.id
+        )
+
     @patch("sentry.experiments.get", return_value=1)
     def test_cannot_get_request_join_link_with_setting_disabled(self, mock_experiment):
         OrganizationOption.objects.create(
