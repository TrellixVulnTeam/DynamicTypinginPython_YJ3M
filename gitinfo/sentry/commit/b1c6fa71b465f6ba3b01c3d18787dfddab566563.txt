commit b1c6fa71b465f6ba3b01c3d18787dfddab566563
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Feb 21 09:39:32 2018 -0800

    feat(api): Add endpoint for user notification fine tuning (#7240)

diff --git a/src/sentry/api/endpoints/user_notification_fine_tuning.py b/src/sentry/api/endpoints/user_notification_fine_tuning.py
new file mode 100644
index 0000000000..ba840d1478
--- /dev/null
+++ b/src/sentry/api/endpoints/user_notification_fine_tuning.py
@@ -0,0 +1,177 @@
+from __future__ import absolute_import
+
+import six
+
+from django.db import transaction
+from rest_framework import status
+from rest_framework.response import Response
+
+from sentry.api.bases.user import UserEndpoint
+from sentry.api.serializers import serialize
+from sentry.api.serializers.models import UserNotificationsSerializer
+from sentry.models import OrganizationMember, OrganizationMemberTeam, OrganizationStatus, ProjectTeam, UserOption, UserEmail
+
+
+KEY_MAP = {
+    'alerts': {
+        'key': 'mail:alert',
+        'type': int,
+    },
+
+    'workflow': {
+        'key': 'workflow:notifications',
+        'type': '',
+    },
+
+    'deploy': {
+        'key': 'deploy-emails',
+        'type': '',
+    },
+
+    'reports': {
+        'key': 'reports:disabled-organizations',
+        'type': '',
+    },
+
+    'email': {
+        'key': 'mail:email',
+        'type': '',
+    }
+}
+
+
+class UserNotificationFineTuningEndpoint(UserEndpoint):
+    def get(self, request, user, notification_type):
+        if notification_type not in KEY_MAP:
+            return Response(status=status.HTTP_404_NOT_FOUND)
+
+        notifications = UserNotificationsSerializer()
+
+        serialized = serialize(
+            user,
+            request.user,
+            notifications,
+            notification_option_key=KEY_MAP[notification_type]['key']
+        )
+        return Response(serialized)
+
+    def put(self, request, user, notification_type):
+        """
+        Update user notification options
+        ````````````````````````````````
+
+        Updates user's notification options on a per project or organization basis.
+        Expected payload is a map/dict whose key is a project or org id and value varies depending on `notification_type`.
+
+        For `alerts`, `workflow`, `email` it expects a key of projectId
+        For `deploy` and `reports` it expects a key of organizationId
+
+        For `alerts`, `workflow`, `deploy`, it expects a value of:
+            - "-1" = for "default" value (i.e. delete the option)
+            - "0"  = disabled
+            - "1"  = enabled
+        For `reports` it is only a boolean.
+        For `email` it is a verified email (string).
+
+        :auth required:
+        :pparam string notification_type:  One of:  alerts, workflow, reports, deploy, email
+        :param map: Expects a map of id -> value (enabled or email)
+        """
+
+        if notification_type not in KEY_MAP:
+            return Response(status=status.HTTP_404_NOT_FOUND)
+
+        key = KEY_MAP[notification_type]
+        filter_args = {
+            'user': user,
+            'key': key['key'],
+        }
+
+        if notification_type == 'reports':
+            (user_option, created) = UserOption.objects.get_or_create(**filter_args)
+
+            value = user_option.value or []
+
+            # set of org ids that user is a member of
+            org_ids = self.get_org_ids(user)
+            for org_id, enabled in request.DATA.items():
+                org_id = int(org_id)
+                # We want "0" to be falsey
+                enabled = int(enabled)
+
+                # make sure user is in org
+                if org_id not in org_ids:
+                    return Response(status=status.HTTP_403_FORBIDDEN)
+
+                if enabled:
+                    value.remove(org_id)
+                else:
+                    value.insert(0, org_id)
+
+            user_option.update(value=value)
+            return Response(status=status.HTTP_204_NO_CONTENT)
+
+        if notification_type in ['alerts', 'workflow', 'email']:
+            update_key = 'project'
+            parent_ids = set(self.get_project_ids(user))
+        else:
+            update_key = 'organization'
+            parent_ids = set(self.get_org_ids(user))
+
+        ids_to_update = set([int(i) for i in request.DATA.keys()])
+
+        # make sure that the ids we are going to update are a subset of the user's
+        # list of orgs or projects
+        if not ids_to_update.issubset(parent_ids):
+            return Response(status=status.HTTP_403_FORBIDDEN)
+
+        if notification_type == 'email':
+            # make sure target emails exist and are verified
+            emails_to_check = set(request.DATA.values())
+            emails = UserEmail.objects.filter(
+                user=user,
+                email__in=emails_to_check,
+                is_verified=True
+            )
+
+            # Is there a better way to check this?
+            if len(emails) != len(emails_to_check):
+                return Response(status=status.HTTP_400_BAD_REQUEST)
+
+        with transaction.atomic():
+            for id in request.DATA:
+                val = request.DATA[id]
+                int_val = int(val) if notification_type != 'email' else None
+
+                filter_args['%s_id' % update_key] = id
+
+                # 'email' doesn't have a default to delete, and it's a string
+                # -1 is a magic value to use "default" value, so just delete option
+                if int_val == -1:
+                    UserOption.objects.filter(**filter_args).delete()
+                else:
+                    user_option, _ = UserOption.objects.get_or_create(**filter_args)
+
+                    # Values have been saved as strings for `mail:alerts` *shrug*
+                    # `reports:disabled-organizations` requires an array of ids
+                    user_option.update(value=int_val if key['type'] is int else six.text_type(val))
+
+            return Response(status=status.HTTP_204_NO_CONTENT)
+
+    def get_org_ids(self, user):
+        """ Get org ids for user """
+        return set(
+            OrganizationMember.objects.filter(
+                user=user,
+                organization__status=OrganizationStatus.ACTIVE
+            ).values_list('organization_id', flat=True)
+        )
+
+    def get_project_ids(self, user):
+        """ Get project ids that user has access to """
+        return set(
+            ProjectTeam.objects.filter(
+                team_id__in=OrganizationMemberTeam.objects.filter(
+                    organizationmember__user=user
+                ).values_list('team_id', flat=True)
+            ).values_list('project_id', flat=True))
diff --git a/src/sentry/api/serializers/models/user_notifications.py b/src/sentry/api/serializers/models/user_notifications.py
new file mode 100644
index 0000000000..09fb9477a0
--- /dev/null
+++ b/src/sentry/api/serializers/models/user_notifications.py
@@ -0,0 +1,53 @@
+from __future__ import absolute_import
+
+from collections import defaultdict
+
+from sentry.api.serializers import Serializer
+from sentry.models import UserOption
+
+
+# notification_option_key is one of:
+# - mail:alert
+# - workflow:notifications
+# - deploy-emails
+# - reports:disabled-organizations
+# - mail:email
+class UserNotificationsSerializer(Serializer):
+    def get_attrs(self, item_list, user, *args, **kwargs):
+        notification_option_key = kwargs['notification_option_key']
+        filter_args = {}
+
+        if notification_option_key in ['alerts', 'workflow', 'email']:
+            filter_args['project__isnull'] = False
+        elif notification_option_key == 'deploy':
+            filter_args['organization__isnull'] = False
+
+        data = list(UserOption.objects.filter(
+            key=notification_option_key,
+            user__in=item_list,
+            **filter_args
+        ).select_related('user', 'project', 'organization'))
+
+        results = defaultdict(list)
+
+        for uo in data:
+            results[uo.user].append(uo)
+
+        return results
+
+    def serialize(self, obj, attrs, user, *args, **kwargs):
+        notification_option_key = kwargs['notification_option_key']
+        data = {}
+
+        for uo in attrs:
+            if notification_option_key == 'reports:disabled-organizations':
+                # UserOption for key=reports:disabled-organizations saves a list of orgIds
+                # that should not receive reports
+                # This UserOption should have both project + organization = None
+                for org_id in uo.value:
+                    data[org_id] = 0
+            elif uo.project is not None:
+                data[uo.project.id] = uo.value
+            elif uo.organization is not None:
+                data[uo.organization.id] = uo.value
+        return data
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 02c1a6cdf2..28fae8e6d3 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -147,6 +147,7 @@ from .endpoints.user_emails import UserEmailsEndpoint
 from .endpoints.user_organizations import UserOrganizationsEndpoint
 from .endpoints.user_notification_details import UserNotificationDetailsEndpoint
 from .endpoints.user_password import UserPasswordEndpoint
+from .endpoints.user_notification_fine_tuning import UserNotificationFineTuningEndpoint
 from .endpoints.user_social_identities_index import UserSocialIdentitiesIndexEndpoint
 from .endpoints.user_social_identity_details import UserSocialIdentityDetailsEndpoint
 from .endpoints.user_subscriptions import UserSubscriptionsEndpoint
@@ -258,6 +259,11 @@ urlpatterns = patterns(
         UserPasswordEndpoint.as_view(),
         name='sentry-api-0-user-password'
     ),
+    url(
+        r'^users/(?P<user_id>[^\/]+)/notifications/(?P<notification_type>[^\/]+)/$',
+        UserNotificationFineTuningEndpoint.as_view(),
+        name='sentry-api-0-user-notifications-fine-tuning'
+    ),
     url(
         r'^users/(?P<user_id>[^\/]+)/social-identities/$',
         UserSocialIdentitiesIndexEndpoint.as_view(),
diff --git a/tests/sentry/api/endpoints/test_user_notification_fine_tuning.py b/tests/sentry/api/endpoints/test_user_notification_fine_tuning.py
new file mode 100644
index 0000000000..e2b5beec80
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_user_notification_fine_tuning.py
@@ -0,0 +1,351 @@
+from __future__ import absolute_import
+
+from sentry.models import UserEmail, UserOption
+from sentry.testutils import APITestCase
+
+from django.core.urlresolvers import reverse
+
+
+class UserNotificationFineTuningTest(APITestCase):
+    def setUp(self):
+        self.user = self.create_user(email='a@example.com')
+        self.org = self.create_organization(name='Org Name', owner=self.user)
+        self.org2 = self.create_organization(name='Another Org', owner=self.user)
+        self.team = self.create_team(name='Team Name', organization=self.org, members=[self.user])
+        self.project = self.create_project(
+            organization=self.org,
+            teams=[self.team],
+            name='Project Name'
+        )
+
+        self.project2 = self.create_project(
+            organization=self.org,
+            teams=[self.team],
+            name='Another Name'
+        )
+
+        self.login_as(user=self.user)
+
+    def test_returns_correct_defaults(self):
+        UserOption.objects.create(user=self.user, project=self.project, key="mail:alert", value=1)
+        url = reverse(
+            'sentry-api-0-user-notifications-fine-tuning', kwargs={
+                'user_id': 'me',
+                'notification_type': 'alerts',
+            }
+        )
+        resp = self.client.get(url)
+        assert resp.data.get(self.project.id) == 1
+
+        UserOption.objects.create(
+            user=self.user,
+            organization=self.org,
+            key="deploy-emails",
+            value=1)
+        url = reverse(
+            'sentry-api-0-user-notifications-fine-tuning', kwargs={
+                'user_id': 'me',
+                'notification_type': 'deploy',
+            }
+        )
+        resp = self.client.get(url)
+        assert resp.data.get(self.org.id) == 1
+
+        UserOption.objects.create(
+            user=self.user,
+            organization=None,
+            key="reports:disabled-organizations",
+            value=[
+                self.org.id])
+        url = reverse(
+            'sentry-api-0-user-notifications-fine-tuning', kwargs={
+                'user_id': 'me',
+                'notification_type': 'reports',
+            }
+        )
+        resp = self.client.get(url)
+        assert resp.data.get(self.org.id) == 0
+
+    def test_invalid_notification_type(self):
+        url = reverse(
+            'sentry-api-0-user-notifications-fine-tuning', kwargs={
+                'user_id': 'me',
+                'notification_type': 'invalid',
+            }
+        )
+        resp = self.client.get(url)
+        assert resp.status_code == 404
+
+        resp = self.client.put(url)
+        assert resp.status_code == 404
+
+    def test_update_invalid_project(self):
+        url = reverse(
+            'sentry-api-0-user-notifications-fine-tuning', kwargs={
+                'user_id': 'me',
+                'notification_type': 'alerts',
+            }
+        )
+
+        update = {}
+        update['123'] = 1
+
+        resp = self.client.put(url, data=update)
+        assert resp.status_code == 403
+
+    def test_saves_and_returns_alerts(self):
+        url = reverse(
+            'sentry-api-0-user-notifications-fine-tuning', kwargs={
+                'user_id': 'me',
+                'notification_type': 'alerts',
+            }
+        )
+
+        update = {}
+        update[self.project.id] = 1
+        update[self.project2.id] = 2
+
+        resp = self.client.put(url, data=update)
+        assert resp.status_code == 204
+
+        assert UserOption.objects.get(
+            user=self.user,
+            project=self.project,
+            key="mail:alert").value == 1
+
+        assert UserOption.objects.get(
+            user=self.user,
+            project=self.project2,
+            key="mail:alert").value == 2
+
+        update = {}
+        update[self.project.id] = -1
+        # Can return to default
+        resp = self.client.put(url, data=update)
+        assert resp.status_code == 204
+
+        assert not UserOption.objects.filter(
+            user=self.user,
+            project=self.project,
+            key="mail:alert").exists()
+
+        assert UserOption.objects.get(
+            user=self.user,
+            project=self.project2,
+            key="mail:alert").value == 2
+
+    def test_saves_and_returns_workflow(self):
+        url = reverse(
+            'sentry-api-0-user-notifications-fine-tuning', kwargs={
+                'user_id': 'me',
+                'notification_type': 'workflow',
+            }
+        )
+
+        update = {}
+        update[self.project.id] = 1
+        update[self.project2.id] = 2
+
+        resp = self.client.put(url, data=update)
+        assert resp.status_code == 204
+
+        assert UserOption.objects.get(
+            user=self.user,
+            project=self.project,
+            key="workflow:notifications").value == '1'
+
+        assert UserOption.objects.get(
+            user=self.user,
+            project=self.project2,
+            key="workflow:notifications").value == '2'
+
+        update = {}
+        update[self.project.id] = -1
+        # Can return to default
+        resp = self.client.put(url, data=update)
+        assert resp.status_code == 204
+
+        assert not UserOption.objects.filter(
+            user=self.user,
+            project=self.project,
+            key="workflow:notifications")
+
+        assert UserOption.objects.get(
+            user=self.user,
+            project=self.project2,
+            key="workflow:notifications").value == '2'
+
+    def test_saves_and_returns_email_routing(self):
+        UserEmail.objects.create(user=self.user, email='alias@example.com', is_verified=True).save()
+
+        url = reverse(
+            'sentry-api-0-user-notifications-fine-tuning', kwargs={
+                'user_id': 'me',
+                'notification_type': 'email',
+            }
+        )
+
+        update = {}
+        update[self.project.id] = 'a@example.com'
+        update[self.project2.id] = 'alias@example.com'
+
+        resp = self.client.put(url, data=update)
+        assert resp.status_code == 204
+
+        assert UserOption.objects.get(
+            user=self.user,
+            project=self.project,
+            key="mail:email").value == 'a@example.com'
+
+        assert UserOption.objects.get(
+            user=self.user,
+            project=self.project2,
+            key="mail:email").value == 'alias@example.com'
+
+    def test_email_routing_emails_must_be_verified(self):
+        UserEmail.objects.create(
+            user=self.user,
+            email='alias@example.com',
+            is_verified=False).save()
+
+        url = reverse(
+            'sentry-api-0-user-notifications-fine-tuning', kwargs={
+                'user_id': 'me',
+                'notification_type': 'email',
+            }
+        )
+
+        update = {}
+        update[self.project.id] = 'alias@example.com'
+
+        resp = self.client.put(url, data=update)
+        assert resp.status_code == 400
+
+    def test_email_routing_emails_must_be_valid(self):
+        new_user = self.create_user(email="b@example.com")
+        UserEmail.objects.create(user=new_user, email="alias2@example.com", is_verified=True).save()
+
+        url = reverse(
+            'sentry-api-0-user-notifications-fine-tuning', kwargs={
+                'user_id': 'me',
+                'notification_type': 'email',
+            }
+        )
+
+        update = {}
+        update[self.project2.id] = 'alias2@example.com'
+
+        resp = self.client.put(url, data=update)
+        assert resp.status_code == 400
+
+    def test_saves_and_returns_deploy(self):
+        url = reverse(
+            'sentry-api-0-user-notifications-fine-tuning', kwargs={
+                'user_id': 'me',
+                'notification_type': 'deploy',
+            }
+        )
+
+        update = {}
+        update[self.org.id] = 0
+
+        resp = self.client.put(url, data=update)
+        assert resp.status_code == 204
+
+        assert UserOption.objects.get(
+            user=self.user,
+            organization=self.org.id,
+            key="deploy-emails").value == '0'
+
+        update = {}
+        update[self.org.id] = 1
+        resp = self.client.put(url, data=update)
+        assert UserOption.objects.get(
+            user=self.user,
+            organization=self.org,
+            key="deploy-emails").value == '1'
+
+        update = {}
+        update[self.org.id] = -1
+        resp = self.client.put(url, data=update)
+        assert not UserOption.objects.filter(
+            user=self.user,
+            organization=self.org,
+            key="deploy-emails").exists()
+
+    def test_saves_and_returns_weekly_reports(self):
+        url = reverse(
+            'sentry-api-0-user-notifications-fine-tuning', kwargs={
+                'user_id': 'me',
+                'notification_type': 'reports',
+            }
+        )
+
+        update = {}
+        update[self.org.id] = 0
+        update[self.org2.id] = "0"
+
+        resp = self.client.put(url, data=update)
+        assert resp.status_code == 204
+
+        assert set(UserOption.objects.get(
+            user=self.user,
+            key="reports:disabled-organizations").value) == set([self.org.id, self.org2.id])
+
+        update = {}
+        update[self.org.id] = 1
+        resp = self.client.put(url, data=update)
+        assert set(UserOption.objects.get(
+            user=self.user,
+            key="reports:disabled-organizations").value) == set([self.org2.id])
+
+        update = {}
+        update[self.org.id] = 0
+        resp = self.client.put(url, data=update)
+        assert set(UserOption.objects.get(
+            user=self.user,
+            key="reports:disabled-organizations").value) == set([self.org.id, self.org2.id])
+
+    def test_permissions(self):
+        new_user = self.create_user(email='b@example.com')
+        new_org = self.create_organization(name='New Org')
+        new_team = self.create_team(name='New Team', organization=new_org, members=[new_user])
+        new_project = self.create_project(
+            organization=new_org,
+            teams=[new_team],
+            name='New Project'
+        )
+
+        url = reverse(
+            'sentry-api-0-user-notifications-fine-tuning', kwargs={
+                'user_id': 'me',
+                'notification_type': 'reports',
+            }
+        )
+
+        update = {}
+        update[new_org.id] = 0
+
+        resp = self.client.put(url, data=update)
+        assert resp.status_code == 403
+
+        assert not UserOption.objects.filter(
+            user=self.user,
+            organization=new_org,
+            key="reports").exists()
+
+        url = reverse(
+            'sentry-api-0-user-notifications-fine-tuning', kwargs={
+                'user_id': 'me',
+                'notification_type': 'alerts',
+            }
+        )
+        update = {}
+        update[new_project.id] = 1
+        resp = self.client.put(url, data=update)
+        assert resp.status_code == 403
+
+        assert not UserOption.objects.filter(
+            user=self.user,
+            project=new_project,
+            key="mail:alert").exists()
