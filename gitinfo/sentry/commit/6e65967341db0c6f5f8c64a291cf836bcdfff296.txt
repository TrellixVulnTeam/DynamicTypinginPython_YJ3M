commit 6e65967341db0c6f5f8c64a291cf836bcdfff296
Author: Stephen Cefali <scefali@sentry.io>
Date:   Wed Mar 18 11:59:58 2020 -0700

    feat(ecosystem): refactoring api into base class (plugin only for now) (#17735)

diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index a05d92b196..96539869d0 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -12,7 +12,7 @@ from sentry import digests, ratelimits
 from sentry.digests import get_option_key as get_digest_option_key
 from sentry.digests.notifications import event_to_record, unsplit_key
 from sentry.exceptions import PluginError
-from sentry_plugins.exceptions import ApiError
+from sentry.shared_integrations.exceptions import ApiError
 from sentry.plugins.base import Notification, Plugin
 from sentry.plugins.base.configuration import react_plugin_config
 from sentry.models import ProjectOption
diff --git a/src/sentry/shared_integrations/__init__.py b/src/sentry/shared_integrations/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/sentry/shared_integrations/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/sentry/shared_integrations/client.py b/src/sentry/shared_integrations/client.py
new file mode 100644
index 0000000000..86021fed26
--- /dev/null
+++ b/src/sentry/shared_integrations/client.py
@@ -0,0 +1,272 @@
+from __future__ import absolute_import
+
+import logging
+import json
+import requests
+import six
+
+from collections import OrderedDict
+
+from django.core.cache import cache
+from bs4 import BeautifulSoup
+from django.utils.functional import cached_property
+from requests.exceptions import ConnectionError, Timeout, HTTPError
+from sentry.http import build_session
+from sentry.utils import metrics
+from sentry.utils.hashlib import md5_text
+from sentry.utils.decorators import classproperty
+
+from .exceptions import ApiHostError, ApiTimeoutError, ApiError, UnsupportedResponseType
+
+
+class BaseApiResponse(object):
+    text = ""
+
+    def __init__(self, headers=None, status_code=None):
+        self.headers = headers
+        self.status_code = status_code
+
+    def __repr__(self):
+        return u"<%s: code=%s, content_type=%s>" % (
+            type(self).__name__,
+            self.status_code,
+            self.headers.get("Content-Type", "") if self.headers else "",
+        )
+
+    @cached_property
+    def rel(self):
+        if not self.headers:
+            return {}
+        link_header = self.headers.get("Link")
+        if not link_header:
+            return {}
+        return {item["rel"]: item["url"] for item in requests.utils.parse_header_links(link_header)}
+
+    @classmethod
+    def from_response(self, response, allow_text=False):
+        # XXX(dcramer): this doesnt handle leading spaces, but they're not common
+        # paths so its ok
+        if response.text.startswith(u"<?xml"):
+            return XmlApiResponse(response.text, response.headers, response.status_code)
+        elif response.text.startswith("<"):
+            if not allow_text:
+                raise ValueError(u"Not a valid response type: {}".format(response.text[:128]))
+            elif response.status_code < 200 or response.status_code >= 300:
+                raise ValueError(
+                    u"Received unexpected plaintext response for code {}".format(
+                        response.status_code
+                    )
+                )
+            return TextApiResponse(response.text, response.headers, response.status_code)
+
+        # Some APIs will return JSON with an invalid content-type, so we try
+        # to decode it anyways
+        if "application/json" not in response.headers["Content-Type"]:
+            try:
+                data = json.loads(response.text, object_pairs_hook=OrderedDict)
+            except (TypeError, ValueError):
+                if allow_text:
+                    return TextApiResponse(response.text, response.headers, response.status_code)
+                raise UnsupportedResponseType(
+                    response.headers["Content-Type"], response.status_code
+                )
+        else:
+            data = json.loads(response.text, object_pairs_hook=OrderedDict)
+
+        if isinstance(data, dict):
+            return MappingApiResponse(data, response.headers, response.status_code)
+        elif isinstance(data, (list, tuple)):
+            return SequenceApiResponse(data, response.headers, response.status_code)
+        else:
+            raise NotImplementedError
+
+
+class TextApiResponse(BaseApiResponse):
+    def __init__(self, text, *args, **kwargs):
+        self.text = text
+        super(TextApiResponse, self).__init__(*args, **kwargs)
+
+
+class XmlApiResponse(BaseApiResponse):
+    def __init__(self, text, *args, **kwargs):
+        self.xml = BeautifulSoup(text, "xml")
+        super(XmlApiResponse, self).__init__(*args, **kwargs)
+
+
+class MappingApiResponse(dict, BaseApiResponse):
+    def __init__(self, data, *args, **kwargs):
+        dict.__init__(self, data)
+        BaseApiResponse.__init__(self, *args, **kwargs)
+
+    @property
+    def json(self):
+        return self
+
+
+class SequenceApiResponse(list, BaseApiResponse):
+    def __init__(self, data, *args, **kwargs):
+        list.__init__(self, data)
+        BaseApiResponse.__init__(self, *args, **kwargs)
+
+    @property
+    def json(self):
+        return self
+
+
+class BaseApiClient(object):
+    base_url = None
+
+    allow_text = False
+
+    allow_redirects = None
+
+    integration_type = None
+
+    log_path = None
+
+    datadog_prefix = None
+
+    cache_time = 900
+
+    def __init__(self, verify_ssl=True, logging_context=None):
+        self.verify_ssl = verify_ssl
+        self.logging_context = logging_context
+
+    @cached_property
+    def logger(self):
+        return logging.getLogger(self.log_path)
+
+    @classproperty
+    def name_field(cls):
+        return u"%s_name" % cls.integration_type
+
+    @classproperty
+    def name(cls):
+        return getattr(cls, cls.name_field)
+
+    def get_cache_prefix(self):
+        return u"%s.%s.client:" % (self.integration_type, self.name)
+
+    def track_response_data(self, code, error=None):
+        metrics.incr(
+            u"%s.http_response" % (self.datadog_prefix),
+            sample_rate=1.0,
+            tags={self.integration_type: self.name, "status": code},
+        )
+
+        extra = {
+            self.integration_type: self.name,
+            "status_string": six.text_type(code),
+            "error": six.text_type(error)[:256] if error else None,
+        }
+        extra.update(getattr(self, "logging_context", None) or {})
+        self.logger.info(u"%s.http_response" % (self.integration_type), extra=extra)
+
+    def build_url(self, path):
+        if path.startswith("/"):
+            if not self.base_url:
+                raise ValueError(u"Invalid URL: {}".format(path))
+            return u"{}{}".format(self.base_url, path)
+        return path
+
+    def _request(
+        self,
+        method,
+        path,
+        headers=None,
+        data=None,
+        params=None,
+        auth=None,
+        json=True,
+        allow_text=None,
+        allow_redirects=None,
+        timeout=None,
+    ):
+
+        if allow_text is None:
+            allow_text = self.allow_text
+
+        if allow_redirects is None:
+            allow_redirects = self.allow_redirects
+
+        if allow_redirects is None:  # is still None
+            allow_redirects = method.upper() == "GET"
+
+        if timeout is None:
+            timeout = 30
+
+        full_url = self.build_url(path)
+        session = build_session()
+
+        metrics.incr(
+            u"%s.http_request" % self.datadog_prefix,
+            sample_rate=1.0,
+            tags={self.integration_type: self.name},
+        )
+        try:
+            resp = getattr(session, method.lower())(
+                url=full_url,
+                headers=headers,
+                json=data if json else None,
+                data=data if not json else None,
+                params=params,
+                auth=auth,
+                verify=self.verify_ssl,
+                allow_redirects=allow_redirects,
+                timeout=timeout,
+            )
+            resp.raise_for_status()
+        except ConnectionError as e:
+            self.track_response_data("connection_error", e)
+            raise ApiHostError.from_exception(e)
+        except Timeout as e:
+            self.track_response_data("timeout", e)
+            raise ApiTimeoutError.from_exception(e)
+        except HTTPError as e:
+            resp = e.response
+            if resp is None:
+                self.track_response_data("unknown", e)
+                self.logger.exception(
+                    "request.error", extra={self.integration_type: self.name, "url": full_url}
+                )
+                raise ApiError("Internal Error")
+            self.track_response_data(resp.status_code, e)
+            raise ApiError.from_response(resp)
+
+        self.track_response_data(resp.status_code)
+
+        if resp.status_code == 204:
+            return {}
+
+        return BaseApiResponse.from_response(resp, allow_text=allow_text)
+
+    # subclasses should override ``request``
+    def request(self, *args, **kwargs):
+        return self._request(*args, **kwargs)
+
+    def delete(self, *args, **kwargs):
+        return self.request("DELETE", *args, **kwargs)
+
+    def get_cached(self, path, *args, **kwargs):
+        query = ""
+        if kwargs.get("params", None):
+            query = json.dumps(kwargs.get("params"), sort_keys=True)
+        key = self.get_cache_prefix() + md5_text(self.build_url(path), query).hexdigest()
+
+        result = cache.get(key)
+        if result is None:
+            result = self.request("GET", path, *args, **kwargs)
+            cache.set(key, result, self.cache_time)
+        return result
+
+    def get(self, *args, **kwargs):
+        return self.request("GET", *args, **kwargs)
+
+    def patch(self, *args, **kwargs):
+        return self.request("PATCH", *args, **kwargs)
+
+    def post(self, *args, **kwargs):
+        return self.request("POST", *args, **kwargs)
+
+    def put(self, *args, **kwargs):
+        return self.request("PUT", *args, **kwargs)
diff --git a/src/sentry_plugins/constants.py b/src/sentry/shared_integrations/constants.py
similarity index 100%
rename from src/sentry_plugins/constants.py
rename to src/sentry/shared_integrations/constants.py
diff --git a/src/sentry_plugins/exceptions.py b/src/sentry/shared_integrations/exceptions.py
similarity index 83%
rename from src/sentry_plugins/exceptions.py
rename to src/sentry/shared_integrations/exceptions.py
index 78b5cca40d..7f07ff815c 100644
--- a/src/sentry_plugins/exceptions.py
+++ b/src/sentry/shared_integrations/exceptions.py
@@ -29,7 +29,7 @@ class ApiError(Exception):
                 self.json = None
         else:
             self.json = None
-        super(ApiError, self).__init__(text[:128])
+        super(ApiError, self).__init__(text[:1024])
 
     @classmethod
     def from_response(cls, response):
@@ -43,14 +43,14 @@ class ApiHostError(ApiError):
 
     @classmethod
     def from_exception(cls, exception):
-        if hasattr(exception, "request"):
+        if getattr(exception, "request"):
             return cls.from_request(exception.request)
         return cls("Unable to reach host")
 
     @classmethod
     def from_request(cls, request):
         host = urlparse(request.url).netloc
-        return cls("Unable to reach host: {}".format(host))
+        return cls(u"Unable to reach host: {}".format(host))
 
 
 class ApiTimeoutError(ApiError):
@@ -76,3 +76,13 @@ class UnsupportedResponseType(ApiError):
     @property
     def content_type(self):
         return self.text
+
+
+class IntegrationError(Exception):
+    pass
+
+
+class IntegrationFormError(IntegrationError):
+    def __init__(self, field_errors):
+        super(IntegrationFormError, self).__init__("Invalid integration action")
+        self.field_errors = field_errors
diff --git a/src/sentry_plugins/base.py b/src/sentry_plugins/base.py
index 6626794ff5..4f8c959c65 100644
--- a/src/sentry_plugins/base.py
+++ b/src/sentry_plugins/base.py
@@ -7,8 +7,12 @@ import sys
 
 from sentry.exceptions import InvalidIdentity, PluginError
 
-from sentry_plugins.constants import ERR_INTERNAL, ERR_UNAUTHORIZED, ERR_UNSUPPORTED_RESPONSE_TYPE
-from sentry_plugins.exceptions import (
+from sentry.shared_integrations.constants import (
+    ERR_INTERNAL,
+    ERR_UNAUTHORIZED,
+    ERR_UNSUPPORTED_RESPONSE_TYPE,
+)
+from sentry.shared_integrations.exceptions import (
     ApiError,
     ApiHostError,
     ApiUnauthorized,
diff --git a/src/sentry_plugins/bitbucket/plugin.py b/src/sentry_plugins/bitbucket/plugin.py
index ca39b7c3c9..6142b76b25 100644
--- a/src/sentry_plugins/bitbucket/plugin.py
+++ b/src/sentry_plugins/bitbucket/plugin.py
@@ -6,7 +6,7 @@ from rest_framework.response import Response
 from sentry.plugins.bases.issue2 import IssuePlugin2, IssueGroupActionEndpoint
 from sentry.utils.http import absolute_uri
 
-from sentry_plugins.exceptions import ApiError
+from sentry.shared_integrations.exceptions import ApiError
 from sentry.integrations import FeatureDescription, IntegrationFeatures
 
 from .mixins import BitbucketMixin
diff --git a/src/sentry_plugins/bitbucket/repository_provider.py b/src/sentry_plugins/bitbucket/repository_provider.py
index 335d144bdb..00e136e5a4 100644
--- a/src/sentry_plugins/bitbucket/repository_provider.py
+++ b/src/sentry_plugins/bitbucket/repository_provider.py
@@ -9,7 +9,7 @@ from sentry.models import OrganizationOption
 from sentry.plugins import providers
 from sentry.utils.http import absolute_uri
 
-from sentry_plugins.exceptions import ApiError
+from sentry.shared_integrations.exceptions import ApiError
 
 from .endpoints.webhook import parse_raw_user_email, parse_raw_user_name
 from .mixins import BitbucketMixin
diff --git a/src/sentry_plugins/client.py b/src/sentry_plugins/client.py
index 2f2eb01038..0436ca528d 100644
--- a/src/sentry_plugins/client.py
+++ b/src/sentry_plugins/client.py
@@ -1,246 +1,19 @@
 from __future__ import absolute_import
 
-from collections import OrderedDict
-import logging
-import json
-import requests
-import six
 
-from bs4 import BeautifulSoup
-from django.utils.functional import cached_property
-from requests.exceptions import ConnectionError, Timeout, HTTPError
+from sentry.shared_integrations.client import BaseApiClient
+from sentry.shared_integrations.exceptions import ApiUnauthorized
 
-from sentry.http import build_session
-from sentry.utils import metrics
 
-from .exceptions import (
-    ApiHostError,
-    ApiTimeoutError,
-    ApiError,
-    ApiUnauthorized,
-    UnsupportedResponseType,
-)
+class ApiClient(BaseApiClient):
+    integration_type = "plugin"
 
+    datadog_prefix = "sentry-plugins"
 
-class BaseApiResponse(object):
-    text = ""
-
-    def __init__(self, headers=None, status_code=None):
-        self.headers = headers
-        self.status_code = status_code
-
-    def __repr__(self):
-        return u"<%s: code=%s, content_type=%s>" % (
-            type(self).__name__,
-            self.status_code,
-            self.headers.get("Content-Type", "") if self.headers else "",
-        )
-
-    @cached_property
-    def rel(self):
-        if not self.headers:
-            return {}
-        link_header = self.headers.get("Link")
-        if not link_header:
-            return {}
-        return {item["rel"]: item["url"] for item in requests.utils.parse_header_links(link_header)}
-
-    @classmethod
-    def from_response(self, response, allow_text=False):
-        # XXX(dcramer): this doesnt handle leading spaces, but they're not common
-        # paths so its ok
-        if response.text.startswith(u"<?xml"):
-            return XmlApiResponse(response.text, response.headers, response.status_code)
-        elif response.text.startswith("<"):
-            if not allow_text:
-                raise ValueError("Not a valid response type: {}".format(response.text[:128]))
-            elif response.status_code < 200 or response.status_code >= 300:
-                raise ValueError(
-                    "Received unexpected plaintext response for code {}".format(
-                        response.status_code
-                    )
-                )
-            return TextApiResponse(response.text, response.headers, response.status_code)
-
-        # Some APIs will return JSON with an invalid content-type, so we try
-        # to decode it anyways
-        if "application/json" not in response.headers["Content-Type"]:
-            try:
-                data = json.loads(response.text, object_pairs_hook=OrderedDict)
-            except (TypeError, ValueError):
-                if allow_text:
-                    return TextApiResponse(response.text, response.headers, response.status_code)
-                raise UnsupportedResponseType(
-                    response.headers["Content-Type"], response.status_code
-                )
-        else:
-            data = json.loads(response.text, object_pairs_hook=OrderedDict)
-
-        if isinstance(data, dict):
-            return MappingApiResponse(data, response.headers, response.status_code)
-        elif isinstance(data, (list, tuple)):
-            return SequenceApiResponse(data, response.headers, response.status_code)
-        else:
-            raise NotImplementedError
-
-
-class TextApiResponse(BaseApiResponse):
-    def __init__(self, text, *args, **kwargs):
-        self.text = text
-        super(TextApiResponse, self).__init__(*args, **kwargs)
-
-
-class XmlApiResponse(BaseApiResponse):
-    def __init__(self, text, *args, **kwargs):
-        self.xml = BeautifulSoup(text, "xml")
-        super(XmlApiResponse, self).__init__(*args, **kwargs)
-
-
-class MappingApiResponse(dict, BaseApiResponse):
-    def __init__(self, data, *args, **kwargs):
-        dict.__init__(self, data)
-        BaseApiResponse.__init__(self, *args, **kwargs)
-
-    @property
-    def json(self):
-        return self
-
-
-class SequenceApiResponse(list, BaseApiResponse):
-    def __init__(self, data, *args, **kwargs):
-        list.__init__(self, data)
-        BaseApiResponse.__init__(self, *args, **kwargs)
-
-    @property
-    def json(self):
-        return self
-
-
-class ApiClient(object):
-    base_url = None
-
-    allow_text = False
-
-    allow_redirects = None
-
-    logger = logging.getLogger("sentry.plugins")
+    log_path = "sentry.plugins.client"
 
     plugin_name = "undefined"
 
-    def __init__(self, verify_ssl=True, logging_context=None):
-        self.verify_ssl = verify_ssl
-        self.logging_context = logging_context
-
-    def track_response_data(self, code, error=None):
-        logger = logging.getLogger("sentry.plugins.client")
-
-        metrics.incr(
-            "sentry-plugins.http_response",
-            sample_rate=1.0,
-            tags={"plugin": self.plugin_name, "status": code},
-        )
-
-        extra = {
-            "plugin": self.plugin_name,
-            "status_string": six.text_type(code),
-            "error": six.text_type(error)[:128] if error else None,
-        }
-        extra.update(getattr(self, "logging_context", None) or {})
-        logger.info("plugins.http_response", extra=extra)
-
-    def build_url(self, path):
-        if path.startswith("/"):
-            if not self.base_url:
-                raise ValueError("Invalid URL: {}".format(path))
-            return "{}{}".format(self.base_url, path)
-        return path
-
-    def _request(
-        self,
-        method,
-        path,
-        headers=None,
-        data=None,
-        params=None,
-        auth=None,
-        json=True,
-        allow_text=None,
-        allow_redirects=None,
-        timeout=None,
-    ):
-
-        if allow_text is None:
-            allow_text = self.allow_text
-
-        if allow_redirects is None:
-            allow_redirects = self.allow_redirects
-
-        if allow_redirects is None:  # is still None
-            allow_redirects = method.upper() == "GET"
-
-        if timeout is None:
-            timeout = 30
-
-        full_url = self.build_url(path)
-        metrics.incr("sentry-plugins.http_request", tags={"plugin": self.plugin_name})
-
-        session = build_session()
-        try:
-            resp = getattr(session, method.lower())(
-                url=full_url,
-                headers=headers,
-                json=data if json else None,
-                data=data if not json else None,
-                params=params,
-                auth=auth,
-                verify=self.verify_ssl,
-                allow_redirects=allow_redirects,
-                timeout=timeout,
-            )
-            resp.raise_for_status()
-        except ConnectionError as e:
-            self.track_response_data("connection_error", e)
-            raise ApiHostError.from_exception(e)
-        except Timeout as e:
-            self.track_response_data("timeout", e)
-            raise ApiTimeoutError.from_exception(e)
-        except HTTPError as e:
-            resp = e.response
-            if resp is None:
-                self.track_response_data("unknown", e)
-                self.logger.exception(
-                    "request.error", extra={"plugin": self.plugin_name, "url": full_url}
-                )
-                raise ApiError("Internal Error")
-            self.track_response_data(resp.status_code, e)
-            raise ApiError.from_response(resp)
-
-        self.track_response_data(resp.status_code)
-
-        if resp.status_code == 204:
-            return {}
-
-        return BaseApiResponse.from_response(resp, allow_text=allow_text)
-
-    # subclasses should override ``request``
-    def request(self, *args, **kwargs):
-        return self._request(*args, **kwargs)
-
-    def delete(self, *args, **kwargs):
-        return self.request("DELETE", *args, **kwargs)
-
-    def get(self, *args, **kwargs):
-        return self.request("GET", *args, **kwargs)
-
-    def patch(self, *args, **kwargs):
-        return self.request("PATCH", *args, **kwargs)
-
-    def post(self, *args, **kwargs):
-        return self.request("POST", *args, **kwargs)
-
-    def put(self, *args, **kwargs):
-        return self.request("PUT", *args, **kwargs)
-
 
 class AuthApiClient(ApiClient):
     auth = None
diff --git a/src/sentry_plugins/github/endpoints/webhook.py b/src/sentry_plugins/github/endpoints/webhook.py
index 020db8053a..177694763a 100644
--- a/src/sentry_plugins/github/endpoints/webhook.py
+++ b/src/sentry_plugins/github/endpoints/webhook.py
@@ -30,7 +30,7 @@ from sentry.models import (
 from sentry.plugins.providers import RepositoryProvider
 from sentry.utils import json
 
-from sentry_plugins.exceptions import ApiError
+from sentry.shared_integrations.exceptions import ApiError
 from sentry_plugins.github.client import GitHubClient
 
 logger = logging.getLogger("sentry.webhooks")
diff --git a/src/sentry_plugins/github/plugin.py b/src/sentry_plugins/github/plugin.py
index 5c6e8e4d35..07ab832949 100644
--- a/src/sentry_plugins/github/plugin.py
+++ b/src/sentry_plugins/github/plugin.py
@@ -18,8 +18,8 @@ from sentry.plugins import providers
 from sentry.utils.http import absolute_uri
 
 from sentry_plugins.base import CorePluginMixin
-from sentry_plugins.constants import ERR_UNAUTHORIZED, ERR_INTERNAL
-from sentry_plugins.exceptions import ApiError
+from sentry.shared_integrations.constants import ERR_UNAUTHORIZED, ERR_INTERNAL
+from sentry.shared_integrations.exceptions import ApiError
 from sentry.integrations import FeatureDescription, IntegrationFeatures
 
 from .client import GitHubClient, GitHubAppsClient
diff --git a/src/sentry_plugins/gitlab/client.py b/src/sentry_plugins/gitlab/client.py
index 6be637c6ef..cb34896717 100644
--- a/src/sentry_plugins/gitlab/client.py
+++ b/src/sentry_plugins/gitlab/client.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from six.moves.urllib.parse import quote
 from sentry_plugins.client import ApiClient
 
-from sentry_plugins.exceptions import ApiError
+from sentry.shared_integrations.exceptions import ApiError
 
 
 class GitLabClient(ApiClient):
diff --git a/src/sentry_plugins/gitlab/plugin.py b/src/sentry_plugins/gitlab/plugin.py
index 245cf53069..f9995b681c 100644
--- a/src/sentry_plugins/gitlab/plugin.py
+++ b/src/sentry_plugins/gitlab/plugin.py
@@ -4,7 +4,7 @@ from sentry.plugins.bases.issue2 import IssuePlugin2
 from sentry.utils.http import absolute_uri
 
 from sentry_plugins.base import CorePluginMixin
-from sentry_plugins.exceptions import ApiError
+from sentry.shared_integrations.exceptions import ApiError
 from sentry_plugins.utils import get_secret_field_config
 from sentry.integrations import FeatureDescription, IntegrationFeatures
 
diff --git a/src/sentry_plugins/jira/client.py b/src/sentry_plugins/jira/client.py
index 0eba5576d2..149ddf4149 100644
--- a/src/sentry_plugins/jira/client.py
+++ b/src/sentry_plugins/jira/client.py
@@ -7,7 +7,7 @@ from hashlib import md5 as _md5
 from sentry.utils.cache import cache
 from django.utils.encoding import force_bytes
 
-from sentry_plugins.exceptions import ApiError
+from sentry.shared_integrations.exceptions import ApiError
 from sentry_plugins.client import ApiClient
 
 log = logging.getLogger(__name__)
diff --git a/src/sentry_plugins/jira/plugin.py b/src/sentry_plugins/jira/plugin.py
index e34209c960..61d0186d09 100644
--- a/src/sentry_plugins/jira/plugin.py
+++ b/src/sentry_plugins/jira/plugin.py
@@ -20,7 +20,7 @@ from sentry.plugins.bases.issue2 import IssuePlugin2, IssueGroupActionEndpoint,
 from sentry.utils.http import absolute_uri
 
 from sentry_plugins.base import CorePluginMixin
-from sentry_plugins.exceptions import ApiError, ApiUnauthorized
+from sentry.shared_integrations.exceptions import ApiError, ApiUnauthorized
 from sentry_plugins.jira.client import JiraClient
 from sentry_plugins.utils import get_secret_field_config
 from sentry.integrations import FeatureDescription, IntegrationFeatures
diff --git a/src/sentry_plugins/jira_ac/utils.py b/src/sentry_plugins/jira_ac/utils.py
index 114c3514d9..8cc28aea3c 100644
--- a/src/sentry_plugins/jira_ac/utils.py
+++ b/src/sentry_plugins/jira_ac/utils.py
@@ -5,7 +5,7 @@ import jwt
 
 from six.moves.urllib.parse import quote
 
-from sentry_plugins.exceptions import ApiError
+from sentry.shared_integrations.exceptions import ApiError
 
 
 def percent_encode(val):
diff --git a/src/sentry_plugins/victorops/plugin.py b/src/sentry_plugins/victorops/plugin.py
index 41d20461b3..1e7cf0f814 100644
--- a/src/sentry_plugins/victorops/plugin.py
+++ b/src/sentry_plugins/victorops/plugin.py
@@ -5,7 +5,7 @@ import six
 from sentry.plugins.bases.notify import NotifyPlugin
 
 from sentry_plugins.base import CorePluginMixin
-from sentry_plugins.exceptions import ApiError
+from sentry.shared_integrations.exceptions import ApiError
 from sentry_plugins.utils import get_secret_field_config
 from sentry.integrations import FeatureDescription, IntegrationFeatures
 
diff --git a/src/sentry_plugins/vsts/mixins.py b/src/sentry_plugins/vsts/mixins.py
index f9885a1d27..0b2dbf17f6 100644
--- a/src/sentry_plugins/vsts/mixins.py
+++ b/src/sentry_plugins/vsts/mixins.py
@@ -5,7 +5,7 @@ import logging
 from sentry.exceptions import PluginError
 
 from sentry_plugins.base import CorePluginMixin
-from sentry_plugins.constants import ERR_UNAUTHORIZED
+from sentry.shared_integrations.constants import ERR_UNAUTHORIZED
 
 from .client import VstsClient
 
diff --git a/tests/sentry/plugins/bases/notify/tests.py b/tests/sentry/plugins/bases/notify/tests.py
index d098df988e..9424febc94 100644
--- a/tests/sentry/plugins/bases/notify/tests.py
+++ b/tests/sentry/plugins/bases/notify/tests.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from sentry_plugins.base import CorePluginMixin
 from sentry.exceptions import PluginError
-from sentry_plugins.exceptions import ApiError, ApiHostError, ApiUnauthorized
+from sentry.shared_integrations.exceptions import ApiError, ApiHostError, ApiUnauthorized
 from sentry.plugins.bases.notify import NotificationPlugin
 from sentry.plugins.base.structs import Notification
 from sentry.testutils import TestCase
diff --git a/tests/sentry_plugins/test_client.py b/tests/sentry_plugins/test_client.py
index 21424eb488..94902446a3 100644
--- a/tests/sentry_plugins/test_client.py
+++ b/tests/sentry_plugins/test_client.py
@@ -6,7 +6,7 @@ import responses
 from sentry.utils.compat.mock import Mock
 from sentry.testutils import TestCase
 
-from sentry_plugins.exceptions import (
+from sentry.shared_integrations.exceptions import (
     ApiError,
     ApiHostError,
     ApiUnauthorized,
