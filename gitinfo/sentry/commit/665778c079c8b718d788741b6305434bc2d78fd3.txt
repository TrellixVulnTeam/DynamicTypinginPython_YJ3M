commit 665778c079c8b718d788741b6305434bc2d78fd3
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed May 1 20:01:58 2019 +0200

    feat: Support Trimmed Function Names via raw_function (#12990)
    
    Adds support for the new `raw_function` attribute.
    
    Function for native now holds the trimmed function name and raw_function
    holds the possibly truncated raw version. The legacy grouping strategy now
    picks up the raw function name, newest newstyle works with the trimmed one.
    
    This improves the user experience for heavily templated C++ code where one
    can currently not actually currently tell what the name of a function in the
    stacktrace is.

diff --git a/requirements-base.txt b/requirements-base.txt
index 6070c70664..a258c101e1 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -56,7 +56,7 @@ redis>=2.10.3,<2.10.6
 requests-oauthlib==0.3.3
 requests[security]>=2.20.0,<2.21.0
 selenium==3.141.0
-semaphore>=0.4.27,<0.5.0
+semaphore>=0.4.32,<0.5.0
 sentry-sdk>=0.7.0
 setproctitle>=1.1.7,<1.2.0
 simplejson>=3.2.0,<3.9.0
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 755928e033..180b58f227 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -61,7 +61,7 @@ from sentry.utils.geo import rust_geoip
 from sentry.utils.pubsub import QueuedPublisherService, KafkaPublisher
 from sentry.utils.safe import safe_execute, trim, get_path, setdefault_path
 from sentry.utils.validators import is_float
-from sentry.stacktraces import normalize_stacktraces_for_grouping
+from sentry.stacktraces.processing import normalize_stacktraces_for_grouping
 from sentry.culprit import generate_culprit
 
 
diff --git a/src/sentry/eventtypes/error.py b/src/sentry/eventtypes/error.py
index 80eaf3aa5d..72b5888899 100644
--- a/src/sentry/eventtypes/error.py
+++ b/src/sentry/eventtypes/error.py
@@ -13,10 +13,8 @@ def get_crash_location(exception, platform=None):
     for frame in reversed(get_path(exception, 'stacktrace', 'frames', filter=True) or ()):
         fn = frame.get('filename') or frame.get('abs_path')
         if fn:
-            func = frame.get('function')
-            if func is not None:
-                from sentry.grouping.strategies.utils import trim_function_name
-                func = trim_function_name(func, frame.get('platform') or platform)
+            from sentry.stacktraces.functions import get_function_name_for_frame
+            func = get_function_name_for_frame(frame, platform)
             if frame.get('in_app'):
                 return fn, func
             if default is None:
diff --git a/src/sentry/grouping/enhancer.py b/src/sentry/grouping/enhancer.py
index e7f0803699..675fd34be4 100644
--- a/src/sentry/grouping/enhancer.py
+++ b/src/sentry/grouping/enhancer.py
@@ -10,7 +10,7 @@ from itertools import izip
 from parsimonious.grammar import Grammar, NodeVisitor
 from parsimonious.exceptions import ParseError
 
-from sentry.grouping.utils import get_grouping_family_for_platform
+from sentry.stacktraces.platform import get_behavior_family_for_platform
 from sentry.utils.compat import implements_to_string
 from sentry.utils.glob import glob_match
 
@@ -108,15 +108,13 @@ class Match(object):
             flags = self.pattern.split(',')
             if 'all' in flags:
                 return True
-            family = get_grouping_family_for_platform(frame_data.get('platform') or platform)
+            family = get_behavior_family_for_platform(frame_data.get('platform') or platform)
             return family in flags
 
         # all other matches are case sensitive
         if self.key == 'function':
-            from sentry.grouping.strategies.utils import trim_function_name
-            value = trim_function_name(
-                frame_data.get('function') or '<unknown>',
-                frame_data.get('platform') or platform)
+            from sentry.stacktraces.functions import get_function_name_for_frame
+            value = get_function_name_for_frame(frame_data, platform) or '<unknown>'
         elif self.key == 'module':
             value = frame_data.get('module') or '<unknown>'
         else:
diff --git a/src/sentry/grouping/fingerprinting.py b/src/sentry/grouping/fingerprinting.py
index 4f07874c6c..35c366533b 100644
--- a/src/sentry/grouping/fingerprinting.py
+++ b/src/sentry/grouping/fingerprinting.py
@@ -6,7 +6,7 @@ import inspect
 from parsimonious.grammar import Grammar, NodeVisitor
 from parsimonious.exceptions import ParseError
 
-from sentry.grouping.utils import get_grouping_family_for_platform
+from sentry.stacktraces.platform import get_behavior_family_for_platform
 from sentry.utils.safe import get_path
 from sentry.utils.glob import glob_match
 
@@ -67,7 +67,7 @@ class EventAccess(object):
             if message:
                 self._messages.append({
                     'message': message,
-                    'family': get_grouping_family_for_platform(self.event.get('platform')),
+                    'family': get_behavior_family_for_platform(self.event.get('platform')),
                 })
         return self._messages
 
@@ -78,21 +78,23 @@ class EventAccess(object):
                 self._exceptions.append({
                     'type': exc.get('type'),
                     'value': exc.get('value'),
-                    'family': get_grouping_family_for_platform(self.event.get('platform')),
+                    'family': get_behavior_family_for_platform(self.event.get('platform')),
                 })
         return self._exceptions
 
     def get_frames(self, with_functions=False):
-        from sentry.grouping.strategies.utils import trim_function_name
+        from sentry.stacktraces.functions import get_function_name_for_frame
         if self._frames is None:
             self._frames = []
 
             def _push_frame(frame):
+                platform = frame.get('platform') or self.event.get('platform')
+                func = get_function_name_for_frame(frame, platform)
                 self._frames.append({
-                    'function': trim_function_name(frame.get('function'), '<unknown>'),
+                    'function': func or '<unknown>',
                     'path': frame.get('abs_path') or frame.get('filename'),
                     'module': frame.get('module'),
-                    'family': get_grouping_family_for_platform(frame.get('platform') or self.event.get('platform')),
+                    'family': get_behavior_family_for_platform(platform),
                     'package': frame.get('package'),
                 })
 
diff --git a/src/sentry/grouping/strategies/combined.py b/src/sentry/grouping/strategies/combined.py
index c38454dae4..81429c7e2d 100644
--- a/src/sentry/grouping/strategies/combined.py
+++ b/src/sentry/grouping/strategies/combined.py
@@ -2,7 +2,7 @@
 from __future__ import absolute_import
 
 from sentry.grouping.strategies.base import strategy, lookup_strategy
-from sentry.grouping.utils import get_grouping_family_for_platform
+from sentry.stacktraces.platform import get_behavior_family_for_platform
 
 
 def dispatch_strategy(id, targets, score=None):
@@ -43,7 +43,7 @@ def dispatch_strategy(id, targets, score=None):
 
 
 def is_native(meta):
-    return get_grouping_family_for_platform(meta['event'].platform) == 'native'
+    return get_behavior_family_for_platform(meta['event'].platform) == 'native'
 
 
 stacktrace_v1nl = dispatch_strategy(
diff --git a/src/sentry/grouping/strategies/configurations.py b/src/sentry/grouping/strategies/configurations.py
index 9a275f6e09..7b6c999ef4 100644
--- a/src/sentry/grouping/strategies/configurations.py
+++ b/src/sentry/grouping/strategies/configurations.py
@@ -95,7 +95,7 @@ register_strategy_config(
         'message:v2',
     ],
     delegates=[
-        'frame:v1',
+        'frame:v2',
         'stacktrace:v1',
         'single-exception:v2',
     ],
diff --git a/src/sentry/grouping/strategies/legacy.py b/src/sentry/grouping/strategies/legacy.py
index cf3101ed86..f8584108d6 100644
--- a/src/sentry/grouping/strategies/legacy.py
+++ b/src/sentry/grouping/strategies/legacy.py
@@ -81,11 +81,11 @@ def is_unhashable_module_legacy(frame, platform):
     return False
 
 
-def is_unhashable_function_legacy(frame):
+def is_unhashable_function_legacy(func):
     # TODO(dcramer): lambda$ is Java specific
     # TODO(dcramer): [Anonymous is PHP specific (used for things like SQL
     # queries and JSON data)
-    return frame.function.startswith(('lambda$', '[Anonymous'))
+    return func.startswith(('lambda$', '[Anonymous'))
 
 
 def is_recursion_legacy(frame1, frame2):
@@ -263,6 +263,14 @@ def frame_legacy(frame, event, **meta):
     contributes = None
     hint = None
 
+    # this requires some explanation: older sentry versions did not have
+    # raw_function but only function.  For some platforms like native
+    # we now instead store a trimmed function name in frame.function so
+    # and the original value moved to raw_function.  This requires us to
+    # prioritize raw_function over function in the legacy grouping code to
+    # avoid creating new groups.
+    func = frame.raw_function or frame.function
+
     # Safari throws [native code] frames in for calls like ``forEach``
     # whereas Chrome ignores these. Let's remove it from the hashing algo
     # so that they're more likely to group together
@@ -333,7 +341,7 @@ def frame_legacy(frame, event, **meta):
     if frame.context_line is not None:
         if len(frame.context_line) > 120:
             context_line_component.update(hint='discarded because line too long')
-        elif is_url_frame_legacy(frame) and not frame.function:
+        elif is_url_frame_legacy(frame) and not func:
             context_line_component.update(hint='discarded because from URL origin')
         else:
             context_line_component.update(values=[frame.context_line])
@@ -350,10 +358,10 @@ def frame_legacy(frame, event, **meta):
        (module_component.contributes or filename_component.contributes):
         if frame.symbol:
             symbol_component.update(values=[frame.symbol])
-            if frame.function:
+            if func:
                 function_component.update(
                     contributes=False,
-                    values=[frame.function],
+                    values=[func],
                     hint='symbol takes precedence'
                 )
             if frame.lineno:
@@ -362,8 +370,8 @@ def frame_legacy(frame, event, **meta):
                     values=[frame.lineno],
                     hint='symbol takes precedence'
                 )
-        elif frame.function:
-            if is_unhashable_function_legacy(frame):
+        elif func:
+            if is_unhashable_function_legacy(func):
                 function_component.update(values=[
                     GroupingComponent(
                         id='salt',
@@ -372,7 +380,7 @@ def frame_legacy(frame, event, **meta):
                     )
                 ])
             else:
-                function, function_hint = remove_function_outliers_legacy(frame.function)
+                function, function_hint = remove_function_outliers_legacy(func)
                 function_component.update(
                     values=[function],
                     hint=function_hint
@@ -392,10 +400,10 @@ def frame_legacy(frame, event, **meta):
                 values=[frame.symbol],
                 hint='symbol is used only if module or filename are available'
             )
-        if frame.function:
+        if func:
             function_component.update(
                 contributes=False,
-                values=[frame.function],
+                values=[func],
                 hint='function name is used only if module or filename are available'
             )
         if frame.lineno:
diff --git a/src/sentry/grouping/strategies/newstyle.py b/src/sentry/grouping/strategies/newstyle.py
index 47dd5c9abd..96d823b9e9 100644
--- a/src/sentry/grouping/strategies/newstyle.py
+++ b/src/sentry/grouping/strategies/newstyle.py
@@ -5,16 +5,13 @@ import re
 
 from sentry.grouping.component import GroupingComponent
 from sentry.grouping.strategies.base import strategy
-from sentry.grouping.strategies.utils import replace_enclosed_string, \
-    split_func_tokens, remove_non_stacktrace_variants
+from sentry.grouping.strategies.utils import remove_non_stacktrace_variants
 from sentry.grouping.strategies.message import trim_message_for_grouping
+from sentry.stacktraces.platform import get_behavior_family_for_platform
 
 
-_rust_hash = re.compile(r'::h[a-z0-9]{16}$')
-_windecl_hash = re.compile(r'^@?(.*?)@[0-9]+$')
 _ruby_erb_func = re.compile(r'__\d{4,}_\d{4,}$')
 _basename_re = re.compile(r'[/\\]')
-_cpp_trailer_re = re.compile(r'(\bconst\b|&)$')
 
 # OpenJDK auto-generated classes for reflection access:
 #   sun.reflect.GeneratedSerializationConstructorAccessor123
@@ -40,10 +37,6 @@ _java_assist_enhancer_re = re.compile(r'''(\$\$_javassist)(?:_seam)?(?:_[0-9]+)?
 # Clojure anon functions are compiled down to myapp.mymodule$fn__12345
 _clojure_enhancer_re = re.compile(r'''(\$fn__)\d+''', re.X)
 
-# Native function trim re.  For now this is a simple hack until we have the
-# language hints in which will let us trim this down better.
-_native_function_trim_re = re.compile(r'^(.[^(]*)\(')
-
 # fields that need to be the same between frames for them to be considered
 # recursive calls
 RECURSION_COMPARISON_FIELDS = [
@@ -157,115 +150,74 @@ def get_module_component_v1(abs_path, module, platform):
     return module_component
 
 
-def isolate_native_function_v1(function):
-    original_function = function
-    function = function.strip()
-
-    # Ensure we don't operated on objc functions
-    if function.startswith(('[', '+[', '-[')):
-        return function
-
-    # Chop off C++ trailers
-    while 1:
-        match = _cpp_trailer_re.search(function)
-        if match is None:
-            break
-        function = function[:match.start()].rstrip()
-
-    # Because operator<< really screws with our balancing, so let's work
-    # around that by replacing it with a character we do not observe in
-    # `split_func_tokens` or `replace_enclosed_string`.
-    function = function \
-        .replace('operator<<', u'operator⟨⟨') \
-        .replace('operator<', u'operator⟨') \
-        .replace('operator()', u'operator◯')
-
-    # Remove the arguments if there is one.
-    def process_args(value, start):
-        value = value.strip()
-        if value in ('anonymous namespace', 'operator'):
-            return '(%s)' % value
-        return ''
-    function = replace_enclosed_string(function, '(', ')', process_args)
-
-    # Resolve generic types, but special case rust which uses things like
-    # <Foo as Bar>::baz to denote traits.
-    def process_generics(value, start):
-        # Rust special case
-        if start == 0:
-            return '<%s>' % replace_enclosed_string(value, '<', '>', process_generics)
-        return '<T>'
-    function = replace_enclosed_string(function, '<', '>', process_generics)
-
-    # The last token is the function name.
-    tokens = split_func_tokens(function)
-    if tokens:
-        function = tokens[-1].replace(u'⟨', '<').replace(u'◯', '()')
-
-    # This really should never happen
-    else:
-        function = original_function
-
-    # trim off rust markers
-    function = _rust_hash.sub('', function)
-
-    # trim off windows decl markers
-    return _windecl_hash.sub('\\1', function)
-
-
-def get_function_component_v1(function, platform):
+def get_function_component(function, platform, legacy_function_logic,
+                           raw_function=None):
     """
     Attempt to normalize functions by removing common platform outliers.
 
     - Ruby generates (random?) integers for various anonymous style functions
       such as in erb and the active_support library.
     - Block functions have metadata that we don't care about.
+
+    The `legacy_function_logic` parameter controls if the system should
+    use the frame v1 function name logic or the frame v2 logic.  The difference
+    is that v2 uses the function name consistently and v1 prefers raw function
+    or a trimmed version (of the truncated one) for native.
     """
-    if not function:
+    from sentry.stacktraces.functions import trim_function_name
+
+    if legacy_function_logic:
+        func = raw_function or function
+    else:
+        func = function or raw_function
+        if not raw_function and function:
+            func = trim_function_name(func, platform)
+
+    if not func:
         return GroupingComponent(id='function')
 
     function_component = GroupingComponent(
         id='function',
-        values=[function],
+        values=[func],
     )
 
     if platform == 'ruby':
-        if function.startswith('block '):
+        if func.startswith('block '):
             function_component.update(
                 values=['block'],
                 hint='ruby block'
             )
         else:
-            new_function = _ruby_erb_func.sub('', function)
-            if new_function != function:
+            new_function = _ruby_erb_func.sub('', func)
+            if new_function != func:
                 function_component.update(
                     values=[new_function],
                     hint='removed generated erb template suffix'
                 )
 
     elif platform == 'php':
-        if function.startswith('[Anonymous'):
+        if func.startswith('[Anonymous'):
             function_component.update(
                 contributes=False,
                 hint='ignored anonymous function'
             )
 
     elif platform == 'java':
-        if function.startswith('lambda$'):
+        if func.startswith('lambda$'):
             function_component.update(
                 contributes=False,
                 hint='ignored lambda function'
             )
 
-    elif platform in ('objc', 'cocoa', 'native'):
-        if function in ('<redacted>', '<unknown>'):
+    elif get_behavior_family_for_platform(platform) == 'native':
+        if func in ('<redacted>', '<unknown>'):
             function_component.update(
                 contributes=False,
                 hint='ignored unknown function'
             )
-        else:
-            new_function = isolate_native_function_v1(function)
-            if new_function != function:
+        elif legacy_function_logic:
+            new_function = trim_function_name(func, platform)
+            if new_function != func:
                 function_component.update(
                     values=[new_function],
                     hint='isolated function'
@@ -280,6 +232,21 @@ def get_function_component_v1(function, platform):
     variants=['!system', 'app'],
 )
 def frame_v1(frame, event, **meta):
+    return get_frame_component(frame, event, meta,
+                               legacy_function_logic=True)
+
+
+@strategy(
+    id='frame:v2',
+    interfaces=['frame'],
+    variants=['!system', 'app'],
+)
+def frame_v2(frame, event, **meta):
+    return get_frame_component(frame, event, meta,
+                               legacy_function_logic=False)
+
+
+def get_frame_component(frame, event, meta, legacy_function_logic=False):
     platform = frame.platform or event.platform
 
     # Safari throws [native code] frames in for calls like ``forEach``
@@ -298,8 +265,12 @@ def frame_v1(frame, event, **meta):
             hint='module takes precedence'
         )
 
-    function_component = get_function_component_v1(
-        frame.function, platform)
+    function_component = get_function_component(
+        function=frame.function,
+        raw_function=frame.raw_function,
+        platform=platform,
+        legacy_function_logic=legacy_function_logic
+    )
 
     return GroupingComponent(
         id='frame',
diff --git a/src/sentry/grouping/strategies/utils.py b/src/sentry/grouping/strategies/utils.py
index cfa7d6e69e..2343b13435 100644
--- a/src/sentry/grouping/strategies/utils.py
+++ b/src/sentry/grouping/strategies/utils.py
@@ -3,85 +3,6 @@ from __future__ import absolute_import
 import six
 
 
-PAIRS = {
-    '(': ')',
-    '{': '}',
-    '[': ']',
-    '<': '>',
-}
-
-
-def replace_enclosed_string(s, start, end, replacement=None):
-    if start not in s:
-        return s
-
-    depth = 0
-
-    rv = []
-    pair_start = None
-    for idx, char in enumerate(s):
-        if char == start:
-            if depth == 0:
-                pair_start = idx
-            depth += 1
-        elif char == end:
-            depth -= 1
-            if depth == 0:
-                if replacement is not None:
-                    if callable(replacement):
-                        rv.append(replacement(s[pair_start + 1:idx], pair_start))
-                    else:
-                        rv.append(replacement)
-        elif depth == 0:
-            rv.append(char)
-
-    return ''.join(rv)
-
-
-def split_func_tokens(s):
-    buf = []
-    rv = []
-    stack = []
-    end = 0
-
-    for idx, char in enumerate(s):
-        if char in PAIRS:
-            stack.append(PAIRS[char])
-        elif stack and char == stack[-1]:
-            stack.pop()
-            if not stack:
-                buf.append(s[end:idx + 1])
-                end = idx + 1
-        elif not stack:
-            if char.isspace():
-                if buf:
-                    rv.append(buf)
-                buf = []
-            else:
-                buf.append(s[end:idx + 1])
-            end = idx + 1
-
-    if buf:
-        rv.append(buf)
-
-    return [''.join(x) for x in rv]
-
-
-def trim_function_name(function, platform):
-    """This works similar to `get_function_component_v1` but returns a
-    string in all situations that was just trimmed.  This function is supposed
-    to be used for display purposes in the UI.
-
-    The return value of this function does not need to be kept stable so it
-    can be upgraded without breaking grouping.
-    """
-    from sentry.grouping.strategies.newstyle import get_function_component_v1
-    component = get_function_component_v1(function, platform)
-    if len(component.values) == 1 and isinstance(component.values[0], six.string_types):
-        return component.values[0]
-    return function
-
-
 def remove_non_stacktrace_variants(variants):
     """This is a utility function that when given multiple variants will
     mark all variants as non contributing that do not contain any stacktraces
diff --git a/src/sentry/grouping/utils.py b/src/sentry/grouping/utils.py
index a760a8702c..79f1e214a3 100644
--- a/src/sentry/grouping/utils.py
+++ b/src/sentry/grouping/utils.py
@@ -12,11 +12,3 @@ def hash_from_values(values):
     for value in values:
         result.update(force_bytes(value, errors='replace'))
     return result.hexdigest()
-
-
-def get_grouping_family_for_platform(platform):
-    if platform in ('objc', 'cocoa', 'swift', 'native', 'c'):
-        return 'native'
-    if platform in ('javascript', 'node'):
-        return 'javascript'
-    return 'other'
diff --git a/src/sentry/interfaces/schemas.py b/src/sentry/interfaces/schemas.py
index e7ebca2ec6..e318b32aa1 100644
--- a/src/sentry/interfaces/schemas.py
+++ b/src/sentry/interfaces/schemas.py
@@ -109,6 +109,7 @@ FRAME_INTERFACE_SCHEMA = {
         'errors': {},
         'filename': {'type': 'string'},
         'function': {'type': 'string'},
+        'raw_function': {'type': 'string'},
         'image_addr': {},
         'in_app': {'type': 'boolean', 'default': False},
         'instruction_addr': {},
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 6e370f809e..9dfdbadf38 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -204,6 +204,7 @@ class Frame(Interface):
                 'errors',
                 'filename',
                 'function',
+                'raw_function',
                 'image_addr',
                 'in_app',
                 'instruction_addr',
@@ -229,6 +230,7 @@ class Frame(Interface):
         filename = data.get('filename')
         symbol = data.get('symbol')
         function = data.get('function')
+        raw_function = data.get('raw_function')
         module = data.get('module')
         package = data.get('package')
 
@@ -298,6 +300,7 @@ class Frame(Interface):
             'platform': platform,
             'module': trim(module, 256),
             'function': trim(function, 256),
+            'raw_function': trim(raw_function, 256),
             'package': package,
             'image_addr': to_hex_addr(data.get('image_addr')),
             'symbol': trim(symbol, 256),
@@ -339,6 +342,7 @@ class Frame(Interface):
             'platform': self.platform or None,
             'module': self.module or None,
             'function': self.function or None,
+            'raw_function': self.raw_function or None,
             'package': self.package or None,
             'image_addr': self.image_addr,
             'symbol': self.symbol,
@@ -357,6 +361,8 @@ class Frame(Interface):
         })
 
     def get_api_context(self, is_public=False, pad_addr=None, platform=None):
+        from sentry.stacktraces.functions import get_function_name_for_frame
+        function = get_function_name_for_frame(self, platform)
         data = {
             'filename': self.filename,
             'absPath': self.abs_path,
@@ -365,7 +371,8 @@ class Frame(Interface):
             'platform': self.platform,
             'instructionAddr': pad_hex_addr(self.instruction_addr, pad_addr),
             'symbolAddr': pad_hex_addr(self.symbol_addr, pad_addr),
-            'function': self.function,
+            'function': function,
+            'rawFunction': self.raw_function,
             'symbol': self.symbol,
             'context': get_context(
                 lineno=self.lineno,
diff --git a/src/sentry/lang/java/plugin.py b/src/sentry/lang/java/plugin.py
index ffcd646cfa..65e2431dc1 100644
--- a/src/sentry/lang/java/plugin.py
+++ b/src/sentry/lang/java/plugin.py
@@ -4,7 +4,7 @@ import six
 
 from symbolic import ProguardMappingView
 from sentry.plugins import Plugin2
-from sentry.stacktraces import StacktraceProcessor
+from sentry.stacktraces.processing import StacktraceProcessor
 from sentry.models import ProjectDebugFile, EventError
 from sentry.reprocessing import report_processing_issue
 from sentry.utils.safe import get_path
diff --git a/src/sentry/lang/javascript/plugin.py b/src/sentry/lang/javascript/plugin.py
index 70735011b4..9966468bd9 100644
--- a/src/sentry/lang/javascript/plugin.py
+++ b/src/sentry/lang/javascript/plugin.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import, print_function
 
 from sentry.plugins import Plugin2
-from sentry.stacktraces import find_stacktraces_in_data
+from sentry.stacktraces.processing import find_stacktraces_in_data
 from sentry.utils.safe import get_path
 
 from .processor import JavaScriptStacktraceProcessor
diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index ce218fce8f..af9dbf0e53 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -33,7 +33,7 @@ from sentry.utils.hashlib import md5_text
 from sentry.utils.http import is_valid_origin
 from sentry.utils.safe import get_path
 from sentry.utils import metrics
-from sentry.stacktraces import StacktraceProcessor
+from sentry.stacktraces.processing import StacktraceProcessor
 
 from .cache import SourceCache, SourceMapCache
 
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 61e15ed407..62e326bf61 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -20,7 +20,9 @@ from sentry.models.eventerror import EventError
 from sentry.utils import metrics
 from sentry.utils.in_app import is_known_third_party
 from sentry.utils.safe import get_path
-from sentry.stacktraces import StacktraceProcessor
+from sentry.stacktraces.processing import StacktraceProcessor
+from sentry.stacktraces.functions import trim_function_name
+from sentry.utils.safe import trim
 from sentry.reprocessing import report_processing_issue
 
 logger = logging.getLogger(__name__)
@@ -380,10 +382,23 @@ class NativeStacktraceProcessor(StacktraceProcessor):
         else:  # processable_frame.cache_value is present
             _ignored, symbolicated_frames = processable_frame.cache_value
 
+        platform = raw_frame.get('platform') or self.data.get('platform')
         new_frames = []
         for sfrm in symbolicated_frames:
             new_frame = dict(raw_frame)
-            new_frame['function'] = sfrm['function']
+
+            raw_func = trim(sfrm['function'], 256)
+            func = trim(trim_function_name(sfrm['function'], platform), 256)
+
+            # if function and raw function match, we can get away without
+            # storing a raw function
+            if func == raw_func:
+                new_frame['function'] = raw_func
+            # otherwise we store both
+            else:
+                new_frame['raw_function'] = raw_func
+                new_frame['function'] = func
+
             if sfrm.get('symbol'):
                 new_frame['symbol'] = sfrm['symbol']
             if sfrm.get('abs_path'):
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index ccda8ce979..283a3474e7 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -111,7 +111,7 @@ class Symbolizer(object):
             'lineno': sym.line,
         }
         symbol = trim(sym.symbol, MAX_SYM)
-        function = trim(sym.function_name, MAX_SYM)
+        function = sym.function_name
 
         frame['function'] = function
         if function != symbol:
diff --git a/src/sentry/stacktraces/__init__.py b/src/sentry/stacktraces/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/sentry/stacktraces/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/sentry/stacktraces/functions.py b/src/sentry/stacktraces/functions.py
new file mode 100644
index 0000000000..2abbde072b
--- /dev/null
+++ b/src/sentry/stacktraces/functions.py
@@ -0,0 +1,175 @@
+# coding: utf-8
+from __future__ import absolute_import
+
+import re
+
+from sentry.stacktraces.platform import get_behavior_family_for_platform
+
+
+_windecl_hash = re.compile(r'^@?(.*?)@[0-9]+$')
+_rust_hash = re.compile(r'::h[a-z0-9]{16}$')
+_cpp_trailer_re = re.compile(r'(\bconst\b|&)$')
+
+
+PAIRS = {
+    '(': ')',
+    '{': '}',
+    '[': ']',
+    '<': '>',
+}
+
+
+def replace_enclosed_string(s, start, end, replacement=None):
+    if start not in s:
+        return s
+
+    depth = 0
+
+    rv = []
+    pair_start = None
+    for idx, char in enumerate(s):
+        if char == start:
+            if depth == 0:
+                pair_start = idx
+            depth += 1
+        elif char == end:
+            depth -= 1
+            if depth == 0:
+                if replacement is not None:
+                    if callable(replacement):
+                        rv.append(replacement(s[pair_start + 1:idx], pair_start))
+                    else:
+                        rv.append(replacement)
+        elif depth == 0:
+            rv.append(char)
+
+    return ''.join(rv)
+
+
+def split_func_tokens(s):
+    buf = []
+    rv = []
+    stack = []
+    end = 0
+
+    for idx, char in enumerate(s):
+        if char in PAIRS:
+            stack.append(PAIRS[char])
+        elif stack and char == stack[-1]:
+            stack.pop()
+            if not stack:
+                buf.append(s[end:idx + 1])
+                end = idx + 1
+        elif not stack:
+            if char.isspace():
+                if buf:
+                    rv.append(buf)
+                buf = []
+            else:
+                buf.append(s[end:idx + 1])
+            end = idx + 1
+
+    if buf:
+        rv.append(buf)
+
+    return [''.join(x) for x in rv]
+
+
+def trim_function_name(function, platform):
+    """Given a function value from the frame's function attribute this returns
+    a trimmed version that can be stored in `function_name`.  This is only used
+    if the client did not supply a value itself already.
+    """
+    if get_behavior_family_for_platform(platform) != 'native':
+        return function
+    if function in ('<redacted>', '<unknown>'):
+        return function
+
+    original_function = function
+    function = function.strip()
+
+    # Ensure we don't operate on objc functions
+    if function.startswith(('[', '+[', '-[')):
+        return function
+
+    # Chop off C++ trailers
+    while 1:
+        match = _cpp_trailer_re.search(function)
+        if match is None:
+            break
+        function = function[:match.start()].rstrip()
+
+    # Because operator<< really screws with our balancing, so let's work
+    # around that by replacing it with a character we do not observe in
+    # `split_func_tokens` or `replace_enclosed_string`.
+    function = function \
+        .replace('operator<<', u'operator⟨⟨') \
+        .replace('operator<', u'operator⟨') \
+        .replace('operator()', u'operator◯')\
+        .replace(' -> ', u' ⟿ ')
+
+    # Remove the arguments if there is one.
+    def process_args(value, start):
+        value = value.strip()
+        if value in ('anonymous namespace', 'operator'):
+            return '(%s)' % value
+        return ''
+    function = replace_enclosed_string(function, '(', ')', process_args)
+
+    # Resolve generic types, but special case rust which uses things like
+    # <Foo as Bar>::baz to denote traits.
+    def process_generics(value, start):
+        # Rust special case
+        if start == 0:
+            return '<%s>' % replace_enclosed_string(value, '<', '>', process_generics)
+        return '<T>'
+    function = replace_enclosed_string(function, '<', '>', process_generics)
+
+    tokens = split_func_tokens(function)
+
+    # find the token which is the function name.  Since we chopped of C++
+    # trailers there are only two cases we care about: the token left to
+    # the -> return marker which is for instance used in Swift and if that
+    # is not found, the last token in the last.
+    #
+    # ["unsigned", "int", "whatever"] -> whatever
+    # ["@objc", "whatever", "->", "int"] -> whatever
+    try:
+        func_token = tokens[tokens.index(u'⟿') - 1]
+    except ValueError:
+        if tokens:
+            func_token = tokens[-1]
+        else:
+            func_token = None
+
+    if func_token:
+        function = func_token.replace(u'⟨', '<') \
+            .replace(u'◯', '()') \
+            .replace(u' ⟿ ', ' -> ')
+
+    # This really should never happen
+    else:
+        function = original_function
+
+    # trim off rust markers
+    function = _rust_hash.sub('', function)
+
+    # trim off windows decl markers
+    return _windecl_hash.sub('\\1', function)
+
+
+def get_function_name_for_frame(frame, platform=None):
+    """Given a frame object or dictionary this returns the actual function
+    name trimmed.
+    """
+    if hasattr(frame, 'get_raw_data'):
+        frame = frame.get_raw_data()
+
+    # if there is a raw function, prioritize the function unchanged
+    if frame.get('raw_function'):
+        return frame.get('function')
+
+    # otherwise trim the function on demand
+    rv = frame.get('function')
+    if rv:
+        return trim_function_name(rv, frame.get('platform') or platform)
diff --git a/src/sentry/stacktraces/platform.py b/src/sentry/stacktraces/platform.py
new file mode 100644
index 0000000000..a5c80cf802
--- /dev/null
+++ b/src/sentry/stacktraces/platform.py
@@ -0,0 +1,9 @@
+from __future__ import absolute_import
+
+
+def get_behavior_family_for_platform(platform):
+    if platform in ('objc', 'cocoa', 'swift', 'native', 'c'):
+        return 'native'
+    if platform in ('javascript', 'node'):
+        return 'javascript'
+    return 'other'
diff --git a/src/sentry/stacktraces.py b/src/sentry/stacktraces/processing.py
similarity index 94%
rename from src/sentry/stacktraces.py
rename to src/sentry/stacktraces/processing.py
index 2a94088bf0..1094e258f8 100644
--- a/src/sentry/stacktraces.py
+++ b/src/sentry/stacktraces/processing.py
@@ -8,11 +8,12 @@ from django.utils import timezone
 from collections import namedtuple, OrderedDict
 
 from sentry.models import Project, Release
-from sentry.grouping.utils import get_grouping_family_for_platform
 from sentry.utils.in_app import is_known_third_party
 from sentry.utils.cache import cache
 from sentry.utils.hashlib import hash_values
 from sentry.utils.safe import get_path, safe_execute
+from sentry.stacktraces.platform import get_behavior_family_for_platform
+from sentry.stacktraces.functions import trim_function_name
 
 
 logger = logging.getLogger(__name__)
@@ -222,7 +223,7 @@ def _normalize_in_app(stacktrace, platform=None, sdk_info=None):
         if frame.get('in_app') is not None:
             continue
 
-        family = get_grouping_family_for_platform(frame.get('platform') or platform)
+        family = get_behavior_family_for_platform(frame.get('platform') or platform)
         if family == 'native':
             frame_package = frame.get('package')
             frame['in_app'] = bool(frame_package) and \
@@ -243,6 +244,7 @@ def _normalize_in_app(stacktrace, platform=None, sdk_info=None):
 def normalize_stacktraces_for_grouping(data, grouping_config=None):
     """
     Applies grouping enhancement rules and ensure in_app is set on all frames.
+    This also trims functions if necessary.
     """
 
     stacktraces = []
@@ -255,8 +257,26 @@ def normalize_stacktraces_for_grouping(data, grouping_config=None):
     if not stacktraces:
         return
 
-    # If a grouping config is available, run grouping enhancers
     platform = data.get('platform')
+
+    # Put the trimmed function names into the frames.  We only do this if
+    # the trimming produces a different function than the function we have
+    # otherwise stored in `function` to not make the payload larger
+    # unnecessarily.
+    for frames in stacktraces:
+        for frame in frames:
+            if frame.get('raw_function') is not None:
+                continue
+            raw_func = frame.get('function')
+            if not raw_func:
+                continue
+            function_name = trim_function_name(
+                raw_func, frame.get('platform') or platform)
+            if function_name != raw_func:
+                frame['raw_function'] = raw_func
+                frame['function'] = function_name
+
+    # If a grouping config is available, run grouping enhancers
     if grouping_config is not None:
         for frames in stacktraces:
             grouping_config.enhancements.apply_modifications_to_frame(frames, platform)
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index 42c99c41cf..f87d3076d9 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -25,6 +25,43 @@ export function trimPackage(pkg) {
   return filename.replace(/\.(dylib|so|a|dll|exe)$/, '');
 }
 
+class FunctionName extends React.Component {
+  static propTypes = {
+    frame: PropTypes.object,
+  };
+
+  constructor(props) {
+    super(props);
+    this.state = {
+      rawFunction: false,
+    };
+  }
+
+  toggle = event => {
+    event.stopPropagation();
+    this.setState(({rawFunction}) => ({rawFunction: !rawFunction}));
+  };
+
+  render() {
+    const {frame, ...props} = this.props;
+    const func = frame.function;
+    const rawFunc = frame.rawFunction;
+    const canToggle = rawFunc && func && func !== rawFunc;
+
+    if (!canToggle) {
+      return <code {...props}>{func || rawFunc || '<unknown>'}</code>;
+    }
+
+    const current = this.state.rawFunction ? rawFunc : func;
+    const title = this.state.rawFunction ? null : rawFunc;
+    return (
+      <code {...props} title={title}>
+        <a onClick={this.toggle}>{current || '<unknown>'}</a>
+      </code>
+    );
+  }
+}
+
 const Frame = createReactClass({
   displayName: 'Frame',
 
@@ -172,7 +209,7 @@ const Frame = createReactClass({
           />
         );
       }
-      if (defined(data.function)) {
+      if (defined(data.function) || defined(data.rawFunction)) {
         title.push(
           <span className="in-at" key="in">
             {' '}
@@ -182,12 +219,8 @@ const Frame = createReactClass({
       }
     }
 
-    if (defined(data.function)) {
-      title.push(
-        <code key="function" className="function">
-          {data.function}
-        </code>
-      );
+    if (defined(data.function) || defined(data.rawFunction)) {
+      title.push(<FunctionName frame={data} key="function" className="function" />);
     }
 
     // we don't want to render out zero line numbers which are used to
@@ -433,9 +466,12 @@ const Frame = createReactClass({
             )}
             <span className="address">{data.instructionAddr}</span>
             <span className="symbol">
-              <code>{data.function || '<unknown>'}</code>{' '}
+              <FunctionName frame={data} />{' '}
               {data.filename && (
-                <span className="filename">
+                <span
+                  className="filename"
+                  title={data.absPath !== data.filename ? data.absPath : null}
+                >
                   {data.filename}
                   {data.lineNo ? ':' + data.lineNo : ''}
                 </span>
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index 20bac33cdb..296bdb867f 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1413,6 +1413,14 @@ div.traceback > ul {
           background: transparent;
           color: @blue-dark;
           padding-right: 5px;
+
+          a {
+            color: inherit;
+
+            &:hover {
+              text-decoration: underline;
+            }
+          }
         }
 
         span.offset {
@@ -1422,6 +1430,7 @@ div.traceback > ul {
 
         span.filename {
           color: @purple;
+          margin-right: 3px;
 
           &:before {
             content: '(';
diff --git a/src/sentry/tasks/store.py b/src/sentry/tasks/store.py
index 86122ffb0b..44b5a46925 100644
--- a/src/sentry/tasks/store.py
+++ b/src/sentry/tasks/store.py
@@ -22,7 +22,7 @@ from sentry.cache import default_cache
 from sentry.tasks.base import instrumented_task
 from sentry.utils import json, kafka, metrics
 from sentry.utils.safe import safe_execute
-from sentry.stacktraces import process_stacktraces, \
+from sentry.stacktraces.processing import process_stacktraces, \
     should_process_for_stacktraces
 from sentry.utils.data_filters import FilterStatKeys
 from sentry.utils.canonical import CanonicalKeyDict, CANONICAL_TYPES
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_basic.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_basic.pysnap
index 241efca8b8..0ae4aabe91 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_basic.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_basic.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.284731Z'
+created: '2019-04-30T08:25:08.305752Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_exception.py
 ---
@@ -25,6 +25,7 @@ get_api_context:
         module: null
         package: null
         platform: null
+        rawFunction: null
         symbol: null
         symbolAddr: null
         trust: null
@@ -52,6 +53,7 @@ get_api_context:
         module: null
         package: null
         platform: null
+        rawFunction: null
         symbol: null
         symbolAddr: null
         trust: null
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_mechanism.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_mechanism.pysnap
index 4e25912242..3c811a5b3a 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_mechanism.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_mechanism.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.416286Z'
+created: '2019-04-30T08:25:08.436911Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_exception.py
 ---
@@ -26,6 +26,7 @@ get_api_context:
         module: null
         package: null
         platform: null
+        rawFunction: null
         symbol: null
         symbolAddr: null
         trust: null
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_mixed_frames.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_mixed_frames.pysnap
index d5464a79d4..5685a6967e 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_mixed_frames.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_mixed_frames.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.335046Z'
+created: '2019-04-30T08:25:08.353517Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_exception.py
 ---
@@ -25,6 +25,7 @@ get_api_context:
         module: null
         package: null
         platform: null
+        rawFunction: null
         symbol: null
         symbolAddr: null
         trust: null
@@ -52,6 +53,7 @@ get_api_context:
         module: null
         package: null
         platform: null
+        rawFunction: null
         symbol: null
         symbolAddr: null
         trust: null
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_only_app_frames.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_only_app_frames.pysnap
index c8dc4d3f66..21f435d722 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_only_app_frames.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_only_app_frames.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.384878Z'
+created: '2019-04-30T08:25:08.407188Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_exception.py
 ---
@@ -25,6 +25,7 @@ get_api_context:
         module: null
         package: null
         platform: null
+        rawFunction: null
         symbol: null
         symbolAddr: null
         trust: null
@@ -52,6 +53,7 @@ get_api_context:
         module: null
         package: null
         platform: null
+        rawFunction: null
         symbol: null
         symbolAddr: null
         trust: null
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_only_system_frames.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_only_system_frames.pysnap
index 5aafeb59c8..f0e2a276c9 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_only_system_frames.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_only_system_frames.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.365846Z'
+created: '2019-04-30T08:25:08.388370Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_exception.py
 ---
@@ -25,6 +25,7 @@ get_api_context:
         module: null
         package: null
         platform: null
+        rawFunction: null
         symbol: null
         symbolAddr: null
         trust: null
@@ -52,6 +53,7 @@ get_api_context:
         module: null
         package: null
         platform: null
+        rawFunction: null
         symbol: null
         symbolAddr: null
         trust: null
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_raw_stacks.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_raw_stacks.pysnap
index 5acbe520b3..2fb6a4e5aa 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_raw_stacks.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_raw_stacks.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.402480Z'
+created: '2019-04-30T08:25:08.423212Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_exception.py
 ---
@@ -24,6 +24,7 @@ get_api_context:
         module: null
         package: null
         platform: null
+        rawFunction: null
         symbol: null
         symbolAddr: null
         trust: null
@@ -45,6 +46,7 @@ get_api_context:
         module: null
         package: null
         platform: null
+        rawFunction: null
         symbol: null
         symbolAddr: null
         trust: null
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_symbols.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_symbols.pysnap
index c8507c5343..b958f15f11 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_symbols.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_symbols.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.348098Z'
+created: '2019-04-30T08:25:08.369051Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_exception.py
 ---
@@ -25,6 +25,7 @@ get_api_context:
         module: null
         package: null
         platform: null
+        rawFunction: null
         symbol: Class.myfunc
         symbolAddr: null
         trust: null
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_basics.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_basics.pysnap
index f47da95b82..69f31fbe26 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_basics.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_basics.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:36.728580Z'
+created: '2019-04-30T08:25:10.021819Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_threads.py
 ---
@@ -23,6 +23,7 @@ api_context:
         module: null
         package: null
         platform: null
+        rawFunction: null
         symbol: null
         symbolAddr: null
         trust: null
@@ -44,6 +45,7 @@ api_context:
         module: null
         package: null
         platform: null
+        rawFunction: null
         symbol: null
         symbolAddr: null
         trust: null
diff --git a/tests/sentry/event_manager/interfaces/test_exception.py b/tests/sentry/event_manager/interfaces/test_exception.py
index b8288f38a2..7ed14aae6d 100644
--- a/tests/sentry/event_manager/interfaces/test_exception.py
+++ b/tests/sentry/event_manager/interfaces/test_exception.py
@@ -5,7 +5,7 @@ from __future__ import absolute_import
 import pytest
 
 from sentry.interfaces.exception import Exception, slim_exception_data
-from sentry.stacktraces import normalize_stacktraces_for_grouping
+from sentry.stacktraces.processing import normalize_stacktraces_for_grouping
 from sentry.models import Event
 from sentry.event_manager import EventManager
 
diff --git a/tests/sentry/grouping/grouping_inputs/native-with-function-name.json b/tests/sentry/grouping/grouping_inputs/native-with-function-name.json
new file mode 100644
index 0000000000..11482bc4eb
--- /dev/null
+++ b/tests/sentry/grouping/grouping_inputs/native-with-function-name.json
@@ -0,0 +1,142 @@
+{
+  "culprit": "",
+  "event_id": "043fabbee34d4a2fb7b767baf3ed1287",
+  "platform": "native",
+  "logger": "",
+  "threads": {
+    "values": [
+      {
+        "crashed": true,
+        "id": 775
+      }
+    ]
+  },
+  "fingerprint": [
+    "{{ default }}"
+  ],
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "main",
+              "abs_path": "../macos/main.cpp",
+              "in_app": false,
+              "package": "/private/tmp/breakpad-tools/macos/./build/crash",
+              "filename": "../macos/main.cpp",
+              "lineno": 47,
+              "trust": "context",
+              "instruction_addr": "0x10cb29243",
+              "raw_function": "main"
+            },
+            {
+              "function": "(anonymous namespace)::start()",
+              "abs_path": "../macos/main.cpp",
+              "in_app": false,
+              "package": "/private/tmp/breakpad-tools/macos/./build/crash",
+              "symbol": "_ZN12_GLOBAL__N_15startEv",
+              "filename": "../macos/main.cpp",
+              "lineno": 40,
+              "trust": "context",
+              "instruction_addr": "0x10cb29243"
+            },
+            {
+              "raw_function": "(anonymous namespace)::crash(int, int)",
+              "abs_path": "../macos/main.cpp",
+              "in_app": false,
+              "package": "/private/tmp/breakpad-tools/macos/./build/crash",
+              "symbol": "_ZN12_GLOBAL__N_15crashEii",
+              "filename": "../macos/main.cpp",
+              "lineno": 36,
+              "trust": "context",
+              "instruction_addr": "0x10cb29243",
+              "function": "(anonymous namespace)::crash"
+            },
+            {
+              "raw_function": "(anonymous namespace)::something::nested::Foo<std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std:...",
+              "abs_path": "../macos/main.cpp",
+              "in_app": false,
+              "package": "/private/tmp/breakpad-tools/macos/./build/crash",
+              "symbol": "_ZN12_GLOBAL__N_19something6nested3FooINSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESA_NS3_4lessISA_EENS8_INS3_4pairIKSA_SA_EEEEEEE5crashEii",
+              "filename": "../macos/main.cpp",
+              "lineno": 28,
+              "trust": "context",
+              "instruction_addr": "0x10cb29243",
+              "function": "(anonymous namespace)::something::nested::Foo<T>::crash"
+            }
+          ],
+          "registers": {
+            "r14": "0x0",
+            "r15": "0x0",
+            "r12": "0x0",
+            "r13": "0x0",
+            "r10": "0x7ff26bc00000",
+            "r11": "0x7",
+            "rsp": "0x7ffee30e45f0",
+            "rbx": "0x0",
+            "r8": "0x26bc054f",
+            "r9": "0xffff7fff",
+            "rip": "0x10cb29243",
+            "rbp": "0x7ffee30e4730",
+            "rdx": "0x10000",
+            "rcx": "0x7ff26bc054e8",
+            "rdi": "0x55",
+            "rax": "0x7ff26bc054e0",
+            "rsi": "0x26bc0550"
+          }
+        },
+        "type": "EXC_BAD_ACCESS / KERN_INVALID_ADDRESS",
+        "mechanism": {
+          "synthetic": true,
+          "type": "minidump",
+          "handled": false
+        },
+        "thread_id": 775,
+        "value": "Fatal Error: EXC_BAD_ACCESS / KERN_INVALID_ADDRESS",
+        "raw_stacktrace": {
+          "frames": [
+            {
+              "trust": "scan",
+              "in_app": false,
+              "instruction_addr": "0x7fff6b0f93d5",
+              "package": "/usr/lib/system/libdyld.dylib"
+            },
+            {
+              "trust": "scan",
+              "in_app": false,
+              "instruction_addr": "0x10cb292c0",
+              "package": "/private/tmp/breakpad-tools/macos/./build/crash"
+            },
+            {
+              "trust": "context",
+              "in_app": false,
+              "instruction_addr": "0x10cb29243",
+              "package": "/private/tmp/breakpad-tools/macos/./build/crash"
+            }
+          ],
+          "registers": {
+            "r14": "0x0",
+            "r15": "0x0",
+            "r12": "0x0",
+            "r13": "0x0",
+            "r10": "0x7ff26bc00000",
+            "r11": "0x7",
+            "rsp": "0x7ffee30e45f0",
+            "rbx": "0x0",
+            "r8": "0x26bc054f",
+            "r9": "0xffff7fff",
+            "rip": "0x10cb29243",
+            "rbp": "0x7ffee30e4730",
+            "rdx": "0x10000",
+            "rcx": "0x7ff26bc054e8",
+            "rdi": "0x55",
+            "rax": "0x7ff26bc054e0",
+            "rsi": "0x26bc0550"
+          }
+        }
+      }
+    ]
+  },
+  "release": null
+}
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/native_with_function_name.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/native_with_function_name.pysnap
new file mode 100644
index 0000000000..f0b5339dd7
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/native_with_function_name.pysnap
@@ -0,0 +1,64 @@
+---
+created: '2019-04-27T19:27:04.703573Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u'main'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function* (isolated function)
+              u'(anonymous namespace)::start'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function* (isolated function)
+              u'(anonymous namespace)::crash'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function* (isolated function)
+              u'(anonymous namespace)::something::nested::Foo'
+        type (ignored because exception is synthetic)
+          u'EXC_BAD_ACCESS / KERN_INVALID_ADDRESS'
+      threads (thread has no stacktrace)
+--------------------------------------------------------------------------
+system:
+  hash: '282d9d4e85027e073026ace9ad3d05fd'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u'main'
+          frame*
+            filename*
+              u'main.cpp'
+            function* (isolated function)
+              u'(anonymous namespace)::start'
+          frame*
+            filename*
+              u'main.cpp'
+            function* (isolated function)
+              u'(anonymous namespace)::crash'
+          frame*
+            filename*
+              u'main.cpp'
+            function* (isolated function)
+              u'(anonymous namespace)::something::nested::Foo'
+        type (ignored because exception is synthetic)
+          u'EXC_BAD_ACCESS / KERN_INVALID_ADDRESS'
+      threads (thread has no stacktrace)
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/native_with_function_name.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/native_with_function_name.pysnap
new file mode 100644
index 0000000000..c5c83ce043
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/native_with_function_name.pysnap
@@ -0,0 +1,96 @@
+---
+created: '2019-04-27T19:27:05.532842Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace*
+          frame* (frame considered in-app because no frame is in-app)
+            filename*
+              u'../macos/main.cpp'
+            function*
+              u'main'
+            lineno (function takes precedence)
+              47
+          frame* (frame considered in-app because no frame is in-app)
+            filename*
+              u'../macos/main.cpp'
+            symbol*
+              u'_ZN12_GLOBAL__N_15startEv'
+            function (symbol takes precedence)
+              u'(anonymous namespace)::start()'
+            lineno (symbol takes precedence)
+              40
+          frame* (frame considered in-app because no frame is in-app)
+            filename*
+              u'../macos/main.cpp'
+            symbol*
+              u'_ZN12_GLOBAL__N_15crashEii'
+            function (symbol takes precedence)
+              u'(anonymous namespace)::crash(int, int)'
+            lineno (symbol takes precedence)
+              36
+          frame* (frame considered in-app because no frame is in-app)
+            filename*
+              u'../macos/main.cpp'
+            symbol*
+              u'_ZN12_GLOBAL__N_19something6nested3FooINSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESA_NS3_4lessISA_EENS8_INS3_4pairIKSA_SA_EEEEEEE5crashEii'
+            function (symbol takes precedence)
+              u'(anonymous namespace)::something::nested::Foo<std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std:...'
+            lineno (symbol takes precedence)
+              28
+        type*
+          u'EXC_BAD_ACCESS / KERN_INVALID_ADDRESS'
+        value (stacktrace and type take precedence)
+          u'Fatal Error: EXC_BAD_ACCESS / KERN_INVALID_ADDRESS'
+      threads (thread has no stacktrace)
+--------------------------------------------------------------------------
+system:
+  hash: '7b28306805da7fea54ee3441e8e1dc1a'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'../macos/main.cpp'
+            function*
+              u'main'
+            lineno (function takes precedence)
+              47
+          frame*
+            filename*
+              u'../macos/main.cpp'
+            symbol*
+              u'_ZN12_GLOBAL__N_15startEv'
+            function (symbol takes precedence)
+              u'(anonymous namespace)::start()'
+            lineno (symbol takes precedence)
+              40
+          frame*
+            filename*
+              u'../macos/main.cpp'
+            symbol*
+              u'_ZN12_GLOBAL__N_15crashEii'
+            function (symbol takes precedence)
+              u'(anonymous namespace)::crash(int, int)'
+            lineno (symbol takes precedence)
+              36
+          frame*
+            filename*
+              u'../macos/main.cpp'
+            symbol*
+              u'_ZN12_GLOBAL__N_19something6nested3FooINSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESA_NS3_4lessISA_EENS8_INS3_4pairIKSA_SA_EEEEEEE5crashEii'
+            function (symbol takes precedence)
+              u'(anonymous namespace)::something::nested::Foo<std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std:...'
+            lineno (symbol takes precedence)
+              28
+        type*
+          u'EXC_BAD_ACCESS / KERN_INVALID_ADDRESS'
+        value (stacktrace and type take precedence)
+          u'Fatal Error: EXC_BAD_ACCESS / KERN_INVALID_ADDRESS'
+      threads (thread has no stacktrace)
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/native_with_function_name.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/native_with_function_name.pysnap
new file mode 100644
index 0000000000..9a4bcd7184
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/native_with_function_name.pysnap
@@ -0,0 +1,64 @@
+---
+created: '2019-04-27T19:27:06.288229Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u'main'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function* (isolated function)
+              u'(anonymous namespace)::start'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function* (isolated function)
+              u'(anonymous namespace)::crash'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function* (isolated function)
+              u'(anonymous namespace)::something::nested::Foo'
+        type (ignored because exception is synthetic)
+          u'EXC_BAD_ACCESS / KERN_INVALID_ADDRESS'
+      threads (thread has no stacktrace)
+--------------------------------------------------------------------------
+system:
+  hash: '282d9d4e85027e073026ace9ad3d05fd'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u'main'
+          frame*
+            filename*
+              u'main.cpp'
+            function* (isolated function)
+              u'(anonymous namespace)::start'
+          frame*
+            filename*
+              u'main.cpp'
+            function* (isolated function)
+              u'(anonymous namespace)::crash'
+          frame*
+            filename*
+              u'main.cpp'
+            function* (isolated function)
+              u'(anonymous namespace)::something::nested::Foo'
+        type (ignored because exception is synthetic)
+          u'EXC_BAD_ACCESS / KERN_INVALID_ADDRESS'
+      threads (thread has no stacktrace)
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/actix.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/actix.pysnap
index 8d443d7732..119ab67ecd 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/actix.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/actix.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-04-17T20:02:28.163299Z'
+created: '2019-04-26T19:30:17.379327Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -23,7 +23,7 @@ app:
           frame*
             filename*
               u'boxed.rs'
-            function* (isolated function)
+            function*
               u'<F as alloc::boxed::FnBox<T>>::call_box'
           frame (non app frame)
             filename*
@@ -53,7 +53,7 @@ app:
           frame (non app frame)
             filename*
               u'panic.rs'
-            function* (isolated function)
+            function*
               u'<std::panic::AssertUnwindSafe<T> as core::ops::function::FnOnce<T>>::call_once'
           frame (non app frame)
             filename*
@@ -188,22 +188,22 @@ app:
           frame*
             filename*
               u'lib.rs'
-            function* (isolated function)
+            function*
               u'<tokio_current_thread::Entered<T>>::block_on'
           frame*
             filename*
               u'lib.rs'
-            function* (isolated function)
+            function*
               u'<tokio_current_thread::Entered<T>>::tick'
           frame*
             filename*
               u'scheduler.rs'
-            function* (isolated function)
+            function*
               u'<tokio_current_thread::scheduler::Scheduler<T>>::tick'
           frame*
             filename*
               u'lib.rs'
-            function* (isolated function)
+            function*
               u'<tokio_current_thread::Borrow<T>>::enter'
           frame (non app frame)
             filename*
@@ -218,7 +218,7 @@ app:
           frame*
             filename*
               u'lib.rs'
-            function* (isolated function)
+            function*
               u'<tokio_current_thread::Borrow<T>>::enter::{{closure}}'
           frame*
             filename*
@@ -228,17 +228,17 @@ app:
           frame*
             filename*
               u'lib.rs'
-            function* (isolated function)
+            function*
               u'<tokio_current_thread::Borrow<T>>::enter::{{closure}}::{{closure}}'
           frame*
             filename*
               u'scheduler.rs'
-            function* (isolated function)
+            function*
               u'<tokio_current_thread::scheduler::Scheduler<T>>::tick::{{closure}}'
           frame*
             filename*
               u'scheduler.rs'
-            function* (isolated function)
+            function*
               u'<tokio_current_thread::scheduler::Scheduled<T>>::tick'
           frame*
             filename*
@@ -273,27 +273,27 @@ app:
           frame (non app frame)
             filename*
               u'mod.rs'
-            function* (isolated function)
+            function*
               u'<alloc::boxed::Box<T> as futures::future::Future>::poll'
           frame*
             filename*
               u'then.rs'
-            function* (isolated function)
+            function*
               u'<futures::future::then::Then<T> as futures::future::Future>::poll'
           frame*
             filename*
               u'chain.rs'
-            function* (isolated function)
+            function*
               u'<futures::future::chain::Chain<T>>::poll'
           frame*
             filename*
               u'either.rs'
-            function* (isolated function)
+            function*
               u'<futures::future::either::Either<T> as futures::future::Future>::poll'
           frame (ignored due to recursion)
             filename*
               u'either.rs'
-            function* (isolated function)
+            function*
               u'<futures::future::either::Either<T> as futures::future::Future>::poll'
           frame*
             filename*
@@ -303,52 +303,52 @@ app:
           frame*
             filename*
               u'and_then.rs'
-            function* (isolated function)
+            function*
               u'<actix_net::service::and_then::AndThenFuture<T> as futures::future::Future>::poll'
           frame*
             filename*
               u'map_err.rs'
-            function* (isolated function)
+            function*
               u'<actix_net::service::map_err::MapErrFuture<T> as futures::future::Future>::poll'
           frame*
             filename*
               u'channel.rs'
-            function* (isolated function)
+            function*
               u'<actix_web::server::channel::HttpChannel<T> as futures::future::Future>::poll'
           frame*
             filename*
               u'channel.rs'
-            function* (isolated function)
+            function*
               u'<actix_web::server::channel::HttpChannel<T> as futures::future::Future>::poll'
           frame*
             filename*
               u'h1.rs'
-            function* (isolated function)
+            function*
               u'<actix_web::server::h1::Http1Dispatcher<T>>::poll'
           frame*
             filename*
               u'h1.rs'
-            function* (isolated function)
+            function*
               u'<actix_web::server::h1::Http1Dispatcher<T>>::poll_handler'
           frame*
             filename*
               u'h1.rs'
-            function* (isolated function)
+            function*
               u'<actix_web::server::h1::Http1Dispatcher<T>>::poll_io'
           frame*
             filename*
               u'h1.rs'
-            function* (isolated function)
+            function*
               u'<actix_web::server::h1::Http1Dispatcher<T>>::parse'
           frame*
             filename*
               u'pipeline.rs'
-            function* (isolated function)
+            function*
               u'<actix_web::pipeline::Pipeline<T> as actix_web::server::handler::HttpHandlerTask>::poll_io'
           frame*
             filename*
               u'<::log::macros::log macros>'
-            function* (isolated function)
+            function*
               u'<actix_web::pipeline::ProcessResponse<T>>::poll_io'
           frame*
             filename*
@@ -415,7 +415,7 @@ system:
           frame*
             filename*
               u'boxed.rs'
-            function* (isolated function)
+            function*
               u'<F as alloc::boxed::FnBox<T>>::call_box'
           frame*
             filename*
@@ -445,7 +445,7 @@ system:
           frame*
             filename*
               u'panic.rs'
-            function* (isolated function)
+            function*
               u'<std::panic::AssertUnwindSafe<T> as core::ops::function::FnOnce<T>>::call_once'
           frame*
             filename*
@@ -580,22 +580,22 @@ system:
           frame*
             filename*
               u'lib.rs'
-            function* (isolated function)
+            function*
               u'<tokio_current_thread::Entered<T>>::block_on'
           frame*
             filename*
               u'lib.rs'
-            function* (isolated function)
+            function*
               u'<tokio_current_thread::Entered<T>>::tick'
           frame*
             filename*
               u'scheduler.rs'
-            function* (isolated function)
+            function*
               u'<tokio_current_thread::scheduler::Scheduler<T>>::tick'
           frame*
             filename*
               u'lib.rs'
-            function* (isolated function)
+            function*
               u'<tokio_current_thread::Borrow<T>>::enter'
           frame*
             filename*
@@ -610,7 +610,7 @@ system:
           frame*
             filename*
               u'lib.rs'
-            function* (isolated function)
+            function*
               u'<tokio_current_thread::Borrow<T>>::enter::{{closure}}'
           frame*
             filename*
@@ -620,17 +620,17 @@ system:
           frame*
             filename*
               u'lib.rs'
-            function* (isolated function)
+            function*
               u'<tokio_current_thread::Borrow<T>>::enter::{{closure}}::{{closure}}'
           frame*
             filename*
               u'scheduler.rs'
-            function* (isolated function)
+            function*
               u'<tokio_current_thread::scheduler::Scheduler<T>>::tick::{{closure}}'
           frame*
             filename*
               u'scheduler.rs'
-            function* (isolated function)
+            function*
               u'<tokio_current_thread::scheduler::Scheduled<T>>::tick'
           frame*
             filename*
@@ -665,27 +665,27 @@ system:
           frame*
             filename*
               u'mod.rs'
-            function* (isolated function)
+            function*
               u'<alloc::boxed::Box<T> as futures::future::Future>::poll'
           frame*
             filename*
               u'then.rs'
-            function* (isolated function)
+            function*
               u'<futures::future::then::Then<T> as futures::future::Future>::poll'
           frame*
             filename*
               u'chain.rs'
-            function* (isolated function)
+            function*
               u'<futures::future::chain::Chain<T>>::poll'
           frame*
             filename*
               u'either.rs'
-            function* (isolated function)
+            function*
               u'<futures::future::either::Either<T> as futures::future::Future>::poll'
           frame (ignored due to recursion)
             filename*
               u'either.rs'
-            function* (isolated function)
+            function*
               u'<futures::future::either::Either<T> as futures::future::Future>::poll'
           frame*
             filename*
@@ -695,52 +695,52 @@ system:
           frame*
             filename*
               u'and_then.rs'
-            function* (isolated function)
+            function*
               u'<actix_net::service::and_then::AndThenFuture<T> as futures::future::Future>::poll'
           frame*
             filename*
               u'map_err.rs'
-            function* (isolated function)
+            function*
               u'<actix_net::service::map_err::MapErrFuture<T> as futures::future::Future>::poll'
           frame*
             filename*
               u'channel.rs'
-            function* (isolated function)
+            function*
               u'<actix_web::server::channel::HttpChannel<T> as futures::future::Future>::poll'
           frame*
             filename*
               u'channel.rs'
-            function* (isolated function)
+            function*
               u'<actix_web::server::channel::HttpChannel<T> as futures::future::Future>::poll'
           frame*
             filename*
               u'h1.rs'
-            function* (isolated function)
+            function*
               u'<actix_web::server::h1::Http1Dispatcher<T>>::poll'
           frame*
             filename*
               u'h1.rs'
-            function* (isolated function)
+            function*
               u'<actix_web::server::h1::Http1Dispatcher<T>>::poll_handler'
           frame*
             filename*
               u'h1.rs'
-            function* (isolated function)
+            function*
               u'<actix_web::server::h1::Http1Dispatcher<T>>::poll_io'
           frame*
             filename*
               u'h1.rs'
-            function* (isolated function)
+            function*
               u'<actix_web::server::h1::Http1Dispatcher<T>>::parse'
           frame*
             filename*
               u'pipeline.rs'
-            function* (isolated function)
+            function*
               u'<actix_web::pipeline::Pipeline<T> as actix_web::server::handler::HttpHandlerTask>::poll_io'
           frame*
             filename*
               u'<::log::macros::log macros>'
-            function* (isolated function)
+            function*
               u'<actix_web::pipeline::ProcessResponse<T>>::poll_io'
           frame*
             filename*
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/native_complex_function_names.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/native_complex_function_names.pysnap
index 826ef89566..8121140b36 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/native_complex_function_names.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/native_complex_function_names.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-04-17T20:07:50.708385Z'
+created: '2019-04-26T19:30:17.911166Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -10,10 +10,10 @@ app:
       exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
         stacktrace
           frame (non app frame)
-            function* (isolated function)
+            function*
               u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
           frame (non app frame)
-            function* (isolated function)
+            function*
               u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
         type (ignored because exception is synthetic)
           u'log_demo'
@@ -27,10 +27,10 @@ system:
       exception*
         stacktrace*
           frame*
-            function* (isolated function)
+            function*
               u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
           frame*
-            function* (isolated function)
+            function*
               u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
         type (ignored because exception is synthetic)
           u'log_demo'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/native_with_function_name.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/native_with_function_name.pysnap
new file mode 100644
index 0000000000..7bdc0ad759
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/native_with_function_name.pysnap
@@ -0,0 +1,68 @@
+---
+created: '2019-04-27T19:27:07.008394Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u'main'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u'(anonymous namespace)::start'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u'(anonymous namespace)::crash'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u'(anonymous namespace)::something::nested::Foo<T>::crash'
+        type (ignored because exception is synthetic)
+          u'EXC_BAD_ACCESS / KERN_INVALID_ADDRESS'
+        value*
+          u'Fatal Error: EXC_BAD_ACCESS / KERN_INVALID_ADDRESS'
+      threads (thread has no stacktrace)
+--------------------------------------------------------------------------
+system:
+  hash: 'c29439027eafcf7642f641554ab0f0ef'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u'main'
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u'(anonymous namespace)::start'
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u'(anonymous namespace)::crash'
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u'(anonymous namespace)::something::nested::Foo<T>::crash'
+        type (ignored because exception is synthetic)
+          u'EXC_BAD_ACCESS / KERN_INVALID_ADDRESS'
+        value (ignored because stacktrace takes precedence)
+          u'Fatal Error: EXC_BAD_ACCESS / KERN_INVALID_ADDRESS'
+      threads (thread has no stacktrace)
diff --git a/tests/sentry/grouping/test_variants.py b/tests/sentry/grouping/test_variants.py
index 8646128ce4..133b255241 100644
--- a/tests/sentry/grouping/test_variants.py
+++ b/tests/sentry/grouping/test_variants.py
@@ -7,7 +7,7 @@ import json
 import pytest
 
 from sentry.models import Event
-from sentry.stacktraces import normalize_stacktraces_for_grouping
+from sentry.stacktraces.processing import normalize_stacktraces_for_grouping
 from sentry.event_manager import EventManager
 from sentry.grouping.component import GroupingComponent
 from sentry.grouping.strategies.configurations import CONFIGURATIONS
diff --git a/tests/sentry/lang/native/test_processor.py b/tests/sentry/lang/native/test_processor.py
index 414ab84cb9..9a5fe807d9 100644
--- a/tests/sentry/lang/native/test_processor.py
+++ b/tests/sentry/lang/native/test_processor.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from mock import patch
 
 from sentry.lang.native.plugin import NativeStacktraceProcessor
-from sentry.stacktraces import process_stacktraces
+from sentry.stacktraces.processing import process_stacktraces
 from sentry.testutils import TestCase
 
 OBJECT_NAME = (
diff --git a/tests/sentry/stacktraces/__init__.py b/tests/sentry/stacktraces/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry/stacktraces/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/grouping/test_strategy_utils.py b/tests/sentry/stacktraces/test_functions.py
similarity index 88%
rename from tests/sentry/grouping/test_strategy_utils.py
rename to tests/sentry/stacktraces/test_functions.py
index 78b95c2a72..37adf46b40 100644
--- a/tests/sentry/grouping/test_strategy_utils.py
+++ b/tests/sentry/stacktraces/test_functions.py
@@ -2,8 +2,7 @@ from __future__ import absolute_import
 
 import pytest
 
-from sentry.grouping.strategies.newstyle import isolate_native_function_v1
-from sentry.grouping.strategies.utils import replace_enclosed_string, split_func_tokens, trim_function_name
+from sentry.stacktraces.functions import replace_enclosed_string, split_func_tokens, trim_function_name
 
 
 @pytest.mark.parametrize(
@@ -85,10 +84,25 @@ from sentry.grouping.strategies.utils import replace_enclosed_string, split_func
             '@ThreadStartWhatever@16',
             'ThreadStartWhatever',
         ],
+        [
+            '@objc ViewController.causeCrash(Any) -> ()',
+            'ViewController.causeCrash',
+        ],
+        [
+            'ViewController.causeCrash(Any) -> ()',
+            'ViewController.causeCrash',
+        ],
+        [
+            '@objc ViewController.causeCrash(Any, Foo -> Bar) -> SomeObject',
+            'ViewController.causeCrash',
+        ],
+        [
+            'ViewController.causeCrash(Any) -> SomeObject',
+            'ViewController.causeCrash',
+        ],
     ]
 )
-def test_isolate_native_function_v1(input, output):
-    assert isolate_native_function_v1(input) == output
+def test_trim_function_name(input, output):
     assert trim_function_name(input, 'native') == output
 
 
@@ -126,7 +140,7 @@ def test_split_func_tokens(input, output):
     assert split_func_tokens(input) == output
 
 
-def test_trim_function_name():
+def test_trim_function_name_cocoa():
     assert trim_function_name('+[foo:(bar)]', 'objc') == '+[foo:(bar)]'
     assert trim_function_name('[foo:(bar)]', 'objc') == '[foo:(bar)]'
     assert trim_function_name('-[foo:(bar)]', 'objc') == '-[foo:(bar)]'
diff --git a/tests/sentry/grouping/test_utils.py b/tests/sentry/stacktraces/test_platform.py
similarity index 76%
rename from tests/sentry/grouping/test_utils.py
rename to tests/sentry/stacktraces/test_platform.py
index 34a0b3a40b..44b0d272c7 100644
--- a/tests/sentry/grouping/test_utils.py
+++ b/tests/sentry/stacktraces/test_platform.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 import pytest
 
-from sentry.grouping.utils import get_grouping_family_for_platform
+from sentry.stacktraces.platform import get_behavior_family_for_platform
 
 
 @pytest.mark.parametrize(
@@ -20,4 +20,4 @@ from sentry.grouping.utils import get_grouping_family_for_platform
     ]
 )
 def test_get_grouping_family_for_platform(input, output):
-    assert get_grouping_family_for_platform(input) == output
+    assert get_behavior_family_for_platform(input) == output
diff --git a/tests/sentry/test_stacktraces.py b/tests/sentry/test_stacktraces.py
index 1e9d1aae1a..010f86b5fc 100644
--- a/tests/sentry/test_stacktraces.py
+++ b/tests/sentry/test_stacktraces.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
 from sentry.grouping.api import get_default_grouping_config_dict, load_grouping_config
-from sentry.stacktraces import find_stacktraces_in_data, normalize_stacktraces_for_grouping
+from sentry.stacktraces.processing import find_stacktraces_in_data, normalize_stacktraces_for_grouping
 from sentry.testutils import TestCase
 
 
