commit 0e61c3ce0e5e681bbe4ca3b34402d3ba8c10481f
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue May 28 10:57:10 2019 -0700

    feat(ui): Add component to render Incident status changes (#13375)
    
    Status changes include: creating or detecting an incident, closing/reopening an incident
    
    Fixes SEN-670
    Fixes SEN-671

diff --git a/src/sentry/static/sentry/app/actionCreators/incident.jsx b/src/sentry/static/sentry/app/actionCreators/incident.jsx
index 3d2ebf116b..e2f84495b8 100644
--- a/src/sentry/static/sentry/app/actionCreators/incident.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/incident.jsx
@@ -54,8 +54,6 @@ export async function fetchIncidentActivities(api, orgId, incidentId) {
  * Creates a note for an incident
  */
 export async function createIncidentNote(api, orgId, incidentId, note) {
-  addLoadingMessage(t('Posting comment...'));
-
   try {
     const result = await api.requestPromise(
       `/organizations/${orgId}/incidents/${incidentId}/comments/`,
@@ -67,8 +65,6 @@ export async function createIncidentNote(api, orgId, incidentId, note) {
       }
     );
 
-    clearIndicators();
-
     return result;
   } catch (err) {
     addErrorMessage(t('Unable to post comment'));
@@ -80,8 +76,6 @@ export async function createIncidentNote(api, orgId, incidentId, note) {
  * Deletes a note for an incident
  */
 export async function deleteIncidentNote(api, orgId, incidentId, noteId) {
-  addLoadingMessage(t('Removing comment...'));
-
   try {
     const result = await api.requestPromise(
       `/organizations/${orgId}/incidents/${incidentId}/comments/${noteId}/`,
@@ -90,7 +84,6 @@ export async function deleteIncidentNote(api, orgId, incidentId, noteId) {
       }
     );
 
-    clearIndicators();
     return result;
   } catch (err) {
     addErrorMessage(t('Failed to delete comment'));
@@ -102,8 +95,6 @@ export async function deleteIncidentNote(api, orgId, incidentId, noteId) {
  * Updates a note for an incident
  */
 export async function updateIncidentNote(api, orgId, incidentId, noteId, note) {
-  addLoadingMessage(t('Updating comment...'));
-
   try {
     const result = await api.requestPromise(
       `/organizations/${orgId}/incidents/${incidentId}/comments/${noteId}/`,
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/activity.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/activity/activity.jsx
similarity index 51%
rename from src/sentry/static/sentry/app/views/organizationIncidents/details/activity.jsx
rename to src/sentry/static/sentry/app/views/organizationIncidents/details/activity/activity.jsx
index 5aa24865ad..bbb96fc5a6 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/details/activity.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/activity/activity.jsx
@@ -5,16 +5,8 @@ import moment from 'moment';
 import styled from 'react-emotion';
 
 import {INCIDENT_ACTIVITY_TYPE} from 'app/views/organizationIncidents/utils';
-import {
-  createIncidentNote,
-  deleteIncidentNote,
-  fetchIncidentActivities,
-  updateIncidentNote,
-} from 'app/actionCreators/incident';
 import {t} from 'app/locale';
-import {uniqueId} from 'app/utils/guid';
 import ActivityItem from 'app/components/activity/item';
-import ConfigStore from 'app/stores/configStore';
 import ErrorBoundary from 'app/components/errorBoundary';
 import LoadingError from 'app/components/loadingError';
 import Note from 'app/components/activity/note';
@@ -22,14 +14,10 @@ import NoteInputWithStorage from 'app/components/activity/note/inputWithStorage'
 import SentryTypes from 'app/sentryTypes';
 import TimeSince from 'app/components/timeSince';
 import space from 'app/styles/space';
-import withApi from 'app/utils/withApi';
 
 import ActivityPlaceholder from './activityPlaceholder';
 import DateDivider from './dateDivider';
-
-function makeDefaultErrorJson() {
-  return {detail: t('Unknown error. Please try again.')};
-}
+import StatusItem from './statusItem';
 
 /**
  * Activity component on Incident Details view
@@ -44,6 +32,8 @@ class Activity extends React.Component {
     error: PropTypes.bool,
     me: SentryTypes.User,
     activities: PropTypes.arrayOf(SentryTypes.IncidentActivity),
+    noteInputId: PropTypes.string,
+    noteInputProps: PropTypes.object,
 
     createError: PropTypes.bool,
     createBusy: PropTypes.bool,
@@ -70,6 +60,7 @@ class Activity extends React.Component {
       me,
       incidentId,
       activities,
+      noteInputId,
       createBusy,
       createError,
       createErrorJSON,
@@ -80,6 +71,7 @@ class Activity extends React.Component {
       memberList: [],
       teams: [],
       minHeight: 80,
+      ...this.props.noteInputProps,
     };
     const activitiesByDate = groupBy(activities, ({dateCreated}) =>
       moment(dateCreated).format('ll')
@@ -91,6 +83,7 @@ class Activity extends React.Component {
         <ActivityItem author={{type: 'user', user: me}}>
           {() => (
             <NoteInputWithStorage
+              key={noteInputId}
               storageKey="incidentIdinput"
               itemKey={incidentId}
               onCreate={onCreateNote}
@@ -151,18 +144,12 @@ class Activity extends React.Component {
                         </ErrorBoundary>
                       );
                     } else {
-                      // TODO(billy): This will change depending on the different
-                      // activity types we will have to support
                       return (
                         <ErrorBoundary mini key={`note-${activity.id}`}>
-                          <ActivityItem
+                          <StatusItem
                             showTime
-                            item={activity}
-                            author={{
-                              type: activity.user ? 'user' : 'system',
-                              user: activity.user,
-                            }}
-                            date={activity.dateCreated}
+                            authorName={authorName}
+                            activity={activity}
                           />
                         </ErrorBoundary>
                       );
@@ -176,167 +163,7 @@ class Activity extends React.Component {
   }
 }
 
-class ActivityContainer extends React.Component {
-  static propTypes = {
-    api: PropTypes.object.isRequired,
-  };
-
-  state = {
-    loading: true,
-    error: false,
-    createBusy: false,
-    createError: false,
-    activities: null,
-  };
-
-  componentDidMount() {
-    this.fetchData();
-  }
-
-  async fetchData() {
-    const {api, params} = this.props;
-    const {incidentId, orgId} = params;
-
-    try {
-      const activities = await fetchIncidentActivities(api, orgId, incidentId);
-      this.setState({activities, loading: false});
-    } catch (err) {
-      this.setState({loading: false, error: !!err});
-    }
-  }
-
-  handleCreateNote = async note => {
-    const {api, params} = this.props;
-    const {incidentId, orgId} = params;
-
-    this.setState({
-      createBusy: true,
-    });
-
-    const newActivity = {
-      comment: note.text,
-      type: INCIDENT_ACTIVITY_TYPE.COMMENT,
-      dateCreated: new Date(),
-      user: ConfigStore.get('user'),
-      id: uniqueId(),
-      incidentIdentifier: incidentId,
-    };
-
-    this.setState(state => ({
-      createBusy: false,
-
-      activities: [newActivity, ...(state.activities || [])],
-    }));
-
-    try {
-      const newNote = await createIncidentNote(api, orgId, incidentId, note);
-
-      this.setState(state => {
-        const activities = [
-          newNote,
-          ...state.activities.filter(activity => activity !== newActivity),
-        ];
-
-        return {
-          createBusy: false,
-          activities,
-        };
-      });
-    } catch (error) {
-      this.setState(state => {
-        const activities = state.activities.filter(activity => activity !== newActivity);
-
-        return {
-          activities,
-          createBusy: false,
-          createError: true,
-          createErrorJSON: error.responseJSON || makeDefaultErrorJson(),
-        };
-      });
-    }
-  };
-
-  getIndexAndActivityFromState = activity => {
-    // `index` should probably be found, if not let error hit Sentry
-    const index = this.state.activities.findIndex(({id}) => id === activity.id);
-    return [index, this.state.activities[index]];
-  };
-
-  handleDeleteNote = async activity => {
-    const {api, params} = this.props;
-    const {incidentId, orgId} = params;
-
-    const [index, oldActivity] = this.getIndexAndActivityFromState(activity);
-
-    this.setState(state => ({
-      activities: removeFromArrayIndex(state.activities, index),
-    }));
-
-    try {
-      await deleteIncidentNote(api, orgId, incidentId, activity.id);
-    } catch (error) {
-      this.setState(state => ({
-        activities: replaceAtArrayIndex(state.activities, index, oldActivity),
-      }));
-    }
-  };
-
-  handleUpdateNote = async (note, activity) => {
-    const {api, params} = this.props;
-    const {incidentId, orgId} = params;
-
-    const [index, oldActivity] = this.getIndexAndActivityFromState(activity);
-
-    this.setState(state => ({
-      activities: replaceAtArrayIndex(state.activities, index, {
-        ...oldActivity,
-        comment: note.text,
-      }),
-    }));
-
-    try {
-      await updateIncidentNote(api, orgId, incidentId, activity.id, note);
-    } catch (error) {
-      this.setState(state => ({
-        activities: replaceAtArrayIndex(state.activities, index, oldActivity),
-      }));
-    }
-  };
-
-  render() {
-    const {api, params, ...props} = this.props;
-    const {incidentId, orgId} = params;
-    const me = ConfigStore.get('user');
-
-    return (
-      <Activity
-        incidentId={incidentId}
-        orgId={orgId}
-        me={me}
-        api={api}
-        {...this.state}
-        onCreateNote={this.handleCreateNote}
-        onUpdateNote={this.handleUpdateNote}
-        onDeleteNote={this.handleDeleteNote}
-        {...props}
-      />
-    );
-  }
-}
-
-export default withApi(ActivityContainer);
-
-function removeFromArrayIndex(array, index) {
-  const newArray = [...array];
-  newArray.splice(index, 1);
-  return newArray;
-}
-
-function replaceAtArrayIndex(array, index, obj) {
-  const newArray = [...array];
-  newArray.splice(index, 1, obj);
-  return newArray;
-}
+export default Activity;
 
 const StyledTimeSince = styled(TimeSince)`
   color: ${p => p.theme.gray2};
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/activityPlaceholder.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/activity/activityPlaceholder.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationIncidents/details/activityPlaceholder.jsx
rename to src/sentry/static/sentry/app/views/organizationIncidents/details/activity/activityPlaceholder.jsx
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/dateDivider.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/activity/dateDivider.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationIncidents/details/dateDivider.jsx
rename to src/sentry/static/sentry/app/views/organizationIncidents/details/activity/dateDivider.jsx
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/activity/index.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/activity/index.jsx
new file mode 100644
index 0000000000..a05bc783bc
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/activity/index.jsx
@@ -0,0 +1,195 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {INCIDENT_ACTIVITY_TYPE} from 'app/views/organizationIncidents/utils';
+import {
+  createIncidentNote,
+  deleteIncidentNote,
+  fetchIncidentActivities,
+  updateIncidentNote,
+} from 'app/actionCreators/incident';
+import {t} from 'app/locale';
+import {uniqueId} from 'app/utils/guid';
+import ConfigStore from 'app/stores/configStore';
+import withApi from 'app/utils/withApi';
+
+import Activity from './activity';
+
+function makeDefaultErrorJson() {
+  return {detail: t('Unknown error. Please try again.')};
+}
+
+/**
+ * Activity component on Incident Details view
+ * Allows user to leave a comment on an incidentId as well as
+ * fetch and render existing activity items.
+ */
+class ActivityContainer extends React.Component {
+  static propTypes = {
+    api: PropTypes.object.isRequired,
+  };
+
+  state = {
+    loading: true,
+    error: false,
+    noteInputId: uniqueId(),
+    noteInputText: '',
+    createBusy: false,
+    createError: false,
+    activities: null,
+  };
+
+  componentDidMount() {
+    this.fetchData();
+  }
+
+  async fetchData() {
+    const {api, params} = this.props;
+    const {incidentId, orgId} = params;
+
+    try {
+      const activities = await fetchIncidentActivities(api, orgId, incidentId);
+      this.setState({activities, loading: false});
+    } catch (err) {
+      this.setState({loading: false, error: !!err});
+    }
+  }
+
+  handleCreateNote = async note => {
+    const {api, params} = this.props;
+    const {incidentId, orgId} = params;
+
+    const newActivity = {
+      comment: note.text,
+      type: INCIDENT_ACTIVITY_TYPE.COMMENT,
+      dateCreated: new Date(),
+      user: ConfigStore.get('user'),
+      id: uniqueId(),
+      incidentIdentifier: incidentId,
+    };
+
+    this.setState(state => ({
+      createBusy: true,
+      // This is passed as a key to NoteInput that re-mounts
+      // (basically so we can reset text input to empty string)
+      noteInputId: uniqueId(),
+      activities: [newActivity, ...(state.activities || [])],
+      noteInputText: '',
+    }));
+
+    try {
+      const newNote = await createIncidentNote(api, orgId, incidentId, note);
+
+      this.setState(state => {
+        // Update activities to replace our fake new activity with activity object from server
+        const activities = [
+          newNote,
+          ...state.activities.filter(activity => activity !== newActivity),
+        ];
+
+        return {
+          createBusy: false,
+          activities,
+        };
+      });
+    } catch (error) {
+      this.setState(state => {
+        const activities = state.activities.filter(activity => activity !== newActivity);
+
+        return {
+          // We clear the textarea immediately when submitting, restore
+          // value when there has been an error
+          noteInputText: note.text,
+          activities,
+          createBusy: false,
+          createError: true,
+          createErrorJSON: error.responseJSON || makeDefaultErrorJson(),
+        };
+      });
+    }
+  };
+
+  getIndexAndActivityFromState = activity => {
+    // `index` should probably be found, if not let error hit Sentry
+    const index = this.state.activities.findIndex(({id}) => id === activity.id);
+    return [index, this.state.activities[index]];
+  };
+
+  handleDeleteNote = async activity => {
+    const {api, params} = this.props;
+    const {incidentId, orgId} = params;
+
+    const [index, oldActivity] = this.getIndexAndActivityFromState(activity);
+
+    this.setState(state => ({
+      activities: removeFromArrayIndex(state.activities, index),
+    }));
+
+    try {
+      await deleteIncidentNote(api, orgId, incidentId, activity.id);
+    } catch (error) {
+      this.setState(state => ({
+        activities: replaceAtArrayIndex(state.activities, index, oldActivity),
+      }));
+    }
+  };
+
+  handleUpdateNote = async (note, activity) => {
+    const {api, params} = this.props;
+    const {incidentId, orgId} = params;
+
+    const [index, oldActivity] = this.getIndexAndActivityFromState(activity);
+
+    this.setState(state => ({
+      activities: replaceAtArrayIndex(state.activities, index, {
+        ...oldActivity,
+        comment: note.text,
+      }),
+    }));
+
+    try {
+      await updateIncidentNote(api, orgId, incidentId, activity.id, note);
+    } catch (error) {
+      this.setState(state => ({
+        activities: replaceAtArrayIndex(state.activities, index, oldActivity),
+      }));
+    }
+  };
+
+  render() {
+    const {api, params, ...props} = this.props;
+    const {incidentId, orgId} = params;
+    const me = ConfigStore.get('user');
+
+    return (
+      <Activity
+        noteInputId={this.state.noteInputId}
+        incidentId={incidentId}
+        orgId={orgId}
+        me={me}
+        api={api}
+        noteProps={{
+          text: this.state.noteInputText,
+        }}
+        {...this.state}
+        onCreateNote={this.handleCreateNote}
+        onUpdateNote={this.handleUpdateNote}
+        onDeleteNote={this.handleDeleteNote}
+        {...props}
+      />
+    );
+  }
+}
+export default withApi(ActivityContainer);
+
+function removeFromArrayIndex(array, index) {
+  const newArray = [...array];
+  newArray.splice(index, 1);
+  return newArray;
+}
+
+function replaceAtArrayIndex(array, index, obj) {
+  const newArray = [...array];
+  newArray.splice(index, 1, obj);
+  return newArray;
+}
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/activity/statusItem.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/activity/statusItem.jsx
new file mode 100644
index 0000000000..f7011e1ab3
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/activity/statusItem.jsx
@@ -0,0 +1,75 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {
+  INCIDENT_ACTIVITY_TYPE,
+  INCIDENT_STATUS,
+} from 'app/views/organizationIncidents/utils';
+import {t} from 'app/locale';
+import ActivityItem from 'app/components/activity/item';
+import Chart from 'app/views/organizationIncidents/details/chart';
+import SentryTypes from 'app/sentryTypes';
+
+/**
+ * StatusItem renders status changes for Incidents
+ *
+ * For example, incident created, detected, or closed
+ */
+class StatusItem extends React.Component {
+  static propTypes = {
+    activity: SentryTypes.IncidentActivity.isRequired,
+    authorName: PropTypes.string,
+  };
+
+  render() {
+    const {activity, authorName} = this.props;
+
+    const isCreated = activity.type === INCIDENT_ACTIVITY_TYPE.CREATED;
+    const isDetected = activity.type === INCIDENT_ACTIVITY_TYPE.DETECTED;
+    const isClosed =
+      activity.type === INCIDENT_ACTIVITY_TYPE.STATUS_CHANGE &&
+      activity.value == INCIDENT_STATUS.CLOSED;
+    const isReopened =
+      activity.type === INCIDENT_ACTIVITY_TYPE.STATUS_CHANGE &&
+      activity.value == INCIDENT_STATUS.CREATED &&
+      activity.previousValue == INCIDENT_STATUS.CLOSED;
+
+    // Unknown activity, don't render anything
+    if (!isCreated && !isDetected && !isClosed && !isReopened) {
+      return null;
+    }
+
+    return (
+      <ActivityItem
+        showTime
+        author={{
+          type: activity.user ? 'user' : 'system',
+          user: activity.user,
+        }}
+        header={
+          <div>
+            <AuthorName>{authorName}</AuthorName> {isCreated && t('created')}
+            {isDetected && t('detected')}
+            {isClosed && t('closed')}
+            {isReopened && t('re-opened')} {t('an Incident')}
+          </div>
+        }
+        date={activity.dateCreated}
+      >
+        {activity.eventStats && (
+          <Chart
+            data={activity.eventStats.data}
+            detected={(isCreated || isDetected) && activity.dateCreated}
+          />
+        )}
+      </ActivityItem>
+    );
+  }
+}
+
+export default StatusItem;
+
+const AuthorName = styled('span')`
+  font-weight: bold;
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/body.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/body.jsx
index 35213e5ea7..a1860a7b51 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/details/body.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/body.jsx
@@ -1,12 +1,10 @@
 import React from 'react';
-import moment from 'moment';
 import styled from 'react-emotion';
 
 import {PageContent} from 'app/styles/organization';
 import {t} from 'app/locale';
-import LineChart from 'app/components/charts/lineChart';
+import Chart from 'app/views/organizationIncidents/details/chart';
 import Link from 'app/components/links/link';
-import MarkPoint from 'app/components/charts/components/markPoint';
 import NavTabs from 'app/components/navTabs';
 import SeenByList from 'app/components/seenByList';
 import SentryTypes from 'app/sentryTypes';
@@ -15,35 +13,11 @@ import theme from 'app/utils/theme';
 
 import Activity from './activity';
 import IncidentsSuspects from './suspects';
-import detectedSymbol from './detectedSymbol';
-import closedSymbol from './closedSymbol';
 
 const TABS = {
   activity: {name: t('Activity'), component: Activity},
 };
 
-/**
- * So we'll have to see how this looks with real data, but echarts requires
- * an explicit (x,y) value to draw a symbol (incident detected/closed bubble).
- *
- * This uses the closest date *without* going over.
- *
- * AFAICT we can't give it an x-axis value and have it draw on the line,
- * so we probably need to calculate the y-axis value ourselves if we want it placed
- * at the exact time.
- */
-function getNearbyIndex(data, needle) {
-  // `data` is sorted, return the first index whose value (timestamp) is > `needle`
-  const index = data.findIndex(([ts]) => ts > needle);
-
-  // this shouldn't happen, as we try to buffer dates before start/end dates
-  if (index === 0) {
-    return 0;
-  }
-
-  return index !== -1 ? index - 1 : data.length - 1;
-}
-
 export default class DetailsBody extends React.Component {
   static propTypes = {
     incident: SentryTypes.Incident,
@@ -63,28 +37,6 @@ export default class DetailsBody extends React.Component {
     const {activeTab} = this.state;
     const ActiveComponent = TABS[activeTab].component;
 
-    const chartData =
-      incident &&
-      incident.eventStats.data.map(([ts, val], i) => {
-        return [
-          ts * 1000,
-          val.length ? val.reduce((acc, {count} = {count: 0}) => acc + count, 0) : 0,
-        ];
-      });
-
-    const detectedTs = incident && moment.utc(incident.dateDetected).unix();
-    const closedTs =
-      incident && incident.dateClosed && moment.utc(incident.dateClosed).unix();
-
-    const nearbyDetectedTimestampIndex =
-      detectedTs && getNearbyIndex(incident.eventStats.data, detectedTs);
-    const nearbyClosedTimestampIndex =
-      closedTs && getNearbyIndex(incident.eventStats.data, closedTs);
-
-    const detectedCoordinate = chartData && chartData[nearbyDetectedTimestampIndex];
-    const closedCoordinate =
-      chartData && closedTs && chartData[nearbyClosedTimestampIndex];
-
     return (
       <StyledPageContent>
         <Main>
@@ -112,33 +64,10 @@ export default class DetailsBody extends React.Component {
         <Sidebar>
           <PageContent>
             {incident && (
-              <LineChart
-                isGroupedByDate
-                series={[
-                  {
-                    seriesName: t('Events'),
-                    dataArray: chartData,
-                    markPoint: MarkPoint({
-                      data: [
-                        {
-                          symbol: `image://${detectedSymbol}`,
-                          name: t('Incident Detected'),
-                          coord: detectedCoordinate,
-                        },
-                        ...(closedTs
-                          ? [
-                              {
-                                symbol: `image://${closedSymbol}`,
-                                symbolSize: 24,
-                                name: t('Incident Closed'),
-                                coord: closedCoordinate,
-                              },
-                            ]
-                          : []),
-                      ],
-                    }),
-                  },
-                ]}
+              <Chart
+                data={incident.eventStats.data}
+                detected={incident.dateDetected}
+                closed={incident.dateClosed}
               />
             )}
             <IncidentsSuspects suspects={[]} />
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/chart.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/chart.jsx
new file mode 100644
index 0000000000..ff5fada2be
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/chart.jsx
@@ -0,0 +1,91 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import moment from 'moment';
+
+import {t} from 'app/locale';
+import LineChart from 'app/components/charts/lineChart';
+import MarkPoint from 'app/components/charts/components/markPoint';
+
+import closedSymbol from './closedSymbol';
+import detectedSymbol from './detectedSymbol';
+
+/**
+ * So we'll have to see how this looks with real data, but echarts requires
+ * an explicit (x,y) value to draw a symbol (incident detected/closed bubble).
+ *
+ * This uses the closest date *without* going over.
+ *
+ * AFAICT we can't give it an x-axis value and have it draw on the line,
+ * so we probably need to calculate the y-axis value ourselves if we want it placed
+ * at the exact time.
+ */
+function getNearbyIndex(data, needle) {
+  // `data` is sorted, return the first index whose value (timestamp) is > `needle`
+  const index = data.findIndex(([ts]) => ts > needle);
+
+  // this shouldn't happen, as we try to buffer dates before start/end dates
+  if (index === 0) {
+    return 0;
+  }
+
+  return index !== -1 ? index - 1 : data.length - 1;
+}
+
+export default class Chart extends React.Component {
+  static propTypes = {
+    data: PropTypes.arrayOf(PropTypes.number),
+    detected: PropTypes.string,
+    closed: PropTypes.string,
+  };
+  render() {
+    const {data, detected, closed} = this.props;
+
+    const chartData = data.map(([ts, val], i) => {
+      return [
+        ts * 1000,
+        val.length ? val.reduce((acc, {count} = {count: 0}) => acc + count, 0) : 0,
+      ];
+    });
+
+    const detectedTs = detected && moment.utc(detected).unix();
+    const closedTs = closed && moment.utc(closed).unix();
+
+    const nearbyDetectedTimestampIndex = detectedTs && getNearbyIndex(data, detectedTs);
+    const nearbyClosedTimestampIndex = closedTs && getNearbyIndex(data, closedTs);
+
+    const detectedCoordinate = chartData && chartData[nearbyDetectedTimestampIndex];
+    const closedCoordinate =
+      chartData && closedTs && chartData[nearbyClosedTimestampIndex];
+
+    return (
+      <LineChart
+        isGroupedByDate
+        series={[
+          {
+            seriesName: t('Events'),
+            dataArray: chartData,
+            markPoint: MarkPoint({
+              data: [
+                {
+                  symbol: `image://${detectedSymbol}`,
+                  name: t('Incident Started'),
+                  coord: detectedCoordinate,
+                },
+                ...(closedTs
+                  ? [
+                      {
+                        symbol: `image://${closedSymbol}`,
+                        symbolSize: 24,
+                        name: t('Incident Closed'),
+                        coord: closedCoordinate,
+                      },
+                    ]
+                  : []),
+              ],
+            }),
+          },
+        ]}
+      />
+    );
+  }
+}
