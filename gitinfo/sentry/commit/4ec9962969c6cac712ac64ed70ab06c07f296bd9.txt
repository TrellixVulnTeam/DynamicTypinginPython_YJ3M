commit 4ec9962969c6cac712ac64ed70ab06c07f296bd9
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Jun 26 11:34:08 2018 -0700

    feat(discover): Add serializer for discover endpoint (#8816)
    
    Moves validation into a serializer, follow up to #8759

diff --git a/src/sentry/api/endpoints/organization_discover.py b/src/sentry/api/endpoints/organization_discover.py
index 2b49b1cf19..b908294dcb 100644
--- a/src/sentry/api/endpoints/organization_discover.py
+++ b/src/sentry/api/endpoints/organization_discover.py
@@ -1,12 +1,13 @@
 from __future__ import absolute_import
 
-from datetime import datetime
-
+from rest_framework import serializers
 from rest_framework.response import Response
+from rest_framework.exceptions import PermissionDenied
+from sentry.api.serializers.rest_framework import ListField
 from sentry.api.bases.organization import OrganizationPermission
-from sentry.api.bases import OrganizationMemberEndpoint
+from sentry.api.bases import OrganizationEndpoint
 
-from sentry.models import Project, ProjectStatus, OrganizationMemberTeam
+from sentry.models import Project, ProjectStatus, OrganizationMember, OrganizationMemberTeam
 
 from sentry import roles
 
@@ -20,20 +21,53 @@ class OrganizationDiscoverPermission(OrganizationPermission):
     }
 
 
-class OrganizationDiscoverEndpoint(OrganizationMemberEndpoint):
-    permission_classes = (OrganizationDiscoverPermission, )
+class DiscoverSerializer(serializers.Serializer):
+    projects = ListField(
+        child=serializers.IntegerField(),
+        required=True,
+        allow_null=False,
+    )
+    start = serializers.DateTimeField(required=True)
+    end = serializers.DateTimeField(required=True)
+    fields = ListField(
+        child=serializers.CharField(),
+        required=False,
+        allow_null=True,
+    )
+    limit = serializers.IntegerField(min_value=0, max_value=1000, required=False)
+    rollup = serializers.IntegerField(required=False)
+    orderby = serializers.CharField(required=False, default='-last_seen')
+    conditions = ListField(
+        child=ListField(),
+        required=False,
+        allow_null=True,
+    )
+    aggregations = ListField(
+        child=ListField(),
+        required=False,
+        allow_null=True,
+    )
+
+    def __init__(self, *args, **kwargs):
+        super(DiscoverSerializer, self).__init__(*args, **kwargs)
+        self.member = OrganizationMember.objects.get(
+            user=self.context['user'], organization=self.context['organization'])
+
+    def validate_projects(self, attrs, source):
+        organization = self.context['organization']
+        member = self.member
+        projects = attrs[source]
 
-    def do_query(self, start, end, groupby, **kwargs):
+        org_projects = set(Project.objects.filter(
+            organization=organization,
+            status=ProjectStatus.VISIBLE,
+        ).values_list('id', flat=True))
 
-        snuba_results = snuba.raw_query(
-            start=start,
-            end=end,
-            groupby=groupby,
-            referrer='discover',
-            **kwargs
-        )
+        if not set(projects).issubset(org_projects) or not self.has_projects_access(
+                member, organization, projects):
+            raise PermissionDenied
 
-        return snuba_results
+        return attrs
 
     def has_projects_access(self, member, organization, requested_projects):
         has_global_access = roles.get(member.role).is_global
@@ -49,60 +83,43 @@ class OrganizationDiscoverEndpoint(OrganizationMemberEndpoint):
 
         return set(requested_projects).issubset(set(member_project_list))
 
-    def post(self, request, organization, member):
-        data = request.DATA
-
-        filters = {
-            'project_id': data['projects']
-        } if 'projects' in data else None
-
-        selected_columns = data.get('fields')
-
-        orderby = data.get('orderby', '-last_seen')
 
-        conditions = data.get('conditions')
-
-        limit = data.get('limit', 1000)
-
-        aggregations = data.get('aggregations')
-
-        groupby = data.get('groupby')
-
-        rollup = data.get('rollup')
+class OrganizationDiscoverEndpoint(OrganizationEndpoint):
+    permission_classes = (OrganizationDiscoverPermission, )
 
-        projects = data.get('projects')
+    def do_query(self, start, end, groupby, **kwargs):
 
-        org_projects = set(Project.objects.filter(
-            organization=organization,
-            status=ProjectStatus.VISIBLE,
-        ).values_list('id', flat=True))
+        snuba_results = snuba.raw_query(
+            start=start,
+            end=end,
+            groupby=groupby,
+            referrer='discover',
+            **kwargs
+        )
 
-        if (not isinstance(limit, int) or limit < 0 or limit > 1000):
-            return Response({'detail': 'Invalid limit parameter'}, status=400)
+        return snuba_results
 
-        if not projects:
-            return Response({'detail': 'No projects requested'}, status=400)
+    def post(self, request, organization):
+        serializer = DiscoverSerializer(
+            data=request.DATA, context={
+                'organization': organization, 'user': request.user})
 
-        if not set(projects).issubset(org_projects):
-            return Response({'detail': 'Invalid projects'}, status=400)
+        if not serializer.is_valid():
+            return Response(serializer.errors, status=400)
 
-        if not self.has_projects_access(member, organization, projects):
-            return Response({'detail': 'Invalid projects'}, status=400)
+        serialized = serializer.object
 
-        fmt = '%Y-%m-%dT%H:%M:%S'
-        start = datetime.strptime(data['start'], fmt)
-        end = datetime.strptime(data['end'], fmt)
         results = self.do_query(
-            start,
-            end,
-            groupby,
-            selected_columns=selected_columns,
-            conditions=conditions,
-            orderby=orderby,
-            limit=limit,
-            aggregations=aggregations,
-            rollup=rollup,
-            filter_keys=filters,
+            serialized.get('start'),
+            serialized.get('end'),
+            serialized.get('groupby'),
+            selected_columns=serialized.get('fields'),
+            conditions=serialized.get('conditions'),
+            orderby=serialized.get('orderby'),
+            limit=serialized.get('limit'),
+            aggregations=serialized.get('aggregations'),
+            rollup=serialized.get('rollup'),
+            filter_keys={'project_id': serialized.get('projects')},
         )
 
         return Response(results, status=200)
