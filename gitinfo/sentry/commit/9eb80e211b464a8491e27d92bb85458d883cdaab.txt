commit 9eb80e211b464a8491e27d92bb85458d883cdaab
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Mar 21 13:00:48 2019 -0700

    feat(recent-search): Save user recent search [SEN-351] (#12446)
    
    When a search is performed from search bar on issues stream, save the search term for user+org
    
    Fixes SEN-351

diff --git a/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx b/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
index 89c14c55e4..667015aeff 100644
--- a/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
@@ -1,3 +1,5 @@
+import handleXhrErrorResponse from 'app/utils/handleXhrErrorResponse';
+
 export function fetchSavedSearches(api, orgId, useOrgSavedSearches = false) {
   const url = `/organizations/${orgId}/searches/`;
 
@@ -18,3 +20,52 @@ export function fetchProjectSavedSearches(api, orgId, projectId) {
     method: 'GET',
   });
 }
+
+const getRecentSearchUrl = orgId => `/organizations/${orgId}/recent-searches/`;
+
+/**
+ * Saves search term for `user` + `orgId`
+ *
+ * @param {Object} api API client
+ * @param {String} orgId Organization slug
+ * @param {Number} type Context for where search happened, 0 for issue, 1 for event
+ * @param {String} query The search term that was used
+ */
+export function saveRecentSearch(api, orgId, type, query) {
+  const url = getRecentSearchUrl(orgId);
+  const promise = api
+    .requestPromise(url, {
+      method: 'POST',
+      data: {
+        query,
+        type,
+      },
+    })
+    .catch(handleXhrErrorResponse('Unable to save a recent search'));
+
+  return promise;
+}
+
+/**
+ * Fetches a list of recent search terms conducted by `user` for `orgId`
+ *
+ * @param {Object} api API client
+ * @param {String} orgId Organization slug
+ * @param {Number} type Context for where search happened, 0 for issue, 1 for event
+ * @param {String} query A query term used to filter results
+ *
+ * @return {Object[]} Returns a list of objects of recent search queries performed by user
+ */
+export function fetchRecentSearches(api, orgId, type, query) {
+  const url = getRecentSearchUrl(orgId);
+  const promise = api
+    .requestPromise(url, {
+      query: {
+        query,
+        type,
+      },
+    })
+    .catch(handleXhrErrorResponse('Unable to fetch recent searches'));
+
+  return promise;
+}
diff --git a/src/sentry/static/sentry/app/components/smartSearchBar.jsx b/src/sentry/static/sentry/app/components/smartSearchBar.jsx
index f9b697f3f4..86ad8fb7a3 100644
--- a/src/sentry/static/sentry/app/components/smartSearchBar.jsx
+++ b/src/sentry/static/sentry/app/components/smartSearchBar.jsx
@@ -7,9 +7,11 @@ import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
 
 import {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'app/constants';
+import {saveRecentSearch} from 'app/actionCreators/savedSearches';
 import {t} from 'app/locale';
 import MemberListStore from 'app/stores/memberListStore';
 import SearchDropdown from 'app/views/stream/searchDropdown';
+import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
 
 export function addSpace(query = '') {
@@ -29,6 +31,10 @@ export function removeSpace(query = '') {
 }
 class SmartSearchBar extends React.Component {
   static propTypes = {
+    api: PropTypes.object,
+
+    orgId: PropTypes.string,
+
     // Class name for search dropdown
     dropdownClassName: PropTypes.string,
 
@@ -57,6 +63,11 @@ class SmartSearchBar extends React.Component {
     // or a falsey value for no maximum
     maxSearchItems: PropTypes.number,
 
+    /**
+     * If this is defined, attempt to save search term scoped to the user and the current org
+     */
+    recentSearchType: PropTypes.number,
+
     // Callback that returns a promise of an array of strings
     onGetTagValues: PropTypes.func,
 
@@ -142,9 +153,19 @@ class SmartSearchBar extends React.Component {
   };
 
   onSubmit = evt => {
+    const {onSearch, api, orgId, recentSearchType} = this.props;
+
     evt.preventDefault();
     this.blur();
-    this.props.onSearch(removeSpace(this.state.query));
+    const query = removeSpace(this.state.query);
+    onSearch(query);
+
+    // Only save recent search query if we have a recentSearchType (also 0 is a valid value)
+    // Do not save empty string queries (i.e. if they clear search)
+    if (typeof recentSearchType !== 'undefined' && query) {
+      saveRecentSearch(api, orgId, recentSearchType, query);
+      // Ignore errors if it fails to save
+    }
   };
 
   clearSearch = () => {
@@ -531,32 +552,34 @@ class SmartSearchBar extends React.Component {
   }
 }
 
-const SmartSearchBarContainer = withOrganization(
-  createReactClass({
-    displayName: 'SmartSearchBarContainer',
+const SmartSearchBarContainer = withApi(
+  withOrganization(
+    createReactClass({
+      displayName: 'SmartSearchBarContainer',
 
-    mixins: [Reflux.listenTo(MemberListStore, 'onMemberListStoreChange')],
+      mixins: [Reflux.listenTo(MemberListStore, 'onMemberListStoreChange')],
 
-    getInitialState() {
-      return {
-        members: MemberListStore.getAll(),
-      };
-    },
-
-    onMemberListStoreChange(members) {
-      this.setState(
-        {
-          members,
-        },
-        this.updateAutoCompleteItems
-      );
-    },
+      getInitialState() {
+        return {
+          members: MemberListStore.getAll(),
+        };
+      },
+
+      onMemberListStoreChange(members) {
+        this.setState(
+          {
+            members,
+          },
+          this.updateAutoCompleteItems
+        );
+      },
 
-    render() {
-      // SmartSearchBar doesn't use members, but we forward it to cause a re-render.
-      return <SmartSearchBar {...this.props} members={this.state.members} />;
-    },
-  })
+      render() {
+        // SmartSearchBar doesn't use members, but we forward it to cause a re-render.
+        return <SmartSearchBar {...this.props} members={this.state.members} />;
+      },
+    })
+  )
 );
 
 const DropdownWrapper = styled('div')`
diff --git a/src/sentry/static/sentry/app/constants/index.jsx b/src/sentry/static/sentry/app/constants/index.jsx
index 2233c1e1d0..2bb8200686 100644
--- a/src/sentry/static/sentry/app/constants/index.jsx
+++ b/src/sentry/static/sentry/app/constants/index.jsx
@@ -147,3 +147,8 @@ export const ALGOLIA_APP_ID = 'OOK48W9UCL';
 export const ALGOLIA_READ_ONLY = '2d64ec1106519cbc672d863b0d200782';
 export const ALGOLIA_DOCS_INDEX = 'sentry-docs';
 export const ALGOLIA_ZENDESK_INDEX = 'zendesk_sentry_articles';
+
+export const RECENT_SEARCH_TYPES = {
+  ISSUE: 0,
+  EVENT: 1,
+};
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index 8512487ae0..ed83680082 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -1,9 +1,9 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import {RECENT_SEARCH_TYPES} from 'app/constants';
 import {t} from 'app/locale';
 import SmartSearchBar from 'app/components/smartSearchBar';
-import withApi from 'app/utils/withApi';
 
 const SEARCH_ITEMS = [
   {
@@ -50,10 +50,9 @@ const SEARCH_ITEMS = [
 
 class SearchBar extends React.Component {
   static propTypes = {
-    api: PropTypes.object,
-    orgId: PropTypes.string.isRequired,
+    ...SmartSearchBar.propTypes,
+
     tagValueLoader: PropTypes.func.isRequired,
-    supportedTags: PropTypes.object.isRequired,
   };
 
   /**
@@ -72,15 +71,21 @@ class SearchBar extends React.Component {
   };
 
   render() {
+    const {
+      tagValueLoader, // eslint-disable-line no-unused-vars
+      ...props
+    } = this.props;
+
     return (
       <SmartSearchBar
         onGetTagValues={this.getTagValues}
         defaultSearchItems={SEARCH_ITEMS}
         maxSearchItems={5}
-        {...this.props}
+        recentSearchType={RECENT_SEARCH_TYPES.ISSUE}
+        {...props}
       />
     );
   }
 }
 
-export default withApi(SearchBar);
+export default SearchBar;
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/stream/searchBar.spec.jsx
index 0ff53647c3..aa15a769e3 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/stream/searchBar.spec.jsx
@@ -19,9 +19,7 @@ describe('SearchBar', function() {
       context: {organization: {id: '123'}},
     };
 
-    tagValuePromise = new Promise(function(resolve, reject) {
-      return resolve([]);
-    });
+    tagValuePromise = Promise.resolve([]);
   });
 
   afterEach(function() {
@@ -44,6 +42,7 @@ describe('SearchBar', function() {
         query: 'url:"fu"',
         tagValueLoader: loader,
         supportedTags,
+        onSearch: jest.fn(),
       };
       const searchBar = mount(<SearchBar {...props} />, options);
       clickInput(searchBar);
@@ -65,6 +64,7 @@ describe('SearchBar', function() {
         query: 'url:"http://example.com"',
         tagValueLoader: loader,
         supportedTags,
+        onSearch: jest.fn(),
       };
 
       const searchBar = mount(<SearchBar {...props} />, options);
@@ -87,6 +87,7 @@ describe('SearchBar', function() {
         query: 'timesSeen:',
         tagValueLoader: loader,
         supportedTags,
+        onSearch: jest.fn(),
       };
       const searchBar = mount(<SearchBar {...props} />, options);
       clickInput(searchBar);
@@ -94,4 +95,47 @@ describe('SearchBar', function() {
       expect(loader).not.toHaveBeenCalled();
     });
   });
+
+  it('saves search query as a recent search', async function() {
+    jest.useFakeTimers();
+    const saveRecentSearch = MockApiClient.addMockResponse({
+      url: '/organizations/123/recent-searches/',
+      method: 'POST',
+      body: {},
+    });
+    const loader = (key, value) => {
+      expect(key).toEqual('url');
+      expect(value).toEqual('fu');
+      return tagValuePromise;
+    };
+    const onSearch = jest.fn();
+    const props = {
+      orgId: '123',
+      query: 'url:"fu"',
+      onSearch,
+      tagValueLoader: loader,
+      supportedTags,
+    };
+    const searchBar = mount(<SearchBar {...props} />, options);
+    clickInput(searchBar);
+    jest.advanceTimersByTime(301);
+    expect(searchBar.find('SearchDropdown').prop('searchSubstring')).toEqual('"fu"');
+    expect(searchBar.find('SearchDropdown').prop('items')).toEqual([]);
+
+    jest.useRealTimers();
+    searchBar.find('form').simulate('submit');
+    expect(onSearch).toHaveBeenCalledWith('url:"fu"');
+
+    await tick();
+    searchBar.update();
+    expect(saveRecentSearch).toHaveBeenCalledWith(
+      expect.anything(),
+      expect.objectContaining({
+        data: {
+          query: 'url:"fu"',
+          type: 0,
+        },
+      })
+    );
+  });
 });
diff --git a/tests/js/spec/views/stream/stream.spec.jsx b/tests/js/spec/views/stream/stream.spec.jsx
index 3d0bcd185d..5c4dbf927f 100644
--- a/tests/js/spec/views/stream/stream.spec.jsx
+++ b/tests/js/spec/views/stream/stream.spec.jsx
@@ -227,6 +227,7 @@ describe('Stream', function() {
         setProjectNavSection: function() {},
         params: {orgId: 'org-slug', projectId: 'project-slug', searchId: '789'},
         location: {query: {}, search: ''},
+        tags: {},
       };
       wrapper = shallow(<Stream {...streamProps} />, {
         context,
@@ -242,6 +243,7 @@ describe('Stream', function() {
         setProjectNavSection: function() {},
         params: {orgId: 'org-slug', projectId: 'project-slug', searchId: 'invalid'},
         location: {query: {}, search: ''},
+        tags: {},
       };
       wrapper = shallow(<Stream {...streamProps} />, {
         context,
