commit 78c7b412afd43f2c909b2adfe3b89a1c71d24d4a
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Sep 2 13:56:02 2015 -0700

    Add basic reference integrity checks to NodeStore

diff --git a/src/sentry/db/models/fields/node.py b/src/sentry/db/models/fields/node.py
index 9f07d9d172..324033202d 100644
--- a/src/sentry/db/models/fields/node.py
+++ b/src/sentry/db/models/fields/node.py
@@ -13,6 +13,7 @@ import logging
 import six
 import warnings
 
+from django.conf import settings
 from django.db import models
 from django.db.models.signals import post_delete
 from south.modelsinspector import add_introspection_rules
@@ -28,9 +29,18 @@ __all__ = ('NodeField',)
 logger = logging.getLogger('sentry')
 
 
+class NodeUnpopulated(Exception):
+    pass
+
+
+class NodeIntegrityFailure(Exception):
+    pass
+
+
 class NodeData(collections.MutableMapping):
     def __init__(self, id, data=None):
         self.id = id
+        self.ref = None
         self._node_data = data
 
     def __getitem__(self, key):
@@ -57,20 +67,32 @@ class NodeData(collections.MutableMapping):
 
     @memoize
     def data(self):
-        from sentry import app
+        from sentry.app import nodestore
 
         if self._node_data is not None:
             return self._node_data
 
         elif self.id:
-            warnings.warn('You should populate node data before accessing it.')
-            return app.nodestore.get(self.id) or {}
+            if settings.DEBUG:
+                raise NodeUnpopulated('You should populate node data before accessing it.')
+            else:
+                warnings.warn('You should populate node data before accessing it.')
+            self.bind_data(nodestore.get(self.id) or {})
+            return self._node_data
 
         return {}
 
-    def bind_data(self, data):
+    def bind_data(self, data, ref=None):
+        self.ref = data.pop('_ref', ref)
+        if ref is not None and self.ref != ref:
+            raise NodeIntegrityFailure('Node reference for %s is invalid: %s != %s' % (
+                self.id, ref, self.ref,
+            ))
         self._node_data = data
 
+    def bind_ref(self, instance):
+        self.data['_ref'] = instance.pk
+
 
 class NodeField(GzippedDictField):
     """
@@ -87,13 +109,13 @@ class NodeField(GzippedDictField):
             weak=False)
 
     def on_delete(self, instance, **kwargs):
-        from sentry import app
+        from sentry.app import nodestore
 
         value = getattr(instance, self.name)
         if not value.id:
             return
 
-        app.nodestore.delete(value.id)
+        nodestore.delete(value.id)
 
     def to_python(self, value):
         if isinstance(value, six.string_types) and value:
@@ -115,7 +137,7 @@ class NodeField(GzippedDictField):
         return NodeData(node_id, data)
 
     def get_prep_value(self, value):
-        from sentry import app
+        from sentry.app import nodestore
 
         if not value and self.null:
             # save ourselves some storage
@@ -124,9 +146,9 @@ class NodeField(GzippedDictField):
         # TODO(dcramer): we should probably do this more intelligently
         # and manually
         if not value.id:
-            value.id = app.nodestore.create(value.data)
+            value.id = nodestore.create(value.data)
         else:
-            app.nodestore.set(value.id, value.data)
+            nodestore.set(value.id, value.data)
 
         return compress(pickle.dumps({
             'node_id': value.id
diff --git a/src/sentry/db/models/manager.py b/src/sentry/db/models/manager.py
index af9f61a109..0e3443103a 100644
--- a/src/sentry/db/models/manager.py
+++ b/src/sentry/db/models/manager.py
@@ -238,20 +238,24 @@ class BaseManager(Manager):
         return create_or_update(self.model, **kwargs)
 
     def bind_nodes(self, object_list, *node_names):
-        from sentry import app
+        from sentry.app import nodestore
 
         object_node_list = []
         for name in node_names:
-            object_node_list.extend((getattr(i, name) for i in object_list if getattr(i, name).id))
+            object_node_list.extend(
+                ((i, getattr(i, name))
+                for i in object_list
+                if getattr(i, name).id)
+            )
 
-        node_ids = [n.id for n in object_node_list]
+        node_ids = [n.id for _, n in object_node_list]
         if not node_ids:
             return
 
-        node_results = app.nodestore.get_multi(node_ids)
+        node_results = nodestore.get_multi(node_ids)
 
-        for node in object_node_list:
-            node.bind_data(node_results.get(node.id) or {})
+        for item, node in object_node_list:
+            node.bind_data(node_results.get(node.id) or {}, ref=item.pk)
 
     def uncache_object(self, instance_id):
         pk_name = self.model._meta.pk.name
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index e1bbf17f8a..8c2561e58d 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -388,6 +388,10 @@ class EventManager(object):
         using = group._state.db
 
         event.group = group
+        # store a reference to the group id to guarantee validation of isolation
+        # TODO(dcramer): ideally NodeField would do this itself, but it's unable
+        # to
+        event.data.bind_ref(group)
 
         try:
             with transaction.atomic():
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index 8207e31d3b..542a32dc68 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -2,6 +2,8 @@
 
 from __future__ import absolute_import
 
+import pytest
+
 from datetime import timedelta
 from django.core import mail
 from django.core.urlresolvers import reverse
@@ -9,7 +11,7 @@ from django.db import connection
 from django.utils import timezone
 from exam import fixture
 
-from sentry.db.models.fields.node import NodeData
+from sentry.db.models.fields.node import NodeData, NodeIntegrityFailure
 from sentry.models import ProjectKey, Event, LostPasswordHash
 from sentry.testutils import TestCase
 from sentry.utils.compat import pickle
@@ -123,3 +125,12 @@ class EventNodeStoreTest(TestCase):
 
         assert event.data == data
         assert event.data.id == node_id
+
+    def test_screams_bloody_murder_when_ref_fails(self):
+        invalid_event = self.create_event()
+        event = self.create_event()
+        event.data.bind_ref(invalid_event)
+        event.save()
+
+        with pytest.raises(NodeIntegrityFailure):
+            Event.objects.bind_nodes([event], 'data')
