commit 16abc827545b98be742e95a0705e1a509e42ccbc
Author: David Cramer <dcramer@gmail.com>
Date:   Sat May 9 15:05:39 2015 -0700

    Endpoint for listing and creating client keys

diff --git a/setup.py b/setup.py
index fbcef9c982..b454b6228f 100755
--- a/setup.py
+++ b/setup.py
@@ -89,6 +89,7 @@ install_requires = [
     'mock>=0.8.0',
     'nydus>=0.11.0,<0.12.0',
     'markdown>=2.4.1,<2.5.0',
+    'petname>=1.7,<1.8',
     'progressbar>=2.2,<2.4',
     'Pygments>=1.6.0,<1.7.0',
     'pytest',
diff --git a/src/sentry/api/endpoints/project_keys.py b/src/sentry/api/endpoints/project_keys.py
new file mode 100644
index 0000000000..bf8e03fd9e
--- /dev/null
+++ b/src/sentry/api/endpoints/project_keys.py
@@ -0,0 +1,67 @@
+from __future__ import absolute_import
+
+import petname
+
+from rest_framework import serializers, status
+from rest_framework.response import Response
+
+from sentry.api.base import DocSection
+from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.serializers import serialize
+from sentry.models import AuditLogEntry, AuditLogEntryEvent, ProjectKey
+
+
+class KeySerializer(serializers.Serializer):
+    name = serializers.CharField(max_length=200, required=False)
+
+
+class ProjectKeysEndpoint(ProjectEndpoint):
+    doc_section = DocSection.PROJECTS
+
+    def get(self, request, project):
+        """
+        List a project's client keys
+
+        Return a list of client keys bound to a project.
+
+            {method} {path}
+
+        """
+        keys = list(ProjectKey.objects.filter(
+            project=project,
+        ))
+        return Response(serialize(keys, request.user))
+
+    def post(self, request, project):
+        """
+        Create a new client key
+
+        Create a new client key bound to a project.
+
+            {method} {path}
+            {{
+                "name": "My key label"
+            }}
+
+        """
+        serializer = KeySerializer(data=request.DATA)
+
+        if serializer.is_valid():
+            result = serializer.object
+
+            key = ProjectKey.objects.create(
+                project=project,
+                label=result.get('name') or petname.Generate(2, ' ').title(),
+            )
+
+            AuditLogEntry.objects.create(
+                organization=project.organization,
+                actor=request.user,
+                ip_address=request.META['REMOTE_ADDR'],
+                target_object=key.id,
+                event=AuditLogEntryEvent.PROJECTKEY_ADD,
+                data=key.get_audit_log_data(),
+            )
+
+            return Response(serialize(key, request.user), status=201)
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/api/serializers/models/project_key.py b/src/sentry/api/serializers/models/project_key.py
new file mode 100644
index 0000000000..a75a56f6e7
--- /dev/null
+++ b/src/sentry/api/serializers/models/project_key.py
@@ -0,0 +1,20 @@
+from __future__ import absolute_import
+
+from sentry.api.serializers import Serializer, register
+from sentry.models import ProjectKey
+
+
+@register(ProjectKey)
+class ProjectKeySerializer(Serializer):
+    def serialize(self, obj, attrs, user):
+        d = {
+            'label': obj.label,
+            'public': obj.public_key,
+            'secret': obj.secret_key,
+            'dsn': {
+                'secret': obj.dsn_private,
+                'public': obj.dsn_public,
+            },
+            'dateCreated': obj.date_added,
+        }
+        return d
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 0b54092e19..999ce764d0 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -30,6 +30,7 @@ from .endpoints.organization_stats import OrganizationStatsEndpoint
 from .endpoints.organization_teams import OrganizationTeamsEndpoint
 from .endpoints.project_details import ProjectDetailsEndpoint
 from .endpoints.project_group_index import ProjectGroupIndexEndpoint
+from .endpoints.project_keys import ProjectKeysEndpoint
 from .endpoints.project_member_index import ProjectMemberIndexEndpoint
 from .endpoints.project_releases import ProjectReleasesEndpoint
 from .endpoints.project_stats import ProjectStatsEndpoint
@@ -122,6 +123,9 @@ urlpatterns = patterns(
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/groups/$',
         ProjectGroupIndexEndpoint.as_view(),
         name='sentry-api-0-project-group-index'),
+    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/keys/$',
+        ProjectKeysEndpoint.as_view(),
+        name='sentry-api-0-project-keys'),
     url(r'^projects/(?P<organization_slug>[^/]+)/(?P<project_slug>[^/]+)/members/$',
         ProjectMemberIndexEndpoint.as_view(),
         name='sentry-api-0-project-member-index'),
diff --git a/tests/sentry/api/endpoints/test_project_keys.py b/tests/sentry/api/endpoints/test_project_keys.py
new file mode 100644
index 0000000000..eae06e708c
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_project_keys.py
@@ -0,0 +1,49 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import ProjectKey
+from sentry.testutils import APITestCase
+
+
+class ListProjectKeysTest(APITestCase):
+    def test_simple(self):
+        project = self.create_project()
+        key = ProjectKey.objects.get_or_create(project=project)[0]
+        self.login_as(user=self.user)
+        url = reverse('sentry-api-0-project-keys', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+        })
+        response = self.client.get(url)
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]['public'] == key.public_key
+
+
+class CreateProjectKeyTest(APITestCase):
+    def test_simple(self):
+        project = self.create_project()
+        self.login_as(user=self.user)
+        url = reverse('sentry-api-0-project-keys', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+        })
+        resp = self.client.post(url, data={
+            'name': 'hello world',
+        })
+        assert resp.status_code == 201, resp.content
+        key = ProjectKey.objects.get(public_key=resp.data['public'])
+        assert key.label == 'hello world'
+
+    def test_minimal_args(self):
+        project = self.create_project()
+        self.login_as(user=self.user)
+        url = reverse('sentry-api-0-project-keys', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+        })
+        resp = self.client.post(url)
+        assert resp.status_code == 201, resp.content
+        key = ProjectKey.objects.get(public_key=resp.data['public'])
+        assert key.label
