commit 9aa62b3efffbfbeec8ef403995837c76c6974ce4
Author: Jan Michael Auer <account@jauer.org>
Date:   Wed Oct 25 20:42:07 2017 +0200

    feat: Symbolication of minidump events (#6424)
    
    * feat(minidump): Enable apple crash reports for minidump in UI
    * feat(minidump): Allow for symbolication of minidump frames

diff --git a/src/sentry/api/endpoints/event_apple_crash_report.py b/src/sentry/api/endpoints/event_apple_crash_report.py
index eb6db5a446..6dee47a058 100644
--- a/src/sentry/api/endpoints/event_apple_crash_report.py
+++ b/src/sentry/api/endpoints/event_apple_crash_report.py
@@ -38,7 +38,7 @@ class EventAppleCrashReportEndpoint(Endpoint):
 
         Event.objects.bind_nodes([event], 'data')
 
-        if event.platform != 'cocoa':
+        if event.platform not in ('cocoa', 'native'):
             return HttpResponse(
                 {
                     'message': 'Only cocoa events can return an apple crash report',
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 5730273b29..f379ed8105 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -26,6 +26,8 @@ FRAME_CACHE_VERSION = 6
 
 
 class NativeStacktraceProcessor(StacktraceProcessor):
+    supported_platforms = ('cocoa', 'native')
+
     def __init__(self, *args, **kwargs):
         StacktraceProcessor.__init__(self, *args, **kwargs)
         debug_meta = self.data.get('debug_meta')
@@ -72,7 +74,8 @@ class NativeStacktraceProcessor(StacktraceProcessor):
                 if mechanism and 'posix_signal' in mechanism and \
                    'signal' in mechanism['posix_signal']:
                     signal = int(mechanism['posix_signal']['signal'])
-            registers = processable_frame.stacktrace_info.stacktrace.get('registers')
+            registers = processable_frame.stacktrace_info.stacktrace.get(
+                'registers')
             if registers:
                 ip_reg_name = arch_get_ip_reg_name(self.arch)
                 if ip_reg_name:
@@ -89,7 +92,8 @@ class NativeStacktraceProcessor(StacktraceProcessor):
 
     def handles_frame(self, frame, stacktrace_info):
         platform = frame.get('platform') or self.data.get('platform')
-        return (platform == 'cocoa' and self.available and 'instruction_addr' in frame)
+        return (platform in self.supported_platforms and self.available
+                and 'instruction_addr' in frame)
 
     def preprocess_frame(self, processable_frame):
         instr_addr = self.find_best_instruction(processable_frame)
@@ -155,7 +159,6 @@ class NativeStacktraceProcessor(StacktraceProcessor):
         self.sym = Symbolizer(
             self.project,
             self.object_lookup,
-            arch=self.arch,
             referenced_images=referenced_images,
             on_dsym_file_referenced=on_referenced
         )
@@ -192,22 +195,29 @@ class NativeStacktraceProcessor(StacktraceProcessor):
 
     def process_frame(self, processable_frame, processing_task):
         frame = processable_frame.frame
+        raw_frame = dict(frame)
         errors = []
 
-        new_frames = []
-        raw_frame = dict(frame)
         if processable_frame.cache_value is None:
             # Construct a raw frame that is used by the symbolizer
             # backend.  We only assemble the bare minimum we need here.
             instruction_addr = processable_frame.data['instruction_addr']
-            in_app = self.sym.is_in_app(instruction_addr, sdk_info=self.sdk_info)
+            in_app = self.sym.is_in_app(
+                instruction_addr,
+                sdk_info=self.sdk_info
+            )
+
             if in_app and raw_frame.get('function') is not None:
-                in_app = not self.sym.is_internal_function(raw_frame['function'])
+                in_app = not self.sym.is_internal_function(
+                    raw_frame['function'])
+
             if raw_frame.get('in_app') is None:
                 raw_frame['in_app'] = in_app
+
             obj_uuid = processable_frame.data['obj_uuid']
             if obj_uuid is not None:
                 self.dsyms_referenced.add(obj_uuid)
+
             try:
                 symbolicated_frames = self.sym.symbolize_frame(
                     instruction_addr,
@@ -238,24 +248,26 @@ class NativeStacktraceProcessor(StacktraceProcessor):
                 # optional dsyms)
                 errors = []
                 if e.is_user_fixable or e.is_sdk_failure:
-                    errors.append(
-                        {
-                            'type': e.type,
-                            'image_uuid': e.image_uuid,
-                            'image_path': e.image_path,
-                            'image_arch': e.image_arch,
-                            'message': e.message,
-                        }
-                    )
+                    errors.append({
+                        'type': e.type,
+                        'image_uuid': e.image_uuid,
+                        'image_path': e.image_path,
+                        'image_arch': e.image_arch,
+                        'message': e.message,
+                    })
                 else:
-                    logger.debug('Failed to symbolicate with native backend', exc_info=True)
+                    logger.debug('Failed to symbolicate with native backend',
+                                 exc_info=True)
+
                 return [raw_frame], [raw_frame], errors
 
             processable_frame.set_cache_value([in_app, symbolicated_frames])
-        else:
+
+        else:  # processable_frame.cache_value is present
             in_app, symbolicated_frames = processable_frame.cache_value
             raw_frame['in_app'] = in_app
 
+        new_frames = []
         for sfrm in symbolicated_frames:
             new_frame = dict(frame)
             new_frame['function'] = sfrm['function']
@@ -263,16 +275,18 @@ class NativeStacktraceProcessor(StacktraceProcessor):
                 new_frame['symbol'] = sfrm['symbol']
             new_frame['abs_path'] = sfrm['abs_path']
             new_frame['filename'] = sfrm.get('filename') or \
-                (sfrm['abs_path'] and posixpath.basename(sfrm['abs_path'])) or None
+                (sfrm['abs_path'] and posixpath.basename(sfrm['abs_path'])) or \
+                None
             if sfrm.get('lineno'):
                 new_frame['lineno'] = sfrm['lineno']
             if sfrm.get('colno'):
                 new_frame['colno'] = sfrm['colno']
-            if sfrm.get('package'):
-                new_frame['package'] = sfrm['package']
+            if sfrm.get('package') or processable_frame.data['obj'] is not None:
+                new_frame['package'] = sfrm.get(
+                    'package', processable_frame.data['obj'].name)
             if new_frame.get('in_app') is None:
-                new_frame['in_app'
-                          ] = (in_app and not self.sym.is_internal_function(new_frame['function']))
+                new_frame['in_app'] = in_app and \
+                    not self.sym.is_internal_function(new_frame['function'])
             new_frames.append(new_frame)
 
         return new_frames, [raw_frame], []
@@ -282,5 +296,5 @@ class NativePlugin(Plugin2):
     can_disable = False
 
     def get_stacktrace_processors(self, data, stacktrace_infos, platforms, **kwargs):
-        if 'cocoa' in platforms:
+        if any(platform in NativeStacktraceProcessor.supported_platforms for platform in platforms):
             return [NativeStacktraceProcessor]
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 5b199e819c..1f12e9dc0d 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -32,7 +32,8 @@ SIM_PATH = '/Developer/CoreSimulator/Devices/'
 SIM_APP_PATH = '/Containers/Bundle/Application/'
 MAC_OS_PATH = '.app/Contents/'
 
-_internal_function_re = re.compile(r'(kscm_|kscrash_|KSCrash |SentryClient |RNSentry )')
+_internal_function_re = re.compile(
+    r'(kscm_|kscrash_|KSCrash |SentryClient |RNSentry )')
 
 KNOWN_GARBAGE_SYMBOLS = set([
     '_mh_execute_header',
@@ -105,7 +106,7 @@ class Symbolizer(object):
     """
 
     def __init__(self, project, object_lookup, referenced_images,
-                 arch=None, on_dsym_file_referenced=None):
+                 on_dsym_file_referenced=None):
         if not isinstance(object_lookup, ObjectLookup):
             object_lookup = ObjectLookup(object_lookup)
         self.object_lookup = object_lookup
@@ -114,8 +115,6 @@ class Symbolizer(object):
             project, referenced_images,
             on_dsym_file_referenced=on_dsym_file_referenced)
 
-        self.arch = arch
-
     def _process_frame(self, sym, obj, package=None, addr_off=0):
         frame = {
             'sym_addr': sym.sym_addr + addr_off,
@@ -142,7 +141,8 @@ class Symbolizer(object):
         fn = obj.name
         if not fn:
             return False
-        is_mac_platform = (sdk_info is not None and sdk_info['sdk_name'].lower() == 'macos')
+        is_mac_platform = (
+            sdk_info is not None and sdk_info['sdk_name'].lower() == 'macos')
         if not (
             fn.startswith(APP_BUNDLE_PATHS) or (SIM_PATH in fn and SIM_APP_PATH in fn) or
             (is_mac_platform and MAC_OS_PATH in fn)
@@ -222,7 +222,8 @@ class Symbolizer(object):
             # errors.
             if self._is_optional_dsym(obj, sdk_info=sdk_info):
                 return []
-            raise SymbolicationFailed(type=EventError.NATIVE_MISSING_SYMBOL, obj=obj)
+            raise SymbolicationFailed(
+                type=EventError.NATIVE_MISSING_SYMBOL, obj=obj)
         return [self._process_frame(s, obj, addr_off=obj.addr) for s in reversed(rv)]
 
     def _convert_symbolserver_match(self, instruction_addr, symbolserver_match, obj):
@@ -244,13 +245,6 @@ class Symbolizer(object):
         ]
 
     def symbolize_frame(self, instruction_addr, sdk_info=None, symbolserver_match=None):
-        # If we do not have a CPU name we fail.  We currently only support
-        # a single cpu architecture.
-        if self.arch is None:
-            raise SymbolicationFailed(
-                type=EventError.NATIVE_INTERNAL_FAILURE, message='Found multiple architectures.'
-            )
-
         obj = self.object_lookup.find_object(instruction_addr)
         if obj is None:
             raise SymbolicationFailed(type=EventError.NATIVE_UNKNOWN_IMAGE)
diff --git a/src/sentry/models/minidump.py b/src/sentry/models/minidump.py
index e6a924ebae..8155b43ed7 100644
--- a/src/sentry/models/minidump.py
+++ b/src/sentry/models/minidump.py
@@ -8,6 +8,8 @@ sentry.models.minidump
 
 from __future__ import absolute_import
 
+import re
+import six
 from django.db import models, transaction
 from symbolic import ProcessState
 
@@ -15,6 +17,12 @@ from sentry.constants import LOG_LEVELS_MAP
 from sentry.db.models import FlexibleForeignKey, Model, sane_repr
 from sentry.models.file import File
 
+_version_re = re.compile(r'(\d+\.\d+\.\d+)\s+(.*)')
+
+_minidump_os_mapping = {
+    'Mac OS X': 'macOS',
+}
+
 
 class MinidumpFile(Model):
     __core__ = False
@@ -67,10 +75,18 @@ def merge_minidump_event(data, minidump_path):
     context = data.setdefault('contexts', {})
     os = context.setdefault('os', {})
     device = context.setdefault('device', {})
-    os['name'] = info.os_name
-    os['version'] = info.os_version
+    os['type'] = 'os'  # Required by "get_sdk_from_event"
+    os['name'] = _minidump_os_mapping.get(info.os_name, info.os_name)
     device['arch'] = info.cpu_family
 
+    # Breakpad reports the version and build number always in one string,
+    # but a version number is guaranteed even on certain linux distros.
+    match = _version_re.search(info.os_version)
+    if match is not None:
+        version, build = match.groups()
+        os['version'] = version
+        os['build'] = build
+
     # We can extract stack traces here already but since CFI is not
     # available yet (without debug symbols), the stackwalker will
     # resort to stack scanning which yields low-quality results. If
@@ -81,7 +97,7 @@ def merge_minidump_event(data, minidump_path):
         'crashed': False,
         'stacktrace': {
             'frames': [{
-                'instruction_addr': frame.instruction,
+                'instruction_addr': '0x%x' % frame.instruction,
                 'function': '<unknown>',  # Required by interface
             } for frame in thread.frames()],
         },
@@ -101,16 +117,16 @@ def merge_minidump_event(data, minidump_path):
         'stacktrace': crashed_thread.pop('stacktrace'),
     }
 
-    data.setdefault('exception', {}) \
+    data.setdefault('sentry.interfaces.Exception', {}) \
         .setdefault('values', []) \
         .append(exception)
 
     # Extract referenced (not all loaded) images
     images = [{
         'type': 'apple',  # Required by interface
-        'uuid': module.uuid,
-        'image_addr': module.addr,
-        'image_size': module.size,
+        'uuid': six.text_type(module.uuid),
+        'image_addr': '0x%x' % module.addr,
+        'image_size': '0x%x' % module.size,
         'name': module.name,
     } for module in state.modules()]
     data.setdefault('debug_meta', {})['images'] = images
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx
index 2a6f86500d..d7476b6c75 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx
@@ -25,17 +25,22 @@ const RawExceptionContent = React.createClass({
   },
 
   componentDidMount() {
-    if (this.props.platform == 'cocoa') {
+    if (this.isNative()) {
       this.fetchAppleCrashReport();
     }
   },
 
   componentDidUpdate(prevProps) {
-    if (this.props.platform == 'cocoa' && this.props.type !== prevProps.type) {
+    if (this.isNative() && this.props.type !== prevProps.type) {
       this.fetchAppleCrashReport();
     }
   },
 
+  isNative() {
+    let { platform } = this.props;
+    return platform === 'cocoa' || platform === 'native';
+  },
+
   getAppleCrashReportEndpoint() {
     let minified = this.props.type == 'minified';
     return `/events/${this.props.eventId}/apple-crash-report?minified=${minified}`;
@@ -76,7 +81,7 @@ const RawExceptionContent = React.createClass({
           this.props.platform,
           exc
         );
-      if (this.props.platform == 'cocoa') {
+      if (this.isNative()) {
         if (this.state.loading) content = <LoadingIndicator />;
         else if (this.state.error) content = <LoadingError onRetry={this.fetchData} />;
         else if (!this.state.loading && this.state.crashReport != '') {
diff --git a/tests/sentry/lang/native/test_processor.py b/tests/sentry/lang/native/test_processor.py
index c49c2f7607..99a912e9ba 100644
--- a/tests/sentry/lang/native/test_processor.py
+++ b/tests/sentry/lang/native/test_processor.py
@@ -22,7 +22,8 @@ SWIFT_OBJECT_NAME = (
     "SentryTest.app/Frameworks/libswiftCore.dylib"
 )
 
-SDK_INFO = {"sdk_name": "iOS", "version_major": 9, "version_minor": 3, "version_patchlevel": 0}
+SDK_INFO = {"sdk_name": "iOS", "version_major": 9,
+            "version_minor": 3, "version_patchlevel": 0}
 
 
 def patched_symbolize_app_frame(self, instruction_addr, img, sdk_info=None):
@@ -170,7 +171,8 @@ class BasicResolvingFileTest(TestCase):
         def make_processors(data, infos):
             return [NativeStacktraceProcessor(data, infos)]
 
-        event_data = process_stacktraces(event_data, make_processors=make_processors)
+        event_data = process_stacktraces(
+            event_data, make_processors=make_processors)
 
         bt = event_data['sentry.interfaces.Exception']['values'][0]['stacktrace']
         frames = bt['frames']
@@ -240,7 +242,6 @@ class BasicInAppTest(TestCase):
                     '2DA67FF5-2643-44D6-8FFF-1B6BC78C9912',
                 ]
             ),
-            arch='arm64'
         )
 
         assert sym.is_in_app(4295121764)
