commit 559fc2c9c834a69cf675cfd1cb60e834c8c60b85
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Mar 3 14:48:07 2015 -0800

    Remove no longer used views

diff --git a/src/sentry/templates/sentry/groups/details.html b/src/sentry/templates/sentry/groups/details.html
deleted file mode 100644
index 2b6b8b3a1e..0000000000
--- a/src/sentry/templates/sentry/groups/details.html
+++ /dev/null
@@ -1,137 +0,0 @@
-{% extends "sentry/bases/stream.html" %}
-
-{% load i18n %}
-{% load sentry_activity %}
-{% load sentry_api %}
-{% load sentry_helpers %}
-{% load sentry_plugins %}
-
-{% block title %}{{ group.title }} | {{ block.super }}{% endblock %}
-
-{% block controller %}GroupDetailsCtrl{% endblock %}
-
-{% block page_header %}{% endblock %}
-
-{% block wrapperclass %}sidebar-right{% endblock %}
-
-{% block breadcrumb_inner %}
-  {{ block.super }}
-  <li class="truncate">{{ group.title }}</li>
-{% endblock %}
-
-{% block main %}
-    {% handle_before_events request group %}
-
-    <div id="blk_agg_details"></div>
-    <script>
-    $(function(){
-      React.render(React.createFactory(AggregateDetails)({
-        aggList: [{% serialize group %}],
-        aggId: '{{ group.id }}',
-        project: {% serialize project %},
-        memberList: [],
-        chart: true
-      }), document.getElementById('blk_agg_details'));
-    });
-    </script>
-
-    {% block inner %}
-        {% with event|get_rendered_interfaces:request as interface_list %}
-            <div class="box">
-                <div class="box-header">
-                    <h3>Activity</h3>
-                </div>
-                <div class="activity box-content with-padding" id="activity">
-                    <div class="post-box">
-                        <form class="add-note-form" method="POST" action=".">
-                            {% csrf_token %}
-                            <input type="hidden" name="o" value="note">
-                            {{ add_note_form.text }}
-                            <!-- <fieldset class="form-actions">
-                                <button type="submit" class="btn btn-small btn-primary">{% trans "Add Note" %}</button>
-                            </fieldset> -->
-                        </form>
-                    </div>
-                    <ul>
-                        {% for item in activity %}
-                            {% with item|render_activity as out %}
-                                {% if out %}
-                                    <li class="item item-{{ item.get_type_display }}">{{ out }}</li>
-                                {% endif %}
-                            {% endwith %}
-                        {% endfor %}
-                    </ul>
-                </div>
-            </div>
-
-            <div class="btn-toolbar event-toolbar">
-                <!-- We switch the ordering of events here as it makes more sense visually -->
-                <a class="btn btn-default btn-lg pull-left prev {% if not next_event %} disabled{% endif %}"{% if next_event %} href="{% url 'sentry-group-event' group.organization.slug group.project.slug group.id next_event.id %}"{% endif %}><span></span> {% trans "Newer Sample" %}</a>
-                <a class="btn btn-default btn-lg pull-right next {% if not prev_event %} disabled{% endif %}"{% if prev_event %} href="{% url 'sentry-group-event' group.organization.slug group.project.slug group.id prev_event.id %}"{% endif %}>{% trans "Older Sample" %} <span></span></a>
-                <h4>
-                <span title="{{ event.datetime }}">{% localized_datetime event.datetime %}</span> [{{ event.size|filesizeformat }}]<br><small>ID: {{ event.event_id }}</small></h4>
-            </div>
-
-            {% if group.is_muted %}
-                <div class="alert alert-info">This event has been muted. You will not be notified of any changes and it will not show up in the default feed.</div>
-            {% endif %}
-
-            {% if event.has_two_part_message %}
-                <div class="box">
-                  <div class="box-header">
-                      <h3>{% trans "Full message" %}</h3>
-                  </div>
-                  <div class="box-content with-padding">
-                    <pre id="full-message">{{ event.message }}</pre>
-                  </div>
-                </div>
-            {% endif %}
-
-            {% include "sentry/partial/_event_details.html" %}
-        {% endwith %}
-    {% endblock %}
-
-{% endblock %}
-
-{% block sidebar %}
-    <ul class="nav nav-stacked hidden-xs">
-        <li{% if page == 'details' %} class="active"{% endif %}><a href="{% url 'sentry-group' group.organization.slug group.project.slug group.id %}">Aggregate</a></li>
-        <li{% if page == 'tag_list' %} class="active"{% endif %}>
-            <a href="{% url 'sentry-group-tags' group.organization.slug group.project.slug group.id %}">{% trans "Tags" %}</a>
-        </li>
-        <li{% if page == 'event_list' or page == 'event' %} class="active"{% endif %}>
-            <a href="{% url 'sentry-group-events' group.organization.slug group.project.slug group.id %}">{% trans "Samples" %}</a>
-        </li>
-    </ul>
-
-    <div class="hidden-xs">
-        <h6>{% trans "Aggregate Details" %}</h6>
-
-        <dl class="flat">
-            <dt>{% trans "Status:" %}</dt>
-            <dd class="align-right">{{ group.get_status_display|title }}</dd>
-            <dt>{% trans "First Seen:" %}</dt>
-            <dd class="pretty-date align-right" data-datetime="{% localized_datetime group.first_seen "c" %}">{{ group.first_seen|timesince }}</dd>
-            {% if group.active_at and group.active_at != group.first_seen %}
-                <dt>{% trans "Reopened:" %}</dt>
-                <dd class="pretty-date align-right" data-datetime="{% localized_datetime group.active_at "c" %}">{{ group.active_at|timesince }}</dd>
-            {% endif %}
-            <dt>{% trans "Last Seen:" %}</dt>
-            <dd class="pretty-date align-right" data-datetime="{% localized_datetime group.last_seen "c" %}">{{ group.last_seen|timesince }}</dd>
-            {% if group.avg_time_spent %}
-                <dt>{% trans "Avg Duration:" %}</dt>
-                <dd>{% if group.avg_time_spent %}{{ group.avg_time_spent|duration }}{% else %}<em>{% trans "n/a" %}</em>{% endif %}</dd>
-            {% endif %}
-        </dl>
-    </div>
-
-    <div class="hidden-xs">
-      {% for tag in group.get_tags %}
-          {% render_tag_widget group tag %}
-      {% endfor %}
-    </div>
-
-    {% for html in group|get_widgets:request %}
-        {{ html|safe }}
-    {% endfor %}
-{% endblock %}
diff --git a/src/sentry/templates/sentry/groups/event_list.html b/src/sentry/templates/sentry/groups/event_list.html
deleted file mode 100644
index 73ccdd1a67..0000000000
--- a/src/sentry/templates/sentry/groups/event_list.html
+++ /dev/null
@@ -1,25 +0,0 @@
-{% extends "sentry/groups/details.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block inner %}
-    {% paginate event_list from request as event_list per_page EVENTS_PER_PAGE %}
-
-    {% if event_list.objects %}
-        {% url 'sentry-help' as link %}
-        <p class="alert alert-info">{% blocktrans %}This list only contains a portion of all events seen. For more information about how Sentry samples events, see the <a href="{{ link }}">documentation</a>.{% endblocktrans %}</p>
-
-        <ul class="events similar-events">
-            {% for event in event_list.objects %}
-                {% include "sentry/partial/_event.html" %}
-            {% endfor %}
-        </ul>
-
-        {{ event_list.paging }}
-
-    {% else %}
-        <p class="alert alert-notice">{% trans "There are no records recorded for this event." %}</p>
-    {% endif %}
-
-{% endblock %}
diff --git a/src/sentry/templates/sentry/groups/tag_list.html b/src/sentry/templates/sentry/groups/tag_list.html
deleted file mode 100644
index 1cf51ac4f3..0000000000
--- a/src/sentry/templates/sentry/groups/tag_list.html
+++ /dev/null
@@ -1,48 +0,0 @@
-{% extends "sentry/groups/details.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block inner %}
-    {% if tag_list %}
-
-        {% for tag_key, tag_values, values_seen in tag_list %}
-            {% if not forloop.counter|divisibleby:2 %}
-                {% if not forloop.first %}
-                    </div>
-                {% endif %}
-                <div class="row-fluid">
-            {% endif %}
-            <div class="span6">
-                <div class="page-header">
-                    <span class="pull-right"><a href="{% url 'sentry-group-tag-details' group.organization.slug group.project.slug group.id tag_key.key|urlquote %}">More Details</a></span>
-
-                    <h4>{{ tag_key.get_label }} <small>({{ values_seen|small_count }})</small></h4>
-                </div>
-
-                <ul class="tag-list">
-                    {% for tag_value, times_seen, percent in tag_values %}
-                        <li>
-                            <div class="progressbar">
-                                <div style="width:{{ percent }}%;">{{ times_seen }}</div>
-                                <a href="{% url 'sentry-stream' group.organization.slug group.project.slug %}?{{ tag_key.key|urlquote }}={{ tag_value|urlquote }}">
-                                    {{ tag_value }}
-                                    <span>{{ times_seen|small_count }} ({{ percent }}%)</span>
-                                </a>
-                            </div>
-                        </li>
-                    {% endfor %}
-                </ul>
-            </div>
-            {% if forloop.last %}
-                </div>
-            {% endif %}
-        {% endfor %}
-
-    {% else %}
-
-        <p>{% trans "There don't seem to be any tags stored for this event. For more information on how you can tag data, check your client's documentation." %}</p>
-
-    {% endif %}
-
-{% endblock %}
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
index 1ea41467d1..0927514a53 100644
--- a/src/sentry/web/frontend/groups.py
+++ b/src/sentry/web/frontend/groups.py
@@ -13,23 +13,20 @@ from __future__ import absolute_import, division
 
 from django.core.urlresolvers import reverse
 from django.http import (
-    Http404, HttpResponse, HttpResponsePermanentRedirect, HttpResponseRedirect
+    Http404, HttpResponse, HttpResponseRedirect
 )
 from django.shortcuts import get_object_or_404
-from django.utils import timezone
 
 from sentry.api.serializers import serialize
 from sentry.auth import access
 from sentry.constants import MEMBER_USER
-from sentry.db.models import create_or_update
 from sentry.models import (
-    Project, Group, GroupMeta, Event, Activity, TagKey, GroupSeen
+    Project, Group, GroupMeta, Event
 )
 from sentry.plugins import plugins
 from sentry.utils import json
-from sentry.web.decorators import has_access, has_group_access, login_required
-from sentry.web.forms import NewNoteForm
-from sentry.web.helpers import render_to_response, group_is_public
+from sentry.web.decorators import has_access, login_required
+from sentry.web.helpers import render_to_response
 
 
 def render_with_group_context(group, template, context, request=None,
@@ -120,200 +117,6 @@ def wall_display(request, organization, team):
     }, request)
 
 
-def group(request, organization_slug, project_id, group_id, event_id=None):
-    # TODO(dcramer): remove in 7.1 release
-    # Handle redirects from team_slug/project_slug to org_slug/project_slug
-    try:
-        group = Group.objects.get(id=group_id)
-    except Group.DoesNotExist:
-        raise Http404
-
-    if group.project.slug != project_id:
-        raise Http404
-
-    if group.organization.slug == organization_slug:
-        return group_details(
-            request=request,
-            organization_slug=organization_slug,
-            project_id=project_id,
-            group_id=group_id,
-            event_id=event_id,
-        )
-
-    if group.team.slug == organization_slug:
-        if event_id:
-            url = reverse(
-                'sentry-group-event',
-                args=[group.organization.slug, project_id, group_id, event_id],
-            )
-        else:
-            url = reverse(
-                'sentry-group',
-                args=[group.organization.slug, project_id, group_id],
-            )
-        return HttpResponsePermanentRedirect(url)
-
-    raise Http404
-
-
-@has_group_access(allow_public=True)
-def group_details(request, organization, project, group, event_id=None):
-    # It's possible that a message would not be created under certain
-    # circumstances (such as a post_save signal failing)
-    if event_id:
-        event = get_object_or_404(group.event_set, id=event_id)
-    else:
-        event = group.get_latest_event() or Event()
-
-    Event.objects.bind_nodes([event], 'data')
-    GroupMeta.objects.populate_cache([group])
-
-    # bind params to group in case they get hit
-    event.group = group
-    event.project = project
-
-    if request.POST.get('o') == 'note' and request.user.is_authenticated():
-        add_note_form = NewNoteForm(request.POST)
-        if add_note_form.is_valid():
-            add_note_form.save(event, request.user)
-            return HttpResponseRedirect(request.path)
-    else:
-        add_note_form = NewNoteForm()
-
-    if request.user.is_authenticated() and project.has_access(request.user):
-        # update that the user has seen this group
-        create_or_update(
-            GroupSeen,
-            group=group,
-            user=request.user,
-            project=project,
-            defaults={
-                'last_seen': timezone.now(),
-            }
-        )
-
-    activity_qs = Activity.objects.filter(
-        group=group,
-    ).order_by('-datetime').select_related('user')
-
-    # filter out dupe activity items
-    activity_items = set()
-    activity = []
-    for item in activity_qs[:20]:
-        sig = (item.event_id, item.type, item.ident, item.user_id)
-        # TODO: we could just generate a signature (hash(text)) for notes
-        # so there's no special casing
-        if item.type == Activity.NOTE:
-            activity.append(item)
-        elif sig not in activity_items:
-            activity_items.add(sig)
-            activity.append(item)
-
-    activity.append(Activity(
-        project=project, group=group, type=Activity.FIRST_SEEN,
-        datetime=group.first_seen))
-
-    # trim to latest 5
-    activity = activity[:7]
-
-    seen_by = sorted(filter(lambda ls: ls[0] != request.user and ls[0].email, [
-        (gs.user, gs.last_seen)
-        for gs in GroupSeen.objects.filter(
-            group=group
-        ).select_related('user')
-    ]), key=lambda ls: ls[1], reverse=True)
-    seen_by_extra = len(seen_by) - 5
-    if seen_by_extra < 0:
-        seen_by_extra = 0
-    seen_by_faces = seen_by[:5]
-
-    context = {
-        'add_note_form': add_note_form,
-        'page': 'details',
-        'activity': activity,
-        'seen_by': seen_by,
-        'seen_by_faces': seen_by_faces,
-        'seen_by_extra': seen_by_extra,
-    }
-
-    is_public = group_is_public(group, request.user)
-
-    if is_public:
-        template = 'sentry/groups/public_details.html'
-        context['PROJECT_LIST'] = [project]
-    else:
-        template = 'sentry/groups/details.html'
-
-    return render_with_group_context(
-        group, template, context, request,
-        event=event, is_public=is_public)
-
-
-@has_group_access
-def group_tag_list(request, organization, project, group):
-    def percent(total, this):
-        return int(this / total * 100)
-
-    GroupMeta.objects.populate_cache([group])
-
-    queryset = TagKey.objects.filter(
-        project=project,
-        key__in=[t['key'] for t in group.get_tags()],
-    )
-
-    # O(N) db access
-    tag_list = []
-    for tag_key in queryset:
-        tag_list.append((tag_key, [
-            (value, times_seen, percent(group.times_seen, times_seen))
-            for (value, times_seen, first_seen, last_seen)
-            in group.get_unique_tags(tag_key.key)[:5]
-        ], group.get_unique_tags(tag_key.key).count()))
-
-    return render_with_group_context(group, 'sentry/groups/tag_list.html', {
-        'page': 'tag_list',
-        'tag_list': tag_list,
-    }, request)
-
-
-@has_group_access
-def group_tag_details(request, organization, project, group, tag_name):
-    GroupMeta.objects.populate_cache([group])
-
-    sort = request.GET.get('sort')
-    if sort == 'date':
-        order_by = '-last_seen'
-    elif sort == 'new':
-        order_by = '-first_seen'
-    else:
-        order_by = '-times_seen'
-
-    return render_with_group_context(group, 'sentry/plugins/bases/tag/index.html', {
-        'title': tag_name.replace('_', ' ').title(),
-        'tag_name': tag_name,
-        'unique_tags': group.get_unique_tags(tag_name, order_by=order_by),
-        'page': 'tag_details',
-    }, request)
-
-
-@has_group_access
-def group_event_list(request, organization, project, group):
-    # TODO: we need the event data to bind after we limit
-    event_list = group.event_set.all().order_by('-datetime')[:100]
-
-    for event in event_list:
-        event.project = project
-        event.group = group
-
-    GroupMeta.objects.populate_cache([group])
-    Event.objects.bind_nodes(event_list, 'data')
-
-    return render_with_group_context(group, 'sentry/groups/event_list.html', {
-        'event_list': event_list,
-        'page': 'event_list',
-    }, request)
-
-
 @has_access(MEMBER_USER)
 def group_event_details_json(request, organization, project, group_id, event_id_or_latest):
     group = get_object_or_404(Group, pk=group_id, project=project)
diff --git a/tests/sentry/web/frontend/groups/tests.py b/tests/sentry/web/frontend/groups/tests.py
index 14e1a2ca2b..aede69268a 100644
--- a/tests/sentry/web/frontend/groups/tests.py
+++ b/tests/sentry/web/frontend/groups/tests.py
@@ -4,12 +4,9 @@ from __future__ import absolute_import
 
 import json
 
-from datetime import timedelta
 from django.core.urlresolvers import reverse
-from django.utils import timezone
 from exam import fixture
 
-from sentry.models import GroupSeen, Group
 from sentry.testutils import TestCase
 
 
@@ -26,15 +23,7 @@ class GroupDetailsTest(TestCase):
         self.login_as(self.user)
         resp = self.client.get(self.path)
         assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/groups/details.html')
-        assert resp.context['group'] == self.group
-        assert resp.context['project'] == self.project
-        assert resp.context['team'] == self.team
-        assert resp.context['organization'] == self.organization
-
-        # ensure we've marked the group as seen
-        assert GroupSeen.objects.filter(
-            group=self.group, user=self.user).exists()
+        self.assertTemplateUsed(resp, 'sentry/bases/react.html')
 
 
 class GroupListTest(TestCase):
@@ -45,35 +34,11 @@ class GroupListTest(TestCase):
             'project_id': self.project.slug,
         })
 
-    def setUp(self):
-        super(GroupListTest, self).setUp()
-        later = timezone.now()
-        now = later - timedelta(hours=1)
-        past = now - timedelta(hours=1)
-
-        self.group1 = Group.objects.create(
-            project=self.project,
-            checksum='a' * 32,
-            last_seen=now,
-            first_seen=now,
-            times_seen=5,
-        )
-        self.group2 = Group.objects.create(
-            project=self.project,
-            checksum='b' * 32,
-            last_seen=later,
-            first_seen=past,
-            times_seen=50,
-        )
-
     def test_does_render(self):
         self.login_as(self.user)
         resp = self.client.get(self.path)
         assert resp.status_code == 200
         self.assertTemplateUsed(resp, 'sentry/bases/react.html')
-        assert resp.context['project'] == self.project
-        assert resp.context['team'] == self.team
-        assert resp.context['organization'] == self.organization
 
 
 class GroupEventListTest(TestCase):
@@ -86,23 +51,10 @@ class GroupEventListTest(TestCase):
         })
 
     def test_does_render(self):
-        event = self.create_event(
-            event_id='a' * 32, datetime=timezone.now() - timedelta(minutes=1))
-        event2 = self.create_event(
-            event_id='b' * 32, datetime=timezone.now())
-
         self.login_as(self.user)
         resp = self.client.get(self.path)
         assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/groups/event_list.html')
-        assert resp.context['project'] == self.project
-        assert resp.context['team'] == self.team
-        assert resp.context['group'] == self.group
-        assert resp.context['organization'] == self.organization
-        event_list = resp.context['event_list']
-        assert len(event_list) == 2
-        assert event_list[0] == event2
-        assert event_list[1] == event
+        self.assertTemplateUsed(resp, 'sentry/bases/react.html')
 
 
 class GroupTagListTest(TestCase):
@@ -118,12 +70,7 @@ class GroupTagListTest(TestCase):
         self.login_as(self.user)
         resp = self.client.get(self.path)
         assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/groups/tag_list.html')
-        assert 'tag_list' in resp.context
-        assert resp.context['project'] == self.project
-        assert resp.context['team'] == self.team
-        assert resp.context['group'] == self.group
-        assert resp.context['organization'] == self.organization
+        self.assertTemplateUsed(resp, 'sentry/bases/react.html')
 
 
 class GroupEventDetailsTest(TestCase):
@@ -140,12 +87,7 @@ class GroupEventDetailsTest(TestCase):
         self.login_as(self.user)
         resp = self.client.get(self.path)
         assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/groups/details.html')
-        assert resp.context['project'] == self.project
-        assert resp.context['team'] == self.team
-        assert resp.context['group'] == self.group
-        assert resp.context['event'] == self.event
-        assert resp.context['organization'] == self.organization
+        self.assertTemplateUsed(resp, 'sentry/bases/react.html')
 
 
 class GroupEventJsonTest(TestCase):
