commit f26b81b5bbf50dddf29b3faed145af94c36f849e
Author: Dora <dora.l.chan@gmail.com>
Date:   Fri Jun 12 12:35:53 2020 -0700

    feat(perf-summary): adding user misery bar (#19212)
    
    * added user misery score bar
    
    * added user misery bar
    
    * Refactor userMisery into its own component so it can be re-used in both userStats and fieldRenderers
    
    * Add storybook stories for UserMisery
    
    * Do not pass disabled state into tooltip as it already has a default value
    
    * Move UserMisery story under ScoreBar to make it easier to find
    
    * adding a tooltip for user misery
    
    * hide baseline duration for now
    
    Co-authored-by: Dora Chan <dora.lchan@gmail.com>
    Co-authored-by: k-fish <k-fish@users.noreply.github.com>

diff --git a/docs-ui/components/userMisery.stories.js b/docs-ui/components/userMisery.stories.js
new file mode 100644
index 0000000000..01c325692c
--- /dev/null
+++ b/docs-ui/components/userMisery.stories.js
@@ -0,0 +1,70 @@
+import React from 'react';
+import {storiesOf} from '@storybook/react';
+import {withInfo} from '@storybook/addon-info';
+import styled from '@emotion/styled';
+
+import UserMisery from 'app/components/userMisery';
+
+storiesOf('Other|ScoreBar/UserMisery', module)
+  .add(
+    'default',
+    withInfo(
+      'Visualization of user misery to allow users to more easily understand performance at a glance'
+    )(() => (
+      <Container>
+        <UserMisery
+          bars={10}
+          barHeight={20}
+          miseryLimit={300}
+          miserableUsers={75}
+          totalUsers={100}
+        />
+      </Container>
+    ))
+  )
+  .add(
+    'large',
+    withInfo('Both length and height of the component can be modified')(() => (
+      <Container>
+        <UserMisery
+          bars={40}
+          barHeight={30}
+          miseryLimit={300}
+          miserableUsers={75}
+          totalUsers={100}
+        />
+      </Container>
+    ))
+  )
+  .add(
+    'empty',
+    withInfo('Empty state')(() => (
+      <Container>
+        <UserMisery
+          bars={10}
+          barHeight={20}
+          miseryLimit={300}
+          miserableUsers={0}
+          totalUsers={0}
+        />
+      </Container>
+    ))
+  )
+  .add(
+    'full',
+    withInfo('Full state')(() => (
+      <Container>
+        <UserMisery
+          bars={10}
+          barHeight={20}
+          miseryLimit={300}
+          miserableUsers={1000}
+          totalUsers={1000}
+        />
+      </Container>
+    ))
+  );
+
+const Container = styled('div')`
+  display: inline-block;
+`;
diff --git a/src/sentry/static/sentry/app/components/charts/styles.tsx b/src/sentry/static/sentry/app/components/charts/styles.tsx
index 20ecf8f66e..3096d46896 100644
--- a/src/sentry/static/sentry/app/components/charts/styles.tsx
+++ b/src/sentry/static/sentry/app/components/charts/styles.tsx
@@ -20,16 +20,13 @@ export const SubHeading = styled('h3')`
 `;
 
 export const SectionHeading = styled('h4')`
-  display: grid;
+  display: inline-grid;
   grid-auto-flow: column;
-  grid-gap: ${space(1.5)};
-  align-items: center;
-
+  grid-gap: ${space(1)};
   color: ${p => p.theme.gray600};
   font-size: ${p => p.theme.fontSizeMedium};
   margin: ${space(1)} 0;
-  padding-right: ${space(1)};
-  line-height: 1.2;
+  line-height: 1.3;
 `;
 
 export const SectionValue = styled('span')`
@@ -40,10 +37,13 @@ export const SectionValue = styled('span')`
 
 export const InlineContainer = styled('div')`
   display: flex;
-  flex-direction: row;
   align-items: center;
   margin-right: ${space(2)};
 
+  > h4 {
+    margin-right: ${space(1)};
+  }
+
   &:last-child {
     margin-right: 0;
   }
diff --git a/src/sentry/static/sentry/app/components/questionTooltip.tsx b/src/sentry/static/sentry/app/components/questionTooltip.tsx
index 24096e925c..3aaa22d76b 100644
--- a/src/sentry/static/sentry/app/components/questionTooltip.tsx
+++ b/src/sentry/static/sentry/app/components/questionTooltip.tsx
@@ -16,7 +16,7 @@ const QuestionIconContainer = styled('span')<ContainerProps>`
   line-height: ${p => p.theme.iconSizes[p.size] ?? p.size};
 
   & svg {
-    transition: 0.15s color;
+    transition: 120ms color;
     color: ${p => p.theme.gray400};
 
     &:hover {
diff --git a/src/sentry/static/sentry/app/components/userMisery.tsx b/src/sentry/static/sentry/app/components/userMisery.tsx
new file mode 100644
index 0000000000..df67556cd0
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/userMisery.tsx
@@ -0,0 +1,47 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+
+import {tct} from 'app/locale';
+import ScoreBar from 'app/components/scoreBar';
+import Tooltip from 'app/components/tooltip';
+import theme from 'app/utils/theme';
+
+type Props = {
+  bars: number;
+  barHeight: number;
+  miserableUsers: number;
+  totalUsers: number;
+  miseryLimit: number;
+};
+
+function UserMisery(props: Props) {
+  const {bars, barHeight, miserableUsers, miseryLimit, totalUsers} = props;
+
+  const palette = new Array(bars).fill(theme.purpleDarkest);
+  const score = Math.floor((miserableUsers / Math.max(totalUsers, 1)) * palette.length);
+  const miseryPercentage = ((100 * miserableUsers) / Math.max(totalUsers, 1)).toFixed(2);
+
+  const title = tct(
+    '[affectedUsers] out of [totalUsers] ([miseryPercentage]%) unique users waited more than [duration]ms',
+    {
+      affectedUsers: miserableUsers,
+      totalUsers,
+      miseryPercentage,
+      duration: 4 * miseryLimit,
+    }
+  );
+  return (
+    <Tooltip title={title} containerDisplayMode="block">
+      <ScoreBar size={barHeight} score={score} palette={palette} radius={0} />
+    </Tooltip>
+  );
+}
+
+UserMisery.propTypes = {
+  bars: PropTypes.number,
+  miserableUsers: PropTypes.number,
+  totalUsers: PropTypes.number,
+  miseryLimit: PropTypes.number,
+};
+
+export default UserMisery;
diff --git a/src/sentry/static/sentry/app/utils/discover/fieldRenderers.tsx b/src/sentry/static/sentry/app/utils/discover/fieldRenderers.tsx
index dce2ef9e14..0672bd7ed8 100644
--- a/src/sentry/static/sentry/app/utils/discover/fieldRenderers.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/fieldRenderers.tsx
@@ -4,24 +4,22 @@ import partial from 'lodash/partial';
 import styled from '@emotion/styled';
 
 import {Organization} from 'app/types';
-import {t, tct} from 'app/locale';
+import {t} from 'app/locale';
 import Count from 'app/components/count';
 import Duration from 'app/components/duration';
 import ProjectBadge from 'app/components/idBadge/projectBadge';
-import ScoreBar from 'app/components/scoreBar';
-import Tooltip from 'app/components/tooltip';
 import UserBadge from 'app/components/idBadge/userBadge';
+import UserMisery from 'app/components/userMisery';
 import Version from 'app/components/version';
 import getDynamicText from 'app/utils/getDynamicText';
 import {formatFloat, formatPercentage} from 'app/utils/formatters';
 import {getAggregateAlias, AGGREGATIONS} from 'app/utils/discover/fields';
 import Projects from 'app/utils/projects';
-import theme from 'app/utils/theme';
 
 import {
+  BarContainer,
   Container,
   EventId,
-  BarContainer,
   NumberContainer,
   OverflowLink,
   StyledDateTime,
@@ -299,25 +297,17 @@ const SPECIAL_FUNCTIONS: SpecialFunctions = {
       );
     }
 
-    const palette = new Array(10).fill(theme.purpleDarkest);
-    const score = Math.floor((userMisery / Math.max(uniqueUsers, 1)) * palette.length);
     const miseryLimit = parseInt(userMiseryField.split('_').pop() || '', 10);
-    const miseryPercentage = ((100 * userMisery) / Math.max(uniqueUsers, 1)).toFixed(2);
 
-    const title = tct(
-      '[affectedUsers] out of [totalUsers] ([miseryPercentage]%) unique users waited more than [duration]ms',
-      {
-        affectedUsers: userMisery,
-        totalUsers: uniqueUsers,
-        miseryPercentage,
-        duration: 4 * miseryLimit,
-      }
-    );
     return (
       <BarContainer>
-        <Tooltip title={title} disabled={false} containerDisplayMode="block">
-          <ScoreBar size={20} score={score} palette={palette} radius={0} />
-        </Tooltip>
+        <UserMisery
+          bars={10}
+          barHeight={20}
+          miseryLimit={miseryLimit}
+          totalUsers={uniqueUsers}
+          miserableUsers={userMisery}
+        />
       </BarContainer>
     );
   },
diff --git a/src/sentry/static/sentry/app/views/performance/charts/footer.tsx b/src/sentry/static/sentry/app/views/performance/charts/footer.tsx
index 5c4a65da70..4184400513 100644
--- a/src/sentry/static/sentry/app/views/performance/charts/footer.tsx
+++ b/src/sentry/static/sentry/app/views/performance/charts/footer.tsx
@@ -124,14 +124,14 @@ class ChartFooter extends React.Component<Props, State> {
         </InlineContainer>
         <InlineContainer>
           <OptionSelector
-            title={t('Left')}
+            title={t('Display 1')}
             selected={leftAxis}
             options={leftOptions}
             onChange={(val: string) => this.handleSelectorChange('left', val)}
             menuWidth="200px"
           />
           <OptionSelector
-            title={t('Right')}
+            title={t('Display 2')}
             selected={rightAxis}
             options={rightOptions}
             onChange={(val: string) => this.handleSelectorChange('right', val)}
diff --git a/src/sentry/static/sentry/app/views/performance/constants.tsx b/src/sentry/static/sentry/app/views/performance/constants.tsx
index ddd052c584..c75e35e2fe 100644
--- a/src/sentry/static/sentry/app/views/performance/constants.tsx
+++ b/src/sentry/static/sentry/app/views/performance/constants.tsx
@@ -12,6 +12,9 @@ export const PERFORMANCE_TERMS: Record<string, string> = {
   p50: t('p50 indicates the duration that 50% of transactions are faster than.'),
   p95: t('p95 indicates the duration that 95% of transactions are faster than.'),
   p99: t('p99 indicates the duration that 99% of transactions are faster than.'),
+  userMisery: t(
+    'User misery is the percentage of users who are experiencing load times 4x the base apdex rate of 300ms.'
+  ),
 };
 
 export const TOP_TRANSACTION_LIMIT = 5;
diff --git a/src/sentry/static/sentry/app/views/performance/styles.tsx b/src/sentry/static/sentry/app/views/performance/styles.tsx
index 507514061b..a3ac961cb1 100644
--- a/src/sentry/static/sentry/app/views/performance/styles.tsx
+++ b/src/sentry/static/sentry/app/views/performance/styles.tsx
@@ -31,14 +31,13 @@ export const HeaderContainer = styled('div')`
 export const HeaderTitle = styled('h3')`
   display: inline-grid;
   grid-auto-flow: column;
-  grid-gap: ${space(1.5)};
-  align-items: center;
-
+  grid-gap: ${space(1)};
   font-size: ${p => p.theme.fontSizeLarge};
   font-weight: normal;
-  line-height: 1.2;
   color: ${p => p.theme.gray700};
-  padding: 0 ${space(1)};
+  padding-left: ${space(1)};
+  line-height: 1.1;
+  margin-bottom: 0;
 `;
 
 export const HeaderTitleLegend = styled(HeaderTitle)`
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/sidebarCharts.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/sidebarCharts.tsx
index 257cf50a28..aa2baf53a5 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/sidebarCharts.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/sidebarCharts.tsx
@@ -218,7 +218,7 @@ function SidebarCharts({api, eventView, organization, router}: Props) {
 
 const RelativeBox = styled('div')`
   position: relative;
-  margin-bottom: ${space(2)};
+  margin-bottom: ${space(1)};
 `;
 
 const ChartTitle = styled(SectionHeading)<{top: string}>`
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/userStats.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/userStats.tsx
index 581113aa8b..f053e39538 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/userStats.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/userStats.tsx
@@ -8,6 +8,10 @@ import EventView from 'app/utils/discover/eventView';
 import {t} from 'app/locale';
 import {getFieldRenderer} from 'app/utils/discover/fieldRenderers';
 import DiscoverQuery from 'app/utils/discover/discoverQuery';
+import QuestionTooltip from 'app/components/questionTooltip';
+import {SectionHeading} from 'app/components/charts/styles';
+import UserMisery from 'app/components/userMisery';
+import {PERFORMANCE_TERMS} from 'app/views/performance/constants';
 
 type Props = {
   location: Location;
@@ -19,6 +23,8 @@ type Results = {
   [key: string]: React.ReactNode;
 } | null;
 
+const userMiseryLimit = 300;
+
 class UserStats extends React.Component<Props> {
   generateUserStatsEventView(eventView: EventView): EventView {
     // narrow the search conditions of the Performance Summary event view
@@ -31,7 +37,11 @@ class UserStats extends React.Component<Props> {
       },
       {
         kind: 'function',
-        function: ['user_misery', '300', undefined],
+        function: ['user_misery', `${userMiseryLimit}`, undefined],
+      },
+      {
+        kind: 'function',
+        function: ['count_unique', '', undefined],
       },
     ]);
 
@@ -40,17 +50,46 @@ class UserStats extends React.Component<Props> {
     return eventView;
   }
 
-  renderContents(stats: Results) {
+  renderContents(stats: Results, row?) {
+    let userMisery = <StatNumber>{'\u2014'}</StatNumber>;
+
+    if (stats) {
+      const miserableUsers = Number(row[`user_misery_${userMiseryLimit}`]);
+      const totalUsers = Number(row.count_unique);
+      if (!isNaN(miserableUsers) && !isNaN(totalUsers)) {
+        userMisery = (
+          <UserMisery
+            bars={40}
+            barHeight={30}
+            miseryLimit={userMiseryLimit}
+            totalUsers={totalUsers}
+            miserableUsers={miserableUsers}
+          />
+        );
+      }
+    }
+
     return (
       <Container>
         <div>
-          <StatTitle>{t('Apdex Score')}</StatTitle>
+          <SectionHeading>{t('Apdex Score')}</SectionHeading>
           <StatNumber>{!stats ? '\u2014' : stats['apdex()']}</StatNumber>
         </div>
-        <div>
-          <StatTitle>{t('User Misery')}</StatTitle>
-          <StatNumber>{!stats ? '\u2014' : stats['user_misery(300)']}</StatNumber>
-        </div>
+        {/* <div>
+          <SectionHeading>{t('Baseline Duration')}</SectionHeading>
+          <StatNumber>{'\u2014'}</StatNumber>
+        </div> */}
+        <UserMiseryContainer>
+          <SectionHeading>
+            {t('User Misery')}
+            <QuestionTooltip
+              position="top"
+              title={PERFORMANCE_TERMS.userMisery}
+              size="sm"
+            />
+          </SectionHeading>
+          {userMisery}
+        </UserMiseryContainer>
       </Container>
     );
   }
@@ -92,7 +131,7 @@ class UserStats extends React.Component<Props> {
 
             return acc;
           }, {});
-          return this.renderContents(stats);
+          return this.renderContents(stats, row);
         }}
       </DiscoverQuery>
     );
@@ -100,22 +139,23 @@ class UserStats extends React.Component<Props> {
 }
 
 const Container = styled('div')`
-  margin-bottom: ${space(4)};
-  display: flex;
-  > * + * {
-    margin-left: ${space(4)};
-  }
+  display: grid;
+  grid-template-columns: 1fr 1fr;
+  grid-row-gap: ${space(4)};
+  margin-bottom: 40px;
 `;
 
-const StatTitle = styled('h4')`
-  font-size: ${p => p.theme.fontSizeMedium};
-  color: ${p => p.theme.gray600};
-  margin: ${space(1)} 0 ${space(1.5)} 0;
+const UserMiseryContainer = styled('div')`
+  grid-column: 1/3;
 `;
 
 const StatNumber = styled('div')`
   font-size: 32px;
   color: ${p => p.theme.gray700};
+
+  > div {
+    text-align: left;
+  }
 `;
 
 export default UserStats;
