commit 2b7824adcda91590c97c181847bbd3cfbce60c78
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu Mar 7 10:22:47 2019 -0800

    ref(integrations): GitHub Refresh token if compare_commits hits a 404  (#12286)
    
    * Added mock get_jwt so that you can run the test_repository file on its own successfully.
    
    * Added refresh token if 404 from compare_commits.
    
    * checked e.code instead.
    
    * Added installation.raise_error. It was missing if there's an apierror that's not a 404.

diff --git a/src/sentry/integrations/github/client.py b/src/sentry/integrations/github/client.py
index 38070ca03e..ef4abb624b 100644
--- a/src/sentry/integrations/github/client.py
+++ b/src/sentry/integrations/github/client.py
@@ -94,7 +94,7 @@ class GitHubClientMixin(ApiClient):
             }
         return self._request(method, path, headers=headers, data=data, params=params)
 
-    def get_token(self):
+    def get_token(self, force_refresh=False):
         """
         Get token retrieves the active access token from the integration model.
         Should the token have expried, a new token will be generated and
@@ -106,7 +106,7 @@ class GitHubClientMixin(ApiClient):
         if expires_at is not None:
             expires_at = datetime.strptime(expires_at, '%Y-%m-%dT%H:%M:%S')
 
-        if not token or expires_at < datetime.utcnow():
+        if not token or expires_at < datetime.utcnow() or force_refresh:
             res = self.create_token()
             token = res['token']
             expires_at = datetime.strptime(
diff --git a/src/sentry/integrations/github/repository.py b/src/sentry/integrations/github/repository.py
index 24319920ab..55083a02ad 100644
--- a/src/sentry/integrations/github/repository.py
+++ b/src/sentry/integrations/github/repository.py
@@ -56,6 +56,16 @@ class GitHubRepositoryProvider(providers.IntegrationRepositoryProvider):
         }
 
     def compare_commits(self, repo, start_sha, end_sha):
+        def eval_commits(client):
+            # use config name because that is kept in sync via webhooks
+            name = repo.config['name']
+            if start_sha is None:
+                res = client.get_last_commits(name, end_sha)
+                return self._format_commits(client, name, res[:20])
+            else:
+                res = client.compare_commits(name, start_sha, end_sha)
+                return self._format_commits(client, name, res['commits'])
+
         integration_id = repo.integration_id
         if integration_id is None:
             raise NotImplementedError('GitHub apps requires an integration id to fetch commits')
@@ -63,15 +73,16 @@ class GitHubRepositoryProvider(providers.IntegrationRepositoryProvider):
         installation = integration.get_installation(repo.organization_id)
         client = installation.get_client()
 
-        # use config name because that is kept in sync via webhooks
-        name = repo.config['name']
         try:
-            if start_sha is None:
-                res = client.get_last_commits(name, end_sha)
-                return self._format_commits(client, name, res[:20])
-            else:
-                res = client.compare_commits(name, start_sha, end_sha)
-                return self._format_commits(client, name, res['commits'])
+            return eval_commits(client)
+        except ApiError as e:
+            if e.code == 404:
+                try:
+                    client.get_token(force_refresh=True)
+                    return eval_commits(client)
+                except Exception as e:
+                    installation.raise_error(e)
+            installation.raise_error(e)
         except Exception as e:
             installation.raise_error(e)
 
diff --git a/tests/sentry/integrations/github/test_repository.py b/tests/sentry/integrations/github/test_repository.py
index 23627d2d52..cc8e62df8a 100644
--- a/tests/sentry/integrations/github/test_repository.py
+++ b/tests/sentry/integrations/github/test_repository.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import datetime
+import mock
 import responses
 import pytest
 
@@ -30,22 +31,29 @@ def stub_installation_token():
 
 
 class GitHubAppsProviderTest(PluginTestCase):
+    def setUp(self):
+        super(GitHubAppsProviderTest, self).setUp()
+        self.organization = self.create_organization()
+        self.integration = Integration.objects.create(
+            provider='github',
+            external_id='654321',
+        )
+
+    def tearDown(self):
+        super(GitHubAppsProviderTest, self).tearDown()
+        responses.reset()
+
     @fixture
     def provider(self):
         return GitHubRepositoryProvider('integrations:github')
 
     @fixture
     def repository(self):
-        organization = self.create_organization()
-        integration = Integration.objects.create(
-            provider='github',
-            external_id='654321',
-        )
         return Repository.objects.create(
             name='getsentry/example-repo',
             provider='integrations:github',
-            organization_id=organization.id,
-            integration_id=integration.id,
+            organization_id=self.organization.id,
+            integration_id=self.integration.id,
             url='https://github.com/getsentry/example-repo',
             config={'name': 'getsentry/example-repo'},
         )
@@ -74,8 +82,9 @@ class GitHubAppsProviderTest(PluginTestCase):
             'url': 'https://github.com/getsentry/example-repo',
         }
 
+    @mock.patch('sentry.integrations.github.client.get_jwt', return_value='jwt_token_1')
     @responses.activate
-    def test_compare_commits_no_start(self):
+    def test_compare_commits_no_start(self, get_jwt):
         stub_installation_token()
         responses.add(
             responses.GET,
@@ -102,8 +111,9 @@ class GitHubAppsProviderTest(PluginTestCase):
         with pytest.raises(IntegrationError):
             self.provider.compare_commits(self.repository, None, 'abcdef')
 
+    @mock.patch('sentry.integrations.github.client.get_jwt', return_value='jwt_token_1')
     @responses.activate
-    def test_compare_commits(self):
+    def test_compare_commits(self, get_jwt):
         stub_installation_token()
         responses.add(
             responses.GET,
@@ -119,8 +129,9 @@ class GitHubAppsProviderTest(PluginTestCase):
         for commit in result:
             assert_commit_shape(commit)
 
+    @mock.patch('sentry.integrations.github.client.get_jwt', return_value='jwt_token_1')
     @responses.activate
-    def test_compare_commits_patchset_handling(self):
+    def test_compare_commits_patchset_handling(self, get_jwt):
         stub_installation_token()
         responses.add(
             responses.GET,
@@ -152,6 +163,49 @@ class GitHubAppsProviderTest(PluginTestCase):
         with pytest.raises(IntegrationError):
             self.provider.compare_commits(self.repository, 'xyz123', 'abcdef')
 
+    @mock.patch('sentry.integrations.github.client.get_jwt', return_value='jwt_token_1')
+    @responses.activate
+    def test_compare_commits_force_refresh(self, get_jwt):
+        stub_installation_token()
+        ten_hours = datetime.datetime.utcnow() + datetime.timedelta(hours=10)
+        self.integration.metadata = {
+            'access_token': 'old-access-token',
+            'expires_at': ten_hours.replace(microsecond=0).isoformat()
+        }
+        self.integration.save()
+        responses.add(
+            responses.GET,
+            'https://api.github.com/repos/getsentry/example-repo/compare/xyz123...abcdef',
+            status=404,
+            body='GitHub returned a 404 Not Found error.'
+        )
+        responses.add(
+            responses.GET,
+            'https://api.github.com/repos/getsentry/example-repo/compare/xyz123...abcdef',
+            json=json.loads(COMPARE_COMMITS_EXAMPLE)
+        )
+        responses.add(
+            responses.GET,
+            'https://api.github.com/repos/getsentry/example-repo/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
+            json=json.loads(GET_COMMIT_EXAMPLE)
+        )
+
+        result = self.provider.compare_commits(self.repository, 'xyz123', 'abcdef')
+        for commit in result:
+            assert_commit_shape(commit)
+
+        # assert token was refreshed
+        assert Integration.objects.get(
+            id=self.integration.id).metadata['access_token'] == 'v1.install-token'
+
+        # compare_commits gives 400, token was refreshed, and compare_commits gives 200
+        assert responses.calls[0].response.url == u'https://api.github.com/repos/getsentry/example-repo/compare/xyz123...abcdef'
+        assert responses.calls[0].response.status_code == 404
+        assert responses.calls[1].response.url == u'https://api.github.com/installations/654321/access_tokens'
+        assert responses.calls[1].response.status_code == 200
+        assert responses.calls[2].response.url == u'https://api.github.com/repos/getsentry/example-repo/compare/xyz123...abcdef'
+        assert responses.calls[2].response.status_code == 200
+
     def test_pull_request_url(self):
         pull = PullRequest(key=99)
         result = self.provider.pull_request_url(self.repository, pull)
