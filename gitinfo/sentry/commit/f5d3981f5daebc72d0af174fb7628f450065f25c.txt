commit f5d3981f5daebc72d0af174fb7628f450065f25c
Author: Colleen O'Rourke <elena.colleen@gmail.com>
Date:   Tue May 1 11:52:07 2018 -0700

    fix(bulk delete): Allow deletion of 1000 issues from UI (#8116)
    
    * fix(bulk delete): Allow deletion of 1000 issues
    Resolving, removing from bookmarks, and changing status works for up to 1000 issues, and the API endpoint support this as well. Update UI to allow for this as well.

diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index b0c7f55cdf..7680661033 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -224,7 +224,6 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint, EnvironmentMixin):
 
     def _search(self, request, project, extra_query_kwargs=None):
         query_kwargs = self._build_query_params_from_request(request, project)
-
         if extra_query_kwargs is not None:
             assert 'environment' not in extra_query_kwargs
             query_kwargs.update(extra_query_kwargs)
@@ -241,7 +240,6 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint, EnvironmentMixin):
             result = CursorResult([], None, None, hits=0, max_hits=1000)
         else:
             result = search.query(**query_kwargs)
-
         return result, query_kwargs
 
     def _subscribe_and_assign_issue(self, acting_user, group, result):
@@ -894,10 +892,18 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint, EnvironmentMixin):
                 )
             )
         else:
-            # missing any kind of filter
-            return Response(
-                {"detail": "You must specify a list of IDs for this operation"}, status=400
-            )
+            try:
+                # bulk mutations are limited to 1000 items
+                # TODO(dcramer): it'd be nice to support more than this, but its
+                # a bit too complicated right now
+                cursor_result, _ = self._search(request, project, {
+                    'limit': 1000,
+                    'paginator_options': {'max_limit': 1000},
+                })
+            except ValidationError as exc:
+                return Response({'detail': six.text_type(exc)}, status=400)
+
+            group_list = list(cursor_result)
 
         if not group_list:
             return Response(status=204)
diff --git a/src/sentry/static/sentry/app/stores/groupStore.jsx b/src/sentry/static/sentry/app/stores/groupStore.jsx
index 4086e210fa..d9c30fed3e 100644
--- a/src/sentry/static/sentry/app/stores/groupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupStore.jsx
@@ -254,6 +254,7 @@ const GroupStore = Reflux.createStore({
   },
 
   onDeleteSuccess(changeId, itemIds, response) {
+    itemIds = this._itemIdsOrAll(itemIds);
     let itemIdSet = new Set(itemIds);
     itemIds.forEach(itemId => {
       delete this.statuses[itemId];
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index faccb03ccc..b56baabcb9 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -5,6 +5,7 @@ import Reflux from 'reflux';
 import {capitalize} from 'lodash';
 import styled from 'react-emotion';
 import {Flex, Box} from 'grid-emotion';
+import {Link} from 'react-router';
 
 import ApiMixin from 'app/mixins/apiMixin';
 import DropdownLink from 'app/components/dropdownLink';
@@ -63,7 +64,18 @@ const getConfirm = (numIssues, allInQuerySelected, query, queryCount) => {
           query={query}
           queryCount={queryCount}
         />
-        {!canBeUndone && <p>{t('This action cannot be undone.')}</p>}
+        {!canBeUndone && (
+          <p>
+            {tct(
+              'Bulk deletion is only recommended for junk data. To clear your stream, consider resolving or ignoring. [link:When should I delete events?]',
+              {
+                link: (
+                  <Link to="https://help.sentry.io/hc/en-us/articles/360003443113-When-should-I-delete-events-" />
+                ),
+              }
+            )}
+          </p>
+        )}
       </div>
     );
   };
@@ -387,7 +399,7 @@ const StreamActions = createReactClass({
                 <MenuItem noAnchor={true}>
                   <ActionLink
                     className="action-delete"
-                    disabled={!anySelected || allInQuerySelected}
+                    disabled={!anySelected}
                     onAction={this.onDelete}
                     shouldConfirm={this.shouldConfirm('delete')}
                     message={confirm('delete', false)}
diff --git a/tests/js/spec/stores/groupStore.spec.jsx b/tests/js/spec/stores/groupStore.spec.jsx
index 50b5cc4dd6..dbd5b52c70 100644
--- a/tests/js/spec/stores/groupStore.spec.jsx
+++ b/tests/js/spec/stores/groupStore.spec.jsx
@@ -81,5 +81,15 @@ describe('GroupStore', function() {
         expect(GroupStore.trigger.firstCall.args[0]).toEqual(new Set([1, 2, 3]));
       });
     });
+
+    describe('onDeleteSuccess()', function() {
+      it("should treat undefined itemIds argument as 'all'", function() {
+        sandbox.stub(GroupStore, 'trigger');
+        GroupStore.onDeleteSuccess(1337, undefined, 'somedata');
+
+        expect(GroupStore.trigger.calledOnce).toBeTruthy();
+        expect(GroupStore.trigger.firstCall.args[0]).toEqual(new Set([1, 2, 3]));
+      });
+    });
   });
 });
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index e442a4555f..1963c56ca2 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -1387,15 +1387,6 @@ class GroupDeleteTest(APITestCase):
             self.project.slug,
         )
 
-    def test_global_is_forbidden(self):
-        self.login_as(user=self.user)
-        response = self.client.delete(
-            self.path, data={
-                'status': 'resolved',
-            }, format='json'
-        )
-        assert response.status_code == 400
-
     def test_delete_by_id(self):
         group1 = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
         group2 = self.create_group(checksum='b' * 32, status=GroupStatus.UNRESOLVED)
@@ -1455,3 +1446,45 @@ class GroupDeleteTest(APITestCase):
 
         assert Group.objects.filter(id=group4.id).exists()
         assert GroupHash.objects.filter(group_id=group4.id).exists()
+
+    def test_bulk_delete(self):
+        groups = []
+        for i in range(10, 41):
+            groups.append(
+                self.create_group(
+                    project=self.project,
+                    checksum=six.binary_type(i) * 16,
+                    status=GroupStatus.RESOLVED))
+
+        for group in groups:
+            GroupHash.objects.create(
+                project=group.project,
+                hash=uuid4().hex,
+                group=group,
+            )
+
+        self.login_as(user=self.user)
+
+        # if query is '' it defaults to is:unresolved
+        url = self.path + '?query='
+        response = self.client.delete(url, format='json')
+
+        assert response.status_code == 204
+
+        for group in groups:
+            assert Group.objects.get(id=group.id).status == GroupStatus.PENDING_DELETION
+            assert not GroupHash.objects.filter(group_id=group.id).exists()
+
+        Group.objects.filter(
+            id__in=[
+                group.id for group in groups]).update(
+            status=GroupStatus.UNRESOLVED)
+
+        with self.tasks():
+            response = self.client.delete(url, format='json')
+
+        assert response.status_code == 204
+
+        for group in groups:
+            assert not Group.objects.filter(id=group.id).exists()
+            assert not GroupHash.objects.filter(group_id=group.id).exists()
