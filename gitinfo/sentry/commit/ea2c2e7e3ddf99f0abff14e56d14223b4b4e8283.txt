commit ea2c2e7e3ddf99f0abff14e56d14223b4b4e8283
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Jun 9 23:32:00 2020 +0200

    doc: Some simple renames of terms (#19239)

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 02d671b9d3..e17925ae15 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1755,7 +1755,7 @@ SENTRY_BUILTIN_SOURCES = {
 }
 
 # Relay
-# List of PKs whitelisted by Sentry.  All relays here are always
+# List of PKs explicitly allowed by Sentry.  All relays here are always
 # registered as internal relays.
 SENTRY_RELAY_WHITELIST_PK = [
     # NOTE (RaduW) This is the relay key for the relay instance used by devservices.
@@ -1765,7 +1765,7 @@ SENTRY_RELAY_WHITELIST_PK = [
 ]
 
 # When open registration is not permitted then only relays in the
-# whitelist can register.
+# list of explicitly allowed relays can register.
 SENTRY_RELAY_OPEN_REGISTRATION = False
 
 # GeoIP
diff --git a/src/sentry/integrations/bitbucket_server/integration.py b/src/sentry/integrations/bitbucket_server/integration.py
index b2f71a7f4f..0a0359219a 100644
--- a/src/sentry/integrations/bitbucket_server/integration.py
+++ b/src/sentry/integrations/bitbucket_server/integration.py
@@ -56,7 +56,7 @@ setup_alert = {
     "text": "Your Bitbucket Server instance must be able to communicate with Sentry."
     " Sentry makes outbound requests from a [static set of IP"
     " addresses](https://docs.sentry.io/ip-ranges/) that you may wish"
-    " to whitelist to support this integration.",
+    " to explicitly allow in your firewall to support this integration.",
 }
 
 metadata = IntegrationMetadata(
diff --git a/src/sentry/integrations/github_enterprise/integration.py b/src/sentry/integrations/github_enterprise/integration.py
index fd698367ea..d6e2f1f0d5 100644
--- a/src/sentry/integrations/github_enterprise/integration.py
+++ b/src/sentry/integrations/github_enterprise/integration.py
@@ -75,7 +75,7 @@ setup_alert = {
     "text": "Your GitHub enterprise instance must be able to communicate with"
     " Sentry. Sentry makes outbound requests from a [static set of IP"
     " addresses](https://docs.sentry.io/ip-ranges/) that you may wish"
-    " to whitelist to support this integration.",
+    " to allow in your firewall to support this integration.",
 }
 
 metadata = IntegrationMetadata(
diff --git a/src/sentry/integrations/jira_server/integration.py b/src/sentry/integrations/jira_server/integration.py
index edede3183c..5e7fcc17ae 100644
--- a/src/sentry/integrations/jira_server/integration.py
+++ b/src/sentry/integrations/jira_server/integration.py
@@ -65,7 +65,7 @@ setup_alert = {
     "text": "Your Jira instance must be able to communicate with Sentry."
     " Sentry makes outbound requests from a [static set of IP"
     " addresses](https://docs.sentry.io/ip-ranges/) that you may wish"
-    " to whitelist to support this integration.",
+    " to allow in your firewall to support this integration.",
 }
 
 
diff --git a/src/sentry/static/sentry/app/components/resultGrid.jsx b/src/sentry/static/sentry/app/components/resultGrid.jsx
index 308babbe01..c226f49847 100644
--- a/src/sentry/static/sentry/app/components/resultGrid.jsx
+++ b/src/sentry/static/sentry/app/components/resultGrid.jsx
@@ -219,7 +219,7 @@ const ResultGrid = createReactClass({
   },
 
   fetchData() {
-    // TODO(dcramer): this should whitelist filters/sortBy/cursor/perPage
+    // TODO(dcramer): this should explicitly allow filters/sortBy/cursor/perPage
     const queryParams = $.extend(
       {},
       this.props.defaultParams,
diff --git a/tests/js/spec/views/releasesV2/list/index.spec.jsx b/tests/js/spec/views/releasesV2/list/index.spec.jsx
index 9eaa506d67..0cc0e0a866 100644
--- a/tests/js/spec/views/releasesV2/list/index.spec.jsx
+++ b/tests/js/spec/views/releasesV2/list/index.spec.jsx
@@ -163,7 +163,7 @@ describe('ReleasesV2List', function() {
     });
   });
 
-  it('calls api with only whitelisted query params', function() {
+  it('calls api with only explicitly permitted query params', function() {
     expect(endpointMock).toHaveBeenCalledWith(
       '/organizations/org-slug/releases/',
       expect.objectContaining({
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index 58a8075c79..c0ed7e8ae5 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -589,7 +589,8 @@ class ParseSearchQueryTest(unittest.TestCase):
         ]
 
     def test_numeric_filter(self):
-        # Numeric format should still return a string if field isn't whitelisted
+        # Numeric format should still return a string if field isn't
+        # allowed
         assert parse_search_query("random_field:>500") == [
             SearchFilter(
                 key=SearchKey(name="random_field"),
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index 14c8ddc9e8..ed961f1068 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -667,7 +667,7 @@ class CrossDomainXmlTest(TestCase):
         assert b'<allow-access-from domain="*" secure="false" />' in resp.content
 
     @mock.patch("sentry.web.api.get_origins")
-    def test_output_with_whitelist(self, get_origins):
+    def test_output_with_allowed_origins(self, get_origins):
         get_origins.return_value = ["disqus.com", "www.disqus.com"]
         resp = self.client.get(self.path)
         get_origins.assert_called_once_with(self.project)
