commit 844de0cf930da241fbe870485c97d579b7069c35
Author: Dan Fuller <dfuller@sentry.io>
Date:   Fri Apr 12 16:54:13 2019 -0700

    refs: Upgrade python-u2flib-server to >= 5.0.0 < 6.0.0 (SEN-209)
    
    This updates us to the latest `python-u2flib-server`. This introduces a new response format that the
    js u2f library doesn't know how to parse, so I've massaged the data so that it can still support
    the responses. I vaguely suspect that this won't entirely solve our issues, because I'm not sure
    that even our upgraded js lirbary actually supports FIDO 1.1, since it doesn't understand the new
    response format. We can test and see if this helps though.

diff --git a/requirements-base.txt b/requirements-base.txt
index 4cc8cde86f..93fa322244 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -46,7 +46,7 @@ pytest>=3.5.0,<3.6.0
 python-dateutil>=2.0.0,<3.0.0
 python-memcached>=1.53,<2.0.0
 python-openid>=2.2
-python-u2flib-server>=4.0.1,<4.1.0
+python-u2flib-server>=5.0.0,<6.0.0
 PyYAML>=3.11,<3.12
 qrcode>=5.2.2,<6.0.0
 querystring_parser>=1.2.3,<2.0.0
diff --git a/src/sentry/api/endpoints/user_authenticator_enroll.py b/src/sentry/api/endpoints/user_authenticator_enroll.py
index f91db81129..477108443f 100644
--- a/src/sentry/api/endpoints/user_authenticator_enroll.py
+++ b/src/sentry/api/endpoints/user_authenticator_enroll.py
@@ -131,6 +131,12 @@ class UserAuthenticatorEnrollEndpoint(UserEndpoint):
 
         if interface_id == 'u2f':
             response['challenge'] = interface.start_enrollment()
+            # XXX: Upgrading python-u2flib-server to 5.0.0 changes the response
+            # format. Our current js u2f library expects the old format, so
+            # massaging the data to include appId here
+            app_id = response['challenge']['appId']
+            for register_request in response['challenge']['registerRequests']:
+                register_request['appId'] = app_id
 
         return Response(response)
 
diff --git a/src/sentry/models/authenticator.py b/src/sentry/models/authenticator.py
index f54ce77b49..22394b0971 100644
--- a/src/sentry/models/authenticator.py
+++ b/src/sentry/models/authenticator.py
@@ -15,7 +15,7 @@ import hashlib
 import six
 
 from u2flib_server import u2f
-from u2flib_server import jsapi as u2f_jsapi
+from u2flib_server.model import DeviceRegistration
 
 from cryptography.exceptions import InvalidSignature, InvalidKey
 
@@ -519,12 +519,16 @@ class U2fInterface(AuthenticatorInterface):
         return {}
 
     def start_enrollment(self):
-        return dict(u2f.start_register(self.u2f_app_id, self.get_u2f_devices()))
+        return u2f.begin_registration(self.u2f_app_id, self.get_u2f_devices()).data_for_client
 
     def get_u2f_devices(self):
         rv = []
         for data in self.config.get('devices') or ():
-            rv.append(u2f_jsapi.DeviceRegistration(data['binding']))
+            # XXX: The previous version of python-u2flib-server didn't store
+            # the `version` in the device binding. Defaulting to `U2F_V2` here
+            # so that we don't break existing u2f registrations.
+            data['binding'].setdefault('version', 'U2F_V2')
+            rv.append(DeviceRegistration(data['binding']))
         return rv
 
     def remove_u2f_device(self, key):
@@ -557,7 +561,7 @@ class U2fInterface(AuthenticatorInterface):
         return rv
 
     def try_enroll(self, enrollment_data, response_data, device_name=None):
-        binding, cert = u2f.complete_register(enrollment_data, response_data, self.u2f_facets)
+        binding, cert = u2f.complete_registration(enrollment_data, response_data, self.u2f_facets)
         devices = self.config.setdefault('devices', [])
         devices.append(
             {
@@ -568,15 +572,25 @@ class U2fInterface(AuthenticatorInterface):
         )
 
     def activate(self, request):
-        return ActivationChallengeResult(
-            challenge=dict(u2f.start_authenticate(self.get_u2f_devices())),
-        )
+        challenge = dict(u2f.begin_authentication(self.u2f_app_id, self.get_u2f_devices()))
+        # XXX: Upgrading python-u2flib-server to 5.0.0 changes the response
+        # format. Our current js u2f library expects the old format, so
+        # massaging the data to include the old `authenticateRequests` key here.
+        authenticate_requests = []
+        for registered_key in challenge['registeredKeys']:
+            authenticate_requests.append({
+                'challenge': challenge['challenge'],
+                'version': registered_key['version'],
+                'keyHandle': registered_key['keyHandle'],
+                'appId': registered_key['appId'],
+            })
+        challenge['authenticateRequests'] = authenticate_requests
+
+        return ActivationChallengeResult(challenge=challenge)
 
     def validate_response(self, request, challenge, response):
         try:
-            counter, touch = u2f.verify_authenticate(
-                self.get_u2f_devices(), challenge, response, self.u2f_facets
-            )
+            u2f.complete_authentication(challenge, response, self.u2f_facets)
         except (InvalidSignature, InvalidKey, StopIteration):
             return False
         return True
