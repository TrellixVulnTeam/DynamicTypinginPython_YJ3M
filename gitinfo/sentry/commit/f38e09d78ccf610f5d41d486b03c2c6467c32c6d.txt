commit f38e09d78ccf610f5d41d486b03c2c6467c32c6d
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Fri Feb 28 12:45:52 2020 -0500

    feat(events): Fetch from /api/0/organizations/:org/events-stats/ with multiple yAxis options (#17334)

diff --git a/src/sentry/static/sentry/app/actionCreators/events.tsx b/src/sentry/static/sentry/app/actionCreators/events.tsx
index 1d65386908..198ed4fa0e 100644
--- a/src/sentry/static/sentry/app/actionCreators/events.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/events.tsx
@@ -1,7 +1,7 @@
 import {Client} from 'app/api';
 import {canIncludePreviousPeriod} from 'app/views/events/utils/canIncludePreviousPeriod';
 import {getPeriod} from 'app/utils/getPeriod';
-import {EventsStats, Organization} from 'app/types';
+import {EventsStats, Organization, YAxisEventsStats} from 'app/types';
 
 const getBaseUrl = (org: Organization) => `/organizations/${org.slug}/events-stats/`;
 
@@ -16,7 +16,7 @@ type Options = {
   includePrevious?: boolean;
   limit?: number;
   query?: string;
-  yAxis?: string;
+  yAxis?: string | string[];
   field?: string[];
   referenceEvent?: string;
 };
@@ -51,7 +51,7 @@ export const doEventsRequest = (
     field,
     referenceEvent,
   }: Options
-): Promise<EventsStats> => {
+): Promise<EventsStats | YAxisEventsStats> => {
   const shouldDoublePeriod = canIncludePreviousPeriod(includePrevious, period);
   const urlQuery = Object.fromEntries(
     Object.entries({
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 208c0e1688..e2d53d6628 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -258,6 +258,10 @@ export type EventsStats = {
   totals?: {count: number};
 };
 
+export type YAxisEventsStats = {
+  [yAxisName: string]: EventsStats;
+};
+
 // Avatars are a more primitive version of User.
 export type AvatarUser = {
   id: string;
diff --git a/src/sentry/static/sentry/app/types/utils.tsx b/src/sentry/static/sentry/app/types/utils.tsx
index 6cce4396e8..fc78bc7551 100644
--- a/src/sentry/static/sentry/app/types/utils.tsx
+++ b/src/sentry/static/sentry/app/types/utils.tsx
@@ -6,3 +6,8 @@
 // value is true:
 // eslint-disable-next-line prettier/prettier
 export function assert(_value: unknown): asserts _value {}
+
+// This declares a function which asserts that the expression called
+// value is of type Type:
+// eslint-disable-next-line prettier/prettier
+export function assertType<Type>(_value: unknown): asserts _value is Type {}
diff --git a/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx b/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx
index 7f5887e880..bc34014148 100644
--- a/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx
+++ b/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx
@@ -3,8 +3,9 @@ import omitBy from 'lodash/omitBy';
 import PropTypes from 'prop-types';
 import React from 'react';
 
-import {Organization, EventsStats, EventsStatsData} from 'app/types';
+import {Organization, EventsStats, YAxisEventsStats, EventsStatsData} from 'app/types';
 import {Series, SeriesDataUnit} from 'app/types/echarts';
+import {assert, assertType} from 'app/types/utils';
 
 import {Client} from 'app/api';
 import {addErrorMessage} from 'app/actionCreators/indicator';
@@ -15,21 +16,27 @@ import SentryTypes from 'app/sentryTypes';
 
 import LoadingPanel from '../loadingPanel';
 
-type RenderProps = {
-  loading: boolean;
-  reloading: boolean;
-  errored: boolean;
-
+type TimeSeriesData = {
   // timeseries data
   timeseriesData?: Series[];
   allTimeseriesData?: EventsStatsData;
   originalTimeseriesData?: EventsStatsData;
-  timeseriesTotals?: object;
+  timeseriesTotals?: {count: number};
   originalPreviousTimeseriesData?: EventsStatsData | null;
   previousTimeseriesData?: Series | null;
   timeAggregatedData?: Series | {};
 };
 
+type LoadingStatus = {
+  loading: boolean;
+  reloading: boolean;
+  errored: boolean;
+};
+
+type YAxisResults = {[yAxisName: string]: TimeSeriesData};
+
+type RenderProps = LoadingStatus & TimeSeriesData & {results?: YAxisResults};
+
 type DefaultProps = {
   period: any;
   start: any;
@@ -50,7 +57,7 @@ type EventsRequestPartialProps = {
   referenceEvent?: string;
   loading?: boolean;
   showLoading?: boolean;
-  yAxis?: string;
+  yAxis?: string | string[];
   children: (renderProps: RenderProps) => React.ReactNode;
 };
 
@@ -63,7 +70,7 @@ type EventsRequestProps = DefaultProps & TimeAggregationProps & EventsRequestPar
 type EventsRequestState = {
   reloading: boolean;
   errored: boolean;
-  timeseriesData: null | EventsStats;
+  timeseriesData: null | EventsStats | YAxisEventsStats;
 };
 
 const propNamesToIgnore = ['api', 'children', 'organization', 'loading'];
@@ -164,7 +171,7 @@ class EventsRequest extends React.PureComponent<EventsRequestProps, EventsReques
     /**
      * The yAxis being plotted
      */
-    yAxis: PropTypes.string,
+    yAxis: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),
 
     field: PropTypes.arrayOf(PropTypes.string),
     referenceEvent: PropTypes.string,
@@ -182,7 +189,7 @@ class EventsRequest extends React.PureComponent<EventsRequestProps, EventsReques
     includeTransformedData: true,
   };
 
-  state = {
+  state: EventsRequestState = {
     reloading: !!this.props.loading,
     errored: false,
     timeseriesData: null,
@@ -207,7 +214,7 @@ class EventsRequest extends React.PureComponent<EventsRequestProps, EventsReques
 
   fetchData = async () => {
     const {api, ...props} = this.props;
-    let timeseriesData: EventsStats | null = null;
+    let timeseriesData: EventsStats | YAxisEventsStats | null = null;
 
     this.setState(state => ({
       reloading: state.timeseriesData !== null,
@@ -309,7 +316,7 @@ class EventsRequest extends React.PureComponent<EventsRequestProps, EventsReques
   /**
    * Transforms query response into timeseries data to be used in a chart
    */
-  transformTimeseriesData(data: EventsStatsData): [Series] {
+  transformTimeseriesData(data: EventsStatsData): Series[] {
     return [
       {
         seriesName: 'Current',
@@ -363,6 +370,55 @@ class EventsRequest extends React.PureComponent<EventsRequestProps, EventsReques
       return <LoadingPanel data-test-id="events-request-loading" />;
     }
 
+    assert(timeseriesData);
+
+    if (Array.isArray(props.yAxis) && timeseriesData) {
+      // if yAxis is an array, then the API endpoint will return multiple sets of data
+      // in the form of a map: {[yAxisName: string]: EventsStats}
+
+      assertType<YAxisEventsStats>(timeseriesData);
+
+      const results: YAxisResults = Object.fromEntries(
+        props.yAxis.map((yAxisName: string): [string, TimeSeriesData] => {
+          const {
+            data: transformedTimeseriesData,
+            allData: allTimeseriesData,
+            originalData: originalTimeseriesData,
+            totals: timeseriesTotals,
+            originalPreviousData: originalPreviousTimeseriesData,
+            previousData: previousTimeseriesData,
+            timeAggregatedData,
+          } = this.processData(timeseriesData[yAxisName]);
+
+          // timeseries data
+          return [
+            yAxisName,
+            {
+              timeseriesData: transformedTimeseriesData,
+              allTimeseriesData,
+              originalTimeseriesData,
+              timeseriesTotals,
+              originalPreviousTimeseriesData,
+              previousTimeseriesData,
+              timeAggregatedData,
+            },
+          ];
+        })
+      );
+
+      return children({
+        loading,
+        reloading,
+        errored,
+        // timeseries data
+        results,
+        // sometimes we want to reference props that were given to EventsRequest
+        ...props,
+      });
+    }
+
+    assertType<EventsStats>(timeseriesData);
+
     const {
       data: transformedTimeseriesData,
       allData: allTimeseriesData,
diff --git a/tests/js/spec/views/events/utils/eventsRequest.spec.jsx b/tests/js/spec/views/events/utils/eventsRequest.spec.jsx
index 1c888a930a..be628bb674 100644
--- a/tests/js/spec/views/events/utils/eventsRequest.spec.jsx
+++ b/tests/js/spec/views/events/utils/eventsRequest.spec.jsx
@@ -279,4 +279,178 @@ describe('EventsRequest', function() {
       );
     });
   });
+
+  describe('yAxis', function() {
+    beforeEach(function() {
+      doEventsRequest.mockClear();
+    });
+
+    it('supports yAxis', async function() {
+      doEventsRequest.mockImplementation(() =>
+        Promise.resolve({
+          data: [
+            [
+              new Date(),
+              [
+                {...COUNT_OBJ, count: 321},
+                {...COUNT_OBJ, count: 79},
+              ],
+            ],
+            [new Date(), [COUNT_OBJ]],
+          ],
+        })
+      );
+
+      wrapper = mount(
+        <EventsRequest {...DEFAULTS} includePrevious yAxis="apdex()">
+          {mock}
+        </EventsRequest>
+      );
+
+      await tick();
+      wrapper.update();
+
+      expect(mock).toHaveBeenLastCalledWith(
+        expect.objectContaining({
+          loading: false,
+          allTimeseriesData: [
+            [
+              expect.anything(),
+              [
+                expect.objectContaining({count: 321}),
+                expect.objectContaining({count: 79}),
+              ],
+            ],
+            [expect.anything(), [expect.objectContaining({count: 123})]],
+          ],
+          timeseriesData: [
+            {
+              seriesName: expect.anything(),
+              data: [
+                expect.objectContaining({
+                  name: expect.anything(),
+                  value: 123,
+                }),
+              ],
+            },
+          ],
+          previousTimeseriesData: {
+            seriesName: 'Previous',
+            data: [
+              expect.objectContaining({
+                name: expect.anything(),
+                value: 400,
+              }),
+            ],
+          },
+
+          originalTimeseriesData: [
+            [expect.anything(), [expect.objectContaining({count: 123})]],
+          ],
+
+          originalPreviousTimeseriesData: [
+            [
+              expect.anything(),
+              [
+                expect.objectContaining({count: 321}),
+                expect.objectContaining({count: 79}),
+              ],
+            ],
+          ],
+        })
+      );
+    });
+
+    it('supports multiple yAxis', async function() {
+      doEventsRequest.mockImplementation(() =>
+        Promise.resolve({
+          'rpm()': {
+            data: [
+              [
+                new Date(),
+                [
+                  {...COUNT_OBJ, count: 321},
+                  {...COUNT_OBJ, count: 79},
+                ],
+              ],
+              [new Date(), [COUNT_OBJ]],
+            ],
+          },
+          'apdex()': {
+            data: [
+              [
+                new Date(),
+                [
+                  {...COUNT_OBJ, count: 321},
+                  {...COUNT_OBJ, count: 79},
+                ],
+              ],
+              [new Date(), [COUNT_OBJ]],
+            ],
+          },
+        })
+      );
+
+      wrapper = mount(
+        <EventsRequest {...DEFAULTS} includePrevious yAxis={['apdex()', 'rpm()']}>
+          {mock}
+        </EventsRequest>
+      );
+
+      await tick();
+      wrapper.update();
+
+      const expectedDataResponse = {
+        allTimeseriesData: [
+          [
+            expect.anything(),
+            [expect.objectContaining({count: 321}), expect.objectContaining({count: 79})],
+          ],
+          [expect.anything(), [expect.objectContaining({count: 123})]],
+        ],
+        timeseriesData: [
+          {
+            seriesName: expect.anything(),
+            data: [
+              expect.objectContaining({
+                name: expect.anything(),
+                value: 123,
+              }),
+            ],
+          },
+        ],
+        previousTimeseriesData: {
+          seriesName: 'Previous',
+          data: [
+            expect.objectContaining({
+              name: expect.anything(),
+              value: 400,
+            }),
+          ],
+        },
+
+        originalTimeseriesData: [
+          [expect.anything(), [expect.objectContaining({count: 123})]],
+        ],
+
+        originalPreviousTimeseriesData: [
+          [
+            expect.anything(),
+            [expect.objectContaining({count: 321}), expect.objectContaining({count: 79})],
+          ],
+        ],
+      };
+
+      expect(mock).toHaveBeenLastCalledWith(
+        expect.objectContaining({
+          loading: false,
+
+          results: {
+            'apdex()': expect.objectContaining(expectedDataResponse),
+            'rpm()': expect.objectContaining(expectedDataResponse),
+          },
+        })
+      );
+    });
+  });
 });
