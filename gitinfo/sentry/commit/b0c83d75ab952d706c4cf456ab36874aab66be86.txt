commit b0c83d75ab952d706c4cf456ab36874aab66be86
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Wed Mar 22 13:18:52 2017 -0700

    mark groups as resolved when commits are associated with releases (#5125)
    
    * mark groups as resolved when commits are associated with releases
    
    * update changes

diff --git a/CHANGES b/CHANGES
index 6559db6965..99ccf95489 100644
--- a/CHANGES
+++ b/CHANGES
@@ -7,6 +7,7 @@ Version 8.15 (Unreleased)
 - Added support for the new symbol server system to support native SDKs better.
 - Added deploy email
 - Added OAuth2 support to the web API.
+- Resolve issues when commits with ``Fixes SHORTID`` are included in releases
 
 API Changes
 ~~~~~~~~~~~
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index c1b47a93ba..c5ea8d5781 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -215,7 +215,10 @@ class Release(Model):
             return True
 
     def set_commits(self, commit_list):
-        from sentry.models import Commit, CommitAuthor, ReleaseCommit, Repository
+        from sentry.models import (
+            Commit, CommitAuthor, Group, GroupCommitResolution, GroupResolution,
+            GroupResolutionStatus, GroupStatus, ReleaseCommit, Repository
+        )
 
         with transaction.atomic():
             # TODO(dcramer): would be good to optimize the logic to avoid these
@@ -273,3 +276,21 @@ class Release(Model):
                     commit=commit,
                     order=idx,
                 )
+
+        group_ids = list(GroupCommitResolution.objects.filter(
+            commit_id__in=ReleaseCommit.objects.filter(
+                release=self
+            ).values_list('commit_id', flat=True),
+        ).values_list('group_id', flat=True))
+        for group_id in group_ids:
+            GroupResolution.objects.create_or_update(
+                group_id=group_id,
+                release=self,
+                values={
+                    'status': GroupResolutionStatus.RESOLVED,
+                },
+            )
+
+        Group.objects.filter(
+            id__in=group_ids,
+        ).update(status=GroupStatus.RESOLVED)
diff --git a/tests/sentry/models/test_release.py b/tests/sentry/models/test_release.py
index 8ffb865cc4..059f222f86 100644
--- a/tests/sentry/models/test_release.py
+++ b/tests/sentry/models/test_release.py
@@ -1,8 +1,9 @@
 from __future__ import absolute_import
 
 from sentry.models import (
-    Commit, Group, GroupRelease, GroupResolution, Release,
-    ReleaseCommit, ReleaseEnvironment, ReleaseProject
+    Commit, Group, GroupCommitResolution, GroupRelease, GroupResolution,
+    GroupResolutionStatus, GroupStatus, Release, ReleaseCommit,
+    ReleaseEnvironment, ReleaseProject, Repository
 )
 
 from sentry.testutils import TestCase
@@ -139,3 +140,51 @@ class MergeReleasesTest(TestCase):
         assert Release.objects.filter(id=release.id).exists()
         assert not Release.objects.filter(id=release2.id).exists()
         assert not Release.objects.filter(id=release3.id).exists()
+
+
+class SetCommitsTestCase(TestCase):
+    def test_simple(self):
+        org = self.create_organization()
+        project = self.create_project(organization=org, name='foo')
+        group = self.create_group(project=project)
+
+        repo = Repository.objects.create(
+            organization_id=org.id,
+            name='test/repo',
+        )
+        commit = Commit.objects.create(
+            organization_id=org.id,
+            repository_id=repo.id,
+            message='fixes %s' % (group.qualified_short_id),
+            key='alksdflskdfjsldkfajsflkslk',
+        )
+        commit2 = Commit.objects.create(
+            organization_id=org.id,
+            repository_id=repo.id,
+            message='i fixed something',
+            key='lskfslknsdkcsnlkdflksfdkls',
+        )
+
+        assert GroupCommitResolution.objects.filter(
+            group_id=group.id,
+            commit_id=commit.id
+        ).exists()
+
+        release = Release.objects.create(version='abcdabc', organization=org)
+        release.add_project(project)
+        release.set_commits([{
+            'id': commit.key,
+            'repository': repo.name,
+        }, {
+            'id': commit2.key,
+            'repository': repo.name,
+        }])
+
+        assert ReleaseCommit.objects.filter(commit=commit, release=release).exists()
+        assert ReleaseCommit.objects.filter(commit=commit2, release=release).exists()
+        assert GroupResolution.objects.filter(group=group, release=release).exists()
+        assert GroupResolution.objects.get(
+            group=group,
+            release=release,
+        ).status == GroupResolutionStatus.RESOLVED
+        assert Group.objects.get(id=group.id).status == GroupStatus.RESOLVED
