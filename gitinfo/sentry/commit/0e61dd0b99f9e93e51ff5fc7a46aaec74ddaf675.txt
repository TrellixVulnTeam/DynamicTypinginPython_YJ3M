commit 0e61dd0b99f9e93e51ff5fc7a46aaec74ddaf675
Author: Eric Feng <erichfeng@gmail.com>
Date:   Wed Feb 17 14:52:33 2016 -0800

    fixing linting errors

diff --git a/src/sentry/api/endpoints/organization_onboarding_tasks.py b/src/sentry/api/endpoints/organization_onboarding_tasks.py
index 575f57fb44..da6f895558 100644
--- a/src/sentry/api/endpoints/organization_onboarding_tasks.py
+++ b/src/sentry/api/endpoints/organization_onboarding_tasks.py
@@ -11,19 +11,19 @@ from sentry.models import OnboardingTaskStatus, OrganizationOnboardingTask
 
 
 class OrganizationOnboardingTaskEndpoint(OrganizationEndpoint):
-	permission_classes = [OrganizationPermission, ]
+    permission_classes = [OrganizationPermission, ]
 
-	def post(self, request, organization):
-		if request.DATA['status'] == 'Skipped':
-			OrganizationOnboardingTask.objects.create_or_update(
-				organization=organization,
-				user=request.user,
-				task=request.DATA['task'],
-				values={
-					'status': OnboardingTaskStatus.SKIPPED,
-					'date_completed': timezone.now(),
-				}
-			)
-			return Response(status=204)
+    def post(self, request, organization):
+        if request.DATA['status'] == 'Skipped':
+            OrganizationOnboardingTask.objects.create_or_update(
+                organization=organization,
+                user=request.user,
+                task=request.DATA['task'],
+                values={
+                    'status': OnboardingTaskStatus.SKIPPED,
+                    'date_completed': timezone.now(),
+                }
+            )
+            return Response(status=204)
 
-		return Response(status=404)
+        return Response(status=404)
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index 023f41a1f6..61803c1208 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -4,8 +4,6 @@ from sentry.app import quotas
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.auth import access
 from sentry.models import (
-    OnboardingTask,
-    OnboardingTaskStatus,
     Organization,
     OrganizationAccessRequest,
     OrganizationOnboardingTask,
@@ -25,6 +23,7 @@ class OrganizationSerializer(Serializer):
             'dateCreated': obj.date_added,
         }
 
+
 class OnboardingTasksSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         return {
@@ -35,6 +34,7 @@ class OnboardingTasksSerializer(Serializer):
             'data': obj.data,
         }
 
+
 class DetailedOrganizationSerializer(OrganizationSerializer):
     def serialize(self, obj, attrs, user):
         from sentry import features
diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index 57ce3946d5..0788a62777 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -12,7 +12,7 @@ import logging
 from bitfield import BitField
 from django.conf import settings
 from django.core.urlresolvers import reverse
-from django.db import IntegrityError, models, transaction
+from django.db import models, transaction
 from django.db.models import F
 from django.utils import timezone
 from hashlib import md5
@@ -92,7 +92,6 @@ class OrganizationMember(Model):
 
     @transaction.atomic
     def save(self, *args, **kwargs):
-        from sentry.models import OnboardingTask, OnboardingTaskStatus, OrganizationOnboardingTask
         assert self.user_id or self.email, \
             'Must set user or email'
         super(OrganizationMember, self).save(*args, **kwargs)
diff --git a/src/sentry/plugins/bases/issue.py b/src/sentry/plugins/bases/issue.py
index 5956702016..5a3ea8c2a4 100644
--- a/src/sentry/plugins/bases/issue.py
+++ b/src/sentry/plugins/bases/issue.py
@@ -9,8 +9,6 @@ from __future__ import absolute_import
 
 from django import forms
 from django.conf import settings
-from django.db import IntegrityError, transaction
-from django.utils import timezone
 from django.utils.html import format_html
 from social_auth.models import UserSocialAuth
 
@@ -19,7 +17,7 @@ from sentry.models import (
     GroupMeta,
 )
 from sentry.plugins import Plugin
-from sentry.signals import plugin_enabled
+from sentry.signals import issue_tracker_used
 from sentry.utils.auth import get_auth_providers
 from sentry.utils.http import absolute_uri
 from sentry.utils.safe import safe_execute
diff --git a/src/sentry/receivers/onboarding.py b/src/sentry/receivers/onboarding.py
index 2ab29b5f60..e397d9c9c1 100644
--- a/src/sentry/receivers/onboarding.py
+++ b/src/sentry/receivers/onboarding.py
@@ -19,6 +19,7 @@ from sentry.signals import (
 )
 from sentry.utils.javascript import has_sourcemap
 
+
 @project_created.connect(weak=False)
 def record_new_project(project, user, **kwargs):
     try:
@@ -45,6 +46,7 @@ def record_new_project(project, user, **kwargs):
         except IntegrityError:
             pass
 
+
 @first_event_pending.connect(weak=False)
 def record_raven_installed(project, user, **kwargs):
     oot, created = OrganizationOnboardingTask.objects.get_or_create(
@@ -58,6 +60,7 @@ def record_raven_installed(project, user, **kwargs):
         }
     )
 
+
 @first_event_received.connect(weak=False)
 def record_first_event(project, group, **kwargs):
     """
@@ -76,7 +79,7 @@ def record_first_event(project, group, **kwargs):
             'status': OnboardingTaskStatus.COMPLETE,
             'project': project,
             'date_completed': project.first_event,
-            'data': { 'platform': group.platform },
+            'data': {'platform': group.platform},
         }
     )
 
@@ -97,10 +100,11 @@ def record_first_event(project, group, **kwargs):
                     'status': OnboardingTaskStatus.COMPLETE,
                     'project': project,
                     'date_completed': project.first_event,
-                    'data': { 'platform': group.platform },
+                    'data': {'platform': group.platform},
                 }
             )
 
+
 @member_invited.connect(weak=False)
 def record_member_invited(member, user, **kwargs):
     try:
@@ -111,11 +115,12 @@ def record_member_invited(member, user, **kwargs):
                 user=user,
                 status=OnboardingTaskStatus.PENDING,
                 date_completed=timezone.now(),
-                data={ 'invited_member_id': member.id }
+                data={'invited_member_id': member.id}
             )
     except IntegrityError:
         pass
 
+
 @member_joined.connect(weak=False)
 def record_member_joined(member, **kwargs):
     try:
@@ -132,6 +137,7 @@ def record_member_joined(member, **kwargs):
     except IntegrityError:
         pass
 
+
 @event_processed.connect(weak=False)
 def record_release_received(project, group, event, **kwargs):
     if event.get_tag('sentry:release'):
@@ -147,6 +153,7 @@ def record_release_received(project, group, event, **kwargs):
         except IntegrityError:
             pass
 
+
 @event_processed.connect(weak=False)
 def record_user_context_received(project, group, event, **kwargs):
     if event.data.get('sentry.interfaces.User'):
@@ -162,6 +169,7 @@ def record_user_context_received(project, group, event, **kwargs):
         except IntegrityError:
             pass
 
+
 @event_processed.connect(weak=False)
 def record_sourcemaps_received(project, group, event, **kwargs):
     if has_sourcemap(event):
@@ -177,12 +185,13 @@ def record_sourcemaps_received(project, group, event, **kwargs):
         except IntegrityError:
             pass
 
+
 @plugin_enabled.connect(weak=False)
 def record_plugin_enabled(plugin, project, user, **kwargs):
     if isinstance(plugin, IssueTrackingPlugin):
         task = OnboardingTask.ISSUE_TRACKER
         status = OnboardingTaskStatus.PENDING
-    elif isinstance(plugin,  NotificationPlugin):
+    elif isinstance(plugin, NotificationPlugin):
         task = OnboardingTask.NOTIFICATION_SERVICE
         status = OnboardingTaskStatus.COMPLETE
 
@@ -195,11 +204,12 @@ def record_plugin_enabled(plugin, project, user, **kwargs):
                 user=user,
                 project=project,
                 date_completed=timezone.now(),
-                data={ 'plugin': plugin.slug }
+                data={'plugin': plugin.slug}
             )
     except IntegrityError:
         pass
 
+
 @issue_tracker_used.connect(weak=False)
 def record_issue_tracker_used(plugin, project, user, **kwargs):
     OrganizationOnboardingTask.objects.create_or_update(
@@ -211,6 +221,6 @@ def record_issue_tracker_used(plugin, project, user, **kwargs):
             'user': user,
             'project': project,
             'date_completed': timezone.now(),
-            'data': { 'plugin': plugin.slug }
+            'data': {'plugin': plugin.slug}
         }
     )
diff --git a/src/sentry/static/sentry/app/components/header/index.jsx b/src/sentry/static/sentry/app/components/header/index.jsx
index bfec0ddcd3..90bac9fec3 100644
--- a/src/sentry/static/sentry/app/components/header/index.jsx
+++ b/src/sentry/static/sentry/app/components/header/index.jsx
@@ -25,11 +25,10 @@ const Header = React.createClass({
 
   componentDidMount() {
     $(window).on('hashchange', () => {
-      console.log('hash changed')
       if (location.hash == '#welcome') {
         this.setState({showTodos: true});
       }
-    })
+    });
   },
 
   toggleTodos(e) {
@@ -48,7 +47,7 @@ const Header = React.createClass({
 
     // NOTE: this.props.orgId not guaranteed to be specified
     let percentage = Math.round((this.getOrganization().onboardingTasks.filter(
-      (t) => { if (t['status'] == 'Complete') { return t; } }
+      (t) => { if (t.status == 'Complete') { return t; } }
       ).length) / TodoList.TASKS.length * 100).toString();
     let style = {
       width: percentage + '%',
@@ -69,7 +68,7 @@ const Header = React.createClass({
           <StatusPage className="pull-right" />
           <div className="onboarding-progress-bar" onClick={this.toggleTodos}>
             <div className="slider" style={style} ></div>
-            { this.state.showTodos ? <div className="dropdown-menu"><TodoList onClose={() => {this.setState({showTodos:false})}} /></div> : null }
+            { this.state.showTodos ? <div className="dropdown-menu"><TodoList onClose={() => {this.setState({showTodos:false});}} /></div> : null }
           </div>
         </div>
       </header>
diff --git a/src/sentry/static/sentry/app/components/todos.jsx b/src/sentry/static/sentry/app/components/todos.jsx
index 6b9b06160d..d5228b9c5c 100644
--- a/src/sentry/static/sentry/app/components/todos.jsx
+++ b/src/sentry/static/sentry/app/components/todos.jsx
@@ -1,16 +1,17 @@
+import moment from 'moment';
 import React from 'react';
+import {t, tct} from '../locale';
 
 import ApiMixin from '../mixins/apiMixin';
-import ConfigStore from '../stores/configStore';
 import OrganizationState from '../mixins/organizationState';
 
 const TodoItem = React.createClass({
-  mixins: [OrganizationState],
-
   propTypes: {
     task: React.PropTypes.object,
   },
 
+  mixins: [OrganizationState],
+
   getInitialState: function() {
     return {
       showConfirmation: false
@@ -31,8 +32,8 @@ const TodoItem = React.createClass({
 
     let classNames = '';
     let description = '';
-    let doneDescription = "By being here, you've done it. Welcome to Sentry!";
-    if (this.props.task['status'] == 'Complete') {
+    let doneDescription = 'By being here, you\'ve done it. Welcome to Sentry!';
+    if (this.props.task.status == 'Complete') {
       classNames += ' checked';
 
       if (this.props.task.task == 0) {
@@ -41,12 +42,12 @@ const TodoItem = React.createClass({
         description = this.props.task.user + ' completed this ' + moment(this.props.task.date_completed).fromNow();
       }
 
-    } else if (this.props.task['status'] == 'Pending') {
+    } else if (this.props.task.status == 'Pending') {
       classNames += ' pending';
-      description = this.props.task.user + ' kicked this off ' + moment(this.props.task.date_completed).fromNow();
-    } else if (this.props.task['status'] == 'Skipped') {
+      description = this.props.task.user + t(' kicked this off ') + moment(this.props.task.date_completed).fromNow();
+    } else if (this.props.task.status == 'Skipped') {
       classNames += ' skipped';
-      description = this.props.task.user + ' skipped this ' + moment(this.props.task.date_completed).fromNow();
+      description = this.props.task.user + t(' skipped this ') + moment(this.props.task.date_completed).fromNow();
     } else {
       description = this.props.task.description;
     }
@@ -55,32 +56,32 @@ const TodoItem = React.createClass({
       classNames += ' blur';
     }
 
-    var learn_more_url= '';
-    if (this.props.task['feature_location'] === 'project') {
-      learn_more_url = '/organizations/' + org.slug + '/projects/choose/?next=' + this.props.task['location'];
-    } else if (this.props.task['feature_location'] === 'organization') {
-      learn_more_url = '/organizations/' + org.slug + '/' + this.props.task['location'];
-    } else if (this.props.task['feature_location'] === 'absolute') {
-      learn_more_url = this.props.task['location'];
+    let learn_more_url = '';
+    if (this.props.task.feature_location === 'project') {
+      learn_more_url = '/organizations/' + org.slug + '/projects/choose/?next=' + this.props.task.location;
+    } else if (this.props.task.feature_location === 'organization') {
+      learn_more_url = '/organizations/' + org.slug + '/' + this.props.task.location;
+    } else if (this.props.task.feature_location === 'absolute') {
+      learn_more_url = this.props.task.location;
     }
 
     return (
       <li className={classNames}>
-        { this.props.task['status'] == 'Pending' ? <span className="pending-bar" /> : null }
+        { this.props.task.status == 'Pending' ? <span className="pending-bar" /> : null }
         <div className="todo-content">
           <div className="ob-checkbox">
-            { this.props.task['status'] == 'Complete' ? <span className="icon-checkmark" /> : null }
-            { this.props.task['status'] == 'Skipped' ? <span className="icon-x" /> : null }
-            { this.props.task['status'] == 'Pending' ? <span className="icon-ellipsis" /> : null }
+            { this.props.task.status == 'Complete' ? <span className="icon-checkmark" /> : null }
+            { this.props.task.status == 'Skipped' ? <span className="icon-x" /> : null }
+            { this.props.task.status == 'Pending' ? <span className="icon-ellipsis" /> : null }
           </div>
-          <a href={learn_more_url}><h4>{ this.props.task['title'] }</h4></a>
+          <a href={learn_more_url}><h4>{ this.props.task.title }</h4></a>
           <p>
             { description }
           </p>
-          { this.props.task['skippable'] && this.props.task['status'] != 'Skipped' && this.props.task['status'] != 'Complete' && !this.state.showConfirmation ?
-            <a className="skip-btn btn btn-default" onClick={this.toggleConfirmation}>Skip</a> : null }
+          { this.props.task.skippable && this.props.task.status != 'Skipped' && this.props.task.status != 'Complete' && !this.state.showConfirmation ?
+            <a className="skip-btn btn btn-default" onClick={this.toggleConfirmation}>{t('Skip')}</a> : null }
         </div>
-        { this.state.showConfirmation ? <Confirmation task={this.props.task['task']} onSkip={this.skip} dismiss={this.toggleConfirmation} /> : null }
+        { this.state.showConfirmation ? <Confirmation task={this.props.task.task} onSkip={this.skip} dismiss={this.toggleConfirmation} /> : null }
       </li>
     );
   }
@@ -103,33 +104,26 @@ const Confirmation = React.createClass({
   render: function() {
     return (
       <div className="ob-confirmation" onClick={this.dismiss}>
-        <h3>Need help?</h3>
-        <p><a href="mailto:support@getsentry.com?subject=Help with onboarding">Ask us!</a> &middot; <a onClick={this.skip}>Skip</a></p>
+        <h3>{t('Need help?')}</h3>
+        <p><a href="mailto:support@getsentry.com?subject=Help with onboarding">{t('Ask us!')}</a> &middot; <a onClick={this.skip}>{t('Skip')}</a></p>
       </div>
     );
   }
 });
 
 const TodoList = React.createClass({
-  mixins: [ApiMixin, OrganizationState],
-
   propTypes: {
     onClose: React.PropTypes.func
   },
 
-  getInitialState() {
-    return {
-      tasks: [],
-      seeAll: false,  // Show all tasks, included those completed
-    };
-  },
+  mixins: [ApiMixin, OrganizationState],
 
   statics: {
     TASKS: [
       {
         'task': 1,
-        'title': 'Create a project',
-        'description': 'Create your first Sentry project',
+        'title': t('Create a project'),
+        'description': t('Create your first Sentry project'),
         'skippable': false,
         'prereq': [],
         'feature_location': 'organization',
@@ -137,8 +131,8 @@ const TodoList = React.createClass({
       },
       {
         'task': 2,
-        'title': 'Send your first event',
-        'description': 'Install Sentry\'s client and send an event',
+        'title': t('Send your first event'),
+        'description': t('Install Sentry\'s client and send an event'),
         'skippable': false,
         'prereq': [1],
         'feature_location': 'project',
@@ -146,8 +140,8 @@ const TodoList = React.createClass({
       },
       {
         'task': 3,
-        'title': 'Invite team member',
-        'description': 'Bring your team aboard',
+        'title': t('Invite team member'),
+        'description': t('Bring your team aboard'),
         'skippable': false,
         'prereq': [],
         'feature_location': 'organization',
@@ -155,8 +149,8 @@ const TodoList = React.createClass({
       },
       {
         'task': 4,
-        'title': 'Add a second platform',
-        'description': 'Add Sentry to a second platform',
+        'title': t('Add a second platform'),
+        'description': t('Add Sentry to a second platform'),
         'skippable': false,
         'prereq': [1, 2],
         'feature_location': 'organization',
@@ -164,8 +158,8 @@ const TodoList = React.createClass({
       },
       {
         'task': 5,
-        'title': 'Add user context',
-        'description': 'Know who is being affected by crashes',
+        'title': t('Add user context'),
+        'description': t('Know who is being affected by crashes'),
         'skippable': false,
         'prereq': [1, 2],
         'feature_location': 'absolute',
@@ -173,8 +167,8 @@ const TodoList = React.createClass({
       },
       {
         'task': 6,
-        'title': 'Set up release tracking',
-        'description': 'See what releases are generating errors.',
+        'title': t('Set up release tracking'),
+        'description': t('See what releases are generating errors.'),
         'skippable': false,
         'prereq': [1, 2],
         'feature_location': 'project',
@@ -182,8 +176,8 @@ const TodoList = React.createClass({
       },
       {
         'task': 7,
-        'title': 'Upload sourcemaps',
-        'description': 'Deminify javascript stacktraces',
+        'title': t('Upload sourcemaps'),
+        'description': t('Deminify javascript stacktraces'),
         'skippable': false,
         'prereq': [1, 2, 8], // Is one of the platforms javascript?
         'feature_location': 'absolute',
@@ -200,8 +194,8 @@ const TodoList = React.createClass({
       // },
       {
         'task': 9,
-        'title': 'Set up issue tracking',
-        'description': 'Link to Sentry issues within your issue tracker',
+        'title': t('Set up issue tracking'),
+        'description': t('Link to Sentry issues within your issue tracker'),
         'skippable': true,
         'prereq': [1, 2],
         'feature_location': 'project',
@@ -209,8 +203,8 @@ const TodoList = React.createClass({
       },
       {
         'task': 10,
-        'title': 'Set up a notification service',
-        'description': 'Receive Sentry alerts in Slack or HipChat',
+        'title': t('Set up a notification service'),
+        'description': t('Receive Sentry alerts in Slack or HipChat'),
         'skippable': true,
         'prereq': [1, 2],
         'feature_location': 'project',
@@ -219,15 +213,22 @@ const TodoList = React.createClass({
     ]
   },
 
+  getInitialState() {
+    return {
+      tasks: [],
+      seeAll: false,  // Show all tasks, included those completed
+    };
+  },
+
   componentWillMount() {
     let org = this.getOrganization();
     let tasks = [];
 
-    for (var task of TodoList.TASKS) {
+    for (let task of TodoList.TASKS) {
       task.status = '';
 
-      for (var server_task of org.onboardingTasks) {
-        if (server_task['task'] == task['task']) {
+      for (let server_task of org.onboardingTasks) {
+        if (server_task.task == task.task) {
           task = $.extend(task, server_task);
           break;
         }
@@ -258,15 +259,12 @@ const TodoList = React.createClass({
       data: {'task': skipped_task, 'status': 'Skipped'},
       success: () => {
         let new_state = this.state.tasks.map( (task) => {
-          if (task['task'] == skipped_task) {
-            task['status'] = 'Skipped';
+          if (task.task == skipped_task) {
+            task.status = 'Skipped';
           }
           return task;
         });
         this.setState({tasks: new_state});
-      },
-      error: () => {
-        console.log('Unable to skip this task');
       }
     });
     this.getOnboardingTasks();
@@ -278,33 +276,33 @@ const TodoList = React.createClass({
   },
 
   toggleSeeAll(e) {
-    this.setState({ seeAll: !this.state.seeAll });
+    this.setState({seeAll: !this.state.seeAll});
   },
 
   render() {
-    var next_tasks = [];
+    let next_tasks = [];
     if (this.state.seeAll) {
       next_tasks = this.state.tasks;
     } else {
       next_tasks = this.state.tasks.filter( (task) => {
-        if (task['status'] != 'Complete') {
+        if (task.status != 'Complete') {
           return task;
         }
       }).slice(0,3);
     }
 
     let todo_list = next_tasks.map( (task) => {
-      return (<TodoItem key={task['task']} task={task} onSkip={this.skipTask} />)
+      return (<TodoItem key={task.task} task={task} onSkip={this.skipTask} />);
     }, this);
 
     return (
       <div>
         <div onClick={this.click} className="onboarding-wrapper">
-          <h3>Getting started with Sentry</h3>
+          <h3>{t('Getting started with Sentry')}</h3>
           <ul className="list-unstyled">
             {todo_list}
           </ul>
-          <a className="btn btn-default btn-see-all" onClick={this.toggleSeeAll}>{this.state.seeAll ? 'Show less' : 'Show more'}</a>
+          <a className="btn btn-default btn-see-all" onClick={this.toggleSeeAll}>{this.state.seeAll ? t('Show less') : t('Show more')}</a>
         </div>
       </div>
     );
diff --git a/src/sentry/web/forms/invite_organization_member.py b/src/sentry/web/forms/invite_organization_member.py
index 3428fcb2fb..947a7c34a4 100644
--- a/src/sentry/web/forms/invite_organization_member.py
+++ b/src/sentry/web/forms/invite_organization_member.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 from django import forms
 from django.db import transaction, IntegrityError
-from django.utils import timezone
 
 from sentry.models import (
     AuditLogEntry,
@@ -11,6 +10,7 @@ from sentry.models import (
 )
 from sentry.signals import member_invited
 
+
 class InviteOrganizationMemberForm(forms.ModelForm):
     # override this to ensure the field is required
     email = forms.EmailField()
diff --git a/src/sentry/web/frontend/choose_project.py b/src/sentry/web/frontend/choose_project.py
index 915d43c70a..edfc8ca89c 100644
--- a/src/sentry/web/frontend/choose_project.py
+++ b/src/sentry/web/frontend/choose_project.py
@@ -1,13 +1,9 @@
 from __future__ import absolute_import
 
-from django import forms
-from django.contrib import messages
-from django.core.urlresolvers import reverse
 from django.shortcuts import redirect
 
-from sentry.models import Project, Team
+from sentry.models import Team
 from sentry.web.frontend.base import OrganizationView
-from sentry.utils.http import absolute_uri
 
 
 class OrganizationProjectChooser(OrganizationView):
@@ -18,7 +14,7 @@ class OrganizationProjectChooser(OrganizationView):
             organization=organization,
             user=request.user,
             with_projects=True,
-            )
+        )
 
         # next_url should have a trailing slash only: settings/install/
         next_url = request.GET.get('next')
diff --git a/src/sentry/web/frontend/create_organization_member.py b/src/sentry/web/frontend/create_organization_member.py
index d93c6a1bb1..3511b4495c 100644
--- a/src/sentry/web/frontend/create_organization_member.py
+++ b/src/sentry/web/frontend/create_organization_member.py
@@ -43,7 +43,6 @@ class CreateOrganizationMemberView(OrganizationView):
                 messages.add_message(request, messages.INFO,
                     _('The organization member already exists.'))
 
-
             redirect = reverse('sentry-organization-member-settings',
                                args=[organization.slug, om.id])
 
diff --git a/src/sentry/web/frontend/project_issue_tracking.py b/src/sentry/web/frontend/project_issue_tracking.py
index eafd9edf1f..8ede56778a 100644
--- a/src/sentry/web/frontend/project_issue_tracking.py
+++ b/src/sentry/web/frontend/project_issue_tracking.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 from django.contrib import messages
 from django.http import HttpResponseRedirect, HttpResponse
-from django.utils import timezone
 from django.utils.safestring import mark_safe
 
 from sentry import constants
diff --git a/src/sentry/web/frontend/project_notifications.py b/src/sentry/web/frontend/project_notifications.py
index e4ca69c300..3fb1e4543a 100644
--- a/src/sentry/web/frontend/project_notifications.py
+++ b/src/sentry/web/frontend/project_notifications.py
@@ -3,14 +3,12 @@ from __future__ import absolute_import
 from django.conf import settings
 from django.contrib import messages
 from django.http import HttpResponseRedirect, HttpResponse
-from django.utils import timezone
 from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext_lazy as _
 
 from sentry import constants
 from sentry.app import digests
 from sentry.digests import get_option_key as get_digest_option_key
-from sentry.models import OnboardingTask, OnboardingTaskStatus, OrganizationOnboardingTask
 from sentry.plugins import plugins, NotificationPlugin
 from sentry.web.forms.projects import (
     DigestSettingsForm,
diff --git a/src/sentry/web/frontend/project_plugin_enable.py b/src/sentry/web/frontend/project_plugin_enable.py
index 434ec1b121..befa28ef6b 100644
--- a/src/sentry/web/frontend/project_plugin_enable.py
+++ b/src/sentry/web/frontend/project_plugin_enable.py
@@ -1,7 +1,6 @@
 from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
-from django.utils import timezone
 
 from sentry.plugins import plugins
 from sentry.signals import plugin_enabled
diff --git a/src/sentry/web/frontend/react_page.py b/src/sentry/web/frontend/react_page.py
index 938ad8c19b..9aeb14293f 100644
--- a/src/sentry/web/frontend/react_page.py
+++ b/src/sentry/web/frontend/react_page.py
@@ -36,6 +36,7 @@ class ReactPageView(OrganizationView, ReactMixin):
             first_event_pending.send(project=project, user=request.user, sender=self)
         return self.handle_react(request)
 
+
 class GenericReactPageView(BaseView, ReactMixin):
     def handle(self, request, **kwargs):
         return self.handle_react(request)
