commit 3cf49531cde1550035697d555c5ee214cdfdf820
Author: Katie Lundsgaard <katie@getsentry.com>
Date:   Wed Sep 13 11:00:05 2017 -0700

    fix(workflow): Render total blacklisted project stats until October 11th (#6115)

diff --git a/src/sentry/static/sentry/app/views/projectFilters.jsx b/src/sentry/static/sentry/app/views/projectFilters.jsx
index b0d214c69b..912b6a2500 100644
--- a/src/sentry/static/sentry/app/views/projectFilters.jsx
+++ b/src/sentry/static/sentry/app/views/projectFilters.jsx
@@ -13,7 +13,7 @@ import ProjectState from '../mixins/projectState';
 import StackedBarChart from '../components/stackedBarChart';
 import Switch from '../components/switch';
 import {FormState, TextareaField} from '../components/forms';
-import {t} from '../locale';
+import {t, tn} from '../locale';
 import {intcomma} from '../utils';
 import marked from '../utils/marked';
 
@@ -231,13 +231,18 @@ const ProjectFiltersSettingsForm = React.createClass({
 
   getInitialState() {
     let formData = {};
-    let features = this.getProjectFeatures()
+    let features = this.getProjectFeatures();
     for (let key of Object.keys(this.props.initialData)) {
       if (key.lastIndexOf('filters:') === 0) {
         // the project details endpoint can partially succeed and still return a 400
         // if the org does not have the additional-data-filters feature enabled,
         // so this prevents the form from sending an empty string by default
-        if(!features.has('additional-data-filters') && key === 'filters:error_messages' || key === 'filters:releases') continue;
+        if (
+          (!features.has('additional-data-filters') &&
+            key === 'filters:error_messages') ||
+          key === 'filters:releases'
+        )
+          continue;
         formData[key] = this.props.initialData[key];
       }
     }
@@ -395,37 +400,43 @@ const ProjectFilters = React.createClass({
     this.fetchData();
   },
 
-  componentDidUpdate(prevProps) {
-    if (!this.state.loading && !this.state.formattedData) {
-      this.render();
-    }
-  },
-
   getStatOpts() {
-    return(
-      this.getProjectFeatures().has('additional-data-filters') ?
-      {
-        'ip-address': 'IP Address',
-        'release-version': 'Release',
-        'error-message': 'Error Message',
-        'browser-extensions': 'Browser Extension',
-        'legacy-browsers': 'Legacy Browser',
-        localhost: 'Localhost',
-        'web-crawlers': 'Web Crawler',
-        'invalid-csp': 'Invalid CSP',
-        cors: 'CORS'
-      } :
-      {'blacklisted':"Filtered Events"}
-    );
+    return {
+      'ip-address': 'IP Address',
+      'release-version': 'Release',
+      'error-message': 'Error Message',
+      'browser-extensions': 'Browser Extension',
+      'legacy-browsers': 'Legacy Browser',
+      localhost: 'Localhost',
+      'web-crawlers': 'Web Crawler',
+      'invalid-csp': 'Invalid CSP',
+      cors: 'CORS',
+      blacklisted: 'Filtered Events' //TODO(maxbittker) this is only needed until October 10th, 2017
+    };
   },
 
   formatData(rawData) {
+    let cutOverDate = moment([2017, 8, 11]); // date when detailed stats started being recorded
+
     return Object.keys(this.getStatOpts()).map(stat => {
       return {
         data: rawData[stat].map(([x, y]) => {
           if (y > 0) {
             this.setState({blankStats: false});
           }
+
+          //TODO(maxbittker) this is only needed until October 10th, 2017 :
+          let statDate = moment(x * 1000);
+          let timeSince = cutOverDate.diff(statDate, 'days');
+          // this means detailed stats are available
+          if (
+            (timeSince < 0 && stat === 'blacklisted') ||
+            (timeSince >= 0 && stat !== 'blacklisted')
+          ) {
+            return {x, y: 0};
+          }
+          //END
+
           return {x, y};
         }),
         label: this.getStatOpts()[stat],
@@ -450,7 +461,7 @@ const ProjectFilters = React.createClass({
         statOptions.map(stat => {
           let deferred = $.Deferred();
           this.api.request(statEndpoint, {
-            query: Object.assign({stat: stat}, query),
+            query: Object.assign({stat}, query),
             success: deferred.resolve.bind(deferred),
             error: deferred.reject.bind(deferred)
           });
@@ -462,7 +473,7 @@ const ProjectFilters = React.createClass({
           let rawStatsData = {};
           let expected = this.state.expected - 1;
           // when there is a single request made, this is inexplicably called without being wrapped in an array
-          if(statOptions.length===1){
+          if (statOptions.length === 1) {
             rawStatsData[statOptions[0]] = arguments[0];
           } else {
             for (let i = 0; i < statOptions.length; i++) {
@@ -471,9 +482,9 @@ const ProjectFilters = React.createClass({
           }
 
           this.setState({
-            rawStatsData: rawStatsData,
+            rawStatsData,
             formattedData: this.formatData(rawStatsData),
-            expected: expected,
+            expected,
             loading: expected > 0
           });
         }.bind(this)
@@ -651,9 +662,9 @@ const ProjectFilters = React.createClass({
     let {formattedData} = this.state;
 
     return ReactDOMServer.renderToStaticMarkup(
-      <div style={{width: '150px'}}>
+      <div style={{width: '175px'}}>
         <div className="time-label"><span>{timeLabel}</span></div>
-        <div>{intcomma(totalY)} {totalY > 1 ? t('total events') : t('total event')}</div>
+        <div>{intcomma(totalY)} {tn('total event', 'total events', totalY)}</div>
         {formattedData.map((dataPoint, i) => {
           return (
             point.y[i] > 0 &&
@@ -663,7 +674,7 @@ const ProjectFilters = React.createClass({
                 {dataPoint.label}{' '}
               </dd>
               <dd style={{textAlign: 'right', position: 'relative'}}>
-                {point.y[i]} {t('event')}{point.y[i] > 1 ? 's' : ''}
+                {point.y[i]} {tn('event', 'events', point.y[i])}
               </dd>
             </dl>
           );
