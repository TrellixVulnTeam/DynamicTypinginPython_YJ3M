commit 4d07b11a0a2eb531fc83e4f51309484d5e33be7c
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jul 28 13:13:21 2015 -0700

    Support fingerprint in API
    
    This adds support for the 'fingerprint' attribute in the client spec.
    
    Fingerprint must be a list of strings. If the string is {{ default }} the
    default behavior will be implemented, thus allowing you to both extend
    and replace it.
    
    Fixes GH-1657

diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 0cdf6a897f..356f442521 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -213,6 +213,7 @@ CLIENT_RESERVED_ATTRS = (
     'message',
     'checksum',
     'culprit',
+    'fingerprint',
     'level',
     'time_spent',
     'logger',
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 942b0c6cef..f83698bf5e 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -68,8 +68,28 @@ def get_hashes_for_event(event):
         result = interface.compute_hashes(event.platform)
         if not result:
             continue
-        return map(md5_from_hash, result)
-    return [md5_from_hash([event.message])]
+        return result
+    return [[event.message]]
+
+
+def get_hashes_from_fingerprint(event, fingerprint):
+    default_values = set(['{{ default }}', '{{default}}'])
+    if any(d in fingerprint for d in default_values):
+        default_hashes = get_hashes_for_event(event)
+        hash_count = len(default_hashes)
+    else:
+        hash_count = 1
+
+    hashes = []
+    for idx in xrange(hash_count):
+        result = []
+        for bit in fingerprint:
+            if bit in default_values:
+                result.extend(default_hashes[idx])
+            else:
+                result.append(bit)
+        hashes.append(result)
+    return hashes
 
 
 if not settings.SENTRY_SAMPLE_DATA:
@@ -181,6 +201,7 @@ class EventManager(object):
         data.setdefault('server_name', None)
         data.setdefault('site', None)
         data.setdefault('checksum', None)
+        data.setdefault('fingerprint', None)
         data.setdefault('platform', None)
         data.setdefault('extra', {})
 
@@ -277,6 +298,7 @@ class EventManager(object):
         server_name = data.pop('server_name', None)
         site = data.pop('site', None)
         checksum = data.pop('checksum', None)
+        fingerprint = data.pop('fingerprint', None)
         platform = data.pop('platform', None)
         release = data.pop('release', None)
 
@@ -321,8 +343,10 @@ class EventManager(object):
         # Calculate the checksum from the first highest scoring interface
         if checksum:
             hashes = [checksum]
+        elif fingerprint:
+            hashes = map(md5_from_hash, get_hashes_from_fingerprint(event, fingerprint))
         else:
-            hashes = get_hashes_for_event(event)
+            hashes = map(md5_from_hash, get_hashes_for_event(event))
 
         group_kwargs = kwargs.copy()
         group_kwargs.update({
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index 36aaec4a8e..c0de962dd1 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -9,7 +9,9 @@ from mock import patch
 from django.conf import settings
 
 from sentry.constants import MAX_CULPRIT_LENGTH
-from sentry.event_manager import EventManager, get_hashes_for_event
+from sentry.event_manager import (
+    EventManager, get_hashes_for_event, get_hashes_from_fingerprint
+)
 from sentry.models import Event, Group, GroupStatus, EventMapping
 from sentry.testutils import TestCase, TransactionTestCase
 
@@ -109,6 +111,26 @@ class EventManagerTest(TransactionTestCase):
         assert group.last_seen.replace(microsecond=0) == event.datetime.replace(microsecond=0)
         assert group.message == event2.message
 
+    def test_updates_group_with_fingerprint(self):
+        manager = EventManager(self.make_event(
+            message='foo', event_id='a' * 32,
+            fingerprint=['a' * 32],
+        ))
+        event = manager.save(1)
+
+        manager = EventManager(self.make_event(
+            message='foo bar', event_id='b' * 32,
+            fingerprint=['a' * 32],
+        ))
+        with self.tasks():
+            event2 = manager.save(1)
+
+        group = Group.objects.get(id=event.group_id)
+
+        assert group.times_seen == 2
+        assert group.last_seen.replace(microsecond=0) == event.datetime.replace(microsecond=0)
+        assert group.message == event2.message
+
     def test_unresolves_group(self):
         # N.B. EventManager won't unresolve the group unless the event2 has a
         # later timestamp than event1. MySQL doesn't support microseconds.
@@ -244,9 +266,60 @@ class GetHashesFromEventTest(TestCase):
             platform='python',
             message='Foo bar',
         )
-        checksums = get_hashes_for_event(event)
-        assert len(checksums) == 1
-        checksum = checksums[0]
+        hashes = get_hashes_for_event(event)
+        assert len(hashes) == 1
+        hash_one = hashes[0]
         stack_comp_hash.assert_called_once_with('python')
         assert not http_comp_hash.called
-        assert checksum == '3858f62230ac3c915f300c664312c63f'
+        assert hash_one == ['foo', 'bar']
+
+
+class GetHashesFromFingerprintTest(TestCase):
+    def test_default_value(self):
+        event = Event(
+            data={
+                'sentry.interfaces.Stacktrace': {
+                    'frames': [{
+                        'lineno': 1,
+                        'filename': 'foo.py',
+                    }, {
+                        'lineno': 1,
+                        'filename': 'foo.py',
+                        'in_app': True,
+                    }],
+                },
+                'sentry.interfaces.Http': {
+                    'url': 'http://example.com'
+                },
+            },
+            platform='python',
+            message='Foo bar',
+        )
+        fp_checksums = get_hashes_from_fingerprint(event, ["{{default}}"])
+        def_checksums = get_hashes_for_event(event)
+        assert def_checksums == fp_checksums
+
+    def test_custom_values(self):
+        event = Event(
+            data={
+                'sentry.interfaces.Stacktrace': {
+                    'frames': [{
+                        'lineno': 1,
+                        'filename': 'foo.py',
+                    }, {
+                        'lineno': 1,
+                        'filename': 'foo.py',
+                        'in_app': True,
+                    }],
+                },
+                'sentry.interfaces.Http': {
+                    'url': 'http://example.com'
+                },
+            },
+            platform='python',
+            message='Foo bar',
+        )
+        fp_checksums = get_hashes_from_fingerprint(event, ["{{default}}", "custom"])
+        def_checksums = get_hashes_for_event(event)
+        assert len(fp_checksums) == len(def_checksums)
+        assert def_checksums != fp_checksums
