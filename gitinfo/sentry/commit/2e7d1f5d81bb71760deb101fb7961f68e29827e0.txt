commit 2e7d1f5d81bb71760deb101fb7961f68e29827e0
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Oct 17 22:56:16 2013 -0700

    Remove timestamp from settable node commands, add set_multi tests, and minor cleanup

diff --git a/src/sentry/nodestore/base.py b/src/sentry/nodestore/base.py
index 7a2adeaf8a..06cd44845f 100644
--- a/src/sentry/nodestore/base.py
+++ b/src/sentry/nodestore/base.py
@@ -12,26 +12,47 @@ import uuid
 
 
 class NodeStorage(object):
-    def create(self, data, timestamp=None):
+    def create(self, data):
+        """
+        >>> key = nodestore.create({'foo': 'bar'})
+        """
         node_id = self.generate_id()
-        self.set(node_id, data, timestamp)
+        self.set(node_id, data)
         return node_id
 
     def get(self, id):
+        """
+        >>> data = nodestore.get('key1')
+        >>> print data
+        """
         raise NotImplementedError
 
     def get_multi(self, id_list):
+        """
+        >>> data_map = nodestore.get_multi(['key1', 'key2')
+        >>> print 'key1', data_map['key1']
+        >>> print 'key2', data_map['key2']
+        """
         return dict(
             (id, self.get(id))
             for id in id_list
         )
 
-    def set(self, id, data, timestamp=None):
+    def set(self, id, data):
+        """
+        >>> nodestore.set('key1', {'foo': 'bar'})
+        """
         raise NotImplementedError
 
     def set_multi(self, values):
-        for v in values:
-            self.set(**v)
+        """
+        >>> nodestore.set_multi({
+        >>>     'key1': {'foo': 'bar'},
+        >>>     'key2': {'foo': 'baz'},
+        >>> })
+        """
+        for id, data in values.iteritems():
+            self.set(id=id, data=data)
 
     def generate_id(self):
         return uuid.uuid4().hex
diff --git a/src/sentry/nodestore/django/backend.py b/src/sentry/nodestore/django/backend.py
index 259e42ba73..cf5f1381e2 100644
--- a/src/sentry/nodestore/django/backend.py
+++ b/src/sentry/nodestore/django/backend.py
@@ -29,14 +29,12 @@ class DjangoNodeStorage(NodeStorage):
             for n in Node.objects.filter(id__in=id_list)
         )
 
-    def set(self, id, data, timestamp=None):
+    def set(self, id, data):
         create_or_update(
             Node,
             id=id,
-            data=data,
-            timestamp=timestamp or timezone.now()
+            defaults={
+                'data': data,
+                'timestamp': timezone.now(),
+            },
         )
-
-    def set_multi(self, values):
-        for v in values:
-            self.set(**v)
diff --git a/src/sentry/nodestore/multi/backend.py b/src/sentry/nodestore/multi/backend.py
index d5c3ee46ca..9bdcaa050a 100644
--- a/src/sentry/nodestore/multi/backend.py
+++ b/src/sentry/nodestore/multi/backend.py
@@ -10,8 +10,6 @@ from __future__ import absolute_import
 
 import random
 
-from django.utils import timezone
-
 from sentry.nodestore.base import NodeStorage
 from sentry.utils.imports import import_string
 
@@ -47,14 +45,11 @@ class MultiNodeStorage(NodeStorage):
         backend = random.choice(self.backends)
         return backend.get_multi(id_list=id_list)
 
-    def set(self, id, data, timestamp=None):
-        if timestamp is None:
-            timestamp = timezone.now()
-
+    def set(self, id, data):
         should_raise = False
         for backend in self.backends:
             try:
-                backend.set(id=id, data=data, timestamp=timestamp)
+                backend.set(id=id, data=data)
             except Exception:
                 should_raise = True
 
diff --git a/tests/sentry/nodestore/django/backend/tests.py b/tests/sentry/nodestore/django/backend/tests.py
index 58689095c6..1b13f3ff71 100644
--- a/tests/sentry/nodestore/django/backend/tests.py
+++ b/tests/sentry/nodestore/django/backend/tests.py
@@ -51,6 +51,22 @@ class DjangoNodeStorageTest(TestCase):
             'foo': 'bar',
         }
 
+    def test_set_multi(self):
+        self.ns.set_multi({
+            'd2502ebbd7df41ceba8d3275595cac33': {
+                'foo': 'bar',
+            },
+            '5394aa025b8e401ca6bc3ddee3130edc': {
+                'foo': 'baz',
+            },
+        })
+        assert Node.objects.get(id='d2502ebbd7df41ceba8d3275595cac33').data == {
+            'foo': 'bar',
+        }
+        assert Node.objects.get(id='5394aa025b8e401ca6bc3ddee3130edc').data == {
+            'foo': 'baz',
+        }
+
     def test_create(self):
         node_id = self.ns.create({
             'foo': 'bar',
