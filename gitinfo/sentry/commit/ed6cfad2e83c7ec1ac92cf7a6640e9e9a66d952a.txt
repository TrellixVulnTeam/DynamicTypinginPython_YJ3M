commit ed6cfad2e83c7ec1ac92cf7a6640e9e9a66d952a
Author: Max Bittker <maxbittker@gmail.com>
Date:   Mon Jun 4 16:43:07 2018 -0700

    feat(github-integration) test multiple orgs for webhook (#8587)
    
    * refactor query and add a test for multiple orgs

diff --git a/src/sentry/integrations/github/webhook.py b/src/sentry/integrations/github/webhook.py
index 88a107abf9..5d4654b7e8 100644
--- a/src/sentry/integrations/github/webhook.py
+++ b/src/sentry/integrations/github/webhook.py
@@ -48,26 +48,25 @@ class Webhook(object):
         )
 
         if 'repository' in event:
-            # TODO(maxbittker) select org directly to make this pattern scale to many
-            # orgs on one integration
-            organizations = list(integration.organizations.all())
-            for org in organizations:
-                try:
-                    repo = Repository.objects.get(
-                        organization_id=org.id,
-                        provider='integrations:github',
-                        external_id=six.text_type(event['repository']['id']),
-                    )
-                except Repository.DoesNotExist:
-                    continue
 
+            orgs = {
+                org.id: org
+                for org in integration.organizations.all()
+            }
+
+            repos = Repository.objects.filter(
+                organization_id__in=orgs.keys(),
+                provider='integrations:github',
+                external_id=six.text_type(event['repository']['id']),
+            )
+            for repo in repos:
                 # We need to track GitHub's "full_name" which is the repository slug.
                 # This is needed to access the API since `external_id` isn't sufficient.
                 if repo.config.get('name') != event['repository']['full_name']:
                     repo.config['name'] = event['repository']['full_name']
                     repo.save()
 
-                self._handle(event, org, repo)
+                self._handle(event, orgs[repo.organization_id], repo)
 
 
 class InstallationEventWebhook(Webhook):
diff --git a/tests/sentry/integrations/github/test_webhooks.py b/tests/sentry/integrations/github/test_webhooks.py
index f960e28f20..905e5937e4 100644
--- a/tests/sentry/integrations/github/test_webhooks.py
+++ b/tests/sentry/integrations/github/test_webhooks.py
@@ -201,6 +201,70 @@ class PushEventWebhookTest(APITestCase):
         assert commit.author.email == 'baxterthehacker@example.com'
         assert commit.date_added == datetime(2015, 5, 5, 23, 40, 15, tzinfo=timezone.utc)
 
+    @patch('sentry.integrations.github.client.get_jwt')
+    def test_multiple_orgs(self, mock_get_jwt):
+        mock_get_jwt.return_value = ""
+
+        project = self.project  # force creation
+
+        url = '/extensions/github/webhook/'
+
+        secret = 'b3002c3e321d4b7880360d397db2ccfd'
+
+        options.set('github-app.webhook-secret', secret)
+        Repository.objects.create(
+            organization_id=project.organization.id,
+            external_id='35129377',
+            provider='integrations:github',
+            name='baxterthehacker/public-repo',
+        )
+        integration = Integration.objects.create(
+            external_id="12345",
+            provider='github',
+        )
+        integration.add_organization(project.organization.id)
+
+        org2 = self.create_organization()
+        project2 = self.create_project(organization=org2, name='bar')
+
+        Repository.objects.create(
+            organization_id=project2.organization.id,
+            external_id='77',
+            provider='integrations:github',
+            name='another/repo',
+        )
+        integration = Integration.objects.create(
+            external_id="99",
+            provider='github',
+        )
+        integration.add_organization(org2.id)
+
+        response = self.client.post(
+            path=url,
+            data=PUSH_EVENT_EXAMPLE_INSTALLATION,
+            content_type='application/json',
+            HTTP_X_GITHUB_EVENT='push',
+            HTTP_X_HUB_SIGNATURE='sha1=56a3df597e02adbc17fb617502c70e19d96a6136',
+            HTTP_X_GITHUB_DELIVERY=six.text_type(uuid4())
+        )
+
+        assert response.status_code == 204
+
+        commit_list = list(
+            Commit.objects.filter(
+                organization_id=project.organization_id,
+            ).select_related('author').order_by('-date_added')
+        )
+
+        assert len(commit_list) == 2
+
+        commit_list = list(
+            Commit.objects.filter(
+                organization_id=org2.id,
+            ).select_related('author').order_by('-date_added')
+        )
+        assert len(commit_list) == 0
+
 
 class PullRequestEventWebhook(APITestCase):
     def test_opened(self):
