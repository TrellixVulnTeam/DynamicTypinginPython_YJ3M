commit ea7f9eaf23028decd7fbfcb780f4b590999a3693
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Sun Mar 6 09:46:07 2016 -0800

    Implement wsgi.file_wrapper for static file delivery
    
    This is implemented in Django 1.8+, but backporting this for our use
    yields a 20% gain in throughput testing locally, and frees up blocking a
    python process for our 2.2MB vendor.js delivery since this work is now
    deferred to uWSGI instead of Django.

diff --git a/src/sentry/wsgi.py b/src/sentry/wsgi.py
index c1746b46ec..b32ffa77f0 100644
--- a/src/sentry/wsgi.py
+++ b/src/sentry/wsgi.py
@@ -26,7 +26,27 @@ if settings.SESSION_FILE_PATH and not os.path.exists(settings.SESSION_FILE_PATH)
     except OSError:
         pass
 
+from django.core.handlers.wsgi import WSGIHandler
+
+
+class FileWrapperWSGIHandler(WSGIHandler):
+    """A WSGIHandler implementation that handles a StreamingHttpResponse
+    from django to leverage wsgi.file_wrapper for delivering large streaming
+    responses.
+
+    Note: this was added natively into Django 1.8, so if by some reason,
+    we upgraded, this wouldn't be relevant anymore."""
+    def __call__(self, environ, start_response):
+        response = super(FileWrapperWSGIHandler, self).__call__(environ, start_response)
+        if response.streaming:
+            try:
+                response = environ['wsgi.file_wrapper'](response.streaming_content)
+            except KeyError:
+                # In our case, we're shipping with uwsgi, so it's safer to assume
+                # that wsgi.file_wrapper does exist. It'd be exceptional otherwise.
+                pass
+        return response
+
 # Run WSGI handler for the application
-from django.core.wsgi import get_wsgi_application
 from raven.contrib.django.middleware.wsgi import Sentry
-application = Sentry(get_wsgi_application())
+application = Sentry(FileWrapperWSGIHandler())
