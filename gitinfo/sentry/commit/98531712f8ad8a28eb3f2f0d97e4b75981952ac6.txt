commit 98531712f8ad8a28eb3f2f0d97e4b75981952ac6
Author: Ben Vinegar <ben@benv.ca>
Date:   Tue Feb 2 18:22:33 2016 -0800

    Use more enzyme testing utils (shallow rendering, context stubbing)

diff --git a/tests/js/spec/views/groupDetails/seenBy.spec.jsx b/tests/js/spec/views/groupDetails/seenBy.spec.jsx
index 2a626acc23..ca61b7bbd6 100644
--- a/tests/js/spec/views/groupDetails/seenBy.spec.jsx
+++ b/tests/js/spec/views/groupDetails/seenBy.spec.jsx
@@ -1,13 +1,8 @@
 import React from 'react';
-import {mount} from 'enzyme';
+import {shallow} from 'enzyme';
 
 import GroupSeenBy from 'app/views/groupDetails/seenBy';
 import ConfigStore from 'app/stores/configStore';
-import Gravatar from 'app/components/gravatar';
-
-
-import stubContext from '../../../helpers/stubContext';
-import stubReactComponent from '../../../helpers/stubReactComponent';
 
 describe('OrganizationTeams', function() {
 
@@ -15,7 +10,6 @@ describe('OrganizationTeams', function() {
     this.sandbox = sinon.sandbox.create();
 
     this.sandbox.stub(ConfigStore, 'get').returns([]);
-    stubReactComponent(this.sandbox, [Gravatar]);
   });
 
   afterEach(function() {
@@ -24,30 +18,31 @@ describe('OrganizationTeams', function() {
 
   describe('render()', function() {
     it('should return null if seenBy is falsy', function () {
-      let ContextStubbedGroupSeenBy = stubContext(GroupSeenBy, {
-        group: {id: '1337'},
-        project: {},
-        team: {}
+      let wrapper = shallow(<GroupSeenBy/>, {
+        context: {
+          group: {id: '1337'},
+          project: {id: '2448'},
+          team: {id: '3559'}
+        }
       });
-
-      let wrapper = mount(<ContextStubbedGroupSeenBy/>);
       expect(wrapper.children()).to.have.length(0);
     });
 
     it('should return a list of each user that saw', function () {
-      let ContextStubbedGroupSeenBy = stubContext(GroupSeenBy, {
-        group: {
-          id: '1337',
-          seenBy: [
-            {id: 1, email: 'jane@example.com'},
-            {id: 2, email: 'john@example.com'}
-          ]
-        },
-        project: {},
-        team: {}
+      let wrapper = shallow(<GroupSeenBy/>, {
+        context: {
+          group: {
+            id: '1337',
+            seenBy: [
+              {id: 1, email: 'jane@example.com'},
+              {id: 2, email: 'john@example.com'}
+            ]
+          },
+          project: {id: '2448'},
+          team: {id: '3559'}
+        }
       });
 
-      let wrapper = mount(<ContextStubbedGroupSeenBy/>);
       expect(wrapper.find('li')).to.have.length(3); // +1 for "icon-eye"
     });
   });
diff --git a/tests/js/spec/views/organizationTeams.spec.jsx b/tests/js/spec/views/organizationTeams.spec.jsx
index ce6fb524a7..80f9d4da3a 100644
--- a/tests/js/spec/views/organizationTeams.spec.jsx
+++ b/tests/js/spec/views/organizationTeams.spec.jsx
@@ -1,13 +1,8 @@
 import React from 'react';
-import TestUtils from 'react-addons-test-utils';
+import {shallow} from 'enzyme';
+
 import {Client} from 'app/api';
 import OrganizationTeams from 'app/views/organizationTeams';
-import ExpandedTeamList from 'app/views/organizationTeams/expandedTeamList';
-import AllTeamsList from 'app/views/organizationTeams/allTeamsList';
-import OrganizationHomeContainer from 'app/components/organizations/homeContainer';
-
-import stubReactComponent from '../../helpers/stubReactComponent';
-import stubContext from '../../helpers/stubContext';
 
 describe('OrganizationTeams', function() {
 
@@ -15,13 +10,6 @@ describe('OrganizationTeams', function() {
     this.sandbox = sinon.sandbox.create();
 
     this.stubbedApiRequest = this.sandbox.stub(Client.prototype, 'request');
-    stubReactComponent(this.sandbox, [ExpandedTeamList, AllTeamsList, OrganizationHomeContainer]);
-
-    let ContextStubbedOrganizationTeams = stubContext(OrganizationTeams, {
-      organization: {id: '1337'}
-    });
-
-    this.Element = <ContextStubbedOrganizationTeams params={{orgId:'123'}}/>;
   });
 
   afterEach(function() {
@@ -30,7 +18,9 @@ describe('OrganizationTeams', function() {
 
   describe('fetchStats()', function() {
     it('should make a request to the organizations endpoint', function () {
-      let organizationTeams = TestUtils.renderIntoDocument(this.Element).refs.wrapped;
+      let organizationTeams = shallow(<OrganizationTeams params={{orgId:'123'}}/>, {
+        organization: {id: '1337'}
+      }).instance();
 
       // NOTE: creation of OrganizationTeams causes a bunch of API requests to fire ...
       //       reset the request stub so that we can get an accurate count
diff --git a/tests/js/spec/views/stream.spec.jsx b/tests/js/spec/views/stream.spec.jsx
index 8a279193ad..6501f1f67b 100644
--- a/tests/js/spec/views/stream.spec.jsx
+++ b/tests/js/spec/views/stream.spec.jsx
@@ -1,5 +1,6 @@
 import React from 'react';
 import TestUtils from 'react-addons-test-utils';
+import {shallow} from 'enzyme';
 import Cookies from 'js-cookie';
 import Sticky from 'react-sticky';
 import {Client} from 'app/api';
@@ -13,8 +14,6 @@ import StreamActions from 'app/views/stream/actions';
 import stubReactComponents from '../../helpers/stubReactComponent';
 import stubContext from '../../helpers/stubContext';
 
-const findWithClass = TestUtils.findRenderedDOMComponentWithClass;
-const findWithType = TestUtils.findRenderedComponentWithType;
 
 const DEFAULT_LINKS_HEADER =
   '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/issues/?cursor=1443575731:0:1>; rel="previous"; results="false"; cursor="1443575731:0:1", ' +
@@ -35,24 +34,27 @@ describe('Stream', function() {
     stubReactComponents(this.sandbox, [StreamGroup, StreamFilters, StreamSidebar, StreamActions, Sticky]);
 
     this.projectContext = {
+      id: '3559',
       slug: 'foo-project',
       firstEvent: true
     };
 
-    let ContextStubbedStream = stubContext(Stream, {
-      project: this.projectContext,
-      organization: {
-        slug: 'foo-org'
-      },
-      team: {}
-    });
+    let props = {
+      setProjectNavSection: function () {},
+      location: {query: {query: 'is:unresolved'}, search: 'query=is:unresolved'},
+      params: {orgId: '123', projectId: '456'}
+    };
 
-    this.Element = (
-      <ContextStubbedStream
-        setProjectNavSection={function () {}}
-        location={{query:{query: 'is:unresolved'}, search: 'query=is:unresolved'}}
-        params={{orgId: '123', projectId: '456'}}/>
-    );
+    this.wrapper = shallow(<Stream {...props}/>, {
+      context: {
+        project: this.projectContext,
+        organization: {
+          id: '1337',
+          slug: 'foo-org'
+        },
+        team: {id: '2448'}
+      }
+    });
   });
 
   afterEach(function() {
@@ -66,7 +68,7 @@ describe('Stream', function() {
       });
 
       it('should reset the poller endpoint and sets cursor URL', function() {
-        let stream = TestUtils.renderIntoDocument(this.Element).refs.wrapped;
+        let stream = this.wrapper.instance();
         stream.state.pageLinks = DEFAULT_LINKS_HEADER;
         stream.state.realtimeActive = true;
         stream.fetchData();
@@ -77,7 +79,7 @@ describe('Stream', function() {
       });
 
       it('should not enable the poller if realtimeActive is false', function () {
-        let stream = TestUtils.renderIntoDocument(this.Element).refs.wrapped;
+        let stream = this.wrapper.instance();
         stream.state.pageLinks = DEFAULT_LINKS_HEADER;
         stream.state.realtimeActive = false;
         stream.fetchData();
@@ -86,7 +88,7 @@ describe('Stream', function() {
       });
 
       it('should not enable the poller if the \'previous\' link has results', function () {
-        let stream = TestUtils.renderIntoDocument(this.Element).refs.wrapped;
+        let stream = this.wrapper.instance();
         stream.state.pageLinks =
           '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/issues/?cursor=1443575731:0:1>; rel="previous"; results="true"; cursor="1443575731:0:1", ' +
           '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/issues/?cursor=1443575731:0:0>; rel="next"; results="true"; cursor="1443575731:0:0';
@@ -111,10 +113,11 @@ describe('Stream', function() {
       });
 
       // NOTE: fetchData called once after render automatically
-      let stream = TestUtils.renderIntoDocument(this.Element).refs.wrapped;
+      let stream = this.wrapper.instance();
 
       // 2nd fetch should call cancel
       stream.fetchData();
+      stream.fetchData();
 
       expect(requestCancel.calledOnce).to.be.ok;
       expect(stream.lastRequest).to.be.ok;
@@ -131,70 +134,63 @@ describe('Stream', function() {
   describe('render()', function() {
 
     it('displays a loading indicator when component is loading', function() {
-      let stream = TestUtils.renderIntoDocument(this.Element).refs.wrapped;
-      stream.setState({loading: true});
-      let expected = findWithClass(stream, 'loading');
-
-      expect(expected).to.be.ok;
+      let wrapper = this.wrapper;
+      wrapper.setState({loading: true});
+      expect(wrapper.find('.loading')).to.be.ok;
     });
 
     it('displays a loading indicator when data is loading', function() {
-      let stream = TestUtils.renderIntoDocument(this.Element).refs.wrapped;
-      stream.setState({dataLoading: true});
-      let expected = findWithClass(stream, 'loading');
-
-      expect(expected).to.be.ok;
+      let wrapper = this.wrapper;
+      wrapper.setState({dataLoading: true});
+      expect(wrapper.find('.loading')).to.be.ok;
     });
 
     it('displays an error when component has errored', function() {
-      let stream = TestUtils.renderIntoDocument(this.Element).refs.wrapped;
-      stream.setState({
+      let wrapper = this.wrapper;
+      wrapper.setState({
         error: true,
         loading: false,
         dataLoading: false,
       });
-      let expected = findWithType(stream, LoadingError);
-      expect(expected).to.be.ok;
+      expect(wrapper.find(LoadingError).length).to.be.ok;
     });
 
     it('displays the group list', function() {
-      let stream = TestUtils.renderIntoDocument(this.Element).refs.wrapped;
-      stream.setState({
+      let wrapper = this.wrapper;
+      wrapper.setState({
         error: false,
         groupIds: ['1'],
         loading: false,
         dataLoading: false,
       });
-      let expected = findWithClass(stream, 'group-list');
-      expect(expected).to.be.ok;
+      expect(wrapper.find('.group-list').length).to.be.ok;
     });
 
     it('displays empty with no ids', function() {
-      let stream = TestUtils.renderIntoDocument(this.Element).refs.wrapped;
+      let wrapper = this.wrapper;
 
-      stream.setState({
+      wrapper.setState({
         error: false,
         groupIds: [],
         loading: false,
         dataLoading: false,
       });
-      let expected = findWithClass(stream, 'empty-stream');
-      expect(expected).to.be.ok;
+      expect(wrapper.find('.empty-stream').length).to.be.ok;
     });
 
     it('shows "awaiting events" message when no events have been sent', function() {
-      let stream = TestUtils.renderIntoDocument(this.Element).refs.wrapped;
+      let wrapper = this.wrapper;
 
       this.projectContext.firstEvent = false; // Set false for this test only
 
-      stream.setState({
+      wrapper.setState({
         error: false,
         groupIds: [],
         loading: false,
         dataLoading: false,
       });
-      let expected = findWithClass(stream, 'awaiting-events');
-      expect(expected).to.be.ok;
+
+      expect(this.wrapper.find('.awaiting-events').length).to.equal(1);
 
       this.projectContext.firstEvent = true; // Reset for other tests
     });
@@ -207,24 +203,18 @@ describe('Stream', function() {
       Cookies.remove('realtimeActive');
     });
 
-    it('reads the realtimeActive state from a cookie', function(done) {
+    it('reads the realtimeActive state from a cookie', function() {
       Cookies.set('realtimeActive', 'false');
 
-      let stream = TestUtils.renderIntoDocument(this.Element).refs.wrapped;
-      setTimeout(() => {
-        expect(stream.state.realtimeActive).to.not.be.ok;
-        done();
-      });
+      let stream = this.wrapper.instance();
+      expect(stream.getInitialState()).to.have.property('realtimeActive', false);
     });
 
-    it('reads the true realtimeActive state from a cookie', function(done) {
+    it('reads the true realtimeActive state from a cookie', function() {
       Cookies.set('realtimeActive', 'true');
-      let stream = TestUtils.renderIntoDocument(this.Element).refs.wrapped;
 
-      setTimeout(() => {
-        expect(stream.state.realtimeActive).to.be.ok;
-        done();
-      });
+      let stream = this.wrapper.instance();
+      expect(stream.getInitialState()).to.have.property('realtimeActive', true);
     });
 
   });
@@ -232,7 +222,7 @@ describe('Stream', function() {
   describe('onRealtimeChange', function() {
 
     it('sets the realtimeActive state', function() {
-      let stream = TestUtils.renderIntoDocument(this.Element).refs.wrapped;
+      let stream = this.wrapper.instance();
       stream.state.realtimeActive = false;
       stream.onRealtimeChange(true);
       expect(stream.state.realtimeActive).to.eql(true);
@@ -264,7 +254,7 @@ describe('Stream', function() {
         sort: 'date',
       };
       for (let property in expected) {
-        let stream = TestUtils.renderIntoDocument(this.Element).refs.wrapped;
+        let stream = this.wrapper.instance();
         let actual = stream.getInitialState();
 
         expect(actual[property]).to.eql(expected[property]);
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/stream/searchBar.spec.jsx
index 6537c5c8f8..a07e771de7 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/stream/searchBar.spec.jsx
@@ -1,35 +1,28 @@
 import React from 'react';
 import ReactDOM from 'react-dom';
 import TestUtils from 'react-addons-test-utils';
+import {shallow, mount} from 'enzyme';
+
 import {Client} from 'app/api';
 import SearchBar from 'app/views/stream/searchBar';
-import SearchDropdown from 'app/views/stream/searchDropdown';
 import StreamTagStore from 'app/stores/streamTagStore';
-import stubReactComponents from '../../../helpers/stubReactComponent';
-
-import stubContext from '../../../helpers/stubContext';
-
-let findWithClass = TestUtils.findRenderedDOMComponentWithClass;
 
 describe('SearchBar', function() {
 
-  beforeEach(function() {
+  beforeEach(function () {
     StreamTagStore.reset();
 
     this.sandbox = sinon.sandbox.create();
 
     this.sandbox.stub(Client.prototype, 'request');
-
-    stubReactComponents(this.sandbox, [SearchDropdown]);
-    this.ContextStubbedSearchBar = stubContext(SearchBar);
   });
 
-  afterEach(function() {
+  afterEach(function () {
     this.sandbox.restore();
   });
 
   describe('getQueryTerms()', function () {
-    it ('should extract query terms from a query string', function () {
+    it('should extract query terms from a query string', function () {
       let query = 'tagname: ';
       expect(SearchBar.getQueryTerms(query, query.length)).to.eql(['tagname:']);
 
@@ -54,23 +47,23 @@ describe('SearchBar', function() {
     });
   });
 
-  describe('clearSearch()', function() {
+  describe('clearSearch()', function () {
 
-    it('clears the query', function() {
+    it('clears the query', function () {
       let props = {
         orgId: '123',
         projectId: '456',
         query: 'is:unresolved ruby',
         defaultQuery: 'is:unresolved'
       };
-      let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
+      let searchBar = shallow(<SearchBar {...props} />).instance();
 
-      wrapper.clearSearch();
+      searchBar.clearSearch();
 
-      expect(wrapper.state.query).to.equal('');
+      expect(searchBar.state.query).to.equal('');
     });
 
-    it('calls onSearch()', function(done) {
+    it('calls onSearch()', function (done) {
       let props = {
         orgId: '123',
         projectId: '456',
@@ -78,9 +71,9 @@ describe('SearchBar', function() {
         defaultQuery: 'is:unresolved',
         onSearch: this.sandbox.spy()
       };
-      let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
+      let searchBar = shallow(<SearchBar {...props} />).instance();
 
-      wrapper.clearSearch();
+      searchBar.clearSearch();
 
       setTimeout(() => {
         expect(props.onSearch.calledWith('')).to.be.true;
@@ -90,30 +83,30 @@ describe('SearchBar', function() {
 
   });
 
-  describe('onQueryFocus()', function() {
+  describe('onQueryFocus()', function () {
 
-    it('displays the drop down', function() {
-      let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar orgId="123" projectId="456"/>).refs.wrapped;
-      expect(wrapper.state.dropdownVisible).to.be.false;
+    it('displays the drop down', function () {
+      let searchBar = shallow(<SearchBar orgId="123" projectId="456"/>).instance();
+      expect(searchBar.state.dropdownVisible).to.be.false;
 
-      wrapper.onQueryFocus();
+      searchBar.onQueryFocus();
 
-      expect(wrapper.state.dropdownVisible).to.be.true;
+      expect(searchBar.state.dropdownVisible).to.be.true;
     });
 
   });
 
-  describe('onQueryBlur()', function() {
+  describe('onQueryBlur()', function () {
 
-    it('hides the drop down', function() {
-      let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar orgId="123" projectId="456"/>).refs.wrapped;
-      wrapper.state.dropdownVisible = true;
+    it('hides the drop down', function () {
+      let searchBar = shallow(<SearchBar orgId="123" projectId="456"/>).instance();
+      searchBar.state.dropdownVisible = true;
 
       let clock = this.sandbox.useFakeTimers();
-      wrapper.onQueryBlur();
+      searchBar.onQueryBlur();
       clock.tick(201); // doesn't close until 200ms
 
-      expect(wrapper.state.dropdownVisible).to.be.false;
+      expect(searchBar.state.dropdownVisible).to.be.false;
     });
 
   });
@@ -122,10 +115,10 @@ describe('SearchBar', function() {
     describe('escape', function () {
       it('blurs the input', function () {
         // needs to be rendered into document.body or cannot query document.activeElement
-        let wrapper = ReactDOM.render(<this.ContextStubbedSearchBar orgId="123" projectId="456"/>, document.body).refs.wrapped;
-        wrapper.state.dropdownVisible = true;
+        let searchBar = ReactDOM.render(<SearchBar orgId="123" projectId="456"/>, document.body);
+        searchBar.state.dropdownVisible = true;
 
-        let input = ReactDOM.findDOMNode(wrapper.refs.searchInput);
+        let input = ReactDOM.findDOMNode(searchBar.refs.searchInput);
 
         input.focus();
 
@@ -138,46 +131,47 @@ describe('SearchBar', function() {
     });
   });
 
-  describe('render()', function() {
+  describe('render()', function () {
 
-    it('invokes onSearch() when submitting the form', function() {
+    it('invokes onSearch() when submitting the form', function () {
       let stubbedOnSearch = this.sandbox.spy();
-      let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar onSearch={stubbedOnSearch} orgId="123" projectId="456"/>).refs.wrapped;
+      let wrapper = mount(<SearchBar onSearch={stubbedOnSearch} orgId="123" projectId="456"/>);
 
-      TestUtils.Simulate.submit(wrapper.refs.searchForm, {preventDefault() {}});
+      wrapper.find('form').simulate('submit', {
+        preventDefault() {
+        }
+      });
 
       expect(stubbedOnSearch.called).to.be.true;
     });
 
-    it('invokes onSearch() when search is cleared', function(done) {
+    it('invokes onSearch() when search is cleared', function (done) {
       let props = {
         orgId: '123',
         projectId: '456',
         query: 'is:unresolved',
         onSearch: this.sandbox.spy()
       };
-      let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
+      let wrapper = mount(<SearchBar {...props} />);
 
-      let cancelButton = findWithClass(wrapper, 'search-clear-form');
-      TestUtils.Simulate.click(cancelButton);
+      wrapper.find('.search-clear-form').simulate('click');
 
       setTimeout(function () {
         expect(props.onSearch.calledWith('')).to.be.true;
         done();
       });
     });
+  });
 
-    it('handles an empty query', function () {
-      let props = {
-        orgId: '123',
-        projectId: '456',
-        query: '',
-        defaultQuery: 'is:unresolved'
-      };
-      let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
-      expect(wrapper.state.query).to.eql('');
-    });
-
+  it('handles an empty query', function () {
+    let props = {
+      orgId: '123',
+      projectId: '456',
+      query: '',
+      defaultQuery: 'is:unresolved'
+    };
+    let wrapper = mount(<SearchBar {...props} />);
+    expect(wrapper.state('query')).to.eql('');
   });
 
   describe('updateAutoCompleteItems()', function() {
@@ -187,11 +181,11 @@ describe('SearchBar', function() {
         projectId: '456',
         query: '',
       };
-      let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
-      wrapper.updateAutoCompleteItems();
-      expect(wrapper.state.searchTerm).to.eql('');
-      expect(wrapper.state.searchItems).to.eql(wrapper.props.defaultSearchItems);
-      expect(wrapper.state.activeSearchItem).to.eql(0);
+      let searchBar = mount(<SearchBar {...props} />).instance();
+      searchBar.updateAutoCompleteItems();
+      expect(searchBar.state.searchTerm).to.eql('');
+      expect(searchBar.state.searchItems).to.eql(searchBar.props.defaultSearchItems);
+      expect(searchBar.state.activeSearchItem).to.eql(0);
     });
 
     it('sets state when incomplete tag', function() {
@@ -200,11 +194,11 @@ describe('SearchBar', function() {
         projectId: '456',
         query: 'fu',
       };
-      let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
-      wrapper.updateAutoCompleteItems();
-      expect(wrapper.state.searchTerm).to.eql('fu');
-      expect(wrapper.state.searchItems).to.eql([]);
-      expect(wrapper.state.activeSearchItem).to.eql(0);
+      let searchBar = mount(<SearchBar {...props} />).instance();
+      searchBar.updateAutoCompleteItems();
+      expect(searchBar.state.searchTerm).to.eql('fu');
+      expect(searchBar.state.searchItems).to.eql([]);
+      expect(searchBar.state.activeSearchItem).to.eql(0);
     });
 
     it('sets state with complete tag', function() {
@@ -213,11 +207,11 @@ describe('SearchBar', function() {
         projectId: '456',
         query: 'url:"fu"',
       };
-      let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
-      wrapper.updateAutoCompleteItems();
-      expect(wrapper.state.searchTerm).to.eql('"fu"');
-      expect(wrapper.state.searchItems).to.eql([]);
-      expect(wrapper.state.activeSearchItem).to.eql(0);
+      let searchBar = mount(<SearchBar {...props} />).instance();
+      searchBar.updateAutoCompleteItems();
+      expect(searchBar.state.searchTerm).to.eql('"fu"');
+      expect(searchBar.state.searchItems).to.eql([]);
+      expect(searchBar.state.activeSearchItem).to.eql(0);
     });
 
     it('sets state when incomplete tag as second input', function() {
@@ -226,13 +220,13 @@ describe('SearchBar', function() {
         projectId: '456',
         query: 'is:unresolved fu',
       };
-      let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
-      wrapper.updateAutoCompleteItems();
-      expect(wrapper.state.searchTerm).to.eql('unresolved');
-      expect(wrapper.state.searchItems.length).to.eql(1);
-      expect(wrapper.state.searchItems[0].desc).to.eql('unresolved');
-      expect(wrapper.state.searchItems[0].value).to.eql('unresolved');
-      expect(wrapper.state.activeSearchItem).to.eql(0);
+      let searchBar = mount(<SearchBar {...props} />).instance();
+      searchBar.updateAutoCompleteItems();
+      expect(searchBar.state.searchTerm).to.eql('unresolved');
+      expect(searchBar.state.searchItems.length).to.eql(1);
+      expect(searchBar.state.searchItems[0].desc).to.eql('unresolved');
+      expect(searchBar.state.searchItems[0].value).to.eql('unresolved');
+      expect(searchBar.state.activeSearchItem).to.eql(0);
     });
 
     it('sets state when value has colon', function() {
@@ -241,11 +235,11 @@ describe('SearchBar', function() {
         projectId: '456',
         query: 'url:"http://example.com"',
       };
-      let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
-      wrapper.updateAutoCompleteItems();
-      expect(wrapper.state.searchTerm).to.eql('"http://example.com"');
-      expect(wrapper.state.searchItems).to.eql([]);
-      expect(wrapper.state.activeSearchItem).to.eql(0);
+      let searchBar = mount(<SearchBar {...props} />).instance();
+      searchBar.updateAutoCompleteItems();
+      expect(searchBar.state.searchTerm).to.eql('"http://example.com"');
+      expect(searchBar.state.searchItems).to.eql([]);
+      expect(searchBar.state.activeSearchItem).to.eql(0);
     });
   });
 
