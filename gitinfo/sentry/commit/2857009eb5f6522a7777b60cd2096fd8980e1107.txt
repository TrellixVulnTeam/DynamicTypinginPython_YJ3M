commit 2857009eb5f6522a7777b60cd2096fd8980e1107
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Feb 22 12:38:42 2019 -0800

    fix(forms): Fix invalid query selectors (#12161)
    
    Fix invalid query selectors in settings. Some fields/titles have invalid characters (e.g. spaces, `:`, etc)
    for an `id` attribute. Use `slugify()` function on these fields.
    
    Also adds a try/catch to `scrollToElement` call in case there are other special characters not captured in our slugify function.
    
    Fixes JAVASCRIPT-45J

diff --git a/src/sentry/static/sentry/app/utils/sanitizeQuerySelector.jsx b/src/sentry/static/sentry/app/utils/sanitizeQuerySelector.jsx
new file mode 100644
index 0000000000..84fdc1afe4
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/sanitizeQuerySelector.jsx
@@ -0,0 +1,12 @@
+/**
+ * Sanitizes a string so that it can be used as a query selector
+ *
+ * e.g. `feedback:branding` --> `feedback-branding` or
+ * 'Data Privacy' --> 'Data-Privacy'
+ *
+ * @param {String} str The string to sanitize
+ * @return {String} Returns a sanitized string (replace
+ */
+export function sanitizeQuerySelector(str) {
+  return typeof str === 'string' ? str.replace(/[ :]+/g, '-') : '';
+}
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
index 37a2898d6f..d1c60a2c85 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
@@ -14,6 +14,7 @@ import InlineSvg from 'app/components/inlineSvg';
 import PanelAlert from 'app/components/panels/panelAlert';
 import Spinner from 'app/views/settings/components/forms/spinner';
 import returnButton from 'app/views/settings/components/forms/returnButton';
+import {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';
 import space from 'app/styles/space';
 
 const FormFieldErrorReason = styled.div`
@@ -254,7 +255,7 @@ class FormField extends React.Component {
   }
 
   getId() {
-    return this.props.name;
+    return sanitizeQuerySelector(this.props.name);
   }
 
   getModel() {
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
index 21473e2cea..eaa1c70563 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
@@ -1,11 +1,13 @@
 import {Box} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
+import * as Sentry from '@sentry/browser';
 import scrollToElement from 'scroll-to-element';
 
+import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {defined} from 'app/utils';
 import FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';
-import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';
 
 class JsonForm extends React.Component {
   static propTypes = {
@@ -84,7 +86,14 @@ class JsonForm extends React.Component {
     // Push onto callback queue so it runs after the DOM is updated,
     // this is required when navigating from a different page so that
     // the element is rendered on the page before trying to getElementById.
-    scrollToElement(hash, {align: 'middle', offset: -100});
+    try {
+      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {
+        align: 'middle',
+        offset: -100,
+      });
+    } catch (err) {
+      Sentry.captureException(err);
+    }
   }
 
   render() {
@@ -188,7 +197,7 @@ class FormPanel extends React.Component {
     const shouldRenderHeader = typeof renderHeader === 'function';
 
     return (
-      <Panel key={title} id={title}>
+      <Panel key={title} id={sanitizeQuerySelector(title)}>
         <PanelHeader>{title}</PanelHeader>
         <PanelBody>
           {shouldRenderHeader && renderHeader({title, fields})}
diff --git a/tests/js/spec/utils/sanitizeQuerySelector.spec.jsx b/tests/js/spec/utils/sanitizeQuerySelector.spec.jsx
new file mode 100644
index 0000000000..d4b001723f
--- /dev/null
+++ b/tests/js/spec/utils/sanitizeQuerySelector.spec.jsx
@@ -0,0 +1,15 @@
+import {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';
+
+describe('sanitizeQuerySelector', function() {
+  it('replaces all spaces with a hyphen', function() {
+    expect(sanitizeQuerySelector('foo bar baz bar foo')).toBe('foo-bar-baz-bar-foo');
+  });
+
+  it('replaces colons with a hyphen', function() {
+    expect(sanitizeQuerySelector('foo:bar:baz bar foo')).toBe('foo-bar-baz-bar-foo');
+  });
+
+  it('returns an empty string if passed undefined', function() {
+    expect(sanitizeQuerySelector()).toBe('');
+  });
+});
diff --git a/tests/js/spec/views/projectFilters.spec.jsx b/tests/js/spec/views/projectFilters.spec.jsx
index 81dc33a30e..eaac0daab2 100644
--- a/tests/js/spec/views/projectFilters.spec.jsx
+++ b/tests/js/spec/views/projectFilters.spec.jsx
@@ -197,7 +197,7 @@ describe('ProjectFilters', function() {
     });
 
     wrapper
-      .find('TextArea[id="filters:blacklisted_ips"]')
+      .find('TextArea[name="filters:blacklisted_ips"]')
       .simulate('change', {target: {value: 'test\ntest2'}})
       .simulate('blur');
     expect(mock.mock.calls[0][0]).toBe(PROJECT_URL);
@@ -207,10 +207,10 @@ describe('ProjectFilters', function() {
   });
 
   it('filter by release/error message are not enabled', function() {
-    expect(wrapper.find('TextArea[id="filters:releases"][disabled]')).toHaveLength(1);
-    expect(wrapper.find('TextArea[id="filters:error_messages"][disabled]')).toHaveLength(
-      1
-    );
+    expect(wrapper.find('TextArea[name="filters:releases"][disabled]')).toHaveLength(1);
+    expect(
+      wrapper.find('TextArea[name="filters:error_messages"][disabled]')
+    ).toHaveLength(1);
   });
 
   it('has custom inbound filters with flag + can change', function() {
@@ -233,8 +233,8 @@ describe('ProjectFilters', function() {
       );
     });
 
-    expect(wrapper.find('TextArea[id="filters:releases"]')).toHaveLength(1);
-    expect(wrapper.find('TextArea[id="filters:error_messages"]')).toHaveLength(1);
+    expect(wrapper.find('TextArea[name="filters:releases"]')).toHaveLength(1);
+    expect(wrapper.find('TextArea[name="filters:error_messages"]')).toHaveLength(1);
 
     const mock = MockApiClient.addMockResponse({
       url: PROJECT_URL,
@@ -242,7 +242,7 @@ describe('ProjectFilters', function() {
     });
 
     wrapper
-      .find('TextArea[id="filters:releases"]')
+      .find('TextArea[name="filters:releases"]')
       .simulate('change', {target: {value: 'release\nrelease2'}})
       .simulate('blur');
     expect(mock.mock.calls[0][0]).toBe(PROJECT_URL);
@@ -251,7 +251,7 @@ describe('ProjectFilters', function() {
     );
 
     wrapper
-      .find('TextArea[id="filters:error_messages"]')
+      .find('TextArea[name="filters:error_messages"]')
       .simulate('change', {target: {value: 'error\nerror2'}})
       .simulate('blur');
     expect(mock.mock.calls[1][1].data.options['filters:error_messages']).toBe(
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/__snapshots__/sentryApplicationDetails.spec.jsx.snap b/tests/js/spec/views/settings/organizationDeveloperSettings/__snapshots__/sentryApplicationDetails.spec.jsx.snap
index 0c0f7cdd1e..d70974371e 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/__snapshots__/sentryApplicationDetails.spec.jsx.snap
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/__snapshots__/sentryApplicationDetails.spec.jsx.snap
@@ -645,16 +645,16 @@ exports[`Sentry Application Details edit existing application renders() it shows
                         title="Application Details"
                       >
                         <Panel
-                          id="Application Details"
+                          id="Application-Details"
                           key="Application Details"
                         >
                           <Component
                             className="css-yahxlu-Panel e1laxa7d0"
-                            id="Application Details"
+                            id="Application-Details"
                           >
                             <div
                               className="css-yahxlu-Panel e1laxa7d0"
-                              id="Application Details"
+                              id="Application-Details"
                             >
                               <PanelHeader>
                                 <Component
@@ -19473,16 +19473,16 @@ exports[`Sentry Application Details new sentry application renders() it shows em
                         title="Application Details"
                       >
                         <Panel
-                          id="Application Details"
+                          id="Application-Details"
                           key="Application Details"
                         >
                           <Component
                             className="css-yahxlu-Panel e1laxa7d0"
-                            id="Application Details"
+                            id="Application-Details"
                           >
                             <div
                               className="css-yahxlu-Panel e1laxa7d0"
-                              id="Application Details"
+                              id="Application-Details"
                             >
                               <PanelHeader>
                                 <Component
