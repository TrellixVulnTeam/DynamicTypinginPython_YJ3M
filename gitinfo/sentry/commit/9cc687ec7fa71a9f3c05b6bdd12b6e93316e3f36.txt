commit 9cc687ec7fa71a9f3c05b6bdd12b6e93316e3f36
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Fri Oct 19 11:45:17 2018 -0700

    ref(acl): Split Feature component into Feature / Access (#10177)

diff --git a/src/sentry/static/sentry/app/components/acl/access.jsx b/src/sentry/static/sentry/app/components/acl/access.jsx
new file mode 100644
index 0000000000..3998337483
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/acl/access.jsx
@@ -0,0 +1,144 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import Reflux from 'reflux';
+import createReactClass from 'create-react-class';
+
+import {t} from 'app/locale';
+import Alert from 'app/components/alert';
+import ConfigStore from 'app/stores/configStore';
+import SentryTypes from 'app/sentryTypes';
+
+const DEFAULT_NO_ACCESS_MESSAGE = (
+  <Alert type="error" icon="icon-circle-info">
+    {t('You do not have sufficient permissions to access this.')}
+  </Alert>
+);
+
+/**
+ * Component to handle access restrictions.
+ */
+class Access extends React.Component {
+  static propTypes = {
+    organization: SentryTypes.Organization,
+
+    /**
+     * User Configuration from ConfigStore
+     */
+    configUser: PropTypes.object,
+
+    /**
+     * List of required access levels
+     */
+    access: PropTypes.arrayOf(PropTypes.string),
+
+    /**
+     * Should the component require all access levels or just one or more.
+     */
+    requireAll: PropTypes.bool,
+
+    /**
+     * Requires superuser
+     */
+    isSuperuser: PropTypes.bool,
+
+    /**
+     * Custom renderer function for "no access" message OR `true` to use
+     * default message. `false` will suppress message.
+     */
+    renderNoAccessMessage: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
+
+    /**
+     * If children is a function then will be treated as a render prop and
+     * passed this object:
+     *
+     *   {
+     *     hasAccess: bool,
+     *     isSuperuser: bool,
+     *   }
+     *
+     * The other interface is more simple, only show `children` if the user has
+     * the correct access.
+     */
+    children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),
+  };
+
+  static defaultProps = {
+    renderNoAccessMessage: false,
+    requireAll: true,
+    access: [],
+  };
+
+  render() {
+    const {
+      organization,
+      configUser,
+      access,
+      requireAll,
+      isSuperuser,
+      renderNoAccessMessage,
+      children,
+    } = this.props;
+
+    const {access: orgAccess} = organization || {access: []};
+    const method = requireAll ? 'every' : 'some';
+
+    const hasAccess = !access || access[method](acc => orgAccess.includes(acc));
+    const hasSuperuser = !!configUser.isSuperuser;
+
+    const renderProps = {
+      hasAccess,
+      hasSuperuser,
+    };
+
+    const render = hasAccess && (!isSuperuser || hasSuperuser);
+
+    if (!render && typeof renderNoAccessMessage === 'function') {
+      return renderNoAccessMessage(renderProps);
+    } else if (!render && renderNoAccessMessage) {
+      return DEFAULT_NO_ACCESS_MESSAGE;
+    }
+
+    if (typeof children === 'function') {
+      return children(renderProps);
+    }
+
+    return render ? children : null;
+  }
+}
+
+const AccessContainer = createReactClass({
+  displayName: 'AccessContainer',
+
+  // TODO(billy): We can derive org from latestContextStore if needed, but
+  // let's keep it simple for now and use the org from context
+  contextTypes: {
+    organization: SentryTypes.Organization,
+  },
+
+  mixins: [Reflux.listenTo(ConfigStore, 'onConfigStoreUpdate')],
+
+  getInitialState() {
+    return {
+      config: ConfigStore.getConfig() || {},
+    };
+  },
+
+  onConfigStoreUpdate(config) {
+    if (config === this.state.config) return;
+    this.setState({config});
+  },
+
+  render() {
+    const user = this.state.config.user || {};
+
+    return (
+      <Access
+        configUser={user}
+        organization={this.context.organization}
+        {...this.props}
+      />
+    );
+  },
+});
+
+export default AccessContainer;
diff --git a/src/sentry/static/sentry/app/components/feature.jsx b/src/sentry/static/sentry/app/components/acl/feature.jsx
similarity index 74%
rename from src/sentry/static/sentry/app/components/feature.jsx
rename to src/sentry/static/sentry/app/components/acl/feature.jsx
index c7d09799af..e411e39597 100644
--- a/src/sentry/static/sentry/app/components/feature.jsx
+++ b/src/sentry/static/sentry/app/components/acl/feature.jsx
@@ -15,22 +15,18 @@ const DEFAULT_NO_FEATURE_MESSAGE = (
 );
 
 /**
- * Interface to handle feature tags as well as user's organization access levels
+ * Component to handle feature flags.
  */
 class Feature extends React.Component {
   static propTypes = {
     organization: SentryTypes.Organization,
     project: SentryTypes.Project,
+
     /**
      * Configuration features from ConfigStore
      */
     configFeatures: PropTypes.arrayOf(PropTypes.string),
 
-    /**
-     * User Configuration from ConfigStore
-     */
-    configUser: PropTypes.object,
-
     /**
      * List of required feature tags. Note we do not enforce uniqueness of tags anywhere.
      * On the backend end, feature tags have a scope prefix string that is stripped out on the
@@ -38,23 +34,13 @@ class Feature extends React.Component {
      *
      * Use `organization:` or `project:` prefix strings to specify a feature with context.
      */
-    feature: PropTypes.arrayOf(PropTypes.string),
+    feature: PropTypes.arrayOf(PropTypes.string).isRequired,
 
     /**
-     * List of required access levels
-     */
-    access: PropTypes.arrayOf(PropTypes.string),
-
-    /**
-     * Should the feature require all feature tags/access levels or just one or more.
+     * Should the component require all features or just one or more.
      */
     requireAll: PropTypes.bool,
 
-    /**
-     * Requires superuser
-     */
-    isSuperuser: PropTypes.bool,
-
     /**
      * Custom renderer function for "no feature" message OR `true` to use default message.
      * `false` will suppress message.
@@ -63,13 +49,13 @@ class Feature extends React.Component {
 
     /**
      * If children is a function then will be treated as a render prop and passed this object:
+     *
      * {
      *   hasFeature: bool,
-     *   hasAccess: bool,
      * }
      *
      * The other interface is more simple, only show `children` if org/project has
-     * all the required feature AND access tags
+     * all the required feature.
      */
     children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),
   };
@@ -112,27 +98,15 @@ class Feature extends React.Component {
   };
 
   render() {
-    let {
-      children,
-      organization,
-      feature,
-      access,
-      configUser,
-      isSuperuser,
-      renderNoFeatureMessage,
-      requireAll,
-    } = this.props;
-    let {access: orgAccess} = organization || {access: []};
+    let {children, feature, renderNoFeatureMessage, requireAll} = this.props;
+
     let allFeatures = this.getAllFeatures();
     let method = requireAll ? 'every' : 'some';
     let hasFeature =
       !feature || feature[method](feat => this.hasFeature(feat, allFeatures));
-    let hasAccess = !access || access[method](acc => orgAccess.includes(acc));
-    let hasSuperuser = !isSuperuser || configUser.isSuperuser;
+
     let renderProps = {
       hasFeature,
-      hasAccess,
-      hasSuperuser,
     };
 
     if (!hasFeature && typeof renderNoFeatureMessage === 'function') {
@@ -145,22 +119,20 @@ class Feature extends React.Component {
       return children(renderProps);
     }
 
-    // if children is NOT a function,
-    // then only render `children` iff `features` and `access` passes
-    if (hasFeature && hasAccess && hasSuperuser) {
-      return children;
-    }
-
-    return null;
+    return hasFeature ? children : null;
   }
 }
 
 const FeatureContainer = createReactClass({
   displayName: 'FeatureContainer',
+
+  // TODO(billy): We can derive org/project from latestContextStore if needed,
+  // but let's keep it simple for now and use org/project from context
   contextTypes: {
     organization: SentryTypes.Organization,
     project: SentryTypes.Project,
   },
+
   mixins: [Reflux.listenTo(ConfigStore, 'onConfigStoreUpdate')],
 
   getInitialState() {
@@ -175,17 +147,13 @@ const FeatureContainer = createReactClass({
   },
 
   render() {
-    // TODO(billy): We can derive org/project from latestContextStore if needed, but
-    // let's keep it simple for now and use org/project from context
     let features = this.state.config.features
       ? Array.from(this.state.config.features)
       : [];
-    let user = this.state.config.user || {};
 
     return (
       <Feature
         configFeatures={features}
-        configUser={user}
         organization={this.context.organization}
         project={this.context.project}
         {...this.props}
diff --git a/src/sentry/static/sentry/app/components/group/sidebar.jsx b/src/sentry/static/sentry/app/components/group/sidebar.jsx
index 42f30cb29f..37b3203629 100644
--- a/src/sentry/static/sentry/app/components/group/sidebar.jsx
+++ b/src/sentry/static/sentry/app/components/group/sidebar.jsx
@@ -7,7 +7,7 @@ import classNames from 'classnames';
 import SentryTypes from 'app/sentryTypes';
 import ApiMixin from 'app/mixins/apiMixin';
 import SuggestedOwners from 'app/components/group/suggestedOwners';
-import Feature from 'app/components/feature';
+import Feature from 'app/components/acl/feature';
 import GroupParticipants from 'app/components/group/participants';
 import GroupReleaseStats from 'app/components/group/releaseStats';
 import ProjectState from 'app/mixins/projectState';
diff --git a/src/sentry/static/sentry/app/components/search/sources/commandSource.jsx b/src/sentry/static/sentry/app/components/search/sources/commandSource.jsx
index 529b985b0d..4f0716cf51 100644
--- a/src/sentry/static/sentry/app/components/search/sources/commandSource.jsx
+++ b/src/sentry/static/sentry/app/components/search/sources/commandSource.jsx
@@ -3,7 +3,7 @@ import React from 'react';
 
 import {createFuzzySearch} from 'app/utils/createFuzzySearch';
 import {openSudo} from 'app/actionCreators/modal';
-import Feature from 'app/components/feature';
+import Access from 'app/components/acl/access';
 
 const ACTIONS = [
   {
@@ -104,9 +104,9 @@ class CommandSource extends React.Component {
 }
 
 const CommandSourceWithFeature = props => (
-  <Feature isSuperuser>
+  <Access isSuperuser>
     {({hasSuperuser}) => <CommandSource {...props} isSuperuser={hasSuperuser} />}
-  </Feature>
+  </Access>
 );
 
 export default CommandSourceWithFeature;
diff --git a/src/sentry/static/sentry/app/components/sidebar/index.jsx b/src/sentry/static/sentry/app/components/sidebar/index.jsx
index ad69fc4b4a..ff66c597b7 100644
--- a/src/sentry/static/sentry/app/components/sidebar/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/index.jsx
@@ -12,7 +12,7 @@ import {load as loadIncidents} from 'app/actionCreators/incidents';
 import {t} from 'app/locale';
 import ConfigStore from 'app/stores/configStore';
 import InlineSvg from 'app/components/inlineSvg';
-import Feature from 'app/components/feature';
+import Feature from 'app/components/acl/feature';
 import SentryTypes from 'app/sentryTypes';
 import PreferencesStore from 'app/stores/preferencesStore';
 import theme from 'app/utils/theme';
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
index 1b6f7014f2..075618560c 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
@@ -5,7 +5,7 @@ import React from 'react';
 import styled from 'react-emotion';
 
 import EventsContext from 'app/views/organizationEvents/eventsContext';
-import Feature from 'app/components/feature';
+import Feature from 'app/components/acl/feature';
 import HeaderSeparator from 'app/components/organizations/headerSeparator';
 import MultipleEnvironmentSelector from 'app/components/organizations/multipleEnvironmentSelector';
 import MultipleProjectSelector from 'app/components/organizations/multipleProjectSelector';
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/index.jsx b/src/sentry/static/sentry/app/views/organizationHealth/index.jsx
index bec18be5a2..4644430dc0 100644
--- a/src/sentry/static/sentry/app/views/organizationHealth/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationHealth/index.jsx
@@ -4,7 +4,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
-import Feature from 'app/components/feature';
+import Feature from 'app/components/acl/feature';
 import HeaderSeparator from 'app/components/organizations/headerSeparator';
 import MultipleEnvironmentSelector from 'app/components/organizations/multipleEnvironmentSelector';
 import MultipleProjectSelector from 'app/components/organizations/multipleProjectSelector';
diff --git a/src/sentry/static/sentry/app/views/projectPlugins/projectPluginRow.jsx b/src/sentry/static/sentry/app/views/projectPlugins/projectPluginRow.jsx
index 89a0d618b3..84706d0dfa 100644
--- a/src/sentry/static/sentry/app/views/projectPlugins/projectPluginRow.jsx
+++ b/src/sentry/static/sentry/app/views/projectPlugins/projectPluginRow.jsx
@@ -7,7 +7,7 @@ import styled, {css} from 'react-emotion';
 import {t} from 'app/locale';
 import DynamicWrapper from 'app/components/dynamicWrapper';
 import ExternalLink from 'app/components/externalLink';
-import Feature from 'app/components/feature';
+import Access from 'app/components/acl/access';
 import PluginIcon from 'app/plugins/components/pluginIcon';
 import SentryTypes from 'app/sentryTypes';
 import Switch from 'app/components/switch';
@@ -42,7 +42,7 @@ class ProjectPluginRow extends React.PureComponent {
 
     let configureUrl = recreateRoute(id, this.props);
     return (
-      <Feature access={['project:write']}>
+      <Access access={['project:write']}>
         {({hasAccess}) => {
           const LinkOrSpan = hasAccess ? Link : 'span';
 
@@ -87,7 +87,7 @@ class ProjectPluginRow extends React.PureComponent {
             </Flex>
           );
         }}
-      </Feature>
+      </Access>
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/projectPlugins/projectPlugins.jsx b/src/sentry/static/sentry/app/views/projectPlugins/projectPlugins.jsx
index c84cab8916..b8bd569d84 100644
--- a/src/sentry/static/sentry/app/views/projectPlugins/projectPlugins.jsx
+++ b/src/sentry/static/sentry/app/views/projectPlugins/projectPlugins.jsx
@@ -9,7 +9,7 @@ import {
   PanelItem,
 } from 'app/components/panels';
 import {t, tct} from 'app/locale';
-import Feature from 'app/components/feature';
+import Access from 'app/components/acl/access';
 import Link from 'app/components/link';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import ProjectPluginRow from 'app/views/projectPlugins/projectPluginRow';
@@ -48,7 +48,7 @@ class ProjectPlugins extends Component {
         </PanelHeader>
         <PanelBody>
           <PanelAlert type="warning">
-            <Feature access={['org:integrations']}>
+            <Access access={['org:integrations']}>
               {({hasAccess}) => {
                 return hasAccess
                   ? tct(
@@ -61,7 +61,7 @@ class ProjectPlugins extends Component {
                       "Legacy Integrations must be configured per-project. It's recommended to prefer organization integrations over the legacy project integrations when available."
                     );
               }}
-            </Feature>
+            </Access>
           </PanelAlert>
 
           {plugins.map(plugin => (
diff --git a/tests/js/spec/components/acl/access.spec.jsx b/tests/js/spec/components/acl/access.spec.jsx
new file mode 100644
index 0000000000..49bc2a1254
--- /dev/null
+++ b/tests/js/spec/components/acl/access.spec.jsx
@@ -0,0 +1,175 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import Access from 'app/components/acl/access';
+import ConfigStore from 'app/stores/configStore';
+
+describe('Access', function() {
+  const organization = TestStubs.Organization({
+    access: ['project:write', 'project:read'],
+  });
+  const routerContext = TestStubs.routerContext([{organization}]);
+
+  describe('as render prop', function() {
+    let childrenMock = jest.fn().mockReturnValue(null);
+    beforeEach(function() {
+      childrenMock.mockClear();
+    });
+
+    it('has access when requireAll is false', function() {
+      mount(
+        <Access access={['project:write', 'project:read', 'org:read']} requireAll={false}>
+          {childrenMock}
+        </Access>,
+        routerContext
+      );
+
+      expect(childrenMock).toHaveBeenCalledWith({
+        hasAccess: true,
+        hasSuperuser: false,
+      });
+    });
+
+    it('has accesss', function() {
+      mount(
+        <Access access={['project:write', 'project:read']}>{childrenMock}</Access>,
+        routerContext
+      );
+
+      expect(childrenMock).toHaveBeenCalledWith({
+        hasAccess: true,
+        hasSuperuser: false,
+      });
+    });
+
+    it('has no access', function() {
+      mount(<Access access={['org:write']}>{childrenMock}</Access>, routerContext);
+
+      expect(childrenMock).toHaveBeenCalledWith({
+        hasAccess: false,
+        hasSuperuser: false,
+      });
+    });
+
+    it('calls render function when no access', function() {
+      const noAccessRenderer = jest.fn(() => null);
+      mount(
+        <Access access={['org:write']} renderNoAccessMessage={noAccessRenderer}>
+          {childrenMock}
+        </Access>,
+        routerContext
+      );
+
+      expect(childrenMock).not.toHaveBeenCalled();
+      expect(noAccessRenderer).toHaveBeenCalled();
+    });
+
+    it('can specify org from props', function() {
+      mount(
+        <Access
+          organization={TestStubs.Organization({access: ['org:write']})}
+          access={['org:write']}
+        >
+          {childrenMock}
+        </Access>,
+        routerContext
+      );
+
+      expect(childrenMock).toHaveBeenCalledWith({
+        hasAccess: true,
+        hasSuperuser: false,
+      });
+    });
+
+    it('handles no org/project', function() {
+      mount(
+        <Access organization={null} project={null} access={['org:write']}>
+          {childrenMock}
+        </Access>,
+        routerContext
+      );
+
+      expect(childrenMock).toHaveBeenCalledWith({
+        hasAccess: false,
+        hasSuperuser: false,
+      });
+    });
+
+    it('is superuser', function() {
+      ConfigStore.config = {
+        user: {isSuperuser: true},
+      };
+      mount(<Access isSuperuser>{childrenMock}</Access>, routerContext);
+
+      expect(childrenMock).toHaveBeenCalledWith({
+        hasAccess: true,
+        hasSuperuser: true,
+      });
+    });
+
+    it('is not superuser', function() {
+      ConfigStore.config = {
+        user: {isSuperuser: false},
+      };
+      mount(<Access isSuperuser>{childrenMock}</Access>, routerContext);
+
+      expect(childrenMock).toHaveBeenCalledWith({
+        hasAccess: true,
+        hasSuperuser: false,
+      });
+    });
+  });
+
+  describe('as React node', function() {
+    let wrapper;
+
+    it('has access', function() {
+      wrapper = mount(
+        <Access access={['project:write']}>
+          <div>The Child</div>
+        </Access>,
+        routerContext
+      );
+
+      expect(wrapper.find('Access div').text()).toBe('The Child');
+    });
+
+    it('has superuser', function() {
+      ConfigStore.config = {
+        user: {isSuperuser: true},
+      };
+      wrapper = mount(
+        <Access isSuperuser>
+          <div>The Child</div>
+        </Access>,
+        routerContext
+      );
+
+      expect(wrapper.find('Access div').text()).toBe('The Child');
+    });
+
+    it('has no access', function() {
+      wrapper = mount(
+        <Access access={['org:write']}>
+          <div>The Child</div>
+        </Access>,
+        routerContext
+      );
+
+      expect(wrapper.find('Access div')).toHaveLength(0);
+    });
+
+    it('has no superuser', function() {
+      ConfigStore.config = {
+        user: {isSuperuser: false},
+      };
+      wrapper = mount(
+        <Access isSuperuser>
+          <div>The Child</div>
+        </Access>,
+        routerContext
+      );
+      expect(wrapper.find('Access div')).toHaveLength(0);
+    });
+  });
+});
diff --git a/tests/js/spec/components/feature.spec.jsx b/tests/js/spec/components/acl/feature.spec.jsx
similarity index 50%
rename from tests/js/spec/components/feature.spec.jsx
rename to tests/js/spec/components/acl/feature.spec.jsx
index 61cbe20621..95fdfe7990 100644
--- a/tests/js/spec/components/feature.spec.jsx
+++ b/tests/js/spec/components/acl/feature.spec.jsx
@@ -1,13 +1,12 @@
 import React from 'react';
 import {mount} from 'enzyme';
 
-import Feature from 'app/components/feature';
+import Feature from 'app/components/acl/feature';
 import ConfigStore from 'app/stores/configStore';
 
 describe('Feature', function() {
   const organization = TestStubs.Organization({
     features: ['org-foo', 'org-bar', 'bar'],
-    access: ['project:write', 'project:read'],
   });
   const project = TestStubs.Project({
     features: ['project-foo', 'project-bar'],
@@ -25,7 +24,7 @@ describe('Feature', function() {
       childrenMock.mockClear();
     });
 
-    it('has feature (has access because optional)', function() {
+    it('has feature', function() {
       mount(
         <Feature feature={['org-foo', 'project-foo']}>{childrenMock}</Feature>,
         routerContext
@@ -33,8 +32,6 @@ describe('Feature', function() {
 
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: true,
-        hasAccess: true,
-        hasSuperuser: true,
       });
     });
 
@@ -48,102 +45,14 @@ describe('Feature', function() {
 
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: true,
-        hasAccess: true,
-        hasSuperuser: true,
       });
     });
 
-    it('has access when requireAll is false', function() {
-      mount(
-        <Feature
-          access={['project:write', 'project:read', 'org:read']}
-          requireAll={false}
-        >
-          {childrenMock}
-        </Feature>,
-        routerContext
-      );
-
-      expect(childrenMock).toHaveBeenCalledWith({
-        hasFeature: true,
-        hasAccess: true,
-        hasSuperuser: true,
-      });
-    });
-
-    it('has accesss (has feature because optional)', function() {
-      mount(
-        <Feature access={['project:write', 'project:read']}>{childrenMock}</Feature>,
-        routerContext
-      );
-
-      expect(childrenMock).toHaveBeenCalledWith({
-        hasFeature: true,
-        hasAccess: true,
-        hasSuperuser: true,
-      });
-    });
-
-    it('has feature and access', function() {
-      mount(
-        <Feature
-          feature={['org-foo', 'project-foo']}
-          access={['project:write', 'project:read']}
-        >
-          {childrenMock}
-        </Feature>,
-        routerContext
-      );
-
-      expect(childrenMock).toHaveBeenCalledWith({
-        hasFeature: true,
-        hasAccess: true,
-        hasSuperuser: true,
-      });
-    });
-
-    it('has feature but no access', function() {
-      mount(
-        <Feature feature={['org-foo', 'project-foo']} access={['org:write']}>
-          {childrenMock}
-        </Feature>,
-        routerContext
-      );
-
-      expect(childrenMock).toHaveBeenCalledWith({
-        hasFeature: true,
-        hasAccess: false,
-        hasSuperuser: true,
-      });
-    });
-
-    it('has access but no feature', function() {
-      mount(
-        <Feature feature={['org-baz']} access={['project:write']}>
-          {childrenMock}
-        </Feature>,
-        routerContext
-      );
-
-      expect(childrenMock).toHaveBeenCalledWith({
-        hasFeature: false,
-        hasAccess: true,
-        hasSuperuser: true,
-      });
-    });
-
-    it('has no access and no feature', function() {
-      mount(
-        <Feature feature={['org-baz']} access={['org:write']}>
-          {childrenMock}
-        </Feature>,
-        routerContext
-      );
+    it('has no feature', function() {
+      mount(<Feature feature={['org-baz']}>{childrenMock}</Feature>, routerContext);
 
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: false,
-        hasAccess: false,
-        hasSuperuser: true,
       });
     });
 
@@ -163,8 +72,8 @@ describe('Feature', function() {
     it('can specify org from props', function() {
       mount(
         <Feature
-          organization={TestStubs.Organization({access: ['org:write']})}
-          access={['org:write']}
+          organization={TestStubs.Organization({features: ['org-bazar']})}
+          feature={['org-bazar']}
         >
           {childrenMock}
         </Feature>,
@@ -173,8 +82,6 @@ describe('Feature', function() {
 
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: true,
-        hasAccess: true,
-        hasSuperuser: true,
       });
     });
 
@@ -191,20 +98,12 @@ describe('Feature', function() {
 
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: true,
-        hasAccess: true,
-
-        hasSuperuser: true,
       });
     });
 
     it('handles no org/project', function() {
       mount(
-        <Feature
-          organization={null}
-          project={null}
-          access={['org:write']}
-          feature={['org-foo', 'project-foo']}
-        >
+        <Feature organization={null} project={null} feature={['org-foo', 'project-foo']}>
           {childrenMock}
         </Feature>,
         routerContext
@@ -212,8 +111,6 @@ describe('Feature', function() {
 
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: false,
-        hasAccess: false,
-        hasSuperuser: true,
       });
     });
 
@@ -231,8 +128,6 @@ describe('Feature', function() {
 
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: true,
-        hasAccess: true,
-        hasSuperuser: true,
       });
 
       mount(
@@ -244,41 +139,9 @@ describe('Feature', function() {
 
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: false,
-        hasAccess: true,
-        hasSuperuser: true,
       });
     });
 
-    it('is superuser', function() {
-      ConfigStore.config = {
-        user: {
-          isSuperuser: true,
-        },
-      };
-      mount(<Feature isSuperuser>{childrenMock}</Feature>, routerContext);
-
-      expect(childrenMock).toHaveBeenCalledWith(
-        expect.objectContaining({
-          hasSuperuser: true,
-        })
-      );
-    });
-
-    it('is not superuser', function() {
-      ConfigStore.config = {
-        user: {
-          isSuperuser: false,
-        },
-      };
-      mount(<Feature isSuperuser>{childrenMock}</Feature>, routerContext);
-
-      expect(childrenMock).toHaveBeenCalledWith(
-        expect.objectContaining({
-          hasSuperuser: false,
-        })
-      );
-    });
-
     it('checks ConfigStore.config.features (e.g. `organizations:create`)', function() {
       ConfigStore.config = {
         features: new Set(['organizations:create']),
@@ -288,20 +151,18 @@ describe('Feature', function() {
         routerContext
       );
 
-      expect(childrenMock).toHaveBeenCalledWith(
-        expect.objectContaining({
-          hasFeature: true,
-        })
-      );
+      expect(childrenMock).toHaveBeenCalledWith({
+        hasFeature: true,
+      });
     });
   });
 
   describe('as React node', function() {
     let wrapper;
 
-    it('has features and access', function() {
+    it('has features', function() {
       wrapper = mount(
-        <Feature feature={['org-bar']} access={['project:write']}>
+        <Feature feature={['org-bar']}>
           <div>The Child</div>
         </Feature>,
         routerContext
@@ -310,9 +171,9 @@ describe('Feature', function() {
       expect(wrapper.find('Feature div').text()).toBe('The Child');
     });
 
-    it('has no features or no access', function() {
+    it('has no features', function() {
       wrapper = mount(
-        <Feature feature={['org-baz']} access={['org:write']}>
+        <Feature feature={['org-baz']}>
           <div>The Child</div>
         </Feature>,
         routerContext
diff --git a/tests/js/spec/views/projectPlugins/__snapshots__/projectPlugins.spec.jsx.snap b/tests/js/spec/views/projectPlugins/__snapshots__/projectPlugins.spec.jsx.snap
index b12d3be2bc..71af79646a 100644
--- a/tests/js/spec/views/projectPlugins/__snapshots__/projectPlugins.spec.jsx.snap
+++ b/tests/js/spec/views/projectPlugins/__snapshots__/projectPlugins.spec.jsx.snap
@@ -18,7 +18,7 @@ exports[`ProjectPlugins renders 1`] = `
     <PanelAlert
       type="warning"
     >
-      <FeatureContainer
+      <AccessContainer
         access={
           Array [
             "org:integrations",
@@ -26,7 +26,7 @@ exports[`ProjectPlugins renders 1`] = `
         }
       >
         <Component />
-      </FeatureContainer>
+      </AccessContainer>
     </PanelAlert>
     <PanelItem
       key="amazon-sqs"
diff --git a/tests/js/spec/views/projectPlugins/__snapshots__/projectPluginsRow.spec.jsx.snap b/tests/js/spec/views/projectPlugins/__snapshots__/projectPluginsRow.spec.jsx.snap
index aa15639d49..523b9cfa7f 100644
--- a/tests/js/spec/views/projectPlugins/__snapshots__/projectPluginsRow.spec.jsx.snap
+++ b/tests/js/spec/views/projectPlugins/__snapshots__/projectPluginsRow.spec.jsx.snap
@@ -19,20 +19,19 @@ exports[`ProjectPluginRow renders 1`] = `
   slug="amazon-sqs"
   version="8.23.0.dev0"
 >
-  <FeatureContainer
+  <AccessContainer
     access={
       Array [
         "project:write",
       ]
     }
   >
-    <Feature
+    <Access
       access={
         Array [
           "project:write",
         ]
       }
-      configFeatures={Array []}
       configUser={
         Object {
           "email": "foo@example.com",
@@ -69,18 +68,7 @@ exports[`ProjectPluginRow renders 1`] = `
           "teams": Array [],
         }
       }
-      project={
-        Object {
-          "hasAccess": true,
-          "id": "2",
-          "isBookmarked": false,
-          "isMember": true,
-          "name": "Project Name",
-          "slug": "project-slug",
-          "teams": Array [],
-        }
-      }
-      renderNoFeatureMessage={false}
+      renderNoAccessMessage={false}
       requireAll={true}
     >
       <Flex
@@ -226,7 +214,7 @@ exports[`ProjectPluginRow renders 1`] = `
           </div>
         </Base>
       </Flex>
-    </Feature>
-  </FeatureContainer>
+    </Access>
+  </AccessContainer>
 </ProjectPluginRow>
 `;
