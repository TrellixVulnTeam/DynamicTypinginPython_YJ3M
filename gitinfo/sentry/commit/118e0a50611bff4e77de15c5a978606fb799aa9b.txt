commit 118e0a50611bff4e77de15c5a978606fb799aa9b
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue May 5 14:09:30 2020 -0700

    ref(ui): Remove legacy `<ProjectSelector>` (#18613)
    
    This does not seem to be used any longer (including getsentry). Also remove unused code in base component that supported this removed component and `MultipleProjectSelector`.

diff --git a/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx b/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
index 7da02a5cb4..575e7d5826 100644
--- a/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
@@ -10,13 +10,14 @@ import {ALL_ACCESS_PROJECTS} from 'app/constants/globalSelectionHeader';
 import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
 import {t, tct} from 'app/locale';
 import Button from 'app/components/button';
-import ProjectSelector from 'app/components/projectSelector';
 import InlineSvg from 'app/components/inlineSvg';
 import Tooltip from 'app/components/tooltip';
 import HeaderItem from 'app/components/organizations/headerItem';
 import {growIn} from 'app/styles/animations';
 import space from 'app/styles/space';
 
+import ProjectSelector from './projectSelector';
+
 export default class MultipleProjectSelector extends React.PureComponent {
   static propTypes = {
     organization: SentryTypes.Organization.isRequired,
diff --git a/src/sentry/static/sentry/app/components/projectSelector.jsx b/src/sentry/static/sentry/app/components/organizations/projectSelector.jsx
similarity index 78%
rename from src/sentry/static/sentry/app/components/projectSelector.jsx
rename to src/sentry/static/sentry/app/components/organizations/projectSelector.jsx
index 55b1b28f09..122055184f 100644
--- a/src/sentry/static/sentry/app/components/projectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/projectSelector.jsx
@@ -2,14 +2,12 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from '@emotion/styled';
 import {Link} from 'react-router';
-import flatten from 'lodash/flatten';
 
 import {analytics} from 'app/utils/analytics';
 import {sortArray} from 'app/utils';
 import {t} from 'app/locale';
 import {alertHighlight, pulse} from 'app/styles/animations';
 import Button from 'app/components/button';
-import ConfigStore from 'app/stores/configStore';
 import BookmarkStar from 'app/components/projects/bookmarkStar';
 import DropdownAutoComplete from 'app/components/dropdownAutoComplete';
 import Feature from 'app/components/acl/feature';
@@ -21,7 +19,6 @@ import IdBadge from 'app/components/idBadge';
 import SentryTypes from 'app/sentryTypes';
 import space from 'app/styles/space';
 import theme from 'app/utils/theme';
-import withProjects from 'app/utils/withProjects';
 import {IconAdd, IconSettings} from 'app/icons';
 
 const renderDisabledCheckbox = p => (
@@ -41,13 +38,7 @@ const renderDisabledCheckbox = p => (
 
 class ProjectSelector extends React.Component {
   static propTypes = {
-    // Accepts a project id (slug) and not a project *object* because ProjectSelector
-    // is created from Django templates, and only organization is serialized
-    projectId: PropTypes.string,
-    organization: PropTypes.object.isRequired,
-    projects: PropTypes.arrayOf(
-      PropTypes.oneOfType([PropTypes.string, SentryTypes.Project])
-    ),
+    organization: SentryTypes.Organization,
 
     // used by multiProjectSelector
     multiProjects: PropTypes.arrayOf(
@@ -99,114 +90,51 @@ class ProjectSelector extends React.Component {
     onSelect: () => {},
   };
 
-  constructor(props) {
-    super(props);
-
-    this.state = {
-      activeProject: this.getActiveProject(),
-      selectedProjects: new Map(),
-    };
-  }
+  state = {
+    selectedProjects: new Map(),
+  };
 
   urlPrefix() {
     return `/organizations/${this.props.organization.slug}`;
   }
 
-  getActiveProject() {
-    const {projectId} = this.props;
-    const projects = flatten(this.getProjects());
-
-    return projects.find(({slug}) => slug === projectId);
-  }
-
   getProjects() {
-    const {organization, projects, multiProjects, nonMemberProjects} = this.props;
-
-    if (multiProjects) {
-      return [
-        sortArray(multiProjects, project => [!project.isBookmarked, project.name]),
-        nonMemberProjects || [],
-      ];
-    }
-
-    // Legacy
-    const {isSuperuser} = ConfigStore.get('user');
-    const unfilteredProjects = projects || organization.projects;
-
-    const filteredProjects = isSuperuser
-      ? unfilteredProjects
-      : unfilteredProjects.filter(project => project.isMember);
+    const {multiProjects, nonMemberProjects} = this.props;
 
     return [
-      sortArray(filteredProjects, project => [!project.isBookmarked, project.name]),
-      [],
+      sortArray(multiProjects, project => [!project.isBookmarked, project.name]),
+      nonMemberProjects || [],
     ];
   }
 
-  isControlled = () => typeof this.props.selectedProjects !== 'undefined';
-
-  toggleProject(project, e) {
-    const {onMultiSelect} = this.props;
-    const {slug} = project;
-    // Don't update state if this is a controlled component
-    if (this.isControlled()) {
-      return;
-    }
-
-    this.setState(state => {
-      const selectedProjects = new Map(state.selectedProjects.entries());
-
-      if (selectedProjects.has(slug)) {
-        selectedProjects.delete(slug);
-      } else {
-        selectedProjects.set(slug, project);
-      }
-
-      if (typeof onMultiSelect === 'function') {
-        onMultiSelect(Array.from(selectedProjects.values()), e);
-      }
-
-      return {
-        selectedProjects,
-      };
-    });
-  }
-
   handleSelect = ({value: project}) => {
     const {onSelect} = this.props;
 
-    this.setState({activeProject: project});
     onSelect(project);
   };
 
   handleMultiSelect = (project, e) => {
     const {onMultiSelect, selectedProjects} = this.props;
-    const isControlled = this.isControlled();
     const hasCallback = typeof onMultiSelect === 'function';
 
-    if (isControlled && !hasCallback) {
+    if (!hasCallback) {
       // eslint-disable-next-line no-console
       console.error(
         'ProjectSelector is a controlled component but `onMultiSelect` callback is not defined'
       );
+      return;
     }
 
-    if (hasCallback) {
-      if (isControlled) {
-        const selectedProjectsMap = new Map(selectedProjects.map(p => [p.slug, p]));
-        if (selectedProjectsMap.has(project.slug)) {
-          // unselected a project
-
-          selectedProjectsMap.delete(project.slug);
-        } else {
-          selectedProjectsMap.set(project.slug, project);
-        }
+    const selectedProjectsMap = new Map(selectedProjects.map(p => [p.slug, p]));
+    if (selectedProjectsMap.has(project.slug)) {
+      // unselected a project
 
-        onMultiSelect(Array.from(selectedProjectsMap.values()), e);
-      }
+      selectedProjectsMap.delete(project.slug);
+    } else {
+      selectedProjectsMap.set(project.slug, project);
     }
 
-    this.toggleProject(project, e);
+    onMultiSelect(Array.from(selectedProjectsMap.values()), e);
   };
 
   render() {
@@ -223,7 +151,6 @@ class ProjectSelector extends React.Component {
       searching,
       paginated,
     } = this.props;
-    const {activeProject} = this.state;
     const access = new Set(org.access);
 
     const [projects, nonMemberProjects] = this.getProjects();
@@ -243,9 +170,7 @@ class ProjectSelector extends React.Component {
           multi={multi}
           inputValue={inputValue}
           isChecked={
-            this.isControlled()
-              ? !!this.props.selectedProjects.find(({slug}) => slug === project.slug)
-              : this.state.selectedProjects.has(project.slug)
+            !!this.props.selectedProjects.find(({slug}) => slug === project.slug)
           }
           style={{padding: 0}}
           onMultiSelect={this.handleMultiSelect}
@@ -333,10 +258,7 @@ class ProjectSelector extends React.Component {
         {renderProps =>
           children({
             ...renderProps,
-            activeProject,
-            selectedProjects: this.isControlled()
-              ? this.props.selectedProjects
-              : Array.from(this.state.selectedProjects.values()),
+            selectedProjects: this.props.selectedProjects,
           })
         }
       </DropdownAutoComplete>
@@ -513,4 +435,4 @@ const BadgeAndActionsWrapper = styled('div')`
   }
 `;
 
-export default withProjects(ProjectSelector);
+export default ProjectSelector;
diff --git a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
deleted file mode 100644
index d49f14eb6b..0000000000
--- a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
+++ /dev/null
@@ -1,127 +0,0 @@
-import {withRouter} from 'react-router';
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from '@emotion/styled';
-
-import {t} from 'app/locale';
-import IdBadge from 'app/components/idBadge';
-import InlineSvg from 'app/components/inlineSvg';
-import Link from 'app/components/links/link';
-import ProjectSelector from 'app/components/projectSelector';
-import space from 'app/styles/space';
-
-const ProjectHeaderProjectSelector = withRouter(
-  class ProjectHeaderProjectSelector extends React.Component {
-    static propTypes = {
-      organization: PropTypes.object.isRequired,
-      router: PropTypes.object,
-    };
-
-    static contextTypes = {
-      location: PropTypes.object,
-    };
-
-    /**
-     * Returns an object with the target project url. If
-     * the router is present, passed as the 'to' property.
-     * If not, passed as an absolute URL via the 'href' property.
-     */
-    getProjectUrlProps(project) {
-      const org = this.props.organization;
-      const path = `/${org.slug}/${project.slug}/`;
-
-      if (this.context.location) {
-        return {to: path};
-      } else {
-        return {href: path};
-      }
-    }
-
-    getProjectLabel(project) {
-      return project.slug;
-    }
-
-    handleSelect = project => {
-      const {router} = this.props;
-      const {to, href} = this.getProjectUrlProps(project);
-      if (to) {
-        router.push(to);
-      } else {
-        window.location.assign(href);
-      }
-    };
-
-    renderDropDownLabelContent = (getActorProps, activeProject) => {
-      if (activeProject) {
-        const {to, href} = this.getProjectUrlProps(activeProject);
-        return (
-          <IdBadge
-            project={activeProject}
-            avatarSize={20}
-            displayName={
-              <ProjectNameLink to={to || href}>
-                {this.getProjectLabel(activeProject)}
-              </ProjectNameLink>
-            }
-          />
-        );
-      }
-
-      return (
-        <SelectProject
-          {...getActorProps({
-            role: 'button',
-          })}
-        >
-          {t('Select a project')}
-        </SelectProject>
-      );
-    };
-
-    render() {
-      return (
-        <ProjectSelector {...this.props} onSelect={this.handleSelect}>
-          {({getActorProps, activeProject}) => (
-            <DropdownLabel>
-              {this.renderDropDownLabelContent(getActorProps, activeProject)}
-              <DropdownIcon />
-            </DropdownLabel>
-          )}
-        </ProjectSelector>
-      );
-    }
-  }
-);
-
-export default ProjectHeaderProjectSelector;
-
-const FlexY = styled('div')`
-  display: flex;
-  align-items: center;
-  justify-content: space-between;
-`;
-
-const DropdownLabel = styled(FlexY)`
-  margin-right: ${space(1)};
-`;
-
-const DropdownIcon = styled(props => <InlineSvg {...props} src="icon-chevron-down" />)`
-  margin-left: ${space(0.5)};
-  font-size: 10px;
-`;
-
-const SelectProject = styled('span')`
-  color: ${p => p.theme.gray4};
-  cursor: pointer;
-  font-size: 20px;
-  font-weight: 600;
-  padding-right: ${space(0.5)};
-`;
-
-const ProjectNameLink = styled(Link)`
-  color: ${p => p.theme.textColor};
-  font-size: 20px;
-  line-height: 1.2;
-  font-weight: 600;
-  margin-left: ${space(0.25)};
-`;
diff --git a/tests/js/spec/components/projectSelector.spec.jsx b/tests/js/spec/components/organizations/projectSelector.spec.jsx
similarity index 66%
rename from tests/js/spec/components/projectSelector.spec.jsx
rename to tests/js/spec/components/organizations/projectSelector.spec.jsx
index c58dd42119..47e16ff77d 100644
--- a/tests/js/spec/components/projectSelector.spec.jsx
+++ b/tests/js/spec/components/organizations/projectSelector.spec.jsx
@@ -1,8 +1,7 @@
 import React from 'react';
 
 import {mountWithTheme} from 'sentry-test/enzyme';
-import ProjectSelector from 'app/components/projectSelector';
-import ProjectsStore from 'app/stores/projectsStore';
+import ProjectSelector from 'app/components/organizations/projectSelector';
 
 describe('ProjectSelector', function() {
   const testTeam = TestStubs.Team({
@@ -45,16 +44,15 @@ describe('ProjectSelector', function() {
     organization: mockOrg,
     projectId: '',
     children: actorRenderer,
+    multiProjects: mockOrg.projects,
+    selectedProjects: [],
   };
 
-  beforeEach(function() {
-    ProjectsStore.loadInitialData(mockOrg.projects);
-  });
-
   it('should show empty message with no projects button, when no projects, and has no "project:write" access', function() {
     const wrapper = mountWithTheme(
       <ProjectSelector
         {...props}
+        multiProjects={[]}
         organization={{
           id: 'org',
           slug: 'org-slug',
@@ -66,8 +64,6 @@ describe('ProjectSelector', function() {
       routerContext
     );
 
-    ProjectsStore.loadInitialData([]);
-
     openMenu(wrapper);
     expect(wrapper.find('EmptyMessage').prop('children')).toBe('You have no projects');
     // Should not have "Create Project" button
@@ -78,6 +74,7 @@ describe('ProjectSelector', function() {
     const wrapper = mountWithTheme(
       <ProjectSelector
         {...props}
+        multiProjects={[]}
         organization={{
           id: 'org',
           slug: 'org-slug',
@@ -89,8 +86,6 @@ describe('ProjectSelector', function() {
       routerContext
     );
 
-    ProjectsStore.loadInitialData([]);
-
     openMenu(wrapper);
     expect(wrapper.find('EmptyMessage').prop('children')).toBe('You have no projects');
     // Should not have "Create Project" button
@@ -100,6 +95,7 @@ describe('ProjectSelector', function() {
   it('lists projects and has filter', function() {
     const wrapper = mountWithTheme(<ProjectSelector {...props} />, routerContext);
     openMenu(wrapper);
+
     expect(wrapper.find('AutoCompleteItem')).toHaveLength(2);
   });
 
@@ -167,8 +163,14 @@ describe('ProjectSelector', function() {
 
   it('does not call `onSelect` when using multi select', function() {
     const mock = jest.fn();
+    const onMultiSelectMock = jest.fn();
     const wrapper = mountWithTheme(
-      <ProjectSelector {...props} multi onSelect={mock} />,
+      <ProjectSelector
+        {...props}
+        multi
+        onSelect={mock}
+        onMultiSelect={onMultiSelectMock}
+      />,
       routerContext
     );
     openMenu(wrapper);
@@ -181,107 +183,7 @@ describe('ProjectSelector', function() {
 
     // onSelect callback should NOT be called
     expect(mock).not.toHaveBeenCalled();
-  });
-
-  it('calls `onMultiSelect` and render prop when using multi select as an uncontrolled component', async function() {
-    const mock = jest.fn();
-    const wrapper = mountWithTheme(
-      <ProjectSelector {...props} multi onMultiSelect={mock} />,
-      routerContext
-    );
-    openMenu(wrapper);
-
-    // Select first project
-    wrapper
-      .find('CheckboxHitbox')
-      .at(0)
-      .simulate('click', {target: {checked: true}});
-
-    expect(mock).toHaveBeenLastCalledWith(
-      [
-        expect.objectContaining({
-          slug: 'test-project',
-        }),
-      ],
-      expect.anything()
-    );
-
-    expect(actorRenderer).toHaveBeenLastCalledWith(
-      expect.objectContaining({
-        selectedProjects: [expect.objectContaining({slug: 'test-project'})],
-      })
-    );
-
-    expect(
-      Array.from(
-        wrapper
-          .find('ProjectSelectorItem')
-          .filterWhere(p => p.prop('isChecked'))
-          .map(p => p.prop('project').slug)
-      )
-    ).toEqual(['test-project']);
-
-    // second project
-    wrapper
-      .find('CheckboxHitbox')
-      .at(1)
-      .simulate('click', {target: {checked: true}});
-
-    expect(mock).toHaveBeenLastCalledWith(
-      [
-        expect.objectContaining({
-          slug: 'test-project',
-        }),
-        expect.objectContaining({
-          slug: 'another-project',
-        }),
-      ],
-      expect.anything()
-    );
-    expect(actorRenderer).toHaveBeenLastCalledWith(
-      expect.objectContaining({
-        selectedProjects: [
-          expect.objectContaining({slug: 'test-project'}),
-          expect.objectContaining({slug: 'another-project'}),
-        ],
-      })
-    );
-    expect(
-      Array.from(
-        wrapper
-          .find('ProjectSelectorItem')
-          .filterWhere(p => p.prop('isChecked'))
-          .map(p => p.prop('project').slug)
-      )
-    ).toEqual(['test-project', 'another-project']);
-
-    // Can unselect item
-    wrapper
-      .find('CheckboxHitbox')
-      .at(1)
-      .simulate('click', {target: {checked: false}});
-
-    expect(mock).toHaveBeenLastCalledWith(
-      [
-        expect.objectContaining({
-          slug: 'test-project',
-        }),
-      ],
-      expect.anything()
-    );
-    expect(actorRenderer).toHaveBeenLastCalledWith(
-      expect.objectContaining({
-        selectedProjects: [expect.objectContaining({slug: 'test-project'})],
-      })
-    );
-    expect(
-      Array.from(
-        wrapper
-          .find('ProjectSelectorItem')
-          .filterWhere(p => p.prop('isChecked'))
-          .map(p => p.prop('project').slug)
-      )
-    ).toEqual(['test-project']);
+    expect(onMultiSelectMock).toHaveBeenCalled();
   });
 
   it('displays multi projects', function() {
diff --git a/tests/js/spec/components/projectHeader/projectSelector.spec.jsx b/tests/js/spec/components/projectHeader/projectSelector.spec.jsx
deleted file mode 100644
index 8ab509af6f..0000000000
--- a/tests/js/spec/components/projectHeader/projectSelector.spec.jsx
+++ /dev/null
@@ -1,94 +0,0 @@
-import React from 'react';
-
-import {mountWithTheme} from 'sentry-test/enzyme';
-import ProjectHeaderProjectSelector from 'app/components/projectHeader/projectSelector';
-import ProjectsStore from 'app/stores/projectsStore';
-
-describe('ProjectHeaderProjectSelector', function() {
-  const testTeam = TestStubs.Team({
-    id: 'test-team',
-    slug: 'test-team',
-    isMember: true,
-  });
-
-  const testProject = TestStubs.Project({
-    id: 'test-project',
-    slug: 'test-project',
-    isBookmarked: true,
-    isMember: true,
-    teams: [testTeam],
-  });
-  const anotherProject = TestStubs.Project({
-    id: 'another-project',
-    slug: 'another-project',
-    isMember: true,
-    teams: [testTeam],
-  });
-
-  const mockOrg = TestStubs.Organization({
-    id: 'org',
-    slug: 'org',
-    teams: [testTeam],
-    projects: [testProject, anotherProject],
-    features: ['new-teams'],
-    access: [],
-  });
-
-  const routerContext = TestStubs.routerContext([{organization: mockOrg}]);
-
-  const openMenu = wrapper => wrapper.find('DropdownLabel').simulate('click');
-
-  beforeEach(function() {
-    ProjectsStore.loadInitialData(mockOrg.projects);
-  });
-
-  it('renders with "Select a project" when no project is selected', function() {
-    const wrapper = mountWithTheme(
-      <ProjectHeaderProjectSelector organization={mockOrg} projectId="" />,
-      routerContext
-    );
-
-    expect(wrapper.find('SelectProject')).toHaveLength(1);
-  });
-
-  it('has project label when project is selected', function() {
-    const wrapper = mountWithTheme(
-      <ProjectHeaderProjectSelector organization={mockOrg} projectId="" />,
-      routerContext
-    );
-    openMenu(wrapper);
-
-    // Select first project
-    wrapper
-      .find('AutoCompleteItem')
-      .first()
-      .simulate('click');
-
-    expect(wrapper.find('IdBadge').prop('project')).toEqual(
-      expect.objectContaining({
-        slug: 'test-project',
-      })
-    );
-  });
-
-  it('calls `router.push` when a project is selected', function() {
-    const routerMock = TestStubs.router();
-    const wrapper = mountWithTheme(
-      <ProjectHeaderProjectSelector
-        organization={mockOrg}
-        projectId=""
-        router={routerMock}
-      />,
-      routerContext
-    );
-    openMenu(wrapper);
-
-    // Select first project
-    wrapper
-      .find('AutoCompleteItem')
-      .first()
-      .simulate('click');
-
-    expect(routerMock.push).toHaveBeenCalledWith('/org/test-project/');
-  });
-});
