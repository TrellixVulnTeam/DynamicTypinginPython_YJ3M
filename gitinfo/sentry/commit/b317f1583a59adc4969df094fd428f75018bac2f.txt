commit b317f1583a59adc4969df094fd428f75018bac2f
Author: Dan Fuller <dfuller@sentry.io>
Date:   Fri Dec 21 12:28:49 2018 -0800

    feat(api): Add Organization level issues resolved in release endpoint.

diff --git a/src/sentry/api/endpoints/organization_issues_resolved_in_release.py b/src/sentry/api/endpoints/organization_issues_resolved_in_release.py
new file mode 100644
index 0000000000..266e303cf4
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_issues_resolved_in_release.py
@@ -0,0 +1,44 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.base import EnvironmentMixin
+from sentry.api.bases.organization import (
+    OrganizationEndpoint,
+    OrganizationPermission,
+)
+from sentry.api.helpers.releases import get_group_ids_resolved_in_release
+from sentry.api.serializers import serialize
+from sentry.api.serializers.models.group import GroupSerializer
+from sentry.models import Group
+
+
+class OrganizationIssuesResolvedInReleaseEndpoint(OrganizationEndpoint, EnvironmentMixin):
+    permission_classes = (OrganizationPermission, )
+
+    def get(self, request, organization, version):
+        """
+        List issues to be resolved in a particular release
+        ``````````````````````````````````````````````````
+
+        Retrieve a list of issues to be resolved in a given release.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          release belongs to.
+        :pparam string version: the version identifier of the release.
+        :auth: required
+        """
+        group_ids = get_group_ids_resolved_in_release(organization, version)
+        groups = Group.objects.filter(
+            project_id__in=self.get_project_ids(request, organization),
+            id__in=group_ids,
+        )
+
+        context = serialize(
+            list(groups),
+            request.user,
+            GroupSerializer(
+                environment_func=self._get_environment_func(request, organization.id)
+            )
+        )
+        return Response(context)
diff --git a/src/sentry/api/endpoints/issues_resolved_in_release.py b/src/sentry/api/endpoints/project_issues_resolved_in_release.py
similarity index 55%
rename from src/sentry/api/endpoints/issues_resolved_in_release.py
rename to src/sentry/api/endpoints/project_issues_resolved_in_release.py
index 86f610ba4c..9585261924 100644
--- a/src/sentry/api/endpoints/issues_resolved_in_release.py
+++ b/src/sentry/api/endpoints/project_issues_resolved_in_release.py
@@ -4,19 +4,13 @@ from rest_framework.response import Response
 
 from sentry.api.base import DocSection, EnvironmentMixin
 from sentry.api.bases.project import ProjectEndpoint, ProjectPermission
-from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.helpers.releases import get_group_ids_resolved_in_release
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.group import GroupSerializer
-from sentry.models import (
-    Group,
-    GroupLink,
-    GroupResolution,
-    Release,
-    ReleaseCommit,
-)
+from sentry.models import Group
 
 
-class IssuesResolvedInReleaseEndpoint(ProjectEndpoint, EnvironmentMixin):
+class ProjectIssuesResolvedInReleaseEndpoint(ProjectEndpoint, EnvironmentMixin):
     doc_section = DocSection.RELEASES
     permission_classes = (ProjectPermission, )
 
@@ -33,32 +27,7 @@ class IssuesResolvedInReleaseEndpoint(ProjectEndpoint, EnvironmentMixin):
         :pparam string version: the version identifier of the release.
         :auth: required
         """
-        try:
-            release = Release.objects.get(version=version, organization=project.organization)
-        except Release.DoesNotExist:
-            raise ResourceDoesNotExist
-
-        group_ids = set()
-        group_ids |= set(
-            GroupResolution.objects.filter(
-                release=release,
-            ).values_list('group_id', flat=True)
-        )
-        group_ids |= set(
-            GroupLink.objects.filter(
-                linked_type=GroupLink.LinkedType.commit,
-                linked_id__in=ReleaseCommit.objects.filter(
-                    release=release,
-                ).values_list(
-                    'commit_id',
-                    flat=True,
-                )
-            ).values_list(
-                'group_id',
-                flat=True,
-            )
-        )
-
+        group_ids = get_group_ids_resolved_in_release(project.organization, version)
         groups = Group.objects.filter(project=project, id__in=group_ids)
 
         context = serialize(
diff --git a/src/sentry/api/helpers/__init__.py b/src/sentry/api/helpers/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/sentry/api/helpers/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/sentry/api/helpers/releases.py b/src/sentry/api/helpers/releases.py
new file mode 100644
index 0000000000..10a3efa867
--- /dev/null
+++ b/src/sentry/api/helpers/releases.py
@@ -0,0 +1,37 @@
+from __future__ import absolute_import
+
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.models import (
+    GroupLink,
+    GroupResolution,
+    Release,
+    ReleaseCommit,
+)
+
+
+def get_group_ids_resolved_in_release(organization, version):
+    try:
+        release = Release.objects.get(version=version, organization=organization)
+    except Release.DoesNotExist:
+        raise ResourceDoesNotExist
+
+    group_ids = set(
+        GroupResolution.objects.filter(
+            release=release,
+        ).values_list('group_id', flat=True)
+    )
+    group_ids |= set(
+        GroupLink.objects.filter(
+            linked_type=GroupLink.LinkedType.commit,
+            linked_id__in=ReleaseCommit.objects.filter(
+                release=release,
+            ).values_list(
+                'commit_id',
+                flat=True,
+            )
+        ).values_list(
+            'group_id',
+            flat=True,
+        )
+    )
+    return group_ids
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index c874be82fa..1ea991c4fa 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -68,6 +68,7 @@ from .endpoints.organization_environments import OrganizationEnvironmentsEndpoin
 from .endpoints.organization_eventid import EventIdLookupEndpoint
 from .endpoints.organization_slugs import SlugsUpdateEndpoint
 from .endpoints.organization_issues_new import OrganizationIssuesNewEndpoint
+from .endpoints.organization_issues_resolved_in_release import OrganizationIssuesResolvedInReleaseEndpoint
 from .endpoints.organization_member_details import OrganizationMemberDetailsEndpoint
 from .endpoints.organization_member_index import OrganizationMemberIndexEndpoint
 from .endpoints.organization_member_issues_assigned import OrganizationMemberIssuesAssignedEndpoint
@@ -118,6 +119,7 @@ from .endpoints.project_filter_details import ProjectFilterDetailsEndpoint
 from .endpoints.project_group_index import ProjectGroupIndexEndpoint
 from .endpoints.project_group_stats import ProjectGroupStatsEndpoint
 from .endpoints.project_index import ProjectIndexEndpoint
+from .endpoints.project_issues_resolved_in_release import ProjectIssuesResolvedInReleaseEndpoint
 from .endpoints.project_keys import ProjectKeysEndpoint
 from .endpoints.project_key_details import ProjectKeyDetailsEndpoint
 from .endpoints.project_key_stats import ProjectKeyStatsEndpoint
@@ -155,7 +157,6 @@ from .endpoints.project_user_stats import ProjectUserStatsEndpoint
 from .endpoints.project_users import ProjectUsersEndpoint
 from .endpoints.prompts_activity import PromptsActivityEndpoint
 from .endpoints.filechange import CommitFileChangeEndpoint
-from .endpoints.issues_resolved_in_release import IssuesResolvedInReleaseEndpoint
 from .endpoints.release_deploys import ReleaseDeploysEndpoint
 from .endpoints.debug_files import DebugFilesEndpoint, DifAssembleEndpoint, \
     UnknownDebugFilesEndpoint, AssociateDSymFilesEndpoint
@@ -539,6 +540,11 @@ urlpatterns = patterns(
         OrganizationUserIssuesEndpoint.as_view(),
         name='sentry-api-0-organization-user-issues'
     ),
+    url(
+        r'^organizations/(?P<organization_slug>[^\/]+)/releases/(?P<version>[^/]+)/resolved/$',
+        OrganizationIssuesResolvedInReleaseEndpoint.as_view(),
+        name='sentry-api-0-organization-release-resolved'
+    ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/members/(?P<member_id>[^\/]+)/$',
         OrganizationMemberDetailsEndpoint.as_view(),
@@ -888,8 +894,8 @@ urlpatterns = patterns(
     ),
     url(
         r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/releases/(?P<version>[^/]+)/resolved/$',
-        IssuesResolvedInReleaseEndpoint.as_view(),
-        name='sentry-api-0-release-resolved'
+        ProjectIssuesResolvedInReleaseEndpoint.as_view(),
+        name='sentry-api-0-project-release-resolved'
     ),
     url(
         r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/releases/(?P<version>[^/]+)/files/$',
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index a0cdf6d1da..1b8f8b43ac 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -436,13 +436,18 @@ class APITestCase(BaseTestCase, BaseAPITestCase):
     def get_response(self, *args, **params):
         if self.endpoint is None:
             raise Exception('Implement self.endpoint to use this method.')
-        url = self.endpoint.format(*args)
+        url = reverse(self.endpoint, args=args)
         return getattr(self.client, self.method)(
             url,
             format='json',
             data=params,
         )
 
+    def get_valid_response(self, *args, **params):
+        resp = self.get_response(*args, **params)
+        assert resp.status_code == 200, resp.content
+        return resp
+
 
 class TwoFactorAPITestCase(APITestCase):
     @fixture
diff --git a/tests/sentry/api/endpoints/test_issues_resolved_in_release.py b/tests/sentry/api/endpoints/test_issues_resolved_in_release.py
deleted file mode 100644
index de0af6fefd..0000000000
--- a/tests/sentry/api/endpoints/test_issues_resolved_in_release.py
+++ /dev/null
@@ -1,201 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-import six
-
-from sentry.models import (
-    Commit,
-    GroupLink,
-    GroupResolution,
-    ReleaseCommit,
-    Repository,
-)
-
-from sentry.testutils import APITestCase
-
-
-class IssuesResolvedInReleaseEndpointTest(APITestCase):
-    def setUp(self):
-        super(IssuesResolvedInReleaseEndpointTest, self).setUp()
-        self.user = self.create_user()
-        self.org = self.create_organization()
-        self.team = self.create_team(organization=self.org)
-        self.create_member(organization=self.org, user=self.user, teams=[self.team])
-        self.project = self.create_project(
-            teams=[self.team],
-        )
-        self.release = self.create_release(
-            project=self.project,
-        )
-        self.group = self.create_group(project=self.project)
-        self.login_as(self.user)
-
-        self.path = reverse(
-            'sentry-api-0-release-resolved',
-            kwargs={
-                'organization_slug': self.project.organization.slug,
-                'project_slug': self.project.slug,
-                'version': self.release.version,
-            }
-        )
-
-    def test_shows_issues_from_groupresolution(self):
-        """
-        tests that the endpoint will correctly retrieve issues resolved
-        in a release from the GroupResolution model
-        """
-        GroupResolution.objects.create(
-            group=self.group,
-            release=self.release,
-            type=GroupResolution.Type.in_release,
-        )
-        response = self.client.get(self.path)
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-        assert response.data[0]['id'] == six.text_type(self.group.id)
-
-    def test_shows_issues_from_grouplink(self):
-        """
-        tests that the endpoint will correctly retrieve issues resolved
-        in a release from the GroupLink model
-        """
-        repo = Repository.objects.create(
-            organization_id=self.org.id,
-            name=self.project.name,
-        )
-        commit = Commit.objects.create(
-            organization_id=self.org.id,
-            repository_id=repo.id,
-            key='a' * 40,
-        )
-        commit2 = Commit.objects.create(
-            organization_id=self.org.id,
-            repository_id=repo.id,
-            key='b' * 40,
-        )
-        ReleaseCommit.objects.create(
-            organization_id=self.org.id,
-            release=self.release,
-            commit=commit,
-            order=1,
-        )
-        ReleaseCommit.objects.create(
-            organization_id=self.org.id,
-            release=self.release,
-            commit=commit2,
-            order=0,
-        )
-        GroupLink.objects.create(
-            group_id=self.group.id,
-            project_id=self.group.project_id,
-            linked_type=GroupLink.LinkedType.commit,
-            relationship=GroupLink.Relationship.resolves,
-            linked_id=commit.id,
-        )
-        response = self.client.get(self.path)
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-        assert response.data[0]['id'] == six.text_type(self.group.id)
-
-    def test_does_not_return_duplicate_groups(self):
-        """
-        tests that the endpoint will correctly retrieve issues resolved
-        in a release from the GroupLink and GroupResolution model
-        but will not return the groups twice if they appear in both
-        """
-        repo = Repository.objects.create(
-            organization_id=self.org.id,
-            name=self.project.name,
-        )
-        commit = Commit.objects.create(
-            organization_id=self.org.id,
-            repository_id=repo.id,
-            key='a' * 40,
-        )
-        commit2 = Commit.objects.create(
-            organization_id=self.org.id,
-            repository_id=repo.id,
-            key='b' * 40,
-        )
-        ReleaseCommit.objects.create(
-            organization_id=self.org.id,
-            release=self.release,
-            commit=commit,
-            order=1,
-        )
-        ReleaseCommit.objects.create(
-            organization_id=self.org.id,
-            release=self.release,
-            commit=commit2,
-            order=0,
-        )
-        GroupLink.objects.create(
-            group_id=self.group.id,
-            project_id=self.group.project_id,
-            linked_type=GroupLink.LinkedType.commit,
-            relationship=GroupLink.Relationship.resolves,
-            linked_id=commit.id,
-        )
-        GroupResolution.objects.create(
-            group=self.group,
-            release=self.release,
-            type=GroupResolution.Type.in_release,
-        )
-
-        response = self.client.get(self.path)
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-        assert response.data[0]['id'] == six.text_type(self.group.id)
-
-    def test_return_groups_from_both_types(self):
-        """
-        tests that the endpoint will correctly retrieve issues resolved
-        in a release from both the GroupLink and GroupResolution model
-        """
-        group2 = self.create_group(project=self.project)
-        repo = Repository.objects.create(
-            organization_id=self.org.id,
-            name=self.project.name,
-        )
-        commit = Commit.objects.create(
-            organization_id=self.org.id,
-            repository_id=repo.id,
-            key='a' * 40,
-        )
-        commit2 = Commit.objects.create(
-            organization_id=self.org.id,
-            repository_id=repo.id,
-            key='b' * 40,
-        )
-        ReleaseCommit.objects.create(
-            organization_id=self.org.id,
-            release=self.release,
-            commit=commit,
-            order=1,
-        )
-        ReleaseCommit.objects.create(
-            organization_id=self.org.id,
-            release=self.release,
-            commit=commit2,
-            order=0,
-        )
-        GroupLink.objects.create(
-            group_id=self.group.id,
-            project_id=self.group.project_id,
-            linked_type=GroupLink.LinkedType.commit,
-            relationship=GroupLink.Relationship.resolves,
-            linked_id=commit.id,
-        )
-        GroupResolution.objects.create(
-            group=group2,
-            release=self.release,
-            type=GroupResolution.Type.in_release,
-        )
-
-        response = self.client.get(self.path)
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 2
diff --git a/tests/sentry/api/endpoints/test_organization_issues_resolved_in_release.py b/tests/sentry/api/endpoints/test_organization_issues_resolved_in_release.py
new file mode 100644
index 0000000000..c9094cde56
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_issues_resolved_in_release.py
@@ -0,0 +1,141 @@
+from __future__ import absolute_import
+
+from uuid import uuid1
+
+import six
+
+from sentry.models import (
+    Commit,
+    GroupLink,
+    GroupResolution,
+    ReleaseCommit,
+    Repository,
+)
+
+from sentry.testutils import APITestCase
+
+
+class OrganizationIssuesResolvedInReleaseEndpointTest(APITestCase):
+    endpoint = 'sentry-api-0-organization-release-resolved'
+    method = 'get'
+
+    def setUp(self):
+        super(OrganizationIssuesResolvedInReleaseEndpointTest, self).setUp()
+        self.user = self.create_user()
+        self.org = self.create_organization()
+        self.team = self.create_team(organization=self.org)
+        self.create_member(organization=self.org, user=self.user, teams=[self.team])
+        self.project = self.create_project(teams=[self.team])
+        self.project_2 = self.create_project(teams=[self.team])
+        self.release = self.create_release(project=self.project)
+        self.group = self.create_group(project=self.project)
+        self.group_2 = self.create_group(project=self.project_2)
+        self.login_as(self.user)
+
+    def build_grouplink(self, group=None):
+        group = self.group if group is None else group
+        repo = Repository.objects.create(
+            organization_id=self.org.id,
+            name=group.project.name,
+        )
+        commit = Commit.objects.create(
+            organization_id=self.org.id,
+            repository_id=repo.id,
+            key=uuid1().hex,
+        )
+        commit_2 = Commit.objects.create(
+            organization_id=self.org.id,
+            repository_id=repo.id,
+            key=uuid1().hex,
+        )
+        ReleaseCommit.objects.create(
+            organization_id=self.org.id,
+            release=self.release,
+            commit=commit,
+            order=commit.id,
+        )
+        ReleaseCommit.objects.create(
+            organization_id=self.org.id,
+            release=self.release,
+            commit=commit_2,
+            order=commit_2.id,
+        )
+        GroupLink.objects.create(
+            group_id=group.id,
+            project_id=group.project_id,
+            linked_type=GroupLink.LinkedType.commit,
+            relationship=GroupLink.Relationship.resolves,
+            linked_id=commit.id,
+        )
+
+    def build_group_resolution(self, group=None):
+        return GroupResolution.objects.create(
+            group=self.group if group is None else group,
+            release=self.release,
+            type=GroupResolution.Type.in_release,
+        )
+
+    def run_test(self, expected_groups, project_ids=None):
+        params = {}
+        if project_ids:
+            params['project'] = project_ids
+
+        response = self.get_valid_response(
+            self.org.slug,
+            self.release.version,
+            **params
+        )
+        assert len(response.data) == len(expected_groups)
+        expected = set(map(six.text_type, [g.id for g in expected_groups]))
+        assert set([item['id'] for item in response.data]) == expected
+
+    def test_shows_issues_from_groupresolution(self):
+        """
+        tests that the endpoint will correctly retrieve issues resolved
+        in a release from the GroupResolution model
+        """
+        self.build_group_resolution()
+        self.run_test([self.group])
+
+    def test_shows_issues_from_grouplink(self):
+        """
+        tests that the endpoint will correctly retrieve issues resolved
+        in a release from the GroupLink model
+        """
+        self.build_grouplink()
+        self.run_test([self.group])
+
+    def test_does_not_return_duplicate_groups(self):
+        """
+        tests that the endpoint will correctly retrieve issues resolved
+        in a release from the GroupLink and GroupResolution model
+        but will not return the groups twice if they appear in both
+        """
+        self.build_grouplink()
+        self.build_group_resolution()
+        self.run_test([self.group])
+
+    def test_return_groups_from_both_types(self):
+        """
+        tests that the endpoint will correctly retrieve issues resolved
+        in a release from both the GroupLink and GroupResolution model
+        """
+        self.build_grouplink()
+        new_group = self.create_group(project=self.project)
+        self.build_group_resolution(new_group)
+        self.run_test([self.group, new_group])
+
+    def test_multiple_projects(self):
+        """
+        Test that the endpoint will return issues resolved in a release across
+        projects in the org, and that filtering by project works as expected
+        """
+        self.build_grouplink()
+        self.build_grouplink(self.group_2)
+        self.run_test([self.group, self.group_2])
+        self.run_test([self.group], project_ids=[self.group.project_id])
+        self.run_test([self.group_2], project_ids=[self.group_2.project_id])
+        self.run_test(
+            [self.group, self.group_2],
+            project_ids=[self.group.project_id, self.group_2.project_id],
+        )
diff --git a/tests/sentry/api/endpoints/test_organization_user_reports.py b/tests/sentry/api/endpoints/test_organization_user_reports.py
index dc7584f525..2081c9f2c0 100644
--- a/tests/sentry/api/endpoints/test_organization_user_reports.py
+++ b/tests/sentry/api/endpoints/test_organization_user_reports.py
@@ -15,7 +15,7 @@ from sentry.testutils import APITestCase
 
 
 class OrganizationUserReportListTest(APITestCase):
-    endpoint = u'/api/0/organizations/{}/user-feedback/'
+    endpoint = 'sentry-api-0-organization-user-feedback'
     method = 'get'
 
     def setUp(self):
diff --git a/tests/sentry/api/endpoints/test_project_issues_resolved_in_release.py b/tests/sentry/api/endpoints/test_project_issues_resolved_in_release.py
new file mode 100644
index 0000000000..5dddde2e33
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_project_issues_resolved_in_release.py
@@ -0,0 +1,119 @@
+from __future__ import absolute_import
+
+from uuid import uuid1
+
+import six
+
+from sentry.models import (
+    Commit,
+    GroupLink,
+    GroupResolution,
+    ReleaseCommit,
+    Repository,
+)
+
+from sentry.testutils import APITestCase
+
+
+class ProjectIssuesResolvedInReleaseEndpointTest(APITestCase):
+    endpoint = 'sentry-api-0-project-release-resolved'
+    method = 'get'
+
+    def setUp(self):
+        super(ProjectIssuesResolvedInReleaseEndpointTest, self).setUp()
+        self.user = self.create_user()
+        self.org = self.create_organization()
+        self.team = self.create_team(organization=self.org)
+        self.create_member(organization=self.org, user=self.user, teams=[self.team])
+        self.project = self.create_project(teams=[self.team])
+        self.release = self.create_release(project=self.project)
+        self.group = self.create_group(project=self.project)
+        self.login_as(self.user)
+
+    def build_grouplink(self):
+        repo = Repository.objects.create(
+            organization_id=self.org.id,
+            name=self.project.name,
+        )
+        commit = Commit.objects.create(
+            organization_id=self.org.id,
+            repository_id=repo.id,
+            key=uuid1().hex,
+        )
+        commit2 = Commit.objects.create(
+            organization_id=self.org.id,
+            repository_id=repo.id,
+            key=uuid1().hex,
+        )
+        ReleaseCommit.objects.create(
+            organization_id=self.org.id,
+            release=self.release,
+            commit=commit,
+            order=1,
+        )
+        ReleaseCommit.objects.create(
+            organization_id=self.org.id,
+            release=self.release,
+            commit=commit2,
+            order=0,
+        )
+        GroupLink.objects.create(
+            group_id=self.group.id,
+            project_id=self.group.project_id,
+            linked_type=GroupLink.LinkedType.commit,
+            relationship=GroupLink.Relationship.resolves,
+            linked_id=commit.id,
+        )
+
+    def build_group_resolution(self, group=None):
+        return GroupResolution.objects.create(
+            group=self.group if group is None else group,
+            release=self.release,
+            type=GroupResolution.Type.in_release,
+        )
+
+    def run_test(self, expected_groups):
+        response = self.get_valid_response(
+            self.org.slug,
+            self.project.slug,
+            self.release.version,
+        )
+        assert len(response.data) == len(expected_groups)
+        expected = set(map(six.text_type, [g.id for g in expected_groups]))
+        assert set([item['id'] for item in response.data]) == expected
+
+    def test_shows_issues_from_groupresolution(self):
+        """
+        tests that the endpoint will correctly retrieve issues resolved
+        in a release from the GroupResolution model
+        """
+        self.build_group_resolution()
+        self.run_test([self.group])
+
+    def test_shows_issues_from_grouplink(self):
+        """
+        tests that the endpoint will correctly retrieve issues resolved
+        in a release from the GroupLink model
+        """
+        self.build_grouplink()
+        self.run_test([self.group])
+
+    def test_does_not_return_duplicate_groups(self):
+        """
+        tests that the endpoint will correctly retrieve issues resolved
+        in a release from the GroupLink and GroupResolution model
+        but will not return the groups twice if they appear in both
+        """
+        self.build_grouplink()
+        self.build_group_resolution()
+        self.run_test([self.group])
+
+    def test_return_groups_from_both_types(self):
+        """
+        tests that the endpoint will correctly retrieve issues resolved
+        in a release from both the GroupLink and GroupResolution model
+        """
+        self.build_grouplink()
+        group_2 = self.create_group(project=self.project)
+        self.build_group_resolution(group_2)
+        self.run_test([self.group, group_2])
