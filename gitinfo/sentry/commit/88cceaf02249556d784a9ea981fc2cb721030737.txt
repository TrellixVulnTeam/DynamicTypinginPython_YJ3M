commit 88cceaf02249556d784a9ea981fc2cb721030737
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Wed Sep 23 19:26:56 2015 -0700

    Handle out of order timestamps

diff --git a/src/sentry/api/endpoints/event_details.py b/src/sentry/api/endpoints/event_details.py
index 500838462f..aefd2f8fd2 100644
--- a/src/sentry/api/endpoints/event_details.py
+++ b/src/sentry/api/endpoints/event_details.py
@@ -45,29 +45,49 @@ class EventDetailsEndpoint(Endpoint):
         base_qs = Event.objects.filter(
             group=event.group_id,
         ).exclude(id=event.id)
-        try:
-            gt = lambda x: x.id > event.id
-            next_event = filter(gt, sorted(
-                base_qs.filter(
-                    datetime__gte=event.datetime,
-                ).order_by('datetime')[0:5],
-                key=lambda x: (x.datetime, x.id),
-            ))[0]
-        except IndexError:
-            next_event = None
 
-        try:
-            lt = lambda x: x.id < event.id
-            prev_event = filter(lt, sorted(
-                base_qs.filter(
-                    id__lt=event.id,
-                    datetime__lte=event.datetime,
-                ).order_by('-datetime')[0:5],
-                key=lambda x: (x.datetime, x.id),
-                reverse=True,
-            ))[0]
-        except IndexError:
-            prev_event = None
+        # First, we collect 5 leading/trailing events
+        next_events = sorted(
+            base_qs.filter(
+                datetime__gte=event.datetime,
+            ).order_by('datetime')[0:5],
+            key=lambda x: (x.datetime, x.id),
+        )
+        prev_events = sorted(
+            base_qs.filter(
+                datetime__lte=event.datetime,
+            ).order_by('-datetime')[0:5],
+            key=lambda x: (x.datetime, x.id),
+            reverse=True,
+        )
+
+        # Now, try and find the real next event.
+        # "next" means:
+        #  * If identical timestamps, greater of the ids
+        #  * else greater of the timestamps
+        next_event = None
+        for e in next_events:
+            if e.datetime == event.datetime and e.id > event.id:
+                next_event = e
+                break
+
+            if e.datetime > event.datetime:
+                next_event = e
+                break
+
+        # Last, pick the previous event
+        # "previous" means:
+        #  * If identical timestamps, lesser of the ids
+        #  * else lesser of the timestamps
+        prev_event = None
+        for e in prev_events:
+            if e.datetime == event.datetime and e.id < event.id:
+                prev_event = e
+                break
+
+            if e.datetime < event.datetime:
+                prev_event = e
+                break
 
         try:
             user_report = UserReport.objects.get(
diff --git a/tests/sentry/api/endpoints/test_event_details.py b/tests/sentry/api/endpoints/test_event_details.py
index bae789f4e6..b63448c811 100644
--- a/tests/sentry/api/endpoints/test_event_details.py
+++ b/tests/sentry/api/endpoints/test_event_details.py
@@ -161,6 +161,62 @@ class EventDetailsTest(APITestCase):
         assert response.data['groupID'] == group.id
         assert not response.data['userReport']
 
+    def test_timestamps_out_of_order(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+        cur_event = self.create_event(
+            event_id='b',
+            group=group,
+            datetime=datetime(2013, 8, 13, 3, 8, 25),
+        )
+        next_event = self.create_event(
+            event_id='c',
+            group=group,
+            datetime=datetime(2013, 8, 13, 3, 8, 26),
+        )
+        prev_event = self.create_event(
+            event_id='a',
+            group=group,
+            datetime=datetime(2013, 8, 13, 3, 8, 24),
+        )
+
+        url = reverse('sentry-api-0-event-details', kwargs={
+            'event_id': cur_event.id,
+        })
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == str(cur_event.id)
+        assert response.data['nextEventID'] == str(next_event.id)
+        assert response.data['previousEventID'] == str(prev_event.id)
+        assert response.data['groupID'] == group.id
+        assert not response.data['userReport']
+
+        url = reverse('sentry-api-0-event-details', kwargs={
+            'event_id': prev_event.id,
+        })
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == str(prev_event.id)
+        assert response.data['nextEventID'] == str(cur_event.id)
+        assert response.data['previousEventID'] is None
+        assert response.data['groupID'] == group.id
+        assert not response.data['userReport']
+
+        url = reverse('sentry-api-0-event-details', kwargs={
+            'event_id': next_event.id,
+        })
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == str(next_event.id)
+        assert response.data['nextEventID'] is None
+        assert response.data['previousEventID'] == str(cur_event.id)
+        assert response.data['groupID'] == group.id
+        assert not response.data['userReport']
+
     def test_user_report(self):
         self.login_as(user=self.user)
 
