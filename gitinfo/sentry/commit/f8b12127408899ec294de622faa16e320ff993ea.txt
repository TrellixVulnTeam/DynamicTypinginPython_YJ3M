commit f8b12127408899ec294de622faa16e320ff993ea
Author: Mark Story <mark@sentry.io>
Date:   Mon May 11 11:55:44 2020 -0400

    feat(perf-views) Move performance charts to the sidebar (#18680)
    
    The apdex, error rate and throughput charts are most useful when they
    can be viewed alongside duration breakdowns and other charts. Adding
    stripped down charts to the sidebar enables these comparisons.
    
    Users can also use sidebar charts to zoom in on problems reloading the
    entire page.

diff --git a/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx b/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx
index 051d3369cd..7204c3b662 100644
--- a/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx
+++ b/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx
@@ -76,7 +76,10 @@ function getFormatter({
         seriesParamsOrParam.data.labelForValue,
         truncate
       );
-      const formattedValue = valueFormatter(seriesParamsOrParam.data.coord[1]);
+      const formattedValue = valueFormatter(
+        seriesParamsOrParam.data.coord[1],
+        seriesParamsOrParam.name
+      );
       return [
         '<div class="tooltip-series">',
         `<div>
@@ -108,7 +111,7 @@ function getFormatter({
         .filter(getFilter)
         .map(s => {
           const formattedLabel = truncationFormatter(s.seriesName, truncate);
-          const value = valueFormatter(getSeriesValue(s, 1));
+          const value = valueFormatter(getSeriesValue(s, 1), s.seriesName);
           return `<div><span class="tooltip-label">${s.marker} <strong>${formattedLabel}</strong></span> ${value}</div>`;
         })
         .join(''),
diff --git a/src/sentry/static/sentry/app/views/performance/constants.tsx b/src/sentry/static/sentry/app/views/performance/constants.tsx
index 09b9825280..07912743c0 100644
--- a/src/sentry/static/sentry/app/views/performance/constants.tsx
+++ b/src/sentry/static/sentry/app/views/performance/constants.tsx
@@ -5,4 +5,7 @@ export const PERFORMANCE_TERMS: Record<string, string> = {
     'Apdex is a ratio of satisfactory response times to unsatisfactory response times.'
   ),
   rpm: t('Throughput is the number of recorded transactions per minute (tpm).'),
+  errorRate: t(
+    'Error rate is the percentage of recorded transactions that had a known and unsuccessful status.'
+  ),
 };
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/charts.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/charts.tsx
index ca3aa34d95..b2e09ee0c2 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/charts.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/charts.tsx
@@ -12,10 +12,10 @@ import {
   SectionHeading,
   SectionValue,
 } from 'app/components/charts/styles';
+import {decodeScalar} from 'app/utils/queryString';
 import OptionSelector from 'app/components/charts/optionSelector';
 
 import {ChartContainer} from '../styles';
-import ApdexThroughputChart from './apdexThroughputChart';
 import DurationChart from './durationChart';
 import LatencyChart from './latencyChart';
 import DurationPercentileChart from './durationPercentileChart';
@@ -29,7 +29,6 @@ enum DisplayModes {
 
 const DISPLAY_OPTIONS: SelectValue<string>[] = [
   {value: DisplayModes.DURATION, label: t('Duration Breakdown')},
-  {value: DisplayModes.APDEX_THROUGHPUT, label: t('Apdex, Throughput')},
   {value: DisplayModes.DURATION_PERCENTILE, label: t('Duration Percentiles')},
   {value: DisplayModes.LATENCY, label: t('Latency Distribution')},
 ];
@@ -52,11 +51,10 @@ class TransactionSummaryCharts extends React.Component<Props> {
 
   render() {
     const {totalValues, eventView, organization, location} = this.props;
-    const display = location.query.display
-      ? Array.isArray(location.query.display)
-        ? location.query.display[0]
-        : location.query.display
-      : DisplayModes.DURATION;
+    let display = decodeScalar(location.query.display) || DisplayModes.DURATION;
+    if (!Object.values(DisplayModes).includes(display as DisplayModes)) {
+      display = DisplayModes.DURATION;
+    }
 
     return (
       <Panel>
@@ -84,17 +82,6 @@ class TransactionSummaryCharts extends React.Component<Props> {
               statsPeriod={eventView.statsPeriod}
             />
           )}
-          {display === DisplayModes.APDEX_THROUGHPUT && (
-            <ApdexThroughputChart
-              organization={organization}
-              query={eventView.query}
-              project={eventView.project}
-              environment={eventView.environment}
-              start={eventView.start}
-              end={eventView.end}
-              statsPeriod={eventView.statsPeriod}
-            />
-          )}
           {display === DisplayModes.DURATION_PERCENTILE && (
             <DurationPercentileChart
               organization={organization}
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
index 8d61021577..d07621d80d 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
@@ -15,6 +15,7 @@ import UserStats from './userStats';
 import KeyTransactionButton from './keyTransactionButton';
 import TransactionSummaryCharts from './charts';
 import RelatedIssues from './relatedIssues';
+import SidebarCharts from './sidebarCharts';
 
 const TOP_SLOWEST_TRANSACTIONS = 5;
 
@@ -99,6 +100,7 @@ class SummaryContent extends React.Component<Props> {
               location={location}
               eventView={eventView}
             />
+            <SidebarCharts organization={organization} eventView={eventView} />
             <Tags
               totalValues={totalValues}
               eventView={eventView}
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/sidebarCharts.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/sidebarCharts.tsx
new file mode 100644
index 0000000000..4d1d780620
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/sidebarCharts.tsx
@@ -0,0 +1,230 @@
+import React from 'react';
+import * as ReactRouter from 'react-router';
+import styled from '@emotion/styled';
+import {Location} from 'history';
+
+import {Client} from 'app/api';
+import {t} from 'app/locale';
+import {OrganizationSummary} from 'app/types';
+import EventView from 'app/utils/discover/eventView';
+import ChartZoom from 'app/components/charts/chartZoom';
+import LineChart from 'app/components/charts/lineChart';
+import ErrorPanel from 'app/components/charts/errorPanel';
+import {SectionHeading, QuestionTooltip} from 'app/components/charts/styles';
+import TransparentLoadingMask from 'app/components/charts/transparentLoadingMask';
+import TransitionChart from 'app/components/charts/transitionChart';
+import {getInterval} from 'app/components/charts/utils';
+import {IconWarning} from 'app/icons';
+import EventsRequest from 'app/views/events/utils/eventsRequest';
+import {PERFORMANCE_TERMS} from 'app/views/performance/constants';
+import {getUtcToLocalDateObject} from 'app/utils/dates';
+import {
+  formatAbbreviatedNumber,
+  formatFloat,
+  formatPercentage,
+} from 'app/utils/formatters';
+import {decodeScalar} from 'app/utils/queryString';
+import theme from 'app/utils/theme';
+import space from 'app/styles/space';
+import withApi from 'app/utils/withApi';
+
+type Props = ReactRouter.WithRouterProps & {
+  api: Client;
+  organization: OrganizationSummary;
+  location: Location;
+  eventView: EventView;
+};
+
+function SidebarCharts({api, eventView, organization, router}: Props) {
+  const statsPeriod = eventView.statsPeriod;
+  const start = eventView.start ? getUtcToLocalDateObject(eventView.start) : undefined;
+  const end = eventView.end ? getUtcToLocalDateObject(eventView.end) : undefined;
+  const utc = decodeScalar(router.location.query.utc);
+
+  const colors = theme.charts.getColorPalette(3);
+  const axisLineConfig = {
+    scale: true,
+    axisLine: {
+      show: false,
+    },
+    axisTick: {
+      show: false,
+    },
+    splitLine: {
+      show: false,
+    },
+  };
+  const chartOptions = {
+    height: 580,
+    grid: [
+      {
+        top: '40px',
+        left: '10px',
+        right: '10px',
+        height: '120px',
+      },
+      {
+        top: '230px',
+        left: '10px',
+        right: '10px',
+        height: '150px',
+      },
+      {
+        top: '450px',
+        left: '10px',
+        right: '10px',
+        height: '120px',
+      },
+    ],
+    axisPointer: {
+      // Link each x-axis together.
+      link: [{xAxisIndex: [0, 1, 2]}],
+    },
+    xAxes: Array.from(new Array(3)).map((_i, index) => ({
+      gridIndex: index,
+      type: 'time',
+      show: false,
+    })),
+    yAxes: [
+      {
+        // apdex
+        gridIndex: 0,
+        axisLabel: {
+          formatter: (value: number) => formatFloat(value, 2),
+          color: theme.gray1,
+        },
+        ...axisLineConfig,
+      },
+      {
+        // throughput
+        gridIndex: 1,
+        axisLabel: {
+          formatter: formatAbbreviatedNumber,
+          color: theme.gray1,
+        },
+        ...axisLineConfig,
+      },
+      {
+        // error rate
+        gridIndex: 2,
+        axisLabel: {
+          formatter: (value: number) => formatPercentage(value, 2),
+          color: theme.gray1,
+        },
+        ...axisLineConfig,
+      },
+    ],
+    utc,
+    isGroupedByDate: true,
+    showTimeInTooltip: true,
+    colors: [colors[0], colors[1], colors[2]],
+    tooltip: {
+      truncate: 80,
+      valueFormatter(value: number, seriesName: string) {
+        if (seriesName.includes('apdex')) {
+          return formatFloat(value, 2);
+        }
+        if (seriesName.includes('error_rate')) {
+          return formatPercentage(value, 2);
+        }
+        if (typeof value === 'number') {
+          return value.toLocaleString();
+        }
+        return value;
+      },
+    },
+  };
+
+  const datetimeSelection = {
+    start: start || null,
+    end: end || null,
+    period: statsPeriod,
+  };
+  const project = eventView.project;
+  const environment = eventView.environment;
+
+  return (
+    <RelativeBox>
+      <ChartTitle top="0px" key="apdex">
+        {t('Apdex')}
+        <QuestionTooltip position="top" title={PERFORMANCE_TERMS.apdex} size="sm" />
+      </ChartTitle>
+
+      <ChartTitle top="190px" key="throughput">
+        {t('Throughput')}
+        <QuestionTooltip position="top" title={PERFORMANCE_TERMS.rpm} size="sm" />
+      </ChartTitle>
+
+      <ChartTitle top="410px" key="error-rate">
+        {t('Error Rate')}
+        <QuestionTooltip position="top" title={PERFORMANCE_TERMS.errorRate} size="sm" />
+      </ChartTitle>
+
+      <ChartZoom
+        router={router}
+        period={statsPeriod}
+        projects={project}
+        environments={environment}
+        xAxisIndex={[0, 1, 2]}
+      >
+        {zoomRenderProps => (
+          <EventsRequest
+            api={api}
+            organization={organization}
+            period={statsPeriod}
+            project={[...project]}
+            environment={[...environment]}
+            start={start}
+            end={end}
+            interval={getInterval(datetimeSelection, true)}
+            showLoading={false}
+            query={eventView.query}
+            includePrevious={false}
+            yAxis={['apdex(300)', 'rpm()', 'error_rate()']}
+          >
+            {({results, errored, loading, reloading}) => {
+              if (errored) {
+                return (
+                  <ErrorPanel>
+                    <IconWarning color={theme.gray2} size="lg" />
+                  </ErrorPanel>
+                );
+              }
+              const series = results
+                ? results.map((values, i: number) => ({
+                    ...values,
+                    yAxisIndex: i,
+                    xAxisIndex: i,
+                  }))
+                : [];
+
+              return (
+                <TransitionChart loading={loading} reloading={reloading} height="550px">
+                  <TransparentLoadingMask visible={reloading} />
+                  <LineChart {...zoomRenderProps} {...chartOptions} series={series} />
+                </TransitionChart>
+              );
+            }}
+          </EventsRequest>
+        )}
+      </ChartZoom>
+    </RelativeBox>
+  );
+}
+
+const RelativeBox = styled('div')`
+  position: relative;
+  margin-bottom: ${space(2)};
+`;
+
+const ChartTitle = styled(SectionHeading)<{top: string}>`
+  background: ${p => p.theme.white};
+  display: flex;
+  align-items: center;
+  position: absolute;
+  top: ${p => p.top};
+  margin: 0;
+  z-index: 1;
+`;
+
+export default withApi(ReactRouter.withRouter(SidebarCharts));
