commit 7dc2905f72c39772124376be12bdfe5625a1feda
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Mar 9 11:49:10 2018 -0800

    ref(ui): Change `JsonForm` to accept a list of fields (#7512)
    
    * change form search to search for "fields" as well

diff --git a/src/sentry/static/sentry/app/actionCreators/formSearch.jsx b/src/sentry/static/sentry/app/actionCreators/formSearch.jsx
index da23fde56e..8e08905e58 100644
--- a/src/sentry/static/sentry/app/actionCreators/formSearch.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/formSearch.jsx
@@ -13,6 +13,10 @@ export function loadSearchMap() {
 
     if (!mod) return;
 
-    addForm({formGroups: mod.default || mod.formGroups, route: mod.route});
+    addForm({
+      formGroups: mod.default || mod.formGroups,
+      fields: mod.fields,
+      route: mod.route,
+    });
   });
 }
diff --git a/src/sentry/static/sentry/app/utils/addForm.jsx b/src/sentry/static/sentry/app/utils/addForm.jsx
index aa13024705..6e7ed4f82e 100644
--- a/src/sentry/static/sentry/app/utils/addForm.jsx
+++ b/src/sentry/static/sentry/app/utils/addForm.jsx
@@ -17,25 +17,28 @@ const createSearchIndex = field => {
 //   * what field(s) it matches:
 //     * what form group it belongs to
 //     * what route that belongs to
-const createSearchMap = ({route, formGroups, ...other}) => {
+const createSearchMap = ({route, formGroups, fields, ...other}) => {
+  let listOfFields = formGroups
+    ? flatMap(formGroups, formGroup => formGroup.fields)
+    : Object.keys(fields).map(fieldName => fields[fieldName]);
+
   return fromPairs(
-    flatMap(formGroups, ({title, fields}) =>
-      fields.map(field => [
-        createSearchIndex(field),
-        {
-          ...other,
-          route,
-          groupTitle: title,
-          field,
-        },
-      ])
-    )
+    listOfFields.map(field => [
+      createSearchIndex(field),
+      {
+        ...other,
+        route,
+        field,
+      },
+    ])
   );
 };
 
 /**
- * Given a formGroup ({ title: string, fields: Array<FormField> }) and route where form exists,
- * create a search index for fields. Adds to a global search store.
+ * Given a `formGroup` ({ title: string, fields: Array<FormField> }) (or just `fields`)
+ * and `route` where form exists, create a search index for fields.
+ *
+ * Adds to a global search store.
  *
  * returns formGroup
  */
diff --git a/src/sentry/static/sentry/app/views/projectAlertSettings.jsx b/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
index bc60b4fae1..ba478d0689 100644
--- a/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
@@ -110,7 +110,7 @@ export default class ProjectAlertSettings extends AsyncView {
         >
           <JsonForm
             forms={alertsFormGroups}
-            renderBodyStart={({title}) => {
+            renderHeader={({title}) => {
               if (title === 'Digests') {
                 return (
                   <PanelAlert m={0} mb={0} type="info" icon="icon-circle-exclamation">
diff --git a/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
index 79d97f75ba..69167805c0 100644
--- a/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
@@ -182,7 +182,7 @@ export default class ProjectGeneralSettings extends AsyncView {
             forms={projectFields}
             additionalFieldProps={{organization}}
             access={new Set(organization.access)}
-            renderBodyStart={({title}) => {
+            renderHeader={({title}) => {
               if (title === 'Client Security') {
                 return (
                   <Box p={2} pb={0}>
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
index 97eb4b592f..85879c40b8 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
@@ -3,6 +3,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import scrollToElement from 'scroll-to-element';
 
+import {defined} from '../../../../utils';
 import FieldFromConfig from './fieldFromConfig';
 import Panel from '../panel';
 import PanelBody from '../panelBody';
@@ -20,14 +21,28 @@ class JsonForm extends React.Component {
           PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])
         ),
       })
-    ).isRequired,
+    ),
+
+    /**
+     * If `forms` is not defined, `title` + `fields` must be required.
+     * Allows more fine grain control of title/fields
+     */
+    fields: PropTypes.arrayOf(
+      PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])
+    ),
+    /**
+     * Panel title if `forms` is not defined
+     */
+    title: PropTypes.string,
+
     access: PropTypes.object,
+    features: PropTypes.object,
     additionalFieldProps: PropTypes.object,
     renderFooter: PropTypes.func,
     /**
      * Renders inside of PanelBody
      */
-    renderBodyStart: PropTypes.func,
+    renderHeader: PropTypes.func,
   };
 
   static defaultProps = {
@@ -73,53 +88,124 @@ class JsonForm extends React.Component {
   render() {
     let {
       forms,
+      title,
+      fields,
+
       access,
+      features,
       additionalFieldProps,
       renderFooter,
-      renderBodyStart,
+      renderHeader,
       // eslint-disable-next-line no-unused-vars
       location,
       ...otherProps
     } = this.props;
-    let shouldRenderFooter = typeof renderFooter === 'function';
-    let shouldRenderBodyStart = typeof renderBodyStart === 'function';
+
+    let hasFormGroups = defined(forms);
+    let formPanelProps = {
+      access,
+      features,
+      additionalFieldProps,
+      renderFooter,
+      renderHeader,
+      highlighted: this.state.highlighted,
+    };
 
     return (
       <Box {...otherProps}>
-        {forms.map(({title, fields}) => {
-          return (
-            <Panel key={title} id={title}>
-              <PanelHeader>{title}</PanelHeader>
-              <PanelBody>
-                {shouldRenderBodyStart && renderBodyStart({title, fields})}
-
-                {fields.map(field => {
-                  if (typeof field === 'function') {
-                    return field();
-                  }
-
-                  // eslint-disable-next-line no-unused-vars
-                  let {defaultValue, ...fieldWithoutDefaultValue} = field;
-
-                  return (
-                    <FieldFromConfig
-                      access={access}
-                      key={field.name}
-                      {...otherProps}
-                      {...additionalFieldProps}
-                      field={fieldWithoutDefaultValue}
-                      highlighted={this.state.highlighted === `#${field.name}`}
-                    />
-                  );
-                })}
-                {shouldRenderFooter && renderFooter({title, fields})}
-              </PanelBody>
-            </Panel>
-          );
-        })}
+        {hasFormGroups ? (
+          forms.map(formGroup => (
+            <FormPanel
+              key={formGroup.title}
+              title={formGroup.title}
+              fields={formGroup.fields}
+              {...formPanelProps}
+            />
+          ))
+        ) : (
+          <FormPanel title={title} fields={fields} {...formPanelProps} />
+        )}
       </Box>
     );
   }
 }
 
 export default JsonForm;
+
+class FormPanel extends React.Component {
+  static propTypes = {
+    /**
+     * Panel title
+     */
+    title: PropTypes.string,
+    /**
+     * List of fields to render
+     */
+    fields: PropTypes.arrayOf(
+      PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])
+    ),
+
+    access: PropTypes.object,
+    additionalFieldProps: PropTypes.object,
+
+    /**
+     * The name of the field that should be highlighted
+     */
+    highlighted: PropTypes.string,
+
+    /**
+     * Renders inside of PanelBody at the start
+     */
+    renderHeader: PropTypes.func,
+    /**
+     * Renders inside of PanelBody before PanelBody close
+     */
+    renderFooter: PropTypes.func,
+  };
+
+  render() {
+    let {
+      title,
+      fields,
+      access,
+      additionalFieldProps,
+      renderFooter,
+      renderHeader,
+      // eslint-disable-next-line no-unused-vars
+      location,
+      ...otherProps
+    } = this.props;
+    let shouldRenderFooter = typeof renderFooter === 'function';
+    let shouldRenderHeader = typeof renderHeader === 'function';
+
+    return (
+      <Panel key={title} id={title}>
+        <PanelHeader>{title}</PanelHeader>
+        <PanelBody>
+          {shouldRenderHeader && renderHeader({title, fields})}
+
+          {fields.map(field => {
+            if (typeof field === 'function') {
+              return field();
+            }
+
+            // eslint-disable-next-line no-unused-vars
+            let {defaultValue, ...fieldWithoutDefaultValue} = field;
+
+            return (
+              <FieldFromConfig
+                access={access}
+                key={field.name}
+                {...otherProps}
+                {...additionalFieldProps}
+                field={fieldWithoutDefaultValue}
+                highlighted={this.props.highlighted === `#${field.name}`}
+              />
+            );
+          })}
+          {shouldRenderFooter && renderFooter({title, fields})}
+        </PanelBody>
+      </Panel>
+    );
+  }
+}
diff --git a/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
index 71ad2fd3bc..a227268254 100644
--- a/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
@@ -119,7 +119,7 @@ exports[`ProjectAlertSettings render() renders 1`] = `
             },
           ]
         }
-        renderBodyStart={[Function]}
+        renderHeader={[Function]}
       />
     </Form>
     <PluginList
