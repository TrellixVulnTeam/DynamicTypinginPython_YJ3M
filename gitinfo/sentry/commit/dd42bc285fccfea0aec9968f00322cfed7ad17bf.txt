commit dd42bc285fccfea0aec9968f00322cfed7ad17bf
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu May 4 21:02:15 2017 +0200

    Updates for symsynd 3.0

diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 595e330cd9..2e2e71b1f4 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -143,10 +143,10 @@ class SingleException(Interface):
     def get_path(self):
         return 'sentry.interfaces.Exception'
 
-    def get_hash(self):
+    def get_hash(self, platform=None):
         output = None
         if self.stacktrace:
-            output = self.stacktrace.get_hash()
+            output = self.stacktrace.get_hash(platform=platform)
             if output and self.type:
                 output.append(self.type)
         if not output:
@@ -270,17 +270,17 @@ class Exception(Interface):
         return 'sentry.interfaces.Exception'
 
     def compute_hashes(self, platform):
-        system_hash = self.get_hash(system_frames=True)
+        system_hash = self.get_hash(platform, system_frames=True)
         if not system_hash:
             return []
 
-        app_hash = self.get_hash(system_frames=False)
+        app_hash = self.get_hash(platform, system_frames=False)
         if system_hash == app_hash or not app_hash:
             return [system_hash]
 
         return [system_hash, app_hash]
 
-    def get_hash(self, system_frames=True):
+    def get_hash(self, platform=None, system_frames=True):
         # optimize around the fact that some exceptions might have stacktraces
         # while others may not and we ALWAYS want stacktraces over values
         output = []
@@ -288,6 +288,7 @@ class Exception(Interface):
             if not value.stacktrace:
                 continue
             stack_hash = value.stacktrace.get_hash(
+                platform=platform,
                 system_frames=system_frames,
             )
             if stack_hash:
@@ -296,7 +297,7 @@ class Exception(Interface):
 
         if not output:
             for value in self.values:
-                output.extend(value.get_hash())
+                output.extend(value.get_hash(platform=platform))
 
         return output
 
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 0cd5b5f802..2b462511ed 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -12,6 +12,7 @@ __all__ = ('Stacktrace',)
 
 import re
 import six
+import posixpath
 
 from django.conf import settings
 from django.utils.translation import ugettext as _
@@ -153,12 +154,20 @@ def remove_function_outliers(function):
     return _ruby_anon_func.sub('_<anon>', function)
 
 
-def remove_filename_outliers(filename):
+def remove_filename_outliers(filename, platform=None):
     """
     Attempt to normalize filenames by removing common platform outliers.
 
     - Sometimes filename paths contain build numbers
     """
+    # On cocoa we generally only want to use the last path component as
+    # the filename.  The reason for this is that the chances are very high
+    # that full filenames contain information we do want to strip but
+    # currently can't (for instance because the information we get from
+    # the dwarf files does not contain prefix information) and that might
+    # contain things like /Users/foo/Dropbox/...
+    if platform == 'cocoa':
+        return posixpath.basename(filename)
     return _filename_version_re.sub('<version>/', filename)
 
 
@@ -356,7 +365,7 @@ class Frame(Interface):
 
         return cls(**kwargs)
 
-    def get_hash(self):
+    def get_hash(self, platform=None):
         """
         The hash of the frame varies depending on the data available.
 
@@ -366,6 +375,7 @@ class Frame(Interface):
 
         This is one of the few areas in Sentry that isn't platform-agnostic.
         """
+        platform = self.platform or platform
         output = []
         # Safari throws [native code] frames in for calls like ``forEach``
         # whereas Chrome ignores these. Let's remove it from the hashing algo
@@ -379,7 +389,7 @@ class Frame(Interface):
             else:
                 output.append(remove_module_outliers(self.module))
         elif self.filename and not self.is_url() and not self.is_caused_by():
-            output.append(remove_filename_outliers(self.filename))
+            output.append(remove_filename_outliers(self.filename, platform))
 
         if self.context_line is None:
             can_use_context = False
@@ -719,17 +729,17 @@ class Stacktrace(Interface):
         return 'sentry.interfaces.Stacktrace'
 
     def compute_hashes(self, platform):
-        system_hash = self.get_hash(system_frames=True)
+        system_hash = self.get_hash(platform, system_frames=True)
         if not system_hash:
             return []
 
-        app_hash = self.get_hash(system_frames=False)
+        app_hash = self.get_hash(platform, system_frames=False)
         if system_hash == app_hash or not app_hash:
             return [system_hash]
 
         return [system_hash, app_hash]
 
-    def get_hash(self, system_frames=True):
+    def get_hash(self, platform=None, system_frames=True):
         frames = self.frames
 
         # TODO(dcramer): this should apply only to platform=javascript
@@ -756,7 +766,7 @@ class Stacktrace(Interface):
 
         output = []
         for frame in frames:
-            output.extend(frame.get_hash())
+            output.extend(frame.get_hash(platform))
         return output
 
     def to_string(self, event, is_public=False, **kwargs):
diff --git a/src/sentry/lang/native/applecrashreport.py b/src/sentry/lang/native/applecrashreport.py
index 552fb27ccc..2eeec94a26 100644
--- a/src/sentry/lang/native/applecrashreport.py
+++ b/src/sentry/lang/native/applecrashreport.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import posixpath
+
 from sentry.utils.compat import implements_to_string
 from sentry.utils.native import parse_addr
 from sentry.constants import NATIVE_UNKNOWN_STRING
@@ -146,7 +148,7 @@ class AppleCrashReport(object):
             file = ''
             if frame.get('filename') and frame.get('lineno'):
                 file = ' (%s:%s)' % (
-                    frame.get('filename') or NATIVE_UNKNOWN_STRING,
+                    posixpath.basename(frame.get('filename') or NATIVE_UNKNOWN_STRING),
                     frame['lineno']
                 )
             symbol = '%s%s' % (
diff --git a/src/sentry/lang/native/dsymcache.py b/src/sentry/lang/native/dsymcache.py
index 419cac6418..cbd69cc6a8 100644
--- a/src/sentry/lang/native/dsymcache.py
+++ b/src/sentry/lang/native/dsymcache.py
@@ -57,9 +57,8 @@ class DSymCache(object):
         if on_dsym_file_referenced is not None:
             on_dsym_file_referenced(dsf)
 
-        base = os.path.basename(dsym_path)
         try:
-            os.makedirs(base)
+            os.makedirs(os.path.dirname(dsym_path))
         except OSError:
             pass
 
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index fe3835e4f6..6718e1902d 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -3,9 +3,7 @@ from __future__ import absolute_import
 import logging
 import posixpath
 
-from symsynd.heuristics import find_best_instruction
-from symsynd.utils import parse_addr
-from symsynd.images import ImageLookup
+from symsynd import find_best_instruction, parse_addr, ImageLookup
 
 from sentry import options
 from django.db import transaction, IntegrityError
@@ -162,7 +160,7 @@ class NativeStacktraceProcessor(StacktraceProcessor):
         for pf in processing_task.iter_processable_frames(self):
             img = pf.data['image']
             if pf.cache_value is not None or img is None or \
-               self.sym.is_frame_from_app_bundle(pf.frame, img):
+               self.sym.is_image_from_app_bundle(img):
                 continue
             to_lookup.append({
                 'object_uuid': img['uuid'],
@@ -258,7 +256,7 @@ class NativeStacktraceProcessor(StacktraceProcessor):
                 new_frame['symbol'] = sfrm['symbol']
             new_frame['abs_path'] = sfrm['abs_path']
             new_frame['filename'] = sfrm.get('filename') or \
-                posixpath.basename(sfrm['abs_path'])
+                (sfrm['abs_path'] and posixpath.basename(sfrm['abs_path'])) or None
             if sfrm.get('lineno'):
                 new_frame['lineno'] = sfrm['lineno']
             if sfrm.get('colno'):
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index d27431137d..7e1b047ea7 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -3,10 +3,8 @@ from __future__ import absolute_import
 import re
 import six
 
-from symsynd.demangle import demangle_symbol
-from symsynd.driver import Driver, SymbolicationError
-from symsynd.macho.arch import get_cpu_name
-from symsynd.images import ImageLookup
+from symsynd import demangle_symbol, SymbolicationError, get_cpu_name, \
+    ImageLookup, Symbolizer as SymsyndSymbolizer
 
 from sentry.lang.native.dsymcache import dsymcache
 from sentry.utils.safe import trim
@@ -105,7 +103,7 @@ class Symbolizer(object):
         else:
             self.image_lookup = ImageLookup(binary_images)
 
-        self.driver = Driver()
+        self._symbolizer = SymsyndSymbolizer()
 
         to_load = referenced_images
         if to_load is None:
@@ -117,16 +115,18 @@ class Symbolizer(object):
         self.cpu_name = cpu_name
 
     def close(self):
-        self.driver.close()
+        self._symbolizer.close()
 
     def _process_frame(self, frame, img):
-        symbol = trim(frame['function'], MAX_SYM)
-        function = trim(demangle_symbol(frame['function'], simplified=True),
+        symbol = trim(frame['symbol'], MAX_SYM)
+        function = trim(demangle_symbol(frame['symbol'], simplified=True),
                         MAX_SYM)
 
         frame['function'] = function
         if function != symbol:
             frame['symbol'] = symbol
+        else:
+            frame['symbol'] = None
 
         frame['filename'] = trim(frame.get('filename'), 256)
         frame['abs_path'] = trim(frame.get('abs_path'), 256)
@@ -189,13 +189,14 @@ class Symbolizer(object):
                 type = EventError.NATIVE_MISSING_OPTIONALLY_BUNDLED_DSYM
             else:
                 type = EventError.NATIVE_MISSING_DSYM
-            raise SymbolicationError(type=type, image=img)
+            raise SymbolicationFailed(type=type, image=img)
 
         try:
-            rv = self.driver.symbolize(
+            rv = self._symbolizer.symbolize(
                 dsym_path, img['image_vmaddr'], img['image_addr'],
                 instruction_addr, self.cpu_name, symbolize_inlined=True)
         except SymbolicationError as e:
+            raise
             raise SymbolicationFailed(
                 type=EventError.NATIVE_BAD_DSYM,
                 message=six.text_type(e),
@@ -214,10 +215,13 @@ class Symbolizer(object):
         if symbolserver_match is None:
             return []
 
+        symbol = symbolserver_match['symbol']
+        if symbol[:1] == '_':
+            symbol = symbol[1:]
+
         return [self._process_frame(dict(
-            function=symbolserver_match['symbol'],
-            filename=None, abs_path=None, lineno=0, colno=0,
-            package=symbolserver_match['package']), img)]
+            symbol=symbol, filename=None, abs_path=None, lineno=0,
+            colno=0, package=symbolserver_match['object_name']), img)]
 
     def symbolize_frame(self, instruction_addr, sdk_info=None,
                         symbolserver_match=None):
diff --git a/src/sentry/lang/native/utils.py b/src/sentry/lang/native/utils.py
index 5fa71fd508..18a3c1ff87 100644
--- a/src/sentry/lang/native/utils.py
+++ b/src/sentry/lang/native/utils.py
@@ -4,8 +4,7 @@ import six
 import logging
 
 from collections import namedtuple
-from symsynd.macho.arch import get_cpu_name
-from symsynd.utils import parse_addr
+from symsynd import get_cpu_name, parse_addr
 
 from sentry.interfaces.contexts import DeviceContextType
 
diff --git a/src/sentry/models/dsymfile.py b/src/sentry/models/dsymfile.py
index cfd1af8864..7a4f3930f1 100644
--- a/src/sentry/models/dsymfile.py
+++ b/src/sentry/models/dsymfile.py
@@ -21,7 +21,7 @@ from django.db import models, router, transaction, connection, IntegrityError
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 
-from symsynd.macho.arch import get_macho_uuids
+from symsynd import DebugInfo, DebugInfoError
 
 from sentry.db.models import FlexibleForeignKey, Model, BoundedBigIntegerField, \
     sane_repr, BaseManager, BoundedPositiveIntegerField
@@ -550,13 +550,17 @@ def create_files_from_macho_zip(fileobj, project=None):
             for fn in filenames:
                 fn = os.path.join(dirpath, fn)
                 try:
-                    uuids = get_macho_uuids(fn)
-                except (IOError, ValueError):
+                    di = DebugInfo.open_path(fn)
+                except DebugInfoError:
                     # Whatever was contained there, was probably not a
                     # macho file.
                     continue
-                for cpu, uuid in uuids:
-                    to_create.append((cpu, uuid, fn))
+                for variant in di.get_variants():
+                    to_create.append((
+                        variant.cpu_name,
+                        str(variant.uuid),  # noqa: B308
+                        fn,
+                    ))
 
         rv = []
         for cpu, uuid, filename in to_create:
diff --git a/tests/sentry/lang/native/test_plugin.py b/tests/sentry/lang/native/test_plugin.py
index 287ca06b39..004bb00bea 100644
--- a/tests/sentry/lang/native/test_plugin.py
+++ b/tests/sentry/lang/native/test_plugin.py
@@ -7,7 +7,7 @@ from sentry.testutils import TestCase
 from sentry.lang.native.symbolizer import Symbolizer
 from sentry.lang.native.plugin import convert_stacktrace
 
-from symsynd.utils import parse_addr
+from symsynd import parse_addr
 
 
 def test_legacy_stacktrace_converter():
