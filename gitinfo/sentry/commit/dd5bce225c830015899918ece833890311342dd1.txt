commit dd5bce225c830015899918ece833890311342dd1
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Feb 5 18:38:46 2015 -0800

    Abstract loading indicator/error

diff --git a/src/sentry/static/sentry/app/components/loadingError.jsx b/src/sentry/static/sentry/app/components/loadingError.jsx
new file mode 100644
index 0000000000..f8f189284f
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/loadingError.jsx
@@ -0,0 +1,31 @@
+/*** @jsx React.DOM */
+
+var React = require("react");
+
+var LoadingError = React.createClass({
+  propTypes: {
+    onRetry: React.PropTypes.func,
+    message: React.PropTypes.string
+  },
+
+  getInitialProps() {
+    return {
+      message: "There was an error loading data."
+    };
+  },
+
+  render() {
+    return (
+      <div className="alert alert-error alert-block">
+        <p>
+          {this.props.message}
+          {this.props.onRetry &&
+            <a onClick={this.props.onRetry}>Retry</a>
+          }
+        </p>
+      </div>
+    );
+  }
+});
+
+module.exports = LoadingError;
diff --git a/src/sentry/static/sentry/app/components/loadingIndicator.jsx b/src/sentry/static/sentry/app/components/loadingIndicator.jsx
new file mode 100644
index 0000000000..9081927f2e
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/loadingIndicator.jsx
@@ -0,0 +1,25 @@
+/*** @jsx React.DOM */
+
+var React = require("react");
+
+var LoadingIndicator = React.createClass({
+  propTypes: {
+    message: React.PropTypes.string
+  },
+
+  getInitialProps() {
+    return {
+      message: "Loading..."
+    };
+  },
+
+  render() {
+    return (
+      <div className="loading">
+        {this.props.message}
+      </div>
+    );
+  }
+});
+
+module.exports = LoadingIndicator;
diff --git a/src/sentry/static/sentry/app/views/aggregateEvents.jsx b/src/sentry/static/sentry/app/views/aggregateEvents.jsx
index ed484acd7c..55da48a2f6 100644
--- a/src/sentry/static/sentry/app/views/aggregateEvents.jsx
+++ b/src/sentry/static/sentry/app/views/aggregateEvents.jsx
@@ -4,6 +4,8 @@ var React = require("react");
 var Router = require("react-router");
 
 var api = require("../api");
+var LoadingError = require("../components/loadingError");
+var LoadingIndicator = require("../components/loadingIndicator");
 var PropTypes = require("../proptypes");
 
 var AggregateEvents = React.createClass({
@@ -16,7 +18,8 @@ var AggregateEvents = React.createClass({
   getInitialState() {
     return {
       eventList: null,
-      loading: true
+      loading: true,
+      error: false
     };
   },
 
@@ -27,23 +30,35 @@ var AggregateEvents = React.createClass({
   fetchData() {
     var params = this.getParams();
 
-    this.setState({loading: true});
+    this.setState({
+      loading: true,
+      error: false
+    });
 
     api.request('/groups/' + params.aggregateId + '/events/', {
       success: (data) => {
-        this.setState({eventList: data});
-      },
-      error: () => {
-        // TODO(dcramer):
+        this.setState({
+          eventList: data,
+          error: false,
+          loading: false
+        });
       },
-      complete: () => {
-        this.setState({loading: false});
-      }
-    });
+      error: (error) => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      }    });
   },
 
 
   render() {
+    if (this.state.loading) {
+      return <LoadingIndicator />;
+    } else if (this.state.error) {
+      return <LoadingError onRetry={this.fetchData} />;
+    }
+
     var children = [];
 
     if (this.state.eventList) {
@@ -58,7 +73,6 @@ var AggregateEvents = React.createClass({
 
     return (
       <div>
-        Events
         <table>
           {children}
         </table>
diff --git a/src/sentry/static/sentry/app/views/aggregateOverview.jsx b/src/sentry/static/sentry/app/views/aggregateOverview.jsx
index 1d129830d2..8e89771d8c 100644
--- a/src/sentry/static/sentry/app/views/aggregateOverview.jsx
+++ b/src/sentry/static/sentry/app/views/aggregateOverview.jsx
@@ -8,6 +8,8 @@ var AggregateActivity = require("./aggregate/activity");
 var AggregateChart = require("./aggregate/chart");
 var AggregateEvent = require("./aggregate/event");
 var AggregateEventToolbar = require("./aggregate/eventToolbar");
+var LoadingError = require("../components/loadingError");
+var LoadingIndicator = require("../components/loadingIndicator");
 var PropTypes = require("../proptypes");
 var TimeSince = require("../components/timeSince");
 var utils = require("../utils");
@@ -133,11 +135,9 @@ var AggregateOverview = React.createClass({
         </div>
 
         {this.state.loading ?
-          <div className="loading">Loading event data..</div>
+          <LoadingIndicator />
         : (this.state.error ?
-          <div className="alert alert-error alert-block">
-            <p>There was an error loading data. <a onClick={this.fetchData}>Retry</a></p>
-          </div>
+          <LoadingError onRetry={this.fetchData} />
         :
           <div>
             <MutedBox status={agg.status} />
diff --git a/src/sentry/static/sentry/app/views/aggregateTags.jsx b/src/sentry/static/sentry/app/views/aggregateTags.jsx
index f3df1b7f7a..ea1b87c842 100644
--- a/src/sentry/static/sentry/app/views/aggregateTags.jsx
+++ b/src/sentry/static/sentry/app/views/aggregateTags.jsx
@@ -5,6 +5,8 @@ var Router = require("react-router");
 
 var api = require("../api");
 var Count = require("../components/count");
+var LoadingError = require("../components/loadingError");
+var LoadingIndicator = require("../components/loadingIndicator");
 var PropTypes = require("../proptypes");
 
 var AggregateTags = React.createClass({
@@ -55,13 +57,9 @@ var AggregateTags = React.createClass({
 
   render() {
     if (this.state.loading) {
-      return <div className="loading"></div>;
+      return <LoadingIndicator />;
     } else if (this.state.error) {
-      return (
-        <div className="alert alert-error alert-block">
-          <p>There was an error loading data. <a onClick={this.fetchData}>Retry</a></p>
-        </div>
-      );
+      return <LoadingError onRetry={this.fetchData} />;
     }
 
     var children = [];
diff --git a/src/sentry/static/sentry/app/views/projectDetails.jsx b/src/sentry/static/sentry/app/views/projectDetails.jsx
index f5401c703c..bc3233813e 100644
--- a/src/sentry/static/sentry/app/views/projectDetails.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetails.jsx
@@ -7,6 +7,7 @@ var Router = require("react-router");
 var api = require("../api");
 var BreadcrumbMixin = require("../mixins/breadcrumbMixin");
 var MemberListStore = require("../stores/memberListStore");
+var LoadingIndicator = require("../components/loadingIndicator");
 var ProjectState = require("../mixins/projectState");
 var PropTypes = require("../proptypes");
 
@@ -75,7 +76,7 @@ var ProjectDetails = React.createClass({
 
   render() {
     if (!this.state.project) {
-      return <div className="loading">PUT ROBOT HERE PLZ KTHX</div>;
+      return <LoadingIndicator />;
     }
     return (
       <Router.RouteHandler
diff --git a/src/sentry/static/sentry/app/views/teamDashboard/eventList.jsx b/src/sentry/static/sentry/app/views/teamDashboard/eventList.jsx
new file mode 100644
index 0000000000..33fd63c36f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/teamDashboard/eventList.jsx
@@ -0,0 +1,150 @@
+/*** @jsx React.DOM */
+
+var React = require("react");
+
+var api = require("../../api");
+var Count = require("../../components/count");
+var LoadingError = require("../../components/loadingError");
+var LoadingIndicator = require("../../components/loadingIndicator");
+var PropTypes = require("../../proptypes");
+
+var EventNode = React.createClass({
+  propTypes: {
+    aggregate: PropTypes.Aggregate.isRequired
+  },
+
+  render() {
+    var agg = this.props.aggregate;
+
+    return (
+      <li>
+        <div className="dashboard-count">
+          <Count value={agg.count} />
+        </div>
+        <div className="dashboard-details">
+          <h3><a>{agg.title}</a></h3>
+          <p className="message">{agg.culprit}</p>
+          <p className="time"><span>First:</span> <time time-since="group.firstSeen"></time>. <span>Last:</span> <time time-since="group.lastSeen"></time>.</p>
+        </div>
+      </li>
+    );
+  }
+});
+
+var EventList = React.createClass({
+  propTypes: {
+    title: React.PropTypes.string.isRequired,
+    endpoint: React.PropTypes.string.isRequired
+  },
+
+  getInitialState() {
+    return {
+      aggList: [],
+      loading: true,
+      error: false,
+      statsPeriod: "24h"
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  componentDidUpdate(_, prevState) {
+    if (this.state.statsPeriod != prevState.statsPeriod) {
+      this.fetchData();
+    }
+  },
+
+  fetchData() {
+    this.setState({
+      loading: true,
+      error: false
+    });
+
+    var minutes;
+    switch(this.state.statsPeriod) {
+      case "15m":
+        minutes = "15";
+        break;
+      case "60m":
+        minutes = "60";
+        break;
+      case "24h":
+        minutes = "1440";
+        break;
+    }
+
+    api.request(this.props.endpoint, {
+      query: {
+        limit: 5,
+        minutes: minutes
+      },
+      success: (data) => {
+        this.setState({
+          aggList: data,
+          loading: false,
+          error: false
+        });
+      },
+      error: () => {
+        this.setState({
+          loading: false,
+          error: true
+        });
+      }
+    });
+  },
+
+  onSelectStatsPeriod(period) {
+    this.setState({
+      statsPeriod: period
+    });
+  },
+
+  render() {
+    var eventNodes = this.state.aggList.map((item) => {
+      return <EventNode aggregate={item} key={item.id} />;
+    });
+
+    return (
+      <div className="box">
+        <div className="box-header clearfix">
+          <h3 className="pull-left">{this.props.title}</h3>
+          <ul className="nav nav-pills nav-small pull-right">
+            <li className={this.state.statsPeriod === "15m" && "active"}>
+              <a onClick={this.onSelectStatsPeriod.bind(this, '15m')}>
+                15 minutes
+              </a>
+            </li>
+            <li className={this.state.statsPeriod === "60m" && "active"}>
+              <a onClick={this.onSelectStatsPeriod.bind(this, '60m')}>
+                60 minutes
+              </a>
+            </li>
+            <li className={this.state.statsPeriod === "24h" && "active"}>
+              <a onClick={this.onSelectStatsPeriod.bind(this, '24h')}>
+                24 hours
+              </a>
+            </li>
+          </ul>
+        </div>
+        <div className="box-content">
+          <div className="tab-pane active">
+            {this.state.loading ?
+              <LoadingIndicator />
+            : (this.state.error ?
+              <LoadingError onRetry={this.fetchData} />
+            :
+              <ul className="dashboard-events">
+                {eventNodes}
+              </ul>
+            )}
+          </div>
+        </div>
+      </div>
+    );
+  }
+});
+
+module.exports = EventList;
diff --git a/src/sentry/static/sentry/app/views/teamDetails.jsx b/src/sentry/static/sentry/app/views/teamDetails.jsx
index 2ba0c2ba9f..de1ecad22e 100644
--- a/src/sentry/static/sentry/app/views/teamDetails.jsx
+++ b/src/sentry/static/sentry/app/views/teamDetails.jsx
@@ -6,6 +6,7 @@ var Router = require("react-router");
 
 var api = require("../api");
 var BreadcrumbMixin = require("../mixins/breadcrumbMixin");
+var LoadingIndicator = require("../components/loadingIndicator");
 var PropTypes = require("../proptypes");
 var TeamState = require("../mixins/teamState");
 
@@ -50,11 +51,9 @@ var TeamDashboard = React.createClass({
 
   render() {
     if (!this.state.team) {
-      return <div className="loading">PUT ROBOT HERE PLZ KTHX</div>;
+      return <LoadingIndicator />;
     }
-    return (
-      <Router.RouteHandler />
-    );
+    return <Router.RouteHandler />;
   }
 });
 
