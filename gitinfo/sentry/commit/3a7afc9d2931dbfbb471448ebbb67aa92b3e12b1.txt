commit 3a7afc9d2931dbfbb471448ebbb67aa92b3e12b1
Author: Alex Hofsteede <alex@hofsteede.com>
Date:   Thu Apr 25 16:40:56 2019 -0700

    feat: `full` parameter for event list APIs (#12913)
    
    * feat: Allow client to specify full response format.
    
    For (org/project/group) event list apis, add the option of a 'full'
    parameter that serializes the complete event (with stacktraces etc)
    but defaults to False, meaning these event lists will render with the
    SimpleEventSerializer by default. the Simple version is faster/better
    for cases where we don't need all details of every event, just enough
    info to render a table/list view.
    
    Changes in behavior:
    Currently the org-events and group-events lists are already set to
    render the Simple version, but the project-events is set to render the
    full one, this PR changes that so that all of them render the Simple
    version by default.
    
    * use minimal_cols if getting full event

diff --git a/src/sentry/api/endpoints/group_events.py b/src/sentry/api/endpoints/group_events.py
index 439e7b8cdd..0f62bacfbf 100644
--- a/src/sentry/api/endpoints/group_events.py
+++ b/src/sentry/api/endpoints/group_events.py
@@ -16,7 +16,7 @@ from sentry.api.event_search import get_snuba_query_args
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.helpers.environments import get_environments
 from sentry.api.helpers.events import get_direct_hit_response
-from sentry.api.serializers import serialize, SimpleEventSerializer
+from sentry.api.serializers import EventSerializer, serialize, SimpleEventSerializer
 from sentry.api.paginator import DateTimePaginator, GenericOffsetPaginator
 from sentry.api.utils import get_date_range_from_params
 from sentry.models import Event, Group, SnubaEvent
@@ -90,18 +90,20 @@ class GroupEventsEndpoint(GroupEndpoint, EnvironmentMixin):
         if environments:
             params['environment'] = [env.name for env in environments]
 
+        full = request.GET.get('full', False)
         snuba_args = get_snuba_query_args(request.GET.get('query', None), params)
+        snuba_cols = SnubaEvent.minimal_columns if full else SnubaEvent.selected_columns
 
         data_fn = partial(
             # extract 'data' from raw_query result
             lambda *args, **kwargs: raw_query(*args, **kwargs)['data'],
-            selected_columns=SnubaEvent.selected_columns,
+            selected_columns=snuba_cols,
             orderby='-timestamp',
             referrer='api.group-events',
             **snuba_args
         )
 
-        serializer = SimpleEventSerializer()
+        serializer = EventSerializer() if full else SimpleEventSerializer()
         return self.paginate(
             request=request,
             on_results=lambda results: serialize(
diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index a5477a498f..20994de18d 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -9,7 +9,7 @@ from rest_framework.response import Response
 from sentry.api.bases import OrganizationEventsEndpointBase, OrganizationEventsError, NoProjects
 from sentry.api.helpers.events import get_direct_hit_response
 from sentry.api.paginator import GenericOffsetPaginator
-from sentry.api.serializers import serialize, SimpleEventSerializer
+from sentry.api.serializers import EventSerializer, serialize, SimpleEventSerializer
 from sentry.api.serializers.snuba import SnubaTSResultSerializer
 from sentry.models import SnubaEvent
 from sentry.utils.dates import parse_stats_period
@@ -37,6 +37,7 @@ class OrganizationEventsEndpoint(OrganizationEventsEndpointBase):
             if direct_hit_resp:
                 return direct_hit_resp
 
+        full = request.GET.get('full', False)
         try:
             snuba_args = self.get_snuba_query_args(request, organization)
         except OrganizationEventsError as exc:
@@ -46,16 +47,17 @@ class OrganizationEventsEndpoint(OrganizationEventsEndpointBase):
             # or user doesn't have access to projects in org
             data_fn = lambda *args, **kwargs: []
         else:
+            snuba_cols = SnubaEvent.minimal_columns if full else SnubaEvent.selected_columns
             data_fn = partial(
                 # extract 'data' from raw_query result
                 lambda *args, **kwargs: raw_query(*args, **kwargs)['data'],
-                selected_columns=SnubaEvent.selected_columns,
+                selected_columns=snuba_cols,
                 orderby='-timestamp',
                 referrer='api.organization-events',
                 **snuba_args
             )
 
-        serializer = SimpleEventSerializer()
+        serializer = EventSerializer() if full else SimpleEventSerializer()
         return self.paginate(
             request=request,
             on_results=lambda results: serialize(
diff --git a/src/sentry/api/endpoints/project_events.py b/src/sentry/api/endpoints/project_events.py
index 5c35cf6c17..6c708d027f 100644
--- a/src/sentry/api/endpoints/project_events.py
+++ b/src/sentry/api/endpoints/project_events.py
@@ -7,7 +7,7 @@ from functools import partial
 from sentry import options
 from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint
-from sentry.api.serializers import serialize
+from sentry.api.serializers import EventSerializer, serialize, SimpleEventSerializer
 from sentry.utils.apidocs import scenario, attach_scenarios
 
 
@@ -63,6 +63,8 @@ class ProjectEventsEndpoint(ProjectEndpoint):
             conditions.append(
                 [['positionCaseInsensitive', ['message', "'%s'" % (query,)]], '!=', 0])
 
+        full = request.GET.get('full', False)
+        snuba_cols = SnubaEvent.minimal_columns if full else SnubaEvent.selected_columns
         now = timezone.now()
         data_fn = partial(
             # extract 'data' from raw_query result
@@ -71,15 +73,16 @@ class ProjectEventsEndpoint(ProjectEndpoint):
             end=now,
             conditions=conditions,
             filter_keys={'project_id': [project.id]},
-            selected_columns=SnubaEvent.minimal_columns,
+            selected_columns=snuba_cols,
             orderby='-timestamp',
             referrer='api.project-events',
         )
 
+        serializer = EventSerializer() if full else SimpleEventSerializer()
         return self.paginate(
             request=request,
             on_results=lambda results: serialize(
-                [SnubaEvent(row) for row in results], request.user),
+                [SnubaEvent(row) for row in results], request.user, serializer),
             paginator=GenericOffsetPaginator(data_fn=data_fn)
         )
 
