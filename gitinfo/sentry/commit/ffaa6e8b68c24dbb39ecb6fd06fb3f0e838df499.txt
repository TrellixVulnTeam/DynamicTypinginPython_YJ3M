commit ffaa6e8b68c24dbb39ecb6fd06fb3f0e838df499
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Thu Apr 4 10:06:46 2019 +0200

    fix: Fix a bunch of null references (#12637)
    
    
    Since we turned on Rust-based store normalization a lot more data is
    persisted that was previously discarded.
    
    Update code to deal with it.
    
    Fix SENTRY-9X7
    Fix SENTRY-9BR
    Fix SENTRY-A58
    Fix SENTRY-9C3
    Fix SENTRY-A6Z
    Fix SENTRY-A48
    Fix SENTRY-A4A
    Fix SENTRY-A9D

diff --git a/src/sentry/filters/legacy_browsers.py b/src/sentry/filters/legacy_browsers.py
index 288e5cf063..531fbbaa4a 100644
--- a/src/sentry/filters/legacy_browsers.py
+++ b/src/sentry/filters/legacy_browsers.py
@@ -7,6 +7,7 @@ from rest_framework import serializers
 from sentry.models import ProjectOption
 from sentry.api.fields import MultipleChoiceField
 from sentry.utils.data_filters import FilterStatKeys
+from sentry.utils.safe import get_path
 
 """
 For default (legacy) filter
@@ -81,7 +82,7 @@ class LegacyBrowsersFilter(Filter):
 
     def get_user_agent(self, data):
         try:
-            for key, value in data['request']['headers']:
+            for key, value in get_path(data, 'request', 'headers', filter=True):
                 if key.lower() == 'user-agent':
                     return value
         except LookupError:
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 8421a00d2d..b625774a71 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -533,6 +533,9 @@ class Exception(Interface):
 
         output = []
         for exc in self.values:
+            if not exc:
+                continue
+
             output.append(u'{0}: {1}\n'.format(exc.type, exc.value))
             if exc.stacktrace:
                 output.append(
diff --git a/src/sentry/interfaces/http.py b/src/sentry/interfaces/http.py
index 2c3692d2c8..e26bd5ad0d 100644
--- a/src/sentry/interfaces/http.py
+++ b/src/sentry/interfaces/http.py
@@ -264,7 +264,7 @@ class Http(Interface):
         url = self.url
         if url:
             if self.query_string:
-                url = url + '?' + urlencode(self.query_string)
+                url = url + '?' + urlencode(get_path(self.query_string, filter=True))
             if self.fragment:
                 url = url + '#' + self.fragment
         return url
@@ -276,7 +276,7 @@ class Http(Interface):
                 'url': self.full_url,
                 'short_url': self.url,
                 'method': self.method,
-                'query_string': urlencode(self.query_string),
+                'query_string': urlencode(get_path(self.query_string, filter=True)),
                 'fragment': self.fragment,
             }
         )
diff --git a/src/sentry/ownership/grammar.py b/src/sentry/ownership/grammar.py
index b4b9bc0dfb..31d4cf8b65 100644
--- a/src/sentry/ownership/grammar.py
+++ b/src/sentry/ownership/grammar.py
@@ -104,13 +104,10 @@ class Matcher(namedtuple('Matcher', 'type pattern')):
 
     def test_path(self, data):
         for frame in _iter_frames(data):
-            try:
-                filename = frame['filename']
-            except KeyError:
-                try:
-                    filename = frame['abs_path']
-                except KeyError:
-                    continue
+            filename = frame.get('filename') or frame.get('abs_path')
+
+            if not filename:
+                continue
 
             # fnmatch keeps it's own internal cache, so
             # there isn't any optimization we can do here
diff --git a/src/sentry/utils/committers.py b/src/sentry/utils/committers.py
index b9b66e8af8..3f90a0886a 100644
--- a/src/sentry/utils/committers.py
+++ b/src/sentry/utils/committers.py
@@ -7,6 +7,7 @@ from sentry.api.serializers import serialize
 from sentry.models import (Release, ReleaseCommit, Commit, CommitFileChange, Event, Group)
 from sentry.api.serializers.models.commit import CommitSerializer, get_users_for_commits
 from sentry.utils import metrics
+from sentry.utils.safe import get_path
 
 from django.db.models import Q
 
@@ -38,15 +39,11 @@ def score_path_match_length(path_a, path_b):
 
 def _get_frame_paths(event):
     data = event.data
-    try:
-        frames = data['stacktrace']['frames']
-    except KeyError:
-        try:
-            frames = data['exception']['values'][0]['stacktrace']['frames']
-        except (KeyError, TypeError):
-            return []  # can't find stacktrace information
+    frames = get_path(data, 'stacktrace', 'frames', filter=True)
+    if frames:
+        return frames
 
-    return frames
+    return get_path(data, 'exception', 'values', 0, 'stacktrace', 'frames', filter=True) or []
 
 
 def _get_commits(releases):
@@ -186,7 +183,7 @@ def get_event_file_committers(project, event, frame_limit=25):
     if not commits:
         raise Commit.DoesNotExist
 
-    frames = _get_frame_paths(event)
+    frames = _get_frame_paths(event) or ()
     app_frames = [frame for frame in frames if frame['in_app']][-frame_limit:]
     if not app_frames:
         app_frames = [frame for frame in frames][-frame_limit:]
