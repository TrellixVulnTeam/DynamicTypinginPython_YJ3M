commit f9a3ebe1c97690f2697a5775359d1c38fa5ab519
Author: Ben Vinegar <ben@benv.ca>
Date:   Mon Nov 16 18:04:00 2015 -0800

    Stream: only poll if previous header link has no results

diff --git a/src/sentry/static/sentry/app/utils/cursorPoller.jsx b/src/sentry/static/sentry/app/utils/cursorPoller.jsx
index 153e3ebb44..dd6cd522a7 100644
--- a/src/sentry/static/sentry/app/utils/cursorPoller.jsx
+++ b/src/sentry/static/sentry/app/utils/cursorPoller.jsx
@@ -21,23 +21,27 @@ class CursorPoller {
     this._pollingEndpoint = url;
   }
 
-  enable(){
+  enable() {
     this._active = true;
     if (!this._timeoutId) {
       this._timeoutId = window.setTimeout(this.poll.bind(this), this.getDelay());
     }
   }
 
-  disable(){
+  disable() {
     this._active = false;
     if (this._timeoutId) {
       window.clearTimeout(this._timeoutId);
       this._timeoutId = null;
     }
+
+    if (this._lastRequest) {
+      this._lastRequest.cancel();
+    }
   }
 
   poll() {
-    api.request(this._pollingEndpoint, {
+    this._lastRequest = api.request(this._pollingEndpoint, {
       success: (data, _, jqXHR) => {
         // cancel in progress operation if disabled
         if (!this._active) {
@@ -60,6 +64,8 @@ class CursorPoller {
         this.options.success(data, jqXHR.getResponseHeader('Link'));
       },
       complete: () => {
+        this._lastRequest = null;
+
         if (this._active) {
           this._timeoutId = window.setTimeout(this.poll.bind(this), this.getDelay());
         }
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index bc127cab51..9cedb1ff24 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -70,8 +70,7 @@ const Stream = React.createClass({
 
     this._streamManager = new utils.StreamManager(GroupStore);
     this._poller = new utils.CursorPoller({
-      success: this.onRealtimePoll,
-      endpoint: this.getGroupListEndpoint()
+      success: this.onRealtimePoll
     });
 
     let realtime = Cookies.get('realtimeActive');
@@ -80,9 +79,6 @@ const Stream = React.createClass({
       this.setState({
         realtimeActive: realtimeActive
       });
-      if (realtimeActive) {
-        this._poller.enable();
-      }
     }
 
     this.fetchTags();
@@ -92,7 +88,6 @@ const Stream = React.createClass({
   componentWillReceiveProps(nextProps) {
     if (nextProps.location.search !== this.props.location.search) {
       this.setState(this.getQueryStringState(nextProps), this.fetchData);
-      this._poller.disable();
     }
   },
 
@@ -102,8 +97,9 @@ const Stream = React.createClass({
 
   componentDidUpdate(prevProps, prevState) {
     if (prevState.realtimeActive !== this.state.realtimeActive) {
+      // User toggled realtime button
       if (this.state.realtimeActive) {
-        this._poller.enable();
+        this.resumePolling();
       } else {
         this._poller.disable();
       }
@@ -198,6 +194,8 @@ const Stream = React.createClass({
       this.lastRequest.cancel();
     }
 
+    this._poller.disable();
+
     this.lastRequest = api.request(url, {
       method: 'GET',
       data: requestParams,
@@ -228,14 +226,23 @@ const Stream = React.createClass({
       complete: (jqXHR) => {
         this.lastRequest = null;
 
-        let links = parseLinkHeader(jqXHR.getResponseHeader('Link'));
-        if (links && links.previous) {
-          this._poller.setEndpoint(links.previous.href);
-        }
+        this.resumePolling();
       }
     });
   },
 
+  resumePolling() {
+    if (!this.state.pageLinks)
+      return;
+
+    // Only resume polling if we're on the first page of results
+    let links = parseLinkHeader(this.state.pageLinks);
+    if (links && !links.previous.results && this.state.realtimeActive) {
+      this._poller.setEndpoint(links.previous.href);
+      this._poller.enable();
+    }
+  },
+
   getGroupListEndpoint() {
     let params = this.props.params;
 
diff --git a/tests/js/spec/views/stream.spec.jsx b/tests/js/spec/views/stream.spec.jsx
index 86af5b8e12..d30d249a8b 100644
--- a/tests/js/spec/views/stream.spec.jsx
+++ b/tests/js/spec/views/stream.spec.jsx
@@ -25,7 +25,10 @@ describe('Stream', function() {
   beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
 
-    this.stubbedApiRequest = this.sandbox.stub(Api, 'request');
+    this.stubbedApiRequest = this.sandbox.stub(Api, 'request', (url, options) => {
+      options.complete && options.complete();
+    });
+
     stubReactComponents(this.sandbox, [StreamGroup, StreamFilters, StreamSidebar, StreamActions, Sticky]);
 
     this.Element = (
@@ -41,23 +44,15 @@ describe('Stream', function() {
   });
 
   describe('fetchData()', function() {
-
     describe('complete handler', function () {
       beforeEach(function () {
-        this.stubbedApiRequest.restore();
-        this.sandbox.stub(Api, 'request', (url, options) => {
-          options.complete && options.complete({
-            getResponseHeader: () => this.linkHeader
-          });
-        });
-
         this.sandbox.stub(CursorPoller.prototype, 'setEndpoint');
       });
 
       it('should reset the poller endpoint and sets cursor URL', function() {
-        this.linkHeader = DEFAULT_LINKS_HEADER;
-
         let stream = TestUtils.renderIntoDocument(this.Element);
+        stream.state.pageLinks = DEFAULT_LINKS_HEADER;
+        stream.state.realtimeActive = true;
         stream.fetchData();
 
         expect(CursorPoller.prototype.setEndpoint
@@ -65,11 +60,22 @@ describe('Stream', function() {
           .to.be.true;
       });
 
-      it('should not set the poller if the \'previous\' link is missing', function () {
-        this.linkHeader =
-        '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/groups/?cursor=1443575731:0:0>; rel="next"; results="true"; cursor="1443575731:0:0';
+      it('should not enable the poller if realtimeActive is false', function () {
+        let stream = TestUtils.renderIntoDocument(this.Element);
+        stream.state.pageLinks = DEFAULT_LINKS_HEADER;
+        stream.state.realtimeActive = false;
+        stream.fetchData();
 
+        expect(CursorPoller.prototype.setEndpoint.notCalled).to.be.ok;
+      });
+
+      it('should not enable the poller if the \'previous\' link has results', function () {
         let stream = TestUtils.renderIntoDocument(this.Element);
+        stream.state.pageLinks =
+          '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/groups/?cursor=1443575731:0:1>; rel="previous"; results="true"; cursor="1443575731:0:1", ' +
+          '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/groups/?cursor=1443575731:0:0>; rel="next"; results="true"; cursor="1443575731:0:0';
+
+        stream.state.realtimeActive = true;
         stream.fetchData();
 
         expect(CursorPoller.prototype.setEndpoint.notCalled).to.be.ok;
