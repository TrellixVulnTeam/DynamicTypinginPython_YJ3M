commit bf081f7d4cb89ed9320d2b44c9aff9e3daba030a
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Jul 11 11:37:29 2018 -0700

    feat(analytics): Add open/select tracking to Command Pal (#9006)

diff --git a/src/sentry/static/sentry/app/components/autoComplete.jsx b/src/sentry/static/sentry/app/components/autoComplete.jsx
index 056efb7c95..dcdfb934f4 100644
--- a/src/sentry/static/sentry/app/components/autoComplete.jsx
+++ b/src/sentry/static/sentry/app/components/autoComplete.jsx
@@ -180,7 +180,7 @@ class AutoComplete extends React.Component {
   handleSelect = item => {
     let {onSelect, itemToString} = this.props;
 
-    callIfFunction(onSelect, item);
+    callIfFunction(onSelect, item, this.state);
 
     this.closeMenu();
     this.setState({
diff --git a/src/sentry/static/sentry/app/components/search/index.jsx b/src/sentry/static/sentry/app/components/search/index.jsx
index 90131d1e34..6b9f19a3fa 100644
--- a/src/sentry/static/sentry/app/components/search/index.jsx
+++ b/src/sentry/static/sentry/app/components/search/index.jsx
@@ -58,9 +58,15 @@ class Search extends React.Component {
     ),
   };
 
+  componentDidMount() {
+    analytics('omnisearch.open');
+  }
+
   handleSelect = (item, state) => {
     if (!item) return;
 
+    analytics('omnisearch.select', {query: state && state.inputValue});
+
     let {to} = item;
     if (!to) return;
 
diff --git a/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx b/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
index c65950b936..e6370d8c11 100644
--- a/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
+++ b/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
@@ -216,6 +216,8 @@ class ApiSource extends React.Component {
       return this.api.requestPromise(url).then(
         resp => resp,
         err => {
+          // No need to log 404 errors
+          if (err && err.status === 404) return null;
           this.handleRequestError(err, {orgId, url});
           return null;
         }
diff --git a/tests/js/spec/components/autoComplete.spec.jsx b/tests/js/spec/components/autoComplete.spec.jsx
index c8861297db..8d6999746f 100644
--- a/tests/js/spec/components/autoComplete.spec.jsx
+++ b/tests/js/spec/components/autoComplete.spec.jsx
@@ -196,7 +196,10 @@ describe('AutoComplete', function() {
         .find('li')
         .at(1)
         .simulate('click');
-      expect(mocks.onSelect).toHaveBeenCalledWith(items[1]);
+      expect(mocks.onSelect).toHaveBeenCalledWith(
+        items[1],
+        expect.objectContaining({inputValue: '', highlightedIndex: 0})
+      );
 
       expect(wrapper.state('inputValue')).toBe('Pineapple');
       expect(wrapper.instance().items.size).toBe(0);
@@ -216,7 +219,10 @@ describe('AutoComplete', function() {
       expect(wrapper.instance().items.size).toBe(3);
       input.simulate('keyDown', {key: 'Enter'});
 
-      expect(mocks.onSelect).toHaveBeenCalledWith(items[2]);
+      expect(mocks.onSelect).toHaveBeenCalledWith(
+        items[2],
+        expect.objectContaining({inputValue: '', highlightedIndex: 2})
+      );
       expect(wrapper.instance().items.size).toBe(0);
       expect(wrapper.state('inputValue')).toBe('Orange');
     });
@@ -277,7 +283,10 @@ describe('AutoComplete', function() {
       expect(wrapper.instance().items.size).toBe(2);
 
       input.simulate('keyDown', {key: 'Enter'});
-      expect(mocks.onSelect).toHaveBeenCalledWith(items[1]);
+      expect(mocks.onSelect).toHaveBeenCalledWith(
+        items[1],
+        expect.objectContaining({inputValue: 'ap', highlightedIndex: 1})
+      );
       expect(wrapper.instance().items.size).toBe(0);
       expect(wrapper.state('inputValue')).toBe('Pineapple');
     });
@@ -383,7 +392,10 @@ describe('AutoComplete', function() {
         .find('li')
         .at(1)
         .simulate('click');
-      expect(mocks.onSelect).toHaveBeenCalledWith(items[1]);
+      expect(mocks.onSelect).toHaveBeenCalledWith(
+        items[1],
+        expect.objectContaining({inputValue: '', highlightedIndex: 0})
+      );
 
       expect(wrapper.state('inputValue')).toBe('Pineapple');
       expect(mocks.onClose).toHaveBeenCalledTimes(1);
@@ -402,7 +414,10 @@ describe('AutoComplete', function() {
       expect(wrapper.instance().items.size).toBe(3);
       input.simulate('keyDown', {key: 'Enter'});
 
-      expect(mocks.onSelect).toHaveBeenCalledWith(items[2]);
+      expect(mocks.onSelect).toHaveBeenCalledWith(
+        items[2],
+        expect.objectContaining({inputValue: '', highlightedIndex: 2})
+      );
       expect(mocks.onClose).toHaveBeenCalledTimes(1);
       expect(wrapper.state('inputValue')).toBe('Orange');
     });
@@ -461,7 +476,10 @@ describe('AutoComplete', function() {
       expect(wrapper.instance().items.size).toBe(2);
 
       input.simulate('keyDown', {key: 'Enter'});
-      expect(mocks.onSelect).toHaveBeenCalledWith(items[1]);
+      expect(mocks.onSelect).toHaveBeenCalledWith(
+        items[1],
+        expect.objectContaining({inputValue: 'ap', highlightedIndex: 1})
+      );
       expect(mocks.onClose).toHaveBeenCalledTimes(1);
       expect(wrapper.state('inputValue')).toBe('Pineapple');
     });
