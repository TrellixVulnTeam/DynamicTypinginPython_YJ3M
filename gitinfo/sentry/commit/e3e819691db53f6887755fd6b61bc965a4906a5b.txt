commit e3e819691db53f6887755fd6b61bc965a4906a5b
Author: Billy Vong <billyvg@gmail.com>
Date:   Thu Jul 27 18:24:54 2017 -0700

    Remove old views

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 91338dcaa9..332c9d1c82 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -24,7 +24,6 @@ import GroupActivity from './views/groupActivity';
 import GroupDetails from './views/groupDetails';
 import GroupEventDetails from './views/groupEventDetails';
 import GroupEvents from './views/groupEvents';
-import GroupHashes from './views/groupHashes';
 import GroupTags from './views/groupTags';
 import GroupTagValues from './views/groupTagValues';
 import GroupUserReports from './views/groupUserReports';
@@ -290,7 +289,6 @@ function routes() {
             <Route path="activity/" component={errorHandler(GroupActivity)} />
             <Route path="events/:eventId/" component={errorHandler(GroupEventDetails)} />
             <Route path="events/" component={errorHandler(GroupEvents)} />
-            <Route path="hashes/" component={errorHandler(GroupHashes)} />
             <Route path="tags/" component={errorHandler(GroupTags)} />
             <Route path="tags/:tagKey/" component={errorHandler(GroupTagValues)} />
             <Route path="feedback/" component={errorHandler(GroupUserReports)} />
diff --git a/src/sentry/static/sentry/app/views/groupHashes.jsx b/src/sentry/static/sentry/app/views/groupHashes.jsx
deleted file mode 100644
index d8590140ce..0000000000
--- a/src/sentry/static/sentry/app/views/groupHashes.jsx
+++ /dev/null
@@ -1,298 +0,0 @@
-import React from 'react';
-import moment from 'moment';
-
-import ApiMixin from '../mixins/apiMixin';
-import TooltipMixin from '../mixins/tooltip';
-import GroupState from '../mixins/groupState';
-
-import LoadingError from '../components/loadingError';
-import LoadingIndicator from '../components/loadingIndicator';
-import Pagination from '../components/pagination';
-import LinkWithConfirmation from '../components/linkWithConfirmation';
-import Link from '../components/link';
-
-import IndicatorStore from '../stores/indicatorStore';
-
-import {t} from '../locale';
-
-const GroupHashRow = React.createClass({
-  propTypes: {
-    disabled: React.PropTypes.bool,
-    hash: React.PropTypes.object.isRequired,
-    onChange: React.PropTypes.func.isRequired,
-    orgId: React.PropTypes.string,
-    projectId: React.PropTypes.string,
-    groupId: React.PropTypes.string
-  },
-
-  mixins: [
-    TooltipMixin({
-      selector: '.tip'
-    })
-  ],
-
-  getInitialState() {
-    return {
-      checked: false
-    };
-  },
-
-  toggleCheckbox() {
-    this.setState({checked: !this.state.checked}, () => {
-      this.props.onChange(this.props.hash, this.state.checked);
-    });
-  },
-
-  render() {
-    let {hash, disabled, orgId, projectId, groupId} = this.props;
-
-    let locked = hash.state === 'locked';
-    let checkboxDisabled = disabled || locked;
-
-    let lockedSpanProps = {};
-    if (locked) {
-      lockedSpanProps = {
-        className: 'tip',
-        style: {textDecoration: 'line-through'},
-        title: t('This hash is currently locked (busy) and cannot be unmerged.')
-      };
-    }
-
-    return (
-      <tr
-        key={hash.id}
-        onClick={e => {
-          // clicking anywhere in the row will toggle the checkbox
-          if (e.currentTarget.type !== 'input' && !checkboxDisabled)
-            this.toggleCheckbox();
-        }}>
-        <td>
-          <h5>
-            <span {...lockedSpanProps}>
-              {hash.id}
-            </span>
-          </h5>
-        </td>
-        <td>
-          {hash.latestEvent &&
-            <Link
-              to={`/${orgId}/${projectId}/issues/${groupId}/events/${hash.latestEvent.id}`}>
-              {moment(hash.latestEvent).fromNow()}
-            </Link>}
-        </td>
-        <td style={{textAlign: 'right'}}>
-          <input
-            type="checkbox"
-            className="chk-select"
-            disabled={checkboxDisabled}
-            checked={this.state.checked}
-            onChange={this.toggleCheckbox}
-          />
-        </td>
-      </tr>
-    );
-  }
-});
-
-const GroupHashes = React.createClass({
-  mixins: [ApiMixin, GroupState],
-
-  getInitialState() {
-    return {
-      hashList: [],
-      loading: true,
-      error: false,
-      pageLinks: '',
-      selectedSet: new Set()
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  componentWillReceiveProps(nextProps) {
-    if (nextProps.params.groupId !== this.props.params.groupId) {
-      this.setState(
-        {
-          hashList: [],
-          selectedSet: new Set(),
-          loading: true,
-          error: false
-        },
-        this.fetchData
-      );
-    }
-  },
-
-  getEndpoint() {
-    let params = this.props.params;
-    let queryParams = {
-      ...this.props.location.query,
-      limit: 50
-    };
-
-    return `/issues/${params.groupId}/hashes/?${jQuery.param(queryParams)}`;
-  },
-
-  fetchData() {
-    let queryParams = this.props.location.query;
-
-    this.setState({
-      loading: true,
-      error: false
-    });
-
-    this.api.request(this.getEndpoint(), {
-      method: 'GET',
-      data: queryParams,
-      success: (data, _, jqXHR) => {
-        this.setState({
-          hashList: data,
-          error: false,
-          loading: false,
-          pageLinks: jqXHR.getResponseHeader('Link')
-        });
-      },
-      error: error => {
-        this.setState({
-          error: true,
-          loading: false
-        });
-      }
-    });
-  },
-
-  handleHashToggle(hash, enabled) {
-    let {selectedSet} = this.state;
-    if (enabled) {
-      selectedSet.add(hash.id);
-    } else {
-      selectedSet.delete(hash.id);
-    }
-
-    this.setState({
-      selectedSet: new Set(selectedSet)
-    });
-  },
-
-  handleUnmerge() {
-    let {params} = this.props;
-    let {selectedSet} = this.state;
-
-    let ids = Array.from(selectedSet.values());
-
-    let loadingIndicator = IndicatorStore.add(t('Unmerging issues..'));
-    this.api.request(`/issues/${params.groupId}/hashes/`, {
-      method: 'DELETE',
-      query: {
-        id: ids
-      },
-      success: (data, _, jqXHR) => {
-        this.setState({
-          hashList: this.state.hashList.map(hash => {
-            if (selectedSet.has(hash.id)) {
-              hash.state = 'locked';
-            }
-            return hash;
-          }),
-          error: false
-        });
-        IndicatorStore.add(t('Issues successfully queued for unmerging.'), 'success', {
-          duration: 5000
-        });
-      },
-      error: error => {
-        this.setState({error: true});
-      },
-      complete: () => {
-        IndicatorStore.remove(loadingIndicator);
-        this.setState({loading: false});
-      }
-    });
-  },
-
-  renderEmpty() {
-    return (
-      <div className="box empty-stream">
-        <span className="icon icon-exclamation" />
-        <p>{t("There don't seem to be any hashes for this issue.")}</p>
-      </div>
-    );
-  },
-
-  renderResults() {
-    let {hashList, selectedSet} = this.state;
-    let {orgId, projectId, groupId} = this.props.params;
-
-    // Need to always leave at least one hash; disable remaining checkboxes
-    // if remaining count is 1
-    let hashesCount = hashList.length;
-    let selectedCount = selectedSet.size;
-    let isRemainingDisabled = hashesCount - selectedCount === 1;
-    let children = hashList.map(hash => {
-      return (
-        <GroupHashRow
-          {...{orgId, projectId, groupId}}
-          hash={hash}
-          key={hash.id}
-          disabled={isRemainingDisabled && !selectedSet.has(hash.id)}
-          onChange={this.handleHashToggle}
-        />
-      );
-    });
-
-    return (
-      <div>
-        <div className="alert alert-block alert-warning">
-          <strong>Warning:</strong>
-          {' '}
-          This is an experimental feature. Data may become temporarily unavailable when unmerging issues.
-        </div>
-        <div className="event-list">
-          <table className="table">
-            <thead>
-              <tr>
-                <th>{t('ID')}</th>
-                <th>{t('Last seen')}</th>
-                <th
-                  className="pull-right"
-                  style={{borderBottom: 'none', padding: '8px 20px'}}>
-                  <LinkWithConfirmation
-                    disabled={this.state.selectedSet.size === 0}
-                    ref="unmerge"
-                    message={t('Are you sure you want to unmerge these issues?')}
-                    className="btn btn-sm btn-default"
-                    onConfirm={this.handleUnmerge}>
-                    {t('Unmerge')}
-                  </LinkWithConfirmation>
-                </th>
-              </tr>
-            </thead>
-            <tbody>
-              {children}
-            </tbody>
-          </table>
-        </div>
-        <Pagination pageLinks={this.state.pageLinks} />
-      </div>
-    );
-  },
-
-  renderBody() {
-    let body;
-
-    if (this.state.loading) body = <LoadingIndicator />;
-    else if (this.state.error) body = <LoadingError onRetry={this.fetchData} />;
-    else if (this.state.hashList.length > 0) body = this.renderResults();
-    else body = this.renderEmpty();
-
-    return body;
-  },
-
-  render() {
-    return this.renderBody();
-  }
-});
-
-export default GroupHashes;
diff --git a/src/sentry/static/sentry/app/views/similarIssues.jsx b/src/sentry/static/sentry/app/views/similarIssues.jsx
deleted file mode 100644
index 9607dec742..0000000000
--- a/src/sentry/static/sentry/app/views/similarIssues.jsx
+++ /dev/null
@@ -1,165 +0,0 @@
-import React, {PropTypes} from 'react';
-
-import {t} from '../locale';
-import ApiMixin from '../mixins/apiMixin';
-import GroupState from '../mixins/groupState';
-import LoadingError from '../components/loadingError';
-import LoadingIndicator from '../components/loadingIndicator';
-import Pagination from '../components/pagination';
-import SimilarIssueItem from '../components/SimilarIssueItem';
-
-const GroupEvents = React.createClass({
-  propTypes: {
-    query: PropTypes.string
-  },
-
-  mixins: [ApiMixin, GroupState],
-
-  getInitialState() {
-    return {
-      issueList: [],
-      loading: true,
-      error: false,
-      pageLinks: '',
-      hidden: {},
-      busy: {}
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  componentWillReceiveProps(nextProps) {
-    if (
-      nextProps.params.groupId !== this.props.params.groupId ||
-      nextProps.location.search !== this.props.location.search
-    ) {
-      this.fetchData();
-    }
-  },
-
-  getEndpoint() {
-    let params = this.props.params;
-    return `/issues/${params.groupId}/similar/`;
-  },
-
-  fetchData() {
-    this.setState({
-      loading: true,
-      error: false
-    });
-
-    this.api.request(this.getEndpoint(), {
-      method: 'GET',
-      data: undefined,
-      success: (data, _, jqXHR) => {
-        this.setState({
-          issueList: data,
-          error: false,
-          loading: false,
-          pageLinks: jqXHR.getResponseHeader('Link')
-        });
-      },
-      error: err => {
-        let error = err.responseJSON || true;
-        error = error.detail || true;
-        this.setState({
-          error,
-          loading: false
-        });
-      }
-    });
-  },
-
-  handleMerge({issue}, e) {
-    const {query, params} = this.props;
-
-    if (params) {
-      this.setState({
-        ...this.state,
-        busy: {
-          ...this.state.busy,
-          [issue.id]: true
-        }
-      });
-
-      const {groupId, orgId, projectId} = params;
-      if (groupId && orgId && projectId) {
-        this.api.merge(
-          {
-            orgId,
-            projectId,
-            itemIds: [params.groupId, issue.id],
-            query
-          },
-          {
-            success: () => {
-              this.setState({
-                ...this.state,
-                hidden: {
-                  ...this.state.hidden,
-                  [issue.id]: true
-                }
-              });
-            },
-            error: () => {
-              this.setState({
-                ...this.state,
-                busy: {
-                  ...this.state.busy,
-                  [issue.id]: false
-                }
-              });
-            }
-          }
-        );
-      }
-    }
-  },
-
-  renderEmpty() {
-    return (
-      <div className="box empty-stream">
-        <span className="icon icon-exclamation" />
-        <p>
-          {t('Found no similar issues.')}
-        </p>
-      </div>
-    );
-  },
-
-  render() {
-    let {orgId, projectId} = this.props.params;
-    const isLoading = this.state.loading;
-    const isError = this.state.error && !isLoading;
-    const hasResults = this.state.issueList.length > 0 && !isError && !isLoading;
-    const noResults = !hasResults && !isError && !isLoading;
-
-    return (
-      <div>
-        {isLoading && <LoadingIndicator />}
-        {isError && <LoadingError message={this.state.error} onRetry={this.fetchData} />}
-        {hasResults &&
-          <ul className="group-list">
-            {this.state.issueList.map(([issue, score]) => (
-              <SimilarIssueItem
-                key={issue.id}
-                visible={!this.state.hidden[issue.id]}
-                busy={this.state.busy[issue.id]}
-                orgId={orgId}
-                projectId={projectId}
-                event={issue}
-                score={score}
-                onMerge={this.handleMerge}
-              />
-            ))}
-          </ul>}
-        {hasResults && <Pagination pageLinks={this.state.pageLinks} />}
-        {noResults && this.renderEmpty()}
-      </div>
-    );
-  }
-});
-
-export default GroupEvents;
