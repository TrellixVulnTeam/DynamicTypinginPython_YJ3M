commit ccabe3fa25303f549444495158d25a468ddf8d62
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Fri Sep 29 11:13:45 2017 +0200

    fix: Add stacktrace form exception to raw report

diff --git a/src/sentry/api/endpoints/event_apple_crash_report.py b/src/sentry/api/endpoints/event_apple_crash_report.py
index 88030d5bd9..eb6db5a446 100644
--- a/src/sentry/api/endpoints/event_apple_crash_report.py
+++ b/src/sentry/api/endpoints/event_apple_crash_report.py
@@ -46,7 +46,8 @@ class EventAppleCrashReportEndpoint(Endpoint):
             )
 
         threads = (event.data.get('threads') or {}).get('values')
-        exception = (event.data.get('sentry.interfaces.Exception') or {}).get('values')
+        exceptions = (event.data.get(
+            'sentry.interfaces.Exception') or {}).get('values')
 
         symbolicated = (request.GET.get('minified') not in ('1', 'true'))
         debug_images = None
@@ -59,14 +60,16 @@ class EventAppleCrashReportEndpoint(Endpoint):
                 context=event.data.get('contexts'),
                 debug_images=debug_images,
                 symbolicated=symbolicated,
-                exception=exception
+                exceptions=exceptions
             )
         )
 
-        response = HttpResponse(apple_crash_report_string, content_type='text/plain')
+        response = HttpResponse(apple_crash_report_string,
+                                content_type='text/plain')
 
         if request.GET.get('download') is not None:
-            filename = "{}{}.crash".format(event.event_id, symbolicated and '-symbolicated' or '')
+            filename = "{}{}.crash".format(
+                event.event_id, symbolicated and '-symbolicated' or '')
             response = StreamingHttpResponse(
                 apple_crash_report_string,
                 content_type='text/plain',
diff --git a/src/sentry/lang/native/applecrashreport.py b/src/sentry/lang/native/applecrashreport.py
index e1d828c6c3..df9df95864 100644
--- a/src/sentry/lang/native/applecrashreport.py
+++ b/src/sentry/lang/native/applecrashreport.py
@@ -12,13 +12,13 @@ REPORT_VERSION = '104'
 @implements_to_string
 class AppleCrashReport(object):
     def __init__(
-        self, threads=None, context=None, debug_images=None, symbolicated=False, exception=None
+        self, threads=None, context=None, debug_images=None, symbolicated=False, exceptions=None
     ):
         self.threads = threads
         self.context = context
         self.debug_images = debug_images
         self.symbolicated = symbolicated
-        self.exception = exception
+        self.exceptions = exceptions
 
     def __str__(self):
         rv = []
@@ -30,19 +30,21 @@ class AppleCrashReport(object):
 
     def _get_meta_header(self):
         return 'OS Version: %s %s (%s)\nReport Version: %s' % (
-            self.context.get('os').get('name'), self.context.get('os').get('version'),
+            self.context.get('os').get(
+                'name'), self.context.get('os').get('version'),
             self.context.get('os').get('build'), REPORT_VERSION
         )
 
     def _get_exception_info(self):
         rv = []
-        if self.exception and self.exception[0]:
+        if self.exceptions and self.exceptions[0]:
             # We only have one exception at a time
-            exception = self.exception[0] or {}
+            exception = self.exceptions[0] or {}
             mechanism = exception.get('mechanism') or {}
 
             signal = (mechanism.get('posix_signal') or {}).get('name')
-            name = (mechanism.get('mach_exception') or {}).get('exception_name')
+            name = (mechanism.get('mach_exception')
+                    or {}).get('exception_name')
 
             if name or signal:
                 rv.append(
@@ -55,28 +57,32 @@ class AppleCrashReport(object):
             if exc_name:
                 rv.append(
                     'Exception Codes: %s%s' %
-                    (exc_name, exc_addr is not None and (' at %s' % exc_addr) or '', )
+                    (exc_name, exc_addr is not None and (
+                        ' at %s' % exc_addr) or '', )
                 )
 
             if exception.get('thread_id') is not None:
                 rv.append('Crashed Thread: %s' % exception['thread_id'])
 
             if exception.get('value'):
-                rv.append('\nApplication Specific Information:\n%s' % exception['value'])
+                rv.append('\nApplication Specific Information:\n%s' %
+                          exception['value'])
 
         return '\n'.join(rv)
 
     def get_threads_apple_string(self):
         rv = []
-        for thread in self.threads or []:
-            thread_string = self.get_thread_apple_string(thread)
+        exception = self.exceptions or []
+        threads = self.threads or []
+        for thread_info in (exception + threads):
+            thread_string = self.get_thread_apple_string(thread_info)
             if thread_string is not None:
                 rv.append(thread_string)
         return '\n\n'.join(rv)
 
-    def get_thread_apple_string(self, thread):
+    def get_thread_apple_string(self, thread_info):
         rv = []
-        stacktrace = thread.get('stacktrace')
+        stacktrace = thread_info.get('stacktrace')
         if stacktrace is None:
             return None
         if stacktrace:
@@ -85,7 +91,8 @@ class AppleCrashReport(object):
                 for i, frame in enumerate(reversed(frames)):
                     frame_string = self._convert_frame_to_apple_string(
                         frame=frame,
-                        next=frames[len(frames) - i - 2] if i < len(frames) - 1 else None,
+                        next=frames[len(frames) - i -
+                                    2] if i < len(frames) - 1 else None,
                         number=i
                     )
                     if frame_string is not None:
@@ -93,41 +100,52 @@ class AppleCrashReport(object):
 
         if len(rv) == 0:
             return None  # No frames in thread, so we remove thread
-        thread_string = 'Thread %s name: %s\n' % (
-            thread['id'], thread.get('name') and thread['name'] or ''
+
+        is_exception = thread_info.get('mechanism', False)
+        thread_id = thread_info.get('id', False) or thread_info.get(
+            'thread_id', False) or '0'
+        thread_name = thread_info.get('name', False)
+        thread_name_string = ' name: %s' % (thread_name) if thread_name else ''
+        thread_crashed = thread_info.get('crashed') or is_exception
+        thread_crashed_thread = ' Crashed:' if thread_crashed else ''
+        thread_string = 'Thread %s%s%s\n' % (
+            thread_id, thread_name_string, thread_crashed_thread
         )
-        if thread.get('crashed'):
-            thread_string += 'Thread %s Crashed:\n' % thread['id']
         return thread_string + '\n'.join(rv)
 
     def _convert_frame_to_apple_string(self, frame, next=None, number=0):
         if frame.get('instruction_addr') is None:
             return None
         slide_value = self._get_slide_value(frame.get('image_addr'))
-        instruction_addr = slide_value + parse_addr(frame.get('instruction_addr'))
+        instruction_addr = slide_value + \
+            parse_addr(frame.get('instruction_addr'))
         image_addr = slide_value + parse_addr(frame.get('image_addr'))
         offset = ''
         if frame.get('image_addr') is not None and \
            (not self.symbolicated or (
                 frame.get('function') or NATIVE_UNKNOWN_STRING) == NATIVE_UNKNOWN_STRING):
             offset = ' + %s' % (
-                instruction_addr - slide_value - parse_addr(frame.get('symbol_addr'))
+                instruction_addr - slide_value -
+                parse_addr(frame.get('symbol_addr'))
             )
         symbol = hex(image_addr)
         if self.symbolicated:
             file = ''
             if frame.get('filename') and frame.get('lineno'):
                 file = ' (%s:%s)' % (
-                    posixpath.basename(frame.get('filename') or NATIVE_UNKNOWN_STRING),
+                    posixpath.basename(frame.get('filename')
+                                       or NATIVE_UNKNOWN_STRING),
                     frame['lineno']
                 )
-            symbol = '%s%s' % (frame.get('function') or NATIVE_UNKNOWN_STRING, file)
+            symbol = '%s%s' % (frame.get('function')
+                               or NATIVE_UNKNOWN_STRING, file)
             if next and parse_addr(frame['instruction_addr']) == \
                parse_addr(next['instruction_addr']):
                 symbol = '[inlined] ' + symbol
         return '%s%s%s%s%s' % (
             str(number).ljust(4, ' '),
-            (frame.get('package') or NATIVE_UNKNOWN_STRING).rsplit('/', 1)[-1].ljust(32, ' '),
+            (frame.get('package') or NATIVE_UNKNOWN_STRING).rsplit(
+                '/', 1)[-1].ljust(32, ' '),
             hex(instruction_addr).ljust(20, ' '), symbol, offset
         )
 
@@ -143,8 +161,10 @@ class AppleCrashReport(object):
         if self.symbolicated or self.debug_images is None:
             return ''
         binary_images = map(
-            lambda i: self._convert_debug_meta_to_binary_image_row(debug_image=i),
-            sorted(self.debug_images, key=lambda i: parse_addr(i['image_addr']))
+            lambda i: self._convert_debug_meta_to_binary_image_row(
+                debug_image=i),
+            sorted(self.debug_images,
+                   key=lambda i: parse_addr(i['image_addr']))
         )
         return 'Binary Images:\n' + '\n'.join(binary_images)
 
@@ -153,6 +173,7 @@ class AppleCrashReport(object):
         image_addr = parse_addr(debug_image['image_addr']) + slide_value
         return '%s - %s %s %s  <%s> %s' % (
             hex(image_addr), hex(image_addr + debug_image['image_size'] - 1),
-            debug_image['name'].rsplit('/', 1)[-1], self.context['device']['arch'],
+            debug_image['name'].rsplit(
+                '/', 1)[-1], self.context['device']['arch'],
             debug_image['uuid'].replace('-', '').lower(), debug_image['name']
         )
diff --git a/tests/sentry/lang/native/test_applecrashreport.py b/tests/sentry/lang/native/test_applecrashreport.py
index f3f9a93a25..332f8077b2 100644
--- a/tests/sentry/lang/native/test_applecrashreport.py
+++ b/tests/sentry/lang/native/test_applecrashreport.py
@@ -131,8 +131,7 @@ def test_get_threads_apple_string():
         ]
     )
     threads = acr.get_threads_apple_string()
-    assert threads == 'Thread 1 name: \n\
-Thread 1 Crashed:\n\
+    assert threads == 'Thread 1 Crashed:\n\
 0   SentrySwift                     0x31c3e8            0x2c8000 + 2544\n\
 1   SentrySwift                     0x31caa4            0x2c8000 + 108\n\n\
 Thread 2 name: com.apple.test\n\
@@ -253,8 +252,7 @@ def test_get_threads_apple_string_symbolicated():
     )
     threads = acr.get_threads_apple_string()
     assert threads.rstrip() == '''\
-Thread 1 name: \n\
-Thread 1 Crashed:
+Thread 1 Crashed:\n\
 0   SentrySwift                     0x31c3e8            UIApplication.sentryClient_sendAction(Selector, to : AnyObject?, from : AnyObject?, for : UIEvent?) -> Bool (SentrySwizzle.swift:92)
 1   SentrySwift                     0x31caa4            @objc UIApplication.sentryClient_sendAction(Selector, to : AnyObject?, from : AnyObject?, for : UIEvent?) -> Bool
 
@@ -458,8 +456,7 @@ def test_get_thread_apple_string():
         }
     )
     # TODO(hazat): the address here in a real crash is 0x0000000100556cc4 but we just get 0x556cc4
-    assert thread == 'Thread 1 name: \n\
-Thread 1 Crashed:\n\
+    assert thread == 'Thread 1 Crashed:\n\
 0   libswiftCore.dylib              0x556cc4            0x3f8000 + 160\n\
 1   libswiftCore.dylib              0x556cc4            0x3f8000 + 160\n\
 2   SentrySwift                     0x312308            0x2c8000 + 136\n\
@@ -676,7 +673,7 @@ def test__convert_debug_meta_to_binary_image_row():
 
 def test__get_exception_info():
     acr = AppleCrashReport(
-        exception=[
+        exceptions=[
             {
                 "value": "Attempted to dereference garbage pointer 0x10.",
                 "mechanism": {
@@ -709,7 +706,7 @@ Attempted to dereference garbage pointer 0x10.'
 
 def test__get_exception_info_partial():
     acr = AppleCrashReport(
-        exception=[
+        exceptions=[
             {
                 "value": "Attempted to dereference garbage pointer 0x10.",
                 "mechanism": {
