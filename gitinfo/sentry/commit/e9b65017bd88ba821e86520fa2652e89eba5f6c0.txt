commit e9b65017bd88ba821e86520fa2652e89eba5f6c0
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jun 18 06:48:07 2014 +0800

    Add service-based notification actions

diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index b07210947d..f553fc8115 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -182,6 +182,7 @@ TAG_LABELS = {
 # TODO(dcramer): once this is more flushed out we want this to be extendable
 SENTRY_RULES = (
     'sentry.rules.actions.notify_event.NotifyEventAction',
+    'sentry.rules.actions.notify_event_service.NotifyEventServiceAction',
     'sentry.rules.conditions.every_event.EveryEventCondition',
     'sentry.rules.conditions.first_seen_event.FirstSeenEventCondition',
     'sentry.rules.conditions.regression_event.RegressionEventCondition',
diff --git a/src/sentry/rules/actions/notify_event.py b/src/sentry/rules/actions/notify_event.py
index baff0b9b30..e0a055d048 100644
--- a/src/sentry/rules/actions/notify_event.py
+++ b/src/sentry/rules/actions/notify_event.py
@@ -14,18 +14,23 @@ from sentry.utils.safe import safe_execute
 
 
 class NotifyEventAction(EventAction):
-    label = 'Send a notification'
+    label = 'Send a notification (for all enabled services)'
 
-    def after(self, event, state):
+    def get_plugins(self):
         from sentry.plugins.bases.notify import NotificationPlugin
 
-        group = event.group
-
-        for plugin in plugins.for_project(event.project):
+        results = []
+        for plugin in plugins.for_project(self.project):
             if not isinstance(plugin, NotificationPlugin):
                 continue
+            results.append(plugin)
+        return results
+
+    def after(self, event, state):
+        group = event.group
 
-            if not safe_execute(plugin.should_notify, group, event):
+        for plugin in self.get_plugins():
+            if not safe_execute(plugin.should_notify, group=group, event=event):
                 continue
 
             safe_execute(plugin.notify_users, group=group, event=event)
diff --git a/src/sentry/rules/actions/notify_event_service.py b/src/sentry/rules/actions/notify_event_service.py
new file mode 100644
index 0000000000..13505398d1
--- /dev/null
+++ b/src/sentry/rules/actions/notify_event_service.py
@@ -0,0 +1,66 @@
+"""
+sentry.rules.actions.notify_event_service
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from django import forms
+
+from sentry.plugins import plugins
+from sentry.rules.actions.base import EventAction
+
+
+class NotifyEventServiceForm(forms.Form):
+    service = forms.ChoiceField(choices=())
+
+    def __init__(self, *args, **kwargs):
+        plugins = kwargs.pop('plugins')
+
+        super(NotifyEventServiceForm, self).__init__(*args, **kwargs)
+
+        service_choices = [
+            (plugin.slug, plugin.get_title())
+            for plugin in plugins
+        ]
+
+        self.fields['service'].choices = service_choices
+        self.fields['service'].widget.choices = self.fields['service'].choices
+
+
+class NotifyEventServiceAction(EventAction):
+    form_cls = NotifyEventServiceForm
+    label = 'Send a notification via {service}'
+
+    def after(self, event, state):
+        service = self.get_option('service')
+
+        plugin = plugins.get(service)
+        if not plugin.is_enabled(self.project):
+            return
+
+        group = event.group
+
+        if not plugin.should_notify(group=group, event=event):
+            return
+
+        plugin.notify_users(group=group, event=event)
+
+    def get_plugins(self):
+        from sentry.plugins.bases.notify import NotificationPlugin
+
+        results = []
+        for plugin in plugins.for_project(self.project):
+            if not isinstance(plugin, NotificationPlugin):
+                continue
+            results.append(plugin)
+        return results
+
+    def get_form_instance(self):
+        return self.form_cls(
+            self.data,
+            plugins=self.get_plugins(),
+        )
diff --git a/src/sentry/rules/base.py b/src/sentry/rules/base.py
index 7a39dc92cf..afeb245f47 100644
--- a/src/sentry/rules/base.py
+++ b/src/sentry/rules/base.py
@@ -63,6 +63,11 @@ class RuleBase(object):
     def get_option(self, key):
         return self.data.get(key)
 
+    def get_form_instance(self):
+        return self.form_cls(
+            self.data,
+        )
+
     def render_label(self):
         return self.label.format(**self.data)
 
@@ -70,9 +75,7 @@ class RuleBase(object):
         if not self.form_cls:
             return self.label
 
-        form = self.form_cls(
-            self.data,
-        )
+        form = self.get_form_instance()
 
         def replace_field(match):
             field = match.group(1)
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 8bd54852ad..a630ab1f55 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -233,22 +233,21 @@ class RuleTestCase(TestCase):
             data=data or {},
         )
 
-    def assertPasses(self, rule, event=None, **kwargs):
-        if event is None:
-            event = self.event
+    def get_state(self, **kwargs):
         kwargs.setdefault('is_new', True)
         kwargs.setdefault('is_regression', True)
         kwargs.setdefault('is_sample', True)
         kwargs.setdefault('rule_is_active', False)
-        state = EventState(**kwargs)
+        return EventState(**kwargs)
+
+    def assertPasses(self, rule, event=None, **kwargs):
+        if event is None:
+            event = self.event
+        state = self.get_state(**kwargs)
         assert rule.passes(event, state) is True
 
     def assertDoesNotPass(self, rule, event=None, **kwargs):
         if event is None:
             event = self.event
-        kwargs.setdefault('is_new', True)
-        kwargs.setdefault('is_regression', True)
-        kwargs.setdefault('is_sample', True)
-        kwargs.setdefault('rule_is_active', False)
-        state = EventState(**kwargs)
+        state = self.get_state(**kwargs)
         assert rule.passes(event, state) is False
diff --git a/tests/sentry/rules/actions/test_notify_event.py b/tests/sentry/rules/actions/test_notify_event.py
new file mode 100644
index 0000000000..97c33621ba
--- /dev/null
+++ b/tests/sentry/rules/actions/test_notify_event.py
@@ -0,0 +1,17 @@
+from mock import patch
+
+from sentry.testutils.cases import RuleTestCase
+from sentry.rules.actions.notify_event import NotifyEventAction
+
+
+class NotifyEventActionTest(RuleTestCase):
+    rule_cls = NotifyEventAction
+
+    @patch('sentry.plugins.sentry_mail.models.MailPlugin.notify_users')
+    def test_applies_correctly(self, mail_notify_users):
+        event = self.get_event()
+
+        rule = self.get_rule()
+        rule.after(event=event, state=self.get_state())
+
+        mail_notify_users.assert_called_once_with(group=event.group, event=event)
diff --git a/tests/sentry/rules/actions/test_notify_event_service.py b/tests/sentry/rules/actions/test_notify_event_service.py
new file mode 100644
index 0000000000..505a506911
--- /dev/null
+++ b/tests/sentry/rules/actions/test_notify_event_service.py
@@ -0,0 +1,19 @@
+from mock import patch
+
+from sentry.testutils.cases import RuleTestCase
+from sentry.rules.actions.notify_event_service import NotifyEventServiceAction
+
+
+class NotifyEventServiceActionTest(RuleTestCase):
+    rule_cls = NotifyEventServiceAction
+
+    @patch('sentry.plugins.sentry_mail.models.MailPlugin.notify_users')
+    def test_applies_correctly(self, mail_notify_users):
+        event = self.get_event()
+
+        rule = self.get_rule({
+            'service': 'mail',
+        })
+        rule.after(event=event, state=self.get_state())
+
+        mail_notify_users.assert_called_once_with(group=event.group, event=event)
