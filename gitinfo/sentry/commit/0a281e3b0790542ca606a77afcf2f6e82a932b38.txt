commit 0a281e3b0790542ca606a77afcf2f6e82a932b38
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Jan 17 14:41:28 2018 -0800

    feat(environments): Add environments toggle if feature flag is enabled (#6927)

diff --git a/src/sentry/static/sentry/app/actionCreators/environments.jsx b/src/sentry/static/sentry/app/actionCreators/environments.jsx
new file mode 100644
index 0000000000..4d60745062
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/environments.jsx
@@ -0,0 +1,9 @@
+import EnvironmentActions from '../actions/environmentActions';
+
+export function setActiveEnvironment(environment) {
+  EnvironmentActions.setActive(environment);
+}
+
+export function clearActiveEnvironment() {
+  EnvironmentActions.clearActive();
+}
diff --git a/src/sentry/static/sentry/app/actions/environmentActions.jsx b/src/sentry/static/sentry/app/actions/environmentActions.jsx
new file mode 100644
index 0000000000..cbe6085034
--- /dev/null
+++ b/src/sentry/static/sentry/app/actions/environmentActions.jsx
@@ -0,0 +1,5 @@
+import Reflux from 'reflux';
+
+let AlertActions = Reflux.createActions(['setActive', 'clearActive']);
+
+export default AlertActions;
diff --git a/src/sentry/static/sentry/app/components/projectHeader/index.jsx b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
index 5257577ae9..554ec4f233 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/index.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
@@ -5,22 +5,43 @@ import classNames from 'classnames';
 
 import ProjectSelector from './projectSelector';
 import BookmarkToggle from '../projects/bookmarkToggle';
+import DropdownLink from '../dropdownLink';
+import MenuItem from '../menuItem';
 
 import {t} from '../../locale';
 
+import {
+  setActiveEnvironment,
+  clearActiveEnvironment,
+} from '../../actionCreators/environments';
+
 class ProjectHeader extends React.Component {
   static propTypes = {
     project: PropTypes.object.isRequired,
     organization: PropTypes.object.isRequired,
+    environments: PropTypes.array.isRequired,
     activeSection: PropTypes.string,
+    activeEnvironment: PropTypes.object,
+  };
+
+  static defaultProps = {
+    environments: [],
   };
 
   render() {
+    let {project, environments, activeEnvironment} = this.props;
     let navSection = this.props.activeSection;
-    let project = this.props.project;
     let org = this.props.organization;
     let features = new Set(project.features);
     let access = new Set(org.access);
+    let allEnvironmentsLabel = t('All environments');
+
+    // TODO: remove when feature is released
+    let hasEnvironmentsFeature = new Set(org.features).has('environments');
+
+    let activeEnvironmentTitle = activeEnvironment
+      ? activeEnvironment.name
+      : allEnvironmentsLabel;
 
     let projectIconClass = classNames('project-select-bookmark icon icon-star-solid', {
       active: project.isBookmarked,
@@ -28,40 +49,65 @@ class ProjectHeader extends React.Component {
 
     return (
       <div className="sub-header flex flex-container flex-vertically-centered">
-        <div className="p-t-1">
-          <div className="project-select-wrapper">
-            <ProjectSelector organization={org} projectId={project.slug} />
-            <BookmarkToggle orgId={org.slug} project={project}>
-              <a className={projectIconClass} />
-            </BookmarkToggle>
-          </div>
+        <div className="project-header p-t-1">
+          <div className="project-header-main">
+            <div className="project-select-wrapper">
+              <ProjectSelector organization={org} projectId={project.slug} />
+              <BookmarkToggle orgId={org.slug} project={project}>
+                <a className={projectIconClass} />
+              </BookmarkToggle>
+            </div>
 
-          <ul className="nav nav-tabs">
-            <li className={navSection == 'stream' ? 'active' : ''}>
-              <Link to={`/${org.slug}/${project.slug}/`}>{t('Issues')}</Link>
-            </li>
-            {features.has('global-events') && (
-              <li className={navSection == 'events' ? 'active' : ''}>
-                <Link to={`/${org.slug}/${project.slug}/events/`}>{t('Events')}</Link>
+            <ul className="nav nav-tabs">
+              <li className={navSection == 'stream' ? 'active' : ''}>
+                <Link to={`/${org.slug}/${project.slug}/`}>{t('Issues')}</Link>
+              </li>
+              {features.has('global-events') && (
+                <li className={navSection == 'events' ? 'active' : ''}>
+                  <Link to={`/${org.slug}/${project.slug}/events/`}>{t('Events')}</Link>
+                </li>
+              )}
+              <li className={navSection == 'dashboard' ? 'active' : ''}>
+                <Link to={`/${org.slug}/${project.slug}/dashboard/`}>
+                  {t('Overview')}
+                </Link>
               </li>
-            )}
-            <li className={navSection == 'dashboard' ? 'active' : ''}>
-              <Link to={`/${org.slug}/${project.slug}/dashboard/`}>{t('Overview')}</Link>
-            </li>
-            <li className={navSection == 'user-feedback' ? 'active' : ''}>
-              <Link to={`/${org.slug}/${project.slug}/user-feedback/`}>
-                {t('User Feedback')}
-              </Link>
-            </li>
-            <li className={navSection == 'releases' ? 'active' : ''}>
-              <Link to={`/${org.slug}/${project.slug}/releases/`}>{t('Releases')}</Link>
-            </li>
-            {access.has('project:write') && (
-              <li className={navSection == 'settings' ? 'active' : ''}>
-                <Link to={`/${org.slug}/${project.slug}/settings/`}>{t('Settings')}</Link>
+              <li className={navSection == 'user-feedback' ? 'active' : ''}>
+                <Link to={`/${org.slug}/${project.slug}/user-feedback/`}>
+                  {t('User Feedback')}
+                </Link>
               </li>
-            )}
-          </ul>
+              <li className={navSection == 'releases' ? 'active' : ''}>
+                <Link to={`/${org.slug}/${project.slug}/releases/`}>{t('Releases')}</Link>
+              </li>
+              {access.has('project:write') && (
+                <li className={navSection == 'settings' ? 'active' : ''}>
+                  <Link to={`/${org.slug}/${project.slug}/settings/`}>
+                    {t('Settings')}
+                  </Link>
+                </li>
+              )}
+            </ul>
+          </div>
+          {hasEnvironmentsFeature && (
+            <div className="project-header-toggle">
+              <label>Environment</label>
+              <DropdownLink
+                anchorRight={true}
+                title={activeEnvironmentTitle}
+                className="environment-selector-toggle"
+              >
+                <MenuItem onClick={clearActiveEnvironment}>
+                  {allEnvironmentsLabel}
+                </MenuItem>
+                {environments.map(env => (
+                  <MenuItem key={env.id} onClick={() => setActiveEnvironment(env)}>
+                    {env.name}
+                  </MenuItem>
+                ))}
+              </DropdownLink>
+            </div>
+          )}
         </div>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/stores/latestContextStore.jsx b/src/sentry/static/sentry/app/stores/latestContextStore.jsx
index d3f7402433..455f234584 100644
--- a/src/sentry/static/sentry/app/stores/latestContextStore.jsx
+++ b/src/sentry/static/sentry/app/stores/latestContextStore.jsx
@@ -2,6 +2,7 @@ import Reflux from 'reflux';
 
 import ProjectActions from '../actions/projectActions';
 import OrganizationsActions from '../actions/organizationsActions';
+import EnvironmentActions from '../actions/environmentActions';
 
 // Keeps track of last usable project/org
 // this currently won't track when users navigate out of a org/project completely,
@@ -19,12 +20,15 @@ const LatestContextStore = Reflux.createStore({
     this.listenTo(ProjectActions.setActive, this.onSetActiveProject);
     this.listenTo(OrganizationsActions.setActive, this.onSetActiveOrganization);
     this.listenTo(OrganizationsActions.update, this.onUpdateOrganization);
+    this.listenTo(EnvironmentActions.setActive, this.onSetActiveEnvironment);
+    this.listenTo(EnvironmentActions.clearActive, this.onClearActiveEnvironment);
   },
 
   reset() {
     this.state = {
       project: null,
       organization: null,
+      environment: null,
     };
     return this.state;
   },
@@ -57,10 +61,22 @@ const LatestContextStore = Reflux.createStore({
     } else if (!this.state.project || this.state.project.slug !== project.slug) {
       // Update only if different
       this.state.project = {...project};
+      this.state.environment = null;
     }
 
     this.trigger(this.state);
   },
+
+  onSetActiveEnvironment(environment) {
+    this.state.environment = environment;
+
+    this.trigger(this.state);
+  },
+
+  onClearActiveEnvironment() {
+    this.state.environment = null;
+    this.trigger(this.state);
+  },
 });
 
 export default LatestContextStore;
diff --git a/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx b/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx
index 0109cca6be..6acdea0575 100644
--- a/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx
@@ -1,21 +1,36 @@
 import React from 'react';
-
+import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
 
+import EnvironmentStore from '../stores/environmentStore';
+import LatestContextStore from '../stores/latestContextStore';
+
 import DiffModal from '../components/modals/diffModal';
 import ProjectHeader from '../components/projectHeader';
 import ProjectState from '../mixins/projectState';
 
 const ProjectDetailsLayout = createReactClass({
   displayName: 'ProjectDetailsLayout',
-  mixins: [ProjectState],
+  mixins: [
+    ProjectState,
+    Reflux.connect(EnvironmentStore, 'environments'),
+    Reflux.listenTo(LatestContextStore, 'onLatestContextChange'),
+  ],
 
   getInitialState() {
     return {
+      environments: [],
       projectNavSection: null,
+      activeEnvironment: null,
     };
   },
 
+  onLatestContextChange(context) {
+    this.setState({
+      activeEnvironment: context.environment,
+    });
+  },
+
   /**
    * This callback can be invoked by the child component
    * to update the active nav section (which is then passed
@@ -36,6 +51,8 @@ const ProjectDetailsLayout = createReactClass({
           activeSection={this.state.projectNavSection}
           project={this.context.project}
           organization={this.getOrganization()}
+          environments={this.state.environments}
+          activeEnvironment={this.state.activeEnvironment}
         />
         <div className="container">
           <div className="content">
diff --git a/src/sentry/static/sentry/less/layout.less b/src/sentry/static/sentry/less/layout.less
index f304597997..963b00e998 100644
--- a/src/sentry/static/sentry/less/layout.less
+++ b/src/sentry/static/sentry/less/layout.less
@@ -161,6 +161,23 @@ body.auth {
     }
   }
 
+  .project-header {
+    display: flex;
+    &-main {
+      flex-grow: 1;
+    }
+    &-toggle {
+      text-align: right;
+      label {
+        color: @gray-lighter;
+        font-size: 14px;
+        font-weight: normal;
+        display: block;
+        margin-top: 8px;
+      }
+    }
+  }
+
   .project-select-wrapper {
     display: flex;
     align-items: center;
@@ -176,6 +193,11 @@ body.auth {
     }
   }
 
+  .environment-selector-toggle {
+    color: @gray-darkest;
+    font-weight: 600;
+  }
+
   .project-select {
     position: relative;
 
